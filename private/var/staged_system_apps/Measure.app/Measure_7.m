uint64_t sub_100307B84(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7;
  uint64_t v9[2];

  v7 = sub_100308C5C(a1, a2, a3, a5);
  *(_QWORD *)v7 = off_100452E28;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_10029430C(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_100307C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_100308ED8(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100307C50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452E58;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

uint64_t sub_100307CF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452E58;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_100307D90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452E58;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

unint64_t sub_100307E40(unint64_t result, uint64_t a2, unint64_t a3, int a4, int a5, int a6, double a7, double a8, double a9)
{
  unint64_t v9;
  int v10;
  int v11;
  float *v12;
  float v13;
  _BOOL4 v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  float v42;
  float *v43;
  float v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  float v51;
  float *v52;
  float v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  float32x4_t v58;
  float32x4_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  float v64;
  float *v65;
  float v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  float v74;
  float *v75;
  float v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  float32x4_t v81;
  float32x4_t *v82;
  BOOL v84;
  uint64_t v86;
  uint64_t v87;
  const float *v88;
  const float *v89;
  float *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  float32x4_t v94;
  float32x4_t *v95;
  BOOL v97;
  BOOL v99;
  BOOL v101;
  BOOL v103;
  BOOL v105;
  uint64_t v107;
  uint64_t v108;
  const float *v109;
  const float *v110;
  const float *v111;
  float *v112;
  BOOL v114;
  uint64_t v116;
  uint64_t v117;
  const float *v118;
  const float *v119;
  float *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  float32x4_t v124;
  float32x4_t *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  float v131;
  float *v132;
  float v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  float32x4_t v138;
  float32x4_t *v139;
  BOOL v141;
  BOOL v143;
  BOOL v145;
  BOOL v147;
  BOOL v149;
  uint64_t v151;
  uint64_t v152;
  const float *v153;
  const float *v154;
  const float *v155;
  float *v156;
  BOOL v158;
  BOOL v160;
  BOOL v162;
  BOOL v164;
  BOOL v166;
  uint64_t v168;
  uint64_t v169;
  const float *v170;
  const float *v171;
  const float *v172;
  float *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _BOOL4 v178;
  BOOL v179;
  uint64_t v180;
  BOOL v181;
  float32x4x4_t v182;
  float32x4x4_t v183;
  float32x4x4_t v184;
  float32x4x4_t v185;
  float32x4x4_t v186;
  float32x4x4_t v187;
  float32x4x4_t v188;
  float32x4x4_t v189;
  float32x4x4_t v190;
  float32x4x4_t v191;
  float32x4x4_t v192;
  float32x4x4_t v193;
  float32x4x4_t v194;
  float32x4x4_t v195;
  float32x4x4_t v196;
  float32x4x4_t v197;
  float32x4x4_t v198;
  float32x4x4_t v199;

  v9 = a3;
  v10 = *(_DWORD *)(result + 8);
  if (v10 >= 0)
    v11 = *(_DWORD *)(result + 8);
  else
    v11 = v10 + 1;
  v12 = (float *)(*(_QWORD *)(result + 32) + 4 * (v11 >> 1));
  v13 = *v12;
  if (*v12 == 2.0)
  {
    v14 = v12[1] == 1.0;
    if (v13 == -2.0)
      goto LABEL_6;
  }
  else
  {
    v14 = 0;
    if (v13 == -2.0)
    {
LABEL_6:
      v181 = v12[1] == 1.0;
      *(float *)&a8 = v12[1];
      if (v13 == 0.0)
        goto LABEL_7;
      goto LABEL_12;
    }
  }
  v181 = 0;
  *(float *)&a8 = v12[1];
  if (v13 == 0.0)
  {
LABEL_7:
    if (*(float *)&a8 == 1.0)
    {
      v15 = 1;
      LODWORD(a8) = 1.0;
      if (!a5)
        return result;
    }
    else
    {
      v15 = *(float *)&a8 == -1.0;
      if (!a5)
        return result;
    }
    goto LABEL_15;
  }
LABEL_12:
  v15 = 0;
  if (a5)
  {
LABEL_15:
    v16 = 0;
    v17 = (uint64_t)v11 >> 1;
    v18 = *(_DWORD *)(result + 120);
    LODWORD(a9) = *(_DWORD *)(result + 116);
    v19 = (unint64_t *)(a2 + 8 * v17);
    v20 = a4;
    v21 = a6 - 4;
    v22 = *v19;
    result = 3;
    if (v21 > 3)
      result = a6 - 4;
    v23 = ((4 * result) & 0x1FFFFFFF0) + 16;
    v176 = (16 * ((result >> 2) & 0x1FFFFFFF)) | 4;
    v177 = (result >> 2) + 1;
    v175 = (16 * ((result >> 2) & 0x1FFFFFFF)) | 8;
    v180 = v177 & 0x3FFFFFFC;
    v174 = (4 * result) | 0xC;
    v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
    v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
    v26.i64[0] = 0x4000000040000000;
    v26.i64[1] = 0x4000000040000000;
    v178 = v14;
    v179 = v15;
    while (1)
    {
      v27 = v22;
      v28 = v9 + v16 * v20;
      v29 = v28 + v23;
      v30 = v19[1];
      ++v19;
      v22 = v30;
      v31 = *(v19 - 2);
      if ((v18 & 1) != 0)
      {
        if (!v14)
        {
          if (!v181)
          {
            if (a6 < 4)
            {
              v68 = 0;
              if (a6 > 0)
                goto LABEL_181;
              goto LABEL_18;
            }
            if (result < 0x1C)
            {
              v68 = 0;
              goto LABEL_178;
            }
            v68 = 0;
            v158 = a3 < v22 + v23 && v22 < v29;
            v160 = a3 < v27 + v176 && v27 < v29;
            v162 = a3 < v27 + v175 && v27 + 4 < v29;
            v164 = a3 < v27 + v174 && v27 + 8 < v29;
            v166 = a3 < v27 + v23 && v27 + 12 < v29;
            if (v31 < v29 && a3 < v31 + v23)
            {
              v14 = v178;
              v15 = v179;
              goto LABEL_178;
            }
            v14 = v178;
            v15 = v179;
            if (v158)
              goto LABEL_178;
            if (v160)
              goto LABEL_178;
            if (v162)
              goto LABEL_178;
            if (v164)
              goto LABEL_178;
            if (v166)
              goto LABEL_178;
            v168 = 0;
            v169 = v177 & 0x3FFFFFFC;
            do
            {
              v170 = (const float *)(v31 + v168);
              v186 = vld4q_f32(v170);
              v171 = (const float *)(v22 + v168);
              v191 = vld4q_f32(v171);
              v172 = (const float *)(v27 + v168);
              v195 = vld4q_f32(v172);
              v199.val[0] = vaddq_f32(v25, vmlaq_f32(vmulq_n_f32(v195.val[0], v13), v24, vaddq_f32(v186.val[0], v191.val[0])));
              v199.val[1] = vaddq_f32(v25, vmlaq_f32(vmulq_n_f32(v195.val[1], v13), v24, vaddq_f32(v186.val[1], v191.val[1])));
              v199.val[2] = vaddq_f32(v25, vmlaq_f32(vmulq_n_f32(v195.val[2], v13), v24, vaddq_f32(v186.val[2], v191.val[2])));
              v199.val[3] = vaddq_f32(v25, vmlaq_f32(vmulq_n_f32(v195.val[3], v13), v24, vaddq_f32(v186.val[3], v191.val[3])));
              v173 = (float *)(a3 + v168);
              vst4q_f32(v173, v199);
              v168 += 64;
              v169 -= 4;
            }
            while (v169);
            v68 = 4 * (v177 & 0x3FFFFFFC);
            if (v177 != v180)
            {
LABEL_178:
              v126 = 4 * v68;
              v127 = v22 + 8;
              v128 = v27 + 8;
              v129 = v31;
              v130 = a3;
              do
              {
                v131 = *(float *)&a9
                     + (float)((float)(v13 * *(float *)(v128 + v126 - 4))
                             + (float)((float)(*(float *)(v129 + v126 + 4) + *(float *)(v127 + v126 - 4)) * *(float *)&a8));
                v132 = (float *)(v130 + v126);
                *(float *)(v130 + v126) = *(float *)&a9
                                        + (float)((float)(v13 * *(float *)(v128 + v126 - 8))
                                                + (float)((float)(*(float *)(v129 + v126) + *(float *)(v127 + v126 - 8))
                                                        * *(float *)&a8));
                v132[1] = v131;
                v133 = *(float *)&a9
                     + (float)((float)(v13 * *(float *)(v128 + v126 + 4))
                             + (float)((float)(*(float *)(v129 + v126 + 12) + *(float *)(v127 + v126 + 4))
                                     * *(float *)&a8));
                v68 += 4;
                v130 += 16;
                v132[2] = *(float *)&a9
                        + (float)((float)(v13 * *(float *)(v128 + v126))
                                + (float)((float)(*(float *)(v129 + v126 + 8) + *(float *)(v127 + v126)) * *(float *)&a8));
                v132[3] = v133;
                v127 += 16;
                v129 += 16;
                v128 += 16;
              }
              while (v68 <= v21);
            }
            v68 = v68;
            if ((int)v68 < a6)
            {
LABEL_181:
              v134 = a6 - v68;
              if (v134 < 0xC)
                goto LABEL_280;
              v135 = 4 * v68;
              v136 = v28 + 4 * v68;
              if (v136 - (4 * v68 + v31) < 0x20)
                goto LABEL_280;
              if (v136 - (v135 + v22) < 0x20)
                goto LABEL_280;
              if (v136 - (v135 + v27) < 0x20)
                goto LABEL_280;
              v68 += v134 & 0xFFFFFFFFFFFFFFF8;
              v137 = v134 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v138 = vaddq_f32(v25, vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v27 + v135 + 16), v13), v24, vaddq_f32(*(float32x4_t *)(v31 + 16 + v135), *(float32x4_t *)(v22 + 16 + v135))));
                v139 = (float32x4_t *)(a3 + v135);
                *v139 = vaddq_f32(v25, vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v27 + v135), v13), v24, vaddq_f32(*(float32x4_t *)(v31 + v135), *(float32x4_t *)(v22 + v135))));
                v139[1] = v138;
                v135 += 32;
                v137 -= 8;
              }
              while (v137);
              if (v134 != (v134 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_280:
                do
                {
                  *(float *)(a3 + 4 * v68) = *(float *)&a9
                                           + (float)((float)(v13 * *(float *)(v27 + 4 * v68))
                                                   + (float)((float)(*(float *)(v31 + 4 * v68)
                                                                   + *(float *)(v22 + 4 * v68))
                                                           * *(float *)&a8));
                  ++v68;
                }
                while (a6 != v68);
              }
              goto LABEL_18;
            }
            goto LABEL_18;
          }
          if (a6 < 4)
          {
            v37 = 0;
            if (a6 > 0)
              goto LABEL_79;
            goto LABEL_18;
          }
          if (result < 0x1C)
          {
            v37 = 0;
            goto LABEL_76;
          }
          v37 = 0;
          v141 = a3 < v27 + v176 && v27 < v29;
          v143 = a3 < v22 + v23 && v22 < v29;
          v145 = a3 < v27 + v175 && v27 + 4 < v29;
          v147 = a3 < v27 + v174 && v27 + 8 < v29;
          v149 = a3 < v27 + v23 && v27 + 12 < v29;
          if (v31 < v29 && a3 < v31 + v23)
          {
            v14 = v178;
            v15 = v179;
            goto LABEL_76;
          }
          v14 = v178;
          v15 = v179;
          if (v141)
            goto LABEL_76;
          if (v143)
            goto LABEL_76;
          if (v145)
            goto LABEL_76;
          if (v147)
            goto LABEL_76;
          if (v149)
            goto LABEL_76;
          v151 = 0;
          v152 = v177 & 0x3FFFFFFC;
          do
          {
            v153 = (const float *)(v31 + v151);
            v185 = vld4q_f32(v153);
            v154 = (const float *)(v27 + v151);
            v190 = vld4q_f32(v154);
            v155 = (const float *)(v22 + v151);
            v194 = vld4q_f32(v155);
            v198.val[0] = vaddq_f32(v25, vaddq_f32(vmlsq_f32(v185.val[0], v26, v190.val[0]), v194.val[0]));
            v198.val[1] = vaddq_f32(v25, vaddq_f32(vmlsq_f32(v185.val[1], v26, v190.val[1]), v194.val[1]));
            v198.val[2] = vaddq_f32(v25, vaddq_f32(vmlsq_f32(v185.val[2], v26, v190.val[2]), v194.val[2]));
            v198.val[3] = vaddq_f32(v25, vaddq_f32(vmlsq_f32(v185.val[3], v26, v190.val[3]), v194.val[3]));
            v156 = (float *)(a3 + v151);
            vst4q_f32(v156, v198);
            v151 += 64;
            v152 -= 4;
          }
          while (v152);
          v37 = 4 * (v177 & 0x3FFFFFFC);
          if (v177 != v180)
          {
LABEL_76:
            v69 = 4 * v37;
            v70 = v27 + 8;
            v71 = v22 + 8;
            v72 = v31;
            v73 = a3;
            do
            {
              v74 = *(float *)&a9
                  + (float)((float)(*(float *)(v72 + v69 + 4) - (float)(*(float *)(v70 + v69 - 4) * 2.0))
                          + *(float *)(v71 + v69 - 4));
              *(float *)(v73 + v69) = *(float *)&a9
                                    + (float)((float)(*(float *)(v72 + v69) - (float)(*(float *)(v70 + v69 - 8) * 2.0))
                                            + *(float *)(v71 + v69 - 8));
              v75 = (float *)(v73 + v69);
              v75[1] = v74;
              v76 = *(float *)&a9
                  + (float)((float)(*(float *)(v72 + v69 + 12) - (float)(*(float *)(v70 + v69 + 4) * 2.0))
                          + *(float *)(v71 + v69 + 4));
              v37 += 4;
              v73 += 16;
              v75[2] = *(float *)&a9
                     + (float)((float)(*(float *)(v72 + v69 + 8) - (float)(*(float *)(v70 + v69) * 2.0))
                             + *(float *)(v71 + v69));
              v75[3] = v76;
              v70 += 16;
              v72 += 16;
              v71 += 16;
            }
            while (v37 <= v21);
          }
          v37 = v37;
          if ((int)v37 < a6)
          {
LABEL_79:
            v77 = a6 - v37;
            if (v77 < 0xC)
              goto LABEL_281;
            v78 = 4 * v37;
            v79 = v28 + 4 * v37;
            if (v79 - (4 * v37 + v31) < 0x20)
              goto LABEL_281;
            if (v79 - (v78 + v27) < 0x20)
              goto LABEL_281;
            if (v79 - (v78 + v22) < 0x20)
              goto LABEL_281;
            v37 += v77 & 0xFFFFFFFFFFFFFFF8;
            v80 = v77 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v81 = vaddq_f32(v25, vaddq_f32(vmlsq_f32(*(float32x4_t *)(v31 + 16 + v78), v26, *(float32x4_t *)(v27 + 16 + v78)), *(float32x4_t *)(v22 + v78 + 16)));
              v82 = (float32x4_t *)(a3 + v78);
              *v82 = vaddq_f32(v25, vaddq_f32(vmlsq_f32(*(float32x4_t *)(v31 + v78), v26, *(float32x4_t *)(v27 + v78)), *(float32x4_t *)(v22 + v78)));
              v82[1] = v81;
              v78 += 32;
              v80 -= 8;
            }
            while (v80);
            if (v77 != (v77 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_281:
              do
              {
                *(float *)(a3 + 4 * v37) = *(float *)&a9
                                         + (float)((float)(*(float *)(v31 + 4 * v37)
                                                         + (float)(*(float *)(v27 + 4 * v37) * -2.0))
                                                 + *(float *)(v22 + 4 * v37));
                ++v37;
              }
              while (a6 != v37);
            }
            goto LABEL_18;
          }
          goto LABEL_18;
        }
        if (a6 < 4)
        {
          v35 = 0;
          if (a6 > 0)
            goto LABEL_54;
          goto LABEL_18;
        }
        if (result < 0x1C)
        {
          v35 = 0;
          goto LABEL_51;
        }
        v35 = 0;
        v97 = a3 < v27 + v176 && v27 < v29;
        v99 = a3 < v22 + v23 && v22 < v29;
        v101 = a3 < v27 + v175 && v27 + 4 < v29;
        v103 = a3 < v27 + v174 && v27 + 8 < v29;
        v105 = a3 < v27 + v23 && v27 + 12 < v29;
        if (v31 < v29 && a3 < v31 + v23)
        {
          v14 = v178;
          goto LABEL_51;
        }
        v14 = v178;
        if (v97)
          goto LABEL_51;
        if (v99)
          goto LABEL_51;
        if (v101)
          goto LABEL_51;
        if (v103)
          goto LABEL_51;
        if (v105)
          goto LABEL_51;
        v107 = 0;
        v108 = v177 & 0x3FFFFFFC;
        do
        {
          v109 = (const float *)(v31 + v107);
          v110 = (const float *)(v27 + v107);
          v183 = vld4q_f32(v109);
          v188 = vld4q_f32(v110);
          v111 = (const float *)(v22 + v107);
          v193 = vld4q_f32(v111);
          v197.val[0] = vaddq_f32(v25, vaddq_f32(vmlaq_f32(v183.val[0], v26, v188.val[0]), v193.val[0]));
          v197.val[1] = vaddq_f32(v25, vaddq_f32(vmlaq_f32(v183.val[1], v26, v188.val[1]), v193.val[1]));
          v197.val[2] = vaddq_f32(v25, vaddq_f32(vmlaq_f32(v183.val[2], v26, v188.val[2]), v193.val[2]));
          v197.val[3] = vaddq_f32(v25, vaddq_f32(vmlaq_f32(v183.val[3], v26, v188.val[3]), v193.val[3]));
          v112 = (float *)(a3 + v107);
          vst4q_f32(v112, v197);
          v107 += 64;
          v108 -= 4;
        }
        while (v108);
        v35 = 4 * (v177 & 0x3FFFFFFC);
        if (v177 != v180)
        {
LABEL_51:
          v46 = 4 * v35;
          v47 = v27 + 8;
          v48 = v22 + 8;
          v49 = v31;
          v50 = a3;
          do
          {
            v51 = *(float *)&a9
                + (float)((float)(*(float *)(v49 + v46 + 4) + (float)(*(float *)(v47 + v46 - 4) * 2.0))
                        + *(float *)(v48 + v46 - 4));
            *(float *)(v50 + v46) = *(float *)&a9
                                  + (float)((float)(*(float *)(v49 + v46) + (float)(*(float *)(v47 + v46 - 8) * 2.0))
                                          + *(float *)(v48 + v46 - 8));
            v52 = (float *)(v50 + v46);
            v52[1] = v51;
            v53 = *(float *)&a9
                + (float)((float)(*(float *)(v49 + v46 + 12) + (float)(*(float *)(v47 + v46 + 4) * 2.0))
                        + *(float *)(v48 + v46 + 4));
            v35 += 4;
            v50 += 16;
            v52[2] = *(float *)&a9
                   + (float)((float)(*(float *)(v49 + v46 + 8) + (float)(*(float *)(v47 + v46) * 2.0))
                           + *(float *)(v48 + v46));
            v52[3] = v53;
            v47 += 16;
            v49 += 16;
            v48 += 16;
          }
          while (v35 <= v21);
        }
        v35 = v35;
        v15 = v179;
        if ((int)v35 < a6)
        {
LABEL_54:
          v54 = a6 - v35;
          if (v54 < 0xC)
            goto LABEL_282;
          v55 = 4 * v35;
          v56 = v28 + 4 * v35;
          if (v56 - (4 * v35 + v31) < 0x20)
            goto LABEL_282;
          if (v56 - (v55 + v27) < 0x20)
            goto LABEL_282;
          if (v56 - (v55 + v22) < 0x20)
            goto LABEL_282;
          v35 += v54 & 0xFFFFFFFFFFFFFFF8;
          v57 = v54 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v58 = vaddq_f32(v25, vaddq_f32(vmlaq_f32(*(float32x4_t *)(v31 + 16 + v55), v26, *(float32x4_t *)(v27 + 16 + v55)), *(float32x4_t *)(v22 + v55 + 16)));
            v59 = (float32x4_t *)(a3 + v55);
            *v59 = vaddq_f32(v25, vaddq_f32(vmlaq_f32(*(float32x4_t *)(v31 + v55), v26, *(float32x4_t *)(v27 + v55)), *(float32x4_t *)(v22 + v55)));
            v59[1] = v58;
            v55 += 32;
            v57 -= 8;
          }
          while (v57);
          if (v54 != (v54 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_282:
            do
            {
              *(float *)(a3 + 4 * v35) = *(float *)&a9
                                       + (float)((float)(*(float *)(v31 + 4 * v35)
                                                       + (float)(*(float *)(v27 + 4 * v35) * 2.0))
                                               + *(float *)(v22 + 4 * v35));
              ++v35;
            }
            while (a6 != v35);
          }
          goto LABEL_18;
        }
        goto LABEL_18;
      }
      if (!v15)
      {
        if (a6 < 4)
        {
          v36 = 0;
          if (a6 > 0)
            goto LABEL_68;
          goto LABEL_18;
        }
        if (result < 0xC)
        {
          v36 = 0;
          goto LABEL_65;
        }
        v36 = 0;
        v114 = a3 < v31 + v23 && v31 < v29;
        if (v22 < v29 && a3 < v22 + v23)
          goto LABEL_65;
        if (v114)
          goto LABEL_65;
        v116 = 0;
        v117 = v177 & 0x3FFFFFFC;
        do
        {
          v118 = (const float *)(v22 + v116);
          v184 = vld4q_f32(v118);
          v119 = (const float *)(v31 + v116);
          v189 = vld4q_f32(v119);
          v196.val[0] = vmlaq_f32(v25, v24, vsubq_f32(v184.val[0], v189.val[0]));
          v196.val[1] = vmlaq_f32(v25, v24, vsubq_f32(v184.val[1], v189.val[1]));
          v196.val[2] = vmlaq_f32(v25, v24, vsubq_f32(v184.val[2], v189.val[2]));
          v196.val[3] = vmlaq_f32(v25, v24, vsubq_f32(v184.val[3], v189.val[3]));
          v120 = (float *)(a3 + v116);
          vst4q_f32(v120, v196);
          v116 += 64;
          v117 -= 4;
        }
        while (v117);
        v36 = 4 * (v177 & 0x3FFFFFFC);
        if (v177 != v180)
        {
LABEL_65:
          v60 = 4 * v36;
          v61 = v22 + 8;
          v62 = v31 + 8;
          v63 = a3;
          do
          {
            v64 = *(float *)&a9
                + (float)((float)(*(float *)(v61 + v60 - 4) - *(float *)(v62 + v60 - 4)) * *(float *)&a8);
            v65 = (float *)(v63 + v60);
            *(float *)(v63 + v60) = *(float *)&a9
                                  + (float)((float)(*(float *)(v61 + v60 - 8) - *(float *)(v62 + v60 - 8))
                                          * *(float *)&a8);
            v65[1] = v64;
            v66 = *(float *)&a9
                + (float)((float)(*(float *)(v61 + v60 + 4) - *(float *)(v62 + v60 + 4)) * *(float *)&a8);
            v36 += 4;
            v65[2] = *(float *)&a9 + (float)((float)(*(float *)(v61 + v60) - *(float *)(v62 + v60)) * *(float *)&a8);
            v65[3] = v66;
            v63 += 16;
            v61 += 16;
            v62 += 16;
          }
          while (v36 <= v21);
        }
        v36 = v36;
        if ((int)v36 < a6)
        {
LABEL_68:
          v67 = a6 - v36;
          if (v67 < 0xC)
            goto LABEL_283;
          v121 = 4 * v36;
          v122 = v28 + 4 * v36;
          if (v122 - (4 * v36 + v22) < 0x20)
            goto LABEL_283;
          if (v122 - (v121 + v31) < 0x20)
            goto LABEL_283;
          v36 += v67 & 0xFFFFFFFFFFFFFFF8;
          v123 = v67 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v124 = vmlaq_f32(v25, v24, vsubq_f32(*(float32x4_t *)(v22 + 16 + v121), *(float32x4_t *)(v31 + 16 + v121)));
            v125 = (float32x4_t *)(a3 + v121);
            *v125 = vmlaq_f32(v25, v24, vsubq_f32(*(float32x4_t *)(v22 + v121), *(float32x4_t *)(v31 + v121)));
            v125[1] = v124;
            v121 += 32;
            v123 -= 8;
          }
          while (v123);
          if (v67 != (v67 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_283:
            do
            {
              *(float *)(a3 + 4 * v36) = *(float *)&a9
                                       + (float)((float)(*(float *)(v22 + 4 * v36) - *(float *)(v31 + 4 * v36))
                                               * *(float *)&a8);
              ++v36;
            }
            while (a6 != v36);
          }
          goto LABEL_18;
        }
        goto LABEL_18;
      }
      if (*(float *)&a8 >= 0.0)
        v32 = *(v19 - 2);
      else
        v32 = v22;
      if (*(float *)&a8 >= 0.0)
        v33 = v22;
      else
        v33 = *(v19 - 2);
      if (a6 < 4)
      {
        v34 = 0;
        if (a6 > 0)
          goto LABEL_46;
        goto LABEL_18;
      }
      if (result < 0xC)
        break;
      v34 = 0;
      v84 = a3 < v33 + v23 && v33 < v29;
      if (v32 < v29 && a3 < v32 + v23)
        goto LABEL_43;
      if (v84)
        goto LABEL_43;
      v86 = 0;
      v87 = v177 & 0x3FFFFFFC;
      do
      {
        v88 = (const float *)(v33 + v86);
        v182 = vld4q_f32(v88);
        v89 = (const float *)(v32 + v86);
        v187 = vld4q_f32(v89);
        v192.val[0] = vaddq_f32(v25, vsubq_f32(v182.val[0], v187.val[0]));
        v192.val[1] = vaddq_f32(v25, vsubq_f32(v182.val[1], v187.val[1]));
        v192.val[2] = vaddq_f32(v25, vsubq_f32(v182.val[2], v187.val[2]));
        v192.val[3] = vaddq_f32(v25, vsubq_f32(v182.val[3], v187.val[3]));
        v90 = (float *)(a3 + v86);
        vst4q_f32(v90, v192);
        v86 += 64;
        v87 -= 4;
      }
      while (v87);
      v34 = 4 * (v177 & 0x3FFFFFFC);
      if (v177 != v180)
        goto LABEL_43;
LABEL_45:
      v34 = v34;
      if ((int)v34 < a6)
      {
LABEL_46:
        v45 = a6 - v34;
        if (v45 < 0xC)
          goto LABEL_284;
        v91 = 4 * v34;
        v92 = v28 + 4 * v34;
        if (v92 - (4 * v34 + v32) < 0x20)
          goto LABEL_284;
        if (v92 - (v91 + v33) < 0x20)
          goto LABEL_284;
        v34 += v45 & 0xFFFFFFFFFFFFFFF8;
        v93 = v45 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v94 = vaddq_f32(v25, vsubq_f32(*(float32x4_t *)(v33 + 16 + v91), *(float32x4_t *)(v32 + 16 + v91)));
          v95 = (float32x4_t *)(a3 + v91);
          *v95 = vaddq_f32(v25, vsubq_f32(*(float32x4_t *)(v33 + v91), *(float32x4_t *)(v32 + v91)));
          v95[1] = v94;
          v91 += 32;
          v93 -= 8;
        }
        while (v93);
        if (v45 != (v45 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_284:
          do
          {
            *(float *)(a3 + 4 * v34) = *(float *)&a9 + (float)(*(float *)(v33 + 4 * v34) - *(float *)(v32 + 4 * v34));
            ++v34;
          }
          while (a6 != v34);
        }
      }
LABEL_18:
      a3 += v20;
      ++v16;
      if (!--a5)
        return result;
    }
    v34 = 0;
LABEL_43:
    v38 = 4 * v34;
    v39 = v33 + 8;
    v40 = v32 + 8;
    v41 = a3;
    do
    {
      v42 = *(float *)&a9 + (float)(*(float *)(v39 + v38 - 4) - *(float *)(v40 + v38 - 4));
      v43 = (float *)(v41 + v38);
      *(float *)(v41 + v38) = *(float *)&a9 + (float)(*(float *)(v39 + v38 - 8) - *(float *)(v40 + v38 - 8));
      v43[1] = v42;
      v44 = *(float *)&a9 + (float)(*(float *)(v39 + v38 + 4) - *(float *)(v40 + v38 + 4));
      v34 += 4;
      v43[2] = *(float *)&a9 + (float)(*(float *)(v39 + v38) - *(float *)(v40 + v38));
      v43[3] = v44;
      v41 += 16;
      v39 += 16;
      v40 += 16;
    }
    while (v34 <= v21);
    goto LABEL_45;
  }
  return result;
}

uint64_t sub_100308C5C(uint64_t a1, uint64_t a2, int a3, double a4)
{
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  float v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_100452E58;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2)
      goto LABEL_21;
    v10 = *(_QWORD *)(a2 + 56);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(a1 + 72);
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 20);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v8 = *(_DWORD *)a2;
      v20 = *(_DWORD *)(a2 + 4);
      if (v20 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v20;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v21 = *(_QWORD **)(a2 + 72);
        v22 = *(_QWORD **)(a1 + 88);
        *v22 = *v21;
        v22[1] = v21[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v18 + 4 * v17++) = 0;
        v19 = *v9;
      }
      while (v17 < v19);
      *v8 = *(_DWORD *)a2;
      if ((int)v19 <= 2)
      {
        v20 = *(_DWORD *)(a2 + 4);
        if (v20 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v8, a2);
    goto LABEL_20;
  }
  LODWORD(v27) = 33619968;
  v28 = a1 + 16;
  v29 = 0;
  sub_1002181EC(a2, (uint64_t)&v27);
LABEL_21:
  v24 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v24 + v23 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  v25 = a4;
  *(float *)(a1 + 116) = v25;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v24 != 1 && v23 != 1)
  {
    v27 = 0;
    v28 = 0;
    qmemcpy((void *)sub_10029430C(&v27, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v27, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_100308EA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100308ED8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452E58;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

uint64_t sub_100308F78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452E58;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_100309018(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452E58;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

unint64_t sub_1003090C8(unint64_t result, uint64_t a2, float *a3, int a4, int a5, int a6, double a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  int32x4_t *v28;
  float *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int32x4_t *v38;
  int v39;
  uint64_t v40;
  float *v41;
  float *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  float32x4_t v51;
  unint64_t v52;
  float *v53;
  int v54;
  uint64_t v55;
  float *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  float *v60;
  BOOL v61;
  char v62;
  uint64_t v64;
  unint64_t v65;
  const float *v66;
  float *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float *v71;
  float v72;
  float v73;
  float v74;
  float *v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  float *v79;
  float *v80;
  unint64_t v81;
  BOOL v83;
  float32x4_t v85;
  uint64_t v86;
  unint64_t v87;
  float32x4_t v88;
  float32x4_t *v89;
  uint64_t v90;
  float32x4_t v91;
  uint64_t v92;
  int v93;
  float *v94;
  uint64_t v95;
  unint64_t v96;
  float32x4_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  float *v107;
  float v108;
  float **v109;
  uint64_t v110;
  float *v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  float32x4x4_t v118;
  float32x4x4_t v119;

  v7 = *(_DWORD *)(result + 8);
  if (v7 >= 0)
    v8 = *(_DWORD *)(result + 8);
  else
    v8 = v7 + 1;
  v9 = v8 >> 1;
  v10 = *(_QWORD *)(result + 32);
  v11 = (uint64_t)v8 >> 1;
  v12 = (float *)(v10 + 4 * (v8 >> 1));
  LODWORD(a7) = *(_DWORD *)(result + 116);
  v13 = (float **)(a2 + 8 * v9);
  if ((*(_BYTE *)(result + 120) & 1) != 0)
  {
    if (!a5)
      return result;
    v39 = a5 - 1;
    v40 = a4;
    if (a6 <= 3)
    {
      if (a6 >= 1)
      {
        if (v7 >= 2)
        {
          v104 = (v11 + 1);
          v105 = a2 + 8 * v11 - 8;
          do
          {
            v106 = v39;
            v107 = *v13;
            v108 = *(float *)&a7 + (float)(*v12 * **v13);
            v109 = (float **)v105;
            v110 = 1;
            do
            {
              v111 = *v109--;
              result = (unint64_t)v111;
              v108 = v108 + (float)(v12[v110] * (float)(*v13[v110] + *v111));
              ++v110;
            }
            while (v104 != v110);
            *a3 = v108;
            if (a6 != 1)
            {
              v112 = *(float *)&a7 + (float)(*v12 * v107[1]);
              v113 = 0x1FFFFFFFFFFFFFFFLL;
              v114 = 1;
              do
              {
                v112 = v112 + (float)(v12[v114] * (float)(v13[v114][1] + v13[v113][1]));
                ++v114;
                --v113;
              }
              while (v104 != v114);
              a3[1] = v112;
              if (a6 != 2)
              {
                v115 = *(float *)&a7 + (float)(*v12 * v107[2]);
                v116 = 0x1FFFFFFFFFFFFFFFLL;
                v117 = 1;
                do
                {
                  v115 = v115 + (float)(v12[v117] * (float)(v13[v117][2] + v13[v116][2]));
                  ++v117;
                  --v116;
                }
                while (v104 != v117);
                a3[2] = v115;
              }
            }
            a3 = (float *)((char *)a3 + a4);
            ++v13;
            --v39;
            v105 += 8;
          }
          while (v106);
        }
        else
        {
          v41 = a3 + 2;
          do
          {
            v42 = *v13;
            *(v41 - 2) = *(float *)&a7 + (float)(*v12 * **v13);
            if (a6 != 1)
            {
              *(v41 - 1) = *(float *)&a7 + (float)(*v12 * v42[1]);
              if (a6 != 2)
                *v41 = *(float *)&a7 + (float)(*v12 * v42[2]);
            }
            ++v13;
            v41 = (float *)((char *)v41 + a4);
            --a5;
          }
          while (a5);
        }
      }
      return result;
    }
    v43 = (a6 - 4);
    if (v7 >= 2)
    {
      v90 = (v11 + 1);
      v91 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      v92 = a2 + 8 * v11 - 8;
      do
      {
        result = 0;
        v93 = v39;
        v94 = *v13;
        v95 = 4;
        do
        {
          v96 = v95;
          v97 = vmlaq_n_f32(v91, *(float32x4_t *)&v94[result], *v12);
          v98 = (uint64_t *)v92;
          v99 = 1;
          do
          {
            v100 = *v98--;
            v97 = vmlaq_n_f32(v97, vaddq_f32(*(float32x4_t *)&v13[v99][result], *(float32x4_t *)(v100 + 4 * result)), v12[v99]);
            ++v99;
          }
          while (v90 != v99);
          *(float32x4_t *)&a3[result] = v97;
          result += 4;
          v95 += 4;
        }
        while (result <= v43);
        if ((int)result < a6)
        {
          do
          {
            v101 = *(float *)&a7 + (float)(*v12 * v94[v96]);
            result = v92;
            v102 = 1;
            do
            {
              v103 = *(_QWORD *)result;
              result -= 8;
              v101 = v101 + (float)(v12[v102] * (float)(v13[v102][v96] + *(float *)(v103 + 4 * v96)));
              ++v102;
            }
            while (v90 != v102);
            a3[v96++] = v101;
          }
          while (v96 < a6);
        }
        a3 = (float *)((char *)a3 + v40);
        ++v13;
        --v39;
        v92 += 8;
      }
      while (v93);
      return result;
    }
    v44 = 0;
    if ((unint64_t)(v43 & 0xFFFFFFFC) + 5 <= a6)
      v45 = a6;
    else
      v45 = (v43 & 0xFFFFFFFC) + 5;
    v46 = (4 * (a6 - 4)) & 0x3FFFFFFF0;
    v47 = 4 * v45 - v46;
    v48 = v10 + 4 * v11 + 4;
    v49 = v45 - (v43 & 0xFFFFFFFC) - 4;
    v50 = v46 + 16;
    result = (v43 >> 2) + 1;
    v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    v52 = v49 & 0xFFFFFFFFFFFFFFF8;
    v53 = a3;
    while (1)
    {
      v54 = v39;
      v55 = v44 * a4;
      v56 = *v13;
      if (v43 < 0xC)
        break;
      v57 = 0;
      v60 = (float *)((char *)a3 + v50 + v55);
      v61 = v53 >= (float *)((char *)v56 + v50) || v56 >= v60;
      v62 = !v61;
      v61 = v12 >= v60;
      v59 = 4;
      v58 = 0;
      if (!v61 && (unint64_t)v53 < v48)
        goto LABEL_71;
      if ((v62 & 1) != 0)
        goto LABEL_71;
      v64 = 0;
      v65 = result & 0x7FFFFFFC;
      do
      {
        v66 = &v56[v64];
        v118 = vld4q_f32(v66);
        v119.val[0] = vmlaq_n_f32(v51, v118.val[0], *v12);
        v119.val[1] = vmlaq_n_f32(v51, v118.val[1], *v12);
        v119.val[2] = vmlaq_n_f32(v51, v118.val[2], *v12);
        v119.val[3] = vmlaq_n_f32(v51, v118.val[3], *v12);
        v67 = &v53[v64];
        vst4q_f32(v67, v119);
        v64 += 16;
        v65 -= 4;
      }
      while (v65);
      v57 = result & 0x7FFFFFFC;
      v59 = (16 * ((v57 >> 2) & 0x1FFFFFFF)) | 4;
      v58 = 4 * v57;
      v68 = v57 - 1;
      v69 = v58;
      if (result != v57)
        goto LABEL_71;
LABEL_73:
      if ((int)v58 < a6)
      {
        if (v49 >= 0x10)
        {
          v77 = 4 * v68;
          v78 = (char *)a3 + v55 + v77 * 4 + 16;
          v79 = (float *)((char *)a3 + v47 + v55 + v77 * 4);
          v80 = &v56[v77];
          v81 = (unint64_t)&v56[v77 + 4];
          v83 = v78 < (char *)v80 + v47 && v81 < (unint64_t)v79;
          if (v12 >= v79 || (unint64_t)v78 >= v48)
          {
            if (v83)
            {
              v76 = v69;
            }
            else
            {
              v76 = v69 + v52;
              v85 = vld1q_dup_f32(v12);
              v86 = v69;
              v87 = v49 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v88 = vmlaq_f32(v51, *(float32x4_t *)&v56[v86 + 4], v85);
                v89 = (float32x4_t *)&v53[v86];
                *v89 = vmlaq_f32(v51, *(float32x4_t *)&v56[v86], v85);
                v89[1] = v88;
                v86 += 8;
                v87 -= 8;
              }
              while (v87);
              if (v49 == v52)
                goto LABEL_53;
            }
          }
          else
          {
            v76 = v69;
          }
        }
        else
        {
          v76 = v69;
        }
        do
        {
          v53[v76] = *(float *)&a7 + (float)(*v12 * v56[v76]);
          ++v76;
        }
        while (v76 < a6);
      }
LABEL_53:
      v53 = (float *)((char *)v53 + a4);
      ++v13;
      v39 = v54 - 1;
      ++v44;
      if (!v54)
        return result;
    }
    v57 = 0;
    v58 = 0;
    v59 = 4;
LABEL_71:
    v68 = v57 - 1;
    v69 = v59 - 4;
    v70 = v58;
    v71 = v56 + 3;
    do
    {
      v72 = *(float *)&a7 + (float)(*v12 * v71[v70 - 2]);
      v73 = *(float *)&a7 + (float)(*v12 * v71[v70 - 1]);
      v74 = *(float *)&a7 + (float)(*v12 * v71[v70]);
      v75 = &v53[v70];
      *v75 = *(float *)&a7 + (float)(*v12 * v56[v70]);
      v75[1] = v72;
      v58 += 4;
      v75[2] = v73;
      v75[3] = v74;
      ++v68;
      v69 += 4;
      v70 += 4;
    }
    while (v58 <= v43);
    goto LABEL_73;
  }
  if (a5)
  {
    v14 = a4;
    v15 = (v11 + 1);
    v16 = a6 - 4;
    v17 = 3;
    if (v16 > 3)
      v17 = a6 - 4;
    v18 = (v17 >> 2) + 1;
    result = 4 * (v18 & 0x3FFFFFF8);
    v19 = vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    v20 = a2 + 8 * v11 - 8;
    v21 = a3 + 16;
    do
    {
      if (a6 < 4)
      {
        v22 = 0;
        if (a6 <= 0)
          goto LABEL_9;
        goto LABEL_27;
      }
      if (v7 >= 2)
      {
        v22 = 0;
        do
        {
          v23 = (uint64_t *)v20;
          v24 = 1;
          v25 = (float32x4_t)v19;
          do
          {
            v26 = *v23--;
            v25 = vmlaq_n_f32(v25, vsubq_f32(*(float32x4_t *)&v13[v24][v22], *(float32x4_t *)(v26 + 4 * v22)), v12[v24]);
            ++v24;
          }
          while (v15 != v24);
          *(float32x4_t *)&a3[v22] = v25;
          v22 += 4;
        }
        while (v22 <= v16);
      }
      else
      {
        if (v17 < 0x1C)
        {
          v22 = 0;
LABEL_24:
          v29 = &a3[v22];
          do
          {
            *v29 = *(float *)&a7;
            v29[1] = *(float *)&a7;
            v29[2] = *(float *)&a7;
            v29[3] = *(float *)&a7;
            v22 += 4;
            v29 += 4;
          }
          while (v22 <= v16);
          goto LABEL_26;
        }
        v27 = v18 & 0x3FFFFFF8;
        v28 = (int32x4_t *)v21;
        do
        {
          v28[-4] = v19;
          v28[-3] = v19;
          v28[-2] = v19;
          v28[-1] = v19;
          *v28 = v19;
          v28[1] = v19;
          v28[2] = v19;
          v28[3] = v19;
          v28 += 8;
          v27 -= 8;
        }
        while (v27);
        v22 = 4 * (v18 & 0x3FFFFFF8);
        if (v18 != (v18 & 0x3FFFFFF8))
          goto LABEL_24;
      }
LABEL_26:
      v22 = v22;
      if ((int)v22 >= a6)
        goto LABEL_9;
LABEL_27:
      if (v7 >= 2)
      {
        do
        {
          v32 = (uint64_t *)v20;
          v33 = 1;
          v34 = *(float *)&a7;
          do
          {
            v35 = *v32--;
            v34 = v34 + (float)(v12[v33] * (float)(v13[v33][v22] - *(float *)(v35 + 4 * v22)));
            ++v33;
          }
          while (v15 != v33);
          a3[v22++] = v34;
        }
        while (v22 != a6);
        goto LABEL_9;
      }
      v30 = a6 - v22;
      if (v30 >= 8)
      {
        v31 = (v30 & 0xFFFFFFFFFFFFFFF8) + v22;
        v36 = v22;
        v37 = v30 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v38 = (int32x4_t *)&a3[v36];
          *v38 = v19;
          v38[1] = v19;
          v36 += 8;
          v37 -= 8;
        }
        while (v37);
        if (v30 == (v30 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_9;
      }
      else
      {
        v31 = v22;
      }
      do
        a3[v31++] = *(float *)&a7;
      while (a6 != v31);
LABEL_9:
      a3 = (float *)((char *)a3 + v14);
      ++v13;
      v20 += 8;
      v21 = (float *)((char *)v21 + v14);
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t sub_1003097F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452E58;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_100309894(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452E58;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

uint64_t sub_100309944(uint64_t result, float **a2, float *a3, int a4, int a5, int a6, double a7)
{
  float *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  int v12;
  float *v13;
  float v14;
  uint64_t i;
  float v16;
  uint64_t j;
  float v18;
  uint64_t k;
  float *v20;
  unint64_t v21;
  float32x4_t v22;
  unint64_t v23;
  int v24;
  float *v25;
  uint64_t v26;
  unint64_t v27;
  float32x4_t v28;
  float v29;
  uint64_t m;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  unint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  unint64_t v39;
  float *v40;
  int v41;
  uint64_t v42;
  float *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  BOOL v49;
  uint64_t v51;
  uint64_t v52;
  const float *v53;
  float *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  float v61;
  float v62;
  float v63;
  float *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  float *v69;
  float *v70;
  unint64_t v71;
  BOOL v73;
  float32x4_t v75;
  uint64_t v76;
  unint64_t v77;
  float32x4_t v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x4x4_t v81;
  float32x4x4_t v82;

  if (!a5)
    return result;
  v7 = *(float **)(result + 32);
  LODWORD(a7) = *(_DWORD *)(result + 116);
  v8 = a5 - 1;
  v9 = a4;
  v10 = *(unsigned int *)(result + 8);
  if (a6 <= 3)
  {
    if (a6 >= 1)
    {
      if ((int)v10 > 1)
      {
        do
        {
          v12 = v8;
          v13 = *a2;
          v14 = *(float *)&a7 + (float)(*v7 * **a2);
          for (i = 1; i != v10; ++i)
            v14 = v14 + (float)(v7[i] * *a2[i]);
          *a3 = v14;
          if (a6 != 1)
          {
            v16 = *(float *)&a7 + (float)(*v7 * v13[1]);
            for (j = 1; j != v10; ++j)
              v16 = v16 + (float)(v7[j] * a2[j][1]);
            a3[1] = v16;
            if (a6 != 2)
            {
              v18 = *(float *)&a7 + (float)(*v7 * v13[2]);
              for (k = 1; k != v10; ++k)
                v18 = v18 + (float)(v7[k] * a2[k][2]);
              a3[2] = v18;
            }
          }
          a3 = (float *)((char *)a3 + a4);
          ++a2;
          --v8;
        }
        while (v12);
      }
      else
      {
        v11 = a3 + 2;
        do
        {
          v20 = *a2;
          *(v11 - 2) = *(float *)&a7 + (float)(*v7 * **a2);
          if (a6 != 1)
          {
            *(v11 - 1) = *(float *)&a7 + (float)(*v7 * v20[1]);
            if (a6 != 2)
              *v11 = *(float *)&a7 + (float)(*v7 * v20[2]);
          }
          ++a2;
          v11 = (float *)((char *)v11 + a4);
          --a5;
        }
        while (a5);
      }
    }
    return result;
  }
  v21 = (a6 - 4);
  if ((int)v10 <= 1)
  {
    v31 = 0;
    if ((unint64_t)(v21 & 0xFFFFFFFC) + 5 <= a6)
      v32 = a6;
    else
      v32 = (v21 & 0xFFFFFFFC) + 5;
    v33 = (4 * v21) & 0x3FFFFFFF0;
    v34 = 4 * v32 - v33;
    v35 = v7 + 1;
    v36 = v32 - (v21 & 0xFFFFFFFC) - 4;
    v37 = v33 + 16;
    v80 = (v21 >> 2) + 1;
    result = v80 & 0x7FFFFFFC;
    v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    v39 = v36 & 0xFFFFFFFFFFFFFFF8;
    v40 = a3;
    while (1)
    {
      v41 = v8;
      v42 = v31 * v9;
      v43 = *a2;
      if (v21 < 0xC)
        break;
      v44 = 0;
      v47 = (float *)((char *)a3 + v37 + v42);
      v49 = v40 < (float *)((char *)v43 + v37) && v43 < v47;
      v46 = 4;
      v45 = 0;
      if (v7 < v47 && v40 < v35)
        goto LABEL_54;
      if (v49)
        goto LABEL_54;
      v51 = 0;
      v52 = v80 & 0x7FFFFFFC;
      do
      {
        v53 = &v43[v51];
        v81 = vld4q_f32(v53);
        v82.val[0] = vmlaq_n_f32(v38, v81.val[0], *v7);
        v82.val[1] = vmlaq_n_f32(v38, v81.val[1], *v7);
        v82.val[2] = vmlaq_n_f32(v38, v81.val[2], *v7);
        v82.val[3] = vmlaq_n_f32(v38, v81.val[3], *v7);
        v54 = &v40[v51];
        vst4q_f32(v54, v82);
        v51 += 16;
        v52 -= 4;
      }
      while (v52);
      v44 = v80 & 0x7FFFFFFC;
      v46 = (16 * ((v44 >> 2) & 0x1FFFFFFF)) | 4;
      v45 = 4 * v44;
      v55 = v44 - 1;
      v56 = v45;
      v57 = 4 * (v80 & 0x7FFFFFFC);
      if (v80 != result)
        goto LABEL_54;
LABEL_57:
      if (v57 < a6)
      {
        if (v36 >= 0x10)
        {
          v67 = 4 * v55;
          v68 = (char *)&a3[v67 + 4] + v42;
          v69 = (float *)((char *)a3 + v34 + v42 + v67 * 4);
          v70 = &v43[v67];
          v71 = (unint64_t)&v43[v67 + 4];
          v73 = v68 < (char *)v70 + v34 && v71 < (unint64_t)v69;
          if (v7 >= v69 || v68 >= (char *)v35)
          {
            if (v73)
            {
              v66 = v56;
            }
            else
            {
              v66 = v56 + v39;
              v75 = vld1q_dup_f32(v7);
              v76 = v56;
              v77 = v36 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v78 = vmlaq_f32(v38, *(float32x4_t *)&v43[v76 + 4], v75);
                v79 = (float32x4_t *)&v40[v76];
                *v79 = vmlaq_f32(v38, *(float32x4_t *)&v43[v76], v75);
                v79[1] = v78;
                v76 += 8;
                v77 -= 8;
              }
              while (v77);
              if (v36 == v39)
                goto LABEL_36;
            }
          }
          else
          {
            v66 = v56;
          }
        }
        else
        {
          v66 = v56;
        }
        do
        {
          v40[v66] = *(float *)&a7 + (float)(*v7 * v43[v66]);
          ++v66;
        }
        while (v66 < a6);
      }
LABEL_36:
      v40 = (float *)((char *)v40 + v9);
      ++a2;
      v8 = v41 - 1;
      ++v31;
      if (!v41)
        return result;
    }
    v44 = 0;
    v45 = 0;
    v46 = 4;
LABEL_54:
    v58 = 0;
    v55 = v44 - 1;
    v59 = v45;
    v60 = v43 + 2;
    do
    {
      v61 = *(float *)&a7 + (float)(*v7 * v60[v59 - 1]);
      v62 = *(float *)&a7 + (float)(*v7 * v60[v59]);
      v63 = *(float *)&a7 + (float)(*v7 * v60[v59 + 1]);
      v64 = &v40[v59];
      *v64 = *(float *)&a7 + (float)(*v7 * v43[v59]);
      v65 = (uint64_t)&v40[v45 + v58];
      *(float *)(v65 + 4) = v61;
      *(float *)(v65 + 8) = v62;
      v64[3] = v63;
      ++v55;
      v58 += 4;
      v57 = v45 + v58;
      v59 += 4;
    }
    while (v45 + v58 <= v21);
    v56 = v46 + v58 - 4;
    goto LABEL_57;
  }
  v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
  do
  {
    v23 = 0;
    v24 = v8;
    v25 = *a2;
    v26 = 4;
    do
    {
      v27 = v26;
      v28 = vmlaq_n_f32(v22, *(float32x4_t *)&v25[v23], *v7);
      for (result = 1; result != v10; ++result)
        v28 = vmlaq_n_f32(v28, *(float32x4_t *)&a2[result][v23], v7[result]);
      *(float32x4_t *)&a3[v23] = v28;
      v23 += 4;
      v26 += 4;
    }
    while (v23 <= v21);
    if ((int)v23 < a6)
    {
      do
      {
        v29 = *(float *)&a7 + (float)(*v7 * v25[v27]);
        for (m = 1; m != v10; ++m)
          v29 = v29 + (float)(v7[m] * a2[m][v27]);
        a3[v27++] = v29;
      }
      while (v27 < a6);
    }
    a3 = (float *)((char *)a3 + a4);
    ++a2;
    --v8;
  }
  while (v24);
  return result;
}

void sub_100309E1C()
{
  operator delete();
}

uint64_t sub_100309E30(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_100309E70()
{
  operator delete();
}

uint64_t sub_100309E84(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_100309EC0(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7;
  uint64_t v9[2];

  v7 = sub_1002FDDE8(a1, a2, a3, a5);
  *(_QWORD *)v7 = off_100452F08;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_10029430C(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_100309F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_1002FE53C(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100309F8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452740;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_10030A02C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452740;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

uint64_t sub_10030A0DC(uint64_t result, uint64_t a2, _BYTE *__b, int a4, int a5, size_t __len, int32x4_t a7)
{
  int32x2_t v7;
  int v8;
  int v10;
  int v11;
  uint64_t v12;
  float *v13;
  _QWORD *v14;
  int v15;
  float v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  float32x4_t v22;
  uint64_t v23;
  int32x4_t v24;
  uint64_t v25;
  int16x8_t v26;
  float32x4_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  int v32;
  float v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  int16x4_t v43;
  uint64_t v44;
  int32x4_t v45;
  int32x4_t v46;
  _BYTE *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float *v60;
  uint64_t v61;
  float *v62;
  float v63;
  uint64_t v64;
  int32x4_t v65;
  uint64_t *v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  float v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  float **v75;
  uint64_t v76;
  float v77;
  float *v78;
  float v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  float v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  float v89;
  int v90;
  uint64_t __lena;
  __int32 v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;

  v8 = a5;
  v10 = *(_DWORD *)(result + 8);
  if (v10 >= 0)
    v11 = *(_DWORD *)(result + 8);
  else
    v11 = v10 + 1;
  v12 = (uint64_t)v11 >> 1;
  v13 = (float *)(*(_QWORD *)(result + 32) + 4 * (v11 >> 1));
  v7.i32[0] = *(_DWORD *)(result + 116);
  v14 = (_QWORD *)(a2 + 8 * (v11 >> 1));
  if ((*(_BYTE *)(result + 120) & 1) != 0)
  {
    if (!a5)
      return result;
    v21 = (v12 + 1);
    v22 = (float32x4_t)vdupq_lane_s32(v7, 0);
    v23 = a2 + 8 * v12 - 8;
    v24.i64[0] = 0xFF000000FFLL;
    v24.i64[1] = 0xFF000000FFLL;
    while ((int)__len < 4)
    {
      v25 = 0;
      if ((int)__len > 0)
        goto LABEL_28;
LABEL_17:
      __b += a4;
      ++v14;
      v23 += 8;
      if (!--v8)
        return result;
    }
    v25 = 0;
    do
    {
      v27 = vmlaq_n_f32(v22, *(float32x4_t *)(*v14 + 4 * v25), *v13);
      if (v10 >= 2)
      {
        v28 = (uint64_t *)v23;
        v29 = 1;
        do
        {
          v30 = *v28--;
          v27 = vmlaq_n_f32(v27, vaddq_f32(*(float32x4_t *)(v14[v29] + 4 * v25), *(float32x4_t *)(v30 + 4 * v25)), v13[v29]);
          ++v29;
        }
        while (v21 != v29);
      }
      result = (uint64_t)rintf(v27.f32[3]);
      v27.i32[0] = (uint64_t)rintf(v27.f32[0]);
      v27.i32[1] = (uint64_t)rintf(v27.f32[1]);
      v27.i32[2] = (uint64_t)rintf(v27.f32[2]);
      v27.i32[3] = result;
      v26 = (int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v27, (int32x4_t)0), v24);
      *(int16x4_t *)v26.i8 = vmovn_s32((int32x4_t)v26);
      *(_DWORD *)&__b[v25] = vmovn_s16(v26).u32[0];
      v25 += 4;
    }
    while (v25 <= (int)__len - 4);
    v25 = v25;
    if ((int)v25 >= (int)__len)
      goto LABEL_17;
LABEL_28:
    if (v10 >= 2)
    {
      do
      {
        v33 = *(float *)v7.i32 + (float)(*v13 * *(float *)(*v14 + 4 * v25));
        v34 = (uint64_t *)v23;
        v35 = 1;
        do
        {
          result = 4 * v25;
          v36 = *v34--;
          v33 = v33 + (float)(v13[v35] * (float)(*(float *)(v14[v35] + 4 * v25) + *(float *)(v36 + 4 * v25)));
          ++v35;
        }
        while (v21 != v35);
        v37 = rintf(v33);
        v38 = (uint64_t)v37 & ~((int)(uint64_t)v37 >> 31);
        if (v38 >= 255)
          LOBYTE(v38) = -1;
        __b[v25++] = v38;
      }
      while (v25 != __len);
    }
    else
    {
      do
      {
        v31 = rintf(*(float *)v7.i32 + (float)(*v13 * *(float *)(*v14 + 4 * v25)));
        v32 = (uint64_t)v31 & ~((int)(uint64_t)v31 >> 31);
        if (v32 >= 255)
          LOBYTE(v32) = -1;
        __b[v25++] = v32;
      }
      while (__len != v25);
    }
    goto LABEL_17;
  }
  if (a5)
  {
    v15 = a5 - 1;
    v16 = rintf(*(float *)v7.i32);
    result = 255;
    if ((int)((uint64_t)v16 & ~((int)(uint64_t)v16 >> 31)) >= 255)
      v17 = 255;
    else
      v17 = (uint64_t)v16 & ~((int)(uint64_t)v16 >> 31);
    v18 = a4;
    v19 = (__len - 4);
    v96 = a4;
    v95 = v17;
    if ((int)__len >= 4)
    {
      v39 = 0;
      v40 = (v12 + 1);
      v41 = __len;
      v42 = (v19 & 0xFFFFFFFC) + 5;
      if ((int)__len > v42)
        v42 = __len;
      v43 = vdup_n_s16(v17);
      v44 = a2 + 8 * v12 - 8;
      v45 = 0uLL;
      v46.i64[0] = 0xFF000000FFLL;
      v46.i64[1] = 0xFF000000FFLL;
      v47 = __b;
      v93 = __len;
      v92 = v7.i32[0];
      __lena = v42 - (v19 & 0xFFFFFFFC) - 5 + 1;
      do
      {
        v49 = 0;
        v50 = 0;
        v48 = v15;
        v51 = 4;
        do
        {
          v52 = v51;
          v53 = v49;
          *(int16x4_t *)a7.i8 = v43;
          if (v10 >= 2)
          {
            v54 = (uint64_t *)v44;
            v55 = 1;
            v56 = *(float *)v7.i32;
            v57 = *(float *)v7.i32;
            v58 = *(float *)v7.i32;
            v59 = *(float *)v7.i32;
            do
            {
              v60 = (float *)(v14[v55] + 4 * v50);
              v61 = *v54--;
              v62 = (float *)(v61 + 4 * v50);
              v63 = v13[v55];
              v59 = v59 + (float)(v63 * (float)(*v60 - *v62));
              v58 = v58 + (float)(v63 * (float)(v60[1] - v62[1]));
              v57 = v57 + (float)(v63 * (float)(v60[2] - v62[2]));
              v56 = v56 + (float)(v63 * (float)(v60[3] - v62[3]));
              ++v55;
            }
            while (v40 != v55);
            v64 = (uint64_t)rintf(v56);
            v65.i32[0] = (uint64_t)rintf(v59);
            v65.i32[1] = (uint64_t)rintf(v58);
            v65.i32[2] = (uint64_t)rintf(v57);
            v65.i32[3] = v64;
            a7 = vminq_s32(vmaxq_s32(v65, v45), v46);
            *(int16x4_t *)a7.i8 = vmovn_s32(a7);
          }
          *(_DWORD *)&v47[v50] = vmovn_s16((int16x8_t)a7).u32[0];
          v50 += 4;
          v51 = v52 + 4;
          v49 = v53 + 1;
        }
        while (v50 <= v19);
        if ((int)v50 < (int)__len)
        {
          if (v10 < 2)
          {
            v94 = v48;
            memset(&__b[4 * v53 + 4 + v39 * v18], v17, __lena);
            v48 = v94;
            v17 = v95;
            v46.i64[0] = 0xFF000000FFLL;
            v46.i64[1] = 0xFF000000FFLL;
            v45 = 0uLL;
            result = 255;
            v18 = v96;
            v7.i32[0] = v92;
            LODWORD(__len) = v93;
          }
          else
          {
            do
            {
              v66 = (uint64_t *)v44;
              v67 = 1;
              v68 = *(float *)v7.i32;
              do
              {
                v69 = *v66--;
                v68 = v68 + (float)(v13[v67] * (float)(*(float *)(v14[v67] + 4 * v52) - *(float *)(v69 + 4 * v52)));
                ++v67;
              }
              while (v40 != v67);
              v70 = rintf(v68);
              v71 = (uint64_t)v70 & ~((int)(uint64_t)v70 >> 31);
              if (v71 >= 255)
                LOBYTE(v71) = -1;
              v47[v52++] = v71;
            }
            while (v52 < v41);
          }
        }
        v47 += v18;
        ++v14;
        v15 = v48 - 1;
        ++v39;
        v44 += 8;
      }
      while (v48);
    }
    else if ((int)__len >= 1)
    {
      if (v10 >= 2)
      {
        v72 = (v12 + 1);
        v73 = a2 + 8 * v12 - 8;
        do
        {
          v74 = v15;
          v75 = (float **)v73;
          v76 = 1;
          v77 = *(float *)v7.i32;
          do
          {
            v78 = *v75--;
            v77 = v77 + (float)(v13[v76] * (float)(*(float *)v14[v76] - *v78));
            ++v76;
          }
          while (v72 != v76);
          v79 = rintf(v77);
          v80 = (uint64_t)v79 & ~((int)(uint64_t)v79 >> 31);
          if (v80 >= 255)
            LOBYTE(v80) = -1;
          *__b = v80;
          if ((_DWORD)__len != 1)
          {
            v81 = 0x1FFFFFFFFFFFFFFFLL;
            v82 = 1;
            v83 = *(float *)v7.i32;
            do
            {
              v83 = v83 + (float)(v13[v82] * (float)(*(float *)(v14[v82] + 4) - *(float *)(v14[v81] + 4)));
              ++v82;
              --v81;
            }
            while (v72 != v82);
            v84 = rintf(v83);
            v85 = (uint64_t)v84 & ~((int)(uint64_t)v84 >> 31);
            if (v85 >= 255)
              LOBYTE(v85) = -1;
            __b[1] = v85;
            if ((_DWORD)__len != 2)
            {
              v86 = 0x1FFFFFFFFFFFFFFFLL;
              v87 = 1;
              v88 = *(float *)v7.i32;
              do
              {
                v88 = v88 + (float)(v13[v87] * (float)(*(float *)(v14[v87] + 8) - *(float *)(v14[v86] + 8)));
                ++v87;
                --v86;
              }
              while (v72 != v87);
              v89 = rintf(v88);
              v90 = (uint64_t)v89 & ~((int)(uint64_t)v89 >> 31);
              if (v90 >= 255)
                LOBYTE(v90) = -1;
              __b[2] = v90;
            }
          }
          __b += a4;
          ++v14;
          v15 = v74 - 1;
          v73 += 8;
        }
        while (v74);
      }
      else
      {
        v20 = __len;
        do
        {
          result = (uint64_t)memset(__b, v17, v20);
          v17 = v95;
          __b += v96;
          --v8;
        }
        while (v8);
      }
    }
  }
  return result;
}

void sub_10030A6D0()
{
  operator delete();
}

uint64_t sub_10030A6E4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10030A720(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7;
  uint64_t v9[2];

  v7 = sub_1002FE630(a1, a2, a3, a5);
  *(_QWORD *)v7 = off_100452F90;
  *(_DWORD *)(v7 + 128) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_10029430C(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10030A7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_1002FED90(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10030A7EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004527C8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_10030A88C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004527C8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

uint64_t sub_10030A93C(uint64_t result, uint64_t a2, _BYTE *__b, int a4, int a5, size_t __len, int32x4_t a7)
{
  int v7;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  _QWORD *v15;
  int v16;
  double v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  int32x4_t v28;
  int16x8_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t *v36;
  double *v37;
  uint64_t v38;
  double *v39;
  double v40;
  double v41;
  int v42;
  double v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  double v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  int16x4_t v52;
  uint64_t v53;
  uint64_t v54;
  int32x4_t v55;
  int32x4_t v56;
  _BYTE *v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double *v70;
  uint64_t v71;
  double *v72;
  double v73;
  uint64_t v74;
  int32x4_t v75;
  uint64_t v76;
  uint64_t *v77;
  double v78;
  uint64_t v79;
  double v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  double **v86;
  double v87;
  double *v88;
  double v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  int v100;
  uint64_t __lena;
  int v102;
  int v103;
  int v104;
  uint64_t v105;

  v7 = a5;
  v9 = *(_DWORD *)(result + 8);
  if (v9 >= 0)
    v10 = *(_DWORD *)(result + 8);
  else
    v10 = v9 + 1;
  v11 = (uint64_t)v10 >> 1;
  v12 = 8 * (v10 >> 1);
  v13 = (double *)(*(_QWORD *)(result + 32) + v12);
  v14 = *(double *)(result + 120);
  v15 = (_QWORD *)(a2 + v12);
  if ((*(_BYTE *)(result + 128) & 1) != 0)
  {
    if (!a5)
      return result;
    v22 = v11 + 1;
    v23 = a2 + 8 * v11 - 8;
    v24 = 8 * v22;
    v25.i64[0] = 0xFF000000FFLL;
    v25.i64[1] = 0xFF000000FFLL;
    while ((int)__len < 4)
    {
      v26 = 0;
      if ((int)__len > 0)
        goto LABEL_28;
LABEL_17:
      __b += a4;
      ++v15;
      v23 += 8;
      if (!--v7)
        return result;
    }
    v26 = 0;
    do
    {
      v30 = (double *)(*v15 + 8 * v26);
      v31 = v14 + *v13 * *v30;
      v32 = v14 + *v13 * v30[1];
      v33 = v14 + *v13 * v30[2];
      v34 = v14 + *v13 * v30[3];
      if (v9 >= 2)
      {
        v35 = 8;
        v36 = (uint64_t *)v23;
        do
        {
          v37 = (double *)(v15[(unint64_t)v35 / 8] + 8 * v26);
          v38 = *v36--;
          v39 = (double *)(v38 + 8 * v26);
          v40 = v13[(unint64_t)v35 / 8];
          v31 = v31 + v40 * (*v37 + *v39);
          v32 = v32 + v40 * (v37[1] + v39[1]);
          v33 = v33 + v40 * (v37[2] + v39[2]);
          v34 = v34 + v40 * (v37[3] + v39[3]);
          v35 += 8;
        }
        while (v24 != v35);
      }
      v27 = (uint64_t)rint(v32);
      result = (uint64_t)rint(v34);
      v28.i32[0] = (uint64_t)rint(v31);
      v28.i32[1] = v27;
      v28.i64[1] = __PAIR64__(result, (uint64_t)rint(v33));
      v29 = (int16x8_t)vminq_s32(vmaxq_s32(v28, (int32x4_t)0), v25);
      *(int16x4_t *)v29.i8 = vmovn_s32((int32x4_t)v29);
      *(_DWORD *)&__b[v26] = vmovn_s16(v29).u32[0];
      v26 += 4;
    }
    while (v26 <= (int)__len - 4);
    v26 = v26;
    if ((int)v26 >= (int)__len)
      goto LABEL_17;
LABEL_28:
    if (v9 >= 2)
    {
      do
      {
        v43 = v14 + *v13 * *(double *)(*v15 + 8 * v26);
        v44 = 8;
        v45 = (uint64_t *)v23;
        do
        {
          result = 8 * v26;
          v46 = *v45--;
          v43 = v43
              + v13[(unint64_t)v44 / 8]
              * (*(double *)(v15[(unint64_t)v44 / 8] + 8 * v26) + *(double *)(v46 + 8 * v26));
          v44 += 8;
        }
        while (v24 != v44);
        v47 = rint(v43);
        v48 = (uint64_t)v47 & ~((int)(uint64_t)v47 >> 31);
        if (v48 >= 255)
          LOBYTE(v48) = -1;
        __b[v26++] = v48;
      }
      while (v26 != __len);
    }
    else
    {
      do
      {
        v41 = rint(v14 + *v13 * *(double *)(*v15 + 8 * v26));
        v42 = (uint64_t)v41 & ~((int)(uint64_t)v41 >> 31);
        if (v42 >= 255)
          LOBYTE(v42) = -1;
        __b[v26++] = v42;
      }
      while (__len != v26);
    }
    goto LABEL_17;
  }
  if (a5)
  {
    v16 = a5 - 1;
    v17 = rint(v14);
    result = 255;
    if ((int)((uint64_t)v17 & ~((int)(uint64_t)v17 >> 31)) >= 255)
      v18 = 255;
    else
      v18 = (uint64_t)v17 & ~((int)(uint64_t)v17 >> 31);
    v19 = a4;
    v20 = (__len - 4);
    v105 = a4;
    v104 = v18;
    if ((int)__len >= 4)
    {
      v49 = 0;
      v50 = __len;
      v51 = (v20 & 0xFFFFFFFC) + 5;
      if ((int)__len > v51)
        v51 = __len;
      v52 = vdup_n_s16(v18);
      v53 = a2 + 8 * v11 - 8;
      v54 = 8 * (v11 + 1);
      v55 = 0uLL;
      v56.i64[0] = 0xFF000000FFLL;
      v56.i64[1] = 0xFF000000FFLL;
      v57 = __b;
      v102 = __len;
      __lena = v51 - (v20 & 0xFFFFFFFC) - 5 + 1;
      do
      {
        v59 = 0;
        v60 = 0;
        v58 = v16;
        v61 = 4;
        do
        {
          v62 = v61;
          v63 = v59;
          *(int16x4_t *)a7.i8 = v52;
          if (v9 >= 2)
          {
            v64 = 8;
            v65 = (uint64_t *)v53;
            v66 = v14;
            v67 = v14;
            v68 = v14;
            v69 = v14;
            do
            {
              v70 = (double *)(v15[(unint64_t)v64 / 8] + 8 * v60);
              v71 = *v65--;
              v72 = (double *)(v71 + 8 * v60);
              v73 = v13[(unint64_t)v64 / 8];
              v69 = v69 + v73 * (*v70 - *v72);
              v68 = v68 + v73 * (v70[1] - v72[1]);
              v67 = v67 + v73 * (v70[2] - v72[2]);
              v66 = v66 + v73 * (v70[3] - v72[3]);
              v64 += 8;
            }
            while (v54 != v64);
            v74 = (uint64_t)rint(v66);
            v75.i32[0] = (uint64_t)rint(v69);
            v75.i32[1] = (uint64_t)rint(v68);
            v75.i32[2] = (uint64_t)rint(v67);
            v75.i32[3] = v74;
            a7 = vminq_s32(vmaxq_s32(v75, v55), v56);
            *(int16x4_t *)a7.i8 = vmovn_s32(a7);
          }
          *(_DWORD *)&v57[v60] = vmovn_s16((int16x8_t)a7).u32[0];
          v60 += 4;
          v61 = v62 + 4;
          v59 = v63 + 1;
        }
        while (v60 <= v20);
        if ((int)v60 < (int)__len)
        {
          if (v9 < 2)
          {
            v103 = v58;
            memset(&__b[4 * v63 + 4 + v49 * v19], v18, __lena);
            v58 = v103;
            v18 = v104;
            v56.i64[0] = 0xFF000000FFLL;
            v56.i64[1] = 0xFF000000FFLL;
            v55 = 0uLL;
            result = 255;
            v19 = v105;
            LODWORD(__len) = v102;
          }
          else
          {
            do
            {
              v76 = 8;
              v77 = (uint64_t *)v53;
              v78 = v14;
              do
              {
                v79 = *v77--;
                v78 = v78
                    + v13[(unint64_t)v76 / 8]
                    * (*(double *)(v15[(unint64_t)v76 / 8] + 8 * v62) - *(double *)(v79 + 8 * v62));
                v76 += 8;
              }
              while (v54 != v76);
              v80 = rint(v78);
              v81 = (uint64_t)v80 & ~((int)(uint64_t)v80 >> 31);
              if (v81 >= 255)
                LOBYTE(v81) = -1;
              v57[v62++] = v81;
            }
            while (v62 < v50);
          }
        }
        v57 += v19;
        ++v15;
        v16 = v58 - 1;
        ++v49;
        v53 += 8;
      }
      while (v58);
    }
    else if ((int)__len >= 1)
    {
      if (v9 >= 2)
      {
        v82 = a2 + 8 * v11 - 8;
        v83 = 8 * (v11 + 1);
        do
        {
          v84 = v16;
          v85 = 8;
          v86 = (double **)v82;
          v87 = v14;
          do
          {
            v88 = *v86--;
            v87 = v87 + v13[(unint64_t)v85 / 8] * (*(double *)v15[(unint64_t)v85 / 8] - *v88);
            v85 += 8;
          }
          while (v83 != v85);
          v89 = rint(v87);
          v90 = (uint64_t)v89 & ~((int)(uint64_t)v89 >> 31);
          if (v90 >= 255)
            LOBYTE(v90) = -1;
          *__b = v90;
          if ((_DWORD)__len != 1)
          {
            v91 = 0x1FFFFFFFFFFFFFFFLL;
            v92 = 8;
            v93 = v14;
            do
            {
              v93 = v93
                  + v13[(unint64_t)v92 / 8]
                  * (*(double *)(v15[(unint64_t)v92 / 8] + 8) - *(double *)(v15[v91] + 8));
              v92 += 8;
              --v91;
            }
            while (v83 != v92);
            v94 = rint(v93);
            v95 = (uint64_t)v94 & ~((int)(uint64_t)v94 >> 31);
            if (v95 >= 255)
              LOBYTE(v95) = -1;
            __b[1] = v95;
            if ((_DWORD)__len != 2)
            {
              v96 = 0x1FFFFFFFFFFFFFFFLL;
              v97 = 8;
              v98 = v14;
              do
              {
                v98 = v98
                    + v13[(unint64_t)v97 / 8]
                    * (*(double *)(v15[(unint64_t)v97 / 8] + 16) - *(double *)(v15[v96] + 16));
                v97 += 8;
                --v96;
              }
              while (v83 != v97);
              v99 = rint(v98);
              v100 = (uint64_t)v99 & ~((int)(uint64_t)v99 >> 31);
              if (v100 >= 255)
                LOBYTE(v100) = -1;
              __b[2] = v100;
            }
          }
          __b += a4;
          ++v15;
          v16 = v84 - 1;
          v82 += 8;
        }
        while (v84);
      }
      else
      {
        v21 = __len;
        do
        {
          result = (uint64_t)memset(__b, v18, v21);
          v18 = v104;
          __b += v105;
          --v7;
        }
        while (v7);
      }
    }
  }
  return result;
}

void sub_10030AF60()
{
  operator delete();
}

uint64_t sub_10030AF74(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10030AFB0(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7;
  uint64_t v9[2];

  v7 = sub_1002FEE84(a1, a2, a3, a5);
  *(_QWORD *)v7 = off_100453018;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_10029430C(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10030B054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_1002FF5B0(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10030B07C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452850;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_10030B11C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452850;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

float *sub_10030B1CC(float *result, uint64_t a2, _WORD *a3, int a4, int a5, int a6, double a7, double a8)
{
  int v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  float **v12;
  int v13;
  float v14;
  signed int v15;
  uint64_t v16;
  uint64_t v17;
  int16x8_t v18;
  uint64_t v19;
  int32x4_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float *v30;
  float v31;
  uint64_t v32;
  int32x4_t v33;
  unint64_t v34;
  float *v35;
  uint64_t *v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  int v41;
  unint64_t v42;
  int16x8_t *v43;
  float *v44;
  uint64_t v45;
  float v46;
  _WORD *v47;
  float *v48;
  float v49;
  int v50;
  float v51;
  int v52;
  float v53;
  int v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  _WORD *v59;
  int32x4_t v60;
  unint64_t v61;
  float *v62;
  _WORD *v63;
  uint64_t v64;
  unint64_t v65;
  _WORD *v66;
  float32x4_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  int v72;
  float v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  float *v82;
  float v83;
  float **v84;
  uint64_t v85;
  float *v86;
  float v87;
  int v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  int v93;
  float v94;
  uint64_t v95;
  uint64_t v96;
  float v97;
  int v98;

  v8 = *((_DWORD *)result + 2);
  if (v8 >= 0)
    v9 = *((_DWORD *)result + 2);
  else
    v9 = v8 + 1;
  v10 = (uint64_t)v9 >> 1;
  v11 = (_DWORD *)(*((_QWORD *)result + 4) + 4 * (v9 >> 1));
  *(float *)&a7 = result[29];
  v12 = (float **)(a2 + 8 * (v9 >> 1));
  if (((_BYTE)result[30] & 1) != 0)
  {
    if (a5)
    {
      v44 = (float *)(a5 - 1);
      v45 = a4;
      if (a6 > 3)
      {
        LODWORD(a8) = *v11;
        v55 = (v10 + 1);
        v56 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
        v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
        v58 = a2 + 8 * v10 - 8;
        v59 = a3 + 4;
        v60.i64[0] = 0xFFFF0000FFFFLL;
        v60.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          v61 = 0;
          result = v44;
          v62 = *v12;
          v63 = v59;
          v64 = 4;
          do
          {
            v65 = v64;
            v66 = v63;
            v67 = vmlaq_f32(v57, *(float32x4_t *)&v62[v61], v56);
            if (v8 >= 2)
            {
              v68 = (uint64_t *)v58;
              v69 = 1;
              do
              {
                v70 = *v68--;
                v67 = vmlaq_n_f32(v67, vaddq_f32(*(float32x4_t *)&v12[v69][v61], *(float32x4_t *)(v70 + 4 * v61)), *(float *)&v11[v69]);
                ++v69;
              }
              while (v55 != v69);
            }
            v67.i32[0] = (uint64_t)rintf(v67.f32[0]);
            v67.i32[1] = (uint64_t)rintf(v67.f32[1]);
            v67.i32[2] = (uint64_t)rintf(v67.f32[2]);
            v67.i32[3] = (uint64_t)rintf(v67.f32[3]);
            *(int16x4_t *)&a3[v61] = vmovn_s32(vminq_s32(vmaxq_s32((int32x4_t)v67, (int32x4_t)0), v60));
            v61 += 4;
            v64 = v65 + 4;
            v63 += 4;
          }
          while (v61 <= (a6 - 4));
          if ((int)v61 < a6)
          {
            if (v8 >= 2)
            {
              do
              {
                v73 = *(float *)&a7 + (float)(*(float *)&a8 * v62[v65]);
                v74 = (uint64_t *)v58;
                v75 = 1;
                do
                {
                  v76 = *v74--;
                  v73 = v73 + (float)(*(float *)&v11[v75] * (float)(v12[v75][v65] + *(float *)(v76 + 4 * v65)));
                  ++v75;
                }
                while (v55 != v75);
                v77 = rintf(v73);
                v78 = (uint64_t)v77 & ~((int)(uint64_t)v77 >> 31);
                if (v78 >= 0xFFFF)
                  LOWORD(v78) = -1;
                a3[v65++] = v78;
              }
              while (v65 < a6);
            }
            else
            {
              do
              {
                v71 = rintf(*(float *)&a7 + (float)(*(float *)&a8 * v62[v65]));
                v72 = (uint64_t)v71 & ~((int)(uint64_t)v71 >> 31);
                if (v72 >= 0xFFFF)
                  LOWORD(v72) = -1;
                *v66++ = v72;
                ++v65;
              }
              while (v65 < a6);
            }
          }
          a3 = (_WORD *)((char *)a3 + v45);
          ++v12;
          v44 = (float *)((_DWORD)result - 1);
          v58 += 8;
          v59 = (_WORD *)((char *)v59 + v45);
        }
        while ((_DWORD)result);
      }
      else if (a6 >= 1)
      {
        v46 = *(float *)v11;
        if (v8 >= 2)
        {
          v79 = (v10 + 1);
          v80 = a2 + 8 * v10 - 8;
          do
          {
            v81 = (int)v44;
            v82 = *v12;
            v83 = *(float *)&a7 + (float)(v46 * **v12);
            v84 = (float **)v80;
            v85 = 1;
            do
            {
              result = v12[v85];
              v86 = *v84--;
              v83 = v83 + (float)(*(float *)&v11[v85++] * (float)(*result + *v86));
            }
            while (v79 != v85);
            v87 = rintf(v83);
            v88 = (uint64_t)v87 & ~((int)(uint64_t)v87 >> 31);
            if (v88 >= 0xFFFF)
              LOWORD(v88) = -1;
            *a3 = v88;
            if (a6 != 1)
            {
              v89 = *(float *)&a7 + (float)(v46 * v82[1]);
              v90 = 0x1FFFFFFFFFFFFFFFLL;
              v91 = 1;
              do
              {
                result = v12[v90];
                v89 = v89 + (float)(*(float *)&v11[v91] * (float)(v12[v91][1] + result[1]));
                ++v91;
                --v90;
              }
              while (v79 != v91);
              v92 = rintf(v89);
              v93 = (uint64_t)v92 & ~((int)(uint64_t)v92 >> 31);
              if (v93 >= 0xFFFF)
                LOWORD(v93) = -1;
              a3[1] = v93;
              if (a6 != 2)
              {
                v94 = *(float *)&a7 + (float)(v46 * v82[2]);
                v95 = 0x1FFFFFFFFFFFFFFFLL;
                v96 = 1;
                do
                {
                  v94 = v94 + (float)(*(float *)&v11[v96] * (float)(v12[v96][2] + v12[v95][2]));
                  ++v96;
                  --v95;
                }
                while (v79 != v96);
                v97 = rintf(v94);
                v98 = (uint64_t)v97 & ~((int)(uint64_t)v97 >> 31);
                if (v98 >= 0xFFFF)
                  LOWORD(v98) = -1;
                a3[2] = v98;
              }
            }
            a3 = (_WORD *)((char *)a3 + a4);
            ++v12;
            LODWORD(v44) = (_DWORD)v44 - 1;
            v80 += 8;
          }
          while (v81);
        }
        else
        {
          v47 = a3 + 2;
          do
          {
            v48 = *v12;
            v49 = rintf(*(float *)&a7 + (float)(v46 * **v12));
            v50 = (uint64_t)v49 & ~((int)(uint64_t)v49 >> 31);
            if (v50 >= 0xFFFF)
              LOWORD(v50) = -1;
            *(v47 - 2) = v50;
            if (a6 != 1)
            {
              v51 = rintf(*(float *)&a7 + (float)(v46 * v48[1]));
              v52 = (uint64_t)v51 & ~((int)(uint64_t)v51 >> 31);
              if (v52 >= 0xFFFF)
                LOWORD(v52) = -1;
              *(v47 - 1) = v52;
              if (a6 != 2)
              {
                v53 = rintf(*(float *)&a7 + (float)(v46 * v48[2]));
                v54 = (uint64_t)v53 & ~((int)(uint64_t)v53 >> 31);
                if (v54 >= 0xFFFF)
                  LOWORD(v54) = -1;
                *v47 = v54;
              }
            }
            ++v12;
            v47 = (_WORD *)((char *)v47 + a4);
            --a5;
          }
          while (a5);
        }
      }
    }
  }
  else if (a5)
  {
    v13 = a6 - 4;
    v14 = rintf(*(float *)&a7);
    v15 = (uint64_t)v14 & ~((int)(uint64_t)v14 >> 31);
    if (v15 >= 0xFFFF)
      v15 = 0xFFFF;
    v16 = a4;
    v17 = (v10 + 1);
    v18 = vdupq_n_s16(v15);
    v19 = a2 + 8 * v10 - 8;
    v20.i64[0] = 0xFFFF0000FFFFLL;
    v20.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a6 >= 4)
      {
        if (v8 >= 2)
        {
          result = 0;
          do
          {
            v22 = (uint64_t *)v19;
            v23 = 1;
            v24 = *(float *)&a7;
            v25 = *(float *)&a7;
            v26 = *(float *)&a7;
            v27 = *(float *)&a7;
            do
            {
              v28 = &v12[v23][(_QWORD)result];
              v29 = *v22--;
              v30 = (float *)(v29 + 4 * (_QWORD)result);
              v31 = *(float *)&v11[v23];
              v27 = v27 + (float)(v31 * (float)(*v28 - *v30));
              v26 = v26 + (float)(v31 * (float)(v28[1] - v30[1]));
              v25 = v25 + (float)(v31 * (float)(v28[2] - v30[2]));
              v24 = v24 + (float)(v31 * (float)(v28[3] - v30[3]));
              ++v23;
            }
            while (v17 != v23);
            v32 = (uint64_t)rintf(v24);
            v33.i32[0] = (uint64_t)rintf(v27);
            v33.i32[1] = (uint64_t)rintf(v26);
            v33.i32[2] = (uint64_t)rintf(v25);
            v33.i32[3] = v32;
            *(int16x4_t *)&a3[(_QWORD)result++] = vmovn_s32(vminq_s32(vmaxq_s32(v33, (int32x4_t)0), v20));
          }
          while ((uint64_t)result <= v13);
        }
        else
        {
          result = 0;
          v21 = a3;
          do
          {
            *v21++ = v18.i64[0];
            ++result;
          }
          while ((uint64_t)result <= v13);
        }
        result = (float *)result;
        if ((int)result >= a6)
          goto LABEL_9;
      }
      else
      {
        result = 0;
        if (a6 <= 0)
          goto LABEL_9;
      }
      if (v8 >= 2)
      {
        do
        {
          v36 = (uint64_t *)v19;
          v37 = 1;
          v38 = *(float *)&a7;
          do
          {
            v39 = *v36--;
            v38 = v38
                + (float)(*(float *)&v11[v37]
                        * (float)(v12[v37][(_QWORD)result] - *(float *)(v39 + 4 * (_QWORD)result)));
            ++v37;
          }
          while (v17 != v37);
          v40 = rintf(v38);
          v41 = (uint64_t)v40 & ~((int)(uint64_t)v40 >> 31);
          if (v41 >= 0xFFFF)
            LOWORD(v41) = -1;
          a3[(_QWORD)result] = v41;
          result = (float *)((char *)result + 1);
        }
        while (result != (float *)a6);
        goto LABEL_9;
      }
      v34 = a6 - (_QWORD)result;
      if (v34 >= 0x10)
      {
        v35 = (float *)((char *)result + (v34 & 0xFFFFFFFFFFFFFFF0));
        result = (float *)(2 * (_QWORD)result);
        v42 = v34 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v43 = (int16x8_t *)((char *)result + (_QWORD)a3);
          *v43 = v18;
          v43[1] = v18;
          result += 8;
          v42 -= 16;
        }
        while (v42);
        if (v34 == (v34 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_9;
      }
      else
      {
        v35 = result;
      }
      do
      {
        a3[(_QWORD)v35] = v15;
        v35 = (float *)((char *)v35 + 1);
      }
      while ((float *)a6 != v35);
LABEL_9:
      a3 = (_WORD *)((char *)a3 + v16);
      ++v12;
      v19 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_10030B7E8()
{
  operator delete();
}

uint64_t sub_10030B7FC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10030B838(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7;
  uint64_t v9[2];

  v7 = sub_1002FF6A4(a1, a2, a3, a5);
  *(_QWORD *)v7 = off_1004530A0;
  *(_DWORD *)(v7 + 128) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_10029430C(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10030B8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_1002FFDD4(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10030B904(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004528D8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_10030B9A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004528D8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

double *sub_10030BA54(double *result, uint64_t a2, _WORD *a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  double **v12;
  int v13;
  double v14;
  signed int v15;
  uint64_t v16;
  unsigned int v17;
  int16x8_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  uint64_t v30;
  double *v31;
  double v32;
  uint64_t v33;
  int32x4_t v34;
  unint64_t v35;
  double *v36;
  uint64_t v37;
  uint64_t *v38;
  double v39;
  uint64_t v40;
  double v41;
  int v42;
  unint64_t v43;
  int16x8_t *v44;
  double *v45;
  uint64_t v46;
  double v47;
  _WORD *v48;
  double *v49;
  double v50;
  int v51;
  double v52;
  int v53;
  double v54;
  int v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  _WORD *v59;
  int32x4_t v60;
  unint64_t v61;
  double *v62;
  _WORD *v63;
  uint64_t v64;
  uint64_t v65;
  int32x4_t v66;
  unint64_t v67;
  _WORD *v68;
  double *v69;
  double v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t *v75;
  double *v76;
  uint64_t v77;
  double *v78;
  double v79;
  double v80;
  int v81;
  double v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  double v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  double *v91;
  double v92;
  uint64_t v93;
  double **v94;
  double *v95;
  double v96;
  int v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  int v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  int v107;

  v6 = *((_DWORD *)result + 2);
  if (v6 >= 0)
    v7 = *((_DWORD *)result + 2);
  else
    v7 = v6 + 1;
  v8 = (uint64_t)v7 >> 1;
  v9 = 8 * (v7 >> 1);
  v10 = (double *)(*((_QWORD *)result + 4) + v9);
  v11 = result[15];
  v12 = (double **)(a2 + v9);
  if (((_BYTE)result[16] & 1) != 0)
  {
    if (a5)
    {
      v45 = (double *)(a5 - 1);
      v46 = a4;
      if (a6 > 3)
      {
        v56 = *v10;
        v57 = a2 + 8 * v8 - 8;
        v58 = 8 * (v8 + 1);
        v59 = a3 + 4;
        v60.i64[0] = 0xFFFF0000FFFFLL;
        v60.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          v61 = 0;
          result = v45;
          v62 = *v12;
          v63 = v59;
          v64 = 4;
          do
          {
            v67 = v64;
            v68 = v63;
            v69 = &v62[v61];
            v70 = v11 + v56 * *v69;
            v71 = v11 + v56 * v69[1];
            v72 = v11 + v56 * v69[2];
            v73 = v11 + v56 * v69[3];
            if (v6 >= 2)
            {
              v74 = 8;
              v75 = (uint64_t *)v57;
              do
              {
                v76 = &v12[(unint64_t)v74 / 8][v61];
                v77 = *v75--;
                v78 = (double *)(v77 + 8 * v61);
                v79 = v10[(unint64_t)v74 / 8];
                v70 = v70 + v79 * (*v76 + *v78);
                v71 = v71 + v79 * (v76[1] + v78[1]);
                v72 = v72 + v79 * (v76[2] + v78[2]);
                v73 = v73 + v79 * (v76[3] + v78[3]);
                v74 += 8;
              }
              while (v58 != v74);
            }
            v65 = (uint64_t)rint(v71);
            v66.i32[0] = (uint64_t)rint(v70);
            v66.i32[1] = v65;
            v66.i64[1] = __PAIR64__((uint64_t)rint(v73), (uint64_t)rint(v72));
            *(int16x4_t *)&a3[v61] = vmovn_s32(vminq_s32(vmaxq_s32(v66, (int32x4_t)0), v60));
            v61 += 4;
            v64 = v67 + 4;
            v63 = v68 + 4;
          }
          while (v61 <= (a6 - 4));
          if ((int)v61 < a6)
          {
            if (v6 >= 2)
            {
              do
              {
                v82 = v11 + v56 * v62[v67];
                v83 = 8;
                v84 = (uint64_t *)v57;
                do
                {
                  v85 = *v84--;
                  v82 = v82
                      + v10[(unint64_t)v83 / 8]
                      * (v12[(unint64_t)v83 / 8][v67] + *(double *)(v85 + 8 * v67));
                  v83 += 8;
                }
                while (v58 != v83);
                v86 = rint(v82);
                v87 = (uint64_t)v86 & ~((int)(uint64_t)v86 >> 31);
                if (v87 >= 0xFFFF)
                  LOWORD(v87) = -1;
                a3[v67++] = v87;
              }
              while (v67 < a6);
            }
            else
            {
              do
              {
                v80 = rint(v11 + v56 * v62[v67]);
                v81 = (uint64_t)v80 & ~((int)(uint64_t)v80 >> 31);
                if (v81 >= 0xFFFF)
                  LOWORD(v81) = -1;
                *v68++ = v81;
                ++v67;
              }
              while (v67 < a6);
            }
          }
          a3 = (_WORD *)((char *)a3 + v46);
          ++v12;
          v45 = (double *)((_DWORD)result - 1);
          v57 += 8;
          v59 = (_WORD *)((char *)v59 + v46);
        }
        while ((_DWORD)result);
      }
      else if (a6 >= 1)
      {
        v47 = *v10;
        if (v6 >= 2)
        {
          v88 = a2 + 8 * v8 - 8;
          v89 = 8 * (v8 + 1);
          do
          {
            v90 = (int)v45;
            v91 = *v12;
            v92 = v11 + v47 * **v12;
            v93 = 8;
            v94 = (double **)v88;
            do
            {
              result = v12[(unint64_t)v93 / 8];
              v95 = *v94--;
              v92 = v92 + v10[(unint64_t)v93 / 8] * (*result + *v95);
              v93 += 8;
            }
            while (v89 != v93);
            v96 = rint(v92);
            v97 = (uint64_t)v96 & ~((int)(uint64_t)v96 >> 31);
            if (v97 >= 0xFFFF)
              LOWORD(v97) = -1;
            *a3 = v97;
            if (a6 != 1)
            {
              v98 = v11 + v47 * v91[1];
              v99 = 0x1FFFFFFFFFFFFFFFLL;
              v100 = 8;
              do
              {
                result = v12[v99];
                v98 = v98 + v10[(unint64_t)v100 / 8] * (v12[(unint64_t)v100 / 8][1] + result[1]);
                v100 += 8;
                --v99;
              }
              while (v89 != v100);
              v101 = rint(v98);
              v102 = (uint64_t)v101 & ~((int)(uint64_t)v101 >> 31);
              if (v102 >= 0xFFFF)
                LOWORD(v102) = -1;
              a3[1] = v102;
              if (a6 != 2)
              {
                v103 = v11 + v47 * v91[2];
                v104 = 0x1FFFFFFFFFFFFFFFLL;
                v105 = 8;
                do
                {
                  v103 = v103 + v10[(unint64_t)v105 / 8] * (v12[(unint64_t)v105 / 8][2] + v12[v104][2]);
                  v105 += 8;
                  --v104;
                }
                while (v89 != v105);
                v106 = rint(v103);
                v107 = (uint64_t)v106 & ~((int)(uint64_t)v106 >> 31);
                if (v107 >= 0xFFFF)
                  LOWORD(v107) = -1;
                a3[2] = v107;
              }
            }
            a3 = (_WORD *)((char *)a3 + a4);
            ++v12;
            LODWORD(v45) = (_DWORD)v45 - 1;
            v88 += 8;
          }
          while (v90);
        }
        else
        {
          v48 = a3 + 2;
          do
          {
            v49 = *v12;
            v50 = rint(v11 + v47 * **v12);
            v51 = (uint64_t)v50 & ~((int)(uint64_t)v50 >> 31);
            if (v51 >= 0xFFFF)
              LOWORD(v51) = -1;
            *(v48 - 2) = v51;
            if (a6 != 1)
            {
              v52 = rint(v11 + v47 * v49[1]);
              v53 = (uint64_t)v52 & ~((int)(uint64_t)v52 >> 31);
              if (v53 >= 0xFFFF)
                LOWORD(v53) = -1;
              *(v48 - 1) = v53;
              if (a6 != 2)
              {
                v54 = rint(v11 + v47 * v49[2]);
                v55 = (uint64_t)v54 & ~((int)(uint64_t)v54 >> 31);
                if (v55 >= 0xFFFF)
                  LOWORD(v55) = -1;
                *v48 = v55;
              }
            }
            ++v12;
            v48 = (_WORD *)((char *)v48 + a4);
            --a5;
          }
          while (a5);
        }
      }
    }
  }
  else if (a5)
  {
    v13 = a6 - 4;
    v14 = rint(v11);
    v15 = (uint64_t)v14 & ~((int)(uint64_t)v14 >> 31);
    if (v15 >= 0xFFFF)
      v15 = 0xFFFF;
    v16 = a4;
    v17 = v8 + 1;
    v18 = vdupq_n_s16(v15);
    v19 = a2 + 8 * v8 - 8;
    v20 = 8 * v17;
    v21.i64[0] = 0xFFFF0000FFFFLL;
    v21.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a6 >= 4)
      {
        if (v6 >= 2)
        {
          result = 0;
          do
          {
            v23 = 8;
            v24 = (uint64_t *)v19;
            v25 = v11;
            v26 = v11;
            v27 = v11;
            v28 = v11;
            do
            {
              v29 = &v12[(unint64_t)v23 / 8][(_QWORD)result];
              v30 = *v24--;
              v31 = (double *)(v30 + 8 * (_QWORD)result);
              v32 = v10[(unint64_t)v23 / 8];
              v28 = v28 + v32 * (*v29 - *v31);
              v27 = v27 + v32 * (v29[1] - v31[1]);
              v26 = v26 + v32 * (v29[2] - v31[2]);
              v25 = v25 + v32 * (v29[3] - v31[3]);
              v23 += 8;
            }
            while (v20 != v23);
            v33 = (uint64_t)rint(v25);
            v34.i32[0] = (uint64_t)rint(v28);
            v34.i32[1] = (uint64_t)rint(v27);
            v34.i32[2] = (uint64_t)rint(v26);
            v34.i32[3] = v33;
            *(int16x4_t *)&a3[(_QWORD)result] = vmovn_s32(vminq_s32(vmaxq_s32(v34, (int32x4_t)0), v21));
            result = (double *)((char *)result + 4);
          }
          while ((uint64_t)result <= v13);
        }
        else
        {
          result = 0;
          v22 = a3;
          do
          {
            *v22++ = v18.i64[0];
            result = (double *)((char *)result + 4);
          }
          while ((uint64_t)result <= v13);
        }
        result = (double *)result;
        if ((int)result >= a6)
          goto LABEL_9;
      }
      else
      {
        result = 0;
        if (a6 <= 0)
          goto LABEL_9;
      }
      if (v6 >= 2)
      {
        do
        {
          v37 = 8;
          v38 = (uint64_t *)v19;
          v39 = v11;
          do
          {
            v40 = *v38--;
            v39 = v39
                + v10[(unint64_t)v37 / 8]
                * (v12[(unint64_t)v37 / 8][(_QWORD)result] - *(double *)(v40 + 8 * (_QWORD)result));
            v37 += 8;
          }
          while (v20 != v37);
          v41 = rint(v39);
          v42 = (uint64_t)v41 & ~((int)(uint64_t)v41 >> 31);
          if (v42 >= 0xFFFF)
            LOWORD(v42) = -1;
          a3[(_QWORD)result] = v42;
          result = (double *)((char *)result + 1);
        }
        while (result != (double *)a6);
        goto LABEL_9;
      }
      v35 = a6 - (_QWORD)result;
      if (v35 >= 0x10)
      {
        v36 = (double *)((char *)result + (v35 & 0xFFFFFFFFFFFFFFF0));
        result = (double *)(2 * (_QWORD)result);
        v43 = v35 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v44 = (int16x8_t *)((char *)result + (_QWORD)a3);
          *v44 = v18;
          v44[1] = v18;
          result += 4;
          v43 -= 16;
        }
        while (v43);
        if (v35 == (v35 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_9;
      }
      else
      {
        v36 = result;
      }
      do
      {
        a3[(_QWORD)v36] = v15;
        v36 = (double *)((char *)v36 + 1);
      }
      while ((double *)a6 != v36);
LABEL_9:
      a3 = (_WORD *)((char *)a3 + v16);
      ++v12;
      v19 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_10030C0A4()
{
  operator delete();
}

uint64_t sub_10030C0B8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10030C0F4(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7;
  uint64_t v9[2];

  v7 = sub_10030C1C0(a1, a2, a3, a5);
  *(_QWORD *)v7 = off_100453128;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_10029430C(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10030C198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_10030C440(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10030C1C0(uint64_t a1, uint64_t a2, int a3, double a4)
{
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v9 = (int *)(a1 + 20);
  *(_QWORD *)a1 = off_100453188;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2)
      goto LABEL_21;
    v10 = *(_QWORD *)(a2 + 56);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(a1 + 72);
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 20);
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v8 = *(_DWORD *)a2;
      v20 = *(_DWORD *)(a2 + 4);
      if (v20 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v20;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v21 = *(_QWORD **)(a2 + 72);
        v22 = *(_QWORD **)(a1 + 88);
        *v22 = *v21;
        v22[1] = v21[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0;
      v18 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v18 + 4 * v17++) = 0;
        v19 = *v9;
      }
      while (v17 < v19);
      *v8 = *(_DWORD *)a2;
      if ((int)v19 <= 2)
      {
        v20 = *(_DWORD *)(a2 + 4);
        if (v20 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v8, a2);
    goto LABEL_20;
  }
  LODWORD(v26) = 33619968;
  v27 = a1 + 16;
  v28 = 0;
  sub_1002181EC(a2, (uint64_t)&v26);
LABEL_21:
  v24 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v24 + v23 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 116) = (uint64_t)rint(a4);
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v24 != 1 && v23 != 1)
  {
    v26 = 0;
    v27 = 0;
    qmemcpy((void *)sub_10029430C(&v26, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v26, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_10030C40C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10030C440(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100453188;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

uint64_t sub_10030C4E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100453188;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_10030C580(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100453188;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

unint64_t sub_10030C630(unint64_t result, uint64_t a2, _WORD *a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  signed int v11;
  _QWORD *v12;
  int v13;
  int v14;
  signed int v15;
  uint64_t v16;
  int16x8_t v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  int32x4_t v27;
  uint64_t v28;
  const float *v29;
  int32x4_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  _QWORD *v37;
  _DWORD *v38;
  unint64_t v39;
  uint64_t *v40;
  signed int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int16x8_t *v45;
  int v46;
  int v47;
  _WORD *v48;
  _DWORD *v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  unsigned int *v54;
  _DWORD *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int32x4_t v61;
  int32x4_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  int16x8_t *v66;
  unint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  int16x8_t *v70;
  uint64_t v71;
  unint64_t v72;
  int32x4_t *v73;
  int16x8_t *v74;
  int32x4_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  const float *v79;
  int32x4_t v80;
  unint64_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  _DWORD *v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  _DWORD *v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _DWORD **v108;
  _DWORD **v109;
  int v110;
  int v111;
  int v112;
  _DWORD *v113;
  int v114;
  _DWORD **v115;
  _DWORD *v116;
  unint64_t v117;
  _DWORD **v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  _DWORD *v124;
  _DWORD **v125;
  unint64_t v126;
  _DWORD **v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  _DWORD *v133;
  _DWORD **v134;
  unint64_t v135;
  _DWORD **v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  signed int v144;

  v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0)
    v7 = *(_DWORD *)(result + 8);
  else
    v7 = v6 + 1;
  v8 = *(_QWORD *)(result + 32);
  v9 = (uint64_t)v7 >> 1;
  v10 = (int *)(v8 + 4 * (v7 >> 1));
  v11 = *(_DWORD *)(result + 116);
  v12 = (_QWORD *)(a2 + 8 * (v7 >> 1));
  v144 = v11;
  if ((*(_BYTE *)(result + 120) & 1) != 0)
  {
    if (!a5)
      return result;
    v46 = a5 - 1;
    v141 = a4;
    if (a6 <= 3)
    {
      if (a6 >= 1)
      {
        v47 = *v10;
        if (v6 >= 2)
        {
          v96 = (v9 + 1);
          v97 = v96 - 1;
          if ((unint64_t)(v96 - 1) >= 2)
          {
            v106 = v97 & 0xFFFFFFFFFFFFFFFELL;
            v107 = a2 + 8 * v9;
            v108 = (_DWORD **)(v107 - 8);
            result = v8 + 4 * v9 + 8;
            v109 = (_DWORD **)(v107 + 16);
            do
            {
              v111 = 0;
              v112 = v46;
              v113 = (_DWORD *)*v12;
              v114 = v11 + *(_DWORD *)*v12 * v47;
              v115 = v109;
              v116 = (_DWORD *)result;
              v117 = v97 & 0xFFFFFFFFFFFFFFFELL;
              v118 = v108;
              do
              {
                v114 += (**v118 + **(v115 - 1)) * *(v116 - 1);
                v111 += (**(v118 - 1) + **v115) * *v116;
                v118 -= 2;
                v116 += 2;
                v115 += 2;
                v117 -= 2;
              }
              while (v117);
              v119 = v111 + v114;
              if (v97 == v106)
              {
                v11 = v144;
              }
              else
              {
                v120 = -1 * (v97 | 1);
                v121 = v97 | 1;
                v11 = v144;
                do
                {
                  v119 += (*(_DWORD *)v12[v120] + *(_DWORD *)v12[v121]) * v10[v121];
                  ++v121;
                  --v120;
                }
                while (v96 != v121);
              }
              if (v119 <= -32768)
                v119 = -32768;
              if (v119 >= 0x7FFF)
                LOWORD(v119) = 0x7FFF;
              *a3 = v119;
              if (a6 != 1)
              {
                v122 = 0;
                v123 = v144 + v113[1] * v47;
                v124 = (_DWORD *)result;
                v125 = v109;
                v126 = v97 & 0xFFFFFFFFFFFFFFFELL;
                v127 = v108;
                do
                {
                  v123 += ((*v127)[1] + (*(v125 - 1))[1]) * *(v124 - 1);
                  v122 += ((*(v127 - 1))[1] + (*v125)[1]) * *v124;
                  v127 -= 2;
                  v125 += 2;
                  v124 += 2;
                  v126 -= 2;
                }
                while (v126);
                v128 = v122 + v123;
                if (v97 == v106)
                {
                  v11 = v144;
                }
                else
                {
                  v129 = -1 * (v97 | 1);
                  v130 = v97 | 1;
                  v11 = v144;
                  do
                  {
                    v128 += (*(_DWORD *)(v12[v129] + 4) + *(_DWORD *)(v12[v130] + 4)) * v10[v130];
                    ++v130;
                    --v129;
                  }
                  while (v96 != v130);
                }
                if (v128 <= -32768)
                  v128 = -32768;
                if (v128 >= 0x7FFF)
                  LOWORD(v128) = 0x7FFF;
                a3[1] = v128;
                if (a6 != 2)
                {
                  v131 = 0;
                  v132 = v144 + v113[2] * v47;
                  v133 = (_DWORD *)result;
                  v134 = v109;
                  v135 = v97 & 0xFFFFFFFFFFFFFFFELL;
                  v136 = v108;
                  do
                  {
                    v132 += ((*v136)[2] + (*(v134 - 1))[2]) * *(v133 - 1);
                    v131 += ((*(v136 - 1))[2] + (*v134)[2]) * *v133;
                    v136 -= 2;
                    v134 += 2;
                    v133 += 2;
                    v135 -= 2;
                  }
                  while (v135);
                  v110 = v131 + v132;
                  if (v97 != v106)
                  {
                    v137 = -1 * (v97 | 1);
                    v138 = v97 | 1;
                    do
                    {
                      v110 += (*(_DWORD *)(v12[v137] + 8) + *(_DWORD *)(v12[v138] + 8)) * v10[v138];
                      ++v138;
                      --v137;
                    }
                    while (v96 != v138);
                  }
                  if (v110 <= -32768)
                    v110 = -32768;
                  if (v110 >= 0x7FFF)
                    LOWORD(v110) = 0x7FFF;
                  a3[2] = v110;
                }
              }
              a3 = (_WORD *)((char *)a3 + a4);
              ++v12;
              v46 = v112 - 1;
              ++v108;
              ++v109;
            }
            while (v112);
          }
          else
          {
            do
            {
              v98 = v46;
              v99 = (_DWORD *)*v12;
              v100 = v11 + *(_DWORD *)*v12 * v47;
              result = -8;
              v101 = 1;
              do
              {
                v100 += (**(_DWORD **)((char *)v12 + result) + *(_DWORD *)v12[v101]) * v10[v101];
                ++v101;
                result -= 8;
              }
              while (v96 != v101);
              if (v100 <= -32768)
                v100 = -32768;
              if (v100 >= 0x7FFF)
                LOWORD(v100) = 0x7FFF;
              *a3 = v100;
              if (a6 != 1)
              {
                v102 = v11 + v99[1] * v47;
                result = -8;
                v103 = 1;
                do
                {
                  v102 += (*(_DWORD *)(*(_QWORD *)((char *)v12 + result) + 4) + *(_DWORD *)(v12[v103] + 4))
                        * v10[v103];
                  ++v103;
                  result -= 8;
                }
                while (v96 != v103);
                if (v102 <= -32768)
                  v102 = -32768;
                if (v102 >= 0x7FFF)
                  LOWORD(v102) = 0x7FFF;
                a3[1] = v102;
                if (a6 != 2)
                {
                  v104 = v11 + v99[2] * v47;
                  v105 = 0x1FFFFFFFFFFFFFFFLL;
                  result = 1;
                  do
                  {
                    v104 += (*(_DWORD *)(v12[v105] + 8) + *(_DWORD *)(v12[result] + 8)) * v10[result];
                    ++result;
                    --v105;
                  }
                  while (v96 != result);
                  if (v104 <= -32768)
                    v104 = -32768;
                  if (v104 >= 0x7FFF)
                    LOWORD(v104) = 0x7FFF;
                  a3[2] = v104;
                }
              }
              a3 = (_WORD *)((char *)a3 + a4);
              ++v12;
              --v46;
            }
            while (v98);
          }
        }
        else
        {
          v48 = a3 + 2;
          do
          {
            v49 = (_DWORD *)*v12;
            v50 = v11 + *(_DWORD *)*v12 * v47;
            if (v50 <= -32768)
              v50 = -32768;
            if (v50 >= 0x7FFF)
              LOWORD(v50) = 0x7FFF;
            *(v48 - 2) = v50;
            if (a6 != 1)
            {
              v51 = v11 + v49[1] * v47;
              if (v51 <= -32768)
                v51 = -32768;
              if (v51 >= 0x7FFF)
                LOWORD(v51) = 0x7FFF;
              *(v48 - 1) = v51;
              if (a6 != 2)
              {
                v52 = v11 + v49[2] * v47;
                if (v52 <= -32768)
                  v52 = -32768;
                if (v52 >= 0x7FFF)
                  LOWORD(v52) = 0x7FFF;
                *v48 = v52;
              }
            }
            ++v12;
            v48 = (_WORD *)((char *)v48 + a4);
            --a5;
          }
          while (a5);
        }
      }
      return result;
    }
    v53 = (a6 - 4);
    v54 = (unsigned int *)(v8 + 4 * v9);
    v57 = *v54;
    v55 = v54 + 2;
    v56 = v57;
    v58 = (v9 + 1);
    v59 = (v53 & 0xFFFFFFFC) + 5;
    if (v59 <= a6)
      v59 = a6;
    v60 = v58 - 1;
    result = (v58 - 1) & 0xFFFFFFFFFFFFFFFELL;
    v140 = v59 - (v53 & 0xFFFFFFFC) - 4;
    v139 = v140 & 0xFFFFFFFFFFFFFFF0;
    v61 = vdupq_n_s32(v56);
    v62 = vdupq_n_s32(v11);
    v63 = a2 + 8 * v9;
    v64 = (uint64_t *)(v63 - 8);
    v65 = (_QWORD *)(v63 + 16);
    v66 = (int16x8_t *)(a3 + 12);
    while (1)
    {
      v67 = 0;
      v142 = v46;
      v68 = (_DWORD *)*v12;
      v69 = *v12 + 48;
      v70 = v66;
      v71 = 4;
      do
      {
        v72 = v71;
        v73 = (int32x4_t *)v69;
        v74 = v70;
        v75 = vmlaq_s32(v62, *(int32x4_t *)&v68[v67], v61);
        if (v6 >= 2)
        {
          v76 = v64;
          v77 = 1;
          do
          {
            v78 = *v76--;
            v79 = (const float *)&v10[v77];
            v80 = (int32x4_t)vld1q_dup_f32(v79);
            v75 = vmlaq_s32(v75, vaddq_s32(*(int32x4_t *)(v78 + 4 * v67), *(int32x4_t *)(v12[v77++] + 4 * v67)), v80);
          }
          while (v58 != v77);
        }
        *(int16x4_t *)&a3[v67] = vqmovn_s32(v75);
        v67 += 4;
        v71 = v72 + 4;
        v69 += 16;
        v70 = (int16x8_t *)&v74->u64[1];
      }
      while (v67 <= v53);
      if ((int)v67 >= a6)
        goto LABEL_71;
      if (v6 >= 2)
        break;
      if (v140 < 0x10)
        goto LABEL_165;
      v81 = v140 & 0xFFFFFFFFFFFFFFF0;
      v72 += v139;
      do
      {
        v83 = v73[-2];
        v82 = v73[-1];
        v85 = *v73;
        v84 = v73[1];
        v73 += 4;
        v74[-1] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v62, v83, v61)), vmlaq_s32(v62, v82, v61));
        *v74 = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v62, v85, v61)), vmlaq_s32(v62, v84, v61));
        v74 += 2;
        v81 -= 16;
      }
      while (v81);
      if (v140 != v139)
      {
LABEL_165:
        do
        {
          v86 = v144 + v68[v72] * v56;
          if (v86 <= -32768)
            v86 = -32768;
          if (v86 >= 0x7FFF)
            LOWORD(v86) = 0x7FFF;
          a3[v72++] = v86;
        }
        while (v72 < a6);
      }
LABEL_71:
      a3 = (_WORD *)((char *)a3 + v141);
      ++v12;
      v46 = v142 - 1;
      ++v64;
      ++v65;
      v66 = (int16x8_t *)((char *)v66 + v141);
      if (!v142)
        return result;
    }
    while (1)
    {
      v88 = v144 + v68[v72] * v56;
      if (v60 < 2)
        break;
      v90 = 0;
      v91 = v65;
      v92 = v55;
      v93 = (v58 - 1) & 0xFFFFFFFFFFFFFFFELL;
      v94 = v64;
      do
      {
        v88 += (*(_DWORD *)(*v94 + 4 * v72) + *(_DWORD *)(*(v91 - 1) + 4 * v72)) * *(v92 - 1);
        v90 += (*(_DWORD *)(*(v94 - 1) + 4 * v72) + *(_DWORD *)(*v91 + 4 * v72)) * *v92;
        v94 -= 2;
        v92 += 2;
        v91 += 2;
        v93 -= 2;
      }
      while (v93);
      v88 += v90;
      v89 = (v58 - 1) | 1;
      if (v60 != result)
        goto LABEL_101;
LABEL_90:
      if (v88 <= -32768)
        v87 = -32768;
      else
        v87 = v88;
      if (v87 >= 0x7FFF)
        LOWORD(v87) = 0x7FFF;
      a3[v72++] = v87;
      if (v72 >= a6)
        goto LABEL_71;
    }
    v89 = 1;
LABEL_101:
    v95 = -1 * v89;
    do
    {
      v88 += (*(_DWORD *)(v12[v95] + 4 * v72) + *(_DWORD *)(v12[v89] + 4 * v72)) * v10[v89];
      ++v89;
      --v95;
    }
    while (v58 != v89);
    goto LABEL_90;
  }
  v13 = a6;
  if (a5)
  {
    v14 = a6 - 4;
    if (v11 <= -32768)
      v15 = -32768;
    else
      v15 = *(_DWORD *)(result + 116);
    if (v15 >= 0x7FFF)
      v15 = 0x7FFF;
    v16 = (v9 + 1);
    result = v16 - 1;
    v17 = vdupq_n_s16(v15);
    v18 = vdupq_n_s32(v11);
    v19 = a2 + 8 * v9;
    v20 = (uint64_t *)(v19 - 8);
    v21 = v8 + 4 * v9 + 8;
    v22 = (_QWORD *)(v19 + 16);
    while (1)
    {
      if (v13 >= 4)
      {
        if (v6 >= 2)
        {
          v23 = 0;
          do
          {
            v25 = v20;
            v26 = 1;
            v27 = v18;
            do
            {
              v28 = *v25--;
              v29 = (const float *)&v10[v26];
              v30 = (int32x4_t)vld1q_dup_f32(v29);
              v27 = vmlaq_s32(v27, vsubq_s32(*(int32x4_t *)(v12[v26++] + 4 * v23), *(int32x4_t *)(v28 + 4 * v23)), v30);
            }
            while (v16 != v26);
            *(int16x4_t *)&a3[v23] = vqmovn_s32(v27);
            v23 += 4;
          }
          while (v23 <= v14);
        }
        else
        {
          v23 = 0;
          v24 = a3;
          do
          {
            *v24++ = v17.i64[0];
            v23 += 4;
          }
          while (v23 <= v14);
        }
        v23 = v23;
        if ((int)v23 >= v13)
          goto LABEL_12;
      }
      else
      {
        v23 = 0;
        if (v13 <= 0)
          goto LABEL_12;
      }
      if (v6 >= 2)
        break;
      v31 = a6 - v23;
      if (v31 >= 0x10)
      {
        v32 = (v31 & 0xFFFFFFFFFFFFFFF0) + v23;
        v43 = v23;
        v44 = v31 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v45 = (int16x8_t *)&a3[v43];
          *v45 = v17;
          v45[1] = v17;
          v43 += 16;
          v44 -= 16;
        }
        while (v44);
        if (v31 == (v31 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_12;
      }
      else
      {
        v32 = v23;
      }
      do
        a3[v32++] = v15;
      while (a6 != v32);
LABEL_12:
      a3 = (_WORD *)((char *)a3 + a4);
      ++v12;
      ++v20;
      ++v22;
      --a5;
      v13 = a6;
      if (!a5)
        return result;
    }
    while (result >= 2)
    {
      v36 = 0;
      v37 = v22;
      v38 = (_DWORD *)v21;
      v39 = (v16 - 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v20;
      v41 = v11;
      do
      {
        v41 += (*(_DWORD *)(*(v37 - 1) + 4 * v23) - *(_DWORD *)(*v40 + 4 * v23)) * *(v38 - 1);
        v36 += (*(_DWORD *)(*v37 + 4 * v23) - *(_DWORD *)(*(v40 - 1) + 4 * v23)) * *v38;
        v40 -= 2;
        v38 += 2;
        v37 += 2;
        v39 -= 2;
      }
      while (v39);
      v35 = v36 + v41;
      v34 = (v16 - 1) | 1;
      v11 = v144;
      if (result != ((v16 - 1) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_39;
LABEL_28:
      if (v35 <= -32768)
        v33 = -32768;
      else
        v33 = v35;
      if (v33 >= 0x7FFF)
        LOWORD(v33) = 0x7FFF;
      a3[v23++] = v33;
      if (v23 == a6)
        goto LABEL_12;
    }
    v34 = 1;
    v35 = v11;
LABEL_39:
    v42 = -1 * v34;
    do
    {
      v35 += (*(_DWORD *)(v12[v34] + 4 * v23) - *(_DWORD *)(v12[v42] + 4 * v23)) * v10[v34];
      ++v34;
      --v42;
    }
    while (v16 != v34);
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_10030D054(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100453188;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_10030D0F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100453188;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

unint64_t sub_10030D1A4(unint64_t result, _QWORD *a2, _WORD *a3, int a4, int a5, int a6)
{
  unsigned int *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  _WORD *v13;
  _DWORD *v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x8_t *v21;
  _QWORD *i;
  unint64_t v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  int16x8_t *v27;
  uint64_t v28;
  unint64_t v29;
  int32x4_t *v30;
  int16x8_t *v31;
  int32x4_t v32;
  uint64_t j;
  const float *v34;
  int32x4_t v35;
  unint64_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t k;
  int v45;
  _QWORD *v46;
  _DWORD *v47;
  unint64_t v48;
  _WORD *v49;
  _DWORD *v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  _DWORD **v56;
  int v57;
  int v58;
  int v59;
  _DWORD *v60;
  unsigned int v61;
  _DWORD **v62;
  _DWORD *v63;
  unint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  _DWORD *v70;
  _DWORD **v71;
  unint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  _DWORD *v78;
  _DWORD **v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;

  if (!a5)
    return result;
  v6 = *(unsigned int **)(result + 32);
  v7 = *(_DWORD *)(result + 116);
  v8 = a5 - 1;
  v9 = *(unsigned int *)(result + 8);
  if (a6 > 3)
  {
    v16 = (a6 - 4);
    v17 = *v6;
    v18 = v9 - 1;
    result = (v16 & 0xFFFFFFFC) + 5;
    if (result <= a6)
      result = a6;
    v83 = result - (v16 & 0xFFFFFFFC) - 4;
    v82 = v83 & 0xFFFFFFFFFFFFFFF0;
    v19 = vdupq_n_s32(v17);
    v20 = vdupq_n_s32(v7);
    v21 = (int16x8_t *)(a3 + 12);
    for (i = a2 + 2; ; ++i)
    {
      v23 = 0;
      v24 = v8;
      v25 = (_DWORD *)*a2;
      v26 = *a2 + 48;
      v27 = v21;
      v28 = 4;
      do
      {
        v29 = v28;
        v30 = (int32x4_t *)v26;
        v31 = v27;
        v32 = vmlaq_s32(v20, *(int32x4_t *)&v25[v23], v19);
        if ((int)v9 >= 2)
        {
          for (j = 1; j != v9; ++j)
          {
            v34 = (const float *)&v6[j];
            v35 = (int32x4_t)vld1q_dup_f32(v34);
            v32 = vmlaq_s32(v32, *(int32x4_t *)(a2[j] + 4 * v23), v35);
          }
        }
        *(int16x4_t *)&a3[v23] = vqmovn_s32(v32);
        v23 += 4;
        v28 += 4;
        v26 += 16;
        v27 = (int16x8_t *)&v31->u64[1];
      }
      while (v23 <= v16);
      if ((int)v23 >= a6)
        goto LABEL_28;
      if ((int)v9 >= 2)
        break;
      if (v83 < 0x10)
        goto LABEL_114;
      v36 = v83 & 0xFFFFFFFFFFFFFFF0;
      v29 += v82;
      do
      {
        v38 = v30[-2];
        v37 = v30[-1];
        v40 = *v30;
        v39 = v30[1];
        v30 += 4;
        v31[-1] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v20, v38, v19)), vmlaq_s32(v20, v37, v19));
        *v31 = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v20, v40, v19)), vmlaq_s32(v20, v39, v19));
        v31 += 2;
        v36 -= 16;
      }
      while (v36);
      if (v83 != v82)
      {
LABEL_114:
        do
        {
          v41 = v7 + v25[v29] * v17;
          if (v41 <= -32768)
            v41 = -32768;
          if (v41 >= 0x7FFF)
            LOWORD(v41) = 0x7FFF;
          a3[v29++] = v41;
        }
        while (v29 < a6);
      }
LABEL_28:
      a3 = (_WORD *)((char *)a3 + a4);
      ++a2;
      v8 = v24 - 1;
      v21 = (int16x8_t *)((char *)v21 + a4);
      if (!v24)
        return result;
    }
    while (1)
    {
      v43 = v7 + v25[v29] * v17;
      if (v9 < 3)
        break;
      v45 = 0;
      v46 = i;
      v47 = v6 + 2;
      v48 = v18 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        result = *(unsigned int *)(*(v46 - 1) + 4 * v29);
        v43 += result * *(v47 - 1);
        v45 += *(_DWORD *)(*v46 + 4 * v29) * *v47;
        v47 += 2;
        v46 += 2;
        v48 -= 2;
      }
      while (v48);
      v43 += v45;
      k = v18 | 1;
      if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_58;
LABEL_47:
      if (v43 <= -32768)
        v42 = -32768;
      else
        v42 = v43;
      if (v42 >= 0x7FFF)
        LOWORD(v42) = 0x7FFF;
      a3[v29++] = v42;
      if (v29 >= a6)
        goto LABEL_28;
    }
    for (k = 1; k != v9; ++k)
LABEL_58:
      v43 += *(_DWORD *)(a2[k] + 4 * v29) * v6[k];
    goto LABEL_47;
  }
  if (a6 >= 1)
  {
    v10 = *v6;
    if ((int)v9 <= 1)
    {
      v49 = a3 + 2;
      do
      {
        v50 = (_DWORD *)*a2;
        v51 = v7 + *(_DWORD *)*a2 * v10;
        if (v51 <= -32768)
          v51 = -32768;
        if (v51 >= 0x7FFF)
          LOWORD(v51) = 0x7FFF;
        *(v49 - 2) = v51;
        if (a6 != 1)
        {
          v52 = v7 + v50[1] * v10;
          if (v52 <= -32768)
            v52 = -32768;
          if (v52 >= 0x7FFF)
            LOWORD(v52) = 0x7FFF;
          *(v49 - 1) = v52;
          if (a6 != 2)
          {
            v53 = v7 + v50[2] * v10;
            if (v53 <= -32768)
              v53 = -32768;
            if (v53 >= 0x7FFF)
              LOWORD(v53) = 0x7FFF;
            *v49 = v53;
          }
        }
        ++a2;
        v49 = (_WORD *)((char *)v49 + a4);
        --a5;
      }
      while (a5);
    }
    else if ((_DWORD)v9 == 2)
    {
      v11 = v6[1];
      v12 = a2 + 1;
      v13 = a3 + 2;
      do
      {
        v14 = (_DWORD *)*(v12 - 1);
        LODWORD(result) = v7 + *v14 * v10 + *(_DWORD *)*v12 * v11;
        if ((int)result <= -32768)
          LODWORD(result) = -32768;
        if ((int)result >= 0x7FFF)
          result = 0x7FFFLL;
        else
          result = result;
        *(v13 - 2) = result;
        if (a6 != 1)
        {
          LODWORD(result) = v7 + v14[1] * v10 + *(_DWORD *)(*v12 + 4) * v6[1];
          if ((int)result <= -32768)
            LODWORD(result) = -32768;
          if ((int)result >= 0x7FFF)
            result = 0x7FFFLL;
          else
            result = result;
          *(v13 - 1) = result;
          if (a6 != 2)
          {
            result = v6[1];
            v15 = v7 + v14[2] * v10 + *(_DWORD *)(*v12 + 8) * result;
            if (v15 <= -32768)
              v15 = -32768;
            if (v15 >= 0x7FFF)
              LOWORD(v15) = 0x7FFF;
            *v13 = v15;
          }
        }
        ++v12;
        v13 = (_WORD *)((char *)v13 + a4);
        --a5;
      }
      while (a5);
    }
    else
    {
      v54 = v9 - 1;
      v55 = (v9 - 1) & 0xFFFFFFFFFFFFFFFELL;
      v56 = (_DWORD **)(a2 + 2);
      result = 4294934528;
      do
      {
        v58 = 0;
        v59 = v8;
        v60 = (_DWORD *)*a2;
        v61 = v7 + *(_DWORD *)*a2 * v10;
        v62 = v56;
        v63 = v6 + 2;
        v64 = (v9 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v61 += **(v62 - 1) * *(v63 - 1);
          v58 += **v62 * *v63;
          v63 += 2;
          v62 += 2;
          v64 -= 2;
        }
        while (v64);
        v65 = v58 + v61;
        if (v54 == v55)
        {
          v66 = a6;
        }
        else
        {
          v67 = (v9 - 1) | 1;
          v66 = a6;
          do
          {
            v65 += *(_DWORD *)a2[v67] * v6[v67];
            ++v67;
          }
          while (v9 != v67);
        }
        if (v65 <= -32768)
          v65 = -32768;
        if (v65 >= 0x7FFF)
          LOWORD(v65) = 0x7FFF;
        *a3 = v65;
        if (v66 != 1)
        {
          v68 = 0;
          v69 = v7 + v60[1] * v10;
          v70 = v6 + 2;
          v71 = v56;
          v72 = (v9 - 1) & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v69 += (*(v71 - 1))[1] * *(v70 - 1);
            v68 += (*v71)[1] * *v70;
            v71 += 2;
            v70 += 2;
            v72 -= 2;
          }
          while (v72);
          v73 = v68 + v69;
          if (v54 == v55)
          {
            v74 = a6;
          }
          else
          {
            v75 = (v9 - 1) | 1;
            v74 = a6;
            do
            {
              v73 += *(_DWORD *)(a2[v75] + 4) * v6[v75];
              ++v75;
            }
            while (v9 != v75);
          }
          if (v73 <= -32768)
            v73 = -32768;
          if (v73 >= 0x7FFF)
            LOWORD(v73) = 0x7FFF;
          a3[1] = v73;
          if (v74 != 2)
          {
            v76 = 0;
            v77 = v7 + v60[2] * v10;
            v78 = v6 + 2;
            v79 = v56;
            v80 = (v9 - 1) & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v77 += (*(v79 - 1))[2] * *(v78 - 1);
              v76 += (*v79)[2] * *v78;
              v79 += 2;
              v78 += 2;
              v80 -= 2;
            }
            while (v80);
            v57 = v76 + v77;
            if (v54 != v55)
            {
              v81 = (v9 - 1) | 1;
              do
              {
                v57 += *(_DWORD *)(a2[v81] + 8) * v6[v81];
                ++v81;
              }
              while (v9 != v81);
            }
            if (v57 <= -32768)
              v57 = -32768;
            if (v57 >= 0x7FFF)
              LOWORD(v57) = 0x7FFF;
            a3[2] = v57;
          }
        }
        a3 = (_WORD *)((char *)a3 + a4);
        ++a2;
        v8 = v59 - 1;
        ++v56;
      }
      while (v59);
    }
  }
  return result;
}

void sub_10030D7AC()
{
  operator delete();
}

uint64_t sub_10030D7C0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10030D7FC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v9;
  uint64_t v11[2];

  v9 = sub_10030D8C8(a1, a2, a3, a7, a5, a6);
  *(_QWORD *)v9 = off_1004531F8;
  *(_DWORD *)(v9 + 236) = a4;
  if ((a4 & 3) == 0)
  {
    v11[0] = 0;
    v11[1] = 0;
    qmemcpy((void *)sub_10029430C(v11, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, v11, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10030D8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_10030DB9C(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10030D8C8(uint64_t a1, uint64_t a2, int a3, double a4, uint64_t a5, uint64_t a6)
{
  _DWORD *v11;
  int *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  float v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = off_100453258;
  *(_DWORD *)(a1 + 16) = 1124007936;
  v11 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  v12 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  v13 = (_DWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 128) = 1124007936;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 136;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  v14 = a1 + 120;
  if ((*(_BYTE *)(a2 + 1) & 0x40) != 0)
  {
    if (v11 == (_DWORD *)a2)
      goto LABEL_21;
    v15 = *(_QWORD *)(a2 + 56);
    if (v15)
    {
      v16 = (unsigned int *)(v15 + 20);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      v18 = *(_QWORD *)(a1 + 72);
      if (v18)
      {
        v19 = (unsigned int *)(v18 + 20);
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
          sub_100256C90(a1 + 16);
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v11 = *(_DWORD *)a2;
      v25 = *(_DWORD *)(a2 + 4);
      if (v25 <= 2)
      {
LABEL_17:
        *(_DWORD *)(a1 + 20) = v25;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 8);
        v26 = *(_QWORD **)(a2 + 72);
        v27 = *(_QWORD **)(a1 + 88);
        *v27 = *v26;
        v27[1] = v26[1];
LABEL_20:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v22 = 0;
      v23 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v23 + 4 * v22++) = 0;
        v24 = *v12;
      }
      while (v22 < v24);
      *v11 = *(_DWORD *)a2;
      if ((int)v24 <= 2)
      {
        v25 = *(_DWORD *)(a2 + 4);
        if (v25 <= 2)
          goto LABEL_17;
      }
    }
    sub_100256B48((uint64_t)v11, a2);
    goto LABEL_20;
  }
  LODWORD(v30) = 33619968;
  v31 = a1 + 16;
  v32 = 0;
  sub_1002181EC(a2, (uint64_t)&v30);
LABEL_21:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) - 1;
  *(_DWORD *)(a1 + 12) = a3;
  v28 = a4;
  *(float *)(a1 + 232) = v28;
  sub_10030E1AC(v14, a6);
  if ((*v11 & 0xFFF) != 5 || *v13 != 1 && *(_DWORD *)(a1 + 28) != 1)
  {
    v30 = 0;
    v31 = 0;
    qmemcpy((void *)sub_10029430C(&v30, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_100294B74(-215, &v30, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_10030DB60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1002F11EC(v2);
  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10030DB9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453258;
  v2 = *(_QWORD *)(a1 + 184);
  if (v2)
  {
    v3 = a1 + 128;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  if (*(int *)(a1 + 132) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 192);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 132));
  }
  v9 = *(void **)(a1 + 200);
  if (v9 != (void *)(a1 + 208))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 16);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 20));
  }
  v16 = *(void **)(a1 + 88);
  if (v16 != (void *)(a1 + 96))
    j__free(v16);
  return a1;
}

void sub_10030DCB4(uint64_t a1)
{
  sub_10030DB9C(a1);
  operator delete();
}

int64_t sub_10030DCD8(int64_t result, uint64_t a2, int16x4_t *a3, int a4, int a5, uint64_t a6, double a7)
{
  int v7;
  uint64_t v9;
  const float *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  uint64_t v27;
  float *v28;
  float v29;
  uint64_t v30;
  int32x4_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int16x8_t *v36;
  uint64_t *v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int16x8_t v69;
  int v70;
  float v71;
  int v72;

  v7 = a5;
  v72 = *(_DWORD *)(result + 8);
  v9 = (uint64_t)(v72 + (v72 < 0)) >> 1;
  v10 = (const float *)(*(_QWORD *)(result + 32) + 4 * (v72 / 2));
  LODWORD(a7) = *(_DWORD *)(result + 232);
  v11 = (uint64_t *)(a2 + 8 * (v72 / 2));
  v68 = a6;
  v71 = *(float *)&a7;
  if ((*(_BYTE *)(result + 236) & 1) != 0)
  {
    if (a5)
    {
      v65 = a4;
      v67 = result + 120;
      v42 = (*(_DWORD *)(result + 8) / 2 + 1);
      v43 = (int)a6 - 4;
      v44 = (int)a6;
      v63 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      v45 = a2 + 8 * v9 - 8;
      do
      {
        v70 = v7;
        v46 = a6;
        result = sub_10030E52C(v67, v11, a3, a6);
        if ((int)result <= (int)v43)
        {
          v47 = *v11;
          result = (int)result;
          v48 = vld1q_dup_f32(v10);
          do
          {
            v49 = vmlaq_f32(v63, *(float32x4_t *)(v47 + 4 * result), v48);
            if (v72 >= 2)
            {
              v50 = (uint64_t *)v45;
              v51 = 1;
              do
              {
                v52 = *v50--;
                v49 = vmlaq_n_f32(v49, vaddq_f32(*(float32x4_t *)(v11[v51] + 4 * result), *(float32x4_t *)(v52 + 4 * result)), v10[v51]);
                ++v51;
              }
              while (v42 != v51);
            }
            v49.i32[0] = (uint64_t)rintf(v49.f32[0]);
            v49.i32[1] = (uint64_t)rintf(v49.f32[1]);
            v49.i32[2] = (uint64_t)rintf(v49.f32[2]);
            v49.i32[3] = (uint64_t)rintf(v49.f32[3]);
            *(int16x4_t *)((char *)a3 + 2 * result) = vqmovn_s32((int32x4_t)v49);
            result += 4;
          }
          while (result <= v43);
          v46 = v68;
        }
        a6 = v46;
        if ((int)result < (int)v46)
        {
          v53 = *v10;
          v54 = *v11;
          v55 = (int)result;
          if (v72 >= 2)
          {
            do
            {
              v57 = v71 + (float)(v53 * *(float *)(v54 + 4 * v55));
              v58 = (uint64_t *)v45;
              v59 = 1;
              do
              {
                v60 = *v58--;
                v57 = v57 + (float)(v10[v59] * (float)(*(float *)(v11[v59] + 4 * v55) + *(float *)(v60 + 4 * v55)));
                ++v59;
              }
              while (v42 != v59);
              v61 = (uint64_t)rintf(v57);
              if ((int)v61 <= -32768)
                LODWORD(v61) = -32768;
              if ((int)v61 >= 0x7FFF)
                LOWORD(v61) = 0x7FFF;
              a3->i16[v55++] = v61;
            }
            while (v55 != v44);
          }
          else
          {
            do
            {
              v56 = (uint64_t)rintf(v71 + (float)(v53 * *(float *)(v54 + 4 * v55)));
              if ((int)v56 <= -32768)
                LODWORD(v56) = -32768;
              if ((int)v56 >= 0x7FFF)
                LOWORD(v56) = 0x7FFF;
              a3->i16[v55++] = v56;
            }
            while (v44 != v55);
          }
        }
        a3 = (int16x4_t *)((char *)a3 + v65);
        ++v11;
        v45 += 8;
        v7 = v70 - 1;
      }
      while (v70 != 1);
    }
  }
  else if (a5)
  {
    v66 = result + 120;
    v12 = (uint64_t)rintf(*(float *)&a7);
    if ((int)v12 <= -32768)
      LODWORD(v12) = -32768;
    if ((int)v12 >= 0x7FFF)
      v13 = 0x7FFF;
    else
      v13 = v12;
    v62 = a4;
    v14 = (*(_DWORD *)(result + 8) / 2 + 1);
    v15 = (int)a6 - 4;
    v16 = (int)a6;
    v17 = a2 + 8 * v9 - 8;
    v64 = v13;
    v69 = vdupq_n_s16(v13);
    do
    {
      v18 = a6;
      result = sub_10030E52C(v66, v11, a3, a6);
      if ((int)result <= (int)v15)
      {
        result = (int)result;
        if (v72 >= 2)
        {
          do
          {
            v20 = (uint64_t *)v17;
            v21 = 1;
            v22 = v71;
            v23 = v71;
            v24 = v71;
            v25 = v71;
            do
            {
              v26 = (float *)(v11[v21] + 4 * result);
              v27 = *v20--;
              v28 = (float *)(v27 + 4 * result);
              v29 = v10[v21];
              v25 = v25 + (float)(v29 * (float)(*v26 - *v28));
              v24 = v24 + (float)(v29 * (float)(v26[1] - v28[1]));
              v23 = v23 + (float)(v29 * (float)(v26[2] - v28[2]));
              v22 = v22 + (float)(v29 * (float)(v26[3] - v28[3]));
              ++v21;
            }
            while (v14 != v21);
            v30 = (uint64_t)rintf(v22);
            v31.i32[0] = (uint64_t)rintf(v25);
            v31.i32[1] = (uint64_t)rintf(v24);
            v31.i32[2] = (uint64_t)rintf(v23);
            v31.i32[3] = v30;
            *(int16x4_t *)((char *)a3 + 2 * result) = vqmovn_s32(v31);
            result += 4;
          }
          while (result <= v15);
        }
        else
        {
          v19 = 2 * (int)result;
          do
          {
            *(int16x4_t *)((char *)a3 + v19) = *(int16x4_t *)v69.i8;
            result += 4;
            v19 += 8;
          }
          while (result <= v15);
        }
        v18 = v68;
      }
      a6 = v18;
      if ((int)result < (int)v18)
      {
        v32 = (int)result;
        if (v72 >= 2)
        {
          do
          {
            v37 = (uint64_t *)v17;
            v38 = 1;
            v39 = v71;
            do
            {
              v40 = *v37--;
              v39 = v39 + (float)(v10[v38] * (float)(*(float *)(v11[v38] + 4 * v32) - *(float *)(v40 + 4 * v32)));
              ++v38;
            }
            while (v14 != v38);
            v41 = (uint64_t)rintf(v39);
            if ((int)v41 <= -32768)
              LODWORD(v41) = -32768;
            if ((int)v41 >= 0x7FFF)
              LOWORD(v41) = 0x7FFF;
            a3->i16[v32++] = v41;
          }
          while (v32 != v16);
        }
        else
        {
          v33 = v16 - (int)result;
          if (v33 < 0x10)
            goto LABEL_64;
          v34 = 2 * (int)result;
          v35 = v33 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v36 = (int16x8_t *)((char *)a3 + v34);
            *v36 = v69;
            v36[1] = v69;
            v34 += 32;
            v35 -= 16;
          }
          while (v35);
          v32 = (v33 & 0xFFFFFFFFFFFFFFF0) + (int)result;
          if (v33 != (v33 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_64:
            do
              a3->i16[v32++] = v64;
            while (v16 != v32);
          }
        }
      }
      a3 = (int16x4_t *)((char *)a3 + v62);
      ++v11;
      v17 += 8;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_10030E1AC(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = (_DWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_DWORD *)(a1 + 8);
  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a2 + 64);
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 20);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    v9 = *(_QWORD *)(a1 + 64);
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 20);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        sub_100256C90(a1 + 8);
    }
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    if (*(int *)(a1 + 12) <= 0)
    {
      *v5 = *v4;
      v16 = *(_DWORD *)(a2 + 12);
      if (v16 <= 2)
      {
LABEL_15:
        *(_DWORD *)(a1 + 12) = v16;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v17 = *(_QWORD **)(a2 + 80);
        v18 = *(_QWORD **)(a1 + 80);
        *v18 = *v17;
        v18[1] = v17[1];
LABEL_18:
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        goto LABEL_19;
      }
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 72);
      do
      {
        *(_DWORD *)(v14 + 4 * v13++) = 0;
        v15 = *(int *)(a1 + 12);
      }
      while (v13 < v15);
      *v5 = *v4;
      if ((int)v15 <= 2)
      {
        v16 = *(_DWORD *)(a2 + 12);
        if (v16 <= 2)
          goto LABEL_15;
      }
    }
    sub_100256B48((uint64_t)v5, (uint64_t)v4);
    goto LABEL_18;
  }
LABEL_19:
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

void sub_10030E2F4(uint64_t a1)
{
  sub_10030DB9C(a1);
  operator delete();
}

int64_t sub_10030E318(int64_t result, uint64_t *a2, int16x4_t *a3, int a4, int a5, int a6)
{
  int v7;
  int16x4_t *v8;
  uint64_t *v9;
  float *v10;
  float v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t i;
  float *v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t j;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a5)
  {
    v7 = a5;
    v8 = a3;
    v9 = a2;
    v10 = *(float **)(result + 32);
    v11 = *(float *)(result + 232);
    v34 = a4;
    v35 = result + 120;
    v12 = *(unsigned int *)(result + 8);
    v13 = a6 - 4;
    v14 = a6;
    for (result = sub_10030E52C(result + 120, a2, a3, a6); ; result = sub_10030E52C(v35, v9, v8, a6))
    {
      if ((int)result <= (int)v13)
      {
        v15 = *v10;
        v16 = *v9;
        result = (int)result;
        do
        {
          v19 = (float *)(v16 + 4 * result);
          v20 = v11 + (float)(v15 * *v19);
          v21 = v11 + (float)(v15 * v19[1]);
          v22 = v11 + (float)(v15 * v19[2]);
          v23 = v11 + (float)(v15 * v19[3]);
          if ((int)v12 >= 2)
          {
            for (i = 1; i != v12; ++i)
            {
              v25 = (float *)(v9[i] + 4 * result);
              v26 = v10[i];
              v20 = v20 + (float)(v26 * *v25);
              v21 = v21 + (float)(v26 * v25[1]);
              v22 = v22 + (float)(v26 * v25[2]);
              v23 = v23 + (float)(v26 * v25[3]);
            }
          }
          v17 = (uint64_t)rintf(v21);
          v18.i32[0] = (uint64_t)rintf(v20);
          v18.i32[1] = v17;
          v18.i64[1] = __PAIR64__((uint64_t)rintf(v23), (uint64_t)rintf(v22));
          *(int16x4_t *)((char *)v8 + 2 * result) = vqmovn_s32(v18);
          result += 4;
        }
        while (result <= v13);
      }
      if ((int)result < a6)
      {
        v27 = *v10;
        v28 = *v9;
        v29 = (int)result;
        if ((int)v12 <= 1)
        {
          do
          {
            v33 = (uint64_t)rintf(v11 + (float)(v27 * *(float *)(v28 + 4 * v29)));
            if ((int)v33 <= -32768)
              LODWORD(v33) = -32768;
            if ((int)v33 >= 0x7FFF)
              LOWORD(v33) = 0x7FFF;
            v8->i16[v29++] = v33;
          }
          while (v14 != v29);
        }
        else
        {
          do
          {
            v30 = v11 + (float)(v27 * *(float *)(v28 + 4 * v29));
            for (j = 1; j != v12; ++j)
              v30 = v30 + (float)(v10[j] * *(float *)(v9[j] + 4 * v29));
            v32 = (uint64_t)rintf(v30);
            if ((int)v32 <= -32768)
              LODWORD(v32) = -32768;
            if ((int)v32 >= 0x7FFF)
              LOWORD(v32) = 0x7FFF;
            v8->i16[v29++] = v32;
          }
          while (v29 != v14);
        }
      }
      v8 = (int16x4_t *)((char *)v8 + v34);
      ++v9;
      if (!--v7)
        break;
    }
  }
  return result;
}

unint64_t sub_10030E52C(uint64_t a1, _QWORD *a2, int16x4_t *a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const float *v8;
  const float *v9;
  float32x4_t v10;
  unint64_t v11;
  unint64_t result;
  const float *v13;
  float32x4_t v14;
  uint64_t v15;
  int16x4_t *v16;
  float32x4_t *v17;
  float32x4_t *v18;
  int16x4_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t *v30;
  const float *v31;
  uint64_t *v32;
  uint64_t v33;
  float32x4_t *v34;
  uint64_t v35;
  float32x4_t v36;
  int16x4_t *v37;
  const float *v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  int16x4_t *v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t *v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t *v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t *v57;
  float32x4_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61;
  uint64_t *v62;
  const float *v63;
  uint64_t *v64;
  uint64_t v65;
  float32x4_t *v66;
  uint64_t v67;
  float32x4_t v68;
  int16x4_t *v69;

  if (!*(_BYTE *)(a1 + 104))
    return 0;
  v4 = *(_DWORD *)(a1 + 16) + *(_DWORD *)(a1 + 20);
  v5 = v4 - 1;
  if (v4 - 1 >= 0)
    --v4;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (uint64_t)v4 >> 1;
  v8 = (const float *)(v6 + 4 * (v4 >> 1));
  v9 = (const float *)(a1 + 4);
  v10 = vld1q_dup_f32(v9);
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    if (v5 == 1)
    {
      return 0;
    }
    else
    {
      v20 = (a4 - 8);
      if (a4 >= 8)
      {
        v39 = vld1q_dup_f32(v8);
        v38 = v8 + 1;
        v40 = vld1q_dup_f32(v38);
        if (v5 >= 4)
        {
          result = 0;
          if ((int)v7 <= 2)
            v50 = 2;
          else
            v50 = v7;
          v51 = v6 + 4 * v7 + 8;
          v52 = v50 - 1;
          do
          {
            v53 = 4 * result;
            v54 = (float32x4_t *)(*a2 + 4 * result);
            v55 = *v54;
            v56 = v54[1];
            v57 = (float32x4_t *)(a2[1] + 4 * result);
            v58 = (float32x4_t *)(*(a2 - 1) + 4 * result);
            v59 = vmlaq_f32(vmlaq_f32(v10, v39, v55), v40, vaddq_f32(*v57, *v58));
            v60 = vmlaq_f32(vmlaq_f32(v10, v39, v56), v40, vaddq_f32(v57[1], v58[1]));
            v61 = v52;
            v62 = a2 + 2;
            v63 = (const float *)v51;
            v64 = a2 - 2;
            do
            {
              v65 = *v62++;
              v66 = (float32x4_t *)(v65 + v53);
              v67 = *v64--;
              v68 = vld1q_dup_f32(v63++);
              v59 = vmlaq_f32(v59, v68, vaddq_f32(*v66, *(float32x4_t *)(v67 + 4 * result)));
              v60 = vmlaq_f32(v60, v68, vaddq_f32(v66[1], *(float32x4_t *)(v67 + v53 + 16)));
              --v61;
            }
            while (v61);
            v69 = &a3[result / 4];
            *v69 = vqmovn_s32(vcvtq_s32_f32(v59));
            v69[1] = vqmovn_s32(vcvtq_s32_f32(v60));
            result += 8;
          }
          while (result <= v20);
        }
        else
        {
          v41 = 0;
          result = 0;
          v42 = a3 + 1;
          do
          {
            v43 = (float32x4_t *)(*a2 + v41);
            v44 = *v43;
            v45 = v43[1];
            v46 = (float32x4_t *)(a2[1] + v41);
            v47 = (float32x4_t *)(*(a2 - 1) + v41);
            v48 = vmlaq_f32(v10, v39, v44);
            v49 = vmlaq_f32(vmlaq_f32(v10, v39, v45), v40, vaddq_f32(v46[1], v47[1]));
            v42[-1] = vqmovn_s32(vcvtq_s32_f32(vmlaq_f32(v48, v40, vaddq_f32(*v46, *v47))));
            *v42 = vqmovn_s32(vcvtq_s32_f32(v49));
            result += 8;
            v41 += 32;
            v42 += 2;
          }
          while (result <= v20);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    v11 = (a4 - 8);
    if (a4 < 8)
      return 0;
    v13 = v8 + 1;
    v14 = vld1q_dup_f32(v13);
    if (v5 >= 4)
    {
      result = 0;
      if ((int)v7 <= 2)
        v21 = 2;
      else
        v21 = v7;
      v22 = v6 + 4 * v7 + 8;
      v23 = v21 - 1;
      do
      {
        v24 = 4 * result;
        v25 = (float32x4_t *)(a2[1] + 4 * result);
        v26 = (float32x4_t *)(*(a2 - 1) + 4 * result);
        v27 = vmlaq_f32(v10, v14, vsubq_f32(*v25, *v26));
        v28 = vmlaq_f32(v10, v14, vsubq_f32(v25[1], v26[1]));
        v29 = v23;
        v30 = a2 + 2;
        v31 = (const float *)v22;
        v32 = a2 - 2;
        do
        {
          v33 = *v30++;
          v34 = (float32x4_t *)(v33 + v24);
          v35 = *v32--;
          v36 = vld1q_dup_f32(v31++);
          v27 = vmlaq_f32(v27, v36, vsubq_f32(*v34, *(float32x4_t *)(v35 + 4 * result)));
          v28 = vmlaq_f32(v28, v36, vsubq_f32(v34[1], *(float32x4_t *)(v35 + v24 + 16)));
          --v29;
        }
        while (v29);
        v37 = &a3[result / 4];
        *v37 = vqmovn_s32(vcvtq_s32_f32(v27));
        v37[1] = vqmovn_s32(vcvtq_s32_f32(v28));
        result += 8;
      }
      while (result <= v11);
    }
    else
    {
      v15 = 0;
      result = 0;
      v16 = a3 + 1;
      do
      {
        v17 = (float32x4_t *)(a2[1] + v15);
        v18 = (float32x4_t *)(*(a2 - 1) + v15);
        v19 = vqmovn_s32(vcvtq_s32_f32(vmlaq_f32(v10, v14, vsubq_f32(v17[1], v18[1]))));
        v16[-1] = vqmovn_s32(vcvtq_s32_f32(vmlaq_f32(v10, v14, vsubq_f32(*v17, *v18))));
        *v16 = v19;
        result += 8;
        v15 += 32;
        v16 += 2;
      }
      while (result <= v11);
    }
  }
  return result;
}

void sub_10030E834()
{
  operator delete();
}

uint64_t sub_10030E848(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10030E884(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7;
  uint64_t v9[2];

  v7 = sub_100300664(a1, a2, a3, a5);
  *(_QWORD *)v7 = off_1004532C8;
  *(_DWORD *)(v7 + 128) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_10029430C(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10030E928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_100300DB8(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10030E950(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004529E8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_10030E9F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_1004529E8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

uint64_t sub_10030EAA0(uint64_t result, uint64_t a2, _WORD *a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  double **v12;
  int v13;
  uint64_t v14;
  signed int v15;
  uint64_t v16;
  unsigned int v17;
  int16x8_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  uint64_t v29;
  double *v30;
  double v31;
  uint64_t v32;
  int32x4_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int16x8_t *v43;
  int v44;
  uint64_t v45;
  double v46;
  _WORD *v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  _WORD *v55;
  unint64_t v56;
  int v57;
  double *v58;
  _WORD *v59;
  uint64_t v60;
  uint64_t v61;
  int32x4_t v62;
  unint64_t v63;
  _WORD *v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t *v71;
  double *v72;
  uint64_t v73;
  double *v74;
  double v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  double *v85;
  double v86;
  uint64_t v87;
  double *v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0)
    v7 = *(_DWORD *)(result + 8);
  else
    v7 = v6 + 1;
  v8 = (uint64_t)v7 >> 1;
  v9 = 8 * (v7 >> 1);
  v10 = (double *)(*(_QWORD *)(result + 32) + v9);
  v11 = *(double *)(result + 120);
  v12 = (double **)(a2 + v9);
  if ((*(_BYTE *)(result + 128) & 1) != 0)
  {
    if (a5)
    {
      v44 = a5 - 1;
      v45 = a4;
      if (a6 > 3)
      {
        v52 = a2 + 8 * v8 - 8;
        v53 = *v10;
        v54 = 8 * (v8 + 1);
        v55 = a3 + 4;
        result = 0x7FFFLL;
        do
        {
          v56 = 0;
          v57 = v44;
          v58 = *v12;
          v59 = v55;
          v60 = 4;
          do
          {
            v63 = v60;
            v64 = v59;
            v65 = &v58[v56];
            v66 = v11 + v53 * *v65;
            v67 = v11 + v53 * v65[1];
            v68 = v11 + v53 * v65[2];
            v69 = v11 + v53 * v65[3];
            if (v6 >= 2)
            {
              v70 = 8;
              v71 = (uint64_t *)v52;
              do
              {
                v72 = &v12[(unint64_t)v70 / 8][v56];
                v73 = *v71--;
                v74 = (double *)(v73 + 8 * v56);
                v75 = v10[(unint64_t)v70 / 8];
                v66 = v66 + v75 * (*v72 + *v74);
                v67 = v67 + v75 * (v72[1] + v74[1]);
                v68 = v68 + v75 * (v72[2] + v74[2]);
                v69 = v69 + v75 * (v72[3] + v74[3]);
                v70 += 8;
              }
              while (v54 != v70);
            }
            v61 = (uint64_t)rint(v67);
            v62.i32[0] = (uint64_t)rint(v66);
            v62.i32[1] = v61;
            v62.i64[1] = __PAIR64__((uint64_t)rint(v69), (uint64_t)rint(v68));
            *(int16x4_t *)&a3[v56] = vqmovn_s32(v62);
            v56 += 4;
            v60 = v63 + 4;
            v59 = v64 + 4;
          }
          while (v56 <= (a6 - 4));
          if ((int)v56 < a6)
          {
            if (v6 >= 2)
            {
              do
              {
                v77 = v11 + v53 * v58[v63];
                v78 = 8;
                v79 = (uint64_t *)v52;
                do
                {
                  v80 = *v79--;
                  v77 = v77
                      + v10[(unint64_t)v78 / 8]
                      * (v12[(unint64_t)v78 / 8][v63] + *(double *)(v80 + 8 * v63));
                  v78 += 8;
                }
                while (v54 != v78);
                v81 = (uint64_t)rint(v77);
                if ((int)v81 <= -32768)
                  LODWORD(v81) = -32768;
                if ((int)v81 >= 0x7FFF)
                  LOWORD(v81) = 0x7FFF;
                a3[v63++] = v81;
              }
              while (v63 < a6);
            }
            else
            {
              do
              {
                v76 = (uint64_t)rint(v11 + v53 * v58[v63]);
                if ((int)v76 <= -32768)
                  LODWORD(v76) = -32768;
                if ((int)v76 >= 0x7FFF)
                  LOWORD(v76) = 0x7FFF;
                *v64++ = v76;
                ++v63;
              }
              while (v63 < a6);
            }
          }
          a3 = (_WORD *)((char *)a3 + v45);
          ++v12;
          v44 = v57 - 1;
          v52 += 8;
          v55 = (_WORD *)((char *)v55 + v45);
        }
        while (v57);
      }
      else if (a6 >= 1)
      {
        v46 = *v10;
        if (v6 >= 2)
        {
          v82 = a2 + 8 * v8 - 8;
          v83 = 8 * (v8 + 1);
          do
          {
            v84 = v44;
            v85 = *v12;
            v86 = v11 + v46 * **v12;
            v87 = 8;
            result = v82;
            do
            {
              v88 = *(double **)result;
              result -= 8;
              v86 = v86 + v10[(unint64_t)v87 / 8] * (*v12[(unint64_t)v87 / 8] + *v88);
              v87 += 8;
            }
            while (v83 != v87);
            v89 = (uint64_t)rint(v86);
            if ((int)v89 <= -32768)
              LODWORD(v89) = -32768;
            if ((int)v89 >= 0x7FFF)
              LOWORD(v89) = 0x7FFF;
            *a3 = v89;
            if (a6 != 1)
            {
              v90 = v11 + v46 * v85[1];
              v91 = 0x1FFFFFFFFFFFFFFFLL;
              result = 8;
              do
              {
                v90 = v90 + *(double *)((char *)v10 + result) * ((*(double **)((char *)v12 + result))[1] + v12[v91][1]);
                result += 8;
                --v91;
              }
              while (v83 != result);
              v92 = (uint64_t)rint(v90);
              if ((int)v92 <= -32768)
                LODWORD(v92) = -32768;
              if ((int)v92 >= 0x7FFF)
                LOWORD(v92) = 0x7FFF;
              a3[1] = v92;
              if (a6 != 2)
              {
                v93 = v11 + v46 * v85[2];
                v94 = 0x1FFFFFFFFFFFFFFFLL;
                v95 = 8;
                do
                {
                  result = (uint64_t)v12[v94];
                  v93 = v93
                      + v10[(unint64_t)v95 / 8] * (v12[(unint64_t)v95 / 8][2] + *(double *)(result + 16));
                  v95 += 8;
                  --v94;
                }
                while (v83 != v95);
                v96 = (uint64_t)rint(v93);
                if ((int)v96 <= -32768)
                  LODWORD(v96) = -32768;
                if ((int)v96 >= 0x7FFF)
                  LOWORD(v96) = 0x7FFF;
                a3[2] = v96;
              }
            }
            a3 = (_WORD *)((char *)a3 + a4);
            ++v12;
            --v44;
            v82 += 8;
          }
          while (v84);
        }
        else
        {
          v47 = a3 + 2;
          do
          {
            v48 = *v12;
            v49 = (uint64_t)rint(v11 + v46 * **v12);
            if ((int)v49 <= -32768)
              LODWORD(v49) = -32768;
            if ((int)v49 >= 0x7FFF)
              LOWORD(v49) = 0x7FFF;
            *(v47 - 2) = v49;
            if (a6 != 1)
            {
              v50 = (uint64_t)rint(v11 + v46 * v48[1]);
              if ((int)v50 <= -32768)
                LODWORD(v50) = -32768;
              if ((int)v50 >= 0x7FFF)
                LOWORD(v50) = 0x7FFF;
              *(v47 - 1) = v50;
              if (a6 != 2)
              {
                v51 = (uint64_t)rint(v11 + v46 * v48[2]);
                if ((int)v51 <= -32768)
                  LODWORD(v51) = -32768;
                if ((int)v51 >= 0x7FFF)
                  LOWORD(v51) = 0x7FFF;
                *v47 = v51;
              }
            }
            ++v12;
            v47 = (_WORD *)((char *)v47 + a4);
            --a5;
          }
          while (a5);
        }
      }
    }
  }
  else if (a5)
  {
    v13 = a6 - 4;
    v14 = (uint64_t)rint(v11);
    if ((int)v14 <= -32768)
      v15 = -32768;
    else
      v15 = v14;
    if (v15 >= 0x7FFF)
      v15 = 0x7FFF;
    v16 = a4;
    v17 = v8 + 1;
    v18 = vdupq_n_s16(v15);
    v19 = a2 + 8 * v8 - 8;
    result = 8 * v17;
    do
    {
      if (a6 >= 4)
      {
        if (v6 >= 2)
        {
          v20 = 0;
          do
          {
            v22 = 8;
            v23 = (uint64_t *)v19;
            v24 = v11;
            v25 = v11;
            v26 = v11;
            v27 = v11;
            do
            {
              v28 = &v12[(unint64_t)v22 / 8][v20];
              v29 = *v23--;
              v30 = (double *)(v29 + 8 * v20);
              v31 = v10[(unint64_t)v22 / 8];
              v27 = v27 + v31 * (*v28 - *v30);
              v26 = v26 + v31 * (v28[1] - v30[1]);
              v25 = v25 + v31 * (v28[2] - v30[2]);
              v24 = v24 + v31 * (v28[3] - v30[3]);
              v22 += 8;
            }
            while (result != v22);
            v32 = (uint64_t)rint(v24);
            v33.i32[0] = (uint64_t)rint(v27);
            v33.i32[1] = (uint64_t)rint(v26);
            v33.i32[2] = (uint64_t)rint(v25);
            v33.i32[3] = v32;
            *(int16x4_t *)&a3[v20] = vqmovn_s32(v33);
            v20 += 4;
          }
          while (v20 <= v13);
        }
        else
        {
          v20 = 0;
          v21 = a3;
          do
          {
            *v21++ = v18.i64[0];
            v20 += 4;
          }
          while (v20 <= v13);
        }
        v20 = v20;
        if ((int)v20 >= a6)
          goto LABEL_12;
      }
      else
      {
        v20 = 0;
        if (a6 <= 0)
          goto LABEL_12;
      }
      if (v6 >= 2)
      {
        do
        {
          v36 = 8;
          v37 = (uint64_t *)v19;
          v38 = v11;
          do
          {
            v39 = *v37--;
            v38 = v38
                + v10[(unint64_t)v36 / 8] * (v12[(unint64_t)v36 / 8][v20] - *(double *)(v39 + 8 * v20));
            v36 += 8;
          }
          while (result != v36);
          v40 = (uint64_t)rint(v38);
          if ((int)v40 <= -32768)
            LODWORD(v40) = -32768;
          if ((int)v40 >= 0x7FFF)
            LOWORD(v40) = 0x7FFF;
          a3[v20++] = v40;
        }
        while (v20 != a6);
        goto LABEL_12;
      }
      v34 = a6 - v20;
      if (v34 >= 0x10)
      {
        v35 = (v34 & 0xFFFFFFFFFFFFFFF0) + v20;
        v41 = v20;
        v42 = v34 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v43 = (int16x8_t *)&a3[v41];
          *v43 = v18;
          v43[1] = v18;
          v41 += 16;
          v42 -= 16;
        }
        while (v42);
        if (v34 == (v34 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_12;
      }
      else
      {
        v35 = v20;
      }
      do
        a3[v35++] = v15;
      while (a6 != v35);
LABEL_12:
      a3 = (_WORD *)((char *)a3 + v16);
      ++v12;
      v19 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_10030F110()
{
  operator delete();
}

uint64_t sub_10030F124(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10030F160(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7;
  uint64_t v9[2];

  v7 = sub_100300EAC(a1, a2, a3, a5);
  *(_QWORD *)v7 = off_100453350;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_10029430C(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10030F204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_10030174C(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10030F22C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452A70;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_10030F2CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452A70;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

unint64_t sub_10030F37C(unint64_t result, uint64_t a2, float *a3, int a4, int a5, int a6, double a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  int32x4_t *v28;
  float *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int32x4_t *v38;
  int v39;
  uint64_t v40;
  float *v41;
  float *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  float32x4_t v51;
  unint64_t v52;
  float *v53;
  int v54;
  uint64_t v55;
  float *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  float *v60;
  BOOL v61;
  char v62;
  uint64_t v64;
  unint64_t v65;
  const float *v66;
  float *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float *v71;
  float v72;
  float v73;
  float v74;
  float *v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  float *v79;
  float *v80;
  unint64_t v81;
  BOOL v83;
  float32x4_t v85;
  uint64_t v86;
  unint64_t v87;
  float32x4_t v88;
  float32x4_t *v89;
  uint64_t v90;
  float32x4_t v91;
  uint64_t v92;
  int v93;
  float *v94;
  uint64_t v95;
  unint64_t v96;
  float32x4_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  float *v107;
  float v108;
  float **v109;
  uint64_t v110;
  float *v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  float32x4x4_t v118;
  float32x4x4_t v119;

  v7 = *(_DWORD *)(result + 8);
  if (v7 >= 0)
    v8 = *(_DWORD *)(result + 8);
  else
    v8 = v7 + 1;
  v9 = v8 >> 1;
  v10 = *(_QWORD *)(result + 32);
  v11 = (uint64_t)v8 >> 1;
  v12 = (float *)(v10 + 4 * (v8 >> 1));
  LODWORD(a7) = *(_DWORD *)(result + 116);
  v13 = (float **)(a2 + 8 * v9);
  if ((*(_BYTE *)(result + 120) & 1) != 0)
  {
    if (!a5)
      return result;
    v39 = a5 - 1;
    v40 = a4;
    if (a6 <= 3)
    {
      if (a6 >= 1)
      {
        if (v7 >= 2)
        {
          v104 = (v11 + 1);
          v105 = a2 + 8 * v11 - 8;
          do
          {
            v106 = v39;
            v107 = *v13;
            v108 = *(float *)&a7 + (float)(*v12 * **v13);
            v109 = (float **)v105;
            v110 = 1;
            do
            {
              v111 = *v109--;
              result = (unint64_t)v111;
              v108 = v108 + (float)(v12[v110] * (float)(*v13[v110] + *v111));
              ++v110;
            }
            while (v104 != v110);
            *a3 = v108;
            if (a6 != 1)
            {
              v112 = *(float *)&a7 + (float)(*v12 * v107[1]);
              v113 = 0x1FFFFFFFFFFFFFFFLL;
              v114 = 1;
              do
              {
                v112 = v112 + (float)(v12[v114] * (float)(v13[v114][1] + v13[v113][1]));
                ++v114;
                --v113;
              }
              while (v104 != v114);
              a3[1] = v112;
              if (a6 != 2)
              {
                v115 = *(float *)&a7 + (float)(*v12 * v107[2]);
                v116 = 0x1FFFFFFFFFFFFFFFLL;
                v117 = 1;
                do
                {
                  v115 = v115 + (float)(v12[v117] * (float)(v13[v117][2] + v13[v116][2]));
                  ++v117;
                  --v116;
                }
                while (v104 != v117);
                a3[2] = v115;
              }
            }
            a3 = (float *)((char *)a3 + a4);
            ++v13;
            --v39;
            v105 += 8;
          }
          while (v106);
        }
        else
        {
          v41 = a3 + 2;
          do
          {
            v42 = *v13;
            *(v41 - 2) = *(float *)&a7 + (float)(*v12 * **v13);
            if (a6 != 1)
            {
              *(v41 - 1) = *(float *)&a7 + (float)(*v12 * v42[1]);
              if (a6 != 2)
                *v41 = *(float *)&a7 + (float)(*v12 * v42[2]);
            }
            ++v13;
            v41 = (float *)((char *)v41 + a4);
            --a5;
          }
          while (a5);
        }
      }
      return result;
    }
    v43 = (a6 - 4);
    if (v7 >= 2)
    {
      v90 = (v11 + 1);
      v91 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      v92 = a2 + 8 * v11 - 8;
      do
      {
        result = 0;
        v93 = v39;
        v94 = *v13;
        v95 = 4;
        do
        {
          v96 = v95;
          v97 = vmlaq_n_f32(v91, *(float32x4_t *)&v94[result], *v12);
          v98 = (uint64_t *)v92;
          v99 = 1;
          do
          {
            v100 = *v98--;
            v97 = vmlaq_n_f32(v97, vaddq_f32(*(float32x4_t *)&v13[v99][result], *(float32x4_t *)(v100 + 4 * result)), v12[v99]);
            ++v99;
          }
          while (v90 != v99);
          *(float32x4_t *)&a3[result] = v97;
          result += 4;
          v95 += 4;
        }
        while (result <= v43);
        if ((int)result < a6)
        {
          do
          {
            v101 = *(float *)&a7 + (float)(*v12 * v94[v96]);
            result = v92;
            v102 = 1;
            do
            {
              v103 = *(_QWORD *)result;
              result -= 8;
              v101 = v101 + (float)(v12[v102] * (float)(v13[v102][v96] + *(float *)(v103 + 4 * v96)));
              ++v102;
            }
            while (v90 != v102);
            a3[v96++] = v101;
          }
          while (v96 < a6);
        }
        a3 = (float *)((char *)a3 + v40);
        ++v13;
        --v39;
        v92 += 8;
      }
      while (v93);
      return result;
    }
    v44 = 0;
    if ((unint64_t)(v43 & 0xFFFFFFFC) + 5 <= a6)
      v45 = a6;
    else
      v45 = (v43 & 0xFFFFFFFC) + 5;
    v46 = (4 * (a6 - 4)) & 0x3FFFFFFF0;
    v47 = 4 * v45 - v46;
    v48 = v10 + 4 * v11 + 4;
    v49 = v45 - (v43 & 0xFFFFFFFC) - 4;
    v50 = v46 + 16;
    result = (v43 >> 2) + 1;
    v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    v52 = v49 & 0xFFFFFFFFFFFFFFF8;
    v53 = a3;
    while (1)
    {
      v54 = v39;
      v55 = v44 * a4;
      v56 = *v13;
      if (v43 < 0xC)
        break;
      v57 = 0;
      v60 = (float *)((char *)a3 + v50 + v55);
      v61 = v53 >= (float *)((char *)v56 + v50) || v56 >= v60;
      v62 = !v61;
      v61 = v12 >= v60;
      v59 = 4;
      v58 = 0;
      if (!v61 && (unint64_t)v53 < v48)
        goto LABEL_71;
      if ((v62 & 1) != 0)
        goto LABEL_71;
      v64 = 0;
      v65 = result & 0x7FFFFFFC;
      do
      {
        v66 = &v56[v64];
        v118 = vld4q_f32(v66);
        v119.val[0] = vmlaq_n_f32(v51, v118.val[0], *v12);
        v119.val[1] = vmlaq_n_f32(v51, v118.val[1], *v12);
        v119.val[2] = vmlaq_n_f32(v51, v118.val[2], *v12);
        v119.val[3] = vmlaq_n_f32(v51, v118.val[3], *v12);
        v67 = &v53[v64];
        vst4q_f32(v67, v119);
        v64 += 16;
        v65 -= 4;
      }
      while (v65);
      v57 = result & 0x7FFFFFFC;
      v59 = (16 * ((v57 >> 2) & 0x1FFFFFFF)) | 4;
      v58 = 4 * v57;
      v68 = v57 - 1;
      v69 = v58;
      if (result != v57)
        goto LABEL_71;
LABEL_73:
      if ((int)v58 < a6)
      {
        if (v49 >= 0x10)
        {
          v77 = 4 * v68;
          v78 = (char *)a3 + v55 + v77 * 4 + 16;
          v79 = (float *)((char *)a3 + v47 + v55 + v77 * 4);
          v80 = &v56[v77];
          v81 = (unint64_t)&v56[v77 + 4];
          v83 = v78 < (char *)v80 + v47 && v81 < (unint64_t)v79;
          if (v12 >= v79 || (unint64_t)v78 >= v48)
          {
            if (v83)
            {
              v76 = v69;
            }
            else
            {
              v76 = v69 + v52;
              v85 = vld1q_dup_f32(v12);
              v86 = v69;
              v87 = v49 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v88 = vmlaq_f32(v51, *(float32x4_t *)&v56[v86 + 4], v85);
                v89 = (float32x4_t *)&v53[v86];
                *v89 = vmlaq_f32(v51, *(float32x4_t *)&v56[v86], v85);
                v89[1] = v88;
                v86 += 8;
                v87 -= 8;
              }
              while (v87);
              if (v49 == v52)
                goto LABEL_53;
            }
          }
          else
          {
            v76 = v69;
          }
        }
        else
        {
          v76 = v69;
        }
        do
        {
          v53[v76] = *(float *)&a7 + (float)(*v12 * v56[v76]);
          ++v76;
        }
        while (v76 < a6);
      }
LABEL_53:
      v53 = (float *)((char *)v53 + a4);
      ++v13;
      v39 = v54 - 1;
      ++v44;
      if (!v54)
        return result;
    }
    v57 = 0;
    v58 = 0;
    v59 = 4;
LABEL_71:
    v68 = v57 - 1;
    v69 = v59 - 4;
    v70 = v58;
    v71 = v56 + 3;
    do
    {
      v72 = *(float *)&a7 + (float)(*v12 * v71[v70 - 2]);
      v73 = *(float *)&a7 + (float)(*v12 * v71[v70 - 1]);
      v74 = *(float *)&a7 + (float)(*v12 * v71[v70]);
      v75 = &v53[v70];
      *v75 = *(float *)&a7 + (float)(*v12 * v56[v70]);
      v75[1] = v72;
      v58 += 4;
      v75[2] = v73;
      v75[3] = v74;
      ++v68;
      v69 += 4;
      v70 += 4;
    }
    while (v58 <= v43);
    goto LABEL_73;
  }
  if (a5)
  {
    v14 = a4;
    v15 = (v11 + 1);
    v16 = a6 - 4;
    v17 = 3;
    if (v16 > 3)
      v17 = a6 - 4;
    v18 = (v17 >> 2) + 1;
    result = 4 * (v18 & 0x3FFFFFF8);
    v19 = vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    v20 = a2 + 8 * v11 - 8;
    v21 = a3 + 16;
    do
    {
      if (a6 < 4)
      {
        v22 = 0;
        if (a6 <= 0)
          goto LABEL_9;
        goto LABEL_27;
      }
      if (v7 >= 2)
      {
        v22 = 0;
        do
        {
          v23 = (uint64_t *)v20;
          v24 = 1;
          v25 = (float32x4_t)v19;
          do
          {
            v26 = *v23--;
            v25 = vmlaq_n_f32(v25, vsubq_f32(*(float32x4_t *)&v13[v24][v22], *(float32x4_t *)(v26 + 4 * v22)), v12[v24]);
            ++v24;
          }
          while (v15 != v24);
          *(float32x4_t *)&a3[v22] = v25;
          v22 += 4;
        }
        while (v22 <= v16);
      }
      else
      {
        if (v17 < 0x1C)
        {
          v22 = 0;
LABEL_24:
          v29 = &a3[v22];
          do
          {
            *v29 = *(float *)&a7;
            v29[1] = *(float *)&a7;
            v29[2] = *(float *)&a7;
            v29[3] = *(float *)&a7;
            v22 += 4;
            v29 += 4;
          }
          while (v22 <= v16);
          goto LABEL_26;
        }
        v27 = v18 & 0x3FFFFFF8;
        v28 = (int32x4_t *)v21;
        do
        {
          v28[-4] = v19;
          v28[-3] = v19;
          v28[-2] = v19;
          v28[-1] = v19;
          *v28 = v19;
          v28[1] = v19;
          v28[2] = v19;
          v28[3] = v19;
          v28 += 8;
          v27 -= 8;
        }
        while (v27);
        v22 = 4 * (v18 & 0x3FFFFFF8);
        if (v18 != (v18 & 0x3FFFFFF8))
          goto LABEL_24;
      }
LABEL_26:
      v22 = v22;
      if ((int)v22 >= a6)
        goto LABEL_9;
LABEL_27:
      if (v7 >= 2)
      {
        do
        {
          v32 = (uint64_t *)v20;
          v33 = 1;
          v34 = *(float *)&a7;
          do
          {
            v35 = *v32--;
            v34 = v34 + (float)(v12[v33] * (float)(v13[v33][v22] - *(float *)(v35 + 4 * v22)));
            ++v33;
          }
          while (v15 != v33);
          a3[v22++] = v34;
        }
        while (v22 != a6);
        goto LABEL_9;
      }
      v30 = a6 - v22;
      if (v30 >= 8)
      {
        v31 = (v30 & 0xFFFFFFFFFFFFFFF8) + v22;
        v36 = v22;
        v37 = v30 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v38 = (int32x4_t *)&a3[v36];
          *v38 = v19;
          v38[1] = v19;
          v36 += 8;
          v37 -= 8;
        }
        while (v37);
        if (v30 == (v30 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_9;
      }
      else
      {
        v31 = v22;
      }
      do
        a3[v31++] = *(float *)&a7;
      while (a6 != v31);
LABEL_9:
      a3 = (float *)((char *)a3 + v14);
      ++v13;
      v20 += 8;
      v21 = (float *)((char *)v21 + v14);
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_10030FAAC()
{
  operator delete();
}

uint64_t sub_10030FAC0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10030FAFC(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7;
  uint64_t v9[2];

  v7 = sub_100301840(a1, a2, a3, a5);
  *(_QWORD *)v7 = off_1004533D8;
  *(_DWORD *)(v7 + 128) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_10029430C(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_100294B74(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10030FBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C(&a9);
  sub_10030211C(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10030FBC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452AF8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  return a1;
}

void sub_10030FC68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_100452AF8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = a1 + 16;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96))
    j__free(v9);
  operator delete();
}

unint64_t sub_10030FD18(unint64_t result, uint64_t a2, double *a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double v12;
  double **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t *v26;
  uint64_t v27;
  float64x2_t *v28;
  double v29;
  uint64_t v30;
  int64x2_t *v31;
  double *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64x2_t *v41;
  int v42;
  uint64_t v43;
  double *v44;
  double *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  float64x2_t v54;
  uint64_t v55;
  double *v56;
  int v57;
  uint64_t v58;
  double *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  double *v63;
  BOOL v64;
  char v65;
  uint64_t v67;
  unint64_t v68;
  const double *v69;
  double *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  double *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  double *v82;
  double *v83;
  unint64_t v84;
  BOOL v86;
  float64x2_t v88;
  uint64_t v89;
  unint64_t v90;
  float64x2_t v91;
  float64x2_t *v92;
  float64x2_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  double *v97;
  uint64_t v98;
  unint64_t v99;
  float64x2_t *v100;
  float64x2_t v101;
  float64x2_t v102;
  uint64_t v103;
  uint64_t *v104;
  float64x2_t *v105;
  uint64_t v106;
  float64x2_t *v107;
  double v108;
  double v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  double *v115;
  double v116;
  uint64_t v117;
  double **v118;
  double *v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  uint64_t v124;
  uint64_t v125;
  float64x2x4_t v126;
  float64x2x4_t v127;

  v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0)
    v7 = *(_DWORD *)(result + 8);
  else
    v7 = v6 + 1;
  v8 = *(_QWORD *)(result + 32);
  v9 = (uint64_t)v7 >> 1;
  v10 = 8 * (v7 >> 1);
  v11 = (double *)(v8 + v10);
  v12 = *(double *)(result + 120);
  v13 = (double **)(a2 + v10);
  if ((*(_BYTE *)(result + 128) & 1) != 0)
  {
    if (!a5)
      return result;
    v42 = a5 - 1;
    v43 = a4;
    if (a6 <= 3)
    {
      if (a6 >= 1)
      {
        if (v6 >= 2)
        {
          v112 = a2 + 8 * v9 - 8;
          v113 = 8 * (v9 + 1);
          do
          {
            v114 = v42;
            v115 = *v13;
            v116 = v12 + *v11 * **v13;
            v117 = 8;
            v118 = (double **)v112;
            do
            {
              v119 = *v118--;
              result = (unint64_t)v119;
              v116 = v116 + v11[(unint64_t)v117 / 8] * (*v13[(unint64_t)v117 / 8] + *v119);
              v117 += 8;
            }
            while (v113 != v117);
            *a3 = v116;
            if (a6 != 1)
            {
              v120 = v12 + *v11 * v115[1];
              v121 = 0x1FFFFFFFFFFFFFFFLL;
              v122 = 8;
              do
              {
                v120 = v120 + v11[(unint64_t)v122 / 8] * (v13[(unint64_t)v122 / 8][1] + v13[v121][1]);
                v122 += 8;
                --v121;
              }
              while (v113 != v122);
              a3[1] = v120;
              if (a6 != 2)
              {
                v123 = v12 + *v11 * v115[2];
                v124 = 0x1FFFFFFFFFFFFFFFLL;
                v125 = 8;
                do
                {
                  v123 = v123 + v11[(unint64_t)v125 / 8] * (v13[(unint64_t)v125 / 8][2] + v13[v124][2]);
                  v125 += 8;
                  --v124;
                }
                while (v113 != v125);
                a3[2] = v123;
              }
            }
            a3 = (double *)((char *)a3 + a4);
            ++v13;
            --v42;
            v112 += 8;
          }
          while (v114);
        }
        else
        {
          v44 = a3 + 2;
          do
          {
            v45 = *v13;
            *(v44 - 2) = v12 + *v11 * **v13;
            if (a6 != 1)
            {
              *(v44 - 1) = v12 + *v11 * v45[1];
              if (a6 != 2)
                *v44 = v12 + *v11 * v45[2];
            }
            ++v13;
            v44 = (double *)((char *)v44 + a4);
            --a5;
          }
          while (a5);
        }
      }
      return result;
    }
    v46 = (a6 - 4);
    if (v6 >= 2)
    {
      v93 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v12, 0);
      v94 = a2 + 8 * v9 - 8;
      v95 = 8 * (v9 + 1);
      do
      {
        result = 0;
        v96 = v42;
        v97 = *v13;
        v98 = 4;
        do
        {
          v99 = v98;
          v100 = (float64x2_t *)&v97[result];
          v101 = vmlaq_n_f64(v93, *v100, *v11);
          v102 = vmlaq_n_f64(v93, v100[1], *v11);
          v103 = 8;
          v104 = (uint64_t *)v94;
          do
          {
            v105 = (float64x2_t *)&v13[(unint64_t)v103 / 8][result];
            v106 = *v104--;
            v107 = (float64x2_t *)(v106 + 8 * result);
            v108 = v11[(unint64_t)v103 / 8];
            v101 = vmlaq_n_f64(v101, vaddq_f64(*v105, *v107), v108);
            v102 = vmlaq_n_f64(v102, vaddq_f64(v105[1], v107[1]), v108);
            v103 += 8;
          }
          while (v95 != v103);
          *(float64x2_t *)&a3[result] = v101;
          *(float64x2_t *)((char *)a3 + ((8 * result) | 0x10)) = v102;
          result += 4;
          v98 = v99 + 4;
        }
        while (result <= v46);
        if ((int)result < a6)
        {
          do
          {
            v109 = v12 + *v11 * v97[v99];
            result = 8;
            v110 = (uint64_t *)v94;
            do
            {
              v111 = *v110--;
              v109 = v109
                   + *(double *)((char *)v11 + result)
                   * ((*(double **)((char *)v13 + result))[v99] + *(double *)(v111 + 8 * v99));
              result += 8;
            }
            while (v95 != result);
            a3[v99++] = v109;
          }
          while (v99 < a6);
        }
        a3 = (double *)((char *)a3 + v43);
        ++v13;
        --v42;
        v94 += 8;
      }
      while (v96);
      return result;
    }
    v47 = 0;
    if ((unint64_t)(v46 & 0xFFFFFFFC) + 5 <= a6)
      v48 = a6;
    else
      v48 = (v46 & 0xFFFFFFFC) + 5;
    v49 = (8 * (a6 - 4)) & 0x7FFFFFFE0;
    v50 = 8 * v48 - v49;
    v51 = v8 + 8 * v9 + 8;
    v52 = v48 - (v46 & 0xFFFFFFFC) - 4;
    v53 = v49 + 32;
    result = (v46 >> 2) + 1;
    v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v12, 0);
    v55 = v48 & 3;
    v56 = a3;
    while (1)
    {
      v57 = v42;
      v58 = v47 * a4;
      v59 = *v13;
      if (v46 < 0xC)
        break;
      v60 = 0;
      v63 = (double *)((char *)a3 + v53 + v58);
      v64 = v56 >= (double *)((char *)v59 + v53) || v59 >= v63;
      v65 = !v64;
      v64 = v11 >= v63;
      v62 = 4;
      v61 = 0;
      if (!v64 && (unint64_t)v56 < v51)
        goto LABEL_71;
      if ((v65 & 1) != 0)
        goto LABEL_71;
      v67 = 0;
      v68 = result & 0x7FFFFFFE;
      do
      {
        v69 = &v59[v67];
        v126 = vld4q_f64(v69);
        v127.val[0] = vmlaq_n_f64(v54, v126.val[0], *v11);
        v127.val[1] = vmlaq_n_f64(v54, v126.val[1], *v11);
        v127.val[2] = vmlaq_n_f64(v54, v126.val[2], *v11);
        v127.val[3] = vmlaq_n_f64(v54, v126.val[3], *v11);
        v70 = &v56[v67];
        vst4q_f64(v70, v127);
        v67 += 8;
        v68 -= 2;
      }
      while (v68);
      v60 = result & 0x7FFFFFFE;
      v62 = (4 * result) | 4;
      v61 = 4 * v60;
      v71 = v60 - 1;
      v72 = v61;
      if (result != v60)
        goto LABEL_71;
LABEL_73:
      if ((int)v61 < a6)
      {
        if (v52 >= 0xE)
        {
          v80 = 4 * v71;
          v81 = (char *)a3 + v58 + v80 * 8 + 32;
          v82 = (double *)((char *)a3 + v50 + v58 + v80 * 8);
          v83 = &v59[v80];
          v84 = (unint64_t)&v59[v80 + 4];
          v86 = v81 < (char *)v83 + v50 && v84 < (unint64_t)v82;
          if (v11 >= v82 || (unint64_t)v81 >= v51)
          {
            if (v86)
            {
              v79 = v72;
            }
            else
            {
              v79 = v72 + v52 - v55;
              v88 = vld1q_dup_f64(v11);
              v89 = v72;
              v90 = v52 - v55;
              do
              {
                v91 = vmlaq_f64(v54, *(float64x2_t *)&v59[v89 + 2], v88);
                v92 = (float64x2_t *)&v56[v89];
                *v92 = vmlaq_f64(v54, *(float64x2_t *)&v59[v89], v88);
                v92[1] = v91;
                v89 += 4;
                v90 -= 4;
              }
              while (v90);
              if (!v55)
                goto LABEL_53;
            }
          }
          else
          {
            v79 = v72;
          }
        }
        else
        {
          v79 = v72;
        }
        do
        {
          v56[v79] = v12 + *v11 * v59[v79];
          ++v79;
        }
        while (v79 < a6);
      }
LABEL_53:
      v56 = (double *)((char *)v56 + a4);
      ++v13;
      v42 = v57 - 1;
      ++v47;
      if (!v57)
        return result;
    }
    v60 = 0;
    v61 = 0;
    v62 = 4;
LABEL_71:
    v71 = v60 - 1;
    v72 = v62 - 4;
    v73 = v61;
    v74 = v59 + 3;
    do
    {
      v75 = v12 + *v11 * v74[v73 - 2];
      v76 = v12 + *v11 * v74[v73 - 1];
      v77 = v12 + *v11 * v74[v73];
      v78 = &v56[v73];
      *v78 = v12 + *v11 * v59[v73];
      v78[1] = v75;
      v61 += 4;
      v78[2] = v76;
      v78[3] = v77;
      ++v71;
      v72 += 4;
      v73 += 4;
    }
    while (v61 <= v46);
    goto LABEL_73;
  }
  if (a5)
  {
    v14 = a4;
    v15 = a6 - 4;
    v16 = 3;
    if (v15 > 3)
      v16 = a6 - 4;
    v17 = (v16 >> 2) + 1;
    v18 = vdupq_lane_s64(*(uint64_t *)&v12, 0);
    result = a2 + 8 * v9 - 8;
    v19 = 8 * (v9 + 1);
    v20 = a3 + 8;
    do
    {
      if (a6 < 4)
      {
        v21 = 0;
        if (a6 <= 0)
          goto LABEL_9;
        goto LABEL_27;
      }
      if (v6 >= 2)
      {
        v21 = 0;
        do
        {
          v22 = 8;
          v23 = (uint64_t *)result;
          v24 = (float64x2_t)v18;
          v25 = (float64x2_t)v18;
          do
          {
            v26 = (float64x2_t *)&v13[(unint64_t)v22 / 8][v21];
            v27 = *v23--;
            v28 = (float64x2_t *)(v27 + 8 * v21);
            v29 = v11[(unint64_t)v22 / 8];
            v24 = vmlaq_n_f64(v24, vsubq_f64(*v26, *v28), v29);
            v25 = vmlaq_n_f64(v25, vsubq_f64(v26[1], v28[1]), v29);
            v22 += 8;
          }
          while (v19 != v22);
          *(float64x2_t *)&a3[v21] = v24;
          *(float64x2_t *)((char *)a3 + ((8 * v21) | 0x10)) = v25;
          v21 += 4;
        }
        while (v21 <= v15);
      }
      else
      {
        if (v16 < 0xC)
        {
          v21 = 0;
LABEL_24:
          v32 = &a3[v21];
          do
          {
            *v32 = v12;
            v32[1] = v12;
            v32[2] = v12;
            v32[3] = v12;
            v21 += 4;
            v32 += 4;
          }
          while (v21 <= v15);
          goto LABEL_26;
        }
        v30 = v17 & 0x3FFFFFFC;
        v31 = (int64x2_t *)v20;
        do
        {
          v31[-4] = v18;
          v31[-3] = v18;
          v31[-2] = v18;
          v31[-1] = v18;
          *v31 = v18;
          v31[1] = v18;
          v31[2] = v18;
          v31[3] = v18;
          v31 += 8;
          v30 -= 4;
        }
        while (v30);
        v21 = 4 * (v17 & 0x3FFFFFFC);
        if (v17 != (v17 & 0x3FFFFFFC))
          goto LABEL_24;
      }
LABEL_26:
      v21 = v21;
      if ((int)v21 >= a6)
        goto LABEL_9;
LABEL_27:
      if (v6 >= 2)
      {
        do
        {
          v35 = 8;
          v36 = (uint64_t *)result;
          v37 = v12;
          do
          {
            v38 = *v36--;
            v37 = v37
                + v11[(unint64_t)v35 / 8] * (v13[(unint64_t)v35 / 8][v21] - *(double *)(v38 + 8 * v21));
            v35 += 8;
          }
          while (v19 != v35);
          a3[v21++] = v37;
        }
        while (v21 != a6);
        goto LABEL_9;
      }
      v33 = a6 - v21;
      if (v33 >= 4)
      {
        v34 = (v33 & 0xFFFFFFFFFFFFFFFCLL) + v21;
        v39 = v21;
        v40 = v33 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v41 = (int64x2_t *)&a3[v39];
          *v41 = v18;
          v41[1] = v18;
          v39 += 4;
          v40 -= 4;
        }
        while (v40);
        if (v33 == (v33 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_9;
      }
      else
      {
        v34 = v21;
      }
      do
        a3[v34++] = v12;
      while (a6 != v34);
LABEL_9:
      a3 = (double *)((char *)a3 + v14);
      ++v13;
      result += 8;
      v20 = (double *)((char *)v20 + v14);
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_10031049C()
{
  operator delete();
}

uint64_t sub_1003104B0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_1003104F0()
{
  operator delete();
}

uint64_t sub_100310504(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

double sub_100310540(uint64_t a1, float *a2, int a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  int v14;
  float v15;
  float v16;
  int32x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  int *v22;
  int v23;
  int v24;
  uint64_t v25;
  int *v26;
  double v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x2_t v33;
  BOOL v34;
  char v35;
  uint64_t v36;
  float32x2_t v38;
  float v39;
  float v40;
  BOOL v43;
  double v44;
  BOOL v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  float32x2_t v51;
  double v52;
  float v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  int v61;
  double v62;
  double v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  char *v68;
  uint64_t v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void *v77;
  _QWORD v78[2];
  _BYTE v79[8];
  int v80;

  sub_100298C2C(v79, &off_100453490);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_OWORD *)(v6 + 16);
    v71 = *(_OWORD *)v6;
    v72 = v7;
    v73 = *(_OWORD *)(v6 + 32);
    v8 = *(_QWORD *)(v6 + 56);
    v74 = *(_QWORD *)(v6 + 48);
    v75 = v8;
    v76 = (char *)&v71 + 8;
    v77 = v78;
    v78[0] = 0;
    v78[1] = 0;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    if (*(int *)(v6 + 4) > 2)
    {
      DWORD1(v71) = 0;
      sub_100256B48((uint64_t)&v71, v6);
    }
    else
    {
      v11 = *(_QWORD **)(v6 + 72);
      v12 = v77;
      *(_QWORD *)v77 = *v11;
      v12[1] = v11[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v71);
  }
  v13 = sub_10025C460((unsigned int *)&v71, 2, -1, 1);
  if (v13 < 0 || (v71 & 6) != 4)
  {
    v70[0] = 0;
    v70[1] = 0;
    qmemcpy((void *)sub_10029430C(v70, 40), "total >= 0 && (depth == 4 || depth == 5)", 40);
    sub_100294B74(-215, v70, "pointPolygonTest", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/geometry.cpp", 103);
  }
  if (!v13)
  {
    if (a3)
      v27 = -1.79769313e308;
    else
      v27 = -1.0;
    v31 = v75;
    if (v75)
      goto LABEL_125;
    goto LABEL_129;
  }
  v14 = v71 & 7;
  v15 = *a2;
  v16 = a2[1];
  v17 = (int32x2_t *)v72;
  if (v14 != 5 && !a3)
  {
    v18 = (uint64_t)rintf(v15);
    v19 = (uint64_t)rintf(v16);
    if (v15 == (float)(int)v18 && v16 == (float)(int)v19)
    {
      v21 = 0;
      if (v13 >= 1)
      {
        v22 = (int *)(v72 + 8 * (v13 - 1));
        v23 = *v22;
        v24 = v22[1];
        v25 = v13;
        v26 = (int *)(v72 + 4);
        v27 = 0.0;
        do
        {
          v28 = *(v26 - 1);
          v29 = *v26;
          if ((int)v19 >= v24 != *v26 > (int)v19 || (int)v18 > v23 && v28 < (int)v18)
          {
            if (v29 == (_DWORD)v19
              && (v28 == (_DWORD)v18
               || (_DWORD)v19 == v24 && ((int)v18 >= v23 && v28 >= (int)v18 || v28 <= (int)v18 && (int)v18 <= v23)))
            {
              goto LABEL_124;
            }
          }
          else
          {
            v30 = (v28 - v23) * (uint64_t)((int)v19 - v24) - (v29 - v24) * (uint64_t)((int)v18 - v23);
            if (!v30)
            {
LABEL_137:
              v27 = 0.0;
              v31 = v75;
              if (v75)
                goto LABEL_125;
              goto LABEL_129;
            }
            if (v29 < v24)
              v30 = -v30;
            if (v30 > 0)
              ++v21;
          }
          v26 += 2;
          v24 = v29;
          v23 = v28;
          --v25;
        }
        while (v25);
      }
      v45 = (v21 & 1) == 0;
      goto LABEL_113;
    }
  }
  v32 = v13 - 1;
  if (v14 == 5)
  {
    v33 = *(float32x2_t *)(v72 + 8 * v32);
    v34 = v13 < 1;
    v35 = 0;
    if ((a3 & 1) == 0)
    {
LABEL_47:
      if (!v34)
      {
        v36 = v13;
        v27 = 0.0;
        do
        {
          v38 = v33;
          if (v14 == 5)
          {
            v33 = (float32x2_t)*v17;
            v39 = v38.f32[1];
            LODWORD(v40) = HIDWORD(*(unint64_t *)v17);
            if (v38.f32[1] <= v16 && v40 <= v16)
              goto LABEL_73;
          }
          else
          {
            v33 = vcvt_f32_s32(*v17);
            v39 = v38.f32[1];
            v40 = v33.f32[1];
            if (v38.f32[1] <= v16 && v33.f32[1] <= v16)
              goto LABEL_73;
          }
          v43 = v39 <= v16 || v40 <= v16;
          if (v43 && (v38.f32[0] >= v15 || v33.f32[0] >= v15))
          {
            v44 = (float)(v16 - v39) * vsub_f32(v33, v38).f32[0] - (float)(v15 - v38.f32[0]) * (float)(v40 - v39);
            if (v44 == 0.0)
              goto LABEL_137;
            if (v40 < v39)
              v44 = -v44;
            if (v44 > 0.0)
              ++v35;
            goto LABEL_54;
          }
LABEL_73:
          if (v16 == v40)
          {
            if (v15 == v33.f32[0])
              goto LABEL_124;
            if (v16 == v39)
            {
              if (v38.f32[0] <= v15 && v15 <= v33.f32[0])
                goto LABEL_124;
              if (v33.f32[0] <= v15 && v15 <= v38.f32[0])
                goto LABEL_124;
            }
          }
LABEL_54:
          ++v17;
          --v36;
        }
        while (v36);
      }
      v45 = (v35 & 1) == 0;
LABEL_113:
      if (v45)
        v61 = -1;
      else
        v61 = 1;
      v27 = (double)v61;
      v31 = v75;
      if (v75)
        goto LABEL_125;
      goto LABEL_129;
    }
  }
  else
  {
    v33 = vcvt_f32_s32(*(int32x2_t *)(v72 + 8 * v32));
    v34 = v13 < 1;
    v35 = 0;
    if ((a3 & 1) == 0)
      goto LABEL_47;
  }
  if (v34)
  {
    v62 = 3.40282347e38;
    goto LABEL_121;
  }
  v46 = v13;
  v47 = 1.0;
  v48 = 3.40282347e38;
  while (1)
  {
    v51 = v33;
    if (v14 == 5)
      v33 = (float32x2_t)*v17;
    else
      v33 = vcvt_f32_s32(*v17);
    v52 = vsub_f32(v33, v51).f32[0];
    v53 = v33.f32[1] - v51.f32[1];
    v54 = (float)(v33.f32[1] - v51.f32[1]);
    v55 = (float)(v15 - v51.f32[0]);
    v56 = (float)(v16 - v51.f32[1]);
    if (v56 * v54 + v55 * v52 <= 0.0)
    {
      v59 = v56 * v56 + v55 * v55;
      v60 = 1.0;
      if (v47 * v59 >= v48 * 1.0)
        goto LABEL_105;
      goto LABEL_104;
    }
    v57 = (float)(v15 - v33.f32[0]);
    v58 = (float)(v16 - v33.f32[1]);
    if (v58 * v54 + v57 * v52 < 0.0)
      break;
    v59 = v58 * v58 + v57 * v57;
    v60 = 1.0;
    if (v47 * v59 < v48 * 1.0)
      goto LABEL_104;
LABEL_105:
    if ((v51.f32[1] > v16 || v33.f32[1] > v16)
      && (v51.f32[1] <= v16 || v33.f32[1] <= v16)
      && (v51.f32[0] >= v15 || v33.f32[0] >= v15))
    {
      v49 = v56 * v52 - v55 * v54;
      v50 = -v49;
      if (v53 >= 0.0)
        v50 = v49;
      if (v50 > 0.0)
        ++v35;
    }
    ++v17;
    if (!--v46)
      goto LABEL_120;
  }
  v59 = (v56 * v52 - v55 * v54) * (v56 * v52 - v55 * v54);
  v60 = v54 * v54 + v52 * v52;
  if (v47 * v59 >= v48 * v60)
    goto LABEL_105;
LABEL_104:
  v48 = v59;
  v47 = v60;
  if (v59 != 0.0)
    goto LABEL_105;
  v48 = v59;
  v47 = v60;
LABEL_120:
  v62 = v48 / v47;
LABEL_121:
  v63 = sqrt(v62);
  if ((v35 & 1) != 0)
    v27 = v63;
  else
    v27 = -v63;
LABEL_124:
  v31 = v75;
  if (v75)
  {
LABEL_125:
    v64 = (unsigned int *)(v31 + 20);
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
      sub_100256C90((uint64_t)&v71);
  }
LABEL_129:
  v75 = 0;
  v72 = 0u;
  v73 = 0u;
  if (SDWORD1(v71) >= 1)
  {
    v67 = 0;
    v68 = v76;
    do
      *(_DWORD *)&v68[4 * v67++] = 0;
    while (v67 < SDWORD1(v71));
  }
  if (v77 != v78)
    j__free(v77);
  if (v80)
    sub_1002989D0(v79);
  return v27;
}

void sub_100310B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4((uint64_t)&a11);
  sub_1001D40CC(v11 - 64);
  _Unwind_Resume(a1);
}

void sub_100310B8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_100310BA0(int32x2_t **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7, float **a8, unsigned __int8 a9, char a10)
{
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  _QWORD *v44;
  _QWORD *v45;
  char v46;
  unsigned int *v47;
  unsigned int v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  double *v59;
  char *v60;
  int v61;
  uint64_t v62;
  int v63;
  int64x2_t *v64;
  float **v65;
  int *v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  int v84;
  char *v85;
  int *v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  __int128 v100;
  float *v101;
  float *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float *v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  BOOL v114;
  char *v116;
  int v117;
  int v118;
  int v119;
  int v120;
  char *v123;
  int v124;
  int64x2_t *v125;
  int *v126;
  _DWORD *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int64x2_t v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  __int128 v144;
  _WORD *v145;
  _WORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _WORD *v153;
  uint64_t v154;
  double v155;
  int v156;
  double v157;
  int v158;
  int v159;
  BOOL v160;
  char *v162;
  int v163;
  double v164;
  int v165;
  double v166;
  int v167;
  int v168;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _DWORD *v177;
  float *v178;
  float *v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  BOOL v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int64x2_t *v191;
  const float *v192;
  unsigned __int128 v193;
  const float *v194;
  unsigned __int128 v195;
  int64x2_t v196;
  int64x2_t v197;
  int64x2_t v198;
  int64x2_t v199;
  unint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  int64x2_t *v204;
  const float *v205;
  uint64_t v206;
  const float *v207;
  unsigned __int128 v208;
  unsigned __int128 v209;
  int64x2_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  int *v217;
  uint64_t v218;
  int64x2_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _DWORD *v225;
  __int16 *v226;
  float *v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  BOOL v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int64x2_t *v239;
  const float *v240;
  unsigned __int128 v241;
  const float *v242;
  unsigned __int128 v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  int64x2_t *v251;
  const float *v252;
  uint64_t v253;
  const float *v254;
  unsigned __int128 v255;
  unsigned __int128 v256;
  int64x2_t v257;
  int64x2_t v258;
  int64x2_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  int *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned __int8 *v267;
  uint64_t v268;
  unint64_t v269;
  int v270;
  uint64_t nn;
  int v272;
  unint64_t i1;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  BOOL v277;
  int v278;
  uint64_t v279;
  unsigned __int8 *v280;
  uint64_t v281;
  uint64_t v282;
  unsigned __int8 *v283;
  unsigned __int8 *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  int v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int64x2_t *v295;
  uint64_t v296;
  uint64_t v297;
  _DWORD *v298;
  int v299;
  int *v300;
  unsigned __int8 *v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int64x2_t *v311;
  const float *v312;
  unsigned __int128 v313;
  const float *v314;
  unsigned __int128 v315;
  int64x2_t v316;
  int64x2_t v317;
  int64x2_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  int v322;
  int v323;
  uint64_t v324;
  int *v325;
  _DWORD *v326;
  unsigned __int8 *v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int64x2_t *v337;
  const float *v338;
  unsigned __int128 v339;
  const float *v340;
  unsigned __int128 v341;
  int64x2_t v342;
  int64x2_t v343;
  int64x2_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  int64x2_t *v349;
  const float *v350;
  uint64_t v351;
  const float *v352;
  unsigned __int128 v353;
  unsigned __int128 v354;
  int64x2_t v355;
  int64x2_t v356;
  int64x2_t v357;
  int64x2_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t *v361;
  int *v362;
  uint64_t v363;
  uint64_t mm;
  unint64_t v365;
  double v366;
  double v367;
  unsigned int v368;
  float *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t i;
  int v373;
  int v374;
  int v375;
  double v376;
  double v377;
  double v378;
  double v379;
  unsigned int v380;
  unsigned int v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  float *v387;
  float *v388;
  uint64_t j;
  int v390;
  int v391;
  int v393;
  int v394;
  int v395;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  uint64_t k;
  uint64_t v401;
  _DWORD *v402;
  double *v403;
  int *v404;
  float *v405;
  double v406;
  int v407;
  uint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  int64x2_t *v416;
  const float *v417;
  unsigned __int128 v418;
  const float *v419;
  unsigned __int128 v420;
  int64x2_t v421;
  int64x2_t v422;
  int64x2_t v423;
  int64x2_t v424;
  unint64_t v425;
  uint64_t v426;
  char *v427;
  int m;
  uint64_t v429;
  double *v430;
  int *v431;
  _DWORD *v432;
  float *v433;
  double v434;
  int v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int64x2_t *v444;
  const float *v445;
  unsigned __int128 v446;
  const float *v447;
  unsigned __int128 v448;
  int64x2_t v449;
  int64x2_t v450;
  int64x2_t v451;
  int64x2_t v452;
  unint64_t v453;
  uint64_t v454;
  char *v455;
  uint64_t v456;
  uint64_t v457;
  int64x2_t *v458;
  const float *v459;
  const float *v460;
  unsigned __int128 v461;
  unsigned __int128 v462;
  int64x2_t v463;
  int64x2_t v464;
  int64x2_t v465;
  int64x2_t v466;
  uint64_t v467;
  uint64_t v468;
  char *v469;
  int *v470;
  uint64_t v471;
  double v472;
  double v473;
  unsigned int v474;
  _WORD *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t n;
  int v479;
  int v480;
  int v481;
  double v482;
  double v483;
  double v484;
  double v485;
  unsigned int v486;
  unsigned int v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  _WORD *v493;
  _WORD *v494;
  uint64_t ii;
  double v496;
  int v497;
  _BOOL4 v498;
  int v499;
  int v500;
  int v502;
  double v503;
  int v504;
  _BOOL4 v505;
  int v506;
  int v507;
  uint64_t v509;
  uint64_t v510;
  int64x2_t *v511;
  uint64_t jj;
  uint64_t v513;
  _DWORD *v514;
  double *v515;
  int *v516;
  __int16 *v517;
  int v518;
  uint64_t v519;
  unint64_t v520;
  unint64_t v521;
  unint64_t v522;
  uint64_t v523;
  unint64_t v524;
  uint64_t v525;
  uint64_t v526;
  int64x2_t *v527;
  const float *v528;
  unsigned __int128 v529;
  const float *v530;
  unsigned __int128 v531;
  int64x2_t v532;
  int64x2_t v533;
  int64x2_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t *v537;
  int kk;
  uint64_t v539;
  double *v540;
  int *v541;
  _DWORD *v542;
  __int16 *v543;
  int v544;
  uint64_t v545;
  unint64_t v546;
  unint64_t v547;
  unint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v552;
  int64x2_t *v553;
  const float *v554;
  unsigned __int128 v555;
  const float *v556;
  unsigned __int128 v557;
  int64x2_t v558;
  int64x2_t v559;
  int64x2_t v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t *v563;
  uint64_t v564;
  uint64_t v565;
  int64x2_t *v566;
  const float *v567;
  const float *v568;
  unsigned __int128 v569;
  unsigned __int128 v570;
  int64x2_t v571;
  int64x2_t v572;
  int64x2_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t *v576;
  int *v577;
  uint64_t v578;
  unsigned int *v579;
  unsigned int v580;
  unsigned int v581;
  uint64_t v582;
  _DWORD *v583;
  unsigned int *v584;
  unsigned int v585;
  unsigned int v586;
  uint64_t v587;
  int *v588;
  unsigned int *v589;
  unsigned int v590;
  unsigned int v591;
  uint64_t v592;
  char *v593;
  const void *__src;
  const void *__srca;
  char *v596;
  char *v597;
  float **v598;
  float **v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  void *v604;
  void *v605;
  uint64_t v606;
  void *v607;
  void *v608;
  uint64_t v609;
  void *v610;
  void *v611;
  uint64_t v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  uint64_t v616;
  uint64_t v617;
  const void *v618;
  void *v619;
  _QWORD v620[2];
  __int128 v621;
  __int128 v622;
  __int128 v623;
  uint64_t v624;
  uint64_t v625;
  int *v626;
  void *v627;
  _QWORD v628[2];
  __int128 v629;
  __int128 v630;
  __int128 v631;
  uint64_t v632;
  uint64_t v633;
  char *v634;
  void *v635;
  _QWORD v636[2];
  char v637[8];
  int v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  uint64_t v642;
  uint64_t v643;
  char *v644;
  void *v645;
  _QWORD v646[118];
  void *__p[2];
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  unsigned int __dst;
  unsigned int v664;
  unsigned int v665;

  sub_100298C2C(v637, &off_1004534B0);
  if (sub_10025D914((_DWORD *)a4) == 0x10000)
  {
    v18 = *(_QWORD *)(a4 + 8);
    v19 = *(_OWORD *)(v18 + 16);
    v629 = *(_OWORD *)v18;
    v630 = v19;
    v631 = *(_OWORD *)(v18 + 32);
    v20 = *(_QWORD *)(v18 + 56);
    v632 = *(_QWORD *)(v18 + 48);
    v633 = v20;
    v634 = (char *)&v629 + 8;
    v635 = v636;
    v636[0] = 0;
    v636[1] = 0;
    if (v20)
    {
      v21 = (unsigned int *)(v20 + 20);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    if (*(int *)(v18 + 4) > 2)
    {
      DWORD1(v629) = 0;
      sub_100256B48((uint64_t)&v629, v18);
    }
    else
    {
      v23 = *(_QWORD **)(v18 + 72);
      v24 = v635;
      *(_QWORD *)v635 = *v23;
      v24[1] = v23[1];
    }
  }
  else
  {
    sub_10025CCB8(a4, -1, (uint64_t)&v629);
  }
  if ((int)a6 < 1 || !a7)
  {
    v639 = 0uLL;
    v25 = sub_10029430C(&v639, 20);
    *(_DWORD *)(v25 + 16) = 1702521171;
    *(_OWORD *)v25 = *(_OWORD *)"dims > 0 && histSize";
    sub_100294B74(-215, (uint64_t *)&v639, "calcHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 1457);
  }
  if (sub_10025D914((_DWORD *)a5) == 0x10000)
  {
    v26 = *(_QWORD *)(a5 + 8);
    v27 = *(_OWORD *)(v26 + 16);
    v639 = *(_OWORD *)v26;
    v640 = v27;
    v641 = *(_OWORD *)(v26 + 32);
    v28 = *(_QWORD *)(v26 + 56);
    v642 = *(_QWORD *)(v26 + 48);
    v643 = v28;
    v644 = (char *)&v639 + 8;
    v645 = v646;
    v646[1] = 0;
    v646[0] = 0;
    if (v28)
    {
      v29 = (unsigned int *)(v28 + 20);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
    }
    if (*(int *)(v26 + 4) > 2)
    {
      DWORD1(v639) = 0;
      sub_100256B48((uint64_t)&v639, v26);
    }
    else
    {
      v31 = *(_QWORD **)(v26 + 72);
      v32 = v645;
      *(_QWORD *)v645 = *v31;
      v32[1] = v31[1];
    }
  }
  else
  {
    sub_10025CCB8(a5, -1, (uint64_t)&v639);
  }
  v33 = v640;
  if (v643)
  {
    v34 = (unsigned int *)(v643 + 20);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
      sub_100256C90((uint64_t)&v639);
  }
  v643 = 0;
  v640 = 0u;
  v641 = 0u;
  if (SDWORD1(v639) >= 1)
  {
    v37 = 0;
    v38 = v644;
    do
      *(_DWORD *)&v38[4 * v37++] = 0;
    while (v37 < SDWORD1(v639));
  }
  if (v645 != v646)
    j__free(v645);
  sub_100258F0C((int *)a5, a6, a7, 5u, 0xFFFFFFFF, 0, 0);
  if (sub_10025D914((_DWORD *)a5) == 0x10000)
  {
    v39 = *(_QWORD *)(a5 + 8);
    v40 = *(_OWORD *)(v39 + 16);
    v621 = *(_OWORD *)v39;
    v622 = v40;
    v623 = *(_OWORD *)(v39 + 32);
    v41 = *(_QWORD *)(v39 + 56);
    v624 = *(_QWORD *)(v39 + 48);
    v625 = v41;
    v626 = (int *)&v621 + 2;
    v627 = v628;
    v628[0] = 0;
    v628[1] = 0;
    if (v41)
    {
      v42 = (unsigned int *)(v41 + 20);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 + 1, v42));
    }
    if (*(int *)(v39 + 4) > 2)
    {
      DWORD1(v621) = 0;
      sub_100256B48((uint64_t)&v621, v39);
    }
    else
    {
      v44 = *(_QWORD **)(v39 + 72);
      v45 = v627;
      *(_QWORD *)v627 = *v44;
      v45[1] = v44[1];
    }
  }
  else
  {
    sub_10025CCB8(a5, -1, (uint64_t)&v621);
  }
  v613 = v621;
  v614 = v622;
  if (v33 == (_QWORD)v622)
    v46 = a10;
  else
    v46 = 0;
  v615 = v623;
  v616 = v624;
  v617 = v625;
  v618 = (char *)&v613 + 8;
  v619 = v620;
  v620[0] = 0;
  v620[1] = 0;
  if (v625)
  {
    v47 = (unsigned int *)(v625 + 20);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 + 1, v47));
    if (SDWORD1(v621) <= 2)
      goto LABEL_45;
  }
  else if (SDWORD1(v621) <= 2)
  {
LABEL_45:
    v49 = v627;
    v50 = v619;
    *(_QWORD *)v619 = *(_QWORD *)v627;
    v50[1] = v49[1];
    goto LABEL_48;
  }
  DWORD1(v613) = 0;
  sub_100256B48((uint64_t)&v613, (uint64_t)&v621);
LABEL_48:
  LODWORD(v613) = v613 & 0xFFFFF000 | 4;
  if ((v46 & 1) != 0)
  {
    LODWORD(v639) = 33619968;
    *((_QWORD *)&v639 + 1) = &v613;
    *(_QWORD *)&v640 = 0;
    sub_1002044A8((unsigned int *)&v621, (uint64_t)&v639, 4, 1.0, 0.0);
  }
  else
  {
    v639 = 0u;
    v640 = 0u;
    sub_10021956C((uint64_t)&v621, (uint64_t)&v639);
  }
  v610 = 0;
  v611 = 0;
  v612 = 0;
  v607 = 0;
  v608 = 0;
  v609 = 0;
  v604 = 0;
  v605 = 0;
  v606 = 0;
  v603 = 0;
  if ((_QWORD)v630)
  {
    if (SDWORD1(v629) >= 3)
    {
      v52 = (int *)(v634 + 4);
      v53 = 1;
      v54 = DWORD1(v629) & 0xFFFFFFFE;
      v55 = 1;
      do
      {
        v53 *= *(v52 - 1);
        v55 *= *v52;
        v52 += 2;
        v54 -= 2;
      }
      while (v54);
      v51 = v55 * v53;
      v56 = DWORD1(v629) - (unint64_t)(DWORD1(v629) & 0xFFFFFFFE);
      if (v56)
      {
        v57 = &v634[(4 * DWORD1(v629)) & 0x3FFFFFFF8];
        do
        {
          v58 = *(int *)v57;
          v57 += 4;
          v51 *= v58;
          --v56;
        }
        while (v56);
      }
    }
    else
    {
      v51 = SHIDWORD(v629) * (uint64_t)SDWORD2(v629);
    }
    if (DWORD1(v629) && v51 && (v629 & 0xFFF) != 0)
    {
      v639 = 0uLL;
      qmemcpy((void *)sub_10029430C(&v639, 72), "mask.empty() || mask.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", 72);
      sub_100294B74(-215, (uint64_t *)&v639, "calcHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 1484);
    }
  }
  sub_100313608(a1, a2, a3, (int *)&v629, a6, v626, a8, a9, &v610, (uint64_t *)&v607, (uint64_t)&v603, (uint64_t *)&v604);
  v59 = (double *)v604;
  if (a9)
    v60 = (char *)v604;
  else
    v60 = 0;
  v61 = *(_DWORD *)a1 & 7;
  if (v61 == 5)
  {
    v596 = v60;
    v598 = a8;
    v84 = HIDWORD(v603);
    v85 = (char *)v610;
    v86 = (int *)v607;
    v87 = (_DWORD *)v614;
    v88 = 8 * (int)a6;
    v89 = *(_QWORD *)((char *)v610 + v88);
    v601 = *(int *)((char *)v607 + v88 + 4);
    __src = v619;
    v90 = v603;
    memcpy(&__dst, v618, 4 * a6);
    memcpy(&v639, __src, 8 * a6);
    if (a9)
    {
      switch(a6)
      {
        case 1u:
          if (v84)
          {
            v366 = *v59;
            v367 = v59[1];
            v368 = __dst;
            v369 = *(float **)v85;
            v370 = v86[1];
            v371 = 4 * *v86;
            do
            {
              if (v89)
              {
                if (v90 >= 1)
                {
                  for (i = 0; i != v90; ++i)
                  {
                    if (*(_BYTE *)(v89 + i))
                    {
                      v373 = (int)(v367 + *v369 * v366) - (v367 + *v369 * v366 < (double)(int)(v367 + *v369 * v366));
                      if (v373 < v368)
                        ++v87[v373];
                    }
                    v369 = (float *)((char *)v369 + v371);
                  }
                }
              }
              else if (v90 >= 1)
              {
                v374 = v90;
                do
                {
                  v375 = (int)(v367 + *v369 * v366) - (v367 + *v369 * v366 < (double)(int)(v367 + *v369 * v366));
                  if (v375 < v368)
                    ++v87[v375];
                  v369 = (float *)((char *)v369 + v371);
                  --v374;
                }
                while (v374);
              }
              v369 += v370;
              v89 += v601;
              --v84;
            }
            while (v84);
          }
          break;
        case 2u:
          if (v84)
          {
            v376 = *v59;
            v377 = v59[1];
            v378 = v59[2];
            v379 = v59[3];
            v380 = __dst;
            v381 = v664;
            v382 = v639;
            v383 = v86[3];
            v384 = v86[1];
            v385 = 4 * v86[2];
            v386 = 4 * *v86;
            v388 = *(float **)v85;
            v387 = (float *)*((_QWORD *)v85 + 1);
            do
            {
              if (v89)
              {
                if (v90 >= 1)
                {
                  for (j = 0; j != v90; ++j)
                  {
                    if (*(_BYTE *)(v89 + j))
                    {
                      v390 = (int)(v377 + *v388 * v376) - (v377 + *v388 * v376 < (double)(int)(v377 + *v388 * v376));
                      v391 = (int)(v379 + *v387 * v378) - (v379 + *v387 * v378 < (double)(int)(v379 + *v387 * v378));
                      if (v390 < v380 && v391 < v381)
                        ++*(_DWORD *)((char *)&v87[v391] + v382 * v390);
                    }
                    v387 = (float *)((char *)v387 + v385);
                    v388 = (float *)((char *)v388 + v386);
                  }
                }
              }
              else if (v90 >= 1)
              {
                v393 = v90;
                do
                {
                  v394 = (int)(v377 + *v388 * v376) - (v377 + *v388 * v376 < (double)(int)(v377 + *v388 * v376));
                  v395 = (int)(v379 + *v387 * v378) - (v379 + *v387 * v378 < (double)(int)(v379 + *v387 * v378));
                  if (v394 < v380 && v395 < v381)
                    ++*(_DWORD *)((char *)&v87[v395] + v382 * v394);
                  v387 = (float *)((char *)v387 + v385);
                  v388 = (float *)((char *)v388 + v386);
                  --v393;
                }
                while (v393);
              }
              v388 += v384;
              v89 += v601;
              v387 += v383;
              --v84;
            }
            while (v84);
          }
          break;
        case 3u:
          if (v84)
          {
            v91 = *v59;
            v92 = v59[1];
            v93 = v59[2];
            v94 = v59[3];
            v95 = v59[4];
            v96 = v59[5];
            v97 = __dst;
            v98 = v664;
            v99 = v665;
            v100 = v639;
            v101 = (float *)*((_QWORD *)v85 + 1);
            v102 = (float *)*((_QWORD *)v85 + 2);
            v103 = v86[5];
            v104 = v86[3];
            v105 = v86[1];
            v106 = 4 * v86[4];
            v107 = 4 * v86[2];
            v108 = 4 * *v86;
            v109 = *(float **)v85;
            do
            {
              if (v89)
              {
                if (v90 >= 1)
                {
                  v110 = 0;
                  do
                  {
                    if (*(_BYTE *)(v89 + v110))
                    {
                      v111 = (int)(v92 + *v109 * v91) - (v92 + *v109 * v91 < (double)(int)(v92 + *v109 * v91));
                      v112 = (int)(v94 + *v101 * v93) - (v94 + *v101 * v93 < (double)(int)(v94 + *v101 * v93));
                      v113 = (int)(v96 + *v102 * v95) - (v96 + *v102 * v95 < (double)(int)(v96 + *v102 * v95));
                      v114 = v111 >= v97 || v112 >= v98;
                      if (!v114 && v113 < v99)
                      {
                        v116 = (char *)v87 + v100 * v111 + *((_QWORD *)&v100 + 1) * v112;
                        ++*(_DWORD *)&v116[4 * v113];
                      }
                    }
                    ++v110;
                    v102 = (float *)((char *)v102 + v106);
                    v101 = (float *)((char *)v101 + v107);
                    v109 = (float *)((char *)v109 + v108);
                  }
                  while (v90 != v110);
                }
              }
              else if (v90 >= 1)
              {
                v117 = v90;
                do
                {
                  v118 = (int)(v92 + *v109 * v91) - (v92 + *v109 * v91 < (double)(int)(v92 + *v109 * v91));
                  v119 = (int)(v94 + *v101 * v93) - (v94 + *v101 * v93 < (double)(int)(v94 + *v101 * v93));
                  v120 = (int)(v96 + *v102 * v95) - (v96 + *v102 * v95 < (double)(int)(v96 + *v102 * v95));
                  if (v118 < v97 && v119 < v98 && v120 < v99)
                  {
                    v123 = (char *)v87 + v100 * v118 + *((_QWORD *)&v100 + 1) * v119;
                    ++*(_DWORD *)&v123[4 * v120];
                  }
                  v102 = (float *)((char *)v102 + v106);
                  v101 = (float *)((char *)v101 + v107);
                  v109 = (float *)((char *)v109 + v108);
                  --v117;
                }
                while (v117);
              }
              v109 += v105;
              v101 += v104;
              v89 += v601;
              v102 += v103;
              --v84;
            }
            while (v84);
          }
          break;
        default:
          if (v84)
          {
            v397 = a6 & 7;
            if (!v397)
              v397 = 8;
            v398 = a6 - v397;
            v399 = v85 + 32;
            do
            {
              if (v89)
              {
                if (v90 >= 1)
                {
                  for (k = 0; k != v90; ++k)
                  {
                    LODWORD(v401) = 0;
                    v402 = v87;
                    if (*(_BYTE *)(v89 + k))
                    {
                      v401 = 0;
                      v403 = (double *)(v596 + 8);
                      v404 = v86;
                      v402 = v87;
                      while (1)
                      {
                        v405 = *(float **)&v85[8 * v401];
                        v406 = *v403 + *v405 * *(v403 - 1);
                        v407 = (int)v406 - (v406 < (double)(int)v406);
                        if (v407 >= *(&__dst + v401))
                          break;
                        v408 = *v404;
                        v404 += 2;
                        *(_QWORD *)&v85[8 * v401] = &v405[v408];
                        v402 = (_DWORD *)((char *)v402 + *((_QWORD *)&v639 + v401++) * v407);
                        v403 += 2;
                        if (a6 == v401)
                          goto LABEL_395;
                      }
                    }
                    if ((_DWORD)v401 == a6)
                    {
LABEL_395:
                      ++*v402;
                    }
                    else if ((int)v401 < (int)a6)
                    {
                      v409 = v401;
                      v410 = a6 - (unint64_t)v401;
                      if (v410 > 8)
                      {
                        v411 = ~(unint64_t)v401 + a6;
                        if ((~(_DWORD)v401 & 0x7FFFFFFFu) >= (v411 & 0x7FFFFFFF) && !(v411 >> 31))
                        {
                          if ((v410 & 7) != 0)
                            v412 = v410 & 7;
                          else
                            v412 = 8;
                          v413 = v410 - v412 + v401;
                          v414 = v409 - a6 + v412;
                          v415 = 2 * v409;
                          v416 = (int64x2_t *)&v399[8 * v409];
                          do
                          {
                            v417 = (const float *)&v86[v415 & 0xFFFFFFFE];
                            v418 = (unsigned __int128)vld2q_f32(v417);
                            v419 = (const float *)&v86[((_DWORD)v415 + 8) & 0xFFFFFFFE];
                            v420 = (unsigned __int128)vld2q_f32(v419);
                            v421 = vaddq_s64(v416[-2], vshll_n_s32(*(int32x2_t *)&v418, 2uLL));
                            v422 = vaddq_s64(v416[-1], vshll_high_n_s32((int32x4_t)v418, 2uLL));
                            v423 = vaddq_s64(*v416, vshll_n_s32(*(int32x2_t *)&v420, 2uLL));
                            v424 = vaddq_s64(v416[1], vshll_high_n_s32((int32x4_t)v420, 2uLL));
                            v416[-2] = v421;
                            v416[-1] = v422;
                            *v416 = v423;
                            v416[1] = v424;
                            v416 += 4;
                            v415 += 16;
                            v414 += 8;
                          }
                          while (v414);
                          v409 = v413;
                        }
                      }
                      v425 = a6 - v409;
                      v426 = 2 * v409;
                      v427 = &v85[8 * v409];
                      do
                      {
                        *(_QWORD *)v427 += 4 * v86[v426 & 0xFFFFFFFE];
                        v427 += 8;
                        v426 += 2;
                        --v425;
                      }
                      while (v425);
                    }
                  }
                }
              }
              else if (v90 >= 1)
              {
                for (m = 0; m != v90; ++m)
                {
                  v429 = 0;
                  v430 = (double *)(v596 + 8);
                  v431 = v86;
                  v432 = v87;
                  while (1)
                  {
                    v433 = *(float **)&v85[8 * v429];
                    v434 = *v430 + *v433 * *(v430 - 1);
                    v435 = (int)v434 - (v434 < (double)(int)v434);
                    if (v435 >= *(&__dst + v429))
                      break;
                    v436 = *v431;
                    v431 += 2;
                    *(_QWORD *)&v85[8 * v429] = &v433[v436];
                    v432 = (_DWORD *)((char *)v432 + *((_QWORD *)&v639 + v429++) * v435);
                    v430 += 2;
                    if (a6 == v429)
                      goto LABEL_418;
                  }
                  if ((_DWORD)v429 == a6)
                  {
LABEL_418:
                    ++*v432;
                    continue;
                  }
                  if ((int)v429 < (int)a6)
                  {
                    v437 = v429;
                    v438 = a6 - (unint64_t)v429;
                    if (v438 > 8)
                    {
                      v439 = ~(unint64_t)v429 + a6;
                      if ((~(_DWORD)v429 & 0x7FFFFFFFu) >= (v439 & 0x7FFFFFFF) && !(v439 >> 31))
                      {
                        if ((v438 & 7) != 0)
                          v440 = v438 & 7;
                        else
                          v440 = 8;
                        v441 = v438 - v440 + v429;
                        v442 = v437 - a6 + v440;
                        v443 = 2 * v437;
                        v444 = (int64x2_t *)&v399[8 * v437];
                        do
                        {
                          v445 = (const float *)&v86[v443 & 0xFFFFFFFE];
                          v446 = (unsigned __int128)vld2q_f32(v445);
                          v447 = (const float *)&v86[((_DWORD)v443 + 8) & 0xFFFFFFFE];
                          v448 = (unsigned __int128)vld2q_f32(v447);
                          v449 = vaddq_s64(v444[-2], vshll_n_s32(*(int32x2_t *)&v446, 2uLL));
                          v450 = vaddq_s64(v444[-1], vshll_high_n_s32((int32x4_t)v446, 2uLL));
                          v451 = vaddq_s64(*v444, vshll_n_s32(*(int32x2_t *)&v448, 2uLL));
                          v452 = vaddq_s64(v444[1], vshll_high_n_s32((int32x4_t)v448, 2uLL));
                          v444[-2] = v449;
                          v444[-1] = v450;
                          *v444 = v451;
                          v444[1] = v452;
                          v444 += 4;
                          v443 += 16;
                          v442 += 8;
                        }
                        while (v442);
                        v437 = v441;
                      }
                    }
                    v453 = a6 - v437;
                    v454 = 2 * v437;
                    v455 = &v85[8 * v437];
                    do
                    {
                      *(_QWORD *)v455 += 4 * v86[v454 & 0xFFFFFFFE];
                      v455 += 8;
                      v454 += 2;
                      --v453;
                    }
                    while (v453);
                  }
                }
              }
              if (a6 >= 9)
              {
                v457 = v398;
                v458 = (int64x2_t *)(v85 + 32);
                v459 = (const float *)(v86 + 9);
                do
                {
                  v460 = v459 - 8;
                  v461 = (unsigned __int128)vld2q_f32(v460);
                  v462 = (unsigned __int128)vld2q_f32(v459);
                  v463 = vaddq_s64(v458[-2], vshll_n_s32(*(int32x2_t *)&v461, 2uLL));
                  v464 = vaddq_s64(v458[-1], vshll_high_n_s32((int32x4_t)v461, 2uLL));
                  v465 = vaddq_s64(*v458, vshll_n_s32(*(int32x2_t *)&v462, 2uLL));
                  v466 = vaddq_s64(v458[1], vshll_high_n_s32((int32x4_t)v462, 2uLL));
                  v458[-2] = v463;
                  v458[-1] = v464;
                  *v458 = v465;
                  v458[1] = v466;
                  v458 += 4;
                  v459 += 16;
                  v457 -= 8;
                }
                while (v457);
                v456 = v398;
              }
              else
              {
                v456 = 0;
              }
              v467 = a6 - v456;
              v468 = 2 * v456;
              v469 = &v85[8 * v456];
              v470 = &v86[v468 + 1];
              do
              {
                v471 = *v470;
                v470 += 2;
                *(_QWORD *)v469 += 4 * v471;
                v469 += 8;
                --v467;
              }
              while (v467);
              v89 += v601;
              --v84;
            }
            while (v84);
          }
          break;
      }
      goto LABEL_541;
    }
    if (!v598)
    {
      __p[1] = 0;
      __p[0] = 0;
      qmemcpy((void *)sub_10029430C(__p, 55), "Either ranges, either uniform ranges should be provided", 55);
      sub_100294B74(-5, (uint64_t *)__p, "calcHist_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 989);
    }
    v662 = 0u;
    v661 = 0u;
    v660 = 0u;
    v659 = 0u;
    v658 = 0u;
    v657 = 0u;
    v656 = 0u;
    v655 = 0u;
    v654 = 0u;
    v653 = 0u;
    v652 = 0u;
    v651 = 0u;
    v650 = 0u;
    v649 = 0u;
    v648 = 0u;
    *(_OWORD *)__p = 0u;
    memcpy(__p, v598, 8 * a6);
    if (!v84)
      goto LABEL_541;
    if ((int)a6 <= 1)
      v172 = 1;
    else
      v172 = a6;
    v173 = a6 & 7;
    if (!v173)
      v173 = 8;
    v174 = a6 - v173;
    while (v90 < 1)
    {
LABEL_190:
      v203 = v174;
      v204 = (int64x2_t *)(v85 + 32);
      v205 = (const float *)(v86 + 9);
      if (a6 >= 9)
      {
        do
        {
          v207 = v205 - 8;
          v208 = (unsigned __int128)vld2q_f32(v207);
          v209 = (unsigned __int128)vld2q_f32(v205);
          v210 = vaddq_s64(v204[-2], vshll_n_s32(*(int32x2_t *)&v208, 2uLL));
          v211 = vaddq_s64(v204[-1], vshll_high_n_s32((int32x4_t)v208, 2uLL));
          v212 = vaddq_s64(*v204, vshll_n_s32(*(int32x2_t *)&v209, 2uLL));
          v213 = vaddq_s64(v204[1], vshll_high_n_s32((int32x4_t)v209, 2uLL));
          v204[-2] = v210;
          v204[-1] = v211;
          *v204 = v212;
          v204[1] = v213;
          v204 += 4;
          v205 += 16;
          v203 -= 8;
        }
        while (v203);
        v206 = v174;
      }
      else
      {
        v206 = 0;
      }
      v214 = a6 - v206;
      v215 = 2 * v206;
      v216 = &v85[8 * v206];
      v217 = &v86[v215 + 1];
      do
      {
        v218 = *v217;
        v217 += 2;
        *(_QWORD *)v216 += 4 * v218;
        v216 += 8;
        --v214;
      }
      while (v214);
      v89 += v601;
      if (!--v84)
        goto LABEL_541;
    }
    v175 = 0;
    while (1)
    {
      if (v89 && (LODWORD(v176) = 0, v177 = v87, !*(_BYTE *)(v89 + v175)))
      {
LABEL_175:
        v183 = (int)v176 < (int)a6;
        if ((_DWORD)v176 != a6)
          goto LABEL_176;
      }
      else
      {
        v176 = 0;
        v177 = v87;
        do
        {
          v178 = *(float **)&v85[8 * v176];
          v179 = (float *)__p[v176];
          v180 = *(&__dst + v176);
          v181 = v180 & ~(v180 >> 31);
          v182 = -1;
          while (*v178 >= *v179)
          {
            ++v182;
            ++v179;
            if (v181 == v182)
            {
              if (v181 >= v180)
                goto LABEL_175;
              goto LABEL_172;
            }
          }
          LODWORD(v181) = v182;
          if (v182 >= v180)
            goto LABEL_175;
LABEL_172:
          *(_QWORD *)&v85[8 * v176] = &v178[v86[2 * v176]];
          v177 = (_DWORD *)((char *)v177 + *((_QWORD *)&v639 + v176++) * (int)v181);
        }
        while (v176 != v172);
        LODWORD(v176) = v172;
        v183 = (int)v172 < (int)a6;
        if ((_DWORD)v172 != a6)
        {
LABEL_176:
          if (v183)
          {
            v184 = v176;
            v185 = a6 - (unint64_t)v176;
            if (v185 > 8)
            {
              v186 = ~(unint64_t)v176 + a6;
              if ((~(_DWORD)v176 & 0x7FFFFFFFu) >= (v186 & 0x7FFFFFFF) && !(v186 >> 31))
              {
                if ((v185 & 7) != 0)
                  v187 = v185 & 7;
                else
                  v187 = 8;
                v188 = v185 - v187 + v176;
                v189 = v184 - a6 + v187;
                v190 = 2 * v184;
                v191 = (int64x2_t *)&v85[8 * v184 + 32];
                do
                {
                  v192 = (const float *)&v86[v190 & 0xFFFFFFFE];
                  v193 = (unsigned __int128)vld2q_f32(v192);
                  v194 = (const float *)&v86[((_DWORD)v190 + 8) & 0xFFFFFFFE];
                  v195 = (unsigned __int128)vld2q_f32(v194);
                  v196 = vaddq_s64(v191[-2], vshll_n_s32(*(int32x2_t *)&v193, 2uLL));
                  v197 = vaddq_s64(v191[-1], vshll_high_n_s32((int32x4_t)v193, 2uLL));
                  v198 = vaddq_s64(*v191, vshll_n_s32(*(int32x2_t *)&v195, 2uLL));
                  v199 = vaddq_s64(v191[1], vshll_high_n_s32((int32x4_t)v195, 2uLL));
                  v191[-2] = v196;
                  v191[-1] = v197;
                  *v191 = v198;
                  v191[1] = v199;
                  v191 += 4;
                  v190 += 16;
                  v189 += 8;
                }
                while (v189);
                v184 = v188;
              }
            }
            v200 = a6 - v184;
            v201 = 2 * v184;
            v202 = &v85[8 * v184];
            do
            {
              *(_QWORD *)v202 += 4 * v86[v201 & 0xFFFFFFFE];
              v202 += 8;
              v201 += 2;
              --v200;
            }
            while (v200);
          }
          goto LABEL_162;
        }
      }
      ++*v177;
LABEL_162:
      if (++v175 == v90)
        goto LABEL_190;
    }
  }
  if (v61 == 2)
  {
    v597 = v60;
    v599 = a8;
    v124 = HIDWORD(v603);
    v125 = (int64x2_t *)v610;
    v126 = (int *)v607;
    v127 = (_DWORD *)v614;
    v128 = 8 * (int)a6;
    v129 = *(_QWORD *)((char *)v610 + v128);
    v602 = *(int *)((char *)v607 + v128 + 4);
    __srca = v619;
    v130 = v603;
    memcpy(&__dst, v618, 4 * a6);
    memcpy(&v639, __srca, 8 * a6);
    if (a9)
    {
      switch(a6)
      {
        case 1u:
          if (v124)
          {
            v472 = *v59;
            v473 = v59[1];
            v474 = __dst;
            v475 = (_WORD *)v125->i64[0];
            v476 = v126[1];
            v477 = 2 * *v126;
            do
            {
              if (v129)
              {
                if (v130 >= 1)
                {
                  for (n = 0; n != v130; ++n)
                  {
                    if (*(_BYTE *)(v129 + n))
                    {
                      LOWORD(v132) = *v475;
                      v132 = v473 + (double)*(unint64_t *)&v132 * v472;
                      v479 = (int)v132 - (v132 < (double)(int)v132);
                      if (v479 < v474)
                        ++v127[v479];
                    }
                    v475 = (_WORD *)((char *)v475 + v477);
                  }
                }
              }
              else if (v130 >= 1)
              {
                v480 = v130;
                do
                {
                  LOWORD(v132) = *v475;
                  v132 = v473 + (double)*(unint64_t *)&v132 * v472;
                  v481 = (int)v132 - (v132 < (double)(int)v132);
                  if (v481 < v474)
                    ++v127[v481];
                  v475 = (_WORD *)((char *)v475 + v477);
                  --v480;
                }
                while (v480);
              }
              v475 += v476;
              v129 += v602;
              --v124;
            }
            while (v124);
          }
          break;
        case 2u:
          if (v124)
          {
            v482 = *v59;
            v483 = v59[1];
            v484 = v59[2];
            v485 = v59[3];
            v486 = __dst;
            v487 = v664;
            v488 = v639;
            v489 = v126[3];
            v490 = v126[1];
            v491 = 2 * v126[2];
            v492 = 2 * *v126;
            v494 = (_WORD *)v125->i64[0];
            v493 = (_WORD *)v125->i64[1];
            do
            {
              if (v129)
              {
                if (v130 >= 1)
                {
                  for (ii = 0; ii != v130; ++ii)
                  {
                    if (*(_BYTE *)(v129 + ii))
                    {
                      LOWORD(v133) = *v494;
                      v496 = v483 + (double)*(unint64_t *)&v133 * v482;
                      v497 = (int)v496;
                      v498 = v496 < (double)(int)v496;
                      LOWORD(v496) = *v493;
                      v133 = v485 + (double)*(unint64_t *)&v496 * v484;
                      v499 = v497 - v498;
                      v500 = (int)v133 - (v133 < (double)(int)v133);
                      if (v499 < v486 && v500 < v487)
                        ++*(_DWORD *)((char *)&v127[v500] + v488 * v499);
                    }
                    v493 = (_WORD *)((char *)v493 + v491);
                    v494 = (_WORD *)((char *)v494 + v492);
                  }
                }
              }
              else if (v130 >= 1)
              {
                v502 = v130;
                do
                {
                  LOWORD(v133) = *v494;
                  v503 = v483 + (double)*(unint64_t *)&v133 * v482;
                  v504 = (int)v503;
                  v505 = v503 < (double)(int)v503;
                  LOWORD(v503) = *v493;
                  v133 = v485 + (double)*(unint64_t *)&v503 * v484;
                  v506 = v504 - v505;
                  v507 = (int)v133 - (v133 < (double)(int)v133);
                  if (v506 < v486 && v507 < v487)
                    ++*(_DWORD *)((char *)&v127[v507] + v488 * v506);
                  v493 = (_WORD *)((char *)v493 + v491);
                  v494 = (_WORD *)((char *)v494 + v492);
                  --v502;
                }
                while (v502);
              }
              v494 += v490;
              v129 += v602;
              v493 += v489;
              --v124;
            }
            while (v124);
          }
          break;
        case 3u:
          if (v124)
          {
            v135 = *v59;
            v136 = v59[1];
            v137 = v59[2];
            v138 = v59[3];
            v139 = v59[4];
            v140 = v59[5];
            v141 = __dst;
            v142 = v664;
            v143 = v665;
            v144 = v639;
            v145 = (_WORD *)v125->i64[1];
            v146 = (_WORD *)v125[1].i64[0];
            v147 = v126[5];
            v148 = v126[3];
            v149 = v126[1];
            v150 = 2 * v126[4];
            v151 = 2 * v126[2];
            v152 = 2 * *v126;
            v153 = (_WORD *)v125->i64[0];
            do
            {
              if (v129)
              {
                if (v130 >= 1)
                {
                  v154 = 0;
                  do
                  {
                    if (*(_BYTE *)(v129 + v154))
                    {
                      LOWORD(v134) = *v153;
                      v155 = v136 + (double)*(unint64_t *)&v134 * v135;
                      v156 = (int)v155 - (v155 < (double)(int)v155);
                      LOWORD(v155) = *v145;
                      v157 = v138 + (double)*(unint64_t *)&v155 * v137;
                      v158 = (int)v157 - (v157 < (double)(int)v157);
                      LOWORD(v157) = *v146;
                      v134 = v140 + (double)*(unint64_t *)&v157 * v139;
                      v159 = (int)v134 - (v134 < (double)(int)v134);
                      v160 = v156 >= v141 || v158 >= v142;
                      if (!v160 && v159 < v143)
                      {
                        v162 = (char *)v127 + v144 * v156 + *((_QWORD *)&v144 + 1) * v158;
                        ++*(_DWORD *)&v162[4 * v159];
                      }
                    }
                    ++v154;
                    v146 = (_WORD *)((char *)v146 + v150);
                    v145 = (_WORD *)((char *)v145 + v151);
                    v153 = (_WORD *)((char *)v153 + v152);
                  }
                  while (v130 != v154);
                }
              }
              else if (v130 >= 1)
              {
                v163 = v130;
                do
                {
                  LOWORD(v134) = *v153;
                  v164 = v136 + (double)*(unint64_t *)&v134 * v135;
                  v165 = (int)v164 - (v164 < (double)(int)v164);
                  LOWORD(v164) = *v145;
                  v166 = v138 + (double)*(unint64_t *)&v164 * v137;
                  v167 = (int)v166 - (v166 < (double)(int)v166);
                  LOWORD(v166) = *v146;
                  v134 = v140 + (double)*(unint64_t *)&v166 * v139;
                  v168 = (int)v134 - (v134 < (double)(int)v134);
                  if (v165 < v141 && v167 < v142 && v168 < v143)
                  {
                    v171 = (char *)v127 + v144 * v165 + *((_QWORD *)&v144 + 1) * v167;
                    ++*(_DWORD *)&v171[4 * v168];
                  }
                  v146 = (_WORD *)((char *)v146 + v150);
                  v145 = (_WORD *)((char *)v145 + v151);
                  v153 = (_WORD *)((char *)v153 + v152);
                  --v163;
                }
                while (v163);
              }
              v153 += v149;
              v145 += v148;
              v129 += v602;
              v146 += v147;
              --v124;
            }
            while (v124);
          }
          break;
        default:
          if (v124)
          {
            v509 = a6 & 7;
            if (!v509)
              v509 = 8;
            v510 = a6 - v509;
            v511 = v125 + 2;
            do
            {
              if (v129)
              {
                if (v130 >= 1)
                {
                  for (jj = 0; jj != v130; ++jj)
                  {
                    LODWORD(v513) = 0;
                    v514 = v127;
                    if (*(_BYTE *)(v129 + jj))
                    {
                      v513 = 0;
                      v515 = (double *)(v597 + 8);
                      v516 = v126;
                      v514 = v127;
                      while (1)
                      {
                        v517 = (__int16 *)v125->i64[v513];
                        v131.i16[0] = *v517;
                        *(double *)v131.i64 = *v515 + (double)v131.u64[0] * *(v515 - 1);
                        v518 = (int)*(double *)v131.i64 - (*(double *)v131.i64 < (double)(int)*(double *)v131.i64);
                        if (v518 >= *(&__dst + v513))
                          break;
                        v519 = *v516;
                        v516 += 2;
                        v125->i64[v513] = (uint64_t)&v517[v519];
                        v514 = (_DWORD *)((char *)v514 + *((_QWORD *)&v639 + v513++) * v518);
                        v515 += 2;
                        if (a6 == v513)
                          goto LABEL_490;
                      }
                    }
                    if ((_DWORD)v513 == a6)
                    {
LABEL_490:
                      ++*v514;
                    }
                    else if ((int)v513 < (int)a6)
                    {
                      v520 = v513;
                      v521 = a6 - (unint64_t)v513;
                      if (v521 > 8)
                      {
                        v522 = ~(unint64_t)v513 + a6;
                        if ((~(_DWORD)v513 & 0x7FFFFFFFu) >= (v522 & 0x7FFFFFFF) && !(v522 >> 31))
                        {
                          if ((v521 & 7) != 0)
                            v523 = v521 & 7;
                          else
                            v523 = 8;
                          v524 = v521 - v523 + v513;
                          v525 = v520 - a6 + v523;
                          v526 = 2 * v520;
                          v527 = (int64x2_t *)((char *)v511 + 8 * v520);
                          do
                          {
                            v528 = (const float *)&v126[v526 & 0xFFFFFFFE];
                            v529 = (unsigned __int128)vld2q_f32(v528);
                            v530 = (const float *)&v126[((_DWORD)v526 + 8) & 0xFFFFFFFE];
                            v531 = (unsigned __int128)vld2q_f32(v530);
                            v532 = vaddq_s64(v527[-2], vshll_n_s32(*(int32x2_t *)&v529, 1uLL));
                            v131 = vaddq_s64(v527[-1], vshll_high_n_s32((int32x4_t)v529, 1uLL));
                            v533 = vaddq_s64(*v527, vshll_n_s32(*(int32x2_t *)&v531, 1uLL));
                            v534 = vaddq_s64(v527[1], vshll_high_n_s32((int32x4_t)v531, 1uLL));
                            v527[-2] = v532;
                            v527[-1] = v131;
                            *v527 = v533;
                            v527[1] = v534;
                            v527 += 4;
                            v526 += 16;
                            v525 += 8;
                          }
                          while (v525);
                          v520 = v524;
                        }
                      }
                      v535 = a6 - v520;
                      v536 = 2 * v520;
                      v537 = &v125->i64[v520];
                      do
                      {
                        *v537++ += 2 * v126[v536 & 0xFFFFFFFE];
                        v536 += 2;
                        --v535;
                      }
                      while (v535);
                    }
                  }
                }
              }
              else if (v130 >= 1)
              {
                for (kk = 0; kk != v130; ++kk)
                {
                  v539 = 0;
                  v540 = (double *)(v597 + 8);
                  v541 = v126;
                  v542 = v127;
                  while (1)
                  {
                    v543 = (__int16 *)v125->i64[v539];
                    v131.i16[0] = *v543;
                    *(double *)v131.i64 = *v540 + (double)v131.u64[0] * *(v540 - 1);
                    v544 = (int)*(double *)v131.i64 - (*(double *)v131.i64 < (double)(int)*(double *)v131.i64);
                    if (v544 >= *(&__dst + v539))
                      break;
                    v545 = *v541;
                    v541 += 2;
                    v125->i64[v539] = (uint64_t)&v543[v545];
                    v542 = (_DWORD *)((char *)v542 + *((_QWORD *)&v639 + v539++) * v544);
                    v540 += 2;
                    if (a6 == v539)
                      goto LABEL_513;
                  }
                  if ((_DWORD)v539 == a6)
                  {
LABEL_513:
                    ++*v542;
                    continue;
                  }
                  if ((int)v539 < (int)a6)
                  {
                    v546 = v539;
                    v547 = a6 - (unint64_t)v539;
                    if (v547 > 8)
                    {
                      v548 = ~(unint64_t)v539 + a6;
                      if ((~(_DWORD)v539 & 0x7FFFFFFFu) >= (v548 & 0x7FFFFFFF) && !(v548 >> 31))
                      {
                        if ((v547 & 7) != 0)
                          v549 = v547 & 7;
                        else
                          v549 = 8;
                        v550 = v547 - v549 + v539;
                        v551 = v546 - a6 + v549;
                        v552 = 2 * v546;
                        v553 = (int64x2_t *)((char *)v511 + 8 * v546);
                        do
                        {
                          v554 = (const float *)&v126[v552 & 0xFFFFFFFE];
                          v555 = (unsigned __int128)vld2q_f32(v554);
                          v556 = (const float *)&v126[((_DWORD)v552 + 8) & 0xFFFFFFFE];
                          v557 = (unsigned __int128)vld2q_f32(v556);
                          v558 = vaddq_s64(v553[-2], vshll_n_s32(*(int32x2_t *)&v555, 1uLL));
                          v131 = vaddq_s64(v553[-1], vshll_high_n_s32((int32x4_t)v555, 1uLL));
                          v559 = vaddq_s64(*v553, vshll_n_s32(*(int32x2_t *)&v557, 1uLL));
                          v560 = vaddq_s64(v553[1], vshll_high_n_s32((int32x4_t)v557, 1uLL));
                          v553[-2] = v558;
                          v553[-1] = v131;
                          *v553 = v559;
                          v553[1] = v560;
                          v553 += 4;
                          v552 += 16;
                          v551 += 8;
                        }
                        while (v551);
                        v546 = v550;
                      }
                    }
                    v561 = a6 - v546;
                    v562 = 2 * v546;
                    v563 = &v125->i64[v546];
                    do
                    {
                      *v563++ += 2 * v126[v562 & 0xFFFFFFFE];
                      v562 += 2;
                      --v561;
                    }
                    while (v561);
                  }
                }
              }
              if (a6 >= 9)
              {
                v565 = v510;
                v566 = v125 + 2;
                v567 = (const float *)(v126 + 9);
                do
                {
                  v568 = v567 - 8;
                  v569 = (unsigned __int128)vld2q_f32(v568);
                  v570 = (unsigned __int128)vld2q_f32(v567);
                  v571 = vaddq_s64(v566[-2], vshll_n_s32(*(int32x2_t *)&v569, 1uLL));
                  v131 = vaddq_s64(v566[-1], vshll_high_n_s32((int32x4_t)v569, 1uLL));
                  v572 = vaddq_s64(*v566, vshll_n_s32(*(int32x2_t *)&v570, 1uLL));
                  v573 = vaddq_s64(v566[1], vshll_high_n_s32((int32x4_t)v570, 1uLL));
                  v566[-2] = v571;
                  v566[-1] = v131;
                  *v566 = v572;
                  v566[1] = v573;
                  v566 += 4;
                  v567 += 16;
                  v565 -= 8;
                }
                while (v565);
                v564 = v510;
              }
              else
              {
                v564 = 0;
              }
              v574 = a6 - v564;
              v575 = 2 * v564;
              v576 = &v125->i64[v564];
              v577 = &v126[v575 + 1];
              do
              {
                v578 = *v577;
                v577 += 2;
                *v576++ += 2 * v578;
                --v574;
              }
              while (v574);
              v129 += v602;
              --v124;
            }
            while (v124);
          }
          break;
      }
      goto LABEL_541;
    }
    if (!v599)
    {
      __p[1] = 0;
      __p[0] = 0;
      qmemcpy((void *)sub_10029430C(__p, 55), "Either ranges, either uniform ranges should be provided", 55);
      sub_100294B74(-5, (uint64_t *)__p, "calcHist_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 989);
    }
    v662 = 0u;
    v661 = 0u;
    v660 = 0u;
    v659 = 0u;
    v658 = 0u;
    v657 = 0u;
    v656 = 0u;
    v655 = 0u;
    v654 = 0u;
    v653 = 0u;
    v652 = 0u;
    v651 = 0u;
    v650 = 0u;
    v649 = 0u;
    v648 = 0u;
    *(_OWORD *)__p = 0u;
    memcpy(__p, v599, 8 * a6);
    if (!v124)
      goto LABEL_541;
    if ((int)a6 <= 1)
      v220 = 1;
    else
      v220 = a6;
    v221 = a6 & 7;
    if (!v221)
      v221 = 8;
    v222 = a6 - v221;
    while (v130 < 1)
    {
LABEL_237:
      v250 = v222;
      v251 = v125 + 2;
      v252 = (const float *)(v126 + 9);
      if (a6 >= 9)
      {
        do
        {
          v254 = v252 - 8;
          v255 = (unsigned __int128)vld2q_f32(v254);
          v256 = (unsigned __int128)vld2q_f32(v252);
          v257 = vaddq_s64(v251[-2], vshll_n_s32(*(int32x2_t *)&v255, 1uLL));
          v219 = vaddq_s64(v251[-1], vshll_high_n_s32((int32x4_t)v255, 1uLL));
          v258 = vaddq_s64(*v251, vshll_n_s32(*(int32x2_t *)&v256, 1uLL));
          v259 = vaddq_s64(v251[1], vshll_high_n_s32((int32x4_t)v256, 1uLL));
          v251[-2] = v257;
          v251[-1] = v219;
          *v251 = v258;
          v251[1] = v259;
          v251 += 4;
          v252 += 16;
          v250 -= 8;
        }
        while (v250);
        v253 = v222;
      }
      else
      {
        v253 = 0;
      }
      v260 = a6 - v253;
      v261 = 2 * v253;
      v262 = &v125->i64[v253];
      v263 = &v126[v261 + 1];
      do
      {
        v264 = *v263;
        v263 += 2;
        *v262++ += 2 * v264;
        --v260;
      }
      while (v260);
      v129 += v602;
      if (!--v124)
        goto LABEL_541;
    }
    v223 = 0;
    while (1)
    {
      if (v129 && (LODWORD(v224) = 0, v225 = v127, !*(_BYTE *)(v129 + v223)))
      {
LABEL_222:
        v231 = (int)v224 < (int)a6;
        if ((_DWORD)v224 != a6)
          goto LABEL_223;
      }
      else
      {
        v224 = 0;
        v225 = v127;
        do
        {
          v226 = (__int16 *)v125->i64[v224];
          v219.i16[0] = *v226;
          *(float *)v219.i32 = (float)v219.u32[0];
          v227 = (float *)__p[v224];
          v228 = *(&__dst + v224);
          v229 = v228 & ~(v228 >> 31);
          v230 = -1;
          while (*v227 <= *(float *)v219.i32)
          {
            ++v230;
            ++v227;
            if (v229 == v230)
            {
              if (v229 >= v228)
                goto LABEL_222;
              goto LABEL_219;
            }
          }
          LODWORD(v229) = v230;
          if (v230 >= v228)
            goto LABEL_222;
LABEL_219:
          v125->i64[v224] = (uint64_t)&v226[v126[2 * v224]];
          v225 = (_DWORD *)((char *)v225 + *((_QWORD *)&v639 + v224++) * (int)v229);
        }
        while (v224 != v220);
        LODWORD(v224) = v220;
        v231 = (int)v220 < (int)a6;
        if ((_DWORD)v220 != a6)
        {
LABEL_223:
          if (v231)
          {
            v232 = v224;
            v233 = a6 - (unint64_t)v224;
            if (v233 > 8)
            {
              v234 = ~(unint64_t)v224 + a6;
              if ((~(_DWORD)v224 & 0x7FFFFFFFu) >= (v234 & 0x7FFFFFFF) && !(v234 >> 31))
              {
                if ((v233 & 7) != 0)
                  v235 = v233 & 7;
                else
                  v235 = 8;
                v236 = v233 - v235 + v224;
                v237 = v232 - a6 + v235;
                v238 = 2 * v232;
                v239 = (int64x2_t *)((char *)v125 + 8 * v232 + 32);
                do
                {
                  v240 = (const float *)&v126[v238 & 0xFFFFFFFE];
                  v241 = (unsigned __int128)vld2q_f32(v240);
                  v242 = (const float *)&v126[((_DWORD)v238 + 8) & 0xFFFFFFFE];
                  v243 = (unsigned __int128)vld2q_f32(v242);
                  v244 = vaddq_s64(v239[-2], vshll_n_s32(*(int32x2_t *)&v241, 1uLL));
                  v219 = vaddq_s64(v239[-1], vshll_high_n_s32((int32x4_t)v241, 1uLL));
                  v245 = vaddq_s64(*v239, vshll_n_s32(*(int32x2_t *)&v243, 1uLL));
                  v246 = vaddq_s64(v239[1], vshll_high_n_s32((int32x4_t)v243, 1uLL));
                  v239[-2] = v244;
                  v239[-1] = v219;
                  *v239 = v245;
                  v239[1] = v246;
                  v239 += 4;
                  v238 += 16;
                  v237 += 8;
                }
                while (v237);
                v232 = v236;
              }
            }
            v247 = a6 - v232;
            v248 = 2 * v232;
            v249 = &v125->i64[v232];
            do
            {
              *v249++ += 2 * v126[v248 & 0xFFFFFFFE];
              v248 += 2;
              --v247;
            }
            while (v247);
          }
          goto LABEL_209;
        }
      }
      ++*v225;
LABEL_209:
      if (++v223 == v130)
        goto LABEL_237;
    }
  }
  if (v61)
  {
    v639 = 0uLL;
    sub_100294B74(-210, (uint64_t *)&v639, "calcHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 1498);
  }
  v62 = v603;
  v63 = HIDWORD(v603);
  v64 = (int64x2_t *)v610;
  v65 = a8;
  v66 = (int *)v607;
  v67 = (_DWORD *)v614;
  v68 = 8 * (int)a6;
  v69 = *(_QWORD *)((char *)v610 + v68);
  v600 = *(int *)((char *)v607 + v68 + 4);
  __p[1] = 0;
  __p[0] = 0;
  *(_QWORD *)&v648 = 0;
  LODWORD(v639) = 1123876864;
  *((_QWORD *)&v639 + 1) = 0;
  sub_100315514((uint64_t)&v613, (uint64_t)&v639, a6, v65, (uint64_t)v60, a9, 0, (uint64_t *)__p);
  v70 = __p[0];
  switch(a6)
  {
    case 1u:
      v265 = *v66;
      v266 = v66[1];
      bzero(&v639, 0x400uLL);
      if (!v63)
      {
LABEL_345:
        for (mm = 0; mm != 256; ++mm)
        {
          v365 = v70[mm];
          if (!(v365 >> 62))
            *(_DWORD *)((char *)v67 + v365) += *((_DWORD *)&v639 + mm);
        }
LABEL_344:
        __p[1] = v70;
        operator delete(v70);
        goto LABEL_541;
      }
      v267 = (unsigned __int8 *)v64->i64[0];
      v268 = 2 * v265;
      v269 = (v62 - 4);
      v270 = (v269 & 0xFFFFFFFC) + 4;
      while (1)
      {
        if (v69)
        {
          if ((int)v62 >= 1)
          {
            for (nn = 0; nn != v62; ++nn)
            {
              if (*(_BYTE *)(v69 + nn))
                ++*((_DWORD *)&v639 + *v267);
              v267 += v265;
            }
          }
          goto LABEL_246;
        }
        if ((_DWORD)v265 == 1)
        {
          if ((int)v62 >= 4)
          {
            for (i1 = 0; i1 <= v269; i1 += 4)
            {
              v274 = v267[i1 + 1];
              ++*((_DWORD *)&v639 + v267[i1]);
              ++*((_DWORD *)&v639 + v274);
              v275 = 4 * v267[i1 + 2];
              v276 = v267[i1 + 3];
              ++*(_DWORD *)((char *)&v639 + v275);
              ++*((_DWORD *)&v639 + v276);
            }
            v267 += i1;
            v277 = __OFSUB__((_DWORD)v62, (_DWORD)i1);
            v272 = v62 - i1;
            if ((v272 < 0) ^ v277 | (v272 == 0))
              goto LABEL_246;
            goto LABEL_268;
          }
          v272 = v62;
          if ((int)v62 > 0)
            goto LABEL_268;
        }
        else
        {
          if ((int)v62 >= 4)
          {
            v278 = 0;
            do
            {
              v279 = v267[v265];
              ++*((_DWORD *)&v639 + *v267);
              ++*((_DWORD *)&v639 + v279);
              v280 = &v267[v268];
              v281 = v267[2 * v265];
              v282 = v267[3 * v265];
              ++*((_DWORD *)&v639 + v281);
              ++*((_DWORD *)&v639 + v282);
              v267 = &v280[v268];
              v278 += 4;
            }
            while (v278 <= (int)v269);
            v272 = v62 - v270;
            if ((int)v62 <= v270)
              goto LABEL_246;
            do
            {
LABEL_268:
              ++*((_DWORD *)&v639 + *v267);
              v267 += v265;
              --v272;
            }
            while (v272);
            goto LABEL_246;
          }
          v272 = v62;
          if ((int)v62 > 0)
            goto LABEL_268;
        }
LABEL_246:
        v267 += v266;
        v69 += v600;
        if (!--v63)
          goto LABEL_345;
      }
    case 2u:
      if (v63)
      {
        v284 = (unsigned __int8 *)v64->i64[0];
        v283 = (unsigned __int8 *)v64->i64[1];
        v286 = v66[2];
        v285 = v66[3];
        v288 = *v66;
        v287 = v66[1];
        do
        {
          if (v69)
          {
            if ((int)v62 >= 1)
            {
              v289 = 0;
              do
              {
                if (*(_BYTE *)(v69 + v289))
                {
                  v290 = v70[*v283 + 256] + v70[*v284];
                  if (!(v290 >> 62))
                    ++*(_DWORD *)((char *)v67 + v290);
                }
                ++v289;
                v284 += v288;
                v283 += v286;
              }
              while ((int)v62 != v289);
            }
          }
          else if ((int)v62 >= 1)
          {
            v291 = v62;
            do
            {
              v292 = v70[*v283 + 256] + v70[*v284];
              if (!(v292 >> 62))
                ++*(_DWORD *)((char *)v67 + v292);
              v284 += v288;
              v283 += v286;
              --v291;
            }
            while (v291);
          }
          v284 += v287;
          v283 += v285;
          v69 += v600;
          --v63;
        }
        while (v63);
      }
      break;
    case 3u:
      if (v63)
      {
        v72 = (unsigned __int8 *)v64->i64[1];
        v71 = (unsigned __int8 *)v64[1].i64[0];
        v73 = (unsigned __int8 *)v64->i64[0];
        v75 = v66[4];
        v74 = v66[5];
        v77 = v66[2];
        v76 = v66[3];
        v79 = *v66;
        v78 = v66[1];
        do
        {
          if (v69)
          {
            if ((int)v62 >= 1)
            {
              v80 = 0;
              do
              {
                if (*(_BYTE *)(v69 + v80))
                {
                  v81 = v70[*v72 + 256] + v70[*v73] + v70[*v71 + 512];
                  if (!(v81 >> 62))
                    ++*(_DWORD *)((char *)v67 + v81);
                }
                ++v80;
                v73 += v79;
                v72 += v77;
                v71 += v75;
              }
              while ((int)v62 != v80);
            }
          }
          else if ((int)v62 >= 1)
          {
            v82 = v62;
            do
            {
              v83 = v70[*v72 + 256] + v70[*v73] + v70[*v71 + 512];
              if (!(v83 >> 62))
                ++*(_DWORD *)((char *)v67 + v83);
              v73 += v79;
              v72 += v77;
              v71 += v75;
              --v82;
            }
            while (v82);
          }
          v73 += v78;
          v72 += v76;
          v71 += v74;
          v69 += v600;
          --v63;
        }
        while (v63);
      }
      break;
    default:
      if (v63)
      {
        v293 = a6 & 7;
        if (!v293)
          v293 = 8;
        v294 = a6 - v293;
        v295 = v64 + 2;
        do
        {
          if (v69)
          {
            if ((int)v62 >= 1)
            {
              v296 = 0;
              do
              {
                LODWORD(v297) = 0;
                v298 = v67;
                if (*(_BYTE *)(v69 + v296))
                {
                  v299 = 0;
                  v297 = 0;
                  v300 = v66;
                  v298 = v67;
                  while (1)
                  {
                    v301 = (unsigned __int8 *)v64->i64[v297];
                    v302 = v70[v299 & 0xFFFFFF00 | (unint64_t)*v301];
                    if (v302 >> 62)
                      break;
                    v298 = (_DWORD *)((char *)v298 + v302);
                    v303 = *v300;
                    v300 += 2;
                    v64->i64[v297++] = (uint64_t)&v301[v303];
                    v299 += 256;
                    if (a6 == v297)
                      goto LABEL_293;
                  }
                }
                if ((_DWORD)v297 == a6)
                {
LABEL_293:
                  ++*v298;
                }
                else if ((int)v297 < (int)a6)
                {
                  v304 = v297;
                  v305 = a6 - (unint64_t)v297;
                  if (v305 > 8)
                  {
                    v306 = ~(unint64_t)v297 + a6;
                    if ((~(_DWORD)v297 & 0x7FFFFFFFu) >= (v306 & 0x7FFFFFFF) && !(v306 >> 31))
                    {
                      if ((v305 & 7) != 0)
                        v307 = v305 & 7;
                      else
                        v307 = 8;
                      v308 = v305 - v307 + v297;
                      v309 = v304 - a6 + v307;
                      v310 = 2 * v304;
                      v311 = (int64x2_t *)((char *)v295 + 8 * v304);
                      do
                      {
                        v312 = (const float *)&v66[v310 & 0xFFFFFFFE];
                        v313 = (unsigned __int128)vld2q_f32(v312);
                        v314 = (const float *)&v66[((_DWORD)v310 + 8) & 0xFFFFFFFE];
                        v315 = (unsigned __int128)vld2q_f32(v314);
                        v316 = vaddw_high_s32(v311[-1], (int32x4_t)v313);
                        v317 = vaddw_s32(*v311, *(int32x2_t *)&v315);
                        v318 = vaddw_high_s32(v311[1], (int32x4_t)v315);
                        v311[-2] = vaddw_s32(v311[-2], *(int32x2_t *)&v313);
                        v311[-1] = v316;
                        *v311 = v317;
                        v311[1] = v318;
                        v311 += 4;
                        v310 += 16;
                        v309 += 8;
                      }
                      while (v309);
                      v304 = v308;
                    }
                  }
                  v319 = a6 - v304;
                  v320 = 2 * v304;
                  v321 = &v64->i64[v304];
                  do
                  {
                    *v321++ += v66[v320 & 0xFFFFFFFE];
                    v320 += 2;
                    --v319;
                  }
                  while (v319);
                }
                ++v296;
              }
              while (v296 != (int)v62);
            }
          }
          else if ((int)v62 >= 1)
          {
            v322 = 0;
            do
            {
              v323 = 0;
              v324 = 0;
              v325 = v66;
              v326 = v67;
              while (1)
              {
                v327 = (unsigned __int8 *)v64->i64[v324];
                v328 = v70[v323 & 0xFFFFFF00 | (unint64_t)*v327];
                if (v328 >> 62)
                  break;
                v326 = (_DWORD *)((char *)v326 + v328);
                v329 = *v325;
                v325 += 2;
                v64->i64[v324++] = (uint64_t)&v327[v329];
                v323 += 256;
                if (a6 == v324)
                  goto LABEL_316;
              }
              if ((_DWORD)v324 == a6)
              {
LABEL_316:
                ++*v326;
                goto LABEL_317;
              }
              if ((int)v324 < (int)a6)
              {
                v330 = v324;
                v331 = a6 - (unint64_t)v324;
                if (v331 > 8)
                {
                  v332 = ~(unint64_t)v324 + a6;
                  if ((~(_DWORD)v324 & 0x7FFFFFFFu) >= (v332 & 0x7FFFFFFF) && !(v332 >> 31))
                  {
                    if ((v331 & 7) != 0)
                      v333 = v331 & 7;
                    else
                      v333 = 8;
                    v334 = v331 - v333 + v324;
                    v335 = v330 - a6 + v333;
                    v336 = 2 * v330;
                    v337 = (int64x2_t *)((char *)v295 + 8 * v330);
                    do
                    {
                      v338 = (const float *)&v66[v336 & 0xFFFFFFFE];
                      v339 = (unsigned __int128)vld2q_f32(v338);
                      v340 = (const float *)&v66[((_DWORD)v336 + 8) & 0xFFFFFFFE];
                      v341 = (unsigned __int128)vld2q_f32(v340);
                      v342 = vaddw_high_s32(v337[-1], (int32x4_t)v339);
                      v343 = vaddw_s32(*v337, *(int32x2_t *)&v341);
                      v344 = vaddw_high_s32(v337[1], (int32x4_t)v341);
                      v337[-2] = vaddw_s32(v337[-2], *(int32x2_t *)&v339);
                      v337[-1] = v342;
                      *v337 = v343;
                      v337[1] = v344;
                      v337 += 4;
                      v336 += 16;
                      v335 += 8;
                    }
                    while (v335);
                    v330 = v334;
                  }
                }
                v345 = a6 - v330;
                v346 = 2 * v330;
                v347 = &v64->i64[v330];
                do
                {
                  *v347++ += v66[v346 & 0xFFFFFFFE];
                  v346 += 2;
                  --v345;
                }
                while (v345);
              }
LABEL_317:
              ++v322;
            }
            while (v322 != (_DWORD)v62);
          }
          v348 = v294;
          v349 = v64 + 2;
          v350 = (const float *)(v66 + 9);
          if (a6 >= 9)
          {
            do
            {
              v352 = v350 - 8;
              v353 = (unsigned __int128)vld2q_f32(v352);
              v354 = (unsigned __int128)vld2q_f32(v350);
              v355 = vaddw_s32(v349[-2], *(int32x2_t *)&v353);
              v356 = vaddw_high_s32(v349[-1], (int32x4_t)v353);
              v357 = vaddw_s32(*v349, *(int32x2_t *)&v354);
              v358 = vaddw_high_s32(v349[1], (int32x4_t)v354);
              v349[-2] = v355;
              v349[-1] = v356;
              *v349 = v357;
              v349[1] = v358;
              v349 += 4;
              v350 += 16;
              v348 -= 8;
            }
            while (v348);
            v351 = v294;
          }
          else
          {
            v351 = 0;
          }
          v359 = a6 - v351;
          v360 = 2 * v351;
          v361 = &v64->i64[v351];
          v362 = &v66[v360 + 1];
          do
          {
            v363 = *v362;
            v362 += 2;
            *v361++ += v363;
            --v359;
          }
          while (v359);
          v69 += v600;
          --v63;
        }
        while (v63);
      }
      break;
  }
  if (v70)
    goto LABEL_344;
LABEL_541:
  LODWORD(v639) = 33619968;
  *((_QWORD *)&v639 + 1) = &v621;
  *(_QWORD *)&v640 = 0;
  sub_1002044A8((unsigned int *)&v613, (uint64_t)&v639, 5, 1.0, 0.0);
  if (v604)
  {
    v605 = v604;
    operator delete(v604);
  }
  if (v607)
  {
    v608 = v607;
    operator delete(v607);
  }
  if (v610)
  {
    v611 = v610;
    operator delete(v610);
  }
  if (v617)
  {
    v579 = (unsigned int *)(v617 + 20);
    do
    {
      v580 = __ldaxr(v579);
      v581 = v580 - 1;
    }
    while (__stlxr(v581, v579));
    if (!v581)
      sub_100256C90((uint64_t)&v613);
  }
  v617 = 0;
  v614 = 0u;
  v615 = 0u;
  if (SDWORD1(v613) >= 1)
  {
    v582 = 0;
    v583 = v618;
    do
      v583[v582++] = 0;
    while (v582 < SDWORD1(v613));
  }
  if (v619 != v620)
    j__free(v619);
  if (v625)
  {
    v584 = (unsigned int *)(v625 + 20);
    do
    {
      v585 = __ldaxr(v584);
      v586 = v585 - 1;
    }
    while (__stlxr(v586, v584));
    if (!v586)
      sub_100256C90((uint64_t)&v621);
  }
  v625 = 0;
  v622 = 0u;
  v623 = 0u;
  if (SDWORD1(v621) >= 1)
  {
    v587 = 0;
    v588 = v626;
    do
      v588[v587++] = 0;
    while (v587 < SDWORD1(v621));
  }
  if (v627 != v628)
    j__free(v627);
  if (v633)
  {
    v589 = (unsigned int *)(v633 + 20);
    do
    {
      v590 = __ldaxr(v589);
      v591 = v590 - 1;
    }
    while (__stlxr(v591, v589));
    if (!v591)
      sub_100256C90((uint64_t)&v629);
  }
  v633 = 0;
  v630 = 0u;
  v631 = 0u;
  if (SDWORD1(v629) >= 1)
  {
    v592 = 0;
    v593 = v634;
    do
      *(_DWORD *)&v593[4 * v592++] = 0;
    while (v592 < SDWORD1(v629));
  }
  if (v635 != v636)
    j__free(v635);
  if (v638)
    sub_1002989D0(v637);
}

void sub_10031345C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_100008C88(a1);
  _Unwind_Resume(a1);
}

void sub_1003135F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_1001D40CC((uint64_t)&a65);
  _Unwind_Resume(a1);
}

float64_t sub_100313608(int32x2_t **a1, int a2, uint64_t a3, int *a4, int a5, int *a6, float **a7, char a8, _QWORD *a9, uint64_t *a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v16;
  _QWORD *v17;
  float64x2_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int *v27;
  uint64_t v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int *v38;
  BOOL v39;
  unsigned int v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t i;
  uint64_t v62;
  uint64_t j;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  int v69;
  double v70;
  double *v71;
  float *v72;
  float v73;
  _DWORD *v74;
  double *v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  int64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  double *v84;
  double *v85;
  double *v86;
  double *v87;
  int *v88;
  _QWORD *v89;
  uint64_t v90;
  int v91;
  uint64_t v94;
  int v95;
  int *v96;
  int v98;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  float64x2x2_t v104;
  float64x2x2_t v105;
  float64x2x2_t v106;

  if (!a3 && a2 != a5)
  {
    v102 = 0;
    v103 = 0;
    qmemcpy((void *)sub_10029430C(&v102, 32), "channels != 0 || nimages == dims", 32);
    sub_100294B74(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 128);
  }
  v16 = a10;
  v17 = a9;
  *(int32x2_t *)&v18.f64[0] = vrev64_s32(*a1[8]);
  *(float64_t *)a11 = v18.f64[0];
  v19 = *(_DWORD *)a1;
  v94 = a5;
  v20 = a5 + 1;
  v21 = (uint64_t)(v17[1] - *v17) >> 3;
  if (v20 <= v21)
  {
    if (v20 < v21)
      a9[1] = *a9 + 8 * v20;
  }
  else
  {
    sub_1002F38D4((void **)a9, v20 - v21);
  }
  v22 = 2 * (int)v20;
  v23 = (a10[1] - *a10) >> 2;
  v96 = a6;
  if (v22 <= v23)
  {
    if (v22 < v23)
      a10[1] = *a10 + 4 * v22;
  }
  else
  {
    sub_100223D9C((uint64_t)a10, v22 - v23);
  }
  v98 = v19 & 7;
  v95 = a5;
  if (a5 < 1)
  {
    v41 = a4;
    v42 = *((_QWORD *)a4 + 2);
    if (!v42)
      goto LABEL_56;
    v26 = 1;
    v43 = a4[1];
    if ((int)v43 < 3)
    {
LABEL_36:
      v44 = v41[3] * (uint64_t)v41[2];
      goto LABEL_44;
    }
  }
  else
  {
    v24 = 0;
    v100 = a5;
    v25 = (0x88442211uLL >> (4 * (v19 & 7u))) & 0xF;
    LOBYTE(v26) = 1;
    do
    {
      if (a3)
      {
        v31 = *(_DWORD *)(a3 + 4 * v24);
        if (v31 < 0)
        {
          v102 = 0;
          v103 = 0;
          v32 = sub_10029430C(&v102, 6);
          *(_DWORD *)v32 = 1027481699;
          *(_WORD *)(v32 + 4) = 12320;
          sub_100294B74(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 148);
        }
        if (a2 < 1)
        {
LABEL_26:
          v102 = 0;
          v103 = 0;
          v37 = sub_10029430C(&v102, 11);
          *(_DWORD *)(v37 + 7) = 1936025441;
          *(_QWORD *)v37 = *(_QWORD *)"j < nimages";
          sub_100294B74(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 152);
        }
        v33 = 0;
        v34 = (unsigned int *)a1;
        while (1)
        {
          v35 = *v34;
          v34 += 24;
          v36 = (v35 >> 3) & 0x1FF;
          if (v31 <= v36)
            break;
          v31 += ~v36;
          if (a2 == ++v33)
            goto LABEL_26;
        }
      }
      else
      {
        if (((uint64_t)a1[12 * v24] & 0xFF8) != 0)
        {
          v102 = 0;
          v103 = 0;
          qmemcpy((void *)sub_10029430C(&v102, 25), "images[j].channels() == 1", 25);
          sub_100294B74(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 143);
        }
        v31 = 0;
        LODWORD(v33) = v24;
      }
      v38 = (int *)&a1[12 * v33];
      v39 = *(_DWORD *)(*((_QWORD *)v38 + 8) + 4) == *(_DWORD *)a11 && **((_DWORD **)v38 + 8) == *(_DWORD *)(a11 + 4);
      if (!v39 || (v40 = *v38, (*v38 & 7) != v98))
      {
        v102 = 0;
        v103 = 0;
        qmemcpy((void *)sub_10029430C(&v102, 56), "images[j].size() == imsize && images[j].depth() == depth", 56);
        sub_100294B74(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 155);
      }
      v26 &= (*v38 & 0x4000u) >> 14;
      v27 = (int *)&a1[12 * v33];
      v28 = *((_QWORD *)v27 + 2) + v31 * (int)v25;
      v17 = a9;
      v16 = a10;
      *(_QWORD *)(*a9 + 8 * v24) = v28;
      v29 = ((v40 >> 3) & 0x1FF) + 1;
      v30 = (int *)(*a10 + 8 * v24);
      *v30 = v29;
      v30[1] = *((_QWORD *)v27 + 10) / v25 - *(_DWORD *)a11 * v29;
      ++v24;
    }
    while (v24 != v100);
    v41 = a4;
    v42 = *((_QWORD *)a4 + 2);
    if (!v42)
    {
      if ((v26 & 1) == 0)
        goto LABEL_57;
      goto LABEL_56;
    }
    v43 = a4[1];
    if ((int)v43 < 3)
      goto LABEL_36;
  }
  v45 = *((_QWORD *)v41 + 8);
  v46 = (int *)(v45 + 4);
  v47 = 1;
  v48 = v43 & 0xFFFFFFFE;
  v49 = 1;
  do
  {
    v47 *= *(v46 - 1);
    v49 *= *v46;
    v46 += 2;
    v48 -= 2;
  }
  while (v48);
  v44 = v49 * v47;
  v50 = v43 - (v43 & 0xFFFFFFFE);
  if (v50)
  {
    v51 = (int *)(v45 + ((4 * v43) & 0x3FFFFFFF8));
    do
    {
      v52 = *v51++;
      v44 *= v52;
      --v50;
    }
    while (v50);
  }
LABEL_44:
  if (!(_DWORD)v43 || !v44)
  {
    if (!v26)
      goto LABEL_57;
    goto LABEL_56;
  }
  v53 = *(_DWORD *)(*((_QWORD *)v41 + 8) + 4) == *(_DWORD *)a11 && **((_DWORD **)v41 + 8) == *(_DWORD *)(a11 + 4);
  if (!v53 || (v54 = *v41, (*v41 & 0xFF8) != 0))
  {
    v102 = 0;
    v103 = 0;
    qmemcpy((void *)sub_10029430C(&v102, 45), "mask.size() == imsize && mask.channels() == 1", 45);
    sub_100294B74(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 165);
  }
  v55 = 8 * v94;
  *(_QWORD *)(*v17 + v55) = v42;
  v56 = *v16;
  *(_DWORD *)(v56 + v55) = 1;
  *(_DWORD *)(v56 + 4 * (int)((2 * v94) | 1)) = *((_QWORD *)v41 + 10) / ((0x88442211uLL >> (4 * (*v41 & 7u))) & 0xF);
  if ((v26 & ((unsigned __int16)(v54 & 0x4000) >> 14) & 1) != 0)
  {
LABEL_56:
    *(_DWORD *)a11 *= *(_DWORD *)(a11 + 4);
    *(_DWORD *)(a11 + 4) = 1;
  }
LABEL_57:
  if (a7)
  {
    v57 = v96;
    if ((a8 & 1) != 0)
    {
      v58 = (a12[1] - *a12) >> 3;
      if (2 * v94 <= v58)
      {
        if (2 * v94 < v58)
          a12[1] = *a12 + 16 * v94;
      }
      else
      {
        sub_100315378((uint64_t)a12, 2 * v94 - v58);
      }
      if (v95 >= 1)
      {
        v67 = 0;
        do
        {
          v72 = *a7;
          if (!*a7 || (v73 = v72[1], *v72 >= v73))
          {
            v102 = 0;
            v103 = 0;
            qmemcpy((void *)sub_10029430C(&v102, 40), "ranges[i] && ranges[i][0] < ranges[i][1]", 40);
            sub_100294B74(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 196);
          }
          v68 = *v72;
          v69 = *v57++;
          v70 = (double)v69 / (v73 - v68);
          v71 = (double *)(*a12 + v67);
          v18.f64[0] = -(v70 * v68);
          *v71 = v70;
          v71[1] = v18.f64[0];
          ++a7;
          v67 += 16;
        }
        while (16 * v95 != v67);
      }
    }
    else if (v95 >= 1)
    {
      for (i = 0; i != v95; ++i)
      {
        v62 = v96[i];
        if ((_DWORD)v62)
        {
          for (j = 0; j != v62; ++j)
          {
            v64 = (uint64_t)&a7[i][j];
            LODWORD(v18.f64[0]) = *(_DWORD *)v64;
            if (*(float *)v64 >= *(float *)(v64 + 4))
            {
              v102 = 0;
              v103 = 0;
              qmemcpy((void *)sub_10029430C(&v102, 29), "ranges[i][k] < ranges[i][k+1]", 29);
              sub_100294B74(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 209);
            }
          }
        }
      }
    }
  }
  else
  {
    if (v98)
    {
      v102 = 0;
      v103 = 0;
      v59 = sub_10029430C(&v102, 10);
      *(_WORD *)(v59 + 8) = 12320;
      *(_QWORD *)v59 = *(_QWORD *)"depth == 0";
      sub_100294B74(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 182);
    }
    v60 = (a12[1] - *a12) >> 3;
    if (2 * v94 <= v60)
    {
      if (2 * v94 < v60)
        a12[1] = *a12 + 16 * v94;
    }
    else
    {
      sub_100315378((uint64_t)a12, 2 * v94 - v60);
    }
    if (v95 >= 1)
    {
      v65 = *a12;
      if (v95 >= 8)
      {
        v66 = v95 & 0xFFFFFFF8;
        v74 = v96 + 4;
        v75 = (double *)(v65 + 64);
        v18 = (float64x2_t)vdupq_n_s64(0x3F70000000000000uLL);
        v76 = 0uLL;
        v77 = v66;
        do
        {
          v78 = *((_OWORD *)v74 - 1);
          v79.i64[0] = (int)v78;
          v79.i64[1] = SDWORD1(v78);
          v80 = vcvtq_f64_s64(v79);
          v79.i64[0] = SDWORD2(v78);
          v79.i64[1] = SHIDWORD(v78);
          v81 = vcvtq_f64_s64(v79);
          v79.i64[0] = (int)*(_OWORD *)v74;
          v79.i64[1] = (int)HIDWORD(*(_QWORD *)v74);
          v82 = vcvtq_f64_s64(v79);
          v79.i64[0] = (int)*((_QWORD *)v74 + 1);
          v79.i64[1] = (int)HIDWORD(*(_OWORD *)v74);
          v83 = vmulq_f64(v81, v18);
          v106.val[0] = vmulq_f64(v80, v18);
          v106.val[1] = 0uLL;
          v105.val[0] = vmulq_f64(v82, v18);
          v84 = v75 - 8;
          vst2q_f64(v84, v106);
          v105.val[1] = 0uLL;
          v85 = v75 - 4;
          vst2q_f64(v85, *(float64x2x2_t *)(&v76 - 1));
          v86 = v75 + 16;
          vst2q_f64(v75, v105);
          v87 = v75 + 4;
          v104.val[0] = vmulq_f64(vcvtq_f64_s64(v79), v18);
          v104.val[1] = 0uLL;
          vst2q_f64(v87, v104);
          v74 += 8;
          v75 = v86;
          v77 -= 8;
        }
        while (v77);
        if (v66 == v95)
          return v18.f64[0];
      }
      else
      {
        v66 = 0;
      }
      v88 = &v96[v66];
      v89 = (_QWORD *)(v65 + 16 * v66 + 8);
      v90 = v95 - v66;
      do
      {
        v91 = *v88++;
        v18.f64[0] = (double)v91 * 0.00390625;
        *(v89 - 1) = *(_QWORD *)&v18.f64[0];
        *v89 = 0;
        v89 += 2;
        --v90;
      }
      while (v90);
    }
  }
  return v18.f64[0];
}

void sub_100313ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100313FA8(unsigned int a1, int *a2, int a3, _DWORD **a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if (a1 >= 0x21)
  {
    v16 = 0;
    v17 = 0;
    qmemcpy((void *)sub_10029430C(&v16, 36), "Number of dimensions is out of range", 36);
    sub_100294B74(-19, &v16, "cvCreateHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 2844);
  }
  if (!a2)
  {
    v16 = 0;
    v17 = 0;
    v10 = sub_10029430C(&v16, 20);
    *(_DWORD *)(v10 + 16) = 1919251566;
    *(_OWORD *)v10 = *(_OWORD *)"Null <sizes> pointer";
    sub_100294B74(-9, &v16, "cvCreateHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 2847);
  }
  v11 = sub_1001D450C(0x238uLL);
  v12 = v11;
  if (a5)
    v13 = 1111819264;
  else
    v13 = 1111818240;
  *(_DWORD *)v11 = v13 & 0xFFFFFFFE | a3 & 1;
  *(_QWORD *)(v11 + 272) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  if (a3 == 1)
  {
    *(_QWORD *)(v11 + 8) = sub_1001F57B8(a1, a2, 5u);
  }
  else
  {
    if (a3)
    {
      v16 = 0;
      v17 = 0;
      qmemcpy((void *)sub_10029430C(&v16, 22), "Invalid histogram type", 22);
      sub_100294B74(-5, &v16, "cvCreateHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 2863);
    }
    v14 = sub_1001F427C(v11 + 280, a1, (uint64_t)a2, 5u, 0);
    *(_QWORD *)(v12 + 8) = v14;
    sub_1001F396C(v14);
  }
  if (a4)
    sub_1003141CC(v12, a4, a5);
  return v12;
}

void sub_100314184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003141CC(uint64_t a1, _DWORD **a2, int a3)
{
  _DWORD **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int32x4_t *v14;
  int32x4_t v15;
  uint64_t v16;
  int32x4_t v17;
  int *v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  float v29;
  float v31;
  uint64_t v32;
  uint64_t v33;
  int __dst[4];
  uint64_t v35;

  v4 = a2;
  if (!a2)
  {
    v32 = 0;
    v33 = 0;
    v6 = sub_10029430C(&v32, 19);
    *(_DWORD *)(v6 + 15) = 1919251566;
    *(_OWORD *)v6 = *(_OWORD *)"NULL ranges pointer";
    sub_100294B74(-27, &v32, "cvSetHistBinRanges", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 3363);
  }
  if (!a1 || *(_WORD *)(a1 + 2) != 16965 || (v7 = *(_QWORD *)(a1 + 8)) == 0)
  {
    v32 = 0;
    v33 = 0;
    qmemcpy((void *)sub_10029430C(&v32, 24), "Invalid histogram header", 24);
    sub_100294B74(-5, &v32, "cvSetHistBinRanges", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 3366);
  }
  result = sub_1001F65B4(v7, __dst);
  v9 = result;
  if ((int)result >= 1)
  {
    v10 = result;
    if (result >= 8)
    {
      v11 = result & 0x7FFFFFF8;
      v14 = (int32x4_t *)&v35;
      v15 = 0uLL;
      v16 = result & 0xFFFFFFF8;
      v17 = 0uLL;
      do
      {
        v15 = vsubq_s32(v14[-1], (int32x4_t)vmvnq_s8((int8x16_t)v15));
        v17 = vsubq_s32(*v14, (int32x4_t)vmvnq_s8((int8x16_t)v17));
        v14 += 2;
        v16 -= 8;
      }
      while (v16);
      v12 = vaddvq_s32(vaddq_s32(v17, v15));
      if (v11 == result)
      {
LABEL_17:
        if (a3)
        {
          v21 = (_DWORD *)(a1 + 20);
          do
          {
            v22 = *v4;
            if (!*v4)
            {
              v32 = 0;
              v33 = 0;
              qmemcpy((void *)sub_10029430C(&v32, 32), "One of <ranges> elements is NULL", 32);
              sub_100294B74(-27, &v32, "cvSetHistBinRanges", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 3377);
            }
            *(v21 - 1) = *v22;
            *v21 = v22[1];
            v21 += 2;
            ++v4;
            --v10;
          }
          while (v10);
          goto LABEL_11;
        }
        v23 = 4 * v12;
        result = *(_QWORD *)(a1 + 272);
        v24 = v9;
        if (result)
        {
LABEL_23:
          if (v9 < 1)
            goto LABEL_37;
          goto LABEL_27;
        }
LABEL_26:
        result = sub_1001D450C(v23 + 8 * v24);
        *(_QWORD *)(a1 + 272) = result;
        if (v9 < 1)
        {
LABEL_37:
          v13 = *(_DWORD *)a1 & 0xFFFFF3FF | 0x800;
          goto LABEL_38;
        }
LABEL_27:
        v25 = 0;
        v26 = result + 8 * v24;
        do
        {
          if (!v4[v25])
          {
            v32 = 0;
            v33 = 0;
            qmemcpy((void *)sub_10029430C(&v32, 32), "One of <ranges> elements is NULL", 32);
            sub_100294B74(-27, &v32, "cvSetHistBinRanges", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 3401);
          }
          v27 = __dst[v25];
          if ((v27 & 0x80000000) == 0)
          {
            v28 = 0;
            v29 = -3.4028e38;
            do
            {
              v31 = v29;
              v29 = *(float *)&v4[v25][v28];
              if (v29 <= v31)
              {
                v32 = 0;
                v33 = 0;
                qmemcpy((void *)sub_10029430C(&v32, 39), "Bin ranges should go in ascenting order", 39);
                sub_100294B74(-211, &v32, "cvSetHistBinRanges", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 3407);
              }
              *(float *)(v26 + 4 * v28) = v29;
            }
            while (v28++ < v27);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v25) = v26;
          v26 += 4 * (v27 + 1);
          ++v25;
        }
        while (v25 != v9);
        goto LABEL_37;
      }
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v18 = &__dst[v11];
    v19 = result - v11;
    do
    {
      v20 = *v18++;
      v12 += v20 + 1;
      --v19;
    }
    while (v19);
    goto LABEL_17;
  }
  if (!a3)
  {
    v23 = 0;
    result = *(_QWORD *)(a1 + 272);
    v24 = v9;
    if (result)
      goto LABEL_23;
    goto LABEL_26;
  }
LABEL_11:
  v13 = *(_DWORD *)a1 | 0xC00;
LABEL_38:
  *(_DWORD *)a1 = v13;
  return result;
}

void sub_1003145A8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100314638(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
  {
    v4 = 0;
    v5 = 0;
    sub_100294B74(-27, &v4, "cvReleaseHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 2903);
  }
  v1 = *a1;
  if (*a1)
  {
    if (*(_WORD *)(v1 + 2) != 16965 || !*(_QWORD *)(v1 + 8))
    {
      v4 = 0;
      v5 = 0;
      qmemcpy((void *)sub_10029430C(&v4, 24), "Invalid histogram header", 24);
      sub_100294B74(-5, &v4, "cvReleaseHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 2910);
    }
    *a1 = 0;
    v2 = *(_QWORD *)(v1 + 8);
    if (v2 && *(_WORD *)(v2 + 2) == 16964)
    {
      sub_1001F5AC4((uint64_t *)(v1 + 8));
      v3 = *(void **)(v1 + 272);
      if (!v3)
        goto LABEL_13;
    }
    else
    {
      sub_1001F5E08(v2);
      *(_QWORD *)(v1 + 8) = 0;
      v3 = *(void **)(v1 + 272);
      if (!v3)
      {
LABEL_13:
        j__free((void *)v1);
        return;
      }
    }
    j__free(v3);
    *(_QWORD *)(v1 + 272) = 0;
    goto LABEL_13;
  }
}

void sub_100314754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_100314784(unint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  signed int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD **v11;
  uint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t *v20;
  uint64_t v21;
  _OWORD v22[16];
  int __dst[32];

  if (!a2)
  {
    v22[0] = 0uLL;
    qmemcpy((void *)sub_10029430C(v22, 34), "Destination double pointer is NULL", 34);
    sub_100294B74(-27, (uint64_t *)v22, "cvCopyHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 3293);
  }
  v4 = *a2;
  if (!a1
    || *(_WORD *)(a1 + 2) != 16965
    || (v5 = *(_QWORD *)(a1 + 8)) == 0
    || v4 && (*(_WORD *)(v4 + 2) != 16965 || !*(_QWORD *)(v4 + 8)))
  {
    v22[0] = 0uLL;
    qmemcpy((void *)sub_10029430C(v22, 27), "Invalid histogram header[s]", 27);
    sub_100294B74(-5, (uint64_t *)v22, "cvCopyHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 3298);
  }
  v6 = *(unsigned __int16 *)(v5 + 2) == 16964;
  v7 = sub_1001F65B4(v5, __dst);
  if (!v4)
    goto LABEL_23;
  v8 = *(_QWORD *)(v4 + 8);
  if (v8)
  {
    if (v6 != (*(_WORD *)(v8 + 2) == 16964))
      goto LABEL_23;
  }
  else if (v6)
  {
LABEL_23:
    sub_100314638(a2);
    v4 = sub_100313FA8(v7, __dst, v6, 0, 0);
    *a2 = v4;
    goto LABEL_24;
  }
  if (v7 != sub_1001F65B4(v8, (int *)v22))
    goto LABEL_23;
  if (v7 < 1)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    v9 = 0;
    while (__dst[v9] == *((_DWORD *)v22 + v9))
    {
      if (v7 == ++v9)
        goto LABEL_24;
    }
  }
  if ((_DWORD)v9 != v7)
    goto LABEL_23;
LABEL_24:
  v10 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x800) != 0)
  {
    memset(v22, 0, sizeof(v22));
    if ((v10 & 0x400) == 0)
    {
      v11 = *(_DWORD ***)(a1 + 272);
LABEL_36:
      sub_1003141CC(v4, v11, (v10 >> 10) & 1);
      goto LABEL_37;
    }
    if (v7 >= 1)
    {
      if (v7 < 4)
      {
        v12 = 0;
LABEL_34:
        v21 = a1 + 8 * v12 + 16;
        do
        {
          v11 = (_DWORD **)v22;
          *((_QWORD *)v22 + v12++) = v21;
          v21 += 8;
        }
        while (v7 != v12);
        goto LABEL_36;
      }
      v13 = 0;
      v12 = v7 & 0xFFFFFFFC;
      v14 = (int64x2_t)xmmword_1003BA9E0;
      v15 = vdupq_n_s64(a1);
      v16 = vdupq_n_s64(0x10uLL);
      v17 = vdupq_n_s64(0x20uLL);
      v18 = vdupq_n_s64(4uLL);
      do
      {
        v19 = vaddq_s64(v15, vshlq_n_s64(v14, 3uLL));
        v20 = (int64x2_t *)&v22[v13 / 0x10];
        *v20 = vaddq_s64(v19, v16);
        v20[1] = vaddq_s64(v19, v17);
        v14 = vaddq_s64(v14, v18);
        v13 += 32;
      }
      while (((8 * v7) & 0x7FFFFFFE0) != v13);
      if (v12 != v7)
        goto LABEL_34;
    }
    v11 = (_DWORD **)v22;
    goto LABEL_36;
  }
LABEL_37:
  sub_10021D4FC(*(_QWORD *)(a1 + 8), *(_QWORD *)(v4 + 8), 0);
}

void sub_100314AA4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_100314AEC(_BOOL8 result)
{
  if (result)
    return *(_WORD *)(result + 2) == 16965 && *(_QWORD *)(result + 8) != 0;
  return result;
}

uint64_t sub_100314B18(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  _DWORD *v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int32x4_t *v28;
  int32x4_t v29;
  uint64_t v30;
  int32x4_t v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  void *v42[2];
  uint64_t v43[8];
  uint64_t __dst[2];
  uint64_t v45;

  v4 = sub_1001D450C(0x238uLL);
  v5 = sub_1002707FC((uint64_t)a1, a2, "type");
  if (v5)
  {
    if ((*(_DWORD *)v5 & 7) == 2)
    {
      v6 = (uint64_t)rint(*(double *)(v5 + 16));
      v7 = sub_1002707FC((uint64_t)a1, a2, "is_uniform");
      if (!v7)
        goto LABEL_14;
    }
    else if ((*(_DWORD *)v5 & 7) == 1)
    {
      LODWORD(v6) = *(_DWORD *)(v5 + 16);
      v7 = sub_1002707FC((uint64_t)a1, a2, "is_uniform");
      if (!v7)
        goto LABEL_14;
    }
    else
    {
      LODWORD(v6) = 0x7FFFFFFF;
      v7 = sub_1002707FC((uint64_t)a1, a2, "is_uniform");
      if (!v7)
        goto LABEL_14;
    }
LABEL_9:
    if ((*(_DWORD *)v7 & 7) == 2)
    {
      v8 = (uint64_t)rint(*(double *)(v7 + 16));
      v9 = sub_1002707FC((uint64_t)a1, a2, "have_ranges");
      if (v9)
        goto LABEL_17;
    }
    else if ((*(_DWORD *)v7 & 7) == 1)
    {
      LODWORD(v8) = *(_DWORD *)(v7 + 16);
      v9 = sub_1002707FC((uint64_t)a1, a2, "have_ranges");
      if (v9)
        goto LABEL_17;
    }
    else
    {
      LODWORD(v8) = 0x7FFFFFFF;
      v9 = sub_1002707FC((uint64_t)a1, a2, "have_ranges");
      if (v9)
        goto LABEL_17;
    }
LABEL_21:
    LODWORD(v10) = 0;
    goto LABEL_24;
  }
  LODWORD(v6) = 0;
  v7 = sub_1002707FC((uint64_t)a1, a2, "is_uniform");
  if (v7)
    goto LABEL_9;
LABEL_14:
  LODWORD(v8) = 0;
  v9 = sub_1002707FC((uint64_t)a1, a2, "have_ranges");
  if (!v9)
    goto LABEL_21;
LABEL_17:
  if ((*(_DWORD *)v9 & 7) == 2)
  {
    v10 = (uint64_t)rint(*(double *)(v9 + 16));
  }
  else if ((*(_DWORD *)v9 & 7) == 1)
  {
    LODWORD(v10) = *(_DWORD *)(v9 + 16);
  }
  else
  {
    LODWORD(v10) = 0x7FFFFFFF;
  }
LABEL_24:
  *(_DWORD *)v4 = (((_DWORD)v10 != 0) << 11) | (((_DWORD)v8 != 0) << 10) | v6 | 0x42450000;
  if (!(_DWORD)v6)
  {
    v13 = sub_1002707FC((uint64_t)a1, a2, "mat");
    v14 = (_DWORD *)sub_10027DC48(a1, v13, 0);
    v15 = v14;
    v42[0] = v14;
    if (!v14 || *((_WORD *)v14 + 1) != 16963 || !*((_QWORD *)v14 + 3))
    {
      v43[0] = 0;
      v43[1] = 0;
      *(_OWORD *)sub_10029430C(v43, 16) = *(_OWORD *)"Expected CvMatND";
      sub_100294B74(-2, v43, "icvReadHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 4008);
    }
    LODWORD(v16) = v14[1];
    if ((int)v16 >= 1)
    {
      v17 = 0;
      v18 = v14 + 8;
      do
      {
        v19 = *v18;
        v18 += 2;
        *((_DWORD *)__dst + v17++) = v19;
        v16 = (int)v14[1];
      }
      while (v17 < v16);
    }
    sub_1001F427C(v4 + 280, v16, (uint64_t)__dst, *v14, *((_QWORD *)v14 + 3));
    *(_QWORD *)(v4 + 8) = v4 + 280;
    v20 = (_DWORD *)*((_QWORD *)v15 + 1);
    *(_QWORD *)(v4 + 288) = v20;
    v21 = *((unsigned __int16 *)v15 + 1) << 16;
    if (v21 == 1111687168)
    {
      if (!*((_QWORD *)v15 + 3))
        goto LABEL_45;
      v20 = (_DWORD *)*((_QWORD *)v15 + 1);
      if (!v20)
        goto LABEL_45;
    }
    else if (v21 != 1111621632 || (int)v15[9] < 1 || (int)v15[8] < 1 || !*((_QWORD *)v15 + 3) || !v20)
    {
      goto LABEL_45;
    }
    ++*v20;
LABEL_45:
    sub_1001F4030(v42);
    goto LABEL_46;
  }
  v11 = sub_1002707FC((uint64_t)a1, a2, "bins");
  v12 = sub_10027DC48(a1, v11, 0);
  *(_QWORD *)(v4 + 8) = v12;
  if (!v12 || *(_WORD *)(v12 + 2) != 16964)
  {
    __dst[0] = 0;
    __dst[1] = 0;
    qmemcpy((void *)sub_10029430C(__dst, 22), "Unknown Histogram type", 22);
    sub_100294B74(-2, __dst, "icvReadHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 4029);
  }
LABEL_46:
  if (!(_DWORD)v10)
    return v4;
  v22 = sub_1001F65B4(*(_QWORD *)(v4 + 8), (int *)__dst);
  v23 = v22;
  v24 = v22;
  if ((int)v22 >= 1)
  {
    if (v22 >= 8)
    {
      v25 = v22 & 0xFFFFFFF8;
      v28 = (int32x4_t *)&v45;
      v29 = 0uLL;
      v30 = v25;
      v31 = 0uLL;
      do
      {
        v29 = vsubq_s32(v28[-1], (int32x4_t)vmvnq_s8((int8x16_t)v29));
        v31 = vsubq_s32(*v28, (int32x4_t)vmvnq_s8((int8x16_t)v31));
        v28 += 2;
        v30 -= 8;
      }
      while (v30);
      v26 = vaddvq_s32(vaddq_s32(v31, v29));
      if (v25 == v22)
        goto LABEL_56;
    }
    else
    {
      v25 = 0;
      v26 = 0;
    }
    v32 = (int *)__dst + v25;
    v33 = v22 - v25;
    do
    {
      v34 = *v32++;
      v26 += v34 + 1;
      --v33;
    }
    while (v33);
LABEL_56:
    v27 = 4 * v26;
    goto LABEL_57;
  }
  v27 = 0;
LABEL_57:
  v35 = sub_1002707FC((uint64_t)a1, a2, "thresh");
  if (!v35)
  {
    v42[0] = 0;
    v42[1] = 0;
    qmemcpy((void *)sub_10029430C(v42, 24), "'thresh' node is missing", 24);
    sub_100294B74(-2, (uint64_t *)v42, "icvReadHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 4046);
  }
  sub_10027856C(a1, v35, (uint64_t)v43);
  if ((_DWORD)v8)
  {
    if (v23 >= 1)
    {
      v36 = v4 + 16;
      do
      {
        sub_100278784(a1, v43, 2, v36, "f");
        v36 += 8;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(v4 + 272) = 0;
  }
  else
  {
    v37 = sub_1001D450C(v27 + 8 * v23);
    *(_QWORD *)(v4 + 272) = v37;
    if (v23 > 0)
    {
      v38 = 0;
      v39 = v37 + 8 * v23;
      do
      {
        *(_QWORD *)(*(_QWORD *)(v4 + 272) + 8 * v38) = v39;
        v40 = (int *)__dst + v38;
        sub_100278784(a1, v43, *v40 + 1, v39, "f");
        v39 += 4 * *v40 + 4;
        ++v38;
      }
      while (v24 != v38);
    }
  }
  return v4;
}

void sub_100315110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100315170(_DWORD *a1, const char *a2, int *a3)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int __dst[32];

  sub_100275840((uint64_t)a1, a2, 6, (uint64_t)"opencv-hist");
  v5 = *a3;
  v6 = *a3 & 0x800;
  sub_10027638C((uint64_t)a1, (uint64_t)"type", *a3 & 1);
  sub_10027638C((uint64_t)a1, (uint64_t)"is_uniform", (v5 >> 10) & 1);
  sub_10027638C((uint64_t)a1, (uint64_t)"have_ranges", (v5 >> 11) & 1);
  v7 = *((_QWORD *)a3 + 1);
  if (v7 && *(_WORD *)(v7 + 2) == 16964)
  {
    sub_10027DDC4(a1, (uint64_t)"bins", v7, 0, 0);
    if (!v6)
      return sub_10027623C((uint64_t)a1);
  }
  else
  {
    sub_10027DDC4(a1, (uint64_t)"mat", (uint64_t)(a3 + 70), 0, 0);
    if (!v6)
      return sub_10027623C((uint64_t)a1);
  }
  v8 = sub_1001F65B4(*((_QWORD *)a3 + 1), __dst);
  sub_100275840((uint64_t)a1, "thresh", 13, 0);
  if ((v5 & 0x400) != 0)
  {
    if (v8 >= 1)
    {
      v10 = v8;
      v11 = (uint64_t)(a3 + 4);
      do
      {
        sub_10027662C((uint64_t)a1, v11, 2, "f");
        v11 += 8;
        --v10;
      }
      while (v10);
    }
  }
  else if (v8 >= 1)
  {
    for (i = 0; i != v8; ++i)
      sub_10027662C((uint64_t)a1, *(_QWORD *)(*((_QWORD *)a3 + 34) + 8 * i), __dst[i] + 1, "f");
  }
  sub_10027623C((uint64_t)a1);
  return sub_10027623C((uint64_t)a1);
}

uint64_t sub_100315350(unint64_t a1)
{
  uint64_t v2;

  v2 = 0;
  sub_100314784(a1, &v2);
  return v2;
}

void sub_100315378(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_100008F3C();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_100008FF8();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_100315514(uint64_t a1, uint64_t a2, int a3, float **a4, uint64_t a5, int a6, int a7, uint64_t *a8)
{
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  uint32x2_t v34;
  int64x2_t v35;
  const mach_header_64 *v36;
  int64x2_t v37;
  float64x2_t v38;
  int32x2_t v39;
  uint32x2_t v40;
  uint32x2_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  float *v47;
  int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  float v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  int64x2_t v57;
  int64x2_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  float *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  float *v75;
  float v76;
  unint64_t v77;
  unint64_t v78;
  int64x2_t v79;
  int64x2_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  float v86;
  int v87;
  uint64_t v88[2];

  v16 = a3 << 8;
  v17 = *a8;
  v18 = (a8[1] - *a8) >> 3;
  if (v16 <= v18)
  {
    if (v16 < v18)
      a8[1] = v17 + 8 * v16;
  }
  else
  {
    sub_10026B618((uint64_t)a8, v16 - v18);
    v17 = *a8;
  }
  if (a6)
  {
    if (a3 >= 1)
    {
      v19 = 0;
      v20 = *(_QWORD *)(a1 + 64);
      v21 = *(_QWORD *)(a1 + 72);
      v22 = *(_QWORD *)(a2 + 8);
      __asm { FMOV            V1.2D, #2.0 }
      do
      {
        if (a7)
        {
          if (v22)
            v28 = *(_DWORD *)(v22 + 4 * v19 + 88);
          else
            v28 = 0;
          v29 = 1;
        }
        else
        {
          v28 = *(_DWORD *)(v20 + 4 * v19);
          v29 = *(_QWORD *)(v21 + 8 * v19);
        }
        v30 = 0;
        v31 = (uint64_t *)(a5 + 16 * v19);
        v32 = (float64x2_t)vdupq_lane_s64(*v31, 0);
        v33 = (float64x2_t)vdupq_lane_s64(v31[1], 0);
        v34 = (uint32x2_t)vdup_n_s32(v28);
        v35 = vdupq_n_s64(v29);
        v36 = &_mh_execute_header;
        do
        {
          v37.i64[0] = (int)v36;
          v37.i64[1] = SHIDWORD(v36);
          v38 = vmlaq_f64(v33, v32, vcvtq_f64_s64(v37));
          v39 = vmovn_s64(vcvtq_s64_f64(v38));
          v37.i64[0] = v39.i32[0];
          v37.i64[1] = v39.i32[1];
          v40 = (uint32x2_t)vadd_s32(vmovn_s64(vcgtq_f64(vcvtq_f64_s64(v37), v38)), v39);
          v37.i64[0] = v40.i32[0];
          v37.i64[1] = v40.i32[1];
          v41 = vcgt_u32(v34, v40);
          *(_QWORD *)&v38.f64[0] = v35.i64[0] * v37.i64[0];
          *(_QWORD *)&v38.f64[1] = v35.i64[1] * v37.i64[1];
          v37.i64[0] = v41.i32[0];
          v37.i64[1] = v41.i32[1];
          *(int8x16_t *)(v17 + ((v19 & 0xFFFFFF) << 11) + v30) = vbslq_s8((int8x16_t)v37, (int8x16_t)v38, _Q1);
          v36 = (const mach_header_64 *)vadd_s32((int32x2_t)v36, (int32x2_t)0x200000002);
          v30 += 16;
        }
        while (v30 != 2048);
        ++v19;
      }
      while (v19 != a3);
    }
    return;
  }
  if (!a4)
  {
    v88[0] = 0;
    v88[1] = 0;
    qmemcpy((void *)sub_10029430C(v88, 55), "Either ranges, either uniform ranges should be provided", 55);
    sub_100294B74(-5, v88, "calcHistLookupTables_8u", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 116);
  }
  if (a3 >= 1)
  {
    if ((a7 & 1) != 0)
    {
      v42 = *(_QWORD *)(a2 + 8);
      if (v42)
      {
        v43 = 0;
        v44 = 0;
        do
        {
          v45 = 0;
          v46 = v43;
          v47 = a4[v44];
          v48 = (int)*v47;
          if (*v47 > (float)v48)
            ++v48;
          if (v48 >= 256)
            v49 = 256;
          else
            v49 = v48;
          v50 = *(_DWORD *)(v42 + 4 * v44 + 88) - 1;
          v51 = 0x4000000000000000;
          v52 = -1;
          if (v49 > 0)
          {
LABEL_37:
            v55 = v49 - (uint64_t)v45;
            v56 = v45;
            if (v55 < 4)
              goto LABEL_41;
            v56 = (v55 & 0xFFFFFFFFFFFFFFFCLL) + v45;
            v57 = vdupq_n_s64(v51);
            v58 = (int64x2_t *)(v17 + 16 + 8 * (v43 + (uint64_t)v45));
            v59 = v55 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v58[-1] = v57;
              *v58 = v57;
              v58 += 2;
              v59 -= 4;
            }
            while (v59);
            if (v55 != (v55 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_41:
              v60 = (unint64_t *)(v17 + 8 * (v43 + v56));
              v61 = v49 - v56;
              do
              {
                *v60++ = v51;
                --v61;
              }
              while (v61);
            }
            v45 = v49;
          }
          while (v52 != v50)
          {
            v51 = v52 + 1;
            v53 = v47[v52 + 2];
            v54 = (int)v53;
            if (v53 > (float)(int)v53)
              ++v54;
            if (v54 >= 256)
              v49 = 256;
            else
              v49 = v54;
            v52 = v51;
            if (v45 < v49)
              goto LABEL_37;
          }
          if (v45 <= 255)
            memset_pattern16((void *)(v17 + 8 * (((_DWORD)v44 << 8) + v45)), &unk_1003C30F0, 8 * (255 - v45) + 8);
          ++v44;
          v43 = v46 + 256;
        }
        while (v44 != a3);
        return;
      }
      v84 = (unint64_t)a3 << 8;
      while (1)
      {
        v86 = **a4;
        v87 = (int)v86;
        if (v86 > (float)(int)v86)
          ++v87;
        if (v87 < 1)
        {
          v85 = 0;
        }
        else
        {
          if (v87 >= 256)
            v85 = 256;
          else
            v85 = v87;
          memset_pattern16((void *)(v17 + 8 * v42), &unk_1003C30F0, 8 * v85);
          if (v85 >= 0x100)
            goto LABEL_76;
        }
        memset_pattern16((void *)(v17 + 8 * (int)(v42 + v85)), &unk_1003C30F0, ((8 * v85) ^ 0x7F8) + 8);
LABEL_76:
        v42 += 256;
        ++a4;
        if (v84 == v42)
          return;
      }
    }
    v62 = 0;
    v63 = 0;
    v64 = *(_QWORD *)(a1 + 64);
    v65 = *(_QWORD *)(a1 + 72);
    do
    {
      v66 = 0;
      v67 = v62;
      v68 = a4[v63];
      v69 = (int)*v68;
      if (*v68 > (float)v69)
        ++v69;
      if (v69 >= 256)
        v70 = 256;
      else
        v70 = v69;
      v71 = *(_QWORD *)(v65 + 8 * v63);
      v72 = *(_DWORD *)(v64 + 4 * v63) - 1;
      v73 = 0x4000000000000000;
      v74 = -1;
      if (v70 > 0)
      {
LABEL_63:
        v77 = v70 - (uint64_t)v66;
        v78 = v66;
        if (v77 < 4)
          goto LABEL_67;
        v78 = (v77 & 0xFFFFFFFFFFFFFFFCLL) + v66;
        v79 = vdupq_n_s64(v73);
        v80 = (int64x2_t *)(v17 + 16 + 8 * (v62 + (uint64_t)v66));
        v81 = v77 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v80[-1] = v79;
          *v80 = v79;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_67:
          v82 = (unint64_t *)(v17 + 8 * (v62 + v78));
          v83 = v70 - v78;
          do
          {
            *v82++ = v73;
            --v83;
          }
          while (v83);
        }
        v66 = v70;
      }
      while (v74 != v72)
      {
        v75 = &v68[v74++];
        v76 = v75[2];
        v70 = (int)v76;
        if (v76 > (float)(int)v76)
          ++v70;
        if (v70 >= 256)
          v70 = 256;
        v73 = v71 * v74;
        if (v66 < v70)
          goto LABEL_63;
      }
      if (v66 <= 255)
        memset_pattern16((void *)(v17 + 8 * (((_DWORD)v63 << 8) + v66)), &unk_1003C30F0, 8 * (255 - v66) + 8);
      ++v63;
      v62 = v67 + 256;
    }
    while (v63 != a3);
  }
}

void sub_100315A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100315A68()
{
  sub_100279408(&qword_1004AFFA0, (uint64_t)"opencv-hist", (uint64_t)sub_100314AEC, (uint64_t)sub_100314638, (uint64_t)sub_100314B18, (uint64_t)sub_100315170, (uint64_t)sub_100315350);
  return __cxa_atexit((void (*)(void *))sub_100279460, &qword_1004AFFA0, (void *)&_mh_execute_header);
}

void sub_100315AD4(uint64_t a1, uint64_t a2, int a3, double a4, double a5, double a6, double a7)
{
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  float v22;
  float v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _DWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _DWORD *v39;
  void *v40;
  int64x2_t v41;
  void *__p;
  _BYTE *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  _QWORD v52[2];
  _BYTE v53[8];
  int v54;

  sub_100298C2C(v53, &off_1004534D0);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_OWORD *)(v14 + 16);
    v45 = *(_OWORD *)v14;
    v16 = *(_OWORD *)(v14 + 32);
    v46 = v15;
    v47 = v16;
    v17 = *(_QWORD *)(v14 + 56);
    v48 = *(_QWORD *)(v14 + 48);
    v49 = v17;
    v50 = (char *)&v45 + 8;
    v51 = v52;
    v52[0] = 0;
    v52[1] = 0;
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 20);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    if (*(int *)(v14 + 4) > 2)
    {
      DWORD1(v45) = 0;
      sub_100256B48((uint64_t)&v45, v14);
    }
    else
    {
      v20 = *(_QWORD **)(v14 + 72);
      v21 = v51;
      *(_QWORD *)v51 = *v20;
      v21[1] = v20[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v45);
  }
  __p = 0;
  v43 = 0;
  v44 = 0;
  v22 = a4;
  v23 = a5;
  sub_100315DEC((uint64_t)&v45, a3, (uint64_t)rint(a6), (uint64_t)rint(a7), &__p, 0x7FFFFFFF, v22, v23);
  v34 = 0x242FF401CLL;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = v35;
  v40 = &v41;
  v41 = 0uLL;
  v35[0] = (unint64_t)(v43 - (_BYTE *)__p) >> 4;
  v35[1] = 1;
  if (v43 != __p)
  {
    v41 = vdupq_n_s64(0x10uLL);
    *(_QWORD *)&v36 = __p;
    *((_QWORD *)&v36 + 1) = __p;
    *(_QWORD *)&v37 = (char *)__p + 16 * (int)((v43 - (_BYTE *)__p) >> 4);
    *((_QWORD *)&v37 + 1) = v37;
  }
  sub_1002181EC((uint64_t)&v34, a2);
  if (*((_QWORD *)&v38 + 1))
  {
    v24 = (unsigned int *)(*((_QWORD *)&v38 + 1) + 20);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      sub_100256C90((uint64_t)&v34);
  }
  *((_QWORD *)&v38 + 1) = 0;
  v36 = 0u;
  v37 = 0u;
  if (SHIDWORD(v34) >= 1)
  {
    v27 = 0;
    v28 = v39;
    do
      v28[v27++] = 0;
    while (v27 < SHIDWORD(v34));
  }
  if (v40 != &v41)
    j__free(v40);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v49)
  {
    v29 = (unsigned int *)(v49 + 20);
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
      sub_100256C90((uint64_t)&v45);
  }
  v49 = 0;
  v46 = 0u;
  v47 = 0u;
  if (SDWORD1(v45) >= 1)
  {
    v32 = 0;
    v33 = v50;
    do
      *(_DWORD *)&v33[4 * v32++] = 0;
    while (v32 < SDWORD1(v45));
  }
  if (v51 != v52)
    j__free(v51);
  if (v54)
    sub_1002989D0(v53);
}

void sub_100315D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  sub_100006BE4((uint64_t)&a10);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100006BE4((uint64_t)&a25);
  sub_1001D40CC(v25 - 96);
  _Unwind_Resume(a1);
}

void sub_100315DD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_100315DEC(uint64_t a1, int a2, int a3, int a4, _QWORD *a5, int a6, float a7, float a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int32x4_t v21;
  uint64_t v22;
  char *v23;
  int64x2_t v24;
  float64x2_t v25;
  __double2 v26;
  float64x2_t v27;
  __double2 v28;
  __double2 v29;
  float64x2_t v30;
  float64x2_t v31;
  __double2 v32;
  float64x2_t v33;
  float *v34;
  __double2 v35;
  float v36;
  float v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  unint64_t v65;
  uint64_t v66;
  const float *v67;
  float *v68;
  uint64_t v69;
  char *v70;
  int v71;
  int v72;
  unint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int *v81;
  int v82;
  int v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  int v87;
  float *v88;
  int v89;
  uint64_t v90;
  int v91;
  float v92;
  float v93;
  float v94;
  float v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  float *v131;
  uint64_t v132;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  float *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  BOOL v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t v167;
  _BYTE *v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  int v176;
  float64x2_t v179;
  float64x2_t v180;
  unsigned int v181;
  double v182;
  int v183;
  double v184;
  int v185;
  char *v186;
  float64x2_t v187;
  char *v188;
  uint64_t v189;
  int32x4_t v190;
  uint64_t v191;
  _DWORD v192[4];
  char *v193;
  char *v194;
  char *v195;
  _BYTE v196[64];
  _BYTE *v197;
  void *v198;
  _QWORD v199[34];
  _QWORD v200[8];
  _QWORD *v201;
  _QWORD *v202;
  _QWORD v203[2];
  void *__src;
  char *v205;
  char *v206;
  float32x4x2_t v207;
  float32x4x2_t v208;

  if ((*(_WORD *)a1 & 0xFFF) != 0)
  {
    *(_QWORD *)v196 = 0;
    *(_QWORD *)&v196[8] = 0;
    qmemcpy((void *)sub_10029430C(v196, 57), "image.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", 57);
    sub_100294B74(-215, (uint64_t *)v196, "HoughLinesProbabilistic", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/hough.cpp", 425);
  }
  v12 = *(unsigned int *)(a1 + 12);
  v184 = a8;
  v13 = (uint64_t)rint(3.14159265 / a8);
  v189 = *(unsigned int *)(a1 + 8);
  v14 = (uint64_t)rintf((float)(int)((2 * (v189 + v12)) | 1) / a7);
  sub_100253C34(v13, v14, 4u, (uint64_t)v196);
  LODWORD(v200[0]) = 1124007936;
  memset((char *)v200 + 4, 0, 32);
  memset((char *)&v200[4] + 4, 0, 28);
  v201 = &v200[1];
  v202 = v203;
  v203[0] = 0;
  v203[1] = 0;
  (*(void (**)(_QWORD, _BYTE *, _QWORD *, uint64_t))(**(_QWORD **)v196 + 24))(*(_QWORD *)v196, v196, v200, 0xFFFFFFFFLL);
  sub_100008C98((uint64_t)v196);
  *(_DWORD *)v196 = 1124007936;
  memset(&v196[4], 0, 60);
  v197 = &v196[8];
  v198 = v199;
  v199[0] = 0;
  v199[1] = 0;
  __src = (void *)__PAIR64__(v12, v189);
  sub_100255F30(v196, 2, (uint64_t *)&__src, 0);
  __src = 0;
  v205 = 0;
  v206 = 0;
  v176 = a2;
  v174 = a5;
  if (!(_DWORD)v13)
  {
    v16 = 0;
    goto LABEL_13;
  }
  if ((v13 & 0x80000000) != 0)
    sub_100008F3C();
  v15 = 8 * (_DWORD)v13;
  v16 = (char *)operator new(v15);
  __src = v16;
  v206 = &v16[v15];
  bzero(v16, v15);
  v205 = &v16[v15];
  v182 = (float)(1.0 / a7);
  v17 = v13;
  if (v13 < 4uLL)
  {
    v18 = 0;
LABEL_11:
    v34 = (float *)&v16[8 * v18 + 4];
    do
    {
      v35 = __sincos_stret(v184 * (double)(int)v18);
      v36 = v35.__cosval * v182;
      v37 = v35.__sinval * v182;
      *(v34 - 1) = v36;
      *v34 = v37;
      ++v18;
      v34 += 2;
    }
    while (v17 != v18);
    goto LABEL_13;
  }
  v19 = v13;
  v20 = v13 & 3;
  v18 = v13 - v20;
  v21 = (int32x4_t)xmmword_1003BCB00;
  v22 = v18;
  v23 = v16;
  do
  {
    v190 = v21;
    v24.i64[0] = v21.i32[0];
    v24.i64[1] = v21.i32[1];
    v25 = vcvtq_f64_s64(v24);
    v24.i64[0] = v190.i32[2];
    v24.i64[1] = v190.i32[3];
    v187 = vmulq_n_f64(vcvtq_f64_s64(v24), v184);
    v180 = vmulq_n_f64(v25, v184);
    v26 = __sincos_stret(v180.f64[1]);
    v28 = __sincos_stret(v180.f64[0]);
    v27.f64[0] = v28.__cosval;
    v27.f64[1] = v26.__cosval;
    v179 = v27;
    v29 = __sincos_stret(v187.f64[1]);
    v32 = __sincos_stret(v187.f64[0]);
    v31.f64[0] = v32.__cosval;
    v30.f64[0] = v32.__sinval;
    v31.f64[1] = v29.__cosval;
    v33.f64[0] = v28.__sinval;
    v33.f64[1] = v26.__sinval;
    v208.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v179, v182)), vmulq_n_f64(v31, v182));
    v30.f64[1] = v29.__sinval;
    v208.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v33, v182)), vmulq_n_f64(v30, v182));
    vst2q_f32((float *)v16, v208);
    v16 += 32;
    *(_QWORD *)&v31.f64[0] = 0x400000004;
    *(_QWORD *)&v31.f64[1] = 0x400000004;
    v21 = vaddq_s32(v190, (int32x4_t)v31);
    v22 -= 4;
  }
  while (v22);
  LODWORD(v13) = v19;
  v16 = v23;
  if (v20)
    goto LABEL_11;
LABEL_13:
  v188 = v16;
  v38 = *(_QWORD *)&v196[16];
  v193 = 0;
  v194 = 0;
  v195 = 0;
  v191 = *(_QWORD *)&v196[16];
  v181 = v13;
  if ((int)v189 < 1 || (int)v12 < 1)
  {
    v70 = 0;
    goto LABEL_203;
  }
  v183 = v14;
  v185 = a4;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  while (2)
  {
    v43 = 0;
    v44 = *(_QWORD *)(a1 + 16) + **(_QWORD **)(a1 + 72) * v42;
    v45 = *(_QWORD *)&v196[16] + *(_QWORD *)v198 * v42;
    do
    {
      while (1)
      {
        while (!*(_BYTE *)(v44 + v43))
        {
          *(_BYTE *)(v45 + v43++) = 0;
          if (v43 == v12)
            goto LABEL_16;
        }
        *(_BYTE *)(v45 + v43) = 1;
        if (v41 >= v40)
          break;
        *(_DWORD *)v41 = v43;
        *((_DWORD *)v41 + 1) = v42;
        v41 += 8;
        v194 = v41;
        if (++v43 == v12)
          goto LABEL_16;
      }
      v46 = v41 - v39;
      v47 = (v41 - v39) >> 3;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61)
        sub_100008F3C();
      if ((v40 - v39) >> 2 > v48)
        v48 = (v40 - v39) >> 2;
      if ((unint64_t)(v40 - v39) >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v48;
      if (v49 >> 61)
        sub_100008FF8();
      v50 = (char *)operator new(8 * v49);
      v51 = &v50[8 * v47];
      *(_DWORD *)v51 = v43;
      *((_DWORD *)v51 + 1) = v42;
      if (v41 != v39)
      {
        v52 = v41 - v39 - 8;
        if (v52 < 0x198)
          goto LABEL_32;
        v56 = v52 & 0xFFFFFFFFFFFFFFF8;
        if (&v50[v46 - 8 - (v52 & 0xFFFFFFFFFFFFFFF8)] > &v50[v46 - 8])
          goto LABEL_32;
        if (&v41[-v56 - 8] > v41 - 8)
          goto LABEL_32;
        v57 = (unint64_t)&v50[v46 - 4];
        if (v57 - v56 > v57)
          goto LABEL_32;
        v58 = v41 - 4;
        if (&v41[-v56 - 4] > v41 - 4)
          goto LABEL_32;
        v59 = v52 >> 3;
        v60 = v46 - v56;
        v61 = &v50[v60 - 8];
        v62 = &v50[v60 - 4] >= v41 || &v58[-8 * v59] >= v51;
        v63 = !v62;
        v64 = (unint64_t)&v41[-8 * v59 - 8] >= v57 || v61 >= v58;
        if (!v64 || v63)
        {
LABEL_32:
          v53 = v41;
          v54 = &v50[8 * v47];
        }
        else
        {
          v65 = v59 + 1;
          v66 = (v59 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          v53 = &v41[-8 * v66];
          v54 = &v51[-8 * v66];
          v67 = (const float *)(v41 - 32);
          v68 = (float *)(v51 - 32);
          v69 = v66;
          do
          {
            v207 = vld2q_f32(v67);
            v67 -= 8;
            vst2q_f32(v68, v207);
            v68 -= 8;
            v69 -= 4;
          }
          while (v69);
          if (v65 == v66)
          {
LABEL_34:
            v40 = &v50[8 * v49];
            v41 = v51 + 8;
            v193 = v54;
            v194 = v51 + 8;
            v195 = v40;
            if (!v39)
              goto LABEL_36;
LABEL_35:
            operator delete(v39);
            goto LABEL_36;
          }
        }
        do
        {
          v55 = *((_QWORD *)v53 - 1);
          v53 -= 8;
          *((_QWORD *)v54 - 1) = v55;
          v54 -= 8;
        }
        while (v53 != v39);
        goto LABEL_34;
      }
      v54 = &v50[8 * v47];
      v40 = &v50[8 * v49];
      v41 = v51 + 8;
      v193 = v54;
      v194 = v51 + 8;
      v195 = v40;
      if (v39)
        goto LABEL_35;
LABEL_36:
      v38 = v191;
      v194 = v41;
      v39 = v54;
      ++v43;
    }
    while (v43 != v12);
LABEL_16:
    if (++v42 != v189)
      continue;
    break;
  }
  v70 = v193;
  v71 = v185;
  v72 = v176;
  v73 = v41 - v193;
  if ((int)((unint64_t)(v41 - v193) >> 3) >= 1)
  {
    v74 = v176 - 1;
    v75 = v183 - 1;
    if (v183 < 1)
      v75 = v183;
    v76 = v75 >> 1;
    v77 = (v73 >> 3);
    v78 = 4 * v183;
    v79 = -1;
    v186 = v193;
    while (1)
    {
      v80 = v77;
      v79 = HIDWORD(v79) + 4164903690 * v79;
      v81 = (int *)&v70[8 * (v79 % v77)];
      v82 = *v81;
      v83 = v81[1];
      v84 = v200[2];
      *(_QWORD *)v81 = *(_QWORD *)&v70[8 * --v77];
      if (*(_BYTE *)(v38 + v82 + v83 * (int)v12))
        v85 = v181 == 0;
      else
        v85 = 1;
      if (v85)
        goto LABEL_65;
      v86 = 0;
      v87 = 0;
      v88 = (float *)(v188 + 4);
      v89 = v74;
      do
      {
        v90 = 4 * (int)(v76 + (uint64_t)rintf((float)(*v88 * (float)v83) + (float)((float)v82 * *(v88 - 1))));
        v91 = *(_DWORD *)(v84 + v90);
        *(_DWORD *)(v84 + v90) = v91 + 1;
        if (v89 <= v91)
        {
          v89 = v91 + 1;
          v87 = v86;
        }
        ++v86;
        v88 += 2;
        v84 += v78;
      }
      while (v181 != v86);
      if (v89 < v72)
        goto LABEL_65;
      v92 = *(float *)&v188[8 * v87];
      v93 = *(float *)&v188[8 * v87 + 4];
      v94 = fabsf(v93);
      v95 = fabsf(v92);
      if (v92 > 0.0)
        v96 = 1;
      else
        v96 = -1;
      v97 = (uint64_t)rintf((float)(v93 * -65536.0) / v95);
      if (v93 < 0.0)
        v98 = 1;
      else
        v98 = -1;
      v99 = (uint64_t)rintf((float)(v92 * 65536.0) / v94);
      if (v94 > v95)
        v100 = v82;
      else
        v100 = (v82 << 16) | 0x8000;
      if (v94 > v95)
        v101 = (v83 << 16) | 0x8000;
      else
        v101 = v83;
      if (v94 > v95)
        v102 = v98;
      else
        v102 = v97;
      if (v94 > v95)
        v103 = v99;
      else
        v103 = v96;
      v104 = v100 >> 16;
      if (v94 > v95)
        v105 = v100;
      else
        v105 = v100 >> 16;
      if (v105 < 0)
      {
        v107 = 0;
        v108 = 0;
        v115 = 0;
        v116 = 0;
      }
      else
      {
        v106 = v101 >> 16;
        v107 = 0;
        v108 = 0;
        v109 = 0;
        if (v94 > v95)
        {
          v144 = v103 + v101;
          v145 = v100;
          v146 = v101 >> 16;
          while (v145 < (int)v12 && (v146 & 0x80000000) == 0 && v146 < (int)v189)
          {
            if (*(_BYTE *)(v38 + v146 * (int)v12 + v145))
            {
              v109 = 0;
              v107 = v145;
              v108 = v146;
              v146 = v144 >> 16;
              v144 += v103;
              v145 += v102;
              if (v145 < 0)
                break;
            }
            else
            {
              if (v109 >= v71)
                break;
              ++v109;
              v146 = v144 >> 16;
              v144 += v103;
              v145 += v102;
              if (v145 < 0)
                break;
            }
          }
        }
        else
        {
          v110 = v12 * v101;
          v111 = v100 >> 16;
          v112 = v101;
          v113 = v100;
          v114 = v12 * v103;
          while (v111 < (int)v12 && (v112 & 0x80000000) == 0 && v112 < (int)v189)
          {
            if (*(_BYTE *)(v38 + v110 + v111))
            {
              v109 = 0;
              v108 = v112;
              v107 = v111;
              v112 += v103;
              v110 += v114;
              v113 += v102;
              v111 = HIWORD(v113);
              if (v113 < 0)
                break;
            }
            else
            {
              if (v109 >= v71)
                break;
              ++v109;
              v112 += v103;
              v110 += v114;
              v113 += v102;
              v111 = HIWORD(v113);
              if (v113 < 0)
                break;
            }
          }
        }
        v115 = 0;
        v116 = 0;
        if (v94 > v95)
        {
          v151 = 0;
          v152 = v101 - v103;
          v153 = v100;
          while (v153 < (int)v12 && (v106 & 0x80000000) == 0 && v106 < (int)v189)
          {
            if (*(_BYTE *)(v38 + v106 * (int)v12 + v153))
            {
              v151 = 0;
              v115 = v153;
              v116 = v106;
              v153 -= v102;
              v106 = v152 >> 16;
              v152 -= v103;
              if (v153 < 0)
                break;
            }
            else
            {
              if (v151 >= v71)
                break;
              ++v151;
              v153 -= v102;
              v106 = v152 >> 16;
              v152 -= v103;
              if (v153 < 0)
                break;
            }
          }
        }
        else
        {
          v147 = 0;
          v148 = v12 * v101;
          v149 = v101;
          v150 = v100;
          while (v104 < (int)v12 && (v149 & 0x80000000) == 0 && v149 < (int)v189)
          {
            if (*(_BYTE *)(v38 + v148 + v104))
            {
              v147 = 0;
              v115 = v104;
              v116 = v149;
            }
            else
            {
              if (v147 >= v71)
                break;
              ++v147;
            }
            v149 -= v103;
            v104 = (v150 - v102) >> 16;
            v148 -= v12 * v103;
            v150 -= v102;
            if (v150 < 0)
              break;
          }
        }
      }
      if (v115 - v107 >= 0)
        v117 = v115 - v107;
      else
        v117 = v107 - v115;
      v118 = v100;
      v119 = v101;
      if (v117 >= a3
        || (v116 - v108 >= 0 ? (v120 = v116 - v108) : (v120 = v108 - v116), v118 = v100, v119 = v101, v120 >= a3))
      {
        while (1)
        {
          v126 = v119 >> 16;
          v127 = v118 >> 16;
          if (v94 > v95)
            v127 = v118;
          else
            v126 = v119;
          v128 = v38 + v126 * (int)v12;
          if (*(_BYTE *)(v128 + v127))
          {
            v129 = v200[2];
            v130 = v181;
            v131 = (float *)(v188 + 4);
            do
            {
              v132 = 4
                   * (int)(v76 + (uint64_t)rintf((float)(*v131 * (float)v126) + (float)((float)v127 * *(v131 - 1))));
              --*(_DWORD *)(v129 + v132);
              v131 += 2;
              v129 += v78;
              --v130;
            }
            while (v130);
            *(_BYTE *)(v128 + v127) = 0;
          }
          if (v126 == v108 && v127 == v107)
            break;
          v118 += v102;
          v119 += v103;
        }
        while (1)
        {
          v135 = v101 >> 16;
          v136 = v100 >> 16;
          if (v94 > v95)
            v136 = v100;
          else
            v135 = v101;
          v137 = v38 + v135 * (int)v12;
          if (*(_BYTE *)(v137 + v136))
          {
            v138 = v200[2];
            v139 = (float *)(v188 + 4);
            v140 = v181;
            do
            {
              v141 = 4
                   * (int)(v76 + (uint64_t)rintf((float)(*v139 * (float)v135) + (float)((float)v136 * *(v139 - 1))));
              --*(_DWORD *)(v138 + v141);
              v139 += 2;
              v138 += v78;
              --v140;
            }
            while (v140);
            *(_BYTE *)(v137 + v136) = 0;
          }
          if (v135 == v116 && v136 == v115)
            break;
          v100 -= v102;
          v101 -= v103;
        }
        v192[0] = v107;
        v192[1] = v108;
        v192[2] = v115;
        v192[3] = v116;
        sub_100316CD0((uint64_t)v174, v192);
        v143 = (int)((v174[1] - *v174) >> 4) >= a6 || v80 <= 1;
        v72 = v176;
        v38 = v191;
        v70 = v186;
        v74 = v176 - 1;
        if (v143)
          break;
      }
      else
      {
        v121 = v100;
        v122 = v101;
        if (v94 > v95)
        {
          v154 = v100 - v107;
          v155 = v38 + v100;
          v156 = v101;
          while (1)
          {
            v157 = (v156 >> 16) * (int)v12;
            if (*(_BYTE *)(v155 + v157))
              *(_BYTE *)(v155 + v157) = 0;
            if (v156 >> 16 == v108 && !v154)
              break;
            v156 += v103;
            v154 += v102;
            v155 += v102;
          }
        }
        else
        {
          v123 = v38 + (int)v12 * (uint64_t)v101;
          v124 = v100;
          v125 = v101 - (uint64_t)v108;
          while (1)
          {
            v142 = (uint64_t)v124 >> 16;
            if (*(_BYTE *)(v123 + v142))
              *(_BYTE *)(v123 + v142) = 0;
            if (!v125 && (_DWORD)v142 == v107)
              break;
            v124 += v102;
            v125 += v103;
            v123 += (int)v12 * (uint64_t)v103;
          }
        }
        if (v94 > v95)
        {
          v161 = v115 - v100;
          v162 = v38 + v121;
          v70 = v186;
          v74 = v176 - 1;
          while (1)
          {
            v163 = (v101 >> 16) * (int)v12;
            if (*(_BYTE *)(v162 + v163))
              *(_BYTE *)(v162 + v163) = 0;
            if (v101 >> 16 == v116 && !v161)
              break;
            v101 -= v103;
            v161 += v102;
            v162 -= v102;
          }
        }
        else
        {
          v158 = v116 - (uint64_t)v101;
          v159 = v38 + (int)v12 * (uint64_t)v122;
          v70 = v186;
          v74 = v176 - 1;
          while (1)
          {
            v160 = (uint64_t)v100 >> 16;
            if (*(_BYTE *)(v159 + v160))
              *(_BYTE *)(v159 + v160) = 0;
            if (!v158 && (_DWORD)v160 == v115)
              break;
            v100 -= v102;
            v158 += v103;
            v159 += -(uint64_t)(int)v12 * v103;
          }
        }
LABEL_65:
        if (v80 <= 1)
          break;
      }
    }
  }
LABEL_203:
  if (v70)
    operator delete(v70);
  if (__src)
    operator delete(__src);
  if (*(_QWORD *)&v196[56])
  {
    v164 = (unsigned int *)(*(_QWORD *)&v196[56] + 20);
    do
    {
      v165 = __ldaxr(v164);
      v166 = v165 - 1;
    }
    while (__stlxr(v166, v164));
    if (!v166)
      sub_100256C90((uint64_t)v196);
  }
  *(_QWORD *)&v196[56] = 0;
  memset(&v196[16], 0, 32);
  if (*(int *)&v196[4] >= 1)
  {
    v167 = 0;
    v168 = v197;
    do
      *(_DWORD *)&v168[4 * v167++] = 0;
    while (v167 < *(int *)&v196[4]);
  }
  if (v198 != v199)
    j__free(v198);
  if (v200[7])
  {
    v169 = (unsigned int *)(v200[7] + 20);
    do
    {
      v170 = __ldaxr(v169);
      v171 = v170 - 1;
    }
    while (__stlxr(v171, v169));
    if (!v171)
      sub_100256C90((uint64_t)v200);
  }
  v200[7] = 0;
  memset(&v200[2], 0, 32);
  if (SHIDWORD(v200[0]) >= 1)
  {
    v172 = 0;
    v173 = v201;
    do
      *((_DWORD *)v173 + v172++) = 0;
    while (v172 < SHIDWORD(v200[0]));
  }
  if (v202 != v203)
    j__free(v202);
}

void sub_100316C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100316C90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  uint64_t v40;

  if (__p)
    operator delete(__p);
  if (*(_QWORD *)(v40 - 136))
    JUMPOUT(0x100316CB4);
  JUMPOUT(0x100316CB8);
}

void sub_100316CD0(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  const float *v20;
  float *v21;
  uint64_t v22;
  int v23;
  float32x4x4_t v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_DWORD *)v5 = *a2;
    *((_DWORD *)v5 + 1) = a2[1];
    *((_DWORD *)v5 + 2) = a2[2];
    *((_DWORD *)v5 + 3) = a2[3];
    v7 = v5 + 16;
    goto LABEL_24;
  }
  v8 = *(char **)a1;
  v9 = (uint64_t)&v5[-*(_QWORD *)a1];
  v10 = (v9 >> 4) + 1;
  if (v10 >> 60)
    sub_100008F3C();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 3 > v10)
    v10 = v11 >> 3;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
    v12 = 0xFFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 60)
      sub_100008FF8();
    v13 = (char *)operator new(16 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[16 * (v9 >> 4)];
  v15 = &v13[16 * v12];
  *(_OWORD *)v14 = *(_OWORD *)a2;
  v7 = v14 + 16;
  if (v5 == v8)
  {
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v8)
      goto LABEL_24;
    goto LABEL_23;
  }
  v16 = v5 - v8 - 16;
  if (v16 < 0x70 || &v13[v9 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v5 && &v5[-(v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v14)
    goto LABEL_20;
  v17 = (v16 >> 4) + 1;
  v18 = 16 * (v17 & 0x1FFFFFFFFFFFFFFCLL);
  v6 = &v5[-v18];
  v19 = &v14[-v18];
  v20 = (const float *)(v5 - 64);
  v21 = (float *)(v14 - 64);
  v22 = v17 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = vld4q_f32(v20);
    vst4q_f32(v21, v24);
    v21 -= 16;
    v20 -= 16;
    v22 -= 4;
  }
  while (v22);
  v14 = v19;
  if (v17 != (v17 & 0x1FFFFFFFFFFFFFFCLL))
  {
LABEL_20:
    v19 = v14;
    do
    {
      v23 = *((_DWORD *)v6 - 4);
      v6 -= 16;
      *((_DWORD *)v19 - 4) = v23;
      v19 -= 16;
      *((_DWORD *)v19 + 1) = *((_DWORD *)v6 + 1);
      *((_DWORD *)v19 + 2) = *((_DWORD *)v6 + 2);
      *((_DWORD *)v19 + 3) = *((_DWORD *)v6 + 3);
    }
    while (v6 != v8);
  }
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v15;
  if (v8)
LABEL_23:
    operator delete(v8);
LABEL_24:
  *(_QWORD *)(a1 + 8) = v7;
}

void sub_100316E90()
{
  operator new();
}

void sub_100316F98()
{
  operator delete();
}

_QWORD *sub_100316FBC(_QWORD *a1, int a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  _QWORD *v18;
  uint64_t v20[2];

  v18 = sub_1001D4074(a1);
  *((_DWORD *)v18 + 2) = 1124007936;
  *v18 = off_100453500;
  *(_OWORD *)((char *)v18 + 12) = 0u;
  *(_OWORD *)((char *)v18 + 28) = 0u;
  *(_OWORD *)((char *)v18 + 44) = 0u;
  *(_OWORD *)(v18 + 7) = 0u;
  *(_OWORD *)(v18 + 11) = 0u;
  v18[9] = v18 + 2;
  v18[10] = v18 + 11;
  *((_DWORD *)v18 + 26) = 1124007936;
  *(_OWORD *)((char *)v18 + 108) = 0u;
  *(_OWORD *)((char *)v18 + 124) = 0u;
  *(_OWORD *)((char *)v18 + 140) = 0u;
  *(_OWORD *)(v18 + 19) = 0u;
  *(_OWORD *)(v18 + 23) = 0u;
  v18[21] = v18 + 14;
  v18[22] = v18 + 23;
  *(_OWORD *)((char *)v18 + 204) = 0u;
  *(_OWORD *)((char *)v18 + 220) = 0u;
  *(_OWORD *)((char *)v18 + 236) = 0u;
  *(_OWORD *)(v18 + 31) = 0u;
  *((_DWORD *)v18 + 50) = 1124007942;
  *(_OWORD *)(v18 + 35) = 0u;
  v18[33] = v18 + 26;
  v18[34] = v18 + 35;
  *(_OWORD *)(v18 + 43) = 0u;
  *(_OWORD *)((char *)v18 + 332) = 0u;
  *(_OWORD *)((char *)v18 + 316) = 0u;
  *(_OWORD *)((char *)v18 + 300) = 0u;
  *(_OWORD *)(v18 + 47) = 0u;
  v18[45] = v18 + 38;
  v18[46] = v18 + 47;
  *((_DWORD *)v18 + 74) = 1124007942;
  *(_OWORD *)(v18 + 55) = 0u;
  *(_OWORD *)((char *)v18 + 428) = 0u;
  *(_OWORD *)((char *)v18 + 412) = 0u;
  *(_OWORD *)((char *)v18 + 396) = 0u;
  *(_OWORD *)(v18 + 59) = 0u;
  v18[57] = v18 + 50;
  v18[58] = v18 + 59;
  *((_DWORD *)v18 + 98) = 1124007936;
  *(_DWORD *)((char *)v18 + 503) = 0;
  *(_OWORD *)(v18 + 61) = 0u;
  *((double *)v18 + 64) = a4;
  *((_DWORD *)v18 + 130) = a2;
  *((double *)v18 + 66) = a5;
  *((double *)v18 + 67) = a6;
  *((double *)v18 + 68) = a7;
  *((double *)v18 + 69) = a8;
  *((double *)v18 + 70) = a9;
  *((_DWORD *)v18 + 142) = a3;
  v18[74] = 0;
  *((_OWORD *)v18 + 36) = 0u;
  if (a3 < 1 || a9 >= 1.0 || a7 >= 180.0 || a4 <= 0.0 || a5 <= 0.0 || a6 < 0.0 || a7 <= 0.0 || a9 < 0.0)
  {
    v20[0] = 0;
    v20[1] = 0;
    qmemcpy((void *)sub_10029430C(v20, 131), "_scale > 0 && _sigma_scale > 0 && _quant >= 0 && _ang_th > 0 && _ang_th < 180 && _density_th >= 0 && _density_th < 1 && _n_bins > 0", 131);
    sub_100294B74(-215, v20, "LineSegmentDetectorImpl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 407);
  }
  return a1;
}

void sub_10031720C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *v17;

  sub_10029434C(&a9);
  v17 = *v15;
  if (*v15)
  {
    v9[73] = v17;
    operator delete(v17);
  }
  sub_10031726C(v14);
  sub_10022EB50(v13);
  sub_10022EB50(v12);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  sub_1001D4100(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10031726C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 20);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      sub_100256C90(a1);
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 64);
    do
      *(_DWORD *)(v7 + 4 * v6++) = 0;
    while (v6 < *(int *)(a1 + 4));
  }
  v8 = *(void **)(a1 + 72);
  if (v8 != (void *)(a1 + 80))
    j__free(v8);
  return a1;
}

void sub_100317300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  _BYTE *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  _BYTE *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  _BYTE *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  _BYTE *v64;
  void *__p;
  _BYTE *v66;
  uint64_t v67;
  void *v68;
  _BYTE *v69;
  uint64_t v70;
  void *v71;
  _BYTE *v72;
  uint64_t v73;
  void *v74;
  _BYTE *v75;
  uint64_t v76;
  _BYTE v77[64];
  _BYTE *v78;
  void *v79;
  int64x2_t v80;
  _BYTE v81[8];
  int v82;

  sub_100298C2C(v81, &off_100453558);
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)v77 = *(_OWORD *)v12;
    *(_OWORD *)&v77[16] = v13;
    *(_OWORD *)&v77[32] = *(_OWORD *)(v12 + 32);
    v14 = *(_QWORD *)(v12 + 56);
    *(_QWORD *)&v77[48] = *(_QWORD *)(v12 + 48);
    *(_QWORD *)&v77[56] = v14;
    v78 = &v77[8];
    v79 = &v80;
    v80 = 0uLL;
    if (v14)
    {
      v15 = (unsigned int *)(v14 + 20);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
    }
    if (*(int *)(v12 + 4) > 2)
    {
      *(_DWORD *)&v77[4] = 0;
      sub_100256B48((uint64_t)v77, v12);
    }
    else
    {
      v17 = *(_QWORD **)(v12 + 72);
      v18 = v79;
      *(_QWORD *)v79 = *v17;
      v18[1] = v17[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)v77);
  }
  if ((_BYTE *)(a1 + 8) != v77)
  {
    v19 = *(_QWORD *)(a1 + 64);
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 20);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
        sub_100256C90(a1 + 8);
    }
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    if (*(int *)(a1 + 12) >= 1)
    {
      v23 = 0;
      v24 = *(_QWORD *)(a1 + 72);
      do
        *(_DWORD *)(v24 + 4 * v23++) = 0;
      while (v23 < *(int *)(a1 + 12));
    }
    v25 = *(_DWORD *)&v77[4];
    v26 = *(_OWORD *)&v77[16];
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v77;
    *(_OWORD *)(a1 + 24) = v26;
    v27 = *(_OWORD *)&v77[48];
    *(_OWORD *)(a1 + 40) = *(_OWORD *)&v77[32];
    *(_OWORD *)(a1 + 56) = v27;
    v28 = *(_QWORD **)(a1 + 80);
    if (v28 == (_QWORD *)(a1 + 88))
    {
      v29 = v79;
      if (v25 <= 2)
        goto LABEL_20;
    }
    else
    {
      j__free(v28);
      *(_QWORD *)(a1 + 72) = a1 + 16;
      *(_QWORD *)(a1 + 80) = a1 + 88;
      v28 = (_QWORD *)(a1 + 88);
      v29 = v79;
      if (*(int *)&v77[4] <= 2)
      {
LABEL_20:
        *v28 = *v29;
        v28[1] = v29[1];
LABEL_28:
        *(_DWORD *)v77 = 1124007936;
        memset(&v77[4], 0, 60);
        goto LABEL_29;
      }
    }
    *(_QWORD *)(a1 + 72) = v78;
    *(_QWORD *)(a1 + 80) = v29;
    v78 = &v77[8];
    v79 = &v80;
    goto LABEL_28;
  }
  if (*(_QWORD *)&v77[56])
  {
    v30 = (unsigned int *)(*(_QWORD *)&v77[56] + 20);
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
      sub_100256C90((uint64_t)v77);
  }
LABEL_29:
  *(_QWORD *)&v77[56] = 0;
  memset(&v77[16], 0, 32);
  if (*(int *)&v77[4] >= 1)
  {
    v33 = 0;
    v34 = v78;
    do
      *(_DWORD *)&v34[4 * v33++] = 0;
    while (v33 < *(int *)&v77[4]);
  }
  if (v79 != &v80)
    j__free(v79);
  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_45;
  v35 = *(unsigned int *)(a1 + 12);
  if ((int)v35 >= 3)
  {
    v37 = *(_QWORD *)(a1 + 72);
    v38 = (int *)(v37 + 4);
    v39 = 1;
    v40 = v35 & 0xFFFFFFFE;
    v41 = 1;
    do
    {
      v39 *= *(v38 - 1);
      v41 *= *v38;
      v38 += 2;
      v40 -= 2;
    }
    while (v40);
    v36 = v41 * v39;
    v42 = v35 - (v35 & 0xFFFFFFFE);
    if (v42)
    {
      v43 = (int *)(v37 + ((4 * v35) & 0x3FFFFFFF8));
      do
      {
        v44 = *v43++;
        v36 *= v44;
        --v42;
      }
      while (v42);
    }
  }
  else
  {
    v36 = *(int *)(a1 + 20) * (uint64_t)*(int *)(a1 + 16);
  }
  if (!(_DWORD)v35 || !v36 || (*(_WORD *)(a1 + 8) & 0xFFF) != 0)
  {
LABEL_45:
    *(_OWORD *)v77 = 0uLL;
    qmemcpy((void *)sub_10029430C(v77, 75), "!image.empty() && image.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", 75);
    sub_100294B74(-215, (uint64_t *)v77, "detect", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 416);
  }
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  __p = 0;
  v66 = 0;
  v67 = 0;
  *(_BYTE *)(a1 + 504) = sub_1002637F8(a4);
  *(_BYTE *)(a1 + 505) = sub_1002637F8(a5);
  *(_BYTE *)(a1 + 506) = *(int *)(a1 + 520) > 1 && sub_1002637F8(a6);
  sub_100317BD0(a1, (uint64_t)&v74, (uint64_t)&v71, (uint64_t)&v68, (uint64_t)&__p);
  *(_QWORD *)v77 = 0x242FF401DLL;
  memset(&v77[16], 0, 48);
  v78 = &v77[8];
  v79 = &v80;
  v80 = 0uLL;
  *(_DWORD *)&v77[8] = (unint64_t)(v75 - (_BYTE *)v74) >> 4;
  *(_DWORD *)&v77[12] = 1;
  if (v75 != v74)
  {
    v80 = vdupq_n_s64(0x10uLL);
    *(_QWORD *)&v77[16] = v74;
    *(_QWORD *)&v77[24] = v74;
    *(_QWORD *)&v77[32] = (char *)v74 + 16 * (int)((v75 - (_BYTE *)v74) >> 4);
    *(_QWORD *)&v77[40] = *(_QWORD *)&v77[32];
  }
  sub_1002181EC((uint64_t)v77, a3);
  if (*(_QWORD *)&v77[56])
  {
    v45 = (unsigned int *)(*(_QWORD *)&v77[56] + 20);
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
      sub_100256C90((uint64_t)v77);
  }
  *(_QWORD *)&v77[56] = 0;
  memset(&v77[16], 0, 32);
  if (*(int *)&v77[4] >= 1)
  {
    v48 = 0;
    v49 = v78;
    do
      *(_DWORD *)&v49[4 * v48++] = 0;
    while (v48 < *(int *)&v77[4]);
  }
  if (v79 != &v80)
    j__free(v79);
  if (*(_BYTE *)(a1 + 504))
  {
    *(_QWORD *)v77 = 0x242FF4006;
    memset(&v77[16], 0, 48);
    v78 = &v77[8];
    v79 = &v80;
    v80 = 0uLL;
    *(_DWORD *)&v77[8] = (unint64_t)(v72 - (_BYTE *)v71) >> 3;
    *(_DWORD *)&v77[12] = 1;
    if (v72 != v71)
    {
      v80 = vdupq_n_s64(8uLL);
      *(_QWORD *)&v77[16] = v71;
      *(_QWORD *)&v77[24] = v71;
      *(_QWORD *)&v77[32] = (char *)v71 + 8 * (int)((v72 - (_BYTE *)v71) >> 3);
      *(_QWORD *)&v77[40] = *(_QWORD *)&v77[32];
    }
    sub_1002181EC((uint64_t)v77, a4);
    if (*(_QWORD *)&v77[56])
    {
      v50 = (unsigned int *)(*(_QWORD *)&v77[56] + 20);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
        sub_100256C90((uint64_t)v77);
    }
    *(_QWORD *)&v77[56] = 0;
    memset(&v77[16], 0, 32);
    if (*(int *)&v77[4] >= 1)
    {
      v53 = 0;
      v54 = v78;
      do
        *(_DWORD *)&v54[4 * v53++] = 0;
      while (v53 < *(int *)&v77[4]);
    }
    if (v79 != &v80)
      j__free(v79);
  }
  if (*(_BYTE *)(a1 + 505))
  {
    *(_QWORD *)v77 = 0x242FF4006;
    memset(&v77[16], 0, 48);
    v78 = &v77[8];
    v79 = &v80;
    v80 = 0uLL;
    *(_DWORD *)&v77[8] = (unint64_t)(v69 - (_BYTE *)v68) >> 3;
    *(_DWORD *)&v77[12] = 1;
    if (v69 != v68)
    {
      v80 = vdupq_n_s64(8uLL);
      *(_QWORD *)&v77[16] = v68;
      *(_QWORD *)&v77[24] = v68;
      *(_QWORD *)&v77[32] = (char *)v68 + 8 * (int)((v69 - (_BYTE *)v68) >> 3);
      *(_QWORD *)&v77[40] = *(_QWORD *)&v77[32];
    }
    sub_1002181EC((uint64_t)v77, a5);
    if (*(_QWORD *)&v77[56])
    {
      v55 = (unsigned int *)(*(_QWORD *)&v77[56] + 20);
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
        sub_100256C90((uint64_t)v77);
    }
    *(_QWORD *)&v77[56] = 0;
    memset(&v77[16], 0, 32);
    if (*(int *)&v77[4] >= 1)
    {
      v58 = 0;
      v59 = v78;
      do
        *(_DWORD *)&v59[4 * v58++] = 0;
      while (v58 < *(int *)&v77[4]);
    }
    if (v79 != &v80)
      j__free(v79);
  }
  if (*(_BYTE *)(a1 + 506))
  {
    *(_QWORD *)v77 = 0x242FF4006;
    memset(&v77[16], 0, 48);
    v78 = &v77[8];
    v79 = &v80;
    v80 = 0uLL;
    *(_DWORD *)&v77[8] = (unint64_t)(v66 - (_BYTE *)__p) >> 3;
    *(_DWORD *)&v77[12] = 1;
    if (v66 != __p)
    {
      v80 = vdupq_n_s64(8uLL);
      *(_QWORD *)&v77[16] = __p;
      *(_QWORD *)&v77[24] = __p;
      *(_QWORD *)&v77[32] = (char *)__p + 8 * (int)((v66 - (_BYTE *)__p) >> 3);
      *(_QWORD *)&v77[40] = *(_QWORD *)&v77[32];
    }
    sub_1002181EC((uint64_t)v77, a6);
    if (*(_QWORD *)&v77[56])
    {
      v60 = (unsigned int *)(*(_QWORD *)&v77[56] + 20);
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
        sub_100256C90((uint64_t)v77);
    }
    *(_QWORD *)&v77[56] = 0;
    memset(&v77[16], 0, 32);
    if (*(int *)&v77[4] >= 1)
    {
      v63 = 0;
      v64 = v78;
      do
        *(_DWORD *)&v64[4 * v63++] = 0;
      while (v63 < *(int *)&v77[4]);
    }
    if (v79 != &v80)
      j__free(v79);
  }
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 576);
  if (__p)
  {
    v66 = __p;
    operator delete(__p);
  }
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  if (v82)
    sub_1002989D0(v81);
}

void sub_100317ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_100006BE4((uint64_t)va);
  sub_1001D40CC(v13 - 80);
  _Unwind_Resume(a1);
}

void sub_100317AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  void *v23;
  void *v24;
  void *v25;

  sub_100006BE4((uint64_t)&a21);
  if (a9)
  {
    operator delete(a9);
    v23 = a12;
    if (!a12)
    {
LABEL_3:
      v24 = a15;
      if (!a15)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v23 = a12;
    if (!a12)
      goto LABEL_3;
  }
  operator delete(v23);
  v24 = a15;
  if (!a15)
  {
LABEL_4:
    v25 = __p;
    if (!__p)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  operator delete(v24);
  v25 = __p;
  if (!__p)
  {
LABEL_6:
    sub_1001D40CC(v21 - 80);
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v25);
  goto LABEL_6;
}

void sub_100317BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v9;
  double v10;
  double v11;
  double v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  float64x2_t v54;
  float64x2_t v55;
  uint64_t v56;
  float64x2_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _OWORD *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  double *v99;
  double *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  double *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double *v111;
  _OWORD *v112;
  double *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  float64x2_t v118;
  uint64_t v120;
  uint64_t v121;
  double v122;
  _BYTE v123[64];
  _BYTE *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  float32x4_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  double v136;
  long double v137[2];

  v9 = *(double *)(a1 + 544);
  v137[0] = v9 * 3.14159265 / 180.0;
  v10 = *(double *)(a1 + 536);
  v136 = v10 / sin(v137[0]);
  v11 = *(double *)(a1 + 512);
  if (v11 != 1.0)
  {
    *(_DWORD *)v123 = 1124007936;
    memset(&v123[4], 0, 60);
    v124 = &v123[8];
    v125 = &v126;
    v126 = 0;
    v127 = 0;
    v12 = *(double *)(a1 + 528) / fmin(v11, 1.0);
    v134 = (char *)(a1 + 8);
    v135 = 0;
    LODWORD(v133) = 16842752;
    v130 = (2 * vcvtpd_u64_f64(v12 * 3.71692219)) | 1;
    v131.i32[0] = 33619968;
    v131.i64[1] = (uint64_t)v123;
    v132 = 0;
    v129 = v130;
    sub_1003470CC((uint64_t)&v133, (uint64_t)&v131, (int *)&v129, 4, v12, 0.0);
    v135 = 0;
    LODWORD(v133) = 16842752;
    v134 = v123;
    v131.i32[0] = 33619968;
    v131.i64[1] = a1 + 104;
    v132 = 0;
    v128 = 0;
    sub_100322D5C((uint64_t)&v133, (uint64_t)&v131, (int *)&v128, 5, *(double *)(a1 + 512), *(double *)(a1 + 512));
    LODWORD(v133) = *(_DWORD *)(a1 + 568);
    sub_1003185D0(a1, &v136, &v133);
    if (*(_QWORD *)&v123[56])
    {
      v13 = (unsigned int *)(*(_QWORD *)&v123[56] + 20);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        sub_100256C90((uint64_t)v123);
    }
    *(_QWORD *)&v123[56] = 0;
    memset(&v123[16], 0, 32);
    if (*(int *)&v123[4] >= 1)
    {
      v16 = 0;
      v17 = v124;
      do
        *(_DWORD *)&v17[4 * v16++] = 0;
      while (v16 < *(int *)&v123[4]);
    }
    if (v125 != &v126)
      j__free(v125);
    goto LABEL_29;
  }
  v18 = *(_QWORD *)(a1 + 64);
  if (v18)
  {
    v19 = (unsigned int *)(v18 + 20);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
  }
  v21 = (_DWORD *)(a1 + 104);
  v22 = *(_QWORD *)(a1 + 160);
  if (v22)
  {
    v23 = (unsigned int *)(v22 + 20);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      sub_100256C90(a1 + 104);
  }
  v26 = (_DWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) > 0)
  {
    v27 = 0;
    v28 = *(_QWORD *)(a1 + 168);
    do
    {
      *(_DWORD *)(v28 + 4 * v27++) = 0;
      v29 = *(int *)(a1 + 108);
    }
    while (v27 < v29);
    *v21 = *v26;
    if ((int)v29 <= 2)
    {
      v30 = *(_DWORD *)(a1 + 12);
      if (v30 <= 2)
        goto LABEL_25;
    }
LABEL_27:
    sub_100256B48(a1 + 104, (uint64_t)v26);
    goto LABEL_28;
  }
  *v21 = *v26;
  v30 = *(_DWORD *)(a1 + 12);
  if (v30 > 2)
    goto LABEL_27;
LABEL_25:
  *(_DWORD *)(a1 + 108) = v30;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 16);
  v31 = *(_QWORD **)(a1 + 80);
  v32 = *(_QWORD **)(a1 + 176);
  *v32 = *v31;
  v32[1] = v31[1];
LABEL_28:
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 56);
  *(_DWORD *)v123 = *(_DWORD *)(a1 + 568);
  sub_1003185D0(a1, &v136, v123);
LABEL_29:
  v33 = v9 / 180.0;
  v34 = log10((double)*(int *)(a1 + 488));
  v35 = (v34 + log10((double)*(int *)(a1 + 492))) * 5.0 * 0.5 + 1.04139269;
  *(double *)(a1 + 496) = v35;
  v36 = log10(v33);
  v133 = (char *)vrev64_s32(**(int32x2_t **)(a1 + 168));
  sub_100254168((uint64_t *)&v133, 0, (uint64_t)v123);
  (*(void (**)(_QWORD, _BYTE *, uint64_t, _QWORD))(**(_QWORD **)v123 + 24))(*(_QWORD *)v123, v123, a1 + 392, 0);
  sub_100008C98((uint64_t)v123);
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v37 = *(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576);
  if (!v37)
    return;
  v120 = a4;
  v121 = a3;
  v117 = a5;
  v38 = 0;
  v39 = (unint64_t)(-v35 / v36);
  v40 = v37 >> 4;
  if (v40 <= 1)
    v41 = 1;
  else
    v41 = v40;
  __asm { FMOV            V0.2D, #0.5 }
  v118 = _Q0;
  do
  {
    v48 = (int *)(*(_QWORD *)(a1 + 576) + 16 * v38);
    v49 = *v48;
    v50 = v48[1];
    if (*(_BYTE *)(*(_QWORD *)(a1 + 408) + **(_QWORD **)(a1 + 464) * v50 + v49))
      goto LABEL_36;
    if (*(double *)(*(_QWORD *)(a1 + 216) + **(_QWORD **)(a1 + 272) * v50 + 8 * v49) == -1024.0)
      goto LABEL_36;
    v122 = 0.0;
    sub_100318EF4(a1, v48, &v133, &v122, v137);
    if (v39 > (v134 - v133) >> 5)
      goto LABEL_36;
    v51 = v122;
    v52 = v137[0];
    sub_100319340(a1, (uint64_t)&v133, (double *)v123, v122, v137[0], v33);
    v53 = -1.0;
    if (*(int *)(a1 + 520) >= 1)
    {
      if ((sub_1003195F8(a1, (uint64_t)&v133, (double *)v123, (double *)(a1 + 560), v51, v52, v33) & 1) == 0)
        goto LABEL_36;
      if (*(int *)(a1 + 520) >= 2)
      {
        v53 = sub_10031987C(a1, (__int128 *)v123);
        if (v53 <= *(double *)(a1 + 552))
          goto LABEL_36;
      }
    }
    v54 = vaddq_f64(*(float64x2_t *)&v123[16], v118);
    v55 = vaddq_f64(*(float64x2_t *)v123, v118);
    v56 = *(uint64_t *)(a1 + 512);
    if (*(double *)&v56 != 1.0)
    {
      v57 = (float64x2_t)vdupq_lane_s64(v56, 0);
      v54 = vdivq_f64(v54, v57);
      v55 = vdivq_f64(v55, v57);
      *(float64x2_t *)v123 = v55;
      *(float64x2_t *)&v123[16] = v54;
      *(double *)&v123[32] = *(double *)&v123[32] / *(double *)&v56;
    }
    v131 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v55), v54);
    sub_10031A254(a2, &v131);
    if (*(_BYTE *)(a1 + 504))
    {
      v59 = *(char **)(v121 + 8);
      v58 = *(_QWORD *)(v121 + 16);
      if ((unint64_t)v59 < v58)
      {
        *(_QWORD *)v59 = *(_QWORD *)&v123[32];
        v60 = (uint64_t)(v59 + 8);
LABEL_68:
        *(_QWORD *)(v121 + 8) = v60;
        goto LABEL_69;
      }
      v61 = *(char **)v121;
      v62 = (uint64_t)&v59[-*(_QWORD *)v121];
      v63 = v62 >> 3;
      v64 = (v62 >> 3) + 1;
      if (v64 >> 61)
        goto LABEL_118;
      v65 = v58 - (_QWORD)v61;
      if (v65 >> 2 > v64)
        v64 = v65 >> 2;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
        v66 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v66 = v64;
      if (v66)
      {
        if (v66 >> 61)
          goto LABEL_117;
        v67 = operator new(8 * v66);
        v68 = &v67[8 * v63];
        *v68 = *(_QWORD *)&v123[32];
        v60 = (uint64_t)(v68 + 1);
        if (v59 == v61)
          goto LABEL_66;
      }
      else
      {
        v67 = 0;
        v68 = (_QWORD *)(8 * v63);
        *(_QWORD *)(8 * v63) = *(_QWORD *)&v123[32];
        v60 = 8 * v63 + 8;
        if (v59 == v61)
        {
LABEL_66:
          *(_QWORD *)v121 = v68;
          *(_QWORD *)(v121 + 8) = v60;
          *(_QWORD *)(v121 + 16) = &v67[8 * v66];
          if (v61)
            operator delete(v61);
          goto LABEL_68;
        }
      }
      v69 = v59 - 8 - v61;
      if (v69 < 0x58)
        goto LABEL_121;
      if ((unint64_t)(v59 - &v67[v62]) < 0x20)
        goto LABEL_121;
      v70 = (v69 >> 3) + 1;
      v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
      v72 = &v59[-v71];
      v68 = (_QWORD *)((char *)v68 - v71);
      v73 = &v67[8 * v63 - 16];
      v74 = v59 - 16;
      v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v76 = *(_OWORD *)v74;
        *(v73 - 1) = *((_OWORD *)v74 - 1);
        *v73 = v76;
        v73 -= 2;
        v74 -= 32;
        v75 -= 4;
      }
      while (v75);
      v59 = v72;
      if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_121:
        do
        {
          v77 = *((_QWORD *)v59 - 1);
          v59 -= 8;
          *--v68 = v77;
        }
        while (v59 != v61);
      }
      goto LABEL_66;
    }
LABEL_69:
    if (*(_BYTE *)(a1 + 505))
    {
      v79 = *(char **)(v120 + 8);
      v78 = *(_QWORD *)(v120 + 16);
      if ((unint64_t)v79 < v78)
      {
        *(_QWORD *)v79 = v127;
        v80 = (uint64_t)(v79 + 8);
LABEL_91:
        *(_QWORD *)(v120 + 8) = v80;
        goto LABEL_92;
      }
      v81 = *(char **)v120;
      v82 = (uint64_t)&v79[-*(_QWORD *)v120];
      v83 = v82 >> 3;
      v84 = (v82 >> 3) + 1;
      if (v84 >> 61)
        goto LABEL_118;
      v85 = v78 - (_QWORD)v81;
      if (v85 >> 2 > v84)
        v84 = v85 >> 2;
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
        v86 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v86 = v84;
      if (v86)
      {
        if (v86 >> 61)
          goto LABEL_117;
        v87 = operator new(8 * v86);
        v88 = &v87[8 * v83];
        *v88 = v127;
        v80 = (uint64_t)(v88 + 1);
        if (v79 == v81)
          goto LABEL_89;
      }
      else
      {
        v87 = 0;
        v88 = (_QWORD *)(8 * v83);
        *(_QWORD *)(8 * v83) = v127;
        v80 = 8 * v83 + 8;
        if (v79 == v81)
        {
LABEL_89:
          *(_QWORD *)v120 = v88;
          *(_QWORD *)(v120 + 8) = v80;
          *(_QWORD *)(v120 + 16) = &v87[8 * v86];
          if (v81)
            operator delete(v81);
          goto LABEL_91;
        }
      }
      v89 = v79 - 8 - v81;
      if (v89 < 0x58)
        goto LABEL_122;
      if ((unint64_t)(v79 - &v87[v82]) < 0x20)
        goto LABEL_122;
      v90 = (v89 >> 3) + 1;
      v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
      v92 = &v79[-v91];
      v88 = (_QWORD *)((char *)v88 - v91);
      v93 = &v87[8 * v83 - 16];
      v94 = v79 - 16;
      v95 = v90 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v96 = *(_OWORD *)v94;
        *(v93 - 1) = *((_OWORD *)v94 - 1);
        *v93 = v96;
        v93 -= 2;
        v94 -= 32;
        v95 -= 4;
      }
      while (v95);
      v79 = v92;
      if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_122:
        do
        {
          v97 = *((_QWORD *)v79 - 1);
          v79 -= 8;
          *--v88 = v97;
        }
        while (v79 != v81);
      }
      goto LABEL_89;
    }
LABEL_92:
    if (*(_BYTE *)(a1 + 506) && *(int *)(a1 + 520) >= 2)
    {
      v99 = *(double **)(v117 + 8);
      v98 = *(_QWORD *)(v117 + 16);
      if ((unint64_t)v99 >= v98)
      {
        v100 = *(double **)v117;
        v101 = (uint64_t)v99 - *(_QWORD *)v117;
        v102 = v101 >> 3;
        v103 = (v101 >> 3) + 1;
        if (v103 >> 61)
LABEL_118:
          sub_100008F3C();
        v104 = v98 - (_QWORD)v100;
        if (v104 >> 2 > v103)
          v103 = v104 >> 2;
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v103;
        if (v105)
        {
          if (v105 >> 61)
LABEL_117:
            sub_100008FF8();
          v106 = operator new(8 * v105);
          v107 = (double *)&v106[8 * v102];
          *v107 = v53;
          v47 = (uint64_t)(v107 + 1);
          if (v99 == v100)
          {
LABEL_112:
            *(_QWORD *)v117 = v107;
            *(_QWORD *)(v117 + 8) = v47;
            *(_QWORD *)(v117 + 16) = &v106[8 * v105];
            if (v100)
              operator delete(v100);
            goto LABEL_35;
          }
        }
        else
        {
          v106 = 0;
          v107 = (double *)(8 * v102);
          *(double *)(8 * v102) = v53;
          v47 = 8 * v102 + 8;
          if (v99 == v100)
            goto LABEL_112;
        }
        v108 = (char *)(v99 - 1) - (char *)v100;
        if (v108 < 0x58)
          goto LABEL_123;
        if ((unint64_t)((char *)v99 - &v106[v101]) < 0x20)
          goto LABEL_123;
        v109 = (v108 >> 3) + 1;
        v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
        v111 = &v99[v110 / 0xFFFFFFFFFFFFFFF8];
        v107 = (double *)((char *)v107 - v110);
        v112 = &v106[8 * v102 - 16];
        v113 = v99 - 2;
        v114 = v109 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v115 = *(_OWORD *)v113;
          *(v112 - 1) = *((_OWORD *)v113 - 1);
          *v112 = v115;
          v112 -= 2;
          v113 -= 4;
          v114 -= 4;
        }
        while (v114);
        v99 = v111;
        if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_123:
          do
          {
            v116 = *((_QWORD *)v99-- - 1);
            *((_QWORD *)v107-- - 1) = v116;
          }
          while (v99 != v100);
        }
        goto LABEL_112;
      }
      *v99 = v53;
      v47 = (uint64_t)(v99 + 1);
LABEL_35:
      *(_QWORD *)(v117 + 8) = v47;
    }
LABEL_36:
    ++v38;
  }
  while (v38 != v41);
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
}

void sub_100318554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100318568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10031857C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100318590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100008C98((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003185A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(_QWORD *)(v1 - 168) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003185D0(uint64_t a1, double *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _BYTE *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE *v39;
  void *v40;
  int32x2_t v41;
  int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  _BYTE *v54;
  int v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  double v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  double v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  int v93;
  unsigned int v94;
  BOOL v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE v101[64];
  _BYTE *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t __src;
  uint64_t *v108;
  uint64_t v109;

  v5 = **(_QWORD **)(a1 + 168);
  *(_DWORD *)v101 = 1124007936;
  memset(&v101[4], 0, 60);
  v102 = &v101[8];
  v103 = &v104;
  v104 = 0;
  v105 = 0;
  __src = v5;
  sub_100255F30(v101, 2, &__src, 6);
  if ((_BYTE *)(a1 + 200) != v101)
  {
    v6 = *(_QWORD *)(a1 + 256);
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 20);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        sub_100256C90(a1 + 200);
    }
    *(_QWORD *)(a1 + 256) = 0;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    if (*(int *)(a1 + 204) >= 1)
    {
      v10 = 0;
      v11 = *(_QWORD *)(a1 + 264);
      do
        *(_DWORD *)(v11 + 4 * v10++) = 0;
      while (v10 < *(int *)(a1 + 204));
    }
    v12 = *(_DWORD *)&v101[4];
    v13 = *(_OWORD *)&v101[16];
    *(_OWORD *)(a1 + 200) = *(_OWORD *)v101;
    *(_OWORD *)(a1 + 216) = v13;
    v14 = *(_OWORD *)&v101[48];
    *(_OWORD *)(a1 + 232) = *(_OWORD *)&v101[32];
    *(_OWORD *)(a1 + 248) = v14;
    v15 = *(_QWORD **)(a1 + 272);
    if (v15 == (_QWORD *)(a1 + 280))
    {
      v16 = v103;
      if (v12 <= 2)
        goto LABEL_12;
    }
    else
    {
      j__free(v15);
      *(_QWORD *)(a1 + 264) = a1 + 208;
      *(_QWORD *)(a1 + 272) = a1 + 280;
      v15 = (_QWORD *)(a1 + 280);
      v16 = v103;
      if (*(int *)&v101[4] <= 2)
      {
LABEL_12:
        *v15 = *v16;
        v15[1] = v16[1];
        goto LABEL_25;
      }
    }
    *(_QWORD *)(a1 + 264) = v102;
    *(_QWORD *)(a1 + 272) = v16;
    v102 = &v101[8];
    v103 = &v104;
LABEL_25:
    *(_DWORD *)v101 = 1124007936;
    memset(&v101[4], 0, 60);
    v22 = v103;
    if (v103 == &v104)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (*(_QWORD *)&v101[56])
  {
    v17 = (unsigned int *)(*(_QWORD *)&v101[56] + 20);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      sub_100256C90((uint64_t)v101);
  }
  *(_QWORD *)&v101[56] = 0;
  memset(&v101[16], 0, 32);
  if (*(int *)&v101[4] >= 1)
  {
    v20 = 0;
    v21 = v102;
    do
      *(_DWORD *)&v21[4 * v20++] = 0;
    while (v20 < *(int *)&v101[4]);
  }
  v22 = v103;
  if (v103 != &v104)
LABEL_26:
    j__free(v22);
LABEL_27:
  v23 = **(_QWORD **)(a1 + 168);
  *(_DWORD *)v101 = 1124007936;
  memset(&v101[4], 0, 60);
  v102 = &v101[8];
  v103 = &v104;
  v104 = 0;
  v105 = 0;
  __src = v23;
  sub_100255F30(v101, 2, &__src, 6);
  if ((_BYTE *)(a1 + 296) == v101)
  {
    if (*(_QWORD *)&v101[56])
    {
      v35 = (unsigned int *)(*(_QWORD *)&v101[56] + 20);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
        sub_100256C90((uint64_t)v101);
    }
    *(_QWORD *)&v101[56] = 0;
    memset(&v101[16], 0, 32);
    if (*(int *)&v101[4] >= 1)
    {
      v38 = 0;
      v39 = v102;
      do
        *(_DWORD *)&v39[4 * v38++] = 0;
      while (v38 < *(int *)&v101[4]);
    }
    v40 = v103;
    if (v103 != &v104)
      goto LABEL_52;
    goto LABEL_53;
  }
  v24 = *(_QWORD *)(a1 + 352);
  if (v24)
  {
    v25 = (unsigned int *)(v24 + 20);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
      sub_100256C90(a1 + 296);
  }
  *(_QWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  if (*(int *)(a1 + 300) >= 1)
  {
    v28 = 0;
    v29 = *(_QWORD *)(a1 + 360);
    do
      *(_DWORD *)(v29 + 4 * v28++) = 0;
    while (v28 < *(int *)(a1 + 300));
  }
  v30 = *(_DWORD *)&v101[4];
  v31 = *(_OWORD *)&v101[16];
  *(_OWORD *)(a1 + 296) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 312) = v31;
  v32 = *(_OWORD *)&v101[48];
  *(_OWORD *)(a1 + 328) = *(_OWORD *)&v101[32];
  *(_OWORD *)(a1 + 344) = v32;
  v33 = *(_QWORD **)(a1 + 368);
  if (v33 == (_QWORD *)(a1 + 376))
  {
    v34 = v103;
    if (v30 <= 2)
      goto LABEL_38;
  }
  else
  {
    j__free(v33);
    *(_QWORD *)(a1 + 360) = a1 + 304;
    *(_QWORD *)(a1 + 368) = a1 + 376;
    v33 = (_QWORD *)(a1 + 376);
    v34 = v103;
    if (*(int *)&v101[4] <= 2)
    {
LABEL_38:
      *v33 = *v34;
      v33[1] = v34[1];
      goto LABEL_51;
    }
  }
  *(_QWORD *)(a1 + 360) = v102;
  *(_QWORD *)(a1 + 368) = v34;
  v102 = &v101[8];
  v103 = &v104;
LABEL_51:
  *(_DWORD *)v101 = 1124007936;
  memset(&v101[4], 0, 60);
  v40 = v103;
  if (v103 != &v104)
LABEL_52:
    j__free(v40);
LABEL_53:
  v41 = *(int32x2_t *)(a1 + 112);
  *(int32x2_t *)(a1 + 488) = vrev64_s32(v41);
  HIDWORD(__src) = v41.i32[0];
  LODWORD(__src) = v41.i32[0] - 1;
  v106 = 0x7FFFFFFF80000000;
  sub_100256CFC((uint64_t)v101, (_DWORD *)(a1 + 200), (int *)&__src, &v106);
  v106 = 0xC090000000000000;
  LODWORD(__src) = -1056833530;
  v108 = &v106;
  v109 = 0x100000001;
  v42 = sub_100263CBC();
  sub_100219808((uint64_t)v101, (uint64_t)&__src, (uint64_t)v42);
  if (*(_QWORD *)&v101[56])
  {
    v43 = (unsigned int *)(*(_QWORD *)&v101[56] + 20);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
      sub_100256C90((uint64_t)v101);
  }
  *(_QWORD *)&v101[56] = 0;
  memset(&v101[16], 0, 32);
  if (*(int *)&v101[4] >= 1)
  {
    v46 = 0;
    v47 = v102;
    do
      *(_DWORD *)&v47[4 * v46++] = 0;
    while (v46 < *(int *)&v101[4]);
  }
  if (v103 != &v104)
    j__free(v103);
  v48 = *(_DWORD *)(a1 + 488);
  __src = 0x7FFFFFFF80000000;
  LODWORD(v106) = v48 - 1;
  HIDWORD(v106) = v48;
  sub_100256CFC((uint64_t)v101, (_DWORD *)(a1 + 200), (int *)&__src, &v106);
  v106 = 0xC090000000000000;
  LODWORD(__src) = -1056833530;
  v108 = &v106;
  v109 = 0x100000001;
  v49 = sub_100263CBC();
  sub_100219808((uint64_t)v101, (uint64_t)&__src, (uint64_t)v49);
  if (*(_QWORD *)&v101[56])
  {
    v50 = (unsigned int *)(*(_QWORD *)&v101[56] + 20);
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
      sub_100256C90((uint64_t)v101);
  }
  *(_QWORD *)&v101[56] = 0;
  memset(&v101[16], 0, 32);
  if (*(int *)&v101[4] >= 1)
  {
    v53 = 0;
    v54 = v102;
    do
      *(_DWORD *)&v54[4 * v53++] = 0;
    while (v53 < *(int *)&v101[4]);
  }
  if (v103 != &v104)
    j__free(v103);
  v55 = *(_DWORD *)(a1 + 492);
  LODWORD(v56) = *(_DWORD *)(a1 + 488);
  v57 = -1.0;
  if (v55 >= 2)
  {
    v58 = 0;
    v59 = 1;
    do
    {
      if ((int)v56 >= 2)
      {
        v60 = 0;
        v61 = **(_QWORD **)(a1 + 176);
        v62 = *(_QWORD *)(a1 + 216) + **(_QWORD **)(a1 + 272) * v58;
        v63 = *(_QWORD *)(a1 + 312) + **(_QWORD **)(a1 + 368) * v58;
        v64 = *(_QWORD *)(a1 + 120) + 1;
        v65 = v64 + v61 * v59;
        v66 = v64 + v61 * v58;
        do
        {
          v67 = *(unsigned __int8 *)(v65 + v60) - *(unsigned __int8 *)(v66 + v60 - 1);
          v68 = *(unsigned __int8 *)(v66 + v60) - *(unsigned __int8 *)(v65 + v60 - 1);
          v69 = v68 + v67;
          v70 = v67 - v68;
          v71 = sqrt((double)(v70 * v70 + v69 * v69) * 0.25);
          *(double *)(v63 + 8 * v60) = v71;
          if (v71 <= *a2)
          {
            *(_QWORD *)(v62 + 8 * v60) = 0xC090000000000000;
          }
          else
          {
            *(double *)(v62 + 8 * v60) = sub_10022FF5C((float)v69, (float)-v70) * 0.0174532925;
            if (v71 > v57)
              v57 = v71;
          }
          ++v60;
          v56 = *(int *)(a1 + 488);
        }
        while (v60 < v56 - 1);
        v55 = *(_DWORD *)(a1 + 492);
      }
      ++v58;
      ++v59;
    }
    while (v58 < v55 - 1);
  }
  v72 = (int)v56 * v55;
  v73 = *(_QWORD *)(a1 + 576);
  v74 = (*(_QWORD *)(a1 + 584) - v73) >> 4;
  if (v72 <= v74)
  {
    if (v72 < v74)
      *(_QWORD *)(a1 + 584) = v73 + 16 * v72;
  }
  else
  {
    sub_10031CE38(a1 + 576, v72 - v74);
  }
  v75 = *a3;
  if ((_DWORD)v75)
  {
    v76 = (char *)operator new(8 * v75);
    bzero(v76, 8 * v75);
    v77 = (char *)operator new(8 * v75);
    bzero(v77, 8 * v75);
    v78 = 0.0;
    if (v57 <= 0.0)
      goto LABEL_91;
    goto LABEL_90;
  }
  v76 = 0;
  v77 = 0;
  v78 = 0.0;
  if (v57 > 0.0)
LABEL_90:
    v78 = (double)(v75 - 1) / v57;
LABEL_91:
  v79 = *(_DWORD *)(a1 + 492);
  if (v79 >= 2)
  {
    v80 = *(_DWORD *)(a1 + 488);
    if (v80 >= 2)
    {
      v81 = 0;
      v82 = 0;
      v83 = (v79 - 1);
      v84 = *(_QWORD *)(a1 + 312);
      v85 = **(_QWORD **)(a1 + 368);
      v86 = (v80 - 1);
      do
      {
        v87 = 0;
        do
        {
          v88 = v78 * *(double *)(v84 + 8 * v87);
          v89 = 8 * (int)v88;
          v90 = *(_QWORD *)&v77[v89];
          v91 = *(_QWORD *)(a1 + 576) + 16 * (v82 + v87);
          if (v90)
            v92 = (uint64_t *)(v90 + 8);
          else
            v92 = (uint64_t *)&v76[v89];
          *v92 = v91;
          *(_QWORD *)&v77[8 * (int)v88] = v91;
          *(_DWORD *)v91 = v87;
          *(_DWORD *)(v91 + 4) = v81;
          *(_QWORD *)(v91 + 8) = 0;
          ++v87;
        }
        while (v86 != v87);
        ++v81;
        v84 += v85;
        v82 += v87;
      }
      while (v81 != v83);
      LODWORD(v75) = *a3;
    }
  }
  v93 = v75 - 1;
  while (1)
  {
    v94 = v93;
    v95 = __OFSUB__(v93--, 1);
    if (v93 < 0 != v95)
      break;
    v75 = (v75 - 1);
    if (*(_QWORD *)&v76[8 * v94])
    {
      v96 = *(_QWORD *)&v77[8 * v94];
      v97 = v75 + 1;
      do
      {
        v98 = (v97 - 2);
        v99 = *(_QWORD *)&v76[8 * v98];
        if (v99)
        {
          *(_QWORD *)(v96 + 8) = v99;
          v96 = *(_QWORD *)&v77[8 * v98];
        }
        --v97;
      }
      while (v97 > 1);
      break;
    }
  }
  if (v77)
    operator delete(v77);
  if (v76)
    operator delete(v76);
}

void sub_100318E68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100318E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10022EB50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100318E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10022EB50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100318EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100318EF4(uint64_t a1, int *a2, char **a3, double *a4, double *a5)
{
  char **v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  double *v22;
  double v23;
  char *v24;
  char *v25;
  __double2 v26;
  uint64_t v27;
  float sinval;
  float cosval;
  int32x2_t v30;
  int32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  float v41;
  __float2 v42;
  _BYTE *v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  double *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  char **v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v6 = a3;
  v8 = *a3;
  a3[1] = *a3;
  v9 = *a2;
  v10 = a2[1];
  v11 = (_BYTE *)(*(_QWORD *)(a1 + 408) + **(_QWORD **)(a1 + 464) * v10 + v9);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + **(_QWORD **)(a1 + 272) * v10 + 8 * v9);
  *(_QWORD *)a4 = v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 312) + **(_QWORD **)(a1 + 368) * v10 + 8 * v9);
  v14 = (unint64_t)a3[2];
  if ((unint64_t)v8 >= v14)
  {
    v16 = v14 - (_QWORD)v8;
    v17 = v16 >> 4;
    if ((unint64_t)(v16 >> 4) <= 1)
      v17 = 1;
    v18 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0;
    v19 = 0x7FFFFFFFFFFFFFFLL;
    if (!v18)
      v19 = v17;
    if (v19 >> 59)
LABEL_51:
      sub_100008FF8();
    v20 = 8 * v19;
    v21 = operator new(32 * v19);
    *v21 = v9;
    v21[1] = v10;
    *((_QWORD *)v21 + 1) = v11;
    *((_QWORD *)v21 + 2) = v12;
    *((_QWORD *)v21 + 3) = v13;
    v15 = (char *)(v21 + 8);
    *v6 = (char *)v21;
    v6[1] = (char *)(v21 + 8);
    v6[2] = (char *)&v21[v20];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v8 = v9;
    *((_DWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 1) = v11;
    v15 = v8 + 32;
    *((_QWORD *)v8 + 2) = v12;
    *((_QWORD *)v8 + 3) = v13;
  }
  v6[1] = v15;
  v22 = a4;
  v23 = *a4;
  *v11 = 1;
  v25 = *v6;
  v24 = v6[1];
  if (v24 != *v6)
  {
    v26 = __sincos_stret(v23);
    v27 = 0;
    sinval = v26.__sinval;
    cosval = v26.__cosval;
    v60 = v6;
    while (1)
    {
      v30 = *(int32x2_t *)&v25[32 * v27];
      v31 = vmax_s32(v30, (int32x2_t)0x100000001);
      v32 = vmin_s32(vadd_s32(*(int32x2_t *)(a1 + 488), (int32x2_t)-1), vadd_s32(v30, (int32x2_t)0x100000001));
      v33 = vcgt_s32(vadd_s32(v31, (int32x2_t)-1), v32);
      if (((v33.i32[1] | v33.i32[0]) & 1) == 0)
        break;
LABEL_13:
      if (++v27 >= (unint64_t)((v24 - v25) >> 5))
        return;
    }
    v59 = v27;
    v34 = (v32.i32[0] + 1);
    v35 = v31.u32[1] - 1;
    v63 = (v32.i32[1] + 1);
    v64 = v31.u32[0] - 1;
LABEL_17:
    v36 = *(_QWORD *)(a1 + 408) + **(_QWORD **)(a1 + 464) * v35;
    v37 = *(_QWORD *)(a1 + 216) + **(_QWORD **)(a1 + 272) * v35;
    v38 = *(_QWORD *)(a1 + 312) + **(_QWORD **)(a1 + 368) * v35;
    v39 = v64;
    while (1)
    {
      if (((v39 | v35) & 0x80000000) != 0)
        goto LABEL_20;
      v43 = (_BYTE *)(v36 + v39);
      if (*(_BYTE *)(v36 + v39) == 1)
        goto LABEL_20;
      if (v39 >= *(int *)(a1 + 212))
        goto LABEL_20;
      if (v35 >= *(int *)(a1 + 208))
        goto LABEL_20;
      v44 = *(double *)(*(_QWORD *)(a1 + 216) + **(_QWORD **)(a1 + 272) * v35 + 8 * v39);
      if (v44 == -1024.0)
        goto LABEL_20;
      v45 = *v22 - v44;
      if (v45 < 0.0)
        v45 = -v45;
      if (v45 > 4.71238898)
      {
        v45 = v45 + -6.28318531;
        if (v45 < 0.0)
          v45 = -v45;
      }
      if (v45 > *a5)
        goto LABEL_20;
      *v43 = 1;
      v46 = *(_QWORD *)(v38 + 8 * v39);
      v65 = v38;
      v66 = v37;
      v47 = *(_QWORD *)(v37 + 8 * v39);
      v49 = v6[1];
      v48 = (unint64_t)v6[2];
      if ((unint64_t)v49 < v48)
      {
        *(_DWORD *)v49 = v39;
        *((_DWORD *)v49 + 1) = v35;
        *((_QWORD *)v49 + 1) = v43;
        v40 = v49 + 32;
        *((_QWORD *)v49 + 2) = v47;
        *((_QWORD *)v49 + 3) = v46;
      }
      else
      {
        v50 = a5;
        v51 = *v6;
        v52 = (v49 - v51) >> 5;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 59)
          sub_100008F3C();
        v54 = v48 - (_QWORD)v51;
        if (v54 >> 4 > v53)
          v53 = v54 >> 4;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFE0)
          v53 = 0x7FFFFFFFFFFFFFFLL;
        v61 = v53;
        if (v53)
        {
          if (v53 >> 59)
            goto LABEL_51;
          v55 = (char *)operator new(32 * v53);
        }
        else
        {
          v55 = 0;
        }
        v56 = &v55[32 * v52];
        *(_DWORD *)v56 = v39;
        *((_DWORD *)v56 + 1) = v35;
        *((_QWORD *)v56 + 1) = v43;
        *((_QWORD *)v56 + 2) = v47;
        *((_QWORD *)v56 + 3) = v46;
        v57 = v56;
        if (v49 != v51)
        {
          a5 = v50;
          do
          {
            v58 = *((_OWORD *)v49 - 1);
            *((_OWORD *)v57 - 2) = *((_OWORD *)v49 - 2);
            *((_OWORD *)v57 - 1) = v58;
            v57 -= 32;
            v49 -= 32;
          }
          while (v49 != v51);
          v6 = v60;
          v49 = *v60;
          v40 = v56 + 32;
          *v60 = v57;
          v60[1] = v56 + 32;
          v60[2] = &v55[32 * v61];
          if (!v49)
            goto LABEL_19;
LABEL_48:
          operator delete(v49);
          goto LABEL_19;
        }
        v6 = v60;
        a5 = v50;
        v40 = v56 + 32;
        *v60 = v56;
        v60[1] = v56 + 32;
        v60[2] = &v55[32 * v61];
        if (v49)
          goto LABEL_48;
      }
LABEL_19:
      v6[1] = v40;
      v37 = v66;
      v41 = *(double *)(v66 + 8 * v39);
      v42 = __sincosf_stret(v41);
      cosval = cosval + v42.__cosval;
      sinval = sinval + v42.__sinval;
      v22 = a4;
      *a4 = sub_10022FF5C(sinval, cosval) * 0.0174532925;
      v38 = v65;
LABEL_20:
      if (++v39 == v34)
      {
        if (++v35 == v63)
        {
          v25 = *v6;
          v24 = v6[1];
          v27 = v59;
          goto LABEL_13;
        }
        goto LABEL_17;
      }
    }
  }
}

void sub_100319340(uint64_t a1, uint64_t a2, double *a3, double a4, double a5, double a6)
{
  double *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float64x2_t v14;
  double v15;
  double *v16;
  unint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  int64x2_t v21;
  float64x2_t v22;
  unint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  int64x2_t v27;
  _DWORD *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  __double2 v33;
  uint64_t v34;
  unint64_t v35;
  int *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47[2];
  double v48;
  double v49[2];
  double v50;

  v49[1] = a5;
  v50 = a4;
  v10 = *(double **)a2;
  v11 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (!v11)
  {
    v48 = 0.0;
    v49[0] = 0.0;
    goto LABEL_13;
  }
  v12 = v11 >> 5;
  if (v12 <= 1)
    v12 = 1;
  if (v12 < 2)
  {
    v13 = 0;
    v14 = 0uLL;
    v15 = 0.0;
LABEL_10:
    v23 = v12 - v13;
    v24 = &v10[4 * v13];
    do
    {
      v25 = v24[3];
      v26 = *(_QWORD *)v24;
      v24 += 4;
      v27.i64[0] = (int)v26;
      v27.i64[1] = SHIDWORD(v26);
      v14 = vmlaq_n_f64(v14, vcvtq_f64_s64(v27), v25);
      v15 = v15 + v25;
      --v23;
    }
    while (v23);
    goto LABEL_12;
  }
  v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v16 = v10 + 4;
  v14 = 0uLL;
  v15 = 0.0;
  v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v18 = *(v16 - 1);
    v19 = v16[3];
    v15 = v15 + v18 + v19;
    v20 = *((_QWORD *)v16 - 4);
    v21.i64[0] = (int)v20;
    v21.i64[1] = SHIDWORD(v20);
    v22 = vcvtq_f64_s64(v21);
    v21.i64[0] = (int)*(_QWORD *)v16;
    v21.i64[1] = (int)HIDWORD(*(_QWORD *)v16);
    v14 = vaddq_f64(vaddq_f64(v14, vmulq_n_f64(v22, v18)), vmulq_n_f64(vcvtq_f64_s64(v21), v19));
    v16 += 8;
    v17 -= 2;
  }
  while (v17);
  if (v12 != v13)
    goto LABEL_10;
LABEL_12:
  v48 = v14.f64[1];
  v49[0] = v14.f64[0];
  if (v15 <= 0.0)
  {
LABEL_13:
    v47[0] = 0;
    v47[1] = 0;
    v28 = (_DWORD *)sub_10029430C(v47, 7);
    *v28 = 544044403;
    *(_DWORD *)((char *)v28 + 3) = 807419424;
    sub_100294B74(-215, v47, "region2rect", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 691);
  }
  v29 = v14.f64[0] / v15;
  v30 = v14.f64[1] / v15;
  v48 = v14.f64[1] / v15;
  v49[0] = v14.f64[0] / v15;
  sub_10031A414(a1, (double **)a2, v49, &v48, &v50);
  v32 = v31;
  v33 = __sincos_stret(v31);
  v34 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v34)
  {
    v35 = v34 >> 5;
    if (v35 <= 1)
      v35 = 1;
    v36 = (int *)(*(_QWORD *)a2 + 4);
    v37 = 0.0;
    v38 = 0.0;
    v39 = 0.0;
    v40 = 0.0;
    do
    {
      v41 = (double)*(v36 - 1) - v29;
      v42 = (double)*v36 - v30;
      v43 = v33.__sinval * v42 + v41 * v33.__cosval;
      v44 = v33.__cosval * v42 - v41 * v33.__sinval;
      if (v43 < v40)
        v45 = v43;
      else
        v45 = v40;
      if (v43 > v39)
        v39 = v43;
      else
        v40 = v45;
      if (v44 > v37)
      {
        v37 = v44;
      }
      else if (v44 < v38)
      {
        v38 = v44;
      }
      v36 += 8;
      --v35;
    }
    while (v35);
    v46 = v37 - v38;
  }
  else
  {
    v40 = 0.0;
    v39 = 0.0;
    v46 = 0.0;
  }
  *a3 = v29 + v40 * v33.__cosval;
  a3[1] = v30 + v40 * v33.__sinval;
  a3[2] = v29 + v39 * v33.__cosval;
  a3[3] = v30 + v39 * v33.__sinval;
  a3[4] = v46;
  a3[5] = v29;
  a3[6] = v30;
  a3[7] = v32;
  a3[8] = v33.__cosval;
  a3[9] = v33.__sinval;
  a3[10] = a5;
  a3[11] = a6;
  if (v46 < 1.0)
    a3[4] = 1.0;
}

void sub_1003195E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003195F8(uint64_t a1, uint64_t a2, double *a3, double *a4, double a5, double a6, double a7)
{
  char *v9;
  char *v10;
  unint64_t v15;
  int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int *v21;
  double i;
  double v23;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;

  v29 = a5;
  v9 = *(char **)a2;
  v10 = *(char **)(a2 + 8);
  if ((double)(unint64_t)((uint64_t)&v10[-*(_QWORD *)a2] >> 5)
     / (a3[4]
      * sqrt((a3[3] - a3[1]) * (a3[3] - a3[1]) + (a3[2] - *a3) * (a3[2] - *a3))) >= *a4)
    return 1;
  if (v10 == v9)
  {
    v16 = 0;
    v20 = 0.0;
    v19 = 0.0;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = (double)*(int *)v9;
    v18 = (double)*((int *)v9 + 1);
    v19 = 0.0;
    v10 = *(char **)a2;
    v20 = 0.0;
    do
    {
      **(_BYTE **)&v10[32 * v15 + 8] = 0;
      v10 = *(char **)a2;
      v21 = (int *)(*(_QWORD *)a2 + 32 * v15);
      if (sqrt(((double)v21[1] - v18) * ((double)v21[1] - v18) + ((double)*v21 - v17) * ((double)*v21 - v17)) < a3[4])
      {
        for (i = *(double *)&v10[32 * v15 + 16] - *((double *)v9 + 2); i <= -3.14159265; i = i + 6.28318531)
          ;
        while (i > 3.14159265)
          i = i + -6.28318531;
        v20 = v20 + i;
        v19 = v19 + i * i;
        ++v16;
      }
      ++v15;
    }
    while (v15 < (uint64_t)(*(_QWORD *)(a2 + 8) - (_QWORD)v10) >> 5);
  }
  v23 = sqrt((v19 + v20 / (double)v16 * -2.0 * v20) / (double)v16 + v20 / (double)v16 * (v20 / (double)v16));
  v27 = *(_QWORD *)v10;
  v28 = v23 + v23;
  sub_100318EF4(a1, (int *)&v27, (char **)a2, &v29, &v28);
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 < 0x40uLL)
    return 0;
  v25 = v29;
  sub_100319340(a1, a2, a3, v29, a6, a7);
  v26 = (double)(unint64_t)((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5)
      / (a3[4]
       * sqrt((a3[3] - a3[1]) * (a3[3] - a3[1]) + (a3[2] - *a3) * (a3[2] - *a3)));
  if (v26 >= *a4)
    return 1;
  else
    return sub_10031A6AC(a1, (int **)a2, a3, a4, v25, a6, a7, v26);
}

double sub_10031987C(uint64_t a1, __int128 *a2)
{
  double v4;
  double v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double v23;
  double v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  double v35;
  double v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  double v40;
  double v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  double v45;
  double v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  double v50;
  double v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  double v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  double v73;
  double v74;
  double v75;
  double v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  double v80;
  double v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  double v85;
  double v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  double v90;
  double v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  double v109;
  double v110;
  double v111;
  double v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  double v116;
  double v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  double v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  double v125;
  double v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  double v133;
  double v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  double v138;
  double v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  double v143;
  double v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  double v148;
  double v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  double v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  double v158;
  double v159;
  double v160;
  double v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;

  sub_10031A86C(a1, (uint64_t)a2);
  v5 = v4;
  if (v4 <= *(double *)(a1 + 552))
  {
    v6 = a2[3];
    v164 = a2[2];
    v165 = v6;
    v7 = a2[5];
    v166 = a2[4];
    v167 = v7;
    v8 = a2[1];
    v162 = *a2;
    v163 = v8;
    v9 = *((double *)&v7 + 1) * 0.5;
    *(double *)&v167 = *((double *)&v7 + 1) * 0.5 * 3.14159265;
    *((double *)&v167 + 1) = *((double *)&v7 + 1) * 0.5;
    sub_10031A86C(a1, (uint64_t)&v162);
    if (v10 > v5)
    {
      v11 = v165;
      a2[2] = v164;
      a2[3] = v11;
      v12 = v167;
      a2[4] = v166;
      a2[5] = v12;
      v13 = v163;
      v5 = v10;
      *a2 = v162;
      a2[1] = v13;
    }
    *(double *)&v167 = v9 * 0.5 * 3.14159265;
    *((double *)&v167 + 1) = v9 * 0.5;
    sub_10031A86C(a1, (uint64_t)&v162);
    if (v14 > v5)
    {
      v15 = v165;
      a2[2] = v164;
      a2[3] = v15;
      v16 = v167;
      a2[4] = v166;
      a2[5] = v16;
      v17 = v163;
      v5 = v14;
      *a2 = v162;
      a2[1] = v17;
    }
    v18 = v9 * 0.5 * 0.5;
    *(double *)&v167 = v18 * 3.14159265;
    *((double *)&v167 + 1) = v18;
    sub_10031A86C(a1, (uint64_t)&v162);
    if (v19 > v5)
    {
      v20 = v165;
      a2[2] = v164;
      a2[3] = v20;
      v21 = v167;
      a2[4] = v166;
      a2[5] = v21;
      v22 = v163;
      v5 = v19;
      *a2 = v162;
      a2[1] = v22;
    }
    v23 = v18 * 0.5;
    *(double *)&v167 = v23 * 3.14159265;
    *((double *)&v167 + 1) = v23;
    sub_10031A86C(a1, (uint64_t)&v162);
    if (v24 > v5)
    {
      v25 = v165;
      a2[2] = v164;
      a2[3] = v25;
      v26 = v167;
      a2[4] = v166;
      a2[5] = v26;
      v27 = v163;
      v5 = v24;
      *a2 = v162;
      a2[1] = v27;
    }
    *(double *)&v167 = v23 * 0.5 * 3.14159265;
    *((double *)&v167 + 1) = v23 * 0.5;
    sub_10031A86C(a1, (uint64_t)&v162);
    if (v28 > v5)
    {
      v29 = v165;
      a2[2] = v164;
      a2[3] = v29;
      v30 = v167;
      a2[4] = v166;
      a2[5] = v30;
      v31 = v163;
      v5 = v28;
      *a2 = v162;
      a2[1] = v31;
    }
    if (v5 <= *(double *)(a1 + 552))
    {
      v32 = a2[3];
      v164 = a2[2];
      v165 = v32;
      v33 = a2[5];
      v166 = a2[4];
      v167 = v33;
      v34 = a2[1];
      v162 = *a2;
      v163 = v34;
      v35 = *(double *)&v164 + -0.5;
      if (*(double *)&v164 + -0.5 >= 0.5)
      {
        *(double *)&v164 = *(double *)&v164 + -0.5;
        sub_10031A86C(a1, (uint64_t)&v162);
        if (v36 > v5)
        {
          v37 = v165;
          a2[2] = v164;
          a2[3] = v37;
          v38 = v167;
          a2[4] = v166;
          a2[5] = v38;
          v39 = v163;
          v5 = v36;
          *a2 = v162;
          a2[1] = v39;
        }
      }
      else
      {
        v35 = *(double *)&v164;
      }
      v40 = v35 + -0.5;
      if (v35 + -0.5 >= 0.5)
      {
        *(double *)&v164 = v35 + -0.5;
        sub_10031A86C(a1, (uint64_t)&v162);
        if (v41 > v5)
        {
          v42 = v165;
          a2[2] = v164;
          a2[3] = v42;
          v43 = v167;
          a2[4] = v166;
          a2[5] = v43;
          v44 = v163;
          v5 = v41;
          *a2 = v162;
          a2[1] = v44;
        }
      }
      else
      {
        v40 = v35;
      }
      v45 = v40 + -0.5;
      if (v40 + -0.5 >= 0.5)
      {
        *(double *)&v164 = v40 + -0.5;
        sub_10031A86C(a1, (uint64_t)&v162);
        if (v46 > v5)
        {
          v47 = v165;
          a2[2] = v164;
          a2[3] = v47;
          v48 = v167;
          a2[4] = v166;
          a2[5] = v48;
          v49 = v163;
          v5 = v46;
          *a2 = v162;
          a2[1] = v49;
        }
      }
      else
      {
        v45 = v40;
      }
      v50 = v45 + -0.5;
      if (v45 + -0.5 >= 0.5)
      {
        *(double *)&v164 = v45 + -0.5;
        sub_10031A86C(a1, (uint64_t)&v162);
        if (v51 > v5)
        {
          v52 = v165;
          a2[2] = v164;
          a2[3] = v52;
          v53 = v167;
          a2[4] = v166;
          a2[5] = v53;
          v54 = v163;
          v5 = v51;
          *a2 = v162;
          a2[1] = v54;
        }
      }
      else
      {
        v50 = v45;
      }
      if (v50 + -0.5 >= 0.5)
      {
        *(double *)&v164 = v50 + -0.5;
        sub_10031A86C(a1, (uint64_t)&v162);
        if (v55 > v5)
        {
          v56 = v165;
          a2[2] = v164;
          a2[3] = v56;
          v57 = v167;
          a2[4] = v166;
          a2[5] = v57;
          v58 = v163;
          v5 = v55;
          *a2 = v162;
          a2[1] = v58;
        }
      }
      if (v5 <= *(double *)(a1 + 552))
      {
        v59 = a2[1];
        v162 = *a2;
        v163 = v59;
        v60 = a2[3];
        v164 = a2[2];
        v165 = v60;
        v61 = a2[5];
        v166 = a2[4];
        v167 = v61;
        v62 = *(double *)&v166;
        v63 = -*((double *)&v166 + 1);
        v64 = *((double *)&v163 + 1);
        v65 = *((double *)&v162 + 1);
        v66 = *(double *)&v162;
        v67 = *(double *)&v163;
        v68 = *(double *)&v164 + -0.5;
        v158 = -*((double *)&v166 + 1);
        v160 = *(double *)&v166;
        if (*(double *)&v164 + -0.5 >= 0.5)
        {
          v66 = *(double *)&v162 + v63 * 0.25;
          v65 = *((double *)&v162 + 1) + *(double *)&v166 * 0.25;
          *(double *)&v162 = v66;
          *((double *)&v162 + 1) = v65;
          v67 = *(double *)&v163 + v63 * 0.25;
          v64 = *((double *)&v163 + 1) + *(double *)&v166 * 0.25;
          *(double *)&v163 = v67;
          *((double *)&v163 + 1) = v64;
          *(double *)&v164 = *(double *)&v164 + -0.5;
          sub_10031A86C(a1, (uint64_t)&v162);
          if (v86 > v5)
          {
            v87 = v165;
            a2[2] = v164;
            a2[3] = v87;
            v88 = v167;
            a2[4] = v166;
            a2[5] = v88;
            v89 = v163;
            v5 = v86;
            *a2 = v162;
            a2[1] = v89;
          }
          v63 = v158;
          v62 = v160;
          v90 = v68 + -0.5;
          if (v68 + -0.5 >= 0.5)
          {
            v66 = v66 + v158 * 0.25;
            v65 = v65 + v160 * 0.25;
            *(double *)&v162 = v66;
            *((double *)&v162 + 1) = v65;
            v67 = v67 + v158 * 0.25;
            v64 = v64 + v160 * 0.25;
            *(double *)&v163 = v67;
            *((double *)&v163 + 1) = v64;
            *(double *)&v164 = v68 + -0.5;
            sub_10031A86C(a1, (uint64_t)&v162);
            if (v69 > v5)
            {
              v70 = v165;
              a2[2] = v164;
              a2[3] = v70;
              v71 = v167;
              a2[4] = v166;
              a2[5] = v71;
              v72 = v163;
              v5 = v69;
              *a2 = v162;
              a2[1] = v72;
            }
            v63 = v158;
            v62 = v160;
            v73 = -0.5;
            v74 = v90 + -0.5;
            v75 = 0.5;
            if (v90 + -0.5 < 0.5)
            {
LABEL_49:
              v74 = v90;
              v80 = v90 + v73;
              if (v80 < v75)
                goto LABEL_50;
              goto LABEL_41;
            }
LABEL_38:
            v66 = v66 + v63 * 0.25;
            v65 = v65 + v62 * 0.25;
            *(double *)&v162 = v66;
            *((double *)&v162 + 1) = v65;
            v67 = v67 + v63 * 0.25;
            v64 = v64 + v62 * 0.25;
            *(double *)&v163 = v67;
            *((double *)&v163 + 1) = v64;
            *(double *)&v164 = v74;
            sub_10031A86C(a1, (uint64_t)&v162);
            if (v76 > v5)
            {
              v77 = v165;
              a2[2] = v164;
              a2[3] = v77;
              v78 = v167;
              a2[4] = v166;
              a2[5] = v78;
              v79 = v163;
              v5 = v76;
              *a2 = v162;
              a2[1] = v79;
            }
            v63 = v158;
            v62 = v160;
            v80 = v74 + -0.5;
            if (v74 + -0.5 < 0.5)
            {
LABEL_50:
              v85 = v74 + -0.5;
              if (v74 + -0.5 < 0.5)
                goto LABEL_53;
              goto LABEL_51;
            }
LABEL_41:
            v66 = v66 + v63 * 0.25;
            v65 = v65 + v62 * 0.25;
            *(double *)&v162 = v66;
            *((double *)&v162 + 1) = v65;
            v67 = v67 + v63 * 0.25;
            v64 = v64 + v62 * 0.25;
            *(double *)&v163 = v67;
            *((double *)&v163 + 1) = v64;
            *(double *)&v164 = v80;
            sub_10031A86C(a1, (uint64_t)&v162);
            if (v81 > v5)
            {
              v82 = v165;
              a2[2] = v164;
              a2[3] = v82;
              v83 = v167;
              a2[4] = v166;
              a2[5] = v83;
              v84 = v163;
              v5 = v81;
              *a2 = v162;
              a2[1] = v84;
            }
            v63 = v158;
            v62 = v160;
            v85 = v80 + -0.5;
            if (v80 + -0.5 < 0.5)
            {
LABEL_53:
              if (v5 > *(double *)(a1 + 552))
                return v5;
              v95 = a2[1];
              v162 = *a2;
              v163 = v95;
              v96 = a2[3];
              v164 = a2[2];
              v165 = v96;
              v97 = a2[5];
              v166 = a2[4];
              v167 = v97;
              v98 = *((double *)&v166 + 1);
              v99 = *((double *)&v163 + 1);
              v100 = -*(double *)&v166;
              v101 = *((double *)&v162 + 1);
              v102 = *(double *)&v162;
              v103 = *(double *)&v163;
              v104 = *(double *)&v164 + -0.5;
              v159 = -*(double *)&v166;
              v161 = *((double *)&v166 + 1);
              if (*(double *)&v164 + -0.5 >= 0.5)
              {
                v102 = *(double *)&v162 + *((double *)&v166 + 1) * 0.25;
                v101 = *((double *)&v162 + 1) + v100 * 0.25;
                *(double *)&v162 = v102;
                *((double *)&v162 + 1) = v101;
                v103 = *(double *)&v163 + *((double *)&v166 + 1) * 0.25;
                v99 = *((double *)&v163 + 1) + v100 * 0.25;
                *(double *)&v163 = v103;
                *((double *)&v163 + 1) = v99;
                *(double *)&v164 = *(double *)&v164 + -0.5;
                sub_10031A86C(a1, (uint64_t)&v162);
                if (v121 > v5)
                {
                  v122 = v165;
                  a2[2] = v164;
                  a2[3] = v122;
                  v123 = v167;
                  a2[4] = v166;
                  a2[5] = v123;
                  v124 = v163;
                  v5 = v121;
                  *a2 = v162;
                  a2[1] = v124;
                }
                v100 = v159;
                v98 = v161;
                v125 = v104 + -0.5;
                if (v104 + -0.5 >= 0.5)
                {
                  v102 = v102 + v161 * 0.25;
                  v101 = v101 + v159 * 0.25;
                  *(double *)&v162 = v102;
                  *((double *)&v162 + 1) = v101;
                  v103 = v103 + v161 * 0.25;
                  v99 = v99 + v159 * 0.25;
                  *(double *)&v163 = v103;
                  *((double *)&v163 + 1) = v99;
                  *(double *)&v164 = v104 + -0.5;
                  sub_10031A86C(a1, (uint64_t)&v162);
                  if (v105 > v5)
                  {
                    v106 = v165;
                    a2[2] = v164;
                    a2[3] = v106;
                    v107 = v167;
                    a2[4] = v166;
                    a2[5] = v107;
                    v108 = v163;
                    v5 = v105;
                    *a2 = v162;
                    a2[1] = v108;
                  }
                  v100 = v159;
                  v98 = v161;
                  v109 = -0.5;
                  v110 = v125 + -0.5;
                  v111 = 0.5;
                  if (v125 + -0.5 < 0.5)
                  {
LABEL_69:
                    v110 = v125;
                    v116 = v125 + v109;
                    if (v116 < v111)
                    {
LABEL_70:
                      v116 = v110;
LABEL_71:
                      if (v116 + -0.5 >= 0.5)
                      {
                        *(double *)&v162 = v102 + v98 * 0.25;
                        *((double *)&v162 + 1) = v101 + v100 * 0.25;
                        *(double *)&v163 = v103 + v98 * 0.25;
                        *((double *)&v163 + 1) = v99 + v100 * 0.25;
                        *(double *)&v164 = v116 + -0.5;
                        sub_10031A86C(a1, (uint64_t)&v162);
                        if (v126 > v5)
                        {
                          v127 = v165;
                          a2[2] = v164;
                          a2[3] = v127;
                          v128 = v167;
                          a2[4] = v166;
                          a2[5] = v128;
                          v129 = v163;
                          v5 = v126;
                          *a2 = v162;
                          a2[1] = v129;
                        }
                      }
                      if (v5 <= *(double *)(a1 + 552))
                      {
                        v130 = a2[3];
                        v164 = a2[2];
                        v165 = v130;
                        v131 = a2[5];
                        v166 = a2[4];
                        v167 = v131;
                        v132 = a2[1];
                        v162 = *a2;
                        v163 = v132;
                        if (*(double *)&v164 + -0.5 >= 0.5)
                        {
                          v133 = *((double *)&v167 + 1) * 0.5;
                          *(double *)&v167 = *((double *)&v167 + 1) * 0.5 * 3.14159265;
                          *((double *)&v167 + 1) = *((double *)&v167 + 1) * 0.5;
                          sub_10031A86C(a1, (uint64_t)&v162);
                          if (v134 > v5)
                          {
                            v135 = v165;
                            a2[2] = v164;
                            a2[3] = v135;
                            v136 = v167;
                            a2[4] = v166;
                            a2[5] = v136;
                            v137 = v163;
                            v5 = v134;
                            *a2 = v162;
                            a2[1] = v137;
                          }
                          v138 = v133 * 0.5;
                          *(double *)&v167 = v138 * 3.14159265;
                          *((double *)&v167 + 1) = v138;
                          sub_10031A86C(a1, (uint64_t)&v162);
                          if (v139 > v5)
                          {
                            v140 = v165;
                            a2[2] = v164;
                            a2[3] = v140;
                            v141 = v167;
                            a2[4] = v166;
                            a2[5] = v141;
                            v142 = v163;
                            v5 = v139;
                            *a2 = v162;
                            a2[1] = v142;
                          }
                          v143 = v138 * 0.5;
                          *(double *)&v167 = v143 * 3.14159265;
                          *((double *)&v167 + 1) = v143;
                          sub_10031A86C(a1, (uint64_t)&v162);
                          if (v144 > v5)
                          {
                            v145 = v165;
                            a2[2] = v164;
                            a2[3] = v145;
                            v146 = v167;
                            a2[4] = v166;
                            a2[5] = v146;
                            v147 = v163;
                            v5 = v144;
                            *a2 = v162;
                            a2[1] = v147;
                          }
                          v148 = v143 * 0.5;
                          *(double *)&v167 = v148 * 3.14159265;
                          *((double *)&v167 + 1) = v148;
                          sub_10031A86C(a1, (uint64_t)&v162);
                          if (v149 > v5)
                          {
                            v150 = v165;
                            a2[2] = v164;
                            a2[3] = v150;
                            v151 = v167;
                            a2[4] = v166;
                            a2[5] = v151;
                            v152 = v163;
                            v5 = v149;
                            *a2 = v162;
                            a2[1] = v152;
                          }
                          *(double *)&v167 = v148 * 0.5 * 3.14159265;
                          *((double *)&v167 + 1) = v148 * 0.5;
                          sub_10031A86C(a1, (uint64_t)&v162);
                          if (v153 > v5)
                          {
                            v154 = v165;
                            a2[2] = v164;
                            a2[3] = v154;
                            v155 = v167;
                            a2[4] = v166;
                            a2[5] = v155;
                            v156 = v163;
                            v5 = v153;
                            *a2 = v162;
                            a2[1] = v156;
                          }
                        }
                      }
                      return v5;
                    }
LABEL_62:
                    v102 = v102 + v98 * 0.25;
                    v101 = v101 + v100 * 0.25;
                    *(double *)&v162 = v102;
                    *((double *)&v162 + 1) = v101;
                    v103 = v103 + v98 * 0.25;
                    v99 = v99 + v100 * 0.25;
                    *(double *)&v163 = v103;
                    *((double *)&v163 + 1) = v99;
                    *(double *)&v164 = v116;
                    sub_10031A86C(a1, (uint64_t)&v162);
                    if (v117 > v5)
                    {
                      v118 = v165;
                      a2[2] = v164;
                      a2[3] = v118;
                      v119 = v167;
                      a2[4] = v166;
                      a2[5] = v119;
                      v120 = v163;
                      v5 = v117;
                      *a2 = v162;
                      a2[1] = v120;
                    }
                    v100 = v159;
                    v98 = v161;
                    goto LABEL_71;
                  }
LABEL_59:
                  v102 = v102 + v98 * 0.25;
                  v101 = v101 + v100 * 0.25;
                  *(double *)&v162 = v102;
                  *((double *)&v162 + 1) = v101;
                  v103 = v103 + v98 * 0.25;
                  v99 = v99 + v100 * 0.25;
                  *(double *)&v163 = v103;
                  *((double *)&v163 + 1) = v99;
                  *(double *)&v164 = v110;
                  sub_10031A86C(a1, (uint64_t)&v162);
                  if (v112 > v5)
                  {
                    v113 = v165;
                    a2[2] = v164;
                    a2[3] = v113;
                    v114 = v167;
                    a2[4] = v166;
                    a2[5] = v114;
                    v115 = v163;
                    v5 = v112;
                    *a2 = v162;
                    a2[1] = v115;
                  }
                  v100 = v159;
                  v98 = v161;
                  v116 = v110 + -0.5;
                  if (v110 + -0.5 < 0.5)
                    goto LABEL_70;
                  goto LABEL_62;
                }
              }
              else
              {
                v104 = *(double *)&v164;
              }
              v125 = v104;
              v109 = -0.5;
              v110 = v104 + -0.5;
              v111 = 0.5;
              if (v110 < 0.5)
                goto LABEL_69;
              goto LABEL_59;
            }
LABEL_51:
            *(double *)&v162 = v66 + v63 * 0.25;
            *((double *)&v162 + 1) = v65 + v62 * 0.25;
            *(double *)&v163 = v67 + v63 * 0.25;
            *((double *)&v163 + 1) = v64 + v62 * 0.25;
            *(double *)&v164 = v85;
            sub_10031A86C(a1, (uint64_t)&v162);
            if (v91 > v5)
            {
              v92 = v165;
              a2[2] = v164;
              a2[3] = v92;
              v93 = v167;
              a2[4] = v166;
              a2[5] = v93;
              v94 = v163;
              v5 = v91;
              *a2 = v162;
              a2[1] = v94;
            }
            goto LABEL_53;
          }
        }
        else
        {
          v68 = *(double *)&v164;
        }
        v90 = v68;
        v73 = -0.5;
        v74 = v68 + -0.5;
        v75 = 0.5;
        if (v74 < 0.5)
          goto LABEL_49;
        goto LABEL_38;
      }
    }
  }
  return v5;
}

void sub_10031A254(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  const float *v20;
  float *v21;
  uint64_t v22;
  int v23;
  float32x4x4_t v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_DWORD *)v5 = *a2;
    *((_DWORD *)v5 + 1) = a2[1];
    *((_DWORD *)v5 + 2) = a2[2];
    *((_DWORD *)v5 + 3) = a2[3];
    v7 = v5 + 16;
    goto LABEL_24;
  }
  v8 = *(char **)a1;
  v9 = (uint64_t)&v5[-*(_QWORD *)a1];
  v10 = (v9 >> 4) + 1;
  if (v10 >> 60)
    sub_100008F3C();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 3 > v10)
    v10 = v11 >> 3;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
    v12 = 0xFFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 60)
      sub_100008FF8();
    v13 = (char *)operator new(16 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[16 * (v9 >> 4)];
  v15 = &v13[16 * v12];
  *(_OWORD *)v14 = *(_OWORD *)a2;
  v7 = v14 + 16;
  if (v5 == v8)
  {
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v8)
      goto LABEL_24;
    goto LABEL_23;
  }
  v16 = v5 - v8 - 16;
  if (v16 < 0x70 || &v13[v9 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v5 && &v5[-(v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v14)
    goto LABEL_20;
  v17 = (v16 >> 4) + 1;
  v18 = 16 * (v17 & 0x1FFFFFFFFFFFFFFCLL);
  v6 = &v5[-v18];
  v19 = &v14[-v18];
  v20 = (const float *)(v5 - 64);
  v21 = (float *)(v14 - 64);
  v22 = v17 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = vld4q_f32(v20);
    vst4q_f32(v21, v24);
    v21 -= 16;
    v20 -= 16;
    v22 -= 4;
  }
  while (v22);
  v14 = v19;
  if (v17 != (v17 & 0x1FFFFFFFFFFFFFFCLL))
  {
LABEL_20:
    v19 = v14;
    do
    {
      v23 = *((_DWORD *)v6 - 4);
      v6 -= 16;
      *((_DWORD *)v19 - 4) = v23;
      v19 -= 16;
      *((_DWORD *)v19 + 1) = *((_DWORD *)v6 + 1);
      *((_DWORD *)v19 + 2) = *((_DWORD *)v6 + 2);
      *((_DWORD *)v19 + 3) = *((_DWORD *)v6 + 3);
    }
    while (v6 != v8);
  }
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v15;
  if (v8)
LABEL_23:
    operator delete(v8);
LABEL_24:
  *(_QWORD *)(a1 + 8) = v7;
}

void sub_10031A414(uint64_t a1, double **a2, double *a3, double *a4, double *a5)
{
  double *v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  double v26;
  float v27;
  float v28;
  double i;
  uint64_t v30[2];

  v5 = *a2;
  v6 = (char *)a2[1] - (char *)*a2;
  if (!v6)
    goto LABEL_18;
  v7 = v6 >> 5;
  if (v7 <= 1)
    v7 = 1;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  do
  {
    v11 = (double)*(int *)v5 - *a3;
    v12 = (double)*((int *)v5 + 1) - *a4;
    v13 = v5[3];
    v8 = v8 + v12 * v12 * v13;
    v9 = v9 + v11 * v11 * v13;
    v10 = v10 + -(v11 * v12) * v13;
    v5 += 4;
    --v7;
  }
  while (v7);
  if (v8 == 0.0)
    goto LABEL_17;
  v14 = fabs(v8);
  v15 = fmax(v14, 0.0);
  if (v15 < 2.22507386e-308)
    v15 = 2.22507386e-308;
  if (v14 / v15 <= 2.22044605e-14)
  {
LABEL_17:
    if (v9 == 0.0)
      goto LABEL_31;
    v16 = fabs(v9);
    v17 = fmax(v16, 0.0);
    if (v17 < 2.22507386e-308)
      v17 = 2.22507386e-308;
    if (v16 / v17 <= 2.22044605e-14)
    {
LABEL_31:
      if (v10 == 0.0)
        goto LABEL_18;
      v18 = fabs(v10);
      v19 = fmax(v18, 0.0);
      if (v19 < 2.22507386e-308)
        v19 = 2.22507386e-308;
      if (v18 / v19 <= 2.22044605e-14)
      {
LABEL_18:
        v30[0] = 0;
        v30[1] = 0;
        qmemcpy((void *)sub_10029430C(v30, 71), "!(double_equal(Ixx, 0) && double_equal(Iyy, 0) && double_equal(Ixy, 0))", 71);
        sub_100294B74(-215, v30, "get_theta", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 756);
      }
    }
  }
  v20 = (v9 + v8 - sqrt(v10 * (v10 * 4.0) + (v8 - v9) * (v8 - v9))) * 0.5;
  v21 = fabs(v8);
  v22 = fabs(v9);
  v23 = v20 - v9;
  v24 = v20 - v8;
  v25 = v21 <= v22;
  if (v21 <= v22)
    v26 = v23;
  else
    v26 = v10;
  if (v25)
    v24 = v10;
  v27 = v24;
  v28 = v26;
  for (i = sub_10022FF5C(v27, v28) * 0.0174532925 - *a5; i <= -3.14159265; i = i + 6.28318531)
    ;
  for (; i > 3.14159265; i = i + -6.28318531)
    ;
}

void sub_10031A694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10031A6AC(uint64_t a1, int **a2, double *a3, double *a4, double a5, double a6, double a7, double a8)
{
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  unint64_t v21;
  int *v22;
  int *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  if (*a4 <= a8)
    return 1;
  v15 = (uint64_t)*a2;
  v16 = (uint64_t)a2[1];
  v17 = (double)**a2;
  v18 = (double)(*a2)[1];
  v19 = (a3[3] - v18) * (a3[3] - v18);
  if ((a3[1] - v18) * (a3[1] - v18) + (*a3 - v17) * (*a3 - v17) <= v19 + (a3[2] - v17) * (a3[2] - v17))
    v20 = v19 + (a3[2] - v17) * (a3[2] - v17);
  else
    v20 = (a3[1] - v18) * (a3[1] - v18) + (*a3 - v17) * (*a3 - v17);
  while (v16 != v15)
  {
    v21 = 0;
    v20 = v20 * 0.5625;
    do
    {
      if (((double)*(int *)(v15 + 32 * v21 + 4) - v18) * ((double)*(int *)(v15 + 32 * v21 + 4) - v18)
         + ((double)*(int *)(v15 + 32 * v21) - v17) * ((double)*(int *)(v15 + 32 * v21) - v17) > v20)
      {
        **(_BYTE **)(v15 + 32 * v21 + 8) = 0;
        v22 = a2[1];
        v23 = &(*a2)[8 * v21];
        v25 = *(_OWORD *)v23;
        v24 = *((_OWORD *)v23 + 1);
        v26 = *((_OWORD *)v22 - 1);
        *(_OWORD *)v23 = *((_OWORD *)v22 - 2);
        *((_OWORD *)v23 + 1) = v26;
        *((_OWORD *)v22 - 2) = v25;
        *((_OWORD *)v22 - 1) = v24;
        v15 = (uint64_t)*a2;
        v16 = (uint64_t)(a2[1] - 8);
        a2[1] = (int *)v16;
        --v21;
      }
      ++v21;
    }
    while (v21 < (v16 - v15) >> 5);
    if ((unint64_t)(v16 - v15) <= 0x3F)
      break;
    sub_100319340(a1, (uint64_t)a2, a3, a5, a6, a7);
    v15 = (uint64_t)*a2;
    v16 = (uint64_t)a2[1];
    if ((double)(unint64_t)((v16 - (uint64_t)*a2) >> 5)
       / (a3[4]
        * sqrt((a3[3] - a3[1]) * (a3[3] - a3[1]) + (a3[2] - *a3) * (a3[2] - *a3))) >= *a4)
      return 1;
  }
  return 0;
}

void sub_10031A86C(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int *v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int v28;
  int *v29;
  uint64_t v30;
  int v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  int v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  double v46;
  int v47;
  double v48;
  int v49;
  double v50;
  double v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t *, int *);
  uint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  char v60;
  int v61;
  int v62;
  unsigned __int8 v63;
  int v64;
  int v65;
  char v66;
  int v67;
  int v68;
  char v69;
  uint64_t v70;

  v57 = 0;
  v4 = *(double *)(a2 + 32) * 0.5;
  v5 = *(double *)(a2 + 72) * v4;
  v6 = v4 * *(double *)(a2 + 64);
  v7 = *(double *)a2;
  v8 = *(double *)(a2 + 8);
  v58 = (int)(*(double *)a2 - v5);
  v59 = (int)(v6 + v8);
  v60 = 0;
  v9 = *(double *)(a2 + 16);
  v10 = *(double *)(a2 + 24);
  v61 = (int)(v9 - v5);
  v62 = (int)(v6 + v10);
  v63 = 0;
  v64 = (int)(v5 + v9);
  v65 = (int)(v10 - v6);
  v66 = 0;
  v67 = (int)(v5 + v7);
  v68 = (int)(v8 - v6);
  v69 = 0;
  v55 = (uint64_t (*)(uint64_t *, int *))sub_10031B024;
  sub_10031CF5C((uint64_t)&v58, &v70, &v55, 4, 1);
  v11 = &v64;
  v12 = &v67;
  v13 = v59;
  v14 = v62;
  v15 = 12;
  if (v59 <= v62)
    v15 = 0;
  if (v59 >= v62)
    v16 = v62;
  else
    v16 = v59;
  v17 = 4;
  if (v59 < v62)
    v18 = 4;
  else
    v18 = 16;
  v19 = v65;
  if (v59 < v62)
    v20 = v62;
  else
    v20 = v59;
  if (v59 < v62)
    v17 = 16;
  v21 = 8;
  if (v59 >= v62)
    v21 = 20;
  v22 = 28;
  if (v20 < v65)
    v17 = 28;
  if (v16 <= v65)
    v22 = v18;
  else
    v15 = 24;
  v23 = *(int *)((char *)&v58 + v22);
  v24 = v68;
  if (v16 > v65)
    v21 = 32;
  if (v23 > v68)
    v15 = 36;
  v54 = v15;
  v52 = *(int *)((char *)&v58 + v17);
  v53 = v68;
  v25 = 44;
  if (v23 <= v68)
    v25 = v21;
  *((_BYTE *)&v58 + v25) = 1;
  if (v60)
  {
    v26 = &v61;
    if (v63)
    {
      v26 = &v64;
      if (v66)
      {
        v26 = &v67;
        if (v69)
        {
          v55 = 0;
          v56 = 0;
          v27 = sub_10029430C(&v55, 18);
          *(_WORD *)(v27 + 16) = 27756;
          *(_OWORD *)v27 = *(_OWORD *)"leftmost != __null";
          sub_100294B74(-215, (uint64_t *)&v55, "rect_nfa", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 1006);
        }
        goto LABEL_35;
      }
      goto LABEL_34;
    }
LABEL_33:
    if (v66)
      goto LABEL_34;
    goto LABEL_43;
  }
  v26 = &v58;
  if (v63)
    goto LABEL_33;
  if (v58 > v61)
    v26 = &v61;
  if (v66)
  {
LABEL_34:
    if (v69)
      goto LABEL_35;
    goto LABEL_46;
  }
LABEL_43:
  if (*v26 > v64)
    v26 = &v64;
  if (v69)
  {
LABEL_35:
    *((_BYTE *)v26 + 8) = 1;
    v28 = v63;
    if (v60)
      goto LABEL_36;
    goto LABEL_49;
  }
LABEL_46:
  if (*v26 > v67)
    v26 = &v67;
  *((_BYTE *)v26 + 8) = 1;
  v28 = v63;
  if (v60)
  {
LABEL_36:
    v29 = &v61;
    if (v28)
    {
      v29 = &v64;
      if (v66)
      {
        v29 = &v67;
        if (v69)
        {
          v55 = 0;
          v56 = 0;
          v30 = sub_10029430C(&v55, 19);
          *(_DWORD *)(v30 + 15) = 1819047278;
          *(_OWORD *)v30 = *(_OWORD *)"rightmost != __null";
          sub_100294B74(-215, (uint64_t *)&v55, "rect_nfa", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 1025);
        }
        goto LABEL_52;
      }
      goto LABEL_51;
    }
LABEL_50:
    if (v66)
      goto LABEL_51;
    goto LABEL_60;
  }
LABEL_49:
  v29 = &v58;
  if (v28)
    goto LABEL_50;
  if (v58 < v61)
    v29 = &v61;
  if (v66)
  {
LABEL_51:
    if (v69)
      goto LABEL_52;
    goto LABEL_63;
  }
LABEL_60:
  if (*v29 < v64)
    v29 = &v64;
  if (v69)
  {
LABEL_52:
    *((_BYTE *)v29 + 8) = 1;
    v31 = v63;
    if (v60)
      goto LABEL_53;
LABEL_66:
    v32 = &v58;
    if (!v31)
    {
      if (v58 > v61)
        v32 = &v61;
      if (v66)
        goto LABEL_68;
      goto LABEL_74;
    }
LABEL_67:
    if (v66)
    {
LABEL_68:
      v11 = v32;
      goto LABEL_69;
    }
LABEL_74:
    if (*v32 <= v64)
      v11 = v32;
    if (v69)
      goto LABEL_70;
    goto LABEL_77;
  }
LABEL_63:
  if (*v29 < v67)
    v29 = &v67;
  *((_BYTE *)v29 + 8) = 1;
  v31 = v63;
  if (!v60)
    goto LABEL_66;
LABEL_53:
  v32 = &v61;
  if (!v31)
    goto LABEL_67;
  if (v66)
  {
    if (v69)
    {
      v55 = 0;
      v56 = 0;
      qmemcpy((void *)sub_10029430C(&v55, 15), "tailp != __null", 15);
      sub_100294B74(-215, (uint64_t *)&v55, "rect_nfa", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 1044);
    }
    goto LABEL_79;
  }
LABEL_69:
  if (v69)
  {
LABEL_70:
    v12 = v11;
    goto LABEL_79;
  }
LABEL_77:
  if (*v11 <= v67)
    v12 = v11;
LABEL_79:
  *((_BYTE *)v12 + 8) = 1;
  v33 = 4;
  if (v13 > v14)
    v33 = 16;
  if (v16 > v19)
    v33 = 28;
  if (v23 > v24)
    v33 = 40;
  v34 = *(int *)((char *)&v58 + v33);
  v35 = v26[1];
  v36 = 0.0;
  v37 = 0.0;
  if ((_DWORD)v34 == (_DWORD)v35)
  {
    v38 = *v12;
    if ((_DWORD)v35 == *v12)
      goto LABEL_87;
  }
  else
  {
    v37 = (double)((*(int *)((char *)&v58 + v54) - *v26) / ((int)v34 - (int)v35));
    v38 = *v12;
    if ((_DWORD)v35 == *v12)
    {
LABEL_87:
      v39 = v29[1];
      v40 = 0.0;
      v41 = 0.0;
      if ((_DWORD)v34 == (_DWORD)v39)
        goto LABEL_88;
      goto LABEL_100;
    }
  }
  v36 = (double)((*v26 - v38) / ((int)v35 - v38));
  v39 = v29[1];
  v40 = 0.0;
  v41 = 0.0;
  if ((_DWORD)v34 == (_DWORD)v39)
  {
LABEL_88:
    if ((_DWORD)v39 == v38)
      goto LABEL_90;
    goto LABEL_89;
  }
LABEL_100:
  v41 = (double)((*(int *)((char *)&v58 + v54) - *v29) / ((int)v34 - (int)v39));
  if ((_DWORD)v39 != v38)
LABEL_89:
    v40 = (double)((*v29 - v38) / ((int)v39 - v38));
LABEL_90:
  v42 = 4;
  if (v13 < v14)
    v42 = 16;
  if (v20 < v19)
    v42 = 28;
  if (v52 < v53)
    v42 = 40;
  v43 = *(int *)((char *)&v58 + v42);
  v45 = v57;
  v44 = HIDWORD(v57);
  if ((int)v34 <= v43)
  {
    v46 = (double)*(int *)((char *)&v58 + v54);
    v47 = v43 + 1;
    v48 = v46;
    do
    {
      if ((v34 & 0x8000000000000000) == 0 && v34 < *(int *)(a1 + 492))
      {
        v49 = (int)v48;
        if ((int)v48 <= (int)v46)
        {
          do
          {
            if ((v49 & 0x80000000) == 0 && v49 < *(_DWORD *)(a1 + 488))
            {
              ++v44;
              if (((v49 | v34) & 0x80000000) == 0
                && *(_DWORD *)(a1 + 212) > v49
                && v34 < *(int *)(a1 + 208))
              {
                v50 = *(double *)(*(_QWORD *)(a1 + 216) + **(_QWORD **)(a1 + 272) * v34 + 8 * v49);
                if (v50 != -1024.0)
                {
                  v51 = *(double *)(a2 + 56) - v50;
                  if (v51 < 0.0)
                    v51 = -v51;
                  if (v51 > 4.71238898)
                  {
                    v51 = v51 + -6.28318531;
                    if (v51 < 0.0)
                      v51 = -v51;
                  }
                  if (v51 <= *(double *)(a2 + 80))
                    ++v45;
                }
              }
            }
            ++v49;
          }
          while ((int)v46 + 1 != v49);
        }
        if (v34 >= v35)
          v37 = v36;
        if (v34 >= v39)
          v41 = v40;
        v48 = v48 + v37;
        v46 = v46 + v41;
      }
      ++v34;
    }
    while (v47 != (_DWORD)v34);
  }
  v57 = __PAIR64__(v44, v45);
  sub_10031B044(a1, (int *)&v57 + 1, (int *)&v57, (long double *)(a2 + 88));
}

void sub_10031AFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_10031B024(_DWORD *a1, _DWORD *a2)
{
  if (*a1 == *a2)
    return a1[1] < a2[1];
  else
    return *a1 < *a2;
}

void sub_10031B044(uint64_t a1, int *a2, int *a3, long double *a4)
{
  int v5;
  int v6;
  int v7;
  long double v8;
  double v9;
  long double v10;
  double v11;
  long double v12;
  double v13;
  long double v14;
  long double v15;
  double v16;
  long double v17;
  double v18;
  long double v19;
  double v20;
  long double v21;
  double v22;
  long double v23;
  long double v24;
  double v25;
  long double v26;
  long double v27;
  double v28;
  long double v29;
  long double v30;
  double v31;
  long double v32;
  double v33;
  double v34;
  double v35;
  long double v36;
  double v37;
  long double v38;
  double v39;
  long double v40;
  long double v41;
  double v42;
  long double v43;
  double v44;
  long double v45;
  double v46;
  long double v47;
  double v48;
  long double v49;
  long double v50;
  double v51;
  long double v52;
  long double v53;
  double v54;
  long double v55;
  long double v56;
  double v57;
  long double v58;
  long double v59;
  long double v60;
  double v61;
  double v62;
  double v63;
  int v64;
  int v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v71;

  v5 = *a2;
  if (*a2)
  {
    v6 = *a3;
    if (*a3)
    {
      v7 = v5 - v6;
      if (v5 == v6)
      {
        log10(*a4);
      }
      else
      {
        v8 = *a4;
        v9 = (double)v6 + 1.0;
        if (v9 <= 15.0)
        {
          v14 = -(v9 + 5.5 - (v9 + 0.5) * log(v9 + 5.5));
          v15 = v14 - log((double)v6 + 1.0);
          v16 = *(double *)&qword_10048BAD8 + 0.0;
          v17 = v15 - log(v9 + 1.0);
          v18 = v16 + *(double *)&qword_10048BAE0 * v9;
          v19 = v17 - log(v9 + 2.0);
          v20 = v18 + *(double *)&qword_10048BAE8 * (v9 * v9);
          v21 = v19 - log(v9 + 3.0);
          v22 = *(double *)&qword_10048BAF0;
          v23 = v20 + v22 * pow((double)v6 + 1.0, 3.0);
          v24 = v21 - log(v9 + 4.0);
          v25 = *(double *)&qword_10048BAF8;
          v26 = v23 + v25 * pow((double)v6 + 1.0, 4.0);
          v27 = v24 - log(v9 + 5.0);
          v28 = *(double *)&qword_10048BB00;
          v29 = v26 + v28 * pow((double)v6 + 1.0, 5.0);
          v30 = v27 - log(v9 + 6.0);
          v31 = *(double *)&qword_10048BB08;
          v32 = pow((double)v6 + 1.0, 6.0);
          v13 = v30 + log(v29 + v31 * v32);
        }
        else
        {
          v10 = (v9 + -0.5) * log((double)v6 + 1.0) + 0.918938533 - v9;
          v11 = sinh(1.0 / v9);
          v12 = pow((double)v6 + 1.0, 6.0);
          v13 = v10 + v9 * 0.5 * log(1.0 / (v12 * 810.0) + v9 * v11);
        }
        v33 = 1.0 - v8;
        v71 = (double)v5 + 1.0 - v13;
        v34 = (double)v7;
        v35 = (double)v7 + 1.0;
        if (v35 <= 15.0)
        {
          v40 = -(v35 + 5.5 - (v35 + 0.5) * log(v35 + 5.5));
          v41 = v40 - log((double)v7 + 1.0);
          v42 = *(double *)&qword_10048BAD8 + 0.0;
          v43 = v41 - log(v35 + 1.0);
          v44 = v42 + *(double *)&qword_10048BAE0 * v35;
          v45 = v43 - log(v35 + 2.0);
          v46 = v44 + *(double *)&qword_10048BAE8 * (v35 * v35);
          v47 = v45 - log(v35 + 3.0);
          v48 = *(double *)&qword_10048BAF0;
          v49 = v46 + v48 * pow(v35, 3.0);
          v50 = v47 - log(v35 + 4.0);
          v51 = *(double *)&qword_10048BAF8;
          v52 = v49 + v51 * pow(v35, 4.0);
          v53 = v50 - log(v35 + 5.0);
          v54 = *(double *)&qword_10048BB00;
          v55 = v52 + v54 * pow(v35, 5.0);
          v56 = v53 - log(v35 + 6.0);
          v57 = *(double *)&qword_10048BB08;
          v58 = pow(v35, 6.0);
          v39 = v56 + log(v55 + v57 * v58);
        }
        else
        {
          v36 = (v35 + -0.5) * log((double)v7 + 1.0) + 0.918938533 - v35;
          v37 = sinh(1.0 / v35);
          v38 = pow((double)v7 + 1.0, 6.0);
          v39 = v36 + v35 * 0.5 * log(1.0 / (v38 * 810.0) + v35 * v37);
          v33 = 1.0 - v8;
          v34 = (double)v7;
        }
        v59 = v71 - v39 + (double)v6 * log(v8);
        v60 = v59 + v34 * log(v33);
        v61 = exp(v60);
        if (v61 != 0.0)
        {
          v62 = v61;
          v63 = fmax(v61, 0.0);
          if (v63 < 2.22507386e-308)
            v63 = 2.22507386e-308;
          if (v62 / v63 > 2.22044605e-14)
          {
            v64 = v5 - v6;
            if (v5 > v6)
            {
              v65 = v6 + 1;
              v66 = v62;
              v67 = v8 / v33;
              while (1)
              {
                v68 = (double)v64 / (double)v65;
                v66 = v66 * (v67 * v68);
                v62 = v62 + v66;
                if (v68 >= 1.0)
                {
                  if (v65 >= v5)
                    break;
                }
                else
                {
                  v69 = v66 * ((1.0 - pow(v67 * v68, (double)v64)) / (1.0 - v67 * v68) + -1.0);
                  if (v69 < v62 * (vabdd_f64(-log10(v62), *(double *)(a1 + 496)) * 0.1) || v65 >= v5)
                    break;
                }
                --v64;
                ++v65;
              }
            }
            log10(v62);
          }
        }
      }
    }
  }
}

void sub_10031B540(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[64];
  _BYTE *v33;
  _QWORD *v34;
  _QWORD v35[2];
  _BYTE v36[64];
  _DWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[8];
  int v42;

  sub_100298C2C(v41, &off_100453578);
  if (sub_100261284((uint64_t)a2)
    || sub_100261268(a2, -1) != 1 && sub_100261268(a2, -1) != 3)
  {
    *(_OWORD *)v36 = 0uLL;
    qmemcpy((void *)sub_10029430C(v36, 69), "!_image.empty() && (_image.channels() == 1 || _image.channels() == 3)", 69);
    sub_100294B74(-215, (uint64_t *)v36, "drawSegments", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 1150);
  }
  if (sub_100261268(a2, -1) == 1)
    sub_1002BB654((uint64_t)a2, (uint64_t)a2, 8u, 0);
  *(_DWORD *)v36 = 1124007936;
  memset(&v36[4], 0, 60);
  v37 = &v36[8];
  v38 = &v39;
  v39 = 0;
  v40 = 0;
  if (sub_10025D914((_DWORD *)a3) == 0x10000)
  {
    v5 = *(_QWORD *)(a3 + 8);
    v6 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)v32 = *(_OWORD *)v5;
    *(_OWORD *)&v32[16] = v6;
    *(_OWORD *)&v32[32] = *(_OWORD *)(v5 + 32);
    v7 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)&v32[48] = *(_QWORD *)(v5 + 48);
    *(_QWORD *)&v32[56] = v7;
    v33 = &v32[8];
    v34 = v35;
    v35[0] = 0;
    v35[1] = 0;
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 20);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    if (*(int *)(v5 + 4) > 2)
    {
      *(_DWORD *)&v32[4] = 0;
      sub_100256B48((uint64_t)v32, v5);
    }
    else
    {
      v10 = *(_QWORD **)(v5 + 72);
      v11 = v34;
      *v34 = *v10;
      v11[1] = v10[1];
    }
  }
  else
  {
    sub_10025CCB8(a3, -1, (uint64_t)v32);
  }
  if (*(_QWORD *)&v36[56])
  {
    v12 = (unsigned int *)(*(_QWORD *)&v36[56] + 20);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      sub_100256C90((uint64_t)v36);
  }
  if (*(int *)&v36[4] >= 1)
  {
    v15 = 0;
    v16 = v37;
    do
      v16[v15++] = 0;
    while (v15 < *(int *)&v36[4]);
  }
  *(_OWORD *)v36 = *(_OWORD *)v32;
  *(_OWORD *)&v36[16] = *(_OWORD *)&v32[16];
  *(_OWORD *)&v36[32] = *(_OWORD *)&v32[32];
  *(_OWORD *)&v36[48] = *(_OWORD *)&v32[48];
  if (v38 == &v39)
  {
    v17 = v34;
    if (*(int *)&v32[4] <= 2)
      goto LABEL_25;
  }
  else
  {
    j__free(v38);
    v37 = &v36[8];
    v38 = &v39;
    v17 = v34;
    if (*(int *)&v32[4] <= 2)
    {
LABEL_25:
      v39 = *v17;
      v40 = v17[1];
      goto LABEL_28;
    }
  }
  v37 = v33;
  v38 = v17;
  v17 = v35;
  v33 = &v32[8];
  v34 = v35;
LABEL_28:
  *(_DWORD *)v32 = 1124007936;
  memset(&v32[4], 0, 60);
  if (v17 != v35)
    j__free(v17);
  v18 = sub_10025C460((unsigned int *)v36, 4, -1, 1);
  if (v18 >= 1)
  {
    v19 = 0;
    v20 = v18;
    do
    {
      if ((v36[1] & 0x40) != 0 || *v37 == 1)
      {
        v21 = *(_QWORD *)&v36[16] + 16 * v19;
      }
      else if (v37[1] == 1)
      {
        v21 = *(_QWORD *)&v36[16] + *(_QWORD *)v38 * v19;
      }
      else
      {
        v21 = *(_QWORD *)&v36[16]
            + *(_QWORD *)v38 * ((int)v19 / *(_DWORD *)&v36[12])
            + 16 * ((int)v19 % *(_DWORD *)&v36[12]);
      }
      v22 = *(float *)(v21 + 4);
      v23 = *(float *)(v21 + 8);
      v24 = *(float *)(v21 + 12);
      LODWORD(v31) = (uint64_t)rintf(*(float *)v21);
      HIDWORD(v31) = (uint64_t)rintf(v22);
      LODWORD(v30) = (uint64_t)rintf(v23);
      HIDWORD(v30) = (uint64_t)rintf(v24);
      *(_OWORD *)v32 = 0uLL;
      *(_OWORD *)&v32[16] = xmmword_1003C3130;
      sub_1002E5A10((uint64_t)a2, &v31, &v30, (double *)v32, 1u, 8, 0);
      ++v19;
    }
    while (v19 != v20);
  }
  if (*(_QWORD *)&v36[56])
  {
    v25 = (unsigned int *)(*(_QWORD *)&v36[56] + 20);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
      sub_100256C90((uint64_t)v36);
  }
  *(_QWORD *)&v36[56] = 0;
  memset(&v36[16], 0, 32);
  if (*(int *)&v36[4] >= 1)
  {
    v28 = 0;
    v29 = v37;
    do
      v29[v28++] = 0;
    while (v28 < *(int *)&v36[4]);
  }
  if (v38 != &v39)
    j__free(v38);
  if (v42)
    sub_1002989D0(v41);
}

void sub_10031B9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_10029434C((uint64_t *)va);
  sub_1001D40CC(v17 - 64);
  _Unwind_Resume(a1);
}

uint64_t sub_10031BA14(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _QWORD *v30;
  _QWORD *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float *v44;
  float v45;
  float v46;
  uint64_t v47;
  float *v48;
  float *v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  float *v54;
  float v55;
  float v56;
  uint64_t v57;
  float *v58;
  float *v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  _QWORD *v67;
  _QWORD *v68;
  unsigned int i;
  unint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int *v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  char v80;
  char v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  char *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  _BYTE *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  _DWORD *v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  _DWORD *v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  int64x2_t v113;
  int64x2_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  void *v121;
  _QWORD v122[2];
  int v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE v133[64];
  _BYTE *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE v138[64];
  _DWORD *v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143[2];
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  _BYTE v150[64];
  _DWORD *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE v155[4];
  int v156;
  int v157;
  int v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  _BYTE v165[8];
  int v166;

  sub_100298C2C(v165, &off_100453598);
  v9 = *a2;
  v10 = a2[1];
  if (sub_1002637F8((uint64_t)a5)
    && (sub_10025D920((uint64_t)a5, 0xFFFFFFFF, (uint64_t)v150), *(_QWORD *)v150 != *(_QWORD *)a2))
  {
    sub_10025D920((uint64_t)a5, 0xFFFFFFFF, (uint64_t)v150);
    v9 = *(_DWORD *)v150;
    v10 = *(_DWORD *)&v150[4];
    if (!(*(_DWORD *)&v150[4] * *(_DWORD *)v150))
    {
LABEL_4:
      *(_OWORD *)v150 = 0uLL;
      v11 = sub_10029430C(v150, 9);
      *(_BYTE *)(v11 + 8) = 41;
      *(_QWORD *)v11 = *(_QWORD *)"sz.area()";
      sub_100294B74(-215, (uint64_t *)v150, "compareSegments", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 1178);
    }
  }
  else if (!(v10 * v9))
  {
    goto LABEL_4;
  }
  v143[0] = __PAIR64__(v10, v9);
  sub_100254168(v143, 0, (uint64_t)v150);
  sub_10031DF60((uint64_t)v155, v150);
  sub_100008C98((uint64_t)v150);
  *(_DWORD *)v138 = v9;
  *(_DWORD *)&v138[4] = v10;
  sub_100254168((uint64_t *)v138, 0, (uint64_t)v150);
  sub_10031DF60((uint64_t)v143, v150);
  sub_100008C98((uint64_t)v150);
  *(_DWORD *)v150 = 1124007936;
  memset(&v150[4], 0, 60);
  v151 = &v150[8];
  v152 = &v153;
  v154 = 0;
  v153 = 0;
  *(_DWORD *)v138 = 1124007936;
  memset(&v138[4], 0, 60);
  v139 = &v138[8];
  v140 = &v141;
  v141 = 0;
  v142 = 0;
  if (sub_10025D914((_DWORD *)a3) == 0x10000)
  {
    v12 = *(_QWORD *)(a3 + 8);
    v13 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)v133 = *(_OWORD *)v12;
    *(_OWORD *)&v133[16] = v13;
    *(_OWORD *)&v133[32] = *(_OWORD *)(v12 + 32);
    v14 = *(_QWORD *)(v12 + 56);
    *(_QWORD *)&v133[48] = *(_QWORD *)(v12 + 48);
    *(_QWORD *)&v133[56] = v14;
    v134 = &v133[8];
    v135 = &v136;
    v136 = 0;
    v137 = 0;
    if (v14)
    {
      v15 = (unsigned int *)(v14 + 20);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
    }
    if (*(int *)(v12 + 4) > 2)
    {
      *(_DWORD *)&v133[4] = 0;
      sub_100256B48((uint64_t)v133, v12);
    }
    else
    {
      v17 = *(_QWORD **)(v12 + 72);
      v18 = v135;
      *(_QWORD *)v135 = *v17;
      v18[1] = v17[1];
    }
  }
  else
  {
    sub_10025CCB8(a3, -1, (uint64_t)v133);
  }
  if (*(_QWORD *)&v150[56])
  {
    v19 = (unsigned int *)(*(_QWORD *)&v150[56] + 20);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      sub_100256C90((uint64_t)v150);
  }
  if (*(int *)&v150[4] >= 1)
  {
    v22 = 0;
    v23 = v151;
    do
      v23[v22++] = 0;
    while (v22 < *(int *)&v150[4]);
  }
  *(_OWORD *)v150 = *(_OWORD *)v133;
  *(_OWORD *)&v150[16] = *(_OWORD *)&v133[16];
  *(_OWORD *)&v150[32] = *(_OWORD *)&v133[32];
  *(_OWORD *)&v150[48] = *(_OWORD *)&v133[48];
  if (v152 == &v153)
  {
    v24 = (uint64_t *)v135;
    if (*(int *)&v133[4] <= 2)
      goto LABEL_24;
  }
  else
  {
    j__free(v152);
    v152 = &v153;
    v151 = &v150[8];
    v24 = (uint64_t *)v135;
    if (*(int *)&v133[4] <= 2)
    {
LABEL_24:
      v153 = *v24;
      v154 = v24[1];
      goto LABEL_27;
    }
  }
  v152 = v24;
  v151 = v134;
  v24 = &v136;
  v134 = &v133[8];
  v135 = &v136;
LABEL_27:
  *(_DWORD *)v133 = 1124007936;
  memset(&v133[4], 0, 60);
  if (v24 != &v136)
    j__free(v24);
  if (sub_10025D914((_DWORD *)a4) == 0x10000)
  {
    v25 = *(_QWORD *)(a4 + 8);
    v26 = *(_OWORD *)(v25 + 16);
    *(_OWORD *)v133 = *(_OWORD *)v25;
    *(_OWORD *)&v133[16] = v26;
    *(_OWORD *)&v133[32] = *(_OWORD *)(v25 + 32);
    v27 = *(_QWORD *)(v25 + 56);
    *(_QWORD *)&v133[48] = *(_QWORD *)(v25 + 48);
    *(_QWORD *)&v133[56] = v27;
    v134 = &v133[8];
    v135 = &v136;
    v136 = 0;
    v137 = 0;
    if (v27)
    {
      v28 = (unsigned int *)(v27 + 20);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
    }
    if (*(int *)(v25 + 4) > 2)
    {
      *(_DWORD *)&v133[4] = 0;
      sub_100256B48((uint64_t)v133, v25);
    }
    else
    {
      v30 = *(_QWORD **)(v25 + 72);
      v31 = v135;
      *(_QWORD *)v135 = *v30;
      v31[1] = v30[1];
    }
  }
  else
  {
    sub_10025CCB8(a4, -1, (uint64_t)v133);
  }
  if (*(_QWORD *)&v138[56])
  {
    v32 = (unsigned int *)(*(_QWORD *)&v138[56] + 20);
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
      sub_100256C90((uint64_t)v138);
  }
  if (*(int *)&v138[4] >= 1)
  {
    v35 = 0;
    v36 = v139;
    do
      v36[v35++] = 0;
    while (v35 < *(int *)&v138[4]);
  }
  *(_OWORD *)v138 = *(_OWORD *)v133;
  *(_OWORD *)&v138[16] = *(_OWORD *)&v133[16];
  *(_OWORD *)&v138[32] = *(_OWORD *)&v133[32];
  *(_OWORD *)&v138[48] = *(_OWORD *)&v133[48];
  if (v140 == &v141)
  {
    v37 = (uint64_t *)v135;
    if (*(int *)&v133[4] <= 2)
      goto LABEL_47;
  }
  else
  {
    j__free(v140);
    v139 = &v138[8];
    v140 = &v141;
    v37 = (uint64_t *)v135;
    if (*(int *)&v133[4] <= 2)
    {
LABEL_47:
      v141 = *v37;
      v142 = v37[1];
      goto LABEL_50;
    }
  }
  v139 = v134;
  v140 = v37;
  v37 = &v136;
  v134 = &v133[8];
  v135 = &v136;
LABEL_50:
  *(_DWORD *)v133 = 1124007936;
  memset(&v133[4], 0, 60);
  if (v37 != &v136)
    j__free(v37);
  v38 = sub_10025C460((unsigned int *)v150, 4, -1, 1);
  v39 = sub_10025C460((unsigned int *)v138, 4, -1, 1);
  if (v38 >= 1)
  {
    v40 = 0;
    v41 = 4;
    v113 = vdupq_n_s64(0x406FE00000000000uLL);
    do
    {
      if ((v150[1] & 0x40) != 0 || *v151 == 1)
      {
        v43 = *(float *)(*(_QWORD *)&v150[16] + v41);
        v42 = *(float *)(*(_QWORD *)&v150[16] + v41 + 4);
        v44 = (float *)(*(_QWORD *)&v150[16] + v41 - 4);
        v45 = *v44;
      }
      else
      {
        if (v151[1] == 1)
        {
          v47 = *(_QWORD *)&v150[16];
          v48 = (float *)(*(_QWORD *)&v150[16] + *(_QWORD *)v152 * v40);
          v49 = (float *)(*(_QWORD *)&v150[16] + *(_QWORD *)v152 * v40);
          if (v151[1] == 1)
          {
            v45 = *v48;
            v43 = v49[1];
            v42 = *(float *)(*(_QWORD *)&v150[16] + *(_QWORD *)v152 * v40 + 8);
LABEL_66:
            v44 = (float *)(v47 + *(_QWORD *)v152 * v40);
            goto LABEL_57;
          }
        }
        else
        {
          v47 = *(_QWORD *)&v150[16];
          v48 = (float *)(*(_QWORD *)&v150[16]
                        + v41
                        + *(_QWORD *)v152 * ((int)v40 / *(_DWORD *)&v150[12])
                        - 16 * (int)v40 / *(_DWORD *)&v150[12] * *(_DWORD *)&v150[12]
                        - 4);
          v49 = v48;
        }
        v45 = *v48;
        v43 = v49[1];
        v42 = *(float *)(v47
                       + v41
                       + *(_QWORD *)v152 * ((int)v40 / *(_DWORD *)&v150[12])
                       - 16 * (int)v40 / *(_DWORD *)&v150[12] * *(_DWORD *)&v150[12]
                       + 4);
        if (v151[1] == 1)
          goto LABEL_66;
        v44 = (float *)(v47
                      + *(_QWORD *)v152 * ((int)v40 / *(_DWORD *)&v150[12])
                      + 16 * ((int)v40 % *(_DWORD *)&v150[12]));
      }
LABEL_57:
      v46 = v44[3];
      LODWORD(v115) = -2097086464;
      *((_QWORD *)&v115 + 1) = v155;
      *(_QWORD *)&v116 = 0;
      LODWORD(v132) = (uint64_t)rintf(v45);
      HIDWORD(v132) = (uint64_t)rintf(v43);
      LODWORD(v131) = (uint64_t)rintf(v42);
      HIDWORD(v131) = (uint64_t)rintf(v46);
      *(int64x2_t *)v133 = v113;
      *(int64x2_t *)&v133[16] = v113;
      sub_1002E5A10((uint64_t)&v115, &v132, &v131, (double *)v133, 1u, 8, 0);
      ++v40;
      v41 += 16;
    }
    while (v38 != v40);
  }
  if (v39 >= 1)
  {
    v50 = 0;
    v51 = 4;
    v114 = vdupq_n_s64(0x406FE00000000000uLL);
    do
    {
      if ((v138[1] & 0x40) != 0 || *v139 == 1)
      {
        v53 = *(float *)(*(_QWORD *)&v138[16] + v51);
        v52 = *(float *)(*(_QWORD *)&v138[16] + v51 + 4);
        v54 = (float *)(*(_QWORD *)&v138[16] + v51 - 4);
        v55 = *v54;
      }
      else
      {
        if (v139[1] == 1)
        {
          v57 = *(_QWORD *)&v138[16];
          v58 = (float *)(*(_QWORD *)&v138[16] + *(_QWORD *)v140 * v50);
          v59 = (float *)(*(_QWORD *)&v138[16] + *(_QWORD *)v140 * v50);
          if (v139[1] == 1)
          {
            v55 = *v58;
            v53 = v59[1];
            v52 = *(float *)(*(_QWORD *)&v138[16] + *(_QWORD *)v140 * v50 + 8);
LABEL_81:
            v54 = (float *)(v57 + *(_QWORD *)v140 * v50);
            goto LABEL_72;
          }
        }
        else
        {
          v57 = *(_QWORD *)&v138[16];
          v58 = (float *)(*(_QWORD *)&v138[16]
                        + v51
                        + *(_QWORD *)v140 * ((int)v50 / *(_DWORD *)&v138[12])
                        - 16 * (int)v50 / *(_DWORD *)&v138[12] * *(_DWORD *)&v138[12]
                        - 4);
          v59 = v58;
        }
        v55 = *v58;
        v53 = v59[1];
        v52 = *(float *)(v57
                       + v51
                       + *(_QWORD *)v140 * ((int)v50 / *(_DWORD *)&v138[12])
                       - 16 * (int)v50 / *(_DWORD *)&v138[12] * *(_DWORD *)&v138[12]
                       + 4);
        if (v139[1] == 1)
          goto LABEL_81;
        v54 = (float *)(v57
                      + *(_QWORD *)v140 * ((int)v50 / *(_DWORD *)&v138[12])
                      + 16 * ((int)v50 % *(_DWORD *)&v138[12]));
      }
LABEL_72:
      v56 = v54[3];
      LODWORD(v115) = -2097086464;
      *((_QWORD *)&v115 + 1) = v143;
      *(_QWORD *)&v116 = 0;
      LODWORD(v130) = (uint64_t)rintf(v55);
      HIDWORD(v130) = (uint64_t)rintf(v53);
      LODWORD(v129) = (uint64_t)rintf(v52);
      HIDWORD(v129) = (uint64_t)rintf(v56);
      *(int64x2_t *)v133 = v114;
      *(int64x2_t *)&v133[16] = v114;
      sub_1002E5A10((uint64_t)&v115, &v130, &v129, (double *)v133, 1u, 8, 0);
      ++v50;
      v51 += 16;
    }
    while (v39 != v50);
  }
  *(_DWORD *)v133 = 1124007936;
  memset(&v133[4], 0, 60);
  v134 = &v133[8];
  v135 = &v136;
  v136 = 0;
  v137 = 0;
  *(_QWORD *)&v116 = 0;
  LODWORD(v115) = -2130640896;
  *((_QWORD *)&v115 + 1) = v155;
  v128 = 0;
  LODWORD(v126) = -2130640896;
  v127 = v143;
  v123 = 33619968;
  v124 = v133;
  v125 = 0;
  v60 = sub_100263CBC();
  sub_1001D5F80((uint64_t)&v115, (uint64_t)&v126, (uint64_t)&v123, (uint64_t)v60);
  LODWORD(v115) = 16842752;
  *((_QWORD *)&v115 + 1) = v133;
  *(_QWORD *)&v116 = 0;
  v61 = sub_10028D288((uint64_t)&v115);
  if (sub_1002637F8((uint64_t)a5))
  {
    if (sub_100261268(a5, -1) != 3)
    {
      v115 = 0uLL;
      qmemcpy((void *)sub_10029430C(&v115, 22), "_image.channels() == 3", 22);
      sub_100294B74(-215, (uint64_t *)&v115, "compareSegments", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 1211);
    }
    v62 = sub_100261ED0((uint64_t)a5, -1);
    v63 = *(_OWORD *)(v62 + 16);
    v115 = *(_OWORD *)v62;
    v116 = v63;
    v117 = *(_OWORD *)(v62 + 32);
    v64 = *(_QWORD *)(v62 + 56);
    v118 = *(_QWORD *)(v62 + 48);
    v119 = v64;
    v120 = (char *)&v115 + 8;
    v121 = v122;
    v122[0] = 0;
    v122[1] = 0;
    if (v64)
    {
      v65 = (unsigned int *)(v64 + 20);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 + 1, v65));
    }
    if (*(int *)(v62 + 4) > 2)
    {
      DWORD1(v115) = 0;
      sub_100256B48((uint64_t)&v115, v62);
    }
    else
    {
      v67 = *(_QWORD **)(v62 + 72);
      v68 = v121;
      *(_QWORD *)v121 = *v67;
      v68[1] = v67[1];
    }
    if ((BYTE1(v115) & 0x40) == 0 || (v155[1] & 0x40) == 0 || (v143[0] & 0x4000) == 0)
    {
      v126 = 0;
      v127 = 0;
      qmemcpy((void *)sub_10029430C(&v126, 60), "img.isContinuous() && I1.isContinuous() && I2.isContinuous()", 60);
      sub_100294B74(-215, &v126, "compareSegments", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 1213);
    }
    for (i = 0; ; ++i)
    {
      if (v156 >= 3)
      {
        v71 = (int *)(v162 + 4);
        v72 = v156 & 0xFFFFFFFE;
        v73 = 1;
        v74 = 1;
        do
        {
          v73 *= *(v71 - 1);
          v74 *= *v71;
          v71 += 2;
          v72 -= 2;
        }
        while (v72);
        v70 = v74 * v73;
        v75 = v156 - (unint64_t)(v156 & 0xFFFFFFFE);
        if (v75)
        {
          v76 = (int *)(v162 + ((4 * v156) & 0x3FFFFFFF8));
          do
          {
            v77 = *v76++;
            v70 *= v77;
            --v75;
          }
          while (v75);
        }
      }
      else
      {
        v70 = v158 * (uint64_t)v157;
      }
      if (v70 <= i)
        break;
      v78 = *(unsigned __int8 *)(v144 + i);
      if (*(unsigned __int8 *)(v159 + i) | v78)
      {
        v79 = 3 * i;
        if (*(_BYTE *)(v159 + i))
          v80 = -1;
        else
          v80 = 0;
        *(_BYTE *)(v116 + v79) = v80;
        *(_BYTE *)(v116 + v79 + 1) = 0;
        if (v78)
          v81 = -1;
        else
          v81 = 0;
        *(_BYTE *)(v116 + v79 + 2) = v81;
      }
    }
    if (v119)
    {
      v82 = (unsigned int *)(v119 + 20);
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
        sub_100256C90((uint64_t)&v115);
    }
    v119 = 0;
    v116 = 0u;
    v117 = 0u;
    if (SDWORD1(v115) >= 1)
    {
      v85 = 0;
      v86 = v120;
      do
        *(_DWORD *)&v86[4 * v85++] = 0;
      while (v85 < SDWORD1(v115));
    }
    if (v121 != v122)
      j__free(v121);
  }
  if (*(_QWORD *)&v133[56])
  {
    v87 = (unsigned int *)(*(_QWORD *)&v133[56] + 20);
    do
    {
      v88 = __ldaxr(v87);
      v89 = v88 - 1;
    }
    while (__stlxr(v89, v87));
    if (!v89)
      sub_100256C90((uint64_t)v133);
  }
  *(_QWORD *)&v133[56] = 0;
  memset(&v133[16], 0, 32);
  if (*(int *)&v133[4] >= 1)
  {
    v90 = 0;
    v91 = v134;
    do
      *(_DWORD *)&v91[4 * v90++] = 0;
    while (v90 < *(int *)&v133[4]);
  }
  if (v135 != &v136)
    j__free(v135);
  if (*(_QWORD *)&v138[56])
  {
    v92 = (unsigned int *)(*(_QWORD *)&v138[56] + 20);
    do
    {
      v93 = __ldaxr(v92);
      v94 = v93 - 1;
    }
    while (__stlxr(v94, v92));
    if (!v94)
      sub_100256C90((uint64_t)v138);
  }
  *(_QWORD *)&v138[56] = 0;
  memset(&v138[16], 0, 32);
  if (*(int *)&v138[4] >= 1)
  {
    v95 = 0;
    v96 = v139;
    do
      v96[v95++] = 0;
    while (v95 < *(int *)&v138[4]);
  }
  if (v140 != &v141)
    j__free(v140);
  if (*(_QWORD *)&v150[56])
  {
    v97 = (unsigned int *)(*(_QWORD *)&v150[56] + 20);
    do
    {
      v98 = __ldaxr(v97);
      v99 = v98 - 1;
    }
    while (__stlxr(v99, v97));
    if (!v99)
      sub_100256C90((uint64_t)v150);
  }
  *(_QWORD *)&v150[56] = 0;
  memset(&v150[16], 0, 32);
  if (*(int *)&v150[4] >= 1)
  {
    v100 = 0;
    v101 = v151;
    do
      v101[v100++] = 0;
    while (v100 < *(int *)&v150[4]);
  }
  if (v152 != &v153)
    j__free(v152);
  if (v146)
  {
    v102 = (unsigned int *)(v146 + 20);
    do
    {
      v103 = __ldaxr(v102);
      v104 = v103 - 1;
    }
    while (__stlxr(v104, v102));
    if (!v104)
      sub_100256C90((uint64_t)v143);
  }
  v146 = 0;
  v144 = 0u;
  v145 = 0u;
  if (SHIDWORD(v143[0]) >= 1)
  {
    v105 = 0;
    v106 = v147;
    do
      *(_DWORD *)(v106 + 4 * v105++) = 0;
    while (v105 < SHIDWORD(v143[0]));
  }
  if (v148 != &v149)
    j__free(v148);
  if (v161)
  {
    v107 = (unsigned int *)(v161 + 20);
    do
    {
      v108 = __ldaxr(v107);
      v109 = v108 - 1;
    }
    while (__stlxr(v109, v107));
    if (!v109)
      sub_100256C90((uint64_t)v155);
  }
  v161 = 0;
  v159 = 0u;
  v160 = 0u;
  if (v156 >= 1)
  {
    v110 = 0;
    v111 = v162;
    do
      *(_DWORD *)(v111 + 4 * v110++) = 0;
    while (v110 < v156);
  }
  if (v163 != &v164)
    j__free(v163);
  if (v166)
    sub_1002989D0(v165);
  return v61;
}

void sub_10031C914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;

  sub_10029434C(&a11);
  sub_100006BE4((uint64_t)&a33);
  sub_100006BE4((uint64_t)&a45);
  sub_100006BE4((uint64_t)&a69);
  sub_10031726C((uint64_t)&a57);
  sub_10031726C(v69 - 208);
  sub_1001D40CC(v69 - 112);
  _Unwind_Resume(a1);
}

void sub_10031CA98(uint64_t a1)
{
  sub_10031CB50(a1);
  operator delete();
}

uint64_t sub_10031CABC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 20);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      sub_100256C90(a1);
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 64);
    do
      *(_DWORD *)(v7 + 4 * v6++) = 0;
    while (v6 < *(int *)(a1 + 4));
  }
  v8 = *(void **)(a1 + 72);
  if (v8 != (void *)(a1 + 80))
    j__free(v8);
  return a1;
}

_QWORD *sub_10031CB50(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  *(_QWORD *)a1 = off_100453500;
  v2 = *(void **)(a1 + 576);
  if (v2)
  {
    *(_QWORD *)(a1 + 584) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 448);
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(a1 + 392);
  }
  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  if (*(int *)(a1 + 396) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 456);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 396));
  }
  v9 = *(void **)(a1 + 464);
  if (v9 != (void *)(a1 + 472))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 352);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 296);
  }
  *(_QWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  if (*(int *)(a1 + 300) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 360);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 300));
  }
  v16 = *(void **)(a1 + 368);
  if (v16 != (void *)(a1 + 376))
    j__free(v16);
  v17 = *(_QWORD *)(a1 + 256);
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 20);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      sub_100256C90(a1 + 200);
  }
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  if (*(int *)(a1 + 204) >= 1)
  {
    v21 = 0;
    v22 = *(_QWORD *)(a1 + 264);
    do
      *(_DWORD *)(v22 + 4 * v21++) = 0;
    while (v21 < *(int *)(a1 + 204));
  }
  v23 = *(void **)(a1 + 272);
  if (v23 != (void *)(a1 + 280))
    j__free(v23);
  v24 = *(_QWORD *)(a1 + 160);
  if (v24)
  {
    v25 = (unsigned int *)(v24 + 20);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
      sub_100256C90(a1 + 104);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v28 = 0;
    v29 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v29 + 4 * v28++) = 0;
    while (v28 < *(int *)(a1 + 108));
  }
  v30 = *(void **)(a1 + 176);
  if (v30 != (void *)(a1 + 184))
    j__free(v30);
  v31 = *(_QWORD *)(a1 + 64);
  if (v31)
  {
    v32 = (unsigned int *)(v31 + 20);
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v35 = 0;
    v36 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v36 + 4 * v35++) = 0;
    while (v35 < *(int *)(a1 + 12));
  }
  v37 = *(void **)(a1 + 80);
  if (v37 != (void *)(a1 + 88))
    j__free(v37);
  return sub_1001D4100((_QWORD *)a1);
}

void sub_10031CDE8()
{
  operator delete();
}

uint64_t sub_10031CDFC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_10031CE38(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_100008F3C();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_100008FF8();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *(v5 - 2);
        v5 -= 2;
        *((_QWORD *)v13 - 2) = v17;
        v13 -= 16;
        *((_QWORD *)v13 + 1) = v5[1];
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_10031CF5C(uint64_t a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, int *), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t *v22;
  char v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char v44;
  uint64_t v46;
  char v47;

uint64_t sub_10031D43C(int *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, int *))
{
  char v8;
  uint64_t result;
  int v10;
  int v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, (int *)a2);
  if ((v8 & 1) != 0)
  {
    v11 = *a1;
    v10 = a1[1];
    v12 = *((_BYTE *)a1 + 8);
    if ((_DWORD)result)
    {
      *(_QWORD *)a1 = *a3;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a3 + 8);
      *(_DWORD *)a3 = v11;
      *((_DWORD *)a3 + 1) = v10;
      *((_BYTE *)a3 + 8) = v12;
      return 1;
    }
    *(_QWORD *)a1 = *a2;
    *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
    *(_DWORD *)a2 = v11;
    *((_DWORD *)a2 + 1) = v10;
    *((_BYTE *)a2 + 8) = v12;
    if ((*a4)(a3, (int *)a2))
    {
      v19 = *((_BYTE *)a2 + 8);
      v20 = *a3;
      *((_BYTE *)a2 + 8) = *((_BYTE *)a3 + 8);
      v21 = *a2;
      *a2 = v20;
      *a3 = v21;
      *((_BYTE *)a3 + 8) = v19;
      return 2;
    }
    return 1;
  }
  if ((_DWORD)result)
  {
    v13 = *((_BYTE *)a2 + 8);
    v14 = *a3;
    *((_BYTE *)a2 + 8) = *((_BYTE *)a3 + 8);
    v15 = *a2;
    *a2 = v14;
    *a3 = v15;
    *((_BYTE *)a3 + 8) = v13;
    if ((*a4)(a2, a1))
    {
      v16 = *((_BYTE *)a1 + 8);
      v17 = *a2;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      v18 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v17;
      *a2 = v18;
      *((_BYTE *)a2 + 8) = v16;
      return 2;
    }
    return 1;
  }
  return result;
}

uint64_t *sub_10031D5B4(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v4 = a2;
  v13 = *a1;
  v14 = *((_BYTE *)a1 + 8);
  if (((*a3)(&v13, (uint64_t *)((char *)a2 - 12)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 = (uint64_t *)((char *)v6 + 12);
    while (((*a3)(&v13, v6) & 1) == 0);
  }
  else
  {
    v7 = (uint64_t *)((char *)a1 + 12);
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v13, v7);
      v7 = (uint64_t *)((char *)v6 + 12);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 = (uint64_t *)((char *)v4 - 12);
    while (((*a3)(&v13, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *((_BYTE *)v6 + 8);
    v10 = *v4;
    *((_BYTE *)v6 + 8) = *((_BYTE *)v4 + 8);
    v11 = *v6;
    *v6 = v10;
    *v4 = v11;
    *((_BYTE *)v4 + 8) = v9;
    do
      v6 = (uint64_t *)((char *)v6 + 12);
    while (!(*a3)(&v13, v6));
    do
      v4 = (uint64_t *)((char *)v4 - 12);
    while (((*a3)(&v13, v4) & 1) != 0);
  }
  if ((uint64_t *)((char *)v6 - 12) != a1)
  {
    *a1 = *(uint64_t *)((char *)v6 - 12);
    *((_BYTE *)a1 + 8) = *((_BYTE *)v6 - 4);
  }
  *(uint64_t *)((char *)v6 - 12) = v13;
  *((_BYTE *)v6 - 4) = v14;
  return v6;
}

double sub_10031D700(uint64_t a1, uint64_t *a2, uint64_t (**a3)(uint64_t, double *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  double v14;
  char v15;

  v6 = 0;
  v14 = *(double *)a1;
  v15 = *(_BYTE *)(a1 + 8);
  do
    v6 += 12;
  while (((*a3)(v6 + a1, &v14) & 1) != 0);
  v7 = a1 + v6;
  if (v6 == 12)
  {
    do
    {
      if (v7 >= (unint64_t)a2)
        break;
      a2 = (uint64_t *)((char *)a2 - 12);
    }
    while (((*a3)((uint64_t)a2, &v14) & 1) == 0);
  }
  else
  {
    do
      a2 = (uint64_t *)((char *)a2 - 12);
    while (!(*a3)((uint64_t)a2, &v14));
  }
  v8 = (uint64_t *)(a1 + v6);
  if (v7 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v10 = *((_BYTE *)v8 + 8);
      v11 = *v9;
      *((_BYTE *)v8 + 8) = *((_BYTE *)v9 + 8);
      v12 = *v8;
      *v8 = v11;
      *v9 = v12;
      *((_BYTE *)v9 + 8) = v10;
      do
        v8 = (uint64_t *)((char *)v8 + 12);
      while (((*a3)((uint64_t)v8, &v14) & 1) != 0);
      do
        v9 = (uint64_t *)((char *)v9 - 12);
      while (!(*a3)((uint64_t)v9, &v14));
    }
    while (v8 < v9);
  }
  if ((uint64_t *)((char *)v8 - 12) != (uint64_t *)a1)
  {
    *(_QWORD *)a1 = *(uint64_t *)((char *)v8 - 12);
    *(_BYTE *)(a1 + 8) = *((_BYTE *)v8 - 4);
  }
  result = v14;
  *(double *)((char *)v8 - 12) = v14;
  *((_BYTE *)v8 - 4) = v15;
  return result;
}

BOOL sub_10031D84C(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, int *))
{
  unint64_t v6;
  _BOOL8 result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if ((*a3)((uint64_t *)(a2 - 12), (int *)a1))
      {
        v8 = *(_BYTE *)(a1 + 8);
        v9 = *(_QWORD *)(a2 - 12);
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 - 4);
        v10 = *(_QWORD *)a1;
        *(_QWORD *)a1 = v9;
        *(_QWORD *)(a2 - 12) = v10;
        *(_BYTE *)(a2 - 4) = v8;
      }
      return 1;
    case 3uLL:
      sub_10031D43C((int *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12), a3);
      return 1;
    case 4uLL:
      sub_10031DA34((int *)a1, a1 + 12, a1 + 24, a2 - 12, a3);
      return 1;
    case 5uLL:
      sub_10031DB14((int *)a1, a1 + 12, a1 + 24, a1 + 36, (uint64_t *)(a2 - 12), a3);
      return 1;
    default:
      v11 = (int *)(a1 + 24);
      sub_10031D43C((int *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), a3);
      v12 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((uint64_t *)v12, v11))
    {
      v18 = *(_QWORD *)v12;
      v19 = *(_BYTE *)(v12 + 8);
      v16 = v13;
      do
      {
        v17 = a1 + v16;
        *(_QWORD *)(v17 + 36) = *(_QWORD *)(a1 + v16 + 24);
        *(_BYTE *)(v17 + 44) = *(_BYTE *)(a1 + v16 + 32);
        if (v16 == -24)
        {
          v15 = a1;
          goto LABEL_7;
        }
        v16 -= 12;
      }
      while (((*a3)(&v18, (int *)(v17 + 12)) & 1) != 0);
      v15 = a1 + v16 + 36;
LABEL_7:
      *(_QWORD *)v15 = v18;
      *(_BYTE *)(v15 + 8) = v19;
      if (++v14 == 8)
        return v12 + 12 == a2;
    }
    v11 = (int *)v12;
    v13 += 12;
    v12 += 12;
    if (v12 == a2)
      return 1;
  }
}

double sub_10031DA34(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t *, int *))
{
  double result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  sub_10031D43C(a1, (uint64_t *)a2, (uint64_t *)a3, a5);
  if ((*a5)((uint64_t *)a4, (int *)a3))
  {
    v11 = *(_BYTE *)(a3 + 8);
    v12 = *(_QWORD *)a4;
    *(_BYTE *)(a3 + 8) = *(_BYTE *)(a4 + 8);
    v13 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v12;
    *(_QWORD *)a4 = v13;
    *(_BYTE *)(a4 + 8) = v11;
    if ((*a5)((uint64_t *)a3, (int *)a2))
    {
      v14 = *(_BYTE *)(a2 + 8);
      v15 = *(_QWORD *)a3;
      *(_BYTE *)(a2 + 8) = *(_BYTE *)(a3 + 8);
      v16 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v15;
      *(_QWORD *)a3 = v16;
      *(_BYTE *)(a3 + 8) = v14;
      if ((*a5)((uint64_t *)a2, a1))
      {
        v17 = *((_BYTE *)a1 + 8);
        result = *(double *)a2;
        *((_BYTE *)a1 + 8) = *(_BYTE *)(a2 + 8);
        v18 = *(_QWORD *)a1;
        *(double *)a1 = result;
        *(_QWORD *)a2 = v18;
        *(_BYTE *)(a2 + 8) = v17;
      }
    }
  }
  return result;
}

double sub_10031DB14(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, int *))
{
  double v12;
  double result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  double v22;
  char v23;
  uint64_t v24;

  v12 = sub_10031DA34(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t *, uint64_t, double))*a6)(a5, a4, v12))
  {
    v14 = *(_BYTE *)(a4 + 8);
    v15 = *a5;
    *(_BYTE *)(a4 + 8) = *((_BYTE *)a5 + 8);
    v16 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v15;
    *a5 = v16;
    *((_BYTE *)a5 + 8) = v14;
    if ((*a6)((uint64_t *)a4, (int *)a3))
    {
      v17 = *(_BYTE *)(a3 + 8);
      v18 = *(_QWORD *)a4;
      *(_BYTE *)(a3 + 8) = *(_BYTE *)(a4 + 8);
      v19 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v18;
      *(_QWORD *)a4 = v19;
      *(_BYTE *)(a4 + 8) = v17;
      if ((*a6)((uint64_t *)a3, (int *)a2))
      {
        v20 = *(_BYTE *)(a2 + 8);
        v21 = *(_QWORD *)a3;
        *(_BYTE *)(a2 + 8) = *(_BYTE *)(a3 + 8);
        v22 = *(double *)a2;
        *(_QWORD *)a2 = v21;
        *(double *)a3 = v22;
        *(_BYTE *)(a3 + 8) = v20;
        if ((*a6)((uint64_t *)a2, a1))
        {
          v23 = *((_BYTE *)a1 + 8);
          result = *(double *)a2;
          *((_BYTE *)a1 + 8) = *(_BYTE *)(a2 + 8);
          v24 = *(_QWORD *)a1;
          *(double *)a1 = result;
          *(_QWORD *)a2 = v24;
          *(_BYTE *)(a2 + 8) = v23;
        }
      }
    }
  }
  return result;
}

double sub_10031DC2C(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v21 = v4;
    v22 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 2)))
    {
      v12 = (0x5555555555555556 * ((a4 - a1) >> 2)) | 1;
      v13 = a1 + 12 * v12;
      v14 = 0x5555555555555556 * ((a4 - a1) >> 2) + 2;
      if (v14 < a3 && (*a2)(a1 + 12 * v12, v13 + 12))
      {
        v13 += 12;
        v12 = v14;
      }
      if ((((uint64_t (*)(uint64_t, uint64_t))*a2)(v13, v7) & 1) == 0)
      {
        v19 = *(double *)v7;
        v20 = *(_BYTE *)(v7 + 8);
        do
        {
          v16 = v13;
          *(_QWORD *)v7 = *(_QWORD *)v13;
          *(_BYTE *)(v7 + 8) = *(_BYTE *)(v13 + 8);
          if (v9 < v12)
            break;
          v17 = (2 * v12) | 1;
          v13 = a1 + 12 * v17;
          v18 = 2 * v12 + 2;
          if (v18 < a3)
          {
            if ((*a2)(a1 + 12 * v17, v13 + 12))
            {
              v13 += 12;
              v17 = v18;
            }
          }
          v7 = v16;
          v12 = v17;
        }
        while (!(*a2)(v13, (uint64_t)&v19));
        result = v19;
        *(double *)v16 = v19;
        *(_BYTE *)(v16 + 8) = v20;
      }
    }
  }
  return result;
}

uint64_t sub_10031DD98(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  if (a4 >= 2)
  {
    v25 = v4;
    v26 = v5;
    v9 = 0;
    v21 = *(_DWORD *)(result + 4);
    v22 = *(_DWORD *)result;
    v10 = (unint64_t)(a4 - 2) >> 1;
    v11 = result;
    v19 = result;
    v20 = *(_BYTE *)(result + 8);
    do
    {
      v12 = v11 + 12 * v9 + 12;
      v13 = (2 * v9) | 1;
      v14 = 2 * v9 + 2;
      if (v14 < a4)
      {
        result = (*a3)(v11 + 12 * v9 + 12, v11 + 12 * v9 + 24);
        if ((_DWORD)result)
        {
          v12 += 12;
          v13 = v14;
        }
      }
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
      v11 = v12;
      v9 = v13;
    }
    while (v13 <= v10);
    if (v12 == a2 - 12)
    {
      *(_DWORD *)v12 = v22;
      *(_DWORD *)(v12 + 4) = v21;
      *(_BYTE *)(v12 + 8) = v20;
    }
    else
    {
      *(_QWORD *)v12 = *(_QWORD *)(a2 - 12);
      *(_BYTE *)(v12 + 8) = *(_BYTE *)(a2 - 4);
      *(_DWORD *)(a2 - 12) = v22;
      *(_DWORD *)(a2 - 8) = v21;
      *(_BYTE *)(a2 - 4) = v20;
      v15 = v12 - v19 + 12;
      if (v15 >= 13)
      {
        v16 = (v15 / 0xCuLL - 2) >> 1;
        v17 = v19 + 12 * v16;
        result = (*a3)(v17, v12);
        if ((_DWORD)result)
        {
          v23 = *(_QWORD *)v12;
          v24 = *(_BYTE *)(v12 + 8);
          do
          {
            v18 = v17;
            *(_QWORD *)v12 = *(_QWORD *)v17;
            *(_BYTE *)(v12 + 8) = *(_BYTE *)(v17 + 8);
            if (!v16)
              break;
            v16 = (v16 - 1) >> 1;
            v17 = v19 + 12 * v16;
            result = (*a3)(v17, (uint64_t)&v23);
            v12 = v18;
          }
          while ((result & 1) != 0);
          *(_QWORD *)v18 = v23;
          *(_BYTE *)(v18 + 8) = v24;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10031DF60(uint64_t a1, _QWORD *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[8];
  _QWORD *v10;
  void *v11;
  _QWORD v12[2];

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 8;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)a1 = 1124007936;
  LODWORD(v9[0]) = 1124007936;
  memset((char *)v9 + 4, 0, 32);
  memset((char *)&v9[4] + 4, 0, 28);
  v10 = &v9[1];
  v11 = v12;
  v12[0] = 0;
  v12[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v9, 0xFFFFFFFFLL);
  sub_10031E094(a1, (uint64_t)v9);
  if (v9[7])
  {
    v3 = (unsigned int *)(v9[7] + 20);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      sub_100256C90((uint64_t)v9);
  }
  v9[7] = 0;
  memset(&v9[2], 0, 32);
  if (SHIDWORD(v9[0]) >= 1)
  {
    v6 = 0;
    v7 = v10;
    do
      *((_DWORD *)v7 + v6++) = 0;
    while (v6 < SHIDWORD(v9[0]));
  }
  if (v11 != v12)
    j__free(v11);
  return a1;
}

void sub_10031E074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100006BE4((uint64_t)&a9);
  sub_10031CABC(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10031E094(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE v20[64];
  _BYTE *v21;
  void *v22;
  _BYTE v23[16];

  if ((*(_DWORD *)a2 & 0xFFF) != 0)
  {
    if ((*(_DWORD *)a2 & 7) != 0)
    {
      *(_DWORD *)v20 = -2113863680;
      *(_QWORD *)&v20[8] = a1;
      *(_QWORD *)&v20[16] = 0;
      sub_1002044A8((unsigned int *)a2, (uint64_t)v20, 0, 1.0, 0.0);
      return a1;
    }
    sub_10025B694((unsigned int *)a2, 1, *(_DWORD *)(a2 + 4), 0, (uint64_t)v20);
    v4 = *(_QWORD *)(a1 + 56);
    if (v20 == (_BYTE *)a1)
    {
      if (v4)
      {
        v15 = (unsigned int *)(v4 + 20);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
          sub_100256C90((uint64_t)v20);
      }
      goto LABEL_26;
    }
    if (v4)
    {
      v5 = (unsigned int *)(v4 + 20);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        sub_100256C90(a1);
    }
    *(_QWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    if (*(int *)(a1 + 4) >= 1)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 64);
      do
        *(_DWORD *)(v9 + 4 * v8++) = 0;
      while (v8 < *(int *)(a1 + 4));
    }
    v10 = *(_DWORD *)&v20[4];
    v11 = *(_OWORD *)&v20[16];
    *(_OWORD *)a1 = *(_OWORD *)v20;
    *(_OWORD *)(a1 + 16) = v11;
    v12 = *(_OWORD *)&v20[48];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v20[32];
    *(_OWORD *)(a1 + 48) = v12;
    v13 = *(_QWORD **)(a1 + 72);
    if (v13 == (_QWORD *)(a1 + 80))
    {
      v14 = v22;
      if (v10 <= 2)
        goto LABEL_17;
    }
    else
    {
      j__free(v13);
      *(_QWORD *)(a1 + 64) = a1 + 8;
      *(_QWORD *)(a1 + 72) = a1 + 80;
      v13 = (_QWORD *)(a1 + 80);
      v14 = v22;
      if (*(int *)&v20[4] <= 2)
      {
LABEL_17:
        *v13 = *v14;
        v13[1] = v14[1];
LABEL_25:
        *(_DWORD *)v20 = 1124007936;
        memset(&v20[4], 0, 60);
LABEL_26:
        *(_QWORD *)&v20[56] = 0;
        memset(&v20[16], 0, 32);
        if (*(int *)&v20[4] >= 1)
        {
          v18 = 0;
          v19 = v21;
          do
            *(_DWORD *)&v19[4 * v18++] = 0;
          while (v18 < *(int *)&v20[4]);
        }
        if (v22 != v23)
          j__free(v22);
        return a1;
      }
    }
    *(_QWORD *)(a1 + 64) = v21;
    *(_QWORD *)(a1 + 72) = v14;
    v21 = &v20[8];
    v22 = v23;
    goto LABEL_25;
  }
  sub_10024B080(a1, a2);
  return a1;
}

void sub_10031E2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10031E2CC(unint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, double a10, int a11, int a12)
{
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  _BOOL4 v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  _BOOL4 v30;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BOOL4 v40;
  unsigned int v43;
  int v44;
  uint64_t (*v45)(int, int, int, int, int, int, int, int, int);
  int v48;
  unsigned int v49;
  uint64_t (*v50)();
  uint64_t v51;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int32x4_t *v56;
  int32x4_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int32x4_t v61;
  uint64_t v62;
  unsigned int v63;
  int32x4_t v64;
  int32x4_t v65;
  uint64_t v66;
  int32x4_t *v67;
  int32x4_t v68;
  __int32 *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)();
  uint64_t v74;
  signed int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  signed int v81;
  uint64_t v82;
  double v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  uint64_t v88;
  int32x4_t *v89;
  int64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  float64x2_t v97;
  int v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int *v105;
  uint64_t v106;
  int v108;
  unint64_t v109;
  int32x4_t v110;
  unint64_t v111;
  int32x4_t v112;
  int32x4_t v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  int32x4_t v117;
  unint64_t v118;
  int32x4_t v119;
  int32x4_t *v120;
  int v121;
  unint64_t v122;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  float32x4_t v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int32x4_t v137;
  double v138;
  int v139;
  float v140;
  uint64_t v141;
  BOOL v142;
  BOOL v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  int32x4_t v147;
  int32x4_t *v148;
  int32x4_t v149;
  uint64_t v150;
  int32x4_t v151;
  _DWORD *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  _BYTE *v158;
  unint64_t v159;
  unint64_t v160;
  float32x4_t *v161;
  float32x4_t *v162;
  float32x4_t v163;
  _DWORD *v164;
  int *v165;
  uint64_t v166;
  int v167;
  float v168;
  uint64_t v169;
  __int16 v170;
  __int16 *v171;
  uint64_t v172;
  float v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  float v178;
  uint64_t v179;
  _WORD *v180;
  int v181;
  int v182;
  uint64_t v183;
  int v184;
  unint64_t v185;
  unint64_t v186;
  float32x4_t *v187;
  float32x4_t *v188;
  float32x4_t v189;
  _WORD *v190;
  __int16 *v191;
  uint64_t v192;
  __int16 v193;
  unsigned int v194;
  uint64_t v195;
  _BYTE *v196;
  int v197;
  float v198;
  uint64_t v199;
  unsigned int v200;
  int v201;
  float v202;
  uint64_t v203;
  __int16 v204;
  __int16 *v205;
  uint64_t v206;
  float v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  float v212;
  uint64_t v213;
  _WORD *v214;
  int v215;
  int v216;
  uint64_t v217;
  int v218;
  _BYTE *v219;
  unsigned int *v220;
  unsigned int v221;
  unsigned int v222;
  uint64_t v223;
  _DWORD *v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t (*v231)(int, int, int, int, int, int, int, int, int);
  int v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  _BYTE *v236;
  unint64_t v237;
  uint64_t v238;
  _BYTE *v239;
  uint64_t __n;
  _BYTE *v241;
  unsigned int v242;
  int v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  _BYTE *v248;
  uint64_t v249;
  unint64_t v250;
  int v251;
  _BYTE *v253;
  double v254;
  uint64_t v255;
  unsigned int v257;
  _BYTE *v258;
  int v260;
  unsigned int v262;
  int v263[2];
  _BYTE v264[4];
  int v265;
  int v266;
  int v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  _DWORD *v271;
  void *v272;
  uint64_t v273;
  int v274[2];
  int v275;
  int v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  void *v281;
  uint64_t v282;
  char v283[8];
  int v284;
  _DWORD v285[2];
  float32x4_t __src;
  float v287[266];
  _BYTE *v288;
  unint64_t v289;
  _BYTE v290[1120];

  sub_100298C2C(v283, &off_100453628);
  if (a11 * (int)a8 <= 0 && (a9 <= 0.0 || a10 <= 0.0))
  {
    v289 = 0;
    v288 = 0;
    qmemcpy((void *)sub_10029430C(&v288, 68), "(dst_width * dst_height > 0) || (inv_scale_x > 0 && inv_scale_y > 0)", 68);
    sub_100294B74(-215, (uint64_t *)&v288, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 3675);
  }
  if (a9 < 2.22044605e-16 || a10 < 2.22044605e-16)
  {
    a9 = (double)(int)a8 / (double)a4;
    v19 = (double)(int)a5;
    a10 = (double)a11 / (double)(int)a5;
  }
  else
  {
    v19 = (double)(int)a5;
  }
  v20 = (uint64_t)rint(a9 * (double)a4);
  v21 = (uint64_t)rint(a10 * v19);
  if ((int)v21 * (int)v20 <= 0)
  {
    v289 = 0;
    v288 = 0;
    *(_OWORD *)sub_10029430C(&v288, 16) = *(_OWORD *)"dsize.area() > 0";
    sub_100294B74(-215, (uint64_t *)&v288, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 3687);
  }
  v22 = (uint64_t)rint(1.0 / a9);
  v23 = 1.0 / a10;
  v24 = (uint64_t)rint(1.0 / a10);
  v254 = 1.0 / a9;
  v25 = vabdd_f64(1.0 / a9, (double)(int)v22) < 2.22044605e-16;
  v26 = vabdd_f64(1.0 / a10, (double)(int)v24) < 2.22044605e-16 && v25;
  v274[0] = a4;
  v274[1] = a5;
  sub_10022FD68((uint64_t)&v275, v274, a1, a2, a3);
  v250 = a3;
  v255 = v20;
  v263[0] = v20;
  v263[1] = v21;
  sub_10022FD68((uint64_t)v264, v263, a1, a6, a7);
  v27 = a12;
  if (!a12)
  {
    v33 = *(_DWORD *)(v280 + 4);
    v34 = *v271;
    v35 = (int)v271[1];
    v36 = v271[1];
    v288 = v290;
    v289 = v35;
    if (v35 >= 0x109)
      operator new[]();
    if (v276 < 1)
    {
      LODWORD(v37) = 0;
      LODWORD(v38) = 0;
      if ((int)v36 < 1)
        goto LABEL_113;
    }
    else
    {
      v37 = *((_QWORD *)v281 + (v276 - 1));
      v38 = (unint64_t)(int)v37 >> 2;
      if ((int)v36 < 1)
        goto LABEL_113;
    }
    v81 = v33 - 1;
    if (v35 >= 4)
    {
      v82 = v36 & 0xFFFFFFFC;
      v84 = vdupq_n_s32(v81);
      v85 = (int32x4_t)xmmword_1003BCB00;
      v86 = vdupq_n_s32(v37);
      v87.i64[0] = 0x400000004;
      v87.i64[1] = 0x400000004;
      v88 = v82;
      v89 = (int32x4_t *)v290;
      v83 = 1.0 / a9;
      do
      {
        v90.i64[0] = v85.i32[2];
        v90.i64[1] = v85.i32[3];
        v91 = vcvtq_f64_s64(v90);
        v90.i64[0] = v85.i32[0];
        v90.i64[1] = v85.i32[1];
        v92 = vmulq_n_f64(vcvtq_f64_s64(v90), v254);
        v93 = vmulq_n_f64(v91, v254);
        v94 = (int32x4_t)vcvtq_s64_f64(v93);
        v95 = (int32x4_t)vcvtq_s64_f64(v92);
        v96 = vuzp1q_s32(v95, v94);
        *(int32x2_t *)v94.i8 = vmovn_s64((int64x2_t)v94);
        *(int32x2_t *)v95.i8 = vmovn_s64((int64x2_t)v95);
        v90.i64[0] = v95.i32[0];
        v90.i64[1] = v95.i32[1];
        v97 = vcvtq_f64_s64(v90);
        v90.i64[0] = v94.i32[0];
        v90.i64[1] = v94.i32[1];
        *v89++ = vmulq_s32(vminq_s32(v84, vaddq_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v97, v92), (int32x4_t)vcgtq_f64(vcvtq_f64_s64(v90), v93)), v96)), v86);
        v85 = vaddq_s32(v85, v87);
        v88 -= 4;
      }
      while (v88);
      if (v82 == v36)
        goto LABEL_113;
    }
    else
    {
      v82 = 0;
      v83 = 1.0 / a9;
    }
    do
    {
      v98 = (int)(v83 * (double)(int)v82) - (v83 * (double)(int)v82 < (double)(int)(v83 * (double)(int)v82));
      if (v81 < v98)
        v98 = v33 - 1;
      *(_DWORD *)&v290[4 * v82++] = v98 * v37;
    }
    while (v36 != v82);
LABEL_113:
    v285[0] = 0;
    v285[1] = v34;
    sub_100323378((uint64_t)&__src, (uint64_t)&v275, (uint64_t)v264, (uint64_t)v290, v38, 1.0 / a10);
    if (v265 >= 3)
    {
      v100 = v271 + 1;
      v101 = 1;
      v102 = v265 & 0xFFFFFFFE;
      v103 = 1;
      do
      {
        v101 *= *(v100 - 1);
        v103 *= *v100;
        v100 += 2;
        v102 -= 2;
      }
      while (v102);
      v99 = v103 * v101;
      v104 = v265 - (unint64_t)(v265 & 0xFFFFFFFE);
      if (v104)
      {
        v105 = (_DWORD *)((char *)v271 + ((4 * v265) & 0x3FFFFFFF8));
        do
        {
          v106 = *v105++;
          v99 *= v106;
          --v104;
        }
        while (v104);
      }
    }
    else
    {
      v99 = v267 * (uint64_t)v266;
    }
    sub_10026F638(v285, (uint64_t)&__src, (double)(unint64_t)v99 * 0.0000152587891);
    sub_100323830((uint64_t)&__src);
    if (v288 != v290 && v288 != 0)
      goto LABEL_307;
    goto LABEL_308;
  }
  v257 = (a1 >> 3) & 0x1FF;
  v28 = v257 + 1;
  if (a12 == 1)
  {
    v40 = (_DWORD)v22 == 2 && (_DWORD)v24 == 2;
    if (v40 && v26)
      v27 = 3;
    else
      v27 = 1;
LABEL_47:
    if (v254 < 1.0 || v23 < 1.0 || v27 != 3)
      goto LABEL_54;
    goto LABEL_70;
  }
  if (a12 != 5)
    goto LABEL_47;
  v30 = (_DWORD)v22 == 2 && (_DWORD)v24 == 2 && v26;
  if (!v30 || (_DWORD)v28 == 2)
  {
    if ((a1 & 7) - 5 <= 2)
    {
      v289 = 0;
      v288 = 0;
      v32 = sub_10029430C(&v288, 9);
      *(_BYTE *)(v32 + 8) = 48;
      *(_QWORD *)v32 = *(_QWORD *)"func != 0";
      sub_100294B74(-215, (uint64_t *)&v288, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 3827);
    }
    ((void (*)(uint64_t, unint64_t, _QWORD, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, double, double, _DWORD))off_100453788[a1 & 7])(a2, v250, a4, a5, a6, a7, a8, a11, a9, a10, v28);
    goto LABEL_308;
  }
  v27 = 3;
  if (v254 >= 1.0 && v23 >= 1.0)
  {
LABEL_70:
    if (!v26)
    {
      v72 = v21;
      v73 = off_100453748[a1 & 7];
      if (v257 > 3 || ((0x6DuLL >> (a1 & 7)) & 1) == 0)
      {
        v289 = 0;
        v288 = 0;
        v74 = sub_10029430C(&v288, 20);
        *(_DWORD *)(v74 + 16) = 874528060;
        *(_OWORD *)v74 = *(_OWORD *)"func != 0 && cn <= 4";
        sub_100294B74(-215, (uint64_t *)&v288, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 3881);
      }
      v75 = 2 * (a5 + a4);
      v288 = v290;
      v289 = v75;
      if (v75 >= 0x5E)
      {
        is_mul_ok(v75, 0xCuLL);
        operator new[]();
      }
      v76 = 2 * a4;
      v77 = sub_100322984(a4, v255, v28, (uint64_t)v290, v254);
      v78 = sub_100322984(a5, v72, 1u, (uint64_t)&v290[24 * a4], 1.0 / a10);
      v79 = (uint64_t)&_mh_execute_header + (v72 << 32);
      __src.i64[0] = (uint64_t)v287;
      __src.i64[1] = v79 >> 32;
      if ((unint64_t)v79 >= 0x10800000001)
        operator new[]();
      if ((int)v78 < 1)
      {
        v80 = 0;
      }
      else
      {
        v287[0] = 0.0;
        if ((_DWORD)v78 == 1)
        {
          v80 = 1;
        }
        else
        {
          v124 = &v290[12 * v76 + 16];
          v125 = 1;
          v80 = 1;
          do
          {
            if (*v124 != *(v124 - 3))
              LODWORD(v287[v80++]) = v125;
            v124 += 3;
            ++v125;
          }
          while (v78 != v125);
        }
      }
      LODWORD(v287[v80]) = v78;
      ((void (*)(int *, _BYTE *, _BYTE *, uint64_t, _BYTE *, uint64_t))v73)(&v275, v264, v290, v77, &v290[12 * v76], v78);
      if ((float *)__src.i64[0] != v287 && __src.i64[0] != 0)
        operator delete[]();
      if (v288 != v290 && v288)
        goto LABEL_307;
      goto LABEL_308;
    }
    v48 = v24 * v22;
    v49 = v24 * v22 + v28 * v255;
    v288 = v290;
    v289 = (int)v49;
    if (v49 >= 0x109)
      operator new[]();
    v50 = off_100453708[a1 & 7];
    if (((0x92uLL >> (a1 & 7)) & 1) != 0)
    {
      __src = 0uLL;
      v51 = sub_10029430C(&__src, 9);
      *(_BYTE *)(v51 + 8) = 48;
      *(_QWORD *)v51 = *(_QWORD *)"func != 0";
      sub_100294B74(-215, (uint64_t *)&__src, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 3862);
    }
    if ((int)v24 >= 1 && (int)v22 >= 1)
    {
      v108 = 0;
      LODWORD(v109) = 0;
      v110 = vdupq_n_s32(v28);
      v111 = v250 / ((0x88442211uLL >> (4 * (v275 & 7u))) & 0xF);
      v112.i64[0] = 0x400000004;
      v112.i64[1] = 0x400000004;
      v113.i64[0] = 0x800000008;
      v113.i64[1] = 0x800000008;
      do
      {
        v114 = v108 * v111;
        v115 = (int)v109;
        if (v22 >= 8uLL)
        {
          v109 = (int)v109 + v22 - (unint64_t)(v22 & 7);
          v117 = vdupq_n_s32(v114);
          v118 = v22 - (unint64_t)(v22 & 7);
          v119 = (int32x4_t)xmmword_1003BCB00;
          v120 = (int32x4_t *)&v290[4 * v115 + 16];
          do
          {
            v120[-1] = vmlaq_s32(v117, v119, v110);
            *v120 = vmlaq_s32(v117, vaddq_s32(v119, v112), v110);
            v119 = vaddq_s32(v119, v113);
            v120 += 2;
            v118 -= 8;
          }
          while (v118);
          v116 = v22 - (v22 & 7);
          if ((v22 & 7) == 0)
            goto LABEL_125;
        }
        else
        {
          v116 = 0;
          v109 = (int)v109;
        }
        v121 = v22 - v116;
        v122 = v109;
        do
        {
          LODWORD(v109) = v122 + 1;
          *(_DWORD *)&v290[4 * v122] = v114 + v116 * v28;
          ++v116;
          ++v122;
          --v121;
        }
        while (v121);
LABEL_125:
        ++v108;
      }
      while (v108 != (_DWORD)v24);
    }
    if ((int)v255 < 1)
    {
LABEL_101:
      ((void (*)(int *, _BYTE *, _BYTE *, _BYTE *, uint64_t, uint64_t))v50)(&v275, v264, v290, &v290[4 * v48], v22, v24);
      if (v288 != v290 && v288)
        goto LABEL_307;
      goto LABEL_308;
    }
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = (int32x4_t *)&v290[4 * v48];
    v57 = v56 + 1;
    v58 = (a1 >> 3) & 0x1FF;
    v59 = 4 * v58 + 4;
    v60 = v58 + 1;
    v61.i64[0] = 0x800000008;
    v61.i64[1] = 0x800000008;
    while (1)
    {
      if (v257 >= 7)
      {
        v63 = v55 * v28 * v22;
        v64 = vdupq_n_s32(v63);
        v65 = vdupq_n_s32(v63 + 4);
        v66 = ((_WORD)v257 + 1) & 0x3F8;
        v67 = v57;
        v68 = (int32x4_t)xmmword_1003BCB00;
        do
        {
          v67[-1] = vaddq_s32(v64, v68);
          *v67 = vaddq_s32(v65, v68);
          v68 = vaddq_s32(v68, v61);
          v67 += 2;
          v66 -= 8;
        }
        while (v66);
        v62 = ((_WORD)v257 + 1) & 0x3F8;
        if (v62 == v257 + 1)
          goto LABEL_82;
      }
      else
      {
        v62 = 0;
      }
      v69 = &v56->i32[v62 + v54];
      v70 = v53 + v62;
      v71 = v60 - v62;
      do
      {
        *v69++ = v70++;
        --v71;
      }
      while (v71);
LABEL_82:
      ++v55;
      v57 = (int32x4_t *)((char *)v57 + v59);
      v54 += v28;
      v53 += v28 * v22;
      if (v55 == v255)
        goto LABEL_101;
    }
  }
LABEL_54:
  if (v27 != 2)
  {
    v44 = a1 & 7;
    if (v27 != 1)
    {
      if (v27 == 4)
      {
        v43 = 8;
        v45 = off_1004536C8[a1 & 7];
        v251 = 4;
        if (v45)
          goto LABEL_151;
LABEL_150:
        v289 = 0;
        v288 = 0;
        v126 = sub_10029430C(&v288, 9);
        *(_BYTE *)(v126 + 8) = 48;
        *(_QWORD *)v126 = *(_QWORD *)"func != 0";
        sub_100294B74(-215, (uint64_t *)&v288, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 3922);
      }
      if (v27 != 3)
      {
        sub_1001F37D4(&v288, "Unknown interpolation method");
        sub_100294B74(-5, (uint64_t *)&v288, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 3919);
      }
    }
    v43 = 2;
    v45 = off_100453648[a1 & 7];
    v251 = 1;
    if (v45)
      goto LABEL_151;
    goto LABEL_150;
  }
  v43 = 4;
  v44 = a1 & 7;
  v45 = off_100453688[a1 & 7];
  v251 = 2;
  if (!v45)
    goto LABEL_150;
LABEL_151:
  v127 = v28 * v255;
  v288 = v290;
  v289 = (int)((4 * v43) | 4) * (uint64_t)((int)v28 * (int)v255 + (int)v21);
  if (v289 >= 0x409)
    operator new[]();
  v231 = v45;
  v232 = v21;
  v260 = v44;
  v262 = v43;
  v128 = v127;
  v253 = &v290[4 * v127];
  v241 = &v253[4 * (int)v21];
  v129.i64[1] = 0;
  v230 = v43 * v127;
  __src = 0u;
  memset(v287, 0, 48);
  if ((int)v255 >= 1)
  {
    v130 = 0;
    v131 = 0;
    v132 = 0;
    v242 = 0;
    v243 = a4 - 1;
    v133 = v43 * v28;
    v248 = &v290[4 * v128 + 4 * (int)v21];
    v134 = v43;
    __n = 4 * v43;
    v249 = v255;
    v135 = v133 - v43;
    v237 = v135 & 0xFFFFFFFFFFFFFFF8;
    v247 = v135;
    v234 = (v135 & 0xFFFFFFFFFFFFFFF8) + v43;
    v235 = v135 & 0xFFFFFFFFFFFFFFF0;
    v233 = v135 & 0xFFFFFFFFFFFFFFF0 | v43;
    v246 = ((a1 >> 3) & 0x1FF) + 1;
    v136 = 4 * v128 + 4 * (int)v21;
    v129.i64[1] = 0x300000002;
    v236 = &v290[v136 + 16];
    v239 = &v290[v136];
    v137.i64[0] = 0x800000008;
    v137.i64[1] = 0x800000008;
    v238 = -(uint64_t)v43;
    v244 = v43;
    v245 = v128;
    while (1)
    {
      v138 = (double)(int)v132;
      if (v27 == 3)
      {
        v139 = (int)(v254 * v138) - (v254 * v138 < (double)(int)(v254 * v138));
        *(double *)v129.i64 = (double)((int)v132 + 1) - (double)(v139 + 1) * a9;
        v140 = *(double *)v129.i64;
        v129.i32[0] = 0;
        if (v140 > 0.0)
          v129.f32[0] = v140
                      - (float)(int)((__PAIR64__((int)v140, LODWORD(v140)) - COERCE_UNSIGNED_INT((float)(int)v140)) >> 32);
      }
      else
      {
        *(double *)v129.i64 = (v138 + 0.5) * v254 + -0.5;
        v129.f32[0] = *(double *)v129.i64;
        v139 = (__PAIR64__((int)v129.f32[0], v129.u32[0]) - COERCE_UNSIGNED_INT((float)(int)v129.f32[0])) >> 32;
        v129.f32[0] = v129.f32[0] - (float)v139;
      }
      if (v139 < v251 - 1)
      {
        v242 = v132 + 1;
        if (v139 < 0 && v27 != 2 && v27 != 4)
        {
          v139 = 0;
          v129.i32[0] = 0;
        }
      }
      if (v139 + v251 < a4
        || ((int)v132 >= (int)v255 ? (v141 = v255) : (v141 = v132),
            (v255 = v141, v139 >= v243) ? (v142 = v27 == 2) : (v142 = 1),
            !v142 ? (v143 = v27 == 4) : (v143 = 1),
            v143))
      {
        v144 = v131;
        v145 = v139 * v28;
        if (v257 < 7)
          goto LABEL_175;
      }
      else
      {
        v129.i32[0] = 0;
        v144 = v131;
        v145 = v243 * v28;
        if (v257 < 7)
        {
LABEL_175:
          v146 = 0;
LABEL_183:
          v152 = &v290[4 * v146 + 4 * v144];
          v153 = v145 + v146;
          v154 = v246 - v146;
          do
          {
            *v152++ = v153++;
            --v154;
          }
          while (v154);
          goto LABEL_185;
        }
      }
      v147 = vdupq_n_s32(v145);
      v148 = (int32x4_t *)&v290[4 * v131 + 16];
      v149 = vdupq_n_s32(v145 + 4);
      v150 = ((_WORD)v257 + 1) & 0x3F8;
      v151 = (int32x4_t)xmmword_1003BCB00;
      do
      {
        v148[-1] = vaddq_s32(v147, v151);
        *v148 = vaddq_s32(v149, v151);
        v151 = vaddq_s32(v151, v137);
        v148 += 2;
        v150 -= 8;
      }
      while (v150);
      v146 = ((_WORD)v257 + 1) & 0x3F8;
      if (v146 != v257 + 1)
        goto LABEL_183;
LABEL_185:
      if (v27 == 2)
      {
        __src.f32[0] = (float)((float)((float)((float)((float)((float)(v129.f32[0] + 1.0) * -0.75) + 3.75)
                                             * (float)(v129.f32[0] + 1.0))
                                     + -6.0)
                             * (float)(v129.f32[0] + 1.0))
                     + 3.0;
        __src.f32[1] = (float)((float)(v129.f32[0] * (float)((float)(v129.f32[0] * 1.25) + -2.25)) * v129.f32[0]) + 1.0;
        __src.f32[2] = (float)((float)((float)(1.0 - v129.f32[0])
                                     * (float)((float)((float)(1.0 - v129.f32[0]) * 1.25) + -2.25))
                             * (float)(1.0 - v129.f32[0]))
                     + 1.0;
        __src.f32[3] = (float)((float)(1.0 - __src.f32[0]) - __src.f32[1]) - __src.f32[2];
      }
      else if (v27 == 4)
      {
        v129 = sub_100322B80(&__src, v129);
        v137.i64[0] = 0x800000008;
        v137.i64[1] = 0x800000008;
        v134 = v244;
        v128 = v245;
      }
      else
      {
        __src.f32[0] = 1.0 - v129.f32[0];
        __src.i32[1] = v129.i32[0];
      }
      v155 = v134 + v130;
      v156 = v133 * v132;
      v157 = v134 + (int)v133 * (int)v132;
      if (v260)
      {
        v158 = &v248[4 * v156];
        memcpy(v158, &__src, __n);
        v137.i64[0] = 0x800000008;
        v137.i64[1] = 0x800000008;
        v134 = v244;
        v128 = v245;
        if (v262 < v133)
        {
          v159 = v244;
          if (v247 < 8)
            goto LABEL_197;
          v159 = v244;
          if ((unint64_t)(&v248[4 * v157] - v158) < 0x20)
            goto LABEL_197;
          v160 = v237;
          v161 = (float32x4_t *)&v236[4 * v130];
          v162 = (float32x4_t *)&v236[4 * v155];
          do
          {
            v129 = v161[-1];
            v163 = *v161;
            v162[-1] = v129;
            *v162 = v163;
            v161 += 2;
            v162 += 2;
            v160 -= 8;
          }
          while (v160);
          v159 = v234;
          if (v247 != v237)
          {
LABEL_197:
            v164 = &v239[4 * v159 + 4 * v130];
            v165 = (int *)&v239[4 * v159 + 4 * v130 + 4 * v238];
            v166 = v133 - v159;
            do
            {
              v167 = *v165++;
              *v164++ = v167;
              --v166;
            }
            while (v166);
          }
        }
      }
      else
      {
        v168 = __src.f32[1];
        v169 = (uint64_t)rintf(__src.f32[0] * 2048.0);
        if ((int)v169 <= -32768)
          LODWORD(v169) = -32768;
        if ((int)v169 >= 0x7FFF)
          v170 = 0x7FFF;
        else
          v170 = v169;
        v171 = (__int16 *)&v241[2 * v156];
        *v171 = v170;
        v172 = (uint64_t)rintf(v168 * 2048.0);
        if ((int)v172 <= -32768)
          LODWORD(v172) = -32768;
        if ((int)v172 >= 0x7FFF)
          LOWORD(v172) = 0x7FFF;
        v171[1] = v172;
        if (v262 != 2)
        {
          v173 = __src.f32[3];
          v174 = (uint64_t)rintf(__src.f32[2] * 2048.0);
          if ((int)v174 <= -32768)
            LODWORD(v174) = -32768;
          if ((int)v174 >= 0x7FFF)
            LOWORD(v174) = 0x7FFF;
          v171[2] = v174;
          v175 = (uint64_t)rintf(v173 * 2048.0);
          if ((int)v175 <= -32768)
            LODWORD(v175) = -32768;
          if ((int)v175 >= 0x7FFF)
            LOWORD(v175) = 0x7FFF;
          v171[3] = v175;
          if (v262 != 4)
          {
            v176 = (uint64_t)rintf(v287[0] * 2048.0);
            v177 = (uint64_t)rintf(v287[1] * 2048.0);
            v178 = v287[3];
            v179 = (uint64_t)rintf(v287[2] * 2048.0);
            if ((int)v176 <= -32768)
              LODWORD(v176) = -32768;
            if ((int)v176 >= 0x7FFF)
              LOWORD(v176) = 0x7FFF;
            v180 = &v241[2 * v156];
            v180[4] = v176;
            if ((int)v177 <= -32768)
              v181 = -32768;
            else
              v181 = v177;
            if (v181 >= 0x7FFF)
              LOWORD(v181) = 0x7FFF;
            v180[5] = v181;
            if ((int)v179 <= -32768)
              v182 = -32768;
            else
              v182 = v179;
            if (v182 >= 0x7FFF)
              LOWORD(v182) = 0x7FFF;
            v183 = (uint64_t)rintf(v178 * 2048.0);
            v180[6] = v182;
            if ((int)v183 <= -32768)
              v184 = -32768;
            else
              v184 = v183;
            if (v184 >= 0x7FFF)
              LOWORD(v184) = 0x7FFF;
            v180[7] = v184;
          }
        }
        if (v262 < v133)
        {
          v185 = v134;
          if (v247 < 0x10)
            goto LABEL_245;
          v185 = v134;
          if (2 * v157 - 2 * v156 < 0x20)
            goto LABEL_245;
          v186 = v235;
          v187 = (float32x4_t *)&v236[2 * v130];
          v188 = (float32x4_t *)&v236[2 * v155];
          do
          {
            v129 = v187[-1];
            v189 = *v187;
            v188[-1] = v129;
            *v188 = v189;
            v187 += 2;
            v188 += 2;
            v186 -= 16;
          }
          while (v186);
          v185 = v233;
          if (v247 != v235)
          {
LABEL_245:
            v190 = &v239[2 * v185 + 2 * v130];
            v191 = (__int16 *)&v239[2 * v185 + 2 * v130 + 2 * v238];
            v192 = v133 - v185;
            do
            {
              v193 = *v191++;
              *v190++ = v193;
              --v192;
            }
            while (v192);
          }
        }
      }
      ++v132;
      v131 = v144 + v28;
      v130 += v133;
      if (v132 == v249)
        goto LABEL_249;
    }
  }
  v242 = 0;
LABEL_249:
  v258 = &v241[2 * v230];
  if ((int)v21 >= 1)
  {
    v194 = 0;
    v195 = 0;
    v196 = &v290[4 * v230 + 4 * v128 + 4 * (int)v21];
    while (1)
    {
      *(double *)v129.i64 = (double)(int)v195;
      if (v27 == 3)
        break;
      *(double *)v129.i64 = (*(double *)v129.i64 + 0.5) * v23 + -0.5;
      v129.f32[0] = *(double *)v129.i64;
      v201 = (__PAIR64__((int)v129.f32[0], v129.u32[0]) - COERCE_UNSIGNED_INT((float)(int)v129.f32[0])) >> 32;
      v129.f32[0] = v129.f32[0] - (float)v201;
      *(_DWORD *)&v253[4 * v195] = v201;
      if (v27 == 2)
      {
        __src.f32[0] = (float)((float)((float)((float)((float)((float)(v129.f32[0] + 1.0) * -0.75) + 3.75)
                                             * (float)(v129.f32[0] + 1.0))
                                     + -6.0)
                             * (float)(v129.f32[0] + 1.0))
                     + 3.0;
        __src.f32[1] = (float)((float)(v129.f32[0] * (float)((float)(v129.f32[0] * 1.25) + -2.25)) * v129.f32[0]) + 1.0;
        __src.f32[2] = (float)((float)((float)(1.0 - v129.f32[0])
                                     * (float)((float)((float)(1.0 - v129.f32[0]) * 1.25) + -2.25))
                             * (float)(1.0 - v129.f32[0]))
                     + 1.0;
        __src.f32[3] = (float)((float)(1.0 - __src.f32[0]) - __src.f32[1]) - __src.f32[2];
        v199 = v194;
        if (!v260)
          goto LABEL_260;
      }
      else
      {
        if (v27 != 4)
          goto LABEL_256;
        v129 = sub_100322B80(&__src, v129);
        v199 = v194;
        if (!v260)
        {
LABEL_260:
          v200 = v262;
          v202 = __src.f32[1];
          v203 = (uint64_t)rintf(__src.f32[0] * 2048.0);
          if ((int)v203 <= -32768)
            LODWORD(v203) = -32768;
          if ((int)v203 >= 0x7FFF)
            v204 = 0x7FFF;
          else
            v204 = v203;
          v205 = (__int16 *)&v258[2 * v199];
          *v205 = v204;
          v206 = (uint64_t)rintf(v202 * 2048.0);
          if ((int)v206 <= -32768)
            LODWORD(v206) = -32768;
          if ((int)v206 >= 0x7FFF)
            LOWORD(v206) = 0x7FFF;
          v205[1] = v206;
          if (v262 != 2)
          {
            v207 = __src.f32[3];
            v208 = (uint64_t)rintf(__src.f32[2] * 2048.0);
            if ((int)v208 <= -32768)
              LODWORD(v208) = -32768;
            if ((int)v208 >= 0x7FFF)
              LOWORD(v208) = 0x7FFF;
            v205[2] = v208;
            v209 = (uint64_t)rintf(v207 * 2048.0);
            if ((int)v209 <= -32768)
              LODWORD(v209) = -32768;
            if ((int)v209 >= 0x7FFF)
              LOWORD(v209) = 0x7FFF;
            v205[3] = v209;
            if (v262 != 4)
            {
              v210 = (uint64_t)rintf(v287[0] * 2048.0);
              v211 = (uint64_t)rintf(v287[1] * 2048.0);
              v212 = v287[3];
              v213 = (uint64_t)rintf(v287[2] * 2048.0);
              if ((int)v210 <= -32768)
                LODWORD(v210) = -32768;
              if ((int)v210 >= 0x7FFF)
                LOWORD(v210) = 0x7FFF;
              v214 = &v258[2 * v199];
              v214[4] = v210;
              if ((int)v211 <= -32768)
                v215 = -32768;
              else
                v215 = v211;
              if (v215 >= 0x7FFF)
                LOWORD(v215) = 0x7FFF;
              v214[5] = v215;
              if ((int)v213 <= -32768)
                v216 = -32768;
              else
                v216 = v213;
              if (v216 >= 0x7FFF)
                LOWORD(v216) = 0x7FFF;
              v217 = (uint64_t)rintf(v212 * 2048.0);
              v214[6] = v216;
              if ((int)v217 <= -32768)
                v218 = -32768;
              else
                v218 = v217;
              if (v218 >= 0x7FFF)
                LOWORD(v218) = 0x7FFF;
              v214[7] = v218;
            }
          }
          goto LABEL_251;
        }
      }
LABEL_257:
      v200 = v262;
      memcpy(&v196[4 * v194], &__src, 4 * v262);
LABEL_251:
      ++v195;
      v194 = v199 + v200;
      if (v232 == v195)
        goto LABEL_302;
    }
    v197 = (int)(v23 * *(double *)v129.i64) - (v23 * *(double *)v129.i64 < (double)(int)(v23 * *(double *)v129.i64));
    v198 = (double)((int)v195 + 1) - (double)(v197 + 1) * a10;
    v129.i32[0] = 0;
    if (v198 > 0.0)
      v129.f32[0] = v198
                  - (float)(int)((__PAIR64__((int)v198, LODWORD(v198)) - COERCE_UNSIGNED_INT((float)(int)v198)) >> 32);
    *(_DWORD *)&v253[4 * v195] = v197;
LABEL_256:
    __src.f32[0] = 1.0 - v129.f32[0];
    __src.i32[1] = v129.i32[0];
    v199 = v194;
    if (!v260)
      goto LABEL_260;
    goto LABEL_257;
  }
LABEL_302:
  if (v260)
    v219 = &v241[4 * v230];
  else
    v219 = &v241[2 * v230];
  v231((int)&v275, (int)v264, (int)v290, (int)v241, (int)v253, (int)v219, v242, v255, v262);
  if (v288 != v290 && v288)
LABEL_307:
    operator delete[]();
LABEL_308:
  if (v270)
  {
    v220 = (unsigned int *)(v270 + 20);
    do
    {
      v221 = __ldaxr(v220);
      v222 = v221 - 1;
    }
    while (__stlxr(v222, v220));
    if (!v222)
      sub_100256C90((uint64_t)v264);
  }
  v270 = 0;
  v268 = 0u;
  v269 = 0u;
  if (v265 >= 1)
  {
    v223 = 0;
    v224 = v271;
    do
      v224[v223++] = 0;
    while (v223 < v265);
  }
  if (v272 != &v273)
    j__free(v272);
  if (v279)
  {
    v225 = (unsigned int *)(v279 + 20);
    do
    {
      v226 = __ldaxr(v225);
      v227 = v226 - 1;
    }
    while (__stlxr(v227, v225));
    if (!v227)
      sub_100256C90((uint64_t)&v275);
  }
  v279 = 0;
  v277 = 0u;
  v278 = 0u;
  if (v276 >= 1)
  {
    v228 = 0;
    v229 = v280;
    do
      *(_DWORD *)(v229 + 4 * v228++) = 0;
    while (v228 < v276);
  }
  if (v281 != &v282)
    j__free(v281);
  if (v284)
    sub_1002989D0(v283);
}

void sub_10031FA4C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_100008C88(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_10031FC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_100323950((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_100324A1C((uint64_t)v24);
}

void sub_10031FDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100324A1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10031FDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_100324B3C((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_100325894((uint64_t)v24);
}

void sub_10031FEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100325894((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10031FEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_1003259B4((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10032692C((uint64_t)v24);
}

void sub_100320028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10032692C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10032003C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_100326A4C((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10032755C((uint64_t)v24);
}

void sub_100320168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10032755C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10032017C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_10032767C((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_100328134((uint64_t)v24);
}

void sub_1003202A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100328134((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003202BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_100328254((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_100328D84((uint64_t)v24);
}

void sub_1003203E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100328D84((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003203FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_100328EA4((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_100329AA0((uint64_t)v24);
}

void sub_100320528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100329AA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10032053C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_100329BC0((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10032A9EC((uint64_t)v24);
}

void sub_100320668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10032A9EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10032067C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_10032AB0C((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10032B538((uint64_t)v24);
}

void sub_1003207A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10032B538((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003207BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_10032B658((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10032BFF0((uint64_t)v24);
}

void sub_1003208E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10032BFF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003208FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_10032C110((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10032CD90((uint64_t)v24);
}

void sub_100320A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10032CD90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100320A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_10032CEB0((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10032DFAC((uint64_t)v24);
}

void sub_100320B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10032DFAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100320B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_10032E0CC((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10032F518((uint64_t)v24);
}

void sub_100320CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10032F518((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100320CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_10032F638((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_1003306AC((uint64_t)v24);
}

void sub_100320DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1003306AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100320DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE v24[264];
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_1003307CC((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    v17 = 1;
    v18 = v13 & 0xFFFFFFFE;
    v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v14 = v19 * v17;
    v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_1003317CC((uint64_t)v24);
}

void sub_100320F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1003317CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100320F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _BYTE v19[224];
  _DWORD v20[2];

  v7 = *(_DWORD *)(a2 + 8);
  v20[0] = 0;
  v20[1] = v7;
  sub_1003318EC((uint64_t)v19, a1, a2, a5, a6, a3, a4);
  v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    v10 = *(_QWORD *)(a2 + 64);
    v11 = (int *)(v10 + 4);
    v12 = 1;
    v13 = v8 & 0xFFFFFFFE;
    v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    v9 = v14 * v12;
    v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    v9 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v20, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return sub_100332410((uint64_t)v19);
}

void sub_100321020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100332410((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100321034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _BYTE v19[224];
  _DWORD v20[2];

  v7 = *(_DWORD *)(a2 + 8);
  v20[0] = 0;
  v20[1] = v7;
  sub_100332530((uint64_t)v19, a1, a2, a5, a6, a3, a4);
  v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    v10 = *(_QWORD *)(a2 + 64);
    v11 = (int *)(v10 + 4);
    v12 = 1;
    v13 = v8 & 0xFFFFFFFE;
    v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    v9 = v14 * v12;
    v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    v9 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v20, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return sub_100332F8C((uint64_t)v19);
}

void sub_100321118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100332F8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10032112C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _BYTE v19[224];
  _DWORD v20[2];

  v7 = *(_DWORD *)(a2 + 8);
  v20[0] = 0;
  v20[1] = v7;
  sub_1003330AC((uint64_t)v19, a1, a2, a5, a6, a3, a4);
  v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    v10 = *(_QWORD *)(a2 + 64);
    v11 = (int *)(v10 + 4);
    v12 = 1;
    v13 = v8 & 0xFFFFFFFE;
    v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    v9 = v14 * v12;
    v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    v9 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v20, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return sub_100333B1C((uint64_t)v19);
}

void sub_100321210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100333B1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100321224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _BYTE v19[224];
  _DWORD v20[2];

  v7 = *(_DWORD *)(a2 + 8);
  v20[0] = 0;
  v20[1] = v7;
  sub_100333C3C((uint64_t)v19, a1, a2, a5, a6, a3, a4);
  v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    v10 = *(_QWORD *)(a2 + 64);
    v11 = (int *)(v10 + 4);
    v12 = 1;
    v13 = v8 & 0xFFFFFFFE;
    v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    v9 = v14 * v12;
    v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    v9 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v20, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return sub_1003341E0((uint64_t)v19);
}

void sub_100321308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1003341E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10032131C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _BYTE v19[224];
  _DWORD v20[2];

  v7 = *(_DWORD *)(a2 + 8);
  v20[0] = 0;
  v20[1] = v7;
  sub_100334300((uint64_t)v19, a1, a2, a5, a6, a3, a4);
  v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    v10 = *(_QWORD *)(a2 + 64);
    v11 = (int *)(v10 + 4);
    v12 = 1;
    v13 = v8 & 0xFFFFFFFE;
    v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    v9 = v14 * v12;
    v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    v9 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_10026F638(v20, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return sub_1003347F0((uint64_t)v19);
}

void sub_100321400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1003347F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100321414(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _QWORD v19[5];
  int v20;
  int v21;
  uint64_t v22;
  _DWORD v23[2];

  v7 = *(unsigned int *)(a2 + 4);
  v8 = *(_DWORD *)(a2 + 8);
  v23[0] = 0;
  v23[1] = v8;
  v19[0] = &off_100453D38;
  v19[1] = a1;
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a5;
  v20 = a4;
  v21 = a6;
  v22 = a7;
  if ((int)v7 >= 3)
  {
    v10 = *(_QWORD *)(a2 + 64);
    v11 = (int *)(v10 + 4);
    v12 = 1;
    v13 = v7 & 0xFFFFFFFE;
    v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    v9 = v14 * v12;
    v15 = v7 - (v7 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v7) & 0x3FFFFFFF8));
      do
      {
        v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    v9 = *(int *)(a2 + 12) * (uint64_t)v8;
  }
  sub_10026F638(v23, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return nullsub_1(v19);
}

void sub_1003214EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_1(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100321500(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _QWORD v19[5];
  int v20;
  int v21;
  uint64_t v22;
  _DWORD v23[2];

  v7 = *(unsigned int *)(a2 + 4);
  v8 = *(_DWORD *)(a2 + 8);
  v23[0] = 0;
  v23[1] = v8;
  v19[0] = &off_100453D78;
  v19[1] = a1;
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a5;
  v20 = a4;
  v21 = a6;
  v22 = a7;
  if ((int)v7 >= 3)
  {
    v10 = *(_QWORD *)(a2 + 64);
    v11 = (int *)(v10 + 4);
    v12 = 1;
    v13 = v7 & 0xFFFFFFFE;
    v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    v9 = v14 * v12;
    v15 = v7 - (v7 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v7) & 0x3FFFFFFF8));
      do
      {
        v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    v9 = *(int *)(a2 + 12) * (uint64_t)v8;
  }
  sub_10026F638(v23, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return nullsub_1(v19);
}

void sub_1003215D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_1(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003215EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _QWORD v19[5];
  int v20;
  int v21;
  uint64_t v22;
  _DWORD v23[2];

  v7 = *(unsigned int *)(a2 + 4);
  v8 = *(_DWORD *)(a2 + 8);
  v23[0] = 0;
  v23[1] = v8;
  v19[0] = &off_100453DB8;
  v19[1] = a1;
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a5;
  v20 = a4;
  v21 = a6;
  v22 = a7;
  if ((int)v7 >= 3)
  {
    v10 = *(_QWORD *)(a2 + 64);
    v11 = (int *)(v10 + 4);
    v12 = 1;
    v13 = v7 & 0xFFFFFFFE;
    v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    v9 = v14 * v12;
    v15 = v7 - (v7 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v7) & 0x3FFFFFFF8));
      do
      {
        v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    v9 = *(int *)(a2 + 12) * (uint64_t)v8;
  }
  sub_10026F638(v23, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return nullsub_1(v19);
}

void sub_1003216C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_1(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003216D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _QWORD v19[5];
  int v20;
  int v21;
  uint64_t v22;
  _DWORD v23[2];

  v7 = *(unsigned int *)(a2 + 4);
  v8 = *(_DWORD *)(a2 + 8);
  v23[0] = 0;
  v23[1] = v8;
  v19[0] = &off_100453DF8;
  v19[1] = a1;
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a5;
  v20 = a4;
  v21 = a6;
  v22 = a7;
  if ((int)v7 >= 3)
  {
    v10 = *(_QWORD *)(a2 + 64);
    v11 = (int *)(v10 + 4);
    v12 = 1;
    v13 = v7 & 0xFFFFFFFE;
    v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    v9 = v14 * v12;
    v15 = v7 - (v7 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v7) & 0x3FFFFFFF8));
      do
      {
        v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    v9 = *(int *)(a2 + 12) * (uint64_t)v8;
  }
  sub_10026F638(v23, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return nullsub_1(v19);
}

void sub_1003217B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_1(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003217C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _QWORD v19[5];
  int v20;
  int v21;
  uint64_t v22;
  _DWORD v23[2];

  v7 = *(unsigned int *)(a2 + 4);
  v8 = *(_DWORD *)(a2 + 8);
  v23[0] = 0;
  v23[1] = v8;
  v19[0] = &off_100453E38;
  v19[1] = a1;
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a5;
  v20 = a4;
  v21 = a6;
  v22 = a7;
  if ((int)v7 >= 3)
  {
    v10 = *(_QWORD *)(a2 + 64);
    v11 = (int *)(v10 + 4);
    v12 = 1;
    v13 = v7 & 0xFFFFFFFE;
    v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    v9 = v14 * v12;
    v15 = v7 - (v7 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v7) & 0x3FFFFFFF8));
      do
      {
        v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    v9 = *(int *)(a2 + 12) * (uint64_t)v8;
  }
  sub_10026F638(v23, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return nullsub_1(v19);
}

void sub_10032189C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_1(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_1003218B0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, int a11)
{
  void *v18;
  void *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t result;
  int v26;
  void *v27;
  _DWORD v30[2];
  uint64_t v31[3];
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _DWORD v54[258];

  switch(a11)
  {
    case 1:
      v18 = sub_100336E58;
      v19 = sub_100336BDC;
      break;
    case 2:
      v18 = sub_100337430;
      v19 = sub_100337118;
      break;
    case 3:
      v18 = sub_100337B60;
      v19 = sub_1003376F0;
      break;
    case 4:
      v18 = sub_100338044;
      v19 = sub_100337E20;
      break;
    default:
      v18 = sub_1003386F4;
      v19 = sub_100338304;
      break;
  }
  if (a3 > 2)
    v18 = v19;
  v27 = v18;
  v52 = 0x3FF0000000000000;
  *(double *)v31 = a9;
  sub_10028A5A4(&v52, v31, &v49);
  v50 = a3;
  LODWORD(v51) = 0;
  HIDWORD(v51) = a7;
  v52 = 0x3FF0000000000000;
  *(double *)v31 = a10;
  sub_10028A5A4(&v52, v31, &v46);
  v47 = a4;
  LODWORD(v48) = 0;
  HIDWORD(v48) = a8;
  v52 = (unint64_t)v54;
  v53 = 4 * (a8 + (uint64_t)a7) + 4 * a7 + 4 * a8;
  if (v53 >= 0x409)
    operator new[]();
  v26 = a3;
  if (a7 >= 1)
  {
    v20 = 0;
    v21 = v54;
    do
    {
      sub_1003389B4((uint64_t)&v49, v20++, v21, &v21[a7 + a8]);
      ++v21;
    }
    while (a7 != v20);
  }
  v22 = v51;
  if (a8 >= 1)
  {
    v23 = 0;
    v24 = &v54[a7];
    do
    {
      sub_1003389B4((uint64_t)&v46, v23++, v24, &v24[a8 + a7]);
      ++v24;
    }
    while (a8 != v23);
  }
  v31[0] = (uint64_t)&off_100453E78;
  v31[1] = a1;
  v31[2] = a2;
  v32 = v26;
  v33 = a4;
  v34 = a5;
  v35 = a6;
  v36 = a7;
  v37 = a8;
  v38 = a11;
  v39 = v54;
  v40 = &v54[a7];
  v41 = &v40[a8];
  v42 = &v41[a7];
  v43 = v22;
  v44 = v48;
  v45 = v27;
  v30[0] = 0;
  v30[1] = a8;
  sub_10026F638(v30, (uint64_t)v31, (double)(a8 * a7) * 0.0000152587891);
  nullsub_1(v31);
  result = v52;
  if ((_DWORD *)v52 != v54)
  {
    if (v52)
      operator delete[]();
  }
  return result;
}

void sub_100321BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  nullsub_1(&a19);
  if (a40 != a17 && a40 != 0)
    operator delete[]();
  _Unwind_Resume(a1);
}

unint64_t sub_100321C08(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, int a11)
{
  void *v15;
  void *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int *v25;
  unint64_t result;
  uint64_t v27;
  void *v28;
  _DWORD v34[2];
  uint64_t v35[3];
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _DWORD v58[258];

  switch(a11)
  {
    case 1:
      v15 = sub_100339900;
      v16 = sub_1003397C4;
      break;
    case 2:
      v15 = sub_100339DB0;
      v16 = sub_100339C10;
      break;
    case 3:
      v15 = sub_10033A36C;
      v16 = sub_10033A0C0;
      break;
    case 4:
      v15 = sub_10033A82C;
      v16 = sub_10033A67C;
      break;
    default:
      v15 = sub_10033AFB0;
      v16 = sub_10033AB3C;
      break;
  }
  if (a3 > 2)
    v15 = v16;
  v28 = v15;
  v56 = 0x3FF0000000000000;
  *(double *)v35 = a9;
  sub_10028A5A4(&v56, v35, &v53);
  v54 = a3;
  LODWORD(v55) = 0;
  HIDWORD(v55) = a7;
  v56 = 0x3FF0000000000000;
  *(double *)v35 = a10;
  sub_10028A5A4(&v56, v35, &v50);
  v51 = a4;
  LODWORD(v52) = 0;
  HIDWORD(v52) = a8;
  v56 = (unint64_t)v58;
  v57 = 4 * (a8 + (uint64_t)a7 + 2 * a7 + 2 * a8);
  if (v57 >= 0x409)
    operator new[]();
  v27 = a6;
  v17 = &v58[a7];
  v18 = &v17[a8];
  if (a7 >= 1)
  {
    v19 = 0;
    v20 = &v17[a8];
    v21 = v58;
    do
    {
      sub_10033B2C0((uint64_t)&v53, v19++, v21++, v20);
      v20 += 2;
    }
    while (a7 != v19);
  }
  v22 = v55;
  if (a8 >= 1)
  {
    v23 = 0;
    v24 = &v18[2 * a7];
    v25 = &v58[a7];
    do
    {
      sub_10033B2C0((uint64_t)&v50, v23++, v25++, v24);
      v24 += 2;
    }
    while (a8 != v23);
  }
  v35[0] = (uint64_t)&off_100453EB8;
  v35[1] = a1;
  v35[2] = a2;
  v36 = a3;
  v37 = a4;
  v38 = a5;
  v39 = v27;
  v40 = a7;
  v41 = a8;
  v42 = a11;
  v43 = v58;
  v44 = &v58[a7];
  v45 = &v17[a8];
  v46 = &v18[2 * a7];
  v47 = v22;
  v48 = v52;
  v49 = v28;
  v34[0] = 0;
  v34[1] = a8;
  sub_10026F638(v34, (uint64_t)v35, (double)(a8 * a7) * 0.0000152587891);
  nullsub_1(v35);
  result = v56;
  if ((_DWORD *)v56 != v58)
  {
    if (v56)
      operator delete[]();
  }
  return result;
}

void sub_100321F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  nullsub_1(&a19);
  if (a40 != a16 && a40 != 0)
    operator delete[]();
  _Unwind_Resume(a1);
}

unint64_t sub_100321F68(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, int a11)
{
  void *v15;
  void *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int *v25;
  unint64_t result;
  uint64_t v27;
  void *v28;
  _DWORD v34[2];
  uint64_t v35[3];
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _DWORD v58[258];

  switch(a11)
  {
    case 1:
      v15 = sub_10033C0B4;
      v16 = sub_10033BE7C;
      break;
    case 2:
      v15 = sub_10033C50C;
      v16 = sub_10033C36C;
      break;
    case 3:
      v15 = sub_10033CA70;
      v16 = sub_10033C7C4;
      break;
    case 4:
      v15 = sub_10033CED0;
      v16 = sub_10033CD28;
      break;
    default:
      v15 = sub_10033D694;
      v16 = sub_10033D188;
      break;
  }
  if (a3 > 2)
    v15 = v16;
  v28 = v15;
  v56 = 0x3FF0000000000000;
  *(double *)v35 = a9;
  sub_10028A5A4(&v56, v35, &v53);
  v54 = a3;
  LODWORD(v55) = 0;
  HIDWORD(v55) = a7;
  v56 = 0x3FF0000000000000;
  *(double *)v35 = a10;
  sub_10028A5A4(&v56, v35, &v50);
  v51 = a4;
  LODWORD(v52) = 0;
  HIDWORD(v52) = a8;
  v56 = (unint64_t)v58;
  v57 = 4 * (a8 + (uint64_t)a7 + 2 * a7 + 2 * a8);
  if (v57 >= 0x409)
    operator new[]();
  v27 = a6;
  v17 = &v58[a7];
  v18 = &v17[a8];
  if (a7 >= 1)
  {
    v19 = 0;
    v20 = &v17[a8];
    v21 = v58;
    do
    {
      sub_10033D94C((uint64_t)&v53, v19++, v21++, v20);
      v20 += 2;
    }
    while (a7 != v19);
  }
  v22 = v55;
  if (a8 >= 1)
  {
    v23 = 0;
    v24 = &v18[2 * a7];
    v25 = &v58[a7];
    do
    {
      sub_10033D94C((uint64_t)&v50, v23++, v25++, v24);
      v24 += 2;
    }
    while (a8 != v23);
  }
  v35[0] = (uint64_t)&off_100453EF8;
  v35[1] = a1;
  v35[2] = a2;
  v36 = a3;
  v37 = a4;
  v38 = a5;
  v39 = v27;
  v40 = a7;
  v41 = a8;
  v42 = a11;
  v43 = v58;
  v44 = &v58[a7];
  v45 = &v17[a8];
  v46 = &v18[2 * a7];
  v47 = v22;
  v48 = v52;
  v49 = v28;
  v34[0] = 0;
  v34[1] = a8;
  sub_10026F638(v34, (uint64_t)v35, (double)(a8 * a7) * 0.0000152587891);
  nullsub_1(v35);
  result = v56;
  if ((_DWORD *)v56 != v58)
  {
    if (v56)
      operator delete[]();
  }
  return result;
}

void sub_100322274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  nullsub_1(&a19);
  if (a40 != a16 && a40 != 0)
    operator delete[]();
  _Unwind_Resume(a1);
}

unint64_t sub_1003222C8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, int a11)
{
  void *v15;
  void *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int *v25;
  unint64_t result;
  uint64_t v27;
  void *v28;
  _DWORD v34[2];
  uint64_t v35[3];
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _DWORD v58[258];

  switch(a11)
  {
    case 1:
      v15 = sub_10033E35C;
      v16 = sub_10033E220;
      break;
    case 2:
      v15 = sub_10033E7B4;
      v16 = sub_10033E614;
      break;
    case 3:
      v15 = sub_10033ED18;
      v16 = sub_10033EA6C;
      break;
    case 4:
      v15 = sub_10033F178;
      v16 = sub_10033EFD0;
      break;
    default:
      v15 = sub_10033F93C;
      v16 = sub_10033F430;
      break;
  }
  if (a3 > 2)
    v15 = v16;
  v28 = v15;
  v56 = 0x3FF0000000000000;
  *(double *)v35 = a9;
  sub_10028A5A4(&v56, v35, &v53);
  v54 = a3;
  LODWORD(v55) = 0;
  HIDWORD(v55) = a7;
  v56 = 0x3FF0000000000000;
  *(double *)v35 = a10;
  sub_10028A5A4(&v56, v35, &v50);
  v51 = a4;
  LODWORD(v52) = 0;
  HIDWORD(v52) = a8;
  v56 = (unint64_t)v58;
  v57 = 4 * (a8 + (uint64_t)a7 + 2 * a7 + 2 * a8);
  if (v57 >= 0x409)
    operator new[]();
  v27 = a6;
  v17 = &v58[a7];
  v18 = &v17[a8];
  if (a7 >= 1)
  {
    v19 = 0;
    v20 = &v17[a8];
    v21 = v58;
    do
    {
      sub_10033B2C0((uint64_t)&v53, v19++, v21++, v20);
      v20 += 2;
    }
    while (a7 != v19);
  }
  v22 = v55;
  if (a8 >= 1)
  {
    v23 = 0;
    v24 = &v18[2 * a7];
    v25 = &v58[a7];
    do
    {
      sub_10033B2C0((uint64_t)&v50, v23++, v25++, v24);
      v24 += 2;
    }
    while (a8 != v23);
  }
  v35[0] = (uint64_t)&off_100453F38;
  v35[1] = a1;
  v35[2] = a2;
  v36 = a3;
  v37 = a4;
  v38 = a5;
  v39 = v27;
  v40 = a7;
  v41 = a8;
  v42 = a11;
  v43 = v58;
  v44 = &v58[a7];
  v45 = &v17[a8];
  v46 = &v18[2 * a7];
  v47 = v22;
  v48 = v52;
  v49 = v28;
  v34[0] = 0;
  v34[1] = a8;
  sub_10026F638(v34, (uint64_t)v35, (double)(a8 * a7) * 0.0000152587891);
  nullsub_1(v35);
  result = v56;
  if ((_DWORD *)v56 != v58)
  {
    if (v56)
      operator delete[]();
  }
  return result;
}

void sub_1003225D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  nullsub_1(&a19);
  if (a40 != a16 && a40 != 0)
    operator delete[]();
  _Unwind_Resume(a1);
}

unint64_t sub_100322628(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, int a11)
{
  void *v16;
  void *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int *v26;
  unint64_t result;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _DWORD v35[2];
  uint64_t v36[3];
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _DWORD v59[258];

  switch(a11)
  {
    case 1:
      v16 = sub_1003404D0;
      v17 = sub_100340398;
      break;
    case 2:
      v16 = sub_100340A3C;
      v17 = sub_1003408C4;
      break;
    case 3:
      v16 = sub_100341030;
      v17 = sub_100340E30;
      break;
    case 4:
      v16 = sub_1003415D4;
      v17 = sub_100341424;
      break;
    default:
      v16 = sub_100341DAC;
      v17 = sub_1003419C8;
      break;
  }
  if (a3 > 2)
    v16 = v17;
  v30 = v16;
  v57 = 0x3FF0000000000000;
  *(double *)v36 = a9;
  sub_10028A5A4(&v57, v36, &v54);
  v55 = a3;
  LODWORD(v56) = 0;
  HIDWORD(v56) = a7;
  v57 = 0x3FF0000000000000;
  *(double *)v36 = a10;
  sub_10028A5A4(&v57, v36, &v51);
  v52 = a4;
  LODWORD(v53) = 0;
  HIDWORD(v53) = a8;
  v57 = (unint64_t)v59;
  v58 = 4 * (a8 + (uint64_t)a7) + 16 * a7 + 16 * a8;
  if (v58 >= 0x409)
    operator new[]();
  v28 = a5;
  v29 = a6;
  v18 = &v59[a7];
  v19 = &v18[a8];
  if (a7 >= 1)
  {
    v20 = 0;
    v21 = &v18[a8];
    v22 = v59;
    do
    {
      sub_1003421A0((uint64_t)&v54, v20++, v22++, v21);
      v21 += 2;
    }
    while (a7 != v20);
  }
  v23 = v56;
  if (a8 >= 1)
  {
    v24 = 0;
    v25 = &v19[4 * a7];
    v26 = &v59[a7];
    do
    {
      sub_1003421A0((uint64_t)&v51, v24++, v26++, v25);
      v25 += 2;
    }
    while (a8 != v24);
  }
  v36[0] = (uint64_t)&off_100453F78;
  v36[1] = a1;
  v36[2] = a2;
  v37 = a3;
  v38 = a4;
  v39 = v28;
  v40 = v29;
  v41 = a7;
  v42 = a8;
  v43 = a11;
  v44 = v59;
  v45 = &v59[a7];
  v46 = &v18[a8];
  v47 = &v19[4 * a7];
  v48 = v23;
  v49 = v53;
  v50 = v30;
  v35[0] = 0;
  v35[1] = a8;
  sub_10026F638(v35, (uint64_t)v36, (double)(a8 * a7) * 0.0000152587891);
  nullsub_1(v36);
  result = v57;
  if ((_DWORD *)v57 != v59)
  {
    if (v57)
      operator delete[]();
  }
  return result;
}

void sub_100322930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  nullsub_1(&a19);
  if (a40 != a16 && a40 != 0)
    operator delete[]();
  _Unwind_Resume(a1);
}

uint64_t sub_100322984(int a1, int a2, unsigned int a3, uint64_t a4, double a5)
{
  int32x4_t v5;
  int v7;
  uint64_t result;
  double v9;
  int v10;
  int32x4_t v11;
  double v12;
  int32x4_t v13;
  int32x4_t v14;
  double v15;
  double v16;
  double v17;
  int v18;
  int v19;
  int v20;
  signed int v21;
  double v22;
  double v23;
  uint64_t v24;
  float v25;
  double v26;
  int v27;
  uint64_t v28;
  signed int v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float *v35;
  uint64_t v36;
  float *v37;
  float *v38;
  _DWORD *v39;
  int v40;
  int v41;
  uint64_t v42;
  float v43;
  float32x4x3_t v44;

  if (a2 >= 1)
  {
    v7 = 0;
    result = 0;
    v9 = (double)a1;
    v10 = a1 - 1;
    v11 = vdupq_n_s32(a3);
    v12 = 0.0;
    v13.i64[0] = 0x400000004;
    v13.i64[1] = 0x400000004;
    v14.i64[0] = 0x800000008;
    v14.i64[1] = 0x800000008;
    while (1)
    {
      v15 = v12 * a5;
      v16 = v12 * a5 + a5;
      v17 = v9 - v12 * a5;
      v18 = (int)(v12 * a5);
      if (v17 >= a5)
        v17 = a5;
      if (v15 <= (double)v18)
        v19 = (int)(v12 * a5);
      else
        v19 = v18 + 1;
      v20 = (int)v16 - (v16 < (double)(int)v16);
      if (v10 < v20)
        v20 = v10;
      v21 = v20 >= v19 ? v19 : v20;
      v22 = (double)v21 - v15;
      if (v22 > 0.001)
      {
        v24 = a4 + 12 * (int)result;
        *(_DWORD *)v24 = (v21 - 1) * a3;
        *(_DWORD *)(v24 + 4) = v7 * a3;
        v25 = v22 / v17;
        result = (result + 1);
        *(float *)(v24 + 8) = v25;
        if (v20 <= v19)
        {
LABEL_16:
          v23 = v16 - (double)v20;
          if (v23 > 0.001)
            goto LABEL_27;
          goto LABEL_3;
        }
      }
      else if (v20 <= v19)
      {
        goto LABEL_16;
      }
      v26 = 1.0 / v17;
      *(float *)&v26 = 1.0 / v17;
      v27 = result;
      v28 = (v20 + ~v21);
      if (v28 < 7)
        break;
      v30 = v28 + 1;
      v31 = (v28 + 1) & 0x1FFFFFFF8;
      result = v31 + (int)result;
      v29 = v21 + v31;
      v32 = vaddq_s32(vdupq_n_s32(v21), (int32x4_t)xmmword_1003BCB00);
      v5.i32[0] = v7 * a3;
      v33 = vdupq_lane_s32(*(int32x2_t *)v5.i8, 0);
      v34 = vdupq_lane_s32(*(int32x2_t *)&v26, 0);
      v35 = (float *)(a4 + 12 * v27);
      v36 = v31;
      do
      {
        v5 = vmulq_s32(v32, v11);
        v37 = v35 + 24;
        vst3q_f32(v35, *(float32x4x3_t *)v5.i8);
        v38 = v35 + 12;
        v44.val[0] = (float32x4_t)vmulq_s32(vaddq_s32(v32, v13), v11);
        v44.val[1] = (float32x4_t)v33;
        v44.val[2] = (float32x4_t)v34;
        vst3q_f32(v38, v44);
        v32 = vaddq_s32(v32, v14);
        v35 = v37;
        v36 -= 8;
      }
      while (v36);
      if (v30 != v31)
        goto LABEL_24;
LABEL_26:
      v23 = v16 - (double)v20;
      if (v23 > 0.001)
      {
LABEL_27:
        v42 = a4 + 12 * (int)result;
        *(_DWORD *)v42 = v20 * a3;
        *(_DWORD *)(v42 + 4) = v7 * a3;
        if (v23 > 1.0)
          v23 = 1.0;
        if (v17 < v23)
          v23 = v17;
        v43 = v23 / v17;
        result = (result + 1);
        *(float *)(v42 + 8) = v43;
      }
LABEL_3:
      v12 = v12 + 1.0;
      if (++v7 == a2)
        return result;
    }
    result = (int)result;
    v29 = v21;
LABEL_24:
    v39 = (_DWORD *)(a4 + 8 + 12 * result);
    v40 = v20 - v29;
    v41 = a3 * v29;
    do
    {
      *(v39 - 2) = v41;
      *(v39 - 1) = v7 * a3;
      ++result;
      *v39 = LODWORD(v26);
      v39 += 3;
      v41 += a3;
      --v40;
    }
    while (v40);
    goto LABEL_26;
  }
  return 0;
}

float32x4_t sub_100322B80(float32x4_t *a1, float32x4_t a2)
{
  float32x4_t result;
  float32x4_t v4;
  __double2 v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  int32x2_t v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  int32x2_t v22;
  float32x4_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float32x4_t v28;

  if (a2.f32[0] >= 0.00000011921)
  {
    a2.f32[0] = a2.f32[0] + 3.0;
    v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2.f32, 0);
    a2.f32[1] = a2.f32[0] + -1.0;
    *(float32x2_t *)&a2.u32[2] = vadd_f32(*(float32x2_t *)v28.f32, (float32x2_t)0xC0400000C0000000);
    v4 = vnegq_f32(a2);
    v27 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
    __asm { FMOV            V2.2D, #0.25 }
    v24 = vmulq_f64(vmulq_f64(vcvt_hight_f64_f32(v4), v27), _Q2);
    v25 = vmulq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v4.f32), v27), _Q2);
    v26 = _Q2;
    v10 = __sincos_stret(v25.f64[0]);
    v11.f64[0] = v10.__cosval + v10.__sinval * 0.0;
    v12 = vmulq_n_f64((float64x2_t)xmmword_1003C31E0, v10.__cosval);
    v13.f64[0] = v10.__sinval + v12.f64[0];
    v13.f64[1] = v10.__cosval * -0.707106781 + v10.__sinval * -0.707106781;
    v11.f64[1] = v10.__cosval * -0.707106781 + v10.__sinval * 0.707106781;
    v14 = vdivq_f64(v11, vmulq_f64(v24, v24));
    v15 = (int32x2_t)vcvt_f32_f64(vdivq_f64(v13, vmulq_f64(v25, v25)));
    *(float *)v11.f64 = *(float *)v15.i32 + 0.0;
    v16 = *(float *)&v15.i32[1];
    v17 = vcvt_hight_f32_f64(v15, v14);
    *(float32x2_t *)&v14.f64[0] = vcvt_f32_f64(v14);
    *(float *)v14.f64 = (float)((float)(*(float *)v11.f64 + v16) + *(float *)v14.f64) + *((float *)v14.f64 + 1);
    v18 = vnegq_f32(vaddq_f32(v28, (float32x4_t)xmmword_1003C31F0));
    v19 = vmulq_f64(vmulq_f64(vcvt_hight_f64_f32(v18), v27), v26);
    v20 = vmulq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v18.f32), v27), v26);
    v13.f64[1] = v12.f64[1];
    v13.f64[0] = -v10.__cosval;
    v21 = vdivq_f64(vmlaq_n_f64(v13, (float64x2_t)xmmword_1003C3210, v10.__sinval), vmulq_f64(v19, v19));
    v22 = (int32x2_t)vcvt_f32_f64(vdivq_f64(vmlaq_n_f64(v12, (float64x2_t)xmmword_1003C3200, v10.__sinval), vmulq_f64(v20, v20)));
    *(float *)v14.f64 = *(float *)v14.f64 + *(float *)v22.i32;
    LODWORD(v20.f64[0]) = v22.i32[1];
    v23 = vcvt_hight_f32_f64(v22, v21);
    *(float32x2_t *)&v21.f64[0] = vcvt_f32_f64(v21);
    *(float *)v21.f64 = 1.0
                      / (float)((float)((float)(*(float *)v14.f64 + *(float *)v20.f64) + *(float *)v21.f64)
                              + *((float *)v21.f64 + 1));
    result = vmulq_n_f32(v23, *(float *)v21.f64);
    *a1 = vmulq_n_f32(v17, *(float *)v21.f64);
    a1[1] = result;
  }
  else
  {
    result.i64[0] = 0;
    *a1 = 0u;
    a1[1] = 0u;
    a1->i32[3] = 1065353216;
  }
  return result;
}

void sub_100322D5C(uint64_t a1, uint64_t a2, int *a3, int a4, double a5, double a6)
{
  int v13;
  int v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _QWORD *v30;
  _QWORD *v31;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  char *v42;
  int v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void *v52;
  unint64_t v53[3];
  int32x2_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  void *v61;
  unint64_t v62[3];
  int v63;
  int v64;
  _BYTE v65[8];
  int v66;

  sub_100298C2C(v65, &off_1004537C8);
  sub_10025D920(a1, 0xFFFFFFFF, (uint64_t)&v63);
  if (v63 < 1 || v64 <= 0)
  {
    v55 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v55, 35), "ssize.width > 0 && ssize.height > 0", 35);
    sub_100294B74(-215, (uint64_t *)&v55, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 4044);
  }
  v14 = *a3;
  v13 = a3[1];
  if (v13 * *a3 <= 0 && (a5 <= 0.0 || a6 <= 0.0))
  {
    v55 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v55, 56), "dsize.area() > 0 || (inv_scale_x > 0 && inv_scale_y > 0)", 56);
    sub_100294B74(-215, (uint64_t *)&v55, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 4045);
  }
  v15 = (double)v64;
  if (v13 * v14)
  {
    a5 = (double)v14 / (double)v63;
    a6 = (double)v13 / v15;
  }
  else
  {
    v16 = rint((double)v63 * a5);
    v17 = (uint64_t)rint(v15 * a6);
    *a3 = (uint64_t)v16;
    a3[1] = v17;
    if ((int)(v17 * (uint64_t)v16) <= 0)
    {
      v55 = 0uLL;
      *(_OWORD *)sub_10029430C(&v55, 16) = *(_OWORD *)"dsize.area() > 0";
      sub_100294B74(-215, (uint64_t *)&v55, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 4050);
    }
  }
  if (a4 == 5)
  {
    if (sub_100261250((int *)a1, -1) == 5 || sub_100261250((int *)a1, -1) == 6)
      a4 = 1;
    else
      a4 = 5;
  }
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(_OWORD *)(v18 + 16);
    v55 = *(_OWORD *)v18;
    v56 = v19;
    v57 = *(_OWORD *)(v18 + 32);
    v20 = *(_QWORD *)(v18 + 56);
    v58 = *(_QWORD *)(v18 + 48);
    v59 = v20;
    v60 = (char *)&v55 + 8;
    v61 = v62;
    v62[0] = 0;
    v62[1] = 0;
    if (v20)
    {
      v21 = (unsigned int *)(v20 + 20);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    if (*(int *)(v18 + 4) > 2)
    {
      DWORD1(v55) = 0;
      sub_100256B48((uint64_t)&v55, v18);
    }
    else
    {
      v23 = *(_QWORD **)(v18 + 72);
      v24 = v61;
      *(_QWORD *)v61 = *v23;
      v24[1] = v23[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v55);
  }
  v54 = *(int32x2_t *)a3;
  sub_10026214C(a2, &v54, v55 & 0xFFF, -1, 0, 0);
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v25 = *(_QWORD *)(a2 + 8);
    v26 = *(_OWORD *)(v25 + 16);
    v46 = *(_OWORD *)v25;
    v47 = v26;
    v48 = *(_OWORD *)(v25 + 32);
    v27 = *(_QWORD *)(v25 + 56);
    v49 = *(_QWORD *)(v25 + 48);
    v50 = v27;
    v51 = (char *)&v46 + 8;
    v52 = v53;
    v53[0] = 0;
    v53[1] = 0;
    if (v27)
    {
      v28 = (unsigned int *)(v27 + 20);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
    }
    if (*(int *)(v25 + 4) > 2)
    {
      DWORD1(v46) = 0;
      sub_100256B48((uint64_t)&v46, v25);
    }
    else
    {
      v30 = *(_QWORD **)(v25 + 72);
      v31 = v52;
      *(_QWORD *)v52 = *v30;
      v31[1] = v30[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v46);
  }
  if (*a3 == v63 && a3[1] == v64)
  {
    v43 = 33619968;
    v44 = &v46;
    v45 = 0;
    sub_1002181EC((uint64_t)&v55, (uint64_t)&v43);
  }
  else
  {
    sub_10031E2CC(v55 & 0xFFF, v56, v62[0], SHIDWORD(v55), DWORD2(v55), v47, v53[0], HIDWORD(v46), a5, a6, SDWORD2(v46), a4);
  }
  if (v50)
  {
    v33 = (unsigned int *)(v50 + 20);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      sub_100256C90((uint64_t)&v46);
  }
  v50 = 0;
  v47 = 0u;
  v48 = 0u;
  if (SDWORD1(v46) >= 1)
  {
    v36 = 0;
    v37 = v51;
    do
      *(_DWORD *)&v37[4 * v36++] = 0;
    while (v36 < SDWORD1(v46));
  }
  if (v52 != v53)
    j__free(v52);
  if (v59)
  {
    v38 = (unsigned int *)(v59 + 20);
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
      sub_100256C90((uint64_t)&v55);
  }
  v59 = 0;
  v56 = 0u;
  v57 = 0u;
  if (SDWORD1(v55) >= 1)
  {
    v41 = 0;
    v42 = v60;
    do
      *(_DWORD *)&v42[4 * v41++] = 0;
    while (v41 < SDWORD1(v55));
  }
  if (v61 != v62)
    j__free(v61);
  if (v66)
    sub_1002989D0(v65);
}

void sub_100323278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  sub_10029434C(&a27);
  sub_1001D40CC(v27 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_100323378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, double a6)
{
  __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;

  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a1 = off_1004537F8;
  *(_OWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 20);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v15 = *(_QWORD **)(a2 + 72);
    v16 = *(_QWORD **)(a1 + 80);
    *v16 = *v15;
    v16[1] = v15[1];
  }
  v17 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v19 = *(_QWORD *)(a3 + 48);
  v18 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v19;
  *(_QWORD *)(a1 + 160) = v18;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v17;
  if (v18)
  {
    v20 = (unsigned int *)(v18 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v22 = *(_QWORD **)(a3 + 72);
    v23 = *(_QWORD **)(a1 + 176);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 208) = a5;
  *(double *)(a1 + 216) = a6;
  return a1;
}

void sub_1003234D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100006BE4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1003234F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100323504(uint64_t a1)
{
  sub_100323830(a1);
  operator delete();
}

uint64_t sub_100323528(uint64_t result, int *a2)
{
  int v2;
  BOOL v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  char v39;
  _BYTE *v40;

  v2 = *(_DWORD *)(result + 12);
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v4 < 0 != v3)
  {
    LODWORD(v5) = 0;
    v6 = *a2;
    if ((int)v6 >= a2[1])
      return result;
    goto LABEL_5;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(result + 80) + 8 * v4);
  v6 = *a2;
  if ((int)v6 < a2[1])
  {
LABEL_5:
    v7 = *(int *)(*(_QWORD *)(result + 168) + 4);
    v8 = *(unsigned int *)(*(_QWORD *)(result + 168) + 4);
    v9 = **(_DWORD **)(result + 72) - 1;
    v10 = (int)v5;
    v11 = v5 - 1;
    while (1)
    {
      v12 = *(_QWORD *)(result + 120) + *(_QWORD *)(result + 184) * v6;
      v13 = (int)(*(double *)(result + 216) * (double)(int)v6)
          - (*(double *)(result + 216) * (double)(int)v6 < (double)(int)(*(double *)(result + 216) * (double)(int)v6));
      if (v9 < v13)
        v13 = v9;
      v14 = *(_QWORD *)(result + 24) + **(_QWORD **)(result + 80) * v13;
      switch(v11)
      {
        case 0:
          if ((int)v7 >= 2)
          {
            v15 = 0;
            do
            {
              v38 = (int *)(*(_QWORD *)(result + 200) + 4 * v15);
              v39 = *(_BYTE *)(v14 + *v38);
              LOBYTE(v38) = *(_BYTE *)(v14 + v38[1]);
              v40 = (_BYTE *)(v12 + v15);
              *v40 = v39;
              v40[1] = (_BYTE)v38;
              v15 += 2;
            }
            while (v15 <= v7 - 2);
            v15 = v15;
            if ((int)v15 >= (int)v8)
              goto LABEL_6;
            do
            {
LABEL_47:
              *(_BYTE *)(v12 + v15) = *(_BYTE *)(v14 + *(int *)(*(_QWORD *)(result + 200) + 4 * v15));
              ++v15;
            }
            while (v8 != v15);
            goto LABEL_6;
          }
          v15 = 0;
          if ((int)v8 > 0)
            goto LABEL_47;
LABEL_6:
          if (++v6 >= a2[1])
            return result;
          break;
        case 1:
          if ((int)v8 >= 1)
          {
            v16 = *(int **)(result + 200);
            v17 = v8;
            do
            {
              v18 = *v16++;
              *(_WORD *)v12 = *(_WORD *)(v14 + v18);
              v12 += 2;
              --v17;
            }
            while (v17);
          }
          goto LABEL_6;
        case 2:
          if ((int)v7 >= 1)
          {
            v19 = 0;
            do
            {
              v20 = (_BYTE *)(v14 + *(int *)(*(_QWORD *)(result + 200) + v19));
              *(_BYTE *)v12 = *v20;
              *(_BYTE *)(v12 + 1) = v20[1];
              *(_BYTE *)(v12 + 2) = v20[2];
              v12 += 3;
              v19 += 4;
            }
            while (4 * v8 != v19);
          }
          goto LABEL_6;
        case 3:
          if ((int)v8 >= 1)
          {
            v21 = *(int **)(result + 200);
            v22 = v8;
            do
            {
              v23 = *v21++;
              *(_DWORD *)v12 = *(_DWORD *)(v14 + v23);
              v12 += 4;
              --v22;
            }
            while (v22);
          }
          goto LABEL_6;
        case 5:
          if ((int)v7 >= 1)
          {
            v29 = *(int **)(result + 200);
            v30 = v8;
            do
            {
              v31 = *v29++;
              *(_WORD *)v12 = *(_WORD *)(v14 + v31);
              *(_WORD *)(v12 + 2) = *(_WORD *)(v14 + v31 + 2);
              *(_WORD *)(v12 + 4) = *(_WORD *)(v14 + v31 + 4);
              v12 += 6;
              --v30;
            }
            while (v30);
          }
          goto LABEL_6;
        case 7:
          if ((int)v8 >= 1)
          {
            v32 = *(int **)(result + 200);
            v33 = v8;
            do
            {
              v34 = *v32++;
              *(_DWORD *)v12 = *(_DWORD *)(v14 + v34);
              *(_DWORD *)(v12 + 4) = *(_DWORD *)(v14 + v34 + 4);
              v12 += 8;
              --v33;
            }
            while (v33);
          }
          goto LABEL_6;
        case 11:
          if ((int)v8 >= 1)
          {
            v35 = *(int **)(result + 200);
            v36 = v8;
            do
            {
              v37 = *v35++;
              *(_DWORD *)v12 = *(_DWORD *)(v14 + v37);
              *(_DWORD *)(v12 + 4) = *(_DWORD *)(v14 + v37 + 4);
              *(_DWORD *)(v12 + 8) = *(_DWORD *)(v14 + v37 + 8);
              v12 += 12;
              --v36;
            }
            while (v36);
          }
          goto LABEL_6;
        default:
          if ((int)v7 >= 1)
          {
            v24 = 0;
            v25 = *(_QWORD *)(result + 200);
            LODWORD(v26) = *(_DWORD *)(result + 208);
            do
            {
              if ((int)v26 >= 1)
              {
                v27 = 0;
                v28 = v14 + *(int *)(v25 + 4 * v24);
                do
                {
                  *(_DWORD *)(v12 + 4 * v27) = *(_DWORD *)(v28 + 4 * v27);
                  ++v27;
                  v26 = *(int *)(result + 208);
                }
                while (v27 < v26);
              }
              ++v24;
              v12 += v10;
            }
            while (v24 != v8);
          }
          goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t sub_100323830(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_1004537F8;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_100323950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_100453838;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_100323B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_100323B90(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100323BA4(uint64_t a1)
{
  sub_100324A1C(a1);
  operator delete();
}

void sub_100323BC8(uint64_t a1, int *a2, double a3, int16x4_t a4)
{
  unsigned int v5;
  signed int v6;
  uint64_t v7;
  int16x4_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t **v11;
  uint64_t v12;
  int32x4_t *v13;
  int32x4_t *v14;
  int32x4_t **v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  signed int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  __int16 *v30;
  _DWORD v31[265];
  char v32;
  char v33;
  _DWORD __b[16];
  int32x4_t *v35[16];
  uint64_t v36[17];

  v5 = *(_DWORD *)(a1 + 8);
  v6 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v7) = *(_DWORD *)(a1 + 248);
  if ((v7 * v6) >= 0x109)
    operator new[]();
  v8 = 0;
  memset(v36, 0, 128);
  memset(v35, 0, sizeof(v35));
  if ((int)v7 >= 1)
  {
    memset(__b, 255, 4 * v7);
    v9 = 4 * v6;
    if ((_DWORD)v7 == 1)
    {
      v10 = 0;
LABEL_9:
      v14 = (int32x4_t *)&v31[v10 * v6];
      v15 = &v35[v10];
      v16 = v7 - v10;
      do
      {
        *v15++ = v14;
        v14 = (int32x4_t *)((char *)v14 + v9);
        --v16;
      }
      while (v16);
      goto LABEL_11;
    }
    v10 = v7 & 0xFFFFFFFE;
    v11 = &v35[1];
    v12 = v10;
    v13 = (int32x4_t *)v31;
    do
    {
      *(v11 - 1) = v13;
      *v11 = (int32x4_t *)((char *)v13 + v9);
      v13 = (int32x4_t *)((char *)v13 + 8 * v6);
      v11 += 2;
      v12 -= 2;
    }
    while (v12);
    if (v10 != v7)
      goto LABEL_9;
  }
LABEL_11:
  v17 = *a2;
  if ((int)v17 < a2[1])
  {
    v18 = (__int16 *)(*(_QWORD *)(a1 + 224) + 2 * (int)v17 * (int)v7);
    v28 = ((v5 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v7 >= 1)
      {
        v30 = v18;
        v19 = 0;
        LODWORD(v20) = 0;
        v21 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * v17) - (v7 >> 1) + 1;
        v22 = v7;
        do
        {
          v24 = *(_DWORD *)(a1 + 236);
          if ((int)(v21 + v19) >= v24)
            v25 = v24 - 1;
          else
            v25 = v21 + v19;
          if ((int)(v21 + v19) >= 0)
            v26 = v25;
          else
            v26 = 0;
          if ((int)v20 <= (int)v19)
            v20 = v19;
          else
            v20 = v20;
          if ((int)v20 < (int)v7)
          {
            while (v20 > 0xF || v26 != __b[v20])
            {
              if ((uint64_t)++v20 >= (int)v7)
                goto LABEL_15;
            }
            if (v20 > v19)
            {
              memcpy(v35[v19], v35[v20], 4 * v6);
              LODWORD(v7) = *(_DWORD *)(a1 + 248);
            }
          }
LABEL_15:
          if ((int)v19 >= v22)
            v23 = v22;
          else
            v23 = v19;
          if ((_DWORD)v20 == (_DWORD)v7)
            v22 = v23;
          v36[v19] = *(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v26;
          __b[v19++] = v26;
        }
        while ((uint64_t)v19 < (int)v7);
        v27 = *(_DWORD *)(a1 + 240);
        if ((int)v7 <= v22)
        {
          v18 = v30;
          goto LABEL_41;
        }
        sub_100323F6C((uint64_t)&v33, &v36[v22], (uint64_t *)&v35[v22], v7 - v22, *(int **)(a1 + 200), *(_QWORD *)(a1 + 216), *(unsigned int *)(a1 + 232), v27, v28, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
        v18 = v30;
      }
      v27 = *(_DWORD *)(a1 + 240);
LABEL_41:
      sub_100324240(v8, a4, (uint64_t)&v32, v35, *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 184) * v17++, v18, v27);
      v7 = *(int *)(a1 + 248);
      v18 += v7;
    }
    while (v17 < a2[1]);
  }
}

void sub_100323F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

void sub_100323F6C(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int *a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  int *v21;
  __int16 *v22;
  int *v23;
  _DWORD *v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  int *v48;
  __int16 *v49;
  int *v50;
  _DWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;

  if (a4 >= 2)
  {
    if (a11 < 1)
    {
      v11 = (a4 - 1);
      if (a8 >= 1)
      {
        v34 = 0;
        v35 = *a2;
        v36 = *a3;
        do
        {
          v37 = 0;
          v38 = a2[++v34];
          v39 = a3[v34];
          do
          {
            v40 = a5[v37];
            *(_DWORD *)(v36 + v37 * 4) = *(unsigned __int8 *)(v35 + v40) << 11;
            *(_DWORD *)(v39 + v37 * 4) = *(unsigned __int8 *)(v38 + v40) << 11;
            ++v37;
          }
          while (a8 != v37);
          v36 = v39;
          v35 = v38;
        }
        while (v34 != v11);
      }
    }
    else
    {
      v12 = 0;
      v13 = *a2;
      v14 = *a3;
      do
      {
        v15 = 0;
        v16 = v13;
        v17 = v14;
        v13 = a2[++v12];
        v14 = a3[v12];
        v18 = (_DWORD *)(v17 + 4);
        v19 = (_DWORD *)(v14 + 4);
        v20 = 1;
        v21 = a5 + 1;
        v22 = (__int16 *)(a6 + 2);
        do
        {
          v23 = v21;
          v24 = v18;
          v25 = v19;
          v26 = v20;
          v27 = 4 * v15;
          v28 = a5[v15];
          v29 = *(v22 - 1);
          v30 = *v22;
          v31 = v28 + a9;
          v32 = *(unsigned __int8 *)(v16 + v28) * v29 + *(unsigned __int8 *)(v16 + v31) * v30;
          LODWORD(v28) = *(unsigned __int8 *)(v13 + v28) * v29 + *(unsigned __int8 *)(v13 + v31) * v30;
          *(_DWORD *)(v17 + v27) = v32;
          *(_DWORD *)(v14 + v27) = v28;
          ++v15;
          v22 += 2;
          v21 = v23 + 1;
          v18 = v24 + 1;
          v19 = v25 + 1;
          v20 = v26 + 1;
        }
        while (a11 != v15);
        if (a11 < a8)
        {
          do
          {
            v33 = *v23++;
            *v24++ = *(unsigned __int8 *)(v16 + v33) << 11;
            *v25++ = *(unsigned __int8 *)(v13 + v33) << 11;
            ++v26;
          }
          while (v26 < a8);
        }
      }
      while (v12 != a4 - 1);
      LODWORD(v11) = a4 - 1;
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((int)v11 < a4)
  {
    if (a11 < 1)
    {
      if (a8 >= 1)
      {
        v54 = v11;
        do
        {
          v55 = a2[v54];
          v56 = (_DWORD *)a3[v54];
          v57 = a8;
          v58 = a5;
          do
          {
            v59 = *v58++;
            *v56++ = *(unsigned __int8 *)(v55 + v59) << 11;
            --v57;
          }
          while (v57);
          ++v54;
        }
        while ((int)v54 < a4);
      }
    }
    else
    {
      v41 = v11;
      v42 = (__int16 *)(a6 + 2);
      do
      {
        v43 = 0;
        v44 = a2[v41];
        v45 = a3[v41];
        v46 = (_DWORD *)(v45 + 4);
        v47 = 1;
        v48 = a5 + 1;
        v49 = v42;
        do
        {
          v50 = v48;
          v51 = v46;
          v52 = v47;
          *(_DWORD *)(v45 + 4 * v43) = *(v49 - 1) * *(unsigned __int8 *)(v44 + a5[v43])
                                     + *v49 * *(unsigned __int8 *)(v44 + a5[v43] + (uint64_t)a9);
          ++v43;
          v49 += 2;
          ++v48;
          ++v46;
          ++v47;
        }
        while (a11 != v43);
        if (a11 < a8)
        {
          do
          {
            v53 = *v50++;
            *v51++ = *(unsigned __int8 *)(v44 + v53) << 11;
            ++v52;
          }
          while (v52 < a8);
        }
        ++v41;
      }
      while ((int)v41 < a4);
    }
  }
}

void sub_100324240(int16x4_t a1, int16x4_t a2, uint64_t a3, int32x4_t **a4, uint64_t a5, __int16 *a6, int a7)
{
  unsigned int v7;
  unsigned int v8;
  int32x4_t *v9;
  int32x4_t *v10;
  unint64_t v11;
  int v12;
  int32x4_t *v13;
  int16x8_t v14;
  int32x4_t *v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  BOOL v29;
  unint64_t v31;
  uint64_t v32;
  int32x4_t v33;
  char *v34;
  const float *v35;
  const float *v36;
  uint64_t v37;
  int32x4_t v38;
  int32x4_t v39;
  const float *v40;
  const float *v41;
  const float *v42;
  const float *v43;
  const float *v44;
  const float *v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  _BYTE *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  int32x4_t v57;
  int32x4_t v58;
  unint64_t v59;
  int32x4_t *v60;
  uint32x4_t *v61;
  int8x16_t *v62;
  int32x4_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int32x4_t *v69;
  uint32x4_t *v70;
  _QWORD *v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  uint32x4_t v75;
  uint32x4_t v76;
  __int32 *v77;
  __int32 *v78;
  _BYTE *v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int32x4_t v84;
  int32x4_t v85;
  uint32x4_t v86;
  uint32x4_t v87;
  uint32x4_t v88;
  uint32x4_t v89;
  uint32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int8x16x2_t v93;
  float32x4x4_t v94;
  int8x16x4_t v95;
  float32x4x4_t v96;
  int8x16x4_t v97;
  int8x16x4_t v98;
  int8x16x4_t v99;
  float32x4x4_t v100;
  int8x16x4_t v101;
  float32x4x4_t v102;

  v7 = *a6;
  v8 = a6[1];
  v10 = *a4;
  v9 = a4[1];
  if (a7 >= 16)
  {
    v11 = 0;
    a1.i32[0] = *a6;
    a2.i32[0] = a6[1];
    v13 = v10 + 2;
    v14.i64[0] = 0x2000200020002;
    v14.i64[1] = 0x2000200020002;
    v15 = v9 + 2;
    do
    {
      v16 = vsraq_n_s16(vshrq_n_s16(vqdmulhq_lane_s16(vshrn_high_n_s32(vshrn_n_s32(v13[-2], 4uLL), v13[-1], 4uLL), a1, 0), 1uLL), vqdmulhq_lane_s16(vshrn_high_n_s32(vshrn_n_s32(v15[-2], 4uLL), v15[-1], 4uLL), a2, 0), 1uLL);
      v17 = *v13;
      v18 = v13[1];
      v13 += 4;
      v19 = *v15;
      v20 = v15[1];
      v15 += 4;
      *(int8x16_t *)(a5 + v11) = vqmovun_high_s16(vqmovun_s16(vshrq_n_s16(vaddq_s16(v16, v14), 2uLL)), vshrq_n_s16(vaddq_s16(vsraq_n_s16(vshrq_n_s16(vqdmulhq_lane_s16(vshrn_high_n_s32(vshrn_n_s32(v17, 4uLL), v18, 4uLL), a1, 0), 1uLL), vqdmulhq_lane_s16(vshrn_high_n_s32(vshrn_n_s32(v19, 4uLL), v20, 4uLL), a2, 0), 1uLL), v14), 2uLL));
      v11 += 16;
    }
    while (v11 <= (a7 - 16));
    v12 = a7 - 4;
    if ((int)v11 > a7 - 4)
      goto LABEL_25;
  }
  else
  {
    LODWORD(v11) = 0;
    v12 = a7 - 4;
    if (a7 - 4 < 0)
      goto LABEL_25;
  }
  v21 = (int)v11;
  v22 = v12 - (uint64_t)(int)v11;
  if (v22 < 0x3C)
    goto LABEL_23;
  v23 = v22 >> 2;
  v24 = (v22 & 0xFFFFFFFFFFFFFFFCLL) + v21 + a5 + 4;
  v25 = v21;
  v26 = 4 * v21 + 16 * (v22 >> 2) + 16;
  v27 = (unint64_t)v10->u64 + v26;
  v28 = a5 + v21 >= (unint64_t)v9->u64 + v26 || (unint64_t)v9 + 4 * v21 >= v24;
  v29 = !v28;
  if ((unint64_t)v10 + 4 * v21 < v24 && a5 + v21 < v27)
    goto LABEL_23;
  if (v29)
    goto LABEL_23;
  v31 = v23 + 1;
  v32 = (v23 + 1) & 0x7FFFFFFFFFFFFFF0;
  v11 = v21 + 4 * v32;
  v33 = vdupq_n_s32(v8);
  v34 = (char *)(a5 + v21);
  v35 = (const float *)&v10->i32[v25];
  v36 = (const float *)&v9->i32[v25];
  v37 = v32;
  v38 = vdupq_n_s32(v7);
  v39.i64[0] = 0x200000002;
  v39.i64[1] = 0x200000002;
  do
  {
    v40 = v35;
    v99 = (int8x16x4_t)vld4q_f32(v40);
    v40 += 16;
    v41 = v35 + 32;
    v42 = v35 + 48;
    v94 = vld4q_f32(v41);
    v85 = (int32x4_t)v94.val[2];
    v97 = (int8x16x4_t)vld4q_f32(v42);
    v91 = (int32x4_t)v97.val[1];
    v92 = (int32x4_t)v97.val[2];
    v102 = vld4q_f32(v40);
    v43 = v36;
    v100 = vld4q_f32(v43);
    v43 += 16;
    v44 = v36 + 32;
    v45 = v36 + 48;
    v95 = (int8x16x4_t)vld4q_f32(v44);
    v96 = vld4q_f32(v45);
    v97.val[1] = v99.val[1];
    v97.val[2] = v99.val[2];
    v99.val[1] = (int8x16_t)v100.val[1];
    v86 = (uint32x4_t)v100.val[2];
    v87 = (uint32x4_t)v100.val[3];
    v94.val[2] = (float32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v99.val[0], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v100.val[0], 4uLL), v33), 0x10uLL);
    v88 = (uint32x4_t)v95.val[1];
    v89 = (uint32x4_t)v95.val[2];
    v90 = (uint32x4_t)v95.val[3];
    v94.val[0] = (float32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v94.val[0], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v95.val[0], 4uLL), v33), 0x10uLL);
    v101 = (int8x16x4_t)vld4q_f32(v43);
    v95.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)v94.val[2], v39), 2uLL);
    v95.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v97.val[0], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v96.val[0], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v95.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)v94.val[0], v39), 2uLL);
    v95.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v102.val[0], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v101.val[0], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v84 = (int32x4_t)v99.val[3];
    v99.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v97.val[1], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v99.val[1], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v99.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v91, 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v96.val[1], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v99.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v94.val[1], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v88, 4uLL), v33), 0x10uLL), v39), 2uLL);
    v99.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v102.val[1], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v101.val[1], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v101.val[0] = vqtbl4q_s8(v95, (int8x16_t)xmmword_1003BC960);
    v101.val[1] = vqtbl4q_s8(v99, (int8x16_t)xmmword_1003BC960);
    v99.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v97.val[2], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v86, 4uLL), v33), 0x10uLL), v39), 2uLL);
    v99.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v92, 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v96.val[2], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v99.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v85, 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v89, 4uLL), v33), 0x10uLL), v39), 2uLL);
    v99.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v102.val[2], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v101.val[2], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v101.val[2] = vqtbl4q_s8(v99, (int8x16_t)xmmword_1003BC960);
    v97.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v84, 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v87, 4uLL), v33), 0x10uLL), v39), 2uLL);
    v97.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v97.val[3], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v96.val[3], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v97.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v94.val[3], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v90, 4uLL), v33), 0x10uLL), v39), 2uLL);
    v97.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v102.val[3], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v101.val[3], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v101.val[3] = vqtbl4q_s8(v97, (int8x16_t)xmmword_1003BC960);
    vst4q_s8(v34, v101);
    v34 += 64;
    v35 += 64;
    v36 += 64;
    v37 -= 16;
  }
  while (v37);
  v21 = v11;
  if (v31 != v32)
  {
LABEL_23:
    v46 = 4 * v21 + 8;
    v47 = (__int32 *)((char *)v9->i32 + v46);
    v48 = (__int32 *)((char *)v10->i32 + v46);
    v11 = v21;
    do
    {
      v49 = (_BYTE *)(a5 + 3 + v11);
      *(v49 - 3) = ((((*(v48 - 2) >> 4) * v7) >> 16) + (((*(v47 - 2) >> 4) * v8) >> 16) + 2) >> 2;
      *(v49 - 2) = ((((*(v48 - 1) >> 4) * v7) >> 16) + (((*(v47 - 1) >> 4) * v8) >> 16) + 2) >> 2;
      *(v49 - 1) = ((((*v48 >> 4) * v7) >> 16) + (((*v47 >> 4) * v8) >> 16) + 2) >> 2;
      *v49 = ((((v48[1] >> 4) * v7) >> 16) + (((v47[1] >> 4) * v8) >> 16) + 2) >> 2;
      v11 += 4;
      v47 += 4;
      v48 += 4;
    }
    while ((uint64_t)v11 <= v12);
  }
LABEL_25:
  if ((int)v11 >= a7)
    return;
  v50 = (int)v11;
  v51 = a7 - (uint64_t)(int)v11;
  if (v51 < 8)
    goto LABEL_49;
  v52 = a5 + a7;
  v53 = 4 * v50;
  v54 = a5 + v50 >= (unint64_t)v9 + 4 * a7 || (unint64_t)v9 + 4 * v50 >= v52;
  v55 = !v54;
  v56 = (unint64_t)v10 + 4 * v50 >= v52 || a5 + v50 >= (unint64_t)v10 + 4 * a7;
  if (!v56 || v55)
    goto LABEL_49;
  v57 = vdupq_n_s32(v7);
  v58 = vdupq_n_s32(v8);
  if (v51 >= 0x10)
  {
    v59 = v51 & 0xFFFFFFFFFFFFFFF0;
    v60 = (int32x4_t *)((char *)v10 + v53);
    v61 = (uint32x4_t *)&v9->i8[v53];
    v62 = (int8x16_t *)(a5 + v50);
    v63.i64[0] = 0x200000002;
    v63.i64[1] = 0x200000002;
    v64 = v51 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v98.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v60[2], 4uLL), v57), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v61[2], 4uLL), v58), 0x10uLL), v63), 2uLL);
      v98.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v60[1], 4uLL), v57), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v61[1], 4uLL), v58), 0x10uLL), v63), 2uLL);
      v98.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(*v60, 4uLL), v57), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(*v61, 4uLL), v58), 0x10uLL), v63), 2uLL);
      v98.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v60[3], 4uLL), v57), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v61[3], 4uLL), v58), 0x10uLL), v63), 2uLL);
      *v62++ = vqtbl4q_s8(v98, (int8x16_t)xmmword_1003BC960);
      v60 += 4;
      v61 += 4;
      v64 -= 16;
    }
    while (v64);
    if (v51 == v59)
      return;
    if ((v51 & 8) == 0)
    {
      v50 += v59;
LABEL_49:
      v77 = &v10->i32[v50];
      v78 = &v9->i32[v50];
      v79 = (_BYTE *)(a5 + v50);
      v80 = a7 - v50;
      do
      {
        v81 = *v77++;
        v82 = ((v81 >> 4) * v7) >> 16;
        v83 = *v78++;
        *v79++ = (v82 + (((v83 >> 4) * v8) >> 16) + 2) >> 2;
        --v80;
      }
      while (v80);
      return;
    }
  }
  else
  {
    v59 = 0;
  }
  v65 = (v51 & 0xFFFFFFFFFFFFFFF8) + v50;
  v66 = v59 - (v51 & 0xFFFFFFFFFFFFFFF8);
  v67 = v59 + v50;
  v68 = 4 * (v59 + v50);
  v69 = (int32x4_t *)((char *)v10 + v68);
  v70 = (uint32x4_t *)&v9->i8[v68];
  v71 = (_QWORD *)(a5 + v67);
  v72.i64[0] = 0x200000002;
  v72.i64[1] = 0x200000002;
  do
  {
    v74 = *v69;
    v73 = v69[1];
    v69 += 2;
    v75 = *v70;
    v76 = v70[1];
    v70 += 2;
    v93.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v73, 4uLL), v57), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v76, 4uLL), v58), 0x10uLL), v72), 2uLL);
    v93.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v74, 4uLL), v57), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v75, 4uLL), v58), 0x10uLL), v72), 2uLL);
    *v71++ = vqtbl2q_s8(v93, (int8x16_t)xmmword_1003BC970).u64[0];
    v66 += 8;
  }
  while (v66);
  v50 = v65;
  if (v51 != (v51 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_49;
}

uint64_t sub_100324A1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453838;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_100324B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_100453878;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_100324D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_100324D7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100324D90(uint64_t a1)
{
  sub_100325894(a1);
  operator delete();
}

void sub_100324DB4(uint64_t a1, int *a2, double a3, double a4, double a5, double a6, double a7, double a8, __n128 a9, __n128 a10)
{
  unsigned int v11;
  signed int v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t **v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t **v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int32 *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  signed int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned __int32 *v36;
  _DWORD v37[265];
  char v38;
  char v39;
  _DWORD __b[16];
  float32x4_t *v41[16];
  uint64_t v42[17];

  v11 = *(_DWORD *)(a1 + 8);
  v12 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v13) = *(_DWORD *)(a1 + 248);
  if ((v13 * v12) >= 0x109)
    operator new[]();
  v14 = 0.0;
  memset(v42, 0, 128);
  memset(v41, 0, sizeof(v41));
  if ((int)v13 >= 1)
  {
    memset(__b, 255, 4 * v13);
    v15 = 4 * v12;
    if ((_DWORD)v13 == 1)
    {
      v16 = 0;
LABEL_9:
      v20 = (float32x4_t *)&v37[v16 * v12];
      v21 = &v41[v16];
      v22 = v13 - v16;
      do
      {
        *v21++ = v20;
        v20 = (float32x4_t *)((char *)v20 + v15);
        --v22;
      }
      while (v22);
      goto LABEL_11;
    }
    v16 = v13 & 0xFFFFFFFE;
    v17 = &v41[1];
    v18 = v16;
    v19 = (float32x4_t *)v37;
    do
    {
      *(v17 - 1) = v19;
      *v17 = (float32x4_t *)((char *)v19 + v15);
      v19 = (float32x4_t *)((char *)v19 + 8 * v12);
      v17 += 2;
      v18 -= 2;
    }
    while (v18);
    if (v16 != v13)
      goto LABEL_9;
  }
LABEL_11:
  v23 = *a2;
  if ((int)v23 < a2[1])
  {
    v24 = (unsigned __int32 *)(*(_QWORD *)(a1 + 224) + 4 * (int)v23 * (int)v13);
    v34 = ((v11 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v13 >= 1)
      {
        v36 = v24;
        v25 = 0;
        LODWORD(v26) = 0;
        v27 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * v23) - (v13 >> 1) + 1;
        v28 = v13;
        do
        {
          v30 = *(_DWORD *)(a1 + 236);
          if ((int)(v27 + v25) >= v30)
            v31 = v30 - 1;
          else
            v31 = v27 + v25;
          if ((int)(v27 + v25) >= 0)
            v32 = v31;
          else
            v32 = 0;
          if ((int)v26 <= (int)v25)
            v26 = v25;
          else
            v26 = v26;
          if ((int)v26 < (int)v13)
          {
            while (v26 > 0xF || v32 != __b[v26])
            {
              if ((uint64_t)++v26 >= (int)v13)
                goto LABEL_15;
            }
            if (v26 > v25)
            {
              memcpy(v41[v25], v41[v26], 4 * v12);
              LODWORD(v13) = *(_DWORD *)(a1 + 248);
            }
          }
LABEL_15:
          if ((int)v25 >= v28)
            v29 = v28;
          else
            v29 = v25;
          if ((_DWORD)v26 == (_DWORD)v13)
            v28 = v29;
          v42[v25] = *(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v32;
          __b[v25++] = v32;
        }
        while ((uint64_t)v25 < (int)v13);
        v33 = *(unsigned int *)(a1 + 240);
        if ((int)v13 <= v28)
        {
          v24 = v36;
          goto LABEL_41;
        }
        sub_100325158(*(float *)&v14, *(float *)&a4, *(float *)&a5, *(float *)&a6, *(float *)&a7, (uint64_t)&v39, &v42[v28], (uint64_t *)&v41[v28], v13 - v28, *(int **)(a1 + 200), *(_QWORD *)(a1 + 216), *(unsigned int *)(a1 + 232), v33, v34, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
        v24 = v36;
      }
      v33 = *(unsigned int *)(a1 + 240);
LABEL_41:
      sub_100325560(v14, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v38, v41, (uint16x8_t *)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 184) * v23++), v24, v33);
      v13 = *(int *)(a1 + 248);
      v24 += v13;
    }
    while (v23 < a2[1]);
  }
}

void sub_10032511C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

void sub_100325158(float a1, float a2, float a3, float a4, float a5, uint64_t a6, uint64_t *a7, uint64_t *a8, int a9, int *a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, int a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  float *v23;
  float *v24;
  int *v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  float *v31;
  int *v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  int v43;
  int *v44;
  float *v45;
  int *v46;
  float *v47;
  float *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  float **v59;
  uint64_t *v60;
  float *v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  uint64_t v81;
  int *v82;
  float *v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;

  if (a9 >= 2)
  {
    if (a16 < 1)
    {
      v16 = (a9 - 1);
      if (a13 >= 1)
      {
        v64 = 0;
        v65 = *a7;
        v66 = *a8;
        do
        {
          v67 = 0;
          v68 = a7[++v64];
          v69 = a8[v64];
          do
          {
            v70 = 2 * a10[v67];
            LOWORD(a1) = *(_WORD *)(v65 + v70);
            v71 = (float)LODWORD(a1);
            *(float *)(v66 + v67 * 4) = v71;
            LOWORD(v71) = *(_WORD *)(v68 + v70);
            a1 = (float)LODWORD(v71);
            *(float *)(v69 + v67 * 4) = a1;
            ++v67;
          }
          while (a13 != v67);
          v66 = v69;
          v65 = v68;
        }
        while (v64 != v16);
      }
    }
    else
    {
      v35 = 0;
      LODWORD(v16) = a9 - 1;
      v36 = *a7;
      v37 = *a8;
      do
      {
        v38 = 0;
        v39 = v36;
        v40 = v37;
        v36 = a7[++v35];
        v37 = a8[v35];
        v41 = (float *)(v40 + 4);
        v42 = (float *)(v37 + 4);
        v43 = 1;
        v44 = a10 + 1;
        v45 = (float *)(a11 + 4);
        do
        {
          v46 = v44;
          v47 = v41;
          v48 = v42;
          v49 = v43;
          v50 = 4 * v38;
          v51 = a10[v38];
          v52 = *(v45 - 1);
          v53 = 2 * v51;
          LOWORD(a3) = *(_WORD *)(v39 + 2 * v51);
          v54 = 2 * ((int)v51 + a14);
          LOWORD(a4) = *(_WORD *)(v39 + v54);
          LOWORD(a5) = *(_WORD *)(v36 + v53);
          a3 = (float)(*v45 * (float)LODWORD(a4)) + (float)((float)LODWORD(a3) * v52);
          a4 = (float)LODWORD(a5);
          LOWORD(a5) = *(_WORD *)(v36 + v54);
          a5 = (float)LODWORD(a5);
          a2 = *v45 * a5;
          *(float *)(v40 + v50) = a3;
          a1 = a2 + (float)(a4 * v52);
          *(float *)(v37 + v50) = a1;
          ++v38;
          v45 += 2;
          ++v44;
          v41 = v47 + 1;
          v42 = v48 + 1;
          v43 = v49 + 1;
        }
        while (a16 != v38);
        if (a16 < a13)
        {
          do
          {
            v55 = *v46++;
            LOWORD(a1) = *(_WORD *)(v39 + 2 * v55);
            v56 = (float)LODWORD(a1);
            *v47++ = v56;
            LOWORD(v56) = *(_WORD *)(v36 + 2 * v55);
            a1 = (float)LODWORD(v56);
            *v48++ = a1;
            ++v49;
          }
          while (v49 < a13);
        }
      }
      while (v35 != a9 - 1);
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
  if ((int)v16 < a9)
  {
    if (a16 >= 1)
    {
      v16 = v16;
      v17 = (~a16 + a13);
      v18 = (v17 + 1) & 0x1FFFFFFFELL;
      v19 = (float *)(a11 + 4);
      while (1)
      {
        v20 = 0;
        v21 = a7[v16];
        v22 = (float *)a8[v16];
        v23 = v19;
        v24 = v22;
        v25 = a10;
        do
        {
          v26 = *v25++;
          LOWORD(a1) = *(_WORD *)(v21 + 2 * v26);
          v27 = *(v23 - 1);
          LOWORD(a3) = *(_WORD *)(v21 + 2 * ((int)v26 + a14));
          a3 = *v23 * (float)LODWORD(a3);
          a1 = a3 + (float)((float)LODWORD(a1) * v27);
          *v24++ = a1;
          --v20;
          v23 += 2;
        }
        while (-(uint64_t)a16 != v20);
        if (a16 >= a13)
          goto LABEL_6;
        if ((_DWORD)v17)
        {
          v28 = 0;
          v29 = v18 - v20;
          do
          {
            v30 = &v25[v28];
            LOWORD(a1) = *(_WORD *)(v21 + 2 * *v30);
            a1 = (float)LODWORD(a1);
            LOWORD(v27) = *(_WORD *)(v21 + 2 * v30[1]);
            v27 = (float)LODWORD(v27);
            v31 = &v24[v28];
            *v31 = a1;
            v31[1] = v27;
            v28 += 2;
          }
          while (v18 != v28);
          if (v17 + 1 == v18)
            goto LABEL_6;
        }
        else
        {
          v29 = -v20;
        }
        v32 = &a10[v29];
        v33 = &v22[v29];
        do
        {
          v34 = *v32++;
          LOWORD(a1) = *(_WORD *)(v21 + 2 * v34);
          a1 = (float)LODWORD(a1);
          *v33++ = a1;
          LODWORD(v29) = v29 + 1;
        }
        while ((int)v29 < a13);
LABEL_6:
        if ((int)++v16 >= a9)
          return;
      }
    }
    if (a13 >= 1)
    {
      v57 = v16;
      if (a13 == 1)
      {
        v58 = *a10;
        v59 = (float **)&a8[v16];
        v60 = &a7[v16];
        do
        {
          v62 = *v59++;
          v61 = v62;
          v63 = *v60++;
          LOWORD(a1) = *(_WORD *)(v63 + 2 * v58);
          a1 = (float)LODWORD(a1);
          *v61 = a1;
          LODWORD(v16) = v16 + 1;
        }
        while ((int)v16 < a9);
      }
      else
      {
        v72 = a13 & 0xFFFFFFFE;
        if (a13 == v72)
        {
          do
          {
            v73 = a7[v57];
            v74 = (float *)(a8[v57] + 4);
            v75 = a10 + 1;
            v76 = a13 & 0xFFFFFFFE;
            do
            {
              LOWORD(a1) = *(_WORD *)(v73 + 2 * *(v75 - 1));
              a1 = (float)LODWORD(a1);
              LOWORD(a2) = *(_WORD *)(v73 + 2 * *v75);
              a2 = (float)LODWORD(a2);
              *(v74 - 1) = a1;
              *v74 = a2;
              v74 += 2;
              v75 += 2;
              v76 -= 2;
            }
            while (v76);
            ++v57;
          }
          while ((int)v57 < a9);
        }
        else
        {
          v77 = (4 * a13) & 0x3FFFFFFF8;
          do
          {
            v78 = a7[v57];
            v79 = a8[v57];
            v80 = (float *)(v79 + 4);
            v81 = a13 & 0xFFFFFFFE;
            v82 = a10 + 1;
            do
            {
              LOWORD(a1) = *(_WORD *)(v78 + 2 * *(v82 - 1));
              a1 = (float)LODWORD(a1);
              LOWORD(a2) = *(_WORD *)(v78 + 2 * *v82);
              a2 = (float)LODWORD(a2);
              *(v80 - 1) = a1;
              *v80 = a2;
              v82 += 2;
              v80 += 2;
              v81 -= 2;
            }
            while (v81);
            v83 = (float *)(v79 + v77);
            v84 = a13 - v72;
            v85 = (int *)((char *)a10 + v77);
            do
            {
              v86 = *v85++;
              LOWORD(a1) = *(_WORD *)(v78 + 2 * v86);
              a1 = (float)LODWORD(a1);
              *v83++ = a1;
              --v84;
            }
            while (v84);
            ++v57;
          }
          while ((int)v57 < a9);
        }
      }
    }
  }
}

void sub_100325560(double a1, double a2, double a3, double a4, double a5, double a6, __n128 a7, __n128 a8, uint64_t a9, float32x4_t **a10, uint16x8_t *a11, unsigned __int32 *a12, uint64_t a13)
{
  float32x4_t *v13;
  float32x4_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  int16x4_t *v18;
  uint64_t v19;
  float *v20;
  float *v21;
  int32x4_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  int32x4_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float *v36;
  __int16 *v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int v43;
  float32x4_t v44;
  float32x4_t *v45;
  float32x4_t *v46;
  float32x4_t *v47;
  uint16x8_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  unsigned __int8 v53;
  float32x4_t v54;
  unsigned __int8 v55;
  int v56;
  __int128 v57;
  int v58;
  __int128 v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  float32x4_t *v77;
  float32x4_t *v78;
  uint16x8_t *v79;
  uint16x8_t *v80;
  float32x4_t *v81;
  float32x4_t *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  float32x4_t *v87;
  float32x4_t *v88;
  float32x4_t *v89;
  float32x4_t *v90;
  uint16x8_t *v91;
  uint16x8_t *v92;

  a7.n128_u32[0] = *a12;
  a8.n128_u32[0] = a12[1];
  v13 = *a10;
  v14 = a10[1];
  v15 = 0;
  v16 = a13 - 8;
  if ((int)a13 >= 8)
  {
    v44 = (float32x4_t)vdupq_lane_s32((int32x2_t)a8.n128_u64[0], 0);
    v45 = v14 + 1;
    v46 = v13 + 1;
    v47 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    v48 = a11;
    do
    {
      v50 = v46[-1];
      v49 = *v46;
      v52 = v45[-1];
      v51 = *v45;
      v53 = atomic_load((unsigned __int8 *)qword_10048AA40);
      if ((v53 & 1) == 0)
      {
        v79 = a11;
        v81 = v14;
        v75 = a13;
        v77 = v13;
        v83 = v15;
        v85 = v16;
        v87 = v45;
        v89 = v46;
        v91 = v48;
        v73 = a7;
        v69 = v44;
        v71 = a8;
        v65 = v46[-1];
        v67 = *v46;
        v61 = v45[-1];
        v63 = *v45;
        v56 = __cxa_guard_acquire(qword_10048AA40);
        v52 = v61;
        v51 = v63;
        v50 = v65;
        v49 = v67;
        *(_QWORD *)&v57 = 0x3F0000003F000000;
        *((_QWORD *)&v57 + 1) = 0x3F0000003F000000;
        v44 = v69;
        a8 = v71;
        a7 = v73;
        v46 = v89;
        v48 = v91;
        v47 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v45 = v87;
        v16 = v85;
        v14 = v81;
        v15 = v83;
        a13 = v75;
        v13 = v77;
        a11 = v79;
        if (v56)
        {
          xmmword_10048AA30 = v57;
          __cxa_guard_release(qword_10048AA40);
          v52 = v61;
          v51 = v63;
          v50 = v65;
          v49 = v67;
          v44 = v69;
          a8 = v71;
          a7 = v73;
          v46 = v89;
          v48 = v91;
          v47 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v45 = v87;
          v16 = v85;
          v14 = v81;
          v15 = v83;
          a13 = v75;
          v13 = v77;
          a11 = v79;
        }
      }
      v54 = v47[163];
      v55 = atomic_load((unsigned __int8 *)qword_10048AA40);
      if ((v55 & 1) == 0)
      {
        v80 = a11;
        v82 = v14;
        v76 = a13;
        v78 = v13;
        v84 = v15;
        v86 = v16;
        v88 = v45;
        v90 = v46;
        v92 = v48;
        v74 = a7;
        v70 = v44;
        v72 = a8;
        v66 = v50;
        v68 = v49;
        v62 = v52;
        v64 = v51;
        v60 = v47[163];
        v58 = __cxa_guard_acquire(qword_10048AA40);
        v54 = v60;
        v52 = v62;
        v51 = v64;
        v50 = v66;
        v49 = v68;
        v44 = v70;
        *(_QWORD *)&v59 = 0x3F0000003F000000;
        *((_QWORD *)&v59 + 1) = 0x3F0000003F000000;
        a8 = v72;
        a7 = v74;
        v46 = v90;
        v48 = v92;
        v47 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v45 = v88;
        v16 = v86;
        v14 = v82;
        v15 = v84;
        a13 = v76;
        v13 = v78;
        a11 = v80;
        if (v58)
        {
          xmmword_10048AA30 = v59;
          __cxa_guard_release(qword_10048AA40);
          v54 = v60;
          v52 = v62;
          v51 = v64;
          v50 = v66;
          v49 = v68;
          v44 = v70;
          a8 = v72;
          a7 = v74;
          v46 = v90;
          v48 = v92;
          v47 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v45 = v88;
          v16 = v86;
          v14 = v82;
          v15 = v84;
          a13 = v76;
          v13 = v78;
          a11 = v80;
        }
      }
      *v48++ = vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmlaq_f32(vmulq_n_f32(v50, a7.n128_f32[0]), v44, v52), v54))), vcvtq_u32_f32(vaddq_f32(vmlaq_f32(vmulq_n_f32(v49, a7.n128_f32[0]), v44, v51), v47[163])));
      v15 += 8;
      v45 += 2;
      v46 += 2;
    }
    while (v16 >= v15);
  }
  if (v15 <= (int)a13 - 4)
  {
    v17 = v15;
    v18 = (int16x4_t *)((char *)a11 + 2 * v15);
    v19 = 4 * v15 + 8;
    v20 = (float *)((char *)v14->f32 + v19);
    v21 = (float *)((char *)v13->f32 + v19);
    v22.i64[0] = 0xFFFF0000FFFFLL;
    v22.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      v23 = (uint64_t)rintf((float)(a8.n128_f32[0] * *(v20 - 2)) + (float)(*(v21 - 2) * a7.n128_f32[0]));
      v24 = rintf((float)(a8.n128_f32[0] * *(v20 - 1)) + (float)(*(v21 - 1) * a7.n128_f32[0]));
      v25 = *v20;
      v26 = v20[1];
      v20 += 4;
      v27 = (uint64_t)v24;
      v28 = a8.n128_f32[0] * v25;
      v29 = *v21;
      v30 = v21[1];
      v21 += 4;
      v31 = (uint64_t)rintf(v28 + (float)(v29 * a7.n128_f32[0]));
      v32.i64[0] = __PAIR64__(v27, v23);
      v32.i64[1] = __PAIR64__((uint64_t)rintf((float)(a8.n128_f32[0] * v26) + (float)(v30 * a7.n128_f32[0])), v31);
      *v18++ = vmovn_s32(vminq_s32(vmaxq_s32(v32, (int32x4_t)0), v22));
      v17 += 4;
    }
    while (v17 <= (int)a13 - 4);
    v15 = v17;
  }
  if (v15 < (int)a13)
  {
    v33 = v15;
    v34 = v15;
    v35 = &v13->f32[v34];
    v36 = &v14->f32[v34];
    v37 = &a11->i16[v15];
    v38 = (int)a13 - v33;
    do
    {
      v39 = *v35++;
      v40 = v39;
      v41 = *v36++;
      v42 = rintf((float)(a8.n128_f32[0] * v41) + (float)(v40 * a7.n128_f32[0]));
      v43 = (uint64_t)v42 & ~((int)(uint64_t)v42 >> 31);
      if (v43 >= 0xFFFF)
        LOWORD(v43) = -1;
      *v37++ = v43;
      --v38;
    }
    while (v38);
  }
}

uint64_t sub_100325894(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453878;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_1003259B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_1004538B8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_100325BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_100325BF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100325C08(uint64_t a1)
{
  sub_10032692C(a1);
  operator delete();
}

_DWORD *sub_100325C2C(_DWORD *result, int *a2, double a3, double a4, double a5, double a6, double a7)
{
  _DWORD *v7;
  unsigned int v8;
  signed int v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  signed int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  float *v33;
  _DWORD v34[265];
  char v35;
  char v36;
  _DWORD __b[16];
  uint64_t v38[16];
  uint64_t v39[17];

  v7 = result;
  v8 = result[2];
  v9 = (result[60] + 15) & 0xFFFFFFF0;
  LODWORD(v10) = result[62];
  if ((v10 * v9) >= 0x109)
    operator new[]();
  v11 = 0.0;
  memset(v39, 0, 128);
  memset(v38, 0, sizeof(v38));
  if ((int)v10 >= 1)
  {
    result = memset(__b, 255, 4 * v10);
    v12 = v9;
    if ((_DWORD)v10 == 1)
    {
      v13 = 0;
LABEL_9:
      v17 = &v34[v13 * v9];
      v18 = &v38[v13];
      v19 = v10 - v13;
      do
      {
        *v18++ = (uint64_t)v17;
        v17 = (_DWORD *)((char *)v17 + v12 * 4);
        --v19;
      }
      while (v19);
      goto LABEL_11;
    }
    v13 = v10 & 0xFFFFFFFE;
    v14 = &v38[1];
    v15 = v13;
    v16 = v34;
    do
    {
      *(v14 - 1) = (uint64_t)v16;
      *v14 = (uint64_t)&v16[v12];
      v16 += 2 * v9;
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    if (v13 != v10)
      goto LABEL_9;
  }
LABEL_11:
  v20 = *a2;
  if ((int)v20 < a2[1])
  {
    v21 = (float *)(*((_QWORD *)v7 + 28) + 4 * (int)v20 * (int)v10);
    v31 = ((v8 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v10 >= 1)
      {
        v33 = v21;
        v22 = 0;
        LODWORD(v23) = 0;
        v24 = *(_DWORD *)(*((_QWORD *)v7 + 26) + 4 * v20) - (v10 >> 1) + 1;
        v25 = v10;
        do
        {
          v27 = v7[59];
          if ((int)(v24 + v22) >= v27)
            v28 = v27 - 1;
          else
            v28 = v24 + v22;
          if ((int)(v24 + v22) >= 0)
            v29 = v28;
          else
            v29 = 0;
          if ((int)v23 <= (int)v22)
            v23 = v22;
          else
            v23 = v23;
          if ((int)v23 < (int)v10)
          {
            while (v23 > 0xF || v29 != __b[v23])
            {
              if ((uint64_t)++v23 >= (int)v10)
                goto LABEL_15;
            }
            if (v23 > v22)
            {
              memcpy((void *)v38[v22], (const void *)v38[v23], 4 * v9);
              LODWORD(v10) = v7[62];
            }
          }
LABEL_15:
          if ((int)v22 >= v25)
            v26 = v25;
          else
            v26 = v22;
          if ((_DWORD)v23 == (_DWORD)v10)
            v25 = v26;
          v39[v22] = *((_QWORD *)v7 + 3) + **((_QWORD **)v7 + 10) * v29;
          __b[v22++] = v29;
        }
        while ((uint64_t)v22 < (int)v10);
        v30 = v7[60];
        if ((int)v10 <= v25)
        {
          v21 = v33;
          goto LABEL_41;
        }
        sub_100325FD0(v11, a4, a5, a6, a7, (uint64_t)&v36, &v39[v25], &v38[v25], v10 - v25, *((int **)v7 + 25), *((_QWORD *)v7 + 27), v7[58], v30, v31, v7[63], v7[64]);
        v21 = v33;
      }
      v30 = v7[60];
LABEL_41:
      result = (_DWORD *)sub_10032642C((uint64_t)&v35, (uint64_t)v38, (int16x8_t *)(*((_QWORD *)v7 + 15) + *((_QWORD *)v7 + 23) * v20++), v21, v30);
      v10 = (int)v7[62];
      v21 += v10;
    }
    while (v20 < a2[1]);
  }
  return result;
}

void sub_100325F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

void sub_100325FD0(double a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t *a7, uint64_t *a8, int a9, int *a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, int a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  float *v23;
  _DWORD *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  _DWORD *v30;
  int *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  int v42;
  int *v43;
  float *v44;
  int *v45;
  _DWORD *v46;
  _DWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  int16x4_t v54;
  uint64_t v55;
  int16x4_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int16x4_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  int *v82;
  _DWORD *v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;

  if (a9 >= 2)
  {
    if (a16 < 1)
    {
      v16 = (a9 - 1);
      if (a13 >= 1)
      {
        v64 = 0;
        v65 = *a7;
        v66 = *a8;
        do
        {
          v67 = 0;
          v68 = a7[++v64];
          v69 = a8[v64];
          do
          {
            v70 = 2 * a10[v67];
            LOWORD(a1) = *(_WORD *)(v65 + v70);
            v71 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a1).u64[0];
            *(float *)v71.i32 = (float)v71.i32[0];
            *(_DWORD *)(v66 + v67 * 4) = v71.i32[0];
            v71.i16[0] = *(_WORD *)(v68 + v70);
            *(_QWORD *)&a1 = vmovl_s16(v71).u64[0];
            *(float *)&a1 = (float)SLODWORD(a1);
            *(_DWORD *)(v69 + v67 * 4) = LODWORD(a1);
            ++v67;
          }
          while (a13 != v67);
          v66 = v69;
          v65 = v68;
        }
        while (v64 != v16);
      }
    }
    else
    {
      v34 = 0;
      LODWORD(v16) = a9 - 1;
      v35 = *a7;
      v36 = *a8;
      do
      {
        v37 = 0;
        v38 = v35;
        v39 = v36;
        v35 = a7[++v34];
        v36 = a8[v34];
        v40 = (_DWORD *)(v39 + 4);
        v41 = (_DWORD *)(v36 + 4);
        v42 = 1;
        v43 = a10 + 1;
        v44 = (float *)(a11 + 4);
        do
        {
          v45 = v43;
          v46 = v40;
          v47 = v41;
          v48 = v42;
          v49 = 4 * v37;
          v50 = a10[v37];
          v51 = *(v44 - 1);
          v52 = 2 * v50;
          LOWORD(a3) = *(_WORD *)(v38 + 2 * v50);
          *(_QWORD *)&a3 = vmovl_s16(*(int16x4_t *)&a3).u64[0];
          v53 = 2 * ((int)v50 + a14);
          LOWORD(a4) = *(_WORD *)(v38 + v53);
          v54 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a4).u64[0];
          *(float *)v54.i32 = *v44 * (float)v54.i32[0];
          *(float *)&a3 = *(float *)v54.i32 + (float)((float)SLODWORD(a3) * v51);
          v54.i16[0] = *(_WORD *)(v35 + v52);
          *(_QWORD *)&a4 = vmovl_s16(v54).u64[0];
          *(float *)&a4 = (float)SLODWORD(a4);
          LOWORD(a5) = *(_WORD *)(v35 + v53);
          *(_QWORD *)&a5 = vmovl_s16(*(int16x4_t *)&a5).u64[0];
          *(float *)&a5 = (float)SLODWORD(a5);
          *(float *)&a2 = *v44 * *(float *)&a5;
          *(_DWORD *)(v39 + v49) = LODWORD(a3);
          *(float *)&a1 = *(float *)&a2 + (float)(*(float *)&a4 * v51);
          *(_DWORD *)(v36 + v49) = LODWORD(a1);
          ++v37;
          v44 += 2;
          ++v43;
          v40 = v46 + 1;
          v41 = v47 + 1;
          v42 = v48 + 1;
        }
        while (a16 != v37);
        if (a16 < a13)
        {
          do
          {
            v55 = *v45++;
            LOWORD(a1) = *(_WORD *)(v38 + 2 * v55);
            v56 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a1).u64[0];
            *(float *)v56.i32 = (float)v56.i32[0];
            *v46++ = v56.i32[0];
            v56.i16[0] = *(_WORD *)(v35 + 2 * v55);
            *(_QWORD *)&a1 = vmovl_s16(v56).u64[0];
            *(float *)&a1 = (float)SLODWORD(a1);
            *v47++ = LODWORD(a1);
            ++v48;
          }
          while (v48 < a13);
        }
      }
      while (v34 != a9 - 1);
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
  if ((int)v16 < a9)
  {
    if (a16 >= 1)
    {
      v16 = v16;
      v17 = (~a16 + a13);
      v18 = (v17 + 1) & 0x1FFFFFFFELL;
      v19 = (float *)(a11 + 4);
      while (1)
      {
        v20 = 0;
        v21 = a7[v16];
        v22 = (_DWORD *)a8[v16];
        v23 = v19;
        v24 = v22;
        v25 = a10;
        do
        {
          v26 = *v25++;
          LOWORD(a1) = *(_WORD *)(v21 + 2 * v26);
          *(_QWORD *)&a1 = vmovl_s16(*(int16x4_t *)&a1).u64[0];
          *(float *)&a2 = *(v23 - 1);
          LOWORD(a3) = *(_WORD *)(v21 + 2 * ((int)v26 + a14));
          *(_QWORD *)&a3 = vmovl_s16(*(int16x4_t *)&a3).u64[0];
          *(float *)&a3 = *v23 * (float)SLODWORD(a3);
          *(float *)&a1 = *(float *)&a3 + (float)((float)SLODWORD(a1) * *(float *)&a2);
          *v24++ = LODWORD(a1);
          --v20;
          v23 += 2;
        }
        while (-(uint64_t)a16 != v20);
        if (a16 >= a13)
          goto LABEL_6;
        if ((_DWORD)v17)
        {
          v27 = 0;
          v28 = v18 - v20;
          do
          {
            v29 = &v25[v27];
            LOWORD(a1) = *(_WORD *)(v21 + 2 * *v29);
            *(_QWORD *)&a1 = vmovl_s16(*(int16x4_t *)&a1).u64[0];
            *(float *)&a1 = (float)SLODWORD(a1);
            LOWORD(a2) = *(_WORD *)(v21 + 2 * v29[1]);
            *(_QWORD *)&a2 = vmovl_s16(*(int16x4_t *)&a2).u64[0];
            *(float *)&a2 = (float)SLODWORD(a2);
            v30 = &v24[v27];
            *v30 = LODWORD(a1);
            v30[1] = LODWORD(a2);
            v27 += 2;
          }
          while (v18 != v27);
          if (v17 + 1 == v18)
            goto LABEL_6;
        }
        else
        {
          v28 = -v20;
        }
        v31 = &a10[v28];
        v32 = &v22[v28];
        do
        {
          v33 = *v31++;
          LOWORD(a1) = *(_WORD *)(v21 + 2 * v33);
          *(_QWORD *)&a1 = vmovl_s16(*(int16x4_t *)&a1).u64[0];
          *(float *)&a1 = (float)SLODWORD(a1);
          *v32++ = LODWORD(a1);
          LODWORD(v28) = v28 + 1;
        }
        while ((int)v28 < a13);
LABEL_6:
        if ((int)++v16 >= a9)
          return;
      }
    }
    if (a13 >= 1)
    {
      v57 = v16;
      if (a13 == 1)
      {
        v58 = *a10;
        v59 = &a8[v16];
        v60 = &a7[v16];
        do
        {
          v62 = (_DWORD *)*v59++;
          v61 = v62;
          v63 = *v60++;
          LOWORD(a1) = *(_WORD *)(v63 + 2 * v58);
          *(_QWORD *)&a1 = vmovl_s16(*(int16x4_t *)&a1).u64[0];
          *(float *)&a1 = (float)SLODWORD(a1);
          *v61 = LODWORD(a1);
          LODWORD(v16) = v16 + 1;
        }
        while ((int)v16 < a9);
      }
      else
      {
        v72 = a13 & 0xFFFFFFFE;
        if (a13 == v72)
        {
          do
          {
            v73 = a7[v57];
            v74 = (_DWORD *)(a8[v57] + 4);
            v75 = a10 + 1;
            v76 = a13 & 0xFFFFFFFE;
            do
            {
              LOWORD(a1) = *(_WORD *)(v73 + 2 * *(v75 - 1));
              *(_QWORD *)&a1 = vmovl_s16(*(int16x4_t *)&a1).u64[0];
              *(float *)&a1 = (float)SLODWORD(a1);
              LOWORD(a2) = *(_WORD *)(v73 + 2 * *v75);
              *(_QWORD *)&a2 = vmovl_s16(*(int16x4_t *)&a2).u64[0];
              *(float *)&a2 = (float)SLODWORD(a2);
              *(v74 - 1) = LODWORD(a1);
              *v74 = LODWORD(a2);
              v74 += 2;
              v75 += 2;
              v76 -= 2;
            }
            while (v76);
            ++v57;
          }
          while ((int)v57 < a9);
        }
        else
        {
          v77 = (4 * a13) & 0x3FFFFFFF8;
          do
          {
            v78 = a7[v57];
            v79 = a8[v57];
            v80 = (_DWORD *)(v79 + 4);
            v81 = a13 & 0xFFFFFFFE;
            v82 = a10 + 1;
            do
            {
              LOWORD(a1) = *(_WORD *)(v78 + 2 * *(v82 - 1));
              *(_QWORD *)&a1 = vmovl_s16(*(int16x4_t *)&a1).u64[0];
              *(float *)&a1 = (float)SLODWORD(a1);
              LOWORD(a2) = *(_WORD *)(v78 + 2 * *v82);
              *(_QWORD *)&a2 = vmovl_s16(*(int16x4_t *)&a2).u64[0];
              *(float *)&a2 = (float)SLODWORD(a2);
              *(v80 - 1) = LODWORD(a1);
              *v80 = LODWORD(a2);
              v82 += 2;
              v80 += 2;
              v81 -= 2;
            }
            while (v81);
            v83 = (_DWORD *)(v79 + v77);
            v84 = a13 - v72;
            v85 = (int *)((char *)a10 + v77);
            do
            {
              v86 = *v85++;
              LOWORD(a1) = *(_WORD *)(v78 + 2 * v86);
              *(_QWORD *)&a1 = vmovl_s16(*(int16x4_t *)&a1).u64[0];
              *(float *)&a1 = (float)SLODWORD(a1);
              *v83++ = LODWORD(a1);
              --v84;
            }
            while (v84);
            ++v57;
          }
          while ((int)v57 < a9);
        }
      }
    }
  }
}

uint64_t sub_10032642C(uint64_t a1, uint64_t a2, int16x8_t *a3, float *a4, int a5)
{
  float v7;
  float v8;
  uint64_t v9;
  float32x4_t *v10;
  uint64_t result;
  uint64_t v12;
  int16x4_t *v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  int32x4_t v23;
  uint64_t v24;
  float *v25;
  float *v26;
  __int16 *v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  char v33;

  v7 = *a4;
  v8 = a4[1];
  v10 = *(float32x4_t **)a2;
  v9 = *(_QWORD *)(a2 + 8);
  result = sub_100326578((uint64_t)&v33, (float32x4_t **)a2, a3, a4, a5);
  if ((int)result <= a5 - 4)
  {
    v12 = (int)result;
    v13 = (int16x4_t *)((char *)a3 + 2 * (int)result);
    v14 = 4 * (int)result + 8;
    v15 = (float *)(v9 + v14);
    v16 = (float *)((char *)v10->f32 + v14);
    do
    {
      v17 = rintf((float)(v8 * *(v15 - 1)) + (float)(*(v16 - 1) * v7));
      v18 = (uint64_t)rintf((float)(v8 * *(v15 - 2)) + (float)(*(v16 - 2) * v7));
      v20 = *v15;
      v19 = v15[1];
      v15 += 4;
      v21 = *v16;
      v22 = v16[1];
      v16 += 4;
      v23.i64[0] = __PAIR64__((uint64_t)v17, v18);
      v23.i32[2] = (uint64_t)rintf((float)(v8 * v20) + (float)(v21 * v7));
      v23.i32[3] = (uint64_t)rintf((float)(v8 * v19) + (float)(v22 * v7));
      *v13++ = vqmovn_s32(v23);
      v12 += 4;
    }
    while (v12 <= a5 - 4);
    result = v12;
  }
  if ((int)result < a5)
  {
    v24 = (int)result;
    v25 = &v10->f32[v24];
    v26 = (float *)(v9 + v24 * 4);
    v27 = &a3->i16[(int)result];
    v28 = a5 - (uint64_t)(int)result;
    do
    {
      v29 = *v25++;
      v30 = v29;
      v31 = *v26++;
      v32 = (uint64_t)rintf((float)(v8 * v31) + (float)(v30 * v7));
      if ((int)v32 <= -32768)
        LODWORD(v32) = -32768;
      if ((int)v32 >= 0x7FFF)
        LOWORD(v32) = 0x7FFF;
      *v27++ = v32;
      --v28;
    }
    while (v28);
  }
  return result;
}

uint64_t sub_100326578(uint64_t a1, float32x4_t **a2, int16x8_t *a3, const float *a4, int a5)
{
  const float *v5;
  float32x4_t v6;
  uint64_t result;
  int v8;
  float32x4_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  int8x16_t *v12;
  int8x16_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  int8x16_t v20;
  int8x16_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  float32x4_t v24;
  float32x4_t v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int16x8_t *v66;
  int16x8_t *v67;
  int16x8_t *v68;
  int16x8_t *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  float32x4_t *v74;
  float32x4_t *v75;
  float32x4_t *v76;
  float32x4_t *v77;
  float32x4_t *v78;
  float32x4_t *v79;
  float32x4_t *v80;
  float32x4_t *v81;

  v6 = vld1q_dup_f32(a4);
  v5 = a4 + 1;
  result = 0;
  v8 = a5 - 8;
  if (a5 >= 8)
  {
    v9 = vld1q_dup_f32(v5);
    v10 = a2[1] + 1;
    v11 = *a2 + 1;
    v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    do
    {
      v15 = v11[-1];
      v14 = *v11;
      v17 = v10[-1];
      v16 = *v10;
      v18 = atomic_load((unsigned __int8 *)qword_10048AA60);
      if ((v18 & 1) == 0)
      {
        v70 = result;
        v66 = a3;
        v62 = v8;
        v74 = v10;
        v78 = v11;
        v54 = v9;
        v58 = v6;
        v46 = v11[-1];
        v50 = *v11;
        v38 = v10[-1];
        v42 = *v10;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA60);
        v17 = v38;
        v16 = v42;
        v15 = v46;
        v14 = v50;
        v9 = v54;
        v6 = v58;
        *(_QWORD *)&v26 = 0x8000000080000000;
        *((_QWORD *)&v26 + 1) = 0x8000000080000000;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = v74;
        v11 = v78;
        v8 = v62;
        a3 = v66;
        v27 = result;
        LODWORD(result) = v70;
        if (v27)
        {
          xmmword_10048AA50 = v26;
          __cxa_guard_release(qword_10048AA60);
          v17 = v38;
          v16 = v42;
          v15 = v46;
          v14 = v50;
          v9 = v54;
          v6 = v58;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v10 = v74;
          v11 = v78;
          v8 = v62;
          LODWORD(result) = v70;
          a3 = v66;
        }
      }
      v19 = atomic_load((unsigned __int8 *)&qword_10048AA80);
      if ((v19 & 1) == 0)
      {
        v71 = result;
        v67 = a3;
        v63 = v8;
        v75 = v10;
        v79 = v11;
        v55 = v9;
        v59 = v6;
        v47 = v15;
        v51 = v14;
        v39 = v17;
        v43 = v16;
        LODWORD(result) = __cxa_guard_acquire(&qword_10048AA80);
        v17 = v39;
        v16 = v43;
        v15 = v47;
        v14 = v51;
        v9 = v55;
        v6 = v59;
        *(_QWORD *)&v28 = 0x3F0000003F000000;
        *((_QWORD *)&v28 + 1) = 0x3F0000003F000000;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = v75;
        v11 = v79;
        v8 = v63;
        a3 = v67;
        v29 = result;
        LODWORD(result) = v71;
        if (v29)
        {
          xmmword_10048AA70 = v28;
          __cxa_guard_release(&qword_10048AA80);
          v17 = v39;
          v16 = v43;
          v15 = v47;
          v14 = v51;
          v9 = v55;
          v6 = v59;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v10 = v75;
          v11 = v79;
          v8 = v63;
          LODWORD(result) = v71;
          a3 = v67;
        }
      }
      v20 = v13[167];
      v21 = v12[165];
      v22 = atomic_load((unsigned __int8 *)qword_10048AA60);
      if ((v22 & 1) == 0)
      {
        v72 = result;
        v68 = a3;
        v64 = v8;
        v76 = v10;
        v80 = v11;
        v56 = v9;
        v60 = v6;
        v48 = v15;
        v52 = v14;
        v40 = v17;
        v44 = v16;
        v34 = v12[165];
        v36 = v13[167];
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA60);
        v21 = v34;
        v20 = v36;
        v17 = v40;
        v16 = v44;
        v15 = v48;
        v14 = v52;
        v9 = v56;
        v6 = v60;
        *(_QWORD *)&v30 = 0x8000000080000000;
        *((_QWORD *)&v30 + 1) = 0x8000000080000000;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = v76;
        v11 = v80;
        v8 = v64;
        a3 = v68;
        v31 = result;
        LODWORD(result) = v72;
        if (v31)
        {
          xmmword_10048AA50 = v30;
          __cxa_guard_release(qword_10048AA60);
          v21 = v34;
          v20 = v36;
          v17 = v40;
          v16 = v44;
          v15 = v48;
          v14 = v52;
          v9 = v56;
          v6 = v60;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v10 = v76;
          v11 = v80;
          v8 = v64;
          LODWORD(result) = v72;
          a3 = v68;
        }
      }
      v23 = atomic_load((unsigned __int8 *)&qword_10048AA80);
      if ((v23 & 1) == 0)
      {
        v73 = result;
        v69 = a3;
        v65 = v8;
        v77 = v10;
        v81 = v11;
        v57 = v9;
        v61 = v6;
        v49 = v15;
        v53 = v14;
        v41 = v17;
        v45 = v16;
        v35 = v21;
        v37 = v20;
        LODWORD(result) = __cxa_guard_acquire(&qword_10048AA80);
        v21 = v35;
        v20 = v37;
        v17 = v41;
        v16 = v45;
        v15 = v49;
        v14 = v53;
        v9 = v57;
        v6 = v61;
        *(_QWORD *)&v32 = 0x3F0000003F000000;
        *((_QWORD *)&v32 + 1) = 0x3F0000003F000000;
        v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v10 = v77;
        v11 = v81;
        v8 = v65;
        a3 = v69;
        v33 = result;
        LODWORD(result) = v73;
        if (v33)
        {
          xmmword_10048AA70 = v32;
          __cxa_guard_release(&qword_10048AA80);
          v21 = v35;
          v20 = v37;
          v17 = v41;
          v16 = v45;
          v15 = v49;
          v14 = v53;
          v9 = v57;
          v6 = v61;
          v13 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v12 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v10 = v77;
          v11 = v81;
          v8 = v65;
          LODWORD(result) = v73;
          a3 = v69;
        }
      }
      v24 = vmlaq_f32(vmulq_f32(v6, v15), v9, v17);
      v25 = vmlaq_f32(vmulq_f32(v6, v14), v9, v16);
      *a3++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v24, (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v24), v20)))), vcvtq_s32_f32(vaddq_f32(v25, (float32x4_t)vorrq_s8(vandq_s8(v12[165], (int8x16_t)v25), v13[167]))));
      v10 += 2;
      v11 += 2;
      result = (result + 8);
    }
    while (v8 >= (int)result);
  }
  return result;
}

uint64_t sub_10032692C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_1004538B8;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_100326A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_1004538F8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_100326C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_100326C8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100326CA0(uint64_t a1)
{
  sub_10032755C(a1);
  operator delete();
}

void sub_100326CC4(uint64_t a1, int *a2, double a3, double a4)
{
  unsigned int v5;
  signed int v6;
  uint64_t v7;
  int32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int32 *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  signed int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  float32x4_t v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  unint64_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t *v43;
  float32x2_t *v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  float *v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  BOOL v64;
  uint64_t v66;
  float32x4_t v67;
  float *v68;
  const float *v69;
  const float *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float32x4_t v74;
  float32x4_t *v75;
  float32x4_t *v76;
  float32x4_t *v77;
  unint64_t v78;
  float32x4_t v79;
  int v80;
  __int32 *v82;
  _DWORD v83[265];
  char v84;
  _DWORD __b[16];
  _OWORD v86[8];
  uint64_t v87[17];
  float32x4x4_t v88;
  float32x4x4_t v89;
  float32x4x4_t v90;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v7) = *(_DWORD *)(a1 + 248);
  if ((v7 * v6) >= 0x109)
    operator new[]();
  v8.i32[1] = 0;
  memset(v87, 0, 128);
  memset(v86, 0, sizeof(v86));
  if ((int)v7 >= 1)
  {
    memset(__b, 255, 4 * v7);
    v9 = v6;
    if ((_DWORD)v7 == 1)
    {
      v10 = 0;
LABEL_9:
      v14 = &v83[v10 * v6];
      v15 = (_QWORD *)v86 + v10;
      v16 = v7 - v10;
      do
      {
        *v15++ = v14;
        v14 = (_DWORD *)((char *)v14 + v9 * 4);
        --v16;
      }
      while (v16);
      goto LABEL_11;
    }
    v10 = v7 & 0xFFFFFFFE;
    v11 = (_QWORD *)v86 + 1;
    v12 = v10;
    v13 = v83;
    do
    {
      *(v11 - 1) = v13;
      *v11 = &v13[v9];
      v13 += 2 * v6;
      v11 += 2;
      v12 -= 2;
    }
    while (v12);
    if (v10 != v7)
      goto LABEL_9;
  }
LABEL_11:
  v17 = *a2;
  if ((int)v17 < a2[1])
  {
    v18 = (__int32 *)(*(_QWORD *)(a1 + 224) + 4 * (int)v17 * (int)v7);
    v80 = ((v5 >> 3) & 0x1FF) + 1;
    while (1)
    {
      if ((int)v7 < 1)
        goto LABEL_40;
      v82 = v18;
      v19 = 0;
      LODWORD(v20) = 0;
      v21 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * v17) - (v7 >> 1) + 1;
      v22 = v7;
      do
      {
        v24 = *(_DWORD *)(a1 + 236);
        if ((int)(v21 + v19) >= v24)
          v25 = v24 - 1;
        else
          v25 = v21 + v19;
        if ((int)(v21 + v19) >= 0)
          v26 = v25;
        else
          v26 = 0;
        if ((int)v20 <= (int)v19)
          v20 = v19;
        else
          v20 = v20;
        if ((int)v20 < (int)v7)
        {
          while (v20 > 0xF || v26 != __b[v20])
          {
            if ((uint64_t)++v20 >= (int)v7)
              goto LABEL_16;
          }
          if (v20 > v19)
          {
            memcpy(*((void **)v86 + v19), *((const void **)v86 + v20), 4 * v6);
            LODWORD(v7) = *(_DWORD *)(a1 + 248);
          }
        }
LABEL_16:
        if ((int)v19 >= v22)
          v23 = v22;
        else
          v23 = v19;
        if ((_DWORD)v20 == (_DWORD)v7)
          v22 = v23;
        v87[v19] = *(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v26;
        __b[v19++] = v26;
      }
      while ((uint64_t)v19 < (int)v7);
      v27 = *(_DWORD *)(a1 + 240);
      if ((int)v7 > v22)
        break;
      v18 = v82;
LABEL_42:
      v28 = *(_QWORD *)(a1 + 120);
      v29 = *(_QWORD *)(a1 + 184);
      v8.i32[0] = *v18;
      LODWORD(a4) = v18[1];
      v30 = v86[0];
      if (v27 >= 8)
      {
        v31 = 0;
        v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
        v35 = (float32x4_t *)(v28 + v29 * v17 + 16);
        v36 = (float32x4_t *)(*((_QWORD *)&v86[0] + 1) + 16);
        v37 = (float32x4_t *)(*(_QWORD *)&v86[0] + 16);
        do
        {
          v38 = *v37;
          v39 = *v36;
          v35[-1] = vmlaq_f32(vmulq_n_f32(v37[-1], *(float *)v8.i32), v34, v36[-1]);
          v31 += 8;
          *v35 = vmlaq_f32(vmulq_n_f32(v38, *(float *)v8.i32), v34, v39);
          v35 += 2;
          v36 += 2;
          v37 += 2;
        }
        while (v31 <= (unint64_t)(v27 - 8));
        v32 = v29 * v17;
        v33 = v27 - 4;
        if ((int)v31 <= v27 - 4)
        {
LABEL_48:
          v31 = (int)v31;
          v40 = v33 - (uint64_t)(int)v31;
          if (v40 < 0xC)
            goto LABEL_49;
          v57 = 4 * (int)v31;
          v58 = v28 + v32 + v57;
          v59 = (4 * v40) & 0xFFFFFFFFFFFFFFF0;
          v60 = v28 + v59 + v32 + v57 + 16;
          v61 = v59 + v57;
          v62 = v30 + v59 + v57 + 16;
          v63 = v58 >= *((_QWORD *)&v30 + 1) + v61 + 16 || *((_QWORD *)&v30 + 1) + 4 * (int)v31 >= v60;
          v64 = !v63;
          if ((uint64_t)v30 + 4 * (int)v31 < v60 && v58 < v62)
            goto LABEL_49;
          if (v64)
            goto LABEL_49;
          v66 = (v40 >> 2) + 1;
          v67 = (float32x4_t)vdupq_lane_s32(v8, 0);
          v31 = (int)v31 + 4 * (v66 & 0x7FFFFFFFFFFFFFFCLL);
          v68 = (float *)(v28 + v57 + v29 * v17);
          v69 = (const float *)(v30 + v57);
          v70 = (const float *)(*((_QWORD *)&v30 + 1) + v57);
          v71 = v66 & 0x7FFFFFFFFFFFFFFCLL;
          do
          {
            v88 = vld4q_f32(v69);
            v69 += 16;
            v89 = vld4q_f32(v70);
            v70 += 16;
            v90.val[0] = vmlaq_f32(vmulq_n_f32(v89.val[0], *(float *)&a4), v67, v88.val[0]);
            v90.val[1] = vmlaq_f32(vmulq_n_f32(v89.val[1], *(float *)&a4), v67, v88.val[1]);
            v90.val[2] = vmlaq_f32(vmulq_n_f32(v89.val[2], *(float *)&a4), v67, v88.val[2]);
            v90.val[3] = vmlaq_f32(vmulq_n_f32(v89.val[3], *(float *)&a4), v67, v88.val[3]);
            vst4q_f32(v68, v90);
            v68 += 16;
            v71 -= 4;
          }
          while (v71);
          if (v66 != (v66 & 0x7FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            v41 = (float32x2_t)vdup_lane_s32(v8, 0);
            v42 = (float32x2_t *)(v28 + 4 * v31 + v29 * v17 + 8);
            v43 = (float32x2_t *)(*((_QWORD *)&v30 + 1) + 4 * v31 + 8);
            v44 = (float32x2_t *)(v30 + 4 * v31 + 8);
            do
            {
              v42[-1] = vmla_f32(vmul_n_f32(v43[-1], *(float *)&a4), v41, v44[-1]);
              v45 = *v44;
              v44 += 2;
              v46 = v45;
              v47 = *v43;
              v43 += 2;
              v31 += 4;
              *v42 = vmla_f32(vmul_n_f32(v47, *(float *)&a4), v41, v46);
              v42 += 2;
            }
            while (v31 <= v33);
          }
        }
      }
      else
      {
        LODWORD(v31) = 0;
        v32 = v29 * v17;
        v33 = v27 - 4;
        if (v27 - 4 >= 0)
          goto LABEL_48;
      }
      if ((int)v31 < v27)
      {
        v31 = (int)v31;
        v48 = v27 - (uint64_t)(int)v31;
        if (v48 < 0xC)
          goto LABEL_53;
        v72 = 4 * (int)v31;
        v73 = v32 + v28 + v72;
        if ((unint64_t)(v73 - (v72 + v30)) < 0x20)
          goto LABEL_53;
        if ((unint64_t)(v73 - (v72 + *((_QWORD *)&v30 + 1))) < 0x20)
          goto LABEL_53;
        v31 = (v48 & 0xFFFFFFFFFFFFFFF8) + (int)v31;
        v74 = (float32x4_t)vdupq_lane_s32(v8, 0);
        v75 = (float32x4_t *)(v28 + v72 + v29 * v17 + 16);
        v76 = (float32x4_t *)(v30 + v72 + 16);
        v77 = (float32x4_t *)(*((_QWORD *)&v30 + 1) + v72 + 16);
        v78 = v48 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v79 = vmlaq_f32(vmulq_n_f32(*v77, *(float *)&a4), v74, *v76);
          v75[-1] = vmlaq_f32(vmulq_n_f32(v77[-1], *(float *)&a4), v74, v76[-1]);
          *v75 = v79;
          v75 += 2;
          v76 += 2;
          v77 += 2;
          v78 -= 8;
        }
        while (v78);
        if (v48 != (v48 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_53:
          v49 = v27 - v31;
          v50 = 4 * v31;
          v51 = (float *)(v28 + v50 + v29 * v17);
          v52 = (float *)(*((_QWORD *)&v30 + 1) + v50);
          v53 = (float *)(v30 + v50);
          do
          {
            v54 = *v53++;
            v55 = v54;
            v56 = *v52++;
            *v51++ = (float)(*(float *)&a4 * v56) + (float)(v55 * *(float *)v8.i32);
            --v49;
          }
          while (v49);
        }
      }
      ++v17;
      v7 = *(int *)(a1 + 248);
      v18 += v7;
      if (v17 >= a2[1])
        return;
    }
    sub_1003272B4((uint64_t)&v84, &v87[v22], (uint64_t *)v86 + v22, v7 - v22, *(int **)(a1 + 200), *(_QWORD *)(a1 + 216), *(unsigned int *)(a1 + 232), v27, v80, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
    v18 = v82;
LABEL_40:
    v27 = *(_DWORD *)(a1 + 240);
    goto LABEL_42;
  }
}

void sub_1003272B4(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int *a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  uint64_t v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  int *v18;
  float *v19;
  int *v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  int v32;
  int *v33;
  float *v34;
  int *v35;
  _DWORD *v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (a4 >= 2)
  {
    if (a11 < 1)
    {
      v11 = (a4 - 1);
      if (a8 >= 1)
      {
        v54 = 0;
        v55 = *a2;
        v56 = *a3;
        do
        {
          v57 = 0;
          v58 = a2[++v54];
          v59 = a3[v54];
          do
          {
            v60 = 4 * a5[v57];
            *(_DWORD *)(v56 + v57 * 4) = *(_DWORD *)(v55 + v60);
            *(_DWORD *)(v59 + v57 * 4) = *(_DWORD *)(v58 + v60);
            ++v57;
          }
          while (a8 != v57);
          v56 = v59;
          v55 = v58;
        }
        while (v54 != v11);
      }
    }
    else
    {
      v24 = 0;
      LODWORD(v11) = a4 - 1;
      v25 = *a2;
      v26 = *a3;
      do
      {
        v27 = 0;
        v28 = v25;
        v29 = v26;
        v25 = a2[++v24];
        v26 = a3[v24];
        v30 = (_DWORD *)(v29 + 4);
        v31 = (_DWORD *)(v26 + 4);
        v32 = 1;
        v33 = a5 + 1;
        v34 = (float *)(a6 + 4);
        do
        {
          v35 = v33;
          v36 = v30;
          v37 = v31;
          v38 = v32;
          v39 = 4 * v27;
          v40 = a5[v27];
          v41 = *(v34 - 1);
          v42 = 4 * v40;
          v43 = *(float *)(v28 + 4 * v40);
          v44 = 4 * ((int)v40 + a9);
          v45 = *(float *)(v25 + v42);
          v46 = *v34 * *(float *)(v25 + v44);
          *(float *)(v29 + v39) = (float)(*v34 * *(float *)(v28 + v44)) + (float)(v43 * v41);
          *(float *)(v26 + v39) = v46 + (float)(v45 * v41);
          ++v27;
          v34 += 2;
          ++v33;
          v30 = v36 + 1;
          v31 = v37 + 1;
          v32 = v38 + 1;
        }
        while (a11 != v27);
        if (a11 < a8)
        {
          do
          {
            v47 = *v35++;
            *v36++ = *(_DWORD *)(v28 + 4 * v47);
            *v37++ = *(_DWORD *)(v25 + 4 * v47);
            ++v38;
          }
          while (v38 < a8);
        }
      }
      while (v24 != a4 - 1);
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((int)v11 < a4)
  {
    if (a11 < 1)
    {
      if (a8 >= 1)
      {
        v48 = v11;
        do
        {
          v49 = a2[v48];
          v50 = (_DWORD *)a3[v48];
          v51 = a8;
          v52 = a5;
          do
          {
            v53 = *v52++;
            *v50++ = *(_DWORD *)(v49 + 4 * v53);
            --v51;
          }
          while (v51);
          ++v48;
        }
        while ((int)v48 < a4);
      }
    }
    else
    {
      v11 = v11;
      v12 = (float *)(a6 + 4);
      do
      {
        v13 = 0;
        v14 = a2[v11];
        v15 = a3[v11];
        v16 = (_DWORD *)(v15 + 4);
        v17 = 1;
        v18 = a5 + 1;
        v19 = v12;
        do
        {
          v20 = v18;
          v21 = v16;
          v22 = v17;
          *(float *)(v15 + 4 * v13) = (float)(*(float *)(v14 + 4 * (a5[v13] + a9)) * *v19)
                                    + (float)(*(float *)(v14 + 4 * a5[v13]) * *(v19 - 1));
          ++v13;
          v19 += 2;
          ++v18;
          ++v16;
          ++v17;
        }
        while (a11 != v13);
        if (a11 < a8)
        {
          do
          {
            v23 = *v20++;
            *v21++ = *(_DWORD *)(v14 + 4 * v23);
            ++v22;
          }
          while (v22 < a8);
        }
        ++v11;
      }
      while ((int)v11 < a4);
    }
  }
}

uint64_t sub_10032755C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_1004538F8;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_10032767C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_100453938;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10032787C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_1003278BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1003278D0(uint64_t a1)
{
  sub_100328134(a1);
  operator delete();
}

void sub_1003278F4(uint64_t a1, int *a2)
{
  unsigned int v3;
  signed int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  signed int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  double *v34;
  double *v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  double *v46;
  double *v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v54;
  unint64_t v55;
  uint64_t v57;
  float64x2_t v58;
  double *v59;
  uint64_t v60;
  const double *v61;
  const double *v62;
  uint64_t v63;
  uint64_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  float64x2_t *v67;
  float64x2_t *v68;
  unint64_t v69;
  float64x2_t v70;
  int v71;
  float *v73;
  _QWORD v74[136];
  char v75;
  _DWORD __b[16];
  _OWORD v77[8];
  uint64_t v78[17];
  float64x2x4_t v79;
  float64x2x4_t v80;
  float64x2x4_t v81;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v5) = *(_DWORD *)(a1 + 248);
  if ((v5 * v4) >= 0x89)
    operator new[]();
  memset(v78, 0, 128);
  memset(v77, 0, sizeof(v77));
  if ((int)v5 >= 1)
  {
    memset(__b, 255, 4 * v5);
    v6 = v4;
    if ((_DWORD)v5 == 1)
    {
      v7 = 0;
LABEL_9:
      v11 = &v74[v7 * v4];
      v12 = (_QWORD *)v77 + v7;
      v13 = v5 - v7;
      do
      {
        *v12++ = v11;
        v11 = (_QWORD *)((char *)v11 + v6 * 8);
        --v13;
      }
      while (v13);
      goto LABEL_11;
    }
    v7 = v5 & 0xFFFFFFFE;
    v8 = (_QWORD *)v77 + 1;
    v9 = v7;
    v10 = v74;
    do
    {
      *(v8 - 1) = v10;
      *v8 = &v10[v6];
      v10 += 2 * v4;
      v8 += 2;
      v9 -= 2;
    }
    while (v9);
    if (v7 != v5)
      goto LABEL_9;
  }
LABEL_11:
  v14 = *a2;
  if ((int)v14 < a2[1])
  {
    v15 = (float *)(*(_QWORD *)(a1 + 224) + 4 * (int)v14 * (int)v5);
    v71 = ((v3 >> 3) & 0x1FF) + 1;
    while (1)
    {
      if ((int)v5 < 1)
        goto LABEL_40;
      v73 = v15;
      v16 = 0;
      LODWORD(v17) = 0;
      v18 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * v14) - (v5 >> 1) + 1;
      v19 = v5;
      do
      {
        v21 = *(_DWORD *)(a1 + 236);
        if ((int)(v18 + v16) >= v21)
          v22 = v21 - 1;
        else
          v22 = v18 + v16;
        if ((int)(v18 + v16) >= 0)
          v23 = v22;
        else
          v23 = 0;
        if ((int)v17 <= (int)v16)
          v17 = v16;
        else
          v17 = v17;
        if ((int)v17 < (int)v5)
        {
          while (v17 > 0xF || v23 != __b[v17])
          {
            if ((uint64_t)++v17 >= (int)v5)
              goto LABEL_16;
          }
          if (v17 > v16)
          {
            memcpy(*((void **)v77 + v16), *((const void **)v77 + v17), 8 * v4);
            LODWORD(v5) = *(_DWORD *)(a1 + 248);
          }
        }
LABEL_16:
        if ((int)v16 >= v19)
          v20 = v19;
        else
          v20 = v16;
        if ((_DWORD)v17 == (_DWORD)v5)
          v19 = v20;
        v78[v16] = *(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v23;
        __b[v16++] = v23;
      }
      while ((uint64_t)v16 < (int)v5);
      v24 = *(_DWORD *)(a1 + 240);
      if ((int)v5 > v19)
        break;
      v15 = v73;
LABEL_42:
      v25 = *(_QWORD *)(a1 + 120);
      v26 = *(_QWORD *)(a1 + 184);
      v27 = v26 * v14;
      *(double *)&v28 = *v15;
      v29 = v15[1];
      v30 = v77[0];
      v31 = (v24 - 4);
      if (v24 < 4)
      {
        v32 = 0;
        if (v24 > 0)
          goto LABEL_50;
        goto LABEL_13;
      }
      if (v31 < 0xC)
      {
        v33 = 0;
LABEL_47:
        v34 = (double *)(v25 + 8 * v33 + v26 * v14 + 16);
        v35 = (double *)(*((_QWORD *)&v30 + 1) + 8 * v33 + 16);
        v36 = (double *)(v30 + 8 * v33 + 16);
        do
        {
          v37 = *(v35 - 1) * v29 + *(v36 - 1) * *(double *)&v28;
          *(v34 - 2) = *(v35 - 2) * v29 + *(v36 - 2) * *(double *)&v28;
          *(v34 - 1) = v37;
          v38 = *v35;
          v39 = v35[1];
          v35 += 4;
          v40 = *v36;
          v41 = v36[1];
          v36 += 4;
          v33 += 4;
          *v34 = v38 * v29 + v40 * *(double *)&v28;
          v34[1] = v39 * v29 + v41 * *(double *)&v28;
          v34 += 4;
        }
        while (v33 <= v31);
        goto LABEL_49;
      }
      v33 = 0;
      v51 = (8 * v31) & 0x7FFFFFFE0;
      v52 = v25 + v27 + v51 + 32;
      v54 = v25 + v27 < (unint64_t)(*((_QWORD *)&v77[0] + 1) + v51 + 32) && *((_QWORD *)&v77[0] + 1) < v52;
      v55 = *(_QWORD *)&v77[0] + v51 + 32;
      if (*(_QWORD *)&v77[0] < v52 && v25 + v27 < v55)
        goto LABEL_47;
      if (v54)
        goto LABEL_47;
      v57 = (v31 >> 2) + 1;
      v33 = 4 * (v57 & 0x7FFFFFFE);
      v58 = (float64x2_t)vdupq_lane_s64(v28, 0);
      v59 = (double *)(v25 + v26 * v14);
      v60 = v57 & 0x7FFFFFFE;
      v61 = (const double *)*((_QWORD *)&v77[0] + 1);
      v62 = *(const double **)&v77[0];
      do
      {
        v79 = vld4q_f64(v62);
        v62 += 8;
        v80 = vld4q_f64(v61);
        v61 += 8;
        v81.val[0] = vmlaq_f64(vmulq_n_f64(v80.val[0], v29), v58, v79.val[0]);
        v81.val[1] = vmlaq_f64(vmulq_n_f64(v80.val[1], v29), v58, v79.val[1]);
        v81.val[2] = vmlaq_f64(vmulq_n_f64(v80.val[2], v29), v58, v79.val[2]);
        v81.val[3] = vmlaq_f64(vmulq_n_f64(v80.val[3], v29), v58, v79.val[3]);
        vst4q_f64(v59, v81);
        v59 += 8;
        v60 -= 2;
      }
      while (v60);
      if (v57 != (v57 & 0x7FFFFFFE))
        goto LABEL_47;
LABEL_49:
      v32 = v33;
      if ((int)v33 < v24)
      {
LABEL_50:
        v42 = v24 - v32;
        if (v42 < 0xA)
          goto LABEL_51;
        v63 = 8 * v32;
        v64 = v27 + v25 + 8 * v32;
        if ((unint64_t)(v64 - (8 * v32 + v30)) < 0x20)
          goto LABEL_51;
        if ((unint64_t)(v64 - (v63 + *((_QWORD *)&v30 + 1))) < 0x20)
          goto LABEL_51;
        v32 += v42 & 0xFFFFFFFFFFFFFFFCLL;
        v65 = (float64x2_t)vdupq_lane_s64(v28, 0);
        v66 = (float64x2_t *)(v25 + v63 + v26 * v14 + 16);
        v67 = (float64x2_t *)(v30 + v63 + 16);
        v68 = (float64x2_t *)(*((_QWORD *)&v30 + 1) + v63 + 16);
        v69 = v42 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v70 = vmlaq_f64(vmulq_n_f64(*v68, v29), v65, *v67);
          v66[-1] = vmlaq_f64(vmulq_n_f64(v68[-1], v29), v65, v67[-1]);
          *v66 = v70;
          v66 += 2;
          v67 += 2;
          v68 += 2;
          v69 -= 4;
        }
        while (v69);
        if (v42 != (v42 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          v43 = v24 - v32;
          v44 = 8 * v32;
          v45 = (double *)(v25 + v44 + v26 * v14);
          v46 = (double *)(*((_QWORD *)&v30 + 1) + v44);
          v47 = (double *)(v30 + v44);
          do
          {
            v48 = *v47++;
            v49 = v48;
            v50 = *v46++;
            *v45++ = v50 * v29 + v49 * *(double *)&v28;
            --v43;
          }
          while (v43);
        }
      }
LABEL_13:
      ++v14;
      v5 = *(int *)(a1 + 248);
      v15 += v5;
      if (v14 >= a2[1])
        return;
    }
    sub_100327E7C((uint64_t)&v75, &v78[v19], (uint64_t *)v77 + v19, v5 - v19, *(int **)(a1 + 200), *(_QWORD *)(a1 + 216), *(unsigned int *)(a1 + 232), v24, v71, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
    v15 = v73;
LABEL_40:
    v24 = *(_DWORD *)(a1 + 240);
    goto LABEL_42;
  }
}

void sub_100327E7C(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int *a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  uint64_t v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  int *v18;
  float *v19;
  int *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  int *v33;
  float *v34;
  int *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  if (a4 >= 2)
  {
    if (a11 < 1)
    {
      v11 = (a4 - 1);
      if (a8 >= 1)
      {
        v56 = 0;
        v57 = *a2;
        v58 = *a3;
        do
        {
          v59 = 0;
          v60 = a2[++v56];
          v61 = a3[v56];
          do
          {
            v62 = 8 * a5[v59];
            v63 = 8 * v59;
            *(_QWORD *)(v58 + v63) = *(_QWORD *)(v57 + v62);
            *(_QWORD *)(v61 + v63) = *(_QWORD *)(v60 + v62);
            ++v59;
          }
          while (a8 != v59);
          v58 = v61;
          v57 = v60;
        }
        while (v56 != v11);
      }
    }
    else
    {
      v24 = 0;
      LODWORD(v11) = a4 - 1;
      v25 = *a2;
      v26 = *a3;
      do
      {
        v27 = 0;
        v28 = v25;
        v29 = v26;
        v25 = a2[++v24];
        v26 = a3[v24];
        v30 = (_QWORD *)(v29 + 8);
        v31 = (_QWORD *)(v26 + 8);
        v32 = 1;
        v33 = a5 + 1;
        v34 = (float *)(a6 + 4);
        do
        {
          v35 = v33;
          v36 = v30;
          v37 = v31;
          v38 = v32;
          v39 = a5[v27];
          v40 = *(v34 - 1);
          v41 = *v34;
          v42 = 8 * v39;
          v43 = *(double *)(v28 + 8 * v39);
          v44 = 8 * ((int)v39 + a9);
          v45 = *(double *)(v28 + v44) * v41 + v43 * v40;
          v46 = *(double *)(v25 + v42);
          v47 = *(double *)(v25 + v44) * v41;
          v48 = 8 * v27;
          *(double *)(v29 + v48) = v45;
          *(double *)(v26 + v48) = v47 + v46 * v40;
          ++v27;
          v34 += 2;
          ++v33;
          v30 = v36 + 1;
          v31 = v37 + 1;
          ++v32;
        }
        while (a11 != v27);
        if (a11 < a8)
        {
          do
          {
            v49 = *v35++;
            *v36++ = *(_QWORD *)(v28 + 8 * v49);
            *v37++ = *(_QWORD *)(v25 + 8 * v49);
            ++v38;
          }
          while (v38 < a8);
        }
      }
      while (v24 != a4 - 1);
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((int)v11 < a4)
  {
    if (a11 < 1)
    {
      if (a8 >= 1)
      {
        v50 = v11;
        do
        {
          v51 = a2[v50];
          v52 = (_QWORD *)a3[v50];
          v53 = a8;
          v54 = a5;
          do
          {
            v55 = *v54++;
            *v52++ = *(_QWORD *)(v51 + 8 * v55);
            --v53;
          }
          while (v53);
          ++v50;
        }
        while ((int)v50 < a4);
      }
    }
    else
    {
      v11 = v11;
      v12 = (float *)(a6 + 4);
      do
      {
        v13 = 0;
        v14 = a2[v11];
        v15 = a3[v11];
        v16 = (_QWORD *)(v15 + 8);
        v17 = 1;
        v18 = a5 + 1;
        v19 = v12;
        do
        {
          v20 = v18;
          v21 = v16;
          v22 = v17;
          *(double *)(v15 + 8 * v13) = *(double *)(v14 + 8 * (a5[v13] + a9)) * *v19
                                     + *(double *)(v14 + 8 * a5[v13]) * *(v19 - 1);
          ++v13;
          v19 += 2;
          ++v18;
          ++v16;
          ++v17;
        }
        while (a11 != v13);
        if (a11 < a8)
        {
          do
          {
            v23 = *v20++;
            *v21++ = *(_QWORD *)(v14 + 8 * v23);
            ++v22;
          }
          while (v22 < a8);
        }
        ++v11;
      }
      while ((int)v11 < a4);
    }
  }
}

uint64_t sub_100328134(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453938;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_100328254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_100453978;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_100328454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_100328494(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1003284A8(uint64_t a1)
{
  sub_100328D84(a1);
  operator delete();
}

uint64_t sub_1003284CC(uint64_t result, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  signed int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  signed int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v41;
  BOOL v43;
  BOOL v45;
  BOOL v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int8x16_t *v51;
  uint64_t v52;
  int32x4_t *v53;
  int32x4_t *v54;
  int32x4_t *v55;
  int32x4_t *v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  uint64_t v61;
  int32x4_t *v62;
  int32x4_t *v63;
  int32x4_t *v64;
  int32x4_t *v65;
  _QWORD *v66;
  uint64_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  _BYTE *v76;
  uint64_t v77;
  int *v78;
  int *v79;
  int *v80;
  int *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  signed int v91;
  __int16 *v93;
  uint64_t v94;
  _DWORD v95[265];
  char v96;
  _DWORD __b[16];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _QWORD v106[17];
  int8x16x2_t v107;
  int8x16x4_t v108;

  v2 = result;
  v3 = *(_DWORD *)(result + 8);
  v4 = (*(_DWORD *)(result + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v5) = *(_DWORD *)(result + 248);
  if ((v5 * v4) >= 0x109)
    operator new[]();
  memset(v106, 0, 128);
  v104 = 0u;
  v105 = 0u;
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  if ((int)v5 >= 1)
  {
    result = (uint64_t)memset(__b, 255, 4 * v5);
    v6 = v4;
    if ((_DWORD)v5 == 1)
    {
      v7 = 0;
LABEL_9:
      v11 = &v95[v7 * v4];
      v12 = (_QWORD *)&v98 + v7;
      v13 = v5 - v7;
      do
      {
        *v12++ = v11;
        v11 = (_DWORD *)((char *)v11 + v6 * 4);
        --v13;
      }
      while (v13);
      goto LABEL_11;
    }
    v7 = v5 & 0xFFFFFFFE;
    v8 = (_QWORD *)&v98 + 1;
    v9 = v7;
    v10 = v95;
    do
    {
      *(v8 - 1) = v10;
      *v8 = &v10[v6];
      v10 += 2 * v4;
      v8 += 2;
      v9 -= 2;
    }
    while (v9);
    if (v7 != v5)
      goto LABEL_9;
  }
LABEL_11:
  v14 = *a2;
  if ((int)v14 < a2[1])
  {
    v91 = ((v3 >> 3) & 0x1FF) + 1;
    v15 = *(_QWORD *)(v2 + 224) + 2 * (int)v14 * (int)v5;
    v16.i64[0] = 0x20000000200000;
    v16.i64[1] = 0x20000000200000;
    v17 = 0uLL;
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    v19 = (int8x16_t)xmmword_1003BC970;
    v20 = (int8x16_t)xmmword_1003BC960;
    do
    {
      if ((int)v5 >= 1)
      {
        v93 = (__int16 *)v15;
        v94 = v14;
        v21 = 0;
        LODWORD(v15) = 0;
        v22 = *(_DWORD *)(*(_QWORD *)(v2 + 208) + 4 * v14) - (v5 >> 1) + 1;
        v23 = v5;
        do
        {
          v25 = *(_DWORD *)(v2 + 236);
          if ((int)(v22 + v21) >= v25)
            v26 = v25 - 1;
          else
            v26 = v22 + v21;
          if ((int)(v22 + v21) >= 0)
            v27 = v26;
          else
            v27 = 0;
          if ((int)v15 <= (int)v21)
            v15 = v21;
          else
            v15 = v15;
          if ((int)v15 < (int)v5)
          {
            while ((unint64_t)v15 > 0xF || v27 != __b[v15])
            {
              if (++v15 >= (int)v5)
                goto LABEL_16;
            }
            if (v15 > v21)
            {
              result = (uint64_t)memcpy(*((void **)&v98 + v21), *((const void **)&v98 + v15), 4 * v4);
              v20 = (int8x16_t)xmmword_1003BC960;
              v19 = (int8x16_t)xmmword_1003BC970;
              v18.i64[0] = 0xFF000000FFLL;
              v18.i64[1] = 0xFF000000FFLL;
              v17 = 0uLL;
              v16.i64[0] = 0x20000000200000;
              v16.i64[1] = 0x20000000200000;
              LODWORD(v5) = *(_DWORD *)(v2 + 248);
            }
          }
LABEL_16:
          if ((int)v21 >= v23)
            v24 = v23;
          else
            v24 = v21;
          if ((_DWORD)v15 == (_DWORD)v5)
            v23 = v24;
          v106[v21] = *(_QWORD *)(v2 + 24) + **(_QWORD **)(v2 + 80) * v27;
          __b[v21++] = v27;
        }
        while ((uint64_t)v21 < (int)v5);
        v28 = *(_DWORD *)(v2 + 240);
        if ((int)v5 <= v23)
        {
          v15 = (uint64_t)v93;
          v14 = v94;
          if ((int)v28 < 1)
            goto LABEL_13;
          goto LABEL_43;
        }
        result = sub_100328B0C((uint64_t)&v96, (uint64_t)&v106[v23], (uint64_t)&v98 + 8 * v23, (int)v5 - v23, *(_QWORD *)(v2 + 200), *(__int16 **)(v2 + 216), *(_DWORD *)(v2 + 232), v28, v91, *(_DWORD *)(v2 + 252), *(_DWORD *)(v2 + 256));
        v20 = (int8x16_t)xmmword_1003BC960;
        v19 = (int8x16_t)xmmword_1003BC970;
        v18.i64[0] = 0xFF000000FFLL;
        v18.i64[1] = 0xFF000000FFLL;
        v17 = 0uLL;
        v16.i64[0] = 0x20000000200000;
        v16.i64[1] = 0x20000000200000;
        v15 = (uint64_t)v93;
        v14 = v94;
      }
      v28 = *(_DWORD *)(v2 + 240);
      if ((int)v28 < 1)
        goto LABEL_13;
LABEL_43:
      v29 = *(_QWORD *)(v2 + 120);
      v30 = *(_QWORD *)(v2 + 184);
      v31 = *(__int16 *)v15;
      v32 = *(__int16 *)(v15 + 2);
      v33 = *(__int16 *)(v15 + 4);
      v34 = *(__int16 *)(v15 + 6);
      v35 = v98;
      result = v28;
      v36 = v99;
      if (v28 < 8)
      {
        v37 = 0;
LABEL_80:
        result -= v37;
        v76 = (_BYTE *)(v29 + v37 + v30 * v14);
        v77 = 4 * v37;
        v78 = (int *)(*((_QWORD *)&v36 + 1) + v77);
        v79 = (int *)(v36 + v77);
        v80 = (int *)(*((_QWORD *)&v35 + 1) + v77);
        v81 = (int *)(v35 + v77);
        do
        {
          v83 = *v81++;
          v82 = v83;
          v85 = *v80++;
          v84 = v85;
          v87 = *v79++;
          v86 = v87;
          v88 = *v78++;
          v89 = v84 * v32 + v82 * v31 + v86 * v33 + v88 * v34 + 0x200000;
          v90 = (v89 >> 22) & ~(v89 >> 31);
          if (v90 >= 255)
            LOBYTE(v90) = -1;
          *v76++ = v90;
          --result;
        }
        while (result);
        goto LABEL_13;
      }
      v37 = 0;
      v38 = v29 + v30 * v14;
      v39 = v29 + v30 * v14 + v28;
      v41 = v38 < *((_QWORD *)&v98 + 1) + 4 * (unint64_t)v28 && *((_QWORD *)&v98 + 1) < v39;
      v43 = v38 < (unint64_t)v99 + 4 * v28 && (unint64_t)v99 < v39;
      v45 = v38 < *((_QWORD *)&v99 + 1) + 4 * (unint64_t)v28 && *((_QWORD *)&v99 + 1) < v39;
      v46 = (unint64_t)v98 >= v39 || v38 >= (unint64_t)v98 + 4 * v28;
      if (!v46 || v41 || v43 || v45)
        goto LABEL_80;
      v47 = vdupq_n_s32(v31);
      v48 = vdupq_n_s32(v32);
      v49 = vdupq_n_s32(v33);
      v50 = vdupq_n_s32(v34);
      if (v28 >= 0x10)
      {
        v37 = v28 & 0x7FFFFFF0;
        v51 = (int8x16_t *)(v29 + v30 * v14);
        v52 = v28 & 0xFFFFFFF0;
        v53 = (int32x4_t *)*((_QWORD *)&v99 + 1);
        v54 = (int32x4_t *)v99;
        v55 = (int32x4_t *)*((_QWORD *)&v98 + 1);
        v56 = (int32x4_t *)v98;
        do
        {
          v58 = v54[2];
          v57 = v54[3];
          v59 = *v54;
          v60 = v54[1];
          v54 += 4;
          v108.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v55[1], v48), v56[1], v47), v60, v49), v53[1], v50), v16), 0x16uLL), v17), v18);
          v108.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(*v55, v48), *v56, v47), v59, v49), *v53, v50), v16), 0x16uLL), v17), v18);
          v108.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v55[2], v48), v56[2], v47), v58, v49), v53[2], v50), v16), 0x16uLL), v17), v18);
          v108.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v55[3], v48), v56[3], v47), v57, v49), v53[3], v50), v16), 0x16uLL), v17), v18);
          *v51++ = vqtbl4q_s8(v108, v20);
          v56 += 4;
          v55 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (v37 == result)
          goto LABEL_13;
        if ((result & 8) == 0)
          goto LABEL_80;
      }
      else
      {
        v37 = 0;
      }
      v61 = v37;
      v37 = result & 0xFFFFFFF8;
      v62 = (int32x4_t *)(v35 + 4 * v61);
      v63 = (int32x4_t *)(*((_QWORD *)&v35 + 1) + 4 * v61);
      v64 = (int32x4_t *)(v36 + 4 * v61);
      v65 = (int32x4_t *)(*((_QWORD *)&v36 + 1) + 4 * v61);
      v66 = (_QWORD *)(v29 + v61 + v30 * v14);
      v67 = v61 - v37;
      do
      {
        v69 = *v62;
        v68 = v62[1];
        v62 += 2;
        v71 = *v63;
        v70 = v63[1];
        v63 += 2;
        v72 = *v64;
        v73 = v64[1];
        v64 += 2;
        v75 = *v65;
        v74 = v65[1];
        v65 += 2;
        v107.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v70, v48), v68, v47), v73, v49), v74, v50), v16), 0x16uLL), v17), v18);
        v107.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v71, v48), v69, v47), v72, v49), v75, v50), v16), 0x16uLL), v17), v18);
        *v66++ = vqtbl2q_s8(v107, v19).u64[0];
        v67 += 8;
      }
      while (v67);
      if (v37 != result)
        goto LABEL_80;
LABEL_13:
      ++v14;
      v5 = *(int *)(v2 + 248);
      v15 += 2 * v5;
    }
    while (v14 < a2[1]);
  }
  return result;
}

uint64_t sub_100328B0C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __int16 *a6, unsigned int a7, int a8, signed int a9, int a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  signed int v22;
  int v23;
  unsigned int v24;
  signed int v25;
  int v26;
  signed int v27;
  signed int v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;

  if (a4 >= 1)
  {
    v11 = 0;
    v12 = 2 * a9;
    if (a9 <= 1)
      v13 = 1;
    else
      v13 = a9;
    v14 = a4;
    result = a9;
    do
    {
      LODWORD(v16) = 0;
      v17 = *(_QWORD *)(a2 + 8 * v11);
      v18 = *(_QWORD *)(a3 + 8 * v11);
      v19 = a10;
      while (1)
      {
        if ((int)v16 < v19)
        {
          v16 = (int)v16;
          do
          {
            v20 = *(_DWORD *)(a5 + 4 * v16);
            v21 = v20 - a9;
            v22 = v20 - a9;
            if (v20 - a9 >= a7)
            {
              v23 = (v21 & ~(v21 >> 31)) + a9 - v20;
              v24 = (v23 - (v23 != 0)) / v13;
              if ((v21 & ~(v21 >> 31)) + a9 - v20)
                ++v24;
              v22 = v20 + v24 * a9;
              do
                v22 -= a9;
              while (v22 >= (int)a7);
            }
            v25 = *(_DWORD *)(a5 + 4 * v16);
            if (v20 >= a7)
            {
              v25 = v20 + a9 + a9 * ((v20 >> 31) + ((v20 & ~((int)v20 >> 31)) - (v20 + (v20 >> 31))) / v13);
              do
                v25 -= a9;
              while (v25 >= (int)a7);
            }
            v26 = v20 + a9;
            v27 = v12 + v21;
            if ((int)v12 + v21 >= a7)
            {
              v27 = v20
                  + a9
                  * ((v26 >> 31) + ((v26 & ~(v26 >> 31)) - (v26 + (v26 >> 31))) / v13 + 2);
              do
                v27 -= a9;
              while (v27 >= (int)a7);
            }
            v28 = 3 * a9 + v21;
            if (v28 >= a7)
            {
              v28 = v20
                  + a9
                  * ((((v26 + a9) & ~((v26 + a9) >> 31)) - (v26 + a9 + ((v26 + a9) >> 31))) / v13
                   + ((v26 + a9) >> 31)
                   + 3);
              do
                v28 -= a9;
              while (v28 >= (int)a7);
            }
            *(_DWORD *)(v18 + 4 * v16++) = *a6 * *(unsigned __int8 *)(v17 + v22)
                                         + a6[1] * *(unsigned __int8 *)(v17 + v25)
                                         + a6[2] * *(unsigned __int8 *)(v17 + v27)
                                         + a6[3] * *(unsigned __int8 *)(v17 + v28);
            a6 += 4;
          }
          while (v16 != v19);
          LODWORD(v16) = v19;
        }
        if (v19 == a8)
          break;
        v19 = a8;
        if ((int)v16 < a11)
        {
          v29 = (int)v16;
          v30 = 4 * (int)v16;
          v31 = (int *)(a5 + v30);
          v32 = (_DWORD *)(v18 + v30);
          v33 = a11 - v29;
          do
          {
            v34 = *v31++;
            *v32++ = *a6 * *(unsigned __int8 *)(v17 + v34 - a9)
                   + a6[1] * *(unsigned __int8 *)(v17 + v34)
                   + a6[2] * *(unsigned __int8 *)(v17 + v34 + a9)
                   + a6[3] * *(unsigned __int8 *)(v17 + v34 + v12);
            a6 += 4;
            --v33;
          }
          while (v33);
          LODWORD(v16) = a11;
          v19 = a8;
        }
      }
      a6 -= 4 * a8;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t sub_100328D84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453978;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_100328EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_1004539B8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_1003290A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_1003290E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1003290F8(uint64_t a1)
{
  sub_100329AA0(a1);
  operator delete();
}

void sub_10032911C(uint64_t a1, int *a2, double a3, double a4, double a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  unsigned int v10;
  signed int v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t **v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t **v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int32 *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  signed int v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned __int32 *v35;
  _DWORD v36[265];
  char v37;
  char v38;
  _DWORD __b[16];
  float32x4_t *v40[16];
  _QWORD v41[17];

  v10 = *(_DWORD *)(a1 + 8);
  v11 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v12) = *(_DWORD *)(a1 + 248);
  if ((v12 * v11) >= 0x109)
    operator new[]();
  v13 = 0.0;
  memset(v41, 0, 128);
  memset(v40, 0, sizeof(v40));
  if ((int)v12 >= 1)
  {
    memset(__b, 255, 4 * v12);
    v14 = 4 * v11;
    if ((_DWORD)v12 == 1)
    {
      v15 = 0;
LABEL_9:
      v19 = (float32x4_t *)&v36[v15 * v11];
      v20 = &v40[v15];
      v21 = v12 - v15;
      do
      {
        *v20++ = v19;
        v19 = (float32x4_t *)((char *)v19 + v14);
        --v21;
      }
      while (v21);
      goto LABEL_11;
    }
    v15 = v12 & 0xFFFFFFFE;
    v16 = &v40[1];
    v17 = v15;
    v18 = (float32x4_t *)v36;
    do
    {
      *(v16 - 1) = v18;
      *v16 = (float32x4_t *)((char *)v18 + v14);
      v18 = (float32x4_t *)((char *)v18 + 8 * v11);
      v16 += 2;
      v17 -= 2;
    }
    while (v17);
    if (v15 != v12)
      goto LABEL_9;
  }
LABEL_11:
  v22 = *a2;
  if ((int)v22 < a2[1])
  {
    v23 = (unsigned __int32 *)(*(_QWORD *)(a1 + 224) + 4 * (int)v22 * (int)v12);
    v33 = ((v10 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v12 >= 1)
      {
        v35 = v23;
        v24 = 0;
        LODWORD(v25) = 0;
        v26 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * v22) - (v12 >> 1) + 1;
        v27 = v12;
        do
        {
          v29 = *(_DWORD *)(a1 + 236);
          if ((int)(v26 + v24) >= v29)
            v30 = v29 - 1;
          else
            v30 = v26 + v24;
          if ((int)(v26 + v24) >= 0)
            v31 = v30;
          else
            v31 = 0;
          if ((int)v25 <= (int)v24)
            v25 = v24;
          else
            v25 = v25;
          if ((int)v25 < (int)v12)
          {
            while (v25 > 0xF || v31 != __b[v25])
            {
              if ((uint64_t)++v25 >= (int)v12)
                goto LABEL_15;
            }
            if (v25 > v24)
            {
              memcpy(v40[v24], v40[v25], 4 * v11);
              LODWORD(v12) = *(_DWORD *)(a1 + 248);
            }
          }
LABEL_15:
          if ((int)v24 >= v27)
            v28 = v27;
          else
            v28 = v24;
          if ((_DWORD)v25 == (_DWORD)v12)
            v27 = v28;
          v41[v24] = *(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v31;
          __b[v24++] = v31;
        }
        while ((uint64_t)v24 < (int)v12);
        v32 = *(unsigned int *)(a1 + 240);
        if ((int)v12 <= v27)
        {
          v23 = v35;
          goto LABEL_41;
        }
        sub_1003294C0(v13, *(float *)&a4, *(float *)&a5, (uint64_t)&v38, (uint64_t)&v41[v27], (uint64_t)&v40[v27], v12 - v27, *(_QWORD *)(a1 + 200), *(float **)(a1 + 216), *(_DWORD *)(a1 + 232), v32, v33, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
        v23 = v35;
      }
      v32 = *(unsigned int *)(a1 + 240);
LABEL_41:
      sub_100329738(v13, a4, a5, a6, a7, a8, a9, (uint64_t)&v37, v40, (uint16x8_t *)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 184) * v22++), v23, v32);
      v12 = *(int *)(a1 + 248);
      v23 += v12;
    }
    while (v22 < a2[1]);
  }
}

void sub_100329484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

void sub_1003294C0(double a1, float a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, float *a9, unsigned int a10, int a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  float v23;
  unsigned int v24;
  float v25;
  unsigned int v26;
  int v27;
  signed int v28;
  int v29;
  unsigned int v30;
  signed int v31;
  int v32;
  int v33;
  signed int v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  float v42;
  unsigned int v43;
  float v44;

  if (a7 >= 1)
  {
    v14 = 0;
    v15 = 2 * a12;
    if (a12 <= 1)
      v16 = 1;
    else
      v16 = a12;
    v17 = a7;
    do
    {
      LODWORD(v18) = 0;
      v19 = *(_QWORD *)(a5 + 8 * v14);
      v20 = *(_QWORD *)(a6 + 8 * v14);
      v21 = a13;
      while (1)
      {
        if ((int)v18 < v21)
        {
          v18 = (int)v18;
          do
          {
            v26 = *(_DWORD *)(a8 + 4 * v18);
            v27 = v26 - a12;
            v28 = v26 - a12;
            if (v26 - a12 >= a10)
            {
              v29 = (v27 & ~(v27 >> 31)) + a12 - v26;
              v30 = (v29 - (v29 != 0)) / v16;
              if ((v27 & ~(v27 >> 31)) + a12 - v26)
                ++v30;
              v28 = v26 + v30 * a12;
              do
                v28 -= a12;
              while (v28 >= (int)a10);
            }
            v31 = *(_DWORD *)(a8 + 4 * v18);
            if (v26 >= a10)
            {
              v31 = v26 + a12 + a12 * ((v26 >> 31) + ((v26 & ~((int)v26 >> 31)) - (v26 + (v26 >> 31))) / v16);
              do
                v31 -= a12;
              while (v31 >= (int)a10);
            }
            v32 = v26 + a12;
            v33 = v15 + v27;
            if (v15 + v27 >= a10)
            {
              v33 = v26
                  + a12
                  * ((v32 >> 31) + ((v32 & ~(v32 >> 31)) - (v32 + (v32 >> 31))) / v16 + 2);
              do
                v33 -= a12;
              while (v33 >= (int)a10);
            }
            v34 = 3 * a12 + v27;
            if (v34 >= a10)
            {
              v34 = v26
                  + a12
                  * ((((v32 + a12) & ~((int)(v32 + a12) >> 31)) - (v32 + a12 + ((v32 + a12) >> 31))) / v16
                   + ((v32 + a12) >> 31)
                   + 3);
              do
                v34 -= a12;
              while (v34 >= (int)a10);
            }
            LOWORD(a2) = *(_WORD *)(v19 + 2 * v28);
            LOWORD(a3) = *(_WORD *)(v19 + 2 * v31);
            *(float *)&v22 = (float)LODWORD(a3);
            v23 = (float)((float)((float)LODWORD(a2) * *a9) + 0.0) + (float)(*(float *)&v22 * a9[1]);
            LOWORD(v22) = *(_WORD *)(v19 + 2 * v33);
            *(float *)&v24 = (float)v22;
            v25 = v23 + (float)(*(float *)&v24 * a9[2]);
            LOWORD(v24) = *(_WORD *)(v19 + 2 * v34);
            a3 = (float)v24;
            a2 = v25 + (float)(a3 * a9[3]);
            *(float *)(v20 + 4 * v18++) = a2;
            a9 += 4;
          }
          while (v18 != v21);
          LODWORD(v18) = v21;
        }
        if (v21 == a11)
          break;
        v21 = a11;
        if ((int)v18 < a14)
        {
          v35 = (int)v18;
          v36 = 4 * (int)v18;
          v37 = (int *)(a8 + v36);
          v38 = (float *)(v20 + v36);
          v39 = a14 - v35;
          do
          {
            v40 = *v37++;
            LOWORD(a2) = *(_WORD *)(v19 + 2 * (int)(v40 - a12));
            LOWORD(a3) = *(_WORD *)(v19 + 2 * v40);
            *(float *)&v41 = a9[1] * (float)LODWORD(a3);
            v42 = *(float *)&v41 + (float)((float)LODWORD(a2) * *a9);
            LOWORD(v41) = *(_WORD *)(v19 + 2 * (int)(v40 + a12));
            *(float *)&v43 = (float)v41;
            v44 = v42 + (float)(*(float *)&v43 * a9[2]);
            LOWORD(v43) = *(_WORD *)(v19 + 2 * ((int)v40 + v15));
            a3 = (float)v43;
            a2 = v44 + (float)(a3 * a9[3]);
            *v38++ = a2;
            a9 += 4;
            --v39;
          }
          while (v39);
          LODWORD(v18) = a14;
          v21 = a11;
        }
      }
      a9 -= 4 * a11;
      ++v14;
    }
    while (v14 != v17);
  }
}

void sub_100329738(double a1, double a2, double a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, uint64_t a8, float32x4_t **a9, uint16x8_t *a10, unsigned __int32 *a11, uint64_t a12)
{
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  int v16;
  int v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  uint64_t v23;
  __int16 *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  int v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t *v40;
  float32x4_t *v41;
  uint16x8_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  unsigned __int8 v51;
  float32x4_t v52;
  unsigned __int8 v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint16x8_t *v93;
  uint16x8_t *v94;
  float32x4_t *v95;
  float32x4_t *v96;
  float32x4_t *v97;
  float32x4_t *v98;
  float32x4_t *v99;
  float32x4_t *v100;
  float32x4_t *v101;
  float32x4_t *v102;
  int v103;
  int v104;
  float32x4_t *v105;
  float32x4_t *v106;
  float32x4_t *v107;
  float32x4_t *v108;
  float32x4_t *v109;
  float32x4_t *v110;
  float32x4_t *v111;
  float32x4_t *v112;
  uint16x8_t *v113;
  uint16x8_t *v114;

  a4.n128_u32[0] = *a11;
  a5.n128_u32[0] = a11[1];
  a6.n128_u32[0] = a11[2];
  a7.n128_u32[0] = a11[3];
  v13 = *a9;
  v12 = a9[1];
  v15 = a9[2];
  v14 = a9[3];
  v16 = 0;
  v17 = a12 - 8;
  if ((int)a12 >= 8)
  {
    v34 = (float32x4_t)vdupq_lane_s32((int32x2_t)a5.n128_u64[0], 0);
    v35 = (float32x4_t)vdupq_lane_s32((int32x2_t)a6.n128_u64[0], 0);
    v36 = v14 + 1;
    v37 = (float32x4_t)vdupq_lane_s32((int32x2_t)a7.n128_u64[0], 0);
    v38 = v15 + 1;
    v39 = v12 + 1;
    v40 = v13 + 1;
    v41 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    v42 = a10;
    do
    {
      v43 = v40[-1];
      v44 = *v40;
      v45 = v39[-1];
      v46 = *v39;
      v47 = v38[-1];
      v48 = *v38;
      v49 = v36[-1];
      v50 = *v36;
      v51 = atomic_load((unsigned __int8 *)qword_10048AA40);
      if ((v51 & 1) == 0)
      {
        v93 = a10;
        v95 = v14;
        v89 = a12;
        v91 = v16;
        v97 = v15;
        v99 = v12;
        v101 = v13;
        v103 = v17;
        v105 = v36;
        v107 = v38;
        v109 = v39;
        v111 = v40;
        v113 = v42;
        v85 = a5;
        v87 = a4;
        v83 = a6;
        v79 = v34;
        v81 = a7;
        v75 = v37;
        v77 = v35;
        v71 = v39[-1];
        v73 = v40[-1];
        v67 = v36[-1];
        v69 = v38[-1];
        v63 = *v39;
        v65 = *v40;
        v59 = *v36;
        v61 = *v38;
        v54 = __cxa_guard_acquire(qword_10048AA40);
        v50 = v59;
        v48 = v61;
        v46 = v63;
        v44 = v65;
        v49 = v67;
        v47 = v69;
        v45 = v71;
        v43 = v73;
        v37 = v75;
        v35 = v77;
        v34 = v79;
        a7 = v81;
        *(_QWORD *)&v55 = 0x3F0000003F000000;
        *((_QWORD *)&v55 + 1) = 0x3F0000003F000000;
        a6 = v83;
        a5 = v85;
        a4 = v87;
        v40 = v111;
        v42 = v113;
        v41 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v38 = v107;
        v39 = v109;
        v36 = v105;
        v17 = v103;
        v12 = v99;
        v13 = v101;
        v14 = v95;
        v15 = v97;
        a12 = v89;
        v16 = v91;
        a10 = v93;
        if (v54)
        {
          xmmword_10048AA30 = v55;
          __cxa_guard_release(qword_10048AA40);
          v50 = v59;
          v48 = v61;
          v46 = v63;
          v44 = v65;
          v49 = v67;
          v47 = v69;
          v45 = v71;
          v43 = v73;
          v37 = v75;
          v35 = v77;
          v34 = v79;
          a7 = v81;
          a6 = v83;
          a5 = v85;
          a4 = v87;
          v40 = v111;
          v42 = v113;
          v41 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v38 = v107;
          v39 = v109;
          v36 = v105;
          v17 = v103;
          v12 = v99;
          v13 = v101;
          v14 = v95;
          v15 = v97;
          a12 = v89;
          v16 = v91;
          a10 = v93;
        }
      }
      v52 = v41[163];
      v53 = atomic_load((unsigned __int8 *)qword_10048AA40);
      if ((v53 & 1) == 0)
      {
        v94 = a10;
        v96 = v14;
        v90 = a12;
        v92 = v16;
        v98 = v15;
        v100 = v12;
        v102 = v13;
        v104 = v17;
        v106 = v36;
        v108 = v38;
        v110 = v39;
        v112 = v40;
        v114 = v42;
        v86 = a5;
        v88 = a4;
        v84 = a6;
        v80 = v34;
        v82 = a7;
        v76 = v37;
        v78 = v35;
        v72 = v45;
        v74 = v43;
        v68 = v49;
        v70 = v47;
        v64 = v46;
        v66 = v44;
        v60 = v50;
        v62 = v48;
        v58 = v41[163];
        v56 = __cxa_guard_acquire(qword_10048AA40);
        v52 = v58;
        v50 = v60;
        v48 = v62;
        v46 = v64;
        v44 = v66;
        v49 = v68;
        v47 = v70;
        v45 = v72;
        v43 = v74;
        v37 = v76;
        v35 = v78;
        v34 = v80;
        *(_QWORD *)&v57 = 0x3F0000003F000000;
        *((_QWORD *)&v57 + 1) = 0x3F0000003F000000;
        a7 = v82;
        a6 = v84;
        a5 = v86;
        a4 = v88;
        v40 = v112;
        v42 = v114;
        v41 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v38 = v108;
        v39 = v110;
        v36 = v106;
        v17 = v104;
        v12 = v100;
        v13 = v102;
        v14 = v96;
        v15 = v98;
        a12 = v90;
        v16 = v92;
        a10 = v94;
        if (v56)
        {
          xmmword_10048AA30 = v57;
          __cxa_guard_release(qword_10048AA40);
          v52 = v58;
          v50 = v60;
          v48 = v62;
          v46 = v64;
          v44 = v66;
          v49 = v68;
          v47 = v70;
          v45 = v72;
          v43 = v74;
          v37 = v76;
          v35 = v78;
          v34 = v80;
          a7 = v82;
          a6 = v84;
          a5 = v86;
          a4 = v88;
          v40 = v112;
          v42 = v114;
          v41 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v38 = v108;
          v39 = v110;
          v36 = v106;
          v17 = v104;
          v12 = v100;
          v13 = v102;
          v14 = v96;
          v15 = v98;
          a12 = v90;
          v16 = v92;
          a10 = v94;
        }
      }
      *v42++ = vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v43, a4.n128_f32[0]), v45, v34), v47, v35), v49, v37), v52))), vcvtq_u32_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v44, a4.n128_f32[0]), v46, v34), v48, v35), v50, v37), v41[163])));
      v16 += 8;
      v36 += 2;
      v38 += 2;
      v39 += 2;
      v40 += 2;
    }
    while (v17 >= v16);
  }
  if (v16 < (int)a12)
  {
    v18 = v16;
    v19 = &v13->f32[v18];
    v20 = &v12->f32[v18];
    v21 = &v15->f32[v18];
    v22 = &v14->f32[v18];
    v23 = (int)a12 - (uint64_t)v16;
    v24 = &a10->i16[v16];
    do
    {
      v25 = *v20++;
      v26 = v25;
      v27 = *v19++;
      v28 = (float)(a5.n128_f32[0] * v26) + (float)(v27 * a4.n128_f32[0]);
      v29 = *v21++;
      v30 = v28 + (float)(v29 * a6.n128_f32[0]);
      v31 = *v22++;
      v32 = rintf(v30 + (float)(v31 * a7.n128_f32[0]));
      v33 = (uint64_t)v32 & ~((int)(uint64_t)v32 >> 31);
      if (v33 >= 0xFFFF)
        LOWORD(v33) = -1;
      *v24++ = v33;
      --v23;
    }
    while (v23);
  }
}

uint64_t sub_100329AA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_1004539B8;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_100329BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_1004539F8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_100329DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_100329E00(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100329E14(uint64_t a1)
{
  sub_10032A9EC(a1);
  operator delete();
}

_DWORD *sub_100329E38(_DWORD *result, int *a2, double a3, double a4, double a5)
{
  _DWORD *v5;
  unsigned int v6;
  signed int v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  signed int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _WORD *v37;
  uint64_t v38;
  float *v39;
  int *v40;
  float *v41;
  float *v42;
  float v43;
  float v44;
  float v45;
  float v46;
  int v47;
  float v48;
  uint64_t v49;
  uint64_t __n;
  uint64_t v52;
  uint64_t v53;
  _DWORD v54[265];
  char v55;
  char v56;
  _DWORD __b[16];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[17];

  v5 = result;
  v6 = result[2];
  v7 = (result[60] + 15) & 0xFFFFFFF0;
  LODWORD(v8) = result[62];
  if ((v8 * v7) >= 0x109)
    operator new[]();
  v9 = 0.0;
  memset(v66, 0, 128);
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  if ((int)v8 >= 1)
  {
    result = memset(__b, 255, 4 * v8);
    v10 = v7;
    if ((_DWORD)v8 == 1)
    {
      v11 = 0;
LABEL_9:
      v15 = &v54[v11 * v7];
      v16 = (_QWORD *)&v58 + v11;
      v17 = v8 - v11;
      do
      {
        *v16++ = v15;
        v15 = (_DWORD *)((char *)v15 + v10 * 4);
        --v17;
      }
      while (v17);
      goto LABEL_11;
    }
    v11 = v8 & 0xFFFFFFFE;
    v12 = (_QWORD *)&v58 + 1;
    v13 = v11;
    v14 = v54;
    do
    {
      *(v12 - 1) = v14;
      *v12 = &v14[v10];
      v14 += 2 * v7;
      v12 += 2;
      v13 -= 2;
    }
    while (v13);
    if (v11 != v8)
      goto LABEL_9;
  }
LABEL_11:
  if (*a2 < a2[1])
  {
    v53 = *((_QWORD *)v5 + 28) + 4 * *a2 * (int)v8;
    __n = 4 * v7;
    v18 = *a2;
    do
    {
      if ((int)v8 >= 1)
      {
        v19 = 0;
        LODWORD(v20) = 0;
        v21 = *(_DWORD *)(*((_QWORD *)v5 + 26) + 4 * v18) - (v8 >> 1) + 1;
        v22 = v8;
        do
        {
          v24 = v5[59];
          if ((int)(v21 + v19) >= v24)
            v25 = v24 - 1;
          else
            v25 = v21 + v19;
          if ((int)(v21 + v19) >= 0)
            v26 = v25;
          else
            v26 = 0;
          if ((int)v20 <= (int)v19)
            v20 = v19;
          else
            v20 = v20;
          if ((int)v20 < (int)v8)
          {
            while (v20 > 0xF || v26 != __b[v20])
            {
              if ((uint64_t)++v20 >= (int)v8)
                goto LABEL_16;
            }
            if (v20 > v19)
            {
              memcpy(*((void **)&v58 + v19), *((const void **)&v58 + v20), __n);
              LODWORD(v8) = v5[62];
            }
          }
LABEL_16:
          if ((int)v19 >= v22)
            v23 = v22;
          else
            v23 = v19;
          if ((_DWORD)v20 == (_DWORD)v8)
            v22 = v23;
          v66[v19] = *((_QWORD *)v5 + 3) + **((_QWORD **)v5 + 10) * v26;
          __b[v19++] = v26;
        }
        while ((uint64_t)v19 < (int)v8);
        v27 = v5[60];
        if ((int)v8 <= v22)
          goto LABEL_41;
        sub_10032A298(v9, a4, a5, (uint64_t)&v55, (uint64_t)&v66[v22], (uint64_t)&v58 + 8 * v22, v8 - v22, *((_QWORD *)v5 + 25), *((_QWORD *)v5 + 27), v5[58], v27, ((v6 >> 3) & 0x1FF) + 1, v5[63], v5[64]);
      }
      v27 = v5[60];
LABEL_41:
      v28 = *((_QWORD *)v5 + 15);
      v29 = *((_QWORD *)v5 + 23);
      v52 = v18;
      v30 = *(float *)v53;
      v31 = *(float *)(v53 + 4);
      v32 = *(float *)(v53 + 8);
      v33 = *(float *)(v53 + 12);
      v34 = v58;
      v35 = v59;
      result = (_DWORD *)sub_10032A530((uint64_t)&v56, (float32x4_t **)&v58, (int16x8_t *)(v28 + v29 * v18), (const float *)v53, v27);
      if ((int)result < v27)
      {
        v36 = v27 - (uint64_t)(int)result;
        v37 = (_WORD *)(v28 + v29 * v18 + 2 * (int)result);
        v38 = 4 * (int)result;
        v39 = (float *)(*((_QWORD *)&v35 + 1) + v38);
        v40 = (int *)(v35 + v38);
        v41 = (float *)(*((_QWORD *)&v34 + 1) + v38);
        v42 = (float *)(v34 + v38);
        do
        {
          v43 = *v41++;
          v44 = v43;
          v45 = *v42++;
          v46 = (float)(v31 * v44) + (float)(v45 * v30);
          v47 = *v40++;
          LODWORD(a4) = v47;
          v48 = *v39++;
          *(float *)&a5 = v48;
          *(float *)&v9 = rintf((float)(v46 + (float)(*(float *)&a4 * v32)) + (float)(v48 * v33));
          v49 = (uint64_t)*(float *)&v9;
          if ((int)(uint64_t)*(float *)&v9 <= -32768)
            LODWORD(v49) = -32768;
          if ((int)v49 >= 0x7FFF)
            LOWORD(v49) = 0x7FFF;
          *v37++ = v49;
          --v36;
        }
        while (v36);
      }
      ++v18;
      v8 = (int)v5[62];
      v53 += 4 * v8;
    }
    while (v52 + 1 < a2[1]);
  }
  return result;
}

void sub_10032A264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18 != a12)
  {
    if (a18)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

void sub_10032A298(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned int a10, int a11, unsigned int a12, int a13, int a14)
{
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int16x4_t v22;
  int16x4_t v23;
  unsigned int v24;
  int v25;
  signed int v26;
  int v27;
  unsigned int v28;
  signed int v29;
  int v30;
  int v31;
  signed int v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int16x4_t v39;
  int16x4_t v40;

  if (a7 >= 1)
  {
    v14 = 0;
    v15 = 2 * a12;
    if (a12 <= 1)
      v16 = 1;
    else
      v16 = a12;
    v17 = a7;
    do
    {
      LODWORD(v18) = 0;
      v19 = *(_QWORD *)(a5 + 8 * v14);
      v20 = *(_QWORD *)(a6 + 8 * v14);
      v21 = a13;
      while (1)
      {
        if ((int)v18 < v21)
        {
          v18 = (int)v18;
          do
          {
            v24 = *(_DWORD *)(a8 + 4 * v18);
            v25 = v24 - a12;
            v26 = v24 - a12;
            if (v24 - a12 >= a10)
            {
              v27 = (v25 & ~(v25 >> 31)) + a12 - v24;
              v28 = (v27 - (v27 != 0)) / v16;
              if ((v25 & ~(v25 >> 31)) + a12 - v24)
                ++v28;
              v26 = v24 + v28 * a12;
              do
                v26 -= a12;
              while (v26 >= (int)a10);
            }
            v29 = *(_DWORD *)(a8 + 4 * v18);
            if (v24 >= a10)
            {
              v29 = v24 + a12 + a12 * ((v24 >> 31) + ((v24 & ~((int)v24 >> 31)) - (v24 + (v24 >> 31))) / v16);
              do
                v29 -= a12;
              while (v29 >= (int)a10);
            }
            v30 = v24 + a12;
            v31 = v15 + v25;
            if (v15 + v25 >= a10)
            {
              v31 = v24
                  + a12
                  * ((v30 >> 31) + ((v30 & ~(v30 >> 31)) - (v30 + (v30 >> 31))) / v16 + 2);
              do
                v31 -= a12;
              while (v31 >= (int)a10);
            }
            v32 = 3 * a12 + v25;
            if (v32 >= a10)
            {
              v32 = v24
                  + a12
                  * ((((v30 + a12) & ~((int)(v30 + a12) >> 31)) - (v30 + a12 + ((v30 + a12) >> 31))) / v16
                   + ((v30 + a12) >> 31)
                   + 3);
              do
                v32 -= a12;
              while (v32 >= (int)a10);
            }
            LOWORD(a2) = *(_WORD *)(v19 + 2 * v26);
            *(_QWORD *)&a2 = vmovl_s16(*(int16x4_t *)&a2).u64[0];
            LODWORD(a3) = *(_DWORD *)a9;
            LOWORD(a3) = *(_WORD *)(v19 + 2 * v29);
            v22 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a3).u64[0];
            *(float *)v22.i32 = (float)v22.i32[0];
            *(float *)&a2 = (float)((float)((float)SLODWORD(a2) * *(float *)a9) + 0.0)
                          + (float)(*(float *)v22.i32 * *(float *)(a9 + 4));
            v22.i16[0] = *(_WORD *)(v19 + 2 * v31);
            v23 = (int16x4_t)vmovl_s16(v22).u64[0];
            *(float *)v23.i32 = (float)v23.i32[0];
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)v23.i32 * *(float *)(a9 + 8));
            v23.i16[0] = *(_WORD *)(v19 + 2 * v32);
            *(_QWORD *)&a3 = vmovl_s16(v23).u64[0];
            *(float *)&a3 = (float)SLODWORD(a3);
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)&a3 * *(float *)(a9 + 12));
            *(_DWORD *)(v20 + 4 * v18++) = LODWORD(a2);
            a9 += 16;
          }
          while (v18 != v21);
          LODWORD(v18) = v21;
        }
        if (v21 == a11)
          break;
        v21 = a11;
        if ((int)v18 < a14)
        {
          v33 = (int)v18;
          v34 = 4 * (int)v18;
          v35 = (int *)(a8 + v34);
          v36 = (_DWORD *)(v20 + v34);
          v37 = a14 - v33;
          do
          {
            v38 = *v35++;
            LOWORD(a2) = *(_WORD *)(v19 + 2 * (int)(v38 - a12));
            *(_QWORD *)&a2 = vmovl_s16(*(int16x4_t *)&a2).u64[0];
            LOWORD(a3) = *(_WORD *)(v19 + 2 * v38);
            v39 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a3).u64[0];
            *(float *)v39.i32 = *(float *)(a9 + 4) * (float)v39.i32[0];
            *(float *)&a2 = *(float *)v39.i32 + (float)((float)SLODWORD(a2) * *(float *)a9);
            v39.i16[0] = *(_WORD *)(v19 + 2 * (int)(v38 + a12));
            v40 = (int16x4_t)vmovl_s16(v39).u64[0];
            *(float *)v40.i32 = (float)v40.i32[0];
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)v40.i32 * *(float *)(a9 + 8));
            v40.i16[0] = *(_WORD *)(v19 + 2 * ((int)v38 + v15));
            *(_QWORD *)&a3 = vmovl_s16(v40).u64[0];
            *(float *)&a3 = (float)SLODWORD(a3);
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)&a3 * *(float *)(a9 + 12));
            *v36++ = LODWORD(a2);
            a9 += 16;
            --v37;
          }
          while (v37);
          LODWORD(v18) = a14;
          v21 = a11;
        }
      }
      a9 += -16 * a11;
      ++v14;
    }
    while (v14 != v17);
  }
}

uint64_t sub_10032A530(uint64_t a1, float32x4_t **a2, int16x8_t *a3, const float *a4, int a5)
{
  const float *v6;
  float32x4_t v7;
  uint64_t result;
  int v9;
  float32x4_t v10;
  const float *v11;
  float32x4_t v12;
  const float *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  int8x16_t *v19;
  int8x16_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  int8x16_t v31;
  int8x16_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  float32x4_t v35;
  float32x4_t v36;
  __int128 v37;
  int v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int16x8_t *v101;
  int16x8_t *v102;
  int16x8_t *v103;
  int16x8_t *v104;
  int v105;
  int v106;
  int v107;
  int v108;
  float32x4_t *v109;
  float32x4_t *v110;
  float32x4_t *v111;
  float32x4_t *v112;
  float32x4_t *v113;
  float32x4_t *v114;
  float32x4_t *v115;
  float32x4_t *v116;
  float32x4_t *v117;
  float32x4_t *v118;
  float32x4_t *v119;
  float32x4_t *v120;
  float32x4_t *v121;
  float32x4_t *v122;
  float32x4_t *v123;
  float32x4_t *v124;

  v7 = vld1q_dup_f32(a4);
  v6 = a4 + 1;
  result = 0;
  v9 = a5 - 8;
  if (a5 >= 8)
  {
    v10 = vld1q_dup_f32(v6);
    v11 = a4 + 2;
    v12 = vld1q_dup_f32(v11);
    v13 = a4 + 3;
    v14 = a2[3] + 1;
    v15 = a2[2] + 1;
    v16 = vld1q_dup_f32(v13);
    v17 = a2[1] + 1;
    v18 = *a2 + 1;
    v19 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    v20 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    do
    {
      v21 = v18[-1];
      v22 = *v18;
      v23 = v17[-1];
      v24 = *v17;
      v25 = v15[-1];
      v26 = *v15;
      v27 = v14[-1];
      v28 = *v14;
      v29 = atomic_load((unsigned __int8 *)qword_10048AA60);
      if ((v29 & 1) == 0)
      {
        v105 = result;
        v101 = a3;
        v97 = v9;
        v109 = v14;
        v113 = v15;
        v117 = v17;
        v121 = v18;
        v89 = v10;
        v93 = v7;
        v81 = v16;
        v85 = v12;
        v73 = v17[-1];
        v77 = v18[-1];
        v65 = v14[-1];
        v69 = v15[-1];
        v57 = *v17;
        v61 = *v18;
        v49 = *v14;
        v53 = *v15;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA60);
        v28 = v49;
        v26 = v53;
        v24 = v57;
        v22 = v61;
        v27 = v65;
        v25 = v69;
        v23 = v73;
        v21 = v77;
        v16 = v81;
        v12 = v85;
        v10 = v89;
        v7 = v93;
        *(_QWORD *)&v37 = 0x8000000080000000;
        *((_QWORD *)&v37 + 1) = 0x8000000080000000;
        v20 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v19 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v17 = v117;
        v18 = v121;
        v14 = v109;
        v15 = v113;
        v9 = v97;
        a3 = v101;
        v38 = result;
        LODWORD(result) = v105;
        if (v38)
        {
          xmmword_10048AA50 = v37;
          __cxa_guard_release(qword_10048AA60);
          v28 = v49;
          v26 = v53;
          v24 = v57;
          v22 = v61;
          v27 = v65;
          v25 = v69;
          v23 = v73;
          v21 = v77;
          v16 = v81;
          v12 = v85;
          v10 = v89;
          v7 = v93;
          v20 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v19 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v17 = v117;
          v18 = v121;
          v14 = v109;
          v15 = v113;
          v9 = v97;
          LODWORD(result) = v105;
          a3 = v101;
        }
      }
      v30 = atomic_load((unsigned __int8 *)&qword_10048AA80);
      if ((v30 & 1) == 0)
      {
        v106 = result;
        v102 = a3;
        v98 = v9;
        v110 = v14;
        v114 = v15;
        v118 = v17;
        v122 = v18;
        v90 = v10;
        v94 = v7;
        v82 = v16;
        v86 = v12;
        v74 = v23;
        v78 = v21;
        v66 = v27;
        v70 = v25;
        v58 = v24;
        v62 = v22;
        v50 = v28;
        v54 = v26;
        LODWORD(result) = __cxa_guard_acquire(&qword_10048AA80);
        v28 = v50;
        v26 = v54;
        v24 = v58;
        v22 = v62;
        v27 = v66;
        v25 = v70;
        v23 = v74;
        v21 = v78;
        v16 = v82;
        v12 = v86;
        v10 = v90;
        v7 = v94;
        *(_QWORD *)&v39 = 0x3F0000003F000000;
        *((_QWORD *)&v39 + 1) = 0x3F0000003F000000;
        v20 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v19 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v17 = v118;
        v18 = v122;
        v14 = v110;
        v15 = v114;
        v9 = v98;
        a3 = v102;
        v40 = result;
        LODWORD(result) = v106;
        if (v40)
        {
          xmmword_10048AA70 = v39;
          __cxa_guard_release(&qword_10048AA80);
          v28 = v50;
          v26 = v54;
          v24 = v58;
          v22 = v62;
          v27 = v66;
          v25 = v70;
          v23 = v74;
          v21 = v78;
          v16 = v82;
          v12 = v86;
          v10 = v90;
          v7 = v94;
          v20 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v19 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v17 = v118;
          v18 = v122;
          v14 = v110;
          v15 = v114;
          v9 = v98;
          LODWORD(result) = v106;
          a3 = v102;
        }
      }
      v31 = v20[167];
      v32 = v19[165];
      v33 = atomic_load((unsigned __int8 *)qword_10048AA60);
      if ((v33 & 1) == 0)
      {
        v107 = result;
        v103 = a3;
        v99 = v9;
        v111 = v14;
        v115 = v15;
        v119 = v17;
        v123 = v18;
        v91 = v10;
        v95 = v7;
        v83 = v16;
        v87 = v12;
        v75 = v23;
        v79 = v21;
        v67 = v27;
        v71 = v25;
        v59 = v24;
        v63 = v22;
        v51 = v28;
        v55 = v26;
        v45 = v19[165];
        v47 = v20[167];
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA60);
        v32 = v45;
        v31 = v47;
        v28 = v51;
        v26 = v55;
        v24 = v59;
        v22 = v63;
        v27 = v67;
        v25 = v71;
        v23 = v75;
        v21 = v79;
        v16 = v83;
        v12 = v87;
        v10 = v91;
        v7 = v95;
        *(_QWORD *)&v41 = 0x8000000080000000;
        *((_QWORD *)&v41 + 1) = 0x8000000080000000;
        v20 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v19 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v17 = v119;
        v18 = v123;
        v14 = v111;
        v15 = v115;
        v9 = v99;
        a3 = v103;
        v42 = result;
        LODWORD(result) = v107;
        if (v42)
        {
          xmmword_10048AA50 = v41;
          __cxa_guard_release(qword_10048AA60);
          v32 = v45;
          v31 = v47;
          v28 = v51;
          v26 = v55;
          v24 = v59;
          v22 = v63;
          v27 = v67;
          v25 = v71;
          v23 = v75;
          v21 = v79;
          v16 = v83;
          v12 = v87;
          v10 = v91;
          v7 = v95;
          v20 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v19 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v17 = v119;
          v18 = v123;
          v14 = v111;
          v15 = v115;
          v9 = v99;
          LODWORD(result) = v107;
          a3 = v103;
        }
      }
      v34 = atomic_load((unsigned __int8 *)&qword_10048AA80);
      if ((v34 & 1) == 0)
      {
        v108 = result;
        v104 = a3;
        v100 = v9;
        v112 = v14;
        v116 = v15;
        v120 = v17;
        v124 = v18;
        v92 = v10;
        v96 = v7;
        v84 = v16;
        v88 = v12;
        v76 = v23;
        v80 = v21;
        v68 = v27;
        v72 = v25;
        v60 = v24;
        v64 = v22;
        v52 = v28;
        v56 = v26;
        v46 = v32;
        v48 = v31;
        LODWORD(result) = __cxa_guard_acquire(&qword_10048AA80);
        v32 = v46;
        v31 = v48;
        v28 = v52;
        v26 = v56;
        v24 = v60;
        v22 = v64;
        v27 = v68;
        v25 = v72;
        v23 = v76;
        v21 = v80;
        v16 = v84;
        v12 = v88;
        v10 = v92;
        v7 = v96;
        *(_QWORD *)&v43 = 0x3F0000003F000000;
        *((_QWORD *)&v43 + 1) = 0x3F0000003F000000;
        v20 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v19 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v17 = v120;
        v18 = v124;
        v14 = v112;
        v15 = v116;
        v9 = v100;
        a3 = v104;
        v44 = result;
        LODWORD(result) = v108;
        if (v44)
        {
          xmmword_10048AA70 = v43;
          __cxa_guard_release(&qword_10048AA80);
          v32 = v46;
          v31 = v48;
          v28 = v52;
          v26 = v56;
          v24 = v60;
          v22 = v64;
          v27 = v68;
          v25 = v72;
          v23 = v76;
          v21 = v80;
          v16 = v84;
          v12 = v88;
          v10 = v92;
          v7 = v96;
          v20 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v19 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v17 = v120;
          v18 = v124;
          v14 = v112;
          v15 = v116;
          v9 = v100;
          LODWORD(result) = v108;
          a3 = v104;
        }
      }
      v35 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v7, v21), v23, v10), v25, v12), v27, v16);
      v36 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v7, v22), v24, v10), v26, v12), v28, v16);
      *a3++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v35, (float32x4_t)vorrq_s8(vandq_s8(v32, (int8x16_t)v35), v31)))), vcvtq_s32_f32(vaddq_f32(v36, (float32x4_t)vorrq_s8(vandq_s8(v19[165], (int8x16_t)v36), v20[167]))));
      v14 += 2;
      v15 += 2;
      v17 += 2;
      v18 += 2;
      result = (result + 8);
    }
    while (v9 >= (int)result);
  }
  return result;
}

uint64_t sub_10032A9EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_1004539F8;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_10032AB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_100453A38;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10032AD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10032AD4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10032AD60(uint64_t a1)
{
  sub_10032B538(a1);
  operator delete();
}

void sub_10032AD84(uint64_t a1, int *a2, double a3, double a4, double a5, double a6)
{
  unsigned int v7;
  signed int v8;
  uint64_t v9;
  int32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int32 *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  signed int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t *v40;
  float32x4_t *v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t *v69;
  float32x4_t v70;
  float32x4_t *v71;
  float32x4_t *v72;
  float32x4_t *v73;
  float32x4_t *v74;
  unint64_t v75;
  float32x4_t v76;
  unsigned int v77;
  uint64_t v79;
  _DWORD v80[265];
  char v81;
  _DWORD __b[16];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD v91[17];

  v7 = *(_DWORD *)(a1 + 8);
  v8 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v9) = *(_DWORD *)(a1 + 248);
  if ((v9 * v8) >= 0x109)
    operator new[]();
  v10.i32[1] = 0;
  memset(v91, 0, 128);
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  if ((int)v9 >= 1)
  {
    memset(__b, 255, 4 * v9);
    v11 = v8;
    if ((_DWORD)v9 == 1)
    {
      v12 = 0;
LABEL_9:
      v16 = &v80[v12 * v8];
      v17 = (_QWORD *)&v83 + v12;
      v18 = v9 - v12;
      do
      {
        *v17++ = v16;
        v16 = (_DWORD *)((char *)v16 + v11 * 4);
        --v18;
      }
      while (v18);
      goto LABEL_11;
    }
    v12 = v9 & 0xFFFFFFFE;
    v13 = (_QWORD *)&v83 + 1;
    v14 = v12;
    v15 = v80;
    do
    {
      *(v13 - 1) = v15;
      *v13 = &v15[v11];
      v15 += 2 * v8;
      v13 += 2;
      v14 -= 2;
    }
    while (v14);
    if (v12 != v9)
      goto LABEL_9;
  }
LABEL_11:
  v19 = *a2;
  if ((int)v19 < a2[1])
  {
    v20 = (__int32 *)(*(_QWORD *)(a1 + 224) + 4 * (int)v19 * (int)v9);
    v77 = ((v7 >> 3) & 0x1FF) + 1;
    while (1)
    {
      if ((int)v9 < 1)
        goto LABEL_40;
      v21 = 0;
      LODWORD(v22) = 0;
      v79 = v19;
      v23 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * v19) - (v9 >> 1) + 1;
      v24 = v9;
      do
      {
        v26 = *(_DWORD *)(a1 + 236);
        if ((int)(v23 + v21) >= v26)
          v27 = v26 - 1;
        else
          v27 = v23 + v21;
        if ((int)(v23 + v21) >= 0)
          v28 = v27;
        else
          v28 = 0;
        if ((int)v22 <= (int)v21)
          v22 = v21;
        else
          v22 = v22;
        if ((int)v22 < (int)v9)
        {
          while (v22 > 0xF || v28 != __b[v22])
          {
            if ((uint64_t)++v22 >= (int)v9)
              goto LABEL_16;
          }
          if (v22 > v21)
          {
            memcpy(*((void **)&v83 + v21), *((const void **)&v83 + v22), 4 * v8);
            LODWORD(v9) = *(_DWORD *)(a1 + 248);
          }
        }
LABEL_16:
        if ((int)v21 >= v24)
          v25 = v24;
        else
          v25 = v21;
        if ((_DWORD)v22 == (_DWORD)v9)
          v24 = v25;
        v91[v21] = *(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v28;
        __b[v21++] = v28;
      }
      while ((uint64_t)v21 < (int)v9);
      v29 = *(_DWORD *)(a1 + 240);
      if ((int)v9 > v24)
        break;
      v19 = v79;
LABEL_42:
      v30 = *(_QWORD *)(a1 + 120);
      v31 = *(_QWORD *)(a1 + 184);
      v10.i32[0] = *v20;
      LODWORD(a4) = v20[1];
      LODWORD(a5) = v20[2];
      LODWORD(a6) = v20[3];
      v32 = v83;
      v33 = v84;
      if (v29 >= 8)
      {
        v34 = 0;
        v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
        v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
        v37 = (float32x4_t *)(v83 + 16);
        v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
        v39 = (float32x4_t *)(v30 + v31 * v19 + 16);
        v40 = (float32x4_t *)(*((_QWORD *)&v83 + 1) + 16);
        v41 = (float32x4_t *)(*((_QWORD *)&v84 + 1) + 16);
        v42 = (float32x4_t *)(v84 + 16);
        do
        {
          v39[-1] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v37[-1], *(float *)v10.i32), v40[-1], v35), v42[-1], v36), v41[-1], v38);
          v43 = *v37;
          v37 += 2;
          v44 = vmulq_n_f32(v43, *(float *)v10.i32);
          v45 = *v40;
          v40 += 2;
          v46 = vmlaq_f32(v44, v45, v35);
          v47 = *v42;
          v42 += 2;
          v48 = vmlaq_f32(v46, v47, v36);
          v49 = *v41;
          v41 += 2;
          v34 += 8;
          *v39 = vmlaq_f32(v48, v49, v38);
          v39 += 2;
        }
        while (v34 <= (v29 - 8));
        if ((int)v34 < v29)
        {
LABEL_48:
          v50 = (int)v34;
          v51 = v29 - (uint64_t)(int)v34;
          if (v51 < 0xC)
            goto LABEL_49;
          v66 = 4 * (int)v34;
          if ((unint64_t)(v31 * v19 + v30 - v32) < 0x20)
            goto LABEL_49;
          if ((unint64_t)(v31 * v19 + v30 - *((_QWORD *)&v32 + 1)) < 0x20)
            goto LABEL_49;
          if ((unint64_t)(v31 * v19 + v30 - v33) < 0x20)
            goto LABEL_49;
          if ((unint64_t)(v31 * v19 + v30 - *((_QWORD *)&v33 + 1)) < 0x20)
            goto LABEL_49;
          v50 = (v51 & 0xFFFFFFFFFFFFFFF8) + (int)v34;
          v67 = (float32x4_t)vdupq_lane_s32(v10, 0);
          v68 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
          v69 = (float32x4_t *)(v30 + v66 + v31 * v19 + 16);
          v70 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
          v71 = (float32x4_t *)(v32 + v66 + 16);
          v72 = (float32x4_t *)(*((_QWORD *)&v33 + 1) + v66 + 16);
          v73 = (float32x4_t *)(*((_QWORD *)&v32 + 1) + v66 + 16);
          v74 = (float32x4_t *)(v33 + v66 + 16);
          v75 = v51 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v76 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(*v73, *(float *)&a4), v67, *v71), v68, *v74), v70, *v72);
            v69[-1] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v73[-1], *(float *)&a4), v67, v71[-1]), v68, v74[-1]), v70, v72[-1]);
            *v69 = v76;
            v69 += 2;
            v71 += 2;
            v72 += 2;
            v73 += 2;
            v74 += 2;
            v75 -= 8;
          }
          while (v75);
          if (v51 != (v51 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_49:
            v52 = v29 - v50;
            v53 = 4 * v50;
            v54 = (float *)(v30 + v53 + v31 * v19);
            v55 = (float *)(*((_QWORD *)&v33 + 1) + v53);
            v56 = (float *)(v33 + v53);
            v57 = (float *)(*((_QWORD *)&v32 + 1) + v53);
            v58 = (float *)(v32 + v53);
            do
            {
              v59 = *v58++;
              v60 = v59;
              v61 = *v57++;
              v62 = (float)(*(float *)&a4 * v61) + (float)(v60 * *(float *)v10.i32);
              v63 = *v56++;
              v64 = v62 + (float)(v63 * *(float *)&a5);
              v65 = *v55++;
              *v54++ = v64 + (float)(v65 * *(float *)&a6);
              --v52;
            }
            while (v52);
          }
        }
      }
      else
      {
        LODWORD(v34) = 0;
        if (v29 > 0)
          goto LABEL_48;
      }
      ++v19;
      v9 = *(int *)(a1 + 248);
      v20 += v9;
      if (v19 >= a2[1])
        return;
    }
    sub_10032B2E0((uint64_t)&v81, (uint64_t)&v91[v24], (uint64_t)&v83 + 8 * v24, v9 - v24, *(_QWORD *)(a1 + 200), *(float **)(a1 + 216), *(_DWORD *)(a1 + 232), v29, v77, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
    v19 = v79;
LABEL_40:
    v29 = *(_DWORD *)(a1 + 240);
    goto LABEL_42;
  }
}

void sub_10032B2E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, float *a6, unsigned int a7, int a8, unsigned int a9, int a10, int a11)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  signed int v21;
  int v22;
  unsigned int v23;
  signed int v24;
  int v25;
  int v26;
  signed int v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;

  if (a4 >= 1)
  {
    v11 = 0;
    v12 = 2 * a9;
    if (a9 <= 1)
      v13 = 1;
    else
      v13 = a9;
    v14 = a4;
    do
    {
      LODWORD(v15) = 0;
      v16 = *(_QWORD *)(a2 + 8 * v11);
      v17 = *(_QWORD *)(a3 + 8 * v11);
      v18 = a10;
      while (1)
      {
        if ((int)v15 < v18)
        {
          v15 = (int)v15;
          do
          {
            v19 = *(_DWORD *)(a5 + 4 * v15);
            v20 = v19 - a9;
            v21 = v19 - a9;
            if (v19 - a9 >= a7)
            {
              v22 = (v20 & ~(v20 >> 31)) + a9 - v19;
              v23 = (v22 - (v22 != 0)) / v13;
              if ((v20 & ~(v20 >> 31)) + a9 - v19)
                ++v23;
              v21 = v19 + v23 * a9;
              do
                v21 -= a9;
              while (v21 >= (int)a7);
            }
            v24 = *(_DWORD *)(a5 + 4 * v15);
            if (v19 >= a7)
            {
              v24 = v19 + a9 + a9 * ((v19 >> 31) + ((v19 & ~((int)v19 >> 31)) - (v19 + (v19 >> 31))) / v13);
              do
                v24 -= a9;
              while (v24 >= (int)a7);
            }
            v25 = v19 + a9;
            v26 = v12 + v20;
            if (v12 + v20 >= a7)
            {
              v26 = v19
                  + a9
                  * ((v25 >> 31) + ((v25 & ~(v25 >> 31)) - (v25 + (v25 >> 31))) / v13 + 2);
              do
                v26 -= a9;
              while (v26 >= (int)a7);
            }
            v27 = 3 * a9 + v20;
            if (v27 >= a7)
            {
              v27 = v19
                  + a9
                  * ((((v25 + a9) & ~((int)(v25 + a9) >> 31)) - (v25 + a9 + ((v25 + a9) >> 31))) / v13
                   + ((v25 + a9) >> 31)
                   + 3);
              do
                v27 -= a9;
              while (v27 >= (int)a7);
            }
            *(float *)(v17 + 4 * v15++) = (float)((float)((float)((float)(*(float *)(v16 + 4 * v21) * *a6) + 0.0)
                                                        + (float)(*(float *)(v16 + 4 * v24) * a6[1]))
                                                + (float)(*(float *)(v16 + 4 * v26) * a6[2]))
                                        + (float)(*(float *)(v16 + 4 * v27) * a6[3]);
            a6 += 4;
          }
          while (v15 != v18);
          LODWORD(v15) = v18;
        }
        if (v18 == a8)
          break;
        v18 = a8;
        if ((int)v15 < a11)
        {
          v28 = (int)v15;
          v29 = 4 * (int)v15;
          v30 = (int *)(a5 + v29);
          v31 = (float *)(v17 + v29);
          v32 = a11 - v28;
          do
          {
            v33 = *v30++;
            *v31++ = (float)((float)((float)(*(float *)(v16 + 4 * v33) * a6[1])
                                   + (float)(*(float *)(v16 + 4 * (int)(v33 - a9)) * *a6))
                           + (float)(*(float *)(v16 + 4 * (int)(v33 + a9)) * a6[2]))
                   + (float)(*(float *)(v16 + 4 * ((int)v33 + v12)) * a6[3]);
            a6 += 4;
            --v32;
          }
          while (v32);
          LODWORD(v15) = a11;
          v18 = a8;
        }
      }
      a6 -= 4 * a8;
      ++v11;
    }
    while (v11 != v14);
  }
}

uint64_t sub_10032B538(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453A38;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_10032B658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_100453A78;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10032B858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10032B898(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10032B8AC(uint64_t a1)
{
  sub_10032BFF0(a1);
  operator delete();
}

void sub_10032B8D0(uint64_t a1, int *a2)
{
  unsigned int v3;
  signed int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  signed int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t *v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  uint64_t v43;
  float64x2_t v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  double *v48;
  double *v49;
  double *v50;
  double *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  unsigned int v59;
  uint64_t v61;
  _QWORD v62[136];
  char v63;
  _DWORD __b[16];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _QWORD v73[17];

  v3 = *(_DWORD *)(a1 + 8);
  v4 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v5) = *(_DWORD *)(a1 + 248);
  if ((v5 * v4) >= 0x89)
    operator new[]();
  memset(v73, 0, 128);
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  if ((int)v5 >= 1)
  {
    memset(__b, 255, 4 * v5);
    v6 = v4;
    if ((_DWORD)v5 == 1)
    {
      v7 = 0;
LABEL_9:
      v11 = &v62[v7 * v4];
      v12 = (_QWORD *)&v65 + v7;
      v13 = v5 - v7;
      do
      {
        *v12++ = v11;
        v11 = (_QWORD *)((char *)v11 + v6 * 8);
        --v13;
      }
      while (v13);
      goto LABEL_11;
    }
    v7 = v5 & 0xFFFFFFFE;
    v8 = (_QWORD *)&v65 + 1;
    v9 = v7;
    v10 = v62;
    do
    {
      *(v8 - 1) = v10;
      *v8 = &v10[v6];
      v10 += 2 * v4;
      v8 += 2;
      v9 -= 2;
    }
    while (v9);
    if (v7 != v5)
      goto LABEL_9;
  }
LABEL_11:
  v14 = *a2;
  if ((int)v14 < a2[1])
  {
    v15 = (float *)(*(_QWORD *)(a1 + 224) + 4 * (int)v14 * (int)v5);
    v59 = ((v3 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v5 >= 1)
      {
        v16 = 0;
        LODWORD(v17) = 0;
        v61 = v14;
        v18 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * v14) - (v5 >> 1) + 1;
        v19 = v5;
        do
        {
          v21 = *(_DWORD *)(a1 + 236);
          if ((int)(v18 + v16) >= v21)
            v22 = v21 - 1;
          else
            v22 = v18 + v16;
          if ((int)(v18 + v16) >= 0)
            v23 = v22;
          else
            v23 = 0;
          if ((int)v17 <= (int)v16)
            v17 = v16;
          else
            v17 = v17;
          if ((int)v17 < (int)v5)
          {
            while (v17 > 0xF || v23 != __b[v17])
            {
              if ((uint64_t)++v17 >= (int)v5)
                goto LABEL_16;
            }
            if (v17 > v16)
            {
              memcpy(*((void **)&v65 + v16), *((const void **)&v65 + v17), 8 * v4);
              LODWORD(v5) = *(_DWORD *)(a1 + 248);
            }
          }
LABEL_16:
          if ((int)v16 >= v19)
            v20 = v19;
          else
            v20 = v16;
          if ((_DWORD)v17 == (_DWORD)v5)
            v19 = v20;
          v73[v16] = *(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v23;
          __b[v16++] = v23;
        }
        while ((uint64_t)v16 < (int)v5);
        v24 = *(_DWORD *)(a1 + 240);
        if ((int)v5 <= v19)
        {
          v14 = v61;
          if (v24 < 1)
            goto LABEL_13;
          goto LABEL_43;
        }
        sub_10032BD80((uint64_t)&v63, (uint64_t)&v73[v19], (uint64_t)&v65 + 8 * v19, v5 - v19, *(_QWORD *)(a1 + 200), *(float **)(a1 + 216), *(_DWORD *)(a1 + 232), v24, v59, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
        v14 = v61;
      }
      v24 = *(_DWORD *)(a1 + 240);
      if (v24 < 1)
        goto LABEL_13;
LABEL_43:
      v25 = *(_QWORD *)(a1 + 120);
      v26 = *(_QWORD *)(a1 + 184);
      *(double *)&v27 = *v15;
      v28 = v15[1];
      *(double *)&v29 = v15[2];
      *(double *)&v30 = v15[3];
      v31 = v65;
      v32 = v66;
      if (v24 >= 8)
      {
        v33 = 0;
        v34 = v26 * v14 + v25;
        if ((unint64_t)(v34 - v65) >= 0x20
          && (unint64_t)(v34 - *((_QWORD *)&v65 + 1)) >= 0x20
          && (unint64_t)(v34 - v66) >= 0x20
          && (unint64_t)(v34 - *((_QWORD *)&v66 + 1)) >= 0x20)
        {
          v35 = (float64x2_t)vdupq_lane_s64(v27, 0);
          v33 = v24 & 0xFFFFFFFC;
          v36 = (float64x2_t)vdupq_lane_s64(v29, 0);
          v37 = (float64x2_t *)(v65 + 16);
          v38 = (float64x2_t *)(v25 + v26 * v14 + 16);
          v39 = (float64x2_t)vdupq_lane_s64(v30, 0);
          v40 = (float64x2_t *)(*((_QWORD *)&v65 + 1) + 16);
          v41 = (float64x2_t *)(*((_QWORD *)&v66 + 1) + 16);
          v42 = (float64x2_t *)(v66 + 16);
          v43 = v33;
          do
          {
            v44 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v40, v28), v35, *v37), v36, *v42), v39, *v41);
            v38[-1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v40[-1], v28), v35, v37[-1]), v36, v42[-1]), v39, v41[-1]);
            *v38 = v44;
            v37 += 2;
            v38 += 2;
            v40 += 2;
            v41 += 2;
            v42 += 2;
            v43 -= 4;
          }
          while (v43);
          if (v33 == v24)
            goto LABEL_13;
        }
      }
      else
      {
        v33 = 0;
      }
      v45 = v24 - v33;
      v46 = 8 * v33;
      v47 = (double *)(v25 + v46 + v26 * v14);
      v48 = (double *)(*((_QWORD *)&v32 + 1) + v46);
      v49 = (double *)(v32 + v46);
      v50 = (double *)(*((_QWORD *)&v31 + 1) + v46);
      v51 = (double *)(v31 + v46);
      do
      {
        v52 = *v51++;
        v53 = v52;
        v54 = *v50++;
        v55 = v54 * v28 + v53 * *(double *)&v27;
        v56 = *v49++;
        v57 = v55 + v56 * *(double *)&v29;
        v58 = *v48++;
        *v47++ = v57 + v58 * *(double *)&v30;
        --v45;
      }
      while (v45);
LABEL_13:
      ++v14;
      v5 = *(int *)(a1 + 248);
      v15 += v5;
    }
    while (v14 < a2[1]);
  }
}

void sub_10032BD80(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, float *a6, unsigned int a7, int a8, unsigned int a9, int a10, int a11)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  signed int v21;
  int v22;
  unsigned int v23;
  signed int v24;
  int v25;
  int v26;
  signed int v27;
  int *v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;

  if (a4 >= 1)
  {
    v11 = 0;
    v12 = 2 * a9;
    if (a9 <= 1)
      v13 = 1;
    else
      v13 = a9;
    v14 = a4;
    do
    {
      LODWORD(v15) = 0;
      v16 = *(_QWORD *)(a2 + 8 * v11);
      v17 = *(_QWORD *)(a3 + 8 * v11);
      v18 = a10;
      while (1)
      {
        if ((int)v15 < v18)
        {
          v15 = (int)v15;
          do
          {
            v19 = *(_DWORD *)(a5 + 4 * v15);
            v20 = v19 - a9;
            v21 = v19 - a9;
            if (v19 - a9 >= a7)
            {
              v22 = (v20 & ~(v20 >> 31)) + a9 - v19;
              v23 = (v22 - (v22 != 0)) / v13;
              if ((v20 & ~(v20 >> 31)) + a9 - v19)
                ++v23;
              v21 = v19 + v23 * a9;
              do
                v21 -= a9;
              while (v21 >= (int)a7);
            }
            v24 = *(_DWORD *)(a5 + 4 * v15);
            if (v19 >= a7)
            {
              v24 = v19 + a9 + a9 * ((v19 >> 31) + ((v19 & ~((int)v19 >> 31)) - (v19 + (v19 >> 31))) / v13);
              do
                v24 -= a9;
              while (v24 >= (int)a7);
            }
            v25 = v19 + a9;
            v26 = v12 + v20;
            if (v12 + v20 >= a7)
            {
              v26 = v19
                  + a9
                  * ((v25 >> 31) + ((v25 & ~(v25 >> 31)) - (v25 + (v25 >> 31))) / v13 + 2);
              do
                v26 -= a9;
              while (v26 >= (int)a7);
            }
            v27 = 3 * a9 + v20;
            if (v27 >= a7)
            {
              v27 = v19
                  + a9
                  * ((((v25 + a9) & ~((int)(v25 + a9) >> 31)) - (v25 + a9 + ((v25 + a9) >> 31))) / v13
                   + ((v25 + a9) >> 31)
                   + 3);
              do
                v27 -= a9;
              while (v27 >= (int)a7);
            }
            *(double *)(v17 + 8 * v15++) = *(double *)(v16 + 8 * v21) * *a6
                                         + 0.0
                                         + *(double *)(v16 + 8 * v24) * a6[1]
                                         + *(double *)(v16 + 8 * v26) * a6[2]
                                         + *(double *)(v16 + 8 * v27) * a6[3];
            a6 += 4;
          }
          while (v15 != v18);
          LODWORD(v15) = v18;
        }
        if (v18 == a8)
          break;
        v18 = a8;
        if ((int)v15 < a11)
        {
          v28 = (int *)(a5 + 4 * (int)v15);
          v29 = (double *)(v17 + 8 * (int)v15);
          v30 = a11 - (uint64_t)(int)v15;
          do
          {
            v31 = *v28++;
            *v29++ = *(double *)(v16 + 8 * v31) * a6[1]
                   + *(double *)(v16 + 8 * (int)(v31 - a9)) * *a6
                   + *(double *)(v16 + 8 * (int)(v31 + a9)) * a6[2]
                   + *(double *)(v16 + 8 * ((int)v31 + v12)) * a6[3];
            a6 += 4;
            --v30;
          }
          while (v30);
          LODWORD(v15) = a11;
          v18 = a8;
        }
      }
      a6 -= 4 * a8;
      ++v11;
    }
    while (v11 != v14);
  }
}

uint64_t sub_10032BFF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453A78;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_10032C110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_100453AB8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10032C310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10032C350(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10032C364(uint64_t a1)
{
  sub_10032CD90(a1);
  operator delete();
}

_DWORD *sub_10032C388(_DWORD *result, int *a2)
{
  _DWORD *v2;
  unsigned int v3;
  signed int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  signed int v21;
  int v22;
  int v23;
  int v24;
  signed int v25;
  __int16 *v27;
  _DWORD v28[265];
  char v29;
  char v30;
  _DWORD __b[16];
  _QWORD v32[16];
  _QWORD v33[17];

  v2 = result;
  v3 = result[2];
  v4 = (result[60] + 15) & 0xFFFFFFF0;
  LODWORD(v5) = result[62];
  if ((v5 * v4) >= 0x109)
    operator new[]();
  memset(v33, 0, 128);
  memset(v32, 0, sizeof(v32));
  if ((int)v5 >= 1)
  {
    result = memset(__b, 255, 4 * v5);
    v6 = v4;
    if ((_DWORD)v5 == 1)
    {
      v7 = 0;
LABEL_9:
      v11 = &v28[v7 * v4];
      v12 = &v32[v7];
      v13 = v5 - v7;
      do
      {
        *v12++ = v11;
        v11 = (_DWORD *)((char *)v11 + v6 * 4);
        --v13;
      }
      while (v13);
      goto LABEL_11;
    }
    v7 = v5 & 0xFFFFFFFE;
    v8 = &v32[1];
    v9 = v7;
    v10 = v28;
    do
    {
      *(v8 - 1) = v10;
      *v8 = &v10[v6];
      v10 += 2 * v4;
      v8 += 2;
      v9 -= 2;
    }
    while (v9);
    if (v7 != v5)
      goto LABEL_9;
  }
LABEL_11:
  v14 = *a2;
  if ((int)v14 < a2[1])
  {
    v15 = (__int16 *)(*((_QWORD *)v2 + 28) + 2 * (int)v14 * (int)v5);
    v25 = ((v3 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v5 >= 1)
      {
        v27 = v15;
        v16 = 0;
        LODWORD(v17) = 0;
        v18 = *(_DWORD *)(*((_QWORD *)v2 + 26) + 4 * v14) - (v5 >> 1) + 1;
        v19 = v5;
        do
        {
          v21 = v2[59];
          if ((int)(v18 + v16) >= v21)
            v22 = v21 - 1;
          else
            v22 = v18 + v16;
          if ((int)(v18 + v16) >= 0)
            v23 = v22;
          else
            v23 = 0;
          if ((int)v17 <= (int)v16)
            v17 = v16;
          else
            v17 = v17;
          if ((int)v17 < (int)v5)
          {
            while (v17 > 0xF || v23 != __b[v17])
            {
              if ((uint64_t)++v17 >= (int)v5)
                goto LABEL_15;
            }
            if (v17 > v16)
            {
              memcpy((void *)v32[v16], (const void *)v32[v17], 4 * v4);
              LODWORD(v5) = v2[62];
            }
          }
LABEL_15:
          if ((int)v16 >= v19)
            v20 = v19;
          else
            v20 = v16;
          if ((_DWORD)v17 == (_DWORD)v5)
            v19 = v20;
          v33[v16] = *((_QWORD *)v2 + 3) + **((_QWORD **)v2 + 10) * v23;
          __b[v16++] = v23;
        }
        while ((uint64_t)v16 < (int)v5);
        v24 = v2[60];
        if ((int)v5 <= v19)
        {
          v15 = v27;
          goto LABEL_41;
        }
        sub_10032C72C((uint64_t)&v30, (uint64_t)&v33[v19], (uint64_t)&v32[v19], v5 - v19, *((_QWORD *)v2 + 25), *((__int16 **)v2 + 27), v2[58], v24, v25, v2[63], v2[64]);
        v15 = v27;
      }
      v24 = v2[60];
LABEL_41:
      result = sub_10032CBA4((uint64_t)&v29, v32, *((_QWORD *)v2 + 15) + *((_QWORD *)v2 + 23) * v14++, v15, v24);
      v5 = (int)v2[62];
      v15 += v5;
    }
    while (v14 < a2[1]);
  }
  return result;
}

void sub_10032C6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

void sub_10032C72C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __int16 *a6, unsigned int a7, int a8, signed int a9, int a10, int a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  signed int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  signed int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  signed int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  signed int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  signed int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  signed int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  signed int v55;
  unsigned int v56;
  int v57;
  signed int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v74;
  int v75;
  uint64_t v76;

  if (a4 >= 1)
  {
    v11 = 0;
    v12 = 2 * a9;
    v13 = 4 * a9;
    v14 = a11;
    v15 = 3 * a9;
    v67 = -8 * a8;
    v72 = -3 * a9;
    if (a9 <= 1)
      v16 = 1;
    else
      v16 = a9;
    v70 = a8;
    v75 = 4 * a9;
    do
    {
      v17 = 0;
      v69 = v11;
      v18 = 8 * v11;
      v19 = *(_QWORD *)(a2 + v18);
      v76 = *(_QWORD *)(a3 + v18);
      v20 = a10;
      while (1)
      {
        if (v17 < v20)
        {
          v21 = v17;
          v71 = v20;
          v74 = v20;
          do
          {
            v22 = *(_DWORD *)(a5 + 4 * v21);
            v23 = v72 + v22;
            v24 = v15 - v22;
            v25 = v72 + v22;
            if (v72 + v22 >= a7)
            {
              v26 = ((v23 & ~(v23 >> 31)) + v24 - ((v23 & ~(v23 >> 31)) + v24 != 0)) / v16;
              if ((v23 & ~(v23 >> 31)) + v24)
                ++v26;
              v25 = v22 + a9 * (v26 - 2);
              do
                v25 -= a9;
              while (v25 >= (int)a7);
            }
            v27 = v23 + a9;
            v28 = v24 - a9;
            v29 = v22 - v12;
            if (v22 - v12 >= a7)
            {
              v30 = ((v27 & ~(v27 >> 31)) + v28 - ((v27 & ~(v27 >> 31)) + v28 != 0)) / v16;
              if ((v27 & ~(v27 >> 31)) + v28)
                ++v30;
              v29 = v22 + a9 * (v30 - 1);
              do
                v29 -= a9;
              while (v29 >= (int)a7);
            }
            v31 = v27 + a9;
            v32 = v28 - a9;
            v33 = v22 - a9;
            if (v22 - a9 >= a7)
            {
              v34 = ((v31 & ~(v31 >> 31)) + v32 - ((v31 & ~(v31 >> 31)) + v32 != 0)) / v16;
              if ((v31 & ~(v31 >> 31)) + v32)
                ++v34;
              v33 = v22 + v34 * a9;
              do
                v33 -= a9;
              while (v33 >= (int)a7);
            }
            v35 = v31 + a9;
            v36 = v32 - a9;
            v37 = *(_DWORD *)(a5 + 4 * v21);
            if (v22 >= a7)
            {
              v38 = ((v35 & ~(v35 >> 31)) + v36 - ((v35 & ~(v35 >> 31)) + v36 != 0)) / v16;
              if ((v35 & ~(v35 >> 31)) + v36)
                ++v38;
              v37 = v22 + a9 + a9 * v38;
              do
                v37 -= a9;
              while (v37 >= (int)a7);
            }
            v39 = v35 + a9;
            v40 = v36 - a9;
            v41 = v22 + a9;
            if (v22 + a9 >= a7)
            {
              v42 = ((v39 & ~(v39 >> 31)) + v40 - ((v39 & ~(v39 >> 31)) + v40 != 0)) / v16;
              if ((v39 & ~(v39 >> 31)) + v40)
                ++v42;
              v41 = v22 + a9 * (v42 + 2);
              do
                v41 -= a9;
              while (v41 >= (int)a7);
            }
            v43 = v39 + a9;
            v44 = v40 - a9;
            v45 = v12 + v22;
            if (v12 + v22 >= a7)
            {
              v46 = ((v43 & ~(v43 >> 31)) + v44 - ((v43 & ~(v43 >> 31)) + v44 != 0)) / v16;
              if ((v43 & ~(v43 >> 31)) + v44)
                ++v46;
              v45 = v22 + a9 * (v46 + 3);
              do
                v45 -= a9;
              while (v45 >= (int)a7);
            }
            v47 = *(unsigned __int8 *)(v19 + v25);
            v48 = *(unsigned __int8 *)(v19 + v29);
            v49 = *(unsigned __int8 *)(v19 + v33);
            v50 = *(unsigned __int8 *)(v19 + v37);
            v51 = *(unsigned __int8 *)(v19 + v41);
            v52 = v43 + a9;
            v53 = *(unsigned __int8 *)(v19 + v45);
            v54 = v44 - a9;
            v55 = v15 + v22;
            if (v15 + v22 >= a7)
            {
              v56 = ((v52 & ~(v52 >> 31)) + v54 - ((v52 & ~(v52 >> 31)) + v54 != 0)) / v16;
              if ((v52 & ~(v52 >> 31)) + v54)
                ++v56;
              v55 = v22 + a9 * (v56 + 4);
              do
                v55 -= a9;
              while (v55 >= (int)a7);
            }
            v57 = *(unsigned __int8 *)(v19 + v55);
            v58 = v75 + v22;
            if (v75 + v22 >= a7)
            {
              v59 = ((v52 + a9) & ~((v52 + a9) >> 31)) + v54 - a9;
              v60 = (v59 - (v59 != 0)) / v16;
              if (((v52 + a9) & ~((v52 + a9) >> 31)) + v54 - a9)
                ++v60;
              v58 = v22 + a9 * (v60 + 5);
              do
                v58 -= a9;
              while (v58 >= (int)a7);
            }
            *(_DWORD *)(v76 + 4 * v21++) = *a6 * v47
                                         + a6[1] * v48
                                         + a6[2] * v49
                                         + a6[3] * v50
                                         + a6[4] * v51
                                         + a6[5] * v53
                                         + a6[6] * v57
                                         + a6[7] * *(unsigned __int8 *)(v19 + v58);
            a6 += 8;
          }
          while (v21 != v74);
          v20 = v71;
          v17 = v71;
          a8 = v70;
          v13 = 4 * a9;
          v14 = a11;
        }
        if (v20 == a8)
          break;
        v20 = a8;
        if (v17 < v14)
        {
          v61 = v17;
          v62 = 4 * v17;
          v63 = (int *)(a5 + v62);
          v64 = (_DWORD *)(v76 + v62);
          v65 = a11 - v61;
          do
          {
            v66 = *v63++;
            *v64++ = *a6 * *(unsigned __int8 *)(v19 + v66 - v15)
                   + a6[1] * *(unsigned __int8 *)(v19 + v66 - v12)
                   + a6[2] * *(unsigned __int8 *)(v19 + v66 - a9)
                   + a6[3] * *(unsigned __int8 *)(v19 + v66)
                   + a6[4] * *(unsigned __int8 *)(v19 + v66 + a9)
                   + a6[5] * *(unsigned __int8 *)(v19 + v66 + v12)
                   + a6[6] * *(unsigned __int8 *)(v19 + v66 + v15)
                   + a6[7] * *(unsigned __int8 *)(v19 + v66 + v13);
            a6 += 8;
            --v65;
          }
          while (v65);
          v17 = v14;
          v20 = a8;
        }
      }
      a6 += v67;
      v11 = v69 + 1;
    }
    while (v69 + 1 != a4);
  }
}

const __int16 *sub_10032CBA4(uint64_t a1, _QWORD *a2, uint64_t a3, __int16 *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  int32x4_t v7;
  int32x4_t v8;
  const __int16 *v9;
  int16x4_t v10;
  int16x4_t v11;
  const __int16 *v12;
  int16x4_t v13;
  const __int16 *v14;
  const __int16 *v15;
  const __int16 *v16;
  const __int16 *v17;
  const __int16 *result;
  int32x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int32x4_t v22;
  int16x4_t v23;
  int32x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;

  if (a5 >= 4)
  {
    v6 = 0;
    v5 = 0;
    v7.i64[0] = 0x20000000200000;
    v7.i64[1] = 0x20000000200000;
    v8.i64[0] = 0xFF000000FFLL;
    v8.i64[1] = 0xFF000000FFLL;
    do
    {
      v9 = a4;
      v10 = vld1_dup_s16(v9++);
      v11 = vld1_dup_s16(v9);
      v12 = a4 + 2;
      v13 = vld1_dup_s16(v12);
      v14 = a4 + 3;
      v15 = a4 + 4;
      v16 = a4 + 5;
      v17 = a4 + 6;
      result = a4 + 7;
      v19 = vmlaq_s32(vmulq_s32(*(int32x4_t *)(*a2 + v6), vmovl_s16(v10)), *(int32x4_t *)(a2[1] + v6), vmovl_s16(v11));
      v20 = vld1_dup_s16(v14);
      v21 = vld1_dup_s16(v15);
      v22 = vmlaq_s32(vmlaq_s32(v19, *(int32x4_t *)(a2[2] + v6), vmovl_s16(v13)), *(int32x4_t *)(a2[3] + v6), vmovl_s16(v20));
      v23 = vld1_dup_s16(v16);
      v24 = vmlaq_s32(v22, *(int32x4_t *)(a2[4] + v6), vmovl_s16(v21));
      v25 = vld1_dup_s16(v17);
      v26 = vld1_dup_s16(result);
      v27 = (int16x8_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v24, *(int32x4_t *)(a2[5] + v6), vmovl_s16(v23)), *(int32x4_t *)(a2[6] + v6), vmovl_s16(v25)), *(int32x4_t *)(a2[7] + v6), vmovl_s16(v26)), v7), 0x16uLL), (int32x4_t)0), v8);
      *(int16x4_t *)v27.i8 = vmovn_s32((int32x4_t)v27);
      *(_DWORD *)(a3 + v5) = vmovn_s16(v27).u32[0];
      v5 += 4;
      v6 += 16;
    }
    while (v5 <= (a5 - 4));
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((int)v5 < a5)
  {
    v28 = 0;
    v29 = v5;
    v30 = a3 + v5;
    v31 = 4 * v5;
    v32 = a5 - v29;
    do
    {
      result = (const __int16 *)*(unsigned int *)(a2[2] + v31 + 4 * v28);
      v33 = *(_DWORD *)(a2[1] + v31 + 4 * v28) * a4[1]
          + *(_DWORD *)(*a2 + v31 + 4 * v28) * *a4
          + (_DWORD)result * a4[2]
          + *(_DWORD *)(a2[3] + v31 + 4 * v28) * a4[3]
          + *(_DWORD *)(a2[4] + v31 + 4 * v28) * a4[4]
          + *(_DWORD *)(a2[5] + v31 + 4 * v28) * a4[5]
          + *(_DWORD *)(a2[6] + v31 + 4 * v28) * a4[6]
          + *(_DWORD *)(a2[7] + v31 + 4 * v28) * a4[7]
          + 0x200000;
      v34 = (v33 >> 22) & ~(v33 >> 31);
      if (v34 >= 255)
        LOBYTE(v34) = -1;
      *(_BYTE *)(v30 + v28++) = v34;
    }
    while (v32 != v28);
  }
  return result;
}

uint64_t sub_10032CD90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453AB8;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_10032CEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_100453AF8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10032D0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10032D0F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10032D104(uint64_t a1)
{
  sub_10032DFAC(a1);
  operator delete();
}

_DWORD *sub_10032D128(_DWORD *result, int *a2, double a3, float a4, float a5, float a6, double a7, float a8, double a9, float a10)
{
  _DWORD *v10;
  unsigned int v11;
  signed int v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  signed int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v36;
  _DWORD v37[265];
  char v38;
  char v39;
  _DWORD __b[16];
  _QWORD v41[16];
  _QWORD v42[17];

  v10 = result;
  v11 = result[2];
  v12 = (result[60] + 15) & 0xFFFFFFF0;
  LODWORD(v13) = result[62];
  if ((v13 * v12) >= 0x109)
    operator new[]();
  v14 = 0.0;
  memset(v42, 0, 128);
  memset(v41, 0, sizeof(v41));
  if ((int)v13 >= 1)
  {
    result = memset(__b, 255, 4 * v13);
    v15 = v12;
    if ((_DWORD)v13 == 1)
    {
      v16 = 0;
LABEL_9:
      v20 = &v37[v16 * v12];
      v21 = &v41[v16];
      v22 = v13 - v16;
      do
      {
        *v21++ = v20;
        v20 = (_DWORD *)((char *)v20 + v15 * 4);
        --v22;
      }
      while (v22);
      goto LABEL_11;
    }
    v16 = v13 & 0xFFFFFFFE;
    v17 = &v41[1];
    v18 = v16;
    v19 = v37;
    do
    {
      *(v17 - 1) = v19;
      *v17 = &v19[v15];
      v19 += 2 * v12;
      v17 += 2;
      v18 -= 2;
    }
    while (v18);
    if (v16 != v13)
      goto LABEL_9;
  }
LABEL_11:
  v23 = *a2;
  if ((int)v23 < a2[1])
  {
    v24 = *((_QWORD *)v10 + 28) + 4 * (int)v23 * (int)v13;
    v34 = ((v11 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v13 >= 1)
      {
        v36 = v24;
        v25 = 0;
        LODWORD(v26) = 0;
        v27 = *(_DWORD *)(*((_QWORD *)v10 + 26) + 4 * v23) - (v13 >> 1) + 1;
        v28 = v13;
        do
        {
          v30 = v10[59];
          if ((int)(v27 + v25) >= v30)
            v31 = v30 - 1;
          else
            v31 = v27 + v25;
          if ((int)(v27 + v25) >= 0)
            v32 = v31;
          else
            v32 = 0;
          if ((int)v26 <= (int)v25)
            v26 = v25;
          else
            v26 = v26;
          if ((int)v26 < (int)v13)
          {
            while (v26 > 0xF || v32 != __b[v26])
            {
              if ((uint64_t)++v26 >= (int)v13)
                goto LABEL_15;
            }
            if (v26 > v25)
            {
              memcpy((void *)v41[v25], (const void *)v41[v26], 4 * v12);
              LODWORD(v13) = v10[62];
            }
          }
LABEL_15:
          if ((int)v25 >= v28)
            v29 = v28;
          else
            v29 = v25;
          if ((_DWORD)v26 == (_DWORD)v13)
            v28 = v29;
          v42[v25] = *((_QWORD *)v10 + 3) + **((_QWORD **)v10 + 10) * v32;
          __b[v25++] = v32;
        }
        while ((uint64_t)v25 < (int)v13);
        v33 = v10[60];
        if ((int)v13 <= v28)
        {
          v24 = v36;
          goto LABEL_41;
        }
        sub_10032D4CC(v14, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v39, (uint64_t)&v42[v28], (uint64_t)&v41[v28], v13 - v28, *((_QWORD *)v10 + 25), *((float **)v10 + 27), v10[58], v33, v34, v10[63], v10[64]);
        v24 = v36;
      }
      v33 = v10[60];
LABEL_41:
      result = (_DWORD *)sub_10032D900((uint64_t)&v38, (uint64_t)v41, (uint16x8_t *)(*((_QWORD *)v10 + 15) + *((_QWORD *)v10 + 23) * v23++), v24, v33);
      v13 = (int)v10[62];
      v24 += 4 * v13;
    }
    while (v23 < a2[1]);
  }
  return result;
}

void sub_10032D490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

void sub_10032D4CC(double a1, float a2, float a3, float a4, double a5, float a6, double a7, float a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, float *a14, unsigned int a15, int a16, unsigned int a17, int a18, int a19)
{
  float v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  float v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  signed int v36;
  unsigned int v37;
  int v38;
  int v39;
  signed int v40;
  unsigned int v41;
  int v42;
  int v43;
  signed int v44;
  unsigned int v45;
  int v46;
  int v47;
  signed int v48;
  unsigned int v49;
  int v50;
  int v51;
  signed int v52;
  unsigned int v53;
  int v54;
  int v55;
  signed int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  signed int v61;
  unsigned int v62;
  signed int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  float *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  float v73;
  unsigned int v74;
  float v75;
  unsigned int v76;
  float v77;
  unsigned int v78;
  float v79;
  unsigned int v80;
  float v81;
  unsigned int v82;
  float v83;

  if (a12 >= 1)
  {
    v21 = 0;
    v22 = 2 * a17;
    v23 = 4 * a17;
    v24 = 3 * a17;
    v25 = -3 * a17;
    if (a17 <= 1)
      v26 = 1;
    else
      v26 = a17;
    do
    {
      LODWORD(v27) = 0;
      v28 = *(_QWORD *)(a10 + 8 * v21);
      v29 = *(_QWORD *)(a11 + 8 * v21);
      v30 = a18;
      while (1)
      {
        if ((int)v27 < v30)
        {
          v27 = (int)v27;
          do
          {
            v33 = *(_DWORD *)(a13 + 4 * v27);
            v34 = v25 + v33;
            v35 = v24 - v33;
            v36 = v25 + v33;
            if (v25 + v33 >= a15)
            {
              v37 = ((v34 & ~(v34 >> 31)) + v35 - ((v34 & ~(v34 >> 31)) + v35 != 0)) / v26;
              if ((v34 & ~(v34 >> 31)) + v35)
                ++v37;
              v36 = v33 + a17 * (v37 - 2);
              do
                v36 -= a17;
              while (v36 >= (int)a15);
            }
            v38 = v34 + a17;
            v39 = v35 - a17;
            v40 = v33 - v22;
            if (v33 - v22 >= a15)
            {
              v41 = ((v38 & ~(v38 >> 31)) + v39 - ((v38 & ~(v38 >> 31)) + v39 != 0)) / v26;
              if ((v38 & ~(v38 >> 31)) + v39)
                ++v41;
              v40 = v33 + a17 * (v41 - 1);
              do
                v40 -= a17;
              while (v40 >= (int)a15);
            }
            v42 = v38 + a17;
            v43 = v39 - a17;
            v44 = v33 - a17;
            if (v33 - a17 >= a15)
            {
              v45 = ((v42 & ~(v42 >> 31)) + v43 - ((v42 & ~(v42 >> 31)) + v43 != 0)) / v26;
              if ((v42 & ~(v42 >> 31)) + v43)
                ++v45;
              v44 = v33 + v45 * a17;
              do
                v44 -= a17;
              while (v44 >= (int)a15);
            }
            v46 = v42 + a17;
            v47 = v43 - a17;
            v48 = *(_DWORD *)(a13 + 4 * v27);
            if (v33 >= a15)
            {
              v49 = ((v46 & ~(v46 >> 31)) + v47 - ((v46 & ~(v46 >> 31)) + v47 != 0)) / v26;
              if ((v46 & ~(v46 >> 31)) + v47)
                ++v49;
              v48 = v33 + a17 + a17 * v49;
              do
                v48 -= a17;
              while (v48 >= (int)a15);
            }
            v50 = v46 + a17;
            v51 = v47 - a17;
            v52 = v33 + a17;
            if (v33 + a17 >= a15)
            {
              v53 = ((v50 & ~(v50 >> 31)) + v51 - ((v50 & ~(v50 >> 31)) + v51 != 0)) / v26;
              if ((v50 & ~(v50 >> 31)) + v51)
                ++v53;
              v52 = v33 + a17 * (v53 + 2);
              do
                v52 -= a17;
              while (v52 >= (int)a15);
            }
            v54 = v50 + a17;
            v55 = v51 - a17;
            v56 = v22 + v33;
            if (v22 + v33 >= a15)
            {
              v57 = (v54 & ~(v54 >> 31)) + v55;
              v58 = (v57 - (v57 != 0)) / v26;
              if (v57)
                ++v58;
              v56 = v33 + a17 * (v58 + 3);
              do
                v56 -= a17;
              while (v56 >= (int)a15);
            }
            LOWORD(v19) = *(_WORD *)(v28 + 2 * v36);
            v59 = v54 + a17;
            v60 = v55 - a17;
            v61 = v24 + v33;
            if (v24 + v33 >= a15)
            {
              v62 = ((v59 & ~(v59 >> 31)) + v60 - ((v59 & ~(v59 >> 31)) + v60 != 0)) / v26;
              if ((v59 & ~(v59 >> 31)) + v60)
                ++v62;
              v61 = v33 + a17 * (v62 + 4);
              do
                v61 -= a17;
              while (v61 >= (int)a15);
            }
            LOWORD(v20) = *(_WORD *)(v28 + 2 * v61);
            v63 = v23 + v33;
            if (v23 + v33 >= a15)
            {
              v64 = ((v59 + a17) & ~((int)(v59 + a17) >> 31)) + v60 - a17;
              v65 = (v64 - (v64 != 0)) / v26;
              if (((v59 + a17) & ~((int)(v59 + a17) >> 31)) + v60 - a17)
                ++v65;
              v63 = v33 + a17 * (v65 + 5);
              do
                v63 -= a17;
              while (v63 >= (int)a15);
            }
            v19 = (float)((float)LODWORD(v19) * *a14) + 0.0;
            LOWORD(a8) = *(_WORD *)(v28 + 2 * v40);
            a8 = v19 + (float)((float)LODWORD(a8) * a14[1]);
            LOWORD(a6) = *(_WORD *)(v28 + 2 * v44);
            a6 = a8 + (float)((float)LODWORD(a6) * a14[2]);
            LOWORD(a2) = *(_WORD *)(v28 + 2 * v56);
            LOWORD(a3) = *(_WORD *)(v28 + 2 * v52);
            LOWORD(a4) = *(_WORD *)(v28 + 2 * v48);
            v31 = (float)((float)(a6 + (float)((float)LODWORD(a4) * a14[3])) + (float)((float)LODWORD(a3) * a14[4]))
                + (float)((float)LODWORD(a2) * a14[5]);
            *(float *)&v32 = (float)v20;
            LOWORD(v32) = *(_WORD *)(v28 + 2 * v63);
            a3 = (float)v32;
            a4 = a14[7];
            a2 = (float)(v31 + (float)((float)v20 * a14[6])) + (float)(a3 * a4);
            *(float *)(v29 + 4 * v27++) = a2;
            a14 += 8;
          }
          while (v27 != v30);
          LODWORD(v27) = v30;
        }
        if (v30 == a16)
          break;
        v30 = a16;
        if ((int)v27 < a19)
        {
          v66 = (int)v27;
          v67 = 4 * (int)v27;
          v68 = (int *)(a13 + v67);
          v69 = (float *)(v29 + v67);
          v70 = a19 - v66;
          do
          {
            v71 = *v68++;
            LOWORD(a2) = *(_WORD *)(v28 + 2 * ((int)v71 - v24));
            LOWORD(a3) = *(_WORD *)(v28 + 2 * ((int)v71 - v22));
            *(float *)&v72 = a14[1] * (float)LODWORD(a3);
            v73 = *(float *)&v72 + (float)((float)LODWORD(a2) * *a14);
            LOWORD(v72) = *(_WORD *)(v28 + 2 * (int)(v71 - a17));
            *(float *)&v74 = (float)v72;
            v75 = v73 + (float)(*(float *)&v74 * a14[2]);
            LOWORD(v74) = *(_WORD *)(v28 + 2 * v71);
            *(float *)&v76 = (float)v74;
            v77 = v75 + (float)(*(float *)&v76 * a14[3]);
            LOWORD(v76) = *(_WORD *)(v28 + 2 * (int)(v71 + a17));
            *(float *)&v78 = (float)v76;
            v79 = v77 + (float)(*(float *)&v78 * a14[4]);
            LOWORD(v78) = *(_WORD *)(v28 + 2 * ((int)v71 + v22));
            *(float *)&v80 = (float)v78;
            v81 = v79 + (float)(*(float *)&v80 * a14[5]);
            LOWORD(v80) = *(_WORD *)(v28 + 2 * ((int)v71 + v24));
            *(float *)&v82 = (float)v80;
            a4 = a14[6];
            v83 = v81 + (float)(*(float *)&v82 * a4);
            LOWORD(v82) = *(_WORD *)(v28 + 2 * ((int)v71 + v23));
            a3 = (float)v82;
            a2 = v83 + (float)(a3 * a14[7]);
            *v69++ = a2;
            a14 += 8;
            --v70;
          }
          while (v70);
          LODWORD(v27) = a19;
          v30 = a16;
        }
      }
      a14 -= 8 * a16;
      ++v21;
    }
    while (v21 != a12);
  }
}

uint64_t sub_10032D900(uint64_t a1, uint64_t a2, uint16x8_t *a3, uint64_t a4, int a5)
{
  uint64_t result;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int16x4_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int32x4_t v28;
  float v29;
  float v30;
  int32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int8 *v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  int v52;
  char v53;

  result = sub_10032DBE8((uint64_t)&v53, (float32x4_t **)a2, a3, (const float *)a4, a5);
  if ((int)result <= a5 - 4)
  {
    v10 = (int)result;
    v11 = *(float *)(a4 + 16);
    v12 = *(float *)(a4 + 20);
    v13 = *(float *)a4;
    v14 = *(float *)(a4 + 4);
    v15 = (int16x4_t *)((char *)a3 + 2 * (int)result);
    v16 = 4 * (int)result;
    v17 = *(_QWORD *)(a2 + 24) + 8;
    v18 = *(_QWORD *)(a2 + 32) + 12;
    v19 = *(_QWORD *)(a2 + 40) + 12;
    v20 = *(_QWORD *)(a2 + 48) + 12;
    v21 = *(float *)(a4 + 8);
    v22 = *(float *)(a4 + 12);
    v23 = *(_QWORD *)(a2 + 56) + 12;
    v24 = *(_QWORD *)a2 + 8;
    v25 = *(_QWORD *)(a2 + 8) + 8;
    v26 = *(_QWORD *)(a2 + 16) + 8;
    v27 = 4 * v10;
    v28.i64[0] = 0xFFFF0000FFFFLL;
    v28.i64[1] = 0xFFFF0000FFFFLL;
    v29 = *(float *)(a4 + 24);
    v30 = *(float *)(a4 + 28);
    do
    {
      v31.i32[0] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v16 - 8))+ (float)(*(float *)(v25 + v16 - 8) * v14))+ (float)(*(float *)(v26 + v16 - 8) * v21))+ (float)(*(float *)(v17 + v16 - 8) * v22))+ (float)(*(float *)(v18 + v16 - 12) * v11))+ (float)(*(float *)(v19 + v16 - 12) * v12))+ (float)(*(float *)(v20 + v16 - 12) * v29))+ (float)(*(float *)(v23 + v16 - 12) * v30));
      v31.i32[1] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v16 - 4))+ (float)(*(float *)(v25 + v16 - 4) * v14))+ (float)(*(float *)(v26 + v16 - 4) * v21))+ (float)(*(float *)(v17 + v16 - 4) * v22))+ (float)(*(float *)(v18 + v16 - 8) * v11))+ (float)(*(float *)(v19 + v16 - 8) * v12))+ (float)(*(float *)(v20 + v16 - 8) * v29))+ (float)(*(float *)(v23 + v16 - 8) * v30));
      v31.i32[2] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v27))+ (float)(*(float *)(v25 + v27) * v14))+ (float)(*(float *)(v26 + v27) * v21))+ (float)(*(float *)(v17 + v27) * v22))+ (float)(*(float *)(v18 + v16 - 4) * v11))+ (float)(*(float *)(v19 + v16 - 4) * v12))+ (float)(*(float *)(v20 + v16 - 4) * v29))+ (float)(*(float *)(v23 + v16 - 4) * v30));
      v31.i32[3] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v16 + 4))+ (float)(*(float *)(v25 + v16 + 4) * v14))+ (float)(*(float *)(v26 + v16 + 4) * v21))+ (float)(*(float *)(v17 + v16 + 4) * v22))+ (float)(*(float *)(v18 + v27) * v11))+ (float)(*(float *)(v19 + v27) * v12))+ (float)(*(float *)(v20 + v27) * v29))+ (float)(*(float *)(v23 + v27) * v30));
      *v15++ = vmovn_s32(vminq_s32(vmaxq_s32(v31, (int32x4_t)0), v28));
      v10 += 4;
      v17 += 16;
      v18 += 16;
      v19 += 16;
      v20 += 16;
      v23 += 16;
      v24 += 16;
      v25 += 16;
      v26 += 16;
    }
    while (v10 <= a5 - 4);
    result = v10;
  }
  if ((int)result < a5)
  {
    v32 = 0;
    v33 = 4 * (int)result;
    v34 = *(_QWORD *)a2 + v33;
    v35 = *(_QWORD *)(a2 + 8) + v33;
    v36 = *(_QWORD *)(a2 + 16) + v33;
    v37 = *(_QWORD *)(a2 + 24) + v33;
    v38 = *(_QWORD *)(a2 + 32) + v33;
    v39 = *(_QWORD *)(a2 + 40) + v33;
    v40 = *(_QWORD *)(a2 + 48) + v33;
    v41 = *(_QWORD *)(a2 + 56) + v33;
    v42 = &a3->i8[2 * (int)result];
    v43 = *(float *)a4;
    v44 = *(float *)(a4 + 4);
    v45 = *(float *)(a4 + 8);
    v46 = *(float *)(a4 + 12);
    v47 = *(float *)(a4 + 16);
    v48 = *(float *)(a4 + 20);
    result = a5 - (uint64_t)(int)result;
    v49 = *(float *)(a4 + 24);
    v50 = *(float *)(a4 + 28);
    do
    {
      v51 = rintf((float)((float)((float)((float)((float)((float)((float)(*(float *)(v35 + 4 * v32) * v44)+ (float)(*(float *)(v34 + 4 * v32) * v43))+ (float)(*(float *)(v36 + 4 * v32) * v45))+ (float)(*(float *)(v37 + 4 * v32) * v46))+ (float)(*(float *)(v38 + 4 * v32) * v47))+ (float)(*(float *)(v39 + 4 * v32) * v48))+ (float)(*(float *)(v40 + 4 * v32) * v49))+ (float)(*(float *)(v41 + 4 * v32) * v50));
      v52 = (uint64_t)v51 & ~((int)(uint64_t)v51 >> 31);
      if (v52 >= 0xFFFF)
        LOWORD(v52) = -1;
      *(_WORD *)&v42[2 * v32++] = v52;
    }
    while (result != v32);
  }
  return result;
}

uint64_t sub_10032DBE8(uint64_t a1, float32x4_t **a2, uint16x8_t *a3, const float *a4, int a5)
{
  const float *v6;
  float32x4_t v7;
  uint64_t result;
  int v9;
  float32x4_t v10;
  const float *v11;
  float32x4_t v12;
  const float *v13;
  float32x4_t v14;
  const float *v15;
  float32x4_t v16;
  const float *v17;
  float32x4_t v18;
  const float *v19;
  float32x4_t v20;
  const float *v21;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t *v26;
  float32x4_t *v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  unsigned __int8 v48;
  float32x4_t v49;
  unsigned __int8 v50;
  __int128 v51;
  int v52;
  __int128 v53;
  int v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t *v101;
  float32x4_t *v102;
  uint16x8_t *v103;
  uint16x8_t *v104;
  int v105;
  int v106;
  float32x4_t *v107;
  float32x4_t *v108;
  int v109;
  int v110;
  float32x4_t *v111;
  float32x4_t *v112;
  float32x4_t *v113;
  float32x4_t *v114;
  float32x4_t *v115;
  float32x4_t *v116;
  float32x4_t *v117;
  float32x4_t *v118;
  float32x4_t *v119;
  float32x4_t *v120;
  float32x4_t *v121;
  float32x4_t *v122;

  v7 = vld1q_dup_f32(a4);
  v6 = a4 + 1;
  result = 0;
  v9 = a5 - 8;
  if (a5 >= 8)
  {
    v10 = vld1q_dup_f32(v6);
    v11 = a4 + 2;
    v12 = vld1q_dup_f32(v11);
    v13 = a4 + 3;
    v14 = vld1q_dup_f32(v13);
    v15 = a4 + 4;
    v16 = vld1q_dup_f32(v15);
    v17 = a4 + 5;
    v18 = vld1q_dup_f32(v17);
    v19 = a4 + 6;
    v20 = vld1q_dup_f32(v19);
    v21 = a4 + 7;
    v22 = a2[7] + 1;
    v23 = *a2 + 1;
    v24 = a2[6] + 1;
    v25 = vld1q_dup_f32(v21);
    v26 = a2[1] + 1;
    v27 = a2[5] + 1;
    v28 = a2[2] + 1;
    v29 = a2[4] + 1;
    v30 = a2[3] + 1;
    v31 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    do
    {
      v32 = v23[-1];
      v33 = *v23;
      v34 = v26[-1];
      v35 = *v26;
      v36 = v28[-1];
      v37 = *v28;
      v38 = v30[-1];
      v39 = *v30;
      v40 = v29[-1];
      v41 = *v29;
      v42 = v27[-1];
      v43 = *v27;
      v44 = v24[-1];
      v45 = *v24;
      v47 = v22[-1];
      v46 = *v22;
      v48 = atomic_load((unsigned __int8 *)qword_10048AA40);
      if ((v48 & 1) == 0)
      {
        v109 = result;
        v101 = v22;
        v103 = a3;
        v105 = v9;
        v107 = v23;
        v111 = v24;
        v113 = v26;
        v115 = v27;
        v117 = v28;
        v119 = v29;
        v121 = v30;
        v97 = v10;
        v99 = v7;
        v93 = v14;
        v95 = v12;
        v89 = v18;
        v91 = v16;
        v85 = v25;
        v87 = v20;
        v81 = v26[-1];
        v83 = v23[-1];
        v77 = v30[-1];
        v79 = v28[-1];
        v73 = v27[-1];
        v75 = v29[-1];
        v69 = v22[-1];
        v71 = v24[-1];
        v65 = *v26;
        v67 = *v23;
        v61 = *v30;
        v63 = *v28;
        v57 = *v27;
        v59 = *v29;
        v55 = *v24;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA40);
        v45 = v55;
        v43 = v57;
        v41 = v59;
        v39 = v61;
        v37 = v63;
        v35 = v65;
        v33 = v67;
        v47 = v69;
        v44 = v71;
        v42 = v73;
        v40 = v75;
        v38 = v77;
        v36 = v79;
        v34 = v81;
        v32 = v83;
        *(_QWORD *)&v51 = 0x3F0000003F000000;
        *((_QWORD *)&v51 + 1) = 0x3F0000003F000000;
        v25 = v85;
        v20 = v87;
        v18 = v89;
        v16 = v91;
        v14 = v93;
        v12 = v95;
        v10 = v97;
        v7 = v99;
        v31 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v29 = v119;
        v30 = v121;
        v27 = v115;
        v28 = v117;
        v24 = v111;
        v26 = v113;
        v23 = v107;
        v22 = v101;
        a3 = v103;
        v9 = v105;
        v52 = result;
        LODWORD(result) = v109;
        if (v52)
        {
          xmmword_10048AA30 = v51;
          __cxa_guard_release(qword_10048AA40);
          v45 = v55;
          v43 = v57;
          v41 = v59;
          v39 = v61;
          v37 = v63;
          v35 = v65;
          v33 = v67;
          v47 = v69;
          v44 = v71;
          v42 = v73;
          v40 = v75;
          v38 = v77;
          v36 = v79;
          v34 = v81;
          v32 = v83;
          v25 = v85;
          v20 = v87;
          v18 = v89;
          v16 = v91;
          v14 = v93;
          v12 = v95;
          v10 = v97;
          v7 = v99;
          v31 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v29 = v119;
          v30 = v121;
          v27 = v115;
          v28 = v117;
          v24 = v111;
          v26 = v113;
          v23 = v107;
          v22 = v101;
          a3 = v103;
          v9 = v105;
          LODWORD(result) = v109;
        }
      }
      v49 = v31[163];
      v50 = atomic_load((unsigned __int8 *)qword_10048AA40);
      if ((v50 & 1) == 0)
      {
        v110 = result;
        v102 = v22;
        v104 = a3;
        v106 = v9;
        v108 = v23;
        v112 = v24;
        v114 = v26;
        v116 = v27;
        v118 = v28;
        v120 = v29;
        v122 = v30;
        v98 = v10;
        v100 = v7;
        v94 = v14;
        v96 = v12;
        v90 = v18;
        v92 = v16;
        v86 = v25;
        v88 = v20;
        v82 = v34;
        v84 = v32;
        v78 = v38;
        v80 = v36;
        v74 = v42;
        v76 = v40;
        v70 = v47;
        v72 = v44;
        v66 = v35;
        v68 = v33;
        v62 = v39;
        v64 = v37;
        v58 = v43;
        v60 = v41;
        v56 = v45;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA40);
        v45 = v56;
        v43 = v58;
        v41 = v60;
        v39 = v62;
        v37 = v64;
        v35 = v66;
        v33 = v68;
        v47 = v70;
        v44 = v72;
        v42 = v74;
        v40 = v76;
        v38 = v78;
        v36 = v80;
        v34 = v82;
        v32 = v84;
        *(_QWORD *)&v53 = 0x3F0000003F000000;
        *((_QWORD *)&v53 + 1) = 0x3F0000003F000000;
        v25 = v86;
        v20 = v88;
        v18 = v90;
        v16 = v92;
        v14 = v94;
        v12 = v96;
        v10 = v98;
        v7 = v100;
        v31 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v29 = v120;
        v30 = v122;
        v27 = v116;
        v28 = v118;
        v24 = v112;
        v26 = v114;
        v23 = v108;
        v22 = v102;
        a3 = v104;
        v9 = v106;
        v54 = result;
        LODWORD(result) = v110;
        if (v54)
        {
          xmmword_10048AA30 = v53;
          __cxa_guard_release(qword_10048AA40);
          v45 = v56;
          v43 = v58;
          v41 = v60;
          v39 = v62;
          v37 = v64;
          v35 = v66;
          v33 = v68;
          v47 = v70;
          v44 = v72;
          v42 = v74;
          v40 = v76;
          v38 = v78;
          v36 = v80;
          v34 = v82;
          v32 = v84;
          v25 = v86;
          v20 = v88;
          v18 = v90;
          v16 = v92;
          v14 = v94;
          v12 = v96;
          v10 = v98;
          v7 = v100;
          v31 = (float32x4_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v29 = v120;
          v30 = v122;
          v27 = v116;
          v28 = v118;
          v24 = v112;
          v26 = v114;
          v23 = v108;
          v22 = v102;
          a3 = v104;
          v9 = v106;
          LODWORD(result) = v110;
        }
      }
      *a3++ = vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v7, v32), v34, v10), v36, v12), v38, v14), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v16, v40), v42, v18), v44, v20), v47, v25)), v49))), vcvtq_u32_f32(vaddq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v7, v33), v35, v10), v37, v12), v39, v14), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v16, v41), v43, v18), v45, v20), v46, v25)), v31[163])));
      result = (result + 8);
      v22 += 2;
      v23 += 2;
      v24 += 2;
      v26 += 2;
      v27 += 2;
      v28 += 2;
      v29 += 2;
      v30 += 2;
    }
    while (v9 >= (int)result);
  }
  return result;
}

uint64_t sub_10032DFAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453AF8;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_10032E0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_100453B38;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10032E2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10032E30C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10032E320(uint64_t a1)
{
  sub_10032F518(a1);
  operator delete();
}

_DWORD *sub_10032E344(_DWORD *result, int *a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  _DWORD *v8;
  unsigned int v9;
  signed int v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  signed int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v34;
  _DWORD v35[265];
  char v36;
  char v37;
  _DWORD __b[16];
  _QWORD v39[16];
  _QWORD v40[17];

  v8 = result;
  v9 = result[2];
  v10 = (result[60] + 15) & 0xFFFFFFF0;
  LODWORD(v11) = result[62];
  if ((v11 * v10) >= 0x109)
    operator new[]();
  v12 = 0.0;
  memset(v40, 0, 128);
  memset(v39, 0, sizeof(v39));
  if ((int)v11 >= 1)
  {
    result = memset(__b, 255, 4 * v11);
    v13 = v10;
    if ((_DWORD)v11 == 1)
    {
      v14 = 0;
LABEL_9:
      v18 = &v35[v14 * v10];
      v19 = &v39[v14];
      v20 = v11 - v14;
      do
      {
        *v19++ = v18;
        v18 = (_DWORD *)((char *)v18 + v13 * 4);
        --v20;
      }
      while (v20);
      goto LABEL_11;
    }
    v14 = v11 & 0xFFFFFFFE;
    v15 = &v39[1];
    v16 = v14;
    v17 = v35;
    do
    {
      *(v15 - 1) = v17;
      *v15 = &v17[v13];
      v17 += 2 * v10;
      v15 += 2;
      v16 -= 2;
    }
    while (v16);
    if (v14 != v11)
      goto LABEL_9;
  }
LABEL_11:
  v21 = *a2;
  if ((int)v21 < a2[1])
  {
    v22 = *((_QWORD *)v8 + 28) + 4 * (int)v21 * (int)v11;
    v32 = ((v9 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v11 >= 1)
      {
        v34 = v22;
        v23 = 0;
        LODWORD(v24) = 0;
        v25 = *(_DWORD *)(*((_QWORD *)v8 + 26) + 4 * v21) - (v11 >> 1) + 1;
        v26 = v11;
        do
        {
          v28 = v8[59];
          if ((int)(v25 + v23) >= v28)
            v29 = v28 - 1;
          else
            v29 = v25 + v23;
          if ((int)(v25 + v23) >= 0)
            v30 = v29;
          else
            v30 = 0;
          if ((int)v24 <= (int)v23)
            v24 = v23;
          else
            v24 = v24;
          if ((int)v24 < (int)v11)
          {
            while (v24 > 0xF || v30 != __b[v24])
            {
              if ((uint64_t)++v24 >= (int)v11)
                goto LABEL_15;
            }
            if (v24 > v23)
            {
              memcpy((void *)v39[v23], (const void *)v39[v24], 4 * v10);
              LODWORD(v11) = v8[62];
            }
          }
LABEL_15:
          if ((int)v23 >= v26)
            v27 = v26;
          else
            v27 = v23;
          if ((_DWORD)v24 == (_DWORD)v11)
            v26 = v27;
          v40[v23] = *((_QWORD *)v8 + 3) + **((_QWORD **)v8 + 10) * v30;
          __b[v23++] = v30;
        }
        while ((uint64_t)v23 < (int)v11);
        v31 = v8[60];
        if ((int)v11 <= v26)
        {
          v22 = v34;
          goto LABEL_41;
        }
        sub_10032E6E8(v12, a4, a5, a6, a7, a8, (uint64_t)&v37, (uint64_t)&v40[v26], (uint64_t)&v39[v26], v11 - v26, *((_QWORD *)v8 + 25), *((_QWORD *)v8 + 27), v8[58], v31, v32, v8[63], v8[64]);
        v22 = v34;
      }
      v31 = v8[60];
LABEL_41:
      result = (_DWORD *)sub_10032EB5C((uint64_t)&v36, (uint64_t)v39, (int16x8_t *)(*((_QWORD *)v8 + 15) + *((_QWORD *)v8 + 23) * v21++), v22, v31);
      v11 = (int)v8[62];
      v22 += 4 * v11;
    }
    while (v21 < a2[1]);
  }
  return result;
}

void sub_10032E6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

void sub_10032E6E8(double a1, double a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, unsigned int a15, int a16, int a17)
{
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int16x4_t v31;
  unsigned int v32;
  int v33;
  int v34;
  signed int v35;
  unsigned int v36;
  int v37;
  int v38;
  signed int v39;
  unsigned int v40;
  int v41;
  int v42;
  signed int v43;
  unsigned int v44;
  int v45;
  int v46;
  signed int v47;
  unsigned int v48;
  int v49;
  int v50;
  signed int v51;
  unsigned int v52;
  int v53;
  int v54;
  signed int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  signed int v60;
  unsigned int v61;
  signed int v62;
  BOOL v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  int v73;
  int16x4_t v74;
  int16x4_t v75;
  int16x4_t v76;

  if (a10 >= 1)
  {
    v21 = 0;
    v22 = 2 * a15;
    v23 = 4 * a15;
    v24 = 3 * a15;
    v25 = -3 * a15;
    if (a15 <= 1)
      v26 = 1;
    else
      v26 = a15;
    do
    {
      LODWORD(v27) = 0;
      v28 = *(_QWORD *)(a8 + 8 * v21);
      v29 = *(_QWORD *)(a9 + 8 * v21);
      v30 = a16;
      while (1)
      {
        if ((int)v27 < v30)
        {
          v27 = (int)v27;
          do
          {
            v32 = *(_DWORD *)(a11 + 4 * v27);
            v33 = v25 + v32;
            v34 = v24 - v32;
            v35 = v25 + v32;
            if (v25 + v32 >= a13)
            {
              v36 = ((v33 & ~(v33 >> 31)) + v34 - ((v33 & ~(v33 >> 31)) + v34 != 0)) / v26;
              if ((v33 & ~(v33 >> 31)) + v34)
                ++v36;
              v35 = v32 + a15 * (v36 - 2);
              do
                v35 -= a15;
              while (v35 >= (int)a13);
            }
            v37 = v33 + a15;
            v38 = v34 - a15;
            v39 = v32 - v22;
            if (v32 - v22 >= a13)
            {
              v40 = ((v37 & ~(v37 >> 31)) + v38 - ((v37 & ~(v37 >> 31)) + v38 != 0)) / v26;
              if ((v37 & ~(v37 >> 31)) + v38)
                ++v40;
              v39 = v32 + a15 * (v40 - 1);
              do
                v39 -= a15;
              while (v39 >= (int)a13);
            }
            v41 = v37 + a15;
            v42 = v38 - a15;
            v43 = v32 - a15;
            if (v32 - a15 >= a13)
            {
              v44 = ((v41 & ~(v41 >> 31)) + v42 - ((v41 & ~(v41 >> 31)) + v42 != 0)) / v26;
              if ((v41 & ~(v41 >> 31)) + v42)
                ++v44;
              v43 = v32 + v44 * a15;
              do
                v43 -= a15;
              while (v43 >= (int)a13);
            }
            v45 = v41 + a15;
            v46 = v42 - a15;
            v47 = *(_DWORD *)(a11 + 4 * v27);
            if (v32 >= a13)
            {
              v48 = ((v45 & ~(v45 >> 31)) + v46 - ((v45 & ~(v45 >> 31)) + v46 != 0)) / v26;
              if ((v45 & ~(v45 >> 31)) + v46)
                ++v48;
              v47 = v32 + a15 + a15 * v48;
              do
                v47 -= a15;
              while (v47 >= (int)a13);
            }
            v49 = v45 + a15;
            v50 = v46 - a15;
            v51 = v32 + a15;
            if (v32 + a15 >= a13)
            {
              v52 = ((v49 & ~(v49 >> 31)) + v50 - ((v49 & ~(v49 >> 31)) + v50 != 0)) / v26;
              if ((v49 & ~(v49 >> 31)) + v50)
                ++v52;
              v51 = v32 + a15 * (v52 + 2);
              do
                v51 -= a15;
              while (v51 >= (int)a13);
            }
            v53 = v49 + a15;
            v54 = v50 - a15;
            v55 = v22 + v32;
            if (v22 + v32 >= a13)
            {
              v56 = (v53 & ~(v53 >> 31)) + v54;
              v57 = (v56 - (v56 != 0)) / v26;
              if (v56)
                ++v57;
              v55 = v32 + a15 * (v57 + 3);
              do
                v55 -= a15;
              while (v55 >= (int)a13);
            }
            v19.i16[0] = *(_WORD *)(v28 + 2 * v35);
            v18.i16[0] = *(_WORD *)(v28 + 2 * v39);
            v58 = v53 + a15;
            v59 = v54 - a15;
            v60 = v24 + v32;
            if (v24 + v32 >= a13)
            {
              v61 = ((v58 & ~(v58 >> 31)) + v59 - ((v58 & ~(v58 >> 31)) + v59 != 0)) / v26;
              if ((v58 & ~(v58 >> 31)) + v59)
                ++v61;
              v60 = v32 + a15 * (v61 + 4);
              do
                v60 -= a15;
              while (v60 >= (int)a13);
            }
            v62 = v23 + v32;
            if (v23 + v32 >= a13)
            {
              v64 = ((v58 + a15) & ~((int)(v58 + a15) >> 31)) + v59 - a15;
              v63 = v64 == 0;
              v65 = (v64 - (v64 != 0)) / v26;
              if (!v63)
                ++v65;
              v62 = v32 + a15 * (v65 + 5);
              do
                v62 -= a15;
              while (v62 >= (int)a13);
            }
            v19 = (int16x4_t)vmovl_s16(v19).u64[0];
            *(float *)v19.i32 = (float)v19.i32[0];
            v18 = (int16x4_t)vmovl_s16(v18).u64[0];
            *(float *)v18.i32 = (float)v18.i32[0];
            v17.i16[0] = *(_WORD *)(v28 + 2 * v43);
            v17 = (int16x4_t)vmovl_s16(v17).u64[0];
            *(float *)v17.i32 = (float)v17.i32[0];
            LOWORD(a6) = *(_WORD *)(v28 + 2 * v47);
            *(_QWORD *)&a6 = vmovl_s16(*(int16x4_t *)&a6).u64[0];
            *(float *)&a6 = (float)SLODWORD(a6);
            LOWORD(a4) = *(_WORD *)(v28 + 2 * v51);
            *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
            LOWORD(a2) = *(_WORD *)(v28 + 2 * v55);
            *(_QWORD *)&a2 = vmovl_s16(*(int16x4_t *)&a2).u64[0];
            v20.i16[0] = *(_WORD *)(v28 + 2 * v60);
            v31 = (int16x4_t)vmovl_s16(v20).u64[0];
            *(float *)v31.i32 = (float)v31.i32[0];
            *(float *)&a2 = (float)((float)((float)((float)((float)((float)((float)(*(float *)v19.i32 * *(float *)a12)
                                                                          + 0.0)
                                                                  + (float)(*(float *)v18.i32 * *(float *)(a12 + 4)))
                                                          + (float)(*(float *)v17.i32 * *(float *)(a12 + 8)))
                                                  + (float)(*(float *)&a6 * *(float *)(a12 + 12)))
                                          + (float)((float)SLODWORD(a4) * *(float *)(a12 + 16)))
                                  + (float)((float)SLODWORD(a2) * *(float *)(a12 + 20)))
                          + (float)(*(float *)v31.i32 * *(float *)(a12 + 24));
            v31.i16[0] = *(_WORD *)(v28 + 2 * v62);
            *(_QWORD *)&a3 = vmovl_s16(v31).u64[0];
            *(float *)&a3 = (float)SLODWORD(a3);
            LODWORD(a4) = *(_DWORD *)(a12 + 28);
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)&a3 * *(float *)&a4);
            *(_DWORD *)(v29 + 4 * v27++) = LODWORD(a2);
            a12 += 32;
          }
          while (v27 != v30);
          LODWORD(v27) = v30;
        }
        if (v30 == a14)
          break;
        v30 = a14;
        if ((int)v27 < a17)
        {
          v66 = (int)v27;
          v67 = 4 * (int)v27;
          v68 = (int *)(a11 + v67);
          v69 = (_DWORD *)(v29 + v67);
          v70 = a17 - v66;
          do
          {
            v71 = *v68++;
            LOWORD(a2) = *(_WORD *)(v28 + 2 * ((int)v71 - v24));
            *(_QWORD *)&a2 = vmovl_s16(*(int16x4_t *)&a2).u64[0];
            LOWORD(a3) = *(_WORD *)(v28 + 2 * ((int)v71 - v22));
            LODWORD(a4) = *(_DWORD *)a12;
            LODWORD(a5) = *(_DWORD *)(a12 + 4);
            v72 = *(float *)&a5 * (float)vmovl_s16(*(int16x4_t *)&a3).i32[0];
            LOWORD(a5) = *(_WORD *)(v28 + 2 * (int)(v71 - a15));
            LOWORD(a4) = *(_WORD *)(v28 + 2 * v71);
            LODWORD(a6) = *(_DWORD *)(a12 + 12);
            *(float *)&a2 = (float)(v72 + (float)((float)SLODWORD(a2) * *(float *)a12))
                          + (float)((float)vmovl_s16(*(int16x4_t *)&a5).i32[0] * *(float *)(a12 + 8));
            v73 = vmovl_s16(*(int16x4_t *)&a4).u32[0];
            LOWORD(a4) = *(_WORD *)(v28 + 2 * (int)(v71 + a15));
            *(float *)&a2 = *(float *)&a2 + (float)((float)v73 * *(float *)&a6);
            v74 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a4).u64[0];
            *(float *)v74.i32 = (float)v74.i32[0];
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)v74.i32 * *(float *)(a12 + 16));
            v74.i16[0] = *(_WORD *)(v28 + 2 * ((int)v71 + v22));
            v75 = (int16x4_t)vmovl_s16(v74).u64[0];
            *(float *)v75.i32 = (float)v75.i32[0];
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)v75.i32 * *(float *)(a12 + 20));
            v75.i16[0] = *(_WORD *)(v28 + 2 * ((int)v71 + v24));
            v76 = (int16x4_t)vmovl_s16(v75).u64[0];
            LODWORD(a4) = *(_DWORD *)(a12 + 24);
            *(float *)v76.i32 = (float)v76.i32[0];
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)v76.i32 * *(float *)&a4);
            v76.i16[0] = *(_WORD *)(v28 + 2 * ((int)v71 + v23));
            *(_QWORD *)&a3 = vmovl_s16(v76).u64[0];
            *(float *)&a3 = (float)SLODWORD(a3);
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)&a3 * *(float *)(a12 + 28));
            *v69++ = LODWORD(a2);
            a12 += 32;
            --v70;
          }
          while (v70);
          LODWORD(v27) = a17;
          v30 = a14;
        }
      }
      a12 += -32 * a14;
      ++v21;
    }
    while (v21 != a10);
  }
}

uint64_t sub_10032EB5C(uint64_t a1, uint64_t a2, int16x8_t *a3, uint64_t a4, int a5)
{
  uint64_t result;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int16x4_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  int32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int8 *v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  char v51;

  result = sub_10032EE3C((uint64_t)&v51, (float32x4_t **)a2, a3, (const float *)a4, a5);
  if ((int)result <= a5 - 4)
  {
    v10 = (int)result;
    v11 = *(float *)(a4 + 16);
    v12 = *(float *)(a4 + 20);
    v13 = *(float *)a4;
    v14 = *(float *)(a4 + 4);
    v15 = (int16x4_t *)((char *)a3 + 2 * (int)result);
    v16 = 4 * (int)result;
    v17 = *(_QWORD *)(a2 + 24) + 8;
    v18 = *(_QWORD *)(a2 + 32) + 12;
    v19 = *(_QWORD *)(a2 + 40) + 12;
    v20 = *(_QWORD *)(a2 + 48) + 12;
    v21 = *(float *)(a4 + 8);
    v22 = *(float *)(a4 + 12);
    v23 = *(_QWORD *)(a2 + 56) + 12;
    v24 = *(_QWORD *)a2 + 8;
    v25 = *(_QWORD *)(a2 + 8) + 8;
    v26 = *(_QWORD *)(a2 + 16) + 8;
    v27 = 4 * v10;
    v28 = *(float *)(a4 + 24);
    v29 = *(float *)(a4 + 28);
    do
    {
      v30.i32[0] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v16 - 8))+ (float)(*(float *)(v25 + v16 - 8) * v14))+ (float)(*(float *)(v26 + v16 - 8) * v21))+ (float)(*(float *)(v17 + v16 - 8) * v22))+ (float)(*(float *)(v18 + v16 - 12) * v11))+ (float)(*(float *)(v19 + v16 - 12) * v12))+ (float)(*(float *)(v20 + v16 - 12) * v28))+ (float)(*(float *)(v23 + v16 - 12) * v29));
      v30.i32[1] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v16 - 4))+ (float)(*(float *)(v25 + v16 - 4) * v14))+ (float)(*(float *)(v26 + v16 - 4) * v21))+ (float)(*(float *)(v17 + v16 - 4) * v22))+ (float)(*(float *)(v18 + v16 - 8) * v11))+ (float)(*(float *)(v19 + v16 - 8) * v12))+ (float)(*(float *)(v20 + v16 - 8) * v28))+ (float)(*(float *)(v23 + v16 - 8) * v29));
      v30.i32[2] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v27))+ (float)(*(float *)(v25 + v27) * v14))+ (float)(*(float *)(v26 + v27) * v21))+ (float)(*(float *)(v17 + v27) * v22))+ (float)(*(float *)(v18 + v16 - 4) * v11))+ (float)(*(float *)(v19 + v16 - 4) * v12))+ (float)(*(float *)(v20 + v16 - 4) * v28))+ (float)(*(float *)(v23 + v16 - 4) * v29));
      v30.i32[3] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v16 + 4))+ (float)(*(float *)(v25 + v16 + 4) * v14))+ (float)(*(float *)(v26 + v16 + 4) * v21))+ (float)(*(float *)(v17 + v16 + 4) * v22))+ (float)(*(float *)(v18 + v27) * v11))+ (float)(*(float *)(v19 + v27) * v12))+ (float)(*(float *)(v20 + v27) * v28))+ (float)(*(float *)(v23 + v27) * v29));
      *v15++ = vqmovn_s32(v30);
      v10 += 4;
      v17 += 16;
      v18 += 16;
      v19 += 16;
      v20 += 16;
      v23 += 16;
      v24 += 16;
      v25 += 16;
      v26 += 16;
    }
    while (v10 <= a5 - 4);
    result = v10;
  }
  if ((int)result < a5)
  {
    v31 = 0;
    v32 = 4 * (int)result;
    v33 = *(_QWORD *)a2 + v32;
    v34 = *(_QWORD *)(a2 + 8) + v32;
    v35 = *(_QWORD *)(a2 + 16) + v32;
    v36 = *(_QWORD *)(a2 + 24) + v32;
    v37 = *(_QWORD *)(a2 + 32) + v32;
    v38 = *(_QWORD *)(a2 + 40) + v32;
    v39 = *(_QWORD *)(a2 + 48) + v32;
    v40 = *(_QWORD *)(a2 + 56) + v32;
    v41 = &a3->i8[2 * (int)result];
    v42 = *(float *)a4;
    v43 = *(float *)(a4 + 4);
    v44 = *(float *)(a4 + 8);
    v45 = *(float *)(a4 + 12);
    v46 = *(float *)(a4 + 16);
    v47 = *(float *)(a4 + 20);
    result = a5 - (uint64_t)(int)result;
    v48 = *(float *)(a4 + 24);
    v49 = *(float *)(a4 + 28);
    do
    {
      v50 = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(*(float *)(v34 + 4 * v31) * v43)+ (float)(*(float *)(v33 + 4 * v31) * v42))+ (float)(*(float *)(v35 + 4 * v31) * v44))+ (float)(*(float *)(v36 + 4 * v31) * v45))+ (float)(*(float *)(v37 + 4 * v31) * v46))+ (float)(*(float *)(v38 + 4 * v31) * v47))+ (float)(*(float *)(v39 + 4 * v31) * v48))+ (float)(*(float *)(v40 + 4 * v31) * v49));
      if ((int)v50 <= -32768)
        LODWORD(v50) = -32768;
      if ((int)v50 >= 0x7FFF)
        LOWORD(v50) = 0x7FFF;
      *(_WORD *)&v41[2 * v31++] = v50;
    }
    while (result != v31);
  }
  return result;
}

uint64_t sub_10032EE3C(uint64_t a1, float32x4_t **a2, int16x8_t *a3, const float *a4, int a5)
{
  float32x4_t *v5;
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t *v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t *v12;
  float32x4_t *v13;
  const float *v14;
  float32x4_t v15;
  uint64_t result;
  int v17;
  float32x4_t v18;
  const float *v19;
  float32x4_t v20;
  const float *v21;
  float32x4_t v22;
  const float *v23;
  float32x4_t v24;
  const float *v25;
  float32x4_t v26;
  const float *v27;
  float32x4_t v28;
  const float *v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t *v37;
  float32x4_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  int8x16_t v59;
  int8x16_t v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  float32x4_t v63;
  float32x4_t v64;
  __int128 v65;
  int v66;
  __int128 v67;
  int v68;
  __int128 v69;
  int v70;
  __int128 v71;
  int v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int16x8_t *v169;
  int16x8_t *v170;
  int16x8_t *v171;
  int16x8_t *v172;
  float32x4_t *v173;
  float32x4_t *v174;
  float32x4_t *v175;
  float32x4_t *v176;
  int v177;
  int v178;
  int v179;
  int v180;
  float32x4_t *v181;
  float32x4_t *v182;
  float32x4_t *v183;
  float32x4_t *v184;
  float32x4_t *v185;
  float32x4_t *v186;
  float32x4_t *v187;
  float32x4_t *v188;
  float32x4_t *v189;
  float32x4_t *v190;
  float32x4_t *v191;
  float32x4_t *v192;
  float32x4_t *v193;
  float32x4_t *v194;
  float32x4_t *v195;
  float32x4_t *v196;
  float32x4_t *v197;
  float32x4_t *v198;
  float32x4_t *v199;
  float32x4_t *v200;
  float32x4_t *v201;
  float32x4_t *v202;
  float32x4_t *v203;
  float32x4_t *v204;
  float32x4_t *v205;
  float32x4_t *v206;
  float32x4_t *v207;
  float32x4_t *v208;

  v6 = *a2;
  v5 = a2[1];
  v8 = a2[2];
  v7 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v13 = a2[6];
  v12 = a2[7];
  v15 = vld1q_dup_f32(a4);
  v14 = a4 + 1;
  result = 0;
  v17 = a5 - 8;
  if (a5 >= 8)
  {
    v18 = vld1q_dup_f32(v14);
    v19 = a4 + 2;
    v20 = vld1q_dup_f32(v19);
    v21 = a4 + 3;
    v22 = vld1q_dup_f32(v21);
    v23 = a4 + 4;
    v24 = vld1q_dup_f32(v23);
    v25 = a4 + 5;
    v26 = vld1q_dup_f32(v25);
    v27 = a4 + 6;
    v28 = vld1q_dup_f32(v27);
    v29 = a4 + 7;
    v30 = v12 + 1;
    v31 = v6 + 1;
    v32 = v13 + 1;
    v33 = v5 + 1;
    v34 = v10 + 1;
    v35 = v8 + 1;
    v36 = vld1q_dup_f32(v29);
    v37 = v9 + 1;
    v38 = v7 + 1;
    v39 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    do
    {
      v41 = v31[-1];
      v42 = *v31;
      v43 = v33[-1];
      v44 = *v33;
      v45 = v35[-1];
      v46 = *v35;
      v47 = v38[-1];
      v48 = *v38;
      v49 = v37[-1];
      v50 = *v37;
      v51 = v34[-1];
      v52 = *v34;
      v53 = v32[-1];
      v54 = *v32;
      v56 = v30[-1];
      v55 = *v30;
      v57 = atomic_load((unsigned __int8 *)qword_10048AA60);
      if ((v57 & 1) == 0)
      {
        v177 = result;
        v169 = a3;
        v173 = v30;
        v165 = v17;
        v181 = v31;
        v185 = v32;
        v189 = v33;
        v193 = v34;
        v197 = v35;
        v201 = v37;
        v205 = v38;
        v157 = v18;
        v161 = v15;
        v149 = v22;
        v153 = v20;
        v141 = v26;
        v145 = v24;
        v137 = v28;
        v129 = v31[-1];
        v133 = v36;
        v121 = v35[-1];
        v125 = v33[-1];
        v113 = v37[-1];
        v117 = v38[-1];
        v105 = v32[-1];
        v109 = v34[-1];
        v97 = *v31;
        v101 = v30[-1];
        v89 = *v35;
        v93 = *v33;
        v81 = *v37;
        v85 = *v38;
        v73 = *v32;
        v77 = *v34;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA60);
        v54 = v73;
        v52 = v77;
        v50 = v81;
        v48 = v85;
        v46 = v89;
        v44 = v93;
        v42 = v97;
        v56 = v101;
        v53 = v105;
        v51 = v109;
        v49 = v113;
        v47 = v117;
        v45 = v121;
        v43 = v125;
        v41 = v129;
        v36 = v133;
        v28 = v137;
        v26 = v141;
        v24 = v145;
        v22 = v149;
        v20 = v153;
        v18 = v157;
        *(_QWORD *)&v65 = 0x8000000080000000;
        *((_QWORD *)&v65 + 1) = 0x8000000080000000;
        v15 = v161;
        v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v39 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v37 = v201;
        v38 = v205;
        v34 = v193;
        v35 = v197;
        v32 = v185;
        v33 = v189;
        v31 = v181;
        a3 = v169;
        v30 = v173;
        v17 = v165;
        v66 = result;
        LODWORD(result) = v177;
        if (v66)
        {
          xmmword_10048AA50 = v65;
          __cxa_guard_release(qword_10048AA60);
          v54 = v73;
          v52 = v77;
          v50 = v81;
          v48 = v85;
          v46 = v89;
          v44 = v93;
          v42 = v97;
          v56 = v101;
          v53 = v105;
          v51 = v109;
          v49 = v113;
          v47 = v117;
          v45 = v121;
          v43 = v125;
          v41 = v129;
          v36 = v133;
          v28 = v137;
          v26 = v141;
          v24 = v145;
          v22 = v149;
          v20 = v153;
          v18 = v157;
          v15 = v161;
          v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v39 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v37 = v201;
          v38 = v205;
          v34 = v193;
          v35 = v197;
          v32 = v185;
          v33 = v189;
          v31 = v181;
          a3 = v169;
          v30 = v173;
          v17 = v165;
          LODWORD(result) = v177;
        }
      }
      v58 = atomic_load((unsigned __int8 *)&qword_10048AA80);
      if ((v58 & 1) == 0)
      {
        v178 = result;
        v170 = a3;
        v174 = v30;
        v166 = v17;
        v182 = v31;
        v186 = v32;
        v190 = v33;
        v194 = v34;
        v198 = v35;
        v202 = v37;
        v206 = v38;
        v158 = v18;
        v162 = v15;
        v150 = v22;
        v154 = v20;
        v142 = v26;
        v146 = v24;
        v138 = v28;
        v130 = v41;
        v134 = v36;
        v122 = v45;
        v126 = v43;
        v114 = v49;
        v118 = v47;
        v106 = v53;
        v110 = v51;
        v98 = v42;
        v102 = v56;
        v90 = v46;
        v94 = v44;
        v82 = v50;
        v86 = v48;
        v74 = v54;
        v78 = v52;
        LODWORD(result) = __cxa_guard_acquire(&qword_10048AA80);
        v54 = v74;
        v52 = v78;
        v50 = v82;
        v48 = v86;
        v46 = v90;
        v44 = v94;
        v42 = v98;
        v56 = v102;
        v53 = v106;
        v51 = v110;
        v49 = v114;
        v47 = v118;
        v45 = v122;
        v43 = v126;
        v41 = v130;
        v36 = v134;
        v28 = v138;
        v26 = v142;
        v24 = v146;
        v22 = v150;
        v20 = v154;
        v18 = v158;
        *(_QWORD *)&v67 = 0x3F0000003F000000;
        *((_QWORD *)&v67 + 1) = 0x3F0000003F000000;
        v15 = v162;
        v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v39 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v37 = v202;
        v38 = v206;
        v34 = v194;
        v35 = v198;
        v32 = v186;
        v33 = v190;
        v31 = v182;
        a3 = v170;
        v30 = v174;
        v17 = v166;
        v68 = result;
        LODWORD(result) = v178;
        if (v68)
        {
          xmmword_10048AA70 = v67;
          __cxa_guard_release(&qword_10048AA80);
          v54 = v74;
          v52 = v78;
          v50 = v82;
          v48 = v86;
          v46 = v90;
          v44 = v94;
          v42 = v98;
          v56 = v102;
          v53 = v106;
          v51 = v110;
          v49 = v114;
          v47 = v118;
          v45 = v122;
          v43 = v126;
          v41 = v130;
          v36 = v134;
          v28 = v138;
          v26 = v142;
          v24 = v146;
          v22 = v150;
          v20 = v154;
          v18 = v158;
          v15 = v162;
          v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v39 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v37 = v202;
          v38 = v206;
          v34 = v194;
          v35 = v198;
          v32 = v186;
          v33 = v190;
          v31 = v182;
          a3 = v170;
          v30 = v174;
          v17 = v166;
          LODWORD(result) = v178;
        }
      }
      v59 = v40[167];
      v60 = v39[165];
      v61 = atomic_load((unsigned __int8 *)qword_10048AA60);
      if ((v61 & 1) == 0)
      {
        v179 = result;
        v171 = a3;
        v175 = v30;
        v167 = v17;
        v183 = v31;
        v187 = v32;
        v191 = v33;
        v195 = v34;
        v199 = v35;
        v203 = v37;
        v207 = v38;
        v159 = v18;
        v163 = v15;
        v151 = v22;
        v155 = v20;
        v143 = v26;
        v147 = v24;
        v139 = v28;
        v131 = v41;
        v135 = v36;
        v123 = v45;
        v127 = v43;
        v115 = v49;
        v119 = v47;
        v107 = v53;
        v111 = v51;
        v99 = v42;
        v103 = v56;
        v91 = v46;
        v95 = v44;
        v83 = v50;
        v87 = v48;
        v75 = v54;
        v79 = v52;
        LODWORD(result) = __cxa_guard_acquire(qword_10048AA60);
        v54 = v75;
        v52 = v79;
        v50 = v83;
        v48 = v87;
        v46 = v91;
        v44 = v95;
        v42 = v99;
        v56 = v103;
        v53 = v107;
        v51 = v111;
        v49 = v115;
        v47 = v119;
        v45 = v123;
        v43 = v127;
        v41 = v131;
        v36 = v135;
        v28 = v139;
        v26 = v143;
        v24 = v147;
        v22 = v151;
        v20 = v155;
        v18 = v159;
        *(_QWORD *)&v69 = 0x8000000080000000;
        *((_QWORD *)&v69 + 1) = 0x8000000080000000;
        v15 = v163;
        v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v39 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v37 = v203;
        v38 = v207;
        v34 = v195;
        v35 = v199;
        v32 = v187;
        v33 = v191;
        v31 = v183;
        a3 = v171;
        v30 = v175;
        v17 = v167;
        v70 = result;
        LODWORD(result) = v179;
        if (v70)
        {
          xmmword_10048AA50 = v69;
          __cxa_guard_release(qword_10048AA60);
          v54 = v75;
          v52 = v79;
          v50 = v83;
          v48 = v87;
          v46 = v91;
          v44 = v95;
          v42 = v99;
          v56 = v103;
          v53 = v107;
          v51 = v111;
          v49 = v115;
          v47 = v119;
          v45 = v123;
          v43 = v127;
          v41 = v131;
          v36 = v135;
          v28 = v139;
          v26 = v143;
          v24 = v147;
          v22 = v151;
          v20 = v155;
          v18 = v159;
          v15 = v163;
          v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v39 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v37 = v203;
          v38 = v207;
          v34 = v195;
          v35 = v199;
          v32 = v187;
          v33 = v191;
          v31 = v183;
          a3 = v171;
          v30 = v175;
          v17 = v167;
          LODWORD(result) = v179;
        }
      }
      v62 = atomic_load((unsigned __int8 *)&qword_10048AA80);
      if ((v62 & 1) == 0)
      {
        v180 = result;
        v172 = a3;
        v176 = v30;
        v168 = v17;
        v184 = v31;
        v188 = v32;
        v192 = v33;
        v196 = v34;
        v200 = v35;
        v204 = v37;
        v208 = v38;
        v160 = v18;
        v164 = v15;
        v152 = v22;
        v156 = v20;
        v144 = v26;
        v148 = v24;
        v140 = v28;
        v132 = v41;
        v136 = v36;
        v124 = v45;
        v128 = v43;
        v116 = v49;
        v120 = v47;
        v108 = v53;
        v112 = v51;
        v100 = v42;
        v104 = v56;
        v92 = v46;
        v96 = v44;
        v84 = v50;
        v88 = v48;
        v76 = v54;
        v80 = v52;
        LODWORD(result) = __cxa_guard_acquire(&qword_10048AA80);
        v54 = v76;
        v52 = v80;
        v50 = v84;
        v48 = v88;
        v46 = v92;
        v44 = v96;
        v42 = v100;
        v56 = v104;
        v53 = v108;
        v51 = v112;
        v49 = v116;
        v47 = v120;
        v45 = v124;
        v43 = v128;
        v41 = v132;
        v36 = v136;
        v28 = v140;
        v26 = v144;
        v24 = v148;
        v22 = v152;
        v20 = v156;
        v18 = v160;
        *(_QWORD *)&v71 = 0x3F0000003F000000;
        *((_QWORD *)&v71 + 1) = 0x3F0000003F000000;
        v15 = v164;
        v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v39 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
        v37 = v204;
        v38 = v208;
        v34 = v196;
        v35 = v200;
        v32 = v188;
        v33 = v192;
        v31 = v184;
        a3 = v172;
        v30 = v176;
        v17 = v168;
        v72 = result;
        LODWORD(result) = v180;
        if (v72)
        {
          xmmword_10048AA70 = v71;
          __cxa_guard_release(&qword_10048AA80);
          v54 = v76;
          v52 = v80;
          v50 = v84;
          v48 = v88;
          v46 = v92;
          v44 = v96;
          v42 = v100;
          v56 = v104;
          v53 = v108;
          v51 = v112;
          v49 = v116;
          v47 = v120;
          v45 = v124;
          v43 = v128;
          v41 = v132;
          v36 = v136;
          v28 = v140;
          v26 = v144;
          v24 = v148;
          v22 = v152;
          v20 = v156;
          v18 = v160;
          v15 = v164;
          v40 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v39 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v37 = v204;
          v38 = v208;
          v34 = v196;
          v35 = v200;
          v32 = v188;
          v33 = v192;
          v31 = v184;
          a3 = v172;
          v30 = v176;
          v17 = v168;
          LODWORD(result) = v180;
        }
      }
      v63 = vaddq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v15, v41), v43, v18), v45, v20), v47, v22), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v24, v49), v51, v26), v53, v28), v56, v36));
      v64 = vaddq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v15, v42), v44, v18), v46, v20), v48, v22), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v24, v50), v52, v26), v54, v28), v55, v36));
      *a3++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v63, (float32x4_t)vorrq_s8(vandq_s8(v60, (int8x16_t)v63), v59)))), vcvtq_s32_f32(vaddq_f32(v64, (float32x4_t)vorrq_s8(vandq_s8(v39[165], (int8x16_t)v64), v40[167]))));
      result = (result + 8);
      v30 += 2;
      v31 += 2;
      v32 += 2;
      v33 += 2;
      v34 += 2;
      v35 += 2;
      v37 += 2;
      v38 += 2;
    }
    while (v17 >= (int)result);
  }
  return result;
}

uint64_t sub_10032F518(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453B38;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_10032F638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_100453B78;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10032F838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10032F878(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10032F88C(uint64_t a1)
{
  sub_1003306AC(a1);
  operator delete();
}

_DWORD *sub_10032F8B0(_DWORD *result, int *a2)
{
  _DWORD *v2;
  unsigned int v3;
  signed int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t **v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  float32x4_t **v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  signed int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unint64_t v27;
  _DWORD v28[265];
  char v29;
  char v30;
  _DWORD __b[16];
  float32x4_t *v32[16];
  _QWORD v33[17];

  v2 = result;
  v3 = result[2];
  v4 = (result[60] + 15) & 0xFFFFFFF0;
  LODWORD(v5) = result[62];
  if ((v5 * v4) >= 0x109)
    operator new[]();
  memset(v33, 0, 128);
  memset(v32, 0, sizeof(v32));
  if ((int)v5 >= 1)
  {
    result = memset(__b, 255, 4 * v5);
    v6 = 4 * v4;
    if ((_DWORD)v5 == 1)
    {
      v7 = 0;
LABEL_9:
      v11 = (float32x4_t *)&v28[v7 * v4];
      v12 = &v32[v7];
      v13 = v5 - v7;
      do
      {
        *v12++ = v11;
        v11 = (float32x4_t *)((char *)v11 + v6);
        --v13;
      }
      while (v13);
      goto LABEL_11;
    }
    v7 = v5 & 0xFFFFFFFE;
    v8 = &v32[1];
    v9 = v7;
    v10 = (float32x4_t *)v28;
    do
    {
      *(v8 - 1) = v10;
      *v8 = (float32x4_t *)((char *)v10 + v6);
      v10 = (float32x4_t *)((char *)v10 + 8 * v4);
      v8 += 2;
      v9 -= 2;
    }
    while (v9);
    if (v7 != v5)
      goto LABEL_9;
  }
LABEL_11:
  v14 = *a2;
  if ((int)v14 < a2[1])
  {
    v15 = *((_QWORD *)v2 + 28) + 4 * (int)v14 * (int)v5;
    v25 = ((v3 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v5 >= 1)
      {
        v27 = v15;
        v16 = 0;
        LODWORD(v17) = 0;
        v18 = *(_DWORD *)(*((_QWORD *)v2 + 26) + 4 * v14) - (v5 >> 1) + 1;
        v19 = v5;
        do
        {
          v21 = v2[59];
          if ((int)(v18 + v16) >= v21)
            v22 = v21 - 1;
          else
            v22 = v18 + v16;
          if ((int)(v18 + v16) >= 0)
            v23 = v22;
          else
            v23 = 0;
          if ((int)v17 <= (int)v16)
            v17 = v16;
          else
            v17 = v17;
          if ((int)v17 < (int)v5)
          {
            while (v17 > 0xF || v23 != __b[v17])
            {
              if ((uint64_t)++v17 >= (int)v5)
                goto LABEL_15;
            }
            if (v17 > v16)
            {
              memcpy(v32[v16], v32[v17], 4 * v4);
              LODWORD(v5) = v2[62];
            }
          }
LABEL_15:
          if ((int)v16 >= v19)
            v20 = v19;
          else
            v20 = v16;
          if ((_DWORD)v17 == (_DWORD)v5)
            v19 = v20;
          v33[v16] = *((_QWORD *)v2 + 3) + **((_QWORD **)v2 + 10) * v23;
          __b[v16++] = v23;
        }
        while ((uint64_t)v16 < (int)v5);
        v24 = v2[60];
        if ((int)v5 <= v19)
        {
          v15 = v27;
          goto LABEL_41;
        }
        sub_10032FC54((uint64_t)&v30, (uint64_t)&v33[v19], (uint64_t)&v32[v19], v5 - v19, *((_QWORD *)v2 + 25), *((float **)v2 + 27), v2[58], v24, v25, v2[63], v2[64]);
        v15 = v27;
      }
      v24 = v2[60];
LABEL_41:
      result = (_DWORD *)sub_100330048((uint64_t)&v29, v32, *((_QWORD *)v2 + 15) + *((_QWORD *)v2 + 23) * v14++, v15, v24);
      v5 = (int)v2[62];
      v15 += 4 * v5;
    }
    while (v14 < a2[1]);
  }
  return result;
}

void sub_10032FC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

void sub_10032FC54(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, float *a6, unsigned int a7, int a8, unsigned int a9, int a10, int a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  signed int v24;
  unsigned int v25;
  int v26;
  int v27;
  signed int v28;
  unsigned int v29;
  int v30;
  int v31;
  signed int v32;
  unsigned int v33;
  int v34;
  int v35;
  signed int v36;
  unsigned int v37;
  int v38;
  int v39;
  signed int v40;
  unsigned int v41;
  int v42;
  int v43;
  signed int v44;
  int v45;
  unsigned int v46;
  float v47;
  int v48;
  int v49;
  signed int v50;
  unsigned int v51;
  float v52;
  signed int v53;
  BOOL v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  float *v60;
  uint64_t v61;
  uint64_t v62;

  if (a4 >= 1)
  {
    v11 = 0;
    v12 = 2 * a9;
    v13 = 4 * a9;
    v14 = 3 * a9;
    v15 = -3 * a9;
    if (a9 <= 1)
      v16 = 1;
    else
      v16 = a9;
    do
    {
      LODWORD(v17) = 0;
      v18 = *(_QWORD *)(a2 + 8 * v11);
      v19 = *(_QWORD *)(a3 + 8 * v11);
      v20 = a10;
      while (1)
      {
        if ((int)v17 < v20)
        {
          v17 = (int)v17;
          do
          {
            v21 = *(_DWORD *)(a5 + 4 * v17);
            v22 = v15 + v21;
            v23 = v14 - v21;
            v24 = v15 + v21;
            if (v15 + v21 >= a7)
            {
              v25 = ((v22 & ~(v22 >> 31)) + v23 - ((v22 & ~(v22 >> 31)) + v23 != 0)) / v16;
              if ((v22 & ~(v22 >> 31)) + v23)
                ++v25;
              v24 = v21 + a9 * (v25 - 2);
              do
                v24 -= a9;
              while (v24 >= (int)a7);
            }
            v26 = v22 + a9;
            v27 = v23 - a9;
            v28 = v21 - v12;
            if (v21 - v12 >= a7)
            {
              v29 = ((v26 & ~(v26 >> 31)) + v27 - ((v26 & ~(v26 >> 31)) + v27 != 0)) / v16;
              if ((v26 & ~(v26 >> 31)) + v27)
                ++v29;
              v28 = v21 + a9 * (v29 - 1);
              do
                v28 -= a9;
              while (v28 >= (int)a7);
            }
            v30 = v26 + a9;
            v31 = v27 - a9;
            v32 = v21 - a9;
            if (v21 - a9 >= a7)
            {
              v33 = ((v30 & ~(v30 >> 31)) + v31 - ((v30 & ~(v30 >> 31)) + v31 != 0)) / v16;
              if ((v30 & ~(v30 >> 31)) + v31)
                ++v33;
              v32 = v21 + v33 * a9;
              do
                v32 -= a9;
              while (v32 >= (int)a7);
            }
            v34 = v30 + a9;
            v35 = v31 - a9;
            v36 = *(_DWORD *)(a5 + 4 * v17);
            if (v21 >= a7)
            {
              v37 = ((v34 & ~(v34 >> 31)) + v35 - ((v34 & ~(v34 >> 31)) + v35 != 0)) / v16;
              if ((v34 & ~(v34 >> 31)) + v35)
                ++v37;
              v36 = v21 + a9 + a9 * v37;
              do
                v36 -= a9;
              while (v36 >= (int)a7);
            }
            v38 = v34 + a9;
            v39 = v35 - a9;
            v40 = v21 + a9;
            if (v21 + a9 >= a7)
            {
              v41 = ((v38 & ~(v38 >> 31)) + v39 - ((v38 & ~(v38 >> 31)) + v39 != 0)) / v16;
              if ((v38 & ~(v38 >> 31)) + v39)
                ++v41;
              v40 = v21 + a9 * (v41 + 2);
              do
                v40 -= a9;
              while (v40 >= (int)a7);
            }
            v42 = v38 + a9;
            v43 = v39 - a9;
            v44 = v12 + v21;
            if (v12 + v21 >= a7)
            {
              v45 = (v42 & ~(v42 >> 31)) + v43;
              v46 = (v45 - (v45 != 0)) / v16;
              if (v45)
                ++v46;
              v44 = v21 + a9 * (v46 + 3);
              do
                v44 -= a9;
              while (v44 >= (int)a7);
            }
            v47 = *(float *)(v18 + 4 * v24);
            v48 = v42 + a9;
            v49 = v43 - a9;
            v50 = v14 + v21;
            if (v14 + v21 >= a7)
            {
              v51 = ((v48 & ~(v48 >> 31)) + v49 - ((v48 & ~(v48 >> 31)) + v49 != 0)) / v16;
              if ((v48 & ~(v48 >> 31)) + v49)
                ++v51;
              v50 = v21 + a9 * (v51 + 4);
              do
                v50 -= a9;
              while (v50 >= (int)a7);
            }
            v52 = *(float *)(v18 + 4 * v50);
            v53 = v13 + v21;
            if (v13 + v21 >= a7)
            {
              v55 = ((v48 + a9) & ~((int)(v48 + a9) >> 31)) + v49 - a9;
              v54 = v55 == 0;
              v56 = (v55 - (v55 != 0)) / v16;
              if (!v54)
                ++v56;
              v53 = v21 + a9 * (v56 + 5);
              do
                v53 -= a9;
              while (v53 >= (int)a7);
            }
            *(float *)(v19 + 4 * v17++) = (float)((float)((float)((float)((float)((float)((float)((float)(v47 * *a6)
                                                                                                + 0.0)
                                                                                        + (float)(*(float *)(v18 + 4 * v28)
                                                                                                * a6[1]))
                                                                                + (float)(*(float *)(v18 + 4 * v32)
                                                                                        * a6[2]))
                                                                        + (float)(*(float *)(v18 + 4 * v36) * a6[3]))
                                                                + (float)(*(float *)(v18 + 4 * v40) * a6[4]))
                                                        + (float)(*(float *)(v18 + 4 * v44) * a6[5]))
                                                + (float)(v52 * a6[6]))
                                        + (float)(*(float *)(v18 + 4 * v53) * a6[7]);
            a6 += 8;
          }
          while (v17 != v20);
          LODWORD(v17) = v20;
        }
        if (v20 == a8)
          break;
        v20 = a8;
        if ((int)v17 < a11)
        {
          v57 = (int)v17;
          v58 = 4 * (int)v17;
          v59 = (int *)(a5 + v58);
          v60 = (float *)(v19 + v58);
          v61 = a11 - v57;
          do
          {
            v62 = *v59++;
            *v60++ = (float)((float)((float)((float)((float)((float)((float)(*(float *)(v18 + 4 * ((int)v62 - v12))
                                                                           * a6[1])
                                                                   + (float)(*(float *)(v18 + 4 * ((int)v62 - v14))
                                                                           * *a6))
                                                           + (float)(*(float *)(v18 + 4 * (int)(v62 - a9)) * a6[2]))
                                                   + (float)(*(float *)(v18 + 4 * v62) * a6[3]))
                                           + (float)(*(float *)(v18 + 4 * (int)(v62 + a9)) * a6[4]))
                                   + (float)(*(float *)(v18 + 4 * ((int)v62 + v12)) * a6[5]))
                           + (float)(*(float *)(v18 + 4 * ((int)v62 + v14)) * a6[6]))
                   + (float)(*(float *)(v18 + 4 * ((int)v62 + v13)) * a6[7]);
            a6 += 8;
            --v61;
          }
          while (v61);
          LODWORD(v17) = a11;
          v20 = a8;
        }
      }
      a6 -= 8 * a8;
      ++v11;
    }
    while (v11 != a4);
  }
}

unint64_t sub_100330048(uint64_t a1, float32x4_t **a2, unint64_t a3, unint64_t a4, int a5)
{
  float32x4_t *v5;
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t *v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t *v12;
  float32x4_t *v13;
  unint64_t result;
  float32x4_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float32x4_t v19;
  const float *v20;
  float32x4_t v21;
  const float *v22;
  float32x4_t v23;
  const float *v24;
  float32x4_t v25;
  const float *v26;
  float32x4_t v27;
  const float *v28;
  float32x4_t v29;
  const float *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t *v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  unint64_t v53;
  float32x4_t *v54;
  float32x4_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  BOOL v60;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  BOOL v65;
  BOOL v66;
  BOOL v67;
  BOOL v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  unint64_t v72;
  BOOL v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  unint64_t v78;
  uint64_t v79;
  float32x4_t *v80;
  float32x4_t *v81;
  float32x4_t *v82;
  float32x4_t *v83;
  float32x4_t *v84;
  float32x4_t *v85;
  float32x4_t *v86;
  float32x4_t *v87;
  unint64_t v88;
  const float *v89;
  const float *v90;
  float32x4_t v91;
  const float *v92;
  const float *v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  const float *v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  const float *v103;
  float v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  const float *v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  const float *v113;
  float v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  const float *v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float v123;
  float *v124;
  unint64_t v125;
  float32x4_t *v126;
  float32x4_t *v127;
  float32x4_t *v128;
  float32x4_t *v129;
  float32x4_t *v130;
  float32x4_t *v131;
  float32x4_t *v132;
  float32x4_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  BOOL v139;
  BOOL v140;
  BOOL v141;
  BOOL v142;
  BOOL v143;
  BOOL v144;
  BOOL v145;
  BOOL v146;
  BOOL v147;
  BOOL v148;
  BOOL v149;
  BOOL v150;
  BOOL v151;
  BOOL v152;
  BOOL v153;
  BOOL v154;
  char *v155;
  const float *v157;
  float32x4_t v158;
  float32x4_t v159;
  const float *v160;
  float32x4_t v161;
  const float *v162;
  float32x4_t v163;
  const float *v164;
  float32x4_t v165;
  const float *v166;
  float32x4_t v167;
  const float *v168;
  float32x4_t v169;
  const float *v170;
  unint64_t v171;
  float32x4_t *v172;
  float32x4_t *v173;
  float32x4_t *v174;
  float32x4_t *v175;
  float32x4_t *v176;
  float32x4_t v177;
  float32x4_t *v178;
  float32x4_t *v179;
  float32x4_t *v180;
  unint64_t v181;
  float32x4_t v182;
  __int8 *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  float32x4x4_t v193;
  float32x4x4_t v194;
  float32x4x4_t v195;
  float32x4x4_t v196;
  float32x4x4_t v197;
  float32x4x4_t v198;
  float32x4x4_t v199;
  float32x4x4_t v200;
  float32x4x4_t v201;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v12 = a2[6];
  v13 = a2[7];
  v15 = vld1q_dup_f32((const float *)a4);
  result = a4 + 4;
  v16 = (a5 - 4);
  if (a5 >= 4)
  {
    v18 = 0;
    v19 = vld1q_dup_f32((const float *)result);
    v20 = (const float *)(a4 + 8);
    v21 = vld1q_dup_f32(v20);
    v22 = (const float *)(a4 + 12);
    v23 = vld1q_dup_f32(v22);
    v24 = (const float *)(a4 + 16);
    v25 = vld1q_dup_f32(v24);
    v26 = (const float *)(a4 + 20);
    v27 = vld1q_dup_f32(v26);
    v28 = (const float *)(a4 + 24);
    v29 = vld1q_dup_f32(v28);
    v30 = (const float *)(a4 + 28);
    v31 = vld1q_dup_f32(v30);
    result = a3;
    do
    {
      v32 = *v5++;
      v33 = vmulq_f32(v15, v32);
      v34 = *v6++;
      v35 = vmlaq_f32(v33, v34, v19);
      v36 = *v7++;
      v37 = vmlaq_f32(v35, v36, v21);
      v38 = *v8++;
      v39 = vmlaq_f32(v37, v38, v23);
      v40 = *v9++;
      v41 = vmulq_f32(v25, v40);
      v42 = *v10++;
      v43 = vmlaq_f32(v41, v42, v27);
      v44 = *v12++;
      v45 = vmlaq_f32(v43, v44, v29);
      v46 = *v13++;
      *(float32x4_t *)result = vaddq_f32(v39, vmlaq_f32(v45, v46, v31));
      result += 16;
      v18 += 4;
    }
    while (v18 <= v16);
    LODWORD(v17) = v18;
    if ((int)v18 > (int)v16)
      goto LABEL_74;
  }
  else
  {
    LODWORD(v17) = 0;
    if ((v16 & 0x80000000) != 0)
      goto LABEL_74;
  }
  v17 = (int)v17;
  v47 = a2[4];
  v48 = a2[5];
  v49 = a2[6];
  v50 = a2[7];
  v51 = *a2;
  v52 = a2[1];
  v53 = (int)v16 - (uint64_t)(int)v17;
  v55 = a2[2];
  v54 = a2[3];
  if (v53 < 0xC)
    goto LABEL_72;
  v56 = v53 >> 2;
  result = 4 * (int)v17;
  v57 = a3 + result;
  v58 = result + 16 * v56 + 16;
  v59 = a3 + v58;
  v60 = a3 + result >= (unint64_t)v51 + v58 || (unint64_t)v51->u64 + 4 * (int)v17 >= v59;
  v61 = !v60;
  v62 = v57 >= (unint64_t)v52 + v58 || (unint64_t)v52->u64 + 4 * (int)v17 >= v59;
  v63 = !v62;
  v64 = v57 >= (unint64_t)v55 + v58 || (unint64_t)v55->u64 + 4 * (int)v17 >= v59;
  v65 = !v64;
  v66 = v57 >= (unint64_t)v54 + v58 || (unint64_t)v54->u64 + 4 * (int)v17 >= v59;
  v67 = !v66;
  v68 = v57 >= (unint64_t)v47 + v58 || (unint64_t)v47 + result >= v59;
  v69 = !v68;
  v70 = v57 >= (unint64_t)v48 + v58 || (unint64_t)v48 + result >= v59;
  v71 = !v70;
  v72 = (unint64_t)v50 + v58;
  v73 = v57 >= (unint64_t)v49 + v58 || (unint64_t)v49 + result >= v59;
  v74 = !v73;
  v75 = v57 >= v72 || (unint64_t)v50 + result >= v59;
  v76 = !v75;
  if (v59 > a4 && v57 < a4 + 32)
    goto LABEL_72;
  if (v61)
    goto LABEL_72;
  if (v63)
    goto LABEL_72;
  if (v65)
    goto LABEL_72;
  if (v67)
    goto LABEL_72;
  if (v69)
    goto LABEL_72;
  if (v71)
    goto LABEL_72;
  if (v74)
    goto LABEL_72;
  if (v76)
    goto LABEL_72;
  v78 = v56 + 1;
  v79 = v78 & 0x7FFFFFFFFFFFFFFCLL;
  v80 = a2[7];
  v81 = a2[6];
  v82 = a2[5];
  v83 = a2[4];
  v84 = a2[3];
  v85 = a2[2];
  v86 = a2[1];
  v87 = *a2;
  v88 = a3;
  v17 = (int)v17 + 4 * (v78 & 0x7FFFFFFFFFFFFFFCLL);
  do
  {
    v89 = (const float *)a4;
    v90 = (const float *)((char *)v87->f32 + result);
    v91 = vld1q_dup_f32(v89++);
    v194 = vld4q_f32(v90);
    v92 = (const float *)((char *)v86->f32 + result);
    v197 = vld4q_f32(v92);
    v93 = (const float *)((char *)v85->f32 + result);
    v200 = vld4q_f32(v93);
    v94 = vmulq_f32(v91, v194.val[0]);
    v95 = vmulq_f32(v91, v194.val[1]);
    v96 = vmulq_f32(v91, v194.val[2]);
    v97 = vmulq_f32(v91, v194.val[3]);
    v91.f32[0] = *v89;
    v98 = vmlaq_n_f32(v94, v197.val[0], *v89);
    v99 = (const float *)((char *)v84->f32 + result);
    v195 = vld4q_f32(v99);
    v100 = vmlaq_n_f32(v95, v197.val[1], v91.f32[0]);
    v101 = vmlaq_n_f32(v96, v197.val[2], v91.f32[0]);
    v102 = vmlaq_n_f32(v97, v197.val[3], v91.f32[0]);
    v103 = (const float *)((char *)v83->f32 + result);
    v91.i32[0] = *(_DWORD *)(a4 + 8);
    v104 = *(float *)(a4 + 12);
    v198 = vld4q_f32(v103);
    v105 = vmlaq_n_f32(v100, v200.val[1], v91.f32[0]);
    v106 = vmlaq_n_f32(v101, v200.val[2], v91.f32[0]);
    v107 = vmlaq_n_f32(v102, v200.val[3], v91.f32[0]);
    v108 = vmlaq_n_f32(vmlaq_n_f32(v98, v200.val[0], v91.f32[0]), v195.val[0], v104);
    v109 = (const float *)((char *)v82->f32 + result);
    v201 = vld4q_f32(v109);
    v110 = vmlaq_n_f32(v105, v195.val[1], v104);
    v111 = vmlaq_n_f32(v106, v195.val[2], v104);
    v112 = vmlaq_n_f32(v107, v195.val[3], v104);
    v113 = (const float *)((char *)v81->f32 + result);
    v91.i32[0] = *(_DWORD *)(a4 + 16);
    v114 = *(float *)(a4 + 20);
    v196 = vld4q_f32(v113);
    v115 = vmlaq_n_f32(v110, v198.val[1], v91.f32[0]);
    v116 = vmlaq_n_f32(v111, v198.val[2], v91.f32[0]);
    v117 = vmlaq_n_f32(v112, v198.val[3], v91.f32[0]);
    v118 = vmlaq_n_f32(vmlaq_n_f32(v108, v198.val[0], v91.f32[0]), v201.val[0], v114);
    v119 = (const float *)((char *)v80->f32 + result);
    v199 = vld4q_f32(v119);
    v120 = vmlaq_n_f32(v115, v201.val[1], v114);
    v121 = vmlaq_n_f32(v116, v201.val[2], v114);
    v122 = vmlaq_n_f32(v117, v201.val[3], v114);
    v91.i32[0] = *(_DWORD *)(a4 + 24);
    v123 = *(float *)(a4 + 28);
    v193.val[0] = vmlaq_n_f32(vmlaq_n_f32(v118, v196.val[0], v91.f32[0]), v199.val[0], v123);
    v193.val[1] = vmlaq_n_f32(vmlaq_n_f32(v120, v196.val[1], v91.f32[0]), v199.val[1], v123);
    v193.val[2] = vmlaq_n_f32(vmlaq_n_f32(v121, v196.val[2], v91.f32[0]), v199.val[2], v123);
    v124 = (float *)(v88 + result);
    v88 += 64;
    v87 += 4;
    v86 += 4;
    v85 += 4;
    v193.val[3] = vmlaq_n_f32(vmlaq_n_f32(v122, v196.val[3], v91.f32[0]), v199.val[3], v123);
    vst4q_f32(v124, v193);
    v84 += 4;
    v83 += 4;
    v82 += 4;
    v81 += 4;
    v80 += 4;
    v79 -= 4;
  }
  while (v79);
  if (v78 != (v78 & 0x7FFFFFFFFFFFFFFCLL))
  {
LABEL_72:
    result = 4 * v17;
    v125 = a3;
    do
    {
      *(float32x4_t *)(v125 + result) = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)((char *)v51 + result), *(float *)a4), *(float32x4_t *)((char *)v52 + result), *(float *)(a4 + 4)), *(float32x4_t *)((char *)v55 + result), *(float *)(a4 + 8)), *(float32x4_t *)((char *)v54 + result), *(float *)(a4 + 12)), *(float32x4_t *)((char *)v47 + result), *(float *)(a4 + 16)), *(float32x4_t *)((char *)v48 + result), *(float *)(a4 + 20)), *(float32x4_t *)((char *)v49 + result), *(float *)(a4 + 24)),
                                          *(float32x4_t *)((char *)v50 + result),
                                          *(float *)(a4 + 28));
      v17 += 4;
      ++v51;
      ++v52;
      v125 += 16;
      ++v55;
      ++v54;
      ++v47;
      ++v48;
      ++v49;
      ++v50;
    }
    while (v17 <= (int)v16);
  }
LABEL_74:
  if ((int)v17 < a5)
  {
    v127 = *a2;
    v126 = a2[1];
    v129 = a2[2];
    v128 = a2[3];
    v131 = a2[4];
    v130 = a2[5];
    v133 = a2[6];
    v132 = a2[7];
    v17 = (int)v17;
    v134 = a5;
    result = a5 - (uint64_t)(int)v17;
    if (result < 0xC)
      goto LABEL_140;
    v135 = 4 * (int)v17;
    v136 = a3 + v135;
    v137 = 4 * a5;
    v138 = a3 + v137;
    v139 = a3 + v135 < a4 + 32 && v138 > a4;
    v140 = v139;
    v141 = v136 >= (unint64_t)v126 + v137 || (unint64_t)v126->u64 + 4 * (int)v17 >= v138;
    v142 = !v141;
    v143 = v136 >= (unint64_t)v129 + v137 || (unint64_t)v129->u64 + 4 * (int)v17 >= v138;
    v144 = !v143;
    v145 = v136 >= (unint64_t)v128 + v137 || (unint64_t)v128->u64 + 4 * (int)v17 >= v138;
    v146 = !v145;
    v147 = v136 >= (unint64_t)v131 + v137 || (unint64_t)v131->u64 + 4 * (int)v17 >= v138;
    v148 = !v147;
    v149 = v136 >= (unint64_t)v130 + v137 || (unint64_t)v130 + v135 >= v138;
    v150 = !v149;
    v151 = v136 >= (unint64_t)v133 + v137 || (unint64_t)v133 + v135 >= v138;
    v152 = !v151;
    v153 = v136 >= (unint64_t)v132 + v137 || (unint64_t)v132 + v135 >= v138;
    v154 = !v153;
    v155 = (char *)v127 + v137;
    if ((unint64_t)v127->u64 + 4 * (int)v17 < v138 && v136 < (unint64_t)v155)
      goto LABEL_140;
    if (v140)
      goto LABEL_140;
    if (v142)
      goto LABEL_140;
    if (v144)
      goto LABEL_140;
    if (v146)
      goto LABEL_140;
    if (v148)
      goto LABEL_140;
    if (v150)
      goto LABEL_140;
    if (v152)
      goto LABEL_140;
    if (v154)
      goto LABEL_140;
    v17 = (result & 0xFFFFFFFFFFFFFFFCLL) + (int)v17;
    v157 = (const float *)a4;
    v158 = vld1q_dup_f32(v157++);
    v159 = vld1q_dup_f32(v157);
    v160 = (const float *)(a4 + 8);
    v161 = vld1q_dup_f32(v160);
    v162 = (const float *)(a4 + 12);
    v163 = vld1q_dup_f32(v162);
    v164 = (const float *)(a4 + 16);
    v165 = vld1q_dup_f32(v164);
    v166 = (const float *)(a4 + 20);
    v167 = vld1q_dup_f32(v166);
    v168 = (const float *)(a4 + 24);
    v169 = vld1q_dup_f32(v168);
    v170 = (const float *)(a4 + 28);
    v171 = a3;
    v172 = v132;
    v173 = v133;
    v174 = v130;
    v175 = v131;
    v176 = v128;
    v177 = vld1q_dup_f32(v170);
    v178 = v129;
    v179 = v126;
    v180 = v127;
    v181 = result & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v182 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v179++ + v135), v159), v158, *(float32x4_t *)((char *)v180++ + v135)), v161, *(float32x4_t *)((char *)v178++ + v135)), v163, *(float32x4_t *)((char *)v176++ + v135)), v165, *(float32x4_t *)((char *)v175 + v135)), v167, *(float32x4_t *)((char *)v174 + v135)), v169, *(float32x4_t *)((char *)v173 + v135));
      *(float32x4_t *)(v171 + v135) = vmlaq_f32(v182, v177, *(float32x4_t *)((char *)v172 + v135));
      ++v175;
      ++v174;
      ++v173;
      ++v172;
      v171 += 16;
      v181 -= 4;
    }
    while (v181);
    if (result != (result & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_140:
      result = 0;
      v183 = &v127->i8[4 * v17];
      v184 = (uint64_t)v126->i64 + 4 * v17;
      v185 = (uint64_t)v129->i64 + 4 * v17;
      v186 = (uint64_t)v128->i64 + 4 * v17;
      v187 = (uint64_t)v131->i64 + 4 * v17;
      v188 = (uint64_t)v130->i64 + 4 * v17;
      v189 = (uint64_t)v133->i64 + 4 * v17;
      v190 = (uint64_t)v132->i64 + 4 * v17;
      v191 = a3 + 4 * v17;
      v192 = v134 - v17;
      do
      {
        *(float *)(v191 + 4 * result) = (float)((float)((float)((float)((float)((float)((float)(*(float *)(v184 + 4 * result)
                                                                                              * *(float *)(a4 + 4))
                                                                                      + (float)(*(float *)&v183[4 * result]
                                                                                              * *(float *)a4))
                                                                              + (float)(*(float *)(v185 + 4 * result)
                                                                                      * *(float *)(a4 + 8)))
                                                                      + (float)(*(float *)(v186 + 4 * result)
                                                                              * *(float *)(a4 + 12)))
                                                              + (float)(*(float *)(v187 + 4 * result)
                                                                      * *(float *)(a4 + 16)))
                                                      + (float)(*(float *)(v188 + 4 * result) * *(float *)(a4 + 20)))
                                              + (float)(*(float *)(v189 + 4 * result) * *(float *)(a4 + 24)))
                                      + (float)(*(float *)(v190 + 4 * result) * *(float *)(a4 + 28));
        ++result;
      }
      while (v192 != result);
    }
  }
  return result;
}

uint64_t sub_1003306AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453B78;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_1003307CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33[2];

  *(_QWORD *)a1 = off_100453BB8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 20);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v22 = *(_QWORD **)(a2 + 72);
    v23 = *(_QWORD **)(a1 + 80);
    *v23 = *v22;
    v23[1] = v22[1];
  }
  v24 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 48);
  v25 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v26;
  *(_QWORD *)(a1 + 160) = v25;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v24;
  if (v25)
  {
    v27 = (unsigned int *)(v25 + 20);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v29 = *(_QWORD **)(a3 + 72);
    v30 = *(_QWORD **)(a1 + 176);
    *v30 = *v29;
    v30[1] = v29[1];
  }
  *(_QWORD *)(a1 + 200) = a4;
  *(_QWORD *)(a1 + 208) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = *a8;
  *(_QWORD *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = sub_10029430C(v33, 18);
    *(_WORD *)(v31 + 16) = 17754;
    *(_OWORD *)v31 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_100294B74(-215, v33, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_1003309CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10029434C(&a9);
  sub_100006BE4(v11);
  sub_100006BE4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_100330A0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100330A20(uint64_t a1)
{
  sub_1003317CC(a1);
  operator delete();
}

void sub_100330A44(uint64_t a1, int *a2)
{
  unsigned int v3;
  signed int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const double **v8;
  uint64_t v9;
  const double *v10;
  const double *v11;
  const double **v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  signed int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  float *v27;
  _QWORD v28[136];
  char v29;
  char v30;
  _DWORD __b[16];
  const double *v32[16];
  _QWORD v33[17];

  v3 = *(_DWORD *)(a1 + 8);
  v4 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v5) = *(_DWORD *)(a1 + 248);
  if ((v5 * v4) >= 0x89)
    operator new[]();
  memset(v33, 0, 128);
  memset(v32, 0, sizeof(v32));
  if ((int)v5 >= 1)
  {
    memset(__b, 255, 4 * v5);
    v6 = v4;
    if ((_DWORD)v5 == 1)
    {
      v7 = 0;
LABEL_9:
      v11 = (const double *)&v28[v7 * v4];
      v12 = &v32[v7];
      v13 = v5 - v7;
      do
      {
        *v12++ = v11;
        v11 = (const double *)((char *)v11 + v6 * 8);
        --v13;
      }
      while (v13);
      goto LABEL_11;
    }
    v7 = v5 & 0xFFFFFFFE;
    v8 = &v32[1];
    v9 = v7;
    v10 = (const double *)v28;
    do
    {
      *(v8 - 1) = v10;
      *v8 = &v10[v6];
      v10 += 2 * v4;
      v8 += 2;
      v9 -= 2;
    }
    while (v9);
    if (v7 != v5)
      goto LABEL_9;
  }
LABEL_11:
  v14 = *a2;
  if ((int)v14 < a2[1])
  {
    v15 = (float *)(*(_QWORD *)(a1 + 224) + 4 * (int)v14 * (int)v5);
    v25 = ((v3 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v5 >= 1)
      {
        v27 = v15;
        v16 = 0;
        LODWORD(v17) = 0;
        v18 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * v14) - (v5 >> 1) + 1;
        v19 = v5;
        do
        {
          v21 = *(_DWORD *)(a1 + 236);
          if ((int)(v18 + v16) >= v21)
            v22 = v21 - 1;
          else
            v22 = v18 + v16;
          if ((int)(v18 + v16) >= 0)
            v23 = v22;
          else
            v23 = 0;
          if ((int)v17 <= (int)v16)
            v17 = v16;
          else
            v17 = v17;
          if ((int)v17 < (int)v5)
          {
            while (v17 > 0xF || v23 != __b[v17])
            {
              if ((uint64_t)++v17 >= (int)v5)
                goto LABEL_15;
            }
            if (v17 > v16)
            {
              memcpy((void *)v32[v16], v32[v17], 8 * v4);
              LODWORD(v5) = *(_DWORD *)(a1 + 248);
            }
          }
LABEL_15:
          if ((int)v16 >= v19)
            v20 = v19;
          else
            v20 = v16;
          if ((_DWORD)v17 == (_DWORD)v5)
            v19 = v20;
          v33[v16] = *(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v23;
          __b[v16++] = v23;
        }
        while ((uint64_t)v16 < (int)v5);
        v24 = *(_DWORD *)(a1 + 240);
        if ((int)v5 <= v19)
        {
          v15 = v27;
          goto LABEL_41;
        }
        sub_100330DE8((uint64_t)&v30, (uint64_t)&v33[v19], (uint64_t)&v32[v19], v5 - v19, *(_QWORD *)(a1 + 200), *(float **)(a1 + 216), *(_DWORD *)(a1 + 232), v24, v25, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
        v15 = v27;
      }
      v24 = *(_DWORD *)(a1 + 240);
LABEL_41:
      sub_100331214((uint64_t)&v29, v32, (double *)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 184) * v14++), v15, v24);
      v5 = *(int *)(a1 + 248);
      v15 += v5;
    }
    while (v14 < a2[1]);
  }
}

void sub_100330DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

void sub_100330DE8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, float *a6, unsigned int a7, int a8, unsigned int a9, int a10, int a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  signed int v25;
  unsigned int v26;
  int v27;
  int v28;
  signed int v29;
  unsigned int v30;
  int v31;
  int v32;
  signed int v33;
  unsigned int v34;
  int v35;
  int v36;
  signed int v37;
  unsigned int v38;
  int v39;
  int v40;
  signed int v41;
  unsigned int v42;
  int v43;
  int v44;
  signed int v45;
  int v46;
  unsigned int v47;
  double v48;
  int v49;
  int v50;
  signed int v51;
  unsigned int v52;
  double v53;
  signed int v54;
  BOOL v55;
  int v56;
  unsigned int v57;
  int *v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;

  if (a4 >= 1)
  {
    v11 = 0;
    v12 = 2 * a9;
    v13 = 4 * a9;
    v14 = 3 * a9;
    v15 = -3 * a9;
    if (a9 <= 1)
      v16 = 1;
    else
      v16 = a9;
    do
    {
      v17 = 0;
      v18 = *(_QWORD *)(a2 + 8 * v11);
      v19 = *(_QWORD *)(a3 + 8 * v11);
      v20 = a10;
      while (1)
      {
        if (v17 < v20)
        {
          v21 = v17;
          do
          {
            v22 = *(_DWORD *)(a5 + 4 * v21);
            v23 = v15 + v22;
            v24 = v14 - v22;
            v25 = v15 + v22;
            if (v15 + v22 >= a7)
            {
              v26 = ((v23 & ~(v23 >> 31)) + v24 - ((v23 & ~(v23 >> 31)) + v24 != 0)) / v16;
              if ((v23 & ~(v23 >> 31)) + v24)
                ++v26;
              v25 = v22 + a9 * (v26 - 2);
              do
                v25 -= a9;
              while (v25 >= (int)a7);
            }
            v27 = v23 + a9;
            v28 = v24 - a9;
            v29 = v22 - v12;
            if (v22 - v12 >= a7)
            {
              v30 = ((v27 & ~(v27 >> 31)) + v28 - ((v27 & ~(v27 >> 31)) + v28 != 0)) / v16;
              if ((v27 & ~(v27 >> 31)) + v28)
                ++v30;
              v29 = v22 + a9 * (v30 - 1);
              do
                v29 -= a9;
              while (v29 >= (int)a7);
            }
            v31 = v27 + a9;
            v32 = v28 - a9;
            v33 = v22 - a9;
            if (v22 - a9 >= a7)
            {
              v34 = ((v31 & ~(v31 >> 31)) + v32 - ((v31 & ~(v31 >> 31)) + v32 != 0)) / v16;
              if ((v31 & ~(v31 >> 31)) + v32)
                ++v34;
              v33 = v22 + v34 * a9;
              do
                v33 -= a9;
              while (v33 >= (int)a7);
            }
            v35 = v31 + a9;
            v36 = v32 - a9;
            v37 = *(_DWORD *)(a5 + 4 * v21);
            if (v22 >= a7)
            {
              v38 = ((v35 & ~(v35 >> 31)) + v36 - ((v35 & ~(v35 >> 31)) + v36 != 0)) / v16;
              if ((v35 & ~(v35 >> 31)) + v36)
                ++v38;
              v37 = v22 + a9 + a9 * v38;
              do
                v37 -= a9;
              while (v37 >= (int)a7);
            }
            v39 = v35 + a9;
            v40 = v36 - a9;
            v41 = v22 + a9;
            if (v22 + a9 >= a7)
            {
              v42 = ((v39 & ~(v39 >> 31)) + v40 - ((v39 & ~(v39 >> 31)) + v40 != 0)) / v16;
              if ((v39 & ~(v39 >> 31)) + v40)
                ++v42;
              v41 = v22 + a9 * (v42 + 2);
              do
                v41 -= a9;
              while (v41 >= (int)a7);
            }
            v43 = v39 + a9;
            v44 = v40 - a9;
            v45 = v12 + v22;
            if (v12 + v22 >= a7)
            {
              v46 = (v43 & ~(v43 >> 31)) + v44;
              v47 = (v46 - (v46 != 0)) / v16;
              if (v46)
                ++v47;
              v45 = v22 + a9 * (v47 + 3);
              do
                v45 -= a9;
              while (v45 >= (int)a7);
            }
            v48 = *(double *)(v18 + 8 * v25);
            v49 = v43 + a9;
            v50 = v44 - a9;
            v51 = v14 + v22;
            if (v14 + v22 >= a7)
            {
              v52 = ((v49 & ~(v49 >> 31)) + v50 - ((v49 & ~(v49 >> 31)) + v50 != 0)) / v16;
              if ((v49 & ~(v49 >> 31)) + v50)
                ++v52;
              v51 = v22 + a9 * (v52 + 4);
              do
                v51 -= a9;
              while (v51 >= (int)a7);
            }
            v53 = *(double *)(v18 + 8 * v51);
            v54 = v13 + v22;
            if (v13 + v22 >= a7)
            {
              v56 = ((v49 + a9) & ~((int)(v49 + a9) >> 31)) + v50 - a9;
              v55 = v56 == 0;
              v57 = (v56 - (v56 != 0)) / v16;
              if (!v55)
                ++v57;
              v54 = v22 + a9 * (v57 + 5);
              do
                v54 -= a9;
              while (v54 >= (int)a7);
            }
            *(double *)(v19 + 8 * v21++) = v48 * *a6
                                         + 0.0
                                         + *(double *)(v18 + 8 * v29) * a6[1]
                                         + *(double *)(v18 + 8 * v33) * a6[2]
                                         + *(double *)(v18 + 8 * v37) * a6[3]
                                         + *(double *)(v18 + 8 * v41) * a6[4]
                                         + *(double *)(v18 + 8 * v45) * a6[5]
                                         + v53 * a6[6]
                                         + *(double *)(v18 + 8 * v54) * a6[7];
            a6 += 8;
          }
          while (v21 != v20);
          v17 = v20;
        }
        if (v20 == a8)
          break;
        v20 = a8;
        if (v17 < a11)
        {
          v58 = (int *)(a5 + 4 * v17);
          v59 = (double *)(v19 + 8 * v17);
          v60 = a11 - (uint64_t)v17;
          do
          {
            v61 = *v58++;
            *v59++ = *(double *)(v18 + 8 * ((int)v61 - v12)) * a6[1]
                   + *(double *)(v18 + 8 * ((int)v61 - v14)) * *a6
                   + *(double *)(v18 + 8 * (int)(v61 - a9)) * a6[2]
                   + *(double *)(v18 + 8 * v61) * a6[3]
                   + *(double *)(v18 + 8 * (int)(v61 + a9)) * a6[4]
                   + *(double *)(v18 + 8 * ((int)v61 + v12)) * a6[5]
                   + *(double *)(v18 + 8 * ((int)v61 + v14)) * a6[6]
                   + *(double *)(v18 + 8 * ((int)v61 + v13)) * a6[7];
            a6 += 8;
            --v60;
          }
          while (v60);
          v17 = a11;
          v20 = a8;
        }
      }
      a6 -= 8 * a8;
      ++v11;
    }
    while (v11 != a4);
  }
}

void sub_100331214(uint64_t a1, const double **a2, double *a3, float *a4, int a5)
{
  unint64_t v5;
  unint64_t v6;
  double v7;
  const double *v8;
  const double *v9;
  uint64_t v10;
  const double *v11;
  const double *v12;
  uint64_t v13;
  const double *v14;
  const double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const double *v21;
  const double *v22;
  uint64_t v23;
  const double *v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64x2_t v39;
  int64x2_t v40;
  uint64_t v41;
  int64x2_t v42;
  int64x2_t v43;
  uint64_t v44;
  uint64_t v45;
  const double *v46;
  const double *v47;
  unint64_t v48;
  const double *v49;
  const double *v50;
  uint64_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  uint64x2_t v57;
  uint64x2_t v58;
  uint64x2_t v59;
  uint64x2_t v60;
  uint64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  const double *v66;
  const double *v67;
  float64x2_t v68;
  const double *v69;
  float64x2_t v70;
  uint64_t v71;
  double *v72;
  const double *v73;
  float64x2_t v74;
  const double *v75;
  const double *v76;
  const double *v77;
  unint64_t v78;
  float64x2_t v79;
  uint64_t v80;
  double *v81;
  const double *v82;
  uint64_t v83;
  const double *v84;
  uint64_t v85;
  const double *v86;
  uint64_t v87;
  const double *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const double *v92;
  BOOL v94;
  BOOL v96;
  BOOL v98;
  BOOL v100;
  BOOL v102;
  BOOL v104;
  BOOL v106;
  char *v107;
  uint64_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  uint64_t v116;
  const double *v117;
  const double *v118;
  const double *v119;
  const double *v120;
  const double *v121;
  float64x2_t v122;
  const double *v123;
  const double *v124;
  double *v125;
  const double *v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2x4_t v151;
  float64x2x4_t v152;
  float64x2x4_t v153;
  float64x2x4_t v154;
  float64x2x4_t v155;
  float64x2x4_t v156;
  float64x2x4_t v157;
  float64x2x4_t v158;
  float64x2x4_t v159;

  v5 = (a5 - 4);
  if (a5 >= 4)
  {
    v7 = *a4;
    v8 = a2[4];
    v9 = a2[5];
    *(double *)&v10 = a4[1];
    v11 = *a2;
    v12 = a2[1];
    *(double *)&v13 = a4[2];
    v15 = a2[2];
    v14 = a2[3];
    *(double *)&v16 = a4[3];
    *(double *)&v17 = a4[4];
    *(double *)&v18 = a4[5];
    *(double *)&v19 = a4[6];
    *(double *)&v20 = a4[7];
    v21 = a2[6];
    v22 = a2[7];
    if (v5 >= 0xC)
    {
      v6 = 0;
      v91 = ((8 * v5) & 0x7FFFFFFE0) + 32;
      v92 = (double *)((char *)a3 + v91);
      v94 = (const double *)((char *)v12 + v91) > a3 && v12 < v92;
      v96 = (const double *)((char *)v15 + v91) > a3 && v15 < v92;
      v98 = (const double *)((char *)v14 + v91) > a3 && v14 < v92;
      v100 = (const double *)((char *)v8 + v91) > a3 && v8 < v92;
      v102 = (const double *)((char *)v9 + v91) > a3 && v9 < v92;
      v104 = (const double *)((char *)v21 + v91) > a3 && v21 < v92;
      v106 = (const double *)((char *)v22 + v91) > a3 && v22 < v92;
      v107 = (char *)v11 + v91;
      if ((v11 >= v92 || v107 <= (char *)a3) && !v94 && !v96 && !v98 && !v100 && !v102 && !v104 && !v106)
      {
        v109 = (v5 >> 2) + 1;
        v6 = 4 * (v109 & 0x7FFFFFFE);
        v110 = (float64x2_t)vdupq_lane_s64(v10, 0);
        v111 = (float64x2_t)vdupq_lane_s64(v13, 0);
        v112 = (float64x2_t)vdupq_lane_s64(v16, 0);
        v113 = (float64x2_t)vdupq_lane_s64(v17, 0);
        v114 = (float64x2_t)vdupq_lane_s64(v18, 0);
        v115 = (float64x2_t)vdupq_lane_s64(v19, 0);
        v116 = v109 & 0x7FFFFFFE;
        v117 = a2[7];
        v118 = a2[6];
        v119 = a2[5];
        v120 = a2[4];
        v121 = a2[3];
        v122 = (float64x2_t)vdupq_lane_s64(v20, 0);
        v123 = a2[2];
        v124 = a2[1];
        v125 = a3;
        v126 = *a2;
        do
        {
          v153 = vld4q_f64(v126);
          v126 += 8;
          v127 = vmulq_n_f64(v153.val[0], v7);
          v128 = vmulq_n_f64(v153.val[1], v7);
          v129 = vmulq_n_f64(v153.val[2], v7);
          v130 = vmulq_n_f64(v153.val[3], v7);
          v154 = vld4q_f64(v124);
          v124 += 8;
          v131 = vmlaq_f64(v127, v110, v154.val[0]);
          v132 = vmlaq_f64(v128, v110, v154.val[1]);
          v133 = vmlaq_f64(v129, v110, v154.val[2]);
          v134 = vmlaq_f64(v130, v110, v154.val[3]);
          v155 = vld4q_f64(v123);
          v123 += 8;
          v135 = vmlaq_f64(v131, v111, v155.val[0]);
          v136 = vmlaq_f64(v132, v111, v155.val[1]);
          v137 = vmlaq_f64(v133, v111, v155.val[2]);
          v138 = vmlaq_f64(v134, v111, v155.val[3]);
          v156 = vld4q_f64(v121);
          v121 += 8;
          v139 = vmlaq_f64(v135, v112, v156.val[0]);
          v140 = vmlaq_f64(v136, v112, v156.val[1]);
          v141 = vmlaq_f64(v137, v112, v156.val[2]);
          v142 = vmlaq_f64(v138, v112, v156.val[3]);
          v157 = vld4q_f64(v120);
          v120 += 8;
          v143 = vmlaq_f64(v139, v113, v157.val[0]);
          v144 = vmlaq_f64(v140, v113, v157.val[1]);
          v145 = vmlaq_f64(v141, v113, v157.val[2]);
          v146 = vmlaq_f64(v142, v113, v157.val[3]);
          v158 = vld4q_f64(v119);
          v119 += 8;
          v147 = vmlaq_f64(v143, v114, v158.val[0]);
          v148 = vmlaq_f64(v144, v114, v158.val[1]);
          v149 = vmlaq_f64(v145, v114, v158.val[2]);
          v150 = vmlaq_f64(v146, v114, v158.val[3]);
          v159 = vld4q_f64(v118);
          v118 += 8;
          v151 = vld4q_f64(v117);
          v117 += 8;
          v152.val[0] = vmlaq_f64(vmlaq_f64(v147, v115, v159.val[0]), v122, v151.val[0]);
          v152.val[1] = vmlaq_f64(vmlaq_f64(v148, v115, v159.val[1]), v122, v151.val[1]);
          v152.val[2] = vmlaq_f64(vmlaq_f64(v149, v115, v159.val[2]), v122, v151.val[2]);
          v152.val[3] = vmlaq_f64(vmlaq_f64(v150, v115, v159.val[3]), v122, v151.val[3]);
          vst4q_f64(v125, v152);
          v125 += 8;
          v116 -= 2;
        }
        while (v116);
        if (v109 == (v109 & 0x7FFFFFFE))
          goto LABEL_7;
      }
    }
    else
    {
      v6 = 0;
    }
    v23 = v6;
    v24 = v12 + 2;
    v25 = a3 + 2;
    do
    {
      v26 = v11[v23 + 3] * v7
          + v24[v23 + 1] * *(double *)&v10
          + v15[v23 + 3] * *(double *)&v13
          + v14[v23 + 3] * *(double *)&v16
          + v8[v23 + 3] * *(double *)&v17
          + v9[v23 + 3] * *(double *)&v18
          + v21[v23 + 3] * *(double *)&v19;
      v27 = v11[v23] * v7
          + v24[v23 - 2] * *(double *)&v10
          + v15[v23] * *(double *)&v13
          + v14[v23] * *(double *)&v16
          + v8[v23] * *(double *)&v17
          + v9[v23] * *(double *)&v18
          + v21[v23] * *(double *)&v19
          + v22[v23] * *(double *)&v20;
      v28 = v11[v23 + 1] * v7
          + v24[v23 - 1] * *(double *)&v10
          + v15[v23 + 1] * *(double *)&v13
          + v14[v23 + 1] * *(double *)&v16
          + v8[v23 + 1] * *(double *)&v17
          + v9[v23 + 1] * *(double *)&v18
          + v21[v23 + 1] * *(double *)&v19
          + v22[v23 + 1] * *(double *)&v20;
      v29 = v22[v23 + 3];
      v30 = v11[v23 + 2] * v7
          + v24[v23] * *(double *)&v10
          + v15[v23 + 2] * *(double *)&v13
          + v14[v23 + 2] * *(double *)&v16
          + v8[v23 + 2] * *(double *)&v17
          + v9[v23 + 2] * *(double *)&v18
          + v21[v23 + 2] * *(double *)&v19
          + v22[v23 + 2] * *(double *)&v20;
      v31 = &v25[v23];
      v6 += 4;
      v24 += 4;
      v11 += 4;
      v25[v23] = v30;
      v15 += 4;
      v14 += 4;
      v8 += 4;
      v9 += 4;
      *(v31 - 2) = v27;
      *(v31 - 1) = v28;
      v31[1] = v26 + v29 * *(double *)&v20;
      v21 += 4;
      v22 += 4;
      v25 += 4;
    }
    while (v6 <= v5);
  }
  else
  {
    LODWORD(v6) = 0;
  }
LABEL_7:
  if ((int)v6 < a5)
  {
    *(double *)&v32 = *a4;
    v33 = a4[1];
    *(double *)&v34 = a4[2];
    *(double *)&v35 = a4[3];
    *(double *)&v36 = a4[4];
    *(double *)&v37 = a4[5];
    *(double *)&v38 = a4[6];
    v40 = *((int64x2_t *)a2 + 2);
    v39 = *((int64x2_t *)a2 + 3);
    *(double *)&v41 = a4[7];
    v43 = *(int64x2_t *)a2;
    v42 = *((int64x2_t *)a2 + 1);
    v44 = v6;
    v45 = a5;
    v46 = a2[1];
    v47 = a2[3];
    v48 = a5 - v44;
    v49 = a2[5];
    v50 = a2[7];
    if (v48 < 0xC)
      goto LABEL_13;
    v51 = v44;
    v52 = vdupq_n_s64(8 * v44);
    v53 = vaddq_s64(v52, v42);
    v54 = vaddq_s64(v52, v43);
    v55 = vaddq_s64(v52, v40);
    v56 = vdupq_n_s64((unint64_t)&a3[v44]);
    v57 = (uint64x2_t)vsubq_s64(v56, vaddq_s64(v52, v39));
    v58 = (uint64x2_t)vsubq_s64(v56, v55);
    v59 = (uint64x2_t)vsubq_s64(v56, v54);
    v60 = (uint64x2_t)vsubq_s64(v56, v53);
    v61 = (uint64x2_t)vdupq_n_s64(0x10uLL);
    if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v61, v59), (int32x4_t)vcgtq_u64(v61, v60)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v61, v58), (int32x4_t)vcgtq_u64(v61, v57))))) & 1) != 0)goto LABEL_13;
    v44 += v48 & 0xFFFFFFFFFFFFFFFELL;
    v62 = (float64x2_t)vdupq_lane_s64(v32, 0);
    v63 = (float64x2_t)vdupq_lane_s64(v34, 0);
    v64 = (float64x2_t)vdupq_lane_s64(v35, 0);
    v65 = (float64x2_t)vdupq_lane_s64(v36, 0);
    v66 = *a2;
    v67 = a2[2];
    v68 = (float64x2_t)vdupq_lane_s64(v37, 0);
    v69 = a2[4];
    v70 = (float64x2_t)vdupq_lane_s64(v38, 0);
    v71 = v39.i64[0];
    v72 = a3;
    v73 = v50;
    v74 = (float64x2_t)vdupq_lane_s64(v41, 0);
    v75 = v49;
    v76 = v47;
    v77 = v46;
    v78 = v48 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v79 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*(float64x2_t *)&v77[v51], v33), v62, *(float64x2_t *)&v66[v51]), v63, *(float64x2_t *)&v67[v51]), v64, *(float64x2_t *)&v76[v51]), v65, *(float64x2_t *)&v69[v51]), v68, *(float64x2_t *)&v75[v51]), v70, *(float64x2_t *)(v71 + v51 * 8));
      v66 += 2;
      v77 += 2;
      v67 += 2;
      v76 += 2;
      *(float64x2_t *)&v72[v51] = vmlaq_f64(v79, v74, *(float64x2_t *)&v73[v51]);
      v69 += 2;
      v75 += 2;
      v71 += 16;
      v73 += 2;
      v72 += 2;
      v78 -= 2;
    }
    while (v78);
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFFELL))
    {
LABEL_13:
      v80 = 0;
      v81 = &a3[v44];
      v82 = &v50[v44];
      v83 = v39.i64[0] + 8 * v44;
      v84 = &v49[v44];
      v85 = v40.i64[0] + 8 * v44;
      v86 = &v47[v44];
      v87 = v42.i64[0] + 8 * v44;
      v88 = &v46[v44];
      v89 = v43.i64[0] + 8 * v44;
      v90 = v45 - v44;
      do
      {
        v81[v80] = v88[v80] * v33
                 + *(double *)(v89 + 8 * v80) * *(double *)&v32
                 + *(double *)(v87 + 8 * v80) * *(double *)&v34
                 + v86[v80] * *(double *)&v35
                 + *(double *)(v85 + 8 * v80) * *(double *)&v36
                 + v84[v80] * *(double *)&v37
                 + *(double *)(v83 + 8 * v80) * *(double *)&v38
                 + v82[v80] * *(double *)&v41;
        ++v80;
      }
      while (v90 != v80);
    }
  }
}

uint64_t sub_1003317CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453BB8;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_1003318EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  __int128 v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;

  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a1 = off_100453BF8;
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 20);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v17 = *(_QWORD **)(a2 + 72);
    v18 = *(_QWORD **)(a1 + 80);
    *v18 = *v17;
    v18[1] = v17[1];
  }
  v19 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v21 = *(_QWORD *)(a3 + 48);
  v20 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v21;
  *(_QWORD *)(a1 + 160) = v20;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v19;
  if (v20)
  {
    v22 = (unsigned int *)(v20 + 20);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v24 = *(_QWORD **)(a3 + 72);
    v25 = *(_QWORD **)(a1 + 176);
    *v25 = *v24;
    v25[1] = v24[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(_QWORD *)(a1 + 208) = a6;
  *(_QWORD *)(a1 + 216) = a7;
  return a1;
}

void sub_100331A48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100006BE4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100331A64(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100331A78(uint64_t a1)
{
  sub_100332410(a1);
  operator delete();
}

void sub_100331A9C(uint64_t a1, int *a2)
{
  int *v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  float v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  float v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  signed int v55;
  int v56;
  unsigned int v57;
  size_t v59;
  _DWORD v60[3];
  char v61;
  int v62;
  int v63;
  int v64;

  v2 = *(int **)(a1 + 72);
  v3 = v2[1];
  v4 = *v2;
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = (v6 >> 3) & 0x1FF;
  v8 = v7 + 1;
  v9 = *(_DWORD *)(a1 + 200);
  v10 = *(_DWORD *)(a1 + 204);
  v11 = *(_DWORD *)(a1 + 88);
  v60[0] = v9;
  v60[1] = v10;
  v60[2] = v7 + 1;
  v62 = v11;
  v63 = v7 + 1;
  v64 = v11;
  v12 = (0xDu >> ((v6 >> 3) & 0xF)) & 1;
  if (v7 > 3)
    LOBYTE(v12) = 0;
  if (v10 != 2)
    LOBYTE(v12) = 0;
  if (v9 != 2)
    LOBYTE(v12) = 0;
  v61 = v12;
  v13 = *a2;
  if ((int)v13 < a2[1])
  {
    v15 = v10 * v9;
    v57 = v3 / v9 * v8;
    v16 = v8 * v3;
    v17 = v10 * v9 - 4;
    v55 = ((v10 * v9 - 4) & 0xFFFFFFFC) + 4;
    v59 = (v8 * v5);
    do
    {
      v18 = *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 184) * v13;
      v19 = *(_DWORD *)(a1 + 204);
      v20 = v19 * v13;
      if (v19 * (int)v13 + v19 <= (int)v4)
        v21 = v57;
      else
        v21 = 0;
      if (v20 >= (int)v4)
      {
        if ((int)v59 >= 1)
          bzero((void *)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 184) * v13), v59);
      }
      else
      {
        v56 = v19 * v13;
        v22 = v20;
        v23 = sub_100331E80((uint64_t)v60, (uint8x8_t *)(*(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v20), v18, v21);
        if (v23 < (int)v21)
        {
          v24 = v23;
          while (1)
          {
            v27 = *(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v22 + *(int *)(*(_QWORD *)(a1 + 216) + 4 * v24);
            if (v15 >= 4)
            {
              v30 = 0;
              v29 = 0;
              do
              {
                v31 = (int *)(*(_QWORD *)(a1 + 208) + 4 * v30);
                v29 += *(unsigned __int8 *)(v27 + *v31)
                     + *(unsigned __int8 *)(v27 + v31[1])
                     + *(unsigned __int8 *)(v27 + v31[2])
                     + *(unsigned __int8 *)(v27 + v31[3]);
                v30 += 4;
              }
              while (v30 <= v17);
              v28 = v55;
              if (v55 >= v15)
                goto LABEL_16;
            }
            else
            {
              v28 = 0;
              v29 = 0;
              if (v15 <= 0)
                goto LABEL_16;
            }
            v32 = *(_QWORD *)(a1 + 208);
            v33 = v28;
            v34 = v15 + ~v28;
            if ((_DWORD)v34)
            {
              v35 = 0;
              v36 = v34 + 1;
              v37 = (v34 + 1) & 0x1FFFFFFFELL;
              v38 = v37 + v33;
              v39 = (int *)(v32 + 4 * v33 + 4);
              v40 = v37;
              do
              {
                v29 += *(unsigned __int8 *)(v27 + *(v39 - 1));
                v35 += *(unsigned __int8 *)(v27 + *v39);
                v39 += 2;
                v40 -= 2;
              }
              while (v40);
              v29 += v35;
              if (v36 == v37)
                goto LABEL_16;
            }
            else
            {
              v38 = v33;
            }
            v41 = (int *)(v32 + 4 * v38);
            do
            {
              v42 = *v41++;
              v29 += *(unsigned __int8 *)(v27 + v42);
              LODWORD(v38) = v38 + 1;
            }
            while (v15 > (int)v38);
LABEL_16:
            v25 = rintf((float)(1.0 / (float)v15) * (float)v29);
            v26 = (uint64_t)v25 & ~((int)(uint64_t)v25 >> 31);
            if (v26 >= 255)
              LOBYTE(v26) = -1;
            *(_BYTE *)(v18 + v24++) = v26;
            if (v24 == (int)v21)
            {
              v23 = v21;
              break;
            }
          }
        }
        if (v23 < (int)v59)
        {
          v43 = v23;
          do
          {
            v48 = *(int *)(*(_QWORD *)(a1 + 216) + 4 * v43);
            if ((int)v48 >= v16 || (v49 = *(unsigned int *)(a1 + 204), (int)v49 < 1))
            {
              v44 = 0;
              v45 = 0;
            }
            else
            {
              v50 = 0;
              v45 = 0;
              v44 = 0;
              v51 = v56;
              do
              {
                if (v50 + v22 >= v4)
                  break;
                v52 = (*(_DWORD *)(a1 + 200) * v8);
                if ((int)v52 >= 1)
                {
                  v53 = 0;
                  do
                  {
                    v44 += *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v48 + **(_QWORD **)(a1 + 80) * v51 + v53);
                    ++v45;
                    if (v53 + v8 >= v52)
                      break;
                    v54 = v8 + v48 + v53;
                    v53 += v8;
                  }
                  while (v54 < v16);
                }
                ++v50;
                ++v51;
              }
              while (v50 != v49);
            }
            v46 = rintf((float)v44 / (float)v45);
            v47 = (uint64_t)v46 & ~((int)(uint64_t)v46 >> 31);
            if (v47 >= 255)
              LOBYTE(v47) = -1;
            *(_BYTE *)(v18 + v43++) = v47;
          }
          while (v43 != (int)v59);
        }
      }
      ++v13;
    }
    while (v13 < a2[1]);
  }
}

uint64_t sub_100331E80(uint64_t a1, uint8x8_t *a2, uint64_t a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint8x8_t *v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint8x8_t v16;
  int8x16_t v17;
  int16x8_t v18;
  uint16x8_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  _DWORD *v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  unint64_t v44;
  int8x16_t *v45;
  unint64_t v46;
  const char *v47;
  const char *v48;
  int v49;
  unint64_t v50;
  int8x8_t *v51;
  const char *v52;
  const char *v53;
  int v54;
  _BYTE *v55;
  unint64_t v56;
  uint64_t v58[2];
  int8x8x2_t v59;
  int8x8x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;

  if (!*(_BYTE *)(a1 + 12))
    return 0;
  v5 = *(_DWORD *)(a1 + 20);
  v6 = *(int *)(a1 + 16);
  v7 = (char *)a2 + v6;
  v8 = *(int *)(a1 + 24);
  if (v5 != 1)
  {
    if (v5 == 4)
    {
      v9 = a4 - 8;
      if ((int)a4 >= 8)
      {
        v10 = 0;
        v11 = a2;
        do
        {
          v12 = *(int8x16_t *)&v11->i8[v8];
          v13 = (int8x16_t)vmovl_u8(*v11);
          v14 = (int8x16_t)vmovl_high_u8(*(uint8x16_t *)v11->i8);
          v15 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v12.i8);
          v16 = (uint8x8_t)vextq_s8(v12, v12, 8uLL).u64[0];
          v17 = (int8x16_t)vmovl_high_u8((uint8x16_t)v12);
          v18 = (int16x8_t)vaddw_u8((uint16x8_t)vextq_s8(v13, v13, 8uLL), *v11);
          *(int16x4_t *)v18.i8 = vadd_s16(*(int16x4_t *)v18.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
          v18.i64[0] = vaddw_u8((uint16x8_t)v18, *(uint8x8_t *)v12.i8).u64[0];
          v19 = vaddw_u8((uint16x8_t)vextq_s8(v14, v14, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v11->i8, *(int8x16_t *)v11->i8, 8uLL));
          *(int16x4_t *)v19.i8 = vadd_s16(*(int16x4_t *)v19.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
          v18.i64[1] = vaddw_u8(v19, v16).u64[0];
          *(int8x8_t *)(a3 + v10) = vrshrn_n_s16(v18, 2uLL);
          v11 += 2;
          v10 += 8;
        }
        while ((int)v10 <= v9);
        v20 = (v9 & 0xFFFFFFF8) + 8;
        v21 = *(_DWORD *)(a1 + 8);
        if (v21 == 1)
          goto LABEL_26;
LABEL_12:
        if (v21 == 4)
        {
          if ((int)v20 >= (int)a4)
            return v20;
          v23 = (int)v20;
          v27 = 2 * v20 + 7;
          do
          {
            v28 = (_BYTE *)(a3 + v23);
            *v28 = (a2->u8[v27 - 7]
                  + a2->u8[v27 - 3]
                  + v7[v27 - 7]
                  + v7[v27 - 3]
                  + 2) >> 2;
            v28[1] = (a2->u8[v27 - 6]
                    + a2->u8[v27 - 2]
                    + v7[v27 - 6]
                    + v7[v27 - 2]
                    + 2) >> 2;
            v28[2] = (a2->u8[v27 - 5]
                    + a2->u8[v27 - 1]
                    + v7[v27 - 5]
                    + v7[v27 - 1]
                    + 2) >> 2;
            v28[3] = (a2->u8[v27 - 4]
                    + a2->u8[v27]
                    + v7[v27 - 4]
                    + v7[v27]
                    + 2) >> 2;
            v23 += 4;
            v27 += 8;
          }
          while (v23 < (int)a4);
        }
        else
        {
          if (v21 != 3)
          {
            v58[0] = 0;
            v58[1] = 0;
            v26 = (_DWORD *)sub_10029430C(v58, 7);
            *v26 = 1025535587;
            *(_DWORD *)((char *)v26 + 3) = 874528061;
            sub_100294B74(-215, v58, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2890);
          }
          if ((int)v20 >= (int)a4)
            return v20;
          v23 = (int)v20;
          v24 = 2 * v20 + 5;
          do
          {
            v25 = (_BYTE *)(a3 + v23);
            *v25 = (a2->u8[v24 - 5]
                  + a2->u8[v24 - 2]
                  + v7[v24 - 5]
                  + v7[v24 - 2]
                  + 2) >> 2;
            v25[1] = (a2->u8[v24 - 4]
                    + a2->u8[v24 - 1]
                    + v7[v24 - 4]
                    + v7[v24 - 1]
                    + 2) >> 2;
            v25[2] = (a2->u8[v24 - 3]
                    + a2->u8[v24]
                    + v7[v24 - 3]
                    + v7[v24]
                    + 2) >> 2;
            v23 += 3;
            v24 += 6;
          }
          while (v23 < (int)a4);
        }
        return v23;
      }
    }
LABEL_11:
    v20 = 0;
    v21 = *(_DWORD *)(a1 + 8);
    if (v21 == 1)
      goto LABEL_26;
    goto LABEL_12;
  }
  v22 = a4 - 16;
  if ((int)a4 < 16)
    goto LABEL_11;
  v29 = 0;
  v30 = (const char *)a2;
  do
  {
    v31 = &v30[v8];
    v61 = vld2q_s8(v30);
    v30 += 32;
    v63 = vld2q_s8(v31);
    *(int8x16_t *)(a3 + v29) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)v61.val[1].i8, *(uint8x8_t *)v61.val[0].i8), *(uint8x8_t *)v63.val[1].i8), *(uint8x8_t *)v63.val[0].i8), 2uLL), (int16x8_t)vaddw_high_u8(vaddw_high_u8(vaddl_high_u8((uint8x16_t)v61.val[1], (uint8x16_t)v61.val[0]), (uint8x16_t)v63.val[1]), (uint8x16_t)v63.val[0]), 2uLL);
    v29 += 16;
  }
  while ((int)v29 <= v22);
  v20 = (v22 & 0xFFFFFFF0) + 16;
  v21 = *(_DWORD *)(a1 + 8);
  if (v21 != 1)
    goto LABEL_12;
LABEL_26:
  if ((int)v20 < (int)a4)
  {
    v32 = (int)v20;
    v33 = (int)a4 - (uint64_t)(int)v20;
    if (v33 >= 8)
    {
      v34 = ~(uint64_t)(int)v20 + (int)a4;
      v35 = 2 * v20;
      if (2 * (int)v20 <= 2 * ((int)v20 + (int)v34)
        && ((v34 & 0x40000000) != 0) == __OFSUB__(((2 * v20) | 1) + 2 * v34, (2 * v20) | 1)
        && !(v34 >> 31))
      {
        v36 = a3 + (int)a4;
        v37 = (char *)a2 + v35;
        v38 = &v37[v6];
        v39 = v35 + 2 * (int)a4;
        v40 = (unint64_t)a2 + v39 + v6 - 2 * (int)v20;
        v41 = a3 + (int)v20 >= (unint64_t)a2 + v39 - 2 * (int)v20 || (unint64_t)v37 >= v36;
        v42 = !v41;
        v43 = (unint64_t)v38 >= v36 || a3 + (int)v20 >= v40;
        if (v43 && !v42)
        {
          if (v33 < 0x10)
          {
            v44 = 0;
            goto LABEL_50;
          }
          v44 = v33 & 0xFFFFFFFFFFFFFFF0;
          v45 = (int8x16_t *)(a3 + (int)v20);
          v46 = v33 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v47 = (char *)a2 + v35;
            v62 = vld2q_s8(v47);
            v48 = &v7[v35];
            v64 = vld2q_s8(v48);
            *v45++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)v62.val[0].i8, *(uint8x8_t *)v62.val[1].i8), *(uint8x8_t *)v64.val[0].i8), *(uint8x8_t *)v64.val[1].i8), 2uLL), (int16x8_t)vaddw_high_u8(vaddw_high_u8(vaddl_high_u8((uint8x16_t)v62.val[0], (uint8x16_t)v62.val[1]), (uint8x16_t)v64.val[0]), (uint8x16_t)v64.val[1]), 2uLL);
            v35 += 32;
            v46 -= 16;
          }
          while (v46);
          if (v33 == v44)
            return a4;
          if ((v33 & 8) != 0)
          {
LABEL_50:
            v49 = 2 * (v20 + v44);
            v50 = v44 - (v33 & 0xFFFFFFFFFFFFFFF8);
            v51 = (int8x8_t *)(a3 + v44 + (int)v20);
            do
            {
              v52 = (char *)a2 + v49;
              v59 = vld2_s8(v52);
              v53 = &v7[v49];
              v60 = vld2_s8(v53);
              *v51++ = vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v59.val[0], (uint8x8_t)v59.val[1]), (uint8x8_t)v60.val[0]), (uint8x8_t)v60.val[1]), 2uLL);
              v49 += 16;
              v50 += 8;
            }
            while (v50);
            v32 = (v33 & 0xFFFFFFFFFFFFFFF8) + (int)v20;
            if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8))
              return a4;
            goto LABEL_53;
          }
          v32 = v44 + (int)v20;
        }
      }
    }
LABEL_53:
    v54 = 2 * v32;
    v55 = (_BYTE *)(a3 + v32);
    v56 = (int)a4 - v32;
    do
    {
      *v55++ = (a2->u8[v54] + v7[v54] + a2->u8[v54 + 1] + v7[v54 + 1] + 2) >> 2;
      v54 += 2;
      --v56;
    }
    while (v56);
    return a4;
  }
  return v20;
}

void sub_1003323F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100332410(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453BF8;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_100332530(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  __int128 v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;

  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a1 = off_100453C38;
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 20);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v17 = *(_QWORD **)(a2 + 72);
    v18 = *(_QWORD **)(a1 + 80);
    *v18 = *v17;
    v18[1] = v17[1];
  }
  v19 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v21 = *(_QWORD *)(a3 + 48);
  v20 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v21;
  *(_QWORD *)(a1 + 160) = v20;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v19;
  if (v20)
  {
    v22 = (unsigned int *)(v20 + 20);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v24 = *(_QWORD **)(a3 + 72);
    v25 = *(_QWORD **)(a1 + 176);
    *v25 = *v24;
    v25[1] = v24[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(_QWORD *)(a1 + 208) = a6;
  *(_QWORD *)(a1 + 216) = a7;
  return a1;
}

void sub_10033268C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100006BE4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1003326A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1003326BC(uint64_t a1)
{
  sub_100332F8C(a1);
  operator delete();
}

void sub_1003326E0(uint64_t a1, int *a2)
{
  int *v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int16x4_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  int v30;
  uint64_t v31;
  signed int v32;
  float v33;
  uint64_t v34;
  int *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  float v43;
  float v44;
  int v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _WORD *v51;
  unint64_t v52;
  int v53;
  signed int v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  _DWORD v62[3];
  char v63;
  int v64;
  int v65;
  int v66;

  v2 = *(int **)(a1 + 72);
  v3 = v2[1];
  v4 = *v2;
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = (v6 >> 3) & 0x1FF;
  v8 = v7 + 1;
  v9 = *(_DWORD *)(a1 + 200);
  v10 = *(_DWORD *)(a1 + 204);
  v11 = *(_DWORD *)(a1 + 88);
  v62[0] = v9;
  v62[1] = v10;
  v62[2] = v7 + 1;
  v64 = v11;
  v65 = v7 + 1;
  v66 = v11;
  v47 = v7 > 3;
  v12 = (0xDu >> ((v6 >> 3) & 0xF)) & 1;
  if (v47)
    LOBYTE(v12) = 0;
  if (v10 != 2)
    LOBYTE(v12) = 0;
  if (v9 != 2)
    LOBYTE(v12) = 0;
  v63 = v12;
  v13 = *a2;
  if ((int)v13 < a2[1])
  {
    v15 = v10 * v9;
    v60 = v3 / v9 * v8;
    v16 = v8 * v3;
    v17 = v10 * v9 - 4;
    v54 = ((v10 * v9 - 4) & 0xFFFFFFFC) + 4;
    v59 = v8 * v5;
    v55 = 2 * (v8 * v5);
    v18 = 2 * ((v6 >> 3) & 0x1FF) + 2;
    do
    {
      v19 = (int16x4_t *)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 184) * v13);
      v20 = *(_DWORD *)(a1 + 204);
      v21 = v20 * v13;
      if (v20 * (int)v13 + v20 <= (int)v4)
        v22 = v60;
      else
        v22 = 0;
      if (v21 >= (int)v4)
      {
        if (v59 >= 1)
        {
          v38 = v13;
          bzero((void *)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 184) * v13), v55);
          v13 = v38;
        }
      }
      else
      {
        v57 = v22;
        v58 = v13;
        v56 = v20 * v13;
        v23 = v21;
        v24 = sub_100332A88((uint64_t)v62, (uint16x4_t *)(*(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v21), v19, v22);
        if (v24 < v57)
        {
          v26 = *(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v23;
          v27 = *(_QWORD *)(a1 + 216);
          v28 = v24;
          while (1)
          {
            v31 = v26 + 2 * *(int *)(v27 + 4 * v28);
            if (v15 >= 4)
              break;
            v32 = 0;
            v33 = 0.0;
            if (v15 > 0)
              goto LABEL_25;
LABEL_16:
            v29 = rintf((float)(1.0 / (float)v15) * v33);
            v30 = (uint64_t)v29 & ~((int)(uint64_t)v29 >> 31);
            if (v30 >= 0xFFFF)
              LOWORD(v30) = -1;
            v19->i16[v28++] = v30;
            if (v28 == v57)
            {
              v24 = v57;
              goto LABEL_31;
            }
          }
          v34 = 0;
          v33 = 0.0;
          do
          {
            v35 = (int *)(*(_QWORD *)(a1 + 208) + 4 * v34);
            v25 = (float)(*(unsigned __int16 *)(v31 + 2 * v35[1])
                        + *(unsigned __int16 *)(v31 + 2 * *v35)
                        + *(unsigned __int16 *)(v31 + 2 * v35[2])
                        + *(unsigned __int16 *)(v31 + 2 * v35[3]));
            v33 = v33 + v25;
            v34 += 4;
          }
          while (v34 <= v17);
          v32 = v54;
          if (v54 >= v15)
            goto LABEL_16;
LABEL_25:
          v36 = (int *)(*(_QWORD *)(a1 + 208) + 4 * v32);
          do
          {
            v37 = *v36++;
            LOWORD(v25) = *(_WORD *)(v31 + 2 * v37);
            v25 = (float)LODWORD(v25);
            v33 = v33 + v25;
            ++v32;
          }
          while (v15 > v32);
          goto LABEL_16;
        }
LABEL_31:
        v13 = v58;
        if (v24 < v59)
        {
          v39 = *(_QWORD *)(a1 + 216);
          v40 = *(unsigned int *)(a1 + 204);
          v41 = v24;
          do
          {
            v46 = *(int *)(v39 + 4 * v41);
            v47 = (int)v46 >= v16 || (int)v40 < 1;
            if (v47)
            {
              v42 = 0;
              v43 = 0.0;
            }
            else
            {
              v48 = 0;
              v42 = 0;
              v43 = 0.0;
              v49 = v56;
              do
              {
                if (v48 + v23 >= v4)
                  break;
                v50 = (*(_DWORD *)(a1 + 200) * v8);
                if ((int)v50 >= 1)
                {
                  v51 = (_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v46 + **(_QWORD **)(a1 + 80) * v49);
                  v52 = v8;
                  do
                  {
                    LOWORD(v25) = *v51;
                    v25 = (float)LODWORD(v25);
                    v43 = v43 + v25;
                    ++v42;
                    if (v52 >= v50)
                      break;
                    v53 = *(_DWORD *)(v39 + 4 * v41) + v52;
                    v51 = (_WORD *)((char *)v51 + v18);
                    v52 += v8;
                  }
                  while (v53 < v16);
                }
                ++v48;
                ++v49;
              }
              while (v48 != v40);
            }
            v25 = (float)v42;
            v44 = rintf(v43 / (float)v42);
            v45 = (uint64_t)v44 & ~((int)(uint64_t)v44 >> 31);
            if (v45 >= 0xFFFF)
              LOWORD(v45) = -1;
            v19->i16[v41++] = v45;
          }
          while (v41 != v59);
        }
      }
      ++v13;
    }
    while (v13 < a2[1]);
  }
}

uint64_t sub_100332A88(uint64_t a1, uint16x4_t *a2, int16x4_t *a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  int16x4_t *v11;
  uint16x4_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int16x4_t *v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  int16x4_t *v25;
  int v26;
  int16x8_t *v27;
  const __int16 *v28;
  const __int16 *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  BOOL v42;
  int16x8_t *v44;
  unint64_t v45;
  uint64_t v46;
  const __int16 *v47;
  const __int16 *v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  uint64_t v53[2];
  int16x8x2_t v54;
  int16x8x2_t v55;
  int16x8x2_t v56;
  int16x8x2_t v57;

  if (!*(_BYTE *)(a1 + 12))
    return 0;
  v5 = *(_DWORD *)(a1 + 20);
  v6 = *(int *)(a1 + 16);
  v7 = (char *)a2 + v6;
  v8 = *(int *)(a1 + 24);
  if (v5 != 1)
  {
    if (v5 == 4)
    {
      v9 = a4 - 4;
      if ((int)a4 >= 4)
      {
        v10 = 0;
        v11 = a3;
        v12 = a2;
        do
        {
          *v11++ = vrshrn_n_s32((int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_high_u16(vmovl_u16(*v12), *(uint16x8_t *)v12->i8), *(uint16x8_t *)&v12->i8[v8]), *(uint16x4_t *)((char *)v12 + v8)), 2uLL);
          v10 += 4;
          v12 += 2;
        }
        while (v10 <= v9);
        v13 = (v9 & 0xFFFFFFFC) + 4;
        v14 = *(_DWORD *)(a1 + 8);
        if (v14 == 1)
          goto LABEL_26;
        goto LABEL_12;
      }
    }
LABEL_11:
    v13 = 0;
    v14 = *(_DWORD *)(a1 + 8);
    if (v14 == 1)
      goto LABEL_26;
    goto LABEL_12;
  }
  v15 = a4 - 8;
  if ((int)a4 < 8)
    goto LABEL_11;
  v26 = 0;
  v27 = (int16x8_t *)a3;
  v28 = (const __int16 *)a2;
  do
  {
    v29 = (const __int16 *)((char *)v28 + v8);
    v54 = vld2q_s16(v28);
    v28 += 16;
    v56 = vld2q_s16(v29);
    *v27++ = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)v54.val[1].i8, *(uint16x4_t *)v54.val[0].i8), *(uint16x4_t *)v56.val[1].i8), *(uint16x4_t *)v56.val[0].i8), 2uLL), (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddl_high_u16((uint16x8_t)v54.val[1], (uint16x8_t)v54.val[0]), (uint16x8_t)v56.val[1]), (uint16x8_t)v56.val[0]), 2uLL);
    v26 += 8;
  }
  while (v26 <= v15);
  v13 = (v15 & 0xFFFFFFF8) + 8;
  v14 = *(_DWORD *)(a1 + 8);
  if (v14 == 1)
  {
LABEL_26:
    if ((int)v13 < (int)a4)
    {
      v30 = (int)v13;
      v31 = (int)a4 - (uint64_t)(int)v13;
      if (v31 < 0x18)
        goto LABEL_46;
      v32 = ~(uint64_t)(int)v13 + (int)a4;
      v33 = 2 * v13;
      if (2 * (int)v13 > 2 * ((int)v13 + (int)v32)
        || ((v32 & 0x40000000) != 0) != __OFSUB__(((2 * v13) | 1) + 2 * v32, (2 * v13) | 1)
        || v32 >> 31)
      {
        goto LABEL_46;
      }
      v34 = (unint64_t)a3 + 2 * (int)v13;
      v35 = (char *)a3 + 2 * (int)a4;
      v36 = 2 * v33;
      v37 = (char *)a2 + v36;
      v38 = (char *)a2 + v36 + v6;
      v39 = v36 + 4 * (int)a4;
      v40 = (unint64_t)a2 + v39 + v6 - 4 * (int)v13;
      v41 = v34 >= (unint64_t)a2 + v39 - 4 * (int)v13 || v37 >= v35;
      v42 = !v41;
      if (v38 < v35 && v34 < v40)
        goto LABEL_46;
      if (v42)
        goto LABEL_46;
      v44 = (int16x8_t *)((char *)a3 + 2 * (int)v13);
      v45 = v31 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v46 = 2 * v33;
        v47 = (const __int16 *)((char *)a2 + v46);
        v55 = vld2q_s16(v47);
        v48 = (const __int16 *)&v7[v46];
        v57 = vld2q_s16(v48);
        *v44++ = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)v55.val[0].i8, *(uint16x4_t *)v55.val[1].i8), *(uint16x4_t *)v57.val[0].i8), *(uint16x4_t *)v57.val[1].i8), 2uLL), (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddl_high_u16((uint16x8_t)v55.val[0], (uint16x8_t)v55.val[1]), (uint16x8_t)v57.val[0]), (uint16x8_t)v57.val[1]), 2uLL);
        v33 += 16;
        v45 -= 8;
      }
      while (v45);
      v30 = (v31 & 0xFFFFFFFFFFFFFFF8) + (int)v13;
      if (v31 != (v31 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_46:
        v49 = 2 * v30;
        v50 = (int)a4 - v30;
        v51 = (_WORD *)a3 + v30;
        do
        {
          *v51++ = (a2->u16[v49]
                  + *(unsigned __int16 *)&v7[2 * v49]
                  + a2->u16[v49 + 1]
                  + *(unsigned __int16 *)&v7[2 * v49 + 2]
                  + 2) >> 2;
          v49 += 2;
          --v50;
        }
        while (v50);
      }
      return a4;
    }
    return v13;
  }
LABEL_12:
  if (v14 == 4)
  {
    if ((int)v13 >= (int)a4)
      return v13;
    v22 = 0;
    v17 = (int)v13;
    v23 = 2 * v13;
    do
    {
      v24 = v23 + v22;
      v25 = (int16x4_t *)((char *)a3 + 2 * (int)v13 + v22);
      v25->i16[0] = (a2->u16[v24]
                   + *(unsigned __int16 *)&v7[2 * v24]
                   + a2[1].u16[v24]
                   + *(unsigned __int16 *)&v7[2 * v24 + 8]
                   + 2) >> 2;
      v25->i16[1] = (a2->u16[v24 + 1]
                   + a2[1].u16[v24 + 1]
                   + *(unsigned __int16 *)&v7[2 * v24 + 2]
                   + *(unsigned __int16 *)&v7[2 * v24 + 10]
                   + 2) >> 2;
      v25->i16[2] = (a2->u16[v23 + 2 + (int)v22]
                   + a2[1].u16[v23 + 2 + (int)v22]
                   + *(unsigned __int16 *)&v7[2 * v23 + 4 + 2 * (int)v22]
                   + *(unsigned __int16 *)&v7[2 * v23 + 12 + 2 * (int)v22]
                   + 2) >> 2;
      v25->i16[3] = (a2->u16[v23 + 3 + (int)v22]
                   + a2[1].u16[v23 + 3 + (int)v22]
                   + *(unsigned __int16 *)&v7[2 * v23 + 6 + 2 * (int)v22]
                   + *(unsigned __int16 *)&v7[2 * v23 + 14 + 2 * (int)v22]
                   + 2) >> 2;
      v17 += 4;
      v22 += 8;
    }
    while (v17 < (int)a4);
    return v17;
  }
  if (v14 != 3)
  {
    v53[0] = 0;
    v53[1] = 0;
    v21 = (_DWORD *)sub_10029430C(v53, 7);
    *v21 = 1025535587;
    *(_DWORD *)((char *)v21 + 3) = 874528061;
    sub_100294B74(-215, v53, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2890);
  }
  if ((int)v13 < (int)a4)
  {
    v16 = 0;
    v17 = (int)v13;
    v18 = 2 * v13;
    do
    {
      v19 = v18 + v16;
      v20 = (int16x4_t *)((char *)a3 + 2 * (int)v13 + v16);
      v20->i16[0] = (a2->u16[v19]
                   + *(unsigned __int16 *)&v7[2 * v19]
                   + a2->u16[v19 + 3]
                   + *(unsigned __int16 *)&v7[2 * v19 + 6]
                   + 2) >> 2;
      v20->i16[1] = (a2->u16[v18 + 1 + (int)v16]
                   + a2[1].u16[v18 + (int)v16]
                   + *(unsigned __int16 *)&v7[2 * v18 + 2 + 2 * (int)v16]
                   + *(unsigned __int16 *)&v7[2 * v18 + 8 + 2 * (int)v16]
                   + 2) >> 2;
      v20->i16[2] = (a2->u16[v18 + 2 + (int)v16]
                   + a2[1].u16[v18 + 1 + (int)v16]
                   + *(unsigned __int16 *)&v7[2 * v18 + 4 + 2 * (int)v16]
                   + *(unsigned __int16 *)&v7[2 * v18 + 10 + 2 * (int)v16]
                   + 2) >> 2;
      v17 += 3;
      v16 += 6;
    }
    while (v17 < (int)a4);
    return v17;
  }
  return v13;
}

void sub_100332F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100332F8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453C38;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_1003330AC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  __int128 v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;

  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a1 = off_100453C78;
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 20);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v17 = *(_QWORD **)(a2 + 72);
    v18 = *(_QWORD **)(a1 + 80);
    *v18 = *v17;
    v18[1] = v17[1];
  }
  v19 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v21 = *(_QWORD *)(a3 + 48);
  v20 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v21;
  *(_QWORD *)(a1 + 160) = v20;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v19;
  if (v20)
  {
    v22 = (unsigned int *)(v20 + 20);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v24 = *(_QWORD **)(a3 + 72);
    v25 = *(_QWORD **)(a1 + 176);
    *v25 = *v24;
    v25[1] = v24[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(_QWORD *)(a1 + 208) = a6;
  *(_QWORD *)(a1 + 216) = a7;
  return a1;
}

void sub_100333208(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100006BE4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100333224(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100333238(uint64_t a1)
{
  sub_100333B1C(a1);
  operator delete();
}

void sub_10033325C(uint64_t a1, int *a2)
{
  int *v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int16x4_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int16x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  signed int v31;
  float v32;
  uint64_t v33;
  int *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __int16 *v49;
  unint64_t v50;
  int v51;
  signed int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  _DWORD v60[3];
  char v61;
  int v62;
  int v63;
  int v64;

  v2 = *(int **)(a1 + 72);
  v3 = v2[1];
  v4 = *v2;
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4);
  v6 = *(unsigned int *)(a1 + 8);
  v7 = (v6 >> 3) & 0x1FF;
  v8 = v7 + 1;
  v9 = *(_DWORD *)(a1 + 200);
  v10 = *(_DWORD *)(a1 + 204);
  v11 = *(_DWORD *)(a1 + 88);
  v60[0] = v9;
  v60[1] = v10;
  v60[2] = v7 + 1;
  v62 = v11;
  v63 = v7 + 1;
  v64 = v11;
  v45 = v7 > 3;
  v12 = (0xDu >> ((v6 >> 3) & 0xF)) & 1;
  if (v45)
    LOBYTE(v12) = 0;
  if (v10 != 2)
    LOBYTE(v12) = 0;
  if (v9 != 2)
    LOBYTE(v12) = 0;
  v61 = v12;
  v13 = *a2;
  if ((int)v13 < a2[1])
  {
    v15 = v10 * v9;
    v58 = v3 / v9 * v8;
    v16 = v8 * v3;
    v17 = v10 * v9 - 4;
    v52 = ((v10 * v9 - 4) & 0xFFFFFFFC) + 4;
    v57 = v8 * v5;
    v53 = 2 * (v8 * v5);
    v18 = 2 * ((v6 >> 3) & 0x1FF) + 2;
    do
    {
      v19 = (int16x4_t *)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 184) * v13);
      v20 = *(_DWORD *)(a1 + 204);
      v21 = v20 * v13;
      if (v20 * (int)v13 + v20 <= (int)v4)
        v22 = v58;
      else
        v22 = 0;
      if (v21 >= (int)v4)
      {
        if (v57 >= 1)
        {
          v37 = v13;
          bzero((void *)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 184) * v13), v53);
          v13 = v37;
        }
      }
      else
      {
        v55 = v22;
        v56 = v13;
        v54 = v20 * v13;
        v23 = v21;
        v24 = sub_100333618((uint64_t)v60, (int16x4_t *)(*(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v21), v19, v22);
        if (v24 < v55)
        {
          v26 = *(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v23;
          v27 = *(_QWORD *)(a1 + 216);
          v28 = v24;
          while (1)
          {
            v30 = v26 + 2 * *(int *)(v27 + 4 * v28);
            if (v15 >= 4)
              break;
            v31 = 0;
            v32 = 0.0;
            if (v15 > 0)
              goto LABEL_27;
LABEL_16:
            v29 = (uint64_t)rintf((float)(1.0 / (float)v15) * v32);
            if ((int)v29 <= -32768)
              LODWORD(v29) = -32768;
            if ((int)v29 >= 0x7FFF)
              LOWORD(v29) = 0x7FFF;
            v19->i16[v28++] = v29;
            if (v28 == v55)
            {
              v24 = v55;
              goto LABEL_33;
            }
          }
          v33 = 0;
          v32 = 0.0;
          do
          {
            v34 = (int *)(*(_QWORD *)(a1 + 208) + 4 * v33);
            *(float *)v25.i32 = (float)(*(__int16 *)(v30 + 2 * v34[1])
                                      + *(__int16 *)(v30 + 2 * *v34)
                                      + *(__int16 *)(v30 + 2 * v34[2])
                                      + *(__int16 *)(v30 + 2 * v34[3]));
            v32 = v32 + *(float *)v25.i32;
            v33 += 4;
          }
          while (v33 <= v17);
          v31 = v52;
          if (v52 >= v15)
            goto LABEL_16;
LABEL_27:
          v35 = (int *)(*(_QWORD *)(a1 + 208) + 4 * v31);
          do
          {
            v36 = *v35++;
            v25.i16[0] = *(_WORD *)(v30 + 2 * v36);
            v25 = (int16x4_t)vmovl_s16(v25).u64[0];
            *(float *)v25.i32 = (float)v25.i32[0];
            v32 = v32 + *(float *)v25.i32;
            ++v31;
          }
          while (v15 > v31);
          goto LABEL_16;
        }
LABEL_33:
        v13 = v56;
        if (v24 < v57)
        {
          v38 = *(_QWORD *)(a1 + 216);
          v39 = *(unsigned int *)(a1 + 204);
          v40 = v24;
          do
          {
            v44 = *(int *)(v38 + 4 * v40);
            v45 = (int)v44 >= v16 || (int)v39 < 1;
            if (v45)
            {
              v41 = 0;
              v42 = 0.0;
            }
            else
            {
              v46 = 0;
              v41 = 0;
              v42 = 0.0;
              v47 = v54;
              do
              {
                if (v46 + v23 >= v4)
                  break;
                v48 = (*(_DWORD *)(a1 + 200) * v8);
                if ((int)v48 >= 1)
                {
                  v49 = (__int16 *)(*(_QWORD *)(a1 + 24) + 2 * v44 + **(_QWORD **)(a1 + 80) * v47);
                  v50 = v8;
                  do
                  {
                    v25.i16[0] = *v49;
                    v25 = (int16x4_t)vmovl_s16(v25).u64[0];
                    *(float *)v25.i32 = (float)v25.i32[0];
                    v42 = v42 + *(float *)v25.i32;
                    ++v41;
                    if (v50 >= v48)
                      break;
                    v51 = *(_DWORD *)(v38 + 4 * v40) + v50;
                    v49 = (__int16 *)((char *)v49 + v18);
                    v50 += v8;
                  }
                  while (v51 < v16);
                }
                ++v46;
                ++v47;
              }
              while (v46 != v39);
            }
            *(float *)v25.i32 = (float)v41;
            v43 = (uint64_t)rintf(v42 / (float)v41);
            if ((int)v43 <= -32768)
              LODWORD(v43) = -32768;
            if ((int)v43 >= 0x7FFF)
              LOWORD(v43) = 0x7FFF;
            v19->i16[v40++] = v43;
          }
          while (v40 != v57);
        }
      }
      ++v13;
    }
    while (v13 < a2[1]);
  }
}

uint64_t sub_100333618(uint64_t a1, int16x4_t *a2, int16x4_t *a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  int16x4_t *v11;
  int16x4_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int16x4_t *v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  int16x4_t *v25;
  int v26;
  int16x8_t *v27;
  const __int16 *v28;
  const __int16 *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  BOOL v42;
  int16x8_t *v44;
  unint64_t v45;
  uint64_t v46;
  const __int16 *v47;
  const __int16 *v48;
  int v49;
  unint64_t v50;
  _WORD *v51;
  uint64_t v53[2];
  int16x8x2_t v54;
  int16x8x2_t v55;
  int16x8x2_t v56;
  int16x8x2_t v57;

  if (!*(_BYTE *)(a1 + 12))
    return 0;
  v5 = *(_DWORD *)(a1 + 20);
  v6 = *(int *)(a1 + 16);
  v7 = (char *)a2 + v6;
  v8 = *(int *)(a1 + 24);
  if (v5 != 1)
  {
    if (v5 == 4)
    {
      v9 = a4 - 4;
      if ((int)a4 >= 4)
      {
        v10 = 0;
        v11 = a3;
        v12 = a2;
        do
        {
          *v11++ = vrshrn_n_s32(vaddw_s16(vaddw_high_s16(vaddw_high_s16(vmovl_s16(*v12), *(int16x8_t *)v12->i8), *(int16x8_t *)&v12->i8[v8]), *(int16x4_t *)((char *)v12 + v8)), 2uLL);
          v10 += 4;
          v12 += 2;
        }
        while (v10 <= v9);
        v13 = (v9 & 0xFFFFFFFC) + 4;
        v14 = *(_DWORD *)(a1 + 8);
        if (v14 == 1)
          goto LABEL_26;
        goto LABEL_12;
      }
    }
LABEL_11:
    v13 = 0;
    v14 = *(_DWORD *)(a1 + 8);
    if (v14 == 1)
      goto LABEL_26;
    goto LABEL_12;
  }
  v15 = a4 - 8;
  if ((int)a4 < 8)
    goto LABEL_11;
  v26 = 0;
  v27 = (int16x8_t *)a3;
  v28 = (const __int16 *)a2;
  do
  {
    v29 = (const __int16 *)((char *)v28 + v8);
    v54 = vld2q_s16(v28);
    v28 += 16;
    v56 = vld2q_s16(v29);
    *v27++ = vrshrn_high_n_s32(vrshrn_n_s32(vaddw_s16(vaddw_s16(vaddl_s16(*(int16x4_t *)v54.val[1].i8, *(int16x4_t *)v54.val[0].i8), *(int16x4_t *)v56.val[1].i8), *(int16x4_t *)v56.val[0].i8), 2uLL), vaddw_high_s16(vaddw_high_s16(vaddl_high_s16(v54.val[1], v54.val[0]), v56.val[1]), v56.val[0]), 2uLL);
    v26 += 8;
  }
  while (v26 <= v15);
  v13 = (v15 & 0xFFFFFFF8) + 8;
  v14 = *(_DWORD *)(a1 + 8);
  if (v14 == 1)
  {
LABEL_26:
    if ((int)v13 < (int)a4)
    {
      v30 = (int)v13;
      v31 = (int)a4 - (uint64_t)(int)v13;
      if (v31 < 0x18)
        goto LABEL_46;
      v32 = ~(uint64_t)(int)v13 + (int)a4;
      v33 = 2 * v13;
      if (2 * (int)v13 > 2 * ((int)v13 + (int)v32)
        || ((v32 & 0x40000000) != 0) != __OFSUB__(((2 * v13) | 1) + 2 * v32, (2 * v13) | 1)
        || v32 >> 31)
      {
        goto LABEL_46;
      }
      v34 = (unint64_t)a3 + 2 * (int)v13;
      v35 = (char *)a3 + 2 * (int)a4;
      v36 = 2 * v33;
      v37 = (char *)a2 + v36;
      v38 = (char *)a2 + v36 + v6;
      v39 = v36 + 4 * (int)a4;
      v40 = (unint64_t)a2 + v39 + v6 - 4 * (int)v13;
      v41 = v34 >= (unint64_t)a2 + v39 - 4 * (int)v13 || v37 >= v35;
      v42 = !v41;
      if (v38 < v35 && v34 < v40)
        goto LABEL_46;
      if (v42)
        goto LABEL_46;
      v44 = (int16x8_t *)((char *)a3 + 2 * (int)v13);
      v45 = v31 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v46 = 2 * v33;
        v47 = (const __int16 *)((char *)a2 + v46);
        v55 = vld2q_s16(v47);
        v48 = (const __int16 *)&v7[v46];
        v57 = vld2q_s16(v48);
        *v44++ = vrshrn_high_n_s32(vrshrn_n_s32(vaddw_s16(vaddw_s16(vaddl_s16(*(int16x4_t *)v55.val[0].i8, *(int16x4_t *)v55.val[1].i8), *(int16x4_t *)v57.val[0].i8), *(int16x4_t *)v57.val[1].i8), 2uLL), vaddw_high_s16(vaddw_high_s16(vaddl_high_s16(v55.val[0], v55.val[1]), v57.val[0]), v57.val[1]), 2uLL);
        v33 += 16;
        v45 -= 8;
      }
      while (v45);
      v30 = (v31 & 0xFFFFFFFFFFFFFFF8) + (int)v13;
      if (v31 != (v31 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_46:
        v49 = 2 * v30;
        v50 = (int)a4 - v30;
        v51 = (_WORD *)a3 + v30;
        do
        {
          *v51++ = (a2->i16[v49]
                                + *(__int16 *)&v7[2 * v49]
                                + a2->i16[v49 + 1]
                                + *(__int16 *)&v7[2 * v49 + 2]
                                + 2) >> 2;
          v49 += 2;
          --v50;
        }
        while (v50);
      }
      return a4;
    }
    return v13;
  }
LABEL_12:
  if (v14 == 4)
  {
    if ((int)v13 >= (int)a4)
      return v13;
    v22 = 0;
    v17 = (int)v13;
    v23 = 2 * v13;
    do
    {
      v24 = v23 + v22;
      v25 = (int16x4_t *)((char *)a3 + 2 * (int)v13 + v22);
      v25->i16[0] = (a2->i16[v24]
                                 + *(__int16 *)&v7[2 * v24]
                                 + a2[1].i16[v24]
                                 + *(__int16 *)&v7[2 * v24 + 8]
                                 + 2) >> 2;
      v25->i16[1] = (a2->i16[v24 + 1]
                                 + a2[1].i16[v24 + 1]
                                 + *(__int16 *)&v7[2 * v24 + 2]
                                 + *(__int16 *)&v7[2 * v24 + 10]
                                 + 2) >> 2;
      v25->i16[2] = (a2->i16[v23 + 2 + (int)v22]
                                 + a2[1].i16[v23 + 2 + (int)v22]
                                 + *(__int16 *)&v7[2 * v23 + 4 + 2 * (int)v22]
                                 + *(__int16 *)&v7[2 * v23 + 12 + 2 * (int)v22]
                                 + 2) >> 2;
      v25->i16[3] = (a2->i16[v23 + 3 + (int)v22]
                                 + a2[1].i16[v23 + 3 + (int)v22]
                                 + *(__int16 *)&v7[2 * v23 + 6 + 2 * (int)v22]
                                 + *(__int16 *)&v7[2 * v23 + 14 + 2 * (int)v22]
                                 + 2) >> 2;
      v17 += 4;
      v22 += 8;
    }
    while (v17 < (int)a4);
    return v17;
  }
  if (v14 != 3)
  {
    v53[0] = 0;
    v53[1] = 0;
    v21 = (_DWORD *)sub_10029430C(v53, 7);
    *v21 = 1025535587;
    *(_DWORD *)((char *)v21 + 3) = 874528061;
    sub_100294B74(-215, v53, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2890);
  }
  if ((int)v13 < (int)a4)
  {
    v16 = 0;
    v17 = (int)v13;
    v18 = 2 * v13;
    do
    {
      v19 = v18 + v16;
      v20 = (int16x4_t *)((char *)a3 + 2 * (int)v13 + v16);
      v20->i16[0] = (a2->i16[v19]
                                 + *(__int16 *)&v7[2 * v19]
                                 + a2->i16[v19 + 3]
                                 + *(__int16 *)&v7[2 * v19 + 6]
                                 + 2) >> 2;
      v20->i16[1] = (a2->i16[v18 + 1 + (int)v16]
                                 + a2[1].i16[v18 + (int)v16]
                                 + *(__int16 *)&v7[2 * v18 + 2 + 2 * (int)v16]
                                 + *(__int16 *)&v7[2 * v18 + 8 + 2 * (int)v16]
                                 + 2) >> 2;
      v20->i16[2] = (a2->i16[v18 + 2 + (int)v16]
                                 + a2[1].i16[v18 + 1 + (int)v16]
                                 + *(__int16 *)&v7[2 * v18 + 4 + 2 * (int)v16]
                                 + *(__int16 *)&v7[2 * v18 + 10 + 2 * (int)v16]
                                 + 2) >> 2;
      v17 += 3;
      v16 += 6;
    }
    while (v17 < (int)a4);
    return v17;
  }
  return v13;
}

void sub_100333B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100333B1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453C78;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_100333C3C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  __int128 v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;

  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a1 = off_100453CB8;
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 20);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v17 = *(_QWORD **)(a2 + 72);
    v18 = *(_QWORD **)(a1 + 80);
    *v18 = *v17;
    v18[1] = v17[1];
  }
  v19 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v21 = *(_QWORD *)(a3 + 48);
  v20 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v21;
  *(_QWORD *)(a1 + 160) = v20;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v19;
  if (v20)
  {
    v22 = (unsigned int *)(v20 + 20);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v24 = *(_QWORD **)(a3 + 72);
    v25 = *(_QWORD **)(a1 + 176);
    *v25 = *v24;
    v25[1] = v24[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(_QWORD *)(a1 + 208) = a6;
  *(_QWORD *)(a1 + 216) = a7;
  return a1;
}

void sub_100333D98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100006BE4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100333DB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100333DC8(uint64_t a1)
{
  sub_1003341E0(a1);
  operator delete();
}

void sub_100333DEC(uint64_t a1, int *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v8;
  uint64_t v9;
  int *v10;
  int *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  signed int v21;
  uint64_t v22;
  void *v27;
  int v28;
  int v29;
  int v30;
  float32x4_t *v31;
  int v32;
  int v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  signed int v44;
  float v45;
  uint64_t v46;
  int *v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  float v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  float *v60;
  unint64_t v61;
  int v62;
  int v63;
  float32x4_t *v64;
  const float *v65;
  float32x4_t v66;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  float32x4x2_t v74;
  float32x4x2_t v75;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = (v2 >> 3) & 0x1FF;
  v4 = v3 + 1;
  v5 = *(_DWORD *)(a1 + 200);
  v6 = *(_DWORD *)(a1 + 204);
  if ((_DWORD)v3)
    _ZF = (_DWORD)v4 == 4;
  else
    _ZF = 1;
  v8 = _ZF;
  if (v6 != 2)
    v8 = 0;
  if (v5 != 2)
    v8 = 0;
  v71 = v8;
  v9 = *a2;
  if ((int)v9 < a2[1])
  {
    v10 = a2;
    v12 = *(int **)(a1 + 72);
    v13 = v12[1];
    v14 = *v12;
    v15 = v6 * v5;
    v16 = (v13 / v5 * v4);
    v17 = (v4 * *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4));
    v18 = v4 * v13;
    v19 = (int)*(_QWORD *)(a1 + 88);
    v68 = 4 * v17;
    v69 = v19;
    v20 = v6 * v5 - 4;
    v21 = ((v6 * v5 - 4) & 0xFFFFFFFC) + 4;
    v73 = (int)v17;
    v22 = 4 * ((v2 >> 3) & 0x1FF) + 4;
    __asm { FMOV            V4.4S, #0.25 }
    v70 = v4 * *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4);
    v66 = _Q4;
    do
    {
      v27 = (void *)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 184) * v9);
      v28 = *(_DWORD *)(a1 + 204);
      v29 = v28 * v9;
      if (v28 * (int)v9 + v28 <= (int)v14)
        v30 = v16;
      else
        v30 = 0;
      if (v29 >= (int)v14)
      {
        if ((int)v17 >= 1)
        {
          v72 = v9;
          v38 = v3;
          v39 = v16;
          bzero(v27, v68);
          _Q4 = v66;
          v16 = v39;
          v19 = v69;
          LODWORD(v17) = v70;
          v3 = v38;
          v9 = v72;
          v10 = a2;
        }
      }
      else
      {
        if (v71)
        {
          v31 = (float32x4_t *)(*(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v29);
          if ((_DWORD)v3)
          {
            if ((_DWORD)v3 == 3)
            {
              v32 = v30 - 4;
              if (v30 >= 4)
              {
                v33 = 0;
                v34 = (float32x4_t *)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 184) * v9);
                do
                {
                  v35 = (float32x4_t *)((char *)v31 + v19);
                  v36 = *v31;
                  v37 = v31[1];
                  v31 += 2;
                  *v34++ = vmulq_f32(vaddq_f32(vaddq_f32(v36, v37), vaddq_f32(*v35, v35[1])), _Q4);
                  v33 += 4;
                }
                while (v33 <= v32);
                goto LABEL_59;
              }
            }
          }
          else
          {
            v32 = v30 - 4;
            if (v30 >= 4)
            {
              v63 = 0;
              v64 = (float32x4_t *)(*(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 184) * v9);
              do
              {
                v65 = (const float *)((char *)v31->f32 + v19);
                v74 = vld2q_f32(v31->f32);
                v31 += 2;
                v75 = vld2q_f32(v65);
                *v64++ = vmulq_f32(vaddq_f32(vaddq_f32(v74.val[0], v74.val[1]), vaddq_f32(v75.val[0], v75.val[1])), _Q4);
                v63 += 4;
              }
              while (v63 <= v32);
LABEL_59:
              LODWORD(v40) = (v32 & 0xFFFFFFFC) + 4;
              if ((int)v40 >= v30)
                goto LABEL_41;
LABEL_29:
              v41 = *(_QWORD *)(a1 + 24) + **(_QWORD **)(a1 + 80) * v29;
              v42 = *(_QWORD *)(a1 + 216);
              v40 = (int)v40;
              while (2)
              {
                v43 = v41 + 4 * *(int *)(v42 + 4 * v40);
                if (v15 >= 4)
                {
                  v46 = 0;
                  v45 = 0.0;
                  do
                  {
                    v47 = (int *)(*(_QWORD *)(a1 + 208) + 4 * v46);
                    v45 = v45
                        + (float)((float)((float)(*(float *)(v43 + 4 * *v47) + *(float *)(v43 + 4 * v47[1]))
                                        + *(float *)(v43 + 4 * v47[2]))
                                + *(float *)(v43 + 4 * v47[3]));
                    v46 += 4;
                  }
                  while (v46 <= v20);
                  v44 = v21;
                  if (v21 < v15)
                  {
LABEL_37:
                    v48 = (int *)(*(_QWORD *)(a1 + 208) + 4 * v44);
                    do
                    {
                      v49 = *v48++;
                      v45 = v45 + *(float *)(v43 + 4 * v49);
                      ++v44;
                    }
                    while (v15 > v44);
                  }
                }
                else
                {
                  v44 = 0;
                  v45 = 0.0;
                  if (v15 > 0)
                    goto LABEL_37;
                }
                *((float *)v27 + v40++) = (float)(1.0 / (float)v15) * v45;
                if (v40 == v30)
                {
                  LODWORD(v40) = v30;
                  goto LABEL_41;
                }
                continue;
              }
            }
          }
        }
        LODWORD(v40) = 0;
        if (v30 > 0)
          goto LABEL_29;
LABEL_41:
        if ((int)v40 < (int)v17)
        {
          v50 = *(_QWORD *)(a1 + 216);
          v51 = *(unsigned int *)(a1 + 204);
          v52 = (int)v40;
          do
          {
            v55 = *(int *)(v50 + 4 * v52);
            if ((int)v55 >= v18 || (int)v51 < 1)
            {
              v53 = 0;
              v54 = 0.0;
            }
            else
            {
              v57 = 0;
              v53 = 0;
              v54 = 0.0;
              v58 = v29;
              do
              {
                if (v57 + v29 >= v14)
                  break;
                v59 = (*(_DWORD *)(a1 + 200) * v4);
                if ((int)v59 >= 1)
                {
                  v60 = (float *)(*(_QWORD *)(a1 + 24) + 4 * v55 + **(_QWORD **)(a1 + 80) * v58);
                  v61 = v4;
                  do
                  {
                    v54 = v54 + *v60;
                    ++v53;
                    if (v61 >= v59)
                      break;
                    v62 = *(_DWORD *)(v50 + 4 * v52) + v61;
                    v60 = (float *)((char *)v60 + v22);
                    v61 += v4;
                  }
                  while (v62 < v18);
                }
                ++v57;
                ++v58;
              }
              while (v57 != v51);
            }
            *((float *)v27 + v52++) = v54 / (float)v53;
          }
          while (v52 != v73);
        }
      }
      ++v9;
    }
    while (v9 < v10[1]);
  }
}

uint64_t sub_1003341E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453CB8;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

uint64_t sub_100334300(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  __int128 v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;

  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a1 = off_100453CF8;
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 20);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_100256B48(a1 + 8, a2);
  }
  else
  {
    v17 = *(_QWORD **)(a2 + 72);
    v18 = *(_QWORD **)(a1 + 80);
    *v18 = *v17;
    v18[1] = v17[1];
  }
  v19 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  v21 = *(_QWORD *)(a3 + 48);
  v20 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = v21;
  *(_QWORD *)(a1 + 160) = v20;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v19;
  if (v20)
  {
    v22 = (unsigned int *)(v20 + 20);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_100256B48(a1 + 104, a3);
  }
  else
  {
    v24 = *(_QWORD **)(a3 + 72);
    v25 = *(_QWORD **)(a1 + 176);
    *v25 = *v24;
    v25[1] = v24[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(_QWORD *)(a1 + 208) = a6;
  *(_QWORD *)(a1 + 216) = a7;
  return a1;
}

void sub_10033445C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100006BE4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100334478(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10033448C(uint64_t a1)
{
  sub_1003347F0(a1);
  operator delete();
}

void sub_1003344B0(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  signed int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  signed int v34;
  double v35;
  uint64_t v36;
  int *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  float v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  int v47;
  double *v48;
  uint64_t v49;
  double *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;

  v2 = a2[1];
  v56 = *a2;
  if (v2 > (int)v56)
  {
    v3 = a1;
    v4 = 0;
    v5 = *(int **)(a1 + 72);
    v6 = *(unsigned int *)(a1 + 8);
    v7 = ((v6 >> 3) & 0x1FF) + 1;
    v8 = *(_DWORD *)(a1 + 200);
    v9 = *(int *)(a1 + 204);
    v10 = *(unsigned int *)(a1 + 204);
    v11 = v9 * v8;
    v12 = v5[1];
    v13 = *v5;
    v14 = (v12 / v8 * v7);
    v15 = (v7 * *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4));
    v16 = v7 * v12;
    v17 = *(_QWORD *)(a1 + 120);
    v18 = *(_QWORD *)(a1 + 184);
    v19 = (float)(1.0 / (float)(v9 * v8));
    v52 = v18;
    v20 = (int)v9 * v8 - 4;
    v21 = ((v9 * v8 - 4) & 0xFFFFFFFC) + 4;
    v22 = (int)v7 * v8;
    v58 = v2 - v56;
    v60 = (int)v56 * (uint64_t)(int)v9;
    v23 = 8 * ((v6 >> 3) & 0x1FF) + 8;
    v24 = *a2;
    v54 = v14;
    v53 = v17;
    do
    {
      v25 = v24 * v9;
      v59 = v24;
      if (v24 * v9 >= v13)
      {
        if ((int)v15 >= 1)
        {
          v57 = v4;
          bzero((void *)(v17 + v18 * (v4 + v56)), 8 * v15);
          v21 = ((v11 - 4) & 0xFFFFFFFC) + 4;
          v18 = v52;
          v17 = v53;
          v14 = v54;
          v3 = a1;
          v4 = v57;
        }
        goto LABEL_3;
      }
      v26 = v17 + v18 * v24;
      v27 = *(_QWORD *)(v3 + 24);
      v28 = **(_QWORD **)(v3 + 80);
      if (v25 > v13 - v9 || (int)v14 < 1)
      {
        LODWORD(v30) = 0;
        if ((int)v15 > 0)
          goto LABEL_25;
        goto LABEL_3;
      }
      v31 = 0;
      v32 = *(_QWORD *)(v3 + 216);
      do
      {
        v33 = v27 + v28 * v25 + 8 * *(int *)(v32 + 4 * v31);
        if (v11 < 4)
        {
          v34 = 0;
          v35 = 0.0;
          if (v11 <= 0)
            goto LABEL_14;
LABEL_21:
          v38 = (int *)(*(_QWORD *)(v3 + 208) + 4 * v34);
          do
          {
            v39 = *v38++;
            v35 = v35 + *(double *)(v33 + 8 * v39);
            ++v34;
          }
          while (v11 > v34);
          goto LABEL_14;
        }
        v36 = 0;
        v35 = 0.0;
        do
        {
          v37 = (int *)(*(_QWORD *)(v3 + 208) + 4 * v36);
          v35 = v35
              + *(double *)(v33 + 8 * *v37)
              + *(double *)(v33 + 8 * v37[1])
              + *(double *)(v33 + 8 * v37[2])
              + *(double *)(v33 + 8 * v37[3]);
          v36 += 4;
        }
        while (v36 <= v20);
        v34 = v21;
        if (v21 < v11)
          goto LABEL_21;
LABEL_14:
        *(double *)(v26 + 8 * v31++) = v35 * v19;
      }
      while (v31 != v14);
      LODWORD(v30) = v14;
      if ((int)v14 < (int)v15)
      {
LABEL_25:
        v40 = *(_QWORD *)(v3 + 216);
        v30 = v30;
        v41 = v27 + v28 * v60;
        do
        {
          v44 = *(int *)(v40 + 4 * v30);
          if ((int)v44 >= v16)
            *(_QWORD *)(v26 + 8 * v30) = 0;
          v45 = 0.0;
          if ((int)v9 < 1)
          {
            v42 = 0;
          }
          else
          {
            v42 = 0;
            if ((int)v22 >= 1 && (int)v44 < v16)
            {
              v46 = 0;
              v42 = 0;
              v47 = v44;
              v48 = (double *)(v41 + 8 * v44);
              do
              {
                if (v46 + v25 >= v13)
                  break;
                v49 = v7;
                v50 = v48;
                do
                {
                  v45 = v45 + *v50;
                  ++v42;
                  if (v49 >= v22)
                    break;
                  v51 = v47 + v49;
                  v50 = (double *)((char *)v50 + v23);
                  v49 += v7;
                }
                while (v51 < v16);
                ++v46;
                v48 = (double *)((char *)v48 + v28);
              }
              while (v46 != v10);
            }
          }
          v43 = v45;
          *(double *)(v26 + 8 * v30++) = (float)(v43 / (float)v42);
        }
        while (v30 != v15);
      }
LABEL_3:
      v24 = v59 + 1;
      ++v4;
      v60 += v9;
    }
    while (v58 != (_DWORD)v4);
  }
}

uint64_t sub_1003347F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100453CF8;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

void sub_100334910(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

_BYTE *sub_100334934(uint64_t a1, int *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  __int128 v6;
  unsigned int *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  BOOL v21;
  char v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  unsigned int v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  unint64_t *v51;
  float32x4_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  unsigned __int32 *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  unsigned int v61;
  int8x16_t *v62;
  float32x4_t *v63;
  uint64_t v64;
  int8x16_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  uint64_t v69;
  float *v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  unsigned int *v74;
  unsigned __int8 *v75;
  unsigned int v76;
  uint64_t v77;
  float *v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  float v87;
  uint64_t v88;
  float *v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  unsigned __int8 *v93;
  float v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  float *v104;
  float v105;
  int v106;
  uint64_t v107;
  float32x4_t *v108;
  float32x4_t *v109;
  float32x4_t v110;
  unsigned __int32 *v111;
  uint64_t v112;
  float *v113;
  _BYTE *v114;
  uint64_t v115;
  float v116;
  float v117;
  int v118;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  _BYTE v136[1064];

  v8 = *(unsigned int **)(a1 + 16);
  v9 = *v8;
  v126 = (v9 >> 3) & 0x1FF;
  v10 = v126 + 1;
  v11 = ((int)v126 + 1) * (uint64_t)*(int *)(*((_QWORD *)v8 + 8) + 4);
  v128 = v11;
  v129 = a1;
  if ((2 * v11) >= 0x109)
    operator new[]();
  v12 = *(unsigned int *)(a1 + 40);
  v13 = &v136[4 * v11];
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(int *)(v14 + 4 * *a2);
  v133 = *(int *)(v14 + 4 * a2[1]);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 12 * (int)v15 + 4);
  v127 = v16;
  v120 = v13;
  if ((int)v11 >= 1)
  {
    v18 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 12 * (int)v15 + 4);
    bzero(v13, 4 * v11);
    v13 = v120;
    v17 = v18;
    v16 = v127;
    v11 = v128;
    a1 = v129;
  }
  if ((int)v15 < (int)v133)
  {
    v19 = v10;
    v131 = 4 * v11;
    v20 = &v136[4 * ((v9 >> 3) & 0x1FF) + 4];
    v135 = v10 & 0x3F0;
    v21 = v13 >= &v136[v131] || v136 >= &v136[4 * v11 + 4 * v11];
    v124 = v11;
    v122 = v11 & 0xFFFFFFF8;
    v23 = !v21 || v11 < 8;
    v123 = v23;
    v130 = (float *)(v16 + 8);
    v125 = v10 & 0x3F8;
    v24 = v11;
    v25 = (int8x16_t)xmmword_1003BCAA0;
    v26 = (int8x16_t)xmmword_1003BCA90;
    v27 = (int8x16_t)xmmword_1003BCAC0;
    v28 = (int8x16_t)xmmword_1003BCAB0;
    v29 = (v9 >> 3) & 0x1FF;
    v121 = ((v9 >> 3) & 0x1FF) + 1;
    v132 = v12;
    while (1)
    {
      v31 = (int *)(*(_QWORD *)(a1 + 32) + 12 * v15);
      LODWORD(v6) = v31[2];
      v30 = v31[1];
      v32 = *v31;
      v33 = *(_QWORD *)(a1 + 8);
      v34 = *(_QWORD *)(v33 + 16);
      v35 = **(_QWORD **)(v33 + 72);
      if ((int)v11 >= 1)
      {
        v36 = v19;
        v37 = v30;
        v38 = v15;
        v39 = v17;
        v134 = v6;
        bzero(v136, v131);
        v6 = v134;
        v28 = (int8x16_t)xmmword_1003BCAB0;
        v27 = (int8x16_t)xmmword_1003BCAC0;
        v26 = (int8x16_t)xmmword_1003BCA90;
        v25 = (int8x16_t)xmmword_1003BCAA0;
        v17 = v39;
        v15 = v38;
        v30 = v37;
        v19 = v36;
        v29 = v126;
        v16 = v127;
        LODWORD(v11) = v128;
        a1 = v129;
      }
      v40 = v34 + v35 * v32;
      switch(v29)
      {
        case 0u:
          v41 = v132;
          v42 = v130;
          if ((int)v132 >= 1)
          {
            do
            {
              a4.i8[0] = *(_BYTE *)(v40 + *((int *)v42 - 2));
              v43 = 4 * *((int *)v42 - 1);
              a5.i32[0] = *(_DWORD *)&v136[v43];
              a4.f32[0] = (float)a4.u32[0];
              *(float *)&v136[v43] = a5.f32[0] + (float)(a4.f32[0] * *v42);
              v42 += 3;
              --v41;
            }
            while (v41);
          }
          goto LABEL_56;
        case 1u:
          v69 = v132;
          v70 = v130;
          if ((int)v132 >= 1)
          {
            do
            {
              v71 = *((int *)v70 - 2);
              v72 = *((int *)v70 - 1);
              v73 = *v70;
              v70 += 3;
              v74 = (unsigned int *)&v136[4 * v72];
              v75 = (unsigned __int8 *)(v40 + v71);
              a4.i8[0] = *v75;
              v76 = *v74;
              a6.i32[0] = v74[1];
              a4.f32[0] = *(float *)v74 + (float)((float)a4.u32[0] * v73);
              LOBYTE(v76) = v75[1];
              a5.f32[0] = (float)v76;
              *v74 = a4.i32[0];
              *((float *)v74 + 1) = a6.f32[0] + (float)(a5.f32[0] * v73);
              --v69;
            }
            while (v69);
          }
          goto LABEL_56;
        case 2u:
          v77 = v132;
          v78 = v130;
          if ((int)v132 >= 1)
          {
            do
            {
              v79 = *((int *)v78 - 2);
              v80 = *((int *)v78 - 1);
              v81 = *v78;
              v78 += 3;
              v82 = 4 * v80;
              v83 = (unsigned __int8 *)(v40 + v79);
              a5.i8[0] = *v83;
              a4.f32[0] = *(float *)&v136[4 * v80] + (float)((float)a5.u32[0] * v81);
              v84 = 4 * ((int)v80 + 1);
              a6.i8[0] = v83[1];
              *(float *)&v85 = (float)a6.u32[0];
              v86 = 4 * ((int)v80 + 2);
              a5.f32[0] = *(float *)&v136[v84] + (float)(*(float *)&v85 * v81);
              LOBYTE(v85) = v83[2];
              a6.f32[0] = (float)v85;
              v87 = *(float *)&v136[v86] + (float)(a6.f32[0] * v81);
              *(_DWORD *)&v136[v82] = a4.i32[0];
              *(_DWORD *)&v136[v84] = a5.i32[0];
              *(float *)&v136[v86] = v87;
              --v77;
            }
            while (v77);
          }
          goto LABEL_56;
        case 3u:
          v88 = v132;
          v89 = v130;
          if ((int)v132 >= 1)
          {
            do
            {
              v90 = *((int *)v89 - 2);
              v91 = *((int *)v89 - 1);
              v92 = *v89;
              v89 += 3;
              v93 = (unsigned __int8 *)(v40 + v90);
              a5.i8[0] = *v93;
              v94 = *(float *)&v136[4 * v91] + (float)((float)a5.u32[0] * v92);
              v95 = 4 * ((int)v91 + 1);
              a6.i8[0] = v93[1];
              *(float *)&v96 = (float)a6.u32[0];
              *(float *)&v97 = *(float *)&v136[v95] + (float)(*(float *)&v96 * v92);
              *(float *)&v136[4 * v91] = v94;
              v98 = 4 * ((int)v91 + 2);
              *(float *)&v136[v95] = *(float *)&v97;
              LOBYTE(v97) = v93[2];
              v99 = *(float *)&v136[v98] + (float)((float)v97 * v92);
              v100 = 4 * ((int)v91 + 3);
              a5.i32[0] = *(_DWORD *)&v136[v100];
              LOBYTE(v96) = v93[3];
              a6.f32[0] = (float)v96;
              a4.f32[0] = a5.f32[0] + (float)(a6.f32[0] * v92);
              *(float *)&v136[v98] = v99;
              *(_DWORD *)&v136[v100] = a4.i32[0];
              --v88;
            }
            while (v88);
          }
          goto LABEL_56;
        default:
          if ((int)v132 >= 1)
          {
            v44 = 0;
            v45 = v34 + v35 * v32;
            do
            {
              v46 = (int *)(v16 + 12 * v44);
              v47 = *v46;
              v48 = v46[1];
              a3.i32[0] = v46[2];
              if (v29 >= 7
                && ((unint64_t)&v136[4 * v48] < v45 + v19 + v47
                  ? (v49 = v40 + v47 >= (unint64_t)&v20[4 * v48])
                  : (v49 = 1),
                    v49))
              {
                if (v29 < 0xF)
                {
                  v50 = 0;
LABEL_35:
                  a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 0);
                  v51 = (unint64_t *)(v45 + v50 + v47);
                  v52 = (float32x4_t *)&v136[4 * v50 + 4 * v48];
                  v53 = v50 - v125;
                  do
                  {
                    v54 = *v51++;
                    a5.i64[0] = v54;
                    v55 = (uint32x4_t)vqtbl1q_s8((int8x16_t)a5, v25);
                    a5 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a5, v26));
                    a6 = vcvtq_f32_u32(v55);
                    v56 = vmlaq_f32(v52[1], a4, a6);
                    *v52 = vmlaq_f32(*v52, a4, a5);
                    v52[1] = v56;
                    v52 += 2;
                    v53 += 8;
                  }
                  while (v53);
                  v57 = v125;
                  if (v125 == v19)
                    goto LABEL_26;
                  goto LABEL_40;
                }
                a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 0);
                v62 = (int8x16_t *)(v45 + v47);
                v63 = (float32x4_t *)&v136[4 * v48];
                v64 = v135;
                do
                {
                  v65 = *v62++;
                  a5 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v65, v28));
                  a6 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v65, v25));
                  v66 = *v63;
                  v67 = vmlaq_f32(v63[1], a4, a6);
                  v68 = vmlaq_f32(v63[3], a4, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v65, v27)));
                  v63[2] = vmlaq_f32(v63[2], a4, a5);
                  v63[3] = v68;
                  *v63 = vmlaq_f32(v66, a4, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v65, v26)));
                  v63[1] = v67;
                  v63 += 4;
                  v64 -= 16;
                }
                while (v64);
                if (v135 == v19)
                  goto LABEL_26;
                v57 = v135;
                v50 = v135;
                if ((v19 & 8) != 0)
                  goto LABEL_35;
              }
              else
              {
                v57 = 0;
              }
LABEL_40:
              v58 = (unsigned __int32 *)&v136[4 * v57 + 4 * v48];
              v59 = (unsigned __int8 *)(v45 + v57 + v47);
              v60 = v121 - v57;
              do
              {
                v61 = *v59++;
                a5.i32[0] = *v58;
                a4.f32[0] = *(float *)v58 + (float)((float)v61 * a3.f32[0]);
                *v58++ = a4.i32[0];
                --v60;
              }
              while (v60);
LABEL_26:
              ++v44;
            }
            while (v44 != v132);
          }
LABEL_56:
          if ((_DWORD)v30 != (_DWORD)v17)
          {
            if ((int)v11 >= 1)
            {
              v102 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16)
                             + **(_QWORD **)(*(_QWORD *)(a1 + 16) + 72) * (int)v17);
              v103 = v131;
              v104 = (float *)v136;
              do
              {
                v105 = rintf(v104[v24]);
                v106 = (uint64_t)v105 & ~((int)(uint64_t)v105 >> 31);
                if (v106 >= 255)
                  LOBYTE(v106) = -1;
                *v102++ = v106;
                v104[v24] = *(float *)&v6 * *v104;
                ++v104;
                v103 -= 4;
              }
              while (v103);
            }
            goto LABEL_17;
          }
          if ((int)v11 < 1)
            goto LABEL_16;
          if ((v123 & 1) != 0)
          {
            v101 = 0;
          }
          else
          {
            a3 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v6, 0);
            v107 = v122;
            v108 = (float32x4_t *)v136;
            do
            {
              a4 = *v108;
              a5 = v108[1];
              v109 = (float32x4_t *)((char *)v108 + v24 * 4);
              a6 = vmlaq_f32(*(float32x4_t *)((char *)v108 + v24 * 4), *v108, a3);
              v110 = vmlaq_f32(*(float32x4_t *)((char *)v108 + v24 * 4 + 16), a5, a3);
              *v109 = a6;
              v109[1] = v110;
              v108 += 2;
              v107 -= 8;
            }
            while (v107);
            v101 = v122;
            if (v122 == v124)
              goto LABEL_16;
          }
          v111 = (unsigned __int32 *)&v136[4 * v101];
          v112 = v124 - v101;
          do
          {
            a4.i32[0] = *v111;
            *(float *)&v111[v24] = *(float *)&v111[v24] + (float)(*(float *)&v6 * *(float *)v111);
            ++v111;
            --v112;
          }
          while (v112);
LABEL_16:
          v30 = v17;
LABEL_17:
          ++v15;
          v17 = v30;
          if (v15 == v133)
            goto LABEL_73;
          break;
      }
    }
  }
  LODWORD(v30) = v17;
LABEL_73:
  v113 = (float *)v120;
  if ((int)v11 >= 1)
  {
    v114 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + **(_QWORD **)(*(_QWORD *)(a1 + 16) + 72) * (int)v30);
    v115 = 4 * v11;
    do
    {
      v116 = *v113++;
      v117 = rintf(v116);
      v118 = (uint64_t)v117 & ~((int)(uint64_t)v117 >> 31);
      if (v118 >= 255)
        LOBYTE(v118) = -1;
      *v114++ = v118;
      v115 -= 4;
    }
    while (v115);
  }
  return v136;
}

void sub_100335048(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_10033506C(uint64_t a1, int *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  __int128 v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  BOOL v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint16x4_t *v48;
  uint64_t v49;
  float32x4_t *v50;
  uint16x8_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  unsigned __int32 *v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  float *v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  unsigned int *v64;
  unsigned __int16 *v65;
  unsigned int v66;
  uint64_t v67;
  float *v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float *v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  float v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  _WORD *v87;
  uint64_t v88;
  float *v89;
  float v90;
  int v91;
  uint64_t v92;
  float32x4_t *v93;
  __n128 *v94;
  unsigned __int32 *v95;
  uint64_t v96;
  float *v97;
  _WORD *v98;
  uint64_t v99;
  float v100;
  float v101;
  int v102;
  float *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  _BYTE v120[1064];

  v8 = *(unsigned int **)(a1 + 16);
  v9 = *v8;
  v10 = (v9 >> 3) & 0x1FF;
  v11 = v10 + 1;
  v12 = ((int)v10 + 1) * (uint64_t)*(int *)(*((_QWORD *)v8 + 8) + 4);
  v113 = v12;
  if ((2 * v12) >= 0x109)
    operator new[]();
  v13 = *(unsigned int *)(a1 + 40);
  v14 = (float *)&v120[4 * v12];
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(int *)(v15 + 4 * *a2);
  v118 = *(int *)(v15 + 4 * a2[1]);
  v17 = *(_QWORD *)(a1 + 24);
  v117 = *(_QWORD *)(a1 + 32);
  v18 = *(unsigned int *)(v117 + 12 * (int)v16 + 4);
  v112 = v17;
  if ((int)v12 >= 1)
  {
    v19 = *(unsigned int *)(v117 + 12 * (int)v16 + 4);
    bzero(&v120[4 * v12], 4 * v12);
    v18 = v19;
    v17 = v112;
    v12 = v113;
  }
  v103 = v14;
  if ((int)v16 < (int)v118)
  {
    v20 = *(_QWORD *)(a1 + 8);
    v21 = *(_QWORD *)(v20 + 16);
    v22 = v11;
    v111 = 4 * v12;
    v23 = v11 & 0x3F0;
    v24 = *(uint64_t **)(v20 + 72);
    v25 = v14 >= (float *)&v120[v111] || v120 >= &v120[4 * v12 + 4 * v12];
    v115 = v21;
    v116 = *v24;
    v109 = v12;
    v27 = !v25 || v12 < 8;
    v108 = v27;
    v114 = (float *)(v17 + 8);
    v106 = v12 & 0xFFFFFFF8;
    v107 = 2 * v12;
    v28 = v12;
    v105 = ((v9 >> 3) & 0x1FF) + 1;
    v104 = v21 + 16;
    while (1)
    {
      v30 = v23;
      v31 = (int *)(v117 + 12 * v16);
      LODWORD(v7) = v31[2];
      v29 = v31[1];
      v32 = *v31;
      if ((int)v12 >= 1)
      {
        v33 = v13;
        v34 = v10;
        v35 = v18;
        v119 = v7;
        bzero(v120, v111);
        v7 = v119;
        v18 = v35;
        v10 = v34;
        v13 = v33;
        v17 = v112;
        LODWORD(v12) = v113;
      }
      v36 = v116 * v32;
      v37 = v115 + v116 * v32;
      switch((int)v10)
      {
        case 0:
          v38 = v13;
          v39 = v114;
          v23 = v30;
          if ((int)v13 >= 1)
          {
            do
            {
              a4.i16[0] = *(_WORD *)(v37 + 2 * *((int *)v39 - 2));
              v40 = 4 * *((int *)v39 - 1);
              a5.i32[0] = *(_DWORD *)&v120[v40];
              a4.f32[0] = (float)a4.u32[0];
              *(float *)&v120[v40] = a5.f32[0] + (float)(a4.f32[0] * *v39);
              v39 += 3;
              --v38;
            }
            while (v38);
          }
          goto LABEL_43;
        case 1:
          v59 = v13;
          v60 = v114;
          v23 = v30;
          if ((int)v13 >= 1)
          {
            do
            {
              v61 = *((int *)v60 - 2);
              v62 = *((int *)v60 - 1);
              v63 = *v60;
              v60 += 3;
              v64 = (unsigned int *)&v120[4 * v62];
              v65 = (unsigned __int16 *)(v37 + 2 * v61);
              a4.i16[0] = *v65;
              v66 = *v64;
              a6.i32[0] = v64[1];
              a4.f32[0] = *(float *)v64 + (float)((float)a4.u32[0] * v63);
              LOWORD(v66) = v65[1];
              a5.f32[0] = (float)v66;
              *v64 = a4.i32[0];
              *((float *)v64 + 1) = a6.f32[0] + (float)(a5.f32[0] * v63);
              --v59;
            }
            while (v59);
          }
          goto LABEL_43;
        case 2:
          v67 = v13;
          v68 = v114;
          v23 = v30;
          if ((int)v13 >= 1)
          {
            do
            {
              v69 = *((int *)v68 - 2);
              v70 = *((int *)v68 - 1);
              v71 = *v68;
              v68 += 3;
              v72 = 4 * v70;
              a5.i16[0] = *(_WORD *)(v37 + 2 * v69);
              a4.f32[0] = *(float *)&v120[4 * v70] + (float)((float)a5.u32[0] * v71);
              v73 = 4 * ((int)v70 + 1);
              a6.i16[0] = *(_WORD *)(v37 + 2 * ((int)v69 + 1));
              a5.f32[0] = *(float *)&v120[v73] + (float)((float)a6.u32[0] * v71);
              v74 = 4 * ((int)v70 + 2);
              a6.i32[0] = *(_DWORD *)&v120[v74];
              a7.i16[0] = *(_WORD *)(v37 + 2 * ((int)v69 + 2));
              a7.f32[0] = (float)a7.u32[0];
              *(_DWORD *)&v120[v72] = a4.i32[0];
              *(_DWORD *)&v120[v73] = a5.i32[0];
              *(float *)&v120[v74] = a6.f32[0] + (float)(a7.f32[0] * v71);
              --v67;
            }
            while (v67);
          }
          goto LABEL_43;
        case 3:
          v75 = v13;
          v76 = v114;
          v23 = v30;
          if ((int)v13 >= 1)
          {
            do
            {
              v77 = *((int *)v76 - 2);
              v78 = *((int *)v76 - 1);
              v79 = *v76;
              v76 += 3;
              a5.i16[0] = *(_WORD *)(v37 + 2 * v77);
              v80 = 4 * ((int)v78 + 1);
              a7.i16[0] = *(_WORD *)(v37 + 2 * ((int)v77 + 1));
              a7.f32[0] = (float)a7.u32[0];
              v81 = *(float *)&v120[4 * v78] + (float)((float)a5.u32[0] * v79);
              *(float *)&v82 = *(float *)&v120[v80] + (float)(a7.f32[0] * v79);
              *(float *)&v120[4 * v78] = v81;
              *(float *)&v120[v80] = *(float *)&v82;
              v83 = 4 * ((int)v78 + 2);
              LOWORD(v82) = *(_WORD *)(v37 + 2 * ((int)v77 + 2));
              v84 = 4 * ((int)v78 + 3);
              a6.i32[0] = *(_DWORD *)&v120[v84];
              *(float *)&v85 = (float)v82;
              a4.f32[0] = *(float *)&v120[v83] + (float)(*(float *)&v85 * v79);
              LOWORD(v85) = *(_WORD *)(v37 + 2 * ((int)v77 + 3));
              a5.f32[0] = (float)v85;
              *(_DWORD *)&v120[v83] = a4.i32[0];
              *(float *)&v120[v84] = a6.f32[0] + (float)(a5.f32[0] * v79);
              --v75;
            }
            while (v75);
          }
          goto LABEL_43;
        default:
          v23 = v30;
          if ((int)v13 >= 1)
          {
            v41 = 0;
            v42 = v104 + v36;
            v43 = v115 + v36;
            do
            {
              v44 = (int *)(v17 + 12 * v41);
              v45 = *v44;
              v46 = v44[1];
              a3.i32[0] = v44[2];
              if (v10 >= 0xF)
              {
                a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 0);
                v48 = (uint16x4_t *)(v42 + 2 * v45);
                v49 = v30;
                v50 = (float32x4_t *)&v120[4 * v46 + 32];
                do
                {
                  v51 = *(uint16x8_t *)v48[-2].i8;
                  a7 = vcvtq_f32_u32(vmovl_high_u16(v51));
                  a5 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v51.i8));
                  a6 = vcvtq_f32_u32(vmovl_u16(*v48));
                  v52 = vmlaq_f32(v50[-1], a4, a7);
                  v53 = vmlaq_f32(*v50, a4, a6);
                  v54 = vmlaq_f32(v50[1], a4, vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v48->i8)));
                  v50[-2] = vmlaq_f32(v50[-2], a4, a5);
                  v50[-1] = v52;
                  *v50 = v53;
                  v50[1] = v54;
                  v50 += 4;
                  v48 += 4;
                  v49 -= 16;
                }
                while (v49);
                v47 = v30;
                if (v30 == v22)
                  goto LABEL_26;
              }
              else
              {
                v47 = 0;
              }
              v55 = (unsigned __int32 *)&v120[4 * v47 + 4 * v46];
              v56 = (unsigned __int16 *)(v43 + 2 * (v47 + v45));
              v57 = v105 - v47;
              do
              {
                v58 = *v56++;
                a5.i32[0] = *v55;
                a4.f32[0] = *(float *)v55 + (float)((float)v58 * a3.f32[0]);
                *v55++ = a4.i32[0];
                --v57;
              }
              while (v57);
LABEL_26:
              ++v41;
            }
            while (v41 != v13);
          }
LABEL_43:
          if ((_DWORD)v29 != (_DWORD)v18)
          {
            if ((int)v12 >= 1)
            {
              v87 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16)
                            + **(_QWORD **)(*(_QWORD *)(a1 + 16) + 72) * (int)v18);
              v88 = v107;
              v89 = (float *)v120;
              do
              {
                v90 = rintf(v89[v28]);
                v91 = (uint64_t)v90 & ~((int)(uint64_t)v90 >> 31);
                if (v91 >= 0xFFFF)
                  LOWORD(v91) = -1;
                *v87++ = v91;
                v89[v28] = *(float *)&v7 * *v89;
                ++v89;
                v88 -= 2;
              }
              while (v88);
            }
            goto LABEL_17;
          }
          if ((int)v12 < 1)
            goto LABEL_16;
          if ((v108 & 1) != 0)
          {
            v86 = 0;
          }
          else
          {
            a3 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v7, 0);
            v92 = v106;
            v93 = (float32x4_t *)v120;
            do
            {
              a4 = *v93;
              a5 = v93[1];
              v94 = (__n128 *)((char *)v93 + v28 * 4);
              a6 = vmlaq_f32(*(float32x4_t *)((char *)v93 + v28 * 4), *v93, a3);
              a7 = vmlaq_f32(*(float32x4_t *)((char *)v93 + v28 * 4 + 16), a5, a3);
              *v94 = (__n128)a6;
              v94[1] = (__n128)a7;
              v93 += 2;
              v92 -= 8;
            }
            while (v92);
            v86 = v106;
            if (v106 == v109)
              goto LABEL_16;
          }
          v95 = (unsigned __int32 *)&v120[4 * v86];
          v96 = v109 - v86;
          do
          {
            a4.i32[0] = *v95;
            *(float *)&v95[v28] = *(float *)&v95[v28] + (float)(*(float *)&v7 * *(float *)v95);
            ++v95;
            --v96;
          }
          while (v96);
LABEL_16:
          v29 = v18;
LABEL_17:
          ++v16;
          v18 = v29;
          if (v16 == v118)
            goto LABEL_60;
          break;
      }
    }
  }
  LODWORD(v29) = v18;
LABEL_60:
  v97 = v103;
  if ((int)v12 >= 1)
  {
    v98 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + **(_QWORD **)(*(_QWORD *)(a1 + 16) + 72) * (int)v29);
    v99 = 2 * v12;
    do
    {
      v100 = *v97++;
      v101 = rintf(v100);
      v102 = (uint64_t)v101 & ~((int)(uint64_t)v101 >> 31);
      if (v102 >= 0xFFFF)
        LOWORD(v102) = -1;
      *v98++ = v102;
      v99 -= 2;
    }
    while (v99);
  }
}

void sub_1003356D0(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

unint64_t sub_1003356F4(uint64_t a1, int *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, double a7, float32x4_t a8)
{
  __int128 v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  BOOL v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int16x8_t *v48;
  uint64_t v49;
  float32x4_t *v50;
  int16x8_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  unsigned __int32 *v56;
  __int16 *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  unsigned __int32 *v65;
  unsigned __int16 *v66;
  uint64_t v67;
  float *v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  float *v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  int16x4_t v81;
  uint64_t v82;
  float v83;
  int16x4_t v84;
  uint64_t v85;
  int16x4_t v86;
  uint64_t v87;
  uint64_t v88;
  _WORD *v89;
  uint64_t v90;
  float *v91;
  uint64_t v92;
  uint64_t v93;
  float32x4_t *v94;
  float32x4_t *v95;
  float32x4_t v96;
  unsigned __int32 *v97;
  uint64_t v98;
  float *v99;
  _WORD *v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  float *v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  _BYTE v122[1064];

  v9 = *(unsigned int **)(a1 + 16);
  v10 = *v9;
  v112 = (v10 >> 3) & 0x1FF;
  v11 = v112 + 1;
  v12 = ((int)v112 + 1) * (uint64_t)*(int *)(*((_QWORD *)v9 + 8) + 4);
  v115 = v12;
  if ((2 * v12) >= 0x109)
    operator new[]();
  v13 = *(unsigned int *)(a1 + 40);
  result = (unint64_t)&v122[4 * v12];
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(int *)(v15 + 4 * *a2);
  v120 = *(int *)(v15 + 4 * a2[1]);
  v17 = *(_QWORD *)(a1 + 24);
  v119 = *(_QWORD *)(a1 + 32);
  v18 = *(unsigned int *)(v119 + 12 * (int)v16 + 4);
  v113 = *(unsigned int *)(a1 + 40);
  v114 = v17;
  v105 = (float *)result;
  if ((int)v12 >= 1)
  {
    v19 = *(unsigned int *)(v119 + 12 * (int)v16 + 4);
    bzero((void *)result, 4 * v12);
    result = (unint64_t)v105;
    v13 = v113;
    v17 = v114;
    v18 = v19;
    v12 = v115;
  }
  if ((int)v16 < (int)v120)
  {
    v20 = *(_QWORD *)(a1 + 8);
    v21 = *(_QWORD *)(v20 + 16);
    v22 = v11;
    v111 = 4 * v12;
    v23 = v11 & 0x3F0;
    v24 = *(uint64_t **)(v20 + 72);
    v25 = result >= (unint64_t)&v122[v111] || v122 >= &v122[4 * v12 + 4 * v12];
    v117 = v21;
    v118 = *v24;
    v109 = v12;
    v27 = !v25 || v12 < 8;
    v108 = v27;
    v116 = (float *)(v17 + 8);
    v104 = v21 + 16;
    v28 = ((v10 >> 3) & 0x1FF) + 1;
    v106 = v12 & 0xFFFFFFF8;
    v107 = 2 * v12;
    v29 = v12;
    result = 12;
    v30 = (v10 >> 3) & 0x1FF;
    while (1)
    {
      v32 = (int *)(v119 + 12 * v16);
      LODWORD(v8) = v32[2];
      v31 = v32[1];
      v33 = *v32;
      if ((int)v12 >= 1)
      {
        v34 = v16;
        v35 = v18;
        v121 = v8;
        bzero(v122, v111);
        v8 = v121;
        result = 12;
        v30 = v112;
        v13 = v113;
        v18 = v35;
        v16 = v34;
        v17 = v114;
        LODWORD(v12) = v115;
      }
      v36 = v118 * v33;
      v37 = v117 + v118 * v33;
      switch(v30)
      {
        case 0u:
          v38 = v13;
          v39 = v116;
          if ((int)v13 >= 1)
          {
            do
            {
              a4.i16[0] = *(_WORD *)(v37 + 2 * *((int *)v39 - 2));
              a4.i64[0] = vmovl_s16(*(int16x4_t *)a4.f32).u64[0];
              v40 = 4 * *((int *)v39 - 1);
              a5.i32[0] = *(_DWORD *)&v122[v40];
              a4.f32[0] = (float)a4.i32[0];
              *(float *)&v122[v40] = a5.f32[0] + (float)(a4.f32[0] * *v39);
              v39 += 3;
              --v38;
            }
            while (v38);
          }
          goto LABEL_43;
        case 1u:
          v60 = v13;
          v61 = v116;
          if ((int)v13 >= 1)
          {
            do
            {
              v62 = *((int *)v61 - 2);
              v63 = *((int *)v61 - 1);
              v64 = *v61;
              v61 += 3;
              v65 = (unsigned __int32 *)&v122[4 * v63];
              v66 = (unsigned __int16 *)(v37 + 2 * v62);
              a4.i16[0] = *v66;
              a4.i64[0] = vmovl_s16(*(int16x4_t *)a4.f32).u64[0];
              a5.i32[0] = *v65;
              a6.i32[0] = v65[1];
              a4.f32[0] = *(float *)v65 + (float)((float)a4.i32[0] * v64);
              a5.i16[0] = v66[1];
              a5.i64[0] = vmovl_s16(*(int16x4_t *)a5.f32).u64[0];
              a5.f32[0] = (float)a5.i32[0];
              *v65 = a4.i32[0];
              *((float *)v65 + 1) = a6.f32[0] + (float)(a5.f32[0] * v64);
              --v60;
            }
            while (v60);
          }
          goto LABEL_43;
        case 2u:
          v67 = v13;
          v68 = v116;
          if ((int)v13 >= 1)
          {
            do
            {
              v69 = *((int *)v68 - 2);
              v70 = *((int *)v68 - 1);
              v71 = *v68;
              v68 += 3;
              v72 = 4 * v70;
              a5.i16[0] = *(_WORD *)(v37 + 2 * v69);
              a5.i64[0] = vmovl_s16(*(int16x4_t *)a5.f32).u64[0];
              a4.f32[0] = *(float *)&v122[4 * v70] + (float)((float)a5.i32[0] * v71);
              v73 = 4 * ((int)v70 + 1);
              a6.i16[0] = *(_WORD *)(v37 + 2 * ((int)v69 + 1));
              v74 = 4 * ((int)v70 + 2);
              a8.i16[0] = *(_WORD *)(v37 + 2 * ((int)v69 + 2));
              a5.f32[0] = *(float *)&v122[v73] + (float)((float)vmovl_s16(*(int16x4_t *)a6.f32).i32[0] * v71);
              a6.i64[0] = vmovl_s16(*(int16x4_t *)a8.f32).u64[0];
              a6.f32[0] = (float)a6.i32[0];
              v75 = *(float *)&v122[v74] + (float)(a6.f32[0] * v71);
              *(_DWORD *)&v122[v72] = a4.i32[0];
              *(_DWORD *)&v122[v73] = a5.i32[0];
              *(float *)&v122[v74] = v75;
              --v67;
            }
            while (v67);
          }
          goto LABEL_43;
        case 3u:
          v76 = v13;
          v77 = v116;
          if ((int)v13 >= 1)
          {
            do
            {
              v78 = *((int *)v77 - 2);
              v79 = *((int *)v77 - 1);
              v80 = *v77;
              v77 += 3;
              a5.i16[0] = *(_WORD *)(v37 + 2 * v78);
              v81 = (int16x4_t)vmovl_s16(*(int16x4_t *)a5.f32).u64[0];
              *(float *)v81.i32 = (float)v81.i32[0];
              v82 = 4 * ((int)v79 + 1);
              v83 = *(float *)&v122[4 * v79] + (float)(*(float *)v81.i32 * v80);
              v81.i16[0] = *(_WORD *)(v37 + 2 * ((int)v78 + 1));
              v84 = (int16x4_t)vmovl_s16(v81).u64[0];
              *(float *)v84.i32 = *(float *)&v122[v82] + (float)((float)v84.i32[0] * v80);
              *(float *)&v122[4 * v79] = v83;
              v85 = 4 * ((int)v79 + 2);
              *(_DWORD *)&v122[v82] = v84.i32[0];
              v84.i16[0] = *(_WORD *)(v37 + 2 * ((int)v78 + 2));
              v86 = (int16x4_t)vmovl_s16(v84).u64[0];
              *(float *)v86.i32 = (float)v86.i32[0];
              v87 = 4 * ((int)v79 + 3);
              a6.i32[0] = *(_DWORD *)&v122[v87];
              a4.f32[0] = *(float *)&v122[v85] + (float)(*(float *)v86.i32 * v80);
              v86.i16[0] = *(_WORD *)(v37 + 2 * ((int)v78 + 3));
              a5.i64[0] = vmovl_s16(v86).u64[0];
              a5.f32[0] = (float)a5.i32[0];
              *(_DWORD *)&v122[v85] = a4.i32[0];
              *(float *)&v122[v87] = a6.f32[0] + (float)(a5.f32[0] * v80);
              --v76;
            }
            while (v76);
          }
          goto LABEL_43;
        default:
          if ((int)v13 >= 1)
          {
            v41 = 0;
            v42 = v104 + v36;
            v43 = v117 + v36;
            do
            {
              v44 = (int *)(v17 + 12 * v41);
              v45 = *v44;
              v46 = v44[1];
              a3.i32[0] = v44[2];
              if (v30 >= 0xF)
              {
                a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 0);
                v48 = (int16x8_t *)(v42 + 2 * v45);
                v49 = v23;
                v50 = (float32x4_t *)&v122[4 * v46 + 32];
                do
                {
                  v51 = v48[-1];
                  v52 = vcvtq_f32_s32(vmovl_high_s16(v51));
                  a5 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v51.i8));
                  a8 = vcvtq_f32_s32(vmovl_high_s16(*v48));
                  a6 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v48->i8));
                  v53 = vmlaq_f32(v50[-1], a4, v52);
                  v54 = vmlaq_f32(*v50, a4, a6);
                  v55 = vmlaq_f32(v50[1], a4, a8);
                  v50[-2] = vmlaq_f32(v50[-2], a4, a5);
                  v50[-1] = v53;
                  *v50 = v54;
                  v50[1] = v55;
                  v50 += 4;
                  v48 += 2;
                  v49 -= 16;
                }
                while (v49);
                v47 = v23;
                if (v23 == v22)
                  goto LABEL_26;
              }
              else
              {
                v47 = 0;
              }
              v56 = (unsigned __int32 *)&v122[4 * v47 + 4 * v46];
              v57 = (__int16 *)(v43 + 2 * (v47 + v45));
              v58 = v28 - v47;
              do
              {
                v59 = *v57++;
                a5.i32[0] = *v56;
                a4.f32[0] = *(float *)v56 + (float)((float)v59 * a3.f32[0]);
                *v56++ = a4.i32[0];
                --v58;
              }
              while (v58);
LABEL_26:
              ++v41;
            }
            while (v41 != v13);
          }
LABEL_43:
          if ((_DWORD)v31 != (_DWORD)v18)
          {
            if ((int)v12 >= 1)
            {
              v89 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16)
                            + **(_QWORD **)(*(_QWORD *)(a1 + 16) + 72) * (int)v18);
              v90 = v107;
              v91 = (float *)v122;
              do
              {
                v92 = (uint64_t)rintf(v91[v29]);
                if ((int)v92 <= -32768)
                  LODWORD(v92) = -32768;
                if ((int)v92 >= 0x7FFF)
                  LOWORD(v92) = 0x7FFF;
                *v89++ = v92;
                v91[v29] = *(float *)&v8 * *v91;
                ++v91;
                v90 -= 2;
              }
              while (v90);
            }
            goto LABEL_17;
          }
          if ((int)v12 < 1)
            goto LABEL_16;
          if ((v108 & 1) != 0)
          {
            v88 = 0;
          }
          else
          {
            a3 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v8, 0);
            v93 = v106;
            v94 = (float32x4_t *)v122;
            do
            {
              a4 = *v94;
              a5 = v94[1];
              v95 = (float32x4_t *)((char *)v94 + v29 * 4);
              a6 = vmlaq_f32(*(float32x4_t *)((char *)v94 + v29 * 4), *v94, a3);
              v96 = vmlaq_f32(*(float32x4_t *)((char *)v94 + v29 * 4 + 16), a5, a3);
              *v95 = a6;
              v95[1] = v96;
              v94 += 2;
              v93 -= 8;
            }
            while (v93);
            v88 = v106;
            if (v106 == v109)
              goto LABEL_16;
          }
          v97 = (unsigned __int32 *)&v122[4 * v88];
          v98 = v109 - v88;
          do
          {
            a4.i32[0] = *v97;
            *(float *)&v97[v29] = *(float *)&v97[v29] + (float)(*(float *)&v8 * *(float *)v97);
            ++v97;
            --v98;
          }
          while (v98);
LABEL_16:
          v31 = v18;
LABEL_17:
          ++v16;
          v18 = v31;
          if (v16 == v120)
            goto LABEL_62;
          break;
      }
    }
  }
  LODWORD(v31) = v18;
LABEL_62:
  v99 = v105;
  if ((int)v12 >= 1)
  {
    v100 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + **(_QWORD **)(*(_QWORD *)(a1 + 16) + 72) * (int)v31);
    v101 = 2 * v12;
    do
    {
      v102 = *v99++;
      v103 = (uint64_t)rintf(v102);
      if ((int)v103 <= -32768)
        LODWORD(v103) = -32768;
      if ((int)v103 >= 0x7FFF)
        LOWORD(v103) = 0x7FFF;
      *v100++ = v103;
      v101 -= 2;
    }
    while (v101);
  }
  return result;
}

void sub_100335D78(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_100335D9C(uint64_t a1, int *a2, float32x4_t a3, double a4, double a5, double a6, double a7, double a8, __n128 a9)
{
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  BOOL v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  float32x4_t v51;
  float32x4_t *v52;
  uint64_t v53;
  float32x4_t *v54;
  float32x4_t v55;
  uint64_t v56;
  float *v57;
  float *v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  float *v62;
  uint64_t v63;
  float32x2_t v64;
  float v65;
  uint64_t v66;
  float *v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  float32x2_t *v71;
  float32x2_t *v72;
  float32_t v73;
  uint64_t v74;
  float *v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  BOOL v87;
  int v88;
  BOOL v89;
  int v90;
  uint64_t v91;
  float *v92;
  _DWORD *v93;
  uint64_t v94;
  uint64_t v95;
  float32x4_t *v96;
  float32x4_t *v97;
  float32x4_t v98;
  float *v99;
  uint64_t v100;
  _OWORD *v101;
  float32x4_t *v102;
  uint64_t v103;
  float32x4_t *v104;
  __int128 v105;
  float32x4_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  int *v112;
  uint64_t v113;
  int v114;
  __int128 *v115;
  _OWORD *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _BYTE *v122;
  _BYTE *v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  float *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __n128 v137;
  _BYTE v138[16];
  _DWORD v139[262];

  v10 = *(unsigned int **)(a1 + 16);
  v11 = *v10;
  v12 = (v11 >> 3) & 0x1FF;
  v13 = v12 + 1;
  v14 = ((int)v12 + 1) * (uint64_t)*(int *)(*((_QWORD *)v10 + 8) + 4);
  v130 = v14;
  if ((2 * v14) >= 0x109)
    operator new[]();
  v15 = *(unsigned int *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *a2;
  v18 = a2[1];
  v19 = &v138[4 * v14];
  v20 = *(int *)(v16 + 4 * v17);
  v21 = *(int *)(v16 + 4 * v18);
  v22 = *(_QWORD *)(a1 + 24);
  v135 = *(_QWORD *)(a1 + 32);
  v23 = *(unsigned int *)(v135 + 12 * (int)v20 + 4);
  v128 = v22;
  v129 = v21;
  if ((int)v14 >= 1)
  {
    bzero(v19, 4 * v14);
    v22 = v128;
    v21 = v129;
    v14 = v130;
  }
  v24 = 4 * v14;
  if ((int)v20 < (int)v21)
  {
    v25 = *(_QWORD *)(a1 + 8);
    v26 = *(_QWORD *)(v25 + 16);
    v131 = v14;
    v132 = 4 * v14;
    v27 = 4 * ((v11 >> 3) & 0x1FF) + 4;
    v28 = &v138[v27];
    v120 = v26 + v27;
    v134 = **(_QWORD **)(v25 + 72);
    v29 = v14 < 8;
    v122 = &v138[4 * v14 + 4 * v14];
    v123 = v19;
    v30 = v19 >= &v138[v132] || v138 >= &v138[4 * v14 + 4 * v14];
    v31 = !v30;
    v121 = v31;
    v127 = v14 & 0xFFFFFFF8;
    if (!v30)
      v29 = 1;
    v125 = v29;
    v133 = (float *)(v22 + 8);
    v119 = v26 + 16;
    v136 = v26;
    v124 = ((v11 >> 3) & 0x1FF) + 1;
    while (1)
    {
      v33 = v28;
      v34 = (int *)(v135 + 12 * v20);
      a9.n128_u32[0] = v34[2];
      v32 = v34[1];
      v35 = *v34;
      if ((int)v14 >= 1)
      {
        v137 = a9;
        bzero(v138, v132);
        a9 = v137;
        v22 = v128;
        v21 = v129;
        v14 = v130;
      }
      v36 = v134 * v35;
      v37 = v136 + v134 * v35;
      switch((int)v12)
      {
        case 0:
          v38 = v15;
          v39 = v133;
          v28 = v33;
          if ((int)v15 >= 1)
          {
            do
            {
              v40 = *((int *)v39 - 2);
              v41 = 4 * *((int *)v39 - 1);
              v42 = *v39;
              v39 += 3;
              *(float *)&v138[v41] = *(float *)&v138[v41] + (float)(*(float *)(v37 + 4 * v40) * v42);
              --v38;
            }
            while (v38);
          }
          goto LABEL_48;
        case 1:
          v61 = v15;
          v62 = v133;
          v28 = v33;
          if ((int)v15 >= 1)
          {
            do
            {
              v63 = 4 * *((int *)v62 - 1);
              v64 = *(float32x2_t *)(v37 + 4 * *((int *)v62 - 2));
              v65 = *v62;
              v62 += 3;
              *(float32x2_t *)a3.f32 = vmla_n_f32(*(float32x2_t *)&v138[v63], v64, v65);
              *(_QWORD *)&v138[v63] = a3.i64[0];
              --v61;
            }
            while (v61);
          }
          goto LABEL_48;
        case 2:
          v66 = v15;
          v67 = v133;
          v28 = v33;
          if ((int)v15 >= 1)
          {
            do
            {
              v68 = *((int *)v67 - 2);
              v69 = *((int *)v67 - 1);
              v70 = *v67;
              v67 += 3;
              v71 = (float32x2_t *)&v138[4 * v69];
              v72 = (float32x2_t *)(v37 + 4 * v68);
              v73 = v71[1].f32[0] + (float)(v72[1].f32[0] * v70);
              *v71 = vmla_n_f32(*v71, *v72, v70);
              v71[1].f32[0] = v73;
              --v66;
            }
            while (v66);
          }
          goto LABEL_48;
        case 3:
          v74 = v15;
          v75 = v133;
          v28 = v33;
          if ((int)v15 >= 1)
          {
            do
            {
              v76 = *((int *)v75 - 2);
              v77 = *((int *)v75 - 1);
              v78 = *v75;
              v75 += 3;
              *(float32x2_t *)&v138[4 * v77] = vmla_n_f32(*(float32x2_t *)&v138[4 * v77], *(float32x2_t *)(v37 + 4 * v76), v78);
              v79 = 4 * ((int)v77 + 2);
              v80 = 4 * ((int)v77 + 3);
              v81 = *(float *)&v138[v80] + (float)(*(float *)(v37 + 4 * ((int)v76 + 3)) * v78);
              *(float *)&v138[v79] = *(float *)&v138[v79] + (float)(*(float *)(v37 + 4 * ((int)v76 + 2)) * v78);
              *(float *)&v138[v80] = v81;
              --v74;
            }
            while (v74);
          }
          goto LABEL_48;
        default:
          v28 = v33;
          if ((int)v15 >= 1)
          {
            v43 = 0;
            v44 = v120 + v36;
            v45 = v119 + v36;
            v46 = v136 + v36;
            do
            {
              v47 = (int *)(v22 + 12 * v43);
              v48 = *v47;
              v49 = v47[1];
              a3.i32[0] = v47[2];
              if (v12 >= 7
                && ((unint64_t)&v138[4 * v49] < v44 + 4 * v48
                  ? (v50 = v37 + 4 * v48 >= (unint64_t)&v33[4 * v49])
                  : (v50 = 1),
                    v50))
              {
                v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 0);
                v52 = (float32x4_t *)(v45 + 4 * v48);
                v53 = v13 & 0x3F8;
                v54 = (float32x4_t *)&v139[v49];
                do
                {
                  v55 = vmlaq_f32(*v54, v51, *v52);
                  v54[-1] = vmlaq_f32(v54[-1], v51, v52[-1]);
                  *v54 = v55;
                  v52 += 2;
                  v54 += 2;
                  v53 -= 8;
                }
                while (v53);
                v56 = v13 & 0x3F8;
                if (v56 == v13)
                  goto LABEL_25;
              }
              else
              {
                v56 = 0;
              }
              v57 = (float *)&v138[4 * v56 + 4 * v49];
              v58 = (float *)(v46 + 4 * (v56 + v48));
              v59 = v124 - v56;
              do
              {
                v60 = *v58++;
                *v57 = *v57 + (float)(v60 * a3.f32[0]);
                ++v57;
                --v59;
              }
              while (v59);
LABEL_25:
              ++v43;
            }
            while (v43 != v15);
          }
LABEL_48:
          if ((_DWORD)v32 == (_DWORD)v23)
          {
            if ((int)v14 >= 1)
            {
              if (v125)
              {
                v82 = 0;
                goto LABEL_74;
              }
              a3 = (float32x4_t)vdupq_lane_s32((int32x2_t)a9.n128_u64[0], 0);
              v95 = v127;
              v96 = (float32x4_t *)v138;
              do
              {
                v97 = (float32x4_t *)((char *)v96 + v24);
                v98 = vmlaq_f32(*(float32x4_t *)((char *)v96 + v24 + 16), v96[1], a3);
                *v97 = vmlaq_f32(*(float32x4_t *)((char *)v96 + v24), *v96, a3);
                v97[1] = v98;
                v96 += 2;
                v95 -= 8;
              }
              while (v95);
              v82 = v127;
              if (v127 != v131)
              {
LABEL_74:
                v99 = (float *)&v138[4 * v82];
                v100 = v131 - v82;
                do
                {
                  v99[(unint64_t)v24 / 4] = v99[(unint64_t)v24 / 4] + (float)(a9.n128_f32[0] * *v99);
                  ++v99;
                  --v100;
                }
                while (v100);
              }
            }
            v32 = v23;
            goto LABEL_16;
          }
          if ((int)v14 >= 1)
          {
            v83 = *(_QWORD *)(a1 + 16);
            v84 = *(_QWORD *)(v83 + 16);
            v85 = **(_QWORD **)(v83 + 72) * (int)v23;
            if (v14 < 0xC
              || ((v86 = v84 + v132 + v85, v84 + v85 < (unint64_t)v122)
                ? (v87 = (unint64_t)v123 >= v86)
                : (v87 = 1),
                  v87 ? (v88 = 0) : (v88 = 1),
                  v84 + v85 < (unint64_t)&v138[v132] ? (v89 = (unint64_t)v138 >= v86) : (v89 = 1),
                  !v89 ? (v90 = 1) : (v90 = v88),
                  ((v90 | v121) & 1) != 0))
            {
              v91 = 0;
            }
            else
            {
              v101 = (_OWORD *)(v84 + v85 + 16);
              v102 = (float32x4_t *)v139;
              v103 = v127;
              do
              {
                v104 = (float32x4_t *)((char *)v102 + v24);
                v105 = *(__int128 *)((char *)v102 + v24);
                *(v101 - 1) = *(float32x4_t *)((char *)&v102[-1] + v24);
                *v101 = v105;
                a3 = vmulq_n_f32(v102[-1], a9.n128_f32[0]);
                v106 = vmulq_n_f32(*v102, a9.n128_f32[0]);
                v104[-1] = a3;
                *v104 = v106;
                v102 += 2;
                v101 += 2;
                v103 -= 8;
              }
              while (v103);
              v91 = v127;
              if (v127 == v131)
                goto LABEL_16;
            }
            v92 = (float *)&v138[4 * v91];
            v93 = (_DWORD *)(v84 + v85 + 4 * v91);
            v94 = v131 - v91;
            do
            {
              *v93++ = LODWORD(v92[(unint64_t)v24 / 4]);
              v92[(unint64_t)v24 / 4] = a9.n128_f32[0] * *v92;
              ++v92;
              --v94;
            }
            while (v94);
          }
LABEL_16:
          ++v20;
          v23 = v32;
          if (v20 == v21)
            goto LABEL_82;
          break;
      }
    }
  }
  LODWORD(v32) = v23;
LABEL_82:
  if ((int)v14 >= 1)
  {
    v107 = *(_QWORD *)(a1 + 16);
    v108 = *(_QWORD *)(v107 + 16);
    v109 = **(_QWORD **)(v107 + 72) * (int)v32;
    if (v14 < 0xC || (unint64_t)(v109 + v108 - (_QWORD)&v138[v24]) < 0x20)
    {
      v110 = 0;
LABEL_86:
      v111 = (_DWORD *)(v108 + v109 + 4 * v110);
      v112 = (int *)&v138[4 * v110 + 4 * v14];
      v113 = v14 - v110;
      do
      {
        v114 = *v112++;
        *v111++ = v114;
        --v113;
      }
      while (v113);
      return;
    }
    v110 = v14 & 0xFFFFFFF8;
    v115 = (__int128 *)&v138[v24 + 16];
    v116 = (_OWORD *)(v109 + v108 + 16);
    v117 = v110;
    do
    {
      v118 = *v115;
      *(v116 - 1) = *(v115 - 1);
      *v116 = v118;
      v115 += 2;
      v116 += 2;
      v117 -= 8;
    }
    while (v117);
    if (v110 != v14)
      goto LABEL_86;
  }
}

void sub_10033649C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

void sub_1003364C0(uint64_t a1, int *a2)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  _BYTE *v27;
  float *v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  float64x2_t v44;
  float64x2_t *v45;
  uint64_t v46;
  float64x2_t *v47;
  float64x2_t v48;
  uint64_t v49;
  double *v50;
  double *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float *v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  float64x2_t *v64;
  float64x2_t *v65;
  float64_t v66;
  uint64_t v67;
  float *v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  BOOL v84;
  int v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  double *v89;
  _QWORD *v90;
  uint64_t v91;
  float64x2_t v92;
  uint64_t v93;
  float64x2_t *v94;
  float64x2_t *v95;
  float64x2_t v96;
  double *v97;
  uint64_t v98;
  _OWORD *v99;
  float64x2_t *v100;
  uint64_t v101;
  float64x2_t *v102;
  __int128 v103;
  float64x2_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  _BYTE *v120;
  _BYTE *v121;
  BOOL v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE v135[16];
  _QWORD v136[135];

  v3 = *(unsigned int **)(a1 + 16);
  v4 = *v3;
  v5 = (v4 >> 3) & 0x1FF;
  v6 = v5 + 1;
  v7 = ((int)v5 + 1) * (uint64_t)*(int *)(*((_QWORD *)v3 + 8) + 4);
  v127 = v7;
  if ((2 * v7) >= 0x89)
    operator new[]();
  v8 = *(unsigned int *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *a2;
  v11 = a2[1];
  v12 = &v135[8 * v7];
  v13 = *(int *)(v9 + 4 * v10);
  v14 = *(int *)(v9 + 4 * v11);
  v15 = *(_QWORD *)(a1 + 24);
  v133 = *(_QWORD *)(a1 + 32);
  v16 = *(unsigned int *)(v133 + 12 * (int)v13 + 4);
  v125 = v15;
  v126 = v14;
  if ((int)v7 >= 1)
  {
    bzero(v12, 8 * v7);
    v15 = v125;
    v14 = v126;
    v7 = v127;
  }
  v17 = 8 * v7;
  if ((int)v13 < (int)v14)
  {
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(v18 + 16);
    v128 = v7;
    v129 = 8 * v7;
    v20 = (v4 & 0xFF8) + 8;
    v131 = **(_QWORD **)(v18 + 72);
    v132 = v6;
    v21 = &v135[v20];
    v118 = v19 + v20;
    v22 = v6 & 0x3FC;
    v23 = v7 < 4;
    v120 = &v135[8 * v7 + 8 * v7];
    v121 = v12;
    v24 = v12 >= &v135[v129] || v135 >= &v135[8 * v7 + 8 * v7];
    v25 = !v24;
    v119 = v25;
    v124 = v7 & 0xFFFFFFFC;
    if (!v24)
      v23 = 1;
    v122 = v23;
    v130 = (float *)(v15 + 8);
    v117 = v19 + 16;
    v134 = v19;
    while (1)
    {
      v27 = v21;
      v28 = (float *)(v133 + 12 * v13);
      v29 = v28[2];
      v26 = *((unsigned int *)v28 + 1);
      v30 = *(int *)v28;
      if ((int)v7 >= 1)
      {
        bzero(v135, v129);
        v15 = v125;
        v14 = v126;
        v7 = v127;
      }
      v31 = v131 * v30;
      v32 = v134 + v131 * v30;
      switch((int)v5)
      {
        case 0:
          v33 = v8;
          v34 = v130;
          v21 = v27;
          if ((int)v8 >= 1)
          {
            do
            {
              *(double *)&v135[8 * *((int *)v34 - 1)] = *(double *)&v135[8 * *((int *)v34 - 1)]
                                                      + *(double *)(v32 + 8 * *((int *)v34 - 2)) * *v34;
              v34 += 3;
              --v33;
            }
            while (v33);
          }
          goto LABEL_48;
        case 1:
          v54 = v8;
          v55 = v130;
          v21 = v27;
          if ((int)v8 >= 1)
          {
            do
            {
              v56 = *((int *)v55 - 2);
              v57 = *((int *)v55 - 1);
              v58 = *v55;
              v55 += 3;
              *(float64x2_t *)&v135[8 * v57] = vmlaq_n_f64(*(float64x2_t *)&v135[8 * v57], *(float64x2_t *)(v32 + 8 * v56), v58);
              --v54;
            }
            while (v54);
          }
          goto LABEL_48;
        case 2:
          v59 = v8;
          v60 = v130;
          v21 = v27;
          if ((int)v8 >= 1)
          {
            do
            {
              v61 = *((int *)v60 - 2);
              v62 = *((int *)v60 - 1);
              v63 = *v60;
              v60 += 3;
              v64 = (float64x2_t *)&v135[8 * v62];
              v65 = (float64x2_t *)(v32 + 8 * v61);
              v66 = v64[1].f64[0] + v65[1].f64[0] * v63;
              *v64 = vmlaq_n_f64(*v64, *v65, v63);
              v64[1].f64[0] = v66;
              --v59;
            }
            while (v59);
          }
          goto LABEL_48;
        case 3:
          v67 = v8;
          v68 = v130;
          v21 = v27;
          if ((int)v8 >= 1)
          {
            do
            {
              v69 = *((int *)v68 - 2);
              v70 = *((int *)v68 - 1);
              v71 = *v68;
              v68 += 3;
              v72 = 8 * ((int)v70 + 2);
              v73 = *(double *)&v135[v72];
              *(float64x2_t *)&v135[8 * v70] = vmlaq_n_f64(*(float64x2_t *)&v135[8 * v70], *(float64x2_t *)(v32 + 8 * v69), v71);
              v74 = 8 * ((int)v70 + 3);
              v75 = v73 + *(double *)(v32 + 8 * ((int)v69 + 2)) * v71;
              v76 = *(double *)&v135[v74];
              v77 = *(double *)(v32 + 8 * ((int)v69 + 3));
              *(double *)&v135[v72] = v75;
              *(double *)&v135[v74] = v76 + v77 * v71;
              --v67;
            }
            while (v67);
          }
          goto LABEL_48;
        default:
          v21 = v27;
          if ((int)v8 >= 1)
          {
            v35 = 0;
            v36 = v118 + v31;
            v37 = v117 + v31;
            v38 = v134 + v31;
            do
            {
              v39 = (float *)(v15 + 12 * v35);
              v40 = *(int *)v39;
              v41 = *((int *)v39 + 1);
              *(double *)&v42 = v39[2];
              if (v5 >= 5
                && ((unint64_t)&v135[8 * v41] < v36 + 8 * v40
                  ? (v43 = v32 + 8 * v40 >= (unint64_t)&v27[8 * v41])
                  : (v43 = 1),
                    v43))
              {
                v44 = (float64x2_t)vdupq_lane_s64(v42, 0);
                v45 = (float64x2_t *)(v37 + 8 * v40);
                v46 = v22;
                v47 = (float64x2_t *)&v136[v41];
                do
                {
                  v48 = vmlaq_f64(*v47, v44, *v45);
                  v47[-1] = vmlaq_f64(v47[-1], v44, v45[-1]);
                  *v47 = v48;
                  v45 += 2;
                  v47 += 2;
                  v46 -= 4;
                }
                while (v46);
                v49 = v22;
                if (v22 == v132)
                  goto LABEL_25;
              }
              else
              {
                v49 = 0;
              }
              v50 = (double *)&v135[8 * v49 + 8 * v41];
              v51 = (double *)(v38 + 8 * (v49 + v40));
              v52 = ((v4 >> 3) & 0x1FF) + 1 - v49;
              do
              {
                v53 = *v51++;
                *v50 = *v50 + v53 * *(double *)&v42;
                ++v50;
                --v52;
              }
              while (v52);
LABEL_25:
              ++v35;
            }
            while (v35 != v8);
          }
LABEL_48:
          *(double *)&v78 = v29;
          if ((_DWORD)v26 == (_DWORD)v16)
          {
            if ((int)v7 >= 1)
            {
              if (v122)
              {
                v79 = 0;
                goto LABEL_74;
              }
              v92 = (float64x2_t)vdupq_lane_s64(v78, 0);
              v93 = v124;
              v94 = (float64x2_t *)v135;
              do
              {
                v95 = (float64x2_t *)((char *)v94 + v17);
                v96 = vmlaq_f64(*(float64x2_t *)((char *)v94 + v17 + 16), v94[1], v92);
                *v95 = vmlaq_f64(*(float64x2_t *)((char *)v94 + v17), *v94, v92);
                v95[1] = v96;
                v94 += 2;
                v93 -= 4;
              }
              while (v93);
              v79 = v124;
              if (v124 != v128)
              {
LABEL_74:
                v97 = (double *)&v135[8 * v79];
                v98 = v128 - v79;
                do
                {
                  v97[(unint64_t)v17 / 8] = v97[(unint64_t)v17 / 8] + *(double *)&v78 * *v97;
                  ++v97;
                  --v98;
                }
                while (v98);
              }
            }
            v26 = v16;
            goto LABEL_16;
          }
          if ((int)v7 >= 1)
          {
            v80 = *(_QWORD *)(a1 + 16);
            v81 = *(_QWORD *)(v80 + 16);
            v82 = **(_QWORD **)(v80 + 72) * (int)v16;
            if (v7 < 0xA
              || ((v83 = v81 + v129 + v82, v81 + v82 < (unint64_t)v120)
                ? (v84 = (unint64_t)v121 >= v83)
                : (v84 = 1),
                  v84 ? (v85 = 0) : (v85 = 1),
                  v81 + v82 < (unint64_t)&v135[v129] ? (v86 = (unint64_t)v135 >= v83) : (v86 = 1),
                  !v86 ? (v87 = 1) : (v87 = v85),
                  ((v87 | v119) & 1) != 0))
            {
              v88 = 0;
            }
            else
            {
              v99 = (_OWORD *)(v81 + v82 + 16);
              v100 = (float64x2_t *)v136;
              v101 = v124;
              do
              {
                v102 = (float64x2_t *)((char *)v100 + v17);
                v103 = *(__int128 *)((char *)v100 + v17);
                *(v99 - 1) = *(float64x2_t *)((char *)&v100[-1] + v17);
                *v99 = v103;
                v104 = vmulq_n_f64(*v100, *(double *)&v78);
                v102[-1] = vmulq_n_f64(v100[-1], *(double *)&v78);
                *v102 = v104;
                v100 += 2;
                v99 += 2;
                v101 -= 4;
              }
              while (v101);
              v88 = v124;
              if (v124 == v128)
                goto LABEL_16;
            }
            v89 = (double *)&v135[8 * v88];
            v90 = (_QWORD *)(v81 + v82 + 8 * v88);
            v91 = v128 - v88;
            do
            {
              *v90++ = *(_QWORD *)&v89[(unint64_t)v17 / 8];
              v89[(unint64_t)v17 / 8] = *v89 * *(double *)&v78;
              ++v89;
              --v91;
            }
            while (v91);
          }
LABEL_16:
          ++v13;
          v16 = v26;
          if (v13 == v14)
            goto LABEL_82;
          break;
      }
    }
  }
  LODWORD(v26) = v16;
LABEL_82:
  if ((int)v7 >= 1)
  {
    v105 = *(_QWORD *)(a1 + 16);
    v106 = *(_QWORD *)(v105 + 16);
    v107 = **(_QWORD **)(v105 + 72) * (int)v26;
    if (v7 < 0xA || (unint64_t)(v107 + v106 - (_QWORD)&v135[v17]) < 0x20)
    {
      v108 = 0;
LABEL_86:
      v109 = (_QWORD *)(v106 + v107 + 8 * v108);
      v110 = (uint64_t *)&v135[8 * v108 + 8 * v7];
      v111 = v7 - v108;
      do
      {
        v112 = *v110++;
        *v109++ = v112;
        --v111;
      }
      while (v111);
      return;
    }
    v108 = v7 & 0xFFFFFFFC;
    v113 = (__int128 *)&v135[v17 + 16];
    v114 = (_OWORD *)(v107 + v106 + 16);
    v115 = v108;
    do
    {
      v116 = *v113;
      *(v114 - 1) = *(v113 - 1);
      *v114 = v116;
      v113 += 2;
      v114 += 2;
      v115 -= 4;
    }
    while (v115);
    if (v108 != v7)
      goto LABEL_86;
  }
}

unsigned __int8 *sub_100336BDC(unsigned __int8 *result, uint64_t a2, uint64_t a3, int16x8_t *a4, int16x8_t *a5, int a6, signed int a7, signed int a8)
{
  unsigned int v8;
  int16x8_t v9;
  int v10;
  signed int v11;
  uint64_t v12;
  int16x8_t *v13;
  uint64_t v14;
  uint64_t v15;
  int16x8_t *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint8x8_t v20;
  uint8x8_t v21;
  uint8x8_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int *v37;
  uint64_t v38;
  unsigned int v39;
  int16x8_t i;
  uint64_t v41;
  int16x8_t *v42;
  uint64_t v43;
  uint64_t v44;
  int16x8_t *v45;
  uint64_t v46;
  int v47;

  v8 = *result << 8;
  v9 = vdupq_n_s16(v8);
  if (a6 < 8)
  {
    v11 = 0;
    if (a6 <= 0)
      goto LABEL_16;
  }
  else
  {
    v10 = 0;
    v11 = a6 & 0xFFFFFFF8;
    do
    {
      *a5++ = v9;
      v10 += 8;
      a4 += 2;
    }
    while (v10 < a6 - 7);
    if (v11 >= a6)
      goto LABEL_16;
  }
  v12 = (~v11 + a6);
  if (v12 >= 0xF)
  {
    v14 = v12 + 1;
    v15 = (v12 + 1) & 0x1FFFFFFF0;
    a4 = (int16x8_t *)((char *)a4 + 4 * v15);
    v13 = (int16x8_t *)((char *)a5 + 2 * v15);
    v11 += v15;
    v16 = a5 + 1;
    v17 = v15;
    do
    {
      v16[-1] = v9;
      *v16 = v9;
      v16 += 2;
      v17 -= 16;
    }
    while (v17);
    if (v14 == v15)
    {
      v11 = a6;
      a5 = (int16x8_t *)((char *)a5 + 2 * v15);
      goto LABEL_16;
    }
  }
  else
  {
    v13 = a5;
  }
  a5 = v13;
  do
  {
    a5->i16[0] = v8;
    a5 = (int16x8_t *)((char *)a5 + 2);
    ++v11;
    a4 = (int16x8_t *)((char *)a4 + 4);
  }
  while (a6 != v11);
  v11 = a6;
LABEL_16:
  if (v11 < a7 - 7)
  {
    v18 = (int *)(a3 + 4 * v11 + 16);
    do
    {
      v19 = v18[3];
      if ((int)v19 + 15 > *(_DWORD *)(a3 + 4 * (a8 - 1)))
        break;
      v20 = *(uint8x8_t *)&result[*(v18 - 4)];
      v21 = *(uint8x8_t *)&result[*(v18 - 3)];
      v22 = *(uint8x8_t *)&result[*(v18 - 2)];
      v23 = *(uint8x8_t *)&result[*(v18 - 1)];
      v24 = v18[1];
      v25 = *(uint8x8_t *)&result[*v18];
      v26 = v18[2];
      v18 += 8;
      *(int32x2_t *)v27.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vmovl_u8(v20), (int32x2_t)*(_OWORD *)&vmovl_u8(v22));
      v27.u64[1] = (unint64_t)vzip1_s32((int32x2_t)*(_OWORD *)&vmovl_u8(v25), (int32x2_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&result[v26]));
      *(int32x2_t *)v28.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vmovl_u8(v21), (int32x2_t)*(_OWORD *)&vmovl_u8(v23));
      v28.u64[1] = (unint64_t)vzip1_s32((int32x2_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&result[v24]), (int32x2_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&result[v19]));
      v29 = (int16x8_t)vzip1q_s32(v27, v28);
      v30 = (int16x8_t)vzip2q_s32(v27, v28);
      v31 = *a4;
      v32 = a4[1];
      a4 += 2;
      v33 = vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v31.i8);
      v34 = vmull_high_s16(v29, v31);
      v35 = vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v32.i8);
      v36 = vmull_high_s16(v30, v32);
      *(uint16x8_t *)a5++ = vqmovn_high_u32(vqmovn_u32((uint32x4_t)vaddq_s32(vuzp1q_s32(v33, v34), vuzp2q_s32(v33, v34))), (uint32x4_t)vaddq_s32(vuzp1q_s32(v35, v36), vuzp2q_s32(v35, v36)));
      v11 += 8;
    }
    while (a7 - 7 > v11);
  }
  if (v11 < a7)
  {
    v37 = (int *)(a3 + 4 * v11);
    do
    {
      v38 = *v37++;
      a5->i16[0] = a4->i16[0] * result[v38] + a4->i16[1] * result[v38 + 1];
      a5 = (int16x8_t *)((char *)a5 + 2);
      ++v11;
      a4 = (int16x8_t *)((char *)a4 + 4);
    }
    while (v11 < a7);
  }
  v39 = result[*(int *)(a3 + 4 * a8 - 4)] << 8;
  for (i = vdupq_n_s16(v39); v11 < a8 - 7; v11 += 8)
    *a5++ = i;
  if (v11 < a8)
  {
    v41 = (~v11 + a8);
    if (v41 < 0xF)
    {
      v42 = a5;
LABEL_31:
      v47 = a8 - v11;
      do
      {
        v42->i16[0] = v39;
        v42 = (int16x8_t *)((char *)v42 + 2);
        --v47;
      }
      while (v47);
      return result;
    }
    v43 = v41 + 1;
    v44 = (v41 + 1) & 0x1FFFFFFF0;
    v42 = (int16x8_t *)((char *)a5 + 2 * v44);
    v11 += v44;
    v45 = a5 + 1;
    v46 = v44;
    do
    {
      v45[-1] = i;
      *v45 = i;
      v45 += 2;
      v46 -= 16;
    }
    while (v46);
    if (v43 != v44)
      goto LABEL_31;
  }
  return result;
}

int8x8_t *sub_100336E58(int8x8_t *result, unsigned int a2, uint64_t a3, __int16 *a4, unsigned __int8 *a5, int a6, int a7, int a8)
{
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  int8x8_t *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  __int16 v17;
  __int16 v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int8x8_t *v29;
  unsigned __int8 *v30;
  int16x8_t *v31;
  uint64_t v32;
  int8x8_t *v33;
  int16x8_t v36;
  int16x8_t v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  uint64_t v45;
  int16x8_t *v46;
  uint64_t v47;
  int8x8_t *v48;
  int16x8_t v51;
  int16x8_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  __int16 v55;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_23;
    goto LABEL_13;
  }
  v8 = 4 * (a6 - 1) + 4;
  if ((int)a2 <= 0)
  {
    a4 = (__int16 *)((char *)a4 + v8);
    if (a6 >= a7)
      goto LABEL_23;
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    v44 = 0;
    while (1)
    {
      if (a5 >= (unsigned __int8 *)result + a2 || &a5[2 * a2] <= (unsigned __int8 *)result)
      {
        v10 = &a5[2 * (a2 & 0xFFFFFFE0)];
        v46 = (int16x8_t *)(a5 + 32);
        v47 = a2 & 0xFFFFFFE0;
        v48 = result + 2;
        do
        {
          _Q0 = *(int16x8_t *)v48[-2].i8;
          _Q1 = *(int16x8_t *)v48->i8;
          v51 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          v52 = vshll_n_s8(*v48, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v46[-2] = v51;
          v46[-1] = _Q0;
          *v46 = v52;
          v46[1] = _Q1;
          v46 += 4;
          v48 += 4;
          v47 -= 32;
        }
        while (v47);
        v45 = a2 & 0xFFFFFFE0;
        if (v45 == a2)
          goto LABEL_42;
      }
      else
      {
        v45 = 0;
        v10 = a5;
      }
      v53 = a2 - v45;
      v54 = (unsigned __int8 *)result + v45;
      do
      {
        v55 = *v54++;
        *(_WORD *)v10 = v55 << 8;
        v10 += 2;
        --v53;
      }
      while (v53);
LABEL_42:
      ++v44;
      a5 = v10;
      if (v44 == a6)
        goto LABEL_8;
    }
  }
  v9 = 0;
  v10 = a5;
  do
  {
    v11 = result;
    v12 = a2;
    do
    {
      v13 = v11->u8[0];
      v11 = (int8x8_t *)((char *)v11 + 1);
      *(_WORD *)v10 = v13 << 8;
      v10 += 2;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (__int16 *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      v14 = a6;
      do
      {
        v15 = 0;
        v16 = (unsigned __int8 *)result + *(int *)(a3 + 4 * v14) * (uint64_t)(int)a2;
        do
        {
          v17 = *a4;
          if (*a4)
            v17 *= v16[v15];
          *(_WORD *)a5 = v17;
          v18 = a4[1];
          if (v18)
            v18 *= v16[a2 + v15];
          *(_WORD *)a5 = v18 + v17;
          a5 += 2;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8)
    return result;
  v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  v20 = (unsigned __int8 *)result + v19 * (uint64_t)(int)a2;
  v21 = a2;
  if (a2 >= 0x20)
  {
    v25 = v19 * (uint64_t)(int)a2;
    v26 = 2 * a2;
    v27 = (unsigned __int8 *)result + a2 + v25;
    v28 = a2 & 0xFFFFFFE0;
    v29 = (int8x8_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        v30 = &a5[2 * (v21 & 0xFFFFFFE0)];
        v31 = (int16x8_t *)(a5 + 32);
        v32 = v21 & 0xFFFFFFE0;
        v33 = v29 + 2;
        do
        {
          _Q0 = *(int16x8_t *)v33[-2].i8;
          _Q1 = *(int16x8_t *)v33->i8;
          v36 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          v41 = vshll_n_s8(*v33, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v31[-2] = v36;
          v31[-1] = _Q0;
          *v31 = v41;
          v31[1] = _Q1;
          v31 += 4;
          v33 += 4;
          v32 -= 32;
        }
        while (v32);
        result = (int8x8_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21)
          goto LABEL_31;
      }
      else
      {
        result = 0;
        v30 = a5;
      }
      v42 = v21 - (_QWORD)result;
      result = (int8x8_t *)((char *)result + (_QWORD)v29);
      do
      {
        v43 = result->u8[0];
        result = (int8x8_t *)((char *)result + 1);
        *(_WORD *)v30 = v43 << 8;
        v30 += 2;
        --v42;
      }
      while (v42);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8)
        return result;
    }
  }
  do
  {
    v22 = v20;
    v23 = a2;
    do
    {
      v24 = *v22++;
      *(_WORD *)a5 = v24 << 8;
      a5 += 2;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

__int8 *sub_100337118(__int8 *result, int32x2_t a2, uint64_t a3, uint64_t a4, int32x4_t *a5, int16x8_t *a6, int a7, int a8, int a9)
{
  uint32x4_t v9;
  int v10;
  int8x16_t v11;
  signed int v12;
  uint64_t v13;
  int16x8_t *v14;
  uint64_t v15;
  uint64_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  int32x2_t v27;
  __int32 v28;
  int32x4_t v29;
  int32x4_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  __int16 v46;
  int16x8_t *v47;
  __int8 *v48;
  __int16 v49;
  unsigned int v50;
  int16x8_t v51;
  uint64_t v52;
  int16x8_t *v53;
  uint64_t v54;
  uint64_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t *v60;
  uint64_t v61;
  int v62;
  int8x16x2_t v63;

  a2.i8[0] = *result;
  a2.i8[4] = result[1];
  *(int32x2_t *)v9.i8 = vshl_n_s32(a2, 8uLL);
  if (a7 < 4)
  {
    v12 = 0;
    if (a7 > 0)
      goto LABEL_5;
LABEL_8:
    a7 = v12;
    goto LABEL_14;
  }
  v10 = 0;
  v63.val[1] = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v9.i8, 2);
  v63.val[0] = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v9.i8, 0);
  v11 = vqtbl2q_s8(v63, (int8x16_t)xmmword_1003C3220);
  v12 = a7 & 0xFFFFFFFC;
  do
  {
    *a6++ = (int16x8_t)v11;
    v10 += 4;
    ++a5;
  }
  while (v10 < a7 - 3);
  if (v12 >= a7)
    goto LABEL_8;
LABEL_5:
  v13 = (~v12 + a7);
  if (v13 >= 0xF)
  {
    v15 = v13 + 1;
    v16 = (v13 + 1) & 0x1FFFFFFF0;
    a5 = (int32x4_t *)((char *)a5 + 4 * v16);
    v14 = (int16x8_t *)((char *)a6 + 4 * v16);
    v12 += v16;
    v17 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 0);
    v18 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 2);
    v19 = vzip2q_s16(v17, v18);
    v20 = vzip1q_s16(v17, v18);
    v21 = a6 + 2;
    v22 = v16;
    do
    {
      v21[-2] = v20;
      v21[-1] = v19;
      *v21 = v20;
      v21[1] = v19;
      v21 += 4;
      v22 -= 16;
    }
    while (v22);
    if (v15 == v16)
    {
      a6 = (int16x8_t *)((char *)a6 + 4 * v16);
      goto LABEL_14;
    }
  }
  else
  {
    v14 = a6;
  }
  do
  {
    v14->i16[0] = v9.i16[0];
    a6 = (int16x8_t *)((char *)v14->i64 + 4);
    v14->i16[1] = v9.i16[2];
    ++v12;
    a5 = (int32x4_t *)((char *)a5 + 4);
    v14 = (int16x8_t *)((char *)v14 + 4);
  }
  while (a7 != v12);
LABEL_14:
  if (a7 < a8 - 3)
  {
    v23 = a4 + 4 * a7 + 12;
    v24 = (int *)v23;
    do
    {
      v26 = *v24;
      v24 += 4;
      v25 = v26;
      if ((int)v26 + 7 > *(_DWORD *)(a4 + 4 * (a9 - 1)))
        break;
      v27 = vadd_s32(*(int32x2_t *)(v23 - 12), *(int32x2_t *)(v23 - 12));
      v28 = v27.i32[1];
      v29 = vzip1q_s32((int32x4_t)vmovl_u8(*(uint8x8_t *)&result[v27.i32[0]]), (int32x4_t)vmovl_u8(*(uint8x8_t *)&result[2 * *(int *)(v23 - 4)]));
      v30 = vzip2q_s32((int32x4_t)vdupq_lane_s64(vmovl_u8(*(uint8x8_t *)&result[v28]).i64[0], 0), (int32x4_t)vdupq_lane_s64(vmovl_u8(*(uint8x8_t *)&result[2 * v25]).i64[0], 0));
      v31 = (int16x8_t)vzip1q_s32(v29, v30);
      v32 = (int16x8_t)vzip2q_s32(v29, v30);
      v33 = vzip1q_s16(v31, v32);
      v34 = vzip2q_s16(v31, v32);
      v35 = *a5++;
      v36 = v35;
      v37 = (int16x8_t)vzip1q_s32(v36, v36);
      v38 = (int16x8_t)vzip2q_s32(v36, v36);
      v39 = vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v37.i8);
      v40 = vmull_high_s16(v33, v37);
      v41 = vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v38.i8);
      v42 = vmull_high_s16(v34, v38);
      v9 = (uint32x4_t)vaddq_s32(vuzp1q_s32(v41, v42), vuzp2q_s32(v41, v42));
      *(uint16x8_t *)a6++ = vqmovn_high_u32(vqmovn_u32((uint32x4_t)vaddq_s32(vuzp1q_s32(v39, v40), vuzp2q_s32(v39, v40))), v9);
      a7 += 4;
      v23 = (uint64_t)v24;
    }
    while (a8 - 3 > a7);
  }
  if (a7 < a8)
  {
    v43 = (int *)(a4 + 4 * a7);
    do
    {
      v44 = *v43++;
      v45 = (unsigned __int8 *)&result[2 * v44];
      a6->i16[0] = a5->i16[0] * *v45 + a5->i16[1] * v45[2];
      v46 = a5->i16[0] * v45[1] + a5->i16[1] * v45[3];
      v47 = (int16x8_t *)((char *)a6->i64 + 4);
      a6->i16[1] = v46;
      ++a7;
      a5 = (int32x4_t *)((char *)a5 + 4);
      a6 = (int16x8_t *)((char *)a6 + 4);
    }
    while (a7 < a8);
    a6 = v47;
  }
  v48 = &result[2 * *(int *)(a4 + 4 * a9 - 4)];
  v49 = *v48 << 8;
  v9.i32[0] = *v48 << 8;
  v50 = v48[1] << 8;
  if (a7 < a9 - 3)
  {
    v51.i16[0] = v9.i16[0];
    v51.i16[1] = v50;
    v51.i16[2] = v49;
    v51.i16[3] = v50;
    v51.i16[4] = v49;
    v51.i16[5] = v50;
    v51.i16[6] = v49;
    v51.i16[7] = v50;
    do
    {
      *a6++ = v51;
      a7 += 4;
    }
    while (a7 < a9 - 3);
  }
  if (a7 < a9)
  {
    v52 = (~a7 + a9);
    if (v52 < 0xF)
    {
      v53 = a6;
LABEL_31:
      v62 = a9 - a7;
      do
      {
        v53->i16[0] = v49;
        v53->i16[1] = v50;
        v53 = (int16x8_t *)((char *)v53 + 4);
        --v62;
      }
      while (v62);
      return result;
    }
    v54 = v52 + 1;
    v55 = (v52 + 1) & 0x1FFFFFFF0;
    v53 = (int16x8_t *)((char *)a6 + 4 * v55);
    a7 += v55;
    v56 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 0);
    v57 = vdupq_n_s16(v50);
    v58 = vzip2q_s16(v56, v57);
    v59 = vzip1q_s16(v56, v57);
    v60 = a6 + 2;
    v61 = v55;
    do
    {
      v60[-2] = v59;
      v60[-1] = v58;
      *v60 = v59;
      v60[1] = v58;
      v60 += 4;
      v61 -= 16;
    }
    while (v61);
    if (v54 != v55)
      goto LABEL_31;
  }
  return result;
}

int8x8_t *sub_100337430(int8x8_t *result, unsigned int a2, uint64_t a3, __int16 *a4, unsigned __int8 *a5, int a6, int a7, int a8)
{
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  int8x8_t *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  __int16 v17;
  __int16 v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int8x8_t *v29;
  unsigned __int8 *v30;
  int16x8_t *v31;
  uint64_t v32;
  int8x8_t *v33;
  int16x8_t v36;
  int16x8_t v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  uint64_t v45;
  int16x8_t *v46;
  uint64_t v47;
  int8x8_t *v48;
  int16x8_t v51;
  int16x8_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  __int16 v55;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_23;
    goto LABEL_13;
  }
  v8 = 4 * (a6 - 1) + 4;
  if ((int)a2 <= 0)
  {
    a4 = (__int16 *)((char *)a4 + v8);
    if (a6 >= a7)
      goto LABEL_23;
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    v44 = 0;
    while (1)
    {
      if (a5 >= (unsigned __int8 *)result + a2 || &a5[2 * a2] <= (unsigned __int8 *)result)
      {
        v10 = &a5[2 * (a2 & 0xFFFFFFE0)];
        v46 = (int16x8_t *)(a5 + 32);
        v47 = a2 & 0xFFFFFFE0;
        v48 = result + 2;
        do
        {
          _Q0 = *(int16x8_t *)v48[-2].i8;
          _Q1 = *(int16x8_t *)v48->i8;
          v51 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          v52 = vshll_n_s8(*v48, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v46[-2] = v51;
          v46[-1] = _Q0;
          *v46 = v52;
          v46[1] = _Q1;
          v46 += 4;
          v48 += 4;
          v47 -= 32;
        }
        while (v47);
        v45 = a2 & 0xFFFFFFE0;
        if (v45 == a2)
          goto LABEL_42;
      }
      else
      {
        v45 = 0;
        v10 = a5;
      }
      v53 = a2 - v45;
      v54 = (unsigned __int8 *)result + v45;
      do
      {
        v55 = *v54++;
        *(_WORD *)v10 = v55 << 8;
        v10 += 2;
        --v53;
      }
      while (v53);
LABEL_42:
      ++v44;
      a5 = v10;
      if (v44 == a6)
        goto LABEL_8;
    }
  }
  v9 = 0;
  v10 = a5;
  do
  {
    v11 = result;
    v12 = a2;
    do
    {
      v13 = v11->u8[0];
      v11 = (int8x8_t *)((char *)v11 + 1);
      *(_WORD *)v10 = v13 << 8;
      v10 += 2;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (__int16 *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      v14 = a6;
      do
      {
        v15 = 0;
        v16 = (unsigned __int8 *)result + *(int *)(a3 + 4 * v14) * (uint64_t)(int)a2;
        do
        {
          v17 = *a4;
          if (*a4)
            v17 *= v16[v15];
          *(_WORD *)a5 = v17;
          v18 = a4[1];
          if (v18)
            v18 *= v16[a2 + v15];
          *(_WORD *)a5 = v18 + v17;
          a5 += 2;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8)
    return result;
  v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  v20 = (unsigned __int8 *)result + v19 * (uint64_t)(int)a2;
  v21 = a2;
  if (a2 >= 0x20)
  {
    v25 = v19 * (uint64_t)(int)a2;
    v26 = 2 * a2;
    v27 = (unsigned __int8 *)result + a2 + v25;
    v28 = a2 & 0xFFFFFFE0;
    v29 = (int8x8_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        v30 = &a5[2 * (v21 & 0xFFFFFFE0)];
        v31 = (int16x8_t *)(a5 + 32);
        v32 = v21 & 0xFFFFFFE0;
        v33 = v29 + 2;
        do
        {
          _Q0 = *(int16x8_t *)v33[-2].i8;
          _Q1 = *(int16x8_t *)v33->i8;
          v36 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          v41 = vshll_n_s8(*v33, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v31[-2] = v36;
          v31[-1] = _Q0;
          *v31 = v41;
          v31[1] = _Q1;
          v31 += 4;
          v33 += 4;
          v32 -= 32;
        }
        while (v32);
        result = (int8x8_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21)
          goto LABEL_31;
      }
      else
      {
        result = 0;
        v30 = a5;
      }
      v42 = v21 - (_QWORD)result;
      result = (int8x8_t *)((char *)result + (_QWORD)v29);
      do
      {
        v43 = result->u8[0];
        result = (int8x8_t *)((char *)result + 1);
        *(_WORD *)v30 = v43 << 8;
        v30 += 2;
        --v42;
      }
      while (v42);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8)
        return result;
    }
  }
  do
  {
    v22 = v20;
    v23 = a2;
    do
    {
      v24 = *v22++;
      *(_WORD *)a5 = v24 << 8;
      a5 += 2;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

unint64_t sub_1003376F0(unint64_t result, uint64_t a2, uint64_t a3, _WORD *a4, _WORD *a5, int a6, int a7, int a8)
{
  __int16 v8;
  __int16 v9;
  __int16 v10;
  int v11;
  _WORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  _WORD *v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  __int16 v23;
  _WORD *v24;
  unsigned __int8 *v25;
  __int16 v26;
  __int16 v27;
  unsigned __int16 v28;
  uint64_t v29;
  _WORD *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;

  if (a6 >= 1)
  {
    v8 = *(unsigned __int8 *)result << 8;
    v9 = *(unsigned __int8 *)(result + 1) << 8;
    v10 = *(unsigned __int8 *)(result + 2) << 8;
    if (a6 >= 0x10)
    {
      v13 = a6 & 0xFFFFFFF0;
      v12 = &a5[3 * v13];
      do
      {
        LOWORD(v14) = v8;
        WORD1(v14) = v9;
        WORD2(v14) = v10;
        WORD3(v14) = v8;
        LOWORD(v15) = v10;
        WORD1(v15) = v8;
        WORD4(v14) = v9;
        WORD2(v15) = v9;
        WORD3(v15) = v10;
        WORD5(v14) = v10;
        WORD4(v15) = v8;
        WORD5(v15) = v9;
        WORD6(v14) = v8;
        LOWORD(v16) = v9;
        WORD1(v16) = v10;
        WORD6(v15) = v10;
        WORD2(v16) = v8;
        WORD3(v16) = v9;
        HIWORD(v14) = v9;
        WORD4(v16) = v10;
        WORD5(v16) = v8;
        HIWORD(v15) = v8;
        WORD6(v16) = v9;
        HIWORD(v16) = v10;
        *(_OWORD *)a5 = v14;
        *((_OWORD *)a5 + 1) = v15;
        *((_OWORD *)a5 + 2) = v16;
        *((_OWORD *)a5 + 3) = v14;
        *((_OWORD *)a5 + 4) = v15;
        *((_OWORD *)a5 + 5) = v16;
        a5 += 48;
        v13 -= 16;
      }
      while (v13);
      v11 = a6 & 0x7FFFFFF0;
      if ((a6 & 0xFFFFFFF0) == (unint64_t)a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v12;
        if (a6 < a7)
          goto LABEL_14;
        goto LABEL_5;
      }
    }
    else
    {
      v11 = 0;
      v12 = a5;
    }
    v17 = a6 - v11;
    do
    {
      *v12 = v8;
      v12[1] = v9;
      v18 = v12 + 3;
      v12[2] = v10;
      v12 += 3;
      --v17;
    }
    while (v17);
    v12 = v18;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    v19 = a7 - (unint64_t)a6;
    v20 = (int *)(a3 + 4 * a6);
    do
    {
      v21 = *v20++;
      v22 = (unsigned __int8 *)(result + 3 * v21);
      *a5 = *a4 * *v22 + a4[1] * v22[3];
      a5[1] = *a4 * v22[1] + a4[1] * v22[4];
      v23 = *a4 * v22[2] + a4[1] * v22[5];
      v24 = a5 + 3;
      a5[2] = v23;
      a4 += 2;
      a5 += 3;
      --v19;
    }
    while (v19);
    a5 = v24;
    if (a7 >= a8)
      return result;
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8)
    return result;
LABEL_17:
  v25 = (unsigned __int8 *)(result + 3 * *(int *)(a3 + 4 * (a8 - 1)));
  v26 = *v25 << 8;
  v27 = v25[1] << 8;
  v28 = v25[2] << 8;
  v29 = (~a7 + a8);
  if (v29 < 0xF)
  {
    v30 = a5;
LABEL_22:
    v36 = a8 - a7;
    do
    {
      *v30 = v26;
      v30[1] = v27;
      v30[2] = v28;
      v30 += 3;
      --v36;
    }
    while (v36);
    return result;
  }
  v31 = v29 + 1;
  result = v28;
  v30 = &a5[3 * (v31 & 0x1FFFFFFF0)];
  v32 = v31 & 0x1FFFFFFF0;
  do
  {
    LOWORD(v33) = v26;
    WORD1(v33) = v27;
    WORD2(v33) = v28;
    WORD3(v33) = v26;
    LOWORD(v34) = v28;
    WORD1(v34) = v26;
    WORD4(v33) = v27;
    WORD2(v34) = v27;
    WORD3(v34) = v28;
    WORD5(v33) = v28;
    WORD4(v34) = v26;
    WORD5(v34) = v27;
    WORD6(v33) = v26;
    LOWORD(v35) = v27;
    WORD1(v35) = v28;
    WORD6(v34) = v28;
    WORD2(v35) = v26;
    WORD3(v35) = v27;
    HIWORD(v33) = v27;
    WORD4(v35) = v28;
    WORD5(v35) = v26;
    HIWORD(v34) = v26;
    WORD6(v35) = v27;
    HIWORD(v35) = v28;
    *(_OWORD *)a5 = v33;
    *((_OWORD *)a5 + 1) = v34;
    *((_OWORD *)a5 + 2) = v35;
    *((_OWORD *)a5 + 3) = v33;
    *((_OWORD *)a5 + 4) = v34;
    *((_OWORD *)a5 + 5) = v35;
    a5 += 48;
    v32 -= 16;
  }
  while (v32);
  a7 += v31 & 0xFFFFFFF0;
  if (v31 != (v31 & 0x1FFFFFFF0))
    goto LABEL_22;
  return result;
}

int8x8_t *sub_100337B60(int8x8_t *result, unsigned int a2, uint64_t a3, __int16 *a4, unsigned __int8 *a5, int a6, int a7, int a8)
{
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  int8x8_t *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  __int16 v17;
  __int16 v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int8x8_t *v29;
  unsigned __int8 *v30;
  int16x8_t *v31;
  uint64_t v32;
  int8x8_t *v33;
  int16x8_t v36;
  int16x8_t v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  uint64_t v45;
  int16x8_t *v46;
  uint64_t v47;
  int8x8_t *v48;
  int16x8_t v51;
  int16x8_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  __int16 v55;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_23;
    goto LABEL_13;
  }
  v8 = 4 * (a6 - 1) + 4;
  if ((int)a2 <= 0)
  {
    a4 = (__int16 *)((char *)a4 + v8);
    if (a6 >= a7)
      goto LABEL_23;
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    v44 = 0;
    while (1)
    {
      if (a5 >= (unsigned __int8 *)result + a2 || &a5[2 * a2] <= (unsigned __int8 *)result)
      {
        v10 = &a5[2 * (a2 & 0xFFFFFFE0)];
        v46 = (int16x8_t *)(a5 + 32);
        v47 = a2 & 0xFFFFFFE0;
        v48 = result + 2;
        do
        {
          _Q0 = *(int16x8_t *)v48[-2].i8;
          _Q1 = *(int16x8_t *)v48->i8;
          v51 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          v52 = vshll_n_s8(*v48, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v46[-2] = v51;
          v46[-1] = _Q0;
          *v46 = v52;
          v46[1] = _Q1;
          v46 += 4;
          v48 += 4;
          v47 -= 32;
        }
        while (v47);
        v45 = a2 & 0xFFFFFFE0;
        if (v45 == a2)
          goto LABEL_42;
      }
      else
      {
        v45 = 0;
        v10 = a5;
      }
      v53 = a2 - v45;
      v54 = (unsigned __int8 *)result + v45;
      do
      {
        v55 = *v54++;
        *(_WORD *)v10 = v55 << 8;
        v10 += 2;
        --v53;
      }
      while (v53);
LABEL_42:
      ++v44;
      a5 = v10;
      if (v44 == a6)
        goto LABEL_8;
    }
  }
  v9 = 0;
  v10 = a5;
  do
  {
    v11 = result;
    v12 = a2;
    do
    {
      v13 = v11->u8[0];
      v11 = (int8x8_t *)((char *)v11 + 1);
      *(_WORD *)v10 = v13 << 8;
      v10 += 2;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (__int16 *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      v14 = a6;
      do
      {
        v15 = 0;
        v16 = (unsigned __int8 *)result + *(int *)(a3 + 4 * v14) * (uint64_t)(int)a2;
        do
        {
          v17 = *a4;
          if (*a4)
            v17 *= v16[v15];
          *(_WORD *)a5 = v17;
          v18 = a4[1];
          if (v18)
            v18 *= v16[a2 + v15];
          *(_WORD *)a5 = v18 + v17;
          a5 += 2;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8)
    return result;
  v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  v20 = (unsigned __int8 *)result + v19 * (uint64_t)(int)a2;
  v21 = a2;
  if (a2 >= 0x20)
  {
    v25 = v19 * (uint64_t)(int)a2;
    v26 = 2 * a2;
    v27 = (unsigned __int8 *)result + a2 + v25;
    v28 = a2 & 0xFFFFFFE0;
    v29 = (int8x8_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        v30 = &a5[2 * (v21 & 0xFFFFFFE0)];
        v31 = (int16x8_t *)(a5 + 32);
        v32 = v21 & 0xFFFFFFE0;
        v33 = v29 + 2;
        do
        {
          _Q0 = *(int16x8_t *)v33[-2].i8;
          _Q1 = *(int16x8_t *)v33->i8;
          v36 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          v41 = vshll_n_s8(*v33, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v31[-2] = v36;
          v31[-1] = _Q0;
          *v31 = v41;
          v31[1] = _Q1;
          v31 += 4;
          v33 += 4;
          v32 -= 32;
        }
        while (v32);
        result = (int8x8_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21)
          goto LABEL_31;
      }
      else
      {
        result = 0;
        v30 = a5;
      }
      v42 = v21 - (_QWORD)result;
      result = (int8x8_t *)((char *)result + (_QWORD)v29);
      do
      {
        v43 = result->u8[0];
        result = (int8x8_t *)((char *)result + 1);
        *(_WORD *)v30 = v43 << 8;
        v30 += 2;
        --v42;
      }
      while (v42);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8)
        return result;
    }
  }
  do
  {
    v22 = v20;
    v23 = a2;
    do
    {
      v24 = *v22++;
      *(_WORD *)a5 = v24 << 8;
      a5 += 2;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

__int32 *sub_100337E20(__int32 *result, uint8x8_t a2, uint64_t a3, uint64_t a4, const float *a5, uint64_t a6, int a7, int a8, int a9)
{
  uint32x4_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int16x8_t v17;
  int8x16_t v18;
  int16x8_t v19;
  const float *v20;
  int8x16_t v21;
  int8x16_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  a2.i32[0] = *result;
  *(int16x4_t *)v9.i8 = vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a2), 8uLL);
  if (a7 < 2)
  {
    LODWORD(v12) = 0;
    if (a7 > 0)
    {
LABEL_5:
      *(_QWORD *)a6 = v9.i64[0];
      a6 += 8;
      LODWORD(v12) = v12 | 1;
      ++a5;
    }
  }
  else
  {
    v10 = 0;
    *(_QWORD *)&v11 = v9.i64[0];
    *((_QWORD *)&v11 + 1) = v9.i64[0];
    LODWORD(v12) = a7 & 0xFFFFFFFE;
    do
    {
      *(_OWORD *)a6 = v11;
      a6 += 16;
      v10 += 2;
      a5 += 2;
    }
    while (v10 < a7 - 1);
    if ((int)v12 < a7)
      goto LABEL_5;
  }
  if ((int)v12 < a8 - 1)
  {
    v12 = (int)v12;
    v13 = a4 + 4 * (int)v12 + 4;
    v14 = (int *)v13;
    do
    {
      v16 = *v14;
      v14 += 2;
      v15 = v16;
      if ((int)v16 + 3 > *(_DWORD *)(a4 + 4 * (a9 - 1)))
        break;
      v17 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&result[*(int *)(v13 - 4)]);
      v18 = (int8x16_t)vmovl_u8(*(uint8x8_t *)&result[v15]);
      v19.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
      v17.i64[1] = v18.i64[0];
      v19.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
      v20 = a5;
      *(float32x2_t *)v18.i8 = vld1_dup_f32(v20++);
      v21 = (int8x16_t)vzip1q_s16(v17, v19);
      v22 = (int8x16_t)vzip2q_s16(v17, v19);
      v23 = vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v18.i8);
      v24 = vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), *(int16x4_t *)v18.i8);
      v25 = (uint32x4_t)vaddq_s32(vuzp1q_s32(v23, v24), vuzp2q_s32(v23, v24));
      *(float32x2_t *)v23.i8 = vld1_dup_f32(v20);
      v26 = vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v23.i8);
      v27 = vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), *(int16x4_t *)v23.i8);
      v9 = (uint32x4_t)vaddq_s32(vuzp1q_s32(v26, v27), vuzp2q_s32(v26, v27));
      *(uint16x8_t *)a6 = vqmovn_high_u32(vqmovn_u32(v25), v9);
      a6 += 16;
      v12 += 2;
      a5 += 2;
      v13 = (uint64_t)v14;
    }
    while (v12 < a8 - 1);
  }
  if ((int)v12 >= a8)
  {
    a8 = v12;
  }
  else
  {
    v28 = (int *)(a4 + 4 * (int)v12);
    v29 = a8 - (uint64_t)(int)v12;
    do
    {
      v30 = *v28++;
      v31 = (unsigned __int8 *)&result[v30];
      *(_WORD *)a6 = *(_WORD *)a5 * *v31 + *((_WORD *)a5 + 1) * v31[4];
      *(_WORD *)(a6 + 2) = *(_WORD *)a5 * v31[1] + *((_WORD *)a5 + 1) * v31[5];
      *(_WORD *)(a6 + 4) = *(_WORD *)a5 * v31[2] + *((_WORD *)a5 + 1) * v31[6];
      v32 = *(_WORD *)a5 * v31[3] + *((_WORD *)a5 + 1) * v31[7];
      v33 = a6 + 8;
      *(_WORD *)(a6 + 6) = v32;
      ++a5;
      a6 += 8;
      --v29;
    }
    while (v29);
    a6 = v33;
  }
  v34 = a9 - 1;
  v9.i32[0] = result[*(int *)(a4 + 4 * v34)];
  *(int16x4_t *)v9.i8 = vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v9.i8), 8uLL);
  if (a8 < (int)v34)
  {
    *(_QWORD *)&v35 = v9.i64[0];
    *((_QWORD *)&v35 + 1) = v9.i64[0];
    do
    {
      *(_OWORD *)a6 = v35;
      a6 += 16;
      a8 += 2;
    }
    while (a8 < (int)v34);
  }
  if (a8 < a9)
    *(_QWORD *)a6 = v9.i64[0];
  return result;
}

int8x8_t *sub_100338044(int8x8_t *result, unsigned int a2, uint64_t a3, __int16 *a4, unsigned __int8 *a5, int a6, int a7, int a8)
{
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  int8x8_t *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  __int16 v17;
  __int16 v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int8x8_t *v29;
  unsigned __int8 *v30;
  int16x8_t *v31;
  uint64_t v32;
  int8x8_t *v33;
  int16x8_t v36;
  int16x8_t v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  uint64_t v45;
  int16x8_t *v46;
  uint64_t v47;
  int8x8_t *v48;
  int16x8_t v51;
  int16x8_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  __int16 v55;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_23;
    goto LABEL_13;
  }
  v8 = 4 * (a6 - 1) + 4;
  if ((int)a2 <= 0)
  {
    a4 = (__int16 *)((char *)a4 + v8);
    if (a6 >= a7)
      goto LABEL_23;
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    v44 = 0;
    while (1)
    {
      if (a5 >= (unsigned __int8 *)result + a2 || &a5[2 * a2] <= (unsigned __int8 *)result)
      {
        v10 = &a5[2 * (a2 & 0xFFFFFFE0)];
        v46 = (int16x8_t *)(a5 + 32);
        v47 = a2 & 0xFFFFFFE0;
        v48 = result + 2;
        do
        {
          _Q0 = *(int16x8_t *)v48[-2].i8;
          _Q1 = *(int16x8_t *)v48->i8;
          v51 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          v52 = vshll_n_s8(*v48, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v46[-2] = v51;
          v46[-1] = _Q0;
          *v46 = v52;
          v46[1] = _Q1;
          v46 += 4;
          v48 += 4;
          v47 -= 32;
        }
        while (v47);
        v45 = a2 & 0xFFFFFFE0;
        if (v45 == a2)
          goto LABEL_42;
      }
      else
      {
        v45 = 0;
        v10 = a5;
      }
      v53 = a2 - v45;
      v54 = (unsigned __int8 *)result + v45;
      do
      {
        v55 = *v54++;
        *(_WORD *)v10 = v55 << 8;
        v10 += 2;
        --v53;
      }
      while (v53);
LABEL_42:
      ++v44;
      a5 = v10;
      if (v44 == a6)
        goto LABEL_8;
    }
  }
  v9 = 0;
  v10 = a5;
  do
  {
    v11 = result;
    v12 = a2;
    do
    {
      v13 = v11->u8[0];
      v11 = (int8x8_t *)((char *)v11 + 1);
      *(_WORD *)v10 = v13 << 8;
      v10 += 2;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (__int16 *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      v14 = a6;
      do
      {
        v15 = 0;
        v16 = (unsigned __int8 *)result + *(int *)(a3 + 4 * v14) * (uint64_t)(int)a2;
        do
        {
          v17 = *a4;
          if (*a4)
            v17 *= v16[v15];
          *(_WORD *)a5 = v17;
          v18 = a4[1];
          if (v18)
            v18 *= v16[a2 + v15];
          *(_WORD *)a5 = v18 + v17;
          a5 += 2;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8)
    return result;
  v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  v20 = (unsigned __int8 *)result + v19 * (uint64_t)(int)a2;
  v21 = a2;
  if (a2 >= 0x20)
  {
    v25 = v19 * (uint64_t)(int)a2;
    v26 = 2 * a2;
    v27 = (unsigned __int8 *)result + a2 + v25;
    v28 = a2 & 0xFFFFFFE0;
    v29 = (int8x8_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        v30 = &a5[2 * (v21 & 0xFFFFFFE0)];
        v31 = (int16x8_t *)(a5 + 32);
        v32 = v21 & 0xFFFFFFE0;
        v33 = v29 + 2;
        do
        {
          _Q0 = *(int16x8_t *)v33[-2].i8;
          _Q1 = *(int16x8_t *)v33->i8;
          v36 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          v41 = vshll_n_s8(*v33, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v31[-2] = v36;
          v31[-1] = _Q0;
          *v31 = v41;
          v31[1] = _Q1;
          v31 += 4;
          v33 += 4;
          v32 -= 32;
        }
        while (v32);
        result = (int8x8_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21)
          goto LABEL_31;
      }
      else
      {
        result = 0;
        v30 = a5;
      }
      v42 = v21 - (_QWORD)result;
      result = (int8x8_t *)((char *)result + (_QWORD)v29);
      do
      {
        v43 = result->u8[0];
        result = (int8x8_t *)((char *)result + 1);
        *(_WORD *)v30 = v43 << 8;
        v30 += 2;
        --v42;
      }
      while (v42);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8)
        return result;
    }
  }
  do
  {
    v22 = v20;
    v23 = a2;
    do
    {
      v24 = *v22++;
      *(_WORD *)a5 = v24 << 8;
      a5 += 2;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

int8x8_t *sub_100338304(int8x8_t *result, unsigned int a2, uint64_t a3, const __int16 *a4, unint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v8;
  int v9;
  _WORD *v10;
  int8x8_t *v11;
  uint64_t v12;
  __int16 v13;
  int16x8_t *v14;
  uint64_t v15;
  char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  int16x8_t *v20;
  uint64_t v21;
  int8x8_t *v22;
  int16x8_t v25;
  int16x8_t v29;
  int8x8_t *v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int8x8_t *v43;
  int16x8_t *v44;
  int16x8_t *v45;
  uint64_t v46;
  int8x8_t *v47;
  int16x8_t v50;
  int16x8_t v51;
  int8x8_t *v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  const __int16 *v56;
  uint64_t v57;
  int v58;
  uint8x16_t *v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v63;
  BOOL v65;
  BOOL v66;
  const __int16 *v67;
  int16x8_t v68;
  int16x8_t v69;
  uint64_t v70;
  uint8x16_t v71;
  int16x8_t v72;
  int8x8_t *v73;
  __int16 v74;

  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 > 0)
      goto LABEL_9;
    goto LABEL_17;
  }
  v8 = 4 * (a6 - 1) + 4;
  if ((int)a2 <= 0)
  {
    a4 = (const __int16 *)((char *)a4 + v8);
    if ((int)a6 < a7)
      goto LABEL_9;
LABEL_17:
    v14 = (int16x8_t *)a5;
    goto LABEL_32;
  }
  if (a2 >= 0x20)
  {
    v18 = 0;
    while (1)
    {
      if (a5 >= (unint64_t)result + a2 || a5 + 2 * a2 <= (unint64_t)result)
      {
        v10 = (_WORD *)(a5 + 2 * (a2 & 0xFFFFFFE0));
        v20 = (int16x8_t *)(a5 + 32);
        v21 = a2 & 0xFFFFFFE0;
        v22 = result + 2;
        do
        {
          _Q0 = *(int16x8_t *)v22[-2].i8;
          _Q1 = *(int16x8_t *)v22->i8;
          v25 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          v29 = vshll_n_s8(*v22, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v20[-2] = v25;
          v20[-1] = _Q0;
          *v20 = v29;
          v20[1] = _Q1;
          v20 += 4;
          v22 += 4;
          v21 -= 32;
        }
        while (v21);
        v19 = a2 & 0xFFFFFFE0;
        if (v19 == a2)
          goto LABEL_21;
      }
      else
      {
        v19 = 0;
        v10 = (_WORD *)a5;
      }
      v30 = (int8x8_t *)((char *)result + v19);
      v31 = a2 - v19;
      do
      {
        v32 = v30->u8[0];
        v30 = (int8x8_t *)((char *)v30 + 1);
        *v10++ = v32 << 8;
        --v31;
      }
      while (v31);
LABEL_21:
      ++v18;
      a5 = (unint64_t)v10;
      if (v18 == (_DWORD)a6)
        goto LABEL_8;
    }
  }
  v9 = 0;
  v10 = (_WORD *)a5;
  do
  {
    v11 = result;
    v12 = a2;
    do
    {
      v13 = v11->u8[0];
      v11 = (int8x8_t *)((char *)v11 + 1);
      *v10++ = v13 << 8;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != (_DWORD)a6);
LABEL_8:
  a4 = (const __int16 *)((char *)a4 + v8);
  a5 = (unint64_t)v10;
  if ((int)a6 >= a7)
    goto LABEL_17;
LABEL_9:
  if ((int)a2 < 1)
  {
    v14 = (int16x8_t *)a5;
    LODWORD(a6) = a7;
    goto LABEL_32;
  }
  a6 = a6;
  if (a2 >= 0x10)
  {
    v54 = 0;
    v55 = 2 * a2;
    v56 = a4;
    while (1)
    {
      v57 = 0;
      v58 = *(_DWORD *)(a3 + 4 * a6);
      v59 = (uint8x16_t *)((char *)result + v58 * (uint64_t)(int)a2);
      v60 = a5 + v55;
      v61 = (unint64_t)result + a2 + v58 * (uint64_t)(int)a2;
      v63 = a5 < (unint64_t)result + v55 + v58 * (uint64_t)(int)a2 && v61 < v60;
      v65 = a5 < v61 && (unint64_t)v59 < v60;
      v66 = (unint64_t)v56 >= v60 || a5 >= (unint64_t)&a4[2 * v54 + 2];
      if (!v66 || v63 || v65)
      {
        v14 = (int16x8_t *)a5;
      }
      else
      {
        v14 = (int16x8_t *)(a5 + 2 * (a2 & 0xFFFFFFF0));
        v67 = v56;
        v68 = vld1q_dup_s16(v67++);
        v69 = vld1q_dup_s16(v67);
        v70 = a2 & 0xFFFFFFF0;
        do
        {
          v71 = *(uint8x16_t *)((char *)v59 + a2);
          v72 = vmlaq_s16(vmulq_s16(v68, (int16x8_t)vmovl_high_u8(*v59)), v69, (int16x8_t)vmovl_high_u8(v71));
          *(int16x8_t *)a5 = vmlaq_s16(vmulq_s16(v68, (int16x8_t)vmovl_u8(*(uint8x8_t *)v59->i8)), v69, (int16x8_t)vmovl_u8(*(uint8x8_t *)v71.i8));
          *(int16x8_t *)(a5 + 16) = v72;
          a5 += 32;
          ++v59;
          v70 -= 16;
        }
        while (v70);
        v57 = a2 & 0x7FFFFFF0;
        if ((a2 & 0xFFFFFFF0) == (unint64_t)a2)
          goto LABEL_51;
      }
      v73 = (int8x8_t *)((char *)result + v57 + v58 * (uint64_t)(int)a2);
      do
      {
        v74 = *v56 * v73->u8[0];
        v14->i16[0] = v74;
        v14->i16[0] = v74 + v56[1] * v73->u8[a2];
        v14 = (int16x8_t *)((char *)v14 + 2);
        ++v57;
        v73 = (int8x8_t *)((char *)v73 + 1);
      }
      while (a2 != v57);
LABEL_51:
      ++a6;
      v56 += 2;
      ++v54;
      a5 = (unint64_t)v14;
      if ((int)a6 >= a7)
        goto LABEL_32;
    }
  }
  v14 = (int16x8_t *)a5;
  do
  {
    v15 = 0;
    v16 = (char *)result + *(int *)(a3 + 4 * a6) * (uint64_t)(int)a2;
    do
    {
      v17 = *a4 * v16[v15];
      v14->i16[0] = v17;
      v14->i16[0] = v17 + a4[1] * v16[a2 + v15];
      v14 = (int16x8_t *)((char *)v14 + 2);
      ++v15;
    }
    while (a2 != v15);
    ++a6;
    a4 += 2;
  }
  while ((int)a6 < a7);
LABEL_32:
  if ((int)a6 >= a8 || (int)a2 < 1)
    return result;
  v33 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  v34 = (unsigned __int8 *)result + v33 * (uint64_t)(int)a2;
  v35 = a2;
  if (a2 >= 0x20)
  {
    v39 = v33 * (uint64_t)(int)a2;
    v40 = 2 * a2;
    v41 = (unint64_t)result + a2 + v39;
    v42 = a2 & 0xFFFFFFE0;
    v43 = (int8x8_t *)((char *)result + v39);
    while (1)
    {
      if ((unint64_t)v14 >= v41 || v34 >= &v14->u8[v40])
      {
        v44 = (int16x8_t *)((char *)v14 + 2 * (v35 & 0xFFFFFFE0));
        v45 = v14 + 2;
        v46 = v35 & 0xFFFFFFE0;
        v47 = v43 + 2;
        do
        {
          _Q0 = *(int16x8_t *)v47[-2].i8;
          _Q1 = *(int16x8_t *)v47->i8;
          v50 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          v51 = vshll_n_s8(*v47, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v45[-2] = v50;
          v45[-1] = _Q0;
          *v45 = v51;
          v45[1] = _Q1;
          v45 += 4;
          v47 += 4;
          v46 -= 32;
        }
        while (v46);
        result = (int8x8_t *)(v35 & 0x7FFFFFE0);
        if (v42 == v35)
          goto LABEL_40;
      }
      else
      {
        result = 0;
        v44 = v14;
      }
      v52 = (int8x8_t *)((char *)result + (_QWORD)v43);
      result = (int8x8_t *)(v35 - (_QWORD)result);
      do
      {
        v53 = v52->u8[0];
        v52 = (int8x8_t *)((char *)v52 + 1);
        v44->i16[0] = v53 << 8;
        v44 = (int16x8_t *)((char *)v44 + 2);
        result = (int8x8_t *)((char *)result - 1);
      }
      while (result);
LABEL_40:
      LODWORD(a6) = a6 + 1;
      v14 = v44;
      if ((_DWORD)a6 == a8)
        return result;
    }
  }
  do
  {
    v36 = v34;
    v37 = a2;
    do
    {
      v38 = *v36++;
      v14->i16[0] = v38 << 8;
      v14 = (int16x8_t *)((char *)v14 + 2);
      --v37;
    }
    while (v37);
    LODWORD(a6) = a6 + 1;
  }
  while ((_DWORD)a6 != a8);
  return result;
}

int8x8_t *sub_1003386F4(int8x8_t *result, unsigned int a2, uint64_t a3, __int16 *a4, int16x8_t *a5, uint64_t a6, int a7, int a8)
{
  uint64_t v8;
  int v9;
  int16x8_t *v10;
  int8x8_t *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  char *v15;
  __int16 v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  int16x8_t *v20;
  uint64_t v21;
  int8x8_t *v22;
  int16x8_t v25;
  int16x8_t v30;
  int8x8_t *v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int8x8_t *v44;
  int16x8_t *v45;
  int16x8_t *v46;
  uint64_t v47;
  int8x8_t *v48;
  int16x8_t v51;
  int16x8_t v52;
  int8x8_t *v53;
  __int16 v54;

  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 <= 0)
      goto LABEL_34;
    goto LABEL_13;
  }
  v8 = 4 * (a6 - 1) + 4;
  if ((int)a2 <= 0)
  {
    a4 = (__int16 *)((char *)a4 + v8);
    if ((int)a6 >= a7)
      goto LABEL_34;
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    v18 = 0;
    while (1)
    {
      if (a5 >= (int16x8_t *)((char *)result + a2) || (char *)a5 + 2 * a2 <= (char *)result)
      {
        v10 = (int16x8_t *)((char *)a5 + 2 * (a2 & 0xFFFFFFE0));
        v20 = a5 + 2;
        v21 = a2 & 0xFFFFFFE0;
        v22 = result + 2;
        do
        {
          _Q0 = *(int16x8_t *)v22[-2].i8;
          _Q1 = *(int16x8_t *)v22->i8;
          v25 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          v30 = vshll_n_s8(*v22, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v20[-2] = v25;
          v20[-1] = _Q0;
          *v20 = v30;
          v20[1] = _Q1;
          v20 += 4;
          v22 += 4;
          v21 -= 32;
        }
        while (v21);
        v19 = a2 & 0xFFFFFFE0;
        if (v19 == a2)
          goto LABEL_23;
      }
      else
      {
        v19 = 0;
        v10 = a5;
      }
      v31 = (int8x8_t *)((char *)result + v19);
      v32 = a2 - v19;
      do
      {
        v33 = v31->u8[0];
        v31 = (int8x8_t *)((char *)v31 + 1);
        v10->i16[0] = v33 << 8;
        v10 = (int16x8_t *)((char *)v10 + 2);
        --v32;
      }
      while (v32);
LABEL_23:
      ++v18;
      a5 = v10;
      if (v18 == (_DWORD)a6)
        goto LABEL_8;
    }
  }
  v9 = 0;
  v10 = a5;
  do
  {
    v11 = result;
    v12 = a2;
    do
    {
      v13 = v11->u8[0];
      v11 = (int8x8_t *)((char *)v11 + 1);
      v10->i16[0] = v13 << 8;
      v10 = (int16x8_t *)((char *)v10 + 2);
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != (_DWORD)a6);
LABEL_8:
  a4 = (__int16 *)((char *)a4 + v8);
  a5 = v10;
  if ((int)a6 < a7)
  {
LABEL_13:
    if ((int)a2 < 1)
    {
      LODWORD(a6) = a7;
    }
    else
    {
      a6 = a6;
      do
      {
        v14 = 0;
        v15 = (char *)result + *(int *)(a3 + 4 * a6) * (uint64_t)(int)a2;
        do
        {
          v16 = *a4;
          if (*a4)
            v16 *= v15[v14];
          a5->i16[0] = v16;
          v17 = a4[1];
          if (v17)
            v17 *= v15[a2 + v14];
          a5->i16[0] = v17 + v16;
          a5 = (int16x8_t *)((char *)a5 + 2);
          ++v14;
        }
        while (a2 != v14);
        ++a6;
        a4 += 2;
      }
      while ((int)a6 < a7);
    }
  }
LABEL_34:
  if ((int)a6 >= a8 || (int)a2 < 1)
    return result;
  v34 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  v35 = (unsigned __int8 *)result + v34 * (uint64_t)(int)a2;
  v36 = a2;
  if (a2 >= 0x20)
  {
    v40 = v34 * (uint64_t)(int)a2;
    v41 = 2 * a2;
    v42 = (unint64_t)result + a2 + v40;
    v43 = a2 & 0xFFFFFFE0;
    v44 = (int8x8_t *)((char *)result + v40);
    while (1)
    {
      if ((unint64_t)a5 >= v42 || v35 >= &a5->u8[v41])
      {
        v45 = (int16x8_t *)((char *)a5 + 2 * (v36 & 0xFFFFFFE0));
        v46 = a5 + 2;
        v47 = v36 & 0xFFFFFFE0;
        v48 = v44 + 2;
        do
        {
          _Q0 = *(int16x8_t *)v48[-2].i8;
          _Q1 = *(int16x8_t *)v48->i8;
          v51 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          v52 = vshll_n_s8(*v48, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v46[-2] = v51;
          v46[-1] = _Q0;
          *v46 = v52;
          v46[1] = _Q1;
          v46 += 4;
          v48 += 4;
          v47 -= 32;
        }
        while (v47);
        result = (int8x8_t *)(v36 & 0x7FFFFFE0);
        if (v43 == v36)
          goto LABEL_42;
      }
      else
      {
        result = 0;
        v45 = a5;
      }
      v53 = (int8x8_t *)((char *)result + (_QWORD)v44);
      result = (int8x8_t *)(v36 - (_QWORD)result);
      do
      {
        v54 = v53->u8[0];
        v53 = (int8x8_t *)((char *)v53 + 1);
        v45->i16[0] = v54 << 8;
        v45 = (int16x8_t *)((char *)v45 + 2);
        result = (int8x8_t *)((char *)result - 1);
      }
      while (result);
LABEL_42:
      LODWORD(a6) = a6 + 1;
      a5 = v45;
      if ((_DWORD)a6 == a8)
        return result;
    }
  }
  do
  {
    v37 = v35;
    v38 = a2;
    do
    {
      v39 = *v37++;
      a5->i16[0] = v39 << 8;
      a5 = (int16x8_t *)((char *)a5 + 2);
      --v38;
    }
    while (v38);
    LODWORD(a6) = a6 + 1;
  }
  while ((_DWORD)a6 != a8);
  return result;
}

uint64_t sub_1003389B4(uint64_t a1, int a2, unsigned int *a3, _WORD *a4)
{
  uint64_t result;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  sub_100289D28(&v15, a2);
  v14 = 0x3FE0000000000000;
  sub_10028A294(&v15, &v14, &v17);
  sub_10028A2EC((unint64_t *)a1, &v17, (unint64_t *)&v18);
  v13 = 0x3FE0000000000000;
  sub_10028A2C0((unint64_t *)&v18, &v13, (unint64_t *)&v16);
  result = sub_100289FFC(&v16);
  if ((result & 0x80000000) != 0 || (v9 = *(_DWORD *)(a1 + 8), v9 < 2))
  {
    if (*(_DWORD *)(a1 + 12) <= a2 + 1)
      v11 = a2 + 1;
    else
      v11 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v11;
  }
  else
  {
    v10 = v9 - 1;
    if (result >= v10)
    {
      *a3 = v10;
      v12 = *(_DWORD *)(a1 + 16);
      if (v12 >= a2)
        v12 = a2;
      *(_DWORD *)(a1 + 16) = v12;
    }
    else
    {
      *a3 = result;
      sub_100289D28(&v14, result);
      sub_10028A2C0((unint64_t *)&v16, &v14, &v15);
      if ((v15 & 0x8000000000000000) != 0)
      {
        result = 0;
      }
      else
      {
        sub_100289D28(&v17, 256);
        sub_10028A2EC(&v15, &v17, (unint64_t *)&v18);
        result = sub_100289F48(&v18);
      }
      a4[1] = result;
      *a4 = 256 - result;
    }
  }
  return result;
}

void sub_100338B1C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

_BYTE *sub_100338B40(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _OWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint16x8_t *v14;
  uint16x8_t v15;
  int16x8_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned __int8 v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  unsigned int v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  __int16 *v34;
  _BYTE *v35;
  unsigned int v36;
  __int16 v37;
  int8x16_t *v38;
  int16x8_t *v39;
  uint64_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int8x8_t *v45;
  uint64_t v46;
  int16x8_t *v47;
  int16x8_t v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  int32x4_t v52;
  int32x4_t v53;
  uint32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int32x4_t v87;
  int8x16_t v88;
  int16x8_t *v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int v115;
  uint16x8_t *v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  BOOL v120;
  char v121;
  BOOL v122;
  char v123;
  BOOL v124;
  uint64_t v125;
  int16x8_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int16 *v129;
  unsigned __int16 *v130;
  _BYTE *v131;
  uint16x4_t v132;
  int16x8_t v133;
  _QWORD *v134;
  uint16x8_t *v135;
  uint16x8_t *v136;
  uint64_t v137;
  uint16x8_t v138;
  uint32x4_t v139;
  uint32x4_t v140;
  uint16x8_t v141;
  int v142;
  int v143;
  int v144;
  int v145;
  unsigned int v146;
  uint16x4_t v147;
  int16x8_t v148;
  uint64_t v149;
  uint16x8_t *v150;
  uint16x8_t *v151;
  int8x16_t *v152;
  uint16x8_t v153;
  uint16x8_t v154;
  uint16x4_t v155;
  uint16x8_t v156;
  uint16x8_t v157;
  int v158;
  int v159;
  __int128 v160;
  int v161;
  __int128 v162;
  uint64_t v163;
  uint16x8_t v164;
  int16x8_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  unsigned __int8 v170;
  unint64_t v171;
  int v172;
  uint64_t v173;
  uint16x8_t v174;
  _OWORD *v175;
  uint16x8_t v176;
  uint16x8_t v177;
  unsigned int v178;
  uint64_t v179;
  BOOL v180;
  uint64_t v181;
  uint64_t v182;
  __int16 *v183;
  _BYTE *v184;
  unsigned int v185;
  __int16 v186;
  int8x16_t *v187;
  int16x8_t *v188;
  uint64_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int8x8_t *v194;
  uint64_t v195;
  int16x8_t *v196;
  int16x8_t v197;
  int v198;
  __int128 v199;
  _BYTE *result;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v208;
  _BYTE *v209;
  uint64_t v210;
  _BYTE v211[1048];
  int8x16x2_t v212;
  int8x16x4_t v213;

  v3 = 2 * *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 56);
  bzero(v211, 0x410uLL);
  v209 = v211;
  v210 = v3;
  if (v3 >= 0x209)
    operator new[]();
  LODWORD(v4) = *a2;
  v5 = *(_DWORD *)(a1 + 104);
  if (v5 <= *a2)
    v6 = *a2;
  else
    v6 = *(_DWORD *)(a1 + 104);
  if (a2[1] >= *(_DWORD *)(a1 + 108))
    v7 = *(_DWORD *)(a1 + 108);
  else
    v7 = a2[1];
  v206 = v7;
  if ((int)v4 >= v5)
  {
    v8 = 0;
    v9 = -2;
    if ((int)v4 >= v6)
    {
LABEL_11:
      if ((int)v4 < v7)
        goto LABEL_51;
LABEL_12:
      v10 = v209;
      v11 = *(int *)(a1 + 28);
      if (v9 + 2 <= (int)v11)
        goto LABEL_130;
      goto LABEL_13;
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _BYTE *, _QWORD, _QWORD, _QWORD))(a1 + 112))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), v211, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    LODWORD(v4) = *a2;
    v8 = 1;
    v9 = -1;
    v7 = v206;
    if (*a2 >= v6)
      goto LABEL_11;
  }
  v4 = (int)v4;
  v14 = (uint16x8_t *)&unk_1004AE000;
  v15.i64[0] = 0x7000700070007;
  v15.i64[1] = 0x7000700070007;
  v16 = 0uLL;
  do
  {
    v17 = v209;
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(_QWORD *)(a1 + 40);
    v20 = *(_DWORD *)(a1 + 48);
    v21 = *(_DWORD *)(a1 + 56);
    v22 = atomic_load((unsigned __int8 *)&qword_1004AEFD0);
    if ((v22 & 1) == 0)
    {
      v202 = v9;
      v49 = __cxa_guard_acquire(&qword_1004AEFD0);
      v16 = 0uLL;
      v15.i64[0] = 0x7000700070007;
      v15.i64[1] = 0x7000700070007;
      v14 = (uint16x8_t *)&unk_1004AE000;
      *(_QWORD *)&v50 = 0x80008000800080;
      *((_QWORD *)&v50 + 1) = 0x80008000800080;
      v7 = v206;
      v9 = v202;
      if (v49)
      {
        xmmword_1004AEFF0 = v50;
        __cxa_guard_release(&qword_1004AEFD0);
        v16 = 0uLL;
        v15.i64[0] = 0x7000700070007;
        v15.i64[1] = 0x7000700070007;
        v14 = (uint16x8_t *)&unk_1004AE000;
        v7 = v206;
        v9 = v202;
      }
    }
    v23 = v18 + v19 * v4;
    v24 = v21 * v20;
    if (v21 * v20 < 16)
    {
      v29 = 0;
      if (v24 <= 0)
        goto LABEL_19;
    }
    else
    {
      v25 = 0;
      v26 = v14[255];
      do
      {
        v27 = *(uint16x8_t *)v17;
        v28 = *((uint16x8_t *)v17 + 1);
        v17 += 2;
        *(uint8x16_t *)(v23 + v25) = vqmovn_high_u16(vqmovn_u16(vshlq_u16(vqaddq_u16(v27, v26), v15)), vshlq_u16(vqaddq_u16(v28, v26), v15));
        v25 += 16;
      }
      while ((int)v25 < v24 - 15);
      v29 = v24 & 0xFFFFFFF0;
      v23 += v25;
      if ((int)(v24 & 0xFFFFFFF0) >= v24)
        goto LABEL_19;
    }
    v30 = v24 + ~v29;
    if (v30 < 7
      || (v23 < (unint64_t)v17 + 2 * v30 + 2 ? (v31 = (unint64_t)v17 >= v23 + v30 + 1) : (v31 = 1), !v31))
    {
      v34 = (__int16 *)v17;
      v35 = (_BYTE *)v23;
      goto LABEL_36;
    }
    v32 = v30 + 1;
    if (v30 >= 0x1F)
    {
      v33 = v32 & 0x1FFFFFFE0;
      v38 = (int8x16_t *)(v23 + 16);
      v39 = (int16x8_t *)(v17 + 2);
      v40 = v32 & 0x1FFFFFFE0;
      do
      {
        v42 = v39[-2];
        v41 = v39[-1];
        v44 = *v39;
        v43 = v39[1];
        v39 += 4;
        v38[-1] = vraddhn_high_s16(vraddhn_s16(v42, v16), v41, v16);
        *v38 = vraddhn_high_s16(vraddhn_s16(v44, v16), v43, v16);
        v38 += 2;
        v40 -= 32;
      }
      while (v40);
      if (v32 == v33)
        goto LABEL_19;
      if ((v32 & 0x18) == 0)
      {
        v35 = (_BYTE *)(v23 + v33);
        v34 = (__int16 *)v17 + v33;
        v29 += v33;
LABEL_36:
        v36 = v24 - v29;
        do
        {
          v37 = *v34++;
          *v35++ = (unsigned __int16)(v37 + 128) >> 8;
          --v36;
        }
        while (v36);
        goto LABEL_19;
      }
    }
    else
    {
      v33 = 0;
    }
    v29 += v32 & 0xFFFFFFF8;
    v34 = (__int16 *)v17 + (v32 & 0x1FFFFFFF8);
    v35 = (_BYTE *)(v23 + (v32 & 0x1FFFFFFF8));
    v45 = (int8x8_t *)(v23 + v33);
    v46 = v33 - (v32 & 0x1FFFFFFF8);
    v47 = (int16x8_t *)((char *)v17 + 2 * v33);
    do
    {
      v48 = *v47++;
      *v45++ = vraddhn_s16(v48, v16);
      v46 += 8;
    }
    while (v46);
    if (v32 != (v32 & 0x1FFFFFFF8))
      goto LABEL_36;
LABEL_19:
    ++v4;
  }
  while (v6 != (_DWORD)v4);
  LODWORD(v4) = v6;
  if (v6 >= v7)
    goto LABEL_12;
LABEL_51:
  v51 = (int)v4;
  v52.i64[0] = 0x800000008000;
  v52.i64[1] = 0x800000008000;
  v53.i64[0] = 0xF0000000FLL;
  v53.i64[1] = 0xF0000000FLL;
  v54.i64[0] = 0xFF000000FFLL;
  v54.i64[1] = 0xFF000000FFLL;
  v55 = (int8x16_t)xmmword_1003BC970;
  v56 = (int8x16_t)xmmword_1003BC960;
  while (2)
  {
    v57 = v9;
    v58 = *(_QWORD *)(a1 + 72);
    v59 = v9 + 2;
    v9 = *(_DWORD *)(v58 + 4 * v51);
    if (v9 <= v59)
      v60 = v59;
    else
      v60 = *(_DWORD *)(v58 + 4 * v51);
    v61 = v9 + 2;
    v62 = *(_DWORD *)(a1 + 28);
    if (v62 < v9 + 2)
      v61 = *(_DWORD *)(a1 + 28);
    if (v60 < v61)
    {
      v63 = v60;
      do
      {
        (*(void (**)(uint64_t))(a1 + 112))(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v63++);
        v9 = *(_DWORD *)(v58 + 4 * v51);
        v8 = (v8 & 1) == 0;
        v64 = v9 + 2;
        v62 = *(_DWORD *)(a1 + 28);
        if (v62 < v9 + 2)
          v64 = *(_DWORD *)(a1 + 28);
      }
      while (v63 < v64);
      v7 = v206;
      v52.i64[0] = 0x800000008000;
      v52.i64[1] = 0x800000008000;
      v53.i64[0] = 0xF0000000FLL;
      v53.i64[1] = 0xF0000000FLL;
      v54.i64[0] = 0xFF000000FFLL;
      v54.i64[1] = 0xFF000000FFLL;
      v56 = (int8x16_t)xmmword_1003BC960;
      v55 = (int8x16_t)xmmword_1003BC970;
    }
    v65 = v62 - 2;
    if (v9 <= v65)
      v66 = v65;
    else
      v66 = v9;
    v67 = v66 + v8;
    if (v57 > v65)
      v65 = v57;
    v68 = v67 - v65;
    v208 = 0;
    if (v68 >= 0)
      v8 = v68 & 1;
    else
      v8 = -(v68 & 1);
    v69 = *(_QWORD *)(a1 + 88);
    v70 = 2 * v51;
    if (v8 < 1)
    {
      v71 = 0;
      v72 = 0;
    }
    else
    {
      v71 = *(_WORD *)(v69 + 2 * (v70 | 1));
      v72 = 1;
    }
    LOWORD(v208) = v71;
    v73 = v70 - v8;
    *(_WORD *)((unint64_t)&v208 | (2 * v72)) = *(_WORD *)(v69 + 2 * (v72 + v73));
    if (v8 <= 0)
      HIWORD(v208) = *(_WORD *)(v69 + 2 * v73 + 2);
    v74 = v209;
    v75 = *(_DWORD *)(a1 + 48);
    v76 = *(_DWORD *)(a1 + 56);
    v77 = *(_QWORD *)(a1 + 32);
    v78 = *(_QWORD *)(a1 + 40);
    v79 = atomic_load((unsigned __int8 *)&qword_1004AEFD8);
    if ((v79 & 1) == 0)
    {
      v203 = v9;
      v158 = __cxa_guard_acquire(&qword_1004AEFD8);
      v56 = (int8x16_t)xmmword_1003BC960;
      v55 = (int8x16_t)xmmword_1003BC970;
      v54.i64[0] = 0xFF000000FFLL;
      v54.i64[1] = 0xFF000000FFLL;
      v53.i64[0] = 0xF0000000FLL;
      v53.i64[1] = 0xF0000000FLL;
      v52.i64[0] = 0x800000008000;
      v52.i64[1] = 0x800000008000;
      v7 = v206;
      v9 = v203;
      if (v158)
      {
        xmmword_1004AF000 = (__int128)v52;
        __cxa_guard_release(&qword_1004AEFD8);
        v56 = (int8x16_t)xmmword_1003BC960;
        v55 = (int8x16_t)xmmword_1003BC970;
        v54.i64[0] = 0xFF000000FFLL;
        v54.i64[1] = 0xFF000000FFLL;
        v53.i64[0] = 0xF0000000FLL;
        v53.i64[1] = 0xF0000000FLL;
        v52.i64[0] = 0x800000008000;
        v52.i64[1] = 0x800000008000;
        v7 = v206;
        v9 = v203;
      }
    }
    v80 = atomic_load((unsigned __int8 *)&qword_1004AEFE0);
    if ((v80 & 1) == 0)
    {
      v204 = v9;
      v159 = __cxa_guard_acquire(&qword_1004AEFE0);
      v56 = (int8x16_t)xmmword_1003BC960;
      v55 = (int8x16_t)xmmword_1003BC970;
      v54.i64[0] = 0xFF000000FFLL;
      v54.i64[1] = 0xFF000000FFLL;
      v53.i64[0] = 0xF0000000FLL;
      v53.i64[1] = 0xF0000000FLL;
      v52.i64[0] = 0x800000008000;
      v52.i64[1] = 0x800000008000;
      v7 = v206;
      v9 = v204;
      if (v159)
      {
        *(_QWORD *)&v160 = 0x8000800080008000;
        *((_QWORD *)&v160 + 1) = 0x8000800080008000;
        xmmword_1004AF010 = v160;
        __cxa_guard_release(&qword_1004AEFE0);
        v56 = (int8x16_t)xmmword_1003BC960;
        v55 = (int8x16_t)xmmword_1003BC970;
        v54.i64[0] = 0xFF000000FFLL;
        v54.i64[1] = 0xFF000000FFLL;
        v53.i64[0] = 0xF0000000FLL;
        v53.i64[1] = 0xF0000000FLL;
        v52.i64[0] = 0x800000008000;
        v52.i64[1] = 0x800000008000;
        v7 = v206;
        v9 = v204;
      }
    }
    v81 = atomic_load((unsigned __int8 *)&qword_1004AEFE8);
    if ((v81 & 1) == 0)
    {
      v205 = v9;
      v161 = __cxa_guard_acquire(&qword_1004AEFE8);
      v56 = (int8x16_t)xmmword_1003BC960;
      v55 = (int8x16_t)xmmword_1003BC970;
      v54.i64[0] = 0xFF000000FFLL;
      v54.i64[1] = 0xFF000000FFLL;
      v53.i64[0] = 0xF0000000FLL;
      v53.i64[1] = 0xF0000000FLL;
      v52.i64[0] = 0x800000008000;
      v52.i64[1] = 0x800000008000;
      v7 = v206;
      v9 = v205;
      if (v161)
      {
        *(_QWORD *)&v162 = 0x8080808080808080;
        *((_QWORD *)&v162 + 1) = 0x8080808080808080;
        xmmword_1004AF020 = v162;
        __cxa_guard_release(&qword_1004AEFE8);
        v56 = (int8x16_t)xmmword_1003BC960;
        v55 = (int8x16_t)xmmword_1003BC970;
        v54.i64[0] = 0xFF000000FFLL;
        v54.i64[1] = 0xFF000000FFLL;
        v53.i64[0] = 0xF0000000FLL;
        v53.i64[1] = 0xF0000000FLL;
        v52.i64[0] = 0x800000008000;
        v52.i64[1] = 0x800000008000;
        v7 = v206;
        v9 = v205;
      }
    }
    v82 = v76 * v75;
    v83 = v77 + v78 * v51;
    if ((int)v82 < 16)
    {
      v115 = 0;
      v116 = (uint16x8_t *)((char *)v74 + 2 * v82);
      if ((int)v82 <= 0)
        goto LABEL_52;
LABEL_86:
      v117 = HIWORD(v208);
      v118 = (v82 + ~v115);
      if (v118 < 7
        || ((v119 = v83 + v118 + 1, v83 < (unint64_t)v74 + 2 * v118 + 2)
          ? (v120 = (unint64_t)v74 >= v119)
          : (v120 = 1),
            v120 ? (v121 = 0) : (v121 = 1),
            v83 < (unint64_t)&v208 + 2 ? (v122 = (unint64_t)&v208 >= v119) : (v122 = 1),
            v122 ? (v123 = 0) : (v123 = 1),
            (unint64_t)v116 < v119 ? (v124 = v83 >= (unint64_t)v116->u64 + 2 * v118 + 2) : (v124 = 1),
            !v124 || (v121 & 1) != 0 || (v123 & 1) != 0))
      {
        v129 = (unsigned __int16 *)v116;
        v130 = (unsigned __int16 *)v74;
        v131 = (_BYTE *)v83;
      }
      else
      {
        v125 = v118 + 1;
        v126 = vdupq_n_s16(HIWORD(v208));
        if (v118 < 0xF)
        {
          v127 = 0;
LABEL_108:
          v128 = v125 & 0x1FFFFFFF8;
          v129 = &v116->u16[v128];
          v115 += v125 & 0xFFFFFFF8;
          v130 = (unsigned __int16 *)((char *)v74 + v128 * 2);
          v131 = (_BYTE *)(v83 + (v125 & 0x1FFFFFFF8));
          v132 = (uint16x4_t)vld1_dup_s16((const __int16 *)&v208);
          v133 = (int16x8_t)vmovl_u16(v132);
          v134 = (_QWORD *)(v83 + v127);
          v135 = (uint16x8_t *)((char *)v74 + 2 * v127);
          v136 = (uint16x8_t *)((char *)v116 + 2 * v127);
          v137 = v127 - (v125 & 0x1FFFFFFF8);
          do
          {
            v138 = *v135++;
            v139 = vmull_high_u16((uint16x8_t)vuzp1q_s16(v126, v133), v138);
            v140 = vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)v133), *(uint16x4_t *)v138.i8);
            v141 = *v136++;
            v212.val[1] = (int8x16_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(v139, (uint16x8_t)v126, v141), v52), 0x10uLL), v54);
            v212.val[0] = (int8x16_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(v140, *(uint16x4_t *)v126.i8, *(uint16x4_t *)v141.i8), v52), 0x10uLL), v54);
            *v134++ = vqtbl2q_s8(v212, v55).u64[0];
            v137 += 8;
          }
          while (v137);
          if (v125 == (v125 & 0x1FFFFFFF8))
            goto LABEL_52;
          goto LABEL_113;
        }
        v147 = (uint16x4_t)vld1_dup_s16((const __int16 *)&v208);
        v127 = v125 & 0x1FFFFFFF0;
        v148 = (int16x8_t)vmovl_u16(v147);
        v149 = v125 & 0x1FFFFFFF0;
        v150 = v116;
        v151 = (uint16x8_t *)v74;
        v152 = (int8x16_t *)v83;
        do
        {
          v153 = *v151;
          v154 = v151[1];
          v151 += 2;
          v155 = (uint16x4_t)vmovn_s32((int32x4_t)v148);
          v157 = *v150;
          v156 = v150[1];
          v150 += 2;
          v213.val[1] = (int8x16_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16((uint16x8_t)vuzp1q_s16(v126, v148), v153), (uint16x8_t)v126, v157), v52), 0x10uLL), v54);
          v213.val[0] = (int8x16_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(v155, *(uint16x4_t *)v153.i8), *(uint16x4_t *)v126.i8, *(uint16x4_t *)v157.i8), v52), 0x10uLL), v54);
          v213.val[2] = (int8x16_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(v155, *(uint16x4_t *)v154.i8), *(uint16x4_t *)v126.i8, *(uint16x4_t *)v156.i8), v52), 0x10uLL), v54);
          v213.val[3] = (int8x16_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16((uint16x8_t)vuzp1q_s16(v126, v148), v154), (uint16x8_t)v126, v156), v52), 0x10uLL), v54);
          *v152++ = vqtbl4q_s8(v213, v56);
          v149 -= 16;
        }
        while (v149);
        if (v125 == v127)
          goto LABEL_52;
        if ((v125 & 8) != 0)
          goto LABEL_108;
        v131 = (_BYTE *)(v83 + v127);
        v130 = (unsigned __int16 *)v74 + v127;
        v115 += v127;
        v129 = (unsigned __int16 *)v116 + v127;
      }
LABEL_113:
      v142 = v82 - v115;
      do
      {
        v144 = *v130++;
        v143 = v144;
        v145 = *v129++;
        v146 = (v117 * v145 + (unsigned __int16)v208 * v143 + 0x8000) >> 16;
        if (v146 >= 0xFF)
          LOBYTE(v146) = -1;
        *v131++ = v146;
        --v142;
      }
      while (v142);
      goto LABEL_52;
    }
    v84 = 0;
    v85 = (int16x8_t)vld1q_dup_f32((const float *)&v208);
    v87 = (int32x4_t)xmmword_1004AF000;
    v86 = (int16x8_t)xmmword_1004AF010;
    v88 = (int8x16_t)xmmword_1004AF020;
    do
    {
      v89 = (int16x8_t *)((char *)v74 + 2 * v82);
      v90 = *(int16x8_t *)v74;
      v91 = *((int16x8_t *)v74 + 1);
      v74 += 2;
      v92 = vaddq_s16(v86, v90);
      v93 = vaddq_s16(v86, *v89);
      v94 = vzip1q_s16(v92, v93);
      v95 = vzip2q_s16(v92, v93);
      v96 = vmull_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v85.i8);
      v97 = vmull_high_s16(v94, v85);
      v98 = vuzp1q_s32(v96, v97);
      v99 = vuzp2q_s32(v96, v97);
      v100 = vmull_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v85.i8);
      v101 = vmull_high_s16(v95, v85);
      v102 = vuzp1q_s32(v100, v101);
      v103 = vaddq_s32(v98, v99);
      v104 = vuzp2q_s32(v100, v101);
      v105 = vaddq_s16(v91, v86);
      v106 = vaddq_s16(v89[1], v86);
      v107 = vzip1q_s16(v105, v106);
      v108 = vzip2q_s16(v105, v106);
      v109 = vmull_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v85.i8);
      v110 = vmull_high_s16(v107, v85);
      v111 = vuzp1q_s32(v109, v110);
      v112 = vuzp2q_s32(v109, v110);
      v113 = vmull_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v85.i8);
      v114 = vmull_high_s16(v108, v85);
      *(int8x16_t *)(v83 + v84) = vsubq_s8(vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32(v103, v87), v53)), vshlq_s32(vaddq_s32(vaddq_s32(v102, v104), v87), v53))), vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32(vaddq_s32(v111, v112), v87), v53)), vshlq_s32(vaddq_s32(vaddq_s32(vuzp1q_s32(v113, v114), vuzp2q_s32(v113, v114)), v87), v53))), v88);
      v84 += 16;
    }
    while ((int)v84 < (int)v82 - 15);
    v115 = v82 & 0x7FFFFFF0;
    v116 = (uint16x8_t *)((char *)v74 + 2 * v82);
    v83 += v84;
    if ((v82 & 0xFFFFFFF0) < (int)v82)
      goto LABEL_86;
LABEL_52:
    if (v7 != (_DWORD)++v51)
      continue;
    break;
  }
  LODWORD(v4) = v7;
  v10 = v209;
  v11 = *(int *)(a1 + 28);
  if (v9 + 2 <= (int)v11)
  {
LABEL_130:
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _OWORD *, _QWORD, _QWORD, _QWORD))(a1 + 112))(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * (v11 - 1), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), v10, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    goto LABEL_131;
  }
LABEL_13:
  v12 = v8 + ~v9 + v11;
  if (v12 >= 0)
    v13 = v12 & 1;
  else
    v13 = -(v12 & 1);
  v10 = (_OWORD *)((char *)v10 + 2 * *(_DWORD *)(a1 + 48) * v13 * *(_DWORD *)(a1 + 56));
LABEL_131:
  if ((int)v4 < a2[1])
  {
    v163 = (int)v4;
    v164.i64[0] = 0x7000700070007;
    v164.i64[1] = 0x7000700070007;
    v165 = 0uLL;
    while (1)
    {
      v166 = *(_QWORD *)(a1 + 32);
      v167 = *(_QWORD *)(a1 + 40);
      v168 = *(_DWORD *)(a1 + 48);
      v169 = *(_DWORD *)(a1 + 56);
      v170 = atomic_load((unsigned __int8 *)&qword_1004AEFD0);
      if ((v170 & 1) == 0)
      {
        v198 = __cxa_guard_acquire(&qword_1004AEFD0);
        v165 = 0uLL;
        v164.i64[0] = 0x7000700070007;
        v164.i64[1] = 0x7000700070007;
        *(_QWORD *)&v199 = 0x80008000800080;
        *((_QWORD *)&v199 + 1) = 0x80008000800080;
        if (v198)
        {
          xmmword_1004AEFF0 = v199;
          __cxa_guard_release(&qword_1004AEFD0);
          v165 = 0uLL;
          v164.i64[0] = 0x7000700070007;
          v164.i64[1] = 0x7000700070007;
        }
      }
      v171 = v166 + v167 * v163;
      v172 = v169 * v168;
      if (v169 * v168 >= 16)
        break;
      v178 = 0;
      v175 = v10;
      if (v172 > 0)
        goto LABEL_141;
LABEL_133:
      if (++v163 >= a2[1])
        goto LABEL_164;
    }
    v173 = 0;
    v174 = (uint16x8_t)xmmword_1004AEFF0;
    v175 = v10;
    do
    {
      v176 = *(uint16x8_t *)v175;
      v177 = *((uint16x8_t *)v175 + 1);
      v175 += 2;
      *(uint8x16_t *)(v171 + v173) = vqmovn_high_u16(vqmovn_u16(vshlq_u16(vqaddq_u16(v176, v174), v164)), vshlq_u16(vqaddq_u16(v177, v174), v164));
      v173 += 16;
    }
    while ((int)v173 < v172 - 15);
    v178 = v172 & 0xFFFFFFF0;
    v171 += v173;
    if ((int)(v172 & 0xFFFFFFF0) >= v172)
      goto LABEL_133;
LABEL_141:
    v179 = v172 + ~v178;
    if (v179 < 7
      || (v171 < (unint64_t)v175 + 2 * v179 + 2 ? (v180 = (unint64_t)v175 >= v171 + v179 + 1) : (v180 = 1),
          !v180))
    {
      v183 = (__int16 *)v175;
      v184 = (_BYTE *)v171;
      goto LABEL_150;
    }
    v181 = v179 + 1;
    if (v179 >= 0x1F)
    {
      v182 = v181 & 0x1FFFFFFE0;
      v187 = (int8x16_t *)(v171 + 16);
      v188 = (int16x8_t *)(v175 + 2);
      v189 = v181 & 0x1FFFFFFE0;
      do
      {
        v191 = v188[-2];
        v190 = v188[-1];
        v193 = *v188;
        v192 = v188[1];
        v188 += 4;
        v187[-1] = vraddhn_high_s16(vraddhn_s16(v191, v165), v190, v165);
        *v187 = vraddhn_high_s16(vraddhn_s16(v193, v165), v192, v165);
        v187 += 2;
        v189 -= 32;
      }
      while (v189);
      if (v181 == v182)
        goto LABEL_133;
      if ((v181 & 0x18) == 0)
      {
        v184 = (_BYTE *)(v171 + v182);
        v183 = (__int16 *)v175 + v182;
        v178 += v182;
LABEL_150:
        v185 = v172 - v178;
        do
        {
          v186 = *v183++;
          *v184++ = (unsigned __int16)(v186 + 128) >> 8;
          --v185;
        }
        while (v185);
        goto LABEL_133;
      }
    }
    else
    {
      v182 = 0;
    }
    v178 += v181 & 0xFFFFFFF8;
    v183 = (__int16 *)v175 + (v181 & 0x1FFFFFFF8);
    v184 = (_BYTE *)(v171 + (v181 & 0x1FFFFFFF8));
    v194 = (int8x8_t *)(v171 + v182);
    v195 = v182 - (v181 & 0x1FFFFFFF8);
    v196 = (int16x8_t *)((char *)v175 + 2 * v182);
    do
    {
      v197 = *v196++;
      *v194++ = vraddhn_s16(v197, v165);
      v195 += 8;
    }
    while (v195);
    if (v181 == (v181 & 0x1FFFFFFF8))
      goto LABEL_133;
    goto LABEL_150;
  }
LABEL_164:
  result = v209;
  if (v209 != v211 && v209 != 0)
    operator delete[]();
  return result;
}

void sub_100339788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20 != a11)
  {
    if (a20)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

char *sub_1003397C4(char *result, uint64_t a2, uint64_t a3, int *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  int32x4_t v11;
  int32x4_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  int32x4_t v25;
  int32x4_t *v26;
  uint64_t v27;
  int v28;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_15;
    goto LABEL_12;
  }
  v8 = *result << 16;
  if (a6 < 8)
  {
    LODWORD(v9) = 0;
    v10 = (unsigned int *)a5;
LABEL_9:
    v14 = a6 - v9;
    do
    {
      *v10++ = v8;
      --v14;
    }
    while (v14);
    goto LABEL_11;
  }
  v9 = a6 & 0xFFFFFFF8;
  v10 = (unsigned int *)a5 + v9;
  v11 = vdupq_n_s32(v8);
  v12 = a5 + 1;
  v13 = v9;
  do
  {
    v12[-1] = v11;
    *v12 = v11;
    v12 += 2;
    v13 -= 8;
  }
  while (v13);
  if (v9 != a6)
    goto LABEL_9;
LABEL_11:
  a4 += 2 * (a6 - 1) + 2;
  a5 = (int32x4_t *)v10;
  if (a6 >= a7)
    goto LABEL_15;
LABEL_12:
  v15 = a7 - (unint64_t)a6;
  v16 = (int *)(a3 + 4 * a6);
  do
  {
    v17 = *v16++;
    v18 = *a4;
    v19 = a4[1];
    a4 += 2;
    a5->i32[0] = v18 * result[v17] + v19 * result[v17 + 1];
    a5 = (int32x4_t *)((char *)a5 + 4);
    --v15;
  }
  while (v15);
  a6 = a7;
LABEL_15:
  if (a6 >= a8)
    return result;
  v20 = result[*(int *)(a3 + 4 * (a8 - 1))] << 16;
  v21 = (~a6 + a8);
  if (v21 < 7)
  {
    v22 = (unsigned int *)a5;
LABEL_21:
    v28 = a8 - a6;
    do
    {
      *v22++ = v20;
      --v28;
    }
    while (v28);
    return result;
  }
  v23 = v21 + 1;
  v24 = (v21 + 1) & 0x1FFFFFFF8;
  a6 += v24;
  v22 = (unsigned int *)a5 + v24;
  v25 = vdupq_n_s32(v20);
  v26 = a5 + 1;
  v27 = v24;
  do
  {
    v26[-1] = v25;
    *v26 = v25;
    v26 += 2;
    v27 -= 8;
  }
  while (v27);
  if (v23 != v24)
    goto LABEL_21;
  return result;
}

int8x16_t *sub_100339900(int8x16_t *result, unsigned int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, int a8)
{
  uint64_t v8;
  int v9;
  char *v10;
  int8x16_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int8x16_t *v29;
  char *v30;
  int32x4_t *v31;
  uint64_t v32;
  int8x16_t *v33;
  int8x16_t v34;
  int32x4_t v39;
  int32x4_t v44;
  int32x4_t v45;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int32x4_t *v51;
  uint64_t v52;
  int8x16_t *v53;
  int8x16_t v54;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  uint64_t v63;
  char *v64;
  int v65;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_23;
    goto LABEL_13;
  }
  v8 = 8 * (a6 - 1) + 8;
  if ((int)a2 <= 0)
  {
    a4 = (int *)((char *)a4 + v8);
    if (a6 >= a7)
      goto LABEL_23;
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    v49 = 0;
    while (1)
    {
      if (a5 >= &result->i8[a2] || &a5[4 * a2] <= (char *)result)
      {
        v10 = &a5[4 * (a2 & 0xFFFFFFE0)];
        v51 = (int32x4_t *)(a5 + 64);
        v52 = a2 & 0xFFFFFFE0;
        v53 = result + 1;
        do
        {
          v54 = v53[-1];
          _Q2 = vmovl_high_s8(v54);
          _Q0 = vmovl_s8(*(int8x8_t *)v54.i8);
          _Q3 = vmovl_high_s8(*v53);
          _Q1 = vmovl_s8(*(int8x8_t *)v53->i8);
          v59 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v51[-2] = v59;
          v51[-1] = (int32x4_t)_Q2;
          v60 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v61 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-4] = v60;
          v51[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v51[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v51[3] = _Q0;
          *v51 = v61;
          v51[1] = (int32x4_t)_Q1;
          v51 += 8;
          v53 += 2;
          v52 -= 32;
        }
        while (v52);
        v50 = a2 & 0xFFFFFFE0;
        if (v50 == a2)
          goto LABEL_42;
      }
      else
      {
        v50 = 0;
        v10 = a5;
      }
      v63 = a2 - v50;
      v64 = &result->i8[v50];
      do
      {
        v65 = *v64++;
        *(_DWORD *)v10 = v65 << 16;
        v10 += 4;
        --v63;
      }
      while (v63);
LABEL_42:
      ++v49;
      a5 = v10;
      if (v49 == a6)
        goto LABEL_8;
    }
  }
  v9 = 0;
  v10 = a5;
  do
  {
    v11 = result;
    v12 = a2;
    do
    {
      v13 = v11->i8[0];
      v11 = (int8x16_t *)((char *)v11 + 1);
      *(_DWORD *)v10 = v13 << 16;
      v10 += 4;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (int *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      v14 = a6;
      do
      {
        v15 = 0;
        v16 = &result->i8[*(int *)(a3 + 4 * v14) * (uint64_t)(int)a2];
        do
        {
          v17 = *a4;
          if (*a4)
            v17 *= v16[v15];
          *(_DWORD *)a5 = v17;
          v18 = a4[1];
          if (v18)
            v18 *= v16[a2 + v15];
          *(_DWORD *)a5 = v18 + v17;
          a5 += 4;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8)
    return result;
  v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  v20 = &result->i8[v19 * (uint64_t)(int)a2];
  v21 = a2;
  if (a2 >= 0x20)
  {
    v25 = v19 * (uint64_t)(int)a2;
    v26 = 4 * a2;
    v27 = &result->i8[a2 + v25];
    v28 = a2 & 0xFFFFFFE0;
    v29 = (int8x16_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        v30 = &a5[4 * (v21 & 0xFFFFFFE0)];
        v31 = (int32x4_t *)(a5 + 64);
        v32 = v21 & 0xFFFFFFE0;
        v33 = v29 + 1;
        do
        {
          v34 = v33[-1];
          _Q2 = vmovl_high_s8(v34);
          _Q0 = vmovl_s8(*(int8x8_t *)v34.i8);
          _Q3 = vmovl_high_s8(*v33);
          _Q1 = vmovl_s8(*(int8x8_t *)v33->i8);
          v39 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v31[-2] = v39;
          v31[-1] = (int32x4_t)_Q2;
          v44 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v45 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v31[-4] = v44;
          v31[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v31[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v31[3] = _Q0;
          *v31 = v45;
          v31[1] = (int32x4_t)_Q1;
          v31 += 8;
          v33 += 2;
          v32 -= 32;
        }
        while (v32);
        result = (int8x16_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21)
          goto LABEL_31;
      }
      else
      {
        result = 0;
        v30 = a5;
      }
      v47 = v21 - (_QWORD)result;
      result = (int8x16_t *)((char *)result + (_QWORD)v29);
      do
      {
        v48 = result->i8[0];
        result = (int8x16_t *)((char *)result + 1);
        *(_DWORD *)v30 = v48 << 16;
        v30 += 4;
        --v47;
      }
      while (v47);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8)
        return result;
    }
  }
  do
  {
    v22 = v20;
    v23 = a2;
    do
    {
      v24 = *v22++;
      *(_DWORD *)a5 = v24 << 16;
      a5 += 4;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

char *sub_100339C10(char *result, uint64_t a2, uint64_t a3, int *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t *v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  int32x4_t *v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t *v39;
  uint64_t v40;
  int v41;

  if (a6 >= 1)
  {
    v8 = *result << 16;
    v9 = result[1] << 16;
    if (a6 >= 8)
    {
      v10 = a6 & 0xFFFFFFF8;
      v11 = (unsigned int *)a5 + 2 * v10;
      v12 = vdupq_n_s32(v8);
      v13 = vdupq_n_s32(v9);
      v14 = vzip2q_s32(v12, v13);
      v15 = vzip1q_s32(v12, v13);
      v16 = a5 + 2;
      v17 = v10;
      do
      {
        v16[-2] = v15;
        v16[-1] = v14;
        *v16 = v15;
        v16[1] = v14;
        v16 += 4;
        v17 -= 8;
      }
      while (v17);
      if (v10 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = (int32x4_t *)v11;
        if (a6 < a7)
          goto LABEL_14;
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v10) = 0;
      v11 = (unsigned int *)a5;
    }
    v18 = a6 - v10;
    do
    {
      v19 = v11 + 2;
      *v11 = v8;
      v11[1] = v9;
      v11 += 2;
      --v18;
    }
    while (v18);
    v11 = v19;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    v20 = a7 - (unint64_t)a6;
    v21 = (int *)(a3 + 4 * a6);
    do
    {
      v22 = *v21++;
      v23 = &result[2 * v22];
      a5->i32[0] = *a4 * *v23 + a4[1] * v23[2];
      v24 = *a4;
      v25 = a4[1];
      a4 += 2;
      v26 = v24 * v23[1] + v25 * v23[3];
      v27 = (int32x4_t *)&a5->u64[1];
      a5->i32[1] = v26;
      a5 = (int32x4_t *)((char *)a5 + 8);
      --v20;
    }
    while (v20);
    a5 = v27;
    if (a7 >= a8)
      return result;
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8)
    return result;
LABEL_17:
  v28 = &result[2 * *(int *)(a3 + 4 * (a8 - 1))];
  v29 = *v28 << 16;
  v30 = v28[1] << 16;
  v31 = (~a7 + a8);
  if (v31 < 7)
  {
    v32 = (unsigned int *)a5;
LABEL_22:
    v41 = a8 - a7;
    do
    {
      *v32 = v29;
      v32[1] = v30;
      v32 += 2;
      --v41;
    }
    while (v41);
    return result;
  }
  v33 = v31 + 1;
  v34 = (v31 + 1) & 0x1FFFFFFF8;
  a7 += v34;
  v32 = (unsigned int *)a5 + 2 * v34;
  v35 = vdupq_n_s32(v29);
  v36 = vdupq_n_s32(v30);
  v37 = vzip2q_s32(v35, v36);
  v38 = vzip1q_s32(v35, v36);
  v39 = a5 + 2;
  v40 = v34;
  do
  {
    v39[-2] = v38;
    v39[-1] = v37;
    *v39 = v38;
    v39[1] = v37;
    v39 += 4;
    v40 -= 8;
  }
  while (v40);
  if (v33 != v34)
    goto LABEL_22;
  return result;
}

int8x16_t *sub_100339DB0(int8x16_t *result, unsigned int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, int a8)
{
  uint64_t v8;
  int v9;
  char *v10;
  int8x16_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int8x16_t *v29;
  char *v30;
  int32x4_t *v31;
  uint64_t v32;
  int8x16_t *v33;
  int8x16_t v34;
  int32x4_t v39;
  int32x4_t v44;
  int32x4_t v45;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int32x4_t *v51;
  uint64_t v52;
  int8x16_t *v53;
  int8x16_t v54;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  uint64_t v63;
  char *v64;
  int v65;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_23;
    goto LABEL_13;
  }
  v8 = 8 * (a6 - 1) + 8;
  if ((int)a2 <= 0)
  {
    a4 = (int *)((char *)a4 + v8);
    if (a6 >= a7)
      goto LABEL_23;
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    v49 = 0;
    while (1)
    {
      if (a5 >= &result->i8[a2] || &a5[4 * a2] <= (char *)result)
      {
        v10 = &a5[4 * (a2 & 0xFFFFFFE0)];
        v51 = (int32x4_t *)(a5 + 64);
        v52 = a2 & 0xFFFFFFE0;
        v53 = result + 1;
        do
        {
          v54 = v53[-1];
          _Q2 = vmovl_high_s8(v54);
          _Q0 = vmovl_s8(*(int8x8_t *)v54.i8);
          _Q3 = vmovl_high_s8(*v53);
          _Q1 = vmovl_s8(*(int8x8_t *)v53->i8);
          v59 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v51[-2] = v59;
          v51[-1] = (int32x4_t)_Q2;
          v60 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v61 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-4] = v60;
          v51[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v51[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v51[3] = _Q0;
          *v51 = v61;
          v51[1] = (int32x4_t)_Q1;
          v51 += 8;
          v53 += 2;
          v52 -= 32;
        }
        while (v52);
        v50 = a2 & 0xFFFFFFE0;
        if (v50 == a2)
          goto LABEL_42;
      }
      else
      {
        v50 = 0;
        v10 = a5;
      }
      v63 = a2 - v50;
      v64 = &result->i8[v50];
      do
      {
        v65 = *v64++;
        *(_DWORD *)v10 = v65 << 16;
        v10 += 4;
        --v63;
      }
      while (v63);
LABEL_42:
      ++v49;
      a5 = v10;
      if (v49 == a6)
        goto LABEL_8;
    }
  }
  v9 = 0;
  v10 = a5;
  do
  {
    v11 = result;
    v12 = a2;
    do
    {
      v13 = v11->i8[0];
      v11 = (int8x16_t *)((char *)v11 + 1);
      *(_DWORD *)v10 = v13 << 16;
      v10 += 4;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (int *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      v14 = a6;
      do
      {
        v15 = 0;
        v16 = &result->i8[*(int *)(a3 + 4 * v14) * (uint64_t)(int)a2];
        do
        {
          v17 = *a4;
          if (*a4)
            v17 *= v16[v15];
          *(_DWORD *)a5 = v17;
          v18 = a4[1];
          if (v18)
            v18 *= v16[a2 + v15];
          *(_DWORD *)a5 = v18 + v17;
          a5 += 4;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8)
    return result;
  v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  v20 = &result->i8[v19 * (uint64_t)(int)a2];
  v21 = a2;
  if (a2 >= 0x20)
  {
    v25 = v19 * (uint64_t)(int)a2;
    v26 = 4 * a2;
    v27 = &result->i8[a2 + v25];
    v28 = a2 & 0xFFFFFFE0;
    v29 = (int8x16_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        v30 = &a5[4 * (v21 & 0xFFFFFFE0)];
        v31 = (int32x4_t *)(a5 + 64);
        v32 = v21 & 0xFFFFFFE0;
        v33 = v29 + 1;
        do
        {
          v34 = v33[-1];
          _Q2 = vmovl_high_s8(v34);
          _Q0 = vmovl_s8(*(int8x8_t *)v34.i8);
          _Q3 = vmovl_high_s8(*v33);
          _Q1 = vmovl_s8(*(int8x8_t *)v33->i8);
          v39 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v31[-2] = v39;
          v31[-1] = (int32x4_t)_Q2;
          v44 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v45 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v31[-4] = v44;
          v31[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v31[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v31[3] = _Q0;
          *v31 = v45;
          v31[1] = (int32x4_t)_Q1;
          v31 += 8;
          v33 += 2;
          v32 -= 32;
        }
        while (v32);
        result = (int8x16_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21)
          goto LABEL_31;
      }
      else
      {
        result = 0;
        v30 = a5;
      }
      v47 = v21 - (_QWORD)result;
      result = (int8x16_t *)((char *)result + (_QWORD)v29);
      do
      {
        v48 = result->i8[0];
        result = (int8x16_t *)((char *)result + 1);
        *(_DWORD *)v30 = v48 << 16;
        v30 += 4;
        --v47;
      }
      while (v47);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8)
        return result;
    }
  }
  do
  {
    v22 = v20;
    v23 = a2;
    do
    {
      v24 = *v22++;
      *(_DWORD *)a5 = v24 << 16;
      a5 += 4;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

char *sub_10033A0C0(char *result, uint64_t a2, uint64_t a3, int *a4, int *a5, int a6, int a7, int a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int *v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  int *v26;
  char *v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;

  if (a6 >= 1)
  {
    v8 = *result << 16;
    v9 = result[1] << 16;
    v10 = result[2] << 16;
    if (a6 >= 8)
    {
      LODWORD(v15) = result[2] << 16;
      v11 = a6 & 0xFFFFFFF8;
      LODWORD(v14) = result[1] << 16;
      LODWORD(v13) = *result << 16;
      DWORD1(v13) = v14;
      *((_QWORD *)&v13 + 1) = __PAIR64__(v8, v10);
      DWORD1(v14) = v15;
      *((_QWORD *)&v14 + 1) = __PAIR64__(v9, v8);
      DWORD1(v15) = v13;
      v12 = &a5[3 * v11];
      *((_QWORD *)&v15 + 1) = __PAIR64__(v10, v9);
      v16 = v11;
      do
      {
        *(_OWORD *)a5 = v13;
        *((_OWORD *)a5 + 1) = v14;
        *((_OWORD *)a5 + 2) = v15;
        *((_OWORD *)a5 + 3) = v13;
        *((_OWORD *)a5 + 4) = v14;
        *((_OWORD *)a5 + 5) = v15;
        a5 += 24;
        v16 -= 8;
      }
      while (v16);
      if (v11 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v12;
        if (a6 < a7)
          goto LABEL_14;
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v11) = 0;
      v12 = a5;
    }
    v17 = a6 - v11;
    do
    {
      *v12 = v8;
      v12[1] = v9;
      v18 = v12 + 3;
      v12[2] = v10;
      v12 += 3;
      --v17;
    }
    while (v17);
    v12 = v18;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    v19 = a7 - (unint64_t)a6;
    v20 = (int *)(a3 + 4 * a6);
    do
    {
      v21 = *v20++;
      v22 = &result[3 * v21];
      *a5 = *a4 * *v22 + a4[1] * v22[3];
      a5[1] = *a4 * v22[1] + a4[1] * v22[4];
      v23 = *a4;
      v24 = a4[1];
      a4 += 2;
      v25 = v23 * v22[2] + v24 * v22[5];
      v26 = a5 + 3;
      a5[2] = v25;
      a5 += 3;
      --v19;
    }
    while (v19);
    a5 = v26;
    if (a7 >= a8)
      return result;
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8)
    return result;
LABEL_17:
  v27 = &result[3 * *(int *)(a3 + 4 * (a8 - 1))];
  v28 = *v27 << 16;
  v29 = v27[1] << 16;
  v30 = v27[2] << 16;
  v31 = (~a7 + a8);
  if (v31 < 7)
  {
    v32 = a5;
LABEL_22:
    v38 = a8 - a7;
    do
    {
      *v32 = v28;
      v32[1] = v29;
      v32[2] = v30;
      v32 += 3;
      --v38;
    }
    while (v38);
    return result;
  }
  v33 = v31 + 1;
  *(_QWORD *)&v36 = __PAIR64__(v28, v30);
  a7 += v33 & 0xFFFFFFF8;
  *(_QWORD *)&v35 = __PAIR64__(v30, v29);
  *(_QWORD *)&v34 = __PAIR64__(v29, v28);
  result = (char *)v30;
  *((_QWORD *)&v34 + 1) = __PAIR64__(v28, v30);
  *((_QWORD *)&v35 + 1) = __PAIR64__(v29, v28);
  v32 = &a5[3 * (v33 & 0x1FFFFFFF8)];
  *((_QWORD *)&v36 + 1) = __PAIR64__(v30, v29);
  v37 = v33 & 0x1FFFFFFF8;
  do
  {
    *(_OWORD *)a5 = v34;
    *((_OWORD *)a5 + 1) = v35;
    *((_OWORD *)a5 + 2) = v36;
    *((_OWORD *)a5 + 3) = v34;
    *((_OWORD *)a5 + 4) = v35;
    *((_OWORD *)a5 + 5) = v36;
    a5 += 24;
    v37 -= 8;
  }
  while (v37);
  if (v33 != (v33 & 0x1FFFFFFF8))
    goto LABEL_22;
  return result;
}

int8x16_t *sub_10033A36C(int8x16_t *result, unsigned int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, int a8)
{
  uint64_t v8;
  int v9;
  char *v10;
  int8x16_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int8x16_t *v29;
  char *v30;
  int32x4_t *v31;
  uint64_t v32;
  int8x16_t *v33;
  int8x16_t v34;
  int32x4_t v39;
  int32x4_t v44;
  int32x4_t v45;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int32x4_t *v51;
  uint64_t v52;
  int8x16_t *v53;
  int8x16_t v54;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  uint64_t v63;
  char *v64;
  int v65;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_23;
    goto LABEL_13;
  }
  v8 = 8 * (a6 - 1) + 8;
  if ((int)a2 <= 0)
  {
    a4 = (int *)((char *)a4 + v8);
    if (a6 >= a7)
      goto LABEL_23;
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    v49 = 0;
    while (1)
    {
      if (a5 >= &result->i8[a2] || &a5[4 * a2] <= (char *)result)
      {
        v10 = &a5[4 * (a2 & 0xFFFFFFE0)];
        v51 = (int32x4_t *)(a5 + 64);
        v52 = a2 & 0xFFFFFFE0;
        v53 = result + 1;
        do
        {
          v54 = v53[-1];
          _Q2 = vmovl_high_s8(v54);
          _Q0 = vmovl_s8(*(int8x8_t *)v54.i8);
          _Q3 = vmovl_high_s8(*v53);
          _Q1 = vmovl_s8(*(int8x8_t *)v53->i8);
          v59 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v51[-2] = v59;
          v51[-1] = (int32x4_t)_Q2;
          v60 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v61 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-4] = v60;
          v51[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v51[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v51[3] = _Q0;
          *v51 = v61;
          v51[1] = (int32x4_t)_Q1;
          v51 += 8;
          v53 += 2;
          v52 -= 32;
        }
        while (v52);
        v50 = a2 & 0xFFFFFFE0;
        if (v50 == a2)
          goto LABEL_42;
      }
      else
      {
        v50 = 0;
        v10 = a5;
      }
      v63 = a2 - v50;
      v64 = &result->i8[v50];
      do
      {
        v65 = *v64++;
        *(_DWORD *)v10 = v65 << 16;
        v10 += 4;
        --v63;
      }
      while (v63);
LABEL_42:
      ++v49;
      a5 = v10;
      if (v49 == a6)
        goto LABEL_8;
    }
  }
  v9 = 0;
  v10 = a5;
  do
  {
    v11 = result;
    v12 = a2;
    do
    {
      v13 = v11->i8[0];
      v11 = (int8x16_t *)((char *)v11 + 1);
      *(_DWORD *)v10 = v13 << 16;
      v10 += 4;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (int *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      v14 = a6;
      do
      {
        v15 = 0;
        v16 = &result->i8[*(int *)(a3 + 4 * v14) * (uint64_t)(int)a2];
        do
        {
          v17 = *a4;
          if (*a4)
            v17 *= v16[v15];
          *(_DWORD *)a5 = v17;
          v18 = a4[1];
          if (v18)
            v18 *= v16[a2 + v15];
          *(_DWORD *)a5 = v18 + v17;
          a5 += 4;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8)
    return result;
  v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  v20 = &result->i8[v19 * (uint64_t)(int)a2];
  v21 = a2;
  if (a2 >= 0x20)
  {
    v25 = v19 * (uint64_t)(int)a2;
    v26 = 4 * a2;
    v27 = &result->i8[a2 + v25];
    v28 = a2 & 0xFFFFFFE0;
    v29 = (int8x16_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        v30 = &a5[4 * (v21 & 0xFFFFFFE0)];
        v31 = (int32x4_t *)(a5 + 64);
        v32 = v21 & 0xFFFFFFE0;
        v33 = v29 + 1;
        do
        {
          v34 = v33[-1];
          _Q2 = vmovl_high_s8(v34);
          _Q0 = vmovl_s8(*(int8x8_t *)v34.i8);
          _Q3 = vmovl_high_s8(*v33);
          _Q1 = vmovl_s8(*(int8x8_t *)v33->i8);
          v39 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v31[-2] = v39;
          v31[-1] = (int32x4_t)_Q2;
          v44 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v45 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v31[-4] = v44;
          v31[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v31[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v31[3] = _Q0;
          *v31 = v45;
          v31[1] = (int32x4_t)_Q1;
          v31 += 8;
          v33 += 2;
          v32 -= 32;
        }
        while (v32);
        result = (int8x16_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21)
          goto LABEL_31;
      }
      else
      {
        result = 0;
        v30 = a5;
      }
      v47 = v21 - (_QWORD)result;
      result = (int8x16_t *)((char *)result + (_QWORD)v29);
      do
      {
        v48 = result->i8[0];
        result = (int8x16_t *)((char *)result + 1);
        *(_DWORD *)v30 = v48 << 16;
        v30 += 4;
        --v47;
      }
      while (v47);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8)
        return result;
    }
  }
  do
  {
    v22 = v20;
    v23 = a2;
    do
    {
      v24 = *v22++;
      *(_DWORD *)a5 = v24 << 16;
      a5 += 4;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

unsigned __int32 *sub_10033A67C(unsigned __int32 *result, __n128 a2, uint64_t a3, uint64_t a4, int *a5, __n128 *a6, int a7, int a8, int a9)
{
  uint64_t v9;
  __n128 *v10;
  __n128 *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  __n128 *v21;
  int32x4_t v22;
  uint64_t v23;
  int32x4_t *v24;
  uint64_t v25;
  uint64_t v26;
  int32x4_t *v27;
  uint64_t v28;
  int v29;

  if (a7 >= 1)
  {
    a2.n128_u32[0] = *result;
    a2 = (__n128)vshll_n_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a2.n128_u64[0]), 0x10uLL);
    if (a7 >= 8)
    {
      v9 = a7 & 0xFFFFFFF8;
      v10 = &a6[v9];
      v11 = a6 + 4;
      v12 = v9;
      do
      {
        v11[-4] = a2;
        v11[-3] = a2;
        v11[-2] = a2;
        v11[-1] = a2;
        *v11 = a2;
        v11[1] = a2;
        v11[2] = a2;
        v11[3] = a2;
        v11 += 8;
        v12 -= 8;
      }
      while (v12);
      if (v9 == a7)
      {
LABEL_12:
        a5 += 2 * (a7 - 1) + 2;
        a6 = v10;
        if (a7 < a8)
          goto LABEL_13;
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v9) = 0;
      v10 = a6;
    }
    v13 = a7 - v9;
    do
    {
      *v10++ = a2;
      --v13;
    }
    while (v13);
    goto LABEL_12;
  }
  a7 = 0;
  if (a8 > 0)
  {
LABEL_13:
    v14 = a8 - (unint64_t)a7;
    v15 = (int *)(a4 + 4 * a7);
    do
    {
      v16 = *v15++;
      v17 = (char *)&result[v16];
      a6->n128_u32[0] = *a5 * *v17 + a5[1] * v17[4];
      a6->n128_u32[1] = *a5 * v17[1] + a5[1] * v17[5];
      a6->n128_u32[2] = *a5 * v17[2] + a5[1] * v17[6];
      v18 = *a5;
      v19 = a5[1];
      a5 += 2;
      v20 = v18 * v17[3] + v19 * v17[7];
      v21 = a6 + 1;
      a6->n128_u32[3] = v20;
      ++a6;
      --v14;
    }
    while (v14);
    a6 = v21;
    if (a8 >= a9)
      return result;
    goto LABEL_16;
  }
LABEL_5:
  a8 = a7;
  if (a7 >= a9)
    return result;
LABEL_16:
  a2.n128_u32[0] = result[*(int *)(a4 + 4 * (a9 - 1))];
  v22 = vshll_n_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a2.n128_u64[0]), 0x10uLL);
  v23 = (~a8 + a9);
  if (v23 < 7)
  {
    v24 = (int32x4_t *)a6;
LABEL_21:
    v29 = a9 - a8;
    do
    {
      *v24++ = v22;
      --v29;
    }
    while (v29);
    return result;
  }
  v25 = v23 + 1;
  v26 = (v23 + 1) & 0x1FFFFFFF8;
  a8 += v26;
  v24 = (int32x4_t *)&a6[v26];
  v27 = (int32x4_t *)&a6[4];
  v28 = v26;
  do
  {
    v27[-4] = v22;
    v27[-3] = v22;
    v27[-2] = v22;
    v27[-1] = v22;
    *v27 = v22;
    v27[1] = v22;
    v27[2] = v22;
    v27[3] = v22;
    v27 += 8;
    v28 -= 8;
  }
  while (v28);
  if (v25 != v26)
    goto LABEL_21;
  return result;
}

int8x16_t *sub_10033A82C(int8x16_t *result, unsigned int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, int a8)
{
  uint64_t v8;
  int v9;
  char *v10;
  int8x16_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int8x16_t *v29;
  char *v30;
  int32x4_t *v31;
  uint64_t v32;
  int8x16_t *v33;
  int8x16_t v34;
  int32x4_t v39;
  int32x4_t v44;
  int32x4_t v45;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int32x4_t *v51;
  uint64_t v52;
  int8x16_t *v53;
  int8x16_t v54;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  uint64_t v63;
  char *v64;
  int v65;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_23;
    goto LABEL_13;
  }
  v8 = 8 * (a6 - 1) + 8;
  if ((int)a2 <= 0)
  {
    a4 = (int *)((char *)a4 + v8);
    if (a6 >= a7)
      goto LABEL_23;
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    v49 = 0;
    while (1)
    {
      if (a5 >= &result->i8[a2] || &a5[4 * a2] <= (char *)result)
      {
        v10 = &a5[4 * (a2 & 0xFFFFFFE0)];
        v51 = (int32x4_t *)(a5 + 64);
        v52 = a2 & 0xFFFFFFE0;
        v53 = result + 1;
        do
        {
          v54 = v53[-1];
          _Q2 = vmovl_high_s8(v54);
          _Q0 = vmovl_s8(*(int8x8_t *)v54.i8);
          _Q3 = vmovl_high_s8(*v53);
          _Q1 = vmovl_s8(*(int8x8_t *)v53->i8);
          v59 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v51[-2] = v59;
          v51[-1] = (int32x4_t)_Q2;
          v60 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v61 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-4] = v60;
          v51[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v51[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v51[3] = _Q0;
          *v51 = v61;
          v51[1] = (int32x4_t)_Q1;
          v51 += 8;
          v53 += 2;
          v52 -= 32;
        }
        while (v52);
        v50 = a2 & 0xFFFFFFE0;
        if (v50 == a2)
          goto LABEL_42;
      }
      else
      {
        v50 = 0;
        v10 = a5;
      }
      v63 = a2 - v50;
      v64 = &result->i8[v50];
      do
      {
        v65 = *v64++;
        *(_DWORD *)v10 = v65 << 16;
        v10 += 4;
        --v63;
      }
      while (v63);
LABEL_42:
      ++v49;
      a5 = v10;
      if (v49 == a6)
        goto LABEL_8;
    }
  }
  v9 = 0;
  v10 = a5;
  do
  {
    v11 = result;
    v12 = a2;
    do
    {
      v13 = v11->i8[0];
      v11 = (int8x16_t *)((char *)v11 + 1);
      *(_DWORD *)v10 = v13 << 16;
      v10 += 4;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (int *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      v14 = a6;
      do
      {
        v15 = 0;
        v16 = &result->i8[*(int *)(a3 + 4 * v14) * (uint64_t)(int)a2];
        do
        {
          v17 = *a4;
          if (*a4)
            v17 *= v16[v15];
          *(_DWORD *)a5 = v17;
          v18 = a4[1];
          if (v18)
            v18 *= v16[a2 + v15];
          *(_DWORD *)a5 = v18 + v17;
          a5 += 4;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8)
    return result;
  v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  v20 = &result->i8[v19 * (uint64_t)(int)a2];
  v21 = a2;
  if (a2 >= 0x20)
  {
    v25 = v19 * (uint64_t)(int)a2;
    v26 = 4 * a2;
    v27 = &result->i8[a2 + v25];
    v28 = a2 & 0xFFFFFFE0;
    v29 = (int8x16_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        v30 = &a5[4 * (v21 & 0xFFFFFFE0)];
        v31 = (int32x4_t *)(a5 + 64);
        v32 = v21 & 0xFFFFFFE0;
        v33 = v29 + 1;
        do
        {
          v34 = v33[-1];
          _Q2 = vmovl_high_s8(v34);
          _Q0 = vmovl_s8(*(int8x8_t *)v34.i8);
          _Q3 = vmovl_high_s8(*v33);
          _Q1 = vmovl_s8(*(int8x8_t *)v33->i8);
          v39 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v31[-2] = v39;
          v31[-1] = (int32x4_t)_Q2;
          v44 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v45 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v31[-4] = v44;
          v31[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v31[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v31[3] = _Q0;
          *v31 = v45;
          v31[1] = (int32x4_t)_Q1;
          v31 += 8;
          v33 += 2;
          v32 -= 32;
        }
        while (v32);
        result = (int8x16_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21)
          goto LABEL_31;
      }
      else
      {
        result = 0;
        v30 = a5;
      }
      v47 = v21 - (_QWORD)result;
      result = (int8x16_t *)((char *)result + (_QWORD)v29);
      do
      {
        v48 = result->i8[0];
        result = (int8x16_t *)((char *)result + 1);
        *(_DWORD *)v30 = v48 << 16;
        v30 += 4;
        --v47;
      }
      while (v47);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8)
        return result;
    }
  }
  do
  {
    v22 = v20;
    v23 = a2;
    do
    {
      v24 = *v22++;
      *(_DWORD *)a5 = v24 << 16;
      a5 += 4;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

int8x16_t *sub_10033AB3C(int8x16_t *result, unsigned int a2, uint64_t a3, const float *a4, int32x4_t *a5, uint64_t a6, int a7, int a8)
{
  uint64_t v8;
  int v9;
  int32x4_t *v10;
  int8x16_t *v11;
  uint64_t v12;
  int v13;
  int32x4_t *v14;
  uint64_t v15;
  __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  int32x4_t *v20;
  uint64_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  int32x4_t v28;
  int32x4_t v32;
  int32x4_t v33;
  __int8 *v35;
  uint64_t v36;
  int v37;
  int v38;
  __int8 *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int8x16_t *v48;
  int32x4_t *v49;
  int32x4_t *v50;
  uint64_t v51;
  int8x16_t *v52;
  int8x16_t v53;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  __int8 *v62;
  int v63;
  uint64_t v64;
  const float *v65;
  uint64_t v66;
  int v67;
  int8x8_t *v68;
  int8x8_t *v69;
  unint64_t v70;
  BOOL v72;
  BOOL v74;
  BOOL v75;
  const float *v76;
  int32x4_t v77;
  int32x4_t v78;
  uint64_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int8x16_t v82;
  int16x8_t v83;
  int16x8_t v84;
  __int8 *v85;
  int v86;

  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 > 0)
      goto LABEL_9;
    goto LABEL_17;
  }
  v8 = 8 * (a6 - 1) + 8;
  if ((int)a2 <= 0)
  {
    a4 = (const float *)((char *)a4 + v8);
    if ((int)a6 < a7)
      goto LABEL_9;
LABEL_17:
    v14 = a5;
    goto LABEL_32;
  }
  if (a2 >= 0x20)
  {
    v18 = 0;
    while (1)
    {
      if (a5 >= (int32x4_t *)&result->i8[a2] || (char *)a5 + 4 * a2 <= (char *)result)
      {
        v10 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFE0));
        v20 = a5 + 4;
        v21 = a2 & 0xFFFFFFE0;
        v22 = result + 1;
        do
        {
          v23 = v22[-1];
          _Q2 = vmovl_high_s8(v23);
          _Q0 = vmovl_s8(*(int8x8_t *)v23.i8);
          _Q3 = vmovl_high_s8(*v22);
          _Q1 = vmovl_s8(*(int8x8_t *)v22->i8);
          v28 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v20[-2] = v28;
          v20[-1] = (int32x4_t)_Q2;
          v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v33 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v20[-4] = v32;
          v20[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v20[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v20[3] = _Q0;
          *v20 = v33;
          v20[1] = (int32x4_t)_Q1;
          v20 += 8;
          v22 += 2;
          v21 -= 32;
        }
        while (v21);
        v19 = a2 & 0xFFFFFFE0;
        if (v19 == a2)
          goto LABEL_21;
      }
      else
      {
        v19 = 0;
        v10 = a5;
      }
      v35 = &result->i8[v19];
      v36 = a2 - v19;
      do
      {
        v37 = *v35++;
        v10->i32[0] = v37 << 16;
        v10 = (int32x4_t *)((char *)v10 + 4);
        --v36;
      }
      while (v36);
LABEL_21:
      ++v18;
      a5 = v10;
      if (v18 == (_DWORD)a6)
        goto LABEL_8;
    }
  }
  v9 = 0;
  v10 = a5;
  do
  {
    v11 = result;
    v12 = a2;
    do
    {
      v13 = v11->i8[0];
      v11 = (int8x16_t *)((char *)v11 + 1);
      v10->i32[0] = v13 << 16;
      v10 = (int32x4_t *)((char *)v10 + 4);
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != (_DWORD)a6);
LABEL_8:
  a4 = (const float *)((char *)a4 + v8);
  a5 = v10;
  if ((int)a6 >= a7)
    goto LABEL_17;
LABEL_9:
  if ((int)a2 < 1)
  {
    v14 = a5;
    LODWORD(a6) = a7;
    goto LABEL_32;
  }
  a6 = a6;
  if (a2 >= 0x10)
  {
    v64 = 0;
    v65 = a4;
    while (1)
    {
      v66 = 0;
      v67 = *(_DWORD *)(a3 + 4 * a6);
      v68 = (int8x8_t *)&result->i8[v67 * (uint64_t)(int)a2];
      v69 = (int8x8_t *)((char *)a5 + 4 * a2);
      v70 = (unint64_t)result->u64 + a2 + v67 * (uint64_t)(int)a2;
      v72 = a5 < (int32x4_t *)((char *)result + 2 * a2 + v67 * (uint64_t)(int)a2) && v70 < (unint64_t)v69;
      v74 = (unint64_t)a5 < v70 && v68 < v69;
      v75 = v65 >= (const float *)v69 || a5 >= (int32x4_t *)&a4[2 * v64 + 2];
      if (!v75 || v72 || v74)
      {
        v14 = a5;
      }
      else
      {
        v14 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        v76 = v65;
        v77 = (int32x4_t)vld1q_dup_f32(v76++);
        v78 = (int32x4_t)vld1q_dup_f32(v76);
        v79 = a2 & 0xFFFFFFF0;
        do
        {
          v80 = vmovl_s8(*v68);
          v81 = vmovl_high_s8(*(int8x16_t *)v68->i8);
          v82 = *(int8x16_t *)&v68->i8[a2];
          v83 = vmovl_s8(*(int8x8_t *)v82.i8);
          v84 = vmovl_high_s8(v82);
          a5[2] = vmlaq_s32(vmulq_s32(v77, vmovl_s16(*(int16x4_t *)v81.i8)), v78, vmovl_s16(*(int16x4_t *)v84.i8));
          a5[3] = vmlaq_s32(vmulq_s32(v77, vmovl_high_s16(v81)), v78, vmovl_high_s16(v84));
          *a5 = vmlaq_s32(vmulq_s32(v77, vmovl_s16(*(int16x4_t *)v80.i8)), v78, vmovl_s16(*(int16x4_t *)v83.i8));
          a5[1] = vmlaq_s32(vmulq_s32(v77, vmovl_high_s16(v80)), v78, vmovl_high_s16(v83));
          a5 += 4;
          v68 += 2;
          v79 -= 16;
        }
        while (v79);
        v66 = a2 & 0x7FFFFFF0;
        if ((a2 & 0xFFFFFFF0) == (unint64_t)a2)
          goto LABEL_51;
      }
      v85 = &result->i8[v66 + v67 * (uint64_t)(int)a2];
      do
      {
        v86 = *(_DWORD *)v65 * *v85;
        v14->i32[0] = v86;
        v14->i32[0] = v86 + *((_DWORD *)v65 + 1) * v85[a2];
        v14 = (int32x4_t *)((char *)v14 + 4);
        ++v66;
        ++v85;
      }
      while (a2 != v66);
LABEL_51:
      ++a6;
      v65 += 2;
      ++v64;
      a5 = v14;
      if ((int)a6 >= a7)
        goto LABEL_32;
    }
  }
  v14 = a5;
  do
  {
    v15 = 0;
    v16 = &result->i8[*(int *)(a3 + 4 * a6) * (uint64_t)(int)a2];
    do
    {
      v17 = *(_DWORD *)a4 * v16[v15];
      v14->i32[0] = v17;
      v14->i32[0] = v17 + *((_DWORD *)a4 + 1) * v16[a2 + v15];
      v14 = (int32x4_t *)((char *)v14 + 4);
      ++v15;
    }
    while (a2 != v15);
    ++a6;
    a4 += 2;
  }
  while ((int)a6 < a7);
LABEL_32:
  if ((int)a6 >= a8 || (int)a2 < 1)
    return result;
  v38 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  v39 = &result->i8[v38 * (uint64_t)(int)a2];
  v40 = a2;
  if (a2 >= 0x20)
  {
    v44 = v38 * (uint64_t)(int)a2;
    v45 = 4 * a2;
    v46 = (unint64_t)result->u64 + a2 + v44;
    v47 = a2 & 0xFFFFFFE0;
    v48 = (int8x16_t *)((char *)result + v44);
    while (1)
    {
      if ((unint64_t)v14 >= v46 || v39 >= &v14->i8[v45])
      {
        v49 = (int32x4_t *)((char *)v14 + 4 * (v40 & 0xFFFFFFE0));
        v50 = v14 + 4;
        v51 = v40 & 0xFFFFFFE0;
        v52 = v48 + 1;
        do
        {
          v53 = v52[-1];
          _Q2 = vmovl_high_s8(v53);
          _Q0 = vmovl_s8(*(int8x8_t *)v53.i8);
          _Q3 = vmovl_high_s8(*v52);
          _Q1 = vmovl_s8(*(int8x8_t *)v52->i8);
          v58 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v50[-2] = v58;
          v50[-1] = (int32x4_t)_Q2;
          v59 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v60 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v50[-4] = v59;
          v50[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v50[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v50[3] = _Q0;
          *v50 = v60;
          v50[1] = (int32x4_t)_Q1;
          v50 += 8;
          v52 += 2;
          v51 -= 32;
        }
        while (v51);
        result = (int8x16_t *)(v40 & 0x7FFFFFE0);
        if (v47 == v40)
          goto LABEL_40;
      }
      else
      {
        result = 0;
        v49 = v14;
      }
      v62 = &result->i8[(_QWORD)v48];
      result = (int8x16_t *)(v40 - (_QWORD)result);
      do
      {
        v63 = *v62++;
        v49->i32[0] = v63 << 16;
        v49 = (int32x4_t *)((char *)v49 + 4);
        result = (int8x16_t *)((char *)result - 1);
      }
      while (result);
LABEL_40:
      LODWORD(a6) = a6 + 1;
      v14 = v49;
      if ((_DWORD)a6 == a8)
        return result;
    }
  }
  do
  {
    v41 = v39;
    v42 = a2;
    do
    {
      v43 = *v41++;
      v14->i32[0] = v43 << 16;
      v14 = (int32x4_t *)((char *)v14 + 4);
      --v42;
    }
    while (v42);
    LODWORD(a6) = a6 + 1;
  }
  while ((_DWORD)a6 != a8);
  return result;
}

int8x16_t *sub_10033AFB0(int8x16_t *result, unsigned int a2, uint64_t a3, int *a4, int32x4_t *a5, uint64_t a6, int a7, int a8)
{
  uint64_t v8;
  int v9;
  int32x4_t *v10;
  int8x16_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int8 *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int32x4_t *v20;
  uint64_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  int32x4_t v28;
  int32x4_t v33;
  int32x4_t v34;
  __int8 *v36;
  uint64_t v37;
  int v38;
  int v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int8x16_t *v49;
  int32x4_t *v50;
  int32x4_t *v51;
  uint64_t v52;
  int8x16_t *v53;
  int8x16_t v54;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  __int8 *v63;
  int v64;

  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 <= 0)
      goto LABEL_34;
    goto LABEL_13;
  }
  v8 = 8 * (a6 - 1) + 8;
  if ((int)a2 <= 0)
  {
    a4 = (int *)((char *)a4 + v8);
    if ((int)a6 >= a7)
      goto LABEL_34;
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    v18 = 0;
    while (1)
    {
      if (a5 >= (int32x4_t *)&result->i8[a2] || (char *)a5 + 4 * a2 <= (char *)result)
      {
        v10 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFE0));
        v20 = a5 + 4;
        v21 = a2 & 0xFFFFFFE0;
        v22 = result + 1;
        do
        {
          v23 = v22[-1];
          _Q2 = vmovl_high_s8(v23);
          _Q0 = vmovl_s8(*(int8x8_t *)v23.i8);
          _Q3 = vmovl_high_s8(*v22);
          _Q1 = vmovl_s8(*(int8x8_t *)v22->i8);
          v28 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v20[-2] = v28;
          v20[-1] = (int32x4_t)_Q2;
          v33 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v34 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v20[-4] = v33;
          v20[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v20[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v20[3] = _Q0;
          *v20 = v34;
          v20[1] = (int32x4_t)_Q1;
          v20 += 8;
          v22 += 2;
          v21 -= 32;
        }
        while (v21);
        v19 = a2 & 0xFFFFFFE0;
        if (v19 == a2)
          goto LABEL_23;
      }
      else
      {
        v19 = 0;
        v10 = a5;
      }
      v36 = &result->i8[v19];
      v37 = a2 - v19;
      do
      {
        v38 = *v36++;
        v10->i32[0] = v38 << 16;
        v10 = (int32x4_t *)((char *)v10 + 4);
        --v37;
      }
      while (v37);
LABEL_23:
      ++v18;
      a5 = v10;
      if (v18 == (_DWORD)a6)
        goto LABEL_8;
    }
  }
  v9 = 0;
  v10 = a5;
  do
  {
    v11 = result;
    v12 = a2;
    do
    {
      v13 = v11->i8[0];
      v11 = (int8x16_t *)((char *)v11 + 1);
      v10->i32[0] = v13 << 16;
      v10 = (int32x4_t *)((char *)v10 + 4);
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != (_DWORD)a6);
LABEL_8:
  a4 = (int *)((char *)a4 + v8);
  a5 = v10;
  if ((int)a6 < a7)
  {
LABEL_13:
    if ((int)a2 < 1)
    {
      LODWORD(a6) = a7;
    }
    else
    {
      a6 = a6;
      do
      {
        v14 = 0;
        v15 = &result->i8[*(int *)(a3 + 4 * a6) * (uint64_t)(int)a2];
        do
        {
          v16 = *a4;
          if (*a4)
            v16 *= v15[v14];
          a5->i32[0] = v16;
          v17 = a4[1];
          if (v17)
            v17 *= v15[a2 + v14];
          a5->i32[0] = v17 + v16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          ++v14;
        }
        while (a2 != v14);
        ++a6;
        a4 += 2;
      }
      while ((int)a6 < a7);
    }
  }
LABEL_34:
  if ((int)a6 >= a8 || (int)a2 < 1)
    return result;
  v39 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  v40 = &result->i8[v39 * (uint64_t)(int)a2];
  v41 = a2;
  if (a2 >= 0x20)
  {
    v45 = v39 * (uint64_t)(int)a2;
    v46 = 4 * a2;
    v47 = (unint64_t)result->u64 + a2 + v45;
    v48 = a2 & 0xFFFFFFE0;
    v49 = (int8x16_t *)((char *)result + v45);
    while (1)
    {
      if ((unint64_t)a5 >= v47 || v40 >= &a5->i8[v46])
      {
        v50 = (int32x4_t *)((char *)a5 + 4 * (v41 & 0xFFFFFFE0));
        v51 = a5 + 4;
        v52 = v41 & 0xFFFFFFE0;
        v53 = v49 + 1;
        do
        {
          v54 = v53[-1];
          _Q2 = vmovl_high_s8(v54);
          _Q0 = vmovl_s8(*(int8x8_t *)v54.i8);
          _Q3 = vmovl_high_s8(*v53);
          _Q1 = vmovl_s8(*(int8x8_t *)v53->i8);
          v59 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v51[-2] = v59;
          v51[-1] = (int32x4_t)_Q2;
          v60 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v61 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-4] = v60;
          v51[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v51[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v51[3] = _Q0;
          *v51 = v61;
          v51[1] = (int32x4_t)_Q1;
          v51 += 8;
          v53 += 2;
          v52 -= 32;
        }
        while (v52);
        result = (int8x16_t *)(v41 & 0x7FFFFFE0);
        if (v48 == v41)
          goto LABEL_42;
      }
      else
      {
        result = 0;
        v50 = a5;
      }
      v63 = &result->i8[(_QWORD)v49];
      result = (int8x16_t *)(v41 - (_QWORD)result);
      do
      {
        v64 = *v63++;
        v50->i32[0] = v64 << 16;
        v50 = (int32x4_t *)((char *)v50 + 4);
        result = (int8x16_t *)((char *)result - 1);
      }
      while (result);
LABEL_42:
      LODWORD(a6) = a6 + 1;
      a5 = v50;
      if ((_DWORD)a6 == a8)
        return result;
    }
  }
  do
  {
    v42 = v40;
    v43 = a2;
    do
    {
      v44 = *v42++;
      a5->i32[0] = v44 << 16;
      a5 = (int32x4_t *)((char *)a5 + 4);
      --v43;
    }
    while (v43);
    LODWORD(a6) = a6 + 1;
  }
  while ((_DWORD)a6 != a8);
  return result;
}

uint64_t sub_10033B2C0(uint64_t a1, int a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t result;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  sub_100289D28(&v15, a2);
  v14 = 0x3FE0000000000000;
  sub_10028A294(&v15, &v14, &v17);
  sub_10028A2EC((unint64_t *)a1, &v17, (unint64_t *)&v18);
  v13 = 0x3FE0000000000000;
  sub_10028A2C0((unint64_t *)&v18, &v13, (unint64_t *)&v16);
  result = sub_100289FFC(&v16);
  if ((result & 0x80000000) != 0 || (v9 = *(_DWORD *)(a1 + 8), v9 < 2))
  {
    if (*(_DWORD *)(a1 + 12) <= a2 + 1)
      v11 = a2 + 1;
    else
      v11 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v11;
  }
  else
  {
    v10 = v9 - 1;
    if (result >= v10)
    {
      *a3 = v10;
      v12 = *(_DWORD *)(a1 + 16);
      if (v12 >= a2)
        v12 = a2;
      *(_DWORD *)(a1 + 16) = v12;
    }
    else
    {
      *a3 = result;
      sub_100289D28(&v14, result);
      sub_10028A2C0((unint64_t *)&v16, &v14, &v15);
      sub_100289D28(&v17, 0x10000);
      sub_10028A2EC(&v15, &v17, (unint64_t *)&v18);
      result = sub_100289F48(&v18);
      *a4 = 0x10000 - result;
      a4[1] = result;
    }
  }
  return result;
}

void sub_10033B414(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

_DWORD *sub_10033B438(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int64x2_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  signed int v35;
  signed int v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  int *v40;
  int *v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  int32x4_t *v54;
  int32x4_t *v55;
  _QWORD *v56;
  uint64_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t *v81;
  uint64_t v82;
  int32x4_t *v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int64x2_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  uint64_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  int *v137;
  int v138;
  int v139;
  int8x16_t *v140;
  uint64_t v141;
  int32x4_t *v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  uint64_t v147;
  int32x4_t *v148;
  _QWORD *v149;
  uint64_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t *v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE *v168;
  __int32 *v169;
  int v170;
  int v171;
  int8x16_t *v172;
  uint64_t v173;
  int32x4_t *v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  uint64_t v179;
  int32x4_t *v180;
  _QWORD *v181;
  uint64_t v182;
  int32x4_t v183;
  int32x4_t v184;
  _DWORD *v186;
  int64x2_t v187;
  int v188;
  _DWORD v189[264];
  uint64_t v190;
  int8x16x2_t v191;
  int8x16x2_t v192;
  int8x16x4_t v193;
  int8x16x4_t v194;
  int8x16x4_t v195;
  int8x16x4_t v196;
  int8x16x4_t v197;

  v4 = 2 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 56);
  bzero(v189, 0x420uLL);
  if (v4 >= 0x109)
    operator new[]();
  v5 = *a2;
  v6 = *(_DWORD *)(a1 + 104);
  if (v6 <= *a2)
    v7 = *a2;
  else
    v7 = *(_DWORD *)(a1 + 104);
  if (a2[1] >= *(_DWORD *)(a1 + 108))
    v8 = *(_DWORD *)(a1 + 108);
  else
    v8 = a2[1];
  if (v5 >= v6)
  {
    v9 = 0;
    v10 = -2;
    if (v5 >= v7)
    {
LABEL_11:
      if (v5 >= v8)
        goto LABEL_101;
      goto LABEL_12;
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _DWORD *, _QWORD, _QWORD, _QWORD))(a1 + 112))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), v189, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    v5 = *a2;
    v9 = 1;
    v10 = -1;
    if (*a2 >= v7)
      goto LABEL_11;
  }
  v126 = v5;
  v127.i64[0] = 0x800000008000;
  v127.i64[1] = 0x800000008000;
  v128.i64[0] = 0x7F0000007FLL;
  v128.i64[1] = 0x7F0000007FLL;
  v129.i64[0] = 0x7F0000007FLL;
  v129.i64[1] = 0x7F0000007FLL;
  do
  {
    v130 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
    if ((int)v130 < 1)
      goto LABEL_74;
    v131 = *(_QWORD *)(a1 + 32);
    v132 = *(_QWORD *)(a1 + 40);
    if (v130 >= 8
      && (v131 + v132 * v126 < (unint64_t)&v189[v130]
        ? (v133 = (unint64_t)v189 >= v131 + v132 * v126 + v130)
        : (v133 = 1),
          v133))
    {
      if (v130 < 0x10)
      {
        v134 = 0;
LABEL_96:
        v147 = v134;
        v134 = v130 & 0xFFFFFFF8;
        v148 = (int32x4_t *)&v189[v147];
        v149 = (_QWORD *)(v131 + v147 + v132 * v126);
        v150 = v147 - v134;
        do
        {
          v152 = *v148;
          v151 = v148[1];
          v148 += 2;
          v191.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v151, v127), 0x10uLL), v128), v129);
          v191.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v152, v127), 0x10uLL), v128), v129);
          *v149++ = vqtbl2q_s8(v191, (int8x16_t)xmmword_1003BC970).u64[0];
          v150 += 8;
        }
        while (v150);
        if (v134 == v130)
          goto LABEL_74;
        goto LABEL_85;
      }
      v134 = v130 & 0x7FFFFFF0;
      v140 = (int8x16_t *)(v131 + v132 * v126);
      v141 = v130 & 0xFFFFFFF0;
      v142 = (int32x4_t *)v189;
      do
      {
        v144 = v142[2];
        v143 = v142[3];
        v146 = *v142;
        v145 = v142[1];
        v142 += 4;
        v195.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v143, v127), 0x10uLL), v128), v129);
        v195.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v144, v127), 0x10uLL), v128), v129);
        v195.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v145, v127), 0x10uLL), v128), v129);
        v195.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v146, v127), 0x10uLL), v128), v129);
        *v140++ = vqtbl4q_s8(v195, (int8x16_t)xmmword_1003BC960);
        v141 -= 16;
      }
      while (v141);
      if (v134 == v130)
        goto LABEL_74;
      if ((v130 & 8) != 0)
        goto LABEL_96;
    }
    else
    {
      v134 = 0;
    }
LABEL_85:
    v135 = v130 - v134;
    v136 = (_BYTE *)(v131 + v134 + v132 * v126);
    v137 = &v189[v134];
    do
    {
      v138 = *v137++;
      v139 = (v138 + 0x8000) >> 16;
      if (v139 <= -128)
        v139 = -128;
      if (v139 >= 127)
        LOBYTE(v139) = 127;
      *v136++ = v139;
      --v135;
    }
    while (v135);
LABEL_74:
    ++v126;
  }
  while (v126 != v7);
  v5 = v7;
  if (v7 >= v8)
  {
LABEL_101:
    v153 = (int32x4_t *)v189;
    v154 = *(int *)(a1 + 28);
    if (v10 + 2 <= (int)v154)
      goto LABEL_107;
    goto LABEL_102;
  }
LABEL_12:
  v186 = a2;
  v11 = v5;
  v12 = vdupq_n_s64(0xFFFFFFFFFFFFFF80);
  v13 = (int8x16_t)xmmword_1003C3240;
  v14 = (int8x16_t)xmmword_1003C3230;
  v188 = v8;
  v187 = v12;
  while (2)
  {
    v15 = v10;
    v16 = *(_QWORD *)(a1 + 72);
    v17 = v10 + 2;
    v10 = *(_DWORD *)(v16 + 4 * v11);
    if (v10 <= v17)
      v18 = v17;
    else
      v18 = *(_DWORD *)(v16 + 4 * v11);
    v19 = v10 + 2;
    v20 = *(_DWORD *)(a1 + 28);
    if (v20 < v10 + 2)
      v19 = *(_DWORD *)(a1 + 28);
    if (v18 < v19)
    {
      v21 = v18;
      do
      {
        (*(void (**)(uint64_t))(a1 + 112))(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v21++);
        v10 = *(_DWORD *)(v16 + 4 * v11);
        v9 = (v9 & 1) == 0;
        v22 = v10 + 2;
        v20 = *(_DWORD *)(a1 + 28);
        if (v20 < v10 + 2)
          v22 = *(_DWORD *)(a1 + 28);
      }
      while (v21 < v22);
      v8 = v188;
      v13 = (int8x16_t)xmmword_1003C3240;
      v12 = v187;
      v14 = (int8x16_t)xmmword_1003C3230;
    }
    v23 = v20 - 2;
    if (v10 <= v23)
      v24 = v23;
    else
      v24 = v10;
    v25 = v24 + v9;
    if (v15 > v23)
      v23 = v15;
    v26 = v25 - v23;
    v190 = 0;
    if (v26 >= 0)
      v9 = v26 & 1;
    else
      v9 = -(v26 & 1);
    v27 = *(_QWORD *)(a1 + 88);
    v28 = 2 * v11;
    if (v9 < 1)
    {
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v29 = *(_DWORD *)(v27 + 4 * (v28 | 1));
      v30 = 1;
    }
    LODWORD(v190) = v29;
    v31 = v28 - v9;
    *(_DWORD *)((unint64_t)&v190 | (4 * v30)) = *(_DWORD *)(v27 + 4 * (v30 + v31));
    if (v9 <= 0)
    {
      HIDWORD(v190) = *(_DWORD *)(v27 + 4 * v31 + 4);
      v32 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
      if ((int)v32 < 1)
        goto LABEL_13;
    }
    else
    {
      v32 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
      if ((int)v32 < 1)
        goto LABEL_13;
    }
    v33 = *(_QWORD *)(a1 + 32);
    v34 = *(_QWORD *)(a1 + 40);
    v35 = v190;
    v36 = HIDWORD(v190);
    if (v32 >= 8)
    {
      v37 = 0;
      v46 = v33 + v34 * v11;
      v47 = v33 + v34 * v11 + v32;
      v48 = 4 * v32;
      v49 = &v189[v32];
      v51 = v46 < (unint64_t)&v189[v32] && (unint64_t)v189 < v47;
      v52 = (unint64_t)v49 >= v47 || v46 >= (unint64_t)&v49[v32];
      if (!v52 || v51)
        goto LABEL_42;
      if (v32 >= 0x10)
      {
        v37 = v32 & 0xFFFFFFF0;
        v81 = (int64x2_t *)(v33 + v34 * v11);
        v82 = v37;
        v83 = (int32x4_t *)v189;
        do
        {
          v84 = v83[1];
          v85 = vdupq_n_s32(v35);
          v86 = v83[2];
          v87 = v83[3];
          v88 = vmull_s32(*(int32x2_t *)v85.i8, *(int32x2_t *)v83->i8);
          v89 = vmull_s32(*(int32x2_t *)v85.i8, *(int32x2_t *)v84.i8);
          v90 = vmull_high_s32(v85, *v83);
          v91 = vmull_high_s32(v85, v84);
          v92 = vmull_s32(*(int32x2_t *)v85.i8, *(int32x2_t *)v86.i8);
          v93 = vmull_s32(*(int32x2_t *)v85.i8, *(int32x2_t *)v87.i8);
          v94 = vmull_high_s32(v85, v86);
          v96 = *(int32x4_t *)((char *)&v83[2] + v48);
          v95 = *(int32x4_t *)((char *)&v83[3] + v48);
          v97 = vmull_high_s32(v85, v87);
          v99 = *(int32x4_t *)((char *)v83 + 4 * v32);
          v98 = *(int32x4_t *)((char *)&v83[1] + v48);
          v100 = vdupq_n_s32(v36);
          v101 = vmlal_high_s32(v91, v100, v98);
          v102 = vmlal_s32(v89, *(int32x2_t *)v100.i8, *(int32x2_t *)v98.i8);
          v103 = vdupq_n_s64(0x80000000uLL);
          v104 = vaddq_s64(vmlal_s32(v88, *(int32x2_t *)v100.i8, *(int32x2_t *)v99.i8), v103);
          v105 = vaddq_s64(v102, v103);
          v106 = vaddq_s64(vmlal_high_s32(v90, v100, v99), v103);
          v107 = vaddq_s64(v101, v103);
          v108 = vaddq_s64(vmlal_s32(v92, *(int32x2_t *)v100.i8, *(int32x2_t *)v96.i8), v103);
          v109 = vshrq_n_s64(vaddq_s64(vmlal_high_s32(v97, v100, v95), v103), 0x20uLL);
          v110 = vshrq_n_s64(vaddq_s64(vmlal_high_s32(v94, v100, v96), v103), 0x20uLL);
          v111 = vshrq_n_s64(vaddq_s64(vmlal_s32(v93, *(int32x2_t *)v100.i8, *(int32x2_t *)v95.i8), v103), 0x20uLL);
          v112 = vshrq_n_s64(v108, 0x20uLL);
          v113 = vshrq_n_s64(v107, 0x20uLL);
          v114 = vshrq_n_s64(v106, 0x20uLL);
          v115 = vshrq_n_s64(v105, 0x20uLL);
          v116 = vshrq_n_s64(v104, 0x20uLL);
          v117 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v116, v12), (int8x16_t)v116, (int8x16_t)v12);
          v118 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v115, v12), (int8x16_t)v115, (int8x16_t)v12);
          v119 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v114, v12), (int8x16_t)v114, (int8x16_t)v12);
          v120 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v113, v12), (int8x16_t)v113, (int8x16_t)v12);
          v121 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v112, v12), (int8x16_t)v112, (int8x16_t)v12);
          v122 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v111, v12), (int8x16_t)v111, (int8x16_t)v12);
          v123 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v110, v12), (int8x16_t)v110, (int8x16_t)v12);
          v124 = vdupq_n_s64(0x7FuLL);
          v125 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v109, v12), (int8x16_t)v109, (int8x16_t)v12);
          v197.val[3] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v125), (int8x16_t)v125, (int8x16_t)v124);
          v197.val[1] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v123), (int8x16_t)v123, (int8x16_t)v124);
          v197.val[2] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v122), (int8x16_t)v122, (int8x16_t)v124);
          v197.val[0] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v121), (int8x16_t)v121, (int8x16_t)v124);
          v193.val[3] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v120), (int8x16_t)v120, (int8x16_t)v124);
          v193.val[1] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v119), (int8x16_t)v119, (int8x16_t)v124);
          v193.val[2] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v118), (int8x16_t)v118, (int8x16_t)v124);
          v193.val[0] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v117), (int8x16_t)v117, (int8x16_t)v124);
          v119.i64[0] = vqtbl4q_s8(v193, v14).u64[0];
          v119.i64[1] = vqtbl4q_s8(v197, v14).u64[0];
          *v81++ = v119;
          v83 += 4;
          v82 -= 16;
        }
        while (v82);
        if (v37 == v32)
          goto LABEL_13;
        if ((v32 & 8) == 0)
          goto LABEL_42;
      }
      else
      {
        v37 = 0;
      }
      v53 = v37;
      v37 = v32 & 0xFFFFFFF8;
      v54 = (int32x4_t *)&v189[v53];
      v55 = (int32x4_t *)&v189[v53 + v32];
      v56 = (_QWORD *)(v33 + v53 + v34 * v11);
      v57 = v53 - v37;
      do
      {
        v58 = *v54;
        v59 = v54[1];
        v54 += 2;
        v60 = vdupq_n_s32(v35);
        v61 = vmull_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v58.i8);
        v62 = vmull_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v59.i8);
        v63 = vmull_high_s32(v60, v58);
        v64 = vmull_high_s32(v60, v59);
        v66 = *v55;
        v65 = v55[1];
        v55 += 2;
        v67 = vdupq_n_s32(v36);
        v68 = vmlal_high_s32(v64, v67, v65);
        v69 = vmlal_s32(v62, *(int32x2_t *)v67.i8, *(int32x2_t *)v65.i8);
        v70 = vdupq_n_s64(0x80000000uLL);
        v71 = vaddq_s64(vmlal_s32(v61, *(int32x2_t *)v67.i8, *(int32x2_t *)v66.i8), v70);
        v72 = vshrq_n_s64(vaddq_s64(v68, v70), 0x20uLL);
        v73 = vshrq_n_s64(vaddq_s64(vmlal_high_s32(v63, v67, v66), v70), 0x20uLL);
        v74 = vshrq_n_s64(vaddq_s64(v69, v70), 0x20uLL);
        v75 = vshrq_n_s64(v71, 0x20uLL);
        v76 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v75, v12), (int8x16_t)v75, (int8x16_t)v12);
        v77 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v74, v12), (int8x16_t)v74, (int8x16_t)v12);
        v78 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v73, v12), (int8x16_t)v73, (int8x16_t)v12);
        v79 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v72, v12), (int8x16_t)v72, (int8x16_t)v12);
        v80 = vdupq_n_s64(0x7FuLL);
        v194.val[3] = vbslq_s8((int8x16_t)vcgtq_s64(v80, v79), (int8x16_t)v79, (int8x16_t)v80);
        v194.val[1] = vbslq_s8((int8x16_t)vcgtq_s64(v80, v78), (int8x16_t)v78, (int8x16_t)v80);
        v194.val[2] = vbslq_s8((int8x16_t)vcgtq_s64(v80, v77), (int8x16_t)v77, (int8x16_t)v80);
        v194.val[0] = vbslq_s8((int8x16_t)vcgtq_s64(v80, v76), (int8x16_t)v76, (int8x16_t)v80);
        *v56++ = vqtbl4q_s8(v194, v13).u64[0];
        v57 += 8;
      }
      while (v57);
      if (v37 != v32)
        goto LABEL_42;
    }
    else
    {
      v37 = 0;
LABEL_42:
      v38 = v32 - v37;
      v39 = (_BYTE *)(v33 + v37 + v34 * v11);
      v40 = &v189[v37 + v32];
      v41 = &v189[v37];
      do
      {
        v43 = *v41++;
        v42 = v43;
        v44 = *v40++;
        v45 = (v36 * (uint64_t)v44 + v35 * (uint64_t)v42 + 0x80000000) >> 32;
        if (v45 <= -128)
          v45 = -128;
        if (v45 >= 127)
          LOBYTE(v45) = 127;
        *v39++ = v45;
        --v38;
      }
      while (v38);
    }
LABEL_13:
    if (v8 != (_DWORD)++v11)
      continue;
    break;
  }
  v5 = v8;
  a2 = v186;
  v153 = (int32x4_t *)v189;
  v154 = *(int *)(a1 + 28);
  if (v10 + 2 <= (int)v154)
  {
LABEL_107:
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _DWORD *, _QWORD, _QWORD, _QWORD))(a1 + 112))(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * (v154 - 1), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), v189, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    goto LABEL_108;
  }
LABEL_102:
  v155 = v9 + ~v10 + v154;
  if (v155 >= 0)
    v156 = v155 & 1;
  else
    v156 = -(v155 & 1);
  v153 = (int32x4_t *)&v189[*(_DWORD *)(a1 + 48) * v156 * *(_DWORD *)(a1 + 56)];
LABEL_108:
  v157 = a2[1];
  if (v5 < v157)
  {
    v158 = v5;
    v159.i64[0] = 0x800000008000;
    v159.i64[1] = 0x800000008000;
    v160.i64[0] = 0x7F0000007FLL;
    v160.i64[1] = 0x7F0000007FLL;
    v161.i64[0] = 0x7F0000007FLL;
    v161.i64[1] = 0x7F0000007FLL;
    while (2)
    {
      v162 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
      if ((int)v162 < 1)
        goto LABEL_111;
      v163 = *(_QWORD *)(a1 + 32);
      v164 = *(_QWORD *)(a1 + 40);
      if (v162 >= 8
        && (v163 + v164 * v158 < (unint64_t)v153 + 4 * v162
          ? (v165 = (unint64_t)v153 >= v163 + v164 * v158 + v162)
          : (v165 = 1),
            v165))
      {
        if (v162 >= 0x10)
        {
          v166 = v162 & 0x7FFFFFF0;
          v172 = (int8x16_t *)(v163 + v164 * v158);
          v173 = v162 & 0xFFFFFFF0;
          v174 = v153;
          do
          {
            v176 = v174[2];
            v175 = v174[3];
            v178 = *v174;
            v177 = v174[1];
            v174 += 4;
            v196.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v175, v159), 0x10uLL), v160), v161);
            v196.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v176, v159), 0x10uLL), v160), v161);
            v196.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v177, v159), 0x10uLL), v160), v161);
            v196.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v178, v159), 0x10uLL), v160), v161);
            *v172++ = vqtbl4q_s8(v196, (int8x16_t)xmmword_1003BC960);
            v173 -= 16;
          }
          while (v173);
          if (v166 == v162)
            goto LABEL_110;
          if ((v162 & 8) == 0)
            goto LABEL_122;
        }
        else
        {
          v166 = 0;
        }
        v179 = v166;
        v166 = v162 & 0xFFFFFFF8;
        v180 = (int32x4_t *)((char *)v153 + 4 * v179);
        v181 = (_QWORD *)(v163 + v179 + v164 * v158);
        v182 = v179 - v166;
        do
        {
          v184 = *v180;
          v183 = v180[1];
          v180 += 2;
          v192.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v183, v159), 0x10uLL), v160), v161);
          v192.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v184, v159), 0x10uLL), v160), v161);
          *v181++ = vqtbl2q_s8(v192, (int8x16_t)xmmword_1003BC970).u64[0];
          v182 += 8;
        }
        while (v182);
        if (v166 != v162)
          goto LABEL_122;
      }
      else
      {
        v166 = 0;
LABEL_122:
        v167 = v162 - v166;
        v168 = (_BYTE *)(v163 + v166 + v164 * v158);
        v169 = &v153->i32[v166];
        do
        {
          v170 = *v169++;
          v171 = (v170 + 0x8000) >> 16;
          if (v171 <= -128)
            v171 = -128;
          if (v171 >= 127)
            LOBYTE(v171) = 127;
          *v168++ = v171;
          --v167;
        }
        while (v167);
      }
LABEL_110:
      v157 = a2[1];
LABEL_111:
      if (++v158 >= v157)
        return v189;
      continue;
    }
  }
  return v189;
}

void sub_10033BE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;

  if (a18 != v18)
  {
    if (a18)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_10033BE7C(unsigned __int16 *result, uint64_t a2, uint64_t a3, int32x4_t *a4, int32x4_t *a5, int a6, signed int a7, signed int a8)
{
  unsigned int v8;
  int32x4_t v9;
  int v10;
  signed int v11;
  uint64_t v12;
  int32x4_t *v13;
  uint64_t v14;
  uint64_t v15;
  int32x4_t *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int64x2_t v23;
  int32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int *v27;
  uint64_t v28;
  __int32 v29;
  __int32 v30;
  unsigned int v31;
  int32x4_t i;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  int32x4_t *v37;
  uint64_t v38;
  int v39;

  v8 = *result << 16;
  v9 = vdupq_n_s32(v8);
  if (a6 < 4)
  {
    v11 = 0;
    if (a6 <= 0)
      goto LABEL_16;
  }
  else
  {
    v10 = 0;
    v11 = a6 & 0xFFFFFFFC;
    do
    {
      *a5++ = v9;
      v10 += 4;
      a4 += 2;
    }
    while (v10 < a6 - 3);
    if (v11 >= a6)
      goto LABEL_16;
  }
  v12 = (~v11 + a6);
  if (v12 >= 7)
  {
    v14 = v12 + 1;
    v15 = (v12 + 1) & 0x1FFFFFFF8;
    a4 = (int32x4_t *)((char *)a4 + 8 * v15);
    v13 = (int32x4_t *)((char *)a5 + 4 * v15);
    v11 += v15;
    v16 = a5 + 1;
    v17 = v15;
    do
    {
      v16[-1] = v9;
      *v16 = v9;
      v16 += 2;
      v17 -= 8;
    }
    while (v17);
    if (v14 == v15)
    {
      v11 = a6;
      a5 = (int32x4_t *)((char *)a5 + 4 * v15);
      goto LABEL_16;
    }
  }
  else
  {
    v13 = a5;
  }
  a5 = v13;
  do
  {
    a5->i32[0] = v8;
    a5 = (int32x4_t *)((char *)a5 + 4);
    ++v11;
    a4 = (int32x4_t *)((char *)a4 + 8);
  }
  while (a6 != v11);
  v11 = a6;
LABEL_16:
  if (v11 < a7 - 3)
  {
    v18 = (int *)(a3 + 4 * v11 + 8);
    do
    {
      v19 = v18[1];
      if ((int)v19 + 8 > *(_DWORD *)(a3 + 4 * (a8 - 1)))
        break;
      v20 = *a4;
      v21 = a4[1];
      a4 += 2;
      v22 = vmulq_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s32(*(int32x2_t *)&result[*(v18 - 2)], *(int32x2_t *)&result[*(v18 - 1)])), v20);
      v23 = (int64x2_t)vmulq_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s32(*(int32x2_t *)&result[*v18], *(int32x2_t *)&result[v19])), v21);
      v24 = (int32x4_t)vzip2q_s64((int64x2_t)v22, v23);
      v22.i64[1] = v23.i64[0];
      v25 = (int8x16_t)vzip1q_s32(v22, v24);
      v26 = (int8x16_t)vzip2q_s32(v22, v24);
      *(int32x2_t *)v25.i8 = vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), *(int32x2_t *)v25.i8);
      v25.u64[1] = (unint64_t)vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), *(int32x2_t *)v26.i8);
      *a5++ = (int32x4_t)v25;
      v11 += 4;
      v18 += 4;
    }
    while (a7 - 3 > v11);
  }
  if (v11 < a7)
  {
    v27 = (int *)(a3 + 4 * v11);
    do
    {
      v28 = *v27++;
      v29 = a4->i32[0];
      v30 = a4->i32[1];
      a4 = (int32x4_t *)((char *)a4 + 8);
      a5->i32[0] = v29 * result[v28] + v30 * result[v28 + 1];
      a5 = (int32x4_t *)((char *)a5 + 4);
      ++v11;
    }
    while (v11 < a7);
  }
  v31 = result[*(int *)(a3 + 4 * a8 - 4)] << 16;
  for (i = vdupq_n_s32(v31); v11 < a8 - 3; v11 += 4)
    *a5++ = i;
  if (v11 < a8)
  {
    v33 = (~v11 + a8);
    if (v33 < 7)
    {
      v34 = (unsigned int *)a5;
LABEL_31:
      v39 = a8 - v11;
      do
      {
        *v34++ = v31;
        --v39;
      }
      while (v39);
      return result;
    }
    v35 = v33 + 1;
    v36 = (v33 + 1) & 0x1FFFFFFF8;
    v34 = (unsigned int *)a5 + v36;
    v11 += v36;
    v37 = a5 + 1;
    v38 = v36;
    do
    {
      v37[-1] = i;
      *v37 = i;
      v37 += 2;
      v38 -= 8;
    }
    while (v38);
    if (v35 != v36)
      goto LABEL_31;
  }
  return result;
}

int16x4_t *sub_10033C0B4(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  int j;
  int16x4_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int32x4_t *v14;
  unint64_t v15;
  int16x4_t *v16;
  int32x4_t *v17;
  int32x4_t v20;
  int32x4_t v25;
  int i;
  int32x4_t *v27;
  uint64_t v28;
  int16x4_t *v29;
  int32x4_t v32;
  int32x4_t v33;
  int16x4_t *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int32 v41;
  int v42;
  int v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  uint64_t v46;
  int v47;
  int16x4_t *v48;
  int16x4_t *v49;
  unsigned __int16 *v50;
  int32x4_t *v51;
  uint64_t v52;
  int16x4_t *v53;
  int32x4_t v56;
  int32x4_t v57;
  unsigned __int16 *v58;
  unint64_t v59;
  int v60;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_34;
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v13 = 0;
          v14 = a5;
          do
          {
            v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            v16 = result + 2;
            do
            {
              v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (i = 0; i != a6; ++i)
          {
            v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            v28 = a2 & 0xFFFFFFF0;
            v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              v36 = v34->u16[0];
              v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (j = 0; j != a6; ++j)
        {
          v9 = result;
          v10 = a2;
          do
          {
            v11 = v9->u16[0];
            v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7)
      goto LABEL_34;
  }
  if ((int)a2 < 1)
    return result;
  v37 = 2 * a2;
  v38 = a6;
  do
  {
    v39 = 0;
    v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      v41 = *a4;
      if (*a4)
        v41 *= *(unsigned __int16 *)&v40[v39];
      a5->i32[0] = v41;
      v42 = a4[1];
      if (v42)
        v42 *= *(unsigned __int16 *)&v40[v37 + v39];
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      v48 = (int16x4_t *)((char *)result + 2 * v43);
      v49 = v48 + 2;
      v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        v52 = a2 & 0xFFFFFFF0;
        v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v58 = v50;
          v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      v44 = (unsigned __int16 *)result + v43;
      do
      {
        v45 = v44;
        v46 = a2;
        do
        {
          v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

unsigned __int16 *sub_10033C36C(unsigned __int16 *result, uint64_t a2, uint64_t a3, int *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t *v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  int v24;
  int v25;
  int v26;
  int32x4_t *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t *v39;
  uint64_t v40;
  int v41;

  if (a6 >= 1)
  {
    v8 = *result << 16;
    v9 = result[1] << 16;
    if (a6 >= 8)
    {
      v10 = a6 & 0xFFFFFFF8;
      v11 = (unsigned int *)a5 + 2 * v10;
      v12 = vdupq_n_s32(v8);
      v13 = vdupq_n_s32(v9);
      v14 = vzip2q_s32(v12, v13);
      v15 = vzip1q_s32(v12, v13);
      v16 = a5 + 2;
      v17 = v10;
      do
      {
        v16[-2] = v15;
        v16[-1] = v14;
        *v16 = v15;
        v16[1] = v14;
        v16 += 4;
        v17 -= 8;
      }
      while (v17);
      if (v10 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = (int32x4_t *)v11;
        if (a6 < a7)
          goto LABEL_14;
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v10) = 0;
      v11 = (unsigned int *)a5;
    }
    v18 = a6 - v10;
    do
    {
      v19 = v11 + 2;
      *v11 = v8;
      v11[1] = v9;
      v11 += 2;
      --v18;
    }
    while (v18);
    v11 = v19;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    v20 = a7 - (unint64_t)a6;
    v21 = (int *)(a3 + 4 * a6);
    do
    {
      v22 = *v21++;
      v23 = &result[2 * v22];
      a5->i32[0] = *a4 * *v23 + a4[1] * v23[2];
      v24 = *a4;
      v25 = a4[1];
      a4 += 2;
      v26 = v24 * v23[1] + v25 * v23[3];
      v27 = (int32x4_t *)&a5->u64[1];
      a5->i32[1] = v26;
      a5 = (int32x4_t *)((char *)a5 + 8);
      --v20;
    }
    while (v20);
    a5 = v27;
    if (a7 >= a8)
      return result;
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8)
    return result;
LABEL_17:
  v28 = &result[2 * *(int *)(a3 + 4 * (a8 - 1))];
  v29 = *v28 << 16;
  v30 = v28[1] << 16;
  v31 = (~a7 + a8);
  if (v31 < 7)
  {
    v32 = (unsigned int *)a5;
LABEL_22:
    v41 = a8 - a7;
    do
    {
      *v32 = v29;
      v32[1] = v30;
      v32 += 2;
      --v41;
    }
    while (v41);
    return result;
  }
  v33 = v31 + 1;
  v34 = (v31 + 1) & 0x1FFFFFFF8;
  a7 += v34;
  v32 = (unsigned int *)a5 + 2 * v34;
  v35 = vdupq_n_s32(v29);
  v36 = vdupq_n_s32(v30);
  v37 = vzip2q_s32(v35, v36);
  v38 = vzip1q_s32(v35, v36);
  v39 = a5 + 2;
  v40 = v34;
  do
  {
    v39[-2] = v38;
    v39[-1] = v37;
    *v39 = v38;
    v39[1] = v37;
    v39 += 4;
    v40 -= 8;
  }
  while (v40);
  if (v33 != v34)
    goto LABEL_22;
  return result;
}

int16x4_t *sub_10033C50C(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  int j;
  int16x4_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int32x4_t *v14;
  unint64_t v15;
  int16x4_t *v16;
  int32x4_t *v17;
  int32x4_t v20;
  int32x4_t v25;
  int i;
  int32x4_t *v27;
  uint64_t v28;
  int16x4_t *v29;
  int32x4_t v32;
  int32x4_t v33;
  int16x4_t *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int32 v41;
  int v42;
  int v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  uint64_t v46;
  int v47;
  int16x4_t *v48;
  int16x4_t *v49;
  unsigned __int16 *v50;
  int32x4_t *v51;
  uint64_t v52;
  int16x4_t *v53;
  int32x4_t v56;
  int32x4_t v57;
  unsigned __int16 *v58;
  unint64_t v59;
  int v60;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_34;
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v13 = 0;
          v14 = a5;
          do
          {
            v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            v16 = result + 2;
            do
            {
              v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (i = 0; i != a6; ++i)
          {
            v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            v28 = a2 & 0xFFFFFFF0;
            v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              v36 = v34->u16[0];
              v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (j = 0; j != a6; ++j)
        {
          v9 = result;
          v10 = a2;
          do
          {
            v11 = v9->u16[0];
            v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7)
      goto LABEL_34;
  }
  if ((int)a2 < 1)
    return result;
  v37 = 2 * a2;
  v38 = a6;
  do
  {
    v39 = 0;
    v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      v41 = *a4;
      if (*a4)
        v41 *= *(unsigned __int16 *)&v40[v39];
      a5->i32[0] = v41;
      v42 = a4[1];
      if (v42)
        v42 *= *(unsigned __int16 *)&v40[v37 + v39];
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      v48 = (int16x4_t *)((char *)result + 2 * v43);
      v49 = v48 + 2;
      v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        v52 = a2 & 0xFFFFFFF0;
        v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v58 = v50;
          v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      v44 = (unsigned __int16 *)result + v43;
      do
      {
        v45 = v44;
        v46 = a2;
        do
        {
          v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

unsigned __int16 *sub_10033C7C4(unsigned __int16 *result, uint64_t a2, uint64_t a3, int *a4, int *a5, int a6, int a7, int a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int *v18;
  unint64_t v19;
  int *v20;
  int v21;
  unsigned __int16 *v22;
  int v23;
  int v24;
  int v25;
  int *v26;
  unsigned __int16 *v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;

  if (a6 >= 1)
  {
    v8 = *result << 16;
    v9 = result[1] << 16;
    v10 = result[2] << 16;
    if (a6 >= 8)
    {
      LODWORD(v15) = result[2] << 16;
      v11 = a6 & 0xFFFFFFF8;
      LODWORD(v14) = result[1] << 16;
      LODWORD(v13) = *result << 16;
      DWORD1(v13) = v14;
      *((_QWORD *)&v13 + 1) = __PAIR64__(v8, v10);
      DWORD1(v14) = v15;
      *((_QWORD *)&v14 + 1) = __PAIR64__(v9, v8);
      DWORD1(v15) = v13;
      v12 = &a5[3 * v11];
      *((_QWORD *)&v15 + 1) = __PAIR64__(v10, v9);
      v16 = v11;
      do
      {
        *(_OWORD *)a5 = v13;
        *((_OWORD *)a5 + 1) = v14;
        *((_OWORD *)a5 + 2) = v15;
        *((_OWORD *)a5 + 3) = v13;
        *((_OWORD *)a5 + 4) = v14;
        *((_OWORD *)a5 + 5) = v15;
        a5 += 24;
        v16 -= 8;
      }
      while (v16);
      if (v11 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v12;
        if (a6 < a7)
          goto LABEL_14;
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v11) = 0;
      v12 = a5;
    }
    v17 = a6 - v11;
    do
    {
      *v12 = v8;
      v12[1] = v9;
      v18 = v12 + 3;
      v12[2] = v10;
      v12 += 3;
      --v17;
    }
    while (v17);
    v12 = v18;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    v19 = a7 - (unint64_t)a6;
    v20 = (int *)(a3 + 4 * a6);
    do
    {
      v21 = *v20++;
      v22 = &result[3 * v21];
      *a5 = *a4 * *v22 + a4[1] * v22[3];
      a5[1] = *a4 * v22[1] + a4[1] * v22[4];
      v23 = *a4;
      v24 = a4[1];
      a4 += 2;
      v25 = v23 * v22[2] + v24 * v22[5];
      v26 = a5 + 3;
      a5[2] = v25;
      a5 += 3;
      --v19;
    }
    while (v19);
    a5 = v26;
    if (a7 >= a8)
      return result;
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8)
    return result;
LABEL_17:
  v27 = &result[3 * *(int *)(a3 + 4 * (a8 - 1))];
  v28 = *v27 << 16;
  v29 = v27[1] << 16;
  v30 = v27[2] << 16;
  v31 = (~a7 + a8);
  if (v31 < 7)
  {
    v32 = a5;
LABEL_22:
    v38 = a8 - a7;
    do
    {
      *v32 = v28;
      v32[1] = v29;
      v32[2] = v30;
      v32 += 3;
      --v38;
    }
    while (v38);
    return result;
  }
  v33 = v31 + 1;
  *(_QWORD *)&v36 = __PAIR64__(v28, v30);
  a7 += v33 & 0xFFFFFFF8;
  *(_QWORD *)&v35 = __PAIR64__(v30, v29);
  *(_QWORD *)&v34 = __PAIR64__(v29, v28);
  result = (unsigned __int16 *)v30;
  *((_QWORD *)&v34 + 1) = __PAIR64__(v28, v30);
  *((_QWORD *)&v35 + 1) = __PAIR64__(v29, v28);
  v32 = &a5[3 * (v33 & 0x1FFFFFFF8)];
  *((_QWORD *)&v36 + 1) = __PAIR64__(v30, v29);
  v37 = v33 & 0x1FFFFFFF8;
  do
  {
    *(_OWORD *)a5 = v34;
    *((_OWORD *)a5 + 1) = v35;
    *((_OWORD *)a5 + 2) = v36;
    *((_OWORD *)a5 + 3) = v34;
    *((_OWORD *)a5 + 4) = v35;
    *((_OWORD *)a5 + 5) = v36;
    a5 += 24;
    v37 -= 8;
  }
  while (v37);
  if (v33 != (v33 & 0x1FFFFFFF8))
    goto LABEL_22;
  return result;
}

int16x4_t *sub_10033CA70(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  int j;
  int16x4_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int32x4_t *v14;
  unint64_t v15;
  int16x4_t *v16;
  int32x4_t *v17;
  int32x4_t v20;
  int32x4_t v25;
  int i;
  int32x4_t *v27;
  uint64_t v28;
  int16x4_t *v29;
  int32x4_t v32;
  int32x4_t v33;
  int16x4_t *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int32 v41;
  int v42;
  int v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  uint64_t v46;
  int v47;
  int16x4_t *v48;
  int16x4_t *v49;
  unsigned __int16 *v50;
  int32x4_t *v51;
  uint64_t v52;
  int16x4_t *v53;
  int32x4_t v56;
  int32x4_t v57;
  unsigned __int16 *v58;
  unint64_t v59;
  int v60;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_34;
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v13 = 0;
          v14 = a5;
          do
          {
            v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            v16 = result + 2;
            do
            {
              v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (i = 0; i != a6; ++i)
          {
            v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            v28 = a2 & 0xFFFFFFF0;
            v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              v36 = v34->u16[0];
              v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (j = 0; j != a6; ++j)
        {
          v9 = result;
          v10 = a2;
          do
          {
            v11 = v9->u16[0];
            v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7)
      goto LABEL_34;
  }
  if ((int)a2 < 1)
    return result;
  v37 = 2 * a2;
  v38 = a6;
  do
  {
    v39 = 0;
    v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      v41 = *a4;
      if (*a4)
        v41 *= *(unsigned __int16 *)&v40[v39];
      a5->i32[0] = v41;
      v42 = a4[1];
      if (v42)
        v42 *= *(unsigned __int16 *)&v40[v37 + v39];
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      v48 = (int16x4_t *)((char *)result + 2 * v43);
      v49 = v48 + 2;
      v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        v52 = a2 & 0xFFFFFFF0;
        v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v58 = v50;
          v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      v44 = (unsigned __int16 *)result + v43;
      do
      {
        v45 = v44;
        v46 = a2;
        do
        {
          v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

int16x4_t *sub_10033CD28(int16x4_t *result, uint64_t a2, uint64_t a3, int *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  int32x4_t v8;
  uint64_t v9;
  int32x4_t *v10;
  int32x4_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  int v20;
  int32x4_t *v21;
  int32x4_t v22;
  uint64_t v23;
  int32x4_t *v24;
  uint64_t v25;
  uint64_t v26;
  int32x4_t *v27;
  uint64_t v28;
  int v29;

  if (a6 >= 1)
  {
    v8 = vshll_n_s16(*result, 0x10uLL);
    if (a6 >= 8)
    {
      v9 = a6 & 0xFFFFFFF8;
      v10 = &a5[v9];
      v11 = a5 + 4;
      v12 = v9;
      do
      {
        v11[-4] = v8;
        v11[-3] = v8;
        v11[-2] = v8;
        v11[-1] = v8;
        *v11 = v8;
        v11[1] = v8;
        v11[2] = v8;
        v11[3] = v8;
        v11 += 8;
        v12 -= 8;
      }
      while (v12);
      if (v9 == a6)
      {
LABEL_12:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v10;
        if (a6 < a7)
          goto LABEL_13;
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v9) = 0;
      v10 = a5;
    }
    v13 = a6 - v9;
    do
    {
      *v10++ = v8;
      --v13;
    }
    while (v13);
    goto LABEL_12;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_13:
    v14 = a7 - (unint64_t)a6;
    v15 = (int *)(a3 + 4 * a6);
    do
    {
      v16 = *v15++;
      v17 = (unsigned __int16 *)&result[v16];
      a5->i32[0] = *a4 * *v17 + a4[1] * v17[4];
      a5->i32[1] = *a4 * v17[1] + a4[1] * v17[5];
      a5->i32[2] = *a4 * v17[2] + a4[1] * v17[6];
      v18 = *a4;
      v19 = a4[1];
      a4 += 2;
      v20 = v18 * v17[3] + v19 * v17[7];
      v21 = a5 + 1;
      a5->i32[3] = v20;
      ++a5;
      --v14;
    }
    while (v14);
    a5 = v21;
    if (a7 >= a8)
      return result;
    goto LABEL_16;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8)
    return result;
LABEL_16:
  v22 = vshll_n_s16(result[*(int *)(a3 + 4 * (a8 - 1))], 0x10uLL);
  v23 = (~a7 + a8);
  if (v23 < 7)
  {
    v24 = a5;
LABEL_21:
    v29 = a8 - a7;
    do
    {
      *v24++ = v22;
      --v29;
    }
    while (v29);
    return result;
  }
  v25 = v23 + 1;
  v26 = (v23 + 1) & 0x1FFFFFFF8;
  a7 += v26;
  v24 = &a5[v26];
  v27 = a5 + 4;
  v28 = v26;
  do
  {
    v27[-4] = v22;
    v27[-3] = v22;
    v27[-2] = v22;
    v27[-1] = v22;
    *v27 = v22;
    v27[1] = v22;
    v27[2] = v22;
    v27[3] = v22;
    v27 += 8;
    v28 -= 8;
  }
  while (v28);
  if (v25 != v26)
    goto LABEL_21;
  return result;
}

int16x4_t *sub_10033CED0(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  int j;
  int16x4_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int32x4_t *v14;
  unint64_t v15;
  int16x4_t *v16;
  int32x4_t *v17;
  int32x4_t v20;
  int32x4_t v25;
  int i;
  int32x4_t *v27;
  uint64_t v28;
  int16x4_t *v29;
  int32x4_t v32;
  int32x4_t v33;
  int16x4_t *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int32 v41;
  int v42;
  int v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  uint64_t v46;
  int v47;
  int16x4_t *v48;
  int16x4_t *v49;
  unsigned __int16 *v50;
  int32x4_t *v51;
  uint64_t v52;
  int16x4_t *v53;
  int32x4_t v56;
  int32x4_t v57;
  unsigned __int16 *v58;
  unint64_t v59;
  int v60;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_34;
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v13 = 0;
          v14 = a5;
          do
          {
            v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            v16 = result + 2;
            do
            {
              v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (i = 0; i != a6; ++i)
          {
            v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            v28 = a2 & 0xFFFFFFF0;
            v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              v36 = v34->u16[0];
              v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (j = 0; j != a6; ++j)
        {
          v9 = result;
          v10 = a2;
          do
          {
            v11 = v9->u16[0];
            v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7)
      goto LABEL_34;
  }
  if ((int)a2 < 1)
    return result;
  v37 = 2 * a2;
  v38 = a6;
  do
  {
    v39 = 0;
    v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      v41 = *a4;
      if (*a4)
        v41 *= *(unsigned __int16 *)&v40[v39];
      a5->i32[0] = v41;
      v42 = a4[1];
      if (v42)
        v42 *= *(unsigned __int16 *)&v40[v37 + v39];
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      v48 = (int16x4_t *)((char *)result + 2 * v43);
      v49 = v48 + 2;
      v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        v52 = a2 & 0xFFFFFFF0;
        v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v58 = v50;
          v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      v44 = (unsigned __int16 *)result + v43;
      do
      {
        v45 = v44;
        v46 = a2;
        do
        {
          v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

int16x4_t *sub_10033D188(int16x4_t *result, unsigned int a2, uint64_t a3, _DWORD *a4, unint64_t a5, int a6, int a7, int a8)
{
  int j;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  int32x4_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int16x4_t *v18;
  int32x4_t *v19;
  int32x4_t v22;
  int32x4_t v26;
  int i;
  int32x4_t *v28;
  uint64_t v29;
  int16x4_t *v30;
  int32x4_t v33;
  int32x4_t v34;
  unint64_t v35;
  int16x4_t *v36;
  int v37;
  int *v38;
  _DWORD *v39;
  int v40;
  unsigned __int16 *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  uint64_t v52;
  int v53;
  int16x4_t *v54;
  int16x4_t *v55;
  char *v56;
  int32x4_t *v57;
  uint64_t v58;
  int32x4_t v61;
  int32x4_t v62;
  unint64_t v63;
  char *v64;
  int v65;
  uint64_t v66;
  const float *v67;
  int v68;
  uint16x8_t *v70;
  const float *v71;
  int32x4_t v72;
  int32x4_t v73;
  uint64_t v74;
  uint16x8_t v75;
  int32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  int16x4_t *v79;
  int16x4_t *v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 > 0)
      goto LABEL_24;
LABEL_10:
    v12 = (int32x4_t *)a5;
    LODWORD(v13) = a6;
    goto LABEL_42;
  }
  if ((int)a2 > 0)
  {
    if (a2 > 0xF)
    {
      v14 = 4 * (a2 & 0xFFFFFFF0);
      if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
      {
        v15 = 0;
        v16 = a5;
        do
        {
          v17 = 0;
          a5 = v16 + v14;
          v18 = result + 2;
          do
          {
            v19 = (int32x4_t *)(v16 + v17);
            _Q0 = *(int32x4_t *)v18[-2].i8;
            _Q1 = *(int32x4_t *)v18->i8;
            v22 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            v26 = vshll_n_s16(*v18, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            *v19 = v22;
            v19[1] = _Q0;
            v19[2] = v26;
            v19[3] = _Q1;
            v17 += 64;
            v18 += 4;
          }
          while (v14 != v17);
          ++v15;
          v16 += v14;
        }
        while (v15 != a6);
      }
      else
      {
        for (i = 0; i != a6; ++i)
        {
          v28 = (int32x4_t *)(a5 + 32);
          a5 += v14;
          v29 = a2 & 0xFFFFFFF0;
          v30 = result + 2;
          do
          {
            _Q0 = *(int32x4_t *)v30[-2].i8;
            _Q1 = *(int32x4_t *)v30->i8;
            v33 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            v34 = vshll_n_s16(*v30, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            v28[-2] = v33;
            v28[-1] = _Q0;
            *v28 = v34;
            v28[1] = _Q1;
            v28 += 4;
            v30 += 4;
            v29 -= 16;
          }
          while (v29);
          v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          v36 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
          do
          {
            v37 = v36->u16[0];
            v36 = (int16x4_t *)((char *)v36 + 2);
            *(_DWORD *)a5 = v37 << 16;
            a5 += 4;
            --v35;
          }
          while (v35);
        }
      }
    }
    else
    {
      for (j = 0; j != a6; ++j)
      {
        v9 = (unsigned __int16 *)result;
        v10 = a2;
        do
        {
          v11 = *v9++;
          *(_DWORD *)a5 = v11 << 16;
          a5 += 4;
          --v10;
        }
        while (v10);
      }
    }
  }
  a4 += 2 * (a6 - 1) + 2;
  if (a6 >= a7)
    goto LABEL_10;
LABEL_24:
  if ((int)a2 < 1)
  {
    v12 = (int32x4_t *)a5;
    LODWORD(v13) = a7;
    goto LABEL_42;
  }
  v13 = a6;
  if (a2 >= 8)
  {
    v66 = 0;
    v67 = (const float *)a4;
    while (1)
    {
      v68 = *(_DWORD *)(a3 + 4 * v13) * a2;
      if (a5 >= (unint64_t)&a4[2 * v66 + 2] || (unint64_t)v67 >= a5 + 4 * a2)
      {
        v70 = (uint16x8_t *)((char *)result + 2 * v68);
        v12 = (int32x4_t *)(a5 + 4 * (a2 & 0xFFFFFFF8));
        v71 = v67;
        v72 = (int32x4_t)vld1q_dup_f32(v71++);
        v73 = (int32x4_t)vld1q_dup_f32(v71);
        v74 = a2 & 0xFFFFFFF8;
        do
        {
          v75 = *(uint16x8_t *)((char *)v70 + 2 * a2);
          v76 = vmlaq_s32(vmulq_s32(v72, (int32x4_t)vmovl_high_u16(*v70)), v73, (int32x4_t)vmovl_high_u16(v75));
          *(int32x4_t *)a5 = vmlaq_s32(vmulq_s32(v72, (int32x4_t)vmovl_u16(*(uint16x4_t *)v70->i8)), v73, (int32x4_t)vmovl_u16(*(uint16x4_t *)v75.i8));
          *(int32x4_t *)(a5 + 16) = v76;
          a5 += 32;
          ++v70;
          v74 -= 8;
        }
        while (v74);
        v77 = a2 & 0xFFFFFFF8;
        if (v77 == a2)
          goto LABEL_59;
      }
      else
      {
        v77 = 0;
        v12 = (int32x4_t *)a5;
      }
      v78 = 2 * v68;
      v79 = (int16x4_t *)((char *)result + 2 * a2 + 2 * v77 + v78);
      v80 = (int16x4_t *)((char *)result + 2 * v77 + v78);
      v81 = a2 - v77;
      do
      {
        v82 = v80->u16[0];
        v80 = (int16x4_t *)((char *)v80 + 2);
        v83 = *(_DWORD *)v67 * v82;
        v12->i32[0] = v83;
        v84 = v79->u16[0];
        v79 = (int16x4_t *)((char *)v79 + 2);
        v12->i32[0] = v83 + *((_DWORD *)v67 + 1) * v84;
        v12 = (int32x4_t *)((char *)v12 + 4);
        --v81;
      }
      while (v81);
LABEL_59:
      ++v13;
      v67 += 2;
      ++v66;
      a5 = (unint64_t)v12;
      if ((int)v13 >= a7)
        goto LABEL_42;
    }
  }
  v38 = (int *)(a3 + 4 * a6);
  v39 = a4 + 1;
  LODWORD(v13) = a6;
  v12 = (int32x4_t *)a5;
  do
  {
    v40 = *v38++;
    v41 = (unsigned __int16 *)result + (int)(v40 * a2);
    v42 = *(v39 - 1) * *v41;
    v12->i32[0] = v42;
    v12->i32[0] = v42 + *v39 * v41[a2];
    if (a2 == 1)
    {
      v12 = (int32x4_t *)((char *)v12 + 4);
    }
    else
    {
      v43 = *(v39 - 1) * v41[1];
      v12->i32[1] = v43;
      v12->i32[1] = v43 + *v39 * v41[a2 + 1];
      if (a2 == 2)
      {
        v12 = (int32x4_t *)((char *)v12 + 8);
      }
      else
      {
        v44 = *(v39 - 1) * v41[2];
        v12->i32[2] = v44;
        v12->i32[2] = v44 + *v39 * v41[a2 + 2];
        if (a2 == 3)
        {
          v12 = (int32x4_t *)((char *)v12 + 12);
        }
        else
        {
          v45 = *(v39 - 1) * v41[3];
          v12->i32[3] = v45;
          v12->i32[3] = v45 + *v39 * v41[a2 + 3];
          if (a2 == 4)
          {
            ++v12;
          }
          else
          {
            v46 = *(v39 - 1) * v41[4];
            v12[1].i32[0] = v46;
            v12[1].i32[0] = v46 + *v39 * v41[a2 + 4];
            if (a2 == 5)
            {
              v12 = (int32x4_t *)((char *)v12 + 20);
            }
            else
            {
              v47 = *(v39 - 1) * v41[5];
              v12[1].i32[1] = v47;
              v12[1].i32[1] = v47 + *v39 * v41[a2 + 5];
              if (a2 == 6)
              {
                v12 = (int32x4_t *)((char *)v12 + 24);
              }
              else
              {
                v48 = *(v39 - 1) * v41[6];
                v12[1].i32[2] = v48;
                v12[1].i32[2] = v48 + *v39 * v41[a2 + 6];
                v12 = (int32x4_t *)((char *)v12 + 28);
              }
            }
          }
        }
      }
    }
    LODWORD(v13) = v13 + 1;
    v39 += 2;
  }
  while ((int)v13 < a7);
LABEL_42:
  if ((int)v13 < a8 && (int)a2 >= 1)
  {
    v49 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      v54 = (int16x4_t *)((char *)result + 2 * v49);
      v55 = v54 + 2;
      v56 = (char *)v54 + ((2 * a2) & 0x1FFFFFFE0);
      do
      {
        v57 = v12 + 2;
        v12 = (int32x4_t *)((char *)v12 + 4 * (a2 & 0xFFFFFFF0));
        v58 = a2 & 0xFFFFFFF0;
        result = v55;
        do
        {
          _Q0 = *(int32x4_t *)result[-2].i8;
          _Q1 = *(int32x4_t *)result->i8;
          v61 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v62 = vshll_n_s16(*result, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v57[-2] = v61;
          v57[-1] = _Q0;
          *v57 = v62;
          v57[1] = _Q1;
          v57 += 4;
          result += 4;
          v58 -= 16;
        }
        while (v58);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v63 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          v64 = v56;
          do
          {
            v65 = *(unsigned __int16 *)v64;
            v64 += 2;
            result = (int16x4_t *)(v65 << 16);
            v12->i32[0] = (int)result;
            v12 = (int32x4_t *)((char *)v12 + 4);
            --v63;
          }
          while (v63);
        }
        LODWORD(v13) = v13 + 1;
      }
      while ((_DWORD)v13 != a8);
    }
    else
    {
      v50 = (unsigned __int16 *)result + v49;
      do
      {
        v51 = v50;
        v52 = a2;
        do
        {
          v53 = *v51++;
          v12->i32[0] = v53 << 16;
          v12 = (int32x4_t *)((char *)v12 + 4);
          --v52;
        }
        while (v52);
        LODWORD(v13) = v13 + 1;
      }
      while ((_DWORD)v13 != a8);
    }
  }
  return result;
}

int16x4_t *sub_10033D694(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, uint64_t a6, int a7, int a8)
{
  int v8;
  int16x4_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int32x4_t *v14;
  unint64_t v15;
  int16x4_t *v16;
  int32x4_t *v17;
  int32x4_t v20;
  int32x4_t v25;
  int v26;
  int32x4_t *v27;
  uint64_t v28;
  int16x4_t *v29;
  int32x4_t v32;
  int32x4_t v33;
  unint64_t v34;
  int16x4_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __int32 v40;
  int v41;
  int v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  uint64_t v45;
  int v46;
  int16x4_t *v47;
  int16x4_t *v48;
  unsigned __int16 *v49;
  int32x4_t *v50;
  uint64_t v51;
  int16x4_t *v52;
  int32x4_t v55;
  int32x4_t v56;
  unint64_t v57;
  unsigned __int16 *v58;
  int v59;

  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 <= 0)
      goto LABEL_34;
    goto LABEL_24;
  }
  if ((int)a2 > 0)
  {
    if (a2 > 0xF)
    {
      v12 = 4 * (a2 & 0xFFFFFFF0);
      if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
      {
        v13 = 0;
        v14 = a5;
        do
        {
          v15 = 0;
          a5 = (int32x4_t *)((char *)v14 + v12);
          v16 = result + 2;
          do
          {
            v17 = &v14[v15 / 0x10];
            _Q0 = *(int32x4_t *)v16[-2].i8;
            _Q1 = *(int32x4_t *)v16->i8;
            v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            v25 = vshll_n_s16(*v16, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            *v17 = v20;
            v17[1] = _Q0;
            v17[2] = v25;
            v17[3] = _Q1;
            v15 += 64;
            v16 += 4;
          }
          while (v12 != v15);
          ++v13;
          v14 = (int32x4_t *)((char *)v14 + v12);
        }
        while (v13 != (_DWORD)a6);
      }
      else
      {
        v26 = 0;
        do
        {
          v27 = a5 + 2;
          a5 = (int32x4_t *)((char *)a5 + v12);
          v28 = a2 & 0xFFFFFFF0;
          v29 = result + 2;
          do
          {
            _Q0 = *(int32x4_t *)v29[-2].i8;
            _Q1 = *(int32x4_t *)v29->i8;
            v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            v33 = vshll_n_s16(*v29, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            v27[-2] = v32;
            v27[-1] = _Q0;
            *v27 = v33;
            v27[1] = _Q1;
            v27 += 4;
            v29 += 4;
            v28 -= 16;
          }
          while (v28);
          v34 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          v35 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
          do
          {
            v36 = v35->u16[0];
            v35 = (int16x4_t *)((char *)v35 + 2);
            a5->i32[0] = v36 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v34;
          }
          while (v34);
          ++v26;
        }
        while (v26 != (_DWORD)a6);
      }
    }
    else
    {
      v8 = 0;
      do
      {
        v9 = result;
        v10 = a2;
        do
        {
          v11 = v9->u16[0];
          v9 = (int16x4_t *)((char *)v9 + 2);
          a5->i32[0] = v11 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v10;
        }
        while (v10);
        ++v8;
      }
      while (v8 != (_DWORD)a6);
    }
  }
  a4 += 2 * (a6 - 1) + 2;
  if ((int)a6 < a7)
  {
LABEL_24:
    if ((int)a2 < 1)
    {
      LODWORD(a6) = a7;
    }
    else
    {
      v37 = 2 * a2;
      a6 = a6;
      do
      {
        v38 = 0;
        v39 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * a6) * a2);
        do
        {
          v40 = *a4;
          if (*a4)
            v40 *= *(unsigned __int16 *)&v39[v38];
          a5->i32[0] = v40;
          v41 = a4[1];
          if (v41)
            v41 *= *(unsigned __int16 *)&v39[v37 + v38];
          a5->i32[0] = v41 + v40;
          a5 = (int32x4_t *)((char *)a5 + 4);
          v38 += 2;
        }
        while (v37 != v38);
        ++a6;
        a4 += 2;
      }
      while ((int)a6 < a7);
    }
  }
LABEL_34:
  if ((int)a6 < a8 && (int)a2 >= 1)
  {
    v42 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      v47 = (int16x4_t *)((char *)result + 2 * v42);
      v48 = v47 + 2;
      v49 = (unsigned __int16 *)((char *)v47 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        v50 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        v51 = a2 & 0xFFFFFFF0;
        v52 = v48;
        do
        {
          _Q0 = *(int32x4_t *)v52[-2].i8;
          _Q1 = *(int32x4_t *)v52->i8;
          v55 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v56 = vshll_n_s16(*v52, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v50[-2] = v55;
          v50[-1] = _Q0;
          *v50 = v56;
          v50[1] = _Q1;
          v50 += 4;
          v52 += 4;
          v51 -= 16;
        }
        while (v51);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v57 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          v58 = v49;
          do
          {
            v59 = *v58++;
            a5->i32[0] = v59 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v57;
          }
          while (v57);
        }
        LODWORD(a6) = a6 + 1;
      }
      while ((_DWORD)a6 != a8);
    }
    else
    {
      v43 = (unsigned __int16 *)result + v42;
      do
      {
        v44 = v43;
        v45 = a2;
        do
        {
          v46 = *v44++;
          a5->i32[0] = v46 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v45;
        }
        while (v45);
        LODWORD(a6) = a6 + 1;
      }
      while ((_DWORD)a6 != a8);
    }
  }
  return result;
}

uint64_t sub_10033D94C(uint64_t a1, int a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t result;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  sub_100289D28(&v15, a2);
  v14 = 0x3FE0000000000000;
  sub_10028A294(&v15, &v14, &v17);
  sub_10028A2EC((unint64_t *)a1, &v17, (unint64_t *)&v18);
  v13 = 0x3FE0000000000000;
  sub_10028A2C0((unint64_t *)&v18, &v13, (unint64_t *)&v16);
  result = sub_100289FFC(&v16);
  if ((result & 0x80000000) != 0 || (v9 = *(_DWORD *)(a1 + 8), v9 < 2))
  {
    if (*(_DWORD *)(a1 + 12) <= a2 + 1)
      v11 = a2 + 1;
    else
      v11 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v11;
  }
  else
  {
    v10 = v9 - 1;
    if (result >= v10)
    {
      *a3 = v10;
      v12 = *(_DWORD *)(a1 + 16);
      if (v12 >= a2)
        v12 = a2;
      *(_DWORD *)(a1 + 16) = v12;
    }
    else
    {
      *a3 = result;
      sub_100289D28(&v14, result);
      sub_10028A2C0((unint64_t *)&v16, &v14, &v15);
      if ((v15 & 0x8000000000000000) != 0)
      {
        result = 0;
      }
      else
      {
        sub_100289D28(&v17, 0x10000);
        sub_10028A2EC(&v15, &v17, (unint64_t *)&v18);
        result = sub_100289F48(&v18);
      }
      *a4 = 0x10000 - result;
      a4[1] = result;
    }
  }
  return result;
}

void sub_10033DAB0(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

_BYTE *sub_10033DAD4(uint64_t a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64x2_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int32x4_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int16x8_t *v35;
  uint64_t v36;
  uint32x4_t *v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint64x2_t v40;
  uint64x2_t v41;
  uint64x2_t v42;
  uint64x2_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  uint64x2_t v50;
  uint64x2_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int32x4_t v59;
  int8x16_t v60;
  int32x4_t v61;
  int8x16_t v62;
  uint64_t v63;
  _WORD *v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _WORD *v75;
  int *v76;
  _WORD *v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int32x4_t *v84;
  int16x8_t *v85;
  uint64_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  unint64_t v91;
  int16x8_t *v92;
  int16x8_t *v93;
  int16x8_t *v94;
  int *v95;
  uint64_t v96;
  int16x8_t *v97;
  int32x4_t *v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int *v103;
  int16x8_t *v104;
  unint64_t v105;
  int v106;
  int v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _WORD *v113;
  int32x4_t *v114;
  _WORD *v115;
  unint64_t v116;
  int v117;
  int16x8_t *v119;
  int16x8_t *v120;
  int16x8_t *v121;
  uint64_t v122;
  int16x8_t *v123;
  int32x4_t *v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t *v129;
  int16x8_t *v130;
  unint64_t v131;
  int v132;
  _BYTE v133[32];
  _BYTE v134[1024];
  uint64_t v135;

  v4 = 2 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 56);
  bzero(v133, 0x420uLL);
  if (v4 >= 0x109)
    operator new[]();
  LODWORD(v5) = *a2;
  v6 = *(_DWORD *)(a1 + 104);
  if (v6 <= *a2)
    v7 = *a2;
  else
    v7 = *(_DWORD *)(a1 + 104);
  if (a2[1] >= *(_DWORD *)(a1 + 108))
    v8 = *(_DWORD *)(a1 + 108);
  else
    v8 = a2[1];
  if ((int)v5 < v6)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _BYTE *, _QWORD, _QWORD, _QWORD))(a1 + 112))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), v133, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    LODWORD(v5) = *a2;
    v9 = 1;
    v10 = -1;
    if (*a2 >= v7)
      goto LABEL_11;
LABEL_50:
    v71 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
    if ((int)v71 >= 1)
    {
      v72 = (int)v5;
      v74 = *(_QWORD *)(a1 + 32);
      v73 = *(_QWORD *)(a1 + 40);
      if (v71 > 0xF)
      {
        v81 = v71 & 0x7FFFFFF0;
        v82 = v71 - (v71 & 0xFFFFFFF0);
        if (v71 == (v71 & 0xFFFFFFF0))
        {
          v83 = v74 + v73 * (int)v5 + 16;
          do
          {
            v84 = (int32x4_t *)v134;
            v85 = (int16x8_t *)v83;
            v86 = v81;
            do
            {
              v88 = v84[-2];
              v87 = v84[-1];
              v90 = *v84;
              v89 = v84[1];
              v84 += 4;
              v85[-1] = vraddhn_high_s32(vraddhn_s32(v88, (int32x4_t)0), v87, (int32x4_t)0);
              *v85 = vraddhn_high_s32(vraddhn_s32(v90, (int32x4_t)0), v89, (int32x4_t)0);
              v85 += 2;
              v86 -= 16;
            }
            while (v86);
            ++v72;
            v83 += v73;
          }
          while (v72 != v7);
        }
        else
        {
          v91 = v71 >> 4;
          v92 = (int16x8_t *)(v74 + v73 * (int)v5);
          v93 = v92 + 1;
          v94 = &v92[2 * v91];
          v95 = (int *)&v133[64 * v91];
          do
          {
            v96 = v81;
            v97 = v93;
            v98 = (int32x4_t *)v134;
            do
            {
              v100 = v98[-2];
              v99 = v98[-1];
              v102 = *v98;
              v101 = v98[1];
              v98 += 4;
              v97[-1] = vraddhn_high_s32(vraddhn_s32(v100, (int32x4_t)0), v99, (int32x4_t)0);
              *v97 = vraddhn_high_s32(vraddhn_s32(v102, (int32x4_t)0), v101, (int32x4_t)0);
              v97 += 2;
              v96 -= 16;
            }
            while (v96);
            v103 = v95;
            v104 = v94;
            v105 = v82;
            do
            {
              v106 = *v103++;
              v104->i16[0] = (v106 + 0x8000) >> 16;
              v104 = (int16x8_t *)((char *)v104 + 2);
              --v105;
            }
            while (v105);
            ++v72;
            v93 = (int16x8_t *)((char *)v93 + v73);
            v94 = (int16x8_t *)((char *)v94 + v73);
          }
          while (v72 != v7);
        }
      }
      else
      {
        v75 = (_WORD *)(v74 + v73 * (int)v5);
        do
        {
          v76 = (int *)v133;
          v77 = v75;
          v78 = v71;
          do
          {
            v79 = *v76++;
            *v77++ = (v79 + 0x8000) >> 16;
            --v78;
          }
          while (v78);
          ++v72;
          v75 = (_WORD *)((char *)v75 + v73);
        }
        while (v72 != v7);
      }
    }
    LODWORD(v5) = v7;
    if (v7 < v8)
      goto LABEL_12;
    goto LABEL_73;
  }
  v9 = 0;
  v10 = -2;
  if ((int)v5 < v7)
    goto LABEL_50;
LABEL_11:
  if ((int)v5 < v8)
  {
LABEL_12:
    v5 = (int)v5;
    v11 = *(_DWORD *)(a1 + 28);
    v12.i64[0] = 0xFFFFLL;
    v12.i64[1] = 0xFFFFLL;
    while (1)
    {
      v13 = v10;
      v14 = *(_QWORD *)(a1 + 72);
      v15 = v10 + 2;
      v10 = *(_DWORD *)(v14 + 4 * v5);
      if (v10 > v15)
        v15 = *(_DWORD *)(v14 + 4 * v5);
      v16 = v10 + 2;
      if (v11 < v10 + 2)
        v16 = v11;
      if (v15 < v16)
      {
        v17 = v15;
        do
        {
          (*(void (**)(uint64_t))(a1 + 112))(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v17++);
          v10 = *(_DWORD *)(v14 + 4 * v5);
          v9 = (v9 & 1) == 0;
          v18 = v10 + 2;
          v11 = *(_DWORD *)(a1 + 28);
          if (v11 < v10 + 2)
            v18 = *(_DWORD *)(a1 + 28);
        }
        while (v17 < v18);
        v12.i64[0] = 0xFFFFLL;
        v12.i64[1] = 0xFFFFLL;
      }
      v19 = v11 - 2;
      if (v10 <= v11 - 2)
        v20 = v11 - 2;
      else
        v20 = v10;
      v21 = v20 + v9;
      if (v13 > v19)
        v19 = v13;
      v22 = v21 - v19;
      v135 = 0;
      if (v22 >= 0)
        v9 = v22 & 1;
      else
        v9 = -(v22 & 1);
      v23 = *(_QWORD *)(a1 + 88);
      v24 = 2 * v5;
      if (v9 < 1)
      {
        v25 = 0;
        v26 = 0;
      }
      else
      {
        v25 = *(_DWORD *)(v23 + 4 * (v24 | 1));
        v26 = 1;
      }
      LODWORD(v135) = v25;
      v27 = v24 - v9;
      *(_DWORD *)((unint64_t)&v135 | (4 * v26)) = *(_DWORD *)(v23 + 4 * (v26 + v27));
      if (v9 <= 0)
      {
        HIDWORD(v135) = *(_DWORD *)(v23 + 4 * v27 + 4);
        v28 = (int32x4_t *)v133;
        v29 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
        if ((int)v29 < 1)
          goto LABEL_13;
      }
      else
      {
        v28 = (int32x4_t *)v133;
        v29 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
        if ((int)v29 < 1)
          goto LABEL_13;
      }
      v30 = *(_QWORD *)(a1 + 32);
      v31 = *(_QWORD *)(a1 + 40);
      v33 = v135;
      v32 = HIDWORD(v135);
      if (v29 < 8)
      {
        v34 = 0;
LABEL_44:
        v63 = v29 - v34;
        v64 = (_WORD *)(v30 + v31 * v5 + 2 * v34);
        v65 = (unsigned int *)&v133[4 * v34 + 4 * v29];
        v66 = (unsigned int *)&v133[4 * v34];
        do
        {
          v68 = *v66++;
          v67 = v68;
          v69 = *v65++;
          v70 = (v69 * (unint64_t)v32 + v67 * (unint64_t)v33 + 0x80000000) >> 32;
          if (v70 >= 0xFFFF)
            LOWORD(v70) = -1;
          *v64++ = v70;
          --v63;
        }
        while (v63);
        goto LABEL_13;
      }
      v34 = v29 & 0xFFFFFFF8;
      v35 = (int16x8_t *)(v30 + v31 * v5);
      v36 = v34;
      v37 = (uint32x4_t *)v133;
      do
      {
        v38 = v37[1];
        v39 = (uint32x4_t)vdupq_n_s32(v33);
        v40 = vmull_high_u32(v39, *v37);
        v41 = vmull_u32(*(uint32x2_t *)v39.i8, *(uint32x2_t *)v37->i8);
        v42 = vmull_high_u32(v39, v38);
        v43 = vmull_u32(*(uint32x2_t *)v39.i8, *(uint32x2_t *)v38.i8);
        v45 = *(uint32x4_t *)((char *)v37 + 4 * v29);
        v44 = *(uint32x4_t *)((char *)v37 + 4 * v29 + 16);
        v46 = (uint32x4_t)vdupq_n_s32(v32);
        v47 = (int64x2_t)vmlal_u32(v43, *(uint32x2_t *)v46.i8, *(uint32x2_t *)v44.i8);
        v48 = (int64x2_t)vmlal_high_u32(v42, v46, v44);
        v49 = vdupq_n_s64(0x80000000uLL);
        v50 = (uint64x2_t)vaddq_s64((int64x2_t)vmlal_high_u32(v40, v46, v45), v49);
        v51 = (uint64x2_t)vaddq_s64((int64x2_t)vmlal_u32(v41, *(uint32x2_t *)v46.i8, *(uint32x2_t *)v45.i8), v49);
        v52 = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v47, v49), 0x20uLL);
        v53 = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v48, v49), 0x20uLL);
        v54 = (int8x16_t)vshrq_n_u64(v51, 0x20uLL);
        v55 = (int8x16_t)vshrq_n_u64(v50, 0x20uLL);
        v56 = (int8x16_t)vcgtq_u64(v12, (uint64x2_t)v55);
        v57 = (int32x4_t)vornq_s8(vandq_s8(v55, v56), v56);
        v58 = (int8x16_t)vcgtq_u64(v12, (uint64x2_t)v54);
        v59 = (int32x4_t)vornq_s8(vandq_s8(v54, v58), v58);
        v60 = (int8x16_t)vcgtq_u64(v12, (uint64x2_t)v53);
        v61 = (int32x4_t)vornq_s8(vandq_s8(v53, v60), v60);
        v62 = (int8x16_t)vcgtq_u64(v12, (uint64x2_t)v52);
        *v35++ = vuzp1q_s16((int16x8_t)vuzp1q_s32(v59, v57), (int16x8_t)vuzp1q_s32((int32x4_t)vornq_s8(vandq_s8(v52, v62), v62), v61));
        v37 += 2;
        v36 -= 8;
      }
      while (v36);
      if (v34 != v29)
        goto LABEL_44;
LABEL_13:
      if (v8 == (_DWORD)++v5)
      {
        LODWORD(v5) = v8;
        if (v10 + 2 <= v11)
          goto LABEL_58;
LABEL_74:
        v107 = v9 + v11 + ~v10;
        if (v107 >= 0)
          v108 = v107 & 1;
        else
          v108 = -(v107 & 1);
        v28 = (int32x4_t *)&v133[4 * *(_DWORD *)(a1 + 48) * v108 * *(_DWORD *)(a1 + 56)];
        v80 = a2[1];
        if ((int)v5 < (int)v80)
          goto LABEL_78;
        return v133;
      }
    }
  }
LABEL_73:
  v28 = (int32x4_t *)v133;
  v11 = *(_DWORD *)(a1 + 28);
  if (v10 + 2 > v11)
    goto LABEL_74;
LABEL_58:
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _BYTE *, _QWORD, _QWORD, _QWORD))(a1 + 112))(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * (v11 - 1), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), v133, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
  v80 = a2[1];
  if ((int)v5 < (int)v80)
  {
LABEL_78:
    v109 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
    if ((int)v109 >= 1)
    {
      v111 = *(_QWORD *)(a1 + 32);
      v110 = *(_QWORD *)(a1 + 40);
      v112 = (int)v5;
      if (v109 >= 0x10)
      {
        v119 = (int16x8_t *)(v111 + v110 * (int)v5);
        v120 = v119 + 1;
        v121 = &v119[2 * (v109 >> 4)];
        do
        {
          v122 = v109 & 0x7FFFFFF0;
          v123 = v120;
          v124 = v28 + 2;
          do
          {
            v126 = v124[-2];
            v125 = v124[-1];
            v128 = *v124;
            v127 = v124[1];
            v124 += 4;
            v123[-1] = vraddhn_high_s32(vraddhn_s32(v126, (int32x4_t)0), v125, (int32x4_t)0);
            *v123 = vraddhn_high_s32(vraddhn_s32(v128, (int32x4_t)0), v127, (int32x4_t)0);
            v123 += 2;
            v122 -= 16;
          }
          while (v122);
          if (v109 != (v109 & 0x7FFFFFF0))
          {
            v129 = &v28[4 * (v109 >> 4)];
            v130 = v121;
            v131 = v109 - (v109 & 0xFFFFFFF0);
            do
            {
              v132 = v129->i32[0];
              v129 = (int32x4_t *)((char *)v129 + 4);
              v130->i16[0] = (v132 + 0x8000) >> 16;
              v130 = (int16x8_t *)((char *)v130 + 2);
              --v131;
            }
            while (v131);
          }
          ++v112;
          v120 = (int16x8_t *)((char *)v120 + v110);
          v121 = (int16x8_t *)((char *)v121 + v110);
        }
        while (v112 != v80);
      }
      else
      {
        v113 = (_WORD *)(v111 + v110 * (int)v5);
        do
        {
          v114 = v28;
          v115 = v113;
          v116 = v109;
          do
          {
            v117 = v114->i32[0];
            v114 = (int32x4_t *)((char *)v114 + 4);
            *v115++ = (v117 + 0x8000) >> 16;
            --v116;
          }
          while (v116);
          ++v112;
          v113 = (_WORD *)((char *)v113 + v110);
        }
        while (v112 != v80);
      }
    }
  }
  return v133;
}

void sub_10033E1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a12 != v12)
  {
    if (a12)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_10033E220(unsigned __int16 *result, uint64_t a2, uint64_t a3, int *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  int32x4_t v11;
  int32x4_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  int32x4_t v25;
  int32x4_t *v26;
  uint64_t v27;
  int v28;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_15;
    goto LABEL_12;
  }
  v8 = *result << 16;
  if (a6 < 8)
  {
    LODWORD(v9) = 0;
    v10 = (unsigned int *)a5;
LABEL_9:
    v14 = a6 - v9;
    do
    {
      *v10++ = v8;
      --v14;
    }
    while (v14);
    goto LABEL_11;
  }
  v9 = a6 & 0xFFFFFFF8;
  v10 = (unsigned int *)a5 + v9;
  v11 = vdupq_n_s32(v8);
  v12 = a5 + 1;
  v13 = v9;
  do
  {
    v12[-1] = v11;
    *v12 = v11;
    v12 += 2;
    v13 -= 8;
  }
  while (v13);
  if (v9 != a6)
    goto LABEL_9;
LABEL_11:
  a4 += 2 * (a6 - 1) + 2;
  a5 = (int32x4_t *)v10;
  if (a6 >= a7)
    goto LABEL_15;
LABEL_12:
  v15 = a7 - (unint64_t)a6;
  v16 = (int *)(a3 + 4 * a6);
  do
  {
    v17 = *v16++;
    v18 = *a4;
    v19 = a4[1];
    a4 += 2;
    a5->i32[0] = v18 * (__int16)result[v17] + v19 * (__int16)result[v17 + 1];
    a5 = (int32x4_t *)((char *)a5 + 4);
    --v15;
  }
  while (v15);
  a6 = a7;
LABEL_15:
  if (a6 >= a8)
    return result;
  v20 = result[*(int *)(a3 + 4 * (a8 - 1))] << 16;
  v21 = (~a6 + a8);
  if (v21 < 7)
  {
    v22 = (unsigned int *)a5;
LABEL_21:
    v28 = a8 - a6;
    do
    {
      *v22++ = v20;
      --v28;
    }
    while (v28);
    return result;
  }
  v23 = v21 + 1;
  v24 = (v21 + 1) & 0x1FFFFFFF8;
  a6 += v24;
  v22 = (unsigned int *)a5 + v24;
  v25 = vdupq_n_s32(v20);
  v26 = a5 + 1;
  v27 = v24;
  do
  {
    v26[-1] = v25;
    *v26 = v25;
    v26 += 2;
    v27 -= 8;
  }
  while (v27);
  if (v23 != v24)
    goto LABEL_21;
  return result;
}

int16x4_t *sub_10033E35C(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  int j;
  int16x4_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int32x4_t *v14;
  unint64_t v15;
  int16x4_t *v16;
  int32x4_t *v17;
  int32x4_t v20;
  int32x4_t v25;
  int i;
  int32x4_t *v27;
  uint64_t v28;
  int16x4_t *v29;
  int32x4_t v32;
  int32x4_t v33;
  int16x4_t *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int32 v41;
  int v42;
  int v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  uint64_t v46;
  int v47;
  int16x4_t *v48;
  int16x4_t *v49;
  unsigned __int16 *v50;
  int32x4_t *v51;
  uint64_t v52;
  int16x4_t *v53;
  int32x4_t v56;
  int32x4_t v57;
  unsigned __int16 *v58;
  unint64_t v59;
  int v60;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_34;
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v13 = 0;
          v14 = a5;
          do
          {
            v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            v16 = result + 2;
            do
            {
              v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (i = 0; i != a6; ++i)
          {
            v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            v28 = a2 & 0xFFFFFFF0;
            v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              v36 = v34->u16[0];
              v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (j = 0; j != a6; ++j)
        {
          v9 = result;
          v10 = a2;
          do
          {
            v11 = v9->u16[0];
            v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7)
      goto LABEL_34;
  }
  if ((int)a2 < 1)
    return result;
  v37 = 2 * a2;
  v38 = a6;
  do
  {
    v39 = 0;
    v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      v41 = *a4;
      if (*a4)
        v41 *= *(__int16 *)&v40[v39];
      a5->i32[0] = v41;
      v42 = a4[1];
      if (v42)
        v42 *= *(__int16 *)&v40[v37 + v39];
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      v48 = (int16x4_t *)((char *)result + 2 * v43);
      v49 = v48 + 2;
      v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        v52 = a2 & 0xFFFFFFF0;
        v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v58 = v50;
          v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      v44 = (unsigned __int16 *)result + v43;
      do
      {
        v45 = v44;
        v46 = a2;
        do
        {
          v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

unsigned __int16 *sub_10033E614(unsigned __int16 *result, uint64_t a2, uint64_t a3, int *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t *v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  __int16 *v23;
  int v24;
  int v25;
  int v26;
  int32x4_t *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t *v39;
  uint64_t v40;
  int v41;

  if (a6 >= 1)
  {
    v8 = *result << 16;
    v9 = result[1] << 16;
    if (a6 >= 8)
    {
      v10 = a6 & 0xFFFFFFF8;
      v11 = (unsigned int *)a5 + 2 * v10;
      v12 = vdupq_n_s32(v8);
      v13 = vdupq_n_s32(v9);
      v14 = vzip2q_s32(v12, v13);
      v15 = vzip1q_s32(v12, v13);
      v16 = a5 + 2;
      v17 = v10;
      do
      {
        v16[-2] = v15;
        v16[-1] = v14;
        *v16 = v15;
        v16[1] = v14;
        v16 += 4;
        v17 -= 8;
      }
      while (v17);
      if (v10 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = (int32x4_t *)v11;
        if (a6 < a7)
          goto LABEL_14;
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v10) = 0;
      v11 = (unsigned int *)a5;
    }
    v18 = a6 - v10;
    do
    {
      v19 = v11 + 2;
      *v11 = v8;
      v11[1] = v9;
      v11 += 2;
      --v18;
    }
    while (v18);
    v11 = v19;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    v20 = a7 - (unint64_t)a6;
    v21 = (int *)(a3 + 4 * a6);
    do
    {
      v22 = *v21++;
      v23 = (__int16 *)&result[2 * v22];
      a5->i32[0] = *a4 * *v23 + a4[1] * v23[2];
      v24 = *a4;
      v25 = a4[1];
      a4 += 2;
      v26 = v24 * v23[1] + v25 * v23[3];
      v27 = (int32x4_t *)&a5->u64[1];
      a5->i32[1] = v26;
      a5 = (int32x4_t *)((char *)a5 + 8);
      --v20;
    }
    while (v20);
    a5 = v27;
    if (a7 >= a8)
      return result;
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8)
    return result;
LABEL_17:
  v28 = &result[2 * *(int *)(a3 + 4 * (a8 - 1))];
  v29 = *v28 << 16;
  v30 = v28[1] << 16;
  v31 = (~a7 + a8);
  if (v31 < 7)
  {
    v32 = (unsigned int *)a5;
LABEL_22:
    v41 = a8 - a7;
    do
    {
      *v32 = v29;
      v32[1] = v30;
      v32 += 2;
      --v41;
    }
    while (v41);
    return result;
  }
  v33 = v31 + 1;
  v34 = (v31 + 1) & 0x1FFFFFFF8;
  a7 += v34;
  v32 = (unsigned int *)a5 + 2 * v34;
  v35 = vdupq_n_s32(v29);
  v36 = vdupq_n_s32(v30);
  v37 = vzip2q_s32(v35, v36);
  v38 = vzip1q_s32(v35, v36);
  v39 = a5 + 2;
  v40 = v34;
  do
  {
    v39[-2] = v38;
    v39[-1] = v37;
    *v39 = v38;
    v39[1] = v37;
    v39 += 4;
    v40 -= 8;
  }
  while (v40);
  if (v33 != v34)
    goto LABEL_22;
  return result;
}

int16x4_t *sub_10033E7B4(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  int j;
  int16x4_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int32x4_t *v14;
  unint64_t v15;
  int16x4_t *v16;
  int32x4_t *v17;
  int32x4_t v20;
  int32x4_t v25;
  int i;
  int32x4_t *v27;
  uint64_t v28;
  int16x4_t *v29;
  int32x4_t v32;
  int32x4_t v33;
  int16x4_t *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int32 v41;
  int v42;
  int v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  uint64_t v46;
  int v47;
  int16x4_t *v48;
  int16x4_t *v49;
  unsigned __int16 *v50;
  int32x4_t *v51;
  uint64_t v52;
  int16x4_t *v53;
  int32x4_t v56;
  int32x4_t v57;
  unsigned __int16 *v58;
  unint64_t v59;
  int v60;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_34;
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v13 = 0;
          v14 = a5;
          do
          {
            v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            v16 = result + 2;
            do
            {
              v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (i = 0; i != a6; ++i)
          {
            v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            v28 = a2 & 0xFFFFFFF0;
            v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              v36 = v34->u16[0];
              v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (j = 0; j != a6; ++j)
        {
          v9 = result;
          v10 = a2;
          do
          {
            v11 = v9->u16[0];
            v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7)
      goto LABEL_34;
  }
  if ((int)a2 < 1)
    return result;
  v37 = 2 * a2;
  v38 = a6;
  do
  {
    v39 = 0;
    v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      v41 = *a4;
      if (*a4)
        v41 *= *(__int16 *)&v40[v39];
      a5->i32[0] = v41;
      v42 = a4[1];
      if (v42)
        v42 *= *(__int16 *)&v40[v37 + v39];
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      v48 = (int16x4_t *)((char *)result + 2 * v43);
      v49 = v48 + 2;
      v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        v52 = a2 & 0xFFFFFFF0;
        v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v58 = v50;
          v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      v44 = (unsigned __int16 *)result + v43;
      do
      {
        v45 = v44;
        v46 = a2;
        do
        {
          v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

unsigned __int16 *sub_10033EA6C(unsigned __int16 *result, uint64_t a2, uint64_t a3, int *a4, int *a5, int a6, int a7, int a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int *v18;
  unint64_t v19;
  int *v20;
  int v21;
  __int16 *v22;
  int v23;
  int v24;
  int v25;
  int *v26;
  unsigned __int16 *v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;

  if (a6 >= 1)
  {
    v8 = *result << 16;
    v9 = result[1] << 16;
    v10 = result[2] << 16;
    if (a6 >= 8)
    {
      LODWORD(v15) = result[2] << 16;
      v11 = a6 & 0xFFFFFFF8;
      LODWORD(v14) = result[1] << 16;
      LODWORD(v13) = *result << 16;
      DWORD1(v13) = v14;
      *((_QWORD *)&v13 + 1) = __PAIR64__(v8, v10);
      DWORD1(v14) = v15;
      *((_QWORD *)&v14 + 1) = __PAIR64__(v9, v8);
      DWORD1(v15) = v13;
      v12 = &a5[3 * v11];
      *((_QWORD *)&v15 + 1) = __PAIR64__(v10, v9);
      v16 = v11;
      do
      {
        *(_OWORD *)a5 = v13;
        *((_OWORD *)a5 + 1) = v14;
        *((_OWORD *)a5 + 2) = v15;
        *((_OWORD *)a5 + 3) = v13;
        *((_OWORD *)a5 + 4) = v14;
        *((_OWORD *)a5 + 5) = v15;
        a5 += 24;
        v16 -= 8;
      }
      while (v16);
      if (v11 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v12;
        if (a6 < a7)
          goto LABEL_14;
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v11) = 0;
      v12 = a5;
    }
    v17 = a6 - v11;
    do
    {
      *v12 = v8;
      v12[1] = v9;
      v18 = v12 + 3;
      v12[2] = v10;
      v12 += 3;
      --v17;
    }
    while (v17);
    v12 = v18;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    v19 = a7 - (unint64_t)a6;
    v20 = (int *)(a3 + 4 * a6);
    do
    {
      v21 = *v20++;
      v22 = (__int16 *)&result[3 * v21];
      *a5 = *a4 * *v22 + a4[1] * v22[3];
      a5[1] = *a4 * v22[1] + a4[1] * v22[4];
      v23 = *a4;
      v24 = a4[1];
      a4 += 2;
      v25 = v23 * v22[2] + v24 * v22[5];
      v26 = a5 + 3;
      a5[2] = v25;
      a5 += 3;
      --v19;
    }
    while (v19);
    a5 = v26;
    if (a7 >= a8)
      return result;
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8)
    return result;
LABEL_17:
  v27 = &result[3 * *(int *)(a3 + 4 * (a8 - 1))];
  v28 = *v27 << 16;
  v29 = v27[1] << 16;
  v30 = v27[2] << 16;
  v31 = (~a7 + a8);
  if (v31 < 7)
  {
    v32 = a5;
LABEL_22:
    v38 = a8 - a7;
    do
    {
      *v32 = v28;
      v32[1] = v29;
      v32[2] = v30;
      v32 += 3;
      --v38;
    }
    while (v38);
    return result;
  }
  v33 = v31 + 1;
  *(_QWORD *)&v36 = __PAIR64__(v28, v30);
  a7 += v33 & 0xFFFFFFF8;
  *(_QWORD *)&v35 = __PAIR64__(v30, v29);
  *(_QWORD *)&v34 = __PAIR64__(v29, v28);
  result = (unsigned __int16 *)v30;
  *((_QWORD *)&v34 + 1) = __PAIR64__(v28, v30);
  *((_QWORD *)&v35 + 1) = __PAIR64__(v29, v28);
  v32 = &a5[3 * (v33 & 0x1FFFFFFF8)];
  *((_QWORD *)&v36 + 1) = __PAIR64__(v30, v29);
  v37 = v33 & 0x1FFFFFFF8;
  do
  {
    *(_OWORD *)a5 = v34;
    *((_OWORD *)a5 + 1) = v35;
    *((_OWORD *)a5 + 2) = v36;
    *((_OWORD *)a5 + 3) = v34;
    *((_OWORD *)a5 + 4) = v35;
    *((_OWORD *)a5 + 5) = v36;
    a5 += 24;
    v37 -= 8;
  }
  while (v37);
  if (v33 != (v33 & 0x1FFFFFFF8))
    goto LABEL_22;
  return result;
}

int16x4_t *sub_10033ED18(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  int j;
  int16x4_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int32x4_t *v14;
  unint64_t v15;
  int16x4_t *v16;
  int32x4_t *v17;
  int32x4_t v20;
  int32x4_t v25;
  int i;
  int32x4_t *v27;
  uint64_t v28;
  int16x4_t *v29;
  int32x4_t v32;
  int32x4_t v33;
  int16x4_t *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int32 v41;
  int v42;
  int v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  uint64_t v46;
  int v47;
  int16x4_t *v48;
  int16x4_t *v49;
  unsigned __int16 *v50;
  int32x4_t *v51;
  uint64_t v52;
  int16x4_t *v53;
  int32x4_t v56;
  int32x4_t v57;
  unsigned __int16 *v58;
  unint64_t v59;
  int v60;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_34;
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v13 = 0;
          v14 = a5;
          do
          {
            v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            v16 = result + 2;
            do
            {
              v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (i = 0; i != a6; ++i)
          {
            v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            v28 = a2 & 0xFFFFFFF0;
            v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              v36 = v34->u16[0];
              v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (j = 0; j != a6; ++j)
        {
          v9 = result;
          v10 = a2;
          do
          {
            v11 = v9->u16[0];
            v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7)
      goto LABEL_34;
  }
  if ((int)a2 < 1)
    return result;
  v37 = 2 * a2;
  v38 = a6;
  do
  {
    v39 = 0;
    v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      v41 = *a4;
      if (*a4)
        v41 *= *(__int16 *)&v40[v39];
      a5->i32[0] = v41;
      v42 = a4[1];
      if (v42)
        v42 *= *(__int16 *)&v40[v37 + v39];
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      v48 = (int16x4_t *)((char *)result + 2 * v43);
      v49 = v48 + 2;
      v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        v52 = a2 & 0xFFFFFFF0;
        v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v58 = v50;
          v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      v44 = (unsigned __int16 *)result + v43;
      do
      {
        v45 = v44;
        v46 = a2;
        do
        {
          v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

int16x4_t *sub_10033EFD0(int16x4_t *result, uint64_t a2, uint64_t a3, int *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  int32x4_t v8;
  uint64_t v9;
  int32x4_t *v10;
  int32x4_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  __int16 *v17;
  int v18;
  int v19;
  int v20;
  int32x4_t *v21;
  int32x4_t v22;
  uint64_t v23;
  int32x4_t *v24;
  uint64_t v25;
  uint64_t v26;
  int32x4_t *v27;
  uint64_t v28;
  int v29;

  if (a6 >= 1)
  {
    v8 = vshll_n_s16(*result, 0x10uLL);
    if (a6 >= 8)
    {
      v9 = a6 & 0xFFFFFFF8;
      v10 = &a5[v9];
      v11 = a5 + 4;
      v12 = v9;
      do
      {
        v11[-4] = v8;
        v11[-3] = v8;
        v11[-2] = v8;
        v11[-1] = v8;
        *v11 = v8;
        v11[1] = v8;
        v11[2] = v8;
        v11[3] = v8;
        v11 += 8;
        v12 -= 8;
      }
      while (v12);
      if (v9 == a6)
      {
LABEL_12:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v10;
        if (a6 < a7)
          goto LABEL_13;
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v9) = 0;
      v10 = a5;
    }
    v13 = a6 - v9;
    do
    {
      *v10++ = v8;
      --v13;
    }
    while (v13);
    goto LABEL_12;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_13:
    v14 = a7 - (unint64_t)a6;
    v15 = (int *)(a3 + 4 * a6);
    do
    {
      v16 = *v15++;
      v17 = (__int16 *)&result[v16];
      a5->i32[0] = *a4 * *v17 + a4[1] * v17[4];
      a5->i32[1] = *a4 * v17[1] + a4[1] * v17[5];
      a5->i32[2] = *a4 * v17[2] + a4[1] * v17[6];
      v18 = *a4;
      v19 = a4[1];
      a4 += 2;
      v20 = v18 * v17[3] + v19 * v17[7];
      v21 = a5 + 1;
      a5->i32[3] = v20;
      ++a5;
      --v14;
    }
    while (v14);
    a5 = v21;
    if (a7 >= a8)
      return result;
    goto LABEL_16;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8)
    return result;
LABEL_16:
  v22 = vshll_n_s16(result[*(int *)(a3 + 4 * (a8 - 1))], 0x10uLL);
  v23 = (~a7 + a8);
  if (v23 < 7)
  {
    v24 = a5;
LABEL_21:
    v29 = a8 - a7;
    do
    {
      *v24++ = v22;
      --v29;
    }
    while (v29);
    return result;
  }
  v25 = v23 + 1;
  v26 = (v23 + 1) & 0x1FFFFFFF8;
  a7 += v26;
  v24 = &a5[v26];
  v27 = a5 + 4;
  v28 = v26;
  do
  {
    v27[-4] = v22;
    v27[-3] = v22;
    v27[-2] = v22;
    v27[-1] = v22;
    *v27 = v22;
    v27[1] = v22;
    v27[2] = v22;
    v27[3] = v22;
    v27 += 8;
    v28 -= 8;
  }
  while (v28);
  if (v25 != v26)
    goto LABEL_21;
  return result;
}

int16x4_t *sub_10033F178(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  int j;
  int16x4_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int32x4_t *v14;
  unint64_t v15;
  int16x4_t *v16;
  int32x4_t *v17;
  int32x4_t v20;
  int32x4_t v25;
  int i;
  int32x4_t *v27;
  uint64_t v28;
  int16x4_t *v29;
  int32x4_t v32;
  int32x4_t v33;
  int16x4_t *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int32 v41;
  int v42;
  int v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  uint64_t v46;
  int v47;
  int16x4_t *v48;
  int16x4_t *v49;
  unsigned __int16 *v50;
  int32x4_t *v51;
  uint64_t v52;
  int16x4_t *v53;
  int32x4_t v56;
  int32x4_t v57;
  unsigned __int16 *v58;
  unint64_t v59;
  int v60;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_34;
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v13 = 0;
          v14 = a5;
          do
          {
            v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            v16 = result + 2;
            do
            {
              v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (i = 0; i != a6; ++i)
          {
            v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            v28 = a2 & 0xFFFFFFF0;
            v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              v36 = v34->u16[0];
              v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (j = 0; j != a6; ++j)
        {
          v9 = result;
          v10 = a2;
          do
          {
            v11 = v9->u16[0];
            v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7)
      goto LABEL_34;
  }
  if ((int)a2 < 1)
    return result;
  v37 = 2 * a2;
  v38 = a6;
  do
  {
    v39 = 0;
    v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      v41 = *a4;
      if (*a4)
        v41 *= *(__int16 *)&v40[v39];
      a5->i32[0] = v41;
      v42 = a4[1];
      if (v42)
        v42 *= *(__int16 *)&v40[v37 + v39];
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      v48 = (int16x4_t *)((char *)result + 2 * v43);
      v49 = v48 + 2;
      v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        v52 = a2 & 0xFFFFFFF0;
        v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v58 = v50;
          v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      v44 = (unsigned __int16 *)result + v43;
      do
      {
        v45 = v44;
        v46 = a2;
        do
        {
          v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

int16x4_t *sub_10033F430(int16x4_t *result, unsigned int a2, uint64_t a3, _DWORD *a4, unint64_t a5, int a6, int a7, int a8)
{
  int j;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  int32x4_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int16x4_t *v18;
  int32x4_t *v19;
  int32x4_t v22;
  int32x4_t v26;
  int i;
  int32x4_t *v28;
  uint64_t v29;
  int16x4_t *v30;
  int32x4_t v33;
  int32x4_t v34;
  unint64_t v35;
  int16x4_t *v36;
  int v37;
  int *v38;
  _DWORD *v39;
  int v40;
  __int16 *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  uint64_t v52;
  int v53;
  int16x4_t *v54;
  int16x4_t *v55;
  char *v56;
  int32x4_t *v57;
  uint64_t v58;
  int32x4_t v61;
  int32x4_t v62;
  unint64_t v63;
  char *v64;
  int v65;
  uint64_t v66;
  const float *v67;
  int v68;
  int16x8_t *v70;
  const float *v71;
  int32x4_t v72;
  int32x4_t v73;
  uint64_t v74;
  int16x8_t v75;
  int32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  int16x4_t *v79;
  int16x4_t *v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 > 0)
      goto LABEL_24;
LABEL_10:
    v12 = (int32x4_t *)a5;
    LODWORD(v13) = a6;
    goto LABEL_42;
  }
  if ((int)a2 > 0)
  {
    if (a2 > 0xF)
    {
      v14 = 4 * (a2 & 0xFFFFFFF0);
      if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
      {
        v15 = 0;
        v16 = a5;
        do
        {
          v17 = 0;
          a5 = v16 + v14;
          v18 = result + 2;
          do
          {
            v19 = (int32x4_t *)(v16 + v17);
            _Q0 = *(int32x4_t *)v18[-2].i8;
            _Q1 = *(int32x4_t *)v18->i8;
            v22 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            v26 = vshll_n_s16(*v18, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            *v19 = v22;
            v19[1] = _Q0;
            v19[2] = v26;
            v19[3] = _Q1;
            v17 += 64;
            v18 += 4;
          }
          while (v14 != v17);
          ++v15;
          v16 += v14;
        }
        while (v15 != a6);
      }
      else
      {
        for (i = 0; i != a6; ++i)
        {
          v28 = (int32x4_t *)(a5 + 32);
          a5 += v14;
          v29 = a2 & 0xFFFFFFF0;
          v30 = result + 2;
          do
          {
            _Q0 = *(int32x4_t *)v30[-2].i8;
            _Q1 = *(int32x4_t *)v30->i8;
            v33 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            v34 = vshll_n_s16(*v30, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            v28[-2] = v33;
            v28[-1] = _Q0;
            *v28 = v34;
            v28[1] = _Q1;
            v28 += 4;
            v30 += 4;
            v29 -= 16;
          }
          while (v29);
          v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          v36 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
          do
          {
            v37 = v36->u16[0];
            v36 = (int16x4_t *)((char *)v36 + 2);
            *(_DWORD *)a5 = v37 << 16;
            a5 += 4;
            --v35;
          }
          while (v35);
        }
      }
    }
    else
    {
      for (j = 0; j != a6; ++j)
      {
        v9 = (unsigned __int16 *)result;
        v10 = a2;
        do
        {
          v11 = *v9++;
          *(_DWORD *)a5 = v11 << 16;
          a5 += 4;
          --v10;
        }
        while (v10);
      }
    }
  }
  a4 += 2 * (a6 - 1) + 2;
  if (a6 >= a7)
    goto LABEL_10;
LABEL_24:
  if ((int)a2 < 1)
  {
    v12 = (int32x4_t *)a5;
    LODWORD(v13) = a7;
    goto LABEL_42;
  }
  v13 = a6;
  if (a2 >= 8)
  {
    v66 = 0;
    v67 = (const float *)a4;
    while (1)
    {
      v68 = *(_DWORD *)(a3 + 4 * v13) * a2;
      if (a5 >= (unint64_t)&a4[2 * v66 + 2] || (unint64_t)v67 >= a5 + 4 * a2)
      {
        v70 = (int16x8_t *)((char *)result + 2 * v68);
        v12 = (int32x4_t *)(a5 + 4 * (a2 & 0xFFFFFFF8));
        v71 = v67;
        v72 = (int32x4_t)vld1q_dup_f32(v71++);
        v73 = (int32x4_t)vld1q_dup_f32(v71);
        v74 = a2 & 0xFFFFFFF8;
        do
        {
          v75 = *(int16x8_t *)((char *)v70 + 2 * a2);
          v76 = vmlaq_s32(vmulq_s32(v72, vmovl_high_s16(*v70)), v73, vmovl_high_s16(v75));
          *(int32x4_t *)a5 = vmlaq_s32(vmulq_s32(v72, vmovl_s16(*(int16x4_t *)v70->i8)), v73, vmovl_s16(*(int16x4_t *)v75.i8));
          *(int32x4_t *)(a5 + 16) = v76;
          a5 += 32;
          ++v70;
          v74 -= 8;
        }
        while (v74);
        v77 = a2 & 0xFFFFFFF8;
        if (v77 == a2)
          goto LABEL_59;
      }
      else
      {
        v77 = 0;
        v12 = (int32x4_t *)a5;
      }
      v78 = 2 * v68;
      v79 = (int16x4_t *)((char *)result + 2 * a2 + 2 * v77 + v78);
      v80 = (int16x4_t *)((char *)result + 2 * v77 + v78);
      v81 = a2 - v77;
      do
      {
        v82 = v80->i16[0];
        v80 = (int16x4_t *)((char *)v80 + 2);
        v83 = *(_DWORD *)v67 * v82;
        v12->i32[0] = v83;
        v84 = v79->i16[0];
        v79 = (int16x4_t *)((char *)v79 + 2);
        v12->i32[0] = v83 + *((_DWORD *)v67 + 1) * v84;
        v12 = (int32x4_t *)((char *)v12 + 4);
        --v81;
      }
      while (v81);
LABEL_59:
      ++v13;
      v67 += 2;
      ++v66;
      a5 = (unint64_t)v12;
      if ((int)v13 >= a7)
        goto LABEL_42;
    }
  }
  v38 = (int *)(a3 + 4 * a6);
  v39 = a4 + 1;
  LODWORD(v13) = a6;
  v12 = (int32x4_t *)a5;
  do
  {
    v40 = *v38++;
    v41 = (__int16 *)result + (int)(v40 * a2);
    v42 = *(v39 - 1) * *v41;
    v12->i32[0] = v42;
    v12->i32[0] = v42 + *v39 * v41[a2];
    if (a2 == 1)
    {
      v12 = (int32x4_t *)((char *)v12 + 4);
    }
    else
    {
      v43 = *(v39 - 1) * v41[1];
      v12->i32[1] = v43;
      v12->i32[1] = v43 + *v39 * v41[a2 + 1];
      if (a2 == 2)
      {
        v12 = (int32x4_t *)((char *)v12 + 8);
      }
      else
      {
        v44 = *(v39 - 1) * v41[2];
        v12->i32[2] = v44;
        v12->i32[2] = v44 + *v39 * v41[a2 + 2];
        if (a2 == 3)
        {
          v12 = (int32x4_t *)((char *)v12 + 12);
        }
        else
        {
          v45 = *(v39 - 1) * v41[3];
          v12->i32[3] = v45;
          v12->i32[3] = v45 + *v39 * v41[a2 + 3];
          if (a2 == 4)
          {
            ++v12;
          }
          else
          {
            v46 = *(v39 - 1) * v41[4];
            v12[1].i32[0] = v46;
            v12[1].i32[0] = v46 + *v39 * v41[a2 + 4];
            if (a2 == 5)
            {
              v12 = (int32x4_t *)((char *)v12 + 20);
            }
            else
            {
              v47 = *(v39 - 1) * v41[5];
              v12[1].i32[1] = v47;
              v12[1].i32[1] = v47 + *v39 * v41[a2 + 5];
              if (a2 == 6)
              {
                v12 = (int32x4_t *)((char *)v12 + 24);
              }
              else
              {
                v48 = *(v39 - 1) * v41[6];
                v12[1].i32[2] = v48;
                v12[1].i32[2] = v48 + *v39 * v41[a2 + 6];
                v12 = (int32x4_t *)((char *)v12 + 28);
              }
            }
          }
        }
      }
    }
    LODWORD(v13) = v13 + 1;
    v39 += 2;
  }
  while ((int)v13 < a7);
LABEL_42:
  if ((int)v13 < a8 && (int)a2 >= 1)
  {
    v49 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      v54 = (int16x4_t *)((char *)result + 2 * v49);
      v55 = v54 + 2;
      v56 = (char *)v54 + ((2 * a2) & 0x1FFFFFFE0);
      do
      {
        v57 = v12 + 2;
        v12 = (int32x4_t *)((char *)v12 + 4 * (a2 & 0xFFFFFFF0));
        v58 = a2 & 0xFFFFFFF0;
        result = v55;
        do
        {
          _Q0 = *(int32x4_t *)result[-2].i8;
          _Q1 = *(int32x4_t *)result->i8;
          v61 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v62 = vshll_n_s16(*result, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v57[-2] = v61;
          v57[-1] = _Q0;
          *v57 = v62;
          v57[1] = _Q1;
          v57 += 4;
          result += 4;
          v58 -= 16;
        }
        while (v58);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v63 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          v64 = v56;
          do
          {
            v65 = *(unsigned __int16 *)v64;
            v64 += 2;
            result = (int16x4_t *)(v65 << 16);
            v12->i32[0] = (int)result;
            v12 = (int32x4_t *)((char *)v12 + 4);
            --v63;
          }
          while (v63);
        }
        LODWORD(v13) = v13 + 1;
      }
      while ((_DWORD)v13 != a8);
    }
    else
    {
      v50 = (unsigned __int16 *)result + v49;
      do
      {
        v51 = v50;
        v52 = a2;
        do
        {
          v53 = *v51++;
          v12->i32[0] = v53 << 16;
          v12 = (int32x4_t *)((char *)v12 + 4);
          --v52;
        }
        while (v52);
        LODWORD(v13) = v13 + 1;
      }
      while ((_DWORD)v13 != a8);
    }
  }
  return result;
}

int16x4_t *sub_10033F93C(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, uint64_t a6, int a7, int a8)
{
  int v8;
  int16x4_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int32x4_t *v14;
  unint64_t v15;
  int16x4_t *v16;
  int32x4_t *v17;
  int32x4_t v20;
  int32x4_t v25;
  int v26;
  int32x4_t *v27;
  uint64_t v28;
  int16x4_t *v29;
  int32x4_t v32;
  int32x4_t v33;
  unint64_t v34;
  int16x4_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __int32 v40;
  int v41;
  int v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  uint64_t v45;
  int v46;
  int16x4_t *v47;
  int16x4_t *v48;
  unsigned __int16 *v49;
  int32x4_t *v50;
  uint64_t v51;
  int16x4_t *v52;
  int32x4_t v55;
  int32x4_t v56;
  unint64_t v57;
  unsigned __int16 *v58;
  int v59;

  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 <= 0)
      goto LABEL_34;
    goto LABEL_24;
  }
  if ((int)a2 > 0)
  {
    if (a2 > 0xF)
    {
      v12 = 4 * (a2 & 0xFFFFFFF0);
      if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
      {
        v13 = 0;
        v14 = a5;
        do
        {
          v15 = 0;
          a5 = (int32x4_t *)((char *)v14 + v12);
          v16 = result + 2;
          do
          {
            v17 = &v14[v15 / 0x10];
            _Q0 = *(int32x4_t *)v16[-2].i8;
            _Q1 = *(int32x4_t *)v16->i8;
            v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            v25 = vshll_n_s16(*v16, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            *v17 = v20;
            v17[1] = _Q0;
            v17[2] = v25;
            v17[3] = _Q1;
            v15 += 64;
            v16 += 4;
          }
          while (v12 != v15);
          ++v13;
          v14 = (int32x4_t *)((char *)v14 + v12);
        }
        while (v13 != (_DWORD)a6);
      }
      else
      {
        v26 = 0;
        do
        {
          v27 = a5 + 2;
          a5 = (int32x4_t *)((char *)a5 + v12);
          v28 = a2 & 0xFFFFFFF0;
          v29 = result + 2;
          do
          {
            _Q0 = *(int32x4_t *)v29[-2].i8;
            _Q1 = *(int32x4_t *)v29->i8;
            v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            v33 = vshll_n_s16(*v29, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            v27[-2] = v32;
            v27[-1] = _Q0;
            *v27 = v33;
            v27[1] = _Q1;
            v27 += 4;
            v29 += 4;
            v28 -= 16;
          }
          while (v28);
          v34 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          v35 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
          do
          {
            v36 = v35->u16[0];
            v35 = (int16x4_t *)((char *)v35 + 2);
            a5->i32[0] = v36 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v34;
          }
          while (v34);
          ++v26;
        }
        while (v26 != (_DWORD)a6);
      }
    }
    else
    {
      v8 = 0;
      do
      {
        v9 = result;
        v10 = a2;
        do
        {
          v11 = v9->u16[0];
          v9 = (int16x4_t *)((char *)v9 + 2);
          a5->i32[0] = v11 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v10;
        }
        while (v10);
        ++v8;
      }
      while (v8 != (_DWORD)a6);
    }
  }
  a4 += 2 * (a6 - 1) + 2;
  if ((int)a6 < a7)
  {
LABEL_24:
    if ((int)a2 < 1)
    {
      LODWORD(a6) = a7;
    }
    else
    {
      v37 = 2 * a2;
      a6 = a6;
      do
      {
        v38 = 0;
        v39 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * a6) * a2);
        do
        {
          v40 = *a4;
          if (*a4)
            v40 *= *(__int16 *)&v39[v38];
          a5->i32[0] = v40;
          v41 = a4[1];
          if (v41)
            v41 *= *(__int16 *)&v39[v37 + v38];
          a5->i32[0] = v41 + v40;
          a5 = (int32x4_t *)((char *)a5 + 4);
          v38 += 2;
        }
        while (v37 != v38);
        ++a6;
        a4 += 2;
      }
      while ((int)a6 < a7);
    }
  }
LABEL_34:
  if ((int)a6 < a8 && (int)a2 >= 1)
  {
    v42 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      v47 = (int16x4_t *)((char *)result + 2 * v42);
      v48 = v47 + 2;
      v49 = (unsigned __int16 *)((char *)v47 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        v50 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        v51 = a2 & 0xFFFFFFF0;
        v52 = v48;
        do
        {
          _Q0 = *(int32x4_t *)v52[-2].i8;
          _Q1 = *(int32x4_t *)v52->i8;
          v55 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v56 = vshll_n_s16(*v52, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v50[-2] = v55;
          v50[-1] = _Q0;
          *v50 = v56;
          v50[1] = _Q1;
          v50 += 4;
          v52 += 4;
          v51 -= 16;
        }
        while (v51);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          v57 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          v58 = v49;
          do
          {
            v59 = *v58++;
            a5->i32[0] = v59 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v57;
          }
          while (v57);
        }
        LODWORD(a6) = a6 + 1;
      }
      while ((_DWORD)a6 != a8);
    }
    else
    {
      v43 = (unsigned __int16 *)result + v42;
      do
      {
        v44 = v43;
        v45 = a2;
        do
        {
          v46 = *v44++;
          a5->i32[0] = v46 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v45;
        }
        while (v45);
        LODWORD(a6) = a6 + 1;
      }
      while ((_DWORD)a6 != a8);
    }
  }
  return result;
}

void sub_10033FBF8(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

_BYTE *sub_10033FC1C(uint64_t a1, int *a2)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int64x2_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int32x4_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  signed int v33;
  signed int v34;
  uint64_t v35;
  int16x8_t *v36;
  uint64_t v37;
  int32x4_t *v38;
  int32x4_t v39;
  int32x4_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  uint64_t v60;
  _WORD *v61;
  int *v62;
  int *v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _WORD *v72;
  int *v73;
  _WORD *v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int32x4_t *v81;
  int16x8_t *v82;
  uint64_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  unint64_t v88;
  int16x8_t *v89;
  int16x8_t *v90;
  int16x8_t *v91;
  int *v92;
  uint64_t v93;
  int16x8_t *v94;
  int32x4_t *v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int *v100;
  int16x8_t *v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _WORD *v110;
  int32x4_t *v111;
  _WORD *v112;
  unint64_t v113;
  int v114;
  int16x8_t *v116;
  int16x8_t *v117;
  int16x8_t *v118;
  uint64_t v119;
  int16x8_t *v120;
  int32x4_t *v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t *v126;
  int16x8_t *v127;
  unint64_t v128;
  int v129;
  int64x2_t v130;
  int v131;
  _BYTE v132[32];
  _BYTE v133[1024];
  uint64_t v134;

  v4 = 2 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 56);
  bzero(v132, 0x420uLL);
  if (v4 >= 0x109)
    operator new[]();
  v5 = *a2;
  v6 = *(_DWORD *)(a1 + 104);
  if (v6 <= *a2)
    v7 = *a2;
  else
    v7 = *(_DWORD *)(a1 + 104);
  if (a2[1] >= *(_DWORD *)(a1 + 108))
    v8 = *(_DWORD *)(a1 + 108);
  else
    v8 = a2[1];
  if (v5 < v6)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _BYTE *, _QWORD, _QWORD, _QWORD))(a1 + 112))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), v132, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    v5 = *a2;
    v9 = 1;
    v10 = -1;
    if (*a2 >= v7)
      goto LABEL_11;
LABEL_52:
    v68 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
    if ((int)v68 >= 1)
    {
      v69 = v5;
      v71 = *(_QWORD *)(a1 + 32);
      v70 = *(_QWORD *)(a1 + 40);
      if (v68 > 0xF)
      {
        v78 = v68 & 0x7FFFFFF0;
        v79 = v68 - (v68 & 0xFFFFFFF0);
        if (v68 == (v68 & 0xFFFFFFF0))
        {
          v80 = v71 + v70 * v5 + 16;
          do
          {
            v81 = (int32x4_t *)v133;
            v82 = (int16x8_t *)v80;
            v83 = v78;
            do
            {
              v85 = v81[-2];
              v84 = v81[-1];
              v87 = *v81;
              v86 = v81[1];
              v81 += 4;
              v82[-1] = vraddhn_high_s32(vraddhn_s32(v85, (int32x4_t)0), v84, (int32x4_t)0);
              *v82 = vraddhn_high_s32(vraddhn_s32(v87, (int32x4_t)0), v86, (int32x4_t)0);
              v82 += 2;
              v83 -= 16;
            }
            while (v83);
            ++v69;
            v80 += v70;
          }
          while (v69 != v7);
        }
        else
        {
          v88 = v68 >> 4;
          v89 = (int16x8_t *)(v71 + v70 * v5);
          v90 = v89 + 1;
          v91 = &v89[2 * v88];
          v92 = (int *)&v132[64 * v88];
          do
          {
            v93 = v78;
            v94 = v90;
            v95 = (int32x4_t *)v133;
            do
            {
              v97 = v95[-2];
              v96 = v95[-1];
              v99 = *v95;
              v98 = v95[1];
              v95 += 4;
              v94[-1] = vraddhn_high_s32(vraddhn_s32(v97, (int32x4_t)0), v96, (int32x4_t)0);
              *v94 = vraddhn_high_s32(vraddhn_s32(v99, (int32x4_t)0), v98, (int32x4_t)0);
              v94 += 2;
              v93 -= 16;
            }
            while (v93);
            v100 = v92;
            v101 = v91;
            v102 = v79;
            do
            {
              v103 = *v100++;
              v101->i16[0] = (v103 + 0x8000) >> 16;
              v101 = (int16x8_t *)((char *)v101 + 2);
              --v102;
            }
            while (v102);
            ++v69;
            v90 = (int16x8_t *)((char *)v90 + v70);
            v91 = (int16x8_t *)((char *)v91 + v70);
          }
          while (v69 != v7);
        }
      }
      else
      {
        v72 = (_WORD *)(v71 + v70 * v5);
        do
        {
          v73 = (int *)v132;
          v74 = v72;
          v75 = v68;
          do
          {
            v76 = *v73++;
            *v74++ = (v76 + 0x8000) >> 16;
            --v75;
          }
          while (v75);
          ++v69;
          v72 = (_WORD *)((char *)v72 + v70);
        }
        while (v69 != v7);
      }
    }
    v5 = v7;
    if (v7 < v8)
      goto LABEL_12;
    goto LABEL_75;
  }
  v9 = 0;
  v10 = -2;
  if (v5 < v7)
    goto LABEL_52;
LABEL_11:
  if (v5 < v8)
  {
LABEL_12:
    v11 = v5;
    v12 = *(_DWORD *)(a1 + 28);
    v13 = vdupq_n_s64(0xFFFFFFFFFFFF8000);
    v131 = v8;
    v130 = v13;
    while (1)
    {
      v14 = v10;
      v15 = *(_QWORD *)(a1 + 72);
      v16 = v10 + 2;
      v10 = *(_DWORD *)(v15 + 4 * v11);
      if (v10 > v16)
        v16 = *(_DWORD *)(v15 + 4 * v11);
      v17 = v10 + 2;
      if (v12 < v10 + 2)
        v17 = v12;
      if (v16 < v17)
      {
        v18 = v16;
        do
        {
          (*(void (**)(uint64_t))(a1 + 112))(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v18++);
          v10 = *(_DWORD *)(v15 + 4 * v11);
          v9 = (v9 & 1) == 0;
          v19 = v10 + 2;
          v12 = *(_DWORD *)(a1 + 28);
          if (v12 < v10 + 2)
            v19 = *(_DWORD *)(a1 + 28);
        }
        while (v18 < v19);
        v8 = v131;
        v13 = v130;
      }
      v20 = v12 - 2;
      if (v10 <= v12 - 2)
        v21 = v12 - 2;
      else
        v21 = v10;
      v22 = v21 + v9;
      if (v14 > v20)
        v20 = v14;
      v23 = v22 - v20;
      v134 = 0;
      if (v23 >= 0)
        v9 = v23 & 1;
      else
        v9 = -(v23 & 1);
      v24 = *(_QWORD *)(a1 + 88);
      v25 = 2 * v11;
      if (v9 < 1)
      {
        v26 = 0;
        v27 = 0;
      }
      else
      {
        v26 = *(_DWORD *)(v24 + 4 * (v25 | 1));
        v27 = 1;
      }
      LODWORD(v134) = v26;
      v28 = v25 - v9;
      *(_DWORD *)((unint64_t)&v134 | (4 * v27)) = *(_DWORD *)(v24 + 4 * (v27 + v28));
      if (v9 <= 0)
      {
        HIDWORD(v134) = *(_DWORD *)(v24 + 4 * v28 + 4);
        v29 = (int32x4_t *)v132;
        v30 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
        if ((int)v30 < 1)
          goto LABEL_13;
      }
      else
      {
        v29 = (int32x4_t *)v132;
        v30 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
        if ((int)v30 < 1)
          goto LABEL_13;
      }
      v31 = *(_QWORD *)(a1 + 32);
      v32 = *(_QWORD *)(a1 + 40);
      v34 = v134;
      v33 = HIDWORD(v134);
      if (v30 < 8)
      {
        v35 = 0;
LABEL_44:
        v60 = v30 - v35;
        v61 = (_WORD *)(v31 + v32 * v11 + 2 * v35);
        v62 = (int *)&v132[4 * v35 + 4 * v30];
        v63 = (int *)&v132[4 * v35];
        do
        {
          v65 = *v63++;
          v64 = v65;
          v66 = *v62++;
          v67 = (v66 * (uint64_t)v33 + v64 * (uint64_t)v34 + 0x80000000) >> 32;
          if (v67 <= -32768)
            v67 = -32768;
          if (v67 >= 0x7FFF)
            LOWORD(v67) = 0x7FFF;
          *v61++ = v67;
          --v60;
        }
        while (v60);
        goto LABEL_13;
      }
      v35 = v30 & 0xFFFFFFF8;
      v36 = (int16x8_t *)(v31 + v32 * v11);
      v37 = v35;
      v38 = (int32x4_t *)v132;
      do
      {
        v39 = vdupq_n_s32(v34);
        v40 = v38[1];
        v41 = vmull_s32(*(int32x2_t *)v39.i8, *(int32x2_t *)v40.i8);
        v42 = vmull_s32(*(int32x2_t *)v39.i8, *(int32x2_t *)v38->i8);
        v44 = *(int32x4_t *)((char *)v38 + 4 * v30);
        v43 = *(int32x4_t *)((char *)v38 + 4 * v30 + 16);
        v45 = vdupq_n_s32(v33);
        v46 = vmlal_high_s32(vmull_high_s32(v39, v40), v45, v43);
        v47 = vmlal_s32(v41, *(int32x2_t *)v45.i8, *(int32x2_t *)v43.i8);
        v48 = vdupq_n_s64(0x80000000uLL);
        v49 = vaddq_s64(v47, v48);
        v50 = vaddq_s64(v46, v48);
        v51 = vshrq_n_s64(vaddq_s64(vmlal_high_s32(vmull_high_s32(v39, *v38), v45, v44), v48), 0x20uLL);
        v52 = vshrq_n_s64(vaddq_s64(vmlal_s32(v42, *(int32x2_t *)v45.i8, *(int32x2_t *)v44.i8), v48), 0x20uLL);
        v53 = vshrq_n_s64(v50, 0x20uLL);
        v54 = vshrq_n_s64(v49, 0x20uLL);
        v55 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v54, v13), (int8x16_t)v54, (int8x16_t)v13);
        v56 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v53, v13), (int8x16_t)v53, (int8x16_t)v13);
        v57 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v52, v13), (int8x16_t)v52, (int8x16_t)v13);
        v58 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v51, v13), (int8x16_t)v51, (int8x16_t)v13);
        v59 = vdupq_n_s64(0x7FFFuLL);
        *v36++ = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_s64(v59, v57), (int8x16_t)v57, (int8x16_t)v59), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s64(v59, v58), (int8x16_t)v58, (int8x16_t)v59)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_s64(v59, v55), (int8x16_t)v55, (int8x16_t)v59), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s64(v59, v56), (int8x16_t)v56, (int8x16_t)v59)));
        v38 += 2;
        v37 -= 8;
      }
      while (v37);
      if (v35 != v30)
        goto LABEL_44;
LABEL_13:
      if (v8 == (_DWORD)++v11)
      {
        v5 = v8;
        if (v10 + 2 <= v12)
          goto LABEL_60;
LABEL_76:
        v104 = v9 + ~v10 + v12;
        if (v104 >= 0)
          v105 = v104 & 1;
        else
          v105 = -(v104 & 1);
        v29 = (int32x4_t *)&v132[4 * *(_DWORD *)(a1 + 48) * v105 * *(_DWORD *)(a1 + 56)];
        v77 = a2[1];
        if (v5 < (int)v77)
          goto LABEL_80;
        return v132;
      }
    }
  }
LABEL_75:
  v29 = (int32x4_t *)v132;
  v12 = *(_DWORD *)(a1 + 28);
  if (v10 + 2 > v12)
    goto LABEL_76;
LABEL_60:
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _BYTE *, _QWORD, _QWORD, _QWORD))(a1 + 112))(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * (v12 - 1), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), v132, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
  v77 = a2[1];
  if (v5 < (int)v77)
  {
LABEL_80:
    v106 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
    if ((int)v106 >= 1)
    {
      v108 = *(_QWORD *)(a1 + 32);
      v107 = *(_QWORD *)(a1 + 40);
      v109 = v5;
      if (v106 >= 0x10)
      {
        v116 = (int16x8_t *)(v108 + v107 * v5);
        v117 = v116 + 1;
        v118 = &v116[2 * (v106 >> 4)];
        do
        {
          v119 = v106 & 0x7FFFFFF0;
          v120 = v117;
          v121 = v29 + 2;
          do
          {
            v123 = v121[-2];
            v122 = v121[-1];
            v125 = *v121;
            v124 = v121[1];
            v121 += 4;
            v120[-1] = vraddhn_high_s32(vraddhn_s32(v123, (int32x4_t)0), v122, (int32x4_t)0);
            *v120 = vraddhn_high_s32(vraddhn_s32(v125, (int32x4_t)0), v124, (int32x4_t)0);
            v120 += 2;
            v119 -= 16;
          }
          while (v119);
          if (v106 != (v106 & 0x7FFFFFF0))
          {
            v126 = &v29[4 * (v106 >> 4)];
            v127 = v118;
            v128 = v106 - (v106 & 0xFFFFFFF0);
            do
            {
              v129 = v126->i32[0];
              v126 = (int32x4_t *)((char *)v126 + 4);
              v127->i16[0] = (v129 + 0x8000) >> 16;
              v127 = (int16x8_t *)((char *)v127 + 2);
              --v128;
            }
            while (v128);
          }
          ++v109;
          v117 = (int16x8_t *)((char *)v117 + v107);
          v118 = (int16x8_t *)((char *)v118 + v107);
        }
        while (v109 != v77);
      }
      else
      {
        v110 = (_WORD *)(v108 + v107 * v5);
        do
        {
          v111 = v29;
          v112 = v110;
          v113 = v106;
          do
          {
            v114 = v111->i32[0];
            v111 = (int32x4_t *)((char *)v111 + 4);
            *v112++ = (v114 + 0x8000) >> 16;
            --v113;
          }
          while (v113);
          ++v109;
          v110 = (_WORD *)((char *)v110 + v107);
        }
        while (v109 != v77);
      }
    }
  }
  return v132;
}

void sub_100340350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a14 != v14)
  {
    if (a14)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_100340398(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t *a4, int64x2_t *a5, int a6, int a7, int a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  int64x2_t v11;
  int64x2_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  uint64_t v27;
  int v28;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_15;
    goto LABEL_12;
  }
  v8 = (unint64_t)*result << 32;
  if (a6 < 4)
  {
    LODWORD(v9) = 0;
    v10 = (unint64_t *)a5;
LABEL_9:
    v14 = a6 - v9;
    do
    {
      *v10++ = v8;
      --v14;
    }
    while (v14);
    goto LABEL_11;
  }
  v9 = a6 & 0xFFFFFFFC;
  v10 = (unint64_t *)a5 + v9;
  v11 = vdupq_n_s64(v8);
  v12 = a5 + 1;
  v13 = v9;
  do
  {
    v12[-1] = v11;
    *v12 = v11;
    v12 += 2;
    v13 -= 4;
  }
  while (v13);
  if (v9 != a6)
    goto LABEL_9;
LABEL_11:
  a4 += 2 * (a6 - 1) + 2;
  a5 = (int64x2_t *)v10;
  if (a6 >= a7)
    goto LABEL_15;
LABEL_12:
  v15 = a7 - (unint64_t)a6;
  v16 = (int *)(a3 + 4 * a6);
  do
  {
    v17 = *v16++;
    v18 = *a4;
    v19 = a4[1];
    a4 += 2;
    a5->i64[0] = v18 * (int)result[v17] + v19 * (int)result[v17 + 1];
    a5 = (int64x2_t *)((char *)a5 + 8);
    --v15;
  }
  while (v15);
  a6 = a7;
LABEL_15:
  if (a6 >= a8)
    return result;
  v20 = (unint64_t)result[*(int *)(a3 + 4 * (a8 - 1))] << 32;
  v21 = (~a6 + a8);
  if (v21 < 3)
  {
    v22 = (unint64_t *)a5;
LABEL_21:
    v28 = a8 - a6;
    do
    {
      *v22++ = v20;
      --v28;
    }
    while (v28);
    return result;
  }
  v23 = v21 + 1;
  v24 = (v21 + 1) & 0x1FFFFFFFCLL;
  a6 += v24;
  v22 = (unint64_t *)a5 + v24;
  v25 = vdupq_n_s64(v20);
  v26 = a5 + 1;
  v27 = v24;
  do
  {
    v26[-1] = v25;
    *v26 = v25;
    v26 += 2;
    v27 -= 4;
  }
  while (v27);
  if (v23 != v24)
    goto LABEL_21;
  return result;
}

unsigned int *sub_1003404D0(unsigned int *result, unsigned int a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, int a7, int a8)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  int32x2_t *v15;
  int64x2_t *v16;
  int64x2_t v19;
  int64x2_t v24;
  int i;
  int64x2_t *v26;
  uint64_t v27;
  int32x2_t *v28;
  int64x2_t v31;
  int64x2_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  unsigned int *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  int32x2_t *v49;
  unsigned int *v50;
  int64x2_t *v51;
  uint64_t v52;
  int32x2_t *v53;
  int64x2_t v56;
  int64x2_t v57;
  unsigned int *v58;
  uint64_t v59;
  unsigned int v60;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_44;
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 7)
      {
        v10 = a2 & 0xFFFFFFF8;
        v11 = 8 * v10;
        if (a2 == v10)
        {
          v12 = 0;
          v13 = a5;
          do
          {
            v14 = 0;
            a5 = &v13[(unint64_t)v11 / 8];
            v15 = (int32x2_t *)(result + 4);
            do
            {
              v16 = (int64x2_t *)&v13[v14 / 8];
              _Q0 = *(int64x2_t *)v15[-2].i8;
              _Q1 = *(int64x2_t *)v15->i8;
              v19 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              v24 = vshll_n_s32(*v15, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              *v16 = v19;
              v16[1] = _Q0;
              v16[2] = v24;
              v16[3] = _Q1;
              v14 += 64;
              v15 += 4;
            }
            while (v11 != v14);
            ++v12;
            v13 = (unint64_t *)((char *)v13 + v11);
          }
          while (v12 != a6);
        }
        else
        {
          for (i = 0; i != a6; ++i)
          {
            v26 = (int64x2_t *)(a5 + 4);
            a5 = (unint64_t *)((char *)a5 + v11);
            v27 = a2 & 0xFFFFFFF8;
            v28 = (int32x2_t *)(result + 4);
            do
            {
              _Q0 = *(int64x2_t *)v28[-2].i8;
              _Q1 = *(int64x2_t *)v28->i8;
              v31 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              v32 = vshll_n_s32(*v28, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              v26[-2] = v31;
              v26[-1] = _Q0;
              *v26 = v32;
              v26[1] = _Q1;
              v26 += 4;
              v28 += 4;
              v27 -= 8;
            }
            while (v27);
            v33 = (unsigned int *)((char *)result + ((4 * a2) & 0x3FFFFFFE0));
            v34 = a2 - v10;
            do
            {
              v35 = *v33++;
              *a5++ = (unint64_t)v35 << 32;
              --v34;
            }
            while (v34);
          }
        }
      }
      else
      {
        v8 = (unint64_t)*result << 32;
        v9 = a6;
        do
        {
          *a5 = v8;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)result[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)result[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)result[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)result[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)result[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)result[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v9;
        }
        while (v9);
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7)
      goto LABEL_44;
  }
  if ((int)a2 < 1)
    return result;
  v36 = 4 * a2;
  v37 = a6;
  do
  {
    v38 = 0;
    v39 = &result[*(_DWORD *)(a3 + 4 * v37) * a2];
    do
    {
      v40 = *a4;
      if (*a4)
        v40 *= (int)v39[v38 / 4];
      *a5 = v40;
      v41 = a4[1];
      if (v41)
        v41 *= (int)v39[(unint64_t)v36 / 4 + v38 / 4];
      *a5++ = v41 + v40;
      v38 += 4;
    }
    while (v36 != v38);
    ++v37;
    a4 += 2;
  }
  while ((int)v37 < a7);
  a6 = a7;
LABEL_44:
  if ((int)a2 >= 1)
  {
    v42 = a8 - a6;
    if (a8 > a6)
    {
      v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
      if (a2 >= 8)
      {
        v46 = v43;
        v47 = a2 & 0xFFFFFFF8;
        v48 = &result[v46];
        v49 = (int32x2_t *)(v48 + 4);
        v50 = (unsigned int *)((char *)v48 + ((4 * a2) & 0x3FFFFFFE0));
        do
        {
          v51 = (int64x2_t *)(a5 + 4);
          a5 += v47;
          v52 = a2 & 0xFFFFFFF8;
          v53 = v49;
          do
          {
            _Q0 = *(int64x2_t *)v53[-2].i8;
            _Q1 = *(int64x2_t *)v53->i8;
            v56 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
            __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
            v57 = vshll_n_s32(*v53, 0x20uLL);
            __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
            v51[-2] = v56;
            v51[-1] = _Q0;
            *v51 = v57;
            v51[1] = _Q1;
            v51 += 4;
            v53 += 4;
            v52 -= 8;
          }
          while (v52);
          if (a2 != v47)
          {
            v58 = v50;
            v59 = a2 - v47;
            do
            {
              v60 = *v58++;
              *a5++ = (unint64_t)v60 << 32;
              --v59;
            }
            while (v59);
          }
          ++a6;
        }
        while (a6 != a8);
      }
      else
      {
        v44 = &result[v43];
        v45 = (unint64_t)*v44 << 32;
        do
        {
          *a5 = v45;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)v44[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)v44[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)v44[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)v44[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)v44[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)v44[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v42;
        }
        while (v42);
      }
    }
  }
  return result;
}

int32x2_t *sub_1003408C4(int32x2_t *result, uint64_t a2, uint64_t a3, uint64_t *a4, int64x2_t *a5, int a6, int a7, int a8)
{
  int64x2_t v8;
  uint64_t v9;
  int64x2_t *v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t *v29;
  int64x2_t v30;
  uint64_t v31;
  int64x2_t *v32;
  uint64_t v33;
  uint64_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t *v39;
  uint64_t v40;
  int v41;

  if (a6 >= 1)
  {
    v8 = vshll_n_s32(*result, 0x20uLL);
    if (a6 >= 4)
    {
      v9 = a6 & 0xFFFFFFFC;
      v10 = &a5[v9];
      v11 = vdupq_lane_s64(v8.i64[0], 0);
      v12 = vdupq_laneq_s64(v8, 1);
      v13 = vzip2q_s64(v11, v12);
      v14 = vzip1q_s64(v11, v12);
      v15 = a5 + 2;
      v16 = v9;
      do
      {
        v15[-2] = v14;
        v15[-1] = v13;
        *v15 = v14;
        v15[1] = v13;
        v15 += 4;
        v16 -= 4;
      }
      while (v16);
      if (v9 == a6)
      {
LABEL_12:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v10;
        if (a6 < a7)
          goto LABEL_13;
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v9) = 0;
      v10 = a5;
    }
    v17 = a6 - v9;
    do
    {
      *v10++ = v8;
      --v17;
    }
    while (v17);
    goto LABEL_12;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_13:
    v18 = a7 - (unint64_t)a6;
    v19 = (int *)(a3 + 4 * a6);
    do
    {
      v20 = *v19++;
      v21 = (int *)&result[v20];
      v22 = v21[1];
      v23 = *a4 * *v21;
      v25 = v21[2];
      v24 = v21[3];
      a5->i64[0] = v23 + a4[1] * v25;
      v26 = *a4;
      v27 = a4[1];
      a4 += 2;
      v28 = v26 * v22 + v27 * v24;
      v29 = a5 + 1;
      a5->i64[1] = v28;
      ++a5;
      --v18;
    }
    while (v18);
    a5 = v29;
    if (a7 >= a8)
      return result;
    goto LABEL_16;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8)
    return result;
LABEL_16:
  v30 = vshll_n_s32(result[*(int *)(a3 + 4 * (a8 - 1))], 0x20uLL);
  v31 = (~a7 + a8);
  if (v31 < 3)
  {
    v32 = a5;
LABEL_21:
    v41 = a8 - a7;
    do
    {
      *v32++ = v30;
      --v41;
    }
    while (v41);
    return result;
  }
  v33 = v31 + 1;
  v34 = (v31 + 1) & 0x1FFFFFFFCLL;
  a7 += v34;
  v32 = &a5[v34];
  v35 = vdupq_lane_s64(v30.i64[0], 0);
  v36 = vdupq_laneq_s64(v30, 1);
  v37 = vzip2q_s64(v35, v36);
  v38 = vzip1q_s64(v35, v36);
  v39 = a5 + 2;
  v40 = v34;
  do
  {
    v39[-2] = v38;
    v39[-1] = v37;
    *v39 = v38;
    v39[1] = v37;
    v39 += 4;
    v40 -= 4;
  }
  while (v40);
  if (v33 != v34)
    goto LABEL_21;
  return result;
}

unsigned int *sub_100340A3C(unsigned int *result, unsigned int a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, int a7, int a8)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  int32x2_t *v15;
  int64x2_t *v16;
  int64x2_t v19;
  int64x2_t v24;
  int i;
  int64x2_t *v26;
  uint64_t v27;
  int32x2_t *v28;
  int64x2_t v31;
  int64x2_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  unsigned int *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  int32x2_t *v49;
  unsigned int *v50;
  int64x2_t *v51;
  uint64_t v52;
  int32x2_t *v53;
  int64x2_t v56;
  int64x2_t v57;
  unsigned int *v58;
  uint64_t v59;
  unsigned int v60;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_44;
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 7)
      {
        v10 = a2 & 0xFFFFFFF8;
        v11 = 8 * v10;
        if (a2 == v10)
        {
          v12 = 0;
          v13 = a5;
          do
          {
            v14 = 0;
            a5 = &v13[(unint64_t)v11 / 8];
            v15 = (int32x2_t *)(result + 4);
            do
            {
              v16 = (int64x2_t *)&v13[v14 / 8];
              _Q0 = *(int64x2_t *)v15[-2].i8;
              _Q1 = *(int64x2_t *)v15->i8;
              v19 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              v24 = vshll_n_s32(*v15, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              *v16 = v19;
              v16[1] = _Q0;
              v16[2] = v24;
              v16[3] = _Q1;
              v14 += 64;
              v15 += 4;
            }
            while (v11 != v14);
            ++v12;
            v13 = (unint64_t *)((char *)v13 + v11);
          }
          while (v12 != a6);
        }
        else
        {
          for (i = 0; i != a6; ++i)
          {
            v26 = (int64x2_t *)(a5 + 4);
            a5 = (unint64_t *)((char *)a5 + v11);
            v27 = a2 & 0xFFFFFFF8;
            v28 = (int32x2_t *)(result + 4);
            do
            {
              _Q0 = *(int64x2_t *)v28[-2].i8;
              _Q1 = *(int64x2_t *)v28->i8;
              v31 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              v32 = vshll_n_s32(*v28, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              v26[-2] = v31;
              v26[-1] = _Q0;
              *v26 = v32;
              v26[1] = _Q1;
              v26 += 4;
              v28 += 4;
              v27 -= 8;
            }
            while (v27);
            v33 = (unsigned int *)((char *)result + ((4 * a2) & 0x3FFFFFFE0));
            v34 = a2 - v10;
            do
            {
              v35 = *v33++;
              *a5++ = (unint64_t)v35 << 32;
              --v34;
            }
            while (v34);
          }
        }
      }
      else
      {
        v8 = (unint64_t)*result << 32;
        v9 = a6;
        do
        {
          *a5 = v8;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)result[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)result[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)result[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)result[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)result[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)result[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v9;
        }
        while (v9);
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7)
      goto LABEL_44;
  }
  if ((int)a2 < 1)
    return result;
  v36 = 4 * a2;
  v37 = a6;
  do
  {
    v38 = 0;
    v39 = &result[*(_DWORD *)(a3 + 4 * v37) * a2];
    do
    {
      v40 = *a4;
      if (*a4)
        v40 *= (int)v39[v38 / 4];
      *a5 = v40;
      v41 = a4[1];
      if (v41)
        v41 *= (int)v39[(unint64_t)v36 / 4 + v38 / 4];
      *a5++ = v41 + v40;
      v38 += 4;
    }
    while (v36 != v38);
    ++v37;
    a4 += 2;
  }
  while ((int)v37 < a7);
  a6 = a7;
LABEL_44:
  if ((int)a2 >= 1)
  {
    v42 = a8 - a6;
    if (a8 > a6)
    {
      v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
      if (a2 >= 8)
      {
        v46 = v43;
        v47 = a2 & 0xFFFFFFF8;
        v48 = &result[v46];
        v49 = (int32x2_t *)(v48 + 4);
        v50 = (unsigned int *)((char *)v48 + ((4 * a2) & 0x3FFFFFFE0));
        do
        {
          v51 = (int64x2_t *)(a5 + 4);
          a5 += v47;
          v52 = a2 & 0xFFFFFFF8;
          v53 = v49;
          do
          {
            _Q0 = *(int64x2_t *)v53[-2].i8;
            _Q1 = *(int64x2_t *)v53->i8;
            v56 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
            __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
            v57 = vshll_n_s32(*v53, 0x20uLL);
            __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
            v51[-2] = v56;
            v51[-1] = _Q0;
            *v51 = v57;
            v51[1] = _Q1;
            v51 += 4;
            v53 += 4;
            v52 -= 8;
          }
          while (v52);
          if (a2 != v47)
          {
            v58 = v50;
            v59 = a2 - v47;
            do
            {
              v60 = *v58++;
              *a5++ = (unint64_t)v60 << 32;
              --v59;
            }
            while (v59);
          }
          ++a6;
        }
        while (a6 != a8);
      }
      else
      {
        v44 = &result[v43];
        v45 = (unint64_t)*v44 << 32;
        do
        {
          *a5 = v45;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)v44[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)v44[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)v44[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)v44[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)v44[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)v44[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v42;
        }
        while (v42);
      }
    }
  }
  return result;
}

int32x2_t *sub_100340E30(int32x2_t *result, uint64_t a2, uint64_t a3, uint64_t *a4, int64x2_t *a5, int a6, int a7, int a8)
{
  int64x2_t v8;
  unint64_t v9;
  uint64_t v10;
  int64x2_t *v11;
  int64x2_t v12;
  int64x2_t v13;
  int8x16_t v14;
  uint64_t v15;
  int v16;
  int64x2_t *v17;
  unint64_t v18;
  int *v19;
  int v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t *v29;
  int32x2_t *v30;
  int64x2_t v31;
  unint64_t v32;
  uint64_t v33;
  int64x2_t *v34;
  uint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int8x16_t v39;
  uint64_t v40;
  int v41;

  if (a6 >= 1)
  {
    v8 = vshll_n_s32(*result, 0x20uLL);
    v9 = (unint64_t)result[1].u32[0] << 32;
    if (a6 >= 4)
    {
      v10 = a6 & 0xFFFFFFFC;
      v13 = vdupq_n_s64(v9);
      v14 = (int8x16_t)vzip2q_s64(v8, v13);
      v13.i64[1] = v8.i64[0];
      v11 = (int64x2_t *)((char *)a5 + 24 * v10);
      v12.i64[0] = v8.i64[0];
      v12.i64[1] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
      v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
      v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
      v15 = v10;
      do
      {
        *a5 = v12;
        a5[1] = v13;
        a5[2] = (int64x2_t)v14;
        a5[3] = v12;
        a5[4] = v13;
        a5[5] = (int64x2_t)v14;
        a5 += 6;
        v15 -= 4;
      }
      while (v15);
      if (v10 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v11;
        if (a6 < a7)
          goto LABEL_14;
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v10) = 0;
      v11 = a5;
    }
    v16 = a6 - v10;
    do
    {
      *v11 = v8;
      v17 = (int64x2_t *)((char *)v11 + 24);
      v11[1].i64[0] = v9;
      v11 = (int64x2_t *)((char *)v11 + 24);
      --v16;
    }
    while (v16);
    v11 = v17;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    v18 = a7 - (unint64_t)a6;
    v19 = (int *)(a3 + 4 * a6);
    do
    {
      v20 = *v19++;
      v21 = (int *)result + 3 * v20;
      v22 = v21[1];
      v23 = v21[2];
      a5->i64[0] = *a4 * *v21 + a4[1] * v21[3];
      v25 = v21[4];
      v24 = v21[5];
      a5->i64[1] = *a4 * v22 + a4[1] * v25;
      v26 = *a4;
      v27 = a4[1];
      a4 += 2;
      v28 = v26 * v23 + v27 * v24;
      v29 = (int64x2_t *)((char *)a5 + 24);
      a5[1].i64[0] = v28;
      a5 = (int64x2_t *)((char *)a5 + 24);
      --v18;
    }
    while (v18);
    a5 = v29;
    if (a7 >= a8)
      return result;
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8)
    return result;
LABEL_17:
  v30 = (int32x2_t *)((char *)result + 12 * *(int *)(a3 + 4 * (a8 - 1)));
  v31 = vshll_n_s32(*v30, 0x20uLL);
  v32 = (unint64_t)v30[1].u32[0] << 32;
  v33 = (~a7 + a8);
  if (v33 < 3)
  {
    v34 = a5;
LABEL_22:
    v41 = a8 - a7;
    do
    {
      *v34 = v31;
      v34[1].i64[0] = v32;
      v34 = (int64x2_t *)((char *)v34 + 24);
      --v41;
    }
    while (v41);
    return result;
  }
  v35 = v33 + 1;
  v36 = (v33 + 1) & 0x1FFFFFFFCLL;
  a7 += v36;
  v38 = vdupq_n_s64(v32);
  v39 = (int8x16_t)vzip2q_s64(v31, v38);
  v38.i64[1] = v31.i64[0];
  v34 = (int64x2_t *)((char *)a5 + 24 * v36);
  v37.i64[0] = v31.i64[0];
  v37.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
  v38.i64[1] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
  v39.i64[1] = vextq_s8(v39, v39, 8uLL).u64[0];
  v40 = v36;
  do
  {
    *a5 = v37;
    a5[1] = v38;
    a5[2] = (int64x2_t)v39;
    a5[3] = v37;
    a5[4] = v38;
    a5[5] = (int64x2_t)v39;
    a5 += 6;
    v40 -= 4;
  }
  while (v40);
  if (v35 != v36)
    goto LABEL_22;
  return result;
}

unsigned int *sub_100341030(unsigned int *result, unsigned int a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, int a7, int a8)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  int32x2_t *v15;
  int64x2_t *v16;
  int64x2_t v19;
  int64x2_t v24;
  int i;
  int64x2_t *v26;
  uint64_t v27;
  int32x2_t *v28;
  int64x2_t v31;
  int64x2_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  unsigned int *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  int32x2_t *v49;
  unsigned int *v50;
  int64x2_t *v51;
  uint64_t v52;
  int32x2_t *v53;
  int64x2_t v56;
  int64x2_t v57;
  unsigned int *v58;
  uint64_t v59;
  unsigned int v60;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_44;
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 7)
      {
        v10 = a2 & 0xFFFFFFF8;
        v11 = 8 * v10;
        if (a2 == v10)
        {
          v12 = 0;
          v13 = a5;
          do
          {
            v14 = 0;
            a5 = &v13[(unint64_t)v11 / 8];
            v15 = (int32x2_t *)(result + 4);
            do
            {
              v16 = (int64x2_t *)&v13[v14 / 8];
              _Q0 = *(int64x2_t *)v15[-2].i8;
              _Q1 = *(int64x2_t *)v15->i8;
              v19 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              v24 = vshll_n_s32(*v15, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              *v16 = v19;
              v16[1] = _Q0;
              v16[2] = v24;
              v16[3] = _Q1;
              v14 += 64;
              v15 += 4;
            }
            while (v11 != v14);
            ++v12;
            v13 = (unint64_t *)((char *)v13 + v11);
          }
          while (v12 != a6);
        }
        else
        {
          for (i = 0; i != a6; ++i)
          {
            v26 = (int64x2_t *)(a5 + 4);
            a5 = (unint64_t *)((char *)a5 + v11);
            v27 = a2 & 0xFFFFFFF8;
            v28 = (int32x2_t *)(result + 4);
            do
            {
              _Q0 = *(int64x2_t *)v28[-2].i8;
              _Q1 = *(int64x2_t *)v28->i8;
              v31 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              v32 = vshll_n_s32(*v28, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              v26[-2] = v31;
              v26[-1] = _Q0;
              *v26 = v32;
              v26[1] = _Q1;
              v26 += 4;
              v28 += 4;
              v27 -= 8;
            }
            while (v27);
            v33 = (unsigned int *)((char *)result + ((4 * a2) & 0x3FFFFFFE0));
            v34 = a2 - v10;
            do
            {
              v35 = *v33++;
              *a5++ = (unint64_t)v35 << 32;
              --v34;
            }
            while (v34);
          }
        }
      }
      else
      {
        v8 = (unint64_t)*result << 32;
        v9 = a6;
        do
        {
          *a5 = v8;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)result[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)result[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)result[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)result[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)result[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)result[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v9;
        }
        while (v9);
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7)
      goto LABEL_44;
  }
  if ((int)a2 < 1)
    return result;
  v36 = 4 * a2;
  v37 = a6;
  do
  {
    v38 = 0;
    v39 = &result[*(_DWORD *)(a3 + 4 * v37) * a2];
    do
    {
      v40 = *a4;
      if (*a4)
        v40 *= (int)v39[v38 / 4];
      *a5 = v40;
      v41 = a4[1];
      if (v41)
        v41 *= (int)v39[(unint64_t)v36 / 4 + v38 / 4];
      *a5++ = v41 + v40;
      v38 += 4;
    }
    while (v36 != v38);
    ++v37;
    a4 += 2;
  }
  while ((int)v37 < a7);
  a6 = a7;
LABEL_44:
  if ((int)a2 >= 1)
  {
    v42 = a8 - a6;
    if (a8 > a6)
    {
      v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
      if (a2 >= 8)
      {
        v46 = v43;
        v47 = a2 & 0xFFFFFFF8;
        v48 = &result[v46];
        v49 = (int32x2_t *)(v48 + 4);
        v50 = (unsigned int *)((char *)v48 + ((4 * a2) & 0x3FFFFFFE0));
        do
        {
          v51 = (int64x2_t *)(a5 + 4);
          a5 += v47;
          v52 = a2 & 0xFFFFFFF8;
          v53 = v49;
          do
          {
            _Q0 = *(int64x2_t *)v53[-2].i8;
            _Q1 = *(int64x2_t *)v53->i8;
            v56 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
            __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
            v57 = vshll_n_s32(*v53, 0x20uLL);
            __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
            v51[-2] = v56;
            v51[-1] = _Q0;
            *v51 = v57;
            v51[1] = _Q1;
            v51 += 4;
            v53 += 4;
            v52 -= 8;
          }
          while (v52);
          if (a2 != v47)
          {
            v58 = v50;
            v59 = a2 - v47;
            do
            {
              v60 = *v58++;
              *a5++ = (unint64_t)v60 << 32;
              --v59;
            }
            while (v59);
          }
          ++a6;
        }
        while (a6 != a8);
      }
      else
      {
        v44 = &result[v43];
        v45 = (unint64_t)*v44 << 32;
        do
        {
          *a5 = v45;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)v44[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)v44[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)v44[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)v44[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)v44[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)v44[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v42;
        }
        while (v42);
      }
    }
  }
  return result;
}

int32x2_t *sub_100341424(int32x2_t *result, uint64_t a2, uint64_t a3, uint64_t *a4, int64x2_t *a5, int a6, int a7, int a8)
{
  int64x2_t v8;
  int64x2_t v9;
  uint64_t v10;
  int64x2_t *v11;
  int64x2_t *v12;
  uint64_t v13;
  int v14;
  int64x2_t *v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t *v29;
  int32x2_t *v30;
  int64x2_t v31;
  int64x2_t v32;
  uint64_t v33;
  int64x2_t *v34;
  uint64_t v35;
  uint64_t v36;
  int64x2_t *v37;
  uint64_t v38;
  int v39;

  if (a6 >= 1)
  {
    v8 = vshll_n_s32(*result, 0x20uLL);
    v9 = vshll_n_s32(result[1], 0x20uLL);
    if (a6 >= 4)
    {
      v10 = a6 & 0xFFFFFFFC;
      v11 = &a5[2 * v10];
      v12 = a5 + 4;
      v13 = v10;
      do
      {
        v12[-4] = v8;
        v12[-3] = v9;
        v12[-2] = v8;
        v12[-1] = v9;
        *v12 = v8;
        v12[1] = v9;
        v12[2] = v8;
        v12[3] = v9;
        v12 += 8;
        v13 -= 4;
      }
      while (v13);
      if (v10 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v11;
        if (a6 < a7)
          goto LABEL_14;
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v10) = 0;
      v11 = a5;
    }
    v14 = a6 - v10;
    do
    {
      v15 = v11 + 2;
      *v11 = v8;
      v11[1] = v9;
      v11 += 2;
      --v14;
    }
    while (v14);
    v11 = v15;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    v16 = a7 - (unint64_t)a6;
    v17 = (int *)(a3 + 4 * a6);
    do
    {
      v18 = *v17++;
      v19 = (int *)&result[2 * v18];
      v20 = v19[1];
      v21 = v19[5];
      a5->i64[0] = *a4 * *v19 + a4[1] * v19[4];
      a5->i64[1] = *a4 * v20 + a4[1] * v21;
      v22 = v19[3];
      v23 = *a4 * v19[2];
      v25 = v19[6];
      v24 = v19[7];
      a5[1].i64[0] = v23 + a4[1] * v25;
      v26 = *a4;
      v27 = a4[1];
      a4 += 2;
      v28 = v26 * v22 + v27 * v24;
      v29 = a5 + 2;
      a5[1].i64[1] = v28;
      a5 += 2;
      --v16;
    }
    while (v16);
    a5 = v29;
    if (a7 >= a8)
      return result;
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8)
    return result;
LABEL_17:
  v30 = &result[2 * *(int *)(a3 + 4 * (a8 - 1))];
  v31 = vshll_n_s32(*v30, 0x20uLL);
  v32 = vshll_n_s32(v30[1], 0x20uLL);
  v33 = (~a7 + a8);
  if (v33 < 3)
  {
    v34 = a5;
LABEL_22:
    v39 = a8 - a7;
    do
    {
      *v34 = v31;
      v34[1] = v32;
      v34 += 2;
      --v39;
    }
    while (v39);
    return result;
  }
  v35 = v33 + 1;
  v36 = (v33 + 1) & 0x1FFFFFFFCLL;
  a7 += v36;
  v34 = &a5[2 * v36];
  v37 = a5 + 4;
  v38 = v36;
  do
  {
    v37[-4] = v31;
    v37[-3] = v32;
    v37[-2] = v31;
    v37[-1] = v32;
    *v37 = v31;
    v37[1] = v32;
    v37[2] = v31;
    v37[3] = v32;
    v37 += 8;
    v38 -= 4;
  }
  while (v38);
  if (v35 != v36)
    goto LABEL_22;
  return result;
}

unsigned int *sub_1003415D4(unsigned int *result, unsigned int a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, int a7, int a8)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  int32x2_t *v15;
  int64x2_t *v16;
  int64x2_t v19;
  int64x2_t v24;
  int i;
  int64x2_t *v26;
  uint64_t v27;
  int32x2_t *v28;
  int64x2_t v31;
  int64x2_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  unsigned int *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  int32x2_t *v49;
  unsigned int *v50;
  int64x2_t *v51;
  uint64_t v52;
  int32x2_t *v53;
  int64x2_t v56;
  int64x2_t v57;
  unsigned int *v58;
  uint64_t v59;
  unsigned int v60;

  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0)
      goto LABEL_44;
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 7)
      {
        v10 = a2 & 0xFFFFFFF8;
        v11 = 8 * v10;
        if (a2 == v10)
        {
          v12 = 0;
          v13 = a5;
          do
          {
            v14 = 0;
            a5 = &v13[(unint64_t)v11 / 8];
            v15 = (int32x2_t *)(result + 4);
            do
            {
              v16 = (int64x2_t *)&v13[v14 / 8];
              _Q0 = *(int64x2_t *)v15[-2].i8;
              _Q1 = *(int64x2_t *)v15->i8;
              v19 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              v24 = vshll_n_s32(*v15, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              *v16 = v19;
              v16[1] = _Q0;
              v16[2] = v24;
              v16[3] = _Q1;
              v14 += 64;
              v15 += 4;
            }
            while (v11 != v14);
            ++v12;
            v13 = (unint64_t *)((char *)v13 + v11);
          }
          while (v12 != a6);
        }
        else
        {
          for (i = 0; i != a6; ++i)
          {
            v26 = (int64x2_t *)(a5 + 4);
            a5 = (unint64_t *)((char *)a5 + v11);
            v27 = a2 & 0xFFFFFFF8;
            v28 = (int32x2_t *)(result + 4);
            do
            {
              _Q0 = *(int64x2_t *)v28[-2].i8;
              _Q1 = *(int64x2_t *)v28->i8;
              v31 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              v32 = vshll_n_s32(*v28, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              v26[-2] = v31;
              v26[-1] = _Q0;
              *v26 = v32;
              v26[1] = _Q1;
              v26 += 4;
              v28 += 4;
              v27 -= 8;
            }
            while (v27);
            v33 = (unsigned int *)((char *)result + ((4 * a2) & 0x3FFFFFFE0));
            v34 = a2 - v10;
            do
            {
              v35 = *v33++;
              *a5++ = (unint64_t)v35 << 32;
              --v34;
            }
            while (v34);
          }
        }
      }
      else
      {
        v8 = (unint64_t)*result << 32;
        v9 = a6;
        do
        {
          *a5 = v8;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)result[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)result[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)result[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)result[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)result[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)result[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v9;
        }
        while (v9);
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7)
      goto LABEL_44;
  }
  if ((int)a2 < 1)
    return result;
  v36 = 4 * a2;
  v37 = a6;
  do
  {
    v38 = 0;
    v39 = &result[*(_DWORD *)(a3 + 4 * v37) * a2];
    do
    {
      v40 = *a4;
      if (*a4)
        v40 *= (int)v39[v38 / 4];
      *a5 = v40;
      v41 = a4[1];
      if (v41)
        v41 *= (int)v39[(unint64_t)v36 / 4 + v38 / 4];
      *a5++ = v41 + v40;
      v38 += 4;
    }
    while (v36 != v38);
    ++v37;
    a4 += 2;
  }
  while ((int)v37 < a7);
  a6 = a7;
LABEL_44:
  if ((int)a2 >= 1)
  {
    v42 = a8 - a6;
    if (a8 > a6)
    {
      v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
      if (a2 >= 8)
      {
        v46 = v43;
        v47 = a2 & 0xFFFFFFF8;
        v48 = &result[v46];
        v49 = (int32x2_t *)(v48 + 4);
        v50 = (unsigned int *)((char *)v48 + ((4 * a2) & 0x3FFFFFFE0));
        do
        {
          v51 = (int64x2_t *)(a5 + 4);
          a5 += v47;
          v52 = a2 & 0xFFFFFFF8;
          v53 = v49;
          do
          {
            _Q0 = *(int64x2_t *)v53[-2].i8;
            _Q1 = *(int64x2_t *)v53->i8;
            v56 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
            __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
            v57 = vshll_n_s32(*v53, 0x20uLL);
            __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
            v51[-2] = v56;
            v51[-1] = _Q0;
            *v51 = v57;
            v51[1] = _Q1;
            v51 += 4;
            v53 += 4;
            v52 -= 8;
          }
          while (v52);
          if (a2 != v47)
          {
            v58 = v50;
            v59 = a2 - v47;
            do
            {
              v60 = *v58++;
              *a5++ = (unint64_t)v60 << 32;
              --v59;
            }
            while (v59);
          }
          ++a6;
        }
        while (a6 != a8);
      }
      else
      {
        v44 = &result[v43];
        v45 = (unint64_t)*v44 << 32;
        do
        {
          *a5 = v45;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)v44[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)v44[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)v44[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)v44[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)v44[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)v44[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v42;
        }
        while (v42);
      }
    }
  }
  return result;
}

unsigned int *sub_1003419C8(unsigned int *result, unsigned int a2, uint64_t a3, _QWORD *a4, unint64_t *a5, uint64_t a6, int a7, int a8)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  int32x2_t *v15;
  int64x2_t *v16;
  int64x2_t v19;
  int64x2_t v24;
  int v25;
  int64x2_t *v26;
  uint64_t v27;
  int32x2_t *v28;
  int64x2_t v31;
  int64x2_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  int v40;
  int v41;
  unsigned int *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  int32x2_t *v47;
  unsigned int *v48;
  int64x2_t *v49;
  uint64_t v50;
  int32x2_t *v51;
  int64x2_t v54;
  int64x2_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;

  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 <= 0)
      goto LABEL_39;
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 7)
      {
        v10 = a2 & 0xFFFFFFF8;
        v11 = 8 * v10;
        if (a2 == v10)
        {
          v12 = 0;
          v13 = a5;
          do
          {
            v14 = 0;
            a5 = &v13[(unint64_t)v11 / 8];
            v15 = (int32x2_t *)(result + 4);
            do
            {
              v16 = (int64x2_t *)&v13[v14 / 8];
              _Q0 = *(int64x2_t *)v15[-2].i8;
              _Q1 = *(int64x2_t *)v15->i8;
              v19 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              v24 = vshll_n_s32(*v15, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              *v16 = v19;
              v16[1] = _Q0;
              v16[2] = v24;
              v16[3] = _Q1;
              v14 += 64;
              v15 += 4;
            }
            while (v11 != v14);
            ++v12;
            v13 = (unint64_t *)((char *)v13 + v11);
          }
          while (v12 != (_DWORD)a6);
        }
        else
        {
          v25 = 0;
          do
          {
            v26 = (int64x2_t *)(a5 + 4);
            a5 = (unint64_t *)((char *)a5 + v11);
            v27 = a2 & 0xFFFFFFF8;
            v28 = (int32x2_t *)(result + 4);
            do
            {
              _Q0 = *(int64x2_t *)v28[-2].i8;
              _Q1 = *(int64x2_t *)v28->i8;
              v31 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              v32 = vshll_n_s32(*v28, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              v26[-2] = v31;
              v26[-1] = _Q0;
              *v26 = v32;
              v26[1] = _Q1;
              v26 += 4;
              v28 += 4;
              v27 -= 8;
            }
            while (v27);
            v33 = a2 - v10;
            v34 = (unsigned int *)((char *)result + ((4 * a2) & 0x3FFFFFFE0));
            do
            {
              v35 = *v34++;
              *a5++ = (unint64_t)v35 << 32;
              --v33;
            }
            while (v33);
            ++v25;
          }
          while (v25 != (_DWORD)a6);
        }
      }
      else
      {
        v8 = (unint64_t)*result << 32;
        v9 = a6;
        do
        {
          *a5 = v8;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)result[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)result[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)result[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)result[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)result[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)result[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v9;
        }
        while (v9);
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if ((int)a6 >= a7)
      goto LABEL_39;
  }
  if ((int)a2 < 1)
  {
    LODWORD(a6) = a7;
    v40 = a8 - a7;
    if (a8 <= a7)
      return result;
    goto LABEL_40;
  }
  v36 = 4 * a2;
  a6 = a6;
  do
  {
    v37 = 0;
    v38 = &result[*(_DWORD *)(a3 + 4 * a6) * a2];
    do
    {
      v39 = *a4 * (int)v38[v37 / 4];
      *a5 = v39;
      *a5++ = v39 + a4[1] * (int)v38[(unint64_t)v36 / 4 + v37 / 4];
      v37 += 4;
    }
    while (v36 != v37);
    ++a6;
    a4 += 2;
  }
  while ((int)a6 < a7);
LABEL_39:
  v40 = a8 - a6;
  if (a8 <= (int)a6)
    return result;
LABEL_40:
  if ((int)a2 >= 1)
  {
    v41 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 8)
    {
      v44 = v41;
      v45 = a2 & 0xFFFFFFF8;
      v46 = &result[v44];
      v47 = (int32x2_t *)(v46 + 4);
      v48 = (unsigned int *)((char *)v46 + ((4 * a2) & 0x3FFFFFFE0));
      do
      {
        v49 = (int64x2_t *)(a5 + 4);
        a5 += v45;
        v50 = a2 & 0xFFFFFFF8;
        v51 = v47;
        do
        {
          _Q0 = *(int64x2_t *)v51[-2].i8;
          _Q1 = *(int64x2_t *)v51->i8;
          v54 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
          __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
          v55 = vshll_n_s32(*v51, 0x20uLL);
          __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
          v49[-2] = v54;
          v49[-1] = _Q0;
          *v49 = v55;
          v49[1] = _Q1;
          v49 += 4;
          v51 += 4;
          v50 -= 8;
        }
        while (v50);
        if (a2 != v45)
        {
          v56 = a2 - v45;
          v57 = v48;
          do
          {
            v58 = *v57++;
            *a5++ = (unint64_t)v58 << 32;
            --v56;
          }
          while (v56);
        }
        LODWORD(a6) = a6 + 1;
      }
      while ((_DWORD)a6 != a8);
    }
    else
    {
      v42 = &result[v41];
      v43 = (unint64_t)*v42 << 32;
      do
      {
        *a5 = v43;
        if (a2 == 1)
        {
          ++a5;
        }
        else
        {
          a5[1] = (unint64_t)v42[1] << 32;
          if (a2 == 2)
          {
            a5 += 2;
          }
          else
          {
            a5[2] = (unint64_t)v42[2] << 32;
            if (a2 == 3)
            {
              a5 += 3;
            }
            else
            {
              a5[3] = (unint64_t)v42[3] << 32;
              if (a2 == 4)
              {
                a5 += 4;
              }
              else
              {
                a5[4] = (unint64_t)v42[4] << 32;
                if (a2 == 5)
                {
                  a5 += 5;
                }
                else
                {
                  a5[5] = (unint64_t)v42[5] << 32;
                  if (a2 == 6)
                  {
                    a5 += 6;
                  }
                  else
                  {
                    a5[6] = (unint64_t)v42[6] << 32;
                    a5 += 7;
                  }
                }
              }
            }
          }
        }
        --v40;
      }
      while (v40);
    }
  }
  return result;
}

unsigned int *sub_100341DAC(unsigned int *result, unsigned int a2, uint64_t a3, unint64_t *a4, unint64_t *a5, uint64_t a6, int a7, int a8)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  int32x2_t *v15;
  int64x2_t *v16;
  int64x2_t v19;
  int64x2_t v24;
  int v25;
  int64x2_t *v26;
  uint64_t v27;
  int32x2_t *v28;
  int64x2_t v31;
  int64x2_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  unsigned int *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  int32x2_t *v48;
  unsigned int *v49;
  int64x2_t *v50;
  uint64_t v51;
  int32x2_t *v52;
  int64x2_t v55;
  int64x2_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;

  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 <= 0)
      goto LABEL_44;
    goto LABEL_34;
  }
  if ((int)a2 > 0)
  {
    if (a2 > 7)
    {
      v10 = a2 & 0xFFFFFFF8;
      v11 = 8 * v10;
      if (a2 == v10)
      {
        v12 = 0;
        v13 = a5;
        do
        {
          v14 = 0;
          a5 = &v13[(unint64_t)v11 / 8];
          v15 = (int32x2_t *)(result + 4);
          do
          {
            v16 = (int64x2_t *)&v13[v14 / 8];
            _Q0 = *(int64x2_t *)v15[-2].i8;
            _Q1 = *(int64x2_t *)v15->i8;
            v19 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
            __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
            v24 = vshll_n_s32(*v15, 0x20uLL);
            __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
            *v16 = v19;
            v16[1] = _Q0;
            v16[2] = v24;
            v16[3] = _Q1;
            v14 += 64;
            v15 += 4;
          }
          while (v11 != v14);
          ++v12;
          v13 = (unint64_t *)((char *)v13 + v11);
        }
        while (v12 != (_DWORD)a6);
      }
      else
      {
        v25 = 0;
        do
        {
          v26 = (int64x2_t *)(a5 + 4);
          a5 = (unint64_t *)((char *)a5 + v11);
          v27 = a2 & 0xFFFFFFF8;
          v28 = (int32x2_t *)(result + 4);
          do
          {
            _Q0 = *(int64x2_t *)v28[-2].i8;
            _Q1 = *(int64x2_t *)v28->i8;
            v31 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
            __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
            v32 = vshll_n_s32(*v28, 0x20uLL);
            __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
            v26[-2] = v31;
            v26[-1] = _Q0;
            *v26 = v32;
            v26[1] = _Q1;
            v26 += 4;
            v28 += 4;
            v27 -= 8;
          }
          while (v27);
          v33 = a2 - v10;
          v34 = (unsigned int *)((char *)result + ((4 * a2) & 0x3FFFFFFE0));
          do
          {
            v35 = *v34++;
            *a5++ = (unint64_t)v35 << 32;
            --v33;
          }
          while (v33);
          ++v25;
        }
        while (v25 != (_DWORD)a6);
      }
    }
    else
    {
      v8 = (unint64_t)*result << 32;
      v9 = a6;
      do
      {
        *a5 = v8;
        if (a2 == 1)
        {
          ++a5;
        }
        else
        {
          a5[1] = (unint64_t)result[1] << 32;
          if (a2 == 2)
          {
            a5 += 2;
          }
          else
          {
            a5[2] = (unint64_t)result[2] << 32;
            if (a2 == 3)
            {
              a5 += 3;
            }
            else
            {
              a5[3] = (unint64_t)result[3] << 32;
              if (a2 == 4)
              {
                a5 += 4;
              }
              else
              {
                a5[4] = (unint64_t)result[4] << 32;
                if (a2 == 5)
                {
                  a5 += 5;
                }
                else
                {
                  a5[5] = (unint64_t)result[5] << 32;
                  if (a2 == 6)
                  {
                    a5 += 6;
                  }
                  else
                  {
                    a5[6] = (unint64_t)result[6] << 32;
                    a5 += 7;
                  }
                }
              }
            }
          }
        }
        --v9;
      }
      while (v9);
    }
  }
  a4 += 2 * (a6 - 1) + 2;
  if ((int)a6 < a7)
  {
LABEL_34:
    if ((int)a2 < 1)
    {
      LODWORD(a6) = a7;
    }
    else
    {
      v36 = 4 * a2;
      a6 = a6;
      do
      {
        v37 = 0;
        v38 = &result[*(_DWORD *)(a3 + 4 * a6) * a2];
        do
        {
          v39 = *a4;
          if (*a4)
            v39 *= (int)v38[v37 / 4];
          *a5 = v39;
          v40 = a4[1];
          if (v40)
            v40 *= (int)v38[(unint64_t)v36 / 4 + v37 / 4];
          *a5++ = v40 + v39;
          v37 += 4;
        }
        while (v36 != v37);
        ++a6;
        a4 += 2;
      }
      while ((int)a6 < a7);
    }
  }
LABEL_44:
  v41 = a8 - a6;
  if (a8 > (int)a6 && (int)a2 >= 1)
  {
    v42 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 8)
    {
      v45 = v42;
      v46 = a2 & 0xFFFFFFF8;
      v47 = &result[v45];
      v48 = (int32x2_t *)(v47 + 4);
      v49 = (unsigned int *)((char *)v47 + ((4 * a2) & 0x3FFFFFFE0));
      do
      {
        v50 = (int64x2_t *)(a5 + 4);
        a5 += v46;
        v51 = a2 & 0xFFFFFFF8;
        v52 = v48;
        do
        {
          _Q0 = *(int64x2_t *)v52[-2].i8;
          _Q1 = *(int64x2_t *)v52->i8;
          v55 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
          __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
          v56 = vshll_n_s32(*v52, 0x20uLL);
          __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
          v50[-2] = v55;
          v50[-1] = _Q0;
          *v50 = v56;
          v50[1] = _Q1;
          v50 += 4;
          v52 += 4;
          v51 -= 8;
        }
        while (v51);
        if (a2 != v46)
        {
          v57 = a2 - v46;
          v58 = v49;
          do
          {
            v59 = *v58++;
            *a5++ = (unint64_t)v59 << 32;
            --v57;
          }
          while (v57);
        }
        LODWORD(a6) = a6 + 1;
      }
      while ((_DWORD)a6 != a8);
    }
    else
    {
      v43 = &result[v42];
      v44 = (unint64_t)*v43 << 32;
      do
      {
        *a5 = v44;
        if (a2 == 1)
        {
          ++a5;
        }
        else
        {
          a5[1] = (unint64_t)v43[1] << 32;
          if (a2 == 2)
          {
            a5 += 2;
          }
          else
          {
            a5[2] = (unint64_t)v43[2] << 32;
            if (a2 == 3)
            {
              a5 += 3;
            }
            else
            {
              a5[3] = (unint64_t)v43[3] << 32;
              if (a2 == 4)
              {
                a5 += 4;
              }
              else
              {
                a5[4] = (unint64_t)v43[4] << 32;
                if (a2 == 5)
                {
                  a5 += 5;
                }
                else
                {
                  a5[5] = (unint64_t)v43[5] << 32;
                  if (a2 == 6)
                  {
                    a5 += 6;
                  }
                  else
                  {
                    a5[6] = (unint64_t)v43[6] << 32;
                    a5 += 7;
                  }
                }
              }
            }
          }
        }
        --v41;
      }
      while (v41);
    }
  }
  return result;
}

unint64_t sub_1003421A0(uint64_t a1, int a2, unsigned int *a3, _QWORD *a4)
{
  unint64_t result;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  sub_100289D28(&v15, a2);
  v14 = 0x3FE0000000000000;
  sub_10028A294(&v15, &v14, &v17);
  sub_10028A2EC((unint64_t *)a1, &v17, (unint64_t *)&v18);
  v13 = 0x3FE0000000000000;
  sub_10028A2C0((unint64_t *)&v18, &v13, (unint64_t *)&v16);
  result = sub_100289FFC(&v16);
  if ((result & 0x80000000) != 0 || (v9 = *(_DWORD *)(a1 + 8), v9 < 2))
  {
    if (*(_DWORD *)(a1 + 12) <= a2 + 1)
      v11 = a2 + 1;
    else
      v11 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v11;
  }
  else
  {
    v10 = v9 - 1;
    if (result >= v10)
    {
      *a3 = v10;
      v12 = *(_DWORD *)(a1 + 16);
      if (v12 >= a2)
        v12 = a2;
      *(_DWORD *)(a1 + 16) = v12;
    }
    else
    {
      *a3 = result;
      sub_100289D28(&v14, result);
      sub_10028A2C0((unint64_t *)&v16, &v14, &v15);
      sub_100289DA8(&v17, (uint64_t)&_mh_execute_header);
      sub_10028A2EC(&v15, &v17, (unint64_t *)&v18);
      result = sub_10028A0A0(&v18);
      *a4 = (char *)&_mh_execute_header - result;
      a4[1] = result;
    }
  }
  return result;
}

void sub_1003422F4(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

_QWORD *sub_100342318(uint64_t a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int32x4_t *v69;
  int32x4_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int32x4_t *v74;
  int64x2_t *v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  uint64_t v80;
  __int32 *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int32x4_t *v91;
  int32x4_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int32x4_t *v96;
  int64x2_t *v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  uint64_t v102;
  __int32 *v103;
  uint64_t *v104;
  uint64_t v105;
  _QWORD v107[4];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v4 = 2 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 56);
  bzero(v107, 0x440uLL);
  if (v4 >= 0x89)
    operator new[]();
  LODWORD(v5) = *a2;
  v6 = *(_DWORD *)(a1 + 104);
  if (v6 <= *a2)
    v7 = *a2;
  else
    v7 = *(_DWORD *)(a1 + 104);
  if (a2[1] >= *(_DWORD *)(a1 + 108))
    v8 = *(_DWORD *)(a1 + 108);
  else
    v8 = a2[1];
  if ((int)v5 >= v6)
  {
    v9 = 0;
    v10 = -2;
    if ((int)v5 >= v7)
    {
LABEL_11:
      if ((int)v5 >= v8)
        goto LABEL_84;
      goto LABEL_12;
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))(a1 + 112))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), v107, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    LODWORD(v5) = *a2;
    v9 = 1;
    v10 = -1;
    if (*a2 >= v7)
      goto LABEL_11;
  }
  v67 = *(_QWORD *)(a1 + 40);
  v68 = (int)v5;
  v69 = (int32x4_t *)(*(_QWORD *)(a1 + 32) + v67 * (int)v5);
  v70 = v69 + 1;
  do
  {
    v71 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
    if ((int)v71 < 1)
      goto LABEL_73;
    if (v71 < 8)
    {
      v72 = 0;
LABEL_80:
      v80 = v71 - v72;
      v81 = &v69->i32[v72];
      v82 = &v107[v72];
      do
      {
        v83 = *v82++;
        *v81++ = (unint64_t)(v83 + 0x80000000) >> 32;
        --v80;
      }
      while (v80);
      goto LABEL_73;
    }
    v72 = v71 & 0x7FFFFFF8;
    v73 = v71 & 0xFFFFFFF8;
    v74 = v70;
    v75 = (int64x2_t *)&v108;
    do
    {
      v77 = v75[-2];
      v76 = v75[-1];
      v79 = *v75;
      v78 = v75[1];
      v75 += 4;
      v74[-1] = vraddhn_high_s64(vraddhn_s64(v77, (int64x2_t)0), v76, (int64x2_t)0);
      *v74 = vraddhn_high_s64(vraddhn_s64(v79, (int64x2_t)0), v78, (int64x2_t)0);
      v74 += 2;
      v73 -= 8;
    }
    while (v73);
    if (v72 != v71)
      goto LABEL_80;
LABEL_73:
    ++v68;
    v70 = (int32x4_t *)((char *)v70 + v67);
    v69 = (int32x4_t *)((char *)v69 + v67);
  }
  while (v68 != v7);
  LODWORD(v5) = v7;
  if (v7 >= v8)
  {
LABEL_84:
    v27 = (int64x2_t *)v107;
    v84 = *(int *)(a1 + 28);
    if (v10 + 2 <= (int)v84)
      goto LABEL_90;
    goto LABEL_85;
  }
LABEL_12:
  v5 = (int)v5;
  while (2)
  {
    v11 = *(_QWORD *)(a1 + 72);
    v12 = *(_DWORD *)(v11 + 4 * v5);
    if (v12 <= v10 + 2)
      v13 = v10 + 2;
    else
      v13 = *(_DWORD *)(v11 + 4 * v5);
    v14 = v12 + 2;
    v15 = *(_DWORD *)(a1 + 28);
    if (v15 < v12 + 2)
      v14 = *(_DWORD *)(a1 + 28);
    if (v13 < v14)
    {
      v16 = v13;
      do
      {
        (*(void (**)(uint64_t))(a1 + 112))(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * v16++);
        v12 = *(_DWORD *)(v11 + 4 * v5);
        v9 = (v9 & 1) == 0;
        v17 = v12 + 2;
        v15 = *(_DWORD *)(a1 + 28);
        if (v15 < v12 + 2)
          v17 = *(_DWORD *)(a1 + 28);
      }
      while (v16 < v17);
    }
    v18 = v15 - 2;
    if (v12 <= v18)
      v19 = v18;
    else
      v19 = v12;
    v20 = v19 + v9;
    if (v10 > v18)
      v18 = v10;
    v21 = v20 - v18;
    v110 = 0;
    if (v21 >= 0)
      v9 = v21 & 1;
    else
      v9 = -(v21 & 1);
    v22 = *(_QWORD *)(a1 + 88);
    v23 = 2 * v5;
    if (v9 < 1)
    {
      v24 = 0;
      v25 = 0;
    }
    else
    {
      v24 = *(_QWORD *)(v22 + 8 * (v23 | 1));
      v25 = 1;
    }
    v109 = v24;
    v26 = v23 - v9;
    *(&v109 + v25) = *(_QWORD *)(v22 + 8 * (v25 + v26));
    if (v9 <= 0)
    {
      v110 = *(_QWORD *)(v22 + 8 * v26 + 8);
      v27 = (int64x2_t *)v107;
      v28 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
      if ((int)v28 < 1)
        goto LABEL_13;
    }
    else
    {
      v27 = (int64x2_t *)v107;
      v28 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
      if ((int)v28 < 1)
        goto LABEL_13;
    }
    v29 = v109 >> 63;
    if (v109 >= 0)
      v30 = v109;
    else
      v30 = -v109;
    v31 = v30;
    v32 = HIDWORD(v30);
    v33 = v110 >> 63;
    if (v110 >= 0)
      v34 = v110;
    else
      v34 = -v110;
    v35 = v34;
    v36 = HIDWORD(v34);
    v37 = v28;
    v38 = (_DWORD *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(a1 + 40) * v5);
    v39 = v107;
    do
    {
      v40 = *v39;
      if (*v39 >= 0)
        v41 = *v39;
      else
        v41 = -v40;
      v42 = v41;
      v43 = HIDWORD(v41);
      v44 = v42 * (unint64_t)v32;
      v45 = v43 * v31
          + (unint64_t)v44
          + ((v42 * (unint64_t)v31 + 0x80000000) >> 32);
      v46 = (v43 * v32)
          + ((v43 * (unint64_t)v31) >> 32)
          + HIDWORD(v44)
          + HIDWORD(v45);
      v47 = v45;
      v48 = -(int)v45;
      if ((_DWORD)v45)
        v49 = ~v46;
      else
        v49 = -(uint64_t)v46;
      v50 = v29 == v40 >> 63;
      if (v29 == v40 >> 63)
        v51 = v47;
      else
        v51 = v48;
      if (!v50)
        v46 = v49;
      v52 = v39[v28];
      if (v52 >= 0)
        v53 = v39[v28];
      else
        v53 = -v52;
      v54 = v53;
      v55 = HIDWORD(v53);
      v56 = v54 * (unint64_t)v36;
      v57 = v55 * v35
          + (unint64_t)v56
          + ((v54 * (unint64_t)v35 + 0x80000000) >> 32);
      v58 = v46 << 32;
      v59 = (v55 * v36)
          + ((v55 * (unint64_t)v35) >> 32)
          + HIDWORD(v56)
          + HIDWORD(v57);
      v60 = v57;
      v61 = -(int)v57;
      if ((_DWORD)v57)
        LODWORD(v62) = ~(_DWORD)v59;
      else
        v62 = -(uint64_t)v59;
      v63 = v33 == v52 >> 63;
      if (v33 == v52 >> 63)
        v64 = v60;
      else
        v64 = v61;
      v65 = v51 + v58 + v64 + 0x80000000;
      if (v63)
        v66 = v59;
      else
        v66 = v62;
      *v38++ = HIDWORD(v65) + v66;
      ++v39;
      --v37;
    }
    while (v37);
LABEL_13:
    ++v5;
    v10 = v12;
    if (v8 != (_DWORD)v5)
      continue;
    break;
  }
  v10 = v12;
  LODWORD(v5) = v8;
  v87 = v12 + 2;
  v84 = *(int *)(a1 + 28);
  if (v87 <= (int)v84)
  {
LABEL_90:
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))(a1 + 112))(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) * (v84 - 1), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), v107, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    goto LABEL_91;
  }
LABEL_85:
  v85 = v9 + ~v10 + v84;
  if (v85 >= 0)
    v86 = v85 & 1;
  else
    v86 = -(v85 & 1);
  v27 = (int64x2_t *)&v107[*(_DWORD *)(a1 + 48) * v86 * *(_DWORD *)(a1 + 56)];
LABEL_91:
  v88 = a2[1];
  if ((int)v5 < v88)
  {
    v89 = *(_QWORD *)(a1 + 40);
    v90 = (int)v5;
    v91 = (int32x4_t *)(*(_QWORD *)(a1 + 32) + v89 * (int)v5);
    v92 = v91 + 1;
    while (2)
    {
      v93 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
      if ((int)v93 < 1)
        goto LABEL_94;
      if (v93 < 8)
      {
        v94 = 0;
        goto LABEL_101;
      }
      v94 = v93 & 0x7FFFFFF8;
      v95 = v93 & 0xFFFFFFF8;
      v96 = v92;
      v97 = v27 + 2;
      do
      {
        v99 = v97[-2];
        v98 = v97[-1];
        v101 = *v97;
        v100 = v97[1];
        v97 += 4;
        v96[-1] = vraddhn_high_s64(vraddhn_s64(v99, (int64x2_t)0), v98, (int64x2_t)0);
        *v96 = vraddhn_high_s64(vraddhn_s64(v101, (int64x2_t)0), v100, (int64x2_t)0);
        v96 += 2;
        v95 -= 8;
      }
      while (v95);
      if (v94 != v93)
      {
LABEL_101:
        v102 = v93 - v94;
        v103 = &v91->i32[v94];
        v104 = &v27->i64[v94];
        do
        {
          v105 = *v104++;
          *v103++ = (unint64_t)(v105 + 0x80000000) >> 32;
          --v102;
        }
        while (v102);
      }
      v88 = a2[1];
LABEL_94:
      ++v90;
      v92 = (int32x4_t *)((char *)v92 + v89);
      v91 = (int32x4_t *)((char *)v91 + v89);
      if (v90 >= v88)
        return v107;
      continue;
    }
  }
  return v107;
}

void sub_100342938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  if (a11 != v11)
  {
    if (a11)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

void sub_10034297C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  float32x2_t *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  float64x2_t v43;
  float32x2_t *v44;
  uint64_t v45;
  float64x2_t v46;
  double v47;
  float v48;
  float v49;
  float v50;
  float v51;
  long double v52;
  long double v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  float v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE v70[64];
  _BYTE *v71;
  void *v72;
  _QWORD v73[2];
  _BYTE v74[8];
  int v75;
  uint64_t v76[2];
  _OWORD v77[4];
  char *v78;
  void *v79;
  _QWORD v80[124];
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;

  sub_100298C2C(v74, &off_100453FA8);
  *(_DWORD *)v70 = 1124007936;
  memset(&v70[4], 0, 60);
  v71 = &v70[8];
  v72 = v73;
  v73[0] = 0;
  v73[1] = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  LODWORD(v77[0]) = 33619968;
  *((_QWORD *)&v77[0] + 1) = v70;
  *(_QWORD *)&v77[1] = 0;
  sub_1002D8BC4(a1, (uint64_t)v77, 1, 1);
  if ((v70[0] & 7) == 5)
    goto LABEL_28;
  LODWORD(v77[0]) = 1124007936;
  memset((char *)v77 + 4, 0, 60);
  v78 = (char *)v77 + 8;
  v79 = v80;
  v80[0] = 0;
  v80[1] = 0;
  LODWORD(v81) = 33619968;
  v82 = (unint64_t)v77;
  v83 = 0;
  sub_1002044A8((unsigned int *)v70, (uint64_t)&v81, 5, 1.0, 0.0);
  if (*((_QWORD *)&v77[3] + 1))
  {
    v4 = (unsigned int *)(*((_QWORD *)&v77[3] + 1) + 20);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  if (*(_QWORD *)&v70[56])
  {
    v6 = (unsigned int *)(*(_QWORD *)&v70[56] + 20);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      sub_100256C90((uint64_t)v70);
  }
  *(_QWORD *)&v70[56] = 0;
  memset(&v70[16], 0, 32);
  if (*(uint64_t *)v70 <= 0)
  {
    *(_DWORD *)v70 = v77[0];
    v11 = DWORD1(v77[0]);
    if (SDWORD1(v77[0]) <= 2)
    {
LABEL_15:
      *(_DWORD *)&v70[4] = v11;
      *(_QWORD *)&v70[8] = *((_QWORD *)&v77[0] + 1);
      v12 = v79;
      v13 = v72;
      *(_QWORD *)v72 = *(_QWORD *)v79;
      v13[1] = v12[1];
      goto LABEL_18;
    }
  }
  else
  {
    v9 = 0;
    v10 = v71;
    do
      *(_DWORD *)&v10[4 * v9++] = 0;
    while (v9 < *(int *)&v70[4]);
    *(_DWORD *)v70 = v77[0];
    if (*(int *)&v70[4] <= 2)
    {
      v11 = DWORD1(v77[0]);
      if (SDWORD1(v77[0]) <= 2)
        goto LABEL_15;
    }
  }
  sub_100256B48((uint64_t)v70, (uint64_t)v77);
LABEL_18:
  *(_OWORD *)&v70[16] = v77[1];
  *(_OWORD *)&v70[32] = v77[2];
  *(_OWORD *)&v70[48] = v77[3];
  if (*((_QWORD *)&v77[3] + 1))
  {
    v14 = (unsigned int *)(*((_QWORD *)&v77[3] + 1) + 20);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      sub_100256C90((uint64_t)v77);
  }
  *((_QWORD *)&v77[3] + 1) = 0;
  memset(&v77[1], 0, 32);
  if (SDWORD1(v77[0]) >= 1)
  {
    v17 = 0;
    v18 = v78;
    do
      *(_DWORD *)&v18[4 * v17++] = 0;
    while (v17 < SDWORD1(v77[0]));
  }
  if (v79 != v80)
    j__free(v79);
LABEL_28:
  v19 = sub_10025C460((unsigned int *)v70, 2, -1, 1);
  v20 = *(_QWORD *)&v70[16];
  if ((int)v19 >= 3)
  {
    *(_QWORD *)&v77[0] = &v77[1];
    *((_QWORD *)&v77[0] + 1) = (int)(3 * v19);
    if (3 * v19 >= 0x109)
      operator new[]();
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 4 * v19;
    v81 = -1;
    v82 = -1;
    v27 = (float32x2_t *)((char *)&v77[1] + v26);
    v29 = **(float **)&v70[16];
    v28 = *(float *)(*(_QWORD *)&v70[16] + 4);
    v30 = v28;
    v31 = **(float **)&v70[16];
    v32 = v28;
    v33 = **(float **)&v70[16];
    while (1)
    {
      if (v33 < v31)
      {
        v31 = v33;
        v22 = v21;
      }
      if (v33 > v29)
      {
        v29 = v33;
        v24 = v21;
      }
      if (v32 > v30)
      {
        v30 = v32;
        v25 = v21;
      }
      if (v32 < v28)
      {
        v28 = v32;
        v23 = v21;
      }
      v34 = v21 + 1;
      v35 = (v21 + 1);
      if (v21 + 1 >= (unint64_t)v19)
        v35 = 0;
      v36 = (float *)(v20 + 8 * v35);
      v37 = *v36;
      v38 = v36[1];
      v39 = *v36 - v33;
      v40 = v38 - v32;
      v41 = (float *)((char *)&v77[1] + v26);
      *v41 = v39;
      v41[1] = v40;
      v42 = 1.0 / sqrt(v40 * v40 + v39 * v39);
      *((float *)&v77[1] + v21) = v42;
      v26 += 8;
      ++v21;
      v32 = v38;
      v33 = v37;
      if (v19 == v34)
      {
        v43 = vcvtq_f64_f32(v27[v19 - 1]);
        v44 = v27;
        v45 = v19;
        while (1)
        {
          v46 = v43;
          v43 = vcvtq_f64_f32(*v44);
          v47 = vmlad_n_f64(-v46.f64[1] * v43.f64[0], v43.f64[1], v46.f64[0]);
          if (v47 != 0.0)
            break;
          ++v44;
          if (!--v45)
          {
            v76[0] = 0;
            v76[1] = 0;
            *(_OWORD *)sub_10029430C(v76, 16) = *(_OWORD *)"orientation != 0";
            sub_100294B74(-215, v76, "rotatingCalipers", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/rotcalipers.cpp", 166);
          }
        }
        if (v47 <= 0.0)
          v56 = -1.0;
        else
          v56 = 1.0;
        v81 = __PAIR64__(v24, v23);
        v82 = __PAIR64__(v22, v25);
        v57 = (float)(0.0 * v27[v23].f32[1]) + (float)(v56 * v27[v23].f32[0]);
        v58 = (float)(v56 * v27[v24].f32[1]) - (float)(0.0 * v27[v24].f32[0]);
        v59 = (float)-(float)(0.0 * v27[v25].f32[1]) - (float)(v56 * v27[v25].f32[0]);
        v60 = (float)(0.0 * v27[v22].f32[0]) - (float)(v56 * v27[v22].f32[1]);
        v61 = v57 * *((float *)&v77[1] + (int)v23);
        v62 = v58 * *((float *)&v77[1] + (int)v24);
        LODWORD(v63) = v62 > v61;
        if (v62 > v61)
          v61 = v58 * *((float *)&v77[1] + (int)v24);
        if ((float)(v59 * *((float *)&v77[1] + (int)v25)) > v61)
        {
          v61 = v59 * *((float *)&v77[1] + (int)v25);
          LODWORD(v63) = 2;
        }
        if ((float)(v60 * *((float *)&v77[1] + (int)v22)) <= v61)
          v63 = v63;
        else
          v63 = 3;
        __asm { BR              X16 }
      }
    }
  }
  if (v19 == 1)
  {
    *(_QWORD *)a2 = **(_QWORD **)&v70[16];
  }
  else if (v19 == 2)
  {
    v48 = **(float **)&v70[16];
    v49 = *(float *)(*(_QWORD *)&v70[16] + 4);
    v50 = *(float *)(*(_QWORD *)&v70[16] + 8);
    v51 = *(float *)(*(_QWORD *)&v70[16] + 12);
    *(float *)a2 = (float)(**(float **)&v70[16] + v50) * 0.5;
    *(float *)(a2 + 4) = (float)(v49 + v51) * 0.5;
    v52 = (float)(v50 - v48);
    v53 = (float)(v51 - v49);
    v54 = sqrt(v53 * v53 + v52 * v52);
    *(float *)(a2 + 8) = v54;
    *(_DWORD *)(a2 + 12) = 0;
    v55 = atan2(v53, v52);
    *(float *)(a2 + 16) = v55;
  }
  v64 = (float)(*(float *)(a2 + 16) * 180.0) / 3.14159265;
  *(float *)(a2 + 16) = v64;
  if (*(_QWORD *)&v70[56])
  {
    v65 = (unsigned int *)(*(_QWORD *)&v70[56] + 20);
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
      sub_100256C90((uint64_t)v70);
  }
  *(_QWORD *)&v70[56] = 0;
  memset(&v70[16], 0, 32);
  if (*(int *)&v70[4] >= 1)
  {
    v68 = 0;
    v69 = v71;
    do
      *(_DWORD *)&v69[4 * v68++] = 0;
    while (v68 < *(int *)&v70[4]);
  }
  if (v72 != v73)
    j__free(v72);
  if (v75)
    sub_1002989D0(v74);
}

void sub_1003431B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100343280(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  _QWORD v23[2];
  _BYTE v24[8];
  int v25;

  sub_100298C2C(v24, &off_100453FC8);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_OWORD *)(v4 + 16);
    v16 = *(_OWORD *)v4;
    v17 = v5;
    v18 = *(_OWORD *)(v4 + 32);
    v6 = *(_QWORD *)(v4 + 56);
    v19 = *(_QWORD *)(v4 + 48);
    v20 = v6;
    v21 = (char *)&v16 + 8;
    v22 = v23;
    v23[0] = 0;
    v23[1] = 0;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 20);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    if (*(int *)(v4 + 4) > 2)
    {
      DWORD1(v16) = 0;
      sub_100256B48((uint64_t)&v16, v4);
    }
    else
    {
      v9 = *(_QWORD **)(v4 + 72);
      v10 = v22;
      *(_QWORD *)v22 = *v9;
      v10[1] = v9[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v16);
  }
  if ((v16 & 7) != 0)
    sub_10034377C(a2, (uint64_t)&v16);
  else
    sub_10034343C(a2, (uint64_t)&v16);
  if (v20)
  {
    v11 = (unsigned int *)(v20 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90((uint64_t)&v16);
  }
  v20 = 0;
  v17 = 0u;
  v18 = 0u;
  if (SDWORD1(v16) >= 1)
  {
    v14 = 0;
    v15 = v21;
    do
      *(_DWORD *)&v15[4 * v14++] = 0;
    while (v14 < SDWORD1(v16));
  }
  if (v22 != v23)
    j__free(v22);
  if (v25)
    sub_1002989D0(v24);
}

void sub_10034340C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100006BE4((uint64_t)&a9);
  sub_1001D40CC(v9 - 32);
  _Unwind_Resume(a1);
}

void sub_100343428(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 32);
  _Unwind_Resume(a1);
}

unint64_t sub_10034343C(unint64_t result, uint64_t a2)
{
  int *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t i;
  int v28;
  unsigned __int8 *v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  uint64_t v41[2];

  v2 = (int *)result;
  if ((*(_WORD *)a2 & 0xFFE) != 0)
  {
    v41[0] = 0;
    v41[1] = 0;
    qmemcpy((void *)sub_10029430C(v41, 39), "img.depth() <= 1 && img.channels() == 1", 39);
    sub_100294B74(-215, v41, "maskBoundingRect", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/shapedescr.cpp", 859);
  }
  v4 = **(unsigned int **)(a2 + 64);
  v3 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 16);
    v7 = -*(_DWORD *)(a2 + 16);
    v8 = v6 + 3;
    v9 = -1;
    v10 = **(_QWORD **)(a2 + 72);
    v11 = v6;
    v12 = -1;
    v13 = -1;
    v14 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
    while (1)
    {
      if (v3 >= (int)(v7 + (v8 & 0xFFFFFFFC)))
        v16 = v7 + (v8 & 0xFFFFFFFC);
      else
        v16 = v3;
      v17 = v6 + v10 * v5;
      v18 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v19 = v18 - v17;
      if (v3 >= (int)v18 - (int)v17)
        v20 = v19;
      else
        v20 = v3;
      if ((int)v20 < 1)
      {
LABEL_24:
        v15 = 0;
        if (v3 <= v19)
          goto LABEL_8;
      }
      else
      {
        v21 = 0;
        while (!*(_BYTE *)(v11 + v21))
        {
          if (++v21 >= v20)
            goto LABEL_24;
        }
        if ((int)v21 < v14)
          v14 = v21;
        if ((int)v21 > v12)
          v12 = v21;
        v15 = 1;
        if (v3 <= v19)
          goto LABEL_8;
      }
      v22 = v14 - v20;
      if (v22 >= 4)
      {
        v23 = 0;
        do
        {
          if (*(_DWORD *)(v18 + v23))
            break;
          v23 += 4;
        }
        while (v22 - 4 >= (int)v23);
      }
      else
      {
        LODWORD(v23) = 0;
      }
      v24 = v12 - v20;
      if ((int)v23 < v22)
      {
        v25 = (unsigned __int8 *)(v18 + v23);
        while (!*v25++)
        {
          LODWORD(v23) = v23 + 1;
          if (v22 <= (int)v23)
            goto LABEL_52;
        }
        if ((int)v23 > v24)
          v24 = v23;
        v15 = 1;
        v22 = v23;
      }
LABEL_52:
      v31 = v3 - v16 - 1;
      v32 = v3 + ~v16;
      v33 = v23 - 1;
      if ((int)v23 - 1 <= v24)
        v33 = v24;
      v34 = v33;
      while (1)
      {
        LODWORD(v35) = v32;
        v36 = v32 & 3;
        if (v31 <= v34 || v36 == 3)
          break;
        v37 = *(unsigned __int8 *)(v18 + v31);
        --v32;
        --v31;
        if (v37)
          goto LABEL_65;
      }
      if (v31 > v34 && v36 == 3 && (int)v34 + 3 < (int)v32)
      {
        do
        {
          if (*(_DWORD *)(v18 - 3 + v32))
            break;
          v32 -= 4;
        }
        while (v32 > (int)v34 + 3);
        LODWORD(v35) = v32;
      }
LABEL_65:
      if ((int)v35 > (int)v34)
      {
        v35 = (int)v35;
        while (!*(_BYTE *)(v18 + v35))
        {
          if (--v35 <= v34)
            goto LABEL_5;
        }
        v15 = 1;
        v24 = v35;
        goto LABEL_7;
      }
LABEL_5:
      if (!v15)
      {
        for (i = v23 & 0x7FFFFFFC; (int)v35 - 3 >= (int)i; i += 4)
        {
          if (*(_DWORD *)(v18 + i))
            break;
        }
        if ((int)i > (int)v35)
        {
LABEL_48:
          v15 = 0;
          goto LABEL_7;
        }
        v28 = i - 1;
        v29 = (unsigned __int8 *)(v18 + i);
        while (!*v29++)
        {
          if ((int)v35 <= ++v28)
            goto LABEL_48;
        }
      }
      v15 = 1;
LABEL_7:
      v14 = v22 + v20;
      v12 = v24 + v20;
LABEL_8:
      if (v13 >= 0)
        result = v13;
      else
        result = v5;
      if (v15)
      {
        v13 = result;
        v9 = v5;
      }
      ++v5;
      v7 -= v10;
      v8 += v10;
      v11 += v10;
      if (v5 == v4)
        goto LABEL_72;
    }
  }
  v13 = -1;
  v14 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4);
  v12 = -1;
  v9 = -1;
LABEL_72:
  v38 = v14 < v3;
  if (v14 >= v3)
    v39 = 0;
  else
    v39 = v14;
  if (v38)
    v40 = v13;
  else
    v40 = 0;
  *v2 = v39;
  v2[1] = v40;
  v2[2] = v12 - v39 + 1;
  v2[3] = v9 - v40 + 1;
  return result;
}

void sub_100343764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_10034377C(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  signed int *v5;
  signed int v6;
  signed int v7;
  signed int v8;
  signed int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  const float *v19;
  unint64_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  const float *v27;
  int32x4_t v28;
  int32x4_t v29;
  int *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  _BOOL4 v36;
  int v37;
  unint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  const float *v41;
  unint64_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  const float *v49;
  signed int *v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54[2];
  float32x4x2_t v55;
  float32x4x2_t v56;
  float32x4x2_t v57;
  float32x4x2_t v58;

  result = sub_10025C460((unsigned int *)a2, 2, -1, 1);
  if ((result & 0x80000000) != 0 || (*(_DWORD *)a2 & 6) != 4)
  {
    v54[0] = 0;
    v54[1] = 0;
    qmemcpy((void *)sub_10029430C(v54, 42), "npoints >= 0 && (depth == 5 || depth == 4)", 42);
    sub_100294B74(-215, v54, "pointSetBoundingRect", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/shapedescr.cpp", 741);
  }
  if (!(_DWORD)result)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    return result;
  }
  v5 = *(signed int **)(a2 + 16);
  v6 = *v5;
  v7 = v5[1];
  if ((*(_DWORD *)a2 & 7) == 5)
  {
    v8 = (v6 >> 31) & 0x7FFFFFFF ^ v6;
    v9 = (v7 >> 31) & 0x7FFFFFFF ^ v7;
    if ((int)result < 2)
    {
      v12 = v8;
      v11 = (v7 >> 31) & 0x7FFFFFFF ^ v7;
    }
    else
    {
      if (result < 9)
      {
        v10 = 1;
        v11 = v9;
        v12 = v8;
        goto LABEL_18;
      }
      v16 = (result - 1) & 0xFFFFFFFFFFFFFFF8;
      v10 = v16 | 1;
      v17 = vdupq_n_s32(v9);
      v18 = vdupq_n_s32(v8);
      v19 = (const float *)(v5 + 10);
      v20 = v16;
      v21 = v17;
      v22 = v18;
      v23 = v17;
      v24 = v17;
      v25 = v18;
      v26 = v18;
      do
      {
        v27 = v19 - 8;
        v55 = vld2q_f32(v27);
        v57 = vld2q_f32(v19);
        v28 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s32((int32x4_t)v55.val[0]) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (int8x16_t)v55.val[0]);
        v29 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s32((int32x4_t)v57.val[0]) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (int8x16_t)v57.val[0]);
        v55.val[0] = (float32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s32((int32x4_t)v55.val[1]) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (int8x16_t)v55.val[1]);
        v55.val[1] = (float32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s32((int32x4_t)v57.val[1]) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (int8x16_t)v57.val[1]);
        v25 = vminq_s32(v25, v28);
        v26 = vminq_s32(v26, v29);
        v18 = vmaxq_s32(v18, v28);
        v22 = vmaxq_s32(v22, v29);
        v23 = vminq_s32(v23, (int32x4_t)v55.val[0]);
        v24 = vminq_s32(v24, (int32x4_t)v55.val[1]);
        v17 = vmaxq_s32(v17, (int32x4_t)v55.val[0]);
        v21 = vmaxq_s32(v21, (int32x4_t)v55.val[1]);
        v19 += 16;
        v20 -= 8;
      }
      while (v20);
      v12 = vminvq_s32(vminq_s32(v25, v26));
      v11 = vminvq_s32(vminq_s32(v23, v24));
      v8 = vmaxvq_s32(vmaxq_s32(v18, v22));
      v9 = vmaxvq_s32(vmaxq_s32(v17, v21));
      if (result - 1 != v16)
      {
LABEL_18:
        v30 = &v5[2 * v10 + 1];
        v31 = result - v10;
        do
        {
          v32 = (*(v30 - 1) >> 31) & 0x7FFFFFFF ^ *(v30 - 1);
          v33 = (*v30 >> 31) & 0x7FFFFFFF ^ *v30;
          if (v12 >= v32)
            v12 = (*(v30 - 1) >> 31) & 0x7FFFFFFF ^ *(v30 - 1);
          if (v8 <= v32)
            v8 = (*(v30 - 1) >> 31) & 0x7FFFFFFF ^ *(v30 - 1);
          if (v11 >= v33)
            v11 = (*v30 >> 31) & 0x7FFFFFFF ^ *v30;
          if (v9 <= v33)
            v9 = (*v30 >> 31) & 0x7FFFFFFF ^ *v30;
          v30 += 2;
          --v31;
        }
        while (v31);
      }
    }
    v15 = (__PAIR64__((int)COERCE_FLOAT((v12 >> 31) & 0x7FFFFFFF ^ v12), (v12 >> 31) & 0x7FFFFFFF ^ v12)
         - COERCE_UNSIGNED_INT((float)(int)COERCE_FLOAT((v12 >> 31) & 0x7FFFFFFF ^ v12))) >> 32;
    v14 = (__PAIR64__((int)COERCE_FLOAT((v11 >> 31) & 0x7FFFFFFF ^ v11), (v11 >> 31) & 0x7FFFFFFF ^ v11)
         - COERCE_UNSIGNED_INT((float)(int)COERCE_FLOAT((v11 >> 31) & 0x7FFFFFFF ^ v11))) >> 32;
    v34 = (v8 >> 31) & 0x7FFFFFFF ^ v8;
    v35 = (int)*(float *)&v34;
    v36 = (float)(int)*(float *)&v34 > *(float *)&v34;
    v37 = (v9 >> 31) & 0x7FFFFFFF ^ v9;
    v6 = v35 - v36;
    v7 = (__PAIR64__((int)*(float *)&v37, v37) - COERCE_UNSIGNED_INT((float)(int)*(float *)&v37)) >> 32;
    goto LABEL_42;
  }
  if ((int)result >= 2)
  {
    if (result >= 9)
    {
      v38 = (result - 1) & 0xFFFFFFFFFFFFFFF8;
      v13 = v38 | 1;
      v39 = vdupq_n_s32(v7);
      v40 = vdupq_n_s32(v6);
      v41 = (const float *)(v5 + 10);
      v42 = v38;
      v43 = v39;
      v44 = v40;
      v45 = v39;
      v46 = v39;
      v47 = v40;
      v48 = v40;
      do
      {
        v49 = v41 - 8;
        v56 = vld2q_f32(v49);
        v58 = vld2q_f32(v41);
        v47 = vminq_s32(v47, (int32x4_t)v56.val[0]);
        v48 = vminq_s32(v48, (int32x4_t)v58.val[0]);
        v40 = vmaxq_s32(v40, (int32x4_t)v56.val[0]);
        v44 = vmaxq_s32(v44, (int32x4_t)v58.val[0]);
        v45 = vminq_s32(v45, (int32x4_t)v56.val[1]);
        v46 = vminq_s32(v46, (int32x4_t)v58.val[1]);
        v39 = vmaxq_s32(v39, (int32x4_t)v56.val[1]);
        v43 = vmaxq_s32(v43, (int32x4_t)v58.val[1]);
        v41 += 16;
        v42 -= 8;
      }
      while (v42);
      v15 = vminvq_s32(vminq_s32(v47, v48));
      v14 = vminvq_s32(vminq_s32(v45, v46));
      v6 = vmaxvq_s32(vmaxq_s32(v40, v44));
      v7 = vmaxvq_s32(vmaxq_s32(v39, v43));
      if (result - 1 == v38)
        goto LABEL_42;
    }
    else
    {
      v13 = 1;
      v14 = v5[1];
      v15 = *v5;
    }
    v50 = &v5[2 * v13 + 1];
    v51 = result - v13;
    do
    {
      v52 = *(v50 - 1);
      v53 = *v50;
      if (v15 >= v52)
        v15 = *(v50 - 1);
      if (v6 <= v52)
        v6 = *(v50 - 1);
      if (v14 >= v53)
        v14 = *v50;
      if (v7 <= v53)
        v7 = *v50;
      v50 += 2;
      --v51;
    }
    while (v51);
    goto LABEL_42;
  }
  v15 = *v5;
  v14 = v5[1];
LABEL_42:
  *(_DWORD *)a1 = v15;
  *(_DWORD *)(a1 + 4) = v14;
  *(_DWORD *)(a1 + 8) = v6 - v15 + 1;
  *(_DWORD *)(a1 + 12) = v7 - v14 + 1;
  return result;
}

void sub_100343B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100343BB0(_DWORD *a1, int a2)
{
  int *v2;
  int v3;
  uint64_t *v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[2];
  _OWORD *v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[40];
  _BYTE v35[32];
  int v36[24];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = a1;
  v39 = 0;
  v37 = 0;
  v38 = 0;
  if (!a1 || HIWORD(*a1) != 17049)
  {
    v5 = (_DWORD *)sub_1001F68F4((uint64_t)a1, (uint64_t)v34, 0, 0);
    if ((*v5 & 0xFFFu) < 2)
    {
      sub_100257E00((uint64_t)v5, 0, 0, 0, (uint64_t)&v27);
      sub_10034343C((unint64_t)&v19, (uint64_t)&v27);
      v39 = v19;
      if (v30)
      {
        v13 = (unsigned int *)(v30 + 20);
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          sub_100256C90((uint64_t)&v27);
      }
      v30 = 0;
      memset(v29, 0, sizeof(v29));
      if (SHIDWORD(v27) >= 1)
      {
        v16 = 0;
        v17 = v31;
        do
          *(_DWORD *)(v17 + 4 * v16++) = 0;
        while (v16 < SHIDWORD(v27));
      }
      if (v32 != &v33)
        j__free(v32);
      goto LABEL_43;
    }
    if ((*v5 & 0xFFFu) - 12 > 1)
    {
      v27 = 0;
      v28 = 0;
      qmemcpy((void *)sub_10029430C(&v27, 56), "The image/matrix format is not supported by the function", 56);
      sub_100294B74(-210, (uint64_t *)&v27, "cvBoundingRect", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/shapedescr.cpp", 1336);
    }
    v2 = sub_100359B68(0, (uint64_t)v5, v36, (uint64_t)v35);
    goto LABEL_11;
  }
  v3 = a2;
  if ((*a1 & 0xFFE) != 0xC)
  {
    v27 = 0;
    v28 = 0;
    qmemcpy((void *)sub_10029430C(&v27, 25), "Unsupported sequence type", 25);
    sub_100294B74(-5, (uint64_t *)&v27, "cvBoundingRect", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/shapedescr.cpp", 1316);
  }
  if ((int)a1[1] < 128)
  {
LABEL_11:
    v3 = 0;
LABEL_12:
    if (v2[10])
    {
      v27 = v29;
      v28 = 136;
      sub_100257E00((uint64_t)v2, 0, 0, (uint64_t)&v27, (uint64_t)&v19);
      sub_10034377C((uint64_t)v26, (uint64_t)&v19);
      v6 = v26[1];
      v39 = v26[0];
      if (v22)
      {
        v7 = (unsigned int *)(v22 + 20);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          sub_100256C90((uint64_t)&v19);
      }
      v22 = 0;
      v20 = 0u;
      v21 = 0u;
      if (SHIDWORD(v19) >= 1)
      {
        v10 = 0;
        v11 = v23;
        do
          *(_DWORD *)(v11 + 4 * v10++) = 0;
        while (v10 < SHIDWORD(v19));
      }
      if (v24 != &v25)
        j__free(v24);
      if (v27 != v29 && v27 != 0)
        operator delete[]();
      if (!v3)
        goto LABEL_43;
    }
    else
    {
      v6 = 0;
      if (!v3)
      {
LABEL_43:
        v4 = &v39;
        return *v4;
      }
    }
    *((_QWORD *)v2 + 12) = v39;
    *((_QWORD *)v2 + 13) = v6;
    goto LABEL_43;
  }
  if (a2)
    goto LABEL_12;
  v4 = (uint64_t *)(a1 + 24);
  return *v4;
}

void sub_100343EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100343F64(uint64_t a1, unsigned __int16 a2, int a3, int a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7[3];
  int v8;
  int v9;

  v8 = a4;
  v9 = a3;
  if (((a2 ^ (unsigned __int16)a1) & 0xFF8) != 0)
  {
    *(_OWORD *)v7 = 0uLL;
    qmemcpy((void *)sub_10029430C(v7, 90), "((((sumType) & ((512 - 1) << 3)) >> 3) + 1) == ((((srcType) & ((512 - 1) << 3)) >> 3) + 1)", 90);
    sub_100294B74(-215, v7, "getRowSumFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 1302);
  }
  v4 = a1 & 7;
  if (a4 < 0)
  {
    if (a3 >= 0)
      v6 = a3;
    else
      v6 = a3 + 1;
    v8 = v6 >> 1;
    v5 = a2 & 7;
    if ((a1 & 7) != 0)
      goto LABEL_12;
  }
  else
  {
    v5 = a2 & 7;
    if ((a1 & 7) != 0)
      goto LABEL_12;
  }
  if (v5 == 4)
    operator new();
LABEL_12:
  if ((a1 & 7) == 0 && v5 == 2)
    operator new();
  if ((a1 & 7) == 0 && v5 == 6)
    operator new();
  if (v4 == 2 && v5 == 4)
    operator new();
  if (v4 == 2 && v5 == 6)
    operator new();
  if (v4 == 3 && v5 == 4)
    sub_100344654();
  if (v4 == 4 && v5 == 4)
    sub_100344764();
  if (v4 == 3 && v5 == 6)
    sub_100344874();
  if (v4 == 5 && v5 == 6)
    sub_100344984();
  if (v4 == 6 && v5 == 6)
    sub_100344A94();
  sub_10029487C(v7, "Unsupported combination of source format (=%d), and buffer format (=%d)", a1, HIDWORD(a1));
  sub_100294B74(-213, v7, "getRowSumFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 1330);
}

void sub_1003445B4()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10029434C(&v1);
  *v0 = 0;
  v0[1] = 0;
}

void sub_1003445DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100344654()
{
  operator new();
}

void sub_1003446EC()
{
  operator delete();
}

unsigned int **sub_100344710(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_100344764()
{
  operator new();
}

void sub_1003447FC()
{
  operator delete();
}

unsigned int **sub_100344820(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_100344874()
{
  operator new();
}

void sub_10034490C()
{
  operator delete();
}

unsigned int **sub_100344930(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_100344984()
{
  operator new();
}

void sub_100344A1C()
{
  operator delete();
}

unsigned int **sub_100344A40(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_100344A94()
{
  operator new();
}

void sub_100344B2C()
{
  operator delete();
}

unsigned int **sub_100344B50(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_100344BA4(uint64_t a1, unsigned __int16 a2, int a3, int a4, double a5)
{
  int v5;
  int v6;
  __int128 v7;
  double v8;
  int v9;
  int v10;

  v9 = a4;
  v10 = a3;
  v8 = a5;
  if (((a2 ^ (unsigned __int16)a1) & 0xFF8) != 0)
  {
    v7 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v7, 90), "((((sumType) & ((512 - 1) << 3)) >> 3) + 1) == ((((dstType) & ((512 - 1) << 3)) >> 3) + 1)", 90);
    sub_100294B74(-215, (uint64_t *)&v7, "getColumnSumFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 1340);
  }
  v5 = a1 & 7;
  v6 = a2 & 7;
  if (a4 < 0)
  {
    v9 = v10 / 2;
    if (v5 != 4)
      goto LABEL_9;
  }
  else if (v5 != 4)
  {
    goto LABEL_9;
  }
  if ((a2 & 7) == 0)
    operator new();
LABEL_9:
  if (v5 == 2 && (a2 & 7) == 0)
    sub_1003453C4();
  if (v5 == 6 && (a2 & 7) == 0)
    operator new();
  if (v5 == 4 && v6 == 2)
    operator new();
  if (v5 == 6 && v6 == 2)
    operator new();
  if (v5 == 4 && v6 == 3)
    sub_100345520();
  if (v5 == 6 && v6 == 3)
    sub_100345658();
  if (v5 == 4 && v6 == 4)
    sub_100345790();
  if (v5 == 4 && v6 == 5)
    sub_1003458C8();
  if (v5 == 6 && v6 == 5)
    sub_100345A00();
  if (v5 == 4 && v6 == 6)
    sub_100345B38();
  if (v5 == 6 && v6 == 6)
    sub_100345C70();
  sub_10029487C((uint64_t *)&v7, "Unsupported combination of sum format (=%d), and destination format (=%d)", a1, HIDWORD(a1));
  sub_100294B74(-213, (uint64_t *)&v7, "getColumnSumFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 1372);
}

void sub_100345308()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10029434C(&v1);
  *v0 = 0;
  v0[1] = 0;
}

void sub_100345330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1003453C4()
{
  operator new();
}

void sub_1003454FC()
{
  operator delete();
}

void sub_100345520()
{
  operator new();
}

void sub_1003455E0()
{
  operator delete();
}

unsigned int **sub_100345604(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_100345658()
{
  operator new();
}

void sub_100345718()
{
  operator delete();
}

unsigned int **sub_10034573C(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_100345790()
{
  operator new();
}

void sub_100345850()
{
  operator delete();
}

unsigned int **sub_100345874(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_1003458C8()
{
  operator new();
}

void sub_100345988()
{
  operator delete();
}

unsigned int **sub_1003459AC(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_100345A00()
{
  operator new();
}

void sub_100345AC0()
{
  operator delete();
}

unsigned int **sub_100345AE4(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_100345B38()
{
  operator new();
}

void sub_100345BF8()
{
  operator delete();
}

unsigned int **sub_100345C1C(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_100345C70()
{
  operator new();
}

void sub_100345D30()
{
  operator delete();
}

unsigned int **sub_100345D54(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_100345DA8(uint64_t a1, char a2, int *a3, int *a4, int a5)
{
  unsigned int v5;
  __int16 v6;
  int v7;
  int v8;

  v5 = a1 & 7;
  if ((a1 & 7) != 0)
  {
    if (v5 > 4)
      goto LABEL_15;
  }
  else if ((a2 & 7) == 0 && a3[1] * *a3 < 257)
  {
    v6 = 2;
    goto LABEL_17;
  }
  if (!a5 || (v5 != 2 ? (v7 = 0x10000) : (v7 = 0x8000), (a1 & 7) != 0 ? (v8 = v7) : (v8 = 0x800000), a3[1] * *a3 <= v8))
  {
    v6 = 4;
LABEL_17:
    sub_100343F64(a1, v6 | a1 & 0xFF8, *a3, *a4);
  }
LABEL_15:
  v6 = 6;
  goto LABEL_17;
}

void sub_100345FDC()
{
  operator delete();
}

void sub_100346034(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, uint64_t *a5, int a6, char a7)
{
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void *v40;
  _QWORD v41[3];
  int32x2_t v42;
  _OWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  int32x2_t *v46;
  void *v47;
  _QWORD v48[2];
  _BYTE v49[8];

  sub_100298C2C(v49, &off_100453FE8);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_OWORD *)(v14 + 16);
    v43[0] = *(_OWORD *)v14;
    v43[1] = v15;
    v43[2] = *(_OWORD *)(v14 + 32);
    v16 = *(_QWORD *)(v14 + 56);
    v44 = *(_QWORD *)(v14 + 48);
    v45 = v16;
    v46 = (int32x2_t *)v43 + 1;
    v47 = v48;
    v48[0] = 0;
    v48[1] = 0;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 20);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }
    if (*(int *)(v14 + 4) > 2)
    {
      DWORD1(v43[0]) = 0;
      sub_100256B48((uint64_t)v43, v14);
    }
    else
    {
      v19 = *(_QWORD **)(v14 + 72);
      v20 = v47;
      *(_QWORD *)v47 = *v19;
      v20[1] = v19[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)v43);
  }
  v21 = v43[0];
  if (a3 >= 0)
    v21 = a3;
  v42 = vrev64_s32(*v46);
  sub_10026214C(a2, &v42, v43[0] & 0xFF8 | v21 & 7, -1, 0, 0);
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v22 = *(_QWORD *)(a2 + 8);
    v23 = *(_OWORD *)(v22 + 16);
    v36[0] = *(_OWORD *)v22;
    v36[1] = v23;
    v36[2] = *(_OWORD *)(v22 + 32);
    v24 = *(_QWORD *)(v22 + 56);
    v37 = *(_QWORD *)(v22 + 48);
    v38 = v24;
    v39 = (char *)v36 + 8;
    v40 = v41;
    v41[0] = 0;
    v41[1] = 0;
    if (v24)
    {
      v25 = (unsigned int *)(v24 + 20);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }
    if (*(int *)(v22 + 4) > 2)
    {
      DWORD1(v36[0]) = 0;
      sub_100256B48((uint64_t)v36, v22);
    }
    else
    {
      v27 = *(_QWORD **)(v22 + 72);
      v28 = v40;
      *(_QWORD *)v40 = *v27;
      v28[1] = v27[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)v36);
  }
  if ((a7 & 0x10) != 0 && a6)
  {
    v29 = DWORD2(v43[0]);
    if (DWORD2(v43[0]) == 1)
      a4[1] = 1;
    v30 = HIDWORD(v43[0]);
    if (HIDWORD(v43[0]) == 1)
      *a4 = 1;
    v35 = 0;
    v34 = __PAIR64__(v29, v30);
  }
  else
  {
    v35 = 0;
    v34 = (unint64_t)vrev64_s32(*(int32x2_t *)((char *)v43 + 8));
    if ((a7 & 0x10) == 0)
      sub_100258BD0((uint64_t)v43, &v34, &v35);
  }
  v31 = *(_QWORD *)a4;
  v32 = *a5;
  v33 = v31;
  sub_100345DA8(v43[0] & 0xFFF, v36[0], (int *)&v33, (int *)&v32, a6);
}

void sub_1003463F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_100006BE4((uint64_t)&a15);
  sub_100006BE4((uint64_t)&a29);
  sub_1001D40CC(v29 - 80);
  _Unwind_Resume(a1);
}

void sub_10034643C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_100006BE4((uint64_t)&a29);
  sub_1001D40CC(v29 - 80);
  _Unwind_Resume(a1);
}

void sub_10034645C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_100346470(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];

  sub_100298C2C(v13, &off_100454008);
  v10 = *a3;
  v11 = *a4;
  v12 = v10;
  sub_100346034(a1, a2, -1, &v12, &v11, 1, a5);
}

void sub_100346504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100346518(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  _BOOL4 v9;
  double v10;
  double v11;
  uint64_t v12;
  float *v13;
  float v14;
  double v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  long double v33;
  const mach_header_64 *v34;
  float64_t *v35;
  uint64_t v40;
  int32x2_t v41;
  int64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float32x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  long double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  float32x2_t *v55;
  uint64_t v56;
  float32x4_t v57;
  float *v58;
  uint64_t v59;
  float v60;
  float64x2_t *v61;
  uint64_t v62;
  float64x2_t v63;
  double *v64;
  uint64_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t __x;
  long double v69;
  float64x2_t v70;
  float64x2_t v71;
  double v72;
  double v73;
  uint64_t __src[2];

  v9 = a1 < 8 && (a1 & 0x80000001) == 1 && a4 <= 0.0;
  if ((a2 - 5) >= 2)
  {
    __src[0] = 0;
    __src[1] = 0;
    qmemcpy((void *)sub_10029430C(__src, 24), "ktype == 5 || ktype == 6", 24);
    sub_100294B74(-215, __src, "getGaussianKernel", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 1726);
  }
  *(_DWORD *)a3 = 1124007936;
  *(_OWORD *)(a3 + 4) = 0u;
  *(_OWORD *)(a3 + 20) = 0u;
  *(_OWORD *)(a3 + 36) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 64) = a3 + 8;
  *(_QWORD *)(a3 + 72) = a3 + 80;
  *(_QWORD *)(a3 + 88) = 0;
  __src[0] = a1 | 0x100000000;
  sub_100255F30((char *)a3, 2, __src, a2 & 0xFFF);
  v10 = (double)(a1 - 1);
  v11 = (v10 * 0.5 + -1.0) * 0.3 + 0.8;
  if (a4 > 0.0)
    v11 = a4;
  if (a1 < 1)
    return;
  v12 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    v13 = (float *)((char *)&unk_1003C3DA4 + 28 * (a1 >> 1));
    v14 = *v13;
    if (a2 == 5)
    {
      *(float *)v12 = v14;
      v15 = v14 + 0.0;
      if (a1 != 1)
      {
        v16 = v13[1];
        *(float *)(v12 + 4) = v16;
        v15 = v15 + v16;
        if (a1 != 2)
        {
          v17 = v13[2];
          *(float *)(v12 + 8) = v17;
          v15 = v15 + v17;
          if (a1 != 3)
          {
            v18 = v13[3];
            *(float *)(v12 + 12) = v18;
            v15 = v15 + v18;
            if (a1 != 4)
            {
              v19 = v13[4];
              *(float *)(v12 + 16) = v19;
              v15 = v15 + v19;
              if (a1 != 5)
              {
                v20 = v13[5];
                *(float *)(v12 + 20) = v20;
                v15 = v15 + v20;
                if (a1 != 6)
                {
                  v21 = v13[6];
                  *(float *)(v12 + 24) = v21;
                  v15 = v15 + v21;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v25 = v14;
      *(double *)v12 = v25;
      v15 = v25 + 0.0;
      if (a1 != 1)
      {
        v26 = v13[1];
        *(double *)(v12 + 8) = v26;
        v15 = v15 + v26;
        if (a1 != 2)
        {
          v27 = v13[2];
          *(double *)(v12 + 16) = v27;
          v15 = v15 + v27;
          if (a1 != 3)
          {
            v28 = v13[3];
            *(double *)(v12 + 24) = v28;
            v15 = v15 + v28;
            if (a1 != 4)
            {
              v29 = v13[4];
              *(double *)(v12 + 32) = v29;
              v15 = v15 + v29;
              if (a1 != 5)
              {
                v30 = v13[5];
                *(double *)(v12 + 40) = v30;
                v15 = v15 + v30;
                if (a1 != 6)
                {
                  v31 = v13[6];
                  *(double *)(v12 + 48) = v31;
                  v15 = v15 + v31;
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_38;
  }
  v22 = -v10;
  v23 = -0.5 / (v11 * v11);
  v72 = -v10;
  v73 = v23;
  if (a2 != 5)
  {
    v32 = 0;
    v15 = 0.0;
    do
    {
      v33 = exp(((double)(int)v32 + v22 * 0.5) * (v23 * ((double)(int)v32 + v22 * 0.5)));
      v22 = v72;
      v23 = v73;
      *(long double *)(v12 + 8 * v32) = v33;
      v15 = v15 + v33;
      ++v32;
    }
    while (a1 != v32);
    goto LABEL_38;
  }
  if (a1 >= 4)
  {
    v24 = a1 & 0xFFFFFFFC;
    v67 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v22, 0);
    v34 = &_mh_execute_header;
    v35 = (float64_t *)(v12 + 8);
    v15 = 0.0;
    __asm { FMOV            V0.2D, #0.5 }
    v66 = _Q0;
    v40 = v24;
    do
    {
      v41 = vadd_s32((int32x2_t)v34, (int32x2_t)0x200000002);
      v42.i64[0] = (int)v34;
      v42.i64[1] = SHIDWORD(v34);
      v43 = vcvtq_f64_s64(v42);
      v42.i64[0] = v41.i32[0];
      v42.i64[1] = v41.i32[1];
      v44 = vmlaq_f64(v43, v66, v67);
      v45 = vmlaq_f64(vcvtq_f64_s64(v42), v66, v67);
      __x = vmulq_f64(v44, vmulq_n_f64(v44, v23));
      v71 = vmulq_f64(v45, vmulq_n_f64(v45, v23));
      v69 = exp(__x.f64[1]);
      v46.f64[0] = exp(__x.f64[0]);
      v46.f64[1] = v69;
      v70 = v46;
      __x.f64[0] = exp(v71.f64[1]);
      v47.f64[0] = exp(v71.f64[0]);
      v23 = v73;
      v47.f64[1] = __x.f64[0];
      v48 = vcvt_f32_f64(v70);
      *(float32x2_t *)&v47.f64[0] = vcvt_f32_f64(v47);
      *(v35 - 1) = *(float64_t *)&v48;
      *v35 = v47.f64[0];
      v49 = vcvtq_f64_f32(v48);
      v50 = vcvtq_f64_f32(*(float32x2_t *)&v47.f64[0]);
      v15 = v15 + v49.f64[0] + v49.f64[1] + v50.f64[0] + v50.f64[1];
      v34 = (const mach_header_64 *)vadd_s32((int32x2_t)v34, (int32x2_t)0x400000004);
      v35 += 2;
      v40 -= 4;
    }
    while (v40);
    v22 = v72;
    if (v24 == a1)
      goto LABEL_38;
  }
  else
  {
    v24 = 0;
    v15 = 0.0;
  }
  do
  {
    v51 = exp(((double)(int)v24 + v22 * 0.5) * (v23 * ((double)(int)v24 + v22 * 0.5)));
    v22 = v72;
    v23 = v73;
    *(float *)&v51 = v51;
    *(_DWORD *)(v12 + 4 * v24) = LODWORD(v51);
    v15 = v15 + *(float *)&v51;
    ++v24;
  }
  while (a1 != v24);
LABEL_38:
  v52 = 1.0 / v15;
  if (a2 != 5)
  {
    if (a1 >= 4)
    {
      v54 = a1 & 0xFFFFFFFC;
      v61 = (float64x2_t *)(v12 + 16);
      v62 = v54;
      do
      {
        v63 = vmulq_n_f64(*v61, v52);
        v61[-1] = vmulq_n_f64(v61[-1], v52);
        *v61 = v63;
        v61 += 2;
        v62 -= 4;
      }
      while (v62);
      if (v54 == a1)
        return;
    }
    else
    {
      v54 = 0;
    }
    v64 = (double *)(v12 + 8 * v54);
    v65 = a1 - v54;
    do
    {
      *v64 = v52 * *v64;
      ++v64;
      --v65;
    }
    while (v65);
    return;
  }
  if (a1 < 8)
  {
    v53 = 0;
LABEL_46:
    v58 = (float *)(v12 + 4 * v53);
    v59 = a1 - v53;
    do
    {
      v60 = v52 * *v58;
      *v58++ = v60;
      --v59;
    }
    while (v59);
    return;
  }
  v53 = a1 & 0x7FFFFFF8;
  v55 = (float32x2_t *)(v12 + 16);
  v56 = a1 & 0xFFFFFFF8;
  do
  {
    v57 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v55), v52)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v55->f32), v52));
    *(float32x4_t *)v55[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v55[-2]), v52)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v55[-2].f32), v52));
    *(float32x4_t *)v55->f32 = v57;
    v55 += 4;
    v56 -= 8;
  }
  while (v56);
  if (v53 != a1)
    goto LABEL_46;
}

void sub_100346AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100346AD4(uint64_t a1, uint64_t a2, char a3, int *a4, double a5, double a6)
{
  unsigned int v9;
  double v10;
  int v11;
  int v13;
  int v14;
  int v16;
  double v20;
  double v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  _BYTE *v37;
  int v38;
  double v39;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  __int128 v49;
  _QWORD *v50;
  _QWORD *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE v70[64];
  _BYTE *v71;
  void *v72;
  _BYTE v73[16];

  v9 = a3 & 7;
  if (a6 <= 0.0)
    v10 = a5;
  else
    v10 = a6;
  v11 = *a4;
  if (a5 > 0.0 && v11 <= 0)
  {
    if ((a3 & 7) != 0)
      v13 = 4;
    else
      v13 = 3;
    v11 = (uint64_t)rint((double)v13 * a5 * 2.0 + 1.0) | 1;
    *a4 = v11;
  }
  v14 = a4[1];
  if (v10 > 0.0 && v14 <= 0)
  {
    if ((a3 & 7) != 0)
      v16 = 4;
    else
      v16 = 3;
    v14 = (uint64_t)rint(v10 * (double)v16 * 2.0 + 1.0) | 1;
    a4[1] = v14;
  }
  if (v11 < 1 || (v11 & 1) == 0 || v14 < 1 || (v14 & 1) == 0)
  {
    *(_OWORD *)v70 = 0uLL;
    qmemcpy((void *)sub_10029430C(v70, 84), "ksize.width > 0 && ksize.width % 2 == 1 && ksize.height > 0 && ksize.height % 2 == 1", 84);
    sub_100294B74(-215, (uint64_t *)v70, "createGaussianKernels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 1780);
  }
  if (a5 >= 0.0)
    v20 = a5;
  else
    v20 = 0.0;
  if (v10 >= 0.0)
    v21 = v10;
  else
    v21 = 0.0;
  if (v9 <= 5)
    v9 = 5;
  sub_100346518(v11, v9, (uint64_t)v70, v20);
  v22 = *(_QWORD *)(a1 + 56);
  if (v70 != (_BYTE *)a1)
  {
    if (v22)
    {
      v23 = (unsigned int *)(v22 + 20);
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
        sub_100256C90(a1);
    }
    *(_QWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    if (*(int *)(a1 + 4) >= 1)
    {
      v26 = 0;
      v27 = *(_QWORD *)(a1 + 64);
      do
        *(_DWORD *)(v27 + 4 * v26++) = 0;
      while (v26 < *(int *)(a1 + 4));
    }
    v28 = *(_DWORD *)&v70[4];
    v29 = *(_OWORD *)&v70[16];
    *(_OWORD *)a1 = *(_OWORD *)v70;
    *(_OWORD *)(a1 + 16) = v29;
    v30 = *(_OWORD *)&v70[48];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v70[32];
    *(_OWORD *)(a1 + 48) = v30;
    v31 = *(_QWORD **)(a1 + 72);
    if (v31 == (_QWORD *)(a1 + 80))
    {
      v32 = v72;
      if (v28 <= 2)
        goto LABEL_53;
    }
    else
    {
      j__free(v31);
      *(_QWORD *)(a1 + 64) = a1 + 8;
      *(_QWORD *)(a1 + 72) = a1 + 80;
      v31 = (_QWORD *)(a1 + 80);
      v32 = v72;
      if (*(int *)&v70[4] <= 2)
      {
LABEL_53:
        *v31 = *v32;
        v31[1] = v32[1];
LABEL_61:
        *(_DWORD *)v70 = 1124007936;
        memset(&v70[4], 0, 60);
        goto LABEL_62;
      }
    }
    *(_QWORD *)(a1 + 64) = v71;
    *(_QWORD *)(a1 + 72) = v32;
    v71 = &v70[8];
    v72 = v73;
    goto LABEL_61;
  }
  if (v22)
  {
    v33 = (unsigned int *)(v22 + 20);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      sub_100256C90((uint64_t)v70);
  }
LABEL_62:
  *(_QWORD *)&v70[56] = 0;
  memset(&v70[16], 0, 32);
  if (*(int *)&v70[4] >= 1)
  {
    v36 = 0;
    v37 = v71;
    do
      *(_DWORD *)&v37[4 * v36++] = 0;
    while (v36 < *(int *)&v70[4]);
  }
  if (v72 != v73)
    j__free(v72);
  v38 = a4[1];
  v39 = vabdd_f64(v20, v21);
  if (v38 == *a4 && v39 < 2.22044605e-16)
  {
    if (a2 == a1)
      return;
    v55 = *(_QWORD *)(a1 + 56);
    if (v55)
    {
      v56 = (unsigned int *)(v55 + 20);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 + 1, v56));
    }
    v58 = *(_QWORD *)(a2 + 56);
    if (v58)
    {
      v59 = (unsigned int *)(v58 + 20);
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (!v61)
        sub_100256C90(a2);
    }
    *(_QWORD *)(a2 + 56) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    if (*(int *)(a2 + 4) <= 0)
    {
      *(_DWORD *)a2 = *(_DWORD *)a1;
      v65 = *(_DWORD *)(a1 + 4);
      if (v65 <= 2)
      {
LABEL_102:
        *(_DWORD *)(a2 + 4) = v65;
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
        v66 = *(_QWORD **)(a1 + 72);
        v67 = *(_QWORD **)(a2 + 72);
        *v67 = *v66;
        v67[1] = v66[1];
LABEL_113:
        *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
        *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
        return;
      }
    }
    else
    {
      v62 = 0;
      v63 = *(_QWORD *)(a2 + 64);
      do
      {
        *(_DWORD *)(v63 + 4 * v62++) = 0;
        v64 = *(int *)(a2 + 4);
      }
      while (v62 < v64);
      *(_DWORD *)a2 = *(_DWORD *)a1;
      if ((int)v64 <= 2)
      {
        v65 = *(_DWORD *)(a1 + 4);
        if (v65 <= 2)
          goto LABEL_102;
      }
    }
    sub_100256B48(a2, a1);
    goto LABEL_113;
  }
  sub_100346518(v38, v9, (uint64_t)v70, v21);
  v41 = *(_QWORD *)(a2 + 56);
  if (v70 == (_BYTE *)a2)
  {
    if (v41)
    {
      v52 = (unsigned int *)(v41 + 20);
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
        sub_100256C90((uint64_t)v70);
    }
    goto LABEL_106;
  }
  if (v41)
  {
    v42 = (unsigned int *)(v41 + 20);
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
      sub_100256C90(a2);
  }
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (*(int *)(a2 + 4) >= 1)
  {
    v45 = 0;
    v46 = *(_QWORD *)(a2 + 64);
    do
      *(_DWORD *)(v46 + 4 * v45++) = 0;
    while (v45 < *(int *)(a2 + 4));
  }
  v47 = *(_DWORD *)&v70[4];
  v48 = *(_OWORD *)&v70[16];
  *(_OWORD *)a2 = *(_OWORD *)v70;
  *(_OWORD *)(a2 + 16) = v48;
  v49 = *(_OWORD *)&v70[48];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v70[32];
  *(_OWORD *)(a2 + 48) = v49;
  v50 = *(_QWORD **)(a2 + 72);
  if (v50 == (_QWORD *)(a2 + 80))
  {
    v51 = v72;
    if (v47 <= 2)
      goto LABEL_82;
LABEL_104:
    *(_QWORD *)(a2 + 64) = v71;
    *(_QWORD *)(a2 + 72) = v51;
    v71 = &v70[8];
    v72 = v73;
    goto LABEL_105;
  }
  j__free(v50);
  *(_QWORD *)(a2 + 64) = a2 + 8;
  *(_QWORD *)(a2 + 72) = a2 + 80;
  v50 = (_QWORD *)(a2 + 80);
  v51 = v72;
  if (*(int *)&v70[4] > 2)
    goto LABEL_104;
LABEL_82:
  *v50 = *v51;
  v50[1] = v51[1];
LABEL_105:
  *(_DWORD *)v70 = 1124007936;
  memset(&v70[4], 0, 60);
LABEL_106:
  *(_QWORD *)&v70[56] = 0;
  memset(&v70[16], 0, 32);
  if (*(int *)&v70[4] >= 1)
  {
    v68 = 0;
    v69 = v71;
    do
      *(_DWORD *)&v69[4 * v68++] = 0;
    while (v68 < *(int *)&v70[4]);
  }
  if (v72 != v73)
    j__free(v72);
}

void sub_100347090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1003470B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_1003470CC(uint64_t a1, uint64_t a2, int *a3, char a4, double a5, double a6)
{
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  _OWORD *v38;
  uint64_t v39;
  int v40;
  _OWORD *v41;
  uint64_t v42;
  int32x2_t v43;
  uint64_t v44;
  _OWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void *v49;
  _QWORD v50[2];
  _OWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void *v55;
  _QWORD v56[3];
  int v57[2];
  _DWORD v58[16];
  _DWORD *v59;
  void *v60;
  _QWORD v61[2];
  _DWORD v62[16];
  _DWORD *v63;
  _QWORD *v64;
  _QWORD v65[2];
  int32x2_t v66;
  int32x2_t v67;
  _BYTE v68[8];
  int v69;

  sub_100298C2C(v68, &off_100454028);
  v12 = sub_10025E20C((int *)a1, -1);
  sub_10025D920(a1, 0xFFFFFFFF, (uint64_t)&v67);
  v66 = v67;
  sub_10026214C(a2, &v66, v12, -1, 0, 0);
  if ((a4 & 0x10) == 0)
    goto LABEL_6;
  if (v67.i32[1] == 1)
    a3[1] = 1;
  if (v67.i32[0] == 1)
  {
    *a3 = 1;
  }
  else
  {
LABEL_6:
    v13 = *a3;
    if (*a3 != 1)
    {
      v14 = a3[1];
      goto LABEL_11;
    }
  }
  v14 = a3[1];
  if (v14 != 1)
  {
    v13 = 1;
LABEL_11:
    v62[0] = 1124007936;
    memset(&v62[1], 0, 60);
    v63 = &v62[2];
    v64 = v65;
    v65[0] = 0;
    v65[1] = 0;
    v58[0] = 1124007936;
    memset(&v58[1], 0, 60);
    v59 = &v58[2];
    v60 = v61;
    v61[0] = 0;
    v61[1] = 0;
    v57[0] = v13;
    v57[1] = v14;
    sub_100346AD4((uint64_t)v62, (uint64_t)v58, v12, v57, a5, a6);
    if (sub_10025D914((_DWORD *)a1) == 0x10000)
    {
      v15 = *(_QWORD *)(a1 + 8);
      v16 = *(_OWORD *)(v15 + 16);
      v51[0] = *(_OWORD *)v15;
      v51[1] = v16;
      v51[2] = *(_OWORD *)(v15 + 32);
      v17 = *(_QWORD *)(v15 + 56);
      v52 = *(_QWORD *)(v15 + 48);
      v53 = v17;
      v54 = (char *)v51 + 8;
      v55 = v56;
      v56[0] = 0;
      v56[1] = 0;
      if (v17)
      {
        v18 = (unsigned int *)(v17 + 20);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
      if (*(int *)(v15 + 4) > 2)
      {
        DWORD1(v51[0]) = 0;
        sub_100256B48((uint64_t)v51, v15);
      }
      else
      {
        v20 = *(_QWORD **)(v15 + 72);
        v21 = v55;
        *(_QWORD *)v55 = *v20;
        v21[1] = v20[1];
      }
    }
    else
    {
      sub_10025CCB8(a1, -1, (uint64_t)v51);
    }
    if (sub_10025D914((_DWORD *)a2) == 0x10000)
    {
      v22 = *(_QWORD *)(a2 + 8);
      v23 = *(_OWORD *)(v22 + 16);
      v45[0] = *(_OWORD *)v22;
      v24 = *(_OWORD *)(v22 + 32);
      v45[1] = v23;
      v45[2] = v24;
      v25 = *(_QWORD *)(v22 + 56);
      v46 = *(_QWORD *)(v22 + 48);
      v47 = v25;
      v48 = (char *)v45 + 8;
      v49 = v50;
      v50[0] = 0;
      v50[1] = 0;
      if (v25)
      {
        v26 = (unsigned int *)(v25 + 20);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 + 1, v26));
      }
      if (*(int *)(v22 + 4) > 2)
      {
        DWORD1(v45[0]) = 0;
        sub_100256B48((uint64_t)v45, v22);
      }
      else
      {
        v28 = *(_QWORD **)(v22 + 72);
        v29 = v49;
        *(_QWORD *)v49 = *v28;
        v29[1] = v28[1];
      }
    }
    else
    {
      sub_10025CCB8(a2, -1, (uint64_t)v45);
    }
    v44 = 0;
    v43 = vrev64_s32(*(int32x2_t *)((char *)v51 + 8));
    if ((a4 & 0x10) == 0)
      sub_100258BD0((uint64_t)v51, &v43, &v44);
    v42 = 0;
    v40 = 16842752;
    v41 = v51;
    v37 = 33619968;
    v38 = v45;
    v39 = 0;
    v36 = 0;
    v34 = 16842752;
    v35 = v62;
    v33 = 0;
    v31 = 16842752;
    v32 = v58;
    v30 = -1;
    sub_1002F26C8((uint64_t)&v40, (uint64_t)&v37, v12 & 7, (uint64_t)&v34, (uint64_t)&v31, (int *)&v30, a4);
  }
  sub_1002617AC(a1, (_DWORD *)a2);
  if (v69)
    sub_1002989D0(v68);
}

void sub_100347610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  sub_100006BE4((uint64_t)&a25);
  sub_100006BE4((uint64_t)&a37);
  sub_100006BE4((uint64_t)&a51);
  sub_100006BE4(v51 - 224);
  sub_1001D40CC(v51 - 112);
  _Unwind_Resume(a1);
}

void sub_100347684(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_10034769C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

unint64_t sub_1003476C0(unint64_t result, unsigned __int8 *a2, uint32x4_t *a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  __int32 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  __int32 *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v34;
  BOOL v36;
  BOOL v38;
  BOOL v40;
  BOOL v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint32x4_t *v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint16x8_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint16x8_t v55;
  unint64_t v56;
  BOOL v58;
  BOOL v60;
  BOOL v61;
  uint64_t v62;
  uint8x8_t *v63;
  uint32x4_t *v64;
  uint64_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  __int32 *v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  const char *v86;
  unint64_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  uint16x8_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  uint64_t v94;
  uint32x4_t *v95;
  uint8x16_t *v96;
  uint8x16_t v97;
  uint16x8_t v98;
  uint8x16_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint32x4_t v103;
  uint32x4_t v104;
  uint32x4_t v105;
  uint32x4_t v106;
  uint8x16_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  uint32x4_t v110;
  uint32x4_t v111;
  uint32x4_t v112;
  uint32x4_t v113;
  uint8x16_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  uint64_t v117;
  uint32x4_t *v118;
  uint8x16_t *v119;
  uint8x16_t v120;
  uint16x8_t v121;
  uint16x8_t v122;
  uint8x16_t v123;
  uint16x8_t v124;
  uint16x8_t v125;
  uint64_t v126;
  uint64_t v127;
  int32x4_t v128;
  int32x4_t v129;
  uint64_t v130;
  int32x4_t v131;
  const char *v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  uint16x8_t v146;
  uint16x8_t v147;
  uint16x8_t v148;
  uint16x8_t v149;
  uint16x8_t v150;
  uint16x8_t v151;
  uint16x8_t v152;
  unsigned __int8 *v153;
  unint64_t v154;
  unsigned int *v155;
  uint64_t v156;
  int32x4_t v157;
  int32x4_t v158;
  uint8x8_t *v159;
  uint64_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  uint8x16_t v167;
  uint16x8_t v168;
  uint16x8_t v169;
  uint16x8_t v170;
  uint16x8_t v171;
  uint64_t v172;
  int32x4_t v173;
  int32x4_t v174;
  uint8x8_t *v175;
  uint64_t v176;
  uint8x8_t v177;
  uint16x8_t v178;
  unsigned __int8 *v179;
  uint64_t v180;
  int v181;
  unsigned int *v182;
  int v183;
  int v184;
  int32x4_t v185;
  int32x4_t v186;
  const char *v187;
  int32x4_t v188;
  uint64_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  const char *v211;
  uint16x8_t v212;
  uint16x8_t v213;
  uint16x8_t v214;
  uint16x8_t v215;
  uint16x8_t v216;
  uint16x8_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  uint16x8_t v223;
  uint16x8_t v224;
  uint32x4_t v225;
  uint32x4_t v226;
  uint32x4_t v227;
  uint32x4_t v228;
  uint32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  uint64_t v234;
  const char *v235;
  int32x4_t v236;
  int32x4_t v237;
  uint16x8_t v238;
  uint16x8_t v239;
  uint16x8_t v240;
  unint64_t v241;
  unsigned int *v242;
  uint64_t v243;
  uint32x4_t v244;
  uint32x4_t v245;
  uint32x4_t v246;
  uint32x4_t v247;
  uint32x4_t v248;
  uint32x4_t v249;
  int8x8x3_t v250;
  int8x16x3_t v251;
  int8x16x3_t v252;
  int8x8x4_t v253;
  int8x16x4_t v254;

  v5 = *(_DWORD *)(result + 8);
  if (v5 == 3)
  {
    v20 = (a5 * a4);
    if ((int)v20 < 1)
      return result;
    v21 = 2 * a5;
    if (v20 < 8)
    {
      v22 = 0;
      goto LABEL_12;
    }
    v22 = 0;
    v56 = (unint64_t)a3 + 4 * v20;
    v58 = &a2[a5 + v20] > (unsigned __int8 *)a3 && (unint64_t)&a2[a5] < v56;
    v60 = &a2[v20] > (unsigned __int8 *)a3 && v56 > (unint64_t)a2;
    v61 = (unint64_t)&a2[v21] < v56 && &a2[v21 + v20] > (unsigned __int8 *)a3;
    if (v61 || v58 || v60)
      goto LABEL_12;
    if (v20 >= 0x10)
    {
      v22 = v20 & 0x7FFFFFF0;
      v117 = v20 & 0xFFFFFFF0;
      v118 = a3;
      v119 = (uint8x16_t *)a2;
      do
      {
        v120 = *(uint8x16_t *)((char *)v119 + a5);
        v121 = vaddl_high_u8(v120, *v119);
        v122 = vaddl_u8(*(uint8x8_t *)v120.i8, *(uint8x8_t *)v119->i8);
        v123 = *(uint8x16_t *)((char *)v119 + 2 * a5);
        v124 = vmovl_high_u8(v123);
        v125 = vmovl_u8(*(uint8x8_t *)v123.i8);
        v118[2] = vaddl_u16(*(uint16x4_t *)v121.i8, *(uint16x4_t *)v124.i8);
        v118[3] = vaddl_high_u16(v121, v124);
        *v118 = vaddl_u16(*(uint16x4_t *)v122.i8, *(uint16x4_t *)v125.i8);
        v118[1] = vaddl_high_u16(v122, v125);
        v118 += 4;
        ++v119;
        v117 -= 16;
      }
      while (v117);
      if (v22 == v20)
        return result;
      if ((((_BYTE)a5 * (_BYTE)a4) & 8) == 0)
      {
LABEL_12:
        v23 = &a2[v22];
        v24 = &a3->i32[v22];
        v25 = v20 - v22;
        do
        {
          *v24++ = v23[a5] + *v23 + v23[2 * a5];
          ++v23;
          --v25;
        }
        while (v25);
        return result;
      }
    }
    else
    {
      v22 = 0;
    }
    v62 = v22;
    v22 = v20 & 0xFFFFFFF8;
    v63 = (uint8x8_t *)&a2[v62];
    v64 = (uint32x4_t *)((char *)a3 + 4 * v62);
    v65 = v62 - v22;
    do
    {
      v66 = vaddl_u8(*(uint8x8_t *)((char *)v63 + a5), *v63);
      v67 = vmovl_u8(*(uint8x8_t *)((char *)v63 + 2 * a5));
      *v64 = vaddl_u16(*(uint16x4_t *)v66.i8, *(uint16x4_t *)v67.i8);
      v64[1] = vaddl_high_u16(v66, v67);
      v64 += 2;
      ++v63;
      v65 += 8;
    }
    while (v65);
    if (v22 == v20)
      return result;
    goto LABEL_12;
  }
  if (v5 != 5)
  {
    v26 = (v5 * a5);
    v27 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v26 < 1)
          {
            v32 = 0;
            v31 = 0;
            v30 = 0;
            v29 = 0;
            goto LABEL_131;
          }
          if (v26 < 0x1D)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            goto LABEL_129;
          }
          v79 = ((v26 - 1) >> 2) + 1;
          if (v26 >= 0x3D)
          {
            v128 = 0uLL;
            v80 = v79 & 0x7FFFFFFFFFFFFFF0;
            v129 = 0uLL;
            v130 = v79 & 0x7FFFFFFFFFFFFFF0;
            v131 = 0uLL;
            v132 = (const char *)a2;
            v133 = 0uLL;
            v134 = 0uLL;
            v135 = 0uLL;
            v136 = 0uLL;
            v137 = 0uLL;
            v138 = 0uLL;
            v139 = 0uLL;
            v140 = 0uLL;
            v141 = 0uLL;
            v142 = 0uLL;
            v143 = 0uLL;
            v144 = 0uLL;
            v145 = 0uLL;
            do
            {
              v254 = vld4q_s8(v132);
              v132 += 64;
              v146 = vmovl_u8(*(uint8x8_t *)v254.val[0].i8);
              v147 = vmovl_high_u8((uint8x16_t)v254.val[0]);
              v145 = (int32x4_t)vaddw_high_u16((uint32x4_t)v145, v147);
              v144 = (int32x4_t)vaddw_u16((uint32x4_t)v144, *(uint16x4_t *)v147.i8);
              v143 = (int32x4_t)vaddw_high_u16((uint32x4_t)v143, v146);
              v142 = (int32x4_t)vaddw_u16((uint32x4_t)v142, *(uint16x4_t *)v146.i8);
              v148 = vmovl_u8(*(uint8x8_t *)v254.val[1].i8);
              v149 = vmovl_high_u8((uint8x16_t)v254.val[1]);
              v141 = (int32x4_t)vaddw_high_u16((uint32x4_t)v141, v149);
              v140 = (int32x4_t)vaddw_u16((uint32x4_t)v140, *(uint16x4_t *)v149.i8);
              v139 = (int32x4_t)vaddw_high_u16((uint32x4_t)v139, v148);
              v138 = (int32x4_t)vaddw_u16((uint32x4_t)v138, *(uint16x4_t *)v148.i8);
              v150 = vmovl_u8(*(uint8x8_t *)v254.val[2].i8);
              v151 = vmovl_high_u8((uint8x16_t)v254.val[2]);
              v137 = (int32x4_t)vaddw_high_u16((uint32x4_t)v137, v151);
              v136 = (int32x4_t)vaddw_u16((uint32x4_t)v136, *(uint16x4_t *)v151.i8);
              v135 = (int32x4_t)vaddw_high_u16((uint32x4_t)v135, v150);
              v134 = (int32x4_t)vaddw_u16((uint32x4_t)v134, *(uint16x4_t *)v150.i8);
              v152 = vmovl_u8(*(uint8x8_t *)v254.val[3].i8);
              v254.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v254.val[3]);
              v133 = (int32x4_t)vaddw_high_u16((uint32x4_t)v133, (uint16x8_t)v254.val[0]);
              v131 = (int32x4_t)vaddw_u16((uint32x4_t)v131, *(uint16x4_t *)v254.val[0].i8);
              v129 = (int32x4_t)vaddw_high_u16((uint32x4_t)v129, v152);
              v128 = (int32x4_t)vaddw_u16((uint32x4_t)v128, *(uint16x4_t *)v152.i8);
              v130 -= 16;
            }
            while (v130);
            v32 = vaddvq_s32(vaddq_s32(vaddq_s32(v142, v144), vaddq_s32(v143, v145)));
            v31 = vaddvq_s32(vaddq_s32(vaddq_s32(v138, v140), vaddq_s32(v139, v141)));
            v30 = vaddvq_s32(vaddq_s32(vaddq_s32(v134, v136), vaddq_s32(v135, v137)));
            v29 = vaddvq_s32(vaddq_s32(vaddq_s32(v128, v131), vaddq_s32(v129, v133)));
            if (v79 == v80)
              goto LABEL_131;
            if ((v79 & 8) == 0)
            {
              v28 = 4 * v80;
LABEL_129:
              v153 = a2 + 3;
              do
              {
                v32 += a2[v28];
                v31 += v153[v28 - 2];
                v30 += v153[v28 - 1];
                v29 += v153[v28];
                v28 += 4;
              }
              while (v28 < v26);
              goto LABEL_131;
            }
          }
          else
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v80 = 0;
          }
          v28 = 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
          v81 = (int32x4_t)v29;
          v82 = (int32x4_t)v30;
          v83 = (int32x4_t)v31;
          v84 = (int32x4_t)v32;
          v85 = 0uLL;
          v86 = (const char *)&a2[4 * v80];
          v87 = v80 - (v79 & 0x7FFFFFFFFFFFFFF8);
          v88 = 0uLL;
          v89 = 0uLL;
          v90 = 0uLL;
          do
          {
            v253 = vld4_s8(v86);
            v86 += 32;
            v91 = vmovl_u8((uint8x8_t)v253.val[0]);
            v90 = (int32x4_t)vaddw_high_u16((uint32x4_t)v90, v91);
            v84 = (int32x4_t)vaddw_u16((uint32x4_t)v84, *(uint16x4_t *)v91.i8);
            v92 = vmovl_u8((uint8x8_t)v253.val[1]);
            v89 = (int32x4_t)vaddw_high_u16((uint32x4_t)v89, v92);
            v83 = (int32x4_t)vaddw_u16((uint32x4_t)v83, *(uint16x4_t *)v92.i8);
            v93 = vmovl_u8((uint8x8_t)v253.val[2]);
            v88 = (int32x4_t)vaddw_high_u16((uint32x4_t)v88, v93);
            v82 = (int32x4_t)vaddw_u16((uint32x4_t)v82, *(uint16x4_t *)v93.i8);
            *(uint16x8_t *)v253.val[0].i8 = vmovl_u8((uint8x8_t)v253.val[3]);
            v85 = (int32x4_t)vaddw_high_u16((uint32x4_t)v85, *(uint16x8_t *)v253.val[0].i8);
            v81 = (int32x4_t)vaddw_u16((uint32x4_t)v81, (uint16x4_t)v253.val[0]);
            v87 += 8;
          }
          while (v87);
          v32 = vaddvq_s32(vaddq_s32(v84, v90));
          v31 = vaddvq_s32(vaddq_s32(v83, v89));
          v30 = vaddvq_s32(vaddq_s32(v82, v88));
          v29 = vaddvq_s32(vaddq_s32(v81, v85));
          if (v79 != (v79 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_129;
LABEL_131:
          a3->i32[0] = v32;
          a3->i32[1] = v31;
          a3->i32[2] = v30;
          a3->i32[3] = v29;
          if ((int)v27 >= 1)
          {
            v154 = 0;
            v155 = &a3[1].u32[3];
            v156 = (uint64_t)&a2[(int)v26 + 1];
            do
            {
              result = (unint64_t)&a2[v154];
              v32 = v32 - a2[v154] + *(unsigned __int8 *)(v156 + v154 - 1);
              v31 = v31 - a2[v154 + 1] + *(unsigned __int8 *)(v156 + v154);
              v30 = v30 - a2[v154 + 2] + *(unsigned __int8 *)(v156 + v154 + 1);
              v29 = v29 - a2[v154 + 3] + *(unsigned __int8 *)(v156 + v154 + 2);
              v154 += 4;
              *(v155 - 3) = v32;
              *(v155 - 2) = v31;
              *(v155 - 1) = v30;
              *v155 = v29;
              v155 += 4;
            }
            while (v154 < v27);
          }
          return result;
        }
        if (a5 < 1)
          return result;
        v74 = 0;
        v75 = &a3->i32[a5];
        while ((int)v26 < 1)
        {
          v77 = 0;
          a3->i32[0] = 0;
          if ((int)v27 >= 1)
            goto LABEL_98;
LABEL_91:
          ++v74;
          ++a2;
          a3 = (uint32x4_t *)((char *)a3 + 4);
          ++v75;
          if (v74 == a5)
            return result;
        }
        v76 = 0;
        v77 = 0;
        do
        {
          v77 += a2[v76];
          v76 += a5;
        }
        while (v76 < (int)v26);
        a3->i32[0] = v77;
        if ((int)v27 < 1)
          goto LABEL_91;
LABEL_98:
        v78 = 0;
        do
        {
          v77 = v77 - a2[v78] + a2[(int)v26 + v78];
          v75[v78] = v77;
          result = v78 + a5;
          v78 = result;
        }
        while ((uint64_t)result < (int)v27);
        goto LABEL_91;
      }
      if ((int)v26 < 1)
      {
        v73 = 0;
        v72 = 0;
        v71 = 0;
        goto LABEL_158;
      }
      if (v26 < 0x16)
      {
        v70 = 0;
        v71 = 0;
        v72 = 0;
        v73 = 0;
        goto LABEL_157;
      }
      v126 = ((int)v26 - 1) / 3u + 1;
      if (v26 >= 0x5E)
      {
        v185 = 0uLL;
        v127 = v126 & 0x7FFFFFE0;
        v186 = 0uLL;
        v187 = (const char *)a2;
        v188 = 0uLL;
        v189 = v127;
        v190 = 0uLL;
        v191 = 0uLL;
        v192 = 0uLL;
        v193 = 0uLL;
        v194 = 0uLL;
        v195 = 0uLL;
        v196 = 0uLL;
        v197 = 0uLL;
        v198 = 0uLL;
        v199 = 0uLL;
        v200 = 0uLL;
        v201 = 0uLL;
        v202 = 0uLL;
        v203 = 0uLL;
        v204 = 0uLL;
        v205 = 0uLL;
        v206 = 0uLL;
        v207 = 0uLL;
        v208 = 0uLL;
        v209 = 0uLL;
        v210 = 0uLL;
        do
        {
          v244 = (uint32x4_t)v199;
          v245 = (uint32x4_t)v198;
          v246 = (uint32x4_t)v196;
          v247 = (uint32x4_t)v197;
          v248 = (uint32x4_t)v195;
          v249 = (uint32x4_t)v194;
          v211 = v187;
          v187 += 96;
          v251 = vld3q_s8(v211);
          v211 += 48;
          v212 = vmovl_u8(*(uint8x8_t *)v251.val[0].i8);
          v252 = vld3q_s8(v211);
          v213 = vmovl_high_u8((uint8x16_t)v251.val[0]);
          v214 = vmovl_u8(*(uint8x8_t *)v252.val[0].i8);
          v215 = vmovl_high_u8((uint8x16_t)v252.val[0]);
          v216 = vmovl_u8(*(uint8x8_t *)v251.val[1].i8);
          v217 = vmovl_high_u8((uint8x16_t)v251.val[1]);
          v218 = v193;
          v219 = v190;
          v220 = v186;
          v221 = v188;
          v222 = v185;
          v223 = vmovl_u8(*(uint8x8_t *)v252.val[1].i8);
          v224 = vmovl_u8(*(uint8x8_t *)v251.val[2].i8);
          v251.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v251.val[2]);
          v251.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v252.val[1]);
          v251.val[2] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v252.val[2].i8);
          v252.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v252.val[2]);
          v206 = (int32x4_t)vaddw_high_u16((uint32x4_t)v206, v213);
          v205 = (int32x4_t)vaddw_u16((uint32x4_t)v205, *(uint16x4_t *)v213.i8);
          v204 = (int32x4_t)vaddw_high_u16((uint32x4_t)v204, v212);
          v203 = (int32x4_t)vaddw_u16((uint32x4_t)v203, *(uint16x4_t *)v212.i8);
          v210 = (int32x4_t)vaddw_high_u16((uint32x4_t)v210, v215);
          v209 = (int32x4_t)vaddw_u16((uint32x4_t)v209, *(uint16x4_t *)v215.i8);
          v208 = (int32x4_t)vaddw_high_u16((uint32x4_t)v208, v214);
          v207 = (int32x4_t)vaddw_u16((uint32x4_t)v207, *(uint16x4_t *)v214.i8);
          v198 = (int32x4_t)vaddw_high_u16(v245, v217);
          v197 = (int32x4_t)vaddw_u16(v247, *(uint16x4_t *)v217.i8);
          v196 = (int32x4_t)vaddw_high_u16(v246, v216);
          v195 = (int32x4_t)vaddw_u16(v248, *(uint16x4_t *)v216.i8);
          v202 = (int32x4_t)vaddw_high_u16((uint32x4_t)v202, (uint16x8_t)v251.val[1]);
          v201 = (int32x4_t)vaddw_u16((uint32x4_t)v201, *(uint16x4_t *)v251.val[1].i8);
          v200 = (int32x4_t)vaddw_high_u16((uint32x4_t)v200, v223);
          v199 = (int32x4_t)vaddw_u16(v244, *(uint16x4_t *)v223.i8);
          v225 = (uint32x4_t)v222;
          v226 = (uint32x4_t)v221;
          v227 = (uint32x4_t)v220;
          v228 = (uint32x4_t)v219;
          v229 = (uint32x4_t)v218;
          v190 = (int32x4_t)vaddw_high_u16(v228, (uint16x8_t)v251.val[0]);
          v188 = (int32x4_t)vaddw_u16(v226, *(uint16x4_t *)v251.val[0].i8);
          v186 = (int32x4_t)vaddw_high_u16(v227, v224);
          v185 = (int32x4_t)vaddw_u16(v225, *(uint16x4_t *)v224.i8);
          v194 = (int32x4_t)vaddw_high_u16(v249, (uint16x8_t)v252.val[0]);
          v193 = (int32x4_t)vaddw_u16(v229, *(uint16x4_t *)v252.val[0].i8);
          v192 = (int32x4_t)vaddw_high_u16((uint32x4_t)v192, (uint16x8_t)v251.val[2]);
          v191 = (int32x4_t)vaddw_u16((uint32x4_t)v191, *(uint16x4_t *)v251.val[2].i8);
          v189 -= 32;
        }
        while (v189);
        v73 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v207, v203), vaddq_s32(v209, v205)), vaddq_s32(vaddq_s32(v208, v204), vaddq_s32(v210, v206))));
        v72 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v199, v195), vaddq_s32(v201, v197)), vaddq_s32(vaddq_s32(v200, v196), vaddq_s32(v202, v198))));
        v71 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v191, v185), vaddq_s32(v193, v188)), vaddq_s32(vaddq_s32(v192, v186), vaddq_s32(v194, v190))));
        if (v127 == v126)
          goto LABEL_158;
        if ((((((int)v26 - 1) / 3u) + 1) & 0x18) == 0)
        {
          v70 = 3 * v127;
          do
          {
LABEL_157:
            v73 += a2[v70];
            v72 += a2[v70 + 1];
            v71 += a2[v70 + 2];
            v70 += 3;
          }
          while (v70 < v26);
          goto LABEL_158;
        }
      }
      else
      {
        v71 = 0;
        v72 = 0;
        v73 = 0;
        v127 = 0;
      }
      v70 = 3 * (v126 & 0x7FFFFFF8);
      v230 = (int32x4_t)v71;
      v231 = (int32x4_t)v72;
      v232 = (int32x4_t)v73;
      v233 = 0uLL;
      v234 = v127 - (v126 & 0x7FFFFFF8);
      v235 = (const char *)&a2[3 * v127];
      v236 = 0uLL;
      v237 = 0uLL;
      do
      {
        v250 = vld3_s8(v235);
        v235 += 24;
        v238 = vmovl_u8((uint8x8_t)v250.val[0]);
        v237 = (int32x4_t)vaddw_high_u16((uint32x4_t)v237, v238);
        v232 = (int32x4_t)vaddw_u16((uint32x4_t)v232, *(uint16x4_t *)v238.i8);
        v239 = vmovl_u8((uint8x8_t)v250.val[1]);
        v236 = (int32x4_t)vaddw_high_u16((uint32x4_t)v236, v239);
        v231 = (int32x4_t)vaddw_u16((uint32x4_t)v231, *(uint16x4_t *)v239.i8);
        v240 = vmovl_u8((uint8x8_t)v250.val[2]);
        v233 = (int32x4_t)vaddw_high_u16((uint32x4_t)v233, v240);
        v230 = (int32x4_t)vaddw_u16((uint32x4_t)v230, *(uint16x4_t *)v240.i8);
        v234 += 8;
      }
      while (v234);
      v73 = vaddvq_s32(vaddq_s32(v232, v237));
      v72 = vaddvq_s32(vaddq_s32(v231, v236));
      v71 = vaddvq_s32(vaddq_s32(v230, v233));
      if ((v126 & 0x7FFFFFF8) != v126)
        goto LABEL_157;
LABEL_158:
      a3->i32[0] = v73;
      a3->i32[1] = v72;
      a3->i32[2] = v71;
      if ((int)v27 >= 1)
      {
        v241 = 0;
        v242 = (unsigned int *)&a3[1];
        v243 = (uint64_t)&a2[(int)v26 + 1];
        do
        {
          v73 = v73 - a2[v241] + *(unsigned __int8 *)(v243 + v241 - 1);
          result = a2[v241 + 1];
          v72 = v72 - result + *(unsigned __int8 *)(v243 + v241);
          v71 = v71 - a2[v241 + 2] + *(unsigned __int8 *)(v243 + v241 + 1);
          *(v242 - 1) = v73;
          *v242 = v72;
          a3->i32[(v241 + 5)] = v71;
          v242 += 3;
          v241 += 3;
        }
        while (v241 < v27);
      }
      return result;
    }
    if ((int)v26 < 1)
    {
      v69 = 0;
      goto LABEL_144;
    }
    if (v26 < 8)
    {
      v68 = 0;
      v69 = 0;
      goto LABEL_142;
    }
    if (v26 >= 0x20)
    {
      v157 = 0uLL;
      v68 = v26 & 0xFFFFFFE0;
      v158 = 0uLL;
      v159 = (uint8x8_t *)(a2 + 16);
      v160 = v68;
      v161 = 0uLL;
      v162 = 0uLL;
      v163 = 0uLL;
      v164 = 0uLL;
      v165 = 0uLL;
      v166 = 0uLL;
      do
      {
        v167 = *(uint8x16_t *)v159[-2].i8;
        v168 = vmovl_u8(*(uint8x8_t *)v167.i8);
        v169 = vmovl_high_u8(v167);
        v170 = vmovl_u8(*v159);
        v171 = vmovl_high_u8(*(uint8x16_t *)v159->i8);
        v162 = (int32x4_t)vaddw_high_u16((uint32x4_t)v162, v169);
        v161 = (int32x4_t)vaddw_u16((uint32x4_t)v161, *(uint16x4_t *)v169.i8);
        v158 = (int32x4_t)vaddw_high_u16((uint32x4_t)v158, v168);
        v157 = (int32x4_t)vaddw_u16((uint32x4_t)v157, *(uint16x4_t *)v168.i8);
        v166 = (int32x4_t)vaddw_high_u16((uint32x4_t)v166, v171);
        v165 = (int32x4_t)vaddw_u16((uint32x4_t)v165, *(uint16x4_t *)v171.i8);
        v164 = (int32x4_t)vaddw_high_u16((uint32x4_t)v164, v170);
        v163 = (int32x4_t)vaddw_u16((uint32x4_t)v163, *(uint16x4_t *)v170.i8);
        v159 += 4;
        v160 -= 32;
      }
      while (v160);
      v69 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v163, v157), vaddq_s32(v165, v161)), vaddq_s32(vaddq_s32(v164, v158), vaddq_s32(v166, v162))));
      if (v68 == v26)
        goto LABEL_144;
      if ((v26 & 0x18) == 0)
      {
LABEL_142:
        v179 = &a2[v68];
        v180 = v26 - v68;
        do
        {
          v181 = *v179++;
          v69 += v181;
          --v180;
        }
        while (v180);
        goto LABEL_144;
      }
    }
    else
    {
      v69 = 0;
      v68 = 0;
    }
    v172 = v68;
    v68 = v26 & 0xFFFFFFF8;
    v173 = 0uLL;
    v174 = (int32x4_t)v69;
    v175 = (uint8x8_t *)&a2[v172];
    v176 = v172 - v68;
    do
    {
      v177 = *v175++;
      v178 = vmovl_u8(v177);
      v173 = (int32x4_t)vaddw_high_u16((uint32x4_t)v173, v178);
      v174 = (int32x4_t)vaddw_u16((uint32x4_t)v174, *(uint16x4_t *)v178.i8);
      v176 += 8;
    }
    while (v176);
    v69 = vaddvq_s32(vaddq_s32(v174, v173));
    if (v68 != v26)
      goto LABEL_142;
LABEL_144:
    a3->i32[0] = v69;
    if ((int)v27 >= 1)
    {
      v182 = &a3->u32[1];
      do
      {
        v183 = a2[(int)v26];
        v184 = *a2++;
        v69 = v69 - v184 + v183;
        *v182++ = v69;
        --v27;
      }
      while (v27);
    }
    return result;
  }
  v6 = (a5 * a4);
  if ((int)v6 < 1)
    return result;
  v7 = a5;
  v8 = 2 * a5;
  v9 = 3 * a5;
  v10 = 4 * a5;
  if (v6 < 8)
  {
    v11 = 0;
    goto LABEL_6;
  }
  v11 = 0;
  result = (unint64_t)a3 + 4 * v6;
  v34 = &a2[v9 + v6] > (unsigned __int8 *)a3 && (unint64_t)&a2[v9] < result;
  v36 = &a2[v8 + v6] > (unsigned __int8 *)a3 && (unint64_t)&a2[v8] < result;
  v38 = &a2[a5 + v6] > (unsigned __int8 *)a3 && (unint64_t)&a2[a5] < result;
  v40 = &a2[v6] > (unsigned __int8 *)a3 && result > (unint64_t)a2;
  v41 = (unint64_t)&a2[v10] < result && &a2[v10 + v6] > (unsigned __int8 *)a3;
  if (v41 || v34 || v36 || v38 || v40)
    goto LABEL_6;
  if (v6 >= 0x10)
  {
    v11 = v6 & 0x7FFFFFF0;
    v94 = v6 & 0xFFFFFFF0;
    v95 = a3;
    v96 = (uint8x16_t *)a2;
    do
    {
      v97 = *(uint8x16_t *)((char *)v96 + a5);
      v98 = vaddl_high_u8(v97, *v96);
      v99 = *(uint8x16_t *)((char *)v96 + 2 * a5);
      v100 = vaddl_u8(*(uint8x8_t *)v97.i8, *(uint8x8_t *)v96->i8);
      v101 = vmovl_high_u8(v99);
      v102 = vmovl_u8(*(uint8x8_t *)v99.i8);
      v103 = vaddl_u16(*(uint16x4_t *)v100.i8, *(uint16x4_t *)v102.i8);
      v104 = vaddl_high_u16(v100, v102);
      v105 = vaddl_u16(*(uint16x4_t *)v98.i8, *(uint16x4_t *)v101.i8);
      v106 = vaddl_high_u16(v98, v101);
      v107 = *(uint8x16_t *)((char *)v96 + 3 * a5);
      v108 = vmovl_u8(*(uint8x8_t *)v107.i8);
      v109 = vmovl_high_u8(v107);
      v110 = vaddw_high_u16(v106, v109);
      v111 = vaddw_u16(v105, *(uint16x4_t *)v109.i8);
      v112 = vaddw_high_u16(v104, v108);
      v113 = vaddw_u16(v103, *(uint16x4_t *)v108.i8);
      v114 = *(uint8x16_t *)((char *)v96 + 4 * a5);
      v115 = vmovl_high_u8(v114);
      v116 = vmovl_u8(*(uint8x8_t *)v114.i8);
      v95[2] = vaddw_u16(v111, *(uint16x4_t *)v115.i8);
      v95[3] = vaddw_high_u16(v110, v115);
      *v95 = vaddw_u16(v113, *(uint16x4_t *)v116.i8);
      v95[1] = vaddw_high_u16(v112, v116);
      v95 += 4;
      ++v96;
      v94 -= 16;
    }
    while (v94);
    if (v11 == v6)
      return result;
    if ((((_BYTE)a5 * (_BYTE)a4) & 8) == 0)
    {
LABEL_6:
      v12 = 0;
      v13 = &a2[v11];
      v14 = &a2[v11 + v10];
      v15 = &a2[v11 + v9];
      v16 = &a2[v11 + v8];
      v17 = &a2[v11 + v7];
      v18 = v6 - v11;
      v19 = &a3->i32[v11];
      do
      {
        result = v14[v12];
        v19[v12] = v17[v12] + v13[v12] + v16[v12] + v15[v12] + result;
        ++v12;
      }
      while (v18 != v12);
      return result;
    }
  }
  else
  {
    v11 = 0;
  }
  v42 = &a2[a5];
  v43 = &a2[v8];
  v44 = &a2[v9];
  result = (unint64_t)&a2[v10];
  v45 = v6 & 0xFFFFFFF8;
  v46 = a2;
  v47 = (uint32x4_t *)((char *)a3 + 4 * v11);
  do
  {
    v48 = vaddl_u8(*(uint8x8_t *)&v42[v11], *(uint8x8_t *)&v46[v11]);
    v49 = vmovl_u8(*(uint8x8_t *)&v43[v11]);
    v50 = vaddl_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v49.i8);
    v51 = vaddl_high_u16(v48, v49);
    v52 = vmovl_u8(*(uint8x8_t *)&v44[v11]);
    v53 = vaddw_high_u16(v51, v52);
    v54 = vaddw_u16(v50, *(uint16x4_t *)v52.i8);
    v55 = vmovl_u8(*(uint8x8_t *)(result + v11));
    *v47 = vaddw_u16(v54, *(uint16x4_t *)v55.i8);
    v47[1] = vaddw_high_u16(v53, v55);
    v47 += 2;
    v46 += 8;
    v42 += 8;
    v43 += 8;
    v44 += 8;
    result += 8;
    v45 -= 8;
  }
  while (v11 != v45);
  v11 = v6 & 0x7FFFFFF8;
  if (v11 != v6)
    goto LABEL_6;
  return result;
}

void sub_10034833C()
{
  operator delete();
}

uint64_t sub_100348350(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_100348390(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

unint64_t sub_1003483B4(unint64_t result, uint8x16_t *a2, uint16x8_t *a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  __int16 *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  BOOL v34;
  BOOL v36;
  BOOL v38;
  BOOL v40;
  BOOL v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint8x16_t *v46;
  uint16x8_t *v47;
  unint64_t v48;
  BOOL v50;
  BOOL v52;
  BOOL v53;
  unint64_t v54;
  __int32 v55;
  unint64_t v56;
  __int32 v57;
  __int32 v58;
  __int32 v59;
  int v60;
  __int16 *v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint16x8_t *v68;
  uint8x16_t *v69;
  uint8x16_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint8x16_t v73;
  uint16x8_t v74;
  uint8x16_t v75;
  uint16x8_t v76;
  uint8x16_t v77;
  uint8x16_t *v78;
  uint16x8_t *v79;
  uint64_t v80;
  uint8x16_t v81;
  uint8x16_t v82;
  uint8x16_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint8x16_t v88;
  uint8x16_t v89;
  uint64_t v90;
  uint8x8_t *v91;
  uint16x8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int16x8_t v96;
  int16x8_t v97;
  const char *i8;
  int16x8_t v99;
  uint64_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  const char *v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  const char *v123;
  unint64_t v124;
  uint8x16_t *v125;
  int16x8_t v126;
  uint64_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  uint8x16_t v131;
  int16x8_t v132;
  unint64_t v133;
  int16x8_t v134;
  uint8x8_t *v135;
  unint64_t v136;
  uint8x8_t v137;
  unsigned __int8 *v138;
  unint64_t v139;
  int v140;
  __int16 *v141;
  int v142;
  int v143;
  int16x8_t v144;
  int16x8_t v145;
  const char *v146;
  int16x8_t v147;
  uint64_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  const char *v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  uint64_t v165;
  const char *v166;
  unint64_t v167;
  __int16 *v168;
  uint64_t v169;
  unsigned __int8 *v170;
  unint64_t v171;
  __int16 *v172;
  uint64_t v173;
  int8x8x3_t v174;
  int8x16x3_t v175;
  int8x16x3_t v176;
  int8x8x4_t v177;
  int8x16x4_t v178;
  int8x16x4_t v179;

  v5 = *(_DWORD *)(result + 8);
  if (v5 == 3)
  {
    v20 = (a5 * a4);
    if ((int)v20 < 1)
      return result;
    v21 = 2 * a5;
    if (v20 < 8)
    {
      v22 = 0;
      goto LABEL_12;
    }
    v22 = 0;
    v48 = (unint64_t)a3 + 2 * v20;
    v50 = &a2->i8[a5 + v20] > (__int8 *)a3 && (unint64_t)a2->u64 + a5 < v48;
    v52 = &a2->i8[v20] > (__int8 *)a3 && v48 > (unint64_t)a2;
    v53 = (unint64_t)a2->u64 + v21 < v48 && &a2->i8[v21 + v20] > (__int8 *)a3;
    if (v53 || v50 || v52)
      goto LABEL_12;
    if (v20 >= 0x20)
    {
      v22 = v20 & 0x7FFFFFE0;
      v78 = a2 + 1;
      v79 = a3 + 2;
      v80 = v20 & 0xFFFFFFE0;
      do
      {
        v81 = v78[-1];
        v82 = *(uint8x16_t *)((char *)&v78[-1] + a5);
        v83 = *(uint8x16_t *)((char *)v78 + a5);
        v84 = vaddl_high_u8(v82, v81);
        v85 = vaddl_u8(*(uint8x8_t *)v82.i8, *(uint8x8_t *)v81.i8);
        v86 = vaddl_high_u8(v83, *v78);
        v87 = vaddl_u8(*(uint8x8_t *)v83.i8, *(uint8x8_t *)v78->i8);
        v88 = *(uint8x16_t *)((char *)&v78[-1] + v21);
        v89 = *(uint8x16_t *)((char *)v78 + 2 * a5);
        v79[-2] = vaddw_u8(v85, *(uint8x8_t *)v88.i8);
        v79[-1] = vaddw_high_u8(v84, v88);
        *v79 = vaddw_u8(v87, *(uint8x8_t *)v89.i8);
        v79[1] = vaddw_high_u8(v86, v89);
        v79 += 4;
        v78 += 2;
        v80 -= 32;
      }
      while (v80);
      if (v22 == v20)
        return result;
      if ((((_BYTE)a5 * (_BYTE)a4) & 0x18) == 0)
      {
LABEL_12:
        v23 = &a2->u8[v22];
        v24 = &a3->i16[v22];
        v25 = v20 - v22;
        do
        {
          *v24++ = v23[a5] + *v23 + v23[2 * a5];
          ++v23;
          --v25;
        }
        while (v25);
        return result;
      }
    }
    else
    {
      v22 = 0;
    }
    v90 = v22;
    v22 = v20 & 0xFFFFFFF8;
    v91 = (uint8x8_t *)&a2->i8[v90];
    v92 = (uint16x8_t *)((char *)a3 + 2 * v90);
    v93 = v90 - v22;
    do
    {
      *v92++ = vaddw_u8(vaddl_u8(*(uint8x8_t *)((char *)v91 + a5), *v91), *(uint8x8_t *)((char *)v91 + 2 * a5));
      ++v91;
      v93 += 8;
    }
    while (v93);
    if (v22 == v20)
      return result;
    goto LABEL_12;
  }
  if (v5 != 5)
  {
    v26 = (v5 * a5);
    v27 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v26 < 1)
          {
            v32 = 0;
            v31 = 0;
            v30 = 0;
            v29 = 0;
            goto LABEL_157;
          }
          if (v26 < 0x1D)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            goto LABEL_155;
          }
          v65 = ((v26 - 1) >> 2) + 1;
          if (v26 >= 0x7D)
          {
            v96 = 0uLL;
            v66 = v65 & 0x7FFFFFFFFFFFFFE0;
            v97 = 0uLL;
            i8 = a2[4].i8;
            v99 = 0uLL;
            v100 = v65 & 0x7FFFFFFFFFFFFFE0;
            v101 = 0uLL;
            v102 = 0uLL;
            v103 = 0uLL;
            v104 = 0uLL;
            v105 = 0uLL;
            v106 = 0uLL;
            v107 = 0uLL;
            v108 = 0uLL;
            v109 = 0uLL;
            v110 = 0uLL;
            v111 = 0uLL;
            v112 = 0uLL;
            v113 = 0uLL;
            do
            {
              v114 = i8 - 64;
              v178 = vld4q_s8(v114);
              v179 = vld4q_s8(i8);
              v111 = (int16x8_t)vaddw_high_u8((uint16x8_t)v111, (uint8x16_t)v178.val[0]);
              v110 = (int16x8_t)vaddw_u8((uint16x8_t)v110, *(uint8x8_t *)v178.val[0].i8);
              v113 = (int16x8_t)vaddw_high_u8((uint16x8_t)v113, (uint8x16_t)v179.val[0]);
              v112 = (int16x8_t)vaddw_u8((uint16x8_t)v112, *(uint8x8_t *)v179.val[0].i8);
              v107 = (int16x8_t)vaddw_high_u8((uint16x8_t)v107, (uint8x16_t)v178.val[1]);
              v106 = (int16x8_t)vaddw_u8((uint16x8_t)v106, *(uint8x8_t *)v178.val[1].i8);
              v109 = (int16x8_t)vaddw_high_u8((uint16x8_t)v109, (uint8x16_t)v179.val[1]);
              v108 = (int16x8_t)vaddw_u8((uint16x8_t)v108, *(uint8x8_t *)v179.val[1].i8);
              v103 = (int16x8_t)vaddw_high_u8((uint16x8_t)v103, (uint8x16_t)v178.val[2]);
              v102 = (int16x8_t)vaddw_u8((uint16x8_t)v102, *(uint8x8_t *)v178.val[2].i8);
              v105 = (int16x8_t)vaddw_high_u8((uint16x8_t)v105, (uint8x16_t)v179.val[2]);
              v104 = (int16x8_t)vaddw_u8((uint16x8_t)v104, *(uint8x8_t *)v179.val[2].i8);
              v97 = (int16x8_t)vaddw_high_u8((uint16x8_t)v97, (uint8x16_t)v178.val[3]);
              v96 = (int16x8_t)vaddw_u8((uint16x8_t)v96, *(uint8x8_t *)v178.val[3].i8);
              v101 = (int16x8_t)vaddw_high_u8((uint16x8_t)v101, (uint8x16_t)v179.val[3]);
              v99 = (int16x8_t)vaddw_u8((uint16x8_t)v99, *(uint8x8_t *)v179.val[3].i8);
              i8 += 128;
              v100 -= 32;
            }
            while (v100);
            v115 = vaddq_s16(vaddq_s16(v112, v110), vaddq_s16(v113, v111));
            v115.i16[0] = vaddvq_s16(v115);
            v32 = v115.i32[0];
            v116 = vaddq_s16(vaddq_s16(v108, v106), vaddq_s16(v109, v107));
            v116.i16[0] = vaddvq_s16(v116);
            v31 = v116.i32[0];
            v117 = vaddq_s16(vaddq_s16(v104, v102), vaddq_s16(v105, v103));
            v117.i16[0] = vaddvq_s16(v117);
            v30 = v117.i32[0];
            v118 = vaddq_s16(vaddq_s16(v99, v96), vaddq_s16(v101, v97));
            v118.i16[0] = vaddvq_s16(v118);
            v29 = v118.i32[0];
            if (v65 == v66)
              goto LABEL_157;
            if ((v65 & 0x18) == 0)
            {
              v28 = 4 * v66;
LABEL_155:
              v170 = &a2->u8[3];
              do
              {
                v32 += a2->u8[v28];
                v31 += v170[v28 - 2];
                v30 += v170[v28 - 1];
                v29 += v170[v28];
                v28 += 4;
              }
              while (v28 < v26);
              goto LABEL_157;
            }
          }
          else
          {
            LOWORD(v29) = 0;
            LOWORD(v30) = 0;
            LOWORD(v31) = 0;
            LOWORD(v32) = 0;
            v66 = 0;
          }
          v28 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
          v119 = (int16x8_t)(unsigned __int16)v29;
          v120 = (int16x8_t)(unsigned __int16)v30;
          v121 = (int16x8_t)(unsigned __int16)v31;
          v122 = (int16x8_t)(unsigned __int16)v32;
          v123 = &a2->i8[4 * v66];
          v124 = v66 - (v65 & 0x7FFFFFFFFFFFFFF8);
          do
          {
            v177 = vld4_s8(v123);
            v123 += 32;
            v122 = (int16x8_t)vaddw_u8((uint16x8_t)v122, (uint8x8_t)v177.val[0]);
            v121 = (int16x8_t)vaddw_u8((uint16x8_t)v121, (uint8x8_t)v177.val[1]);
            v120 = (int16x8_t)vaddw_u8((uint16x8_t)v120, (uint8x8_t)v177.val[2]);
            v119 = (int16x8_t)vaddw_u8((uint16x8_t)v119, (uint8x8_t)v177.val[3]);
            v124 += 8;
          }
          while (v124);
          v122.i16[0] = vaddvq_s16(v122);
          v32 = v122.i32[0];
          v122.i16[0] = vaddvq_s16(v121);
          v31 = v122.i32[0];
          v120.i16[0] = vaddvq_s16(v120);
          v30 = v120.i32[0];
          v119.i16[0] = vaddvq_s16(v119);
          v29 = v119.i32[0];
          if (v65 != (v65 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_155;
LABEL_157:
          a3->i16[0] = v32;
          a3->i16[1] = v31;
          a3->i16[2] = v30;
          a3->i16[3] = v29;
          if ((int)v27 >= 1)
          {
            v171 = 0;
            v172 = &a3->i16[7];
            v173 = (uint64_t)a2->i64 + (int)v26 + 1;
            do
            {
              result = (unint64_t)a2->u64 + v171;
              v32 += *(unsigned __int8 *)(v173 + v171 - 1) - a2->u8[v171];
              v31 += *(unsigned __int8 *)(v173 + v171) - a2->u8[v171 + 1];
              v30 += *(unsigned __int8 *)(v173 + v171 + 1) - a2->u8[v171 + 2];
              v29 += *(unsigned __int8 *)(v173 + v171 + 2) - a2->u8[v171 + 3];
              v171 += 4;
              *(v172 - 3) = v32;
              *(v172 - 2) = v31;
              *(v172 - 1) = v30;
              *v172 = v29;
              v172 += 4;
            }
            while (v171 < v27);
          }
          return result;
        }
        if (a5 < 1)
          return result;
        v60 = 0;
        v61 = &a3->i16[a5];
        while ((int)v26 < 1)
        {
          v63 = 0;
          a3->i16[0] = 0;
          if ((int)v27 >= 1)
            goto LABEL_94;
LABEL_87:
          ++v60;
          a2 = (uint8x16_t *)((char *)a2 + 1);
          a3 = (uint16x8_t *)((char *)a3 + 2);
          ++v61;
          if (v60 == a5)
            return result;
        }
        v62 = 0;
        v63 = 0;
        do
        {
          v63 += a2->u8[v62];
          v62 += a5;
        }
        while (v62 < (int)v26);
        a3->i16[0] = v63;
        if ((int)v27 < 1)
          goto LABEL_87;
LABEL_94:
        v64 = 0;
        do
        {
          v63 += a2->u8[(int)v26 + v64] - a2->u8[v64];
          v61[v64] = v63;
          result = v64 + a5;
          v64 = result;
        }
        while ((uint64_t)result < (int)v27);
        goto LABEL_87;
      }
      if ((int)v26 < 1)
      {
        v59 = 0;
        v58 = 0;
        v57 = 0;
        goto LABEL_150;
      }
      if (v26 < 0x16)
      {
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        goto LABEL_149;
      }
      v94 = ((int)v26 - 1) / 3u + 1;
      if (v26 >= 0x5E)
      {
        v144 = 0uLL;
        v95 = v94 & 0x7FFFFFE0;
        v145 = 0uLL;
        v146 = (const char *)a2;
        v147 = 0uLL;
        v148 = v95;
        v149 = 0uLL;
        v150 = 0uLL;
        v151 = 0uLL;
        v152 = 0uLL;
        v153 = 0uLL;
        v154 = 0uLL;
        v155 = 0uLL;
        v156 = 0uLL;
        v157 = 0uLL;
        do
        {
          v158 = v146;
          v146 += 96;
          v175 = vld3q_s8(v158);
          v158 += 48;
          v155 = (int16x8_t)vaddw_high_u8((uint16x8_t)v155, (uint8x16_t)v175.val[0]);
          v176 = vld3q_s8(v158);
          v154 = (int16x8_t)vaddw_u8((uint16x8_t)v154, *(uint8x8_t *)v175.val[0].i8);
          v157 = (int16x8_t)vaddw_high_u8((uint16x8_t)v157, (uint8x16_t)v176.val[0]);
          v156 = (int16x8_t)vaddw_u8((uint16x8_t)v156, *(uint8x8_t *)v176.val[0].i8);
          v151 = (int16x8_t)vaddw_high_u8((uint16x8_t)v151, (uint8x16_t)v175.val[1]);
          v150 = (int16x8_t)vaddw_u8((uint16x8_t)v150, *(uint8x8_t *)v175.val[1].i8);
          v153 = (int16x8_t)vaddw_high_u8((uint16x8_t)v153, (uint8x16_t)v176.val[1]);
          v152 = (int16x8_t)vaddw_u8((uint16x8_t)v152, *(uint8x8_t *)v176.val[1].i8);
          v145 = (int16x8_t)vaddw_high_u8((uint16x8_t)v145, (uint8x16_t)v175.val[2]);
          v144 = (int16x8_t)vaddw_u8((uint16x8_t)v144, *(uint8x8_t *)v175.val[2].i8);
          v149 = (int16x8_t)vaddw_high_u8((uint16x8_t)v149, (uint8x16_t)v176.val[2]);
          v147 = (int16x8_t)vaddw_u8((uint16x8_t)v147, *(uint8x8_t *)v176.val[2].i8);
          v148 -= 32;
        }
        while (v148);
        v159 = vaddq_s16(vaddq_s16(v156, v154), vaddq_s16(v157, v155));
        v159.i16[0] = vaddvq_s16(v159);
        v59 = v159.i32[0];
        v160 = vaddq_s16(vaddq_s16(v152, v150), vaddq_s16(v153, v151));
        v160.i16[0] = vaddvq_s16(v160);
        v58 = v160.i32[0];
        v161 = vaddq_s16(vaddq_s16(v147, v144), vaddq_s16(v149, v145));
        v161.i16[0] = vaddvq_s16(v161);
        v57 = v161.i32[0];
        if (v95 == v94)
          goto LABEL_150;
        if ((((((int)v26 - 1) / 3u) + 1) & 0x18) == 0)
        {
          v56 = 3 * v95;
          do
          {
LABEL_149:
            v59 += a2->u8[v56];
            v58 += a2->u8[v56 + 1];
            v57 += a2->u8[v56 + 2];
            v56 += 3;
          }
          while (v56 < v26);
          goto LABEL_150;
        }
      }
      else
      {
        LOWORD(v57) = 0;
        LOWORD(v58) = 0;
        LOWORD(v59) = 0;
        v95 = 0;
      }
      v56 = 3 * (v94 & 0x7FFFFFF8);
      v162 = (int16x8_t)(unsigned __int16)v57;
      v163 = (int16x8_t)(unsigned __int16)v58;
      v164 = (int16x8_t)(unsigned __int16)v59;
      v165 = v95 - (v94 & 0x7FFFFFF8);
      v166 = &a2->i8[3 * v95];
      do
      {
        v174 = vld3_s8(v166);
        v166 += 24;
        v164 = (int16x8_t)vaddw_u8((uint16x8_t)v164, (uint8x8_t)v174.val[0]);
        v163 = (int16x8_t)vaddw_u8((uint16x8_t)v163, (uint8x8_t)v174.val[1]);
        v162 = (int16x8_t)vaddw_u8((uint16x8_t)v162, (uint8x8_t)v174.val[2]);
        v165 += 8;
      }
      while (v165);
      v164.i16[0] = vaddvq_s16(v164);
      v59 = v164.i32[0];
      v163.i16[0] = vaddvq_s16(v163);
      v58 = v163.i32[0];
      v162.i16[0] = vaddvq_s16(v162);
      v57 = v162.i32[0];
      if ((v94 & 0x7FFFFFF8) != v94)
        goto LABEL_149;
LABEL_150:
      a3->i16[0] = v59;
      a3->i16[1] = v58;
      a3->i16[2] = v57;
      if ((int)v27 >= 1)
      {
        v167 = 0;
        v168 = &a3->i16[4];
        v169 = (uint64_t)a2->i64 + (int)v26 + 1;
        do
        {
          v59 += *(unsigned __int8 *)(v169 + v167 - 1) - a2->u8[v167];
          result = a2->u8[v167 + 1];
          v58 += *(unsigned __int8 *)(v169 + v167) - (_DWORD)result;
          v57 += *(unsigned __int8 *)(v169 + v167 + 1) - a2->u8[v167 + 2];
          *(v168 - 1) = v59;
          *v168 = v58;
          v168 += 3;
          a3->i16[(v167 + 5)] = v57;
          v167 += 3;
        }
        while (v167 < v27);
      }
      return result;
    }
    if ((int)v26 < 1)
    {
      v55 = 0;
      goto LABEL_136;
    }
    if (v26 < 8)
    {
      v54 = 0;
      v55 = 0;
      goto LABEL_134;
    }
    if (v26 >= 0x20)
    {
      v54 = v26 & 0x7FFFFFE0;
      v125 = a2 + 1;
      v126 = 0uLL;
      v127 = v26 & 0xFFFFFFE0;
      v128 = 0uLL;
      v129 = 0uLL;
      v130 = 0uLL;
      do
      {
        v131 = v125[-1];
        v128 = (int16x8_t)vaddw_high_u8((uint16x8_t)v128, v131);
        v126 = (int16x8_t)vaddw_u8((uint16x8_t)v126, *(uint8x8_t *)v131.i8);
        v130 = (int16x8_t)vaddw_high_u8((uint16x8_t)v130, *v125);
        v129 = (int16x8_t)vaddw_u8((uint16x8_t)v129, *(uint8x8_t *)v125->i8);
        v125 += 2;
        v127 -= 32;
      }
      while (v127);
      v132 = vaddq_s16(vaddq_s16(v129, v126), vaddq_s16(v130, v128));
      v132.i16[0] = vaddvq_s16(v132);
      v55 = v132.i32[0];
      if (v54 == v26)
        goto LABEL_136;
      if ((v26 & 0x18) == 0)
      {
LABEL_134:
        v138 = &a2->u8[v54];
        v139 = v26 - v54;
        do
        {
          v140 = *v138++;
          v55 += v140;
          --v139;
        }
        while (v139);
        goto LABEL_136;
      }
    }
    else
    {
      LOWORD(v55) = 0;
      v54 = 0;
    }
    v133 = v54;
    v54 = v26 & 0xFFFFFFF8;
    v134 = (int16x8_t)(unsigned __int16)v55;
    v135 = (uint8x8_t *)&a2->i8[v133];
    v136 = v133 - v54;
    do
    {
      v137 = *v135++;
      v134 = (int16x8_t)vaddw_u8((uint16x8_t)v134, v137);
      v136 += 8;
    }
    while (v136);
    v134.i16[0] = vaddvq_s16(v134);
    v55 = v134.i32[0];
    if (v54 != v26)
      goto LABEL_134;
LABEL_136:
    a3->i16[0] = v55;
    if ((int)v27 >= 1)
    {
      v141 = &a3->i16[1];
      do
      {
        v142 = a2->u8[(int)v26];
        v143 = a2->u8[0];
        a2 = (uint8x16_t *)((char *)a2 + 1);
        v55 += v142 - v143;
        *v141++ = v55;
        --v27;
      }
      while (v27);
    }
    return result;
  }
  v6 = (a5 * a4);
  if ((int)v6 < 1)
    return result;
  v7 = a5;
  v8 = 2 * a5;
  v9 = 3 * a5;
  v10 = 4 * a5;
  if (v6 < 8)
  {
    v11 = 0;
    goto LABEL_6;
  }
  v11 = 0;
  result = (unint64_t)a3 + 2 * v6;
  v34 = &a2->i8[v9 + v6] > (__int8 *)a3 && (unint64_t)a2->u64 + v9 < result;
  v36 = &a2->i8[v8 + v6] > (__int8 *)a3 && (unint64_t)a2->u64 + v8 < result;
  v38 = &a2->i8[a5 + v6] > (__int8 *)a3 && (unint64_t)a2->u64 + a5 < result;
  v40 = &a2->i8[v6] > (__int8 *)a3 && result > (unint64_t)a2;
  v41 = (unint64_t)a2->u64 + v10 < result && &a2->i8[v10 + v6] > (__int8 *)a3;
  if (v41 || v34 || v36 || v38 || v40)
    goto LABEL_6;
  if (v6 >= 0x10)
  {
    v11 = v6 & 0x7FFFFFF0;
    v67 = v6 & 0xFFFFFFF0;
    v68 = a3;
    v69 = a2;
    do
    {
      v70 = *(uint8x16_t *)((char *)v69 + a5);
      v71 = vaddl_high_u8(v70, *v69);
      v72 = vaddl_u8(*(uint8x8_t *)v70.i8, *(uint8x8_t *)v69->i8);
      v73 = *(uint8x16_t *)((char *)v69 + 2 * a5);
      v74 = vaddw_u8(v72, *(uint8x8_t *)v73.i8);
      v75 = *(uint8x16_t *)((char *)v69 + 3 * a5);
      v76 = vaddw_high_u8(vaddw_high_u8(v71, v73), v75);
      v77 = *(uint8x16_t *)((char *)v69 + 4 * a5);
      *v68 = vaddw_u8(vaddw_u8(v74, *(uint8x8_t *)v75.i8), *(uint8x8_t *)v77.i8);
      v68[1] = vaddw_high_u8(v76, v77);
      v68 += 2;
      ++v69;
      v67 -= 16;
    }
    while (v67);
    if (v11 == v6)
      return result;
    if ((((_BYTE)a5 * (_BYTE)a4) & 8) == 0)
    {
LABEL_6:
      v12 = 0;
      v13 = &a2->u8[v11];
      v14 = &a2->u8[v11 + v10];
      v15 = &a2->u8[v11 + v9];
      v16 = &a2->u8[v11 + v8];
      v17 = &a2->u8[v11 + v7];
      v18 = v6 - v11;
      v19 = &a3->i16[v11];
      do
      {
        result = v14[v12];
        v19[v12] = v17[v12] + v13[v12] + v16[v12] + v15[v12] + result;
        ++v12;
      }
      while (v18 != v12);
      return result;
    }
  }
  else
  {
    v11 = 0;
  }
  v42 = &a2->u8[a5];
  v43 = &a2->u8[v8];
  v44 = &a2->u8[v9];
  result = (unint64_t)a2->u64 + v10;
  v45 = v6 & 0xFFFFFFF8;
  v46 = a2;
  v47 = (uint16x8_t *)((char *)a3 + 2 * v11);
  do
  {
    *v47++ = vaddw_u8(vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)&v42[v11], *(uint8x8_t *)&v46->i8[v11]), *(uint8x8_t *)&v43[v11]), *(uint8x8_t *)&v44[v11]), *(uint8x8_t *)(result + v11));
    v46 = (uint8x16_t *)((char *)v46 + 8);
    v42 += 8;
    v43 += 8;
    v44 += 8;
    result += 8;
    v45 -= 8;
  }
  while (v11 != v45);
  v11 = v6 & 0x7FFFFFF8;
  if (v11 != v6)
    goto LABEL_6;
  return result;
}

void sub_100348DFC()
{
  operator delete();
}

uint64_t sub_100348E10(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_100348E50(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

unint64_t sub_100348E74(unint64_t result, int8x16_t *a2, double *a3, int a4, int a5, __n128 a6, float64x2_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v35;
  BOOL v37;
  BOOL v39;
  BOOL v41;
  BOOL v42;
  unint64_t v43;
  BOOL v45;
  BOOL v47;
  BOOL v48;
  uint64_t v49;
  double v50;
  unint64_t v51;
  double v52;
  double v53;
  double v54;
  int v55;
  double *v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  unint64_t v60;
  double *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  double *v70;
  int8x16_t *v71;
  unint64_t v72;
  __int32 v73;
  __int32 v74;
  int8x8_t v75;
  int8x8_t v76;
  int8x8_t v77;
  int8x8_t v78;
  int8x8_t v79;
  __int32 v80;
  int8x16_t v81;
  int8x8_t v82;
  int8x8_t v83;
  int8x8_t v84;
  int8x8_t v85;
  int8x8_t v86;
  int8x8_t v87;
  int8x8_t v88;
  unint64_t v89;
  int8x8_t v90;
  int8x8_t v91;
  int8x8_t v92;
  int8x8_t v93;
  int8x8_t v94;
  int8x8_t v95;
  int8x8_t v96;
  int8x8_t v97;
  int8x16_t v98;
  int8x8_t v99;
  int8x8_t v100;
  int8x8_t v101;
  int8x8_t v102;
  uint64x2_t v103;
  uint64x2_t v104;
  uint64x2_t v105;
  unint64_t v106;
  uint64x2_t v107;
  uint64x2_t v108;
  uint64x2_t v109;
  uint64x2_t v110;
  uint64x2_t v111;
  uint64x2_t v112;
  uint64x2_t v113;
  int8x8_t v114;
  float64x2_t v115;
  int8x16_t v116;
  float64x2_t v117;
  int8x8_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  int8x8_t v122;
  float64x2_t v123;
  uint64x2_t v124;
  float64x2_t v125;
  unsigned int v126;
  unsigned int v127;
  float64x2_t v128;
  int8x16_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  __int32 v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  uint64x2_t v144;
  int8x8_t v145;
  float64x2_t v146;
  int8x8_t v147;
  float64x2_t v148;
  int8x8_t v149;
  float64x2_t v150;
  float64x2_t v151;
  int8x8_t v152;
  float64x2_t v153;
  float64x2_t v154;
  int8x8_t v155;
  float64x2_t v156;
  int8x8_t v157;
  float64x2_t v158;
  int8x8_t v159;
  float64x2_t v160;
  int8x8_t v161;
  int8x8_t v162;
  float64x2_t v163;
  float64x2_t v164;
  int8x8_t v165;
  float64x2_t v166;
  int8x8_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  uint64x2_t v174;
  int8x8_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  int8x8_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  int8x8_t v185;
  float64x2_t v186;
  float64x2_t v187;
  int8x8_t v188;
  float64x2_t v189;
  float64x2_t v190;
  __int8 *v191;
  __int8 *v192;
  __int8 *v193;
  uint64_t v194;
  int8x16_t *v195;
  float64x2_t *v196;
  int8x8_t v197;
  __int32 v198;
  __int32 v199;
  int8x8_t v200;
  __int32 v201;
  int8x8_t v202;
  int8x8_t v203;
  int8x8_t v204;
  int8x8_t v205;
  int8x8_t v206;
  int8x8_t v207;
  int8x8_t v208;
  uint64_t v209;
  int8x8_t v210;
  __int32 v211;
  __int32 v212;
  int8x8_t v213;
  int8x8_t v214;
  __int32 v215;
  int8x8_t v216;
  int8x8_t v217;
  int8x8_t v218;
  int8x8_t v219;
  int8x8_t v220;
  uint64x2_t v221;
  float64x2_t v222;
  int8x8_t v223;
  float64x2_t v224;
  int8x8_t v225;
  float64x2_t v226;
  int8x8_t v227;
  float64x2_t v228;
  int8x8_t v229;
  float64x2_t v230;
  int8x8_t v231;
  float64x2_t v232;
  int8x8_t v233;
  float64x2_t v234;
  int8x8_t v235;
  float64x2_t v236;
  int8x8_t v237;
  float64x2_t v238;
  int8x8_t v239;
  float64x2_t v240;
  float64x2_t v241;
  int8x8_t v242;
  float64x2_t v243;
  int8x8_t v244;
  float64x2_t v245;
  float64x2_t v246;
  int8x8_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  int8x8_t v251;
  float64x2_t v252;
  float64x2_t v253;
  int8x8_t v254;
  float64x2_t v255;
  float64x2_t v256;
  uint64_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  uint64_t v266;
  __int8 *v267;
  __int8 *v268;
  __int8 *v269;
  __int8 *v270;
  __int8 *v271;
  uint64_t v272;
  double *v273;
  unint64_t v274;
  double v275;
  unint64_t v276;
  double v277;
  unint64_t v278;
  double v279;
  uint64_t v280;
  double *v281;
  int8x16_t *v282;
  int8x8_t v283;
  int8x8_t v284;
  int8x8_t v285;
  int8x8_t v286;
  int8x16_t v287;
  int8x8_t v288;
  int8x8_t v289;
  int8x8_t v290;
  int8x16_t v291;
  int8x8_t v292;
  int8x8_t v293;
  int8x8_t v294;
  int8x8_t v295;
  int8x8_t v296;
  unint64_t v297;
  int8x8_t v298;
  int8x8_t v299;
  int8x8_t v300;
  int8x8_t v301;
  int8x8_t v302;
  int8x8_t v303;
  int8x8_t v304;
  int8x8_t v305;
  int8x8_t v306;
  int8x8_t v307;
  __int32 v308;
  int8x8_t v309;
  uint64x2_t v310;
  uint64x2_t v311;
  int8x8_t v312;
  float64x2_t v313;
  int8x8_t v314;
  uint64x2_t v315;
  int8x8_t v316;
  uint64x2_t v317;
  int8x8_t v318;
  uint64x2_t v319;
  int8x8_t v320;
  int8x8_t v321;
  int8x8_t v322;
  float64x2_t v323;
  int8x8_t v324;
  float64x2_t v325;
  float64x2_t v326;
  int8x8_t v327;
  float64x2_t v328;
  float64x2_t v329;
  int8x8_t v330;
  float64x2_t v331;
  int8x8_t v332;
  int8x8_t v333;
  float64x2_t v334;
  float64x2_t v335;
  int8x8_t v336;
  int8x8_t v337;
  float64x2_t v338;
  float64x2_t v339;
  int8x8_t v340;
  int8x8_t v341;
  float64x2_t v342;
  float64x2_t v343;
  int8x8_t v344;
  float64x2_t v345;
  int8x8_t v346;
  float64x2_t v347;
  int8x8_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  int8x8_t v354;
  uint64_t v355;
  _QWORD *v356;
  float64x2_t *v357;
  uint64_t v358;
  int8x8_t v359;
  int8x8_t v360;
  int8x8_t v361;
  int8x8_t v362;
  uint64_t v363;
  int8x8_t v364;
  int8x8_t v365;
  __int32 v366;
  int8x8_t v367;
  __int32 v368;
  unsigned int v369;
  unsigned int v370;
  int8x8_t v371;
  int8x8_t v372;
  int8x8_t v373;
  int8x8_t v374;
  int8x8_t v375;
  __int32 v376;
  int8x8_t v377;
  uint64x2_t v378;
  uint64x2_t v379;
  int8x8_t v380;
  float64x2_t v381;
  int8x8_t v382;
  uint64x2_t v383;
  int8x8_t v384;
  float64x2_t v385;
  int8x8_t v386;
  int8x8_t v387;
  float64x2_t v388;
  float64x2_t v389;
  int8x8_t v390;
  float64x2_t v391;
  int8x8_t v392;
  float64x2_t v393;
  int8x8_t v394;
  float64x2_t v395;
  float64x2_t v396;
  int8x8_t v397;
  float64x2_t v398;
  int8x8_t v399;
  float64x2_t v400;
  uint64x2_t v401;
  int8x8_t v402;
  unsigned __int8 *v403;
  double *v404;
  uint64_t v405;
  unint64_t v406;
  double v407;
  __int8 *v408;
  uint64_t v409;
  unsigned __int8 *v410;
  uint64_t v411;
  unsigned int v412;
  double *v413;
  uint64_t v414;
  __int8 *v415;
  uint64_t v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  double *v420;
  uint64_t v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  int8x8_t v426;
  int8x8_t v427;
  int8x8_t v428;

  v14 = *(_DWORD *)(result + 8);
  if (v14 == 3)
  {
    v21 = (a5 * a4);
    if ((int)v21 < 1)
      return result;
    v22 = 2 * a5;
    if (v21 < 8)
    {
      v23 = 0;
      goto LABEL_112;
    }
    v23 = 0;
    v43 = (unint64_t)&a3[v21];
    v45 = &a2->i8[a5 + v21] > (__int8 *)a3 && (unint64_t)a2->u64 + a5 < v43;
    v47 = &a2->i8[v21] > (__int8 *)a3 && v43 > (unint64_t)a2;
    v48 = (unint64_t)a2->u64 + v22 < v43 && &a2->i8[v22 + v21] > (__int8 *)a3;
    if (v48 || v45 || v47)
      goto LABEL_112;
    if (v21 >= 0x10)
    {
      v23 = v21 & 0x7FFFFFF0;
      a6.n128_u64[0] = 0xFF000000FFLL;
      v280 = v21 & 0xFFFFFFF0;
      v281 = a3;
      v282 = a2;
      do
      {
        v283.i32[0] = v282->u8[0];
        v284.i32[0] = BYTE2(v282->u32[0]);
        v283.i32[1] = HIBYTE(v282->u16[0]);
        v285.i32[0] = BYTE4(v282->i64[0]);
        v286.i32[0] = BYTE6(v282->i64[0]);
        v284.i32[1] = HIBYTE(v282->u32[0]);
        v287 = *(int8x16_t *)((char *)v282 + a5);
        result = v287.u8[0];
        v285.i32[1] = ((unsigned __int16)WORD2(v282->i64[0]) >> 8);
        v286.i32[1] = HIBYTE(v282->i64[0]);
        v288.i32[0] = v287.u8[0];
        v289.i32[0] = v287.u8[2];
        v290.i32[0] = v287.u8[4];
        v288.i32[1] = v287.u8[1];
        v291 = *(int8x16_t *)((char *)v282 + 2 * a5);
        v289.i32[1] = v287.u8[3];
        v292.i32[0] = v287.u8[6];
        v293.i32[0] = v291.u8[6];
        v290.i32[1] = v287.u8[5];
        v292.i32[1] = v287.u8[7];
        v293.i32[1] = v291.u8[7];
        v294.i32[0] = v291.u8[4];
        v295.i32[0] = v291.u8[2];
        v294.i32[1] = v291.u8[5];
        v295.i32[1] = v291.u8[3];
        v296.i32[0] = v291.u8[0];
        v296.i32[1] = v291.u8[1];
        v297 = vextq_s8(*v282, *v282, 8uLL).u64[0];
        v298.i32[0] = v297;
        v298.i32[1] = BYTE1(v297);
        v299.i32[0] = BYTE2(v297);
        v300.i32[0] = BYTE4(v297);
        v299.i32[1] = BYTE3(v297);
        v300.i32[1] = BYTE5(v297);
        v287.i64[0] = vextq_s8(v287, v287, 8uLL).u64[0];
        v301.i32[0] = BYTE6(v297);
        v301.i32[1] = HIBYTE(v297);
        v302 = (int8x8_t)vextq_s8(v291, v291, 8uLL).u64[0];
        v291.i32[0] = v287.u8[0];
        v303.i32[0] = v287.u8[2];
        v304.i32[0] = v287.u8[4];
        v291.i32[1] = v287.u8[1];
        v305.i32[0] = v287.u8[6];
        v306.i32[0] = v302.u8[6];
        v303.i32[1] = v287.u8[3];
        v304.i32[1] = v287.u8[5];
        v305.i32[1] = v287.u8[7];
        v287.i32[0] = v302.u8[4];
        v307.i32[0] = v302.u8[2];
        v306.i32[1] = v302.u8[7];
        v287.i32[1] = v302.u8[5];
        v308 = v302.u8[1];
        v307.i32[1] = v302.u8[3];
        v302.i32[0] = v302.u8[0];
        v309 = vand_s8(v298, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v309.u32[0];
        v310.i64[1] = v309.u32[1];
        v311 = v310;
        v312 = vand_s8(v299, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v312.u32[0];
        v310.i64[1] = v312.u32[1];
        v313 = vcvtq_f64_u64(v310);
        v314 = vand_s8(v300, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v314.u32[0];
        v310.i64[1] = v314.u32[1];
        v315 = v310;
        v316 = vand_s8(v301, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v316.u32[0];
        v310.i64[1] = v316.u32[1];
        v317 = v310;
        v318 = vand_s8(v283, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v318.u32[0];
        v310.i64[1] = v318.u32[1];
        v319 = v310;
        v320 = vand_s8(v284, (int8x8_t)0xFF000000FFLL);
        v321 = vand_s8(v285, (int8x8_t)0xFF000000FFLL);
        v322 = vand_s8(v286, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v322.u32[0];
        v310.i64[1] = v322.u32[1];
        v323 = vcvtq_f64_u64(v310);
        v324 = vand_s8(v292, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v324.u32[0];
        v310.i64[1] = v324.u32[1];
        v325 = vaddq_f64(v323, vcvtq_f64_u64(v310));
        v310.i64[0] = v321.u32[0];
        v310.i64[1] = v321.u32[1];
        v326 = vcvtq_f64_u64(v310);
        v327 = vand_s8(v290, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v327.u32[0];
        v310.i64[1] = v327.u32[1];
        v328 = vaddq_f64(v326, vcvtq_f64_u64(v310));
        v310.i64[0] = v320.u32[0];
        v310.i64[1] = v320.u32[1];
        v329 = vcvtq_f64_u64(v310);
        v330 = vand_s8(v289, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v330.u32[0];
        v310.i64[1] = v330.u32[1];
        v331 = vaddq_f64(v329, vcvtq_f64_u64(v310));
        v332 = vand_s8(v288, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v332.u32[0];
        v310.i64[1] = v332.u32[1];
        v333 = vand_s8(*(int8x8_t *)v291.i8, (int8x8_t)0xFF000000FFLL);
        v334 = vaddq_f64(vcvtq_f64_u64(v319), vcvtq_f64_u64(v310));
        v310.i64[0] = v333.u32[0];
        v310.i64[1] = v333.u32[1];
        v335 = vcvtq_f64_u64(v310);
        v336 = vand_s8(v303, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v336.u32[0];
        v310.i64[1] = v336.u32[1];
        v337 = vand_s8(v304, (int8x8_t)0xFF000000FFLL);
        v338 = vcvtq_f64_u64(v310);
        v310.i64[0] = v337.u32[0];
        v310.i64[1] = v337.u32[1];
        v339 = vcvtq_f64_u64(v310);
        v340 = vand_s8(v305, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v340.u32[0];
        v310.i64[1] = v340.u32[1];
        v341 = vand_s8(v293, (int8x8_t)0xFF000000FFLL);
        v342 = vcvtq_f64_u64(v310);
        v310.i64[0] = v341.u32[0];
        v310.i64[1] = v341.u32[1];
        v343 = vcvtq_f64_u64(v310);
        v344 = vand_s8(v294, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v344.u32[0];
        v310.i64[1] = v344.u32[1];
        v345 = vcvtq_f64_u64(v310);
        v346 = vand_s8(v295, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v346.u32[0];
        v310.i64[1] = v346.u32[1];
        v347 = vcvtq_f64_u64(v310);
        v348 = vand_s8(v296, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v348.u32[0];
        v310.i64[1] = v348.u32[1];
        v349 = vcvtq_f64_u64(v310);
        *(int8x8_t *)v291.i8 = vand_s8(v306, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v291.u32[0];
        v310.i64[1] = v291.u32[1];
        v350 = vcvtq_f64_u64(v310);
        *(int8x8_t *)v287.i8 = vand_s8(*(int8x8_t *)v287.i8, (int8x8_t)0xFF000000FFLL);
        v351 = vaddq_f64(v313, v338);
        v310.i64[0] = v287.u32[0];
        v310.i64[1] = v287.u32[1];
        v352 = vcvtq_f64_u64(v310);
        *(int8x8_t *)&v313.f64[0] = vand_s8(v307, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = LODWORD(v313.f64[0]);
        v310.i64[1] = HIDWORD(v313.f64[0]);
        v353 = vcvtq_f64_u64(v310);
        v302.i32[1] = v308;
        v354 = vand_s8(v302, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v354.u32[0];
        v310.i64[1] = v354.u32[1];
        a7 = vaddq_f64(vaddq_f64(vcvtq_f64_u64(v311), v335), vcvtq_f64_u64(v310));
        *((float64x2_t *)v281 + 2) = vaddq_f64(v328, v345);
        *((float64x2_t *)v281 + 3) = vaddq_f64(v325, v343);
        *(float64x2_t *)v281 = vaddq_f64(v334, v349);
        *((float64x2_t *)v281 + 1) = vaddq_f64(v331, v347);
        *((float64x2_t *)v281 + 6) = vaddq_f64(vaddq_f64(vcvtq_f64_u64(v315), v339), v352);
        *((float64x2_t *)v281 + 7) = vaddq_f64(vaddq_f64(vcvtq_f64_u64(v317), v342), v350);
        *((float64x2_t *)v281 + 4) = a7;
        *((float64x2_t *)v281 + 5) = vaddq_f64(v351, v353);
        ++v282;
        v281 += 16;
        v280 -= 16;
      }
      while (v280);
      if (v23 == v21)
        return result;
      if ((((_BYTE)a5 * (_BYTE)a4) & 8) == 0)
      {
LABEL_112:
        v403 = &a2->u8[v23];
        v404 = &a3[v23];
        v405 = v21 - v23;
        do
        {
          a6.n128_u8[0] = *v403;
          LOBYTE(a7.f64[0]) = v403[a5];
          *(double *)&v406 = (double)*(unint64_t *)&a7.f64[0];
          v407 = (double)a6.n128_u64[0] + *(double *)&v406;
          LOBYTE(v406) = v403[2 * a5];
          a7.f64[0] = (double)v406;
          a6.n128_f64[0] = v407 + a7.f64[0];
          *v404++ = a6.n128_f64[0];
          ++v403;
          --v405;
        }
        while (v405);
        return result;
      }
    }
    else
    {
      v23 = 0;
    }
    v355 = v23;
    v23 = v21 & 0xFFFFFFF8;
    v356 = (uint64_t *)((char *)a2->i64 + v355);
    v357 = (float64x2_t *)&a3[v355];
    v358 = v355 - v23;
    a6.n128_u64[0] = 0xFF000000FFLL;
    do
    {
      v359.i32[0] = *v356;
      v360.i32[0] = BYTE2(*v356);
      v359.i32[1] = BYTE1(*v356);
      v360.i32[1] = BYTE3(*v356);
      v361.i32[0] = BYTE4(*v356);
      v362.i32[0] = BYTE6(*v356);
      v361.i32[1] = ((unsigned __int16)WORD2(*v356) >> 8);
      v363 = *(_QWORD *)((char *)v356 + a5);
      v362.i32[1] = HIBYTE(*v356);
      v364.i32[0] = v363;
      v365.i32[0] = BYTE2(v363);
      v366 = BYTE3(v363);
      v367.i32[0] = BYTE4(v363);
      v368 = BYTE5(v363);
      v369 = BYTE6(v363);
      v364.i32[1] = BYTE1(v363);
      v370 = HIBYTE(v363);
      v371 = *(int8x8_t *)((char *)v356 + 2 * a5);
      v365.i32[1] = v366;
      v372 = (int8x8_t)__PAIR64__(v370, v369);
      v373.i32[0] = v371.u8[6];
      v367.i32[1] = v368;
      result = v371.u8[2];
      v373.i32[1] = v371.u8[7];
      v374.i32[0] = v371.u8[4];
      v375.i32[0] = v371.u8[2];
      v374.i32[1] = v371.u8[5];
      v376 = v371.u8[1];
      v375.i32[1] = v371.u8[3];
      v371.i32[0] = v371.u8[0];
      v377 = vand_s8(v359, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v377.u32[0];
      v378.i64[1] = v377.u32[1];
      v379 = v378;
      v380 = vand_s8(v360, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v380.u32[0];
      v378.i64[1] = v380.u32[1];
      v381 = vcvtq_f64_u64(v378);
      v382 = vand_s8(v361, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v382.u32[0];
      v378.i64[1] = v382.u32[1];
      v383 = v378;
      v384 = vand_s8(v362, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v384.u32[0];
      v378.i64[1] = v384.u32[1];
      v385 = vcvtq_f64_u64(v378);
      v386 = vand_s8(v364, (int8x8_t)0xFF000000FFLL);
      v387 = vand_s8(v372, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v387.u32[0];
      v378.i64[1] = v387.u32[1];
      v388 = vaddq_f64(v385, vcvtq_f64_u64(v378));
      v378.i64[0] = v386.u32[0];
      v378.i64[1] = v386.u32[1];
      v389 = vcvtq_f64_u64(v378);
      v390 = vand_s8(v367, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v390.u32[0];
      v378.i64[1] = v390.u32[1];
      v391 = vaddq_f64(vcvtq_f64_u64(v383), vcvtq_f64_u64(v378));
      v392 = vand_s8(v365, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v392.u32[0];
      v378.i64[1] = v392.u32[1];
      v393 = vcvtq_f64_u64(v378);
      v394 = vand_s8(v373, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v394.u32[0];
      v378.i64[1] = v394.u32[1];
      v395 = vaddq_f64(v381, v393);
      v396 = vcvtq_f64_u64(v378);
      v397 = vand_s8(v374, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v397.u32[0];
      v378.i64[1] = v397.u32[1];
      v398 = vcvtq_f64_u64(v378);
      v399 = vand_s8(v375, (int8x8_t)0xFF000000FFLL);
      v400 = vaddq_f64(vcvtq_f64_u64(v379), v389);
      v378.i64[0] = v399.u32[0];
      v378.i64[1] = v399.u32[1];
      v401 = v378;
      v371.i32[1] = v376;
      v402 = vand_s8(v371, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v402.u32[0];
      v378.i64[1] = v402.u32[1];
      a7 = vaddq_f64(v400, vcvtq_f64_u64(v378));
      v357[2] = vaddq_f64(v391, v398);
      v357[3] = vaddq_f64(v388, v396);
      *v357 = a7;
      v357[1] = vaddq_f64(v395, vcvtq_f64_u64(v401));
      v357 += 4;
      ++v356;
      v358 += 8;
    }
    while (v358);
    if (v23 == v21)
      return result;
    goto LABEL_112;
  }
  if (v14 != 5)
  {
    v24 = (v14 * a5);
    v25 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v24 < 1)
          {
            v30 = 0.0;
            v29 = 0.0;
            v28 = 0.0;
            v27 = 0.0;
            *a3 = 0.0;
            a3[1] = 0.0;
            a3[2] = 0.0;
            a3[3] = 0.0;
            if ((int)v25 < 1)
              return result;
          }
          else
          {
            v26 = 0;
            v27 = 0.0;
            v28 = 0.0;
            v29 = 0.0;
            v30 = 0.0;
            do
            {
              LOBYTE(a10) = a2->i8[v26];
              *(double *)&v31 = (double)*(unint64_t *)&a10;
              v30 = v30 + *(double *)&v31;
              LOBYTE(v31) = a2->i8[v26 + 1];
              *(double *)&v32 = (double)v31;
              v29 = v29 + *(double *)&v32;
              LOBYTE(v32) = a2->i8[v26 + 2];
              *(double *)&v33 = (double)v32;
              v28 = v28 + *(double *)&v33;
              LOBYTE(v33) = a2->i8[v26 + 3];
              a10 = (double)v33;
              v27 = v27 + a10;
              v26 += 4;
            }
            while (v26 < v24);
            *a3 = v30;
            a3[1] = v29;
            a3[2] = v28;
            a3[3] = v27;
            if ((int)v25 < 1)
              return result;
          }
          v60 = 0;
          v61 = a3 + 7;
          v62 = (uint64_t)a2->i64 + (int)v24 + 1;
          do
          {
            LOBYTE(a10) = *(_BYTE *)(v62 + v60 - 1);
            LOBYTE(a11) = a2->i8[v60];
            *(double *)&v63 = (double)*(unint64_t *)&a11;
            *(double *)&v64 = (double)*(unint64_t *)&a10 - *(double *)&v63;
            v30 = v30 + *(double *)&v64;
            LOBYTE(v64) = *(_BYTE *)(v62 + v60);
            LOBYTE(v63) = a2->i8[v60 + 1];
            *(double *)&v65 = (double)v63;
            *(double *)&v66 = (double)v64 - *(double *)&v65;
            v29 = v29 + *(double *)&v66;
            LOBYTE(v66) = *(_BYTE *)(v62 + v60 + 1);
            LOBYTE(v65) = a2->i8[v60 + 2];
            *(double *)&v67 = (double)v65;
            *(double *)&v68 = (double)v66 - *(double *)&v67;
            v28 = v28 + *(double *)&v68;
            LOBYTE(v68) = *(_BYTE *)(v62 + v60 + 2);
            LOBYTE(v67) = a2->i8[v60 + 3];
            a11 = (double)v67;
            a10 = (double)v68 - a11;
            v27 = v27 + a10;
            *(v61 - 3) = v30;
            *(v61 - 2) = v29;
            v60 += 4;
            *(v61 - 1) = v28;
            *v61 = v27;
            v61 += 4;
          }
          while (v60 < v25);
          return result;
        }
        if (a5 < 1)
          return result;
        v55 = 0;
        v56 = &a3[a5];
        while ((int)v24 < 1)
        {
          v58 = 0.0;
          *a3 = 0.0;
          if ((int)v25 >= 1)
            goto LABEL_86;
LABEL_79:
          ++v55;
          a2 = (int8x16_t *)((char *)a2 + 1);
          ++a3;
          ++v56;
          if (v55 == a5)
            return result;
        }
        v57 = 0;
        v58 = 0.0;
        do
        {
          LOBYTE(a7.f64[0]) = a2->i8[v57];
          a7.f64[0] = (double)*(unint64_t *)&a7.f64[0];
          v58 = v58 + a7.f64[0];
          v57 += a5;
        }
        while (v57 < (int)v24);
        *a3 = v58;
        if ((int)v25 < 1)
          goto LABEL_79;
LABEL_86:
        v59 = 0;
        do
        {
          LOBYTE(a7.f64[0]) = a2->i8[(int)v24 + v59];
          LOBYTE(a8) = a2->i8[v59];
          a8 = (double)*(unint64_t *)&a8;
          a7.f64[0] = (double)*(unint64_t *)&a7.f64[0] - a8;
          v58 = v58 + a7.f64[0];
          v56[v59] = v58;
          v59 += a5;
        }
        while (v59 < (int)v25);
        goto LABEL_79;
      }
      if ((int)v24 < 1)
      {
        v54 = 0.0;
        v53 = 0.0;
        v52 = 0.0;
        goto LABEL_128;
      }
      if (v24 >= 4)
      {
        v414 = ((int)v24 - 1) / 3u + 1;
        v51 = 3 * (v414 & 0x7FFFFFFE);
        v415 = &a2->i8[2];
        v52 = 0.0;
        v416 = v414 & 0x7FFFFFFE;
        v53 = 0.0;
        v54 = 0.0;
        do
        {
          LOBYTE(a9) = *(v415 - 2);
          a9 = (double)*(unint64_t *)&a9;
          LOBYTE(a10) = v415[1];
          a10 = (double)*(unint64_t *)&a10;
          LOBYTE(a11) = *(v415 - 1);
          a11 = (double)*(unint64_t *)&a11;
          LOBYTE(a12) = v415[2];
          a12 = (double)*(unint64_t *)&a12;
          LOBYTE(a13) = *v415;
          a13 = (double)*(unint64_t *)&a13;
          LOBYTE(v13) = v415[3];
          v13 = (double)*(unint64_t *)&v13;
          v52 = v52 + a13 + v13;
          v53 = v53 + a11 + a12;
          v54 = v54 + a9 + a10;
          v415 += 6;
          v416 -= 2;
        }
        while (v416);
        if ((v414 & 0x7FFFFFFE) == v414)
        {
LABEL_128:
          *a3 = v54;
          a3[1] = v53;
          a3[2] = v52;
          if ((int)v25 >= 1)
          {
            v419 = 0;
            v420 = a3 + 4;
            v421 = (uint64_t)a2->i64 + (int)v24 + 1;
            do
            {
              LOBYTE(a9) = *(_BYTE *)(v421 + v419 - 1);
              LOBYTE(a10) = a2->i8[v419];
              *(double *)&v422 = (double)*(unint64_t *)&a10;
              *(double *)&v423 = (double)*(unint64_t *)&a9 - *(double *)&v422;
              v54 = v54 + *(double *)&v423;
              LOBYTE(v423) = *(_BYTE *)(v421 + v419);
              LOBYTE(v422) = a2->i8[v419 + 1];
              *(double *)&v424 = (double)v422;
              *(double *)&v425 = (double)v423 - *(double *)&v424;
              v53 = v53 + *(double *)&v425;
              LOBYTE(v425) = *(_BYTE *)(v421 + v419 + 1);
              LOBYTE(v424) = a2->i8[v419 + 2];
              a10 = (double)v424;
              a9 = (double)v425 - a10;
              v52 = v52 + a9;
              *(v420 - 1) = v54;
              *v420 = v53;
              a3[(v419 + 5)] = v52;
              v420 += 3;
              v419 += 3;
            }
            while (v419 < v25);
          }
          return result;
        }
      }
      else
      {
        v51 = 0;
        v52 = 0.0;
        v53 = 0.0;
        v54 = 0.0;
      }
      do
      {
        LOBYTE(a9) = a2->i8[v51];
        *(double *)&v417 = (double)*(unint64_t *)&a9;
        v54 = v54 + *(double *)&v417;
        LOBYTE(v417) = a2->i8[v51 + 1];
        *(double *)&v418 = (double)v417;
        v53 = v53 + *(double *)&v418;
        LOBYTE(v418) = a2->i8[v51 + 2];
        a9 = (double)v418;
        v52 = v52 + a9;
        v51 += 3;
      }
      while (v51 < v24);
      goto LABEL_128;
    }
    if ((int)v24 < 1)
    {
      v50 = 0.0;
      goto LABEL_120;
    }
    if ((_DWORD)v24 == 1)
    {
      v49 = 0;
      v50 = 0.0;
    }
    else
    {
      v49 = v24 & 0xFFFFFFFE;
      v408 = &a2->i8[1];
      v50 = 0.0;
      v409 = v49;
      do
      {
        LOBYTE(a7.f64[0]) = *(v408 - 1);
        a7.f64[0] = (double)*(unint64_t *)&a7.f64[0];
        LOBYTE(a8) = *v408;
        a8 = (double)*(unint64_t *)&a8;
        v50 = v50 + a7.f64[0] + a8;
        v408 += 2;
        v409 -= 2;
      }
      while (v409);
      if (v49 == v24)
      {
LABEL_120:
        *a3 = v50;
        if ((int)v25 >= 1)
        {
          v413 = a3 + 1;
          do
          {
            LOBYTE(a7.f64[0]) = a2->i8[(int)v24];
            LOBYTE(a8) = a2->i8[0];
            a8 = (double)*(unint64_t *)&a8;
            a7.f64[0] = (double)*(unint64_t *)&a7.f64[0] - a8;
            v50 = v50 + a7.f64[0];
            *v413++ = v50;
            a2 = (int8x16_t *)((char *)a2 + 1);
            --v25;
          }
          while (v25);
        }
        return result;
      }
    }
    v410 = &a2->u8[v49];
    v411 = v24 - v49;
    do
    {
      v412 = *v410++;
      a7.f64[0] = (double)v412;
      v50 = v50 + (double)v412;
      --v411;
    }
    while (v411);
    goto LABEL_120;
  }
  v15 = (a5 * a4);
  if ((int)v15 < 1)
    return result;
  v16 = a5;
  v17 = 2 * a5;
  v18 = 3 * a5;
  v19 = 4 * a5;
  if (v15 < 8)
  {
    v20 = 0;
    goto LABEL_102;
  }
  v20 = 0;
  result = (unint64_t)&a3[v15];
  v35 = &a2->i8[v18 + v15] > (__int8 *)a3 && (unint64_t)a2->u64 + v18 < result;
  v37 = &a2->i8[v17 + v15] > (__int8 *)a3 && (unint64_t)a2->u64 + v17 < result;
  v39 = &a2->i8[a5 + v15] > (__int8 *)a3 && (unint64_t)a2->u64 + a5 < result;
  v41 = &a2->i8[v15] > (__int8 *)a3 && result > (unint64_t)a2;
  v42 = (unint64_t)a2->u64 + v19 < result && &a2->i8[v19 + v15] > (__int8 *)a3;
  if (v42 || v35 || v37 || v39 || v41)
    goto LABEL_102;
  if (v15 >= 0x10)
  {
    v20 = v15 & 0x7FFFFFF0;
    v69 = v15 & 0xFFFFFFF0;
    v70 = a3;
    v71 = a2;
    do
    {
      v72 = vextq_s8(*v71, *v71, 8uLL).u64[0];
      v73 = BYTE3(v72);
      v74 = BYTE5(v72);
      v75.i32[0] = v71->u8[0];
      v75.i32[1] = HIBYTE(v71->u16[0]);
      v76.i32[0] = BYTE2(v71->u32[0]);
      v77.i32[0] = BYTE4(v71->i64[0]);
      v76.i32[1] = HIBYTE(v71->u32[0]);
      v77.i32[1] = ((unsigned __int16)WORD2(v71->i64[0]) >> 8);
      v78.i32[0] = BYTE6(v71->i64[0]);
      v78.i32[1] = HIBYTE(v71->i64[0]);
      v79.i32[0] = v72;
      v80 = HIBYTE(v72);
      v81 = *(int8x16_t *)((char *)v71 + v16);
      v82.i32[0] = BYTE2(v72);
      v83.i32[0] = v81.u8[0];
      v84.i32[0] = BYTE4(v72);
      v85.i32[0] = v81.u8[2];
      v86.i32[0] = BYTE6(v72);
      v87.i32[0] = v81.u8[4];
      v88.i32[0] = v81.u8[6];
      v89 = vextq_s8(v81, v81, 8uLL).u64[0];
      v90.i32[0] = v89;
      v83.i32[1] = v81.u8[1];
      v79.i32[1] = BYTE1(v72);
      v91 = v79;
      v85.i32[1] = v81.u8[3];
      v82.i32[1] = v73;
      v87.i32[1] = v81.u8[5];
      v84.i32[1] = v74;
      v88.i32[1] = v81.u8[7];
      v86.i32[1] = v80;
      v90.i32[1] = BYTE1(v89);
      v427 = v90;
      v428 = v83;
      v90.i32[0] = BYTE2(v89);
      v90.i32[1] = BYTE3(v89);
      v92 = vand_s8(v76, (int8x8_t)0xFF000000FFLL);
      v93 = vand_s8(v77, (int8x8_t)0xFF000000FFLL);
      v94.i32[0] = BYTE4(v89);
      v94.i32[1] = BYTE5(v89);
      v95 = vand_s8(v78, (int8x8_t)0xFF000000FFLL);
      v81.i32[0] = BYTE6(v89);
      v81.i32[1] = HIBYTE(v89);
      v96 = vand_s8(v85, (int8x8_t)0xFF000000FFLL);
      v97 = vand_s8(v87, (int8x8_t)0xFF000000FFLL);
      v98 = *(int8x16_t *)((char *)v71 + v17);
      v99 = vand_s8(v82, (int8x8_t)0xFF000000FFLL);
      v79.i32[0] = v98.u8[6];
      v79.i32[1] = v98.u8[7];
      v426 = v79;
      v100 = vand_s8(v84, (int8x8_t)0xFF000000FFLL);
      v101 = vand_s8(v88, (int8x8_t)0xFF000000FFLL);
      v102 = vand_s8(v86, (int8x8_t)0xFF000000FFLL);
      v84.i32[0] = v98.u8[4];
      v84.i32[1] = v98.u8[5];
      v103.i64[0] = v92.u32[0];
      v103.i64[1] = v92.u32[1];
      v104 = v103;
      v77.i32[0] = v98.u8[2];
      v77.i32[1] = v98.u8[3];
      v103.i64[0] = v93.u32[0];
      v103.i64[1] = v93.u32[1];
      v105 = v103;
      v106 = vextq_s8(v98, v98, 8uLL).u64[0];
      v103.i64[0] = v95.u32[0];
      v103.i64[1] = v95.u32[1];
      v107 = v103;
      v95.i32[0] = v98.u8[0];
      v95.i32[1] = v98.u8[1];
      v103.i64[0] = v96.u32[0];
      v103.i64[1] = v96.u32[1];
      v108 = v103;
      v92.i32[0] = BYTE6(v106);
      v92.i32[1] = HIBYTE(v106);
      v103.i64[0] = v97.u32[0];
      v103.i64[1] = v97.u32[1];
      v109 = v103;
      v103.i64[0] = v101.u32[0];
      v103.i64[1] = v101.u32[1];
      v110 = v103;
      v103.i64[0] = v99.u32[0];
      v103.i64[1] = v99.u32[1];
      v111 = v103;
      v86.i32[0] = BYTE4(v106);
      v86.i32[1] = BYTE5(v106);
      v103.i64[0] = v100.u32[0];
      v103.i64[1] = v100.u32[1];
      v112 = v103;
      v96.i32[0] = BYTE2(v106);
      v96.i32[1] = BYTE3(v106);
      v103.i64[0] = v102.u32[0];
      v103.i64[1] = v102.u32[1];
      v113 = v103;
      v114 = vand_s8(v90, (int8x8_t)0xFF000000FFLL);
      v115 = vcvtq_f64_u64(v104);
      v90.i32[0] = v106;
      v90.i32[1] = BYTE1(v106);
      v116 = *(int8x16_t *)((char *)v71 + v18);
      v117 = vcvtq_f64_u64(v105);
      v118 = (int8x8_t)vextq_s8(v116, v116, 8uLL).u64[0];
      v119 = vcvtq_f64_u64(v107);
      v105.i32[0] = v118.u8[0];
      v105.i32[1] = v118.u8[1];
      v120 = vcvtq_f64_u64(v108);
      v108.i32[0] = v116.u8[0];
      v108.i32[1] = v116.u8[1];
      v121 = vcvtq_f64_u64(v109);
      v122 = vand_s8(v94, (int8x8_t)0xFF000000FFLL);
      v123 = vcvtq_f64_u64(v110);
      v94.i32[0] = v116.u8[2];
      v94.i32[1] = v116.u8[3];
      v103.i64[0] = v114.u32[0];
      v103.i64[1] = v114.u32[1];
      v124 = v103;
      v110.i32[0] = v116.u8[4];
      v110.i32[1] = v116.u8[5];
      v125 = vcvtq_f64_u64(v111);
      v103.i64[0] = v122.u32[0];
      v103.i64[1] = v122.u32[1];
      v126 = v116.u8[6];
      v127 = v116.u8[7];
      v128 = vcvtq_f64_u64(v112);
      v112.i64[0] = __PAIR64__(v127, v126);
      v129 = *(int8x16_t *)((char *)v71 + v19);
      v130 = vcvtq_f64_u64(v113);
      *(int8x8_t *)v113.i8 = vand_s8(*(int8x8_t *)v81.i8, (int8x8_t)0xFF000000FFLL);
      v131 = vcvtq_f64_u64(v124);
      v81.i32[0] = v129.u8[6];
      v81.i32[1] = v129.u8[7];
      v132 = vaddq_f64(v119, v123);
      LODWORD(v123.f64[0]) = v129.u8[4];
      HIDWORD(v123.f64[0]) = v129.u8[5];
      v133 = vcvtq_f64_u64(v103);
      v103.i64[0] = v113.u32[0];
      v103.i64[1] = v113.u32[1];
      v134 = vaddq_f64(v117, v121);
      LODWORD(v117.f64[0]) = v129.u8[2];
      HIDWORD(v117.f64[0]) = v129.u8[3];
      v135 = vaddq_f64(v115, v120);
      LODWORD(v115.f64[0]) = v129.u8[0];
      HIDWORD(v115.f64[0]) = v129.u8[1];
      v129.i64[0] = vextq_s8(v129, v129, 8uLL).u64[0];
      v136 = v118.u8[3];
      v137 = vaddq_f64(v130, vcvtq_f64_u64(v103));
      v113.i32[0] = v118.u8[2];
      v138 = vaddq_f64(v128, v133);
      LODWORD(v121.f64[0]) = v118.u8[4];
      v139 = vaddq_f64(v125, v131);
      LODWORD(v125.f64[0]) = v118.u8[6];
      v118.i32[0] = v129.u8[6];
      v113.i32[1] = v136;
      result = v129.u8[4];
      HIDWORD(v121.f64[0]) = v118.u8[5];
      v140 = v129.u8[2];
      HIDWORD(v125.f64[0]) = v118.u8[7];
      v141 = v129.u8[3];
      v142 = v129.u8[0];
      v118.i32[1] = v129.u8[7];
      v143 = v129.u8[1];
      v129.i32[0] = v129.u8[4];
      v129.i32[1] = v129.u8[5];
      *(int8x8_t *)&v133.f64[0] = vand_s8(v91, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = LODWORD(v133.f64[0]);
      v103.i64[1] = HIDWORD(v133.f64[0]);
      v144 = v103;
      v145 = vand_s8(v75, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v145.u32[0];
      v103.i64[1] = v145.u32[1];
      v146 = vcvtq_f64_u64(v103);
      v147 = vand_s8(v428, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v147.u32[0];
      v103.i64[1] = v147.u32[1];
      v148 = vcvtq_f64_u64(v103);
      v149 = vand_s8(v427, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v149.u32[0];
      v103.i64[1] = v149.u32[1];
      v150 = vaddq_f64(vcvtq_f64_u64(v144), vcvtq_f64_u64(v103));
      v151 = vaddq_f64(v146, v148);
      *(int8x8_t *)&v146.f64[0] = vand_s8(v84, (int8x8_t)0xFF000000FFLL);
      v152 = vand_s8(v95, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v152.u32[0];
      v103.i64[1] = v152.u32[1];
      v153 = vaddq_f64(v151, vcvtq_f64_u64(v103));
      v103.i64[0] = LODWORD(v146.f64[0]);
      v103.i64[1] = HIDWORD(v146.f64[0]);
      v154 = vcvtq_f64_u64(v103);
      v155 = vand_s8(v77, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v155.u32[0];
      v103.i64[1] = v155.u32[1];
      v156 = vaddq_f64(v135, vcvtq_f64_u64(v103));
      v157 = vand_s8(v426, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v157.u32[0];
      v103.i64[1] = v157.u32[1];
      v158 = vaddq_f64(v132, vcvtq_f64_u64(v103));
      v159 = vand_s8(v90, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v159.u32[0];
      v103.i64[1] = v159.u32[1];
      v160 = vcvtq_f64_u64(v103);
      v161 = vand_s8(v92, (int8x8_t)0xFF000000FFLL);
      v162 = vand_s8(v96, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v162.u32[0];
      v103.i64[1] = v162.u32[1];
      v163 = vaddq_f64(v139, vcvtq_f64_u64(v103));
      v103.i64[0] = v161.u32[0];
      v103.i64[1] = v161.u32[1];
      v164 = vcvtq_f64_u64(v103);
      v165 = vand_s8(v86, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v165.u32[0];
      v103.i64[1] = v165.u32[1];
      v166 = vaddq_f64(v138, vcvtq_f64_u64(v103));
      v167 = vand_s8(*(int8x8_t *)v105.i8, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v167.u32[0];
      v103.i64[1] = v167.u32[1];
      v168 = vcvtq_f64_u64(v103);
      *(int8x8_t *)v105.i8 = vand_s8(*(int8x8_t *)v113.i8, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v105.u32[0];
      v103.i64[1] = v105.u32[1];
      v169 = vaddq_f64(v137, v164);
      v170 = vcvtq_f64_u64(v103);
      *(int8x8_t *)v105.i8 = vand_s8(*(int8x8_t *)&v121.f64[0], (int8x8_t)0xFF000000FFLL);
      *(int8x8_t *)v112.i8 = vand_s8(*(int8x8_t *)v112.i8, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v112.u32[0];
      v103.i64[1] = v112.u32[1];
      v171 = vaddq_f64(v158, vcvtq_f64_u64(v103));
      v103.i64[0] = v105.u32[0];
      v103.i64[1] = v105.u32[1];
      v172 = vcvtq_f64_u64(v103);
      *(int8x8_t *)v110.i8 = vand_s8(*(int8x8_t *)v110.i8, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v110.u32[0];
      v103.i64[1] = v110.u32[1];
      v173 = vaddq_f64(vaddq_f64(v134, v154), vcvtq_f64_u64(v103));
      *(int8x8_t *)v110.i8 = vand_s8(*(int8x8_t *)&v125.f64[0], (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v110.u32[0];
      v103.i64[1] = v110.u32[1];
      v174 = v103;
      v175 = vand_s8(v94, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v175.u32[0];
      v103.i64[1] = v175.u32[1];
      v176 = vaddq_f64(v156, vcvtq_f64_u64(v103));
      *(int8x8_t *)v108.i8 = vand_s8(*(int8x8_t *)v108.i8, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v108.u32[0];
      v103.i64[1] = v108.u32[1];
      *(int8x8_t *)v81.i8 = vand_s8(*(int8x8_t *)v81.i8, (int8x8_t)0xFF000000FFLL);
      v177 = vaddq_f64(v153, vcvtq_f64_u64(v103));
      v103.i64[0] = v81.u32[0];
      v103.i64[1] = v81.u32[1];
      v178 = vcvtq_f64_u64(v103);
      *(int8x8_t *)v108.i8 = vand_s8(*(int8x8_t *)&v123.f64[0], (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v108.u32[0];
      v103.i64[1] = v108.u32[1];
      v179 = vcvtq_f64_u64(v103);
      v180 = vand_s8(*(int8x8_t *)&v117.f64[0], (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v180.u32[0];
      v103.i64[1] = v180.u32[1];
      v181 = vcvtq_f64_u64(v103);
      *(int8x8_t *)&v115.f64[0] = vand_s8(*(int8x8_t *)&v115.f64[0], (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = LODWORD(v115.f64[0]);
      v103.i64[1] = HIDWORD(v115.f64[0]);
      v182 = vaddq_f64(v166, v172);
      v183 = vcvtq_f64_u64(v103);
      *(int8x8_t *)&v115.f64[0] = vand_s8(v118, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = LODWORD(v115.f64[0]);
      v103.i64[1] = HIDWORD(v115.f64[0]);
      v184 = vcvtq_f64_u64(v103);
      v185 = vand_s8(*(int8x8_t *)v129.i8, (int8x8_t)0xFF000000FFLL);
      v186 = vaddq_f64(v163, v170);
      v103.i64[0] = v185.u32[0];
      v103.i64[1] = v185.u32[1];
      v187 = vcvtq_f64_u64(v103);
      v188 = vand_s8((int8x8_t)__PAIR64__(v141, v140), (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v188.u32[0];
      v103.i64[1] = v188.u32[1];
      v189 = vcvtq_f64_u64(v103);
      v190 = vaddq_f64(vaddq_f64(v150, v160), v168);
      *(int8x8_t *)&v168.f64[0] = vand_s8((int8x8_t)__PAIR64__(v143, v142), (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = LODWORD(v168.f64[0]);
      v103.i64[1] = HIDWORD(v168.f64[0]);
      a7 = vaddq_f64(vaddq_f64(v169, vcvtq_f64_u64(v174)), v184);
      *((float64x2_t *)v70 + 2) = vaddq_f64(v173, v179);
      *((float64x2_t *)v70 + 3) = vaddq_f64(v171, v178);
      *(float64x2_t *)v70 = vaddq_f64(v177, v183);
      *((float64x2_t *)v70 + 1) = vaddq_f64(v176, v181);
      *((float64x2_t *)v70 + 6) = vaddq_f64(v182, v187);
      *((float64x2_t *)v70 + 7) = a7;
      a6 = (__n128)vaddq_f64(v186, v189);
      *((float64x2_t *)v70 + 4) = vaddq_f64(v190, vcvtq_f64_u64(v103));
      *((__n128 *)v70 + 5) = a6;
      ++v71;
      v70 += 16;
      v69 -= 16;
    }
    while (v69);
    if (v20 == v15)
      return result;
    if ((v15 & 8) == 0)
    {
LABEL_102:
      v266 = 0;
      v267 = &a2->i8[v20];
      v268 = &a2->i8[v20 + v19];
      v269 = &a2->i8[v20 + v18];
      v270 = &a2->i8[v20 + v17];
      v271 = &a2->i8[v20 + v16];
      v272 = v15 - v20;
      v273 = &a3[v20];
      do
      {
        a6.n128_u8[0] = v267[v266];
        LOBYTE(a7.f64[0]) = v271[v266];
        *(double *)&v274 = (double)*(unint64_t *)&a7.f64[0];
        v275 = (double)a6.n128_u64[0] + *(double *)&v274;
        LOBYTE(v274) = v270[v266];
        *(double *)&v276 = (double)v274;
        v277 = v275 + *(double *)&v276;
        LOBYTE(v276) = v269[v266];
        *(double *)&v278 = (double)v276;
        v279 = v277 + *(double *)&v278;
        LOBYTE(v278) = v268[v266];
        a7.f64[0] = (double)v278;
        a6.n128_f64[0] = v279 + a7.f64[0];
        v273[v266++] = a6.n128_f64[0];
      }
      while (v272 != v266);
      return result;
    }
  }
  else
  {
    v20 = 0;
  }
  v191 = &a2->i8[v16];
  v192 = &a2->i8[v17];
  v193 = &a2->i8[v18];
  result = (unint64_t)a2->u64 + v19;
  a6.n128_u64[0] = 0xFF000000FFLL;
  v194 = v15 & 0xFFFFFFF8;
  v195 = a2;
  v196 = (float64x2_t *)&a3[v20];
  do
  {
    v197 = *(int8x8_t *)&v195->i8[v20];
    v198 = v197.u8[1];
    v199 = v197.u8[3];
    v200.i32[0] = v197.u8[0];
    v201 = v197.u8[7];
    v202 = *(int8x8_t *)&v191[v20];
    v203.i32[0] = v197.u8[2];
    v197.i32[0] = v197.u8[4];
    v204.i32[0] = v197.u8[6];
    v205.i32[0] = v202.u8[0];
    v206.i32[0] = v202.u8[2];
    v200.i32[1] = v198;
    v203.i32[1] = v199;
    v197.i32[1] = v197.u8[5];
    v207.i32[0] = v202.u8[4];
    v208.i32[0] = v202.u8[6];
    v204.i32[1] = v201;
    v209 = *(_QWORD *)&v192[v20];
    v205.i32[1] = v202.u8[1];
    v206.i32[1] = v202.u8[3];
    v210.i32[0] = BYTE6(v209);
    v202.i32[0] = BYTE4(v209);
    v211 = BYTE5(v209);
    v207.i32[1] = v202.u8[5];
    v212 = BYTE3(v209);
    v208.i32[1] = v202.u8[7];
    v213.i32[0] = BYTE2(v209);
    v214.i32[0] = v209;
    v210.i32[1] = HIBYTE(v209);
    v215 = BYTE1(v209);
    v216 = *(int8x8_t *)&v193[v20];
    v202.i32[1] = v211;
    v213.i32[1] = v212;
    v217.i32[0] = v216.u8[0];
    v218.i32[0] = v216.u8[2];
    v214.i32[1] = v215;
    v217.i32[1] = v216.u8[1];
    v218.i32[1] = v216.u8[3];
    v219.i32[0] = v216.u8[4];
    v216.i32[0] = v216.u8[6];
    v219.i32[1] = v216.u8[5];
    v220 = vand_s8(v200, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v220.u32[0];
    v221.i64[1] = v220.u32[1];
    v222 = vcvtq_f64_u64(v221);
    v223 = vand_s8(v203, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v223.u32[0];
    v221.i64[1] = v223.u32[1];
    v224 = vcvtq_f64_u64(v221);
    v225 = vand_s8(v197, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v225.u32[0];
    v221.i64[1] = v225.u32[1];
    v226 = vcvtq_f64_u64(v221);
    v227 = vand_s8(v204, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v227.u32[0];
    v221.i64[1] = v227.u32[1];
    v228 = vcvtq_f64_u64(v221);
    v229 = vand_s8(v205, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v229.u32[0];
    v221.i64[1] = v229.u32[1];
    v230 = vcvtq_f64_u64(v221);
    v231 = vand_s8(v206, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v231.u32[0];
    v221.i64[1] = v231.u32[1];
    v232 = vcvtq_f64_u64(v221);
    v233 = vand_s8(v207, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v233.u32[0];
    v221.i64[1] = v233.u32[1];
    v234 = vcvtq_f64_u64(v221);
    v235 = vand_s8(v208, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v235.u32[0];
    v221.i64[1] = v235.u32[1];
    v236 = vcvtq_f64_u64(v221);
    v237 = vand_s8(v210, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v237.u32[0];
    v221.i64[1] = v237.u32[1];
    v238 = vcvtq_f64_u64(v221);
    v239 = vand_s8(v202, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v239.u32[0];
    v221.i64[1] = v239.u32[1];
    v240 = vaddq_f64(v228, v236);
    v241 = vcvtq_f64_u64(v221);
    v242 = vand_s8(v213, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v242.u32[0];
    v221.i64[1] = v242.u32[1];
    v243 = vcvtq_f64_u64(v221);
    v244 = vand_s8(v214, (int8x8_t)0xFF000000FFLL);
    v245 = vaddq_f64(v226, v234);
    v221.i64[0] = v244.u32[0];
    v221.i64[1] = v244.u32[1];
    v246 = vcvtq_f64_u64(v221);
    v247 = vand_s8(v217, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v247.u32[0];
    v221.i64[1] = v247.u32[1];
    v248 = vcvtq_f64_u64(v221);
    v249 = vaddq_f64(v224, v232);
    *(int8x8_t *)&v232.f64[0] = vand_s8(v218, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = LODWORD(v232.f64[0]);
    v221.i64[1] = HIDWORD(v232.f64[0]);
    v250 = vcvtq_f64_u64(v221);
    v251 = vand_s8(v219, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v251.u32[0];
    v221.i64[1] = v251.u32[1];
    v252 = vaddq_f64(v222, v230);
    v253 = vcvtq_f64_u64(v221);
    v216.i32[1] = v216.u8[7];
    v254 = vand_s8(v216, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v254.u32[0];
    v221.i64[1] = v254.u32[1];
    v255 = vaddq_f64(v252, v246);
    v256 = vcvtq_f64_u64(v221);
    v257 = *(_QWORD *)(result + v20);
    v258 = vaddq_f64(v249, v243);
    LODWORD(v243.f64[0]) = BYTE6(v257);
    HIDWORD(v243.f64[0]) = HIBYTE(v257);
    v259 = vaddq_f64(v245, v241);
    *(int8x8_t *)&v241.f64[0] = vand_s8(*(int8x8_t *)&v243.f64[0], (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = LODWORD(v241.f64[0]);
    v221.i64[1] = HIDWORD(v241.f64[0]);
    v260 = vcvtq_f64_u64(v221);
    LODWORD(v243.f64[0]) = BYTE4(v257);
    HIDWORD(v243.f64[0]) = BYTE5(v257);
    v261 = vaddq_f64(vaddq_f64(v240, v238), v256);
    *(int8x8_t *)&v256.f64[0] = vand_s8(*(int8x8_t *)&v243.f64[0], (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = LODWORD(v256.f64[0]);
    v221.i64[1] = HIDWORD(v256.f64[0]);
    v262 = vcvtq_f64_u64(v221);
    v263 = vaddq_f64(v259, v253);
    LODWORD(v253.f64[0]) = BYTE2(v257);
    HIDWORD(v253.f64[0]) = BYTE3(v257);
    v264 = vaddq_f64(v258, v250);
    *(int8x8_t *)&v253.f64[0] = vand_s8(*(int8x8_t *)&v253.f64[0], (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = LODWORD(v253.f64[0]);
    v221.i64[1] = HIDWORD(v253.f64[0]);
    LODWORD(v250.f64[0]) = v257;
    HIDWORD(v250.f64[0]) = BYTE1(v257);
    *(int8x8_t *)&v250.f64[0] = vand_s8(*(int8x8_t *)&v250.f64[0], (int8x8_t)0xFF000000FFLL);
    v265 = vcvtq_f64_u64(v221);
    v221.i64[0] = LODWORD(v250.f64[0]);
    v221.i64[1] = HIDWORD(v250.f64[0]);
    a7 = vaddq_f64(vaddq_f64(v255, v248), vcvtq_f64_u64(v221));
    v196[2] = vaddq_f64(v263, v262);
    v196[3] = vaddq_f64(v261, v260);
    v195 = (int8x16_t *)((char *)v195 + 8);
    v191 += 8;
    *v196 = a7;
    v196[1] = vaddq_f64(v264, v265);
    v196 += 4;
    v192 += 8;
    v193 += 8;
    result += 8;
    v194 -= 8;
  }
  while (v20 != v194);
  v20 = v15 & 0x7FFFFFF8;
  if (v20 != v15)
    goto LABEL_102;
  return result;
}

void sub_10034A224()
{
  operator delete();
}

uint64_t sub_10034A238(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_10034A278(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_10034A29C(uint64_t result, uint16x8_t *a2, uint32x4_t *a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint32x4_t *v22;
  uint16x8_t *v23;
  uint16x8_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint16x8_t v27;
  uint32x4_t v28;
  uint16x8_t v29;
  uint32x4_t v30;
  uint16x8_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  __int32 *v37;
  uint64_t v38;
  unsigned __int16 *v39;
  uint16x8_t *v40;
  uint32x4_t *v41;
  uint64_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  __int32 *v54;
  uint64_t v55;
  unsigned __int16 *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  __int32 *v69;
  uint64_t v70;
  int v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  unint64_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  const __int16 *i16;
  int32x4_t v80;
  uint64_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  const __int16 *v91;
  unsigned __int16 *v92;
  unint64_t v93;
  int *v94;
  unsigned __int16 *v95;
  uint64_t v96;
  uint16x8_t *v97;
  int32x4_t v98;
  uint64_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  uint16x8_t v103;
  unsigned __int16 *v104;
  unint64_t v105;
  int v106;
  int *v107;
  int v108;
  int v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  uint64_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  const __int16 *v117;
  uint64_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  const __int16 *v125;
  unsigned __int16 *v126;
  int *i32;
  unsigned __int16 *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  unint64_t v133;
  int16x8x3_t v134;
  int16x8x3_t v135;
  int16x8x4_t v136;
  int16x8x4_t v137;

  v5 = *(_DWORD *)(result + 8);
  if (v5 == 3)
  {
    v12 = (a5 * a4);
    if ((int)v12 < 1)
      return result;
    v13 = 2 * a5;
    if (v12 >= 0x10)
    {
      v14 = v12 & 0x7FFFFFF0;
      v40 = a2 + 1;
      v41 = a3 + 2;
      v42 = v12 & 0xFFFFFFF0;
      do
      {
        v43 = v40[-1];
        v44 = *(uint16x8_t *)((char *)v40 + 2 * a5 - 16);
        v45 = *(uint16x8_t *)((char *)v40 + 2 * a5);
        v46 = vaddl_high_u16(v44, v43);
        v47 = vaddl_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v43.i8);
        v48 = vaddl_high_u16(v45, *v40);
        v49 = vaddl_u16(*(uint16x4_t *)v45.i8, *(uint16x4_t *)v40->i8);
        v50 = *(uint16x8_t *)((char *)v40 + 2 * v13 - 16);
        v51 = *(uint16x8_t *)((char *)v40 + 2 * v13);
        v41[-2] = vaddw_u16(v47, *(uint16x4_t *)v50.i8);
        v41[-1] = vaddw_high_u16(v46, v50);
        *v41 = vaddw_u16(v49, *(uint16x4_t *)v51.i8);
        v41[1] = vaddw_high_u16(v48, v51);
        v41 += 4;
        v40 += 2;
        v42 -= 16;
      }
      while (v42);
      if (v14 == v12)
        return result;
    }
    else
    {
      v14 = 0;
    }
    v52 = (unsigned __int16 *)a2 + v14 + v13;
    v53 = (unsigned __int16 *)a2 + v14 + a5;
    v54 = &a3->i32[v14];
    v55 = v12 - v14;
    v56 = (unsigned __int16 *)a2 + v14;
    do
    {
      v58 = *v56++;
      v57 = v58;
      v59 = *v53++;
      v60 = v59 + v57;
      v61 = *v52++;
      *v54++ = v60 + v61;
      --v55;
    }
    while (v55);
    return result;
  }
  if (v5 != 5)
  {
    v15 = (v5 * a5);
    v16 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v15 < 1)
          {
            v21 = 0;
            v20 = 0;
            v19 = 0;
            v18 = 0;
            goto LABEL_53;
          }
          if (v15 >= 0x3D)
          {
            v72 = 0uLL;
            v73 = 0uLL;
            v74 = 0uLL;
            v75 = ((v15 - 1) >> 2) + 1;
            v76 = 0uLL;
            v77 = 0uLL;
            v17 = 4 * (v75 & 0x7FFFFFFFFFFFFFF0);
            v78 = 0uLL;
            i16 = a2[4].i16;
            v80 = 0uLL;
            v81 = v75 & 0x7FFFFFFFFFFFFFF0;
            v82 = 0uLL;
            v83 = 0uLL;
            v84 = 0uLL;
            v85 = 0uLL;
            v86 = 0uLL;
            v87 = 0uLL;
            v88 = 0uLL;
            v89 = 0uLL;
            v90 = 0uLL;
            do
            {
              v91 = i16 - 32;
              v136 = vld4q_s16(v91);
              v137 = vld4q_s16(i16);
              v88 = (int32x4_t)vaddw_high_u16((uint32x4_t)v88, (uint16x8_t)v136.val[0]);
              v87 = (int32x4_t)vaddw_u16((uint32x4_t)v87, *(uint16x4_t *)v136.val[0].i8);
              v90 = (int32x4_t)vaddw_high_u16((uint32x4_t)v90, (uint16x8_t)v137.val[0]);
              v89 = (int32x4_t)vaddw_u16((uint32x4_t)v89, *(uint16x4_t *)v137.val[0].i8);
              v84 = (int32x4_t)vaddw_high_u16((uint32x4_t)v84, (uint16x8_t)v136.val[1]);
              v83 = (int32x4_t)vaddw_u16((uint32x4_t)v83, *(uint16x4_t *)v136.val[1].i8);
              v86 = (int32x4_t)vaddw_high_u16((uint32x4_t)v86, (uint16x8_t)v137.val[1]);
              v85 = (int32x4_t)vaddw_u16((uint32x4_t)v85, *(uint16x4_t *)v137.val[1].i8);
              v78 = (int32x4_t)vaddw_high_u16((uint32x4_t)v78, (uint16x8_t)v136.val[2]);
              v77 = (int32x4_t)vaddw_u16((uint32x4_t)v77, *(uint16x4_t *)v136.val[2].i8);
              v82 = (int32x4_t)vaddw_high_u16((uint32x4_t)v82, (uint16x8_t)v137.val[2]);
              v80 = (int32x4_t)vaddw_u16((uint32x4_t)v80, *(uint16x4_t *)v137.val[2].i8);
              v73 = (int32x4_t)vaddw_high_u16((uint32x4_t)v73, (uint16x8_t)v136.val[3]);
              v72 = (int32x4_t)vaddw_u16((uint32x4_t)v72, *(uint16x4_t *)v136.val[3].i8);
              v76 = (int32x4_t)vaddw_high_u16((uint32x4_t)v76, (uint16x8_t)v137.val[3]);
              v74 = (int32x4_t)vaddw_u16((uint32x4_t)v74, *(uint16x4_t *)v137.val[3].i8);
              i16 += 64;
              v81 -= 16;
            }
            while (v81);
            v21 = vaddvq_s32(vaddq_s32(vaddq_s32(v89, v87), vaddq_s32(v90, v88)));
            v20 = vaddvq_s32(vaddq_s32(vaddq_s32(v85, v83), vaddq_s32(v86, v84)));
            v19 = vaddvq_s32(vaddq_s32(vaddq_s32(v80, v77), vaddq_s32(v82, v78)));
            v18 = vaddvq_s32(vaddq_s32(vaddq_s32(v74, v72), vaddq_s32(v76, v73)));
            if (v75 == (v75 & 0x7FFFFFFFFFFFFFF0))
            {
LABEL_53:
              a3->i32[0] = v21;
              a3->i32[1] = v20;
              a3->i32[2] = v19;
              a3->i32[3] = v18;
              if ((int)v16 >= 1)
              {
                v93 = 0;
                v94 = &a3[1].i32[3];
                v95 = &a2->u16[2];
                v96 = (int)v15;
                do
                {
                  v21 = v21 - *(v95 - 2) + v95[v96 - 2];
                  v20 = v20 - *(v95 - 1) + v95[v96 - 1];
                  v19 = v19 - *v95 + v95[v96];
                  result = v95[1];
                  v18 = v18 - result + v95[v96 + 1];
                  v93 += 4;
                  *(v94 - 3) = v21;
                  *(v94 - 2) = v20;
                  *(v94 - 1) = v19;
                  *v94 = v18;
                  v94 += 4;
                  v95 += 4;
                }
                while (v93 < v16);
              }
              return result;
            }
          }
          else
          {
            v17 = 0;
            v18 = 0;
            v19 = 0;
            v20 = 0;
            v21 = 0;
          }
          v92 = &a2->u16[v17 + 2];
          do
          {
            v21 += *(v92 - 2);
            v20 += *(v92 - 1);
            v19 += *v92;
            v18 += v92[1];
            v17 += 4;
            v92 += 4;
          }
          while (v17 < v15);
          goto LABEL_53;
        }
        if (a5 < 1)
          return result;
        v68 = 0;
        v69 = &a3->i32[a5];
        while ((int)v15 < 1)
        {
          v71 = 0;
          a3->i32[0] = 0;
          if ((int)v16 >= 1)
            goto LABEL_42;
LABEL_35:
          ++v68;
          a2 = (uint16x8_t *)((char *)a2 + 2);
          a3 = (uint32x4_t *)((char *)a3 + 4);
          ++v69;
          if (v68 == a5)
            return result;
        }
        v70 = 0;
        v71 = 0;
        do
        {
          result = a2->u16[v70];
          v71 += result;
          v70 += a5;
        }
        while (v70 < (int)v15);
        a3->i32[0] = v71;
        if ((int)v16 < 1)
          goto LABEL_35;
LABEL_42:
        result = 0;
        do
        {
          v71 = v71 - a2->u16[result] + a2->u16[(int)v15 + result];
          v69[result] = v71;
          result += a5;
        }
        while (result < (int)v16);
        goto LABEL_35;
      }
      if ((int)v15 < 1)
      {
        v67 = 0;
        v66 = 0;
        v65 = 0;
        goto LABEL_70;
      }
      if (v15 >= 0x2E)
      {
        v110 = 0uLL;
        v111 = 0uLL;
        v112 = 0uLL;
        v113 = ((int)v15 - 1) / 3u + 1;
        v114 = 0uLL;
        v115 = 0uLL;
        v116 = 0uLL;
        v64 = 3 * (v113 & 0x7FFFFFF0);
        v117 = (const __int16 *)a2;
        v118 = v113 & 0x7FFFFFF0;
        v119 = 0uLL;
        v120 = 0uLL;
        v121 = 0uLL;
        v122 = 0uLL;
        v123 = 0uLL;
        v124 = 0uLL;
        do
        {
          v125 = v117;
          v117 += 48;
          v134 = vld3q_s16(v125);
          v125 += 24;
          v122 = (int32x4_t)vaddw_high_u16((uint32x4_t)v122, (uint16x8_t)v134.val[0]);
          v135 = vld3q_s16(v125);
          v121 = (int32x4_t)vaddw_u16((uint32x4_t)v121, *(uint16x4_t *)v134.val[0].i8);
          v124 = (int32x4_t)vaddw_high_u16((uint32x4_t)v124, (uint16x8_t)v135.val[0]);
          v123 = (int32x4_t)vaddw_u16((uint32x4_t)v123, *(uint16x4_t *)v135.val[0].i8);
          v116 = (int32x4_t)vaddw_high_u16((uint32x4_t)v116, (uint16x8_t)v134.val[1]);
          v115 = (int32x4_t)vaddw_u16((uint32x4_t)v115, *(uint16x4_t *)v134.val[1].i8);
          v120 = (int32x4_t)vaddw_high_u16((uint32x4_t)v120, (uint16x8_t)v135.val[1]);
          v119 = (int32x4_t)vaddw_u16((uint32x4_t)v119, *(uint16x4_t *)v135.val[1].i8);
          v111 = (int32x4_t)vaddw_high_u16((uint32x4_t)v111, (uint16x8_t)v134.val[2]);
          v110 = (int32x4_t)vaddw_u16((uint32x4_t)v110, *(uint16x4_t *)v134.val[2].i8);
          v114 = (int32x4_t)vaddw_high_u16((uint32x4_t)v114, (uint16x8_t)v135.val[2]);
          v112 = (int32x4_t)vaddw_u16((uint32x4_t)v112, *(uint16x4_t *)v135.val[2].i8);
          v118 -= 16;
        }
        while (v118);
        v67 = vaddvq_s32(vaddq_s32(vaddq_s32(v123, v121), vaddq_s32(v124, v122)));
        v66 = vaddvq_s32(vaddq_s32(vaddq_s32(v119, v115), vaddq_s32(v120, v116)));
        v65 = vaddvq_s32(vaddq_s32(vaddq_s32(v112, v110), vaddq_s32(v114, v111)));
        if ((v113 & 0x7FFFFFF0) == v113)
        {
LABEL_70:
          a3->i32[0] = v67;
          a3->i32[1] = v66;
          a3->i32[2] = v65;
          if ((int)v16 >= 1)
          {
            i32 = a3[1].i32;
            v128 = &a2->u16[2];
            v129 = (int)v15;
            v130 = 5;
            do
            {
              v67 = v67 - *(v128 - 2) + v128[v129 - 2];
              result = *(v128 - 1);
              v66 = v66 - result + v128[v129 - 1];
              v131 = v128[v129];
              v132 = *v128;
              v128 += 3;
              v65 = v65 - v132 + v131;
              *(i32 - 1) = v67;
              *i32 = v66;
              a3->i32[v130] = v65;
              v133 = v130 - 2;
              v130 += 3;
              i32 += 3;
            }
            while (v133 < v16);
          }
          return result;
        }
      }
      else
      {
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = 0;
      }
      do
      {
        v126 = (unsigned __int16 *)a2 + v64;
        v67 += *v126;
        v66 += v126[1];
        v65 += v126[2];
        v64 += 3;
      }
      while (v64 < v15);
      goto LABEL_70;
    }
    if ((int)v15 < 1)
    {
      v63 = 0;
      goto LABEL_62;
    }
    if (v15 >= 0x10)
    {
      v62 = v15 & 0x7FFFFFF0;
      v97 = a2 + 1;
      v98 = 0uLL;
      v99 = v15 & 0xFFFFFFF0;
      v100 = 0uLL;
      v101 = 0uLL;
      v102 = 0uLL;
      do
      {
        v103 = v97[-1];
        v100 = (int32x4_t)vaddw_high_u16((uint32x4_t)v100, v103);
        v98 = (int32x4_t)vaddw_u16((uint32x4_t)v98, *(uint16x4_t *)v103.i8);
        v102 = (int32x4_t)vaddw_high_u16((uint32x4_t)v102, *v97);
        v101 = (int32x4_t)vaddw_u16((uint32x4_t)v101, *(uint16x4_t *)v97->i8);
        v97 += 2;
        v99 -= 16;
      }
      while (v99);
      v63 = vaddvq_s32(vaddq_s32(vaddq_s32(v101, v98), vaddq_s32(v102, v100)));
      if (v62 == v15)
      {
LABEL_62:
        a3->i32[0] = v63;
        if ((int)v16 >= 1)
        {
          v107 = &a3->i32[1];
          do
          {
            v108 = a2->u16[(int)v15];
            v109 = a2->u16[0];
            a2 = (uint16x8_t *)((char *)a2 + 2);
            v63 = v63 - v109 + v108;
            *v107++ = v63;
            --v16;
          }
          while (v16);
        }
        return result;
      }
    }
    else
    {
      v62 = 0;
      v63 = 0;
    }
    v104 = (unsigned __int16 *)a2 + v62;
    v105 = v15 - v62;
    do
    {
      v106 = *v104++;
      v63 += v106;
      --v105;
    }
    while (v105);
    goto LABEL_62;
  }
  v6 = (a5 * a4);
  if ((int)v6 < 1)
    return result;
  v7 = a5;
  v8 = 2 * a5;
  v9 = 3 * a5;
  v10 = 4 * a5;
  if (v6 < 8)
  {
    v11 = 0;
LABEL_18:
    v32 = 0;
    v33 = (unsigned __int16 *)a2 + v11 + v10;
    v34 = (unsigned __int16 *)a2 + v11 + v9;
    v35 = (unsigned __int16 *)a2 + v11 + v8;
    v36 = (unsigned __int16 *)a2 + v11 + v7;
    v37 = &a3->i32[v11];
    v38 = v6 - v11;
    v39 = (unsigned __int16 *)a2 + v11;
    do
    {
      result = v35[v32] + v34[v32];
      v37[v32] = v36[v32] + v39[v32] + result + v33[v32];
      ++v32;
    }
    while (v38 != v32);
    return result;
  }
  v11 = v6 & 0x7FFFFFF8;
  result = v6 & 0xFFFFFFF8;
  v22 = a3;
  v23 = a2;
  do
  {
    v24 = *(uint16x8_t *)((char *)v23 + 2 * v7);
    v25 = vaddl_high_u16(v24, *v23);
    v26 = vaddl_u16(*(uint16x4_t *)v24.i8, *(uint16x4_t *)v23->i8);
    v27 = *(uint16x8_t *)((char *)v23 + 2 * v8);
    v28 = vaddw_u16(v26, *(uint16x4_t *)v27.i8);
    v29 = *(uint16x8_t *)((char *)v23 + 2 * v9);
    v30 = vaddw_high_u16(vaddw_high_u16(v25, v27), v29);
    v31 = *(uint16x8_t *)((char *)v23 + 2 * v10);
    *v22 = vaddw_u16(vaddw_u16(v28, *(uint16x4_t *)v29.i8), *(uint16x4_t *)v31.i8);
    v22[1] = vaddw_high_u16(v30, v31);
    v22 += 2;
    ++v23;
    result -= 8;
  }
  while (result);
  if (v11 != v6)
    goto LABEL_18;
  return result;
}

void sub_10034A9E8()
{
  operator delete();
}

uint64_t sub_10034A9FC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_10034AA3C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

float64_t sub_10034AA60(uint64_t a1, uint16x4_t *a2, _QWORD *a3, int a4, int a5, float64x2_t a6, float64x2_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  uint16x4_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  float64x2_t *v35;
  uint16x4_t *v36;
  uint32x4_t v37;
  uint64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  uint32x4_t v41;
  float64x2_t v42;
  float64x2_t v43;
  uint16x8_t v44;
  uint32x4_t v45;
  float64x2_t v46;
  float64x2_t v47;
  uint32x4_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  uint16x8_t v53;
  float64x2_t v54;
  uint32x4_t v55;
  float64x2_t v56;
  float64x2_t v57;
  uint32x4_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  uint16x8_t v64;
  uint32x4_t v65;
  float64x2_t v66;
  float64x2_t v67;
  uint32x4_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  uint16x8_t v73;
  uint32x4_t v74;
  float64x2_t v75;
  float64x2_t v76;
  uint32x4_t v77;
  float64x2_t v78;
  uint64_t v79;
  _WORD *v80;
  _WORD *v81;
  _WORD *v82;
  _WORD *v83;
  _QWORD *v84;
  uint64_t v85;
  _WORD *v86;
  unint64_t v87;
  double v88;
  unint64_t v89;
  double v90;
  unint64_t v91;
  double v92;
  uint64_t v93;
  float64x2_t *v94;
  uint16x4_t *v95;
  uint32x4_t v96;
  uint64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  uint32x4_t v100;
  float64x2_t v101;
  float64x2_t v102;
  uint16x8_t v103;
  uint32x4_t v104;
  float64x2_t v105;
  float64x2_t v106;
  uint32x4_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  uint16x8_t v113;
  uint32x4_t v114;
  float64x2_t v115;
  float64x2_t v116;
  uint32x4_t v117;
  float64x2_t v118;
  unsigned __int16 *v119;
  unsigned __int16 *v120;
  _QWORD *v121;
  uint64_t v122;
  unsigned __int16 *v123;
  unsigned int v124;
  double v125;
  unsigned int v126;
  double v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  double v131;
  double v132;
  int v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  double *v138;
  _WORD *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  _WORD *v147;
  uint64_t v148;
  unsigned __int16 *v149;
  uint64_t v150;
  unsigned int v151;
  _QWORD *v152;
  uint64_t v153;
  _WORD *v154;
  uint64_t v155;
  _WORD *v156;
  unint64_t v157;
  unint64_t v158;
  double *v159;
  _WORD *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;

  v14 = *(_DWORD *)(a1 + 8);
  if (v14 == 3)
  {
    v21 = (a5 * a4);
    if ((int)v21 < 1)
      return a6.f64[0];
    v22 = 2 * a5;
    if (v21 >= 8)
    {
      v23 = v21 & 0x7FFFFFF8;
      v93 = v21 & 0xFFFFFFF8;
      v94 = (float64x2_t *)a3;
      v95 = a2;
      do
      {
        v96 = vmovl_u16(*v95);
        v97.i64[0] = v96.u32[0];
        v97.i64[1] = v96.u32[1];
        v98 = vcvtq_f64_u64(v97);
        v97.i64[0] = v96.u32[2];
        v97.i64[1] = v96.u32[3];
        v99 = vcvtq_f64_u64(v97);
        v100 = vmovl_high_u16(*(uint16x8_t *)v95->i8);
        v97.i64[0] = v100.u32[0];
        v97.i64[1] = v100.u32[1];
        v101 = vcvtq_f64_u64(v97);
        v97.i64[0] = v100.u32[2];
        v97.i64[1] = v100.u32[3];
        v102 = vcvtq_f64_u64(v97);
        v103 = *(uint16x8_t *)&v95->i8[2 * a5];
        v104 = vmovl_u16(*(uint16x4_t *)v103.i8);
        v97.i64[0] = v104.u32[0];
        v97.i64[1] = v104.u32[1];
        v105 = vcvtq_f64_u64(v97);
        v97.i64[0] = v104.u32[2];
        v97.i64[1] = v104.u32[3];
        v106 = vcvtq_f64_u64(v97);
        v107 = vmovl_high_u16(v103);
        v97.i64[0] = v107.u32[0];
        v97.i64[1] = v107.u32[1];
        v108 = vcvtq_f64_u64(v97);
        v97.i64[0] = v107.u32[2];
        v97.i64[1] = v107.u32[3];
        v109 = vaddq_f64(v102, vcvtq_f64_u64(v97));
        v110 = vaddq_f64(v101, v108);
        v111 = vaddq_f64(v99, v106);
        v112 = vaddq_f64(v98, v105);
        v113 = *(uint16x8_t *)&v95->i8[2 * v22];
        v114 = vmovl_high_u16(v113);
        v97.i64[0] = v114.u32[2];
        v97.i64[1] = v114.u32[3];
        v115 = vcvtq_f64_u64(v97);
        v97.i64[0] = v114.u32[0];
        v97.i64[1] = v114.u32[1];
        v116 = vcvtq_f64_u64(v97);
        v117 = vmovl_u16(*(uint16x4_t *)v113.i8);
        v97.i64[0] = v117.u32[2];
        v97.i64[1] = v117.u32[3];
        v118 = vcvtq_f64_u64(v97);
        v97.i64[0] = v117.u32[0];
        v97.i64[1] = v117.u32[1];
        v94[2] = vaddq_f64(v110, v116);
        v94[3] = vaddq_f64(v109, v115);
        a6 = vaddq_f64(v111, v118);
        *v94 = vaddq_f64(v112, vcvtq_f64_u64(v97));
        v94[1] = a6;
        v94 += 4;
        v95 += 2;
        v93 -= 8;
      }
      while (v93);
      if (v23 == v21)
        return a6.f64[0];
    }
    else
    {
      v23 = 0;
    }
    v119 = (unsigned __int16 *)a2 + v23 + v22;
    v120 = (unsigned __int16 *)a2 + v23 + a5;
    v121 = &a3[v23];
    v122 = v21 - v23;
    v123 = (unsigned __int16 *)a2 + v23;
    do
    {
      v124 = *v123++;
      v125 = (double)v124;
      v126 = *v120++;
      v127 = v125 + (double)v126;
      v128 = *v119++;
      a6.f64[0] = v127 + (double)v128;
      *v121++ = *(_QWORD *)&a6.f64[0];
      --v122;
    }
    while (v122);
    return a6.f64[0];
  }
  if (v14 != 5)
  {
    v24 = (v14 * a5);
    v25 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v24 < 1)
          {
            v29 = 0.0;
            v28 = 0.0;
            v27 = 0.0;
            a6.f64[0] = 0.0;
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            a3[3] = 0;
            if ((int)v25 < 1)
              return a6.f64[0];
          }
          else
          {
            v26 = 0;
            a6.f64[0] = 0.0;
            v27 = 0.0;
            v28 = 0.0;
            v29 = 0.0;
            do
            {
              v30 = &a2[v26 / 4];
              LOWORD(a10) = v30->i16[0];
              *(double *)&v31 = (double)*(unint64_t *)&a10;
              v29 = v29 + *(double *)&v31;
              LOWORD(v31) = v30->i16[1];
              *(double *)&v32 = (double)v31;
              v28 = v28 + *(double *)&v32;
              LOWORD(v32) = v30->i16[2];
              *(double *)&v33 = (double)v32;
              v27 = v27 + *(double *)&v33;
              LOWORD(v33) = v30->i16[3];
              a10 = (double)v33;
              a6.f64[0] = a6.f64[0] + a10;
              v26 += 4;
            }
            while (v26 < v24);
            *(double *)a3 = v29;
            *((double *)a3 + 1) = v28;
            *((double *)a3 + 2) = v27;
            a3[3] = *(_QWORD *)&a6.f64[0];
            if ((int)v25 < 1)
              return a6.f64[0];
          }
          v137 = 0;
          v138 = (double *)(a3 + 7);
          v139 = (_WORD *)a2 + 2;
          v140 = (int)v24;
          do
          {
            LOWORD(a10) = v139[v140 - 2];
            LOWORD(a11) = *(v139 - 2);
            *(double *)&v141 = (double)*(unint64_t *)&a11;
            *(double *)&v142 = (double)*(unint64_t *)&a10 - *(double *)&v141;
            v29 = v29 + *(double *)&v142;
            LOWORD(v142) = v139[v140 - 1];
            LOWORD(v141) = *(v139 - 1);
            *(double *)&v143 = (double)v141;
            *(double *)&v144 = (double)v142 - *(double *)&v143;
            v28 = v28 + *(double *)&v144;
            LOWORD(v144) = v139[v140];
            LOWORD(v143) = *v139;
            *(double *)&v145 = (double)v143;
            *(double *)&v146 = (double)v144 - *(double *)&v145;
            v27 = v27 + *(double *)&v146;
            LOWORD(v146) = v139[v140 + 1];
            LOWORD(v145) = v139[1];
            a11 = (double)v145;
            a10 = (double)v146 - a11;
            a6.f64[0] = a6.f64[0] + a10;
            *(v138 - 3) = v29;
            *(v138 - 2) = v28;
            v137 += 4;
            *(v138 - 1) = v27;
            *v138 = a6.f64[0];
            v138 += 4;
            v139 += 4;
          }
          while (v137 < v25);
          return a6.f64[0];
        }
        if (a5 < 1)
          return a6.f64[0];
        v133 = 0;
        v134 = &a3[a5];
        while ((int)v24 < 1)
        {
          a6.f64[0] = 0.0;
          *a3 = 0;
          if ((int)v25 >= 1)
            goto LABEL_44;
LABEL_37:
          ++v133;
          a2 = (uint16x4_t *)((char *)a2 + 2);
          ++a3;
          ++v134;
          if (v133 == a5)
            return a6.f64[0];
        }
        v135 = 0;
        a6.f64[0] = 0.0;
        do
        {
          LOWORD(a7.f64[0]) = a2->i16[v135];
          a7.f64[0] = (double)*(unint64_t *)&a7.f64[0];
          a6.f64[0] = a6.f64[0] + a7.f64[0];
          v135 += a5;
        }
        while (v135 < (int)v24);
        *a3 = *(_QWORD *)&a6.f64[0];
        if ((int)v25 < 1)
          goto LABEL_37;
LABEL_44:
        v136 = 0;
        do
        {
          LOWORD(a7.f64[0]) = a2->i16[(int)v24 + v136];
          LOWORD(a8) = a2->i16[v136];
          a8 = (double)*(unint64_t *)&a8;
          a7.f64[0] = (double)*(unint64_t *)&a7.f64[0] - a8;
          a6.f64[0] = a6.f64[0] + a7.f64[0];
          v134[v136] = *(_QWORD *)&a6.f64[0];
          v136 += a5;
        }
        while (v136 < (int)v25);
        goto LABEL_37;
      }
      if ((int)v24 < 1)
      {
        v132 = 0.0;
        v131 = 0.0;
        a6.f64[0] = 0.0;
        goto LABEL_66;
      }
      if (v24 >= 4)
      {
        v153 = ((int)v24 - 1) / 3u + 1;
        v130 = 3 * (v153 & 0x7FFFFFFE);
        v154 = (_WORD *)a2 + 3;
        a6.f64[0] = 0.0;
        v155 = v153 & 0x7FFFFFFE;
        v131 = 0.0;
        v132 = 0.0;
        do
        {
          LOWORD(a9) = *(v154 - 3);
          a9 = (double)*(unint64_t *)&a9;
          LOWORD(a10) = *v154;
          a10 = (double)*(unint64_t *)&a10;
          LOWORD(a11) = *(v154 - 2);
          a11 = (double)*(unint64_t *)&a11;
          LOWORD(a12) = v154[1];
          a12 = (double)*(unint64_t *)&a12;
          LOWORD(a13) = *(v154 - 1);
          a13 = (double)*(unint64_t *)&a13;
          LOWORD(v13) = v154[2];
          v13 = (double)*(unint64_t *)&v13;
          a6.f64[0] = a6.f64[0] + a13 + v13;
          v131 = v131 + a11 + a12;
          v132 = v132 + a9 + a10;
          v154 += 6;
          v155 -= 2;
        }
        while (v155);
        if ((v153 & 0x7FFFFFFE) == v153)
        {
LABEL_66:
          *(double *)a3 = v132;
          *((double *)a3 + 1) = v131;
          a3[2] = *(_QWORD *)&a6.f64[0];
          if ((int)v25 >= 1)
          {
            v159 = (double *)(a3 + 4);
            v160 = (_WORD *)a2 + 2;
            v161 = (int)v24;
            v162 = 5;
            do
            {
              LOWORD(a9) = v160[v161 - 2];
              LOWORD(a10) = *(v160 - 2);
              *(double *)&v163 = (double)*(unint64_t *)&a10;
              *(double *)&v164 = (double)*(unint64_t *)&a9 - *(double *)&v163;
              v132 = v132 + *(double *)&v164;
              LOWORD(v164) = v160[v161 - 1];
              LOWORD(v163) = *(v160 - 1);
              *(double *)&v165 = (double)v163;
              *(double *)&v166 = (double)v164 - *(double *)&v165;
              v131 = v131 + *(double *)&v166;
              LOWORD(v166) = v160[v161];
              LOWORD(v165) = *v160;
              a10 = (double)v165;
              a9 = (double)v166 - a10;
              a6.f64[0] = a6.f64[0] + a9;
              *(v159 - 1) = v132;
              *v159 = v131;
              a3[v162] = *(_QWORD *)&a6.f64[0];
              v167 = v162 - 2;
              v162 += 3;
              v159 += 3;
              v160 += 3;
            }
            while (v167 < v25);
          }
          return a6.f64[0];
        }
      }
      else
      {
        v130 = 0;
        a6.f64[0] = 0.0;
        v131 = 0.0;
        v132 = 0.0;
      }
      do
      {
        v156 = (_WORD *)a2 + v130;
        LOWORD(a9) = *v156;
        *(double *)&v157 = (double)*(unint64_t *)&a9;
        v132 = v132 + *(double *)&v157;
        LOWORD(v157) = v156[1];
        *(double *)&v158 = (double)v157;
        v131 = v131 + *(double *)&v158;
        LOWORD(v158) = v156[2];
        a9 = (double)v158;
        a6.f64[0] = a6.f64[0] + a9;
        v130 += 3;
      }
      while (v130 < v24);
      goto LABEL_66;
    }
    if ((int)v24 < 1)
    {
      a6.f64[0] = 0.0;
      goto LABEL_58;
    }
    if ((_DWORD)v24 == 1)
    {
      v129 = 0;
      a6.f64[0] = 0.0;
    }
    else
    {
      v129 = v24 & 0xFFFFFFFE;
      v147 = (_WORD *)a2 + 1;
      a6.f64[0] = 0.0;
      v148 = v129;
      do
      {
        LOWORD(a7.f64[0]) = *(v147 - 1);
        a7.f64[0] = (double)*(unint64_t *)&a7.f64[0];
        LOWORD(a8) = *v147;
        a8 = (double)*(unint64_t *)&a8;
        a6.f64[0] = a6.f64[0] + a7.f64[0] + a8;
        v147 += 2;
        v148 -= 2;
      }
      while (v148);
      if (v129 == v24)
      {
LABEL_58:
        *a3 = *(_QWORD *)&a6.f64[0];
        if ((int)v25 >= 1)
        {
          v152 = a3 + 1;
          do
          {
            LOWORD(a7.f64[0]) = a2->i16[(int)v24];
            LOWORD(a8) = a2->i16[0];
            a8 = (double)*(unint64_t *)&a8;
            a7.f64[0] = (double)*(unint64_t *)&a7.f64[0] - a8;
            a6.f64[0] = a6.f64[0] + a7.f64[0];
            *v152++ = *(_QWORD *)&a6.f64[0];
            a2 = (uint16x4_t *)((char *)a2 + 2);
            --v25;
          }
          while (v25);
        }
        return a6.f64[0];
      }
    }
    v149 = (unsigned __int16 *)a2 + v129;
    v150 = v24 - v129;
    do
    {
      v151 = *v149++;
      a7.f64[0] = (double)v151;
      a6.f64[0] = a6.f64[0] + (double)v151;
      --v150;
    }
    while (v150);
    goto LABEL_58;
  }
  v15 = (a5 * a4);
  if ((int)v15 < 1)
    return a6.f64[0];
  v16 = a5;
  v17 = 2 * a5;
  v18 = 3 * a5;
  v19 = a5;
  if (v15 < 8)
  {
    v20 = 0;
LABEL_20:
    v79 = 0;
    v80 = (_WORD *)a2 + v20 + v19 * 4;
    v81 = (_WORD *)a2 + v20 + v18;
    v82 = (_WORD *)a2 + v20 + v17;
    v83 = (_WORD *)a2 + v20 + v16;
    v84 = &a3[v20];
    v85 = v15 - v20;
    v86 = (_WORD *)a2 + v20;
    do
    {
      LOWORD(a6.f64[0]) = v86[v79];
      LOWORD(a7.f64[0]) = v83[v79];
      *(double *)&v87 = (double)*(unint64_t *)&a7.f64[0];
      v88 = (double)*(unint64_t *)&a6.f64[0] + *(double *)&v87;
      LOWORD(v87) = v82[v79];
      *(double *)&v89 = (double)v87;
      v90 = v88 + *(double *)&v89;
      LOWORD(v89) = v81[v79];
      *(double *)&v91 = (double)v89;
      v92 = v90 + *(double *)&v91;
      LOWORD(v91) = v80[v79];
      a7.f64[0] = (double)v91;
      a6.f64[0] = v92 + a7.f64[0];
      v84[v79++] = *(_QWORD *)&a6.f64[0];
    }
    while (v85 != v79);
    return a6.f64[0];
  }
  v20 = v15 & 0x7FFFFFF8;
  v34 = v15 & 0xFFFFFFF8;
  v35 = (float64x2_t *)a3;
  v36 = a2;
  do
  {
    v37 = vmovl_u16(*v36);
    v38.i64[0] = v37.u32[0];
    v38.i64[1] = v37.u32[1];
    v39 = vcvtq_f64_u64(v38);
    v38.i64[0] = v37.u32[2];
    v38.i64[1] = v37.u32[3];
    v40 = vcvtq_f64_u64(v38);
    v41 = vmovl_high_u16(*(uint16x8_t *)v36->i8);
    v38.i64[0] = v41.u32[0];
    v38.i64[1] = v41.u32[1];
    v42 = vcvtq_f64_u64(v38);
    v38.i64[0] = v41.u32[2];
    v38.i64[1] = v41.u32[3];
    v43 = vcvtq_f64_u64(v38);
    v44 = *(uint16x8_t *)&v36->i8[2 * v16];
    v45 = vmovl_u16(*(uint16x4_t *)v44.i8);
    v38.i64[0] = v45.u32[0];
    v38.i64[1] = v45.u32[1];
    v46 = vcvtq_f64_u64(v38);
    v38.i64[0] = v45.u32[2];
    v38.i64[1] = v45.u32[3];
    v47 = vcvtq_f64_u64(v38);
    v48 = vmovl_high_u16(v44);
    v38.i64[0] = v48.u32[0];
    v38.i64[1] = v48.u32[1];
    v49 = vcvtq_f64_u64(v38);
    v38.i64[0] = v48.u32[2];
    v38.i64[1] = v48.u32[3];
    v50 = vaddq_f64(v43, vcvtq_f64_u64(v38));
    v51 = vaddq_f64(v42, v49);
    v52 = vaddq_f64(v40, v47);
    v53 = *(uint16x8_t *)&v36->i8[2 * v17];
    v54 = vaddq_f64(v39, v46);
    v55 = vmovl_high_u16(v53);
    v38.i64[0] = v55.u32[2];
    v38.i64[1] = v55.u32[3];
    v56 = vcvtq_f64_u64(v38);
    v38.i64[0] = v55.u32[0];
    v38.i64[1] = v55.u32[1];
    v57 = vcvtq_f64_u64(v38);
    v58 = vmovl_u16(*(uint16x4_t *)v53.i8);
    v38.i64[0] = v58.u32[2];
    v38.i64[1] = v58.u32[3];
    v59 = vcvtq_f64_u64(v38);
    v38.i64[0] = v58.u32[0];
    v38.i64[1] = v58.u32[1];
    v60 = vaddq_f64(v54, vcvtq_f64_u64(v38));
    v61 = vaddq_f64(v52, v59);
    v62 = vaddq_f64(v51, v57);
    v63 = vaddq_f64(v50, v56);
    v64 = *(uint16x8_t *)&v36->i8[2 * v18];
    v65 = vmovl_u16(*(uint16x4_t *)v64.i8);
    v38.i64[0] = v65.u32[0];
    v38.i64[1] = v65.u32[1];
    v66 = vcvtq_f64_u64(v38);
    v38.i64[0] = v65.u32[2];
    v38.i64[1] = v65.u32[3];
    v67 = vcvtq_f64_u64(v38);
    v68 = vmovl_high_u16(v64);
    v38.i64[0] = v68.u32[0];
    v38.i64[1] = v68.u32[1];
    v69 = vcvtq_f64_u64(v38);
    v38.i64[0] = v68.u32[2];
    v38.i64[1] = v68.u32[3];
    v70 = vaddq_f64(v63, vcvtq_f64_u64(v38));
    v71 = vaddq_f64(v62, v69);
    a7 = vaddq_f64(v61, v67);
    v72 = vaddq_f64(v60, v66);
    v73 = *(uint16x8_t *)v36[v19].i8;
    v74 = vmovl_high_u16(v73);
    v38.i64[0] = v74.u32[2];
    v38.i64[1] = v74.u32[3];
    v75 = vcvtq_f64_u64(v38);
    v38.i64[0] = v74.u32[0];
    v38.i64[1] = v74.u32[1];
    v76 = vcvtq_f64_u64(v38);
    v77 = vmovl_u16(*(uint16x4_t *)v73.i8);
    v38.i64[0] = v77.u32[2];
    v38.i64[1] = v77.u32[3];
    v78 = vcvtq_f64_u64(v38);
    v38.i64[0] = v77.u32[0];
    v38.i64[1] = v77.u32[1];
    v35[2] = vaddq_f64(v71, v76);
    v35[3] = vaddq_f64(v70, v75);
    a6 = vaddq_f64(a7, v78);
    *v35 = vaddq_f64(v72, vcvtq_f64_u64(v38));
    v35[1] = a6;
    v35 += 4;
    v36 += 2;
    v34 -= 8;
  }
  while (v34);
  if (v20 != v15)
    goto LABEL_20;
  return a6.f64[0];
}

void sub_10034B21C()
{
  operator delete();
}

uint64_t sub_10034B230(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_10034B270(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_10034B294(uint64_t result, int16x8_t *a2, int32x4_t *a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int32x4_t *v22;
  int16x8_t *v23;
  int16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int16x8_t v31;
  uint64_t v32;
  __int16 *v33;
  __int16 *v34;
  __int16 *v35;
  __int16 *v36;
  __int32 *v37;
  uint64_t v38;
  __int16 *v39;
  int16x8_t *v40;
  int32x4_t *v41;
  uint64_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int16x8_t v50;
  int16x8_t v51;
  __int16 *v52;
  __int16 *v53;
  __int32 *v54;
  uint64_t v55;
  __int16 *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  __int32 *v69;
  uint64_t v70;
  int v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  unint64_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  const __int16 *i16;
  int32x4_t v80;
  uint64_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  const __int16 *v91;
  __int16 *v92;
  unint64_t v93;
  int *v94;
  __int16 *v95;
  uint64_t v96;
  int16x8_t *v97;
  int32x4_t v98;
  uint64_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int16x8_t v103;
  __int16 *v104;
  unint64_t v105;
  int v106;
  int *v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  uint64_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  const __int16 *v115;
  uint64_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  const __int16 *v123;
  __int16 *v124;
  int *i32;
  __int16 *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int16x8x3_t v130;
  int16x8x3_t v131;
  int16x8x4_t v132;
  int16x8x4_t v133;

  v5 = *(_DWORD *)(result + 8);
  if (v5 == 3)
  {
    v12 = (a5 * a4);
    if ((int)v12 < 1)
      return result;
    v13 = 2 * a5;
    if (v12 >= 0x10)
    {
      v14 = v12 & 0x7FFFFFF0;
      v40 = a2 + 1;
      v41 = a3 + 2;
      v42 = v12 & 0xFFFFFFF0;
      do
      {
        v43 = v40[-1];
        v44 = *(int16x8_t *)((char *)v40 + 2 * a5 - 16);
        v45 = *(int16x8_t *)((char *)v40 + 2 * a5);
        v46 = vaddl_high_s16(v44, v43);
        v47 = vaddl_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v43.i8);
        v48 = vaddl_high_s16(v45, *v40);
        v49 = vaddl_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v40->i8);
        v50 = *(int16x8_t *)((char *)v40 + 2 * v13 - 16);
        v51 = *(int16x8_t *)((char *)v40 + 2 * v13);
        v41[-2] = vaddw_s16(v47, *(int16x4_t *)v50.i8);
        v41[-1] = vaddw_high_s16(v46, v50);
        *v41 = vaddw_s16(v49, *(int16x4_t *)v51.i8);
        v41[1] = vaddw_high_s16(v48, v51);
        v41 += 4;
        v40 += 2;
        v42 -= 16;
      }
      while (v42);
      if (v14 == v12)
        return result;
    }
    else
    {
      v14 = 0;
    }
    v52 = &a2->i16[v14 + v13];
    v53 = &a2->i16[v14 + a5];
    v54 = &a3->i32[v14];
    v55 = v12 - v14;
    v56 = &a2->i16[v14];
    do
    {
      v58 = *v56++;
      v57 = v58;
      v59 = *v53++;
      v60 = v59 + v57;
      v61 = *v52++;
      *v54++ = v60 + v61;
      --v55;
    }
    while (v55);
    return result;
  }
  if (v5 != 5)
  {
    v15 = (v5 * a5);
    v16 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v15 < 1)
          {
            v21 = 0;
            v20 = 0;
            v19 = 0;
            v18 = 0;
            goto LABEL_53;
          }
          if (v15 >= 0x3D)
          {
            v72 = 0uLL;
            v73 = 0uLL;
            v74 = 0uLL;
            v75 = ((v15 - 1) >> 2) + 1;
            v76 = 0uLL;
            v77 = 0uLL;
            v17 = 4 * (v75 & 0x7FFFFFFFFFFFFFF0);
            v78 = 0uLL;
            i16 = a2[4].i16;
            v80 = 0uLL;
            v81 = v75 & 0x7FFFFFFFFFFFFFF0;
            v82 = 0uLL;
            v83 = 0uLL;
            v84 = 0uLL;
            v85 = 0uLL;
            v86 = 0uLL;
            v87 = 0uLL;
            v88 = 0uLL;
            v89 = 0uLL;
            v90 = 0uLL;
            do
            {
              v91 = i16 - 32;
              v132 = vld4q_s16(v91);
              v133 = vld4q_s16(i16);
              v88 = vaddw_high_s16(v88, v132.val[0]);
              v87 = vaddw_s16(v87, *(int16x4_t *)v132.val[0].i8);
              v90 = vaddw_high_s16(v90, v133.val[0]);
              v89 = vaddw_s16(v89, *(int16x4_t *)v133.val[0].i8);
              v84 = vaddw_high_s16(v84, v132.val[1]);
              v83 = vaddw_s16(v83, *(int16x4_t *)v132.val[1].i8);
              v86 = vaddw_high_s16(v86, v133.val[1]);
              v85 = vaddw_s16(v85, *(int16x4_t *)v133.val[1].i8);
              v78 = vaddw_high_s16(v78, v132.val[2]);
              v77 = vaddw_s16(v77, *(int16x4_t *)v132.val[2].i8);
              v82 = vaddw_high_s16(v82, v133.val[2]);
              v80 = vaddw_s16(v80, *(int16x4_t *)v133.val[2].i8);
              v73 = vaddw_high_s16(v73, v132.val[3]);
              v72 = vaddw_s16(v72, *(int16x4_t *)v132.val[3].i8);
              v76 = vaddw_high_s16(v76, v133.val[3]);
              v74 = vaddw_s16(v74, *(int16x4_t *)v133.val[3].i8);
              i16 += 64;
              v81 -= 16;
            }
            while (v81);
            v21 = vaddvq_s32(vaddq_s32(vaddq_s32(v89, v87), vaddq_s32(v90, v88)));
            v20 = vaddvq_s32(vaddq_s32(vaddq_s32(v85, v83), vaddq_s32(v86, v84)));
            v19 = vaddvq_s32(vaddq_s32(vaddq_s32(v80, v77), vaddq_s32(v82, v78)));
            v18 = vaddvq_s32(vaddq_s32(vaddq_s32(v74, v72), vaddq_s32(v76, v73)));
            if (v75 == (v75 & 0x7FFFFFFFFFFFFFF0))
            {
LABEL_53:
              a3->i32[0] = v21;
              a3->i32[1] = v20;
              a3->i32[2] = v19;
              a3->i32[3] = v18;
              if ((int)v16 >= 1)
              {
                v93 = 0;
                v94 = &a3[1].i32[3];
                v95 = &a2->i16[2];
                v96 = (int)v15;
                do
                {
                  v21 = v21 - *(v95 - 2) + v95[v96 - 2];
                  v20 = v20 - *(v95 - 1) + v95[v96 - 1];
                  v19 = v19 - *v95 + v95[v96];
                  result = v95[1];
                  v18 = v18 - result + v95[v96 + 1];
                  v93 += 4;
                  *(v94 - 3) = v21;
                  *(v94 - 2) = v20;
                  *(v94 - 1) = v19;
                  *v94 = v18;
                  v94 += 4;
                  v95 += 4;
                }
                while (v93 < v16);
              }
              return result;
            }
          }
          else
          {
            v17 = 0;
            v18 = 0;
            v19 = 0;
            v20 = 0;
            v21 = 0;
          }
          v92 = &a2->i16[v17 + 2];
          do
          {
            v21 += *(v92 - 2);
            v20 += *(v92 - 1);
            v19 += *v92;
            v18 += v92[1];
            v17 += 4;
            v92 += 4;
          }
          while (v17 < v15);
          goto LABEL_53;
        }
        if (a5 < 1)
          return result;
        v68 = 0;
        v69 = &a3->i32[a5];
        while ((int)v15 < 1)
        {
          v71 = 0;
          a3->i32[0] = 0;
          if ((int)v16 >= 1)
            goto LABEL_42;
LABEL_35:
          ++v68;
          a2 = (int16x8_t *)((char *)a2 + 2);
          a3 = (int32x4_t *)((char *)a3 + 4);
          ++v69;
          if (v68 == a5)
            return result;
        }
        v70 = 0;
        v71 = 0;
        do
        {
          result = a2->i16[v70];
          v71 += result;
          v70 += a5;
        }
        while (v70 < (int)v15);
        a3->i32[0] = v71;
        if ((int)v16 < 1)
          goto LABEL_35;
LABEL_42:
        result = 0;
        do
        {
          v71 = v71 - a2->i16[result] + a2->i16[(int)v15 + result];
          v69[result] = v71;
          result += a5;
        }
        while (result < (int)v16);
        goto LABEL_35;
      }
      if ((int)v15 < 1)
      {
        v67 = 0;
        v66 = 0;
        v65 = 0;
        goto LABEL_70;
      }
      if (v15 >= 0x2E)
      {
        v108 = 0uLL;
        v109 = 0uLL;
        v110 = 0uLL;
        v111 = ((int)v15 - 1) / 3u + 1;
        v112 = 0uLL;
        v113 = 0uLL;
        v114 = 0uLL;
        v64 = 3 * (v111 & 0x7FFFFFF0);
        v115 = (const __int16 *)a2;
        v116 = v111 & 0x7FFFFFF0;
        v117 = 0uLL;
        v118 = 0uLL;
        v119 = 0uLL;
        v120 = 0uLL;
        v121 = 0uLL;
        v122 = 0uLL;
        do
        {
          v123 = v115;
          v115 += 48;
          v130 = vld3q_s16(v123);
          v123 += 24;
          v120 = vaddw_high_s16(v120, v130.val[0]);
          v131 = vld3q_s16(v123);
          v119 = vaddw_s16(v119, *(int16x4_t *)v130.val[0].i8);
          v122 = vaddw_high_s16(v122, v131.val[0]);
          v121 = vaddw_s16(v121, *(int16x4_t *)v131.val[0].i8);
          v114 = vaddw_high_s16(v114, v130.val[1]);
          v113 = vaddw_s16(v113, *(int16x4_t *)v130.val[1].i8);
          v118 = vaddw_high_s16(v118, v131.val[1]);
          v117 = vaddw_s16(v117, *(int16x4_t *)v131.val[1].i8);
          v109 = vaddw_high_s16(v109, v130.val[2]);
          v108 = vaddw_s16(v108, *(int16x4_t *)v130.val[2].i8);
          v112 = vaddw_high_s16(v112, v131.val[2]);
          v110 = vaddw_s16(v110, *(int16x4_t *)v131.val[2].i8);
          v116 -= 16;
        }
        while (v116);
        v67 = vaddvq_s32(vaddq_s32(vaddq_s32(v121, v119), vaddq_s32(v122, v120)));
        v66 = vaddvq_s32(vaddq_s32(vaddq_s32(v117, v113), vaddq_s32(v118, v114)));
        v65 = vaddvq_s32(vaddq_s32(vaddq_s32(v110, v108), vaddq_s32(v112, v109)));
        if ((v111 & 0x7FFFFFF0) == v111)
        {
LABEL_70:
          a3->i32[0] = v67;
          a3->i32[1] = v66;
          a3->i32[2] = v65;
          if ((int)v16 >= 1)
          {
            i32 = a3[1].i32;
            v126 = &a2->i16[2];
            v127 = (int)v15;
            v128 = 5;
            do
            {
              v67 = v67 - *(v126 - 2) + v126[v127 - 2];
              result = *(v126 - 1);
              v66 = v66 - result + v126[v127 - 1];
              v65 = v65 - *v126 + v126[v127];
              *(i32 - 1) = v67;
              *i32 = v66;
              a3->i32[v128] = v65;
              v129 = v128 - 2;
              v128 += 3;
              i32 += 3;
              v126 += 3;
            }
            while (v129 < v16);
          }
          return result;
        }
      }
      else
      {
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = 0;
      }
      do
      {
        v124 = &a2->i16[v64];
        v67 += *v124;
        v66 += v124[1];
        v65 += v124[2];
        v64 += 3;
      }
      while (v64 < v15);
      goto LABEL_70;
    }
    if ((int)v15 < 1)
    {
      v63 = 0;
      goto LABEL_62;
    }
    if (v15 >= 0x10)
    {
      v62 = v15 & 0x7FFFFFF0;
      v97 = a2 + 1;
      v98 = 0uLL;
      v99 = v15 & 0xFFFFFFF0;
      v100 = 0uLL;
      v101 = 0uLL;
      v102 = 0uLL;
      do
      {
        v103 = v97[-1];
        v100 = vaddw_high_s16(v100, v103);
        v98 = vaddw_s16(v98, *(int16x4_t *)v103.i8);
        v102 = vaddw_high_s16(v102, *v97);
        v101 = vaddw_s16(v101, *(int16x4_t *)v97->i8);
        v97 += 2;
        v99 -= 16;
      }
      while (v99);
      v63 = vaddvq_s32(vaddq_s32(vaddq_s32(v101, v98), vaddq_s32(v102, v100)));
      if (v62 == v15)
      {
LABEL_62:
        a3->i32[0] = v63;
        if ((int)v16 >= 1)
        {
          v107 = &a3->i32[1];
          do
          {
            v63 = v63 - a2->i16[0] + a2->i16[(int)v15];
            *v107++ = v63;
            a2 = (int16x8_t *)((char *)a2 + 2);
            --v16;
          }
          while (v16);
        }
        return result;
      }
    }
    else
    {
      v62 = 0;
      v63 = 0;
    }
    v104 = &a2->i16[v62];
    v105 = v15 - v62;
    do
    {
      v106 = *v104++;
      v63 += v106;
      --v105;
    }
    while (v105);
    goto LABEL_62;
  }
  v6 = (a5 * a4);
  if ((int)v6 < 1)
    return result;
  v7 = a5;
  v8 = 2 * a5;
  v9 = 3 * a5;
  v10 = 4 * a5;
  if (v6 < 8)
  {
    v11 = 0;
LABEL_18:
    v32 = 0;
    v33 = &a2->i16[v11 + v10];
    v34 = &a2->i16[v11 + v9];
    v35 = &a2->i16[v11 + v8];
    v36 = &a2->i16[v11 + v7];
    v37 = &a3->i32[v11];
    v38 = v6 - v11;
    v39 = &a2->i16[v11];
    do
    {
      result = (v35[v32] + v34[v32]);
      v37[v32] = v36[v32] + v39[v32] + result + v33[v32];
      ++v32;
    }
    while (v38 != v32);
    return result;
  }
  v11 = v6 & 0x7FFFFFF8;
  result = v6 & 0xFFFFFFF8;
  v22 = a3;
  v23 = a2;
  do
  {
    v24 = *(int16x8_t *)((char *)v23 + 2 * v7);
    v25 = vaddl_high_s16(v24, *v23);
    v26 = vaddl_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v23->i8);
    v27 = *(int16x8_t *)((char *)v23 + 2 * v8);
    v28 = vaddw_s16(v26, *(int16x4_t *)v27.i8);
    v29 = *(int16x8_t *)((char *)v23 + 2 * v9);
    v30 = vaddw_high_s16(vaddw_high_s16(v25, v27), v29);
    v31 = *(int16x8_t *)((char *)v23 + 2 * v10);
    *v22 = vaddw_s16(vaddw_s16(v28, *(int16x4_t *)v29.i8), *(int16x4_t *)v31.i8);
    v22[1] = vaddw_high_s16(v30, v31);
    v22 += 2;
    ++v23;
    result -= 8;
  }
  while (result);
  if (v11 != v6)
    goto LABEL_18;
  return result;
}

void sub_10034B9E8()
{
  operator delete();
}

uint64_t sub_10034B9FC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_10034BA3C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

unint64_t sub_10034BA60(unint64_t result, int *a2, int *a3, int a4, int a5)
{
  __int32 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int64_t v22;
  uint64_t v23;
  int32x4_t *v24;
  uint64_t v25;
  int32x4_t v26;
  uint64_t v27;
  int *v28;
  int *v29;
  uint64_t v30;
  int32x4_t *v31;
  int32x4_t *v32;
  uint64_t v33;
  int32x4_t v34;
  int *v35;
  int *v36;
  int *v37;
  uint64_t v38;
  int *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int32x4_t v57;
  int32x4_t v58;
  unint64_t v59;
  const float *v60;
  uint64_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  const float *v68;
  int *v69;
  int v70;
  int v71;
  unint64_t v72;
  int *v73;
  int *v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int32x4_t *v80;
  int32x4_t v81;
  uint64_t v82;
  int32x4_t v83;
  int *v84;
  unint64_t v85;
  int v86;
  int *v87;
  int v88;
  int v89;
  uint64_t v90;
  int32x4_t v91;
  const float *v92;
  uint64_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  const float *v99;
  int *v100;
  int *v101;
  unsigned int *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v108;
  float32x4x3_t v109;
  float32x4x3_t v110;
  float32x4x4_t v111;
  float32x4x4_t v112;

  v5 = *(_DWORD *)(result + 8);
  if (v5 == 3)
  {
    v12 = (a5 * a4);
    if ((int)v12 < 1)
      return result;
    v13 = 2 * a5;
    if (v12 >= 0xC)
    {
      v14 = 0;
      if ((unint64_t)((char *)a3 - (char *)a2 - 4 * v13) >= 0x20
        && (unint64_t)((char *)a3 - (char *)a2 - 4 * a5) >= 0x20
        && (unint64_t)((char *)a3 - (char *)a2) >= 0x20)
      {
        v14 = v12 & 0x7FFFFFF8;
        v31 = (int32x4_t *)(a2 + 4);
        v32 = (int32x4_t *)(a3 + 4);
        v33 = v12 & 0xFFFFFFF8;
        do
        {
          v34 = vaddq_s32(vaddq_s32(*(int32x4_t *)((char *)v31 + 4 * a5), *v31), *(int32x4_t *)((char *)v31 + 4 * v13));
          v32[-1] = vaddq_s32(vaddq_s32(*(int32x4_t *)((char *)v31 + 4 * a5 - 16), v31[-1]), *(int32x4_t *)((char *)v31 + 4 * v13 - 16));
          *v32 = v34;
          v31 += 2;
          v32 += 2;
          v33 -= 8;
        }
        while (v33);
        if (v14 == v12)
          return result;
      }
    }
    else
    {
      v14 = 0;
    }
    v35 = &a2[v14 + v13];
    v36 = &a3[v14];
    v37 = &a2[v14];
    v38 = v12 - v14;
    v39 = &a2[v14 + a5];
    do
    {
      v41 = *v37++;
      v40 = v41;
      v42 = *v39++;
      v43 = v42 + v40;
      v44 = *v35++;
      *v36++ = v43 + v44;
      --v38;
    }
    while (v38);
    return result;
  }
  if (v5 != 5)
  {
    v15 = (v5 * a5);
    v16 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v15 < 1)
          {
            v21 = 0;
            v20 = 0;
            v19 = 0;
            v18 = 0;
            goto LABEL_61;
          }
          if (v15 >= 0x1D)
          {
            v57 = 0uLL;
            v58 = 0uLL;
            v59 = ((v15 - 1) >> 2) + 1;
            v17 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
            v60 = (const float *)(a2 + 16);
            v61 = v59 & 0x7FFFFFFFFFFFFFF8;
            v62 = 0uLL;
            v63 = 0uLL;
            v64 = 0uLL;
            v65 = 0uLL;
            v66 = 0uLL;
            v67 = 0uLL;
            do
            {
              v68 = v60 - 16;
              v111 = vld4q_f32(v68);
              v112 = vld4q_f32(v60);
              v66 = vaddq_s32((int32x4_t)v111.val[0], v66);
              v67 = vaddq_s32((int32x4_t)v112.val[0], v67);
              v64 = vaddq_s32((int32x4_t)v111.val[1], v64);
              v65 = vaddq_s32((int32x4_t)v112.val[1], v65);
              v62 = vaddq_s32((int32x4_t)v111.val[2], v62);
              v63 = vaddq_s32((int32x4_t)v112.val[2], v63);
              v57 = vaddq_s32((int32x4_t)v111.val[3], v57);
              v58 = vaddq_s32((int32x4_t)v112.val[3], v58);
              v60 += 32;
              v61 -= 8;
            }
            while (v61);
            v21 = vaddvq_s32(vaddq_s32(v67, v66));
            v20 = vaddvq_s32(vaddq_s32(v65, v64));
            v19 = vaddvq_s32(vaddq_s32(v63, v62));
            v18 = vaddvq_s32(vaddq_s32(v58, v57));
            if (v59 == (v59 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_61:
              *a3 = v21;
              a3[1] = v20;
              a3[2] = v19;
              a3[3] = v18;
              if ((int)v16 >= 1)
              {
                v72 = 0;
                v73 = a3 + 7;
                v74 = a2 + 2;
                v75 = (int)v15;
                do
                {
                  v21 += v74[v75 - 2] - *(v74 - 2);
                  v20 += v74[v75 - 1] - *(v74 - 1);
                  v76 = v74[v75];
                  v77 = v74[v75 + 1];
                  v78 = *v74;
                  v79 = v74[1];
                  v74 += 4;
                  result = (v76 - v78);
                  v19 += result;
                  v18 += v77 - v79;
                  v72 += 4;
                  *(v73 - 3) = v21;
                  *(v73 - 2) = v20;
                  *(v73 - 1) = v19;
                  *v73 = v18;
                  v73 += 4;
                }
                while (v72 < v16);
              }
              return result;
            }
          }
          else
          {
            v17 = 0;
            v18 = 0;
            v19 = 0;
            v20 = 0;
            v21 = 0;
          }
          v69 = &a2[v17 + 2];
          do
          {
            v21 += *(v69 - 2);
            v20 += *(v69 - 1);
            v70 = *v69;
            v71 = v69[1];
            v69 += 4;
            v19 += v70;
            v18 += v71;
            v17 += 4;
          }
          while (v17 < v15);
          goto LABEL_61;
        }
        if (a5 < 1)
          return result;
        v51 = 0;
        v52 = &a3[a5];
        while ((int)v15 < 1)
        {
          v54 = 0;
          *a3 = 0;
          if ((int)v16 >= 1)
            goto LABEL_50;
LABEL_43:
          ++v51;
          ++a2;
          ++a3;
          ++v52;
          if (v51 == a5)
            return result;
        }
        v53 = 0;
        v54 = 0;
        do
        {
          result = a2[v53];
          v54 += result;
          v53 += a5;
        }
        while (v53 < (int)v15);
        *a3 = v54;
        if ((int)v16 < 1)
          goto LABEL_43;
LABEL_50:
        v55 = 0;
        result = (unint64_t)&a2[(int)v15];
        do
        {
          v56 = v55;
          v54 += *(_DWORD *)(result + 4 * v55) - a2[v55];
          v55 += a5;
          v52[v56] = v54;
        }
        while (v55 < (int)v16);
        goto LABEL_43;
      }
      if ((int)v15 < 1)
      {
        v50 = 0;
        v49 = 0;
        v48 = 0;
        goto LABEL_78;
      }
      if (v15 >= 0x16)
      {
        v90 = ((int)v15 - 1) / 3u + 1;
        v47 = 3 * (v90 & 0x7FFFFFF8);
        v91 = 0uLL;
        v92 = (const float *)a2;
        v93 = v90 & 0x7FFFFFF8;
        v94 = 0uLL;
        v95 = 0uLL;
        v96 = 0uLL;
        v97 = 0uLL;
        v98 = 0uLL;
        do
        {
          v99 = v92;
          v92 += 24;
          v109 = vld3q_f32(v99);
          v99 += 12;
          v97 = vaddq_s32((int32x4_t)v109.val[0], v97);
          v110 = vld3q_f32(v99);
          v98 = vaddq_s32((int32x4_t)v110.val[0], v98);
          v95 = vaddq_s32((int32x4_t)v109.val[1], v95);
          v96 = vaddq_s32((int32x4_t)v110.val[1], v96);
          v91 = vaddq_s32((int32x4_t)v109.val[2], v91);
          v94 = vaddq_s32((int32x4_t)v110.val[2], v94);
          v93 -= 8;
        }
        while (v93);
        v50 = vaddvq_s32(vaddq_s32(v98, v97));
        v49 = vaddvq_s32(vaddq_s32(v96, v95));
        v48 = vaddvq_s32(vaddq_s32(v94, v91));
        if ((v90 & 0x7FFFFFF8) == v90)
        {
LABEL_78:
          *a3 = v50;
          a3[1] = v49;
          a3[2] = v48;
          if ((int)v16 >= 1)
          {
            v101 = a3 + 4;
            v102 = (unsigned int *)(a2 + 1);
            v103 = (int)v15;
            v104 = 5;
            do
            {
              v50 += v102[v103 - 1] - *(v102 - 1);
              v106 = v102[v103];
              v105 = v102[v103 + 1];
              result = *v102;
              v107 = v102[1];
              v102 += 3;
              v49 += v106 - result;
              v48 += v105 - v107;
              *(v101 - 1) = v50;
              *v101 = v49;
              a3[v104] = v48;
              v108 = v104 - 2;
              v104 += 3;
              v101 += 3;
            }
            while (v108 < v16);
          }
          return result;
        }
      }
      else
      {
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v50 = 0;
      }
      do
      {
        v100 = &a2[v47];
        v50 += *v100;
        v49 += v100[1];
        v48 += v100[2];
        v47 += 3;
      }
      while (v47 < v15);
      goto LABEL_78;
    }
    if ((int)v15 < 1)
    {
      v46 = 0;
      goto LABEL_70;
    }
    if (v15 >= 8)
    {
      v45 = v15 & 0x7FFFFFF8;
      v80 = (int32x4_t *)(a2 + 4);
      v81 = 0uLL;
      v82 = v15 & 0xFFFFFFF8;
      v83 = 0uLL;
      do
      {
        v81 = vaddq_s32(v80[-1], v81);
        v83 = vaddq_s32(*v80, v83);
        v80 += 2;
        v82 -= 8;
      }
      while (v82);
      v46 = vaddvq_s32(vaddq_s32(v83, v81));
      if (v45 == v15)
      {
LABEL_70:
        *a3 = v46;
        if ((int)v16 >= 1)
        {
          v87 = a3 + 1;
          do
          {
            v88 = a2[(int)v15];
            v89 = *a2++;
            v46 += v88 - v89;
            *v87++ = v46;
            --v16;
          }
          while (v16);
        }
        return result;
      }
    }
    else
    {
      v45 = 0;
      v46 = 0;
    }
    v84 = &a2[v45];
    v85 = v15 - v45;
    do
    {
      v86 = *v84++;
      v46 += v86;
      --v85;
    }
    while (v85);
    goto LABEL_70;
  }
  v6 = (a5 * a4);
  if ((int)v6 < 1)
    return result;
  v7 = a5;
  v8 = 2 * a5;
  v9 = 3 * a5;
  v10 = 4 * a5;
  if (v6 < 0xC)
  {
    v11 = 0;
LABEL_23:
    v27 = 0;
    v28 = &a2[v11 + v10];
    v29 = &a2[v11 + v9];
    v30 = v6 - v11;
    do
    {
      result = (a2[v11 + v8 + v27] + v29[v27]);
      a3[v11 + v27] = a2[v11 + v7 + v27] + a2[v11 + v27] + result + v28[v27];
      ++v27;
    }
    while (v30 != v27);
    return result;
  }
  v11 = 0;
  v22 = (char *)a3 - (char *)a2;
  if ((unint64_t)((char *)a3 - (char *)a2 - 4 * v10) < 0x20)
    goto LABEL_23;
  if ((unint64_t)(v22 - 4 * v9) < 0x20)
    goto LABEL_23;
  if ((unint64_t)(v22 - 4 * v8) < 0x20)
    goto LABEL_23;
  v23 = 4 * a5;
  if ((unint64_t)(v22 - v23) < 0x20)
    goto LABEL_23;
  if ((unint64_t)((char *)a3 - (char *)a2) < 0x20)
    goto LABEL_23;
  v11 = v6 & 0x7FFFFFF8;
  result = (unint64_t)(a2 + 4);
  v24 = (int32x4_t *)(a3 + 4);
  v25 = v6 & 0xFFFFFFF8;
  do
  {
    v26 = vaddq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)(result + 4 * v7), *(int32x4_t *)result), vaddq_s32(*(int32x4_t *)(result + 4 * v8), *(int32x4_t *)(result + 4 * v9))), *(int32x4_t *)(result + 4 * v10));
    v24[-1] = vaddq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)(result + v23 - 16), *(int32x4_t *)(result - 16)), vaddq_s32(*(int32x4_t *)(result + 4 * v8 - 16), *(int32x4_t *)(result + 4 * v9 - 16))), *(int32x4_t *)(result + 4 * v10 - 16));
    *v24 = v26;
    result += 32;
    v24 += 2;
    v25 -= 8;
  }
  while (v25);
  if (v11 != v6)
    goto LABEL_23;
  return result;
}

void sub_10034C138()
{
  operator delete();
}

uint64_t sub_10034C14C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_10034C18C(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

float64_t sub_10034C1B0(uint64_t a1, int16x4_t *a2, _QWORD *a3, int a4, int a5, float64x2_t a6, float64x2_t a7, int16x4_t a8, double a9, double a10, double a11, int16x4_t a12, int16x4_t a13)
{
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  int16x4_t *v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  uint64_t v34;
  float64x2_t *v35;
  int16x4_t *v36;
  int32x4_t v37;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  int32x4_t v41;
  float64x2_t v42;
  float64x2_t v43;
  int16x8_t v44;
  int32x4_t v45;
  float64x2_t v46;
  float64x2_t v47;
  int32x4_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  int16x8_t v53;
  float64x2_t v54;
  int32x4_t v55;
  float64x2_t v56;
  float64x2_t v57;
  int32x4_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  int16x8_t v64;
  int32x4_t v65;
  float64x2_t v66;
  float64x2_t v67;
  int32x4_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  int16x8_t v73;
  int32x4_t v74;
  float64x2_t v75;
  float64x2_t v76;
  int32x4_t v77;
  float64x2_t v78;
  uint64_t v79;
  _WORD *v80;
  _WORD *v81;
  _WORD *v82;
  _WORD *v83;
  _QWORD *v84;
  uint64_t v85;
  _WORD *v86;
  int16x4_t v87;
  double v88;
  int16x4_t v89;
  double v90;
  int16x4_t v91;
  double v92;
  uint64_t v93;
  float64x2_t *v94;
  int16x4_t *v95;
  int32x4_t v96;
  int64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  int32x4_t v100;
  float64x2_t v101;
  float64x2_t v102;
  int16x8_t v103;
  int32x4_t v104;
  float64x2_t v105;
  float64x2_t v106;
  int32x4_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  int16x8_t v113;
  int32x4_t v114;
  float64x2_t v115;
  float64x2_t v116;
  int32x4_t v117;
  float64x2_t v118;
  __int16 *v119;
  __int16 *v120;
  _QWORD *v121;
  uint64_t v122;
  __int16 *v123;
  int v124;
  double v125;
  int v126;
  double v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  double v131;
  double v132;
  int v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  double *v138;
  __int16 *v139;
  uint64_t v140;
  int16x4_t v141;
  int16x4_t v142;
  int16x4_t v143;
  int16x4_t v144;
  int16x4_t v145;
  int16x4_t v146;
  __int16 *v147;
  uint64_t v148;
  __int16 *v149;
  uint64_t v150;
  int v151;
  _QWORD *v152;
  uint64_t v153;
  _WORD *v154;
  uint64_t v155;
  _WORD *v156;
  int16x4_t v157;
  int16x4_t v158;
  double *v159;
  __int16 *v160;
  uint64_t v161;
  uint64_t v162;
  int16x4_t v163;
  int16x4_t v164;
  int16x4_t v165;
  int16x4_t v166;
  unint64_t v167;

  v14 = *(_DWORD *)(a1 + 8);
  if (v14 == 3)
  {
    v21 = (a5 * a4);
    if ((int)v21 < 1)
      return a6.f64[0];
    v22 = 2 * a5;
    if (v21 >= 8)
    {
      v23 = v21 & 0x7FFFFFF8;
      v93 = v21 & 0xFFFFFFF8;
      v94 = (float64x2_t *)a3;
      v95 = a2;
      do
      {
        v96 = vmovl_s16(*v95);
        v97.i64[0] = v96.i32[0];
        v97.i64[1] = v96.i32[1];
        v98 = vcvtq_f64_s64(v97);
        v97.i64[0] = v96.i32[2];
        v97.i64[1] = v96.i32[3];
        v99 = vcvtq_f64_s64(v97);
        v100 = vmovl_high_s16(*(int16x8_t *)v95->i8);
        v97.i64[0] = v100.i32[0];
        v97.i64[1] = v100.i32[1];
        v101 = vcvtq_f64_s64(v97);
        v97.i64[0] = v100.i32[2];
        v97.i64[1] = v100.i32[3];
        v102 = vcvtq_f64_s64(v97);
        v103 = *(int16x8_t *)&v95->i8[2 * a5];
        v104 = vmovl_s16(*(int16x4_t *)v103.i8);
        v97.i64[0] = v104.i32[0];
        v97.i64[1] = v104.i32[1];
        v105 = vcvtq_f64_s64(v97);
        v97.i64[0] = v104.i32[2];
        v97.i64[1] = v104.i32[3];
        v106 = vcvtq_f64_s64(v97);
        v107 = vmovl_high_s16(v103);
        v97.i64[0] = v107.i32[0];
        v97.i64[1] = v107.i32[1];
        v108 = vcvtq_f64_s64(v97);
        v97.i64[0] = v107.i32[2];
        v97.i64[1] = v107.i32[3];
        v109 = vaddq_f64(v102, vcvtq_f64_s64(v97));
        v110 = vaddq_f64(v101, v108);
        v111 = vaddq_f64(v99, v106);
        v112 = vaddq_f64(v98, v105);
        v113 = *(int16x8_t *)&v95->i8[2 * v22];
        v114 = vmovl_high_s16(v113);
        v97.i64[0] = v114.i32[2];
        v97.i64[1] = v114.i32[3];
        v115 = vcvtq_f64_s64(v97);
        v97.i64[0] = v114.i32[0];
        v97.i64[1] = v114.i32[1];
        v116 = vcvtq_f64_s64(v97);
        v117 = vmovl_s16(*(int16x4_t *)v113.i8);
        v97.i64[0] = v117.i32[2];
        v97.i64[1] = v117.i32[3];
        v118 = vcvtq_f64_s64(v97);
        v97.i64[0] = v117.i32[0];
        v97.i64[1] = v117.i32[1];
        v94[2] = vaddq_f64(v110, v116);
        v94[3] = vaddq_f64(v109, v115);
        a6 = vaddq_f64(v111, v118);
        *v94 = vaddq_f64(v112, vcvtq_f64_s64(v97));
        v94[1] = a6;
        v94 += 4;
        v95 += 2;
        v93 -= 8;
      }
      while (v93);
      if (v23 == v21)
        return a6.f64[0];
    }
    else
    {
      v23 = 0;
    }
    v119 = (__int16 *)a2 + v23 + v22;
    v120 = (__int16 *)a2 + v23 + a5;
    v121 = &a3[v23];
    v122 = v21 - v23;
    v123 = (__int16 *)a2 + v23;
    do
    {
      v124 = *v123++;
      v125 = (double)v124;
      v126 = *v120++;
      v127 = v125 + (double)v126;
      v128 = *v119++;
      a6.f64[0] = v127 + (double)v128;
      *v121++ = *(_QWORD *)&a6.f64[0];
      --v122;
    }
    while (v122);
    return a6.f64[0];
  }
  if (v14 != 5)
  {
    v24 = (v14 * a5);
    v25 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v24 < 1)
          {
            v29 = 0.0;
            v28 = 0.0;
            v27 = 0.0;
            a6.f64[0] = 0.0;
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            a3[3] = 0;
            if ((int)v25 < 1)
              return a6.f64[0];
          }
          else
          {
            v26 = 0;
            a6.f64[0] = 0.0;
            v27 = 0.0;
            v28 = 0.0;
            v29 = 0.0;
            do
            {
              v30 = &a2[v26 / 4];
              LOWORD(a10) = v30->i16[0];
              *(double *)&v31 = (double)vmovl_s16(*(int16x4_t *)&a10).i32[0];
              v29 = v29 + *(double *)&v31;
              v31.i16[0] = v30->i16[1];
              *(double *)&v32 = (double)vmovl_s16(v31).i32[0];
              v28 = v28 + *(double *)&v32;
              v32.i16[0] = v30->i16[2];
              *(double *)&v33 = (double)vmovl_s16(v32).i32[0];
              v27 = v27 + *(double *)&v33;
              v33.i16[0] = v30->i16[3];
              a10 = (double)vmovl_s16(v33).i32[0];
              a6.f64[0] = a6.f64[0] + a10;
              v26 += 4;
            }
            while (v26 < v24);
            *(double *)a3 = v29;
            *((double *)a3 + 1) = v28;
            *((double *)a3 + 2) = v27;
            a3[3] = *(_QWORD *)&a6.f64[0];
            if ((int)v25 < 1)
              return a6.f64[0];
          }
          v137 = 0;
          v138 = (double *)(a3 + 7);
          v139 = (__int16 *)a2 + 2;
          v140 = (int)v24;
          do
          {
            LOWORD(a10) = v139[v140 - 2];
            LOWORD(a11) = *(v139 - 2);
            *(double *)&v141 = (double)vmovl_s16(*(int16x4_t *)&a11).i32[0];
            *(double *)&v142 = (double)vmovl_s16(*(int16x4_t *)&a10).i32[0] - *(double *)&v141;
            v29 = v29 + *(double *)&v142;
            v142.i16[0] = v139[v140 - 1];
            v141.i16[0] = *(v139 - 1);
            *(double *)&v143 = (double)vmovl_s16(v141).i32[0];
            *(double *)&v144 = (double)vmovl_s16(v142).i32[0] - *(double *)&v143;
            v28 = v28 + *(double *)&v144;
            v144.i16[0] = v139[v140];
            v143.i16[0] = *v139;
            *(double *)&v145 = (double)vmovl_s16(v143).i32[0];
            *(double *)&v146 = (double)vmovl_s16(v144).i32[0] - *(double *)&v145;
            v27 = v27 + *(double *)&v146;
            v146.i16[0] = v139[v140 + 1];
            v145.i16[0] = v139[1];
            a11 = (double)vmovl_s16(v145).i32[0];
            a10 = (double)vmovl_s16(v146).i32[0] - a11;
            a6.f64[0] = a6.f64[0] + a10;
            *(v138 - 3) = v29;
            *(v138 - 2) = v28;
            v137 += 4;
            *(v138 - 1) = v27;
            *v138 = a6.f64[0];
            v138 += 4;
            v139 += 4;
          }
          while (v137 < v25);
          return a6.f64[0];
        }
        if (a5 < 1)
          return a6.f64[0];
        v133 = 0;
        v134 = &a3[a5];
        while ((int)v24 < 1)
        {
          a6.f64[0] = 0.0;
          *a3 = 0;
          if ((int)v25 >= 1)
            goto LABEL_44;
LABEL_37:
          ++v133;
          a2 = (int16x4_t *)((char *)a2 + 2);
          ++a3;
          ++v134;
          if (v133 == a5)
            return a6.f64[0];
        }
        v135 = 0;
        a6.f64[0] = 0.0;
        do
        {
          LOWORD(a7.f64[0]) = a2->i16[v135];
          a7.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0];
          a6.f64[0] = a6.f64[0] + a7.f64[0];
          v135 += a5;
        }
        while (v135 < (int)v24);
        *a3 = *(_QWORD *)&a6.f64[0];
        if ((int)v25 < 1)
          goto LABEL_37;
LABEL_44:
        v136 = 0;
        do
        {
          LOWORD(a7.f64[0]) = a2->i16[(int)v24 + v136];
          a8.i16[0] = a2->i16[v136];
          *(double *)&a8 = (double)vmovl_s16(a8).i32[0];
          a7.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0] - *(double *)&a8;
          a6.f64[0] = a6.f64[0] + a7.f64[0];
          v134[v136] = *(_QWORD *)&a6.f64[0];
          v136 += a5;
        }
        while (v136 < (int)v25);
        goto LABEL_37;
      }
      if ((int)v24 < 1)
      {
        v132 = 0.0;
        v131 = 0.0;
        a6.f64[0] = 0.0;
        goto LABEL_66;
      }
      if (v24 >= 4)
      {
        v153 = ((int)v24 - 1) / 3u + 1;
        v130 = 3 * (v153 & 0x7FFFFFFE);
        v154 = (_WORD *)a2 + 3;
        a6.f64[0] = 0.0;
        v155 = v153 & 0x7FFFFFFE;
        v131 = 0.0;
        v132 = 0.0;
        do
        {
          LOWORD(a9) = *(v154 - 3);
          a9 = (double)vmovl_s16(*(int16x4_t *)&a9).i32[0];
          LOWORD(a10) = *v154;
          a10 = (double)vmovl_s16(*(int16x4_t *)&a10).i32[0];
          LOWORD(a11) = *(v154 - 2);
          a11 = (double)vmovl_s16(*(int16x4_t *)&a11).i32[0];
          a12.i16[0] = v154[1];
          *(double *)&a12 = (double)vmovl_s16(a12).i32[0];
          a13.i16[0] = *(v154 - 1);
          *(double *)&a13 = (double)vmovl_s16(a13).i32[0];
          LOWORD(v13) = v154[2];
          v13 = (double)vmovl_s16(*(int16x4_t *)&v13).i32[0];
          a6.f64[0] = a6.f64[0] + *(double *)&a13 + v13;
          v131 = v131 + a11 + *(double *)&a12;
          v132 = v132 + a9 + a10;
          v154 += 6;
          v155 -= 2;
        }
        while (v155);
        if ((v153 & 0x7FFFFFFE) == v153)
        {
LABEL_66:
          *(double *)a3 = v132;
          *((double *)a3 + 1) = v131;
          a3[2] = *(_QWORD *)&a6.f64[0];
          if ((int)v25 >= 1)
          {
            v159 = (double *)(a3 + 4);
            v160 = (__int16 *)a2 + 2;
            v161 = (int)v24;
            v162 = 5;
            do
            {
              LOWORD(a9) = v160[v161 - 2];
              LOWORD(a10) = *(v160 - 2);
              *(double *)&v163 = (double)vmovl_s16(*(int16x4_t *)&a10).i32[0];
              *(double *)&v164 = (double)vmovl_s16(*(int16x4_t *)&a9).i32[0] - *(double *)&v163;
              v132 = v132 + *(double *)&v164;
              v164.i16[0] = v160[v161 - 1];
              v163.i16[0] = *(v160 - 1);
              *(double *)&v165 = (double)vmovl_s16(v163).i32[0];
              *(double *)&v166 = (double)vmovl_s16(v164).i32[0] - *(double *)&v165;
              v131 = v131 + *(double *)&v166;
              v166.i16[0] = v160[v161];
              v165.i16[0] = *v160;
              a10 = (double)vmovl_s16(v165).i32[0];
              a9 = (double)vmovl_s16(v166).i32[0] - a10;
              a6.f64[0] = a6.f64[0] + a9;
              *(v159 - 1) = v132;
              *v159 = v131;
              a3[v162] = *(_QWORD *)&a6.f64[0];
              v167 = v162 - 2;
              v162 += 3;
              v159 += 3;
              v160 += 3;
            }
            while (v167 < v25);
          }
          return a6.f64[0];
        }
      }
      else
      {
        v130 = 0;
        a6.f64[0] = 0.0;
        v131 = 0.0;
        v132 = 0.0;
      }
      do
      {
        v156 = (_WORD *)a2 + v130;
        LOWORD(a9) = *v156;
        *(double *)&v157 = (double)vmovl_s16(*(int16x4_t *)&a9).i32[0];
        v132 = v132 + *(double *)&v157;
        v157.i16[0] = v156[1];
        *(double *)&v158 = (double)vmovl_s16(v157).i32[0];
        v131 = v131 + *(double *)&v158;
        v158.i16[0] = v156[2];
        a9 = (double)vmovl_s16(v158).i32[0];
        a6.f64[0] = a6.f64[0] + a9;
        v130 += 3;
      }
      while (v130 < v24);
      goto LABEL_66;
    }
    if ((int)v24 < 1)
    {
      a6.f64[0] = 0.0;
      goto LABEL_58;
    }
    if ((_DWORD)v24 == 1)
    {
      v129 = 0;
      a6.f64[0] = 0.0;
    }
    else
    {
      v129 = v24 & 0xFFFFFFFE;
      v147 = (__int16 *)a2 + 1;
      a6.f64[0] = 0.0;
      v148 = v129;
      do
      {
        LOWORD(a7.f64[0]) = *(v147 - 1);
        a7.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0];
        a8.i16[0] = *v147;
        *(double *)&a8 = (double)vmovl_s16(a8).i32[0];
        a6.f64[0] = a6.f64[0] + a7.f64[0] + *(double *)&a8;
        v147 += 2;
        v148 -= 2;
      }
      while (v148);
      if (v129 == v24)
      {
LABEL_58:
        *a3 = *(_QWORD *)&a6.f64[0];
        if ((int)v25 >= 1)
        {
          v152 = a3 + 1;
          do
          {
            LOWORD(a7.f64[0]) = a2->i16[(int)v24];
            a8.i16[0] = a2->i16[0];
            *(double *)&a8 = (double)vmovl_s16(a8).i32[0];
            a7.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0] - *(double *)&a8;
            a6.f64[0] = a6.f64[0] + a7.f64[0];
            *v152++ = *(_QWORD *)&a6.f64[0];
            a2 = (int16x4_t *)((char *)a2 + 2);
            --v25;
          }
          while (v25);
        }
        return a6.f64[0];
      }
    }
    v149 = (__int16 *)a2 + v129;
    v150 = v24 - v129;
    do
    {
      v151 = *v149++;
      a7.f64[0] = (double)v151;
      a6.f64[0] = a6.f64[0] + (double)v151;
      --v150;
    }
    while (v150);
    goto LABEL_58;
  }
  v15 = (a5 * a4);
  if ((int)v15 < 1)
    return a6.f64[0];
  v16 = a5;
  v17 = 2 * a5;
  v18 = 3 * a5;
  v19 = a5;
  if (v15 < 8)
  {
    v20 = 0;
LABEL_20:
    v79 = 0;
    v80 = (_WORD *)a2 + v20 + v19 * 4;
    v81 = (_WORD *)a2 + v20 + v18;
    v82 = (_WORD *)a2 + v20 + v17;
    v83 = (_WORD *)a2 + v20 + v16;
    v84 = &a3[v20];
    v85 = v15 - v20;
    v86 = (_WORD *)a2 + v20;
    do
    {
      LOWORD(a6.f64[0]) = v86[v79];
      LOWORD(a7.f64[0]) = v83[v79];
      *(double *)&v87 = (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0];
      v88 = (double)vmovl_s16(*(int16x4_t *)&a6.f64[0]).i32[0] + *(double *)&v87;
      v87.i16[0] = v82[v79];
      *(double *)&v89 = (double)vmovl_s16(v87).i32[0];
      v90 = v88 + *(double *)&v89;
      v89.i16[0] = v81[v79];
      *(double *)&v91 = (double)vmovl_s16(v89).i32[0];
      v92 = v90 + *(double *)&v91;
      v91.i16[0] = v80[v79];
      a7.f64[0] = (double)vmovl_s16(v91).i32[0];
      a6.f64[0] = v92 + a7.f64[0];
      v84[v79++] = *(_QWORD *)&a6.f64[0];
    }
    while (v85 != v79);
    return a6.f64[0];
  }
  v20 = v15 & 0x7FFFFFF8;
  v34 = v15 & 0xFFFFFFF8;
  v35 = (float64x2_t *)a3;
  v36 = a2;
  do
  {
    v37 = vmovl_s16(*v36);
    v38.i64[0] = v37.i32[0];
    v38.i64[1] = v37.i32[1];
    v39 = vcvtq_f64_s64(v38);
    v38.i64[0] = v37.i32[2];
    v38.i64[1] = v37.i32[3];
    v40 = vcvtq_f64_s64(v38);
    v41 = vmovl_high_s16(*(int16x8_t *)v36->i8);
    v38.i64[0] = v41.i32[0];
    v38.i64[1] = v41.i32[1];
    v42 = vcvtq_f64_s64(v38);
    v38.i64[0] = v41.i32[2];
    v38.i64[1] = v41.i32[3];
    v43 = vcvtq_f64_s64(v38);
    v44 = *(int16x8_t *)&v36->i8[2 * v16];
    v45 = vmovl_s16(*(int16x4_t *)v44.i8);
    v38.i64[0] = v45.i32[0];
    v38.i64[1] = v45.i32[1];
    v46 = vcvtq_f64_s64(v38);
    v38.i64[0] = v45.i32[2];
    v38.i64[1] = v45.i32[3];
    v47 = vcvtq_f64_s64(v38);
    v48 = vmovl_high_s16(v44);
    v38.i64[0] = v48.i32[0];
    v38.i64[1] = v48.i32[1];
    v49 = vcvtq_f64_s64(v38);
    v38.i64[0] = v48.i32[2];
    v38.i64[1] = v48.i32[3];
    v50 = vaddq_f64(v43, vcvtq_f64_s64(v38));
    v51 = vaddq_f64(v42, v49);
    v52 = vaddq_f64(v40, v47);
    v53 = *(int16x8_t *)&v36->i8[2 * v17];
    v54 = vaddq_f64(v39, v46);
    v55 = vmovl_high_s16(v53);
    v38.i64[0] = v55.i32[2];
    v38.i64[1] = v55.i32[3];
    v56 = vcvtq_f64_s64(v38);
    v38.i64[0] = v55.i32[0];
    v38.i64[1] = v55.i32[1];
    v57 = vcvtq_f64_s64(v38);
    v58 = vmovl_s16(*(int16x4_t *)v53.i8);
    v38.i64[0] = v58.i32[2];
    v38.i64[1] = v58.i32[3];
    v59 = vcvtq_f64_s64(v38);
    v38.i64[0] = v58.i32[0];
    v38.i64[1] = v58.i32[1];
    v60 = vaddq_f64(v54, vcvtq_f64_s64(v38));
    v61 = vaddq_f64(v52, v59);
    v62 = vaddq_f64(v51, v57);
    v63 = vaddq_f64(v50, v56);
    v64 = *(int16x8_t *)&v36->i8[2 * v18];
    v65 = vmovl_s16(*(int16x4_t *)v64.i8);
    v38.i64[0] = v65.i32[0];
    v38.i64[1] = v65.i32[1];
    v66 = vcvtq_f64_s64(v38);
    v38.i64[0] = v65.i32[2];
    v38.i64[1] = v65.i32[3];
    v67 = vcvtq_f64_s64(v38);
    v68 = vmovl_high_s16(v64);
    v38.i64[0] = v68.i32[0];
    v38.i64[1] = v68.i32[1];
    v69 = vcvtq_f64_s64(v38);
    v38.i64[0] = v68.i32[2];
    v38.i64[1] = v68.i32[3];
    v70 = vaddq_f64(v63, vcvtq_f64_s64(v38));
    v71 = vaddq_f64(v62, v69);
    a7 = vaddq_f64(v61, v67);
    v72 = vaddq_f64(v60, v66);
    v73 = *(int16x8_t *)v36[v19].i8;
    v74 = vmovl_high_s16(v73);
    v38.i64[0] = v74.i32[2];
    v38.i64[1] = v74.i32[3];
    v75 = vcvtq_f64_s64(v38);
    v38.i64[0] = v74.i32[0];
    v38.i64[1] = v74.i32[1];
    v76 = vcvtq_f64_s64(v38);
    v77 = vmovl_s16(*(int16x4_t *)v73.i8);
    v38.i64[0] = v77.i32[2];
    v38.i64[1] = v77.i32[3];
    v78 = vcvtq_f64_s64(v38);
    v38.i64[0] = v77.i32[0];
    v38.i64[1] = v77.i32[1];
    v35[2] = vaddq_f64(v71, v76);
    v35[3] = vaddq_f64(v70, v75);
    a6 = vaddq_f64(a7, v78);
    *v35 = vaddq_f64(v72, vcvtq_f64_s64(v38));
    v35[1] = a6;
    v35 += 4;
    v36 += 2;
    v34 -= 8;
  }
  while (v34);
  if (v20 != v15)
    goto LABEL_20;
  return a6.f64[0];
}

void sub_10034CAA4()
{
  operator delete();
}

uint64_t sub_10034CAB8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_10034CAF8(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

uint64_t sub_10034CB1C(uint64_t result, float32x4_t *a2, double *a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float64x2_t *v22;
  float32x4_t *v23;
  float32x4_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float32x4_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float32x4_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float32x4_t v33;
  uint64_t v34;
  __int8 *v35;
  __int8 *v36;
  __int8 *v37;
  __int8 *v38;
  double *v39;
  uint64_t v40;
  __int8 *v41;
  uint64_t v42;
  float64x2_t *v43;
  float32x4_t *v44;
  float32x4_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float32x4_t v48;
  float *v49;
  float *v50;
  double *v51;
  uint64_t v52;
  float *v53;
  float v54;
  double v55;
  float v56;
  double v57;
  float v58;
  unint64_t v59;
  double v60;
  unint64_t v61;
  float64x2_t v62;
  double v63;
  int v64;
  double *v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  unint64_t v69;
  const float *f32;
  uint64_t v71;
  const float *v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float *v84;
  float v85;
  float v86;
  unint64_t v87;
  double *v88;
  float *v89;
  uint64_t v90;
  float v91;
  double v92;
  float v93;
  float v94;
  float32x4_t *v95;
  uint64_t v96;
  float32x4_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float *v102;
  unint64_t v103;
  float v104;
  double *v105;
  double v106;
  float v107;
  uint64_t v108;
  const float *v109;
  uint64_t v110;
  double v111;
  const float *v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float *v122;
  float v123;
  uint64_t v124;
  float64x2_t *v125;
  uint64_t v126;
  float64x2_t v127;
  float32x2_t v128;
  unint64_t v129;
  float32x4x3_t v130;
  float32x4x3_t v131;
  float32x4x4_t v132;
  float32x4x4_t v133;

  v5 = *(_DWORD *)(result + 8);
  if (v5 == 3)
  {
    v12 = (a5 * a4);
    if ((int)v12 < 1)
      return result;
    v13 = 2 * a5;
    if (v12 >= 4)
    {
      v14 = v12 & 0x7FFFFFFC;
      v42 = v12 & 0xFFFFFFFC;
      v43 = (float64x2_t *)a3;
      v44 = a2;
      do
      {
        v45 = *(float32x4_t *)((char *)v44 + 4 * a5);
        v46 = vaddq_f64(vcvt_hight_f64_f32(*v44), vcvt_hight_f64_f32(v45));
        v47 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v44->f32), vcvtq_f64_f32(*(float32x2_t *)v45.f32));
        v48 = *(float32x4_t *)((char *)v44 + 4 * v13);
        *v43 = vaddq_f64(v47, vcvtq_f64_f32(*(float32x2_t *)v48.f32));
        v43[1] = vaddq_f64(v46, vcvt_hight_f64_f32(v48));
        v43 += 2;
        ++v44;
        v42 -= 4;
      }
      while (v42);
      if (v14 == v12)
        return result;
    }
    else
    {
      v14 = 0;
    }
    v49 = &a2->f32[v14 + v13];
    v50 = &a2->f32[v14 + a5];
    v51 = &a3[v14];
    v52 = v12 - v14;
    v53 = &a2->f32[v14];
    do
    {
      v54 = *v53++;
      v55 = v54;
      v56 = *v50++;
      v57 = v56;
      v58 = *v49++;
      *v51++ = v55 + v57 + v58;
      --v52;
    }
    while (v52);
    return result;
  }
  if (v5 != 5)
  {
    v15 = (v5 * a5);
    v16 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v15 < 1)
          {
            v21 = 0.0;
            v20 = 0.0;
            v19 = 0.0;
            v18 = 0.0;
            goto LABEL_53;
          }
          if (v15 >= 0x1D)
          {
            v69 = ((v15 - 1) >> 2) + 1;
            v17 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
            f32 = a2[4].f32;
            v18 = 0.0;
            v71 = v69 & 0x7FFFFFFFFFFFFFF8;
            v19 = 0.0;
            v20 = 0.0;
            v21 = 0.0;
            do
            {
              v72 = f32 - 16;
              v132 = vld4q_f32(v72);
              v133 = vld4q_f32(f32);
              v73 = vcvt_hight_f64_f32(v132.val[0]);
              v74 = vcvtq_f64_f32(*(float32x2_t *)v132.val[0].f32);
              v75 = vcvt_hight_f64_f32(v133.val[0]);
              v76 = vcvtq_f64_f32(*(float32x2_t *)v133.val[0].f32);
              v77 = vcvt_hight_f64_f32(v132.val[1]);
              v78 = vcvtq_f64_f32(*(float32x2_t *)v132.val[1].f32);
              v79 = vcvt_hight_f64_f32(v133.val[1]);
              v80 = vcvtq_f64_f32(*(float32x2_t *)v133.val[1].f32);
              v81 = vcvt_hight_f64_f32(v132.val[2]);
              v82 = vcvtq_f64_f32(*(float32x2_t *)v132.val[2].f32);
              v83 = vcvt_hight_f64_f32(v132.val[3]);
              v132.val[0] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v132.val[3].f32);
              v132.val[1] = (float32x4_t)vcvt_hight_f64_f32(v133.val[2]);
              v132.val[2] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v133.val[2].f32);
              v132.val[3] = (float32x4_t)vcvt_hight_f64_f32(v133.val[3]);
              v133.val[0] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v133.val[3].f32);
              v18 = v18
                  + *(double *)v132.val[0].i64
                  + *(double *)&v132.val[0].i64[1]
                  + v83.f64[0]
                  + v83.f64[1]
                  + *(double *)v133.val[0].i64
                  + *(double *)&v133.val[0].i64[1]
                  + *(double *)v132.val[3].i64
                  + *(double *)&v132.val[3].i64[1];
              v19 = v19
                  + v82.f64[0]
                  + v82.f64[1]
                  + v81.f64[0]
                  + v81.f64[1]
                  + *(double *)v132.val[2].i64
                  + *(double *)&v132.val[2].i64[1]
                  + *(double *)v132.val[1].i64
                  + *(double *)&v132.val[1].i64[1];
              v20 = v20
                  + v78.f64[0]
                  + v78.f64[1]
                  + v77.f64[0]
                  + v77.f64[1]
                  + v80.f64[0]
                  + v80.f64[1]
                  + v79.f64[0]
                  + v79.f64[1];
              v21 = v21
                  + v74.f64[0]
                  + v74.f64[1]
                  + v73.f64[0]
                  + v73.f64[1]
                  + v76.f64[0]
                  + v76.f64[1]
                  + v75.f64[0]
                  + v75.f64[1];
              f32 += 32;
              v71 -= 8;
            }
            while (v71);
            if (v69 == (v69 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_53:
              *a3 = v21;
              a3[1] = v20;
              a3[2] = v19;
              a3[3] = v18;
              if ((int)v16 >= 1)
              {
                v87 = 0;
                v88 = a3 + 7;
                v89 = &a2->f32[2];
                v90 = (int)v15;
                do
                {
                  v21 = v21 + v89[v90 - 2] - *(v89 - 2);
                  v20 = v20 + v89[v90 - 1] - *(v89 - 1);
                  v91 = v89[v90 + 1];
                  v92 = v89[v90];
                  v93 = *v89;
                  v94 = v89[1];
                  v89 += 4;
                  v19 = v19 + v92 - v93;
                  v18 = v18 + v91 - v94;
                  *(v88 - 3) = v21;
                  *(v88 - 2) = v20;
                  v87 += 4;
                  *(v88 - 1) = v19;
                  *v88 = v18;
                  v88 += 4;
                }
                while (v87 < v16);
              }
              return result;
            }
          }
          else
          {
            v17 = 0;
            v18 = 0.0;
            v19 = 0.0;
            v20 = 0.0;
            v21 = 0.0;
          }
          v84 = &a2[v17 / 4].f32[2];
          do
          {
            v21 = v21 + *(v84 - 2);
            v20 = v20 + *(v84 - 1);
            v85 = *v84;
            v86 = v84[1];
            v84 += 4;
            v19 = v19 + v85;
            v18 = v18 + v86;
            v17 += 4;
          }
          while (v17 < v15);
          goto LABEL_53;
        }
        if (a5 < 1)
          return result;
        v64 = 0;
        v65 = &a3[a5];
        while ((int)v15 < 1)
        {
          v67 = 0.0;
          *a3 = 0.0;
          if ((int)v16 >= 1)
            goto LABEL_42;
LABEL_35:
          ++v64;
          a2 = (float32x4_t *)((char *)a2 + 4);
          ++a3;
          ++v65;
          if (v64 == a5)
            return result;
        }
        v66 = 0;
        v67 = 0.0;
        do
        {
          v67 = v67 + a2->f32[v66];
          v66 += a5;
        }
        while (v66 < (int)v15);
        *a3 = v67;
        if ((int)v16 < 1)
          goto LABEL_35;
LABEL_42:
        v68 = 0;
        do
        {
          v67 = v67 + a2->f32[(int)v15 + v68] - a2->f32[v68];
          v65[v68] = v67;
          result = v68 + a5;
          v68 = result;
        }
        while (result < (int)v16);
        goto LABEL_35;
      }
      if ((int)v15 < 1)
      {
        v62 = 0uLL;
        v63 = 0.0;
        goto LABEL_71;
      }
      if (v15 >= 0x16)
      {
        v108 = ((int)v15 - 1) / 3u + 1;
        v61 = 3 * (v108 & 0x7FFFFFF8);
        v63 = 0.0;
        v109 = (const float *)a2;
        v110 = v108 & 0x7FFFFFF8;
        v111 = 0.0;
        v62.f64[0] = 0.0;
        do
        {
          v112 = v109;
          v109 += 24;
          v130 = vld3q_f32(v112);
          v112 += 12;
          v113 = vcvt_hight_f64_f32(v130.val[0]);
          v131 = vld3q_f32(v112);
          v114 = vcvtq_f64_f32(*(float32x2_t *)v130.val[0].f32);
          v115 = vcvt_hight_f64_f32(v131.val[0]);
          v116 = vcvtq_f64_f32(*(float32x2_t *)v131.val[0].f32);
          v117 = vcvt_hight_f64_f32(v130.val[1]);
          v118 = vcvtq_f64_f32(*(float32x2_t *)v130.val[1].f32);
          v119 = vcvt_hight_f64_f32(v131.val[1]);
          v120 = vcvtq_f64_f32(*(float32x2_t *)v131.val[1].f32);
          v121 = vcvt_hight_f64_f32(v130.val[2]);
          v130.val[0] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v130.val[2].f32);
          v130.val[2] = (float32x4_t)vcvt_hight_f64_f32(v131.val[2]);
          v131.val[0] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v131.val[2].f32);
          v63 = v63
              + *(double *)v130.val[0].i64
              + *(double *)&v130.val[0].i64[1]
              + v121.f64[0]
              + v121.f64[1]
              + *(double *)v131.val[0].i64
              + *(double *)&v131.val[0].i64[1]
              + *(double *)v130.val[2].i64
              + *(double *)&v130.val[2].i64[1];
          v111 = v111
               + v118.f64[0]
               + v118.f64[1]
               + v117.f64[0]
               + v117.f64[1]
               + v120.f64[0]
               + v120.f64[1]
               + v119.f64[0]
               + v119.f64[1];
          v62.f64[0] = v62.f64[0]
                     + v114.f64[0]
                     + v114.f64[1]
                     + v113.f64[0]
                     + v113.f64[1]
                     + v116.f64[0]
                     + v116.f64[1]
                     + v115.f64[0]
                     + v115.f64[1];
          v110 -= 8;
        }
        while (v110);
        v62.f64[1] = v111;
        if ((v108 & 0x7FFFFFF8) == v108)
        {
LABEL_71:
          *(float64x2_t *)a3 = v62;
          a3[2] = v63;
          if ((int)v16 >= 1)
          {
            v124 = (int)v15;
            v125 = (float64x2_t *)(a3 + 3);
            v126 = 5;
            do
            {
              v63 = v63 + a2->f32[v124 + 2] - a2->f32[2];
              v127 = vcvtq_f64_f32(*(float32x2_t *)&a2->f32[v124]);
              v128 = *(float32x2_t *)a2->f32;
              a2 = (float32x4_t *)((char *)a2 + 12);
              v62 = vaddq_f64(v62, vsubq_f64(v127, vcvtq_f64_f32(v128)));
              *v125 = v62;
              v125 = (float64x2_t *)((char *)v125 + 24);
              a3[v126] = v63;
              v129 = v126 - 2;
              v126 += 3;
            }
            while (v129 < v16);
          }
          return result;
        }
      }
      else
      {
        v61 = 0;
        v62 = 0uLL;
        v63 = 0.0;
      }
      v122 = &a2->f32[v61 + 2];
      do
      {
        v62 = vaddq_f64(v62, vcvtq_f64_f32(*(float32x2_t *)(v122 - 2)));
        v123 = *v122;
        v122 += 3;
        v63 = v63 + v123;
        v61 += 3;
      }
      while (v61 < v15);
      goto LABEL_71;
    }
    if ((int)v15 < 1)
    {
      v60 = 0.0;
      goto LABEL_62;
    }
    if (v15 >= 8)
    {
      v59 = v15 & 0x7FFFFFF8;
      v95 = a2 + 1;
      v60 = 0.0;
      v96 = v15 & 0xFFFFFFF8;
      do
      {
        v97 = v95[-1];
        v98 = vcvt_hight_f64_f32(v97);
        v99 = vcvtq_f64_f32(*(float32x2_t *)v97.f32);
        v100 = vcvt_hight_f64_f32(*v95);
        v101 = vcvtq_f64_f32(*(float32x2_t *)v95->f32);
        v60 = v60
            + v99.f64[0]
            + v99.f64[1]
            + v98.f64[0]
            + v98.f64[1]
            + v101.f64[0]
            + v101.f64[1]
            + v100.f64[0]
            + v100.f64[1];
        v95 += 2;
        v96 -= 8;
      }
      while (v96);
      if (v59 == v15)
      {
LABEL_62:
        *a3 = v60;
        if ((int)v16 >= 1)
        {
          v105 = a3 + 1;
          do
          {
            v106 = a2->f32[(int)v15];
            v107 = a2->f32[0];
            a2 = (float32x4_t *)((char *)a2 + 4);
            v60 = v60 + v106 - v107;
            *v105++ = v60;
            --v16;
          }
          while (v16);
        }
        return result;
      }
    }
    else
    {
      v59 = 0;
      v60 = 0.0;
    }
    v102 = &a2->f32[v59];
    v103 = v15 - v59;
    do
    {
      v104 = *v102++;
      v60 = v60 + v104;
      --v103;
    }
    while (v103);
    goto LABEL_62;
  }
  v6 = (a5 * a4);
  if ((int)v6 < 1)
    return result;
  v7 = a5;
  v8 = 2 * a5;
  v9 = 3 * a5;
  v10 = a5;
  if (v6 < 4)
  {
    v11 = 0;
LABEL_18:
    v34 = 0;
    v35 = &a2->i8[4 * v11 + 1 * v10];
    v36 = &a2->i8[4 * v11 + 4 * v9];
    v37 = &a2->i8[4 * v11 + 4 * v8];
    v38 = &a2->i8[4 * v11 + 4 * v7];
    v39 = &a3[v11];
    v40 = v6 - v11;
    v41 = &a2->i8[4 * v11];
    do
    {
      v39[v34] = *(float *)&v41[4 * v34]
               + *(float *)&v38[4 * v34]
               + *(float *)&v37[4 * v34]
               + *(float *)&v36[4 * v34]
               + *(float *)&v35[4 * v34];
      ++v34;
    }
    while (v40 != v34);
    return result;
  }
  v11 = v6 & 0x7FFFFFFC;
  result = v6 & 0xFFFFFFFC;
  v22 = (float64x2_t *)a3;
  v23 = a2;
  do
  {
    v24 = *(float32x4_t *)((char *)v23 + 4 * v7);
    v25 = vaddq_f64(vcvt_hight_f64_f32(*v23), vcvt_hight_f64_f32(v24));
    v26 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v23->f32), vcvtq_f64_f32(*(float32x2_t *)v24.f32));
    v27 = *(float32x4_t *)((char *)v23 + 4 * v8);
    v28 = vaddq_f64(v26, vcvtq_f64_f32(*(float32x2_t *)v27.f32));
    v29 = vaddq_f64(v25, vcvt_hight_f64_f32(v27));
    v30 = *(float32x4_t *)((char *)v23 + 4 * v9);
    v31 = vaddq_f64(v29, vcvt_hight_f64_f32(v30));
    v32 = vaddq_f64(v28, vcvtq_f64_f32(*(float32x2_t *)v30.f32));
    v33 = v23[v10];
    *v22 = vaddq_f64(v32, vcvtq_f64_f32(*(float32x2_t *)v33.f32));
    v22[1] = vaddq_f64(v31, vcvt_hight_f64_f32(v33));
    v22 += 2;
    ++v23;
    result -= 4;
  }
  while (result);
  if (v11 != v6)
    goto LABEL_18;
  return result;
}

void sub_10034D35C()
{
  operator delete();
}

uint64_t sub_10034D370(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_10034D3B0(uint64_t a1)
{
  nullsub_1(a1);
  operator delete();
}

float64x2_t sub_10034D3D4(uint64_t a1, _OWORD *a2, float64x2_t *a3, int a4, int a5, float64x2_t result)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float64x2_t v19;
  int64_t v20;
  uint64_t v21;
  float64x2_t *v22;
  float64x2_t *v23;
  uint64_t v24;
  float64x2_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  float64x2_t *v30;
  float64x2_t *v31;
  uint64_t v32;
  float64x2_t v33;
  double *v34;
  float64_t *v35;
  double *v36;
  uint64_t v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  unint64_t v45;
  double v46;
  int v47;
  float64x2_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  float64x2_t *v53;
  uint64_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t *v59;
  unint64_t v60;
  float64x2_t *v61;
  uint64_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double *v67;
  uint64_t v68;
  double *v69;
  uint64_t v70;
  double v71;
  float64_t *v72;
  double v73;
  double v74;
  uint64_t v75;
  float64x2_t *v76;
  uint64_t v77;
  float64x2_t v78;
  float64x2_t v79;
  double *v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 == 3)
  {
    v13 = (a5 * a4);
    if ((int)v13 < 1)
      return result;
    v14 = a5;
    if (v13 >= 0xA)
    {
      v15 = 0;
      if ((unint64_t)((char *)a3 - (char *)a2 - 4 * v14) >= 0x20
        && (unint64_t)((char *)a3 - (char *)a2 - 8 * a5) >= 0x20
        && (unint64_t)((char *)a3 - (char *)a2) >= 0x20)
      {
        v15 = v13 & 0x7FFFFFFC;
        v30 = (float64x2_t *)(a2 + 1);
        v31 = a3 + 1;
        v32 = v13 & 0xFFFFFFFC;
        do
        {
          result = vaddq_f64(vaddq_f64(v30[-1], *(float64x2_t *)((char *)v30 + 8 * a5 - 16)), v30[v14 - 1]);
          v33 = vaddq_f64(vaddq_f64(*v30, *(float64x2_t *)((char *)v30 + 8 * a5)), v30[v14]);
          v31[-1] = result;
          *v31 = v33;
          v30 += 2;
          v31 += 2;
          v32 -= 4;
        }
        while (v32);
        if (v15 == v13)
          return result;
      }
    }
    else
    {
      v15 = 0;
    }
    v34 = (double *)a2 + v15 + v14 * 2;
    v35 = &a3->f64[v15];
    v36 = (double *)a2 + v15;
    v37 = v13 - v15;
    v38 = (double *)a2 + v15 + a5;
    do
    {
      v39 = *v36++;
      v40 = v39;
      v41 = *v38++;
      v42 = v40 + v41;
      v43 = *v34++;
      result.f64[0] = v42 + v43;
      *v35++ = result.f64[0];
      --v37;
    }
    while (v37);
    return result;
  }
  if (v6 != 5)
  {
    v16 = (v6 * a5);
    v17 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v16 < 1)
          {
            result = 0uLL;
            v19 = 0uLL;
            goto LABEL_61;
          }
          if (v16 >= 5)
          {
            v52 = ((v16 - 1) >> 2) + 1;
            v18 = 4 * (v52 & 0x7FFFFFFFFFFFFFFELL);
            v53 = (float64x2_t *)(a2 + 2);
            result = 0uLL;
            v54 = v52 & 0x7FFFFFFFFFFFFFFELL;
            v19 = 0uLL;
            do
            {
              v55 = v53[-2];
              v56 = vaddq_f64(v19, v53[-1]);
              v58 = *v53;
              v57 = v53[1];
              v53 += 4;
              v19 = vaddq_f64(v56, v57);
              result = vaddq_f64(vaddq_f64(result, v55), v58);
              v54 -= 2;
            }
            while (v54);
            if (v52 == (v52 & 0x7FFFFFFFFFFFFFFELL))
            {
LABEL_61:
              *a3 = result;
              a3[1] = v19;
              if ((int)v17 >= 1)
              {
                v60 = 0;
                v61 = a3 + 3;
                v62 = 8 * (int)v16;
                do
                {
                  v63 = *(float64x2_t *)((char *)a2 + v62);
                  v64 = *(float64x2_t *)((char *)a2 + v62 + 16);
                  v65 = *(float64x2_t *)a2;
                  v66 = *((float64x2_t *)a2 + 1);
                  a2 += 2;
                  result = vaddq_f64(result, vsubq_f64(v63, v65));
                  v60 += 4;
                  v19 = vaddq_f64(v19, vsubq_f64(v64, v66));
                  v61[-1] = result;
                  *v61 = v19;
                  v61 += 2;
                }
                while (v60 < v17);
              }
              return result;
            }
          }
          else
          {
            v18 = 0;
            result = 0uLL;
            v19 = 0uLL;
          }
          v59 = (float64x2_t *)&a2[v18 / 2 + 1];
          do
          {
            result = vaddq_f64(result, v59[-1]);
            v19 = vaddq_f64(v19, *v59);
            v18 += 4;
            v59 += 2;
          }
          while (v18 < v16);
          goto LABEL_61;
        }
        if (a5 < 1)
          return result;
        v47 = 0;
        v48 = (float64x2_t *)((char *)a3 + 8 * a5);
        while ((int)v16 < 1)
        {
          result.f64[0] = 0.0;
          a3->f64[0] = 0.0;
          if ((int)v17 >= 1)
            goto LABEL_50;
LABEL_43:
          ++v47;
          a2 = (_OWORD *)((char *)a2 + 8);
          a3 = (float64x2_t *)((char *)a3 + 8);
          v48 = (float64x2_t *)((char *)v48 + 8);
          if (v47 == a5)
            return result;
        }
        v49 = 0;
        result.f64[0] = 0.0;
        do
        {
          result.f64[0] = result.f64[0] + *((double *)a2 + v49);
          v49 += a5;
        }
        while (v49 < (int)v16);
        a3->f64[0] = result.f64[0];
        if ((int)v17 < 1)
          goto LABEL_43;
LABEL_50:
        v50 = 0;
        do
        {
          v51 = v50;
          result.f64[0] = result.f64[0] + *((double *)a2 + (int)v16 + v50) - *((double *)a2 + v50);
          v50 += a5;
          v48->f64[v51] = result.f64[0];
        }
        while (v50 < (int)v17);
        goto LABEL_43;
      }
      if ((int)v16 < 1)
      {
        result = 0uLL;
        v46 = 0.0;
        goto LABEL_79;
      }
      if (v16 >= 4)
      {
        v75 = ((int)v16 - 1) / 3u + 1;
        v45 = 3 * (v75 & 0x7FFFFFFE);
        v76 = (float64x2_t *)((char *)a2 + 24);
        result = 0uLL;
        v46 = 0.0;
        v77 = v75 & 0x7FFFFFFE;
        do
        {
          v46 = v46 + v76[-1].f64[1] + v76[1].f64[0];
          v78 = *(float64x2_t *)((char *)v76 - 24);
          v79 = *v76;
          v76 += 3;
          result = vaddq_f64(vaddq_f64(result, v78), v79);
          v77 -= 2;
        }
        while (v77);
        if ((v75 & 0x7FFFFFFE) == v75)
        {
LABEL_79:
          *a3 = result;
          a3[1].f64[0] = v46;
          if ((int)v17 >= 1)
          {
            v82 = 0;
            v83 = 5;
            v84 = (char *)a2 + 8 * (int)v16;
            do
            {
              v46 = v46 + *(double *)&v84[v82 + 16] - *(double *)((char *)a2 + v82 + 16);
              result = vaddq_f64(result, vsubq_f64(*(float64x2_t *)&v84[v82], *(float64x2_t *)((char *)a2 + v82)));
              *(float64x2_t *)((char *)a3 + v82 + 24) = result;
              a3->f64[v83] = v46;
              v85 = v83 - 2;
              v83 += 3;
              v82 += 24;
            }
            while (v85 < v17);
          }
          return result;
        }
      }
      else
      {
        v45 = 0;
        result = 0uLL;
        v46 = 0.0;
      }
      v80 = (double *)a2 + v45 + 2;
      do
      {
        result = vaddq_f64(result, *(float64x2_t *)(v80 - 2));
        v81 = *v80;
        v80 += 3;
        v46 = v46 + v81;
        v45 += 3;
      }
      while (v45 < v16);
      goto LABEL_79;
    }
    if ((int)v16 < 1)
    {
      result.f64[0] = 0.0;
      goto LABEL_70;
    }
    if ((_DWORD)v16 == 1)
    {
      v44 = 0;
      result.f64[0] = 0.0;
    }
    else
    {
      v44 = v16 & 0xFFFFFFFE;
      v67 = (double *)a2 + 1;
      result.f64[0] = 0.0;
      v68 = v44;
      do
      {
        result.f64[0] = result.f64[0] + *(v67 - 1) + *v67;
        v67 += 2;
        v68 -= 2;
      }
      while (v68);
      if (v44 == v16)
      {
LABEL_70:
        a3->f64[0] = result.f64[0];
        if ((int)v17 >= 1)
        {
          v72 = &a3->f64[1];
          do
          {
            v73 = *((double *)a2 + (int)v16);
            v74 = *(double *)a2;
            a2 = (_OWORD *)((char *)a2 + 8);
            result.f64[0] = result.f64[0] + v73 - v74;
            *v72++ = result.f64[0];
            --v17;
          }
          while (v17);
        }
        return result;
      }
    }
    v69 = (double *)a2 + v44;
    v70 = v16 - v44;
    do
    {
      v71 = *v69++;
      result.f64[0] = result.f64[0] + v71;
      --v70;
    }
    while (v70);
    goto LABEL_70;
  }
  v7 = (a5 * a4);
  if ((int)v7 < 1)
    return result;
  v8 = a5;
  v9 = a5;
  v10 = 3 * a5;
  v11 = 2 * a5;
  if (v7 < 0xA)
  {
    v12 = 0;
LABEL_23:
    v26 = 0;
    v27 = (char *)a2 + 8 * v12 + 4 * v11;
    v28 = (char *)a2 + 8 * v12 + 8 * v10;
    v29 = v7 - v12;
    do
    {
      result.f64[0] = *((double *)a2 + v12 + v26)
                    + *((double *)a2 + v12 + v8 + v26)
                    + *((double *)a2 + v12 + v9 * 2 + v26)
                    + *(double *)&v28[8 * v26]
                    + *(double *)&v27[8 * v26];
      a3->f64[v12 + v26++] = result.f64[0];
    }
    while (v29 != v26);
    return result;
  }
  v12 = 0;
  v20 = (char *)a3 - (char *)a2;
  if ((unint64_t)((char *)a3 - (char *)a2 - 4 * v11) < 0x20)
    goto LABEL_23;
  if ((unint64_t)(v20 - 8 * v10) < 0x20)
    goto LABEL_23;
  if ((unint64_t)(v20 - 4 * v9) < 0x20)
    goto LABEL_23;
  v21 = 8 * a5;
  if ((unint64_t)(v20 - v21) < 0x20)
    goto LABEL_23;
  if ((unint64_t)((char *)a3 - (char *)a2) < 0x20)
    goto LABEL_23;
  v12 = v7 & 0x7FFFFFFC;
  v22 = (float64x2_t *)(a2 + 1);
  v23 = a3 + 1;
  v24 = v7 & 0xFFFFFFFC;
  do
  {
    result = vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v22[-1], *(float64x2_t *)((char *)v22 + v21 - 16)), v22[v9 - 1]), *(float64x2_t *)((char *)v22 + 8 * v10 - 16)), v22[v11 - 1]);
    v25 = vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(*v22, *(float64x2_t *)((char *)v22 + 8 * v8)), v22[v9]), *(float64x2_t *)((char *)v22 + 8 * v10)), v22[v11]);
    v23[-1] = result;
    *v23 = v25;
    v22 += 2;
    v23 += 2;
    v24 -= 4;
  }
  while (v24);
  if (v12 != v7)
    goto LABEL_23;
  return result;
}

void sub_10034D9CC()
{
  operator delete();
}

uint64_t sub_10034D9E0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10034DA1C(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454558;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return nullsub_1(a1);
}

void sub_10034DA58(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454558;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);
  operator delete();
}

void sub_10034DAA8(uint64_t a1, int32x4_t **a2, uint64_t a3, int a4, int a5, int a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  int v13;
  int32x4_t **v16;
  uint64_t v17;
  int32x4_t *v18;
  int32x4_t **v19;
  double v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int32x4_t *v32;
  int v33;
  int32x4_t *v34;
  int32x4_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x4_t *v39;
  int32x4_t *v40;
  int32x4_t *v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  int8x16_t v48;
  int8x16_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  int32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  int v57;
  __int128 v58;
  int v59;
  __int128 v60;
  int v61;
  __int128 v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  __int32 *v66;
  __int32 *v67;
  int v68;
  double v69;
  int v70;
  int v71;
  int32x4_t *v72;
  uint64_t v73;
  uint64_t v74;
  __int32 *v75;
  int32x4_t v76;
  uint64_t v77;
  int v78;
  int32x4_t *v79;
  int32x4_t *v80;
  uint64_t v81;
  uint64_t v82;
  int32x4_t *v83;
  int32x4_t *v84;
  int32x4_t *v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  unint64_t v89;
  uint64_t v90;
  int32x4_t **v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  __int32 *v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  BOOL v100;
  BOOL v102;
  BOOL v104;
  BOOL v106;
  unint64_t v108;
  int32x4_t *v109;
  int32x4_t *v110;
  int32x4_t *v111;
  uint64_t v112;
  unint64_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  unint64_t v121;
  uint64_t v122;
  int32x4_t *v123;
  int32x4_t *v124;
  int32x4_t *v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  int32x4_t *v141;
  uint64_t i64;
  int32x4_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int32x4_t *v147;
  int32x4_t *v148;
  uint64_t v149;
  uint64_t v150;
  int32x4_t *v151;
  uint64_t v152;
  unint64_t v153;
  int32x4_t v154;
  __int128 v155;
  int8x16_t v156;
  __int128 v157;
  int8x16_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t *v175;
  int32x4_t *v176;
  int32x4_t *v177;
  int32x4_t *v178;
  int32x4_t *v179;
  int32x4_t *v180;
  int32x4_t *v181;
  int32x4_t *v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int32x4_t *v187;
  int32x4_t *v188;
  int32x4_t *v189;
  int32x4_t *v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __n128 v194;
  int v195;
  uint64_t v196;
  int32x4_t **v197;
  uint64_t v199[3];
  int8x16x2_t v200;
  int8x16x4_t v201;

  v13 = a6;
  v16 = a2;
  v17 = a1;
  v19 = (int32x4_t **)(a1 + 32);
  v18 = *(int32x4_t **)(a1 + 32);
  v20 = *(double *)(a1 + 16);
  v21 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v18) >> 2;
  if ((_DWORD)v21 == a6)
  {
    v22 = *(_DWORD *)(a1 + 24);
    if (v22)
    {
      v23 = *(_DWORD *)(a1 + 8) - 1;
      if (v22 != v23)
      {
        v199[0] = 0;
        v199[1] = 0;
        v24 = sub_10029430C(v199, 19);
        *(_DWORD *)(v24 + 15) = 825058682;
        *(_OWORD *)v24 = *(_OWORD *)"sumCount == ksize-1";
        sub_100294B74(-215, v199, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 337);
      }
      v16 = &a2[v23];
      goto LABEL_18;
    }
  }
  else
  {
    if (a6 <= v21)
    {
      if (a6 < v21)
        *(_QWORD *)(a1 + 40) = (char *)v18 + 4 * a6;
    }
    else
    {
      sub_100223D9C(a1 + 32, a6 - v21);
      v18 = *v19;
    }
    *(_DWORD *)(v17 + 24) = 0;
  }
  bzero(v18, 4 * v13);
  v25 = *(_DWORD *)(v17 + 24);
  v26 = *(_DWORD *)(v17 + 8) - 1;
  if (v25 < v26)
  {
    v27 = (v13 - 4);
    if (v13 >= 4)
    {
      if ((v27 & 0xFFFFFFFC) + 5 <= v13)
        v134 = v13;
      else
        v134 = (v27 & 0xFFFFFFFC) + 5;
      v135 = 4 * v134 - ((4 * (v13 - 4)) & 0x3FFFFFFF0);
      v136 = v134 - (v27 & 0xFFFFFFFC) - 4;
      v137 = v136 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v139 = 0;
        v140 = 0;
        v141 = *v16;
        i64 = (uint64_t)(*v16)[2].i64;
        v143 = v18 + 2;
        v144 = 4;
        do
        {
          v145 = v144;
          v146 = v139;
          v147 = (int32x4_t *)i64;
          v148 = v143;
          v18[v140 / 4] = vaddq_s32(v141[v140 / 4], v18[v140 / 4]);
          v140 += 4;
          v144 += 4;
          ++v139;
          i64 += 16;
          ++v143;
        }
        while (v140 <= v27);
        if ((int)v140 < v13)
        {
          if (v136 < 8)
            goto LABEL_127;
          v149 = 16 * v146;
          v150 = v149 + 16;
          v151 = &v18[(unint64_t)v149 / 0x10 + 1];
          v152 = v135 + v149;
          if (v151 < (int32x4_t *)&v141->i8[v152] && &v141->i8[v150] < &v18->i8[v152])
            goto LABEL_127;
          v145 += v137;
          v153 = v136 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v154 = vaddq_s32(*v148, *v147);
            v148[-1] = vaddq_s32(v148[-1], v147[-1]);
            *v148 = v154;
            v147 += 2;
            v148 += 2;
            v153 -= 8;
          }
          while (v153);
          if (v136 != v137)
          {
LABEL_127:
            do
            {
              v18->i32[v145] += v141->i32[v145];
              ++v145;
            }
            while (v145 < v13);
          }
        }
        v138 = *(_DWORD *)(v17 + 24) + 1;
        *(_DWORD *)(v17 + 24) = v138;
        ++v16;
      }
      while (v138 < *(_DWORD *)(v17 + 8) - 1);
    }
    else if (v13 >= 1)
    {
      do
      {
        v72 = *v16;
        v18->i32[0] += (*v16)->i32[0];
        if (v13 != 1)
        {
          v18->i32[1] += v72->i32[1];
          if (v13 != 2)
            v18->i32[2] += v72->i32[2];
        }
        v71 = *(_DWORD *)(v17 + 24) + 1;
        *(_DWORD *)(v17 + 24) = v71;
        ++v16;
      }
      while (v71 < *(_DWORD *)(v17 + 8) - 1);
    }
    else
    {
      if (v26 <= v25 + 1)
        v28 = v25 + 1;
      else
        v28 = *(_DWORD *)(v17 + 8) - 1;
      v16 += (v28 + ~v25) + 1;
      *(_DWORD *)(v17 + 24) = v28;
    }
  }
LABEL_18:
  if (a5)
  {
    v29 = a5 - 1;
    v30 = v13 - 8;
    a13.n128_f32[0] = v20;
    v31 = a4;
    v196 = v17;
    if (v20 != 1.0)
    {
      v32 = v18 + 1;
      v195 = v13;
      while (1)
      {
        v33 = v29;
        v34 = *v16;
        v35 = v16[1 - *(int *)(v17 + 8)];
        if (v13 >= 8)
          break;
        v36 = 0;
        v37 = a3;
        if (v13 > 0)
          goto LABEL_41;
LABEL_21:
        a3 = v37 + a4;
        ++v16;
        v29 = v33 - 1;
        if (!v33)
          return;
      }
      v197 = v16;
      v38 = 0;
      v39 = v34 + 1;
      v40 = v35 + 1;
      v41 = v32;
      v37 = a3;
      do
      {
        v42 = v41[-1];
        v43 = *v41;
        v44 = v39[-1];
        v45 = *v39;
        v46 = atomic_load((unsigned __int8 *)qword_10048AA00);
        if ((v46 & 1) == 0)
        {
          v191 = a13;
          v187 = v32;
          v183 = v33;
          v175 = v34;
          v179 = v35;
          v167 = v39[-1];
          v171 = v41[-1];
          v159 = *v39;
          v163 = *v41;
          v57 = __cxa_guard_acquire(qword_10048AA00);
          v45 = v159;
          v43 = v163;
          v44 = v167;
          v42 = v171;
          v34 = v175;
          v35 = v179;
          v33 = v183;
          *(_QWORD *)&v58 = 0x8000000080000000;
          *((_QWORD *)&v58 + 1) = 0x8000000080000000;
          v32 = v187;
          a13 = v191;
          v37 = a3;
          if (v57)
          {
            xmmword_10048A9F0 = v58;
            __cxa_guard_release(qword_10048AA00);
            v45 = v159;
            v43 = v163;
            v44 = v167;
            v42 = v171;
            v34 = v175;
            v35 = v179;
            v33 = v183;
            v32 = v187;
            a13 = v191;
            v37 = a3;
          }
        }
        v47 = atomic_load((unsigned __int8 *)qword_10048AA20);
        if ((v47 & 1) == 0)
        {
          v192 = a13;
          v188 = v32;
          v184 = v33;
          v176 = v34;
          v180 = v35;
          v168 = v44;
          v172 = v42;
          v160 = v45;
          v164 = v43;
          v59 = __cxa_guard_acquire(qword_10048AA20);
          v45 = v160;
          v43 = v164;
          v44 = v168;
          v42 = v172;
          v34 = v176;
          v35 = v180;
          v33 = v184;
          *(_QWORD *)&v60 = 0x3F0000003F000000;
          *((_QWORD *)&v60 + 1) = 0x3F0000003F000000;
          v32 = v188;
          a13 = v192;
          v37 = a3;
          if (v59)
          {
            xmmword_10048AA10 = v60;
            __cxa_guard_release(qword_10048AA20);
            v45 = v160;
            v43 = v164;
            v44 = v168;
            v42 = v172;
            v34 = v176;
            v35 = v180;
            v33 = v184;
            v32 = v188;
            a13 = v192;
            v37 = a3;
          }
        }
        v48 = (int8x16_t)xmmword_10048AA10;
        v49 = (int8x16_t)xmmword_10048A9F0;
        v50 = atomic_load((unsigned __int8 *)qword_10048AA00);
        if ((v50 & 1) == 0)
        {
          v193 = a13;
          v189 = v32;
          v185 = v33;
          v177 = v34;
          v181 = v35;
          v169 = v44;
          v173 = v42;
          v161 = v45;
          v165 = v43;
          v155 = xmmword_10048A9F0;
          v157 = xmmword_10048AA10;
          v61 = __cxa_guard_acquire(qword_10048AA00);
          v49 = (int8x16_t)v155;
          v48 = (int8x16_t)v157;
          v45 = v161;
          v43 = v165;
          v44 = v169;
          v42 = v173;
          v34 = v177;
          v35 = v181;
          v33 = v185;
          *(_QWORD *)&v62 = 0x8000000080000000;
          *((_QWORD *)&v62 + 1) = 0x8000000080000000;
          v32 = v189;
          a13 = v193;
          v37 = a3;
          if (v61)
          {
            xmmword_10048A9F0 = v62;
            __cxa_guard_release(qword_10048AA00);
            v49 = (int8x16_t)v155;
            v48 = (int8x16_t)v157;
            v45 = v161;
            v43 = v165;
            v44 = v169;
            v42 = v173;
            v34 = v177;
            v35 = v181;
            v33 = v185;
            v32 = v189;
            a13 = v193;
            v37 = a3;
          }
        }
        v51 = atomic_load((unsigned __int8 *)qword_10048AA20);
        if ((v51 & 1) == 0)
        {
          v194 = a13;
          v190 = v32;
          v186 = v33;
          v178 = v34;
          v182 = v35;
          v170 = v44;
          v174 = v42;
          v162 = v45;
          v166 = v43;
          v156 = v49;
          v158 = v48;
          v63 = __cxa_guard_acquire(qword_10048AA20);
          v49 = v156;
          v48 = v158;
          v45 = v162;
          v43 = v166;
          v44 = v170;
          v42 = v174;
          v34 = v178;
          v35 = v182;
          v33 = v186;
          *(_QWORD *)&v64 = 0x3F0000003F000000;
          *((_QWORD *)&v64 + 1) = 0x3F0000003F000000;
          v32 = v190;
          a13 = v194;
          v37 = a3;
          if (v63)
          {
            xmmword_10048AA10 = v64;
            __cxa_guard_release(qword_10048AA20);
            v49 = v156;
            v48 = v158;
            v45 = v162;
            v43 = v166;
            v44 = v170;
            v42 = v174;
            v34 = v178;
            v35 = v182;
            v33 = v186;
            v32 = v190;
            a13 = v194;
            v37 = a3;
          }
        }
        v52 = vaddq_s32(v44, v42);
        v53 = vaddq_s32(v45, v43);
        v54 = vmulq_n_f32(vcvtq_f32_s32(v52), a13.n128_f32[0]);
        v55 = vmulq_n_f32(vcvtq_f32_s32(v53), a13.n128_f32[0]);
        *(uint8x8_t *)(v37 + v38) = vqmovn_u16(vqmovn_high_u32(vqmovn_u32((uint32x4_t)vcvtq_s32_f32(vaddq_f32(v54, (float32x4_t)vorrq_s8(vandq_s8(v49, (int8x16_t)v54), v48)))), (uint32x4_t)vcvtq_s32_f32(vaddq_f32(v55, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)xmmword_10048A9F0, (int8x16_t)v55), (int8x16_t)xmmword_10048AA10)))));
        v41[-1] = vsubq_s32(v52, v40[-1]);
        v56 = *v40;
        v40 += 2;
        v38 += 8;
        *v41 = vsubq_s32(v53, v56);
        v41 += 2;
        v39 += 2;
      }
      while (v30 >= (int)v38);
      v36 = v38;
      v13 = v195;
      v17 = v196;
      v16 = v197;
      if ((int)v36 >= v195)
        goto LABEL_21;
LABEL_41:
      v65 = 0;
      v66 = &v18->i32[v36];
      v67 = &v34->i32[v36];
      do
      {
        v68 = v67[v65] + v66[v65];
        v69 = rint(v20 * (double)v68);
        v70 = (uint64_t)v69 & ~((int)(uint64_t)v69 >> 31);
        if (v70 >= 255)
          LOBYTE(v70) = -1;
        *(_BYTE *)(v37 + v36 + v65) = v70;
        v66[v65] = v68 - v35->i32[v36 + v65];
        ++v65;
      }
      while ((int)v36 + (int)v65 < v13);
      goto LABEL_21;
    }
    v73 = 0;
    v74 = v13;
    v75 = &v18->i32[v74];
    v76.i64[0] = 0xFF000000FFLL;
    v76.i64[1] = 0xFF000000FFLL;
    v77 = a3;
    do
    {
      v78 = v29;
      v79 = *v16;
      v80 = v16[1 - *(int *)(v17 + 8)];
      if (v13 >= 8)
      {
        v82 = 0;
        v83 = v80 + 1;
        v84 = v79 + 1;
        v85 = v18 + 1;
        do
        {
          v86 = vaddq_s32(v84[-1], v85[-1]);
          v87 = vaddq_s32(*v84, *v85);
          *(uint8x8_t *)(v77 + v82) = vqmovn_u16(vqmovn_high_u32(vqmovn_u32((uint32x4_t)v86), (uint32x4_t)v87));
          v85[-1] = vsubq_s32(v86, v83[-1]);
          v88 = *v83;
          v83 += 2;
          v82 += 8;
          *v85 = vsubq_s32(v87, v88);
          v85 += 2;
          v84 += 2;
        }
        while (v82 <= v30);
        v81 = v82;
        if ((int)v82 >= v13)
          goto LABEL_51;
      }
      else
      {
        v81 = 0;
        if (v13 <= 0)
          goto LABEL_51;
      }
      v89 = v13 - v81;
      if (v89 < 8)
      {
        v90 = v81;
        goto LABEL_104;
      }
      v91 = v16;
      v92 = a3 + v13 + v73 * v31;
      v93 = v77 + v81;
      v94 = 4 * v81;
      v95 = &v18->i32[v81];
      v96 = &v79->i8[4 * v81];
      v97 = (unint64_t)v80 + 4 * v81;
      v98 = (unint64_t)v80->u64 + v74 * 4;
      v100 = v77 + v81 < (unint64_t)v79->u64 + v74 * 4 && (unint64_t)v96 < v92;
      v102 = v93 < v98 && v97 < v92;
      v104 = v95 < &v79->i32[v74] && v96 < (char *)v75;
      v106 = (unint64_t)v95 < v98 && v97 < (unint64_t)v75;
      if ((unint64_t)v95 < v92 && v93 < (unint64_t)v75)
      {
        v90 = v81;
        v17 = v196;
        v16 = v91;
        goto LABEL_104;
      }
      v17 = v196;
      if (v100 || v102 || v104 || v106)
      {
        v90 = v81;
        v16 = v91;
        goto LABEL_104;
      }
      if (v89 >= 0x10)
      {
        v108 = v89 & 0xFFFFFFFFFFFFFFF0;
        v109 = (int32x4_t *)((char *)v18 + v94);
        v110 = (int32x4_t *)((char *)v79 + v94);
        v111 = (int32x4_t *)((char *)v80 + v94);
        v112 = v81;
        v113 = v89 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v114 = vaddq_s32(v110[3], v109[3]);
          v115 = vaddq_s32(v110[2], v109[2]);
          v116 = vaddq_s32(v110[1], v109[1]);
          v117 = vaddq_s32(*v110, *v109);
          v201.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(v114, (int32x4_t)0), v76);
          v201.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(v115, (int32x4_t)0), v76);
          v201.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(v116, (int32x4_t)0), v76);
          v201.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(v117, (int32x4_t)0), v76);
          *(int8x16_t *)(v77 + v112) = vqtbl4q_s8(v201, (int8x16_t)xmmword_1003BC960);
          v118 = v111[2];
          v119 = v111[3];
          v120 = *v111;
          v201.val[0] = (int8x16_t)v111[1];
          v111 += 4;
          v109[2] = vsubq_s32(v115, v118);
          v109[3] = vsubq_s32(v114, v119);
          *v109 = vsubq_s32(v117, v120);
          v109[1] = vsubq_s32(v116, (int32x4_t)v201.val[0]);
          v109 += 4;
          v110 += 4;
          v112 += 16;
          v113 -= 16;
        }
        while (v113);
        v16 = v91;
        if (v89 == v108)
          goto LABEL_51;
        if ((v89 & 8) == 0)
        {
          v90 = v108 + v81;
          v16 = v91;
          do
          {
LABEL_104:
            v132 = v79->i32[v90] + v18->i32[v90];
            v133 = v132 & ~(v132 >> 31);
            if (v133 >= 255)
              LOBYTE(v133) = -1;
            *(_BYTE *)(v77 + v90) = v133;
            v18->i32[v90] = v132 - v80->i32[v90];
            ++v90;
          }
          while (v13 != v90);
          goto LABEL_51;
        }
      }
      else
      {
        v108 = 0;
      }
      v90 = (v89 & 0xFFFFFFFFFFFFFFF8) + v81;
      v121 = v108 - (v89 & 0xFFFFFFFFFFFFFFF8);
      v122 = v108 + v81;
      v123 = (int32x4_t *)((char *)v18 + 4 * v122);
      v124 = (int32x4_t *)((char *)v79 + 4 * v122);
      v125 = (int32x4_t *)((char *)v80 + 4 * v122);
      do
      {
        v126 = *v124;
        v127 = v124[1];
        v124 += 2;
        v128 = vaddq_s32(v127, v123[1]);
        v129 = vaddq_s32(v126, *v123);
        v200.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(v128, (int32x4_t)0), v76);
        v200.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(v129, (int32x4_t)0), v76);
        *(_QWORD *)(v77 + v122) = vqtbl2q_s8(v200, (int8x16_t)xmmword_1003BC970).u64[0];
        v130 = *v125;
        v131 = v125[1];
        v125 += 2;
        *v123 = vsubq_s32(v129, v130);
        v123[1] = vsubq_s32(v128, v131);
        v123 += 2;
        v122 += 8;
        v121 += 8;
      }
      while (v121);
      v16 = v91;
      if (v89 != (v89 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_104;
LABEL_51:
      v77 += v31;
      ++v16;
      v29 = v78 - 1;
      ++v73;
    }
    while (v78);
  }
}

void sub_10034E4F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029434C((uint64_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_10034E508(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10034E514()
{
  operator delete();
}

uint64_t sub_10034E528(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10034E564(_QWORD *a1)
{
  void *v2;

  *a1 = off_1004545E0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return nullsub_1(a1);
}

void sub_10034E5A0(_QWORD *a1)
{
  void *v2;

  *a1 = off_1004545E0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);
  operator delete();
}

void sub_10034E5F0(uint64_t a1, unsigned __int16 **a2, unint64_t a3, int a4, int a5, int a6)
{
  int v7;
  unsigned __int16 **v9;
  int16x8_t *v11;
  int16x8_t **v12;
  unsigned int v13;
  unsigned int v14;
  double v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  uint16x8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint16x8_t *v33;
  uint64_t v34;
  int16x8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int16x8_t *v39;
  int16x8_t *v40;
  uint64_t v41;
  uint64_t v42;
  int16x8_t *v43;
  uint64_t v44;
  unint64_t v45;
  int16x8_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int32x4_t v50;
  uint16x8_t v51;
  uint64_t v52;
  __int16 *v53;
  int32x4_t v54;
  unint64_t v55;
  int v56;
  int16x8_t *v57;
  int16x8_t *v58;
  uint64_t v59;
  uint64_t v60;
  int16x8_t *v61;
  int16x8_t *v62;
  int16x8_t *v63;
  int16x8_t v64;
  int16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  __int16 *v75;
  char *v76;
  char *v77;
  __int16 *v78;
  BOOL v79;
  char v80;
  BOOL v82;
  BOOL v84;
  BOOL v86;
  unint64_t v88;
  uint16x8_t *v89;
  uint16x8_t *v90;
  int16x8_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  unint64_t v103;
  uint64_t v104;
  uint16x4_t *v105;
  uint16x8_t *v106;
  int16x8_t *v107;
  uint16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int v112;
  unsigned __int16 **v113;
  _BYTE *v114;
  unsigned __int16 *v115;
  unsigned __int16 *v116;
  int v117;
  char v118;
  int v119;
  char v120;
  int v121;
  char v122;
  int v123;
  char v124;
  int v125;
  char v126;
  int v127;
  char v128;
  int v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int16 *v133;
  uint64_t v134;
  uint64_t v135;
  int32x4_t v136;
  unint64_t v137;
  uint64_t v138;
  uint16x8_t *v139;
  unsigned __int16 *v140;
  unint64_t v141;
  unsigned __int16 *v142;
  unint64_t v143;
  BOOL v145;
  BOOL v147;
  BOOL v149;
  BOOL v151;
  int v152;
  BOOL v153;
  uint64_t v154;
  uint16x4_t *v155;
  uint16x8_t *v156;
  int16x8_t *v157;
  uint16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  uint64_t v162;
  int16x8_t *v163;
  uint16x8_t *v164;
  int16x8_t *v165;
  uint16x8_t v166;
  uint16x8_t v167;
  uint16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int v175;
  char v176;
  uint64_t v178[2];
  int8x16x2_t v179;
  int8x16x2_t v180;
  int8x16x4_t v181;
  int8x16x4_t v182;

  v7 = a5;
  v9 = a2;
  v12 = (int16x8_t **)(a1 + 40);
  v11 = *(int16x8_t **)(a1 + 40);
  v14 = *(_DWORD *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 32);
  v15 = *(double *)(a1 + 16);
  v16 = (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v11) >> 1;
  if ((_DWORD)v16 == a6)
  {
    v17 = *(_DWORD *)(a1 + 24);
    if (v17)
    {
      v18 = *(_DWORD *)(a1 + 8) - 1;
      if (v17 != v18)
      {
        v178[0] = 0;
        v178[1] = 0;
        v19 = sub_10029430C(v178, 19);
        *(_DWORD *)(v19 + 15) = 825058682;
        *(_OWORD *)v19 = *(_OWORD *)"sumCount == ksize-1";
        sub_100294B74(-215, v178, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 485);
      }
      v9 = &a2[v18];
      if (!a5)
        return;
      goto LABEL_44;
    }
  }
  else
  {
    if (a6 <= v16)
    {
      if (a6 < v16)
        *(_QWORD *)(a1 + 48) = (char *)v11 + 2 * a6;
    }
    else
    {
      sub_10034F064(a1 + 40, a6 - v16);
      v11 = *v12;
    }
    *(_DWORD *)(a1 + 24) = 0;
  }
  bzero(v11, 2 * a6);
  v20 = *(_DWORD *)(a1 + 24);
  v21 = *(_DWORD *)(a1 + 8) - 1;
  if (v20 >= v21)
    goto LABEL_43;
  v22 = (a6 - 8);
  if (a6 >= 8)
  {
    if ((v22 & 0xFFFFFFF8) + 9 <= a6)
      v26 = a6;
    else
      v26 = (v22 & 0xFFFFFFF8) + 9;
    v27 = 2 * v26 - ((2 * (a6 - 8)) & 0x1FFFFFFF0);
    v28 = v26 - (v22 & 0xFFFFFFF8) - 8;
    v29 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v31 = 0;
      v32 = 0;
      v33 = (uint16x8_t *)*v9;
      v34 = (uint64_t)(*v9 + 16);
      v35 = v11 + 2;
      v36 = 8;
      do
      {
        v37 = v36;
        v38 = v31;
        v39 = (int16x8_t *)v34;
        v40 = v35;
        v11[v32 / 8] = (int16x8_t)vqaddq_u16((uint16x8_t)v11[v32 / 8], v33[v32 / 8]);
        v32 += 8;
        v36 += 8;
        ++v31;
        v34 += 16;
        ++v35;
      }
      while (v32 <= v22);
      if ((int)v32 < a6)
      {
        if (v28 < 0x10)
          goto LABEL_192;
        v41 = 16 * v38;
        v42 = v41 + 16;
        v43 = &v11[(unint64_t)v41 / 0x10 + 1];
        v44 = v27 + v41;
        if (v43 < (int16x8_t *)&v33->i8[v44] && &v33->i8[v42] < &v11->i8[v44])
          goto LABEL_192;
        v37 += v29;
        v45 = v28 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v46 = vaddq_s16(*v40, *v39);
          v40[-1] = vaddq_s16(v40[-1], v39[-1]);
          *v40 = v46;
          v39 += 2;
          v40 += 2;
          v45 -= 16;
        }
        while (v45);
        if (v28 != v29)
        {
LABEL_192:
          do
          {
            v11->i16[v37] += v33->i16[v37];
            ++v37;
          }
          while (v37 < a6);
        }
      }
      v30 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v30;
      ++v9;
    }
    while (v30 < *(_DWORD *)(a1 + 8) - 1);
LABEL_43:
    if (!v7)
      return;
    goto LABEL_44;
  }
  v23 = v20 + 1;
  if (a6 > 0)
  {
    v24 = v11->u16[0];
    do
    {
      v25 = (uint16x8_t *)*v9;
      v24 += **v9;
      v11->i16[0] = v24;
      if (a6 != 1)
      {
        v11->i16[1] += v25->i16[1];
        if (a6 != 2)
        {
          v11->i16[2] += v25->i16[2];
          if (a6 != 3)
          {
            v11->i16[3] += v25->i16[3];
            if (a6 != 4)
            {
              v11->i16[4] += v25->i16[4];
              if (a6 != 5)
              {
                v11->i16[5] += v25->i16[5];
                if (a6 != 6)
                  v11->i16[6] += v25->i16[6];
              }
            }
          }
        }
      }
      ++v20;
      ++v9;
    }
    while (v20 < v21);
    if (v21 > v23)
      v23 = v21;
    *(_DWORD *)(a1 + 24) = v23;
    goto LABEL_43;
  }
  if (v21 > v23)
    v23 = *(_DWORD *)(a1 + 8) - 1;
  v9 += (v23 + ~v20) + 1;
  *(_DWORD *)(a1 + 24) = v23;
  if (v7)
  {
LABEL_44:
    v47 = v7 - 1;
    v48 = a4;
    if (v15 != 1.0)
    {
      v49 = 0;
      v50 = vdupq_n_s32(v13);
      v51 = (uint16x8_t)vdupq_n_s16(v14);
      v52 = a6;
      v53 = &v11->i16[v52];
      v54 = vdupq_n_s32(v14);
      v55 = a3;
      while (1)
      {
        v56 = v47;
        v57 = (int16x8_t *)*v9;
        v58 = (int16x8_t *)v9[1 - *(int *)(a1 + 8)];
        if (a6 >= 16)
          break;
        v59 = 0;
        if (a6 > 0)
          goto LABEL_53;
LABEL_46:
        v55 += v48;
        ++v9;
        v47 = v56 - 1;
        ++v49;
        if (!v56)
          return;
      }
      v60 = 0;
      v61 = v58 + 1;
      v62 = v57 + 1;
      v63 = v11 + 1;
      do
      {
        v64 = vaddq_s16(v62[-1], v63[-1]);
        v65 = vaddq_s16(*v62, *v63);
        v66 = vqaddq_u16((uint16x8_t)v64, v51);
        v67 = vqaddq_u16((uint16x8_t)v65, v51);
        v68 = vsubq_s16(v64, v61[-1]);
        v69 = vsubq_s16(v65, *v61);
        *(int8x16_t *)(v55 + v60) = vqmovun_high_s16(vqmovun_s16(vqmovn_high_s32(vqmovn_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v50, (int32x4_t)vmovl_u16(*(uint16x4_t *)v66.i8)), 0x17uLL)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v50, (int32x4_t)vmovl_high_u16(v66)), 0x17uLL))), vqmovn_high_s32(vqmovn_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v50, (int32x4_t)vmovl_u16(*(uint16x4_t *)v67.i8)), 0x17uLL)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v50, (int32x4_t)vmovl_high_u16(v67)), 0x17uLL)));
        v60 += 16;
        v63[-1] = v68;
        *v63 = v69;
        v61 += 2;
        v63 += 2;
        v62 += 2;
      }
      while (v60 <= a6 - 16);
      v59 = v60;
      if ((int)v60 >= a6)
        goto LABEL_46;
LABEL_53:
      v70 = a6 - v59;
      if (v70 < 8)
      {
        v71 = v59;
        goto LABEL_103;
      }
      v72 = a3 + a6 + v49 * v48;
      v73 = v55 + v59;
      v74 = 2 * v59;
      v75 = &v11->i16[v59];
      v76 = &v57->i8[2 * v59];
      v77 = &v58->i8[2 * v59];
      v78 = &v58->i16[v52];
      v79 = v55 + v59 >= (unint64_t)v57->u64 + v52 * 2 || (unint64_t)v76 >= v72;
      v80 = !v79;
      v82 = v73 < (unint64_t)v78 && (unint64_t)v77 < v72;
      v84 = v75 < &v57->i16[v52] && v76 < (char *)v53;
      v86 = v75 < v78 && v77 < (char *)v53;
      if ((unint64_t)v75 < v72 && v73 < (unint64_t)v53)
      {
        v71 = v59;
        goto LABEL_103;
      }
      if ((v80 & 1) != 0)
      {
        v71 = v59;
      }
      else if (v82)
      {
        v71 = v59;
      }
      else if (v84)
      {
        v71 = v59;
      }
      else if (v86)
      {
        v71 = v59;
      }
      else
      {
        if (v70 < 0x10)
        {
          v88 = 0;
          goto LABEL_96;
        }
        v88 = v70 & 0xFFFFFFFFFFFFFFF0;
        v89 = (uint16x8_t *)&v11->i8[v74];
        v90 = (uint16x8_t *)&v57->i8[v74];
        v91 = (int16x8_t *)((char *)v58 + v74);
        v92 = v59;
        v93 = v70 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v94 = v89[1];
          v95 = *v90;
          v96 = v90[1];
          v90 += 2;
          v97 = (int16x8_t)vaddl_u16(*(uint16x4_t *)v95.i8, *(uint16x4_t *)v89->i8);
          v98 = (int16x8_t)vaddl_u16(*(uint16x4_t *)v96.i8, *(uint16x4_t *)v94.i8);
          v99 = (int16x8_t)vaddl_high_u16(v96, v94);
          v100 = (int16x8_t)vaddl_high_u16(v95, *v89);
          v182.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)v100, v54), v50), 0x17uLL);
          v182.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)v99, v54), v50), 0x17uLL);
          v182.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)v98, v54), v50), 0x17uLL);
          v182.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)v97, v54), v50), 0x17uLL);
          *(int8x16_t *)(v55 + v92) = vqtbl4q_s8(v182, (int8x16_t)xmmword_1003BC960);
          v101 = *v91;
          v102 = v91[1];
          v91 += 2;
          *(int16x8_t *)v89 = vsubq_s16(vuzp1q_s16(v97, v100), v101);
          v89[1] = (uint16x8_t)vsubq_s16(vuzp1q_s16(v98, v99), v102);
          v89 += 2;
          v92 += 16;
          v93 -= 16;
        }
        while (v93);
        if (v70 == v88)
          goto LABEL_46;
        if ((v70 & 8) != 0)
        {
LABEL_96:
          v71 = (v70 & 0xFFFFFFFFFFFFFFF8) + v59;
          v103 = v88 - (v70 & 0xFFFFFFFFFFFFFFF8);
          v104 = v88 + v59;
          v105 = (uint16x4_t *)((char *)v11 + 2 * v104);
          v106 = (uint16x8_t *)((char *)v57 + 2 * v104);
          v107 = (int16x8_t *)((char *)v58 + 2 * v104);
          do
          {
            v108 = *v106++;
            v109 = (int16x8_t)vaddl_u16(*(uint16x4_t *)v108.i8, *v105);
            v110 = (int16x8_t)vaddl_high_u16(v108, *(uint16x8_t *)v105->i8);
            v180.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)v110, v54), v50), 0x17uLL);
            v180.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)v109, v54), v50), 0x17uLL);
            *(_QWORD *)(v55 + v104) = vqtbl2q_s8(v180, (int8x16_t)xmmword_1003BC970).u64[0];
            v111 = *v107++;
            *(int16x8_t *)v105->i8 = vsubq_s16(vuzp1q_s16(v109, v110), v111);
            v105 += 2;
            v104 += 8;
            v103 += 8;
          }
          while (v103);
          if (v70 == (v70 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_46;
          goto LABEL_103;
        }
        v71 = v88 + v59;
      }
      do
      {
LABEL_103:
        v112 = v57->u16[v71] + v11->u16[v71];
        *(_BYTE *)(v55 + v71) = ((v112 + v14) * v13) >> 23;
        v11->i16[v71] = v112 - v58->i16[v71];
        ++v71;
      }
      while (a6 != v71);
      goto LABEL_46;
    }
    if (a6 < 1)
      return;
    if (a6 < 8)
    {
      v113 = v9 + 1;
      v114 = (_BYTE *)(a3 + 3);
      do
      {
        v115 = *(v113 - 1);
        v116 = v113[-*(int *)(a1 + 8)];
        v117 = *v115 + v11->u16[0];
        if (v117 >= 255)
          v118 = -1;
        else
          v118 = *v115 + v11->i16[0];
        *(v114 - 3) = v118;
        v11->i16[0] = v117 - *v116;
        if (a6 != 1)
        {
          v119 = v115[1] + v11->u16[1];
          v120 = v119 >= 255 ? -1 : v115[1] + v11->i16[1];
          *(v114 - 2) = v120;
          v11->i16[1] = v119 - v116[1];
          if (a6 != 2)
          {
            v121 = v115[2] + v11->u16[2];
            v122 = v121 >= 255 ? -1 : v115[2] + v11->i16[2];
            *(v114 - 1) = v122;
            v11->i16[2] = v121 - v116[2];
            if (a6 != 3)
            {
              v123 = v115[3] + v11->u16[3];
              v124 = v123 >= 255 ? -1 : v115[3] + v11->i16[3];
              *v114 = v124;
              v11->i16[3] = v123 - v116[3];
              if (a6 != 4)
              {
                v125 = v115[4] + v11->u16[4];
                v126 = v125 >= 255 ? -1 : v115[4] + v11->i16[4];
                v114[1] = v126;
                v11->i16[4] = v125 - v116[4];
                if (a6 != 5)
                {
                  v127 = v115[5] + v11->u16[5];
                  v128 = v127 >= 255 ? -1 : v115[5] + v11->i16[5];
                  v114[2] = v128;
                  v11->i16[5] = v127 - v116[5];
                  if (a6 != 6)
                  {
                    v129 = v115[6] + v11->u16[6];
                    if (v129 >= 255)
                      v130 = -1;
                    else
                      v130 = v129;
                    v114[3] = v130;
                    v11->i16[6] = v129 - v116[6];
                  }
                }
              }
            }
          }
        }
        ++v113;
        v114 += a4;
        --v7;
      }
      while (v7);
      return;
    }
    v131 = 0;
    v132 = a6;
    v133 = &v11->u16[v132];
    v134 = a6 & 0xFFFFFFF0;
    v135 = a6 & 0xFFFFFFF8;
    v136.i64[0] = 0xFF000000FFLL;
    v136.i64[1] = 0xFF000000FFLL;
    v137 = a3;
    do
    {
      v138 = 0;
      v139 = (uint16x8_t *)*v9;
      v140 = v9[1 - *(int *)(a1 + 8)];
      v141 = a3 + a6 + v131 * a4;
      v142 = &(*v9)[v132];
      v143 = (unint64_t)&v140[v132];
      v145 = v137 < (unint64_t)v142 && (unint64_t)v139 < v141;
      v147 = v137 < v143 && (unint64_t)v140 < v141;
      v149 = v11 < (int16x8_t *)v142 && v139 < (uint16x8_t *)v133;
      v151 = (unint64_t)v11 < v143 && v140 < v133;
      v79 = (unint64_t)v11 >= v141;
      v152 = v47;
      v153 = v79 || v137 >= (unint64_t)v133;
      if (!v153 || v145 || v147 || v149 || v151)
      {
        do
        {
LABEL_182:
          v175 = v139->u16[v138] + v11->u16[v138];
          if (v175 >= 255)
            v176 = -1;
          else
            v176 = v139->i16[v138] + v11->i16[v138];
          *(_BYTE *)(v137 + v138) = v176;
          v11->i16[v138] = v175 - v140[v138];
          ++v138;
        }
        while (a6 != v138);
        goto LABEL_138;
      }
      if (a6 >= 0x10)
      {
        v162 = 0;
        v163 = (int16x8_t *)v9[1 - *(int *)(a1 + 8)];
        v164 = (uint16x8_t *)*v9;
        v165 = v11;
        do
        {
          v166 = (uint16x8_t)v165[1];
          v167 = *v164;
          v168 = v164[1];
          v164 += 2;
          v169 = (int16x8_t)vaddl_u16(*(uint16x4_t *)v167.i8, *(uint16x4_t *)v165->i8);
          v170 = (int16x8_t)vaddl_u16(*(uint16x4_t *)v168.i8, *(uint16x4_t *)v166.i8);
          v171 = (int16x8_t)vaddl_high_u16(v167, *(uint16x8_t *)v165);
          v172 = (int16x8_t)vaddl_high_u16(v168, v166);
          v181.val[3] = (int8x16_t)vminq_s32((int32x4_t)v172, v136);
          v181.val[1] = (int8x16_t)vminq_s32((int32x4_t)v171, v136);
          v181.val[2] = (int8x16_t)vminq_s32((int32x4_t)v170, v136);
          v181.val[0] = (int8x16_t)vminq_s32((int32x4_t)v169, v136);
          *(int8x16_t *)(v137 + v162) = vqtbl4q_s8(v181, (int8x16_t)xmmword_1003BC960);
          v173 = *v163;
          v174 = v163[1];
          v163 += 2;
          v162 += 16;
          *v165 = vsubq_s16(vuzp1q_s16(v169, v171), v173);
          v165[1] = vsubq_s16(vuzp1q_s16(v170, v172), v174);
          v165 += 2;
        }
        while (v134 != v162);
        if (v134 == a6)
          goto LABEL_138;
        v154 = a6 & 0xFFFFFFF0;
        v138 = v154;
        if ((a6 & 8) == 0)
          goto LABEL_182;
      }
      else
      {
        v154 = 0;
      }
      v155 = (uint16x4_t *)((char *)v11 + 2 * v154);
      v156 = (uint16x8_t *)((char *)v139 + 2 * v154);
      v157 = (int16x8_t *)&v140[v154];
      do
      {
        v158 = *v156++;
        v159 = (int16x8_t)vaddl_u16(*(uint16x4_t *)v158.i8, *v155);
        v160 = (int16x8_t)vaddl_high_u16(v158, *(uint16x8_t *)v155->i8);
        v179.val[1] = (int8x16_t)vminq_s32((int32x4_t)v160, v136);
        v179.val[0] = (int8x16_t)vminq_s32((int32x4_t)v159, v136);
        *(_QWORD *)(v137 + v154) = vqtbl2q_s8(v179, (int8x16_t)xmmword_1003BC970).u64[0];
        v161 = *v157++;
        *(int16x8_t *)v155->i8 = vsubq_s16(vuzp1q_s16(v159, v160), v161);
        v155 += 2;
        v154 += 8;
      }
      while (v135 != v154);
      v138 = a6 & 0xFFFFFFF8;
      if (v135 != a6)
        goto LABEL_182;
LABEL_138:
      v137 += a4;
      ++v9;
      v47 = v152 - 1;
      ++v131;
    }
    while (v152);
  }
}

void sub_10034F044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10034F05C(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10034F064(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  __int16 v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      v6 = &v5[2 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 1;
    v10 = (v8 >> 1) + a2;
    if (v10 < 0)
      sub_100008F3C();
    v11 = v4 - (_QWORD)v7;
    if (v11 > v10)
      v10 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 < 0)
        sub_100008FF8();
      v13 = operator new(2 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v15 = 2 * a2;
    v16 = &v13[2 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 2;
      if (v18 < 0x1E)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 1) + 1;
      v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[2 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_29:
        do
        {
          v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_10034F1F8()
{
  operator delete();
}

uint64_t sub_10034F20C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10034F248(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454668;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return nullsub_1(a1);
}

void sub_10034F284(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454668;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);
  operator delete();
}

void sub_10034F2D4(uint64_t a1, double **a2, uint64_t a3, int a4, int a5, int a6)
{
  double **v10;
  double *v12;
  double **v13;
  double v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  double v22;
  int v23;
  double *v24;
  int v25;
  uint64_t v26;
  int v27;
  double *v28;
  double *v29;
  uint64_t v30;
  float64x2_t *v31;
  float64x2_t *v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  int32x2_t v36;
  _BYTE *v37;
  float64x2_t v38;
  double v39;
  double v40;
  int v41;
  int v42;
  double *v43;
  double *v44;
  uint64_t v45;
  float64x2_t *v46;
  float64x2_t *v47;
  float64x2_t *v48;
  float64x2_t v49;
  float64x2_t v50;
  int32x2_t v51;
  _BYTE *v52;
  float64x2_t v53;
  double v54;
  double v55;
  int v56;
  uint64_t v57;
  float64x2_t *v58;
  float64x2_t *v60;
  uint64_t v61;
  float64x2_t *v62;
  float64x2_t v63;
  uint64_t v64;
  double *v65;
  double *v66;
  uint64_t v67;
  double v68;
  uint64_t v69[2];

  v10 = a2;
  v13 = (double **)(a1 + 32);
  v12 = *(double **)(a1 + 32);
  v14 = *(double *)(a1 + 16);
  v15 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v12) >> 3;
  if ((_DWORD)v15 != a6)
  {
    if (a6 <= v15)
    {
      if (a6 < v15)
        *(_QWORD *)(a1 + 40) = &v12[a6];
    }
    else
    {
      sub_100315378(a1 + 32, a6 - v15);
      v12 = *v13;
    }
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_11;
  }
  v16 = *(_DWORD *)(a1 + 24);
  if (!v16)
  {
LABEL_11:
    bzero(v12, 8 * a6);
    v19 = *(_DWORD *)(a1 + 8);
    v20 = v19 - 1;
    v21 = *(_DWORD *)(a1 + 24);
    if (v21 >= v19 - 1)
      goto LABEL_21;
    if (a6 <= 0)
    {
      v10 += (v19 - v21 - 2) + 1;
LABEL_20:
      *(_DWORD *)(a1 + 24) = v20;
      goto LABEL_21;
    }
    if (a6 < 4)
    {
      v22 = *v12;
      v23 = ~v21 + v19;
      do
      {
        v24 = *v10;
        v22 = **v10 + v22;
        *v12 = v22;
        if (a6 != 1)
        {
          v12[1] = v24[1] + v12[1];
          if (a6 != 2)
            v12[2] = v24[2] + v12[2];
        }
        ++v10;
        --v23;
      }
      while (v23);
      goto LABEL_20;
    }
    v57 = a6;
    while (1)
    {
      v58 = (float64x2_t *)*v10;
      if (v12 >= &(*v10)[v57] || v58 >= (float64x2_t *)&v12[v57])
      {
        v60 = v58 + 1;
        v61 = a6 & 0xFFFFFFFC;
        v62 = (float64x2_t *)(v12 + 2);
        do
        {
          v63 = vaddq_f64(*v60, *v62);
          v62[-1] = vaddq_f64(v60[-1], v62[-1]);
          *v62 = v63;
          v60 += 2;
          v62 += 2;
          v61 -= 4;
        }
        while (v61);
        v64 = a6 & 0xFFFFFFFC;
        if (v64 == a6)
          goto LABEL_49;
      }
      else
      {
        v64 = 0;
      }
      v65 = &v58->f64[v64];
      v66 = &v12[v64];
      v67 = a6 - v64;
      do
      {
        v68 = *v65++;
        *v66 = v68 + *v66;
        ++v66;
        --v67;
      }
      while (v67);
LABEL_49:
      ++v21;
      ++v10;
      if (v21 == v20)
        goto LABEL_20;
    }
  }
  v17 = *(_DWORD *)(a1 + 8) - 1;
  if (v16 != v17)
  {
    v69[0] = 0;
    v69[1] = 0;
    v18 = sub_10029430C(v69, 19);
    *(_DWORD *)(v18 + 15) = 825058682;
    *(_OWORD *)v18 = *(_OWORD *)"sumCount == ksize-1";
    sub_100294B74(-215, v69, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 228);
  }
  v10 = &a2[v17];
LABEL_21:
  if (a5)
  {
    v25 = a5 - 1;
    v26 = a6 - 2;
    if (v14 != 1.0)
    {
      while (1)
      {
        v27 = v25;
        v28 = *v10;
        v29 = v10[1 - *(int *)(a1 + 8)];
        if (a6 >= 2)
        {
          v30 = 0;
          v31 = (float64x2_t *)v10[1 - *(int *)(a1 + 8)];
          v32 = (float64x2_t *)*v10;
          v33 = (float64x2_t *)v12;
          do
          {
            v34 = *v32++;
            v35 = vaddq_f64(*v33, v34);
            v36 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(vmuld_lane_f64(v14, v35, 1)), (uint64_t)rint(v14 * v35.f64[0])), 0), (int32x2_t)0xFF000000FFLL);
            v37 = (_BYTE *)(a3 + v30);
            v37[1] = v36.i8[4];
            *v37 = v36.i8[0];
            v38 = *v31++;
            *v33++ = vsubq_f64(v35, v38);
            v30 += 2;
          }
          while (v30 <= v26);
          v30 = v30;
          if ((int)v30 < a6)
          {
            do
            {
LABEL_31:
              v39 = v12[v30] + v28[v30];
              v40 = rint(v14 * v39);
              v41 = (uint64_t)v40 & ~((int)(uint64_t)v40 >> 31);
              if (v41 >= 255)
                LOBYTE(v41) = -1;
              *(_BYTE *)(a3 + v30) = v41;
              v12[v30] = v39 - v29[v30];
              ++v30;
            }
            while (a6 != v30);
          }
        }
        else
        {
          v30 = 0;
          if (a6 > 0)
            goto LABEL_31;
        }
        a3 += a4;
        ++v10;
        v25 = v27 - 1;
        if (!v27)
          return;
      }
    }
    do
    {
      v42 = v25;
      v43 = *v10;
      v44 = v10[1 - *(int *)(a1 + 8)];
      if (a6 >= 2)
      {
        v45 = 0;
        v46 = (float64x2_t *)v12;
        v47 = (float64x2_t *)*v10;
        v48 = (float64x2_t *)v10[1 - *(int *)(a1 + 8)];
        do
        {
          v49 = *v47++;
          v50 = vaddq_f64(*v46, v49);
          v51 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v50.f64[1]), (uint64_t)rint(v50.f64[0])), 0), (int32x2_t)0xFF000000FFLL);
          v52 = (_BYTE *)(a3 + v45);
          v52[1] = v51.i8[4];
          *v52 = v51.i8[0];
          v53 = *v48++;
          *v46++ = vsubq_f64(v50, v53);
          v45 += 2;
        }
        while (v45 <= v26);
        v45 = v45;
        if ((int)v45 < a6)
        {
          do
          {
LABEL_43:
            v54 = v12[v45] + v43[v45];
            v55 = rint(v54);
            v56 = (uint64_t)v55 & ~((int)(uint64_t)v55 >> 31);
            if (v56 >= 255)
              LOBYTE(v56) = -1;
            *(_BYTE *)(a3 + v45) = v56;
            v12[v45] = v54 - v44[v45];
            ++v45;
          }
          while (a6 != v45);
        }
      }
      else
      {
        v45 = 0;
        if (a6 > 0)
          goto LABEL_43;
      }
      a3 += a4;
      ++v10;
      v25 = v42 - 1;
    }
    while (v42);
  }
}

void sub_10034F78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10034F7A4(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10034F7B0()
{
  operator delete();
}

uint64_t sub_10034F7C4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10034F800(_QWORD *a1)
{
  void *v2;

  *a1 = off_1004546F0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return nullsub_1(a1);
}

void sub_10034F83C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1004546F0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);
  operator delete();
}

void sub_10034F88C(uint64_t a1, int32x4_t **a2, uint16x8_t *a3, int a4, int a5, int a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  int v13;
  int32x4_t **v17;
  uint64_t v18;
  int32x4_t *v19;
  int32x4_t **v20;
  double v21;
  unint64_t v22;
  int v23;
  int v24;
  uint16x8_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int32x4_t *v34;
  int8x16_t *v35;
  int v36;
  int32x4_t *v37;
  int32x4_t *v38;
  int v39;
  uint64_t v40;
  int v41;
  double v42;
  int v43;
  int32x4_t *v44;
  int32x4_t *v45;
  int32x4_t *v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  int8x16_t v53;
  int8x16_t v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  int32x4_t v57;
  int32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  int v62;
  __int128 v63;
  int v64;
  __int128 v65;
  int v66;
  __int128 v67;
  int v68;
  __int128 v69;
  int v70;
  int32x4_t *v71;
  uint64_t v72;
  unint64_t v73;
  int32x4_t v74;
  int v75;
  int32x4_t *v76;
  int32x4_t *v77;
  uint64_t v78;
  uint64_t v79;
  int32x4_t *v80;
  int32x4_t *v81;
  int32x4_t *v82;
  uint16x8_t *v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int32 *v90;
  BOOL v92;
  int32x4_t *v94;
  int32x4_t *v95;
  uint64_t v96;
  int32x4_t *v97;
  unint64_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  int32x4_t *v114;
  uint64_t i64;
  int32x4_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int32x4_t *v120;
  int32x4_t *v121;
  uint64_t v122;
  uint64_t v123;
  int32x4_t *v124;
  uint64_t v125;
  unint64_t v126;
  int32x4_t v127;
  int8x16_t v128;
  int8x16_t v129;
  __int128 v130;
  int8x16_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int32x4_t *v152;
  int32x4_t *v153;
  int32x4_t *v154;
  int32x4_t *v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int32x4_t **v166;
  uint16x8_t *v167;
  uint64_t v168[3];

  v13 = a6;
  v17 = a2;
  v18 = a1;
  v20 = (int32x4_t **)(a1 + 32);
  v19 = *(int32x4_t **)(a1 + 32);
  v21 = *(double *)(a1 + 16);
  v22 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v19) >> 2;
  if ((_DWORD)v22 == a6)
  {
    v23 = *(_DWORD *)(a1 + 24);
    if (v23)
    {
      v24 = *(_DWORD *)(a1 + 8) - 1;
      v25 = a3;
      if (v23 != v24)
      {
        v168[0] = 0;
        v168[1] = 0;
        v26 = sub_10029430C(v168, 19);
        *(_DWORD *)(v26 + 15) = 825058682;
        *(_OWORD *)v26 = *(_OWORD *)"sumCount == ksize-1";
        sub_100294B74(-215, v168, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 741);
      }
      v17 = &a2[v24];
      goto LABEL_19;
    }
    v25 = a3;
  }
  else
  {
    if (a6 <= v22)
    {
      if (a6 < v22)
        *(_QWORD *)(a1 + 40) = (char *)v19 + 4 * a6;
    }
    else
    {
      sub_100223D9C(a1 + 32, a6 - v22);
      v19 = *v20;
    }
    v25 = a3;
    *(_DWORD *)(v18 + 24) = 0;
  }
  bzero(v19, 4 * v13);
  v27 = *(_DWORD *)(v18 + 24);
  v28 = *(_DWORD *)(v18 + 8) - 1;
  if (v27 < v28)
  {
    v29 = (v13 - 4);
    if (v13 >= 4)
    {
      if ((v29 & 0xFFFFFFFC) + 5 <= v13)
        v107 = v13;
      else
        v107 = (v29 & 0xFFFFFFFC) + 5;
      v108 = 4 * v107 - ((4 * (v13 - 4)) & 0x3FFFFFFF0);
      v109 = v107 - (v29 & 0xFFFFFFFC) - 4;
      v110 = v109 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v112 = 0;
        v113 = 0;
        v114 = *v17;
        i64 = (uint64_t)(*v17)[2].i64;
        v116 = v19 + 2;
        v117 = 4;
        do
        {
          v118 = v117;
          v119 = v112;
          v120 = (int32x4_t *)i64;
          v121 = v116;
          v19[v113 / 4] = vaddq_s32(v114[v113 / 4], v19[v113 / 4]);
          v113 += 4;
          v117 += 4;
          ++v112;
          i64 += 16;
          ++v116;
        }
        while (v113 <= v29);
        if ((int)v113 < v13)
        {
          if (v109 < 8)
            goto LABEL_99;
          v122 = 16 * v119;
          v123 = v122 + 16;
          v124 = &v19[(unint64_t)v122 / 0x10 + 1];
          v125 = v108 + v122;
          if (v124 < (int32x4_t *)&v114->i8[v125] && &v114->i8[v123] < &v19->i8[v125])
            goto LABEL_99;
          v118 += v110;
          v126 = v109 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v127 = vaddq_s32(*v121, *v120);
            v121[-1] = vaddq_s32(v121[-1], v120[-1]);
            *v121 = v127;
            v120 += 2;
            v121 += 2;
            v126 -= 8;
          }
          while (v126);
          if (v109 != v110)
          {
LABEL_99:
            do
            {
              v19->i32[v118] += v114->i32[v118];
              ++v118;
            }
            while (v118 < v13);
          }
        }
        v111 = *(_DWORD *)(v18 + 24) + 1;
        *(_DWORD *)(v18 + 24) = v111;
        ++v17;
      }
      while (v111 < *(_DWORD *)(v18 + 8) - 1);
    }
    else if (v13 >= 1)
    {
      do
      {
        v71 = *v17;
        v19->i32[0] += (*v17)->i32[0];
        if (v13 != 1)
        {
          v19->i32[1] += v71->i32[1];
          if (v13 != 2)
            v19->i32[2] += v71->i32[2];
        }
        v70 = *(_DWORD *)(v18 + 24) + 1;
        *(_DWORD *)(v18 + 24) = v70;
        ++v17;
      }
      while (v70 < *(_DWORD *)(v18 + 8) - 1);
    }
    else
    {
      if (v28 <= v27 + 1)
        v30 = v27 + 1;
      else
        v30 = *(_DWORD *)(v18 + 8) - 1;
      v17 += (v30 + ~v27) + 1;
      *(_DWORD *)(v18 + 24) = v30;
    }
  }
LABEL_19:
  if (!a5)
    return;
  v31 = a5 - 1;
  v32 = (v13 - 8);
  a13.n128_f32[0] = v21;
  v33 = a4;
  if (v21 == 1.0)
  {
    v72 = v13;
    v73 = (unint64_t)v19->u64 + v72 * 4;
    v74.i64[0] = 0xFFFF0000FFFFLL;
    v74.i64[1] = 0xFFFF0000FFFFLL;
    while (1)
    {
      v75 = v31;
      v76 = *v17;
      v77 = v17[1 - *(int *)(v18 + 8)];
      if (v13 >= 8)
      {
        v79 = 0;
        v80 = v77 + 1;
        v81 = v76 + 1;
        v82 = v19 + 1;
        v83 = v25;
        do
        {
          v84 = vaddq_s32(v81[-1], v82[-1]);
          v85 = vaddq_s32(*v81, *v82);
          *v83++ = vqmovn_high_u32(vqmovn_u32((uint32x4_t)v84), (uint32x4_t)v85);
          v82[-1] = vsubq_s32(v84, v80[-1]);
          v86 = *v80;
          v80 += 2;
          v79 += 8;
          *v82 = vsubq_s32(v85, v86);
          v82 += 2;
          v81 += 2;
        }
        while (v79 <= (int)v32);
        v78 = v79;
        if ((int)v79 >= v13)
          goto LABEL_50;
      }
      else
      {
        v78 = 0;
        if (v13 <= 0)
          goto LABEL_50;
      }
      v87 = v13 - v78;
      if (v87 < 8)
      {
        v88 = v78;
        goto LABEL_76;
      }
      v89 = 4 * v78;
      v90 = &v19->i32[v78];
      v92 = v90 < &v77->i32[v72] && (unint64_t)v77 + 4 * v78 < v73;
      if ((unint64_t)v76 + 4 * v78 < v73 && v90 < &v76->i32[v72])
      {
        v88 = v78;
        goto LABEL_76;
      }
      if (v92)
      {
        v88 = v78;
        do
        {
LABEL_76:
          v105 = v76->i32[v88] + v19->i32[v88];
          v106 = v105 & ~(v105 >> 31);
          if (v106 >= 0xFFFF)
            LOWORD(v106) = -1;
          v25->i16[v88] = v106;
          v19->i32[v88] = v105 - v77->i32[v88];
          ++v88;
        }
        while (v13 != v88);
        goto LABEL_50;
      }
      v88 = (v87 & 0xFFFFFFFFFFFFFFF8) + v78;
      v94 = (int32x4_t *)((char *)v19 + v89);
      v95 = (int32x4_t *)((char *)v76 + v89);
      v96 = 2 * v78;
      v97 = (int32x4_t *)((char *)v77 + v89);
      v98 = v87 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v99 = *v95;
        v100 = v95[1];
        v95 += 2;
        v101 = vaddq_s32(v100, v94[1]);
        v102 = vaddq_s32(v99, *v94);
        *(int16x8_t *)((char *)v25 + v96) = vuzp1q_s16((int16x8_t)vminq_s32(vmaxq_s32(v102, (int32x4_t)0), v74), (int16x8_t)vminq_s32(vmaxq_s32(v101, (int32x4_t)0), v74));
        v103 = *v97;
        v104 = v97[1];
        v97 += 2;
        *v94 = vsubq_s32(v102, v103);
        v94[1] = vsubq_s32(v101, v104);
        v94 += 2;
        v96 += 16;
        v98 -= 8;
      }
      while (v98);
      if (v87 != (v87 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_76;
LABEL_50:
      v25 = (uint16x8_t *)((char *)v25 + a4);
      ++v17;
      v31 = v75 - 1;
      if (!v75)
        return;
    }
  }
  v34 = v19 + 1;
  v35 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v165 = v13;
  v164 = v18;
  do
  {
    v36 = v31;
    v37 = *v17;
    v166 = v17;
    v167 = v25;
    v38 = v17[1 - *(int *)(v18 + 8)];
    v39 = 0;
    if (v13 >= 8)
    {
      v44 = v37 + 1;
      v45 = v38 + 1;
      v46 = v34;
      do
      {
        v47 = v46[-1];
        v48 = *v46;
        v49 = v44[-1];
        v50 = *v44;
        v51 = atomic_load((unsigned __int8 *)qword_10048AA00);
        if ((v51 & 1) == 0)
        {
          v160 = v32;
          v156 = a13;
          v152 = v34;
          v148 = v36;
          v140 = v44[-1];
          v144 = v46[-1];
          v132 = *v44;
          v136 = *v46;
          v62 = __cxa_guard_acquire(qword_10048AA00);
          v50 = v132;
          v48 = v136;
          v49 = v140;
          v47 = v144;
          v36 = v148;
          *(_QWORD *)&v63 = 0x8000000080000000;
          *((_QWORD *)&v63 + 1) = 0x8000000080000000;
          v35 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v34 = v152;
          a13 = v156;
          v32 = v160;
          if (v62)
          {
            xmmword_10048A9F0 = v63;
            __cxa_guard_release(qword_10048AA00);
            v50 = v132;
            v48 = v136;
            v49 = v140;
            v47 = v144;
            v36 = v148;
            v35 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v34 = v152;
            a13 = v156;
            v32 = v160;
          }
        }
        v52 = atomic_load((unsigned __int8 *)qword_10048AA20);
        if ((v52 & 1) == 0)
        {
          v161 = v32;
          v157 = a13;
          v153 = v34;
          v149 = v36;
          v141 = v49;
          v145 = v47;
          v133 = v50;
          v137 = v48;
          v64 = __cxa_guard_acquire(qword_10048AA20);
          v50 = v133;
          v48 = v137;
          v49 = v141;
          v47 = v145;
          v36 = v149;
          *(_QWORD *)&v65 = 0x3F0000003F000000;
          *((_QWORD *)&v65 + 1) = 0x3F0000003F000000;
          v35 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v34 = v153;
          a13 = v157;
          v32 = v161;
          if (v64)
          {
            xmmword_10048AA10 = v65;
            __cxa_guard_release(qword_10048AA20);
            v50 = v133;
            v48 = v137;
            v49 = v141;
            v47 = v145;
            v36 = v149;
            v35 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v34 = v153;
            a13 = v157;
            v32 = v161;
          }
        }
        v53 = (int8x16_t)xmmword_10048AA10;
        v54 = v35[159];
        v55 = atomic_load((unsigned __int8 *)qword_10048AA00);
        if ((v55 & 1) == 0)
        {
          v162 = v32;
          v158 = a13;
          v154 = v34;
          v150 = v36;
          v142 = v49;
          v146 = v47;
          v134 = v50;
          v138 = v48;
          v128 = v35[159];
          v130 = xmmword_10048AA10;
          v66 = __cxa_guard_acquire(qword_10048AA00);
          v54 = v128;
          v53 = (int8x16_t)v130;
          v50 = v134;
          v48 = v138;
          v49 = v142;
          v47 = v146;
          v36 = v150;
          *(_QWORD *)&v67 = 0x8000000080000000;
          *((_QWORD *)&v67 + 1) = 0x8000000080000000;
          v35 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v34 = v154;
          a13 = v158;
          v32 = v162;
          if (v66)
          {
            xmmword_10048A9F0 = v67;
            __cxa_guard_release(qword_10048AA00);
            v54 = v128;
            v53 = (int8x16_t)v130;
            v50 = v134;
            v48 = v138;
            v49 = v142;
            v47 = v146;
            v36 = v150;
            v35 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v34 = v154;
            a13 = v158;
            v32 = v162;
          }
        }
        v56 = atomic_load((unsigned __int8 *)qword_10048AA20);
        if ((v56 & 1) == 0)
        {
          v163 = v32;
          v159 = a13;
          v155 = v34;
          v151 = v36;
          v143 = v49;
          v147 = v47;
          v135 = v50;
          v139 = v48;
          v129 = v54;
          v131 = v53;
          v68 = __cxa_guard_acquire(qword_10048AA20);
          v54 = v129;
          v53 = v131;
          v50 = v135;
          v48 = v139;
          v49 = v143;
          v47 = v147;
          v36 = v151;
          *(_QWORD *)&v69 = 0x3F0000003F000000;
          *((_QWORD *)&v69 + 1) = 0x3F0000003F000000;
          v35 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v34 = v155;
          a13 = v159;
          v32 = v163;
          if (v68)
          {
            xmmword_10048AA10 = v69;
            __cxa_guard_release(qword_10048AA20);
            v54 = v129;
            v53 = v131;
            v50 = v135;
            v48 = v139;
            v49 = v143;
            v47 = v147;
            v36 = v151;
            v35 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v34 = v155;
            a13 = v159;
            v32 = v163;
          }
        }
        v57 = vaddq_s32(v49, v47);
        v58 = vaddq_s32(v50, v48);
        v59 = vmulq_n_f32(vcvtq_f32_s32(v57), a13.n128_f32[0]);
        v60 = vmulq_n_f32(vcvtq_f32_s32(v58), a13.n128_f32[0]);
        *v25++ = vqmovn_high_u32(vqmovn_u32((uint32x4_t)vcvtq_s32_f32(vaddq_f32(v59, (float32x4_t)vorrq_s8(vandq_s8(v54, (int8x16_t)v59), v53)))), (uint32x4_t)vcvtq_s32_f32(vaddq_f32(v60, (float32x4_t)vorrq_s8(vandq_s8(v35[159], (int8x16_t)v60), (int8x16_t)xmmword_10048AA10))));
        v46[-1] = vsubq_s32(v57, v45[-1]);
        v61 = *v45;
        v45 += 2;
        *v46 = vsubq_s32(v58, v61);
        v46 += 2;
        v44 += 2;
        v39 += 8;
      }
      while ((int)v32 >= v39);
    }
    v13 = v165;
    if (v39 < v165)
    {
      v40 = v39;
      do
      {
        v41 = v37->i32[v40] + v19->i32[v40];
        v42 = rint(v21 * (double)v41);
        v43 = (uint64_t)v42 & ~((int)(uint64_t)v42 >> 31);
        if (v43 >= 0xFFFF)
          LOWORD(v43) = -1;
        v167->i16[v40] = v43;
        v19->i32[v40] = v41 - v38->i32[v40];
        ++v40;
      }
      while ((int)v40 < v165);
    }
    v25 = (uint16x8_t *)((char *)v167 + v33);
    v17 = v166 + 1;
    v31 = v36 - 1;
    v18 = v164;
  }
  while (v36);
}

void sub_10035018C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029434C((uint64_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_1003501A4(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1003501B0()
{
  operator delete();
}

uint64_t sub_1003501C4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_100350200(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454778;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return nullsub_1(a1);
}

void sub_10035023C(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454778;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);
  operator delete();
}

void sub_10035028C(uint64_t a1, double **a2, uint64_t a3, int a4, int a5, int a6)
{
  double **v10;
  double *v12;
  double **v13;
  double v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  double v21;
  int v22;
  double *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double *v28;
  double *v29;
  uint64_t v30;
  float64x2_t *v31;
  float64x2_t *v32;
  float64x2_t *v33;
  _WORD *v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  int v38;
  double v39;
  int v40;
  float64x2_t v41;
  double v42;
  double v43;
  int v44;
  int v45;
  double *v46;
  double *v47;
  uint64_t v48;
  float64x2_t *v49;
  float64x2_t *v50;
  float64x2_t *v51;
  _WORD *v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  int v56;
  double v57;
  int v58;
  float64x2_t v59;
  double v60;
  double v61;
  int v62;
  uint64_t v63;
  float64x2_t *v64;
  float64x2_t *v66;
  uint64_t v67;
  float64x2_t *v68;
  float64x2_t v69;
  uint64_t v70;
  double *v71;
  double *v72;
  uint64_t v73;
  double v74;
  uint64_t v75[2];

  v10 = a2;
  v13 = (double **)(a1 + 32);
  v12 = *(double **)(a1 + 32);
  v14 = *(double *)(a1 + 16);
  v15 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v12) >> 3;
  if ((_DWORD)v15 != a6)
  {
    if (a6 <= v15)
    {
      if (a6 < v15)
        *(_QWORD *)(a1 + 40) = &v12[a6];
    }
    else
    {
      sub_100315378(a1 + 32, a6 - v15);
      v12 = *v13;
    }
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_11;
  }
  v16 = *(_DWORD *)(a1 + 24);
  if (!v16)
  {
LABEL_11:
    bzero(v12, 8 * a6);
    v17 = *(_DWORD *)(a1 + 8);
    v19 = v17 - 1;
    v20 = *(_DWORD *)(a1 + 24);
    if (v20 >= v17 - 1)
      goto LABEL_21;
    if (a6 <= 0)
    {
      v10 += (v17 - v20 - 2) + 1;
LABEL_20:
      *(_DWORD *)(a1 + 24) = v19;
      goto LABEL_21;
    }
    if (a6 < 4)
    {
      v21 = *v12;
      v22 = ~v20 + v17;
      do
      {
        v23 = *v10;
        v21 = **v10 + v21;
        *v12 = v21;
        if (a6 != 1)
        {
          v12[1] = v23[1] + v12[1];
          if (a6 != 2)
            v12[2] = v23[2] + v12[2];
        }
        ++v10;
        --v22;
      }
      while (v22);
      goto LABEL_20;
    }
    v63 = a6;
    while (1)
    {
      v64 = (float64x2_t *)*v10;
      if (v12 >= &(*v10)[v63] || v64 >= (float64x2_t *)&v12[v63])
      {
        v66 = v64 + 1;
        v67 = a6 & 0xFFFFFFFC;
        v68 = (float64x2_t *)(v12 + 2);
        do
        {
          v69 = vaddq_f64(*v66, *v68);
          v68[-1] = vaddq_f64(v66[-1], v68[-1]);
          *v68 = v69;
          v66 += 2;
          v68 += 2;
          v67 -= 4;
        }
        while (v67);
        v70 = a6 & 0xFFFFFFFC;
        if (v70 == a6)
          goto LABEL_56;
      }
      else
      {
        v70 = 0;
      }
      v71 = &v64->f64[v70];
      v72 = &v12[v70];
      v73 = a6 - v70;
      do
      {
        v74 = *v71++;
        *v72 = v74 + *v72;
        ++v72;
        --v73;
      }
      while (v73);
LABEL_56:
      ++v20;
      ++v10;
      if (v20 == v19)
        goto LABEL_20;
    }
  }
  v17 = *(_DWORD *)(a1 + 8);
  if (v16 != v17 - 1)
  {
    v75[0] = 0;
    v75[1] = 0;
    v18 = sub_10029430C(v75, 19);
    *(_DWORD *)(v18 + 15) = 825058682;
    *(_OWORD *)v18 = *(_OWORD *)"sumCount == ksize-1";
    sub_100294B74(-215, v75, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 228);
  }
  v10 = &a2[v17 - 1];
LABEL_21:
  if (a5)
  {
    v24 = a5 - 1;
    v25 = 1 - v17;
    v26 = a6 - 2;
    if (v14 == 1.0)
    {
      while (1)
      {
        v45 = v24;
        v46 = *v10;
        v47 = v10[v25];
        if (a6 >= 2)
          break;
        v48 = 0;
        if (a6 > 0)
          goto LABEL_50;
LABEL_39:
        a3 += a4;
        ++v10;
        v24 = v45 - 1;
        if (!v45)
          return;
      }
      v48 = 0;
      v49 = (float64x2_t *)v12;
      v50 = (float64x2_t *)*v10;
      v51 = (float64x2_t *)v10[v25];
      do
      {
        v52 = (_WORD *)(a3 + 2 * v48);
        v53 = *v50++;
        v54 = vaddq_f64(*v49, v53);
        v55 = rint(v54.f64[0]);
        v56 = (uint64_t)v55 & ~((int)(uint64_t)v55 >> 31);
        if (v56 >= 0xFFFF)
          LOWORD(v56) = -1;
        *v52 = v56;
        v57 = rint(v54.f64[1]);
        v58 = (uint64_t)v57 & ~((int)(uint64_t)v57 >> 31);
        if (v58 >= 0xFFFF)
          LOWORD(v58) = -1;
        v52[1] = v58;
        v59 = *v51++;
        *v49++ = vsubq_f64(v54, v59);
        v48 += 2;
      }
      while (v48 <= v26);
      v48 = v48;
      if ((int)v48 >= a6)
        goto LABEL_39;
      do
      {
LABEL_50:
        v60 = v12[v48] + v46[v48];
        v61 = rint(v60);
        v62 = (uint64_t)v61 & ~((int)(uint64_t)v61 >> 31);
        if (v62 >= 0xFFFF)
          LOWORD(v62) = -1;
        *(_WORD *)(a3 + 2 * v48) = v62;
        v12[v48] = v60 - v47[v48];
        ++v48;
      }
      while (a6 != v48);
      goto LABEL_39;
    }
    while (1)
    {
      v27 = v24;
      v28 = *v10;
      v29 = v10[v25];
      if (a6 >= 2)
        break;
      v30 = 0;
      if (a6 > 0)
        goto LABEL_35;
LABEL_24:
      a3 += a4;
      ++v10;
      v24 = v27 - 1;
      if (!v27)
        return;
    }
    v30 = 0;
    v31 = (float64x2_t *)v10[v25];
    v32 = (float64x2_t *)*v10;
    v33 = (float64x2_t *)v12;
    do
    {
      v34 = (_WORD *)(a3 + 2 * v30);
      v35 = *v32++;
      v36 = vaddq_f64(*v33, v35);
      v37 = rint(v14 * v36.f64[0]);
      v38 = (uint64_t)v37 & ~((int)(uint64_t)v37 >> 31);
      if (v38 >= 0xFFFF)
        LOWORD(v38) = -1;
      *v34 = v38;
      v39 = rint(vmuld_lane_f64(v14, v36, 1));
      v40 = (uint64_t)v39 & ~((int)(uint64_t)v39 >> 31);
      if (v40 >= 0xFFFF)
        LOWORD(v40) = -1;
      v34[1] = v40;
      v41 = *v31++;
      *v33++ = vsubq_f64(v36, v41);
      v30 += 2;
    }
    while (v30 <= v26);
    v30 = v30;
    if ((int)v30 >= a6)
      goto LABEL_24;
    do
    {
LABEL_35:
      v42 = v12[v30] + v28[v30];
      v43 = rint(v14 * v42);
      v44 = (uint64_t)v43 & ~((int)(uint64_t)v43 >> 31);
      if (v44 >= 0xFFFF)
        LOWORD(v44) = -1;
      *(_WORD *)(a3 + 2 * v30) = v44;
      v12[v30] = v42 - v29[v30];
      ++v30;
    }
    while (a6 != v30);
    goto LABEL_24;
  }
}

void sub_100350728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100350740(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10035074C()
{
  operator delete();
}

uint64_t sub_100350760(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10035079C(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454800;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return nullsub_1(a1);
}

void sub_1003507D8(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454800;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);
  operator delete();
}

void sub_100350828(uint64_t a1, int32x4_t **a2, int16x8_t *a3, int a4, int a5, int a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  int v13;
  int32x4_t **v17;
  uint64_t v18;
  int32x4_t *v19;
  int32x4_t **v20;
  double v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int32x4_t *v33;
  int8x16_t *v34;
  int v35;
  int32x4_t *v36;
  int32x4_t *v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int32x4_t *v42;
  int32x4_t *v43;
  int16x8_t *v44;
  int32x4_t *v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  int8x16_t v52;
  int8x16_t v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  int32x4_t v56;
  int32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  int v61;
  __int128 v62;
  int v63;
  __int128 v64;
  int v65;
  __int128 v66;
  int v67;
  __int128 v68;
  int v69;
  int32x4_t *v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int32x4_t *v74;
  int32x4_t *v75;
  uint64_t v76;
  uint64_t v77;
  int32x4_t *v78;
  int32x4_t *v79;
  int32x4_t *v80;
  int16x8_t *v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int32 *v88;
  BOOL v90;
  int32x4_t *v92;
  int32x4_t *v93;
  uint64_t v94;
  int32x4_t *v95;
  unint64_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  int32x4_t *v112;
  uint64_t i64;
  int32x4_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int32x4_t *v118;
  int32x4_t *v119;
  uint64_t v120;
  uint64_t v121;
  int32x4_t *v122;
  uint64_t v123;
  unint64_t v124;
  int32x4_t v125;
  int8x16_t v126;
  int8x16_t v127;
  __int128 v128;
  int8x16_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int32x4_t *v150;
  int32x4_t *v151;
  int32x4_t *v152;
  int32x4_t *v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int32x4_t **v164;
  int16x8_t *v165;
  uint64_t v166[3];

  v13 = a6;
  v17 = a2;
  v18 = a1;
  v20 = (int32x4_t **)(a1 + 32);
  v19 = *(int32x4_t **)(a1 + 32);
  v21 = *(double *)(a1 + 16);
  v22 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v19) >> 2;
  if ((_DWORD)v22 == a6)
  {
    v23 = *(_DWORD *)(a1 + 24);
    if (v23)
    {
      v24 = *(_DWORD *)(a1 + 8) - 1;
      if (v23 != v24)
      {
        v166[0] = 0;
        v166[1] = 0;
        v25 = sub_10029430C(v166, 19);
        *(_DWORD *)(v25 + 15) = 825058682;
        *(_OWORD *)v25 = *(_OWORD *)"sumCount == ksize-1";
        sub_100294B74(-215, v166, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 614);
      }
      v17 = &a2[v24];
      goto LABEL_18;
    }
  }
  else
  {
    if (a6 <= v22)
    {
      if (a6 < v22)
        *(_QWORD *)(a1 + 40) = (char *)v19 + 4 * a6;
    }
    else
    {
      sub_100223D9C(a1 + 32, a6 - v22);
      v19 = *v20;
    }
    *(_DWORD *)(v18 + 24) = 0;
  }
  bzero(v19, 4 * v13);
  v26 = *(_DWORD *)(v18 + 24);
  v27 = *(_DWORD *)(v18 + 8) - 1;
  if (v26 < v27)
  {
    v28 = (v13 - 4);
    if (v13 >= 4)
    {
      if ((v28 & 0xFFFFFFFC) + 5 <= v13)
        v105 = v13;
      else
        v105 = (v28 & 0xFFFFFFFC) + 5;
      v106 = 4 * v105 - ((4 * (v13 - 4)) & 0x3FFFFFFF0);
      v107 = v105 - (v28 & 0xFFFFFFFC) - 4;
      v108 = v107 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v110 = 0;
        v111 = 0;
        v112 = *v17;
        i64 = (uint64_t)(*v17)[2].i64;
        v114 = v19 + 2;
        v115 = 4;
        do
        {
          v116 = v115;
          v117 = v110;
          v118 = (int32x4_t *)i64;
          v119 = v114;
          v19[v111 / 4] = vaddq_s32(v112[v111 / 4], v19[v111 / 4]);
          v111 += 4;
          v115 += 4;
          ++v110;
          i64 += 16;
          ++v114;
        }
        while (v111 <= v28);
        if ((int)v111 < v13)
        {
          if (v107 < 8)
            goto LABEL_104;
          v120 = 16 * v117;
          v121 = v120 + 16;
          v122 = &v19[(unint64_t)v120 / 0x10 + 1];
          v123 = v106 + v120;
          if (v122 < (int32x4_t *)&v112->i8[v123] && &v112->i8[v121] < &v19->i8[v123])
            goto LABEL_104;
          v116 += v108;
          v124 = v107 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v125 = vaddq_s32(*v119, *v118);
            v119[-1] = vaddq_s32(v119[-1], v118[-1]);
            *v119 = v125;
            v118 += 2;
            v119 += 2;
            v124 -= 8;
          }
          while (v124);
          if (v107 != v108)
          {
LABEL_104:
            do
            {
              v19->i32[v116] += v112->i32[v116];
              ++v116;
            }
            while (v116 < v13);
          }
        }
        v109 = *(_DWORD *)(v18 + 24) + 1;
        *(_DWORD *)(v18 + 24) = v109;
        ++v17;
      }
      while (v109 < *(_DWORD *)(v18 + 8) - 1);
    }
    else if (v13 >= 1)
    {
      do
      {
        v70 = *v17;
        v19->i32[0] += (*v17)->i32[0];
        if (v13 != 1)
        {
          v19->i32[1] += v70->i32[1];
          if (v13 != 2)
            v19->i32[2] += v70->i32[2];
        }
        v69 = *(_DWORD *)(v18 + 24) + 1;
        *(_DWORD *)(v18 + 24) = v69;
        ++v17;
      }
      while (v69 < *(_DWORD *)(v18 + 8) - 1);
    }
    else
    {
      if (v27 <= v26 + 1)
        v29 = v26 + 1;
      else
        v29 = *(_DWORD *)(v18 + 8) - 1;
      v17 += (v29 + ~v26) + 1;
      *(_DWORD *)(v18 + 24) = v29;
    }
  }
LABEL_18:
  if (!a5)
    return;
  v30 = a5 - 1;
  v31 = (v13 - 8);
  a13.n128_f32[0] = v21;
  v32 = a4;
  if (v21 == 1.0)
  {
    v71 = v13;
    v72 = (unint64_t)v19->u64 + v71 * 4;
    while (1)
    {
      v73 = v30;
      v74 = *v17;
      v75 = v17[1 - *(int *)(v18 + 8)];
      if (v13 >= 8)
      {
        v77 = 0;
        v78 = v75 + 1;
        v79 = v74 + 1;
        v80 = v19 + 1;
        v81 = a3;
        do
        {
          v82 = vaddq_s32(v79[-1], v80[-1]);
          v83 = vaddq_s32(*v79, *v80);
          *v81++ = vqmovn_high_s32(vqmovn_s32(v82), v83);
          v80[-1] = vsubq_s32(v82, v78[-1]);
          v84 = *v78;
          v78 += 2;
          v77 += 8;
          *v80 = vsubq_s32(v83, v84);
          v80 += 2;
          v79 += 2;
        }
        while (v77 <= (int)v31);
        v76 = v77;
        if ((int)v77 >= v13)
          goto LABEL_52;
      }
      else
      {
        v76 = 0;
        if (v13 <= 0)
          goto LABEL_52;
      }
      v85 = v13 - v76;
      if (v85 < 8)
      {
        v86 = v76;
        goto LABEL_78;
      }
      v87 = 4 * v76;
      v88 = &v19->i32[v76];
      v90 = v88 < &v75->i32[v71] && (unint64_t)v75 + 4 * v76 < v72;
      if ((unint64_t)v74 + 4 * v76 < v72 && v88 < &v74->i32[v71])
      {
        v86 = v76;
        goto LABEL_78;
      }
      if (v90)
      {
        v86 = v76;
        do
        {
LABEL_78:
          v103 = v74->i32[v86] + v19->i32[v86];
          if (v103 <= -32768)
            v104 = -32768;
          else
            v104 = v74->i32[v86] + v19->i32[v86];
          if (v104 >= 0x7FFF)
            LOWORD(v104) = 0x7FFF;
          a3->i16[v86] = v104;
          v19->i32[v86] = v103 - v75->i32[v86];
          ++v86;
        }
        while (v13 != v86);
        goto LABEL_52;
      }
      v86 = (v85 & 0xFFFFFFFFFFFFFFF8) + v76;
      v92 = (int32x4_t *)((char *)v19 + v87);
      v93 = (int32x4_t *)((char *)v74 + v87);
      v94 = 2 * v76;
      v95 = (int32x4_t *)((char *)v75 + v87);
      v96 = v85 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v97 = *v93;
        v98 = v93[1];
        v93 += 2;
        v99 = vaddq_s32(v98, v92[1]);
        v100 = vaddq_s32(v97, *v92);
        *(int16x8_t *)((char *)a3 + v94) = vqmovn_high_s32(vqmovn_s32(v100), v99);
        v101 = *v95;
        v102 = v95[1];
        v95 += 2;
        *v92 = vsubq_s32(v100, v101);
        v92[1] = vsubq_s32(v99, v102);
        v92 += 2;
        v94 += 16;
        v96 -= 8;
      }
      while (v96);
      if (v85 != (v85 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_78;
LABEL_52:
      a3 = (int16x8_t *)((char *)a3 + a4);
      ++v17;
      v30 = v73 - 1;
      if (!v73)
        return;
    }
  }
  v33 = v19 + 1;
  v34 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
  v163 = v13;
  v162 = v18;
  do
  {
    v164 = v17;
    v165 = a3;
    v35 = v30;
    v36 = *v17;
    v37 = v17[1 - *(int *)(v18 + 8)];
    if (v13 >= 8)
    {
      v38 = 0;
      v42 = v36 + 1;
      v43 = v37 + 1;
      v44 = v165;
      v45 = v33;
      do
      {
        v46 = v45[-1];
        v47 = *v45;
        v48 = v42[-1];
        v49 = *v42;
        v50 = atomic_load((unsigned __int8 *)qword_10048AA00);
        if ((v50 & 1) == 0)
        {
          v158 = v31;
          v154 = a13;
          v150 = v33;
          v146 = v35;
          v138 = v42[-1];
          v142 = v45[-1];
          v130 = *v42;
          v134 = *v45;
          v61 = __cxa_guard_acquire(qword_10048AA00);
          v49 = v130;
          v47 = v134;
          v48 = v138;
          v46 = v142;
          v35 = v146;
          *(_QWORD *)&v62 = 0x8000000080000000;
          *((_QWORD *)&v62 + 1) = 0x8000000080000000;
          v34 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v33 = v150;
          a13 = v154;
          v31 = v158;
          if (v61)
          {
            xmmword_10048A9F0 = v62;
            __cxa_guard_release(qword_10048AA00);
            v49 = v130;
            v47 = v134;
            v48 = v138;
            v46 = v142;
            v35 = v146;
            v34 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v33 = v150;
            a13 = v154;
            v31 = v158;
          }
        }
        v51 = atomic_load((unsigned __int8 *)qword_10048AA20);
        if ((v51 & 1) == 0)
        {
          v159 = v31;
          v155 = a13;
          v151 = v33;
          v147 = v35;
          v139 = v48;
          v143 = v46;
          v131 = v49;
          v135 = v47;
          v63 = __cxa_guard_acquire(qword_10048AA20);
          v49 = v131;
          v47 = v135;
          v48 = v139;
          v46 = v143;
          v35 = v147;
          *(_QWORD *)&v64 = 0x3F0000003F000000;
          *((_QWORD *)&v64 + 1) = 0x3F0000003F000000;
          v34 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v33 = v151;
          a13 = v155;
          v31 = v159;
          if (v63)
          {
            xmmword_10048AA10 = v64;
            __cxa_guard_release(qword_10048AA20);
            v49 = v131;
            v47 = v135;
            v48 = v139;
            v46 = v143;
            v35 = v147;
            v34 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v33 = v151;
            a13 = v155;
            v31 = v159;
          }
        }
        v52 = (int8x16_t)xmmword_10048AA10;
        v53 = v34[159];
        v54 = atomic_load((unsigned __int8 *)qword_10048AA00);
        if ((v54 & 1) == 0)
        {
          v160 = v31;
          v156 = a13;
          v152 = v33;
          v148 = v35;
          v140 = v48;
          v144 = v46;
          v132 = v49;
          v136 = v47;
          v126 = v34[159];
          v128 = xmmword_10048AA10;
          v65 = __cxa_guard_acquire(qword_10048AA00);
          v53 = v126;
          v52 = (int8x16_t)v128;
          v49 = v132;
          v47 = v136;
          v48 = v140;
          v46 = v144;
          v35 = v148;
          *(_QWORD *)&v66 = 0x8000000080000000;
          *((_QWORD *)&v66 + 1) = 0x8000000080000000;
          v34 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v33 = v152;
          a13 = v156;
          v31 = v160;
          if (v65)
          {
            xmmword_10048A9F0 = v66;
            __cxa_guard_release(qword_10048AA00);
            v53 = v126;
            v52 = (int8x16_t)v128;
            v49 = v132;
            v47 = v136;
            v48 = v140;
            v46 = v144;
            v35 = v148;
            v34 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v33 = v152;
            a13 = v156;
            v31 = v160;
          }
        }
        v55 = atomic_load((unsigned __int8 *)qword_10048AA20);
        if ((v55 & 1) == 0)
        {
          v161 = v31;
          v157 = a13;
          v153 = v33;
          v149 = v35;
          v141 = v48;
          v145 = v46;
          v133 = v49;
          v137 = v47;
          v127 = v53;
          v129 = v52;
          v67 = __cxa_guard_acquire(qword_10048AA20);
          v53 = v127;
          v52 = v129;
          v49 = v133;
          v47 = v137;
          v48 = v141;
          v46 = v145;
          v35 = v149;
          *(_QWORD *)&v68 = 0x3F0000003F000000;
          *((_QWORD *)&v68 + 1) = 0x3F0000003F000000;
          v34 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
          v33 = v153;
          a13 = v157;
          v31 = v161;
          if (v67)
          {
            xmmword_10048AA10 = v68;
            __cxa_guard_release(qword_10048AA20);
            v53 = v127;
            v52 = v129;
            v49 = v133;
            v47 = v137;
            v48 = v141;
            v46 = v145;
            v35 = v149;
            v34 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            v33 = v153;
            a13 = v157;
            v31 = v161;
          }
        }
        v56 = vaddq_s32(v48, v46);
        v57 = vaddq_s32(v49, v47);
        v58 = vmulq_n_f32(vcvtq_f32_s32(v56), a13.n128_f32[0]);
        v59 = vmulq_n_f32(vcvtq_f32_s32(v57), a13.n128_f32[0]);
        *v44++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32(v58, (float32x4_t)vorrq_s8(vandq_s8(v53, (int8x16_t)v58), v52)))), vcvtq_s32_f32(vaddq_f32(v59, (float32x4_t)vorrq_s8(vandq_s8(v34[159], (int8x16_t)v59), (int8x16_t)xmmword_10048AA10))));
        v45[-1] = vsubq_s32(v56, v43[-1]);
        v60 = *v43;
        v43 += 2;
        *v45 = vsubq_s32(v57, v60);
        v45 += 2;
        v42 += 2;
        v38 += 8;
      }
      while ((int)v31 >= v38);
    }
    else
    {
      v38 = 0;
    }
    v13 = v163;
    if (v38 < v163)
    {
      v39 = v38;
      do
      {
        v40 = v36->i32[v39] + v19->i32[v39];
        v41 = (uint64_t)rint(v21 * (double)v40);
        if ((int)v41 <= -32768)
          LODWORD(v41) = -32768;
        if ((int)v41 >= 0x7FFF)
          LOWORD(v41) = 0x7FFF;
        v165->i16[v39] = v41;
        v19->i32[v39] = v40 - v37->i32[v39];
        ++v39;
      }
      while ((int)v39 < v163);
    }
    a3 = (int16x8_t *)((char *)v165 + v32);
    v17 = v164 + 1;
    v30 = v35 - 1;
    v18 = v162;
  }
  while (v35);
}

void sub_10035113C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029434C((uint64_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_100351154(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100351160()
{
  operator delete();
}

uint64_t sub_100351174(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1003511B0(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454888;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return nullsub_1(a1);
}

void sub_1003511EC(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454888;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);
  operator delete();
}

void sub_10035123C(uint64_t a1, double **a2, uint64_t a3, int a4, int a5, int a6)
{
  double **v10;
  double *v12;
  double **v13;
  double v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  double v21;
  int v22;
  double *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double *v28;
  double *v29;
  uint64_t v30;
  float64x2_t *v31;
  float64x2_t *v32;
  float64x2_t *v33;
  _WORD *v34;
  float64x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t v39;
  double v40;
  uint64_t v41;
  int v42;
  double *v43;
  double *v44;
  uint64_t v45;
  float64x2_t *v46;
  float64x2_t *v47;
  float64x2_t *v48;
  _WORD *v49;
  float64x2_t v50;
  float64x2_t v51;
  uint64_t v52;
  uint64_t v53;
  float64x2_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  float64x2_t *v58;
  float64x2_t *v60;
  uint64_t v61;
  float64x2_t *v62;
  float64x2_t v63;
  uint64_t v64;
  double *v65;
  double *v66;
  uint64_t v67;
  double v68;
  uint64_t v69[2];

  v10 = a2;
  v13 = (double **)(a1 + 32);
  v12 = *(double **)(a1 + 32);
  v14 = *(double *)(a1 + 16);
  v15 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v12) >> 3;
  if ((_DWORD)v15 != a6)
  {
    if (a6 <= v15)
    {
      if (a6 < v15)
        *(_QWORD *)(a1 + 40) = &v12[a6];
    }
    else
    {
      sub_100315378(a1 + 32, a6 - v15);
      v12 = *v13;
    }
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_11;
  }
  v16 = *(_DWORD *)(a1 + 24);
  if (!v16)
  {
LABEL_11:
    bzero(v12, 8 * a6);
    v17 = *(_DWORD *)(a1 + 8);
    v19 = v17 - 1;
    v20 = *(_DWORD *)(a1 + 24);
    if (v20 >= v17 - 1)
      goto LABEL_21;
    if (a6 <= 0)
    {
      v10 += (v17 - v20 - 2) + 1;
LABEL_20:
      *(_DWORD *)(a1 + 24) = v19;
      goto LABEL_21;
    }
    if (a6 < 4)
    {
      v21 = *v12;
      v22 = ~v20 + v17;
      do
      {
        v23 = *v10;
        v21 = **v10 + v21;
        *v12 = v21;
        if (a6 != 1)
        {
          v12[1] = v23[1] + v12[1];
          if (a6 != 2)
            v12[2] = v23[2] + v12[2];
        }
        ++v10;
        --v22;
      }
      while (v22);
      goto LABEL_20;
    }
    v57 = a6;
    while (1)
    {
      v58 = (float64x2_t *)*v10;
      if (v12 >= &(*v10)[v57] || v58 >= (float64x2_t *)&v12[v57])
      {
        v60 = v58 + 1;
        v61 = a6 & 0xFFFFFFFC;
        v62 = (float64x2_t *)(v12 + 2);
        do
        {
          v63 = vaddq_f64(*v60, *v62);
          v62[-1] = vaddq_f64(v60[-1], v62[-1]);
          *v62 = v63;
          v60 += 2;
          v62 += 2;
          v61 -= 4;
        }
        while (v61);
        v64 = a6 & 0xFFFFFFFC;
        if (v64 == a6)
          goto LABEL_68;
      }
      else
      {
        v64 = 0;
      }
      v65 = &v58->f64[v64];
      v66 = &v12[v64];
      v67 = a6 - v64;
      do
      {
        v68 = *v65++;
        *v66 = v68 + *v66;
        ++v66;
        --v67;
      }
      while (v67);
LABEL_68:
      ++v20;
      ++v10;
      if (v20 == v19)
        goto LABEL_20;
    }
  }
  v17 = *(_DWORD *)(a1 + 8);
  if (v16 != v17 - 1)
  {
    v69[0] = 0;
    v69[1] = 0;
    v18 = sub_10029430C(v69, 19);
    *(_DWORD *)(v18 + 15) = 825058682;
    *(_OWORD *)v18 = *(_OWORD *)"sumCount == ksize-1";
    sub_100294B74(-215, v69, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 228);
  }
  v10 = &a2[v17 - 1];
LABEL_21:
  if (a5)
  {
    v24 = a5 - 1;
    v25 = 1 - v17;
    v26 = a6 - 2;
    if (v14 == 1.0)
    {
      while (1)
      {
        v42 = v24;
        v43 = *v10;
        v44 = v10[v25];
        if (a6 >= 2)
          break;
        v45 = 0;
        if (a6 > 0)
          goto LABEL_60;
LABEL_45:
        a3 += a4;
        ++v10;
        v24 = v42 - 1;
        if (!v42)
          return;
      }
      v45 = 0;
      v46 = (float64x2_t *)v12;
      v47 = (float64x2_t *)*v10;
      v48 = (float64x2_t *)v10[v25];
      do
      {
        v49 = (_WORD *)(a3 + 2 * v45);
        v50 = *v47++;
        v51 = vaddq_f64(*v46, v50);
        v52 = (uint64_t)rint(v51.f64[0]);
        if ((int)v52 <= -32768)
          LODWORD(v52) = -32768;
        if ((int)v52 >= 0x7FFF)
          LOWORD(v52) = 0x7FFF;
        *v49 = v52;
        v53 = (uint64_t)rint(v51.f64[1]);
        if ((int)v53 <= -32768)
          LODWORD(v53) = -32768;
        if ((int)v53 >= 0x7FFF)
          LOWORD(v53) = 0x7FFF;
        v49[1] = v53;
        v54 = *v48++;
        *v46++ = vsubq_f64(v51, v54);
        v45 += 2;
      }
      while (v45 <= v26);
      v45 = v45;
      if ((int)v45 >= a6)
        goto LABEL_45;
      do
      {
LABEL_60:
        v55 = v12[v45] + v43[v45];
        v56 = (uint64_t)rint(v55);
        if ((int)v56 <= -32768)
          LODWORD(v56) = -32768;
        if ((int)v56 >= 0x7FFF)
          LOWORD(v56) = 0x7FFF;
        *(_WORD *)(a3 + 2 * v45) = v56;
        v12[v45] = v55 - v44[v45];
        ++v45;
      }
      while (a6 != v45);
      goto LABEL_45;
    }
    while (1)
    {
      v27 = v24;
      v28 = *v10;
      v29 = v10[v25];
      if (a6 >= 2)
        break;
      v30 = 0;
      if (a6 > 0)
        goto LABEL_39;
LABEL_24:
      a3 += a4;
      ++v10;
      v24 = v27 - 1;
      if (!v27)
        return;
    }
    v30 = 0;
    v31 = (float64x2_t *)v10[v25];
    v32 = (float64x2_t *)*v10;
    v33 = (float64x2_t *)v12;
    do
    {
      v34 = (_WORD *)(a3 + 2 * v30);
      v35 = *v32++;
      v36 = vaddq_f64(*v33, v35);
      v37 = (uint64_t)rint(v14 * v36.f64[0]);
      if ((int)v37 <= -32768)
        LODWORD(v37) = -32768;
      if ((int)v37 >= 0x7FFF)
        LOWORD(v37) = 0x7FFF;
      *v34 = v37;
      v38 = (uint64_t)rint(vmuld_lane_f64(v14, v36, 1));
      if ((int)v38 <= -32768)
        LODWORD(v38) = -32768;
      if ((int)v38 >= 0x7FFF)
        LOWORD(v38) = 0x7FFF;
      v34[1] = v38;
      v39 = *v31++;
      *v33++ = vsubq_f64(v36, v39);
      v30 += 2;
    }
    while (v30 <= v26);
    v30 = v30;
    if ((int)v30 >= a6)
      goto LABEL_24;
    do
    {
LABEL_39:
      v40 = v12[v30] + v28[v30];
      v41 = (uint64_t)rint(v14 * v40);
      if ((int)v41 <= -32768)
        LODWORD(v41) = -32768;
      if ((int)v41 >= 0x7FFF)
        LOWORD(v41) = 0x7FFF;
      *(_WORD *)(a3 + 2 * v30) = v41;
      v12[v30] = v40 - v29[v30];
      ++v30;
    }
    while (a6 != v30);
    goto LABEL_24;
  }
}

void sub_1003516F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10035170C(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100351718()
{
  operator delete();
}

uint64_t sub_10035172C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_100351768(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454910;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return nullsub_1(a1);
}

void sub_1003517A4(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454910;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);
  operator delete();
}

void sub_1003517F4(uint64_t a1, _QWORD *a2, int32x4_t *a3, int a4, int a5, int a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  int v11;
  _QWORD *v15;
  int32x4_t *v17;
  int32x4_t **v18;
  double v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  int8x16_t *v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  int32x4_t v43;
  float32x4_t v44;
  int v45;
  __int128 v46;
  int v47;
  __int128 v48;
  int v49;
  _DWORD *v50;
  _QWORD *v51;
  int *v52;
  _DWORD *v53;
  _DWORD *v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  int32x4_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int32x4_t *v71;
  int32x4_t *v72;
  uint64_t v73;
  uint64_t v74;
  int32x4_t *v75;
  uint64_t v76;
  unint64_t v77;
  int32x4_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int32x4_t *v83;
  int32x4_t *v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int32x4_t *v92;
  _QWORD *v93;
  int32x4_t *v94;
  int32x4_t *v95;
  int32x4_t *v96;
  int32x4_t *v97;
  int32x4_t *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int32x4_t *v102;
  int32x4_t *v103;
  uint64_t v104;
  int32x4_t *v105;
  int32x4_t v106;
  int32x4_t *v107;
  _QWORD *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int32x4_t *v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  BOOL v123;
  BOOL v125;
  BOOL v127;
  BOOL v129;
  unint64_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int v139;
  int v140;
  __n128 v141;
  __n128 v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  _QWORD *v148;
  unint64_t v149;
  uint64_t v150[2];

  v11 = a6;
  v15 = a2;
  v18 = (int32x4_t **)(a1 + 32);
  v17 = *(int32x4_t **)(a1 + 32);
  v19 = *(double *)(a1 + 16);
  v20 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v17) >> 2;
  if ((_DWORD)v20 == a6)
  {
    v21 = *(_DWORD *)(a1 + 24);
    if (v21)
    {
      v22 = *(_DWORD *)(a1 + 8) - 1;
      if (v21 != v22)
      {
        v150[0] = 0;
        v150[1] = 0;
        v23 = sub_10029430C(v150, 19);
        *(_DWORD *)(v23 + 15) = 825058682;
        *(_OWORD *)v23 = *(_OWORD *)"sumCount == ksize-1";
        sub_100294B74(-215, v150, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 866);
      }
      v15 = &a2[v22];
      goto LABEL_18;
    }
  }
  else
  {
    if (a6 <= v20)
    {
      if (a6 < v20)
        *(_QWORD *)(a1 + 40) = (char *)v17 + 4 * a6;
    }
    else
    {
      sub_100223D9C(a1 + 32, a6 - v20);
      v17 = *v18;
    }
    *(_DWORD *)(a1 + 24) = 0;
  }
  bzero(v17, 4 * v11);
  v24 = *(_DWORD *)(a1 + 24);
  v25 = *(_DWORD *)(a1 + 8) - 1;
  if (v24 < v25)
  {
    v26 = (v11 - 4);
    if (v11 >= 4)
    {
      if ((v26 & 0xFFFFFFFC) + 5 <= v11)
        v58 = v11;
      else
        v58 = (v26 & 0xFFFFFFFC) + 5;
      v59 = 4 * v58 - ((4 * (v11 - 4)) & 0x3FFFFFFF0);
      v60 = v58 - (v26 & 0xFFFFFFFC) - 4;
      v61 = v60 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v63 = 0;
        v64 = 0;
        v65 = (_DWORD *)*v15;
        v66 = *v15 + 32;
        v67 = v17 + 2;
        v68 = 4;
        do
        {
          v69 = v68;
          v70 = v63;
          v71 = (int32x4_t *)v66;
          v72 = v67;
          v17[v64 / 4] = vaddq_s32(*(int32x4_t *)&v65[v64], v17[v64 / 4]);
          v64 += 4;
          v68 += 4;
          ++v63;
          v66 += 16;
          ++v67;
        }
        while (v64 <= v26);
        if ((int)v64 < v11)
        {
          if (v60 < 8)
            goto LABEL_114;
          v73 = 16 * v70;
          v74 = v73 + 16;
          v75 = &v17[(unint64_t)v73 / 0x10 + 1];
          v76 = v59 + v73;
          if (v75 < (int32x4_t *)((char *)v65 + v76) && (char *)v65 + v74 < (char *)v17->i32 + v76)
            goto LABEL_114;
          v69 += v61;
          v77 = v60 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v78 = vaddq_s32(*v72, *v71);
            v72[-1] = vaddq_s32(v72[-1], v71[-1]);
            *v72 = v78;
            v71 += 2;
            v72 += 2;
            v77 -= 8;
          }
          while (v77);
          if (v60 != v61)
          {
LABEL_114:
            do
            {
              v17->i32[v69] += v65[v69];
              ++v69;
            }
            while (v69 < v11);
          }
        }
        v62 = *(_DWORD *)(a1 + 24) + 1;
        *(_DWORD *)(a1 + 24) = v62;
        ++v15;
      }
      while (v62 < *(_DWORD *)(a1 + 8) - 1);
    }
    else if (v11 >= 1)
    {
      do
      {
        v50 = (_DWORD *)*v15;
        v17->i32[0] += *(_DWORD *)*v15;
        if (v11 != 1)
        {
          v17->i32[1] += v50[1];
          if (v11 != 2)
            v17->i32[2] += v50[2];
        }
        v49 = *(_DWORD *)(a1 + 24) + 1;
        *(_DWORD *)(a1 + 24) = v49;
        ++v15;
      }
      while (v49 < *(_DWORD *)(a1 + 8) - 1);
    }
    else
    {
      if (v25 <= v24 + 1)
        v27 = v24 + 1;
      else
        v27 = *(_DWORD *)(a1 + 8) - 1;
      v15 += (v27 + ~v24) + 1;
      *(_DWORD *)(a1 + 24) = v27;
    }
  }
LABEL_18:
  if (!a5)
    return;
  v28 = a5 - 1;
  v29 = (v11 - 4);
  a11.n128_f32[0] = v19;
  v30 = a4;
  v146 = v11;
  if (v19 != 1.0)
  {
    v31 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
    do
    {
      v32 = v28;
      v33 = (_DWORD *)*v15;
      v148 = v15;
      v34 = v15[1 - *(int *)(a1 + 8)];
      if (v11 >= 4)
      {
        v35 = 0;
        v38 = 0;
        do
        {
          v39 = v17[v38 / 0x10];
          v40 = *(int32x4_t *)&v33[v38 / 4];
          v41 = atomic_load((unsigned __int8 *)qword_10048AA00);
          if ((v41 & 1) == 0)
          {
            v143 = v30;
            v141 = a11;
            v139 = v32;
            v135 = *(int32x4_t *)&v33[v38 / 4];
            v137 = v17[v38 / 0x10];
            v45 = __cxa_guard_acquire(qword_10048AA00);
            v40 = v135;
            v39 = v137;
            v32 = v139;
            *(_QWORD *)&v46 = 0x8000000080000000;
            *((_QWORD *)&v46 + 1) = 0x8000000080000000;
            v31 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            a11 = v141;
            v30 = v143;
            if (v45)
            {
              xmmword_10048A9F0 = v46;
              __cxa_guard_release(qword_10048AA00);
              v40 = v135;
              v39 = v137;
              v32 = v139;
              v31 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
              a11 = v141;
              v30 = v143;
            }
          }
          v42 = atomic_load((unsigned __int8 *)qword_10048AA20);
          if ((v42 & 1) == 0)
          {
            v144 = v30;
            v142 = a11;
            v140 = v32;
            v136 = v40;
            v138 = v39;
            v47 = __cxa_guard_acquire(qword_10048AA20);
            v40 = v136;
            v39 = v138;
            v32 = v140;
            *(_QWORD *)&v48 = 0x3F0000003F000000;
            *((_QWORD *)&v48 + 1) = 0x3F0000003F000000;
            v31 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
            a11 = v142;
            v30 = v144;
            if (v47)
            {
              xmmword_10048AA10 = v48;
              __cxa_guard_release(qword_10048AA20);
              v40 = v136;
              v39 = v138;
              v32 = v140;
              v31 = (int8x16_t *)&OBJC_IVAR____TtC7Measure23PlaneSelectionStatsView_adCountLabel;
              a11 = v142;
              v30 = v144;
            }
          }
          v43 = vaddq_s32(v40, v39);
          v44 = vmulq_n_f32(vcvtq_f32_s32(v43), a11.n128_f32[0]);
          a3[v38 / 0x10] = vcvtq_s32_f32(vaddq_f32(v44, (float32x4_t)vorrq_s8(vandq_s8(v31[159], (int8x16_t)v44), (int8x16_t)xmmword_10048AA10)));
          v17[v38 / 0x10] = vsubq_s32(v43, *(int32x4_t *)(v34 + v38));
          v38 += 16;
          v35 += 4;
        }
        while ((int)v29 >= v35);
      }
      else
      {
        v35 = 0;
      }
      v11 = v146;
      if (v35 < v146)
      {
        v36 = v35;
        do
        {
          v37 = v33[v36] + v17->i32[v36];
          a3->i32[v36] = (uint64_t)rint(v19 * (double)v37);
          v17->i32[v36] = v37 - *(_DWORD *)(v34 + v36 * 4);
          ++v36;
          ++v35;
        }
        while (v35 < v146);
      }
      a3 = (int32x4_t *)((char *)a3 + v30);
      v15 = v148 + 1;
      v28 = v32 - 1;
    }
    while (v32);
    return;
  }
  if (v11 >= 4)
  {
    v79 = 0;
    v80 = v11;
    if ((unint64_t)(v29 & 0xFFFFFFFC) + 5 <= v11)
      v81 = v11;
    else
      v81 = (v29 & 0xFFFFFFFC) + 5;
    v82 = 4 * v81 - ((4 * (v11 - 4)) & 0x3FFFFFFF0);
    v149 = v81 - (v29 & 0xFFFFFFFC) - 4;
    v145 = v149 & 0xFFFFFFFFFFFFFFF8;
    v83 = a3 + 2;
    v84 = a3;
    while (1)
    {
      v85 = v15;
      v86 = 0;
      v87 = 0;
      v88 = v28;
      v89 = v30;
      v90 = v79 * v30 + 16;
      v91 = v82 + v79 * v30;
      v92 = (int32x4_t *)v85[1 - *(int *)(a1 + 8)];
      v93 = v85;
      v94 = (int32x4_t *)*v85;
      v95 = v94 + 2;
      v96 = v92 + 2;
      v97 = v83;
      v98 = v17 + 2;
      v99 = 4;
      do
      {
        v100 = v99;
        v101 = v86;
        v102 = v98;
        v103 = v95;
        v104 = 4 * v87;
        v105 = v97;
        v106 = vaddq_s32(v94[v87 / 4], v17[v87 / 4]);
        *(int32x4_t *)((char *)v84 + v104) = v106;
        v107 = v96;
        *(int32x4_t *)((char *)v17 + v104) = vsubq_s32(v106, v92[v87 / 4]);
        v87 += 4;
        v99 = v100 + 4;
        ++v86;
        ++v98;
        ++v95;
        ++v97;
        ++v96;
      }
      while (v87 <= v29);
      v108 = v93;
      if ((int)v87 >= v146)
        goto LABEL_68;
      if (v149 >= 0x14)
      {
        v111 = 16 * v101;
        v112 = (unint64_t)a3[v101].u64 + v90;
        v113 = (unint64_t)a3[v101].u64 + v91;
        v114 = v111 + 16;
        v115 = &v17[(unint64_t)v111 / 0x10 + 1];
        v116 = v82 + v111;
        v117 = &v17->i8[v116];
        v118 = (unint64_t)v94->u64 + v114;
        v119 = (unint64_t)v94->u64 + v116;
        v120 = (unint64_t)v92->u64 + v114;
        v121 = (unint64_t)v92->u64 + v116;
        v123 = v112 < (unint64_t)v94->u64 + v116 && v118 < v113;
        v125 = v112 < v121 && v120 < v113;
        v127 = (unint64_t)v115 < v119 && v118 < (unint64_t)v117;
        v129 = (unint64_t)v115 < v121 && v120 < (unint64_t)v117;
        if ((unint64_t)v115 >= v113 || v112 >= (unint64_t)v117)
        {
          v108 = v93;
          if (!v123 && !v125 && !v127 && !v129)
          {
            v131 = v149 & 0xFFFFFFFFFFFFFFF8;
            v100 += v145;
            do
            {
              v132 = vaddq_s32(v103[-1], v102[-1]);
              v133 = vaddq_s32(*v103, *v102);
              v105[-1] = v132;
              *v105 = v133;
              v134 = vsubq_s32(v133, *v107);
              v102[-1] = vsubq_s32(v132, v107[-1]);
              *v102 = v134;
              v102 += 2;
              v103 += 2;
              v105 += 2;
              v107 += 2;
              v131 -= 8;
            }
            while (v131);
            if (v149 == v145)
              goto LABEL_68;
          }
        }
        else
        {
          v108 = v93;
        }
      }
      do
      {
        v109 = v100;
        v110 = v94->i32[v100] + v17->i32[v100];
        v84->i32[v109] = v110;
        v17->i32[v109] = v110 - v92->i32[v100++];
      }
      while (v100 < v80);
LABEL_68:
      v30 = v89;
      v84 = (int32x4_t *)((char *)v84 + v89);
      v15 = v108 + 1;
      v28 = v88 - 1;
      ++v79;
      v83 = (int32x4_t *)((char *)v83 + v89);
      if (!v88)
        return;
    }
  }
  if (v11 >= 1)
  {
    v51 = v15 + 1;
    v52 = &a3->i32[2];
    do
    {
      v53 = (_DWORD *)*(v51 - 1);
      v54 = (_DWORD *)v51[-*(int *)(a1 + 8)];
      v55 = *v53 + v17->i32[0];
      *(v52 - 2) = v55;
      v17->i32[0] = v55 - *v54;
      if (v11 != 1)
      {
        v56 = v53[1] + v17->i32[1];
        *(v52 - 1) = v56;
        v17->i32[1] = v56 - v54[1];
        if (v11 != 2)
        {
          v57 = v53[2] + v17->i32[2];
          *v52 = v57;
          v17->i32[2] = v57 - v54[2];
        }
      }
      ++v51;
      v52 = (int *)((char *)v52 + a4);
      --a5;
    }
    while (a5);
  }
}

void sub_100352008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100352020(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10035202C()
{
  operator delete();
}

uint64_t sub_100352040(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10035207C(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454998;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return nullsub_1(a1);
}

void sub_1003520B8(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454998;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);
  operator delete();
}

void sub_100352108(uint64_t a1, _QWORD *a2, float32x4_t *a3, int a4, int a5, int a6)
{
  _QWORD *v10;
  int32x4_t *v12;
  int32x4_t **v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int32x4_t *v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int32x4_t *v34;
  int32x4_t v35;
  int32x4_t v36;
  float32x4_t *v37;
  unint64_t v38;
  double v39;
  uint64_t v40;
  __int32 *v41;
  BOOL v43;
  unint64_t v45;
  int32x4_t v46;
  int64x2_t v47;
  float64x2_t v48;
  uint64_t v49;
  int v50;
  float32_t v51;
  int v52;
  _DWORD *v53;
  _QWORD *v54;
  float *v55;
  _DWORD *v56;
  int v57;
  _DWORD *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  int32x4_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int32x4_t *v78;
  int32x4_t *v79;
  uint64_t v80;
  uint64_t v81;
  int32x4_t *v82;
  uint64_t v83;
  unint64_t v84;
  int32x4_t v85;
  uint64_t v86;
  unint64_t v87;
  float32x4_t *v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  int32x4_t *v92;
  _DWORD *v93;
  uint64_t i64;
  int32x4_t *v95;
  float32x4_t *v96;
  int32x4_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int32x4_t *v101;
  int32x4_t *v102;
  float32x4_t *v103;
  int32x4_t *v104;
  int32x4_t *v105;
  int32x4_t *v106;
  int32x4_t v107;
  int32x4_t v108;
  float32x4_t *v109;
  int32x4_t *v110;
  int32x4_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  unint64_t v118;
  BOOL v119;
  BOOL v120;
  unint64_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  double v129;
  uint64_t v130;
  uint64_t v131[2];

  v10 = a2;
  v13 = (int32x4_t **)(a1 + 32);
  v12 = *(int32x4_t **)(a1 + 32);
  v129 = *(double *)(a1 + 16);
  v14 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v12) >> 2;
  if ((_DWORD)v14 == a6)
  {
    v15 = *(_DWORD *)(a1 + 24);
    if (v15)
    {
      v16 = *(_DWORD *)(a1 + 8) - 1;
      if (v15 != v16)
      {
        v131[0] = 0;
        v131[1] = 0;
        v17 = sub_10029430C(v131, 19);
        *(_DWORD *)(v17 + 15) = 825058682;
        *(_OWORD *)v17 = *(_OWORD *)"sumCount == ksize-1";
        sub_100294B74(-215, v131, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 986);
      }
      v10 = &a2[v16];
      goto LABEL_18;
    }
  }
  else
  {
    if (a6 <= v14)
    {
      if (a6 < v14)
        *(_QWORD *)(a1 + 40) = (char *)v12 + 4 * a6;
    }
    else
    {
      sub_100223D9C(a1 + 32, a6 - v14);
      v12 = *v13;
    }
    *(_DWORD *)(a1 + 24) = 0;
  }
  bzero(v12, 4 * a6);
  v18 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 8) - 1;
  if (v18 < v19)
  {
    v20 = (a6 - 4);
    if (a6 >= 4)
    {
      if ((v20 & 0xFFFFFFFC) + 5 <= a6)
        v65 = a6;
      else
        v65 = (v20 & 0xFFFFFFFC) + 5;
      v66 = 4 * v65 - ((4 * (a6 - 4)) & 0x3FFFFFFF0);
      v67 = v65 - (v20 & 0xFFFFFFFC) - 4;
      v68 = v67 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v70 = 0;
        v71 = 0;
        v72 = (_DWORD *)*v10;
        v73 = *v10 + 32;
        v74 = v12 + 2;
        v75 = 4;
        do
        {
          v76 = v75;
          v77 = v70;
          v78 = (int32x4_t *)v73;
          v79 = v74;
          v12[v71 / 4] = vaddq_s32(*(int32x4_t *)&v72[v71], v12[v71 / 4]);
          v71 += 4;
          v75 += 4;
          ++v70;
          v73 += 16;
          ++v74;
        }
        while (v71 <= v20);
        if ((int)v71 < a6)
        {
          if (v67 < 8)
            goto LABEL_108;
          v80 = 16 * v77;
          v81 = v80 + 16;
          v82 = &v12[(unint64_t)v80 / 0x10 + 1];
          v83 = v66 + v80;
          if (v82 < (int32x4_t *)((char *)v72 + v83) && (char *)v72 + v81 < (char *)v12->i32 + v83)
            goto LABEL_108;
          v76 += v68;
          v84 = v67 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v85 = vaddq_s32(*v79, *v78);
            v79[-1] = vaddq_s32(v79[-1], v78[-1]);
            *v79 = v85;
            v78 += 2;
            v79 += 2;
            v84 -= 8;
          }
          while (v84);
          if (v67 != v68)
          {
LABEL_108:
            do
            {
              v12->i32[v76] += v72[v76];
              ++v76;
            }
            while (v76 < a6);
          }
        }
        v69 = *(_DWORD *)(a1 + 24) + 1;
        *(_DWORD *)(a1 + 24) = v69;
        ++v10;
      }
      while (v69 < *(_DWORD *)(a1 + 8) - 1);
    }
    else if (a6 >= 1)
    {
      do
      {
        v53 = (_DWORD *)*v10;
        v12->i32[0] += *(_DWORD *)*v10;
        if (a6 != 1)
        {
          v12->i32[1] += v53[1];
          if (a6 != 2)
            v12->i32[2] += v53[2];
        }
        v52 = *(_DWORD *)(a1 + 24) + 1;
        *(_DWORD *)(a1 + 24) = v52;
        ++v10;
      }
      while (v52 < *(_DWORD *)(a1 + 8) - 1);
    }
    else
    {
      if (v19 <= v18 + 1)
        v21 = v18 + 1;
      else
        v21 = *(_DWORD *)(a1 + 8) - 1;
      v10 += (v21 + ~v18) + 1;
      *(_DWORD *)(a1 + 24) = v21;
    }
  }
LABEL_18:
  if (a5)
  {
    v22 = a5 - 1;
    v23 = (a6 - 8);
    v24 = v129;
    v25 = a4;
    if (v129 != 1.0)
    {
      v26 = 4 * a6;
      v27 = (unint64_t)v12->u64 + v26;
      v28 = v12 + 1;
      while (1)
      {
        v29 = v22;
        v30 = (_DWORD *)*v10;
        v31 = v10[1 - *(int *)(a1 + 8)];
        if (a6 >= 8)
        {
          v33 = 0;
          v32 = 0;
          do
          {
            v34 = &v28[v33 / 0x10];
            v35 = vaddq_s32(*(int32x4_t *)&v30[v33 / 4], v12[v33 / 0x10]);
            v36 = vaddq_s32(*(int32x4_t *)&v30[v33 / 4 + 4], v28[v33 / 0x10]);
            v37 = &a3[v33 / 0x10];
            *v37 = vmulq_n_f32(vcvtq_f32_s32(v35), v24);
            v37[1] = vmulq_n_f32(vcvtq_f32_s32(v36), v24);
            v34[-1] = vsubq_s32(v35, *(int32x4_t *)(v31 + v33));
            *v34 = vsubq_s32(v36, *(int32x4_t *)(v31 + 16 + v33));
            v32 += 8;
            v33 += 32;
          }
          while (v32 <= (int)v23);
          v32 = v32;
          if ((int)v32 >= a6)
            goto LABEL_21;
        }
        else
        {
          v32 = 0;
          if (a6 <= 0)
            goto LABEL_21;
        }
        v38 = a6 - v32;
        if (v38 >= 8)
        {
          v40 = 4 * v32;
          v41 = &v12->i32[v32];
          v43 = (unint64_t)v41 < v31 + v26 && v31 + 4 * v32 < v27;
          if ((unint64_t)&v30[v32] >= v27 || v41 >= &v30[(unint64_t)v26 / 4])
          {
            if (v43)
            {
              v39 = v129;
            }
            else
            {
              v32 += v38 & 0xFFFFFFFFFFFFFFFCLL;
              v45 = v38 & 0xFFFFFFFFFFFFFFFCLL;
              v39 = v129;
              do
              {
                v46 = vaddq_s32(*(int32x4_t *)&v30[(unint64_t)v40 / 4], *(int32x4_t *)((char *)v12 + v40));
                v47.i64[0] = v46.i32[0];
                v47.i64[1] = v46.i32[1];
                v48 = vcvtq_f64_s64(v47);
                v47.i64[0] = v46.i32[2];
                v47.i64[1] = v46.i32[3];
                *(float32x4_t *)((char *)a3 + v40) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v48, v129)), vmulq_n_f64(vcvtq_f64_s64(v47), v129));
                *(int32x4_t *)((char *)v12 + v40) = vsubq_s32(v46, *(int32x4_t *)(v31 + v40));
                v40 += 16;
                v45 -= 4;
              }
              while (v45);
              if (v38 == (v38 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_21;
            }
          }
          else
          {
            v39 = v129;
          }
        }
        else
        {
          v39 = v129;
        }
        do
        {
          v49 = v32;
          v50 = v30[v32] + v12->i32[v32];
          v51 = v39 * (double)v50;
          a3->f32[v49] = v51;
          v12->i32[v49] = v50 - *(_DWORD *)(v31 + 4 * v32++);
        }
        while (a6 != v32);
LABEL_21:
        a3 = (float32x4_t *)((char *)a3 + a4);
        ++v10;
        v22 = v29 - 1;
        if (!v29)
          return;
      }
    }
    if (a6 >= 8)
    {
      if ((unint64_t)(v23 & 0xFFFFFFF8) + 9 <= a6)
        v86 = a6;
      else
        v86 = (v23 & 0xFFFFFFF8) + 9;
      v130 = 4 * v86 - ((4 * (a6 - 8)) & 0x3FFFFFFE0);
      v87 = v86 - (v23 & 0xFFFFFFF8) - 8;
      v128 = v86 & 7;
      v88 = a3 + 3;
      do
      {
        v89 = 0;
        v90 = 0;
        v91 = v22;
        v92 = (int32x4_t *)v10[1 - *(int *)(a1 + 8)];
        v93 = (_DWORD *)*v10;
        i64 = *v10 + 48;
        v95 = v92 + 3;
        v96 = v88;
        v97 = v12 + 3;
        v98 = 8;
        do
        {
          v99 = v98;
          v100 = v89;
          v101 = v97;
          v102 = (int32x4_t *)i64;
          v103 = v96;
          v104 = v95;
          v105 = &v12[v90 / 4];
          v106 = (int32x4_t *)&v93[v90];
          v107 = vaddq_s32(*v106, *v105);
          v108 = vaddq_s32(v106[1], v105[1]);
          v109 = &a3[v90 / 4];
          *v109 = vcvtq_f32_s32(v107);
          v109[1] = vcvtq_f32_s32(v108);
          v110 = &v92[v90 / 4];
          *v105 = vsubq_s32(v107, *v110);
          v111 = v110[1];
          v90 += 8;
          v98 = v99 + 8;
          ++v89;
          v97 = v101 + 2;
          v105[1] = vsubq_s32(v108, v111);
          i64 = (uint64_t)v102[2].i64;
          v96 += 2;
          v95 += 2;
        }
        while (v90 <= v23);
        if ((int)v90 < a6)
        {
          if (v87 < 8)
            goto LABEL_109;
          v112 = 32 * v100 + 32;
          v113 = &v12->i8[v112];
          v114 = v130 + 32 * v100;
          v115 = &v12->i8[v114];
          v116 = (char *)v93 + v112;
          v117 = (char *)v93 + v114;
          v118 = (unint64_t)v92->u64 + v112;
          v119 = v113 >= &v92->i8[v114] || v118 >= (unint64_t)v115;
          v120 = !v119;
          if (v116 < v115 && v113 < v117)
            goto LABEL_109;
          if (v120)
            goto LABEL_109;
          v99 += v87 - v128;
          v122 = v87 - v128;
          do
          {
            v123 = vaddq_s32(v102[-1], v101[-1]);
            v124 = vaddq_s32(*v102, *v101);
            v103[-1] = vcvtq_f32_s32(v123);
            *v103 = vcvtq_f32_s32(v124);
            v125 = vsubq_s32(v124, *v104);
            v101[-1] = vsubq_s32(v123, v104[-1]);
            *v101 = v125;
            v101 += 2;
            v102 += 2;
            v103 += 2;
            v104 += 2;
            v122 -= 8;
          }
          while (v122);
          if (v128)
          {
LABEL_109:
            do
            {
              v126 = v99;
              v127 = v93[v99] + v12->i32[v99];
              a3->f32[v126] = (float)v127;
              v12->i32[v126] = v127 - v92->i32[v99++];
            }
            while (v99 < a6);
          }
        }
        a3 = (float32x4_t *)((char *)a3 + v25);
        ++v10;
        v22 = v91 - 1;
        v88 = (float32x4_t *)((char *)v88 + v25);
      }
      while (v91);
    }
    else if (a6 >= 1)
    {
      v54 = v10 + 1;
      v55 = &a3->f32[3];
      do
      {
        v56 = (_DWORD *)*(v54 - 1);
        v57 = *v56 + v12->i32[0];
        v58 = (_DWORD *)v54[-*(int *)(a1 + 8)];
        *(v55 - 3) = (float)v57;
        v12->i32[0] = v57 - *v58;
        if (a6 != 1)
        {
          v59 = v56[1] + v12->i32[1];
          *(v55 - 2) = (float)v59;
          v12->i32[1] = v59 - v58[1];
          if (a6 != 2)
          {
            v60 = v56[2] + v12->i32[2];
            *(v55 - 1) = (float)v60;
            v12->i32[2] = v60 - v58[2];
            if (a6 != 3)
            {
              v61 = v56[3] + v12->i32[3];
              *v55 = (float)v61;
              v12->i32[3] = v61 - v58[3];
              if (a6 != 4)
              {
                v62 = v56[4] + v12[1].i32[0];
                v55[1] = (float)v62;
                v12[1].i32[0] = v62 - v58[4];
                if (a6 != 5)
                {
                  v63 = v56[5] + v12[1].i32[1];
                  v55[2] = (float)v63;
                  v12[1].i32[1] = v63 - v58[5];
                  if (a6 != 6)
                  {
                    v64 = v56[6] + v12[1].i32[2];
                    v55[3] = (float)v64;
                    v12[1].i32[2] = v64 - v58[6];
                  }
                }
              }
            }
          }
        }
        ++v54;
        v55 = (float *)((char *)v55 + a4);
        --a5;
      }
      while (a5);
    }
  }
}

void sub_10035295C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100352974(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100352980()
{
  operator delete();
}

uint64_t sub_100352994(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1003529D0(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454A20;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return nullsub_1(a1);
}

void sub_100352A0C(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454A20;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);
  operator delete();
}

void sub_100352A5C(uint64_t a1, double **a2, float *a3, int a4, int a5, int a6)
{
  double **v10;
  double *v12;
  double **v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  double v20;
  int v21;
  double *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  float *v33;
  int v34;
  double *v35;
  double *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v40;
  double v42;
  uint64_t v43;
  float64x2_t *v44;
  float *v45;
  float64x2_t *v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  double *v56;
  float *v57;
  double *v58;
  double *v59;
  double v60;
  double v61;
  float v62;
  float v63;
  double v64;
  double v65;
  unint64_t v66;
  uint64_t v67;
  double *v68;
  BOOL v69;
  char v70;
  BOOL v71;
  uint64_t v72;
  float64x2_t *v73;
  float64x2_t *v74;
  uint64_t v75;
  float64x2_t *v76;
  unint64_t v77;
  double v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  double v85;
  float v86;
  double v87;
  double *v88;
  double *v89;
  double v90;
  float v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  double *v96;
  uint64_t v97;
  unint64_t v98;
  float *v99;
  int v100;
  double *v101;
  double *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float *v108;
  double *v109;
  double *v110;
  double *v111;
  double v112;
  double v113;
  float v114;
  float v115;
  double v116;
  double v117;
  unint64_t v118;
  double v119;
  float v120;
  BOOL v122;
  uint64_t v124;
  float64x2_t *v125;
  float *v126;
  float64x2_t *v127;
  float64x2_t *v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  unint64_t v148;
  BOOL v150;
  uint64_t v152;
  float64x2_t *v153;
  float64x2_t *v154;
  uint64_t v155;
  float64x2_t *v156;
  unint64_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  uint64_t v164;
  float64x2_t *v165;
  float64x2_t *v167;
  uint64_t v168;
  float64x2_t *v169;
  float64x2_t v170;
  uint64_t v171;
  double *v172;
  double *v173;
  uint64_t v174;
  double v175;
  double v176;
  unint64_t v177;
  uint64_t v178[2];
  float32x4x2_t v179;
  float32x4x2_t v180;

  v10 = a2;
  v13 = (double **)(a1 + 32);
  v12 = *(double **)(a1 + 32);
  v176 = *(double *)(a1 + 16);
  v14 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v12) >> 3;
  if ((_DWORD)v14 != a6)
  {
    if (a6 <= v14)
    {
      if (a6 < v14)
        *(_QWORD *)(a1 + 40) = &v12[a6];
    }
    else
    {
      sub_100315378(a1 + 32, a6 - v14);
      v12 = *v13;
    }
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_11;
  }
  v15 = *(_DWORD *)(a1 + 24);
  if (!v15)
  {
LABEL_11:
    bzero(v12, 8 * a6);
    v16 = *(_DWORD *)(a1 + 8);
    v18 = v16 - 1;
    v19 = *(_DWORD *)(a1 + 24);
    if (v19 >= v16 - 1)
      goto LABEL_21;
    if (a6 <= 0)
    {
      v10 += (v16 - v19 - 2) + 1;
LABEL_20:
      *(_DWORD *)(a1 + 24) = v18;
      goto LABEL_21;
    }
    if (a6 < 4)
    {
      v20 = *v12;
      v21 = ~v19 + v16;
      do
      {
        v22 = *v10;
        v20 = **v10 + v20;
        *v12 = v20;
        if (a6 != 1)
        {
          v12[1] = v22[1] + v12[1];
          if (a6 != 2)
            v12[2] = v22[2] + v12[2];
        }
        ++v10;
        --v21;
      }
      while (v21);
      goto LABEL_20;
    }
    v164 = a6;
    while (1)
    {
      v165 = (float64x2_t *)*v10;
      if (v12 >= &(*v10)[v164] || v165 >= (float64x2_t *)&v12[v164])
      {
        v167 = v165 + 1;
        v168 = a6 & 0xFFFFFFFC;
        v169 = (float64x2_t *)(v12 + 2);
        do
        {
          v170 = vaddq_f64(*v167, *v169);
          v169[-1] = vaddq_f64(v167[-1], v169[-1]);
          *v169 = v170;
          v167 += 2;
          v169 += 2;
          v168 -= 4;
        }
        while (v168);
        v171 = a6 & 0xFFFFFFFC;
        if (v171 == a6)
          goto LABEL_125;
      }
      else
      {
        v171 = 0;
      }
      v172 = &v165->f64[v171];
      v173 = &v12[v171];
      v174 = a6 - v171;
      do
      {
        v175 = *v172++;
        *v173 = v175 + *v173;
        ++v173;
        --v174;
      }
      while (v174);
LABEL_125:
      ++v19;
      ++v10;
      if (v19 == v18)
        goto LABEL_20;
    }
  }
  v16 = *(_DWORD *)(a1 + 8);
  if (v15 != v16 - 1)
  {
    v178[0] = 0;
    v178[1] = 0;
    v17 = sub_10029430C(v178, 19);
    *(_DWORD *)(v17 + 15) = 825058682;
    *(_OWORD *)v17 = *(_OWORD *)"sumCount == ksize-1";
    sub_100294B74(-215, v178, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 228);
  }
  v10 = &a2[v16 - 1];
LABEL_21:
  if (!a5)
    return;
  v23 = a5 - 1;
  v24 = 1 - v16;
  v25 = (a6 - 2);
  v26 = a4;
  if (v176 != 1.0)
  {
    v27 = a6;
    v28 = (unint64_t)&v12[v27];
    if ((int)v25 <= 1)
      v29 = 1;
    else
      v29 = (int)v25;
    v30 = ((8 * v29) & 0x3FFFFFFF0) + 16;
    v31 = (double *)((char *)v12 + v30);
    v32 = (v29 >> 1) + 1;
    v33 = a3 + 1;
    while (1)
    {
      v34 = v23;
      v35 = *v10;
      v36 = v10[v24];
      if (a6 < 2)
      {
        v37 = 0;
        if (a6 <= 0)
          goto LABEL_27;
        goto LABEL_53;
      }
      if (v29 < 6)
        break;
      v38 = 0;
      v40 = v12 < (double *)((char *)v36 + v30) && v36 < v31;
      if (v35 < v31 && v12 < (double *)((char *)v35 + v30))
        goto LABEL_49;
      v42 = v176;
      if (v40)
        goto LABEL_50;
      v43 = v32 & 0x7FFFFFFC;
      v44 = (float64x2_t *)v10[v24];
      v45 = a3;
      v46 = (float64x2_t *)*v10;
      v47 = (float64x2_t *)v12;
      do
      {
        v48 = vaddq_f64(v47[3], v46[3]);
        v49 = vaddq_f64(v47[2], v46[2]);
        v50 = vaddq_f64(v47[1], v46[1]);
        v51 = vaddq_f64(*v47, *v46);
        v179.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v51, (int64x2_t)v50), v176)), vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v49, (int64x2_t)v48), v176));
        v179.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64((float64x2_t)vzip2q_s64((int64x2_t)v51, (int64x2_t)v50), v176)), vmulq_n_f64((float64x2_t)vzip2q_s64((int64x2_t)v49, (int64x2_t)v48), v176));
        vst2q_f32(v45, v179);
        v45 += 8;
        v52 = v44[2];
        v53 = v44[3];
        v54 = *v44;
        v55 = v44[1];
        v44 += 4;
        v47[2] = vsubq_f64(v49, v52);
        v47[3] = vsubq_f64(v48, v53);
        *v47 = vsubq_f64(v51, v54);
        v47[1] = vsubq_f64(v50, v55);
        v47 += 4;
        v46 += 4;
        v43 -= 4;
      }
      while (v43);
      v38 = 2 * (v32 & 0x7FFFFFFC);
      if (v32 != (v32 & 0x7FFFFFFC))
        goto LABEL_50;
LABEL_52:
      v37 = v38;
      if ((int)v38 >= a6)
        goto LABEL_27;
LABEL_53:
      v66 = a6 - v37;
      if (v66 < 8
        || ((v67 = v37, v68 = &v12[v37], v68 < &v36[v27]) ? (v69 = (unint64_t)&v36[v37] >= v28) : (v69 = 1),
            v69 ? (v70 = 0) : (v70 = 1),
            (unint64_t)&v35[v37] < v28 ? (v71 = v68 >= &v35[v27]) : (v71 = 1),
            !v71 || (v70 & 1) != 0))
      {
        v72 = v37;
        v78 = v176;
      }
      else
      {
        v72 = (v66 & 0xFFFFFFFFFFFFFFFCLL) + v37;
        v73 = (float64x2_t *)&v12[v67];
        v74 = (float64x2_t *)&v35[v67];
        v75 = v37;
        v76 = (float64x2_t *)&v36[v67];
        v77 = v66 & 0xFFFFFFFFFFFFFFFCLL;
        v78 = v176;
        do
        {
          v80 = *v74;
          v79 = v74[1];
          v74 += 2;
          v81 = vaddq_f64(*v73, v80);
          v82 = vaddq_f64(v73[1], v79);
          *(float32x4_t *)&a3[v75] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v81, v176)), vmulq_n_f64(v82, v176));
          v83 = *v76;
          v84 = v76[1];
          v76 += 2;
          *v73 = vsubq_f64(v81, v83);
          v73[1] = vsubq_f64(v82, v84);
          v73 += 2;
          v75 += 4;
          v77 -= 4;
        }
        while (v77);
        if (v66 == (v66 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_27;
      }
      do
      {
        v85 = v12[v72] + v35[v72];
        v86 = v78 * v85;
        a3[v72] = v86;
        v12[v72] = v85 - v36[v72];
        ++v72;
      }
      while (a6 != v72);
LABEL_27:
      a3 = (float *)((char *)a3 + v26);
      ++v10;
      v23 = v34 - 1;
      v33 = (float *)((char *)v33 + v26);
      if (!v34)
        return;
    }
    v38 = 0;
LABEL_49:
    v42 = v176;
LABEL_50:
    v56 = &v35[v38 + 1];
    v57 = &v33[v38];
    v58 = &v36[v38 + 1];
    v59 = &v12[v38 + 1];
    do
    {
      v60 = *(v59 - 1) + *(v56 - 1);
      v61 = *v59 + *v56;
      v62 = v42 * v60;
      v63 = v42 * v61;
      *(v57 - 1) = v62;
      *v57 = v63;
      v64 = v60 - *(v58 - 1);
      v65 = *v58;
      v58 += 2;
      v38 += 2;
      v56 += 2;
      *(v59 - 1) = v64;
      *v59 = v61 - v65;
      v57 += 2;
      v59 += 2;
    }
    while (v38 <= (int)v25);
    goto LABEL_52;
  }
  if (a6 >= 2)
  {
    v92 = (v25 & 0xFFFFFFFE) + 3;
    if (v92 <= a6)
      v92 = a6;
    v93 = (8 * (a6 - 2)) & 0x7FFFFFFF0;
    v177 = 8 * v92 - v93;
    v94 = v92 - (v25 & 0xFFFFFFFE) - 2;
    v95 = v93 + 16;
    v96 = (double *)((char *)v12 + v93 + 16);
    v97 = (v25 >> 1) + 1;
    v98 = v94 & 0xFFFFFFFFFFFFFFFCLL;
    v99 = a3 + 1;
    while (1)
    {
      v100 = v23;
      v101 = *v10;
      v102 = v10[v24];
      if (v25 < 6)
        break;
      v103 = 0;
      v122 = v12 < (double *)((char *)v102 + v95) && v102 < v96;
      v105 = 2;
      if (v101 < v96 && v12 < (double *)((char *)v101 + v95))
      {
        v104 = 0;
LABEL_84:
        v106 = v103 - 1;
        v107 = v105 - 2;
        v108 = &v99[v104];
        v109 = &v101[v104 + 1];
        v110 = &v12[v104 + 1];
        v111 = &v102[v104 + 1];
        do
        {
          v112 = *(v110 - 1) + *(v109 - 1);
          v113 = *v110 + *v109;
          v114 = v112;
          v115 = v113;
          *(v108 - 1) = v114;
          *v108 = v115;
          v116 = v112 - *(v111 - 1);
          v117 = *v111;
          v111 += 2;
          v104 += 2;
          ++v106;
          v107 += 2;
          v108 += 2;
          *(v110 - 1) = v116;
          *v110 = v113 - v117;
          v109 += 2;
          v110 += 2;
        }
        while (v104 <= v25);
        goto LABEL_86;
      }
      v104 = 0;
      if (v122)
        goto LABEL_84;
      v124 = v97 & 0xFFFFFFFC;
      v125 = (float64x2_t *)v10[v24];
      v126 = a3;
      v127 = (float64x2_t *)*v10;
      v128 = (float64x2_t *)v12;
      do
      {
        v129 = v127[2];
        v130 = v127[3];
        v131 = *v127;
        v132 = v127[1];
        v127 += 4;
        v133 = vaddq_f64(v128[1], v132);
        v134 = vaddq_f64(*v128, v131);
        v135 = vaddq_f64(v128[3], v130);
        v136 = vaddq_f64(v128[2], v129);
        v180.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vzip1q_s64((int64x2_t)v134, (int64x2_t)v133)), (float64x2_t)vzip1q_s64((int64x2_t)v136, (int64x2_t)v135));
        v180.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vzip2q_s64((int64x2_t)v134, (int64x2_t)v133)), (float64x2_t)vzip2q_s64((int64x2_t)v136, (int64x2_t)v135));
        vst2q_f32(v126, v180);
        v126 += 8;
        v137 = v125[2];
        v138 = v125[3];
        v139 = *v125;
        v140 = v125[1];
        v125 += 4;
        v128[2] = vsubq_f64(v136, v137);
        v128[3] = vsubq_f64(v135, v138);
        *v128 = vsubq_f64(v134, v139);
        v128[1] = vsubq_f64(v133, v140);
        v128 += 4;
        v124 -= 4;
      }
      while (v124);
      v103 = v97 & 0xFFFFFFFC;
      v105 = (8 * (v103 >> 2)) | 2;
      v104 = 2 * v103;
      v106 = v103 - 1;
      v107 = v104;
      if (v97 != v103)
        goto LABEL_84;
LABEL_86:
      if ((int)v104 < a6)
      {
        if (v94 >= 8)
        {
          v141 = 16 * v106;
          v142 = 16 * v106 + 16;
          v143 = (char *)v12 + v142;
          v144 = v177 + v141;
          v145 = (char *)v12 + v144;
          v146 = (char *)v101 + v142;
          v147 = (char *)v101 + v144;
          v148 = (unint64_t)v102 + v142;
          v150 = v143 < (char *)v102 + v144 && v148 < (unint64_t)v145;
          if (v146 >= v145 || v143 >= v147)
          {
            if (v150)
            {
              v118 = v107;
            }
            else
            {
              v118 = v107 + v98;
              v152 = v107;
              v153 = (float64x2_t *)&v12[v107];
              v154 = (float64x2_t *)&v101[v107];
              v155 = v107;
              v156 = (float64x2_t *)&v102[v152];
              v157 = v94 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v158 = *v154;
                v159 = v154[1];
                v154 += 2;
                v160 = vaddq_f64(v153[1], v159);
                v161 = vaddq_f64(*v153, v158);
                *(float32x4_t *)&a3[v155] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v161), v160);
                v162 = *v156;
                v163 = v156[1];
                v156 += 2;
                *v153 = vsubq_f64(v161, v162);
                v153[1] = vsubq_f64(v160, v163);
                v153 += 2;
                v155 += 4;
                v157 -= 4;
              }
              while (v157);
              if (v94 == v98)
                goto LABEL_81;
            }
          }
          else
          {
            v118 = v107;
          }
        }
        else
        {
          v118 = v107;
        }
        do
        {
          v119 = v12[v118] + v101[v118];
          v120 = v119;
          a3[v118] = v120;
          v12[v118] = v119 - v102[v118];
          ++v118;
        }
        while (v118 < a6);
      }
LABEL_81:
      a3 = (float *)((char *)a3 + v26);
      ++v10;
      v23 = v100 - 1;
      v99 = (float *)((char *)v99 + v26);
      if (!v100)
        return;
    }
    v103 = 0;
    v104 = 0;
    v105 = 2;
    goto LABEL_84;
  }
  if (a6 == 1)
  {
    v87 = *v12;
    do
    {
      v88 = *(double **)((char *)v10 + 8 - 8 * v16);
      v89 = *v10++;
      v90 = v87 + *v89;
      v91 = v90;
      *a3 = v91;
      v87 = v90 - *v88;
      *v12 = v87;
      a3 = (float *)((char *)a3 + a4);
      --a5;
    }
    while (a5);
  }
}

void sub_100353308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100353320(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10035332C()
{
  operator delete();
}

uint64_t sub_100353340(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10035337C(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454AA8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return nullsub_1(a1);
}

void sub_1003533B8(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454AA8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);
  operator delete();
}

void sub_100353408(uint64_t a1, _QWORD *a2, double *a3, int a4, int a5, int a6)
{
  _QWORD *v10;
  int32x4_t *v12;
  int32x4_t **v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int32x4_t *v22;
  int v23;
  int32x4_t *v24;
  int32x4_t *v26;
  uint64_t v27;
  int32x4_t *v28;
  int32x4_t v29;
  uint64_t v30;
  __int32 *v31;
  __int32 *v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int32x4_t *v42;
  double *v43;
  int v44;
  int32x4_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v50;
  double v52;
  uint64_t v53;
  int32x4_t *v54;
  double *v55;
  int32x4_t *v56;
  int32x4_t *v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double *v67;
  int32x4_t v68;
  int32x4_t v69;
  __int32 *v70;
  double *v71;
  int *v72;
  __int32 *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  __int32 *v80;
  BOOL v81;
  char v82;
  BOOL v83;
  uint64_t v84;
  int32x4_t *v85;
  int32x4_t *v86;
  uint64_t v87;
  int32x4_t *v88;
  unint64_t v89;
  double v90;
  int32x4_t v91;
  int32x4_t v92;
  int64x2_t v93;
  float64x2_t v94;
  float64x2_t *v95;
  int32x4_t v96;
  int v97;
  int v98;
  _QWORD *v99;
  _DWORD *v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int32x4_t *v106;
  double *v107;
  int v108;
  int32x4_t *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double *v116;
  __int32 *v117;
  __int32 *v118;
  int *v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unint64_t v124;
  int v125;
  BOOL v127;
  uint64_t v129;
  int32x4_t *v130;
  double *v131;
  int32x4_t *v132;
  int32x4_t *v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int64x2_t v140;
  int64x2_t v141;
  double *v142;
  int32x4_t v143;
  int32x4_t v144;
  uint64_t v145;
  __int8 *v146;
  unint64_t v147;
  __int8 *v148;
  __int8 *v149;
  __int8 *v150;
  unint64_t v151;
  BOOL v153;
  unint64_t v155;
  uint64_t v156;
  int32x4_t *v157;
  int32x4_t *v158;
  uint64_t v159;
  int32x4_t *v160;
  int32x4_t v161;
  int32x4_t v162;
  int64x2_t v163;
  float64x2_t v164;
  float64x2_t *v165;
  int32x4_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  double v170;
  unint64_t v171;
  uint64_t v172[2];
  float64x2x2_t v173;
  float64x2x2_t v174;
  float64x2x2_t v175;
  float64x2x2_t v176;

  v10 = a2;
  v13 = (int32x4_t **)(a1 + 32);
  v12 = *(int32x4_t **)(a1 + 32);
  v170 = *(double *)(a1 + 16);
  v14 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v12) >> 2;
  if ((_DWORD)v14 == a6)
  {
    v15 = *(_DWORD *)(a1 + 24);
    if (v15)
    {
      v16 = *(_DWORD *)(a1 + 8) - 1;
      if (v15 != v16)
      {
        v172[0] = 0;
        v172[1] = 0;
        v17 = sub_10029430C(v172, 19);
        *(_DWORD *)(v17 + 15) = 825058682;
        *(_OWORD *)v17 = *(_OWORD *)"sumCount == ksize-1";
        sub_100294B74(-215, v172, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 228);
      }
      v10 = &a2[v16];
      goto LABEL_38;
    }
  }
  else
  {
    if (a6 <= v14)
    {
      if (a6 < v14)
        *(_QWORD *)(a1 + 40) = (char *)v12 + 4 * a6;
    }
    else
    {
      sub_100223D9C(a1 + 32, a6 - v14);
      v12 = *v13;
    }
    *(_DWORD *)(a1 + 24) = 0;
  }
  bzero(v12, 4 * a6);
  v18 = *(_DWORD *)(a1 + 24);
  v19 = *(_DWORD *)(a1 + 8) - 1;
  if (v18 >= v19)
    goto LABEL_38;
  if (a6 < 1)
  {
    if (v19 <= v18 + 1)
      v19 = v18 + 1;
    v10 += (v19 + ~v18) + 1;
    *(_DWORD *)(a1 + 24) = v19;
  }
  else
  {
    if (a6 >= 8)
    {
      v20 = 4 * a6;
      while (1)
      {
        v24 = (int32x4_t *)*v10;
        if ((unint64_t)v12 >= *v10 + v20 || v24 >= (int32x4_t *)&v12->i8[v20])
        {
          v26 = v24 + 1;
          v27 = a6 & 0xFFFFFFF8;
          v28 = v12 + 1;
          do
          {
            v29 = vaddq_s32(*v28, *v26);
            v28[-1] = vaddq_s32(v28[-1], v26[-1]);
            *v28 = v29;
            v26 += 2;
            v28 += 2;
            v27 -= 8;
          }
          while (v27);
          v30 = a6 & 0xFFFFFFF8;
          if (v30 == a6)
            goto LABEL_23;
        }
        else
        {
          v30 = 0;
        }
        v31 = &v24->i32[v30];
        v32 = &v12->i32[v30];
        v33 = a6 - v30;
        do
        {
          v34 = *v31++;
          *v32++ += v34;
          --v33;
        }
        while (v33);
LABEL_23:
        v23 = *(_DWORD *)(a1 + 24) + 1;
        *(_DWORD *)(a1 + 24) = v23;
        ++v10;
        if (v23 >= *(_DWORD *)(a1 + 8) - 1)
          goto LABEL_38;
      }
    }
    do
    {
      v22 = (int32x4_t *)*v10;
      v12->i32[0] += *(_DWORD *)*v10;
      if (a6 != 1)
      {
        v12->i32[1] += v22->i32[1];
        if (a6 != 2)
        {
          v12->i32[2] += v22->i32[2];
          if (a6 != 3)
          {
            v12->i32[3] += v22->i32[3];
            if (a6 != 4)
            {
              v12[1].i32[0] += v22[1].i32[0];
              if (a6 != 5)
              {
                v12[1].i32[1] += v22[1].i32[1];
                if (a6 != 6)
                  v12[1].i32[2] += v22[1].i32[2];
              }
            }
          }
        }
      }
      v21 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v21;
      ++v10;
    }
    while (v21 < *(_DWORD *)(a1 + 8) - 1);
  }
LABEL_38:
  if (!a5)
    return;
  v35 = a5 - 1;
  v36 = (a6 - 2);
  v37 = a4;
  if (v170 != 1.0)
  {
    v38 = 4 * a6;
    v39 = (unint64_t)v12->u64 + v38;
    if ((int)v36 <= 1)
      v40 = 1;
    else
      v40 = (int)v36;
    v41 = ((4 * v40) & 0x1FFFFFFF8) + 8;
    v42 = (int32x4_t *)((char *)v12 + v41);
    v168 = (v40 >> 1) + 1;
    v43 = a3 + 1;
    while (1)
    {
      v44 = v35;
      v45 = (int32x4_t *)*v10;
      v46 = v10[1 - *(int *)(a1 + 8)];
      if (a6 < 2)
      {
        v47 = 0;
        if (a6 <= 0)
          goto LABEL_44;
        goto LABEL_70;
      }
      if (v40 < 6)
        break;
      v48 = 0;
      v50 = (unint64_t)v12 < v46 + v41 && v46 < (unint64_t)v42;
      if (v45 < v42 && v12 < (int32x4_t *)&v45->i8[v41])
        goto LABEL_66;
      v52 = v170;
      if (v50)
        goto LABEL_67;
      v53 = v168 & 0x7FFFFFFC;
      v54 = (int32x4_t *)v10[1 - *(int *)(a1 + 8)];
      v55 = a3;
      v56 = (int32x4_t *)*v10;
      v57 = v12;
      do
      {
        v58 = *v56;
        v59 = v56[1];
        v56 += 2;
        v60 = vaddq_s32(v59, v57[1]);
        v61 = vaddq_s32(v58, *v57);
        v62 = vuzp1q_s32(v61, v60);
        v63 = vuzp2q_s32(v61, v60);
        v64.i64[0] = v62.i32[0];
        v64.i64[1] = v62.i32[1];
        v65 = vcvtq_f64_s64(v64);
        v64.i64[0] = v62.i32[2];
        v64.i64[1] = v62.i32[3];
        v66 = vcvtq_f64_s64(v64);
        v173.val[0] = vmulq_n_f64(v65, v170);
        v64.i64[0] = v63.i32[0];
        v64.i64[1] = v63.i32[1];
        v173.val[1] = vmulq_n_f64(vcvtq_f64_s64(v64), v170);
        v175.val[0] = vmulq_n_f64(v66, v170);
        v64.i64[0] = v63.i32[2];
        v64.i64[1] = v63.i32[3];
        v67 = v55;
        vst2q_f64(v67, v173);
        v67 += 4;
        v175.val[1] = vmulq_n_f64(vcvtq_f64_s64(v64), v170);
        vst2q_f64(v67, v175);
        v69 = *v54;
        v68 = v54[1];
        v54 += 2;
        *v57 = vsubq_s32(v61, v69);
        v57[1] = vsubq_s32(v60, v68);
        v57 += 2;
        v55 += 8;
        v53 -= 4;
      }
      while (v53);
      v48 = 2 * (v168 & 0x7FFFFFFC);
      if (v168 != (v168 & 0x7FFFFFFC))
        goto LABEL_67;
LABEL_69:
      v47 = v48;
      if ((int)v48 >= a6)
        goto LABEL_44;
LABEL_70:
      v78 = a6 - v47;
      if (v78 < 8
        || ((v79 = 4 * v47, v80 = &v12->i32[v47], (unint64_t)v80 < v46 + v38)
          ? (v81 = v46 + 4 * v47 >= v39)
          : (v81 = 1),
            v81 ? (v82 = 0) : (v82 = 1),
            (unint64_t)v45 + 4 * v47 < v39 ? (v83 = v80 >= &v45->i32[(unint64_t)v38 / 4]) : (v83 = 1),
            !v83 || (v82 & 1) != 0))
      {
        v84 = v47;
        v90 = v170;
      }
      else
      {
        v84 = (v78 & 0xFFFFFFFFFFFFFFFCLL) + v47;
        v85 = (int32x4_t *)((char *)v12 + v79);
        v86 = (int32x4_t *)((char *)v45 + v79);
        v87 = v47;
        v88 = (int32x4_t *)(v46 + v79);
        v89 = v78 & 0xFFFFFFFFFFFFFFFCLL;
        v90 = v170;
        do
        {
          v91 = *v86++;
          v92 = vaddq_s32(v91, *v85);
          v93.i64[0] = v92.i32[2];
          v93.i64[1] = v92.i32[3];
          v94 = vcvtq_f64_s64(v93);
          v93.i64[0] = v92.i32[0];
          v93.i64[1] = v92.i32[1];
          v95 = (float64x2_t *)&a3[v87];
          *v95 = vmulq_n_f64(vcvtq_f64_s64(v93), v170);
          v95[1] = vmulq_n_f64(v94, v170);
          v96 = *v88++;
          *v85++ = vsubq_s32(v92, v96);
          v87 += 4;
          v89 -= 4;
        }
        while (v89);
        if (v78 == (v78 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_44;
      }
      do
      {
        v97 = v45->i32[v84] + v12->i32[v84];
        a3[v84] = v90 * (double)v97;
        v12->i32[v84] = v97 - *(_DWORD *)(v46 + 4 * v84);
        ++v84;
      }
      while (a6 != v84);
LABEL_44:
      a3 = (double *)((char *)a3 + v37);
      ++v10;
      v35 = v44 - 1;
      v43 = (double *)((char *)v43 + v37);
      if (!v44)
        return;
    }
    v48 = 0;
LABEL_66:
    v52 = v170;
LABEL_67:
    v70 = &v45->i32[v48 + 1];
    v71 = &v43[v48];
    v72 = (int *)(v46 + 4 * v48 + 4);
    v73 = &v12->i32[v48 + 1];
    do
    {
      v74 = *(v70 - 1) + *(v73 - 1);
      v75 = *v70 + *v73;
      *(v71 - 1) = v52 * (double)v74;
      *v71 = v52 * (double)v75;
      v76 = v74 - *(v72 - 1);
      v77 = *v72;
      v72 += 2;
      v48 += 2;
      v70 += 2;
      *(v73 - 1) = v76;
      *v73 = v75 - v77;
      v71 += 2;
      v73 += 2;
    }
    while (v48 <= (int)v36);
    goto LABEL_69;
  }
  if (a6 >= 2)
  {
    v102 = (v36 & 0xFFFFFFFE) + 3;
    if (v102 <= a6)
      v102 = a6;
    v103 = (4 * (a6 - 2)) & 0x3FFFFFFF8;
    v171 = 4 * v102 - v103;
    v104 = v102 - (v36 & 0xFFFFFFFE) - 2;
    v105 = v103 + 8;
    v106 = (int32x4_t *)((char *)&v12->u64[1] + v103);
    v169 = (v36 >> 1) + 1;
    v167 = v104 & 0xFFFFFFFFFFFFFFFCLL;
    v107 = a3 + 1;
    while (1)
    {
      v108 = v35;
      v109 = (int32x4_t *)*v10;
      v110 = v10[1 - *(int *)(a1 + 8)];
      if (v36 < 6)
        break;
      v111 = 0;
      v127 = (unint64_t)v12 < v110 + v105 && v110 < (unint64_t)v106;
      if (v109 < v106 && v12 < (int32x4_t *)&v109->i8[v105])
      {
        v113 = 2;
        v112 = 0;
LABEL_101:
        v114 = v111 - 1;
        v115 = v113 - 2;
        v116 = &v107[v112];
        v117 = &v109->i32[v112 + 1];
        v118 = &v12->i32[v112 + 1];
        v119 = (int *)(v110 + 4 * v112 + 4);
        do
        {
          v120 = *(v117 - 1) + *(v118 - 1);
          v121 = *v117 + *v118;
          *(v116 - 1) = (double)v120;
          *v116 = (double)v121;
          v122 = v120 - *(v119 - 1);
          v123 = *v119;
          v119 += 2;
          v112 += 2;
          ++v114;
          v115 += 2;
          v116 += 2;
          *(v118 - 1) = v122;
          *v118 = v121 - v123;
          v117 += 2;
          v118 += 2;
        }
        while (v112 <= v36);
        goto LABEL_103;
      }
      v113 = 2;
      v112 = 0;
      if (v127)
        goto LABEL_101;
      v129 = v169 & 0xFFFFFFFC;
      v130 = (int32x4_t *)v10[1 - *(int *)(a1 + 8)];
      v131 = a3;
      v132 = (int32x4_t *)*v10;
      v133 = v12;
      do
      {
        v134 = *v132;
        v135 = v132[1];
        v132 += 2;
        v136 = vaddq_s32(v135, v133[1]);
        v137 = vaddq_s32(v134, *v133);
        v138 = vuzp1q_s32(v137, v136);
        v139 = vuzp2q_s32(v137, v136);
        v140.i64[0] = v138.i32[2];
        v140.i64[1] = v138.i32[3];
        v141 = v140;
        v140.i64[0] = v138.i32[0];
        v140.i64[1] = v138.i32[1];
        v174.val[0] = vcvtq_f64_s64(v140);
        v140.i64[0] = v139.i32[0];
        v140.i64[1] = v139.i32[1];
        v174.val[1] = vcvtq_f64_s64(v140);
        v176.val[0] = vcvtq_f64_s64(v141);
        v142 = v131;
        vst2q_f64(v142, v174);
        v142 += 4;
        v140.i64[0] = v139.i32[2];
        v140.i64[1] = v139.i32[3];
        v176.val[1] = vcvtq_f64_s64(v140);
        vst2q_f64(v142, v176);
        v144 = *v130;
        v143 = v130[1];
        v130 += 2;
        *v133 = vsubq_s32(v137, v144);
        v133[1] = vsubq_s32(v136, v143);
        v133 += 2;
        v131 += 8;
        v129 -= 4;
      }
      while (v129);
      v111 = v169 & 0xFFFFFFFC;
      v114 = v111 - 1;
      v113 = (8 * (v111 >> 2)) | 2;
      v112 = 2 * v111;
      v115 = v112;
      if (v169 != v111)
        goto LABEL_101;
LABEL_103:
      if ((int)v112 < a6)
      {
        if (v104 >= 8)
        {
          v145 = 8 * v114 + 8;
          v146 = &v12->i8[v145];
          v147 = v171 + 8 * v114;
          v148 = &v12->i8[v147];
          v149 = &v109->i8[v145];
          v150 = &v109->i8[v147];
          v151 = v110 + v145;
          v153 = (unint64_t)v146 < v110 + v147 && v151 < (unint64_t)v148;
          if (v149 >= v148 || v146 >= v150)
          {
            if (v153)
            {
              v124 = v115;
            }
            else
            {
              v155 = v104 & 0xFFFFFFFFFFFFFFFCLL;
              v124 = v115 + v167;
              v156 = 4 * v115;
              v157 = (int32x4_t *)((char *)v12 + 4 * v115);
              v158 = (int32x4_t *)((char *)v109 + 4 * v115);
              v159 = v115;
              v160 = (int32x4_t *)(v110 + v156);
              do
              {
                v161 = *v158++;
                v162 = vaddq_s32(v161, *v157);
                v163.i64[0] = v162.i32[0];
                v163.i64[1] = v162.i32[1];
                v164 = vcvtq_f64_s64(v163);
                v163.i64[0] = v162.i32[2];
                v163.i64[1] = v162.i32[3];
                v165 = (float64x2_t *)&a3[v159];
                *v165 = v164;
                v165[1] = vcvtq_f64_s64(v163);
                v166 = *v160++;
                *v157++ = vsubq_s32(v162, v166);
                v159 += 4;
                v155 -= 4;
              }
              while (v155);
              if (v104 == v167)
                goto LABEL_98;
            }
          }
          else
          {
            v124 = v115;
          }
        }
        else
        {
          v124 = v115;
        }
        do
        {
          v125 = v109->i32[v124] + v12->i32[v124];
          a3[v124] = (double)v125;
          v12->i32[v124] = v125 - *(_DWORD *)(v110 + 4 * v124);
          ++v124;
        }
        while (v124 < a6);
      }
LABEL_98:
      a3 = (double *)((char *)a3 + v37);
      ++v10;
      v35 = v108 - 1;
      v107 = (double *)((char *)v107 + v37);
      if (!v108)
        return;
    }
    v111 = 0;
    v112 = 0;
    v113 = 2;
    goto LABEL_101;
  }
  if (a6 == 1)
  {
    v98 = v12->i32[0];
    v99 = v10 + 1;
    do
    {
      v100 = (_DWORD *)v99[-*(int *)(a1 + 8)];
      v101 = *(_DWORD *)*(v99 - 1) + v98;
      *a3 = (double)v101;
      v98 = v101 - *v100;
      v12->i32[0] = v98;
      a3 = (double *)((char *)a3 + a4);
      ++v99;
      --a5;
    }
    while (a5);
  }
}

void sub_100353D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100353D6C(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100353D78()
{
  operator delete();
}

uint64_t sub_100353D8C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_100353DC8(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454B30;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return nullsub_1(a1);
}

void sub_100353E04(_QWORD *a1)
{
  void *v2;

  *a1 = off_100454B30;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);
  operator delete();
}

void sub_100353E54(uint64_t a1, double **a2, double *a3, int a4, int a5, int a6)
{
  double **v10;
  double *v12;
  double **v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  double v20;
  int v21;
  double *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  double *v31;
  int v32;
  uint64_t v33;
  double *v34;
  double *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double *v39;
  double v40;
  double v41;
  double *v42;
  double v43;
  unint64_t v44;
  double v45;
  double *v46;
  unint64_t v47;
  BOOL v49;
  BOOL v51;
  BOOL v53;
  BOOL v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  double *v62;
  float64x2_t v63;
  uint64_t v64;
  double *v65;
  unint64_t v66;
  double *v67;
  double *v68;
  uint64_t v69;
  unint64_t v70;
  double *v71;
  double *v72;
  unint64_t v73;
  unint64_t v74;
  BOOL v76;
  BOOL v78;
  BOOL v80;
  BOOL v82;
  unint64_t v84;
  float64x2_t v85;
  uint64_t v86;
  double v87;
  double v88;
  double *v89;
  double *v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  double *v97;
  uint64_t v98;
  uint64_t v99;
  double *v100;
  double *v101;
  int v102;
  uint64_t v103;
  double *v104;
  double *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  double *v109;
  unint64_t v110;
  BOOL v112;
  BOOL v114;
  BOOL v116;
  BOOL v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  float64x2_t *v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t *v125;
  float64x2_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double *v130;
  double v131;
  double v132;
  double *v133;
  double v134;
  unint64_t v135;
  uint64_t v136;
  double v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  BOOL v149;
  BOOL v151;
  BOOL v153;
  BOOL v155;
  unint64_t v157;
  uint64_t v158;
  float64x2_t *v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t *v162;
  float64x2_t v163;
  uint64_t v164;
  float64x2_t *v165;
  float64x2_t *v167;
  uint64_t v168;
  float64x2_t *v169;
  float64x2_t v170;
  uint64_t v171;
  double *v172;
  double *v173;
  uint64_t v174;
  double v175;
  unint64_t v176;
  uint64_t v177;
  double *v178;
  uint64_t v179;
  double *v180;
  double v181;
  uint64_t v182;
  uint64_t v183[2];
  float64x2x2_t v184;

  v10 = a2;
  v13 = (double **)(a1 + 32);
  v12 = *(double **)(a1 + 32);
  v181 = *(double *)(a1 + 16);
  v14 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v12) >> 3;
  if ((_DWORD)v14 != a6)
  {
    if (a6 <= v14)
    {
      if (a6 < v14)
        *(_QWORD *)(a1 + 40) = &v12[a6];
    }
    else
    {
      sub_100315378(a1 + 32, a6 - v14);
      v12 = *v13;
    }
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_11;
  }
  v15 = *(_DWORD *)(a1 + 24);
  if (!v15)
  {
LABEL_11:
    bzero(v12, 8 * a6);
    v16 = *(_DWORD *)(a1 + 8);
    v18 = v16 - 1;
    v19 = *(_DWORD *)(a1 + 24);
    if (v19 >= v16 - 1)
      goto LABEL_21;
    if (a6 <= 0)
    {
      v10 += (v16 - v19 - 2) + 1;
LABEL_20:
      *(_DWORD *)(a1 + 24) = v18;
      goto LABEL_21;
    }
    if (a6 < 4)
    {
      v20 = *v12;
      v21 = ~v19 + v16;
      do
      {
        v22 = *v10;
        v20 = **v10 + v20;
        *v12 = v20;
        if (a6 != 1)
        {
          v12[1] = v22[1] + v12[1];
          if (a6 != 2)
            v12[2] = v22[2] + v12[2];
        }
        ++v10;
        --v21;
      }
      while (v21);
      goto LABEL_20;
    }
    v164 = a6;
    while (1)
    {
      v165 = (float64x2_t *)*v10;
      if (v12 >= &(*v10)[v164] || v165 >= (float64x2_t *)&v12[v164])
      {
        v167 = v165 + 1;
        v168 = a6 & 0xFFFFFFFC;
        v169 = (float64x2_t *)(v12 + 2);
        do
        {
          v170 = vaddq_f64(*v167, *v169);
          v169[-1] = vaddq_f64(v167[-1], v169[-1]);
          *v169 = v170;
          v167 += 2;
          v169 += 2;
          v168 -= 4;
        }
        while (v168);
        v171 = a6 & 0xFFFFFFFC;
        if (v171 == a6)
          goto LABEL_219;
      }
      else
      {
        v171 = 0;
      }
      v172 = &v165->f64[v171];
      v173 = &v12[v171];
      v174 = a6 - v171;
      do
      {
        v175 = *v172++;
        *v173 = v175 + *v173;
        ++v173;
        --v174;
      }
      while (v174);
LABEL_219:
      ++v19;
      ++v10;
      if (v19 == v18)
        goto LABEL_20;
    }
  }
  v16 = *(_DWORD *)(a1 + 8);
  if (v15 != v16 - 1)
  {
    v183[0] = 0;
    v183[1] = 0;
    v17 = sub_10029430C(v183, 19);
    *(_DWORD *)(v17 + 15) = 825058682;
    *(_OWORD *)v17 = *(_OWORD *)"sumCount == ksize-1";
    sub_100294B74(-215, v183, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 228);
  }
  v10 = &a2[v16 - 1];
LABEL_21:
  if (!a5)
    return;
  v23 = a5 - 1;
  v24 = 1 - v16;
  v25 = (a6 - 2);
  v26 = a4;
  if (v181 != 1.0)
  {
    v27 = 0;
    v28 = a6;
    v180 = &v12[v28];
    if ((int)v25 <= 1)
      v29 = 1;
    else
      v29 = (int)v25;
    v30 = ((8 * v29) & 0x3FFFFFFF0) + 16;
    v178 = (double *)((char *)v12 + v30);
    v177 = (v29 >> 1) + 1;
    v31 = a3;
    while (1)
    {
      v32 = v23;
      v33 = v27 * v26;
      v34 = *v10;
      v35 = v10[v24];
      if (a6 < 2)
      {
        v36 = 0;
        if (a6 > 0)
          goto LABEL_37;
        goto LABEL_27;
      }
      if (v29 < 0xE)
        break;
      v36 = 0;
      v46 = (double *)((char *)a3 + v30 + v33);
      v47 = (unint64_t)v35 + v30;
      v49 = v31 < (double *)((char *)v34 + v30) && v34 < v46;
      v51 = (unint64_t)v31 < v47 && v35 < v46;
      v53 = v12 < (double *)((char *)v34 + v30) && v34 < v178;
      v55 = (unint64_t)v12 < v47 && v35 < v178;
      v56 = v12 >= v46 || v31 >= v178;
      if (!v56 || v49 || v51 || v53)
        goto LABEL_33;
      v37 = v181;
      if (v55)
        goto LABEL_34;
      v57 = 0;
      v58 = v177 & 0x7FFFFFFE;
      do
      {
        v59 = (float64x2_t *)&v12[v57];
        v60 = vaddq_f64(*(float64x2_t *)&v12[v57 + 2], *(float64x2_t *)&v34[v57 + 2]);
        v61 = vaddq_f64(*(float64x2_t *)&v12[v57], *(float64x2_t *)&v34[v57]);
        v184.val[0] = vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v61, (int64x2_t)v60), v181);
        v184.val[1] = vmulq_n_f64((float64x2_t)vzip2q_s64((int64x2_t)v61, (int64x2_t)v60), v181);
        v62 = &v31[v57];
        vst2q_f64(v62, v184);
        v63 = vsubq_f64(v60, *(float64x2_t *)&v35[v57 + 2]);
        *v59 = vsubq_f64(v61, *(float64x2_t *)&v35[v57]);
        v59[1] = v63;
        v57 += 4;
        v58 -= 2;
      }
      while (v58);
      v36 = 2 * (v177 & 0x7FFFFFFE);
      if (v177 != (v177 & 0x7FFFFFFE))
        goto LABEL_34;
LABEL_36:
      v36 = v36;
      if ((int)v36 < a6)
      {
LABEL_37:
        v44 = a6 - v36;
        if (v44 >= 0xE)
        {
          v64 = v24;
          v65 = a3;
          v66 = v29;
          v67 = v65;
          v68 = (double *)((char *)&v65[v28] + v33);
          v69 = v36;
          v70 = (unint64_t)&v31[v36];
          v71 = &v12[v36];
          v72 = &v34[v36];
          v73 = (unint64_t)&v35[v36];
          v74 = (unint64_t)&v35[v28];
          v76 = v70 < (unint64_t)&v34[v28] && v72 < v68;
          v78 = v70 < v74 && v73 < (unint64_t)v68;
          v80 = v71 < &v34[v28] && v72 < v180;
          v82 = (unint64_t)v71 < v74 && v73 < (unint64_t)v180;
          if (v71 >= v68 || v70 >= (unint64_t)v180)
          {
            v29 = v66;
            if (!v76)
            {
              a3 = v67;
              if (v78)
              {
                v45 = v181;
                v24 = v64;
              }
              else
              {
                v24 = v64;
                if (v80)
                {
                  v45 = v181;
                }
                else if (v82)
                {
                  v45 = v181;
                }
                else
                {
                  v36 += v44 & 0xFFFFFFFFFFFFFFFELL;
                  v84 = v44 & 0xFFFFFFFFFFFFFFFELL;
                  v45 = v181;
                  do
                  {
                    v85 = vaddq_f64(*(float64x2_t *)&v12[v69], *(float64x2_t *)&v34[v69]);
                    *(float64x2_t *)&v31[v69] = vmulq_n_f64(v85, v181);
                    *(float64x2_t *)&v12[v69] = vsubq_f64(v85, *(float64x2_t *)&v35[v69]);
                    v69 += 2;
                    v84 -= 2;
                  }
                  while (v84);
                  if (v44 == (v44 & 0xFFFFFFFFFFFFFFFELL))
                    goto LABEL_27;
                }
              }
              goto LABEL_118;
            }
            v45 = v181;
          }
          else
          {
            v45 = v181;
            v29 = v66;
          }
          a3 = v67;
          v24 = v64;
        }
        else
        {
          v45 = v181;
        }
        do
        {
LABEL_118:
          v86 = v36;
          v87 = v12[v36] + v34[v36];
          v31[v86] = v45 * v87;
          v12[v86] = v87 - v35[v36++];
        }
        while (a6 != v36);
      }
LABEL_27:
      v31 = (double *)((char *)v31 + v26);
      ++v10;
      v23 = v32 - 1;
      ++v27;
      if (!v32)
        return;
    }
    v36 = 0;
LABEL_33:
    v37 = v181;
LABEL_34:
    v38 = v36;
    do
    {
      v39 = &v12[v38];
      v40 = v12[v38] + v34[v38];
      v41 = v12[v38 + 1] + v34[v38 + 1];
      v42 = &v31[v38];
      *v42 = v37 * v40;
      v42[1] = v37 * v41;
      v43 = v41 - v35[v38 + 1];
      *v39 = v40 - v35[v38];
      v39[1] = v43;
      v36 += 2;
      v38 += 2;
    }
    while (v36 <= (int)v25);
    goto LABEL_36;
  }
  if (a6 >= 2)
  {
    v92 = 0;
    if ((unint64_t)(v25 & 0xFFFFFFFE) + 3 <= a6)
      v93 = a6;
    else
      v93 = (v25 & 0xFFFFFFFE) + 3;
    v94 = (8 * (a6 - 2)) & 0x7FFFFFFF0;
    v182 = 8 * v93 - v94;
    v95 = v93 - (v25 & 0xFFFFFFFE) - 2;
    v96 = v94 + 16;
    v97 = (double *)((char *)v12 + v94 + 16);
    v98 = (v25 >> 1) + 1;
    v99 = v98 & 0xFFFFFFFE;
    v179 = (2 * v98) | 2;
    v176 = v95 & 0xFFFFFFFFFFFFFFFCLL;
    v100 = v12 + 2;
    v101 = a3;
    while (1)
    {
      v102 = v23;
      v103 = v92 * v26;
      v104 = *v10;
      v105 = v10[v24];
      if (v25 < 0xE)
        break;
      v106 = 0;
      v109 = (double *)((char *)a3 + v96 + v103);
      v110 = (unint64_t)v105 + v96;
      v112 = v101 < (double *)((char *)v104 + v96) && v104 < v109;
      v114 = (unint64_t)v101 < v110 && v105 < v109;
      v116 = v12 < (double *)((char *)v104 + v96) && v104 < v97;
      v118 = (unint64_t)v12 < v110 && v105 < v97;
      v119 = v12 >= v109 || v101 >= v97;
      if (!v119 || v112 || v114 || v116)
      {
        v108 = 2;
        v107 = 0;
LABEL_170:
        v128 = v106 - 1;
        v127 = v108 - 2;
        v129 = v107;
        do
        {
          v130 = &v12[v129];
          v131 = v12[v129] + v104[v129];
          v132 = v12[v129 + 1] + v104[v129 + 1];
          v133 = &v101[v129];
          *v133 = v131;
          v133[1] = v132;
          v134 = v132 - v105[v129 + 1];
          v107 += 2;
          *v130 = v131 - v105[v129];
          v130[1] = v134;
          ++v128;
          v127 += 2;
          v129 += 2;
        }
        while (v107 <= v25);
        goto LABEL_172;
      }
      v108 = 2;
      v107 = 0;
      if (v118)
        goto LABEL_170;
      v120 = 0;
      v121 = v99;
      do
      {
        v122 = (float64x2_t *)&v12[v120];
        v123 = vaddq_f64(*(float64x2_t *)&v12[v120], *(float64x2_t *)&v104[v120]);
        v124 = vaddq_f64(*(float64x2_t *)&v12[v120 + 2], *(float64x2_t *)&v104[v120 + 2]);
        v125 = (float64x2_t *)&v101[v120];
        *v125 = v123;
        v125[1] = v124;
        v126 = vsubq_f64(v124, *(float64x2_t *)&v105[v120 + 2]);
        *v122 = vsubq_f64(v123, *(float64x2_t *)&v105[v120]);
        v122[1] = v126;
        v120 += 4;
        v121 -= 2;
      }
      while (v121);
      v106 = v99;
      v127 = 2 * v99;
      v108 = v179;
      v107 = 2 * v99;
      v128 = v99 - 1;
      if ((v25 >> 1) + 1 != v99)
        goto LABEL_170;
LABEL_172:
      if ((int)v107 < a6)
      {
        if (v95 >= 0x12)
        {
          v138 = (unint64_t)&a3[2 * v128 + 2] + v103;
          v139 = (unint64_t)&a3[2 * v128] + v182 + v103;
          v140 = 16 * v128 + 16;
          v141 = (char *)v12 + v140;
          v142 = v182 + 16 * v128;
          v143 = (char *)v12 + v142;
          v144 = (unint64_t)v104 + v140;
          v145 = (unint64_t)v104 + v142;
          v146 = (unint64_t)v105 + v140;
          v147 = (unint64_t)v105 + v142;
          v149 = v138 < v145 && v144 < v139;
          v151 = v138 < v147 && v146 < v139;
          v153 = (unint64_t)v141 < v145 && v144 < (unint64_t)v143;
          v155 = (unint64_t)v141 < v147 && v146 < (unint64_t)v143;
          if ((unint64_t)v141 >= v139 || v138 >= (unint64_t)v143)
          {
            if (v149)
            {
              v135 = v127;
            }
            else if (v151)
            {
              v135 = v127;
            }
            else if (v153)
            {
              v135 = v127;
            }
            else if (v155)
            {
              v135 = v127;
            }
            else
            {
              v157 = v95 & 0xFFFFFFFFFFFFFFFCLL;
              v135 = v127 + v176;
              v158 = v127;
              do
              {
                v159 = (float64x2_t *)&v100[v158];
                v160 = vaddq_f64(*(float64x2_t *)&v12[v158], *(float64x2_t *)&v104[v158]);
                v161 = vaddq_f64(*(float64x2_t *)&v100[v158], *(float64x2_t *)&v104[v158 + 2]);
                v162 = (float64x2_t *)&v101[v158];
                *v162 = v160;
                v162[1] = v161;
                v163 = vsubq_f64(v161, *(float64x2_t *)&v105[v158 + 2]);
                v159[-1] = vsubq_f64(v160, *(float64x2_t *)&v105[v158]);
                *v159 = v163;
                v158 += 4;
                v157 -= 4;
              }
              while (v157);
              if (v95 == v176)
                goto LABEL_129;
            }
          }
          else
          {
            v135 = v127;
          }
        }
        else
        {
          v135 = v127;
        }
        do
        {
          v136 = v135;
          v137 = v12[v135] + v104[v135];
          v101[v136] = v137;
          v12[v136] = v137 - v105[v135++];
        }
        while (v135 < a6);
      }
LABEL_129:
      v101 = (double *)((char *)v101 + v26);
      ++v10;
      v23 = v102 - 1;
      ++v92;
      if (!v102)
        return;
    }
    v106 = 0;
    v107 = 0;
    v108 = 2;
    goto LABEL_170;
  }
  if (a6 == 1)
  {
    v88 = *v12;
    do
    {
      v89 = *(double **)((char *)v10 + 8 - 8 * v16);
      v90 = *v10++;
      v91 = v88 + *v90;
      *a3 = v91;
      v88 = v91 - *v89;
      *v12 = v88;
      a3 = (double *)((char *)a3 + a4);
      --a5;
    }
    while (a5);
  }
}

void sub_1003547C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003547DC(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1003547E8()
{
  operator delete();
}

uint64_t sub_1003547FC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

double sub_100354838(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned __int32 v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  __int16 v26;
  signed int v27;
  unsigned __int32 v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  signed int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  double v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  _QWORD *v64;
  _QWORD *v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  _QWORD *v78;
  _QWORD *v79;
  unsigned int *v80;
  unsigned int v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  char *v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  char *v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  char *v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  int32x2_t *v111;
  BOOL v113;
  _BOOL4 v114;
  BOOL v115;
  BOOL v116;
  int v118;
  int v119;
  int v120;
  BOOL v121;
  _BOOL4 v122;
  BOOL v123;
  BOOL v124;
  int v126;
  int *v127;
  uint64_t i;
  unint64_t j;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  double v135;
  uint64_t v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  void *v153;
  _QWORD v154[3];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  void *v161;
  _QWORD v162[2];
  double v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  void *v170;
  _QWORD v171[3];
  int32x2_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  int32x2_t *v178;
  void *v179;
  _QWORD v180[3];
  char v181[8];
  int v182;
  uint64_t v183;
  double *v184;
  uint64_t v185;

  sub_100298C2C(v181, &off_100454BA8);
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_OWORD *)(v10 + 16);
    v173 = *(_OWORD *)v10;
    v174 = v11;
    v175 = *(_OWORD *)(v10 + 32);
    v12 = *(_QWORD *)(v10 + 56);
    v176 = *(_QWORD *)(v10 + 48);
    v177 = v12;
    v178 = (int32x2_t *)&v173 + 1;
    v179 = v180;
    v180[0] = 0;
    v180[1] = 0;
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 20);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    if (*(int *)(v10 + 4) > 2)
    {
      DWORD1(v173) = 0;
      sub_100256B48((uint64_t)&v173, v10);
    }
    else
    {
      v15 = *(_QWORD **)(v10 + 72);
      v16 = v179;
      *(_QWORD *)v179 = *v15;
      v16[1] = v15[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v173);
  }
  v17 = a3 & 0xFFFFFFF8;
  if ((a3 & 0xFFFFFFF8) == 8)
  {
    if ((v173 & 0xFFF) != 0)
    {
      v183 = 0;
      v184 = 0;
      qmemcpy((void *)sub_10029430C(&v183, 55), "src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", 55);
      sub_100294B74(-215, &v183, "threshold", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 1406);
    }
    v18 = v178->u32[1];
    if ((v173 & 0x4000) != 0)
      v19 = 1;
    else
      v19 = v178->u32[0];
    if ((v173 & 0x4000) != 0)
      v20 = v178->i32[0] * v18;
    else
      v20 = v18;
    if ((v173 & 0x4000) != 0)
      v21 = v178->i32[0] * v18;
    else
      v21 = v180[0];
    bzero(&v183, 0x400uLL);
    if ((int)v19 >= 1)
    {
      v22 = v174;
      v23 = (v20 - 4);
      if ((int)v20 >= 4)
      {
        for (i = 0; i != v19; ++i)
        {
          for (j = 0; j <= v23; j += 4)
          {
            v130 = *(unsigned __int8 *)(v22 + j + 1);
            ++*((_DWORD *)&v183 + *(unsigned __int8 *)(v22 + j));
            ++*((_DWORD *)&v183 + v130);
            v131 = 4 * *(unsigned __int8 *)(v22 + j + 2);
            v132 = *(unsigned __int8 *)(v22 + j + 3);
            ++*(_DWORD *)((char *)&v183 + v131);
            ++*((_DWORD *)&v183 + v132);
          }
          v133 = (v23 & 0xFFFFFFFC) + 4;
          if ((int)v20 > (int)j)
          {
            do
              ++*((_DWORD *)&v183 + *(unsigned __int8 *)(v22 + v133++));
            while (v133 < v20);
          }
          v22 += v21;
        }
      }
      else if ((int)v20 >= 1)
      {
        v24 = (unsigned __int8 *)(v174 + 2);
        v25 = v19;
        do
        {
          ++*((_DWORD *)&v183 + *(v24 - 2));
          if ((_DWORD)v20 != 1)
          {
            ++*((_DWORD *)&v183 + *(v24 - 1));
            if ((_DWORD)v20 != 2)
              ++*((_DWORD *)&v183 + *v24);
          }
          v24 += v21;
          --v25;
        }
        while (v25);
      }
    }
    v134 = 0;
    v135 = 0.0;
    do
    {
      v135 = v135
           + (double)(int)v134 * (double)*((int *)&v183 + v134)
           + (double)((int)v134 + 1) * (double)*((int *)&v183 + v134 + 1);
      v134 += 2;
    }
    while (v134 != 256);
    v136 = 0;
    v137 = 1.0 / (double)((int)v20 * (int)v19);
    v138 = v137 * v135;
    a4 = 0.0;
    v139 = 0.0;
    v140 = 0.0;
    v141 = 0.0;
    do
    {
      v142 = v137 * (double)*((int *)&v183 + v136);
      v140 = v140 * v141;
      v141 = v141 + v142;
      v143 = 1.0 - v141;
      if (1.0 - v141 >= v141)
        v144 = v141;
      else
        v144 = 1.0 - v141;
      if (v144 >= 0.00000011920929)
      {
        v145 = v141 >= v143 ? v141 : 1.0 - v141;
        if (v145 <= 0.999999881)
        {
          v140 = (v140 + (double)(int)v136 * v142) / v141;
          v146 = (v140 - (v138 - v141 * v140) / v143) * (v141 * v143 * (v140 - (v138 - v141 * v140) / v143));
          if (v146 > v139)
          {
            v139 = v146;
            a4 = (double)(int)v136;
          }
        }
      }
      ++v136;
    }
    while (v136 != 256);
    goto LABEL_83;
  }
  if (v17 == 16)
  {
    v26 = v173;
    if ((v173 & 0xFFF) != 0)
    {
      v183 = 0;
      v184 = 0;
      qmemcpy((void *)sub_10029430C(&v183, 55), "src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", 55);
      sub_100294B74(-215, &v183, "threshold", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 1411);
    }
    v27 = v180[0];
    v28 = v178->u32[1];
    v29 = v178->i32[0] * v28;
    if ((v173 & 0x4000) != 0)
      v30 = 1;
    else
      v30 = v178->u32[0];
    if ((v173 & 0x4000) != 0)
      v31 = v29;
    else
      v31 = v28;
    bzero(&v183, 0x400uLL);
    if ((int)v30 < 1)
    {
LABEL_54:
      v39 = 0;
      while (*((int *)&v183 + v39) <= 0)
      {
        if (++v39 == 256)
        {
          v40 = 0;
          goto LABEL_61;
        }
      }
      if ((_DWORD)v39)
        v40 = v39 - 1;
      else
        v40 = 0;
LABEL_61:
      v41 = 255;
      while (*((int *)&v183 + v41) <= 0)
      {
        if (!--v41)
        {
          v41 = 1;
          goto LABEL_67;
        }
      }
      if (v41 <= 0xFE)
        ++v41;
LABEL_67:
      v42 = 0;
      v43 = 0;
      v44 = 0;
      do
      {
        if (*((_DWORD *)&v183 + v42) > v43)
        {
          v44 = v42;
          v43 = *((_DWORD *)&v183 + v42);
        }
        ++v42;
      }
      while (v42 != 256);
      v45 = v44 - v40;
      v46 = v41 - v44;
      if (v44 - v40 < (int)(v41 - v44))
      {
        v47 = 0;
        v48 = 255;
        do
        {
          v49 = *((_DWORD *)&v183 + v47);
          *((_DWORD *)&v183 + v47) = *((_DWORD *)&v183 + v48);
          *((_DWORD *)&v183 + v48) = v49;
          ++v47;
          --v48;
        }
        while (v47 < v48);
        v40 = 255 - v41;
        v44 = 255 - v44;
      }
      v50 = (double)v40;
      if (v40 < v44)
      {
        v51 = (double)v43;
        v52 = (double)(v40 - v44);
        v53 = v40;
        v54 = v44;
        v55 = 0.0;
        do
        {
          v56 = v53 + 1;
          v57 = (double)((int)v53 + 1);
          if (v52 * (double)*((int *)&v183 + v53 + 1) + v51 * v57 > v55)
          {
            v50 = (double)((int)v53 + 1);
            v55 = v52 * (double)*((int *)&v183 + v53 + 1) + v51 * v57;
          }
          ++v53;
        }
        while (v54 != v56);
      }
      v58 = v50 + -1.0;
      if (v45 >= v46)
        a4 = v58;
      else
        a4 = 255.0 - v58;
      goto LABEL_83;
    }
    v32 = 0;
    if ((v26 & 0x4000) != 0)
      v33 = v29;
    else
      v33 = v27;
    v34 = v174;
    while ((int)v31 < 4)
    {
      v35 = 0;
      if ((int)v31 > 0)
        goto LABEL_52;
LABEL_45:
      ++v32;
      v34 += v33;
      if (v32 == v30)
        goto LABEL_54;
    }
    v35 = 0;
    do
    {
      v36 = *(unsigned __int8 *)(v34 + v35 + 1);
      ++*((_DWORD *)&v183 + *(unsigned __int8 *)(v34 + v35));
      ++*((_DWORD *)&v183 + v36);
      v37 = 4 * *(unsigned __int8 *)(v34 + v35 + 2);
      v38 = *(unsigned __int8 *)(v34 + v35 + 3);
      ++*(_DWORD *)((char *)&v183 + v37);
      ++*((_DWORD *)&v183 + v38);
      v35 += 4;
    }
    while (v35 <= (int)v31 - 4);
    v35 = v35;
    if ((int)v35 >= (int)v31)
      goto LABEL_45;
    do
LABEL_52:
      ++*((_DWORD *)&v183 + *(unsigned __int8 *)(v34 + v35++));
    while (v31 != v35);
    goto LABEL_45;
  }
  if (v17 == 24)
  {
    v183 = 0;
    v184 = 0;
    qmemcpy((void *)sub_10029430C(&v183, 57), "automatic_thresh != (CV_THRESH_OTSU | CV_THRESH_TRIANGLE)", 57);
    sub_100294B74(-215, &v183, "threshold", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 1403);
  }
LABEL_83:
  v172 = vrev64_s32(*v178);
  sub_10026214C(a2, &v172, v173 & 0xFFF, -1, 0, 0);
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v59 = *(_QWORD *)(a2 + 8);
    v60 = *(_OWORD *)(v59 + 16);
    v164 = *(_OWORD *)v59;
    v165 = v60;
    v166 = *(_OWORD *)(v59 + 32);
    v61 = *(_QWORD *)(v59 + 56);
    v167 = *(_QWORD *)(v59 + 48);
    v168 = v61;
    v169 = (char *)&v164 + 8;
    v170 = v171;
    v171[0] = 0;
    v171[1] = 0;
    if (v61)
    {
      v62 = (unsigned int *)(v61 + 20);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 + 1, v62));
    }
    if (*(int *)(v59 + 4) > 2)
    {
      DWORD1(v164) = 0;
      sub_100256B48((uint64_t)&v164, v59);
    }
    else
    {
      v64 = *(_QWORD **)(v59 + 72);
      v65 = v170;
      *(_QWORD *)v170 = *v64;
      v65[1] = v64[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v164);
  }
  v66 = a3 & 7;
  switch(v173 & 7)
  {
    case 0:
      v67 = (int)a4 - (a4 < (double)(int)a4);
      a4 = (double)v67;
      v68 = (uint64_t)rint(a5);
      if (v66 == 2)
        LODWORD(v68) = v67;
      v69 = v68 & ~((int)v68 >> 31);
      if (v69 >= 255)
        v69 = 255;
      if (v67 < 0xFF)
      {
        v70 = v69;
        goto LABEL_105;
      }
      if (v66 >= 2)
      {
        v113 = v66 != 3 || v67 <= 254;
        v114 = !v113;
        v115 = v66 == 4 || v66 == 2;
        v116 = v115 && v67 < 0;
        if (!v116 && !v114)
          goto LABEL_271;
      }
      if (v67 <= 254)
        v118 = 0;
      else
        v118 = v69;
      if (v67 <= 254)
        v119 = v69;
      else
        v119 = 0;
      if (v66)
        v119 = 0;
      if (v66 != 1)
        v118 = v119;
      goto LABEL_245;
    case 2:
      v71 = (int)a4 - (a4 < (double)(int)a4);
      a4 = (double)v71;
      v72 = (uint64_t)rint(a5);
      if (v66 == 2)
        LODWORD(v72) = v71;
      v73 = v72 & ~((int)v72 >> 31);
      if (v73 >= 0xFFFF)
        v73 = 0xFFFF;
      if (v71 < 0xFFFF)
      {
        v70 = (unsigned __int16)v73;
LABEL_105:
        a5 = (double)v70;
LABEL_114:
        LODWORD(v163) = 0;
        HIDWORD(v163) = DWORD2(v164);
        v155 = v173;
        v156 = v174;
        v157 = v175;
        v158 = v176;
        v159 = v177;
        v160 = (char *)&v155 + 8;
        v161 = v162;
        v162[0] = 0;
        v162[1] = 0;
        if (v177)
        {
          v76 = (unsigned int *)(v177 + 20);
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 + 1, v76));
          if (SDWORD1(v173) <= 2)
            goto LABEL_118;
        }
        else if (SDWORD1(v173) <= 2)
        {
LABEL_118:
          v78 = v179;
          v79 = v161;
          *(_QWORD *)v161 = *(_QWORD *)v179;
          v79[1] = v78[1];
          goto LABEL_121;
        }
        DWORD1(v155) = 0;
        sub_100256B48((uint64_t)&v155, (uint64_t)&v173);
LABEL_121:
        v147 = v164;
        v148 = v165;
        v149 = v166;
        v150 = v167;
        v151 = v168;
        v152 = (char *)&v147 + 8;
        v153 = v154;
        v154[0] = 0;
        v154[1] = 0;
        if (v168)
        {
          v80 = (unsigned int *)(v168 + 20);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 + 1, v80));
          if (SDWORD1(v164) <= 2)
            goto LABEL_125;
        }
        else if (SDWORD1(v164) <= 2)
        {
LABEL_125:
          v82 = v170;
          v83 = v153;
          *(_QWORD *)v153 = *(_QWORD *)v170;
          v83[1] = v82[1];
LABEL_128:
          sub_100355D28((uint64_t)&v183, (uint64_t)&v155, (uint64_t)&v147, v66, a4, a5);
          if (SDWORD1(v164) >= 3)
          {
            v85 = (int *)(v169 + 4);
            v86 = 1;
            v87 = DWORD1(v164) & 0xFFFFFFFE;
            v88 = 1;
            do
            {
              v86 *= *(v85 - 1);
              v88 *= *v85;
              v85 += 2;
              v87 -= 2;
            }
            while (v87);
            v84 = v88 * v86;
            v89 = DWORD1(v164) - (unint64_t)(DWORD1(v164) & 0xFFFFFFFE);
            if (v89)
            {
              v90 = &v169[(4 * DWORD1(v164)) & 0x3FFFFFFF8];
              do
              {
                v91 = *(int *)v90;
                v90 += 4;
                v84 *= v91;
                --v89;
              }
              while (v89);
            }
          }
          else
          {
            v84 = SHIDWORD(v164) * (uint64_t)SDWORD2(v164);
          }
          sub_10026F638(&v163, (uint64_t)&v183, (double)(unint64_t)v84 * 0.0000152587891);
          sub_100359A4C((uint64_t)&v183);
          if (v151)
          {
            v92 = (unsigned int *)(v151 + 20);
            do
            {
              v93 = __ldaxr(v92);
              v94 = v93 - 1;
            }
            while (__stlxr(v94, v92));
            if (!v94)
              sub_100256C90((uint64_t)&v147);
          }
          v151 = 0;
          v148 = 0u;
          v149 = 0u;
          if (SDWORD1(v147) >= 1)
          {
            v95 = 0;
            v96 = v152;
            do
              *(_DWORD *)&v96[4 * v95++] = 0;
            while (v95 < SDWORD1(v147));
          }
          if (v153 != v154)
            j__free(v153);
          if (v159)
          {
            v97 = (unsigned int *)(v159 + 20);
            do
            {
              v98 = __ldaxr(v97);
              v99 = v98 - 1;
            }
            while (__stlxr(v99, v97));
            if (!v99)
              sub_100256C90((uint64_t)&v155);
          }
          v159 = 0;
          v156 = 0u;
          v157 = 0u;
          if (SDWORD1(v155) >= 1)
          {
            v100 = 0;
            v101 = v160;
            do
              *(_DWORD *)&v101[4 * v100++] = 0;
            while (v100 < SDWORD1(v155));
          }
          if (v161 != v162)
            j__free(v161);
          goto LABEL_155;
        }
        DWORD1(v147) = 0;
        sub_100256B48((uint64_t)&v147, (uint64_t)&v164);
        goto LABEL_128;
      }
      if (v66 < 2)
        goto LABEL_207;
      if (v66 == 4 || v66 == 2)
      {
        if ((v71 & 0x80000000) == 0)
          goto LABEL_271;
LABEL_207:
        if (v71 <= 65534)
          v118 = 0;
        else
          v118 = v73;
        if (v71 <= 65534)
          v120 = v73;
        else
          v120 = 0;
        if (v66)
          v120 = 0;
        if (v66 != 1)
          v118 = v120;
        goto LABEL_245;
      }
      if (v66 == 3 && v71 > 65534)
      {
        v118 = 0;
        goto LABEL_245;
      }
LABEL_271:
      LODWORD(v183) = 33619968;
      v184 = (double *)&v164;
      v185 = 0;
      sub_1002181EC((uint64_t)&v173, (uint64_t)&v183);
LABEL_155:
      if (v168)
      {
        v102 = (unsigned int *)(v168 + 20);
        do
        {
          v103 = __ldaxr(v102);
          v104 = v103 - 1;
        }
        while (__stlxr(v104, v102));
        if (!v104)
          sub_100256C90((uint64_t)&v164);
      }
      v168 = 0;
      v165 = 0u;
      v166 = 0u;
      if (SDWORD1(v164) >= 1)
      {
        v105 = 0;
        v106 = v169;
        do
          *(_DWORD *)&v106[4 * v105++] = 0;
        while (v105 < SDWORD1(v164));
      }
      if (v170 != v171)
        j__free(v170);
      if (v177)
      {
        v107 = (unsigned int *)(v177 + 20);
        do
        {
          v108 = __ldaxr(v107);
          v109 = v108 - 1;
        }
        while (__stlxr(v109, v107));
        if (!v109)
          sub_100256C90((uint64_t)&v173);
      }
      v177 = 0;
      v174 = 0u;
      v175 = 0u;
      if (SDWORD1(v173) >= 1)
      {
        v110 = 0;
        v111 = v178;
        do
          v111->i32[v110++] = 0;
        while (v110 < SDWORD1(v173));
      }
      if (v179 != v180)
        j__free(v179);
      if (v182)
        sub_1002989D0(v181);
      return a4;
    case 3:
      v74 = (int)a4 - (a4 < (double)(int)a4);
      a4 = (double)v74;
      v75 = (uint64_t)rint(a5);
      if (v66 == 2)
        LODWORD(v75) = v74;
      if ((int)v75 <= -32768)
        LODWORD(v75) = -32768;
      if ((int)v75 >= 0x7FFF)
        LODWORD(v75) = 0x7FFF;
      if ((v74 + 0x8000) < 0xFFFF)
      {
        a5 = (double)(__int16)v75;
        goto LABEL_114;
      }
      if (v66 >= 2)
      {
        v121 = v66 != 3 || v74 <= 32766;
        v122 = !v121;
        v123 = v66 == 4 || v66 == 2;
        v124 = v123 && v74 < -32768;
        if (!v124 && !v122)
          goto LABEL_271;
      }
      if (v74 <= 32766)
        v118 = 0;
      else
        v118 = v75;
      if (v74 <= 32766)
        v126 = v75;
      else
        v126 = 0;
      if (v66)
        v126 = 0;
      if (v66 != 1)
        v118 = v126;
LABEL_245:
      v163 = (double)v118;
      LODWORD(v183) = -1056833530;
      v184 = &v163;
      v185 = 0x100000001;
      v127 = sub_100263CBC();
      sub_100219808((uint64_t)&v164, (uint64_t)&v183, (uint64_t)v127);
      goto LABEL_155;
    case 5:
    case 6:
      goto LABEL_114;
    default:
      v183 = 0;
      v184 = 0;
      sub_100294B74(-210, &v183, "threshold", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 1509);
  }
}

void sub_10035578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  sub_100006BE4((uint64_t)&a35);
  sub_100006BE4((uint64_t)&a49);
  sub_1001D40CC((uint64_t)&a62);
  _Unwind_Resume(a1);
}

void sub_100355870(void *a1, int a2)
{
  if (a2)
    sub_100008C88(a1);
  JUMPOUT(0x10035588CLL);
}

void sub_100355894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  sub_100006BE4((uint64_t)&a49);
  sub_1001D40CC((uint64_t)&a62);
  _Unwind_Resume(a1);
}

void sub_1003558B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  sub_1001D40CC((uint64_t)&a62);
  _Unwind_Resume(a1);
}

double sub_1003558C8(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  double v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  _DWORD *v35;
  int v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void *v49;
  _QWORD v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  void *v57;
  uint64_t v58;
  int v59;
  int v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t *v65;
  uint64_t v66;

  sub_100257E00(a1, 0, 0, 0, (uint64_t)&v59);
  sub_100257E00(a2, 0, 0, 0, (uint64_t)&v51);
  v43 = v51;
  v44 = v52;
  v45 = v53;
  v46 = v54;
  v47 = v55;
  v48 = (char *)&v43 + 8;
  v49 = v50;
  v50[0] = 0;
  v50[1] = 0;
  if (v55)
  {
    v9 = (unsigned int *)(v55 + 20);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    if (SDWORD1(v51) <= 2)
      goto LABEL_5;
  }
  else if (SDWORD1(v51) <= 2)
  {
LABEL_5:
    v11 = v57;
    v12 = v49;
    *(_QWORD *)v49 = *(_QWORD *)v57;
    v12[1] = v11[1];
    goto LABEL_8;
  }
  DWORD1(v43) = 0;
  sub_100256B48((uint64_t)&v43, (uint64_t)&v51);
LABEL_8:
  v13 = *(v64 - 1);
  if ((_DWORD)v13 != *(v56 - 1))
    goto LABEL_24;
  if ((_DWORD)v13 == 2)
  {
    if (*v64 != *v56 || v64[1] != v56[1])
      goto LABEL_24;
  }
  else if ((int)v13 >= 1)
  {
    if (*v64 != *v56)
      goto LABEL_24;
    v14 = 1;
    do
    {
      v15 = v14;
      if (v13 == v14)
        break;
      v16 = v64[v14];
      v17 = v56[v14++];
    }
    while (v16 == v17);
    if (v15 < v13)
    {
LABEL_24:
      v40 = 0;
      v41 = 0;
      qmemcpy((void *)sub_10029430C(&v40, 108), "src.size == dst.size && src.channels() == dst.channels() && (src.depth() == dst.depth() || dst.depth() == 0)", 108);
      sub_100294B74(-215, &v40, "cvThreshold", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 1596);
    }
  }
  if ((((unsigned __int16)v51 ^ (unsigned __int16)v59) & 0xFF8) != 0)
    goto LABEL_24;
  v18 = v51 & 7;
  if ((v59 & 7) != v18 && v18 != 0)
    goto LABEL_24;
  LODWORD(v40) = 16842752;
  v41 = (__int128 *)&v59;
  v42 = 0;
  v37 = 33619968;
  v38 = &v51;
  v39 = 0;
  v20 = sub_100354838((uint64_t)&v40, (uint64_t)&v37, a3, a4, a5);
  if ((_QWORD)v44 != (_QWORD)v52)
  {
    LODWORD(v40) = 33619968;
    v41 = &v43;
    v42 = 0;
    sub_1002044A8((unsigned int *)&v51, (uint64_t)&v40, v43 & 7, 1.0, 0.0);
  }
  if (v47)
  {
    v21 = (unsigned int *)(v47 + 20);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      sub_100256C90((uint64_t)&v43);
  }
  v47 = 0;
  v44 = 0u;
  v45 = 0u;
  if (SDWORD1(v43) >= 1)
  {
    v24 = 0;
    v25 = v48;
    do
      *(_DWORD *)&v25[4 * v24++] = 0;
    while (v24 < SDWORD1(v43));
  }
  if (v49 != v50)
    j__free(v49);
  if (v55)
  {
    v26 = (unsigned int *)(v55 + 20);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
      sub_100256C90((uint64_t)&v51);
  }
  v55 = 0;
  v52 = 0u;
  v53 = 0u;
  if (SDWORD1(v51) >= 1)
  {
    v29 = 0;
    v30 = v56;
    do
      v30[v29++] = 0;
    while (v29 < SDWORD1(v51));
  }
  if (v57 != &v58)
    j__free(v57);
  if (v63)
  {
    v31 = (unsigned int *)(v63 + 20);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
      sub_100256C90((uint64_t)&v59);
  }
  v63 = 0;
  v61 = 0u;
  v62 = 0u;
  if (v60 >= 1)
  {
    v34 = 0;
    v35 = v64;
    do
      v35[v34++] = 0;
    while (v34 < v60);
  }
  if (v65 != &v66)
    j__free(v65);
  return v20;
}

void sub_100355CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_100006BE4((uint64_t)&a27);
  sub_100006BE4(v27 - 160);
  _Unwind_Resume(a1);
}

void sub_100355D14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_100355D28(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6)
{
  _DWORD *v11;
  int *v12;
  _DWORD *v13;
  int *v14;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;

  *(_QWORD *)a1 = off_100454BD8;
  *(_DWORD *)(a1 + 8) = 1124007936;
  v11 = (_DWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 12) = 0u;
  v12 = (int *)(a1 + 12);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 16;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 1124007936;
  v13 = (_DWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 108) = 0u;
  v14 = (int *)(a1 + 108);
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 112;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  if (a1 + 8 != a2)
  {
    v16 = *(_QWORD *)(a2 + 56);
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 20);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      v19 = *(_QWORD *)(a1 + 64);
      if (v19)
      {
        v20 = (unsigned int *)(v19 + 20);
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
          sub_100256C90(a1 + 8);
      }
    }
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    if (*(int *)(a1 + 12) <= 0)
    {
      *v11 = *(_DWORD *)a2;
      v26 = *(_DWORD *)(a2 + 4);
      if (v26 <= 2)
      {
LABEL_15:
        *(_DWORD *)(a1 + 12) = v26;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 8);
        v27 = *(_QWORD **)(a2 + 72);
        v28 = *(_QWORD **)(a1 + 80);
        *v28 = *v27;
        v28[1] = v27[1];
LABEL_18:
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 48);
        goto LABEL_19;
      }
    }
    else
    {
      v23 = 0;
      v24 = *(_QWORD *)(a1 + 72);
      do
      {
        *(_DWORD *)(v24 + 4 * v23++) = 0;
        v25 = *v12;
      }
      while (v23 < v25);
      *v11 = *(_DWORD *)a2;
      if ((int)v25 <= 2)
      {
        v26 = *(_DWORD *)(a2 + 4);
        if (v26 <= 2)
          goto LABEL_15;
      }
    }
    sub_100256B48((uint64_t)v11, a2);
    goto LABEL_18;
  }
LABEL_19:
  if (v13 != (_DWORD *)a3)
  {
    v29 = *(_QWORD *)(a3 + 56);
    if (v29)
    {
      v30 = (unsigned int *)(v29 + 20);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
    }
    v32 = *(_QWORD *)(a1 + 160);
    if (v32)
    {
      v33 = (unsigned int *)(v32 + 20);
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
        sub_100256C90((uint64_t)v13);
    }
    *(_QWORD *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    if (*(int *)(a1 + 108) <= 0)
    {
      *v13 = *(_DWORD *)a3;
      v39 = *(_DWORD *)(a3 + 4);
      if (v39 <= 2)
      {
LABEL_33:
        *(_DWORD *)(a1 + 108) = v39;
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a3 + 8);
        v40 = *(_QWORD **)(a3 + 72);
        v41 = *(_QWORD **)(a1 + 176);
        *v41 = *v40;
        v41[1] = v40[1];
LABEL_36:
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a3 + 48);
        goto LABEL_37;
      }
    }
    else
    {
      v36 = 0;
      v37 = *(_QWORD *)(a1 + 168);
      do
      {
        *(_DWORD *)(v37 + 4 * v36++) = 0;
        v38 = *v14;
      }
      while (v36 < v38);
      *v13 = *(_DWORD *)a3;
      if ((int)v38 <= 2)
      {
        v39 = *(_DWORD *)(a3 + 4);
        if (v39 <= 2)
          goto LABEL_33;
      }
    }
    sub_100256B48((uint64_t)v13, a3);
    goto LABEL_36;
  }
LABEL_37:
  *(double *)(a1 + 200) = a5;
  *(double *)(a1 + 208) = a6;
  *(_DWORD *)(a1 + 216) = a4;
  return a1;
}

void sub_100355FF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100006BE4(v3);
  sub_100006BE4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10035601C(uint64_t a1)
{
  sub_100359A4C(a1);
  operator delete();
}

void sub_100356040(uint64_t a1, _DWORD *a2)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  double v10;
  double v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8x16_t v16;
  int8x16_t v17;
  int v18;
  unint64_t v19;
  int i;
  unint64_t j;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  signed int v31;
  unsigned int v32;
  int16x8_t v33;
  int8x16_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x16_t v42;
  int8x16_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int8x16_t v47;
  int8x16_t *v48;
  __int16 v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  double v57;
  double v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  char v64;
  int32x2_t v65;
  unint64_t v66;
  float32x4_t v67;
  unint64_t v68;
  int8x16_t v69;
  uint64_t v70;
  float32x4_t v71;
  int8x16_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t v79;
  int8x16_t *v80;
  unint64_t v81;
  float v82;
  uint64_t v83;
  unint64_t v84;
  int8x16_t v85;
  int8x16_t *v86;
  float v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  unint64_t v96;
  float64x2_t v97;
  unint64_t v98;
  int8x16_t v99;
  uint64_t v100;
  float64x2_t v101;
  int8x16_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int8x16_t v109;
  int8x16_t *v110;
  unint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  unint64_t v116;
  int8x16_t v117;
  int8x16_t *v118;
  double v119;
  double v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint16x8_t v126;
  int8x16_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int8x16_t v135;
  int8x16_t *v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  int8x16_t v140;
  int8x16_t *v141;
  __int16 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int16x8_t v146;
  int8x16_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t i6;
  uint64_t v151;
  int8x16_t v152;
  int8x16_t *v153;
  __int16 v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  float32x4_t v158;
  int8x16_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  float v163;
  float v164;
  uint64_t v165;
  int8x16_t v166;
  int8x16_t *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  float64x2_t v171;
  int8x16_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  double v176;
  double v177;
  double v178;
  uint64_t v179;
  int8x16_t v180;
  int8x16_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint16x8_t v185;
  int8x16_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t i1;
  uint64_t v190;
  int8x16_t v191;
  int8x16_t *v192;
  __int16 v193;
  int k;
  unint64_t m;
  int n;
  unint64_t ii;
  int jj;
  unint64_t kk;
  int mm;
  unint64_t nn;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int8x16_t v210;
  int8x16_t *v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  int8x16_t v215;
  int8x16_t *v216;
  __int16 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int16x8_t v225;
  int16x8_t *v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  int16x8_t v230;
  int16x8_t *v231;
  signed int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int8x16_t v240;
  int8x16_t *v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  int8x16_t v245;
  int8x16_t *v246;
  signed int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int8x16_t v255;
  int8x16_t *v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  int8x16_t v260;
  int8x16_t *v261;
  signed int v262;
  uint64_t v263;
  float32x4_t v264;
  int8x16_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int8x16_t v272;
  int8x16_t *v273;
  unint64_t v274;
  float v275;
  uint64_t v276;
  unint64_t v277;
  int8x16_t v278;
  int8x16_t *v279;
  float v280;
  uint64_t v281;
  float32x4_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  float32x4_t v289;
  float32x4_t *v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  int8x16_t v294;
  int8x16_t *v295;
  float v296;
  uint64_t v297;
  float32x4_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int8x16_t v305;
  int8x16_t *v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  int8x16_t v310;
  int8x16_t *v311;
  float v312;
  uint64_t v313;
  float32x4_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int8x16_t v321;
  int8x16_t *v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  int8x16_t v326;
  int8x16_t *v327;
  float v328;
  uint64_t v329;
  float64x2_t v330;
  int8x16_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int8x16_t v338;
  int8x16_t *v339;
  unint64_t v340;
  uint64_t v341;
  double v342;
  double v343;
  double v344;
  unint64_t v345;
  int8x16_t v346;
  int8x16_t *v347;
  uint64_t v348;
  float64x2_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  float64x2_t v356;
  float64x2_t *v357;
  unint64_t v358;
  double v359;
  uint64_t v360;
  unint64_t v361;
  int8x16_t v362;
  int8x16_t *v363;
  double v364;
  uint64_t v365;
  float64x2_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int8x16_t v373;
  int8x16_t *v374;
  unint64_t v375;
  double v376;
  uint64_t v377;
  unint64_t v378;
  int8x16_t v379;
  int8x16_t *v380;
  double v381;
  uint64_t v382;
  float64x2_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  int8x16_t v390;
  int8x16_t *v391;
  unint64_t v392;
  double v393;
  uint64_t v394;
  unint64_t v395;
  int8x16_t v396;
  int8x16_t *v397;
  double v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  int8x16_t v406;
  int8x16_t *v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t v410;
  int8x16_t v411;
  int8x16_t *v412;
  __int16 v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint16x8_t v421;
  uint16x8_t *v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint16x8_t v426;
  uint16x8_t *v427;
  unsigned int v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int8x16_t v436;
  int8x16_t *v437;
  unint64_t v438;
  uint64_t v439;
  unint64_t v440;
  int8x16_t v441;
  int8x16_t *v442;
  unsigned int v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int8x16_t v451;
  int8x16_t *v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  int8x16_t v456;
  int8x16_t *v457;
  unsigned int v458;
  char *v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int16x8_t v468;
  int8x16_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t i7;
  uint64_t v473;
  int8x16_t v474;
  int8x16_t *v475;
  __int16 v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  int16x8_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t i8;
  uint64_t v484;
  int16x8_t v485;
  int16x8_t *v486;
  signed int v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  int16x8_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t i9;
  uint64_t v495;
  int8x16_t v496;
  int8x16_t *v497;
  signed int v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  int16x8_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t i10;
  uint64_t v506;
  int8x16_t v507;
  int8x16_t *v508;
  signed int v509;
  uint64_t v510;
  unint64_t v511;
  unint64_t v512;
  float32x4_t v513;
  int8x16_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  float v518;
  float v519;
  uint64_t v520;
  int8x16_t v521;
  int8x16_t *v522;
  uint64_t v523;
  unint64_t v524;
  unint64_t v525;
  float32x4_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t i11;
  uint64_t v530;
  int8x16_t v531;
  int8x16_t *v532;
  float v533;
  uint64_t v534;
  unint64_t v535;
  unint64_t v536;
  float32x4_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t i12;
  uint64_t v541;
  int8x16_t v542;
  int8x16_t *v543;
  float v544;
  uint64_t v545;
  unint64_t v546;
  unint64_t v547;
  float32x4_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t i13;
  uint64_t v552;
  int8x16_t v553;
  int8x16_t *v554;
  float v555;
  uint64_t v556;
  unint64_t v557;
  unint64_t v558;
  float64x2_t v559;
  int8x16_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  double v564;
  double v565;
  double v566;
  uint64_t v567;
  int8x16_t v568;
  int8x16_t *v569;
  uint64_t v570;
  unint64_t v571;
  unint64_t v572;
  float64x2_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  double v577;
  double v578;
  uint64_t v579;
  int8x16_t v580;
  int8x16_t *v581;
  uint64_t v582;
  unint64_t v583;
  unint64_t v584;
  float64x2_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  double v589;
  double v590;
  uint64_t v591;
  int8x16_t v592;
  int8x16_t *v593;
  uint64_t v594;
  unint64_t v595;
  unint64_t v596;
  float64x2_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  double v601;
  double v602;
  uint64_t v603;
  int8x16_t v604;
  int8x16_t *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint16x8_t v609;
  int8x16_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t i2;
  uint64_t v614;
  int8x16_t v615;
  int8x16_t *v616;
  __int16 v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint16x8_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t i3;
  uint64_t v625;
  uint16x8_t v626;
  uint16x8_t *v627;
  unsigned int v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint16x8_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t i4;
  uint64_t v636;
  int8x16_t v637;
  int8x16_t *v638;
  unsigned int v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint16x8_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t i5;
  uint64_t v647;
  int8x16_t v648;
  int8x16_t *v649;
  unsigned int v650;
  uint64_t v651;
  uint64_t v652;
  int8x8_t v653;
  int8x8_t *v654;
  uint64_t v655;
  uint64_t v656;
  int8x8_t v657;
  int8x8_t *v658;
  uint64_t v659;
  int8x16_t v660;
  int8x16_t *v661;
  char *v662;
  char *v663;
  char *v664;
  char *v665;
  int8x8_t v666;
  int8x8_t v667;
  uint64_t v668;
  int8x8_t *v669;
  int v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  char v677;
  _BYTE *v678;
  char v679;
  unsigned int *v680;
  unsigned int v681;
  unsigned int v682;
  uint64_t v683;
  uint64_t v684;
  unsigned int *v685;
  unsigned int v686;
  unsigned int v687;
  uint64_t v688;
  int *v689;
  int32x2_t v690;
  uint64_t v691;
  int32x2_t v692;
  uint64_t v693;
  uint64_t v694[2];
  __int128 v695;
  __int128 v696;
  uint64_t v697;
  uint64_t v698;
  void *v699;
  unint64_t v700;
  unsigned int v701;
  int v702;
  __int128 v703;
  __int128 v704;
  uint64_t v705;
  int *v706;
  void *v707;
  unint64_t v708;
  uint64_t v709;
  __int128 __b;
  __int128 v711;
  _BYTE v712[32];
  _BYTE v713[32];
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;

  v4 = a2[1];
  LODWORD(__b) = *a2;
  v3 = __b;
  DWORD1(__b) = v4;
  v694[0] = 0x7FFFFFFF80000000;
  sub_100257548((uint64_t)&v701, (_DWORD *)(a1 + 8), (int *)&__b, v694);
  *(_QWORD *)&__b = __PAIR64__(v4, v3);
  v709 = 0x7FFFFFFF80000000;
  sub_100257548((uint64_t)v694, (_DWORD *)(a1 + 104), (int *)&__b, &v709);
  switch(v701 & 7)
  {
    case 0u:
      v5 = v708;
      v6 = *v706;
      v7 = v706[1] + v706[1] * ((v701 >> 3) & 0x1FF);
      v8 = v700;
      if ((v701 & 0x4000) != 0)
      {
        v9 = v7 * v6;
        if ((v694[0] & 0x4000) != 0)
        {
          v7 *= v6;
          v6 = 1;
          v8 = v9;
          v5 = v9;
        }
      }
      v10 = *(double *)(a1 + 200);
      v11 = *(double *)(a1 + 208);
      v12 = *(_DWORD *)(a1 + 216);
      v13 = v703;
      v14 = v695;
      v15 = (int)v10;
      if ((sub_100294AFC(3) & 1) != 0 || sub_100294AFC(100))
      {
        v16 = (uint8x16_t)vdupq_n_s8(v15);
        v17 = vdupq_n_s8((int)v11);
        switch(v12)
        {
          case 0:
            v18 = 0;
            if (v6 < 1)
              goto LABEL_222;
            v19 = (v7 - 16);
            if (v7 < 16)
              goto LABEL_222;
            for (i = 0; i != v6; ++i)
            {
              for (j = 0; j <= v19; j += 16)
                *(int8x16_t *)(v14 + j) = vandq_s8(v17, (int8x16_t)vcgtq_u8(*(uint8x16_t *)(v13 + j), v16));
              v13 += v5;
              v14 += v8;
            }
            break;
          case 1:
            v18 = 0;
            if (v6 < 1)
              goto LABEL_222;
            v19 = (v7 - 16);
            if (v7 < 16)
              goto LABEL_222;
            for (k = 0; k != v6; ++k)
            {
              for (m = 0; m <= v19; m += 16)
                *(int8x16_t *)(v14 + m) = vbicq_s8(v17, (int8x16_t)vcgtq_u8(*(uint8x16_t *)(v13 + m), v16));
              v13 += v5;
              v14 += v8;
            }
            break;
          case 2:
            v18 = 0;
            if (v6 < 1)
              goto LABEL_222;
            v19 = (v7 - 16);
            if (v7 < 16)
              goto LABEL_222;
            for (n = 0; n != v6; ++n)
            {
              for (ii = 0; ii <= v19; ii += 16)
                *(uint8x16_t *)(v14 + ii) = vqsubq_u8(*(uint8x16_t *)(v13 + ii), vqsubq_u8(*(uint8x16_t *)(v13 + ii), v16));
              v13 += v5;
              v14 += v8;
            }
            break;
          case 3:
            v18 = 0;
            if (v6 < 1)
              goto LABEL_222;
            v19 = (v7 - 16);
            if (v7 < 16)
              goto LABEL_222;
            for (jj = 0; jj != v6; ++jj)
            {
              for (kk = 0; kk <= v19; kk += 16)
                *(int8x16_t *)(v14 + kk) = vandq_s8(*(int8x16_t *)(v13 + kk), (int8x16_t)vcgtq_u8(*(uint8x16_t *)(v13 + kk), v16));
              v13 += v5;
              v14 += v8;
            }
            break;
          case 4:
            v18 = 0;
            if (v6 < 1)
              goto LABEL_222;
            v19 = (v7 - 16);
            if (v7 < 16)
              goto LABEL_222;
            for (mm = 0; mm != v6; ++mm)
            {
              for (nn = 0; nn <= v19; nn += 16)
                *(int8x16_t *)(v14 + nn) = vbicq_s8(*(int8x16_t *)(v13 + nn), (int8x16_t)vcgtq_u8(*(uint8x16_t *)(v13 + nn), v16));
              v13 += v5;
              v14 += v8;
            }
            break;
          default:
            goto LABEL_125;
        }
        v18 = (v19 & 0xFFFFFFF0) + 16;
      }
      else
      {
LABEL_125:
        v18 = 0;
      }
LABEL_222:
      if (v18 >= v7)
        goto LABEL_851;
      v722 = 0u;
      v723 = 0u;
      v720 = 0u;
      v721 = 0u;
      v718 = 0u;
      v719 = 0u;
      v716 = 0u;
      v717 = 0u;
      v714 = 0u;
      v715 = 0u;
      memset(v713, 0, sizeof(v713));
      memset(v712, 0, sizeof(v712));
      __b = 0u;
      v711 = 0u;
      v202 = (v15 + 1);
      switch(v12)
      {
        case 0:
          bzero(&__b, (v15 + 1));
          if ((_DWORD)v15 != 255)
            memset((char *)&__b + v202, (int)v11, v15 ^ 0xFF);
          goto LABEL_840;
        case 1:
          memset(&__b, (int)v11, (v15 + 1));
          if ((_DWORD)v15 != 255)
          {
            v459 = (char *)&__b + v202;
            goto LABEL_826;
          }
          goto LABEL_840;
        case 2:
          if (v15 < 7)
          {
            v460 = 0;
            goto LABEL_807;
          }
          if (v15 >= 0x1F)
          {
            v460 = ((_WORD)v15 + 1) & 0x1E0;
            __b = xmmword_1003C4960;
            v711 = xmmword_1003C4970;
            if (v460 != 32)
            {
              qmemcpy(v712, " !\"#$%&'()*+,-./0123456789:;<=>?", sizeof(v712));
              if (v460 != 64)
              {
                qmemcpy(v713, "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_", sizeof(v713));
                if (v460 != 96)
                {
                  v714 = xmmword_1003C49C0;
                  v715 = xmmword_1003C49D0;
                  if (v460 != 128)
                  {
                    v716 = xmmword_1003C49E0;
                    v717 = xmmword_1003C49F0;
                    if (v460 != 160)
                    {
                      v718 = xmmword_1003C4A00;
                      v719 = xmmword_1003C4A10;
                      if (v460 != 192)
                      {
                        v720 = xmmword_1003C4A20;
                        v721 = xmmword_1003C4A30;
                        if (v460 != 224)
                        {
                          v722 = xmmword_1003C4A40;
                          v723 = xmmword_1003C4A50;
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v460 == v202)
              goto LABEL_808;
            if ((((_BYTE)v15 + 1) & 0x18) == 0)
            {
              do
              {
LABEL_807:
                *((_BYTE *)&__b + v460) = v460;
                ++v460;
              }
              while (v202 != v460);
              goto LABEL_808;
            }
          }
          else
          {
            v460 = 0;
          }
          v652 = v460;
          v460 = ((_WORD)v15 + 1) & 0x1F8;
          v653 = vorr_s8(vdup_n_s8(v652), (int8x8_t)0x706050403020100);
          v654 = (int8x8_t *)((char *)&__b + v652);
          v655 = v652 - v460;
          do
          {
            *v654++ = v653;
            v653 = vadd_s8(v653, (int8x8_t)0x808080808080808);
            v655 += 8;
          }
          while (v655);
          if (v460 != v202)
            goto LABEL_807;
LABEL_808:
          if ((_DWORD)v15 != 255)
            memset((char *)&__b + v202, (int)v10, v15 ^ 0xFF);
          goto LABEL_840;
        case 3:
          bzero(&__b, (v15 + 1));
          if ((_DWORD)v15 == 255)
            goto LABEL_840;
          v461 = v15 + 1;
          v462 = v15 ^ 0xFF;
          if ((v15 ^ 0xFFuLL) < 8)
          {
            v463 = v15 + 1;
            goto LABEL_839;
          }
          if (v462 >= 0x20)
          {
            v660 = vdupq_n_s8(v461);
            v651 = ~(_BYTE)v15 & 0xE0;
            v661 = (int8x16_t *)((char *)&__b + v461);
            *v661 = vaddq_s8(v660, (int8x16_t)xmmword_1003C4960);
            v661[1] = vaddq_s8(v660, (int8x16_t)xmmword_1003C4970);
            if (v651 != 32)
            {
              v662 = (char *)&__b + v15;
              *(int8x16_t *)(v662 + 33) = vaddq_s8(v660, (int8x16_t)xmmword_1003C4980);
              *(int8x16_t *)(v662 + 49) = vaddq_s8(v660, (int8x16_t)xmmword_1003C4990);
              if (v651 != 64)
              {
                v663 = (char *)&__b + v15;
                *(int8x16_t *)(v663 + 65) = vaddq_s8(v660, (int8x16_t)xmmword_1003C49A0);
                *(int8x16_t *)(v663 + 81) = vaddq_s8(v660, (int8x16_t)xmmword_1003C49B0);
                if (v651 != 96)
                {
                  *(int8x16_t *)(v663 + 97) = vaddq_s8(v660, (int8x16_t)xmmword_1003C49C0);
                  *(int8x16_t *)(v663 + 113) = vaddq_s8(v660, (int8x16_t)xmmword_1003C49D0);
                  if (v651 != 128)
                  {
                    v664 = (char *)&__b + v15;
                    *(int8x16_t *)(v664 + 129) = vaddq_s8(v660, (int8x16_t)xmmword_1003C49E0);
                    *(int8x16_t *)(v664 + 145) = vaddq_s8(v660, (int8x16_t)xmmword_1003C49F0);
                    if (v651 != 160)
                    {
                      *(int8x16_t *)(v664 + 161) = vaddq_s8(v660, (int8x16_t)xmmword_1003C4A00);
                      *(int8x16_t *)(v664 + 177) = vaddq_s8(v660, (int8x16_t)xmmword_1003C4A10);
                      if (v651 != 192)
                      {
                        v665 = (char *)&__b + v15;
                        *(int8x16_t *)(v665 + 193) = vaddq_s8(v660, (int8x16_t)xmmword_1003C4A20);
                        *(int8x16_t *)(v665 + 209) = vaddq_s8(v660, (int8x16_t)xmmword_1003C4A30);
                      }
                    }
                  }
                }
              }
            }
            if (v462 == v651)
              goto LABEL_840;
            v463 = v461 + v651;
            if ((~(_BYTE)v15 & 0x18) == 0)
            {
              do
              {
LABEL_839:
                *((_BYTE *)&__b + v463) = v463;
                ++v463;
              }
              while (v463 != 256);
              goto LABEL_840;
            }
          }
          else
          {
            v651 = 0;
            LODWORD(v463) = v15 + 1;
          }
          v666 = vdup_n_s8(v463);
          v463 = v461 + (~(_BYTE)v15 & 0xF8);
          v667 = vadd_s8(v666, (int8x8_t)0x706050403020100);
          v668 = v651 - (~(_BYTE)v15 & 0xF8);
          v669 = (int8x8_t *)((char *)&__b + v651 + v15 + 1);
          do
          {
            *v669++ = v667;
            v667 = vadd_s8(v667, (int8x8_t)0x808080808080808);
            v668 += 8;
          }
          while (v668);
          if ((v15 ^ 0xFF) != (~(_BYTE)v15 & 0xF8))
            goto LABEL_839;
LABEL_840:
          if (v6 >= 1)
          {
            v670 = 0;
            v671 = v695;
            v672 = v703;
            v673 = v7 - 4;
            v674 = v703 + v18;
            v675 = v695 + v18;
            do
            {
              LODWORD(v676) = v18;
              if (v18 <= (int)v673)
              {
                v676 = 0;
                do
                {
                  v677 = *((_BYTE *)&__b + *(unsigned __int8 *)(v674 + v676 + 1));
                  v678 = (_BYTE *)(v675 + v676);
                  *v678 = *((_BYTE *)&__b + *(unsigned __int8 *)(v674 + v676));
                  v678[1] = v677;
                  v679 = *((_BYTE *)&__b + *(unsigned __int8 *)(v674 + v676 + 3));
                  v678[2] = *((_BYTE *)&__b + *(unsigned __int8 *)(v674 + v676 + 2));
                  v678[3] = v679;
                  v676 += 4;
                }
                while (v18 + v676 <= v673);
                LODWORD(v676) = v18 + v676;
              }
              if ((int)v676 < v7)
              {
                v676 = (int)v676;
                do
                {
                  *(_BYTE *)(v671 + v676) = *((_BYTE *)&__b + *(unsigned __int8 *)(v672 + v676));
                  ++v676;
                }
                while (v7 != v676);
              }
              ++v670;
              v672 += v5;
              v671 += v8;
              v674 += v5;
              v675 += v8;
            }
            while (v670 != v6);
          }
LABEL_851:
          if (v697)
          {
            v680 = (unsigned int *)(v697 + 20);
            do
            {
              v681 = __ldaxr(v680);
              v682 = v681 - 1;
            }
            while (__stlxr(v682, v680));
            if (!v682)
              sub_100256C90((uint64_t)v694);
          }
          v697 = 0;
          v695 = 0u;
          v696 = 0u;
          if (SHIDWORD(v694[0]) >= 1)
          {
            v683 = 0;
            v684 = v698;
            do
              *(_DWORD *)(v684 + 4 * v683++) = 0;
            while (v683 < SHIDWORD(v694[0]));
          }
          if (v699 != &v700)
            j__free(v699);
          if (v705)
          {
            v685 = (unsigned int *)(v705 + 20);
            do
            {
              v686 = __ldaxr(v685);
              v687 = v686 - 1;
            }
            while (__stlxr(v687, v685));
            if (!v687)
              sub_100256C90((uint64_t)&v701);
          }
          v705 = 0;
          v703 = 0u;
          v704 = 0u;
          if (v702 >= 1)
          {
            v688 = 0;
            v689 = v706;
            do
              v689[v688++] = 0;
            while (v688 < v702);
          }
          if (v707 != &v708)
            j__free(v707);
          return;
        case 4:
          if (v15 < 7)
          {
            v464 = 0;
            goto LABEL_823;
          }
          if (v15 >= 0x1F)
          {
            v464 = ((_WORD)v15 + 1) & 0x1E0;
            __b = xmmword_1003C4960;
            v711 = xmmword_1003C4970;
            if (v464 != 32)
            {
              qmemcpy(v712, " !\"#$%&'()*+,-./0123456789:;<=>?", sizeof(v712));
              if (v464 != 64)
              {
                qmemcpy(v713, "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_", sizeof(v713));
                if (v464 != 96)
                {
                  v714 = xmmword_1003C49C0;
                  v715 = xmmword_1003C49D0;
                  if (v464 != 128)
                  {
                    v716 = xmmword_1003C49E0;
                    v717 = xmmword_1003C49F0;
                    if (v464 != 160)
                    {
                      v718 = xmmword_1003C4A00;
                      v719 = xmmword_1003C4A10;
                      if (v464 != 192)
                      {
                        v720 = xmmword_1003C4A20;
                        v721 = xmmword_1003C4A30;
                        if (v464 != 224)
                        {
                          v722 = xmmword_1003C4A40;
                          v723 = xmmword_1003C4A50;
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v464 == v202)
              goto LABEL_824;
            if ((((_BYTE)v15 + 1) & 0x18) == 0)
            {
              do
              {
LABEL_823:
                *((_BYTE *)&__b + v464) = v464;
                ++v464;
              }
              while (v202 != v464);
              goto LABEL_824;
            }
          }
          else
          {
            v464 = 0;
          }
          v656 = v464;
          v464 = ((_WORD)v15 + 1) & 0x1F8;
          v657 = vorr_s8(vdup_n_s8(v656), (int8x8_t)0x706050403020100);
          v658 = (int8x8_t *)((char *)&__b + v656);
          v659 = v656 - v464;
          do
          {
            *v658++ = v657;
            v657 = vadd_s8(v657, (int8x8_t)0x808080808080808);
            v659 += 8;
          }
          while (v659);
          if (v464 != v202)
            goto LABEL_823;
LABEL_824:
          if ((_DWORD)v15 != 255)
          {
            v459 = (char *)&__b + v202;
LABEL_826:
            bzero(v459, v15 ^ 0xFF);
          }
          goto LABEL_840;
        default:
          goto LABEL_840;
      }
    case 2u:
      v50 = *v706;
      v51 = v706[1] + v706[1] * ((v701 >> 3) & 0x1FF);
      if ((v701 & v694[0] & 0x4000) != 0)
      {
        v51 *= v50;
        v52 = v51;
        v50 = 1;
        v53 = v51;
      }
      else
      {
        v53 = v708 / ((0x88442211uLL >> (4 * (v701 & 7))) & 0xF);
        v52 = v700 / ((0x88442211uLL >> (4 * (v694[0] & 7))) & 0xF);
      }
      v119 = *(double *)(a1 + 200);
      v120 = *(double *)(a1 + 208);
      v121 = *(_DWORD *)(a1 + 216);
      v122 = v703;
      v123 = v695;
      v124 = (int)v119;
      v125 = (int)v120;
      if ((sub_100294AFC(3) & 1) != 0 || sub_100294AFC(100))
      {
        v126 = (uint16x8_t)vdupq_n_s16(v124);
        v127 = (int8x16_t)vdupq_n_s16(v125);
        switch(v121)
        {
          case 0:
            if (v50 < 1)
              goto LABEL_851;
            v128 = 0;
            v129 = 2 * v52;
            v130 = 2 * v53;
            v131 = v122;
            v132 = v123;
            while (1)
            {
              if (v51 >= 16)
              {
                v134 = 0;
                v133 = 0;
                do
                {
                  v135 = vandq_s8(v127, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v131 + v134 + 16), v126));
                  v136 = (int8x16_t *)(v132 + v134);
                  *v136 = vandq_s8(v127, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v131 + v134), v126));
                  v136[1] = v135;
                  v133 += 16;
                  v134 += 32;
                }
                while (v133 <= v51 - 16);
                v133 = v133;
                if ((int)v133 < v51)
                {
LABEL_115:
                  v137 = v51 - v133;
                  if (v137 < 0x10)
                    goto LABEL_873;
                  v138 = 2 * v133;
                  if ((unint64_t)(v123 + v129 * v128 + 2 * v133 - (v122 + v130 * v128 + 2 * v133)) < 0x20)
                    goto LABEL_873;
                  v133 += v137 & 0xFFFFFFFFFFFFFFF0;
                  v139 = v137 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v140 = vandq_s8(v127, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v131 + v138 + 16), v126));
                    v141 = (int8x16_t *)(v132 + v138);
                    *v141 = vandq_s8(v127, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v131 + v138), v126));
                    v141[1] = v140;
                    v138 += 32;
                    v139 -= 16;
                  }
                  while (v139);
                  if (v137 != (v137 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_873:
                    do
                    {
                      if (*(unsigned __int16 *)(v131 + 2 * v133) <= v124)
                        v142 = 0;
                      else
                        v142 = (int)v120;
                      *(_WORD *)(v132 + 2 * v133++) = v142;
                    }
                    while (v51 != v133);
                  }
                }
              }
              else
              {
                v133 = 0;
                if (v51 > 0)
                  goto LABEL_115;
              }
              ++v128;
              v132 += v129;
              v131 += v130;
              if ((_DWORD)v128 == v50)
                goto LABEL_851;
            }
          case 1:
            if (v50 < 1)
              goto LABEL_851;
            v399 = 0;
            v400 = 2 * v52;
            v401 = 2 * v53;
            v402 = v122;
            v403 = v123;
            while (1)
            {
              if (v51 >= 16)
              {
                v405 = 0;
                v404 = 0;
                do
                {
                  v406 = vbicq_s8(v127, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v402 + v405 + 16), v126));
                  v407 = (int8x16_t *)(v403 + v405);
                  *v407 = vbicq_s8(v127, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v402 + v405), v126));
                  v407[1] = v406;
                  v404 += 16;
                  v405 += 32;
                }
                while (v404 <= v51 - 16);
                v404 = v404;
                if ((int)v404 < v51)
                {
LABEL_466:
                  v408 = v51 - v404;
                  if (v408 < 0x10)
                    goto LABEL_874;
                  v409 = 2 * v404;
                  if ((unint64_t)(v123 + v400 * v399 + 2 * v404 - (v122 + v401 * v399 + 2 * v404)) < 0x20)
                    goto LABEL_874;
                  v404 += v408 & 0xFFFFFFFFFFFFFFF0;
                  v410 = v408 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v411 = vbicq_s8(v127, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v402 + v409 + 16), v126));
                    v412 = (int8x16_t *)(v403 + v409);
                    *v412 = vbicq_s8(v127, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v402 + v409), v126));
                    v412[1] = v411;
                    v409 += 32;
                    v410 -= 16;
                  }
                  while (v410);
                  if (v408 != (v408 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_874:
                    do
                    {
                      if (*(unsigned __int16 *)(v402 + 2 * v404) <= v124)
                        v413 = (int)v120;
                      else
                        v413 = 0;
                      *(_WORD *)(v403 + 2 * v404++) = v413;
                    }
                    while (v51 != v404);
                  }
                }
              }
              else
              {
                v404 = 0;
                if (v51 > 0)
                  goto LABEL_466;
              }
              ++v399;
              v403 += v400;
              v402 += v401;
              if ((_DWORD)v399 == v50)
                goto LABEL_851;
            }
          case 2:
            if (v50 < 1)
              goto LABEL_851;
            v414 = 0;
            v415 = 2 * v52;
            v416 = 2 * v53;
            v417 = v122;
            v418 = v123;
            while (1)
            {
              if (v51 >= 16)
              {
                v420 = 0;
                v419 = 0;
                do
                {
                  v421 = vminq_u16(*(uint16x8_t *)(v417 + v420 + 16), v126);
                  v422 = (uint16x8_t *)(v418 + v420);
                  *v422 = vminq_u16(*(uint16x8_t *)(v417 + v420), v126);
                  v422[1] = v421;
                  v419 += 16;
                  v420 += 32;
                }
                while (v419 <= v51 - 16);
                v419 = v419;
                if ((int)v419 < v51)
                {
LABEL_485:
                  v423 = v51 - v419;
                  if (v423 < 0x10)
                    goto LABEL_875;
                  v424 = 2 * v419;
                  if ((unint64_t)(v123 + v415 * v414 + 2 * v419 - (v122 + v416 * v414 + 2 * v419)) < 0x20)
                    goto LABEL_875;
                  v419 += v423 & 0xFFFFFFFFFFFFFFF0;
                  v425 = v423 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v426 = vminq_u16(v126, *(uint16x8_t *)(v417 + v424 + 16));
                    v427 = (uint16x8_t *)(v418 + v424);
                    *v427 = vminq_u16(v126, *(uint16x8_t *)(v417 + v424));
                    v427[1] = v426;
                    v424 += 32;
                    v425 -= 16;
                  }
                  while (v425);
                  if (v423 != (v423 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_875:
                    do
                    {
                      v428 = *(unsigned __int16 *)(v417 + 2 * v419);
                      if (v124 < v428)
                        LOWORD(v428) = (int)v119;
                      *(_WORD *)(v418 + 2 * v419++) = v428;
                    }
                    while (v51 != v419);
                  }
                }
              }
              else
              {
                v419 = 0;
                if (v51 > 0)
                  goto LABEL_485;
              }
              ++v414;
              v418 += v415;
              v417 += v416;
              if ((_DWORD)v414 == v50)
                goto LABEL_851;
            }
          case 3:
            if (v50 < 1)
              goto LABEL_851;
            v429 = 0;
            v430 = 2 * v52;
            v431 = 2 * v53;
            v432 = v122;
            v433 = v123;
            while (1)
            {
              if (v51 >= 16)
              {
                v435 = 0;
                v434 = 0;
                do
                {
                  v436 = vandq_s8(*(int8x16_t *)(v432 + v435 + 16), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v432 + v435 + 16), v126));
                  v437 = (int8x16_t *)(v433 + v435);
                  *v437 = vandq_s8(*(int8x16_t *)(v432 + v435), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v432 + v435), v126));
                  v437[1] = v436;
                  v434 += 16;
                  v435 += 32;
                }
                while (v434 <= v51 - 16);
                v434 = v434;
                if ((int)v434 < v51)
                {
LABEL_503:
                  v438 = v51 - v434;
                  if (v438 < 0x10)
                    goto LABEL_876;
                  v439 = 2 * v434;
                  if ((unint64_t)(v123 + v430 * v429 + 2 * v434 - (v122 + v431 * v429 + 2 * v434)) < 0x20)
                    goto LABEL_876;
                  v434 += v438 & 0xFFFFFFFFFFFFFFF0;
                  v440 = v438 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v441 = vandq_s8(*(int8x16_t *)(v432 + v439 + 16), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v432 + v439 + 16), v126));
                    v442 = (int8x16_t *)(v433 + v439);
                    *v442 = vandq_s8(*(int8x16_t *)(v432 + v439), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v432 + v439), v126));
                    v442[1] = v441;
                    v439 += 32;
                    v440 -= 16;
                  }
                  while (v440);
                  if (v438 != (v438 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_876:
                    do
                    {
                      v443 = *(unsigned __int16 *)(v432 + 2 * v434);
                      if (v443 <= v124)
                        LOWORD(v443) = 0;
                      *(_WORD *)(v433 + 2 * v434++) = v443;
                    }
                    while (v51 != v434);
                  }
                }
              }
              else
              {
                v434 = 0;
                if (v51 > 0)
                  goto LABEL_503;
              }
              ++v429;
              v433 += v430;
              v432 += v431;
              if ((_DWORD)v429 == v50)
                goto LABEL_851;
            }
          case 4:
            if (v50 < 1)
              goto LABEL_851;
            v444 = 0;
            v445 = 2 * v52;
            v446 = 2 * v53;
            v447 = v122;
            v448 = v123;
            break;
          default:
            goto LABEL_851;
        }
        while (1)
        {
          if (v51 >= 16)
          {
            v450 = 0;
            v449 = 0;
            do
            {
              v451 = vbicq_s8(*(int8x16_t *)(v447 + v450 + 16), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v447 + v450 + 16), v126));
              v452 = (int8x16_t *)(v448 + v450);
              *v452 = vbicq_s8(*(int8x16_t *)(v447 + v450), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v447 + v450), v126));
              v452[1] = v451;
              v449 += 16;
              v450 += 32;
            }
            while (v449 <= v51 - 16);
            v449 = v449;
            if ((int)v449 < v51)
            {
LABEL_521:
              v453 = v51 - v449;
              if (v453 < 0x10)
                goto LABEL_877;
              v454 = 2 * v449;
              if ((unint64_t)(v123 + v445 * v444 + 2 * v449 - (v122 + v446 * v444 + 2 * v449)) < 0x20)
                goto LABEL_877;
              v449 += v453 & 0xFFFFFFFFFFFFFFF0;
              v455 = v453 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v456 = vbicq_s8(*(int8x16_t *)(v447 + v454 + 16), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v447 + v454 + 16), v126));
                v457 = (int8x16_t *)(v448 + v454);
                *v457 = vbicq_s8(*(int8x16_t *)(v447 + v454), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v447 + v454), v126));
                v457[1] = v456;
                v454 += 32;
                v455 -= 16;
              }
              while (v455);
              if (v453 != (v453 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_877:
                do
                {
                  v458 = *(unsigned __int16 *)(v447 + 2 * v449);
                  if (v458 > v124)
                    LOWORD(v458) = 0;
                  *(_WORD *)(v448 + 2 * v449++) = v458;
                }
                while (v51 != v449);
              }
            }
          }
          else
          {
            v449 = 0;
            if (v51 > 0)
              goto LABEL_521;
          }
          ++v444;
          v448 += v445;
          v447 += v446;
          if ((_DWORD)v444 == v50)
            goto LABEL_851;
        }
      }
      switch(v121)
      {
        case 0:
          if (v50 < 1 || v51 < 1)
            goto LABEL_851;
          v182 = 0;
          v183 = 2 * v52;
          v184 = 2 * v53;
          v185 = (uint16x8_t)vdupq_n_s16(v124);
          v186 = (int8x16_t)vdupq_n_s16(v125);
          v187 = v123;
          v188 = v122;
          while (v51 >= 0x10)
          {
            if ((unint64_t)(v123 + v183 * v182 - (v122 + v184 * v182)) < 0x20)
            {
              for (i1 = 0; i1 != v51; *(_WORD *)(v187 + 2 * i1++) = v193)
              {
LABEL_189:
                if (*(unsigned __int16 *)(v188 + 2 * i1) <= v124)
                  v193 = 0;
                else
                  v193 = (int)v120;
              }
              goto LABEL_181;
            }
            v190 = 0;
            do
            {
              v191 = vandq_s8(v186, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v188 + v190 + 16), v185));
              v192 = (int8x16_t *)(v187 + v190);
              *v192 = vandq_s8(v186, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v188 + v190), v185));
              v192[1] = v191;
              v190 += 32;
            }
            while (((2 * v51) & 0x1FFFFFFE0) != v190);
            i1 = v51 & 0xFFFFFFF0;
            if (i1 != v51)
              goto LABEL_189;
LABEL_181:
            ++v182;
            v188 += v184;
            v187 += v183;
            if ((_DWORD)v182 == v50)
              goto LABEL_851;
          }
          i1 = 0;
          goto LABEL_189;
        case 1:
          if (v50 < 1 || v51 < 1)
            goto LABEL_851;
          v606 = 0;
          v607 = 2 * v52;
          v608 = 2 * v53;
          v609 = (uint16x8_t)vdupq_n_s16(v124);
          v610 = (int8x16_t)vdupq_n_s16(v125);
          v611 = v123;
          v612 = v122;
          while (v51 >= 0x10)
          {
            if ((unint64_t)(v123 + v607 * v606 - (v122 + v608 * v606)) < 0x20)
            {
              for (i2 = 0; i2 != v51; *(_WORD *)(v611 + 2 * i2++) = v617)
              {
LABEL_741:
                if (*(unsigned __int16 *)(v612 + 2 * i2) <= v124)
                  v617 = (int)v120;
                else
                  v617 = 0;
              }
              goto LABEL_733;
            }
            v614 = 0;
            do
            {
              v615 = vbicq_s8(v610, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v612 + v614 + 16), v609));
              v616 = (int8x16_t *)(v611 + v614);
              *v616 = vbicq_s8(v610, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v612 + v614), v609));
              v616[1] = v615;
              v614 += 32;
            }
            while (((2 * v51) & 0x1FFFFFFE0) != v614);
            i2 = v51 & 0xFFFFFFF0;
            if (i2 != v51)
              goto LABEL_741;
LABEL_733:
            ++v606;
            v612 += v608;
            v611 += v607;
            if ((_DWORD)v606 == v50)
              goto LABEL_851;
          }
          i2 = 0;
          goto LABEL_741;
        case 2:
          if (v50 < 1 || v51 < 1)
            goto LABEL_851;
          v618 = 0;
          v619 = 2 * v52;
          v620 = 2 * v53;
          v621 = (uint16x8_t)vdupq_n_s16(v124);
          v622 = v123;
          v623 = v122;
          while (v51 >= 0x10)
          {
            if ((unint64_t)(v123 + v619 * v618 - (v122 + v620 * v618)) < 0x20)
            {
              for (i3 = 0; i3 != v51; *(_WORD *)(v622 + 2 * i3++) = v628)
              {
LABEL_757:
                v628 = *(unsigned __int16 *)(v623 + 2 * i3);
                if (v124 < v628)
                  LOWORD(v628) = (int)v119;
              }
              goto LABEL_749;
            }
            v625 = 0;
            do
            {
              v626 = vminq_u16(v621, *(uint16x8_t *)(v623 + v625 + 16));
              v627 = (uint16x8_t *)(v622 + v625);
              *v627 = vminq_u16(v621, *(uint16x8_t *)(v623 + v625));
              v627[1] = v626;
              v625 += 32;
            }
            while (((2 * v51) & 0x1FFFFFFE0) != v625);
            i3 = v51 & 0xFFFFFFF0;
            if (i3 != v51)
              goto LABEL_757;
LABEL_749:
            ++v618;
            v623 += v620;
            v622 += v619;
            if ((_DWORD)v618 == v50)
              goto LABEL_851;
          }
          i3 = 0;
          goto LABEL_757;
        case 3:
          if (v50 < 1 || v51 < 1)
            goto LABEL_851;
          v629 = 0;
          v630 = 2 * v52;
          v631 = 2 * v53;
          v632 = (uint16x8_t)vdupq_n_s16(v124);
          v633 = v123;
          v634 = v122;
          while (v51 >= 0x10)
          {
            if ((unint64_t)(v123 + v630 * v629 - (v122 + v631 * v629)) < 0x20)
            {
              for (i4 = 0; i4 != v51; *(_WORD *)(v633 + 2 * i4++) = v639)
              {
LABEL_772:
                v639 = *(unsigned __int16 *)(v634 + 2 * i4);
                if (v639 <= v124)
                  LOWORD(v639) = 0;
              }
              goto LABEL_764;
            }
            v636 = 0;
            do
            {
              v637 = vandq_s8(*(int8x16_t *)(v634 + v636 + 16), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v634 + v636 + 16), v632));
              v638 = (int8x16_t *)(v633 + v636);
              *v638 = vandq_s8(*(int8x16_t *)(v634 + v636), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v634 + v636), v632));
              v638[1] = v637;
              v636 += 32;
            }
            while (((2 * v51) & 0x1FFFFFFE0) != v636);
            i4 = v51 & 0xFFFFFFF0;
            if (i4 != v51)
              goto LABEL_772;
LABEL_764:
            ++v629;
            v634 += v631;
            v633 += v630;
            if ((_DWORD)v629 == v50)
              goto LABEL_851;
          }
          i4 = 0;
          goto LABEL_772;
        case 4:
          if (v50 < 1 || v51 < 1)
            goto LABEL_851;
          v640 = 0;
          v641 = 2 * v52;
          v642 = 2 * v53;
          v643 = (uint16x8_t)vdupq_n_s16(v124);
          v644 = v123;
          v645 = v122;
          break;
        default:
          __b = 0uLL;
          sub_100294B74(-5, (uint64_t *)&__b, "threshGeneric", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 120);
      }
      while (v51 >= 0x10)
      {
        if ((unint64_t)(v123 + v641 * v640 - (v122 + v642 * v640)) < 0x20)
        {
          for (i5 = 0; i5 != v51; *(_WORD *)(v644 + 2 * i5++) = v650)
          {
LABEL_787:
            v650 = *(unsigned __int16 *)(v645 + 2 * i5);
            if (v650 > v124)
              LOWORD(v650) = 0;
          }
          goto LABEL_779;
        }
        v647 = 0;
        do
        {
          v648 = vbicq_s8(*(int8x16_t *)(v645 + v647 + 16), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v645 + v647 + 16), v643));
          v649 = (int8x16_t *)(v644 + v647);
          *v649 = vbicq_s8(*(int8x16_t *)(v645 + v647), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v645 + v647), v643));
          v649[1] = v648;
          v647 += 32;
        }
        while (((2 * v51) & 0x1FFFFFFE0) != v647);
        i5 = v51 & 0xFFFFFFF0;
        if (i5 != v51)
          goto LABEL_787;
LABEL_779:
        ++v640;
        v645 += v642;
        v644 += v641;
        if ((_DWORD)v640 == v50)
          goto LABEL_851;
      }
      i5 = 0;
      goto LABEL_787;
    case 3u:
      v22 = *v706;
      v23 = v706[1] + v706[1] * ((v701 >> 3) & 0x1FF);
      v24 = v708 >> 1;
      v25 = v700 >> 1;
      if ((v701 & 0x4000) != 0)
      {
        v26 = v23 * v22;
        if ((v694[0] & 0x4000) != 0)
        {
          v23 *= v22;
          v22 = 1;
          v25 = v26;
          v24 = v26;
        }
      }
      v27 = *(double *)(a1 + 208);
      v28 = v703;
      v29 = v695;
      v30 = *(_DWORD *)(a1 + 216);
      v31 = (int)*(double *)(a1 + 200);
      v32 = (int)v27;
      if ((sub_100294AFC(3) & 1) != 0 || sub_100294AFC(100))
      {
        v33 = vdupq_n_s16(v31);
        v34 = (int8x16_t)vdupq_n_s16(v32);
        switch(v30)
        {
          case 0:
            if (v22 < 1)
              goto LABEL_851;
            v35 = 0;
            v36 = 2 * v25;
            v37 = 2 * v24;
            v38 = v28;
            v39 = v29;
            while (1)
            {
              if (v23 >= 16)
              {
                v41 = 0;
                v40 = 0;
                do
                {
                  v42 = vandq_s8(v34, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v38 + v41 + 16), v33));
                  v43 = (int8x16_t *)(v39 + v41);
                  *v43 = vandq_s8(v34, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v38 + v41), v33));
                  v43[1] = v42;
                  v40 += 16;
                  v41 += 32;
                }
                while (v40 <= v23 - 16);
                v40 = v40;
                if ((int)v40 < v23)
                {
LABEL_30:
                  v44 = v23 - v40;
                  if (v44 < 0x10)
                    goto LABEL_878;
                  v45 = 2 * v40;
                  if ((unint64_t)(v29 + v36 * v35 + 2 * v40 - (v28 + v37 * v35 + 2 * v40)) < 0x20)
                    goto LABEL_878;
                  v40 += v44 & 0xFFFFFFFFFFFFFFF0;
                  v46 = v44 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v47 = vandq_s8(v34, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v38 + v45 + 16), v33));
                    v48 = (int8x16_t *)(v39 + v45);
                    *v48 = vandq_s8(v34, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v38 + v45), v33));
                    v48[1] = v47;
                    v45 += 32;
                    v46 -= 16;
                  }
                  while (v46);
                  if (v44 != (v44 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_878:
                    do
                    {
                      if (*(__int16 *)(v38 + 2 * v40) <= v31)
                        v49 = 0;
                      else
                        v49 = (int)v27;
                      *(_WORD *)(v39 + 2 * v40++) = v49;
                    }
                    while (v23 != v40);
                  }
                }
              }
              else
              {
                v40 = 0;
                if (v23 > 0)
                  goto LABEL_30;
              }
              ++v35;
              v39 += v36;
              v38 += v37;
              if ((_DWORD)v35 == v22)
                goto LABEL_851;
            }
          case 1:
            if (v22 < 1)
              goto LABEL_851;
            v203 = 0;
            v204 = 2 * v25;
            v205 = 2 * v24;
            v206 = v28;
            v207 = v29;
            while (1)
            {
              if (v23 >= 16)
              {
                v209 = 0;
                v208 = 0;
                do
                {
                  v210 = vbicq_s8(v34, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v206 + v209 + 16), v33));
                  v211 = (int8x16_t *)(v207 + v209);
                  *v211 = vbicq_s8(v34, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v206 + v209), v33));
                  v211[1] = v210;
                  v208 += 16;
                  v209 += 32;
                }
                while (v208 <= v23 - 16);
                v208 = v208;
                if ((int)v208 < v23)
                {
LABEL_236:
                  v212 = v23 - v208;
                  if (v212 < 0x10)
                    goto LABEL_879;
                  v213 = 2 * v208;
                  if ((unint64_t)(v29 + v204 * v203 + 2 * v208 - (v28 + v205 * v203 + 2 * v208)) < 0x20)
                    goto LABEL_879;
                  v208 += v212 & 0xFFFFFFFFFFFFFFF0;
                  v214 = v212 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v215 = vbicq_s8(v34, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v206 + v213 + 16), v33));
                    v216 = (int8x16_t *)(v207 + v213);
                    *v216 = vbicq_s8(v34, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v206 + v213), v33));
                    v216[1] = v215;
                    v213 += 32;
                    v214 -= 16;
                  }
                  while (v214);
                  if (v212 != (v212 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_879:
                    do
                    {
                      if (*(__int16 *)(v206 + 2 * v208) <= v31)
                        v217 = (int)v27;
                      else
                        v217 = 0;
                      *(_WORD *)(v207 + 2 * v208++) = v217;
                    }
                    while (v23 != v208);
                  }
                }
              }
              else
              {
                v208 = 0;
                if (v23 > 0)
                  goto LABEL_236;
              }
              ++v203;
              v207 += v204;
              v206 += v205;
              if ((_DWORD)v203 == v22)
                goto LABEL_851;
            }
          case 2:
            if (v22 < 1)
              goto LABEL_851;
            v218 = 0;
            v219 = 2 * v25;
            v220 = 2 * v24;
            v221 = v28;
            v222 = v29;
            while (1)
            {
              if (v23 >= 16)
              {
                v224 = 0;
                v223 = 0;
                do
                {
                  v225 = vminq_s16(*(int16x8_t *)(v221 + v224 + 16), v33);
                  v226 = (int16x8_t *)(v222 + v224);
                  *v226 = vminq_s16(*(int16x8_t *)(v221 + v224), v33);
                  v226[1] = v225;
                  v223 += 16;
                  v224 += 32;
                }
                while (v223 <= v23 - 16);
                v223 = v223;
                if ((int)v223 < v23)
                {
LABEL_255:
                  v227 = v23 - v223;
                  if (v227 < 0x10)
                    goto LABEL_880;
                  v228 = 2 * v223;
                  if ((unint64_t)(v29 + v219 * v218 + 2 * v223 - (v28 + v220 * v218 + 2 * v223)) < 0x20)
                    goto LABEL_880;
                  v223 += v227 & 0xFFFFFFFFFFFFFFF0;
                  v229 = v227 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v230 = vminq_s16(v33, *(int16x8_t *)(v221 + v228 + 16));
                    v231 = (int16x8_t *)(v222 + v228);
                    *v231 = vminq_s16(v33, *(int16x8_t *)(v221 + v228));
                    v231[1] = v230;
                    v228 += 32;
                    v229 -= 16;
                  }
                  while (v229);
                  if (v227 != (v227 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_880:
                    do
                    {
                      v232 = *(__int16 *)(v221 + 2 * v223);
                      if (v31 < v232)
                        LOWORD(v232) = v31;
                      *(_WORD *)(v222 + 2 * v223++) = v232;
                    }
                    while (v23 != v223);
                  }
                }
              }
              else
              {
                v223 = 0;
                if (v23 > 0)
                  goto LABEL_255;
              }
              ++v218;
              v222 += v219;
              v221 += v220;
              if ((_DWORD)v218 == v22)
                goto LABEL_851;
            }
          case 3:
            if (v22 < 1)
              goto LABEL_851;
            v233 = 0;
            v234 = 2 * v25;
            v235 = 2 * v24;
            v236 = v28;
            v237 = v29;
            while (1)
            {
              if (v23 >= 16)
              {
                v239 = 0;
                v238 = 0;
                do
                {
                  v240 = vandq_s8(*(int8x16_t *)(v236 + v239 + 16), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v236 + v239 + 16), v33));
                  v241 = (int8x16_t *)(v237 + v239);
                  *v241 = vandq_s8(*(int8x16_t *)(v236 + v239), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v236 + v239), v33));
                  v241[1] = v240;
                  v238 += 16;
                  v239 += 32;
                }
                while (v238 <= v23 - 16);
                v238 = v238;
                if ((int)v238 < v23)
                {
LABEL_273:
                  v242 = v23 - v238;
                  if (v242 < 0x10)
                    goto LABEL_881;
                  v243 = 2 * v238;
                  if ((unint64_t)(v29 + v234 * v233 + 2 * v238 - (v28 + v235 * v233 + 2 * v238)) < 0x20)
                    goto LABEL_881;
                  v238 += v242 & 0xFFFFFFFFFFFFFFF0;
                  v244 = v242 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v245 = vandq_s8(*(int8x16_t *)(v236 + v243 + 16), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v236 + v243 + 16), v33));
                    v246 = (int8x16_t *)(v237 + v243);
                    *v246 = vandq_s8(*(int8x16_t *)(v236 + v243), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v236 + v243), v33));
                    v246[1] = v245;
                    v243 += 32;
                    v244 -= 16;
                  }
                  while (v244);
                  if (v242 != (v242 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_881:
                    do
                    {
                      v247 = *(__int16 *)(v236 + 2 * v238);
                      if (v247 <= v31)
                        LOWORD(v247) = 0;
                      *(_WORD *)(v237 + 2 * v238++) = v247;
                    }
                    while (v23 != v238);
                  }
                }
              }
              else
              {
                v238 = 0;
                if (v23 > 0)
                  goto LABEL_273;
              }
              ++v233;
              v237 += v234;
              v236 += v235;
              if ((_DWORD)v233 == v22)
                goto LABEL_851;
            }
          case 4:
            if (v22 < 1)
              goto LABEL_851;
            v248 = 0;
            v249 = 2 * v25;
            v250 = 2 * v24;
            v251 = v28;
            v252 = v29;
            break;
          default:
            __b = 0uLL;
            sub_100294B74(-5, (uint64_t *)&__b, "thresh_16s", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 673);
        }
        while (1)
        {
          if (v23 >= 16)
          {
            v254 = 0;
            v253 = 0;
            do
            {
              v255 = vbicq_s8(*(int8x16_t *)(v251 + v254 + 16), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v251 + v254 + 16), v33));
              v256 = (int8x16_t *)(v252 + v254);
              *v256 = vbicq_s8(*(int8x16_t *)(v251 + v254), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v251 + v254), v33));
              v256[1] = v255;
              v253 += 16;
              v254 += 32;
            }
            while (v253 <= v23 - 16);
            v253 = v253;
            if ((int)v253 < v23)
            {
LABEL_291:
              v257 = v23 - v253;
              if (v257 < 0x10)
                goto LABEL_882;
              v258 = 2 * v253;
              if ((unint64_t)(v29 + v249 * v248 + 2 * v253 - (v28 + v250 * v248 + 2 * v253)) < 0x20)
                goto LABEL_882;
              v253 += v257 & 0xFFFFFFFFFFFFFFF0;
              v259 = v257 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v260 = vbicq_s8(*(int8x16_t *)(v251 + v258 + 16), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v251 + v258 + 16), v33));
                v261 = (int8x16_t *)(v252 + v258);
                *v261 = vbicq_s8(*(int8x16_t *)(v251 + v258), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v251 + v258), v33));
                v261[1] = v260;
                v258 += 32;
                v259 -= 16;
              }
              while (v259);
              if (v257 != (v257 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_882:
                do
                {
                  v262 = *(__int16 *)(v251 + 2 * v253);
                  if (v262 > v31)
                    LOWORD(v262) = 0;
                  *(_WORD *)(v252 + 2 * v253++) = v262;
                }
                while (v23 != v253);
              }
            }
          }
          else
          {
            v253 = 0;
            if (v23 > 0)
              goto LABEL_291;
          }
          ++v248;
          v252 += v249;
          v251 += v250;
          if ((_DWORD)v248 == v22)
            goto LABEL_851;
        }
      }
      switch(v30)
      {
        case 0:
          if (v22 < 1 || v23 < 1)
            goto LABEL_851;
          v143 = 0;
          v144 = 2 * v25;
          v145 = 2 * v24;
          v146 = vdupq_n_s16(v31);
          v147 = (int8x16_t)vdupq_n_s16(v32);
          v148 = v29;
          v149 = v28;
          while (v23 >= 0x10)
          {
            if ((unint64_t)(v29 + v144 * v143 - (v28 + v145 * v143)) < 0x20)
            {
              for (i6 = 0; i6 != v23; *(_WORD *)(v148 + 2 * i6++) = v154)
              {
LABEL_138:
                if (*(__int16 *)(v149 + 2 * i6) <= v31)
                  v154 = 0;
                else
                  v154 = (int)v27;
              }
              goto LABEL_130;
            }
            v151 = 0;
            do
            {
              v152 = vandq_s8(v147, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v149 + v151 + 16), v146));
              v153 = (int8x16_t *)(v148 + v151);
              *v153 = vandq_s8(v147, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v149 + v151), v146));
              v153[1] = v152;
              v151 += 32;
            }
            while (((2 * v23) & 0x1FFFFFFE0) != v151);
            i6 = v23 & 0xFFFFFFF0;
            if (i6 != v23)
              goto LABEL_138;
LABEL_130:
            ++v143;
            v149 += v145;
            v148 += v144;
            if ((_DWORD)v143 == v22)
              goto LABEL_851;
          }
          i6 = 0;
          goto LABEL_138;
        case 1:
          if (v22 < 1 || v23 < 1)
            goto LABEL_851;
          v465 = 0;
          v466 = 2 * v25;
          v467 = 2 * v24;
          v468 = vdupq_n_s16(v31);
          v469 = (int8x16_t)vdupq_n_s16(v32);
          v470 = v29;
          v471 = v28;
          while (v23 >= 0x10)
          {
            if ((unint64_t)(v29 + v466 * v465 - (v28 + v467 * v465)) < 0x20)
            {
              for (i7 = 0; i7 != v23; *(_WORD *)(v470 + 2 * i7++) = v476)
              {
LABEL_556:
                if (*(__int16 *)(v471 + 2 * i7) <= v31)
                  v476 = (int)v27;
                else
                  v476 = 0;
              }
              goto LABEL_548;
            }
            v473 = 0;
            do
            {
              v474 = vbicq_s8(v469, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v471 + v473 + 16), v468));
              v475 = (int8x16_t *)(v470 + v473);
              *v475 = vbicq_s8(v469, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v471 + v473), v468));
              v475[1] = v474;
              v473 += 32;
            }
            while (((2 * v23) & 0x1FFFFFFE0) != v473);
            i7 = v23 & 0xFFFFFFF0;
            if (i7 != v23)
              goto LABEL_556;
LABEL_548:
            ++v465;
            v471 += v467;
            v470 += v466;
            if ((_DWORD)v465 == v22)
              goto LABEL_851;
          }
          i7 = 0;
          goto LABEL_556;
        case 2:
          if (v22 < 1 || v23 < 1)
            goto LABEL_851;
          v477 = 0;
          v478 = 2 * v25;
          v479 = 2 * v24;
          v480 = vdupq_n_s16(v31);
          v481 = v29;
          v482 = v28;
          while (v23 >= 0x10)
          {
            if ((unint64_t)(v29 + v478 * v477 - (v28 + v479 * v477)) < 0x20)
            {
              for (i8 = 0; i8 != v23; *(_WORD *)(v481 + 2 * i8++) = v487)
              {
LABEL_572:
                v487 = *(__int16 *)(v482 + 2 * i8);
                if (v31 < v487)
                  LOWORD(v487) = v31;
              }
              goto LABEL_564;
            }
            v484 = 0;
            do
            {
              v485 = vminq_s16(v480, *(int16x8_t *)(v482 + v484 + 16));
              v486 = (int16x8_t *)(v481 + v484);
              *v486 = vminq_s16(v480, *(int16x8_t *)(v482 + v484));
              v486[1] = v485;
              v484 += 32;
            }
            while (((2 * v23) & 0x1FFFFFFE0) != v484);
            i8 = v23 & 0xFFFFFFF0;
            if (i8 != v23)
              goto LABEL_572;
LABEL_564:
            ++v477;
            v482 += v479;
            v481 += v478;
            if ((_DWORD)v477 == v22)
              goto LABEL_851;
          }
          i8 = 0;
          goto LABEL_572;
        case 3:
          if (v22 < 1 || v23 < 1)
            goto LABEL_851;
          v488 = 0;
          v489 = 2 * v25;
          v490 = 2 * v24;
          v491 = vdupq_n_s16(v31);
          v492 = v29;
          v493 = v28;
          while (v23 >= 0x10)
          {
            if ((unint64_t)(v29 + v489 * v488 - (v28 + v490 * v488)) < 0x20)
            {
              for (i9 = 0; i9 != v23; *(_WORD *)(v492 + 2 * i9++) = v498)
              {
LABEL_587:
                v498 = *(__int16 *)(v493 + 2 * i9);
                if (v498 <= v31)
                  LOWORD(v498) = 0;
              }
              goto LABEL_579;
            }
            v495 = 0;
            do
            {
              v496 = vandq_s8(*(int8x16_t *)(v493 + v495 + 16), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v493 + v495 + 16), v491));
              v497 = (int8x16_t *)(v492 + v495);
              *v497 = vandq_s8(*(int8x16_t *)(v493 + v495), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v493 + v495), v491));
              v497[1] = v496;
              v495 += 32;
            }
            while (((2 * v23) & 0x1FFFFFFE0) != v495);
            i9 = v23 & 0xFFFFFFF0;
            if (i9 != v23)
              goto LABEL_587;
LABEL_579:
            ++v488;
            v493 += v490;
            v492 += v489;
            if ((_DWORD)v488 == v22)
              goto LABEL_851;
          }
          i9 = 0;
          goto LABEL_587;
        case 4:
          if (v22 < 1 || v23 < 1)
            goto LABEL_851;
          v499 = 0;
          v500 = 2 * v25;
          v501 = 2 * v24;
          v502 = vdupq_n_s16(v31);
          v503 = v29;
          v504 = v28;
          break;
        default:
          __b = 0uLL;
          sub_100294B74(-5, (uint64_t *)&__b, "threshGeneric", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 120);
      }
      while (v23 >= 0x10)
      {
        if ((unint64_t)(v29 + v500 * v499 - (v28 + v501 * v499)) < 0x20)
        {
          for (i10 = 0; i10 != v23; *(_WORD *)(v503 + 2 * i10++) = v509)
          {
LABEL_602:
            v509 = *(__int16 *)(v504 + 2 * i10);
            if (v509 > v31)
              LOWORD(v509) = 0;
          }
          goto LABEL_594;
        }
        v506 = 0;
        do
        {
          v507 = vbicq_s8(*(int8x16_t *)(v504 + v506 + 16), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v504 + v506 + 16), v502));
          v508 = (int8x16_t *)(v503 + v506);
          *v508 = vbicq_s8(*(int8x16_t *)(v504 + v506), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v504 + v506), v502));
          v508[1] = v507;
          v506 += 32;
        }
        while (((2 * v23) & 0x1FFFFFFE0) != v506);
        i10 = v23 & 0xFFFFFFF0;
        if (i10 != v23)
          goto LABEL_602;
LABEL_594:
        ++v499;
        v504 += v501;
        v503 += v500;
        if ((_DWORD)v499 == v22)
          goto LABEL_851;
      }
      i10 = 0;
      goto LABEL_602;
    case 5u:
      v54 = *v706;
      v55 = v706[1] + v706[1] * ((v701 >> 3) & 0x1FF);
      if ((v701 & 0x4000) != 0)
      {
        v56 = (v694[0] & 0x4000) != 0 ? *v706 : 1;
        v55 *= v56;
        if ((v694[0] & 0x4000) != 0)
          v54 = 1;
      }
      v57 = *(double *)(a1 + 200);
      v58 = *(double *)(a1 + 208);
      v59 = v703;
      v60 = v708;
      v61 = v695;
      v62 = v700;
      v63 = *(_DWORD *)(a1 + 216);
      v64 = sub_100294AFC(3);
      *(float *)v65.i32 = v57;
      v690 = v65;
      *(float *)v65.i32 = v58;
      v692 = v65;
      if ((v64 & 1) != 0 || sub_100294AFC(100))
      {
        v66 = v60 >> 2;
        v67 = (float32x4_t)vdupq_lane_s32(v690, 0);
        v68 = v62 >> 2;
        v69 = (int8x16_t)vdupq_lane_s32(v692, 0);
        switch(v63)
        {
          case 0:
            if (v54 < 1)
              goto LABEL_851;
            v70 = 0;
            v71 = (float32x4_t)vdupq_lane_s32(v690, 0);
            v72 = (int8x16_t)vdupq_lane_s32(v692, 0);
            v73 = 4 * v68;
            v74 = 4 * v66;
            v75 = v59;
            v76 = v61;
            while (1)
            {
              if (v55 >= 8)
              {
                v78 = 0;
                v77 = 0;
                do
                {
                  v79 = vandq_s8(v69, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v75 + v78 + 16), v67));
                  v80 = (int8x16_t *)(v76 + v78);
                  *v80 = vandq_s8(v69, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v75 + v78), v67));
                  v80[1] = v79;
                  v77 += 8;
                  v78 += 32;
                }
                while (v77 <= v55 - 8);
                v77 = v77;
                if ((int)v77 >= v55)
                  goto LABEL_53;
              }
              else
              {
                v77 = 0;
                if (v55 <= 0)
                  goto LABEL_53;
              }
              v81 = v55 - v77;
              if (v81 < 8)
              {
                v82 = *(float *)v692.i32;
                goto LABEL_67;
              }
              v83 = 4 * v77;
              if (v61
                 + (v62 & 0xFFFFFFFFFFFFFFFCLL) * v70
                 + 4 * v77
                 - (v59
                  + (v60 & 0xFFFFFFFFFFFFFFFCLL) * v70
                  + 4 * v77) < 0x20)
              {
                v82 = *(float *)v692.i32;
                do
                {
LABEL_67:
                  if (*(float *)(v75 + 4 * v77) <= *(float *)v690.i32)
                    v87 = 0.0;
                  else
                    v87 = v82;
                  *(float *)(v76 + 4 * v77++) = v87;
                }
                while (v55 != v77);
                goto LABEL_53;
              }
              v77 += v81 & 0xFFFFFFFFFFFFFFF8;
              v84 = v81 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v85 = vandq_s8(v72, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v75 + v83 + 16), v71));
                v86 = (int8x16_t *)(v76 + v83);
                *v86 = vandq_s8(v72, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v75 + v83), v71));
                v86[1] = v85;
                v83 += 32;
                v84 -= 8;
              }
              while (v84);
              v82 = *(float *)v692.i32;
              if (v81 != (v81 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_67;
LABEL_53:
              ++v70;
              v76 += v73;
              v75 += v74;
              if ((_DWORD)v70 == v54)
                goto LABEL_851;
            }
          case 1:
            if (v54 < 1)
              goto LABEL_851;
            v263 = 0;
            v264 = (float32x4_t)vdupq_lane_s32(v690, 0);
            v265 = (int8x16_t)vdupq_lane_s32(v692, 0);
            v266 = 4 * v68;
            v267 = 4 * v66;
            v268 = v59;
            v269 = v61;
            while (1)
            {
              if (v55 >= 8)
              {
                v271 = 0;
                v270 = 0;
                do
                {
                  v272 = vandq_s8(v69, (int8x16_t)vcgeq_f32(v67, *(float32x4_t *)(v268 + v271 + 16)));
                  v273 = (int8x16_t *)(v269 + v271);
                  *v273 = vandq_s8(v69, (int8x16_t)vcgeq_f32(v67, *(float32x4_t *)(v268 + v271)));
                  v273[1] = v272;
                  v270 += 8;
                  v271 += 32;
                }
                while (v270 <= v55 - 8);
                v270 = v270;
                if ((int)v270 >= v55)
                  goto LABEL_303;
              }
              else
              {
                v270 = 0;
                if (v55 <= 0)
                  goto LABEL_303;
              }
              v274 = v55 - v270;
              if (v274 < 8)
              {
                v275 = *(float *)v692.i32;
                goto LABEL_317;
              }
              v276 = 4 * v270;
              if (v61
                 + (v62 & 0xFFFFFFFFFFFFFFFCLL) * v263
                 + 4 * v270
                 - (v59
                  + (v60 & 0xFFFFFFFFFFFFFFFCLL) * v263
                  + 4 * v270) < 0x20)
              {
                v275 = *(float *)v692.i32;
                do
                {
LABEL_317:
                  if (*(float *)(v268 + 4 * v270) <= *(float *)v690.i32)
                    v280 = v275;
                  else
                    v280 = 0.0;
                  *(float *)(v269 + 4 * v270++) = v280;
                }
                while (v55 != v270);
                goto LABEL_303;
              }
              v270 += v274 & 0xFFFFFFFFFFFFFFF8;
              v277 = v274 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v278 = vandq_s8(v265, (int8x16_t)vcgeq_f32(v264, *(float32x4_t *)(v268 + v276 + 16)));
                v279 = (int8x16_t *)(v269 + v276);
                *v279 = vandq_s8(v265, (int8x16_t)vcgeq_f32(v264, *(float32x4_t *)(v268 + v276)));
                v279[1] = v278;
                v276 += 32;
                v277 -= 8;
              }
              while (v277);
              v275 = *(float *)v692.i32;
              if (v274 != (v274 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_317;
LABEL_303:
              ++v263;
              v269 += v266;
              v268 += v267;
              if ((_DWORD)v263 == v54)
                goto LABEL_851;
            }
          case 2:
            if (v54 < 1)
              goto LABEL_851;
            v281 = 0;
            v282 = (float32x4_t)vdupq_lane_s32(v690, 0);
            v283 = 4 * v68;
            v284 = 4 * v66;
            v285 = v59;
            v286 = v61;
            while (1)
            {
              if (v55 >= 8)
              {
                v288 = 0;
                v287 = 0;
                do
                {
                  v289 = vminq_f32(*(float32x4_t *)(v285 + v288 + 16), v67);
                  v290 = (float32x4_t *)(v286 + v288);
                  *v290 = vminq_f32(*(float32x4_t *)(v285 + v288), v67);
                  v290[1] = v289;
                  v287 += 8;
                  v288 += 32;
                }
                while (v287 <= v55 - 8);
                v287 = v287;
                if ((int)v287 < v55)
                {
LABEL_331:
                  v291 = v55 - v287;
                  if (v291 < 8)
                    goto LABEL_883;
                  v292 = 4 * v287;
                  if (v61
                     + (v62 & 0xFFFFFFFFFFFFFFFCLL) * v281
                     + 4 * v287
                     - (v59
                      + (v60 & 0xFFFFFFFFFFFFFFFCLL) * v281
                      + 4 * v287) < 0x20)
                    goto LABEL_883;
                  v287 += v291 & 0xFFFFFFFFFFFFFFF8;
                  v293 = v291 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    v294 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v285 + v292 + 16), v282), (int8x16_t)v282, *(int8x16_t *)(v285 + v292 + 16));
                    v295 = (int8x16_t *)(v286 + v292);
                    *v295 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v285 + v292), v282), (int8x16_t)v282, *(int8x16_t *)(v285 + v292));
                    v295[1] = v294;
                    v292 += 32;
                    v293 -= 8;
                  }
                  while (v293);
                  if (v291 != (v291 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_883:
                    do
                    {
                      v296 = *(float *)(v285 + 4 * v287);
                      if (v296 > *(float *)v690.i32)
                        v296 = *(float *)v690.i32;
                      *(float *)(v286 + 4 * v287++) = v296;
                    }
                    while (v55 != v287);
                  }
                }
              }
              else
              {
                v287 = 0;
                if (v55 > 0)
                  goto LABEL_331;
              }
              ++v281;
              v286 += v283;
              v285 += v284;
              if ((_DWORD)v281 == v54)
                goto LABEL_851;
            }
          case 3:
            if (v54 < 1)
              goto LABEL_851;
            v297 = 0;
            v298 = (float32x4_t)vdupq_lane_s32(v690, 0);
            v299 = 4 * v68;
            v300 = 4 * v66;
            v301 = v59;
            v302 = v61;
            while (1)
            {
              if (v55 >= 8)
              {
                v304 = 0;
                v303 = 0;
                do
                {
                  v305 = vandq_s8(*(int8x16_t *)(v301 + v304 + 16), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v301 + v304 + 16), v67));
                  v306 = (int8x16_t *)(v302 + v304);
                  *v306 = vandq_s8(*(int8x16_t *)(v301 + v304), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v301 + v304), v67));
                  v306[1] = v305;
                  v303 += 8;
                  v304 += 32;
                }
                while (v303 <= v55 - 8);
                v303 = v303;
                if ((int)v303 < v55)
                {
LABEL_349:
                  v307 = v55 - v303;
                  if (v307 < 8)
                    goto LABEL_884;
                  v308 = 4 * v303;
                  if (v61
                     + (v62 & 0xFFFFFFFFFFFFFFFCLL) * v297
                     + 4 * v303
                     - (v59
                      + (v60 & 0xFFFFFFFFFFFFFFFCLL) * v297
                      + 4 * v303) < 0x20)
                    goto LABEL_884;
                  v303 += v307 & 0xFFFFFFFFFFFFFFF8;
                  v309 = v307 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    v310 = vandq_s8(*(int8x16_t *)(v301 + v308 + 16), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v301 + v308 + 16), v298));
                    v311 = (int8x16_t *)(v302 + v308);
                    *v311 = vandq_s8(*(int8x16_t *)(v301 + v308), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v301 + v308), v298));
                    v311[1] = v310;
                    v308 += 32;
                    v309 -= 8;
                  }
                  while (v309);
                  if (v307 != (v307 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_884:
                    do
                    {
                      v312 = *(float *)(v301 + 4 * v303);
                      if (v312 <= *(float *)v690.i32)
                        v312 = 0.0;
                      *(float *)(v302 + 4 * v303++) = v312;
                    }
                    while (v55 != v303);
                  }
                }
              }
              else
              {
                v303 = 0;
                if (v55 > 0)
                  goto LABEL_349;
              }
              ++v297;
              v302 += v299;
              v301 += v300;
              if ((_DWORD)v297 == v54)
                goto LABEL_851;
            }
          case 4:
            if (v54 < 1)
              goto LABEL_851;
            v313 = 0;
            v314 = (float32x4_t)vdupq_lane_s32(v690, 0);
            v315 = 4 * v68;
            v316 = 4 * v66;
            v317 = v59;
            v318 = v61;
            break;
          default:
            __b = 0uLL;
            sub_100294B74(-5, (uint64_t *)&__b, "thresh_32f", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 853);
        }
        while (1)
        {
          if (v55 >= 8)
          {
            v320 = 0;
            v319 = 0;
            do
            {
              v321 = vandq_s8(*(int8x16_t *)(v317 + v320 + 16), (int8x16_t)vcgeq_f32(v67, *(float32x4_t *)(v317 + v320 + 16)));
              v322 = (int8x16_t *)(v318 + v320);
              *v322 = vandq_s8(*(int8x16_t *)(v317 + v320), (int8x16_t)vcgeq_f32(v67, *(float32x4_t *)(v317 + v320)));
              v322[1] = v321;
              v319 += 8;
              v320 += 32;
            }
            while (v319 <= v55 - 8);
            v319 = v319;
            if ((int)v319 < v55)
            {
LABEL_367:
              v323 = v55 - v319;
              if (v323 < 8)
                goto LABEL_885;
              v324 = 4 * v319;
              if (v61
                 + (v62 & 0xFFFFFFFFFFFFFFFCLL) * v313
                 + 4 * v319
                 - (v59
                  + (v60 & 0xFFFFFFFFFFFFFFFCLL) * v313
                  + 4 * v319) < 0x20)
                goto LABEL_885;
              v319 += v323 & 0xFFFFFFFFFFFFFFF8;
              v325 = v323 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v326 = vandq_s8(*(int8x16_t *)(v317 + v324 + 16), (int8x16_t)vcgeq_f32(v314, *(float32x4_t *)(v317 + v324 + 16)));
                v327 = (int8x16_t *)(v318 + v324);
                *v327 = vandq_s8(*(int8x16_t *)(v317 + v324), (int8x16_t)vcgeq_f32(v314, *(float32x4_t *)(v317 + v324)));
                v327[1] = v326;
                v324 += 32;
                v325 -= 8;
              }
              while (v325);
              if (v323 != (v323 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_885:
                do
                {
                  v328 = *(float *)(v317 + 4 * v319);
                  if (v328 > *(float *)v690.i32)
                    v328 = 0.0;
                  *(float *)(v318 + 4 * v319++) = v328;
                }
                while (v55 != v319);
              }
            }
          }
          else
          {
            v319 = 0;
            if (v55 > 0)
              goto LABEL_367;
          }
          ++v313;
          v318 += v315;
          v317 += v316;
          if ((_DWORD)v313 == v54)
            goto LABEL_851;
        }
      }
      switch(v63)
      {
        case 0:
          if (v54 < 1 || v55 < 1)
            goto LABEL_851;
          v155 = 0;
          v156 = v62 & 0xFFFFFFFFFFFFFFFCLL;
          v157 = v60 & 0xFFFFFFFFFFFFFFFCLL;
          v158 = (float32x4_t)vdupq_lane_s32(v690, 0);
          v159 = (int8x16_t)vdupq_lane_s32(v692, 0);
          v160 = v61;
          v161 = v59;
          while (v55 >= 8 && v61 + v156 * v155 - (v59 + v157 * v155) >= 0x20)
          {
            v165 = 0;
            do
            {
              v166 = vandq_s8(v159, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v161 + v165 + 16), v158));
              v167 = (int8x16_t *)(v160 + v165);
              *v167 = vandq_s8(v159, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v161 + v165), v158));
              v167[1] = v166;
              v165 += 32;
            }
            while (((4 * v55) & 0x3FFFFFFE0) != v165);
            v162 = v55 & 0xFFFFFFF8;
            v163 = *(float *)v692.i32;
            if (v162 != v55)
              goto LABEL_151;
LABEL_147:
            ++v155;
            v161 += v157;
            v160 += v156;
            if ((_DWORD)v155 == v54)
              goto LABEL_851;
          }
          v162 = 0;
          v163 = *(float *)v692.i32;
          do
          {
LABEL_151:
            if (*(float *)(v161 + 4 * v162) <= *(float *)v690.i32)
              v164 = 0.0;
            else
              v164 = v163;
            *(float *)(v160 + 4 * v162++) = v164;
          }
          while (v55 != v162);
          goto LABEL_147;
        case 1:
          if (v54 < 1 || v55 < 1)
            goto LABEL_851;
          v510 = 0;
          v511 = v62 & 0xFFFFFFFFFFFFFFFCLL;
          v512 = v60 & 0xFFFFFFFFFFFFFFFCLL;
          v513 = (float32x4_t)vdupq_lane_s32(v690, 0);
          v514 = (int8x16_t)vdupq_lane_s32(v692, 0);
          v515 = v61;
          v516 = v59;
          while (v55 >= 8 && v61 + v511 * v510 - (v59 + v512 * v510) >= 0x20)
          {
            v520 = 0;
            do
            {
              v521 = vandq_s8(v514, (int8x16_t)vcgeq_f32(v513, *(float32x4_t *)(v516 + v520 + 16)));
              v522 = (int8x16_t *)(v515 + v520);
              *v522 = vandq_s8(v514, (int8x16_t)vcgeq_f32(v513, *(float32x4_t *)(v516 + v520)));
              v522[1] = v521;
              v520 += 32;
            }
            while (((4 * v55) & 0x3FFFFFFE0) != v520);
            v517 = v55 & 0xFFFFFFF8;
            v518 = *(float *)v692.i32;
            if (v517 != v55)
              goto LABEL_614;
LABEL_610:
            ++v510;
            v516 += v512;
            v515 += v511;
            if ((_DWORD)v510 == v54)
              goto LABEL_851;
          }
          v517 = 0;
          v518 = *(float *)v692.i32;
          do
          {
LABEL_614:
            if (*(float *)(v516 + 4 * v517) <= *(float *)v690.i32)
              v519 = v518;
            else
              v519 = 0.0;
            *(float *)(v515 + 4 * v517++) = v519;
          }
          while (v55 != v517);
          goto LABEL_610;
        case 2:
          if (v54 < 1 || v55 < 1)
            goto LABEL_851;
          v523 = 0;
          v524 = v62 & 0xFFFFFFFFFFFFFFFCLL;
          v525 = v60 & 0xFFFFFFFFFFFFFFFCLL;
          v526 = (float32x4_t)vdupq_lane_s32(v690, 0);
          v527 = v61;
          v528 = v59;
          while (v55 >= 8)
          {
            if (v61 + v524 * v523 - (v59 + v525 * v523) < 0x20)
            {
              for (i11 = 0; i11 != v55; *(float *)(v527 + 4 * i11++) = v533)
              {
LABEL_634:
                v533 = *(float *)(v528 + 4 * i11);
                if (v533 > *(float *)v690.i32)
                  v533 = *(float *)v690.i32;
              }
              goto LABEL_626;
            }
            v530 = 0;
            do
            {
              v531 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v528 + v530 + 16), v526), (int8x16_t)v526, *(int8x16_t *)(v528 + v530 + 16));
              v532 = (int8x16_t *)(v527 + v530);
              *v532 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v528 + v530), v526), (int8x16_t)v526, *(int8x16_t *)(v528 + v530));
              v532[1] = v531;
              v530 += 32;
            }
            while (((4 * v55) & 0x3FFFFFFE0) != v530);
            i11 = v55 & 0xFFFFFFF8;
            if (i11 != v55)
              goto LABEL_634;
LABEL_626:
            ++v523;
            v528 += v525;
            v527 += v524;
            if ((_DWORD)v523 == v54)
              goto LABEL_851;
          }
          i11 = 0;
          goto LABEL_634;
        case 3:
          if (v54 < 1 || v55 < 1)
            goto LABEL_851;
          v534 = 0;
          v535 = v62 & 0xFFFFFFFFFFFFFFFCLL;
          v536 = v60 & 0xFFFFFFFFFFFFFFFCLL;
          v537 = (float32x4_t)vdupq_lane_s32(v690, 0);
          v538 = v61;
          v539 = v59;
          while (v55 >= 8)
          {
            if (v61 + v535 * v534 - (v59 + v536 * v534) < 0x20)
            {
              for (i12 = 0; i12 != v55; *(float *)(v538 + 4 * i12++) = v544)
              {
LABEL_649:
                v544 = *(float *)(v539 + 4 * i12);
                if (v544 <= *(float *)v690.i32)
                  v544 = 0.0;
              }
              goto LABEL_641;
            }
            v541 = 0;
            do
            {
              v542 = vandq_s8(*(int8x16_t *)(v539 + v541 + 16), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v539 + v541 + 16), v537));
              v543 = (int8x16_t *)(v538 + v541);
              *v543 = vandq_s8(*(int8x16_t *)(v539 + v541), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v539 + v541), v537));
              v543[1] = v542;
              v541 += 32;
            }
            while (((4 * v55) & 0x3FFFFFFE0) != v541);
            i12 = v55 & 0xFFFFFFF8;
            if (i12 != v55)
              goto LABEL_649;
LABEL_641:
            ++v534;
            v539 += v536;
            v538 += v535;
            if ((_DWORD)v534 == v54)
              goto LABEL_851;
          }
          i12 = 0;
          goto LABEL_649;
        case 4:
          if (v54 < 1 || v55 < 1)
            goto LABEL_851;
          v545 = 0;
          v546 = v62 & 0xFFFFFFFFFFFFFFFCLL;
          v547 = v60 & 0xFFFFFFFFFFFFFFFCLL;
          v548 = (float32x4_t)vdupq_lane_s32(v690, 0);
          v549 = v61;
          v550 = v59;
          break;
        default:
          __b = 0uLL;
          sub_100294B74(-5, (uint64_t *)&__b, "threshGeneric", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 120);
      }
      while (v55 >= 8)
      {
        if (v61 + v546 * v545 - (v59 + v547 * v545) < 0x20)
        {
          for (i13 = 0; i13 != v55; *(float *)(v549 + 4 * i13++) = v555)
          {
LABEL_664:
            v555 = *(float *)(v550 + 4 * i13);
            if (v555 > *(float *)v690.i32)
              v555 = 0.0;
          }
          goto LABEL_656;
        }
        v552 = 0;
        do
        {
          v553 = vandq_s8(*(int8x16_t *)(v550 + v552 + 16), (int8x16_t)vcgeq_f32(v548, *(float32x4_t *)(v550 + v552 + 16)));
          v554 = (int8x16_t *)(v549 + v552);
          *v554 = vandq_s8(*(int8x16_t *)(v550 + v552), (int8x16_t)vcgeq_f32(v548, *(float32x4_t *)(v550 + v552)));
          v554[1] = v553;
          v552 += 32;
        }
        while (((4 * v55) & 0x3FFFFFFE0) != v552);
        i13 = v55 & 0xFFFFFFF8;
        if (i13 != v55)
          goto LABEL_664;
LABEL_656:
        ++v545;
        v550 += v547;
        v549 += v546;
        if ((_DWORD)v545 == v54)
          goto LABEL_851;
      }
      i13 = 0;
      goto LABEL_664;
    case 6u:
      v88 = *v706;
      v89 = v706[1] + v706[1] * ((v701 >> 3) & 0x1FF);
      if ((v701 & 0x4000) != 0)
      {
        v90 = (v694[0] & 0x4000) != 0 ? *v706 : 1;
        v89 *= v90;
        if ((v694[0] & 0x4000) != 0)
          v88 = 1;
      }
      v91 = v703;
      v92 = v708;
      v93 = v695;
      v94 = v700;
      v693 = *(_QWORD *)(a1 + 200);
      v691 = *(_QWORD *)(a1 + 208);
      v95 = *(_DWORD *)(a1 + 216);
      if ((sub_100294AFC(3) & 1) != 0 || sub_100294AFC(100))
      {
        v96 = v92 >> 3;
        v97 = (float64x2_t)vdupq_lane_s64(v693, 0);
        v98 = v94 >> 3;
        v99 = (int8x16_t)vdupq_lane_s64(v691, 0);
        switch(v95)
        {
          case 0:
            if (v88 < 1)
              goto LABEL_851;
            v100 = 0;
            v101 = (float64x2_t)vdupq_lane_s64(v693, 0);
            v102 = (int8x16_t)vdupq_lane_s64(v691, 0);
            v103 = 8 * v98;
            v104 = 8 * v96;
            v105 = v91;
            v106 = v93;
            while (1)
            {
              if (v89 >= 4)
              {
                v108 = 0;
                v107 = 0;
                do
                {
                  v109 = vandq_s8(v99, (int8x16_t)vcgtq_f64(*(float64x2_t *)(v105 + v108 + 16), v97));
                  v110 = (int8x16_t *)(v106 + v108);
                  *v110 = vandq_s8(v99, (int8x16_t)vcgtq_f64(*(float64x2_t *)(v105 + v108), v97));
                  v110[1] = v109;
                  v107 += 4;
                  v108 += 32;
                }
                while (v107 <= v89 - 4);
                v107 = v107;
                if ((int)v107 >= v89)
                  goto LABEL_83;
              }
              else
              {
                v107 = 0;
                if (v89 <= 0)
                  goto LABEL_83;
              }
              v111 = v89 - v107;
              if (v111 < 8
                || (v112 = 8 * v107,
                    v93
                  + (v94 & 0xFFFFFFFFFFFFFFF8) * v100
                  + 8 * v107
                  - (v91
                   + (v92 & 0xFFFFFFFFFFFFFFF8) * v100
                   + 8 * v107) < 0x20))
              {
                v114 = *(double *)&v691;
                v113 = *(double *)&v693;
                do
                {
LABEL_93:
                  if (*(double *)(v105 + 8 * v107) <= v113)
                    v115 = 0.0;
                  else
                    v115 = v114;
                  *(double *)(v106 + 8 * v107++) = v115;
                }
                while (v89 != v107);
                goto LABEL_83;
              }
              v107 += v111 & 0xFFFFFFFFFFFFFFFCLL;
              v116 = v111 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v117 = vandq_s8(v102, (int8x16_t)vcgtq_f64(*(float64x2_t *)(v105 + v112 + 16), v101));
                v118 = (int8x16_t *)(v106 + v112);
                *v118 = vandq_s8(v102, (int8x16_t)vcgtq_f64(*(float64x2_t *)(v105 + v112), v101));
                v118[1] = v117;
                v112 += 32;
                v116 -= 4;
              }
              while (v116);
              v114 = *(double *)&v691;
              v113 = *(double *)&v693;
              if (v111 != (v111 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_93;
LABEL_83:
              ++v100;
              v106 += v103;
              v105 += v104;
              if ((_DWORD)v100 == v88)
                goto LABEL_851;
            }
          case 1:
            if (v88 < 1)
              goto LABEL_851;
            v329 = 0;
            v330 = (float64x2_t)vdupq_lane_s64(v693, 0);
            v331 = (int8x16_t)vdupq_lane_s64(v691, 0);
            v332 = 8 * v98;
            v333 = 8 * v96;
            v334 = v91;
            v335 = v93;
            while (1)
            {
              if (v89 >= 4)
              {
                v337 = 0;
                v336 = 0;
                do
                {
                  v338 = vandq_s8(v99, (int8x16_t)vcgeq_f64(v97, *(float64x2_t *)(v334 + v337 + 16)));
                  v339 = (int8x16_t *)(v335 + v337);
                  *v339 = vandq_s8(v99, (int8x16_t)vcgeq_f64(v97, *(float64x2_t *)(v334 + v337)));
                  v339[1] = v338;
                  v336 += 4;
                  v337 += 32;
                }
                while (v336 <= v89 - 4);
                v336 = v336;
                if ((int)v336 >= v89)
                  goto LABEL_378;
              }
              else
              {
                v336 = 0;
                if (v89 <= 0)
                  goto LABEL_378;
              }
              v340 = v89 - v336;
              if (v340 < 8
                || (v341 = 8 * v336,
                    v93
                  + (v94 & 0xFFFFFFFFFFFFFFF8) * v329
                  + 8 * v336
                  - (v91
                   + (v92 & 0xFFFFFFFFFFFFFFF8) * v329
                   + 8 * v336) < 0x20))
              {
                v343 = *(double *)&v691;
                v342 = *(double *)&v693;
                do
                {
LABEL_388:
                  if (*(double *)(v334 + 8 * v336) <= v342)
                    v344 = v343;
                  else
                    v344 = 0.0;
                  *(double *)(v335 + 8 * v336++) = v344;
                }
                while (v89 != v336);
                goto LABEL_378;
              }
              v336 += v340 & 0xFFFFFFFFFFFFFFFCLL;
              v345 = v340 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v346 = vandq_s8(v331, (int8x16_t)vcgeq_f64(v330, *(float64x2_t *)(v334 + v341 + 16)));
                v347 = (int8x16_t *)(v335 + v341);
                *v347 = vandq_s8(v331, (int8x16_t)vcgeq_f64(v330, *(float64x2_t *)(v334 + v341)));
                v347[1] = v346;
                v341 += 32;
                v345 -= 4;
              }
              while (v345);
              v343 = *(double *)&v691;
              v342 = *(double *)&v693;
              if (v340 != (v340 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_388;
LABEL_378:
              ++v329;
              v335 += v332;
              v334 += v333;
              if ((_DWORD)v329 == v88)
                goto LABEL_851;
            }
          case 2:
            if (v88 < 1)
              goto LABEL_851;
            v348 = 0;
            v349 = (float64x2_t)vdupq_lane_s64(v693, 0);
            v350 = 8 * v98;
            v351 = 8 * v96;
            v352 = v91;
            v353 = v93;
            while (1)
            {
              if (v89 >= 4)
              {
                v355 = 0;
                v354 = 0;
                do
                {
                  v356 = vminq_f64(*(float64x2_t *)(v352 + v355 + 16), v97);
                  v357 = (float64x2_t *)(v353 + v355);
                  *v357 = vminq_f64(*(float64x2_t *)(v352 + v355), v97);
                  v357[1] = v356;
                  v354 += 4;
                  v355 += 32;
                }
                while (v354 <= v89 - 4);
                v354 = v354;
                if ((int)v354 >= v89)
                  goto LABEL_399;
              }
              else
              {
                v354 = 0;
                if (v89 <= 0)
                  goto LABEL_399;
              }
              v358 = v89 - v354;
              if (v358 < 8)
              {
                v359 = *(double *)&v693;
                goto LABEL_413;
              }
              v360 = 8 * v354;
              if (v93
                 + (v94 & 0xFFFFFFFFFFFFFFF8) * v348
                 + 8 * v354
                 - (v91
                  + (v92 & 0xFFFFFFFFFFFFFFF8) * v348
                  + 8 * v354) < 0x20)
              {
                v359 = *(double *)&v693;
                do
                {
LABEL_413:
                  v364 = *(double *)(v352 + 8 * v354);
                  if (v364 > v359)
                    v364 = v359;
                  *(double *)(v353 + 8 * v354++) = v364;
                }
                while (v89 != v354);
                goto LABEL_399;
              }
              v354 += v358 & 0xFFFFFFFFFFFFFFFCLL;
              v361 = v358 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v362 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v352 + v360 + 16), v349), (int8x16_t)v349, *(int8x16_t *)(v352 + v360 + 16));
                v363 = (int8x16_t *)(v353 + v360);
                *v363 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v352 + v360), v349), (int8x16_t)v349, *(int8x16_t *)(v352 + v360));
                v363[1] = v362;
                v360 += 32;
                v361 -= 4;
              }
              while (v361);
              v359 = *(double *)&v693;
              if (v358 != (v358 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_413;
LABEL_399:
              ++v348;
              v353 += v350;
              v352 += v351;
              if ((_DWORD)v348 == v88)
                goto LABEL_851;
            }
          case 3:
            if (v88 < 1)
              goto LABEL_851;
            v365 = 0;
            v366 = (float64x2_t)vdupq_lane_s64(v693, 0);
            v367 = 8 * v98;
            v368 = 8 * v96;
            v369 = v91;
            v370 = v93;
            while (1)
            {
              if (v89 >= 4)
              {
                v372 = 0;
                v371 = 0;
                do
                {
                  v373 = vandq_s8(*(int8x16_t *)(v369 + v372 + 16), (int8x16_t)vcgtq_f64(*(float64x2_t *)(v369 + v372 + 16), v97));
                  v374 = (int8x16_t *)(v370 + v372);
                  *v374 = vandq_s8(*(int8x16_t *)(v369 + v372), (int8x16_t)vcgtq_f64(*(float64x2_t *)(v369 + v372), v97));
                  v374[1] = v373;
                  v371 += 4;
                  v372 += 32;
                }
                while (v371 <= v89 - 4);
                v371 = v371;
                if ((int)v371 >= v89)
                  goto LABEL_419;
              }
              else
              {
                v371 = 0;
                if (v89 <= 0)
                  goto LABEL_419;
              }
              v375 = v89 - v371;
              if (v375 < 8)
              {
                v376 = *(double *)&v693;
                goto LABEL_433;
              }
              v377 = 8 * v371;
              if (v93
                 + (v94 & 0xFFFFFFFFFFFFFFF8) * v365
                 + 8 * v371
                 - (v91
                  + (v92 & 0xFFFFFFFFFFFFFFF8) * v365
                  + 8 * v371) < 0x20)
              {
                v376 = *(double *)&v693;
                do
                {
LABEL_433:
                  v381 = *(double *)(v369 + 8 * v371);
                  if (v381 <= v376)
                    v381 = 0.0;
                  *(double *)(v370 + 8 * v371++) = v381;
                }
                while (v89 != v371);
                goto LABEL_419;
              }
              v371 += v375 & 0xFFFFFFFFFFFFFFFCLL;
              v378 = v375 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v379 = vandq_s8(*(int8x16_t *)(v369 + v377 + 16), (int8x16_t)vcgtq_f64(*(float64x2_t *)(v369 + v377 + 16), v366));
                v380 = (int8x16_t *)(v370 + v377);
                *v380 = vandq_s8(*(int8x16_t *)(v369 + v377), (int8x16_t)vcgtq_f64(*(float64x2_t *)(v369 + v377), v366));
                v380[1] = v379;
                v377 += 32;
                v378 -= 4;
              }
              while (v378);
              v376 = *(double *)&v693;
              if (v375 != (v375 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_433;
LABEL_419:
              ++v365;
              v370 += v367;
              v369 += v368;
              if ((_DWORD)v365 == v88)
                goto LABEL_851;
            }
          case 4:
            if (v88 < 1)
              goto LABEL_851;
            v382 = 0;
            v383 = (float64x2_t)vdupq_lane_s64(v693, 0);
            v384 = 8 * v98;
            v385 = 8 * v96;
            v386 = v91;
            v387 = v93;
            break;
          default:
            __b = 0uLL;
            sub_100294B74(-5, (uint64_t *)&__b, "thresh_64f", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 993);
        }
        while (1)
        {
          if (v89 >= 4)
          {
            v389 = 0;
            v388 = 0;
            do
            {
              v390 = vandq_s8(*(int8x16_t *)(v386 + v389 + 16), (int8x16_t)vcgeq_f64(v97, *(float64x2_t *)(v386 + v389 + 16)));
              v391 = (int8x16_t *)(v387 + v389);
              *v391 = vandq_s8(*(int8x16_t *)(v386 + v389), (int8x16_t)vcgeq_f64(v97, *(float64x2_t *)(v386 + v389)));
              v391[1] = v390;
              v388 += 4;
              v389 += 32;
            }
            while (v388 <= v89 - 4);
            v388 = v388;
            if ((int)v388 >= v89)
              goto LABEL_439;
          }
          else
          {
            v388 = 0;
            if (v89 <= 0)
              goto LABEL_439;
          }
          v392 = v89 - v388;
          if (v392 < 8)
          {
            v393 = *(double *)&v693;
            goto LABEL_453;
          }
          v394 = 8 * v388;
          if (v93
             + (v94 & 0xFFFFFFFFFFFFFFF8) * v382
             + 8 * v388
             - (v91
              + (v92 & 0xFFFFFFFFFFFFFFF8) * v382
              + 8 * v388) < 0x20)
          {
            v393 = *(double *)&v693;
            do
            {
LABEL_453:
              v398 = *(double *)(v386 + 8 * v388);
              if (v398 > v393)
                v398 = 0.0;
              *(double *)(v387 + 8 * v388++) = v398;
            }
            while (v89 != v388);
            goto LABEL_439;
          }
          v388 += v392 & 0xFFFFFFFFFFFFFFFCLL;
          v395 = v392 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v396 = vandq_s8(*(int8x16_t *)(v386 + v394 + 16), (int8x16_t)vcgeq_f64(v383, *(float64x2_t *)(v386 + v394 + 16)));
            v397 = (int8x16_t *)(v387 + v394);
            *v397 = vandq_s8(*(int8x16_t *)(v386 + v394), (int8x16_t)vcgeq_f64(v383, *(float64x2_t *)(v386 + v394)));
            v397[1] = v396;
            v394 += 32;
            v395 -= 4;
          }
          while (v395);
          v393 = *(double *)&v693;
          if (v392 != (v392 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_453;
LABEL_439:
          ++v382;
          v387 += v384;
          v386 += v385;
          if ((_DWORD)v382 == v88)
            goto LABEL_851;
        }
      }
      break;
    default:
      goto LABEL_851;
  }
  switch(v95)
  {
    case 0:
      if (v88 < 1 || v89 < 1)
        goto LABEL_851;
      v168 = 0;
      v169 = v94 & 0xFFFFFFFFFFFFFFF8;
      v170 = v92 & 0xFFFFFFFFFFFFFFF8;
      v171 = (float64x2_t)vdupq_lane_s64(v693, 0);
      v172 = (int8x16_t)vdupq_lane_s64(v691, 0);
      v173 = v93;
      v174 = v91;
      while (v89 >= 4 && v93 + v169 * v168 - (v91 + v170 * v168) >= 0x20)
      {
        v179 = 0;
        do
        {
          v180 = vandq_s8(v172, (int8x16_t)vcgtq_f64(*(float64x2_t *)(v174 + v179 + 16), v171));
          v181 = (int8x16_t *)(v173 + v179);
          *v181 = vandq_s8(v172, (int8x16_t)vcgtq_f64(*(float64x2_t *)(v174 + v179), v171));
          v181[1] = v180;
          v179 += 32;
        }
        while (((8 * v89) & 0x7FFFFFFE0) != v179);
        v175 = v89 & 0xFFFFFFFC;
        v177 = *(double *)&v691;
        v176 = *(double *)&v693;
        if (v175 != v89)
          goto LABEL_168;
LABEL_164:
        ++v168;
        v174 += v170;
        v173 += v169;
        if ((_DWORD)v168 == v88)
          goto LABEL_851;
      }
      v175 = 0;
      v177 = *(double *)&v691;
      v176 = *(double *)&v693;
      do
      {
LABEL_168:
        if (*(double *)(v174 + 8 * v175) <= v176)
          v178 = 0.0;
        else
          v178 = v177;
        *(double *)(v173 + 8 * v175++) = v178;
      }
      while (v89 != v175);
      goto LABEL_164;
    case 1:
      if (v88 < 1 || v89 < 1)
        goto LABEL_851;
      v556 = 0;
      v557 = v94 & 0xFFFFFFFFFFFFFFF8;
      v558 = v92 & 0xFFFFFFFFFFFFFFF8;
      v559 = (float64x2_t)vdupq_lane_s64(v693, 0);
      v560 = (int8x16_t)vdupq_lane_s64(v691, 0);
      v561 = v93;
      v562 = v91;
      while (v89 >= 4 && v93 + v557 * v556 - (v91 + v558 * v556) >= 0x20)
      {
        v567 = 0;
        do
        {
          v568 = vandq_s8(v560, (int8x16_t)vcgeq_f64(v559, *(float64x2_t *)(v562 + v567 + 16)));
          v569 = (int8x16_t *)(v561 + v567);
          *v569 = vandq_s8(v560, (int8x16_t)vcgeq_f64(v559, *(float64x2_t *)(v562 + v567)));
          v569[1] = v568;
          v567 += 32;
        }
        while (((8 * v89) & 0x7FFFFFFE0) != v567);
        v563 = v89 & 0xFFFFFFFC;
        v565 = *(double *)&v691;
        v564 = *(double *)&v693;
        if (v563 != v89)
          goto LABEL_675;
LABEL_671:
        ++v556;
        v562 += v558;
        v561 += v557;
        if ((_DWORD)v556 == v88)
          goto LABEL_851;
      }
      v563 = 0;
      v565 = *(double *)&v691;
      v564 = *(double *)&v693;
      do
      {
LABEL_675:
        if (*(double *)(v562 + 8 * v563) <= v564)
          v566 = v565;
        else
          v566 = 0.0;
        *(double *)(v561 + 8 * v563++) = v566;
      }
      while (v89 != v563);
      goto LABEL_671;
    case 2:
      if (v88 < 1 || v89 < 1)
        goto LABEL_851;
      v570 = 0;
      v571 = v94 & 0xFFFFFFFFFFFFFFF8;
      v572 = v92 & 0xFFFFFFFFFFFFFFF8;
      v573 = (float64x2_t)vdupq_lane_s64(v693, 0);
      v574 = v93;
      v575 = v91;
      while (v89 >= 4 && v93 + v571 * v570 - (v91 + v572 * v570) >= 0x20)
      {
        v579 = 0;
        do
        {
          v580 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v575 + v579 + 16), v573), (int8x16_t)v573, *(int8x16_t *)(v575 + v579 + 16));
          v581 = (int8x16_t *)(v574 + v579);
          *v581 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v575 + v579), v573), (int8x16_t)v573, *(int8x16_t *)(v575 + v579));
          v581[1] = v580;
          v579 += 32;
        }
        while (((8 * v89) & 0x7FFFFFFE0) != v579);
        v576 = v89 & 0xFFFFFFFC;
        v577 = *(double *)&v693;
        if (v576 != v89)
          goto LABEL_691;
LABEL_687:
        ++v570;
        v575 += v572;
        v574 += v571;
        if ((_DWORD)v570 == v88)
          goto LABEL_851;
      }
      v576 = 0;
      v577 = *(double *)&v693;
      do
      {
LABEL_691:
        v578 = *(double *)(v575 + 8 * v576);
        if (v578 > v577)
          v578 = v577;
        *(double *)(v574 + 8 * v576++) = v578;
      }
      while (v89 != v576);
      goto LABEL_687;
    case 3:
      if (v88 < 1 || v89 < 1)
        goto LABEL_851;
      v582 = 0;
      v583 = v94 & 0xFFFFFFFFFFFFFFF8;
      v584 = v92 & 0xFFFFFFFFFFFFFFF8;
      v585 = (float64x2_t)vdupq_lane_s64(v693, 0);
      v586 = v93;
      v587 = v91;
      while (v89 >= 4 && v93 + v583 * v582 - (v91 + v584 * v582) >= 0x20)
      {
        v591 = 0;
        do
        {
          v592 = vandq_s8(*(int8x16_t *)(v587 + v591 + 16), (int8x16_t)vcgtq_f64(*(float64x2_t *)(v587 + v591 + 16), v585));
          v593 = (int8x16_t *)(v586 + v591);
          *v593 = vandq_s8(*(int8x16_t *)(v587 + v591), (int8x16_t)vcgtq_f64(*(float64x2_t *)(v587 + v591), v585));
          v593[1] = v592;
          v591 += 32;
        }
        while (((8 * v89) & 0x7FFFFFFE0) != v591);
        v588 = v89 & 0xFFFFFFFC;
        v589 = *(double *)&v693;
        if (v588 != v89)
          goto LABEL_706;
LABEL_702:
        ++v582;
        v587 += v584;
        v586 += v583;
        if ((_DWORD)v582 == v88)
          goto LABEL_851;
      }
      v588 = 0;
      v589 = *(double *)&v693;
      do
      {
LABEL_706:
        v590 = *(double *)(v587 + 8 * v588);
        if (v590 <= v589)
          v590 = 0.0;
        *(double *)(v586 + 8 * v588++) = v590;
      }
      while (v89 != v588);
      goto LABEL_702;
    case 4:
      if (v88 < 1 || v89 < 1)
        goto LABEL_851;
      v594 = 0;
      v595 = v94 & 0xFFFFFFFFFFFFFFF8;
      v596 = v92 & 0xFFFFFFFFFFFFFFF8;
      v597 = (float64x2_t)vdupq_lane_s64(v693, 0);
      v598 = v93;
      v599 = v91;
      break;
    default:
      __b = 0uLL;
      sub_100294B74(-5, (uint64_t *)&__b, "threshGeneric", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 120);
  }
  while (v89 >= 4 && v93 + v595 * v594 - (v91 + v596 * v594) >= 0x20)
  {
    v603 = 0;
    do
    {
      v604 = vandq_s8(*(int8x16_t *)(v599 + v603 + 16), (int8x16_t)vcgeq_f64(v597, *(float64x2_t *)(v599 + v603 + 16)));
      v605 = (int8x16_t *)(v598 + v603);
      *v605 = vandq_s8(*(int8x16_t *)(v599 + v603), (int8x16_t)vcgeq_f64(v597, *(float64x2_t *)(v599 + v603)));
      v605[1] = v604;
      v603 += 32;
    }
    while (((8 * v89) & 0x7FFFFFFE0) != v603);
    v600 = v89 & 0xFFFFFFFC;
    v601 = *(double *)&v693;
    if (v600 != v89)
      goto LABEL_721;
LABEL_717:
    ++v594;
    v599 += v596;
    v598 += v595;
    if ((_DWORD)v594 == v88)
      goto LABEL_851;
  }
  v600 = 0;
  v601 = *(double *)&v693;
  do
  {
LABEL_721:
    v602 = *(double *)(v599 + 8 * v600);
    if (v602 > v601)
      v602 = 0.0;
    *(double *)(v598 + 8 * v600++) = v602;
  }
  while (v89 != v600);
  goto LABEL_717;
}

void sub_100359954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100359A4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_QWORD *)a1 = off_100454BD8;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    v3 = a1 + 104;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 168);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 108));
  }
  v9 = *(void **)(a1 + 176);
  if (v9 != (void *)(a1 + 184))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 8);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 12));
  }
  v16 = *(void **)(a1 + 80);
  if (v16 != (void *)(a1 + 88))
    j__free(v16);
  return nullsub_1(a1);
}

int *sub_100359B68(__int16 a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[5];

  v6 = a2;
  if (!a2 || !a3 || !a4)
  {
    v13[0] = 0;
    v13[1] = 0;
    qmemcpy((void *)sub_10029430C(v13, 45), "arr != 0 && contour_header != 0 && block != 0", 45);
    sub_100294B74(-215, v13, "cvPointSeqFromMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/utils.cpp", 47);
  }
  v8 = *(_DWORD *)a2;
  if (HIWORD(*(_DWORD *)a2) != 16962 || *(int *)(a2 + 36) < 1 || *(int *)(a2 + 32) < 1 || !*(_QWORD *)(a2 + 24))
  {
    v11 = 0;
    v12 = 0;
    qmemcpy((void *)sub_10029430C(&v11, 33), "Input array is not a valid matrix", 33);
    sub_100294B74(-5, &v11, "cvPointSeqFromMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/utils.cpp", 54);
  }
  if ((v8 & 0xFF8) == 0 && *(_DWORD *)(a2 + 36) == 2)
  {
    v6 = sub_1001F75F8(a2, (uint64_t)v13, 2, 0);
    v8 = *(_DWORD *)v6;
  }
  if ((v8 & 0xFFF) - 14 <= 0xFFFFFFFD)
  {
    v11 = 0;
    v12 = 0;
    qmemcpy((void *)sub_10029430C(&v11, 87), "The matrix can not be converted to point sequence because of inappropriate element type", 87);
    sub_100294B74(-210, &v11, "cvPointSeqFromMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/utils.cpp", 63);
  }
  v9 = *(_DWORD *)(v6 + 36);
  if (v9 != 1 && *(_DWORD *)(v6 + 32) != 1 || (*(_BYTE *)(v6 + 1) & 0x40) == 0)
  {
    v11 = 0;
    v12 = 0;
    qmemcpy((void *)sub_10029430C(&v11, 75), "The matrix converted to point sequence must be 1-dimensional and continuous", 75);
    sub_100294B74(-5, &v11, "cvPointSeqFromMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/utils.cpp", 68);
  }
  sub_10021F278(v8 & 0xFFF | a1 & 0x7000, 128, (((v8 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v8 & 7))) & 3), *(_QWORD *)(v6 + 24), *(_DWORD *)(v6 + 32) * v9, a3, a4);
  return a3;
}

void sub_100359DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100359E50(_QWORD *result, int a2)
{
  void *v2;
  void *v3;
  void *v4;

  result[143] = sub_100359EB0;
  if (a2 == 3)
  {
    v2 = sub_10035A050;
    v3 = sub_100359F78;
    v4 = sub_100359EDC;
  }
  else
  {
    if (a2 != 4)
      return result;
    v2 = sub_10035A1BC;
    v3 = sub_10035A000;
    v4 = sub_100359F40;
  }
  result[142] = v4;
  result[144] = v3;
  result[145] = v2;
  return result;
}

int8x16_t sub_100359EB0(uint64_t a1, int8x16_t *a2, int8x16_t *a3)
{
  uint64_t v3;
  int8x16_t *v4;
  int8x16_t v5;
  int8x16_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 1)
  {
    v4 = (int8x16_t *)((char *)a2 + v3);
    do
    {
      v5 = *a3++;
      result = vaddq_s8(v5, *a2);
      *a2++ = result;
    }
    while (a2 < v4);
  }
  return result;
}

int8x16_t sub_100359EDC(uint64_t a1, unint64_t a2, int8x16_t result)
{
  uint64_t v3;
  unint64_t v4;
  int8x8_t v5;
  int8x8_t v6;
  unint64_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t v10;
  int8x16_t v11;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 1)
  {
    v4 = a2 + v3;
    result = *(int8x16_t *)a2;
    v5 = (int8x8_t)vextq_s8(result, result, 8uLL).u64[0];
    v6 = 0;
    v7 = a2;
    do
    {
      v8 = vadd_s8(*(int8x8_t *)result.i8, v6);
      v9 = vadd_s8(vext_s8(*(int8x8_t *)result.i8, v5, 3uLL), v8);
      v10 = vadd_s8(v9, vext_s8(*(int8x8_t *)result.i8, v5, 6uLL));
      v11 = *(int8x16_t *)(v7 + 12);
      v7 += 12;
      result = v11;
      v6 = vadd_s8(v10, vext_s8(v5, v5, 1uLL));
      *(_DWORD *)a2 = v8.i32[0];
      *(_DWORD *)(a2 + 3) = v9.i32[0];
      v5 = (int8x8_t)vextq_s8(result, result, 8uLL).u64[0];
      *(_DWORD *)(a2 + 6) = v10.i32[0];
      *(_DWORD *)(a2 + 9) = v6.i32[0];
      a2 = v7;
    }
    while (v7 < v4);
  }
  return result;
}

int8x8_t sub_100359F40(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  int8x8_t v4;
  int8x8_t result;
  int8x8_t v6;
  int8x8_t v7;
  float32x2x4_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = a2 + v2;
    v4 = 0;
    do
    {
      v8 = vld4_f32((const float *)a2);
      result = vadd_s8(v4, (int8x8_t)v8.val[0]);
      v6 = vadd_s8(result, (int8x8_t)v8.val[1]);
      v7 = vadd_s8(v6, (int8x8_t)v8.val[2]);
      v4 = vadd_s8(v7, (int8x8_t)v8.val[3]);
      *(_DWORD *)a2 = result.i32[0];
      *(_DWORD *)(a2 + 4) = v6.i32[0];
      *(_DWORD *)(a2 + 8) = v7.i32[0];
      *(_DWORD *)(a2 + 12) = v4.i32[0];
      a2 += 16;
    }
    while (a2 < v3);
  }
  return result;
}

int8x8_t sub_100359F78(uint64_t a1, unint64_t a2, _OWORD *a3, int8x8_t result)
{
  uint64_t v4;
  unint64_t v5;
  int8x16_t v6;
  uint8x8_t v7;
  unint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint8x8_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  int8x8_t v14;
  int8x16_t v15;
  uint8x8_t v16;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >= 1)
  {
    v5 = a2 + v4;
    v6 = *(int8x16_t *)a2;
    result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
    v7 = 0;
    v8 = a2;
    do
    {
      v9 = *(int8x16_t *)a3;
      a3 = (_OWORD *)((char *)a3 + 12);
      v10 = v9;
      v11 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v7, *(uint8x8_t *)v9.i8), *(int8x8_t *)v6.i8);
      v12 = vext_s8(*(int8x8_t *)v6.i8, result, 6uLL);
      v13 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v11, (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 3uLL)), vext_s8(*(int8x8_t *)v6.i8, result, 3uLL));
      v14 = vext_s8(result, result, 1uLL);
      v15 = *(int8x16_t *)(v8 + 12);
      v8 += 12;
      v6 = v15;
      result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
      v16 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v13, (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 6uLL)), v12);
      *(_DWORD *)a2 = v11.i32[0];
      *(_DWORD *)(a2 + 3) = v13.i32[0];
      v7 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v16, (uint8x8_t)*(_OWORD *)&vextq_s8(v10, vextq_s8(v10, v10, 8uLL), 9uLL)), v14);
      *(_DWORD *)(a2 + 6) = v16.i32[0];
      *(_DWORD *)(a2 + 9) = v7.i32[0];
      a2 = v8;
    }
    while (v8 < v5);
  }
  return result;
}

uint8x8_t sub_10035A000(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint8x8_t result;
  uint8x8_t v7;
  uint8x8_t v8;
  float32x2x4_t v9;
  float32x2x4_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 1)
  {
    v4 = a2 + v3;
    v5 = 0;
    do
    {
      v9 = vld4_f32((const float *)a2);
      v10 = vld4_f32(a3);
      result = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v5, (uint8x8_t)v10.val[0]), (int8x8_t)v9.val[0]);
      v7 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(result, (uint8x8_t)v10.val[1]), (int8x8_t)v9.val[1]);
      v8 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v7, (uint8x8_t)v10.val[2]), (int8x8_t)v9.val[2]);
      v5 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v8, (uint8x8_t)v10.val[3]), (int8x8_t)v9.val[3]);
      *(_DWORD *)a2 = result.i32[0];
      *(_DWORD *)(a2 + 4) = v7.i32[0];
      *(_DWORD *)(a2 + 8) = v8.i32[0];
      *(_DWORD *)(a2 + 12) = v5.i32[0];
      a2 += 16;
      a3 += 4;
    }
    while (a2 < v4);
  }
  return result;
}

int8x8_t sub_10035A050(uint64_t a1, unint64_t a2, _OWORD *a3, int8x8_t result)
{
  uint64_t v4;
  unint64_t v5;
  int8x16_t v6;
  int8x8_t v7;
  int8x8_t v8;
  unint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint16x8_t v12;
  int8x8_t v13;
  uint16x8_t v14;
  int8x8_t v15;
  uint16x8_t v16;
  int8x8_t v17;
  int8x16_t v18;
  uint16x8_t v19;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >= 1)
  {
    v5 = a2 + v4;
    v6 = *(int8x16_t *)a2;
    result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
    v7 = 0;
    v8 = 0;
    v9 = a2;
    do
    {
      v10 = *(int8x16_t *)a3;
      a3 = (_OWORD *)((char *)a3 + 12);
      v11 = v10;
      v12 = vabdq_u16(vaddl_u8(*(uint8x8_t *)v10.i8, (uint8x8_t)v8), vshll_n_u8((uint8x8_t)v7, 1uLL));
      v13 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v12, vabdl_u8(*(uint8x8_t *)v10.i8, (uint8x8_t)v7))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v8, (uint8x8_t)v7), vabd_u8(*(uint8x8_t *)v10.i8, (uint8x8_t)v7))), v8, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v8, (uint8x8_t)v7), v12)), v7, *(int8x8_t *)v10.i8)), *(int8x8_t *)v6.i8);
      v12.i64[0] = vextq_s8(v11, v11, 3uLL).u64[0];
      v14 = vabdq_u16(vaddl_u8((uint8x8_t)v13, *(uint8x8_t *)v12.i8), vshll_n_u8(*(uint8x8_t *)v10.i8, 1uLL));
      *(int8x8_t *)v14.i8 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v14, vabdl_u8(*(uint8x8_t *)v12.i8, *(uint8x8_t *)v10.i8))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v13, *(uint8x8_t *)v10.i8), vabd_u8(*(uint8x8_t *)v12.i8, *(uint8x8_t *)v10.i8))), v13, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v13, *(uint8x8_t *)v10.i8), v14)), *(int8x8_t *)v10.i8, *(int8x8_t *)v12.i8)), vext_s8(*(int8x8_t *)v6.i8, result, 3uLL));
      v15 = (int8x8_t)vextq_s8(v11, v11, 6uLL).u64[0];
      v16 = vabdq_u16(vaddl_u8(*(uint8x8_t *)v14.i8, (uint8x8_t)v15), vshll_n_u8(*(uint8x8_t *)v12.i8, 1uLL));
      *(int8x8_t *)v12.i8 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v16, vabdl_u8((uint8x8_t)v15, *(uint8x8_t *)v12.i8))), (int8x8_t)vcge_u8(vabd_u8(*(uint8x8_t *)v14.i8, *(uint8x8_t *)v12.i8), vabd_u8((uint8x8_t)v15, *(uint8x8_t *)v12.i8))), *(int8x8_t *)v14.i8, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8(*(uint8x8_t *)v14.i8, *(uint8x8_t *)v12.i8), v16)), *(int8x8_t *)v12.i8, v15)), vext_s8(*(int8x8_t *)v6.i8, result, 6uLL));
      v17 = vext_s8(result, result, 1uLL);
      v18 = *(int8x16_t *)(v9 + 12);
      v9 += 12;
      v6 = v18;
      v7 = (int8x8_t)vextq_s8(v11, vextq_s8(v11, v11, 8uLL), 9uLL).u64[0];
      result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
      v19 = vabdq_u16(vaddl_u8(*(uint8x8_t *)v12.i8, (uint8x8_t)v7), vshll_n_u8((uint8x8_t)v15, 1uLL));
      *(_DWORD *)a2 = v13.i32[0];
      *(_DWORD *)(a2 + 3) = v14.i32[0];
      v8 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v19, vabdl_u8((uint8x8_t)v7, (uint8x8_t)v15))), (int8x8_t)vcge_u8(vabd_u8(*(uint8x8_t *)v12.i8, (uint8x8_t)v15), vabd_u8((uint8x8_t)v7, (uint8x8_t)v15))), *(int8x8_t *)v12.i8, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8(*(uint8x8_t *)v12.i8, (uint8x8_t)v15), v19)), v15, v7)), v17);
      *(_DWORD *)(a2 + 6) = v12.i32[0];
      *(_DWORD *)(a2 + 9) = v8.i32[0];
      a2 = v9;
    }
    while (v9 < v5);
  }
  return result;
}

int8x8_t sub_10035A1BC(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v3;
  unint64_t v4;
  int8x8_t v5;
  int8x8_t v6;
  uint16x8_t v7;
  int8x8_t result;
  uint16x8_t v9;
  int8x8_t v10;
  uint16x8_t v11;
  int8x8_t v12;
  uint16x8_t v13;
  float32x2x4_t v14;
  float32x2x4_t v15;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 1)
  {
    v4 = a2 + v3;
    v5 = 0;
    v6 = 0;
    do
    {
      v15 = vld4_f32((const float *)a2);
      v14 = vld4_f32(a3);
      v7 = vabdq_u16(vaddl_u8((uint8x8_t)v14.val[0], (uint8x8_t)v6), vshll_n_u8((uint8x8_t)v5, 1uLL));
      result = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v7, vabdl_u8((uint8x8_t)v14.val[0], (uint8x8_t)v5))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v6, (uint8x8_t)v5), vabd_u8((uint8x8_t)v14.val[0], (uint8x8_t)v5))), v6, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v6, (uint8x8_t)v5), v7)), v5, (int8x8_t)v14.val[0])), (int8x8_t)v15.val[0]);
      v9 = vabdq_u16(vaddl_u8((uint8x8_t)result, (uint8x8_t)v14.val[1]), vshll_n_u8((uint8x8_t)v14.val[0], 1uLL));
      v10 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v9, vabdl_u8((uint8x8_t)v14.val[1], (uint8x8_t)v14.val[0]))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)result, (uint8x8_t)v14.val[0]), vabd_u8((uint8x8_t)v14.val[1], (uint8x8_t)v14.val[0]))), result, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)result, (uint8x8_t)v14.val[0]), v9)), (int8x8_t)v14.val[0], (int8x8_t)v14.val[1])), (int8x8_t)v15.val[1]);
      v11 = vabdq_u16(vaddl_u8((uint8x8_t)v10, (uint8x8_t)v14.val[2]), vshll_n_u8((uint8x8_t)v14.val[1], 1uLL));
      v12 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v11, vabdl_u8((uint8x8_t)v14.val[2], (uint8x8_t)v14.val[1]))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v10, (uint8x8_t)v14.val[1]), vabd_u8((uint8x8_t)v14.val[2], (uint8x8_t)v14.val[1]))), v10, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v10, (uint8x8_t)v14.val[1]), v11)), (int8x8_t)v14.val[1], (int8x8_t)v14.val[2])), (int8x8_t)v15.val[2]);
      v13 = vabdq_u16(vaddl_u8((uint8x8_t)v12, (uint8x8_t)v14.val[3]), vshll_n_u8((uint8x8_t)v14.val[2], 1uLL));
      v6 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v13, vabdl_u8((uint8x8_t)v14.val[3], (uint8x8_t)v14.val[2]))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v12, (uint8x8_t)v14.val[2]), vabd_u8((uint8x8_t)v14.val[3], (uint8x8_t)v14.val[2]))), v12, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v12, (uint8x8_t)v14.val[2]), v13)), (int8x8_t)v14.val[2], (int8x8_t)v14.val[3])), (int8x8_t)v15.val[3]);
      *(_DWORD *)a2 = result.i32[0];
      *(_DWORD *)(a2 + 4) = v10.i32[0];
      *(_DWORD *)(a2 + 8) = v12.i32[0];
      *(_DWORD *)(a2 + 12) = v6.i32[0];
      a2 += 16;
      a3 += 4;
      v5 = (int8x8_t)v14.val[3];
    }
    while (a2 < v4);
  }
  return result;
}

uint64_t sub_10035A2F8(uint64_t a1, unint64_t a2, size_t a3)
{
  if (a3 <= 8)
  {
    if (!a3)
      return 0xFFFFFFFFLL;
  }
  else
  {
    a3 = 8;
  }
  if (a2 > 7)
    return 0xFFFFFFFFLL;
  if (a3 + a2 > 8)
    a3 = 8 - a2;
  return memcmp((const void *)(a1 + a2), (char *)&unk_1003C4A80 + a2, a3);
}

_QWORD *sub_10035A344(_QWORD *result, unsigned int a2, unsigned int a3)
{
  if (result)
    return sub_10035FAC4(result, a3 * (unint64_t)a2);
  return result;
}

uLong sub_10035A358(uint64_t a1)
{
  uLong result;

  result = crc32(0, 0, 0);
  *(_DWORD *)(a1 + 580) = result;
  return result;
}

uint64_t sub_10035A388(uint64_t result, Bytef *buf, uint64_t a3)
{
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(result + 531) & 0x20) != 0)
    v3 = (~*(_DWORD *)(result + 296) & 0x300) != 0;
  else
    v3 = (*(_DWORD *)(result + 296) & 0x800) == 0;
  if (a3 && v3)
  {
    v4 = a3;
    v6 = result;
    result = *(unsigned int *)(result + 580);
    do
    {
      if ((_DWORD)v4)
        v7 = v4;
      else
        v7 = 0xFFFFFFFFLL;
      result = crc32(result, buf, v7);
      buf += v7;
      v4 -= v7;
    }
    while (v4);
    *(_DWORD *)(v6 + 580) = result;
  }
  return result;
}

uint64_t sub_10035A408(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  int v8;
  int v10;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  _BYTE v18[128];

  if (a2)
  {
    v4 = *a2;
    if (v4 != 49)
      *(_DWORD *)(a1 + 296) |= 0x20000u;
    v5 = v4 == 46;
    if (v4)
    {
      v6 = a2[1];
      if (v6 == 46)
        ++v5;
      else
        *(_DWORD *)(a1 + 296) |= 0x20000u;
      if (v5 <= 1 && v6 != 0)
      {
        v8 = a2[2];
        if (v8 != 54)
          *(_DWORD *)(a1 + 296) |= 0x20000u;
        if (v8 == 46)
          ++v5;
        if (v5 <= 1 && v8 != 0)
        {
          v10 = a2[3];
          if (v10 == 46)
            ++v5;
          else
            *(_DWORD *)(a1 + 296) |= 0x20000u;
          if (v5 <= 1 && v10 != 0)
          {
            v16 = a2[4];
            if (v16 != 51)
              *(_DWORD *)(a1 + 296) |= 0x20000u;
            if (v16 == 46)
              ++v5;
            if (v5 <= 1 && v16)
            {
              v17 = a2[5];
              if (v17 != 52)
                *(_DWORD *)(a1 + 296) |= 0x20000u;
              if (v17 == 46)
                ++v5;
              if (v5 <= 1 && v17)
              {
                if (a2[6])
                  *(_DWORD *)(a1 + 296) |= 0x20000u;
              }
            }
          }
        }
      }
    }
    if ((*(_BYTE *)(a1 + 298) & 2) == 0)
      return 1;
  }
  else
  {
    *(_DWORD *)(a1 + 296) |= 0x20000u;
  }
  v13 = sub_10035E784((uint64_t)v18, 0x80uLL, 0, "Application built with libpng-");
  v14 = sub_10035E784((uint64_t)v18, 0x80uLL, v13, a2);
  v15 = sub_10035E784((uint64_t)v18, 0x80uLL, v14, " but running with ");
  sub_10035E784((uint64_t)v18, 0x80uLL, v15, "1.6.34");
  sub_10035E924(a1, (uint64_t)v18);
  return 0;
}

_QWORD *sub_10035A600(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *result;
  _QWORD *v15;
  _OWORD v16[12];
  _QWORD __src[156];

  memset(v16, 0, sizeof(v16));
  bzero(__src, 0x4E0uLL);
  HIDWORD(__src[130]) = 1000000;
  __src[131] = 0x3E8000F4240;
  __src[132] = 8000000;
  sub_10035FB20(__src, a5, a6, a7);
  sub_10035F644(__src, a2, a3, a4);
  if (setjmp((int *)v16))
    return 0;
  __src[26] = 0;
  __src[24] = &_longjmp;
  __src[25] = v16;
  if (!sub_10035A408((uint64_t)__src, a1))
    return 0;
  result = sub_10035FAC4(__src, 0x4E0uLL);
  if (result)
  {
    __src[47] = sub_10035A344;
    __src[48] = sub_10035A354;
    v15 = result;
    __src[49] = result;
    memset(&__src[24], 0, 24);
    memcpy(result, __src, 0x4E0uLL);
    return v15;
  }
  return result;
}

double sub_10035A79C(uint64_t a1)
{
  _QWORD *v1;
  double result;

  if (a1)
  {
    v1 = sub_10035F91C(a1, 0x168uLL);
    if (v1)
    {
      v1[44] = 0;
      result = 0.0;
      *((_OWORD *)v1 + 20) = 0u;
      *((_OWORD *)v1 + 21) = 0u;
      *((_OWORD *)v1 + 18) = 0u;
      *((_OWORD *)v1 + 19) = 0u;
      *((_OWORD *)v1 + 16) = 0u;
      *((_OWORD *)v1 + 17) = 0u;
      *((_OWORD *)v1 + 14) = 0u;
      *((_OWORD *)v1 + 15) = 0u;
      *((_OWORD *)v1 + 12) = 0u;
      *((_OWORD *)v1 + 13) = 0u;
      *((_OWORD *)v1 + 10) = 0u;
      *((_OWORD *)v1 + 11) = 0u;
      *((_OWORD *)v1 + 8) = 0u;
      *((_OWORD *)v1 + 9) = 0u;
      *((_OWORD *)v1 + 6) = 0u;
      *((_OWORD *)v1 + 7) = 0u;
      *((_OWORD *)v1 + 4) = 0u;
      *((_OWORD *)v1 + 5) = 0u;
      *((_OWORD *)v1 + 2) = 0u;
      *((_OWORD *)v1 + 3) = 0u;
      *(_OWORD *)v1 = 0u;
      *((_OWORD *)v1 + 1) = 0u;
    }
  }
  return result;
}

void sub_10035A7F0(uint64_t a1, void **a2)
{
  _QWORD *v2;

  if (a1 && a2)
  {
    v2 = *a2;
    if (*a2)
    {
      *a2 = 0;
      sub_10035A878(a1, (uint64_t)v2, 0xFFFFu, -1);
      v2[44] = 0;
      *((_OWORD *)v2 + 20) = 0u;
      *((_OWORD *)v2 + 21) = 0u;
      *((_OWORD *)v2 + 18) = 0u;
      *((_OWORD *)v2 + 19) = 0u;
      *((_OWORD *)v2 + 16) = 0u;
      *((_OWORD *)v2 + 17) = 0u;
      *((_OWORD *)v2 + 14) = 0u;
      *((_OWORD *)v2 + 15) = 0u;
      *((_OWORD *)v2 + 12) = 0u;
      *((_OWORD *)v2 + 13) = 0u;
      *((_OWORD *)v2 + 10) = 0u;
      *((_OWORD *)v2 + 11) = 0u;
      *((_OWORD *)v2 + 8) = 0u;
      *((_OWORD *)v2 + 9) = 0u;
      *((_OWORD *)v2 + 6) = 0u;
      *((_OWORD *)v2 + 7) = 0u;
      *((_OWORD *)v2 + 4) = 0u;
      *((_OWORD *)v2 + 5) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      *((_OWORD *)v2 + 3) = 0u;
      *(_OWORD *)v2 = 0u;
      *((_OWORD *)v2 + 1) = 0u;
      sub_10035F814(a1, v2);
    }
  }
}

void sub_10035A878(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  void **v8;
  int v9;
  void *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  unsigned int v28;

  if (!a1 || !a2)
    return;
  v8 = *(void ***)(a2 + 160);
  if (!v8 || (a3 & *(_DWORD *)(a2 + 300) & 0x4000) == 0)
  {
LABEL_7:
    v9 = *(_DWORD *)(a2 + 300);
    if ((a3 & v9 & 0x2000) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (a4 != -1)
  {
    sub_10035F814(a1, v8[7 * a4 + 1]);
    *(_QWORD *)(*(_QWORD *)(a2 + 160) + 56 * a4 + 8) = 0;
    goto LABEL_7;
  }
  if (*(int *)(a2 + 148) >= 1)
  {
    v17 = 0;
    v18 = 8;
    do
    {
      sub_10035F814(a1, *(void **)(*(_QWORD *)(a2 + 160) + v18));
      ++v17;
      v18 += 56;
    }
    while (v17 < *(int *)(a2 + 148));
    v8 = *(void ***)(a2 + 160);
  }
  sub_10035F814(a1, v8);
  *(_QWORD *)(a2 + 160) = 0;
  *(_DWORD *)(a2 + 148) = 0;
  *(_DWORD *)(a2 + 152) = 0;
  v9 = *(_DWORD *)(a2 + 300);
  if ((a3 & v9 & 0x2000) != 0)
  {
LABEL_8:
    *(_DWORD *)(a2 + 8) &= ~0x10u;
    sub_10035F814(a1, *(void **)(a2 + 184));
    *(_QWORD *)(a2 + 184) = 0;
    *(_WORD *)(a2 + 34) = 0;
    v9 = *(_DWORD *)(a2 + 300);
  }
LABEL_9:
  if ((a3 & v9 & 0x100) != 0)
  {
    sub_10035F814(a1, *(void **)(a2 + 336));
    sub_10035F814(a1, *(void **)(a2 + 344));
    *(_QWORD *)(a2 + 336) = 0;
    *(_QWORD *)(a2 + 344) = 0;
    *(_DWORD *)(a2 + 8) &= ~0x4000u;
    v9 = *(_DWORD *)(a2 + 300);
  }
  if ((a3 & v9 & 0x80) != 0)
  {
    sub_10035F814(a1, *(void **)(a2 + 264));
    sub_10035F814(a1, *(void **)(a2 + 280));
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a2 + 280) = 0;
    v10 = *(void **)(a2 + 288);
    if (v10)
    {
      if (*(_BYTE *)(a2 + 297))
      {
        v11 = 0;
        do
          sub_10035F814(a1, *(void **)(*(_QWORD *)(a2 + 288) + 8 * v11++));
        while (v11 < *(unsigned __int8 *)(a2 + 297));
        v10 = *(void **)(a2 + 288);
      }
      sub_10035F814(a1, v10);
      *(_QWORD *)(a2 + 288) = 0;
    }
    *(_DWORD *)(a2 + 8) &= ~0x400u;
    v9 = *(_DWORD *)(a2 + 300);
  }
  if ((a3 & v9 & 0x10) != 0)
  {
    sub_10035F814(a1, *(void **)(a2 + 128));
    sub_10035F814(a1, *(void **)(a2 + 136));
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_DWORD *)(a2 + 8) &= ~0x1000u;
  }
  v12 = *(char **)(a2 + 320);
  if (v12 && (a3 & *(_DWORD *)(a2 + 300) & 0x20) != 0)
  {
    if (a4 == -1)
    {
      if (*(int *)(a2 + 328) >= 1)
      {
        v19 = 0;
        v20 = 0;
        do
        {
          sub_10035F814(a1, *(void **)(*(_QWORD *)(a2 + 320) + v19));
          sub_10035F814(a1, *(void **)(*(_QWORD *)(a2 + 320) + v19 + 16));
          ++v20;
          v19 += 32;
        }
        while (v20 < *(int *)(a2 + 328));
        v12 = *(char **)(a2 + 320);
      }
      sub_10035F814(a1, v12);
      *(_QWORD *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 328) = 0;
      *(_DWORD *)(a2 + 8) &= ~0x2000u;
      v15 = *(char **)(a2 + 304);
      if (!v15)
        goto LABEL_46;
      goto LABEL_26;
    }
    v13 = 32 * a4;
    sub_10035F814(a1, *(void **)&v12[v13]);
    sub_10035F814(a1, *(void **)(*(_QWORD *)(a2 + 320) + v13 + 16));
    v14 = (_QWORD *)(*(_QWORD *)(a2 + 320) + v13);
    *v14 = 0;
    v14[2] = 0;
  }
  v15 = *(char **)(a2 + 304);
  if (v15)
  {
LABEL_26:
    if ((a3 & *(_DWORD *)(a2 + 300) & 0x200) != 0)
    {
      if (a4 == -1)
      {
        if (*(int *)(a2 + 312) >= 1)
        {
          v21 = 0;
          v22 = 8;
          do
          {
            sub_10035F814(a1, *(void **)(*(_QWORD *)(a2 + 304) + v22));
            ++v21;
            v22 += 32;
          }
          while (v21 < *(int *)(a2 + 312));
          v15 = *(char **)(a2 + 304);
        }
        sub_10035F814(a1, v15);
        *(_QWORD *)(a2 + 304) = 0;
        *(_DWORD *)(a2 + 312) = 0;
      }
      else
      {
        v16 = 32 * a4;
        sub_10035F814(a1, *(void **)&v15[v16 + 8]);
        *(_QWORD *)(*(_QWORD *)(a2 + 304) + v16 + 8) = 0;
      }
    }
  }
LABEL_46:
  v23 = *(_DWORD *)(a2 + 300);
  if ((a3 & v23 & 0x8000) != 0)
  {
    v24 = *(void **)(a2 + 248);
    if (v24)
    {
      sub_10035F814(a1, v24);
      *(_QWORD *)(a2 + 248) = 0;
    }
    v25 = *(void **)(a2 + 240);
    if (v25)
    {
      sub_10035F814(a1, v25);
      *(_QWORD *)(a2 + 240) = 0;
    }
    *(_DWORD *)(a2 + 8) &= ~0x10000u;
    v23 = *(_DWORD *)(a2 + 300);
  }
  if ((a3 & v23 & 8) != 0)
  {
    sub_10035F814(a1, *(void **)(a2 + 256));
    *(_QWORD *)(a2 + 256) = 0;
    *(_DWORD *)(a2 + 8) &= ~0x40u;
    v23 = *(_DWORD *)(a2 + 300);
  }
  if ((a3 & v23 & 0x1000) != 0)
  {
    sub_10035F814(a1, *(void **)(a2 + 24));
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 8) &= ~8u;
    *(_WORD *)(a2 + 32) = 0;
    v23 = *(_DWORD *)(a2 + 300);
  }
  if ((a3 & v23 & 0x40) != 0)
  {
    v26 = *(void **)(a2 + 352);
    if (v26)
    {
      if (*(_DWORD *)(a2 + 4))
      {
        v27 = 0;
        do
          sub_10035F814(a1, *(void **)(*(_QWORD *)(a2 + 352) + 8 * v27++));
        while (v27 < *(unsigned int *)(a2 + 4));
        v26 = *(void **)(a2 + 352);
      }
      sub_10035F814(a1, v26);
      *(_QWORD *)(a2 + 352) = 0;
      v23 = *(_DWORD *)(a2 + 300);
    }
    *(_DWORD *)(a2 + 8) &= ~0x8000u;
  }
  v28 = a3 & 0xFFFFBDDF;
  if (a4 == -1)
    v28 = a3;
  *(_DWORD *)(a2 + 300) = v23 & ~v28;
}

uint64_t sub_10035ACC0(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 256);
  return result;
}

uint64_t sub_10035ACCC(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 256) = a2;
  return result;
}

uint64_t sub_10035ACDC(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;

  result = 0;
  if (a1 && a2)
  {
    v4 = *(_DWORD *)(a1 + 956);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 960);
      v6 = v5 + (5 * v4);
      v7 = v6;
      while (1)
      {
        v8 = *(_DWORD *)(v7 - 5);
        v7 -= 5;
        if (*a2 == v8)
          break;
        v6 = v7;
        if (v7 <= v5)
          return 0;
      }
      return *(unsigned __int8 *)(v6 - 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10035AD30(uint64_t result, unsigned int a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int v7;

  v7 = bswap32(a2);
  if (result)
  {
    v2 = *(_DWORD *)(result + 956);
    if (v2)
    {
      v3 = *(_QWORD *)(result + 960);
      v4 = v3 + (5 * v2);
      v5 = v4;
      while (1)
      {
        v6 = *(_DWORD *)(v5 - 5);
        v5 -= 5;
        if (v7 == v6)
          break;
        v4 = v5;
        if (v5 <= v3)
          return 0;
      }
      return *(unsigned __int8 *)(v4 - 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10035AD8C(uint64_t result, int a2)
{
  if (!*(_QWORD *)(result + 360))
  {
    if ((a2 + 7) > 9)
      *(_QWORD *)(result + 360) = "unexpected zlib return code";
    else
      *(_QWORD *)(result + 360) = off_100454C08[a2 + 7];
  }
  return result;
}

uint64_t sub_10035ADC8(uint64_t result, uint64_t a2, int a3)
{
  __int16 v4;
  const char *v5;
  int v7;
  double v8;
  BOOL v9;
  BOOL v10;

  if ((a3 - 625000001) < 0xDABF41CF)
  {
    v4 = *(_WORD *)(a2 + 74);
    v5 = "gamma value out of range";
LABEL_6:
    *(_WORD *)(a2 + 74) = v4 | 0x8000;
    v7 = 1;
    return sub_10035F324(result, v5, v7);
  }
  v4 = *(_WORD *)(a2 + 74);
  if ((*(_BYTE *)(result + 293) & 0x80) != 0 && (v4 & 8) != 0)
  {
    v5 = "duplicate";
    goto LABEL_6;
  }
  if ((*(_WORD *)(a2 + 74) & 0x8000) == 0)
  {
    if ((v4 & 1) != 0)
    {
      if (!*(_DWORD *)a2
        || ((v8 = floor((double)*(int *)a2 * 100000.0 / (double)a3 + 0.5), v8 <= 2147483650.0)
          ? (v9 = v8 < -2147483650.0)
          : (v9 = 1),
            !v9 ? (v10 = ((int)v8 - 95000) >= 0x2711) : (v10 = 1),
            v10))
      {
        if ((v4 & 0x20) != 0)
        {
          v5 = "gamma value does not match sRGB";
          v7 = 2;
          return sub_10035F324(result, v5, v7);
        }
        result = sub_10035F324(result, "gamma value does not match libpng estimate", 0);
      }
    }
    *(_DWORD *)a2 = a3;
    *(_WORD *)(a2 + 74) = v4 | 9;
  }
  return result;
}

void sub_10035AEF8(_OWORD *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  if (a2)
  {
    *(_OWORD *)(a2 + 112) = *(_OWORD *)((char *)a1 + 1228);
    *(_OWORD *)(a2 + 68) = a1[74];
    *(_OWORD *)(a2 + 84) = a1[75];
    *(_OWORD *)(a2 + 100) = a1[76];
    *(_OWORD *)(a2 + 52) = a1[73];
    v4 = *(__int16 *)(a2 + 126);
    v5 = *(_DWORD *)(a2 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      v8 = v5 & 0xFFFFE7FA;
      *(_DWORD *)(a2 + 8) = v5 & 0xFFFFE7FA;
      v9 = *(_DWORD *)(a2 + 300);
      if ((v9 & 0x10) != 0)
      {
        sub_10035F814((uint64_t)a1, *(void **)(a2 + 128));
        sub_10035F814((uint64_t)a1, *(void **)(a2 + 136));
        *(_QWORD *)(a2 + 128) = 0;
        *(_QWORD *)(a2 + 136) = 0;
        *(_DWORD *)(a2 + 8) = v8;
      }
      *(_DWORD *)(a2 + 300) = v9 & 0xFFFFFFEF;
    }
    else
    {
      v6 = v5 & 0xFFFFF7FB | (16 * v4) & 0x800 | (4 * ((v4 >> 1) & 1));
      if ((v4 & 1) != 0)
        v7 = v6 | 1;
      else
        v7 = v6 & 0xFFFFFFFE;
      *(_DWORD *)(a2 + 8) = v7;
    }
  }
}

uint64_t sub_10035AFCC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  _BOOL4 v12;
  __int16 v13;
  const char *v15;
  __int128 v16;
  __int128 v17;
  int v18;

  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  v8 = sub_10035B138((int *)&v16, (int *)a3);
  if (v8 == 1)
  {
    *(_WORD *)(a2 + 74) |= 0x8000u;
    v15 = "invalid chromaticities";
LABEL_12:
    sub_10035EE60(a1, v15);
    return 0;
  }
  if (v8)
  {
    *(_WORD *)(a2 + 74) |= 0x8000u;
    sub_10035E6F4(a1, "internal error checking chromaticities");
  }
  v9 = *(__int16 *)(a2 + 74);
  if (v9 < 0)
    return 0;
  if (a4 > 1 || (v9 & 2) == 0)
    goto LABEL_8;
  if (!sub_10035BEB8((_DWORD *)a3, (_DWORD *)(a2 + 4), 100))
  {
    *(_WORD *)(a2 + 74) = v9 | 0x8000;
    v15 = "inconsistent chromaticities";
    goto LABEL_12;
  }
  if (!a4)
    return 1;
LABEL_8:
  v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 4) = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 20) = v10;
  v11 = v17;
  *(_OWORD *)(a2 + 36) = v16;
  *(_OWORD *)(a2 + 52) = v11;
  *(_DWORD *)(a2 + 68) = v18;
  v12 = sub_10035BEB8((_DWORD *)a3, xmmword_1003C4F00, 1000);
  v13 = v9 & 0xFFBD | 2;
  if (v12)
    v13 = v9 | 0x42;
  *(_WORD *)(a2 + 74) = v13;
  return 2;
}

uint64_t sub_10035B138(int *a1, int *a2)
{
  int v2;
  uint64_t result;
  int v5;
  unsigned int v6;
  signed int v7;
  unsigned int v8;
  signed int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  double v15;
  int v17;
  int v18;
  int v19;
  double v20;
  int v22;
  int v23;
  double v24;
  int v26;
  int v27;
  double v28;
  int v30;
  int v31;
  int v32;
  double v33;
  int v35;
  double v36;
  int v38;
  double v39;
  int v41;
  double v42;
  double v44;
  double v45;
  BOOL v46;
  unsigned int v47;
  double v48;
  double v49;
  double v50;
  BOOL v51;
  unsigned int v52;
  double v53;
  unsigned int v54;
  double v55;
  double v56;
  BOOL v57;
  unsigned int v58;
  int v59;
  double v60;
  int v62;
  double v63;
  int v65;
  double v66;
  int v68;
  double v69;
  int v71;
  double v72;
  int v74;
  double v75;
  int v77;
  double v78;
  int v80;
  double v81;
  int v83;
  double v84;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  __int128 v95;
  __int128 v96;

  v2 = *a2;
  if (*a2 > 0x186A0)
    return 1;
  v5 = a2[1];
  result = 1;
  if ((v5 & 0x80000000) == 0 && v5 <= 100000 - v2)
  {
    v6 = a2[2];
    if (v6 <= 0x186A0)
    {
      v7 = a2[3];
      if ((v7 & 0x80000000) == 0 && v7 <= (int)(100000 - v6))
      {
        v8 = a2[4];
        if (v8 <= 0x186A0)
        {
          v9 = a2[5];
          if ((v9 & 0x80000000) == 0 && v9 <= (int)(100000 - v8))
          {
            v10 = a2[6];
            if (v10 <= 0x186A0)
            {
              v11 = a2[7];
              if (v11 >= 5 && v11 <= (int)(100000 - v10))
              {
                v12 = 0;
                v13 = v5 - v9;
                v14 = v6 - v8;
                if (v6 != v8 && v5 != v9)
                {
                  v15 = floor((double)v14 * (double)v13 / 7.0 + 0.5);
                  if (v15 > 2147483650.0 || v15 < -2147483650.0)
                    return 2;
                  v12 = (int)v15;
                }
                v17 = 0;
                v18 = v7 - v9;
                v19 = v2 - v8;
                if (v2 != v8 && v7 != v9)
                {
                  v20 = floor((double)v19 * (double)v18 / 7.0 + 0.5);
                  if (v20 > 2147483650.0 || v20 < -2147483650.0)
                    return 2;
                  v17 = (int)v20;
                }
                v22 = 0;
                v23 = v11 - v9;
                if (v6 != v8 && v11 != v9)
                {
                  v24 = floor((double)v14 * (double)v23 / 7.0 + 0.5);
                  if (v24 > 2147483650.0 || v24 < -2147483650.0)
                    return 2;
                  v22 = (int)v24;
                }
                v26 = 0;
                v27 = v10 - v8;
                if (v7 != v9 && v10 != v8)
                {
                  v28 = floor((double)v18 * (double)v27 / 7.0 + 0.5);
                  if (v28 > 2147483650.0 || v28 < -2147483650.0)
                    return 2;
                  v26 = (int)v28;
                }
                v30 = v22 - v26;
                if (v22 == v26)
                  return 1;
                v31 = v12 - v17;
                if (v12 == v17)
                {
                  v32 = 0;
                }
                else
                {
                  v33 = floor((double)v11 * (double)v31 / (double)v30 + 0.5);
                  if (v33 > 2147483650.0 || v33 < -2147483650.0)
                    return 1;
                  v32 = (int)v33;
                }
                if (v32 <= v11)
                  return 1;
                v35 = 0;
                if (v5 != v9 && v10 != v8)
                {
                  v36 = floor((double)v13 * (double)v27 / 7.0 + 0.5);
                  if (v36 > 2147483650.0 || v36 < -2147483650.0)
                    return 2;
                  v35 = (int)v36;
                }
                v38 = 0;
                if (v2 != v8 && v11 != v9)
                {
                  v39 = floor((double)v19 * (double)v23 / 7.0 + 0.5);
                  if (v39 > 2147483650.0 || v39 < -2147483650.0)
                    return 2;
                  v38 = (int)v39;
                }
                if (v35 == v38)
                  return 1;
                if (v12 == v17)
                {
                  v41 = 0;
                }
                else
                {
                  v42 = floor((double)v11 * (double)v31 / (double)(v35 - v38) + 0.5);
                  if (v42 > 2147483650.0 || v42 < -2147483650.0)
                    return 1;
                  v41 = (int)v42;
                }
                if (v41 <= v11)
                  return 1;
                v44 = 1.0e10 / (double)v11 + 0.5;
                v45 = floor(v44);
                v46 = v45 < -2147483650.0 || v45 > 2147483650.0;
                v47 = vcvtmd_s64_f64(v44);
                if (v46)
                  v47 = 0;
                v48 = (double)v32;
                v49 = 1.0e10 / (double)v32 + 0.5;
                v50 = floor(v49);
                v51 = v50 < -2147483650.0 || v50 > 2147483650.0;
                v52 = vcvtmd_s64_f64(v49);
                v53 = (double)v41;
                if (v51)
                  v54 = 0;
                else
                  v54 = v52;
                v55 = 1.0e10 / v53 + 0.5;
                v56 = floor(v55);
                v57 = v56 < -2147483650.0 || v56 > 2147483650.0;
                v58 = vcvtmd_s64_f64(v55);
                if (v57)
                  v58 = 0;
                v59 = v47 - (v54 + v58);
                if (v59 < 1)
                  return 1;
                if (v2)
                {
                  v60 = floor((double)v2 * 100000.0 / v48 + 0.5);
                  if (v60 > 2147483650.0 || v60 < -2147483650.0)
                    return 1;
                  v2 = (int)v60;
                }
                *a1 = v2;
                v62 = a2[1];
                if (v62)
                {
                  v63 = floor((double)v62 * 100000.0 / v48 + 0.5);
                  if (v63 > 2147483650.0 || v63 < -2147483650.0)
                    return 1;
                  v62 = (int)v63;
                }
                a1[1] = v62;
                v65 = 100000 - (a2[1] + *a2);
                if (v65)
                {
                  v66 = floor((double)v65 * 100000.0 / v48 + 0.5);
                  if (v66 > 2147483650.0 || v66 < -2147483650.0)
                    return 1;
                  v65 = (int)v66;
                }
                a1[2] = v65;
                v68 = a2[2];
                if (v68)
                {
                  v69 = floor((double)v68 * 100000.0 / v53 + 0.5);
                  if (v69 > 2147483650.0 || v69 < -2147483650.0)
                    return 1;
                  v68 = (int)v69;
                }
                a1[3] = v68;
                v71 = a2[3];
                if (v71)
                {
                  v72 = floor((double)v71 * 100000.0 / v53 + 0.5);
                  if (v72 > 2147483650.0 || v72 < -2147483650.0)
                    return 1;
                  v71 = (int)v72;
                }
                a1[4] = v71;
                v74 = 100000 - (a2[3] + a2[2]);
                if (v74)
                {
                  v75 = floor((double)v74 * 100000.0 / v53 + 0.5);
                  if (v75 > 2147483650.0 || v75 < -2147483650.0)
                    return 1;
                  v74 = (int)v75;
                }
                a1[5] = v74;
                v77 = a2[4];
                if (v77)
                {
                  v78 = floor((double)v59 * (double)v77 / 100000.0 + 0.5);
                  if (v78 > 2147483650.0 || v78 < -2147483650.0)
                    return 1;
                  v77 = (int)v78;
                }
                a1[6] = v77;
                v80 = a2[5];
                if (v80)
                {
                  v81 = floor((double)v59 * (double)v80 / 100000.0 + 0.5);
                  if (v81 > 2147483650.0 || v81 < -2147483650.0)
                    return 1;
                  v80 = (int)v81;
                }
                a1[7] = v80;
                v83 = 100000 - (a2[5] + a2[4]);
                if (v83)
                {
                  v84 = floor((double)v59 * (double)v83 / 100000.0 + 0.5);
                  if (v84 > 2147483650.0 || v84 < -2147483650.0)
                    return 1;
                  v83 = (int)v84;
                }
                v95 = 0u;
                v96 = 0u;
                a1[8] = v83;
                if (!sub_10035E3D4((int *)&v95, a1))
                {
                  v86 = a2[6];
                  if (v86 >= DWORD2(v96) - 5 && v86 <= DWORD2(v96) + 5)
                  {
                    v87 = a2[7];
                    if (v87 >= HIDWORD(v96) - 5
                      && v87 <= HIDWORD(v96) + 5
                      && *a2 >= (int)v95 - 5
                      && *a2 <= (int)v95 + 5)
                    {
                      v88 = a2[1];
                      if (v88 >= DWORD1(v95) - 5 && v88 <= DWORD1(v95) + 5)
                      {
                        v89 = a2[2];
                        if (v89 >= DWORD2(v95) - 5 && v89 <= DWORD2(v95) + 5)
                        {
                          v90 = a2[3];
                          if (v90 >= HIDWORD(v95) - 5 && v90 <= HIDWORD(v95) + 5)
                          {
                            v91 = a2[4];
                            if (v91 >= (int)v96 - 5 && v91 <= (int)v96 + 5)
                            {
                              v92 = a2[5];
                              if (v92 <= DWORD1(v96) + 5 && v92 >= DWORD1(v96) - 5)
                                return 0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_10035BA58(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  __int16 v4;
  unint64_t v7;
  char *v8;
  __int16 v10;
  double v11;
  BOOL v12;
  BOOL v13;

  v3 = *(__int16 *)(a2 + 74);
  if (v3 < 0)
    return 0;
  v4 = a3;
  if (a3 >= 4)
  {
    v7 = (int)a3;
    v8 = "invalid sRGB rendering intent";
LABEL_25:
    sub_10035BC50(a1, a2, "sRGB", v7, v8);
    return 0;
  }
  v10 = *(_WORD *)(a2 + 74);
  if ((v3 & 4) != 0 && *(unsigned __int16 *)(a2 + 72) != a3)
  {
    v7 = a3;
    v8 = "inconsistent rendering intents";
    goto LABEL_25;
  }
  if ((v3 & 0x20) != 0)
  {
    sub_10035EE60(a1, "duplicate sRGB information ignored");
    return 0;
  }
  else
  {
    if ((v3 & 2) != 0 && !sub_10035BEB8(xmmword_1003C4F00, (_DWORD *)(a2 + 4), 100))
    {
      sub_10035F324(a1, "cHRM chunk does not match sRGB", 2);
      v10 = *(_WORD *)(a2 + 74);
    }
    if ((v10 & 1) != 0)
    {
      if (!*(_DWORD *)a2
        || ((v11 = floor((double)*(int *)a2 * 100000.0 / 45455.0 + 0.5), v11 <= 2147483650.0)
          ? (v12 = v11 < -2147483650.0)
          : (v12 = 1),
            !v12 ? (v13 = ((int)v11 - 95000) >= 0x2711) : (v13 = 1),
            v13))
      {
        sub_10035F324(a1, "gamma value does not match sRGB", 2);
        v10 = *(_WORD *)(a2 + 74);
      }
    }
    *(_OWORD *)(a2 + 4) = xmmword_1003C4F00[0];
    *(_OWORD *)(a2 + 20) = unk_1003C4F10;
    *(_OWORD *)(a2 + 36) = xmmword_1003C4EDC;
    *(_WORD *)(a2 + 72) = v4;
    *(_DWORD *)(a2 + 68) = 95053;
    *(_OWORD *)(a2 + 52) = unk_1003C4EEC;
    *(_DWORD *)a2 = 45455;
    *(_WORD *)(a2 + 74) = v10 | 0xE7;
    return 1;
  }
}

uint64_t sub_10035BC50(uint64_t a1, uint64_t a2, _BYTE *a3, unint64_t a4, _BYTE *a5)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  char *v20;
  char v21;
  char v22;
  unsigned int v23;
  char v24;
  _BYTE v25[24];
  char v26[196];

  if (a2)
    *(_WORD *)(a2 + 74) |= 0x8000u;
  v10 = sub_10035E784((uint64_t)v26, 0xC4uLL, 0, "profile '");
  v11 = sub_10035E784((uint64_t)v26, v10 + 79, v10, a3);
  v12 = sub_10035E784((uint64_t)v26, 0xC4uLL, v11, "': ");
  v13 = v12;
  v14 = a4 >> 24;
  if ((a4 >> 24 == 32 || v14 - 48 < 0xA || (v14 & 0xFFFFFFFFFFFFFFDFLL) - 65 <= 0x19)
    && (((a4 >> 16) & 0xDF) - 65 < 0x1A || BYTE2(a4) == 32 || (unint64_t)BYTE2(a4) - 48 <= 9)
    && (((a4 >> 8) & 0xDF) - 65 < 0x1A || BYTE1(a4) == 32 || (unint64_t)BYTE1(a4) - 48 <= 9)
    && ((unint64_t)(a4 & 0xDF) - 65 < 0x1A
     || a4 == 32
     || (unint64_t)a4 - 48 <= 9))
  {
    v20 = &v26[v12];
    v26[v12] = 39;
    v21 = BYTE3(a4);
    if (BYTE3(a4) - 32 >= 0x5F)
      v21 = 63;
    v20[1] = v21;
    v22 = BYTE2(a4);
    if (BYTE2(a4) - 32 >= 0x5F)
      v22 = 63;
    v20[2] = v22;
    v23 = a4 >> 8;
    if (BYTE1(a4) - 32 >= 0x5F)
      LOBYTE(v23) = 63;
    v20[3] = v23;
    if (a4 - 32 >= 0x5F)
      v24 = 63;
    else
      v24 = a4;
    v20[4] = v24;
    *(_WORD *)(v20 + 5) = 14887;
    v17 = v12 + 8;
    v20[7] = 32;
  }
  else
  {
    v15 = (_BYTE *)sub_10035E7E0((unint64_t)v25, (uint64_t)v26, 3, a4);
    v16 = sub_10035E784((uint64_t)v26, 0xC4uLL, v13, v15);
    v17 = sub_10035E784((uint64_t)v26, 0xC4uLL, v16, "h: ");
  }
  sub_10035E784((uint64_t)v26, 0xC4uLL, v17, a5);
  if (a2)
    v18 = 2;
  else
    v18 = 1;
  return sub_10035F324(a1, v26, v18);
}

BOOL sub_10035BEB8(_DWORD *a1, _DWORD *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;

  v3 = a1[6];
  v4 = a2[6];
  v5 = v4 - a3;
  v6 = v4 + a3;
  if (v3 < v5 || v3 > v6)
    return 0;
  v9 = a1[7];
  v10 = a2[7];
  v11 = v10 - a3;
  v12 = v10 + a3;
  if (v9 < v11 || v9 > v12)
    return 0;
  if (*a1 < *a2 - a3 || *a1 > *a2 + a3)
    return 0;
  v15 = 0;
  v16 = a1[1];
  v17 = a2[1];
  if (v16 >= v17 - a3 && v16 <= v17 + a3)
  {
    v15 = 0;
    v18 = a1[2];
    v19 = a2[2];
    if (v18 >= v19 - a3 && v18 <= v19 + a3)
    {
      v15 = 0;
      v20 = a1[3];
      v21 = a2[3];
      if (v20 >= v21 - a3 && v20 <= v21 + a3)
      {
        v15 = 0;
        v22 = a1[4];
        v23 = a2[4];
        if (v22 >= v23 - a3 && v22 <= v23 + a3)
        {
          v24 = a1[5];
          v25 = a2[5];
          v26 = v25 - a3;
          v27 = v25 + a3;
          return v24 >= v26 && v24 <= v27;
        }
      }
    }
  }
  return v15;
}

uint64_t sub_10035BFD8(uint64_t a1, uint64_t a2, _BYTE *a3, unsigned int a4)
{
  unint64_t v5;

  if (a4 > 0x83)
  {
    v5 = *(_QWORD *)(a1 + 1056);
    if (v5 && v5 < a4)
    {
      sub_10035BC50(a1, a2, a3, a4, "exceeds application limits");
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    sub_10035BC50(a1, a2, a3, a4, "too short");
    return 0;
  }
}

uint64_t sub_10035C03C(uint64_t a1, uint64_t a2, _BYTE *a3, unint64_t a4, uint64_t a5, char a6)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v12;
  uint64_t result;
  unint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  _BYTE *v20;

  v6 = a3;
  v7 = a2;
  v8 = a1;
  v9 = bswap32(*(_DWORD *)a5);
  if ((_DWORD)v9 != (_DWORD)a4)
  {
    v12 = "length does not match profile";
LABEL_13:
    a4 = v9;
    goto LABEL_14;
  }
  if ((a4 & 3) != 0 && *(unsigned __int8 *)(a5 + 8) >= 4u)
  {
    a4 = a4;
    v12 = "invalid length";
LABEL_5:
    a1 = v8;
    a2 = v7;
    a3 = v6;
LABEL_14:
    sub_10035BC50(a1, a2, a3, a4, v12);
    return 0;
  }
  v9 = bswap32(*(_DWORD *)(a5 + 128));
  if (v9 > 0x1555554A || 12 * (int)v9 + 132 > a4)
  {
    v12 = "tag count too large";
    goto LABEL_13;
  }
  a4 = bswap32(*(_DWORD *)(a5 + 64));
  if (a4 >= 0xFFFF)
  {
    v12 = "invalid rendering intent";
    goto LABEL_5;
  }
  if (a4 >= 4)
    sub_10035BC50(a1, 0, a3, a4, "intent outside defined range");
  a4 = bswap32(*(_DWORD *)(a5 + 36));
  if ((_DWORD)a4 != 1633907568)
  {
    v12 = "invalid signature";
    goto LABEL_5;
  }
  if (*(_QWORD *)(a5 + 68) != 0x100D6F60000 || *(_DWORD *)(a5 + 76) != 768802816)
    sub_10035BC50(v8, 0, v6, 0, "PCS illuminant is not D50");
  a4 = bswap32(*(_DWORD *)(a5 + 16));
  if ((_DWORD)a4 == 1196573017)
  {
    if ((a6 & 2) != 0)
    {
      v12 = "Gray color space not permitted on RGB PNG";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1196573017;
      goto LABEL_14;
    }
  }
  else
  {
    if ((_DWORD)a4 != 1380401696)
    {
      v12 = "invalid ICC profile color space";
      goto LABEL_5;
    }
    if ((a6 & 2) == 0)
    {
      v12 = "RGB color space not permitted on grayscale PNG";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1380401696;
      goto LABEL_14;
    }
  }
  v16 = bswap32(*(_DWORD *)(a5 + 12));
  if ((int)v16 <= 1852662635)
  {
    if ((_DWORD)v16 == 1633842036)
    {
      v12 = "invalid embedded Abstract ICC profile";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1633842036;
      goto LABEL_14;
    }
    if ((_DWORD)v16 == 1818848875)
    {
      v12 = "unexpected DeviceLink ICC profile class";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1818848875;
      goto LABEL_14;
    }
    v17 = 1835955314;
  }
  else if ((int)v16 > 1935896177)
  {
    if ((_DWORD)v16 == 1935896178)
      goto LABEL_47;
    v17 = 1936744803;
  }
  else
  {
    if ((_DWORD)v16 == 1852662636)
    {
      v18 = "unexpected NamedColor ICC profile class";
      v19 = v8;
      v20 = v6;
      v16 = 1852662636;
      goto LABEL_46;
    }
    v17 = 1886549106;
  }
  if ((_DWORD)v16 != v17)
  {
    v18 = "unrecognized ICC profile class";
    v19 = v8;
    v20 = v6;
LABEL_46:
    sub_10035BC50(v19, 0, v20, v16, v18);
  }
LABEL_47:
  a4 = bswap32(*(_DWORD *)(a5 + 20));
  result = 1;
  if ((_DWORD)a4 != 1281450528 && (_DWORD)a4 != 1482250784)
  {
    v12 = "unexpected ICC PCS encoding";
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_10035C368(uint64_t a1, uint64_t a2, _BYTE *a3, unsigned int a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t i;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;

  v5 = bswap32(*(_DWORD *)(a5 + 128));
  if (!v5)
    return 1;
  for (i = a5 + 132; ; i += 12)
  {
    v11 = bswap32(*(_DWORD *)i);
    v12 = _byteswap_ulong(*(_DWORD *)(i + 4));
    v13 = a4 >= v12;
    v14 = a4 - v12;
    if (!v13 || bswap32(*(_DWORD *)(i + 8)) > v14)
      break;
    if ((*(_BYTE *)(i + 7) & 3) != 0)
      sub_10035BC50(a1, 0, a3, v11, "ICC profile tag start not a multiple of 4");
    if (!--v5)
      return 1;
  }
  sub_10035BC50(a1, a2, a3, v11, "ICC profile tag outside profile");
  return 0;
}

uint64_t sub_10035C468(uint64_t result, uint64_t a2, unsigned int *a3, uLong a4)
{
  uint64_t v6;
  uint64_t v7;
  uInt v8;
  unsigned int v9;
  unsigned int v10;
  int *i;
  uLong v12;
  uLong v13;
  const char *v14;
  uint64_t v15;
  int v16;

  if ((~*(_DWORD *)(result + 896) & 0x30) == 0)
    return result;
  v6 = result;
  v7 = 0;
  v8 = 0;
  v9 = bswap32(a3[21]);
  v10 = 0x10000;
  for (i = &dword_1003C4F30; ; i += 8)
  {
    if (v9 != *(i - 1) || bswap32(a3[22]) != *i || bswap32(a3[23]) != i[1] || bswap32(a3[24]) != i[2])
      goto LABEL_4;
    if (!v8)
      break;
    if (v8 == *(i - 2))
      goto LABEL_13;
LABEL_4:
    if (++v7 == 7)
      return result;
  }
  v8 = bswap32(*a3);
  v10 = bswap32(a3[16]);
  if (v8 != *(i - 2))
    goto LABEL_4;
LABEL_13:
  if (v10 != *((unsigned __int16 *)i + 7))
    goto LABEL_4;
  if (!a4)
  {
    v12 = adler32(0, 0, 0);
    a4 = adler32(v12, (const Bytef *)a3, v8);
  }
  if (a4 != *(i - 4))
    return sub_10035F324(v6, "Not recognizing known sRGB profile that has been edited", 0);
  v13 = crc32(0, 0, 0);
  if (crc32(v13, (const Bytef *)a3, v8) != *(i - 3))
    return sub_10035F324(v6, "Not recognizing known sRGB profile that has been edited", 0);
  if (v7 >= 5)
  {
    v14 = "known incorrect sRGB profile";
    v15 = v6;
    v16 = 2;
LABEL_23:
    sub_10035F324(v15, v14, v16);
  }
  else if ((unint64_t)(v7 - 4) <= 2)
  {
    v14 = "out-of-date sRGB profile with no signature";
    v15 = v6;
    v16 = 0;
    goto LABEL_23;
  }
  return sub_10035BA58(v6, a2, bswap32(a3[16]));
}

uint64_t sub_10035C63C(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  int v4;
  double v5;
  double v6;
  BOOL v7;
  unsigned int v8;
  double v9;
  double v10;
  BOOL v11;
  unsigned int v12;
  double v13;
  double v14;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  int v19;

  if (*(_BYTE *)(result + 969) || (*(_WORD *)(result + 1242) & 2) == 0)
    return result;
  v1 = *(_DWORD *)(result + 1208);
  if ((v1 & 0x80000000) != 0)
    goto LABEL_40;
  v2 = *(_DWORD *)(result + 1220);
  v3 = *(_DWORD *)(result + 1232);
  v4 = v2 + v1 + v3;
  if (v4 < 1)
    goto LABEL_40;
  if (v1)
  {
    v5 = (double)(int)v1 * 32768.0 / (double)v4 + 0.5;
    v6 = floor(v5);
    v7 = v6 <= 2147483650.0 && v6 >= -2147483650.0;
    v8 = vcvtmd_s64_f64(v5);
    if (v7)
      v1 = v8;
    if ((v2 & 0x80000000) != 0)
LABEL_40:
      sub_10035E6F4(result, "internal error handling cHRM->XYZ");
  }
  else
  {
    v7 = 1;
    if ((v2 & 0x80000000) != 0)
      goto LABEL_40;
  }
  if (!v7 || (v1 & 0x80000000) != 0 || (int)v1 > 0x8000)
    goto LABEL_40;
  if (v2)
  {
    v9 = (double)(int)v2 * 32768.0 / (double)v4 + 0.5;
    v10 = floor(v9);
    v11 = v10 <= 2147483650.0 && v10 >= -2147483650.0;
    v12 = vcvtmd_s64_f64(v9);
    if (v11)
      v2 = v12;
    if (v3 < 0)
      goto LABEL_40;
  }
  else
  {
    v11 = 1;
    if (v3 < 0)
      goto LABEL_40;
  }
  if (!v11 || (v2 & 0x80000000) != 0 || (int)v2 > 0x8000)
    goto LABEL_40;
  if (v3)
  {
    v13 = (double)v3 * 32768.0 / (double)v4 + 0.5;
    v14 = floor(v13);
    if (v14 > 2147483650.0 || v14 < -2147483650.0)
      goto LABEL_40;
    v16 = vcvtmd_s64_f64(v13);
    if (v16 > 0x8000)
      goto LABEL_40;
    v17 = v2 + v1 + v16;
    v18 = v17 == 32769;
    if (v17 > 0x8001)
      goto LABEL_40;
  }
  else
  {
    v16 = 0;
    v17 = v2 + v1;
    v18 = v2 + v1 == 32769;
    if (v2 + v1 > 0x8001)
      goto LABEL_40;
  }
  if (v18)
  {
    v19 = -1;
    if (v2 < v1)
      goto LABEL_41;
LABEL_37:
    if (v2 >= v16)
    {
      v2 += v19;
      goto LABEL_45;
    }
LABEL_41:
    if (v1 < v2 || v1 < v16)
      v16 += v19;
    else
      v1 += v19;
    goto LABEL_45;
  }
  if (!(v17 >> 15))
  {
    v19 = 1;
    if (v2 < v1)
      goto LABEL_41;
    goto LABEL_37;
  }
LABEL_45:
  if (v2 + v1 + v16 != 0x8000)
    sub_10035E6F4(result, "internal error handling cHRM coefficients");
  *(_WORD *)(result + 970) = v1;
  *(_WORD *)(result + 972) = v2;
  return result;
}

uint64_t sub_10035C878(int *a1, int a2, int a3, int a4)
{
  int v4;
  double v5;

  if (!a4)
    return 0;
  v4 = 0;
  if (!a2 || !a3)
    goto LABEL_10;
  v5 = floor((double)a2 * (double)a3 / (double)a4 + 0.5);
  if (v5 > 2147483650.0 || v5 < -2147483650.0)
    return 0;
  v4 = (int)v5;
LABEL_10:
  *a1 = v4;
  return 1;
}

uint64_t sub_10035C8E0(uint64_t result, unsigned int a2, unsigned int a3, int a4, unsigned int a5, int a6, int a7, int a8)
{
  uint64_t v15;
  int v16;
  const char *v17;
  const char *v18;
  unsigned int v19;
  BOOL v20;
  int v21;

  v15 = result;
  if (!a2)
  {
    v17 = "Image width is zero in IHDR";
    goto LABEL_7;
  }
  if ((a2 & 0x80000000) != 0)
  {
    v17 = "Invalid image width in IHDR";
LABEL_7:
    result = sub_10035E924(result, (uint64_t)v17);
    v16 = 1;
    if (*(_DWORD *)(v15 + 1044) >= a2)
      goto LABEL_9;
    goto LABEL_8;
  }
  v16 = 0;
  if (*(_DWORD *)(result + 1044) < a2)
  {
LABEL_8:
    result = sub_10035E924(v15, (uint64_t)"Image width exceeds user limit in IHDR");
    v16 = 1;
  }
LABEL_9:
  if (a3)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (*(_DWORD *)(v15 + 1048) >= a3)
        goto LABEL_12;
LABEL_17:
      result = sub_10035E924(v15, (uint64_t)"Image height exceeds user limit in IHDR");
      v16 = 1;
      if (a4 > 0x10)
        goto LABEL_47;
      goto LABEL_18;
    }
    v18 = "Invalid image height in IHDR";
  }
  else
  {
    v18 = "Image height is zero in IHDR";
  }
  result = sub_10035E924(v15, (uint64_t)v18);
  v16 = 1;
  if (*(_DWORD *)(v15 + 1048) < a3)
    goto LABEL_17;
LABEL_12:
  if (a4 > 0x10)
  {
LABEL_47:
    result = sub_10035E924(v15, (uint64_t)"Invalid bit depth in IHDR");
    v16 = 1;
    v19 = a5 & 0xFFFFFFFB;
    if (a5 > 6)
      goto LABEL_21;
LABEL_20:
    if (v19 != 1)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_18:
  if (((1 << a4) & 0x10116) == 0)
    goto LABEL_47;
  v19 = a5 & 0xFFFFFFFB;
  if (a5 <= 6)
    goto LABEL_20;
LABEL_21:
  result = sub_10035E924(v15, (uint64_t)"Invalid color type in IHDR");
  v16 = 1;
LABEL_22:
  if (a4 > 8 && a5 == 3 || (a5 != 4 ? (v20 = v19 == 2) : (v20 = 1), !v20 ? (v21 = 0) : (v21 = 1), a4 < 8 && v21))
  {
    result = sub_10035E924(v15, (uint64_t)"Invalid color type/bit depth combination in IHDR");
    v16 = 1;
  }
  if (a6 >= 2)
  {
    result = sub_10035E924(v15, (uint64_t)"Unknown interlace method in IHDR");
    v16 = 1;
  }
  if (a7)
  {
    result = sub_10035E924(v15, (uint64_t)"Unknown compression method in IHDR");
    v16 = 1;
  }
  if ((*(_BYTE *)(v15 + 293) & 0x10) != 0 && *(_DWORD *)(v15 + 976))
    result = sub_10035E924(v15, (uint64_t)"MNG features are not allowed in a PNG datastream");
  if (a8 && (a8 != 64 || (*(_DWORD *)(v15 + 976) & 4) == 0 || v19 != 2 || (*(_DWORD *)(v15 + 292) & 0x1000) != 0))
  {
    sub_10035E924(v15, (uint64_t)"Unknown filter method in IHDR");
    if ((*(_BYTE *)(v15 + 293) & 0x10) != 0)
      sub_10035E924(v15, (uint64_t)"Invalid filter method in IHDR");
LABEL_51:
    sub_10035E6F4(v15, "Invalid IHDR data");
  }
  if (v16)
    goto LABEL_51;
  return result;
}

uint64_t sub_10035CB50(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t *a4)
{
  unsigned int v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;

  v4 = *a3;
  v5 = *a4;
  if (*a4 < a2)
  {
    while (2)
    {
      v6 = 4;
      switch(*(_BYTE *)(a1 + v5))
      {
        case '+':
          goto LABEL_9;
        case '-':
          v6 = 132;
          goto LABEL_9;
        case '.':
          v6 = 16;
          goto LABEL_9;
        case '0':
          v6 = 8;
          goto LABEL_9;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          v6 = 264;
          goto LABEL_9;
        case 'E':
        case 'e':
          v6 = 32;
LABEL_9:
          switch(v6 & 0x3C | v4 & 3)
          {
            case 4u:
              if ((v4 & 0x3C) == 0)
              {
                v4 |= v6;
                break;
              }
              goto LABEL_26;
            case 6u:
              if ((v4 & 0x3C) == 0)
              {
                v4 |= 4u;
                break;
              }
              goto LABEL_26;
            case 8u:
              if ((v4 & 0x10) != 0)
                v4 = v4 & 0x180 | 0x11;
              goto LABEL_5;
            case 9u:
LABEL_5:
              v4 |= v6 | 0x40;
              break;
            case 0xAu:
              v4 |= 0x48u;
              break;
            case 0x10u:
              if ((v4 & 0x10) != 0)
                goto LABEL_26;
              v7 = v4 & 0x1C0 | v6 | 1;
              v8 = v6 | v4;
              if ((v4 & 8) != 0)
                v4 = v8;
              else
                v4 = v7;
              break;
            case 0x20u:
            case 0x21u:
              if ((v4 & 8) == 0)
                goto LABEL_26;
              v4 = v4 & 0x1C0 | 2;
              break;
            default:
              goto LABEL_26;
          }
          if (a2 != ++v5)
            continue;
          v5 = a2;
          break;
        default:
          goto LABEL_26;
      }
      break;
    }
  }
LABEL_26:
  *a3 = v4;
  *a4 = v5;
  return (v4 >> 3) & 1;
}

uint64_t sub_10035CC78(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unsigned int v6;

  v6 = 0;
  v5 = 0;
  result = sub_10035CB50(a1, a2, &v6, &v5);
  if ((_DWORD)result)
  {
    if (v5 == a2 || !*(_BYTE *)(a1 + v5))
      return v6;
    else
      return 0;
  }
  return result;
}

uint64_t sub_10035CCE4(uint64_t a1, uint64_t a2, double a3)
{
  double v3;

  v3 = floor(a3 * 100000.0 + 0.5);
  if (v3 > 2147483650.0 || v3 < -2147483650.0)
    sub_10035F408(a1, a2);
  return (int)v3;
}

uint64_t sub_10035CD30(int a1)
{
  double v1;
  double v2;
  BOOL v3;
  unsigned int v4;

  v1 = 1.0e10 / (double)a1 + 0.5;
  v2 = floor(v1);
  v3 = v2 < -2147483650.0 || v2 > 2147483650.0;
  v4 = vcvtmd_s64_f64(v1);
  if (v3)
    return 0;
  else
    return v4;
}

BOOL sub_10035CD74(int a1)
{
  return (a1 - 105001) < 0xFFFFD8EF;
}

unsigned int sub_10035CD8C(int a1, int a2)
{
  double v2;
  double v3;
  BOOL v4;

  if (a1
    && a2
    && ((v2 = 1.0e15 / (double)a1 / (double)a2 + 0.5, v3 = floor(v2), v3 <= 2147483650.0)
      ? (v4 = v3 < -2147483650.0)
      : (v4 = 1),
        !v4))
  {
    return vcvtmd_s64_f64(v2);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10035CDE8(uint64_t result, int a2)
{
  if ((result - 1) <= 0xFD)
    LOBYTE(result) = vcvtmd_s64_f64(pow((double)(int)result / 255.0, (double)a2 * 0.00001) * 255.0 + 0.5);
  return result;
}

uint64_t sub_10035CE44(uint64_t a1, int a2, int a3)
{
  unsigned int v3;

  v3 = a2 - 1;
  if (*(_BYTE *)(a1 + 608) == 8)
  {
    if (v3 <= 0xFD)
      LOBYTE(a2) = vcvtmd_s64_f64(pow((double)a2 / 255.0, (double)a3 * 0.00001) * 255.0 + 0.5);
    LOWORD(a2) = a2;
    return (unsigned __int16)a2;
  }
  if (v3 > 0xFFFD)
    return (unsigned __int16)a2;
  return (unsigned __int16)vcvtmd_s64_f64(pow((double)a2 / 65535.0, (double)a3 * 0.00001) * 65535.0 + 0.5);
}

void sub_10035CF00(uint64_t a1)
{
  void *v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  sub_10035F814(a1, *(void **)(a1 + 672));
  *(_QWORD *)(a1 + 672) = 0;
  v2 = *(void **)(a1 + 680);
  if (v2)
  {
    v3 = *(_DWORD *)(a1 + 664);
    if (v3 != -23)
    {
      v4 = 0;
      v5 = 1 << (8 - v3);
      if (v5 <= 1)
        v5 = 1;
      v6 = 8 * v5;
      do
      {
        sub_10035F814(a1, *(void **)(*(_QWORD *)(a1 + 680) + v4));
        v4 += 8;
      }
      while (v6 != v4);
      v2 = *(void **)(a1 + 680);
    }
    sub_10035F814(a1, v2);
    *(_QWORD *)(a1 + 680) = 0;
  }
  sub_10035F814(a1, *(void **)(a1 + 688));
  *(_QWORD *)(a1 + 688) = 0;
  sub_10035F814(a1, *(void **)(a1 + 696));
  *(_QWORD *)(a1 + 696) = 0;
  v7 = *(void **)(a1 + 704);
  if (v7)
  {
    v8 = *(_DWORD *)(a1 + 664);
    if (v8 != -23)
    {
      v9 = 0;
      v10 = 1 << (8 - v8);
      if (v10 <= 1)
        v10 = 1;
      v11 = 8 * v10;
      do
      {
        sub_10035F814(a1, *(void **)(*(_QWORD *)(a1 + 704) + v9));
        v9 += 8;
      }
      while (v11 != v9);
      v7 = *(void **)(a1 + 704);
    }
    sub_10035F814(a1, v7);
    *(_QWORD *)(a1 + 704) = 0;
  }
  v12 = *(void **)(a1 + 712);
  if (v12)
  {
    v13 = *(_DWORD *)(a1 + 664);
    if (v13 != -23)
    {
      v14 = 0;
      v15 = 1 << (8 - v13);
      if (v15 <= 1)
        v15 = 1;
      v16 = 8 * v15;
      do
      {
        sub_10035F814(a1, *(void **)(*(_QWORD *)(a1 + 712) + v14));
        v14 += 8;
      }
      while (v16 != v14);
      v12 = *(void **)(a1 + 712);
    }
    sub_10035F814(a1, v12);
    *(_QWORD *)(a1 + 712) = 0;
  }
}

void sub_10035D070(uint64_t a1, int a2)
{
  int v4;
  int v5;
  double v6;
  double v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 v11;
  char v12;
  int v13;
  int v14;
  int v15;
  double v16;
  double v17;
  int v18;
  double v20;
  int v21;
  double v22;
  double v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  __int16 v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  _OWORD *v43;
  uint64_t i;
  double v45;
  double v46;
  BOOL v47;
  unsigned int v48;
  int v49;
  _OWORD *v50;
  _OWORD *v51;
  uint64_t j;
  int v53;
  double v54;
  double v55;
  BOOL v56;
  unsigned int v57;
  int v58;
  _OWORD *v59;
  _OWORD *v60;
  uint64_t k;
  unsigned int v62;
  uint64_t v63;
  double v64;
  double v65;
  BOOL v66;
  unsigned int v67;
  int v68;
  int v69;
  double v70;
  double v71;
  BOOL v72;
  unsigned int v73;
  int v74;
  int v75;

  if (*(_QWORD *)(a1 + 672) || *(_QWORD *)(a1 + 680))
  {
    sub_10035E924(a1, (uint64_t)"gamma table being rebuilt");
    sub_10035CF00(a1);
  }
  if (a2 <= 8)
  {
    v4 = *(_DWORD *)(a1 + 668);
    if (v4 < 1)
    {
      v42 = 100000;
    }
    else
    {
      v5 = *(_DWORD *)(a1 + 1168);
      if (!v5
        || ((v6 = 1.0e15 / (double)v5 / (double)v4 + 0.5, v7 = floor(v6), v7 <= 2147483650.0)
          ? (v8 = v7 < -2147483650.0)
          : (v8 = 1),
            v8))
      {
        v42 = 0;
      }
      else
      {
        v42 = vcvtmd_s64_f64(v6);
      }
    }
    v43 = sub_10035F8C8((_QWORD *)a1, 0x100uLL);
    *(_QWORD *)(a1 + 672) = v43;
    if ((v42 - 95000) > 0x2710)
    {
      for (i = 0; i != 256; ++i)
      {
        while ((i - 1) > 0xFD)
        {
          *((_BYTE *)v43 + i) = i;
          if (++i == 256)
            goto LABEL_68;
        }
        *((_BYTE *)v43 + i) = vcvtmd_s64_f64(pow((double)(int)i / 255.0, (double)v42 * 0.00001) * 255.0 + 0.5);
      }
    }
    else
    {
      *v43 = xmmword_1003C4960;
      v43[1] = xmmword_1003C4970;
      v43[7] = xmmword_1003C49D0;
      v43[8] = xmmword_1003C49E0;
      v43[9] = xmmword_1003C49F0;
      v43[10] = xmmword_1003C4A00;
      v43[11] = xmmword_1003C4A10;
      v43[12] = xmmword_1003C4A20;
      v43[13] = xmmword_1003C4A30;
      v43[14] = xmmword_1003C4A40;
      v43[15] = xmmword_1003C4A50;
    }
LABEL_68:
    if ((*(_DWORD *)(a1 + 300) & 0x600080) != 0)
    {
      v45 = 1.0e10 / (double)*(int *)(a1 + 1168) + 0.5;
      v46 = floor(v45);
      v47 = v46 < -2147483650.0 || v46 > 2147483650.0;
      v48 = vcvtmd_s64_f64(v45);
      if (v47)
        v49 = 0;
      else
        v49 = v48;
      v50 = sub_10035F8C8((_QWORD *)a1, 0x100uLL);
      v51 = v50;
      *(_QWORD *)(a1 + 696) = v50;
      if ((v49 - 95000) > 0x2710)
      {
        for (j = 0; j != 256; ++j)
        {
          while ((j - 1) > 0xFD)
          {
            *((_BYTE *)v51 + j) = j;
            if (++j == 256)
              goto LABEL_81;
          }
          *((_BYTE *)v51 + j) = vcvtmd_s64_f64(pow((double)(int)j / 255.0, (double)v49 * 0.00001) * 255.0 + 0.5);
        }
      }
      else
      {
        *v50 = xmmword_1003C4960;
        v50[1] = xmmword_1003C4970;
        v50[7] = xmmword_1003C49D0;
        v50[8] = xmmword_1003C49E0;
        v50[9] = xmmword_1003C49F0;
        v50[10] = xmmword_1003C4A00;
        v50[11] = xmmword_1003C4A10;
        v50[12] = xmmword_1003C4A20;
        v50[13] = xmmword_1003C4A30;
        v50[14] = xmmword_1003C4A40;
        v50[15] = xmmword_1003C4A50;
      }
LABEL_81:
      v53 = *(_DWORD *)(a1 + 668);
      if (v53 < 1)
      {
        v58 = *(_DWORD *)(a1 + 1168);
      }
      else
      {
        v54 = 1.0e10 / (double)v53 + 0.5;
        v55 = floor(v54);
        v56 = v55 < -2147483650.0 || v55 > 2147483650.0;
        v57 = vcvtmd_s64_f64(v54);
        if (v56)
          v58 = 0;
        else
          v58 = v57;
      }
      v59 = sub_10035F8C8((_QWORD *)a1, 0x100uLL);
      v60 = v59;
      *(_QWORD *)(a1 + 688) = v59;
      if ((v58 - 95000) > 0x2710)
      {
        for (k = 0; k != 256; ++k)
        {
          while ((k - 1) > 0xFD)
          {
            *((_BYTE *)v60 + k) = k;
            if (++k == 256)
              return;
          }
          *((_BYTE *)v60 + k) = vcvtmd_s64_f64(pow((double)(int)k / 255.0, (double)v58 * 0.00001) * 255.0 + 0.5);
        }
      }
      else
      {
        *v59 = xmmword_1003C4960;
        v59[1] = xmmword_1003C4970;
        v59[7] = xmmword_1003C49D0;
        v59[8] = xmmword_1003C49E0;
        v59[9] = xmmword_1003C49F0;
        v59[10] = xmmword_1003C4A00;
        v59[11] = xmmword_1003C4A10;
        v59[12] = xmmword_1003C4A20;
        v59[13] = xmmword_1003C4A30;
        v59[14] = xmmword_1003C4A40;
        v59[15] = xmmword_1003C4A50;
      }
    }
    return;
  }
  if ((*(_BYTE *)(a1 + 607) & 2) != 0)
  {
    v9 = *(unsigned __int8 *)(a1 + 720);
    if (*(unsigned __int8 *)(a1 + 721) > v9)
      v9 = *(unsigned __int8 *)(a1 + 721);
    if (*(unsigned __int8 *)(a1 + 722) > v9)
      v9 = *(unsigned __int8 *)(a1 + 722);
  }
  else
  {
    v9 = *(unsigned __int8 *)(a1 + 723);
  }
  v10 = v9 - 1;
  v11 = 16 - v9;
  if (v10 >= 0xF)
    v11 = 0;
  v12 = v11;
  if (v11 <= 5u)
    v12 = 5;
  v13 = *(_DWORD *)(a1 + 300) & 0x4000400;
  if (v13)
    v11 = v12;
  if ((v11 & 0xF8) != 0)
    v14 = 8;
  else
    v14 = v11;
  *(_DWORD *)(a1 + 664) = v14;
  v15 = *(_DWORD *)(a1 + 668);
  if (!v13)
  {
    if (v15 < 1)
    {
      v75 = 100000;
    }
    else
    {
      v21 = *(_DWORD *)(a1 + 1168);
      if (!v21
        || ((v22 = 1.0e15 / (double)v21 / (double)v15 + 0.5, v23 = floor(v22), v23 <= 2147483650.0)
          ? (v24 = v23 < -2147483650.0)
          : (v24 = 1),
            v24))
      {
        v75 = 0;
      }
      else
      {
        v75 = vcvtmd_s64_f64(v22);
      }
    }
    sub_10035D9FC((_QWORD *)a1, (_QWORD *)(a1 + 680), v14, v75);
    if ((*(_DWORD *)(a1 + 300) & 0x600080) != 0)
      goto LABEL_101;
    return;
  }
  if (v15 < 1)
  {
    v20 = 1.0;
  }
  else
  {
    v16 = (double)*(int *)(a1 + 1168) * 0.00001 * (double)v15 + 0.5;
    v17 = floor(v16);
    v18 = vcvtmd_s64_f64(v16);
    if (v17 < -2147483650.0 || v17 > 2147483650.0)
      v20 = 0.0;
    else
      v20 = (double)v18 * 0.00001;
  }
  v25 = 8 - v14;
  v26 = (1 << (8 - v14));
  v27 = sub_10035F834(a1, 8 * v26);
  *(_QWORD *)(a1 + 680) = v27;
  v28 = v27;
  do
  {
    *v28++ = sub_10035F8C8((_QWORD *)a1, 0x200uLL);
    --v26;
  }
  while (v26);
  v29 = 0;
  v30 = 0;
  v31 = 0xFFu >> v14;
  do
  {
    v32 = 257 * v30;
    v33 = vcvtmd_s64_f64(pow((double)((unsigned __int16)(257 * v30) + 128) / 65535.0, v20) * 65535.0 + 0.5);
    v34 = ((v33 << (16 - v14)) - v33 + 0x8000) / 0xFFFF;
    if (v29 <= v34)
    {
      v35 = v34 + 1;
      v36 = v35 - v29;
      if (v35 - v29 >= 2)
      {
        v37 = v29 + (v36 & 0xFFFFFFFE);
        v38 = v36 & 0xFFFFFFFE;
        do
        {
          v39 = v27[(v29 + 1) & v31];
          *(_WORD *)(v27[v29 & v31] + 2 * (v29 >> v25)) = v32;
          *(_WORD *)(v39 + 2 * ((v29 + 1) >> v25)) = v32;
          v29 += 2;
          v38 -= 2;
        }
        while (v38);
        if (v36 == (v36 & 0xFFFFFFFE))
          goto LABEL_49;
      }
      else
      {
        v37 = v29;
      }
      do
      {
        *(_WORD *)(v27[v37 & v31] + 2 * (v37 >> v25)) = v32;
        ++v37;
      }
      while (v35 != v37);
LABEL_49:
      v29 = v35;
    }
    ++v30;
  }
  while (v30 != 255);
  v40 = (256 << v25) - v29;
  if (256 << v25 > v29)
  {
    if (v40 < 2)
    {
      v41 = v29;
      goto LABEL_99;
    }
    v41 = v29 + (v40 & 0xFFFFFFFE);
    v62 = v40 & 0xFFFFFFFE;
    do
    {
      v63 = v27[(v29 + 1) & v31];
      *(_WORD *)(v27[v29 & v31] + 2 * (v29 >> v25)) = -1;
      *(_WORD *)(v63 + 2 * ((v29 + 1) >> v25)) = -1;
      v29 += 2;
      v62 -= 2;
    }
    while (v62);
    if (v40 != (v40 & 0xFFFFFFFE))
    {
      do
      {
LABEL_99:
        *(_WORD *)(v27[v41 & v31] + 2 * (v41 >> v25)) = -1;
        ++v41;
      }
      while (256 << v25 != v41);
    }
  }
  if ((*(_DWORD *)(a1 + 300) & 0x600080) != 0)
  {
LABEL_101:
    v64 = 1.0e10 / (double)*(int *)(a1 + 1168) + 0.5;
    v65 = floor(v64);
    v66 = v65 < -2147483650.0 || v65 > 2147483650.0;
    v67 = vcvtmd_s64_f64(v64);
    if (v66)
      v68 = 0;
    else
      v68 = v67;
    sub_10035D9FC((_QWORD *)a1, (_QWORD *)(a1 + 712), v14, v68);
    v69 = *(_DWORD *)(a1 + 668);
    if (v69 < 1)
    {
      v74 = *(_DWORD *)(a1 + 1168);
    }
    else
    {
      v70 = 1.0e10 / (double)v69 + 0.5;
      v71 = floor(v70);
      v72 = v71 < -2147483650.0 || v71 > 2147483650.0;
      v73 = vcvtmd_s64_f64(v70);
      if (v72)
        v74 = 0;
      else
        v74 = v73;
    }
    sub_10035D9FC((_QWORD *)a1, (_QWORD *)(a1 + 704), v14, v74);
  }
}

void sub_10035D9FC(_QWORD *a1, _QWORD *a2, int a3, int a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  double v18;
  _QWORD *v24;
  uint64_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  uint64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  long double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  uint64_t v40;
  uint32x4_t v41;
  int16x8_t *v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  float64x2_t v93;
  int32x4_t v94;
  float64x2_t v95;
  int32x4_t v96;
  double v97;
  int32x4_t v98;
  uint32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  long double v103;
  int32x4_t v104;
  long double v105;
  int32x4_t v106;
  long double v107;
  int32x4_t v108;
  float64x2_t v109;
  int32x4_t v110;
  long double v111;
  int32x4_t v112;
  float64x2_t v113;
  int32x4_t v114;
  float64x2_t v115;
  int32x4_t v116;
  float64x2_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int8x16x4_t v123;

  v8 = 8 - a3;
  v9 = (1 << (8 - a3));
  v10 = ~(-1 << (16 - a3));
  v11 = sub_10035F834((uint64_t)a1, 8 * v9);
  *a2 = v11;
  if ((a4 - 95000) >= 0x2711)
  {
    v17 = 0;
    v18 = (double)a4 * 0.00001;
    v97 = 1.0 / (double)(int)v10;
    v99 = (uint32x4_t)vdupq_n_s32(v8);
    __asm { FMOV            V0.2D, #0.5 }
    v93 = _Q0;
    v95 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
    do
    {
      v24 = sub_10035F8C8(a1, 0x200uLL);
      v25 = 0;
      v11[v17] = v24;
      v101 = vdupq_n_s32(v17);
      v26 = (uint32x4_t)xmmword_1003BCB00;
      v27 = (uint32x4_t)xmmword_1003BCA80;
      do
      {
        v119 = (int32x4_t)v27;
        v121 = (int32x4_t)v26;
        v28 = vaddq_s32((int32x4_t)vshlq_u32(v27, v99), v101);
        v29 = vaddq_s32((int32x4_t)vshlq_u32(v26, v99), v101);
        v30.i64[0] = v29.u32[0];
        v30.i64[1] = v29.u32[1];
        v31 = vcvtq_f64_u64(v30);
        v30.i64[0] = v29.u32[2];
        v30.i64[1] = v29.u32[3];
        v32 = vcvtq_f64_u64(v30);
        v30.i64[0] = v28.u32[0];
        v30.i64[1] = v28.u32[1];
        v33 = vcvtq_f64_u64(v30);
        v30.i64[0] = v28.u32[2];
        v30.i64[1] = v28.u32[3];
        v115 = vmulq_n_f64(v33, v97);
        v117 = vmulq_n_f64(vcvtq_f64_u64(v30), v97);
        v113 = vmulq_n_f64(v32, v97);
        v109 = vmulq_n_f64(v31, v97);
        v111 = pow(v109.f64[0], v18);
        v107 = pow(v109.f64[1], v18);
        v109.f64[0] = pow(v113.f64[0], v18);
        v113.f64[0] = pow(v113.f64[1], v18);
        v105 = pow(v115.f64[0], v18);
        v103 = pow(v115.f64[1], v18);
        v115.f64[0] = pow(v117.f64[0], v18);
        v34 = pow(v117.f64[1], v18);
        *(long double *)v123.val[2].i64 = v105;
        *(long double *)&v123.val[2].i64[1] = v103;
        *(long double *)v123.val[1].i64 = v111;
        *(long double *)&v123.val[1].i64[1] = v107;
        v35.f64[0] = v115.f64[0];
        v35.f64[1] = v34;
        v36.f64[0] = v109.f64[0];
        v36.f64[1] = v113.f64[0];
        v123.val[0].i64[1] = *(_QWORD *)&v95.f64[1];
        v37 = vmlaq_f64(v93, v95, v36);
        v38 = vmlaq_f64(v93, v95, v35);
        v39 = vrndmq_f64(vmlaq_f64(v93, v95, (float64x2_t)v123.val[1]));
        *(int32x2_t *)v123.val[1].i8 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v37)));
        *(int32x2_t *)v123.val[3].i8 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v38)));
        *(int32x2_t *)v123.val[0].i8 = vmovn_s64(vcvtq_s64_f64(v39));
        *(int32x2_t *)v123.val[2].i8 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(v93, v95, (float64x2_t)v123.val[2]))));
        *(int8x16_t *)&v24[v25] = vqtbl4q_s8(v123, (int8x16_t)xmmword_1003C4A90);
        *(_QWORD *)&v39.f64[0] = 0x800000008;
        *(_QWORD *)&v39.f64[1] = 0x800000008;
        v26 = (uint32x4_t)vaddq_s32(v121, (int32x4_t)v39);
        v27 = (uint32x4_t)vaddq_s32(v119, (int32x4_t)v39);
        v25 += 2;
      }
      while (v25 != 64);
      ++v17;
    }
    while (v17 != v9);
  }
  else if (a3)
  {
    v12 = 0;
    v13 = 1 << (15 - a3);
    do
    {
      v14 = sub_10035F8C8(a1, 0x200uLL);
      v15 = 0;
      v11[v12] = v14;
      do
      {
        v16 = (_WORD *)v14 + v15;
        *v16 = (v13 - (((_DWORD)v15 << v8) + (int)v12) + ((((_DWORD)v15 << v8) + (int)v12) << 16)) / v10;
        v16[1] = (v13 - ((((int)v15 + 1) << v8) + (int)v12) + (((((int)v15 + 1) << v8) + (int)v12) << 16)) / v10;
        v15 += 2;
      }
      while (v15 != 256);
      ++v12;
    }
    while (v12 != v9);
  }
  else
  {
    v40 = 0;
    v41 = (uint32x4_t)vdupq_n_s32(v8);
    v122 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003BCA80, v41);
    v120 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003BCB00, v41);
    v118 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4AA0, v41);
    v116 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4AB0, v41);
    v114 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4AC0, v41);
    v112 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4AD0, v41);
    v110 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4AE0, v41);
    v108 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4AF0, v41);
    v106 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4B00, v41);
    v104 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4B10, v41);
    v102 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4B20, v41);
    v100 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4B30, v41);
    v98 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4B40, v41);
    v96 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4B50, v41);
    v94 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4B60, v41);
    v92 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4B70, v41);
    v91 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4B80, v41);
    v90 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4B90, v41);
    v89 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4BA0, v41);
    v88 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4BB0, v41);
    v87 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4BC0, v41);
    v86 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4BD0, v41);
    v85 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4BE0, v41);
    v84 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4BF0, v41);
    v83 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4C00, v41);
    v82 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4C10, v41);
    v81 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4C20, v41);
    v80 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4C30, v41);
    v79 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4C40, v41);
    v78 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4C50, v41);
    v77 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4C60, v41);
    v76 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4C70, v41);
    v75 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4C80, v41);
    v74 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4C90, v41);
    v73 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4CA0, v41);
    v72 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4CB0, v41);
    v71 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4CC0, v41);
    v70 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4CD0, v41);
    v69 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4CE0, v41);
    v68 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4CF0, v41);
    v67 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4D00, v41);
    v66 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4D10, v41);
    v65 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4D20, v41);
    v64 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4D30, v41);
    v63 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4D40, v41);
    v62 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4D50, v41);
    v61 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4D60, v41);
    v60 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4D70, v41);
    v59 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4D80, v41);
    v58 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4D90, v41);
    v57 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4DA0, v41);
    v56 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4DB0, v41);
    v55 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4DC0, v41);
    v54 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4DD0, v41);
    v53 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4DE0, v41);
    v52 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4DF0, v41);
    v51 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4E00, v41);
    v50 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4E10, v41);
    v49 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4E20, v41);
    v48 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4E30, v41);
    v47 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4E40, v41);
    v46 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4E50, v41);
    v45 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4E60, v41);
    v44 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_1003C4E70, v41);
    do
    {
      v42 = (int16x8_t *)sub_10035F8C8(a1, 0x200uLL);
      v43 = vdupq_n_s32(v40);
      *v42 = vuzp1q_s16((int16x8_t)vaddq_s32(v120, v43), (int16x8_t)vaddq_s32(v122, v43));
      v42[1] = vuzp1q_s16((int16x8_t)vaddq_s32(v116, v43), (int16x8_t)vaddq_s32(v118, v43));
      v42[2] = vuzp1q_s16((int16x8_t)vaddq_s32(v112, v43), (int16x8_t)vaddq_s32(v114, v43));
      v42[3] = vuzp1q_s16((int16x8_t)vaddq_s32(v108, v43), (int16x8_t)vaddq_s32(v110, v43));
      v42[4] = vuzp1q_s16((int16x8_t)vaddq_s32(v104, v43), (int16x8_t)vaddq_s32(v106, v43));
      v42[5] = vuzp1q_s16((int16x8_t)vaddq_s32(v100, v43), (int16x8_t)vaddq_s32(v102, v43));
      v42[6] = vuzp1q_s16((int16x8_t)vaddq_s32(v96, v43), (int16x8_t)vaddq_s32(v98, v43));
      v42[7] = vuzp1q_s16((int16x8_t)vaddq_s32(v92, v43), (int16x8_t)vaddq_s32(v94, v43));
      v42[8] = vuzp1q_s16((int16x8_t)vaddq_s32(v90, v43), (int16x8_t)vaddq_s32(v91, v43));
      v42[9] = vuzp1q_s16((int16x8_t)vaddq_s32(v88, v43), (int16x8_t)vaddq_s32(v89, v43));
      v42[10] = vuzp1q_s16((int16x8_t)vaddq_s32(v86, v43), (int16x8_t)vaddq_s32(v87, v43));
      v42[11] = vuzp1q_s16((int16x8_t)vaddq_s32(v84, v43), (int16x8_t)vaddq_s32(v85, v43));
      v42[12] = vuzp1q_s16((int16x8_t)vaddq_s32(v82, v43), (int16x8_t)vaddq_s32(v83, v43));
      v42[13] = vuzp1q_s16((int16x8_t)vaddq_s32(v80, v43), (int16x8_t)vaddq_s32(v81, v43));
      v42[14] = vuzp1q_s16((int16x8_t)vaddq_s32(v78, v43), (int16x8_t)vaddq_s32(v79, v43));
      v42[15] = vuzp1q_s16((int16x8_t)vaddq_s32(v76, v43), (int16x8_t)vaddq_s32(v77, v43));
      v42[16] = vuzp1q_s16((int16x8_t)vaddq_s32(v74, v43), (int16x8_t)vaddq_s32(v75, v43));
      v42[17] = vuzp1q_s16((int16x8_t)vaddq_s32(v72, v43), (int16x8_t)vaddq_s32(v73, v43));
      v42[18] = vuzp1q_s16((int16x8_t)vaddq_s32(v70, v43), (int16x8_t)vaddq_s32(v71, v43));
      v42[19] = vuzp1q_s16((int16x8_t)vaddq_s32(v68, v43), (int16x8_t)vaddq_s32(v69, v43));
      v42[20] = vuzp1q_s16((int16x8_t)vaddq_s32(v66, v43), (int16x8_t)vaddq_s32(v67, v43));
      v42[21] = vuzp1q_s16((int16x8_t)vaddq_s32(v64, v43), (int16x8_t)vaddq_s32(v65, v43));
      v42[22] = vuzp1q_s16((int16x8_t)vaddq_s32(v62, v43), (int16x8_t)vaddq_s32(v63, v43));
      v42[23] = vuzp1q_s16((int16x8_t)vaddq_s32(v60, v43), (int16x8_t)vaddq_s32(v61, v43));
      v42[24] = vuzp1q_s16((int16x8_t)vaddq_s32(v58, v43), (int16x8_t)vaddq_s32(v59, v43));
      v42[25] = vuzp1q_s16((int16x8_t)vaddq_s32(v56, v43), (int16x8_t)vaddq_s32(v57, v43));
      v42[26] = vuzp1q_s16((int16x8_t)vaddq_s32(v54, v43), (int16x8_t)vaddq_s32(v55, v43));
      v42[27] = vuzp1q_s16((int16x8_t)vaddq_s32(v52, v43), (int16x8_t)vaddq_s32(v53, v43));
      v42[28] = vuzp1q_s16((int16x8_t)vaddq_s32(v50, v43), (int16x8_t)vaddq_s32(v51, v43));
      v42[29] = vuzp1q_s16((int16x8_t)vaddq_s32(v48, v43), (int16x8_t)vaddq_s32(v49, v43));
      v42[30] = vuzp1q_s16((int16x8_t)vaddq_s32(v46, v43), (int16x8_t)vaddq_s32(v47, v43));
      v42[31] = vuzp1q_s16((int16x8_t)vaddq_s32(v44, v43), (int16x8_t)vaddq_s32(v45, v43));
      v11[v40++] = v42;
    }
    while (v9 != v40);
  }
}

uint64_t sub_10035E3D4(int *a1, int *a2)
{
  int v2;
  int v3;
  double v4;
  int v6;
  double v7;
  int v9;
  int v10;
  int v11;
  int v12;
  double v13;
  int v15;
  double v16;
  int v18;
  int v19;
  int v20;
  int v21;
  double v22;
  int v24;
  double v25;
  int v27;
  int v28;
  int v29;
  int v30;
  double v31;
  int v33;
  double v34;

  v2 = *a2;
  v3 = a2[1] + *a2 + a2[2];
  if (!v3)
    return 1;
  if (v2)
  {
    v4 = floor((double)v2 * 100000.0 / (double)v3 + 0.5);
    if (v4 > 2147483650.0 || v4 < -2147483650.0)
      return 1;
    v2 = (int)v4;
  }
  *a1 = v2;
  v6 = a2[1];
  if (v6)
  {
    v7 = floor((double)v6 * 100000.0 / (double)v3 + 0.5);
    if (v7 > 2147483650.0 || v7 < -2147483650.0)
      return 1;
    v6 = (int)v7;
  }
  a1[1] = v6;
  v9 = a2[3];
  v10 = a2[4] + v9 + a2[5];
  if (!v10)
    return 1;
  v12 = *a2;
  v11 = a2[1];
  if (v9)
  {
    v13 = floor((double)v9 * 100000.0 / (double)v10 + 0.5);
    if (v13 > 2147483650.0 || v13 < -2147483650.0)
      return 1;
    v9 = (int)v13;
  }
  a1[2] = v9;
  v15 = a2[4];
  if (v15)
  {
    v16 = floor((double)v15 * 100000.0 / (double)v10 + 0.5);
    if (v16 > 2147483650.0 || v16 < -2147483650.0)
      return 1;
    v15 = (int)v16;
  }
  a1[3] = v15;
  v18 = a2[6];
  v19 = a2[7] + v18 + a2[8];
  if (!v19)
    return 1;
  v21 = a2[3];
  v20 = a2[4];
  if (v18)
  {
    v22 = floor((double)v18 * 100000.0 / (double)v19 + 0.5);
    if (v22 > 2147483650.0 || v22 < -2147483650.0)
      return 1;
    v18 = (int)v22;
  }
  a1[4] = v18;
  v24 = a2[7];
  if (v24)
  {
    v25 = floor((double)v24 * 100000.0 / (double)v19 + 0.5);
    if (v25 > 2147483650.0 || v25 < -2147483650.0)
      return 1;
    v24 = (int)v25;
  }
  a1[5] = v24;
  v27 = v10 + v3 + v19;
  if (!v27)
    return 1;
  v28 = v21 + v12;
  v29 = a2[7];
  v30 = v28 + a2[6];
  if (v30)
  {
    v31 = floor((double)v30 * 100000.0 / (double)v27 + 0.5);
    if (v31 > 2147483650.0 || v31 < -2147483650.0)
      return 1;
    v30 = (int)v31;
  }
  a1[6] = v30;
  v33 = v20 + v11 + v29;
  if (v33)
  {
    v34 = floor((double)v33 * 100000.0 / (double)v27 + 0.5);
    if (v34 <= 2147483650.0 && v34 >= -2147483650.0)
    {
      v33 = (int)v34;
      goto LABEL_54;
    }
    return 1;
  }
LABEL_54:
  a1[7] = v33;
  return 0;
}

void sub_10035E6F4(uint64_t a1, const char *a2)
{
  void (*v4)(uint64_t, const char *);

  if (a1)
  {
    v4 = *(void (**)(uint64_t, const char *))(a1 + 216);
    if (v4)
      v4(a1, a2);
  }
  sub_10035E72C(a1, a2);
}

void sub_10035E72C(uint64_t a1, const char *a2)
{
  const char *v3;

  v3 = "undefined";
  if (a2)
    v3 = a2;
  fprintf(__stderrp, "libpng error: %s", v3);
  fputc(10, __stderrp);
  sub_10035F620(a1);
}

unint64_t sub_10035E784(uint64_t a1, unint64_t a2, unint64_t a3, _BYTE *a4)
{
  char v4;
  unsigned __int8 *v5;
  unint64_t v6;
  int v7;
  BOOL v8;

  if (a1 && a3 < a2)
  {
    if (a4 && (v4 = *a4) != 0 && a2 - 1 > a3)
    {
      v5 = a4 + 1;
      do
      {
        *(_BYTE *)(a1 + a3) = v4;
        v6 = a3 + 1;
        v7 = *v5++;
        v4 = v7;
        if (v7)
          v8 = v6 >= a2 - 1;
        else
          v8 = 1;
        ++a3;
      }
      while (!v8);
    }
    else
    {
      v6 = a3;
    }
    *(_BYTE *)(a1 + v6) = 0;
    return v6;
  }
  return a3;
}

unint64_t sub_10035E7E0(unint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;

  *(_BYTE *)(a2 - 1) = 0;
  v4 = a2 - 1;
  if (v4 > a1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 1;
    while (2)
    {
      if (a4 || v6 < v7)
      {
        switch(a3)
        {
          case 1:
            goto LABEL_11;
          case 2:
            v7 = 2;
LABEL_11:
            v8 = a4 / 0xA;
            *(_BYTE *)--v4 = a0123456789abcd[a4 % 0xA];
            goto LABEL_5;
          case 3:
            goto LABEL_4;
          case 4:
            v7 = 2;
LABEL_4:
            *(_BYTE *)--v4 = a0123456789abcd[a4 & 0xF];
            v8 = a4 >> 4;
LABEL_5:
            ++v6;
            a4 = v8;
            goto LABEL_6;
          case 5:
            v9 = a4 % 0xA;
            if (v5 || v9)
            {
              *(_BYTE *)--v4 = a0123456789abcd[v9];
              v5 = 1;
              v7 = 5;
              a4 /= 0xAuLL;
              ++v6;
              if (a3 != 5)
                goto LABEL_6;
            }
            else
            {
              v5 = 0;
              v7 = 5;
              a4 /= 0xAuLL;
              ++v6;
              if (a3 != 5)
                goto LABEL_6;
            }
LABEL_19:
            if (v6 == 5 && v4 > a1)
            {
              if (v5)
              {
                *(_BYTE *)--v4 = 46;
              }
              else
              {
                v5 = 0;
                if (!a4)
                  *(_BYTE *)--v4 = 48;
              }
              v6 = 5;
            }
LABEL_6:
            if (v4 > a1)
              continue;
            return v4;
          default:
            a4 = 0;
            ++v6;
            if (a3 != 5)
              goto LABEL_6;
            goto LABEL_19;
        }
      }
      break;
    }
  }
  return v4;
}

uint64_t sub_10035E924(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(void);

  if (a1)
  {
    if (*(_BYTE *)a2 == 35)
    {
      if (*(_BYTE *)(a2 + 1) == 32)
      {
        v2 = 1;
      }
      else if (*(_BYTE *)(a2 + 2) == 32)
      {
        v2 = 2;
      }
      else if (*(_BYTE *)(a2 + 3) == 32)
      {
        v2 = 3;
      }
      else if (*(_BYTE *)(a2 + 4) == 32)
      {
        v2 = 4;
      }
      else if (*(_BYTE *)(a2 + 5) == 32)
      {
        v2 = 5;
      }
      else if (*(_BYTE *)(a2 + 6) == 32)
      {
        v2 = 6;
      }
      else if (*(_BYTE *)(a2 + 7) == 32)
      {
        v2 = 7;
      }
      else if (*(_BYTE *)(a2 + 8) == 32)
      {
        v2 = 8;
      }
      else if (*(_BYTE *)(a2 + 9) == 32)
      {
        v2 = 9;
      }
      else if (*(_BYTE *)(a2 + 10) == 32)
      {
        v2 = 10;
      }
      else if (*(_BYTE *)(a2 + 11) == 32)
      {
        v2 = 11;
      }
      else if (*(_BYTE *)(a2 + 12) == 32)
      {
        v2 = 12;
      }
      else if (*(_BYTE *)(a2 + 13) == 32)
      {
        v2 = 13;
      }
      else
      {
        v2 = 14;
        if (*(_BYTE *)(a2 + 14) != 32)
          v2 = 15;
      }
    }
    else
    {
      v2 = 0;
    }
    v3 = *(uint64_t (**)(void))(a1 + 224);
    a2 += v2;
    if (v3)
      return v3();
  }
  fprintf(__stderrp, "libpng warning: %s", (const char *)a2);
  return fputc(10, __stderrp);
}

uint64_t sub_10035EAB0(uint64_t result, int a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;

  v3 = (a2 - 1);
  if (v3 <= 7 && result)
  {
    v4 = result + 32 * v3;
    if (a3 && (LOBYTE(v5) = *a3) != 0)
    {
      v6 = 0;
      do
      {
        v7 = v6 + 1;
        *(_BYTE *)(v4 + v6) = v5;
        if (v6 > 0x1D)
          break;
        v5 = a3[++v6];
      }
      while (v5);
    }
    else
    {
      v7 = 0;
    }
    *(_BYTE *)(v4 + v7) = 0;
  }
  return result;
}

uint64_t sub_10035EB04(uint64_t result, int a2, int a3, int a4)
{
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  char *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE v18[23];
  char v19;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (a4 >= 0)
    v7 = a4;
  else
    v7 = -a4;
  v8 = &v19;
  v19 = 0;
  v9 = 1;
  while (v7 || v6 < v9)
  {
    switch(a3)
    {
      case 1:
        goto LABEL_13;
      case 2:
        v9 = 2;
LABEL_13:
        v10 = v7 / 0xA;
        v4 = a0123456789abcd[v7 % 0xA];
        *--v8 = v4;
        goto LABEL_7;
      case 3:
        goto LABEL_6;
      case 4:
        v9 = 2;
LABEL_6:
        v4 = a0123456789abcd[v7 & 0xF];
        *--v8 = v4;
        v10 = v7 >> 4;
LABEL_7:
        ++v6;
        v7 = v10;
        goto LABEL_8;
      case 5:
        v11 = v7 % 0xA;
        if (v5 || v11)
        {
          v4 = a0123456789abcd[v11];
          *--v8 = v4;
          v5 = 1;
        }
        else
        {
          v5 = 0;
        }
        v9 = 5;
        v7 /= 0xAuLL;
        ++v6;
        v12 = v8 > v18;
        if (a3 == 5)
          goto LABEL_21;
        goto LABEL_8;
      default:
        v7 = 0;
        ++v6;
        v12 = v8 > v18;
        if (a3 != 5)
          goto LABEL_8;
LABEL_21:
        if (v6 != 5 || !v12)
          goto LABEL_8;
        if (v5)
        {
          v4 = 46;
LABEL_25:
          *--v8 = v4;
          goto LABEL_27;
        }
        v5 = 0;
        if (!v7)
        {
          v4 = 48;
          goto LABEL_25;
        }
LABEL_27:
        v6 = 5;
LABEL_8:
        if (v8 <= v18)
          goto LABEL_29;
        break;
    }
  }
LABEL_29:
  if (a4 < 0 && v8 > v18)
  {
    v4 = 45;
    *--v8 = 45;
  }
  v13 = (a2 - 1);
  if (v13 <= 7 && result)
  {
    v14 = 0;
    v15 = result + 32 * v13;
    if (v8 && v4)
    {
      v16 = 0;
      v17 = v8 + 1;
      do
      {
        v14 = v16 + 1;
        *(_BYTE *)(v15 + v16) = v4;
        if (v16 > 0x1D)
          break;
        v4 = v17[v16++];
      }
      while (v4);
    }
    *(_BYTE *)(v15 + v14) = 0;
  }
  return result;
}

uint64_t sub_10035ECEC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  _BYTE v13[192];

  v3 = 0;
  if (a2)
  {
    while (1)
    {
      v5 = *a3;
      if (v5 != 64)
        break;
      v4 = a3 + 1;
      v5 = a3[1];
      if (a3[1])
      {
        v6 = 0;
        v7 = a2 - 32;
        do
        {
          v8 = v6 + 1;
          v7 += 32;
          if (v6 == 9)
            break;
          v9 = a123456789[v6++];
        }
        while (v9 != v5);
        if (((v8 - 1) & 0xFFFFFFF8) != 0)
        {
LABEL_4:
          a3 = v4 + 1;
          v13[v3++] = v5;
          if (v3 >= 0xBF)
            goto LABEL_24;
        }
        else
        {
          v10 = 0;
          while (*(_BYTE *)(v7 + v10) && v10 <= 0x1F)
          {
            v13[v3 + v10] = *(_BYTE *)(v7 + v10);
            ++v10;
            if (v3 + v10 == 191)
            {
              v3 = 191;
              goto LABEL_24;
            }
          }
          v3 += v10;
          a3 += 2;
          if (v3 >= 0xBF)
            goto LABEL_24;
        }
      }
      else
      {
        ++a3;
        v13[v3++] = 64;
        if (v3 >= 0xBF)
          goto LABEL_24;
      }
    }
    v4 = a3;
    if (!*a3)
      goto LABEL_24;
    goto LABEL_4;
  }
  do
  {
    if (!a3[v3])
      break;
    v13[v3] = a3[v3];
    ++v3;
  }
  while (v3 != 191);
LABEL_24:
  v13[v3] = 0;
  return sub_10035E924(a1, (uint64_t)v13);
}

uint64_t sub_10035EE60(uint64_t a1, const char *a2)
{
  int v3;
  unint64_t v4;
  _BYTE v6[214];

  v3 = *(_DWORD *)(a1 + 292);
  if ((*(_BYTE *)(a1 + 298) & 0x10) == 0)
  {
    if ((v3 & 0x8000) == 0 || !*(_DWORD *)(a1 + 528))
      sub_10035E6F4(a1, a2);
    sub_10035EFF0(a1, a2);
  }
  if ((v3 & 0x8000) == 0)
    return sub_10035E924(a1, (uint64_t)a2);
  v4 = *(unsigned int *)(a1 + 528);
  if (!(_DWORD)v4)
    return sub_10035E924(a1, (uint64_t)a2);
  sub_10035F064(v4, v6, (uint64_t)a2);
  return sub_10035E924(a1, (uint64_t)v6);
}

uint64_t sub_10035EF34(uint64_t a1, const char *a2)
{
  _BYTE v4[214];

  if (a1)
  {
    sub_10035F064(*(unsigned int *)(a1 + 528), v4, (uint64_t)a2);
    return sub_10035E924(a1, (uint64_t)v4);
  }
  else
  {
    fprintf(__stderrp, "libpng warning: %s", a2);
    return fputc(10, __stderrp);
  }
}

void sub_10035EFF0(uint64_t a1, const char *a2)
{
  char v3[214];

  if (!a1)
    sub_10035E6F4(0, a2);
  sub_10035F064(*(unsigned int *)(a1 + 528), v3, (uint64_t)a2);
  sub_10035E6F4(a1, v3);
}

uint64_t sub_10035F02C(uint64_t a1, const char *a2)
{
  if ((*(_BYTE *)(a1 + 298) & 0x20) == 0)
    sub_10035E6F4(a1, a2);
  return sub_10035E924(a1, (uint64_t)a2);
}

uint64_t sub_10035F048(uint64_t a1, const char *a2)
{
  if ((*(_BYTE *)(a1 + 298) & 0x40) == 0)
    sub_10035E6F4(a1, a2);
  return sub_10035E924(a1, (uint64_t)a2);
}

unint64_t sub_10035F064(unint64_t result, _BYTE *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;

  v3 = BYTE3(result);
  if (BYTE3(result) - 123 >= 0xFFFFFFC6 && BYTE3(result) - 91 > 5u)
  {
    v5 = 0;
  }
  else
  {
    a2[1] = byte_1003C500A[(unint64_t)result >> 28];
    a2[2] = byte_1003C500A[(result >> 24) & 0xF];
    a2[3] = 93;
    v5 = 3;
    LOBYTE(v3) = 91;
  }
  *a2 = v3;
  v6 = v5;
  v7 = v5 + 1;
  if (BYTE2(result) - 123 < 0xFFFFFFC6 || BYTE2(result) - 91 < 6)
  {
    a2[v7] = 91;
    v11 = &a2[v6];
    v11[2] = byte_1003C500A[(result >> 20) & 0xF];
    v11[3] = byte_1003C500A[(result >> 16) & 0xF];
    a2[v6 | 4] = 93;
    v8 = v6 | 4;
    v9 = v8 + 1;
    v10 = BYTE1(result);
    if (BYTE1(result) - 123 < 0xFFFFFFC6)
      goto LABEL_15;
  }
  else
  {
    a2[v7] = BYTE2(result);
    v8 = v7;
    v9 = v7 + 1;
    v10 = BYTE1(result);
    if (BYTE1(result) - 123 < 0xFFFFFFC6)
      goto LABEL_15;
  }
  if ((v10 - 91) >= 6)
  {
    a2[v9] = BYTE1(result);
    v12 = v9;
    v13 = v9 + 1;
    v14 = result;
    if (result - 123 < 0xFFFFFFC6)
      goto LABEL_22;
    goto LABEL_16;
  }
LABEL_15:
  a2[v9] = 91;
  v15 = &a2[v8];
  v15[2] = byte_1003C500A[(unsigned __int16)result >> 12];
  v15[3] = byte_1003C500A[(result >> 8) & 0xF];
  a2[v8 + 4] = 93;
  v12 = (v8 + 4);
  v13 = v12 + 1;
  v14 = result;
  if (result - 123 < 0xFFFFFFC6)
    goto LABEL_22;
LABEL_16:
  if ((v14 - 91) >= 6)
  {
    a2[v13] = result;
    v16 = v13;
    v17 = v13 + 1;
    if (a3)
      goto LABEL_18;
LABEL_23:
    a2[v17] = 0;
    return result;
  }
LABEL_22:
  a2[v13] = 91;
  v21 = &a2[v12];
  v21[2] = byte_1003C500A[result >> 4];
  LODWORD(v13) = v12 + 4;
  v21[3] = byte_1003C500A[result & 0xF];
  a2[v12 + 4] = 93;
  v16 = (v12 + 4);
  v17 = v16 + 1;
  if (!a3)
    goto LABEL_23;
LABEL_18:
  v18 = 0;
  a2[v17] = 58;
  a2[v16 + 2] = 32;
  v19 = v16 + 3;
  v20 = v13 + 198;
  while (*(_BYTE *)(a3 + v18))
  {
    a2[v19 + v18] = *(_BYTE *)(a3 + v18);
    if (++v18 == 195)
    {
      a2[v20] = 0;
      return result;
    }
  }
  a2[(int)v19 + (int)v18] = 0;
  return result;
}

uint64_t sub_10035F2A4(uint64_t a1, const char *a2)
{
  _BYTE v4[214];

  if ((*(_BYTE *)(a1 + 298) & 0x10) == 0)
    sub_10035EFF0(a1, a2);
  sub_10035F064(*(unsigned int *)(a1 + 528), v4, (uint64_t)a2);
  return sub_10035E924(a1, (uint64_t)v4);
}

uint64_t sub_10035F324(uint64_t a1, const char *a2, int a3)
{
  int v4;
  _BYTE v6[214];

  if ((*(_BYTE *)(a1 + 293) & 0x80) == 0)
  {
    v4 = *(_DWORD *)(a1 + 296);
    if (a3 <= 0)
    {
      if ((v4 & 0x200000) != 0)
        return sub_10035E924(a1, (uint64_t)a2);
    }
    else if ((v4 & 0x400000) != 0)
    {
      return sub_10035E924(a1, (uint64_t)a2);
    }
    sub_10035E6F4(a1, a2);
  }
  if (a3 > 1 && (*(_BYTE *)(a1 + 298) & 0x10) == 0)
    sub_10035EFF0(a1, a2);
  sub_10035F064(*(unsigned int *)(a1 + 528), v6, (uint64_t)a2);
  return sub_10035E924(a1, (uint64_t)v6);
}

void sub_10035F408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _OWORD v3[13];
  char v4;

  qmemcpy(v3, "fixed point overflow in ", 24);
  if (a2)
  {
    v2 = 0;
    while (*(_BYTE *)(a2 + v2))
    {
      *((_BYTE *)&v3[1] + v2 + 8) = *(_BYTE *)(a2 + v2);
      if ((_DWORD)++v2 == 195)
      {
        v4 = 0;
        sub_10035E6F4(a1, (const char *)v3);
      }
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  *((_BYTE *)&v3[1] + v2 + 8) = 0;
  sub_10035E6F4(a1, (const char *)v3);
}

_QWORD *sub_10035F484(_QWORD *result, uint64_t a2, size_t __size)
{
  _QWORD *v5;
  uint64_t v6;

  if (result)
  {
    v5 = result;
    result = (_QWORD *)result[25];
    if (result)
    {
      v6 = v5[26];
      if (v6)
      {
        if (v6 == __size)
          goto LABEL_14;
      }
      else
      {
        if (result != v5)
          sub_10035E6F4((uint64_t)v5, "Libpng jmp_buf still allocated");
        if (__size == 192)
          goto LABEL_14;
      }
      sub_10035E924((uint64_t)v5, (uint64_t)"Application jmp_buf size changed");
      return 0;
    }
    v5[26] = 0;
    if (__size > 0xC0)
    {
      result = sub_10035FAC4(v5, __size);
      v5[25] = result;
      if (result)
      {
        v5[26] = __size;
LABEL_14:
        v5[24] = a2;
      }
    }
    else
    {
      v5[24] = a2;
      v5[25] = v5;
      return v5;
    }
  }
  return result;
}

void sub_10035F558(_QWORD *a1)
{
  _QWORD *v2;
  _OWORD v4[12];

  if (a1)
  {
    v2 = (_QWORD *)a1[25];
    if (v2)
    {
      if (v2 != a1 && a1[26] != 0)
      {
        memset(v4, 0, sizeof(v4));
        if (!setjmp((int *)v4))
        {
          a1[26] = 0;
          a1[24] = &_longjmp;
          a1[25] = v4;
          sub_10035F814((uint64_t)a1, v2);
        }
      }
    }
    a1[24] = 0;
    a1[25] = 0;
    a1[26] = 0;
  }
}

void sub_10035F620(uint64_t a1)
{
  void (*v1)(void);

  if (a1)
  {
    v1 = *(void (**)(void))(a1 + 192);
    if (v1)
    {
      if (*(_QWORD *)(a1 + 200))
        v1();
    }
  }
  abort();
}

_QWORD *sub_10035F644(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    result[28] = a4;
    result[29] = a2;
    result[27] = a3;
  }
  return result;
}

uint64_t sub_10035F654(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, int *a7, _DWORD *a8, _DWORD *a9)
{
  uint64_t v9;
  int v10;

  v9 = 0;
  if (a1 && a2)
  {
    if (a3)
      *a3 = *(_DWORD *)a2;
    if (a4)
      *a4 = *(_DWORD *)(a2 + 4);
    if (a5)
      *a5 = *(unsigned __int8 *)(a2 + 36);
    if (a6)
      *a6 = *(unsigned __int8 *)(a2 + 37);
    if (a8)
      *a8 = *(unsigned __int8 *)(a2 + 38);
    if (a9)
      *a9 = *(unsigned __int8 *)(a2 + 39);
    v10 = *(unsigned __int8 *)(a2 + 40);
    if (a7)
      *a7 = v10;
    sub_10035C8E0(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int8 *)(a2 + 36), *(unsigned __int8 *)(a2 + 37), v10, *(unsigned __int8 *)(a2 + 38), *(unsigned __int8 *)(a2 + 39));
    return 1;
  }
  return v9;
}

uint64_t sub_10035F6EC(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t result;

  result = 0;
  if (a1 && a2)
  {
    if ((*(_BYTE *)(a2 + 8) & 0x10) == 0)
      return 0;
    if (*(_BYTE *)(a2 + 37) == 3)
    {
      if (a3)
      {
        *a3 = *(_QWORD *)(a2 + 184);
        result = 16;
        if (!a5)
          goto LABEL_16;
      }
      else
      {
        result = 0;
        if (!a5)
          goto LABEL_16;
      }
      *a5 = a2 + 192;
      goto LABEL_16;
    }
    if (a5)
    {
      *a5 = a2 + 192;
      result = 16;
      if (!a3)
      {
LABEL_16:
        if (a4)
        {
          *a4 = *(unsigned __int16 *)(a2 + 34);
          return 16;
        }
        return result;
      }
    }
    else
    {
      result = 0;
      if (!a3)
        goto LABEL_16;
    }
    *a3 = 0;
    goto LABEL_16;
  }
  return result;
}

void sub_10035F77C(void *__src)
{
  _QWORD __dst[156];

  if (__src)
  {
    memcpy(__dst, __src, sizeof(__dst));
    bzero(__src, 0x4E0uLL);
    if (__dst[125])
      ((void (*)(_QWORD *, void *))__dst[125])(__dst, __src);
    else
      free(__src);
    sub_10035F558(__dst);
  }
}

void sub_10035F814(uint64_t a1, void *a2)
{
  void (*v2)(void);

  if (a1 && a2)
  {
    v2 = *(void (**)(void))(a1 + 1000);
    if (v2)
      v2();
    else
      free(a2);
  }
}

void *sub_10035F834(uint64_t a1, size_t __size)
{
  uint64_t (*v4)(uint64_t, size_t);
  void *v5;

  if (a1)
  {
    if (__size)
    {
      v4 = *(uint64_t (**)(uint64_t, size_t))(a1 + 992);
      if (v4)
      {
        v5 = (void *)v4(a1, __size);
        if (v5)
        {
LABEL_5:
          bzero(v5, __size);
          return v5;
        }
      }
      else
      {
        v5 = malloc(__size);
        if (v5)
          goto LABEL_5;
      }
    }
    sub_10035E6F4(a1, "Out of memory");
  }
  return 0;
}

_QWORD *sub_10035F8C8(_QWORD *result, size_t __size)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);

  if (result)
  {
    v2 = (uint64_t)result;
    if (!__size)
      goto LABEL_7;
    v3 = (uint64_t (*)(_QWORD *))result[124];
    if (v3)
    {
      result = (_QWORD *)v3(result);
      if (result)
        return result;
LABEL_7:
      sub_10035E6F4(v2, "Out of memory");
    }
    result = malloc(__size);
    if (!result)
      goto LABEL_7;
  }
  return result;
}

void *sub_10035F91C(uint64_t a1, size_t __size)
{
  uint64_t (*v2)(void);

  if (!__size)
    return 0;
  if (a1)
  {
    v2 = *(uint64_t (**)(void))(a1 + 992);
    if (v2)
      return (void *)v2();
  }
  return malloc(__size);
}

void *sub_10035F940(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3;
  size_t v4;
  uint64_t (*v5)(void);

  if ((int)a2 < 1 || !a3)
    sub_10035E6F4(a1, "internal error: array alloc");
  v3 = a2;
  if (!is_mul_ok(a3, a2))
    return 0;
  v4 = a2 * a3;
  if (!(v3 * a3))
    return 0;
  if (a1)
  {
    v5 = *(uint64_t (**)(void))(a1 + 992);
    if (v5)
      return (void *)v5();
  }
  return malloc(v4);
}

char *sub_10035F9A4(uint64_t a1, const void *a2, unsigned int a3, unsigned int a4, unint64_t a5)
{
  char *v9;
  unint64_t v11;
  size_t v12;
  uint64_t (*v13)(void);
  size_t v14;

  if ((a3 & 0x80000000) != 0 || (int)a4 < 1 || !a5 || !a2 && a3)
    sub_10035E6F4(a1, "internal error: array realloc");
  if ((a3 ^ 0x7FFFFFFF) < a4)
    return 0;
  v9 = 0;
  v11 = a4 + a3;
  if (!is_mul_ok(a5, v11))
    return v9;
  v12 = v11 * a5;
  if (!(v11 * a5))
    return 0;
  if (a1 && (v13 = *(uint64_t (**)(void))(a1 + 992)) != 0)
  {
    v9 = (char *)v13();
    if (!v9)
      return v9;
  }
  else
  {
    v9 = (char *)malloc(v12);
    if (!v9)
      return v9;
  }
  if (a3)
  {
    v14 = a3 * a5;
    memcpy(v9, a2, v14);
  }
  else
  {
    v14 = 0;
  }
  bzero(&v9[v14], a4 * a5);
  return v9;
}

_QWORD *sub_10035FAC4(_QWORD *result, size_t __size)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);

  if (result)
  {
    v2 = (uint64_t)result;
    if (!__size)
      goto LABEL_5;
    v3 = (uint64_t (*)(_QWORD *))result[124];
    if (v3)
    {
      result = (_QWORD *)v3(result);
      if (result)
        return result;
      goto LABEL_5;
    }
    result = malloc(__size);
    if (!result)
    {
LABEL_5:
      sub_10035E924(v2, (uint64_t)"Out of memory");
      return 0;
    }
  }
  return result;
}

_QWORD *sub_10035FB20(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    result[123] = a2;
    result[124] = a3;
    result[125] = a4;
  }
  return result;
}

_QWORD *sub_10035FB34(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = sub_10035A600(a1, a2, a3, a4, 0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 73) = 0x8000;
    *((_DWORD *)v4 + 280) = 0x2000;
    *((_DWORD *)v4 + 74) |= 0x300000u;
    sub_100360CF0(v4, 0, 0);
  }
  return v5;
}

void sub_10035FB94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int i;
  int v6;
  int v7;
  int v8;
  int v9;

  if (!a1 || !a2)
    return;
  sub_100364F38(a1, a2);
  v4 = sub_100364FFC(a1);
  for (i = *(_DWORD *)(a1 + 528); i != 1229209940; i = *(_DWORD *)(a1 + 528))
  {
    v8 = *(_DWORD *)(a1 + 292);
    if ((v8 & 4) != 0)
      *(_DWORD *)(a1 + 292) = v8 | 0x2008;
    if (i == 1229278788)
    {
      sub_1003657C0(a1, a2, v4);
    }
    else if (i == 1229472850)
    {
      sub_10036537C(a1, a2, v4);
    }
    else
    {
      v9 = sub_10035AD30(a1, i);
      if (v9)
      {
        sub_10036894C(a1, a2, v4, v9);
        if (i == 1347179589)
          *(_DWORD *)(a1 + 292) |= 2u;
        goto LABEL_15;
      }
      if (i <= 1883455819)
      {
        if (i <= 1732332864)
        {
          if (i > 1665684044)
          {
            if (i == 1665684045)
            {
              sub_100365B90(a1, a2, v4);
            }
            else
            {
              if (i != 1700284774)
              {
LABEL_69:
                sub_10036894C(a1, a2, v4, 0);
                goto LABEL_15;
              }
              sub_1003670A4(a1, a2, v4);
            }
          }
          else if (i == 1347179589)
          {
            sub_1003654F0(a1, a2, v4);
          }
          else
          {
            if (i != 1649100612)
              goto LABEL_69;
            sub_100366E6C(a1, a2, v4);
          }
        }
        else if (i <= 1766015823)
        {
          if (i == 1732332865)
          {
            sub_100365830(a1, a2, v4);
          }
          else
          {
            if (i != 1749635924)
              goto LABEL_69;
            sub_1003672B4(a1, a2, v4);
          }
        }
        else
        {
          switch(i)
          {
            case 1766015824:
              sub_100365F0C(a1, a2, v4);
              break;
            case 1767135348:
              sub_100368624(a1, a2, v4);
              break;
            case 1866876531:
              sub_100367608(a1, a2, v4);
              break;
            default:
              goto LABEL_69;
          }
        }
      }
      else if (i > 1934772033)
      {
        if (i <= 1950960964)
        {
          if (i == 1934772034)
          {
            sub_100365DC8(a1, a2, v4);
          }
          else
          {
            if (i != 1950701684)
              goto LABEL_69;
            sub_100367FB0(a1, a2, v4);
          }
        }
        else
        {
          switch(i)
          {
            case 1950960965:
              sub_100367E8C(a1, a2, v4);
              break;
            case 1951551059:
              sub_100366B64(a1, a2, v4);
              break;
            case 2052348020:
              sub_1003681B0(a1, a2, v4);
              break;
            default:
              goto LABEL_69;
          }
        }
      }
      else if (i <= 1933723987)
      {
        if (i == 1883455820)
        {
          sub_100367844(a1, a2, v4);
        }
        else
        {
          if (i != 1883789683)
            goto LABEL_69;
          sub_100367474(a1, a2, v4);
        }
      }
      else
      {
        switch(i)
        {
          case 1933723988:
            sub_100365938(a1, a2, v4);
            break;
          case 1933787468:
            sub_100367BE0(a1, a2, v4);
            break;
          case 1934642260:
            sub_100366830(a1, a2, v4);
            break;
          default:
            goto LABEL_69;
        }
      }
    }
LABEL_15:
    v4 = sub_100364FFC(a1);
  }
  v6 = *(_DWORD *)(a1 + 292);
  if ((v6 & 1) == 0)
    sub_10035EFF0(a1, "Missing IHDR before IDAT");
  if ((v6 & 2) == 0 && *(_BYTE *)(a1 + 607) == 3)
    sub_10035EFF0(a1, "Missing PLTE before IDAT");
  if ((v6 & 8) != 0)
  {
    sub_10035F2A4(a1, "Too many IDATs found");
    v6 = *(_DWORD *)(a1 + 292);
  }
  *(_DWORD *)(a1 + 292) = v6 | 4;
  v7 = sub_10035AD30(a1, 0x49444154u);
  if (v7)
  {
    sub_10036894C(a1, a2, v4, v7);
    LODWORD(v4) = 0;
  }
  *(_DWORD *)(a1 + 576) = v4;
}

uint64_t sub_100360068(uint64_t result, unsigned int *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = result;
    if ((*(_BYTE *)(result + 296) & 0x40) != 0)
    {
      return sub_10035F048(result, "png_read_update_info/png_start_read_image: duplicate call");
    }
    else
    {
      sub_100369F04(result);
      return sub_100361CA0(v2, a2);
    }
  }
  return result;
}

void sub_1003600C8(uint64_t a1, char *a2, char *__dst)
{
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  size_t v9;
  _BYTE *v10;
  unsigned int v11;
  int32x4_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int8x16_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  char v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  char *v32;
  int v33;
  unsigned int v34;
  void (*v35)(uint64_t, _QWORD, _QWORD);
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 296) & 0x40) == 0)
      sub_100369F04(a1);
    v36 = 0;
    v37 = 0;
    LODWORD(v36) = *(_DWORD *)(a1 + 520);
    v6 = *(unsigned __int8 *)(a1 + 610);
    v7 = (v6 * v36 + 7) >> 3;
    if (v6 >= 8)
      v7 = (v6 >> 3) * (unint64_t)v36;
    v8 = *(_WORD *)(a1 + 607);
    v37 = v7;
    v38 = v8;
    BYTE2(v38) = *(_BYTE *)(a1 + 611);
    BYTE3(v38) = v6;
    if (!*(_BYTE *)(a1 + 604) || (*(_BYTE *)(a1 + 300) & 2) == 0)
    {
LABEL_8:
      if ((*(_BYTE *)(a1 + 292) & 4) == 0)
        sub_10035E6F4(a1, "Invalid attempt to read row data");
      **(_BYTE **)(a1 + 544) = -1;
      v9 = v37 + 1;
      sub_10036973C(a1, *(_QWORD *)(a1 + 544), v37 + 1);
      v10 = *(_BYTE **)(a1 + 544);
      v11 = *v10;
      if (*v10)
      {
        if (v11 > 4)
          sub_10035E6F4(a1, "bad adaptive filter value");
        sub_100369674(a1, (uint64_t)&v36, (uint64_t)(v10 + 1), *(_QWORD *)(a1 + 536) + 1, v11);
        v10 = *(_BYTE **)(a1 + 544);
        v9 = v37 + 1;
      }
      memcpy(*(void **)(a1 + 536), v10, v9);
      if ((*(_BYTE *)(a1 + 976) & 4) != 0 && *(_BYTE *)(a1 + 980) == 64 && (v38 & 2) != 0)
      {
        v18 = *(_QWORD *)(a1 + 544);
        v19 = v36;
        if (BYTE1(v38) == 16)
        {
          if (v38 == 2)
          {
            v22 = 6;
          }
          else
          {
            if (v38 != 6)
              goto LABEL_56;
            v22 = 8;
          }
          if ((_DWORD)v36)
          {
            v25 = (unsigned __int16 *)(v18 + 3);
            do
            {
              v26 = __rev16(*v25);
              v27 = v26 + (bswap32(*(v25 - 1)) >> 16);
              v28 = v26 + (bswap32(v25[1]) >> 16);
              *((_BYTE *)v25 - 2) = BYTE1(v27);
              *((_BYTE *)v25 - 1) = v27;
              *((_BYTE *)v25 + 2) = BYTE1(v28);
              *((_BYTE *)v25 + 3) = v28;
              v25 = (unsigned __int16 *)((char *)v25 + v22);
              --v19;
            }
            while (v19);
          }
        }
        else
        {
          if (BYTE1(v38) != 8)
            goto LABEL_56;
          if (v38 == 2)
          {
            v20 = 3;
          }
          else
          {
            if (v38 != 6)
              goto LABEL_56;
            v20 = 4;
          }
          if ((_DWORD)v36)
          {
            v23 = (_BYTE *)(v18 + 3);
            do
            {
              v24 = *(v23 - 1);
              *(v23 - 2) += v24;
              *v23 += v24;
              v23 += v20;
              --v19;
            }
            while (v19);
          }
        }
      }
LABEL_56:
      if (*(_DWORD *)(a1 + 300))
        sub_100361EE4(a1, (unsigned int *)&v36, v12, v13, v14, v15, v16, v17);
      v29 = BYTE3(v38);
      if (*(_BYTE *)(a1 + 615))
      {
        if (*(unsigned __int8 *)(a1 + 615) != BYTE3(v38))
          sub_10035E6F4(a1, "internal sequential row size calculation error");
      }
      else
      {
        *(_BYTE *)(a1 + 615) = BYTE3(v38);
        if (v29 > *(unsigned __int8 *)(a1 + 614))
          sub_10035E6F4(a1, "sequential row overflow");
      }
      if (*(_BYTE *)(a1 + 604) && (v30 = *(_DWORD *)(a1 + 300), (v30 & 2) != 0))
      {
        v34 = *(unsigned __int8 *)(a1 + 605);
        if (v34 <= 5)
          sub_1003692B0((uint64_t)&v36, *(_QWORD *)(a1 + 544) + 1, v34, v30);
        if (__dst)
          sub_100368C14(a1, __dst, 1);
        if (!a2)
          goto LABEL_75;
        v31 = a1;
        v32 = a2;
        v33 = 0;
      }
      else
      {
        if (a2)
          sub_100368C14(a1, a2, -1);
        if (!__dst)
          goto LABEL_75;
        v31 = a1;
        v32 = __dst;
        v33 = -1;
      }
      sub_100368C14(v31, v32, v33);
LABEL_75:
      sub_100369ACC(a1);
      v35 = *(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 760);
      if (v35)
        v35(a1, *(unsigned int *)(a1 + 524), *(unsigned __int8 *)(a1 + 605));
      return;
    }
    v21 = *(_DWORD *)(a1 + 524);
    switch(*(_BYTE *)(a1 + 605))
    {
      case 0:
        if ((v21 & 7) == 0)
          goto LABEL_8;
        goto LABEL_41;
      case 1:
        if ((v21 & 7) == 0 && *(_DWORD *)(a1 + 496) > 4u)
          goto LABEL_8;
        goto LABEL_41;
      case 2:
        if ((*(_DWORD *)(a1 + 524) & 7) == 4)
          goto LABEL_8;
        if (!__dst || (v21 & 4) == 0)
          break;
        goto LABEL_42;
      case 3:
        if ((v21 & 3) == 0 && *(_DWORD *)(a1 + 496) > 2u)
          goto LABEL_8;
        goto LABEL_41;
      case 4:
        if ((*(_DWORD *)(a1 + 524) & 3) == 2)
          goto LABEL_8;
        if (!__dst || (v21 & 2) == 0)
          break;
        goto LABEL_42;
      case 5:
        if ((v21 & 1) == 0 && *(_DWORD *)(a1 + 496) > 1u)
          goto LABEL_8;
LABEL_41:
        if (__dst)
LABEL_42:
          sub_100368C14(a1, __dst, 1);
        break;
      default:
        if ((v21 & 1) != 0)
          goto LABEL_8;
        break;
    }
    sub_100369ACC(a1);
  }
}

void sub_1003604B4(uint64_t a1, char **a2)
{
  int v4;
  int v5;
  int i;
  int v7;
  char **v8;
  char *v9;

  if (!a1)
    return;
  if ((*(_BYTE *)(a1 + 296) & 0x40) == 0)
  {
    v4 = sub_10036BF14(a1);
    if ((*(_BYTE *)(a1 + 296) & 0x40) != 0)
    {
      sub_10035F048(a1, "png_start_read_image/png_read_update_info: duplicate call");
      if (v4 < 1)
        return;
    }
    else
    {
      sub_100369F04(a1);
      if (v4 < 1)
        return;
    }
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 604) && (*(_BYTE *)(a1 + 300) & 2) == 0)
  {
    sub_10035E924(a1, (uint64_t)"Interlace handling should be turned on when using png_read_image");
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 500);
  }
  v4 = sub_10036BF14(a1);
  if (v4 >= 1)
  {
LABEL_12:
    v5 = *(_DWORD *)(a1 + 500);
    if (v5)
    {
      for (i = 0; i != v4; ++i)
      {
        v7 = v5;
        v8 = a2;
        do
        {
          v9 = *v8++;
          sub_1003600C8(a1, v9, 0);
          --v7;
        }
        while (v7);
      }
    }
  }
}

void sub_1003605B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;

  if (a1)
  {
    if (sub_10035AD30(a1, 0x49444154u))
    {
      if (*(_BYTE *)(a1 + 607) != 3)
        goto LABEL_8;
    }
    else
    {
      sub_100369A44(a1);
      if (*(_BYTE *)(a1 + 607) != 3)
        goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 596) > (int)*(unsigned __int16 *)(a1 + 592))
      sub_10035EE60(a1, "Read palette index exceeding num_palette");
LABEL_8:
    if (a2)
    {
      while (1)
      {
        v4 = sub_100364FFC(a1);
        v5 = *(_DWORD *)(a1 + 528);
        if (v5 == 1229209940)
          break;
        *(_DWORD *)(a1 + 292) |= 0x2000u;
        if (v5 != 1229472850)
        {
          if (v5 == 1229278788)
          {
            sub_1003657C0(a1, a2, v4);
            goto LABEL_11;
          }
          v12 = sub_10035AD30(a1, v5);
          if (v12)
          {
            sub_10036894C(a1, a2, v4, v12);
            if (v5 == 1347179589)
              *(_DWORD *)(a1 + 292) |= 2u;
            goto LABEL_11;
          }
LABEL_26:
          if (v5 > 1883455819)
          {
            if (v5 > 1934772033)
            {
              if (v5 <= 1950960964)
              {
                if (v5 == 1934772034)
                {
                  sub_100365DC8(a1, a2, v4);
                  goto LABEL_11;
                }
                if (v5 == 1950701684)
                {
                  sub_100367FB0(a1, a2, v4);
                  goto LABEL_11;
                }
              }
              else
              {
                switch(v5)
                {
                  case 1950960965:
                    sub_100367E8C(a1, a2, v4);
                    goto LABEL_11;
                  case 1951551059:
                    sub_100366B64(a1, a2, v4);
                    goto LABEL_11;
                  case 2052348020:
                    sub_1003681B0(a1, a2, v4);
                    goto LABEL_11;
                }
              }
            }
            else if (v5 <= 1933723987)
            {
              if (v5 == 1883455820)
              {
                sub_100367844(a1, a2, v4);
                goto LABEL_11;
              }
              if (v5 == 1883789683)
              {
                sub_100367474(a1, a2, v4);
                goto LABEL_11;
              }
            }
            else
            {
              switch(v5)
              {
                case 1933723988:
                  sub_100365938(a1, a2, v4);
                  goto LABEL_11;
                case 1933787468:
                  sub_100367BE0(a1, a2, v4);
                  goto LABEL_11;
                case 1934642260:
                  sub_100366830(a1, a2, v4);
                  goto LABEL_11;
              }
            }
          }
          else if (v5 > 1732332864)
          {
            if (v5 <= 1766015823)
            {
              if (v5 == 1732332865)
              {
                sub_100365830(a1, a2, v4);
                goto LABEL_11;
              }
              if (v5 == 1749635924)
              {
                sub_1003672B4(a1, a2, v4);
                goto LABEL_11;
              }
            }
            else
            {
              switch(v5)
              {
                case 1766015824:
                  sub_100365F0C(a1, a2, v4);
                  goto LABEL_11;
                case 1767135348:
                  sub_100368624(a1, a2, v4);
                  goto LABEL_11;
                case 1866876531:
                  sub_100367608(a1, a2, v4);
                  goto LABEL_11;
              }
            }
          }
          else if (v5 <= 1649100611)
          {
            if (v5 == 1229209940)
            {
              if ((_DWORD)v4 && (*(_BYTE *)(a1 + 296) & 8) == 0 || (*(_BYTE *)(a1 + 293) & 0x20) != 0)
                sub_10035EE60(a1, "..Too many IDATs found");
              sub_1003651F0(a1, v4);
              goto LABEL_11;
            }
            if (v5 == 1347179589)
            {
              sub_1003654F0(a1, a2, v4);
              goto LABEL_11;
            }
          }
          else
          {
            switch(v5)
            {
              case 1649100612:
                sub_100366E6C(a1, a2, v4);
                goto LABEL_11;
              case 1665684045:
                sub_100365B90(a1, a2, v4);
                goto LABEL_11;
              case 1700284774:
                sub_1003670A4(a1, a2, v4);
                goto LABEL_11;
            }
          }
          v8 = a1;
          v9 = a2;
          v10 = v4;
          v11 = 0;
LABEL_19:
          sub_10036894C(v8, v9, v10, v11);
          goto LABEL_11;
        }
        sub_10036537C(a1, a2, v4);
LABEL_11:
        if ((*(_BYTE *)(a1 + 292) & 0x10) != 0)
          return;
      }
      v6 = sub_10035AD30(a1, *(_DWORD *)(a1 + 528));
      if (!v6)
        goto LABEL_26;
      v7 = v6;
      if ((_DWORD)v4 && (*(_BYTE *)(a1 + 296) & 8) == 0 || (*(_BYTE *)(a1 + 293) & 0x20) != 0)
        sub_10035EE60(a1, ".Too many IDATs found");
      v8 = a1;
      v9 = a2;
      v10 = v4;
      v11 = v7;
      goto LABEL_19;
    }
    do
    {
      v13 = sub_100364FFC(a1);
      v14 = *(_DWORD *)(a1 + 528);
      if (v14 == 1229209940)
        goto LABEL_79;
      *(_DWORD *)(a1 + 292) |= 0x2000u;
      if (v14 == 1229278788)
      {
        sub_1003657C0(a1, 0, v13);
        continue;
      }
      if (v14 != 1229472850)
LABEL_79:
        sub_1003651F0(a1, v13);
      else
        sub_10036537C(a1, 0, v13);
    }
    while ((*(_BYTE *)(a1 + 292) & 0x10) == 0);
  }
}

void sub_100360B48(uint64_t *a1, void **a2, void **a3)
{
  uint64_t v4;
  int v6;
  unsigned int v7;

  if (a1)
  {
    v4 = *a1;
    if (*a1)
    {
      sub_10035A7F0(*a1, a3);
      sub_10035A7F0(v4, a2);
      *a1 = 0;
      sub_10035CF00(v4);
      sub_10035F814(v4, *(void **)(v4 + 1008));
      *(_QWORD *)(v4 + 1008) = 0;
      sub_10035F814(v4, *(void **)(v4 + 1128));
      *(_QWORD *)(v4 + 1128) = 0;
      sub_10035F814(v4, *(void **)(v4 + 1104));
      *(_QWORD *)(v4 + 1104) = 0;
      sub_10035F814(v4, *(void **)(v4 + 880));
      *(_QWORD *)(v4 + 880) = 0;
      sub_10035F814(v4, *(void **)(v4 + 888));
      *(_QWORD *)(v4 + 888) = 0;
      v6 = *(_DWORD *)(v4 + 932);
      if ((v6 & 0x1000) != 0)
      {
        sub_10035A354(v4, *(void **)(v4 + 584));
        *(_QWORD *)(v4 + 584) = 0;
        v6 = *(_DWORD *)(v4 + 932);
      }
      v7 = v6 & 0xFFFFEFFF;
      *(_DWORD *)(v4 + 932) = v6 & 0xFFFFEFFF;
      if ((v6 & 0x2000) != 0)
      {
        sub_10035F814(v4, *(void **)(v4 + 736));
        *(_QWORD *)(v4 + 736) = 0;
        v7 = *(_DWORD *)(v4 + 932);
      }
      *(_DWORD *)(v4 + 932) = v7 & 0xFFFFDFFF;
      inflateEnd((z_streamp)(v4 + 312));
      sub_10035F814(v4, *(void **)(v4 + 808));
      *(_QWORD *)(v4 + 808) = 0;
      sub_10035F814(v4, *(void **)(v4 + 1072));
      *(_QWORD *)(v4 + 1072) = 0;
      sub_10035F814(v4, *(void **)(v4 + 960));
      *(_QWORD *)(v4 + 960) = 0;
      sub_10035F77C((void *)v4);
    }
  }
}

uint64_t sub_100360C80(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(a1 + 248);
  if (!v1)
    sub_10035E6F4(a1, "Call to NULL read function");
  return v1();
}

size_t sub_100360CA4(size_t result, void *__ptr, size_t a3)
{
  uint64_t v4;

  if (result)
  {
    v4 = result;
    result = fread(__ptr, 1uLL, a3, *(FILE **)(result + 256));
    if (result != a3)
      sub_10035E6F4(v4, "Read Error");
  }
  return result;
}

_QWORD *sub_100360CF0(_QWORD *result, uint64_t a2, size_t (*a3)(size_t result, void *__ptr, size_t a3))
{
  _QWORD *v3;
  size_t (*v4)(size_t, void *, size_t);

  if (result)
  {
    v3 = result;
    v4 = sub_100360CA4;
    if (a3)
      v4 = a3;
    result[31] = v4;
    result[32] = a2;
    if (result[30])
    {
      result[30] = 0;
      result = (_QWORD *)sub_10035E924((uint64_t)result, (uint64_t)"Can't set both read_data_fn and write_data_fn in the same structure");
    }
    v3[81] = 0;
  }
  return result;
}

uint64_t sub_100360D44(uint64_t result)
{
  int v1;

  if (result)
  {
    v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return sub_10035F048(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x400u;
    }
  }
  return result;
}

uint64_t sub_100360D74(uint64_t result)
{
  int v1;

  if (result)
  {
    v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return sub_10035F048(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x40000u;
    }
  }
  return result;
}

uint64_t sub_100360DA4(uint64_t result)
{
  int v1;

  if (result)
  {
    v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return sub_10035F048(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x2001000u;
    }
  }
  return result;
}

uint64_t sub_100360DDC(uint64_t result)
{
  int v1;

  if (result)
  {
    v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return sub_10035F048(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x1000u;
    }
  }
  return result;
}

uint64_t sub_100360E0C(uint64_t result)
{
  int v1;

  if (result)
  {
    v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return sub_10035F048(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x5000u;
    }
  }
  return result;
}

uint64_t sub_100360E40(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;

  if (!result)
    return result;
  v4 = result;
  v5 = *(_DWORD *)(result + 296);
  if ((v5 & 0x40) != 0)
  {
    v6 = "invalid after png_start_read_image or png_read_update_info";
    return sub_10035F048(result, v6);
  }
  if ((*(_BYTE *)(result + 292) & 1) == 0)
  {
    v6 = "invalid before the PNG header has been read";
    return sub_10035F048(result, v6);
  }
  *(_DWORD *)(result + 296) = v5 | 0x4000;
  if (a2 == 3)
  {
    v7 = *(_DWORD *)(result + 300) | 0x200000;
    *(_DWORD *)(result + 300) = v7;
    if (*(_BYTE *)(result + 607) != 3)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (a2 != 2)
  {
    if (a2 != 1)
      sub_10035E6F4(result, "invalid error action to rgb_to_gray");
    v7 = *(_DWORD *)(result + 300) | 0x600000;
    *(_DWORD *)(result + 300) = v7;
    if (*(_BYTE *)(result + 607) != 3)
      goto LABEL_16;
    goto LABEL_15;
  }
  v7 = *(_DWORD *)(result + 300) | 0x400000;
  *(_DWORD *)(result + 300) = v7;
  if (*(_BYTE *)(result + 607) == 3)
LABEL_15:
    *(_DWORD *)(result + 300) = v7 | 0x1000;
LABEL_16:
  if ((a4 | a3) < 0 || a4 + a3 >= 100001)
  {
    if (((a4 | a3) & 0x80000000) == 0)
      result = sub_10035F02C(result, "ignoring out of range rgb_to_gray coefficients");
    if (!*(_WORD *)(v4 + 970) && !*(_WORD *)(v4 + 972))
      *(_DWORD *)(v4 + 970) = 1535777592;
  }
  else
  {
    *(_WORD *)(result + 970) = (a3 << 15) / 0x186A0u;
    *(_WORD *)(result + 972) = (a4 << 15) / 0x186A0u;
    *(_BYTE *)(result + 969) = 1;
  }
  return result;
}

uint64_t sub_100360FA8(uint64_t a1, int a2, double a3, double a4)
{
  int v7;
  int v8;

  v7 = sub_10035CCE4(a1, (uint64_t)"rgb to gray red coefficient", a3);
  v8 = sub_10035CCE4(a1, (uint64_t)"rgb to gray green coefficient", a4);
  return sub_100360E40(a1, a2, v7, v8);
}

void sub_100361010(uint64_t a1)
{
  int v2;
  int v3;
  _BOOL4 v4;
  unsigned int v5;
  _BOOL4 v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  __int16 v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unsigned __int8 *v22;
  int8x16_t *v23;
  uint64_t v24;
  __int16 v25;
  int8x16_t *v26;
  uint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x8_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  _BYTE *v40;
  __int16 v41;
  __int16 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  _BOOL4 v68;
  _BOOL4 v69;
  int v70;
  __int16 v71;
  _BOOL4 v72;
  _BOOL4 v73;
  _BOOL4 v74;
  _BOOL4 v75;
  unint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  __int16 v85;
  uint64_t v86;
  int v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  int v93;
  _BYTE *v94;
  uint64_t v95;
  int v96;
  char v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  int v103;
  _BYTE *v104;
  uint64_t v105;
  int v106;
  char v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  int v113;
  _BYTE *v114;
  uint64_t v115;
  int v116;

  v2 = *(_DWORD *)(a1 + 1168);
  v3 = *(_DWORD *)(a1 + 668);
  if (!v2)
  {
    if (v3)
    {
      *(_DWORD *)(a1 + 1168) = sub_10035CD30(*(_DWORD *)(a1 + 668));
    }
    else
    {
      *(_DWORD *)(a1 + 1168) = 100000;
      *(_DWORD *)(a1 + 668) = 100000;
    }
    goto LABEL_13;
  }
  if (!v3)
  {
    *(_DWORD *)(a1 + 668) = sub_10035CD30(*(_DWORD *)(a1 + 1168));
LABEL_13:
    *(_WORD *)(a1 + 1242) |= 1u;
    goto LABEL_14;
  }
  v116 = 0;
  if (sub_10035C878(&v116, v2, v3, 100000))
  {
    v4 = sub_10035CD74(v116);
    *(_WORD *)(a1 + 1242) |= 1u;
    if (!v4)
    {
LABEL_14:
      v5 = *(_DWORD *)(a1 + 300) & 0xFFFFDFFF;
      *(_DWORD *)(a1 + 300) = v5;
      if ((v5 & 0x40080) != 0x40000)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  else
  {
    *(_WORD *)(a1 + 1242) |= 1u;
  }
  v5 = *(_DWORD *)(a1 + 300) | 0x2000;
  *(_DWORD *)(a1 + 300) = v5;
  if ((v5 & 0x40080) == 0x40000)
  {
LABEL_15:
    *(_DWORD *)(a1 + 300) = v5 & 0xFD7FFEFF;
    *(_DWORD *)(a1 + 296) &= ~0x2000u;
    *(_WORD *)(a1 + 600) = 0;
  }
LABEL_16:
  v6 = sub_10035CD74(*(_DWORD *)(a1 + 668));
  v7 = *(_DWORD *)(a1 + 300);
  if (v6)
  {
    if ((v7 & 0x600000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  v7 &= ~0x800000u;
  *(_DWORD *)(a1 + 300) = v7;
  *(_DWORD *)(a1 + 296) &= ~0x2000u;
  if ((v7 & 0x600000) != 0)
  {
LABEL_18:
    sub_10035C63C(a1);
    v7 = *(_DWORD *)(a1 + 300);
  }
LABEL_19:
  if ((v7 & 0x100) != 0)
  {
    if ((*(_BYTE *)(a1 + 607) & 2) == 0)
      *(_DWORD *)(a1 + 292) |= 0x800u;
  }
  else if ((~v7 & 0x4080) == 0)
  {
    v8 = *(unsigned __int16 *)(a1 + 630);
    if (v8 == *(unsigned __int16 *)(a1 + 632) && v8 == *(unsigned __int16 *)(a1 + 634))
    {
      *(_DWORD *)(a1 + 292) |= 0x800u;
      *(_WORD *)(a1 + 636) = v8;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + 607);
  if (v9 != 3)
  {
    if ((v9 & 4) != 0)
    {
      v17 = v7;
    }
    else
    {
      v16 = *(unsigned __int16 *)(a1 + 600);
      v17 = v7 & 0xFF7FFFFF;
      *(_DWORD *)(a1 + 300) = v7 & 0xFF7FFFFF;
      *(_DWORD *)(a1 + 296) &= ~0x2000u;
      if (!v16)
      {
        v17 = v7 & 0xFF7FFE7F;
        *(_DWORD *)(a1 + 300) = v7 & 0xFF7FFE7F;
      }
    }
    if ((v9 & 2) != 0 || (v17 & 0x1100) != 0x1100)
      goto LABEL_74;
    v18 = *(_WORD *)(a1 + 636);
    v19 = *(_WORD *)(a1 + 752);
    v20 = *(unsigned __int8 *)(a1 + 608);
    switch(v20)
    {
      case 4:
        v18 *= 17;
        v19 *= 17;
        break;
      case 2:
        v25 = 85 * v18;
        v19 *= 85;
        *(_WORD *)(a1 + 634) = v25;
        *(_WORD *)(a1 + 632) = v25;
        *(_WORD *)(a1 + 630) = v25;
        if ((v17 & 0x2000000) != 0)
          goto LABEL_74;
        goto LABEL_59;
      case 1:
        v21 = 255 * v18;
        v19 *= 255;
        *(_WORD *)(a1 + 634) = v21;
        *(_WORD *)(a1 + 632) = v21;
        *(_WORD *)(a1 + 630) = v21;
        if ((v17 & 0x2000000) != 0)
          goto LABEL_74;
        goto LABEL_59;
    }
    *(_WORD *)(a1 + 634) = v18;
    *(_WORD *)(a1 + 632) = v18;
    *(_WORD *)(a1 + 630) = v18;
    if ((v17 & 0x2000000) != 0)
      goto LABEL_74;
LABEL_59:
    *(_WORD *)(a1 + 750) = v19;
    *(_WORD *)(a1 + 748) = v19;
    *(_WORD *)(a1 + 746) = v19;
    goto LABEL_74;
  }
  v10 = *(unsigned __int16 *)(a1 + 600);
  if (*(_WORD *)(a1 + 600))
  {
    v11 = 0;
    v12 = *(unsigned __int8 **)(a1 + 736);
    v13 = *(unsigned __int16 *)(a1 + 600);
    while (1)
    {
      v15 = *v12++;
      v14 = v15;
      if (v15 != 255)
      {
        if (v14)
        {
          v17 = v7;
          if ((~v7 & 0x1100) == 0)
            goto LABEL_51;
          goto LABEL_74;
        }
        v11 = 1;
      }
      if (!--v13)
      {
        v17 = v7 & 0xFF7FFFFF;
        *(_DWORD *)(a1 + 300) = v7 & 0xFF7FFFFF;
        *(_DWORD *)(a1 + 296) &= ~0x2000u;
        if (v11)
          goto LABEL_50;
        goto LABEL_49;
      }
    }
  }
  *(_DWORD *)(a1 + 296) &= ~0x2000u;
LABEL_49:
  v17 = v7 & 0xFF7FFE7F;
  *(_DWORD *)(a1 + 300) = v7 & 0xFF7FFE7F;
LABEL_50:
  if ((~v17 & 0x1100) == 0)
  {
LABEL_51:
    v22 = (unsigned __int8 *)(*(_QWORD *)(a1 + 584) + 3 * *(unsigned __int8 *)(a1 + 628));
    *(_WORD *)(a1 + 630) = *v22;
    *(_WORD *)(a1 + 632) = v22[1];
    *(_WORD *)(a1 + 634) = v22[2];
    if (!(_DWORD)v10 || (v17 & 0x2080000) != 0x80000)
      goto LABEL_74;
    v23 = *(int8x16_t **)(a1 + 736);
    if (v10 < 8)
    {
      v24 = 0;
LABEL_71:
      v32 = v10 - v24;
      v33 = &v23->i8[v24];
      do
      {
        *v33 = ~*v33;
        ++v33;
        --v32;
      }
      while (v32);
LABEL_73:
      v17 = *(_DWORD *)(a1 + 300);
      goto LABEL_74;
    }
    if (v10 >= 0x20)
    {
      v24 = (unsigned __int16)v10 & 0xFFE0;
      v26 = v23 + 1;
      v27 = v24;
      do
      {
        v28 = vmvnq_s8(*v26);
        v26[-1] = vmvnq_s8(v26[-1]);
        *v26 = v28;
        v26 += 2;
        v27 -= 32;
      }
      while (v27);
      if (v24 == v10)
        goto LABEL_73;
      if ((v10 & 0x18) == 0)
        goto LABEL_71;
    }
    else
    {
      v24 = 0;
    }
    v29 = v24;
    v24 = (unsigned __int16)v10 & 0xFFF8;
    v30 = (int8x8_t *)&v23->i8[v29];
    v31 = v29 - v24;
    do
    {
      *v30 = vmvn_s8(*v30);
      ++v30;
      v31 += 8;
    }
    while (v31);
    if (v24 == v10)
      goto LABEL_73;
    goto LABEL_71;
  }
LABEL_74:
  if ((v17 & 0x380) == 0x280 && *(_BYTE *)(a1 + 608) != 16)
    *(int16x4_t *)(a1 + 630) = vaddhn_s32((int32x4_t)vmull_u16(*(uint16x4_t *)(a1 + 630), (uint16x4_t)0xFF00FF00FF00FFLL), vdupq_n_s32(0x807Fu));
  if ((v17 & 0x4000400) != 0 && (v17 & 0x180) == 0x80 && *(_BYTE *)(a1 + 608) == 16)
    *(int16x4_t *)(a1 + 630) = vmul_s16(*(int16x4_t *)(a1 + 630), (int16x4_t)0x101010101010101);
  *(_WORD *)(a1 + 646) = *(_WORD *)(a1 + 636);
  *(_QWORD *)(a1 + 638) = *(_QWORD *)(a1 + 628);
  if ((v17 & 0x2000) == 0)
  {
    if ((v17 & 0x600000) != 0)
    {
      if (sub_10035CD74(*(_DWORD *)(a1 + 1168)) || sub_10035CD74(*(_DWORD *)(a1 + 668)))
        goto LABEL_101;
      v17 = *(_DWORD *)(a1 + 300);
    }
    if ((v17 & 0x80) == 0
      || !sub_10035CD74(*(_DWORD *)(a1 + 1168))
      && !sub_10035CD74(*(_DWORD *)(a1 + 668))
      && (*(_BYTE *)(a1 + 620) != 3 || !sub_10035CD74(*(_DWORD *)(a1 + 624))))
    {
      v34 = *(_DWORD *)(a1 + 300);
      if ((v34 & 0x800000) == 0)
      {
LABEL_90:
        if ((v34 & 0x80) != 0 && *(_BYTE *)(a1 + 607) == 3)
        {
          v35 = *(unsigned __int16 *)(a1 + 600);
          if (*(_WORD *)(a1 + 600))
          {
            v36 = 0;
            v37 = *(unsigned __int8 *)(a1 + 630);
            v38 = *(unsigned __int8 *)(a1 + 632);
            v39 = *(unsigned __int8 *)(a1 + 634);
            v40 = (_BYTE *)(*(_QWORD *)(a1 + 584) + 2);
            do
            {
              v43 = *(_QWORD *)(a1 + 736);
              v44 = *(unsigned __int8 *)(v43 + v36);
              if (v44 != 255)
              {
                if (*(_BYTE *)(v43 + v36))
                {
                  v41 = *(v40 - 2) * (_WORD)v44 + v37 * (v44 ^ 0xFF) + 128;
                  *(v40 - 2) = (unsigned __int16)(v41 + ((unsigned __int16)(v41 & 0xFF00) >> 8)) >> 8;
                  *(v40 - 1) = (unsigned __int16)(*(unsigned __int8 *)(v43 + v36) * *(v40 - 1)
                                                + v38 * (*(unsigned __int8 *)(v43 + v36) ^ 0xFF)
                                                + 128
                                                + ((unsigned __int16)((*(unsigned __int8 *)(v43 + v36)
                                                                     * *(v40 - 1)
                                                                     + v38 * (*(unsigned __int8 *)(v43 + v36) ^ 0xFF)
                                                                     + 128) & 0xFF00) >> 8)) >> 8;
                  v42 = *(unsigned __int8 *)(v43 + v36) * *v40
                      + v39 * (*(unsigned __int8 *)(v43 + v36) ^ 0xFF)
                      + 128;
                  *v40 = (unsigned __int16)(v42 + ((unsigned __int16)(v42 & 0xFF00) >> 8)) >> 8;
                }
                else
                {
                  *(v40 - 2) = v37;
                  *(v40 - 1) = v38;
                  *v40 = v39;
                }
              }
              ++v36;
              v40 += 3;
            }
            while (v35 != v36);
            v34 = *(_DWORD *)(a1 + 300);
          }
          v34 &= ~0x80u;
          *(_DWORD *)(a1 + 300) = v34;
          if ((v34 & 0x1008) != 8)
            return;
          goto LABEL_157;
        }
LABEL_138:
        if ((v34 & 0x1008) != 8)
          return;
        goto LABEL_157;
      }
      if (!sub_10035CD74(*(_DWORD *)(a1 + 668)))
      {
        v34 = *(_DWORD *)(a1 + 300);
        goto LABEL_90;
      }
    }
  }
LABEL_101:
  sub_10035D070(a1, *(unsigned __int8 *)(a1 + 608));
  v34 = *(_DWORD *)(a1 + 300);
  if ((v34 & 0x80) != 0)
  {
    if ((v34 & 0x600000) != 0)
      sub_10035E924(a1, (uint64_t)"libpng does not support gamma+background+rgb_to_gray");
    if (*(_BYTE *)(a1 + 607) == 3)
    {
      v48 = 100000;
      v49 = *(_QWORD *)(a1 + 584);
      v50 = *(unsigned __int16 *)(a1 + 592);
      v51 = *(unsigned __int8 *)(a1 + 620);
      if (v51 == 1)
      {
        v52 = *(_DWORD *)(a1 + 668);
      }
      else
      {
        if (v51 == 3)
        {
          v52 = sub_10035CD30(*(_DWORD *)(a1 + 624));
          v48 = sub_10035CD8C(*(_DWORD *)(a1 + 624), *(_DWORD *)(a1 + 668));
          v74 = sub_10035CD74(v48);
          v55 = *(unsigned __int16 *)(a1 + 630);
          if (v74)
          {
LABEL_142:
            LOBYTE(v55) = sub_10035CDE8(v55, v48);
            v57 = sub_10035CDE8(*(unsigned __int16 *)(a1 + 632), v48);
            v59 = sub_10035CDE8(*(unsigned __int16 *)(a1 + 634), v48);
            v73 = sub_10035CD74(v52);
            v61 = *(unsigned __int16 *)(a1 + 630);
            if (v73)
              goto LABEL_143;
            goto LABEL_147;
          }
LABEL_146:
          v57 = *(_BYTE *)(a1 + 632);
          v59 = *(_BYTE *)(a1 + 634);
          v75 = sub_10035CD74(v52);
          v61 = *(unsigned __int16 *)(a1 + 630);
          if (v75)
          {
LABEL_143:
            LOBYTE(v61) = sub_10035CDE8(v61, v52);
            v62 = sub_10035CDE8(*(unsigned __int16 *)(a1 + 632), v52);
            v63 = sub_10035CDE8(*(unsigned __int16 *)(a1 + 634), v52);
            if (!(_DWORD)v50)
              goto LABEL_156;
            goto LABEL_148;
          }
LABEL_147:
          v62 = *(_BYTE *)(a1 + 632);
          v63 = *(_BYTE *)(a1 + 634);
          if (!(_DWORD)v50)
            goto LABEL_156;
LABEL_148:
          v76 = 0;
          v77 = (_BYTE *)(v49 + 2);
          do
          {
            while (1)
            {
              while (1)
              {
                if (v76 < *(unsigned __int16 *)(a1 + 600))
                {
                  v79 = *(_QWORD *)(a1 + 736);
                  v80 = *(unsigned __int8 *)(v79 + v76);
                  if (v80 != 255)
                    break;
                }
                v78 = *(_QWORD *)(a1 + 672);
                *(v77 - 2) = *(_BYTE *)(v78 + *(v77 - 2));
                *(v77 - 1) = *(_BYTE *)(v78 + *(v77 - 1));
                *v77 = *(_BYTE *)(v78 + *v77);
                v77 += 3;
                if (v50 == ++v76)
                  goto LABEL_156;
              }
              if (*(_BYTE *)(v79 + v76))
                break;
              *(v77 - 2) = v55;
              *(v77 - 1) = v57;
              *v77 = v59;
              v77 += 3;
              if (v50 == ++v76)
                goto LABEL_156;
            }
            v81 = *(_QWORD *)(a1 + 696);
            v82 = *(unsigned __int8 *)(v81 + *(v77 - 2)) * (_WORD)v80
                + (v80 ^ 0xFF) * v61
                + 128;
            v83 = *(_QWORD *)(a1 + 688);
            *(v77 - 2) = *(_BYTE *)(v83 + ((unsigned __int16)(v82 + HIBYTE(v82)) >> 8));
            v84 = *(unsigned __int8 *)(v79 + v76) * *(unsigned __int8 *)(v81 + *(v77 - 1))
                + (*(unsigned __int8 *)(v79 + v76) ^ 0xFF) * v62
                + 128;
            *(v77 - 1) = *(_BYTE *)(v83 + ((unsigned __int16)(v84 + HIBYTE(v84)) >> 8));
            v85 = *(unsigned __int8 *)(v79 + v76) * *(unsigned __int8 *)(v81 + *v77)
                + (*(unsigned __int8 *)(v79 + v76) ^ 0xFF) * v63
                + 128;
            *v77 = *(_BYTE *)(v83 + ((unsigned __int16)(v85 + HIBYTE(v85)) >> 8));
            v77 += 3;
            ++v76;
          }
          while (v50 != v76);
LABEL_156:
          v34 = *(_DWORD *)(a1 + 300) & 0xFFFFDF7F;
          *(_DWORD *)(a1 + 300) = v34;
          if ((v34 & 0x1008) != 8)
            return;
          goto LABEL_157;
        }
        v52 = 100000;
        if (v51 == 2)
        {
          v53 = *(_QWORD *)(a1 + 672);
          v54 = *(unsigned __int16 *)(a1 + 630);
          LOBYTE(v55) = *(_BYTE *)(v53 + v54);
          v56 = *(unsigned __int16 *)(a1 + 632);
          v57 = *(_BYTE *)(v53 + v56);
          v58 = *(unsigned __int16 *)(a1 + 634);
          v59 = *(_BYTE *)(v53 + v58);
          v60 = *(_QWORD *)(a1 + 696);
          LOBYTE(v61) = *(_BYTE *)(v60 + v54);
          v62 = *(_BYTE *)(v60 + v56);
          v63 = *(_BYTE *)(v60 + v58);
          if (!*(_WORD *)(a1 + 592))
            goto LABEL_156;
          goto LABEL_148;
        }
      }
      v72 = sub_10035CD74(100000);
      v55 = *(unsigned __int16 *)(a1 + 630);
      if (v72)
        goto LABEL_142;
      goto LABEL_146;
    }
    v64 = *(unsigned __int8 *)(a1 + 620);
    switch(v64)
    {
      case 3:
        v66 = sub_10035CD30(*(_DWORD *)(a1 + 624));
        v67 = *(_DWORD *)(a1 + 624);
        break;
      case 2:
        v66 = sub_10035CD30(*(_DWORD *)(a1 + 1168));
        v67 = *(_DWORD *)(a1 + 1168);
        break;
      case 1:
        v65 = 100000;
        v66 = *(_DWORD *)(a1 + 668);
        goto LABEL_125;
      default:
        sub_10035E6F4(a1, "invalid background gamma type");
    }
    v65 = sub_10035CD8C(v67, *(_DWORD *)(a1 + 668));
LABEL_125:
    v68 = sub_10035CD74(v66);
    v69 = sub_10035CD74(v65);
    if (v68)
      *(_WORD *)(a1 + 646) = sub_10035CE44(a1, *(unsigned __int16 *)(a1 + 636), v66);
    if (v69)
      *(_WORD *)(a1 + 636) = sub_10035CE44(a1, *(unsigned __int16 *)(a1 + 636), v65);
    v70 = *(unsigned __int16 *)(a1 + 630);
    if (v70 == *(unsigned __int16 *)(a1 + 632)
      && v70 == *(unsigned __int16 *)(a1 + 634)
      && v70 == *(unsigned __int16 *)(a1 + 636))
    {
      v71 = *(_WORD *)(a1 + 646);
      *(_WORD *)(a1 + 644) = v71;
      *(_WORD *)(a1 + 642) = v71;
      *(_WORD *)(a1 + 640) = v71;
      *(_WORD *)(a1 + 634) = v70;
      *(_WORD *)(a1 + 632) = v70;
      *(_WORD *)(a1 + 630) = v70;
    }
    else
    {
      if (v68)
      {
        *(_WORD *)(a1 + 640) = sub_10035CE44(a1, v70, v66);
        *(_WORD *)(a1 + 642) = sub_10035CE44(a1, *(unsigned __int16 *)(a1 + 632), v66);
        *(_WORD *)(a1 + 644) = sub_10035CE44(a1, *(unsigned __int16 *)(a1 + 634), v66);
      }
      if (v69)
      {
        *(_WORD *)(a1 + 630) = sub_10035CE44(a1, *(unsigned __int16 *)(a1 + 630), v65);
        *(_WORD *)(a1 + 632) = sub_10035CE44(a1, *(unsigned __int16 *)(a1 + 632), v65);
        *(_WORD *)(a1 + 634) = sub_10035CE44(a1, *(unsigned __int16 *)(a1 + 634), v65);
      }
    }
    *(_BYTE *)(a1 + 620) = 1;
    v34 = *(_DWORD *)(a1 + 300);
    goto LABEL_138;
  }
  if (*(_BYTE *)(a1 + 607) != 3 || (v34 & 0x1000) != 0 && (v34 & 0x600000) != 0)
    goto LABEL_138;
  v45 = *(unsigned __int16 *)(a1 + 592);
  if (*(_WORD *)(a1 + 592))
  {
    v46 = *(_QWORD *)(a1 + 672);
    v47 = (_BYTE *)(*(_QWORD *)(a1 + 584) + 2);
    do
    {
      *(v47 - 2) = *(_BYTE *)(v46 + *(v47 - 2));
      *(v47 - 1) = *(_BYTE *)(v46 + *(v47 - 1));
      *v47 = *(_BYTE *)(v46 + *v47);
      v47 += 3;
      --v45;
    }
    while (v45);
  }
  v34 &= ~0x2000u;
  *(_DWORD *)(a1 + 300) = v34;
  if ((v34 & 0x1008) != 8)
    return;
LABEL_157:
  if (*(_BYTE *)(a1 + 607) != 3)
    return;
  v86 = *(unsigned __int16 *)(a1 + 592);
  v87 = *(unsigned __int8 *)(a1 + 720);
  *(_DWORD *)(a1 + 300) = v34 & 0xFFFFFFF7;
  if ((v87 - 1) <= 6 && (_DWORD)v86)
  {
    v88 = 8 - v87;
    v89 = *(_QWORD *)(a1 + 584);
    if (v86 >= 2)
    {
      v90 = (unsigned __int16)v86 & 0xFFFE;
      v91 = v90;
      v92 = *(unsigned __int8 **)(a1 + 584);
      do
      {
        v93 = v92[3] >> v88;
        *v92 >>= v88;
        v92[3] = v93;
        v92 += 6;
        v91 -= 2;
      }
      while (v91);
      if (v90 == v86)
        goto LABEL_167;
    }
    else
    {
      v90 = 0;
    }
    v94 = (_BYTE *)(v89 + 3 * v90);
    v95 = v86 - v90;
    do
    {
      *v94 = *v94 >> v88;
      v94 += 3;
      --v95;
    }
    while (v95);
  }
LABEL_167:
  v96 = *(unsigned __int8 *)(a1 + 721);
  if ((v96 - 1) <= 6 && (_DWORD)v86 != 0)
  {
    v98 = 8 - v96;
    v99 = *(_QWORD *)(a1 + 584);
    if (v86 >= 2)
    {
      v100 = (unsigned __int16)v86 & 0xFFFE;
      v101 = (_BYTE *)(v99 + 4);
      v102 = v100;
      do
      {
        v103 = *v101 >> v98;
        *(v101 - 3) = *(v101 - 3) >> v98;
        *v101 = v103;
        v101 += 6;
        v102 -= 2;
      }
      while (v102);
      if (v100 == v86)
        goto LABEL_178;
    }
    else
    {
      v100 = 0;
    }
    v104 = (_BYTE *)(3 * v100 + v99 + 1);
    v105 = v86 - v100;
    do
    {
      *v104 = *v104 >> v98;
      v104 += 3;
      --v105;
    }
    while (v105);
  }
LABEL_178:
  v106 = *(unsigned __int8 *)(a1 + 722);
  if ((v106 - 1) <= 6 && (_DWORD)v86 != 0)
  {
    v108 = 8 - v106;
    v109 = *(_QWORD *)(a1 + 584);
    if (v86 >= 2)
    {
      v110 = (unsigned __int16)v86 & 0xFFFE;
      v111 = (_BYTE *)(v109 + 5);
      v112 = v110;
      do
      {
        v113 = *v111 >> v108;
        *(v111 - 3) = *(v111 - 3) >> v108;
        *v111 = v113;
        v111 += 6;
        v112 -= 2;
      }
      while (v112);
      if (v110 == v86)
        return;
    }
    else
    {
      v110 = 0;
    }
    v114 = (_BYTE *)(3 * v110 + v109 + 2);
    v115 = v86 - v110;
    do
    {
      *v114 = *v114 >> v108;
      v114 += 3;
      --v115;
    }
    while (v115);
  }
}

uint64_t sub_100361CA0(uint64_t result, unsigned int *a2)
{
  int v2;
  int v3;
  char v4;
  unsigned int v5;
  int v7;
  char v8;
  char v9;
  char v10;
  unsigned __int8 v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;

  v2 = *(_DWORD *)(result + 300);
  if ((v2 & 0x1000) == 0)
    goto LABEL_7;
  v3 = *((unsigned __int8 *)a2 + 37);
  if (v3 == 3)
  {
    if (*(_WORD *)(result + 600))
      v4 = 6;
    else
      v4 = 2;
    *((_BYTE *)a2 + 37) = v4;
    *((_BYTE *)a2 + 36) = 8;
    *((_WORD *)a2 + 17) = 0;
    if (!*(_QWORD *)(result + 584))
      sub_10035E6F4(result, "Palette is NULL in indexed image");
LABEL_7:
    if ((v2 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  if ((v2 & 0x2000000) != 0 && *(_WORD *)(result + 600))
    *((_BYTE *)a2 + 37) = v3 | 4;
  if (*((unsigned __int8 *)a2 + 36) <= 7u)
    *((_BYTE *)a2 + 36) = 8;
  *((_WORD *)a2 + 17) = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_8:
    *((_WORD *)a2 + 105) = *(_WORD *)(result + 636);
    *(_QWORD *)((char *)a2 + 202) = *(_QWORD *)(result + 628);
  }
LABEL_9:
  a2[13] = *(_DWORD *)(result + 1168);
  v5 = *((unsigned __int8 *)a2 + 36);
  if ((v2 & 0x4000400) == 0 || v5 != 16)
  {
    if ((v2 & 0x4000) == 0)
      goto LABEL_14;
LABEL_38:
    *((_BYTE *)a2 + 37) |= 2u;
    if ((v2 & 0x600000) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  v5 = 8;
  *((_BYTE *)a2 + 36) = 8;
  if ((v2 & 0x4000) != 0)
    goto LABEL_38;
LABEL_14:
  if ((v2 & 0x600000) != 0)
LABEL_15:
    *((_BYTE *)a2 + 37) &= ~2u;
LABEL_16:
  if ((v2 & 0x40) != 0 && (*((unsigned __int8 *)a2 + 37) | 4) == 6 && *(_QWORD *)(result + 880) && v5 == 8)
  {
    *((_BYTE *)a2 + 37) = 3;
    if ((v2 & 0x200) == 0)
    {
      v5 = 8;
      if ((v2 & 4) == 0)
        goto LABEL_30;
      goto LABEL_28;
    }
  }
  else if ((v2 & 0x200) == 0 || v5 != 8)
  {
LABEL_27:
    if ((v2 & 4) == 0)
      goto LABEL_30;
    goto LABEL_28;
  }
  if (*((_BYTE *)a2 + 37) == 3)
  {
    v5 = 8;
    goto LABEL_27;
  }
  v5 = 16;
  *((_BYTE *)a2 + 36) = 16;
  if ((v2 & 4) == 0)
    goto LABEL_30;
LABEL_28:
  if (v5 <= 7)
  {
    LOBYTE(v5) = 8;
    *((_BYTE *)a2 + 36) = 8;
  }
LABEL_30:
  v7 = *((unsigned __int8 *)a2 + 37);
  if (v7 == 3 || (v7 & 2) == 0)
  {
    v8 = 1;
    *((_BYTE *)a2 + 41) = 1;
    if ((v2 & 0x40000) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
  v8 = 3;
  *((_BYTE *)a2 + 41) = 3;
  if ((v2 & 0x40000) != 0)
  {
LABEL_33:
    v7 &= ~4u;
    *((_BYTE *)a2 + 37) = v7;
    *((_WORD *)a2 + 17) = 0;
  }
LABEL_34:
  if ((v7 & 4) != 0)
  {
    *((_BYTE *)a2 + 41) = ++v8;
    if ((v2 & 0x8000) == 0)
      goto LABEL_44;
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_44;
  }
  if ((v7 | 2) == 2)
  {
    *((_BYTE *)a2 + 41) = ++v8;
    if ((v2 & 0x1000000) != 0)
      *((_BYTE *)a2 + 37) = v7 | 4;
  }
LABEL_44:
  if ((v2 & 0x100000) != 0)
  {
    v9 = *(_BYTE *)(result + 288);
    if (v9)
    {
      *((_BYTE *)a2 + 36) = v9;
      LOBYTE(v5) = v9;
    }
    v10 = *(_BYTE *)(result + 289);
    if (v10)
    {
      *((_BYTE *)a2 + 41) = v10;
      v8 = v10;
    }
  }
  v11 = v5 * v8;
  *((_BYTE *)a2 + 42) = v5 * v8;
  v12 = (v5 * v8) >= 8u;
  v13 = (*a2 * (unint64_t)(v5 * v8) + 7) >> 3;
  v14 = *a2 * (unint64_t)(v11 >> 3);
  if (!v12)
    v14 = v13;
  *((_QWORD *)a2 + 2) = v14;
  *(_QWORD *)(result + 568) = v14;
  return result;
}

uint64_t sub_100361EE4(uint64_t result, unsigned int *a2, int32x4_t a3, double a4, double a5, double a6, double a7, int8x16_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned __int16 *v23;
  unsigned int *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  char v34;
  int v35;
  unsigned __int8 *v36;
  _BYTE *v37;
  unsigned int v38;
  int v39;
  unsigned __int8 *v40;
  _BYTE *v41;
  unsigned int v42;
  _BYTE *v43;
  unsigned __int8 *v44;
  unsigned int v45;
  char v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned __int8 v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  char v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned __int8 *v76;
  int v77;
  int v78;
  unsigned __int16 *v80;
  unsigned __int8 v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v86;
  char v87;
  unsigned __int8 v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  int v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned __int8 *v99;
  unsigned int v100;
  unsigned __int8 *v101;
  unsigned int v102;
  unint64_t v103;
  int v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  unsigned int v115;
  int v116;
  int v117;
  BOOL v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  unsigned int v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  unsigned __int8 *v135;
  unsigned int v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  int v143;
  int v144;
  unsigned __int8 *v145;
  unsigned __int16 *v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned __int8 *v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  __int16 v156;
  unsigned __int8 *v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  __int16 v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  unsigned __int8 *v173;
  int v174;
  uint64_t v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  unsigned __int8 *v178;
  int v179;
  uint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  char v184;
  int v185;
  _BYTE *v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  unsigned __int8 *v192;
  unsigned __int8 *v193;
  unsigned int v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  char v201;
  BOOL v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _BYTE *v213;
  _BYTE *v214;
  unsigned __int8 *v215;
  int v216;
  int v217;
  _BYTE *v219;
  uint64_t v220;
  char v221;
  int v222;
  _BYTE *v223;
  _BYTE *v224;
  uint64_t v225;
  char v226;
  int v227;
  _BYTE *v228;
  int v229;
  int v230;
  uint64_t v231;
  int v232;
  int v233;
  int v234;
  int v235;
  signed int v236;
  _BOOL4 v237;
  int v238;
  _BOOL4 v239;
  _BOOL4 v240;
  int v241;
  _BOOL4 v242;
  _BOOL4 v243;
  int v244;
  _BOOL4 v245;
  _BOOL4 v246;
  unint64_t v247;
  unsigned __int8 *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unsigned __int8 *v252;
  unint64_t v253;
  uint64_t v254;
  char v255;
  unsigned int v256;
  uint64_t v257;
  unint64_t v258;
  unsigned __int8 *v259;
  uint64_t v260;
  int v261;
  unsigned __int8 *v262;
  int v263;
  uint64_t v264;
  int v265;
  unsigned __int8 *v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  unsigned __int8 *v271;
  __int16 v272;
  __int16 v273;
  int v274;
  unsigned int v275;
  int v276;
  uint64_t v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  uint64_t v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  int v291;
  _BYTE *v292;
  int v293;
  unsigned __int16 *v294;
  int v295;
  int v296;
  unsigned int v297;
  int v298;
  BOOL v299;
  unsigned int v300;
  int v301;
  int v302;
  int v303;
  BOOL v304;
  unsigned int v305;
  uint64_t v306;
  unsigned int v307;
  int v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  unsigned int v312;
  unsigned __int16 *v313;
  unsigned __int8 *v314;
  unsigned __int8 *v315;
  unsigned __int8 *v316;
  int32x4_t v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  uint32x4_t v321;
  int v322;
  int v323;
  BOOL v324;
  unsigned int v325;
  int v326;
  int v327;
  BOOL v328;
  unsigned int v329;
  int v330;
  int v331;
  uint64_t v332;
  unsigned int i;
  uint8x16_t *v334;
  unint64_t v335;
  int8x16_t v336;
  uint8x8_t *v337;
  unint64_t v338;
  uint32x4_t v339;
  unint64_t v340;
  unsigned __int8 *v341;
  unsigned __int8 *v342;
  unsigned int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  int v347;
  unsigned __int8 *v348;
  _BYTE *v349;
  unsigned int v350;
  uint64_t v351;
  int v352;
  unsigned __int8 *v353;
  _BYTE *v354;
  unsigned int v355;
  int v356;
  _BOOL4 v357;
  uint64_t v358;
  int v359;
  unsigned __int8 *v360;
  _BYTE *v361;
  unsigned int v362;
  uint64_t v363;
  int v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  unsigned int v368;
  int v369;
  uint64_t v370;
  int v371;
  _BYTE *v372;
  char *v373;
  unsigned int v374;
  char v375;
  int v376;
  _BYTE *v377;
  _BYTE *v378;
  unsigned int v379;
  _BYTE *v380;
  _BYTE *v381;
  unsigned int v382;
  _BYTE *v383;
  _BYTE *v384;
  unsigned int v385;
  uint64_t v386;
  char *v387;
  int v388;
  char v389;
  char v390;
  char v391;
  char v392;
  uint64_t v393;
  int v394;
  _BYTE *v395;
  uint64_t v396;
  __int16 v397;
  int v398;
  _BYTE *v399;
  uint64_t v400;
  int v401;
  _BYTE *v402;
  __int16 v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  int8x8_t *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  uint64_t v420;
  int8x8_t v421;
  int8x8_t v422;
  int8x8_t v423;
  uint64_t v424;
  char *v425;
  uint64_t v426;
  int8x8_t v427;
  uint64_t v428;
  char *v429;
  uint64_t v430;
  int8x8_t v431;
  int8x8_t v432;
  int8x8_t v433;
  char *v434;
  uint64_t v435;
  int8x16_t v436;
  int8x16_t v437;
  int8x16_t v438;
  unsigned __int32 *v439;
  int v440;
  char *v441;
  uint64_t v442;
  int8x16_t v443;
  int v444;
  char *v445;
  char v446;
  char *v447;
  uint64_t v448;
  int8x16_t v449;
  int8x16_t v450;
  int8x16_t v451;
  int v452;
  unsigned __int32 *v453;
  int v454;
  uint64_t (*v455)(uint64_t, unsigned int *, uint64_t);
  char v456;
  unsigned __int8 v457;
  BOOL v458;
  unint64_t v459;
  unint64_t v460;
  signed int v461;
  int v462;
  int v463;
  int v464;
  int8x8x2_t v465;
  int8x16x2_t v466;
  int8x16x2_t v467;
  int8x8x4_t v468;
  int8x8x4_t v469;
  int8x16x4_t v470;
  int8x16x4_t v471;
  int8x16x4_t v472;

  v8 = result;
  v9 = *(_QWORD *)(result + 544);
  if (!v9)
    sub_10035E6F4(result, "NULL row buffer");
  if ((*(_DWORD *)(result + 296) & 0x4040) == 0x4000)
    sub_10035E6F4(result, "Uninitialized row");
  v11 = *(_DWORD *)(result + 300);
  if ((v11 & 0x1000) == 0)
    goto LABEL_28;
  if (*((_BYTE *)a2 + 16) != 3)
  {
    if ((v11 & 0x2000000) != 0 && *(_WORD *)(result + 600))
    {
      v23 = (unsigned __int16 *)(result + 744);
      v24 = a2;
    }
    else
    {
      v24 = a2;
      v23 = 0;
    }
    result = (uint64_t)sub_100364944(v24, v9 + 1, v23);
    goto LABEL_28;
  }
  v12 = v9 + 1;
  v13 = *(_QWORD *)(result + 584);
  v14 = *(_QWORD *)(result + 736);
  v15 = *(unsigned __int16 *)(result + 600);
  v16 = *a2;
  v17 = *((unsigned __int8 *)a2 + 17);
  if (v17 <= 7)
  {
    if (v17 == 1)
    {
      if ((_DWORD)v16)
      {
        v35 = -(int)v16 & 7;
        v36 = (unsigned __int8 *)(v12 + ((v16 - 1) >> 3));
        v37 = (_BYTE *)(v9 + v16);
        v38 = *a2;
        do
        {
          *v37-- = (*v36 >> v35) & 1;
          result = v35 == 7;
          if (v35 == 7)
            v35 = 0;
          else
            ++v35;
          v36 -= result;
          --v38;
        }
        while (v38);
LABEL_44:
        v18 = v16;
LABEL_45:
        *((_BYTE *)a2 + 17) = 8;
        *((_BYTE *)a2 + 19) = 8;
        *((_QWORD *)a2 + 1) = v18;
        if (!v15)
          goto LABEL_46;
        goto LABEL_20;
      }
    }
    else if (v17 == 2)
    {
      if ((_DWORD)v16)
      {
        v39 = ~(2 * v16 + 6) & 6;
        v40 = (unsigned __int8 *)(v12 + ((v16 - 1) >> 2));
        v41 = (_BYTE *)(v9 + v16);
        v42 = *a2;
        do
        {
          *v41-- = (*v40 >> v39) & 3;
          v60 = v39 == 6;
          result = v39 == 6;
          v39 += 2;
          if (v60)
            v39 = 0;
          v40 -= result;
          --v42;
        }
        while (v42);
        goto LABEL_44;
      }
    }
    else
    {
      v18 = *a2;
      if (v17 != 4)
        goto LABEL_45;
      if ((_DWORD)v16)
      {
        v19 = 4 * (*a2 & 1);
        v20 = (unsigned __int8 *)(v12 + ((v16 - 1) >> 1));
        v21 = (_BYTE *)(v9 + v16);
        v22 = *a2;
        do
        {
          *v21-- = (*v20 >> v19) & 0xF;
          v60 = v19 == 4;
          result = v19 == 4;
          v19 += 4;
          if (v60)
            v19 = 0;
          v20 -= result;
          --v22;
        }
        while (v22);
        goto LABEL_44;
      }
    }
    *((_BYTE *)a2 + 17) = 8;
    *((_BYTE *)a2 + 19) = 8;
    *((_QWORD *)a2 + 1) = 0;
    if (!v15)
      goto LABEL_46;
    goto LABEL_20;
  }
  if (v17 != 8)
  {
LABEL_28:
    v31 = *(_DWORD *)(v8 + 300);
    if ((v31 & 0x40080) != 0x40000)
      goto LABEL_51;
    goto LABEL_29;
  }
  if (!*(_WORD *)(result + 600))
  {
LABEL_46:
    v32 = (3 * v16);
    if ((_DWORD)v16)
    {
      v43 = (_BYTE *)(v9 + v32);
      v44 = (unsigned __int8 *)(v9 + v16);
      do
      {
        *v43 = *(_BYTE *)(v13 + 3 * *v44 + 2);
        *(v43 - 1) = *(_BYTE *)(v13 + 3 * *v44 + 1);
        v45 = *v44--;
        *(v43 - 2) = *(_BYTE *)(v13 + 3 * v45);
        v43 -= 3;
        LODWORD(v16) = v16 - 1;
      }
      while ((_DWORD)v16);
    }
    *((_BYTE *)a2 + 17) = 8;
    *((_BYTE *)a2 + 19) = 24;
    v33 = 3;
    v34 = 2;
    goto LABEL_50;
  }
LABEL_20:
  if ((_DWORD)v16)
  {
    v25 = (char *)(v9 + 4 * v16);
    v26 = (unsigned __int8 *)(v9 + v16);
    v27 = v16;
    do
    {
      v30 = *v26;
      if (v15 > v30)
        v28 = *(_BYTE *)(v14 + v30);
      else
        v28 = -1;
      *v25 = v28;
      *(v25 - 1) = *(_BYTE *)(v13 + 3 * *v26 + 2);
      *(v25 - 2) = *(_BYTE *)(v13 + 3 * *v26 + 1);
      v29 = *v26--;
      *(v25 - 3) = *(_BYTE *)(v13 + 3 * v29);
      v25 -= 4;
      --v27;
    }
    while (v27);
  }
  *((_BYTE *)a2 + 17) = 8;
  *((_BYTE *)a2 + 19) = 32;
  v32 = (4 * v16);
  v33 = 4;
  v34 = 6;
LABEL_50:
  *((_QWORD *)a2 + 1) = v32;
  *((_BYTE *)a2 + 16) = v34;
  *((_BYTE *)a2 + 18) = v33;
  v31 = *(_DWORD *)(v8 + 300);
  if ((v31 & 0x40080) != 0x40000)
    goto LABEL_51;
LABEL_29:
  if ((*((unsigned __int8 *)a2 + 16) | 2) == 6)
  {
    result = sub_10036C22C((uint64_t)a2, (_BYTE *)(*(_QWORD *)(v8 + 544) + 1), 0);
    v31 = *(_DWORD *)(v8 + 300);
  }
LABEL_51:
  if ((v31 & 0x600000) != 0)
  {
    v46 = *((_BYTE *)a2 + 16);
    if ((v46 & 3) == 2)
    {
      v47 = (unsigned __int8 *)(*(_QWORD *)(v8 + 544) + 1);
      v48 = *(unsigned __int16 *)(v8 + 970);
      v49 = *(unsigned __int16 *)(v8 + 972);
      v50 = 0x8000 - (v48 + v49);
      v51 = *a2;
      v52 = *a2;
      if (*((_BYTE *)a2 + 17) == 8)
      {
        v53 = *(_QWORD *)(v8 + 688);
        if (v53 && (v54 = *(_QWORD *)(v8 + 696)) != 0)
        {
          v55 = 0;
          if (v52)
          {
            result = *(_QWORD *)(v8 + 544) + 1;
            while (1)
            {
              v57 = (_BYTE *)*v47;
              v58 = v47[1];
              v59 = v47[2];
              v60 = (_DWORD)v57 == (_DWORD)v58 && (_DWORD)v57 == (_DWORD)v59;
              if (!v60)
                break;
              v61 = *(_QWORD *)(v8 + 672);
              if (v61)
              {
                v57 += v61;
                goto LABEL_66;
              }
LABEL_67:
              *(_BYTE *)result = (_BYTE)v57;
              if ((v46 & 4) != 0)
              {
                v56 = v47[3];
                v47 += 4;
                *(_BYTE *)(result + 1) = v56;
                result += 2;
                if (!--v52)
                  goto LABEL_104;
              }
              else
              {
                v47 += 3;
                ++result;
                if (!--v52)
                  goto LABEL_104;
              }
            }
            v57 = (_BYTE *)(v53
                          + ((*(unsigned __int8 *)(v54 + v58) * v49
                            + v57[v54] * v48
                            + v50 * *(unsigned __int8 *)(v54 + v59)
                            + 0x4000) >> 15));
            v55 = 1;
LABEL_66:
            LOBYTE(v57) = *v57;
            goto LABEL_67;
          }
        }
        else
        {
          v55 = 0;
          if (v52)
          {
            if ((a2[4] & 4) != 0)
            {
              v215 = (unsigned __int8 *)(*(_QWORD *)(v8 + 544) + 1);
              do
              {
                v216 = *v215;
                v217 = v215[1];
                result = v215[2];
                if (v216 != v217 || v216 != (_DWORD)result)
                {
                  LOBYTE(v216) = (v216 * v48 + v217 * v49 + v50 * result) >> 15;
                  v55 = 1;
                }
                *v47 = v216;
                v47[1] = v215[3];
                v47 += 2;
                v215 += 4;
                --v52;
              }
              while (v52);
            }
            else
            {
              v76 = (unsigned __int8 *)(*(_QWORD *)(v8 + 544) + 1);
              do
              {
                v77 = *v76;
                v78 = v76[1];
                result = v76[2];
                if (v77 != v78 || v77 != (_DWORD)result)
                {
                  LOBYTE(v77) = (v77 * v48 + v78 * v49 + v50 * result) >> 15;
                  v55 = 1;
                }
                *v47++ = v77;
                v76 += 3;
                --v52;
              }
              while (v52);
            }
          }
        }
      }
      else
      {
        v62 = *(_QWORD *)(v8 + 712);
        if (v62 && (v63 = *(_QWORD *)(v8 + 704)) != 0)
        {
          v55 = 0;
          if (v52)
          {
            result = *(_QWORD *)(v8 + 544) + 1;
            do
            {
              while (1)
              {
                v65 = *(unsigned __int8 *)result;
                v66 = *(unsigned __int8 *)(result + 1);
                v67 = v66 | (v65 << 8);
                v68 = *(unsigned __int8 *)(result + 2);
                v69 = *(unsigned __int8 *)(result + 3);
                v70 = __rev16(*(unsigned __int16 *)(result + 4));
                if ((v69 | ((_DWORD)v68 << 8)) == v67 && v67 == v70)
                {
                  v75 = *(_QWORD *)(v8 + 680);
                  if (v75)
                  {
                    LOBYTE(v66) = *(_WORD *)(*(_QWORD *)(v75 + 8 * (v69 >> *(_DWORD *)(v8 + 664))) + 2 * v68);
                    v65 = HIBYTE(*(unsigned __int16 *)(*(_QWORD *)(v75 + 8 * (v69 >> *(_DWORD *)(v8 + 664))) + 2 * v68));
                  }
                }
                else
                {
                  v72 = *(_DWORD *)(v8 + 664);
                  v73 = *(unsigned __int16 *)(*(_QWORD *)(v62 + 8 * (v69 >> v72)) + 2 * v68) * v49
                      + *(unsigned __int16 *)(*(_QWORD *)(v62 + 8 * (v67 >> v72)) + 2 * (v67 >> 8))
                      * v48
                      + v50
                      * *(unsigned __int16 *)(*(_QWORD *)(v62 + 8 * (v70 >> v72)) + 2 * (v70 >> 8))
                      + 0x4000;
                  v74 = *(unsigned __int16 *)(*(_QWORD *)(v63 + 8 * ((v73 >> 15) >> v72))
                                            + 2 * (v73 >> 23));
                  LOBYTE(v66) = v74;
                  v65 = v74 >> 8;
                  v55 = 1;
                }
                *v47 = v65;
                v47[1] = v66;
                if ((v46 & 4) == 0)
                  break;
                v47[2] = *(_BYTE *)(result + 6);
                v64 = *(_BYTE *)(result + 7);
                result += 8;
                v47[3] = v64;
                v47 += 4;
                if (!--v52)
                  goto LABEL_104;
              }
              result += 6;
              v47 += 2;
              --v52;
            }
            while (v52);
          }
        }
        else
        {
          v55 = 0;
          if (v52)
          {
            v80 = (unsigned __int16 *)(*(_QWORD *)(v8 + 544) + 1);
            do
            {
              while (1)
              {
                v82 = __rev16(*v80);
                v83 = __rev16(v80[1]);
                v84 = __rev16(v80[2]);
                if (v82 != v84 || v82 != v83)
                  v55 = 1;
                v86 = v83 * v49 + v82 * v48 + v84 * v50 + 0x4000;
                result = v86 >> 15;
                *v47 = v86 >> 23;
                v47[1] = result;
                if ((v46 & 4) == 0)
                  break;
                v47[2] = *((_BYTE *)v80 + 6);
                v81 = *((_BYTE *)v80 + 7);
                v80 += 4;
                v47[3] = v81;
                v47 += 4;
                if (!--v52)
                  goto LABEL_104;
              }
              v80 += 3;
              v47 += 2;
              --v52;
            }
            while (v52);
          }
        }
      }
LABEL_104:
      v87 = *((_BYTE *)a2 + 18) - 2;
      *((_BYTE *)a2 + 18) = v87;
      *((_BYTE *)a2 + 16) &= ~2u;
      v88 = *((_BYTE *)a2 + 17) * v87;
      *((_BYTE *)a2 + 19) = v88;
      v89 = (v88 * (unint64_t)v51 + 7) >> 3;
      v90 = v51 * (unint64_t)(v88 >> 3);
      if (v88 < 8u)
        v90 = v89;
      *((_QWORD *)a2 + 1) = v90;
      v31 = *(_DWORD *)(v8 + 300);
      if (v55)
      {
        *(_BYTE *)(v8 + 968) = 1;
        if ((v31 & 0x600000) == 0x400000)
        {
          result = sub_10035E924(v8, (uint64_t)"png_do_rgb_to_gray found nongray pixel");
          v31 = *(_DWORD *)(v8 + 300);
        }
        if ((v31 & 0x600000) == 0x200000)
          sub_10035E6F4(v8, "png_do_rgb_to_gray found nongray pixel");
      }
    }
  }
  if ((v31 & 0x4000) != 0 && (*(_BYTE *)(v8 + 293) & 8) == 0)
  {
    result = (uint64_t)sub_100364D78(a2, *(_QWORD *)(v8 + 544) + 1);
    v31 = *(_DWORD *)(v8 + 300);
  }
  if ((v31 & 0x80) != 0)
  {
    result = *(_QWORD *)(v8 + 544);
    v106 = (unsigned __int8 *)(result + 1);
    v107 = *(_QWORD *)(v8 + 672);
    v108 = *(_QWORD *)(v8 + 688);
    v109 = *(_QWORD *)(v8 + 696);
    v110 = *(_QWORD *)(v8 + 680);
    v111 = *(_QWORD *)(v8 + 704);
    v112 = *(_QWORD *)(v8 + 712);
    v113 = *(_DWORD *)(v8 + 664);
    v114 = *(_DWORD *)(v8 + 296);
    v115 = *a2;
    switch(*((_BYTE *)a2 + 16))
    {
      case 0:
        switch(*((_BYTE *)a2 + 17))
        {
          case 1:
            if (v115)
            {
              v116 = *(unsigned __int16 *)(v8 + 752);
              v117 = 7;
              do
              {
                v119 = *v106;
                if (((v119 >> v117) & 1) == v116)
                  *v106 = (*(unsigned __int16 *)(v8 + 636) << v117) | (0x7F7Fu >> (7 - v117)) & v119;
                v118 = v117 == 0;
                if (v117)
                  --v117;
                else
                  v117 = 7;
                if (v118)
                  ++v106;
                --v115;
              }
              while (v115);
            }
            break;
          case 2:
            if (v107)
            {
              if (v115)
              {
                v295 = *(unsigned __int16 *)(v8 + 752);
                v296 = 6;
                do
                {
                  v297 = *v106;
                  v300 = (v297 >> v296) & 3;
                  if (v300 == v295)
                  {
                    v297 &= 0x3F3Fu >> (6 - v296);
                    LOBYTE(v298) = *(unsigned __int16 *)(v8 + 636) << v296;
                  }
                  else
                  {
                    result = 0x3F3Fu >> (6 - v296);
                    LOBYTE(v297) = result & v297;
                    v298 = *(unsigned __int8 *)(v107 + 85 * v300) >> 6 << v296;
                  }
                  *v106 = v298 | v297;
                  v299 = v296 == 0;
                  if (v296)
                    v296 -= 2;
                  else
                    v296 = 6;
                  if (v299)
                    ++v106;
                  --v115;
                }
                while (v115);
              }
            }
            else if (v115)
            {
              v322 = *(unsigned __int16 *)(v8 + 752);
              v323 = 6;
              do
              {
                v325 = *v106;
                if (((v325 >> v323) & 3) == v322)
                  *v106 = (*(unsigned __int16 *)(v8 + 636) << v323) | (0x3F3Fu >> (6 - v323)) & v325;
                v324 = v323 == 0;
                if (v323)
                  v323 -= 2;
                else
                  v323 = 6;
                if (v324)
                  ++v106;
                --v115;
              }
              while (v115);
            }
            break;
          case 4:
            if (v107)
            {
              if (v115)
              {
                v301 = *(unsigned __int16 *)(v8 + 752);
                v302 = 4;
                do
                {
                  v305 = *v106;
                  v306 = (v305 >> v302) & 0xF;
                  v307 = (0xF0Fu >> (4 - v302)) & v305;
                  if ((_DWORD)v306 == v301)
                    LOBYTE(v303) = *(unsigned __int16 *)(v8 + 636) << v302;
                  else
                    v303 = *(unsigned __int8 *)(v107 + (v306 | (16 * v306))) >> 4 << v302;
                  *v106 = v303 | v307;
                  v304 = v302 == 0;
                  if (v302)
                    v302 -= 4;
                  else
                    v302 = 4;
                  if (v304)
                    ++v106;
                  --v115;
                }
                while (v115);
              }
            }
            else if (v115)
            {
              v326 = *(unsigned __int16 *)(v8 + 752);
              v327 = 4;
              do
              {
                v329 = *v106;
                if (((v329 >> v327) & 0xF) == v326)
                  *v106 = (*(unsigned __int16 *)(v8 + 636) << v327) | (0xF0Fu >> (4 - v327)) & v329;
                v328 = v327 == 0;
                if (v327)
                  v327 -= 4;
                else
                  v327 = 4;
                if (v328)
                  ++v106;
                --v115;
              }
              while (v115);
            }
            break;
          case 8:
            if (v107)
            {
              if (v115)
              {
                v308 = *(unsigned __int16 *)(v8 + 752);
                do
                {
                  while (1)
                  {
                    v309 = *v106;
                    if (v308 == (_DWORD)v309)
                      break;
                    *v106++ = *(_BYTE *)(v107 + v309);
                    if (!--v115)
                      goto LABEL_114;
                  }
                  *v106++ = *(_BYTE *)(v8 + 636);
                  --v115;
                }
                while (v115);
              }
            }
            else if (v115)
            {
              v330 = *(unsigned __int16 *)(v8 + 752);
              do
              {
                if (v330 == *v106)
                  *v106 = *(_BYTE *)(v8 + 636);
                ++v106;
                --v115;
              }
              while (v115);
            }
            break;
          case 0x10:
            if (v110)
            {
              if (v115)
              {
                v310 = *(unsigned __int16 *)(v8 + 752);
                do
                {
                  v311 = *v106;
                  v312 = v106[1];
                  v313 = (unsigned __int16 *)(v8 + 636);
                  if ((v312 | ((_DWORD)v311 << 8)) != v310)
                    v313 = (unsigned __int16 *)(*(_QWORD *)(v110 + 8 * (v312 >> v113)) + 2 * v311);
                  *(_WORD *)v106 = bswap32(*v313) >> 16;
                  v106 += 2;
                  --v115;
                }
                while (v115);
              }
            }
            else if (v115)
            {
              v331 = *(unsigned __int16 *)(v8 + 752);
              v332 = result + 2;
              do
              {
                if (v331 == bswap32(*(unsigned __int16 *)(v332 - 1)) >> 16)
                  *(_WORD *)(v332 - 1) = bswap32(*(unsigned __int16 *)(v8 + 636)) >> 16;
                v332 += 2;
                --v115;
              }
              while (v115);
            }
            break;
          default:
            goto LABEL_114;
        }
        break;
      case 2:
        if (*((_BYTE *)a2 + 17) == 8)
        {
          if (v107)
          {
            if (v115)
            {
              v128 = *(unsigned __int16 *)(v8 + 746);
              v129 = (_BYTE *)(result + 3);
              do
              {
                while (1)
                {
                  v130 = *(v129 - 2);
                  v131 = *(v129 - 1);
                  if (__PAIR64__(*(unsigned __int16 *)(v8 + 748), v128) == __PAIR64__(v131, v130)
                    && *(_WORD *)(v8 + 750) == *v129)
                  {
                    break;
                  }
                  *(v129 - 2) = *(_BYTE *)(v107 + v130);
                  *(v129 - 1) = *(_BYTE *)(v107 + v131);
                  *v129 = *(_BYTE *)(v107 + *v129);
                  v129 += 3;
                  if (!--v115)
                    goto LABEL_114;
                }
                *(v129 - 2) = *(_BYTE *)(v8 + 630);
                *(v129 - 1) = *(_BYTE *)(v8 + 632);
                *v129 = *(_BYTE *)(v8 + 634);
                v129 += 3;
                --v115;
              }
              while (v115);
            }
          }
          else if (v115)
          {
            v291 = *(unsigned __int16 *)(v8 + 746);
            v292 = (_BYTE *)(result + 3);
            do
            {
              if (v291 == *(v292 - 2)
                && *(_WORD *)(v8 + 748) == *(v292 - 1)
                && *(_WORD *)(v8 + 750) == *v292)
              {
                *(v292 - 2) = *(_BYTE *)(v8 + 630);
                *(v292 - 1) = *(_BYTE *)(v8 + 632);
                *v292 = *(_BYTE *)(v8 + 634);
              }
              v292 += 3;
              --v115;
            }
            while (v115);
          }
        }
        else if (v110)
        {
          if (v115)
          {
            v144 = *(unsigned __int16 *)(v8 + 746);
            v145 = (unsigned __int8 *)(result + 3);
            do
            {
              v147 = *(v145 - 2);
              v148 = *(v145 - 1);
              v149 = v145[2];
              v150 = v145[3];
              result = v145[1];
              v151 = *v145;
              if ((v148 | ((_DWORD)v147 << 8)) == v144
                && (result | (v151 << 8)) == *(unsigned __int16 *)(v8 + 748)
                && (v150 | ((_DWORD)v149 << 8)) == *(unsigned __int16 *)(v8 + 750))
              {
                *((_WORD *)v145 - 1) = bswap32(*(unsigned __int16 *)(v8 + 630)) >> 16;
                *(_WORD *)v145 = bswap32(*(unsigned __int16 *)(v8 + 632)) >> 16;
                v146 = (unsigned __int16 *)(v8 + 634);
              }
              else
              {
                *((_WORD *)v145 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v110 + 8 * (v148 >> v113)) + 2 * v147)) >> 16;
                *(_WORD *)v145 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v110 + 8 * (result >> v113))
                                                             + 2 * v151)) >> 16;
                v146 = (unsigned __int16 *)(*(_QWORD *)(v110 + 8 * (v150 >> v113)) + 2 * v149);
              }
              *((_WORD *)v145 + 1) = bswap32(*v146) >> 16;
              v145 += 6;
              --v115;
            }
            while (v115);
          }
        }
        else if (v115)
        {
          v293 = *(unsigned __int16 *)(v8 + 746);
          v294 = (unsigned __int16 *)(result + 3);
          do
          {
            if (v293 == bswap32(*(v294 - 1)) >> 16
              && *(unsigned __int16 *)(v8 + 748) == bswap32(*v294) >> 16
              && __rev16(v294[1]) == *(unsigned __int16 *)(v8 + 750))
            {
              *(v294 - 1) = bswap32(*(unsigned __int16 *)(v8 + 630)) >> 16;
              *v294 = bswap32(*(unsigned __int16 *)(v8 + 632)) >> 16;
              v294[1] = bswap32(*(unsigned __int16 *)(v8 + 634)) >> 16;
            }
            v294 += 3;
            --v115;
          }
          while (v115);
        }
        break;
      case 4:
        if (*((_BYTE *)a2 + 17) == 8)
        {
          if (v109 && v108 && v107)
          {
            for (; v115; --v115)
            {
              v133 = v106[1];
              if (v106[1])
              {
                if (v133 == 255)
                {
                  LOBYTE(v132) = *(_BYTE *)(v107 + *v106);
                }
                else
                {
                  v134 = (unsigned __int16)(*(unsigned __int8 *)(v109 + *v106) * (_WORD)v133
                                          + *(_WORD *)(v8 + 646) * (v133 ^ 0xFF)
                                          + 128);
                  v132 = v134 + (v134 >> 8);
                  if ((v114 & 0x2000) != 0)
                    v132 >>= 8;
                  else
                    LOBYTE(v132) = *(_BYTE *)(v108 + BYTE1(v132));
                }
              }
              else
              {
                LOBYTE(v132) = *(_BYTE *)(v8 + 636);
              }
              *v106 = v132;
              v106 += 2;
            }
          }
          else
          {
            for (; v115; --v115)
            {
              v270 = v106[1];
              if (v270 != 255)
              {
                if (v106[1])
                {
                  v268 = (unsigned __int16)(*v106 * (_WORD)v270 + *(_WORD *)(v8 + 636) * (v270 ^ 0xFF) + 128);
                  v269 = (v268 + (v268 >> 8)) >> 8;
                }
                else
                {
                  LOBYTE(v269) = *(_BYTE *)(v8 + 636);
                }
                *v106 = v269;
              }
              v106 += 2;
            }
          }
        }
        else if (v110 && v111 && v112)
        {
          if (v115)
          {
            v152 = (unsigned __int8 *)(result + 2);
            do
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    v153 = __rev16(*(unsigned __int16 *)(v152 + 1));
                    if (v153)
                      break;
                    *(_WORD *)(v152 - 1) = bswap32(*(unsigned __int16 *)(v8 + 636)) >> 16;
                    v152 += 4;
                    if (!--v115)
                      goto LABEL_114;
                  }
                  if (v153 != 0xFFFF)
                    break;
                  *(_WORD *)(v152 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v110 + 8 * (*v152 >> v113))
                                                                     + 2 * *(v152 - 1))) >> 16;
                  v152 += 4;
                  if (!--v115)
                    goto LABEL_114;
                }
                result = (v153 ^ 0xFFFF) * *(unsigned __int16 *)(v8 + 646);
                v154 = result
                     + v153 * *(unsigned __int16 *)(*(_QWORD *)(v112 + 8 * (*v152 >> v113)) + 2 * *(v152 - 1))
                     + 0x8000;
                v155 = v154 + HIWORD(v154);
                if ((v114 & 0x2000) != 0)
                  break;
                v156 = *(_WORD *)(*(_QWORD *)(v111 + 8 * (BYTE2(v155) >> v113)) + 2 * HIBYTE(v155));
                *(v152 - 1) = HIBYTE(v156);
                *v152 = v156;
                v152 += 4;
                if (!--v115)
                  goto LABEL_114;
              }
              *(v152 - 1) = HIBYTE(v155);
              *v152 = BYTE2(v155);
              v152 += 4;
              --v115;
            }
            while (v115);
          }
        }
        else if (v115)
        {
          v277 = result + 2;
          do
          {
            v280 = __rev16(*(unsigned __int16 *)(v277 + 1));
            if (v280 != 0xFFFF)
            {
              if (v280)
              {
                v278 = __rev16(*(unsigned __int16 *)(v277 - 1)) * v280
                     + (v280 ^ 0xFFFF) * *(unsigned __int16 *)(v8 + 636)
                     + 0x8000;
                v279 = v278 + HIWORD(v278);
                *(_BYTE *)(v277 - 1) = HIBYTE(v279);
                *(_BYTE *)v277 = BYTE2(v279);
              }
              else
              {
                *(_WORD *)(v277 - 1) = bswap32(*(unsigned __int16 *)(v8 + 636)) >> 16;
              }
            }
            v277 += 4;
            --v115;
          }
          while (v115);
        }
        break;
      case 6:
        if (*((_BYTE *)a2 + 17) == 8)
        {
          if (v109 && v108 && v107)
          {
            if (v115)
            {
              v135 = (unsigned __int8 *)(result + 2);
              do
              {
                v137 = v135[2];
                if (v135[2])
                {
                  if (v137 == 255)
                  {
                    *(v135 - 1) = *(_BYTE *)(v107 + *(v135 - 1));
                    *v135 = *(_BYTE *)(v107 + *v135);
                    LOBYTE(v136) = *(_BYTE *)(v107 + v135[1]);
                  }
                  else
                  {
                    v138 = v137 ^ 0xFF;
                    v139 = *(unsigned __int16 *)(v8 + 640) * (v137 ^ 0xFF)
                         + *(unsigned __int8 *)(v109 + *(v135 - 1)) * v137
                         + 128;
                    v140 = v139 + BYTE1(v139);
                    if ((v114 & 0x2000) != 0)
                      v140 >>= 8;
                    else
                      LOBYTE(v140) = *(_BYTE *)(v108 + BYTE1(v140));
                    *(v135 - 1) = v140;
                    v141 = *(unsigned __int16 *)(v8 + 642) * v138 + *(unsigned __int8 *)(v109 + *v135) * v137 + 128;
                    v142 = v141 + BYTE1(v141);
                    if ((v114 & 0x2000) != 0)
                      v142 >>= 8;
                    else
                      LOBYTE(v142) = *(_BYTE *)(v108 + BYTE1(v142));
                    *v135 = v142;
                    v143 = *(unsigned __int16 *)(v8 + 644) * v138 + *(unsigned __int8 *)(v109 + v135[1]) * v137 + 128;
                    v136 = v143 + BYTE1(v143);
                    if ((v114 & 0x2000) != 0)
                      v136 >>= 8;
                    else
                      LOBYTE(v136) = *(_BYTE *)(v108 + BYTE1(v136));
                  }
                }
                else
                {
                  *(v135 - 1) = *(_BYTE *)(v8 + 630);
                  *v135 = *(_BYTE *)(v8 + 632);
                  LOBYTE(v136) = *(_BYTE *)(v8 + 634);
                }
                v135[1] = v136;
                v135 += 4;
                --v115;
              }
              while (v115);
            }
          }
          else if (v115)
          {
            v271 = (unsigned __int8 *)(result + 2);
            do
            {
              v276 = v271[2];
              if (v276 != 255)
              {
                if (v271[2])
                {
                  v272 = *(_WORD *)(v8 + 630) * (v276 ^ 0xFF) + *(v271 - 1) * (_WORD)v276 + 128;
                  *(v271 - 1) = (unsigned __int16)(v272 + HIBYTE(v272)) >> 8;
                  v273 = *(_WORD *)(v8 + 632) * (v276 ^ 0xFF) + *v271 * (_WORD)v276 + 128;
                  *v271 = (unsigned __int16)(v273 + HIBYTE(v273)) >> 8;
                  v274 = *(unsigned __int16 *)(v8 + 634) * (v276 ^ 0xFF) + v271[1] * v276 + 128;
                  v275 = (v274 + BYTE1(v274)) >> 8;
                }
                else
                {
                  *(v271 - 1) = *(_BYTE *)(v8 + 630);
                  *v271 = *(_BYTE *)(v8 + 632);
                  LOBYTE(v275) = *(_BYTE *)(v8 + 634);
                }
                v271[1] = v275;
              }
              v271 += 4;
              --v115;
            }
            while (v115);
          }
        }
        else if (v110 && v111 && v112)
        {
          if (v115)
          {
            v157 = (unsigned __int8 *)(result + 4);
            do
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    v158 = __rev16(*(unsigned __int16 *)(v157 + 3));
                    if (v158)
                      break;
                    *(_WORD *)(v157 - 3) = bswap32(*(unsigned __int16 *)(v8 + 630)) >> 16;
                    *(_WORD *)(v157 - 1) = bswap32(*(unsigned __int16 *)(v8 + 632)) >> 16;
                    *(_WORD *)(v157 + 1) = bswap32(*(unsigned __int16 *)(v8 + 634)) >> 16;
                    v157 += 8;
                    if (!--v115)
                      goto LABEL_114;
                  }
                  if (v158 != 0xFFFF)
                    break;
                  *(_WORD *)(v157 - 3) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v110 + 8 * (*(v157 - 2) >> v113))
                                                                     + 2 * *(v157 - 3))) >> 16;
                  *(_WORD *)(v157 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v110 + 8 * (*v157 >> v113))
                                                                     + 2 * *(v157 - 1))) >> 16;
                  *(_WORD *)(v157 + 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v110 + 8 * (v157[2] >> v113))
                                                                     + 2 * v157[1])) >> 16;
                  v157 += 8;
                  if (!--v115)
                    goto LABEL_114;
                }
                v159 = v158 ^ 0xFFFF;
                v160 = (v158 ^ 0xFFFF) * *(unsigned __int16 *)(v8 + 640)
                     + v158 * *(unsigned __int16 *)(*(_QWORD *)(v112 + 8 * (*(v157 - 2) >> v113)) + 2 * *(v157 - 3))
                     + 0x8000;
                v161 = v160 + HIWORD(v160);
                v162 = HIBYTE(v161);
                if ((v114 & 0x2000) != 0)
                {
                  v163 = HIWORD(v161);
                }
                else
                {
                  v163 = *(unsigned __int16 *)(*(_QWORD *)(v111 + 8 * (BYTE2(v161) >> v113)) + 2 * v162);
                  v162 = v163 >> 8;
                }
                *(v157 - 3) = v162;
                *(v157 - 2) = v163;
                v164 = v159 * *(unsigned __int16 *)(v8 + 642)
                     + v158 * *(unsigned __int16 *)(*(_QWORD *)(v112 + 8 * (*v157 >> v113)) + 2 * *(v157 - 1))
                     + 0x8000;
                v165 = v164 + HIWORD(v164);
                v166 = HIBYTE(v165);
                if ((v114 & 0x2000) != 0)
                {
                  v167 = HIWORD(v165);
                }
                else
                {
                  v167 = *(unsigned __int16 *)(*(_QWORD *)(v111 + 8 * (BYTE2(v165) >> v113)) + 2 * v166);
                  v166 = v167 >> 8;
                }
                *(v157 - 1) = v166;
                *v157 = v167;
                result = *(unsigned __int16 *)(*(_QWORD *)(v112 + 8 * (v157[2] >> v113)) + 2 * v157[1]);
                v168 = v159 * *(unsigned __int16 *)(v8 + 644)
                     + v158 * result
                     + 0x8000
                     + ((v159 * *(unsigned __int16 *)(v8 + 644) + v158 * result + 0x8000) >> 16);
                if ((v114 & 0x2000) != 0)
                  break;
                v169 = *(_WORD *)(*(_QWORD *)(v111 + 8 * (BYTE2(v168) >> v113)) + 2 * HIBYTE(v168));
                v157[1] = HIBYTE(v169);
                v157[2] = v169;
                v157 += 8;
                if (!--v115)
                  goto LABEL_114;
              }
              v157[1] = HIBYTE(v168);
              v157[2] = BYTE2(v168);
              v157 += 8;
              --v115;
            }
            while (v115);
          }
        }
        else if (v115)
        {
          v281 = result + 4;
          do
          {
            v290 = __rev16(*(unsigned __int16 *)(v281 + 3));
            if (v290 != 0xFFFF)
            {
              if (v290)
              {
                v282 = __rev16(*(unsigned __int16 *)(v281 - 1));
                v283 = __rev16(*(unsigned __int16 *)(v281 + 1));
                v284 = (v290 ^ 0xFFFF) * *(unsigned __int16 *)(v8 + 630)
                     + __rev16(*(unsigned __int16 *)(v281 - 3)) * v290
                     + 0x8000;
                v285 = v284 + HIWORD(v284);
                *(_BYTE *)(v281 - 3) = HIBYTE(v285);
                *(_BYTE *)(v281 - 2) = BYTE2(v285);
                v286 = (v290 ^ 0xFFFF) * *(unsigned __int16 *)(v8 + 632) + v282 * v290 + 0x8000;
                v287 = v286 + HIWORD(v286);
                *(_BYTE *)(v281 - 1) = HIBYTE(v287);
                *(_BYTE *)v281 = BYTE2(v287);
                v288 = (v290 ^ 0xFFFF) * *(unsigned __int16 *)(v8 + 634) + v283 * v290 + 0x8000;
                v289 = v288 + HIWORD(v288);
                *(_BYTE *)(v281 + 1) = HIBYTE(v289);
                *(_BYTE *)(v281 + 2) = BYTE2(v289);
              }
              else
              {
                *(_WORD *)(v281 - 3) = bswap32(*(unsigned __int16 *)(v8 + 630)) >> 16;
                *(_WORD *)(v281 - 1) = bswap32(*(unsigned __int16 *)(v8 + 632)) >> 16;
                *(_WORD *)(v281 + 1) = bswap32(*(unsigned __int16 *)(v8 + 634)) >> 16;
              }
            }
            v281 += 8;
            --v115;
          }
          while (v115);
        }
        break;
      default:
        break;
    }
  }
LABEL_114:
  v91 = *(_DWORD *)(v8 + 300);
  if ((v91 & 0x602000) == 0x2000)
  {
    if ((v91 & 0x80) != 0)
    {
      if (*(_WORD *)(v8 + 600))
        goto LABEL_149;
      v92 = *(unsigned __int8 *)(v8 + 607);
      if ((v92 & 4) != 0)
        goto LABEL_149;
    }
    else
    {
      v92 = *(unsigned __int8 *)(v8 + 607);
    }
    if (v92 != 3)
    {
      if ((v93 = *(unsigned __int8 **)(v8 + 544),
            v94 = *(_QWORD *)(v8 + 672),
            v95 = *(_QWORD *)(v8 + 680),
            v96 = *(_DWORD *)(v8 + 664),
            v97 = *a2,
            v98 = *((unsigned __int8 *)a2 + 17),
            v98 <= 8)
        && v94
        || v98 == 16 && v95)
      {
        v99 = v93 + 1;
        switch(*((_BYTE *)a2 + 16))
        {
          case 0:
            if (v98 == 2 && v97)
            {
              v100 = 0;
              v101 = v93 + 1;
              do
              {
                v102 = *v101;
                v103 = v102 & 0xC;
                v104 = (v102 & 0xC) >> 2;
                result = (*(unsigned __int8 *)(v94
                                             + ((4 * (_DWORD)v103) & 0xFFFFFF3F | ((v104 & 3) << 6) | (v103 >> 2) | v103)) >> 4) & 0xC;
                *v101++ = (*(_BYTE *)(v94
                                    + (((v102 & 0x30) >> 2) & 0xFFFFFF3F | ((((v102 & 0x30) >> 4) & 3) << 6) | ((v102 & 0x30) >> 4) | (unint64_t)(v102 & 0x30))) >> 2) & 0x30 | *(_BYTE *)(v94 + ((v102 >> 6) | ((v102 & 0xC0) >> 4) | ((v102 & 0xC0) >> 2) | (unint64_t)(v102 & 0xC0))) & 0xC0 | (*(_BYTE *)(v94 + ((4 * (_DWORD)v103) & 0xFFFFFF3F | ((v104 & 3) << 6) | (v103 >> 2) | v103)) >> 4) & 0xC | (*(_BYTE *)(v94 + 85 * (v102 & 3)) >> 6);
                v100 += 4;
              }
              while (v100 < v97);
              v98 = *((unsigned __int8 *)a2 + 17);
            }
            if (v98 == 4)
            {
              if (v97)
              {
                for (i = 0; i < v97; i += 2)
                {
                  *v99 = *(_BYTE *)(v94 + (*v99 & 0xF0 | ((unint64_t)*v99 >> 4))) & 0xF0 | (*(_BYTE *)(v94 + (*v99 & 0xF | (16 * (*v99 & 0xF)))) >> 4);
                  ++v99;
                }
              }
            }
            else if (v98 == 8)
            {
              for (; v97; --v97)
              {
                *v99 = *(_BYTE *)(v94 + *v99);
                ++v99;
              }
            }
            else if (v98 == 16 && v97)
            {
              v105 = v93 + 2;
              do
              {
                *(_WORD *)(v105 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v95 + 8 * (*v105 >> v96))
                                                                   + 2 * *(v105 - 1))) >> 16;
                v105 += 2;
                --v97;
              }
              while (v97);
            }
            break;
          case 2:
            if (v98 == 8)
            {
              for (; v97; --v97)
              {
                *v99 = *(_BYTE *)(v94 + *v99);
                v99[1] = *(_BYTE *)(v94 + v99[1]);
                v99[2] = *(_BYTE *)(v94 + v99[2]);
                v99 += 3;
              }
            }
            else if (v97)
            {
              v314 = v93 + 3;
              do
              {
                *((_WORD *)v314 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v95 + 8 * (*(v314 - 1) >> v96))
                                                                   + 2 * *(v314 - 2))) >> 16;
                *(_WORD *)v314 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v95 + 8 * (v314[1] >> v96)) + 2 * *v314)) >> 16;
                *((_WORD *)v314 + 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v95 + 8 * (v314[3] >> v96))
                                                                   + 2 * v314[2])) >> 16;
                v314 += 6;
                --v97;
              }
              while (v97);
            }
            break;
          case 4:
            if (v98 == 8)
            {
              for (; v97; --v97)
              {
                *v99 = *(_BYTE *)(v94 + *v99);
                v99 += 2;
              }
            }
            else if (v97)
            {
              v315 = v93 + 2;
              do
              {
                *(_WORD *)(v315 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v95 + 8 * (*v315 >> v96))
                                                                   + 2 * *(v315 - 1))) >> 16;
                v315 += 4;
                --v97;
              }
              while (v97);
            }
            break;
          case 6:
            if (v98 == 8)
            {
              for (; v97; --v97)
              {
                *v99 = *(_BYTE *)(v94 + *v99);
                v99[1] = *(_BYTE *)(v94 + v99[1]);
                v99[2] = *(_BYTE *)(v94 + v99[2]);
                v99 += 4;
              }
            }
            else if (v97)
            {
              v316 = v93 + 3;
              do
              {
                *((_WORD *)v316 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v95 + 8 * (*(v316 - 1) >> v96))
                                                                   + 2 * *(v316 - 2))) >> 16;
                *(_WORD *)v316 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v95 + 8 * (v316[1] >> v96)) + 2 * *v316)) >> 16;
                *((_WORD *)v316 + 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v95 + 8 * (v316[3] >> v96))
                                                                   + 2 * v316[2])) >> 16;
                v316 += 8;
                --v97;
              }
              while (v97);
            }
            break;
          default:
            break;
        }
      }
    }
  }
LABEL_149:
  v120 = *(_DWORD *)(v8 + 300);
  if ((~v120 & 0x40080) == 0 && (*((unsigned __int8 *)a2 + 16) | 2) == 6)
  {
    result = sub_10036C22C((uint64_t)a2, (_BYTE *)(*(_QWORD *)(v8 + 544) + 1), 0);
    v120 = *(_DWORD *)(v8 + 300);
  }
  if ((v120 & 0x800000) != 0 && (a2[4] & 4) != 0)
  {
    v121 = *(_QWORD *)(v8 + 544);
    v122 = *a2;
    v123 = *((unsigned __int8 *)a2 + 17);
    if (v123 != 16)
    {
      if (v123 == 8)
      {
        v124 = *(_QWORD *)(v8 + 688);
        if (v124)
        {
          if (v122)
          {
            v125 = v121 + 1;
            if ((a2[4] & 2) != 0)
              v126 = 4;
            else
              v126 = 2;
            v127 = (_BYTE *)(v125 + (v126 - 1));
            do
            {
              *v127 = *(_BYTE *)(v124 + *v127);
              v127 += v126;
              --v122;
            }
            while (v122);
          }
          goto LABEL_261;
        }
      }
LABEL_260:
      result = sub_10035E924(v8, (uint64_t)"png_do_encode_alpha: unexpected call");
      goto LABEL_261;
    }
    v170 = *(_QWORD *)(v8 + 704);
    if (!v170)
      goto LABEL_260;
    if (v122)
    {
      v171 = *(_DWORD *)(v8 + 664);
      if ((a2[4] & 2) != 0)
        v172 = 8;
      else
        v172 = 4;
      v173 = (unsigned __int8 *)((v172 - 4) + v121 + 4);
      do
      {
        *(_WORD *)(v173 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v170 + 8 * (*v173 >> v171))
                                                           + 2 * *(v173 - 1))) >> 16;
        v173 += v172;
        --v122;
      }
      while (v122);
    }
  }
LABEL_261:
  v174 = *(_DWORD *)(v8 + 300);
  if ((v174 & 0x4000000) != 0 && *((_BYTE *)a2 + 17) == 16)
  {
    v175 = *((_QWORD *)a2 + 1);
    if (v175 >= 1)
    {
      v176 = (unsigned __int8 *)(*(_QWORD *)(v8 + 544) + 1);
      v177 = &v176[v175];
      v178 = v176;
      do
      {
        *v178++ = *v176 + ((0xFFFF * (v176[1] - *v176) + 8388480) >> 24);
        v176 += 2;
      }
      while (v176 < v177);
      v174 = *(_DWORD *)(v8 + 300);
    }
    *((_BYTE *)a2 + 17) = 8;
    v179 = *((unsigned __int8 *)a2 + 18);
    *((_BYTE *)a2 + 19) = 8 * v179;
    *((_QWORD *)a2 + 1) = *a2 * v179;
  }
  if ((v174 & 0x400) != 0 && *((_BYTE *)a2 + 17) == 16)
  {
    v180 = *((_QWORD *)a2 + 1);
    if (v180 >= 1)
    {
      v181 = (char *)(*(_QWORD *)(v8 + 544) + 1);
      v182 = &v181[v180];
      v183 = v181;
      do
      {
        v184 = *v183;
        v183 += 2;
        *v181++ = v184;
      }
      while (v183 < v182);
      v174 = *(_DWORD *)(v8 + 300);
    }
    *((_BYTE *)a2 + 17) = 8;
    v185 = *((unsigned __int8 *)a2 + 18);
    *((_BYTE *)a2 + 19) = 8 * v185;
    *((_QWORD *)a2 + 1) = *a2 * v185;
  }
  if ((v174 & 0x40) != 0)
  {
    if (*((_BYTE *)a2 + 17) != 8)
    {
LABEL_293:
      if (!*((_QWORD *)a2 + 1))
        sub_10035E6F4(v8, "png_do_quantize returned rowbytes=0");
      v174 = *(_DWORD *)(v8 + 300);
      goto LABEL_295;
    }
    v186 = (_BYTE *)(*(_QWORD *)(v8 + 544) + 1);
    v187 = *(_QWORD *)(v8 + 880);
    v188 = *(_QWORD *)(v8 + 888);
    v189 = *a2;
    v190 = *a2;
    v191 = *((unsigned __int8 *)a2 + 16);
    if (v187 && v191 == 2)
    {
      if (v190)
      {
        v192 = (unsigned __int8 *)(*(_QWORD *)(v8 + 544) + 1);
        do
        {
          *v186++ = *(_BYTE *)(v187
                             + ((*v192 << 7) & 0x7C00 | (32 * (((unint64_t)v192[1] >> 3) & 0x1F)) | ((unint64_t)v192[2] >> 3)));
          v192 += 3;
          --v190;
        }
        while (v190);
        goto LABEL_288;
      }
    }
    else
    {
      if (!v187 || v191 != 6)
      {
        if (v188 && v191 == 3 && v190)
        {
          do
          {
            *v186 = *(_BYTE *)(v188 + *v186);
            ++v186;
            --v190;
          }
          while (v190);
        }
        goto LABEL_293;
      }
      if (v190)
      {
        v193 = (unsigned __int8 *)(*(_QWORD *)(v8 + 544) + 1);
        do
        {
          *v186++ = *(_BYTE *)(v187
                             + ((*v193 << 7) & 0x7C00 | (32 * (((unint64_t)v193[1] >> 3) & 0x1F)) | ((unint64_t)v193[2] >> 3)));
          v193 += 4;
          --v190;
        }
        while (v190);
LABEL_288:
        v194 = *((unsigned __int8 *)a2 + 17);
        *((_BYTE *)a2 + 16) = 3;
        *((_BYTE *)a2 + 18) = 1;
        *((_BYTE *)a2 + 19) = v194;
        if (v194 < 8)
        {
          v195 = (v194 * (unint64_t)v189 + 7) >> 3;
LABEL_292:
          *((_QWORD *)a2 + 1) = v195;
          goto LABEL_293;
        }
LABEL_291:
        v195 = v189 * (unint64_t)(v194 >> 3);
        goto LABEL_292;
      }
    }
    *((_BYTE *)a2 + 16) = 3;
    *((_WORD *)a2 + 9) = 2049;
    v194 = 8;
    goto LABEL_291;
  }
LABEL_295:
  if ((v174 & 0x200) != 0 && *((_BYTE *)a2 + 17) == 8 && *((_BYTE *)a2 + 16) != 3)
  {
    v196 = *((_QWORD *)a2 + 1);
    if (v196 >= 1)
    {
      v197 = *(_QWORD *)(v8 + 544);
      v198 = v197 + 1 + v196 + v196;
      v199 = (char *)(v197 + v196);
      v200 = v199;
      do
      {
        v201 = *v200--;
        *(_BYTE *)(v198 - 2) = v201;
        v198 -= 2;
        *(_BYTE *)(v198 + 1) = v201;
        v202 = v198 > (unint64_t)v199;
        v199 = v200;
      }
      while (v202);
      v196 = *((_QWORD *)a2 + 1);
      v174 = *(_DWORD *)(v8 + 300);
    }
    *((_QWORD *)a2 + 1) = 2 * v196;
    *((_BYTE *)a2 + 17) = 16;
    *((_BYTE *)a2 + 19) = 16 * *((_BYTE *)a2 + 18);
  }
  if ((v174 & 0x4000) != 0 && (*(_BYTE *)(v8 + 293) & 8) != 0)
  {
    result = (uint64_t)sub_100364D78(a2, *(_QWORD *)(v8 + 544) + 1);
    v174 = *(_DWORD *)(v8 + 300);
  }
  if ((v174 & 0x20) != 0)
  {
    result = sub_10036BF3C((uint64_t)a2, (int8x16_t *)(*(_QWORD *)(v8 + 544) + 1));
    v174 = *(_DWORD *)(v8 + 300);
  }
  if ((v174 & 0x80000) != 0)
  {
    v203 = *(_QWORD *)(v8 + 544);
    v204 = v203 + 1;
    v205 = *a2;
    v206 = *((unsigned __int8 *)a2 + 16);
    if (v206 == 4)
    {
      if (*((_BYTE *)a2 + 17) == 8)
      {
        if (!(_DWORD)v205)
          goto LABEL_352;
        v210 = v204 + *((_QWORD *)a2 + 1);
        if ((_DWORD)v205 == 1)
        {
          LODWORD(v211) = 0;
          v212 = v204 + *((_QWORD *)a2 + 1);
        }
        else
        {
          v211 = v205 & 0xFFFFFFFE;
          v212 = v210 - 2 * v211;
          v224 = (_BYTE *)(v210 - 1);
          v225 = v211;
          do
          {
            v226 = ~*(v224 - 2);
            *v224 = ~*v224;
            *(v224 - 2) = v226;
            v224 -= 4;
            v225 -= 2;
          }
          while (v225);
          if (v211 == v205)
            goto LABEL_352;
        }
        v227 = v205 - v211;
        v228 = (_BYTE *)(v212 - 1);
        do
        {
          *v228 = ~*v228;
          v228 -= 2;
          --v227;
        }
        while (v227);
        goto LABEL_352;
      }
      if ((_DWORD)v205)
      {
        v214 = (_BYTE *)(v203 + *((_QWORD *)a2 + 1));
        do
        {
          *v214 = ~*v214;
          *(v214 - 1) = ~*(v214 - 1);
          v214 -= 4;
          LODWORD(v205) = v205 - 1;
        }
        while ((_DWORD)v205);
      }
    }
    else
    {
      if (v206 != 6)
        goto LABEL_352;
      if (*((_BYTE *)a2 + 17) == 8)
      {
        if (!(_DWORD)v205)
          goto LABEL_352;
        v207 = v204 + *((_QWORD *)a2 + 1);
        if ((_DWORD)v205 == 1)
        {
          LODWORD(v208) = 0;
          v209 = v204 + *((_QWORD *)a2 + 1);
LABEL_344:
          v222 = v205 - v208;
          v223 = (_BYTE *)(v209 - 1);
          do
          {
            *v223 = ~*v223;
            v223 -= 4;
            --v222;
          }
          while (v222);
          goto LABEL_352;
        }
        v208 = v205 & 0xFFFFFFFE;
        v209 = v207 - 4 * v208;
        v219 = (_BYTE *)(v207 - 1);
        v220 = v208;
        do
        {
          v221 = ~*(v219 - 4);
          *v219 = ~*v219;
          *(v219 - 4) = v221;
          v219 -= 8;
          v220 -= 2;
        }
        while (v220);
        if (v208 != v205)
          goto LABEL_344;
      }
      else if ((_DWORD)v205)
      {
        v213 = (_BYTE *)(v203 + *((_QWORD *)a2 + 1));
        do
        {
          *v213 = ~*v213;
          *(v213 - 1) = ~*(v213 - 1);
          v213 -= 8;
          LODWORD(v205) = v205 - 1;
        }
        while ((_DWORD)v205);
      }
    }
  }
LABEL_352:
  v229 = *(_DWORD *)(v8 + 300);
  if ((v229 & 8) == 0)
    goto LABEL_575;
  v230 = *((unsigned __int8 *)a2 + 16);
  if (v230 == 3)
    goto LABEL_575;
  v231 = *(_QWORD *)(v8 + 544);
  v232 = *((unsigned __int8 *)a2 + 17);
  if ((v230 & 2) != 0)
  {
    v234 = *(unsigned __int8 *)(v8 + 725);
    v235 = v232 - *(unsigned __int8 *)(v8 + 727);
    v462 = v232 - *(unsigned __int8 *)(v8 + 726);
    v463 = v235;
    v233 = 3;
    v461 = v232 - v234;
    if ((v230 & 4) == 0)
      goto LABEL_359;
    goto LABEL_358;
  }
  v233 = 1;
  v461 = v232 - *(unsigned __int8 *)(v8 + 728);
  if ((v230 & 4) != 0)
LABEL_358:
    *(&v461 + v233++) = v232 - *(unsigned __int8 *)(v8 + 729);
LABEL_359:
  v236 = v461;
  v237 = v461 > 0 && v461 < v232;
  if (v461 <= 0 || v461 >= v232)
    v236 = 0;
  v461 = v236;
  if (v233 != 1)
  {
    v238 = v462;
    v239 = v462 > 0;
    v240 = v462 < v232;
    if (!v239 || !v240)
      v238 = 0;
    v462 = v238;
    if (v239 && v240)
      v237 = 1;
    if (v233 != 2)
    {
      v241 = v463;
      v242 = v463 > 0;
      v243 = v463 < v232;
      if (!v242 || !v243)
        v241 = 0;
      v463 = v241;
      if (v242 && v243)
        v237 = 1;
      if (v233 != 3)
      {
        v244 = v464;
        v245 = v464 > 0;
        v246 = v464 < v232;
        if (!v245 || !v246)
          v244 = 0;
        v464 = v244;
        if (v245 && v246)
          v237 = 1;
      }
    }
  }
  if (v237)
  {
    HIDWORD(v247) = v232;
    LODWORD(v247) = v232 - 2;
    v248 = (unsigned __int8 *)(v231 + 1);
    switch((v247 >> 1))
    {
      case 0u:
        v249 = *((_QWORD *)a2 + 1);
        if (v249 < 1)
          goto LABEL_574;
        if (v249 + v231 + 1 > (unint64_t)(v231 + 2))
          v250 = v249 + v231 + 1;
        else
          v250 = v231 + 2;
        v251 = v250 + ~v231;
        v252 = (unsigned __int8 *)(v231 + 1);
        if (v251 < 8)
          goto LABEL_572;
        if (v251 >= 0x20)
        {
          v253 = v251 & 0xFFFFFFFFFFFFFFE0;
          v334 = (uint8x16_t *)(v231 + 17);
          a3.i16[0] = 21845;
          a3.i8[2] = 85;
          a3.i8[3] = 85;
          a3.i8[4] = 85;
          a3.i8[5] = 85;
          a3.i8[6] = 85;
          a3.i8[7] = 85;
          a3.i8[8] = 85;
          a3.i8[9] = 85;
          a3.i8[10] = 85;
          a3.i8[11] = 85;
          a3.i8[12] = 85;
          a3.i8[13] = 85;
          a3.i8[14] = 85;
          a3.i8[15] = 85;
          v335 = v251 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v336 = vandq_s8((int8x16_t)vshrq_n_u8(*v334, 1uLL), (int8x16_t)a3);
            v334[-1] = (uint8x16_t)vandq_s8((int8x16_t)vshrq_n_u8(v334[-1], 1uLL), (int8x16_t)a3);
            *v334 = (uint8x16_t)v336;
            v334 += 2;
            v335 -= 32;
          }
          while (v335);
          if (v251 == v253)
            goto LABEL_574;
          if ((v251 & 0x18) == 0)
          {
            v252 = &v248[v253];
LABEL_572:
            v342 = &v248[v249];
            do
            {
              *v252 = (*v252 >> 1) & 0x55;
              ++v252;
            }
            while (v252 < v342);
LABEL_574:
            v229 = *(_DWORD *)(v8 + 300);
            break;
          }
        }
        else
        {
          v253 = 0;
        }
        v252 = &v248[v251 & 0xFFFFFFFFFFFFFFF8];
        v337 = (uint8x8_t *)(v253 + v231 + 1);
        v338 = v253 - (v251 & 0xFFFFFFFFFFFFFFF8);
        a3.i16[0] = 21845;
        a3.i8[2] = 85;
        a3.i8[3] = 85;
        a3.i8[4] = 85;
        a3.i8[5] = 85;
        a3.i8[6] = 85;
        a3.i8[7] = 85;
        do
        {
          *v337 = (uint8x8_t)vand_s8((int8x8_t)vshr_n_u8(*v337, 1uLL), *(int8x8_t *)a3.i8);
          ++v337;
          v338 += 8;
        }
        while (v338);
        if (v251 == (v251 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_574;
        goto LABEL_572;
      case 1u:
        v254 = *((_QWORD *)a2 + 1);
        if (v254 < 1)
          goto LABEL_574;
        v255 = v461;
        v256 = (0xFu >> v461) | (16 * (0xFu >> v461));
        if (v254 + v231 + 1 > (unint64_t)(v231 + 2))
          v257 = v254 + v231 + 1;
        else
          v257 = v231 + 2;
        v258 = v257 + ~v231;
        if (v258 < 8)
        {
          v259 = (unsigned __int8 *)(v231 + 1);
          goto LABEL_568;
        }
        v317 = vdupq_n_s32(v461);
        a3 = vdupq_n_s32(v256);
        if (v258 >= 0x10)
        {
          v318 = v258 & 0xFFFFFFFFFFFFFFF0;
          a8.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
          v339 = (uint32x4_t)vnegq_s32(v317);
          v340 = v258 & 0xFFFFFFFFFFFFFFF0;
          result = v231 + 1;
          do
          {
            v472.val[1] = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(*(int8x16_t *)result, (int8x16_t)xmmword_1003BCAA0), v339), (int8x16_t)a3);
            v472.val[0] = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(*(int8x16_t *)result, (int8x16_t)xmmword_1003BCA90), v339), (int8x16_t)a3);
            v472.val[2] = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(*(int8x16_t *)result, (int8x16_t)xmmword_1003BCAB0), v339), (int8x16_t)a3);
            v472.val[3] = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(*(int8x16_t *)result, (int8x16_t)xmmword_1003BCAC0), v339), (int8x16_t)a3);
            *(int8x16_t *)result = vqtbl4q_s8(v472, (int8x16_t)xmmword_1003BC960);
            result += 16;
            v340 -= 16;
          }
          while (v340);
          if (v258 == v318)
            goto LABEL_574;
          if ((v258 & 8) == 0)
          {
            v259 = &v248[v318];
LABEL_568:
            v341 = &v248[v254];
            do
            {
              *v259 = (*v259 >> v255) & v256;
              ++v259;
            }
            while (v259 < v341);
            goto LABEL_574;
          }
        }
        else
        {
          v318 = 0;
        }
        result = v258 & 0xFFFFFFFFFFFFFFF8;
        v259 = &v248[v258 & 0xFFFFFFFFFFFFFFF8];
        v319 = (unint64_t *)(v318 + v231 + 1);
        v320 = v318 - (v258 & 0xFFFFFFFFFFFFFFF8);
        v321 = (uint32x4_t)vnegq_s32(v317);
        do
        {
          a8.i64[0] = *v319;
          v467.val[0] = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1003BCA90), v321), (int8x16_t)a3);
          v467.val[1] = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1003BCAA0), v321), (int8x16_t)a3);
          a8 = vqtbl2q_s8(v467, (int8x16_t)xmmword_1003BC970);
          *v319++ = a8.i64[0];
          v320 += 8;
        }
        while (v320);
        if (v258 == result)
          goto LABEL_574;
        goto LABEL_568;
      case 3u:
        v260 = *((_QWORD *)a2 + 1);
        if (v260 >= 1)
        {
          v261 = 0;
          v262 = &v248[v260];
          do
          {
            v263 = *v248 >> *(&v461 + v261);
            if (v261 + 1 < v233)
              ++v261;
            else
              v261 = 0;
            *v248++ = v263;
          }
          while (v248 < v262);
        }
        goto LABEL_574;
      case 7u:
        v264 = *((_QWORD *)a2 + 1);
        if (v264 >= 1)
        {
          v265 = 0;
          v266 = &v248[v264];
          do
          {
            v267 = __rev16(*(unsigned __int16 *)v248) >> *(&v461 + v265);
            if (v265 + 1 < v233)
              ++v265;
            else
              v265 = 0;
            *(_WORD *)v248 = __rev16(v267);
            v248 += 2;
          }
          while (v248 < v266);
        }
        goto LABEL_574;
      default:
        goto LABEL_574;
    }
  }
LABEL_575:
  if ((v229 & 4) != 0)
  {
    v343 = *((unsigned __int8 *)a2 + 17);
    if (v343 <= 7)
    {
      v344 = *(_QWORD *)(v8 + 544);
      v345 = v344 + 1;
      v346 = *a2;
      if (v343 == 4)
      {
        if ((_DWORD)v346)
        {
          v352 = 4 * (*a2 & 1);
          v353 = (unsigned __int8 *)(v345 + ((v346 - 1) >> 1));
          v354 = (_BYTE *)(v344 + v346);
          v355 = *a2;
          do
          {
            v356 = *v353 >> v352;
            v60 = v352 == 0;
            v357 = v352 == 0;
            *v354-- = v356 & 0xF;
            v358 = !v60;
            v353 -= v358;
            v352 = 4 * v357;
            --v355;
          }
          while (v355);
        }
      }
      else if (v343 == 2)
      {
        if ((_DWORD)v346)
        {
          v359 = ~(2 * v346 + 6) & 6;
          v360 = (unsigned __int8 *)(v345 + ((v346 - 1) >> 2));
          v361 = (_BYTE *)(v344 + v346);
          v362 = *a2;
          do
          {
            *v361-- = (*v360 >> v359) & 3;
            v60 = v359 == 6;
            v363 = v359 == 6;
            v359 += 2;
            if (v60)
              v359 = 0;
            v360 -= v363;
            --v362;
          }
          while (v362);
        }
      }
      else if (v343 == 1 && (_DWORD)v346)
      {
        v347 = -(int)v346 & 7;
        v348 = (unsigned __int8 *)(v345 + ((v346 - 1) >> 3));
        v349 = (_BYTE *)(v344 + v346);
        v350 = *a2;
        do
        {
          *v349-- = (*v348 >> v347) & 1;
          v351 = v347 == 7;
          if (v347 == 7)
            v347 = 0;
          else
            ++v347;
          v348 -= v351;
          --v350;
        }
        while (v350);
      }
      *((_BYTE *)a2 + 17) = 8;
      v364 = *((unsigned __int8 *)a2 + 18);
      *((_BYTE *)a2 + 19) = 8 * v364;
      *((_QWORD *)a2 + 1) = (v346 * v364);
    }
  }
  if (*((_BYTE *)a2 + 16) == 3 && (*(_DWORD *)(v8 + 596) & 0x80000000) == 0)
    result = sub_10036C5AC(v8, (uint64_t)a2);
  v365 = *(_DWORD *)(v8 + 300);
  if ((v365 & 1) != 0)
  {
    result = (uint64_t)sub_10036C420(a2, (char *)(*(_QWORD *)(v8 + 544) + 1));
    v365 = *(_DWORD *)(v8 + 300);
    if ((v365 & 0x10000) == 0)
    {
LABEL_605:
      if ((v365 & 0x8000) == 0)
        goto LABEL_657;
      goto LABEL_609;
    }
  }
  else if ((v365 & 0x10000) == 0)
  {
    goto LABEL_605;
  }
  result = sub_10036C1B0((uint64_t)a2, (_BYTE *)(*(_QWORD *)(v8 + 544) + 1));
  v365 = *(_DWORD *)(v8 + 300);
  if ((v365 & 0x8000) == 0)
    goto LABEL_657;
LABEL_609:
  v366 = *(_QWORD *)(v8 + 544);
  v367 = v366 + 1;
  v368 = *(unsigned __int16 *)(v8 + 618);
  v369 = *(_DWORD *)(v8 + 296);
  v370 = *a2;
  if (*((_BYTE *)a2 + 16) == 2)
  {
    v376 = *((unsigned __int8 *)a2 + 17);
    if (v376 == 16)
    {
      if ((v369 & 0x80) != 0)
      {
        v400 = v367 + 2 * v370 + 6 * v370;
        if (v370 >= 2)
        {
          v401 = v370 - 1;
          v402 = (_BYTE *)(6 * v370 + v366 - 2);
          v403 = __rev16(v368);
          do
          {
            *(_WORD *)(v400 - 2) = v403;
            *(_BYTE *)(v400 - 3) = v402[2];
            *(_BYTE *)(v400 - 4) = v402[1];
            *(_BYTE *)(v400 - 5) = *v402;
            *(_BYTE *)(v400 - 6) = *(v402 - 1);
            *(_BYTE *)(v400 - 7) = *(v402 - 2);
            *(_BYTE *)(v400 - 8) = *(v402 - 3);
            v400 -= 8;
            v402 -= 6;
            --v401;
          }
          while (v401);
        }
        *(_WORD *)(v400 - 2) = __rev16(v368);
      }
      else if ((_DWORD)v370)
      {
        v383 = (_BYTE *)(v366 + 6 * v370 - 2);
        v384 = (_BYTE *)(v366 + 8 * v370 - 3);
        v385 = *a2;
        do
        {
          v384[3] = v383[2];
          v384[2] = v383[1];
          v384[1] = *v383;
          *v384 = *(v383 - 1);
          *(v384 - 1) = *(v383 - 2);
          *(v384 - 2) = *(v383 - 3);
          *(v384 - 3) = v368;
          *(v384 - 4) = BYTE1(v368);
          v383 -= 6;
          v384 -= 8;
          --v385;
        }
        while (v385);
      }
      v390 = 3;
      v391 = 64;
    }
    else
    {
      if (v376 != 8)
        goto LABEL_657;
      if ((v369 & 0x80) != 0)
      {
        v393 = v367 + v370 + 3 * v370;
        if (v370 >= 2)
        {
          v394 = v370 - 1;
          v395 = (_BYTE *)(v366 + 3 * v370);
          do
          {
            *(_BYTE *)(v393 - 1) = v368;
            *(_BYTE *)(v393 - 2) = *v395;
            *(_BYTE *)(v393 - 3) = *(v395 - 1);
            *(_BYTE *)(v393 - 4) = *(v395 - 2);
            v393 -= 4;
            v395 -= 3;
            --v394;
          }
          while (v394);
        }
        *(_BYTE *)(v393 - 1) = v368;
      }
      else if ((_DWORD)v370)
      {
        v377 = (_BYTE *)(v366 + 3 * v370);
        v378 = (_BYTE *)(v366 + 4 * v370 - 1);
        v379 = *a2;
        do
        {
          v378[1] = *v377;
          *v378 = *(v377 - 1);
          *(v378 - 1) = *(v377 - 2);
          *(v378 - 2) = v368;
          v377 -= 3;
          v378 -= 4;
          --v379;
        }
        while (v379);
      }
      v390 = 2;
      v391 = 32;
    }
    v392 = 4;
  }
  else
  {
    if (*((_BYTE *)a2 + 16))
      goto LABEL_657;
    v371 = *((unsigned __int8 *)a2 + 17);
    if (v371 == 16)
    {
      if ((v369 & 0x80) != 0)
      {
        v396 = v367 + 2 * v370 + 2 * v370;
        v397 = __rev16(v368);
        if (v370 >= 2)
        {
          v398 = v370 - 1;
          v399 = (_BYTE *)(v366 + 2 * v370);
          do
          {
            *(_WORD *)(v396 - 2) = v397;
            *(_BYTE *)(v396 - 3) = *v399;
            *(_BYTE *)(v396 - 4) = *(v399 - 1);
            v396 -= 4;
            v399 -= 2;
            --v398;
          }
          while (v398);
        }
        *(_WORD *)(v396 - 2) = v397;
      }
      else if ((_DWORD)v370)
      {
        v380 = (_BYTE *)(v366 + 2 * v370);
        v381 = (_BYTE *)(v366 + 4 * v370 - 1);
        v382 = *a2;
        do
        {
          v381[1] = *v380;
          *v381 = *(v380 - 1);
          *(v381 - 1) = v368;
          *(v381 - 2) = BYTE1(v368);
          v380 -= 2;
          v381 -= 4;
          --v382;
        }
        while (v382);
      }
      v392 = 2;
      v391 = 32;
      v390 = 2;
    }
    else
    {
      if (v371 != 8)
        goto LABEL_657;
      if ((v369 & 0x80) != 0)
      {
        v386 = v367 + v370 + v370;
        if (v370 >= 2)
        {
          v387 = (char *)(v366 + v370);
          v388 = v370 - 1;
          do
          {
            *(_BYTE *)(v386 - 1) = v368;
            v389 = *v387--;
            *(_BYTE *)(v386 - 2) = v389;
            v386 -= 2;
            --v388;
          }
          while (v388);
        }
        *(_BYTE *)(v386 - 1) = v368;
      }
      else if ((_DWORD)v370)
      {
        v372 = (_BYTE *)(v366 + 2 * v370);
        v373 = (char *)(v366 + v370);
        v374 = *a2;
        do
        {
          v375 = *v373--;
          *v372 = v375;
          *(v372 - 1) = v368;
          v372 -= 2;
          --v374;
        }
        while (v374);
      }
      v390 = 1;
      v391 = 16;
      v392 = 2;
    }
  }
  *((_BYTE *)a2 + 18) = v392;
  *((_BYTE *)a2 + 19) = v391;
  *((_QWORD *)a2 + 1) = ((_DWORD)v370 << v390);
  v365 = *(_DWORD *)(v8 + 300);
LABEL_657:
  if ((v365 & 0x20000) == 0)
    goto LABEL_716;
  v404 = *(_QWORD *)(v8 + 544);
  v405 = v404 + 1;
  v406 = *a2;
  v407 = *((unsigned __int8 *)a2 + 16);
  if (v407 == 4)
  {
    if (*((_BYTE *)a2 + 17) == 8)
    {
      if (!(_DWORD)v406)
        goto LABEL_716;
      v411 = *((_QWORD *)a2 + 1);
      v412 = v405 + v411;
      if (v406 < 8)
      {
        LODWORD(v413) = 0;
        goto LABEL_706;
      }
      if (v406 >= 0x10)
      {
        v424 = v406 & 0xFFFFFFF0;
        v441 = (char *)(v412 - 32);
        v442 = v424;
        do
        {
          v466 = vld2q_s8(v441);
          v443 = v466.val[0];
          vst2q_s8(v441, *(int8x16x2_t *)((char *)&v466 + 16));
          v441 -= 32;
          v442 -= 16;
        }
        while (v442);
        if (v424 == v406)
          goto LABEL_716;
        if ((v406 & 8) == 0)
        {
          v412 -= 2 * v424;
          LODWORD(v413) = v406 & 0xFFFFFFF0;
          goto LABEL_706;
        }
      }
      else
      {
        v424 = 0;
      }
      v413 = v406 & 0xFFFFFFF8;
      v412 -= 2 * v413;
      v425 = (char *)(v411 - 2 * v424 + v404 - 15);
      v426 = v424 - v413;
      do
      {
        v465 = vld2_s8(v425);
        v427 = v465.val[0];
        vst2_s8(v425, *(int8x8x2_t *)((char *)&v465 + 8));
        v425 -= 16;
        v426 += 8;
      }
      while (v426);
      if (v413 == v406)
        goto LABEL_716;
LABEL_706:
      v444 = v406 - v413;
      v445 = (char *)(v412 - 1);
      do
      {
        v446 = *v445;
        *v445 = *(v445 - 1);
        *(v445 - 1) = v446;
        v445 -= 2;
        --v444;
      }
      while (v444);
      goto LABEL_716;
    }
    if (!(_DWORD)v406)
      goto LABEL_716;
    v415 = *((_QWORD *)a2 + 1);
    v416 = v405 + v415;
    if (v406 < 8)
    {
      LODWORD(v417) = 0;
      goto LABEL_714;
    }
    if (v406 >= 0x10)
    {
      v428 = v406 & 0xFFFFFFF0;
      v447 = (char *)(v416 - 64);
      v448 = v428;
      do
      {
        *(int8x16x4_t *)a3.i8 = vld4q_s8(v447);
        v471.val[0] = v449;
        v471.val[1] = v450;
        v471.val[2] = (int8x16_t)a3;
        v471.val[3] = v451;
        vst4q_s8(v447, v471);
        v447 -= 64;
        v448 -= 16;
      }
      while (v448);
      if (v428 == v406)
        goto LABEL_716;
      if ((v406 & 8) == 0)
      {
        v416 -= 4 * v428;
        LODWORD(v417) = v406 & 0xFFFFFFF0;
        goto LABEL_714;
      }
    }
    else
    {
      v428 = 0;
    }
    v417 = v406 & 0xFFFFFFF8;
    v416 -= 4 * v417;
    v429 = (char *)(v415 - 4 * v428 + v404 - 31);
    v430 = v428 - v417;
    do
    {
      *(int8x8x4_t *)a3.i8 = vld4_s8(v429);
      v469.val[0] = v431;
      v469.val[1] = v432;
      v469.val[2] = (int8x8_t)a3.i64[0];
      v469.val[3] = v433;
      vst4_s8(v429, v469);
      v429 -= 32;
      v430 += 8;
    }
    while (v430);
    if (v417 == v406)
      goto LABEL_716;
LABEL_714:
    v452 = v406 - v417;
    v453 = (unsigned __int32 *)(v416 - 4);
    do
    {
      a3.i32[0] = *v453;
      a3 = (int32x4_t)vmovl_u8(*(uint8x8_t *)a3.i8);
      *(int8x8_t *)a3.i8 = vext_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8, 4uLL);
      *(int8x8_t *)a3.i8 = vmovn_s16((int16x8_t)a3);
      *v453-- = a3.i32[0];
      --v452;
    }
    while (v452);
    goto LABEL_716;
  }
  if (v407 != 6)
    goto LABEL_716;
  if (*((_BYTE *)a2 + 17) == 8)
  {
    if (!(_DWORD)v406)
      goto LABEL_716;
    v408 = *((_QWORD *)a2 + 1);
    v409 = v405 + v408;
    if (v406 < 8)
    {
      LODWORD(v410) = 0;
      goto LABEL_698;
    }
    if (v406 >= 0x10)
    {
      v418 = v406 & 0xFFFFFFF0;
      v434 = (char *)(v409 - 64);
      v435 = v418;
      do
      {
        *(int8x16x4_t *)a3.i8 = vld4q_s8(v434);
        v470.val[0] = v436;
        v470.val[1] = (int8x16_t)a3;
        v470.val[2] = v437;
        v470.val[3] = v438;
        vst4q_s8(v434, v470);
        v434 -= 64;
        v435 -= 16;
      }
      while (v435);
      if (v418 == v406)
        goto LABEL_716;
      if ((v406 & 8) == 0)
      {
        v409 -= 4 * v418;
        LODWORD(v410) = v406 & 0xFFFFFFF0;
LABEL_698:
        v439 = (unsigned __int32 *)(v409 - 4);
        v440 = v406 - v410;
        do
        {
          a3.i32[0] = *v439;
          a3 = (int32x4_t)vmovl_u8(*(uint8x8_t *)a3.i8);
          *(int8x8_t *)a3.i8 = vext_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8, 6uLL);
          *(int8x8_t *)a3.i8 = vmovn_s16((int16x8_t)a3);
          *v439-- = a3.i32[0];
          --v440;
        }
        while (v440);
        goto LABEL_716;
      }
    }
    else
    {
      v418 = 0;
    }
    v410 = v406 & 0xFFFFFFF8;
    v409 -= 4 * v410;
    v419 = (char *)(v408 - 4 * v418 + v404 - 31);
    v420 = v418 - v410;
    do
    {
      *(int8x8x4_t *)a3.i8 = vld4_s8(v419);
      v468.val[0] = v421;
      v468.val[1] = (int8x8_t)a3.i64[0];
      v468.val[2] = v422;
      v468.val[3] = v423;
      vst4_s8(v419, v468);
      v419 -= 32;
      v420 += 8;
    }
    while (v420);
    if (v410 != v406)
      goto LABEL_698;
  }
  else if ((_DWORD)v406)
  {
    v414 = (int8x8_t *)(*((_QWORD *)a2 + 1) + v404 - 7);
    do
    {
      *v414 = vext_s8(*v414, *v414, 6uLL);
      --v414;
      LODWORD(v406) = v406 - 1;
    }
    while ((_DWORD)v406);
  }
LABEL_716:
  v454 = *(_DWORD *)(v8 + 300);
  if ((v454 & 0x10) != 0)
  {
    result = sub_10036C0D0((uint64_t)a2, (char *)(*(_QWORD *)(v8 + 544) + 1));
    if ((*(_DWORD *)(v8 + 300) & 0x100000) == 0)
      return result;
  }
  else if ((v454 & 0x100000) == 0)
  {
    return result;
  }
  v455 = *(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(v8 + 264);
  if (v455)
    result = v455(v8, a2, *(_QWORD *)(v8 + 544) + 1);
  if (*(_BYTE *)(v8 + 288))
    *((_BYTE *)a2 + 17) = *(_BYTE *)(v8 + 288);
  v456 = *(_BYTE *)(v8 + 289);
  if (v456)
    *((_BYTE *)a2 + 18) = v456;
  else
    v456 = *((_BYTE *)a2 + 18);
  v457 = v456 * *((_BYTE *)a2 + 17);
  *((_BYTE *)a2 + 19) = v457;
  v458 = v457 >= 8u;
  v459 = (*a2 * (unint64_t)v457 + 7) >> 3;
  v460 = *a2 * (unint64_t)(v457 >> 3);
  if (!v458)
    v460 = v459;
  *((_QWORD *)a2 + 1) = v460;
  return result;
}

unsigned int *sub_100364944(unsigned int *result, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3;
  int v4;
  char *v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  int v18;
  int v19;
  BOOL v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  char *v27;
  int v28;
  char v29;
  unsigned __int8 v30;
  unsigned int v31;
  int v32;
  unsigned __int8 *v33;
  char *v34;
  int v35;
  char v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  char v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  char v53;
  char v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;

  v3 = *result;
  if (!*((_BYTE *)result + 16))
  {
    if (a3)
    {
      v13 = a3[4];
      v14 = *((unsigned __int8 *)result + 17);
      if (v14 > 7)
        goto LABEL_58;
    }
    else
    {
      v13 = 0;
      v14 = *((unsigned __int8 *)result + 17);
      if (v14 > 7)
      {
LABEL_58:
        if (!a3)
          return result;
        if (v14 == 16)
        {
          if ((_DWORD)v3)
          {
            v49 = *((_QWORD *)result + 1);
            v50 = (char *)(a2 + 2 * v49 - 1);
            v51 = (char *)(a2 + v49 - 1);
            v52 = v3;
            do
            {
              if (*(v51 - 1) == v13 >> 8 && *v51 == v13)
                v53 = 0;
              else
                v53 = -1;
              *v50 = v53;
              *(v50 - 1) = v53;
              *(v50 - 2) = *v51;
              v54 = *(v51 - 1);
              v51 -= 2;
              *(v50 - 3) = v54;
              v50 -= 4;
              --v52;
            }
            while (v52);
          }
        }
        else if (v14 == 8 && (_DWORD)v3)
        {
          v44 = (char *)(a2 + 2 * v3 - 1);
          v45 = (char *)(v3 + a2 - 1);
          v46 = v3;
          do
          {
            if (*v45 == v13)
              v47 = 0;
            else
              v47 = -1;
            *v44 = v47;
            v48 = *v45--;
            *(v44 - 1) = v48;
            v44 -= 2;
            --v46;
          }
          while (v46);
        }
        *((_BYTE *)result + 16) = 4;
        *((_BYTE *)result + 18) = 2;
        v30 = 2 * *((_BYTE *)result + 17);
        v31 = v30;
        goto LABEL_76;
      }
    }
    switch(v14)
    {
      case 1u:
        v13 = ((int)(v13 << 31) >> 31);
        if ((_DWORD)v3)
        {
          v32 = -(int)v3 & 7;
          v33 = (unsigned __int8 *)(a2 + ((v3 - 1) >> 3));
          v34 = (char *)(v3 + a2 - 1);
          v35 = *result;
          do
          {
            if (((*v33 >> v32) & 1) != 0)
              v36 = -1;
            else
              v36 = 0;
            *v34-- = v36;
            v37 = v32 == 7;
            if (v32 == 7)
              v32 = 0;
            else
              ++v32;
            v33 -= v37;
            --v35;
          }
          while (v35);
          goto LABEL_55;
        }
        break;
      case 2u:
        v13 = 85 * (v13 & 3);
        if ((_DWORD)v3)
        {
          v38 = ~(2 * v3 + 6) & 6;
          v39 = (unsigned __int8 *)(a2 + ((v3 - 1) >> 2));
          v40 = (_BYTE *)(v3 + a2 - 1);
          v41 = *result;
          do
          {
            *v40-- = 85 * ((*v39 >> v38) & 3);
            v20 = v38 == 6;
            v42 = v38 == 6;
            v38 += 2;
            if (v20)
              v38 = 0;
            v39 -= v42;
            --v41;
          }
          while (v41);
          goto LABEL_55;
        }
        break;
      case 4u:
        v13 = v13 & 0xF | (16 * (v13 & 0xF));
        if ((_DWORD)v3)
        {
          v15 = 4 * (*result & 1);
          v16 = (unsigned __int8 *)(a2 + ((v3 - 1) >> 1));
          v17 = (_BYTE *)(v3 + a2 - 1);
          v18 = *result;
          do
          {
            v19 = *v16 >> v15;
            v20 = v15 == 0;
            v21 = v15 == 0;
            *v17-- = v19 & 0xF | (16 * v19);
            v22 = !v20;
            v15 = 4 * v21;
            v16 -= v22;
            --v18;
          }
          while (v18);
          goto LABEL_55;
        }
        break;
      default:
LABEL_55:
        v43 = v3;
LABEL_57:
        v14 = 8;
        *((_BYTE *)result + 17) = 8;
        *((_BYTE *)result + 19) = 8;
        *((_QWORD *)result + 1) = v43;
        goto LABEL_58;
    }
    v43 = 0;
    goto LABEL_57;
  }
  if (!a3 || *((_BYTE *)result + 16) != 2)
    return result;
  v4 = *((unsigned __int8 *)result + 17);
  if (v4 == 16)
  {
    if ((_DWORD)v3)
    {
      v23 = a3[1];
      v24 = a3[2];
      v25 = a3[3];
      v26 = (char *)(a2 + 8 * v3 - 1);
      v27 = (char *)(*((_QWORD *)result + 1) + a2 - 3);
      v28 = *result;
      do
      {
        if (v23 >> 8 == *(v27 - 3)
          && *(v27 - 2) == v23
          && v24 >> 8 == *(v27 - 1)
          && *v27 == v24
          && v25 >> 8 == v27[1]
          && v27[2] == v25)
        {
          v29 = 0;
        }
        else
        {
          v29 = -1;
        }
        *v26 = v29;
        *(v26 - 1) = v29;
        *(v26 - 2) = v27[2];
        *(v26 - 3) = v27[1];
        *(v26 - 4) = *v27;
        *(v26 - 5) = *(v27 - 1);
        *(v26 - 6) = *(v27 - 2);
        *(v26 - 7) = *(v27 - 3);
        v26 -= 8;
        v27 -= 6;
        --v28;
      }
      while (v28);
    }
  }
  else if (v4 == 8 && (_DWORD)v3)
  {
    v5 = (char *)(a2 + 4 * v3 - 1);
    v6 = (char *)(a2 + *((_QWORD *)result + 1) - 1);
    v7 = *((unsigned __int8 *)a3 + 6);
    v8 = *((unsigned __int8 *)a3 + 4);
    v9 = *((unsigned __int8 *)a3 + 2);
    v10 = *result;
    do
    {
      if (*(v6 - 2) == v9 && *(v6 - 1) == v8 && *v6 == v7)
        v11 = 0;
      else
        v11 = -1;
      *v5 = v11;
      *(v5 - 1) = *v6;
      *(v5 - 2) = *(v6 - 1);
      v12 = *(v6 - 2);
      v6 -= 3;
      *(v5 - 3) = v12;
      v5 -= 4;
      --v10;
    }
    while (v10);
  }
  *((_BYTE *)result + 16) = 6;
  *((_BYTE *)result + 18) = 4;
  v30 = 4 * *((_BYTE *)result + 17);
  v31 = v30;
LABEL_76:
  *((_BYTE *)result + 19) = v30;
  v55 = v31 >= 8;
  v56 = (v30 * (unint64_t)v3 + 7) >> 3;
  v57 = v3 * (unint64_t)(v30 >> 3);
  if (!v55)
    v57 = v56;
  *((_QWORD *)result + 1) = v57;
  return result;
}

unsigned int *sub_100364D78(unsigned int *result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  char v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  char v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;

  v2 = *((unsigned __int8 *)result + 17);
  if (v2 >= 8)
  {
    v3 = *((unsigned __int8 *)result + 16);
    if ((v3 & 2) == 0)
    {
      v4 = *result;
      v5 = *result;
      if (v3 == 4)
      {
        if (v2 == 8)
        {
          if (v5)
          {
            v9 = (_BYTE *)(a2 + 2 * v4 - 1);
            v10 = &v9[2 * v4];
            do
            {
              *v10 = *v9;
              *(v10 - 1) = *(v9 - 1);
              *(v10 - 2) = *(v9 - 1);
              *(v10 - 3) = *(v9 - 1);
              v10 -= 4;
              v9 -= 2;
              --v5;
            }
            while (v5);
          }
        }
        else if (v5)
        {
          v13 = (_BYTE *)(a2 + 4 * v4 - 1);
          v14 = &v13[4 * v4];
          do
          {
            *v14 = *v13;
            *(v14 - 1) = *(v13 - 1);
            *(v14 - 2) = *(v13 - 2);
            *(v14 - 3) = *(v13 - 3);
            *(v14 - 4) = *(v13 - 2);
            *(v14 - 5) = *(v13 - 3);
            *(v14 - 6) = *(v13 - 2);
            *(v14 - 7) = *(v13 - 3);
            v14 -= 8;
            v13 -= 4;
            --v5;
          }
          while (v5);
        }
      }
      else if (!*((_BYTE *)result + 16))
      {
        if (v2 == 8)
        {
          if (v5)
          {
            v6 = (char *)(a2 + v4 - 1);
            v7 = &v6[2 * v4];
            do
            {
              *v7 = *v6;
              *(v7 - 1) = *v6;
              v8 = *v6--;
              *(v7 - 2) = v8;
              v7 -= 3;
              --v5;
            }
            while (v5);
          }
        }
        else if (v5)
        {
          v11 = (_BYTE *)(a2 + 2 * v4 - 1);
          v12 = &v11[4 * v4];
          do
          {
            *v12 = *v11;
            *(v12 - 1) = *(v11 - 1);
            *(v12 - 2) = *v11;
            *(v12 - 3) = *(v11 - 1);
            *(v12 - 4) = *v11;
            *(v12 - 5) = *(v11 - 1);
            v12 -= 6;
            v11 -= 2;
            --v5;
          }
          while (v5);
        }
      }
      v15 = *((_BYTE *)result + 18) + 2;
      *((_BYTE *)result + 18) = v15;
      *((_BYTE *)result + 16) |= 2u;
      v16 = *((_BYTE *)result + 17) * v15;
      *((_BYTE *)result + 19) = v16;
      v17 = (v16 * (unint64_t)v4 + 7) >> 3;
      v18 = v4 * (unint64_t)(v16 >> 3);
      if (v16 < 8u)
        v18 = v17;
      *((_QWORD *)result + 1) = v18;
    }
  }
  return result;
}

uint64_t sub_100364F38(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(result + 613);
  if (v2 <= 7)
  {
    v3 = result;
    *(_DWORD *)(result + 1124) = 17;
    v4 = a2 + 44;
    sub_100360C80(result);
    *(_BYTE *)(v3 + 613) = 8;
    result = sub_10035A2F8(v4, v2, 8 - v2);
    if ((_DWORD)result)
    {
      if (v2 > 3 || !sub_10035A2F8(v4, v2, 4 - v2))
        sub_10035E6F4(v3, "PNG file corrupted by ASCII conversion");
      sub_10035E6F4(v3, "Not a PNG file");
    }
    if (v2 <= 2)
      *(_DWORD *)(v3 + 292) |= 0x1000u;
  }
  return result;
}

uint64_t sub_100364FFC(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v11;
  unsigned int v12;

  *(_DWORD *)(a1 + 1124) = 33;
  sub_100360C80(a1);
  v2 = bswap32(v11);
  if ((v2 & 0x80000000) != 0)
    sub_10035E6F4(a1, "PNG unsigned integer out of range");
  *(_DWORD *)(a1 + 528) = bswap32(v12);
  sub_10035A358(a1);
  sub_10035A388(a1, (Bytef *)&v12, 4);
  v3 = *(_DWORD *)(a1 + 528);
  v4 = v3 - 123 >= 0xFFFFFFC6 && v3 - 91 > 5;
  if (!v4
    || BYTE1(v3) - 123 < 0xFFFFFFC6
    || BYTE1(v3) - 91 < 6
    || BYTE2(v3) - 123 < 0xFFFFFFC6
    || BYTE2(v3) - 91 < 6
    || HIBYTE(v3) - 123 < 0xFFFFFFC6
    || HIBYTE(v3) - 91 < 6u)
  {
    sub_10035EFF0(a1, "invalid chunk type");
  }
  v5 = *(_QWORD *)(a1 + 1056);
  if (v5 - 1 >= 0x7FFFFFFE)
    v5 = 0x7FFFFFFFLL;
  if (v3 == 1229209940)
  {
    if (*(_BYTE *)(a1 + 604))
      v6 = 6;
    else
      v6 = 0;
    v7 = ((*(_DWORD *)(a1 + 496) * *(unsigned __int8 *)(a1 + 611)) << (*(unsigned __int8 *)(a1 + 608) > 8u))
       + v6
       + 1;
    v8 = *(unsigned int *)(a1 + 500) * (unint64_t)v7;
    if ((v8 & 0xFFFFFFFF00000000) != 0)
      v8 = 0x7FFFFFFFLL;
    if (v7 >= 0x7F36)
      v7 = 32566;
    v9 = 5 * (v8 / v7) + v8 + 11;
    if (v9 >= 0x7FFFFFFF)
      v9 = 0x7FFFFFFFLL;
    if (v5 <= v9)
      v5 = v9;
  }
  if (v5 < v2)
    sub_10035EFF0(a1, "chunk data is too large");
  *(_DWORD *)(a1 + 1124) = 65;
  return v2;
}

uint64_t sub_1003651F0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v12;
  Bytef buf[4];

  if (a2)
  {
    v3 = a2;
    if (a1)
    {
      do
      {
        if (v3 >= 0x400)
          v4 = 1024;
        else
          v4 = v3;
        v3 -= v4;
        sub_100360C80(a1);
        sub_10035A388(a1, buf, v4);
      }
      while (v3);
    }
    else
    {
      v5 = a2 - 1024;
      if (a2 < 0x400)
        v5 = 0;
      if (a2 < 0x401)
        goto LABEL_14;
      v6 = ((v5 + 1023) >> 10) + 1;
      v3 = a2 - ((v6 & 0x7FFFFE) << 10);
      v7 = v6 & 0x7FFFFE;
      do
        v7 -= 2;
      while (v7);
      if (v6 != (v6 & 0x7FFFFE))
      {
LABEL_14:
        v8 = v3 + 1024;
        do
          v8 -= 1024;
        while (v8 >= 0x401);
      }
    }
  }
  v9 = *(_DWORD *)(a1 + 528);
  v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)(a1 + 1124) = 129;
  sub_100360C80(a1);
  if ((v9 & 0x20000000) != 0)
  {
    if ((~v10 & 0x300) == 0)
      return 0;
  }
  else if ((v10 & 0x800) != 0)
  {
    return 0;
  }
  if (bswap32(*(unsigned int *)buf) == *(_DWORD *)(a1 + 580))
    return 0;
  v12 = *(_DWORD *)(a1 + 296);
  if ((*(_BYTE *)(a1 + 531) & 0x20) != 0)
  {
    if ((v12 & 0x200) == 0)
      goto LABEL_24;
LABEL_26:
    sub_10035EFF0(a1, "CRC error");
  }
  if ((v12 & 0x400) == 0)
    goto LABEL_26;
LABEL_24:
  sub_10035EF34(a1, "CRC error");
  return 1;
}

uint64_t sub_10036537C(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  Bytef buf[4];
  unsigned int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) != 0)
    sub_10035EFF0(a1, "out of place");
  if (a3 != 13)
    sub_10035EFF0(a1, "invalid");
  *(_DWORD *)(a1 + 292) = v4 | 1;
  sub_100360C80(a1);
  sub_10035A388(a1, buf, 13);
  sub_1003651F0(a1, 0);
  v6 = bswap32(*(unsigned int *)buf);
  if ((v6 & 0x80000000) != 0 || (v7 = bswap32(v20), (v7 & 0x80000000) != 0))
    sub_10035E6F4(a1, "PNG unsigned integer out of range");
  v8 = v21;
  v9 = v22;
  v10 = v23;
  v11 = v24;
  v12 = v25;
  *(_DWORD *)(a1 + 496) = v6;
  *(_DWORD *)(a1 + 500) = v7;
  *(_BYTE *)(a1 + 608) = v8;
  *(_BYTE *)(a1 + 604) = v12;
  *(_BYTE *)(a1 + 607) = v9;
  *(_BYTE *)(a1 + 980) = v11;
  *(_BYTE *)(a1 + 1040) = v10;
  v13 = 0x4010201030101uLL >> (8 * v9);
  if (v9 >= 7)
    LOBYTE(v13) = 1;
  *(_BYTE *)(a1 + 611) = v13;
  v14 = v13 * v8;
  *(_BYTE *)(a1 + 610) = v14;
  v15 = v14 >= 8u;
  v16 = (v14 * (unint64_t)v6 + 7) >> 3;
  v17 = v6 * (unint64_t)(v14 >> 3);
  if (!v15)
    v17 = v16;
  *(_QWORD *)(a1 + 512) = v17;
  return sub_10036AE78(a1, a2, v6, v7, v8, v9, v12, v10, v11);
}

uint64_t sub_1003654F0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  int v6;
  const char *v7;
  uint64_t result;
  int v10;
  Bytef *v11;
  int v12;
  const char *v13;
  int v14;
  Bytef buf;
  __int16 v16;
  _BYTE v17[768];

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v4 & 2) != 0)
    sub_10035EFF0(a1, "duplicate");
  if ((v4 & 4) != 0)
  {
    sub_1003651F0(a1, a3);
    v7 = "out of place";
    return sub_10035F2A4(a1, v7);
  }
  *(_DWORD *)(a1 + 292) = v4 | 2;
  v6 = *(unsigned __int8 *)(a1 + 607);
  if ((v6 & 2) == 0)
  {
    sub_1003651F0(a1, a3);
    v7 = "ignored in grayscale PNG";
    return sub_10035F2A4(a1, v7);
  }
  if (a3 > 0x300 || a3 % 3)
  {
    sub_1003651F0(a1, a3);
    if (*(_BYTE *)(a1 + 607) == 3)
      sub_10035EFF0(a1, "invalid");
    v7 = "invalid";
    return sub_10035F2A4(a1, v7);
  }
  if (v6 == 3)
  {
    if (1 << *(_BYTE *)(a1 + 608) >= (int)((unsigned __int16)a3 / 3u))
      v10 = (unsigned __int16)a3 / 3u;
    else
      v10 = 1 << *(_BYTE *)(a1 + 608);
    if (v10 < 1)
      goto LABEL_24;
LABEL_22:
    v11 = v17;
    v12 = v10;
    do
    {
      sub_100360C80(a1);
      sub_10035A388(a1, &buf, 3);
      *v11 = buf;
      *(_WORD *)(v11 + 1) = v16;
      v11 += 3;
      --v12;
    }
    while (v12);
    goto LABEL_24;
  }
  if ((unsigned __int16)a3 / 3u <= 0x100)
    v10 = (unsigned __int16)a3 / 3u;
  else
    v10 = 256;
  if (v10 >= 1)
    goto LABEL_22;
LABEL_24:
  sub_1003651F0(a1, -3 * v10 + a3);
  result = (uint64_t)sub_10036B374((_BYTE *)a1, a2, v17, v10);
  if (!*(_WORD *)(a1 + 600))
  {
    if (!a2)
      return result;
    v14 = *(_DWORD *)(a2 + 8);
    if ((v14 & 0x10) == 0)
    {
      if ((v14 & 0x40) != 0)
        goto LABEL_34;
      goto LABEL_30;
    }
    *(_WORD *)(a1 + 600) = 0;
LABEL_33:
    *(_WORD *)(a2 + 34) = 0;
    result = sub_10035F2A4(a1, "tRNS must be after");
    if ((*(_DWORD *)(a2 + 8) & 0x40) != 0)
    {
LABEL_34:
      result = sub_10035F2A4(a1, "hIST must be after");
      if ((*(_BYTE *)(a2 + 8) & 0x20) == 0)
        return result;
      goto LABEL_35;
    }
LABEL_30:
    if ((*(_BYTE *)(a2 + 8) & 0x20) == 0)
      return result;
LABEL_35:
    v13 = "bKGD must be after";
    return sub_10035F2A4(a1, v13);
  }
  *(_WORD *)(a1 + 600) = 0;
  if (a2)
    goto LABEL_33;
  v13 = "tRNS must be after";
  return sub_10035F2A4(a1, v13);
}

uint64_t sub_1003657C0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  uint64_t result;

  v4 = *(_DWORD *)(a1 + 292);
  if ((~v4 & 5) != 0)
    sub_10035EFF0(a1, "out of place");
  *(_DWORD *)(a1 + 292) = v4 | 0x18;
  result = sub_1003651F0(a1, a3);
  if (a3)
    return sub_10035F2A4(a1, "invalid");
  return result;
}

void sub_100365830(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  int v6;
  int v7;
  Bytef buf[4];

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v4 & 6) != 0)
  {
    sub_1003651F0(a1, a3);
    sub_10035F2A4(a1, "out of place");
  }
  else if (a3 == 4)
  {
    sub_100360C80(a1);
    sub_10035A388(a1, buf, 4);
    if (!sub_1003651F0(a1, 0))
    {
      v6 = bswap32(*(unsigned int *)buf);
      if (v6 < 0)
        v7 = -1;
      else
        v7 = v6;
      sub_10035ADC8(a1, a1 + 1168, v7);
      sub_10035AEF8((_OWORD *)a1, a2);
    }
  }
  else
  {
    sub_1003651F0(a1, a3);
    sub_10035F2A4(a1, "invalid");
  }
}

uint64_t sub_100365938(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  const char *v6;
  uint64_t result;
  int v9;
  unsigned __int8 v10;
  Bytef v11;
  Bytef *v12;
  Bytef v13;
  Bytef v14;
  Bytef v15;
  Bytef buf[4];

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v4 & 6) != 0)
  {
    sub_1003651F0(a1, a3);
    v6 = "out of place";
    return sub_10035F2A4(a1, v6);
  }
  if (a2 && (*(_BYTE *)(a2 + 8) & 2) != 0)
  {
    sub_1003651F0(a1, a3);
    v6 = "duplicate";
    return sub_10035F2A4(a1, v6);
  }
  v9 = *(unsigned __int8 *)(a1 + 607);
  if (v9 == 3)
  {
    v10 = 8;
    if (a3 > 4)
      goto LABEL_14;
  }
  else
  {
    v9 = *(unsigned __int8 *)(a1 + 611);
    v10 = *(_BYTE *)(a1 + 608);
    if (a3 > 4)
    {
LABEL_14:
      sub_10035F2A4(a1, "invalid");
      return sub_1003651F0(a1, a3);
    }
  }
  if (v9 != a3)
    goto LABEL_14;
  *(_DWORD *)buf = 16843009 * v10;
  sub_100360C80(a1);
  sub_10035A388(a1, buf, a3);
  result = sub_1003651F0(a1, 0);
  if (!(_DWORD)result)
  {
    if (!a3
      || (buf[0] - 1) < v10
      && (a3 == 1
       || (buf[1] - 1) < v10
       && (a3 == 2
        || (buf[2] - 1) < v10
        && (a3 == 3 || (buf[3] - 1) < v10))))
    {
      v11 = buf[0];
      if ((*(_BYTE *)(a1 + 607) & 2) != 0)
      {
        v12 = &buf[3];
        v13 = buf[1];
        v14 = buf[2];
      }
      else
      {
        v12 = &buf[1];
        *(_BYTE *)(a1 + 723) = buf[0];
        v13 = v11;
        v14 = v11;
      }
      v15 = *v12;
      *(_BYTE *)(a1 + 720) = v11;
      *(_BYTE *)(a1 + 721) = v13;
      *(_BYTE *)(a1 + 722) = v14;
      *(_BYTE *)(a1 + 724) = v15;
      return sub_10036B498(a1, a2, a1 + 720);
    }
    else
    {
      return sub_10035F2A4(a1, "invalid");
    }
  }
  return result;
}

void sub_100365B90(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  const char *v23;
  _DWORD v24[8];
  Bytef buf[4];
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v4 & 6) != 0)
  {
    sub_1003651F0(a1, a3);
    sub_10035F2A4(a1, "out of place");
    return;
  }
  if (a3 != 32)
  {
    sub_1003651F0(a1, a3);
    sub_10035F2A4(a1, "invalid");
    return;
  }
  sub_100360C80(a1);
  sub_10035A388(a1, buf, 32);
  if (!sub_1003651F0(a1, 0))
  {
    v6 = bswap32(*(unsigned int *)buf);
    if (v6 < 0)
      v7 = -1;
    else
      v7 = v6;
    v8 = bswap32(v26);
    if (v8 < 0)
      v9 = -1;
    else
      v9 = v8;
    v24[6] = v7;
    v24[7] = v9;
    v10 = bswap32(v27);
    if (v10 < 0)
      v11 = -1;
    else
      v11 = v10;
    v12 = bswap32(v28);
    if (v12 < 0)
      v13 = -1;
    else
      v13 = v12;
    v24[0] = v11;
    v24[1] = v13;
    v14 = bswap32(v29);
    if (v14 < 0)
      v15 = -1;
    else
      v15 = v14;
    v16 = bswap32(v30);
    if (v16 < 0)
      v17 = -1;
    else
      v17 = v16;
    v24[2] = v15;
    v24[3] = v17;
    v18 = bswap32(v31);
    if (v18 < 0)
      v19 = -1;
    else
      v19 = v18;
    v20 = bswap32(v32);
    if (v20 < 0)
      v21 = -1;
    else
      v21 = v20;
    v24[4] = v19;
    v24[5] = v21;
    if (v6 < 0 || v8 < 0 || v10 < 0 || v12 < 0 || v14 < 0 || v16 < 0 || v18 < 0 || v20 < 0)
    {
      v23 = "invalid values";
    }
    else
    {
      v22 = *(__int16 *)(a1 + 1242);
      if (v22 < 0)
        return;
      if ((v22 & 0x10) == 0)
      {
        *(_WORD *)(a1 + 1242) = v22 | 0x10;
        sub_10035AFCC(a1, a1 + 1168, (uint64_t)v24, 1);
        sub_10035AEF8((_OWORD *)a1, a2);
        return;
      }
      *(_WORD *)(a1 + 1242) = v22 | 0x8000;
      sub_10035AEF8((_OWORD *)a1, a2);
      v23 = "duplicate";
    }
    sub_10035F2A4(a1, v23);
  }
}

void sub_100365DC8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  int v6;
  Bytef buf;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v4 & 6) != 0)
  {
    sub_1003651F0(a1, a3);
    sub_10035F2A4(a1, "out of place");
  }
  else if (a3 == 1)
  {
    buf = 0;
    sub_100360C80(a1);
    sub_10035A388(a1, &buf, 1);
    if (!sub_1003651F0(a1, 0))
    {
      v6 = *(__int16 *)(a1 + 1242);
      if ((v6 & 0x80000000) == 0)
      {
        if ((v6 & 4) != 0)
        {
          *(_WORD *)(a1 + 1242) = v6 | 0x8000;
          sub_10035AEF8((_OWORD *)a1, a2);
          sub_10035F2A4(a1, "too many profiles");
        }
        else
        {
          sub_10035BA58(a1, a1 + 1168, buf);
          sub_10035AEF8((_OWORD *)a1, a2);
        }
      }
    }
  }
  else
  {
    sub_1003651F0(a1, a3);
    sub_10035F2A4(a1, "invalid");
  }
}

void sub_100365F0C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  const char *v6;
  int v7;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  void *v32;
  unsigned int *v33;
  unint64_t v34;
  unsigned int v35;
  Bytef v36[1024];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  Bytef __src[81];

  v35 = a3;
  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v4 & 6) != 0)
  {
    sub_1003651F0(a1, a3);
    v6 = "out of place";
LABEL_6:
    sub_10035F2A4(a1, v6);
    return;
  }
  if (a3 <= 0xD)
  {
    sub_1003651F0(a1, a3);
    v6 = "too short";
    goto LABEL_6;
  }
  v7 = *(__int16 *)(a1 + 1242);
  if (v7 < 0)
  {
    sub_1003651F0(a1, a3);
    return;
  }
  if ((v7 & 4) == 0)
  {
    if (a3 >= 0x51)
      v9 = 81;
    else
      v9 = a3;
    sub_100360C80(a1);
    sub_10035A388(a1, __src, v9);
    v35 = a3 - v9;
    if (a3 - v9 < 0xB)
    {
      sub_1003651F0(a1, a3 - v9);
      v10 = "too short";
      v11 = a1;
      goto LABEL_31;
    }
    v13 = 0;
    if (a3 >= 0x50)
      v14 = 80;
    else
      v14 = a3;
    while (__src[v13])
    {
      if (v14 == ++v13)
        goto LABEL_23;
    }
    LODWORD(v14) = v13;
LABEL_23:
    if ((v14 - 1) > 0x4E)
    {
      v12 = "bad keyword";
      goto LABEL_28;
    }
    v15 = v14 + 1;
    if (v15 >= v9 || __src[v15])
    {
      v12 = "bad compression method";
      goto LABEL_28;
    }
    if (sub_100366464(a1, 1766015824))
    {
      v12 = *(const char **)(a1 + 360);
      goto LABEL_28;
    }
    v16 = (v14 + 2);
    v45 = 0;
    v44 = 0u;
    v43 = 0u;
    v42 = 0u;
    v41 = 0u;
    v40 = 0u;
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    v34 = 132;
    *(_QWORD *)(a1 + 312) = &__src[v16];
    *(_DWORD *)(a1 + 320) = v9 - v16;
    sub_1003665DC(a1, v36, &v35, (uint64_t)&v37, (uint64_t *)&v34, 0);
    if (v34)
      goto LABEL_36;
    v17 = bswap32(v37);
    if (!sub_10035BFD8(a1, a1 + 1168, __src, v17)
      || !sub_10035C03C(a1, a1 + 1168, __src, v17, (uint64_t)&v37, *(_BYTE *)(a1 + 607)))
    {
      goto LABEL_45;
    }
    v18 = v45;
    v19 = BYTE1(v45);
    v20 = BYTE2(v45);
    v21 = HIBYTE(v45);
    v22 = sub_10036677C(a1, v17, 2);
    if (!v22)
    {
      v12 = "out of memory";
      goto LABEL_46;
    }
    *v22 = v37;
    v23 = v38;
    v24 = v39;
    v25 = v41;
    v22[3] = v40;
    v22[4] = v25;
    v22[1] = v23;
    v22[2] = v24;
    v26 = v42;
    v27 = v43;
    v28 = v44;
    *((_DWORD *)v22 + 32) = v45;
    v22[6] = v27;
    v22[7] = v28;
    v22[5] = v26;
    v29 = 12 * ((v18 << 24) | (v19 << 16) | (v20 << 8) | v21);
    v33 = (unsigned int *)v22;
    v34 = v29;
    v30 = (char *)v22 + 132;
    sub_1003665DC(a1, v36, &v35, (uint64_t)v22 + 132, (uint64_t *)&v34, 0);
    if (v34)
      goto LABEL_36;
    if (!sub_10035C368(a1, a1 + 1168, __src, v17, (uint64_t)v33))
    {
LABEL_45:
      v12 = 0;
      goto LABEL_46;
    }
    v34 = v17 - v29 - 132;
    sub_1003665DC(a1, v36, &v35, (uint64_t)&v30[v29], (uint64_t *)&v34, 1);
    v31 = v35;
    if (v35)
    {
      if ((*(_BYTE *)(a1 + 298) & 0x10) == 0)
      {
        v12 = "extra compressed data";
        goto LABEL_46;
      }
      if (!v34)
      {
        sub_10035EF34(a1, "extra compressed data");
        goto LABEL_52;
      }
    }
    else if (!v34)
    {
LABEL_52:
      sub_1003651F0(a1, v31);
      sub_10035C468(a1, a1 + 1168, v33, *(_QWORD *)(a1 + 408));
      if (a2)
      {
        sub_10035A878(a1, a2, 0x10u, 0);
        v32 = sub_10035F91C(a1, v15);
        *(_QWORD *)(a2 + 128) = v32;
        if (!v32)
        {
          *(_WORD *)(a1 + 1242) |= 0x8000u;
          sub_10035AEF8((_OWORD *)a1, a2);
          *(_DWORD *)(a1 + 304) = 0;
          v12 = "out of memory";
          goto LABEL_29;
        }
        memcpy(v32, __src, v15);
        *(_DWORD *)(a2 + 144) = v17;
        *(_QWORD *)(a2 + 136) = v33;
        *(_QWORD *)(a1 + 1104) = 0;
        *(_DWORD *)(a2 + 300) |= 0x10u;
        *(_DWORD *)(a2 + 8) |= 0x1000u;
        sub_10035AEF8((_OWORD *)a1, a2);
      }
      *(_DWORD *)(a1 + 304) = 0;
      return;
    }
LABEL_36:
    v12 = *(const char **)(a1 + 360);
LABEL_46:
    *(_DWORD *)(a1 + 304) = 0;
    goto LABEL_28;
  }
  v12 = "too many profiles";
LABEL_28:
  sub_1003651F0(a1, v35);
LABEL_29:
  *(_WORD *)(a1 + 1242) |= 0x8000u;
  sub_10035AEF8((_OWORD *)a1, a2);
  if (!v12)
    return;
  v11 = a1;
  v10 = v12;
LABEL_31:
  sub_10035F2A4(v11, v10);
}

uint64_t sub_100366464(uint64_t a1, int a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  char v8[64];

  v4 = *(_DWORD *)(a1 + 304);
  if (v4)
  {
    *(_DWORD *)v8 = bswap32(v4);
    sub_10035E784((uint64_t)v8, 0x40uLL, 4uLL, " using zstream");
    sub_10035EF34(a1, v8);
    *(_DWORD *)(a1 + 304) = 0;
  }
  if ((*(_DWORD *)(a1 + 896) & 0xC) == 0xC)
    v5 = 15;
  else
    v5 = 0;
  *(_BYTE *)(a1 + 616) = (*(_DWORD *)(a1 + 896) & 0xC) != 12;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  if ((*(_BYTE *)(a1 + 296) & 2) != 0)
  {
    v6 = inflateReset2((z_streamp)(a1 + 312), v5);
    if ((~*(_DWORD *)(a1 + 896) & 0x300) == 0)
      goto LABEL_15;
  }
  else
  {
    v6 = inflateInit2_((z_streamp)(a1 + 312), v5, "1.2.12", 112);
    if ((_DWORD)v6)
    {
      if ((~*(_DWORD *)(a1 + 896) & 0x300) != 0)
        goto LABEL_9;
LABEL_15:
      v6 = inflateValidate((z_streamp)(a1 + 312), 0);
      if ((_DWORD)v6)
        goto LABEL_10;
LABEL_16:
      *(_DWORD *)(a1 + 304) = a2;
      return v6;
    }
    *(_DWORD *)(a1 + 296) |= 2u;
    if ((~*(_DWORD *)(a1 + 896) & 0x300) == 0)
      goto LABEL_15;
  }
LABEL_9:
  if (!(_DWORD)v6)
    goto LABEL_16;
LABEL_10:
  sub_10035AD8C(a1, v6);
  return v6;
}

uint64_t sub_1003665DC(uint64_t result, Bytef *a2, unsigned int *a3, uint64_t a4, uint64_t *a5, int a6)
{
  uint64_t v6;
  char **v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v17;
  unsigned int v18;
  int v19;

  v6 = result;
  if (*(_DWORD *)(result + 304) != *(_DWORD *)(result + 528))
  {
    *(_QWORD *)(result + 360) = "zstream unclaimed";
    return result;
  }
  v10 = (char **)(result + 312);
  *(_QWORD *)(result + 336) = a4;
  *(_DWORD *)(result + 344) = 0;
  if (a6)
    v11 = 4;
  else
    v11 = 2;
  v12 = 1024;
  while (1)
  {
    LODWORD(v13) = *(_DWORD *)(v6 + 320);
    if ((_DWORD)v13)
    {
      LODWORD(v14) = *(_DWORD *)(v6 + 344);
      if ((_DWORD)v14)
        goto LABEL_8;
LABEL_27:
      if ((unint64_t)*a5 >= 0xFFFFFFFF)
        v14 = 0xFFFFFFFFLL;
      else
        v14 = *a5;
      *a5 -= v14;
      *(_DWORD *)(v6 + 344) = v14;
      goto LABEL_8;
    }
    v18 = *a3;
    if (v12 >= *a3)
      v13 = v18;
    else
      v13 = v12;
    *a3 = v18 - v13;
    if ((_DWORD)v13)
    {
      sub_100360C80(v6);
      sub_10035A388(v6, a2, v13);
    }
    *(_QWORD *)(v6 + 312) = a2;
    *(_DWORD *)(v6 + 320) = v13;
    v12 = v13;
    LODWORD(v14) = *(_DWORD *)(v6 + 344);
    if (!(_DWORD)v14)
      goto LABEL_27;
LABEL_8:
    v15 = *a3 ? 0 : v11;
    if (*(_BYTE *)(v6 + 616) && (_DWORD)v13 != 0)
      break;
LABEL_17:
    v17 = inflate((z_streamp)(v6 + 312), v15);
    if (v17)
    {
      v19 = v17;
      LODWORD(v14) = *(_DWORD *)(v6 + 344);
      goto LABEL_34;
    }
    if (!*a5)
    {
      LODWORD(v14) = *(_DWORD *)(v6 + 344);
      if (!(_DWORD)v14)
      {
        v19 = 0;
        goto LABEL_34;
      }
    }
  }
  if ((**v10 & 0x80000000) == 0)
  {
    *(_BYTE *)(v6 + 616) = 0;
    goto LABEL_17;
  }
  *(_QWORD *)(v6 + 360) = "invalid window size (libpng)";
  v19 = -3;
LABEL_34:
  *a5 += v14;
  *(_DWORD *)(v6 + 344) = 0;
  return sub_10035AD8C(v6, v19);
}

void *sub_10036677C(uint64_t a1, size_t __size, int a3)
{
  void *v6;
  void *v7;

  v6 = *(void **)(a1 + 1104);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 1112) >= __size)
      return v6;
    *(_QWORD *)(a1 + 1104) = 0;
    *(_QWORD *)(a1 + 1112) = 0;
    sub_10035F814(a1, v6);
  }
  v7 = sub_10035F91C(a1, __size);
  if (v7)
  {
    v6 = v7;
    bzero(v7, __size);
    *(_QWORD *)(a1 + 1104) = v6;
    *(_QWORD *)(a1 + 1112) = __size;
    return v6;
  }
  if (a3 <= 1)
  {
    if (!a3)
      sub_10035EFF0(a1, "insufficient memory to read chunk");
    sub_10035EF34(a1, "insufficient memory to read chunk");
  }
  return 0;
}

void sub_100366830(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  const char *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  _QWORD *v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  __int128 v25;
  void *v26[2];

  v6 = *(_DWORD *)(a1 + 1052);
  if (v6)
  {
    v7 = v6 - 1;
    if (!v7)
    {
LABEL_5:
      sub_1003651F0(a1, a3);
      return;
    }
    *(_DWORD *)(a1 + 1052) = v7;
    if (v7 == 1)
    {
      sub_10035E924(a1, (uint64_t)"No space in chunk cache for sPLT");
      goto LABEL_5;
    }
  }
  v8 = *(_DWORD *)(a1 + 292);
  if ((v8 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v8 & 4) != 0)
  {
    sub_1003651F0(a1, a3);
    v12 = "out of place";
LABEL_26:
    sub_10035F2A4(a1, v12);
    return;
  }
  v9 = a3 + 1;
  v10 = *(unsigned __int8 **)(a1 + 1104);
  if (v10)
  {
    if (*(_QWORD *)(a1 + 1112) >= v9)
      goto LABEL_13;
    *(_QWORD *)(a1 + 1104) = 0;
    *(_QWORD *)(a1 + 1112) = 0;
    sub_10035F814(a1, v10);
  }
  v11 = (unsigned __int8 *)sub_10035F91C(a1, a3 + 1);
  if (!v11)
  {
    sub_1003651F0(a1, a3);
    v12 = "out of memory";
    goto LABEL_26;
  }
  v10 = v11;
  bzero(v11, a3 + 1);
  *(_QWORD *)(a1 + 1104) = v10;
  *(_QWORD *)(a1 + 1112) = v9;
LABEL_13:
  sub_100360C80(a1);
  sub_10035A388(a1, v10, a3);
  if (sub_1003651F0(a1, 0))
    return;
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v10[a3] = 0;
  v13 = v10;
  do
    v14 = v13;
  while (*v13++);
  if (a3 < 2 || v13 > &v10[a3 - 2])
  {
    v19 = "malformed sPLT chunk";
    goto LABEL_28;
  }
  BYTE8(v25) = v14[1];
  if (BYTE8(v25) == 8)
    v16 = 6;
  else
    v16 = 10;
  v17 = (_DWORD)v10 - (_DWORD)v14 + a3 - 2;
  v18 = v17 / v16;
  if (v17 % v16)
  {
    v19 = "sPLT chunk has bad length";
LABEL_28:
    sub_10035E924(a1, (uint64_t)v19);
    return;
  }
  LODWORD(v26[1]) = v17 / v16;
  v20 = sub_10035FAC4((_QWORD *)a1, 10 * (v17 / v16));
  v26[0] = v20;
  if (!v20)
  {
    v19 = "sPLT chunk requires too much memory";
    goto LABEL_28;
  }
  if (v16 <= v17)
  {
    if (BYTE8(v25) == 8)
    {
      v21 = (_WORD *)v20 + 2;
      v22 = 1;
      do
      {
        *(v21 - 2) = v13[v22];
        *(v21 - 1) = v13[v22 + 1];
        *v21 = v13[v22 + 2];
        v21[1] = v13[v22 + 3];
        v21[2] = bswap32(*(unsigned __int16 *)&v13[v22 + 4]) >> 16;
        v21 += 5;
        v22 += 6;
        --v18;
      }
      while (v18);
    }
    else
    {
      v23 = 0;
      do
      {
        v24 = (_WORD *)((char *)v20 + v23);
        *v24 = bswap32(*(unsigned __int16 *)&v13[v23 + 1]) >> 16;
        v24[1] = bswap32(*(unsigned __int16 *)&v13[v23 + 3]) >> 16;
        v24[2] = bswap32(*(unsigned __int16 *)&v13[v23 + 5]) >> 16;
        v24[3] = bswap32(*(unsigned __int16 *)&v13[v23 + 7]) >> 16;
        v24[4] = bswap32(*(unsigned __int16 *)&v13[v23 + 9]) >> 16;
        v23 += 10;
      }
      while (10 * v18 != v23);
    }
  }
  *(_QWORD *)&v25 = v10;
  sub_10036B9BC(a1, a2, (uint64_t)&v25, 1);
  sub_10035F814(a1, v26[0]);
}

void sub_100366B64(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  int v7;
  const char *v8;
  Bytef buf[2];
  unsigned __int16 v10;
  unsigned __int16 v11;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v4 & 4) != 0)
    goto LABEL_13;
  if (a2 && (*(_BYTE *)(a2 + 8) & 0x10) != 0)
  {
    sub_1003651F0(a1, a3);
    v8 = "duplicate";
    goto LABEL_14;
  }
  v7 = *(unsigned __int8 *)(a1 + 607);
  if (v7 == 3)
  {
    if ((v4 & 2) != 0)
    {
      if (a3 > 0x100 || a3 - 1 >= *(unsigned __int16 *)(a1 + 592))
      {
        sub_1003651F0(a1, a3);
        v8 = "invalid";
        goto LABEL_14;
      }
      sub_100360C80(a1);
      sub_10035A388(a1, buf, a3);
      *(_WORD *)(a1 + 600) = a3;
      if (sub_1003651F0(a1, 0))
        goto LABEL_17;
      goto LABEL_23;
    }
LABEL_13:
    sub_1003651F0(a1, a3);
    v8 = "out of place";
    goto LABEL_14;
  }
  if (v7 != 2)
  {
    if (!*(_BYTE *)(a1 + 607))
    {
      if (a3 == 2)
      {
        sub_100360C80(a1);
        sub_10035A388(a1, buf, 2);
        *(_WORD *)(a1 + 600) = 1;
        *(_WORD *)(a1 + 752) = bswap32(*(unsigned __int16 *)buf) >> 16;
        if (!sub_1003651F0(a1, 0))
          goto LABEL_23;
LABEL_17:
        *(_WORD *)(a1 + 600) = 0;
        return;
      }
LABEL_19:
      sub_1003651F0(a1, a3);
      sub_10035F2A4(a1, "invalid");
      return;
    }
    sub_1003651F0(a1, a3);
    v8 = "invalid with alpha channel";
LABEL_14:
    sub_10035F2A4(a1, v8);
    return;
  }
  if (a3 != 6)
    goto LABEL_19;
  sub_100360C80(a1);
  sub_10035A388(a1, buf, 6);
  *(_WORD *)(a1 + 600) = 1;
  *(_WORD *)(a1 + 746) = bswap32(*(unsigned __int16 *)buf) >> 16;
  *(_WORD *)(a1 + 748) = bswap32(v10) >> 16;
  *(_WORD *)(a1 + 750) = bswap32(v11) >> 16;
  if (sub_1003651F0(a1, 0))
    goto LABEL_17;
LABEL_23:
  sub_10036B878((_QWORD *)a1, a2, buf, *(unsigned __int16 *)(a1 + 600), a1 + 744);
}

uint64_t sub_100366E6C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  __int16 v15;
  Bytef buf[2];
  unsigned __int16 v17;
  unsigned __int16 v18;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v4 & 4) != 0 || (v6 = *(unsigned __int8 *)(a1 + 607), (v4 & 2) == 0) && v6 == 3)
  {
    sub_1003651F0(a1, a3);
    return sub_10035F2A4(a1, "out of place");
  }
  if (a2 && (*(_BYTE *)(a2 + 8) & 0x20) != 0)
  {
    sub_1003651F0(a1, a3);
    return sub_10035F2A4(a1, "duplicate");
  }
  if ((v6 & 2) != 0)
    v7 = 6;
  else
    v7 = 2;
  if (v6 == 3)
    v8 = 1;
  else
    v8 = v7;
  if (v8 != a3)
  {
    sub_1003651F0(a1, a3);
    return sub_10035F2A4(a1, "invalid");
  }
  v15 = 0;
  v14 = 0;
  v9 = a3;
  sub_100360C80(a1);
  sub_10035A388(a1, buf, v9);
  result = sub_1003651F0(a1, 0);
  if (!(_DWORD)result)
  {
    v11 = *(unsigned __int8 *)(a1 + 607);
    if (v11 == 3)
    {
      LOBYTE(v14) = buf[0];
      if (!a2 || !*(_WORD *)(a2 + 32))
      {
        HIWORD(v14) = 0;
        *(_DWORD *)((char *)&v14 + 2) = 0;
LABEL_29:
        v15 = 0;
        return sub_10036ACB8(a1, a2, (uint64_t)&v14);
      }
      if (*(unsigned __int16 *)(a2 + 32) <= buf[0])
        return sub_10035F2A4(a1, "invalid index");
      v12 = (unsigned __int8 *)(*(_QWORD *)(a1 + 584) + 3 * buf[0]);
      WORD1(v14) = *v12;
      WORD2(v14) = v12[1];
      LOWORD(v12) = v12[2];
    }
    else
    {
      LOBYTE(v14) = 0;
      v13 = bswap32(*(unsigned __int16 *)buf) >> 16;
      if ((v11 & 2) == 0)
      {
        v15 = v13;
        HIWORD(v14) = v13;
        WORD2(v14) = v13;
        WORD1(v14) = v13;
        return sub_10036ACB8(a1, a2, (uint64_t)&v14);
      }
      WORD1(v14) = v13;
      WORD2(v14) = bswap32(v17) >> 16;
      LODWORD(v12) = bswap32(v18) >> 16;
    }
    HIWORD(v14) = (_WORD)v12;
    goto LABEL_29;
  }
  return result;
}

void sub_1003670A4(uint64_t a1, uint64_t a2, size_t __size)
{
  unsigned int v4;
  const char *v5;
  _QWORD *v7;
  int v8;
  uint64_t i;
  Bytef buf;

  if ((*(_BYTE *)(a1 + 292) & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  v4 = __size;
  if (__size <= 1)
  {
    sub_1003651F0(a1, __size);
    v5 = "too short";
LABEL_15:
    sub_10035F2A4(a1, v5);
    return;
  }
  if (!a2 || (*(_BYTE *)(a2 + 10) & 1) != 0)
  {
    sub_1003651F0(a1, __size);
    v5 = "duplicate";
    goto LABEL_15;
  }
  *(_DWORD *)(a2 + 300) |= 0x8000u;
  v7 = sub_10035FAC4((_QWORD *)a1, __size);
  *(_QWORD *)(a2 + 248) = v7;
  if (!v7)
  {
    sub_1003651F0(a1, v4);
    v5 = "out of memory";
    goto LABEL_15;
  }
  sub_100360C80(a1);
  sub_10035A388(a1, &buf, 1);
  **(_BYTE **)(a2 + 248) = buf;
  sub_100360C80(a1);
  sub_10035A388(a1, &buf, 1);
  v8 = buf;
  *(_BYTE *)(*(_QWORD *)(a2 + 248) + 1) = buf;
  if ((v8 | 4) != 0x4D && **(unsigned __int8 **)(a2 + 248) != v8)
  {
    sub_1003651F0(a1, v4);
    sub_10035F2A4(a1, "incorrect byte-order specifier");
    goto LABEL_19;
  }
  if (v4 != 2)
  {
    for (i = 2; i != v4; *(_BYTE *)(*(_QWORD *)(a2 + 248) + i++) = buf)
    {
      sub_100360C80(a1);
      sub_10035A388(a1, &buf, 1);
    }
  }
  if (!sub_1003651F0(a1, 0))
  {
    sub_10036ACE4((_QWORD *)a1, a2, v4, *(_QWORD *)(a2 + 248));
LABEL_19:
    sub_10035F814(a1, *(void **)(a2 + 248));
    *(_QWORD *)(a2 + 248) = 0;
  }
}

_QWORD *sub_1003672B4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v5;
  uint64_t v6;
  _WORD *v7;
  _QWORD *result;
  const char *v9;
  Bytef buf[2];
  _BYTE v11[512];

  if ((*(_DWORD *)(a1 + 292) & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((*(_DWORD *)(a1 + 292) & 6) != 2)
  {
    sub_1003651F0(a1, a3);
    v9 = "out of place";
    return (_QWORD *)sub_10035F2A4(a1, v9);
  }
  if (a2 && (*(_BYTE *)(a2 + 8) & 0x40) != 0)
  {
    sub_1003651F0(a1, a3);
    v9 = "duplicate";
    return (_QWORD *)sub_10035F2A4(a1, v9);
  }
  if (a3 > 0x201 || (v5 = a3 >> 1, a3 >> 1 != *(unsigned __int16 *)(a1 + 592)))
  {
    sub_1003651F0(a1, a3);
    v9 = "invalid";
    return (_QWORD *)sub_10035F2A4(a1, v9);
  }
  if (a3 >= 2)
  {
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = v5;
    v7 = v11;
    do
    {
      sub_100360C80(a1);
      sub_10035A388(a1, buf, 2);
      *v7++ = bswap32(*(unsigned __int16 *)buf) >> 16;
      --v6;
    }
    while (v6);
  }
  result = (_QWORD *)sub_1003651F0(a1, 0);
  if (!(_DWORD)result)
    return sub_10036ADA8((_QWORD *)a1, a2, v11);
  return result;
}

uint64_t sub_100367474(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  uint64_t result;
  Bytef buf[4];
  unsigned int v8;
  char v9;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v4 & 4) != 0)
  {
    sub_1003651F0(a1, a3);
    return sub_10035F2A4(a1, "out of place");
  }
  else if (a2 && (*(_BYTE *)(a2 + 8) & 0x80) != 0)
  {
    sub_1003651F0(a1, a3);
    return sub_10035F2A4(a1, "duplicate");
  }
  else if (a3 == 9)
  {
    sub_100360C80(a1);
    sub_10035A388(a1, buf, 9);
    result = sub_1003651F0(a1, 0);
    if (!(_DWORD)result)
      return sub_10036B354(a1, a2, bswap32(*(unsigned int *)buf), bswap32(v8), v9);
  }
  else
  {
    sub_1003651F0(a1, a3);
    return sub_10035F2A4(a1, "invalid");
  }
  return result;
}

uint64_t sub_100367608(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  unsigned int buf;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  char v15;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v4 & 4) != 0)
  {
    sub_1003651F0(a1, a3);
    return sub_10035F2A4(a1, "out of place");
  }
  if (a2 && (*(_BYTE *)(a2 + 9) & 1) != 0)
  {
    sub_1003651F0(a1, a3);
    return sub_10035F2A4(a1, "duplicate");
  }
  if (a3 != 9)
  {
    sub_1003651F0(a1, a3);
    return sub_10035F2A4(a1, "invalid");
  }
  sub_100360C80(a1);
  sub_10035A388(a1, (Bytef *)&buf, 9);
  result = sub_1003651F0(a1, 0);
  if (!(_DWORD)result)
  {
    if ((char)buf < 0)
    {
      v7 = -((2147418112 * BYTE1(buf) - ((buf << 24) | (BYTE2(buf) << 8) | HIBYTE(buf))) & 0x7FFFFFFF);
      v8 = v11;
      if (((char)v11 & 0x80000000) == 0)
        goto LABEL_9;
    }
    else
    {
      v7 = _byteswap_ulong(buf);
      v8 = v11;
      if (((char)v11 & 0x80000000) == 0)
      {
LABEL_9:
        v9 = (v8 << 24) | (v12 << 16) | (v13 << 8) | v14;
        return sub_10036AF44(a1, a2, v7, v9, v15);
      }
    }
    v9 = -((2147418112 * v12 - ((v8 << 24) | (v13 << 8) | v14)) & 0x7FFFFFFF);
    return sub_10036AF44(a1, a2, v7, v9, v15);
  }
  return result;
}

void sub_100367844(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  unint64_t v7;
  char *v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  char *v12;
  char *v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  const char **v24;
  const char **v25;
  uint64_t v26;
  const char *v27;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v4 & 4) != 0)
  {
    sub_1003651F0(a1, a3);
    v10 = "out of place";
    goto LABEL_32;
  }
  if (a2 && (*(_BYTE *)(a2 + 9) & 4) != 0)
  {
    sub_1003651F0(a1, a3);
    v10 = "duplicate";
    goto LABEL_32;
  }
  v7 = a3 + 1;
  v8 = *(char **)(a1 + 1104);
  if (v8)
  {
    if (*(_QWORD *)(a1 + 1112) >= v7)
      goto LABEL_10;
    *(_QWORD *)(a1 + 1104) = 0;
    *(_QWORD *)(a1 + 1112) = 0;
    sub_10035F814(a1, v8);
  }
  v9 = (char *)sub_10035F91C(a1, a3 + 1);
  if (!v9)
  {
    sub_1003651F0(a1, a3);
    goto LABEL_19;
  }
  v8 = v9;
  bzero(v9, a3 + 1);
  *(_QWORD *)(a1 + 1104) = v8;
  *(_QWORD *)(a1 + 1112) = v7;
LABEL_10:
  sub_100360C80(a1);
  sub_10035A388(a1, (Bytef *)v8, a3);
  if (!sub_1003651F0(a1, 0))
  {
    v11 = 0;
    v12 = &v8[a3];
    *v12 = 0;
    while (v8[v11++])
      ;
    if (a3 - v11 + 1 <= 12)
    {
      v10 = "invalid";
      goto LABEL_32;
    }
    v14 = &v8[v11];
    if (v8[v11] < 0)
    {
      v15 = -((2147418112 * v8[v11 + 1]
             - ((v8[v11] << 24) | (v8[v11 + 2] << 8) | v8[v11 + 3])) & 0x7FFFFFFF);
      v16 = (unsigned __int8 *)&v8[v11];
      v17 = v8[v11 + 4];
      if ((v8[v11 + 4] & 0x80000000) == 0)
      {
LABEL_22:
        v18 = (v17 << 24) | (v16[5] << 16) | (v16[6] << 8) | v16[7];
        v19 = &v8[v11];
        v20 = v19[8];
        v21 = v19[9];
        if (v19[8])
          goto LABEL_27;
        goto LABEL_26;
      }
    }
    else
    {
      v15 = _byteswap_ulong(*(_DWORD *)&v8[v11]);
      v16 = (unsigned __int8 *)&v8[v11];
      v17 = v8[v11 + 4];
      if ((v8[v11 + 4] & 0x80000000) == 0)
        goto LABEL_22;
    }
    v18 = -((2147418112 * v16[5] - ((v17 << 24) | (v16[6] << 8) | v16[7])) & 0x7FFFFFFF);
    v19 = &v8[v11];
    v20 = v19[8];
    v21 = v19[9];
    if (v19[8])
      goto LABEL_27;
LABEL_26:
    if ((_DWORD)v21 != 2)
    {
LABEL_31:
      v10 = "invalid parameter count";
      goto LABEL_32;
    }
LABEL_27:
    if (v20 - 1 <= 1 && (_DWORD)v21 != 3 || v20 == 3 && (_DWORD)v21 != 4)
      goto LABEL_31;
    v22 = v14 + 9;
    v27 = v19 + 10;
    if (v20 >= 4)
      sub_10035F2A4(a1, "unrecognized equation type");
    while (*++v22)
      ;
    v24 = (const char **)sub_10035FAC4((_QWORD *)a1, 8 * v21);
    if (v24)
    {
      v25 = v24;
      if (!(_DWORD)v21)
      {
LABEL_44:
        sub_10036AF64((_QWORD *)a1, a2, v8, v15, v18, v20, v21, v27, v24);
        sub_10035F814(a1, v25);
        return;
      }
      v26 = 0;
      while (1)
      {
        v24[v26] = ++v22;
        if (v22 > v12)
          break;
        while (*v22)
        {
          if (++v22 > v12)
            goto LABEL_45;
        }
        if (++v26 == v21)
          goto LABEL_44;
      }
LABEL_45:
      sub_10035F814(a1, v24);
      v10 = "invalid data";
LABEL_32:
      sub_10035F2A4(a1, v10);
      return;
    }
LABEL_19:
    v10 = "out of memory";
    goto LABEL_32;
  }
}

_QWORD *sub_100367BE0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  const char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  _QWORD *result;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unsigned int v15;
  unint64_t v16;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v4 & 4) != 0)
  {
    sub_1003651F0(a1, a3);
    v7 = "out of place";
    return (_QWORD *)sub_10035F2A4(a1, v7);
  }
  if (a2 && (*(_BYTE *)(a2 + 9) & 0x40) != 0)
  {
    sub_1003651F0(a1, a3);
    v7 = "duplicate";
    return (_QWORD *)sub_10035F2A4(a1, v7);
  }
  if (a3 <= 3)
  {
    sub_1003651F0(a1, a3);
    v7 = "invalid";
    return (_QWORD *)sub_10035F2A4(a1, v7);
  }
  v8 = a3 + 1;
  v9 = *(char **)(a1 + 1104);
  if (v9)
  {
    if (*(_QWORD *)(a1 + 1112) >= v8)
      goto LABEL_13;
    *(_QWORD *)(a1 + 1104) = 0;
    *(_QWORD *)(a1 + 1112) = 0;
    sub_10035F814(a1, v9);
  }
  v10 = (char *)sub_10035F91C(a1, a3 + 1);
  if (!v10)
  {
    sub_10035F2A4(a1, "out of memory");
    return (_QWORD *)sub_1003651F0(a1, a3);
  }
  v9 = v10;
  bzero(v10, a3 + 1);
  *(_QWORD *)(a1 + 1104) = v9;
  *(_QWORD *)(a1 + 1112) = v8;
LABEL_13:
  sub_100360C80(a1);
  sub_10035A388(a1, (Bytef *)v9, a3);
  v9[a3] = 0;
  result = (_QWORD *)sub_1003651F0(a1, 0);
  if (!(_DWORD)result)
  {
    if (*v9 - 1 >= 2)
    {
      v7 = "invalid unit";
      return (_QWORD *)sub_10035F2A4(a1, v7);
    }
    v16 = 1;
    v15 = 0;
    if (sub_10035CB50((uint64_t)v9, a3, &v15, &v16)
      && (v12 = v16, v16 < a3)
      && (v13 = v16 + 1, ++v16, !v9[v12]))
    {
      if ((v15 & 0x188) == 0x108)
      {
        v15 = 0;
        if (sub_10035CB50((uint64_t)v9, a3, &v15, &v16) && v16 == a3)
        {
          if ((v15 & 0x188) == 0x108)
            return sub_10036B1D4((_QWORD *)a1, a2, *v9, v9 + 1, &v9[v13]);
          v14 = "non-positive height";
        }
        else
        {
          v14 = "bad height format";
        }
      }
      else
      {
        v14 = "non-positive width";
      }
    }
    else
    {
      v14 = "bad width format";
    }
    return (_QWORD *)sub_10035F2A4(a1, v14);
  }
  return result;
}

uint64_t sub_100367E8C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  uint64_t result;
  uint64_t v7;
  Bytef buf[2];
  int v9;
  char v10;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if (a2 && (*(_BYTE *)(a2 + 9) & 2) != 0)
  {
    sub_1003651F0(a1, a3);
    return sub_10035F2A4(a1, "duplicate");
  }
  else
  {
    if ((v4 & 4) != 0)
      *(_DWORD *)(a1 + 292) = v4 | 8;
    if (a3 == 7)
    {
      v7 = 0;
      sub_100360C80(a1);
      sub_10035A388(a1, buf, 7);
      result = sub_1003651F0(a1, 0);
      if (!(_DWORD)result)
      {
        BYTE6(v7) = v10;
        *(_DWORD *)((char *)&v7 + 2) = v9;
        LOWORD(v7) = bswap32(*(unsigned __int16 *)buf) >> 16;
        return sub_10036B7FC(a1, a2, (uint64_t)&v7);
      }
    }
    else
    {
      sub_1003651F0(a1, a3);
      return sub_10035F2A4(a1, "invalid");
    }
  }
  return result;
}

uint64_t sub_100367FB0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  uint64_t result;
  const char *v9;
  int v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v6 = *(_DWORD *)(a1 + 1052);
  if (v6)
  {
    v7 = v6 - 1;
    if (!v7)
      return sub_1003651F0(a1, a3);
    *(_DWORD *)(a1 + 1052) = v7;
    if (v7 == 1)
    {
      sub_1003651F0(a1, a3);
      v9 = "no space in chunk cache";
      return sub_10035F2A4(a1, v9);
    }
  }
  v10 = *(_DWORD *)(a1 + 292);
  if ((v10 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v10 & 4) != 0)
    *(_DWORD *)(a1 + 292) = v10 | 8;
  v11 = a3 + 1;
  v12 = *(char **)(a1 + 1104);
  if (v12)
  {
    if (*(_QWORD *)(a1 + 1112) >= v11)
      goto LABEL_14;
    *(_QWORD *)(a1 + 1104) = 0;
    *(_QWORD *)(a1 + 1112) = 0;
    sub_10035F814(a1, v12);
  }
  v13 = (char *)sub_10035F91C(a1, a3 + 1);
  if (!v13)
  {
    sub_10035EF34(a1, "insufficient memory to read chunk");
    v9 = "out of memory";
    return sub_10035F2A4(a1, v9);
  }
  v12 = v13;
  bzero(v13, a3 + 1);
  *(_QWORD *)(a1 + 1104) = v12;
  *(_QWORD *)(a1 + 1112) = v11;
LABEL_14:
  sub_100360C80(a1);
  sub_10035A388(a1, (Bytef *)v12, a3);
  result = sub_1003651F0(a1, 0);
  if (!(_DWORD)result)
  {
    v14 = 0;
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    v12[a3] = 0;
    while (v12[v14++])
      ;
    if (a3 + 1 == v14)
      v16 = v12;
    else
      v16 = v12 + 1;
    LODWORD(v17) = -1;
    v20 = 0;
    v19 = 0uLL;
    *((_QWORD *)&v17 + 1) = v12;
    *(_QWORD *)&v18 = &v16[v14 - 1];
    *((_QWORD *)&v18 + 1) = strlen((const char *)v18);
    result = sub_10036B4C4(a1, a2, (uint64_t)&v17, 1);
    if ((_DWORD)result)
      return sub_10035E924(a1, (uint64_t)"Insufficient memory to process text chunk");
  }
  return result;
}

uint64_t sub_1003681B0(uint64_t a1, uint64_t a2, size_t __size)
{
  unsigned int v3;
  int v6;
  int v7;
  uint64_t result;
  const char *v9;
  int v10;
  uint64_t *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[7];
  unint64_t v19;

  v3 = __size;
  v6 = *(_DWORD *)(a1 + 1052);
  if (v6)
  {
    v7 = v6 - 1;
    if (!v7)
      return sub_1003651F0(a1, __size);
    *(_DWORD *)(a1 + 1052) = v7;
    if (v7 == 1)
    {
      sub_1003651F0(a1, __size);
      v9 = "no space in chunk cache";
      return sub_10035F2A4(a1, v9);
    }
  }
  v10 = *(_DWORD *)(a1 + 292);
  if ((v10 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v10 & 4) != 0)
    *(_DWORD *)(a1 + 292) = v10 | 8;
  v11 = (uint64_t *)(a1 + 1104);
  v12 = *(void **)(a1 + 1104);
  if (v12)
  {
    if (*(_QWORD *)(a1 + 1112) >= (unint64_t)__size)
      goto LABEL_14;
    *v11 = 0;
    *(_QWORD *)(a1 + 1112) = 0;
    sub_10035F814(a1, v12);
  }
  v13 = sub_10035F91C(a1, v3);
  if (!v13)
  {
    sub_1003651F0(a1, v3);
    v9 = "out of memory";
    return sub_10035F2A4(a1, v9);
  }
  v12 = v13;
  bzero(v13, v3);
  *(_QWORD *)(a1 + 1104) = v12;
  *(_QWORD *)(a1 + 1112) = v3;
LABEL_14:
  sub_100360C80(a1);
  sub_10035A388(a1, (Bytef *)v12, v3);
  result = sub_1003651F0(a1, 0);
  if ((_DWORD)result)
    return result;
  if (!v3)
    goto LABEL_21;
  v14 = 0;
  while (*((_BYTE *)v12 + v14))
  {
    if (v3 == ++v14)
    {
      LODWORD(v14) = v3;
      break;
    }
  }
  if ((v14 - 80) < 0xFFFFFFB1)
  {
LABEL_21:
    v15 = "bad keyword";
    return sub_10035F2A4(a1, v15);
  }
  if ((int)v14 + 3 > v3)
  {
    v15 = "truncated";
    return sub_10035F2A4(a1, v15);
  }
  if (*((_BYTE *)v12 + v14 + 1))
  {
    v15 = "unknown compression type";
    return sub_10035F2A4(a1, v15);
  }
  v19 = -1;
  result = sub_100368424(a1, v3, (int)v14 + 2, &v19);
  if ((_DWORD)result == 1)
  {
    v18[0] = 0;
    v16 = *v11;
    if (*v11)
    {
      v17 = v19;
      *(_BYTE *)(v16 + v19 + (v14 + 2)) = 0;
      v18[1] = v16;
      v18[2] = v16 + v14 + 2;
      v18[3] = v17;
      memset(&v18[4], 0, 24);
      result = sub_10036B4C4(a1, a2, (uint64_t)v18, 1);
      if ((_DWORD)result)
        v15 = "insufficient memory";
      else
        v15 = 0;
    }
    else
    {
      v15 = "Read failure in png_handle_zTXt";
    }
  }
  else
  {
    v15 = *(const char **)(a1 + 360);
  }
  if (v15)
    return sub_10035F2A4(a1, v15);
  return result;
}

uint64_t sub_100368424(uint64_t a1, int a2, unsigned int a3, unint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  _BYTE *v15;
  _BYTE *v16;
  void *v17;
  int v19;

  v8 = *(_QWORD *)(a1 + 1056);
  if (v8 + 1 > 1)
  {
    v9 = a3 + 1;
    if (v8 < v9)
    {
      v12 = 4294967292;
      sub_10035AD8C(a1, -4);
      return v12;
    }
  }
  else
  {
    v9 = a3 + 1;
    v8 = -1;
  }
  v10 = v8 - v9;
  if (v10 < *a4)
    *a4 = v10;
  v11 = sub_100366464(a1, *(_DWORD *)(a1 + 528));
  if (!v11)
  {
    v19 = a2 - a3;
    v12 = sub_10036A23C(a1, *(_DWORD *)(a1 + 528), (char *)(*(_QWORD *)(a1 + 1104) + a3), &v19, 0, a4);
    if ((_DWORD)v12 == 1)
    {
      if (inflateReset((z_streamp)(a1 + 312)))
      {
        sub_10035AD8C(a1, 1);
        v12 = 4294967289;
      }
      else
      {
        v13 = *a4;
        v14 = a3 + *a4 + 1;
        v15 = sub_10035F91C(a1, v14);
        if (v15)
        {
          v16 = v15;
          bzero(v15, v14);
          v12 = sub_10036A23C(a1, *(_DWORD *)(a1 + 528), (char *)(*(_QWORD *)(a1 + 1104) + a3), &v19, (uint64_t)&v16[a3], a4);
          if ((_DWORD)v12 == 1)
          {
            if (v13 == *a4)
            {
              v16[v13 + a3] = 0;
              v17 = *(void **)(a1 + 1104);
              if (a3)
                memcpy(v16, *(const void **)(a1 + 1104), a3);
              *(_QWORD *)(a1 + 1104) = v16;
              *(_QWORD *)(a1 + 1112) = v14;
              sub_10035F814(a1, v17);
              if (a2 - a3 != v19)
                sub_10035F2A4(a1, "extra compressed data");
              v12 = 1;
              goto LABEL_25;
            }
            v12 = 4294967289;
          }
          sub_10035F814(a1, v16);
        }
        else
        {
          v12 = 4294967292;
          sub_10035AD8C(a1, -4);
        }
      }
    }
LABEL_25:
    *(_DWORD *)(a1 + 304) = 0;
    return v12;
  }
  if (v11 == 1)
    return 4294967289;
  else
    return v11;
}

uint64_t sub_100368624(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  uint64_t result;
  const char *v9;
  int v10;
  unint64_t v11;
  char **v12;
  char *v13;
  char *v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  unsigned int v23;
  uint64_t v25;
  int v26;
  _QWORD v27[7];
  unint64_t v28;

  v6 = *(_DWORD *)(a1 + 1052);
  if (v6)
  {
    v7 = v6 - 1;
    if (!v7)
      return sub_1003651F0(a1, a3);
    *(_DWORD *)(a1 + 1052) = v7;
    if (v7 == 1)
    {
      sub_1003651F0(a1, a3);
      v9 = "no space in chunk cache";
      return sub_10035F2A4(a1, v9);
    }
  }
  v10 = *(_DWORD *)(a1 + 292);
  if ((v10 & 1) == 0)
    sub_10035EFF0(a1, "missing IHDR");
  if ((v10 & 4) != 0)
    *(_DWORD *)(a1 + 292) = v10 | 8;
  v11 = a3 + 1;
  v12 = (char **)(a1 + 1104);
  v13 = *(char **)(a1 + 1104);
  if (v13)
  {
    if (*(_QWORD *)(a1 + 1112) >= v11)
      goto LABEL_14;
    *v12 = 0;
    *(_QWORD *)(a1 + 1112) = 0;
    sub_10035F814(a1, v13);
  }
  v14 = (char *)sub_10035F91C(a1, a3 + 1);
  if (!v14)
  {
    sub_10035EF34(a1, "insufficient memory to read chunk");
    sub_1003651F0(a1, a3);
    v9 = "out of memory";
    return sub_10035F2A4(a1, v9);
  }
  v13 = v14;
  bzero(v14, a3 + 1);
  *(_QWORD *)(a1 + 1104) = v13;
  *(_QWORD *)(a1 + 1112) = v11;
LABEL_14:
  sub_100360C80(a1);
  sub_10035A388(a1, (Bytef *)v13, a3);
  result = sub_1003651F0(a1, 0);
  if ((_DWORD)result)
    return result;
  if (!a3)
    goto LABEL_21;
  v15 = 0;
  while (v13[v15])
  {
    if (a3 == ++v15)
    {
      LODWORD(v15) = a3;
      break;
    }
  }
  if ((v15 - 80) < 0xFFFFFFB1)
  {
LABEL_21:
    v16 = "bad keyword";
    return sub_10035F2A4(a1, v16);
  }
  if ((int)v15 + 5 > a3)
  {
    v16 = "truncated";
    return sub_10035F2A4(a1, v16);
  }
  v17 = &v13[v15];
  v18 = v17[1];
  if (v17[1] && (v18 != 1 || v17[2]))
  {
    v16 = "bad compression info";
    return sub_10035F2A4(a1, v16);
  }
  v19 = (v15 + 3);
  v20 = v19;
  while (v13[v20])
  {
    if (a3 == (_DWORD)++v20)
    {
      LODWORD(v20) = a3;
      break;
    }
  }
  v21 = v20 + 1;
  if ((int)v20 + 1 >= a3)
  {
    v23 = v20 + 1;
  }
  else
  {
    v22 = &v13[v21];
    v23 = v20 + 1;
    while (*v22++)
    {
      if (a3 == ++v23)
      {
        v23 = a3;
        break;
      }
    }
  }
  v25 = v23 + 1;
  if (v18 || a3 < v25)
  {
    v16 = "truncated";
    if (!v18 || a3 <= v25)
      return sub_10035F2A4(a1, v16);
    v28 = -1;
    if (sub_100368424(a1, a3, v25, &v28) == 1)
    {
      v13 = *v12;
    }
    else
    {
      v16 = *(const char **)(a1 + 360);
      if (v16)
        return sub_10035F2A4(a1, v16);
    }
  }
  else
  {
    v28 = a3 - v25;
  }
  v27[0] = 0;
  v13[v28 + v25] = 0;
  if (v18)
    v26 = 2;
  else
    v26 = 1;
  LODWORD(v27[0]) = v26;
  v27[5] = &v13[v19];
  v27[6] = &v13[v21];
  v27[1] = v13;
  v27[2] = &v13[v25];
  v27[3] = 0;
  v27[4] = v28;
  result = sub_10036B4C4(a1, a2, (uint64_t)v27, 1);
  if ((_DWORD)result)
  {
    v16 = "insufficient memory";
    return sub_10035F2A4(a1, v16);
  }
  return result;
}

void sub_10036894C(uint64_t a1, uint64_t a2, size_t __size, int a4)
{
  int v4;
  int v7;
  int v8;
  int v9;
  void *v10;

  v4 = a4;
  if (!*(_QWORD *)(a1 + 944))
  {
    if (a4)
    {
      if (a4 == 3)
        goto LABEL_15;
    }
    else
    {
      v4 = *(_DWORD *)(a1 + 952);
      if (v4 == 3)
        goto LABEL_15;
    }
    if (v4 != 2 || (*(_BYTE *)(a1 + 531) & 0x20) == 0)
    {
      sub_1003651F0(a1, __size);
      goto LABEL_16;
    }
LABEL_15:
    if (!sub_100368AEC(a1, __size))
      goto LABEL_24;
    goto LABEL_16;
  }
  if (!sub_100368AEC(a1, __size))
    goto LABEL_24;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 944))(a1, a1 + 1064);
  if (v7 < 0)
    sub_10035EFF0(a1, "error in user chunk");
  if (!v7)
  {
    if (v4 <= 1)
    {
      if (*(int *)(a1 + 952) <= 1)
      {
        sub_10035EF34(a1, "Saving unknown chunk:");
        sub_10035F02C(a1, "forcing save of an unhandled chunk; please call png_set_keep_unknown_chunks");
      }
      goto LABEL_18;
    }
LABEL_16:
    if (v4 == 3)
    {
LABEL_19:
      v8 = *(_DWORD *)(a1 + 1052);
      if (!v8)
      {
LABEL_30:
        sub_10036BB5C(a1, a2, a1 + 1064, 1);
        goto LABEL_31;
      }
      if (v8 != 1)
      {
        if (v8 == 2)
        {
          v9 = 1;
          *(_DWORD *)(a1 + 1052) = 1;
          sub_10035F2A4(a1, "no space in chunk cache");
          v10 = *(void **)(a1 + 1072);
          if (!v10)
            goto LABEL_26;
LABEL_25:
          sub_10035F814(a1, v10);
          goto LABEL_26;
        }
        *(_DWORD *)(a1 + 1052) = v8 - 1;
        goto LABEL_30;
      }
LABEL_24:
      v9 = 1;
      v10 = *(void **)(a1 + 1072);
      if (!v10)
        goto LABEL_26;
      goto LABEL_25;
    }
    if (v4 != 2)
      goto LABEL_24;
LABEL_18:
    if ((*(_BYTE *)(a1 + 531) & 0x20) == 0)
      goto LABEL_24;
    goto LABEL_19;
  }
LABEL_31:
  v9 = 0;
  v10 = *(void **)(a1 + 1072);
  if (v10)
    goto LABEL_25;
LABEL_26:
  *(_QWORD *)(a1 + 1072) = 0;
  if (v9)
  {
    if ((*(_BYTE *)(a1 + 531) & 0x20) == 0)
      sub_10035EFF0(a1, "unhandled critical chunk");
  }
}

uint64_t sub_100368AEC(uint64_t a1, size_t __size)
{
  unsigned int v2;
  void *v4;
  unint64_t v5;
  size_t v6;
  Bytef *v7;
  int v8;

  v2 = __size;
  v4 = *(void **)(a1 + 1072);
  if (v4)
  {
    sub_10035F814(a1, v4);
    *(_QWORD *)(a1 + 1072) = 0;
  }
  v5 = *(_QWORD *)(a1 + 1056);
  if (v5 + 1 > 1)
  {
    v6 = v2;
    if (v5 < v2)
    {
      v7 = 0;
      if (!v2)
      {
LABEL_12:
        if (v2)
        {
          sub_100360C80(a1);
          sub_10035A388(a1, v7, v6);
        }
        goto LABEL_15;
      }
LABEL_10:
      if (!v7)
      {
        sub_1003651F0(a1, v2);
        sub_10035F2A4(a1, "unknown chunk exceeds memory limits");
        return 0;
      }
      goto LABEL_12;
    }
  }
  else
  {
    v6 = v2;
  }
  v8 = *(_DWORD *)(a1 + 528);
  *(_BYTE *)(a1 + 1064) = HIBYTE(v8);
  *(_BYTE *)(a1 + 1065) = BYTE2(v8);
  *(_BYTE *)(a1 + 1066) = BYTE1(v8);
  *(_BYTE *)(a1 + 1067) = v8;
  *(_BYTE *)(a1 + 1068) = 0;
  *(_QWORD *)(a1 + 1080) = v6;
  *(_BYTE *)(a1 + 1088) = *(_DWORD *)(a1 + 292);
  if (v2)
  {
    v7 = (Bytef *)sub_10035FAC4((_QWORD *)a1, v6);
    *(_QWORD *)(a1 + 1072) = v7;
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 1072) = 0;
LABEL_15:
  sub_1003651F0(a1, 0);
  return 1;
}

uint64_t sub_100368C14(uint64_t result, char *__dst, int a3)
{
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char *v15;
  char v16;
  unsigned int v17;
  int v18;
  char v19;
  int v20;
  int v21;
  size_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  char v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  size_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  __int16 *v55;
  size_t v56;
  __int16 v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  int *v70;
  size_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  _OWORD *v75;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  unint64_t v80;
  _OWORD *v81;
  __int128 v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  char v86;

  v3 = *(unsigned __int8 *)(result + 615);
  if (!*(_BYTE *)(result + 615))
    sub_10035E6F4(result, "internal row logic error");
  v4 = __dst;
  v5 = *(_QWORD *)(result + 544);
  v6 = *(unsigned int *)(result + 496);
  v7 = *(unsigned __int8 *)(result + 605);
  v8 = *(_QWORD *)(result + 568);
  if (v8)
  {
    v9 = (v6 * (unint64_t)*(unsigned __int8 *)(result + 615) + 7) >> 3;
    if (v3 >= 8)
      v9 = v6 * (unint64_t)(v3 >> 3);
    if (v8 != v9)
      sub_10035E6F4(result, "internal row size calculation error");
  }
  if (!(_DWORD)v6)
    sub_10035E6F4(result, "internal row width error");
  v10 = (char *)(v5 + 1);
  v11 = v6 * (unint64_t)*(unsigned __int8 *)(result + 615);
  v12 = v3 >> 3;
  v13 = v11 & 7;
  if ((v11 & 7) != 0)
  {
    v14 = v12 * (unint64_t)v6;
    if (v3 <= 7)
      v14 = (v11 + 7) >> 3;
    v15 = &__dst[v14 - 1];
    v16 = *v15;
    v17 = 0xFFu >> v13;
    v18 = 255 << v13;
    if ((*(_BYTE *)(result + 302) & 1) != 0)
      v19 = v18;
    else
      v19 = v17;
    if (!*(_BYTE *)(result + 604))
      goto LABEL_22;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v19 = 0;
    if (!*(_BYTE *)(result + 604))
      goto LABEL_22;
  }
  v20 = *(_DWORD *)(result + 300);
  if ((v20 & 2) == 0 || v7 > 5)
  {
LABEL_22:
    if (v3 <= 7)
      v22 = (v11 + 7) >> 3;
    else
      v22 = v12 * (unint64_t)v6;
    result = (uint64_t)memcpy(__dst, v10, v22);
LABEL_26:
    if (v15)
      *v15 = *v15 & ~v19 | v19 & v16;
    return result;
  }
  if (a3 != 1)
  {
    if (!a3)
    {
      v21 = v7 & 1;
      goto LABEL_30;
    }
    goto LABEL_22;
  }
  if ((v7 & 1) == 0)
    goto LABEL_22;
  v21 = 1;
LABEL_30:
  v23 = (v21 << (3 - ((v7 + 1) >> 1))) & 7;
  if (v6 <= v23)
    return result;
  if (v3 <= 7)
  {
    v24 = 8 / v3;
    v25 = 1;
    if ((_DWORD)v3 != 2)
      v25 = 2;
    if ((_DWORD)v3 == 1)
      v26 = 0;
    else
      v26 = v25;
    v27 = (char *)&unk_1003C506C + 24 * v26 + 4 * v7 + 72;
    if (a3)
      v27 = (char *)&unk_1003C50FC + 12 * v26 + ((2 * (int)v7) & 0x1FCLL) + 36;
    v28 = (char *)&unk_1003C50FC + 12 * v26 + ((2 * (int)v7) & 0x1FCLL);
    if (!a3)
      v28 = (char *)&unk_1003C506C + 24 * v26 + 4 * *(unsigned __int8 *)(result + 605);
    if ((v20 & 0x10000) == 0)
      v28 = v27;
    v29 = *(_DWORD *)v28;
    v30 = v29;
    if ((_BYTE)v29)
    {
LABEL_44:
      if (v30 == 255)
        v31 = *v10;
      else
        v31 = v29 & *v10 | *v4 & ~(_BYTE)v29;
      *v4 = v31;
    }
    while (1)
    {
      v32 = v6 > v24;
      v6 -= v24;
      if (!v32)
        goto LABEL_26;
      HIDWORD(v33) = v29;
      LODWORD(v33) = v29;
      v29 = v33 >> 8;
      ++v4;
      ++v10;
      v30 = BYTE1(v33);
      if (BYTE1(v33))
        goto LABEL_44;
    }
  }
  if ((v3 & 7) != 0)
    sub_10035E6F4(result, "invalid user transform pixel depth");
  v34 = v6 * (unint64_t)v12;
  v35 = v23 * v12;
  v36 = v34 - v35;
  result = (uint64_t)&__dst[v35];
  v37 = &v10[v35];
  v38 = ((_DWORD)v12 << ((6 - v7) >> 1));
  if (v34 - v35 < v38)
    LODWORD(v38) = v34 - v35;
  if (a3)
    v39 = v38;
  else
    v39 = v12;
  v40 = ((_DWORD)v12 << ((7 - v7) >> 1));
  switch((_DWORD)v39)
  {
    case 1:
      *(_BYTE *)result = *v37;
      if (v36 > v40)
      {
        v45 = v40 + v35;
        do
        {
          v36 -= v40;
          v4[v45] = v10[v45];
          v45 += v40;
        }
        while (v36 > v40);
      }
      break;
    case 2:
      while (1)
      {
        v44 = &v4[v35];
        *v44 = *(_BYTE *)(v5 + v35 + 1);
        v44[1] = *(_BYTE *)(v5 + v35 + 2);
        v32 = v36 > v40;
        v36 -= v40;
        if (!v32)
          break;
        v35 += v40;
        if (v36 <= 1)
        {
          v4[v35] = *(_BYTE *)(v5 + v35 + 1);
          return result;
        }
      }
      break;
    case 3:
      *(_BYTE *)result = *v37;
      *(_BYTE *)(result + 1) = v37[1];
      *(_BYTE *)(result + 2) = v37[2];
      if (v36 > v40)
      {
        v41 = v5 + 3;
        v42 = v40 + v35;
        do
        {
          v43 = &v4[v42];
          v36 -= v40;
          *v43 = *(_BYTE *)(v41 + v42 - 2);
          v43[1] = *(_BYTE *)(v41 + v42 - 1);
          v43[2] = *(_BYTE *)(v41 + v42);
          v42 += v40;
        }
        while (v36 > v40);
      }
      return result;
    default:
      if (v39 <= 0xF
        && (result & 1) == 0
        && (v37 & 1) == 0
        && (v39 & 1) == 0
        && (v40 & 1) == 0)
      {
        v46 = v40 - v39;
        if ((((v37 | v40) | (result | v39)) & 3) != 0)
        {
          v47 = v46 >> 1;
          v48 = v34 - v40 - v35;
          v49 = v47;
          do
          {
            v50 = 0;
            v51 = v37;
            v52 = result;
            v53 = v48;
            v54 = (_WORD *)result;
            v55 = (__int16 *)v37;
            v56 = v39;
            do
            {
              v57 = *v55++;
              *v54++ = v57;
              ++v50;
              v56 -= 2;
            }
            while (v56);
            v32 = v36 > v40;
            v36 -= v40;
            if (!v32)
              return result;
            v37 = (char *)&v55[v49];
            result = (uint64_t)&v54[v49];
            v48 = v53 - v40;
          }
          while (v36 >= v39);
          if (v36 >= 8 && (unint64_t)(v52 - (_QWORD)v51) >= 0x20)
          {
            if (v36 >= 0x20)
            {
              v58 = v36 & 0xFFFFFFFFFFFFFFE0;
              v74 = v53 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v75 = &v54[v49];
                v76 = *(_OWORD *)&v55[v49 + 8];
                *v75 = *(_OWORD *)&v55[v49];
                v75[1] = v76;
                v49 += 16;
                v74 -= 32;
              }
              while (v74);
              if (v36 == v58)
                return result;
              if ((v36 & 0x18) == 0)
              {
                result += v58;
                v36 &= 0x1Fu;
                v37 += v58;
                goto LABEL_125;
              }
            }
            else
            {
              v58 = 0;
            }
            v37 += v36 & 0xFFFFFFFFFFFFFFF8;
            result += v36 & 0xFFFFFFFFFFFFFFF8;
            v77 = v58 + 2 * v47;
            v78 = v58 - (v53 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              *(_QWORD *)((char *)v54 + v77) = *(_QWORD *)((char *)v55 + v77);
              v77 += 8;
              v78 += 8;
            }
            while (v78);
            v79 = v36 == (v36 & 0xFFFFFFFFFFFFFFF8);
            v36 &= 7u;
            if (v79)
              return result;
          }
          do
          {
LABEL_125:
            v85 = *v37++;
            *(_BYTE *)result++ = v85;
            --v36;
          }
          while (v36);
          return result;
        }
        v62 = v46 >> 2;
        v63 = v34 - v40 - v35;
        v64 = v62;
        do
        {
          v65 = 0;
          v66 = v37;
          v67 = result;
          v68 = v63;
          v69 = (_DWORD *)result;
          v70 = (int *)v37;
          v71 = v39;
          do
          {
            v72 = *v70++;
            *v69++ = v72;
            ++v65;
            v71 -= 4;
          }
          while (v71);
          v32 = v36 > v40;
          v36 -= v40;
          if (!v32)
            return result;
          v37 = (char *)&v70[v64];
          result = (uint64_t)&v69[v64];
          v63 = v68 - v40;
        }
        while (v36 >= v39);
        if (v36 >= 8 && (unint64_t)(v67 - (_QWORD)v66) >= 0x20)
        {
          if (v36 >= 0x20)
          {
            v73 = v36 & 0xFFFFFFFFFFFFFFE0;
            v80 = v68 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v81 = &v69[v64];
              v82 = *(_OWORD *)&v70[v64 + 4];
              *v81 = *(_OWORD *)&v70[v64];
              v81[1] = v82;
              v64 += 8;
              v80 -= 32;
            }
            while (v80);
            if (v36 == v73)
              return result;
            if ((v36 & 0x18) == 0)
            {
              result += v73;
              v36 &= 0x1Fu;
              v37 += v73;
              goto LABEL_128;
            }
          }
          else
          {
            v73 = 0;
          }
          v37 += v36 & 0xFFFFFFFFFFFFFFF8;
          result += v36 & 0xFFFFFFFFFFFFFFF8;
          v83 = v73 + 4 * v62;
          v84 = v73 - (v68 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *(_QWORD *)((char *)v69 + v83) = *(_QWORD *)((char *)v70 + v83);
            v83 += 8;
            v84 += 8;
          }
          while (v84);
          v79 = v36 == (v36 & 0xFFFFFFFFFFFFFFF8);
          v36 &= 7u;
          if (v79)
            return result;
        }
        do
        {
LABEL_128:
          v86 = *v37++;
          *(_BYTE *)result++ = v86;
          --v36;
        }
        while (v36);
        return result;
      }
      result = (uint64_t)memcpy((void *)result, v37, v39);
      if (v36 > v40)
      {
        v59 = v40 + v35;
        v60 = v6 * v12 - v35 - v40;
        do
        {
          v61 = v36 - v40;
          if (v36 - v40 >= v39)
            v39 = v39;
          else
            v39 = v60;
          result = (uint64_t)memcpy(&v4[v59], &v10[v59], v39);
          v59 += v40;
          v60 -= v40;
          v36 -= v40;
        }
        while (v61 > v40);
      }
      break;
  }
  return result;
}

uint64_t sub_1003692B0(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  _BYTE *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  int v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;

  if (!result || !a2)
    return result;
  v4 = result;
  v5 = *(_DWORD *)result;
  v6 = dword_1003C5144[a3];
  v7 = v6 * *(_DWORD *)result;
  v8 = *(unsigned __int8 *)(result + 19);
  switch((_DWORD)v8)
  {
    case 4:
      v36 = (4 * (*(_DWORD *)result & 1)) ^ 4;
      v37 = ~(4 * v7) & 4;
      if ((a4 & 0x10000) != 0)
      {
        v38 = 4;
      }
      else
      {
        v36 = 4 * (*(_DWORD *)result & 1);
        v37 = 4 * (v7 & 1);
        v38 = 0;
      }
      if ((a4 & 0x10000) != 0)
        v39 = 0;
      else
        v39 = 4;
      if ((a4 & 0x10000) != 0)
        v40 = -4;
      else
        v40 = 4;
      if (v5)
      {
        v41 = 0;
        v42 = (unsigned __int8 *)(a2 + ((v5 - 1) >> 1));
        v43 = (_BYTE *)(a2 + ((v7 - 1) >> 1));
        if (v6 <= 1)
          v6 = 1;
        result = 3855;
        do
        {
          v44 = (*v42 >> v36) & 0xF;
          v45 = v6;
          do
          {
            *v43 = (0xF0Fu >> (4 - v37)) & *v43 | (v44 << v37);
            v20 = v37 == v39;
            v46 = v37 == v39;
            v37 += v40;
            if (v20)
              v37 = v38;
            v43 -= v46;
            --v45;
          }
          while (v45);
          v20 = v36 == v39;
          v47 = v36 == v39;
          v36 += v40;
          if (v20)
            v36 = v38;
          v42 -= v47;
          ++v41;
        }
        while (v41 < *(_DWORD *)v4);
      }
      goto LABEL_79;
    case 2:
      v23 = (2 * (_BYTE)v5 + 6) & 6 ^ 6;
      v24 = 2 * v7 + 6;
      v25 = ~v24 & 6;
      if ((a4 & 0x10000) != 0)
      {
        v23 = (2 * (_BYTE)v5 + 6) & 6;
        v25 = v24 & 6;
        v26 = 6;
      }
      else
      {
        v26 = 0;
      }
      if ((a4 & 0x10000) != 0)
        v27 = 0;
      else
        v27 = 6;
      if ((a4 & 0x10000) != 0)
        v28 = -2;
      else
        v28 = 2;
      if (v5)
      {
        v29 = 0;
        v30 = (unsigned __int8 *)(a2 + ((v5 - 1) >> 2));
        v31 = (_BYTE *)(a2 + ((v7 - 1) >> 2));
        if (v6 <= 1)
          v6 = 1;
        result = 16191;
        do
        {
          v32 = (*v30 >> v23) & 3;
          v33 = v6;
          do
          {
            *v31 = (0x3F3Fu >> (6 - v25)) & *v31 | (v32 << v25);
            v20 = v25 == v27;
            v34 = v25 == v27;
            v25 += v28;
            if (v20)
              v25 = v26;
            v31 -= v34;
            --v33;
          }
          while (v33);
          v20 = v23 == v27;
          v35 = v23 == v27;
          v23 += v28;
          if (v20)
            v23 = v26;
          v30 -= v35;
          ++v29;
        }
        while (v29 < *(_DWORD *)v4);
      }
      goto LABEL_79;
    case 1:
      v9 = v5 - 1;
      v10 = (v5 - 1) & 7;
      v11 = -v7 & 7;
      result = (v7 - 1) & 7;
      if ((a4 & 0x10000) != 0)
        v11 = (v7 - 1) & 7;
      else
        v10 ^= 7u;
      if ((a4 & 0x10000) != 0)
        v12 = 7;
      else
        v12 = 0;
      if ((a4 & 0x10000) != 0)
        v13 = 0;
      else
        v13 = 7;
      if ((a4 & 0x10000) != 0)
        v14 = -1;
      else
        v14 = 1;
      if (v5)
      {
        v15 = 0;
        v16 = (unsigned __int8 *)(a2 + (v9 >> 3));
        v17 = (_BYTE *)(a2 + ((v7 - 1) >> 3));
        if (v6 <= 1)
          v6 = 1;
        result = 32639;
        do
        {
          v18 = (*v16 >> v10) & 1;
          v19 = v6;
          do
          {
            *v17 = (0x7F7Fu >> (7 - v11)) & *v17 | (v18 << v11);
            v20 = v11 == v13;
            v21 = v11 == v13;
            v11 += v14;
            if (v20)
              v11 = v12;
            v17 -= v21;
            --v19;
          }
          while (v19);
          v20 = v10 == v13;
          v22 = v10 == v13;
          v10 += v14;
          if (v20)
            v10 = v12;
          v16 -= v22;
          ++v15;
        }
        while (v15 < *(_DWORD *)v4);
      }
      goto LABEL_79;
  }
  if (v5)
  {
    v48 = 0;
    v49 = v8 >> 3;
    v50 = -(uint64_t)(v8 >> 3);
    v51 = a2 + (v8 >> 3) * (unint64_t)(v5 - 1);
    v52 = (char *)(a2 + (v8 >> 3) * (unint64_t)(v7 - 1));
    if (v6 <= 1)
      v53 = 1;
    else
      v53 = dword_1003C5144[a3];
    do
    {
      __memcpy_chk(&v58, v51, v49, 8);
      v54 = v53;
      do
      {
        result = (uint64_t)memcpy(v52, &v58, v49);
        v52 += v50;
        --v54;
      }
      while (v54);
      v51 += v50;
      ++v48;
    }
    while (v48 < *(_DWORD *)v4);
LABEL_79:
    LODWORD(v8) = *(unsigned __int8 *)(v4 + 19);
  }
  *(_DWORD *)v4 = v7;
  v55 = v8 >= 8;
  v56 = (v7 * (unint64_t)v8 + 7) >> 3;
  v57 = v7 * (unint64_t)(v8 >> 3);
  if (v55)
    v56 = v57;
  *(_QWORD *)(v4 + 8) = v56;
  return result;
}

uint64_t sub_100369674(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5;
  uint64_t v9;
  unsigned int v10;
  void *v11;

  v5 = a5 - 1;
  if ((a5 - 1) <= 3)
  {
    v9 = result;
    if (!*(_QWORD *)(result + 1136))
    {
      v10 = (*(unsigned __int8 *)(result + 610) + 7) >> 3;
      *(_QWORD *)(result + 1136) = sub_10036A4B0;
      *(_QWORD *)(result + 1144) = sub_10036A5A4;
      *(_QWORD *)(result + 1152) = sub_10036A694;
      v11 = sub_10036A874;
      if (v10 != 1)
        v11 = sub_10036A8F0;
      *(_QWORD *)(result + 1160) = v11;
      sub_100359E50((_QWORD *)result, v10);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8 * v5 + 1136))(a2, a3, a4);
  }
  return result;
}

uint64_t sub_10036973C(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  z_stream *v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  _QWORD *v21;
  unsigned int v22;
  char v23;

  v4 = result;
  v5 = (z_stream *)(result + 312);
  if (a2)
    v6 = a3;
  else
    v6 = 0;
  *(_QWORD *)(result + 336) = a2;
  v21 = (_QWORD *)(result + 1104);
  *(_DWORD *)(result + 344) = 0;
  while (2)
  {
    LODWORD(v7) = *(_DWORD *)(v4 + 320);
    if ((_DWORD)v7)
    {
      if (!a2)
        goto LABEL_33;
LABEL_7:
      v8 = 0xFFFFFFFFLL;
      if (v6 < 0xFFFFFFFF)
        v8 = v6;
      v6 -= v8;
      *(_DWORD *)(v4 + 344) = v8;
      if (!*(_BYTE *)(v4 + 616))
        goto LABEL_37;
LABEL_34:
      if (!(_DWORD)v7)
        goto LABEL_37;
      if ((*(char *)v5->next_in & 0x80000000) == 0)
      {
        *(_BYTE *)(v4 + 616) = 0;
        goto LABEL_37;
      }
      *(_QWORD *)(v4 + 360) = "invalid window size (libpng)";
      v16 = -3;
      goto LABEL_38;
    }
    v9 = *(_DWORD *)(v4 + 576);
    while (!v9)
    {
      v10 = *(_DWORD *)(v4 + 528);
      v11 = *(_DWORD *)(v4 + 296);
      *(_DWORD *)(v4 + 1124) = 129;
      sub_100360C80(v4);
      if ((v10 & 0x20000000) != 0)
      {
        if ((~v11 & 0x300) != 0)
        {
LABEL_20:
          if (bswap32(v22) != *(_DWORD *)(v4 + 580))
          {
            v12 = *(_DWORD *)(v4 + 296);
            if ((*(_BYTE *)(v4 + 531) & 0x20) != 0)
            {
              if ((v12 & 0x200) != 0)
LABEL_56:
                sub_10035EFF0(v4, "CRC error");
            }
            else if ((v12 & 0x400) == 0)
            {
              goto LABEL_56;
            }
            sub_10035EF34(v4, "CRC error");
          }
        }
      }
      else if ((v11 & 0x800) == 0)
      {
        goto LABEL_20;
      }
      v9 = sub_100364FFC(v4);
      *(_DWORD *)(v4 + 576) = v9;
      if (*(_DWORD *)(v4 + 528) != 1229209940)
        goto LABEL_55;
    }
    v13 = *(_DWORD *)(v4 + 1120);
    if (v13 >= v9)
      v7 = v9;
    else
      v7 = v13;
    v14 = *(void **)(v4 + 1104);
    if (v14)
    {
      if (*(_QWORD *)(v4 + 1112) < v7)
      {
        *v21 = 0;
        v21[1] = 0;
        sub_10035F814(v4, v14);
        goto LABEL_30;
      }
    }
    else
    {
LABEL_30:
      v15 = sub_10035F91C(v4, v7);
      if (!v15)
        sub_10035EFF0(v4, "insufficient memory to read chunk");
      v14 = v15;
      bzero(v15, v7);
      *(_QWORD *)(v4 + 1104) = v14;
      *(_QWORD *)(v4 + 1112) = v7;
    }
    sub_100360C80(v4);
    result = sub_10035A388(v4, (Bytef *)v14, v7);
    *(_DWORD *)(v4 + 576) -= v7;
    *(_QWORD *)(v4 + 312) = v14;
    *(_DWORD *)(v4 + 320) = v7;
    if (a2)
      goto LABEL_7;
LABEL_33:
    *(_QWORD *)(v4 + 336) = &v23;
    *(_DWORD *)(v4 + 344) = 1024;
    if (*(_BYTE *)(v4 + 616))
      goto LABEL_34;
LABEL_37:
    result = inflate(v5, 0);
    v16 = result;
LABEL_38:
    v17 = *(unsigned int *)(v4 + 344);
    v18 = v6 + v17;
    v19 = v6 - v17 + 1024;
    if (a2)
      v6 = v18;
    else
      v6 = v19;
    *(_DWORD *)(v4 + 344) = 0;
    if (!v16)
    {
      if (!v6)
        return result;
      continue;
    }
    break;
  }
  if (v16 != 1)
  {
    sub_10035AD8C(v4, v16);
    v20 = *(const char **)(v4 + 360);
    if (a2)
      sub_10035EFF0(v4, v20);
    return sub_10035F2A4(v4, v20);
  }
  *(_QWORD *)(v4 + 336) = 0;
  *(_QWORD *)(v4 + 292) |= 0x800000008uLL;
  if (*(_DWORD *)(v4 + 320) || *(_DWORD *)(v4 + 576))
    result = sub_10035F2A4(v4, "Extra compressed data");
  if (v6)
  {
    if (a2)
LABEL_55:
      sub_10035E6F4(v4, "Not enough image data");
    v20 = "Too much image data";
    return sub_10035F2A4(v4, v20);
  }
  return result;
}

uint64_t sub_100369A44(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  if ((*(_BYTE *)(result + 296) & 8) == 0)
  {
    result = sub_10036973C(result, 0, 0);
    *(_QWORD *)(v1 + 336) = 0;
    v2 = *(_DWORD *)(v1 + 296);
    if ((v2 & 8) == 0)
    {
      *(_DWORD *)(v1 + 292) |= 8u;
      *(_DWORD *)(v1 + 296) = v2 | 8;
    }
  }
  if (*(_DWORD *)(v1 + 304) == 1229209940)
  {
    *(_QWORD *)(v1 + 312) = 0;
    *(_DWORD *)(v1 + 320) = 0;
    *(_DWORD *)(v1 + 304) = 0;
    return sub_1003651F0(v1, *(_DWORD *)(v1 + 576));
  }
  return result;
}

void sub_100369ACC(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  char v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;

  v1 = *(_DWORD *)(a1 + 524) + 1;
  *(_DWORD *)(a1 + 524) = v1;
  if (v1 < *(_DWORD *)(a1 + 504))
    return;
  if (*(_BYTE *)(a1 + 604))
  {
    *(_DWORD *)(a1 + 524) = 0;
    bzero(*(void **)(a1 + 536), *(_QWORD *)(a1 + 512) + 1);
    v3 = *(unsigned __int8 *)(a1 + 605);
    v4 = v3 + 1;
    if ((v3 + 1) > 6u)
    {
LABEL_4:
      *(_BYTE *)(a1 + 605) = v4;
      goto LABEL_5;
    }
    v6 = (v3 + 1);
    v7 = byte_1003C5175[v6];
    v8 = *(_DWORD *)(a1 + 496) + v7 + ~byte_1003C516E[v6];
    *(_DWORD *)(a1 + 520) = v8 / v7;
    if ((*(_BYTE *)(a1 + 300) & 2) == 0)
    {
      v9 = byte_1003C5167[v6];
      v10 = *(_DWORD *)(a1 + 500) + v9 + ~byte_1003C5160[v6];
      *(_DWORD *)(a1 + 504) = v10 / v9;
      if (v10 < v9 || v8 < v7)
      {
        v4 = v3 + 2;
        if ((v3 + 2) > 6u)
          goto LABEL_4;
        v11 = (v3 + 2);
        v12 = byte_1003C5175[v11];
        v13 = *(_DWORD *)(a1 + 496) + v12 + ~byte_1003C516E[v11];
        *(_DWORD *)(a1 + 520) = v13 / v12;
        if ((*(_BYTE *)(a1 + 300) & 2) == 0)
        {
          v14 = byte_1003C5167[v11];
          v15 = *(_DWORD *)(a1 + 500) + v14 + ~byte_1003C5160[v11];
          *(_DWORD *)(a1 + 504) = v15 / v14;
          if (v15 < v14 || v13 < v12)
          {
            v4 = v3 + 3;
            if ((v3 + 3) > 6u)
              goto LABEL_4;
            v16 = (v3 + 3);
            v17 = byte_1003C5175[v16];
            v18 = *(_DWORD *)(a1 + 496) + v17 + ~byte_1003C516E[v16];
            *(_DWORD *)(a1 + 520) = v18 / v17;
            if ((*(_BYTE *)(a1 + 300) & 2) == 0)
            {
              v19 = byte_1003C5167[v16];
              v20 = *(_DWORD *)(a1 + 500) + v19 + ~byte_1003C5160[v16];
              *(_DWORD *)(a1 + 504) = v20 / v19;
              if (v20 < v19 || v18 < v17)
              {
                v4 = v3 + 4;
                if ((v3 + 4) > 6u)
                  goto LABEL_4;
                v21 = (v3 + 4);
                v22 = byte_1003C5175[v21];
                v23 = *(_DWORD *)(a1 + 496) + v22 + ~byte_1003C516E[v21];
                *(_DWORD *)(a1 + 520) = v23 / v22;
                if ((*(_BYTE *)(a1 + 300) & 2) == 0)
                {
                  v24 = byte_1003C5167[v21];
                  v25 = *(_DWORD *)(a1 + 500) + v24 + ~byte_1003C5160[v21];
                  *(_DWORD *)(a1 + 504) = v25 / v24;
                  if (v25 < v24 || v23 < v22)
                  {
                    v4 = v3 + 5;
                    if ((v3 + 5) > 6u)
                      goto LABEL_4;
                    v26 = (v3 + 5);
                    v27 = byte_1003C5175[v26];
                    v28 = *(_DWORD *)(a1 + 496) + v27 + ~byte_1003C516E[v26];
                    *(_DWORD *)(a1 + 520) = v28 / v27;
                    if ((*(_BYTE *)(a1 + 300) & 2) == 0)
                    {
                      v29 = byte_1003C5167[v26];
                      v30 = *(_DWORD *)(a1 + 500) + v29 + ~byte_1003C5160[v26];
                      *(_DWORD *)(a1 + 504) = v30 / v29;
                      if (v30 < v29 || v28 < v27)
                      {
                        v4 = v3 + 6;
                        if ((v3 + 6) > 6u)
                          goto LABEL_4;
                        v31 = (v3 + 6);
                        v32 = byte_1003C5175[v31];
                        v33 = *(_DWORD *)(a1 + 496) + v32 + ~byte_1003C516E[v31];
                        *(_DWORD *)(a1 + 520) = v33 / v32;
                        if ((*(_BYTE *)(a1 + 300) & 2) == 0)
                        {
                          v34 = byte_1003C5167[v31];
                          v35 = *(_DWORD *)(a1 + 500) + v34 + ~byte_1003C5160[v31];
                          *(_DWORD *)(a1 + 504) = v35 / v34;
                          if (v35 < v34 || v33 < v32)
                          {
                            v4 = v3 + 7;
                            if (v3 < 0xF9)
                              goto LABEL_4;
                            v36 = (v3 + 7);
                            v37 = byte_1003C5175[v36];
                            v38 = *(_DWORD *)(a1 + 496) + v37 + ~byte_1003C516E[v36];
                            *(_DWORD *)(a1 + 520) = v38 / v37;
                            if ((*(_BYTE *)(a1 + 300) & 2) == 0)
                            {
                              v39 = byte_1003C5167[v36];
                              v40 = *(_DWORD *)(a1 + 500) + v39 + ~byte_1003C5160[v36];
                              *(_DWORD *)(a1 + 504) = v40 / v39;
                              if (v40 < v39 || v38 < v37)
                              {
                                v4 = v3 + 8;
                                if ((v3 + 8) > 6u)
                                  goto LABEL_4;
                                *(_DWORD *)(a1 + 520) = (*(_DWORD *)(a1 + 496)
                                                       + byte_1003C5175[(v3 + 8)]
                                                       + ~byte_1003C516E[(v3 + 8)])
                                                      / byte_1003C5175[(v3 + 8)];
                                if ((*(_BYTE *)(a1 + 300) & 2) == 0)
                                  *(_DWORD *)(a1 + 504) = (*(_DWORD *)(a1 + 500)
                                                         + byte_1003C5167[(v3 + 8)]
                                                         + ~byte_1003C5160[(v3 + 8)])
                                                        / byte_1003C5167[(v3 + 8)];
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    *(_BYTE *)(a1 + 605) = v4;
    return;
  }
LABEL_5:
  if ((*(_BYTE *)(a1 + 296) & 8) == 0)
  {
    sub_10036973C(a1, 0, 0);
    *(_QWORD *)(a1 + 336) = 0;
    v5 = *(_DWORD *)(a1 + 296);
    if ((v5 & 8) == 0)
    {
      *(_DWORD *)(a1 + 292) |= 8u;
      *(_DWORD *)(a1 + 296) = v5 | 8;
    }
  }
  if (*(_DWORD *)(a1 + 304) == 1229209940)
  {
    *(_QWORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 304) = 0;
    sub_1003651F0(a1, *(_DWORD *)(a1 + 576));
  }
}

uint64_t sub_100369F04(uint64_t a1)
{
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t result;
  BOOL v20;
  int v21;
  int v22;

  sub_100361010(a1);
  if (!*(_BYTE *)(a1 + 604))
  {
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 500);
    v4 = *(_DWORD *)(a1 + 496);
    *(_DWORD *)(a1 + 520) = v4;
    v2 = *(_DWORD *)(a1 + 300);
    v5 = *(unsigned __int8 *)(a1 + 610);
    if ((v2 & 4) == 0)
      goto LABEL_7;
    goto LABEL_5;
  }
  v2 = *(_DWORD *)(a1 + 300);
  v3 = *(_DWORD *)(a1 + 500);
  if ((v2 & 2) == 0)
    v3 = (v3 + 7) >> 3;
  *(_DWORD *)(a1 + 504) = v3;
  v4 = *(_DWORD *)(a1 + 496);
  *(_DWORD *)(a1 + 520) = (v4
                         + byte_1003C5175[*(unsigned __int8 *)(a1 + 605)]
                         + ~byte_1003C516E[*(unsigned __int8 *)(a1 + 605)])
                        / byte_1003C5175[*(unsigned __int8 *)(a1 + 605)];
  v5 = *(unsigned __int8 *)(a1 + 610);
  if ((v2 & 4) != 0)
  {
LABEL_5:
    if (*(unsigned __int8 *)(a1 + 608) < 8u)
      v5 = 8;
  }
LABEL_7:
  if ((v2 & 0x1000) == 0)
  {
    if ((v2 & 0x200) != 0)
      *(_DWORD *)(a1 + 300) = v2 & 0xFFFFFDFF;
    goto LABEL_25;
  }
  v6 = *(unsigned __int8 *)(a1 + 607);
  if (!*(_BYTE *)(a1 + 607))
  {
    if (v5 <= 8)
      v5 = 8;
    v5 <<= *(_WORD *)(a1 + 600) != 0;
    goto LABEL_23;
  }
  if (v6 != 2)
  {
    if (v6 == 3)
    {
      if (*(_WORD *)(a1 + 600))
        v5 = 32;
      else
        v5 = 24;
      if ((v2 & 0x200) == 0)
        goto LABEL_25;
LABEL_24:
      v5 <<= *(unsigned __int8 *)(a1 + 608) < 0x10u;
      goto LABEL_25;
    }
LABEL_23:
    if ((v2 & 0x200) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (*(_WORD *)(a1 + 600))
    v5 = (87384 * v5) >> 16;
  if ((v2 & 0x200) != 0)
    goto LABEL_24;
LABEL_25:
  v7 = *(_DWORD *)(a1 + 300);
  if ((v7 & 0x8000) != 0)
  {
    if (v5 <= 0x20)
      v13 = 32;
    else
      v13 = 64;
    if (v5 >= 9)
      v14 = 32;
    else
      v14 = 16;
    if (!*(_BYTE *)(a1 + 607))
      v5 = v14;
    if (*(unsigned __int8 *)(a1 + 607) - 2 < 2)
      v5 = v13;
    if ((v7 & 0x4000) == 0)
    {
LABEL_27:
      if ((v7 & 0x100000) == 0)
        goto LABEL_30;
      goto LABEL_28;
    }
  }
  else if ((v7 & 0x4000) == 0)
  {
    goto LABEL_27;
  }
  if ((v7 & 0x8000) != 0
    || ((*(_WORD *)(a1 + 600) != 0) & (v7 >> 12)) != 0
    || (v15 = *(unsigned __int8 *)(a1 + 607), v15 == 4))
  {
    if (v5 >= 0x11)
      v5 = 64;
    else
      v5 = 32;
    if ((v7 & 0x100000) == 0)
      goto LABEL_30;
  }
  else
  {
    v20 = v15 == 6;
    if (v15 == 6)
      v21 = 64;
    else
      v21 = 48;
    if (v20)
      v22 = 32;
    else
      v22 = 24;
    if (v5 <= 8)
      v5 = v22;
    else
      v5 = v21;
    if ((v7 & 0x100000) == 0)
      goto LABEL_30;
  }
LABEL_28:
  if (*(unsigned __int8 *)(a1 + 289) * *(unsigned __int8 *)(a1 + 288) > v5)
    v5 = *(unsigned __int8 *)(a1 + 289) * *(unsigned __int8 *)(a1 + 288);
LABEL_30:
  *(_BYTE *)(a1 + 614) = v5;
  *(_BYTE *)(a1 + 615) = 0;
  v8 = (v4 + 7) & 0xFFFFFFF8;
  v9 = v8 * (unint64_t)(v5 >> 3);
  v10 = (v8 * (unint64_t)v5) >> 3;
  if (v5 > 7)
    v10 = v9;
  v11 = v10 + ((v5 + 7) >> 3) + 49;
  if (v11 > *(_QWORD *)(a1 + 1096))
  {
    sub_10035F814(a1, *(void **)(a1 + 1008));
    sub_10035F814(a1, *(void **)(a1 + 1128));
    if (*(_BYTE *)(a1 + 604))
      v12 = sub_10035F834(a1, v11);
    else
      v12 = sub_10035F8C8((_QWORD *)a1, v11);
    *(_QWORD *)(a1 + 1008) = v12;
    v16 = sub_10035F8C8((_QWORD *)a1, v11);
    *(_QWORD *)(a1 + 1128) = v16;
    *(_QWORD *)(a1 + 544) = ((*(_QWORD *)(a1 + 1008) + 32) & 0xFFFFFFFFFFFFFFF0) - 1;
    *(_QWORD *)(a1 + 536) = ((unint64_t)(v16 + 4) & 0xFFFFFFFFFFFFFFF0) - 1;
    *(_QWORD *)(a1 + 1096) = v11;
  }
  v17 = *(_QWORD *)(a1 + 512);
  if (v17 == -1)
    sub_10035E6F4(a1, "Row has too many bytes to allocate in memory");
  bzero(*(void **)(a1 + 536), v17 + 1);
  v18 = *(void **)(a1 + 1104);
  if (v18)
  {
    *(_QWORD *)(a1 + 1104) = 0;
    *(_QWORD *)(a1 + 1112) = 0;
    sub_10035F814(a1, v18);
  }
  result = sub_100366464(a1, 1229209940);
  if ((_DWORD)result)
    sub_10035E6F4(a1, *(const char **)(a1 + 360));
  *(_DWORD *)(a1 + 296) |= 0x40u;
  return result;
}

uint64_t sub_10036A23C(uint64_t a1, int a2, char *a3, int *a4, uint64_t a5, unint64_t *a6)
{
  unint64_t v10;
  int v11;
  char **v12;
  uint64_t v13;
  unint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  BOOL v26;
  int v27;
  unint64_t v28;
  int v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  BOOL v34;
  _BYTE v35[1024];

  if (*(_DWORD *)(a1 + 304) != a2)
  {
    *(_QWORD *)(a1 + 360) = "zstream unclaimed";
    return 4294967294;
  }
  v10 = *a6;
  v11 = *a4;
  v12 = (char **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = a3;
  if (!a5)
  {
    *(_DWORD *)(a1 + 320) = v11;
    *(_QWORD *)(a1 + 336) = v35;
    v18 = 1024;
    if (v10 < 0x400)
      v18 = v10;
    *(_DWORD *)(a1 + 344) = v18;
    v14 = v10 - v18;
    v19 = v10 == v18;
    if (*(_BYTE *)(a1 + 616) && v11)
    {
      if (*a3 < 0)
        goto LABEL_31;
      *(_BYTE *)(a1 + 616) = 0;
    }
    v20 = inflate((z_streamp)(a1 + 312), 4 * v19);
    if ((_DWORD)v20)
    {
      v17 = v20;
    }
    else
    {
      do
      {
        v30 = *(_DWORD *)(a1 + 320);
        v31 = v14 + *(unsigned int *)(a1 + 344);
        *(_QWORD *)(a1 + 336) = v35;
        if (v31 >= 0x400)
          v32 = 1024;
        else
          v32 = v31;
        *(_DWORD *)(a1 + 344) = v32;
        v14 = v31 - v32;
        v33 = v31 == v32;
        if (*(_BYTE *)(a1 + 616))
          v34 = v30 == 0;
        else
          v34 = 1;
        if (!v34)
        {
          if (**v12 < 0)
            goto LABEL_31;
          *(_BYTE *)(a1 + 616) = 0;
        }
        v21 = inflate((z_streamp)(a1 + 312), 4 * v33);
      }
      while (!(_DWORD)v21);
LABEL_50:
      v17 = v21;
      if (a5)
        goto LABEL_33;
    }
    goto LABEL_32;
  }
  *(_QWORD *)(a1 + 336) = a5;
  *(_DWORD *)(a1 + 320) = v11;
  v13 = 0xFFFFFFFFLL;
  if (v10 < 0xFFFFFFFF)
    v13 = v10;
  *(_DWORD *)(a1 + 344) = v13;
  v14 = v10 - v13;
  v15 = v10 == v13;
  if (!*(_BYTE *)(a1 + 616) || !v11)
    goto LABEL_9;
  if ((*a3 & 0x80000000) == 0)
  {
    *(_BYTE *)(a1 + 616) = 0;
LABEL_9:
    v16 = inflate((z_streamp)(a1 + 312), 4 * v15);
    if (!(_DWORD)v16)
    {
      while (1)
      {
        v22 = *(_DWORD *)(a1 + 320);
        v23 = v14 + *(unsigned int *)(a1 + 344);
        if (v23 >= 0xFFFFFFFF)
          v24 = 0xFFFFFFFFLL;
        else
          v24 = v14 + *(unsigned int *)(a1 + 344);
        *(_DWORD *)(a1 + 344) = v24;
        v14 = v23 - v24;
        v25 = v23 == v24;
        if (*(_BYTE *)(a1 + 616))
          v26 = v22 == 0;
        else
          v26 = 1;
        if (!v26)
        {
          if (**v12 < 0)
            goto LABEL_31;
          *(_BYTE *)(a1 + 616) = 0;
        }
        v21 = inflate((z_streamp)(a1 + 312), 4 * v25);
        if ((_DWORD)v21)
          goto LABEL_50;
      }
    }
    v17 = v16;
    goto LABEL_33;
  }
LABEL_31:
  *(_QWORD *)(a1 + 360) = "invalid window size (libpng)";
  v17 = 4294967293;
  if (!a5)
LABEL_32:
    *(_QWORD *)(a1 + 336) = 0;
LABEL_33:
  v27 = *(_DWORD *)(a1 + 320);
  v28 = v14 + *(unsigned int *)(a1 + 344);
  if (v28)
    *a6 -= v28;
  if (v27)
    *a4 -= v27;
  sub_10035AD8C(a1, v17);
  return v17;
}

double sub_10036A4B0(uint64_t a1, int8x16_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __int8 *v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x8_t *v19;
  unint64_t v20;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = ((unint64_t)*(unsigned __int8 *)(a1 + 19) + 7) >> 3;
  v4 = v2 - v3;
  if (v2 > v3)
  {
    v5 = &a2->i8[v3];
    if (v4 < 8 || (v5 < &a2->i8[v4] ? (v6 = &a2->i8[v2] > (__int8 *)a2) : (v6 = 0), v6))
    {
      v8 = ((unint64_t)*(unsigned __int8 *)(a1 + 19) + 7) >> 3;
      goto LABEL_10;
    }
    if (v4 < 0x20)
    {
      v7 = 0;
      goto LABEL_17;
    }
    v7 = v4 & 0xFFFFFFFFFFFFFFE0;
    v11 = v4 & 0xFFFFFFFFFFFFFFE0;
    v12 = a2;
    do
    {
      v13 = (int8x16_t *)((char *)v12 + v3);
      v14 = *(int8x16_t *)((char *)v12 + v3);
      v15 = *(int8x16_t *)((char *)&v12[1] + v3);
      v16 = *v12;
      v17 = v12[1];
      v12 += 2;
      v18 = vaddq_s8(v16, v14);
      *v13 = v18;
      v13[1] = vaddq_s8(v17, v15);
      v11 -= 32;
    }
    while (v11);
    if (v4 != v7)
    {
      if ((v4 & 0x18) == 0)
      {
        v8 = v3 + v7;
        v5 += v7;
        goto LABEL_10;
      }
LABEL_17:
      v5 += v4 & 0xFFFFFFFFFFFFFFF8;
      v8 = v3 + (v4 & 0xFFFFFFFFFFFFFFF8);
      v19 = (int8x8_t *)&a2->i8[v7];
      v20 = v7 - (v4 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *(int8x8_t *)v18.i8 = vadd_s8(*v19, *(int8x8_t *)((char *)v19 + v3));
        *(int8x8_t *)((char *)v19++ + v3) = *(int8x8_t *)v18.i8;
        v20 += 8;
      }
      while (v20);
      if (v4 == (v4 & 0xFFFFFFFFFFFFFFF8))
        return *(double *)v18.i64;
LABEL_10:
      v9 = -(uint64_t)v3;
      v10 = v2 - v8;
      do
      {
        *v5 += v5[v9];
        ++v5;
        --v10;
      }
      while (v10);
    }
  }
  return *(double *)v18.i64;
}

double sub_10036A5A4(uint64_t a1, int8x16_t *a2, int8x16_t *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  int8x16_t *v6;
  int8x16_t *v7;
  unint64_t v8;
  __int8 v9;
  int8x16_t *v10;
  int8x16_t *v11;
  unint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  unint64_t v15;
  int8x8_t *v16;
  int8x8_t *v17;
  unint64_t v18;
  int8x8_t v19;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    if (v3 < 8 || (&a3->i8[v3] > (__int8 *)a2 ? (v4 = &a2->i8[v3] > (__int8 *)a3) : (v4 = 0), v4))
    {
      v5 = 0;
      v6 = a3;
      v7 = a2;
      goto LABEL_10;
    }
    if (v3 < 0x20)
    {
      v5 = 0;
      goto LABEL_17;
    }
    v5 = v3 & 0xFFFFFFFFFFFFFFE0;
    v10 = a2 + 1;
    v11 = a3 + 1;
    v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = vaddq_s8(v11[-1], v10[-1]);
      v14 = vaddq_s8(*v11, *v10);
      v10[-1] = v13;
      *v10 = v14;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 != v5)
    {
      if ((v3 & 0x18) == 0)
      {
        v7 = (int8x16_t *)((char *)a2 + v5);
        v6 = (int8x16_t *)((char *)a3 + v5);
        goto LABEL_10;
      }
LABEL_17:
      v15 = v5;
      v5 = v3 & 0xFFFFFFFFFFFFFFF8;
      v6 = (int8x16_t *)((char *)a3 + (v3 & 0xFFFFFFFFFFFFFFF8));
      v7 = (int8x16_t *)((char *)a2 + (v3 & 0xFFFFFFFFFFFFFFF8));
      v16 = (int8x8_t *)&a2->i8[v15];
      v17 = (int8x8_t *)&a3->i8[v15];
      v18 = v15 - (v3 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v19 = *v17++;
        *(int8x8_t *)v13.i8 = vadd_s8(v19, *v16);
        *v16++ = *(int8x8_t *)v13.i8;
        v18 += 8;
      }
      while (v18);
      if (v3 == v5)
        return *(double *)v13.i64;
LABEL_10:
      v8 = v3 - v5;
      do
      {
        v9 = v6->i8[0];
        v6 = (int8x16_t *)((char *)v6 + 1);
        v7->i8[0] += v9;
        v7 = (int8x16_t *)((char *)v7 + 1);
        --v8;
      }
      while (v8);
    }
  }
  return *(double *)v13.i64;
}

double sub_10036A694(uint64_t a1, uint8x16_t *a2, uint8x16_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x16_t *v9;
  int8x16_t *v10;
  unint64_t v11;
  uint8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int8x16_t *v20;
  uint64_t v21;
  int v22;
  uint8x16_t *v23;
  BOOL v25;
  BOOL v26;
  uint8x16_t *v27;
  unint64_t v28;
  int8x16_t *v29;
  int8x16_t v30;
  unint64_t v31;
  int8x8_t *v32;
  uint8x8_t *v33;
  unint64_t v34;
  uint8x8_t v35;

  v3 = *(unsigned __int8 *)(a1 + 19);
  v4 = (unint64_t)(v3 + 7) >> 3;
  v5 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 19))
  {
    v10 = (int8x16_t *)a2;
    v9 = a3;
    if (v5 == v4)
      return *(double *)v13.i64;
    goto LABEL_20;
  }
  if (v4 <= 1)
    v6 = 1;
  else
    v6 = (unint64_t)(v3 + 7) >> 3;
  if (v6 < 0x10 || (&a3->i8[v6] > (__int8 *)a2 ? (v7 = &a2->i8[v6] > (__int8 *)a3) : (v7 = 0), v7))
  {
    v8 = 0;
    v9 = a3;
    v10 = (int8x16_t *)a2;
LABEL_15:
    v14 = v6 - v8;
    do
    {
      v15 = v9->u8[0];
      v9 = (uint8x16_t *)((char *)v9 + 1);
      v10->i8[0] += v15 >> 1;
      v10 = (int8x16_t *)((char *)v10 + 1);
      --v14;
    }
    while (v14);
    goto LABEL_17;
  }
  v8 = v6 & 0x30;
  v9 = (uint8x16_t *)((char *)a3 + v8);
  v10 = (int8x16_t *)&a2->i8[v8];
  v11 = v8;
  do
  {
    v12 = *a3++;
    v13 = (int8x16_t)vsraq_n_u8(*a2, v12, 1uLL);
    *a2++ = (uint8x16_t)v13;
    v11 -= 16;
  }
  while (v11);
  if (v6 != v8)
    goto LABEL_15;
LABEL_17:
  if (v5 == v4)
    return *(double *)v13.i64;
LABEL_20:
  v16 = v5 - v4;
  v17 = -(uint64_t)v4;
  if (v5 - v4 < 8)
  {
    v18 = 0;
LABEL_22:
    v19 = (unsigned __int8 *)v9;
    v20 = v10;
    goto LABEL_23;
  }
  v18 = 0;
  v23 = (uint8x16_t *)&v10->i8[v16];
  v25 = v10 < (int8x16_t *)&v10->i8[v5 - 2 * v4] && (char *)v10 - v4 < (char *)v23;
  v26 = v9 >= v23 || v10 >= (int8x16_t *)&v9->i8[v16];
  if (!v26 || v25)
    goto LABEL_22;
  if (v16 >= 0x20)
  {
    v18 = v16 & 0xFFFFFFFFFFFFFFE0;
    v27 = v9 + 1;
    v28 = v16 & 0xFFFFFFFFFFFFFFE0;
    v29 = v10;
    do
    {
      v13 = vaddq_s8(*v29, (int8x16_t)vhaddq_u8(*(uint8x16_t *)((char *)v29 + v17), v27[-1]));
      v30 = vaddq_s8(v29[1], (int8x16_t)vhaddq_u8(*(uint8x16_t *)((char *)&v29[1] + v17), *v27));
      *v29 = v13;
      v29[1] = v30;
      v29 += 2;
      v27 += 2;
      v28 -= 32;
    }
    while (v28);
    if (v16 == v18)
      return *(double *)v13.i64;
    if ((v16 & 0x18) == 0)
    {
      v20 = (int8x16_t *)((char *)v10 + v18);
      v19 = &v9->u8[v18];
LABEL_23:
      v21 = v18 - v5;
      do
      {
        v22 = *v19++;
        v20->i8[0] += (v20->u8[v17] + v22) >> 1;
        v20 = (int8x16_t *)((char *)v20 + 1);
        ++v21;
      }
      while (v17 != v21);
      return *(double *)v13.i64;
    }
  }
  else
  {
    v18 = 0;
  }
  v31 = v18;
  v18 = v16 & 0xFFFFFFFFFFFFFFF8;
  v19 = &v9->u8[v16 & 0xFFFFFFFFFFFFFFF8];
  v20 = (int8x16_t *)((char *)v10 + (v16 & 0xFFFFFFFFFFFFFFF8));
  v32 = (int8x8_t *)&v10->i8[v31];
  v33 = (uint8x8_t *)&v9->i8[v31];
  v34 = v31 - (v16 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v35 = *v33++;
    *(int8x8_t *)v13.i8 = vadd_s8(*v32, (int8x8_t)vhadd_u8(*(uint8x8_t *)((char *)v32 + v17), v35));
    *v32++ = *(int8x8_t *)v13.i8;
    v34 += 8;
  }
  while (v34);
  if (v16 != v18)
    goto LABEL_23;
  return *(double *)v13.i64;
}

uint64_t sub_10036A874(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  int v4;
  unsigned __int8 v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v3 = *(_QWORD *)(result + 8);
  v4 = *a3;
  v5 = *a2 + v4;
  *a2 = v5;
  if (v3 >= 2)
  {
    v6 = &a2[v3];
    v7 = a2 + 1;
    v8 = a3 + 1;
    do
    {
      v10 = *v8++;
      v9 = v10;
      v11 = v10 - v4;
      v12 = v5 - v4;
      if (v10 - v4 >= 0)
        v13 = v11;
      else
        v13 = -v11;
      if (v12 >= 0)
        v14 = v5 - v4;
      else
        v14 = v4 - v5;
      v15 = v11 + v12;
      if (v15 < 0)
        v15 = -v15;
      if (v14 >= v13)
      {
        v16 = v13;
      }
      else
      {
        v5 = v9;
        v16 = v14;
      }
      if (v15 >= v16)
        LOBYTE(v4) = v5;
      v5 = v4 + *v7;
      *v7++ = v5;
      v4 = v9;
    }
    while (v7 < v6);
  }
  return result;
}

int8x8_t *sub_10036A8F0(int8x8_t *result, int8x16_t *a2, int8x16_t *a3, double a4, double a5, int8x16_t a6, double a7, int8x16_t a8)
{
  int8x16_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  unint64_t v17;
  int8x16_t v18;
  __int8 v19;
  int8x8_t v20;
  uint64_t v21;
  __int8 *v22;
  unint64_t v23;
  int8x16_t *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int v36;
  int v37;
  char v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int8x16_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  uint32x4_t v71;
  uint32x4_t v72;
  uint32x4_t v73;
  uint32x4_t v74;
  uint32x4_t v75;
  uint32x4_t v76;
  uint32x4_t v77;
  uint32x4_t v78;
  int8x8_t *v79;
  uint64_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int8x8_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  uint32x4_t v92;
  uint32x4_t v93;
  uint32x4_t v94;
  uint32x4_t v95;

  v9 = ((unint64_t)result[2].u8[3] + 7) >> 3;
  if (result[2].i8[3])
  {
    v10 = &a2->i8[v9];
    if (&a2->i8[v9] <= &a2->i8[1])
      v10 = &a2->i8[1];
    v11 = v10 - (char *)a2;
    if ((unint64_t)(v10 - (char *)a2) < 0x20
      || (&a3->i8[v11] > (__int8 *)a2 ? (v12 = v10 > (char *)a3) : (v12 = 0), v12))
    {
      v13 = a2;
      v14 = a3;
    }
    else
    {
      v13 = (int8x16_t *)((char *)a2 + (v11 & 0xFFFFFFFFFFFFFFE0));
      v14 = (int8x16_t *)((char *)a3 + (v11 & 0xFFFFFFFFFFFFFFE0));
      v15 = a3 + 1;
      v16 = a2 + 1;
      v17 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        a6 = v15[-1];
        v18 = vaddq_s8(*v15, *v16);
        v16[-1] = vaddq_s8(a6, v16[-1]);
        *v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
      if (v11 == (v11 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_15:
        a3 = v14;
        v20 = result[1];
        if (v13 >= (int8x16_t *)&a2->i8[*(_QWORD *)&v20])
          return result;
        goto LABEL_18;
      }
    }
    do
    {
      v19 = v14->i8[0];
      v14 = (int8x16_t *)((char *)v14 + 1);
      v13->i8[0] += v19;
      v13 = (int8x16_t *)((char *)v13 + 1);
    }
    while (v13 < (int8x16_t *)&a2->i8[v9]);
    goto LABEL_15;
  }
  v13 = a2;
  v20 = result[1];
  if (a2 >= (int8x16_t *)&a2->i8[*(_QWORD *)&v20])
    return result;
LABEL_18:
  v21 = -(uint64_t)v9;
  v22 = &a2->i8[*(_QWORD *)&v20];
  v23 = &a2->i8[*(_QWORD *)&v20] - (__int8 *)v13;
  v24 = (int8x16_t *)((char *)a2 + *(_QWORD *)&v20);
  if (v23 < 8)
    goto LABEL_40;
  v25 = &a3->i8[-v9];
  v26 = v22 - &v13->i8[v9];
  v27 = (unint64_t)a3->u64 + v26;
  v28 = v13 >= (int8x16_t *)&v13->i8[v26] || &v13->i8[v21] >= (__int8 *)v24;
  v29 = !v28;
  v30 = v13 >= (int8x16_t *)&a3->i8[v23] || a3 >= v24;
  v31 = !v30;
  v32 = v25 >= (char *)v24 || (unint64_t)v13 >= v27;
  if (!v32 || v29 || v31)
  {
LABEL_40:
    v34 = v13;
    v35 = a3;
  }
  else
  {
    if (v23 < 0x10)
    {
      v33 = 0;
LABEL_61:
      v34 = (int8x16_t *)((char *)v13 + (v23 & 0xFFFFFFFFFFFFFFF8));
      v35 = (int8x16_t *)((char *)a3 + (v23 & 0xFFFFFFFFFFFFFFF8));
      result = (int8x8_t *)&a3->i8[v33];
      v79 = (int8x8_t *)&v13->i8[v33];
      v80 = v33 - (v23 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *(int8x8_t *)a6.i8 = *(int8x8_t *)((char *)result + v21);
        v81 = (int32x4_t)vqtbl1q_s8(a6, (int8x16_t)xmmword_1003BCAA0);
        *(int8x8_t *)a8.i8 = *(int8x8_t *)((char *)v79 + v21);
        v82 = (int32x4_t)vqtbl1q_s8(a6, (int8x16_t)xmmword_1003BCA90);
        v83 = (int32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1003BCAA0);
        v84 = (int32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1003BCA90);
        v85 = *result++;
        *(int8x8_t *)v8.i8 = v85;
        v86 = (int32x4_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1003BCAA0);
        v87 = (int32x4_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1003BCA90);
        v88 = vsubq_s32(v87, v82);
        v89 = vsubq_s32(v86, v81);
        v90 = vsubq_s32(v84, v82);
        v91 = vsubq_s32(v83, v81);
        v92 = vabdq_u32((uint32x4_t)v82, (uint32x4_t)v87);
        v93 = vabdq_u32((uint32x4_t)v81, (uint32x4_t)v86);
        v94 = vabdq_u32((uint32x4_t)v82, (uint32x4_t)v84);
        v95 = vabdq_u32((uint32x4_t)v81, (uint32x4_t)v83);
        *v79 = vadd_s8(vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(vminq_u32(v94, v92), (uint32x4_t)vabsq_s32(vaddq_s32(v88, v90))), (int16x8_t)vcgtq_u32(vminq_u32(v95, v93), (uint32x4_t)vabsq_s32(vaddq_s32(v89, v91))))), *(int8x8_t *)a6.i8, vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v92, v94), (int16x8_t)vcgtq_u32(v93, v95))), v85, *(int8x8_t *)a8.i8)), *v79);
        ++v79;
        v80 += 8;
      }
      while (v80);
      if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8))
        return result;
      goto LABEL_41;
    }
    v33 = v23 & 0xFFFFFFFFFFFFFFF0;
    a6.i64[1] = 0xFFFFFF07FFFFFF06;
    v45 = v23 & 0xFFFFFFFFFFFFFFF0;
    v46 = v13;
    v47 = a3;
    do
    {
      v48 = *(int8x16_t *)((char *)v47 + v21);
      v49 = (int32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_1003BCAC0);
      v50 = (int32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_1003BCAB0);
      v51 = (int32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_1003BCAA0);
      v52 = *(int8x16_t *)((char *)v46 + v21);
      v53 = (int32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_1003BCA90);
      v54 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1003BCAC0);
      v55 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1003BCAB0);
      v56 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1003BCAA0);
      v57 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1003BCA90);
      v58 = *v47++;
      v59 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_1003BCAC0);
      v60 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_1003BCAB0);
      v61 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_1003BCAA0);
      v62 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_1003BCA90);
      v63 = vsubq_s32(v62, v53);
      v64 = vsubq_s32(v61, v51);
      v65 = vsubq_s32(v60, v50);
      v66 = vsubq_s32(v59, v49);
      v67 = vsubq_s32(v57, v53);
      v68 = vsubq_s32(v56, v51);
      v69 = vsubq_s32(v55, v50);
      v70 = vsubq_s32(v54, v49);
      v71 = vabdq_u32((uint32x4_t)v53, (uint32x4_t)v62);
      v72 = vabdq_u32((uint32x4_t)v51, (uint32x4_t)v61);
      v73 = vabdq_u32((uint32x4_t)v50, (uint32x4_t)v60);
      v74 = vabdq_u32((uint32x4_t)v49, (uint32x4_t)v59);
      v75 = vabdq_u32((uint32x4_t)v53, (uint32x4_t)v57);
      v76 = vabdq_u32((uint32x4_t)v51, (uint32x4_t)v56);
      v77 = vabdq_u32((uint32x4_t)v50, (uint32x4_t)v55);
      v78 = vabdq_u32((uint32x4_t)v49, (uint32x4_t)v54);
      v8 = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v71, v75), (int16x8_t)vcgtq_u32(v72, v76)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v73, v77), (int16x8_t)vcgtq_u32(v74, v78))), v58, v52);
      a8 = vaddq_s8(vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(vminq_u32(v75, v71), (uint32x4_t)vabsq_s32(vaddq_s32(v63, v67))), (int16x8_t)vcgtq_u32(vminq_u32(v76, v72), (uint32x4_t)vabsq_s32(vaddq_s32(v64, v68)))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(vminq_u32(v77, v73), (uint32x4_t)vabsq_s32(vaddq_s32(v65, v69))), (int16x8_t)vcgtq_u32(vminq_u32(v78, v74), (uint32x4_t)vabsq_s32(vaddq_s32(v66, v70))))), v48, v8), *v46);
      *v46++ = a8;
      v45 -= 16;
    }
    while (v45);
    if (v23 == v33)
      return result;
    if ((v23 & 8) != 0)
      goto LABEL_61;
    v35 = (int8x16_t *)((char *)a3 + v33);
    v34 = (int8x16_t *)((char *)v13 + v33);
  }
  do
  {
LABEL_41:
    v36 = v35->u8[v21];
    v37 = v34->u8[v21];
    v39 = v35->u8[0];
    v35 = (int8x16_t *)((char *)v35 + 1);
    v38 = v39;
    v40 = v39 - v36;
    v41 = v37 - v36;
    if (v39 - v36 >= 0)
      v42 = v40;
    else
      v42 = -v40;
    if (v41 >= 0)
      result = (int8x8_t *)v41;
    else
      result = (int8x8_t *)(v36 - v37);
    v43 = v40 + v41;
    if (v43 < 0)
      v43 = -v43;
    if (result >= v42)
    {
      v44 = v42;
    }
    else
    {
      LOBYTE(v37) = v38;
      v44 = result;
    }
    if (v43 >= v44)
      LOBYTE(v36) = v37;
    v34->i8[0] += v36;
    v34 = (int8x16_t *)((char *)v34 + 1);
  }
  while (v34 != v24);
  return result;
}

uint64_t sub_10036ACB8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && a2)
  {
    if (a3)
    {
      *(_QWORD *)(a2 + 202) = *(_QWORD *)a3;
      *(_WORD *)(a2 + 210) = *(_WORD *)(a3 + 8);
      *(_DWORD *)(a2 + 8) |= 0x20u;
    }
  }
  return result;
}

_QWORD *sub_10036ACE4(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v7;
  void *v8;
  uint64_t v9;

  if (result && a2)
  {
    v7 = result;
    v8 = *(void **)(a2 + 240);
    if (v8)
    {
      sub_10035F814((uint64_t)result, v8);
      *(_QWORD *)(a2 + 240) = 0;
    }
    *(_DWORD *)(a2 + 236) = a3;
    result = sub_10035FAC4(v7, a3);
    *(_QWORD *)(a2 + 240) = result;
    if (result)
    {
      *(_DWORD *)(a2 + 300) |= 0x8000u;
      if (*(int *)(a2 + 236) >= 1)
      {
        v9 = 0;
        do
        {
          *(_BYTE *)(*(_QWORD *)(a2 + 240) + v9) = *(_BYTE *)(a4 + v9);
          ++v9;
        }
        while (v9 < *(int *)(a2 + 236));
      }
      *(_DWORD *)(a2 + 8) |= 0x10000u;
    }
    else
    {
      return (_QWORD *)sub_10035E924((uint64_t)v7, (uint64_t)"Insufficient memory for eXIf chunk data");
    }
  }
  return result;
}

_QWORD *sub_10036ADA8(_QWORD *result, uint64_t a2, const void *a3)
{
  _QWORD *v4;

  if (result && a2)
  {
    v4 = result;
    if (*(unsigned __int16 *)(a2 + 32) - 257 > 0xFFFFFEFF)
    {
      sub_10035A878((uint64_t)result, a2, 8u, 0);
      result = sub_10035FAC4(v4, 0x200uLL);
      *(_QWORD *)(a2 + 256) = result;
      if (result)
      {
        *(_DWORD *)(a2 + 300) |= 8u;
        if (*(_WORD *)(a2 + 32))
          result = memcpy(result, a3, 2 * *(unsigned __int16 *)(a2 + 32));
        *(_DWORD *)(a2 + 8) |= 0x40u;
      }
      else
      {
        return (_QWORD *)sub_10035E924((uint64_t)v4, (uint64_t)"Insufficient memory for hIST chunk data");
      }
    }
    else
    {
      return (_QWORD *)sub_10035E924((uint64_t)result, (uint64_t)"Invalid palette size, hIST allocation skipped");
    }
  }
  return result;
}

uint64_t sub_10036AE78(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7, unsigned __int8 a8, unsigned __int8 a9)
{
  int v11;
  char v12;
  unsigned __int8 v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;

  if (!result || !a2)
    return result;
  *(_DWORD *)a2 = a3;
  *(_DWORD *)(a2 + 4) = a4;
  *(_BYTE *)(a2 + 36) = a5;
  *(_BYTE *)(a2 + 37) = a6;
  *(_BYTE *)(a2 + 38) = a8;
  *(_BYTE *)(a2 + 39) = a9;
  *(_BYTE *)(a2 + 40) = a7;
  result = sub_10035C8E0(result, a3, a4, a5, a6, a7, a8, a9);
  v11 = *(unsigned __int8 *)(a2 + 37);
  if (v11 == 3)
  {
    v12 = 1;
LABEL_7:
    *(_BYTE *)(a2 + 41) = v12;
    goto LABEL_8;
  }
  v12 = v11 & 2 | 1;
  *(_BYTE *)(a2 + 41) = v12;
  if ((v11 & 4) != 0)
  {
    v12 = (v11 & 2) + 2;
    goto LABEL_7;
  }
LABEL_8:
  v13 = *(_BYTE *)(a2 + 36) * v12;
  *(_BYTE *)(a2 + 42) = v13;
  v14 = v13 >= 8u;
  v15 = (v13 * (unint64_t)a3 + 7) >> 3;
  v16 = a3 * (unint64_t)(v13 >> 3);
  if (!v14)
    v16 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

uint64_t sub_10036AF44(uint64_t result, uint64_t a2, int a3, int a4, char a5)
{
  if (result)
  {
    if (a2)
    {
      *(_DWORD *)(a2 + 212) = a3;
      *(_DWORD *)(a2 + 216) = a4;
      *(_BYTE *)(a2 + 220) = a5;
      *(_DWORD *)(a2 + 8) |= 0x100u;
    }
  }
  return result;
}

void sub_10036AF64(_QWORD *a1, uint64_t a2, char *__s, int a4, int a5, unsigned int a6, int a7, const char *a8, const char **a9)
{
  const char **v17;
  size_t v18;
  const char *v19;
  uint64_t v20;
  size_t v21;
  _QWORD *v22;
  size_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  const char *v30;
  int v31;
  size_t v32;

  if (!a1)
    return;
  if (!a2)
    return;
  if (!__s)
    return;
  if (!a8)
    return;
  v17 = a9;
  if (a7 >= 1 && !a9)
    return;
  v18 = strlen(__s);
  if (a6 >= 4)
  {
    v19 = "Invalid pCAL equation type";
LABEL_27:
    sub_10035F324((uint64_t)a1, v19, 1);
    return;
  }
  if (a7 > 0xFF)
  {
    v19 = "Invalid pCAL parameter count";
    goto LABEL_27;
  }
  v32 = v18;
  v31 = a5;
  if (a7)
  {
    v20 = a7;
    while (*v17)
    {
      v21 = strlen(*v17);
      if (!sub_10035CC78((uint64_t)*v17, v21))
        break;
      ++v17;
      if (!--v20)
        goto LABEL_17;
    }
    v19 = "Invalid format for pCAL parameter";
    goto LABEL_27;
  }
LABEL_17:
  v22 = sub_10035FAC4(a1, v32 + 1);
  *(_QWORD *)(a2 + 264) = v22;
  if (!v22)
  {
    v19 = "Insufficient memory for pCAL purpose";
    goto LABEL_27;
  }
  memcpy(v22, __s, v32 + 1);
  *(_DWORD *)(a2 + 272) = a4;
  *(_DWORD *)(a2 + 276) = v31;
  *(_BYTE *)(a2 + 296) = a6;
  *(_BYTE *)(a2 + 297) = a7;
  v23 = strlen(a8) + 1;
  v24 = sub_10035FAC4(a1, v23);
  *(_QWORD *)(a2 + 280) = v24;
  if (v24)
  {
    memcpy(v24, a8, v23);
    v25 = sub_10035FAC4(a1, 8 * (a7 + 1));
    *(_QWORD *)(a2 + 288) = v25;
    if (v25)
    {
      bzero(v25, 8 * (a7 + 1));
      if (a7 < 1)
      {
LABEL_24:
        *(_DWORD *)(a2 + 8) |= 0x400u;
        *(_DWORD *)(a2 + 300) |= 0x80u;
        return;
      }
      v26 = 0;
      v27 = 8 * a7;
      while (1)
      {
        v28 = strlen(a9[v26 / 8]) + 1;
        *(_QWORD *)(*(_QWORD *)(a2 + 288) + v26) = sub_10035FAC4(a1, v28);
        v29 = *(void **)(*(_QWORD *)(a2 + 288) + v26);
        if (!v29)
          break;
        memcpy(v29, a9[v26 / 8], v28);
        v26 += 8;
        if (v27 == v26)
          goto LABEL_24;
      }
      v30 = "Insufficient memory for pCAL parameter";
    }
    else
    {
      v30 = "Insufficient memory for pCAL params";
    }
  }
  else
  {
    v30 = "Insufficient memory for pCAL units";
  }
  sub_10035E924((uint64_t)a1, (uint64_t)v30);
}

_QWORD *sub_10036B1D4(_QWORD *result, uint64_t a2, int a3, char *__s, const char *a5)
{
  char v6;
  _QWORD *v7;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;

  if (result && a2)
  {
    v6 = a3;
    v7 = result;
    if ((a3 - 3) <= 0xFFFFFFFD)
      sub_10035E6F4((uint64_t)result, "Invalid sCAL unit");
    if (!__s || (v10 = strlen(__s)) == 0 || *__s == 45 || (v11 = v10, !sub_10035CC78((uint64_t)__s, v10)))
      sub_10035E6F4((uint64_t)v7, "Invalid sCAL width");
    if (!a5 || (v12 = strlen(a5)) == 0 || *a5 == 45 || (v13 = v12, !sub_10035CC78((uint64_t)a5, v12)))
      sub_10035E6F4((uint64_t)v7, "Invalid sCAL height");
    *(_BYTE *)(a2 + 332) = v6;
    v14 = sub_10035FAC4(v7, v11 + 1);
    *(_QWORD *)(a2 + 336) = v14;
    if (v14)
    {
      memcpy(v14, __s, v11 + 1);
      v15 = sub_10035FAC4(v7, v13 + 1);
      *(_QWORD *)(a2 + 344) = v15;
      if (v15)
      {
        result = memcpy(v15, a5, v13 + 1);
        *(_DWORD *)(a2 + 8) |= 0x4000u;
        *(_DWORD *)(a2 + 300) |= 0x100u;
        return result;
      }
      sub_10035F814((uint64_t)v7, *(void **)(a2 + 336));
      *(_QWORD *)(a2 + 336) = 0;
    }
    return (_QWORD *)sub_10035E924((uint64_t)v7, (uint64_t)"Memory allocation failed while processing sCAL");
  }
  return result;
}

uint64_t sub_10036B354(uint64_t result, uint64_t a2, int a3, int a4, char a5)
{
  if (result)
  {
    if (a2)
    {
      *(_DWORD *)(a2 + 224) = a3;
      *(_DWORD *)(a2 + 228) = a4;
      *(_BYTE *)(a2 + 232) = a5;
      *(_DWORD *)(a2 + 8) |= 0x80u;
    }
  }
  return result;
}

_BYTE *sub_10036B374(_BYTE *result, uint64_t a2, const void *a3, unsigned int a4)
{
  _BYTE *v7;
  _BYTE *v8;

  if (result && a2)
  {
    v7 = result;
    if (*(_BYTE *)(a2 + 37) == 3)
    {
      if ((a4 & 0x80000000) != 0 || 1 << *(_BYTE *)(a2 + 36) < (int)a4)
        sub_10035E6F4((uint64_t)result, "Invalid palette length");
    }
    else if (a4 > 0x100)
    {
      return (_BYTE *)sub_10035E924((uint64_t)result, (uint64_t)"Invalid palette length");
    }
    if (!a3 && a4 || !a4 && (result[976] & 1) == 0)
      sub_10035E6F4((uint64_t)result, "Invalid palette");
    sub_10035A878((uint64_t)result, a2, 0x1000u, 0);
    result = sub_10035F834((uint64_t)v7, 0x300uLL);
    v8 = result;
    *((_QWORD *)v7 + 73) = result;
    if (a4)
      result = memcpy(result, a3, 3 * a4);
    *(_QWORD *)(a2 + 24) = v8;
    *((_WORD *)v7 + 296) = a4;
    *(_WORD *)(a2 + 32) = a4;
    *(_DWORD *)(a2 + 300) |= 0x1000u;
    *(_DWORD *)(a2 + 8) |= 8u;
  }
  return result;
}

uint64_t sub_10036B498(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && a2)
  {
    if (a3)
    {
      *(_DWORD *)(a2 + 176) = *(_DWORD *)a3;
      *(_BYTE *)(a2 + 180) = *(_BYTE *)(a3 + 4);
      *(_DWORD *)(a2 + 8) |= 2u;
    }
  }
  return result;
}

uint64_t sub_10036B4C4(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  const void **v14;
  const char *v15;
  int v16;
  uint64_t v17;
  int v18;
  size_t v19;
  const char *v20;
  size_t v21;
  const char *v22;
  size_t v23;
  const char *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void **v38;
  size_t v39;
  size_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  size_t __n;

  v4 = 0;
  if (!a3)
    return v4;
  v5 = a1;
  if (!a1)
    return v4;
  v6 = a2;
  if (!a2 || a4 < 1)
    return v4;
  v9 = *(_DWORD *)(a2 + 148);
  if ((int)(*(_DWORD *)(a2 + 152) - v9) < a4)
  {
    if ((v9 ^ 0x7FFFFFFF) < a4
      || ((int)(v9 + a4) >= 2147483639 ? (v10 = 0x7FFFFFFF) : (v10 = ((v9 + a4) & 0xFFFFFFF8) + 8),
          (v11 = sub_10035F9A4(a1, *(const void **)(a2 + 160), v9, v10 - v9, 0x38uLL)) == 0))
    {
      v42 = "too many text chunks";
      v4 = 1;
      v43 = v5;
      goto LABEL_46;
    }
    v12 = v11;
    sub_10035F814(v5, *(void **)(v6 + 160));
    *(_QWORD *)(v6 + 160) = v12;
    *(_DWORD *)(v6 + 300) |= 0x4000u;
    *(_DWORD *)(v6 + 152) = v10;
  }
  v13 = a4;
  v14 = (const void **)(a3 + 48);
  v47 = v5;
  v45 = v6;
  while (1)
  {
    v15 = (const char *)*(v14 - 5);
    if (!v15)
      goto LABEL_14;
    v16 = *((_DWORD *)v14 - 12);
    if ((v16 - 3) > 0xFFFFFFFB)
      break;
    sub_10035F324(v5, "text compression mode is out of range", 1);
LABEL_14:
    v14 += 7;
    if (!--v13)
      return 0;
  }
  v17 = *(_QWORD *)(v6 + 160);
  v18 = *(_DWORD *)(v6 + 148);
  v19 = strlen(v15);
  if (v16 < 1)
  {
    v21 = 0;
    v23 = 0;
    v24 = (const char *)*(v14 - 4);
    if (v24)
      goto LABEL_26;
    goto LABEL_28;
  }
  v20 = (const char *)*(v14 - 1);
  if (v20)
  {
    v21 = strlen(v20);
    v22 = (const char *)*v14;
    if (*v14)
      goto LABEL_20;
LABEL_25:
    v23 = 0;
    v24 = (const char *)*(v14 - 4);
    if (v24)
      goto LABEL_26;
LABEL_28:
    v26 = 0;
    if (v16 < 1)
      v16 = -1;
    else
      v16 = 1;
  }
  else
  {
    v21 = 0;
    v22 = (const char *)*v14;
    if (!*v14)
      goto LABEL_25;
LABEL_20:
    v23 = strlen(v22);
    v24 = (const char *)*(v14 - 4);
    if (!v24)
      goto LABEL_28;
LABEL_26:
    if (!*v24)
      goto LABEL_28;
    v25 = v23;
    v26 = strlen(v24);
    v23 = v25;
  }
  v46 = v17 + 56 * v18;
  *(_DWORD *)v46 = v16;
  v27 = v23;
  __n = v26;
  v28 = sub_10035F91C(v47, v19 + v21 + v23 + v26 + 4);
  *(_QWORD *)(v46 + 8) = v28;
  v29 = (_QWORD *)(v46 + 8);
  if (v28)
  {
    v30 = v17;
    memcpy(v28, *(v14 - 5), v19);
    *(_BYTE *)(*v29 + v19) = 0;
    if (*((int *)v14 - 12) < 1)
    {
      v32 = v18;
      v35 = v30 + 56 * v18;
      *(_QWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      v27 = v19;
    }
    else
    {
      v31 = (void *)(*v29 + v19 + 1);
      v32 = v18;
      v33 = v30 + 56 * v18;
      *(_QWORD *)(v33 + 40) = v31;
      memcpy(v31, *(v14 - 1), v21);
      *(_BYTE *)(*(_QWORD *)(v33 + 40) + v21) = 0;
      v34 = (void *)(*(_QWORD *)(v33 + 40) + v21 + 1);
      *(_QWORD *)(v33 + 48) = v34;
      v29 = (_QWORD *)(v33 + 48);
      memcpy(v34, *v14, v27);
      *(_BYTE *)(*v29 + v27) = 0;
    }
    v6 = v45;
    v36 = (void *)(*v29 + v27 + 1);
    v37 = v30 + 56 * v32;
    *(_QWORD *)(v37 + 16) = v36;
    v38 = (void **)(v37 + 16);
    v39 = __n;
    if (__n)
    {
      memcpy(v36, *(v14 - 4), __n);
      v39 = __n;
      v36 = *v38;
    }
    v5 = v47;
    *((_BYTE *)v36 + v39) = 0;
    if (*(int *)v46 <= 0)
      v40 = v39;
    else
      v40 = 0;
    if (*(int *)v46 <= 0)
      v39 = 0;
    v41 = v30 + 56 * v32;
    *(_QWORD *)(v41 + 24) = v40;
    *(_QWORD *)(v41 + 32) = v39;
    ++*(_DWORD *)(v45 + 148);
    goto LABEL_14;
  }
  v42 = "text chunk: out of memory";
  v4 = 1;
  v43 = v47;
LABEL_46:
  sub_10035F324(v43, v42, 1);
  return v4;
}

uint64_t sub_10036B7FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && a2 && a3 && (*(_BYTE *)(result + 293) & 2) == 0)
  {
    if (*(unsigned __int8 *)(a3 + 2) - 13 >= 0xFFFFFFF4
      && *(unsigned __int8 *)(a3 + 3) - 32 >= 0xFFFFFFE1
      && *(unsigned __int8 *)(a3 + 4) <= 0x17u
      && *(unsigned __int8 *)(a3 + 5) <= 0x3Bu
      && *(unsigned __int8 *)(a3 + 6) < 0x3Du)
    {
      *(_QWORD *)(a2 + 168) = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) |= 0x200u;
    }
    else
    {
      return sub_10035E924(result, (uint64_t)"Ignoring invalid time value");
    }
  }
  return result;
}

void sub_10036B878(_QWORD *a1, uint64_t a2, const void *a3, unsigned int a4, uint64_t a5)
{
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  __int16 v13;

  if (a1 && a2)
  {
    if (a3)
    {
      sub_10035A878((uint64_t)a1, a2, 0x2000u, 0);
      if (a4 - 1 >= 0x100)
      {
        v10 = *(_QWORD **)(a2 + 184);
      }
      else
      {
        v10 = sub_10035F8C8(a1, 0x100uLL);
        *(_QWORD *)(a2 + 184) = v10;
        memcpy(v10, a3, a4);
      }
      a1[92] = v10;
    }
    if (a5)
    {
      v11 = *(unsigned __int8 *)(a2 + 36);
      if (v11 > 0xF)
        goto LABEL_20;
      v12 = ~(-1 << v11);
      if (*(_BYTE *)(a2 + 37) == 2)
      {
        if (*(unsigned __int16 *)(a5 + 2) <= v12
          && *(unsigned __int16 *)(a5 + 4) <= v12
          && *(unsigned __int16 *)(a5 + 6) <= v12)
        {
LABEL_20:
          *(_QWORD *)(a2 + 192) = *(_QWORD *)a5;
          *(_WORD *)(a2 + 200) = *(_WORD *)(a5 + 8);
          if (a4 <= 1)
            v13 = 1;
          else
            v13 = a4;
          *(_WORD *)(a2 + 34) = v13;
          goto LABEL_24;
        }
      }
      else if (*(_BYTE *)(a2 + 37) || *(unsigned __int16 *)(a5 + 8) <= v12)
      {
        goto LABEL_20;
      }
      sub_10035E924((uint64_t)a1, (uint64_t)"tRNS chunk has out-of-range samples for bit_depth");
      goto LABEL_20;
    }
    *(_WORD *)(a2 + 34) = a4;
    if (a4)
    {
LABEL_24:
      *(_DWORD *)(a2 + 8) |= 0x10u;
      *(_DWORD *)(a2 + 300) |= 0x2000u;
    }
  }
}

void sub_10036B9BC(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *i;
  const char *v11;
  size_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  const char *v16;

  if (a3)
  {
    if (a1)
    {
      if (a2)
      {
        v6 = a4;
        if (a4 >= 1)
        {
          v7 = a3;
          v8 = sub_10035F9A4(a1, *(const void **)(a2 + 320), *(_DWORD *)(a2 + 328), a4, 0x20uLL);
          if (!v8)
          {
            v16 = "too many sPLT chunks";
LABEL_18:
            sub_10035F324(a1, v16, 1);
            return;
          }
          v9 = v8;
          sub_10035F814(a1, *(void **)(a2 + 320));
          *(_QWORD *)(a2 + 320) = v9;
          *(_DWORD *)(a2 + 300) |= 0x20u;
          for (i = &v9[32 * *(int *)(a2 + 328)]; ; i += 32)
          {
            while (1)
            {
              v11 = *(const char **)v7;
              if (*(_QWORD *)v7)
              {
                if (*(_QWORD *)(v7 + 16))
                  break;
              }
              sub_10035F048(a1, "png_set_sPLT: invalid sPLT");
              if (!--v6)
                return;
            }
            i[8] = *(_BYTE *)(v7 + 8);
            v12 = strlen(v11) + 1;
            v13 = sub_10035F91C(a1, v12);
            *(_QWORD *)i = v13;
            if (!v13)
              break;
            memcpy(v13, *(const void **)v7, v12);
            v14 = sub_10035F940(a1, *(_DWORD *)(v7 + 24), 0xAuLL);
            *((_QWORD *)i + 2) = v14;
            if (!v14)
            {
              sub_10035F814(a1, *(void **)i);
              *(_QWORD *)i = 0;
              break;
            }
            v15 = *(unsigned int *)(v7 + 24);
            *((_DWORD *)i + 6) = v15;
            memcpy(v14, *(const void **)(v7 + 16), 10 * v15);
            *(_DWORD *)(a2 + 8) |= 0x2000u;
            ++*(_DWORD *)(a2 + 328);
            v7 += 32;
            if (!--v6)
              return;
          }
          if (v6 >= 1)
          {
            v16 = "sPLT out of memory";
            goto LABEL_18;
          }
        }
      }
    }
  }
}

void sub_10036BB5C(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  size_t v15;
  void *v16;
  size_t v17;

  if (a3)
  {
    if (a1)
    {
      if (a2)
      {
        v6 = a4;
        if (a4 >= 1)
        {
          v7 = a3;
          v8 = sub_10035F9A4(a1, *(const void **)(a2 + 304), *(_DWORD *)(a2 + 312), a4, 0x20uLL);
          if (v8)
          {
            v9 = v8;
            sub_10035F814(a1, *(void **)(a2 + 304));
            *(_QWORD *)(a2 + 304) = v9;
            *(_DWORD *)(a2 + 300) |= 0x200u;
            v10 = &v9[32 * *(int *)(a2 + 312)];
            while (1)
            {
              while (1)
              {
                *(_DWORD *)v10 = *(_DWORD *)v7;
                v10[4] = 0;
                v12 = *(_BYTE *)(v7 + 24) & 0xB;
                if (!v12)
                {
                  if ((*(_BYTE *)(a1 + 293) & 0x80) != 0
                    || (sub_10035F02C(a1, "png_set_unknown_chunks now expects a valid location"),
                        (v12 = *(_DWORD *)(a1 + 292) & 0xB) == 0))
                  {
                    sub_10035E6F4(a1, "invalid location in png_set_unknown_chunks");
                  }
                }
                do
                {
                  v13 = v12;
                  v14 = v12 & -v12;
                  v12 ^= v14;
                }
                while (v13 != v14);
                v10[24] = v13;
                v15 = *(_QWORD *)(v7 + 16);
                if (v15)
                  break;
                *((_QWORD *)v10 + 1) = 0;
                *((_QWORD *)v10 + 2) = 0;
LABEL_8:
                v10 += 32;
                ++*(_DWORD *)(a2 + 312);
                v7 += 32;
                v11 = __OFSUB__(v6--, 1);
                if ((v6 < 0) ^ v11 | (v6 == 0))
                  return;
              }
              v16 = sub_10035F91C(a1, v15);
              *((_QWORD *)v10 + 1) = v16;
              if (v16)
              {
                v17 = *(_QWORD *)(v7 + 16);
                memcpy(v16, *(const void **)(v7 + 8), v17);
                *((_QWORD *)v10 + 2) = v17;
                goto LABEL_8;
              }
              sub_10035F324(a1, "unknown chunk: out of memory", 1);
              v7 += 32;
              v11 = __OFSUB__(v6--, 1);
              if ((v6 < 0) ^ v11 | (v6 == 0))
                return;
            }
          }
          sub_10035F324(a1, "too many unknown chunks", 1);
        }
      }
    }
  }
}

uint64_t sub_10036BD0C(uint64_t a1, unsigned __int8 *a2, _BYTE *a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  _OWORD v16[16];

  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = 0;
      v6 = 0;
      v7 = 1;
      v8 = a2;
      while (1)
      {
        if (v4 > 0xA0 || v4 - 33 <= 0x5D)
        {
          v7 = 0;
          *a3++ = v4;
          ++v6;
          v9 = *++v8;
          v4 = v9;
          if (!v9)
            goto LABEL_19;
        }
        else
        {
          if (v7)
          {
            if (!v5)
              v5 = v4;
          }
          else
          {
            *a3++ = 32;
            ++v6;
            if (v4 != 32)
              v5 = v4;
          }
          v7 = 1;
          v10 = *++v8;
          v4 = v10;
          if (!v10)
            goto LABEL_19;
        }
        if (v6 >= 0x4F)
          goto LABEL_19;
      }
    }
    v6 = 0;
    v5 = 0;
    v7 = 1;
    v8 = a2;
LABEL_19:
    if (v6)
      v12 = v7 == 0;
    else
      v12 = 1;
    v13 = !v12;
    if ((v13 & (v5 == 0)) != 0)
      v14 = 32;
    else
      v14 = v5;
    a3[-v13] = 0;
    v11 = v6 - v13;
    if ((_DWORD)v11)
    {
      if (*v8)
      {
        sub_10035E924(a1, (uint64_t)"keyword truncated");
      }
      else if (v14)
      {
        memset(v16, 0, sizeof(v16));
        sub_10035EAB0((uint64_t)v16, 1, a2);
        sub_10035EB04((uint64_t)v16, 2, 4, v14);
        sub_10035ECEC(a1, (uint64_t)v16, "keyword \"@1\": bad character '0x@2'");
      }
    }
  }
  else
  {
    v11 = 0;
    *a3 = 0;
  }
  return v11;
}

uint64_t sub_10036BEB8(uint64_t result)
{
  if (result)
    *(_DWORD *)(result + 300) |= 1u;
  return result;
}

uint64_t sub_10036BECC(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 608) == 16)
      *(_DWORD *)(result + 300) |= 0x10u;
  }
  return result;
}

uint64_t sub_10036BEEC(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 608) <= 7u)
    {
      *(_DWORD *)(result + 300) |= 4u;
      *(_BYTE *)(result + 609) = 8;
    }
  }
  return result;
}

uint64_t sub_10036BF14(uint64_t a1)
{
  if (!a1 || !*(_BYTE *)(a1 + 604))
    return 1;
  *(_DWORD *)(a1 + 300) |= 2u;
  return 7;
}

uint64_t sub_10036BF3C(uint64_t result, int8x16_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  int8x16_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  int8x16_t *v8;
  unint64_t v9;
  unint64_t i;
  __int8 *v11;
  int8x16_t *v12;
  unint64_t v13;
  int8x16_t v14;
  unint64_t v15;
  int8x8_t *v16;
  unint64_t v17;
  unint64_t v18;
  __int8 *v19;
  unint64_t v20;
  __int8 v21;
  unint64_t v22;

  if (*(_BYTE *)(result + 16) == 4)
  {
    v5 = *(unsigned __int8 *)(result + 17);
    if (v5 == 16)
    {
      v9 = *(_QWORD *)(result + 8);
      if (v9)
      {
        for (i = 0; i < v9; i += 4)
        {
          v11 = &a2->i8[i];
          *v11 = ~a2->i8[i];
          v11[1] = ~a2->i8[i + 1];
        }
      }
    }
    else if (v5 == 8)
    {
      v6 = *(_QWORD *)(result + 8);
      if (v6)
      {
        if (v6 >= 3)
        {
          v18 = ((v6 - 1) >> 1) + 1;
          v7 = 2 * (v18 & 0xFFFFFFFFFFFFFFFELL);
          v8 = (int8x16_t *)((char *)a2 + v7);
          v19 = &a2->i8[2];
          v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v21 = ~*v19;
            *(v19 - 2) = ~*(v19 - 2);
            *v19 = v21;
            v19 += 4;
            v20 -= 2;
          }
          while (v20);
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFFELL))
            return result;
        }
        else
        {
          v7 = 0;
          v8 = a2;
        }
        do
        {
          v8->i8[0] = ~v8->i8[0];
          v8 = (int8x16_t *)((char *)v8 + 2);
          v7 += 2;
        }
        while (v7 < v6);
      }
    }
  }
  else if (!*(_BYTE *)(result + 16))
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2)
    {
      if (v2 < 8)
      {
        v3 = 0;
        v4 = a2;
        goto LABEL_31;
      }
      if (v2 >= 0x20)
      {
        v3 = v2 & 0xFFFFFFFFFFFFFFE0;
        v12 = a2 + 1;
        v13 = v2 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v14 = vmvnq_s8(*v12);
          v12[-1] = vmvnq_s8(v12[-1]);
          *v12 = v14;
          v12 += 2;
          v13 -= 32;
        }
        while (v13);
        if (v2 == v3)
          return result;
        if ((v2 & 0x18) == 0)
        {
          v4 = (int8x16_t *)((char *)a2 + v3);
LABEL_31:
          v22 = v2 - v3;
          do
          {
            v4->i8[0] = ~v4->i8[0];
            v4 = (int8x16_t *)((char *)v4 + 1);
            --v22;
          }
          while (v22);
          return result;
        }
      }
      else
      {
        v3 = 0;
      }
      v15 = v3;
      v3 = v2 & 0xFFFFFFFFFFFFFFF8;
      v4 = (int8x16_t *)((char *)a2 + (v2 & 0xFFFFFFFFFFFFFFF8));
      v16 = (int8x8_t *)&a2->i8[v15];
      v17 = v15 - (v2 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *v16 = vmvn_s8(*v16);
        ++v16;
        v17 += 8;
      }
      while (v17);
      if (v2 != v3)
        goto LABEL_31;
    }
  }
  return result;
}

uint64_t sub_10036C0D0(uint64_t result, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  int8x16_t v9;
  int8x16_t v10;
  char *v11;
  uint64_t v12;
  int8x8_t v13;
  int v14;
  char v15;
  int8x8x2_t v16;
  int8x16x2_t v17;
  int8x16x2_t v18;

  if (*(_BYTE *)(result + 17) == 16)
  {
    v2 = *(_DWORD *)result * *(unsigned __int8 *)(result + 18);
    if ((_DWORD)v2)
    {
      if (v2 < 8)
      {
        LODWORD(v3) = 0;
        v4 = a2;
        goto LABEL_16;
      }
      if (v2 >= 0x20)
      {
        v5 = v2 & 0xFFFFFFE0;
        v6 = a2 + 32;
        v7 = v5;
        do
        {
          v8 = v6 - 32;
          v17 = vld2q_s8(v8);
          v18 = vld2q_s8(v6);
          v9 = v17.val[0];
          v10 = v18.val[0];
          vst2q_s8(v8, *(int8x16x2_t *)((char *)&v17 + 16));
          vst2q_s8(v6, *(int8x16x2_t *)((char *)&v18 + 16));
          v6 += 64;
          v7 -= 32;
        }
        while (v7);
        if (v5 == v2)
          return result;
        if ((v2 & 0x18) == 0)
        {
          v4 = &a2[2 * v5];
          LODWORD(v3) = v2 & 0xFFFFFFE0;
LABEL_16:
          v14 = v2 - v3;
          do
          {
            v15 = *v4;
            *v4 = v4[1];
            v4[1] = v15;
            v4 += 2;
            --v14;
          }
          while (v14);
          return result;
        }
      }
      else
      {
        v5 = 0;
      }
      v3 = v2 & 0xFFFFFFF8;
      v4 = &a2[2 * v3];
      v11 = &a2[2 * v5];
      v12 = v5 - v3;
      do
      {
        v16 = vld2_s8(v11);
        v13 = v16.val[0];
        vst2_s8(v11, *(int8x8x2_t *)((char *)&v16 + 8));
        v11 += 16;
        v12 += 8;
      }
      while (v12);
      if (v3 != v2)
        goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_10036C1B0(uint64_t result, _BYTE *a2)
{
  unsigned int v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;

  v2 = *(unsigned __int8 *)(result + 17);
  if (v2 <= 7)
  {
    v3 = *(_QWORD *)(result + 8);
    switch(v2)
    {
      case 1u:
        v4 = &unk_1003C5184;
        if (v3 < 1)
          return result;
        break;
      case 4u:
        v4 = &unk_1003C5384;
        if (v3 < 1)
          return result;
        break;
      case 2u:
        v4 = &unk_1003C5284;
        if (v3 < 1)
          return result;
        break;
      default:
        return result;
    }
    v5 = &a2[v3];
    do
    {
      *a2 = v4[*a2];
      ++a2;
    }
    while (a2 < v5);
  }
  return result;
}

uint64_t sub_10036C22C(uint64_t result, _BYTE *a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  char *v7;
  _BYTE *v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;

  v3 = *(_QWORD *)(result + 8);
  v4 = (unint64_t)&a2[v3];
  v5 = *(unsigned __int8 *)(result + 18);
  if (v5 == 4)
  {
    v10 = *(unsigned __int8 *)(result + 17);
    if (v10 == 16)
    {
      v16 = 8;
      if (a3)
        v16 = 2;
      v17 = 6;
      if (a3)
        v17 = 0;
      v8 = &a2[v17];
      if (v16 < v3)
      {
        v18 = &a2[v16];
        do
        {
          *v8 = *v18;
          v8[1] = v18[1];
          v8[2] = v18[2];
          v8[3] = v18[3];
          v8[4] = v18[4];
          v8[5] = v18[5];
          v8 += 6;
          v18 += 8;
        }
        while ((unint64_t)v18 < v4);
      }
      *(_BYTE *)(result + 19) = 48;
      *(_BYTE *)(result + 18) = 3;
      if (*(_BYTE *)(result + 16) != 6)
        goto LABEL_44;
    }
    else
    {
      if (v10 != 8)
        return result;
      if (a3)
        v11 = 1;
      else
        v11 = 4;
      v12 = 3;
      if (a3)
        v12 = 0;
      v8 = &a2[v12];
      if (v11 < v3)
      {
        v13 = &a2[v11];
        do
        {
          *v8 = *v13;
          v8[1] = v13[1];
          v8[2] = v13[2];
          v8 += 3;
          v13 += 4;
        }
        while ((unint64_t)v13 < v4);
      }
      *(_BYTE *)(result + 19) = 24;
      *(_BYTE *)(result + 18) = 3;
      if (*(_BYTE *)(result + 16) != 6)
        goto LABEL_44;
    }
    *(_BYTE *)(result + 16) = 2;
    goto LABEL_44;
  }
  if (v5 != 2)
    return result;
  v6 = *(unsigned __int8 *)(result + 17);
  if (v6 != 16)
  {
    if (v6 != 8)
      return result;
    if (a3)
      v7 = a2 + 1;
    else
      v7 = a2 + 2;
    if (a3)
      v8 = a2;
    else
      v8 = a2 + 1;
    for (; (unint64_t)v7 < v4; ++v8)
    {
      v9 = *v7;
      v7 += 2;
      *v8 = v9;
    }
LABEL_31:
    *(_BYTE *)(result + 19) = v6;
    *(_BYTE *)(result + 18) = 1;
    if (*(_BYTE *)(result + 16) != 4)
      goto LABEL_44;
    goto LABEL_43;
  }
  v14 = a2 + 4;
  if (a3)
  {
    v14 = a2 + 2;
    v15 = a2;
  }
  else
  {
    v15 = a2 + 2;
  }
  if ((unint64_t)v14 < v4)
  {
    do
    {
      *v15 = *v14;
      v8 = v15 + 2;
      v15[1] = v14[1];
      v14 += 4;
      v15 += 2;
    }
    while ((unint64_t)v14 < v4);
    goto LABEL_31;
  }
  v8 = v15;
  *(_BYTE *)(result + 19) = 16;
  *(_BYTE *)(result + 18) = 1;
  if (*(_BYTE *)(result + 16) == 4)
LABEL_43:
    *(_BYTE *)(result + 16) = 0;
LABEL_44:
  *(_QWORD *)(result + 8) = v8 - a2;
  return result;
}

unsigned int *sub_10036C420(unsigned int *result, char *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char *v6;
  __int16 v8;
  uint64_t v9;
  char *v10;
  __int16 v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  int v17;
  char v18;
  _BYTE *v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  int v24;
  char v25;

  v2 = *((unsigned __int8 *)result + 16);
  if ((v2 & 2) != 0)
  {
    v3 = *result;
    v4 = *((unsigned __int8 *)result + 17);
    if (v4 == 16)
    {
      if (v2 == 2)
      {
        for (; (_DWORD)v3; LODWORD(v3) = v3 - 1)
        {
          v11 = *(_WORD *)a2;
          *(_WORD *)a2 = *((_WORD *)a2 + 2);
          *((_WORD *)a2 + 2) = v11;
          a2 += 6;
        }
      }
      else if (v2 == 6 && (_DWORD)v3 != 0)
      {
        do
        {
          v8 = *(_WORD *)a2;
          *(_WORD *)a2 = *((_WORD *)a2 + 2);
          *((_WORD *)a2 + 2) = v8;
          a2 += 8;
          LODWORD(v3) = v3 - 1;
        }
        while ((_DWORD)v3);
      }
    }
    else
    {
      if (v4 != 8)
        return result;
      if (v2 == 2)
      {
        if (!(_DWORD)v3)
          return result;
        if ((_DWORD)v3 == 1)
        {
          LODWORD(v9) = 0;
          v10 = a2;
        }
        else
        {
          v9 = v3 & 0xFFFFFFFE;
          v10 = &a2[3 * v9];
          v19 = a2 + 2;
          v20 = v9;
          do
          {
            v21 = *(v19 - 2);
            v22 = v19[1];
            v23 = v19[3];
            *(v19 - 2) = *v19;
            v19[1] = v23;
            *v19 = v21;
            v19[3] = v22;
            v19 += 6;
            v20 -= 2;
          }
          while (v20);
          if (v9 == v3)
            return result;
        }
        v24 = v3 - v9;
        do
        {
          v25 = *v10;
          *v10 = v10[2];
          v10[2] = v25;
          v10 += 3;
          --v24;
        }
        while (v24);
        return result;
      }
      if (v2 == 6 && (_DWORD)v3)
      {
        if ((_DWORD)v3 == 1)
        {
          LODWORD(v5) = 0;
          v6 = a2;
LABEL_25:
          v17 = v3 - v5;
          do
          {
            v18 = *v6;
            *v6 = v6[2];
            v6[2] = v18;
            v6 += 4;
            --v17;
          }
          while (v17);
          return result;
        }
        v5 = v3 & 0xFFFFFFFE;
        v6 = &a2[4 * v5];
        v12 = a2 + 4;
        v13 = v5;
        do
        {
          v14 = *(v12 - 4);
          v15 = *v12;
          v16 = v12[2];
          *(v12 - 4) = *(v12 - 2);
          *v12 = v16;
          *(v12 - 2) = v14;
          v12[2] = v15;
          v12 += 8;
          v13 -= 2;
        }
        while (v13);
        if (v5 != v3)
          goto LABEL_25;
      }
    }
  }
  return result;
}

uint64_t sub_10036C5AC(uint64_t result, uint64_t a2)
{
  int v2;
  BOOL v3;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  _BYTE *i;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 *k;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int8 *j;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v50;
  int v51;

  v2 = *(unsigned __int8 *)(a2 + 17);
  if (*(_WORD *)(result + 592))
    v3 = 1 << v2 <= *(unsigned __int16 *)(result + 592);
  else
    v3 = 1;
  if (!v3)
  {
    v4 = v2 - 1;
    v5 = -(*(_DWORD *)a2 * *(unsigned __int8 *)(a2 + 19)) & 7;
    v6 = *(_QWORD *)(result + 544);
    v7 = v6 + *(_QWORD *)(a2 + 8);
    v8 = (unsigned __int8 *)(v7 - 1);
    switch(v4)
    {
      case 0:
        if ((unint64_t)v8 > v6)
        {
          if (*v8 >> v5)
            *(_DWORD *)(result + 596) = 1;
          for (i = (_BYTE *)(v7 - 2); (unint64_t)i > v6; --i)
          {
            if (*i)
              *(_DWORD *)(result + 596) = 1;
          }
        }
        break;
      case 1:
        if ((unint64_t)v8 > v6)
        {
          v24 = *(_DWORD *)(result + 596);
          v25 = *v8 >> v5;
          v26 = v25 & 3;
          if (v26 <= v24)
            v27 = *(_DWORD *)(result + 596);
          else
            v27 = v25 & 3;
          v28 = (v25 >> 2) & 3;
          if (v28 <= v27)
            v29 = v27;
          else
            v29 = (v25 >> 2) & 3;
          v30 = (v25 >> 4) & 3;
          if (v30 <= v29)
            v31 = v29;
          else
            v31 = (v25 >> 4) & 3;
          v32 = v25 >> 6;
          if (v25 >> 6 <= v31)
            v33 = v31;
          else
            v33 = v25 >> 6;
          if (v26 > v24 || v28 > v27 || v30 > v29 || v32 > v31)
            *(_DWORD *)(result + 596) = v33;
          for (j = (unsigned __int8 *)(v7 - 2); (unint64_t)j > v6; --j)
          {
            v38 = v33;
            v39 = *j;
            v40 = v39 & 3;
            if (v40 <= (int)v38)
              v41 = v38;
            else
              v41 = v39 & 3;
            v42 = (v39 >> 2) & 3;
            if (v42 <= v41)
              v43 = v41;
            else
              v43 = (v39 >> 2) & 3;
            v44 = (v39 >> 4) & 3;
            if (v44 <= v43)
              v45 = v43;
            else
              v45 = (v39 >> 4) & 3;
            v46 = v39 >> 6;
            if (v39 >> 6 <= v45)
              v33 = v45;
            else
              v33 = v39 >> 6;
            if (v40 > v38 || v42 > v41 || v44 > v43 || v46 > v45)
              *(_DWORD *)(result + 596) = v33;
          }
        }
        break;
      case 3:
        if ((unint64_t)v8 > v6)
        {
          v10 = *(_DWORD *)(result + 596);
          v11 = *v8 >> v5;
          v12 = v11 & 0xF;
          if (v12 <= v10)
            v13 = *(_DWORD *)(result + 596);
          else
            v13 = v11 & 0xF;
          v14 = v11 >> 4;
          if (v11 >> 4 <= v13)
            v15 = v13;
          else
            v15 = v11 >> 4;
          if (v12 > v10 || v14 > v13)
            *(_DWORD *)(result + 596) = v15;
          for (k = (unsigned __int8 *)(v7 - 2); (unint64_t)k > v6; --k)
          {
            v18 = v15;
            v19 = *k;
            v20 = v19 & 0xF;
            if (v20 <= (int)v18)
              v21 = v18;
            else
              v21 = v19 & 0xF;
            v22 = v19 >> 4;
            if (v19 >> 4 <= v21)
              v15 = v21;
            else
              v15 = v19 >> 4;
            if (v20 > v18 || v22 > v21)
              *(_DWORD *)(result + 596) = v15;
          }
        }
        break;
      case 7:
        if ((unint64_t)v8 > v6)
        {
          v50 = *(_DWORD *)(result + 596);
          do
          {
            v51 = *v8;
            if (v50 < v51)
            {
              *(_DWORD *)(result + 596) = v51;
              v50 = v51;
            }
            --v8;
          }
          while ((unint64_t)v8 > v6);
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_10036C7D8(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(a1 + 240);
  if (!v1)
    sub_10035E6F4(a1, "Call to NULL write function");
  return v1();
}

size_t sub_10036C7FC(size_t result, void *__ptr, size_t a3)
{
  uint64_t v4;

  if (result)
  {
    v4 = result;
    result = fwrite(__ptr, 1uLL, a3, *(FILE **)(result + 256));
    if (result != a3)
      sub_10035E6F4(v4, "Write Error");
  }
  return result;
}

uint64_t sub_10036C848(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(result + 648);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_10036C858(uint64_t result)
{
  if (result)
    return fflush(*(FILE **)(result + 256));
  return result;
}

_QWORD *sub_10036C868(_QWORD *result, uint64_t a2, size_t (*a3)(size_t result, void *__ptr, size_t a3), uint64_t (*a4)(uint64_t result))
{
  size_t (*v4)(size_t, void *, size_t);
  uint64_t (*v5)(uint64_t);

  if (result)
  {
    result[32] = a2;
    v4 = sub_10036C7FC;
    if (a3)
      v4 = a3;
    result[30] = v4;
    v5 = sub_10036C858;
    if (a4)
      v5 = a4;
    result[81] = v5;
    if (result[31])
    {
      result[31] = 0;
      return (_QWORD *)sub_10035E924((uint64_t)result, (uint64_t)"Can't set both read_data_fn and write_data_fn in the same structure");
    }
  }
  return result;
}

uint64_t sub_10036C8B4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (!result)
    return result;
  if (!a2)
    return result;
  v3 = result;
  if ((*(_BYTE *)(result + 293) & 4) != 0)
    return result;
  sub_10036E35C(result);
  if ((*(_BYTE *)(v3 + 293) & 0x10) != 0 && *(_DWORD *)(v3 + 976))
  {
    sub_10035E924(v3, (uint64_t)"MNG features are not allowed in a PNG datastream");
    *(_DWORD *)(v3 + 976) = 0;
  }
  result = sub_10036E594(v3, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int8 *)(a2 + 36), *(unsigned __int8 *)(a2 + 37), *(unsigned __int8 *)(a2 + 38), *(unsigned __int8 *)(a2 + 39), *(unsigned __int8 *)(a2 + 40));
  v4 = *(_WORD *)(a2 + 126);
  if ((v4 & 0x8008) == 8)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      goto LABEL_11;
    result = sub_10036F438(v3, *(_DWORD *)(a2 + 52));
    v4 = *(_WORD *)(a2 + 126);
  }
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    v5 = *(_DWORD *)(a2 + 8);
    if ((v5 & 0x1000) != 0)
    {
      if ((v5 & 0x800) != 0)
        sub_10035F02C(v3, "profile matches sRGB but writing iCCP instead");
      result = sub_10036F4C8(v3, *(unsigned __int8 **)(a2 + 128), *(_QWORD *)(a2 + 136));
    }
    else if ((v5 & 0x800) != 0)
    {
      result = sub_10036F46C(v3, *(unsigned __int16 *)(a2 + 124));
    }
  }
  if ((*(_BYTE *)(a2 + 8) & 2) != 0)
    result = sub_10036FD60(v3, (unsigned __int8 *)(a2 + 176), *(unsigned __int8 *)(a2 + 37));
  if ((*(_WORD *)(a2 + 126) & 0x8010) == 0x10 && (*(_BYTE *)(a2 + 8) & 4) != 0)
    result = sub_10036FE4C(v3, (unsigned int *)(a2 + 56));
  v6 = *(int *)(a2 + 312);
  if ((int)v6 > 0)
  {
    v7 = *(_QWORD *)(a2 + 304);
    v8 = v7 + 32 * v6;
    do
    {
      if ((*(_BYTE *)(v7 + 24) & 1) != 0)
      {
        result = sub_10035ACDC(v3, (_DWORD *)v7);
        if ((_DWORD)result != 1
          && ((_DWORD)result == 3 || (*(_BYTE *)(v7 + 3) & 0x20) != 0 || !(_DWORD)result && *(_DWORD *)(v3 + 952) == 3))
        {
          v9 = *(_QWORD *)(v7 + 16);
          if (!v9)
          {
            sub_10035E924(v3, (uint64_t)"Writing zero-length unknown chunk");
            v9 = *(_QWORD *)(v7 + 16);
          }
          result = sub_10036E3F8(v3, (unsigned int *)v7, *(Bytef **)(v7 + 8), v9);
        }
      }
      v7 += 32;
    }
    while (v7 < v8);
  }
  *(_DWORD *)(v3 + 292) |= 0x400u;
  return result;
}

void sub_10036CA8C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;

  if (!a1 || !a2)
    return;
  sub_10036C8B4(a1, a2);
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 8) != 0)
  {
    sub_10036E884(a1, *(_QWORD *)(a2 + 24), *(unsigned __int16 *)(a2 + 32));
    v4 = *(_DWORD *)(a2 + 8);
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
  }
  else
  {
    if (*(_BYTE *)(a2 + 37) == 3)
      sub_10035E6F4(a1, "Valid palette required for paletted images");
    if ((v4 & 0x10) == 0)
    {
LABEL_6:
      if ((v4 & 0x20) == 0)
        goto LABEL_7;
      goto LABEL_26;
    }
  }
  if ((*(_BYTE *)(a1 + 302) & 8) != 0 && *(_BYTE *)(a2 + 37) == 3)
  {
    v5 = *(unsigned __int16 *)(a2 + 34) >= 0x100u ? 256 : *(unsigned __int16 *)(a2 + 34);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
        *(_BYTE *)(*(_QWORD *)(a2 + 184) + i) = ~*(_BYTE *)(*(_QWORD *)(a2 + 184) + i);
    }
  }
  sub_10036FF24(a1, *(Bytef **)(a2 + 184), (unsigned __int16 *)(a2 + 192), *(unsigned __int16 *)(a2 + 34), *(unsigned __int8 *)(a2 + 37));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  sub_100370070(a1, (unsigned __int8 *)(a2 + 202), *(unsigned __int8 *)(a2 + 37));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  sub_1003701B0(a1, *(Bytef **)(a2 + 240), *(_DWORD *)(a2 + 236));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  sub_100370304(a1, *(unsigned __int16 **)(a2 + 256), *(unsigned __int16 *)(a2 + 32));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  sub_100370DC4(a1, *(_DWORD *)(a2 + 212), *(_DWORD *)(a2 + 216), *(unsigned __int8 *)(a2 + 220));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  sub_100370E80(a1, *(unsigned __int8 **)(a2 + 264), *(_DWORD *)(a2 + 272), *(_DWORD *)(a2 + 276), *(unsigned __int8 *)(a2 + 296), *(unsigned __int8 *)(a2 + 297), *(const char **)(a2 + 280), *(Bytef ***)(a2 + 288));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  sub_10037118C(a1, *(_BYTE *)(a2 + 332), *(char **)(a2 + 336), *(const char **)(a2 + 344));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x80) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  sub_1003712B0(a1, *(_DWORD *)(a2 + 224), *(_DWORD *)(a2 + 228), *(unsigned __int8 *)(a2 + 232));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_37;
LABEL_34:
    if (*(int *)(a2 + 328) >= 1)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        sub_10036FA08(a1, *(_QWORD *)(a2 + 320) + v7);
        ++v8;
        v7 += 32;
      }
      while (v8 < *(int *)(a2 + 328));
    }
    goto LABEL_37;
  }
LABEL_33:
  sub_100371380(a1, (unsigned __int16 *)(a2 + 168));
  *(_DWORD *)(a1 + 292) |= 0x200u;
  if ((*(_DWORD *)(a2 + 8) & 0x2000) != 0)
    goto LABEL_34;
LABEL_37:
  if (*(int *)(a2 + 148) >= 1)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)(a2 + 160);
    do
    {
      v12 = *(_DWORD *)(v11 + v9);
      if (v12 < 1)
      {
        if (v12 != -1)
        {
          if (!v12)
          {
            sub_100370648(a1, *(unsigned __int8 **)(v11 + v9 + 8), *(char **)(v11 + v9 + 16), 0);
            v11 = *(_QWORD *)(a2 + 160);
            *(_DWORD *)(v11 + v9) = -2;
          }
          goto LABEL_41;
        }
        sub_100370488((_DWORD *)a1, *(unsigned __int8 **)(v11 + v9 + 8), *(char **)(v11 + v9 + 16));
        v11 = *(_QWORD *)(a2 + 160);
      }
      else
      {
        sub_100370950(a1, v12, *(unsigned __int8 **)(v11 + v9 + 8), *(char **)(v11 + v9 + 40), *(char **)(v11 + v9 + 48), *(char **)(v11 + v9 + 16));
        v11 = *(_QWORD *)(a2 + 160);
        if (*(_DWORD *)(v11 + v9) != -1)
        {
          *(_DWORD *)(v11 + v9) = -2;
          goto LABEL_41;
        }
      }
      *(_DWORD *)(v11 + v9) = -3;
LABEL_41:
      ++v10;
      v9 += 56;
    }
    while (v10 < *(int *)(a2 + 148));
  }
  v13 = *(int *)(a2 + 312);
  if ((int)v13 > 0)
  {
    v14 = *(_QWORD *)(a2 + 304);
    v15 = v14 + 32 * v13;
    do
    {
      if ((*(_BYTE *)(v14 + 24) & 2) != 0)
      {
        v17 = sub_10035ACDC(a1, (_DWORD *)v14);
        if (v17 != 1 && (v17 == 3 || (*(_BYTE *)(v14 + 3) & 0x20) != 0 || !v17 && *(_DWORD *)(a1 + 952) == 3))
        {
          v16 = *(_QWORD *)(v14 + 16);
          if (!v16)
          {
            sub_10035E924(a1, (uint64_t)"Writing zero-length unknown chunk");
            v16 = *(_QWORD *)(v14 + 16);
          }
          sub_10036E3F8(a1, (unsigned int *)v14, *(Bytef **)(v14 + 8), v16);
        }
      }
      v14 += 32;
    }
    while (v14 < v15);
  }
}

uint64_t sub_10036CE00(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;

  if (result)
  {
    v2 = result;
    if ((*(_BYTE *)(result + 292) & 4) == 0)
      sub_10035E6F4(result, "No IDATs written into file");
    if (*(_DWORD *)(result + 596) > (int)*(unsigned __int16 *)(result + 592))
      sub_10035EE60(result, "Wrote palette index exceeding num_palette");
    if (a2)
    {
      if ((*(_BYTE *)(a2 + 9) & 2) != 0 && (*(_BYTE *)(v2 + 293) & 2) == 0)
        sub_100371380(v2, (unsigned __int16 *)(a2 + 168));
      if (*(int *)(a2 + 148) >= 1)
      {
        v4 = 0;
        v5 = 0;
        v6 = *(_QWORD *)(a2 + 160);
        do
        {
          v7 = *(_DWORD *)(v6 + v4);
          if (v7 < 1)
          {
            if ((v7 & 0x80000000) == 0)
            {
              sub_100370648(v2, *(unsigned __int8 **)(v6 + v4 + 8), *(char **)(v6 + v4 + 16), 0);
              v6 = *(_QWORD *)(a2 + 160);
              *(_DWORD *)(v6 + v4) = -2;
              goto LABEL_12;
            }
            if (v7 != -1)
              goto LABEL_12;
            sub_100370488((_DWORD *)v2, *(unsigned __int8 **)(v6 + v4 + 8), *(char **)(v6 + v4 + 16));
            v6 = *(_QWORD *)(a2 + 160);
          }
          else
          {
            sub_100370950(v2, v7, *(unsigned __int8 **)(v6 + v4 + 8), *(char **)(v6 + v4 + 40), *(char **)(v6 + v4 + 48), *(char **)(v6 + v4 + 16));
            v6 = *(_QWORD *)(a2 + 160);
            if (*(_DWORD *)(v6 + v4) != -1)
            {
              *(_DWORD *)(v6 + v4) = -2;
              goto LABEL_12;
            }
          }
          *(_DWORD *)(v6 + v4) = -3;
LABEL_12:
          ++v5;
          v4 += 56;
        }
        while (v5 < *(int *)(a2 + 148));
      }
      if ((*(_BYTE *)(a2 + 10) & 1) != 0)
        sub_1003701B0(v2, *(Bytef **)(a2 + 240), *(_DWORD *)(a2 + 236));
      v8 = *(int *)(a2 + 312);
      if ((int)v8 > 0)
      {
        v9 = *(_QWORD *)(a2 + 304);
        v10 = v9 + 32 * v8;
        do
        {
          if ((*(_BYTE *)(v9 + 24) & 8) != 0)
          {
            v12 = sub_10035ACDC(v2, (_DWORD *)v9);
            if (v12 != 1 && (v12 == 3 || (*(_BYTE *)(v9 + 3) & 0x20) != 0 || !v12 && *(_DWORD *)(v2 + 952) == 3))
            {
              v11 = *(_QWORD *)(v9 + 16);
              if (!v11)
              {
                sub_10035E924(v2, (uint64_t)"Writing zero-length unknown chunk");
                v11 = *(_QWORD *)(v9 + 16);
              }
              sub_10036E3F8(v2, (unsigned int *)v9, *(Bytef **)(v9 + 8), v11);
            }
          }
          v9 += 32;
        }
        while (v9 < v10);
      }
    }
    *(_DWORD *)(v2 + 292) |= 8u;
    return sub_10036F360(v2);
  }
  return result;
}

_QWORD *sub_10036D020(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = sub_10035A600(a1, a2, a3, a4, 0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 118) = 0;
    v4[58] = 0x80000000FLL;
    *((_OWORD *)v4 + 27) = xmmword_1003C5490;
    *((_OWORD *)v4 + 28) = xmmword_1003C54A0;
    *((_DWORD *)v4 + 74) |= 0x200000u;
    sub_10036C868(v4, 0, 0, 0);
  }
  return v5;
}

void sub_10036D098(uint64_t a1, void *__src)
{
  unsigned int v4;
  char v5;
  char v6;
  size_t v7;
  unsigned __int8 v8;
  int16x8_t v9;
  double v10;
  int64x2_t v11;
  double v12;
  double v13;
  int8x16_t v14;
  double v15;
  int8x16_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  char v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  void (*v29)(uint64_t, _QWORD, _QWORD);
  uint64_t v30;
  size_t v31;
  uint64_t v32;

  if (!a1)
    return;
  if (*(_DWORD *)(a1 + 524) || *(_BYTE *)(a1 + 605))
  {
    if (!*(_BYTE *)(a1 + 604))
      goto LABEL_6;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 293) & 4) == 0)
      sub_10035E6F4(a1, "png_write_info was never called before png_write_row");
    sub_100371420(a1);
    if (!*(_BYTE *)(a1 + 604))
    {
LABEL_6:
      v30 = 0;
      v31 = 0;
      v4 = *(_DWORD *)(a1 + 508);
      v5 = *(_BYTE *)(a1 + 612);
      v6 = *(_BYTE *)(a1 + 609);
      if ((v6 * v5) >= 8u)
        v7 = v4 * (unint64_t)((v6 * v5) >> 3);
      else
        v7 = ((v6 * v5) * (unint64_t)v4 + 7) >> 3;
      v8 = *(_BYTE *)(a1 + 607);
      v31 = v7;
      v32 = v8;
      LODWORD(v30) = v4;
      BYTE2(v32) = v5;
      BYTE1(v32) = v6;
      *(_DWORD *)((char *)&v32 + 3) = (v6 * v5);
      memcpy((void *)(*(_QWORD *)(a1 + 544) + 1), __src, v7);
      if (*(_BYTE *)(a1 + 604))
      {
        v17 = *(unsigned __int8 *)(a1 + 605);
        if (v17 <= 5 && (*(_BYTE *)(a1 + 300) & 2) != 0)
        {
          sub_10037194C((uint64_t)&v30, (unsigned __int8 *)(*(_QWORD *)(a1 + 544) + 1), v17);
          if (!(_DWORD)v30)
          {
            sub_100371580(a1);
            return;
          }
        }
      }
      if (*(_DWORD *)(a1 + 300))
        sub_10036D798(a1, (unsigned int *)&v30, v9);
      if (BYTE3(v32) != *(unsigned __int8 *)(a1 + 610) || BYTE3(v32) != *(unsigned __int8 *)(a1 + 615))
        sub_10035E6F4(a1, "internal write transform logic error");
      if ((*(_BYTE *)(a1 + 976) & 4) == 0 || *(_BYTE *)(a1 + 980) != 64)
        goto LABEL_60;
      v18 = v32;
      if ((v32 & 2) == 0)
        goto LABEL_61;
      v19 = *(_QWORD *)(a1 + 544);
      v20 = v30;
      if (BYTE1(v32) != 16)
      {
        if (BYTE1(v32) == 8)
        {
          if (v32 == 2)
          {
            v21 = 3;
LABEL_52:
            if ((_DWORD)v30)
            {
              v23 = (_BYTE *)(v19 + 3);
              do
              {
                v24 = *(v23 - 1);
                *(v23 - 2) -= v24;
                *v23 -= v24;
                v23 += v21;
                --v20;
              }
              while (v20);
            }
            goto LABEL_60;
          }
          if (v32 == 6)
          {
            v21 = 4;
            goto LABEL_52;
          }
        }
LABEL_60:
        v18 = v32;
LABEL_61:
        if (v18 == 3 && (*(_DWORD *)(a1 + 596) & 0x80000000) == 0)
          sub_10036C5AC(a1, (uint64_t)&v30);
        sub_100371C28(a1, (uint64_t)&v30, *(double *)v9.i64, v10, v11, v12, v13, v14, v15, v16);
        v29 = *(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 768);
        if (v29)
          v29(a1, *(unsigned int *)(a1 + 524), *(unsigned __int8 *)(a1 + 605));
        return;
      }
      if (v32 == 2)
      {
        v22 = 6;
      }
      else
      {
        if (v32 != 6)
          goto LABEL_60;
        v22 = 8;
      }
      if ((_DWORD)v30)
      {
        v25 = (unsigned __int16 *)(v19 + 3);
        do
        {
          v26 = __rev16(*v25);
          v27 = __rev16(*(v25 - 1)) - v26;
          v28 = __rev16(v25[1]) - v26;
          *((_BYTE *)v25 - 2) = BYTE1(v27);
          *((_BYTE *)v25 - 1) = v27;
          *((_BYTE *)v25 + 2) = BYTE1(v28);
          *((_BYTE *)v25 + 3) = v28;
          v25 = (unsigned __int16 *)((char *)v25 + v22);
          --v20;
        }
        while (v20);
      }
      goto LABEL_60;
    }
  }
  if ((*(_BYTE *)(a1 + 300) & 2) == 0)
    goto LABEL_6;
  switch(*(_BYTE *)(a1 + 605))
  {
    case 0:
      if ((*(_BYTE *)(a1 + 524) & 7) == 0)
        goto LABEL_6;
      break;
    case 1:
      if ((*(_BYTE *)(a1 + 524) & 7) == 0 && *(_DWORD *)(a1 + 496) > 4u)
        goto LABEL_6;
      break;
    case 2:
      if ((*(_DWORD *)(a1 + 524) & 7) == 4)
        goto LABEL_6;
      break;
    case 3:
      if ((*(_BYTE *)(a1 + 524) & 3) == 0 && *(_DWORD *)(a1 + 496) > 2u)
        goto LABEL_6;
      break;
    case 4:
      if ((*(_DWORD *)(a1 + 524) & 3) == 2)
        goto LABEL_6;
      break;
    case 5:
      if ((*(_BYTE *)(a1 + 524) & 1) == 0 && *(_DWORD *)(a1 + 496) > 1u)
        goto LABEL_6;
      break;
    case 6:
      if ((*(_BYTE *)(a1 + 524) & 1) != 0)
        goto LABEL_6;
      break;
    default:
      goto LABEL_6;
  }
  sub_100371580(a1);
}

void sub_10036D3FC(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;

  if (a1)
  {
    v4 = sub_10036BF14(a1);
    if (v4 >= 1)
    {
      if (*(_DWORD *)(a1 + 500))
      {
        v5 = v4;
        v6 = 0;
        v7 = 1;
        do
        {
          if (v7)
          {
            v8 = 0;
            do
            {
              sub_10036D098(a1, *(void **)(a2 + 8 * v8));
              v7 = *(_DWORD *)(a1 + 500);
              ++v8;
            }
            while (v8 < v7);
          }
          ++v6;
        }
        while (v6 != v5);
      }
    }
  }
}

uint64_t sub_10036D488(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(_DWORD *)(result + 524) < *(_DWORD *)(result + 504))
    {
      sub_10036EA9C(result, 0, 0, 2);
      *(_DWORD *)(v1 + 660) = 0;
      return sub_10036C848(v1);
    }
  }
  return result;
}

void sub_10036D4E0(uint64_t *a1, void **a2)
{
  uint64_t v3;

  if (a1)
  {
    v3 = *a1;
    if (*a1)
    {
      sub_10035A7F0(*a1, a2);
      *a1 = 0;
      if ((*(_BYTE *)(v3 + 296) & 2) != 0)
        deflateEnd((z_streamp)(v3 + 312));
      sub_10036E554(v3, (_QWORD **)(v3 + 424));
      sub_10035F814(v3, *(void **)(v3 + 544));
      *(_QWORD *)(v3 + 544) = 0;
      sub_10035F814(v3, *(void **)(v3 + 536));
      sub_10035F814(v3, *(void **)(v3 + 552));
      sub_10035F814(v3, *(void **)(v3 + 560));
      *(_QWORD *)(v3 + 536) = 0;
      *(_OWORD *)(v3 + 552) = 0u;
      sub_10035F814(v3, *(void **)(v3 + 960));
      *(_QWORD *)(v3 + 960) = 0;
      sub_10035F77C((void *)v3);
    }
  }
}

uint64_t sub_10036D594(uint64_t result, int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;

  if (result)
  {
    v3 = a3;
    v4 = result;
    v5 = (*(unsigned __int8 *)(result + 976) >> 2) & 1;
    if (a2 != 64)
      v5 = 0;
    if (a2 && !v5)
      sub_10035E6F4(result, "Unknown custom filter method");
    v6 = 8;
    switch((char)a3)
    {
      case 0:
        goto LABEL_16;
      case 1:
        *(_BYTE *)(result + 606) = 16;
        if (!*(_QWORD *)(result + 544))
          goto LABEL_35;
        goto LABEL_17;
      case 2:
        *(_BYTE *)(result + 606) = 32;
        if (!*(_QWORD *)(result + 544))
          goto LABEL_35;
        goto LABEL_17;
      case 3:
        v6 = 64;
LABEL_16:
        *(_BYTE *)(result + 606) = v6;
        if (*(_QWORD *)(result + 544))
          goto LABEL_17;
        goto LABEL_35;
      case 4:
        *(_BYTE *)(result + 606) = 0x80;
        if (!*(_QWORD *)(result + 544))
          goto LABEL_35;
        goto LABEL_17;
      case 5:
      case 6:
      case 7:
        result = sub_10035F048(result, "Unknown row filter for method 0");
        *(_BYTE *)(v4 + 606) = 8;
        if (!*(_QWORD *)(v4 + 544))
          goto LABEL_35;
        goto LABEL_17;
      default:
        *(_BYTE *)(result + 606) = a3;
        if (!*(_QWORD *)(result + 544))
          goto LABEL_35;
LABEL_17:
        if (*(_DWORD *)(v4 + 500) == 1)
          v7 = v3 & 0xFFFFFF1F;
        else
          v7 = v3;
        if (*(_DWORD *)(v4 + 496) == 1)
          v3 = v7 & 0xFFFFFF2F;
        else
          v3 = v7;
        if ((v3 & 0xE0) != 0 && !*(_QWORD *)(v4 + 536))
        {
          result = sub_10035F02C(v4, "png_set_filter: UP/AVG/PAETH cannot be added after start");
          v3 &= 0xFFFFFF1F;
        }
        v8 = ((v3 >> 4) & 1) + ((v3 >> 5) & 1) + ((v3 >> 6) & 1) + ((v3 >> 7) & 1);
        v9 = *(unsigned __int8 *)(v4 + 609) * *(unsigned __int8 *)(v4 + 612);
        v10 = *(_DWORD *)(v4 + 496);
        v11 = v9 >= 8;
        v12 = (v10 * (unint64_t)v9 + 7) >> 3;
        v13 = v10 * (unint64_t)(v9 >> 3);
        if (!v11)
          v13 = v12;
        v14 = v13 + 1;
        if (*(_QWORD *)(v4 + 552))
        {
          if (v8 < 2)
            goto LABEL_35;
        }
        else
        {
          result = (uint64_t)sub_10035F8C8((_QWORD *)v4, v14);
          *(_QWORD *)(v4 + 552) = result;
          if (v8 < 2)
            goto LABEL_35;
        }
        if (!*(_QWORD *)(v4 + 560))
        {
          result = (uint64_t)sub_10035F8C8((_QWORD *)v4, v14);
          *(_QWORD *)(v4 + 560) = result;
        }
LABEL_35:
        *(_BYTE *)(v4 + 606) = v3;
        break;
    }
  }
  return result;
}

uint64_t sub_10036D774(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 436) = a2;
  return result;
}

uint64_t sub_10036D780(uint64_t result, int a2)
{
  if (result)
  {
    *(_DWORD *)(result + 296) |= 1u;
    *(_DWORD *)(result + 452) = a2;
  }
  return result;
}

void sub_10036D798(uint64_t a1, unsigned int *a2, int16x8_t a3)
{
  int v5;
  void (*v6)(uint64_t, unsigned int *, uint64_t);
  _BYTE *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned __int8 v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  size_t v35;
  int v36;
  int v38;
  int v40;
  uint64_t k;
  unsigned __int8 v42;
  unsigned int v43;
  int v44;
  char v45;
  int v46;
  int v47;
  unsigned int i;
  unsigned __int8 v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  BOOL v57;
  int v58;
  unsigned int j;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  uint64_t v70;
  int8x8_t *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  int8x8_t v86;
  int8x8_t v87;
  int8x8_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  int8x16_t v92;
  int8x16_t v93;
  char *v94;
  uint64_t v95;
  int8x8_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  int8x8_t v102;
  int8x8_t v103;
  int8x8_t v104;
  int v105;
  int v106;
  __int8 v107;
  int v108;
  _BYTE *v109;
  _BYTE *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  _BYTE *v116;
  _BYTE *v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  char *v121;
  unsigned __int128 v122;
  int8x16_t v123;
  int v124;
  _BYTE *v125;
  uint64_t v126;
  unint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  char *v130;
  unsigned __int128 v131;
  int8x16_t v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  char *v136;
  int8x8_t v137;
  int8x8_t v138;
  int v139;
  _BYTE *v140;
  int v141;
  _DWORD v142[4];
  _DWORD v143[4];
  int8x8x2_t v144;
  int8x16x2_t v145;
  int8x16x2_t v146;
  int8x8x4_t v147;
  int8x8x4_t v148;
  int8x16x4_t v149;
  int8x16x4_t v150;
  int8x16x4_t v151;
  int8x16x4_t v152;
  int8x16x4_t v153;
  int8x16x4_t v154;

  if (!a1)
    return;
  v5 = *(_DWORD *)(a1 + 300);
  if ((v5 & 0x100000) != 0)
  {
    v6 = *(void (**)(uint64_t, unsigned int *, uint64_t))(a1 + 272);
    if (v6)
    {
      v6(a1, a2, *(_QWORD *)(a1 + 544) + 1);
      v5 = *(_DWORD *)(a1 + 300);
    }
  }
  if ((v5 & 0x8000) == 0)
  {
    if ((v5 & 0x10000) == 0)
      goto LABEL_7;
LABEL_10:
    sub_10036C1B0((uint64_t)a2, (_BYTE *)(*(_QWORD *)(a1 + 544) + 1));
    v5 = *(_DWORD *)(a1 + 300);
    if ((v5 & 4) == 0)
      goto LABEL_46;
    goto LABEL_11;
  }
  sub_10036C22C((uint64_t)a2, (_BYTE *)(*(_QWORD *)(a1 + 544) + 1), ((*(_DWORD *)(a1 + 296) >> 7) & 1) == 0);
  v5 = *(_DWORD *)(a1 + 300);
  if ((v5 & 0x10000) != 0)
    goto LABEL_10;
LABEL_7:
  if ((v5 & 4) == 0)
    goto LABEL_46;
LABEL_11:
  if (*((_BYTE *)a2 + 17) != 8 || *((_BYTE *)a2 + 18) != 1)
    goto LABEL_46;
  v7 = (_BYTE *)(*(_QWORD *)(a1 + 544) + 1);
  v8 = *(unsigned __int8 *)(a1 + 608);
  if (v8 == 4)
  {
    v19 = *a2;
    if (*a2)
    {
      v20 = (_BYTE *)(*(_QWORD *)(a1 + 544) + 1);
      while (v19 != 1)
      {
        *v7++ = v20[1] & 0xF | (16 * *v20);
        v20 += 2;
        v19 -= 2;
        if (!v19)
          goto LABEL_43;
      }
      v13 = 16 * *v20;
      v16 = v7;
      goto LABEL_42;
    }
  }
  else
  {
    if (v8 != 2)
    {
      if (v8 != 1 || !*a2)
        goto LABEL_43;
      v9 = 0;
      v10 = 0;
      v11 = -*a2;
      while (1)
      {
        v12 = &v7[v10];
        v13 = (v7[v10] != 0) << 7;
        if (v11 + (_DWORD)v10 == -1)
          break;
        v13 |= (v12[1] != 0) << 6;
        if (v11 + (_DWORD)v10 == -2)
          break;
        v13 |= 32 * (v12[2] != 0);
        if (v11 + (_DWORD)v10 == -3)
          break;
        v13 |= 16 * (v12[3] != 0);
        if (v11 + (_DWORD)v10 == -4)
          break;
        v13 |= 8 * (v12[4] != 0);
        if (v11 + (_DWORD)v10 == -5)
          break;
        v13 |= 4 * (v12[5] != 0);
        if (v11 + (_DWORD)v10 == -6)
          break;
        v13 |= 2 * (v12[6] != 0);
        if (v11 + (_DWORD)v10 == -7)
          break;
        v7[v9] = v13 | (v12[7] != 0);
        v10 += 8;
        ++v9;
        if (!(v11 + (_DWORD)v10))
          goto LABEL_43;
      }
      v16 = &v7[v9];
      goto LABEL_42;
    }
    if (*a2)
    {
      v14 = 0;
      v15 = -*a2;
      v16 = (_BYTE *)(*(_QWORD *)(a1 + 544) + 1);
      while (1)
      {
        v17 = &v7[v14];
        v18 = v7[v14] << 6;
        if (v15 + (_DWORD)v14 == -1)
          break;
        v18 |= 16 * (v17[1] & 3);
        if (v15 + (_DWORD)v14 == -2)
          break;
        v18 |= 4 * (v17[2] & 3);
        if (v15 + (_DWORD)v14 == -3)
          break;
        *v16++ = v17[3] & 3 | v18;
        v14 += 4;
        if (!(v15 + (_DWORD)v14))
          goto LABEL_43;
      }
      v13 = v18;
LABEL_42:
      *v16 = v13;
    }
  }
LABEL_43:
  *((_BYTE *)a2 + 17) = v8;
  v21 = *((_BYTE *)a2 + 18) * v8;
  *((_BYTE *)a2 + 19) = v21;
  v22 = v21 >= 8u;
  v23 = (*a2 * (unint64_t)v21 + 7) >> 3;
  v24 = *a2 * (unint64_t)(v21 >> 3);
  if (!v22)
    v24 = v23;
  *((_QWORD *)a2 + 1) = v24;
  v5 = *(_DWORD *)(a1 + 300);
LABEL_46:
  if ((v5 & 0x10) != 0)
  {
    sub_10036C0D0((uint64_t)a2, (char *)(*(_QWORD *)(a1 + 544) + 1));
    v5 = *(_DWORD *)(a1 + 300);
  }
  if ((v5 & 8) != 0)
  {
    v25 = *((unsigned __int8 *)a2 + 16);
    if (v25 != 3)
    {
      v26 = *(_QWORD *)(a1 + 544);
      v27 = *((unsigned __int8 *)a2 + 17);
      if ((v25 & 2) != 0)
      {
        v28 = *(unsigned __int8 *)(a1 + 725);
        v31 = *(unsigned __int8 *)(a1 + 726);
        v32 = *(unsigned __int8 *)(a1 + 727);
        v143[1] = v27 - v31;
        v143[2] = v27 - v32;
        v142[1] = v31;
        v142[2] = v32;
        v29 = 3;
        v30 = (unsigned __int8 *)(v26 + 1);
        v143[0] = v27 - v28;
        v142[0] = v28;
        if ((v25 & 4) == 0)
        {
LABEL_55:
          if (v27 > 7)
          {
            v47 = *a2 * v29;
            if (v27 == 8)
            {
              if (v47)
              {
                for (i = 0; i != v47; ++i)
                {
                  v49 = 0;
                  v50 = i % v29;
                  v51 = v143[v50];
                  v52 = v142[v50];
                  if (v51 > -v52)
                  {
                    v49 = 0;
                    v53 = *v30;
                    v54 = -v51;
                    do
                    {
                      v55 = v53 >> v54;
                      v56 = v51 - v52;
                      v54 += v52;
                      v57 = v51 <= 0;
                      if (v51 <= 0)
                        LOBYTE(v58) = v55;
                      else
                        v58 = v53 << v51;
                      v49 |= v58;
                      v51 = v56;
                    }
                    while (!v57);
                  }
                  *v30++ = v49;
                }
              }
            }
            else if (v47)
            {
              for (j = 0; j != v47; ++j)
              {
                v60 = 0;
                v61 = j % v29;
                v62 = v143[v61];
                v63 = v142[v61];
                if (v62 > -v63)
                {
                  v60 = 0;
                  v64 = __rev16(*(unsigned __int16 *)v30);
                  v65 = -v62;
                  do
                  {
                    v66 = v64 >> v65;
                    v67 = v62 - v63;
                    v65 += v63;
                    v68 = v62 <= 0;
                    if (v62 <= 0)
                      v69 = v66;
                    else
                      v69 = v64 << v62;
                    v60 |= v69;
                    v62 = v67;
                  }
                  while (!v68);
                }
                *(_WORD *)v30 = bswap32(v60) >> 16;
                v30 += 2;
              }
            }
          }
          else
          {
            v35 = *((_QWORD *)a2 + 1);
            v36 = *(unsigned __int8 *)(a1 + 728);
            if (v36 == 3 && v27 == 4)
              v38 = 17;
            else
              v38 = 255;
            if (v36 == 1 && v27 == 2)
              v40 = 85;
            else
              v40 = v38;
            if (v35)
            {
              if (v27)
              {
                for (k = 0; k != v35; ++k)
                {
                  v42 = 0;
                  v43 = *v30;
                  v44 = v27;
                  v45 = v28 - v27;
                  do
                  {
                    if (v44 - v28 <= 0)
                      v46 = (v43 >> v45) & v40;
                    else
                      v46 = v43 << (v44 - v28);
                    v42 |= v46;
                    v45 += v28;
                    v44 -= v28;
                  }
                  while (v44 > 0);
                  *v30++ = v42;
                }
              }
              else
              {
                bzero(v30, v35);
              }
            }
          }
          v5 = *(_DWORD *)(a1 + 300);
          goto LABEL_103;
        }
      }
      else
      {
        v28 = *(unsigned __int8 *)(a1 + 728);
        v29 = 1;
        v30 = (unsigned __int8 *)(v26 + 1);
        v143[0] = v27 - v28;
        v142[0] = v28;
        if ((v25 & 4) == 0)
          goto LABEL_55;
      }
      v33 = *(unsigned __int8 *)(a1 + 729);
      v34 = v29;
      v143[v34] = v27 - v33;
      v142[v34] = v33;
      ++v29;
      goto LABEL_55;
    }
  }
LABEL_103:
  if ((v5 & 0x20000) == 0)
    goto LABEL_161;
  v70 = *(_QWORD *)(a1 + 544);
  v71 = (int8x8_t *)(v70 + 1);
  v72 = *((unsigned __int8 *)a2 + 16);
  if (v72 == 4)
  {
    v75 = *a2;
    if (*((_BYTE *)a2 + 17) == 8)
    {
      if (!(_DWORD)v75)
        goto LABEL_161;
      if (v75 < 8)
      {
        LODWORD(v76) = 0;
        goto LABEL_155;
      }
      if (v75 >= 0x20)
      {
        v79 = v75 & 0xFFFFFFE0;
        v89 = (char *)(v70 + 33);
        v90 = v79;
        do
        {
          v91 = v89 - 32;
          v145 = vld2q_s8(v91);
          v146 = vld2q_s8(v89);
          v92 = v145.val[0];
          v93 = v146.val[0];
          vst2q_s8(v91, *(int8x16x2_t *)((char *)&v145 + 16));
          vst2q_s8(v89, *(int8x16x2_t *)((char *)&v146 + 16));
          v89 += 64;
          v90 -= 32;
        }
        while (v90);
        if (v79 == v75)
          goto LABEL_161;
        if ((v75 & 0x18) == 0)
        {
          v71 = (int8x8_t *)((char *)v71 + 2 * v79);
          LODWORD(v76) = v75 & 0xFFFFFFE0;
LABEL_155:
          v106 = v75 - v76;
          do
          {
            v107 = v71->i8[0];
            v71->i8[0] = v71->i8[1];
            v71->i8[1] = v107;
            v71 = (int8x8_t *)((char *)v71 + 2);
            --v106;
          }
          while (v106);
          goto LABEL_161;
        }
      }
      else
      {
        v79 = 0;
      }
      v76 = v75 & 0xFFFFFFF8;
      v71 = (int8x8_t *)((char *)v71 + 2 * v76);
      v94 = (char *)(v70 + 2 * v79 + 1);
      v95 = v79 - v76;
      do
      {
        v144 = vld2_s8(v94);
        v96 = v144.val[0];
        vst2_s8(v94, *(int8x8x2_t *)((char *)&v144 + 8));
        v94 += 16;
        v95 += 8;
      }
      while (v95);
      if (v76 == v75)
        goto LABEL_161;
      goto LABEL_155;
    }
    if (!(_DWORD)v75)
      goto LABEL_161;
    if (v75 < 8)
    {
      LODWORD(v77) = 0;
      goto LABEL_159;
    }
    if (v75 >= 0x20)
    {
      v80 = v75 & 0xFFFFFFE0;
      v97 = (char *)(v70 + 65);
      v98 = v80;
      do
      {
        v99 = v97 - 64;
        v150 = vld4q_s8(v99);
        v152.val[0] = v150.val[2];
        v152.val[1] = v150.val[3];
        v154 = vld4q_s8(v97);
        v152.val[2] = v150.val[0];
        v152.val[3] = v150.val[1];
        a3 = (int16x8_t)v154.val[2];
        v150.val[1] = v154.val[3];
        v150.val[2] = v154.val[0];
        v150.val[3] = v154.val[1];
        vst4q_s8(v99, v152);
        vst4q_s8(v97, *(int8x16x4_t *)a3.i8);
        v97 += 128;
        v98 -= 32;
      }
      while (v98);
      if (v80 == v75)
        goto LABEL_161;
      if ((v75 & 0x18) == 0)
      {
        v71 = (int8x8_t *)((char *)v71 + 4 * v80);
        LODWORD(v77) = v75 & 0xFFFFFFE0;
LABEL_159:
        v108 = v75 - v77;
        do
        {
          a3.i32[0] = v71->i32[0];
          a3 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a3.i8);
          *(int8x8_t *)a3.i8 = vext_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8, 4uLL);
          *(int8x8_t *)a3.i8 = vmovn_s16(a3);
          v71->i32[0] = a3.i32[0];
          v71 = (int8x8_t *)((char *)v71 + 4);
          --v108;
        }
        while (v108);
        goto LABEL_161;
      }
    }
    else
    {
      v80 = 0;
    }
    v77 = v75 & 0xFFFFFFF8;
    v71 = (int8x8_t *)((char *)v71 + 4 * v77);
    v100 = (char *)(v70 + 4 * v80 + 1);
    v101 = v80 - v77;
    do
    {
      *(int8x8x4_t *)a3.i8 = vld4_s8(v100);
      v148.val[0] = v102;
      v148.val[1] = v103;
      v148.val[2] = (int8x8_t)a3.i64[0];
      v148.val[3] = v104;
      vst4_s8(v100, v148);
      v100 += 32;
      v101 += 8;
    }
    while (v101);
    if (v77 == v75)
      goto LABEL_161;
    goto LABEL_159;
  }
  if (v72 == 6)
  {
    v73 = *a2;
    if (*((_BYTE *)a2 + 17) != 8)
    {
      for (; (_DWORD)v73; LODWORD(v73) = v73 - 1)
      {
        *v71 = vext_s8(*v71, *v71, 2uLL);
        ++v71;
      }
      goto LABEL_161;
    }
    if ((_DWORD)v73)
    {
      if (v73 < 8)
      {
        LODWORD(v74) = 0;
        goto LABEL_151;
      }
      if (v73 >= 0x20)
      {
        v78 = v73 & 0xFFFFFFE0;
        v81 = (char *)(v70 + 65);
        v82 = v78;
        do
        {
          v83 = v81 - 64;
          v149 = vld4q_s8(v83);
          v151.val[0] = v149.val[1];
          v151.val[1] = v149.val[2];
          v153 = vld4q_s8(v81);
          v151.val[2] = v149.val[3];
          v151.val[3] = v149.val[0];
          a3 = (int16x8_t)v153.val[1];
          v149.val[1] = v153.val[2];
          v149.val[2] = v153.val[3];
          v149.val[3] = v153.val[0];
          vst4q_s8(v83, v151);
          vst4q_s8(v81, *(int8x16x4_t *)a3.i8);
          v81 += 128;
          v82 -= 32;
        }
        while (v82);
        if (v78 == v73)
          goto LABEL_161;
        if ((v73 & 0x18) == 0)
        {
          v71 = (int8x8_t *)((char *)v71 + 4 * v78);
          LODWORD(v74) = v73 & 0xFFFFFFE0;
LABEL_151:
          v105 = v73 - v74;
          do
          {
            a3.i32[0] = v71->i32[0];
            a3 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a3.i8);
            *(int8x8_t *)a3.i8 = vext_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8, 2uLL);
            *(int8x8_t *)a3.i8 = vmovn_s16(a3);
            v71->i32[0] = a3.i32[0];
            v71 = (int8x8_t *)((char *)v71 + 4);
            --v105;
          }
          while (v105);
          goto LABEL_161;
        }
      }
      else
      {
        v78 = 0;
      }
      v74 = v73 & 0xFFFFFFF8;
      v71 = (int8x8_t *)((char *)v71 + 4 * v74);
      v84 = (char *)(v70 + 4 * v78 + 1);
      v85 = v78 - v74;
      do
      {
        *(int8x8x4_t *)a3.i8 = vld4_s8(v84);
        v147.val[0] = v86;
        v147.val[1] = v87;
        v147.val[2] = v88;
        v147.val[3] = (int8x8_t)a3.i64[0];
        vst4_s8(v84, v147);
        v84 += 32;
        v85 += 8;
      }
      while (v85);
      if (v74 == v73)
        goto LABEL_161;
      goto LABEL_151;
    }
  }
LABEL_161:
  if ((*(_BYTE *)(a1 + 302) & 8) != 0)
  {
    v109 = *(_BYTE **)(a1 + 544);
    v110 = v109 + 1;
    v111 = *((unsigned __int8 *)a2 + 16);
    if (v111 != 4)
    {
      if (v111 == 6)
      {
        v112 = *a2;
        if (*((_BYTE *)a2 + 17) == 8)
        {
          if ((_DWORD)v112)
          {
            if (v112 >= 0x11)
            {
              v118 = v112 & 0xF;
              if ((v112 & 0xF) == 0)
                v118 = 16;
              v113 = v112 - v118;
              v110 += 4 * v113;
              v119 = v109 + 32;
              v120 = v113;
              do
              {
                v121 = v119 - 28;
                v122 = (unsigned __int128)vld4q_s8(v121);
                v123 = vmvnq_s8((int8x16_t)v122);
                *v121 = v123.i8[0];
                *(v119 - 24) = v123.i8[1];
                *(v119 - 20) = v123.i8[2];
                *(v119 - 16) = v123.i8[3];
                *(v119 - 12) = v123.i8[4];
                *(v119 - 8) = v123.i8[5];
                *(v119 - 4) = v123.i8[6];
                *v119 = v123.i8[7];
                v119[4] = v123.i8[8];
                v119[8] = v123.i8[9];
                v119[12] = v123.i8[10];
                v119[16] = v123.i8[11];
                v119[20] = v123.i8[12];
                v119[24] = v123.i8[13];
                v119[28] = v123.i8[14];
                v119[32] = v123.i8[15];
                v119 += 64;
                v120 -= 16;
              }
              while (v120);
            }
            else
            {
              LODWORD(v113) = 0;
            }
            v124 = v112 - v113;
            v125 = v110 + 3;
            do
            {
              *v125 = ~*v125;
              v125 += 4;
              --v124;
            }
            while (v124);
          }
        }
        else if ((_DWORD)v112)
        {
          v116 = v109 + 8;
          do
          {
            *(v116 - 1) = ~*(v116 - 1);
            *v116 = ~*v116;
            v116 += 8;
            LODWORD(v112) = v112 - 1;
          }
          while ((_DWORD)v112);
        }
      }
      goto LABEL_201;
    }
    v114 = *a2;
    if (*((_BYTE *)a2 + 17) != 8)
    {
      if ((_DWORD)v114)
      {
        v117 = v109 + 4;
        do
        {
          *(v117 - 1) = ~*(v117 - 1);
          *v117 = ~*v117;
          v117 += 4;
          LODWORD(v114) = v114 - 1;
        }
        while ((_DWORD)v114);
      }
      goto LABEL_201;
    }
    if ((_DWORD)v114)
    {
      if (v114 < 9)
      {
        v115 = 0;
        goto LABEL_199;
      }
      if (v114 >= 0x11)
      {
        v127 = 16;
        if ((v114 & 0xF) != 0)
          v127 = v114 & 0xF;
        v126 = v114 - v127;
        v128 = v109 + 16;
        v129 = *a2;
        do
        {
          v130 = v128 - 14;
          v131 = (unsigned __int128)vld2q_s8(v130);
          v132 = vmvnq_s8((int8x16_t)v131);
          *v130 = v132.i8[0];
          *(v128 - 12) = v132.i8[1];
          *(v128 - 10) = v132.i8[2];
          *(v128 - 8) = v132.i8[3];
          *(v128 - 6) = v132.i8[4];
          *(v128 - 4) = v132.i8[5];
          *(v128 - 2) = v132.i8[6];
          *v128 = v132.i8[7];
          v128[2] = v132.i8[8];
          v128[4] = v132.i8[9];
          v128[6] = v132.i8[10];
          v128[8] = v132.i8[11];
          v128[10] = v132.i8[12];
          v128[12] = v132.i8[13];
          v128[14] = v132.i8[14];
          v128[16] = v132.i8[15];
          v128 += 32;
          v129 -= 16;
        }
        while (v127 != v129);
        if (v127 < 9)
        {
          v110 += 2 * v126;
          v115 = v114 - v127;
LABEL_199:
          v139 = v114 - v115;
          v140 = v110 + 1;
          do
          {
            *v140 = ~*v140;
            v140 += 2;
            --v139;
          }
          while (v139);
          goto LABEL_201;
        }
      }
      else
      {
        v126 = 0;
      }
      v133 = 8;
      if ((v114 & 7) != 0)
        v133 = v114 & 7;
      v115 = v114 - v133;
      v110 += 2 * (v114 - v133);
      v134 = &v109[2 * v126 + 8];
      v135 = v133 + v126 - v114;
      do
      {
        v136 = v134 - 6;
        v137 = (int8x8_t)*(_OWORD *)vld2_s8(v136).val;
        v138 = vmvn_s8(v137);
        *v136 = v138.i8[0];
        *(v134 - 4) = v138.i8[1];
        *(v134 - 2) = v138.i8[2];
        *v134 = v138.i8[3];
        v134[2] = v138.i8[4];
        v134[4] = v138.i8[5];
        v134[6] = v138.i8[6];
        v134[8] = v138.i8[7];
        v134 += 16;
        v135 += 8;
      }
      while (v135);
      goto LABEL_199;
    }
  }
LABEL_201:
  v141 = *(_DWORD *)(a1 + 300);
  if ((v141 & 1) != 0)
  {
    sub_10036C420(a2, (char *)(*(_QWORD *)(a1 + 544) + 1));
    v141 = *(_DWORD *)(a1 + 300);
  }
  if ((v141 & 0x20) != 0)
    sub_10036BF3C((uint64_t)a2, (int8x16_t *)(*(_QWORD *)(a1 + 544) + 1));
}

_DWORD *sub_10036E350(_DWORD *result, unsigned int a2)
{
  *result = bswap32(a2);
  return result;
}

uint64_t sub_10036E35C(uint64_t a1)
{
  uint64_t result;

  *(_DWORD *)(a1 + 1124) = 18;
  result = sub_10036C7D8(a1);
  if (*(unsigned __int8 *)(a1 + 613) <= 2u)
    *(_DWORD *)(a1 + 292) |= 0x1000u;
  return result;
}

uint64_t sub_10036E3F8(uint64_t a1, unsigned int *a2, Bytef *a3, unint64_t a4)
{
  return sub_10036E404(a1, bswap32(*a2), a3, a4);
}

uint64_t sub_10036E404(uint64_t result, int a2, Bytef *a3, unint64_t a4)
{
  uint64_t v5;
  Bytef v8[4];

  if (result)
  {
    v5 = result;
    if (a4 >> 31)
      sub_10035E6F4(result, "length exceeds PNG maximum");
    *(_DWORD *)(result + 1124) = 34;
    v8[0] = HIBYTE(a2);
    v8[1] = BYTE2(a2);
    v8[2] = BYTE1(a2);
    v8[3] = a2;
    sub_10036C7D8(result);
    *(_DWORD *)(v5 + 528) = a2;
    sub_10035A358(v5);
    sub_10035A388(v5, v8, 4);
    *(_DWORD *)(v5 + 1124) = 66;
    if (a3)
    {
      if (a4)
      {
        sub_10036C7D8(v5);
        sub_10035A388(v5, a3, a4);
      }
    }
    *(_DWORD *)(v5 + 1124) = 130;
    return sub_10036C7D8(v5);
  }
  return result;
}

void sub_10036E554(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  _QWORD *v5;

  v3 = *a2;
  if (v3)
  {
    *a2 = 0;
    do
    {
      v5 = (_QWORD *)*v3;
      sub_10035F814(a1, v3);
      v3 = v5;
    }
    while (v5);
  }
}

uint64_t sub_10036E594(uint64_t a1, unsigned int a2, int a3, unsigned int a4, int a5, int a6, int a7, unsigned int a8)
{
  Bytef v12;
  char v15;
  BOOL v17;
  char v18;
  unint64_t v19;
  uint64_t result;
  char v21;
  Bytef v22[13];

  v12 = a4;
  switch(a5)
  {
    case 0:
      if (a4 > 0x10 || (v15 = 1, ((1 << a4) & 0x10116) == 0))
        sub_10035E6F4(a1, "Invalid bit depth for grayscale image");
      return result;
    case 2:
      v15 = 3;
      if (a4 != 8 && a4 != 16)
        sub_10035E6F4(a1, "Invalid bit depth for RGB image");
      return result;
    case 3:
      if (a4 - 1 >= 8 || ((0x8Bu >> (a4 - 1)) & 1) == 0)
        sub_10035E6F4(a1, "Invalid bit depth for paletted image");
      v15 = 1;
      break;
    case 4:
      v15 = 2;
      if (a4 != 8 && a4 != 16)
        sub_10035E6F4(a1, "Invalid bit depth for grayscale+alpha image");
      return result;
    case 6:
      v15 = 4;
      if (a4 != 8 && a4 != 16)
        sub_10035E6F4(a1, "Invalid bit depth for RGBA image");
      return result;
    default:
      sub_10035E6F4(a1, "Invalid image color type specified");
  }
  *(_BYTE *)(a1 + 611) = v15;
  if (a6)
    sub_10035E924(a1, (uint64_t)"Invalid compression type specified");
  if ((*(_BYTE *)(a1 + 976) & 4) == 0 || (*(_BYTE *)(a1 + 293) & 0x10) != 0)
  {
    if (!a7)
      goto LABEL_31;
    goto LABEL_30;
  }
  v17 = (a5 & 0xFFFFFFFB) != 2 || a7 != 64;
  if (a7 && v17)
  {
LABEL_30:
    sub_10035E924(a1, (uint64_t)"Invalid filter type specified");
    LOBYTE(a7) = 0;
  }
LABEL_31:
  if (a8 >= 2)
  {
    sub_10035E924(a1, (uint64_t)"Invalid interlace type specified");
    LOBYTE(a8) = 1;
  }
  *(_BYTE *)(a1 + 608) = v12;
  *(_BYTE *)(a1 + 607) = a5;
  *(_BYTE *)(a1 + 604) = a8;
  *(_BYTE *)(a1 + 980) = a7;
  *(_BYTE *)(a1 + 1040) = 0;
  *(_DWORD *)(a1 + 496) = a2;
  *(_DWORD *)(a1 + 500) = a3;
  v18 = *(_BYTE *)(a1 + 611);
  *(_BYTE *)(a1 + 610) = v18 * v12;
  v19 = a2 * (unint64_t)((v18 * v12) >> 3);
  if ((v18 * v12) < 8u)
    v19 = ((v18 * v12) * (unint64_t)a2 + 7) >> 3;
  *(_QWORD *)(a1 + 512) = v19;
  *(_DWORD *)(a1 + 508) = a2;
  *(_BYTE *)(a1 + 609) = v12;
  *(_BYTE *)(a1 + 612) = v18;
  v22[0] = HIBYTE(a2);
  v22[1] = BYTE2(a2);
  v22[2] = BYTE1(a2);
  v22[3] = a2;
  v22[4] = HIBYTE(a3);
  v22[5] = BYTE2(a3);
  v22[6] = BYTE1(a3);
  v22[7] = a3;
  v22[8] = v12;
  v22[9] = a5;
  v22[10] = 0;
  v22[11] = a7;
  v22[12] = a8;
  result = sub_10036E404(a1, 1229472850, v22, 0xDuLL);
  if (!*(_BYTE *)(a1 + 606))
  {
    v21 = 8;
    if (*(_BYTE *)(a1 + 607) != 3)
    {
      if (*(unsigned __int8 *)(a1 + 608) < 8u)
        v21 = 8;
      else
        v21 = -8;
    }
    *(_BYTE *)(a1 + 606) = v21;
  }
  *(_DWORD *)(a1 + 292) = 1;
  return result;
}

uint64_t sub_10036E884(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  int v6;
  BOOL v7;
  const char *v8;
  uint64_t result;
  Bytef buf;
  __int16 v11;
  unsigned int v12;
  int v13;

  v3 = a3;
  v6 = *(unsigned __int8 *)(a1 + 607);
  if (v6 == 3)
  {
    if (*(_DWORD *)(a1 + 976) & 1 | a3)
      v7 = 1 << *(_BYTE *)(a1 + 608) >= a3;
    else
      v7 = 0;
    if (!v7)
      sub_10035E6F4(a1, "Invalid number of colors in palette");
    goto LABEL_12;
  }
  if (a3 > 0x100 || !(*(_DWORD *)(a1 + 976) & 1 | a3))
  {
    v8 = "Invalid number of colors in palette";
    return sub_10035E924(a1, (uint64_t)v8);
  }
  if ((v6 & 2) == 0)
  {
    v8 = "Ignoring request to write a PLTE chunk in grayscale PNG";
    return sub_10035E924(a1, (uint64_t)v8);
  }
LABEL_12:
  *(_WORD *)(a1 + 592) = a3;
  *(_DWORD *)(a1 + 1124) = 34;
  LOBYTE(v12) = (3 * a3) >> 24;
  BYTE1(v12) = (3 * a3) >> 16;
  BYTE2(v12) = (unsigned __int16)(3 * a3) >> 8;
  HIBYTE(v12) = 3 * a3;
  v13 = 1163152464;
  sub_10036C7D8(a1);
  *(_DWORD *)(a1 + 528) = 1347179589;
  sub_10035A358(a1);
  sub_10035A388(a1, (Bytef *)&v13, 4);
  for (*(_DWORD *)(a1 + 1124) = 66; v3; --v3)
  {
    buf = *(_BYTE *)a2;
    v11 = *(_WORD *)(a2 + 1);
    sub_10036C7D8(a1);
    sub_10035A388(a1, &buf, 3);
    a2 += 3;
  }
  *(_DWORD *)(a1 + 1124) = 130;
  v12 = bswap32(*(_DWORD *)(a1 + 580));
  result = sub_10036C7D8(a1);
  *(_DWORD *)(a1 + 292) |= 2u;
  return result;
}

unint64_t sub_10036EA9C(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  _QWORD **v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t result;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  char v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  char v34;
  int v35;

  if (*(_DWORD *)(a1 + 304) != 1229209940)
  {
    v8 = *(_QWORD ***)(a1 + 424);
    if (v8)
    {
      v9 = *v8;
      if (*v8)
      {
        *v8 = 0;
        do
        {
          v10 = (_QWORD *)*v9;
          sub_10035F814(a1, v9);
          v9 = v10;
        }
        while (v10);
      }
    }
    else
    {
      v11 = sub_10035F8C8((_QWORD *)a1, *(unsigned int *)(a1 + 432) + 8);
      *(_QWORD *)(a1 + 424) = v11;
      *v11 = 0;
    }
    v12 = sub_10036F0D8(a1);
    if (sub_10036EE30(a1, 1229209940, v12))
LABEL_59:
      sub_10035E6F4(a1, *(const char **)(a1 + 360));
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a1 + 424) + 8;
    *(_DWORD *)(a1 + 344) = *(_DWORD *)(a1 + 432);
  }
  *(_QWORD *)(a1 + 312) = a2;
  while (1)
  {
    do
    {
      v13 = a3 >= 0xFFFFFFFF ? 0xFFFFFFFFLL : a3;
      *(_DWORD *)(a1 + 320) = v13;
      v14 = a3 - v13;
      v15 = HIDWORD(a3) ? 0 : a4;
      result = deflate((z_streamp)(a1 + 312), v15);
      v17 = result;
      a3 = v14 + *(unsigned int *)(a1 + 320);
      *(_DWORD *)(a1 + 320) = 0;
      LODWORD(v14) = *(_DWORD *)(a1 + 344);
      if ((_DWORD)v14)
        break;
      v18 = *(_QWORD *)(a1 + 424);
      v19 = (_BYTE *)(v18 + 8);
      v14 = *(unsigned int *)(a1 + 432);
      if ((*(_BYTE *)(a1 + 292) & 4) != 0
        || *(_BYTE *)(a1 + 1040)
        || (result = sub_10036F0D8(a1), result > 0x4000)
        || (v20 = *v19, (v20 & 0xF) != 8)
        || ((v21 = v20 >> 4, v22 = 128 << (*v19 >> 4), (v20 & 0xF0) <= 0x70) ? (v23 = result > v22) : (v23 = 1), v23))
      {
        if (!(_DWORD)v14)
          goto LABEL_32;
      }
      else
      {
        v24 = ((v21 & 0xF) << 12) | 0x800;
        v25 = (v20 & 0xF0) + 8;
        v26 = v21 - 1;
        do
        {
          v24 -= 4096;
          v25 -= 16;
          v27 = v26-- != 0;
          if (!v27)
            break;
          v22 = v22 >> 1;
        }
        while (result <= v22);
        *(_BYTE *)(v18 + 8) = v25;
        *(_BYTE *)(v18 + 9) = (*(_BYTE *)(v18 + 9) & 0xE0 | ((*(_BYTE *)(v18 + 9) & 0xE0)
                                                           - 31 * (((*(_BYTE *)(v18 + 9) & 0xE0u) + v24) / 0x1F))) ^ 0x1F;
        if (!(_DWORD)v14)
          goto LABEL_32;
      }
      result = sub_10036E404(a1, 1229209940, (Bytef *)(v18 + 8), v14);
LABEL_32:
      *(_DWORD *)(a1 + 292) |= 4u;
      *(_QWORD *)(a1 + 336) = v19;
      *(_DWORD *)(a1 + 344) = v14;
    }
    while (a4 && !v17);
    if (v17)
      break;
    if (!a3)
    {
      if (a4 == 4)
        sub_10035E6F4(a1, "Z_OK on Z_FINISH with output space");
      return result;
    }
  }
  if (a4 != 4 || v17 != 1)
  {
    sub_10035AD8C(a1, v17);
    goto LABEL_59;
  }
  v28 = *(_QWORD *)(a1 + 424);
  v29 = *(_DWORD *)(a1 + 432);
  if ((*(_BYTE *)(a1 + 292) & 4) == 0 && !*(_BYTE *)(a1 + 1040))
  {
    result = sub_10036F0D8(a1);
    if (result <= 0x4000)
    {
      v30 = *(unsigned __int8 *)(v28 + 8);
      if ((v30 & 0xF) == 8 && (v30 & 0xF0) <= 0x70)
      {
        v31 = v30 >> 4;
        v32 = 128 << (*(_BYTE *)(v28 + 8) >> 4);
        if (result <= v32)
        {
          v33 = ((v31 & 0xF) << 12) | 0x800;
          v34 = (v30 & 0xF0) + 8;
          v35 = v31 - 1;
          do
          {
            v33 -= 4096;
            v34 -= 16;
            v27 = v35-- != 0;
            if (!v27)
              break;
            v32 = v32 >> 1;
          }
          while (result <= v32);
          *(_BYTE *)(v28 + 8) = v34;
          *(_BYTE *)(v28 + 9) = (*(_BYTE *)(v28 + 9) & 0xE0 | ((*(_BYTE *)(v28 + 9) & 0xE0)
                                                             - 31 * (((*(_BYTE *)(v28 + 9) & 0xE0u) + v33) / 0x1F))) ^ 0x1F;
        }
      }
    }
  }
  if (v29 != (_DWORD)v14)
    result = sub_10036E404(a1, 1229209940, (Bytef *)(v28 + 8), (v29 - v14));
  *(_DWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 292) |= 0xCu;
  *(_DWORD *)(a1 + 304) = 0;
  return result;
}

uint64_t sub_10036EE30(uint64_t a1, int a2, unint64_t a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  z_stream *v15;
  _BYTE v17[4];
  __int16 v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v6 = *(_DWORD *)(a1 + 304);
  if (!v6)
  {
LABEL_5:
    if (a2 == 1229209940)
    {
      v8 = *(_DWORD *)(a1 + 436);
      v9 = *(_DWORD *)(a1 + 440);
      v10 = *(_DWORD *)(a1 + 444);
      v11 = *(_DWORD *)(a1 + 448);
      if ((*(_BYTE *)(a1 + 296) & 1) != 0)
      {
        v12 = *(_DWORD *)(a1 + 452);
        if (a3 > 0x4000)
          goto LABEL_14;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a1 + 606) != 8;
        if (a3 > 0x4000)
          goto LABEL_14;
      }
    }
    else
    {
      v8 = *(_DWORD *)(a1 + 456);
      v9 = *(_DWORD *)(a1 + 460);
      v10 = *(_DWORD *)(a1 + 464);
      v11 = *(_DWORD *)(a1 + 468);
      v12 = *(_DWORD *)(a1 + 472);
      if (a3 > 0x4000)
        goto LABEL_14;
    }
    v13 = (1 << (v10 - 1));
    if (a3 + 262 <= v13)
    {
      do
      {
        LODWORD(v13) = v13 >> 1;
        --v10;
      }
      while (v13 >= (int)a3 + 262);
    }
LABEL_14:
    v14 = *(_DWORD *)(a1 + 296);
    if ((v14 & 2) != 0
      && (*(_DWORD *)(a1 + 476) != v8
       || *(_DWORD *)(a1 + 480) != v9
       || *(_DWORD *)(a1 + 484) != v10
       || *(_DWORD *)(a1 + 488) != v11
       || *(_DWORD *)(a1 + 492) != v12))
    {
      if (deflateEnd((z_streamp)(a1 + 312)))
        sub_10035E924(a1, (uint64_t)"deflateEnd failed (ignored)");
      v14 = *(_DWORD *)(a1 + 296) & 0xFFFFFFFD;
      *(_DWORD *)(a1 + 296) = v14;
    }
    v15 = (z_stream *)(a1 + 312);
    *(_QWORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 344) = 0;
    if ((v14 & 2) != 0)
    {
      v7 = deflateReset(v15);
      if (!(_DWORD)v7)
        goto LABEL_29;
    }
    else
    {
      v7 = deflateInit2_(v15, v8, v9, v10, v11, v12, "1.2.12", 112);
      if (!(_DWORD)v7)
      {
        *(_DWORD *)(a1 + 296) |= 2u;
LABEL_29:
        v7 = 0;
        *(_DWORD *)(a1 + 304) = a2;
        return v7;
      }
    }
    sub_10035AD8C(a1, v7);
    return v7;
  }
  v17[0] = HIBYTE(a2);
  v17[1] = BYTE2(a2);
  v17[2] = BYTE1(a2);
  v17[3] = a2;
  v18 = 8250;
  v19 = HIBYTE(v6);
  v20 = BYTE2(v6);
  v21 = BYTE1(v6);
  v22 = v6;
  sub_10035E784((uint64_t)v17, 0x40uLL, 0xAuLL, " using zstream");
  sub_10035E924(a1, (uint64_t)v17);
  if (*(_DWORD *)(a1 + 304) != 1229209940)
  {
    *(_DWORD *)(a1 + 304) = 0;
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + 360) = "in use by IDAT";
  return 4294967294;
}

unint64_t sub_10036F0D8(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  unint64_t result;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(unsigned int *)(a1 + 500);
  v2 = *(_QWORD *)(a1 + 512);
  if (v2 >> 15)
    v3 = 0;
  else
    v3 = v1 >> 15 == 0;
  if (!v3)
    return 0xFFFFFFFFLL;
  if (!*(_BYTE *)(a1 + 604))
    return v1 + v1 * v2;
  v5 = *(unsigned int *)(a1 + 496);
  v6 = v5 + 7;
  if (*(unsigned __int8 *)(a1 + 610) > 7u)
  {
    v7 = *(_BYTE *)(a1 + 610) >> 3;
    if (v6 >= 8)
    {
      result = ((v1 + 7) >> 3) + ((v1 + 7) >> 3) * (*(_BYTE *)(a1 + 610) >> 3) * (unint64_t)(v6 >> 3);
      v8 = v5 + 3;
      if ((v5 + 3) >= 8)
        goto LABEL_10;
    }
    else
    {
      result = 0;
      v8 = v5 + 3;
      if ((v5 + 3) >= 8)
      {
LABEL_10:
        result += ((v1 + 7) >> 3) + ((v1 + 7) >> 3) * v7 * (unint64_t)(v8 >> 3);
LABEL_17:
        result += ((v1 + 3) >> 3) + ((v1 + 3) >> 3) * v7 * (unint64_t)(v8 >> 2);
LABEL_18:
        v11 = v5 + 1;
        if ((v5 + 1) >= 4)
        {
          result += ((v1 + 3) >> 2) + ((v1 + 3) >> 2) * v7 * (unint64_t)(v11 >> 2);
        }
        else if (v11 < 2)
        {
          if (v5 < 2)
            goto LABEL_21;
          goto LABEL_33;
        }
        result += ((v1 + 1) >> 2) + ((v1 + 1) >> 2) * v7 * (unint64_t)(v11 >> 1);
        if (v5 < 2)
        {
LABEL_21:
          if (!(_DWORD)v5)
            return result;
LABEL_34:
          result += (v1 >> 1) + (v1 >> 1) * v5 * (unint64_t)v7;
          return result;
        }
LABEL_33:
        result += ((v1 + 1) >> 1) + ((v1 + 1) >> 1) * (v5 >> 1) * (unint64_t)v7;
        goto LABEL_34;
      }
    }
    if (v8 < 4)
      goto LABEL_18;
    goto LABEL_17;
  }
  v9 = *(unsigned __int8 *)(a1 + 610);
  if (v6 >= 8)
  {
    result = ((v1 + 7) >> 3)
           + ((v1 + 7) >> 3) * ((*(unsigned __int8 *)(a1 + 610) * (unint64_t)(v6 >> 3) + 7) >> 3);
    v10 = v5 + 3;
    if ((v5 + 3) >= 8)
      goto LABEL_14;
LABEL_24:
    if (v10 < 4)
      goto LABEL_26;
    goto LABEL_25;
  }
  result = 0;
  v10 = v5 + 3;
  if ((v5 + 3) < 8)
    goto LABEL_24;
LABEL_14:
  result += ((v1 + 7) >> 3) + ((v1 + 7) >> 3) * ((v9 * (unint64_t)(v10 >> 3) + 7) >> 3);
LABEL_25:
  result += ((v1 + 3) >> 3)
          + ((v1 + 3) >> 3) * ((v9 * (unint64_t)(v10 >> 2) + 7) >> 3);
LABEL_26:
  v12 = v5 + 1;
  if ((v5 + 1) >= 4)
  {
    result += ((v1 + 3) >> 2)
            + ((v1 + 3) >> 2) * ((v9 * (unint64_t)(v12 >> 2) + 7) >> 3);
  }
  else if (v12 < 2)
  {
    if (v5 < 2)
      goto LABEL_29;
LABEL_37:
    result += ((v1 + 1) >> 1)
            + ((v1 + 1) >> 1) * (((v5 >> 1) * (unint64_t)v9 + 7) >> 3);
    goto LABEL_38;
  }
  result += ((v1 + 1) >> 2)
          + ((v1 + 1) >> 2) * ((v9 * (unint64_t)(v12 >> 1) + 7) >> 3);
  if (v5 >= 2)
    goto LABEL_37;
LABEL_29:
  if ((_DWORD)v5)
LABEL_38:
    result += (v1 >> 1) + (v1 >> 1) * ((v5 * (unint64_t)v9 + 7) >> 3);
  return result;
}

uint64_t sub_10036F360(uint64_t result)
{
  _DWORD *v1;
  int v2;

  v1 = (_DWORD *)result;
  if (result)
  {
    *(_DWORD *)(result + 1124) = 34;
    v2 = 1145980233;
    sub_10036C7D8(result);
    v1[132] = 1229278788;
    sub_10035A358((uint64_t)v1);
    sub_10035A388((uint64_t)v1, (Bytef *)&v2, 4);
    v1[281] = 130;
    result = sub_10036C7D8((uint64_t)v1);
  }
  v1[73] |= 0x10u;
  return result;
}

uint64_t sub_10036F438(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  v3 = bswap32(a2);
  return sub_10036E404(a1, 1732332865, (Bytef *)&v3, 4uLL);
}

uint64_t sub_10036F46C(uint64_t a1, int a2)
{
  Bytef v2;
  Bytef v5;

  v2 = a2;
  if (a2 >= 4)
    sub_10035E924(a1, (uint64_t)"Invalid sRGB rendering intent specified");
  v5 = v2;
  return sub_10036E404(a1, 1934772034, &v5, 1uLL);
}

uint64_t sub_10036F4C8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  unsigned int v11;
  Bytef *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  unsigned int v17;
  _QWORD *v18;
  unsigned int v19;
  BOOL v20;
  _QWORD v21[131];
  Bytef buf[81];
  unsigned int v23;
  int v24;

  if (!a3)
    sub_10035E6F4(a1, "No profile for iCCP chunk");
  v5 = _byteswap_ulong(*(_DWORD *)a3);
  if (v5 <= 0x83)
    sub_10035E6F4(a1, "ICC profile too short");
  if ((*(_BYTE *)(a3 + 3) & 3) != 0 && *(unsigned __int8 *)(a3 + 8) >= 4u)
    sub_10035E6F4(a1, "ICC profile length invalid (not a multiple of 4)");
  memset(&v21[2], 0, 496);
  v7 = sub_10036BD0C(a1, a2, buf);
  if (!v7)
    sub_10035E6F4(a1, "iCCP: invalid keyword");
  buf[v7 + 1] = 0;
  v8 = (v7 + 2);
  v21[0] = a3;
  v21[1] = v5;
  LODWORD(v21[2]) = 0;
  result = sub_10036F7E0(a1, 1766015824, (uint64_t)v21, v8);
  if ((_DWORD)result)
    sub_10035E6F4(a1, *(const char **)(a1 + 360));
  v10 = v21[2];
  if (a1)
  {
    *(_DWORD *)(a1 + 1124) = 34;
    LOBYTE(v23) = (v10 + v8) >> 24;
    BYTE1(v23) = (v10 + v8) >> 16;
    BYTE2(v23) = (unsigned __int16)(v10 + v8) >> 8;
    HIBYTE(v23) = v10 + v8;
    v24 = 1346585449;
    sub_10036C7D8(a1);
    *(_DWORD *)(a1 + 528) = 1766015824;
    sub_10035A358(a1);
    result = sub_10035A388(a1, (Bytef *)&v24, 4);
    *(_DWORD *)(a1 + 1124) = 66;
    if ((_DWORD)v8)
    {
      sub_10036C7D8(a1);
      result = sub_10035A388(a1, buf, v8);
    }
    v11 = v21[2];
    v12 = (Bytef *)&v21[2] + 4;
    v13 = *(_QWORD **)(a1 + 424);
    if (LODWORD(v21[2]) <= 0x400)
      v14 = LODWORD(v21[2]);
    else
      v14 = 1024;
    if ((_DWORD)v14)
    {
LABEL_16:
      sub_10036C7D8(a1);
      result = sub_10035A388(a1, v12, v14);
    }
    while (1)
    {
      v11 -= v14;
      v15 = v11 == 0;
      if (!v11 || v13 == 0)
        break;
      v17 = *(_DWORD *)(a1 + 432);
      v12 = (Bytef *)(v13 + 1);
      v13 = (_QWORD *)*v13;
      if (v17 >= v11)
        v14 = v11;
      else
        v14 = v17;
      if ((_DWORD)v14)
        goto LABEL_16;
    }
  }
  else
  {
    if (LODWORD(v21[2]) < 0x401 || (v18 = (_QWORD *)MEMORY[0x1A8]) == 0)
    {
      if (LODWORD(v21[2]) <= 0x400)
        return result;
LABEL_48:
      sub_10035E6F4(a1, "error writing ancillary chunked compressed data");
    }
    v19 = LODWORD(v21[2]) - 1024;
    do
    {
      v20 = v19 > MEMORY[0x1B0];
      if (v19 >= MEMORY[0x1B0])
        v19 -= MEMORY[0x1B0];
      else
        v19 = 0;
      v15 = !v20;
      if (!v20)
        break;
      v18 = (_QWORD *)*v18;
    }
    while (v18);
  }
  if (!v15)
    goto LABEL_48;
  if (a1)
  {
    *(_DWORD *)(a1 + 1124) = 130;
    v23 = bswap32(*(_DWORD *)(a1 + 580));
    return sub_10036C7D8(a1);
  }
  return result;
}

uint64_t sub_10036F7E0(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  _QWORD **v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v21;
  char v22;
  int v23;

  v7 = sub_10036EE30(a1, a2, *(_QWORD *)(a3 + 8));
  if (!(_DWORD)v7)
  {
    v8 = (_QWORD **)(a1 + 424);
    v9 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 336) = a3 + 20;
    v10 = 1024;
    *(_DWORD *)(a1 + 344) = 1024;
    do
    {
      if (v9 >= 0xFFFFFFFF)
        v13 = 0xFFFFFFFFLL;
      else
        v13 = v9;
      v9 -= v13;
      *(_DWORD *)(a1 + 320) = v13;
      if (!*(_DWORD *)(a1 + 344))
      {
        if (v10 + a4 < 0)
          goto LABEL_13;
        v14 = *v8;
        if (!*v8)
        {
          v14 = sub_10035F91C(a1, *(unsigned int *)(a1 + 432) + 8);
          if (!v14)
          {
LABEL_13:
            v7 = 4294967292;
            goto LABEL_15;
          }
          *v14 = 0;
          *v8 = v14;
        }
        *(_QWORD *)(a1 + 336) = v14 + 1;
        v11 = *(_DWORD *)(a1 + 432);
        *(_DWORD *)(a1 + 344) = v11;
        v10 += v11;
        v8 = (_QWORD **)v14;
      }
      v12 = deflate((z_streamp)(a1 + 312), 4 * (v9 == 0));
      v9 += *(unsigned int *)(a1 + 320);
      *(_DWORD *)(a1 + 320) = 0;
    }
    while (!(_DWORD)v12);
    v7 = v12;
LABEL_15:
    v15 = v10 - *(_DWORD *)(a1 + 344);
    *(_DWORD *)(a1 + 344) = 0;
    *(_DWORD *)(a3 + 16) = v15;
    if ((v15 + a4) >= 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + 360) = "compressed data too long";
      *(_DWORD *)(a1 + 304) = 0;
      return 4294967292;
    }
    sub_10035AD8C(a1, v7);
    *(_DWORD *)(a1 + 304) = 0;
    if ((_DWORD)v7 == 1 && !v9)
    {
      v16 = *(_QWORD *)(a3 + 8);
      if (v16 > 0x4000)
        return 0;
      v7 = 0;
      v17 = *(unsigned __int8 *)(a3 + 20);
      if ((v17 & 0xF) == 8 && (v17 & 0xF0) <= 0x70)
      {
        v18 = v17 >> 4;
        v19 = 128 << (*(_BYTE *)(a3 + 20) >> 4);
        if (v16 > v19)
          return 0;
        v21 = ((v18 & 0xF) << 12) | 0x800;
        v22 = (v17 & 0xF0) + 8;
        v23 = v18 - 1;
        do
        {
          v21 -= 4096;
          v22 -= 16;
          if (v23-- == 0)
            break;
          v19 = v19 >> 1;
        }
        while (v16 <= v19);
        v7 = 0;
        *(_BYTE *)(a3 + 20) = v22;
        *(_BYTE *)(a3 + 21) = (*(_BYTE *)(a3 + 21) & 0xE0 | ((*(_BYTE *)(a3 + 21) & 0xE0)
                                                           - 31 * (((*(_BYTE *)(a3 + 21) & 0xE0u) + v21) / 0x1F))) ^ 0x1F;
      }
    }
  }
  return v7;
}

uint64_t sub_10036FA08(uint64_t a1, uint64_t a2)
{
  Bytef *v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  int16x8_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 v13;
  Bytef *v14;
  int *v15;
  _BYTE *v16;
  unsigned __int16 v17;
  unsigned __int16 *v18;
  int v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  Bytef v22[4];
  int v23;
  _WORD v24[2];
  Bytef buf[80];

  v4 = (Bytef *)(a2 + 8);
  if (*(_BYTE *)(a2 + 8) == 8)
    v5 = 6;
  else
    v5 = 10;
  v6 = *(_DWORD *)(a2 + 24);
  result = sub_10036BD0C(a1, *(unsigned __int8 **)a2, buf);
  if (!(_DWORD)result)
    sub_10035E6F4(a1, "sPLT: invalid keyword");
  if (!a1)
  {
    v19 = *(_DWORD *)(a2 + 24);
    if (v19 > 0)
    {
      v20 = *(unsigned __int16 **)(a2 + 16);
      v21 = &v20[5 * v19];
      if (*(_BYTE *)(a2 + 8) == 8)
      {
        do
        {
          v8.i64[0] = *(_QWORD *)v20;
          *(_DWORD *)v22 = vmovn_s16(v8).u32[0];
          LOWORD(v23) = bswap32(v20[4]) >> 16;
          v20 += 5;
        }
        while (v20 < v21);
      }
      else
      {
        do
        {
          *(_WORD *)v22 = bswap32(*v20) >> 16;
          *(_WORD *)&v22[2] = bswap32(v20[1]) >> 16;
          LOWORD(v23) = bswap32(v20[2]) >> 16;
          HIWORD(v23) = bswap32(v20[3]) >> 16;
          v24[0] = bswap32(v20[4]) >> 16;
          v20 += 5;
        }
        while (v20 < v21);
      }
    }
LABEL_19:
    if (!a1)
      return result;
    goto LABEL_20;
  }
  v9 = result;
  *(_DWORD *)(a1 + 1124) = 34;
  v22[0] = (result + v6 * v5 + 2) >> 24;
  v22[1] = (result + v6 * v5 + 2) >> 16;
  v22[2] = (unsigned __int16)(result + v6 * v5 + 2) >> 8;
  v22[3] = result + v6 * v5 + 2;
  v23 = 1414287475;
  sub_10036C7D8(a1);
  *(_DWORD *)(a1 + 528) = 1934642260;
  sub_10035A358(a1);
  sub_10035A388(a1, (Bytef *)&v23, 4);
  *(_DWORD *)(a1 + 1124) = 66;
  v10 = __CFADD__(v9, 1);
  v11 = (v9 + 1);
  if (!v10)
  {
    sub_10036C7D8(a1);
    sub_10035A388(a1, buf, v11);
  }
  sub_10036C7D8(a1);
  sub_10035A388(a1, v4, 1);
  if (*(int *)(a2 + 24) > 0)
  {
    v12 = (unsigned __int16 *)(*(_QWORD *)(a2 + 16) + 4);
    do
    {
      v18 = v12 - 2;
      if (*v4 == 8)
      {
        v22[0] = *(v12 - 2);
        v22[1] = *((_BYTE *)v12 - 2);
        v22[2] = *(_BYTE *)v12;
        v13 = v12[1];
        v15 = &v23;
        v14 = &v22[3];
        v16 = (char *)&v23 + 1;
      }
      else
      {
        *(_WORD *)v22 = __rev16(*(v12 - 2));
        *(_WORD *)&v22[2] = bswap32(*(v12 - 1)) >> 16;
        LOWORD(v23) = bswap32(*v12) >> 16;
        v13 = v12[1];
        BYTE2(v23) = HIBYTE(v13);
        v14 = (Bytef *)&v23 + 3;
        v15 = (int *)v24;
        v16 = (char *)v24 + 1;
      }
      *v14 = v13;
      v17 = v12[2];
      *(_BYTE *)v15 = HIBYTE(v17);
      *v16 = v17;
      sub_10036C7D8(a1);
      result = sub_10035A388(a1, v22, v5);
      v12 += 5;
    }
    while ((unint64_t)(v18 + 5) < *(_QWORD *)(a2 + 16) + 10 * *(int *)(a2 + 24));
    goto LABEL_19;
  }
LABEL_20:
  *(_DWORD *)(a1 + 1124) = 130;
  return sub_10036C7D8(a1);
}

uint64_t sub_10036FD60(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  Bytef v12[4];

  if ((a3 & 2) == 0)
  {
    if (!a2[3] || a2[3] > *(unsigned __int8 *)(a1 + 609))
      return sub_10035E924(a1, (uint64_t)"Invalid sBIT depth specified");
    v12[0] = a2[3];
    v3 = 1;
    if ((a3 & 4) == 0)
      return sub_10036E404(a1, 1933723988, v12, v3);
LABEL_22:
    v10 = a2[4];
    if (!a2[4] || v10 > *(unsigned __int8 *)(a1 + 609))
      return sub_10035E924(a1, (uint64_t)"Invalid sBIT depth specified");
    v12[v3++] = v10;
    return sub_10036E404(a1, 1933723988, v12, v3);
  }
  if (a3 == 3)
  {
    v4 = 8;
    v5 = *a2;
    if (*a2)
      v6 = v5 <= 8;
    else
      v6 = 0;
    if (!v6)
      return sub_10035E924(a1, (uint64_t)"Invalid sBIT depth specified");
  }
  else
  {
    v4 = *(unsigned __int8 *)(a1 + 609);
    v5 = *a2;
    if (*a2)
      v7 = v4 >= v5;
    else
      v7 = 0;
    if (!v7)
      return sub_10035E924(a1, (uint64_t)"Invalid sBIT depth specified");
  }
  v8 = a2[1];
  if (!a2[1])
    return sub_10035E924(a1, (uint64_t)"Invalid sBIT depth specified");
  if (v4 < v8)
    return sub_10035E924(a1, (uint64_t)"Invalid sBIT depth specified");
  v9 = a2[2];
  if (!a2[2] || v4 < v9)
    return sub_10035E924(a1, (uint64_t)"Invalid sBIT depth specified");
  v12[0] = v5;
  v12[1] = v8;
  v3 = 3;
  v12[2] = v9;
  if ((a3 & 4) != 0)
    goto LABEL_22;
  return sub_10036E404(a1, 1933723988, v12, v3);
}

uint64_t sub_10036FE4C(uint64_t a1, unsigned int *a2)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  sub_10035ACD8(&v5, a2[6]);
  sub_10035ACD8(&v6, a2[7]);
  sub_10035ACD8(&v7, *a2);
  sub_10035ACD8(&v8, a2[1]);
  sub_10035ACD8(&v9, a2[2]);
  sub_10035ACD8(&v10, a2[3]);
  sub_10035ACD8(&v11, a2[4]);
  sub_10035ACD8(&v12, a2[5]);
  return sub_10036E404(a1, 1665684045, (Bytef *)&v5, 0x20uLL);
}

uint64_t sub_10036FF24(uint64_t a1, Bytef *a2, unsigned __int16 *a3, int a4, int a5)
{
  const char *v5;
  signed int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _WORD v15[3];

  if (a5)
  {
    if (a5 == 2)
    {
      v7 = a3[1];
      v8 = v7 >> 8;
      v15[0] = __rev16(v7);
      v9 = a3[2];
      v10 = v9 >> 8;
      v15[1] = __rev16(v9);
      v11 = a3[3];
      v15[2] = __rev16(v11);
      v12 = v10 | (v11 >> 8) | v8;
      if (*(_BYTE *)(a1 + 608) == 8 && v12 != 0)
      {
        v5 = "Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8";
        return sub_10035F02C(a1, v5);
      }
      return sub_10036E404(a1, 1951551059, (Bytef *)v15, 6uLL);
    }
    else
    {
      if (a5 != 3)
      {
        v5 = "Can't write tRNS with an alpha channel";
        return sub_10035F02C(a1, v5);
      }
      if (a4 < 1 || *(unsigned __int16 *)(a1 + 592) < a4)
      {
        v5 = "Invalid number of transparent colors specified";
        return sub_10035F02C(a1, v5);
      }
      return sub_10036E404(a1, 1951551059, a2, a4);
    }
  }
  else
  {
    v6 = a3[4];
    if (1 << *(_BYTE *)(a1 + 608) <= v6)
    {
      v5 = "Ignoring attempt to write tRNS chunk out-of-range for bit_depth";
      return sub_10035F02C(a1, v5);
    }
    v15[0] = __rev16(v6);
    return sub_10036E404(a1, 1951551059, (Bytef *)v15, 2uLL);
  }
}

uint64_t sub_100370070(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unsigned int v3;
  const char *v4;
  signed int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _WORD v14[3];

  if (a3 == 3)
  {
    if (!*(_WORD *)(a1 + 592) && (*(_BYTE *)(a1 + 976) & 1) != 0)
    {
      LOBYTE(v3) = *a2;
    }
    else
    {
      v3 = *a2;
      if (*(unsigned __int16 *)(a1 + 592) <= v3)
      {
        v4 = "Invalid background palette index";
        return sub_10035E924(a1, (uint64_t)v4);
      }
    }
    LOBYTE(v14[0]) = v3;
    return sub_10036E404(a1, 1649100612, (Bytef *)v14, 1uLL);
  }
  else if ((a3 & 2) != 0)
  {
    v6 = *((unsigned __int16 *)a2 + 1);
    v7 = v6 >> 8;
    v14[0] = __rev16(v6);
    v8 = *((unsigned __int16 *)a2 + 2);
    v9 = v8 >> 8;
    v14[1] = __rev16(v8);
    v10 = *((unsigned __int16 *)a2 + 3);
    v14[2] = __rev16(v10);
    v11 = v9 | (v10 >> 8) | v7;
    if (*(_BYTE *)(a1 + 608) == 8 && v11 != 0)
    {
      v4 = "Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8";
      return sub_10035E924(a1, (uint64_t)v4);
    }
    return sub_10036E404(a1, 1649100612, (Bytef *)v14, 6uLL);
  }
  else
  {
    v5 = *((unsigned __int16 *)a2 + 4);
    if (1 << *(_BYTE *)(a1 + 608) <= v5)
    {
      v4 = "Ignoring attempt to write bKGD chunk out-of-range for bit_depth";
      return sub_10035E924(a1, (uint64_t)v4);
    }
    v14[0] = __rev16(v5);
    return sub_10036E404(a1, 1649100612, (Bytef *)v14, 2uLL);
  }
}

uint64_t sub_1003701B0(uint64_t result, Bytef *a2, int a3)
{
  uint64_t v3;
  Bytef *v4;
  _DWORD *v5;
  Bytef v6;
  Bytef buf;
  unsigned int v8;
  int v9;

  LODWORD(v3) = a3;
  v4 = a2;
  v5 = (_DWORD *)result;
  if (!result)
  {
    if (a3 > 0)
      buf = a2[a3 - 1];
LABEL_8:
    if (!v5)
      return result;
    goto LABEL_9;
  }
  *(_DWORD *)(result + 1124) = 34;
  LOBYTE(v8) = HIBYTE(a3);
  BYTE1(v8) = BYTE2(a3);
  BYTE2(v8) = BYTE1(a3);
  HIBYTE(v8) = a3;
  v9 = 1716082789;
  sub_10036C7D8(result);
  v5[132] = 1700284774;
  sub_10035A358((uint64_t)v5);
  sub_10035A388((uint64_t)v5, (Bytef *)&v9, 4);
  v5[281] = 66;
  if ((int)v3 > 0)
  {
    v3 = v3;
    do
    {
      v6 = *v4++;
      buf = v6;
      sub_10036C7D8((uint64_t)v5);
      result = sub_10035A388((uint64_t)v5, &buf, 1);
      --v3;
    }
    while (v3);
    goto LABEL_8;
  }
LABEL_9:
  v5[281] = 130;
  v8 = bswap32(v5[145]);
  return sub_10036C7D8((uint64_t)v5);
}

uint64_t sub_100370304(uint64_t a1, unsigned __int16 *a2, unsigned int a3)
{
  uint64_t v5;
  unsigned int v7;
  Bytef buf[3];
  unsigned int v9;
  int v10;

  if (*(unsigned __int16 *)(a1 + 592) < (int)a3)
    return sub_10035E924(a1, (uint64_t)"Invalid number of histogram entries specified");
  LODWORD(v5) = a3;
  *(_DWORD *)(a1 + 1124) = 34;
  LOBYTE(v9) = a3 >> 23;
  BYTE1(v9) = a3 >> 15;
  BYTE2(v9) = a3 >> 7;
  HIBYTE(v9) = 2 * a3;
  v10 = 1414744424;
  sub_10036C7D8(a1);
  *(_DWORD *)(a1 + 528) = 1749635924;
  sub_10035A358(a1);
  sub_10035A388(a1, (Bytef *)&v10, 4);
  *(_DWORD *)(a1 + 1124) = 66;
  if ((int)v5 >= 1)
  {
    v5 = v5;
    do
    {
      v7 = *a2++;
      *(_WORD *)buf = bswap32(v7) >> 16;
      sub_10036C7D8(a1);
      sub_10035A388(a1, buf, 2);
      --v5;
    }
    while (v5);
  }
  *(_DWORD *)(a1 + 1124) = 130;
  v9 = bswap32(*(_DWORD *)(a1 + 580));
  return sub_10036C7D8(a1);
}

unint64_t sub_100370488(_DWORD *a1, unsigned __int8 *a2, char *a3)
{
  unint64_t result;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  Bytef v11[80];
  unsigned int v12;
  int v13;

  result = sub_10036BD0C((uint64_t)a1, a2, v11);
  if (!(_DWORD)result)
    sub_10035E6F4((uint64_t)a1, "tEXt: invalid keyword");
  v6 = result;
  if (a3)
  {
    if (!*a3)
    {
      v7 = 0;
      if (!a1)
        return result;
      goto LABEL_8;
    }
    result = strlen(a3);
    v7 = result;
    if (result > (2147483646 - v6))
      sub_10035E6F4((uint64_t)a1, "tEXt: text too long");
  }
  else
  {
    v7 = 0;
  }
  if (!a1)
    return result;
LABEL_8:
  v8 = __CFADD__(v6, 1);
  v9 = (v6 + 1);
  v10 = v8;
  a1[281] = 34;
  LOBYTE(v12) = (v9 + v7) >> 24;
  BYTE1(v12) = (v9 + v7) >> 16;
  BYTE2(v12) = (unsigned __int16)(v9 + v7) >> 8;
  HIBYTE(v12) = v9 + v7;
  v13 = 1951942004;
  sub_10036C7D8((uint64_t)a1);
  a1[132] = 1950701684;
  sub_10035A358((uint64_t)a1);
  sub_10035A388((uint64_t)a1, (Bytef *)&v13, 4);
  a1[281] = 66;
  if ((v10 & 1) == 0)
  {
    sub_10036C7D8((uint64_t)a1);
    sub_10035A388((uint64_t)a1, v11, v9);
  }
  if (a3)
  {
    if (v7)
    {
      sub_10036C7D8((uint64_t)a1);
      sub_10035A388((uint64_t)a1, (Bytef *)a3, v7);
    }
  }
  a1[281] = 130;
  v12 = bswap32(a1[145]);
  return sub_10036C7D8((uint64_t)a1);
}

unint64_t sub_100370648(uint64_t a1, unsigned __int8 *a2, char *a3, int a4)
{
  unint64_t result;
  int v7;
  uint64_t v8;
  size_t v9;
  int v10;
  unsigned int v11;
  Bytef *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  unsigned int v17;
  _QWORD *v18;
  unsigned int v19;
  BOOL v20;
  _QWORD v21[131];
  Bytef buf[81];
  unsigned int v23;
  int v24;

  if (a4)
  {
    if (a4 != -1)
      sub_10035E6F4(a1, "zTXt: invalid compression type");
    return sub_100370488((_DWORD *)a1, a2, a3);
  }
  memset(&v21[2], 0, 496);
  v7 = sub_10036BD0C(a1, a2, buf);
  if (!v7)
    sub_10035E6F4(a1, "zTXt: invalid keyword");
  buf[v7 + 1] = 0;
  v8 = (v7 + 2);
  if (a3)
    v9 = strlen(a3);
  else
    v9 = 0;
  v21[0] = a3;
  v21[1] = v9;
  LODWORD(v21[2]) = 0;
  result = sub_10036F7E0(a1, 2052348020, (uint64_t)v21, v8);
  if ((_DWORD)result)
    sub_10035E6F4(a1, *(const char **)(a1 + 360));
  v10 = v21[2];
  if (a1)
  {
    *(_DWORD *)(a1 + 1124) = 34;
    LOBYTE(v23) = (v10 + v8) >> 24;
    BYTE1(v23) = (v10 + v8) >> 16;
    BYTE2(v23) = (unsigned __int16)(v10 + v8) >> 8;
    HIBYTE(v23) = v10 + v8;
    v24 = 1951945850;
    sub_10036C7D8(a1);
    *(_DWORD *)(a1 + 528) = 2052348020;
    sub_10035A358(a1);
    result = sub_10035A388(a1, (Bytef *)&v24, 4);
    *(_DWORD *)(a1 + 1124) = 66;
    if ((_DWORD)v8)
    {
      sub_10036C7D8(a1);
      result = sub_10035A388(a1, buf, v8);
    }
    v11 = v21[2];
    v12 = (Bytef *)&v21[2] + 4;
    v13 = *(_QWORD **)(a1 + 424);
    if (LODWORD(v21[2]) <= 0x400)
      v14 = LODWORD(v21[2]);
    else
      v14 = 1024;
    if ((_DWORD)v14)
    {
LABEL_16:
      sub_10036C7D8(a1);
      result = sub_10035A388(a1, v12, v14);
    }
    while (1)
    {
      v11 -= v14;
      v15 = v11 == 0;
      if (!v11 || v13 == 0)
        break;
      v17 = *(_DWORD *)(a1 + 432);
      v12 = (Bytef *)(v13 + 1);
      v13 = (_QWORD *)*v13;
      if (v17 >= v11)
        v14 = v11;
      else
        v14 = v17;
      if ((_DWORD)v14)
        goto LABEL_16;
    }
  }
  else
  {
    if (LODWORD(v21[2]) < 0x401 || (v18 = (_QWORD *)MEMORY[0x1A8]) == 0)
    {
      if (LODWORD(v21[2]) <= 0x400)
        return result;
LABEL_46:
      sub_10035E6F4(a1, "error writing ancillary chunked compressed data");
    }
    v19 = LODWORD(v21[2]) - 1024;
    do
    {
      v20 = v19 > MEMORY[0x1B0];
      if (v19 >= MEMORY[0x1B0])
        v19 -= MEMORY[0x1B0];
      else
        v19 = 0;
      v15 = !v20;
      if (!v20)
        break;
      v18 = (_QWORD *)*v18;
    }
    while (v18);
  }
  if (!v15)
    goto LABEL_46;
  if (a1)
  {
    *(_DWORD *)(a1 + 1124) = 130;
    v23 = bswap32(*(_DWORD *)(a1 + 580));
    return sub_10036C7D8(a1);
  }
  return result;
}

size_t sub_100370950(uint64_t a1, int a2, unsigned __int8 *a3, char *a4, char *a5, char *a6)
{
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  size_t result;
  uint64_t v23;
  unsigned int v24;
  Bytef *v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v29;
  BOOL v30;
  _QWORD *v31;
  unsigned int v32;
  BOOL v33;
  _QWORD v34[131];
  Bytef buf[82];
  unsigned int v36;
  int v37;

  memset(&v34[2], 0, 496);
  v11 = sub_10036BD0C(a1, a3, buf);
  if (!v11)
    sub_10035E6F4(a1, "iTXt: invalid keyword");
  v12 = a2 + 1;
  if ((a2 + 1) >= 4)
    sub_10035E6F4(a1, "iTXt: invalid compression");
  v13 = v11;
  buf[v11 + 1] = 0x1000100u >> (8 * v12);
  buf[v11 + 2] = 0;
  v14 = (v11 + 3);
  if (a4)
    v15 = a4;
  else
    v15 = "";
  v16 = strlen(v15) + 1;
  if (!a5)
    a5 = "";
  v17 = strlen(a5) + 1;
  if (!a6)
    a6 = "";
  v18 = v14 + v16;
  if (v16 > (2147483644 - v13))
    v18 = 0x7FFFFFFF;
  v19 = v18 ^ 0x7FFFFFFFu;
  v20 = v18 + v17;
  if (v17 <= v19)
    v21 = v20;
  else
    v21 = 0x7FFFFFFF;
  result = strlen(a6);
  v34[0] = a6;
  v34[1] = result;
  LODWORD(v34[2]) = 0;
  if ((v12 & 1) == 0)
  {
    if (result > (v21 ^ 0x7FFFFFFFu))
      sub_10035E6F4(a1, "iTXt: uncompressed text too long");
    LODWORD(v34[2]) = result;
    if (!a1)
      return result;
    goto LABEL_21;
  }
  if (sub_10036F7E0(a1, 1767135348, (uint64_t)v34, v21))
    sub_10035E6F4(a1, *(const char **)(a1 + 360));
  result = LODWORD(v34[2]);
  if (a1)
  {
LABEL_21:
    *(_DWORD *)(a1 + 1124) = 34;
    LOBYTE(v36) = (result + v21) >> 24;
    BYTE1(v36) = (result + v21) >> 16;
    BYTE2(v36) = (unsigned __int16)(result + v21) >> 8;
    HIBYTE(v36) = result + v21;
    v37 = 1951945833;
    sub_10036C7D8(a1);
    *(_DWORD *)(a1 + 528) = 1767135348;
    sub_10035A358(a1);
    sub_10035A388(a1, (Bytef *)&v37, 4);
    *(_DWORD *)(a1 + 1124) = 66;
    if ((_DWORD)v14)
    {
      sub_10036C7D8(a1);
      sub_10035A388(a1, buf, v14);
    }
    if (v16)
    {
      sub_10036C7D8(a1);
      sub_10035A388(a1, (Bytef *)v15, v16);
    }
    if (v17)
    {
      sub_10036C7D8(a1);
      sub_10035A388(a1, (Bytef *)a5, v17);
    }
    if ((v12 & 1) == 0)
    {
      v23 = LODWORD(v34[2]);
      if (LODWORD(v34[2]))
      {
        sub_10036C7D8(a1);
        sub_10035A388(a1, (Bytef *)a6, v23);
      }
LABEL_45:
      *(_DWORD *)(a1 + 1124) = 130;
      v36 = bswap32(*(_DWORD *)(a1 + 580));
      return sub_10036C7D8(a1);
    }
    v24 = v34[2];
    v25 = (Bytef *)&v34[2] + 4;
    v26 = *(_QWORD **)(a1 + 424);
    if (LODWORD(v34[2]) <= 0x400)
      v27 = LODWORD(v34[2]);
    else
      v27 = 1024;
    if ((_DWORD)v27)
    {
LABEL_34:
      sub_10036C7D8(a1);
      sub_10035A388(a1, v25, v27);
    }
    while (1)
    {
      v24 -= v27;
      if (!v24 || v26 == 0)
        break;
      v29 = *(_DWORD *)(a1 + 432);
      v25 = (Bytef *)(v26 + 1);
      v26 = (_QWORD *)*v26;
      if (v29 >= v24)
        v27 = v24;
      else
        v27 = v29;
      if ((_DWORD)v27)
        goto LABEL_34;
    }
    if (!v24)
      goto LABEL_45;
LABEL_64:
    sub_10035E6F4(a1, "error writing ancillary chunked compressed data");
  }
  v30 = LODWORD(v34[2]) < 0x401;
  if (LODWORD(v34[2]) >= 0x401)
  {
    v31 = (_QWORD *)MEMORY[0x1A8];
    if (MEMORY[0x1A8])
    {
      v32 = LODWORD(v34[2]) - 1024;
      do
      {
        v33 = v32 > MEMORY[0x1B0];
        if (v32 >= MEMORY[0x1B0])
          v32 -= MEMORY[0x1B0];
        else
          v32 = 0;
        v30 = !v33;
        if (!v33)
          break;
        v31 = (_QWORD *)*v31;
      }
      while (v31);
    }
  }
  if (!v30)
    goto LABEL_64;
  return result;
}

uint64_t sub_100370DC4(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  char v4;
  int v9;
  int v10;
  char v11;

  v4 = a4;
  if (a4 >= 2)
    sub_10035E924(a1, (uint64_t)"Unrecognized unit type for oFFs chunk");
  sub_10035ACD8(&v9, a2);
  sub_10035ACD8(&v10, a3);
  v11 = v4;
  return sub_10036E404(a1, 1866876531, (Bytef *)&v9, 9uLL);
}

void sub_100370E80(uint64_t a1, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5, int a6, const char *a7, Bytef **a8)
{
  char v12;
  int v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char **v24;
  size_t *v25;
  const char *v26;
  size_t v27;
  BOOL v28;
  size_t v29;
  Bytef *v30;
  char v31;
  unsigned int v32;
  uint64_t *v33;
  Bytef *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  Bytef *v42;
  uint64_t *v43;
  Bytef buf[80];
  int v45;
  int v46;
  char v47;
  char v48;

  if (a5 >= 4)
    sub_10035E6F4(a1, "Unrecognized equation type for pCAL chunk");
  v12 = a5;
  v15 = sub_10036BD0C(a1, a2, buf);
  if (!v15)
    sub_10035E6F4(a1, "pCAL: invalid keyword");
  v39 = a3;
  v40 = a4;
  v41 = v12;
  v16 = (v15 + 1);
  v42 = (Bytef *)a7;
  v17 = strlen(a7);
  if (a6)
    v18 = v17 + 1;
  else
    v18 = v17;
  v38 = v18;
  v19 = v16 + v18 + 10;
  v20 = sub_10035F8C8((_QWORD *)a1, 8 * a6);
  v21 = a6;
  v22 = (a6 - 1);
  v43 = v20;
  if (a6 >= 1)
  {
    v23 = a6;
    v24 = (const char **)a8;
    v25 = (size_t *)v20;
    do
    {
      v26 = *v24++;
      v27 = strlen(v26);
      v28 = v22-- != 0;
      if (v28)
        v29 = v27 + 1;
      else
        v29 = v27;
      *v25++ = v29;
      v19 += v27 + v28;
      --v23;
    }
    while (v23);
  }
  if (a1)
  {
    *(_DWORD *)(a1 + 1124) = 34;
    LOBYTE(v45) = HIBYTE(v19);
    BYTE1(v45) = BYTE2(v19);
    BYTE2(v45) = BYTE1(v19);
    HIBYTE(v45) = v19;
    v46 = 1279345520;
    sub_10036C7D8(a1);
    *(_DWORD *)(a1 + 528) = 1883455820;
    sub_10035A358(a1);
    sub_10035A388(a1, (Bytef *)&v46, 4);
    *(_DWORD *)(a1 + 1124) = 66;
    v30 = v42;
    v31 = v41;
    v32 = v39;
    if ((_DWORD)v16)
    {
      sub_10036C7D8(a1);
      sub_10035A388(a1, buf, v16);
    }
  }
  else
  {
    v30 = v42;
    v31 = v41;
    v32 = v39;
  }
  sub_10035ACD8(&v45, v32);
  sub_10035ACD8(&v46, v40);
  v47 = v31;
  v48 = a6;
  if (a1)
  {
    sub_10036C7D8(a1);
    sub_10035A388(a1, (Bytef *)&v45, 10);
    if (v30 && v38)
    {
      sub_10036C7D8(a1);
      sub_10035A388(a1, v30, v38);
    }
    if (a6 >= 1)
    {
      v33 = v43;
      do
      {
        v34 = *a8;
        v36 = *v33++;
        v35 = v36;
        if (*a8)
          v37 = v35 == 0;
        else
          v37 = 1;
        if (!v37)
        {
          sub_10036C7D8(a1);
          sub_10035A388(a1, v34, v35);
        }
        ++a8;
        --v21;
      }
      while (v21);
    }
    sub_10035F814(a1, v43);
    *(_DWORD *)(a1 + 1124) = 130;
    sub_10036C7D8(a1);
  }
  else
  {
    sub_10035F814(0, v43);
  }
}

uint64_t sub_10037118C(uint64_t a1, Bytef a2, char *__s, const char *a4)
{
  size_t v8;
  size_t v9;
  unint64_t v10;
  size_t v12;
  Bytef v13;
  _BYTE v14[63];

  v8 = strlen(__s);
  v9 = strlen(a4);
  v10 = v8 + v9 + 2;
  if (v10 >= 0x41)
    return sub_10035E924(a1, (uint64_t)"Can't write sCAL (buffer too small)");
  v12 = v9;
  v13 = a2;
  __memcpy_chk(v14, __s, v8 + 1, 63);
  memcpy(&v14[v8 + 1], a4, v12);
  return sub_10036E404(a1, 1933787468, &v13, v10);
}

uint64_t sub_1003712B0(uint64_t a1, int a2, int a3, int a4)
{
  Bytef v4;
  Bytef v9[9];

  v4 = a4;
  if (a4 >= 2)
    sub_10035E924(a1, (uint64_t)"Unrecognized unit type for pHYs chunk");
  v9[0] = HIBYTE(a2);
  v9[1] = BYTE2(a2);
  v9[2] = BYTE1(a2);
  v9[3] = a2;
  v9[4] = HIBYTE(a3);
  v9[5] = BYTE2(a3);
  v9[6] = BYTE1(a3);
  v9[7] = a3;
  v9[8] = v4;
  return sub_10036E404(a1, 1883789683, v9, 9uLL);
}

uint64_t sub_100371380(uint64_t a1, unsigned __int16 *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int16 v7;
  Bytef v8[7];

  v2 = *((unsigned __int8 *)a2 + 2);
  if ((v2 - 13) < 0xFFFFFFF4)
    return sub_10035E924(a1, (uint64_t)"Invalid time specified for tIME chunk");
  v3 = *((unsigned __int8 *)a2 + 3);
  if ((v3 - 32) < 0xFFFFFFE1)
    return sub_10035E924(a1, (uint64_t)"Invalid time specified for tIME chunk");
  v4 = *((unsigned __int8 *)a2 + 4);
  if (v4 > 0x17)
    return sub_10035E924(a1, (uint64_t)"Invalid time specified for tIME chunk");
  v5 = *((unsigned __int8 *)a2 + 6);
  if (v5 >= 0x3D)
    return sub_10035E924(a1, (uint64_t)"Invalid time specified for tIME chunk");
  v7 = *a2;
  v8[0] = HIBYTE(*a2);
  v8[1] = v7;
  v8[2] = v2;
  v8[3] = v3;
  v8[4] = v4;
  v8[5] = *((_BYTE *)a2 + 5);
  v8[6] = v5;
  return sub_10036E404(a1, 1950960965, v8, 7uLL);
}

_BYTE *sub_100371420(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  _BYTE *result;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v2 = *(unsigned __int8 *)(a1 + 609) * *(unsigned __int8 *)(a1 + 612);
  v3 = *(_DWORD *)(a1 + 496);
  v4 = (v3 * (unint64_t)v2 + 7) >> 3;
  v5 = v3 * (unint64_t)(v2 >> 3);
  if (v2 < 8)
    v5 = v4;
  v6 = v5 + 1;
  *(_BYTE *)(a1 + 615) = *(_BYTE *)(a1 + 610);
  *(_BYTE *)(a1 + 614) = v2;
  result = sub_10035F8C8((_QWORD *)a1, v5 + 1);
  *(_QWORD *)(a1 + 544) = result;
  *result = 0;
  v8 = *(unsigned __int8 *)(a1 + 606);
  if (*(_DWORD *)(a1 + 500) == 1)
    v8 &= 0x1Fu;
  if (*(_DWORD *)(a1 + 496) == 1)
    v8 &= 0x2Fu;
  if ((_BYTE)v8)
    v9 = v8;
  else
    v9 = 8;
  *(_BYTE *)(a1 + 606) = v9;
  if (v9 >= 0x10)
  {
    if (!*(_QWORD *)(a1 + 552))
    {
      result = sub_10035F8C8((_QWORD *)a1, v6);
      *(_QWORD *)(a1 + 552) = result;
      if (((v9 >> 5) & 1) + (v9 >> 7) + ((v9 >> 4) & 1) + ((v9 >> 6) & 1) >= 2)
      {
        result = sub_10035F8C8((_QWORD *)a1, v6);
        *(_QWORD *)(a1 + 560) = result;
      }
    }
    if (v9 >= 0x20)
    {
      result = sub_10035F834(a1, v6);
      *(_QWORD *)(a1 + 536) = result;
    }
  }
  if (*(_BYTE *)(a1 + 604))
  {
    v10 = *(_DWORD *)(a1 + 500);
    if ((*(_BYTE *)(a1 + 300) & 2) == 0)
    {
      *(_DWORD *)(a1 + 504) = (v10 + 7) >> 3;
      *(_DWORD *)(a1 + 508) = (*(_DWORD *)(a1 + 496) + 7) >> 3;
      return result;
    }
  }
  else
  {
    v10 = *(_DWORD *)(a1 + 500);
  }
  *(_DWORD *)(a1 + 504) = v10;
  *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 496);
  return result;
}

void sub_100371580(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned __int8 v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;

  v1 = *(_DWORD *)(a1 + 524) + 1;
  *(_DWORD *)(a1 + 524) = v1;
  if (v1 >= *(_DWORD *)(a1 + 504))
  {
    if (!*(_BYTE *)(a1 + 604))
      goto LABEL_16;
    *(_DWORD *)(a1 + 524) = 0;
    v2 = *(unsigned __int8 *)(a1 + 605);
    if ((*(_BYTE *)(a1 + 300) & 2) != 0)
    {
      v3 = v2 + 1;
    }
    else
    {
      v3 = v2 + 1;
      if ((v2 + 1) <= 6u)
      {
        v4 = byte_1003C54E3[(v2 + 1)];
        v5 = *(_DWORD *)(a1 + 496) + v4 + ~byte_1003C54DC[(v2 + 1)];
        *(_DWORD *)(a1 + 508) = v5 / v4;
        v6 = byte_1003C54D5[(v2 + 1)];
        v7 = *(_DWORD *)(a1 + 500) + v6 + ~byte_1003C54CE[(v2 + 1)];
        *(_DWORD *)(a1 + 504) = v7 / v6;
        if (v5 < v4 || v7 < v6)
        {
          v3 = v2 + 2;
          if ((v2 + 2) <= 6u)
          {
            v13 = byte_1003C54E3[(v2 + 2)];
            v14 = *(_DWORD *)(a1 + 496) + v13 + ~byte_1003C54DC[(v2 + 2)];
            *(_DWORD *)(a1 + 508) = v14 / v13;
            v15 = byte_1003C54D5[(v2 + 2)];
            v16 = *(_DWORD *)(a1 + 500) + v15 + ~byte_1003C54CE[(v2 + 2)];
            *(_DWORD *)(a1 + 504) = v16 / v15;
            if (v14 < v13 || v16 < v15)
            {
              v3 = v2 + 3;
              if ((v2 + 3) <= 6u)
              {
                v17 = byte_1003C54E3[(v2 + 3)];
                v18 = *(_DWORD *)(a1 + 496) + v17 + ~byte_1003C54DC[(v2 + 3)];
                *(_DWORD *)(a1 + 508) = v18 / v17;
                v19 = byte_1003C54D5[(v2 + 3)];
                v20 = *(_DWORD *)(a1 + 500) + v19 + ~byte_1003C54CE[(v2 + 3)];
                *(_DWORD *)(a1 + 504) = v20 / v19;
                if (v18 < v17 || v20 < v19)
                {
                  v3 = v2 + 4;
                  if ((v2 + 4) <= 6u)
                  {
                    v21 = byte_1003C54E3[(v2 + 4)];
                    v22 = *(_DWORD *)(a1 + 496) + v21 + ~byte_1003C54DC[(v2 + 4)];
                    *(_DWORD *)(a1 + 508) = v22 / v21;
                    v23 = byte_1003C54D5[(v2 + 4)];
                    v24 = *(_DWORD *)(a1 + 500) + v23 + ~byte_1003C54CE[(v2 + 4)];
                    *(_DWORD *)(a1 + 504) = v24 / v23;
                    if (v22 < v21 || v24 < v23)
                    {
                      v3 = v2 + 5;
                      if ((v2 + 5) <= 6u)
                      {
                        v25 = byte_1003C54E3[(v2 + 5)];
                        v26 = *(_DWORD *)(a1 + 496) + v25 + ~byte_1003C54DC[(v2 + 5)];
                        *(_DWORD *)(a1 + 508) = v26 / v25;
                        v27 = byte_1003C54D5[(v2 + 5)];
                        v28 = *(_DWORD *)(a1 + 500) + v27 + ~byte_1003C54CE[(v2 + 5)];
                        *(_DWORD *)(a1 + 504) = v28 / v27;
                        if (v26 < v25 || v28 < v27)
                        {
                          v3 = v2 + 6;
                          if ((v2 + 6) <= 6u)
                          {
                            v29 = byte_1003C54E3[(v2 + 6)];
                            v30 = *(_DWORD *)(a1 + 496) + v29 + ~byte_1003C54DC[(v2 + 6)];
                            *(_DWORD *)(a1 + 508) = v30 / v29;
                            v31 = byte_1003C54D5[(v2 + 6)];
                            v32 = *(_DWORD *)(a1 + 500) + v31 + ~byte_1003C54CE[(v2 + 6)];
                            *(_DWORD *)(a1 + 504) = v32 / v31;
                            if (v30 < v29 || v32 < v31)
                            {
                              v3 = v2 + 7;
                              if (v2 >= 0xF9)
                              {
                                v33 = byte_1003C54E3[(v2 + 7)];
                                v34 = *(_DWORD *)(a1 + 496) + v33 + ~byte_1003C54DC[(v2 + 7)];
                                *(_DWORD *)(a1 + 508) = v34 / v33;
                                v35 = byte_1003C54D5[(v2 + 7)];
                                v36 = *(_DWORD *)(a1 + 500) + v35 + ~byte_1003C54CE[(v2 + 7)];
                                *(_DWORD *)(a1 + 504) = v36 / v35;
                                if (v34 < v33 || v36 < v35)
                                {
                                  v3 = v2 + 8;
                                  if ((v2 + 8) <= 6u)
                                  {
                                    *(_DWORD *)(a1 + 508) = (*(_DWORD *)(a1 + 496)
                                                           + byte_1003C54E3[(v2 + 8)]
                                                           + ~byte_1003C54DC[(v2 + 8)])
                                                          / byte_1003C54E3[(v2 + 8)];
                                    *(_DWORD *)(a1 + 504) = (*(_DWORD *)(a1 + 500)
                                                           + byte_1003C54D5[(v2 + 8)]
                                                           + ~byte_1003C54CE[(v2 + 8)])
                                                          / byte_1003C54D5[(v2 + 8)];
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    *(_BYTE *)(a1 + 605) = v3;
    if (v3 <= 6u)
    {
      if (*(_QWORD *)(a1 + 536))
      {
        v8 = *(unsigned __int8 *)(a1 + 609) * *(unsigned __int8 *)(a1 + 612);
        v9 = *(_DWORD *)(a1 + 496);
        v10 = v8 >= 8;
        v11 = (v9 * (unint64_t)v8 + 7) >> 3;
        v12 = v9 * (unint64_t)(v8 >> 3);
        if (!v10)
          v12 = v11;
        bzero(*(void **)(a1 + 536), v12 + 1);
      }
    }
    else
    {
LABEL_16:
      sub_10036EA9C(a1, 0, 0, 4);
    }
  }
}

uint64_t sub_10037194C(uint64_t result, unsigned __int8 *__dst, int a3)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _BYTE *v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  size_t v27;
  int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  if (a3 > 5)
    return result;
  v4 = result;
  v5 = *(unsigned __int8 *)(result + 19);
  switch((_DWORD)v5)
  {
    case 4:
      v14 = *(_DWORD *)result;
      v7 = a3;
      v8 = byte_1003C54DC[a3];
      if (*(_DWORD *)result <= v8)
        goto LABEL_31;
      v9 = 0;
      v15 = byte_1003C54E3[a3];
      v16 = 4 * v8;
      v17 = 4 * v15;
      v18 = byte_1003C54DC[a3];
      v19 = 4;
      v13 = __dst;
      do
      {
        while (1)
        {
          result = ~v16 & 4;
          v9 |= ((__dst[(unint64_t)v18 >> 1] >> (~(_BYTE)v16 & 4)) & 0xF) << v19;
          if (!v19)
            break;
          v19 -= 4;
          v18 += v15;
          v16 += v17;
          if (v18 >= v14)
            goto LABEL_17;
        }
        *v13++ = v9;
        v19 = 4;
        v9 = 0;
        v18 += v15;
        v16 += v17;
      }
      while (v18 < v14);
LABEL_17:
      if (v19 == 4)
        goto LABEL_31;
      break;
    case 2:
      v20 = *(_DWORD *)result;
      v7 = a3;
      v8 = byte_1003C54DC[a3];
      if (*(_DWORD *)result <= v8)
        goto LABEL_31;
      v9 = 0;
      v21 = byte_1003C54E3[a3];
      v22 = 2 * v8;
      v23 = 2 * v21;
      v24 = byte_1003C54DC[a3];
      v25 = 6;
      v13 = __dst;
      do
      {
        while (1)
        {
          result = ~v22 & 6;
          v9 |= ((__dst[(unint64_t)v24 >> 2] >> (~(_BYTE)v22 & 6)) & 3) << v25;
          if (!v25)
            break;
          v25 -= 2;
          v24 += v21;
          v22 += v23;
          if (v24 >= v20)
            goto LABEL_24;
        }
        *v13++ = v9;
        v25 = 6;
        v9 = 0;
        v24 += v21;
        v22 += v23;
      }
      while (v24 < v20);
LABEL_24:
      if (v25 == 6)
        goto LABEL_31;
      break;
    case 1:
      v6 = *(_DWORD *)result;
      v7 = a3;
      v8 = byte_1003C54DC[a3];
      if (*(_DWORD *)result <= v8)
        goto LABEL_31;
      v9 = 0;
      v10 = byte_1003C54E3[a3];
      v11 = byte_1003C54DC[a3];
      v12 = 7;
      v13 = __dst;
      do
      {
        while (1)
        {
          v9 |= ((__dst[(unint64_t)v11 >> 3] >> (~(_BYTE)v11 & 7)) & 1) << v12;
          if (v12)
            break;
          *v13++ = v9;
          v12 = 7;
          v9 = 0;
          v11 += v10;
          if (v11 >= v6)
            goto LABEL_10;
        }
        --v12;
        v11 += v10;
      }
      while (v11 < v6);
LABEL_10:
      if (v12 == 7)
        goto LABEL_31;
      break;
    default:
      v26 = *(_DWORD *)result;
      v7 = a3;
      v8 = byte_1003C54DC[a3];
      if (*(_DWORD *)result > v8)
      {
        v27 = v5 >> 3;
        v28 = byte_1003C54E3[a3];
        v29 = byte_1003C54DC[a3];
        v30 = __dst;
        do
        {
          v31 = &__dst[v27 * (unint64_t)v29];
          if (v30 != v31)
            result = (uint64_t)memcpy(v30, v31, v27);
          v30 += v27;
          v29 += v28;
        }
        while (v29 < v26);
      }
      goto LABEL_31;
  }
  *v13 = v9;
LABEL_31:
  v32 = (*(_DWORD *)v4 + ~v8 + byte_1003C54E3[v7]) / byte_1003C54E3[v7];
  *(_DWORD *)v4 = v32;
  v33 = *(unsigned __int8 *)(v4 + 19);
  v34 = (v33 * v32 + 7) >> 3;
  v35 = (v33 >> 3) * (unint64_t)v32;
  if (v33 < 8)
    v35 = v34;
  *(_QWORD *)(v4 + 8) = v35;
  return result;
}

void sub_100371C28(uint64_t a1, uint64_t a2, double a3, double a4, int64x2_t a5, double a6, double a7, int8x16_t a8, double a9, int8x16_t a10)
{
  int16x8_t v10;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int8x16_t *v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  __int8 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int8x16_t *v27;
  int8x16_t *v28;
  unint64_t v29;
  char *v30;
  char v31;
  __int8 v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int8x16_t *v37;
  int8x16_t *v38;
  unint64_t v39;
  unint64_t v40;
  __int8 *v41;
  int8x16_t v42;
  uint16x8_t v43;
  int8x16_t v44;
  uint16x8_t v45;
  uint32x4_t v46;
  int8x16_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int8x16_t v55;
  uint16x8_t v56;
  int8x16_t v57;
  uint16x8_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int64x2_t v68;
  unint64_t v69;
  unint64_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int8x8_t *v73;
  unint64_t v74;
  int32x4_t v75;
  int64x2_t v76;
  int8x8_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int16x8_t v80;
  int8x16_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  __int8 v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  _BYTE *v99;
  char *v100;
  char v101;
  char v102;
  char v103;
  _BYTE *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  _BYTE *v108;
  unint64_t v109;
  char v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v115;
  int8x16_t *v116;
  uint64_t v117;
  uint8x16_t *v118;
  int8x16_t *v119;
  uint64_t v120;
  uint64_t v121;
  int8x16_t *v122;
  uint8x16_t *v123;
  __int8 *v124;
  int v125;
  __int8 v126;
  __int8 v127;
  unsigned int v128;
  _BYTE *v129;
  int8x16_t *v130;
  uint64_t v131;
  uint8x16_t *v132;
  unsigned __int8 *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unsigned __int8 *v140;
  __int8 *v141;
  int8x16_t *v142;
  unsigned int v143;
  unsigned __int8 *v144;
  char v145;
  __int8 v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int8x16_t v152;
  int8x16_t v153;
  uint8x16_t v154;
  unint64_t v155;
  unint64_t v156;
  __int8 *v157;
  uint8x16_t *v158;
  unsigned __int8 *v159;
  uint64_t v160;
  int64x2_t v161;
  int32x4_t v162;
  uint64_t v163;
  int8x16_t *v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int8x16_t v170;
  int8x16_t v171;
  uint8x16_t v172;
  int8x16_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int8x16_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int8x16_t v181;
  uint32x4_t v182;
  uint32x4_t v183;
  uint32x4_t v184;
  uint32x4_t v185;
  int v186;
  char v187;
  char v188;
  unsigned int v189;
  uint64_t v190;
  unsigned int v191;
  char v192;
  char v193;
  int v194;
  int v195;
  int v196;
  uint64_t v197;
  unint64_t v198;
  BOOL v199;
  uint64_t v200;
  int8x16_t *v201;
  uint64_t v202;
  unint64_t v203;
  int8x16_t *v204;
  int8x16_t *v205;
  unint64_t v206;
  __int8 *v207;
  __int8 *v208;
  uint64_t v209;
  char v210;
  char v211;
  char v212;
  uint64_t v213;
  int8x16_t *v214;
  uint64_t v215;
  unint64_t v216;
  int8x16_t *v217;
  int8x16_t *v218;
  unint64_t v219;
  unint64_t v220;
  __int8 *v221;
  __int8 *v222;
  unint64_t v223;
  BOOL v224;
  BOOL v225;
  BOOL v226;
  uint64_t v227;
  uint64_t v228;
  __int8 *v229;
  int8x16_t *v230;
  __int8 *v231;
  uint64_t v232;
  unsigned __int8 *v233;
  unsigned __int8 *v234;
  int v235;
  int v236;
  int v237;
  int v238;
  char v239;
  int v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  int v244;
  char v246;
  int8x16_t v247;
  uint16x8_t v248;
  int8x16_t v249;
  uint16x8_t v250;
  uint32x4_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int8x16_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int8x16_t v261;
  uint16x8_t v262;
  int8x16_t v263;
  int8x16_t v264;
  uint16x8_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int16x8_t v273;
  int16x8_t v274;
  unint64_t v275;
  int8x8_t *v276;
  unint64_t *v277;
  int8x8_t *v278;
  int8x8_t *v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t v282;
  int32x4_t v283;
  int32x4_t v284;
  unint64_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int8x8_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  uint32x4_t v295;
  uint32x4_t v296;
  uint32x4_t v297;
  uint32x4_t v298;
  uint32x4_t v299;
  uint32x4_t v300;
  int8x8_t v301;
  int8x8_t v302;
  int8x16_t *v303;
  int64x2_t v304;
  int64x2_t v305;
  unint64_t v306;
  int64x2_t v307;
  int64x2_t v308;
  int64x2_t v309;
  int64x2_t v310;
  int8x16_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int8x16_t v316;
  int16x8_t v317;
  int16x8_t v318;
  int8x16_t v319;
  uint32x4_t v320;
  uint32x4_t v321;
  uint32x4_t v322;
  uint32x4_t v323;
  unint64_t v324;
  unsigned __int8 *v325;
  uint64_t v326;
  int v327;
  unsigned int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int8x16_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  char v338;
  char v339;
  char v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  int v344;
  int v345;
  int v346;
  char v347;
  int v348;
  int v349;
  unsigned int v350;
  unsigned int v351;
  int v352;
  char v354;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  int8x16_t *v359;
  int8x16_t *v360;
  int8x16_t *v361;
  unint64_t v362;
  int8x16_t v363;
  int8x8_t *v364;
  int8x8_t *v365;
  int8x8_t *v366;
  unint64_t v367;
  int8x8_t v368;
  int8x8_t v369;
  int8x8_t v370;
  unint64_t v371;
  int8x16_t *v372;
  int8x16_t *v373;
  int8x16_t *v374;
  int8x16_t v375;
  int8x16_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int8x16_t v381;
  int8x16_t v382;
  int32x4_t v383;
  int32x4_t v384;
  int32x4_t v385;
  int32x4_t v386;
  int8x16_t v387;
  int32x4_t v388;
  int32x4_t v389;
  int32x4_t v390;
  int32x4_t v391;
  int32x4_t v392;
  int32x4_t v393;
  int32x4_t v394;
  int32x4_t v395;
  int32x4_t v396;
  int32x4_t v397;
  int32x4_t v398;
  int32x4_t v399;
  uint32x4_t v400;
  uint32x4_t v401;
  uint32x4_t v402;
  uint32x4_t v403;
  uint32x4_t v404;
  uint32x4_t v405;
  uint32x4_t v406;
  uint32x4_t v407;
  uint32x4_t v408;
  uint32x4_t v409;
  uint32x4_t v410;
  uint32x4_t v411;
  int8x16_t v412;
  int8x16_t v413;
  int8x16_t *v414;
  uint8x16_t *v415;
  int8x16_t *v416;
  uint8x16_t *v417;
  unint64_t v418;
  int8x16_t v419;
  int8x16_t v420;
  uint8x8_t *v421;
  int8x8_t *v422;
  int8x8_t *v423;
  uint8x8_t *v424;
  unint64_t v425;
  int8x8_t v426;
  int8x8_t v427;
  uint8x8_t v428;
  uint8x8_t v429;
  uint8x8_t v430;

  v12 = *(unsigned __int8 *)(a1 + 606);
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(unsigned __int8 *)(a2 + 19);
  v15 = (unint64_t)(v14 + 7) >> 3;
  v16 = *(_QWORD *)(a1 + 544);
  if (v13 >= 0x1FFFFFFFFFFFFFFLL)
  {
    v12 &= -v12;
    v17 = -257;
    goto LABEL_3;
  }
  v17 = -257;
  if ((v12 & 8) != 0 && v12 != 8)
  {
    if (!v13)
    {
      v17 = 0;
      goto LABEL_3;
    }
    if (v13 < 8)
    {
      v34 = 0;
      v17 = 0;
      v35 = *(_QWORD *)(a1 + 544);
      goto LABEL_217;
    }
    if (v13 >= 0x10)
    {
      v34 = v13 & 0x1FFFFFFFFFFFFF0;
      v303 = (int8x16_t *)(v16 + 1);
      v304 = 0uLL;
      a8.i64[0] = 0x10000000100;
      a8.i64[1] = 0x10000000100;
      v305 = 0uLL;
      v306 = v13 & 0xFFFFFFFFFFFFFFF0;
      a10 = 0uLL;
      v307 = 0uLL;
      v308 = 0uLL;
      v10 = 0uLL;
      v309 = 0uLL;
      v310 = 0uLL;
      do
      {
        v311 = *v303++;
        v312 = (int32x4_t)vqtbl1q_s8(v311, (int8x16_t)xmmword_1003BCAC0);
        v313 = (int32x4_t)vqtbl1q_s8(v311, (int8x16_t)xmmword_1003BCAB0);
        v314 = (int32x4_t)vqtbl1q_s8(v311, (int8x16_t)xmmword_1003BCAA0);
        v315 = (int32x4_t)vqtbl1q_s8(v311, (int8x16_t)xmmword_1003BCA90);
        v316 = vcltzq_s8(v311);
        v317 = vmovl_s8(*(int8x8_t *)v316.i8);
        v318 = vmovl_high_s8(v316);
        v319 = (int8x16_t)vmovl_s16(*(int16x4_t *)v318.i8);
        v320 = (uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v318), (int8x16_t)vsubq_s32((int32x4_t)a8, v312), (int8x16_t)v312);
        v321 = (uint32x4_t)vbslq_s8(v319, (int8x16_t)vsubq_s32((int32x4_t)a8, v313), (int8x16_t)v313);
        v322 = (uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v317), (int8x16_t)vsubq_s32((int32x4_t)a8, v314), (int8x16_t)v314);
        v323 = (uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v317.i8), (int8x16_t)vsubq_s32((int32x4_t)a8, v315), (int8x16_t)v315);
        v309 = (int64x2_t)vaddw_u32((uint64x2_t)v309, *(uint32x2_t *)v320.i8);
        v10 = (int16x8_t)vaddw_high_u32((uint64x2_t)v10, v321);
        v307 = (int64x2_t)vaddw_high_u32((uint64x2_t)v307, v322);
        v310 = (int64x2_t)vaddw_high_u32((uint64x2_t)v310, v320);
        v308 = (int64x2_t)vaddw_u32((uint64x2_t)v308, *(uint32x2_t *)v321.i8);
        a10 = (int8x16_t)vaddw_u32((uint64x2_t)a10, *(uint32x2_t *)v322.i8);
        v305 = (int64x2_t)vaddw_high_u32((uint64x2_t)v305, v323);
        v304 = (int64x2_t)vaddw_u32((uint64x2_t)v304, *(uint32x2_t *)v323.i8);
        v306 -= 16;
      }
      while (v306);
      a5 = vaddq_s64(v307, v310);
      v17 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v304, v308), vaddq_s64((int64x2_t)a10, v309)), vaddq_s64(vaddq_s64(v305, (int64x2_t)v10), a5)));
      if (v13 == v34)
        goto LABEL_3;
      if ((v13 & 8) == 0)
      {
        v35 = v16 + v34;
LABEL_217:
        v324 = v13 - v34;
        v325 = (unsigned __int8 *)(v35 + 1);
        do
        {
          v327 = *v325++;
          LODWORD(v326) = v327;
          v328 = 256 - v327;
          if ((v327 & 0x80u) == 0)
            v326 = v326;
          else
            v326 = v328;
          v17 += v326;
          --v324;
        }
        while (v324);
        goto LABEL_3;
      }
    }
    else
    {
      v17 = 0;
      v34 = 0;
    }
    v70 = v34;
    v34 = v13 & 0xFFFFFFFFFFFFFFF8;
    v35 = v16 + (v13 & 0xFFFFFFFFFFFFFFF8);
    v71 = 0uLL;
    v72 = (int64x2_t)v17;
    v73 = (int8x8_t *)(v70 + v16 + 1);
    v74 = v70 - (v13 & 0xFFFFFFFFFFFFFFF8);
    a5.i64[1] = 0xFFFFFF07FFFFFF06;
    v75.i64[0] = 0x10000000100;
    v75.i64[1] = 0x10000000100;
    a8 = 0uLL;
    v76 = 0uLL;
    do
    {
      v77 = *v73++;
      *(int8x8_t *)a10.i8 = v77;
      v78 = (int32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_1003BCAA0);
      v79 = (int32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_1003BCA90);
      v80 = vcltzq_s16(vmovl_s8(v77));
      v81 = (int8x16_t)vmovl_s16(*(int16x4_t *)v80.i8);
      a10 = vbslq_s8((int8x16_t)vmovl_high_s16(v80), (int8x16_t)vsubq_s32(v75, v78), (int8x16_t)v78);
      v10 = (int16x8_t)vbslq_s8(v81, (int8x16_t)vsubq_s32(v75, v79), (int8x16_t)v79);
      v76 = (int64x2_t)vaddw_high_u32((uint64x2_t)v76, (uint32x4_t)a10);
      a8 = (int8x16_t)vaddw_u32((uint64x2_t)a8, *(uint32x2_t *)a10.i8);
      v71 = (int64x2_t)vaddw_high_u32((uint64x2_t)v71, (uint32x4_t)v10);
      v72 = (int64x2_t)vaddw_u32((uint64x2_t)v72, *(uint32x2_t *)v10.i8);
      v74 += 8;
    }
    while (v74);
    v17 = vaddvq_s64(vaddq_s64(vaddq_s64(v72, (int64x2_t)a8), vaddq_s64(v71, v76)));
    if (v13 == v34)
      goto LABEL_3;
    goto LABEL_217;
  }
LABEL_3:
  if (v12 != 16)
  {
    if ((v12 & 0x10) == 0)
    {
      v18 = v16;
      goto LABEL_64;
    }
    v36 = *(_QWORD *)(a1 + 552);
    *(_BYTE *)v36 = 1;
    v37 = (int8x16_t *)(v36 + 1);
    v38 = (int8x16_t *)(v16 + 1);
    v39 = 0;
    if ((_DWORD)v14)
    {
      if (v14 < 0x79 || (unint64_t)(v36 - v16) < 0x10)
      {
        v41 = (__int8 *)(v16 + 1);
        v40 = 0;
      }
      else
      {
        v40 = ((unint64_t)(v14 + 7) >> 3) & 0x30;
        v41 = &v38->i8[v40];
        v42 = *v38;
        *v37 = *v38;
        v43 = vmovl_u8(*(uint8x8_t *)v42.i8);
        v44 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v43.i8);
        v45 = vmovl_high_u8((uint8x16_t)v42);
        v46.i64[0] = 0x10000000100;
        v46.i64[1] = 0x10000000100;
        v10 = (int16x8_t)vsubw_u16(v46, *(uint16x4_t *)v43.i8);
        v47 = vcltzq_s8(v42);
        v48 = vmovl_s8(*(int8x8_t *)v47.i8);
        v49 = vmovl_high_s8(v47);
        v50 = (int8x16_t)vmovl_s16(*(int16x4_t *)v49.i8);
        v51 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v49), (int8x16_t)vsubw_high_u16(v46, v45), (int8x16_t)vmovl_high_u16(v45));
        v52 = (int32x4_t)vbslq_s8(v50, (int8x16_t)vsubw_u16(v46, *(uint16x4_t *)v45.i8), (int8x16_t)vmovl_u16(*(uint16x4_t *)v45.i8));
        v53 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v48), (int8x16_t)vsubw_high_u16(v46, v43), (int8x16_t)vmovl_high_u16(v43));
        v54 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v48.i8), (int8x16_t)v10, v44);
        if (v40 != 16)
        {
          v55 = *(int8x16_t *)(v16 + 17);
          *(int8x16_t *)(v36 + 17) = v55;
          v56 = vmovl_high_u8((uint8x16_t)v55);
          v57 = (int8x16_t)vmovl_high_u16(v56);
          v10 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v56.i8);
          v58 = vmovl_u8(*(uint8x8_t *)v55.i8);
          v59 = (int8x16_t)vmovl_high_u16(v58);
          v60 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v58.i8);
          v61 = (int8x16_t)vsubw_high_u16(v46, v56);
          v62 = (int8x16_t)vsubw_u16(v46, *(uint16x4_t *)v56.i8);
          v63 = (int8x16_t)vsubw_high_u16(v46, v58);
          v64 = (int8x16_t)vsubw_u16(v46, *(uint16x4_t *)v58.i8);
          v65 = vcltzq_s8(v55);
          v66 = vmovl_high_s8(v65);
          v67 = vmovl_s8(*(int8x8_t *)v65.i8);
          v51 = vaddq_s32(v51, (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v66), v61, v57));
          v52 = vaddq_s32(v52, (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v66.i8), v62, (int8x16_t)v10));
          v53 = vaddq_s32(v53, (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v67), v63, v59));
          v54 = vaddq_s32(v54, (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v67.i8), v64, v60));
        }
        a8 = (int8x16_t)vaddl_high_u32((uint32x4_t)v53, (uint32x4_t)v51);
        v68 = vaddq_s64((int64x2_t)vaddl_high_u32((uint32x4_t)v54, (uint32x4_t)v52), (int64x2_t)a8);
        a5 = (int64x2_t)vaddl_u32(*(uint32x2_t *)v54.i8, *(uint32x2_t *)v52.i8);
        v39 = vaddvq_s64(vaddq_s64(vaddq_s64(a5, (int64x2_t)vaddl_u32(*(uint32x2_t *)v53.i8, *(uint32x2_t *)v51.i8)), v68));
        v37 = (int8x16_t *)((char *)v37 + (((unint64_t)(v14 + 7) >> 3) & 0x30));
        if (v40 == v15)
          goto LABEL_50;
      }
      v82 = v15 - v40;
      do
      {
        v84 = *v41++;
        LODWORD(v83) = v84;
        v37->i8[0] = v84;
        v37 = (int8x16_t *)((char *)v37 + 1);
        v85 = 256 - v84;
        if ((v84 & 0x80u) == 0)
          v83 = v83;
        else
          v83 = v85;
        v39 += v83;
        --v82;
      }
      while (v82);
    }
    else
    {
      v41 = (__int8 *)(v16 + 1);
    }
LABEL_50:
    if (v13 > v15)
    {
      v86 = v15 + 1;
      do
      {
        v88 = *v41++;
        v87 = v88;
        v89 = v38->i8[0];
        v38 = (int8x16_t *)((char *)v38 + 1);
        LOBYTE(v90) = v87 - v89;
        v37->i8[0] = v90;
        v37 = (int8x16_t *)((char *)v37 + 1);
        if ((v90 & 0x80u) == 0)
          v90 = v90;
        else
          v90 = 256 - v90;
        v39 += v90;
      }
      while (v39 <= v17 && v86++ < v13);
    }
    v18 = v16;
    if (v39 < v17)
    {
      v92 = *(_QWORD *)(a1 + 560);
      if (v92)
      {
        *(_QWORD *)(a1 + 552) = v92;
        *(_QWORD *)(a1 + 560) = v36;
      }
      v17 = v39;
      v18 = v36;
    }
    goto LABEL_64;
  }
  v18 = *(_QWORD *)(a1 + 552);
  *(_BYTE *)v18 = 1;
  v19 = (int8x16_t *)(v18 + 1);
  v20 = (int8x16_t *)(v16 + 1);
  if ((_DWORD)v14)
  {
    v21 = 0;
    if (v14 < 0x79 || (unint64_t)(v18 - v16) < 0x10)
      goto LABEL_10;
    v21 = ((unint64_t)(v14 + 7) >> 3) & 0x30;
    *v19 = *v20;
    if (v21 != 16)
      *(_OWORD *)(v18 + 17) = *(_OWORD *)(v16 + 17);
    v20 = (int8x16_t *)((char *)v20 + (((unint64_t)(v14 + 7) >> 3) & 0x30));
    v19 = (int8x16_t *)((char *)v19 + (((unint64_t)(v14 + 7) >> 3) & 0x30));
    if (v21 != v15)
    {
LABEL_10:
      v22 = v15 - v21;
      do
      {
        v23 = v20->i8[0];
        v20 = (int8x16_t *)((char *)v20 + 1);
        v19->i8[0] = v23;
        v19 = (int8x16_t *)((char *)v19 + 1);
        --v22;
      }
      while (v22);
    }
  }
  v24 = v13 - v15;
  if (v13 > v15)
  {
    if (v24 < 8 || (unint64_t)v19->u64 + ~v16 < 0x20 || (unint64_t)((char *)v19 - (char *)v20) < 0x20)
    {
      v25 = (unint64_t)(v14 + 7) >> 3;
      v26 = v16;
      v27 = v19;
      v28 = v20;
      goto LABEL_15;
    }
    if (v24 < 0x20)
    {
      v69 = 0;
      goto LABEL_275;
    }
    v69 = v24 & 0xFFFFFFFFFFFFFFE0;
    v359 = v20 + 1;
    v360 = (int8x16_t *)(v16 + 17);
    v361 = v19 + 1;
    v362 = v24 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      a5 = (int64x2_t)v360[-1];
      v363 = vsubq_s8(*v359, *v360);
      v361[-1] = vsubq_s8(v359[-1], (int8x16_t)a5);
      *v361 = v363;
      v359 += 2;
      v360 += 2;
      v361 += 2;
      v362 -= 32;
    }
    while (v362);
    if (v24 != v69)
    {
      if ((v24 & 0x18) == 0)
      {
        v28 = (int8x16_t *)((char *)v20 + v69);
        v27 = (int8x16_t *)((char *)v19 + v69);
        v26 = v16 + v69;
        v25 = v69 + v15;
        goto LABEL_15;
      }
LABEL_275:
      v25 = (v24 & 0xFFFFFFFFFFFFFFF8) + v15;
      v26 = v16 + (v24 & 0xFFFFFFFFFFFFFFF8);
      v27 = (int8x16_t *)((char *)v19 + (v24 & 0xFFFFFFFFFFFFFFF8));
      v28 = (int8x16_t *)((char *)v20 + (v24 & 0xFFFFFFFFFFFFFFF8));
      v364 = (int8x8_t *)(v69 + v16 + 1);
      v365 = (int8x8_t *)&v20->i8[v69];
      v366 = (int8x8_t *)&v19->i8[v69];
      v367 = v69 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v368 = *v365++;
        v369 = v368;
        v370 = *v364++;
        *v366++ = vsub_s8(v369, v370);
        v367 += 8;
      }
      while (v367);
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_64;
LABEL_15:
      v29 = v13 - v25;
      v30 = (char *)(v26 + 1);
      do
      {
        v32 = v28->i8[0];
        v28 = (int8x16_t *)((char *)v28 + 1);
        v31 = v32;
        v33 = *v30++;
        v27->i8[0] = v31 - v33;
        v27 = (int8x16_t *)((char *)v27 + 1);
        --v29;
      }
      while (v29);
    }
  }
LABEL_64:
  if (v12 != 32)
  {
    if ((v12 & 0x20) != 0)
    {
      v104 = *(_BYTE **)(a1 + 552);
      *v104 = 2;
      v105 = 0;
      if (v13)
      {
        v106 = (char *)(v16 + 1);
        v107 = (char *)(*(_QWORD *)(a1 + 536) + 1);
        v108 = v104 + 1;
        v109 = v13 - 1;
        do
        {
          v111 = *v106++;
          v110 = v111;
          v112 = *v107++;
          LOBYTE(v113) = v110 - v112;
          *v108++ = v113;
          if ((v113 & 0x80u) == 0)
            v113 = v113;
          else
            v113 = 256 - v113;
          v105 += v113;
        }
        while (v105 <= v17 && v109-- != 0);
      }
      if (v105 < v17)
      {
        v115 = *(_QWORD *)(a1 + 560);
        if (v115)
        {
          *(_QWORD *)(a1 + 552) = v115;
          *(_QWORD *)(a1 + 560) = v104;
        }
        v17 = v105;
        v18 = (uint64_t)v104;
      }
    }
    goto LABEL_87;
  }
  v18 = *(_QWORD *)(a1 + 552);
  *(_BYTE *)v18 = 2;
  if (!v13)
    goto LABEL_266;
  v93 = *(_QWORD *)(a1 + 536);
  if (v13 < 8)
  {
    v94 = 0;
LABEL_68:
    v95 = v18;
    v96 = v16;
    goto LABEL_69;
  }
  v94 = 0;
  if ((unint64_t)(v18 - v16) < 0x20)
    goto LABEL_68;
  v95 = v18;
  v96 = v16;
  if ((unint64_t)(v18 - v93) < 0x20)
    goto LABEL_69;
  if (v13 >= 0x20)
  {
    v329 = 0;
    v94 = v13 & 0xFFFFFFFFFFFFFFE0;
    v330 = v16 + 17;
    v331 = v93 + 17;
    do
    {
      v332 = v18 + v329;
      a5 = *(int64x2_t *)(v331 + v329 - 16);
      v333 = vsubq_s8(*(int8x16_t *)(v330 + v329), *(int8x16_t *)(v331 + v329));
      *(int8x16_t *)(v332 + 1) = vsubq_s8(*(int8x16_t *)(v330 + v329 - 16), (int8x16_t)a5);
      *(int8x16_t *)(v332 + 17) = v333;
      v329 += 32;
    }
    while (v94 != v329);
    if (v13 == v94)
      goto LABEL_87;
    if ((v13 & 0x18) != 0)
      goto LABEL_227;
    v96 = v16 + v94;
    v95 = v18 + v94;
    v93 += v94;
LABEL_69:
    v97 = v13 - v94;
    v98 = (char *)(v93 + 1);
    v99 = (_BYTE *)(v95 + 1);
    v100 = (char *)(v96 + 1);
    do
    {
      v102 = *v100++;
      v101 = v102;
      v103 = *v98++;
      *v99++ = v101 - v103;
      --v97;
    }
    while (v97);
    goto LABEL_87;
  }
  v94 = 0;
LABEL_227:
  v334 = v94;
  v94 = v13 & 0xFFFFFFFFFFFFFFF8;
  v335 = v93 + (v13 & 0xFFFFFFFFFFFFFFF8);
  v95 = v18 + (v13 & 0xFFFFFFFFFFFFFFF8);
  v96 = v16 + (v13 & 0xFFFFFFFFFFFFFFF8);
  v336 = v93 + 1;
  do
  {
    *(int8x8_t *)(v18 + v334 + 1) = vsub_s8(*(int8x8_t *)(v16 + 1 + v334), *(int8x8_t *)(v336 + v334));
    v334 += 8;
  }
  while (v94 != v334);
  v93 = v335;
  if (v13 != v94)
    goto LABEL_69;
LABEL_87:
  if (v12 != 64)
  {
    if ((v12 & 0x40) == 0)
      goto LABEL_149;
    v129 = *(_BYTE **)(a1 + 552);
    *v129 = 3;
    v130 = (int8x16_t *)(v129 + 1);
    v131 = *(_QWORD *)(a1 + 536);
    v132 = (uint8x16_t *)(v131 + 1);
    v133 = (unsigned __int8 *)(v16 + 1);
    if ((_DWORD)v14)
    {
      v134 = (v15 - 1);
      if (v134 < 0xF)
      {
        v135 = 0;
        LODWORD(v136) = 0;
LABEL_130:
        v159 = (unsigned __int8 *)(v16 + 1);
        v158 = v132;
        v157 = v129 + 1;
        goto LABEL_131;
      }
      LODWORD(v136) = 0;
      v135 = 0;
      if ((unint64_t)&v129[-v16] < 0x10 || (unint64_t)&v129[-v131] < 0x10)
        goto LABEL_130;
      v160 = v134 + 1;
      v136 = (v134 + 1) & 0x1FFFFFFF0;
      v159 = &v133[v136];
      v158 = (uint8x16_t *)((char *)v132 + v136);
      v157 = &v130->i8[v136];
      v161 = 0uLL;
      v162.i64[0] = 0x10000000100;
      v162.i64[1] = 0x10000000100;
      a8 = 0uLL;
      v163 = v136;
      v164 = (int8x16_t *)(v16 + 1);
      v165 = 0uLL;
      v166 = 0uLL;
      v167 = 0uLL;
      v10 = 0uLL;
      v168 = 0uLL;
      v169 = 0uLL;
      do
      {
        v170 = *v164++;
        v171 = v170;
        v172 = *v132++;
        v173 = vsubq_s8(v171, (int8x16_t)vshrq_n_u8(v172, 1uLL));
        *v130++ = v173;
        v174 = (int32x4_t)vqtbl1q_s8(v173, (int8x16_t)xmmword_1003BCAC0);
        v175 = (int32x4_t)vqtbl1q_s8(v173, (int8x16_t)xmmword_1003BCAB0);
        v176 = (int32x4_t)vqtbl1q_s8(v173, (int8x16_t)xmmword_1003BCAA0);
        v177 = (int32x4_t)vqtbl1q_s8(v173, (int8x16_t)xmmword_1003BCA90);
        v178 = vcltzq_s8(v173);
        v179 = vmovl_s8(*(int8x8_t *)v178.i8);
        v180 = vmovl_high_s8(v178);
        v181 = (int8x16_t)vmovl_s16(*(int16x4_t *)v180.i8);
        v182 = (uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v180), (int8x16_t)vsubq_s32(v162, v174), (int8x16_t)v174);
        v183 = (uint32x4_t)vbslq_s8(v181, (int8x16_t)vsubq_s32(v162, v175), (int8x16_t)v175);
        v184 = (uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v179), (int8x16_t)vsubq_s32(v162, v176), (int8x16_t)v176);
        v185 = (uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v179.i8), (int8x16_t)vsubq_s32(v162, v177), (int8x16_t)v177);
        v169 = (int64x2_t)vaddw_high_u32((uint64x2_t)v169, v182);
        v168 = (int64x2_t)vaddw_u32((uint64x2_t)v168, *(uint32x2_t *)v182.i8);
        v10 = (int16x8_t)vaddw_high_u32((uint64x2_t)v10, v183);
        v166 = (int64x2_t)vaddw_high_u32((uint64x2_t)v166, v184);
        v167 = (int64x2_t)vaddw_u32((uint64x2_t)v167, *(uint32x2_t *)v183.i8);
        v165 = (int64x2_t)vaddw_u32((uint64x2_t)v165, *(uint32x2_t *)v184.i8);
        a8 = (int8x16_t)vaddw_high_u32((uint64x2_t)a8, v185);
        v161 = (int64x2_t)vaddw_u32((uint64x2_t)v161, *(uint32x2_t *)v185.i8);
        v163 -= 16;
      }
      while (v163);
      a5 = vaddq_s64(v166, v169);
      v135 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v161, v167), vaddq_s64(v165, v168)), vaddq_s64(vaddq_s64((int64x2_t)a8, (int64x2_t)v10), a5)));
      if (v160 != v136)
      {
LABEL_131:
        v186 = v15 - v136;
        do
        {
          v188 = *v159++;
          v187 = v188;
          v189 = v158->u8[0];
          v158 = (uint8x16_t *)((char *)v158 + 1);
          LOBYTE(v190) = v187 - (v189 >> 1);
          *v157++ = v190;
          if ((v190 & 0x80u) == 0)
            v190 = v190;
          else
            v190 = 256 - v190;
          v135 += v190;
          --v186;
        }
        while (v186);
      }
    }
    else
    {
      v135 = 0;
      v157 = v129 + 1;
      v158 = (uint8x16_t *)(v131 + 1);
      v159 = (unsigned __int8 *)(v16 + 1);
    }
    if (v13 > v15)
    {
      v191 = v15 + 1;
      do
      {
        v193 = *v159++;
        v192 = v193;
        v195 = v158->u8[0];
        v158 = (uint8x16_t *)((char *)v158 + 1);
        v194 = v195;
        v196 = *v133++;
        LOBYTE(v197) = v192 - ((v196 + v194) >> 1);
        *v157++ = v197;
        if ((v197 & 0x80u) == 0)
          v197 = v197;
        else
          v197 = 256 - v197;
        v135 += v197;
        v198 = v191++;
        v199 = v135 <= v17 && v13 > v198;
      }
      while (v199);
    }
    if (v135 < v17)
    {
      v200 = *(_QWORD *)(a1 + 560);
      if (v200)
      {
        *(_QWORD *)(a1 + 552) = v200;
        *(_QWORD *)(a1 + 560) = v129;
      }
      v17 = v135;
      v18 = (uint64_t)v129;
    }
    goto LABEL_149;
  }
  v18 = *(_QWORD *)(a1 + 552);
  *(_BYTE *)v18 = 3;
  v116 = (int8x16_t *)(v18 + 1);
  v117 = *(_QWORD *)(a1 + 536);
  v118 = (uint8x16_t *)(v117 + 1);
  v119 = (int8x16_t *)(v16 + 1);
  if ((_DWORD)v14)
  {
    v120 = (v15 - 1);
    if (v120 >= 0xF)
    {
      LODWORD(v121) = 0;
      if ((unint64_t)(v18 - v16) >= 0x10 && (unint64_t)(v18 - v117) >= 0x10)
      {
        v150 = v120 + 1;
        v121 = (v120 + 1) & 0x1FFFFFFF0;
        v122 = (int8x16_t *)((char *)v119 + v121);
        v123 = (uint8x16_t *)((char *)v118 + v121);
        v124 = &v116->i8[v121];
        v151 = v121;
        do
        {
          v152 = *v119++;
          v153 = v152;
          v154 = *v118++;
          *v116++ = vsubq_s8(v153, (int8x16_t)vshrq_n_u8(v154, 1uLL));
          v151 -= 16;
        }
        while (v151);
        if (v150 == v121)
          goto LABEL_104;
        goto LABEL_92;
      }
    }
    else
    {
      LODWORD(v121) = 0;
    }
    v122 = (int8x16_t *)(v16 + 1);
    v123 = v118;
    v124 = (__int8 *)(v18 + 1);
LABEL_92:
    v125 = v15 - v121;
    do
    {
      v127 = v122->i8[0];
      v122 = (int8x16_t *)((char *)v122 + 1);
      v126 = v127;
      v128 = v123->u8[0];
      v123 = (uint8x16_t *)((char *)v123 + 1);
      *v124++ = v126 - (v128 >> 1);
      --v125;
    }
    while (v125);
    goto LABEL_104;
  }
  v124 = (__int8 *)(v18 + 1);
  v123 = (uint8x16_t *)(v117 + 1);
  v122 = (int8x16_t *)(v16 + 1);
LABEL_104:
  v137 = v13 - v15;
  if (v13 <= v15)
    goto LABEL_149;
  if (v137 < 8
    || (v155 = v13 + ~(unint64_t)v15, -2 - (int)v15 < v155)
    || HIDWORD(v155)
    || (unint64_t)&v124[~v16] < 0x20
    || (unint64_t)(v124 - (__int8 *)v122) < 0x20
    || (unint64_t)(v124 - (__int8 *)v123) < 0x20)
  {
    v138 = (unint64_t)(v14 + 7) >> 3;
    v139 = v16;
    v140 = (unsigned __int8 *)v123;
    v141 = v124;
    v142 = v122;
    goto LABEL_107;
  }
  if (v137 < 0x20)
  {
    v156 = 0;
    goto LABEL_288;
  }
  v156 = v137 & 0xFFFFFFFFFFFFFFE0;
  v414 = v122 + 1;
  v415 = (uint8x16_t *)(v16 + 17);
  v416 = (int8x16_t *)(v124 + 16);
  v417 = v123 + 1;
  v418 = v137 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    a8 = *(int8x16_t *)v415;
    a5 = (int64x2_t)vhaddq_u8(v415[-1], v417[-1]);
    v419 = vsubq_s8(v414[-1], (int8x16_t)a5);
    v420 = vsubq_s8(*v414, (int8x16_t)vhaddq_u8(*v415, *v417));
    v414 += 2;
    v416[-1] = v419;
    *v416 = v420;
    v415 += 2;
    v416 += 2;
    v417 += 2;
    v418 -= 32;
  }
  while (v418);
  if (v137 != v156)
  {
    if ((v137 & 0x18) == 0)
    {
      v142 = (int8x16_t *)((char *)v122 + v156);
      v141 = &v124[v156];
      v140 = &v123->u8[v156];
      v139 = v16 + v156;
      LODWORD(v138) = v15 + v156;
      goto LABEL_107;
    }
LABEL_288:
    LODWORD(v138) = v15 + (v137 & 0xFFFFFFF8);
    v139 = v16 + (v137 & 0xFFFFFFFFFFFFFFF8);
    v140 = &v123->u8[v137 & 0xFFFFFFFFFFFFFFF8];
    v141 = &v124[v137 & 0xFFFFFFFFFFFFFFF8];
    v142 = (int8x16_t *)((char *)v122 + (v137 & 0xFFFFFFFFFFFFFFF8));
    v421 = (uint8x8_t *)(v156 + v16 + 1);
    v422 = (int8x8_t *)&v122->i8[v156];
    v423 = (int8x8_t *)&v124[v156];
    v424 = (uint8x8_t *)&v123->i8[v156];
    v425 = v156 - (v137 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v426 = *v422++;
      v427 = v426;
      v428 = *v424++;
      v429 = v428;
      v430 = *v421++;
      *v423++ = vsub_s8(v427, (int8x8_t)vhadd_u8(v430, v429));
      v425 += 8;
    }
    while (v425);
    if (v137 == (v137 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_149;
LABEL_107:
    v143 = v138 + 1;
    v144 = (unsigned __int8 *)(v139 + 1);
    do
    {
      v146 = v142->i8[0];
      v142 = (int8x16_t *)((char *)v142 + 1);
      v145 = v146;
      v148 = *v140++;
      v147 = v148;
      v149 = *v144++;
      *v141++ = v145 - ((v149 + v147) >> 1);
      v199 = v13 > v143++;
    }
    while (v199);
  }
LABEL_149:
  if (v12 == 128)
  {
    v18 = *(_QWORD *)(a1 + 552);
    *(_BYTE *)v18 = 4;
    v201 = (int8x16_t *)(v18 + 1);
    v202 = *(_QWORD *)(a1 + 536);
    v203 = v15;
    v204 = (int8x16_t *)(v202 + 1);
    v205 = (int8x16_t *)(v16 + 1);
    if (!(_DWORD)v14)
    {
      v208 = (__int8 *)(v202 + 1);
      v207 = (__int8 *)(v16 + 1);
      goto LABEL_162;
    }
    if (v14 >= 0x79)
    {
      v206 = 0;
      if ((unint64_t)(v18 - v16) >= 0x10 && (unint64_t)(v18 - v202) >= 0x10)
      {
        v206 = ((unint64_t)(v14 + 7) >> 3) & 0x30;
        v207 = &v205->i8[v206];
        v208 = &v204->i8[v203 & 0x30];
        *v201 = vsubq_s8(*v205, *v204);
        if ((v203 & 0x30) != 0x10)
          *(int8x16_t *)(v18 + 17) = vsubq_s8(*(int8x16_t *)(v16 + 17), *(int8x16_t *)(v202 + 17));
        v201 = (int8x16_t *)((char *)v201 + (v203 & 0x30));
        if (v206 == v203)
        {
LABEL_162:
          v223 = v13 - v203;
          if (v13 <= v203)
            goto LABEL_266;
          if (v223 < 8
            || ((unint64_t)v201->u64 + ~v202 >= 0x10
              ? (v224 = (unint64_t)((char *)v201 - v208) >= 0x10)
              : (v224 = 0),
                v224 ? (v225 = (unint64_t)((char *)v201 - v207) >= 0x10) : (v225 = 0),
                v225 ? (v226 = (unint64_t)v201->u64 + ~v16 >= 0x10) : (v226 = 0),
                !v226))
          {
            v227 = v16;
            v228 = v202;
            v229 = v208;
            v230 = v201;
            v231 = v207;
            goto LABEL_175;
          }
          if (v223 >= 0x10)
          {
            v275 = v223 & 0xFFFFFFFFFFFFFFF0;
            a5.i64[1] = 0xFFFFFF07FFFFFF06;
            v371 = v223 & 0xFFFFFFFFFFFFFFF0;
            v372 = (int8x16_t *)v208;
            v373 = v201;
            v374 = (int8x16_t *)v207;
            do
            {
              v375 = *v372++;
              v376 = v375;
              v377 = (int32x4_t)vqtbl1q_s8(v375, (int8x16_t)xmmword_1003BCAC0);
              v378 = (int32x4_t)vqtbl1q_s8(v375, (int8x16_t)xmmword_1003BCAB0);
              v379 = (int32x4_t)vqtbl1q_s8(v375, (int8x16_t)xmmword_1003BCAA0);
              v380 = (int32x4_t)vqtbl1q_s8(v375, (int8x16_t)xmmword_1003BCA90);
              v381 = *v204++;
              v382 = v381;
              v383 = (int32x4_t)vqtbl1q_s8(v381, (int8x16_t)xmmword_1003BCAC0);
              v384 = (int32x4_t)vqtbl1q_s8(v381, (int8x16_t)xmmword_1003BCAB0);
              v385 = (int32x4_t)vqtbl1q_s8(v381, (int8x16_t)xmmword_1003BCAA0);
              v386 = (int32x4_t)vqtbl1q_s8(v381, (int8x16_t)xmmword_1003BCA90);
              v387 = *v205++;
              v388 = (int32x4_t)vqtbl1q_s8(v387, (int8x16_t)xmmword_1003BCAC0);
              v389 = (int32x4_t)vqtbl1q_s8(v387, (int8x16_t)xmmword_1003BCAB0);
              v390 = (int32x4_t)vqtbl1q_s8(v387, (int8x16_t)xmmword_1003BCAA0);
              v391 = (int32x4_t)vqtbl1q_s8(v387, (int8x16_t)xmmword_1003BCA90);
              v392 = vsubq_s32(v380, v386);
              v393 = vsubq_s32(v379, v385);
              v394 = vsubq_s32(v378, v384);
              v395 = vsubq_s32(v377, v383);
              v396 = vsubq_s32(v391, v386);
              v397 = vsubq_s32(v390, v385);
              v398 = vsubq_s32(v389, v384);
              v399 = vsubq_s32(v388, v383);
              v400 = vabdq_u32((uint32x4_t)v386, (uint32x4_t)v380);
              v401 = vabdq_u32((uint32x4_t)v385, (uint32x4_t)v379);
              v402 = vabdq_u32((uint32x4_t)v384, (uint32x4_t)v378);
              v403 = vabdq_u32((uint32x4_t)v383, (uint32x4_t)v377);
              v404 = vabdq_u32((uint32x4_t)v386, (uint32x4_t)v391);
              v405 = vabdq_u32((uint32x4_t)v385, (uint32x4_t)v390);
              v406 = vabdq_u32((uint32x4_t)v384, (uint32x4_t)v389);
              v407 = vabdq_u32((uint32x4_t)v383, (uint32x4_t)v388);
              v408 = (uint32x4_t)vabsq_s32(vaddq_s32(v396, v392));
              v409 = (uint32x4_t)vabsq_s32(vaddq_s32(v397, v393));
              v410 = (uint32x4_t)vabsq_s32(vaddq_s32(v398, v394));
              v411 = (uint32x4_t)vabsq_s32(vaddq_s32(v399, v395));
              a8 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v400, vminq_u32(v404, v408)), (int16x8_t)vcgtq_u32(v401, vminq_u32(v405, v409))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v402, vminq_u32(v406, v410)), (int16x8_t)vcgtq_u32(v403, vminq_u32(v407, v411))));
              v10 = (int16x8_t)vcgtq_u32(v404, v408);
              v412 = vbslq_s8(a8, vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16(v10, (int16x8_t)vcgtq_u32(v405, v409)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v406, v410), (int16x8_t)vcgtq_u32(v407, v411))), v382, v376), v387);
              v413 = *v374++;
              a8.i64[1] = v413.i64[1];
              *v373++ = vsubq_s8(v413, v412);
              v371 -= 16;
            }
            while (v371);
            if (v223 == v275)
              goto LABEL_266;
            if ((v223 & 8) == 0)
            {
              v231 = &v207[v275];
              v230 = (int8x16_t *)((char *)v201 + v275);
              v229 = &v208[v275];
              v228 = v202 + v275;
              v227 = v16 + v275;
              v203 += v275;
LABEL_175:
              v232 = v13 - v203;
              v233 = (unsigned __int8 *)(v227 + 1);
              v234 = (unsigned __int8 *)(v228 + 1);
              do
              {
                v236 = *v229++;
                v235 = v236;
                v238 = *v234++;
                v237 = v238;
                v240 = *v233++;
                v239 = v240;
                v241 = v240 - v237;
                if (v235 - v237 >= 0)
                  v242 = v235 - v237;
                else
                  v242 = v237 - v235;
                if (v241 >= 0)
                  v243 = v241;
                else
                  v243 = -v241;
                v244 = v241 + v235 - v237;
                if (v244 < 0)
                  v244 = -v244;
                if (v243 > v244)
                  LOBYTE(v235) = v237;
                if (v242 <= v244 && v242 <= v243)
                  LOBYTE(v235) = v239;
                v246 = *v231++;
                v230->i8[0] = v246 - v235;
                v230 = (int8x16_t *)((char *)v230 + 1);
                --v232;
              }
              while (v232);
              goto LABEL_266;
            }
          }
          else
          {
            v275 = 0;
          }
          v203 += v223 & 0xFFFFFFFFFFFFFFF8;
          v227 = v16 + (v223 & 0xFFFFFFFFFFFFFFF8);
          v228 = v202 + (v223 & 0xFFFFFFFFFFFFFFF8);
          v229 = &v208[v223 & 0xFFFFFFFFFFFFFFF8];
          v230 = (int8x16_t *)((char *)v201 + (v223 & 0xFFFFFFFFFFFFFFF8));
          v231 = &v207[v223 & 0xFFFFFFFFFFFFFFF8];
          v276 = (int8x8_t *)(v16 + v275 + 1);
          v277 = (unint64_t *)(v202 + v275 + 1);
          v278 = (int8x8_t *)&v207[v275];
          v279 = (int8x8_t *)&v201->i8[v275];
          v280 = (unint64_t *)&v208[v275];
          v281 = v275 - (v223 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v282 = *v280++;
            a5.i64[0] = v282;
            v283 = (int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_1003BCAA0);
            v284 = (int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_1003BCA90);
            v285 = *v277++;
            a8.i64[0] = v285;
            v286 = (int32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1003BCAA0);
            v287 = (int32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1003BCA90);
            v288 = *v276++;
            *(int8x8_t *)v10.i8 = v288;
            v289 = (int32x4_t)vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_1003BCAA0);
            v290 = (int32x4_t)vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_1003BCA90);
            v291 = vsubq_s32(v284, v287);
            v292 = vsubq_s32(v283, v286);
            v293 = vsubq_s32(v290, v287);
            v294 = vsubq_s32(v289, v286);
            v295 = vabdq_u32((uint32x4_t)v287, (uint32x4_t)v284);
            v296 = vabdq_u32((uint32x4_t)v286, (uint32x4_t)v283);
            v297 = vabdq_u32((uint32x4_t)v287, (uint32x4_t)v290);
            v298 = vabdq_u32((uint32x4_t)v286, (uint32x4_t)v289);
            v299 = (uint32x4_t)vabsq_s32(vaddq_s32(v293, v291));
            v300 = (uint32x4_t)vabsq_s32(vaddq_s32(v294, v292));
            v301 = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v295, vminq_u32(v297, v299)), (int16x8_t)vcgtq_u32(v296, vminq_u32(v298, v300)))), vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v297, v299), (int16x8_t)vcgtq_u32(v298, v300))), *(int8x8_t *)a8.i8, *(int8x8_t *)a5.i8), v288);
            v302 = *v278++;
            *v279++ = vsub_s8(v302, v301);
            v281 += 8;
          }
          while (v281);
          if (v223 == (v223 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_266;
          goto LABEL_175;
        }
LABEL_154:
        v209 = v203 - v206;
        do
        {
          v211 = *v207++;
          v210 = v211;
          v212 = *v208++;
          v201->i8[0] = v210 - v212;
          v201 = (int8x16_t *)((char *)v201 + 1);
          --v209;
        }
        while (v209);
        goto LABEL_162;
      }
    }
    else
    {
      v206 = 0;
    }
    v207 = (__int8 *)(v16 + 1);
    v208 = (__int8 *)(v202 + 1);
    goto LABEL_154;
  }
  if ((v12 & 0x80) == 0)
    goto LABEL_266;
  v213 = *(_QWORD *)(a1 + 552);
  *(_BYTE *)v213 = 4;
  v214 = (int8x16_t *)(v213 + 1);
  v215 = *(_QWORD *)(a1 + 536);
  v216 = v15;
  v217 = (int8x16_t *)(v215 + 1);
  v218 = (int8x16_t *)(v16 + 1);
  if ((_DWORD)v14)
  {
    if (v14 >= 0x79)
    {
      v219 = 0;
      if ((unint64_t)(v213 - v16) < 0x10 || (unint64_t)(v213 - v215) < 0x10)
      {
        v221 = (__int8 *)(v16 + 1);
        v222 = (__int8 *)(v215 + 1);
        v220 = 0;
      }
      else
      {
        v220 = v216 & 0x30;
        v221 = &v218->i8[v220];
        v222 = &v217->i8[v220];
        v247 = vsubq_s8(*v218, *v217);
        *v214 = v247;
        v248 = vmovl_u8(*(uint8x8_t *)v247.i8);
        v249 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v248.i8);
        v250 = vmovl_high_u8((uint8x16_t)v247);
        v251.i64[0] = 0x10000000100;
        v251.i64[1] = 0x10000000100;
        v252 = (int8x16_t)vsubw_u16(v251, *(uint16x4_t *)v248.i8);
        v253 = vcltzq_s8(v247);
        v254 = vmovl_s8(*(int8x8_t *)v253.i8);
        v255 = vmovl_high_s8(v253);
        v256 = (int8x16_t)vmovl_s16(*(int16x4_t *)v255.i8);
        v257 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v255), (int8x16_t)vsubw_high_u16(v251, v250), (int8x16_t)vmovl_high_u16(v250));
        v258 = (int32x4_t)vbslq_s8(v256, (int8x16_t)vsubw_u16(v251, *(uint16x4_t *)v250.i8), (int8x16_t)vmovl_u16(*(uint16x4_t *)v250.i8));
        v259 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v254), (int8x16_t)vsubw_high_u16(v251, v248), (int8x16_t)vmovl_high_u16(v248));
        v260 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v254.i8), v252, v249);
        if (v220 != 16)
        {
          v261 = vsubq_s8(*(int8x16_t *)(v16 + 17), *(int8x16_t *)(v215 + 17));
          *(int8x16_t *)(v213 + 17) = v261;
          v262 = vmovl_high_u8((uint8x16_t)v261);
          v263 = (int8x16_t)vmovl_high_u16(v262);
          v264 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v262.i8);
          v265 = vmovl_u8(*(uint8x8_t *)v261.i8);
          v266 = (int8x16_t)vmovl_high_u16(v265);
          v267 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v265.i8);
          v268 = (int8x16_t)vsubw_high_u16(v251, v262);
          v269 = (int8x16_t)vsubw_u16(v251, *(uint16x4_t *)v262.i8);
          v270 = (int8x16_t)vsubw_high_u16(v251, v265);
          v271 = (int8x16_t)vsubw_u16(v251, *(uint16x4_t *)v265.i8);
          v272 = vcltzq_s8(v261);
          v273 = vmovl_high_s8(v272);
          v274 = vmovl_s8(*(int8x8_t *)v272.i8);
          v257 = vaddq_s32(v257, (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v273), v268, v263));
          v258 = vaddq_s32(v258, (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v273.i8), v269, v264));
          v259 = vaddq_s32(v259, (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v274), v270, v266));
          v260 = vaddq_s32(v260, (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v274.i8), v271, v267));
        }
        v219 = vaddvq_s64(vaddq_s64(vaddq_s64((int64x2_t)vaddl_u32(*(uint32x2_t *)v260.i8, *(uint32x2_t *)v258.i8), (int64x2_t)vaddl_u32(*(uint32x2_t *)v259.i8, *(uint32x2_t *)v257.i8)), vaddq_s64((int64x2_t)vaddl_high_u32((uint32x4_t)v260, (uint32x4_t)v258), (int64x2_t)vaddl_high_u32((uint32x4_t)v259, (uint32x4_t)v257))));
        v214 = (int8x16_t *)((char *)v214 + (v216 & 0x30));
        if (v220 == v216)
          goto LABEL_237;
      }
    }
    else
    {
      v219 = 0;
      v220 = 0;
      v221 = (__int8 *)(v16 + 1);
      v222 = (__int8 *)(v215 + 1);
    }
    v337 = v216 - v220;
    do
    {
      v339 = *v221++;
      v338 = v339;
      v340 = *v222++;
      LOBYTE(v341) = v338 - v340;
      v214->i8[0] = v341;
      v214 = (int8x16_t *)((char *)v214 + 1);
      if ((v341 & 0x80u) == 0)
        v341 = v341;
      else
        v341 = 256 - v341;
      v219 += v341;
      --v337;
    }
    while (v337);
  }
  else
  {
    v219 = 0;
    v222 = (__int8 *)(v215 + 1);
    v221 = (__int8 *)(v16 + 1);
  }
LABEL_237:
  if (v13 > v216)
  {
    v342 = v216 + 1;
    do
    {
      v344 = *v222++;
      LODWORD(v343) = v344;
      v346 = v217->u8[0];
      v217 = (int8x16_t *)((char *)v217 + 1);
      v345 = v346;
      v348 = v218->u8[0];
      v218 = (int8x16_t *)((char *)v218 + 1);
      v347 = v348;
      v349 = v348 - v345;
      if ((int)v343 - v345 >= 0)
        v350 = v343 - v345;
      else
        v350 = v345 - v343;
      if (v349 >= 0)
        v351 = v349;
      else
        v351 = -v349;
      v352 = v349 + v343 - v345;
      if (v352 < 0)
        v352 = -v352;
      if (v351 > v352)
        LOBYTE(v343) = v345;
      if (v350 <= v352 && v350 <= v351)
        LOBYTE(v343) = v347;
      v354 = *v221++;
      LOBYTE(v343) = v354 - v343;
      v214->i8[0] = v343;
      v214 = (int8x16_t *)((char *)v214 + 1);
      if ((v343 & 0x80u) == 0)
        v343 = v343;
      else
        v343 = 256 - v343;
      v219 += v343;
    }
    while (v219 <= v17 && v342++ < v13);
  }
  if (v219 < v17)
  {
    v356 = *(_QWORD *)(a1 + 560);
    if (v356)
    {
      *(_QWORD *)(a1 + 552) = v356;
      *(_QWORD *)(a1 + 560) = v213;
    }
    v18 = v213;
  }
LABEL_266:
  sub_10036EA9C(a1, v18, *(_QWORD *)(a2 + 8) + 1, 0);
  v357 = *(_QWORD *)(a1 + 536);
  if (v357)
  {
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a1 + 544);
    *(_QWORD *)(a1 + 544) = v357;
  }
  sub_100371580(a1);
  v358 = *(_DWORD *)(a1 + 660) + 1;
  *(_DWORD *)(a1 + 660) = v358;
  if (*(_DWORD *)(a1 + 656) - 1 < v358)
    sub_10036D488(a1);
}

double sub_100372F64(char *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  double result;

  *((_QWORD *)a1 + 1) = 0;
  if (a2 != 90)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 40) = 0x5A0000000DLL;
    *(_DWORD *)(*(_QWORD *)a1 + 48) = a2;
    (**(void (***)(char *))a1)(a1);
  }
  if (a3 != 568)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 40) = 0x23800000016;
    *(_DWORD *)(*(_QWORD *)a1 + 48) = a3;
    (**(void (***)(char *))a1)(a1);
  }
  v5 = *(_QWORD *)a1;
  v6 = *((_QWORD *)a1 + 3);
  bzero(a1, 0x238uLL);
  *(_QWORD *)a1 = v5;
  *((_QWORD *)a1 + 3) = v6;
  a1[32] = 0;
  sub_1003A3648(a1);
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 5) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *((_QWORD *)a1 + 17) = 0;
  memset_pattern16(a1 + 144, &unk_1003C58E0, 0x10uLL);
  result = 0.0;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_DWORD *)a1 + 115) = 8;
  *((_QWORD *)a1 + 58) = dword_1003C68A0;
  *((_DWORD *)a1 + 118) = 63;
  *((_QWORD *)a1 + 69) = 0;
  *((_QWORD *)a1 + 8) = 0x3FF0000000000000;
  *((_DWORD *)a1 + 9) = 100;
  return result;
}

_QWORD *sub_100373084(_QWORD *result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = result[14];
  if (v2)
    *(_BYTE *)(v2 + 128) = a2;
  v3 = result[15];
  if (v3)
    *(_BYTE *)(v3 + 128) = a2;
  v4 = result[16];
  if (v4)
    *(_BYTE *)(v4 + 128) = a2;
  v5 = result[17];
  if (v5)
    *(_BYTE *)(v5 + 128) = a2;
  v6 = result[20];
  if (v6)
    *(_BYTE *)(v6 + 273) = a2;
  v7 = result[24];
  if (v7)
    *(_BYTE *)(v7 + 273) = a2;
  v8 = result[21];
  if (v8)
    *(_BYTE *)(v8 + 273) = a2;
  v9 = result[25];
  if (v9)
    *(_BYTE *)(v9 + 273) = a2;
  v10 = result[22];
  if (v10)
    *(_BYTE *)(v10 + 273) = a2;
  v11 = result[26];
  if (v11)
    *(_BYTE *)(v11 + 273) = a2;
  v12 = result[23];
  if (v12)
    *(_BYTE *)(v12 + 273) = a2;
  v13 = result[27];
  if (v13)
    *(_BYTE *)(v13 + 273) = a2;
  return result;
}

uint64_t sub_100373118(uint64_t a1)
{
  int v2;
  void (**v3)(uint64_t);
  void (**v4)(uint64_t);
  void (**v5)(uint64_t);
  uint64_t i;
  unint64_t v8;
  unint64_t j;
  uint64_t v10;
  void (**v11)(uint64_t);

  v2 = *(_DWORD *)(a1 + 36);
  if ((v2 - 101) >= 2)
  {
    if (v2 == 103)
      goto LABEL_8;
    v5 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v5 + 10) = 21;
    *((_DWORD *)v5 + 11) = v2;
    v4 = *(void (***)(uint64_t))a1;
  }
  else
  {
    if (*(_DWORD *)(a1 + 328) < *(_DWORD *)(a1 + 52))
    {
      v3 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v3 + 10) = 69;
      (*v3)(a1);
    }
    v4 = (void (**)(uint64_t))(*(_QWORD *)(a1 + 480) + 16);
  }
  (*v4)(a1);
LABEL_8:
  for (i = *(_QWORD *)(a1 + 480); !*(_BYTE *)(i + 25); i = *(_QWORD *)(a1 + 480))
  {
    (*(void (**)(uint64_t))i)(a1);
    v8 = *(unsigned int *)(a1 + 352);
    if ((_DWORD)v8)
    {
      for (j = 0; j < v8; ++j)
      {
        v10 = *(_QWORD *)(a1 + 16);
        if (v10)
        {
          *(_QWORD *)(v10 + 8) = j;
          *(_QWORD *)(v10 + 16) = v8;
          (*(void (**)(uint64_t))v10)(a1);
        }
        if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 504) + 8))(a1, 0))
        {
          v11 = *(void (***)(uint64_t))a1;
          *((_DWORD *)v11 + 10) = 25;
          (*v11)(a1);
        }
        v8 = *(unsigned int *)(a1 + 352);
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 480) + 16))(a1);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 512) + 24))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 32))(a1);
  return sub_10037FC58(a1);
}

uint64_t sub_10037326C(uint64_t a1, int a2)
{
  int v4;
  void (**v5)(_QWORD);
  uint64_t result;
  int v7;

  v4 = *(_DWORD *)(a1 + 36);
  if (v4 != 100)
  {
    v5 = *(void (***)(_QWORD))a1;
    *((_DWORD *)v5 + 10) = 21;
    *((_DWORD *)v5 + 11) = v4;
    (**(void (***)(uint64_t))a1)(a1);
  }
  if (a2)
    sub_100373084((_QWORD *)a1, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1);
  sub_10037AC28(a1);
  result = (**(uint64_t (***)(uint64_t))(a1 + 480))(a1);
  *(_DWORD *)(a1 + 328) = 0;
  if (*(_BYTE *)(a1 + 288))
    v7 = 102;
  else
    v7 = 101;
  *(_DWORD *)(a1 + 36) = v7;
  return result;
}

uint64_t sub_100373314(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  void (**v13)(uint64_t);
  void (**v14)(uint64_t);
  unsigned int v15;

  v6 = *(_DWORD *)(a1 + 36);
  if (v6 == 101)
  {
    if (*(_DWORD *)(a1 + 328) < *(_DWORD *)(a1 + 52))
      goto LABEL_3;
  }
  else
  {
    v13 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v13 + 10) = 21;
    *((_DWORD *)v13 + 11) = v6;
    (**(void (***)(uint64_t))a1)(a1);
    if (*(_DWORD *)(a1 + 328) < *(_DWORD *)(a1 + 52))
    {
LABEL_3:
      v7 = *(_QWORD *)(a1 + 16);
      if (!v7)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v14 = *(void (***)(uint64_t))a1;
  *((_DWORD *)v14 + 10) = 126;
  ((void (*)(uint64_t, uint64_t))v14[1])(a1, 0xFFFFFFFFLL);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
LABEL_4:
    v8 = *(unsigned int *)(a1 + 52);
    *(_QWORD *)(v7 + 8) = *(unsigned int *)(a1 + 328);
    *(_QWORD *)(v7 + 16) = v8;
    (*(void (**)(uint64_t))v7)(a1);
  }
LABEL_5:
  v9 = *(_QWORD *)(a1 + 480);
  if (*(_BYTE *)(v9 + 24))
    (*(void (**)(uint64_t))(v9 + 8))(a1);
  v10 = *(_DWORD *)(a1 + 52) - *(_DWORD *)(a1 + 328);
  if (v10 >= a3)
    v11 = a3;
  else
    v11 = v10;
  v15 = 0;
  (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t))(*(_QWORD *)(a1 + 488) + 8))(a1, a2, &v15, v11);
  result = v15;
  *(_DWORD *)(a1 + 328) += v15;
  return result;
}

_OWORD *sub_100373430(uint64_t a1)
{
  uint64_t v2;
  _OWORD *result;

  v2 = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 544) = v2;
  *(_QWORD *)v2 = sub_1003734BC;
  *(_QWORD *)(v2 + 16) = sub_1003736FC;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_BYTE *)(v2 + 360) = 113;
  *(_OWORD *)(v2 + 104) = 0u;
  result = (_OWORD *)(v2 + 104);
  result[14] = 0u;
  result[15] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  result[10] = 0u;
  result[11] = 0u;
  return result;
}

double sub_1003734BC(uint64_t a1, int a2)
{
  uint64_t v3;
  void (**v4)(uint64_t);
  int v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  unsigned int v12;
  void (**v13)(uint64_t);
  unsigned int v14;
  void (**v15)(uint64_t);
  uint64_t v16;
  _OWORD *v17;
  _QWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  double result;

  v3 = *(_QWORD *)(a1 + 544);
  if (a2)
  {
    v4 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v4 + 10) = 49;
    (*v4)(a1);
  }
  if (!*(_BYTE *)(a1 + 332))
  {
    *(_QWORD *)(v3 + 8) = sub_1003744D8;
    if (*(int *)(a1 + 356) < 1)
      goto LABEL_32;
    goto LABEL_16;
  }
  v5 = *(_DWORD *)(a1 + 444);
  if (*(_DWORD *)(a1 + 452))
  {
    if (v5)
    {
      *(_QWORD *)(v3 + 8) = sub_100374274;
      if (*(int *)(a1 + 356) < 1)
        goto LABEL_32;
    }
    else
    {
      *(_QWORD *)(v3 + 8) = sub_1003741C0;
      if (*(int *)(a1 + 356) < 1)
        goto LABEL_32;
    }
    goto LABEL_16;
  }
  if (v5)
  {
    *(_QWORD *)(v3 + 8) = sub_100373EC8;
    if (*(int *)(a1 + 356) < 1)
      goto LABEL_32;
    goto LABEL_16;
  }
  *(_QWORD *)(v3 + 8) = sub_100373C84;
  if (*(int *)(a1 + 356) >= 1)
  {
LABEL_16:
    v6 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(a1 + 8 * v6 + 360);
      if (!*(_DWORD *)(a1 + 444) && !*(_DWORD *)(a1 + 452))
        break;
      if (*(_DWORD *)(a1 + 448))
        goto LABEL_24;
LABEL_20:
      if (++v6 >= *(int *)(a1 + 356))
        goto LABEL_32;
    }
    v14 = *(_DWORD *)(v11 + 20);
    if (v14 >= 0x10)
    {
      v15 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v15 + 10) = 50;
      *((_DWORD *)v15 + 11) = v14;
      (**(void (***)(uint64_t))a1)(a1);
    }
    v16 = v3 + 8 * (int)v14;
    v19 = *(_OWORD **)(v16 + 104);
    v18 = (_QWORD *)(v16 + 104);
    v17 = v19;
    if (!v19)
    {
      v17 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 64);
      *v18 = v17;
    }
    v17[2] = 0u;
    v17[3] = 0u;
    *v17 = 0u;
    v17[1] = 0u;
    v20 = v3 + 4 * v6;
    *(_DWORD *)(v20 + 64) = 0;
    *(_DWORD *)(v20 + 80) = 0;
    if (!*(_DWORD *)(a1 + 448))
      goto LABEL_20;
LABEL_24:
    v12 = *(_DWORD *)(v11 + 24);
    if (v12 >= 0x10)
    {
      v13 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v13 + 10) = 50;
      *((_DWORD *)v13 + 11) = v12;
      (**(void (***)(uint64_t))a1)(a1);
    }
    v7 = v3 + 8 * (int)v12;
    v10 = *(_OWORD **)(v7 + 232);
    v9 = (_QWORD *)(v7 + 232);
    v8 = v10;
    if (!v10)
    {
      v8 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 256);
      *v9 = v8;
    }
    v8[14] = 0u;
    v8[15] = 0u;
    v8[12] = 0u;
    v8[13] = 0u;
    v8[10] = 0u;
    v8[11] = 0u;
    v8[8] = 0u;
    v8[9] = 0u;
    v8[6] = 0u;
    v8[7] = 0u;
    v8[4] = 0u;
    v8[5] = 0u;
    v8[2] = 0u;
    v8[3] = 0u;
    *v8 = 0u;
    v8[1] = 0u;
    goto LABEL_20;
  }
LABEL_32:
  *(_OWORD *)(v3 + 24) = xmmword_1003C58F0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  result = NAN;
  *(_QWORD *)(v3 + 56) = -4294967285;
  *(_QWORD *)(v3 + 96) = *(unsigned int *)(a1 + 304);
  return result;
}

uint64_t sub_1003736FC(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v1 = (uint64_t *)result;
  v2 = *(_QWORD *)(result + 544);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = (*(_DWORD *)(v2 + 32) + (_DWORD)v3 - 1) & 0xFFFF0000;
  if (v4 >= v3)
    v5 = (*(_DWORD *)(v2 + 32) + (_DWORD)v3 - 1) & 0xFFFF0000;
  else
    v5 = v4 | 0x8000;
  v6 = *(_DWORD *)(v2 + 60);
  v7 = v5 << *(_DWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 24) = v7;
  if ((v7 & 0xF8000000) != 0)
  {
    if ((v6 & 0x80000000) == 0)
    {
      if (*(_QWORD *)(v2 + 48))
      {
        do
        {
          v9 = v1[5];
          v10 = (_BYTE *)(*(_QWORD *)v9)++;
          *v10 = 0;
          v11 = *(_QWORD *)(v9 + 8) - 1;
          *(_QWORD *)(v9 + 8) = v11;
          if (!v11)
          {
            result = (*(uint64_t (**)(uint64_t *))(v9 + 24))(v1);
            if (!(_DWORD)result)
            {
              v12 = *v1;
              *(_DWORD *)(v12 + 40) = 25;
              result = (*(uint64_t (**)(uint64_t *))v12)(v1);
            }
          }
          v8 = *(_QWORD *)(v2 + 48) - 1;
          *(_QWORD *)(v2 + 48) = v8;
        }
        while (v8);
        v6 = *(_DWORD *)(v2 + 60);
      }
      v18 = v1[5];
      v19 = (_BYTE *)(*(_QWORD *)v18)++;
      *v19 = v6 + 1;
      v20 = *(_QWORD *)(v18 + 8) - 1;
      *(_QWORD *)(v18 + 8) = v20;
      if (!v20)
      {
        result = (*(uint64_t (**)(uint64_t *))(v18 + 24))(v1);
        if (!(_DWORD)result)
        {
          v21 = *v1;
          *(_DWORD *)(v21 + 40) = 25;
          result = (*(uint64_t (**)(uint64_t *))v21)(v1);
        }
      }
      if (*(_DWORD *)(v2 + 60) == 254)
      {
        v22 = v1[5];
        v23 = (_BYTE *)(*(_QWORD *)v22)++;
        *v23 = 0;
        v24 = *(_QWORD *)(v22 + 8) - 1;
        *(_QWORD *)(v22 + 8) = v24;
        if (!v24)
        {
          result = (*(uint64_t (**)(uint64_t *))(v22 + 24))(v1);
          if (!(_DWORD)result)
          {
            v25 = *v1;
            *(_DWORD *)(v25 + 40) = 25;
            result = (*(uint64_t (**)(uint64_t *))v25)(v1);
          }
        }
      }
    }
    v26 = *(_QWORD *)(v2 + 48) + *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = v26;
  }
  else
  {
    if (v6)
    {
      if ((v6 & 0x80000000) == 0)
      {
        if (*(_QWORD *)(v2 + 48))
        {
          do
          {
            v14 = v1[5];
            v15 = (_BYTE *)(*(_QWORD *)v14)++;
            *v15 = 0;
            v16 = *(_QWORD *)(v14 + 8) - 1;
            *(_QWORD *)(v14 + 8) = v16;
            if (!v16)
            {
              result = (*(uint64_t (**)(uint64_t *))(v14 + 24))(v1);
              if (!(_DWORD)result)
              {
                v17 = *v1;
                *(_DWORD *)(v17 + 40) = 25;
                result = (*(uint64_t (**)(uint64_t *))v17)(v1);
              }
            }
            v13 = *(_QWORD *)(v2 + 48) - 1;
            *(_QWORD *)(v2 + 48) = v13;
          }
          while (v13);
          v6 = *(_DWORD *)(v2 + 60);
        }
        v48 = v1[5];
        v49 = (_BYTE *)(*(_QWORD *)v48)++;
        *v49 = v6;
        v50 = *(_QWORD *)(v48 + 8) - 1;
        *(_QWORD *)(v48 + 8) = v50;
        if (!v50)
        {
          result = (*(uint64_t (**)(uint64_t *))(v48 + 24))(v1);
          if (!(_DWORD)result)
          {
            v51 = *v1;
            *(_DWORD *)(v51 + 40) = 25;
            result = (*(uint64_t (**)(uint64_t *))v51)(v1);
          }
        }
      }
    }
    else
    {
      ++*(_QWORD *)(v2 + 48);
    }
    if (*(_QWORD *)(v2 + 40))
    {
      if (*(_QWORD *)(v2 + 48))
      {
        do
        {
          v53 = v1[5];
          v54 = (_BYTE *)(*(_QWORD *)v53)++;
          *v54 = 0;
          v55 = *(_QWORD *)(v53 + 8) - 1;
          *(_QWORD *)(v53 + 8) = v55;
          if (!v55)
          {
            result = (*(uint64_t (**)(uint64_t *))(v53 + 24))(v1);
            if (!(_DWORD)result)
            {
              v56 = *v1;
              *(_DWORD *)(v56 + 40) = 25;
              result = (*(uint64_t (**)(uint64_t *))v56)(v1);
            }
          }
          v52 = *(_QWORD *)(v2 + 48) - 1;
          *(_QWORD *)(v2 + 48) = v52;
        }
        while (v52);
      }
      do
      {
        v58 = v1[5];
        v59 = (_BYTE *)(*(_QWORD *)v58)++;
        *v59 = -1;
        v60 = *(_QWORD *)(v58 + 8) - 1;
        *(_QWORD *)(v58 + 8) = v60;
        if (!v60)
        {
          result = (*(uint64_t (**)(uint64_t *))(v58 + 24))(v1);
          if (!(_DWORD)result)
          {
            v61 = *v1;
            *(_DWORD *)(v61 + 40) = 25;
            result = (*(uint64_t (**)(uint64_t *))v61)(v1);
          }
        }
        v62 = v1[5];
        v63 = (_BYTE *)(*(_QWORD *)v62)++;
        *v63 = 0;
        v64 = *(_QWORD *)(v62 + 8) - 1;
        *(_QWORD *)(v62 + 8) = v64;
        if (!v64)
        {
          result = (*(uint64_t (**)(uint64_t *))(v62 + 24))(v1);
          if (!(_DWORD)result)
          {
            v65 = *v1;
            *(_DWORD *)(v65 + 40) = 25;
            result = (*(uint64_t (**)(uint64_t *))v65)(v1);
          }
        }
        v57 = *(_QWORD *)(v2 + 40) - 1;
        *(_QWORD *)(v2 + 40) = v57;
      }
      while (v57);
    }
  }
  v27 = *(_QWORD *)(v2 + 24);
  if ((v27 & 0x7FFF800) != 0)
  {
    if (*(_QWORD *)(v2 + 48))
    {
      do
      {
        v29 = v1[5];
        v30 = (_BYTE *)(*(_QWORD *)v29)++;
        *v30 = 0;
        v31 = *(_QWORD *)(v29 + 8) - 1;
        *(_QWORD *)(v29 + 8) = v31;
        if (!v31)
        {
          result = (*(uint64_t (**)(uint64_t *))(v29 + 24))(v1);
          if (!(_DWORD)result)
          {
            v32 = *v1;
            *(_DWORD *)(v32 + 40) = 25;
            result = (*(uint64_t (**)(uint64_t *))v32)(v1);
          }
        }
        v28 = *(_QWORD *)(v2 + 48) - 1;
        *(_QWORD *)(v2 + 48) = v28;
      }
      while (v28);
      v27 = *(_QWORD *)(v2 + 24);
    }
    v33 = v1[5];
    v34 = (_BYTE *)(*(_QWORD *)v33)++;
    *v34 = v27 >> 19;
    v35 = *(_QWORD *)(v33 + 8) - 1;
    *(_QWORD *)(v33 + 8) = v35;
    if (!v35)
    {
      result = (*(uint64_t (**)(uint64_t *))(v33 + 24))(v1);
      if (!(_DWORD)result)
      {
        v36 = *v1;
        *(_DWORD *)(v36 + 40) = 25;
        result = (*(uint64_t (**)(uint64_t *))v36)(v1);
      }
    }
    if ((~*(_DWORD *)(v2 + 24) & 0x7F80000) != 0
      || (v37 = v1[5],
          v38 = *(_BYTE **)v37,
          ++*(_QWORD *)v37,
          *v38 = 0,
          v39 = *(_QWORD *)(v37 + 8) - 1,
          (*(_QWORD *)(v37 + 8) = v39) != 0)
      || (result = (*(uint64_t (**)(uint64_t *))(v37 + 24))(v1), (_DWORD)result))
    {
      v40 = *(_QWORD *)(v2 + 24);
      if ((v40 & 0x7F800) == 0)
        return result;
    }
    else
    {
      v67 = *v1;
      *(_DWORD *)(v67 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t *))v67)(v1);
      v40 = *(_QWORD *)(v2 + 24);
      if ((v40 & 0x7F800) == 0)
        return result;
    }
    v41 = v1[5];
    v42 = (_BYTE *)(*(_QWORD *)v41)++;
    *v42 = v40 >> 11;
    v43 = *(_QWORD *)(v41 + 8) - 1;
    *(_QWORD *)(v41 + 8) = v43;
    if (v43 || (result = (*(uint64_t (**)(uint64_t *))(v41 + 24))(v1), (_DWORD)result))
    {
      if ((~*(_DWORD *)(v2 + 24) & 0x7F800) != 0)
        return result;
    }
    else
    {
      v66 = *v1;
      *(_DWORD *)(v66 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t *))v66)(v1);
      if ((~*(_DWORD *)(v2 + 24) & 0x7F800) != 0)
        return result;
    }
    v44 = v1[5];
    v45 = (_BYTE *)(*(_QWORD *)v44)++;
    *v45 = 0;
    v46 = *(_QWORD *)(v44 + 8) - 1;
    *(_QWORD *)(v44 + 8) = v46;
    if (!v46)
    {
      result = (*(uint64_t (**)(uint64_t *))(v44 + 24))(v1);
      if (!(_DWORD)result)
      {
        v47 = *v1;
        *(_DWORD *)(v47 + 40) = 25;
        return (*(uint64_t (**)(uint64_t *))v47)(v1);
      }
    }
  }
  return result;
}

uint64_t sub_100373C84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int *v15;
  _BYTE *v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  _BYTE *v27;

  v3 = *(_QWORD *)(a1 + 544);
  if (*(_DWORD *)(a1 + 304))
  {
    v4 = *(_DWORD *)(v3 + 96);
    if (!v4)
    {
      sub_1003749A8(a1, *(_DWORD *)(v3 + 100));
      v4 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)(v3 + 100) = (*(_DWORD *)(v3 + 100) + 1) & 7;
    }
    *(_DWORD *)(v3 + 96) = v4 - 1;
  }
  if (*(int *)(a1 + 400) >= 1)
  {
    v5 = 0;
    while (1)
    {
      v6 = *(int *)(a1 + 4 * v5 + 404);
      v7 = *(int *)(*(_QWORD *)(a1 + 8 * v6 + 360) + 20);
      v8 = v3 + 8 * v7;
      v11 = *(_QWORD *)(v8 + 104);
      v10 = (_QWORD *)(v8 + 104);
      v9 = v11;
      v12 = v3 + 4 * v6;
      LODWORD(v11) = *(_DWORD *)(v12 + 64);
      v13 = (int *)(v12 + 64);
      v14 = **(__int16 **)(a2 + 8 * v5) >> *(_DWORD *)(a1 + 456);
      v15 = v13 + 4;
      v16 = (_BYTE *)(v9 + v13[4]);
      v17 = v14 - v11;
      if (v14 != (_DWORD)v11)
        break;
      sub_100374B38(a1, (_BYTE *)(v9 + v13[4]), 0);
      *v15 = 0;
LABEL_8:
      if (++v5 >= *(int *)(a1 + 400))
        return 1;
    }
    *v13 = v14;
    sub_100374B38(a1, v16, 1);
    v18 = v17 <= 0;
    if (v17 <= 0)
      v19 = 3;
    else
      v19 = 2;
    if (v17 <= 0)
      v20 = 8;
    else
      v20 = 4;
    if (v17 <= 0)
      v17 = -v17;
    sub_100374B38(a1, v16 + 1, v18);
    v21 = &v16[v19];
    *v15 = v20;
    v22 = v17 - 1;
    if (v22)
    {
      v23 = 1;
      sub_100374B38(a1, v21, 1);
      v21 = (_BYTE *)(*v10 + 20);
      if (v22 != 1)
      {
        v24 = v22;
        do
        {
          sub_100374B38(a1, v21, 1);
          v23 *= 2;
          ++v21;
          v25 = v24 > 3;
          v24 >>= 1;
        }
        while (v25);
      }
    }
    else
    {
      v23 = 0;
    }
    sub_100374B38(a1, v21, 0);
    v26 = 0;
    if (v23 >= (int)((unint64_t)(1 << *(_BYTE *)(a1 + v7 + 224)) >> 1))
    {
      if (v23 <= (int)((unint64_t)(1 << *(_BYTE *)(a1 + v7 + 240)) >> 1))
        goto LABEL_28;
      v26 = *v15 + 8;
    }
    *v15 = v26;
LABEL_28:
    if (v23 >= 2)
    {
      v27 = v21 + 14;
      do
      {
        sub_100374B38(a1, v27, ((v23 >> 1) & v22) != 0);
        v25 = v23 > 3;
        v23 >>= 1;
      }
      while (v25);
    }
    goto LABEL_8;
  }
  return 1;
}

uint64_t sub_100373EC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t *v20;
  _BYTE *v21;
  int *v22;
  _BYTE *v23;
  int i;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  _BYTE *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  int v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  _BYTE *v43;

  v4 = *(_QWORD *)(a1 + 544);
  if (*(_DWORD *)(a1 + 304))
  {
    v5 = *(_DWORD *)(v4 + 96);
    if (!v5)
    {
      sub_1003749A8(a1, *(_DWORD *)(v4 + 100));
      v5 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)(v4 + 100) = (*(_DWORD *)(v4 + 100) + 1) & 7;
    }
    *(_DWORD *)(v4 + 96) = v5 - 1;
  }
  v6 = 0;
  v7 = *(_QWORD *)(a1 + 464);
  v8 = *a2;
  v9 = *(int *)(*(_QWORD *)(a1 + 360) + 24);
  v10 = *(int *)(a1 + 448);
  v11 = *(_DWORD *)(a1 + 448);
  v12 = v7 + 4 * v10;
  v13 = v10 - 1;
  do
  {
    v14 = *(__int16 *)(v8 + 2 * *(int *)(v12 + 4 * v6));
    if ((v14 & 0x80000000) != 0)
      v14 = -v14;
    if (v14 >> *(_DWORD *)(a1 + 456))
    {
      v16 = v11 + v6;
      v19 = *(_DWORD *)(a1 + 444);
      v18 = v19 - 1;
      if (v19 > v16)
        goto LABEL_36;
      goto LABEL_13;
    }
  }
  while (v13 + (_DWORD)v6--);
  v16 = 0;
  v17 = *(_DWORD *)(a1 + 444);
  v18 = v17 - 1;
  if (v17 <= 0)
  {
LABEL_13:
    v20 = (uint64_t *)(v4 + 8 * v9 + 232);
    v39 = *(int *)(*(_QWORD *)(a1 + 360) + 24);
    v40 = v4;
    v41 = (unsigned __int8 *)(a1 + v9 + 256);
    v42 = v7 + 4;
    v43 = (_BYTE *)(v4 + 360);
    while (1)
    {
      v21 = (_BYTE *)(*v20 + 3 * v18);
      sub_100374B38(a1, v21, 0);
      v22 = (int *)(v42 + 4 * v18);
      v23 = v21 + 1;
      for (i = v18; ; ++i)
      {
        v26 = *v22++;
        v27 = *(__int16 *)(v8 + 2 * v26);
        if ((v27 & 0x80000000) != 0)
          break;
        v25 = v27 >> *(_DWORD *)(a1 + 456);
        if (v25)
        {
          v28 = 0;
          goto LABEL_23;
        }
LABEL_18:
        sub_100374B38(a1, v23, 0);
        v23 += 3;
      }
      v25 = -v27 >> *(_DWORD *)(a1 + 456);
      if (!v25)
        goto LABEL_18;
      v28 = 1;
LABEL_23:
      sub_100374B38(a1, v23, 1);
      sub_100374B38(a1, v43, v28);
      v29 = v23 + 1;
      v30 = v25 - 1;
      if (v25 == 1 || (sub_100374B38(a1, v29, 1), v25 == 2))
      {
        sub_100374B38(a1, v29, 0);
      }
      else
      {
        sub_100374B38(a1, v29, 1);
        v31 = *v20;
        v32 = 217;
        if (i < *v41)
          v32 = 189;
        v33 = (_BYTE *)(v31 + v32);
        if (v25 >= 5)
        {
          v35 = 2;
          v36 = v30;
          do
          {
            sub_100374B38(a1, v33, 1);
            v35 *= 2;
            ++v33;
            v37 = v36 >= 8;
            v36 >>= 1;
          }
          while (v37);
          sub_100374B38(a1, v33, 0);
          if (v35)
          {
            v34 = v33 + 14;
            goto LABEL_33;
          }
        }
        else
        {
          sub_100374B38(a1, (_BYTE *)(v31 + v32), 0);
          v34 = v33 + 14;
          v35 = 2;
          do
          {
LABEL_33:
            sub_100374B38(a1, v34, ((v35 >> 1) & v30) != 0);
            v37 = v35 >= 4;
            v35 >>= 1;
          }
          while (v37);
        }
      }
      v18 = i + 1;
      if (v16 <= i + 1)
      {
        v11 = *(_DWORD *)(a1 + 448);
        v18 = i + 1;
        v9 = v39;
        v4 = v40;
        break;
      }
    }
  }
LABEL_36:
  if (v18 < v11)
    sub_100374B38(a1, (_BYTE *)(*(_QWORD *)(v4 + 8 * v9 + 232) + 3 * v18), 1);
  return 1;
}

uint64_t sub_1003741C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;

  v4 = *(_QWORD *)(a1 + 544);
  if (*(_DWORD *)(a1 + 304))
  {
    v5 = *(_DWORD *)(v4 + 96);
    if (!v5)
    {
      sub_1003749A8(a1, *(_DWORD *)(v4 + 100));
      v5 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)(v4 + 100) = (*(_DWORD *)(v4 + 100) + 1) & 7;
    }
    *(_DWORD *)(v4 + 96) = v5 - 1;
  }
  if (*(int *)(a1 + 400) >= 1)
  {
    v6 = 0;
    v7 = (_BYTE *)(v4 + 360);
    v8 = *(_DWORD *)(a1 + 456);
    do
      sub_100374B38(a1, v7, (**(__int16 **)(a2 + 8 * v6++) >> v8) & 1);
    while (v6 < *(int *)(a1 + 400));
  }
  return 1;
}

uint64_t sub_100374274(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v18;
  int v19;
  _QWORD *v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  _BYTE *i;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a1 + 544);
  if (*(_DWORD *)(a1 + 304))
  {
    v5 = *(_DWORD *)(v4 + 96);
    if (!v5)
    {
      sub_1003749A8(a1, *(_DWORD *)(v4 + 100));
      v5 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)(v4 + 100) = (*(_DWORD *)(v4 + 100) + 1) & 7;
    }
    *(_DWORD *)(v4 + 96) = v5 - 1;
  }
  v6 = 0;
  v7 = *(_QWORD *)(a1 + 464);
  v8 = *a2;
  v9 = *(int *)(*(_QWORD *)(a1 + 360) + 24);
  v10 = *(int *)(a1 + 448);
  v11 = *(_DWORD *)(a1 + 448);
  while (1)
  {
    v12 = *(__int16 *)(v8 + 2 * *(int *)(v7 + 4 * v10 + 4 * v6));
    if ((v12 & 0x80000000) != 0)
      v12 = -v12;
    if (v12 >> *(_DWORD *)(a1 + 456))
      break;
    v13 = v10 + v6--;
    if (v13 == 1)
    {
      v14 = 0;
LABEL_18:
      LODWORD(v15) = 0;
      goto LABEL_19;
    }
  }
  v14 = v11 + v6;
  if (v11 + (int)v6 > 0)
  {
    v15 = (v10 + v6);
    while (1)
    {
      v16 = *(__int16 *)(v8 + 2 * *(int *)(v7 + 4 * v15));
      if ((v16 & 0x80000000) != 0)
        v16 = -v16;
      if (v16 >> *(_DWORD *)(a1 + 452))
        break;
      if (v15-- <= 1)
        goto LABEL_18;
    }
LABEL_19:
    v18 = *(_DWORD *)(a1 + 444);
    v19 = v18 - 1;
    if (v18 > v14)
      goto LABEL_35;
    goto LABEL_20;
  }
  LODWORD(v15) = v11 + v6;
  v33 = *(_DWORD *)(a1 + 444);
  v19 = v33 - 1;
  if (v33 <= v14)
  {
LABEL_20:
    v34 = *(int *)(*(_QWORD *)(a1 + 360) + 24);
    v35 = v4;
    v20 = (_QWORD *)(v4 + 8 * v9 + 232);
    v21 = (_BYTE *)(v4 + 360);
    v22 = v7 + 4;
    while (1)
    {
      v26 = *v20 + 3 * v19;
      if (v19 >= (int)v15)
        sub_100374B38(a1, (_BYTE *)(*v20 + 3 * v19), 0);
      v27 = (int *)(v22 + 4 * v19++);
      for (i = (_BYTE *)(v26 + 1); ; i += 3)
      {
        v30 = *v27++;
        v31 = *(__int16 *)(v8 + 2 * v30);
        if ((v31 & 0x80000000) != 0)
          break;
        v29 = v31 >> *(_DWORD *)(a1 + 456);
        if (v29)
        {
          if (v29 == 1)
          {
            sub_100374B38(a1, i, 1);
            v25 = a1;
            v23 = v21;
            v24 = 0;
            goto LABEL_22;
          }
LABEL_21:
          v23 = i + 1;
          v24 = v29 & 1;
          v25 = a1;
          goto LABEL_22;
        }
LABEL_27:
        sub_100374B38(a1, i, 0);
        ++v19;
      }
      v29 = -v31 >> *(_DWORD *)(a1 + 456);
      if (!v29)
        goto LABEL_27;
      if (v29 != 1)
        goto LABEL_21;
      sub_100374B38(a1, i, 1);
      v25 = a1;
      v23 = v21;
      v24 = 1;
LABEL_22:
      sub_100374B38(v25, v23, v24);
      if (v14 <= v19)
      {
        v11 = *(_DWORD *)(a1 + 448);
        v9 = v34;
        v4 = v35;
        break;
      }
    }
  }
LABEL_35:
  if (v19 < v11)
    sub_100374B38(a1, (_BYTE *)(*(_QWORD *)(v4 + 8 * v9 + 232) + 3 * v19), 1);
  return 1;
}

uint64_t sub_1003744D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int *v16;
  _BYTE *v17;
  int v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  _BYTE *v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  uint64_t *v35;
  _BYTE *v36;
  int v37;
  int v38;
  int *v39;
  uint64_t v40;
  _BOOL4 v41;
  _BYTE *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  int v48;
  int v49;
  BOOL v50;
  uint64_t v52;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;

  v3 = *(_QWORD *)(a1 + 544);
  if (*(_DWORD *)(a1 + 304))
  {
    v4 = *(_DWORD *)(v3 + 96);
    if (!v4)
    {
      sub_1003749A8(a1, *(_DWORD *)(v3 + 100));
      v4 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)(v3 + 100) = (*(_DWORD *)(v3 + 100) + 1) & 7;
    }
    *(_DWORD *)(v3 + 96) = v4 - 1;
  }
  if (*(int *)(a1 + 400) >= 1)
  {
    v5 = 0;
    v58 = *(_QWORD *)(a1 + 464);
    while (1)
    {
      v6 = *(__int16 **)(a2 + 8 * v5);
      v7 = *(int *)(a1 + 4 * v5 + 404);
      v8 = *(_QWORD *)(a1 + 8 * v7 + 360);
      v9 = *(int *)(v8 + 20);
      v10 = v3 + 8 * v9;
      v13 = *(_QWORD *)(v10 + 104);
      v12 = (_QWORD *)(v10 + 104);
      v11 = v13;
      v14 = v3 + 4 * v7;
      LODWORD(v13) = *(_DWORD *)(v14 + 64);
      v15 = (_DWORD *)(v14 + 64);
      v16 = v15 + 4;
      v17 = (_BYTE *)(v11 + (int)v15[4]);
      v18 = *v6;
      v19 = v18 - v13;
      v54 = v5;
      v56 = v8;
      if (v18 != (_DWORD)v13)
        break;
      sub_100374B38(a1, v17, 0);
      *v16 = 0;
LABEL_31:
      v29 = *(_DWORD *)(a1 + 472);
      v30 = (_BYTE *)(v3 + 360);
      if (!v29)
        goto LABEL_7;
      v31 = 0;
      v32 = *(int *)(v56 + 24);
      while (!v6[*(int *)(v58 + 4 * v29 + 4 * v31)])
      {
        if (!(v29 - 1 + (_DWORD)v31--))
          goto LABEL_60;
      }
      if (v29 + (int)v31 > 0)
      {
        v34 = 0;
        v57 = v29 + v31;
        v35 = (uint64_t *)(v3 + 8 * v32 + 232);
        v52 = v32;
        v55 = (unsigned __int8 *)(a1 + v32 + 256);
        while (1)
        {
          v36 = (_BYTE *)(*v35 + 3 * v34);
          sub_100374B38(a1, v36, 0);
          LOWORD(v37) = v6[*(int *)(v58 + 4 * (v34 + 1))];
          if ((_WORD)v37)
          {
            v38 = v34++;
          }
          else
          {
            v39 = (int *)(v58 + 4 + 4 * (v34 + 1));
            do
            {
              sub_100374B38(a1, v36 + 1, 0);
              v36 += 3;
              v40 = *v39++;
              LOWORD(v37) = v6[v40];
              ++v34;
            }
            while (!(_WORD)v37);
            v38 = v34++;
          }
          sub_100374B38(a1, v36 + 1, 1);
          v41 = (__int16)v37 < 1;
          if ((v37 & 0x8000u) == 0)
            v37 = (__int16)v37;
          else
            v37 = -(__int16)v37;
          sub_100374B38(a1, v30, v41);
          v42 = v36 + 2;
          v43 = v37 - 1;
          if (v37 == 1 || (sub_100374B38(a1, v42, 1), v37 == 2))
          {
            sub_100374B38(a1, v42, 0);
          }
          else
          {
            sub_100374B38(a1, v42, 1);
            v44 = *v35;
            v45 = 217;
            if (v38 < *v55)
              v45 = 189;
            v46 = (_BYTE *)(v44 + v45);
            if (v43 >= 4)
            {
              v48 = 2;
              v49 = v37 - 1;
              do
              {
                sub_100374B38(a1, v46, 1);
                v48 *= 2;
                ++v46;
                v50 = v49 >= 8;
                v49 >>= 1;
              }
              while (v50);
              sub_100374B38(a1, v46, 0);
              v30 = (_BYTE *)(v3 + 360);
              if (!v48)
                goto LABEL_39;
              v47 = v46 + 14;
            }
            else
            {
              sub_100374B38(a1, (_BYTE *)(v44 + v45), 0);
              v47 = v46 + 14;
              v48 = 2;
            }
            do
            {
              sub_100374B38(a1, v47, ((v48 >> 1) & v43) != 0);
              v50 = v48 >= 4;
              v48 >>= 1;
            }
            while (v50);
          }
LABEL_39:
          if (v34 >= v57)
          {
            v32 = v52;
            if (v34 < *(_DWORD *)(a1 + 472))
              goto LABEL_63;
            goto LABEL_7;
          }
        }
      }
LABEL_60:
      v34 = 0;
      if (v29 > 0)
LABEL_63:
        sub_100374B38(a1, (_BYTE *)(*(_QWORD *)(v3 + 8 * v32 + 232) + 3 * v34), 1);
LABEL_7:
      v5 = v54 + 1;
      if (v54 + 1 >= *(int *)(a1 + 400))
        return 1;
    }
    *v15 = v18;
    sub_100374B38(a1, v17, 1);
    v20 = v19 <= 0;
    if (v19 <= 0)
      v21 = 3;
    else
      v21 = 2;
    if (v19 <= 0)
      v22 = 8;
    else
      v22 = 4;
    if (v19 <= 0)
      v19 = -v19;
    sub_100374B38(a1, v17 + 1, v20);
    v23 = &v17[v21];
    *v16 = v22;
    if (v19 == 1)
    {
      v24 = 0;
    }
    else
    {
      v24 = 1;
      sub_100374B38(a1, v23, 1);
      v23 = (_BYTE *)(*v12 + 20);
      if (v19 != 2)
      {
        v25 = v19 - 1;
        do
        {
          sub_100374B38(a1, v23, 1);
          v24 *= 2;
          ++v23;
          v26 = v25 > 3;
          v25 >>= 1;
        }
        while (v26);
      }
    }
    sub_100374B38(a1, v23, 0);
    v27 = 0;
    if (v24 >= (int)((unint64_t)(1 << *(_BYTE *)(a1 + v9 + 224)) >> 1))
    {
      if (v24 <= (int)((unint64_t)(1 << *(_BYTE *)(a1 + v9 + 240)) >> 1))
        goto LABEL_28;
      v27 = *v16 + 8;
    }
    *v16 = v27;
LABEL_28:
    if (v24 >= 2)
    {
      v28 = v23 + 14;
      do
      {
        sub_100374B38(a1, v28, ((v24 >> 1) & (v19 - 1)) != 0);
        v26 = v24 > 3;
        v24 >>= 1;
      }
      while (v26);
    }
    goto LABEL_31;
  }
  return 1;
}

double sub_1003749A8(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  double result;

  v4 = *(_QWORD *)(a1 + 544);
  sub_1003736FC(a1);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (_BYTE *)(*(_QWORD *)v5)++;
  *v6 = -1;
  v7 = *(_QWORD *)(v5 + 8) - 1;
  *(_QWORD *)(v5 + 8) = v7;
  if (!v7 && !(*(unsigned int (**)(uint64_t))(v5 + 24))(a1))
  {
    v8 = *(_QWORD *)a1;
    *(_DWORD *)(v8 + 40) = 25;
    (*(void (**)(uint64_t))v8)(a1);
  }
  v9 = *(_QWORD *)(a1 + 40);
  v10 = (_BYTE *)(*(_QWORD *)v9)++;
  *v10 = a2 - 48;
  v11 = *(_QWORD *)(v9 + 8) - 1;
  *(_QWORD *)(v9 + 8) = v11;
  if (!v11 && !(*(unsigned int (**)(uint64_t))(v9 + 24))(a1))
  {
    v12 = *(_QWORD *)a1;
    *(_DWORD *)(v12 + 40) = 25;
    (*(void (**)(uint64_t))v12)(a1);
  }
  if (*(int *)(a1 + 356) >= 1)
  {
    v13 = 0;
    while (1)
    {
      v14 = *(_QWORD *)(a1 + 360 + 8 * v13);
      if (!*(_DWORD *)(a1 + 444) && !*(_DWORD *)(a1 + 452))
        break;
      if (*(_DWORD *)(a1 + 448))
        goto LABEL_13;
LABEL_9:
      if (++v13 >= *(int *)(a1 + 356))
        goto LABEL_16;
    }
    v16 = *(_OWORD **)(v4 + 8 * *(int *)(v14 + 20) + 104);
    v16[2] = 0uLL;
    v16[3] = 0uLL;
    *v16 = 0uLL;
    v16[1] = 0uLL;
    v17 = v4 + 4 * v13;
    *(_DWORD *)(v17 + 64) = 0;
    *(_DWORD *)(v17 + 80) = 0;
    if (!*(_DWORD *)(a1 + 448))
      goto LABEL_9;
LABEL_13:
    v15 = *(_OWORD **)(v4 + 8 * *(int *)(v14 + 24) + 232);
    v15[14] = 0uLL;
    v15[15] = 0uLL;
    v15[12] = 0uLL;
    v15[13] = 0uLL;
    v15[10] = 0uLL;
    v15[11] = 0uLL;
    v15[8] = 0uLL;
    v15[9] = 0uLL;
    v15[6] = 0uLL;
    v15[7] = 0uLL;
    v15[4] = 0uLL;
    v15[5] = 0uLL;
    v15[2] = 0uLL;
    v15[3] = 0uLL;
    *v15 = 0uLL;
    v15[1] = 0uLL;
    goto LABEL_9;
  }
LABEL_16:
  *(_OWORD *)(v4 + 24) = xmmword_1003C58F0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  result = NAN;
  *(_QWORD *)(v4 + 56) = -4294967285;
  return result;
}

uint64_t sub_100374B38(uint64_t result, _BYTE *a2, int a3)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = (uint64_t *)result;
  v4 = *a2;
  v5 = qword_1003C5540[v4 & 0x7F];
  v6 = *(_QWORD *)(result + 544);
  v7 = v5 >> 16;
  v8 = *(_QWORD *)(v6 + 32) - (v5 >> 16);
  *(_QWORD *)(v6 + 32) = v8;
  if (a3 != v4 >> 7)
  {
    if (v8 >= v7)
    {
      *(_QWORD *)(v6 + 24) += v8;
      *(_QWORD *)(v6 + 32) = v7;
    }
    v9 = v5 ^ v4 & 0x80;
    goto LABEL_10;
  }
  if (v8 < 0x8000)
  {
    v10 = v5 >> 8;
    if (v8 < v7)
    {
      *(_QWORD *)(v6 + 24) += v8;
      *(_QWORD *)(v6 + 32) = v7;
    }
    v9 = v10 ^ v4 & 0x80;
LABEL_10:
    *a2 = v9;
    v12 = *(_QWORD *)(v6 + 24);
    v11 = *(_QWORD *)(v6 + 32);
    v13 = *(_DWORD *)(v6 + 56);
    while (1)
    {
      v11 *= 2;
      v12 *= 2;
      *(_QWORD *)(v6 + 24) = v12;
      *(_QWORD *)(v6 + 32) = v11;
      *(_DWORD *)(v6 + 56) = --v13;
      if (v13)
        goto LABEL_14;
      if (v12 >= 0x8000000)
        break;
      if (v12 >> 19 == 255)
      {
        ++*(_QWORD *)(v6 + 40);
        goto LABEL_13;
      }
      v21 = *(_DWORD *)(v6 + 60);
      if (v21)
      {
        if ((v21 & 0x80000000) == 0)
        {
          if (*(_QWORD *)(v6 + 48))
          {
            do
            {
              v23 = v3[5];
              v24 = (_BYTE *)(*(_QWORD *)v23)++;
              *v24 = 0;
              v25 = *(_QWORD *)(v23 + 8) - 1;
              *(_QWORD *)(v23 + 8) = v25;
              if (!v25)
              {
                result = (*(uint64_t (**)(uint64_t *))(v23 + 24))(v3);
                if (!(_DWORD)result)
                {
                  v26 = *v3;
                  *(_DWORD *)(v26 + 40) = 25;
                  result = (*(uint64_t (**)(uint64_t *))v26)(v3);
                }
              }
              v22 = *(_QWORD *)(v6 + 48) - 1;
              *(_QWORD *)(v6 + 48) = v22;
            }
            while (v22);
            v21 = *(_DWORD *)(v6 + 60);
          }
          v34 = v3[5];
          v35 = (_BYTE *)(*(_QWORD *)v34)++;
          *v35 = v21;
          v36 = *(_QWORD *)(v34 + 8) - 1;
          *(_QWORD *)(v34 + 8) = v36;
          if (!v36)
          {
            result = (*(uint64_t (**)(uint64_t *))(v34 + 24))(v3);
            if (!(_DWORD)result)
            {
              v37 = *v3;
              *(_DWORD *)(v37 + 40) = 25;
              result = (*(uint64_t (**)(uint64_t *))v37)(v3);
            }
          }
        }
      }
      else
      {
        ++*(_QWORD *)(v6 + 48);
      }
      if (*(_QWORD *)(v6 + 40))
      {
        if (*(_QWORD *)(v6 + 48))
        {
          do
          {
            v39 = v3[5];
            v40 = (_BYTE *)(*(_QWORD *)v39)++;
            *v40 = 0;
            v41 = *(_QWORD *)(v39 + 8) - 1;
            *(_QWORD *)(v39 + 8) = v41;
            if (!v41)
            {
              result = (*(uint64_t (**)(uint64_t *))(v39 + 24))(v3);
              if (!(_DWORD)result)
              {
                v42 = *v3;
                *(_DWORD *)(v42 + 40) = 25;
                result = (*(uint64_t (**)(uint64_t *))v42)(v3);
              }
            }
            v38 = *(_QWORD *)(v6 + 48) - 1;
            *(_QWORD *)(v6 + 48) = v38;
          }
          while (v38);
        }
        do
        {
          v44 = v3[5];
          v45 = (_BYTE *)(*(_QWORD *)v44)++;
          *v45 = -1;
          v46 = *(_QWORD *)(v44 + 8) - 1;
          *(_QWORD *)(v44 + 8) = v46;
          if (!v46)
          {
            result = (*(uint64_t (**)(uint64_t *))(v44 + 24))(v3);
            if (!(_DWORD)result)
            {
              v47 = *v3;
              *(_DWORD *)(v47 + 40) = 25;
              result = (*(uint64_t (**)(uint64_t *))v47)(v3);
            }
          }
          v48 = v3[5];
          v49 = (_BYTE *)(*(_QWORD *)v48)++;
          *v49 = 0;
          v50 = *(_QWORD *)(v48 + 8) - 1;
          *(_QWORD *)(v48 + 8) = v50;
          if (!v50)
          {
            result = (*(uint64_t (**)(uint64_t *))(v48 + 24))(v3);
            if (!(_DWORD)result)
            {
              v51 = *v3;
              *(_DWORD *)(v51 + 40) = 25;
              result = (*(uint64_t (**)(uint64_t *))v51)(v3);
            }
          }
          v43 = *(_QWORD *)(v6 + 40) - 1;
          *(_QWORD *)(v6 + 40) = v43;
        }
        while (v43);
      }
LABEL_12:
      *(_DWORD *)(v6 + 60) = (v12 >> 19);
LABEL_13:
      v11 = *(_QWORD *)(v6 + 32);
      v12 = *(_QWORD *)(v6 + 24) & 0x7FFFFLL;
      *(_QWORD *)(v6 + 24) = v12;
      v13 = *(_DWORD *)(v6 + 56) + 8;
      *(_DWORD *)(v6 + 56) = v13;
LABEL_14:
      if (v11 >= 0x8000)
        return result;
    }
    v15 = *(_DWORD *)(v6 + 60);
    if ((v15 & 0x80000000) == 0)
    {
      if (*(_QWORD *)(v6 + 48))
      {
        do
        {
          v17 = v3[5];
          v18 = (_BYTE *)(*(_QWORD *)v17)++;
          *v18 = 0;
          v19 = *(_QWORD *)(v17 + 8) - 1;
          *(_QWORD *)(v17 + 8) = v19;
          if (!v19)
          {
            result = (*(uint64_t (**)(uint64_t *))(v17 + 24))(v3);
            if (!(_DWORD)result)
            {
              v20 = *v3;
              *(_DWORD *)(v20 + 40) = 25;
              result = (*(uint64_t (**)(uint64_t *))v20)(v3);
            }
          }
          v16 = *(_QWORD *)(v6 + 48) - 1;
          *(_QWORD *)(v6 + 48) = v16;
        }
        while (v16);
        v15 = *(_DWORD *)(v6 + 60);
      }
      v27 = v3[5];
      v28 = (_BYTE *)(*(_QWORD *)v27)++;
      *v28 = v15 + 1;
      v29 = *(_QWORD *)(v27 + 8) - 1;
      *(_QWORD *)(v27 + 8) = v29;
      if (v29 || (result = (*(uint64_t (**)(uint64_t *))(v27 + 24))(v3), (_DWORD)result))
      {
        if (*(_DWORD *)(v6 + 60) == 254)
          goto LABEL_38;
      }
      else
      {
        v52 = *v3;
        *(_DWORD *)(v52 + 40) = 25;
        result = (*(uint64_t (**)(uint64_t *))v52)(v3);
        if (*(_DWORD *)(v6 + 60) == 254)
        {
LABEL_38:
          v30 = v3[5];
          v31 = (_BYTE *)(*(_QWORD *)v30)++;
          *v31 = 0;
          v32 = *(_QWORD *)(v30 + 8) - 1;
          *(_QWORD *)(v30 + 8) = v32;
          if (!v32)
          {
            result = (*(uint64_t (**)(uint64_t *))(v30 + 24))(v3);
            if (!(_DWORD)result)
            {
              v33 = *v3;
              *(_DWORD *)(v33 + 40) = 25;
              result = (*(uint64_t (**)(uint64_t *))v33)(v3);
            }
          }
        }
      }
    }
    v14 = *(_QWORD *)(v6 + 48) + *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = v14;
    goto LABEL_12;
  }
  return result;
}

uint64_t (**sub_100374F78(uint64_t a1, int a2))(uint64_t result, int a2)
{
  uint64_t (**result)(uint64_t, int);
  uint64_t (**v5)(uint64_t, int);
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD);
  uint64_t v10;
  uint64_t v11;

  result = (uint64_t (**)(uint64_t, int))(**(uint64_t (***)(void))(a1 + 8))();
  v5 = result;
  *(_QWORD *)(a1 + 504) = result;
  *result = sub_1003750B0;
  if (a2)
  {
    if (*(int *)(a1 + 92) >= 1)
    {
      v6 = 0;
      v7 = result + 14;
      v8 = (unsigned int *)(*(_QWORD *)(a1 + 104) + 28);
      do
      {
        v9 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 40);
        v10 = sub_1003A7EA4(*v8, (int)*(v8 - 5));
        v11 = sub_1003A7EA4(v8[1], (int)*(v8 - 4));
        result = (uint64_t (**)(uint64_t, int))v9(a1, 1, 0, v10, v11, *(v8 - 4));
        v7[v6++] = result;
        v8 += 24;
      }
      while (v6 < *(int *)(a1 + 92));
    }
  }
  else
  {
    result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 1280);
    v5[4] = (uint64_t (*)(uint64_t, int))result;
    v5[5] = (uint64_t (*)(uint64_t, int))(result + 16);
    v5[6] = (uint64_t (*)(uint64_t, int))(result + 32);
    v5[7] = (uint64_t (*)(uint64_t, int))(result + 48);
    v5[8] = (uint64_t (*)(uint64_t, int))(result + 64);
    v5[9] = (uint64_t (*)(uint64_t, int))(result + 80);
    v5[10] = (uint64_t (*)(uint64_t, int))(result + 96);
    v5[11] = (uint64_t (*)(uint64_t, int))(result + 112);
    v5[12] = (uint64_t (*)(uint64_t, int))(result + 128);
    v5[13] = (uint64_t (*)(uint64_t, int))(result + 144);
    v5[14] = 0;
  }
  return result;
}

uint64_t sub_1003750B0(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(result + 504);
  *(_DWORD *)(v2 + 16) = 0;
  if (*(int *)(result + 356) < 2)
  {
    v3 = *(_QWORD *)(result + 360);
    if (*(_DWORD *)(result + 352) == 1)
    {
      v4 = *(_DWORD *)(v3 + 76);
      *(_DWORD *)(v2 + 24) = 0;
      *(_DWORD *)(v2 + 28) = v4;
      *(_DWORD *)(v2 + 20) = 0;
      if (a2 != 3)
        goto LABEL_6;
    }
    else
    {
      v6 = *(_DWORD *)(v3 + 12);
      *(_DWORD *)(v2 + 24) = 0;
      *(_DWORD *)(v2 + 28) = v6;
      *(_DWORD *)(v2 + 20) = 0;
      if (a2 != 3)
        goto LABEL_6;
    }
LABEL_12:
    if (!*(_QWORD *)(v2 + 112))
    {
      v8 = *(_QWORD *)result;
      *(_DWORD *)(v8 + 40) = 3;
      result = (*(uint64_t (**)(uint64_t))v8)(result);
    }
    *(_QWORD *)(v2 + 8) = sub_10037550C;
    return result;
  }
  *(_DWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 28) = 1;
  *(_DWORD *)(v2 + 20) = 0;
  if (a2 == 3)
    goto LABEL_12;
LABEL_6:
  if (a2 == 2)
  {
    if (!*(_QWORD *)(v2 + 112))
    {
      v9 = *(_QWORD *)result;
      *(_DWORD *)(v9 + 40) = 3;
      result = (*(uint64_t (**)(uint64_t))v9)(result);
    }
    *(_QWORD *)(v2 + 8) = sub_100375918;
  }
  else if (a2)
  {
    v7 = *(_QWORD *)result;
    *(_DWORD *)(v7 + 40) = 3;
    return (*(uint64_t (**)(uint64_t))v7)(result);
  }
  else
  {
    if (*(_QWORD *)(v2 + 112))
    {
      v5 = *(_QWORD *)result;
      *(_DWORD *)(v5 + 40) = 3;
      result = (*(uint64_t (**)(uint64_t))v5)(result);
    }
    *(_QWORD *)(v2 + 8) = sub_100375214;
  }
  return result;
}

uint64_t sub_100375214(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void (*v15)(uint64_t, int *, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  int v18;
  _WORD **v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  _WORD **v23;
  uint64_t v24;
  _WORD *v25;
  uint64_t result;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;

  v3 = *(_DWORD **)(a1 + 504);
  v4 = v3[7];
  v5 = v3;
  v33 = v3[6];
  if (v33 >= v4)
  {
LABEL_30:
    ++v3[4];
    if (*(int *)(a1 + 356) < 2)
    {
      v28 = *(_QWORD *)(a1 + 360);
      if (v5[4] >= (*(_DWORD *)(a1 + 352) - 1))
        v27 = *(_DWORD *)(v28 + 76);
      else
        v27 = *(_DWORD *)(v28 + 12);
    }
    else
    {
      v27 = 1;
    }
    v5[6] = 0;
    v5[7] = v27;
    v5[5] = 0;
    return 1;
  }
  else
  {
    v30 = *(_DWORD *)(a1 + 392) - 1;
    v6 = *(_DWORD *)(a1 + 352) - 1;
    v32 = v3 + 8;
    v7 = v3[5];
    while (v7 > v30)
    {
LABEL_3:
      v7 = 0;
      v3[5] = 0;
      if (++v33 >= v4)
      {
        v5 = *(_DWORD **)(a1 + 504);
        goto LABEL_30;
      }
    }
    while (1)
    {
      v8 = *(_DWORD *)(a1 + 356);
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = 0;
        v29 = v7;
        do
        {
          v11 = *(int **)(a1 + 8 * v9 + 360);
          v12 = 18;
          if (v7 < v30)
            v12 = 14;
          if (v11[15] >= 1)
          {
            v13 = 0;
            v14 = v11[v12];
            v15 = *(void (**)(uint64_t, int *, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 536) + 8 * v11[1] + 8);
            v16 = v11[17] * v7;
            v17 = (v11[10] * v33);
            v31 = v9;
            do
            {
              if (v3[4] >= v6 && v13 + v33 >= v11[19])
              {
                bzero(*(void **)&v3[2 * v10 + 8], (uint64_t)v11[14] << 7);
                v18 = v11[14];
                if (v18 >= 1)
                {
                  v21 = 2 * v10;
                  v22 = *(_WORD **)&v3[v21 + 6];
                  v23 = (_WORD **)&v32[v21];
                  v24 = v11[14];
                  do
                  {
                    v25 = *v23++;
                    *v25 = *v22;
                    --v24;
                  }
                  while (v24);
                }
              }
              else
              {
                v15(a1, v11, *(_QWORD *)(a2 + 8 * v11[1]), *(_QWORD *)&v3[2 * v10 + 8], v17, v16, v14);
                v18 = v11[14];
                if (v18 > (int)v14)
                {
                  bzero(*(void **)&v3[2 * v10 + 8 + 2 * (int)v14], (uint64_t)(v18 - (int)v14) << 7);
                  v18 = v11[14];
                  if ((int)v14 < v18)
                  {
                    v19 = (_WORD **)&v32[2 * v14 + 2 * v10];
                    v20 = v18 - v14;
                    do
                    {
                      **v19 = **(v19 - 1);
                      ++v19;
                      --v20;
                    }
                    while (v20);
                  }
                }
              }
              v10 += v18;
              v17 = (v11[10] + v17);
              ++v13;
            }
            while (v13 < v11[15]);
            v8 = *(_DWORD *)(a1 + 356);
            v7 = v29;
            v9 = v31;
          }
          ++v9;
        }
        while (v9 < v8);
      }
      result = (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)(a1 + 544) + 8))(a1, v32);
      if (!(_DWORD)result)
        break;
      if (++v7 > v30)
      {
        v4 = v3[7];
        goto LABEL_3;
      }
    }
    v3[5] = v7;
    v3[6] = v33;
  }
  return result;
}

uint64_t sub_10037550C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  size_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  char *v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v47;
  uint64_t v48;
  int v49;
  size_t v50;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;

  v1 = a1;
  if (*(int *)(a1 + 92) >= 1)
  {
    v2 = 0;
    v48 = *(_QWORD *)(a1 + 504);
    v47 = *(_DWORD *)(a1 + 352) - 1;
    v3 = *(_DWORD **)(a1 + 104);
    do
    {
      v53 = v2;
      v4 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v1 + 8) + 64))(v1, *(_QWORD *)(v48 + 8 * v2 + 112), (v3[3] * *(_DWORD *)(v48 + 16)), v3[3], 1);
      v5 = v4;
      if (*(_DWORD *)(v48 + 16) >= v47)
      {
        v7 = v3[3];
        if (v3[8] % v7)
          v6 = v3[8] % v7;
        else
          v6 = v3[3];
      }
      else
      {
        v6 = v3[3];
      }
      v8 = v3[7];
      v54 = v3;
      v9 = (int)v3[2];
      if ((int)(v8 % v9) <= 0)
        v10 = v8 % v9;
      else
        v10 = v9 - v8 % v9;
      v49 = v6;
      v52 = v4;
      if (v6 >= 1)
      {
        v11 = *(void (**)(uint64_t))(*(_QWORD *)(v1 + 536) + 8 * v2 + 8);
        if ((int)v10 > 0)
        {
          v12 = 0;
          v13 = v8 << 7;
          while (1)
          {
            v14 = *(_QWORD *)(v5 + 8 * v12);
            v11(v1);
            bzero((void *)(v14 + (v8 << 7)), (unint64_t)v10 << 7);
            v15 = *(_WORD *)(v14 + (v8 << 7) - 128);
            if ((_DWORD)v10 == 1)
            {
              v16 = 0;
              v1 = a1;
            }
            else
            {
              v17 = (_WORD *)(v14 + v13 + 128);
              v18 = v10 & 0xFFFFFFFE;
              do
              {
                *(v17 - 64) = v15;
                *v17 = v15;
                v17 += 128;
                v18 -= 2;
              }
              while (v18);
              v16 = v10 & 0xFFFFFFFE;
              v1 = a1;
              if (v16 == v10)
                goto LABEL_15;
            }
            v19 = (_WORD *)(v14 + v13 + (v16 << 7));
            v20 = v10 - v16;
            do
            {
              *v19 = v15;
              v19 += 64;
              --v20;
            }
            while (v20);
LABEL_15:
            ++v12;
            v5 = v52;
            if (v12 == v49)
              goto LABEL_26;
          }
        }
        v21 = 0;
        do
        {
          v11(v1);
          ++v21;
        }
        while (v49 != v21);
      }
LABEL_26:
      v22 = v54;
      if (*(_DWORD *)(v48 + 16) == v47 && v49 < v54[3])
      {
        v23 = (unint64_t)(v10 + v8) << 7;
        v24 = v49;
        if (v9 > (int)v10 + (int)v8)
        {
          do
            bzero(*(void **)(v52 + 8 * v24++), (unint64_t)(v10 + v8) << 7);
          while (v24 < (int)v54[3]);
        }
        else
        {
          if (((int)v10 + (int)v8) / v9 <= 1)
            v25 = 1;
          else
            v25 = ((int)v10 + (int)v8) / v9;
          if ((int)v9 <= 0)
          {
            do
              bzero(*(void **)(v52 + 8 * v24++), (unint64_t)(v10 + v8) << 7);
            while (v24 < (int)v54[3]);
          }
          else
          {
            v26 = ((unint64_t)v9 << 7) & 0x7FFFFFFF00;
            v27 = v9 << 7;
            v50 = v23;
            v28 = (v9 - 1) << 7;
            v29 = v52;
            do
            {
              v30 = (void **)(v29 + 8 * v24);
              v31 = v23;
              v32 = (uint64_t)*(v30 - 1);
              v33 = (char *)*v30;
              bzero(*v30, v31);
              if (v9 > 1)
              {
                if (v9 == (unint64_t)(v9 & 0xFFFFFFFE))
                {
                  v36 = 0;
                  do
                  {
                    v37 = 0;
                    v38 = *(_WORD *)(v32 + v28);
                    do
                    {
                      v39 = &v33[v37];
                      *(_WORD *)v39 = v38;
                      *((_WORD *)v39 + 64) = v38;
                      v37 += 256;
                    }
                    while (v26 != v37);
                    v32 += v9 << 7;
                    ++v36;
                    v33 += v27;
                  }
                  while (v36 != v25);
                }
                else
                {
                  v40 = 0;
                  do
                  {
                    v41 = 0;
                    v42 = *(_WORD *)(v32 + v28);
                    do
                    {
                      v43 = &v33[v41];
                      *(_WORD *)v43 = v42;
                      *((_WORD *)v43 + 64) = v42;
                      v41 += 256;
                    }
                    while (v26 != v41);
                    v44 = ((unint64_t)v9 << 7) & 0x7FFFFFFF00;
                    v45 = v9 - (unint64_t)(v9 & 0xFFFFFFFE);
                    do
                    {
                      *(_WORD *)&v33[v44] = v42;
                      v44 += 128;
                      --v45;
                    }
                    while (v45);
                    v32 += v9 << 7;
                    ++v40;
                    v33 += v27;
                  }
                  while (v40 != v25);
                }
              }
              else
              {
                v34 = 0;
                v35 = v25;
                do
                {
                  *(_WORD *)&v33[v34] = *(_WORD *)(v32 + v28 + v34);
                  v34 += v27;
                  --v35;
                }
                while (v35);
              }
              ++v24;
              v22 = v54;
              v29 = v52;
              v23 = v50;
            }
            while (v24 < (int)v54[3]);
          }
        }
      }
      v2 = v53 + 1;
      v3 = v22 + 24;
      v1 = a1;
    }
    while (v53 + 1 < *(int *)(a1 + 92));
  }
  return sub_100375918(v1);
}

uint64_t sub_100375918(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  int64x2_t v11;
  int64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  int64x2_t *v25;
  unint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  uint64_t j;
  uint64_t v30;
  unint64_t *v31;
  int64x2_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64x2_t v36;
  int v37;
  uint64_t result;
  _DWORD *v39;
  int v40;
  uint64_t v41;
  _OWORD v42[2];

  v2 = *(_DWORD **)(a1 + 504);
  memset(v42, 0, sizeof(v42));
  LODWORD(v3) = *(_DWORD *)(a1 + 356);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    do
    {
      *((_QWORD *)v42 + v4) = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8)
                                                                                                 + 64))(a1, *(_QWORD *)&v2[2 * *(int *)(*(_QWORD *)(a1 + 8 * v4 + 360) + 4) + 28], (*(_DWORD *)(*(_QWORD *)(a1 + 8 * v4 + 360) + 12) * v2[4]), *(unsigned int *)(*(_QWORD *)(a1 + 8 * v4 + 360) + 12), 0);
      ++v4;
      v3 = *(int *)(a1 + 356);
    }
    while (v4 < v3);
  }
  v5 = v2[7];
  v6 = (int)v2[6];
  if ((int)v6 >= v5)
  {
LABEL_37:
    ++v2[4];
    v39 = *(_DWORD **)(a1 + 504);
    if ((int)v3 < 2)
    {
      v41 = *(_QWORD *)(a1 + 360);
      if (v39[4] >= (*(_DWORD *)(a1 + 352) - 1))
        v40 = *(_DWORD *)(v41 + 76);
      else
        v40 = *(_DWORD *)(v41 + 12);
    }
    else
    {
      v40 = 1;
    }
    v39[6] = 0;
    v39[7] = v40;
    v39[5] = 0;
    return 1;
  }
  else
  {
    v7 = v2[5];
    v8 = *(_DWORD *)(a1 + 392);
    v9 = v2 + 12;
    v10 = 8 * v6;
    v11 = (int64x2_t)xmmword_1003C5910;
    v12 = (int64x2_t)xmmword_1003C5920;
    while (v7 >= v8)
    {
LABEL_6:
      v7 = 0;
      v2[5] = 0;
      ++v6;
      v10 += 8;
      if (v6 >= v5)
      {
        LODWORD(v3) = *(_DWORD *)(a1 + 356);
        goto LABEL_37;
      }
    }
    while (1)
    {
      v13 = *(unsigned int *)(a1 + 356);
      if ((int)v13 >= 1)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          v16 = *(_QWORD *)(a1 + 8 * v14 + 360);
          v17 = *(unsigned int *)(v16 + 60);
          if ((int)v17 >= 1)
          {
            v18 = *(unsigned int *)(v16 + 56);
            if ((int)v18 >= 1)
            {
              v19 = v18 * v7;
              v20 = *((_QWORD *)v42 + v14);
              if (v18 > 3)
              {
                if ((v18 & 0xFFFFFFFC) == v18)
                {
                  for (i = 0; i != v17; ++i)
                  {
                    v25 = (int64x2_t *)&v9[2 * v15];
                    v26 = *(_QWORD *)(v20 + 8 * (i + v6)) + (v19 << 7);
                    v15 += v18;
                    v27 = v18 & 0xFFFFFFFC;
                    do
                    {
                      v28 = vdupq_n_s64(v26);
                      v25[-1] = vaddq_s64(v28, v11);
                      *v25 = vaddq_s64(v28, v12);
                      v26 += 512;
                      v25 += 2;
                      v27 -= 4;
                    }
                    while (v27);
                  }
                }
                else
                {
                  for (j = 0; j != v17; ++j)
                  {
                    v30 = 2 * v15;
                    v31 = (unint64_t *)&v2[8 * (v18 >> 2) + 8 + v30];
                    v32 = (int64x2_t *)&v9[v30];
                    v33 = *(_QWORD *)(v20 + 8 * (j + v6)) + (v19 << 7);
                    v15 += v18;
                    v34 = v33 + ((unint64_t)(v18 & 0xFFFFFFFC) << 7);
                    v35 = v18 & 0xFFFFFFFC;
                    do
                    {
                      v36 = vdupq_n_s64(v33);
                      v32[-1] = vaddq_s64(v36, v11);
                      *v32 = vaddq_s64(v36, v12);
                      v33 += 512;
                      v32 += 2;
                      v35 -= 4;
                    }
                    while (v35);
                    v37 = v18 - 4 * (v18 >> 2);
                    do
                    {
                      *v31++ = v34;
                      v34 += 128;
                      --v37;
                    }
                    while (v37);
                  }
                }
              }
              else
              {
                v21 = (_QWORD *)(v20 + v10);
                do
                {
                  v22 = *v21 + (v19 << 7);
                  v23 = v15 + 1;
                  *(_QWORD *)&v2[2 * v15 + 8] = v22;
                  if ((_DWORD)v18 + v15 != (_DWORD)v23)
                  {
                    *(_QWORD *)&v2[2 * v23 + 8] = v22 + 128;
                    if ((_DWORD)v18 + v15 != v15 + 2)
                      *(_QWORD *)&v2[2 * v15 + 12] = v22 + 256;
                  }
                  ++v21;
                  v15 += v18;
                  --v17;
                }
                while (v17);
              }
            }
          }
          ++v14;
        }
        while (v14 != v13);
      }
      result = (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)(a1 + 544) + 8))(a1, v2 + 8);
      if (!(_DWORD)result)
        break;
      ++v7;
      v8 = *(_DWORD *)(a1 + 392);
      v12 = (int64x2_t)xmmword_1003C5920;
      v11 = (int64x2_t)xmmword_1003C5910;
      if (v7 >= v8)
      {
        v5 = v2[7];
        goto LABEL_6;
      }
    }
    v2[5] = v7;
    v2[6] = v6;
  }
  return result;
}

_QWORD *sub_100375C6C(uint64_t *a1)
{
  _QWORD *result;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = (_QWORD *)(*(uint64_t (**)(void))a1[1])();
  v3 = result;
  a1[65] = (uint64_t)result;
  *result = nullsub_100;
  switch(*((_DWORD *)a1 + 15))
  {
    case 1:
      if (*((_DWORD *)a1 + 14) != 1)
        goto LABEL_3;
      break;
    case 2:
    case 3:
    case 6:
    case 7:
      if (*((_DWORD *)a1 + 14) != 3)
        goto LABEL_3;
      break;
    case 4:
    case 5:
      if (*((_DWORD *)a1 + 14) != 4)
        goto LABEL_3;
      break;
    default:
      if (*((int *)a1 + 14) <= 0)
      {
LABEL_3:
        v4 = *a1;
        *(_DWORD *)(v4 + 40) = 10;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t *))v4)(a1);
      }
      break;
  }
  if (*((_DWORD *)a1 + 81) && (*((_DWORD *)a1 + 24) | 4) != 6)
  {
    v9 = *a1;
    *(_DWORD *)(v9 + 40) = 28;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t *))v9)(a1);
    v5 = *((_DWORD *)a1 + 24);
    v6 = v5 - 1;
    if ((v5 - 1) > 6)
    {
LABEL_17:
      if (v5 == *((_DWORD *)a1 + 15) && *((_DWORD *)a1 + 23) == *((_DWORD *)a1 + 14))
      {
LABEL_52:
        v3[1] = sub_100376944;
      }
      else
      {
        v10 = *a1;
        *(_DWORD *)(v10 + 40) = 28;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t *))v10)(a1);
        v3[1] = sub_100376944;
      }
      return result;
    }
  }
  else
  {
    v5 = *((_DWORD *)a1 + 24);
    v6 = v5 - 1;
  }
  switch(v6)
  {
    case 0:
      if (*((_DWORD *)a1 + 23) != 1)
      {
        v11 = *a1;
        *(_DWORD *)(v11 + 40) = 11;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t *))v11)(a1);
      }
      switch(*((_DWORD *)a1 + 15))
      {
        case 1:
        case 3:
        case 7:
          v3[1] = sub_100376050;
          break;
        case 2:
          *v3 = sub_1003760A4;
          v3[1] = sub_10037616C;
          break;
        default:
          goto LABEL_49;
      }
      return result;
    case 1:
    case 5:
      if (*((_DWORD *)a1 + 23) != 3)
      {
        v7 = *a1;
        *(_DWORD *)(v7 + 40) = 11;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t *))v7)(a1);
        v5 = *((_DWORD *)a1 + 24);
      }
      if (*((_DWORD *)a1 + 15) != v5)
        goto LABEL_49;
      v8 = *((_DWORD *)a1 + 81);
      if (v8 == 1)
      {
        v3[1] = sub_1003764F0;
      }
      else
      {
        if (v8)
          goto LABEL_49;
        v3[1] = sub_1003761EC;
      }
      return result;
    case 2:
      if (*((_DWORD *)a1 + 23) != 3)
      {
        v12 = *a1;
        *(_DWORD *)(v12 + 40) = 11;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t *))v12)(a1);
      }
      v13 = *((_DWORD *)a1 + 15);
      if (v13 == 3)
        goto LABEL_52;
      if (v13 != 2)
        goto LABEL_49;
      goto LABEL_48;
    case 3:
      if (*((_DWORD *)a1 + 23) != 4)
      {
        v14 = *a1;
        *(_DWORD *)(v14 + 40) = 11;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t *))v14)(a1);
      }
      if (*((_DWORD *)a1 + 15) == 4)
        goto LABEL_52;
      goto LABEL_49;
    case 4:
      if (*((_DWORD *)a1 + 23) != 4)
      {
        v15 = *a1;
        *(_DWORD *)(v15 + 40) = 11;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t *))v15)(a1);
      }
      v16 = *((_DWORD *)a1 + 15);
      if (v16 == 5)
        goto LABEL_52;
      if (v16 != 4)
        goto LABEL_49;
      *v3 = sub_1003760A4;
      v3[1] = sub_1003769B8;
      return result;
    case 6:
      if (*((_DWORD *)a1 + 23) != 3)
      {
        v17 = *a1;
        *(_DWORD *)(v17 + 40) = 11;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t *))v17)(a1);
      }
      v18 = *((_DWORD *)a1 + 15);
      switch(v18)
      {
        case 7:
          goto LABEL_52;
        case 3:
          v21 = a1[13];
          *(_BYTE *)(v21 + 148) = 1;
          *(_BYTE *)(v21 + 244) = 1;
          goto LABEL_52;
        case 2:
          v19 = a1[13];
          *(_BYTE *)(v19 + 148) = 1;
          *(_BYTE *)(v19 + 244) = 1;
LABEL_48:
          *v3 = sub_1003760A4;
          v3[1] = sub_100376878;
          break;
        default:
LABEL_49:
          v20 = *a1;
          *(_DWORD *)(v20 + 40) = 28;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t *))v20)(a1);
          break;
      }
      break;
    default:
      goto LABEL_17;
  }
  return result;
}

uint64_t sub_100376050(uint64_t result, _BYTE **a2, _QWORD *a3, unsigned int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  if (a5 >= 1)
  {
    v5 = *(unsigned int *)(result + 48);
    if ((_DWORD)v5)
    {
      v6 = *(int *)(result + 56);
      do
      {
        v7 = *a2;
        v8 = *(_BYTE **)(*a3 + 8 * a4);
        v9 = v5;
        do
        {
          *v8++ = *v7;
          v7 += v6;
          --v9;
        }
        while (v9);
        ++a2;
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

_QWORD *sub_1003760A4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 520);
  result = (_QWORD *)(**(uint64_t (***)(void))(a1 + 8))();
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  *(_QWORD *)(v1 + 16) = result;
  v10 = 0x8000;
  do
  {
    *result = v8;
    result[256] = v5;
    result[512] = v10;
    v11 = v9 + 8421375;
    v9 += 0x8000;
    result[1792] = v7;
    v8 += 19595;
    v7 -= 5329;
    result[768] = v3;
    result[1024] = v4;
    result[1280] = v11;
    result[1536] = v6;
    ++result;
    v6 -= 27439;
    v5 += 38470;
    v10 += 7471;
    v4 -= 21710;
    v3 -= 11058;
  }
  while (v9 != 0x800000);
  return result;
}

uint64_t sub_10037616C(uint64_t result, unsigned __int8 **a2, _QWORD *a3, unsigned int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  _BYTE *v8;
  uint64_t v9;

  if (a5 >= 1)
  {
    v5 = *(unsigned int *)(result + 48);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(result + 520) + 16);
      do
      {
        v7 = *a2;
        v8 = *(_BYTE **)(*a3 + 8 * a4);
        v9 = v5;
        do
        {
          *v8++ = (*(_DWORD *)(v6 + 8 * v7[1] + 2048)
                 + *(_QWORD *)(v6 + 8 * *v7)
                 + *(_DWORD *)(v6 + 8 * v7[2] + 4096)) >> 16;
          v7 += 3;
          --v9;
        }
        while (v9);
        ++a2;
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

int8x16_t *sub_1003761EC(int8x16_t *result, const char **a2, _QWORD *a3, unsigned int a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  const char *v11;
  uint64_t v13;
  int8x16_t *v14;
  uint64_t v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v23;
  BOOL v25;
  BOOL v27;
  BOOL v29;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  __int8 *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  int8x8_t *v41;
  int8x8_t *v42;
  int8x8_t *v43;
  const char *v44;
  uint64_t v45;
  __int8 *v46;
  __int8 *v47;
  uint64_t v48;
  int8x8x3_t v49;
  int8x16x3_t v50;
  int8x16x3_t v51;

  if (a5 < 1)
    return result;
  v5 = result[3].u32[0];
  if (!(_DWORD)v5)
    return result;
  if (v5 >= 8)
  {
    while (1)
    {
      v13 = 0;
      v14 = (int8x16_t *)*a2;
      v15 = 8 * a4;
      result = *(int8x16_t **)(*a3 + v15);
      v16 = *(int8x16_t **)(a3[1] + v15);
      v17 = *(int8x16_t **)(a3[2] + v15);
      v18 = (int8x16_t *)((char *)result + v5);
      v19 = (unint64_t)v16->u64 + v5;
      v20 = (unint64_t)v17->u64 + v5;
      v21 = (unint64_t)&(*a2)[3 * v5];
      v23 = result < (int8x16_t *)&v17->i8[v5] && v17 < v18;
      v25 = (unint64_t)result < v21 && v14 < v18;
      v27 = (unint64_t)v16 < v20 && (unint64_t)v17 < v19;
      v29 = (unint64_t)v16 < v21 && (unint64_t)v14 < v19;
      v31 = (unint64_t)v17 < v21 && (unint64_t)v14 < v20;
      v32 = v16 >= v18 || (unint64_t)result >= v19;
      if (!v32 || v23 || v25 || v27 || v29 || v31)
      {
        v34 = (__int8 *)*a2;
      }
      else
      {
        if (v5 < 0x20)
        {
          v33 = 0;
LABEL_62:
          v34 = &v14->i8[3 * (v5 & 0xFFFFFFF8)];
          v41 = (int8x8_t *)&result->i8[v33];
          v42 = (int8x8_t *)&v16->i8[v33];
          v43 = (int8x8_t *)&v17->i8[v33];
          v44 = &v14->i8[3 * v33];
          v45 = v33 - (v5 & 0xFFFFFFF8);
          do
          {
            v49 = vld3_s8(v44);
            v44 += 24;
            *v41++ = v49.val[0];
            *v42++ = v49.val[1];
            *v43++ = v49.val[2];
            v45 += 8;
          }
          while (v45);
          v13 = v5 & 0xFFFFFFF8;
          if (v13 == v5)
            goto LABEL_14;
          goto LABEL_67;
        }
        v35 = result + 1;
        v36 = v16 + 1;
        v37 = v17 + 1;
        v38 = *a2;
        v39 = v5 & 0xFFFFFFE0;
        do
        {
          v40 = v38;
          v38 += 96;
          v50 = vld3q_s8(v40);
          v40 += 48;
          v51 = vld3q_s8(v40);
          v35[-1] = v50.val[0];
          *v35 = v51.val[0];
          v36[-1] = v50.val[1];
          *v36 = v51.val[1];
          v37[-1] = v50.val[2];
          *v37 = v51.val[2];
          v35 += 2;
          v36 += 2;
          v37 += 2;
          v39 -= 32;
        }
        while (v39);
        if ((v5 & 0xFFFFFFE0) == v5)
          goto LABEL_14;
        v33 = v5 & 0xFFFFFFE0;
        if ((v5 & 0x18) != 0)
          goto LABEL_62;
        v34 = &v14->i8[3 * (v5 & 0xFFFFFFE0)];
        v13 = v5 & 0xFFFFFFE0;
      }
LABEL_67:
      result = (int8x16_t *)((char *)result + v13);
      v46 = &v16->i8[v13];
      v47 = &v17->i8[v13];
      v48 = v5 - v13;
      do
      {
        result->i8[0] = *v34;
        result = (int8x16_t *)((char *)result + 1);
        *v46++ = v34[1];
        *v47++ = v34[2];
        v34 += 3;
        --v48;
      }
      while (v48);
LABEL_14:
      ++a2;
      ++a4;
      if (a5-- <= 1)
        return result;
    }
  }
  v6 = a5 + 1;
  do
  {
    v7 = 8 * a4;
    v8 = *(char **)(*a3 + v7);
    v9 = *(_BYTE **)(a3[1] + v7);
    v10 = *(_BYTE **)(a3[2] + v7);
    v11 = *a2;
    *v8 = **a2;
    *v9 = v11[1];
    *v10 = v11[2];
    if ((_DWORD)v5 != 1)
    {
      v8[1] = v11[3];
      v9[1] = v11[4];
      v10[1] = v11[5];
      if ((_DWORD)v5 != 2)
      {
        v8[2] = v11[6];
        v9[2] = v11[7];
        v10[2] = v11[8];
        if ((_DWORD)v5 != 3)
        {
          v8[3] = v11[9];
          v9[3] = v11[10];
          v10[3] = v11[11];
          if ((_DWORD)v5 != 4)
          {
            v8[4] = v11[12];
            v9[4] = v11[13];
            v10[4] = v11[14];
            if ((_DWORD)v5 != 5)
            {
              v8[5] = v11[15];
              v9[5] = v11[16];
              v10[5] = v11[17];
              if ((_DWORD)v5 != 6)
              {
                v8[6] = v11[18];
                v9[6] = v11[19];
                v10[6] = v11[20];
              }
            }
          }
        }
      }
    }
    ++a2;
    ++a4;
    --v6;
  }
  while (v6 > 1);
  return result;
}

const char *sub_1003764F0(const char *result, const char **a2, _QWORD *a3, unsigned int a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  _BYTE *v10;
  const char *v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  int8x16_t v27;
  uint64_t v29;
  uint64_t v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  unint64_t v37;
  BOOL v39;
  BOOL v41;
  BOOL v43;
  BOOL v45;
  BOOL v47;
  BOOL v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  int8x8_t *v56;
  int8x8_t *v57;
  int8x8_t *v58;
  uint64_t v59;
  __int8 *v60;
  __int8 *v61;
  __int8 *v62;
  __int8 v63;
  char v64;
  int8x8x3_t v65;
  int8x16x3_t v66;

  if (a5 < 1)
    return result;
  v5 = *((unsigned int *)result + 12);
  if (!(_DWORD)v5)
    return result;
  if (v5 >= 8)
  {
    v27.i64[0] = 0x8080808080808080;
    v27.i64[1] = 0x8080808080808080;
    while (1)
    {
      v29 = 0;
      result = *a2;
      v30 = 8 * a4;
      v31 = *(int8x16_t **)(*a3 + v30);
      v32 = *(int8x16_t **)(a3[1] + v30);
      v33 = *(int8x16_t **)(a3[2] + v30);
      v34 = (int8x16_t *)((char *)v31 + v5);
      v35 = (int8x16_t *)((char *)v32 + v5);
      v36 = (int8x16_t *)((char *)v33 + v5);
      v37 = (unint64_t)&(*a2)[3 * v5];
      v39 = v31 < (int8x16_t *)&v33->i8[v5] && v33 < v34;
      v41 = (unint64_t)v31 < v37 && result < (const char *)v34;
      v43 = v32 < v36 && v33 < v35;
      v45 = (unint64_t)v32 < v37 && result < (const char *)v35;
      v47 = (unint64_t)v33 < v37 && result < (const char *)v36;
      v48 = v32 >= v34 || v31 >= v35;
      if (!v48 || v39 || v41 || v43 || v45 || v47)
      {
        v50 = *a2;
      }
      else
      {
        if (v5 < 0x10)
        {
          v49 = 0;
LABEL_63:
          v50 = &result[3 * (v5 & 0xFFFFFFF8)];
          v56 = (int8x8_t *)&v31->i8[v49];
          v57 = (int8x8_t *)&v32->i8[v49];
          v58 = (int8x8_t *)&v33->i8[v49];
          result += 3 * v49;
          v59 = v49 - (v5 & 0xFFFFFFF8);
          do
          {
            v65 = vld3_s8(result);
            result += 24;
            *v56++ = veor_s8(vsub_s8(v65.val[0], v65.val[1]), (int8x8_t)0x8080808080808080);
            *v57++ = v65.val[1];
            *v58++ = veor_s8(vsub_s8(v65.val[2], v65.val[1]), (int8x8_t)0x8080808080808080);
            v59 += 8;
          }
          while (v59);
          v29 = v5 & 0xFFFFFFF8;
          if (v29 == v5)
            goto LABEL_14;
          goto LABEL_66;
        }
        v51 = v5 & 0xFFFFFFF0;
        v52 = *a2;
        v53 = v33;
        v54 = v32;
        v55 = v31;
        do
        {
          v66 = vld3q_s8(v52);
          v52 += 48;
          *v55++ = veorq_s8(vsubq_s8(v66.val[0], v66.val[1]), v27);
          *v54++ = v66.val[1];
          *v53++ = veorq_s8(vsubq_s8(v66.val[2], v66.val[1]), v27);
          v51 -= 16;
        }
        while (v51);
        if ((v5 & 0xFFFFFFF0) == v5)
          goto LABEL_14;
        v49 = v5 & 0xFFFFFFF0;
        if ((v5 & 8) != 0)
          goto LABEL_63;
        v50 = &result[3 * (v5 & 0xFFFFFFF0)];
        v29 = v5 & 0xFFFFFFF0;
      }
LABEL_66:
      v60 = &v31->i8[v29];
      v61 = &v32->i8[v29];
      v62 = &v33->i8[v29];
      result = (const char *)(v5 - v29);
      do
      {
        v63 = v50[1];
        v64 = v50[2];
        *v60++ = (*v50 - v63) ^ 0x80;
        *v61++ = v63;
        *v62++ = (v64 - v63) ^ 0x80;
        v50 += 3;
        --result;
      }
      while (result);
LABEL_14:
      ++a2;
      ++a4;
      if (a5-- <= 1)
        return result;
    }
  }
  v6 = a5 + 1;
  do
  {
    v7 = 8 * a4;
    v8 = *(_BYTE **)(*a3 + v7);
    v9 = *(char **)(a3[1] + v7);
    v10 = *(_BYTE **)(a3[2] + v7);
    v11 = *a2;
    v12 = (*a2)[1];
    v13 = (*a2)[2];
    *v8 = (**a2 - v12) ^ 0x80;
    *v9 = v12;
    *v10 = (v13 - v12) ^ 0x80;
    if ((_DWORD)v5 != 1)
    {
      v14 = v11[4];
      v15 = v11[5];
      v8[1] = (v11[3] - v14) ^ 0x80;
      v9[1] = v14;
      v10[1] = (v15 - v14) ^ 0x80;
      if ((_DWORD)v5 != 2)
      {
        v16 = v11[7];
        v17 = v11[8];
        v8[2] = (v11[6] - v16) ^ 0x80;
        v9[2] = v16;
        v10[2] = (v17 - v16) ^ 0x80;
        if ((_DWORD)v5 != 3)
        {
          v18 = v11[10];
          v19 = v11[11];
          v8[3] = (v11[9] - v18) ^ 0x80;
          v9[3] = v18;
          v10[3] = (v19 - v18) ^ 0x80;
          if ((_DWORD)v5 != 4)
          {
            v20 = v11[13];
            v21 = v11[14];
            v8[4] = (v11[12] - v20) ^ 0x80;
            v9[4] = v20;
            v10[4] = (v21 - v20) ^ 0x80;
            if ((_DWORD)v5 != 5)
            {
              v22 = v11[16];
              v23 = v11[17];
              v8[5] = (v11[15] - v22) ^ 0x80;
              v9[5] = v22;
              v10[5] = (v23 - v22) ^ 0x80;
              if ((_DWORD)v5 != 6)
              {
                v24 = v11[18];
                v25 = v11[19];
                v26 = v11[20];
                v8[6] = (v24 - v25) ^ 0x80;
                v9[6] = v25;
                v10[6] = (v26 - v25) ^ 0x80;
              }
            }
          }
        }
      }
    }
    ++a2;
    ++a4;
    --v6;
  }
  while (v6 > 1);
  return result;
}

uint64_t sub_100376878(uint64_t result, unsigned __int8 **a2, _QWORD *a3, unsigned int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;

  if (a5 >= 1)
  {
    v5 = *(unsigned int *)(result + 48);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(result + 520) + 16);
      do
      {
        v7 = *a2;
        v8 = 8 * a4;
        v9 = *(_BYTE **)(*a3 + v8);
        v10 = *(_BYTE **)(a3[1] + v8);
        v11 = *(_BYTE **)(a3[2] + v8);
        v12 = v5;
        do
        {
          v13 = v6 + 8 * *v7;
          v14 = (_DWORD *)(v6 + 8 * v7[1]);
          result = v6 + 8 * v7[2];
          *v9++ = (v14[512] + *(_QWORD *)v13 + *(_DWORD *)(result + 4096)) >> 16;
          *v10++ = (v14[2048] + *(_DWORD *)(v13 + 6144) + *(_DWORD *)(result + 10240)) >> 16;
          *v11++ = (v14[3072] + *(_DWORD *)(v13 + 10240) + *(_DWORD *)(result + 14336)) >> 16;
          v7 += 3;
          --v12;
        }
        while (v12);
        ++a2;
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

uint64_t sub_100376944(uint64_t result, uint64_t *a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;

  if (a5 >= 1)
  {
    v5 = *(int *)(result + 92);
    v6 = *(_DWORD *)(result + 48);
    if ((int)v5 >= 1 && v6 != 0)
    {
      do
      {
        v8 = 0;
        do
        {
          v9 = *a2;
          v10 = *(_BYTE **)(*(_QWORD *)(a3 + 8 * v8) + 8 * a4);
          v11 = v6;
          do
          {
            *v10++ = *(_BYTE *)(v9 + v8);
            v9 += v5;
            --v11;
          }
          while (v11);
          ++v8;
        }
        while (v8 != v5);
        ++a2;
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

uint64_t sub_1003769B8(uint64_t result, _BYTE **a2, _QWORD *a3, unsigned int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 v14;
  int v15;
  int v16;

  if (a5 >= 1)
  {
    v5 = *(unsigned int *)(result + 48);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(result + 520) + 16);
      do
      {
        v7 = *a2;
        v8 = 8 * a4;
        v9 = *(_BYTE **)(*a3 + v8);
        v10 = *(_BYTE **)(a3[1] + v8);
        v11 = *(_BYTE **)(a3[2] + v8);
        v12 = v5;
        v13 = *(_BYTE **)(a3[3] + v8);
        do
        {
          v14 = ~*v7;
          v15 = v7[1] ^ 0xFF;
          v16 = v7[2] ^ 0xFF;
          *v13++ = v7[3];
          *v9++ = (*(_QWORD *)(v6 + 8 * (v15 | 0x100u))
                 + *(_QWORD *)(v6 + 8 * v14)
                 + *(_QWORD *)(v6 + 8 * (v16 | 0x200u))) >> 16;
          *v10++ = (*(_QWORD *)(v6 + 8 * (v15 | 0x400u))
                  + *(_QWORD *)(v6 + 8 * (v14 | 0x300u))
                  + *(_QWORD *)(v6 + 8 * (v16 | 0x500u))) >> 16;
          result = (*(_QWORD *)(v6 + 8 * (v15 | 0x600u))
                  + *(_QWORD *)(v6 + 8 * (v14 | 0x500u))
                  + *(_QWORD *)(v6 + 8 * (v16 | 0x700u))) >> 16;
          *v11++ = result;
          v7 += 4;
          --v12;
        }
        while (v12);
        ++a2;
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

uint64_t (**sub_100376AC8(uint64_t a1))(uint64_t result, double a2, double a3, double a4)
{
  uint64_t (**result)(uint64_t, double, double, double);
  int v3;
  uint64_t (***v4)(uint64_t, double, double, double);

  result = (uint64_t (**)(uint64_t, double, double, double))(**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 536) = result;
  *result = sub_100376B54;
  if (*(int *)(a1 + 92) >= 1)
  {
    v3 = 0;
    v4 = (uint64_t (***)(uint64_t, double, double, double))(*(_QWORD *)(a1 + 104) + 88);
    do
    {
      result = (uint64_t (**)(uint64_t, double, double, double))(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 256);
      *v4 = result;
      v4 += 12;
      ++v3;
    }
    while (v3 < *(_DWORD *)(a1 + 92));
  }
  return result;
}

uint64_t sub_100376B54(uint64_t result, double a2, double a3, double a4)
{
  int *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t (**v13)(int *);
  uint64_t v14;
  uint64_t (**v15)(int *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  if (*(int *)(result + 92) >= 1)
  {
    v4 = (int *)result;
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(result + 536);
    for (i = *(_QWORD *)(result + 104); ; i += 96)
    {
      v9 = *(_DWORD *)(i + 36);
      v10 = *(_DWORD *)(i + 40) + (v9 << 8);
      if (v10 <= 1805)
      {
        if (v10 > 1027)
        {
          if (v10 > 1538)
          {
            if (v10 > 1547)
            {
              if (v10 == 1548)
              {
                v6 = 0;
                *(_QWORD *)(v7 + 8 * v5 + 88) = sub_10039A990;
                goto LABEL_92;
              }
              if (v10 == 1799)
              {
                v6 = 0;
                *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100395008;
                goto LABEL_92;
              }
            }
            else
            {
              if (v10 == 1539)
              {
                v6 = 0;
                *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100399BA4;
                goto LABEL_92;
              }
              if (v10 == 1542)
              {
                v6 = 0;
                *(_QWORD *)(v7 + 8 * v5 + 88) = sub_1003952D8;
                goto LABEL_92;
              }
            }
          }
          else if (v10 > 1284)
          {
            if (v10 == 1285)
            {
              v6 = 0;
              *(_QWORD *)(v7 + 8 * v5 + 88) = sub_1003957A8;
              goto LABEL_92;
            }
            if (v10 == 1290)
            {
              v6 = 0;
              *(_QWORD *)(v7 + 8 * v5 + 88) = sub_10039ACF4;
              goto LABEL_92;
            }
          }
          else
          {
            if (v10 == 1028)
            {
              v6 = 0;
              *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100395CF8;
              goto LABEL_92;
            }
            if (v10 == 1032)
            {
              v6 = 0;
              *(_QWORD *)(v7 + 8 * v5 + 88) = sub_10039B004;
              goto LABEL_92;
            }
          }
        }
        else if (v10 > 515)
        {
          if (v10 > 773)
          {
            if (v10 == 774)
            {
              v6 = 0;
              *(_QWORD *)(v7 + 8 * v5 + 88) = sub_10039B4B0;
              goto LABEL_92;
            }
            if (v10 == 1026)
            {
              v6 = 0;
              *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100399F28;
              goto LABEL_92;
            }
          }
          else
          {
            if (v10 == 516)
            {
              v6 = 0;
              *(_QWORD *)(v7 + 8 * v5 + 88) = sub_10039B880;
              goto LABEL_92;
            }
            if (v10 == 771)
            {
              v6 = 0;
              *(_QWORD *)(v7 + 8 * v5 + 88) = sub_10039600C;
              goto LABEL_92;
            }
          }
        }
        else if (v10 > 512)
        {
          if (v10 == 513)
          {
            v6 = 0;
            *(_QWORD *)(v7 + 8 * v5 + 88) = sub_10039A094;
            goto LABEL_92;
          }
          if (v10 == 514)
          {
            v6 = 0;
            *(_QWORD *)(v7 + 8 * v5 + 88) = sub_1003961D0;
            goto LABEL_92;
          }
        }
        else
        {
          if (v10 == 257)
          {
            v6 = 0;
            *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100396254;
            goto LABEL_92;
          }
          if (v10 == 258)
          {
            v6 = 0;
            *(_QWORD *)(v7 + 8 * v5 + 88) = sub_10039B9D0;
            goto LABEL_92;
          }
        }
        goto LABEL_87;
      }
      if (v10 > 3077)
      {
        if (v10 > 3597)
        {
          if (v10 > 4103)
          {
            if (v10 == 4104)
            {
              v6 = 0;
              *(_QWORD *)(v7 + 8 * v5 + 88) = sub_1003987A8;
              goto LABEL_92;
            }
            if (v10 == 4112)
            {
              v6 = 0;
              *(_QWORD *)(v7 + 8 * v5 + 88) = sub_1003981C8;
              goto LABEL_92;
            }
          }
          else
          {
            if (v10 == 3598)
            {
              v6 = 0;
              *(_QWORD *)(v7 + 8 * v5 + 88) = sub_1003977F4;
              goto LABEL_92;
            }
            if (v10 == 3855)
            {
              v6 = 0;
              *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100397CB8;
              goto LABEL_92;
            }
          }
        }
        else if (v10 > 3340)
        {
          if (v10 == 3341)
          {
            v6 = 0;
            *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100397278;
            goto LABEL_92;
          }
          if (v10 == 3591)
          {
            v6 = 0;
            *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100398BA0;
            goto LABEL_92;
          }
        }
        else
        {
          if (v10 == 3078)
          {
            v6 = 0;
            *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100398F34;
            goto LABEL_92;
          }
          if (v10 == 3084)
          {
            v6 = 0;
            *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100396E50;
            goto LABEL_92;
          }
        }
        goto LABEL_87;
      }
      if (v10 > 2312)
      {
        if (v10 > 2569)
        {
          if (v10 == 2570)
          {
            v6 = 0;
            *(_QWORD *)(v7 + 8 * v5 + 88) = sub_1003965C8;
            goto LABEL_92;
          }
          if (v10 == 2827)
          {
            v6 = 0;
            *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100396980;
            goto LABEL_92;
          }
        }
        else
        {
          if (v10 == 2313)
          {
            v6 = 0;
            *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100396290;
            goto LABEL_92;
          }
          if (v10 == 2565)
          {
            v6 = 0;
            *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100399204;
            goto LABEL_92;
          }
        }
        goto LABEL_87;
      }
      if (v10 <= 2055)
        break;
      if (v10 != 2056)
      {
        if (v10 == 2064)
        {
          v6 = 0;
          *(_QWORD *)(v7 + 8 * v5 + 88) = sub_10039A0E4;
          goto LABEL_92;
        }
LABEL_87:
        v12 = *(_QWORD *)v4;
        *(_DWORD *)(v12 + 40) = 7;
        *(_DWORD *)(v12 + 44) = v9;
        *(_DWORD *)(*(_QWORD *)v4 + 48) = *(_DWORD *)(i + 40);
        v13 = *(uint64_t (***)(int *))v4;
        goto LABEL_91;
      }
      v11 = v4[75];
      switch(v11)
      {
        case 2:
          *(_QWORD *)(v7 + 8 * v5 + 168) = sub_100394790;
          v6 = 2;
          goto LABEL_92;
        case 1:
          *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100394A38;
          v6 = 1;
          goto LABEL_92;
        case 0:
          v6 = 0;
          *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100394D2C;
          goto LABEL_92;
      }
      v13 = *(uint64_t (***)(int *))v4;
      *(_DWORD *)(*(_QWORD *)v4 + 40) = 49;
LABEL_91:
      result = (*v13)(v4);
LABEL_92:
      v14 = *(unsigned int *)(i + 16);
      if (v14 > 3 || !*(_QWORD *)&v4[2 * v14 + 28])
      {
        v15 = *(uint64_t (***)(int *))v4;
        *((_DWORD *)v15 + 10) = 54;
        *((_DWORD *)v15 + 11) = v14;
        result = (**(uint64_t (***)(int *))v4)(v4);
      }
      v16 = *(_QWORD *)&v4[2 * (int)v14 + 28];
      if (v6 == 2)
      {
        v20 = 0;
        v21 = 0;
        v22 = *(_QWORD *)(i + 88);
        if (*(_BYTE *)(i + 52))
          v23 = 16.0;
        else
          v23 = 8.0;
        do
        {
          v24 = 0;
          v25 = dbl_1003C59C8[v20];
          v26 = v21;
          v27 = v16 + 2 * v21;
          v28 = v22 + 4 * v21;
          do
          {
            LOWORD(a4) = *(_WORD *)(v27 + 2 * v24);
            a4 = 1.0 / (v25 * (double)*(unint64_t *)&a4 * dbl_1003C59C8[v24] * v23);
            *(float *)&a4 = a4;
            *(_DWORD *)(v28 + 4 * v24++) = LODWORD(a4);
          }
          while (v24 != 8);
          ++v20;
          v21 = v26 + 8;
        }
        while (v20 != 8);
        *(_QWORD *)(v7 + 8 * v5 + 8) = sub_1003773B0;
      }
      else
      {
        if (v6 == 1)
        {
          v29 = 0;
          v30 = *(_QWORD *)(i + 88);
          if (*(_BYTE *)(i + 52))
            v31 = 10;
          else
            v31 = 11;
          do
          {
            *(_DWORD *)(v30 + 4 * v29) = (uint64_t)((1 << (v31 - 1))
                                                 + word_1003C5948[v29]
                                                 * (unint64_t)*(unsigned __int16 *)(v16 + 2 * v29)) >> v31;
            ++v29;
          }
          while (v29 != 64);
        }
        else
        {
          v17 = 0;
          v18 = *(_QWORD *)(i + 88);
          if (*(_BYTE *)(i + 52))
            v19 = 4;
          else
            v19 = 3;
          do
          {
            *(_DWORD *)(v18 + 4 * v17) = *(unsigned __int16 *)(v16 + 2 * v17) << v19;
            ++v17;
          }
          while (v17 != 64);
        }
        *(_QWORD *)(v7 + 8 * v5 + 8) = sub_10037727C;
      }
      if (++v5 >= v4[23])
        return result;
    }
    if (v10 == 1806)
    {
      v6 = 0;
      *(_QWORD *)(v7 + 8 * v5 + 88) = sub_10039A578;
      goto LABEL_92;
    }
    if (v10 == 2052)
    {
      v6 = 0;
      *(_QWORD *)(v7 + 8 * v5 + 88) = sub_100399480;
      goto LABEL_92;
    }
    goto LABEL_87;
  }
  return result;
}

uint64_t sub_10037727C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t (*v11)(_DWORD *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _DWORD v22[64];

  if (a7)
  {
    LODWORD(v7) = a6;
    v10 = 0;
    v11 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)(result + 536) + 8 * *(int *)(a2 + 4) + 88);
    v12 = *(_QWORD *)(a2 + 88);
    v13 = a3 + 8 * a5;
    v14 = a7;
    for (result = v11(v22, v13, a6); ; result = v11(v22, v13, v7))
    {
      for (i = 0; i != 64; ++i)
      {
        v17 = *(_DWORD *)(v12 + 4 * i);
        v18 = v22[i];
        v19 = v17 >> 1;
        if (v18 < 0)
        {
          v21 = v19 - v18;
          if (v21 >= v17)
            v16 = -(v21 / v17);
          else
            LOWORD(v16) = 0;
        }
        else
        {
          v20 = v18 + v19;
          if (v20 >= v17)
            v16 = v20 / v17;
          else
            LOWORD(v16) = 0;
        }
        *(_WORD *)(a4 + 2 * i) = v16;
      }
      ++v10;
      v7 = (*(_DWORD *)(a2 + 36) + v7);
      a4 += 128;
      if (v10 == v14)
        break;
    }
  }
  return result;
}

uint64_t sub_1003773B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  uint64_t v10;
  uint64_t (*v11)(_DWORD *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  _DWORD v16[64];

  if (a7)
  {
    v10 = 0;
    v11 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)(result + 536) + 8 * *(int *)(a2 + 4) + 168);
    v12 = *(_QWORD *)(a2 + 88);
    v13 = a3 + 8 * a5;
    v14 = a7;
    do
    {
      result = v11(v16, v13, a6);
      for (i = 0; i != 64; ++i)
        *(_WORD *)(a4 + 2 * i) = (int)(float)((float)(*(float *)&v16[i] * *(float *)(v12 + 4 * i)) + 16384.0) - 0x4000;
      ++v10;
      a6 = (*(_DWORD *)(a2 + 36) + a6);
      a4 += 128;
    }
    while (v10 != v14);
  }
  return result;
}

uint64_t sub_1003774B4(uint64_t a1)
{
  uint64_t result;

  result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 544) = result;
  *(_QWORD *)result = sub_100377514;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  if (*(_BYTE *)(a1 + 332))
    *(_QWORD *)(result + 240) = 0;
  return result;
}

void sub_100377514(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  signed int v15;
  uint64_t v16;
  void (**v17)(uint64_t);
  signed int v18;
  uint64_t v19;
  void (**v20)(uint64_t);
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  void *v25;

  v4 = *(_QWORD *)(a1 + 544);
  if (a2)
  {
    *(_QWORD *)(v4 + 16) = sub_1003777B8;
    if (!*(_BYTE *)(a1 + 332))
    {
      *(_QWORD *)(v4 + 8) = sub_100378E7C;
      if (*(int *)(a1 + 356) < 1)
        goto LABEL_40;
      goto LABEL_18;
    }
  }
  else
  {
    *(_QWORD *)(v4 + 16) = sub_1003778EC;
    if (!*(_BYTE *)(a1 + 332))
    {
      *(_QWORD *)(v4 + 8) = sub_1003790F8;
      if (*(int *)(a1 + 356) < 1)
        goto LABEL_40;
      goto LABEL_18;
    }
  }
  *(_QWORD *)(v4 + 216) = a1;
  *(_BYTE *)(v4 + 192) = a2;
  v5 = *(_DWORD *)(a1 + 444);
  if (!*(_DWORD *)(a1 + 452))
  {
    if (v5)
      v6 = sub_100377C70;
    else
      v6 = sub_100377ABC;
    goto LABEL_16;
  }
  if (!v5)
  {
    v6 = sub_10037809C;
LABEL_16:
    *(_QWORD *)(v4 + 8) = v6;
    goto LABEL_17;
  }
  *(_QWORD *)(v4 + 8) = sub_1003782C8;
  if (!*(_QWORD *)(v4 + 240))
    *(_QWORD *)(v4 + 240) = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1000);
LABEL_17:
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 360) + 24);
  *(_DWORD *)(v4 + 228) = 0;
  *(_DWORD *)(v4 + 232) = 0;
  *(_DWORD *)(v4 + 224) = v7;
  if (*(int *)(a1 + 356) >= 1)
  {
LABEL_18:
    v8 = 0;
    v9 = v4 + 36;
    do
    {
      v14 = *(_QWORD *)(a1 + 8 * v8 + 360);
      if (*(_DWORD *)(a1 + 444) || *(_DWORD *)(a1 + 452))
      {
        if (*(_DWORD *)(a1 + 448))
          goto LABEL_26;
      }
      else
      {
        v18 = *(_DWORD *)(v14 + 20);
        v19 = v18;
        if (a2)
        {
          if (v18 >= 4)
          {
            v20 = *(void (***)(uint64_t))a1;
            *((_DWORD *)v20 + 10) = 52;
            *((_DWORD *)v20 + 11) = v18;
            (**(void (***)(uint64_t))a1)(a1);
          }
          v21 = v4 + 8 * v19;
          v24 = *(void **)(v21 + 128);
          v23 = (_QWORD *)(v21 + 128);
          v22 = v24;
          if (v24)
          {
            bzero(v22, 0x808uLL);
            *(_DWORD *)(v9 + 4 * v8) = 0;
            if (*(_DWORD *)(a1 + 448))
              goto LABEL_26;
          }
          else
          {
            v25 = (void *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2056);
            *v23 = v25;
            bzero(v25, 0x808uLL);
            *(_DWORD *)(v9 + 4 * v8) = 0;
            if (*(_DWORD *)(a1 + 448))
            {
LABEL_26:
              v15 = *(_DWORD *)(v14 + 24);
              v16 = v15;
              if (a2)
              {
                if (v15 >= 4)
                {
                  v17 = *(void (***)(uint64_t))a1;
                  *((_DWORD *)v17 + 10) = 52;
                  *((_DWORD *)v17 + 11) = v15;
                  (**(void (***)(uint64_t))a1)(a1);
                }
                v10 = v4 + 8 * v16;
                v13 = *(void **)(v10 + 160);
                v12 = (_QWORD *)(v10 + 160);
                v11 = v13;
                if (!v13)
                {
                  v11 = (void *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2056);
                  *v12 = v11;
                }
                bzero(v11, 0x808uLL);
              }
              else
              {
                sub_100379B68((_QWORD *)a1, 0, v15, (_QWORD *)(v4 + 8 * v15 + 96));
              }
            }
          }
        }
        else
        {
          sub_100379B68((_QWORD *)a1, 1, v18, (_QWORD *)(v4 + 8 * v18 + 64));
          *(_DWORD *)(v9 + 4 * v8) = 0;
          if (*(_DWORD *)(a1 + 448))
            goto LABEL_26;
        }
      }
      ++v8;
    }
    while (v8 < *(int *)(a1 + 356));
  }
LABEL_40:
  *(_QWORD *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 56) = *(unsigned int *)(a1 + 304);
}

uint64_t sub_1003777B8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v1 = result;
  v2 = *(_QWORD *)(result + 544);
  if (*(_BYTE *)(result + 332))
    result = sub_10037A240(*(_QWORD *)(result + 544));
  v16 = 0;
  if (*(int *)(v1 + 356) >= 1)
  {
    for (i = 45; ; ++i)
    {
      v5 = *(_QWORD *)(v1 + 8 * i);
      if (!*(_DWORD *)(v1 + 444) && !*(_DWORD *)(v1 + 452))
      {
        v6 = *(int *)(v5 + 20);
        if (!*((_BYTE *)&v16 + v6 + 4))
          break;
      }
      if (*(_DWORD *)(v1 + 448))
        goto LABEL_11;
LABEL_6:
      v4 = i - 44;
      if (v4 >= *(int *)(v1 + 356))
        return result;
    }
    v12 = v1 + 8 * v6;
    v15 = *(_QWORD *)(v12 + 160);
    v14 = (uint64_t *)(v12 + 160);
    v13 = v15;
    if (!v15)
    {
      v13 = sub_10037FD10(v1);
      *v14 = v13;
    }
    result = (uint64_t)sub_10037A328((uint64_t *)v1, v13, *(_QWORD *)(v2 + 8 * v6 + 128));
    *((_BYTE *)&v16 + v6 + 4) = 1;
    if (!*(_DWORD *)(v1 + 448))
      goto LABEL_6;
LABEL_11:
    v7 = *(int *)(v5 + 24);
    if (!*((_BYTE *)&v16 + v7))
    {
      v8 = v1 + 8 * v7;
      v11 = *(_QWORD *)(v8 + 192);
      v10 = (uint64_t *)(v8 + 192);
      v9 = v11;
      if (!v11)
      {
        v9 = sub_10037FD10(v1);
        *v10 = v9;
      }
      result = (uint64_t)sub_10037A328((uint64_t *)v1, v9, *(_QWORD *)(v2 + 8 * v7 + 160));
      *((_BYTE *)&v16 + v7) = 1;
    }
    goto LABEL_6;
  }
  return result;
}

__n128 sub_1003778EC(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  __n128 result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  int v17;

  v2 = a1[68];
  v3 = (_QWORD *)a1[5];
  v4 = (_BYTE *)*v3;
  if (*((_BYTE *)a1 + 332))
  {
    *(_QWORD *)(v2 + 200) = v4;
    *(_QWORD *)(v2 + 208) = v3[1];
    sub_10037A240(v2);
    sub_10037A98C(v2);
    v6 = (_QWORD *)a1[5];
    *v6 = *(_QWORD *)(v2 + 200);
    v6[1] = *(_QWORD *)(v2 + 208);
    return result;
  }
  v7 = v3[1];
  v8 = *(_QWORD *)(v2 + 24);
  v9 = *(_DWORD *)(v2 + 32);
  v16 = *(__n128 *)(v2 + 36);
  v17 = *(_DWORD *)(v2 + 52);
  if (v9 >= 1)
  {
    v10 = (127 << (17 - v9)) | v8;
    for (i = v9 + 15; i > 15; i -= 8)
    {
      *v4++ = BYTE2(v10);
      if (--v7)
      {
        if ((~(_DWORD)v10 & 0xFF0000) != 0)
          goto LABEL_6;
      }
      else
      {
        v12 = a1[5];
        if (!(*(unsigned int (**)(uint64_t *))(v12 + 24))(a1))
          goto LABEL_14;
        v4 = *(_BYTE **)v12;
        v7 = *(_QWORD *)(v12 + 8);
        if ((~(_DWORD)v10 & 0xFF0000) != 0)
          goto LABEL_6;
      }
      *v4++ = 0;
      if (!--v7)
      {
        v13 = a1[5];
        if (!(*(unsigned int (**)(uint64_t *))(v13 + 24))(a1))
        {
LABEL_14:
          v14 = *a1;
          *(_DWORD *)(v14 + 40) = 25;
          (*(void (**)(uint64_t *))v14)(a1);
          v7 = 0;
          goto LABEL_16;
        }
        v4 = *(_BYTE **)v13;
        v7 = *(_QWORD *)(v13 + 8);
      }
LABEL_6:
      LODWORD(v10) = (_DWORD)v10 << 8;
    }
  }
  v9 = 0;
  v8 = 0;
LABEL_16:
  v15 = (_QWORD *)a1[5];
  *v15 = v4;
  v15[1] = v7;
  *(_QWORD *)(v2 + 24) = v8;
  *(_DWORD *)(v2 + 32) = v9;
  result = v16;
  *(__n128 *)(v2 + 36) = v16;
  *(_DWORD *)(v2 + 52) = v17;
  return result;
}

uint64_t sub_100377ABC(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  int v23;

  v4 = *((_QWORD *)a1 + 68);
  v5 = (uint64_t *)*((_QWORD *)a1 + 5);
  v7 = *v5;
  v6 = v5[1];
  *(_QWORD *)(v4 + 200) = v7;
  *(_QWORD *)(v4 + 208) = v6;
  if (a1[76] && !*(_DWORD *)(v4 + 56))
  {
    sub_10037AAE4(v4, *(_DWORD *)(v4 + 60));
    if (a1[100] >= 1)
      goto LABEL_4;
  }
  else if (a1[100] >= 1)
  {
LABEL_4:
    v8 = 0;
    while (1)
    {
      v9 = a1[v8 + 101];
      v10 = *(int *)(*(_QWORD *)&a1[2 * v9 + 90] + 20);
      v11 = **(__int16 **)(a2 + 8 * v8) >> a1[114];
      v12 = v4 + 4 * v9;
      v13 = *(_DWORD *)(v12 + 36);
      *(_DWORD *)(v12 + 36) = v11;
      v14 = v11 - v13;
      if (v11 == v13)
      {
        v15 = 0;
      }
      else
      {
        if (v14 >= 0)
          v16 = v11 - v13;
        else
          v16 = v13 - v11;
        v17 = -1;
        do
        {
          ++v17;
          v18 = v16 > 1;
          v16 >>= 1;
        }
        while (v18);
        v15 = v17 + 1;
        if (v17 >= 0xB)
        {
          v19 = *(_QWORD *)a1;
          *(_DWORD *)(v19 + 40) = 6;
          (*(void (**)(int *))v19)(a1);
        }
      }
      if (*(_BYTE *)(v4 + 192))
        break;
      sub_10037A644(v4, *(_DWORD *)(*(_QWORD *)(v4 + 8 * v10 + 64) + 4 * v15), *(char *)(*(_QWORD *)(v4 + 8 * v10 + 64) + v15 + 1024));
      if (v15)
        goto LABEL_19;
LABEL_5:
      if (++v8 >= a1[100])
        goto LABEL_21;
    }
    ++*(_QWORD *)(*(_QWORD *)(v4 + 8 * v10 + 128) + 8 * v15);
    if (!v15)
      goto LABEL_5;
LABEL_19:
    sub_10037A644(v4, v14 + (v14 >> 31), v15);
    goto LABEL_5;
  }
LABEL_21:
  v20 = (_QWORD *)*((_QWORD *)a1 + 5);
  v21 = *(_QWORD *)(v4 + 208);
  *v20 = *(_QWORD *)(v4 + 200);
  v20[1] = v21;
  v22 = a1[76];
  if (v22)
  {
    v23 = *(_DWORD *)(v4 + 56);
    if (!v23)
    {
      *(_DWORD *)(v4 + 60) = (*(_DWORD *)(v4 + 60) + 1) & 7;
      v23 = v22;
    }
    *(_DWORD *)(v4 + 56) = v23 - 1;
  }
  return 1;
}

uint64_t sub_100377C70(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  signed int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;

  v3 = a1;
  v4 = a1[68];
  v5 = (uint64_t *)a1[5];
  v7 = *v5;
  v6 = v5[1];
  *(_QWORD *)(v4 + 200) = v7;
  *(_QWORD *)(v4 + 208) = v6;
  if (*((_DWORD *)a1 + 76) && !*(_DWORD *)(v4 + 56))
  {
    sub_10037AAE4(v4, *(_DWORD *)(v4 + 60));
    v8 = *((_DWORD *)v3 + 112);
    v9 = *((int *)v3 + 111);
    if ((int)v9 > v8)
      goto LABEL_58;
  }
  else
  {
    v8 = *((_DWORD *)a1 + 112);
    v9 = *((int *)a1 + 111);
    if ((int)v9 > v8)
      goto LABEL_58;
  }
  v10 = 0;
  v11 = *((_DWORD *)v3 + 114);
  v57 = v3[58];
  v56 = v8 + 1;
  v54 = v3;
  v55 = *a2;
  do
  {
    while (1)
    {
      v12 = *(__int16 *)(v55 + 2 * *(int *)(v57 + 4 * v9));
      if (*(_WORD *)(v55 + 2 * *(int *)(v57 + 4 * v9)))
      {
        v13 = v12 >= 0 ? v12 >> v11 : -v12 >> v11;
        v14 = v12 < 0 ? ~(-v12 >> v11) : v12 >> v11;
        if (v13)
          break;
      }
      ++v10;
      if (v56 == (_DWORD)++v9)
        goto LABEL_54;
    }
    if (*(_DWORD *)(v4 + 228))
      sub_10037A240(v4);
    if (v10 < 16)
    {
LABEL_22:
      if (v13 < 2)
        goto LABEL_23;
      goto LABEL_46;
    }
    v15 = *(unsigned __int8 *)(v4 + 192);
    if (*(_BYTE *)(v4 + 192))
    {
      if (v10 >= 31)
        v17 = 31;
      else
        v17 = v10;
      v18 = v10 - v17 + 15;
      v10 = v10 - (v18 & 0xFFFFFFF0) - 16;
      v16 = *(_QWORD *)(v4 + 8 * *(int *)(v4 + 224) + 160);
      *(_QWORD *)(v16 + 1920) += (v18 >> 4) + 1;
      goto LABEL_22;
    }
    while (1)
    {
      v20 = *(int *)(v4 + 224);
      if (v15)
      {
        ++*(_QWORD *)(*(_QWORD *)(v4 + 8 * v20 + 160) + 1920);
        goto LABEL_44;
      }
      v21 = *(_QWORD *)(v4 + 8 * v20 + 96);
      v22 = *(_DWORD *)(v21 + 960);
      v23 = *(char *)(v21 + 1264);
      if (*(_BYTE *)(v21 + 1264)
        || (v42 = *(uint64_t **)(v4 + 216),
            v43 = *v42,
            *(_DWORD *)(v43 + 40) = 41,
            (*(void (**)(uint64_t *))v43)(v42),
            !*(_BYTE *)(v4 + 192)))
      {
        v24 = ~(-1 << v23) & v22;
        v25 = *(_DWORD *)(v4 + 32) + v23;
        v26 = (v24 << (24 - v25)) | *(_QWORD *)(v4 + 24);
        if (v25 < 8)
        {
          v27 = v25;
LABEL_30:
          *(_QWORD *)(v4 + 24) = v26;
          *(_DWORD *)(v4 + 32) = v27;
          goto LABEL_44;
        }
        while (2)
        {
          v30 = *(_BYTE **)(v4 + 200);
          *(_QWORD *)(v4 + 200) = v30 + 1;
          *v30 = BYTE2(v26);
          v31 = *(_QWORD *)(v4 + 208) - 1;
          *(_QWORD *)(v4 + 208) = v31;
          if (v31)
          {
            if ((~(_DWORD)v26 & 0xFF0000) == 0)
              goto LABEL_40;
          }
          else
          {
            v32 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
            if ((*(unsigned int (**)(void))(v32 + 24))())
            {
              v33 = *(_QWORD *)(v32 + 8);
              *(_QWORD *)(v4 + 200) = *(_QWORD *)v32;
              *(_QWORD *)(v4 + 208) = v33;
              if ((~(_DWORD)v26 & 0xFF0000) == 0)
                goto LABEL_40;
            }
            else
            {
              v34 = *(uint64_t **)(v4 + 216);
              v35 = *v34;
              *(_DWORD *)(v35 + 40) = 25;
              (*(void (**)(uint64_t *))v35)(v34);
              v36 = *(_QWORD *)(v32 + 8);
              *(_QWORD *)(v4 + 200) = *(_QWORD *)v32;
              *(_QWORD *)(v4 + 208) = v36;
              if ((~(_DWORD)v26 & 0xFF0000) == 0)
              {
LABEL_40:
                v37 = *(_BYTE **)(v4 + 200);
                *(_QWORD *)(v4 + 200) = v37 + 1;
                *v37 = 0;
                v38 = *(_QWORD *)(v4 + 208) - 1;
                *(_QWORD *)(v4 + 208) = v38;
                if (!v38)
                {
                  v39 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
                  if (!(*(unsigned int (**)(void))(v39 + 24))())
                  {
                    v40 = *(uint64_t **)(v4 + 216);
                    v41 = *v40;
                    *(_DWORD *)(v41 + 40) = 25;
                    (*(void (**)(uint64_t *))v41)(v40);
                  }
                  v28 = *(_QWORD *)(v39 + 8);
                  *(_QWORD *)(v4 + 200) = *(_QWORD *)v39;
                  *(_QWORD *)(v4 + 208) = v28;
                }
              }
            }
          }
          v26 <<= 8;
          v27 = v25 - 8;
          v29 = v25 <= 15;
          v25 -= 8;
          if (v29)
            goto LABEL_30;
          continue;
        }
      }
LABEL_44:
      if (v10 <= 31)
        break;
      v15 = *(unsigned __int8 *)(v4 + 192);
      v10 -= 16;
    }
    v10 -= 16;
    v3 = v54;
    if (v13 < 2)
    {
LABEL_23:
      v19 = 1;
      goto LABEL_50;
    }
LABEL_46:
    v44 = 0;
    do
    {
      ++v44;
      v29 = v13 > 3;
      v13 >>= 1;
    }
    while (v29);
    v19 = v44 + 1;
    if (v44 >= 0xA)
    {
      v45 = *v3;
      *(_DWORD *)(v45 + 40) = 6;
      (*(void (**)(uint64_t *))v45)(v3);
    }
LABEL_50:
    v46 = v19 + 16 * v10;
    v47 = v4 + 8 * *(int *)(v4 + 224);
    if (*(_BYTE *)(v4 + 192))
      ++*(_QWORD *)(*(_QWORD *)(v47 + 160) + 8 * v46);
    else
      sub_10037A644(v4, *(_DWORD *)(*(_QWORD *)(v47 + 96) + 4 * v46), *(char *)(*(_QWORD *)(v47 + 96) + v46 + 1024));
    sub_10037A644(v4, v14, v19);
    v10 = 0;
    ++v9;
  }
  while (v56 != (_DWORD)v9);
LABEL_54:
  if (v10 >= 1)
  {
    v48 = *(_DWORD *)(v4 + 228) + 1;
    *(_DWORD *)(v4 + 228) = v48;
    if (v48 == 0x7FFF)
      sub_10037A240(v4);
  }
LABEL_58:
  v49 = (_QWORD *)v3[5];
  v50 = *(_QWORD *)(v4 + 208);
  *v49 = *(_QWORD *)(v4 + 200);
  v49[1] = v50;
  v51 = *((_DWORD *)v3 + 76);
  if (v51)
  {
    v52 = *(_DWORD *)(v4 + 56);
    if (!v52)
    {
      *(_DWORD *)(v4 + 60) = (*(_DWORD *)(v4 + 60) + 1) & 7;
      v52 = v51;
    }
    *(_DWORD *)(v4 + 56) = v52 - 1;
  }
  return 1;
}

uint64_t sub_10037809C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  int v31;

  v4 = *(_QWORD *)(a1 + 544);
  v5 = *(uint64_t **)(a1 + 40);
  v7 = *v5;
  v6 = v5[1];
  *(_QWORD *)(v4 + 200) = v7;
  *(_QWORD *)(v4 + 208) = v6;
  if (*(_DWORD *)(a1 + 304) && !*(_DWORD *)(v4 + 56))
  {
    sub_10037AAE4(v4, *(_DWORD *)(v4 + 60));
    v8 = *(_DWORD *)(a1 + 400);
    if (v8 < 1)
      goto LABEL_27;
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 400);
    if (v8 < 1)
      goto LABEL_27;
  }
  if (!*(_BYTE *)(v4 + 192))
  {
    v9 = 0;
    v10 = *(_DWORD *)(a1 + 456);
LABEL_6:
    v11 = *(_DWORD *)(v4 + 32);
    v12 = ((unint64_t)((**(__int16 **)(a2 + 8 * v9) >> v10) & 1) << (23 - v11)) | *(_QWORD *)(v4 + 24);
    if (v11 >= 7)
    {
      v13 = v11 + 9;
      while (1)
      {
        v15 = *(_BYTE **)(v4 + 200);
        *(_QWORD *)(v4 + 200) = v15 + 1;
        *v15 = BYTE2(v12);
        v16 = *(_QWORD *)(v4 + 208) - 1;
        *(_QWORD *)(v4 + 208) = v16;
        if (v16)
        {
          if ((~(_DWORD)v12 & 0xFF0000) == 0)
            goto LABEL_17;
        }
        else
        {
          v17 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
          if ((*(unsigned int (**)(void))(v17 + 24))())
          {
            v18 = *(_QWORD *)(v17 + 8);
            *(_QWORD *)(v4 + 200) = *(_QWORD *)v17;
            *(_QWORD *)(v4 + 208) = v18;
            if ((~(_DWORD)v12 & 0xFF0000) == 0)
              goto LABEL_17;
          }
          else
          {
            v19 = *(uint64_t **)(v4 + 216);
            v20 = *v19;
            *(_DWORD *)(v20 + 40) = 25;
            (*(void (**)(uint64_t *))v20)(v19);
            v21 = *(_QWORD *)(v17 + 8);
            *(_QWORD *)(v4 + 200) = *(_QWORD *)v17;
            *(_QWORD *)(v4 + 208) = v21;
            if ((~(_DWORD)v12 & 0xFF0000) == 0)
            {
LABEL_17:
              v22 = *(_BYTE **)(v4 + 200);
              *(_QWORD *)(v4 + 200) = v22 + 1;
              *v22 = 0;
              v23 = *(_QWORD *)(v4 + 208) - 1;
              *(_QWORD *)(v4 + 208) = v23;
              if (!v23)
              {
                v24 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
                if (!(*(unsigned int (**)(void))(v24 + 24))())
                {
                  v25 = *(uint64_t **)(v4 + 216);
                  v26 = *v25;
                  *(_DWORD *)(v26 + 40) = 25;
                  (*(void (**)(uint64_t *))v26)(v25);
                }
                v14 = *(_QWORD *)(v24 + 8);
                *(_QWORD *)(v4 + 200) = *(_QWORD *)v24;
                *(_QWORD *)(v4 + 208) = v14;
              }
            }
          }
        }
        v12 <<= 8;
        v13 -= 8;
        if (v13 <= 15)
        {
          v8 = *(_DWORD *)(a1 + 400);
          v27 = v13 - 8;
          goto LABEL_22;
        }
      }
    }
    v27 = v11 + 1;
LABEL_22:
    *(_QWORD *)(v4 + 24) = v12;
    *(_DWORD *)(v4 + 32) = v27;
    while (++v9 < v8)
    {
      if (!*(_BYTE *)(v4 + 192))
        goto LABEL_6;
    }
  }
LABEL_27:
  v28 = *(_QWORD **)(a1 + 40);
  v29 = *(_QWORD *)(v4 + 208);
  *v28 = *(_QWORD *)(v4 + 200);
  v28[1] = v29;
  v30 = *(_DWORD *)(a1 + 304);
  if (v30)
  {
    v31 = *(_DWORD *)(v4 + 56);
    if (!v31)
    {
      *(_DWORD *)(v4 + 60) = (*(_DWORD *)(v4 + 60) + 1) & 7;
      v31 = v30;
    }
    *(_DWORD *)(v4 + 56) = v31 - 1;
  }
  return 1;
}

uint64_t sub_1003782C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  _BYTE *v66;
  int v67;
  unint64_t v68;
  int v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  int v85;
  unint64_t v86;
  int v87;
  int v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  int v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  int v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  int v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  int v130;
  int v131;
  unsigned int v132;
  _QWORD *v133;
  int v134;
  int v135;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  _DWORD v144[64];

  v4 = *(_QWORD *)(a1 + 544);
  v5 = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(v4 + 200) = *v5;
  *(_QWORD *)(v4 + 208) = v5[1];
  if (*(_DWORD *)(a1 + 304) && !*(_DWORD *)(v4 + 56))
  {
    sub_10037AAE4(v4, *(_DWORD *)(v4 + 60));
    v6 = *(_DWORD *)(a1 + 448);
    v7 = *(_DWORD *)(a1 + 444);
    v139 = a1;
    if (v7 > v6)
      goto LABEL_4;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 448);
    v7 = *(_DWORD *)(a1 + 444);
    v139 = a1;
    if (v7 > v6)
    {
LABEL_4:
      LODWORD(v8) = 0;
      v9 = 0;
      goto LABEL_149;
    }
  }
  v10 = 0;
  v11 = *(_DWORD *)(a1 + 456);
  v12 = *a2;
  v13 = v6 + 1;
  v14 = v7;
  v138 = *(_QWORD *)(a1 + 464);
  v15 = (int *)(v138 + 4 * v7);
  v16 = &v144[v7];
  do
  {
    v17 = *v15++;
    v18 = *(__int16 *)(v12 + 2 * v17);
    if (v18 < 0)
      v18 = -v18;
    v19 = v18 >> v11;
    *v16++ = v19;
    if (v19 == 1)
      v10 = v7;
    ++v7;
  }
  while (v13 != v7);
  v137 = v12;
  v9 = 0;
  v20 = 0;
  v140 = v10;
  v21 = (_BYTE *)(*(_QWORD *)(v4 + 240) + *(unsigned int *)(v4 + 232));
  v141 = v13;
  do
  {
    while (1)
    {
      v22 = v144[v14];
      if (v22)
        break;
      LODWORD(v8) = v20 + 1;
      ++v14;
      v20 = (v20 + 1);
      if (v13 == (_DWORD)v14)
        goto LABEL_149;
    }
    v142 = v144[v14];
    v143 = v14;
    if ((int)v20 < 16)
    {
      v8 = v20;
      v23 = v9;
      if (v22 >= 2)
        goto LABEL_18;
      goto LABEL_128;
    }
    v8 = v20;
    v23 = v9;
    if (v14 <= v140)
    {
      while (1)
      {
        v25 = *(_DWORD *)(v4 + 228);
        if (v25)
          break;
LABEL_88:
        v81 = *(int *)(v4 + 224);
        if (*(_BYTE *)(v4 + 192))
        {
          ++*(_QWORD *)(*(_QWORD *)(v4 + 8 * v81 + 160) + 1920);
          goto LABEL_20;
        }
        v82 = *(_QWORD *)(v4 + 8 * v81 + 96);
        v83 = *(_DWORD *)(v82 + 960);
        v84 = *(char *)(v82 + 1264);
        if (!*(_BYTE *)(v82 + 1264))
        {
          v113 = *(uint64_t **)(v4 + 216);
          v114 = *v113;
          *(_DWORD *)(v114 + 40) = 41;
          (*(void (**)(uint64_t *))v114)(v113);
          if (*(_BYTE *)(v4 + 192))
            goto LABEL_20;
        }
        v85 = *(_DWORD *)(v4 + 32) + v84;
        v86 = ((unint64_t)(~(-1 << v84) & v83) << (24 - (*(_BYTE *)(v4 + 32) + v84))) | *(_QWORD *)(v4 + 24);
        if (v85 < 8)
        {
          v87 = 0;
          *(_QWORD *)(v4 + 24) = v86;
          *(_DWORD *)(v4 + 32) = v85;
          if (v9)
            goto LABEL_105;
          goto LABEL_20;
        }
        do
        {
          v88 = v85;
          v89 = *(_BYTE **)(v4 + 200);
          *(_QWORD *)(v4 + 200) = v89 + 1;
          *v89 = BYTE2(v86);
          v90 = *(_QWORD *)(v4 + 208) - 1;
          *(_QWORD *)(v4 + 208) = v90;
          if (v90)
          {
            if ((~(_DWORD)v86 & 0xFF0000) != 0)
              goto LABEL_94;
LABEL_101:
            v94 = *(_BYTE **)(v4 + 200);
            *(_QWORD *)(v4 + 200) = v94 + 1;
            *v94 = 0;
            v95 = *(_QWORD *)(v4 + 208) - 1;
            *(_QWORD *)(v4 + 208) = v95;
            if (!v95)
            {
              v96 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
              if (!(*(unsigned int (**)(void))(v96 + 24))())
              {
                v97 = *(uint64_t **)(v4 + 216);
                v98 = *v97;
                *(_DWORD *)(v98 + 40) = 25;
                (*(void (**)(uint64_t *))v98)(v97);
              }
              *(_QWORD *)(v4 + 200) = *(_QWORD *)v96;
              *(_QWORD *)(v4 + 208) = *(_QWORD *)(v96 + 8);
            }
            goto LABEL_94;
          }
          v91 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
          if (!(*(unsigned int (**)(void))(v91 + 24))())
          {
            v92 = *(uint64_t **)(v4 + 216);
            v93 = *v92;
            *(_DWORD *)(v93 + 40) = 25;
            (*(void (**)(uint64_t *))v93)(v92);
          }
          *(_QWORD *)(v4 + 200) = *(_QWORD *)v91;
          *(_QWORD *)(v4 + 208) = *(_QWORD *)(v91 + 8);
          if ((~(_DWORD)v86 & 0xFF0000) == 0)
            goto LABEL_101;
LABEL_94:
          v86 <<= 8;
          v85 = v88 - 8;
        }
        while (v88 > 15);
        v87 = *(unsigned __int8 *)(v4 + 192);
        *(_QWORD *)(v4 + 24) = v86;
        *(_DWORD *)(v4 + 32) = v85;
        if (v9)
        {
LABEL_105:
          if (!v87)
          {
LABEL_106:
            v99 = *(_DWORD *)(v4 + 32);
            v100 = ((unint64_t)(*v21 & 1) << (23 - v99)) | *(_QWORD *)(v4 + 24);
            if (v99 >= 7)
            {
              v101 = v99 + 9;
              while (1)
              {
                v102 = *(_BYTE **)(v4 + 200);
                *(_QWORD *)(v4 + 200) = v102 + 1;
                *v102 = BYTE2(v100);
                v103 = *(_QWORD *)(v4 + 208) - 1;
                *(_QWORD *)(v4 + 208) = v103;
                if (!v103)
                  break;
                if ((~(_DWORD)v100 & 0xFF0000) == 0)
                  goto LABEL_116;
LABEL_109:
                v100 <<= 8;
                v101 -= 8;
                if (v101 <= 15)
                {
                  v112 = v101 - 8;
                  goto LABEL_121;
                }
              }
              v104 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
              if (!(*(unsigned int (**)(void))(v104 + 24))())
              {
                v105 = *(uint64_t **)(v4 + 216);
                v106 = *v105;
                *(_DWORD *)(v106 + 40) = 25;
                (*(void (**)(uint64_t *))v106)(v105);
              }
              *(_QWORD *)(v4 + 200) = *(_QWORD *)v104;
              *(_QWORD *)(v4 + 208) = *(_QWORD *)(v104 + 8);
              if ((~(_DWORD)v100 & 0xFF0000) != 0)
                goto LABEL_109;
LABEL_116:
              v107 = *(_BYTE **)(v4 + 200);
              *(_QWORD *)(v4 + 200) = v107 + 1;
              *v107 = 0;
              v108 = *(_QWORD *)(v4 + 208) - 1;
              *(_QWORD *)(v4 + 208) = v108;
              if (!v108)
              {
                v109 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
                if (!(*(unsigned int (**)(void))(v109 + 24))())
                {
                  v110 = *(uint64_t **)(v4 + 216);
                  v111 = *v110;
                  *(_DWORD *)(v111 + 40) = 25;
                  (*(void (**)(uint64_t *))v111)(v110);
                }
                *(_QWORD *)(v4 + 200) = *(_QWORD *)v109;
                *(_QWORD *)(v4 + 208) = *(_QWORD *)(v109 + 8);
              }
              goto LABEL_109;
            }
            v112 = v99 + 1;
LABEL_121:
            *(_QWORD *)(v4 + 24) = v100;
            *(_DWORD *)(v4 + 32) = v112;
            while (--v9)
            {
              ++v21;
              if (!*(_BYTE *)(v4 + 192))
                goto LABEL_106;
            }
          }
        }
LABEL_20:
        v9 = 0;
        v23 = 0;
        v8 = (v20 - 16);
        v21 = *(_BYTE **)(v4 + 240);
        v24 = (int)v20 <= 31;
        LODWORD(v20) = v20 - 16;
        if (v24)
          goto LABEL_17;
      }
      if (v25 == 1)
      {
        v26 = 0;
      }
      else
      {
        v27 = -1;
        do
        {
          ++v27;
          v24 = v25 > 3;
          v25 >>= 1;
        }
        while (v24);
        v26 = v27 + 1;
        if (v27 >= 0xE)
        {
          v28 = *(uint64_t **)(v4 + 216);
          v29 = *v28;
          *(_DWORD *)(v29 + 40) = 41;
          (*(void (**)(uint64_t *))v29)(v28);
        }
      }
      v30 = *(int *)(v4 + 224);
      v31 = *(unsigned __int8 *)(v4 + 192);
      v32 = (int)(16 * v26);
      if (*(_BYTE *)(v4 + 192))
      {
        ++*(_QWORD *)(*(_QWORD *)(v4 + 8 * v30 + 160) + 8 * v32);
        goto LABEL_47;
      }
      v33 = *(_QWORD *)(v4 + 8 * v30 + 96);
      v34 = *(_DWORD *)(v33 + 4 * v32);
      v35 = v33 + v32;
      v36 = *(char *)(v35 + 1024);
      if (!*(_BYTE *)(v35 + 1024))
      {
        v50 = *(uint64_t **)(v4 + 216);
        v51 = *v50;
        *(_DWORD *)(v51 + 40) = 41;
        (*(void (**)(uint64_t *))v51)(v50);
        v31 = *(unsigned __int8 *)(v4 + 192);
        if (*(_BYTE *)(v4 + 192))
        {
LABEL_47:
          if (!v26)
            goto LABEL_65;
          if (v31)
          {
            *(_DWORD *)(v4 + 228) = 0;
LABEL_87:
            *(_DWORD *)(v4 + 232) = 0;
            goto LABEL_88;
          }
          v52 = *(_DWORD *)(v4 + 32) + v26;
          v53 = ((*(unsigned int *)(v4 + 228) & (unint64_t)~(-1 << v26)) << (24
                                                                                    - (*(_BYTE *)(v4 + 32)
                                                                                     + v26))) | *(_QWORD *)(v4 + 24);
          if (v52 < 8)
          {
            v31 = 0;
            goto LABEL_64;
          }
          while (1)
          {
            v54 = v52;
            v55 = *(_BYTE **)(v4 + 200);
            *(_QWORD *)(v4 + 200) = v55 + 1;
            *v55 = BYTE2(v53);
            v56 = *(_QWORD *)(v4 + 208) - 1;
            *(_QWORD *)(v4 + 208) = v56;
            if (!v56)
              break;
            if ((~(_DWORD)v53 & 0xFF0000) == 0)
              goto LABEL_60;
LABEL_53:
            v53 <<= 8;
            v52 = v54 - 8;
            if (v54 <= 15)
            {
              v31 = *(unsigned __int8 *)(v4 + 192);
LABEL_64:
              *(_QWORD *)(v4 + 24) = v53;
              *(_DWORD *)(v4 + 32) = v52;
LABEL_65:
              *(_DWORD *)(v4 + 228) = 0;
              v65 = *(_DWORD *)(v4 + 232);
              if (!v65 || v31)
                goto LABEL_87;
              v66 = *(_BYTE **)(v4 + 240);
LABEL_68:
              v67 = *(_DWORD *)(v4 + 32);
              v68 = ((unint64_t)(*v66 & 1) << (23 - v67)) | *(_QWORD *)(v4 + 24);
              if (v67 < 7)
              {
                v80 = v67 + 1;
LABEL_83:
                *(_QWORD *)(v4 + 24) = v68;
                *(_DWORD *)(v4 + 32) = v80;
                while (--v65)
                {
                  ++v66;
                  if (!*(_BYTE *)(v4 + 192))
                    goto LABEL_68;
                }
                goto LABEL_87;
              }
              v69 = v67 + 9;
              while (2)
              {
                v70 = *(_BYTE **)(v4 + 200);
                *(_QWORD *)(v4 + 200) = v70 + 1;
                *v70 = BYTE2(v68);
                v71 = *(_QWORD *)(v4 + 208) - 1;
                *(_QWORD *)(v4 + 208) = v71;
                if (v71)
                {
                  if ((~(_DWORD)v68 & 0xFF0000) == 0)
                    goto LABEL_78;
                }
                else
                {
                  v72 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
                  if (!(*(unsigned int (**)(void))(v72 + 24))())
                  {
                    v73 = *(uint64_t **)(v4 + 216);
                    v74 = *v73;
                    *(_DWORD *)(v74 + 40) = 25;
                    (*(void (**)(uint64_t *))v74)(v73);
                  }
                  *(_QWORD *)(v4 + 200) = *(_QWORD *)v72;
                  *(_QWORD *)(v4 + 208) = *(_QWORD *)(v72 + 8);
                  if ((~(_DWORD)v68 & 0xFF0000) == 0)
                  {
LABEL_78:
                    v75 = *(_BYTE **)(v4 + 200);
                    *(_QWORD *)(v4 + 200) = v75 + 1;
                    *v75 = 0;
                    v76 = *(_QWORD *)(v4 + 208) - 1;
                    *(_QWORD *)(v4 + 208) = v76;
                    if (!v76)
                    {
                      v77 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
                      if (!(*(unsigned int (**)(void))(v77 + 24))())
                      {
                        v78 = *(uint64_t **)(v4 + 216);
                        v79 = *v78;
                        *(_DWORD *)(v79 + 40) = 25;
                        (*(void (**)(uint64_t *))v79)(v78);
                      }
                      *(_QWORD *)(v4 + 200) = *(_QWORD *)v77;
                      *(_QWORD *)(v4 + 208) = *(_QWORD *)(v77 + 8);
                    }
                  }
                }
                v68 <<= 8;
                v69 -= 8;
                if (v69 <= 15)
                {
                  v80 = v69 - 8;
                  goto LABEL_83;
                }
                continue;
              }
            }
          }
          v57 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
          if (!(*(unsigned int (**)(void))(v57 + 24))())
          {
            v58 = *(uint64_t **)(v4 + 216);
            v59 = *v58;
            *(_DWORD *)(v59 + 40) = 25;
            (*(void (**)(uint64_t *))v59)(v58);
          }
          *(_QWORD *)(v4 + 200) = *(_QWORD *)v57;
          *(_QWORD *)(v4 + 208) = *(_QWORD *)(v57 + 8);
          if ((~(_DWORD)v53 & 0xFF0000) != 0)
            goto LABEL_53;
LABEL_60:
          v60 = *(_BYTE **)(v4 + 200);
          *(_QWORD *)(v4 + 200) = v60 + 1;
          *v60 = 0;
          v61 = *(_QWORD *)(v4 + 208) - 1;
          *(_QWORD *)(v4 + 208) = v61;
          if (!v61)
          {
            v62 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
            if (!(*(unsigned int (**)(void))(v62 + 24))())
            {
              v63 = *(uint64_t **)(v4 + 216);
              v64 = *v63;
              *(_DWORD *)(v64 + 40) = 25;
              (*(void (**)(uint64_t *))v64)(v63);
            }
            *(_QWORD *)(v4 + 200) = *(_QWORD *)v62;
            *(_QWORD *)(v4 + 208) = *(_QWORD *)(v62 + 8);
          }
          goto LABEL_53;
        }
      }
      v37 = *(_DWORD *)(v4 + 32) + v36;
      v38 = ((unint64_t)(~(-1 << v36) & v34) << (24 - (*(_BYTE *)(v4 + 32) + v36))) | *(_QWORD *)(v4 + 24);
      if (v37 < 8)
      {
        v31 = 0;
        goto LABEL_45;
      }
      while (1)
      {
        v39 = v37;
        v40 = *(_BYTE **)(v4 + 200);
        *(_QWORD *)(v4 + 200) = v40 + 1;
        *v40 = BYTE2(v38);
        v41 = *(_QWORD *)(v4 + 208) - 1;
        *(_QWORD *)(v4 + 208) = v41;
        if (!v41)
          break;
        if ((~(_DWORD)v38 & 0xFF0000) == 0)
          goto LABEL_41;
LABEL_34:
        v38 <<= 8;
        v37 = v39 - 8;
        if (v39 <= 15)
        {
          v31 = *(unsigned __int8 *)(v4 + 192);
LABEL_45:
          *(_QWORD *)(v4 + 24) = v38;
          *(_DWORD *)(v4 + 32) = v37;
          goto LABEL_47;
        }
      }
      v42 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
      if (!(*(unsigned int (**)(void))(v42 + 24))())
      {
        v43 = *(uint64_t **)(v4 + 216);
        v44 = *v43;
        *(_DWORD *)(v44 + 40) = 25;
        (*(void (**)(uint64_t *))v44)(v43);
      }
      *(_QWORD *)(v4 + 200) = *(_QWORD *)v42;
      *(_QWORD *)(v4 + 208) = *(_QWORD *)(v42 + 8);
      if ((~(_DWORD)v38 & 0xFF0000) != 0)
        goto LABEL_34;
LABEL_41:
      v45 = *(_BYTE **)(v4 + 200);
      *(_QWORD *)(v4 + 200) = v45 + 1;
      *v45 = 0;
      v46 = *(_QWORD *)(v4 + 208) - 1;
      *(_QWORD *)(v4 + 208) = v46;
      if (!v46)
      {
        v47 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
        if (!(*(unsigned int (**)(void))(v47 + 24))())
        {
          v48 = *(uint64_t **)(v4 + 216);
          v49 = *v48;
          *(_DWORD *)(v49 + 40) = 25;
          (*(void (**)(uint64_t *))v49)(v48);
        }
        *(_QWORD *)(v4 + 200) = *(_QWORD *)v47;
        *(_QWORD *)(v4 + 208) = *(_QWORD *)(v47 + 8);
      }
      goto LABEL_34;
    }
LABEL_17:
    LOBYTE(v22) = v142;
    if (v142 >= 2)
    {
LABEL_18:
      v9 = v23 + 1;
      v21[v23] = v22 & 1;
      goto LABEL_148;
    }
LABEL_128:
    sub_10037A240(v4);
    v115 = *(int *)(v4 + 224);
    v116 = (16 * (int)v8) | 1;
    if (*(_BYTE *)(v4 + 192))
    {
      ++*(_QWORD *)(*(_QWORD *)(v4 + 8 * v115 + 160) + 8 * v116);
      goto LABEL_147;
    }
    sub_10037A644(v4, *(_DWORD *)(*(_QWORD *)(v4 + 8 * v115 + 96) + 4 * v116), *(char *)(*(_QWORD *)(v4 + 8 * v115 + 96) + v116 + 1024));
    if (!*(_BYTE *)(v4 + 192))
    {
      v117 = *(_DWORD *)(v4 + 32);
      v118 = ((unint64_t)((*(unsigned __int16 *)(v137 + 2 * *(int *)(v138 + 4 * v143)) >> 15) ^ 1u) << (23 - v117)) | *(_QWORD *)(v4 + 24);
      if (v117 < 7)
      {
        v130 = v117 + 1;
        goto LABEL_146;
      }
      v119 = v117 + 9;
      while (1)
      {
        v120 = *(_BYTE **)(v4 + 200);
        *(_QWORD *)(v4 + 200) = v120 + 1;
        *v120 = BYTE2(v118);
        v121 = *(_QWORD *)(v4 + 208) - 1;
        *(_QWORD *)(v4 + 208) = v121;
        if (!v121)
          break;
        if ((~(_DWORD)v118 & 0xFF0000) == 0)
          goto LABEL_141;
LABEL_134:
        v118 <<= 8;
        v119 -= 8;
        if (v119 <= 15)
        {
          v130 = v119 - 8;
LABEL_146:
          *(_QWORD *)(v4 + 24) = v118;
          *(_DWORD *)(v4 + 32) = v130;
          goto LABEL_147;
        }
      }
      v122 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
      if (!(*(unsigned int (**)(void))(v122 + 24))())
      {
        v123 = *(uint64_t **)(v4 + 216);
        v124 = *v123;
        *(_DWORD *)(v124 + 40) = 25;
        (*(void (**)(uint64_t *))v124)(v123);
      }
      *(_QWORD *)(v4 + 200) = *(_QWORD *)v122;
      *(_QWORD *)(v4 + 208) = *(_QWORD *)(v122 + 8);
      if ((~(_DWORD)v118 & 0xFF0000) != 0)
        goto LABEL_134;
LABEL_141:
      v125 = *(_BYTE **)(v4 + 200);
      *(_QWORD *)(v4 + 200) = v125 + 1;
      *v125 = 0;
      v126 = *(_QWORD *)(v4 + 208) - 1;
      *(_QWORD *)(v4 + 208) = v126;
      if (!v126)
      {
        v127 = *(_QWORD *)(*(_QWORD *)(v4 + 216) + 40);
        if (!(*(unsigned int (**)(void))(v127 + 24))())
        {
          v128 = *(uint64_t **)(v4 + 216);
          v129 = *v128;
          *(_DWORD *)(v129 + 40) = 25;
          (*(void (**)(uint64_t *))v129)(v128);
        }
        *(_QWORD *)(v4 + 200) = *(_QWORD *)v127;
        *(_QWORD *)(v4 + 208) = *(_QWORD *)(v127 + 8);
      }
      goto LABEL_134;
    }
LABEL_147:
    sub_10037A7F4(v4, v21, v23);
    v8 = 0;
    v9 = 0;
    v21 = *(_BYTE **)(v4 + 240);
LABEL_148:
    v13 = v141;
    v14 = v143 + 1;
    v20 = v8;
  }
  while (v141 != (_DWORD)v143 + 1);
LABEL_149:
  if ((int)v8 > 0 || v9)
  {
    v131 = *(_DWORD *)(v4 + 228) + 1;
    v132 = *(_DWORD *)(v4 + 232) + v9;
    *(_DWORD *)(v4 + 228) = v131;
    *(_DWORD *)(v4 + 232) = v132;
    if (v131 == 0x7FFF || v132 >= 0x3AA)
      sub_10037A240(v4);
  }
  v133 = *(_QWORD **)(v139 + 40);
  *v133 = *(_QWORD *)(v4 + 200);
  v133[1] = *(_QWORD *)(v4 + 208);
  v134 = *(_DWORD *)(v139 + 304);
  if (v134)
  {
    v135 = *(_DWORD *)(v4 + 56);
    if (!v135)
    {
      *(_DWORD *)(v4 + 60) = (*(_DWORD *)(v4 + 60) + 1) & 7;
      v135 = v134;
    }
    *(_DWORD *)(v4 + 56) = v135 - 1;
  }
  return 1;
}

uint64_t sub_100378E7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  signed int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  v3 = a1[68];
  if (*((_DWORD *)a1 + 76))
  {
    v4 = *(_DWORD *)(v3 + 56);
    if (!v4)
    {
      if (*((int *)a1 + 89) < 1)
      {
        v4 = *((_DWORD *)a1 + 76);
      }
      else
      {
        v5 = 0;
        do
          *(_DWORD *)(v3 + 36 + 4 * v5++) = 0;
        while (v5 < *((int *)a1 + 89));
        v4 = *((_DWORD *)a1 + 76);
      }
    }
    *(_DWORD *)(v3 + 56) = v4 - 1;
  }
  if (*((int *)a1 + 100) >= 1)
  {
    v6 = 0;
    v33 = v3;
    v34 = a2;
    do
    {
      v7 = *((int *)a1 + v6 + 101);
      v8 = a1[v7 + 45];
      v9 = *(__int16 **)(a2 + 8 * v6);
      v10 = v3 + 4 * v7;
      v12 = *(_DWORD *)(v10 + 36);
      v11 = (_DWORD *)(v10 + 36);
      v13 = *(_QWORD *)(v3 + 8 * *(int *)(v8 + 20) + 128);
      v14 = *(_QWORD **)(v3 + 8 * *(int *)(v8 + 24) + 160);
      v15 = *((unsigned int *)a1 + 118);
      v16 = a1[58];
      LODWORD(v8) = *v9;
      v17 = v8 - v12;
      if ((_DWORD)v8 == v12)
      {
        v18 = 0;
      }
      else
      {
        if (v17 >= 0)
          v19 = v17;
        else
          v19 = -v17;
        v20 = -1;
        do
        {
          ++v20;
          v21 = v19 > 1;
          v19 >>= 1;
        }
        while (v21);
        v18 = v20 + 1;
        if (v20 >= 0xB)
        {
          v22 = *a1;
          *(_DWORD *)(v22 + 40) = 6;
          (*(void (**)(uint64_t *))v22)(a1);
        }
      }
      ++*(_QWORD *)(v13 + 8 * v18);
      if ((int)v15 >= 1)
      {
        v23 = 0;
        v24 = v15 + 1;
        v25 = 1;
        do
        {
          while (1)
          {
            v26 = v23;
            LOWORD(v23) = v9[*(int *)(v16 + 4 * v25)];
            if (!(_WORD)v23)
              break;
            if (v26 >= 16)
            {
              if (v26 >= 31)
                v27 = 31;
              else
                v27 = v26;
              v28 = v26 - v27 + 15;
              v26 = v26 - (v28 & 0xFFFFFFF0) - 16;
              v14[240] += (v28 >> 4) + 1;
            }
            if ((v23 & 0x8000u) != 0)
              v23 = -(__int16)v23;
            v23 = (unsigned __int16)v23;
            if ((unsigned __int16)v23 >= 2u)
            {
              v30 = 0;
              do
              {
                ++v30;
                v21 = v23 > 3;
                v23 >>= 1;
              }
              while (v21);
              v29 = v30 + 1;
              if (v30 >= 0xA)
              {
                v31 = *a1;
                *(_DWORD *)(v31 + 40) = 6;
                (*(void (**)(uint64_t *))v31)(a1);
              }
            }
            else
            {
              v29 = 1;
            }
            v23 = 0;
            ++v14[16 * v26 + v29];
            if (++v25 == v24)
              goto LABEL_11;
          }
          v23 = v26 + 1;
          ++v25;
        }
        while (v25 != v24);
        if ((v26 & 0x80000000) == 0)
          ++*v14;
      }
LABEL_11:
      v3 = v33;
      a2 = v34;
      *v11 = **(__int16 **)(v34 + 8 * v6++);
    }
    while (v6 < *((int *)a1 + 100));
  }
  return 1;
}

uint64_t sub_1003790F8(uint64_t *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _BYTE *v47;
  uint64_t *v48;
  uint64_t result;
  uint64_t v50;
  _BYTE *v51;
  uint64_t *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  _BYTE *v68;
  uint64_t *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t *v72;
  unsigned int v73;
  BOOL v74;
  _BYTE *v75;
  uint64_t *v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t *v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  int v96;
  _BYTE *v97;
  uint64_t *v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t *v101;
  uint64_t v102;
  _QWORD *v103;
  __int128 v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  int *v132;

  v3 = (int *)a1;
  v4 = a1[68];
  v132 = 0;
  v130 = 0u;
  v131 = 0u;
  v129 = 0u;
  v5 = a1[5];
  v6 = *(_BYTE **)v5;
  v7 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)&v129 = *(_QWORD *)v5;
  *((_QWORD *)&v129 + 1) = v7;
  v8 = *(_OWORD *)(v4 + 40);
  v130 = *(_OWORD *)(v4 + 24);
  v131 = v8;
  v132 = (int *)a1;
  if (!*((_DWORD *)a1 + 76) || *(_DWORD *)(v4 + 56))
    goto LABEL_3;
  v107 = *(_DWORD *)(v4 + 60);
  if (SDWORD2(v130) < 1)
    goto LABEL_139;
  v108 = v130 | (127 << (17 - BYTE8(v130)));
  v109 = DWORD2(v130) + 15;
  do
  {
    v110 = (_BYTE *)v129;
    *(_QWORD *)&v129 = v129 + 1;
    *v110 = BYTE2(v108);
    if (--*((_QWORD *)&v129 + 1))
    {
      if ((~(_DWORD)v108 & 0xFF0000) != 0)
        goto LABEL_129;
    }
    else
    {
      v111 = *((_QWORD *)v132 + 5);
      result = (*(uint64_t (**)(void))(v111 + 24))();
      if (!(_DWORD)result)
        return result;
      v112 = *(_QWORD *)(v111 + 8);
      *(_QWORD *)&v129 = *(_QWORD *)v111;
      *((_QWORD *)&v129 + 1) = v112;
      if ((~(_DWORD)v108 & 0xFF0000) != 0)
        goto LABEL_129;
    }
    v113 = (_BYTE *)v129;
    *(_QWORD *)&v129 = v129 + 1;
    *v113 = 0;
    if (!--*((_QWORD *)&v129 + 1))
    {
      v114 = *((_QWORD *)v132 + 5);
      result = (*(uint64_t (**)(void))(v114 + 24))();
      if (!(_DWORD)result)
        return result;
      v115 = *(_QWORD *)(v114 + 8);
      *(_QWORD *)&v129 = *(_QWORD *)v114;
      *((_QWORD *)&v129 + 1) = v115;
    }
LABEL_129:
    LODWORD(v108) = (_DWORD)v108 << 8;
    v109 -= 8;
  }
  while (v109 > 15);
  v6 = (_BYTE *)v129;
LABEL_139:
  DWORD2(v130) = 0;
  *(_QWORD *)&v130 = 0;
  *(_QWORD *)&v129 = v6 + 1;
  *v6 = -1;
  if (--*((_QWORD *)&v129 + 1))
  {
    v116 = (_BYTE *)v129;
    goto LABEL_143;
  }
  v117 = *((_QWORD *)v132 + 5);
  result = (*(uint64_t (**)(void))(v117 + 24))();
  if ((_DWORD)result)
  {
    v116 = *(_BYTE **)v117;
    *((_QWORD *)&v129 + 1) = *(_QWORD *)(v117 + 8);
LABEL_143:
    *(_QWORD *)&v129 = v116 + 1;
    *v116 = v107 - 48;
    v118 = (uint64_t *)v132;
    v7 = --*((_QWORD *)&v129 + 1);
    if (*((_QWORD *)&v129 + 1))
    {
      if (v132[89] < 1)
        goto LABEL_3;
LABEL_148:
      v120 = 0;
      do
        *((_DWORD *)&v130 + v120++ + 3) = 0;
      while (v120 < *((int *)v118 + 89));
LABEL_3:
      if (v3[100] < 1)
        goto LABEL_121;
      v9 = 0;
      v123 = a2;
      while (1)
      {
        v10 = v3[v9 + 101];
        v11 = *(__int16 **)(a2 + 8 * v9);
        v12 = (char *)&v129 + 4 * v10;
        v13 = *((_DWORD *)v12 + 7);
        v14 = *(_QWORD *)&v3[2 * v10 + 90];
        v15 = *(_QWORD *)(v4 + 8 * *(int *)(v14 + 20) + 64);
        v16 = (uint64_t *)v132;
        v127 = v132[118];
        v128 = *(unsigned int **)(v4 + 8 * *(int *)(v14 + 24) + 96);
        v125 = v9;
        v126 = *((_QWORD *)v132 + 58);
        LODWORD(v14) = *v11;
        v17 = v14 - v13;
        v124 = v12 + 28;
        if ((_DWORD)v14 == v13)
        {
          v18 = 0;
        }
        else
        {
          if (v17 >= 0)
            v19 = v17;
          else
            v19 = -v17;
          v20 = -1;
          do
          {
            ++v20;
            v21 = v19 > 1;
            v19 >>= 1;
          }
          while (v21);
          v18 = v20 + 1;
          if (v20 >= 0xB)
          {
            v22 = *(_QWORD *)v132;
            *(_DWORD *)(v22 + 40) = 6;
            (*(void (**)(uint64_t *))v22)(v16);
          }
        }
        v23 = v18;
        v24 = *(_DWORD *)(v15 + 4 * v18);
        v25 = *(char *)(v15 + v23 + 1024);
        if (!v25)
        {
          v26 = *v16;
          *(_DWORD *)(v26 + 40) = 41;
          (*(void (**)(uint64_t *))v26)(v16);
        }
        v27 = DWORD2(v130) + v25;
        v28 = ((unint64_t)(~(-1 << v25) & v24) << (24 - (BYTE8(v130) + v25))) | v130;
        if (DWORD2(v130) + v25 >= 8)
          break;
        v29 = DWORD2(v130) + v25;
LABEL_18:
        *(_QWORD *)&v130 = v28;
        DWORD2(v130) = v29;
        if (!(_DWORD)v23)
          goto LABEL_22;
        v30 = ~(-1 << v23) & (v17 + (v17 >> 31));
        v31 = v29 + v23;
        v28 |= v30 << (24 - v31);
        if (v31 >= 8)
        {
          while (1)
          {
            v85 = (_BYTE *)v129;
            *(_QWORD *)&v129 = v129 + 1;
            *v85 = BYTE2(v28);
            v7 = --*((_QWORD *)&v129 + 1);
            if (*((_QWORD *)&v129 + 1))
            {
              if ((~(_DWORD)v28 & 0xFF0000) != 0)
                goto LABEL_96;
            }
            else
            {
              v86 = *((_QWORD *)v132 + 5);
              result = (*(uint64_t (**)(void))(v86 + 24))();
              if (!(_DWORD)result)
                return result;
              v7 = *(_QWORD *)(v86 + 8);
              *(_QWORD *)&v129 = *(_QWORD *)v86;
              *((_QWORD *)&v129 + 1) = v7;
              if ((~(_DWORD)v28 & 0xFF0000) != 0)
                goto LABEL_96;
            }
            v87 = (_BYTE *)v129;
            *(_QWORD *)&v129 = v129 + 1;
            *v87 = 0;
            v7 = --*((_QWORD *)&v129 + 1);
            if (!*((_QWORD *)&v129 + 1))
            {
              v88 = *((_QWORD *)v132 + 5);
              result = (*(uint64_t (**)(void))(v88 + 24))();
              if (!(_DWORD)result)
                return result;
              v7 = *(_QWORD *)(v88 + 8);
              *(_QWORD *)&v129 = *(_QWORD *)v88;
              *((_QWORD *)&v129 + 1) = v7;
            }
LABEL_96:
            v28 <<= 8;
            v29 = v31 - 8;
            v21 = v31 <= 15;
            v31 -= 8;
            if (v21)
              goto LABEL_21;
          }
        }
        v29 = v31;
LABEL_21:
        *(_QWORD *)&v130 = v28;
        DWORD2(v130) = v29;
LABEL_22:
        v32 = v126;
        if ((int)v127 < 1)
          goto LABEL_110;
        v33 = 1;
        v122 = (uint64_t *)v3;
        do
        {
          v34 = 0;
          v35 = v33;
          while (1)
          {
            v36 = *(int *)(v32 + 4 * v35);
            v37 = v11[v36];
            if (v11[v36])
              break;
            ++v34;
            if (v127 + 1 == ++v35)
            {
              v89 = *v128;
              v90 = *((char *)v128 + 1024);
              if (!*((_BYTE *)v128 + 1024))
              {
                v91 = (uint64_t *)v132;
                v92 = *(_QWORD *)v132;
                *(_DWORD *)(v92 + 40) = 41;
                (*(void (**)(uint64_t *))v92)(v91);
              }
              v93 = ~(-1 << v90) & v89;
              v94 = v29 + v90;
              v95 = (v93 << (24 - (v29 + v90))) | v28;
              v3 = (int *)v122;
              if (v29 + v90 < 8)
              {
                v96 = v29 + v90;
LABEL_109:
                *(_QWORD *)&v130 = v95;
                DWORD2(v130) = v96;
                goto LABEL_110;
              }
              while (2)
              {
                v97 = (_BYTE *)v129;
                *(_QWORD *)&v129 = v129 + 1;
                *v97 = BYTE2(v95);
                v7 = --*((_QWORD *)&v129 + 1);
                if (*((_QWORD *)&v129 + 1))
                {
                  if ((~(_DWORD)v95 & 0xFF0000) == 0)
                  {
LABEL_118:
                    v100 = (_BYTE *)v129;
                    *(_QWORD *)&v129 = v129 + 1;
                    *v100 = 0;
                    v7 = --*((_QWORD *)&v129 + 1);
                    if (!*((_QWORD *)&v129 + 1))
                    {
                      v101 = (uint64_t *)*((_QWORD *)v132 + 5);
                      result = ((uint64_t (*)(void))v101[3])();
                      if (!(_DWORD)result)
                        return result;
                      v102 = *v101;
                      v7 = v101[1];
                      *(_QWORD *)&v129 = v102;
                      *((_QWORD *)&v129 + 1) = v7;
                    }
                  }
                }
                else
                {
                  v98 = (uint64_t *)*((_QWORD *)v132 + 5);
                  result = ((uint64_t (*)(void))v98[3])();
                  if (!(_DWORD)result)
                    return result;
                  v99 = *v98;
                  v7 = v98[1];
                  *(_QWORD *)&v129 = v99;
                  *((_QWORD *)&v129 + 1) = v7;
                  if ((~(_DWORD)v95 & 0xFF0000) == 0)
                    goto LABEL_118;
                }
                v95 <<= 8;
                v96 = v94 - 8;
                v21 = v94 <= 15;
                v94 -= 8;
                if (v21)
                  goto LABEL_109;
                continue;
              }
            }
          }
          v121 = v4;
          if (v34 >= 0x10)
          {
            while (1)
            {
              v41 = v128[240];
              v42 = *((char *)v128 + 1264);
              if (!*((_BYTE *)v128 + 1264))
              {
                v43 = (uint64_t *)v132;
                v44 = *(_QWORD *)v132;
                *(_DWORD *)(v44 + 40) = 41;
                (*(void (**)(uint64_t *))v44)(v43);
              }
              v45 = ~(-1 << v42) & v41;
              v46 = v29 + v42;
              v28 |= v45 << (24 - (v29 + v42));
              if (v29 + v42 >= 8)
                break;
              v29 += v42;
LABEL_35:
              *(_QWORD *)&v130 = v28;
              DWORD2(v130) = v29;
              v38 = v34 - 16;
              v21 = v34 <= 31;
              v34 -= 16;
              if (v21)
                goto LABEL_30;
            }
            while (1)
            {
              v47 = (_BYTE *)v129;
              *(_QWORD *)&v129 = v129 + 1;
              *v47 = BYTE2(v28);
              v7 = --*((_QWORD *)&v129 + 1);
              if (*((_QWORD *)&v129 + 1))
              {
                if ((~(_DWORD)v28 & 0xFF0000) != 0)
                  goto LABEL_40;
              }
              else
              {
                v48 = (uint64_t *)*((_QWORD *)v132 + 5);
                result = ((uint64_t (*)(void))v48[3])();
                if (!(_DWORD)result)
                  return result;
                v50 = *v48;
                v7 = v48[1];
                *(_QWORD *)&v129 = v50;
                *((_QWORD *)&v129 + 1) = v7;
                if ((~(_DWORD)v28 & 0xFF0000) != 0)
                  goto LABEL_40;
              }
              v51 = (_BYTE *)v129;
              *(_QWORD *)&v129 = v129 + 1;
              *v51 = 0;
              v7 = --*((_QWORD *)&v129 + 1);
              if (!*((_QWORD *)&v129 + 1))
              {
                v52 = (uint64_t *)*((_QWORD *)v132 + 5);
                result = ((uint64_t (*)(void))v52[3])();
                if (!(_DWORD)result)
                  return result;
                v53 = *v52;
                v7 = v52[1];
                *(_QWORD *)&v129 = v53;
                *((_QWORD *)&v129 + 1) = v7;
              }
LABEL_40:
              v28 <<= 8;
              v29 = v46 - 8;
              v21 = v46 > 0xF;
              v46 -= 8;
              if (!v21)
                goto LABEL_35;
            }
          }
          v38 = v34;
LABEL_30:
          if (v37 >= 0)
            v39 = v37;
          else
            v39 = -v37;
          if (v39 >= 2)
          {
            v54 = 0;
            do
            {
              ++v54;
              v21 = v39 > 3;
              v39 >>= 1;
            }
            while (v21);
            v40 = v54 + 1;
            if (v54 >= 0xA)
            {
              v55 = (uint64_t *)v132;
              v56 = *(_QWORD *)v132;
              *(_DWORD *)(v56 + 40) = 6;
              (*(void (**)(uint64_t *))v56)(v55);
            }
          }
          else
          {
            v40 = 1;
          }
          v57 = v40 + 16 * v38;
          v58 = v128[v57];
          v59 = (uint64_t)v128 + v57;
          v60 = *(char *)(v59 + 1024);
          if (!*(_BYTE *)(v59 + 1024))
          {
            v61 = (uint64_t *)v132;
            v62 = *(_QWORD *)v132;
            *(_DWORD *)(v62 + 40) = 41;
            (*(void (**)(uint64_t *))v62)(v61);
          }
          v63 = ~(-1 << v60) & v58;
          v64 = v29 + v60;
          v65 = (v63 << (24 - (v29 + v60))) | v28;
          if (v29 + v60 >= 8)
          {
            v4 = v121;
            while (1)
            {
              v68 = (_BYTE *)v129;
              *(_QWORD *)&v129 = v129 + 1;
              *v68 = BYTE2(v65);
              v7 = --*((_QWORD *)&v129 + 1);
              if (*((_QWORD *)&v129 + 1))
              {
                if ((~(_DWORD)v65 & 0xFF0000) != 0)
                  goto LABEL_59;
              }
              else
              {
                v69 = (uint64_t *)*((_QWORD *)v132 + 5);
                result = ((uint64_t (*)(void))v69[3])();
                if (!(_DWORD)result)
                  return result;
                v70 = *v69;
                v7 = v69[1];
                *(_QWORD *)&v129 = v70;
                *((_QWORD *)&v129 + 1) = v7;
                if ((~(_DWORD)v65 & 0xFF0000) != 0)
                  goto LABEL_59;
              }
              v71 = (_BYTE *)v129;
              *(_QWORD *)&v129 = v129 + 1;
              *v71 = 0;
              v7 = --*((_QWORD *)&v129 + 1);
              if (!*((_QWORD *)&v129 + 1))
              {
                v72 = (uint64_t *)*((_QWORD *)v132 + 5);
                result = ((uint64_t (*)(void))v72[3])();
                if (!(_DWORD)result)
                  return result;
                v66 = *v72;
                v7 = v72[1];
                *(_QWORD *)&v129 = v66;
                *((_QWORD *)&v129 + 1) = v7;
              }
LABEL_59:
              v65 <<= 8;
              v67 = v64 - 8;
              v21 = v64 > 0xF;
              v64 -= 8;
              if (!v21)
                goto LABEL_70;
            }
          }
          v67 = v29 + v60;
          v4 = v121;
LABEL_70:
          v73 = v67 + v40;
          v28 = ((unint64_t)(~(-1 << v40) & (v37 + (v37 >> 15))) << (24
                                                                                        - (v67
                                                                                         + v40))) | v65;
          if ((int)(v67 + v40) >= 8)
          {
            while (1)
            {
              v75 = (_BYTE *)v129;
              *(_QWORD *)&v129 = v129 + 1;
              *v75 = BYTE2(v28);
              v7 = --*((_QWORD *)&v129 + 1);
              if (*((_QWORD *)&v129 + 1))
              {
                if ((~(_DWORD)v28 & 0xFF0000) != 0)
                  goto LABEL_75;
              }
              else
              {
                v76 = (uint64_t *)*((_QWORD *)v132 + 5);
                result = ((uint64_t (*)(void))v76[3])();
                if (!(_DWORD)result)
                  return result;
                v77 = *v76;
                v7 = v76[1];
                *(_QWORD *)&v129 = v77;
                *((_QWORD *)&v129 + 1) = v7;
                if ((~(_DWORD)v28 & 0xFF0000) != 0)
                  goto LABEL_75;
              }
              v78 = (_BYTE *)v129;
              *(_QWORD *)&v129 = v129 + 1;
              *v78 = 0;
              v7 = --*((_QWORD *)&v129 + 1);
              if (!*((_QWORD *)&v129 + 1))
              {
                v79 = (uint64_t *)*((_QWORD *)v132 + 5);
                result = ((uint64_t (*)(void))v79[3])();
                if (!(_DWORD)result)
                  return result;
                v80 = *v79;
                v7 = v79[1];
                *(_QWORD *)&v129 = v80;
                *((_QWORD *)&v129 + 1) = v7;
              }
LABEL_75:
              v28 <<= 8;
              v29 = v73 - 8;
              v21 = v73 > 0xF;
              v73 -= 8;
              if (!v21)
                goto LABEL_72;
            }
          }
          v29 = v67 + v40;
LABEL_72:
          *(_QWORD *)&v130 = v28;
          DWORD2(v130) = v29;
          v33 = v35 + 1;
          v74 = v127 == v35;
          v3 = (int *)v122;
          v32 = v126;
        }
        while (!v74);
LABEL_110:
        a2 = v123;
        *v124 = **(__int16 **)(v123 + 8 * v125);
        v9 = v125 + 1;
        if (v125 + 1 >= v3[100])
        {
LABEL_121:
          v103 = (_QWORD *)*((_QWORD *)v3 + 5);
          *v103 = v129;
          v103[1] = v7;
          v104 = v131;
          *(_OWORD *)(v4 + 24) = v130;
          *(_OWORD *)(v4 + 40) = v104;
          v105 = v3[76];
          if (v105)
          {
            v106 = *(_DWORD *)(v4 + 56);
            if (!v106)
            {
              *(_DWORD *)(v4 + 60) = (*(_DWORD *)(v4 + 60) + 1) & 7;
              v106 = v105;
            }
            *(_DWORD *)(v4 + 56) = v106 - 1;
          }
          return 1;
        }
      }
      while (2)
      {
        v81 = (_BYTE *)v129;
        *(_QWORD *)&v129 = v129 + 1;
        *v81 = BYTE2(v28);
        v7 = --*((_QWORD *)&v129 + 1);
        if (*((_QWORD *)&v129 + 1))
        {
          if ((~(_DWORD)v28 & 0xFF0000) == 0)
          {
LABEL_92:
            v83 = (_BYTE *)v129;
            *(_QWORD *)&v129 = v129 + 1;
            *v83 = 0;
            v7 = --*((_QWORD *)&v129 + 1);
            if (!*((_QWORD *)&v129 + 1))
            {
              v84 = *((_QWORD *)v132 + 5);
              result = (*(uint64_t (**)(void))(v84 + 24))();
              if (!(_DWORD)result)
                return result;
              v7 = *(_QWORD *)(v84 + 8);
              *(_QWORD *)&v129 = *(_QWORD *)v84;
              *((_QWORD *)&v129 + 1) = v7;
            }
          }
        }
        else
        {
          v82 = *((_QWORD *)v132 + 5);
          result = (*(uint64_t (**)(void))(v82 + 24))();
          if (!(_DWORD)result)
            return result;
          v7 = *(_QWORD *)(v82 + 8);
          *(_QWORD *)&v129 = *(_QWORD *)v82;
          *((_QWORD *)&v129 + 1) = v7;
          if ((~(_DWORD)v28 & 0xFF0000) == 0)
            goto LABEL_92;
        }
        v28 <<= 8;
        v29 = v27 - 8;
        v21 = v27 <= 15;
        v27 -= 8;
        if (v21)
          goto LABEL_18;
        continue;
      }
    }
    v119 = *((_QWORD *)v132 + 5);
    result = (*(uint64_t (**)(int *))(v119 + 24))(v132);
    if ((_DWORD)result)
    {
      v7 = *(_QWORD *)(v119 + 8);
      *(_QWORD *)&v129 = *(_QWORD *)v119;
      *((_QWORD *)&v129 + 1) = v7;
      if (v132[89] < 1)
        goto LABEL_3;
      goto LABEL_148;
    }
  }
  return result;
}

_QWORD *sub_100379B68(_QWORD *result, int a2, unsigned int a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t (**v8)(_QWORD);
  _QWORD *v9;
  unsigned __int8 **v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  _OWORD *v13;
  size_t v14;
  size_t v15;
  uint64_t (**v16)(_QWORD);
  size_t v17;
  uint64_t (**v18)(_QWORD);
  size_t v19;
  uint64_t (**v20)(_QWORD);
  size_t v21;
  uint64_t (**v22)(_QWORD);
  size_t v23;
  uint64_t (**v24)(_QWORD);
  size_t v25;
  uint64_t (**v26)(_QWORD);
  size_t v27;
  uint64_t (**v28)(_QWORD);
  size_t v29;
  uint64_t (**v30)(_QWORD);
  size_t v31;
  uint64_t (**v32)(_QWORD);
  size_t v33;
  uint64_t (**v34)(_QWORD);
  size_t v35;
  uint64_t (**v36)(_QWORD);
  size_t v37;
  uint64_t (**v38)(_QWORD);
  size_t v39;
  uint64_t (**v40)(_QWORD);
  size_t v41;
  uint64_t (**v42)(_QWORD);
  size_t v43;
  uint64_t (**v44)(_QWORD);
  int v45;
  unsigned int v46;
  int v47;
  char v48;
  _DWORD *v49;
  char *v50;
  int v51;
  uint64_t (**v52)(_QWORD);
  unsigned __int8 *v53;
  _BYTE *v54;
  int *v55;
  uint64_t (**v56)(_QWORD);
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t (**v60)(_QWORD);
  unsigned __int8 *v61;
  int *v62;
  _BYTE *v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  char *v67;
  uint64_t (**v68)(_QWORD);
  int v69;
  _DWORD v70[257];
  _BYTE __b[257];

  v7 = result;
  if (a3 >= 4)
  {
    v8 = (uint64_t (**)(_QWORD))*result;
    *((_DWORD *)v8 + 10) = 52;
    *((_DWORD *)v8 + 11) = a3;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))*result)(result);
  }
  v9 = &v7[a3];
  v10 = (unsigned __int8 **)(v9 + 20);
  v11 = (unsigned __int8 **)(v9 + 24);
  if (a2)
    v11 = v10;
  v12 = *v11;
  if (*v11)
  {
    v13 = (_OWORD *)*a4;
    if (*a4)
      goto LABEL_7;
  }
  else
  {
    v60 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v60 + 10) = 52;
    *((_DWORD *)v60 + 11) = a3;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))*v7)(v7);
    v13 = (_OWORD *)*a4;
    if (*a4)
    {
LABEL_7:
      v14 = v12[1];
      v69 = a2;
      if (!v12[1])
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))v7[1])(v7, 1, 1280);
  v13 = result;
  *a4 = result;
  v14 = v12[1];
  v69 = a2;
  if (v12[1])
LABEL_8:
    result = memset(__b, 1, v14);
LABEL_9:
  v15 = v12[2];
  if ((v14 + v15) >= 0x101)
  {
    v16 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v16 + 10) = 9;
    result = (_QWORD *)(*v16)(v7);
  }
  if ((_DWORD)v15)
  {
    result = memset(&__b[v14], 2, v15);
    LODWORD(v14) = v14 + v15;
  }
  v17 = v12[3];
  if ((int)v14 + (int)v17 >= 257)
  {
    v18 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v18 + 10) = 9;
    result = (_QWORD *)(*v18)(v7);
  }
  if ((_DWORD)v17)
  {
    result = memset(&__b[v14], 3, v17);
    LODWORD(v14) = v14 + v17;
  }
  v19 = v12[4];
  if ((int)v14 + (int)v19 >= 257)
  {
    v20 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v20 + 10) = 9;
    result = (_QWORD *)(*v20)(v7);
  }
  if ((_DWORD)v19)
  {
    result = memset(&__b[v14], 4, v19);
    LODWORD(v14) = v14 + v19;
  }
  v21 = v12[5];
  if ((int)v14 + (int)v21 >= 257)
  {
    v22 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v22 + 10) = 9;
    result = (_QWORD *)(*v22)(v7);
  }
  if ((_DWORD)v21)
  {
    result = memset(&__b[v14], 5, v21);
    LODWORD(v14) = v14 + v21;
  }
  v23 = v12[6];
  if ((int)v14 + (int)v23 >= 257)
  {
    v24 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v24 + 10) = 9;
    result = (_QWORD *)(*v24)(v7);
  }
  if ((_DWORD)v23)
  {
    result = memset(&__b[v14], 6, v23);
    LODWORD(v14) = v14 + v23;
  }
  v25 = v12[7];
  if ((int)v14 + (int)v25 >= 257)
  {
    v26 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v26 + 10) = 9;
    result = (_QWORD *)(*v26)(v7);
  }
  if ((_DWORD)v25)
  {
    result = memset(&__b[v14], 7, v25);
    LODWORD(v14) = v14 + v25;
  }
  v27 = v12[8];
  if ((int)v14 + (int)v27 >= 257)
  {
    v28 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v28 + 10) = 9;
    result = (_QWORD *)(*v28)(v7);
  }
  if ((_DWORD)v27)
  {
    result = memset(&__b[v14], 8, v27);
    LODWORD(v14) = v14 + v27;
  }
  v29 = v12[9];
  if ((int)v14 + (int)v29 >= 257)
  {
    v30 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v30 + 10) = 9;
    result = (_QWORD *)(*v30)(v7);
  }
  if ((_DWORD)v29)
  {
    result = memset(&__b[v14], 9, v29);
    LODWORD(v14) = v14 + v29;
  }
  v31 = v12[10];
  if ((int)v14 + (int)v31 >= 257)
  {
    v32 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v32 + 10) = 9;
    result = (_QWORD *)(*v32)(v7);
  }
  if ((_DWORD)v31)
  {
    result = memset(&__b[v14], 10, v31);
    LODWORD(v14) = v14 + v31;
  }
  v33 = v12[11];
  if ((int)v14 + (int)v33 >= 257)
  {
    v34 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v34 + 10) = 9;
    result = (_QWORD *)(*v34)(v7);
  }
  if ((_DWORD)v33)
  {
    result = memset(&__b[v14], 11, v33);
    LODWORD(v14) = v14 + v33;
  }
  v35 = v12[12];
  if ((int)v14 + (int)v35 >= 257)
  {
    v36 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v36 + 10) = 9;
    result = (_QWORD *)(*v36)(v7);
  }
  if ((_DWORD)v35)
  {
    result = memset(&__b[v14], 12, v35);
    LODWORD(v14) = v14 + v35;
  }
  v37 = v12[13];
  if ((int)v14 + (int)v37 >= 257)
  {
    v38 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v38 + 10) = 9;
    result = (_QWORD *)(*v38)(v7);
  }
  if ((_DWORD)v37)
  {
    result = memset(&__b[v14], 13, v37);
    LODWORD(v14) = v14 + v37;
  }
  v39 = v12[14];
  if ((int)v14 + (int)v39 >= 257)
  {
    v40 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v40 + 10) = 9;
    result = (_QWORD *)(*v40)(v7);
  }
  if ((_DWORD)v39)
  {
    result = memset(&__b[v14], 14, v39);
    LODWORD(v14) = v14 + v39;
  }
  v41 = v12[15];
  if ((int)v14 + (int)v41 >= 257)
  {
    v42 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v42 + 10) = 9;
    result = (_QWORD *)(*v42)(v7);
  }
  if ((_DWORD)v41)
  {
    result = memset(&__b[v14], 15, v41);
    LODWORD(v14) = v14 + v41;
  }
  v43 = v12[16];
  if ((int)v14 + (int)v43 >= 257)
  {
    v44 = (uint64_t (**)(_QWORD))*v7;
    *((_DWORD *)v44 + 10) = 9;
    result = (_QWORD *)(*v44)(v7);
  }
  if ((_DWORD)v43)
  {
    result = memset(&__b[v14], 16, v43);
    LODWORD(v14) = v14 + v43;
  }
  __b[v14] = 0;
  v45 = __b[0];
  if (__b[0])
  {
    v46 = 0;
    v47 = 0;
    v48 = __b[0];
    do
    {
      if (v45 == v48)
      {
        v49 = &v70[v47];
        v50 = &__b[v47 + 1];
        do
        {
          *v49++ = v46++;
          v51 = *v50++;
          ++v47;
        }
        while (v45 == v51);
      }
      if (1 << v45 <= v46)
      {
        v52 = (uint64_t (**)(_QWORD))*v7;
        *((_DWORD *)v52 + 10) = 9;
        result = (_QWORD *)(*v52)(v7);
      }
      v46 *= 2;
      ++v45;
      v48 = __b[v47];
    }
    while (v48);
  }
  v13[79] = 0u;
  v13[78] = 0u;
  v13[77] = 0u;
  v13[76] = 0u;
  v13[75] = 0u;
  v13[74] = 0u;
  v13[73] = 0u;
  v13[72] = 0u;
  v13[71] = 0u;
  v13[70] = 0u;
  v13[69] = 0u;
  v13[68] = 0u;
  v13[67] = 0u;
  v13[66] = 0u;
  v13[65] = 0u;
  v13[64] = 0u;
  if ((int)v14 >= 1)
  {
    v14 = v14;
    if (v69)
    {
      v53 = v12 + 17;
      v54 = __b;
      v55 = v70;
      do
      {
        v59 = *v53++;
        v58 = v59;
        if (v59 > 0xFuLL || *((_BYTE *)v13 + v58 + 1024))
        {
          v56 = (uint64_t (**)(_QWORD))*v7;
          *((_DWORD *)v56 + 10) = 9;
          result = (_QWORD *)(*v56)(v7);
        }
        v57 = *v55++;
        *((_DWORD *)v13 + v58) = v57;
        LOBYTE(v57) = *v54++;
        *((_BYTE *)v13 + v58 + 1024) = v57;
        --v14;
      }
      while (v14);
    }
    else
    {
      v61 = v12 + 17;
      v62 = v70;
      v63 = __b;
      do
      {
        v66 = *v61++;
        v65 = v66;
        v67 = (char *)v13 + v66;
        if (v67[1024])
        {
          v68 = (uint64_t (**)(_QWORD))*v7;
          *((_DWORD *)v68 + 10) = 9;
          result = (_QWORD *)(*v68)(v7);
        }
        v64 = *v62++;
        *((_DWORD *)v13 + v65) = v64;
        LOBYTE(v64) = *v63++;
        v67[1024] = v64;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t sub_10037A240(uint64_t result)
{
  int v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_DWORD *)(result + 228);
  if (v1)
  {
    v2 = result;
    if (v1 == 1)
    {
      v3 = 0;
    }
    else
    {
      v4 = -1;
      do
      {
        ++v4;
        v5 = v1 > 3;
        v1 >>= 1;
      }
      while (v5);
      v3 = v4 + 1;
      if (v4 >= 0xE)
      {
        v6 = *(uint64_t **)(result + 216);
        v7 = *v6;
        *(_DWORD *)(v7 + 40) = 41;
        (*(void (**)(uint64_t *))v7)(v6);
      }
    }
    v8 = 16 * v3;
    v9 = v2 + 8 * *(int *)(v2 + 224);
    if (*(_BYTE *)(v2 + 192))
    {
      ++*(_QWORD *)(*(_QWORD *)(v9 + 160) + 8 * v8);
      if (!v3)
      {
LABEL_11:
        *(_DWORD *)(v2 + 228) = 0;
        result = sub_10037A7F4(v2, *(_BYTE **)(v2 + 240), *(_DWORD *)(v2 + 232));
        *(_DWORD *)(v2 + 232) = 0;
        return result;
      }
    }
    else
    {
      sub_10037A644(v2, *(_DWORD *)(*(_QWORD *)(v9 + 96) + 4 * v8), *(char *)(*(_QWORD *)(v9 + 96) + v8 + 1024));
      if (!v3)
        goto LABEL_11;
    }
    sub_10037A644(v2, *(_DWORD *)(v2 + 228), v3);
    goto LABEL_11;
  }
  return result;
}

void *sub_10037A328(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char j;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  char v35;
  int v36;
  int v37;
  int k;
  uint64_t m;
  unsigned int __b[257];
  _DWORD v41[257];
  __int128 v42;
  __int128 v43;
  char v44;

  v42 = 0u;
  v43 = 0u;
  v44 = 0;
  bzero(v41, 0x404uLL);
  result = memset(__b, 255, sizeof(__b));
  v7 = 0;
  *(_QWORD *)(a3 + 2048) = 1;
LABEL_2:
  LODWORD(v8) = -1;
  v9 = 1000000000;
  while (1)
  {
    do
    {
      v10 = *(_QWORD *)(a3 + 8 * v7);
      if (v10)
        v11 = v10 <= v9;
      else
        v11 = 0;
      v12 = !v11;
      if (v12)
        v8 = v8;
      else
        v8 = v7;
      if (!v12)
        v9 = *(_QWORD *)(a3 + 8 * v7);
      ++v7;
    }
    while (v7 != 257);
    v13 = 0;
    LODWORD(v14) = -1;
    v15 = 1000000000;
    do
    {
      v16 = *(_QWORD *)(a3 + 8 * v13);
      if (v16)
        v17 = v16 <= v15;
      else
        v17 = 0;
      v18 = !v17 || v8 == v13;
      if (v18)
        v14 = v14;
      else
        v14 = v13;
      if (!v18)
        v15 = *(_QWORD *)(a3 + 8 * v13);
      ++v13;
    }
    while (v13 != 257);
    if ((v14 & 0x80000000) != 0)
      break;
    v19 = 8 * v14;
    *(_QWORD *)(a3 + 8 * (int)v8) += *(_QWORD *)(a3 + v19);
    *(_QWORD *)(a3 + v19) = 0;
    v20 = (int)v8;
    ++v41[v20];
    v21 = __b[v20];
    if ((v21 & 0x80000000) != 0)
    {
      v8 = (int)v8;
    }
    else
    {
      do
      {
        v8 = v21;
        v22 = v21;
        ++v41[v22];
        v21 = __b[v22];
      }
      while ((v21 & 0x80000000) == 0);
    }
    v7 = 0;
    __b[v8] = v14;
    ++v41[v14];
    v23 = __b[v14];
    LODWORD(v8) = -1;
    v9 = 1000000000;
    if ((v23 & 0x80000000) == 0)
    {
      do
      {
        ++v41[v23];
        v23 = __b[v23];
      }
      while ((v23 & 0x80000000) == 0);
      v7 = 0;
      goto LABEL_2;
    }
  }
  for (i = 0; i != 257; ++i)
  {
    v25 = (int)v41[i];
    if ((_DWORD)v25)
    {
      if ((int)v25 >= 33)
      {
        v26 = *a1;
        *(_DWORD *)(v26 + 40) = 40;
        result = (void *)(*(uint64_t (**)(uint64_t *))v26)(a1);
      }
      ++*((_BYTE *)&v42 + v25);
    }
  }
  v27 = (char *)&v43 + 15;
  v28 = 0x2000000000;
  v29 = 32;
  do
  {
    for (j = *((_BYTE *)&v42 + v29); j; j = *((_BYTE *)&v42 + v29))
    {
      v31 = v27;
      v32 = v28;
      do
      {
        v33 = *--v31;
        v32 -= 0x100000000;
      }
      while (!v33);
      *((_BYTE *)&v42 + v29) = j - 2;
      ++*((_BYTE *)&v42 + v29 - 1);
      *((_BYTE *)&v42 + (v32 >> 32)) += 2;
      --*v31;
    }
    v28 -= 0x100000000;
    --v27;
    v11 = v29-- > 0x11;
  }
  while (v11);
  v34 = (char *)&v43 + 1;
  do
  {
    v36 = *--v34;
    v35 = v36;
  }
  while (!v36);
  v37 = 0;
  *v34 = v35 - 1;
  *(_OWORD *)a2 = v42;
  *(_BYTE *)(a2 + 16) = v43;
  for (k = 1; k != 33; ++k)
  {
    for (m = 0; m != 256; ++m)
    {
      if (v41[m] == k)
        *(_BYTE *)(a2 + v37++ + 17) = m;
    }
  }
  *(_BYTE *)(a2 + 273) = 0;
  return result;
}

uint64_t sub_10037A644(uint64_t result, unsigned int a2, int a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v5 = result;
  if (a3)
  {
    if (*(_BYTE *)(result + 192))
      return result;
  }
  else
  {
    v6 = *(uint64_t **)(result + 216);
    v7 = *v6;
    *(_DWORD *)(v7 + 40) = 41;
    result = (*(uint64_t (**)(uint64_t *))v7)(v6);
    if (*(_BYTE *)(v5 + 192))
      return result;
  }
  v8 = ~(-1 << a3) & a2;
  v9 = *(_DWORD *)(v5 + 32) + a3;
  v10 = (v8 << (24 - v9)) | *(_QWORD *)(v5 + 24);
  if (v9 >= 8)
  {
    while (1)
    {
      v14 = *(_BYTE **)(v5 + 200);
      *(_QWORD *)(v5 + 200) = v14 + 1;
      *v14 = BYTE2(v10);
      v15 = *(_QWORD *)(v5 + 208) - 1;
      *(_QWORD *)(v5 + 208) = v15;
      if (v15)
      {
        if ((~(_DWORD)v10 & 0xFF0000) == 0)
          goto LABEL_16;
      }
      else
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v5 + 216) + 40);
        result = (*(uint64_t (**)(void))(v16 + 24))();
        if ((_DWORD)result)
        {
          v17 = *(_QWORD *)(v16 + 8);
          *(_QWORD *)(v5 + 200) = *(_QWORD *)v16;
          *(_QWORD *)(v5 + 208) = v17;
          if ((~(_DWORD)v10 & 0xFF0000) == 0)
            goto LABEL_16;
        }
        else
        {
          v18 = *(uint64_t **)(v5 + 216);
          v19 = *v18;
          *(_DWORD *)(v19 + 40) = 25;
          result = (*(uint64_t (**)(uint64_t *))v19)(v18);
          v20 = *(_QWORD *)(v16 + 8);
          *(_QWORD *)(v5 + 200) = *(_QWORD *)v16;
          *(_QWORD *)(v5 + 208) = v20;
          if ((~(_DWORD)v10 & 0xFF0000) == 0)
          {
LABEL_16:
            v21 = *(_BYTE **)(v5 + 200);
            *(_QWORD *)(v5 + 200) = v21 + 1;
            *v21 = 0;
            v22 = *(_QWORD *)(v5 + 208) - 1;
            *(_QWORD *)(v5 + 208) = v22;
            if (!v22)
            {
              v23 = *(_QWORD *)(*(_QWORD *)(v5 + 216) + 40);
              result = (*(uint64_t (**)(void))(v23 + 24))();
              if (!(_DWORD)result)
              {
                v24 = *(uint64_t **)(v5 + 216);
                v25 = *v24;
                *(_DWORD *)(v25 + 40) = 25;
                result = (*(uint64_t (**)(uint64_t *))v25)(v24);
              }
              v11 = *(_QWORD *)(v23 + 8);
              *(_QWORD *)(v5 + 200) = *(_QWORD *)v23;
              *(_QWORD *)(v5 + 208) = v11;
            }
          }
        }
      }
      v10 <<= 8;
      v12 = v9 - 8;
      v13 = v9 <= 15;
      v9 -= 8;
      if (v13)
        goto LABEL_20;
    }
  }
  v12 = v9;
LABEL_20:
  *(_QWORD *)(v5 + 24) = v10;
  *(_DWORD *)(v5 + 32) = v12;
  return result;
}

uint64_t sub_10037A7F4(uint64_t result, _BYTE *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;

  if (a3)
  {
    v3 = result;
    if (!*(_BYTE *)(result + 192))
    {
      v4 = a3;
LABEL_4:
      v6 = *(_DWORD *)(v3 + 32);
      v7 = ((unint64_t)(*a2 & 1) << (23 - v6)) | *(_QWORD *)(v3 + 24);
      if (v6 >= 7)
      {
        v8 = v6 + 9;
        while (1)
        {
          v10 = *(_BYTE **)(v3 + 200);
          *(_QWORD *)(v3 + 200) = v10 + 1;
          *v10 = BYTE2(v7);
          v11 = *(_QWORD *)(v3 + 208) - 1;
          *(_QWORD *)(v3 + 208) = v11;
          if (v11)
          {
            if ((~(_DWORD)v7 & 0xFF0000) == 0)
              goto LABEL_15;
          }
          else
          {
            v12 = *(_QWORD *)(*(_QWORD *)(v3 + 216) + 40);
            result = (*(uint64_t (**)(void))(v12 + 24))();
            if ((_DWORD)result)
            {
              v13 = *(_QWORD *)(v12 + 8);
              *(_QWORD *)(v3 + 200) = *(_QWORD *)v12;
              *(_QWORD *)(v3 + 208) = v13;
              if ((~(_DWORD)v7 & 0xFF0000) == 0)
                goto LABEL_15;
            }
            else
            {
              v14 = *(uint64_t **)(v3 + 216);
              v15 = *v14;
              *(_DWORD *)(v15 + 40) = 25;
              result = (*(uint64_t (**)(uint64_t *))v15)(v14);
              v16 = *(_QWORD *)(v12 + 8);
              *(_QWORD *)(v3 + 200) = *(_QWORD *)v12;
              *(_QWORD *)(v3 + 208) = v16;
              if ((~(_DWORD)v7 & 0xFF0000) == 0)
              {
LABEL_15:
                v17 = *(_BYTE **)(v3 + 200);
                *(_QWORD *)(v3 + 200) = v17 + 1;
                *v17 = 0;
                v18 = *(_QWORD *)(v3 + 208) - 1;
                *(_QWORD *)(v3 + 208) = v18;
                if (!v18)
                {
                  v19 = *(_QWORD *)(*(_QWORD *)(v3 + 216) + 40);
                  result = (*(uint64_t (**)(void))(v19 + 24))();
                  if (!(_DWORD)result)
                  {
                    v20 = *(uint64_t **)(v3 + 216);
                    v21 = *v20;
                    *(_DWORD *)(v21 + 40) = 25;
                    result = (*(uint64_t (**)(uint64_t *))v21)(v20);
                  }
                  v9 = *(_QWORD *)(v19 + 8);
                  *(_QWORD *)(v3 + 200) = *(_QWORD *)v19;
                  *(_QWORD *)(v3 + 208) = v9;
                }
              }
            }
          }
          v7 <<= 8;
          v8 -= 8;
          if (v8 <= 15)
          {
            v22 = v8 - 8;
            goto LABEL_20;
          }
        }
      }
      v22 = v6 + 1;
LABEL_20:
      *(_QWORD *)(v3 + 24) = v7;
      *(_DWORD *)(v3 + 32) = v22;
      while (--v4)
      {
        ++a2;
        if (!*(_BYTE *)(v3 + 192))
          goto LABEL_4;
      }
    }
  }
  return result;
}

uint64_t sub_10037A98C(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int i;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v1 = result;
  if (!*(_BYTE *)(result + 192))
  {
    v2 = *(_DWORD *)(result + 32);
    if (v2 >= 1)
    {
      v3 = (127 << (17 - v2)) | *(_QWORD *)(result + 24);
      for (i = v2 + 15; i > 15; i -= 8)
      {
        v6 = *(_BYTE **)(v1 + 200);
        *(_QWORD *)(v1 + 200) = v6 + 1;
        *v6 = BYTE2(v3);
        v7 = *(_QWORD *)(v1 + 208) - 1;
        *(_QWORD *)(v1 + 208) = v7;
        if (v7)
        {
          if ((~(_DWORD)v3 & 0xFF0000) == 0)
            goto LABEL_14;
        }
        else
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v1 + 216) + 40);
          result = (*(uint64_t (**)(void))(v8 + 24))();
          if ((_DWORD)result)
          {
            v9 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v1 + 200) = *(_QWORD *)v8;
            *(_QWORD *)(v1 + 208) = v9;
            if ((~(_DWORD)v3 & 0xFF0000) == 0)
              goto LABEL_14;
          }
          else
          {
            v10 = *(uint64_t **)(v1 + 216);
            v11 = *v10;
            *(_DWORD *)(v11 + 40) = 25;
            result = (*(uint64_t (**)(uint64_t *))v11)(v10);
            v12 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v1 + 200) = *(_QWORD *)v8;
            *(_QWORD *)(v1 + 208) = v12;
            if ((~(_DWORD)v3 & 0xFF0000) == 0)
            {
LABEL_14:
              v13 = *(_BYTE **)(v1 + 200);
              *(_QWORD *)(v1 + 200) = v13 + 1;
              *v13 = 0;
              v14 = *(_QWORD *)(v1 + 208) - 1;
              *(_QWORD *)(v1 + 208) = v14;
              if (!v14)
              {
                v15 = *(_QWORD *)(*(_QWORD *)(v1 + 216) + 40);
                result = (*(uint64_t (**)(void))(v15 + 24))();
                if (!(_DWORD)result)
                {
                  v16 = *(uint64_t **)(v1 + 216);
                  v17 = *v16;
                  *(_DWORD *)(v17 + 40) = 25;
                  result = (*(uint64_t (**)(uint64_t *))v17)(v16);
                }
                v5 = *(_QWORD *)(v15 + 8);
                *(_QWORD *)(v1 + 200) = *(_QWORD *)v15;
                *(_QWORD *)(v1 + 208) = v5;
              }
            }
          }
        }
        LODWORD(v3) = (_DWORD)v3 << 8;
      }
    }
  }
  *(_QWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t sub_10037AAE4(uint64_t a1, char a2)
{
  uint64_t result;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_10037A240(a1);
  if (*(_BYTE *)(a1 + 192))
    goto LABEL_8;
  result = sub_10037A98C(a1);
  v5 = *(_BYTE **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v5 + 1;
  *v5 = -1;
  v6 = *(_QWORD *)(a1 + 208) - 1;
  *(_QWORD *)(a1 + 208) = v6;
  if (v6)
  {
    v7 = *(_BYTE **)(a1 + 200);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 40);
    result = (*(uint64_t (**)(void))(v8 + 24))();
    if (!(_DWORD)result)
    {
      v9 = *(uint64_t **)(a1 + 216);
      v10 = *v9;
      *(_DWORD *)(v10 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t *))v10)(v9);
    }
    v7 = *(_BYTE **)v8;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(v8 + 8);
  }
  *(_QWORD *)(a1 + 200) = v7 + 1;
  *v7 = a2 - 48;
  v11 = *(_QWORD *)(a1 + 208) - 1;
  *(_QWORD *)(a1 + 208) = v11;
  if (v11)
  {
LABEL_8:
    v12 = *(_QWORD *)(a1 + 216);
    if (*(_DWORD *)(v12 + 444))
    {
LABEL_9:
      *(_DWORD *)(a1 + 228) = 0;
      *(_DWORD *)(a1 + 232) = 0;
      return result;
    }
  }
  else
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 40);
    result = (*(uint64_t (**)(void))(v13 + 24))();
    if (!(_DWORD)result)
    {
      v14 = *(uint64_t **)(a1 + 216);
      v15 = *v14;
      *(_DWORD *)(v15 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t *))v15)(v14);
    }
    v16 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)v13;
    *(_QWORD *)(a1 + 208) = v16;
    v12 = *(_QWORD *)(a1 + 216);
    if (*(_DWORD *)(v12 + 444))
      goto LABEL_9;
  }
  if (*(int *)(v12 + 356) >= 1)
  {
    v17 = 0;
    do
      *(_DWORD *)(a1 + 36 + 4 * v17++) = 0;
    while (v17 < *(int *)(v12 + 356));
  }
  return result;
}

uint64_t sub_10037AC28(uint64_t a1)
{
  int v2;
  void (**v3)(uint64_t);
  unsigned int v4;
  int v5;
  _BOOL4 v6;
  void (**v7)(uint64_t);
  int32x2_t v8;

  v2 = *(_DWORD *)(a1 + 88);
  if (v2 != 8)
  {
    v3 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v3 + 10) = 16;
    *((_DWORD *)v3 + 11) = v2;
    (**(void (***)(uint64_t))a1)(a1);
  }
  if (*(_DWORD *)(a1 + 52) && (v4 = *(_DWORD *)(a1 + 48)) != 0 && (v5 = *(_DWORD *)(a1 + 56), v5 > 0))
  {
    if (!((v5 * (unint64_t)v4) >> 32))
      goto LABEL_7;
  }
  else
  {
    v7 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v7 + 10) = 33;
    (*v7)(a1);
    if (!((*(int *)(a1 + 56) * (unint64_t)*(unsigned int *)(a1 + 48)) >> 32))
    {
LABEL_7:
      sub_10037E9C0((int32x2_t *)a1, 0);
      if (*(_BYTE *)(a1 + 288))
        goto LABEL_8;
      goto LABEL_13;
    }
  }
  v8 = *(int32x2_t *)a1;
  *(_DWORD *)(*(_QWORD *)&v8 + 40) = 72;
  (**(void (***)(uint64_t))&v8)(a1);
  sub_10037E9C0((int32x2_t *)a1, 0);
  if (*(_BYTE *)(a1 + 288))
  {
LABEL_8:
    sub_100376AC8(a1);
    if (*(_BYTE *)(a1 + 289))
      goto LABEL_9;
LABEL_14:
    sub_1003774B4(a1);
    if (*(int *)(a1 + 272) > 1)
      goto LABEL_10;
LABEL_15:
    v6 = *(_BYTE *)(a1 + 290) != 0;
    goto LABEL_16;
  }
LABEL_13:
  sub_100375C6C((uint64_t *)a1);
  sub_100383C54((uint64_t *)a1);
  sub_10038326C((uint64_t *)a1, 0);
  sub_100376AC8(a1);
  if (!*(_BYTE *)(a1 + 289))
    goto LABEL_14;
LABEL_9:
  sub_100373430(a1);
  if (*(int *)(a1 + 272) <= 1)
    goto LABEL_15;
LABEL_10:
  v6 = 1;
LABEL_16:
  sub_100374F78(a1, v6);
  sub_10037ADC0((int *)a1, 0);
  sub_10037B060(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1);
  return (**(uint64_t (***)(uint64_t))(a1 + 512))(a1);
}

uint64_t (**sub_10037ADC0(int *a1, int a2))(uint64_t result, int a2)
{
  uint64_t (**result)(uint64_t, int);
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;

  result = (uint64_t (**)(uint64_t, int))(**((uint64_t (***)(void))a1 + 1))();
  *((_QWORD *)a1 + 61) = result;
  *result = sub_10037AE9C;
  if (!*((_BYTE *)a1 + 288))
  {
    if (a2)
    {
      v5 = *(_QWORD *)a1;
      *(_DWORD *)(v5 + 40) = 3;
      return (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(int *))v5)(a1);
    }
    else if (a1[23] >= 1)
    {
      v6 = 0;
      v7 = result + 4;
      v8 = (int *)(*((_QWORD *)a1 + 13) + 40);
      do
      {
        v9 = (*(v8 - 1) * *(v8 - 3));
        v10 = *(v8 - 7);
        v11 = *v8;
        v8 += 24;
        result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(int *, uint64_t, uint64_t, _QWORD))(*((_QWORD *)a1 + 1) + 16))(a1, 1, v9, (v11 * v10));
        v7[v6++] = result;
      }
      while (v6 < a1[23]);
    }
  }
  return result;
}

uint64_t sub_10037AE9C(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(result + 288))
  {
    v2 = *(_QWORD *)(result + 488);
    *(_BYTE *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 28) = a2;
    if (a2)
    {
      v3 = *(_QWORD *)result;
      *(_DWORD *)(v3 + 40) = 3;
      return (*(uint64_t (**)(uint64_t))v3)(result);
    }
    else
    {
      *(_QWORD *)(v2 + 8) = sub_10037AEE0;
    }
  }
  return result;
}

uint64_t sub_10037AEE0(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _BOOL4 v12;
  unsigned int v13;

  v4 = *(_QWORD *)(result + 488);
  if (*(_DWORD *)(v4 + 16) < *(_DWORD *)(result + 352))
  {
    v8 = result;
    v10 = (unsigned int *)(v4 + 20);
    v9 = *(_DWORD *)(v4 + 20);
    v11 = *(_DWORD *)(result + 348);
    if (v9 < v11)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 496)
                                                                                                + 8))(result, a2, a3, a4, v4 + 32, v4 + 20);
      v9 = *v10;
      v11 = *(_DWORD *)(v8 + 348);
    }
    if (v9 == v11)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 + 504) + 8))(v8, v4 + 32);
      v12 = *(_BYTE *)(v4 + 24) == 0;
      if ((_DWORD)result)
      {
        if (*(_BYTE *)(v4 + 24))
        {
LABEL_7:
          ++*a3;
          *(_BYTE *)(v4 + 24) = 0;
        }
        while (1)
        {
          v13 = *(_DWORD *)(v4 + 16) + 1;
          *(_QWORD *)(v4 + 16) = v13;
          if (v13 >= *(_DWORD *)(v8 + 352))
            break;
          if (*(_DWORD *)(v8 + 348))
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 496) + 8))(v8, a2, a3, a4, v4 + 32, v4 + 20);
            if (*v10 != *(_DWORD *)(v8 + 348))
              break;
          }
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 + 504) + 8))(v8, v4 + 32);
          v12 = *(_BYTE *)(v4 + 24) == 0;
          if (!(_DWORD)result)
            goto LABEL_14;
          if (*(_BYTE *)(v4 + 24))
            goto LABEL_7;
        }
      }
      else
      {
LABEL_14:
        if (v12)
        {
          --*a3;
          *(_BYTE *)(v4 + 24) = 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10037B060(uint64_t a1)
{
  uint64_t result;

  result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 512) = result;
  *(_QWORD *)result = sub_10037B0E0;
  *(_QWORD *)(result + 8) = sub_10037BCB8;
  *(_QWORD *)(result + 16) = sub_10037C8D4;
  *(_QWORD *)(result + 24) = sub_10037D428;
  *(_QWORD *)(result + 32) = sub_10037D4EC;
  *(_QWORD *)(result + 40) = sub_10037D768;
  *(_QWORD *)(result + 48) = sub_10037D900;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_10037B0E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;

  v1 = result;
  v2 = *(_QWORD *)(result + 512);
  v3 = *(_QWORD *)(result + 40);
  v4 = (_BYTE *)(*(_QWORD *)v3)++;
  *v4 = -1;
  v5 = *(_QWORD *)(v3 + 8) - 1;
  *(_QWORD *)(v3 + 8) = v5;
  if (!v5)
  {
    result = (*(uint64_t (**)(uint64_t))(v3 + 24))(result);
    if (!(_DWORD)result)
    {
      v6 = *(_QWORD *)v1;
      *(_DWORD *)(v6 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v6)(v1);
    }
  }
  v7 = *(_QWORD *)(v1 + 40);
  v8 = (_BYTE *)(*(_QWORD *)v7)++;
  *v8 = -40;
  v9 = *(_QWORD *)(v7 + 8) - 1;
  *(_QWORD *)(v7 + 8) = v9;
  if (v9 || (result = (*(uint64_t (**)(uint64_t))(v7 + 24))(v1), (_DWORD)result))
  {
    *(_DWORD *)(v2 + 56) = 0;
    if (!*(_BYTE *)(v1 + 312))
      goto LABEL_62;
  }
  else
  {
    v87 = *(_QWORD *)v1;
    *(_DWORD *)(v87 + 40) = 25;
    result = (*(uint64_t (**)(uint64_t))v87)(v1);
    *(_DWORD *)(v2 + 56) = 0;
    if (!*(_BYTE *)(v1 + 312))
      goto LABEL_62;
  }
  v10 = *(_QWORD *)(v1 + 40);
  v11 = (_BYTE *)(*(_QWORD *)v10)++;
  *v11 = -1;
  v12 = *(_QWORD *)(v10 + 8) - 1;
  *(_QWORD *)(v10 + 8) = v12;
  if (!v12)
  {
    result = (*(uint64_t (**)(uint64_t))(v10 + 24))(v1);
    if (!(_DWORD)result)
    {
      v13 = *(_QWORD *)v1;
      *(_DWORD *)(v13 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v13)(v1);
    }
  }
  v14 = *(_QWORD *)(v1 + 40);
  v15 = (_BYTE *)(*(_QWORD *)v14)++;
  *v15 = -32;
  v16 = *(_QWORD *)(v14 + 8) - 1;
  *(_QWORD *)(v14 + 8) = v16;
  if (!v16)
  {
    result = (*(uint64_t (**)(uint64_t))(v14 + 24))(v1);
    if (!(_DWORD)result)
    {
      v17 = *(_QWORD *)v1;
      *(_DWORD *)(v17 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v17)(v1);
    }
  }
  v18 = *(_QWORD *)(v1 + 40);
  v19 = (_BYTE *)(*(_QWORD *)v18)++;
  *v19 = 0;
  v20 = *(_QWORD *)(v18 + 8) - 1;
  *(_QWORD *)(v18 + 8) = v20;
  if (!v20)
  {
    result = (*(uint64_t (**)(uint64_t))(v18 + 24))(v1);
    if (!(_DWORD)result)
    {
      v21 = *(_QWORD *)v1;
      *(_DWORD *)(v21 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v21)(v1);
    }
  }
  v22 = *(_QWORD *)(v1 + 40);
  v23 = (_BYTE *)(*(_QWORD *)v22)++;
  *v23 = 16;
  v24 = *(_QWORD *)(v22 + 8) - 1;
  *(_QWORD *)(v22 + 8) = v24;
  if (!v24)
  {
    result = (*(uint64_t (**)(uint64_t))(v22 + 24))(v1);
    if (!(_DWORD)result)
    {
      v25 = *(_QWORD *)v1;
      *(_DWORD *)(v25 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v25)(v1);
    }
  }
  v26 = *(_QWORD *)(v1 + 40);
  v27 = (_BYTE *)(*(_QWORD *)v26)++;
  *v27 = 74;
  v28 = *(_QWORD *)(v26 + 8) - 1;
  *(_QWORD *)(v26 + 8) = v28;
  if (!v28)
  {
    result = (*(uint64_t (**)(uint64_t))(v26 + 24))(v1);
    if (!(_DWORD)result)
    {
      v29 = *(_QWORD *)v1;
      *(_DWORD *)(v29 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v29)(v1);
    }
  }
  v30 = *(_QWORD *)(v1 + 40);
  v31 = (_BYTE *)(*(_QWORD *)v30)++;
  *v31 = 70;
  v32 = *(_QWORD *)(v30 + 8) - 1;
  *(_QWORD *)(v30 + 8) = v32;
  if (!v32)
  {
    result = (*(uint64_t (**)(uint64_t))(v30 + 24))(v1);
    if (!(_DWORD)result)
    {
      v33 = *(_QWORD *)v1;
      *(_DWORD *)(v33 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v33)(v1);
    }
  }
  v34 = *(_QWORD *)(v1 + 40);
  v35 = (_BYTE *)(*(_QWORD *)v34)++;
  *v35 = 73;
  v36 = *(_QWORD *)(v34 + 8) - 1;
  *(_QWORD *)(v34 + 8) = v36;
  if (!v36)
  {
    result = (*(uint64_t (**)(uint64_t))(v34 + 24))(v1);
    if (!(_DWORD)result)
    {
      v37 = *(_QWORD *)v1;
      *(_DWORD *)(v37 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v37)(v1);
    }
  }
  v38 = *(_QWORD *)(v1 + 40);
  v39 = (_BYTE *)(*(_QWORD *)v38)++;
  *v39 = 70;
  v40 = *(_QWORD *)(v38 + 8) - 1;
  *(_QWORD *)(v38 + 8) = v40;
  if (!v40)
  {
    result = (*(uint64_t (**)(uint64_t))(v38 + 24))(v1);
    if (!(_DWORD)result)
    {
      v41 = *(_QWORD *)v1;
      *(_DWORD *)(v41 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v41)(v1);
    }
  }
  v42 = *(_QWORD *)(v1 + 40);
  v43 = (_BYTE *)(*(_QWORD *)v42)++;
  *v43 = 0;
  v44 = *(_QWORD *)(v42 + 8) - 1;
  *(_QWORD *)(v42 + 8) = v44;
  if (!v44)
  {
    result = (*(uint64_t (**)(uint64_t))(v42 + 24))(v1);
    if (!(_DWORD)result)
    {
      v45 = *(_QWORD *)v1;
      *(_DWORD *)(v45 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v45)(v1);
    }
  }
  v46 = *(_BYTE *)(v1 + 313);
  v47 = *(_QWORD *)(v1 + 40);
  v48 = (_BYTE *)(*(_QWORD *)v47)++;
  *v48 = v46;
  v49 = *(_QWORD *)(v47 + 8) - 1;
  *(_QWORD *)(v47 + 8) = v49;
  if (!v49)
  {
    result = (*(uint64_t (**)(uint64_t))(v47 + 24))(v1);
    if (!(_DWORD)result)
    {
      v50 = *(_QWORD *)v1;
      *(_DWORD *)(v50 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v50)(v1);
    }
  }
  v51 = *(_BYTE *)(v1 + 314);
  v52 = *(_QWORD *)(v1 + 40);
  v53 = (_BYTE *)(*(_QWORD *)v52)++;
  *v53 = v51;
  v54 = *(_QWORD *)(v52 + 8) - 1;
  *(_QWORD *)(v52 + 8) = v54;
  if (!v54)
  {
    result = (*(uint64_t (**)(uint64_t))(v52 + 24))(v1);
    if (!(_DWORD)result)
    {
      v55 = *(_QWORD *)v1;
      *(_DWORD *)(v55 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v55)(v1);
    }
  }
  v56 = *(_BYTE *)(v1 + 315);
  v57 = *(_QWORD *)(v1 + 40);
  v58 = (_BYTE *)(*(_QWORD *)v57)++;
  *v58 = v56;
  v59 = *(_QWORD *)(v57 + 8) - 1;
  *(_QWORD *)(v57 + 8) = v59;
  if (!v59)
  {
    result = (*(uint64_t (**)(uint64_t))(v57 + 24))(v1);
    if (!(_DWORD)result)
    {
      v60 = *(_QWORD *)v1;
      *(_DWORD *)(v60 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v60)(v1);
    }
  }
  v61 = *(_WORD *)(v1 + 316);
  v62 = *(_QWORD *)(v1 + 40);
  v63 = (_BYTE *)(*(_QWORD *)v62)++;
  *v63 = HIBYTE(v61);
  v64 = *(_QWORD *)(v62 + 8) - 1;
  *(_QWORD *)(v62 + 8) = v64;
  if (!v64)
  {
    result = (*(uint64_t (**)(uint64_t))(v62 + 24))(v1);
    if (!(_DWORD)result)
    {
      v65 = *(_QWORD *)v1;
      *(_DWORD *)(v65 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v65)(v1);
    }
  }
  v66 = *(_QWORD *)(v1 + 40);
  v67 = (_BYTE *)(*(_QWORD *)v66)++;
  *v67 = v61;
  v68 = *(_QWORD *)(v66 + 8) - 1;
  *(_QWORD *)(v66 + 8) = v68;
  if (!v68)
  {
    result = (*(uint64_t (**)(uint64_t))(v66 + 24))(v1);
    if (!(_DWORD)result)
    {
      v69 = *(_QWORD *)v1;
      *(_DWORD *)(v69 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v69)(v1);
    }
  }
  v70 = *(_WORD *)(v1 + 318);
  v71 = *(_QWORD *)(v1 + 40);
  v72 = (_BYTE *)(*(_QWORD *)v71)++;
  *v72 = HIBYTE(v70);
  v73 = *(_QWORD *)(v71 + 8) - 1;
  *(_QWORD *)(v71 + 8) = v73;
  if (!v73)
  {
    result = (*(uint64_t (**)(uint64_t))(v71 + 24))(v1);
    if (!(_DWORD)result)
    {
      v74 = *(_QWORD *)v1;
      *(_DWORD *)(v74 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v74)(v1);
    }
  }
  v75 = *(_QWORD *)(v1 + 40);
  v76 = (_BYTE *)(*(_QWORD *)v75)++;
  *v76 = v70;
  v77 = *(_QWORD *)(v75 + 8) - 1;
  *(_QWORD *)(v75 + 8) = v77;
  if (!v77)
  {
    result = (*(uint64_t (**)(uint64_t))(v75 + 24))(v1);
    if (!(_DWORD)result)
    {
      v78 = *(_QWORD *)v1;
      *(_DWORD *)(v78 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v78)(v1);
    }
  }
  v79 = *(_QWORD *)(v1 + 40);
  v80 = (_BYTE *)(*(_QWORD *)v79)++;
  *v80 = 0;
  v81 = *(_QWORD *)(v79 + 8) - 1;
  *(_QWORD *)(v79 + 8) = v81;
  if (!v81)
  {
    result = (*(uint64_t (**)(uint64_t))(v79 + 24))(v1);
    if (!(_DWORD)result)
    {
      v82 = *(_QWORD *)v1;
      *(_DWORD *)(v82 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v82)(v1);
    }
  }
  v83 = *(_QWORD *)(v1 + 40);
  v84 = (_BYTE *)(*(_QWORD *)v83)++;
  *v84 = 0;
  v85 = *(_QWORD *)(v83 + 8) - 1;
  *(_QWORD *)(v83 + 8) = v85;
  if (!v85)
  {
    result = (*(uint64_t (**)(uint64_t))(v83 + 24))(v1);
    if (!(_DWORD)result)
    {
      v86 = *(_QWORD *)v1;
      *(_DWORD *)(v86 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v86)(v1);
    }
  }
LABEL_62:
  if (!*(_BYTE *)(v1 + 320))
    return result;
  v88 = *(_QWORD *)(v1 + 40);
  v89 = (_BYTE *)(*(_QWORD *)v88)++;
  *v89 = -1;
  v90 = *(_QWORD *)(v88 + 8) - 1;
  *(_QWORD *)(v88 + 8) = v90;
  if (!v90)
  {
    result = (*(uint64_t (**)(uint64_t))(v88 + 24))(v1);
    if (!(_DWORD)result)
    {
      v91 = *(_QWORD *)v1;
      *(_DWORD *)(v91 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v91)(v1);
    }
  }
  v92 = *(_QWORD *)(v1 + 40);
  v93 = (_BYTE *)(*(_QWORD *)v92)++;
  *v93 = -18;
  v94 = *(_QWORD *)(v92 + 8) - 1;
  *(_QWORD *)(v92 + 8) = v94;
  if (!v94)
  {
    result = (*(uint64_t (**)(uint64_t))(v92 + 24))(v1);
    if (!(_DWORD)result)
    {
      v95 = *(_QWORD *)v1;
      *(_DWORD *)(v95 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v95)(v1);
    }
  }
  v96 = *(_QWORD *)(v1 + 40);
  v97 = (_BYTE *)(*(_QWORD *)v96)++;
  *v97 = 0;
  v98 = *(_QWORD *)(v96 + 8) - 1;
  *(_QWORD *)(v96 + 8) = v98;
  if (!v98)
  {
    result = (*(uint64_t (**)(uint64_t))(v96 + 24))(v1);
    if (!(_DWORD)result)
    {
      v99 = *(_QWORD *)v1;
      *(_DWORD *)(v99 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v99)(v1);
    }
  }
  v100 = *(_QWORD *)(v1 + 40);
  v101 = (_BYTE *)(*(_QWORD *)v100)++;
  *v101 = 14;
  v102 = *(_QWORD *)(v100 + 8) - 1;
  *(_QWORD *)(v100 + 8) = v102;
  if (!v102)
  {
    result = (*(uint64_t (**)(uint64_t))(v100 + 24))(v1);
    if (!(_DWORD)result)
    {
      v103 = *(_QWORD *)v1;
      *(_DWORD *)(v103 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v103)(v1);
    }
  }
  v104 = *(_QWORD *)(v1 + 40);
  v105 = (_BYTE *)(*(_QWORD *)v104)++;
  *v105 = 65;
  v106 = *(_QWORD *)(v104 + 8) - 1;
  *(_QWORD *)(v104 + 8) = v106;
  if (!v106)
  {
    result = (*(uint64_t (**)(uint64_t))(v104 + 24))(v1);
    if (!(_DWORD)result)
    {
      v107 = *(_QWORD *)v1;
      *(_DWORD *)(v107 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v107)(v1);
    }
  }
  v108 = *(_QWORD *)(v1 + 40);
  v109 = (_BYTE *)(*(_QWORD *)v108)++;
  *v109 = 100;
  v110 = *(_QWORD *)(v108 + 8) - 1;
  *(_QWORD *)(v108 + 8) = v110;
  if (!v110)
  {
    result = (*(uint64_t (**)(uint64_t))(v108 + 24))(v1);
    if (!(_DWORD)result)
    {
      v111 = *(_QWORD *)v1;
      *(_DWORD *)(v111 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v111)(v1);
    }
  }
  v112 = *(_QWORD *)(v1 + 40);
  v113 = (_BYTE *)(*(_QWORD *)v112)++;
  *v113 = 111;
  v114 = *(_QWORD *)(v112 + 8) - 1;
  *(_QWORD *)(v112 + 8) = v114;
  if (!v114)
  {
    result = (*(uint64_t (**)(uint64_t))(v112 + 24))(v1);
    if (!(_DWORD)result)
    {
      v115 = *(_QWORD *)v1;
      *(_DWORD *)(v115 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v115)(v1);
    }
  }
  v116 = *(_QWORD *)(v1 + 40);
  v117 = (_BYTE *)(*(_QWORD *)v116)++;
  *v117 = 98;
  v118 = *(_QWORD *)(v116 + 8) - 1;
  *(_QWORD *)(v116 + 8) = v118;
  if (!v118)
  {
    result = (*(uint64_t (**)(uint64_t))(v116 + 24))(v1);
    if (!(_DWORD)result)
    {
      v119 = *(_QWORD *)v1;
      *(_DWORD *)(v119 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v119)(v1);
    }
  }
  v120 = *(_QWORD *)(v1 + 40);
  v121 = (_BYTE *)(*(_QWORD *)v120)++;
  *v121 = 101;
  v122 = *(_QWORD *)(v120 + 8) - 1;
  *(_QWORD *)(v120 + 8) = v122;
  if (!v122)
  {
    result = (*(uint64_t (**)(uint64_t))(v120 + 24))(v1);
    if (!(_DWORD)result)
    {
      v123 = *(_QWORD *)v1;
      *(_DWORD *)(v123 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v123)(v1);
    }
  }
  v124 = *(_QWORD *)(v1 + 40);
  v125 = (_BYTE *)(*(_QWORD *)v124)++;
  *v125 = 0;
  v126 = *(_QWORD *)(v124 + 8) - 1;
  *(_QWORD *)(v124 + 8) = v126;
  if (!v126)
  {
    result = (*(uint64_t (**)(uint64_t))(v124 + 24))(v1);
    if (!(_DWORD)result)
    {
      v127 = *(_QWORD *)v1;
      *(_DWORD *)(v127 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v127)(v1);
    }
  }
  v128 = *(_QWORD *)(v1 + 40);
  v129 = (_BYTE *)(*(_QWORD *)v128)++;
  *v129 = 100;
  v130 = *(_QWORD *)(v128 + 8) - 1;
  *(_QWORD *)(v128 + 8) = v130;
  if (!v130)
  {
    result = (*(uint64_t (**)(uint64_t))(v128 + 24))(v1);
    if (!(_DWORD)result)
    {
      v131 = *(_QWORD *)v1;
      *(_DWORD *)(v131 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v131)(v1);
    }
  }
  v132 = *(_QWORD *)(v1 + 40);
  v133 = (_BYTE *)(*(_QWORD *)v132)++;
  *v133 = 0;
  v134 = *(_QWORD *)(v132 + 8) - 1;
  *(_QWORD *)(v132 + 8) = v134;
  if (!v134)
  {
    result = (*(uint64_t (**)(uint64_t))(v132 + 24))(v1);
    if (!(_DWORD)result)
    {
      v135 = *(_QWORD *)v1;
      *(_DWORD *)(v135 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v135)(v1);
    }
  }
  v136 = *(_QWORD *)(v1 + 40);
  v137 = (_BYTE *)(*(_QWORD *)v136)++;
  *v137 = 0;
  v138 = *(_QWORD *)(v136 + 8) - 1;
  *(_QWORD *)(v136 + 8) = v138;
  if (!v138)
  {
    result = (*(uint64_t (**)(uint64_t))(v136 + 24))(v1);
    if (!(_DWORD)result)
    {
      v139 = *(_QWORD *)v1;
      *(_DWORD *)(v139 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v139)(v1);
    }
  }
  v140 = *(_QWORD *)(v1 + 40);
  v141 = (_BYTE *)(*(_QWORD *)v140)++;
  *v141 = 0;
  v142 = *(_QWORD *)(v140 + 8) - 1;
  *(_QWORD *)(v140 + 8) = v142;
  if (!v142)
  {
    result = (*(uint64_t (**)(uint64_t))(v140 + 24))(v1);
    if (!(_DWORD)result)
    {
      v143 = *(_QWORD *)v1;
      *(_DWORD *)(v143 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v143)(v1);
    }
  }
  v144 = *(_QWORD *)(v1 + 40);
  v145 = (_BYTE *)(*(_QWORD *)v144)++;
  *v145 = 0;
  v146 = *(_QWORD *)(v144 + 8) - 1;
  *(_QWORD *)(v144 + 8) = v146;
  if (v146 || (result = (*(uint64_t (**)(uint64_t))(v144 + 24))(v1), (_DWORD)result))
  {
    v147 = *(_DWORD *)(v1 + 96);
    if (v147 != 5)
      goto LABEL_108;
LABEL_114:
    v148 = *(_QWORD *)(v1 + 40);
    v154 = (_BYTE *)(*(_QWORD *)v148)++;
    *v154 = 2;
    v155 = *(_QWORD *)(v148 + 8) - 1;
    *(_QWORD *)(v148 + 8) = v155;
    if (v155)
      return result;
    goto LABEL_115;
  }
  v153 = *(_QWORD *)v1;
  *(_DWORD *)(v153 + 40) = 25;
  result = (*(uint64_t (**)(uint64_t))v153)(v1);
  v147 = *(_DWORD *)(v1 + 96);
  if (v147 == 5)
    goto LABEL_114;
LABEL_108:
  if (v147 == 3)
  {
    v148 = *(_QWORD *)(v1 + 40);
    v149 = (_BYTE *)(*(_QWORD *)v148)++;
    *v149 = 1;
    v150 = *(_QWORD *)(v148 + 8) - 1;
    *(_QWORD *)(v148 + 8) = v150;
    if (v150)
      return result;
  }
  else
  {
    v148 = *(_QWORD *)(v1 + 40);
    v151 = (_BYTE *)(*(_QWORD *)v148)++;
    *v151 = 0;
    v152 = *(_QWORD *)(v148 + 8) - 1;
    *(_QWORD *)(v148 + 8) = v152;
    if (v152)
      return result;
  }
LABEL_115:
  result = (*(uint64_t (**)(uint64_t))(v148 + 24))(v1);
  if (!(_DWORD)result)
  {
    v156 = *(_QWORD *)v1;
    *(_DWORD *)(v156 + 40) = 25;
    return (*(uint64_t (**)(uint64_t))v156)(v1);
  }
  return result;
}

uint64_t sub_10037BCB8(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int *v5;
  int v6;
  char v7;
  int *v8;
  int v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v2 = *(_DWORD *)(a1 + 92);
  if (v2 < 1)
  {
    v3 = 0;
    if (*(_BYTE *)(a1 + 289))
      goto LABEL_7;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = (int *)(*(_QWORD *)(a1 + 104) + 16);
    do
    {
      v6 = *v5;
      v5 += 24;
      v3 += sub_10037D96C(a1, v6);
      ++v4;
      v2 = *(_DWORD *)(a1 + 92);
    }
    while (v4 < v2);
    if (*(_BYTE *)(a1 + 289))
      goto LABEL_7;
  }
  if (*(_BYTE *)(a1 + 332))
    goto LABEL_22;
  if (*(_DWORD *)(a1 + 88) == 8 && *(_DWORD *)(a1 + 460) == 8)
  {
    if (v2 < 1)
    {
      v9 = 1;
    }
    else
    {
      v8 = (int *)(*(_QWORD *)(a1 + 104) + 24);
      v9 = 1;
      do
      {
        if (*(v8 - 1) > 1 || *v8 >= 2)
          v9 = 0;
        v8 += 24;
        --v2;
      }
      while (v2);
    }
    if (v3 && v9)
    {
      v153 = *(_QWORD *)a1;
      *(_DWORD *)(v153 + 40) = 77;
      (*(void (**)(uint64_t, _QWORD))(v153 + 8))(a1, 0);
      if (!*(_BYTE *)(a1 + 289))
      {
        if (!*(_BYTE *)(a1 + 332))
          goto LABEL_139;
        goto LABEL_22;
      }
LABEL_7:
      if (*(_BYTE *)(a1 + 332))
        v7 = -54;
      else
        v7 = -55;
      goto LABEL_23;
    }
  }
  else
  {
    v9 = 0;
  }
  if (*(_BYTE *)(a1 + 332))
  {
LABEL_22:
    v7 = -62;
    goto LABEL_23;
  }
  if (!v9)
  {
LABEL_139:
    v7 = -63;
    goto LABEL_23;
  }
  v7 = -64;
LABEL_23:
  result = sub_10037DD10(a1, v7);
  v11 = *(_DWORD *)(a1 + 324);
  if (!v11)
    goto LABEL_104;
  if (v11 != 1 || *(int *)(a1 + 92) <= 2)
  {
    v12 = *(_QWORD *)a1;
    *(_DWORD *)(v12 + 40) = 28;
    result = (*(uint64_t (**)(uint64_t))v12)(a1);
  }
  v13 = *(_QWORD *)(a1 + 40);
  v14 = (_BYTE *)(*(_QWORD *)v13)++;
  *v14 = -1;
  v15 = *(_QWORD *)(v13 + 8) - 1;
  *(_QWORD *)(v13 + 8) = v15;
  if (!v15)
  {
    result = (*(uint64_t (**)(uint64_t))(v13 + 24))(a1);
    if (!(_DWORD)result)
    {
      v16 = *(_QWORD *)a1;
      *(_DWORD *)(v16 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v16)(a1);
    }
  }
  v17 = *(_QWORD *)(a1 + 40);
  v18 = (_BYTE *)(*(_QWORD *)v17)++;
  *v18 = -8;
  v19 = *(_QWORD *)(v17 + 8) - 1;
  *(_QWORD *)(v17 + 8) = v19;
  if (!v19)
  {
    result = (*(uint64_t (**)(uint64_t))(v17 + 24))(a1);
    if (!(_DWORD)result)
    {
      v20 = *(_QWORD *)a1;
      *(_DWORD *)(v20 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v20)(a1);
    }
  }
  v21 = *(_QWORD *)(a1 + 40);
  v22 = (_BYTE *)(*(_QWORD *)v21)++;
  *v22 = 0;
  v23 = *(_QWORD *)(v21 + 8) - 1;
  *(_QWORD *)(v21 + 8) = v23;
  if (!v23)
  {
    result = (*(uint64_t (**)(uint64_t))(v21 + 24))(a1);
    if (!(_DWORD)result)
    {
      v24 = *(_QWORD *)a1;
      *(_DWORD *)(v24 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v24)(a1);
    }
  }
  v25 = *(_QWORD *)(a1 + 40);
  v26 = (_BYTE *)(*(_QWORD *)v25)++;
  *v26 = 24;
  v27 = *(_QWORD *)(v25 + 8) - 1;
  *(_QWORD *)(v25 + 8) = v27;
  if (!v27)
  {
    result = (*(uint64_t (**)(uint64_t))(v25 + 24))(a1);
    if (!(_DWORD)result)
    {
      v28 = *(_QWORD *)a1;
      *(_DWORD *)(v28 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v28)(a1);
    }
  }
  v29 = *(_QWORD *)(a1 + 40);
  v30 = (_BYTE *)(*(_QWORD *)v29)++;
  *v30 = 13;
  v31 = *(_QWORD *)(v29 + 8) - 1;
  *(_QWORD *)(v29 + 8) = v31;
  if (!v31)
  {
    result = (*(uint64_t (**)(uint64_t))(v29 + 24))(a1);
    if (!(_DWORD)result)
    {
      v32 = *(_QWORD *)a1;
      *(_DWORD *)(v32 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v32)(a1);
    }
  }
  v33 = *(_QWORD *)(a1 + 40);
  v34 = (_BYTE *)(*(_QWORD *)v33)++;
  *v34 = 0;
  v35 = *(_QWORD *)(v33 + 8) - 1;
  *(_QWORD *)(v33 + 8) = v35;
  if (!v35)
  {
    result = (*(uint64_t (**)(uint64_t))(v33 + 24))(a1);
    if (!(_DWORD)result)
    {
      v36 = *(_QWORD *)a1;
      *(_DWORD *)(v36 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v36)(a1);
    }
  }
  v37 = *(_QWORD *)(a1 + 40);
  v38 = (_BYTE *)(*(_QWORD *)v37)++;
  *v38 = -1;
  v39 = *(_QWORD *)(v37 + 8) - 1;
  *(_QWORD *)(v37 + 8) = v39;
  if (!v39)
  {
    result = (*(uint64_t (**)(uint64_t))(v37 + 24))(a1);
    if (!(_DWORD)result)
    {
      v40 = *(_QWORD *)a1;
      *(_DWORD *)(v40 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v40)(a1);
    }
  }
  v41 = *(_QWORD *)(a1 + 40);
  v42 = (_BYTE *)(*(_QWORD *)v41)++;
  *v42 = 3;
  v43 = *(_QWORD *)(v41 + 8) - 1;
  *(_QWORD *)(v41 + 8) = v43;
  if (!v43)
  {
    result = (*(uint64_t (**)(uint64_t))(v41 + 24))(a1);
    if (!(_DWORD)result)
    {
      v44 = *(_QWORD *)a1;
      *(_DWORD *)(v44 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v44)(a1);
    }
  }
  v45 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 96);
  v46 = *(_QWORD *)(a1 + 40);
  v47 = (_BYTE *)(*(_QWORD *)v46)++;
  *v47 = v45;
  v48 = *(_QWORD *)(v46 + 8) - 1;
  *(_QWORD *)(v46 + 8) = v48;
  if (!v48)
  {
    result = (*(uint64_t (**)(uint64_t))(v46 + 24))(a1);
    if (!(_DWORD)result)
    {
      v49 = *(_QWORD *)a1;
      *(_DWORD *)(v49 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v49)(a1);
    }
  }
  v50 = **(_DWORD **)(a1 + 104);
  v51 = *(_QWORD *)(a1 + 40);
  v52 = (_BYTE *)(*(_QWORD *)v51)++;
  *v52 = v50;
  v53 = *(_QWORD *)(v51 + 8) - 1;
  *(_QWORD *)(v51 + 8) = v53;
  if (!v53)
  {
    result = (*(uint64_t (**)(uint64_t))(v51 + 24))(a1);
    if (!(_DWORD)result)
    {
      v54 = *(_QWORD *)a1;
      *(_DWORD *)(v54 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v54)(a1);
    }
  }
  v55 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 192);
  v56 = *(_QWORD *)(a1 + 40);
  v57 = (_BYTE *)(*(_QWORD *)v56)++;
  *v57 = v55;
  v58 = *(_QWORD *)(v56 + 8) - 1;
  *(_QWORD *)(v56 + 8) = v58;
  if (!v58)
  {
    result = (*(uint64_t (**)(uint64_t))(v56 + 24))(a1);
    if (!(_DWORD)result)
    {
      v59 = *(_QWORD *)a1;
      *(_DWORD *)(v59 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v59)(a1);
    }
  }
  v60 = *(_QWORD *)(a1 + 40);
  v61 = (_BYTE *)(*(_QWORD *)v60)++;
  *v61 = 0x80;
  v62 = *(_QWORD *)(v60 + 8) - 1;
  *(_QWORD *)(v60 + 8) = v62;
  if (!v62)
  {
    result = (*(uint64_t (**)(uint64_t))(v60 + 24))(a1);
    if (!(_DWORD)result)
    {
      v63 = *(_QWORD *)a1;
      *(_DWORD *)(v63 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v63)(a1);
    }
  }
  v64 = *(_QWORD *)(a1 + 40);
  v65 = (_BYTE *)(*(_QWORD *)v64)++;
  *v65 = 0;
  v66 = *(_QWORD *)(v64 + 8) - 1;
  *(_QWORD *)(v64 + 8) = v66;
  if (!v66)
  {
    result = (*(uint64_t (**)(uint64_t))(v64 + 24))(a1);
    if (!(_DWORD)result)
    {
      v67 = *(_QWORD *)a1;
      *(_DWORD *)(v67 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v67)(a1);
    }
  }
  v68 = *(_QWORD *)(a1 + 40);
  v69 = (_BYTE *)(*(_QWORD *)v68)++;
  *v69 = 0;
  v70 = *(_QWORD *)(v68 + 8) - 1;
  *(_QWORD *)(v68 + 8) = v70;
  if (!v70)
  {
    result = (*(uint64_t (**)(uint64_t))(v68 + 24))(a1);
    if (!(_DWORD)result)
    {
      v71 = *(_QWORD *)a1;
      *(_DWORD *)(v71 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v71)(a1);
    }
  }
  v72 = *(_QWORD *)(a1 + 40);
  v73 = (_BYTE *)(*(_QWORD *)v72)++;
  *v73 = 0;
  v74 = *(_QWORD *)(v72 + 8) - 1;
  *(_QWORD *)(v72 + 8) = v74;
  if (!v74)
  {
    result = (*(uint64_t (**)(uint64_t))(v72 + 24))(a1);
    if (!(_DWORD)result)
    {
      v75 = *(_QWORD *)a1;
      *(_DWORD *)(v75 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v75)(a1);
    }
  }
  v76 = *(_QWORD *)(a1 + 40);
  v77 = (_BYTE *)(*(_QWORD *)v76)++;
  *v77 = 0;
  v78 = *(_QWORD *)(v76 + 8) - 1;
  *(_QWORD *)(v76 + 8) = v78;
  if (!v78)
  {
    result = (*(uint64_t (**)(uint64_t))(v76 + 24))(a1);
    if (!(_DWORD)result)
    {
      v79 = *(_QWORD *)a1;
      *(_DWORD *)(v79 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v79)(a1);
    }
  }
  v80 = *(_QWORD *)(a1 + 40);
  v81 = (_BYTE *)(*(_QWORD *)v80)++;
  *v81 = 0;
  v82 = *(_QWORD *)(v80 + 8) - 1;
  *(_QWORD *)(v80 + 8) = v82;
  if (!v82)
  {
    result = (*(uint64_t (**)(uint64_t))(v80 + 24))(a1);
    if (!(_DWORD)result)
    {
      v83 = *(_QWORD *)a1;
      *(_DWORD *)(v83 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v83)(a1);
    }
  }
  v84 = *(_QWORD *)(a1 + 40);
  v85 = (_BYTE *)(*(_QWORD *)v84)++;
  *v85 = 0;
  v86 = *(_QWORD *)(v84 + 8) - 1;
  *(_QWORD *)(v84 + 8) = v86;
  if (!v86)
  {
    result = (*(uint64_t (**)(uint64_t))(v84 + 24))(a1);
    if (!(_DWORD)result)
    {
      v87 = *(_QWORD *)a1;
      *(_DWORD *)(v87 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v87)(a1);
    }
  }
  v88 = *(_QWORD *)(a1 + 40);
  v89 = (_BYTE *)(*(_QWORD *)v88)++;
  *v89 = 1;
  v90 = *(_QWORD *)(v88 + 8) - 1;
  *(_QWORD *)(v88 + 8) = v90;
  if (!v90)
  {
    result = (*(uint64_t (**)(uint64_t))(v88 + 24))(a1);
    if (!(_DWORD)result)
    {
      v91 = *(_QWORD *)a1;
      *(_DWORD *)(v91 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v91)(a1);
    }
  }
  v92 = *(_QWORD *)(a1 + 40);
  v93 = (_BYTE *)(*(_QWORD *)v92)++;
  *v93 = 0;
  v94 = *(_QWORD *)(v92 + 8) - 1;
  *(_QWORD *)(v92 + 8) = v94;
  if (!v94)
  {
    result = (*(uint64_t (**)(uint64_t))(v92 + 24))(a1);
    if (!(_DWORD)result)
    {
      v95 = *(_QWORD *)a1;
      *(_DWORD *)(v95 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v95)(a1);
    }
  }
  v96 = *(_QWORD *)(a1 + 40);
  v97 = (_BYTE *)(*(_QWORD *)v96)++;
  *v97 = 0;
  v98 = *(_QWORD *)(v96 + 8) - 1;
  *(_QWORD *)(v96 + 8) = v98;
  if (!v98)
  {
    result = (*(uint64_t (**)(uint64_t))(v96 + 24))(a1);
    if (!(_DWORD)result)
    {
      v99 = *(_QWORD *)a1;
      *(_DWORD *)(v99 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v99)(a1);
    }
  }
  v100 = *(_QWORD *)(a1 + 40);
  v101 = (_BYTE *)(*(_QWORD *)v100)++;
  *v101 = 0;
  v102 = *(_QWORD *)(v100 + 8) - 1;
  *(_QWORD *)(v100 + 8) = v102;
  if (!v102)
  {
    result = (*(uint64_t (**)(uint64_t))(v100 + 24))(a1);
    if (!(_DWORD)result)
    {
      v103 = *(_QWORD *)a1;
      *(_DWORD *)(v103 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v103)(a1);
    }
  }
  v104 = *(_QWORD *)(a1 + 40);
  v105 = (_BYTE *)(*(_QWORD *)v104)++;
  *v105 = 0;
  v106 = *(_QWORD *)(v104 + 8) - 1;
  *(_QWORD *)(v104 + 8) = v106;
  if (!v106)
  {
    result = (*(uint64_t (**)(uint64_t))(v104 + 24))(a1);
    if (!(_DWORD)result)
    {
      v107 = *(_QWORD *)a1;
      *(_DWORD *)(v107 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v107)(a1);
    }
  }
  v108 = *(_QWORD *)(a1 + 40);
  v109 = (_BYTE *)(*(_QWORD *)v108)++;
  *v109 = 1;
  v110 = *(_QWORD *)(v108 + 8) - 1;
  *(_QWORD *)(v108 + 8) = v110;
  if (!v110)
  {
    result = (*(uint64_t (**)(uint64_t))(v108 + 24))(a1);
    if (!(_DWORD)result)
    {
      v111 = *(_QWORD *)a1;
      *(_DWORD *)(v111 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v111)(a1);
    }
  }
  v112 = *(_QWORD *)(a1 + 40);
  v113 = (_BYTE *)(*(_QWORD *)v112)++;
  *v113 = 0;
  v114 = *(_QWORD *)(v112 + 8) - 1;
  *(_QWORD *)(v112 + 8) = v114;
  if (!v114)
  {
    result = (*(uint64_t (**)(uint64_t))(v112 + 24))(a1);
    if (!(_DWORD)result)
    {
      v115 = *(_QWORD *)a1;
      *(_DWORD *)(v115 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v115)(a1);
    }
  }
  v116 = *(_QWORD *)(a1 + 40);
  v117 = (_BYTE *)(*(_QWORD *)v116)++;
  *v117 = 0;
  v118 = *(_QWORD *)(v116 + 8) - 1;
  *(_QWORD *)(v116 + 8) = v118;
  if (v118 || (result = (*(uint64_t (**)(uint64_t))(v116 + 24))(a1), (_DWORD)result))
  {
LABEL_104:
    if (!*(_BYTE *)(a1 + 332))
      return result;
  }
  else
  {
    v152 = *(_QWORD *)a1;
    *(_DWORD *)(v152 + 40) = 25;
    result = (*(uint64_t (**)(uint64_t))v152)(a1);
    if (!*(_BYTE *)(a1 + 332))
      return result;
  }
  if (*(_DWORD *)(a1 + 460) != 8)
  {
    v119 = *(_QWORD *)(a1 + 40);
    v120 = (_BYTE *)(*(_QWORD *)v119)++;
    *v120 = -1;
    v121 = *(_QWORD *)(v119 + 8) - 1;
    *(_QWORD *)(v119 + 8) = v121;
    if (!v121)
    {
      result = (*(uint64_t (**)(uint64_t))(v119 + 24))(a1);
      if (!(_DWORD)result)
      {
        v122 = *(_QWORD *)a1;
        *(_DWORD *)(v122 + 40) = 25;
        result = (*(uint64_t (**)(uint64_t))v122)(a1);
      }
    }
    v123 = *(_QWORD *)(a1 + 40);
    v124 = (_BYTE *)(*(_QWORD *)v123)++;
    *v124 = -38;
    v125 = *(_QWORD *)(v123 + 8) - 1;
    *(_QWORD *)(v123 + 8) = v125;
    if (!v125)
    {
      result = (*(uint64_t (**)(uint64_t))(v123 + 24))(a1);
      if (!(_DWORD)result)
      {
        v126 = *(_QWORD *)a1;
        *(_DWORD *)(v126 + 40) = 25;
        result = (*(uint64_t (**)(uint64_t))v126)(a1);
      }
    }
    v127 = *(_QWORD *)(a1 + 40);
    v128 = (_BYTE *)(*(_QWORD *)v127)++;
    *v128 = 0;
    v129 = *(_QWORD *)(v127 + 8) - 1;
    *(_QWORD *)(v127 + 8) = v129;
    if (!v129)
    {
      result = (*(uint64_t (**)(uint64_t))(v127 + 24))(a1);
      if (!(_DWORD)result)
      {
        v130 = *(_QWORD *)a1;
        *(_DWORD *)(v130 + 40) = 25;
        result = (*(uint64_t (**)(uint64_t))v130)(a1);
      }
    }
    v131 = *(_QWORD *)(a1 + 40);
    v132 = (_BYTE *)(*(_QWORD *)v131)++;
    *v132 = 6;
    v133 = *(_QWORD *)(v131 + 8) - 1;
    *(_QWORD *)(v131 + 8) = v133;
    if (!v133)
    {
      result = (*(uint64_t (**)(uint64_t))(v131 + 24))(a1);
      if (!(_DWORD)result)
      {
        v134 = *(_QWORD *)a1;
        *(_DWORD *)(v134 + 40) = 25;
        result = (*(uint64_t (**)(uint64_t))v134)(a1);
      }
    }
    v135 = *(_QWORD *)(a1 + 40);
    v136 = (_BYTE *)(*(_QWORD *)v135)++;
    *v136 = 0;
    v137 = *(_QWORD *)(v135 + 8) - 1;
    *(_QWORD *)(v135 + 8) = v137;
    if (!v137)
    {
      result = (*(uint64_t (**)(uint64_t))(v135 + 24))(a1);
      if (!(_DWORD)result)
      {
        v138 = *(_QWORD *)a1;
        *(_DWORD *)(v138 + 40) = 25;
        result = (*(uint64_t (**)(uint64_t))v138)(a1);
      }
    }
    v139 = *(_QWORD *)(a1 + 40);
    v140 = (_BYTE *)(*(_QWORD *)v139)++;
    *v140 = 0;
    v141 = *(_QWORD *)(v139 + 8) - 1;
    *(_QWORD *)(v139 + 8) = v141;
    if (!v141)
    {
      result = (*(uint64_t (**)(uint64_t))(v139 + 24))(a1);
      if (!(_DWORD)result)
      {
        v142 = *(_QWORD *)a1;
        *(_DWORD *)(v142 + 40) = 25;
        result = (*(uint64_t (**)(uint64_t))v142)(a1);
      }
    }
    v143 = *(_QWORD *)(a1 + 40);
    v144 = *(_DWORD *)(a1 + 460) * *(_DWORD *)(a1 + 460) - 1;
    v145 = (_BYTE *)(*(_QWORD *)v143)++;
    *v145 = v144;
    v146 = *(_QWORD *)(v143 + 8) - 1;
    *(_QWORD *)(v143 + 8) = v146;
    if (!v146)
    {
      result = (*(uint64_t (**)(uint64_t))(v143 + 24))(a1);
      if (!(_DWORD)result)
      {
        v147 = *(_QWORD *)a1;
        *(_DWORD *)(v147 + 40) = 25;
        result = (*(uint64_t (**)(uint64_t))v147)(a1);
      }
    }
    v148 = *(_QWORD *)(a1 + 40);
    v149 = (_BYTE *)(*(_QWORD *)v148)++;
    *v149 = 0;
    v150 = *(_QWORD *)(v148 + 8) - 1;
    *(_QWORD *)(v148 + 8) = v150;
    if (!v150)
    {
      result = (*(uint64_t (**)(uint64_t))(v148 + 24))(a1);
      if (!(_DWORD)result)
      {
        v151 = *(_QWORD *)a1;
        *(_DWORD *)(v151 + 40) = 25;
        return (*(uint64_t (**)(uint64_t))v151)(a1);
      }
    }
  }
  return result;
}

uint64_t *sub_10037C8D4(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t j;
  _DWORD *v121;
  char v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  int8x16_t v149;
  int8x16_t v150;

  v1 = result;
  v2 = result[64];
  if (!*((_BYTE *)result + 289))
  {
    if (*((int *)result + 89) < 1)
      goto LABEL_73;
    v6 = 45;
    while (1)
    {
      v8 = v1[v6];
      if (!*((_DWORD *)v1 + 111) && !*((_DWORD *)v1 + 113))
        break;
      if (*((_DWORD *)v1 + 112))
        goto LABEL_13;
LABEL_9:
      v7 = v6 - 44;
      ++v6;
      if (v7 >= *((int *)v1 + 89))
        goto LABEL_73;
    }
    result = sub_10037E1B8(v1, *(_DWORD *)(v8 + 20), 0);
    if (!*((_DWORD *)v1 + 112))
      goto LABEL_9;
LABEL_13:
    result = sub_10037E1B8(v1, *(_DWORD *)(v8 + 24), 1);
    goto LABEL_9;
  }
  v149 = 0uLL;
  v150 = 0uLL;
  v3 = *((unsigned int *)result + 89);
  if ((int)v3 < 1)
    goto LABEL_43;
  v4 = *((_DWORD *)result + 112);
  if (!*((_DWORD *)result + 111))
  {
    if (*((_DWORD *)result + 113))
    {
      if (!v4)
        goto LABEL_43;
      if (v3 >= 2)
      {
        v9 = v3 & 0xFFFFFFFE;
        v19 = result + 46;
        v20 = v9;
        do
        {
          v21 = *(int *)(*v19 + 24);
          v149.i8[*(int *)(*(v19 - 1) + 24)] = 1;
          v149.i8[v21] = 1;
          v19 += 2;
          v20 -= 2;
        }
        while (v20);
        if (v9 == v3)
          goto LABEL_43;
      }
      else
      {
        v9 = 0;
      }
      v22 = v3 - v9;
      v23 = &result[v9 + 45];
      do
      {
        v24 = *v23++;
        v149.i8[*(int *)(v24 + 24)] = 1;
        --v22;
      }
      while (v22);
      goto LABEL_43;
    }
    if (v4)
    {
      v16 = result + 45;
      do
      {
        v17 = *v16++;
        v18 = *(int *)(v17 + 24);
        v150.i8[*(int *)(v17 + 20)] = 1;
        v149.i8[v18] = 1;
        --v3;
      }
      while (v3);
      goto LABEL_43;
    }
    if (v3 >= 2)
    {
      v25 = v3 & 0xFFFFFFFE;
      v26 = result + 46;
      v27 = v25;
      do
      {
        v28 = *(int *)(*v26 + 20);
        v150.i8[*(int *)(*(v26 - 1) + 20)] = 1;
        v150.i8[v28] = 1;
        v26 += 2;
        v27 -= 2;
      }
      while (v27);
      if (v25 == v3)
        goto LABEL_43;
    }
    else
    {
      v25 = 0;
    }
    v29 = v3 - v25;
    v30 = &result[v25 + 45];
    do
    {
      v31 = *v30++;
      v150.i8[*(int *)(v31 + 20)] = 1;
      --v29;
    }
    while (v29);
    goto LABEL_43;
  }
  if (!v4)
    goto LABEL_43;
  if (v3 < 2)
  {
    v5 = 0;
LABEL_23:
    v13 = v3 - v5;
    v14 = &result[v5 + 45];
    do
    {
      v15 = *v14++;
      v149.i8[*(int *)(v15 + 24)] = 1;
      --v13;
    }
    while (v13);
    goto LABEL_43;
  }
  v5 = v3 & 0xFFFFFFFE;
  v10 = result + 46;
  v11 = v5;
  do
  {
    v12 = *(int *)(*v10 + 24);
    v149.i8[*(int *)(*(v10 - 1) + 24)] = 1;
    v149.i8[v12] = 1;
    v10 += 2;
    v11 -= 2;
  }
  while (v11);
  if (v5 != v3)
    goto LABEL_23;
LABEL_43:
  v32 = vmovl_s8(*(int8x8_t *)v149.i8);
  v33 = vmovl_s8(*(int8x8_t *)v150.i8);
  v34 = vmovl_high_s8(v149);
  v35 = vmovl_high_s8(v150);
  v36 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddl_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v32.i8), vaddl_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v34.i8)), vaddq_s32(vaddl_high_s16(v33, v32), vaddl_high_s16(v35, v34))));
  if (v36)
  {
    v37 = result[5];
    v38 = (_BYTE *)(*(_QWORD *)v37)++;
    *v38 = -1;
    v39 = *(_QWORD *)(v37 + 8) - 1;
    *(_QWORD *)(v37 + 8) = v39;
    if (!v39)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v37 + 24))(result);
      if (!(_DWORD)result)
      {
        v40 = *v1;
        *(_DWORD *)(v40 + 40) = 25;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v40)(v1);
      }
    }
    v41 = v1[5];
    v42 = (_BYTE *)(*(_QWORD *)v41)++;
    *v42 = -52;
    v43 = *(_QWORD *)(v41 + 8) - 1;
    *(_QWORD *)(v41 + 8) = v43;
    if (!v43)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v41 + 24))(v1);
      if (!(_DWORD)result)
      {
        v44 = *v1;
        *(_DWORD *)(v44 + 40) = 25;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v44)(v1);
      }
    }
    v45 = 2 * v36 + 2;
    v46 = v1[5];
    v47 = (_BYTE *)(*(_QWORD *)v46)++;
    *v47 = HIBYTE(v45);
    v48 = *(_QWORD *)(v46 + 8) - 1;
    *(_QWORD *)(v46 + 8) = v48;
    if (!v48)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v46 + 24))(v1);
      if (!(_DWORD)result)
      {
        v49 = *v1;
        *(_DWORD *)(v49 + 40) = 25;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v49)(v1);
      }
    }
    v50 = v1[5];
    v51 = (_BYTE *)(*(_QWORD *)v50)++;
    *v51 = v45;
    v52 = *(_QWORD *)(v50 + 8) - 1;
    *(_QWORD *)(v50 + 8) = v52;
    if (!v52)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v50 + 24))(v1);
      if (!(_DWORD)result)
      {
        v53 = *v1;
        *(_DWORD *)(v53 + 40) = 25;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v53)(v1);
      }
    }
    for (i = 0; i != 16; ++i)
    {
      if (!v150.i8[i])
        goto LABEL_135;
      v55 = v1[5];
      v56 = (_BYTE *)(*(_QWORD *)v55)++;
      *v56 = i;
      v57 = *(_QWORD *)(v55 + 8) - 1;
      *(_QWORD *)(v55 + 8) = v57;
      if (!v57)
      {
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v55 + 24))(v1);
        if (!(_DWORD)result)
        {
          v58 = *v1;
          *(_DWORD *)(v58 + 40) = 25;
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v58)(v1);
        }
      }
      v59 = *((_BYTE *)v1 + i + 224) + 16 * *((_BYTE *)v1 + i + 240);
      v60 = v1[5];
      v61 = (_BYTE *)(*(_QWORD *)v60)++;
      *v61 = v59;
      v62 = *(_QWORD *)(v60 + 8) - 1;
      *(_QWORD *)(v60 + 8) = v62;
      if (v62 || (result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v60 + 24))(v1), (_DWORD)result))
      {
LABEL_135:
        if (v149.i8[i])
          goto LABEL_65;
      }
      else
      {
        v72 = *v1;
        *(_DWORD *)(v72 + 40) = 25;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v72)(v1);
        if (v149.i8[i])
        {
LABEL_65:
          v63 = v1[5];
          v64 = (_BYTE *)(*(_QWORD *)v63)++;
          *v64 = i + 16;
          v65 = *(_QWORD *)(v63 + 8) - 1;
          *(_QWORD *)(v63 + 8) = v65;
          if (!v65)
          {
            result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v63 + 24))(v1);
            if (!(_DWORD)result)
            {
              v66 = *v1;
              *(_DWORD *)(v66 + 40) = 25;
              result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v66)(v1);
            }
          }
          v67 = *((_BYTE *)v1 + i + 256);
          v68 = v1[5];
          v69 = (_BYTE *)(*(_QWORD *)v68)++;
          *v69 = v67;
          v70 = *(_QWORD *)(v68 + 8) - 1;
          *(_QWORD *)(v68 + 8) = v70;
          if (!v70)
          {
            result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v68 + 24))(v1);
            if (!(_DWORD)result)
            {
              v71 = *v1;
              *(_DWORD *)(v71 + 40) = 25;
              result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v71)(v1);
            }
          }
        }
      }
    }
  }
LABEL_73:
  if (*((_DWORD *)v1 + 76) != *(_DWORD *)(v2 + 56))
  {
    v73 = v1[5];
    v74 = (_BYTE *)(*(_QWORD *)v73)++;
    *v74 = -1;
    v75 = *(_QWORD *)(v73 + 8) - 1;
    *(_QWORD *)(v73 + 8) = v75;
    if (!v75)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v73 + 24))(v1);
      if (!(_DWORD)result)
      {
        v76 = *v1;
        *(_DWORD *)(v76 + 40) = 25;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v76)(v1);
      }
    }
    v77 = v1[5];
    v78 = (_BYTE *)(*(_QWORD *)v77)++;
    *v78 = -35;
    v79 = *(_QWORD *)(v77 + 8) - 1;
    *(_QWORD *)(v77 + 8) = v79;
    if (!v79)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v77 + 24))(v1);
      if (!(_DWORD)result)
      {
        v80 = *v1;
        *(_DWORD *)(v80 + 40) = 25;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v80)(v1);
      }
    }
    v81 = v1[5];
    v82 = (_BYTE *)(*(_QWORD *)v81)++;
    *v82 = 0;
    v83 = *(_QWORD *)(v81 + 8) - 1;
    *(_QWORD *)(v81 + 8) = v83;
    if (!v83)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v81 + 24))(v1);
      if (!(_DWORD)result)
      {
        v84 = *v1;
        *(_DWORD *)(v84 + 40) = 25;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v84)(v1);
      }
    }
    v85 = v1[5];
    v86 = (_BYTE *)(*(_QWORD *)v85)++;
    *v86 = 4;
    v87 = *(_QWORD *)(v85 + 8) - 1;
    *(_QWORD *)(v85 + 8) = v87;
    if (!v87)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v85 + 24))(v1);
      if (!(_DWORD)result)
      {
        v88 = *v1;
        *(_DWORD *)(v88 + 40) = 25;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v88)(v1);
      }
    }
    v89 = *((_DWORD *)v1 + 76);
    v90 = v1[5];
    v91 = (_BYTE *)(*(_QWORD *)v90)++;
    *v91 = BYTE1(v89);
    v92 = *(_QWORD *)(v90 + 8) - 1;
    *(_QWORD *)(v90 + 8) = v92;
    if (!v92)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v90 + 24))(v1);
      if (!(_DWORD)result)
      {
        v93 = *v1;
        *(_DWORD *)(v93 + 40) = 25;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v93)(v1);
      }
    }
    v94 = v1[5];
    v95 = (_BYTE *)(*(_QWORD *)v94)++;
    *v95 = v89;
    v96 = *(_QWORD *)(v94 + 8) - 1;
    *(_QWORD *)(v94 + 8) = v96;
    if (!v96)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v94 + 24))(v1);
      if (!(_DWORD)result)
      {
        v97 = *v1;
        *(_DWORD *)(v97 + 40) = 25;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v97)(v1);
      }
    }
    *(_DWORD *)(v2 + 56) = *((_DWORD *)v1 + 76);
  }
  v98 = v1[5];
  v99 = (_BYTE *)(*(_QWORD *)v98)++;
  *v99 = -1;
  v100 = *(_QWORD *)(v98 + 8) - 1;
  *(_QWORD *)(v98 + 8) = v100;
  if (!v100)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v98 + 24))(v1);
    if (!(_DWORD)result)
    {
      v101 = *v1;
      *(_DWORD *)(v101 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v101)(v1);
    }
  }
  v102 = v1[5];
  v103 = (_BYTE *)(*(_QWORD *)v102)++;
  *v103 = -38;
  v104 = *(_QWORD *)(v102 + 8) - 1;
  *(_QWORD *)(v102 + 8) = v104;
  if (!v104)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v102 + 24))(v1);
    if (!(_DWORD)result)
    {
      v105 = *v1;
      *(_DWORD *)(v105 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v105)(v1);
    }
  }
  v106 = 2 * *((_DWORD *)v1 + 89) + 6;
  v107 = v1[5];
  v108 = (_BYTE *)(*(_QWORD *)v107)++;
  *v108 = BYTE1(v106);
  v109 = *(_QWORD *)(v107 + 8) - 1;
  *(_QWORD *)(v107 + 8) = v109;
  if (!v109)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v107 + 24))(v1);
    if (!(_DWORD)result)
    {
      v110 = *v1;
      *(_DWORD *)(v110 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v110)(v1);
    }
  }
  v111 = v1[5];
  v112 = (_BYTE *)(*(_QWORD *)v111)++;
  *v112 = v106;
  v113 = *(_QWORD *)(v111 + 8) - 1;
  *(_QWORD *)(v111 + 8) = v113;
  if (!v113)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v111 + 24))(v1);
    if (!(_DWORD)result)
    {
      v114 = *v1;
      *(_DWORD *)(v114 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v114)(v1);
    }
  }
  v115 = *((_DWORD *)v1 + 89);
  v116 = v1[5];
  v117 = (_BYTE *)(*(_QWORD *)v116)++;
  *v117 = v115;
  v118 = *(_QWORD *)(v116 + 8) - 1;
  *(_QWORD *)(v116 + 8) = v118;
  if (!v118)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v116 + 24))(v1);
    if (!(_DWORD)result)
    {
      v119 = *v1;
      *(_DWORD *)(v119 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v119)(v1);
    }
  }
  if (*((int *)v1 + 89) >= 1)
  {
    for (j = 0; j < *((int *)v1 + 89); ++j)
    {
      v121 = (_DWORD *)v1[j + 45];
      v122 = *v121;
      v123 = v1[5];
      v124 = (_BYTE *)(*(_QWORD *)v123)++;
      *v124 = v122;
      v125 = *(_QWORD *)(v123 + 8) - 1;
      *(_QWORD *)(v123 + 8) = v125;
      if (v125 || (result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v123 + 24))(v1), (_DWORD)result))
      {
        if (*((_DWORD *)v1 + 111))
          goto LABEL_118;
      }
      else
      {
        v128 = *v1;
        *(_DWORD *)(v128 + 40) = 25;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v128)(v1);
        if (*((_DWORD *)v1 + 111))
        {
LABEL_118:
          LOBYTE(v126) = 0;
          v127 = *((_DWORD *)v1 + 112);
          if (!v127)
            goto LABEL_120;
LABEL_119:
          v127 = v121[6];
          goto LABEL_120;
        }
      }
      if (*((_DWORD *)v1 + 113))
        goto LABEL_118;
      v126 = v121[5];
      v127 = *((_DWORD *)v1 + 112);
      if (v127)
        goto LABEL_119;
LABEL_120:
      v129 = v127 + 16 * v126;
      v130 = v1[5];
      v131 = (_BYTE *)(*(_QWORD *)v130)++;
      *v131 = v129;
      v132 = *(_QWORD *)(v130 + 8) - 1;
      *(_QWORD *)(v130 + 8) = v132;
      if (!v132)
      {
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v130 + 24))(v1);
        if (!(_DWORD)result)
        {
          v133 = *v1;
          *(_DWORD *)(v133 + 40) = 25;
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v133)(v1);
        }
      }
    }
  }
  v134 = *((_DWORD *)v1 + 111);
  v135 = v1[5];
  v136 = (_BYTE *)(*(_QWORD *)v135)++;
  *v136 = v134;
  v137 = *(_QWORD *)(v135 + 8) - 1;
  *(_QWORD *)(v135 + 8) = v137;
  if (!v137)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v135 + 24))(v1);
    if (!(_DWORD)result)
    {
      v138 = *v1;
      *(_DWORD *)(v138 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v138)(v1);
    }
  }
  v139 = *((_DWORD *)v1 + 112);
  v140 = v1[5];
  v141 = (_BYTE *)(*(_QWORD *)v140)++;
  *v141 = v139;
  v142 = *(_QWORD *)(v140 + 8) - 1;
  *(_QWORD *)(v140 + 8) = v142;
  if (!v142)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v140 + 24))(v1);
    if (!(_DWORD)result)
    {
      v143 = *v1;
      *(_DWORD *)(v143 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v143)(v1);
    }
  }
  v144 = *((_DWORD *)v1 + 114) + 16 * *((_BYTE *)v1 + 452);
  v145 = v1[5];
  v146 = (_BYTE *)(*(_QWORD *)v145)++;
  *v146 = v144;
  v147 = *(_QWORD *)(v145 + 8) - 1;
  *(_QWORD *)(v145 + 8) = v147;
  if (!v147)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v145 + 24))(v1);
    if (!(_DWORD)result)
    {
      v148 = *v1;
      *(_DWORD *)(v148 + 40) = 25;
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))v148)(v1);
    }
  }
  return result;
}

uint64_t sub_10037D428(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (uint64_t *)result;
  v2 = *(_QWORD *)(result + 40);
  v3 = (_BYTE *)(*(_QWORD *)v2)++;
  *v3 = -1;
  v4 = *(_QWORD *)(v2 + 8) - 1;
  *(_QWORD *)(v2 + 8) = v4;
  if (!v4)
  {
    result = (*(uint64_t (**)(uint64_t))(v2 + 24))(result);
    if (!(_DWORD)result)
    {
      v5 = *v1;
      *(_DWORD *)(v5 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t *))v5)(v1);
    }
  }
  v6 = v1[5];
  v7 = (_BYTE *)(*(_QWORD *)v6)++;
  *v7 = -39;
  v8 = *(_QWORD *)(v6 + 8) - 1;
  *(_QWORD *)(v6 + 8) = v8;
  if (!v8)
  {
    result = (*(uint64_t (**)(uint64_t *))(v6 + 24))(v1);
    if (!(_DWORD)result)
    {
      v9 = *v1;
      *(_DWORD *)(v9 + 40) = 25;
      return (*(uint64_t (**)(uint64_t *))v9)(v1);
    }
  }
  return result;
}

uint64_t sub_10037D4EC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = result;
  v2 = *(_QWORD *)(result + 40);
  v3 = (_BYTE *)(*(_QWORD *)v2)++;
  *v3 = -1;
  v4 = *(_QWORD *)(v2 + 8) - 1;
  *(_QWORD *)(v2 + 8) = v4;
  if (!v4)
  {
    result = (*(uint64_t (**)(uint64_t))(v2 + 24))(result);
    if (!(_DWORD)result)
    {
      v5 = *(_QWORD *)v1;
      *(_DWORD *)(v5 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v5)(v1);
    }
  }
  v6 = *(_QWORD *)(v1 + 40);
  v7 = (_BYTE *)(*(_QWORD *)v6)++;
  *v7 = -40;
  v8 = *(_QWORD *)(v6 + 8) - 1;
  *(_QWORD *)(v6 + 8) = v8;
  if (!v8)
  {
    result = (*(uint64_t (**)(uint64_t))(v6 + 24))(v1);
    if (!(_DWORD)result)
    {
      v9 = *(_QWORD *)v1;
      *(_DWORD *)(v9 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v9)(v1);
    }
  }
  if (*(_QWORD *)(v1 + 112))
    result = sub_10037D96C(v1, 0);
  if (*(_QWORD *)(v1 + 120))
    result = sub_10037D96C(v1, 1);
  if (*(_QWORD *)(v1 + 128))
    result = sub_10037D96C(v1, 2);
  if (*(_QWORD *)(v1 + 136))
    result = sub_10037D96C(v1, 3);
  if (!*(_BYTE *)(v1 + 289))
  {
    if (*(_QWORD *)(v1 + 160))
      result = (uint64_t)sub_10037E1B8((uint64_t *)v1, 0, 0);
    if (*(_QWORD *)(v1 + 192))
      result = (uint64_t)sub_10037E1B8((uint64_t *)v1, 0, 1);
    if (*(_QWORD *)(v1 + 168))
      result = (uint64_t)sub_10037E1B8((uint64_t *)v1, 1, 0);
    if (*(_QWORD *)(v1 + 200))
      result = (uint64_t)sub_10037E1B8((uint64_t *)v1, 1, 1);
    if (*(_QWORD *)(v1 + 176))
      result = (uint64_t)sub_10037E1B8((uint64_t *)v1, 2, 0);
    if (*(_QWORD *)(v1 + 208))
      result = (uint64_t)sub_10037E1B8((uint64_t *)v1, 2, 1);
    if (*(_QWORD *)(v1 + 184))
      result = (uint64_t)sub_10037E1B8((uint64_t *)v1, 3, 0);
    if (*(_QWORD *)(v1 + 216))
      result = (uint64_t)sub_10037E1B8((uint64_t *)v1, 3, 1);
  }
  v10 = *(_QWORD *)(v1 + 40);
  v11 = (_BYTE *)(*(_QWORD *)v10)++;
  *v11 = -1;
  v12 = *(_QWORD *)(v10 + 8) - 1;
  *(_QWORD *)(v10 + 8) = v12;
  if (!v12)
  {
    result = (*(uint64_t (**)(uint64_t))(v10 + 24))(v1);
    if (!(_DWORD)result)
    {
      v13 = *(_QWORD *)v1;
      *(_DWORD *)(v13 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v13)(v1);
    }
  }
  v14 = *(_QWORD *)(v1 + 40);
  v15 = (_BYTE *)(*(_QWORD *)v14)++;
  *v15 = -39;
  v16 = *(_QWORD *)(v14 + 8) - 1;
  *(_QWORD *)(v14 + 8) = v16;
  if (!v16)
  {
    result = (*(uint64_t (**)(uint64_t))(v14 + 24))(v1);
    if (!(_DWORD)result)
    {
      v17 = *(_QWORD *)v1;
      *(_DWORD *)(v17 + 40) = 25;
      return (*(uint64_t (**)(uint64_t))v17)(v1);
    }
  }
  return result;
}

uint64_t *sub_10037D768(uint64_t *result, char a2, unsigned int a3)
{
  __int16 v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a3;
  v5 = result;
  if (a3 >= 0xFFFE)
  {
    v6 = *result;
    *(_DWORD *)(v6 + 40) = 12;
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v6)(result);
  }
  v7 = v5[5];
  v8 = (_BYTE *)(*(_QWORD *)v7)++;
  *v8 = -1;
  v9 = *(_QWORD *)(v7 + 8) - 1;
  *(_QWORD *)(v7 + 8) = v9;
  if (!v9)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v7 + 24))(v5);
    if (!(_DWORD)result)
    {
      v10 = *v5;
      *(_DWORD *)(v10 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v10)(v5);
    }
  }
  v11 = v5[5];
  v12 = (_BYTE *)(*(_QWORD *)v11)++;
  *v12 = a2;
  v13 = *(_QWORD *)(v11 + 8) - 1;
  *(_QWORD *)(v11 + 8) = v13;
  if (!v13)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v11 + 24))(v5);
    if (!(_DWORD)result)
    {
      v14 = *v5;
      *(_DWORD *)(v14 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v14)(v5);
    }
  }
  v15 = v3 + 2;
  v16 = v5[5];
  v17 = (_BYTE *)(*(_QWORD *)v16)++;
  *v17 = HIBYTE(v15);
  v18 = *(_QWORD *)(v16 + 8) - 1;
  *(_QWORD *)(v16 + 8) = v18;
  if (!v18)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v16 + 24))(v5);
    if (!(_DWORD)result)
    {
      v19 = *v5;
      *(_DWORD *)(v19 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v19)(v5);
    }
  }
  v20 = v5[5];
  v21 = (_BYTE *)(*(_QWORD *)v20)++;
  *v21 = v15;
  v22 = *(_QWORD *)(v20 + 8) - 1;
  *(_QWORD *)(v20 + 8) = v22;
  if (!v22)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v20 + 24))(v5);
    if (!(_DWORD)result)
    {
      v23 = *v5;
      *(_DWORD *)(v23 + 40) = 25;
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))v23)(v5);
    }
  }
  return result;
}

uint64_t sub_10037D900(uint64_t result, char a2)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(result + 40);
  v3 = (_BYTE *)(*(_QWORD *)v2)++;
  *v3 = a2;
  v4 = *(_QWORD *)(v2 + 8) - 1;
  *(_QWORD *)(v2 + 8) = v4;
  if (!v4)
  {
    v5 = (uint64_t *)result;
    result = (*(uint64_t (**)(void))(v2 + 24))();
    if (!(_DWORD)result)
    {
      v6 = *v5;
      *(_DWORD *)(v6 + 40) = 25;
      return (*(uint64_t (**)(uint64_t *))v6)(v5);
    }
  }
  return result;
}

uint64_t sub_10037D96C(uint64_t a1, int a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (**v11)(uint64_t);
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void (**v15)(uint64_t);
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  void (**v19)(uint64_t);
  int v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  void (**v27)(uint64_t);
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  void (**v31)(uint64_t);
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  void (**v35)(uint64_t);
  uint64_t v36;
  BOOL v37;
  __int16 v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  void (**v42)(uint64_t);
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  void (**v46)(uint64_t);
  char v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  void (**v51)(uint64_t);

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 8 * a2 + 112);
  if (v4)
  {
    v5 = *(unsigned int *)(a1 + 472);
    if ((v5 & 0x80000000) == 0)
    {
LABEL_3:
      LODWORD(v6) = 0;
      v7 = *(int **)(a1 + 464);
      v8 = v5 + 1;
      do
      {
        v9 = *v7++;
        if (*(unsigned __int16 *)(v4 + 2 * v9) > 0xFFu)
          v6 = 1;
        else
          v6 = v6;
        --v8;
      }
      while (v8);
      if (*(_BYTE *)(v4 + 128))
        return v6;
      goto LABEL_12;
    }
  }
  else
  {
    v11 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v11 + 10) = 54;
    *((_DWORD *)v11 + 11) = a2;
    (**(void (***)(uint64_t))a1)(a1);
    v5 = *(unsigned int *)(a1 + 472);
    if ((v5 & 0x80000000) == 0)
      goto LABEL_3;
  }
  v6 = 0;
  if (*(_BYTE *)(v4 + 128))
    return v6;
LABEL_12:
  v12 = *(_QWORD *)(a1 + 40);
  v13 = (_BYTE *)(*(_QWORD *)v12)++;
  *v13 = -1;
  v14 = *(_QWORD *)(v12 + 8) - 1;
  *(_QWORD *)(v12 + 8) = v14;
  if (!v14 && !(*(unsigned int (**)(uint64_t))(v12 + 24))(a1))
  {
    v15 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v15 + 10) = 25;
    (*v15)(a1);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = (_BYTE *)(*(_QWORD *)v16)++;
  *v17 = -37;
  v18 = *(_QWORD *)(v16 + 8) - 1;
  *(_QWORD *)(v16 + 8) = v18;
  if (!v18 && !(*(unsigned int (**)(uint64_t))(v16 + 24))(a1))
  {
    v19 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v19 + 10) = 25;
    (*v19)(a1);
  }
  v20 = *(_DWORD *)(a1 + 472);
  v21 = 2 * v20 + 5;
  v22 = v20 + 4;
  if ((_DWORD)v6)
    v23 = v21;
  else
    v23 = v22;
  v24 = *(_QWORD *)(a1 + 40);
  v25 = (_BYTE *)(*(_QWORD *)v24)++;
  *v25 = HIBYTE(v23);
  v26 = *(_QWORD *)(v24 + 8) - 1;
  *(_QWORD *)(v24 + 8) = v26;
  if (!v26 && !(*(unsigned int (**)(uint64_t))(v24 + 24))(a1))
  {
    v27 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v27 + 10) = 25;
    (*v27)(a1);
  }
  v28 = *(_QWORD *)(a1 + 40);
  v29 = (_BYTE *)(*(_QWORD *)v28)++;
  *v29 = v23;
  v30 = *(_QWORD *)(v28 + 8) - 1;
  *(_QWORD *)(v28 + 8) = v30;
  if (!v30 && !(*(unsigned int (**)(uint64_t))(v28 + 24))(a1))
  {
    v31 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v31 + 10) = 25;
    (*v31)(a1);
  }
  v32 = *(_QWORD *)(a1 + 40);
  v33 = (_BYTE *)(*(_QWORD *)v32)++;
  *v33 = v2 + 16 * v6;
  v34 = *(_QWORD *)(v32 + 8) - 1;
  *(_QWORD *)(v32 + 8) = v34;
  if (!v34 && !(*(unsigned int (**)(uint64_t))(v32 + 24))(a1))
  {
    v35 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v35 + 10) = 25;
    (*v35)(a1);
  }
  if ((*(_DWORD *)(a1 + 472) & 0x80000000) == 0)
  {
    v36 = 0;
    if ((_DWORD)v6)
    {
      do
      {
        v38 = *(_WORD *)(v4 + 2 * *(int *)(*(_QWORD *)(a1 + 464) + 4 * v36));
        v39 = *(_QWORD *)(a1 + 40);
        v40 = (_BYTE *)(*(_QWORD *)v39)++;
        *v40 = HIBYTE(v38);
        v41 = *(_QWORD *)(v39 + 8) - 1;
        *(_QWORD *)(v39 + 8) = v41;
        if (!v41 && !(*(unsigned int (**)(uint64_t))(v39 + 24))(a1))
        {
          v42 = *(void (***)(uint64_t))a1;
          *((_DWORD *)v42 + 10) = 25;
          (*v42)(a1);
        }
        v43 = *(_QWORD *)(a1 + 40);
        v44 = (_BYTE *)(*(_QWORD *)v43)++;
        *v44 = v38;
        v45 = *(_QWORD *)(v43 + 8) - 1;
        *(_QWORD *)(v43 + 8) = v45;
        if (!v45 && !(*(unsigned int (**)(uint64_t))(v43 + 24))(a1))
        {
          v46 = *(void (***)(uint64_t))a1;
          *((_DWORD *)v46 + 10) = 25;
          (*v46)(a1);
        }
        v37 = v36++ < *(int *)(a1 + 472);
      }
      while (v37);
    }
    else
    {
      do
      {
        v47 = *(_WORD *)(v4 + 2 * *(int *)(*(_QWORD *)(a1 + 464) + 4 * v36));
        v48 = *(_QWORD *)(a1 + 40);
        v49 = (_BYTE *)(*(_QWORD *)v48)++;
        *v49 = v47;
        v50 = *(_QWORD *)(v48 + 8) - 1;
        *(_QWORD *)(v48 + 8) = v50;
        if (!v50 && !(*(unsigned int (**)(uint64_t))(v48 + 24))(a1))
        {
          v51 = *(void (***)(uint64_t))a1;
          *((_DWORD *)v51 + 10) = 25;
          (*v51)(a1);
        }
        v37 = v36++ < *(int *)(a1 + 472);
      }
      while (v37);
    }
  }
  *(_BYTE *)(v4 + 128) = 1;
  return v6;
}

uint64_t sub_10037DD10(uint64_t result, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;

  v3 = result;
  v4 = *(_QWORD *)(result + 40);
  v5 = (_BYTE *)(*(_QWORD *)v4)++;
  *v5 = -1;
  v6 = *(_QWORD *)(v4 + 8) - 1;
  *(_QWORD *)(v4 + 8) = v6;
  if (!v6)
  {
    result = (*(uint64_t (**)(uint64_t))(v4 + 24))(result);
    if (!(_DWORD)result)
    {
      v7 = *(_QWORD *)v3;
      *(_DWORD *)(v7 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v7)(v3);
    }
  }
  v8 = *(_QWORD *)(v3 + 40);
  v9 = (_BYTE *)(*(_QWORD *)v8)++;
  *v9 = a2;
  v10 = *(_QWORD *)(v8 + 8) - 1;
  *(_QWORD *)(v8 + 8) = v10;
  if (!v10)
  {
    result = (*(uint64_t (**)(uint64_t))(v8 + 24))(v3);
    if (!(_DWORD)result)
    {
      v11 = *(_QWORD *)v3;
      *(_DWORD *)(v11 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v11)(v3);
    }
  }
  v12 = 3 * *(_DWORD *)(v3 + 92) + 8;
  v13 = *(_QWORD *)(v3 + 40);
  v14 = (_BYTE *)(*(_QWORD *)v13)++;
  *v14 = BYTE1(v12);
  v15 = *(_QWORD *)(v13 + 8) - 1;
  *(_QWORD *)(v13 + 8) = v15;
  if (!v15)
  {
    result = (*(uint64_t (**)(uint64_t))(v13 + 24))(v3);
    if (!(_DWORD)result)
    {
      v16 = *(_QWORD *)v3;
      *(_DWORD *)(v16 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v16)(v3);
    }
  }
  v17 = *(_QWORD *)(v3 + 40);
  v18 = (_BYTE *)(*(_QWORD *)v17)++;
  *v18 = v12;
  v19 = *(_QWORD *)(v17 + 8) - 1;
  *(_QWORD *)(v17 + 8) = v19;
  if (v19 || (result = (*(uint64_t (**)(uint64_t))(v17 + 24))(v3), (_DWORD)result))
  {
    if (!*(_WORD *)(v3 + 86))
      goto LABEL_13;
  }
  else
  {
    v20 = *(_QWORD *)v3;
    *(_DWORD *)(v20 + 40) = 25;
    result = (*(uint64_t (**)(uint64_t))v20)(v3);
    if (!*(_WORD *)(v3 + 86))
    {
LABEL_13:
      if (*(_DWORD *)(v3 + 80) < 0x10000u)
        goto LABEL_17;
    }
  }
  *(_QWORD *)(*(_QWORD *)v3 + 40) = 0xFFFF0000002ALL;
  result = (**(uint64_t (***)(uint64_t))v3)(v3);
LABEL_17:
  v21 = *(_DWORD *)(v3 + 88);
  v22 = *(_QWORD *)(v3 + 40);
  v23 = (_BYTE *)(*(_QWORD *)v22)++;
  *v23 = v21;
  v24 = *(_QWORD *)(v22 + 8) - 1;
  *(_QWORD *)(v22 + 8) = v24;
  if (!v24)
  {
    result = (*(uint64_t (**)(uint64_t))(v22 + 24))(v3);
    if (!(_DWORD)result)
    {
      v25 = *(_QWORD *)v3;
      *(_DWORD *)(v25 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v25)(v3);
    }
  }
  v26 = *(_DWORD *)(v3 + 84);
  v27 = *(_QWORD *)(v3 + 40);
  v28 = (_BYTE *)(*(_QWORD *)v27)++;
  *v28 = BYTE1(v26);
  v29 = *(_QWORD *)(v27 + 8) - 1;
  *(_QWORD *)(v27 + 8) = v29;
  if (!v29)
  {
    result = (*(uint64_t (**)(uint64_t))(v27 + 24))(v3);
    if (!(_DWORD)result)
    {
      v30 = *(_QWORD *)v3;
      *(_DWORD *)(v30 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v30)(v3);
    }
  }
  v31 = *(_QWORD *)(v3 + 40);
  v32 = (_BYTE *)(*(_QWORD *)v31)++;
  *v32 = v26;
  v33 = *(_QWORD *)(v31 + 8) - 1;
  *(_QWORD *)(v31 + 8) = v33;
  if (!v33)
  {
    result = (*(uint64_t (**)(uint64_t))(v31 + 24))(v3);
    if (!(_DWORD)result)
    {
      v34 = *(_QWORD *)v3;
      *(_DWORD *)(v34 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v34)(v3);
    }
  }
  v35 = *(_DWORD *)(v3 + 80);
  v36 = *(_QWORD *)(v3 + 40);
  v37 = (_BYTE *)(*(_QWORD *)v36)++;
  *v37 = BYTE1(v35);
  v38 = *(_QWORD *)(v36 + 8) - 1;
  *(_QWORD *)(v36 + 8) = v38;
  if (!v38)
  {
    result = (*(uint64_t (**)(uint64_t))(v36 + 24))(v3);
    if (!(_DWORD)result)
    {
      v39 = *(_QWORD *)v3;
      *(_DWORD *)(v39 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v39)(v3);
    }
  }
  v40 = *(_QWORD *)(v3 + 40);
  v41 = (_BYTE *)(*(_QWORD *)v40)++;
  *v41 = v35;
  v42 = *(_QWORD *)(v40 + 8) - 1;
  *(_QWORD *)(v40 + 8) = v42;
  if (!v42)
  {
    result = (*(uint64_t (**)(uint64_t))(v40 + 24))(v3);
    if (!(_DWORD)result)
    {
      v43 = *(_QWORD *)v3;
      *(_DWORD *)(v43 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v43)(v3);
    }
  }
  v44 = *(_DWORD *)(v3 + 92);
  v45 = *(_QWORD *)(v3 + 40);
  v46 = (_BYTE *)(*(_QWORD *)v45)++;
  *v46 = v44;
  v47 = *(_QWORD *)(v45 + 8) - 1;
  *(_QWORD *)(v45 + 8) = v47;
  if (!v47)
  {
    result = (*(uint64_t (**)(uint64_t))(v45 + 24))(v3);
    if (!(_DWORD)result)
    {
      v48 = *(_QWORD *)v3;
      *(_DWORD *)(v48 + 40) = 25;
      result = (*(uint64_t (**)(uint64_t))v48)(v3);
    }
  }
  if (*(int *)(v3 + 92) >= 1)
  {
    v49 = 0;
    v50 = *(_QWORD *)(v3 + 104);
    do
    {
      v51 = *(_DWORD *)v50;
      v52 = *(_QWORD *)(v3 + 40);
      v53 = (_BYTE *)(*(_QWORD *)v52)++;
      *v53 = v51;
      v54 = *(_QWORD *)(v52 + 8) - 1;
      *(_QWORD *)(v52 + 8) = v54;
      if (!v54)
      {
        result = (*(uint64_t (**)(uint64_t))(v52 + 24))(v3);
        if (!(_DWORD)result)
        {
          v55 = *(_QWORD *)v3;
          *(_DWORD *)(v55 + 40) = 25;
          result = (*(uint64_t (**)(uint64_t))v55)(v3);
        }
      }
      v56 = *(_DWORD *)(v50 + 12) + 16 * *(_BYTE *)(v50 + 8);
      v57 = *(_QWORD *)(v3 + 40);
      v58 = (_BYTE *)(*(_QWORD *)v57)++;
      *v58 = v56;
      v59 = *(_QWORD *)(v57 + 8) - 1;
      *(_QWORD *)(v57 + 8) = v59;
      if (!v59)
      {
        result = (*(uint64_t (**)(uint64_t))(v57 + 24))(v3);
        if (!(_DWORD)result)
        {
          v60 = *(_QWORD *)v3;
          *(_DWORD *)(v60 + 40) = 25;
          result = (*(uint64_t (**)(uint64_t))v60)(v3);
        }
      }
      v61 = *(_DWORD *)(v50 + 16);
      v62 = *(_QWORD *)(v3 + 40);
      v63 = (_BYTE *)(*(_QWORD *)v62)++;
      *v63 = v61;
      v64 = *(_QWORD *)(v62 + 8) - 1;
      *(_QWORD *)(v62 + 8) = v64;
      if (!v64)
      {
        result = (*(uint64_t (**)(uint64_t))(v62 + 24))(v3);
        if (!(_DWORD)result)
        {
          v65 = *(_QWORD *)v3;
          *(_DWORD *)(v65 + 40) = 25;
          result = (*(uint64_t (**)(uint64_t))v65)(v3);
        }
      }
      ++v49;
      v50 += 96;
    }
    while (v49 < *(_DWORD *)(v3 + 92));
  }
  return result;
}

uint64_t *sub_10037E1B8(uint64_t *result, int a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t (**v9)(_QWORD);
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint8x16_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  char v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t j;
  char v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;

  v3 = result;
  v4 = &result[a2];
  v5 = v4 + 24;
  v6 = v4 + 20;
  if (a3)
    v7 = a2 + 16;
  else
    v7 = a2;
  if (a3)
    v6 = v5;
  v8 = *v6;
  if (*v6)
  {
    if (*(_BYTE *)(v8 + 273))
      return result;
  }
  else
  {
    v9 = (uint64_t (**)(_QWORD))*result;
    *((_DWORD *)v9 + 10) = 52;
    *((_DWORD *)v9 + 11) = v7;
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*result)(result);
    if (MEMORY[0x111])
      return result;
  }
  v10 = v3[5];
  v11 = (_BYTE *)(*(_QWORD *)v10)++;
  *v11 = -1;
  v12 = *(_QWORD *)(v10 + 8) - 1;
  *(_QWORD *)(v10 + 8) = v12;
  if (!v12)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v10 + 24))(v3);
    if (!(_DWORD)result)
    {
      v13 = *v3;
      *(_DWORD *)(v13 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v13)(v3);
    }
  }
  v14 = v3[5];
  v15 = (_BYTE *)(*(_QWORD *)v14)++;
  *v15 = -60;
  v16 = *(_QWORD *)(v14 + 8) - 1;
  *(_QWORD *)(v14 + 8) = v16;
  if (!v16)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v14 + 24))(v3);
    if (!(_DWORD)result)
    {
      v17 = *v3;
      *(_DWORD *)(v17 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v17)(v3);
    }
  }
  v18 = *(uint8x16_t *)(v8 + 1);
  v19 = vmovl_high_u8(v18);
  v20 = vmovl_u8(*(uint8x8_t *)v18.i8);
  v20.i32[0] = vaddvq_s32(vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v19.i8), (int32x4_t)vaddl_high_u16(v20, v19)));
  v21 = v20.u32[0];
  v22 = v20.i8[0] + 19;
  v23 = v3[5];
  v24 = (_BYTE *)(*(_QWORD *)v23)++;
  *v24 = (unsigned __int16)(v20.i16[0] + 19) >> 8;
  v25 = *(_QWORD *)(v23 + 8) - 1;
  *(_QWORD *)(v23 + 8) = v25;
  if (!v25)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v23 + 24))(v3);
    if (!(_DWORD)result)
    {
      v26 = *v3;
      *(_DWORD *)(v26 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v26)(v3);
    }
  }
  v27 = v3[5];
  v28 = (_BYTE *)(*(_QWORD *)v27)++;
  *v28 = v22;
  v29 = *(_QWORD *)(v27 + 8) - 1;
  *(_QWORD *)(v27 + 8) = v29;
  if (!v29)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v27 + 24))(v3);
    if (!(_DWORD)result)
    {
      v30 = *v3;
      *(_DWORD *)(v30 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v30)(v3);
    }
  }
  v31 = v3[5];
  v32 = (_BYTE *)(*(_QWORD *)v31)++;
  *v32 = v7;
  v33 = *(_QWORD *)(v31 + 8) - 1;
  *(_QWORD *)(v31 + 8) = v33;
  if (!v33)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v31 + 24))(v3);
    if (!(_DWORD)result)
    {
      v34 = *v3;
      *(_DWORD *)(v34 + 40) = 25;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v34)(v3);
    }
  }
  for (i = 0; i != 16; ++i)
  {
    v36 = *(_BYTE *)(v8 + 1 + i);
    v37 = v3[5];
    v38 = (_BYTE *)(*(_QWORD *)v37)++;
    *v38 = v36;
    v39 = *(_QWORD *)(v37 + 8) - 1;
    *(_QWORD *)(v37 + 8) = v39;
    if (!v39)
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v37 + 24))(v3);
      if (!(_DWORD)result)
      {
        v40 = *v3;
        *(_DWORD *)(v40 + 40) = 25;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v40)(v3);
      }
    }
  }
  if ((_DWORD)v21)
  {
    for (j = 0; j < v21; ++j)
    {
      v42 = *(_BYTE *)(v8 + 17 + j);
      v43 = v3[5];
      v44 = (_BYTE *)(*(_QWORD *)v43)++;
      *v44 = v42;
      v45 = *(_QWORD *)(v43 + 8) - 1;
      *(_QWORD *)(v43 + 8) = v45;
      if (!v45)
      {
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v43 + 24))(v3);
        if (!(_DWORD)result)
        {
          v46 = *v3;
          *(_DWORD *)(v46 + 40) = 25;
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v46)(v3);
        }
      }
    }
  }
  *(_BYTE *)(v8 + 273) = 1;
  return result;
}

double sub_10037E4D8(int32x2_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  double result;

  if (a1[6].i8[3] || a1[6].i8[7])
  {
    *(_QWORD *)(*(_QWORD *)a1 + 40) = 0xFFDC0000002ALL;
    (**(void (***)(int32x2_t *))a1)(a1);
  }
  v2 = a1[9].u32[0];
  v3 = a1[57].i32[1];
  v4 = v3 * a1[9].i32[1];
  if (v2 >= v4)
  {
    a1[10] = vmul_s32(a1[6], vdup_n_s32(v3));
    *(_QWORD *)&result = 0x100000001;
    a1[43] = (int32x2_t)0x100000001;
  }
  else if (v4 <= 2 * v2)
  {
    a1[10].i32[0] = sub_1003A7E94(a1[6].u32[0] * v3, 2);
    a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 2);
    *(_QWORD *)&result = 0x200000002;
    a1[43] = (int32x2_t)0x200000002;
  }
  else if (3 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003A7E94(a1[6].u32[0] * v3, 3);
    a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 3);
    *(_QWORD *)&result = 0x300000003;
    a1[43] = (int32x2_t)0x300000003;
  }
  else if (v4 <= 4 * v2)
  {
    a1[10].i32[0] = sub_1003A7E94(a1[6].u32[0] * v3, 4);
    a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 4);
    *(_QWORD *)&result = 0x400000004;
    a1[43] = (int32x2_t)0x400000004;
  }
  else if (5 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003A7E94(a1[6].u32[0] * v3, 5);
    a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 5);
    *(_QWORD *)&result = 0x500000005;
    a1[43] = (int32x2_t)0x500000005;
  }
  else if (6 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003A7E94(a1[6].u32[0] * v3, 6);
    a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 6);
    *(_QWORD *)&result = 0x600000006;
    a1[43] = (int32x2_t)0x600000006;
  }
  else if (7 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003A7E94(a1[6].u32[0] * v3, 7);
    a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 7);
    *(_QWORD *)&result = 0x700000007;
    a1[43] = (int32x2_t)0x700000007;
  }
  else if (v4 <= 8 * v2)
  {
    a1[10].i32[0] = sub_1003A7E94(a1[6].u32[0] * v3, 8);
    a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 8);
    *(_QWORD *)&result = 0x800000008;
    a1[43] = (int32x2_t)0x800000008;
  }
  else if (9 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003A7E94(a1[6].u32[0] * v3, 9);
    a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 9);
    *(_QWORD *)&result = 0x900000009;
    a1[43] = (int32x2_t)0x900000009;
  }
  else if (10 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003A7E94(a1[6].u32[0] * v3, 10);
    a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 10);
    *(_QWORD *)&result = 0xA0000000ALL;
    a1[43] = (int32x2_t)0xA0000000ALL;
  }
  else if (11 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003A7E94(a1[6].u32[0] * v3, 11);
    a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 11);
    *(_QWORD *)&result = 0xB0000000BLL;
    a1[43] = (int32x2_t)0xB0000000BLL;
  }
  else if (12 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003A7E94(a1[6].u32[0] * v3, 12);
    a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 12);
    *(_QWORD *)&result = 0xC0000000CLL;
    a1[43] = (int32x2_t)0xC0000000CLL;
  }
  else if (13 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003A7E94(a1[6].u32[0] * v3, 13);
    a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 13);
    *(_QWORD *)&result = 0xD0000000DLL;
    a1[43] = (int32x2_t)0xD0000000DLL;
  }
  else if (14 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003A7E94(a1[6].u32[0] * v3, 14);
    a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 14);
    *(_QWORD *)&result = 0xE0000000ELL;
    a1[43] = (int32x2_t)0xE0000000ELL;
  }
  else
  {
    v5 = a1[6].u32[0] * v3;
    if (15 * v2 >= v4)
    {
      a1[10].i32[0] = sub_1003A7E94(v5, 15);
      a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 15);
      *(_QWORD *)&result = 0xF0000000FLL;
      a1[43] = (int32x2_t)0xF0000000FLL;
    }
    else
    {
      a1[10].i32[0] = sub_1003A7E94(v5, 16);
      a1[10].i32[1] = sub_1003A7E94(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 16);
      *(_QWORD *)&result = 0x1000000010;
      a1[43] = (int32x2_t)0x1000000010;
    }
  }
  return result;
}

void sub_10037E9C0(int32x2_t *a1, int a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int32x2_t v7;
  int *v8;
  int v9;
  unsigned int v10;
  int32x2_t v11;
  __int32 v12;
  int v13;
  int32x2_t v14;
  int v15;
  int32x2_t v16;
  int v17;
  int *v18;
  int v19;
  int32x2_t v20;
  int v21;
  int v22;
  __int32 v23;
  int32x2_t v24;
  int v25;
  int v26;
  int v27;
  __int32 v28;
  int v29;
  int v30;
  int v31;
  int v32;
  __int32 v33;
  int v34;
  int v35;
  unsigned int *v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int32x2_t v42;
  __int32 v43;
  int32x2_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  int32x2_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  BOOL v56;
  char v57;
  int32x2_t v58;
  int32x2_t v59;
  int *v60;
  int v61;
  int32x2_t v62;
  int *v63;
  int v64;
  int32x2_t v65;
  int32x2_t v66;
  uint64_t v67;
  signed int v68;
  int32x2_t v69;
  int32x2_t v70;
  int32x2_t v71;
  uint64_t v72;
  uint64_t v73;
  int32x2_t v74;
  uint64_t v75;
  _DWORD *v76;
  int32x2_t v77;
  uint64_t v78;
  int32x2_t v79;
  uint64_t v80;
  int32x2_t v81;
  int32x2_t v82;
  __int32 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int32 *v88;
  __int32 v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  _BYTE *v95;
  int v96;
  uint64_t v97;
  int v98;
  _DWORD __b[640];
  _BYTE v100[10];

  v4 = (**(uint64_t (***)(void))&a1[1])();
  a1[60] = (int32x2_t)v4;
  *(_QWORD *)v4 = sub_10037F57C;
  *(_QWORD *)(v4 + 8) = sub_10037F770;
  *(_QWORD *)(v4 + 16) = sub_10037F7AC;
  *(_BYTE *)(v4 + 25) = 0;
  if (a2)
  {
    v5 = a1[43].i32[0];
    if (v5 != a1[43].i32[1])
    {
      v6 = *a1;
      *(_DWORD *)(*(_QWORD *)&v6 + 40) = 7;
      *(_DWORD *)(*(_QWORD *)&v6 + 44) = v5;
      *(_DWORD *)(*(_QWORD *)a1 + 48) = a1[43].i32[1];
      (**(void (***)(int32x2_t *))a1)(a1);
      v5 = a1[43].i32[0];
    }
    a1[57].i32[1] = v5;
    if ((v5 - 17) <= 0xFFFFFFEF)
      goto LABEL_5;
  }
  else
  {
    sub_10037E4D8(a1);
    v5 = a1[57].i32[1];
    if ((v5 - 17) <= 0xFFFFFFEF)
    {
LABEL_5:
      v7 = *a1;
      *(_DWORD *)(*(_QWORD *)&v7 + 40) = 7;
      *(_DWORD *)(*(_QWORD *)&v7 + 44) = v5;
      *(_DWORD *)(*(_QWORD *)a1 + 48) = a1[57].i32[1];
      (**(void (***)(int32x2_t *))a1)(a1);
      v5 = a1[57].i32[1];
    }
  }
  if ((v5 - 2) > 5)
    v8 = dword_1003C68A0;
  else
    v8 = (int *)*(&off_100454C58 + v5 - 2);
  a1[58] = (int32x2_t)v8;
  if (v5 >= 8)
    v9 = 63;
  else
    v9 = v5 * v5 - 1;
  a1[59].i32[0] = v9;
  v10 = a1[10].u32[1];
  if (v10 && a1[10].i32[0] && a1[11].i32[1] > 0)
  {
    if (v10 > 0xFFDC)
    {
LABEL_19:
      *(_QWORD *)(*(_QWORD *)a1 + 40) = 0xFFDC0000002ALL;
      (**(void (***)(int32x2_t *))a1)(a1);
      v12 = a1[11].i32[0];
      if ((v12 - 13) > 0xFFFFFFFA)
        goto LABEL_20;
      goto LABEL_24;
    }
  }
  else
  {
    v11 = *a1;
    *(_DWORD *)(*(_QWORD *)&v11 + 40) = 33;
    (**(void (***)(int32x2_t *))&v11)(a1);
    if (a1[10].i32[1] > 0xFFDCu)
      goto LABEL_19;
  }
  if (a1[10].i32[0] >= 0xFFDDu)
    goto LABEL_19;
  v12 = a1[11].i32[0];
  if ((v12 - 13) > 0xFFFFFFFA)
  {
LABEL_20:
    v13 = a1[11].i32[1];
    if (v13 >= 11)
      goto LABEL_21;
LABEL_25:
    a1[42] = (int32x2_t)0x100000001;
    if (v13 < 1)
      goto LABEL_22;
    goto LABEL_26;
  }
LABEL_24:
  v16 = *a1;
  *(_DWORD *)(*(_QWORD *)&v16 + 40) = 16;
  *(_DWORD *)(*(_QWORD *)&v16 + 44) = v12;
  (**(void (***)(int32x2_t *))a1)(a1);
  v13 = a1[11].i32[1];
  if (v13 < 11)
    goto LABEL_25;
LABEL_21:
  v14 = *a1;
  *(_DWORD *)(*(_QWORD *)&v14 + 40) = 27;
  *(_DWORD *)(*(_QWORD *)&v14 + 44) = v13;
  *(_DWORD *)(*(_QWORD *)a1 + 48) = 10;
  (**(void (***)(int32x2_t *))a1)(a1);
  v13 = a1[11].i32[1];
  a1[42] = (int32x2_t)0x100000001;
  if (v13 < 1)
  {
LABEL_22:
    v15 = 1;
    goto LABEL_59;
  }
LABEL_26:
  v17 = 0;
  v18 = (int *)(*(_QWORD *)&a1[13] + 12);
  v15 = 1;
  v19 = 1;
  do
  {
    v21 = *(v18 - 1);
    if ((v21 - 5) < 0xFFFFFFFC || (v22 = *v18, (*v18 - 5) <= 0xFFFFFFFB))
    {
      v20 = *a1;
      *(_DWORD *)(*(_QWORD *)&v20 + 40) = 19;
      (**(void (***)(int32x2_t *))&v20)(a1);
      v19 = a1[42].i32[0];
      v21 = *(v18 - 1);
      v22 = *v18;
      v15 = a1[42].i32[1];
      v13 = a1[11].i32[1];
    }
    if (v19 <= v21)
      v19 = v21;
    a1[42].i32[0] = v19;
    if (v15 <= v22)
      v15 = v22;
    a1[42].i32[1] = v15;
    ++v17;
    v18 += 24;
  }
  while (v17 < v13);
  if (v13 >= 1)
  {
    v23 = 0;
    v24 = a1[13];
    do
    {
      *(_DWORD *)(*(_QWORD *)&v24 + 4) = v23;
      v25 = a1[43].i32[0];
      if (a1[36].i8[4])
        v26 = 8;
      else
        v26 = 4;
      if (v25 <= v26)
      {
        v28 = a1[42].i32[0];
        v29 = *(_DWORD *)(*(_QWORD *)&v24 + 8);
        v27 = a1[43].i32[0];
        if (!(v28 % (2 * v29)))
        {
          v30 = 2;
          do
          {
            v27 = v30 * v25;
            if (v30 * v25 > v26)
              break;
            v30 *= 2;
          }
          while (!(v28 % (v30 * v29)));
        }
      }
      else
      {
        v27 = a1[43].i32[0];
      }
      *(_DWORD *)(*(_QWORD *)&v24 + 36) = v27;
      v31 = a1[43].i32[1];
      if (v31 <= v26)
      {
        v33 = a1[42].i32[1];
        v34 = *(_DWORD *)(*(_QWORD *)&v24 + 12);
        v32 = a1[43].i32[1];
        if (!(v33 % (2 * v34)))
        {
          v35 = 2;
          do
          {
            v32 = v35 * v31;
            if (v35 * v31 > v26)
              break;
            v35 *= 2;
          }
          while (!(v33 % (v35 * v34)));
        }
      }
      else
      {
        v32 = a1[43].i32[1];
      }
      *(_DWORD *)(*(_QWORD *)&v24 + 40) = v32;
      if (v27 > 2 * v32)
      {
        *(_DWORD *)(*(_QWORD *)&v24 + 36) = 2 * v32;
      }
      else if (v32 > 2 * v27)
      {
        *(_DWORD *)(*(_QWORD *)&v24 + 40) = 2 * v27;
      }
      *(_DWORD *)(*(_QWORD *)&v24 + 28) = sub_1003A7E94(*(int *)(*(_QWORD *)&v24 + 8) * (unint64_t)a1[10].u32[0], a1[57].i32[1] * (uint64_t)a1[42].i32[0]);
      *(_DWORD *)(*(_QWORD *)&v24 + 32) = sub_1003A7E94(*(int *)(*(_QWORD *)&v24 + 12) * (unint64_t)a1[10].u32[1], a1[57].i32[1] * (uint64_t)a1[42].i32[1]);
      *(_DWORD *)(*(_QWORD *)&v24 + 44) = sub_1003A7E94(*(int *)(*(_QWORD *)&v24 + 36)* (uint64_t)*(int *)(*(_QWORD *)&v24 + 8)* a1[10].u32[0], a1[57].i32[1] * (uint64_t)a1[42].i32[0]);
      *(_DWORD *)(*(_QWORD *)&v24 + 48) = sub_1003A7E94(*(int *)(*(_QWORD *)&v24 + 40)* (uint64_t)*(int *)(*(_QWORD *)&v24 + 12)* a1[10].u32[1], a1[57].i32[1] * (uint64_t)a1[42].i32[1]);
      *(_BYTE *)(*(_QWORD *)&v24 + 52) = 0;
      ++v23;
      *(_QWORD *)&v24 += 96;
    }
    while (v23 < a1[11].i32[1]);
    v15 = a1[42].i32[1];
  }
LABEL_59:
  a1[44].i32[0] = sub_1003A7E94(a1[10].u32[1], a1[57].i32[1] * (uint64_t)v15);
  v36 = (unsigned int *)a1[35];
  if (!v36)
  {
    a1[41].i8[4] = 0;
    v37 = 1;
LABEL_165:
    a1[34].i32[0] = v37;
    goto LABEL_166;
  }
  if (a1[34].i32[0] <= 0)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 40) = 20;
    (**(void (***)(int32x2_t *))a1)(a1);
    v36 = (unsigned int *)a1[35];
    if (v36[5])
      goto LABEL_71;
  }
  else if (v36[5])
  {
    goto LABEL_71;
  }
  if (v36[6] != 63)
  {
LABEL_71:
    v39 = 1;
    a1[41].i8[4] = 1;
    v38 = a1[11].u32[1];
    if ((int)v38 >= 1)
    {
      memset(__b, 255, v38 << 8);
      v39 = 1;
    }
    goto LABEL_73;
  }
  a1[41].i8[4] = 0;
  LODWORD(v38) = a1[11].i32[1];
  if ((int)v38 >= 1)
    bzero(v100, a1[11].u32[1]);
  v39 = 0;
LABEL_73:
  if (a1[34].i32[0] < 1)
    goto LABEL_142;
  v93 = a2;
  v94 = v4;
  v40 = 1;
  do
  {
    v41 = *v36;
    if ((v41 - 5) > 0xFFFFFFFB
      || (v42 = *a1,
          *(_DWORD *)(*(_QWORD *)&v42 + 40) = 27,
          *(_DWORD *)(*(_QWORD *)&v42 + 44) = v41,
          *(_DWORD *)(*(_QWORD *)a1 + 48) = 4,
          (**(void (***)(int32x2_t *))a1)(a1),
          (int)v41 >= 1))
    {
      v43 = v36[1];
      if (v43 < 0 || v43 >= a1[11].i32[1])
      {
        v44 = *a1;
        *(_DWORD *)(*(_QWORD *)&v44 + 40) = 20;
        *(_DWORD *)(*(_QWORD *)&v44 + 44) = v40;
        (**(void (***)(int32x2_t *))a1)(a1);
      }
      if ((_DWORD)v41 == 1)
      {
LABEL_83:
        v45 = 1;
        v46 = (int)v36[5];
        v98 = v36[6];
        v48 = v36[7];
        v47 = v36[8];
        if (!a1[41].i8[4])
          goto LABEL_133;
        goto LABEL_84;
      }
      v67 = 0;
      while (1)
      {
        v68 = v36[v67 + 2];
        if (v68 < 0 || v68 >= a1[11].i32[1])
        {
          v69 = *a1;
          *(_DWORD *)(*(_QWORD *)&v69 + 40) = 20;
          *(_DWORD *)(*(_QWORD *)&v69 + 44) = v40;
          (**(void (***)(int32x2_t *))a1)(a1);
          if (v68 <= (int)v36[v67 + 1])
          {
LABEL_131:
            v70 = *a1;
            *(_DWORD *)(*(_QWORD *)&v70 + 40) = 20;
            *(_DWORD *)(*(_QWORD *)&v70 + 44) = v40;
            (**(void (***)(int32x2_t *))a1)(a1);
          }
        }
        else if (v68 <= (int)v36[v67 + 1])
        {
          goto LABEL_131;
        }
        if (v41 - 1 == ++v67)
          goto LABEL_83;
      }
    }
    v45 = 0;
    v46 = (int)v36[5];
    v98 = v36[6];
    v48 = v36[7];
    v47 = v36[8];
    if (!a1[41].i8[4])
    {
LABEL_133:
      if (v48 | v46 || v98 != 63 || v47)
      {
        v71 = *a1;
        *(_DWORD *)(*(_QWORD *)&v71 + 40) = 18;
        *(_DWORD *)(*(_QWORD *)&v71 + 44) = v40;
        (**(void (***)(int32x2_t *))a1)(a1);
      }
      if (v45)
      {
        v72 = 0;
        do
        {
          v73 = (int)v36[v72 + 1];
          if (v100[v73])
          {
            v74 = *a1;
            *(_DWORD *)(*(_QWORD *)&v74 + 40) = 20;
            *(_DWORD *)(*(_QWORD *)&v74 + 44) = v40;
            (**(void (***)(int32x2_t *))a1)(a1);
          }
          v100[v73] = 1;
          ++v72;
        }
        while (v41 != v72);
      }
      goto LABEL_75;
    }
LABEL_84:
    if (v46 > 0x3F || v98 < (int)v46 || v98 > 63 || v48 > 0xA || v47 < 0 || v47 >= 11)
    {
      v66 = *a1;
      *(_DWORD *)(*(_QWORD *)&v66 + 40) = 18;
      *(_DWORD *)(*(_QWORD *)&v66 + 44) = v40;
      (**(void (***)(int32x2_t *))a1)(a1);
      v97 = v41;
      if ((_DWORD)v46)
      {
LABEL_91:
        if ((_DWORD)v41 == 1)
          goto LABEL_93;
LABEL_92:
        v49 = *a1;
        *(_DWORD *)(*(_QWORD *)&v49 + 40) = 18;
        *(_DWORD *)(*(_QWORD *)&v49 + 44) = v40;
        (**(void (***)(int32x2_t *))a1)(a1);
        goto LABEL_93;
      }
    }
    else
    {
      v97 = v41;
      if ((_DWORD)v46)
        goto LABEL_91;
    }
    if (v98)
      goto LABEL_92;
LABEL_93:
    if (v45)
    {
      v50 = 0;
      v96 = v98 - v46 + 1;
      v95 = &__b[v46];
      do
      {
        v51 = v36;
        v52 = (int)v36[v50 + 1];
        if ((_DWORD)v46 && (__b[64 * v52] & 0x80000000) != 0)
        {
          v59 = *a1;
          *(_DWORD *)(*(_QWORD *)&v59 + 40) = 18;
          *(_DWORD *)(*(_QWORD *)&v59 + 44) = v40;
          (**(void (***)(int32x2_t *))a1)(a1);
          v53 = v46;
          if ((int)v46 <= v98)
          {
LABEL_99:
            if (v48)
            {
              v54 = (int *)&v95[256 * v52];
              v55 = v96;
              do
              {
                v56 = v48 != *v54 || *v54 < 0;
                v57 = !v56;
                if (((v47 == v48 - 1) & v57) == 0)
                {
                  v58 = *a1;
                  *(_DWORD *)(*(_QWORD *)&v58 + 40) = 18;
                  *(_DWORD *)(*(_QWORD *)&v58 + 44) = v40;
                  (**(void (***)(int32x2_t *))a1)(a1);
                }
                *v54++ = v47;
                --v55;
              }
              while (v55);
            }
            else if (v47 == -1)
            {
              v60 = (int *)&v95[256 * v52];
              v61 = v96;
              do
              {
                if (*v60 >= 1)
                {
                  v62 = *a1;
                  *(_DWORD *)(*(_QWORD *)&v62 + 40) = 18;
                  *(_DWORD *)(*(_QWORD *)&v62 + 44) = v40;
                  (**(void (***)(int32x2_t *))a1)(a1);
                }
                *v60++ = v47;
                --v61;
              }
              while (v61);
            }
            else
            {
              v63 = (int *)&v95[256 * v52];
              v64 = v96;
              do
              {
                if ((*v63 & 0x80000000) == 0)
                {
                  v65 = *a1;
                  *(_DWORD *)(*(_QWORD *)&v65 + 40) = 18;
                  *(_DWORD *)(*(_QWORD *)&v65 + 44) = v40;
                  (**(void (***)(int32x2_t *))a1)(a1);
                }
                *v63++ = v47;
                --v64;
              }
              while (v64);
            }
          }
        }
        else
        {
          v53 = v46;
          if ((int)v46 <= v98)
            goto LABEL_99;
        }
        ++v50;
        v46 = v53;
        v36 = v51;
      }
      while (v50 != v97);
    }
LABEL_75:
    v36 += 9;
    v56 = v40++ < a1[34].i32[0];
  }
  while (v56);
  v39 = a1[41].u8[4];
  LODWORD(v38) = a1[11].i32[1];
  v4 = v94;
  a2 = v93;
LABEL_142:
  if (v39)
  {
    if ((int)v38 >= 1)
    {
      v75 = 0;
      v76 = __b;
      do
      {
        if ((*v76 & 0x80000000) != 0)
        {
          v77 = *a1;
          *(_DWORD *)(*(_QWORD *)&v77 + 40) = 46;
          (**(void (***)(int32x2_t *))&v77)(a1);
          LODWORD(v38) = a1[11].i32[1];
        }
        v76 += 64;
        ++v75;
      }
      while (v75 < (int)v38);
    }
  }
  else if ((int)v38 >= 1)
  {
    v78 = 0;
    do
    {
      if (!v100[v78])
      {
        v79 = *a1;
        *(_DWORD *)(*(_QWORD *)&v79 + 40) = 46;
        (**(void (***)(int32x2_t *))&v79)(a1);
        LODWORD(v38) = a1[11].i32[1];
      }
      ++v78;
    }
    while (v78 < (int)v38);
  }
  if (a1[57].i32[1] <= 7)
  {
    if (a1[34].i32[0] >= 1)
    {
      v80 = 0;
      v37 = 0;
      v81 = a1[35];
      v82 = v81;
      while (1)
      {
        if (v80 == v37)
        {
          v83 = a1[59].i32[0];
          if (*(_DWORD *)(*(_QWORD *)&v81 + 36 * v37 + 20) <= v83)
            goto LABEL_162;
        }
        else
        {
          v84 = *(_QWORD *)&v81 + 36 * v37;
          v85 = *(_OWORD *)*(_QWORD *)&v82;
          v86 = *(_OWORD *)(*(_QWORD *)&v82 + 16);
          *(_DWORD *)(v84 + 32) = *(_DWORD *)(*(_QWORD *)&v82 + 32);
          *(_OWORD *)v84 = v85;
          *(_OWORD *)(v84 + 16) = v86;
          v83 = a1[59].i32[0];
          if (*(_DWORD *)(*(_QWORD *)&v81 + 36 * v37 + 20) <= v83)
          {
LABEL_162:
            v87 = *(_QWORD *)&v81 + 36 * v37;
            v89 = *(_DWORD *)(v87 + 24);
            v88 = (__int32 *)(v87 + 24);
            if (v89 > v83)
              *v88 = v83;
            ++v37;
          }
        }
        ++v80;
        *(_QWORD *)&v82 += 36;
        if (v80 >= a1[34].i32[0])
          goto LABEL_165;
      }
    }
    v37 = 0;
    goto LABEL_165;
  }
LABEL_166:
  v90 = a1[36].u8[2];
  if (a1[36].i8[2])
  {
    a1[36].i8[1] = 0;
    goto LABEL_169;
  }
  if (a1[36].i8[1] || !a1[41].i8[4] && (a1[57].i32[1] - 2) >= 6)
  {
LABEL_169:
    if (a2)
    {
      if (v90)
        goto LABEL_171;
      *(_DWORD *)(v4 + 44) = 0;
      *(_QWORD *)(v4 + 32) = 2;
    }
    else
    {
      *(_DWORD *)(v4 + 44) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      if (v90)
        goto LABEL_174;
    }
    v92 = a1[34].i32[0];
    goto LABEL_177;
  }
  a1[36].i8[2] = 1;
  if (!a2)
  {
    v91 = 0;
    goto LABEL_172;
  }
LABEL_171:
  v91 = 1;
LABEL_172:
  *(_DWORD *)(v4 + 44) = 0;
  *(_DWORD *)(v4 + 32) = v91;
  *(_DWORD *)(v4 + 36) = 0;
LABEL_174:
  v92 = 2 * a1[34].i32[0];
LABEL_177:
  *(_DWORD *)(v4 + 40) = v92;
}

uint64_t sub_10037F57C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 480);
  v3 = *(_DWORD *)(v2 + 32);
  if (v3 == 2)
    goto LABEL_16;
  if (v3 == 1)
  {
    sub_10037F85C(a1);
    sub_10037FA8C(a1);
    if (*(_DWORD *)(a1 + 444) || !*(_DWORD *)(a1 + 452))
    {
      (**(void (***)(uint64_t, uint64_t))(a1 + 544))(a1, 1);
      result = (**(uint64_t (***)(uint64_t, uint64_t))(a1 + 504))(a1, 2);
      goto LABEL_21;
    }
    v7 = *(_DWORD *)(v2 + 36) + 1;
    *(_DWORD *)(v2 + 32) = 2;
    *(_DWORD *)(v2 + 36) = v7;
LABEL_16:
    if (!*(_BYTE *)(a1 + 290))
    {
      sub_10037F85C(a1);
      sub_10037FA8C(a1);
    }
    (**(void (***)(uint64_t, _QWORD))(a1 + 544))(a1, 0);
    (**(void (***)(uint64_t, uint64_t))(a1 + 504))(a1, 2);
    if (!*(_DWORD *)(v2 + 44))
      (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 512) + 8))(a1);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 512) + 16))(a1);
    goto LABEL_21;
  }
  if (v3)
  {
    v6 = *(_QWORD *)a1;
    *(_DWORD *)(v6 + 40) = 49;
    result = (*(uint64_t (**)(uint64_t))v6)(a1);
    goto LABEL_22;
  }
  sub_10037F85C(a1);
  sub_10037FA8C(a1);
  if (!*(_BYTE *)(a1 + 288))
  {
    (**(void (***)(uint64_t))(a1 + 520))(a1);
    (**(void (***)(uint64_t))(a1 + 528))(a1);
    (**(void (***)(uint64_t, _QWORD))(a1 + 496))(a1, 0);
  }
  (**(void (***)(uint64_t))(a1 + 536))(a1);
  (**(void (***)(uint64_t, _QWORD))(a1 + 544))(a1, *(unsigned __int8 *)(a1 + 290));
  if (*(int *)(v2 + 40) <= 1)
    v4 = 0;
  else
    v4 = 3;
  (**(void (***)(uint64_t, uint64_t))(a1 + 504))(a1, v4);
  result = (**(uint64_t (***)(uint64_t, _QWORD))(a1 + 488))(a1, 0);
  if (!*(_BYTE *)(a1 + 290))
  {
    *(_BYTE *)(v2 + 24) = 1;
    goto LABEL_22;
  }
LABEL_21:
  *(_BYTE *)(v2 + 24) = 0;
LABEL_22:
  v8 = *(_DWORD *)(v2 + 36);
  v9 = *(_DWORD *)(v2 + 40);
  *(_BYTE *)(v2 + 25) = v8 == v9 - 1;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    *(_DWORD *)(v10 + 24) = v8;
    *(_DWORD *)(v10 + 28) = v9;
  }
  return result;
}

uint64_t sub_10037F770(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 480) + 24) = 0;
  (*(void (**)(void))(*(_QWORD *)(a1 + 512) + 8))();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 512) + 16))(a1);
}

uint64_t sub_10037F7AC(uint64_t a1)
{
  _DWORD *v2;
  uint64_t result;
  int v4;
  int v5;

  v2 = *(_DWORD **)(a1 + 480);
  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 544) + 16))();
  v4 = v2[8];
  if (v4 == 2)
  {
    if (*(_BYTE *)(a1 + 290))
      v2[8] = 1;
LABEL_8:
    ++v2[11];
    ++v2[9];
    return result;
  }
  if (v4 != 1)
  {
    if (v4 || (v2[8] = 2, *(_BYTE *)(a1 + 290)))
    {
      ++v2[9];
      return result;
    }
    goto LABEL_8;
  }
  v5 = v2[9] + 1;
  v2[8] = 2;
  v2[9] = v5;
  return result;
}

uint64_t sub_10037F85C(uint64_t result)
{
  uint64_t v1;
  int64x2_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t *v13;
  int64x2_t v14;
  int32x4_t v15;
  uint64_t v16;
  int64x2_t *v17;
  int32x4_t v18;
  int32x4_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  uint64_t v33;
  int64x2_t v34;
  int64x2_t v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38;

  v1 = result;
  v2 = (int64x2_t *)(result + 360);
  v3 = *(_QWORD *)(result + 280);
  if (v3)
  {
    v4 = *(_DWORD *)(*(_QWORD *)(result + 480) + 44);
    v5 = *(unsigned int *)(v3 + 36 * v4);
    *(_DWORD *)(result + 356) = v5;
    if ((int)v5 < 1)
      goto LABEL_15;
    v6 = *(_QWORD *)(result + 104);
    if (v5 >= 8)
    {
      v7 = v5 & 0x7FFFFFF8;
      v13 = (int32x2_t *)(v3 + 36 * v4 + 20);
      v14 = vdupq_n_s64(v6);
      v15.i64[0] = 0x6000000060;
      v15.i64[1] = 0x6000000060;
      v16 = v5 & 0xFFFFFFF8;
      v17 = (int64x2_t *)(result + 360);
      do
      {
        v18 = *(int32x4_t *)v13[-2].i8;
        v19 = *(int32x4_t *)v13->i8;
        v20 = vmlal_s32(v14, *(int32x2_t *)v18.i8, (int32x2_t)0x6000000060);
        v21 = vmlal_high_s32(v14, v18, v15);
        v22 = vmlal_s32(v14, *v13, (int32x2_t)0x6000000060);
        *v17 = v20;
        v17[1] = v21;
        v17[2] = v22;
        v17[3] = vmlal_high_s32(v14, v19, v15);
        v13 += 4;
        v17 += 4;
        v16 -= 8;
      }
      while (v16);
      if (v7 == v5)
      {
LABEL_15:
        if (*(_BYTE *)(result + 332))
        {
          v27 = v3 + 36 * v4;
          *(_QWORD *)(result + 444) = *(_QWORD *)(v27 + 20);
          v28 = *(_DWORD *)(v27 + 28);
          LODWORD(v27) = *(_DWORD *)(v27 + 32);
          *(_DWORD *)(result + 452) = v28;
          *(_DWORD *)(result + 456) = v27;
          return result;
        }
        goto LABEL_22;
      }
    }
    else
    {
      v7 = 0;
    }
    v23 = (int *)(36 * v4 + 4 * v7 + v3 + 4);
    v24 = (_QWORD *)(result + 8 * v7 + 360);
    v25 = v5 - v7;
    do
    {
      v26 = *v23++;
      *v24++ = v6 + 96 * v26;
      --v25;
    }
    while (v25);
    goto LABEL_15;
  }
  v8 = *(_DWORD *)(result + 92);
  if (v8 >= 5)
  {
    v9 = *(_QWORD *)result;
    *(_DWORD *)(v9 + 40) = 27;
    *(_DWORD *)(v9 + 44) = v8;
    *(_DWORD *)(*(_QWORD *)result + 48) = 4;
    result = (**(uint64_t (***)(uint64_t))result)(result);
    v8 = *(_DWORD *)(v1 + 92);
  }
  *(_DWORD *)(v1 + 356) = v8;
  if (v8 < 1)
    goto LABEL_22;
  v10 = *(_QWORD *)(v1 + 104);
  v11 = v8;
  if (v8 >= 4)
  {
    v29 = (int64x2_t)xmmword_1003BA9E0;
    v12 = v8 & 0xFFFFFFFC;
    v30 = vdupq_n_s64(v10);
    v31 = vdupq_n_s64(0xC0uLL);
    v32 = vdupq_n_s64(4uLL);
    v33 = v11 & 0xFFFFFFFC;
    do
    {
      v34.i64[0] = 96 * v29.i64[0];
      v34.i64[1] = 96 * v29.i64[1];
      v35 = vaddq_s64(v30, v34);
      *v2 = v35;
      v2[1] = vaddq_s64(v35, v31);
      v2 += 2;
      v29 = vaddq_s64(v29, v32);
      v33 -= 4;
    }
    while (v33);
    if (v12 == v11)
      goto LABEL_22;
  }
  else
  {
    v12 = 0;
  }
  v36 = v10 + 96 * v12;
  v37 = (unint64_t *)(v1 + 8 * v12 + 360);
  v38 = v11 - v12;
  do
  {
    *v37++ = v36;
    v36 += 96;
    --v38;
  }
  while (v38);
LABEL_22:
  *(_DWORD *)(v1 + 444) = 0;
  *(_QWORD *)(v1 + 448) = (*(_DWORD *)(v1 + 460) * *(_DWORD *)(v1 + 460) - 1);
  *(_DWORD *)(v1 + 456) = 0;
  return result;
}

uint64_t sub_10037FA8C(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;

  v1 = result;
  v2 = *(_DWORD *)(result + 356);
  if (v2 == 1)
  {
    v3 = *(_QWORD *)(result + 360);
    v4 = *(_DWORD *)(v3 + 32);
    *(_DWORD *)(result + 392) = *(_DWORD *)(v3 + 28);
    *(_DWORD *)(result + 396) = v4;
    v5 = *(_DWORD *)(v3 + 36);
    *(_DWORD *)(v3 + 64) = 1;
    *(_DWORD *)(v3 + 68) = v5;
    v6 = *(_DWORD *)(v3 + 12);
    v7 = v4 % v6;
    *(_QWORD *)(v3 + 56) = 0x100000001;
    if (!v7)
      v7 = v6;
    *(_DWORD *)(v3 + 72) = 1;
    *(_DWORD *)(v3 + 76) = v7;
    *(_QWORD *)(result + 400) = 1;
  }
  else
  {
    if ((v2 - 5) <= 0xFFFFFFFB)
    {
      v8 = *(_QWORD *)result;
      *(_DWORD *)(v8 + 40) = 27;
      *(_DWORD *)(v8 + 44) = v2;
      *(_DWORD *)(*(_QWORD *)result + 48) = 4;
      (**(void (***)(uint64_t))result)(result);
    }
    *(_DWORD *)(v1 + 392) = sub_1003A7E94(*(unsigned int *)(v1 + 80), *(int *)(v1 + 460) * (uint64_t)*(int *)(v1 + 336));
    result = sub_1003A7E94(*(unsigned int *)(v1 + 84), *(int *)(v1 + 460) * (uint64_t)*(int *)(v1 + 340));
    *(_QWORD *)(v1 + 396) = result;
    if (*(int *)(v1 + 356) >= 1)
    {
      v9 = 0;
      do
      {
        v10 = *(_DWORD **)(v1 + 8 * v9 + 360);
        v11 = v10[2];
        v12 = v10[3];
        v13 = v12 * v11;
        v14 = v10[8];
        v15 = v10[9] * v11;
        v10[16] = v12 * v11;
        v10[17] = v15;
        v16 = v10[7] % v11;
        v10[14] = v11;
        v10[15] = v12;
        if (v16)
          v11 = v16;
        if (v14 % v12)
          v12 = v14 % v12;
        v10[18] = v11;
        v10[19] = v12;
        if (*(_DWORD *)(v1 + 400) + v13 >= 11)
        {
          v17 = *(_QWORD *)v1;
          *(_DWORD *)(v17 + 40) = 14;
          result = (*(uint64_t (**)(uint64_t))v17)(v1);
        }
        if (v13 >= 1)
        {
          v18 = v13 + 1;
          do
          {
            v19 = *(int *)(v1 + 400);
            *(_DWORD *)(v1 + 400) = v19 + 1;
            *(_DWORD *)(v1 + 4 * v19 + 404) = v9;
            --v18;
          }
          while (v18 > 1);
        }
        ++v9;
      }
      while (v9 < *(int *)(v1 + 356));
    }
  }
  v20 = *(_DWORD *)(v1 + 308);
  if (v20 >= 1)
  {
    v21 = *(unsigned int *)(v1 + 392) * (unint64_t)v20;
    if (v21 >= 0xFFFF)
      LODWORD(v21) = 0xFFFF;
    *(_DWORD *)(v1 + 304) = v21;
  }
  return result;
}

uint64_t sub_10037FC58(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = result;
    result = (*(uint64_t (**)(void))(v1 + 72))();
    if (*(_BYTE *)(v2 + 32))
    {
      *(_DWORD *)(v2 + 36) = 200;
      *(_QWORD *)(v2 + 376) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + 36) = 100;
    }
  }
  return result;
}

uint64_t sub_10037FCB0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  if (v2)
    result = (*(uint64_t (**)(uint64_t))(v2 + 80))(result);
  *(_QWORD *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_10037FCE8(uint64_t a1)
{
  uint64_t result;

  result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_BYTE *)(result + 128) = 0;
  return result;
}

uint64_t sub_10037FD10(uint64_t a1)
{
  uint64_t result;

  result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_BYTE *)(result + 273) = 0;
  return result;
}

int16x8_t sub_10037FD38(uint64_t a1, int a2)
{
  unint64_t v4;
  int v5;
  void (**v6)(_QWORD);
  int16x8_t *v7;
  int64x2_t v8;
  int32x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int64x2_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int64x2_t v102;
  int8x16_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  unint64_t v122;
  int v123;
  void (**v124)(_QWORD);
  uint64_t v125;
  int64x2_t v126;
  int32x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int64x2_t v145;
  int64x2_t v146;
  int8x16_t v147;
  int64x2_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int32x4_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int16x8_t result;
  int64x2_t v178;
  int64x2_t v179;

  v4 = *(int *)(a1 + 144);
  v5 = *(_DWORD *)(a1 + 36);
  if (v5 != 100)
  {
    v6 = *(void (***)(_QWORD))a1;
    *((_DWORD *)v6 + 10) = 21;
    *((_DWORD *)v6 + 11) = v5;
    (**(void (***)(uint64_t))a1)(a1);
  }
  v7 = *(int16x8_t **)(a1 + 112);
  if (!v7)
  {
    v7 = (int16x8_t *)sub_10037FCE8(a1);
    *(_QWORD *)(a1 + 112) = v7;
  }
  v8 = vdupq_n_s64(0x32uLL);
  v9 = vdup_n_s32(v4);
  v10 = vmlal_s32(v8, v9, (int32x2_t)0xB00000010);
  v11 = vmlal_s32(v8, v9, (int32x2_t)0x3D00000033);
  v12 = vmlal_s32(v8, v9, (int32x2_t)0x100000000ALL);
  v10.i64[0] /= 100;
  v10.i64[1] /= 100;
  v12.i64[0] /= 100;
  v12.i64[1] /= 100;
  v178 = v12;
  v179 = v10;
  v13 = vmlal_s32(v8, v9, (int32x2_t)0x2800000018);
  v14.i64[0] = v13.i64[0] / 100;
  v15 = v11.i64[1] / 100;
  v10.i64[0] = v11.i64[0] / 100;
  v16 = vmlal_s32(v8, v9, (int32x2_t)0x370000003CLL);
  v17 = vmlal_s32(v8, v9, (int32x2_t)0x3A0000001ALL);
  v18 = vmlal_s32(v8, v9, (int32x2_t)0x130000000ELL);
  v19 = vmlal_s32(v8, v9, (int32x2_t)0xC0000000CLL);
  v20 = vmlal_s32(v8, v9, (int32x2_t)0x3800000045);
  v21 = vmlal_s32(v8, v9, (int32x2_t)0x3900000028);
  v22 = vmlal_s32(v8, v9, (int32x2_t)0x1800000010);
  v23 = vmlal_s32(v8, v9, (int32x2_t)0xD0000000ELL);
  v24 = vmlal_s32(v8, v9, (int32x2_t)0x3E00000050);
  v25 = vmlal_s32(v8, v9, (int32x2_t)0x5700000033);
  v26 = vmlal_s32(v8, v9, (int32x2_t)0x1D00000016);
  v27 = vmlal_s32(v8, v9, (int32x2_t)0x110000000ELL);
  v28 = vmlal_s32(v8, v9, (int32x2_t)0x4D00000067);
  v29 = vmlal_s32(v8, v9, (int32x2_t)0x6D00000044);
  v30 = vmlal_s32(v8, v9, (int32x2_t)0x3800000025);
  v31 = vmlal_s32(v8, v9, (int32x2_t)0x1600000012);
  v32 = vmlal_s32(v8, v9, (int32x2_t)0x5C00000071);
  v33 = vmlal_s32(v8, v9, (int32x2_t)0x6800000051);
  v34 = vmlal_s32(v8, v9, (int32x2_t)0x4000000037);
  v35 = vmlal_s32(v8, v9, (int32x2_t)0x2300000018);
  v36 = vmlal_s32(v8, v9, (int32x2_t)0x6500000078);
  v37 = vmlal_s32(v8, v9, (int32x2_t)0x7900000067);
  v38 = vmlal_s32(v8, v9, (int32x2_t)0x570000004ELL);
  v39 = vmlal_s32(v8, v9, (int32x2_t)0x4000000031);
  v12.i64[0] = v19.i64[0] / 100;
  v14.i64[1] = v13.i64[1] / 100;
  v10.i64[1] = v15;
  v40 = vdupq_n_s64(1uLL);
  v12.i64[1] = v19.i64[1] / 100;
  v41.i64[0] = v18.i64[0] / 100;
  v41.i64[1] = v18.i64[1] / 100;
  v13.i64[0] = v17.i64[0] / 100;
  v13.i64[1] = v17.i64[1] / 100;
  v42.i64[0] = v16.i64[0] / 100;
  v42.i64[1] = v16.i64[1] / 100;
  v43.i64[0] = v23.i64[0] / 100;
  v43.i64[1] = v23.i64[1] / 100;
  v22.i64[0] /= 100;
  v22.i64[1] /= 100;
  v21.i64[0] /= 100;
  v21.i64[1] /= 100;
  v23.i64[0] = v20.i64[0] / 100;
  v23.i64[1] = v20.i64[1] / 100;
  v20.i64[0] = v27.i64[0] / 100;
  v20.i64[1] = v27.i64[1] / 100;
  v26.i64[0] /= 100;
  v26.i64[1] /= 100;
  v25.i64[0] /= 100;
  v25.i64[1] /= 100;
  v27.i64[0] = v24.i64[0] / 100;
  v27.i64[1] = v24.i64[1] / 100;
  v24.i64[0] = v31.i64[0] / 100;
  v24.i64[1] = v31.i64[1] / 100;
  v30.i64[0] /= 100;
  v30.i64[1] /= 100;
  v29.i64[0] /= 100;
  v29.i64[1] /= 100;
  v31.i64[0] = v28.i64[0] / 100;
  v31.i64[1] = v28.i64[1] / 100;
  v28.i64[0] = v35.i64[0] / 100;
  v28.i64[1] = v35.i64[1] / 100;
  v34.i64[0] /= 100;
  v34.i64[1] /= 100;
  v33.i64[0] /= 100;
  v33.i64[1] /= 100;
  v32.i64[0] /= 100;
  v32.i64[1] /= 100;
  v35.i64[0] = v38.i64[0] / 100;
  v35.i64[1] = v38.i64[1] / 100;
  v37.i64[0] /= 100;
  v37.i64[1] /= 100;
  v36.i64[0] /= 100;
  v36.i64[1] /= 100;
  v44 = v39.i64[1];
  v45 = v39.i64[0] / 100;
  v46 = (int8x16_t)vcgtq_s64(v10, v40);
  v47 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v10, v46), (int64x2_t)vmvnq_s8(v46));
  v48 = (int8x16_t)vcgtq_s64(v14, v40);
  v49 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v14, v48), (int64x2_t)vmvnq_s8(v48));
  v50 = (int8x16_t)vcgtq_s64(v178, v40);
  v51 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v178, v50), (int64x2_t)vmvnq_s8(v50));
  v52 = (int8x16_t)vcgtq_s64(v179, v40);
  v53 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v179, v52), (int64x2_t)vmvnq_s8(v52));
  v54 = (int8x16_t)vcgtq_s64(v42, v40);
  v55 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v42, v54), (int64x2_t)vmvnq_s8(v54));
  v56 = (int8x16_t)vcgtq_s64(v13, v40);
  v57 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v13, v56), (int64x2_t)vmvnq_s8(v56));
  v58 = (int8x16_t)vcgtq_s64(v41, v40);
  v59 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v41, v58), (int64x2_t)vmvnq_s8(v58));
  v60 = (int8x16_t)vcgtq_s64(v12, v40);
  v61 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v12, v60), (int64x2_t)vmvnq_s8(v60));
  v62 = (int8x16_t)vcgtq_s64(v23, v40);
  v63 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v23, v62), (int64x2_t)vmvnq_s8(v62));
  v64 = (int8x16_t)vcgtq_s64(v21, v40);
  v65 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v21, v64), (int64x2_t)vmvnq_s8(v64));
  v66 = (int8x16_t)vcgtq_s64(v22, v40);
  v67 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v22, v66), (int64x2_t)vmvnq_s8(v66));
  v68 = (int8x16_t)vcgtq_s64(v43, v40);
  v69 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v43, v68), (int64x2_t)vmvnq_s8(v68));
  v70 = (int8x16_t)vcgtq_s64(v27, v40);
  v71 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v27, v70), (int64x2_t)vmvnq_s8(v70));
  v72 = (int8x16_t)vcgtq_s64(v25, v40);
  v73 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v25, v72), (int64x2_t)vmvnq_s8(v72));
  v74 = (int8x16_t)vcgtq_s64(v26, v40);
  v75 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v26, v74), (int64x2_t)vmvnq_s8(v74));
  v76 = (int8x16_t)vcgtq_s64(v20, v40);
  v77 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v20, v76), (int64x2_t)vmvnq_s8(v76));
  v78 = (int8x16_t)vcgtq_s64(v31, v40);
  v79 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v31, v78), (int64x2_t)vmvnq_s8(v78));
  v80 = (int8x16_t)vcgtq_s64(v29, v40);
  v81 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v29, v80), (int64x2_t)vmvnq_s8(v80));
  v82 = (int8x16_t)vcgtq_s64(v30, v40);
  v83 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v30, v82), (int64x2_t)vmvnq_s8(v82));
  v84 = (int8x16_t)vcgtq_s64(v24, v40);
  v85 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v24, v84), (int64x2_t)vmvnq_s8(v84));
  v86 = (int8x16_t)vcgtq_s64(v32, v40);
  v87 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v32, v86), (int64x2_t)vmvnq_s8(v86));
  v88 = (int8x16_t)vcgtq_s64(v33, v40);
  v89 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v33, v88), (int64x2_t)vmvnq_s8(v88));
  v90 = (int8x16_t)vcgtq_s64(v34, v40);
  v91 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v34, v90), (int64x2_t)vmvnq_s8(v90));
  v92 = (int8x16_t)vcgtq_s64(v28, v40);
  v93 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v28, v92), (int64x2_t)vmvnq_s8(v92));
  v94 = (int8x16_t)vcgtq_s64(v36, v40);
  v95 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v36, v94), (int64x2_t)vmvnq_s8(v94));
  v96 = (int8x16_t)vcgtq_s64(v37, v40);
  v97 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v37, v96), (int64x2_t)vmvnq_s8(v96));
  v98 = vcgtq_s64(v35, v40);
  v99 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v35, (int8x16_t)v98), (int64x2_t)vmvnq_s8((int8x16_t)v98));
  v98.i64[0] = v45;
  v98.i64[1] = v44 / 100;
  v100 = (int8x16_t)vcgtq_s64(v98, v40);
  v101 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v98, v100), (int64x2_t)vmvnq_s8(v100));
  v102 = vdupq_n_s64(v4);
  if (a2)
  {
    v103.i64[0] = 255;
    v103.i64[1] = 255;
  }
  else
  {
    v103 = (int8x16_t)vdupq_n_s64(0x7FFFuLL);
  }
  *v7 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v53), v53, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v51), v51, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v49), v49, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v47), v47, v103)));
  v7[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v61), v61, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v59), v59, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v57), v57, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v55), v55, v103)));
  v7[2] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v69), v69, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v67), v67, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v65), v65, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v63), v63, v103)));
  v7[3] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v77), v77, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v75), v75, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v73), v73, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v71), v71, v103)));
  v7[4] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v85), v85, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v83), v83, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v81), v81, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v79), v79, v103)));
  v7[5] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v93), v93, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v91), v91, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v89), v89, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v87), v87, v103)));
  v7[6] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v101), v101, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v99), v99, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v97), v97, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v95), v95, v103)));
  v104.i64[0] = 95 * v102.i64[0];
  v104.i64[1] = 98 * v102.i64[1];
  v105.i64[0] = 72 * v102.i64[0];
  v105.i64[1] = 92 * v102.i64[1];
  v106.i64[0] = 103 * v102.i64[0];
  v106.i64[1] = 99 * v102.i64[1];
  v107.i64[0] = 112 * v102.i64[0];
  v107.i64[1] = 100 * v102.i64[1];
  v108 = vdupq_n_s64(0x32uLL);
  v109 = vaddq_s64(v106, v108);
  v110 = vaddq_s64(v105, v108);
  v111 = vaddq_s64(v104, v108);
  v111.i64[0] /= 100;
  v111.i64[1] /= 100;
  v110.i64[0] /= 100;
  v110.i64[1] /= 100;
  v109.i64[0] /= 100;
  v109.i64[1] /= 100;
  v112 = vaddq_s64(v107, v108);
  v112.i64[0] /= 100;
  v112.i64[1] /= 100;
  v113 = vdupq_n_s64(1uLL);
  v114 = (int8x16_t)vcgtq_s64(v112, v113);
  v115 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v112, v114), (int64x2_t)vmvnq_s8(v114));
  v116 = (int8x16_t)vcgtq_s64(v109, v113);
  v117 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v109, v116), (int64x2_t)vmvnq_s8(v116));
  v118 = (int8x16_t)vcgtq_s64(v110, v113);
  v119 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v110, v118), (int64x2_t)vmvnq_s8(v118));
  v120 = (int8x16_t)vcgtq_s64(v111, v113);
  v121 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v111, v120), (int64x2_t)vmvnq_s8(v120));
  v7[7] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v119), v119, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v121), v121, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v115), v115, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v117), v117, v103)));
  v7[8].i8[0] = 0;
  v122 = *(int *)(a1 + 148);
  v123 = *(_DWORD *)(a1 + 36);
  if (v123 != 100)
  {
    v124 = *(void (***)(_QWORD))a1;
    *((_DWORD *)v124 + 10) = 21;
    *((_DWORD *)v124 + 11) = v123;
    (**(void (***)(uint64_t))a1)(a1);
  }
  v125 = *(_QWORD *)(a1 + 120);
  if (!v125)
  {
    v125 = sub_10037FCE8(a1);
    *(_QWORD *)(a1 + 120) = v125;
  }
  v126 = vdupq_n_s64(v122);
  v127 = vdup_n_s32(v122);
  v128 = vdupq_n_s64(0x32uLL);
  v129 = vmlal_s32(v128, v127, (int32x2_t)0x1200000011);
  v129.i64[0] /= 100;
  v129.i64[1] /= 100;
  v130 = vmlal_s32(v128, v127, (int32x2_t)0x2F00000018);
  v131.i64[0] = v130.i64[0] / 100;
  v131.i64[1] = v130.i64[1] / 100;
  v132 = vdupq_n_s64(1uLL);
  v133 = (int8x16_t)vcgtq_s64(v131, v132);
  v134 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v131, v133), (int64x2_t)vmvnq_s8(v133));
  v135 = (int8x16_t)vcgtq_s64(v129, v132);
  v136 = vmlal_s32(v128, v127, (int32x2_t)0x6300000063);
  v137.i64[0] = v136.i64[0] / 100;
  v137.i64[1] = v136.i64[1] / 100;
  v138 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v129, v135), (int64x2_t)vmvnq_s8(v135));
  v139 = (int8x16_t)vcgtq_s64(v137, v132);
  v140 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v137, v139), (int64x2_t)vmvnq_s8(v139));
  v141 = vmlal_s32(v128, v127, (int32x2_t)0x420000001ALL);
  v142 = vmlal_s32(v128, v127, (int32x2_t)0x1500000012);
  v142.i64[0] /= 100;
  v142.i64[1] /= 100;
  v137.i64[0] = v141.i64[0] / 100;
  v137.i64[1] = v141.i64[1] / 100;
  v143 = (int8x16_t)vcgtq_s64(v137, v132);
  v144 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v137, v143), (int64x2_t)vmvnq_s8(v143));
  v145 = vmlal_s32(v128, v127, (int32x2_t)0x6300000038);
  v146 = vmlal_s32(v128, v127, (int32x2_t)0x1A00000018);
  v147 = (int8x16_t)vcgtq_s64(v142, v132);
  v148.i64[0] = v146.i64[0] / 100;
  v148.i64[1] = v146.i64[1] / 100;
  v145.i64[0] /= 100;
  v145.i64[1] /= 100;
  v149 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v142, v147), (int64x2_t)vmvnq_s8(v147));
  v150 = (int8x16_t)vcgtq_s64(v145, v132);
  v151 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v145, v150), (int64x2_t)vmvnq_s8(v150));
  v152 = (int8x16_t)vcgtq_s64(v148, v132);
  v153 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v148, v152), (int64x2_t)vmvnq_s8(v152));
  v154 = vmlal_s32(v128, v127, (int32x2_t)0x420000002FLL);
  v155.i64[0] = v154.i64[0] / 100;
  v155.i64[1] = v154.i64[1] / 100;
  v156 = (int8x16_t)vcgtq_s64(v155, v132);
  v157 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v155, v156), (int64x2_t)vmvnq_s8(v156));
  if (a2)
  {
    v158.i64[0] = 255;
    v158.i64[1] = 255;
  }
  else
  {
    v158 = (int8x16_t)vdupq_n_s64(0x7FFFuLL);
  }
  v159 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v140), v140, v158);
  v160 = (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v138), v138, v158), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v134), v134, v158));
  v161 = (int16x8_t)vuzp1q_s32(v159, v159);
  *(int16x8_t *)v125 = vuzp1q_s16(v160, v161);
  *(int16x8_t *)(v125 + 16) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v149), v149, v158), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v144), v144, v158)), v161);
  *(int16x8_t *)(v125 + 32) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v153), v153, v158), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v151), v151, v158)), v161);
  *(int16x8_t *)(v125 + 48) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v157), v157, v158), v159), v161);
  v162 = vuzp1q_s16(v161, v161);
  *(int16x8_t *)(v125 + 64) = v162;
  *(int16x8_t *)(v125 + 80) = v162;
  *(int16x8_t *)(v125 + 96) = v162;
  v126.i64[0] *= 99;
  v126.i64[1] *= 99;
  v163 = vdupq_n_s64(0x32uLL);
  v164 = vaddq_s64(v126, v163);
  v164.i64[0] /= 100;
  v164.i64[1] /= 100;
  v165 = v164;
  v166 = v164;
  v167 = vaddq_s64(v126, v163);
  v167.i64[0] /= 100;
  v167.i64[1] /= 100;
  v168 = vdupq_n_s64(1uLL);
  v169 = (int8x16_t)vcgtq_s64(v167, v168);
  v170 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v167, v169), (int64x2_t)vmvnq_s8(v169));
  v171 = (int8x16_t)vcgtq_s64(v164, v168);
  v172 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v164, v171), (int64x2_t)vmvnq_s8(v171));
  v173 = (int8x16_t)vcgtq_s64(v166, v168);
  v174 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v166, v173), (int64x2_t)vmvnq_s8(v173));
  v175 = (int8x16_t)vcgtq_s64(v165, v168);
  v176 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v165, v175), (int64x2_t)vmvnq_s8(v175));
  result = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v176), v176, v158), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v174), v174, v158)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v172), v172, v158), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v170), v170, v158)));
  *(int16x8_t *)(v125 + 112) = result;
  *(_BYTE *)(v125 + 128) = 0;
  return result;
}

int16x8_t sub_10038105C(uint64_t a1, signed int a2, int a3)
{
  int v6;
  void (**v7)(_QWORD);
  int16x8_t *v8;
  int64x2_t v9;
  int32x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int64x2_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int64x2_t v120;
  int8x16_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int v144;
  void (**v145)(_QWORD);
  uint64_t v146;
  int64x2_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int64x2_t v164;
  int8x16_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int64x2_t v181;
  int8x16_t v182;
  int64x2_t v183;
  int64x2_t v184;
  int64x2_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int64x2_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int16x8_t v194;
  int32x4_t v195;
  int16x8_t v196;
  int32x4_t v197;
  int64x2_t v198;
  int64x2_t v199;
  int64x2_t v200;
  int64x2_t v201;
  int64x2_t v202;
  int64x2_t v203;
  int64x2_t v204;
  int64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int16x8_t result;
  int64x2_t v217;

  v6 = *(_DWORD *)(a1 + 36);
  if (v6 != 100)
  {
    v7 = *(void (***)(_QWORD))a1;
    *((_DWORD *)v7 + 10) = 21;
    *((_DWORD *)v7 + 11) = v6;
    (**(void (***)(uint64_t))a1)(a1);
  }
  v8 = *(int16x8_t **)(a1 + 112);
  if (!v8)
  {
    v8 = (int16x8_t *)sub_10037FCE8(a1);
    *(_QWORD *)(a1 + 112) = v8;
  }
  v9 = vdupq_n_s64(0x32uLL);
  v10 = vdup_n_s32(a2);
  v11 = vmlal_s32(v9, v10, (int32x2_t)0xB00000010);
  v12 = vmlal_s32(v9, v10, (int32x2_t)0x3D00000033);
  v13 = vmlal_s32(v9, v10, (int32x2_t)0x100000000ALL);
  v11.i64[0] /= 100;
  v11.i64[1] /= 100;
  v217 = v11;
  v14 = vmlal_s32(v9, v10, (int32x2_t)0x2800000018);
  v15.i64[0] = v13.i64[0] / 100;
  v15.i64[1] = v13.i64[1] / 100;
  v16.i64[0] = v14.i64[0] / 100;
  v16.i64[1] = v14.i64[1] / 100;
  v17.i64[0] = v12.i64[0] / 100;
  v17.i64[1] = v12.i64[1] / 100;
  v18 = vdupq_n_s64(1uLL);
  v19 = vmlal_s32(v9, v10, (int32x2_t)0x370000003CLL);
  v20 = vmlal_s32(v9, v10, (int32x2_t)0x3A0000001ALL);
  v21 = vmlal_s32(v9, v10, (int32x2_t)0x130000000ELL);
  v22 = vmlal_s32(v9, v10, (int32x2_t)0xC0000000CLL);
  v23.i64[0] = v22.i64[0] / 100;
  v23.i64[1] = v22.i64[1] / 100;
  v24.i64[0] = v21.i64[0] / 100;
  v24.i64[1] = v21.i64[1] / 100;
  v25.i64[0] = v20.i64[0] / 100;
  v25.i64[1] = v20.i64[1] / 100;
  v26.i64[0] = v19.i64[0] / 100;
  v26.i64[1] = v19.i64[1] / 100;
  v27 = vmlal_s32(v9, v10, (int32x2_t)0x3800000045);
  v28 = vmlal_s32(v9, v10, (int32x2_t)0x3900000028);
  v29 = vmlal_s32(v9, v10, (int32x2_t)0x1800000010);
  v30 = vmlal_s32(v9, v10, (int32x2_t)0xD0000000ELL);
  v31.i64[0] = v30.i64[0] / 100;
  v31.i64[1] = v30.i64[1] / 100;
  v32.i64[0] = v29.i64[0] / 100;
  v32.i64[1] = v29.i64[1] / 100;
  v33.i64[0] = v28.i64[0] / 100;
  v33.i64[1] = v28.i64[1] / 100;
  v34.i64[0] = v27.i64[0] / 100;
  v34.i64[1] = v27.i64[1] / 100;
  v35 = vmlal_s32(v9, v10, (int32x2_t)0x3E00000050);
  v36 = vmlal_s32(v9, v10, (int32x2_t)0x5700000033);
  v37 = vmlal_s32(v9, v10, (int32x2_t)0x1D00000016);
  v38 = vmlal_s32(v9, v10, (int32x2_t)0x110000000ELL);
  v39.i64[0] = v38.i64[0] / 100;
  v39.i64[1] = v38.i64[1] / 100;
  v40.i64[0] = v37.i64[0] / 100;
  v40.i64[1] = v37.i64[1] / 100;
  v41.i64[0] = v36.i64[0] / 100;
  v41.i64[1] = v36.i64[1] / 100;
  v42.i64[0] = v35.i64[0] / 100;
  v42.i64[1] = v35.i64[1] / 100;
  v43 = vmlal_s32(v9, v10, (int32x2_t)0x4D00000067);
  v44 = vmlal_s32(v9, v10, (int32x2_t)0x6D00000044);
  v45 = vmlal_s32(v9, v10, (int32x2_t)0x3800000025);
  v46 = vmlal_s32(v9, v10, (int32x2_t)0x1600000012);
  v47.i64[0] = v46.i64[0] / 100;
  v47.i64[1] = v46.i64[1] / 100;
  v48.i64[0] = v45.i64[0] / 100;
  v48.i64[1] = v45.i64[1] / 100;
  v44.i64[0] /= 100;
  v44.i64[1] /= 100;
  v49.i64[0] = v43.i64[0] / 100;
  v49.i64[1] = v43.i64[1] / 100;
  v50 = vmlal_s32(v9, v10, (int32x2_t)0x5C00000071);
  v51 = vmlal_s32(v9, v10, (int32x2_t)0x6800000051);
  v52 = vmlal_s32(v9, v10, (int32x2_t)0x4000000037);
  v53 = vmlal_s32(v9, v10, (int32x2_t)0x2300000018);
  v53.i64[0] /= 100;
  v53.i64[1] /= 100;
  v54.i64[0] = v52.i64[0] / 100;
  v54.i64[1] = v52.i64[1] / 100;
  v55.i64[0] = v51.i64[0] / 100;
  v55.i64[1] = v51.i64[1] / 100;
  v56.i64[0] = v50.i64[0] / 100;
  v56.i64[1] = v50.i64[1] / 100;
  v57 = vmlal_s32(v9, v10, (int32x2_t)0x6500000078);
  v58 = vmlal_s32(v9, v10, (int32x2_t)0x7900000067);
  v59 = vmlal_s32(v9, v10, (int32x2_t)0x570000004ELL);
  v60.i64[0] = v59.i64[0] / 100;
  v60.i64[1] = v59.i64[1] / 100;
  v59.i64[0] = v58.i64[0] / 100;
  v59.i64[1] = v58.i64[1] / 100;
  v22.i64[0] = v57.i64[0] / 100;
  v22.i64[1] = v57.i64[1] / 100;
  v61 = vmlal_s32(v9, v10, (int32x2_t)0x4000000031);
  v62 = v61.i64[1];
  v63 = v61.i64[0] / 100;
  v64 = (int8x16_t)vcgtq_s64(v17, v18);
  v65 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v17, v64), (int64x2_t)vmvnq_s8(v64));
  v66 = (int8x16_t)vcgtq_s64(v16, v18);
  v67 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v16, v66), (int64x2_t)vmvnq_s8(v66));
  v68 = (int8x16_t)vcgtq_s64(v15, v18);
  v69 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v15, v68), (int64x2_t)vmvnq_s8(v68));
  v70 = (int8x16_t)vcgtq_s64(v217, v18);
  v71 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v217, v70), (int64x2_t)vmvnq_s8(v70));
  v72 = (int8x16_t)vcgtq_s64(v26, v18);
  v73 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v26, v72), (int64x2_t)vmvnq_s8(v72));
  v74 = (int8x16_t)vcgtq_s64(v25, v18);
  v75 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v25, v74), (int64x2_t)vmvnq_s8(v74));
  v76 = (int8x16_t)vcgtq_s64(v24, v18);
  v77 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v24, v76), (int64x2_t)vmvnq_s8(v76));
  v78 = (int8x16_t)vcgtq_s64(v23, v18);
  v79 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v23, v78), (int64x2_t)vmvnq_s8(v78));
  v80 = (int8x16_t)vcgtq_s64(v34, v18);
  v81 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v34, v80), (int64x2_t)vmvnq_s8(v80));
  v82 = (int8x16_t)vcgtq_s64(v33, v18);
  v83 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v33, v82), (int64x2_t)vmvnq_s8(v82));
  v84 = (int8x16_t)vcgtq_s64(v32, v18);
  v85 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v32, v84), (int64x2_t)vmvnq_s8(v84));
  v86 = (int8x16_t)vcgtq_s64(v31, v18);
  v87 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v31, v86), (int64x2_t)vmvnq_s8(v86));
  v88 = (int8x16_t)vcgtq_s64(v42, v18);
  v89 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v42, v88), (int64x2_t)vmvnq_s8(v88));
  v90 = (int8x16_t)vcgtq_s64(v41, v18);
  v91 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v41, v90), (int64x2_t)vmvnq_s8(v90));
  v92 = (int8x16_t)vcgtq_s64(v40, v18);
  v93 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v40, v92), (int64x2_t)vmvnq_s8(v92));
  v94 = (int8x16_t)vcgtq_s64(v39, v18);
  v95 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v39, v94), (int64x2_t)vmvnq_s8(v94));
  v96 = (int8x16_t)vcgtq_s64(v49, v18);
  v97 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v49, v96), (int64x2_t)vmvnq_s8(v96));
  v98 = (int8x16_t)vcgtq_s64(v44, v18);
  v99 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v44, v98), (int64x2_t)vmvnq_s8(v98));
  v100 = (int8x16_t)vcgtq_s64(v48, v18);
  v101 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v48, v100), (int64x2_t)vmvnq_s8(v100));
  v102 = (int8x16_t)vcgtq_s64(v47, v18);
  v103 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v47, v102), (int64x2_t)vmvnq_s8(v102));
  v104 = (int8x16_t)vcgtq_s64(v56, v18);
  v105 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v56, v104), (int64x2_t)vmvnq_s8(v104));
  v106 = (int8x16_t)vcgtq_s64(v55, v18);
  v107 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v55, v106), (int64x2_t)vmvnq_s8(v106));
  v108 = (int8x16_t)vcgtq_s64(v54, v18);
  v109 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v54, v108), (int64x2_t)vmvnq_s8(v108));
  v110 = (int8x16_t)vcgtq_s64(v53, v18);
  v111 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v53, v110), (int64x2_t)vmvnq_s8(v110));
  v112 = (int8x16_t)vcgtq_s64(v22, v18);
  v113 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v22, v112), (int64x2_t)vmvnq_s8(v112));
  v114 = (int8x16_t)vcgtq_s64(v59, v18);
  v115 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v59, v114), (int64x2_t)vmvnq_s8(v114));
  v116 = vcgtq_s64(v60, v18);
  v117 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v60, (int8x16_t)v116), (int64x2_t)vmvnq_s8((int8x16_t)v116));
  v116.i64[0] = v63;
  v116.i64[1] = v62 / 100;
  v118 = (int8x16_t)vcgtq_s64(v116, v18);
  v119 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v116, v118), (int64x2_t)vmvnq_s8(v118));
  v120 = vdupq_n_s64(a2);
  if (a3)
  {
    v121.i64[0] = 255;
    v121.i64[1] = 255;
    *v8 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v71), v71, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v69), v69, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v67), v67, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v65), v65, v121)));
    v8[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v79), v79, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v77), v77, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v75), v75, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v73), v73, v121)));
    v8[2] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v87), v87, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v85), v85, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v83), v83, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v81), v81, v121)));
    v8[3] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v95), v95, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v93), v93, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v91), v91, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v89), v89, v121)));
    v8[4] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v103), v103, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v101), v101, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v99), v99, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v97), v97, v121)));
    v8[5] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v111), v111, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v109), v109, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v107), v107, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v105), v105, v121)));
    v122 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v115), v115, v121);
    v123 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v113), v113, v121);
    v124 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v119), v119, v121);
    v125 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v117), v117, v121);
  }
  else
  {
    v121 = (int8x16_t)vdupq_n_s64(0x7FFFuLL);
    *v8 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v71), v71, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v69), v69, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v67), v67, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v65), v65, v121)));
    v8[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v79), v79, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v77), v77, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v75), v75, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v73), v73, v121)));
    v8[2] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v87), v87, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v85), v85, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v83), v83, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v81), v81, v121)));
    v8[3] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v95), v95, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v93), v93, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v91), v91, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v89), v89, v121)));
    v8[4] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v103), v103, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v101), v101, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v99), v99, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v97), v97, v121)));
    v8[5] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v111), v111, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v109), v109, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v107), v107, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v105), v105, v121)));
    v122 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v115), v115, v121);
    v123 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v113), v113, v121);
    v125 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v117), v117, v121);
    v124 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v119), v119, v121);
  }
  v8[6] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v124, v125), (int16x8_t)vuzp1q_s32(v122, v123));
  v126.i64[0] = 95 * v120.i64[0];
  v126.i64[1] = 98 * v120.i64[1];
  v127.i64[0] = 72 * v120.i64[0];
  v127.i64[1] = 92 * v120.i64[1];
  v128.i64[0] = 103 * v120.i64[0];
  v128.i64[1] = 99 * v120.i64[1];
  v129.i64[0] = 112 * v120.i64[0];
  v129.i64[1] = 100 * v120.i64[1];
  v130 = vdupq_n_s64(0x32uLL);
  v131 = vaddq_s64(v128, v130);
  v132 = vaddq_s64(v127, v130);
  v133 = vaddq_s64(v126, v130);
  v133.i64[0] /= 100;
  v133.i64[1] /= 100;
  v132.i64[0] /= 100;
  v132.i64[1] /= 100;
  v131.i64[0] /= 100;
  v131.i64[1] /= 100;
  v134 = vaddq_s64(v129, v130);
  v134.i64[0] /= 100;
  v134.i64[1] /= 100;
  v135 = vdupq_n_s64(1uLL);
  v136 = (int8x16_t)vcgtq_s64(v134, v135);
  v137 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v134, v136), (int64x2_t)vmvnq_s8(v136));
  v138 = (int8x16_t)vcgtq_s64(v131, v135);
  v139 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v131, v138), (int64x2_t)vmvnq_s8(v138));
  v140 = (int8x16_t)vcgtq_s64(v132, v135);
  v141 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v132, v140), (int64x2_t)vmvnq_s8(v140));
  v142 = (int8x16_t)vcgtq_s64(v133, v135);
  v143 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v133, v142), (int64x2_t)vmvnq_s8(v142));
  v8[7] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v141), v141, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v143), v143, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v137), v137, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v139), v139, v121)));
  v8[8].i8[0] = 0;
  v144 = *(_DWORD *)(a1 + 36);
  if (v144 != 100)
  {
    v145 = *(void (***)(_QWORD))a1;
    *((_DWORD *)v145 + 10) = 21;
    *((_DWORD *)v145 + 11) = v144;
    (**(void (***)(uint64_t))a1)(a1);
  }
  v146 = *(_QWORD *)(a1 + 120);
  if (!v146)
  {
    v146 = sub_10037FCE8(a1);
    *(_QWORD *)(a1 + 120) = v146;
  }
  v147.i64[0] = 99 * v120.i64[0];
  v148.i64[0] = 24 * v120.i64[0];
  v149.i64[0] = 99 * v120.i64[0];
  v147.i64[1] = 99 * v120.i64[1];
  v148.i64[1] = 47 * v120.i64[1];
  v149.i64[1] = 99 * v120.i64[1];
  v150.i64[0] = 17 * v120.i64[0];
  v150.i64[1] = 18 * v120.i64[1];
  v151 = vdupq_n_s64(0x32uLL);
  v152 = vaddq_s64(v149, v151);
  v153 = vaddq_s64(v147, v151);
  v154 = vaddq_s64(v148, v151);
  v155.i64[0] = v153.i64[0] / 100;
  v155.i64[1] = v153.i64[1] / 100;
  v153.i64[0] = v154.i64[0] / 100;
  v153.i64[1] = v154.i64[1] / 100;
  v154.i64[0] = v152.i64[0] / 100;
  v154.i64[1] = v152.i64[1] / 100;
  v156 = vaddq_s64(v150, v151);
  v156.i64[0] /= 100;
  v156.i64[1] /= 100;
  v157 = vdupq_n_s64(1uLL);
  v158 = (int8x16_t)vcgtq_s64(v154, v157);
  v159 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v154, v158), (int64x2_t)vmvnq_s8(v158));
  v160 = (int8x16_t)vcgtq_s64(v153, v157);
  v161 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v153, v160), (int64x2_t)vmvnq_s8(v160));
  v162 = (int8x16_t)vcgtq_s64(v155, v157);
  v163 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v155, v162), (int64x2_t)vmvnq_s8(v162));
  v164 = vcgtq_s64(v156, v157);
  v165 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v156, (int8x16_t)v164), (int64x2_t)vmvnq_s8((int8x16_t)v164));
  v164.i64[0] = 18 * v120.i64[0];
  v164.i64[1] = 21 * v120.i64[1];
  v166.i64[0] = 26 * v120.i64[0];
  v166.i64[1] = 66 * v120.i64[1];
  v167 = vaddq_s64(v164, v151);
  v168 = vaddq_s64(v166, v151);
  v167.i64[0] /= 100;
  v167.i64[1] /= 100;
  v168.i64[0] /= 100;
  v168.i64[1] /= 100;
  v169 = (int8x16_t)vcgtq_s64(v167, v157);
  v170 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v167, v169), (int64x2_t)vmvnq_s8(v169));
  v171 = (int8x16_t)vcgtq_s64(v168, v157);
  v172.i64[0] = 56 * v120.i64[0];
  v172.i64[1] = 99 * v120.i64[1];
  v173.i64[0] = 24 * v120.i64[0];
  v173.i64[1] = 26 * v120.i64[1];
  v174 = vaddq_s64(v173, v151);
  v175 = vaddq_s64(v172, v151);
  v176.i64[0] = v175.i64[0] / 100;
  v176.i64[1] = v175.i64[1] / 100;
  v174.i64[0] /= 100;
  v174.i64[1] /= 100;
  v177 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v168, v171), (int64x2_t)vmvnq_s8(v171));
  v178 = (int8x16_t)vcgtq_s64(v174, v157);
  v179 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v174, v178), (int64x2_t)vmvnq_s8(v178));
  v180 = (int8x16_t)vcgtq_s64(v176, v157);
  v181 = (int64x2_t)vandq_s8((int8x16_t)v176, v180);
  v176.i64[0] = 99 * v120.i64[0];
  v176.i64[1] = 99 * v120.i64[1];
  v182 = (int8x16_t)vsubq_s64(v181, (int64x2_t)vmvnq_s8(v180));
  v181.i64[0] = 47 * v120.i64[0];
  v181.i64[1] = 66 * v120.i64[1];
  v183 = vaddq_s64(v176, v151);
  v184 = vaddq_s64(v181, v151);
  v183.i64[0] /= 100;
  v183.i64[1] /= 100;
  v185.i64[0] = v184.i64[0] / 100;
  v185.i64[1] = v184.i64[1] / 100;
  v186 = (int8x16_t)vcgtq_s64(v183, v157);
  v187 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v183, v186), (int64x2_t)vmvnq_s8(v186));
  v188 = (int8x16_t)vcgtq_s64(v185, v157);
  v189 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v185, v188), (int64x2_t)vmvnq_s8(v188));
  v185.i64[0] = 99 * v120.i64[0];
  v185.i64[1] = 99 * v120.i64[1];
  v190 = vaddq_s64(v185, v151);
  v190.i64[0] /= 100;
  v190.i64[1] /= 100;
  v191 = (int8x16_t)vcgtq_s64(v190, v157);
  v192 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v190, v191), (int64x2_t)vmvnq_s8(v191));
  if (a3)
  {
    v193.i64[0] = 255;
    v193.i64[1] = 255;
    v194 = (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v159), v159, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v163), v163, v193));
    *(int16x8_t *)v146 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v165), v165, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v161), v161, v193)), v194);
    *(int16x8_t *)(v146 + 16) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v170), v170, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v177), v177, v193)), v194);
    v195 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v187), v187, v193);
    *(int16x8_t *)(v146 + 32) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v179), v179, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v182), v182, v193)), v194);
    *(int16x8_t *)(v146 + 48) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v189), v189, v193), v195), v194);
    v196 = (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v192), v192, v193), v195);
  }
  else
  {
    v193 = (int8x16_t)vdupq_n_s64(0x7FFFuLL);
    v194 = (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v159), v159, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v163), v163, v193));
    *(int16x8_t *)v146 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v165), v165, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v161), v161, v193)), v194);
    *(int16x8_t *)(v146 + 16) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v170), v170, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v177), v177, v193)), v194);
    v197 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v187), v187, v193);
    *(int16x8_t *)(v146 + 32) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v179), v179, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v182), v182, v193)), v194);
    *(int16x8_t *)(v146 + 48) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v189), v189, v193), v197), v194);
    v196 = (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v192), v192, v193), v197);
  }
  v198 = (int64x2_t)vuzp1q_s16(v196, v194);
  *(int64x2_t *)(v146 + 64) = v198;
  *(int64x2_t *)(v146 + 80) = v198;
  v199.i64[0] = 99 * v120.i64[0];
  v199.i64[1] = 99 * v120.i64[1];
  v200.i64[0] = 99 * v120.i64[0];
  v200.i64[1] = 99 * v120.i64[1];
  v201.i64[0] = 99 * v120.i64[0];
  v201.i64[1] = 99 * v120.i64[1];
  *(int64x2_t *)(v146 + 96) = v198;
  v198.i64[0] = 99 * v120.i64[0];
  v198.i64[1] = 99 * v120.i64[1];
  v202 = vdupq_n_s64(0x32uLL);
  v203 = vaddq_s64(v201, v202);
  v204 = vaddq_s64(v200, v202);
  v205 = vaddq_s64(v199, v202);
  v205.i64[0] /= 100;
  v205.i64[1] /= 100;
  v204.i64[0] /= 100;
  v204.i64[1] /= 100;
  v203.i64[0] /= 100;
  v203.i64[1] /= 100;
  v206 = vaddq_s64(v198, v202);
  v206.i64[0] /= 100;
  v206.i64[1] /= 100;
  v207 = vdupq_n_s64(1uLL);
  v208 = (int8x16_t)vcgtq_s64(v206, v207);
  v209 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v206, v208), (int64x2_t)vmvnq_s8(v208));
  v210 = (int8x16_t)vcgtq_s64(v203, v207);
  v211 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v203, v210), (int64x2_t)vmvnq_s8(v210));
  v212 = (int8x16_t)vcgtq_s64(v204, v207);
  v213 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v204, v212), (int64x2_t)vmvnq_s8(v212));
  v214 = (int8x16_t)vcgtq_s64(v205, v207);
  v215 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v205, v214), (int64x2_t)vmvnq_s8(v214));
  result = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v215), v215, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v213), v213, v193)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v211), v211, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v209), v209, v193)));
  *(int16x8_t *)(v146 + 112) = result;
  *(_BYTE *)(v146 + 128) = 0;
  return result;
}

uint64_t sub_10038250C(int a1)
{
  unsigned int v1;

  if (a1 <= 1)
    v1 = 1;
  else
    v1 = a1;
  if (v1 >= 0x64)
    v1 = 100;
  if (v1 > 0x31)
    return 200 - 2 * v1;
  else
    return 0x1388u / (unsigned __int16)v1;
}

double sub_100382544(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  double result;

  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  if (v3 >= 0x64)
    v3 = 100;
  if (v3 > 0x31)
    v4 = 200 - 2 * v3;
  else
    v4 = 0x1388u / (unsigned __int16)v3;
  *(_QWORD *)&result = sub_10038105C(a1, v4, a3).u64[0];
  return result;
}

double sub_10038257C(uint64_t a1)
{
  int v2;
  void (**v3)(_QWORD);
  double result;

  v2 = *(_DWORD *)(a1 + 36);
  if (v2 != 100)
  {
    v3 = *(void (***)(_QWORD))a1;
    *((_DWORD *)v3 + 10) = 21;
    *((_DWORD *)v3 + 11) = v2;
    (**(void (***)(uint64_t))a1)(a1);
  }
  if (!*(_QWORD *)(a1 + 104))
    *(_QWORD *)(a1 + 104) = (**(uint64_t (***)(uint64_t, _QWORD, uint64_t))(a1 + 8))(a1, 0, 960);
  *(_QWORD *)(a1 + 72) = 0x100000001;
  *(_DWORD *)(a1 + 88) = 8;
  sub_10038105C(a1, 50, 1);
  sub_1003831B8((uint64_t *)a1, (uint64_t *)(a1 + 160), &xmmword_1003C5BE8, &unk_1003C5BF9);
  sub_1003831B8((uint64_t *)a1, (uint64_t *)(a1 + 192), &xmmword_1003C5C22, &unk_1003C5C33);
  sub_1003831B8((uint64_t *)a1, (uint64_t *)(a1 + 168), &xmmword_1003C5C05, &unk_1003C5C16);
  sub_1003831B8((uint64_t *)a1, (uint64_t *)(a1 + 200), &xmmword_1003C5CD5, &unk_1003C5CE6);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0x101010101010101;
  *(_QWORD *)(a1 + 248) = 0x101010101010101;
  *(_QWORD *)(a1 + 256) = 0x505050505050505;
  *(_QWORD *)(a1 + 264) = 0x505050505050505;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 289) = *(_DWORD *)(a1 + 88) > 8;
  *(_WORD *)(a1 + 290) = 0;
  *(_BYTE *)(a1 + 292) = 1;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_WORD *)(a1 + 313) = 257;
  *(_BYTE *)(a1 + 315) = 0;
  *(_DWORD *)(a1 + 316) = 65537;
  *(_DWORD *)(a1 + 324) = 0;
  *(_QWORD *)&result = sub_1003826D8((uint64_t *)a1).n128_u64[0];
  return result;
}

__n128 sub_1003826D8(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  int v7;
  void (**v8)(_QWORD);
  unsigned int v9;
  void (**v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  switch(*((_DWORD *)a1 + 15))
  {
    case 0:
      v7 = *((_DWORD *)a1 + 9);
      if (v7 != 100)
      {
        v8 = (void (**)(_QWORD))*a1;
        *((_DWORD *)v8 + 10) = 21;
        *((_DWORD *)v8 + 11) = v7;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      *((_BYTE *)a1 + 312) = 0;
      *((_BYTE *)a1 + 320) = 0;
      v9 = *((_DWORD *)a1 + 14);
      *(uint64_t *)((char *)a1 + 92) = v9;
      if (v9 - 11 <= 0xFFFFFFF5)
      {
        v10 = (void (**)(_QWORD))*a1;
        *((_DWORD *)v10 + 10) = 27;
        *((_DWORD *)v10 + 11) = v9;
        *(_DWORD *)(*a1 + 48) = 10;
        (*(void (**)(uint64_t *))*a1)(a1);
        v9 = *((_DWORD *)a1 + 23);
        if ((int)v9 < 1)
          return result;
      }
      v11 = a1[13];
      v12 = v9;
      if (v9 < 2)
      {
        v13 = 0;
LABEL_31:
        v33 = v11 + 96 * v13;
        result.n128_u64[0] = 0x100000001;
        do
        {
          *(_DWORD *)v33 = v13;
          *(_OWORD *)(v33 + 8) = xmmword_1003C5B60;
          *(_DWORD *)(v33 + 24) = 0;
          ++v13;
          v33 += 96;
        }
        while (v12 != v13);
        return result;
      }
      v31 = 0;
      v13 = v9 & 0xFFFFFFFE;
      result.n128_u64[0] = 0x100000001;
      v32 = a1[13];
      do
      {
        *(_DWORD *)v32 = v31;
        *(_DWORD *)(v32 + 96) = v31 + 1;
        *(_OWORD *)(v32 + 8) = xmmword_1003C5B60;
        *(_OWORD *)(v32 + 104) = xmmword_1003C5B60;
        v31 += 2;
        *(_DWORD *)(v32 + 24) = 0;
        *(_DWORD *)(v32 + 120) = 0;
        v32 += 192;
      }
      while (v13 != v31);
      if (v13 != v12)
        goto LABEL_31;
      return result;
    case 1:
      v14 = *((_DWORD *)a1 + 9);
      if (v14 != 100)
      {
        v15 = *a1;
        *(_DWORD *)(v15 + 40) = 21;
        *(_DWORD *)(v15 + 44) = v14;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      *((_BYTE *)a1 + 320) = 0;
      *((_BYTE *)a1 + 312) = 1;
      *(uint64_t *)((char *)a1 + 92) = 0x100000001;
      v16 = a1[13];
      *(_DWORD *)v16 = 1;
      result.n128_u64[0] = 0x100000001;
      *(_OWORD *)(v16 + 8) = xmmword_1003C5B60;
      *(_DWORD *)(v16 + 24) = 0;
      return result;
    case 2:
    case 3:
      v2 = *((_DWORD *)a1 + 9);
      if (v2 != 100)
      {
        v3 = *a1;
        *(_DWORD *)(v3 + 40) = 21;
        *(_DWORD *)(v3 + 44) = v2;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      *((_BYTE *)a1 + 320) = 0;
      *((_BYTE *)a1 + 312) = 1;
      *(uint64_t *)((char *)a1 + 92) = 0x300000003;
      v4 = a1[13];
      *(_DWORD *)v4 = 1;
      *(_OWORD *)(v4 + 8) = xmmword_1003C5B50;
      *(_DWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 96) = 2;
      result.n128_u64[0] = 0x100000001;
      result.n128_u64[1] = 0x100000001;
      *(__n128 *)(v4 + 104) = result;
      *(_DWORD *)(v4 + 120) = 1;
      *(_DWORD *)(v4 + 192) = 3;
      *(__n128 *)(v4 + 200) = result;
      *(_DWORD *)(v4 + 216) = 1;
      return result;
    case 4:
      v17 = *((_DWORD *)a1 + 9);
      if (v17 != 100)
      {
        v18 = *a1;
        *(_DWORD *)(v18 + 40) = 21;
        *(_DWORD *)(v18 + 44) = v17;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      *((_BYTE *)a1 + 312) = 0;
      *((_BYTE *)a1 + 320) = 1;
      *(uint64_t *)((char *)a1 + 92) = 0x400000004;
      v19 = a1[13];
      *(_DWORD *)v19 = 67;
      result.n128_u64[0] = 0x100000001;
      *(_OWORD *)(v19 + 8) = xmmword_1003C5B60;
      *(_DWORD *)(v19 + 24) = 0;
      *(_DWORD *)(v19 + 96) = 77;
      *(_OWORD *)(v19 + 104) = xmmword_1003C5B60;
      *(_DWORD *)(v19 + 120) = 0;
      *(_DWORD *)(v19 + 192) = 89;
      *(_OWORD *)(v19 + 200) = xmmword_1003C5B60;
      *(_DWORD *)(v19 + 216) = 0;
      *(_DWORD *)(v19 + 288) = 75;
      *(_OWORD *)(v19 + 296) = xmmword_1003C5B60;
      *(_DWORD *)(v19 + 312) = 0;
      return result;
    case 5:
      v20 = *((_DWORD *)a1 + 9);
      if (v20 != 100)
      {
        v21 = *a1;
        *(_DWORD *)(v21 + 40) = 21;
        *(_DWORD *)(v21 + 44) = v20;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      *((_BYTE *)a1 + 312) = 0;
      *((_BYTE *)a1 + 320) = 1;
      *(uint64_t *)((char *)a1 + 92) = 0x500000004;
      v22 = a1[13];
      *(_DWORD *)v22 = 1;
      result.n128_u64[0] = 0x200000002;
      *(_OWORD *)(v22 + 8) = xmmword_1003C5B50;
      *(_DWORD *)(v22 + 24) = 0;
      *(_DWORD *)(v22 + 96) = 2;
      *(_QWORD *)&v23 = 0x100000001;
      *((_QWORD *)&v23 + 1) = 0x100000001;
      *(_OWORD *)(v22 + 104) = v23;
      *(_DWORD *)(v22 + 120) = 1;
      *(_DWORD *)(v22 + 192) = 3;
      *(_OWORD *)(v22 + 200) = v23;
      *(_DWORD *)(v22 + 216) = 1;
      *(_DWORD *)(v22 + 288) = 4;
      *(_OWORD *)(v22 + 296) = xmmword_1003C5B50;
      *(_DWORD *)(v22 + 312) = 0;
      return result;
    case 6:
      v24 = *((_DWORD *)a1 + 9);
      if (v24 != 100)
      {
        v25 = *a1;
        *(_DWORD *)(v25 + 40) = 21;
        *(_DWORD *)(v25 + 44) = v24;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      *((_BYTE *)a1 + 320) = 0;
      *((_WORD *)a1 + 156) = 513;
      *(uint64_t *)((char *)a1 + 92) = 0x600000003;
      v26 = a1[13];
      *(_DWORD *)v26 = 114;
      result.n128_u64[0] = 0x100000001;
      *(_QWORD *)(v26 + 8) = 0x100000001;
      v27 = *((_DWORD *)a1 + 81) == 1;
      *(_DWORD *)(v26 + 16) = 0;
      *(_DWORD *)(v26 + 20) = v27;
      *(_DWORD *)(v26 + 24) = v27;
      *(_DWORD *)(v26 + 96) = 103;
      *(_OWORD *)(v26 + 104) = xmmword_1003C5B60;
      *(_DWORD *)(v26 + 120) = 0;
      *(_DWORD *)(v26 + 192) = 98;
      *(_QWORD *)(v26 + 200) = 0x100000001;
      *(_DWORD *)(v26 + 208) = 0;
      *(_DWORD *)(v26 + 212) = v27;
      *(_DWORD *)(v26 + 216) = v27;
      return result;
    case 7:
      v28 = *((_DWORD *)a1 + 9);
      if (v28 != 100)
      {
        v29 = *a1;
        *(_DWORD *)(v29 + 40) = 21;
        *(_DWORD *)(v29 + 44) = v28;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      *((_BYTE *)a1 + 320) = 0;
      *((_WORD *)a1 + 156) = 513;
      *(uint64_t *)((char *)a1 + 92) = 0x700000003;
      v30 = a1[13];
      *(_DWORD *)v30 = 1;
      *(_OWORD *)(v30 + 8) = xmmword_1003C5B50;
      *(_DWORD *)(v30 + 24) = 0;
      *(_DWORD *)(v30 + 96) = 34;
      result.n128_u64[0] = 0x100000001;
      result.n128_u64[1] = 0x100000001;
      *(__n128 *)(v30 + 104) = result;
      *(_DWORD *)(v30 + 120) = 1;
      *(_DWORD *)(v30 + 192) = 35;
      *(__n128 *)(v30 + 200) = result;
      *(_DWORD *)(v30 + 216) = 1;
      return result;
    default:
      v6 = *a1;
      *(_DWORD *)(v6 + 40) = 10;
      (*(void (**)(uint64_t *))v6)(a1);
      return result;
  }
}

_QWORD *sub_100382B78(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void (**v4)(uint64_t);
  int v5;
  _QWORD *result;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;

  v2 = *(unsigned int *)(a1 + 92);
  v3 = *(_DWORD *)(a1 + 36);
  if (v3 != 100)
  {
    v4 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v4 + 10) = 21;
    *((_DWORD *)v4 + 11) = v3;
    (**(void (***)(uint64_t))a1)(a1);
  }
  if ((_DWORD)v2 == 3)
  {
    if ((*(_DWORD *)(a1 + 96) | 4) == 7)
    {
      v5 = 10;
      result = *(_QWORD **)(a1 + 552);
      if (!result)
        goto LABEL_12;
LABEL_11:
      if (*(_DWORD *)(a1 + 560) >= v5)
        goto LABEL_16;
      goto LABEL_12;
    }
  }
  else if ((int)v2 >= 5)
  {
    v5 = 6 * v2;
    result = *(_QWORD **)(a1 + 552);
    if (!result)
      goto LABEL_12;
    goto LABEL_11;
  }
  v5 = (4 * v2) | 2;
  result = *(_QWORD **)(a1 + 552);
  if (result)
    goto LABEL_11;
LABEL_12:
  if (v5 <= 10)
    v7 = 10;
  else
    v7 = v5;
  *(_DWORD *)(a1 + 560) = v7;
  result = (**(_QWORD *(***)(uint64_t __return_ptr, uint64_t, _QWORD, uint64_t))(a1 + 8))(v7, a1, 0, 36 * v7);
  *(_QWORD *)(a1 + 552) = result;
LABEL_16:
  *(_QWORD *)(a1 + 280) = result;
  *(_DWORD *)(a1 + 272) = v5;
  if ((_DWORD)v2 != 3)
  {
    if ((int)v2 >= 5)
    {
      v16 = 0;
      v17 = v2 & 0xFFFFFFFE;
      v15 = (char *)result + 36 * v17;
      v18 = (char *)result + 36;
      do
      {
        *((_DWORD *)v18 - 9) = 1;
        *((_DWORD *)v18 - 8) = v16;
        *(_DWORD *)v18 = 1;
        *((_DWORD *)v18 + 1) = v16 + 1;
        v16 += 2;
        *((_OWORD *)v18 - 1) = xmmword_1003C5B70;
        *(_OWORD *)(v18 + 20) = xmmword_1003C5B70;
        v18 += 72;
      }
      while (v17 != v16);
      if (v17 != v2)
      {
        do
        {
          *(_DWORD *)v15 = 1;
          *((_DWORD *)v15 + 1) = v17;
          *(_OWORD *)(v15 + 20) = xmmword_1003C5B70;
          v15 += 36;
          LODWORD(v17) = v17 + 1;
        }
        while ((_DWORD)v2 != (_DWORD)v17);
      }
    }
    else
    {
      *(_DWORD *)result = v2;
      if ((int)v2 >= 1)
      {
        *((_DWORD *)result + 1) = 0;
        if ((_DWORD)v2 != 1)
        {
          *((_DWORD *)result + 2) = 1;
          if ((_DWORD)v2 != 2)
          {
            *((_DWORD *)result + 3) = 2;
            *((_DWORD *)result + 4) = 3;
          }
        }
      }
      *(_OWORD *)((char *)result + 20) = xmmword_1003C5B70;
      v15 = (char *)result + 36;
    }
    if ((int)v2 < 1)
    {
      *(_DWORD *)v15 = v2;
LABEL_60:
      *(_OWORD *)(v15 + 20) = xmmword_1003BA9E0;
      v37 = v15 + 36;
      goto LABEL_61;
    }
    if ((_DWORD)v2 == 1)
    {
      LODWORD(v24) = 0;
      v25 = v15;
    }
    else
    {
      v23 = 0;
      v24 = v2 & 0xFFFFFFFE;
      v25 = &v15[36 * v24];
      v26 = v15 + 36;
      do
      {
        *((_DWORD *)v26 - 9) = 1;
        *((_DWORD *)v26 - 8) = v23;
        *(_DWORD *)v26 = 1;
        *((_DWORD *)v26 + 1) = v23 + 1;
        v23 += 2;
        *((_OWORD *)v26 - 1) = xmmword_1003C5B80;
        *(_OWORD *)(v26 + 20) = xmmword_1003C5B80;
        v26 += 72;
      }
      while (v24 != v23);
      if (v24 == v2)
      {
LABEL_39:
        if (v2 >= 2)
        {
          v29 = 0;
          v27 = v2 & 0xFFFFFFFE;
          v28 = &v25[36 * v27];
          v30 = v25 + 36;
          do
          {
            *((_DWORD *)v30 - 9) = 1;
            *((_DWORD *)v30 - 8) = v29;
            *(_DWORD *)v30 = 1;
            *((_DWORD *)v30 + 1) = v29 + 1;
            v29 += 2;
            *((_OWORD *)v30 - 1) = xmmword_1003C5B90;
            *(_OWORD *)(v30 + 20) = xmmword_1003C5B90;
            v30 += 72;
          }
          while (v27 != v29);
          if (v27 == v2)
          {
LABEL_45:
            if (v2 >= 2)
            {
              v32 = 0;
              v31 = v2 & 0xFFFFFFFE;
              v15 = &v28[36 * v31];
              v33 = v28 + 36;
              do
              {
                *((_DWORD *)v33 - 9) = 1;
                *((_DWORD *)v33 - 8) = v32;
                *(_DWORD *)v33 = 1;
                *((_DWORD *)v33 + 1) = v32 + 1;
                v32 += 2;
                *((_OWORD *)v33 - 1) = xmmword_1003C5BA0;
                *(_OWORD *)(v33 + 20) = xmmword_1003C5BA0;
                v33 += 72;
              }
              while (v31 != v32);
              if (v31 == v2)
              {
                v34 = (uint64_t)&v28[36 * v31 - 36];
                if ((int)v2 < 5)
                {
LABEL_58:
                  v39 = 0;
                  *(_DWORD *)v15 = v2;
                  v40 = v34 + 40;
                  do
                  {
                    *(_DWORD *)(v40 + 4 * v39) = v39;
                    ++v39;
                  }
                  while (v2 != v39);
                  goto LABEL_60;
                }
LABEL_51:
                v35 = 0;
                v36 = v2 & 0xFFFFFFFE;
                v37 = &v15[36 * v36];
                v38 = v15 + 36;
                do
                {
                  *((_DWORD *)v38 - 9) = 1;
                  *((_DWORD *)v38 - 8) = v35;
                  *(_DWORD *)v38 = 1;
                  *((_DWORD *)v38 + 1) = v35 + 1;
                  v35 += 2;
                  *((_OWORD *)v38 - 1) = xmmword_1003BA9E0;
                  *(_OWORD *)(v38 + 20) = xmmword_1003BA9E0;
                  v38 += 72;
                }
                while (v36 != v35);
                if (v36 != v2)
                {
                  do
                  {
                    *(_DWORD *)v37 = 1;
                    *((_DWORD *)v37 + 1) = v36;
                    *(_OWORD *)(v37 + 20) = xmmword_1003BA9E0;
                    v37 += 36;
                    LODWORD(v36) = v36 + 1;
                  }
                  while ((_DWORD)v2 != (_DWORD)v36);
                }
LABEL_61:
                if ((int)v2 < 1)
                  return result;
                if ((_DWORD)v2 == 1)
                {
                  LODWORD(v42) = 0;
                  v43 = v37;
                }
                else
                {
                  v41 = 0;
                  v42 = v2 & 0xFFFFFFFE;
                  v43 = &v37[36 * v42];
                  v44 = v37 + 36;
                  do
                  {
                    *((_DWORD *)v44 - 9) = 1;
                    *((_DWORD *)v44 - 8) = v41;
                    *(_DWORD *)v44 = 1;
                    *((_DWORD *)v44 + 1) = v41 + 1;
                    v41 += 2;
                    *((_OWORD *)v44 - 1) = xmmword_1003C5BB0;
                    *(_OWORD *)(v44 + 20) = xmmword_1003C5BB0;
                    v44 += 72;
                  }
                  while (v42 != v41);
                  if (v42 == v2)
                    return result;
                }
                do
                {
                  *(_DWORD *)v43 = 1;
                  *((_DWORD *)v43 + 1) = v42;
                  *(_OWORD *)(v43 + 20) = xmmword_1003C5BB0;
                  LODWORD(v42) = v42 + 1;
                  v43 += 36;
                }
                while ((_DWORD)v2 != (_DWORD)v42);
                return result;
              }
            }
            else
            {
              LODWORD(v31) = 0;
              v15 = v28;
            }
            do
            {
              *(_DWORD *)v15 = 1;
              *((_DWORD *)v15 + 1) = v31;
              *(_OWORD *)(v15 + 20) = xmmword_1003C5BA0;
              v15 += 36;
              LODWORD(v31) = v31 + 1;
            }
            while ((_DWORD)v2 != (_DWORD)v31);
            v34 = (uint64_t)(v15 - 36);
            if ((int)v2 < 5)
              goto LABEL_58;
            goto LABEL_51;
          }
        }
        else
        {
          LODWORD(v27) = 0;
          v28 = v25;
        }
        do
        {
          *(_DWORD *)v28 = 1;
          *((_DWORD *)v28 + 1) = v27;
          *(_OWORD *)(v28 + 20) = xmmword_1003C5B90;
          v28 += 36;
          LODWORD(v27) = v27 + 1;
        }
        while ((_DWORD)v2 != (_DWORD)v27);
        goto LABEL_45;
      }
    }
    do
    {
      *(_DWORD *)v25 = 1;
      *((_DWORD *)v25 + 1) = v24;
      *(_OWORD *)(v25 + 20) = xmmword_1003C5B80;
      v25 += 36;
      LODWORD(v24) = v24 + 1;
    }
    while ((_DWORD)v2 != (_DWORD)v24);
    goto LABEL_39;
  }
  if ((*(_DWORD *)(a1 + 96) | 4) == 7)
  {
    v8 = 0;
    *(_OWORD *)result = xmmword_1003C5BC0;
    *(_OWORD *)((char *)result + 20) = xmmword_1003C5B70;
    *(_QWORD *)((char *)result + 36) = 1;
    *(_OWORD *)(result + 7) = xmmword_1003C5B80;
    result[9] = 0x200000001;
    *(_OWORD *)((char *)result + 92) = xmmword_1003C5BD0;
    *(_QWORD *)((char *)result + 108) = 0x100000001;
    *((_OWORD *)result + 8) = xmmword_1003C5BD0;
    result[18] = 1;
    *(_OWORD *)((char *)result + 164) = xmmword_1003C5B90;
    *(_QWORD *)((char *)result + 180) = 1;
    v9 = (_DWORD *)result + 55;
    v10 = 2;
    v11 = 9;
    *((_DWORD *)result + 54) = 3;
    v12 = 2;
    v13 = 7;
    v14 = 3;
    *(_OWORD *)(result + 25) = xmmword_1003C5BA0;
  }
  else
  {
    v10 = 0;
    *(_OWORD *)result = xmmword_1003C5BC0;
    *(_OWORD *)((char *)result + 20) = xmmword_1003C5B70;
    *(_QWORD *)((char *)result + 36) = 1;
    *(_OWORD *)(result + 7) = xmmword_1003C5B80;
    result[9] = 0x100000001;
    *(_OWORD *)((char *)result + 92) = xmmword_1003C5B80;
    *(_QWORD *)((char *)result + 108) = 0x200000001;
    *((_OWORD *)result + 8) = xmmword_1003C5B80;
    result[18] = 1;
    *(_OWORD *)((char *)result + 164) = xmmword_1003C5B90;
    *(_QWORD *)((char *)result + 180) = 0x100000001;
    *(_OWORD *)(result + 25) = xmmword_1003C5B90;
    result[27] = 0x200000001;
    *(_OWORD *)((char *)result + 236) = xmmword_1003C5B90;
    *(_QWORD *)((char *)result + 252) = 1;
    *((_OWORD *)result + 17) = xmmword_1003C5BA0;
    *(_OWORD *)((char *)result + 308) = xmmword_1003C5BA0;
    *(_QWORD *)((char *)result + 324) = 0x200000001;
    v9 = (_DWORD *)result + 91;
    *(_OWORD *)(result + 43) = xmmword_1003C5BA0;
    v8 = 2;
    v11 = 13;
    *((_DWORD *)result + 90) = 3;
    v12 = 3;
    v13 = 11;
    v14 = 5;
    result[36] = 0x100000001;
  }
  *v9 = 0;
  v19 = &result[18 * v14 / 8];
  v19[1] = 0x200000001;
  *(_OWORD *)((char *)v19 + 20) = xmmword_1003BA9E0;
  v20 = (char *)result + 36 * v13;
  *(_DWORD *)v20 = 1;
  *((_DWORD *)v20 + 1) = v10;
  *(_OWORD *)(v20 + 20) = xmmword_1003C5BB0;
  v21 = &result[9 * v12 / 8];
  *v21 = 0x100000001;
  *(_OWORD *)((char *)v21 + 20) = xmmword_1003C5BB0;
  v22 = (char *)result + 36 * v11;
  *(_DWORD *)v22 = 1;
  *((_DWORD *)v22 + 1) = v8;
  *(_OWORD *)(v22 + 20) = xmmword_1003C5BB0;
  return result;
}

void *sub_1003831B8(uint64_t *a1, uint64_t *a2, __int128 *a3, void *__src)
{
  uint64_t v8;
  __int128 v9;
  uint8x16_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  size_t v13;
  uint64_t v14;
  void *result;

  v8 = *a2;
  if (!*a2)
  {
    v8 = sub_10037FD10((uint64_t)a1);
    *a2 = v8;
  }
  v9 = *a3;
  *(_BYTE *)(v8 + 16) = *((_BYTE *)a3 + 16);
  *(_OWORD *)v8 = v9;
  v10 = *(uint8x16_t *)((char *)a3 + 1);
  v11 = vmovl_high_u8(v10);
  v12 = vmovl_u8(*(uint8x8_t *)v10.i8);
  v12.i32[0] = vaddvq_s32(vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v12.i8, *(uint16x4_t *)v11.i8), (int32x4_t)vaddl_high_u16(v12, v11)));
  v13 = v12.u32[0];
  if ((v12.i32[0] - 257) <= 0xFFFFFEFF)
  {
    v14 = *a1;
    *(_DWORD *)(v14 + 40) = 9;
    (*(void (**)(uint64_t *))v14)(a1);
  }
  result = memcpy((void *)(*a2 + 17), __src, v13);
  *(_BYTE *)(*a2 + 273) = 0;
  return result;
}

_QWORD *sub_10038326C(uint64_t *a1, int a2)
{
  uint64_t v3;
  _QWORD *result;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  char *v16;
  uint64_t i;
  uint64_t v18;
  _QWORD *v19;
  unsigned int *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  char *v25;
  size_t v26;
  const void *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  size_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v38;
  __int128 v39;
  _OWORD *v40;
  __int128 v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (a2)
  {
    v3 = *a1;
    *(_DWORD *)(v3 + 40) = 3;
    (*(void (**)(uint64_t *))v3)(a1);
  }
  result = (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 112);
  v5 = result;
  a1[62] = (uint64_t)result;
  *result = sub_1003836EC;
  if (*(_BYTE *)(a1[66] + 16))
  {
    result[1] = sub_100383740;
    v49 = *((unsigned int *)a1 + 85);
    v6 = 5 * v49;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 8 * *((_DWORD *)a1 + 23) * 5 * (int)v49);
    if (*((int *)a1 + 23) < 1)
      return result;
    v7 = result;
    v8 = a1[13];
    v9 = 3 * v49;
    v10 = v6;
    if ((int)v49 <= 0)
    {
      v21 = 0;
      v22 = v5 + 2;
      v23 = 8 * v10;
      v24 = (unsigned int *)(v8 + 28);
      v25 = (char *)&result[(int)v49];
      v26 = 8 * v9;
      do
      {
        v27 = (const void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD))(a1[1] + 16))(a1, 1, (uint64_t)(*((int *)a1 + 86) * (unint64_t)*v24 * *((int *)a1 + 84))/ (int)*(v24 - 5), (3 * v49));
        result = memcpy(v25, v27, v26);
        v22[v21++] = v25;
        v25 += v23;
        v24 += 24;
      }
      while (v21 < *((int *)a1 + 23));
      return result;
    }
    v52 = 8 * v9;
    v11 = 4 * v49;
    v12 = 4 * (int)v49;
    v51 = 8 * v6;
    if (v49 < 0x16)
    {
      v13 = 0;
      v14 = &result[v11];
      v15 = 8 * v9;
      do
      {
        v16 = (char *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a1[1] + 16))(a1, 1, (uint64_t)(*((int *)a1 + 86) * (unint64_t)*(unsigned int *)(v8 + 28) * *((int *)a1 + 84))/ *(int *)(v8 + 8));
        result = memcpy(&v7[(int)v49], v16, v15);
        for (i = 0; i != v49; ++i)
        {
          v7[i] = *(_QWORD *)&v16[8 * (2 * v49) + i * 8];
          v14[i] = *(_QWORD *)&v16[i * 8];
        }
        v15 = v52;
        v5[v13 + 2] = &v7[(int)v49];
        v7 = (_QWORD *)((char *)v7 + v51);
        ++v13;
        v8 += 96;
        v14 = (_QWORD *)((char *)v14 + v51);
      }
      while (v13 < *((int *)a1 + 23));
      return result;
    }
    v28 = 0;
    v48 = &result[v11];
    v50 = 8 * (2 * v49);
    v29 = v48;
    v30 = result;
    v31 = 8 * v9;
    while (1)
    {
      v32 = (char *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a1[1] + 16))(a1, 1, (uint64_t)(*((int *)a1 + 86) * (unint64_t)*(unsigned int *)(v8 + 28) * *((int *)a1 + 84))/ *(int *)(v8 + 8));
      result = memcpy(&v30[(int)v49], v32, v31);
      v33 = 0;
      v34 = (char *)v48 + v51 * v28;
      if ((unint64_t)(v34 - v32) < 0x20)
      {
        v35 = v49;
      }
      else
      {
        v35 = v49;
        if ((unint64_t)(v34 - &v32[v50]) >= 0x20)
        {
          v36 = (char *)v7 + v51 * v28;
          if ((unint64_t)(v32 - v36) >= 0x20 && (unint64_t)(v36 - &v32[v50]) >= 0x20 && (_DWORD)v12 != 0)
          {
            v38 = 0;
            do
            {
              v39 = *(_OWORD *)&v32[v50 + 16 + v38];
              v40 = &v30[v38 / 8];
              *v40 = *(_OWORD *)&v32[v50 + v38];
              v40[1] = v39;
              v41 = *(_OWORD *)&v32[v38 + 16];
              v42 = &v29[v38 / 8];
              *v42 = *(_OWORD *)&v32[v38];
              v42[1] = v41;
              v38 += 32;
            }
            while (((8 * v49) & 0x7FFFFFFE0) != v38);
            v33 = v49 & 0xFFFFFFFC;
            if (v33 == v49)
              goto LABEL_20;
          }
        }
      }
      v43 = v35 - v33;
      v44 = v12 + v33;
      v45 = v33;
      v46 = &v32[v45 * 8];
      do
      {
        v30[v45] = *(_QWORD *)&v32[v50 + v45 * 8];
        v47 = *(_QWORD *)v46;
        v46 += 8;
        v30[v44++] = v47;
        ++v45;
        --v43;
      }
      while (v43);
LABEL_20:
      v31 = v52;
      v5[v28 + 2] = &v30[(int)v49];
      v30 = (_QWORD *)((char *)v30 + v51);
      ++v28;
      v8 += 96;
      v29 = (_QWORD *)((char *)v29 + v51);
      if (v28 >= *((int *)a1 + 23))
        return result;
    }
  }
  result[1] = sub_1003839D0;
  if (*((int *)a1 + 23) >= 1)
  {
    v18 = 0;
    v19 = result + 2;
    v20 = (unsigned int *)(a1[13] + 28);
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD))(a1[1] + 16))(a1, 1, (uint64_t)(*((int *)a1 + 86) * (unint64_t)*v20 * *((int *)a1 + 84)) / (int)*(v20 - 5), *((unsigned int *)a1 + 85));
      v19[v18++] = result;
      v20 += 24;
    }
    while (v18 < *((int *)a1 + 23));
  }
  return result;
}

_QWORD *sub_1003836EC(_QWORD *result, int a2)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;

  v2 = result;
  v3 = (_DWORD *)result[62];
  if (a2)
  {
    v4 = *result;
    *(_DWORD *)(v4 + 40) = 3;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))v4)(result);
  }
  v5 = *((_DWORD *)v2 + 13);
  v3[25] = 0;
  v3[26] = 0;
  v3[24] = v5;
  v3[27] = 2 * *((_DWORD *)v2 + 85);
  return result;
}

char *sub_100383740(char *result, uint64_t a2, _DWORD *a3, unsigned int a4, uint64_t a5, unsigned int *a6, unsigned int a7)
{
  unsigned int v7;
  unsigned int v9;
  char *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t j;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t i;
  int v25;
  int v26;
  char *v27;
  size_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v35;
  _DWORD *v38;

  if (*a6 < a7)
  {
    v7 = a7;
    v9 = a4;
    v11 = result;
    v12 = (_DWORD *)*((_QWORD *)result + 62);
    v35 = 3 * *((_DWORD *)result + 85);
    v38 = v12 + 4;
    do
    {
      v14 = *a3;
      if (v9 <= v14)
      {
        if (v12[24])
          return result;
        v21 = v12[25];
        v22 = v12[27];
        if (v21 < v22)
        {
          v23 = *((_DWORD *)v11 + 23);
          if (v23 >= 1)
          {
            for (i = 0; i < v23; ++i)
            {
              v25 = v12[25];
              v26 = v12[27];
              if (v25 < v26)
              {
                v27 = *(char **)&v12[2 * i + 4];
                v28 = *((unsigned int *)v11 + 12);
                v29 = v25 - 1;
                do
                  sub_1003A7EB8(v27, v29, (uint64_t)v27, v25++, 1, v28);
                while (v26 != v25);
                v23 = *((_DWORD *)v11 + 23);
              }
            }
            v22 = v12[27];
            v7 = a7;
            v9 = a4;
          }
          v12[25] = v22;
          v13 = *a6;
LABEL_32:
          result = (char *)(*(uint64_t (**)(char *, _DWORD *, _QWORD, uint64_t, uint64_t))(*((_QWORD *)v11 + 66)
                                                                                                 + 8))(v11, v38, v12[26], a5, v13);
          ++*a6;
          v30 = *((_DWORD *)v11 + 85);
          v31 = v12[25];
          v32 = v12[26] + v30;
          if (v32 >= v35)
            v32 = 0;
          v12[26] = v32;
          if (v31 >= v35)
          {
            v31 = 0;
            v12[25] = 0;
          }
          v12[27] = v31 + v30;
          LODWORD(v13) = *a6;
          continue;
        }
      }
      else
      {
        if (v12[27] - v12[25] >= v9 - v14)
          v15 = v9 - v14;
        else
          v15 = v12[27] - v12[25];
        result = (char *)(*(uint64_t (**)(char *, uint64_t, _DWORD *))(*((_QWORD *)v11 + 65) + 8))(v11, a2 + 8 * v14, v38);
        if (v12[24] == *((_DWORD *)v11 + 13))
        {
          v16 = *((_DWORD *)v11 + 23);
          if (v16 >= 1)
          {
            v17 = *((_DWORD *)v11 + 85);
            if (v17 >= 1)
            {
              for (j = 0; j < v16; ++j)
              {
                if (v17 >= 1)
                {
                  v19 = 0;
                  v20 = -1;
                  do
                  {
                    result = sub_1003A7EB8(*(char **)&v12[2 * j + 4], 0, *(_QWORD *)&v12[2 * j + 4], v20, 1, *((unsigned int *)v11 + 12));
                    v17 = *((_DWORD *)v11 + 85);
                    ++v19;
                    --v20;
                  }
                  while (v19 < v17);
                  v16 = *((_DWORD *)v11 + 23);
                }
              }
            }
          }
        }
        *a3 += v15;
        v21 = v12[25] + v15;
        v12[24] -= v15;
        v12[25] = v21;
        v22 = v12[27];
        v9 = a4;
      }
      v13 = *a6;
      if (v21 == v22)
        goto LABEL_32;
    }
    while (v13 < v7);
  }
  return result;
}

char *sub_1003839D0(char *result, uint64_t a2, unsigned int *a3, unsigned int a4, uint64_t a5, unsigned int *a6, unsigned int a7)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v21;
  uint64_t i;
  int v23;
  int v24;
  char *v25;
  size_t v26;
  int v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  char *v33;
  size_t v34;
  int v35;
  int v36;
  uint64_t v41;

  v7 = *a3;
  if (*a3 < a4)
  {
    v8 = a7;
    v10 = a5;
    v11 = a4;
    v13 = a2;
    v14 = result;
    v15 = *((_QWORD *)result + 62);
    v41 = v15 + 16;
    do
    {
      if (*a6 >= v8)
        return result;
      if (*((_DWORD *)v14 + 85) - *(_DWORD *)(v15 + 100) >= v11 - v7)
        v16 = v11 - v7;
      else
        v16 = *((_DWORD *)v14 + 85) - *(_DWORD *)(v15 + 100);
      result = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*((_QWORD *)v14 + 65) + 8))(v14, v13 + 8 * v7, v41);
      *a3 += v16;
      v17 = *(_DWORD *)(v15 + 100) + v16;
      v18 = *(_DWORD *)(v15 + 96) == v16;
      *(_DWORD *)(v15 + 96) -= v16;
      *(_DWORD *)(v15 + 100) = v17;
      v19 = *((_DWORD *)v14 + 85);
      if (v18 && v17 < v19)
      {
        v21 = *((_DWORD *)v14 + 23);
        if (v21 >= 1)
        {
          for (i = 0; i < v21; ++i)
          {
            v23 = *(_DWORD *)(v15 + 100);
            v24 = *((_DWORD *)v14 + 85);
            if (v23 < v24)
            {
              v25 = *(char **)(v15 + 8 * i + 16);
              v26 = *((unsigned int *)v14 + 12);
              v27 = v23 - 1;
              do
                sub_1003A7EB8(v25, v27, (uint64_t)v25, v23++, 1, v26);
              while (v24 != v23);
              v21 = *((_DWORD *)v14 + 23);
            }
          }
          v19 = *((_DWORD *)v14 + 85);
          v8 = a7;
          v10 = a5;
          v11 = a4;
          v13 = a2;
        }
        *(_DWORD *)(v15 + 100) = v19;
      }
      else if (v17 != v19)
      {
        if (*(_DWORD *)(v15 + 96))
          goto LABEL_3;
        goto LABEL_25;
      }
      result = (char *)(*(uint64_t (**)(char *, uint64_t, _QWORD, uint64_t, _QWORD))(*((_QWORD *)v14 + 66) + 8))(v14, v41, 0, v10, *a6);
      *(_DWORD *)(v15 + 100) = 0;
      ++*a6;
      if (*(_DWORD *)(v15 + 96))
        goto LABEL_3;
LABEL_25:
      if (*a6 < v8)
      {
        v28 = *((_DWORD *)v14 + 23);
        if (v28 >= 1)
        {
          v29 = 0;
          v30 = (_DWORD *)*((_QWORD *)v14 + 13);
          do
          {
            v31 = v30[10] * v30[3] / *((_DWORD *)v14 + 87);
            v32 = *a6 * v31;
            if (v32 < (int)(v31 * v8))
            {
              v33 = *(char **)(v10 + 8 * v29);
              v34 = (v30[9] * v30[7]);
              v35 = v32 - 1;
              v36 = v31 * (v8 - *a6);
              do
              {
                result = sub_1003A7EB8(v33, v35, (uint64_t)v33, v32++, 1, v34);
                --v36;
              }
              while (v36);
              v28 = *((_DWORD *)v14 + 23);
              v8 = a7;
              v10 = a5;
            }
            ++v29;
            v30 += 24;
          }
          while (v29 < v28);
        }
        *a6 = v8;
        return result;
      }
LABEL_3:
      v7 = *a3;
    }
    while (*a3 < v11);
  }
  return result;
}

uint64_t sub_100383C54(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;

  result = (*(uint64_t (**)(void))a1[1])();
  v3 = result;
  a1[66] = result;
  *(_QWORD *)result = nullsub_101;
  *(_QWORD *)(result + 8) = sub_100383E94;
  *(_BYTE *)(result + 16) = 0;
  if (*((_BYTE *)a1 + 291))
  {
    v4 = *a1;
    *(_DWORD *)(v4 + 40) = 26;
    result = (*(uint64_t (**)(uint64_t *))v4)(a1);
  }
  if (*((int *)a1 + 23) >= 1)
  {
    v5 = 0;
    v6 = v3 + 154;
    v7 = (_DWORD *)(a1[13] + 40);
    v8 = 1;
    do
    {
      v9 = *(v7 - 1) * *(v7 - 8);
      v10 = *((_DWORD *)a1 + 86);
      v11 = *v7 * *(v7 - 7) / *((_DWORD *)a1 + 87);
      v12 = *((_DWORD *)a1 + 84);
      v13 = *((_DWORD *)a1 + 85);
      *(_DWORD *)(v6 + 4 * v5 - 50) = v11;
      v14 = v9 / v10;
      if (v12 == v14 && v13 == v11)
      {
        v15 = v6 + 8 * v5;
        if (*((_DWORD *)a1 + 74))
        {
          *(_QWORD *)(v15 - 130) = sub_100383F38;
          *(_BYTE *)(v3 + 16) = 1;
        }
        else
        {
          *(_QWORD *)(v15 - 130) = sub_100384564;
        }
      }
      else if (v12 == 2 * v14 && v13 == v11)
      {
        v8 = 0;
        *(_QWORD *)(v6 + 8 * v5 - 130) = sub_1003845F8;
      }
      else if (v12 == 2 * v14 && v13 == 2 * v11)
      {
        v21 = v6 + 8 * v5;
        if (*((_DWORD *)a1 + 74))
        {
          *(_QWORD *)(v21 - 130) = sub_1003846E8;
          *(_BYTE *)(v3 + 16) = 1;
        }
        else
        {
          *(_QWORD *)(v21 - 130) = sub_1003850F8;
        }
      }
      else
      {
        v18 = v12 / v14;
        if (v12 % v14 || (v19 = v13 / v11, v13 % v11))
        {
          v20 = *a1;
          *(_DWORD *)(v20 + 40) = 39;
          result = (*(uint64_t (**)(uint64_t *))v20)(a1);
        }
        else
        {
          v8 = 0;
          *(_QWORD *)(v6 + 8 * v5 - 130) = sub_10038520C;
          v22 = (_BYTE *)(v6 + v5);
          *(v22 - 10) = v18;
          *v22 = v19;
        }
      }
      v7 += 24;
      ++v5;
    }
    while (v5 < *((int *)a1 + 23));
    if (*((_DWORD *)a1 + 74))
    {
      if (!v8)
      {
        v23 = *a1;
        *(_DWORD *)(v23 + 40) = 101;
        return (*(uint64_t (**)(uint64_t *, _QWORD))(v23 + 8))(a1, 0);
      }
    }
  }
  return result;
}

uint64_t sub_100383E94(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(int *)(result + 92) >= 1)
  {
    v8 = result;
    v9 = 0;
    v10 = *(_QWORD *)(result + 104);
    v11 = a3;
    v12 = *(_QWORD *)(result + 528) + 104;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8 * v9 - 80))(v8, v10, *(_QWORD *)(a2 + 8 * v9) + 8 * v11, *(_QWORD *)(a4 + 8 * v9) + 8 * (*(_DWORD *)(v12 + 4 * v9) * a5));
      ++v9;
      v10 += 96;
    }
    while (v9 < *(int *)(v8 + 92));
  }
  return result;
}

unint64_t sub_100383F38(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  _BYTE *v26;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  unsigned int v38;
  int64x2_t *v39;
  uint8x16_t *v40;
  uint8x16_t *v41;
  unsigned __int8 *v42;
  uint8x16_t *v43;
  unsigned __int8 *v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  int64x2_t *v50;
  int32x4_t v51;
  int32x4_t v52;
  uint8x8_t *v53;
  uint64_t v54;
  uint8x16_t v55;
  uint16x8_t v56;
  int64x2_t v57;
  uint64x2_t v58;
  int64x2_t v59;
  uint32x4_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  uint16x8_t v64;
  uint32x4_t v65;
  int64x2_t v66;
  uint32x4_t v67;
  uint8x16_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  int8x16_t v75;
  uint32x4_t v76;
  int32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  uint32x4_t v80;
  uint32x4_t v81;
  uint32x4_t v82;
  uint32x4_t v83;
  uint32x4_t v84;
  uint64x2_t v85;
  uint64x2_t v86;
  uint64x2_t v87;
  uint64x2_t v88;
  uint64x2_t v89;
  uint64x2_t v90;
  uint64x2_t v91;
  uint64x2_t v92;
  uint64x2_t v93;
  uint64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int64x2_t v106;
  int64x2_t v107;
  uint64_t v108;
  uint64x2_t v109;
  uint64x2_t v110;
  int v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  _BYTE *v122;
  unsigned __int8 **v123;
  unsigned __int8 *v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  int v127;
  int v128;
  int8x16x4_t v129;
  int8x16x4_t v130;

  v6 = result;
  v7 = *(_DWORD *)(a2 + 36) * *(_DWORD *)(a2 + 28);
  v8 = *(_DWORD *)(result + 340);
  v9 = *(unsigned int *)(result + 48);
  if (v8 >= -1 && v7 - (int)v9 >= 1)
  {
    v11 = (uint64_t *)(a3 - 8);
    v12 = (v8 + 2);
    do
    {
      v13 = *v11++;
      result = (unint64_t)memset((void *)(v13 + v9), *(unsigned __int8 *)(v13 + v9 - 1), (v7 + ~(_DWORD)v9) + 1);
      --v12;
    }
    while (v12);
    v8 = *(_DWORD *)(v6 + 340);
  }
  if (v8 >= 1)
  {
    v14 = *(int *)(v6 + 296);
    v15 = 0x10000 - (v14 << 9);
    v16 = ((_DWORD)v14 << 6);
    v17 = (v7 - 2);
    if (v7 != 2)
    {
      v18 = 0;
      v19 = (v7 - 3);
      v20 = v19 + 2;
      v21 = v19 + 3;
      v22 = v17 & 0xFFFFFFF0;
      v23 = vdupq_n_s64(v15);
      v24 = vdupq_n_s64(v16);
      v25 = vdupq_n_s64(0x8000uLL);
      while (1)
      {
        v26 = *(_BYTE **)(a4 + 8 * v18);
        v27 = (unsigned __int8 **)(a3 + 8 * v18);
        v28 = *(v27 - 1);
        v29 = (uint64_t)*v27;
        ++v18;
        v30 = *(unsigned __int8 **)(a3 + 8 * v18);
        v31 = v28 + 1;
        v32 = v30 + 1;
        v33 = **v27;
        v34 = *v30 + *v28 + v33;
        v35 = (uint64_t)*v27;
        v37 = *(unsigned __int8 *)(v35 + 1);
        v36 = (unsigned __int8 *)(v35 + 1);
        v38 = v30[1] + v28[1] + v37;
        *v26 = ((v38 - v33 + 2 * v34) * v16 + (_DWORD)v15 * v33 + 0x8000) >> 16;
        v39 = (int64x2_t *)(v26 + 1);
        if (v17 < 0x10)
          break;
        v40 = (uint8x16_t *)&v26[v20];
        v41 = (uint8x16_t *)(v28 + 2);
        v42 = &v28[v21];
        v43 = (uint8x16_t *)(v30 + 2);
        v44 = &v30[v21];
        v45 = v39 >= (int64x2_t *)v42 || v41 >= v40;
        v46 = !v45;
        v47 = v39 >= (int64x2_t *)v44 || v43 >= v40;
        v48 = !v47;
        v49 = v36 >= (unsigned __int8 *)v40 || (unint64_t)v39 >= v29 + v21;
        if (!v49 || v46 || v48)
          break;
        v50 = (int64x2_t *)((char *)v39 + v22);
        v32 += v22;
        v31 += v22;
        v36 += v22;
        v51 = vdupq_n_s32(v34);
        v52 = vdupq_n_s32(v38);
        v53 = (uint8x8_t *)(v29 + 2);
        v54 = v17 & 0xFFFFFFF0;
        do
        {
          v55 = *(uint8x16_t *)((char *)&v53[-1].u32[1] + 3);
          v56 = vmovl_high_u8(v55);
          v57 = (int64x2_t)vmovl_high_u16(v56);
          v58.i64[0] = v57.u32[2];
          v58.i64[1] = v57.u32[3];
          v59 = (int64x2_t)v58;
          v60 = vmovl_u16(*(uint16x4_t *)v56.i8);
          v58.i64[0] = v60.u32[2];
          v58.i64[1] = v60.u32[3];
          v61 = (int64x2_t)v58;
          v58.i64[0] = v57.u32[0];
          v58.i64[1] = v57.u32[1];
          v62 = (int64x2_t)v58;
          v58.i64[0] = v60.u32[0];
          v58.i64[1] = v60.u32[1];
          v63 = (int64x2_t)v58;
          v64 = vmovl_u8(*(uint8x8_t *)v55.i8);
          v65 = vmovl_high_u16(v64);
          v58.i64[0] = v65.u32[2];
          v58.i64[1] = v65.u32[3];
          v66 = (int64x2_t)v58;
          v58.i64[0] = v65.u32[0];
          v58.i64[1] = v65.u32[1];
          v67 = vmovl_u16(*(uint16x4_t *)v64.i8);
          v68 = *v41++;
          v69 = v68;
          v70 = *v43++;
          v71 = vaddl_u8(*(uint8x8_t *)v70.i8, *(uint8x8_t *)v69.i8);
          v72 = vaddl_high_u8(v70, v69);
          v73 = vmovl_u8(*v53);
          v74 = vmovl_high_u8(*(uint8x16_t *)v53->i8);
          v75 = (int8x16_t)vaddl_u16(*(uint16x4_t *)v71.i8, *(uint16x4_t *)v73.i8);
          v76 = (uint32x4_t)vextq_s8((int8x16_t)v52, v75, 0xCuLL);
          v77 = vuzp2q_s32(v51, v52);
          v52 = (int32x4_t)vaddl_high_u16(v72, v74);
          v78 = (int8x16_t)vaddl_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v74.i8);
          v79 = (int8x16_t)vaddl_high_u16(v71, v73);
          v80 = (uint32x4_t)vextq_s8(v75, v79, 0xCuLL);
          v81 = (uint32x4_t)vextq_s8(v79, v78, 0xCuLL);
          v74.i64[0] = vuzp2q_s32(v77, v51).u64[0];
          v51 = (int32x4_t)vextq_s8(v78, (int8x16_t)v52, 0xCuLL);
          v82 = (uint32x4_t)vextq_s8(v78, (int8x16_t)v52, 8uLL);
          v83 = (uint32x4_t)vextq_s8(v79, v78, 8uLL);
          v84 = (uint32x4_t)vextq_s8(v75, v79, 8uLL);
          v85 = vaddl_high_u32(v82, (uint32x4_t)v51);
          v86 = vaddl_high_u32(v83, v81);
          v87 = vaddl_u32(*(uint32x2_t *)v83.i8, *(uint32x2_t *)v81.i8);
          v88 = vaddl_high_u32(v84, v80);
          v89 = vsubw_u32(vaddl_u32(*(uint32x2_t *)v84.i8, *(uint32x2_t *)v80.i8), *(uint32x2_t *)v65.i8);
          v90 = vsubw_high_u32(v88, v65);
          v91 = vsubw_u32(v87, *(uint32x2_t *)v60.i8);
          v92 = vsubw_u32(vaddl_u32(*(uint32x2_t *)v82.i8, *(uint32x2_t *)v51.i8), *(uint32x2_t *)v57.i8);
          v93 = vsubw_high_u32(v86, v60);
          v94 = vsubw_u32(vaddl_u32(*(uint32x2_t *)v74.i8, *(uint32x2_t *)v76.i8), *(uint32x2_t *)v67.i8);
          v95 = (int64x2_t)vaddw_high_u32(v93, (uint32x4_t)v78);
          v96 = (int64x2_t)vaddw_u32(v91, *(uint32x2_t *)v78.i8);
          v97 = (int64x2_t)vaddw_high_u32(v90, (uint32x4_t)v79);
          v98 = (int64x2_t)vaddw_u32(v89, *(uint32x2_t *)v79.i8);
          v99 = (int64x2_t)vaddw_high_u32(vsubw_high_u32(v85, (uint32x4_t)v57), (uint32x4_t)v52);
          v100 = (int64x2_t)vaddw_u32(v92, *(uint32x2_t *)v52.i8);
          v57.i64[0] = v23.i64[0] * v67.u32[0];
          v101.i64[0] = v23.i64[0] * v67.u32[2];
          v102.i64[0] = v23.i64[0] * v58.i64[0];
          v66.i64[0] *= v23.i64[0];
          v63.i64[0] *= v23.i64[0];
          v57.i64[1] = v23.i64[1] * v67.u32[1];
          v101.i64[1] = v23.i64[1] * v67.u32[3];
          v62.i64[0] *= v23.i64[0];
          v102.i64[1] = v23.i64[1] * v58.i64[1];
          v61.i64[0] *= v23.i64[0];
          v66.i64[1] *= v23.i64[1];
          v63.i64[1] *= v23.i64[1];
          v62.i64[1] *= v23.i64[1];
          v59.i64[0] *= v23.i64[0];
          v61.i64[1] *= v23.i64[1];
          v59.i64[1] *= v23.i64[1];
          v103 = v96.i64[1];
          v104 = v96.i64[0];
          v96.i64[0] = v98.i64[0] * v24.i64[0];
          v97.i64[0] *= v24.i64[0];
          v98.i64[0] = v104 * v24.i64[0];
          v95.i64[0] *= v24.i64[0];
          v105 = v99.i64[0] * v24.i64[0];
          v99.i64[0] = v100.i64[0] * v24.i64[0];
          v106 = (int64x2_t)vaddw_u32(v94, *(uint32x2_t *)v75.i8);
          v100.i64[0] = v105;
          v96.i64[1] = v98.i64[1] * v24.i64[1];
          v97.i64[1] *= v24.i64[1];
          v106.i64[0] *= v24.i64[0];
          v58.i64[0] = v75.u32[0];
          v58.i64[1] = v75.u32[1];
          v98.i64[1] = v103 * v24.i64[1];
          v107 = (int64x2_t)vaddw_high_u32(vsubw_high_u32(vaddw_high_u32(v58, v76), v67), (uint32x4_t)v75);
          v95.i64[1] *= v24.i64[1];
          v108 = v99.i64[1] * v24.i64[1];
          v106.i64[1] *= v24.i64[1];
          v99.i64[1] = v100.i64[1] * v24.i64[1];
          v100.i64[1] = v108;
          v107.i64[0] *= v24.i64[0];
          v107.i64[1] *= v24.i64[1];
          v109 = (uint64x2_t)vaddq_s64(vaddq_s64(v66, v25), v97);
          v110 = (uint64x2_t)vaddq_s64(vaddq_s64(v57, v25), v106);
          v130.val[3] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64(v59, v25), v100), 0x10uLL);
          v130.val[1] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64(v61, v25), v95), 0x10uLL);
          v130.val[2] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64(v62, v25), v99), 0x10uLL);
          v130.val[0] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64(v63, v25), v98), 0x10uLL);
          v129.val[3] = (int8x16_t)vshrq_n_u64(v109, 0x10uLL);
          v129.val[2] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64(v102, v25), v96), 0x10uLL);
          v129.val[1] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64(v101, v25), v107), 0x10uLL);
          v129.val[0] = (int8x16_t)vshrq_n_u64(v110, 0x10uLL);
          v107.i64[0] = vqtbl4q_s8(v129, (int8x16_t)xmmword_1003C3230).u64[0];
          v107.i64[1] = vqtbl4q_s8(v130, (int8x16_t)xmmword_1003C3230).u64[0];
          *v39++ = v107;
          v53 += 2;
          v54 -= 16;
        }
        while (v54);
        v38 = v52.u32[3];
        if (v22 != v17)
        {
          v34 = v52.u32[2];
          v111 = v17 - (v17 & 0xFFFFFFF0);
          goto LABEL_38;
        }
        result = v51.u32[3];
LABEL_12:
        v50->i8[0] = ((result + 2 * v38 - *v36) * v16 + (_DWORD)v15 * *v36 + 0x8000) >> 16;
        if (v18 >= *(int *)(v6 + 340))
          return result;
      }
      v50 = v39;
      v111 = v17;
LABEL_38:
      v112 = v32 + 1;
      v113 = v31 + 1;
      do
      {
        v114 = v36;
        v115 = v38;
        v117 = *++v36;
        v116 = v117;
        v119 = *v113++;
        v118 = v119;
        v120 = *v112++;
        v38 = v120 + v118 + v116;
        v50->i8[0] = ((v34 + v115 - *v114 + v38) * v16 + (_DWORD)v15 * *v114 + 0x8000) >> 16;
        v50 = (int64x2_t *)((char *)v50 + 1);
        v34 = v115;
        --v111;
      }
      while (v111);
      result = v115;
      goto LABEL_12;
    }
    v121 = 0;
    do
    {
      v122 = *(_BYTE **)(a4 + 8 * v121);
      v123 = (unsigned __int8 **)(a3 + 8 * v121);
      v124 = *(v123 - 1);
      v125 = *v123;
      v126 = v123[1];
      v127 = *v126;
      v128 = *v125;
      LODWORD(v126) = v126[1] + v124[1] + v125[1];
      LODWORD(v124) = v127 + *v124 + v128;
      *v122 = (((_DWORD)v126 - v128 + 2 * (_DWORD)v124) * v16 + v15 * v128 + 0x8000) >> 16;
      ++v121;
      v122[1] = (((_DWORD)v124 + 2 * (_DWORD)v126 - v125[1]) * (_DWORD)v16 + v15 * v125[1] + 0x8000) >> 16;
    }
    while (v121 < *(int *)(v6 + 340));
  }
  return result;
}

void *sub_100384564(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t *v4;
  void *result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  size_t v12;
  uint64_t v13;

  v4 = (uint64_t *)a4;
  result = sub_1003A7EB8(a3, 0, a4, 0, *(_DWORD *)(a1 + 340), *(unsigned int *)(a1 + 48));
  v8 = *(unsigned int *)(a1 + 340);
  v9 = *(unsigned int *)(a1 + 48);
  v10 = *(_DWORD *)(a2 + 36) * *(_DWORD *)(a2 + 28);
  if ((int)v8 >= 1 && v10 - (int)v9 >= 1)
  {
    v12 = (v10 + ~(_DWORD)v9) + 1;
    do
    {
      v13 = *v4++;
      result = memset((void *)(v13 + v9), *(unsigned __int8 *)(v13 + v9 - 1), v12);
      --v8;
    }
    while (v8);
  }
  return result;
}

unsigned int *sub_1003845F8(unsigned int *result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  unsigned __int8 *v17;
  int v18;

  v6 = result;
  v7 = *(_DWORD *)(a2 + 36) * *(_DWORD *)(a2 + 28);
  v8 = result[85];
  v9 = result[12];
  if ((int)v8 >= 1 && 2 * v7 - (int)v9 >= 1)
  {
    v11 = a3;
    do
    {
      v12 = *v11++;
      result = (unsigned int *)memset((void *)(v12 + v9), *(unsigned __int8 *)(v12 + v9 - 1), (2 * v7 + ~(_DWORD)v9) + 1);
      --v8;
    }
    while (v8);
    LODWORD(v8) = v6[85];
  }
  if ((int)v8 >= 1 && v7 != 0)
  {
    v14 = 0;
    do
    {
      v15 = 0;
      v16 = *(_BYTE **)(a4 + 8 * v14);
      v17 = (unsigned __int8 *)a3[v14];
      v18 = v7;
      do
      {
        *v16++ = (v15 + *v17 + v17[1]) >> 1;
        v15 ^= 1u;
        v17 += 2;
        --v18;
      }
      while (v18);
      ++v14;
    }
    while (v14 < (int)v6[85]);
  }
  return result;
}

unsigned __int8 *sub_1003846E8(unsigned __int8 *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64x2_t *v24;
  int v25;
  _BYTE *v26;
  unsigned __int8 **v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64x2_t *v37;
  unint64_t v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  uint64x2_t v60;
  int8x16_t v61;
  uint64x2_t v62;
  int8x16_t v63;
  uint64x2_t v64;
  const char *v65;
  uint64x2_t v66;
  uint64x2_t v67;
  uint64x2_t v68;
  uint64x2_t v69;
  uint32x4_t v70;
  uint32x4_t v71;
  uint64x2_t v72;
  uint32x4_t v73;
  uint32x4_t v74;
  uint64x2_t v75;
  uint64x2_t v76;
  uint64x2_t v77;
  uint64x2_t v78;
  uint32x4_t v79;
  uint32x4_t v80;
  uint32x4_t v81;
  const char *v82;
  uint64x2_t v83;
  uint32x4_t v84;
  uint32x4_t v85;
  uint32x4_t v86;
  uint32x4_t v87;
  uint32x4_t v88;
  uint32x4_t v89;
  uint64x2_t v90;
  uint64x2_t v91;
  uint64x2_t v92;
  uint64x2_t v93;
  uint64x2_t v94;
  uint64x2_t v95;
  const char *v96;
  uint32x4_t v97;
  uint64x2_t v98;
  uint32x4_t v99;
  uint64x2_t v100;
  uint64x2_t v101;
  uint64x2_t v102;
  uint32x4_t v103;
  uint64x2_t v104;
  uint64x2_t v105;
  uint64x2_t v106;
  uint32x4_t v107;
  uint64x2_t v108;
  uint64x2_t v109;
  uint32x4_t v110;
  uint64x2_t v111;
  uint32x4_t v112;
  uint64x2_t v113;
  uint64x2_t v114;
  uint32x4_t v115;
  uint64x2_t v116;
  uint32x4_t v117;
  uint32x4_t v118;
  uint32x4_t v119;
  uint32x4_t v120;
  uint64x2_t v121;
  uint64x2_t v122;
  uint64x2_t v123;
  uint64x2_t v124;
  uint32x4_t v125;
  uint32x4_t v126;
  uint32x4_t v127;
  uint64x2_t v128;
  uint64x2_t v129;
  uint64x2_t v130;
  uint32x4_t v131;
  uint32x4_t v132;
  uint32x4_t v133;
  uint64x2_t v134;
  uint64x2_t v135;
  uint64x2_t v136;
  uint32x4_t v137;
  uint32x4_t v138;
  int64x2_t v139;
  int64x2_t v140;
  uint32x4_t v141;
  uint32x4_t v142;
  uint64_t v143;
  uint32x4_t v144;
  uint32x4_t v145;
  uint64x2_t v146;
  uint64_t v147;
  uint64_t v148;
  uint32x4_t v149;
  uint64x2_t v150;
  uint64_t v151;
  uint64_t v152;
  int64x2_t v153;
  uint64x2_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64x2_t v157;
  uint64_t v158;
  int64x2_t v159;
  int64x2_t v160;
  uint64_t v161;
  uint32x4_t v162;
  uint32x4_t v163;
  uint64x2_t v164;
  uint64_t v165;
  uint64_t v166;
  uint32x4_t v167;
  uint64x2_t v168;
  uint64x2_t v169;
  uint64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  uint64x2_t v175;
  uint64x2_t v176;
  int64x2_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int64x2_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64x2_t v186;
  uint64x2_t v187;
  uint64x2_t v188;
  uint64x2_t v189;
  uint64x2_t v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v207;
  unsigned __int8 *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int8x16_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64x2_t v220;
  uint64x2_t v221;
  uint64_t v222;
  int8x16_t v223;
  uint64x2_t v224;
  int8x16_t v225;
  uint64x2_t v226;
  uint64x2_t v227;
  uint64x2_t v228;
  uint64_t v229;
  uint64x2_t *v230;
  int8x16x2_t v231;
  int8x16x2_t v232;
  int8x16x2_t v233;
  int8x16x2_t v234;
  int8x16x2_t v235;
  int8x16x2_t v236;
  int8x16x2_t v237;
  int8x16x2_t v238;

  v5 = a3;
  v6 = result;
  v7 = *(_DWORD *)(a2 + 36) * *(_DWORD *)(a2 + 28);
  v8 = *((_DWORD *)result + 85);
  v9 = *((unsigned int *)result + 12);
  if (v8 >= -1 && 2 * v7 - (int)v9 >= 1)
  {
    v11 = (uint64_t *)(a3 - 8);
    v12 = (v8 + 2);
    do
    {
      v13 = *v11++;
      result = (unsigned __int8 *)memset((void *)(v13 + v9), *(unsigned __int8 *)(v13 + v9 - 1), (2 * v7 + ~(_DWORD)v9) + 1);
      --v12;
    }
    while (v12);
    v8 = *((_DWORD *)v6 + 85);
  }
  if (v8 >= 1)
  {
    v14 = 0;
    v15 = 0;
    v16 = *((_DWORD *)v6 + 74);
    v17 = (-80 * v16 + 0x4000);
    v18 = (16 * v16);
    v19 = (v7 - 2);
    v20 = (v7 - 3);
    v21 = v20 + 2;
    v213 = 2 * v20 + 5;
    v203 = 2 * (v19 & 0xFFFFFFF0);
    v22 = (int8x16_t)xmmword_1003BCAB0;
    v23 = (int8x16_t)xmmword_1003BCAA0;
    v212 = v19 & 0xFFFFFFF0;
    v202 = v19 - (v19 & 0xFFFFFFF0);
    v209 = v5;
    v210 = a4;
    v207 = v17;
    v208 = v6;
    v205 = v19;
    v206 = v18;
    v204 = v20 + 2;
    v217 = vdupq_n_s64(0x8000uLL);
    v215 = vdupq_n_s64(v18);
    v216 = vdupq_n_s64(v17);
    v214 = (int8x16_t)vdupq_n_s64(0x1FFFFFFFEuLL);
    do
    {
      v26 = *(_BYTE **)(a4 + 8 * v15);
      v27 = (unsigned __int8 **)(v5 + 8 * v14);
      v29 = *(v27 - 1);
      v28 = (uint64_t)*v27;
      v30 = *(unsigned __int8 **)(v5 + ((8 * v14) | 8));
      v14 += 2;
      v31 = *(unsigned __int8 **)(v5 + 8 * v14);
      v32 = *v27 + 1;
      v33 = *v30 + **v27;
      result = *v27 + 2;
      v34 = v30 + 2;
      v35 = v29 + 2;
      v36 = v31 + 2;
      *v26 = ((*v31 + *v29 + v29[2] + v31[2] + 2 * (v33 + *v29 + v29[1] + *v31 + v31[1] + *result + v30[2]))
            * (_DWORD)v18
            + (v33 + *v32 + v30[1]) * v17
            + 0x8000) >> 16;
      v37 = (uint64x2_t *)(v26 + 1);
      if ((_DWORD)v19)
      {
        if (v19 < 0x10)
          goto LABEL_44;
        v38 = (unint64_t)&v26[v21];
        v39 = v37 >= (uint64x2_t *)&v30[v213] || (unint64_t)(v30 + 1) >= v38;
        v40 = !v39;
        v41 = v37 >= (uint64x2_t *)&v29[v213] || (unint64_t)(v29 + 1) >= v38;
        v42 = !v41;
        v43 = v37 >= (uint64x2_t *)&v31[v213] || (unint64_t)(v31 + 1) >= v38;
        v44 = !v43;
        v45 = (unint64_t)v32 >= v38 || (unint64_t)v37 >= v28 + v213;
        if (!v45 || v40 || v42 || v44)
        {
LABEL_44:
          v24 = v37;
          v191 = v19;
        }
        else
        {
          v211 = v15;
          v46 = v212;
          v24 = (uint64x2_t *)((char *)v37 + v212);
          v36 += v203;
          v35 += v203;
          v34 += v203;
          result += v203;
          v47 = (const char *)(v28 + 3);
          v48 = (const char *)(v30 + 3);
          v49 = (const char *)(v31 + 3);
          v50 = (const char *)(v29 + 3);
          do
          {
            v229 = v46;
            v230 = v37;
            v51 = v47 - 2;
            v234 = vld2q_s8(v51);
            v233 = vld2q_s8(v47);
            v47 += 32;
            v52 = (uint32x4_t)vqtbl1q_s8(v234.val[1], (int8x16_t)xmmword_1003BCAC0);
            v53 = (uint32x4_t)vqtbl1q_s8(v234.val[1], v22);
            v54 = (uint32x4_t)vqtbl1q_s8(v234.val[1], v23);
            v55 = (uint32x4_t)vqtbl1q_s8(v233.val[0], (int8x16_t)xmmword_1003BCAC0);
            v56 = (uint32x4_t)vqtbl1q_s8(v234.val[1], (int8x16_t)xmmword_1003BCA90);
            v57 = (uint32x4_t)vqtbl1q_s8(v233.val[0], v22);
            v58 = (uint32x4_t)vqtbl1q_s8(v233.val[0], v23);
            v59 = (uint32x4_t)vqtbl1q_s8(v233.val[0], (int8x16_t)xmmword_1003BCA90);
            v60 = vaddl_high_u32(v55, v52);
            v61 = v22;
            v62 = vaddl_high_u32(v57, v53);
            v63 = v23;
            v64 = vaddl_u32(*(uint32x2_t *)v55.i8, *(uint32x2_t *)v52.i8);
            v65 = v48 - 2;
            v232 = vld2q_s8(v65);
            v66 = vaddl_u32(*(uint32x2_t *)v57.i8, *(uint32x2_t *)v53.i8);
            v67 = vaddl_high_u32(v58, v54);
            v68 = vaddl_high_u32(v59, v56);
            v69 = vaddl_u32(*(uint32x2_t *)v58.i8, *(uint32x2_t *)v54.i8);
            v70 = (uint32x4_t)vqtbl1q_s8(v232.val[1], (int8x16_t)xmmword_1003BCA90);
            v71 = (uint32x4_t)vqtbl1q_s8(v232.val[1], v63);
            v72 = vaddl_u32(*(uint32x2_t *)v59.i8, *(uint32x2_t *)v56.i8);
            v73 = (uint32x4_t)vqtbl1q_s8(v232.val[1], v61);
            v74 = (uint32x4_t)vqtbl1q_s8(v232.val[1], (int8x16_t)xmmword_1003BCAC0);
            v75 = vaddw_u32(v69, *(uint32x2_t *)v71.i8);
            v220 = vaddw_high_u32(v68, v70);
            v221 = vaddw_u32(v72, *(uint32x2_t *)v70.i8);
            v76 = vaddw_high_u32(v67, v71);
            v235 = vld2q_s8(v48);
            v48 += 32;
            v77 = vaddw_u32(v66, *(uint32x2_t *)v73.i8);
            v78 = vaddw_u32(v64, *(uint32x2_t *)v74.i8);
            v79 = (uint32x4_t)vqtbl1q_s8(v235.val[0], (int8x16_t)xmmword_1003BCAC0);
            v80 = (uint32x4_t)vqtbl1q_s8(v235.val[0], v61);
            v81 = (uint32x4_t)vqtbl1q_s8(v235.val[0], v63);
            v223 = v235.val[1];
            v82 = v50 - 2;
            v83 = vaddw_high_u32(v62, v73);
            v231 = vld2q_s8(v82);
            v84 = (uint32x4_t)vqtbl1q_s8(v231.val[1], (int8x16_t)xmmword_1003BCAC0);
            v236 = vld2q_s8(v50);
            v50 += 32;
            v228 = vaddw_high_u32(vaddw_high_u32(v60, v74), v79);
            v225 = v231.val[0];
            v85 = (uint32x4_t)vqtbl1q_s8(v231.val[1], v61);
            v86 = (uint32x4_t)vqtbl1q_s8(v231.val[1], v63);
            v87 = (uint32x4_t)vqtbl1q_s8(v231.val[1], (int8x16_t)xmmword_1003BCA90);
            v88 = (uint32x4_t)vqtbl1q_s8(v236.val[0], (int8x16_t)xmmword_1003BCAC0);
            v89 = (uint32x4_t)vqtbl1q_s8(v236.val[0], v61);
            v227 = vaddw_high_u32(v83, v80);
            v231.val[0] = vqtbl1q_s8(v236.val[0], v63);
            v231.val[1] = vqtbl1q_s8(v236.val[0], (int8x16_t)xmmword_1003BCA90);
            v90 = vaddl_high_u32(v88, v84);
            v91 = vaddl_u32(*(uint32x2_t *)v88.i8, *(uint32x2_t *)v84.i8);
            v92 = vaddl_high_u32(v89, v85);
            v226 = vaddw_u32(v78, *(uint32x2_t *)v79.i8);
            v93 = vaddl_u32(*(uint32x2_t *)v89.i8, *(uint32x2_t *)v85.i8);
            v94 = vaddl_high_u32((uint32x4_t)v231.val[0], v86);
            v95 = vaddl_high_u32((uint32x4_t)v231.val[1], v87);
            v231.val[0] = (int8x16_t)vaddl_u32(*(uint32x2_t *)v231.val[0].i8, *(uint32x2_t *)v86.i8);
            v224 = vaddw_u32(v77, *(uint32x2_t *)v80.i8);
            v96 = v49 - 2;
            v237 = vld2q_s8(v96);
            v97 = (uint32x4_t)vqtbl1q_s8(v237.val[1], (int8x16_t)xmmword_1003BCA90);
            v231.val[1] = (int8x16_t)vaddw_u32(vaddl_u32(*(uint32x2_t *)v231.val[1].i8, *(uint32x2_t *)v87.i8), *(uint32x2_t *)v97.i8);
            v98 = vaddw_high_u32(v95, v97);
            v99 = (uint32x4_t)vqtbl1q_s8(v235.val[0], (int8x16_t)xmmword_1003BCA90);
            v100 = vaddw_high_u32(v76, v81);
            v101 = vaddw_high_u32(v220, v99);
            v102 = vaddw_u32(v75, *(uint32x2_t *)v81.i8);
            v235.val[0] = vqtbl1q_s8(v237.val[1], v63);
            v231.val[0] = (int8x16_t)vaddw_u32((uint64x2_t)v231.val[0], *(uint32x2_t *)v235.val[0].i8);
            v235.val[0] = (int8x16_t)vaddw_high_u32(v94, (uint32x4_t)v235.val[0]);
            v103 = (uint32x4_t)vqtbl1q_s8(v237.val[1], v61);
            v104 = vaddw_u32(v93, *(uint32x2_t *)v103.i8);
            v105 = vaddw_u32(v221, *(uint32x2_t *)v99.i8);
            v106 = vaddw_high_u32(v92, v103);
            v238 = vld2q_s8(v49);
            v49 += 32;
            v107 = (uint32x4_t)vqtbl1q_s8(v237.val[1], (int8x16_t)xmmword_1003BCAC0);
            v108 = vaddw_u32(v91, *(uint32x2_t *)v107.i8);
            v109 = vaddw_high_u32(v90, v107);
            v110 = (uint32x4_t)vqtbl1q_s8(v238.val[0], (int8x16_t)xmmword_1003BCAC0);
            v235.val[1] = (int8x16_t)vaddw_high_u32(v109, v110);
            v111 = vaddw_u32(v108, *(uint32x2_t *)v110.i8);
            v112 = (uint32x4_t)vqtbl1q_s8(v238.val[0], v61);
            v113 = vaddw_high_u32(v106, v112);
            v114 = vaddw_u32(v104, *(uint32x2_t *)v112.i8);
            v115 = (uint32x4_t)vqtbl1q_s8(v238.val[0], v63);
            v235.val[0] = (int8x16_t)vaddw_high_u32((uint64x2_t)v235.val[0], v115);
            v116 = vaddw_u32((uint64x2_t)v231.val[0], *(uint32x2_t *)v115.i8);
            v117 = (uint32x4_t)vqtbl1q_s8(v238.val[0], (int8x16_t)xmmword_1003BCA90);
            v231.val[0] = (int8x16_t)vaddw_high_u32(v98, v117);
            v231.val[1] = (int8x16_t)vaddw_u32((uint64x2_t)v231.val[1], *(uint32x2_t *)v117.i8);
            v118 = (uint32x4_t)vqtbl1q_s8(v234.val[0], (int8x16_t)xmmword_1003BCA90);
            v119 = (uint32x4_t)vqtbl1q_s8(v234.val[0], v63);
            v120 = (uint32x4_t)vqtbl1q_s8(v234.val[0], v61);
            v234.val[0] = vqtbl1q_s8(v234.val[0], (int8x16_t)xmmword_1003BCAC0);
            v231.val[1] = (int8x16_t)vaddw_u32((uint64x2_t)v231.val[1], *(uint32x2_t *)v118.i8);
            v231.val[0] = (int8x16_t)vaddw_high_u32((uint64x2_t)v231.val[0], v118);
            v121 = vaddw_u32(v116, *(uint32x2_t *)v119.i8);
            v122 = vaddw_high_u32((uint64x2_t)v235.val[0], v119);
            v123 = vaddw_u32(v114, *(uint32x2_t *)v120.i8);
            v124 = vaddw_u32(v111, *(uint32x2_t *)v234.val[0].i8);
            v235.val[0] = (int8x16_t)vaddw_high_u32(v113, v120);
            v125 = (uint32x4_t)vqtbl1q_s8(v233.val[1], (int8x16_t)xmmword_1003BCAC0);
            v126 = (uint32x4_t)vqtbl1q_s8(v233.val[1], v61);
            v127 = (uint32x4_t)vqtbl1q_s8(v233.val[1], v63);
            v233.val[0] = vqtbl1q_s8(v233.val[1], (int8x16_t)xmmword_1003BCA90);
            v234.val[0] = (int8x16_t)vaddw_high_u32(vaddw_high_u32((uint64x2_t)v235.val[1], (uint32x4_t)v234.val[0]), v125);
            v234.val[1] = (int8x16_t)vaddw_u32(v124, *(uint32x2_t *)v125.i8);
            v128 = vaddw_high_u32((uint64x2_t)v235.val[0], v126);
            v235.val[1] = (int8x16_t)vaddw_u32(v123, *(uint32x2_t *)v126.i8);
            v129 = vaddw_high_u32(v122, v127);
            v130 = vaddw_u32(v121, *(uint32x2_t *)v127.i8);
            v131 = (uint32x4_t)vqtbl1q_s8(v232.val[0], (int8x16_t)xmmword_1003BCA90);
            v132 = (uint32x4_t)vqtbl1q_s8(v232.val[0], v63);
            v133 = (uint32x4_t)vqtbl1q_s8(v232.val[0], v61);
            v232.val[0] = vqtbl1q_s8(v232.val[0], (int8x16_t)xmmword_1003BCAC0);
            v232.val[1] = (int8x16_t)vaddw_u32(vaddw_u32((uint64x2_t)v231.val[1], *(uint32x2_t *)v233.val[0].i8), *(uint32x2_t *)v131.i8);
            v134 = vaddw_high_u32(vaddw_high_u32((uint64x2_t)v231.val[0], (uint32x4_t)v233.val[0]), v131);
            v135 = vaddw_high_u32(v129, v132);
            v233.val[0] = (int8x16_t)vaddw_u32((uint64x2_t)v235.val[1], *(uint32x2_t *)v133.i8);
            v233.val[1] = (int8x16_t)vaddw_high_u32(v128, v133);
            v221.i64[0] = v105.i64[1];
            v219 = v105.i64[0];
            v220.i64[0] = v102.i64[1];
            v136 = vaddw_u32((uint64x2_t)v234.val[1], *(uint32x2_t *)v232.val[0].i8);
            v218 = v102.i64[0];
            v137 = (uint32x4_t)vqtbl1q_s8(v223, (int8x16_t)xmmword_1003BCAC0);
            v234.val[0] = (int8x16_t)vaddw_high_u32((uint64x2_t)v234.val[0], (uint32x4_t)v232.val[0]);
            v232.val[0] = vqtbl1q_s8(v223, v61);
            v138 = (uint32x4_t)vqtbl1q_s8(v223, v63);
            v231.val[0] = vqtbl1q_s8(v223, (int8x16_t)xmmword_1003BCA90);
            v231.val[1] = (int8x16_t)vaddw_high_u32(v135, v138);
            v139 = (int64x2_t)vaddw_u32(vaddw_u32(v130, *(uint32x2_t *)v132.i8), *(uint32x2_t *)v138.i8);
            v140 = (int64x2_t)vaddw_u32((uint64x2_t)v232.val[1], *(uint32x2_t *)v231.val[0].i8);
            v141 = (uint32x4_t)vqtbl1q_s8(v225, (int8x16_t)xmmword_1003BCA90);
            v142 = (uint32x4_t)vqtbl1q_s8(v225, v63);
            v222 = v100.i64[1];
            v143 = v100.i64[0];
            v232.val[1] = vqtbl1q_s8(v236.val[1], (int8x16_t)xmmword_1003BCA90);
            v23 = v63;
            v235.val[0] = vqtbl1q_s8(v236.val[1], v63);
            v144 = (uint32x4_t)vqtbl1q_s8(v237.val[0], (int8x16_t)xmmword_1003BCA90);
            v145 = (uint32x4_t)vqtbl1q_s8(v238.val[1], (int8x16_t)xmmword_1003BCA90);
            v146 = vaddw_u32((uint64x2_t)vaddq_s64((int64x2_t)vaddw_u32(vaddl_u32(*(uint32x2_t *)v232.val[1].i8, *(uint32x2_t *)v141.i8), *(uint32x2_t *)v144.i8), (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v140, v140), v214)), *(uint32x2_t *)v145.i8);
            v147 = v146.i64[1];
            v148 = v146.i64[0];
            v149 = (uint32x4_t)vqtbl1q_s8(v237.val[0], v23);
            v235.val[1] = vqtbl1q_s8(v238.val[1], v23);
            v150 = vaddw_u32((uint64x2_t)vaddq_s64((int64x2_t)vaddw_u32(vaddl_u32(*(uint32x2_t *)v235.val[0].i8, *(uint32x2_t *)v142.i8), *(uint32x2_t *)v149.i8), (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v139, v139), v214)), *(uint32x2_t *)v235.val[1].i8);
            v151 = v150.i64[1];
            v152 = v150.i64[0];
            v153 = (int64x2_t)vaddw_high_u32(v134, (uint32x4_t)v231.val[0]);
            v154 = vaddw_high_u32((uint64x2_t)vaddq_s64((int64x2_t)vaddw_high_u32(vaddl_high_u32((uint32x4_t)v232.val[1], v141), v144), (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v153, v153), v214)), v145);
            v22 = v61;
            v155 = v154.i64[1];
            v156 = v154.i64[0];
            v157 = vaddw_high_u32((uint64x2_t)vaddq_s64((int64x2_t)vaddw_high_u32(vaddl_high_u32((uint32x4_t)v235.val[0], v142), v149), (int64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v231.val[1], (int64x2_t)v231.val[1]), v214)), (uint32x4_t)v235.val[1]);
            v158 = v157.i64[1];
            v231.val[0] = (int8x16_t)vaddw_high_u32((uint64x2_t)v234.val[0], v137);
            v231.val[1] = (int8x16_t)vaddw_high_u32((uint64x2_t)v233.val[1], (uint32x4_t)v232.val[0]);
            v159 = (int64x2_t)vaddw_u32(v136, *(uint32x2_t *)v137.i8);
            v160 = (int64x2_t)vaddw_u32((uint64x2_t)v233.val[0], *(uint32x2_t *)v232.val[0].i8);
            v161 = v157.i64[0];
            v162 = (uint32x4_t)vqtbl1q_s8(v225, v61);
            v163 = (uint32x4_t)vqtbl1q_s8(v236.val[1], v61);
            v232.val[1] = vqtbl1q_s8(v237.val[0], v61);
            v232.val[0] = vqtbl1q_s8(v238.val[1], v61);
            v164 = vaddw_u32((uint64x2_t)vaddq_s64((int64x2_t)vaddw_u32(vaddl_u32(*(uint32x2_t *)v163.i8, *(uint32x2_t *)v162.i8), *(uint32x2_t *)v232.val[1].i8), (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v160, v160), v214)), *(uint32x2_t *)v232.val[0].i8);
            v165 = v164.i64[1];
            v166 = v164.i64[0];
            v167 = (uint32x4_t)vqtbl1q_s8(v225, (int8x16_t)xmmword_1003BCAC0);
            v235.val[0] = vqtbl1q_s8(v236.val[1], (int8x16_t)xmmword_1003BCAC0);
            v168 = vaddl_high_u32(v163, v162);
            v169 = vaddl_u32(*(uint32x2_t *)v235.val[0].i8, *(uint32x2_t *)v167.i8);
            v170 = vaddl_high_u32((uint32x4_t)v235.val[0], v167);
            v235.val[0] = vqtbl1q_s8(v237.val[0], (int8x16_t)xmmword_1003BCAC0);
            v235.val[1].i64[0] = v219 * v216.i64[0];
            v171 = (int64x2_t)vaddw_high_u32(v168, (uint32x4_t)v232.val[1]);
            v232.val[1].i64[0] = v218 * v216.i64[0];
            v172 = (int64x2_t)vaddw_high_u32(v170, (uint32x4_t)v235.val[0]);
            v173 = (int64x2_t)vaddw_u32(v169, *(uint32x2_t *)v235.val[0].i8);
            v235.val[0].i64[0] = v101.i64[0] * v216.i64[0];
            v174 = (int64x2_t)vqtbl1q_s8(v238.val[1], (int8x16_t)xmmword_1003BCAC0);
            v236.val[0].i64[0] = v143 * v216.i64[0];
            v175 = (uint64x2_t)vaddq_s64(v173, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v159, v159), v214));
            v173.i64[0] = v224.i64[0] * v216.i64[0];
            v176 = (uint64x2_t)vaddq_s64(v171, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v231.val[1], (int64x2_t)v231.val[1]), v214));
            v231.val[1].i64[0] = v226.i64[0] * v216.i64[0];
            v231.val[0] = (int8x16_t)vaddq_s64(v172, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v231.val[0], (int64x2_t)v231.val[0]), v214));
            v172.i64[0] = v227.i64[0] * v216.i64[0];
            v235.val[1].i64[1] = v221.i64[0] * v216.i64[1];
            v232.val[1].i64[1] = v220.i64[0] * v216.i64[1];
            v235.val[0].i64[1] = v101.i64[1] * v216.i64[1];
            v236.val[0].i64[1] = v222 * v216.i64[1];
            v177 = (int64x2_t)vaddw_u32(v175, *(uint32x2_t *)v174.i8);
            v178 = v177.i64[1];
            v173.i64[1] = v224.i64[1] * v216.i64[1];
            v179 = v177.i64[0];
            v177.i64[0] = v228.i64[0] * v216.i64[0];
            v231.val[1].i64[1] = v226.i64[1] * v216.i64[1];
            v172.i64[1] = v227.i64[1] * v216.i64[1];
            v231.val[0] = (int8x16_t)vaddw_high_u32((uint64x2_t)v231.val[0], (uint32x4_t)v174);
            v174.i64[0] = v148 * v215.i64[0];
            v180 = v151 * v215.i64[1];
            v181 = (int64x2_t)vaddw_high_u32(v176, (uint32x4_t)v232.val[0]);
            v177.i64[1] = v228.i64[1] * v216.i64[1];
            v232.val[0].i64[0] = v152 * v215.i64[0];
            v182 = v181.i64[1];
            v183 = v181.i64[0];
            v174.i64[1] = v147 * v215.i64[1];
            v181.i64[0] = v156 * v215.i64[0];
            v184 = v231.val[0].i64[1];
            v232.val[0].i64[1] = v180;
            v185 = v231.val[0].i64[0];
            v231.val[0].i64[0] = v161 * v215.i64[0];
            v181.i64[1] = v155 * v215.i64[1];
            v235.val[1] = (int8x16_t)vaddq_s64(vaddq_s64((int64x2_t)v235.val[1], v217), v174);
            v174.i64[0] = v166 * v215.i64[0];
            v231.val[0].i64[1] = v158 * v215.i64[1];
            v174.i64[1] = v165 * v215.i64[1];
            v232.val[0] = (int8x16_t)vaddq_s64(vaddq_s64((int64x2_t)v232.val[1], v217), (int64x2_t)v232.val[0]);
            v232.val[1].i64[0] = v179 * v215.i64[0];
            v232.val[1].i64[1] = v178 * v215.i64[1];
            v186 = (uint64x2_t)vaddq_s64(vaddq_s64((int64x2_t)v235.val[0], v217), v181);
            v235.val[0].i64[0] = v183 * v215.i64[0];
            v235.val[0].i64[1] = v182 * v215.i64[1];
            v187 = (uint64x2_t)vaddq_s64(vaddq_s64(v173, v217), v174);
            v174.i64[0] = v185 * v215.i64[0];
            v174.i64[1] = v184 * v215.i64[1];
            v188 = (uint64x2_t)vaddq_s64(vaddq_s64(v177, v217), v174);
            v237.val[0] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64((int64x2_t)v236.val[0], v217), (int64x2_t)v231.val[0]), 0x10uLL);
            v236.val[0] = (int8x16_t)vshrq_n_u64(v186, 0x10uLL);
            v236.val[1] = (int8x16_t)vshrq_n_u64((uint64x2_t)v232.val[0], 0x10uLL);
            v189 = vshrq_n_u64((uint64x2_t)v235.val[1], 0x10uLL);
            v186.i64[0] = vqtbl4q_s8(*(int8x16x4_t *)v236.val[0].i8, (int8x16_t)xmmword_1003C3230).u64[0];
            v236.val[0] = (int8x16_t)vshrq_n_u64(v188, 0x10uLL);
            v235.val[1] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64(v172, v217), (int64x2_t)v235.val[0]), 0x10uLL);
            v190 = vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64((int64x2_t)v231.val[1], v217), (int64x2_t)v232.val[1]), 0x10uLL);
            v235.val[0] = (int8x16_t)vshrq_n_u64(v187, 0x10uLL);
            v186.i64[1] = vqtbl4q_s8(*(int8x16x4_t *)v235.val[0].i8, (int8x16_t)xmmword_1003C3230).u64[0];
            *v230 = v186;
            v37 = v230 + 1;
            v46 = v229 - 16;
          }
          while (v229 != 16);
          v191 = v202;
          LODWORD(v19) = v205;
          LODWORD(v18) = v206;
          v5 = v209;
          a4 = v210;
          LODWORD(v17) = v207;
          v6 = v208;
          v15 = v211;
          v21 = v204;
          if (v212 == v205)
            goto LABEL_11;
        }
        do
        {
          v192 = result[1] + *result + *v34 + v34[1];
          v193 = *(result - 1);
          v194 = result[2];
          result += 2;
          v195 = v35[1] + *v35 + *v36 + v36[1] + v193 + v194 + *(v34 - 1);
          v196 = v34[2];
          v34 += 2;
          v197 = v195 + v196;
          v198 = *(v35 - 1);
          v199 = v35[2];
          v35 += 2;
          v200 = v199 + v198 + *(v36 - 1);
          v201 = v36[2];
          v36 += 2;
          v24->i8[0] = ((v200 + 2 * v197 + v201) * v18 + v192 * v17 + 0x8000) >> 16;
          v24 = (uint64x2_t *)((char *)v24 + 1);
          --v191;
        }
        while (v191);
      }
      else
      {
        v24 = (uint64x2_t *)(v26 + 1);
      }
LABEL_11:
      v25 = v34[1] + result[1];
      v24->i8[0] = ((v36[1]
                   + v35[1]
                   + *(v35 - 1)
                   + *(v36 - 1)
                   + 2 * (v25 + *v35 + v35[1] + *v36 + v36[1] + *(result - 1) + *(v34 - 1)))
                  * (_DWORD)v18
                  + (v25 + *result + *v34) * v17
                  + 0x8000) >> 16;
      ++v15;
    }
    while (v14 < *((int *)v6 + 85));
  }
  return result;
}

unsigned int *sub_1003850F8(unsigned int *result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;

  v6 = result;
  v7 = *(_DWORD *)(a2 + 36) * *(_DWORD *)(a2 + 28);
  v8 = result[85];
  v9 = result[12];
  if ((int)v8 >= 1 && 2 * v7 - (int)v9 >= 1)
  {
    v11 = a3;
    do
    {
      v12 = *v11++;
      result = (unsigned int *)memset((void *)(v12 + v9), *(unsigned __int8 *)(v12 + v9 - 1), (2 * v7 + ~(_DWORD)v9) + 1);
      --v8;
    }
    while (v8);
    LODWORD(v8) = v6[85];
  }
  if ((int)v8 >= 1 && v7 != 0)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = *(_BYTE **)(a4 + 8 * v15);
      v17 = (unsigned __int8 *)a3[v14];
      v18 = *(unsigned __int8 **)((char *)a3 + ((8 * v14) | 8));
      v19 = 1;
      v20 = v7;
      do
      {
        result = (unsigned int *)v18[1];
        *v16++ = (v19 + *v17 + v17[1] + *v18 + result) >> 2;
        v19 ^= 3u;
        v17 += 2;
        v18 += 2;
        --v20;
      }
      while (v20);
      v14 += 2;
      ++v15;
    }
    while (v14 < (int)v6[85]);
  }
  return result;
}

uint64_t sub_10038520C(uint64_t result, int *a2, _QWORD *a3, void **a4)
{
  int64x2_t v4;
  _QWORD *v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  void *v28;
  int v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  int64x2_t v42;
  uint64_t *v43;
  uint64_t v44;
  int64x2_t v45;
  int64x2_t v46;
  uint64_t v47;
  uint32x4_t v48;
  uint64_t v49;
  int64x2_t v50;
  int64x2_t v51;
  uint64_t v52;
  int8x16_t *v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int8x16_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  uint32x4_t v63;
  unsigned __int8 *v64;
  int v65;
  unsigned int v66;

  v6 = a3;
  v7 = result;
  v8 = (a2[9] * a2[7]);
  v9 = *(_QWORD *)(result + 528) + a2[1];
  v10 = *(unsigned __int8 *)(v9 + 144);
  v11 = *(unsigned __int8 *)(v9 + 154);
  v12 = *(unsigned int *)(result + 340);
  v13 = *(unsigned int *)(result + 48);
  if ((int)v12 >= 1 && (int)v8 * (int)v10 - (int)v13 >= 1)
  {
    v15 = a3;
    do
    {
      v16 = *v15++;
      result = (uint64_t)memset((void *)(v16 + v13), *(unsigned __int8 *)(v16 + v13 - 1), (v8 * v10 + ~(_DWORD)v13) + 1);
      --v12;
    }
    while (v12);
    LODWORD(v12) = *(_DWORD *)(v7 + 340);
  }
  if ((int)v12 >= 1 && (_DWORD)v8)
  {
    v17 = (v11 * v10);
    v18 = v17 >> 1;
    if (!(_DWORD)v11)
    {
      v27 = v18 / v17;
      do
      {
        v28 = *a4++;
        result = (uint64_t)memset(v28, v27, v8);
      }
      while (*(int *)(v7 + 340) > 0);
      return result;
    }
    if (!(_DWORD)v10)
    {
      v29 = 0;
      v30 = v18 / v17;
      do
      {
        v31 = *a4++;
        result = (uint64_t)memset(v31, v30, v8);
        v29 += v11;
      }
      while (v29 < *(_DWORD *)(v7 + 340));
      return result;
    }
    if (v10 < 8)
    {
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = 0;
        v22 = 0;
        v23 = a4[v20];
        do
        {
          v24 = 0;
          v25 = v6;
          result = v11;
          do
          {
            v26 = (unsigned __int8 *)(*v25 + v21);
            v24 += *v26;
            if ((_DWORD)v10 != 1)
            {
              v24 += v26[1];
              if ((_DWORD)v10 != 2)
              {
                v24 += v26[2];
                if ((_DWORD)v10 != 3)
                {
                  v24 += v26[3];
                  if ((_DWORD)v10 != 4)
                  {
                    v24 += v26[4];
                    if ((_DWORD)v10 != 5)
                    {
                      v24 += v26[5];
                      if ((_DWORD)v10 != 6)
                        v24 += v26[6];
                    }
                  }
                }
              }
            }
            ++v25;
            --result;
          }
          while (result);
          *v23++ = (v24 + v18) / v17;
          ++v22;
          v21 += v10;
        }
        while (v22 != (_DWORD)v8);
        v19 += v11;
        ++v20;
        v6 += v11;
      }
      while (v19 < *(int *)(v7 + 340));
      return result;
    }
    v32 = 0;
    v33 = 0;
LABEL_34:
    v34 = 0;
    v35 = 0;
    v36 = a4[v33];
LABEL_36:
    v37 = 0;
    v38 = 0;
    while (1)
    {
      v39 = v6[v37 + v32] + v34;
      if (v10 < 0x10)
        break;
      v50 = 0uLL;
      v51 = (int64x2_t)(unint64_t)v38;
      v52 = v10 & 0xF0;
      v53 = (int8x16_t *)(v6[v37 + v32] + v34);
      v54 = 0uLL;
      v55 = 0uLL;
      v56 = 0uLL;
      v4 = 0uLL;
      v57 = 0uLL;
      v58 = 0uLL;
      do
      {
        v59 = *v53++;
        v60 = (uint32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_1003BCAA0);
        v61 = (uint32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_1003BCA90);
        v62 = (uint32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_1003BCAB0);
        v63 = (uint32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_1003BCAC0);
        v50 = (int64x2_t)vaddw_high_u32((uint64x2_t)v50, v61);
        v55 = (int64x2_t)vaddw_high_u32((uint64x2_t)v55, v60);
        v54 = (int64x2_t)vaddw_u32((uint64x2_t)v54, *(uint32x2_t *)v60.i8);
        v51 = (int64x2_t)vaddw_u32((uint64x2_t)v51, *(uint32x2_t *)v61.i8);
        v56 = (int64x2_t)vaddw_u32((uint64x2_t)v56, *(uint32x2_t *)v62.i8);
        v4 = (int64x2_t)vaddw_high_u32((uint64x2_t)v4, v62);
        v57 = (int64x2_t)vaddw_u32((uint64x2_t)v57, *(uint32x2_t *)v63.i8);
        v58 = (int64x2_t)vaddw_high_u32((uint64x2_t)v58, v63);
        v52 -= 16;
      }
      while (v52);
      v38 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v51, v56), vaddq_s64(v54, v57)), vaddq_s64(vaddq_s64(v50, v4), vaddq_s64(v55, v58))));
      if ((v10 & 0xF0) == v10)
        goto LABEL_37;
      v40 = v10 & 0xF0;
      v49 = v40;
      if ((v10 & 8) != 0)
        goto LABEL_40;
LABEL_48:
      v64 = (unsigned __int8 *)(v39 + v49);
      v65 = v10 - v49;
      do
      {
        v66 = *v64++;
        v38 += v66;
        --v65;
      }
      while (v65);
LABEL_37:
      if (++v37 == v11)
      {
        result = (v38 + v18) / v17;
        *v36++ = result;
        ++v35;
        v34 += v10;
        if (v35 == (_DWORD)v8)
        {
          v32 += v11;
          ++v33;
          if (v32 >= *(int *)(v7 + 340))
            return result;
          goto LABEL_34;
        }
        goto LABEL_36;
      }
    }
    v40 = 0;
LABEL_40:
    v41 = 0uLL;
    v42 = (int64x2_t)(unint64_t)v38;
    v43 = (uint64_t *)(v39 + v40);
    v44 = v40 - (v10 & 0xF8);
    v45 = 0uLL;
    v46 = 0uLL;
    do
    {
      v47 = *v43++;
      v4.i64[0] = v47;
      v48 = (uint32x4_t)vqtbl1q_s8((int8x16_t)v4, (int8x16_t)xmmword_1003BCAA0);
      v4 = (int64x2_t)vqtbl1q_s8((int8x16_t)v4, (int8x16_t)xmmword_1003BCA90);
      v46 = (int64x2_t)vaddw_high_u32((uint64x2_t)v46, v48);
      v41 = (int64x2_t)vaddw_high_u32((uint64x2_t)v41, (uint32x4_t)v4);
      v45 = (int64x2_t)vaddw_u32((uint64x2_t)v45, *(uint32x2_t *)v48.i8);
      v42 = (int64x2_t)vaddw_u32((uint64x2_t)v42, *(uint32x2_t *)v4.i8);
      v44 += 8;
    }
    while (v44);
    v38 = vaddvq_s64(vaddq_s64(vaddq_s64(v42, v45), vaddq_s64(v41, v46)));
    v49 = v10 & 0xF8;
    if (v49 == v10)
      goto LABEL_37;
    goto LABEL_48;
  }
  return result;
}

uint64_t sub_1003855E8(char *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  *((_QWORD *)a1 + 1) = 0;
  if (a2 != 90)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 40) = 0x5A0000000DLL;
    *(_DWORD *)(*(_QWORD *)a1 + 48) = a2;
    (**(void (***)(char *))a1)(a1);
  }
  if (a3 != 632)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 40) = 0x27800000016;
    *(_DWORD *)(*(_QWORD *)a1 + 48) = a3;
    (**(void (***)(char *))a1)(a1);
  }
  v5 = *(_QWORD *)a1;
  v6 = *((_QWORD *)a1 + 3);
  bzero(a1, 0x278uLL);
  *(_QWORD *)a1 = v5;
  *((_QWORD *)a1 + 3) = v6;
  a1[32] = 1;
  sub_1003A3648(a1);
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 47) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  sub_10038FDB4((uint64_t)a1);
  result = sub_10038E7F0((uint64_t)a1);
  *((_DWORD *)a1 + 9) = 200;
  return result;
}

uint64_t sub_1003856E4(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 36);
  if ((v4 & 0xFFFFFFFE) == 0xC8)
  {
    v5 = sub_10038579C((uint64_t *)a1);
    if ((_DWORD)v5 != 2)
      return v5;
  }
  else
  {
    v7 = *(_QWORD *)a1;
    *(_DWORD *)(v7 + 40) = 21;
    *(_DWORD *)(v7 + 44) = v4;
    (**(void (***)(uint64_t))a1)(a1);
    v5 = sub_10038579C((uint64_t *)a1);
    if ((_DWORD)v5 != 2)
      return v5;
  }
  if (a2)
  {
    v8 = *(_QWORD *)a1;
    *(_DWORD *)(v8 + 40) = 53;
    (*(void (**)(uint64_t))v8)(a1);
  }
  sub_10037FC58(a1);
  return v5;
}

uint64_t sub_10038579C(uint64_t *a1)
{
  int v2;
  uint64_t result;
  int v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *((_DWORD *)a1 + 9);
  result = 1;
  switch(v2)
  {
    case 200:
      (*(void (**)(uint64_t *))(a1[72] + 8))(a1);
      (*(void (**)(uint64_t *))(a1[5] + 16))(a1);
      *((_DWORD *)a1 + 9) = 201;
      goto LABEL_4;
    case 201:
LABEL_4:
      result = (*(uint64_t (**)(uint64_t *))a1[72])(a1);
      if ((_DWORD)result != 1)
        return result;
      v4 = *((_DWORD *)a1 + 14);
      switch(v4)
      {
        case 1:
          v11 = 1;
          break;
        case 4:
          if (*((_BYTE *)a1 + 360) && (v13 = *((unsigned __int8 *)a1 + 361), *((_BYTE *)a1 + 361)))
          {
            if (v13 != 2)
            {
              v14 = *a1;
              *(_DWORD *)(v14 + 40) = 116;
              *(_DWORD *)(v14 + 44) = v13;
              (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
            }
            v11 = 4;
            v4 = 5;
          }
          else
          {
            v4 = 4;
            v11 = 4;
          }
          break;
        case 3:
          v5 = (int *)a1[36];
          v6 = *v5;
          v7 = v5[24];
          v8 = v5[48];
          if (v6 != 1 || v7 != 2 || v8 != 3)
          {
            if (v6 == 1 && v7 == 34 && v8 == 35)
            {
              v11 = 2;
              v4 = 7;
              break;
            }
            if (v6 == 82 && v7 == 71 && v8 == 66)
              goto LABEL_32;
            if (v6 == 114 && v7 == 103 && v8 == 98)
            {
              v11 = 2;
              v4 = 6;
              break;
            }
            if (!*((_BYTE *)a1 + 352))
            {
              if (*((_BYTE *)a1 + 360))
              {
                v16 = *((unsigned __int8 *)a1 + 361);
                if (!*((_BYTE *)a1 + 361))
                {
LABEL_32:
                  v4 = 2;
                  v11 = 2;
                  break;
                }
                if (v16 != 1)
                {
                  v17 = *a1;
                  *(_DWORD *)(v17 + 40) = 116;
                  *(_DWORD *)(v17 + 44) = v16;
                  (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
                }
              }
              else
              {
                v18 = *a1;
                *(_DWORD *)(v18 + 48) = v7;
                *(_DWORD *)(v18 + 52) = v8;
                *(_DWORD *)(v18 + 40) = 113;
                *(_DWORD *)(v18 + 44) = v6;
                (*(void (**)(uint64_t *, uint64_t))(v18 + 8))(a1, 1);
              }
            }
          }
          v11 = 2;
          v4 = 3;
          break;
        default:
          v4 = 0;
          v11 = 0;
          break;
      }
      *((_DWORD *)a1 + 15) = v4;
      *((_DWORD *)a1 + 16) = v11;
      v15 = *((_DWORD *)a1 + 131);
      *((_DWORD *)a1 + 17) = v15;
      *((_DWORD *)a1 + 18) = v15;
      a1[10] = 0x3FF0000000000000;
      *((_WORD *)a1 + 44) = 0;
      *((_DWORD *)a1 + 23) = 0;
      *((_WORD *)a1 + 48) = 257;
      *((_BYTE *)a1 + 98) = 0;
      *((_DWORD *)a1 + 25) = 2;
      result = 1;
      *((_BYTE *)a1 + 104) = 1;
      *((_DWORD *)a1 + 27) = 256;
      a1[18] = 0;
      *((_WORD *)a1 + 56) = 0;
      *((_BYTE *)a1 + 114) = 0;
      *((_DWORD *)a1 + 9) = 202;
      return result;
    case 202:
      return result;
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 210:
      return (*(uint64_t (**)(uint64_t *))a1[72])(a1);
    default:
      v12 = *a1;
      *(_DWORD *)(v12 + 40) = 21;
      *(_DWORD *)(v12 + 44) = v2;
      (*(void (**)(uint64_t *))*a1)(a1);
      return 0;
  }
}

uint64_t sub_100385A38(uint64_t a1)
{
  int v2;
  void (**v3)(uint64_t);
  void (**v4)(uint64_t);
  uint64_t v5;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 36);
  if ((v2 - 205) > 1 || *(_BYTE *)(a1 + 88))
  {
    if (v2 == 210)
      goto LABEL_10;
    if (v2 != 207)
    {
      v3 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v3 + 10) = 21;
      *((_DWORD *)v3 + 11) = v2;
      (**(void (***)(uint64_t))a1)(a1);
      goto LABEL_10;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 152) < *(_DWORD *)(a1 + 120))
    {
      v4 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v4 + 10) = 69;
      (*v4)(a1);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 544) + 8))(a1);
  }
  *(_DWORD *)(a1 + 36) = 210;
LABEL_10:
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 576);
    if (*(_BYTE *)(v5 + 33))
      break;
    result = (*(uint64_t (**)(uint64_t))v5)(a1);
    if (!(_DWORD)result)
      return result;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 48))(a1);
  sub_10037FC58(a1);
  return 1;
}

uint64_t sub_100385B20(uint64_t a1)
{
  int v2;
  uint64_t result;
  void (**v4)(_QWORD);
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;

  v2 = *(_DWORD *)(a1 + 36);
  if (v2 == 204)
    goto LABEL_23;
  if (v2 == 203)
    goto LABEL_9;
  if (v2 != 202)
  {
    v4 = *(void (***)(_QWORD))a1;
    *((_DWORD *)v4 + 10) = 21;
    *((_DWORD *)v4 + 11) = v2;
    (**(void (***)(uint64_t))a1)(a1);
    if (*(_DWORD *)(a1 + 36) != 204)
    {
LABEL_22:
      (**(void (***)(uint64_t))(a1 + 544))(a1);
      *(_DWORD *)(a1 + 152) = 0;
      *(_DWORD *)(a1 + 36) = 204;
    }
LABEL_23:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 544) + 16))
    {
      v9 = *(unsigned int *)(a1 + 152);
      do
      {
        while (1)
        {
          v10 = *(unsigned int *)(a1 + 120);
          if (v9 < v10)
            break;
          (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 544) + 8))(a1);
          (**(void (***)(uint64_t))(a1 + 544))(a1);
          v9 = 0;
          *(_DWORD *)(a1 + 152) = 0;
          if (!*(_BYTE *)(*(_QWORD *)(a1 + 544) + 16))
            goto LABEL_33;
        }
        v11 = *(_QWORD *)(a1 + 16);
        if (v11)
        {
          *(_QWORD *)(v11 + 8) = v9;
          *(_QWORD *)(v11 + 16) = v10;
          (*(void (**)(uint64_t))v11)(a1);
          v9 = *(unsigned int *)(a1 + 152);
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 552) + 8))(a1, 0, a1 + 152, 0);
        v6 = *(unsigned int *)(a1 + 152) == v9;
        v9 = *(unsigned int *)(a1 + 152);
      }
      while (!v6);
      return 0;
    }
    else
    {
LABEL_33:
      if (*(_BYTE *)(a1 + 89))
        v12 = 206;
      else
        v12 = 205;
      *(_DWORD *)(a1 + 36) = v12;
      return 1;
    }
  }
  sub_100392B20(a1);
  if (*(_BYTE *)(a1 + 88))
  {
    *(_DWORD *)(a1 + 36) = 207;
    return 1;
  }
  *(_DWORD *)(a1 + 36) = 203;
LABEL_9:
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 576) + 32))
  {
LABEL_21:
    *(_DWORD *)(a1 + 164) = *(_DWORD *)(a1 + 156);
    if (*(_DWORD *)(a1 + 36) == 204)
      goto LABEL_23;
    goto LABEL_22;
  }
  v5 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    if (v5)
      (*(void (**)(uint64_t))v5)(a1);
    result = (**(uint64_t (***)(uint64_t))(a1 + 576))(a1);
    if (!(_DWORD)result)
      return result;
    if ((_DWORD)result == 2)
      goto LABEL_21;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = (result & 0xFFFFFFFD) != 1 || v5 == 0;
    if (!v6)
    {
      v7 = *(_QWORD *)(v5 + 16);
      v8 = *(_QWORD *)(v5 + 8) + 1;
      *(_QWORD *)(v5 + 8) = v8;
      if (v8 >= v7)
        *(_QWORD *)(v5 + 16) = v7 + *(unsigned int *)(a1 + 400);
    }
  }
}

uint64_t sub_100385D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  void (**v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (**v12)(uint64_t);
  unsigned int v13;

  v6 = *(_DWORD *)(a1 + 36);
  if (v6 != 205)
  {
    v7 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v7 + 10) = 21;
    *((_DWORD *)v7 + 11) = v6;
    (**(void (***)(uint64_t))a1)(a1);
  }
  v8 = *(unsigned int *)(a1 + 152);
  v9 = *(unsigned int *)(a1 + 120);
  if (v8 >= v9)
  {
    v12 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v12 + 10) = 126;
    ((void (*)(uint64_t, uint64_t))v12[1])(a1, 0xFFFFFFFFLL);
    return 0;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      *(_QWORD *)(v10 + 8) = v8;
      *(_QWORD *)(v10 + 16) = v9;
      (*(void (**)(uint64_t))v10)(a1);
    }
    v13 = 0;
    (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t))(*(_QWORD *)(a1 + 552) + 8))(a1, a2, &v13, a3);
    result = v13;
    *(_DWORD *)(a1 + 152) += v13;
  }
  return result;
}

uint64_t sub_100385E18(uint64_t a1)
{
  uint64_t result;
  int v3;
  __int128 v4;

  result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 592) = result;
  *(_QWORD *)result = sub_100385EFC;
  *(_QWORD *)(result + 16) = nullsub_102;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_BYTE *)(result + 336) = 113;
  if (*(_BYTE *)(a1 + 297))
  {
    result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, (uint64_t)*(int *)(a1 + 56) << 8);
    *(_QWORD *)(a1 + 176) = result;
    if (*(int *)(a1 + 56) >= 1)
    {
      v3 = 0;
      *(_QWORD *)&v4 = -1;
      *((_QWORD *)&v4 + 1) = -1;
      do
      {
        *(_OWORD *)(result + 224) = v4;
        *(_OWORD *)(result + 240) = v4;
        *(_OWORD *)(result + 192) = v4;
        *(_OWORD *)(result + 208) = v4;
        *(_OWORD *)(result + 160) = v4;
        *(_OWORD *)(result + 176) = v4;
        *(_OWORD *)(result + 128) = v4;
        *(_OWORD *)(result + 144) = v4;
        *(_OWORD *)(result + 96) = v4;
        *(_OWORD *)(result + 112) = v4;
        *(_OWORD *)(result + 64) = v4;
        *(_OWORD *)(result + 80) = v4;
        *(_OWORD *)(result + 32) = v4;
        *(_OWORD *)(result + 48) = v4;
        *(_OWORD *)result = v4;
        *(_OWORD *)(result + 16) = v4;
        result += 256;
        ++v3;
      }
      while (v3 < *(_DWORD *)(a1 + 56));
    }
  }
  return result;
}

uint64_t sub_100385EFC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t j;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;

  v1 = result;
  v2 = *(_QWORD *)(result + 592);
  v3 = *(_DWORD *)(result + 508);
  if (!*(_BYTE *)(result + 297))
  {
    if (v3
      || *(_DWORD *)(result + 516)
      || *(_DWORD *)(result + 520)
      || (v32 = *(_DWORD *)(result + 512), v32 <= 63) && v32 != *(_DWORD *)(result + 536))
    {
      v5 = *(_QWORD *)result;
      *(_DWORD *)(v5 + 40) = 125;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(result, 0xFFFFFFFFLL);
    }
    *(_QWORD *)(v2 + 8) = sub_100386CDC;
    if (*(int *)(v1 + 416) >= 1)
      goto LABEL_41;
    goto LABEL_59;
  }
  v4 = *(_DWORD *)(result + 512);
  if (v3)
  {
    if (v4 < v3 || v4 > *(_DWORD *)(result + 536) || *(_DWORD *)(result + 416) != 1)
      goto LABEL_17;
  }
  else if (v4)
  {
    goto LABEL_17;
  }
  v6 = *(_DWORD *)(result + 516);
  if (!v6)
  {
    if (*(int *)(result + 520) < 14)
      goto LABEL_18;
LABEL_17:
    v8 = *(_QWORD *)result;
    *(_DWORD *)(v8 + 40) = 17;
    *(_DWORD *)(v8 + 44) = v3;
    *(_DWORD *)(*(_QWORD *)result + 48) = *(_DWORD *)(result + 512);
    *(_DWORD *)(*(_QWORD *)result + 52) = *(_DWORD *)(result + 516);
    *(_DWORD *)(*(_QWORD *)result + 56) = *(_DWORD *)(result + 520);
    result = (**(uint64_t (***)(uint64_t))result)(result);
    goto LABEL_18;
  }
  v7 = v6 - 1;
  if (v7 != *(_DWORD *)(result + 520) || v7 >= 14)
    goto LABEL_17;
LABEL_18:
  LODWORD(v9) = *(_DWORD *)(v1 + 416);
  if ((int)v9 >= 1)
  {
    for (i = 0; i < v9; ++i)
    {
      v11 = *(int *)(*(_QWORD *)(v1 + 8 * i + 424) + 4);
      v12 = (_DWORD *)(*(_QWORD *)(v1 + 176) + (v11 << 8));
      v13 = *(_DWORD *)(v1 + 508);
      if (v13 && (*v12 & 0x80000000) != 0)
      {
        v17 = *(_QWORD *)v1;
        *(_DWORD *)(v17 + 40) = 118;
        *(_DWORD *)(v17 + 44) = v11;
        *(_DWORD *)(*(_QWORD *)v1 + 48) = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 8))(v1, 0xFFFFFFFFLL);
        v13 = *(_DWORD *)(v1 + 508);
        if (v13 <= *(_DWORD *)(v1 + 512))
        {
LABEL_24:
          v14 = v13;
          do
          {
            if (*(_DWORD *)(v1 + 516) != (v12[v14] & ~((int)v12[v14] >> 31)))
            {
              v16 = *(_QWORD *)v1;
              *(_DWORD *)(v16 + 40) = 118;
              *(_DWORD *)(v16 + 44) = v11;
              *(_DWORD *)(*(_QWORD *)v1 + 48) = v14;
              result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 8))(v1, 0xFFFFFFFFLL);
            }
            v12[v14] = *(_DWORD *)(v1 + 520);
          }
          while (v14++ < *(int *)(v1 + 512));
        }
      }
      else if (v13 <= *(_DWORD *)(v1 + 512))
      {
        goto LABEL_24;
      }
      v9 = *(int *)(v1 + 416);
    }
  }
  v18 = *(_DWORD *)(v1 + 508);
  if (*(_DWORD *)(v1 + 516))
  {
    if (v18)
    {
      *(_QWORD *)(v2 + 8) = sub_100386B0C;
      if ((int)v9 < 1)
        goto LABEL_59;
    }
    else
    {
      *(_QWORD *)(v2 + 8) = sub_100386A58;
      if ((int)v9 < 1)
        goto LABEL_59;
    }
    goto LABEL_41;
  }
  if (v18)
  {
    *(_QWORD *)(v2 + 8) = sub_1003866D8;
    if ((int)v9 < 1)
      goto LABEL_59;
    goto LABEL_41;
  }
  *(_QWORD *)(v2 + 8) = sub_1003862FC;
  if ((int)v9 >= 1)
  {
LABEL_41:
    for (j = 0; j < *(int *)(v1 + 416); ++j)
    {
      v23 = *(_QWORD *)(v1 + 8 * j + 424);
      if (!*(_BYTE *)(v1 + 297))
        goto LABEL_49;
      if (*(_DWORD *)(v1 + 508))
        goto LABEL_57;
      if (!*(_DWORD *)(v1 + 516))
      {
LABEL_49:
        v24 = *(_DWORD *)(v23 + 20);
        if (v24 >= 0x10)
        {
          v25 = *(_QWORD *)v1;
          *(_DWORD *)(v25 + 40) = 50;
          *(_DWORD *)(v25 + 44) = v24;
          (**(void (***)(uint64_t))v1)(v1);
        }
        v26 = v2 + 8 * (int)v24;
        v28 = *(_QWORD *)(v26 + 80);
        v27 = (uint64_t *)(v26 + 80);
        result = v28;
        if (!v28)
        {
          result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v1, 1, 64);
          *v27 = result;
        }
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)result = 0u;
        *(_OWORD *)(result + 16) = 0u;
        v29 = v2 + 4 * j;
        *(_DWORD *)(v29 + 44) = 0;
        *(_DWORD *)(v29 + 60) = 0;
        if (*(_BYTE *)(v1 + 297))
        {
          if (*(_DWORD *)(v1 + 508))
            goto LABEL_57;
        }
        else if (*(_DWORD *)(v1 + 536))
        {
LABEL_57:
          v30 = *(_DWORD *)(v23 + 24);
          if (v30 >= 0x10)
          {
            v31 = *(_QWORD *)v1;
            *(_DWORD *)(v31 + 40) = 50;
            *(_DWORD *)(v31 + 44) = v30;
            (**(void (***)(uint64_t))v1)(v1);
          }
          v20 = v2 + 8 * (int)v30;
          v22 = *(_QWORD *)(v20 + 208);
          v21 = (uint64_t *)(v20 + 208);
          result = v22;
          if (!v22)
          {
            result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v1, 1, 256);
            *v21 = result;
          }
          *(_OWORD *)(result + 224) = 0u;
          *(_OWORD *)(result + 240) = 0u;
          *(_OWORD *)(result + 192) = 0u;
          *(_OWORD *)(result + 208) = 0u;
          *(_OWORD *)(result + 160) = 0u;
          *(_OWORD *)(result + 176) = 0u;
          *(_OWORD *)(result + 128) = 0u;
          *(_OWORD *)(result + 144) = 0u;
          *(_OWORD *)(result + 96) = 0u;
          *(_OWORD *)(result + 112) = 0u;
          *(_OWORD *)(result + 64) = 0u;
          *(_OWORD *)(result + 80) = 0u;
          *(_OWORD *)(result + 32) = 0u;
          *(_OWORD *)(result + 48) = 0u;
          *(_OWORD *)result = 0u;
          *(_OWORD *)(result + 16) = 0u;
        }
      }
    }
  }
LABEL_59:
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 40) = -16;
  *(_DWORD *)(v2 + 76) = *(_DWORD *)(v1 + 348);
  return result;
}

uint64_t sub_1003862FC(int *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;
  unsigned int v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *((_QWORD *)a1 + 74);
  if (a1[87])
  {
    v4 = *(_DWORD *)(v3 + 76);
    if (!v4)
    {
      sub_1003873DC(a1);
      v4 = *(_DWORD *)(v3 + 76);
    }
    *(_DWORD *)(v3 + 76) = v4 - 1;
  }
  if (*(_DWORD *)(v3 + 40) != -1 && a1[116] >= 1)
  {
    v5 = 0;
    while (1)
    {
      v7 = *(_WORD **)(a2 + 8 * v5);
      v8 = a1[v5 + 117];
      v9 = *(int *)(*(_QWORD *)&a1[2 * v8 + 106] + 20);
      v10 = v3 + 8 * v9;
      v13 = *(_QWORD *)(v10 + 80);
      v12 = (_QWORD *)(v10 + 80);
      v11 = v13;
      v14 = v3 + 4 * v8;
      v16 = *(int *)(v14 + 60);
      v15 = (int *)(v14 + 60);
      v17 = v11 + v16;
      if (sub_1003874F8((uint64_t *)a1, (_BYTE *)(v11 + v16)))
        break;
      *v15 = 0;
      v6 = *(_DWORD *)(v3 + 4 * v8 + 44);
LABEL_9:
      *v7 = v6 << a1[130];
      if (++v5 >= a1[116])
        return 1;
    }
    v18 = sub_1003874F8((uint64_t *)a1, (_BYTE *)(v17 + 1));
    v19 = (_BYTE *)(v17 + v18 + 2);
    if (sub_1003874F8((uint64_t *)a1, v19))
    {
      v20 = (_BYTE *)*v12;
      v19 = v20 + 20;
      if (sub_1003874F8((uint64_t *)a1, v20 + 20))
      {
        v19 = v20 + 21;
        if (sub_1003874F8((uint64_t *)a1, v20 + 21))
        {
          v19 = v20 + 22;
          if (sub_1003874F8((uint64_t *)a1, v20 + 22))
          {
            v19 = v20 + 23;
            if (sub_1003874F8((uint64_t *)a1, v20 + 23))
            {
              v19 = v20 + 24;
              if (sub_1003874F8((uint64_t *)a1, v20 + 24))
              {
                v19 = v20 + 25;
                if (sub_1003874F8((uint64_t *)a1, v20 + 25))
                {
                  v19 = v20 + 26;
                  if (sub_1003874F8((uint64_t *)a1, v20 + 26))
                  {
                    v19 = v20 + 27;
                    if (sub_1003874F8((uint64_t *)a1, v20 + 27))
                    {
                      v19 = v20 + 28;
                      if (sub_1003874F8((uint64_t *)a1, v20 + 28))
                      {
                        v19 = v20 + 29;
                        if (sub_1003874F8((uint64_t *)a1, v20 + 29))
                        {
                          v19 = v20 + 30;
                          if (sub_1003874F8((uint64_t *)a1, v20 + 30))
                          {
                            v19 = v20 + 31;
                            if (sub_1003874F8((uint64_t *)a1, v20 + 31))
                            {
                              v19 = v20 + 32;
                              if (sub_1003874F8((uint64_t *)a1, v20 + 32))
                              {
                                v19 = v20 + 33;
                                if (sub_1003874F8((uint64_t *)a1, v20 + 33))
                                {
                                  v19 = v20 + 34;
                                  if (sub_1003874F8((uint64_t *)a1, v20 + 34))
                                  {
                                    v30 = *(_QWORD *)a1;
                                    *(_DWORD *)(v30 + 40) = 117;
                                    (*(void (**)(int *, uint64_t))(v30 + 8))(a1, 0xFFFFFFFFLL);
                                    *(_DWORD *)(v3 + 40) = -1;
                                    return 1;
                                  }
                                  v21 = 0;
                                  v22 = 0x4000;
                                }
                                else
                                {
                                  v21 = 0;
                                  v22 = 0x2000;
                                }
                              }
                              else
                              {
                                v21 = 0;
                                v22 = 4096;
                              }
                            }
                            else
                            {
                              v21 = 0;
                              v22 = 2048;
                            }
                          }
                          else
                          {
                            v21 = 0;
                            v22 = 1024;
                          }
                        }
                        else
                        {
                          v21 = 0;
                          v22 = 512;
                        }
                      }
                      else
                      {
                        v21 = 0;
                        v22 = 256;
                      }
                    }
                    else
                    {
                      v21 = 0;
                      v22 = 128;
                    }
                  }
                  else
                  {
                    v21 = 0;
                    v22 = 64;
                  }
                }
                else
                {
                  v21 = 0;
                  v22 = 32;
                }
              }
              else
              {
                v21 = 0;
                v22 = 16;
              }
            }
            else
            {
              v21 = 0;
              v22 = 8;
            }
          }
          else
          {
            v21 = 0;
            v22 = 4;
          }
        }
        else
        {
          v21 = 0;
          v22 = 2;
        }
      }
      else
      {
        v21 = 1;
        v22 = 1;
      }
    }
    else
    {
      v22 = 0;
      v21 = 1;
    }
    if ((int)v22 >= (int)((unint64_t)(1 << *((_BYTE *)a1 + v9 + 299)) >> 1))
    {
      v27 = 4 * v18 + 4;
      if ((int)v22 > (int)((unint64_t)(1 << *((_BYTE *)a1 + v9 + 315)) >> 1))
        v27 = 4 * v18 + 12;
      *v15 = v27;
      if ((v21 & 1) == 0)
        goto LABEL_45;
    }
    else
    {
      *v15 = 0;
      if ((v21 & 1) == 0)
      {
LABEL_45:
        v23 = v19 + 14;
        v24 = v22;
        do
        {
          if (sub_1003874F8((uint64_t *)a1, v23))
            v25 = v22 >> 1;
          else
            v25 = 0;
          v24 |= v25;
          v26 = v22 > 3;
          v22 >>= 1;
        }
        while (v26);
        goto LABEL_55;
      }
    }
    v24 = v22;
LABEL_55:
    v28 = ~v24;
    if (!v18)
      v28 = v24 + 1;
    v29 = v3 + 4 * v8;
    v6 = *(_DWORD *)(v29 + 44) + v28;
    *(_DWORD *)(v29 + 44) = v6;
    goto LABEL_9;
  }
  return 1;
}

uint64_t sub_1003866D8(int *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  _BYTE *v11;
  _BYTE *v12;
  int *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  _BYTE *v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *((_QWORD *)a1 + 74);
  if (a1[87])
  {
    v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      sub_1003873DC(a1);
      v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(_DWORD *)(v4 + 40) != -1)
  {
    v6 = *((_QWORD *)a1 + 66);
    v7 = *a2;
    v8 = *(int *)(*((_QWORD *)a1 + 53) + 24);
    v9 = a1[127] - 1;
    v10 = (uint64_t *)(v4 + 8 * v8 + 208);
    v30 = v6;
    v28 = (unsigned __int8 *)a1 + v8 + 331;
    do
    {
      v11 = (_BYTE *)(*v10 + 3 * v9);
      if (sub_1003874F8((uint64_t *)a1, v11))
        return 1;
      v12 = v11 + 2;
      v13 = (int *)(v6 + 4 * (v9 + 1));
      while (1)
      {
        v14 = v9 + 1;
        if (sub_1003874F8((uint64_t *)a1, v12 - 1))
          break;
        v12 += 3;
        ++v13;
        ++v9;
        if (v14 >= a1[128])
          goto LABEL_56;
      }
      v15 = sub_1003874F8((uint64_t *)a1, (_BYTE *)(v4 + 336));
      v29 = v7;
      if (sub_1003874F8((uint64_t *)a1, v12))
      {
        if (sub_1003874F8((uint64_t *)a1, v12))
        {
          v16 = *v10;
          v17 = 217;
          if (v9 < *v28)
            v17 = 189;
          v18 = (_BYTE *)(v16 + v17);
          if (sub_1003874F8((uint64_t *)a1, (_BYTE *)(v16 + v17)))
          {
            v19 = v18 + 1;
            if (sub_1003874F8((uint64_t *)a1, v18 + 1))
            {
              v19 = v18 + 2;
              if (sub_1003874F8((uint64_t *)a1, v18 + 2))
              {
                v19 = v18 + 3;
                if (sub_1003874F8((uint64_t *)a1, v18 + 3))
                {
                  v19 = v18 + 4;
                  if (sub_1003874F8((uint64_t *)a1, v18 + 4))
                  {
                    v19 = v18 + 5;
                    if (sub_1003874F8((uint64_t *)a1, v18 + 5))
                    {
                      v19 = v18 + 6;
                      if (sub_1003874F8((uint64_t *)a1, v18 + 6))
                      {
                        v19 = v18 + 7;
                        if (sub_1003874F8((uint64_t *)a1, v18 + 7))
                        {
                          v19 = v18 + 8;
                          if (sub_1003874F8((uint64_t *)a1, v18 + 8))
                          {
                            v19 = v18 + 9;
                            if (sub_1003874F8((uint64_t *)a1, v18 + 9))
                            {
                              v19 = v18 + 10;
                              if (sub_1003874F8((uint64_t *)a1, v18 + 10))
                              {
                                v19 = v18 + 11;
                                if (sub_1003874F8((uint64_t *)a1, v18 + 11))
                                {
                                  v19 = v18 + 12;
                                  if (sub_1003874F8((uint64_t *)a1, v18 + 12))
                                  {
                                    v18 += 13;
                                    if (sub_1003874F8((uint64_t *)a1, v18))
                                    {
LABEL_56:
                                      v26 = *(_QWORD *)a1;
                                      *(_DWORD *)(v26 + 40) = 117;
                                      (*(void (**)(int *, uint64_t))(v26 + 8))(a1, 0xFFFFFFFFLL);
                                      *(_DWORD *)(v4 + 40) = -1;
                                      return 1;
                                    }
                                    v20 = 0x4000;
                                    goto LABEL_47;
                                  }
                                  v20 = 0x2000;
                                }
                                else
                                {
                                  v20 = 4096;
                                }
                              }
                              else
                              {
                                v20 = 2048;
                              }
                            }
                            else
                            {
                              v20 = 1024;
                            }
                          }
                          else
                          {
                            v20 = 512;
                          }
                        }
                        else
                        {
                          v20 = 256;
                        }
                      }
                      else
                      {
                        v20 = 128;
                      }
                    }
                    else
                    {
                      v20 = 64;
                    }
                  }
                  else
                  {
                    v20 = 32;
                  }
                }
                else
                {
                  v20 = 16;
                }
              }
              else
              {
                v20 = 8;
              }
            }
            else
            {
              v20 = 4;
            }
            v18 = v19;
          }
          else
          {
            v20 = 2;
          }
LABEL_47:
          v22 = v18 + 14;
          v21 = v20;
          do
          {
            if (sub_1003874F8((uint64_t *)a1, v22))
              v23 = v20 >> 1;
            else
              v23 = 0;
            v21 |= v23;
            v24 = v20 > 3;
            v20 >>= 1;
          }
          while (v24);
          goto LABEL_52;
        }
        v21 = 1;
      }
      else
      {
        v21 = 0;
      }
LABEL_52:
      v25 = ~v21;
      if (!v15)
        v25 = v21 + 1;
      v7 = v29;
      v6 = v30;
      *(_WORD *)(v29 + 2 * *v13) = v25 << a1[130];
      ++v9;
    }
    while (v14 < a1[128]);
  }
  return 1;
}

uint64_t sub_100386A58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;

  v4 = *(_QWORD *)(a1 + 592);
  if (*(_DWORD *)(a1 + 348))
  {
    v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      sub_1003873DC((int *)a1);
      v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(int *)(a1 + 464) >= 1)
  {
    v6 = 0;
    v7 = (_BYTE *)(v4 + 336);
    v8 = 1 << *(_DWORD *)(a1 + 520);
    do
    {
      if (sub_1003874F8((uint64_t *)a1, v7))
        **(_WORD **)(a2 + 8 * v6) |= v8;
      ++v6;
    }
    while (v6 < *(int *)(a1 + 464));
  }
  return 1;
}

uint64_t sub_100386B0C(int *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *i;
  uint64_t v16;
  __int16 *v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  int v23;
  int v24;

  v4 = *((_QWORD *)a1 + 74);
  if (a1[87])
  {
    v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      sub_1003873DC(a1);
      v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(_DWORD *)(v4 + 40) != -1)
  {
    v6 = *((_QWORD *)a1 + 66);
    v7 = *a2;
    v8 = a1[130];
    v24 = 1 << v8;
    v23 = -1 << v8;
    v9 = a1[128];
    do
    {
      if (*(_WORD *)(v7 + 2 * *(int *)(v6 + 4 * v9)))
        break;
      --v9;
    }
    while ((_DWORD)v9);
    v10 = a1[127] - 1;
    v11 = (_QWORD *)(v4 + 8 * *(int *)(*((_QWORD *)a1 + 53) + 24) + 208);
    v12 = v6 + 4;
    do
    {
      v13 = *v11 + 3 * v10;
      if (v10 >= (int)v9 && sub_1003874F8((uint64_t *)a1, (_BYTE *)(*v11 + 3 * v10)))
        break;
      v14 = v10++;
      for (i = (_BYTE *)(v13 + 2); ; i += 3)
      {
        v16 = *(int *)(v12 + 4 * v14);
        if (*(_WORD *)(v7 + 2 * v16))
          break;
        if (sub_1003874F8((uint64_t *)a1, i - 1))
        {
          v17 = (__int16 *)(v7 + 2 * v16);
          v20 = sub_1003874F8((uint64_t *)a1, (_BYTE *)(v4 + 336));
          v19 = v24;
          if (v20)
            v19 = v23;
          goto LABEL_23;
        }
        ++v14;
        ++v10;
        if (v14 >= a1[128])
        {
          v21 = *(_QWORD *)a1;
          *(_DWORD *)(v21 + 40) = 117;
          (*(void (**)(int *, uint64_t))(v21 + 8))(a1, 0xFFFFFFFFLL);
          *(_DWORD *)(v4 + 40) = -1;
          return 1;
        }
      }
      if (!sub_1003874F8((uint64_t *)a1, i))
        continue;
      v17 = (__int16 *)(v7 + 2 * v16);
      v18 = *v17;
      v19 = v18 < 0 ? v18 + v23 : v18 + v24;
LABEL_23:
      *v17 = v19;
    }
    while (a1[128] > v10);
  }
  return 1;
}

uint64_t sub_100386CDC(int *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;
  unsigned int v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  _BYTE *v34;
  _BYTE *v35;
  int *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  int v43;
  unsigned int v44;
  __int16 v45;
  _BYTE *v46;
  unsigned int v47;
  __int16 v48;
  uint64_t v49;
  unsigned __int8 *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _WORD *v55;

  v4 = *((_QWORD *)a1 + 74);
  if (a1[87])
  {
    v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      sub_1003873DC(a1);
      v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(_DWORD *)(v4 + 40) != -1 && a1[116] >= 1)
  {
    v6 = 0;
    v54 = *((_QWORD *)a1 + 66);
    v52 = a2;
    do
    {
      v55 = *(_WORD **)(a2 + 8 * v6);
      v7 = a1[v6 + 117];
      v8 = *(_QWORD *)&a1[2 * v7 + 106];
      v9 = *(int *)(v8 + 20);
      v10 = v4 + 8 * v9;
      v13 = *(_QWORD *)(v10 + 80);
      v12 = (_QWORD *)(v10 + 80);
      v11 = v13;
      v14 = v4 + 4 * v7;
      v16 = *(int *)(v14 + 60);
      v15 = (int *)(v14 + 60);
      v17 = v11 + v16;
      if (!sub_1003874F8((uint64_t *)a1, (_BYTE *)(v11 + v16)))
      {
        *v15 = 0;
        *v55 = *(_DWORD *)(v4 + 4 * v7 + 44);
        if (a1[134])
          goto LABEL_58;
        goto LABEL_107;
      }
      v18 = sub_1003874F8((uint64_t *)a1, (_BYTE *)(v17 + 1));
      v19 = (_BYTE *)(v17 + v18 + 2);
      if (sub_1003874F8((uint64_t *)a1, v19))
      {
        v20 = (_BYTE *)*v12;
        v19 = v20 + 20;
        if (sub_1003874F8((uint64_t *)a1, v20 + 20))
        {
          v19 = v20 + 21;
          if (sub_1003874F8((uint64_t *)a1, v20 + 21))
          {
            v19 = v20 + 22;
            if (sub_1003874F8((uint64_t *)a1, v20 + 22))
            {
              v19 = v20 + 23;
              if (sub_1003874F8((uint64_t *)a1, v20 + 23))
              {
                v19 = v20 + 24;
                if (sub_1003874F8((uint64_t *)a1, v20 + 24))
                {
                  v19 = v20 + 25;
                  if (sub_1003874F8((uint64_t *)a1, v20 + 25))
                  {
                    v19 = v20 + 26;
                    if (sub_1003874F8((uint64_t *)a1, v20 + 26))
                    {
                      v19 = v20 + 27;
                      if (sub_1003874F8((uint64_t *)a1, v20 + 27))
                      {
                        v19 = v20 + 28;
                        if (sub_1003874F8((uint64_t *)a1, v20 + 28))
                        {
                          v19 = v20 + 29;
                          if (sub_1003874F8((uint64_t *)a1, v20 + 29))
                          {
                            v19 = v20 + 30;
                            if (sub_1003874F8((uint64_t *)a1, v20 + 30))
                            {
                              v19 = v20 + 31;
                              if (sub_1003874F8((uint64_t *)a1, v20 + 31))
                              {
                                v19 = v20 + 32;
                                if (sub_1003874F8((uint64_t *)a1, v20 + 32))
                                {
                                  v19 = v20 + 33;
                                  if (sub_1003874F8((uint64_t *)a1, v20 + 33))
                                  {
                                    v19 = v20 + 34;
                                    if (sub_1003874F8((uint64_t *)a1, v20 + 34))
                                    {
LABEL_109:
                                      v49 = *(_QWORD *)a1;
                                      *(_DWORD *)(v49 + 40) = 117;
                                      (*(void (**)(int *, uint64_t))(v49 + 8))(a1, 0xFFFFFFFFLL);
                                      *(_DWORD *)(v4 + 40) = -1;
                                      return 1;
                                    }
                                    v21 = 0;
                                    v22 = 0x4000;
                                  }
                                  else
                                  {
                                    v21 = 0;
                                    v22 = 0x2000;
                                  }
                                }
                                else
                                {
                                  v21 = 0;
                                  v22 = 4096;
                                }
                              }
                              else
                              {
                                v21 = 0;
                                v22 = 2048;
                              }
                            }
                            else
                            {
                              v21 = 0;
                              v22 = 1024;
                            }
                          }
                          else
                          {
                            v21 = 0;
                            v22 = 512;
                          }
                        }
                        else
                        {
                          v21 = 0;
                          v22 = 256;
                        }
                      }
                      else
                      {
                        v21 = 0;
                        v22 = 128;
                      }
                    }
                    else
                    {
                      v21 = 0;
                      v22 = 64;
                    }
                  }
                  else
                  {
                    v21 = 0;
                    v22 = 32;
                  }
                }
                else
                {
                  v21 = 0;
                  v22 = 16;
                }
              }
              else
              {
                v21 = 0;
                v22 = 8;
              }
            }
            else
            {
              v21 = 0;
              v22 = 4;
            }
          }
          else
          {
            v21 = 0;
            v22 = 2;
          }
        }
        else
        {
          v21 = 1;
          v22 = 1;
        }
      }
      else
      {
        v22 = 0;
        v21 = 1;
      }
      if ((int)v22 >= (int)((unint64_t)(1 << *((_BYTE *)a1 + v9 + 299)) >> 1))
      {
        v27 = 4 * v18 + 4;
        if ((int)v22 > (int)((unint64_t)(1 << *((_BYTE *)a1 + v9 + 315)) >> 1))
          v27 = 4 * v18 + 12;
        *v15 = v27;
        if ((v21 & 1) != 0)
        {
LABEL_54:
          v24 = v22;
          goto LABEL_55;
        }
      }
      else
      {
        *v15 = 0;
        if ((v21 & 1) != 0)
          goto LABEL_54;
      }
      v23 = v19 + 14;
      v24 = v22;
      do
      {
        if (sub_1003874F8((uint64_t *)a1, v23))
          v25 = v22 >> 1;
        else
          v25 = 0;
        v24 |= v25;
        v26 = v22 > 3;
        v22 >>= 1;
      }
      while (v26);
LABEL_55:
      v28 = ~v24;
      if (!v18)
        v28 = v24 + 1;
      v29 = v4 + 4 * v7;
      v30 = *(_DWORD *)(v29 + 44) + v28;
      *(_DWORD *)(v29 + 44) = v30;
      *v55 = v30;
      if (a1[134])
      {
LABEL_58:
        v31 = 0;
        v32 = *(int *)(v8 + 24);
        v33 = (_QWORD *)(v4 + 8 * v32 + 208);
        v51 = (unsigned __int8 *)a1 + v32 + 331;
        do
        {
          v34 = (_BYTE *)(*v33 + 3 * v31);
          if (sub_1003874F8((uint64_t *)a1, v34))
            break;
          v35 = v34 + 2;
          v36 = (int *)(v54 + 4 * (v31 + 1));
          while (1)
          {
            v37 = v31 + 1;
            if (sub_1003874F8((uint64_t *)a1, v35 - 1))
              break;
            v35 += 3;
            ++v36;
            ++v31;
            if (v37 >= a1[134])
              goto LABEL_109;
          }
          v38 = sub_1003874F8((uint64_t *)a1, (_BYTE *)(v4 + 336));
          v53 = v33;
          if (sub_1003874F8((uint64_t *)a1, v35))
          {
            if (sub_1003874F8((uint64_t *)a1, v35))
            {
              v39 = *v33;
              v40 = 217;
              if (v31 < *v51)
                v40 = 189;
              v41 = (_BYTE *)(v39 + v40);
              if (sub_1003874F8((uint64_t *)a1, (_BYTE *)(v39 + v40)))
              {
                v42 = v41 + 1;
                if (sub_1003874F8((uint64_t *)a1, v41 + 1))
                {
                  v42 = v41 + 2;
                  if (sub_1003874F8((uint64_t *)a1, v41 + 2))
                  {
                    v42 = v41 + 3;
                    if (sub_1003874F8((uint64_t *)a1, v41 + 3))
                    {
                      v42 = v41 + 4;
                      if (sub_1003874F8((uint64_t *)a1, v41 + 4))
                      {
                        v42 = v41 + 5;
                        if (sub_1003874F8((uint64_t *)a1, v41 + 5))
                        {
                          v42 = v41 + 6;
                          if (sub_1003874F8((uint64_t *)a1, v41 + 6))
                          {
                            v42 = v41 + 7;
                            if (sub_1003874F8((uint64_t *)a1, v41 + 7))
                            {
                              v42 = v41 + 8;
                              if (sub_1003874F8((uint64_t *)a1, v41 + 8))
                              {
                                v42 = v41 + 9;
                                if (sub_1003874F8((uint64_t *)a1, v41 + 9))
                                {
                                  v42 = v41 + 10;
                                  if (sub_1003874F8((uint64_t *)a1, v41 + 10))
                                  {
                                    v42 = v41 + 11;
                                    if (sub_1003874F8((uint64_t *)a1, v41 + 11))
                                    {
                                      v42 = v41 + 12;
                                      v43 = v38;
                                      if (sub_1003874F8((uint64_t *)a1, v41 + 12))
                                      {
                                        v41 += 13;
                                        if (sub_1003874F8((uint64_t *)a1, v41))
                                          goto LABEL_109;
                                        v44 = 0x4000;
                                        goto LABEL_99;
                                      }
                                      v44 = 0x2000;
                                    }
                                    else
                                    {
                                      v43 = v38;
                                      v44 = 4096;
                                    }
                                  }
                                  else
                                  {
                                    v43 = v38;
                                    v44 = 2048;
                                  }
                                }
                                else
                                {
                                  v43 = v38;
                                  v44 = 1024;
                                }
                              }
                              else
                              {
                                v43 = v38;
                                v44 = 512;
                              }
                            }
                            else
                            {
                              v43 = v38;
                              v44 = 256;
                            }
                          }
                          else
                          {
                            v43 = v38;
                            v44 = 128;
                          }
                        }
                        else
                        {
                          v43 = v38;
                          v44 = 64;
                        }
                      }
                      else
                      {
                        v43 = v38;
                        v44 = 32;
                      }
                    }
                    else
                    {
                      v43 = v38;
                      v44 = 16;
                    }
                  }
                  else
                  {
                    v43 = v38;
                    v44 = 8;
                  }
                }
                else
                {
                  v43 = v38;
                  v44 = 4;
                }
                v41 = v42;
              }
              else
              {
                v43 = v38;
                v44 = 2;
              }
LABEL_99:
              v46 = v41 + 14;
              v45 = v44;
              do
              {
                if (sub_1003874F8((uint64_t *)a1, v46))
                  v47 = v44 >> 1;
                else
                  LOWORD(v47) = 0;
                v45 |= v47;
                v26 = v44 > 3;
                v44 >>= 1;
              }
              while (v26);
              goto LABEL_104;
            }
            v43 = v38;
            v45 = 1;
          }
          else
          {
            v43 = v38;
            v45 = 0;
          }
LABEL_104:
          v48 = ~v45;
          if (!v43)
            v48 = v45 + 1;
          v55[*v36] = v48;
          ++v31;
          v33 = v53;
        }
        while (v37 < a1[134]);
      }
LABEL_107:
      ++v6;
      a2 = v52;
    }
    while (v6 < a1[116]);
  }
  return 1;
}

uint64_t sub_1003873DC(int *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;

  v2 = *((_QWORD *)a1 + 74);
  result = (*(uint64_t (**)(void))(*((_QWORD *)a1 + 73) + 16))();
  if ((_DWORD)result)
  {
    if (a1[104] < 1)
      goto LABEL_15;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)a1;
  *(_DWORD *)(v4 + 40) = 25;
  result = (*(uint64_t (**)(int *))v4)(a1);
  if (a1[104] >= 1)
  {
LABEL_5:
    for (i = 0; i < a1[104]; ++i)
    {
      v7 = *(_QWORD *)&a1[2 * i + 106];
      if (*((_BYTE *)a1 + 297))
      {
        if (a1[127])
          goto LABEL_7;
        if (a1[129])
          continue;
      }
      v8 = *(_OWORD **)(v2 + 8 * *(int *)(v7 + 20) + 80);
      v8[2] = 0uLL;
      v8[3] = 0uLL;
      *v8 = 0uLL;
      v8[1] = 0uLL;
      v9 = v2 + 4 * i;
      *(_DWORD *)(v9 + 44) = 0;
      *(_DWORD *)(v9 + 60) = 0;
      if (*((_BYTE *)a1 + 297))
      {
        if (!a1[127])
          continue;
LABEL_7:
        v6 = *(_OWORD **)(v2 + 8 * *(int *)(v7 + 24) + 208);
        v6[14] = 0uLL;
        v6[15] = 0uLL;
        v6[12] = 0uLL;
        v6[13] = 0uLL;
        v6[10] = 0uLL;
        v6[11] = 0uLL;
        v6[8] = 0uLL;
        v6[9] = 0uLL;
        v6[6] = 0uLL;
        v6[7] = 0uLL;
        v6[4] = 0uLL;
        v6[5] = 0uLL;
        v6[2] = 0uLL;
        v6[3] = 0uLL;
        *v6 = 0uLL;
        v6[1] = 0uLL;
        continue;
      }
      if (a1[134])
        goto LABEL_7;
    }
  }
LABEL_15:
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 40) = -16;
  *(_DWORD *)(v2 + 76) = a1[87];
  return result;
}

uint64_t sub_1003874F8(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  char v29;

  v3 = a1[74];
  v4 = *(_QWORD *)(v3 + 32);
  if (v4 >= 0x8000)
  {
    v6 = *(_DWORD *)(v3 + 40);
  }
  else
  {
    v6 = *(_DWORD *)(v3 + 40);
    do
    {
      v7 = v6--;
      *(_DWORD *)(v3 + 40) = v6;
      if (v7 <= 0)
      {
        if (*((_DWORD *)a1 + 135))
        {
          v8 = 0;
        }
        else
        {
          v9 = (unsigned __int8 **)a1[5];
          if (!v9[1] && !((unsigned int (*)(uint64_t *))v9[3])(a1))
          {
            v10 = *a1;
            *(_DWORD *)(v10 + 40) = 25;
            (*(void (**)(uint64_t *))v10)(a1);
          }
          v11 = *v9;
          v12 = (uint64_t)(v9[1] - 1);
          ++*v9;
          v9[1] = (unsigned __int8 *)v12;
          v8 = *v11;
          if (v8 == 255)
          {
            do
            {
              v16 = a1[5];
              if (!*(_QWORD *)(v16 + 8) && !(*(unsigned int (**)(uint64_t *))(v16 + 24))(a1))
              {
                v17 = *a1;
                *(_DWORD *)(v17 + 40) = 25;
                (*(void (**)(uint64_t *))v17)(a1);
              }
              v13 = *(_BYTE **)v16;
              v14 = *(_QWORD *)(v16 + 8) - 1;
              ++*(_QWORD *)v16;
              *(_QWORD *)(v16 + 8) = v14;
              v15 = *v13;
            }
            while (v15 == 255);
            if (*v13)
            {
              v8 = 0;
              *((_DWORD *)a1 + 135) = v15;
            }
            else
            {
              v8 = 255;
            }
          }
          v6 = *(_DWORD *)(v3 + 40);
        }
        *(_QWORD *)(v3 + 24) = v8 | (*(_QWORD *)(v3 + 24) << 8);
        *(_DWORD *)(v3 + 40) = v6 + 8;
        v20 = v6 + 9;
        v18 = v6 == -9;
        v19 = v6 <= -9;
        v6 += 8;
        if (v19)
        {
          *(_DWORD *)(v3 + 40) = v20;
          v6 = v20;
          if (v18)
          {
            v6 = 0;
            *(_QWORD *)(v3 + 32) = 0x8000;
          }
        }
      }
      v4 = 2 * *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 32) = v4;
    }
    while (v4 < 0x8000);
  }
  v21 = *a2;
  v22 = qword_1003C5540[v21 & 0x7F];
  v23 = v22 >> 16;
  v24 = v4 - (v22 >> 16);
  *(_QWORD *)(v3 + 32) = v24;
  v25 = v24 << v6;
  v26 = *(_QWORD *)(v3 + 24);
  v27 = __OFSUB__(v26, v25);
  v28 = v26 - v25;
  if (v28 < 0 == v27)
  {
    *(_QWORD *)(v3 + 24) = v28;
    *(_QWORD *)(v3 + 32) = v23;
    v29 = v21 & 0x80;
    if (v24 >= v23)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v24 >= 0x8000)
    return v21 >> 7;
  v29 = v21 & 0x80;
  if (v24 >= v23)
  {
LABEL_30:
    *a2 = v29 ^ BYTE1(v22);
    return v21 >> 7;
  }
LABEL_33:
  *a2 = v29 ^ v22;
  return (v21 ^ 0x80) >> 7;
}

_QWORD *sub_1003876F8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 40);
  if (!result)
  {
    result = (_QWORD *)(**(uint64_t (***)(uint64_t, _QWORD, uint64_t))(a1 + 8))(a1, 0, 56);
    *(_QWORD *)(a1 + 40) = result;
  }
  result[2] = sub_10038775C;
  result[3] = sub_100387798;
  result[4] = sub_1003877F8;
  result[5] = a2;
  return result;
}

uint64_t sub_10038775C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;

  v1 = *(uint64_t **)(a1 + 40);
  result = (**(uint64_t (***)(void))(a1 + 8))();
  v1[6] = result;
  *v1 = result;
  v1[1] = 4096;
  return result;
}

uint64_t sub_100387798(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[5];
  if (fwrite(*(const void **)(v2 + 48), 1uLL, 0x1000uLL, *(FILE **)(v2 + 40)) != 4096)
  {
    v3 = *a1;
    *(_DWORD *)(v3 + 40) = 38;
    (*(void (**)(uint64_t *))v3)(a1);
  }
  *(_QWORD *)v2 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 8) = 4096;
  return 1;
}

uint64_t sub_1003877F8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = a1[5];
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 != 4096 && fwrite(*(const void **)(v2 + 48), 1uLL, 4096 - v3, *(FILE **)(v2 + 40)) != 4096 - v3)
  {
    v4 = *a1;
    *(_DWORD *)(v4 + 40) = 38;
    (*(void (**)(uint64_t *))v4)(a1);
  }
  fflush(*(FILE **)(v2 + 40));
  result = ferror(*(FILE **)(v2 + 40));
  if ((_DWORD)result)
  {
    v6 = *a1;
    *(_DWORD *)(v6 + 40) = 38;
    return (*(uint64_t (**)(uint64_t *))v6)(a1);
  }
  return result;
}

uint64_t sub_10038789C(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)(result + 40);
  if (!v3)
  {
    v4 = result;
    v5 = (**(uint64_t (***)(void))(result + 8))();
    *(_QWORD *)(v4 + 40) = v5;
    result = (**(uint64_t (***)(uint64_t, _QWORD, uint64_t))(v4 + 8))(v4, 0, 4096);
    *(_QWORD *)(v5 + 64) = result;
    v3 = *(_QWORD **)(v4 + 40);
  }
  v3[2] = sub_100387940;
  v3[3] = sub_100387950;
  v3[4] = sub_1003879EC;
  v3[5] = sub_10038FB1C;
  v3[6] = nullsub_103;
  v3[7] = a2;
  *v3 = 0;
  v3[1] = 0;
  return result;
}

uint64_t sub_100387940(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 40) + 72) = 1;
  return result;
}

uint64_t sub_100387950(uint64_t *a1)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[5];
  v3 = fread(*(void **)(v2 + 64), 1uLL, 0x1000uLL, *(FILE **)(v2 + 56));
  if (!v3)
  {
    if (*(_BYTE *)(v2 + 72))
    {
      v4 = *a1;
      *(_DWORD *)(v4 + 40) = 43;
      (*(void (**)(uint64_t *))v4)(a1);
    }
    v5 = *a1;
    *(_DWORD *)(v5 + 40) = 123;
    (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(a1, 0xFFFFFFFFLL);
    **(_BYTE **)(v2 + 64) = -1;
    *(_BYTE *)(*(_QWORD *)(v2 + 64) + 1) = -39;
    v3 = 2;
  }
  *(_QWORD *)v2 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 8) = v3;
  *(_BYTE *)(v2 + 72) = 0;
  return 1;
}

uint64_t sub_1003879EC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 >= 1)
  {
    v2 = a2;
    v3 = result;
    v4 = *(_QWORD *)(result + 40);
    v5 = *(_QWORD *)(v4 + 8);
    if (v5 < a2)
    {
      do
      {
        v2 -= v5;
        result = (*(uint64_t (**)(uint64_t))(v4 + 24))(v3);
        v5 = *(_QWORD *)(v4 + 8);
      }
      while (v2 > v5);
    }
    *(_QWORD *)v4 += v2;
    *(_QWORD *)(v4 + 8) = v5 - v2;
  }
  return result;
}

void sub_100387A5C(uint64_t a1, int a2)
{
  uint64_t (**v4)(uint64_t);
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  char *v13;

  v4 = (uint64_t (**)(uint64_t))(**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 560) = v4;
  *v4 = sub_100387BF8;
  v4[2] = sub_100387C4C;
  v4[27] = 0;
  if (a2)
  {
    if (*(int *)(a1 + 56) >= 1)
    {
      v5 = 0;
      v6 = (unsigned int *)(*(_QWORD *)(a1 + 288) + 28);
      do
      {
        v7 = *(v6 - 4);
        if (*(_BYTE *)(a1 + 297))
          v8 = 3 * v7;
        else
          v8 = v7;
        v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 40);
        v10 = sub_1003A7EA4(*v6, (int)*(v6 - 5));
        v11 = sub_1003A7EA4(v6[1], (int)*(v6 - 4));
        v4[v5++ + 17] = (uint64_t (*)(uint64_t))v9(a1, 1, 1, v10, v11, v8);
        v6 += 24;
      }
      while (v5 < *(int *)(a1 + 56));
    }
    v4[1] = sub_100387DD0;
    v4[3] = (uint64_t (*)(uint64_t))sub_100388140;
    v12 = (uint64_t (*)(uint64_t))(v4 + 17);
  }
  else
  {
    v13 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 1280);
    v4[7] = (uint64_t (*)(uint64_t))v13;
    v4[8] = (uint64_t (*)(uint64_t))(v13 + 128);
    v4[9] = (uint64_t (*)(uint64_t))(v13 + 256);
    v4[10] = (uint64_t (*)(uint64_t))(v13 + 384);
    v4[11] = (uint64_t (*)(uint64_t))(v13 + 512);
    v4[12] = (uint64_t (*)(uint64_t))(v13 + 640);
    v4[13] = (uint64_t (*)(uint64_t))(v13 + 768);
    v4[14] = (uint64_t (*)(uint64_t))(v13 + 896);
    v4[15] = (uint64_t (*)(uint64_t))(v13 + 1024);
    v4[16] = (uint64_t (*)(uint64_t))(v13 + 1152);
    if (!*(_DWORD *)(a1 + 536))
      bzero(v13, 0x500uLL);
    v12 = 0;
    v4[1] = (uint64_t (*)(uint64_t))sub_100388320;
    v4[3] = (uint64_t (*)(uint64_t))sub_100388328;
  }
  v4[4] = v12;
}

uint64_t sub_100387BF8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(result + 160) = 0;
  v1 = *(_QWORD *)(result + 560);
  if (*(int *)(result + 416) < 2)
  {
    v2 = *(_QWORD *)(result + 424);
    if (*(_DWORD *)(result + 400) == 1)
      *(_DWORD *)(v1 + 48) = *(_DWORD *)(v2 + 76);
    else
      *(_DWORD *)(v1 + 48) = *(_DWORD *)(v2 + 12);
    *(_QWORD *)(v1 + 40) = 0;
  }
  else
  {
    *(_DWORD *)(v1 + 48) = 1;
    *(_QWORD *)(v1 + 40) = 0;
  }
  return result;
}

uint64_t sub_100387C4C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _WORD **v6;
  _DWORD *v7;
  _WORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _BOOL4 v11;
  unsigned int v12;
  unsigned int v13;
  __int32 v14;
  int32x4_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);

  v1 = result;
  v2 = *(_QWORD **)(result + 560);
  if (!v2[4])
    goto LABEL_25;
  if (*(_BYTE *)(result + 97) && *(_BYTE *)(result + 297) && *(_QWORD *)(result + 176))
  {
    result = v2[27];
    if (result)
    {
      if (*(int *)(v1 + 56) < 1)
        goto LABEL_23;
    }
    else
    {
      result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v1, 1, 24 * *(int *)(v1 + 56));
      v2[27] = result;
      if (*(int *)(v1 + 56) < 1)
        goto LABEL_23;
    }
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = (_WORD **)(*(_QWORD *)(v1 + 288) + 80);
    v7 = (_DWORD *)(result + 12);
    while (1)
    {
      v8 = *v6;
      if (!*v6)
        break;
      if (!*v8)
        break;
      if (!v8[1])
        break;
      if (!v8[8])
        break;
      if (!v8[16])
        break;
      if (!v8[9])
        break;
      if (!v8[2])
        break;
      v9 = *(_QWORD *)(v1 + 176);
      if ((*(_DWORD *)(v9 + v3) & 0x80000000) != 0)
        break;
      v10 = (_DWORD *)(v9 + v3);
      *(v7 - 2) = v10[1];
      v11 = v10[1] == 0;
      *(v7 - 1) = v10[2];
      v12 = v10[2];
      *v7 = v10[3];
      v13 = v10[3];
      v7[1] = v10[4];
      v14 = v10[4];
      result = v10[5];
      v7[2] = result;
      v15.i64[0] = __PAIR64__(v13, v12);
      v15.i32[2] = v14;
      v15.i32[3] = v10[5];
      *(int16x4_t *)v15.i8 = vmovn_s32(vtstq_s32(v15, v15));
      v15.i16[0] = vmaxv_u16(*(uint16x4_t *)v15.i8);
      if ((v11 & ~v15.i32[0]) == 0)
        v5 = 1;
      ++v4;
      v3 += 256;
      v6 += 12;
      v7 += 6;
      if (v4 >= *(int *)(v1 + 56))
      {
        if (!v5)
          break;
        v16 = sub_1003885F8;
        goto LABEL_24;
      }
    }
  }
LABEL_23:
  v16 = sub_100388140;
LABEL_24:
  v2[3] = v16;
LABEL_25:
  *(_DWORD *)(v1 + 168) = 0;
  return result;
}

uint64_t sub_100387DD0(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  int64x2_t v10;
  int64x2_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  int64x2_t *v24;
  unint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t j;
  uint64_t v29;
  unint64_t *v30;
  int64x2_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64x2_t v35;
  int v36;
  uint64_t result;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  _OWORD v44[2];

  v2 = *(_DWORD **)(a1 + 560);
  memset(v44, 0, sizeof(v44));
  if (*(int *)(a1 + 416) >= 1)
  {
    v3 = 0;
    do
    {
      *((_QWORD *)v44 + v3) = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                  + 64))(a1, *(_QWORD *)&v2[2 * *(int *)(*(_QWORD *)(a1 + 8 * v3 + 424) + 4) + 34], (*(_DWORD *)(*(_QWORD *)(a1 + 8 * v3 + 424) + 12) * *(_DWORD *)(a1 + 160)), *(unsigned int *)(*(_QWORD *)(a1 + 8 * v3 + 424) + 12), 1);
      ++v3;
    }
    while (v3 < *(int *)(a1 + 416));
  }
  v4 = v2[12];
  v5 = (int)v2[11];
  if ((int)v5 >= v4)
  {
LABEL_35:
    v38 = *(_DWORD *)(a1 + 160) + 1;
    *(_DWORD *)(a1 + 160) = v38;
    v39 = *(_DWORD *)(a1 + 400);
    if (v38 >= v39)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 576) + 24))(a1);
      return 4;
    }
    else
    {
      v40 = *(_QWORD *)(a1 + 560);
      if (*(int *)(a1 + 416) < 2)
      {
        v42 = v39 - 1;
        v43 = *(_QWORD *)(a1 + 424);
        if (v38 >= v42)
          v41 = *(_DWORD *)(v43 + 76);
        else
          v41 = *(_DWORD *)(v43 + 12);
      }
      else
      {
        v41 = 1;
      }
      *(_DWORD *)(v40 + 48) = v41;
      *(_QWORD *)(v40 + 40) = 0;
      return 3;
    }
  }
  else
  {
    v6 = v2[10];
    v7 = *(_DWORD *)(a1 + 456);
    v8 = v2 + 18;
    v9 = 8 * v5;
    v10 = (int64x2_t)xmmword_1003C5910;
    v11 = (int64x2_t)xmmword_1003C5920;
    while (v6 >= v7)
    {
LABEL_6:
      v6 = 0;
      v2[10] = 0;
      ++v5;
      v9 += 8;
      if (v5 >= v4)
        goto LABEL_35;
    }
    while (1)
    {
      v12 = *(unsigned int *)(a1 + 416);
      if ((int)v12 >= 1)
      {
        v13 = 0;
        v14 = 0;
        do
        {
          v15 = *(_QWORD *)(a1 + 8 * v13 + 424);
          v16 = *(unsigned int *)(v15 + 60);
          if ((int)v16 >= 1)
          {
            v17 = *(unsigned int *)(v15 + 56);
            if ((int)v17 >= 1)
            {
              v18 = v17 * v6;
              v19 = *((_QWORD *)v44 + v13);
              if (v17 > 3)
              {
                if ((v17 & 0xFFFFFFFC) == v17)
                {
                  for (i = 0; i != v16; ++i)
                  {
                    v24 = (int64x2_t *)&v8[2 * v14];
                    v25 = *(_QWORD *)(v19 + 8 * (i + v5)) + (v18 << 7);
                    v14 += v17;
                    v26 = v17 & 0xFFFFFFFC;
                    do
                    {
                      v27 = vdupq_n_s64(v25);
                      v24[-1] = vaddq_s64(v27, v10);
                      *v24 = vaddq_s64(v27, v11);
                      v25 += 512;
                      v24 += 2;
                      v26 -= 4;
                    }
                    while (v26);
                  }
                }
                else
                {
                  for (j = 0; j != v16; ++j)
                  {
                    v29 = 2 * v14;
                    v30 = (unint64_t *)&v2[8 * (v17 >> 2) + 14 + v29];
                    v31 = (int64x2_t *)&v8[v29];
                    v32 = *(_QWORD *)(v19 + 8 * (j + v5)) + (v18 << 7);
                    v14 += v17;
                    v33 = v32 + ((unint64_t)(v17 & 0xFFFFFFFC) << 7);
                    v34 = v17 & 0xFFFFFFFC;
                    do
                    {
                      v35 = vdupq_n_s64(v32);
                      v31[-1] = vaddq_s64(v35, v10);
                      *v31 = vaddq_s64(v35, v11);
                      v32 += 512;
                      v31 += 2;
                      v34 -= 4;
                    }
                    while (v34);
                    v36 = v17 - 4 * (v17 >> 2);
                    do
                    {
                      *v30++ = v33;
                      v33 += 128;
                      --v36;
                    }
                    while (v36);
                  }
                }
              }
              else
              {
                v20 = (_QWORD *)(v19 + v9);
                do
                {
                  v21 = *v20 + (v18 << 7);
                  v22 = v14 + 1;
                  *(_QWORD *)&v2[2 * v14 + 14] = v21;
                  if ((_DWORD)v17 + v14 != (_DWORD)v22)
                  {
                    *(_QWORD *)&v2[2 * v22 + 14] = v21 + 128;
                    if ((_DWORD)v17 + v14 != v14 + 2)
                      *(_QWORD *)&v2[2 * v14 + 18] = v21 + 256;
                  }
                  ++v20;
                  v14 += v17;
                  --v16;
                }
                while (v16);
              }
            }
          }
          ++v13;
        }
        while (v13 != v12);
      }
      result = (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)(a1 + 592) + 8))(a1, v2 + 14);
      if (!(_DWORD)result)
        break;
      ++v6;
      v7 = *(_DWORD *)(a1 + 456);
      v11 = (int64x2_t)xmmword_1003C5920;
      v10 = (int64x2_t)xmmword_1003C5910;
      if (v6 >= v7)
      {
        v4 = v2[12];
        goto LABEL_6;
      }
    }
    v2[10] = v6;
    v2[11] = v5;
  }
  return result;
}

uint64_t sub_100388140(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  v19 = *(_QWORD *)(a1 + 560);
  v18 = *(_DWORD *)(a1 + 400) - 1;
  while (1)
  {
    v4 = *(_DWORD *)(a1 + 156);
    v5 = *(_DWORD *)(a1 + 164);
    if (v4 >= v5 && (v4 != v5 || *(_DWORD *)(a1 + 160) > *(_DWORD *)(a1 + 168)))
      break;
    result = (**(uint64_t (***)(uint64_t))(a1 + 576))(a1);
    if (!(_DWORD)result)
      return result;
  }
  if (*(int *)(a1 + 56) >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 288);
    do
    {
      if (*(_BYTE *)(v7 + 52))
      {
        v20 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 64))(a1, *(_QWORD *)(v19 + 8 * v6 + 136), (*(_DWORD *)(v7 + 12) * *(_DWORD *)(a1 + 168)), *(unsigned int *)(v7 + 12), 0);
        if (*(_DWORD *)(a1 + 168) >= v18)
        {
          if (*(_DWORD *)(v7 + 32) == (*(_DWORD *)(v7 + 32) / *(_DWORD *)(v7 + 12))
                                     * (unint64_t)*(unsigned int *)(v7 + 12))
            v8 = *(unsigned int *)(v7 + 12);
          else
            v8 = *(unsigned int *)(v7 + 32)
               - (*(_DWORD *)(v7 + 32) / *(_DWORD *)(v7 + 12))
               * (unint64_t)*(unsigned int *)(v7 + 12);
          if ((int)v8 >= 1)
          {
LABEL_17:
            if (*(_DWORD *)(v7 + 28))
            {
              v9 = 0;
              v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 600)
                                                                                       + 8 * v6
                                                                                       + 8);
              v11 = *(_QWORD *)(a2 + 8 * v6);
              v12 = 1;
              do
              {
                if (v12)
                {
                  v13 = 0;
                  v14 = 0;
                  v15 = *(_QWORD *)(v20 + 8 * v9);
                  do
                  {
                    v10(a1, v7, v15, v11, v13);
                    v15 += 128;
                    v13 = (*(_DWORD *)(v7 + 36) + v13);
                    ++v14;
                    v12 = *(_DWORD *)(v7 + 28);
                  }
                  while (v14 < v12);
                }
                v11 += 8 * *(int *)(v7 + 40);
                ++v9;
              }
              while (v9 != v8);
            }
          }
        }
        else
        {
          v8 = *(unsigned int *)(v7 + 12);
          if ((int)v8 >= 1)
            goto LABEL_17;
        }
      }
      ++v6;
      v7 += 96;
    }
    while (v6 < *(int *)(a1 + 56));
  }
  v16 = *(_DWORD *)(a1 + 168) + 1;
  *(_DWORD *)(a1 + 168) = v16;
  if (v16 < *(_DWORD *)(a1 + 400))
    return 3;
  else
    return 4;
}

uint64_t sub_100388320()
{
  return 0;
}

uint64_t sub_100388328(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  void **v7;
  unsigned int v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;

  v3 = *(_DWORD **)(a1 + 560);
  v4 = *(_DWORD *)(a1 + 400);
  v5 = v3[12];
  v36 = v3[11];
  if (v36 >= v5)
  {
LABEL_31:
    ++*(_DWORD *)(a1 + 168);
    v26 = *(_DWORD *)(a1 + 160) + 1;
    *(_DWORD *)(a1 + 160) = v26;
    if (v26 >= v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 576) + 24))(a1);
      return 4;
    }
    else
    {
      v27 = *(_QWORD *)(a1 + 560);
      if (*(int *)(a1 + 416) < 2)
      {
        v29 = v4 - 1;
        v30 = *(_QWORD *)(a1 + 424);
        if (v26 >= v29)
          v28 = *(_DWORD *)(v30 + 76);
        else
          v28 = *(_DWORD *)(v30 + 12);
      }
      else
      {
        v28 = 1;
      }
      *(_DWORD *)(v27 + 48) = v28;
      *(_QWORD *)(v27 + 40) = 0;
      return 3;
    }
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 456) - 1;
    v39 = v4 - 1;
    v7 = (void **)(v3 + 14);
    v8 = v3[10];
    v31 = *(_DWORD **)(a1 + 560);
    v32 = v6;
    while (v8 > v6)
    {
LABEL_29:
      v8 = 0;
      v3[10] = 0;
      if (++v36 >= v5)
      {
        v4 = *(_DWORD *)(a1 + 400);
        goto LABEL_31;
      }
    }
    while (1)
    {
      if (*(_DWORD *)(a1 + 536))
        bzero(*v7, (uint64_t)*(int *)(a1 + 464) << 7);
      result = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)(a1 + 592) + 8))(a1, v7);
      if (!(_DWORD)result)
        break;
      v10 = *(_DWORD *)(a1 + 416);
      if (v10 >= 1)
      {
        v11 = 0;
        v12 = 0;
        v34 = v8;
        do
        {
          v13 = *(_QWORD *)(a1 + 8 * v11 + 424);
          if (*(_BYTE *)(v13 + 52))
          {
            if (v8 >= v6)
              v14 = 72;
            else
              v14 = 56;
            v15 = *(_DWORD *)(v13 + 60);
            if (v15 >= 1)
            {
              v38 = *(unsigned int *)(v13 + v14);
              if ((int)v38 < 1)
              {
                v12 += *(_DWORD *)(v13 + 56) * v15;
              }
              else
              {
                v35 = v11;
                v16 = 0;
                v17 = *(int *)(v13 + 4);
                v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 600)
                                                                                         + 8 * v17
                                                                                         + 8);
                v37 = *(_DWORD *)(v13 + 68) * v8;
                v19 = *(_DWORD *)(v13 + 40);
                v20 = *(_QWORD *)(a2 + 8 * v17) + 8 * v19 * v36;
                do
                {
                  if (*(_DWORD *)(a1 + 160) < v39 || v16 + v36 < *(_DWORD *)(v13 + 76))
                  {
                    v21 = v7;
                    v22 = &v7[v12];
                    v23 = v38;
                    v24 = v37;
                    do
                    {
                      v25 = (uint64_t)*v22++;
                      v18(a1, v13, v25, v20, v24);
                      v24 = (*(_DWORD *)(v13 + 36) + v24);
                      --v23;
                    }
                    while (v23);
                    v19 = *(_DWORD *)(v13 + 40);
                    v15 = *(_DWORD *)(v13 + 60);
                    v7 = v21;
                  }
                  v12 += *(_DWORD *)(v13 + 56);
                  v20 += 8 * v19;
                  ++v16;
                }
                while (v16 < v15);
                v10 = *(_DWORD *)(a1 + 416);
                v6 = v32;
                v8 = v34;
                v11 = v35;
              }
            }
          }
          else
          {
            v12 += *(_DWORD *)(v13 + 64);
          }
          ++v11;
        }
        while (v11 < v10);
      }
      if (++v8 > v6)
      {
        v3 = v31;
        v5 = v31[12];
        goto LABEL_29;
      }
    }
    v31[10] = v8;
    v31[11] = v36;
  }
  return result;
}

uint64_t sub_1003885F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 *v23;
  __int16 *v24;
  __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  __int16 *v28;
  int v29;
  int v30;
  __int16 *v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  int v91;
  int v92;
  void (*v93)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  __int128 __dst;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;

  v2 = a1;
  v70 = *(_QWORD *)(a1 + 560);
  v76 = *(_DWORD *)(a1 + 400) - 1;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  __dst = 0u;
  v103 = 0u;
  while (1)
  {
    v4 = *(_DWORD *)(v2 + 156);
    v5 = *(_DWORD *)(v2 + 164);
    if (v4 > v5)
      break;
    v6 = *(_QWORD *)(v2 + 576);
    if (*(_BYTE *)(v6 + 33))
      break;
    if (v4 == v5)
    {
      v7 = *(_DWORD *)(v2 + 168);
      if (!*(_DWORD *)(v2 + 508))
        ++v7;
      if (*(_DWORD *)(v2 + 160) > v7)
        break;
    }
    result = (*(uint64_t (**)(uint64_t))v6)(v2);
    if (!(_DWORD)result)
      return result;
  }
  if (*(int *)(v2 + 56) >= 1)
  {
    v71 = 0;
    v8 = *(_QWORD *)(v2 + 288);
    v89 = v2;
    do
    {
      if (!*(_BYTE *)(v8 + 52))
        goto LABEL_11;
      v9 = *(_DWORD *)(v2 + 168);
      if (v9 < v76)
      {
        v10 = *(_DWORD *)(v8 + 12);
        v13 = 2 * v10;
        LODWORD(v12) = v10;
        if (v9)
          goto LABEL_18;
      }
      else
      {
        v10 = *(_DWORD *)(v8 + 12);
        v11 = *(_DWORD *)(v8 + 32) % v10;
        if (v11)
          v12 = v11;
        else
          v12 = v10;
        v13 = v12;
        if (v9)
        {
LABEL_18:
          v14 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v2 + 8) + 64))(v2, *(_QWORD *)(v70 + 8 * v71 + 136), v10 * (v9 - 1), v10 + v13, 0)+ 8 * *(int *)(v8 + 12);
          v72 = (v12 - 1);
          if ((int)v12 >= 1)
            goto LABEL_22;
          goto LABEL_11;
        }
      }
      v14 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 + 8) + 64))(v2, *(_QWORD *)(v70 + 8 * v71 + 136), 0, v13, 0);
      v72 = (v12 - 1);
      if ((int)v12 >= 1)
      {
LABEL_22:
        v15 = 0;
        v93 = *(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)(v2 + 600) + 8 * v71 + 8);
        v95 = *(_QWORD *)(a2 + 8 * v71);
        v16 = *(unsigned __int16 **)(v8 + 80);
        v17 = v16[2];
        v18 = v16[9];
        v19 = v16[16];
        v90 = (_DWORD *)(*(_QWORD *)(v70 + 216) + 4 * (6 * v71));
        v20 = v16[8];
        v21 = *v16;
        v22 = v16[1];
        v92 = 9 * v21;
        v91 = 36 * v21;
        v87 = v22 << 8;
        v88 = v22 << 7;
        v86 = v20 << 7;
        v85 = v20 << 8;
        v83 = v19 << 8;
        v84 = v19 << 7;
        v81 = v18 << 7;
        v82 = 5 * v21;
        v79 = v17 << 7;
        v80 = v18 << 8;
        v78 = v17 << 8;
        v73 = v12;
        v74 = v14;
        v94 = v8;
        v75 = v9;
        do
        {
          v23 = *(__int16 **)(v14 + 8 * v15);
          v24 = v23;
          if (v9 | v15)
            v24 = *(__int16 **)(v14 + 8 * v15 - 8);
          if (v9 < v76 || (v25 = *(__int16 **)(v14 + 8 * v15), v15 != v72))
            v25 = *(__int16 **)(v14 + 8 * v15 + 8);
          v77 = v15;
          v26 = 0;
          v27 = 0;
          v30 = *v24;
          v28 = v24 + 64;
          v29 = v30;
          v33 = *v25;
          v31 = v25 + 64;
          v32 = v33;
          v34 = *(_DWORD *)(v8 + 28) - 1;
          v35 = v33;
          v99 = *v23;
          v101 = v99;
          v98 = v29;
          v100 = v29;
          do
          {
            v97 = v100;
            v100 = v98;
            v36 = v101;
            v101 = v99;
            v96 = v35;
            v35 = v32;
            sub_1003A7F0C(v23, &__dst, 1u);
            if (v27 < v34)
            {
              v98 = *v28;
              v99 = v23[64];
              v32 = *v31;
            }
            v37 = v90[1];
            if (v37)
              v38 = WORD1(__dst) == 0;
            else
              v38 = 0;
            if (v38)
            {
              v39 = v91 * (uint64_t)(v36 - v99);
              v40 = (v88 - v39) / v87;
              if (1 << v37 <= (int)v40)
                v41 = (1 << v37) - 1;
              else
                v41 = (v88 - v39) / v87;
              if (v37 > 0)
                LODWORD(v40) = v41;
              if (1 << v37 <= (int)((v39 + v88) / v87))
                v42 = (1 << v37) - 1;
              else
                LOWORD(v42) = (v39 + v88) / v87;
              if (v37 >= 1)
                LOWORD(v43) = v42;
              else
                LOWORD(v43) = (v39 + v88) / v87;
              if (v39 < 0)
                v43 = -(int)v40;
              WORD1(__dst) = v43;
            }
            v44 = v90[2];
            if (v44 && !(_WORD)v103)
            {
              v45 = v91 * (uint64_t)(v100 - v35);
              v46 = (v86 - v45) / v85;
              if (1 << v44 <= (int)v46)
                v47 = (1 << v44) - 1;
              else
                v47 = (v86 - v45) / v85;
              if (v44 > 0)
                LODWORD(v46) = v47;
              if (1 << v44 <= (int)((v45 + v86) / v85))
                v48 = (1 << v44) - 1;
              else
                LOWORD(v48) = (v45 + v86) / v85;
              if (v44 >= 1)
                LOWORD(v49) = v48;
              else
                LOWORD(v49) = (v45 + v86) / v85;
              if (v45 < 0)
                v49 = -(int)v46;
              LOWORD(v103) = v49;
            }
            v50 = v90[3];
            if (v50 && !(_WORD)v104)
            {
              v51 = v92 * (uint64_t)(v100 - 2 * v101 + v35);
              v52 = (v84 - v51) / v83;
              if (1 << v50 <= (int)v52)
                v53 = (1 << v50) - 1;
              else
                v53 = (v84 - v51) / v83;
              if (v50 > 0)
                LODWORD(v52) = v53;
              if (1 << v50 <= (int)((v51 + v84) / v83))
                v54 = (1 << v50) - 1;
              else
                LOWORD(v54) = (v51 + v84) / v83;
              if (v50 >= 1)
                LOWORD(v55) = v54;
              else
                LOWORD(v55) = (v51 + v84) / v83;
              if (v51 < 0)
                v55 = -(int)v52;
              LOWORD(v104) = v55;
            }
            v56 = v90[4];
            if (v56 && !WORD1(v103))
            {
              v57 = v82 * (uint64_t)(v97 - (v96 + v98) + v32);
              v58 = (v81 - v57) / v80;
              if (1 << v56 <= (int)v58)
                v59 = (1 << v56) - 1;
              else
                v59 = (v81 - v57) / v80;
              if (v56 > 0)
                LODWORD(v58) = v59;
              if (1 << v56 <= (int)((v57 + v81) / v80))
                v60 = (1 << v56) - 1;
              else
                LOWORD(v60) = (v57 + v81) / v80;
              if (v56 >= 1)
                LOWORD(v61) = v60;
              else
                LOWORD(v61) = (v57 + v81) / v80;
              if (v57 < 0)
                v61 = -(int)v58;
              WORD1(v103) = v61;
            }
            v62 = v90[5];
            if (v62 && !WORD2(__dst))
            {
              v63 = v92 * (uint64_t)(v36 - 2 * v101 + v99);
              v64 = (v79 - v63) / v78;
              if (1 << v62 <= (int)v64)
                v65 = (1 << v62) - 1;
              else
                v65 = (v79 - v63) / v78;
              if (v62 > 0)
                LODWORD(v64) = v65;
              if (1 << v62 <= (int)((v63 + v79) / v78))
                v66 = (1 << v62) - 1;
              else
                LOWORD(v66) = (v63 + v79) / v78;
              if (v62 >= 1)
                LOWORD(v67) = v66;
              else
                LOWORD(v67) = (v63 + v79) / v78;
              if (v63 < 0)
                v67 = -(int)v64;
              WORD2(__dst) = v67;
            }
            v2 = v89;
            v93(v89, v94, &__dst, v95, v26);
            v23 += 64;
            v26 = (*(_DWORD *)(v94 + 36) + v26);
            ++v27;
            v31 += 64;
            v28 += 64;
          }
          while (v27 <= v34);
          v8 = v94;
          v95 += 8 * *(int *)(v94 + 40);
          v15 = v77 + 1;
          v14 = v74;
          v9 = v75;
        }
        while (v77 + 1 != v73);
      }
LABEL_11:
      v8 += 96;
      ++v71;
    }
    while (v71 < *(int *)(v2 + 56));
  }
  v68 = *(_DWORD *)(v2 + 168) + 1;
  *(_DWORD *)(v2 + 168) = v68;
  if (v68 < *(_DWORD *)(v2 + 400))
    return 3;
  else
    return 4;
}

_QWORD *sub_100388C28(uint64_t *a1)
{
  _QWORD *result;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;

  result = (_QWORD *)(*(uint64_t (**)(void))a1[1])();
  v3 = result;
  a1[77] = (uint64_t)result;
  *result = nullsub_104;
  v4 = *((_DWORD *)a1 + 15);
  if (v4 > 7)
    goto LABEL_34;
  if (((1 << v4) & 0xCC) == 0)
  {
    if (((1 << v4) & 0x30) != 0)
    {
      if (*((_DWORD *)a1 + 14) == 4)
        goto LABEL_5;
      goto LABEL_4;
    }
    if (v4 == 1)
    {
      if (*((_DWORD *)a1 + 14) == 1)
        goto LABEL_5;
      goto LABEL_4;
    }
LABEL_34:
    if (*((int *)a1 + 14) > 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (*((_DWORD *)a1 + 14) != 3)
  {
LABEL_4:
    v5 = *a1;
    *(_DWORD *)(v5 + 40) = 11;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t *))v5)(a1);
  }
LABEL_5:
  if (*((_DWORD *)a1 + 91) && (*((_DWORD *)a1 + 15) | 4) != 6)
  {
    v11 = *a1;
    *(_DWORD *)(v11 + 40) = 28;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t *))v11)(a1);
    v6 = *((_DWORD *)a1 + 16);
    v7 = v6 - 1;
    if ((v6 - 1) > 5)
    {
LABEL_17:
      if (v6 == *((_DWORD *)a1 + 15))
      {
        *((_DWORD *)a1 + 31) = *((_DWORD *)a1 + 14);
LABEL_33:
        v26 = sub_10038A130;
LABEL_46:
        v3[1] = v26;
      }
      else
      {
LABEL_44:
        v43 = *a1;
        *(_DWORD *)(v43 + 40) = 28;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t *))v43)(a1);
      }
      goto LABEL_47;
    }
  }
  else
  {
    v6 = *((_DWORD *)a1 + 16);
    v7 = v6 - 1;
  }
  switch(v7)
  {
    case 0:
      *((_DWORD *)a1 + 31) = 1;
      switch(*((_DWORD *)a1 + 15))
      {
        case 1:
        case 3:
        case 7:
          v3[1] = sub_100389308;
          v8 = *((unsigned int *)a1 + 14);
          if ((int)v8 < 2)
            goto LABEL_47;
          v9 = a1[36];
          if ((_DWORD)v8 == 2)
          {
            v10 = 1;
LABEL_57:
            v60 = (_BYTE *)(v9 + 96 * v10 + 52);
            v61 = v8 - v10;
            do
            {
              *v60 = 0;
              v60 += 96;
              --v61;
            }
            while (v61);
            goto LABEL_47;
          }
          v10 = (v8 - 1) | 1;
          v58 = (_BYTE *)(v9 + 244);
          v59 = (v8 - 1) & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            *(v58 - 96) = 0;
            *v58 = 0;
            v58 += 192;
            v59 -= 2;
          }
          while (v59);
          if (v8 - 1 != ((v8 - 1) & 0xFFFFFFFFFFFFFFFELL))
            goto LABEL_57;
          break;
        case 2:
          v28 = *((_DWORD *)a1 + 91);
          if (v28 == 1)
          {
            v3[1] = sub_1003893B0;
          }
          else if (v28)
          {
            v62 = *a1;
            *(_DWORD *)(v62 + 40) = 28;
            (*(void (**)(uint64_t *))v62)(a1);
          }
          else
          {
            v3[1] = sub_100389324;
          }
          v63 = a1[77];
          result = (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 6144);
          v64 = 0;
          v65 = 0;
          v66 = 0;
          v67 = 0;
          *(_QWORD *)(v63 + 48) = result;
          do
          {
            v68 = &result[v67];
            *v68 = v65;
            v68[1] = v65 + 19595;
            v68[256] = v64;
            v68[257] = v64 + 38470;
            v69 = v66 + 0x8000;
            v70 = v66 + 40239;
            v67 += 2;
            v66 += 14942;
            v68[512] = v69;
            v65 += 39190;
            v64 += 76940;
            v68[513] = v70;
          }
          while (v67 != 256);
          goto LABEL_47;
        default:
          goto LABEL_44;
      }
      break;
    case 1:
      *((_DWORD *)a1 + 31) = 3;
      switch(*((_DWORD *)a1 + 15))
      {
        case 1:
          v26 = sub_10038944C;
          goto LABEL_46;
        case 2:
          v42 = *((_DWORD *)a1 + 91);
          if (v42 == 1)
            goto LABEL_45;
          if (v42)
            goto LABEL_44;
          goto LABEL_29;
        case 3:
          v29 = -11728000;
          v30 = -14831872;
          v31 = 5990656;
          v32 = 2919552;
          v3[1] = sub_1003897B4;
          v33 = (_QWORD *)a1[77];
          v33[2] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 1024);
          v33[3] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 1024);
          v33[4] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 2048);
          result = (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 2048);
          v34 = 0;
          v33[5] = result;
          v35 = v33[2];
          v36 = v33[3];
          v37 = v33[4];
          do
          {
            v38 = 4 * v34;
            v39 = v34;
            *(_QWORD *)(v37 + v39 * 8) = v31;
            result[v39] = v32;
            ++v34;
            v32 -= 22553;
            v31 -= 46802;
            v40 = v29 >> 16;
            v41 = v30 >> 16;
            v30 += 116130;
            v29 += 91881;
            *(_DWORD *)(v35 + v38) = v40;
            *(_DWORD *)(v36 + v38) = v41;
          }
          while (v34 != 256);
          goto LABEL_47;
        case 7:
          v3[1] = sub_1003897B4;
          v45 = (_QWORD *)a1[77];
          v45[2] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 1024);
          v45[3] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 1024);
          v45[4] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 2048);
          result = (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 2048);
          v46 = 0;
          v45[5] = result;
          v47 = v45[2];
          v48 = v45[3];
          v49 = -29696512;
          v50 = -23488896;
          v51 = 5806464;
          v52 = 11981184;
          v53 = v45[4];
          do
          {
            v54 = 4 * v46;
            v55 = v46;
            *(_QWORD *)(v53 + v55 * 8) = v52;
            result[v55] = v51;
            ++v46;
            v51 -= 45107;
            v52 -= 93603;
            v56 = v50 >> 16;
            v57 = v49 >> 16;
            v49 += 232260;
            v50 += 183763;
            *(_DWORD *)(v47 + v54) = v56;
            *(_DWORD *)(v48 + v54) = v57;
          }
          while (v46 != 256);
          goto LABEL_47;
        default:
          goto LABEL_44;
      }
    case 3:
      *((_DWORD *)a1 + 31) = 4;
      v12 = *((_DWORD *)a1 + 15);
      if (v12 == 4)
        goto LABEL_33;
      if (v12 != 5)
        goto LABEL_44;
      v13 = -11728000;
      v14 = -14831872;
      v15 = 5990656;
      v16 = 2919552;
      v3[1] = sub_10038A060;
      v17 = (_QWORD *)a1[77];
      v17[2] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 1024);
      v17[3] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 1024);
      v17[4] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 2048);
      result = (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 2048);
      v18 = 0;
      v17[5] = result;
      v19 = v17[2];
      v20 = v17[3];
      v21 = v17[4];
      do
      {
        v22 = 4 * v18;
        v23 = v18;
        *(_QWORD *)(v21 + v23 * 8) = v15;
        result[v23] = v16;
        ++v18;
        v16 -= 22553;
        v15 -= 46802;
        v24 = v13 >> 16;
        v25 = v14 >> 16;
        v14 += 116130;
        v13 += 91881;
        *(_DWORD *)(v19 + v22) = v24;
        *(_DWORD *)(v20 + v22) = v25;
      }
      while (v18 != 256);
      break;
    case 5:
      *((_DWORD *)a1 + 31) = 3;
      if (*((_DWORD *)a1 + 15) != 6)
        goto LABEL_44;
      v27 = *((_DWORD *)a1 + 91);
      if (v27 == 1)
      {
LABEL_45:
        v26 = sub_100389D14;
      }
      else
      {
        if (v27)
          goto LABEL_44;
LABEL_29:
        v26 = sub_10038986C;
      }
      goto LABEL_46;
    default:
      goto LABEL_17;
  }
LABEL_47:
  if (*((_BYTE *)a1 + 98))
    v44 = 1;
  else
    v44 = *((_DWORD *)a1 + 31);
  *((_DWORD *)a1 + 32) = v44;
  return result;
}

char *sub_100389308(uint64_t a1, char **a2, int a3, uint64_t a4, int a5)
{
  return sub_1003A7EB8(*a2, a3, a4, 0, a5, *(unsigned int *)(a1 + 116));
}

uint64_t sub_100389324(uint64_t result, _QWORD *a2, unsigned int a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  if (a5 >= 1)
  {
    v5 = *(unsigned int *)(result + 116);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(result + 616) + 48);
      do
      {
        v7 = 8 * a3;
        v8 = *(unsigned __int8 **)(*a2 + v7);
        v9 = *(unsigned __int8 **)(a2[1] + v7);
        v10 = *(unsigned __int8 **)(a2[2] + v7);
        ++a3;
        v11 = (_BYTE *)*a4;
        v12 = v5;
        do
        {
          v14 = *v8++;
          v13 = v14;
          v16 = *v9++;
          v15 = v16;
          v17 = *v10++;
          result = v17;
          *v11++ = (*(_DWORD *)(v6 + 8 * v15 + 2048)
                  + *(_QWORD *)(v6 + 8 * v13)
                  + *(_DWORD *)(v6 + 8 * v17 + 4096)) >> 16;
          --v12;
        }
        while (v12);
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

uint64_t sub_1003893B0(uint64_t result, _QWORD *a2, unsigned int a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  int v17;

  if (a5 >= 1)
  {
    v5 = *(unsigned int *)(result + 116);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(result + 616) + 48);
      do
      {
        v7 = 8 * a3;
        v8 = *(char **)(*a2 + v7);
        v9 = *(unsigned __int8 **)(a2[1] + v7);
        v10 = *(unsigned __int8 **)(a2[2] + v7);
        ++a3;
        v11 = (_BYTE *)*a4;
        v12 = v5;
        do
        {
          v14 = *v8++;
          v13 = v14;
          v16 = *v9++;
          v15 = v16;
          v17 = *v10++;
          result = (v15 ^ 0xFFFFFF80) + v17;
          *v11++ = (*(_DWORD *)(v6 + 8 * v15 + 2048)
                  + *(_QWORD *)(v6 + 8 * ((v15 ^ 0x80) + v13))
                  + *(_DWORD *)(v6 + 8 * ((v15 ^ 0x80) + v17) + 4096)) >> 16;
          --v12;
        }
        while (v12);
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

char *sub_10038944C(char *result, _QWORD *a2, unsigned int a3, char **a4, int a5)
{
  uint64_t v5;
  int v6;
  char *v7;
  char *v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int8x8_t *v21;
  char *v22;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  char v32;
  int8x16_t *v33;
  char *v34;
  int8x16_t *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int8 *v40;
  uint64_t v41;
  __int8 v42;
  int8x16_t *v43;
  char *v44;
  int8x16_t *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  int8x8_t *v51;
  uint64_t v52;
  int8x8_t v53;
  uint64_t v54;
  __int8 *v55;
  _BYTE *v56;
  char v57;
  int8x8x3_t v58;
  int8x8x3_t v59;
  int8x8x3_t v60;
  int8x8x3_t v61;
  int8x16x3_t v62;
  int8x16x3_t v63;
  int8x16x3_t v64;
  int8x16x3_t v65;

  if (a5 < 1)
    return result;
  v5 = *((unsigned int *)result + 29);
  if (!(_DWORD)v5)
    return result;
  if (v5 > 7)
  {
    v16 = 3 * *((unsigned int *)result + 29);
    v17 = v5 & 0xFFFFFFF8;
    v18 = 3 * v17;
    if (v5 > 0x1F)
    {
      v19 = v5 & 0xFFFFFFE0;
      if (v19 == v5)
      {
        do
        {
          v33 = *(int8x16_t **)(*a2 + 8 * a3);
          v34 = *a4;
          if (*a4 >= &v33->i8[v5] || v33 >= (int8x16_t *)&(*a4)[v16])
          {
            v36 = v33 + 1;
            v37 = v5 & 0xFFFFFFE0;
            do
            {
              v62.val[0] = v36[-1];
              v64.val[0] = *v36;
              v62.val[1] = v62.val[0];
              v62.val[2] = v62.val[0];
              v64.val[1] = *v36;
              v64.val[2] = *v36;
              v38 = v34 + 96;
              vst3q_s8(v34, v62);
              v39 = v34 + 48;
              vst3q_s8(v39, v64);
              v36 += 2;
              v34 = v38;
              v37 -= 32;
            }
            while (v37);
          }
          else
          {
            v40 = v34 + 2;
            v41 = v5;
            do
            {
              v42 = v33->i8[0];
              v33 = (int8x16_t *)((char *)v33 + 1);
              *v40 = v42;
              *(v40 - 1) = v42;
              *(v40 - 2) = v42;
              v40 += 3;
              --v41;
            }
            while (v41);
          }
          ++a3;
          ++a4;
          v20 = a5-- <= 1;
        }
        while (!v20);
        return result;
      }
      while (1)
      {
        v43 = *(int8x16_t **)(*a2 + 8 * a3);
        v44 = *a4;
        if (*a4 >= &v43->i8[v5] || v43 >= (int8x16_t *)&(*a4)[v16])
        {
          v46 = v43 + 1;
          v47 = v5 & 0xFFFFFFE0;
          v48 = *a4;
          do
          {
            v63.val[0] = v46[-1];
            v65.val[0] = *v46;
            v63.val[1] = v63.val[0];
            v63.val[2] = v63.val[0];
            v65.val[1] = *v46;
            v65.val[2] = *v46;
            v49 = v48 + 96;
            vst3q_s8(v48, v63);
            v50 = v48 + 48;
            vst3q_s8(v50, v65);
            v46 += 2;
            v48 = v49;
            v47 -= 32;
          }
          while (v47);
          result = &v44[3 * v19];
          if ((v5 & 0x18) != 0)
          {
            v44 += v18;
            v51 = (int8x8_t *)&v43->i8[v19];
            v52 = v17 - v19;
            do
            {
              v53 = *v51++;
              v61.val[0] = v53;
              v61.val[1] = v53;
              v61.val[2] = v53;
              vst3_s8(result, v61);
              result += 24;
              v52 -= 8;
            }
            while (v52);
            v54 = v5 & 0xFFFFFFF8;
            if (v17 == v5)
              goto LABEL_40;
          }
          else
          {
            v54 = v5 & 0xFFFFFFE0;
            v44 += 3 * v19;
          }
        }
        else
        {
          v54 = 0;
        }
        v55 = &v43->i8[v54];
        result = (char *)(v5 - v54);
        v56 = v44 + 2;
        do
        {
          v57 = *v55++;
          *v56 = v57;
          *(v56 - 1) = v57;
          *(v56 - 2) = v57;
          v56 += 3;
          --result;
        }
        while (result);
LABEL_40:
        ++a3;
        ++a4;
        v20 = a5-- <= 1;
        if (v20)
          return result;
      }
    }
    while (1)
    {
      v21 = *(int8x8_t **)(*a2 + 8 * a3);
      v22 = *a4;
      if (*a4 >= (char *)v21 + v5 || v21 >= (int8x8_t *)&(*a4)[v16])
      {
        v58.val[0] = *v21;
        v58.val[1] = *v21;
        v58.val[2] = *v21;
        v24 = *a4;
        vst3_s8(v24, v58);
        v25 = &v24[v18];
        if (v17 != 8)
        {
          v26 = v22 + 24;
          v59.val[0] = v21[1];
          v59.val[1] = v59.val[0];
          v59.val[2] = v59.val[0];
          vst3_s8(v26, v59);
          if (v17 != 16)
          {
            v27 = v22 + 48;
            v60.val[0] = v21[2];
            v60.val[1] = v60.val[0];
            v60.val[2] = v60.val[0];
            vst3_s8(v27, v60);
          }
        }
        v28 = v5 & 0x18;
        v22 = v25;
        if (v17 == v5)
          goto LABEL_16;
      }
      else
      {
        v28 = 0;
      }
      v29 = v5 - v28;
      v30 = (char *)v21 + v28;
      v31 = v22 + 2;
      do
      {
        v32 = *v30++;
        *v31 = v32;
        *(v31 - 1) = v32;
        *(v31 - 2) = v32;
        v31 += 3;
        --v29;
      }
      while (v29);
LABEL_16:
      ++a3;
      ++a4;
      v20 = a5-- <= 1;
      if (v20)
        return result;
    }
  }
  v6 = a5 + 1;
  do
  {
    v7 = *(char **)(*a2 + 8 * a3);
    v8 = *a4;
    v9 = *v7;
    v8[2] = *v7;
    v8[1] = v9;
    *v8 = v9;
    if ((_DWORD)v5 != 1)
    {
      v10 = v7[1];
      v8[5] = v10;
      v8[4] = v10;
      v8[3] = v10;
      if ((_DWORD)v5 != 2)
      {
        v11 = v7[2];
        v8[8] = v11;
        v8[7] = v11;
        v8[6] = v11;
        if ((_DWORD)v5 != 3)
        {
          v12 = v7[3];
          v8[11] = v12;
          v8[10] = v12;
          v8[9] = v12;
          if ((_DWORD)v5 != 4)
          {
            v13 = v7[4];
            v8[14] = v13;
            v8[13] = v13;
            v8[12] = v13;
            if ((_DWORD)v5 != 5)
            {
              v14 = v7[5];
              v8[17] = v14;
              v8[16] = v14;
              v8[15] = v14;
              if ((_DWORD)v5 != 6)
              {
                v15 = v7[6];
                v8[20] = v15;
                v8[19] = v15;
                v8[18] = v15;
              }
            }
          }
        }
      }
    }
    ++a3;
    ++a4;
    --v6;
  }
  while (v6 > 1);
  return result;
}

uint64_t sub_1003897B4(uint64_t result, _QWORD *a2, unsigned int a3, uint64_t *a4, int a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  if (a5 >= 1)
  {
    v5 = *(unsigned int *)(result + 116);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD **)(result + 616);
      v7 = *(_QWORD *)(result + 408);
      v8 = v6[2];
      v9 = v6[3];
      v10 = v6[4];
      v11 = v6[5];
      do
      {
        v12 = 8 * a3;
        v13 = *(unsigned __int8 **)(*a2 + v12);
        v14 = *(unsigned __int8 **)(a2[1] + v12);
        v15 = *(unsigned __int8 **)(a2[2] + v12);
        ++a3;
        result = *a4;
        v16 = v5;
        do
        {
          v18 = *v13++;
          v17 = v18;
          v20 = *v14++;
          v19 = v20;
          v21 = *v15++;
          *(_BYTE *)result = *(_BYTE *)(v7 + *(int *)(v8 + 4 * v21) + v17);
          *(_BYTE *)(result + 1) = *(_BYTE *)(v7
                                            + v17
                                            + (int)((*(_QWORD *)(v10 + 8 * v21) + *(_QWORD *)(v11 + 8 * v19)) >> 16));
          *(_BYTE *)(result + 2) = *(_BYTE *)(v7 + *(int *)(v9 + 4 * v19) + v17);
          result += 3;
          --v16;
        }
        while (v16);
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

int8x16_t *sub_10038986C(int8x16_t *result, _QWORD *a2, unsigned int a3, char **a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t *v17;
  int8x8_t *v18;
  int8x8_t *v19;
  char *v20;
  int8x8_t *v21;
  BOOL v23;
  _BOOL4 v25;
  BOOL v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  char v34;
  char v35;
  BOOL v36;
  char *v37;
  uint64_t v38;
  int8x8_t *v39;
  int8x8_t *v40;
  int8x8_t *v41;
  char *v42;
  int8x8_t *v43;
  BOOL v45;
  _BOOL4 v47;
  BOOL v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char v52;
  __int8 v53;
  __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t *v59;
  int8x16_t *v60;
  char *v61;
  int8x16_t *v62;
  BOOL v64;
  BOOL v66;
  BOOL v67;
  int8x16_t *v68;
  int8x16_t *v69;
  int8x16_t *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  int8x8_t *v76;
  int8x8_t *v77;
  int8x8_t *v78;
  uint64_t v79;
  int8x8_t v80;
  int8x8_t v81;
  int8x8_t v82;
  __int8 *v83;
  __int8 *v84;
  uint64_t v85;
  char v86;
  char v87;
  __int8 v88;
  int8x8x3_t v89;
  int8x8x3_t v90;
  int8x8x3_t v91;
  int8x8x3_t v92;
  int8x8x3_t v93;
  int8x8x3_t v94;
  int8x8x3_t v95;
  int8x16x3_t v96;
  int8x16x3_t v97;

  if (a5 < 1)
    return result;
  v5 = result[7].u32[1];
  if (!(_DWORD)v5)
    return result;
  if (v5 <= 7)
  {
    v6 = a5 + 1;
    do
    {
      v7 = 8 * a3;
      v8 = *(char **)(*a2 + v7);
      v9 = *(char **)(a2[1] + v7);
      v10 = *(char **)(a2[2] + v7);
      v11 = *a4;
      *v11 = *v8;
      v11[1] = *v9;
      v11[2] = *v10;
      if ((_DWORD)v5 != 1)
      {
        v11[3] = v8[1];
        v11[4] = v9[1];
        v11[5] = v10[1];
        if ((_DWORD)v5 != 2)
        {
          v11[6] = v8[2];
          v11[7] = v9[2];
          v11[8] = v10[2];
          if ((_DWORD)v5 != 3)
          {
            v11[9] = v8[3];
            v11[10] = v9[3];
            v11[11] = v10[3];
            if ((_DWORD)v5 != 4)
            {
              v11[12] = v8[4];
              v11[13] = v9[4];
              v11[14] = v10[4];
              if ((_DWORD)v5 != 5)
              {
                v11[15] = v8[5];
                v11[16] = v9[5];
                v11[17] = v10[5];
                if ((_DWORD)v5 != 6)
                {
                  v11[18] = v8[6];
                  v11[19] = v9[6];
                  v11[20] = v10[6];
                }
              }
            }
          }
        }
      }
      ++a4;
      --v6;
      ++a3;
    }
    while (v6 > 1);
    return result;
  }
  v12 = 3 * result[7].u32[1];
  v13 = v5 & 0xFFFFFFF8;
  v14 = 3 * v13;
  if (v5 >= 0x20)
  {
    v55 = v5 & 0xFFFFFFE0;
    while (1)
    {
      v57 = 0;
      v58 = 8 * a3;
      v59 = *(int8x16_t **)(*a2 + v58);
      v60 = *(int8x16_t **)(a2[1] + v58);
      result = *(int8x16_t **)(a2[2] + v58);
      v61 = *a4;
      v62 = (int8x16_t *)&(*a4)[v12];
      v64 = *a4 < &v60->i8[v5] && v60 < v62;
      v66 = v61 < &result->i8[v5] && result < v62;
      v67 = v59 >= v62 || v61 >= &v59->i8[v5];
      if (v67 && !v64 && !v66)
      {
        v68 = v59 + 1;
        v69 = v60 + 1;
        v70 = result + 1;
        v71 = *a4;
        v72 = v5 & 0xFFFFFFE0;
        do
        {
          v96.val[0] = v68[-1];
          v97.val[0] = *v68;
          v96.val[1] = v69[-1];
          v97.val[1] = *v69;
          v96.val[2] = v70[-1];
          v97.val[2] = *v70;
          v73 = v71 + 96;
          vst3q_s8(v71, v96);
          v74 = v71 + 48;
          vst3q_s8(v74, v97);
          v68 += 2;
          v69 += 2;
          v70 += 2;
          v71 = v73;
          v72 -= 32;
        }
        while (v72);
        if (v55 == v5)
          goto LABEL_71;
        v56 = 3 * (v5 & 0xFFFFFFE0);
        v75 = &v61[v56];
        if ((v5 & 0x18) != 0)
        {
          v61 += v14;
          v76 = (int8x8_t *)&v59->i8[v55];
          v77 = (int8x8_t *)&v60->i8[v55];
          v78 = (int8x8_t *)&result->i8[v55];
          v79 = v13 - (v5 & 0xFFFFFFE0);
          do
          {
            v80 = *v76++;
            v95.val[0] = v80;
            v81 = *v77++;
            v95.val[1] = v81;
            v82 = *v78++;
            v95.val[2] = v82;
            vst3_s8(v75, v95);
            v75 += 24;
            v79 -= 8;
          }
          while (v79);
          v57 = v5 & 0xFFFFFFF8;
          if (v13 == v5)
            goto LABEL_71;
        }
        else
        {
          v57 = v5 & 0xFFFFFFE0;
          v61 += v56;
        }
      }
      v83 = &v59->i8[v57];
      v84 = &v60->i8[v57];
      result = (int8x16_t *)((char *)result + v57);
      v85 = v5 - v57;
      do
      {
        v86 = *v83++;
        *v61 = v86;
        v87 = *v84++;
        v61[1] = v87;
        v88 = result->i8[0];
        result = (int8x16_t *)((char *)result + 1);
        v61[2] = v88;
        v61 += 3;
        --v85;
      }
      while (v85);
LABEL_71:
      ++a3;
      ++a4;
      v36 = a5-- <= 1;
      if (v36)
        return result;
    }
  }
  if (v13 == v5)
  {
    do
    {
      v38 = 8 * a3;
      v39 = *(int8x8_t **)(*a2 + v38);
      v40 = *(int8x8_t **)(a2[1] + v38);
      v41 = *(int8x8_t **)(a2[2] + v38);
      v42 = *a4;
      v43 = (int8x8_t *)&(*a4)[v12];
      result = (int8x16_t *)((char *)v39 + v5);
      v45 = *a4 < (char *)v40 + v5 && v40 < v43;
      v47 = v42 < (char *)v41 + v5 && v41 < v43;
      v48 = v39 >= v43 || v42 >= (char *)result;
      if (!v48 || v45 || v47)
      {
        v51 = v5;
        do
        {
          v52 = v39->i8[0];
          v39 = (int8x8_t *)((char *)v39 + 1);
          *v42 = v52;
          v53 = v40->i8[0];
          v40 = (int8x8_t *)((char *)v40 + 1);
          v42[1] = v53;
          v54 = v41->i8[0];
          v41 = (int8x8_t *)((char *)v41 + 1);
          v42[2] = v54;
          v42 += 3;
          --v51;
        }
        while (v51);
      }
      else
      {
        v92.val[0] = *v39;
        v92.val[1] = *v40;
        v92.val[2] = *v41;
        vst3_s8(v42, v92);
        if (v13 != 8)
        {
          v49 = v42 + 24;
          v93.val[0] = v39[1];
          v93.val[1] = v40[1];
          v93.val[2] = v41[1];
          vst3_s8(v49, v93);
          if (v13 != 16)
          {
            v50 = v42 + 48;
            v94.val[0] = v39[2];
            v94.val[1] = v40[2];
            v94.val[2] = v41[2];
            vst3_s8(v50, v94);
          }
        }
      }
      ++a3;
      ++a4;
      v36 = a5-- <= 1;
    }
    while (!v36);
  }
  else
  {
    do
    {
      v15 = 0;
      v16 = 8 * a3;
      v17 = *(int8x8_t **)(*a2 + v16);
      v18 = *(int8x8_t **)(a2[1] + v16);
      v19 = *(int8x8_t **)(a2[2] + v16);
      v20 = *a4;
      v21 = (int8x8_t *)&(*a4)[v12];
      v23 = *a4 < (char *)v18 + v5 && v18 < v21;
      v25 = v20 < (char *)v19 + v5 && v19 < v21;
      v26 = v17 >= v21 || v20 >= (char *)v17 + v5;
      if (!v26 || v23 || v25)
      {
        v28 = *a4;
      }
      else
      {
        v89.val[0] = *v17;
        v89.val[1] = *v18;
        v89.val[2] = *v19;
        v27 = *a4;
        vst3_s8(v27, v89);
        v28 = &v27[v14];
        if (v13 == 8
          || (v29 = v20 + 24, v90.val[0] = v17[1],
                              v90.val[1] = v18[1],
                              v90.val[2] = v19[1],
                              vst3_s8(v29, v90),
                              v13 == 16))
        {
          v15 = v5 & 0x18;
        }
        else
        {
          v37 = v20 + 48;
          v91.val[0] = v17[2];
          v91.val[1] = v18[2];
          v91.val[2] = v19[2];
          vst3_s8(v37, v91);
          v15 = v5 & 0xFFFFFFF8;
        }
      }
      ++a3;
      result = (int8x16_t *)(v5 - v15);
      v30 = (char *)v19 + v15;
      v31 = (char *)v18 + v15;
      v32 = (char *)v17 + v15;
      do
      {
        v33 = *v32++;
        *v28 = v33;
        v34 = *v31++;
        v28[1] = v34;
        v35 = *v30++;
        v28[2] = v35;
        v28 += 3;
        result = (int8x16_t *)((char *)result - 1);
      }
      while (result);
      ++a4;
      v36 = a5-- <= 1;
    }
    while (!v36);
  }
  return result;
}

char *sub_100389D14(char *result, _QWORD *a2, unsigned int a3, char **a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  char *v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  int8x16_t v26;
  uint64_t v28;
  uint64_t v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  char *v33;
  unint64_t v34;
  BOOL v36;
  BOOL v38;
  BOOL v39;
  uint64_t v40;
  int8x8_t *v41;
  int8x8_t *v42;
  int8x8_t *v43;
  char *v44;
  uint64_t v45;
  int8x8_t v46;
  int8x8_t v47;
  int8x8_t v48;
  int8x8_t v49;
  __int8 *v50;
  __int8 *v51;
  __int8 *v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char *v59;
  int8x16_t *v60;
  int8x16_t *v61;
  int8x16_t *v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x8x3_t v67;
  int8x16x3_t v68;

  if (a5 < 1)
    return result;
  v5 = *((unsigned int *)result + 29);
  if (!(_DWORD)v5)
    return result;
  if (v5 >= 8)
  {
    v26.i64[0] = 0x8080808080808080;
    v26.i64[1] = 0x8080808080808080;
    while (1)
    {
      v28 = 0;
      v29 = 8 * a3;
      v30 = *(int8x16_t **)(*a2 + v29);
      v31 = *(int8x16_t **)(a2[1] + v29);
      v32 = *(int8x16_t **)(a2[2] + v29);
      v33 = *a4;
      v34 = (unint64_t)&(*a4)[3 * v5];
      v36 = *a4 < &v31->i8[v5] && (unint64_t)v31 < v34;
      v38 = v33 < &v32->i8[v5] && (unint64_t)v32 < v34;
      v39 = (unint64_t)v30 >= v34 || v33 >= &v30->i8[v5];
      if (!v39 || v36 || v38)
      {
        result = *a4;
      }
      else
      {
        if (v5 < 0x10)
        {
          v40 = 0;
LABEL_36:
          result = &v33[3 * (v5 & 0xFFFFFFF8)];
          v41 = (int8x8_t *)&v30->i8[v40];
          v42 = (int8x8_t *)&v31->i8[v40];
          v43 = (int8x8_t *)&v32->i8[v40];
          v44 = &v33[3 * v40];
          v45 = v40 - (v5 & 0xFFFFFFF8);
          do
          {
            v46 = *v41++;
            v47 = v46;
            v48 = *v42++;
            v67.val[1] = v48;
            v49 = *v43++;
            v67.val[0] = veor_s8(vadd_s8(v67.val[1], v47), (int8x8_t)0x8080808080808080);
            v67.val[2] = veor_s8(vadd_s8(v49, v67.val[1]), (int8x8_t)0x8080808080808080);
            vst3_s8(v44, v67);
            v44 += 24;
            v45 += 8;
          }
          while (v45);
          v28 = v5 & 0xFFFFFFF8;
          if (v28 == v5)
            goto LABEL_14;
          goto LABEL_41;
        }
        result = (char *)(v5 & 0xFFFFFFF0);
        v59 = *a4;
        v60 = v32;
        v61 = v31;
        v62 = v30;
        do
        {
          v63 = *v62++;
          v64 = v63;
          v65 = *v61++;
          v68.val[1] = v65;
          v66 = *v60++;
          v68.val[0] = veorq_s8(vaddq_s8(v68.val[1], v64), v26);
          v68.val[2] = veorq_s8(vaddq_s8(v66, v68.val[1]), v26);
          vst3q_s8(v59, v68);
          v59 += 48;
          result -= 16;
        }
        while (result);
        if ((v5 & 0xFFFFFFF0) == v5)
          goto LABEL_14;
        v40 = v5 & 0xFFFFFFF0;
        if ((v5 & 8) != 0)
          goto LABEL_36;
        result = &v33[3 * (v5 & 0xFFFFFFF0)];
        v28 = v5 & 0xFFFFFFF0;
      }
LABEL_41:
      v50 = &v30->i8[v28];
      v51 = &v31->i8[v28];
      v52 = &v32->i8[v28];
      v53 = v5 - v28;
      do
      {
        v55 = *v50++;
        v54 = v55;
        v57 = *v51++;
        v56 = v57;
        v58 = *v52++;
        *result = (v56 + v54) ^ 0x80;
        result[1] = v56;
        result[2] = (v58 + v56) ^ 0x80;
        result += 3;
        --v53;
      }
      while (v53);
LABEL_14:
      ++a3;
      ++a4;
      if (a5-- <= 1)
        return result;
    }
  }
  v6 = a5 + 1;
  do
  {
    v7 = 8 * a3;
    v8 = *(_BYTE **)(*a2 + v7);
    v9 = *(char **)(a2[1] + v7);
    v10 = *(char **)(a2[2] + v7);
    v11 = *a4;
    v12 = *v9;
    v13 = *v10;
    *v11 = (*v9 + *v8) ^ 0x80;
    v11[1] = v12;
    v11[2] = (v13 + v12) ^ 0x80;
    if ((_DWORD)v5 != 1)
    {
      v14 = v9[1];
      v15 = v10[1];
      v11[3] = (v14 + v8[1]) ^ 0x80;
      v11[4] = v14;
      v11[5] = (v15 + v14) ^ 0x80;
      if ((_DWORD)v5 != 2)
      {
        v16 = v9[2];
        v17 = v10[2];
        v11[6] = (v16 + v8[2]) ^ 0x80;
        v11[7] = v16;
        v11[8] = (v17 + v16) ^ 0x80;
        if ((_DWORD)v5 != 3)
        {
          v18 = v9[3];
          v19 = v10[3];
          v11[9] = (v18 + v8[3]) ^ 0x80;
          v11[10] = v18;
          v11[11] = (v19 + v18) ^ 0x80;
          if ((_DWORD)v5 != 4)
          {
            v20 = v9[4];
            v21 = v10[4];
            v11[12] = (v20 + v8[4]) ^ 0x80;
            v11[13] = v20;
            v11[14] = (v21 + v20) ^ 0x80;
            if ((_DWORD)v5 != 5)
            {
              v22 = v9[5];
              v23 = v10[5];
              v11[15] = (v22 + v8[5]) ^ 0x80;
              v11[16] = v22;
              v11[17] = (v23 + v22) ^ 0x80;
              if ((_DWORD)v5 != 6)
              {
                v24 = v9[6];
                v25 = v10[6];
                v11[18] = (v24 + v8[6]) ^ 0x80;
                v11[19] = v24;
                v11[20] = (v25 + v24) ^ 0x80;
              }
            }
          }
        }
      }
    }
    ++a4;
    --v6;
    ++a3;
  }
  while (v6 > 1);
  return result;
}

_BYTE *sub_10038A060(_BYTE *result, _QWORD *a2, unsigned int a3, _BYTE **a4, int a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  if (a5 >= 1)
  {
    v5 = *((unsigned int *)result + 29);
    if ((_DWORD)v5)
    {
      v6 = (_QWORD *)*((_QWORD *)result + 77);
      v7 = *((_QWORD *)result + 51);
      v8 = v6[2];
      v9 = v6[3];
      v10 = v6[4];
      v11 = v6[5];
      do
      {
        v12 = 8 * a3;
        v13 = *(unsigned __int8 **)(*a2 + v12);
        v14 = *(unsigned __int8 **)(a2[1] + v12);
        v15 = *(unsigned __int8 **)(a2[2] + v12);
        result = *(_BYTE **)(a2[3] + v12);
        ++a3;
        v16 = v5;
        v17 = *a4;
        do
        {
          v19 = *v13++;
          v18 = v19;
          v21 = *v14++;
          v20 = v21;
          v22 = *v15++;
          v18 ^= 0xFFu;
          *v17 = *(_BYTE *)(v7 + v18 - *(_DWORD *)(v8 + 4 * v22));
          v17[1] = *(_BYTE *)(v7 + (int)(v18 - ((*(_QWORD *)(v10 + 8 * v22) + *(_QWORD *)(v11 + 8 * v20)) >> 16)));
          v17[2] = *(_BYTE *)(v7 + v18 - *(_DWORD *)(v9 + 4 * v20));
          LOBYTE(v22) = *result++;
          v17[3] = v22;
          v17 += 4;
          --v16;
        }
        while (v16);
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

uint64_t sub_10038A130(uint64_t result, uint64_t a2, unsigned int a3, uint64_t *a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  char v12;

  if (a5 >= 1)
  {
    v5 = *(int *)(result + 56);
    v6 = *(_DWORD *)(result + 116);
    if ((int)v5 >= 1 && v6 != 0)
    {
      do
      {
        v8 = 0;
        do
        {
          v9 = *(char **)(*(_QWORD *)(a2 + 8 * v8) + 8 * a3);
          v10 = *a4;
          v11 = v6;
          do
          {
            v12 = *v9++;
            *(_BYTE *)(v10 + v8) = v12;
            v10 += v5;
            --v11;
          }
          while (v11);
          ++v8;
        }
        while (v8 != v5);
        ++a3;
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

__n128 sub_10038A1A4(uint64_t a1)
{
  uint64_t (**v2)(uint64_t, double, double, float64x2_t, double, float64x2_t, double, double);
  __n128 result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _OWORD *v7;

  v2 = (uint64_t (**)(uint64_t, double, double, float64x2_t, double, float64x2_t, double, double))(**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 600) = v2;
  *v2 = sub_10038A268;
  if (*(int *)(a1 + 56) >= 1)
  {
    v4 = 0;
    v5 = v2 + 11;
    v6 = (_QWORD *)(*(_QWORD *)(a1 + 288) + 88);
    do
    {
      v7 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 256);
      *v6 = v7;
      v6 += 12;
      result = 0uLL;
      *v7 = 0u;
      v7[1] = 0u;
      v7[2] = 0u;
      v7[3] = 0u;
      v7[4] = 0u;
      v7[5] = 0u;
      v7[6] = 0u;
      v7[7] = 0u;
      v7[8] = 0u;
      v7[9] = 0u;
      v7[10] = 0u;
      v7[11] = 0u;
      v7[12] = 0u;
      v7[13] = 0u;
      v7[14] = 0u;
      v7[15] = 0u;
      *((_DWORD *)v5 + v4++) = -1;
    }
    while (v4 < *(int *)(a1 + 56));
  }
  return result;
}

uint64_t sub_10038A268(uint64_t result, double a2, double a3, float64x2_t a4, double a5, float64x2_t a6, double a7, double a8)
{
  int *v8;
  uint64_t v9;
  uint64_t (*v10)();
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t (**v34)(int *);
  uint64_t v35;
  uint64_t (**v36)(int *);
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float32x4_t v43;
  double v44;
  float64x2_t v45;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float32x4_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float32x4_t v56;
  float64x2_t v57;
  float32x4_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float32x4_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float32x4_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float32x4_t v73;
  float64x2_t v74;
  float32x4_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float32x4_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  int8x16_t v87;
  uint32x4_t v88;
  uint32x4_t v89;
  uint64_t v90;
  uint32x4_t v91;
  uint32x4_t v92;
  uint32x4_t v93;
  int8x16_t v94;
  int8x16_t v95;
  uint32x4_t v96;
  uint32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  uint32x4_t v100;
  uint32x4_t v101;
  int8x16_t v102;
  int8x16_t v103;
  uint32x4_t v104;
  int64x2_t v105;
  float64x2_t v106;
  int64x2_t v107;
  float64_t v108;

  if (*(int *)(result + 56) >= 1)
  {
    v8 = (int *)result;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD *)(result + 600);
    v13 = (_QWORD *)(v12 + 8);
    v14 = v12 + 88;
    v15 = (_QWORD *)(*(_QWORD *)(result + 288) + 88);
    __asm { FMOV            V1.2D, #1.0 }
    v107 = vdupq_n_s64(0x3FF63150B14861EFuLL);
    v108 = *(double *)_Q1.i64;
    _Q1.i64[0] = 0x3FF4E7AE914D6FCALL;
    __asm { FMOV            V0.2D, #0.125 }
    v106 = (float64x2_t)_Q0;
    v105 = vdupq_n_s64(0x3FE92469C0A7BF3BuLL);
    _Q0.i64[0] = 0x587E625468624B42;
    do
    {
      v30 = *((_DWORD *)v15 - 13);
      v31 = *((_DWORD *)v15 - 12) + (v30 << 8);
      if (v31 > 1805)
      {
        if (v31 > 3077)
        {
          if (v31 > 3597)
          {
            if (v31 > 4103)
            {
              if (v31 == 4104)
              {
                v11 = 0;
                v10 = (uint64_t (*)())sub_10039FFB8;
                *v13 = sub_10039FFB8;
                if (!*((_BYTE *)v15 - 36))
                  goto LABEL_5;
              }
              else
              {
                if (v31 != 4112)
                {
LABEL_118:
                  v33 = *(_QWORD *)v8;
                  *(_DWORD *)(v33 + 40) = 7;
                  *(_DWORD *)(v33 + 44) = v30;
                  *(_DWORD *)(*(_QWORD *)v8 + 48) = *((_DWORD *)v15 - 12);
                  v34 = *(uint64_t (***)(int *))v8;
                  goto LABEL_120;
                }
                v11 = 0;
                v10 = (uint64_t (*)())sub_10039F98C;
                *v13 = sub_10039F98C;
                if (!*((_BYTE *)v15 - 36))
                  goto LABEL_5;
              }
            }
            else if (v31 == 3598)
            {
              v11 = 0;
              v10 = (uint64_t (*)())sub_10039EF2C;
              *v13 = sub_10039EF2C;
              if (!*((_BYTE *)v15 - 36))
                goto LABEL_5;
            }
            else
            {
              if (v31 != 3855)
                goto LABEL_118;
              v11 = 0;
              v10 = (uint64_t (*)())sub_10039F424;
              *v13 = sub_10039F424;
              if (!*((_BYTE *)v15 - 36))
                goto LABEL_5;
            }
          }
          else if (v31 > 3340)
          {
            if (v31 == 3341)
            {
              v11 = 0;
              v10 = (uint64_t (*)())sub_10039E9CC;
              *v13 = sub_10039E9CC;
              if (!*((_BYTE *)v15 - 36))
                goto LABEL_5;
            }
            else
            {
              if (v31 != 3591)
                goto LABEL_118;
              v11 = 0;
              v10 = (uint64_t (*)())sub_1003A051C;
              *v13 = sub_1003A051C;
              if (!*((_BYTE *)v15 - 36))
                goto LABEL_5;
            }
          }
          else if (v31 == 3078)
          {
            v11 = 0;
            v10 = (uint64_t (*)())sub_1003A094C;
            *v13 = sub_1003A094C;
            if (!*((_BYTE *)v15 - 36))
              goto LABEL_5;
          }
          else
          {
            if (v31 != 3084)
              goto LABEL_118;
            v11 = 0;
            v10 = (uint64_t (*)())sub_10039E55C;
            *v13 = sub_10039E55C;
            if (!*((_BYTE *)v15 - 36))
              goto LABEL_5;
          }
        }
        else if (v31 > 2312)
        {
          if (v31 > 2569)
          {
            if (v31 == 2570)
            {
              v11 = 0;
              v10 = (uint64_t (*)())sub_10039DCC8;
              *v13 = sub_10039DCC8;
              if (!*((_BYTE *)v15 - 36))
                goto LABEL_5;
            }
            else
            {
              if (v31 != 2827)
                goto LABEL_118;
              v11 = 0;
              v10 = (uint64_t (*)())sub_10039E0A4;
              *v13 = sub_10039E0A4;
              if (!*((_BYTE *)v15 - 36))
                goto LABEL_5;
            }
          }
          else if (v31 == 2313)
          {
            v11 = 0;
            v10 = (uint64_t (*)())sub_10039D92C;
            *v13 = sub_10039D92C;
            if (!*((_BYTE *)v15 - 36))
              goto LABEL_5;
          }
          else
          {
            if (v31 != 2565)
              goto LABEL_118;
            v11 = 0;
            v10 = (uint64_t (*)())sub_1003A0CA8;
            *v13 = sub_1003A0CA8;
            if (!*((_BYTE *)v15 - 36))
              goto LABEL_5;
          }
        }
        else if (v31 > 2055)
        {
          if (v31 == 2056)
          {
            v32 = v8[23];
            if (v32 >= 3)
            {
              v34 = *(uint64_t (***)(int *))v8;
              *(_DWORD *)(*(_QWORD *)v8 + 40) = 49;
LABEL_120:
              result = (*v34)(v8);
              *v13 = v10;
              if (!*((_BYTE *)v15 - 36))
                goto LABEL_5;
              goto LABEL_121;
            }
            v10 = off_100454C88[v32];
            v11 = v8[23];
            *v13 = v10;
            if (!*((_BYTE *)v15 - 36))
              goto LABEL_5;
          }
          else
          {
            if (v31 != 2064)
              goto LABEL_118;
            v11 = 0;
            v10 = (uint64_t (*)())sub_1003A1A94;
            *v13 = sub_1003A1A94;
            if (!*((_BYTE *)v15 - 36))
              goto LABEL_5;
          }
        }
        else if (v31 == 1806)
        {
          v11 = 0;
          v10 = (uint64_t (*)())sub_1003A1F70;
          *v13 = sub_1003A1F70;
          if (!*((_BYTE *)v15 - 36))
            goto LABEL_5;
        }
        else
        {
          if (v31 != 2052)
            goto LABEL_118;
          v11 = 0;
          v10 = (uint64_t (*)())sub_1003A0F9C;
          *v13 = sub_1003A0F9C;
          if (!*((_BYTE *)v15 - 36))
            goto LABEL_5;
        }
      }
      else if (v31 > 1027)
      {
        if (v31 > 1538)
        {
          if (v31 > 1547)
          {
            if (v31 == 1548)
            {
              v11 = 0;
              v10 = (uint64_t (*)())sub_1003A2384;
              *v13 = sub_1003A2384;
              if (!*((_BYTE *)v15 - 36))
                goto LABEL_5;
            }
            else
            {
              if (v31 != 1799)
                goto LABEL_118;
              v11 = 0;
              v10 = (uint64_t (*)())sub_10039C6A0;
              *v13 = sub_10039C6A0;
              if (!*((_BYTE *)v15 - 36))
                goto LABEL_5;
            }
          }
          else if (v31 == 1539)
          {
            v11 = 0;
            v10 = (uint64_t (*)())sub_1003A14D0;
            *v13 = sub_1003A14D0;
            if (!*((_BYTE *)v15 - 36))
              goto LABEL_5;
          }
          else
          {
            if (v31 != 1542)
              goto LABEL_118;
            v11 = 0;
            v10 = (uint64_t (*)())sub_10039C9EC;
            *v13 = sub_10039C9EC;
            if (!*((_BYTE *)v15 - 36))
              goto LABEL_5;
          }
        }
        else if (v31 > 1284)
        {
          if (v31 == 1285)
          {
            v11 = 0;
            v10 = (uint64_t (*)())sub_10039CC38;
            *v13 = sub_10039CC38;
            if (!*((_BYTE *)v15 - 36))
              goto LABEL_5;
          }
          else
          {
            if (v31 != 1290)
              goto LABEL_118;
            v11 = 0;
            v10 = (uint64_t (*)())sub_1003A26F0;
            *v13 = sub_1003A26F0;
            if (!*((_BYTE *)v15 - 36))
              goto LABEL_5;
          }
        }
        else if (v31 == 1028)
        {
          v11 = 0;
          v10 = (uint64_t (*)())sub_10039D2F8;
          *v13 = sub_10039D2F8;
          if (!*((_BYTE *)v15 - 36))
            goto LABEL_5;
        }
        else
        {
          if (v31 != 1032)
            goto LABEL_118;
          v11 = 0;
          v10 = (uint64_t (*)())sub_1003A29FC;
          *v13 = sub_1003A29FC;
          if (!*((_BYTE *)v15 - 36))
            goto LABEL_5;
        }
      }
      else if (v31 > 515)
      {
        if (v31 > 773)
        {
          if (v31 == 774)
          {
            v11 = 0;
            v10 = (uint64_t (*)())sub_1003A3060;
            *v13 = sub_1003A3060;
            if (!*((_BYTE *)v15 - 36))
              goto LABEL_5;
          }
          else
          {
            if (v31 != 1026)
              goto LABEL_118;
            v11 = 0;
            v10 = (uint64_t (*)())sub_1003A18D8;
            *v13 = sub_1003A18D8;
            if (!*((_BYTE *)v15 - 36))
              goto LABEL_5;
          }
        }
        else if (v31 == 516)
        {
          v11 = 0;
          v10 = (uint64_t (*)())sub_1003A3468;
          *v13 = sub_1003A3468;
          if (!*((_BYTE *)v15 - 36))
            goto LABEL_5;
        }
        else
        {
          if (v31 != 771)
            goto LABEL_118;
          v11 = 0;
          v10 = (uint64_t (*)())sub_10039D67C;
          *v13 = sub_10039D67C;
          if (!*((_BYTE *)v15 - 36))
            goto LABEL_5;
        }
      }
      else if (v31 > 512)
      {
        if (v31 == 513)
        {
          v11 = 0;
          v10 = (uint64_t (*)())sub_1003A1A44;
          *v13 = sub_1003A1A44;
          if (!*((_BYTE *)v15 - 36))
            goto LABEL_5;
        }
        else
        {
          if (v31 != 514)
            goto LABEL_118;
          v11 = 0;
          v10 = (uint64_t (*)())sub_10039D858;
          *v13 = sub_10039D858;
          if (!*((_BYTE *)v15 - 36))
            goto LABEL_5;
        }
      }
      else if (v31 == 257)
      {
        v11 = 0;
        v10 = (uint64_t (*)())sub_10039D8F8;
        *v13 = sub_10039D8F8;
        if (!*((_BYTE *)v15 - 36))
          goto LABEL_5;
      }
      else
      {
        if (v31 != 258)
          goto LABEL_118;
        v11 = 0;
        v10 = (uint64_t (*)())sub_1003A35F0;
        *v13 = sub_1003A35F0;
        if (!*((_BYTE *)v15 - 36))
          goto LABEL_5;
      }
LABEL_121:
      if (*(_DWORD *)(v14 + 4 * v9) == v11)
        goto LABEL_5;
      v35 = *(v15 - 1);
      if (!v35)
        goto LABEL_5;
      *(_DWORD *)(v14 + 4 * v9) = v11;
      if (v11 == 2)
      {
        _Q0.i16[0] = *(_WORD *)v35;
        _Q1.i16[0] = *(_WORD *)(v35 + 2);
        v37 = (double)_Q1.u64[0];
        LOWORD(a4.f64[0]) = *(_WORD *)(v35 + 4);
        v38.f64[0] = (double)*(unint64_t *)&a4.f64[0];
        v39.f64[0] = v108;
        v39.f64[1] = v37;
        LOWORD(v37) = *(_WORD *)(v35 + 6);
        v38.f64[1] = (double)*(unint64_t *)&v37;
        *(_QWORD *)&v40.f64[1] = v107.i64[1];
        v40.f64[0] = (double)_Q0.u64[0];
        v41 = vmulq_f64(v39, v40);
        v42 = vmulq_f64(vmulq_f64(v38, (float64x2_t)xmmword_1003C5DB0), v106);
        v43 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v41, v106)), v42);
        LOWORD(v42.f64[0]) = *(_WORD *)(v35 + 8);
        v42.f64[0] = (double)*(unint64_t *)&v42.f64[0];
        LOWORD(v38.f64[0]) = *(_WORD *)(v35 + 10);
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 12);
        v39.f64[0] = (double)*(unint64_t *)&v39.f64[0];
        LOWORD(a6.f64[0]) = *(_WORD *)(v35 + 14);
        v44 = (double)*(unint64_t *)&a6.f64[0];
        v45.f64[0] = v108;
        v45.f64[1] = (double)*(unint64_t *)&v38.f64[0];
        v39.f64[1] = v44;
        *(_QWORD *)&v38.f64[1] = v105.i64[1];
        v38.f64[0] = v42.f64[0];
        LOWORD(v42.f64[0]) = *(_WORD *)(v35 + 16);
        LOWORD(v44) = *(_WORD *)(v35 + 18);
        v46 = (double)*(unint64_t *)&v44 * 1.38703985;
        LOWORD(a8) = *(_WORD *)(v35 + 20);
        v47.f64[0] = (double)*(unint64_t *)&a8 * 1.38703985;
        v48.f64[0] = 1.38703985;
        v48.f64[1] = v46;
        LOWORD(v46) = *(_WORD *)(v35 + 22);
        v47.f64[1] = (double)*(unint64_t *)&v46 * 1.38703985;
        *(_QWORD *)&v49.f64[1] = v107.i64[1];
        v49.f64[0] = (double)*(unint64_t *)&v42.f64[0];
        v50 = vmulq_f64(v45, v38);
        v51 = vmulq_f64(vmulq_f64(v39, (float64x2_t)xmmword_1003C5DC0), v106);
        v22 = *v15;
        *(float32x4_t *)v22 = v43;
        *(float32x4_t *)(v22 + 16) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v50, v106)), v51);
        v52 = vmulq_f64(vmulq_f64(v47, (float64x2_t)xmmword_1003C5DB0), v106);
        v53 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vmulq_f64(v48, v49), v106)), v52);
        LOWORD(v52.f64[0]) = *(_WORD *)(v35 + 24);
        LOWORD(v51.f64[0]) = *(_WORD *)(v35 + 26);
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 28);
        v39.f64[0] = (double)*(unint64_t *)&v39.f64[0] * 1.38703985;
        LOWORD(v49.f64[0]) = *(_WORD *)(v35 + 30);
        v49.f64[0] = (double)*(unint64_t *)&v49.f64[0] * 1.38703985;
        v45.f64[0] = 1.38703985;
        v45.f64[1] = (double)*(unint64_t *)&v51.f64[0] * 1.38703985;
        v39.f64[1] = v49.f64[0];
        *(_QWORD *)&v51.f64[1] = v105.i64[1];
        v51.f64[0] = (double)*(unint64_t *)&v52.f64[0];
        v54 = vmulq_f64(v45, v51);
        v55 = vmulq_f64(vmulq_f64(v39, (float64x2_t)xmmword_1003C5DC0), v106);
        v56 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v54, v106)), v55);
        LOWORD(v55.f64[0]) = *(_WORD *)(v35 + 32);
        v55.f64[0] = (double)*(unint64_t *)&v55.f64[0];
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 34);
        v39.f64[0] = (double)*(unint64_t *)&v39.f64[0] * 1.30656296;
        LOWORD(v49.f64[0]) = *(_WORD *)(v35 + 36);
        v49.f64[0] = (double)*(unint64_t *)&v49.f64[0] * 1.30656296;
        v45.f64[0] = 1.30656296;
        v45.f64[1] = v39.f64[0];
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 38);
        v49.f64[1] = (double)*(unint64_t *)&v39.f64[0] * 1.30656296;
        *(_QWORD *)&v39.f64[1] = v107.i64[1];
        v39.f64[0] = v55.f64[0];
        *(float32x4_t *)(v22 + 32) = v53;
        *(float32x4_t *)(v22 + 48) = v56;
        v57 = vmulq_f64(vmulq_f64(v49, (float64x2_t)xmmword_1003C5DB0), v106);
        v58 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vmulq_f64(v45, v39), v106)), v57);
        LOWORD(v57.f64[0]) = *(_WORD *)(v35 + 40);
        LOWORD(v55.f64[0]) = *(_WORD *)(v35 + 42);
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 44);
        v39.f64[0] = (double)*(unint64_t *)&v39.f64[0] * 1.30656296;
        LOWORD(v49.f64[0]) = *(_WORD *)(v35 + 46);
        v45.f64[1] = (double)*(unint64_t *)&v55.f64[0] * 1.30656296;
        v39.f64[1] = (double)*(unint64_t *)&v49.f64[0] * 1.30656296;
        *(_QWORD *)&v55.f64[1] = v105.i64[1];
        v55.f64[0] = (double)*(unint64_t *)&v57.f64[0];
        v59 = vmulq_f64(v45, v55);
        v60 = vmulq_f64(vmulq_f64(v39, (float64x2_t)xmmword_1003C5DC0), v106);
        v61 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v59, v106)), v60);
        *(float32x4_t *)(v22 + 64) = v58;
        *(float64x2_t *)(v22 + 80) = v61;
        v58.i16[0] = *(_WORD *)(v35 + 48);
        LOWORD(v61.f64[0]) = *(_WORD *)(v35 + 50);
        LOWORD(v60.f64[0]) = *(_WORD *)(v35 + 52);
        v60.f64[0] = (double)*(unint64_t *)&v60.f64[0] * 1.1758756;
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 54);
        v39.f64[0] = (double)*(unint64_t *)&v39.f64[0] * 1.1758756;
        v49.f64[0] = 1.1758756;
        v49.f64[1] = (double)*(unint64_t *)&v61.f64[0] * 1.1758756;
        v60.f64[1] = v39.f64[0];
        *(_QWORD *)&v61.f64[1] = v107.i64[1];
        v61.f64[0] = (double)v58.u64[0];
        v62 = vmulq_f64(v49, v61);
        v63 = vmulq_f64(vmulq_f64(v60, (float64x2_t)xmmword_1003C5DB0), v106);
        v64 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v62, v106)), v63);
        LOWORD(v63.f64[0]) = *(_WORD *)(v35 + 56);
        LOWORD(v60.f64[0]) = *(_WORD *)(v35 + 58);
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 60);
        v39.f64[0] = (double)*(unint64_t *)&v39.f64[0] * 1.1758756;
        LOWORD(v49.f64[0]) = *(_WORD *)(v35 + 62);
        v45.f64[0] = 1.1758756;
        v45.f64[1] = (double)*(unint64_t *)&v60.f64[0] * 1.1758756;
        v39.f64[1] = (double)*(unint64_t *)&v49.f64[0] * 1.1758756;
        *(_QWORD *)&v60.f64[1] = v105.i64[1];
        v60.f64[0] = (double)*(unint64_t *)&v63.f64[0];
        v65 = vmulq_f64(v45, v60);
        v66 = vmulq_f64(vmulq_f64(v39, (float64x2_t)xmmword_1003C5DC0), v106);
        v67 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v65, v106)), v66);
        *(float32x4_t *)(v22 + 96) = v64;
        *(float64x2_t *)(v22 + 112) = v67;
        v64.i16[0] = *(_WORD *)(v35 + 64);
        LOWORD(v67.f64[0]) = *(_WORD *)(v35 + 66);
        LOWORD(v66.f64[0]) = *(_WORD *)(v35 + 68);
        v66.f64[0] = (double)*(unint64_t *)&v66.f64[0];
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 70);
        v49.f64[0] = v108;
        v49.f64[1] = (double)*(unint64_t *)&v67.f64[0];
        v66.f64[1] = (double)*(unint64_t *)&v39.f64[0];
        *(_QWORD *)&v67.f64[1] = v107.i64[1];
        v67.f64[0] = (double)v64.u64[0];
        v68 = vmulq_f64(v49, v67);
        v69 = vmulq_f64(vmulq_f64(v66, (float64x2_t)xmmword_1003C5DB0), v106);
        v70 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v68, v106)), v69);
        LOWORD(v69.f64[0]) = *(_WORD *)(v35 + 72);
        LOWORD(v66.f64[0]) = *(_WORD *)(v35 + 74);
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 76);
        v39.f64[0] = (double)*(unint64_t *)&v39.f64[0];
        LOWORD(v49.f64[0]) = *(_WORD *)(v35 + 78);
        v49.f64[0] = (double)*(unint64_t *)&v49.f64[0];
        v45.f64[0] = v108;
        v45.f64[1] = (double)*(unint64_t *)&v66.f64[0];
        v39.f64[1] = v49.f64[0];
        *(_QWORD *)&v66.f64[1] = v105.i64[1];
        v66.f64[0] = (double)*(unint64_t *)&v69.f64[0];
        v71 = vmulq_f64(v45, v66);
        v72 = vmulq_f64(vmulq_f64(v39, (float64x2_t)xmmword_1003C5DC0), v106);
        v73 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v71, v106)), v72);
        LOWORD(v72.f64[0]) = *(_WORD *)(v35 + 80);
        v72.f64[0] = (double)*(unint64_t *)&v72.f64[0];
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 82);
        a8 = 0.785694958;
        v39.f64[0] = (double)*(unint64_t *)&v39.f64[0] * 0.785694958;
        LOWORD(v49.f64[0]) = *(_WORD *)(v35 + 84);
        v49.f64[0] = (double)*(unint64_t *)&v49.f64[0] * 0.785694958;
        v45.f64[0] = 0.785694958;
        v45.f64[1] = v39.f64[0];
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 86);
        v49.f64[1] = (double)*(unint64_t *)&v39.f64[0] * 0.785694958;
        *(_QWORD *)&v39.f64[1] = v107.i64[1];
        v39.f64[0] = v72.f64[0];
        *(float32x4_t *)(v22 + 128) = v70;
        *(float32x4_t *)(v22 + 144) = v73;
        v74 = vmulq_f64(vmulq_f64(v49, (float64x2_t)xmmword_1003C5DB0), v106);
        v75 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vmulq_f64(v45, v39), v106)), v74);
        LOWORD(v74.f64[0]) = *(_WORD *)(v35 + 88);
        LOWORD(v72.f64[0]) = *(_WORD *)(v35 + 90);
        v72.f64[0] = (double)*(unint64_t *)&v72.f64[0] * 0.785694958;
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 92);
        v39.f64[0] = (double)*(unint64_t *)&v39.f64[0] * 0.785694958;
        v49.f64[0] = 0.785694958;
        v49.f64[1] = v72.f64[0];
        LOWORD(v72.f64[0]) = *(_WORD *)(v35 + 94);
        v39.f64[1] = (double)*(unint64_t *)&v72.f64[0] * 0.785694958;
        *(_QWORD *)&v72.f64[1] = v105.i64[1];
        v72.f64[0] = (double)*(unint64_t *)&v74.f64[0];
        v76 = vmulq_f64(v49, v72);
        v77 = vmulq_f64(vmulq_f64(v39, (float64x2_t)xmmword_1003C5DC0), v106);
        v78 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v76, v106)), v77);
        *(float32x4_t *)(v22 + 160) = v75;
        *(float64x2_t *)(v22 + 176) = v78;
        v75.i16[0] = *(_WORD *)(v35 + 96);
        LOWORD(v78.f64[0]) = *(_WORD *)(v35 + 98);
        LOWORD(v77.f64[0]) = *(_WORD *)(v35 + 100);
        v77.f64[0] = (double)*(unint64_t *)&v77.f64[0] * 0.5411961;
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 102);
        v39.f64[0] = (double)*(unint64_t *)&v39.f64[0] * 0.5411961;
        v49.f64[0] = 0.5411961;
        v49.f64[1] = (double)*(unint64_t *)&v78.f64[0] * 0.5411961;
        v77.f64[1] = v39.f64[0];
        *(_QWORD *)&v78.f64[1] = v107.i64[1];
        v78.f64[0] = (double)v75.u64[0];
        v79 = vmulq_f64(v49, v78);
        v80 = vmulq_f64(vmulq_f64(v77, (float64x2_t)xmmword_1003C5DB0), v106);
        v81 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v79, v106)), v80);
        LOWORD(v80.f64[0]) = *(_WORD *)(v35 + 104);
        LOWORD(v77.f64[0]) = *(_WORD *)(v35 + 106);
        v77.f64[0] = (double)*(unint64_t *)&v77.f64[0] * 0.5411961;
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 108);
        v39.f64[0] = (double)*(unint64_t *)&v39.f64[0] * 0.5411961;
        v49.f64[1] = v77.f64[0];
        LOWORD(v77.f64[0]) = *(_WORD *)(v35 + 110);
        v39.f64[1] = (double)*(unint64_t *)&v77.f64[0] * 0.5411961;
        *(_QWORD *)&v77.f64[1] = v105.i64[1];
        v77.f64[0] = (double)*(unint64_t *)&v80.f64[0];
        v82 = vmulq_f64(v49, v77);
        v83 = vmulq_f64(vmulq_f64(v39, (float64x2_t)xmmword_1003C5DC0), v106);
        v84 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v82, v106)), v83);
        *(float32x4_t *)(v22 + 192) = v81;
        *(float64x2_t *)(v22 + 208) = v84;
        v81.i16[0] = *(_WORD *)(v35 + 112);
        LOWORD(v84.f64[0]) = *(_WORD *)(v35 + 114);
        LOWORD(v83.f64[0]) = *(_WORD *)(v35 + 116);
        v83.f64[0] = (double)*(unint64_t *)&v83.f64[0] * 0.275899379;
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 118);
        v39.f64[0] = (double)*(unint64_t *)&v39.f64[0] * 0.275899379;
        a6.f64[0] = 0.275899379;
        a6.f64[1] = (double)*(unint64_t *)&v84.f64[0] * 0.275899379;
        v83.f64[1] = v39.f64[0];
        *(_QWORD *)&v84.f64[1] = v107.i64[1];
        v84.f64[0] = (double)v81.u64[0];
        v85 = vmulq_f64(a6, v84);
        v86 = vmulq_f64(vmulq_f64(v83, (float64x2_t)xmmword_1003C5DB0), v106);
        _Q0 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v85, v106)), v86);
        LOWORD(v86.f64[0]) = *(_WORD *)(v35 + 120);
        LOWORD(v83.f64[0]) = *(_WORD *)(v35 + 122);
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 124);
        v39.f64[0] = (double)*(unint64_t *)&v39.f64[0];
        a6.f64[1] = (double)*(unint64_t *)&v83.f64[0] * 0.275899379;
        v83.f64[0] = v39.f64[0] * 0.275899379;
        LOWORD(v39.f64[0]) = *(_WORD *)(v35 + 126);
        v83.f64[1] = (double)*(unint64_t *)&v39.f64[0] * 0.275899379;
        *(_QWORD *)&v39.f64[1] = v105.i64[1];
        v39.f64[0] = (double)*(unint64_t *)&v86.f64[0];
        a4 = vmulq_f64(vmulq_f64(v83, (float64x2_t)xmmword_1003C5DC0), v106);
        _Q1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vmulq_f64(a6, v39), v106)), a4);
      }
      else
      {
        if (v11 == 1)
        {
          v87 = *(int8x16_t *)(v35 + 16);
          v88.i64[0] = 0x80000000800;
          v88.i64[1] = 0x80000000800;
          v89.i64[0] = 0x80000000800;
          v89.i64[1] = 0x80000000800;
          v90 = *v15;
          v91 = vshrq_n_u32(vmlal_u16(v89, (uint16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v35, *(int8x16_t *)v35, 8uLL), (uint16x4_t)0x11A822A332494000), 0xCuLL);
          *(uint32x4_t *)v90 = vshrq_n_u32(vmlal_u16(v88, *(uint16x4_t *)v35, (uint16x4_t)0x4B42539F58C54000), 0xCuLL);
          *(uint32x4_t *)(v90 + 16) = v91;
          v91.i64[0] = vextq_s8(v87, v87, 8uLL).u64[0];
          v92.i64[0] = 0x80000000800;
          v92.i64[1] = 0x80000000800;
          v93 = vmlal_u16(v92, *(uint16x4_t *)v87.i8, (uint16x4_t)0x686273FC7B2158C5);
          v87.i64[0] = 0x80000000800;
          v87.i64[1] = 0x80000000800;
          *(uint32x4_t *)(v90 + 32) = vshrq_n_u32(v93, 0xCuLL);
          *(uint32x4_t *)(v90 + 48) = vshrq_n_u32(vmlal_u16((uint32x4_t)v87, *(uint16x4_t *)v91.i8, (uint16x4_t)0x187E300B45BF58C5), 0xCuLL);
          v94 = *(int8x16_t *)(v35 + 32);
          v95 = *(int8x16_t *)(v35 + 48);
          v93.i64[0] = vextq_s8(v94, v94, 8uLL).u64[0];
          v88.i64[0] = 0x80000000800;
          v88.i64[1] = 0x80000000800;
          v96 = vmlal_u16(v88, *(uint16x4_t *)v94.i8, (uint16x4_t)0x62546D4173FC539FLL);
          v94.i64[0] = 0x80000000800;
          v94.i64[1] = 0x80000000800;
          a6.f64[0] = 1.51977652e-197;
          *(uint32x4_t *)(v90 + 64) = vshrq_n_u32(v96, 0xCuLL);
          *(uint32x4_t *)(v90 + 80) = vshrq_n_u32(vmlal_u16((uint32x4_t)v94, *(uint16x4_t *)v93.i8, (uint16x4_t)0x17122D4141B3539FLL), 0xCuLL);
          v94.i64[0] = vextq_s8(v95, v95, 8uLL).u64[0];
          v93.i64[0] = 0x80000000800;
          v93.i64[1] = 0x80000000800;
          v97 = vmlal_u16(v93, *(uint16x4_t *)v95.i8, (uint16x4_t)0x587E625468624B42);
          v95.i64[0] = 0x80000000800;
          v95.i64[1] = 0x80000000800;
          *(uint32x4_t *)(v90 + 96) = vshrq_n_u32(v97, 0xCuLL);
          *(uint32x4_t *)(v90 + 112) = vshrq_n_u32(vmlal_u16((uint32x4_t)v95, *(uint16x4_t *)v94.i8, (uint16x4_t)0x14C328BA3B214B42), 0xCuLL);
          v98 = *(int8x16_t *)(v35 + 64);
          v99 = *(int8x16_t *)(v35 + 80);
          v97.i64[0] = vextq_s8(v98, v98, 8uLL).u64[0];
          v96.i64[0] = 0x80000000800;
          v96.i64[1] = 0x80000000800;
          v100 = vmlal_u16(v96, *(uint16x4_t *)v98.i8, (uint16x4_t)0x4B42539F58C54000);
          v98.i64[0] = 0x80000000800;
          v98.i64[1] = 0x80000000800;
          *(uint32x4_t *)(v90 + 128) = vshrq_n_u32(v100, 0xCuLL);
          *(uint32x4_t *)(v90 + 144) = vshrq_n_u32(vmlal_u16((uint32x4_t)v98, *(uint16x4_t *)v97.i8, (uint16x4_t)0x11A822A332494000), 0xCuLL);
          v98.i64[0] = vextq_s8(v99, v99, 8uLL).u64[0];
          v97.i64[0] = 0x80000000800;
          v97.i64[1] = 0x80000000800;
          v101 = vmlal_u16(v97, *(uint16x4_t *)v99.i8, (uint16x4_t)0x3B2141B345BF3249);
          v99.i64[0] = 0x80000000800;
          v99.i64[1] = 0x80000000800;
          *(uint32x4_t *)(v90 + 160) = vshrq_n_u32(v101, 0xCuLL);
          *(uint32x4_t *)(v90 + 176) = vshrq_n_u32(vmlal_u16((uint32x4_t)v99, *(uint16x4_t *)v98.i8, (uint16x4_t)0xDE01B3727823249), 0xCuLL);
          v102 = *(int8x16_t *)(v35 + 96);
          v103 = *(int8x16_t *)(v35 + 112);
          v101.i64[0] = vextq_s8(v102, v102, 8uLL).u64[0];
          v100.i64[0] = 0x80000000800;
          v100.i64[1] = 0x80000000800;
          v104 = vmlal_u16(v100, *(uint16x4_t *)v102.i8, (uint16x4_t)0x28BA2D41300B22A3);
          v102.i64[0] = 0x80000000800;
          v102.i64[1] = 0x80000000800;
          *(uint32x4_t *)(v90 + 192) = vshrq_n_u32(v104, 0xCuLL);
          *(uint32x4_t *)(v90 + 208) = vshrq_n_u32(vmlal_u16((uint32x4_t)v102, *(uint16x4_t *)v101.i8, (uint16x4_t)0x98E12BF1B3722A3), 0xCuLL);
          v102.i64[0] = vextq_s8(v103, v103, 8uLL).u64[0];
          v101.i64[0] = 0x80000000800;
          v101.i64[1] = 0x80000000800;
          a4 = (float64x2_t)vmlal_u16(v101, *(uint16x4_t *)v103.i8, (uint16x4_t)0x14C31712187E11A8);
          v103.i64[0] = 0x80000000800;
          v103.i64[1] = 0x80000000800;
          _Q0 = (float32x4_t)vshrq_n_u32(vmlal_u16((uint32x4_t)v103, *(uint16x4_t *)v102.i8, (uint16x4_t)0x4DF098E0DE011A8), 0xCuLL);
          _Q1 = (float32x4_t)vshrq_n_u32((uint32x4_t)a4, 0xCuLL);
          *(float32x4_t *)(v90 + 224) = _Q1;
          *(float32x4_t *)(v90 + 240) = _Q0;
          goto LABEL_5;
        }
        if (v11)
        {
          v36 = *(uint64_t (***)(int *))v8;
          *((_DWORD *)v36 + 10) = 49;
          result = (*v36)(v8);
          goto LABEL_5;
        }
        v22 = *v15;
        v23 = vmovl_u16(*(uint16x4_t *)(v35 + 8));
        *(uint32x4_t *)v22 = vmovl_u16(*(uint16x4_t *)v35);
        *(uint32x4_t *)(v22 + 16) = v23;
        v24 = vmovl_u16(*(uint16x4_t *)(v35 + 24));
        *(uint32x4_t *)(v22 + 32) = vmovl_u16(*(uint16x4_t *)(v35 + 16));
        *(uint32x4_t *)(v22 + 48) = v24;
        v25 = vmovl_u16(*(uint16x4_t *)(v35 + 40));
        *(uint32x4_t *)(v22 + 64) = vmovl_u16(*(uint16x4_t *)(v35 + 32));
        *(uint32x4_t *)(v22 + 80) = v25;
        v26 = vmovl_u16(*(uint16x4_t *)(v35 + 56));
        *(uint32x4_t *)(v22 + 96) = vmovl_u16(*(uint16x4_t *)(v35 + 48));
        *(uint32x4_t *)(v22 + 112) = v26;
        v27 = vmovl_u16(*(uint16x4_t *)(v35 + 72));
        *(uint32x4_t *)(v22 + 128) = vmovl_u16(*(uint16x4_t *)(v35 + 64));
        *(uint32x4_t *)(v22 + 144) = v27;
        v28 = vmovl_u16(*(uint16x4_t *)(v35 + 88));
        *(uint32x4_t *)(v22 + 160) = vmovl_u16(*(uint16x4_t *)(v35 + 80));
        *(uint32x4_t *)(v22 + 176) = v28;
        v29 = vmovl_u16(*(uint16x4_t *)(v35 + 104));
        *(uint32x4_t *)(v22 + 192) = vmovl_u16(*(uint16x4_t *)(v35 + 96));
        *(uint32x4_t *)(v22 + 208) = v29;
        _Q0 = (float32x4_t)vmovl_u16(*(uint16x4_t *)(v35 + 112));
        _Q1 = (float32x4_t)vmovl_u16(*(uint16x4_t *)(v35 + 120));
      }
      *(float32x4_t *)(v22 + 224) = _Q0;
      *(float32x4_t *)(v22 + 240) = _Q1;
LABEL_5:
      v15 += 12;
      ++v9;
      ++v13;
    }
    while (v9 < v8[14]);
  }
  return result;
}

double sub_10038B128(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  int v5;
  __int128 v6;
  double result;

  v2 = (**(uint64_t (***)(void))(a1 + 8))();
  v3 = v2;
  *(_QWORD *)(a1 + 592) = v2;
  *(_QWORD *)v2 = sub_10038B208;
  *(_QWORD *)(v2 + 16) = sub_10038B7B8;
  if (*(_BYTE *)(a1 + 297))
  {
    v4 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, (uint64_t)*(int *)(a1 + 56) << 8);
    *(_QWORD *)(a1 + 176) = v4;
    if (*(int *)(a1 + 56) >= 1)
    {
      v5 = 0;
      *(_QWORD *)&v6 = -1;
      *((_QWORD *)&v6 + 1) = -1;
      do
      {
        v4[14] = v6;
        v4[15] = v6;
        v4[12] = v6;
        v4[13] = v6;
        v4[10] = v6;
        v4[11] = v6;
        v4[8] = v6;
        v4[9] = v6;
        v4[6] = v6;
        v4[7] = v6;
        v4[4] = v6;
        v4[5] = v6;
        v4[2] = v6;
        v4[3] = v6;
        *v4 = v6;
        v4[1] = v6;
        v4 += 16;
        ++v5;
      }
      while (v5 < *(_DWORD *)(a1 + 56));
    }
    result = 0.0;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
  }
  return result;
}

void sub_10038B208(_DWORD *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;

  v2 = *((_QWORD *)a1 + 74);
  v3 = a1[127];
  if (!*((_BYTE *)a1 + 297))
  {
    if (v3 || a1[129] || a1[130] || ((v60 = a1[128], *((_BYTE *)a1 + 296)) || v60 <= 63) && v60 != a1[134])
    {
      v5 = *(_QWORD *)a1;
      *(_DWORD *)(v5 + 40) = 125;
      (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(a1, 0xFFFFFFFFLL);
    }
    v6 = sub_10038D6B0;
    if (a1[134] == 63)
      v6 = sub_10038DB94;
    *(_QWORD *)(v2 + 8) = v6;
    if ((int)a1[104] >= 1)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)&a1[2 * v7 + 106];
        sub_10038C40C((uint64_t)a1, 1, *(_DWORD *)(v8 + 20), (_QWORD *)(v2 + 8 * *(int *)(v8 + 20) + 112));
        if (a1[134])
          sub_10038C40C((uint64_t)a1, 0, *(_DWORD *)(v8 + 24), (_QWORD *)(v2 + 8 * *(int *)(v8 + 24) + 144));
        *(_DWORD *)(v2 + 44 + 4 * v7++) = 0;
      }
      while (v7 < (int)a1[104]);
    }
    if ((int)a1[116] >= 1)
    {
      v9 = 0;
      v10 = v2 + 336;
      do
      {
        v17 = *(_QWORD *)&a1[2 * a1[v9 + 117] + 106];
        v18 = *(int *)(v17 + 24);
        v19 = v10 + 8 * v9;
        *(_QWORD *)(v19 - 160) = *(_QWORD *)(v2 + 8 * *(int *)(v17 + 20) + 112);
        *(_QWORD *)(v19 - 80) = *(_QWORD *)(v2 + 8 * v18 + 144);
        if (*(_BYTE *)(v17 + 52))
        {
          v22 = v17 + 36;
          v20 = *(_DWORD *)(v17 + 36);
          v21 = *(_DWORD *)(v22 + 4);
          v16 = 1;
          switch(a1[134])
          {
            case 0:
              break;
            case 3:
              v23 = v21 - 3;
              v24 = v21 - 1;
              v25 = v20 - 3;
              v14 = v20 - 1;
              if (v23 < 0xFFFFFFFE)
                v24 = 1;
              if (v25 < 0xFFFFFFFE)
                v14 = 1;
              v15 = (char *)&unk_1003C5EA4 + 8 * v24;
              goto LABEL_25;
            case 8:
              v26 = v21 - 4;
              v27 = v21 - 1;
              v28 = v20 - 4;
              v14 = v20 - 1;
              if (v26 < 0xFFFFFFFD)
                v27 = 2;
              if (v28 < 0xFFFFFFFD)
                v14 = 2;
              v15 = (char *)&unk_1003C5EB4 + 12 * v27;
              goto LABEL_25;
            case 0xF:
              v29 = v21 - 5;
              v30 = v21 - 1;
              v31 = v20 - 5;
              v14 = v20 - 1;
              if (v29 < 0xFFFFFFFC)
                v30 = 3;
              if (v31 < 0xFFFFFFFC)
                v14 = 3;
              v15 = (char *)&unk_1003C5ED8 + 16 * v30;
              goto LABEL_25;
            case 0x18:
              v32 = v21 - 6;
              v33 = v21 - 1;
              v34 = v20 - 6;
              v14 = v20 - 1;
              if (v32 < 0xFFFFFFFB)
                v33 = 4;
              if (v34 < 0xFFFFFFFB)
                v14 = 4;
              v15 = (char *)&unk_1003C5F18 + 20 * v33;
              goto LABEL_25;
            case 0x23:
              v35 = v21 - 7;
              v36 = v21 - 1;
              v37 = v20 - 7;
              v14 = v20 - 1;
              if (v35 < 0xFFFFFFFA)
                v36 = 5;
              if (v37 < 0xFFFFFFFA)
                v14 = 5;
              v15 = (char *)&unk_1003C5F7C + 24 * v36;
              goto LABEL_25;
            case 0x30:
              v38 = v21 - 8;
              v39 = v21 - 1;
              v40 = v20 - 8;
              v14 = v20 - 1;
              if (v38 < 0xFFFFFFF9)
                v39 = 6;
              if (v40 < 0xFFFFFFF9)
                v14 = 6;
              v15 = (char *)&unk_1003C600C + 28 * v39;
              goto LABEL_25;
            default:
              v11 = v21 - 9;
              v12 = v21 - 1;
              v13 = v20 - 9;
              v14 = v20 - 1;
              if (v11 < 0xFFFFFFF8)
                v12 = 7;
              if (v13 < 0xFFFFFFF8)
                v14 = 7;
              v15 = (char *)&unk_1003C60D0 + 32 * v12;
LABEL_25:
              v16 = *(_DWORD *)&v15[4 * v14] + 1;
              break;
          }
        }
        else
        {
          v16 = 0;
        }
        *(_DWORD *)(v10 + 4 * v9++) = v16;
      }
      while (v9 < (int)a1[116]);
    }
    goto LABEL_92;
  }
  v4 = a1[128];
  if (v3)
  {
    if (v4 < v3 || v4 > a1[134] || a1[104] != 1)
      goto LABEL_64;
  }
  else if (v4)
  {
    goto LABEL_64;
  }
  v41 = a1[129];
  if (v41)
  {
    v42 = v41 - 1;
    if (v42 == a1[130] && v42 < 14)
      goto LABEL_65;
  }
  else if ((int)a1[130] < 14)
  {
    goto LABEL_65;
  }
LABEL_64:
  v43 = *(_QWORD *)a1;
  *(_DWORD *)(v43 + 40) = 17;
  *(_DWORD *)(v43 + 44) = v3;
  *(_DWORD *)(*(_QWORD *)a1 + 48) = a1[128];
  *(_DWORD *)(*(_QWORD *)a1 + 52) = a1[129];
  *(_DWORD *)(*(_QWORD *)a1 + 56) = a1[130];
  (**(void (***)(_DWORD *))a1)(a1);
LABEL_65:
  LODWORD(v44) = a1[104];
  if ((int)v44 >= 1)
  {
    for (i = 0; i < v44; ++i)
    {
      v46 = *(int *)(*(_QWORD *)&a1[2 * i + 106] + 4);
      v47 = (_DWORD *)(*((_QWORD *)a1 + 22) + (v46 << 8));
      v48 = a1[127];
      if (v48 && (*v47 & 0x80000000) != 0)
      {
        v52 = *(_QWORD *)a1;
        *(_DWORD *)(v52 + 40) = 118;
        *(_DWORD *)(v52 + 44) = v46;
        *(_DWORD *)(*(_QWORD *)a1 + 48) = 0;
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 8))(a1, 0xFFFFFFFFLL);
        v48 = a1[127];
        if (v48 <= a1[128])
        {
LABEL_71:
          v49 = v48;
          do
          {
            if (a1[129] != (v47[v49] & ~((int)v47[v49] >> 31)))
            {
              v51 = *(_QWORD *)a1;
              *(_DWORD *)(v51 + 40) = 118;
              *(_DWORD *)(v51 + 44) = v46;
              *(_DWORD *)(*(_QWORD *)a1 + 48) = v49;
              (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 8))(a1, 0xFFFFFFFFLL);
            }
            v47[v49] = a1[130];
          }
          while (v49++ < (int)a1[128]);
        }
      }
      else if (v48 <= a1[128])
      {
        goto LABEL_71;
      }
      v44 = (int)a1[104];
    }
  }
  v53 = sub_10038BA7C;
  if (a1[127])
  {
    v54 = sub_10038BED4;
  }
  else
  {
    v53 = sub_10038B7E4;
    v54 = sub_10038BD4C;
  }
  if (a1[129])
    v55 = v54;
  else
    v55 = v53;
  *(_QWORD *)(v2 + 8) = v55;
  if ((int)v44 >= 1)
  {
    v56 = 0;
    do
    {
      v59 = *(_QWORD *)&a1[2 * v56 + 106];
      if (a1[127])
      {
        v57 = *(int *)(v59 + 24);
        v58 = v2 + 8 * v57;
        sub_10038C40C((uint64_t)a1, 0, v57, (_QWORD *)(v58 + 72));
        *(_QWORD *)(v2 + 104) = *(_QWORD *)(v58 + 72);
      }
      else if (!a1[129])
      {
        sub_10038C40C((uint64_t)a1, 1, *(_DWORD *)(v59 + 20), (_QWORD *)(v2 + 8 * *(int *)(v59 + 20) + 72));
      }
      *(_DWORD *)(v2 + 44 + 4 * v56++) = 0;
    }
    while (v56 < (int)a1[104]);
  }
  *(_DWORD *)(v2 + 40) = 0;
LABEL_92:
  *(_DWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 60) = 0;
  *(_DWORD *)(v2 + 64) = a1[87];
}

uint64_t sub_10038B7B8(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 592);
  *(_DWORD *)(*(_QWORD *)(result + 584) + 32) += *(_DWORD *)(v1 + 32) / 8;
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t sub_10038B7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a1 + 592);
  v5 = *(_DWORD *)(a1 + 520);
  if (*(_DWORD *)(a1 + 348) && !*(_DWORD *)(v4 + 64))
  {
    v25 = *(_QWORD *)(a1 + 584);
    *(_DWORD *)(v25 + 32) += *(_DWORD *)(v4 + 32) / 8;
    *(_DWORD *)(v4 + 32) = 0;
    result = (*(uint64_t (**)(uint64_t))(v25 + 16))(a1);
    if (!(_DWORD)result)
      return result;
    if (*(int *)(a1 + 416) >= 1)
    {
      v26 = 0;
      do
        *(_DWORD *)(v4 + 44 + 4 * v26++) = 0;
      while (v26 < *(int *)(a1 + 416));
    }
    *(_DWORD *)(v4 + 40) = 0;
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 348);
    if (!*(_DWORD *)(a1 + 540))
      *(_BYTE *)(v4 + 60) = 0;
  }
  if (!*(_BYTE *)(v4 + 60))
  {
    v33 = a1;
    v6 = *(unsigned __int8 ***)(a1 + 40);
    v7 = *v6;
    v8 = v6[1];
    v29 = *v6;
    v30 = v8;
    v9 = *(_QWORD *)(v4 + 24);
    v10 = *(_DWORD *)(v4 + 32);
    v27 = *(_OWORD *)(v4 + 40);
    v28 = *(_DWORD *)(v4 + 56);
    if (*(int *)(a1 + 464) >= 1)
    {
      v11 = 0;
      v31 = 0;
      v32 = 0;
      while (1)
      {
        v17 = *(_WORD **)(a2 + 8 * v11);
        v18 = *(int *)(a1 + 468 + 4 * v11);
        v19 = *(_QWORD *)(v4 + 8 * *(int *)(*(_QWORD *)(a1 + 8 * v18 + 424) + 20) + 72);
        if (v10 > 7)
          goto LABEL_16;
        result = sub_10038E074(&v29, v9, v10, 0);
        if (!(_DWORD)result)
          return result;
        v9 = v31;
        v10 = v32;
        if ((int)v32 > 7)
        {
LABEL_16:
          v22 = v9 >> (v10 - 8);
          v23 = *(_DWORD *)(v19 + 4 * v22 + 288);
          if (v23)
          {
            v10 -= v23;
            v24 = v19 + v22;
            v21 = *(unsigned __int8 *)(v24 + 1312);
            if (*(_BYTE *)(v24 + 1312))
              goto LABEL_21;
            goto LABEL_18;
          }
          v21 = sub_10038E1E8((uint64_t)&v29, v9, v10, v19, 9);
          if (v21 < 0)
            return 0;
        }
        else
        {
          v21 = sub_10038E1E8((uint64_t)&v29, v31, v32, v19, 1);
          if (v21 < 0)
            return 0;
        }
        v9 = v31;
        v10 = v32;
        if (v21)
        {
LABEL_21:
          if (v10 < v21)
          {
            result = sub_10038E074(&v29, v9, v10, v21);
            if (!(_DWORD)result)
              return result;
            v9 = v31;
            v10 = v32;
          }
          v10 -= v21;
          v12 = dword_1003C61D0[v21];
          v13 = v12 & (v9 >> v10);
          if (v13 > dword_1003C61D0[v21 - 1])
            v12 = 0;
          v14 = v13 - v12;
          goto LABEL_10;
        }
LABEL_18:
        v14 = 0;
LABEL_10:
        v15 = (char *)&v27 + 4 * v18;
        v16 = *((_DWORD *)v15 + 1) + v14;
        *((_DWORD *)v15 + 1) = v16;
        *v17 = v16 << v5;
        if (++v11 >= *(int *)(a1 + 464))
        {
          v6 = *(unsigned __int8 ***)(a1 + 40);
          v7 = v29;
          v8 = v30;
          break;
        }
      }
    }
    *v6 = v7;
    v6[1] = v8;
    *(_QWORD *)(v4 + 24) = v9;
    *(_DWORD *)(v4 + 32) = v10;
    *(_OWORD *)(v4 + 40) = v27;
    *(_DWORD *)(v4 + 56) = v28;
  }
  --*(_DWORD *)(v4 + 64);
  return 1;
}

uint64_t sub_10038BA7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = *(_QWORD *)(a1 + 592);
  if (*(_DWORD *)(a1 + 348) && !*(_DWORD *)(v4 + 64))
  {
    v7 = *(_QWORD *)(a1 + 584);
    *(_DWORD *)(v7 + 32) += *(_DWORD *)(v4 + 32) / 8;
    *(_DWORD *)(v4 + 32) = 0;
    result = (*(uint64_t (**)(uint64_t))(v7 + 16))(a1);
    if (!(_DWORD)result)
      return result;
    if (*(int *)(a1 + 416) >= 1)
    {
      v9 = 0;
      do
        *(_DWORD *)(v4 + 44 + 4 * v9++) = 0;
      while (v9 < *(int *)(a1 + 416));
    }
    *(_DWORD *)(v4 + 40) = 0;
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 348);
    if (!*(_DWORD *)(a1 + 540))
      *(_BYTE *)(v4 + 60) = 0;
  }
  if (*(_BYTE *)(v4 + 60))
    goto LABEL_16;
  v5 = *(_DWORD *)(v4 + 40);
  if (v5)
  {
    v6 = v5 - 1;
    goto LABEL_15;
  }
  v10 = *(_DWORD *)(a1 + 512);
  v11 = *(_DWORD *)(a1 + 520);
  v12 = *(_QWORD *)(a1 + 528);
  v38 = a1;
  v13 = *(_QWORD *)(a1 + 40);
  v15 = *(unsigned __int8 **)v13;
  v14 = *(_QWORD *)(v13 + 8);
  v34 = v15;
  v35 = v14;
  v16 = *(_QWORD *)(v4 + 24);
  v17 = *(_DWORD *)(v4 + 32);
  v18 = *(_DWORD *)(a1 + 508);
  if (v18 > v10)
  {
LABEL_13:
    v6 = 0;
    goto LABEL_14;
  }
  v21 = *a2;
  v22 = *(_QWORD *)(v4 + 104);
  v36 = 0;
  v37 = 0;
  while (1)
  {
    while (1)
    {
      if (v17 <= 7)
      {
        result = sub_10038E074(&v34, v16, v17, 0);
        if (!(_DWORD)result)
          return result;
        v16 = v36;
        v17 = v37;
        if ((int)v37 <= 7)
        {
          v26 = v22;
          v27 = 1;
          goto LABEL_32;
        }
      }
      v28 = v16 >> (v17 - 8);
      v29 = *(_DWORD *)(v22 + 4 * v28 + 288);
      if (v29)
        break;
      v26 = v22;
      v27 = 9;
LABEL_32:
      v30 = sub_10038E1E8((uint64_t)&v34, v16, v17, v26, v27);
      if ((v30 & 0x80000000) != 0)
        return 0;
      v16 = v36;
      v17 = v37;
      v31 = v30 >> 4;
      v32 = v30 & 0xF;
      if ((v30 & 0xF) == 0)
        goto LABEL_28;
LABEL_34:
      if (v17 < v32)
      {
        result = sub_10038E074(&v34, v16, v17, v32);
        if (!(_DWORD)result)
          return result;
        v16 = v36;
        v17 = v37;
      }
      v23 = v31 + v18;
      v17 -= v32;
      v24 = dword_1003C61D0[v32];
      v25 = v24 & (v16 >> v17);
      if (v25 > dword_1003C61D0[v32 - 1])
        v24 = 0;
      *(_WORD *)(v21 + 2 * *(int *)(v12 + 4 * v23)) = (v25 - v24) << v11;
      v18 = v23 + 1;
      if (v23 >= v10)
        goto LABEL_13;
    }
    v17 -= v29;
    v30 = *(unsigned __int8 *)(v22 + v28 + 1312);
    v31 = v30 >> 4;
    v32 = v30 & 0xF;
    if ((v30 & 0xF) != 0)
      goto LABEL_34;
LABEL_28:
    if (v31 != 15)
      break;
    v33 = v18 + 15;
    v18 += 16;
    if (v33 >= v10)
      goto LABEL_13;
  }
  if (v30 < 0x10)
    goto LABEL_13;
  if (v17 >= v31)
    goto LABEL_42;
  result = sub_10038E074(&v34, v16, v17, v31);
  if ((_DWORD)result)
  {
    v16 = v36;
    v17 = v37;
LABEL_42:
    v17 -= v31;
    v6 = (dword_1003C61D0[v31] & (v16 >> v17)) + ~(-1 << v31);
LABEL_14:
    v19 = *(_QWORD **)(a1 + 40);
    v20 = v35;
    *v19 = v34;
    v19[1] = v20;
    *(_QWORD *)(v4 + 24) = v16;
    *(_DWORD *)(v4 + 32) = v17;
LABEL_15:
    *(_DWORD *)(v4 + 40) = v6;
LABEL_16:
    --*(_DWORD *)(v4 + 64);
    return 1;
  }
  return result;
}

uint64_t sub_10038BD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a1 + 592);
  if (*(_DWORD *)(a1 + 348) && !*(_DWORD *)(v4 + 64))
  {
    v13 = *(_QWORD *)(a1 + 584);
    *(_DWORD *)(v13 + 32) += *(_DWORD *)(v4 + 32) / 8;
    *(_DWORD *)(v4 + 32) = 0;
    result = (*(uint64_t (**)(uint64_t))(v13 + 16))(a1);
    if (!(_DWORD)result)
      return result;
    if (*(int *)(a1 + 416) >= 1)
    {
      v14 = 0;
      do
        *(_DWORD *)(v4 + 44 + 4 * v14++) = 0;
      while (v14 < *(int *)(a1 + 416));
    }
    *(_DWORD *)(v4 + 40) = 0;
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 348);
    if (!*(_DWORD *)(a1 + 540))
      *(_BYTE *)(v4 + 60) = 0;
  }
  v19 = a1;
  v5 = *(unsigned __int8 ***)(a1 + 40);
  v6 = *v5;
  v7 = v5[1];
  v15 = *v5;
  v16 = v7;
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(_DWORD *)(v4 + 32);
  if (*(int *)(a1 + 464) < 1)
    goto LABEL_13;
  v10 = 0;
  v17 = 0;
  v18 = 0;
  v11 = 1 << *(_DWORD *)(a1 + 520);
  do
  {
    if (v9 <= 0)
    {
      result = sub_10038E074(&v15, v8, v9, 1);
      if (!(_DWORD)result)
        return result;
      v8 = v17;
      v9 = v18 - 1;
      if (((v17 >> (v18 - 1)) & 1) != 0)
LABEL_11:
        **(_WORD **)(a2 + 8 * v10) |= v11;
    }
    else if (((v8 >> --v9) & 1) != 0)
    {
      goto LABEL_11;
    }
    ++v10;
  }
  while (v10 < *(int *)(a1 + 464));
  v5 = *(unsigned __int8 ***)(a1 + 40);
  v6 = v15;
  v7 = v16;
LABEL_13:
  *v5 = v6;
  v5[1] = v7;
  *(_QWORD *)(v4 + 24) = v8;
  *(_DWORD *)(v4 + 32) = v9;
  --*(_DWORD *)(v4 + 64);
  return 1;
}

uint64_t sub_10038BED4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  unsigned __int8 *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _DWORD v69[64];

  v4 = a1[74];
  if (*((_DWORD *)a1 + 87) && !*(_DWORD *)(v4 + 64))
  {
    v23 = a1[73];
    *(_DWORD *)(v23 + 32) += *(_DWORD *)(v4 + 32) / 8;
    *(_DWORD *)(v4 + 32) = 0;
    result = (*(uint64_t (**)(uint64_t *))(v23 + 16))(a1);
    if (!(_DWORD)result)
      return result;
    if (*((int *)a1 + 104) >= 1)
    {
      v25 = 0;
      do
        *(_DWORD *)(v4 + 44 + 4 * v25++) = 0;
      while (v25 < *((int *)a1 + 104));
    }
    *(_DWORD *)(v4 + 40) = 0;
    *(_DWORD *)(v4 + 64) = *((_DWORD *)a1 + 87);
    if (!*((_DWORD *)a1 + 135))
      *(_BYTE *)(v4 + 60) = 0;
  }
  if (*(_BYTE *)(v4 + 60))
    goto LABEL_29;
  v66 = 0;
  v67 = 0;
  v5 = *((_DWORD *)a1 + 128);
  v6 = *((_DWORD *)a1 + 130);
  v7 = 1 << v6;
  v63 = -1 << v6;
  v62 = a1[66];
  v68 = a1;
  v8 = a1[5];
  v10 = *(unsigned __int8 **)v8;
  v9 = *(_QWORD *)(v8 + 8);
  v64 = v10;
  v65 = v9;
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_DWORD *)(v4 + 32);
  v13 = *(_DWORD *)(v4 + 40);
  v14 = *a2;
  v15 = *((_DWORD *)a1 + 127);
  if (v13)
  {
    v61 = 0;
LABEL_6:
    if (v15 <= v5)
      v16 = v5;
    else
      v16 = v15;
    v17 = (int *)(v62 + 4 * v15);
    v18 = v16 - v15 + 1;
    while (1)
    {
      v20 = *v17++;
      v19 = v20;
      if (*(_WORD *)(v14 + 2 * v20))
      {
        if (v12 <= 0)
        {
          if (!sub_10038E074(&v64, v11, v12, 1))
            goto LABEL_79;
          v11 = v66;
          v12 = v67 - 1;
          if (((v66 >> (v67 - 1)) & 1) == 0)
            goto LABEL_10;
LABEL_17:
          v21 = *(__int16 *)(v14 + 2 * v19);
          if ((v7 & v21) == 0)
          {
            v22 = v63;
            if (v21 >= 0)
              v22 = v7;
            *(_WORD *)(v14 + 2 * v19) = v21 + v22;
          }
          goto LABEL_10;
        }
        if ((((unint64_t)v11 >> --v12) & 1) != 0)
          goto LABEL_17;
      }
LABEL_10:
      if (!--v18)
      {
        v26 = v13 - 1;
        goto LABEL_28;
      }
    }
  }
  v61 = 0;
  v29 = *(_QWORD *)(v4 + 104);
  v57 = v29;
  v58 = v5;
  do
  {
    if (v12 > 7)
      goto LABEL_38;
    if (!sub_10038E074(&v64, v11, v12, 0))
      goto LABEL_79;
    v11 = v66;
    v12 = v67;
    if ((int)v67 > 7)
    {
LABEL_38:
      v34 = *(_DWORD *)(v29 + 4 * (v11 >> (v12 - 8)) + 288);
      if (v34)
      {
        v35 = v12 - v34;
        v36 = *(unsigned __int8 *)(v29 + (v11 >> (v12 - 8)) + 1312);
        v37 = v36 >> 4;
        v38 = v36 & 0xF;
        if ((v36 & 0xF) != 0)
          goto LABEL_45;
        goto LABEL_40;
      }
      v31 = v11;
      v32 = v29;
      v33 = 9;
    }
    else
    {
      v31 = v66;
      v32 = v29;
      v33 = 1;
    }
    v36 = sub_10038E1E8((uint64_t)&v64, v31, v12, v32, v33);
    if ((v36 & 0x80000000) != 0)
      goto LABEL_79;
    v11 = v66;
    v35 = v67;
    v37 = v36 >> 4;
    v38 = v36 & 0xF;
    if ((v36 & 0xF) != 0)
    {
LABEL_45:
      if (v38 != 1)
      {
        v39 = *a1;
        *(_DWORD *)(v39 + 40) = 121;
        (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(a1, 0xFFFFFFFFLL);
      }
      if (v35 <= 0)
      {
        if (!sub_10038E074(&v64, v11, v35, 1))
          goto LABEL_79;
        v11 = v66;
        v35 = v67;
      }
      --v35;
      v40 = v63;
      if ((((unint64_t)v11 >> v35) & 1) != 0)
        v40 = v7;
      v60 = v40;
      goto LABEL_53;
    }
LABEL_40:
    if (v37 != 15)
    {
      v13 = 1 << v37;
      if (v36 < 0x10)
      {
        v12 = v35;
        goto LABEL_6;
      }
      if (v35 >= v37)
      {
LABEL_77:
        v12 = v35 - v37;
        v13 += dword_1003C61D0[v37] & (v11 >> (v35 - v37));
        if (!v13)
          break;
        goto LABEL_6;
      }
      if (sub_10038E074(&v64, v11, v35, v37))
      {
        v11 = v66;
        v35 = v67;
        goto LABEL_77;
      }
LABEL_79:
      if (v61)
      {
        if (v61 == 1)
        {
          v50 = 1;
        }
        else
        {
          v51 = v61 & 0xFFFFFFFE;
          v50 = v61 - v51;
          v52 = &v69[v61 - 1];
          v53 = v51;
          do
          {
            v54 = *(v52 - 1);
            *(_WORD *)(v14 + 2 * *v52) = 0;
            *(_WORD *)(v14 + 2 * v54) = 0;
            v52 -= 2;
            v53 -= 2;
          }
          while (v53);
          if (v51 == v61)
            return 0;
        }
        v55 = v50 - 1;
        do
          *(_WORD *)(v14 + 2 * (int)v69[v55]) = 0;
        while ((_DWORD)v55--);
      }
      return 0;
    }
    v60 = 0;
LABEL_53:
    if (v15 <= v5)
      v41 = v5;
    else
      v41 = v15;
    v59 = v41 + 1;
    v42 = v41 - (uint64_t)v15 + 1;
    v43 = (int *)(v62 + 4 * v15);
    v12 = v35;
    do
    {
      v46 = *v43++;
      v45 = v46;
      if (*(_WORD *)(v14 + 2 * v46))
      {
        if (v12 > 0)
        {
          if ((((unint64_t)v11 >> --v12) & 1) == 0)
            goto LABEL_58;
LABEL_65:
          v47 = *(__int16 *)(v14 + 2 * v45);
          if ((v7 & v47) == 0)
          {
            v48 = v63;
            if (v47 >= 0)
              v48 = v7;
            *(_WORD *)(v14 + 2 * v45) = v47 + v48;
          }
          goto LABEL_58;
        }
        if (!sub_10038E074(&v64, v11, v12, 1))
          goto LABEL_79;
        v11 = v66;
        v12 = v67 - 1;
        if (((v66 >> (v67 - 1)) & 1) != 0)
          goto LABEL_65;
      }
      else
      {
        v44 = __OFSUB__(v37--, 1);
        if (v37 < 0 != v44)
          goto LABEL_70;
      }
LABEL_58:
      ++v15;
      --v42;
    }
    while (v42);
    v15 = v59;
LABEL_70:
    v5 = v58;
    v29 = v57;
    if (v60)
    {
      v49 = *(int *)(v62 + 4 * v15);
      *(_WORD *)(v14 + 2 * v49) = v60;
      v69[v61++] = v49;
    }
  }
  while (v15++ < v58);
  v26 = 0;
LABEL_28:
  v27 = (_QWORD *)a1[5];
  v28 = v65;
  *v27 = v64;
  v27[1] = v28;
  *(_QWORD *)(v4 + 24) = v11;
  *(_DWORD *)(v4 + 32) = v12;
  *(_DWORD *)(v4 + 40) = v26;
LABEL_29:
  --*(_DWORD *)(v4 + 64);
  return 1;
}

void sub_10038C40C(uint64_t a1, int a2, unsigned int a3, _QWORD *a4)
{
  void (**v8)(uint64_t);
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  size_t v14;
  size_t v15;
  void (**v16)(uint64_t);
  size_t v17;
  void (**v18)(uint64_t);
  size_t v19;
  void (**v20)(uint64_t);
  size_t v21;
  void (**v22)(uint64_t);
  size_t v23;
  void (**v24)(uint64_t);
  size_t v25;
  void (**v26)(uint64_t);
  size_t v27;
  void (**v28)(uint64_t);
  size_t v29;
  void (**v30)(uint64_t);
  size_t v31;
  void (**v32)(uint64_t);
  size_t v33;
  void (**v34)(uint64_t);
  size_t v35;
  void (**v36)(uint64_t);
  size_t v37;
  void (**v38)(uint64_t);
  size_t v39;
  void (**v40)(uint64_t);
  size_t v41;
  void (**v42)(uint64_t);
  size_t v43;
  void (**v44)(uint64_t);
  int v45;
  unsigned int v46;
  int v47;
  char v48;
  _DWORD *v49;
  char *v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  void (**v57)(uint64_t);
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  __int128 v61;
  unsigned int v62;
  int8x16_t v63;
  _OWORD *v64;
  int8x16_t *v65;
  _OWORD *v66;
  int8x16_t *v67;
  _OWORD *v68;
  int8x16_t *v69;
  uint64_t v70;
  _OWORD *v71;
  int8x16_t *v72;
  const char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  char v80;
  _BOOL4 v82;
  BOOL v83;
  unsigned int i;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  __int128 v91;
  int8x16_t v92;
  _OWORD *v93;
  int8x16_t *v94;
  uint64_t v95;
  _OWORD *v96;
  int8x16_t *v97;
  const char *v98;
  uint64_t v99;
  unint64_t v100;
  unsigned __int8 *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  BOOL v106;
  _BOOL4 v108;
  BOOL v109;
  unsigned int j;
  uint64_t v111;
  int v112;
  uint64_t v113;
  _DWORD *v114;
  int v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  _DWORD *v128;
  int v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  _DWORD *v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  _DWORD *v147;
  int v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _DWORD *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int8 *v156;
  unsigned int v157;
  uint64_t v158;
  int v159;
  int v160;
  _QWORD *v161;
  _DWORD v162[257];
  _BYTE __b[257];

  if (a3 >= 4)
  {
    v8 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v8 + 10) = 52;
    *((_DWORD *)v8 + 11) = a3;
    (**(void (***)(uint64_t))a1)(a1);
  }
  v9 = a1 + 8 * (int)a3;
  v10 = (unsigned __int8 **)(v9 + 216);
  v11 = (unsigned __int8 **)(v9 + 248);
  v159 = a2;
  if (a2)
    v11 = v10;
  v12 = *v11;
  if (*v11)
  {
    v13 = (_QWORD *)*a4;
    if (*a4)
      goto LABEL_7;
  }
  else
  {
    v57 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v57 + 10) = 52;
    *((_DWORD *)v57 + 11) = a3;
    (**(void (***)(uint64_t))a1)(a1);
    v13 = (_QWORD *)*a4;
    if (*a4)
    {
LABEL_7:
      v13[35] = v12;
      v14 = v12[1];
      if (!v12[1])
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v13 = (_QWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1568);
  *a4 = v13;
  v13[35] = v12;
  v14 = v12[1];
  if (v12[1])
LABEL_8:
    memset(__b, 1, v14);
LABEL_9:
  v15 = v12[2];
  if ((v14 + v15) >= 0x101)
  {
    v16 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v16 + 10) = 9;
    (*v16)(a1);
  }
  if ((_DWORD)v15)
  {
    memset(&__b[v14], 2, v15);
    LODWORD(v14) = v14 + v15;
  }
  v17 = v12[3];
  if ((int)v14 + (int)v17 >= 257)
  {
    v18 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v18 + 10) = 9;
    (*v18)(a1);
  }
  if ((_DWORD)v17)
  {
    memset(&__b[v14], 3, v17);
    LODWORD(v14) = v14 + v17;
  }
  v19 = v12[4];
  if ((int)v14 + (int)v19 >= 257)
  {
    v20 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v20 + 10) = 9;
    (*v20)(a1);
  }
  if ((_DWORD)v19)
  {
    memset(&__b[v14], 4, v19);
    LODWORD(v14) = v14 + v19;
  }
  v21 = v12[5];
  if ((int)v14 + (int)v21 >= 257)
  {
    v22 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v22 + 10) = 9;
    (*v22)(a1);
  }
  if ((_DWORD)v21)
  {
    memset(&__b[v14], 5, v21);
    LODWORD(v14) = v14 + v21;
  }
  v23 = v12[6];
  if ((int)v14 + (int)v23 >= 257)
  {
    v24 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v24 + 10) = 9;
    (*v24)(a1);
  }
  if ((_DWORD)v23)
  {
    memset(&__b[v14], 6, v23);
    LODWORD(v14) = v14 + v23;
  }
  v25 = v12[7];
  if ((int)v14 + (int)v25 >= 257)
  {
    v26 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v26 + 10) = 9;
    (*v26)(a1);
  }
  if ((_DWORD)v25)
  {
    memset(&__b[v14], 7, v25);
    LODWORD(v14) = v14 + v25;
  }
  v27 = v12[8];
  if ((int)v14 + (int)v27 >= 257)
  {
    v28 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v28 + 10) = 9;
    (*v28)(a1);
  }
  if ((_DWORD)v27)
  {
    memset(&__b[v14], 8, v27);
    LODWORD(v14) = v14 + v27;
  }
  v29 = v12[9];
  if ((int)v14 + (int)v29 >= 257)
  {
    v30 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v30 + 10) = 9;
    (*v30)(a1);
  }
  if ((_DWORD)v29)
  {
    memset(&__b[v14], 9, v29);
    LODWORD(v14) = v14 + v29;
  }
  v31 = v12[10];
  if ((int)v14 + (int)v31 >= 257)
  {
    v32 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v32 + 10) = 9;
    (*v32)(a1);
  }
  if ((_DWORD)v31)
  {
    memset(&__b[v14], 10, v31);
    LODWORD(v14) = v14 + v31;
  }
  v33 = v12[11];
  if ((int)v14 + (int)v33 >= 257)
  {
    v34 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v34 + 10) = 9;
    (*v34)(a1);
  }
  if ((_DWORD)v33)
  {
    memset(&__b[v14], 11, v33);
    LODWORD(v14) = v14 + v33;
  }
  v35 = v12[12];
  if ((int)v14 + (int)v35 >= 257)
  {
    v36 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v36 + 10) = 9;
    (*v36)(a1);
  }
  if ((_DWORD)v35)
  {
    memset(&__b[v14], 12, v35);
    LODWORD(v14) = v14 + v35;
  }
  v37 = v12[13];
  if ((int)v14 + (int)v37 >= 257)
  {
    v38 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v38 + 10) = 9;
    (*v38)(a1);
  }
  if ((_DWORD)v37)
  {
    memset(&__b[v14], 13, v37);
    LODWORD(v14) = v14 + v37;
  }
  v39 = v12[14];
  if ((int)v14 + (int)v39 >= 257)
  {
    v40 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v40 + 10) = 9;
    (*v40)(a1);
  }
  if ((_DWORD)v39)
  {
    memset(&__b[v14], 14, v39);
    LODWORD(v14) = v14 + v39;
  }
  v41 = v12[15];
  if ((int)v14 + (int)v41 >= 257)
  {
    v42 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v42 + 10) = 9;
    (*v42)(a1);
  }
  if ((_DWORD)v41)
  {
    memset(&__b[v14], 15, v41);
    LODWORD(v14) = v14 + v41;
  }
  v43 = v12[16];
  if ((int)v14 + (int)v43 >= 257)
  {
    v44 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v44 + 10) = 9;
    (*v44)(a1);
  }
  v161 = (_QWORD *)a1;
  if ((_DWORD)v43)
  {
    memset(&__b[v14], 16, v43);
    LODWORD(v14) = v14 + v43;
  }
  v160 = v14;
  __b[v14] = 0;
  v45 = __b[0];
  if (__b[0])
  {
    v46 = 0;
    v47 = 0;
    v48 = __b[0];
    do
    {
      if (v45 == v48)
      {
        v49 = &v162[v47];
        v50 = &__b[v47 + 1];
        do
        {
          *v49++ = v46++;
          v51 = *v50++;
          ++v47;
        }
        while (v45 == v51);
      }
      if (1 << v45 <= v46)
      {
        v52 = v161;
        v53 = *v161;
        *(_DWORD *)(v53 + 40) = 9;
        (*(void (**)(_QWORD *))v53)(v52);
      }
      v46 *= 2;
      ++v45;
      v48 = __b[v47];
    }
    while (v48);
  }
  LODWORD(v54) = v12[1];
  if (v12[1])
  {
    v13[19] = -(uint64_t)v162[0];
    LODWORD(v54) = v12[1];
    v55 = v161;
    v13[1] = v162[v12[1] - 1];
    if (v12[2])
      goto LABEL_79;
  }
  else
  {
    v55 = v161;
    v13[1] = -1;
    if (v12[2])
    {
LABEL_79:
      v13[20] = v54 - (unint64_t)v162[v54];
      v54 = v54 + (unint64_t)v12[2];
      v13[2] = v162[v54 - 1];
      if (v12[3])
        goto LABEL_80;
      goto LABEL_99;
    }
  }
  v13[2] = -1;
  if (v12[3])
  {
LABEL_80:
    v13[21] = v54 - (unint64_t)v162[v54];
    v54 = v54 + (unint64_t)v12[3];
    v13[3] = v162[v54 - 1];
    if (v12[4])
      goto LABEL_81;
    goto LABEL_100;
  }
LABEL_99:
  v13[3] = -1;
  if (v12[4])
  {
LABEL_81:
    v13[22] = v54 - (unint64_t)v162[v54];
    v54 = v54 + (unint64_t)v12[4];
    v13[4] = v162[v54 - 1];
    if (v12[5])
      goto LABEL_82;
    goto LABEL_101;
  }
LABEL_100:
  v13[4] = -1;
  if (v12[5])
  {
LABEL_82:
    v13[23] = v54 - (unint64_t)v162[v54];
    v54 = v54 + (unint64_t)v12[5];
    v13[5] = v162[v54 - 1];
    if (v12[6])
      goto LABEL_83;
    goto LABEL_102;
  }
LABEL_101:
  v13[5] = -1;
  if (v12[6])
  {
LABEL_83:
    v13[24] = v54 - (unint64_t)v162[v54];
    v54 = v54 + (unint64_t)v12[6];
    v13[6] = v162[v54 - 1];
    if (v12[7])
      goto LABEL_84;
    goto LABEL_103;
  }
LABEL_102:
  v13[6] = -1;
  if (v12[7])
  {
LABEL_84:
    v13[25] = v54 - (unint64_t)v162[v54];
    v54 = v54 + (unint64_t)v12[7];
    v13[7] = v162[v54 - 1];
    if (v12[8])
      goto LABEL_85;
    goto LABEL_104;
  }
LABEL_103:
  v13[7] = -1;
  if (v12[8])
  {
LABEL_85:
    v13[26] = v54 - (unint64_t)v162[v54];
    v54 = v54 + (unint64_t)v12[8];
    v13[8] = v162[v54 - 1];
    if (v12[9])
      goto LABEL_86;
    goto LABEL_105;
  }
LABEL_104:
  v13[8] = -1;
  if (v12[9])
  {
LABEL_86:
    v13[27] = v54 - (unint64_t)v162[v54];
    v54 = v54 + (unint64_t)v12[9];
    v13[9] = v162[v54 - 1];
    if (v12[10])
      goto LABEL_87;
    goto LABEL_106;
  }
LABEL_105:
  v13[9] = -1;
  if (v12[10])
  {
LABEL_87:
    v13[28] = v54 - (unint64_t)v162[v54];
    v54 = v54 + (unint64_t)v12[10];
    v13[10] = v162[v54 - 1];
    if (v12[11])
      goto LABEL_88;
    goto LABEL_107;
  }
LABEL_106:
  v13[10] = -1;
  if (v12[11])
  {
LABEL_88:
    v13[29] = v54 - (unint64_t)v162[v54];
    v54 = v54 + (unint64_t)v12[11];
    v13[11] = v162[v54 - 1];
    if (v12[12])
      goto LABEL_89;
    goto LABEL_108;
  }
LABEL_107:
  v13[11] = -1;
  if (v12[12])
  {
LABEL_89:
    v13[30] = v54 - (unint64_t)v162[v54];
    v54 = v54 + (unint64_t)v12[12];
    v13[12] = v162[v54 - 1];
    if (v12[13])
      goto LABEL_90;
    goto LABEL_109;
  }
LABEL_108:
  v13[12] = -1;
  if (v12[13])
  {
LABEL_90:
    v13[31] = v54 - (unint64_t)v162[v54];
    v54 = v54 + (unint64_t)v12[13];
    v13[13] = v162[v54 - 1];
    if (v12[14])
      goto LABEL_91;
    goto LABEL_110;
  }
LABEL_109:
  v13[13] = -1;
  if (v12[14])
  {
LABEL_91:
    v13[32] = v54 - (unint64_t)v162[v54];
    v54 = v54 + (unint64_t)v12[14];
    v13[14] = v162[v54 - 1];
    if (v12[15])
      goto LABEL_92;
LABEL_111:
    v13[15] = -1;
    if (v12[16])
      goto LABEL_93;
    goto LABEL_112;
  }
LABEL_110:
  v13[14] = -1;
  if (!v12[15])
    goto LABEL_111;
LABEL_92:
  v13[33] = v54 - (unint64_t)v162[v54];
  v54 = v54 + (unint64_t)v12[15];
  v13[15] = v162[v54 - 1];
  if (v12[16])
  {
LABEL_93:
    v13[34] = v54 - (unint64_t)v162[v54];
    v56 = v162[v54 - 1 + (unint64_t)v12[16]];
    goto LABEL_113;
  }
LABEL_112:
  v56 = -1;
LABEL_113:
  v13[16] = v56;
  v13[17] = 0xFFFFFLL;
  v58 = v13 + 36;
  bzero(v13 + 36, 0x400uLL);
  LODWORD(v59) = v12[1];
  if (v12[1])
  {
    v59 = 0;
    v60 = v13 + 164;
    *(_QWORD *)&v61 = 0x100000001;
    *((_QWORD *)&v61 + 1) = 0x100000001;
    v62 = 1;
    do
    {
      v73 = (const char *)&v12[v59 + 17];
      v74 = (int)(v162[v59] << 7);
      v75 = (unint64_t)&v12[v59 + 18];
      v76 = (unint64_t)v13 + 4 * v74 + 800;
      v77 = (unint64_t)v60 + v74;
      v78 = (unint64_t)v13 + v74 + 1440;
      v79 = (unint64_t)v58 + 4 * v74 >= v75 || (unint64_t)v73 >= v76;
      v80 = !v79;
      v82 = v77 < v75 && (unint64_t)v73 < v78;
      v83 = v77 >= v76 || (unint64_t)v58 + 4 * v74 >= v78;
      if (!v83 || (v80 & 1) != 0 || v82)
      {
        for (i = 129; i > 1; --i)
        {
          *((_DWORD *)v60 + v74 - 256) = 1;
          *((_BYTE *)v60 + v74++) = *v73;
        }
      }
      else
      {
        v63 = vld1q_dup_s8(v73);
        v64 = (_OWORD *)((char *)v13 + 4 * v74 + 288);
        v64[2] = v61;
        v64[3] = v61;
        *v64 = v61;
        v64[1] = v61;
        v64[6] = v61;
        v64[7] = v61;
        v64[4] = v61;
        v64[5] = v61;
        v65 = (int8x16_t *)((char *)v13 + v74 + 1312);
        *v65 = v63;
        v65[1] = v63;
        v66 = (_OWORD *)((char *)v13 + 4 * (v74 | 0x20) + 288);
        v66[2] = v61;
        v66[3] = v61;
        *v66 = v61;
        v66[1] = v61;
        v66[6] = v61;
        v66[7] = v61;
        v66[4] = v61;
        v66[5] = v61;
        v67 = (int8x16_t *)((char *)v13 + (v74 | 0x20) + 1312);
        *v67 = v63;
        v67[1] = v63;
        v68 = (_OWORD *)((char *)v13 + 4 * (v74 | 0x40) + 288);
        v68[2] = v61;
        v68[3] = v61;
        *v68 = v61;
        v68[1] = v61;
        v68[6] = v61;
        v68[7] = v61;
        v68[4] = v61;
        v68[5] = v61;
        v69 = (int8x16_t *)((char *)v13 + (v74 | 0x40) + 1312);
        *v69 = v63;
        v69[1] = v63;
        v70 = v74 | 0x60;
        v71 = (_OWORD *)((char *)v13 + 4 * v70 + 288);
        v71[2] = v61;
        v71[3] = v61;
        *v71 = v61;
        v71[1] = v61;
        v71[6] = v61;
        v71[7] = v61;
        v71[4] = v61;
        v71[5] = v61;
        v72 = (int8x16_t *)((char *)v13 + v70 + 1312);
        *v72 = v63;
        v72[1] = v63;
      }
      ++v59;
      v79 = v62++ >= v12[1];
    }
    while (!v79);
  }
  if (v12[2])
  {
    v85 = 0;
    v59 = (int)v59;
    v86 = v13 + 36;
    v87 = v13 + 164;
    v88 = (int)v59 + 17;
    v89 = (int)v59 + 18;
    v90 = 1;
    *(_QWORD *)&v91 = 0x200000002;
    *((_QWORD *)&v91 + 1) = 0x200000002;
    do
    {
      v98 = (const char *)&v12[v59 + 17];
      v99 = (int)(v162[v59] << 6);
      v100 = (unint64_t)&v12[v89 + v85];
      v101 = &v12[v88 + v85];
      v102 = (unint64_t)v13 + 4 * v99 + 544;
      v103 = (unint64_t)v87 + v99;
      v104 = (unint64_t)v13 + v99 + 1376;
      v106 = (unint64_t)v86 + 4 * v99 < v100 && (unint64_t)v101 < v102;
      v108 = v103 < v100 && (unint64_t)v101 < v104;
      v109 = v103 >= v102 || (unint64_t)v86 + 4 * v99 >= v104;
      if (!v109 || v106 || v108)
      {
        for (j = 65; j > 1; --j)
        {
          *((_DWORD *)v87 + v99 - 256) = 2;
          *((_BYTE *)v87 + v99++) = *v98;
        }
      }
      else
      {
        v92 = vld1q_dup_s8(v98);
        v93 = (_OWORD *)((char *)v13 + 4 * v99 + 288);
        v93[2] = v91;
        v93[3] = v91;
        *v93 = v91;
        v93[1] = v91;
        v93[6] = v91;
        v93[7] = v91;
        v93[4] = v91;
        v93[5] = v91;
        v94 = (int8x16_t *)((char *)v13 + v99 + 1312);
        *v94 = v92;
        v94[1] = v92;
        v95 = v99 | 0x20;
        v96 = (_OWORD *)((char *)v13 + 4 * v95 + 288);
        v96[2] = v91;
        v96[3] = v91;
        *v96 = v91;
        v96[1] = v91;
        v96[6] = v91;
        v96[7] = v91;
        v96[4] = v91;
        v96[5] = v91;
        v97 = (int8x16_t *)((char *)v13 + v95 + 1312);
        *v97 = v92;
        v97[1] = v92;
      }
      ++v59;
      ++v85;
      v79 = v90++ >= v12[2];
    }
    while (!v79);
  }
  if (v12[3])
  {
    v111 = 0;
    v112 = v59;
    v113 = (uint64_t)&v12[(int)v59 + 17];
    v114 = &v162[(int)v59];
    do
    {
      v115 = 32 * v114[v111];
      LODWORD(v13[v115 / 2u + 36]) = 3;
      v116 = v115;
      v117 = v13 + 164;
      LOBYTE(v117[v115 / 8u]) = *(_BYTE *)(v113 + v111);
      v118 = v115 | 1;
      *((_DWORD *)v13 + v118 + 72) = 3;
      *((_BYTE *)v117 + v118) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 2) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 2)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 3) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 3)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 4) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 4)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 5) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 5)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 6) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 6)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 7) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 7)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 8) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 8)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 9) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 9)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0xA) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0xA)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0xB) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0xB)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0xC) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0xC)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0xD) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0xD)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0xE) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0xE)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0xF) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0xF)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x10) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x10)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x11) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x11)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x12) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x12)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x13) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x13)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x14) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x14)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x15) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x15)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x16) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x16)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x17) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x17)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x18) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x18)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x19) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x19)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x1A) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x1A)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x1B) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x1B)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x1C) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x1C)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x1D) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x1D)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x1E) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x1E)) = *(_BYTE *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x1F) + 72) = 3;
      *((_BYTE *)v117 + (v116 | 0x1F)) = *(_BYTE *)(v113 + v111++);
    }
    while (v111 < v12[3]);
    LODWORD(v59) = v112 + v111;
    v55 = v161;
  }
  if (v12[4])
  {
    v119 = 0;
    v120 = v59;
    v121 = (uint64_t)&v12[(int)v59 + 17];
    v122 = &v162[(int)v59];
    do
    {
      v123 = 16 * v122[v119];
      *((_DWORD *)v13 + v123 + 72) = 4;
      v124 = v13 + 164;
      *((_BYTE *)v124 + v123) = *(_BYTE *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 1) + 72) = 4;
      *((_BYTE *)v124 + (v123 | 1)) = *(_BYTE *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 2) + 72) = 4;
      *((_BYTE *)v124 + (v123 | 2)) = *(_BYTE *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 3) + 72) = 4;
      *((_BYTE *)v124 + (v123 | 3)) = *(_BYTE *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 4) + 72) = 4;
      *((_BYTE *)v124 + (v123 | 4)) = *(_BYTE *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 5) + 72) = 4;
      *((_BYTE *)v124 + (v123 | 5)) = *(_BYTE *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 6) + 72) = 4;
      *((_BYTE *)v124 + (v123 | 6)) = *(_BYTE *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 7) + 72) = 4;
      *((_BYTE *)v124 + (v123 | 7)) = *(_BYTE *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 8) + 72) = 4;
      *((_BYTE *)v124 + (v123 | 8)) = *(_BYTE *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 9) + 72) = 4;
      *((_BYTE *)v124 + (v123 | 9)) = *(_BYTE *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 0xA) + 72) = 4;
      *((_BYTE *)v124 + (v123 | 0xA)) = *(_BYTE *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 0xB) + 72) = 4;
      *((_BYTE *)v124 + (v123 | 0xB)) = *(_BYTE *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 0xC) + 72) = 4;
      *((_BYTE *)v124 + (v123 | 0xC)) = *(_BYTE *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 0xD) + 72) = 4;
      *((_BYTE *)v124 + (v123 | 0xD)) = *(_BYTE *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 0xE) + 72) = 4;
      *((_BYTE *)v124 + (v123 | 0xE)) = *(_BYTE *)(v121 + v119);
      v123 |= 0xFuLL;
      *((_DWORD *)v13 + v123 + 72) = 4;
      *((_BYTE *)v124 + v123) = *(_BYTE *)(v121 + v119++);
    }
    while (v119 < v12[4]);
    LODWORD(v59) = v120 + v119;
  }
  if (v12[5])
  {
    v125 = 0;
    v126 = v59;
    v127 = (uint64_t)&v12[(int)v59 + 17];
    v128 = &v162[(int)v59];
    do
    {
      v129 = 8 * v128[v125];
      LODWORD(v13[v129 / 2u + 36]) = 5;
      v130 = v13 + 164;
      LOBYTE(v130[v129 / 8u]) = *(_BYTE *)(v127 + v125);
      v131 = v129 | 1;
      *((_DWORD *)v13 + v131 + 72) = 5;
      *((_BYTE *)v130 + v131) = *(_BYTE *)(v127 + v125);
      v132 = v129 | 2;
      *((_DWORD *)v13 + v132 + 72) = 5;
      *((_BYTE *)v130 + v132) = *(_BYTE *)(v127 + v125);
      v133 = v129 | 3;
      *((_DWORD *)v13 + v133 + 72) = 5;
      *((_BYTE *)v130 + v133) = *(_BYTE *)(v127 + v125);
      v134 = v129 | 4;
      *((_DWORD *)v13 + v134 + 72) = 5;
      *((_BYTE *)v130 + v134) = *(_BYTE *)(v127 + v125);
      v135 = v129 | 5;
      *((_DWORD *)v13 + v135 + 72) = 5;
      *((_BYTE *)v130 + v135) = *(_BYTE *)(v127 + v125);
      v136 = v129 | 6;
      *((_DWORD *)v13 + v136 + 72) = 5;
      *((_BYTE *)v130 + v136) = *(_BYTE *)(v127 + v125);
      v137 = v129 | 7;
      *((_DWORD *)v13 + v137 + 72) = 5;
      *((_BYTE *)v130 + v137) = *(_BYTE *)(v127 + v125++);
    }
    while (v125 < v12[5]);
    LODWORD(v59) = v126 + v125;
  }
  if (v12[6])
  {
    v138 = 0;
    v139 = v59;
    v140 = (uint64_t)&v12[(int)v59 + 17];
    v141 = &v162[(int)v59];
    do
    {
      v142 = 4 * v141[v138];
      LODWORD(v13[v142 / 2 + 36]) = 6;
      v143 = v13 + 164;
      *((_BYTE *)v143 + v142) = *(_BYTE *)(v140 + v138);
      *((_DWORD *)v13 + (v142 | 1) + 72) = 6;
      *((_BYTE *)v143 + (v142 | 1)) = *(_BYTE *)(v140 + v138);
      *((_DWORD *)v13 + (v142 | 2) + 72) = 6;
      *((_BYTE *)v143 + (v142 | 2)) = *(_BYTE *)(v140 + v138);
      *((_DWORD *)v13 + (v142 | 3) + 72) = 6;
      *((_BYTE *)v143 + (v142 | 3)) = *(_BYTE *)(v140 + v138++);
    }
    while (v138 < v12[6]);
    LODWORD(v59) = v139 + v138;
  }
  if (v12[7])
  {
    v144 = 0;
    v145 = v59;
    v146 = (uint64_t)&v12[(int)v59 + 17];
    v147 = &v162[(int)v59];
    do
    {
      v148 = 2 * v147[v144];
      LODWORD(v13[v148 / 2u + 36]) = 7;
      v149 = v13 + 164;
      *((_BYTE *)v149 + v148) = *(_BYTE *)(v146 + v144);
      v150 = v148 | 1;
      *((_DWORD *)v13 + v150 + 72) = 7;
      *((_BYTE *)v149 + v150) = *(_BYTE *)(v146 + v144++);
    }
    while (v144 < v12[7]);
    LODWORD(v59) = v145 + v144;
  }
  if (v12[8])
  {
    v151 = 0;
    v152 = (uint64_t)&v12[(int)v59 + 17];
    v153 = &v162[(int)v59];
    do
    {
      v154 = (int)v153[v151];
      *((_DWORD *)v13 + v154 + 72) = 8;
      *((_BYTE *)v13 + v154 + 1312) = *(_BYTE *)(v152 + v151++);
    }
    while (v151 < v12[8]);
  }
  if (v159 && v160 >= 1)
  {
    v155 = v160;
    v156 = v12 + 17;
    do
    {
      v157 = *v156++;
      if (v157 >= 0x10)
      {
        v158 = *v55;
        *(_DWORD *)(v158 + 40) = 9;
        (*(void (**)(uint64_t *))v158)(v55);
      }
      --v155;
    }
    while (v155);
  }
}

uint64_t sub_10038D6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char *v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = *(_QWORD *)(a1 + 592);
  if (*(_DWORD *)(a1 + 348) && !*(_DWORD *)(v4 + 64))
  {
    v47 = *(_QWORD *)(a1 + 584);
    *(_DWORD *)(v47 + 32) += *(_DWORD *)(v4 + 32) / 8;
    *(_DWORD *)(v4 + 32) = 0;
    result = (*(uint64_t (**)(uint64_t))(v47 + 16))(a1);
    if (!(_DWORD)result)
      return result;
    if (*(int *)(a1 + 416) >= 1)
    {
      v48 = 0;
      do
        *(_DWORD *)(v4 + 44 + 4 * v48++) = 0;
      while (v48 < *(int *)(a1 + 416));
    }
    *(_DWORD *)(v4 + 40) = 0;
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 348);
    if (!*(_DWORD *)(a1 + 540))
      *(_BYTE *)(v4 + 60) = 0;
  }
  if (*(_BYTE *)(v4 + 60))
  {
LABEL_4:
    --*(_DWORD *)(v4 + 64);
    return 1;
  }
  v50 = *(_QWORD *)(a1 + 528);
  v6 = *(_DWORD *)(a1 + 536);
  v57 = a1;
  v7 = *(unsigned __int8 ***)(a1 + 40);
  v8 = *v7;
  v9 = v7[1];
  v53 = *v7;
  v54 = v9;
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(_DWORD *)(v4 + 32);
  v51 = *(_OWORD *)(v4 + 40);
  v52 = *(_DWORD *)(v4 + 56);
  if (*(int *)(a1 + 464) < 1)
    goto LABEL_77;
  v12 = 0;
  v55 = 0;
  v56 = 0;
  v49 = a2;
LABEL_9:
  v13 = *(_WORD **)(a2 + 8 * v12);
  v14 = *(_QWORD *)(v4 + 8 * v12 + 176);
  if (v11 > 7)
    goto LABEL_13;
  result = sub_10038E074(&v53, v10, v11, 0);
  if (!(_DWORD)result)
    return result;
  v10 = v55;
  v11 = v56;
  if ((int)v56 > 7)
  {
LABEL_13:
    v17 = v10 >> (v11 - 8);
    v18 = *(_DWORD *)(v14 + 4 * v17 + 288);
    if (v18)
    {
      v11 -= v18;
      v19 = *(unsigned __int8 *)(v14 + v17 + 1312);
      v20 = *(_QWORD *)(v4 + 8 * v12 + 256);
      v21 = *(_DWORD *)(v4 + 4 * v12 + 336);
      if (!v21)
        goto LABEL_15;
      goto LABEL_23;
    }
    v15 = v14;
    v16 = 9;
  }
  else
  {
    v15 = v14;
    v16 = 1;
  }
  v19 = sub_10038E1E8((uint64_t)&v53, v10, v11, v15, v16);
  if (v19 < 0)
    return 0;
  v10 = v55;
  v11 = v56;
  v20 = *(_QWORD *)(v4 + 8 * v12 + 256);
  v21 = *(_DWORD *)(v4 + 4 * v12 + 336);
  if (v21)
  {
LABEL_23:
    if (v19)
    {
      if (v11 < v19)
      {
        result = sub_10038E074(&v53, v10, v11, v19);
        if (!(_DWORD)result)
          return result;
        v10 = v55;
        v11 = v56;
      }
      v11 -= v19;
      v22 = dword_1003C61D0[v19];
      v23 = v22 & (v10 >> v11);
      if (v23 > dword_1003C61D0[v19 - 1])
        v22 = 0;
      v24 = v23 - v22;
    }
    else
    {
      v24 = 0;
    }
    v25 = (char *)&v51 + 4 * *(int *)(a1 + 4 * v12 + 468);
    v26 = *((_DWORD *)v25 + 1) + v24;
    *((_DWORD *)v25 + 1) = v26;
    *v13 = v26;
    if (v21 >= 2)
    {
      v27 = 1;
      while (1)
      {
        if (v11 <= 7)
        {
          result = sub_10038E074(&v53, v10, v11, 0);
          if (!(_DWORD)result)
            return result;
          v10 = v55;
          v11 = v56;
          if ((int)v56 <= 7)
            break;
        }
        v33 = v10 >> (v11 - 8);
        v34 = *(_DWORD *)(v20 + 4 * v33 + 288);
        if (v34)
        {
          v11 -= v34;
          v35 = *(unsigned __int8 *)(v20 + v33 + 1312);
          v36 = v35 >> 4;
          v37 = v35 & 0xF;
          if ((v35 & 0xF) == 0)
            goto LABEL_42;
LABEL_48:
          if (v11 < v37)
          {
            result = sub_10038E074(&v53, v10, v11, v37);
            if (!(_DWORD)result)
              return result;
            v10 = v55;
            v11 = v56;
          }
          v28 = v36 + v27;
          v11 -= v37;
          v29 = dword_1003C61D0[v37];
          v30 = v29 & (v10 >> v11);
          if (v30 > dword_1003C61D0[v37 - 1])
            LOWORD(v29) = 0;
          v13[*(int *)(v50 + 4 * (int)v28)] = v30 - v29;
          v27 = v28 + 1;
          if ((int)(v28 + 1) >= v21)
          {
            while (1)
            {
LABEL_54:
              if (v27 > v6)
                goto LABEL_8;
              if (v11 > 7)
                goto LABEL_59;
              result = sub_10038E074(&v53, v10, v11, 0);
              if (!(_DWORD)result)
                return result;
              v10 = v55;
              v11 = v56;
              if ((int)v56 > 7)
              {
LABEL_59:
                v41 = v10 >> (v11 - 8);
                v42 = *(_DWORD *)(v20 + 4 * v41 + 288);
                if (v42)
                {
                  v11 -= v42;
                  v43 = *(unsigned __int8 *)(v20 + v41 + 1312);
                  v44 = v43 >> 4;
                  v45 = v43 & 0xF;
                  if ((v43 & 0xF) == 0)
                    goto LABEL_61;
                  goto LABEL_66;
                }
                v39 = v20;
                v40 = 9;
              }
              else
              {
                v39 = v20;
                v40 = 1;
              }
              v46 = sub_10038E1E8((uint64_t)&v53, v10, v11, v39, v40);
              if ((v46 & 0x80000000) != 0)
                return 0;
              v10 = v55;
              v11 = v56;
              v44 = v46 >> 4;
              v45 = v46 & 0xF;
              if ((v46 & 0xF) == 0)
              {
LABEL_61:
                if (v44 != 15)
                  goto LABEL_8;
                goto LABEL_53;
              }
LABEL_66:
              if (v11 < v45)
              {
                result = sub_10038E074(&v53, v10, v11, v45);
                if (!(_DWORD)result)
                  return result;
                v10 = v55;
                v11 = v56;
              }
              v11 -= v45;
LABEL_53:
              v27 += v44 + 1;
            }
          }
        }
        else
        {
          v31 = v20;
          v32 = 9;
LABEL_46:
          v38 = sub_10038E1E8((uint64_t)&v53, v10, v11, v31, v32);
          if ((v38 & 0x80000000) != 0)
            return 0;
          v10 = v55;
          v11 = v56;
          v36 = v38 >> 4;
          v37 = v38 & 0xF;
          if ((v38 & 0xF) != 0)
            goto LABEL_48;
LABEL_42:
          if (v36 != 15)
          {
LABEL_8:
            ++v12;
            a2 = v49;
            if (v12 < *(int *)(a1 + 464))
              goto LABEL_9;
            v7 = *(unsigned __int8 ***)(a1 + 40);
            v8 = v53;
            v9 = v54;
LABEL_77:
            *v7 = v8;
            v7[1] = v9;
            *(_QWORD *)(v4 + 24) = v10;
            *(_DWORD *)(v4 + 32) = v11;
            *(_OWORD *)(v4 + 40) = v51;
            *(_DWORD *)(v4 + 56) = v52;
            goto LABEL_4;
          }
          v27 += 16;
          if (v27 >= v21)
            goto LABEL_54;
        }
      }
      v31 = v20;
      v32 = 1;
      goto LABEL_46;
    }
LABEL_51:
    v27 = 1;
    goto LABEL_54;
  }
LABEL_15:
  if (!v19)
    goto LABEL_51;
  if (v11 >= v19)
  {
LABEL_19:
    v11 -= v19;
    goto LABEL_51;
  }
  result = sub_10038E074(&v53, v10, v11, v19);
  if ((_DWORD)result)
  {
    v10 = v55;
    v11 = v56;
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_10038DB94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = *(_QWORD *)(a1 + 592);
  if (*(_DWORD *)(a1 + 348) && !*(_DWORD *)(v4 + 64))
  {
    v44 = *(_QWORD *)(a1 + 584);
    *(_DWORD *)(v44 + 32) += *(_DWORD *)(v4 + 32) / 8;
    *(_DWORD *)(v4 + 32) = 0;
    result = (*(uint64_t (**)(uint64_t))(v44 + 16))(a1);
    if (!(_DWORD)result)
      return result;
    if (*(int *)(a1 + 416) >= 1)
    {
      v45 = 0;
      do
        *(_DWORD *)(v4 + 44 + 4 * v45++) = 0;
      while (v45 < *(int *)(a1 + 416));
    }
    *(_DWORD *)(v4 + 40) = 0;
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 348);
    if (!*(_DWORD *)(a1 + 540))
      *(_BYTE *)(v4 + 60) = 0;
  }
  if (*(_BYTE *)(v4 + 60))
    goto LABEL_4;
  v52 = a1;
  v6 = *(unsigned __int8 ***)(a1 + 40);
  v7 = *v6;
  v8 = v6[1];
  v48 = *v6;
  v49 = v8;
  v9 = *(_QWORD *)(v4 + 24);
  v10 = *(_DWORD *)(v4 + 32);
  v46 = *(_OWORD *)(v4 + 40);
  v47 = *(_DWORD *)(v4 + 56);
  if (*(int *)(a1 + 464) < 1)
    goto LABEL_78;
  v11 = 0;
  v50 = 0;
  v51 = 0;
  do
  {
    v12 = *(_WORD **)(a2 + 8 * v11);
    v13 = *(_QWORD *)(v4 + 8 * v11 + 176);
    if (v10 <= 7)
    {
      result = sub_10038E074(&v48, v9, v10, 0);
      if (!(_DWORD)result)
        return result;
      v9 = v50;
      v10 = v51;
      if ((int)v51 <= 7)
      {
        v14 = v13;
        v15 = 1;
        goto LABEL_21;
      }
    }
    v16 = v9 >> (v10 - 8);
    v17 = *(_DWORD *)(v13 + 4 * v16 + 288);
    if (!v17)
    {
      v14 = v13;
      v15 = 9;
LABEL_21:
      v18 = sub_10038E1E8((uint64_t)&v48, v9, v10, v14, v15);
      if (v18 < 0)
        return 0;
      v9 = v50;
      v10 = v51;
      v19 = *(_QWORD *)(v4 + 8 * v11 + 256);
      v20 = *(_DWORD *)(v4 + 4 * v11 + 336);
      if (!v20)
      {
LABEL_14:
        if (v18)
        {
          if (v10 < v18)
          {
            result = sub_10038E074(&v48, v9, v10, v18);
            if (!(_DWORD)result)
              return result;
            v9 = v50;
            v10 = v51;
          }
          v10 -= v18;
        }
        v21 = 1;
        goto LABEL_57;
      }
      goto LABEL_23;
    }
    v10 -= v17;
    v18 = *(unsigned __int8 *)(v13 + v16 + 1312);
    v19 = *(_QWORD *)(v4 + 8 * v11 + 256);
    v20 = *(_DWORD *)(v4 + 4 * v11 + 336);
    if (!v20)
      goto LABEL_14;
LABEL_23:
    if (v18)
    {
      if (v10 < v18)
      {
        result = sub_10038E074(&v48, v9, v10, v18);
        if (!(_DWORD)result)
          return result;
        v9 = v50;
        v10 = v51;
      }
      v10 -= v18;
      v22 = dword_1003C61D0[v18];
      v23 = v22 & (v9 >> v10);
      if (v23 > dword_1003C61D0[v18 - 1])
        v22 = 0;
      v24 = v23 - v22;
    }
    else
    {
      v24 = 0;
    }
    v25 = (char *)&v46 + 4 * *(int *)(a1 + 4 * v11 + 468);
    v26 = *((_DWORD *)v25 + 1) + v24;
    *((_DWORD *)v25 + 1) = v26;
    *v12 = v26;
    v21 = 1;
    if (v20 < 2)
      goto LABEL_57;
    do
    {
      while (1)
      {
        if (v10 <= 7)
        {
          result = sub_10038E074(&v48, v9, v10, 0);
          if (!(_DWORD)result)
            return result;
          v9 = v50;
          v10 = v51;
          if ((int)v51 <= 7)
          {
            v30 = v19;
            v31 = 1;
            goto LABEL_47;
          }
        }
        v32 = v9 >> (v10 - 8);
        v33 = *(_DWORD *)(v19 + 4 * v32 + 288);
        if (!v33)
          break;
        v10 -= v33;
        v34 = *(unsigned __int8 *)(v19 + v32 + 1312);
        v35 = v34 >> 4;
        v36 = v34 & 0xF;
        if ((v34 & 0xF) != 0)
          goto LABEL_49;
LABEL_43:
        if (v35 != 15)
          goto LABEL_53;
        v27 = v21 + 15;
        v21 += 16;
        if (v21 >= v20)
          goto LABEL_52;
      }
      v30 = v19;
      v31 = 9;
LABEL_47:
      v37 = sub_10038E1E8((uint64_t)&v48, v9, v10, v30, v31);
      if ((v37 & 0x80000000) != 0)
        return 0;
      v9 = v50;
      v10 = v51;
      v35 = v37 >> 4;
      v36 = v37 & 0xF;
      if ((v37 & 0xF) == 0)
        goto LABEL_43;
LABEL_49:
      if (v10 < v36)
      {
        result = sub_10038E074(&v48, v9, v10, v36);
        if (!(_DWORD)result)
          return result;
        v9 = v50;
        v10 = v51;
      }
      v27 = v35 + v21;
      v10 -= v36;
      v28 = dword_1003C61D0[v36];
      v29 = v28 & (v9 >> v10);
      if (v29 > dword_1003C61D0[v36 - 1])
        LOWORD(v28) = 0;
      v12[dword_1003C68A0[v27]] = v29 - v28;
      v21 = v27 + 1;
    }
    while (v27 + 1 < v20);
LABEL_52:
    if (v27 <= 62)
    {
      do
      {
LABEL_57:
        if (v10 > 7)
          goto LABEL_62;
        result = sub_10038E074(&v48, v9, v10, 0);
        if (!(_DWORD)result)
          return result;
        v9 = v50;
        v10 = v51;
        if ((int)v51 > 7)
        {
LABEL_62:
          v39 = v9 >> (v10 - 8);
          v40 = *(_DWORD *)(v19 + 4 * v39 + 288);
          if (v40)
          {
            v10 -= v40;
            v41 = *(unsigned __int8 *)(v19 + v39 + 1312);
            v42 = v41 >> 4;
            v43 = v41 & 0xF;
            if ((v41 & 0xF) == 0)
              goto LABEL_64;
            goto LABEL_68;
          }
          v38 = sub_10038E1E8((uint64_t)&v48, v9, v10, v19, 9);
          if ((v38 & 0x80000000) != 0)
            return 0;
        }
        else
        {
          v38 = sub_10038E1E8((uint64_t)&v48, v50, v51, v19, 1);
          if ((v38 & 0x80000000) != 0)
            return 0;
        }
        v9 = v50;
        v10 = v51;
        v42 = v38 >> 4;
        v43 = v38 & 0xF;
        if ((v38 & 0xF) == 0)
        {
LABEL_64:
          if (v42 != 15)
            break;
          goto LABEL_56;
        }
LABEL_68:
        if (v10 < v43)
        {
          result = sub_10038E074(&v48, v9, v10, v43);
          if (!(_DWORD)result)
            return result;
          v9 = v50;
          v10 = v51;
        }
        v10 -= v43;
LABEL_56:
        v21 += v42 + 1;
      }
      while (v21 < 64);
    }
LABEL_53:
    ++v11;
  }
  while (v11 < *(int *)(a1 + 464));
  v6 = *(unsigned __int8 ***)(a1 + 40);
  v7 = v48;
  v8 = v49;
LABEL_78:
  *v6 = v7;
  v6[1] = v8;
  *(_QWORD *)(v4 + 24) = v9;
  *(_DWORD *)(v4 + 32) = v10;
  *(_OWORD *)(v4 + 40) = v46;
  *(_DWORD *)(v4 + 56) = v47;
LABEL_4:
  --*(_DWORD *)(v4 + 64);
  return 1;
}

uint64_t sub_10038E074(unsigned __int8 **a1, uint64_t a2, int a3, int a4)
{
  int v5;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t result;
  unsigned __int8 **v16;
  BOOL v17;
  unsigned __int8 **v18;
  int v19;
  int v20;

  v5 = a3;
  v8 = *a1;
  v9 = (uint64_t)a1[1];
  v10 = a1[4];
  if (*((_DWORD *)v10 + 135))
  {
    if (a3 >= a4)
      goto LABEL_23;
    goto LABEL_3;
  }
  if (a3 > 24)
    goto LABEL_23;
  while (1)
  {
    while (1)
    {
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned __int8 *))(*((_QWORD *)v10 + 5) + 24))(v10);
        if (!(_DWORD)result)
          return result;
        v16 = (unsigned __int8 **)*((_QWORD *)v10 + 5);
        v9 = (uint64_t)(v16[1] - 1);
        v8 = *v16 + 1;
        v13 = **v16;
        if (v13 == 255)
          goto LABEL_16;
        goto LABEL_12;
      }
      --v9;
      v14 = *v8++;
      v13 = v14;
      if (v14 == 255)
        break;
LABEL_12:
      a2 = v13 | (a2 << 8);
      v12 = v5 + 8;
      v17 = v5 < 17;
      v5 += 8;
      if (!v17)
        goto LABEL_24;
    }
    do
    {
LABEL_16:
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned __int8 *))(*((_QWORD *)v10 + 5) + 24))(v10);
        if (!(_DWORD)result)
          return result;
        v18 = (unsigned __int8 **)*((_QWORD *)v10 + 5);
        v8 = *v18;
        v9 = (uint64_t)v18[1];
      }
      --v9;
      v20 = *v8++;
      v19 = v20;
    }
    while (v20 == 255);
    if (v19)
      break;
    a2 = (a2 << 8) | 0xFF;
    v12 = v5 + 8;
    v17 = v5 < 17;
    v5 += 8;
    if (!v17)
      goto LABEL_24;
  }
  *((_DWORD *)v10 + 135) = v19;
  if (v5 < a4)
  {
LABEL_3:
    if (!*(_BYTE *)(*((_QWORD *)v10 + 74) + 60))
    {
      v11 = *(_QWORD *)v10;
      *(_DWORD *)(v11 + 40) = 120;
      (*(void (**)(unsigned __int8 *, uint64_t))(v11 + 8))(v10, 0xFFFFFFFFLL);
      *(_BYTE *)(*((_QWORD *)v10 + 74) + 60) = 1;
    }
    v12 = 25;
    a2 <<= 25 - v5;
    goto LABEL_24;
  }
LABEL_23:
  v12 = v5;
LABEL_24:
  *a1 = v8;
  a1[1] = (unsigned __int8 *)v9;
  a1[2] = (unsigned __int8 *)a2;
  result = 1;
  *((_DWORD *)a1 + 6) = v12;
  return result;
}

uint64_t sub_10038E1E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  if (a3 >= a5)
  {
LABEL_4:
    v8 = a3 - a5;
    v9 = (int)(dword_1003C61D0[a5] & (a2 >> v8));
    v10 = a5;
    if (*(_QWORD *)(a4 + 8 * a5) >= v9)
    {
      v11 = a5;
      *(_QWORD *)(a1 + 16) = a2;
      *(_DWORD *)(a1 + 24) = v8;
      if (a5 < 17)
        return *(unsigned __int8 *)(*(_QWORD *)(a4 + 280) + *(_DWORD *)(a4 + 8 * v11 + 144) + (int)v9 + 17);
    }
    else
    {
      do
      {
        if (v8 <= 0)
        {
          if (!sub_10038E074((unsigned __int8 **)a1, a2, v8, 1))
            return 0xFFFFFFFFLL;
          a2 = *(_QWORD *)(a1 + 16);
          v8 = *(_DWORD *)(a1 + 24);
        }
        v9 = ((unint64_t)a2 >> --v8) & 1 | (2 * v9);
        v11 = v10 + 1;
        v12 = *(_QWORD *)(a4 + 8 + 8 * v10++);
      }
      while (v9 > v12);
      *(_QWORD *)(a1 + 16) = a2;
      *(_DWORD *)(a1 + 24) = v8;
      if ((int)v11 < 17)
        return *(unsigned __int8 *)(*(_QWORD *)(a4 + 280) + *(_DWORD *)(a4 + 8 * v11 + 144) + (int)v9 + 17);
    }
    v13 = *(uint64_t **)(a1 + 32);
    v14 = *v13;
    *(_DWORD *)(v14 + 40) = 121;
    (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v13, 0xFFFFFFFFLL);
    return 0;
  }
  if (sub_10038E074((unsigned __int8 **)a1, a2, a3, a5))
  {
    a2 = *(_QWORD *)(a1 + 16);
    a3 = *(_DWORD *)(a1 + 24);
    goto LABEL_4;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_10038E348(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  int v16;

  v2 = *(int *)(a1 + 524);
  v3 = *(_DWORD *)(a1 + 72);
  v4 = v2 * *(_DWORD *)(a1 + 68);
  if (v4 <= v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003A7E94(*(unsigned int *)(a1 + 48), v2);
    result = sub_1003A7E94(*(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 392) = 0x100000001;
    v8 = 1;
  }
  else if (v4 <= 2 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003A7E94(2 * *(unsigned int *)(a1 + 48), v2);
    result = sub_1003A7E94(2 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 392) = 0x200000002;
    v8 = 2;
  }
  else if (v4 <= 3 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003A7E94(3 * *(unsigned int *)(a1 + 48), v2);
    result = sub_1003A7E94(3 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 392) = 0x300000003;
    v8 = 3;
  }
  else if (v4 <= 4 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003A7E94(4 * *(unsigned int *)(a1 + 48), v2);
    result = sub_1003A7E94(4 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 392) = 0x400000004;
    v8 = 4;
  }
  else if (v4 <= 5 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003A7E94(5 * *(unsigned int *)(a1 + 48), v2);
    result = sub_1003A7E94(5 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 392) = 0x500000005;
    v8 = 5;
  }
  else if (v4 <= 6 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003A7E94(6 * *(unsigned int *)(a1 + 48), v2);
    result = sub_1003A7E94(6 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 392) = 0x600000006;
    v8 = 6;
  }
  else if (v4 <= 7 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003A7E94(7 * *(unsigned int *)(a1 + 48), v2);
    result = sub_1003A7E94(7 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 392) = 0x700000007;
    v8 = 7;
  }
  else if (v4 <= 8 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003A7E94(8 * *(unsigned int *)(a1 + 48), v2);
    result = sub_1003A7E94(8 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 392) = 0x800000008;
    v8 = 8;
  }
  else if (v4 <= 9 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003A7E94(9 * *(unsigned int *)(a1 + 48), v2);
    result = sub_1003A7E94(9 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 392) = 0x900000009;
    v8 = 9;
  }
  else if (v4 <= 10 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003A7E94(10 * *(unsigned int *)(a1 + 48), v2);
    result = sub_1003A7E94(10 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 392) = 0xA0000000ALL;
    v8 = 10;
  }
  else if (v4 <= 11 * v3)
  {
    v8 = 11;
    *(_DWORD *)(a1 + 116) = sub_1003A7E94(11 * *(unsigned int *)(a1 + 48), v2);
    result = sub_1003A7E94(11 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 392) = 0xB0000000BLL;
  }
  else if (v4 <= 12 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003A7E94(12 * *(unsigned int *)(a1 + 48), v2);
    result = sub_1003A7E94(12 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 392) = 0xC0000000CLL;
    v8 = 12;
  }
  else if (v4 <= 13 * v3)
  {
    v8 = 13;
    *(_DWORD *)(a1 + 116) = sub_1003A7E94(13 * *(unsigned int *)(a1 + 48), v2);
    result = sub_1003A7E94(13 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 392) = 0xD0000000DLL;
  }
  else if (v4 <= 14 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003A7E94(14 * *(unsigned int *)(a1 + 48), v2);
    result = sub_1003A7E94(14 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(_QWORD *)(a1 + 392) = 0xE0000000ELL;
    v8 = 14;
  }
  else
  {
    v5 = 15 * v3;
    v6 = *(unsigned int *)(a1 + 48);
    if (v4 <= v5)
    {
      *(_DWORD *)(a1 + 116) = sub_1003A7E94(15 * v6, v2);
      result = sub_1003A7E94(15 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
      *(_DWORD *)(a1 + 120) = result;
      *(_QWORD *)(a1 + 392) = 0xF0000000FLL;
      v8 = 15;
    }
    else
    {
      *(_DWORD *)(a1 + 116) = sub_1003A7E94(16 * v6, v2);
      result = sub_1003A7E94(16 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
      *(_DWORD *)(a1 + 120) = result;
      *(_QWORD *)(a1 + 392) = 0x1000000010;
      v8 = 16;
    }
  }
  v9 = *(unsigned int *)(a1 + 56);
  if ((int)v9 >= 1)
  {
    v10 = *(_QWORD *)(a1 + 288);
    if ((_DWORD)v9 == 1)
    {
      LODWORD(v11) = 0;
      v12 = *(_QWORD *)(a1 + 288);
LABEL_38:
      v15 = (int *)(v12 + 40);
      v16 = v9 - v11;
      do
      {
        *(v15 - 1) = v8;
        *v15 = v8;
        v15 += 24;
        --v16;
      }
      while (v16);
      return result;
    }
    v11 = v9 & 0xFFFFFFFE;
    v12 = v10 + 96 * v11;
    v13 = (int *)(v10 + 136);
    v14 = v11;
    do
    {
      *(v13 - 1) = v8;
      *v13 = v8;
      *(v13 - 25) = v8;
      *(v13 - 24) = v8;
      v13 += 48;
      v14 -= 2;
    }
    while (v14);
    if (v11 != v9)
      goto LABEL_38;
  }
  return result;
}

uint64_t sub_10038E7F0(uint64_t a1)
{
  uint64_t result;

  result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 576) = result;
  *(_QWORD *)result = sub_10038E858;
  *(_QWORD *)(result + 8) = sub_10038EE38;
  *(_QWORD *)(result + 16) = sub_10038EE90;
  *(_QWORD *)(result + 24) = sub_10038F130;
  *(_WORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 1;
  return result;
}

uint64_t sub_10038E858(int32x2_t *a1)
{
  int32x2_t v1;
  uint64_t v2;
  uint64_t v5;
  int32x2_t v6;
  int32x2_t v7;
  int v8;
  __int32 v9;
  int v10;
  int32x2_t v11;
  int32x2_t v12;
  int v13;
  int32x2_t *v14;
  int32x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int v18;
  __int32 v19;
  uint64_t v20;
  __int32 v21;
  __int32 v22;
  int v23;
  int32x2_t v24;
  __int32 v25;
  __int32 v26;

  v1 = a1[72];
  v2 = 2;
  if (*(_BYTE *)(*(_QWORD *)&v1 + 33))
    return v2;
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)&a1[73] + 8))();
  if ((_DWORD)v5 != 1)
  {
LABEL_4:
    if ((_DWORD)v5 != 2)
      return v5;
    *(_BYTE *)(*(_QWORD *)&v1 + 33) = 1;
    if (*(_DWORD *)(*(_QWORD *)&v1 + 40))
    {
      if (*(_BYTE *)(*(_QWORD *)&a1[73] + 25))
      {
        v6 = *a1;
        *(_DWORD *)(*(_QWORD *)&v6 + 40) = 62;
        (**(void (***)(int32x2_t *))&v6)(a1);
      }
    }
    else
    {
      v26 = a1[19].i32[1];
      if (a1[20].i32[1] > v26)
        a1[20].i32[1] = v26;
    }
    return 2;
  }
  while (1)
  {
    while (1)
    {
      v8 = *(_DWORD *)(*(_QWORD *)&v1 + 40);
      if (!v8)
        break;
      if (v8 != 1)
      {
        if (a1[52].i32[0])
          goto LABEL_73;
        goto LABEL_43;
      }
      if (a1[6].i32[1] <= 0xFFDCu && a1[6].i32[0] < 0xFFDDu)
      {
        v9 = a1[35].i32[0];
        if ((v9 - 13) > 0xFFFFFFFA)
        {
LABEL_19:
          v10 = a1[7].i32[0];
          if (v10 < 11)
            goto LABEL_26;
          goto LABEL_20;
        }
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 40) = 0xFFDC0000002ALL;
        (**(void (***)(int32x2_t *))a1)(a1);
        v9 = a1[35].i32[0];
        if ((v9 - 13) > 0xFFFFFFFA)
          goto LABEL_19;
      }
      v12 = *a1;
      *(_DWORD *)(*(_QWORD *)&v12 + 40) = 16;
      *(_DWORD *)(*(_QWORD *)&v12 + 44) = v9;
      (**(void (***)(int32x2_t *))a1)(a1);
      v10 = a1[7].i32[0];
      if (v10 < 11)
      {
LABEL_26:
        a1[48] = (int32x2_t)0x100000001;
        if (v10 < 1)
          goto LABEL_32;
        goto LABEL_27;
      }
LABEL_20:
      v11 = *a1;
      *(_DWORD *)(*(_QWORD *)&v11 + 40) = 27;
      *(_DWORD *)(*(_QWORD *)&v11 + 44) = v10;
      *(_DWORD *)(*(_QWORD *)a1 + 48) = 10;
      (**(void (***)(int32x2_t *))a1)(a1);
      v10 = a1[7].i32[0];
      a1[48] = (int32x2_t)0x100000001;
      if (v10 < 1)
        goto LABEL_32;
LABEL_27:
      v13 = 0;
      v14 = (int32x2_t *)(*(_QWORD *)&a1[36] + 8);
      v15 = (int32x2_t)0x100000001;
      do
      {
        while ((v14->i32[0] - 5) < 0xFFFFFFFC || (v14->i32[1] - 5) <= 0xFFFFFFFB)
        {
          v16 = *a1;
          *(_DWORD *)(*(_QWORD *)&v16 + 40) = 19;
          (**(void (***)(int32x2_t *))&v16)(a1);
          v17 = *v14;
          v14 += 12;
          v10 = a1[7].i32[0];
          v15 = vmax_s32(a1[48], v17);
          a1[48] = v15;
          if (++v13 >= v10)
            goto LABEL_32;
        }
        v15 = vmax_s32(v15, *v14);
        a1[48] = v15;
        ++v13;
        v14 += 12;
      }
      while (v13 < v10);
LABEL_32:
      if (a1[37].i8[0] || a1[37].i8[1] && a1[52].i32[0])
      {
LABEL_33:
        v18 = 8;
LABEL_34:
        a1[65].i32[1] = v18;
        a1[66] = (int32x2_t)&unk_1003C68A0;
        a1[67].i32[0] = 63;
        goto LABEL_35;
      }
      v23 = a1[64].i32[0];
      if (v23 > 119)
      {
        if (v23 > 194)
        {
          switch(v23)
          {
            case 195:
              v18 = 14;
              goto LABEL_34;
            case 224:
              v18 = 15;
              goto LABEL_34;
            case 255:
              v18 = 16;
              goto LABEL_34;
          }
        }
        else
        {
          switch(v23)
          {
            case 120:
              v18 = 11;
              goto LABEL_34;
            case 143:
              v18 = 12;
              goto LABEL_34;
            case 168:
              v18 = 13;
              goto LABEL_34;
          }
        }
LABEL_71:
        v24 = *a1;
        v25 = a1[63].i32[1];
        *(_DWORD *)(*(_QWORD *)&v24 + 40) = 17;
        *(_DWORD *)(*(_QWORD *)&v24 + 44) = v25;
        *(_DWORD *)(*(_QWORD *)a1 + 48) = a1[64].i32[0];
        *(_DWORD *)(*(_QWORD *)a1 + 52) = a1[64].i32[1];
        *(_DWORD *)(*(_QWORD *)a1 + 56) = a1[65].i32[0];
        (**(void (***)(int32x2_t *))a1)(a1);
        v18 = a1[65].i32[1];
        v10 = a1[7].i32[0];
      }
      else
      {
        switch(v23)
        {
          case 0:
            v18 = 1;
            a1[65].i32[1] = 1;
            a1[66] = (int32x2_t)&unk_1003C68A0;
            a1[67].i32[0] = 0;
            break;
          case 3:
            v18 = 2;
            a1[65].i32[1] = 2;
            a1[66] = (int32x2_t)&unk_1003C6D3C;
            a1[67].i32[0] = 3;
            break;
          case 8:
            v18 = 3;
            a1[65].i32[1] = 3;
            a1[66] = (int32x2_t)&unk_1003C6CD8;
            a1[67].i32[0] = 8;
            break;
          case 15:
            v18 = 4;
            a1[65].i32[1] = 4;
            a1[66] = (int32x2_t)&unk_1003C6C58;
            a1[67].i32[0] = 15;
            break;
          case 24:
            v18 = 5;
            a1[65].i32[1] = 5;
            a1[66] = (int32x2_t)&unk_1003C6BB4;
            a1[67].i32[0] = 24;
            break;
          case 35:
            v18 = 6;
            a1[65].i32[1] = 6;
            a1[66] = (int32x2_t)&unk_1003C6AE4;
            a1[67].i32[0] = 35;
            break;
          case 48:
            v18 = 7;
            a1[65].i32[1] = 7;
            a1[66] = (int32x2_t)&unk_1003C69E0;
            a1[67].i32[0] = 48;
            break;
          case 63:
            goto LABEL_33;
          case 80:
            v18 = 9;
            goto LABEL_34;
          case 99:
            v18 = 10;
            goto LABEL_34;
          default:
            goto LABEL_71;
        }
      }
LABEL_35:
      a1[49].i32[0] = v18;
      a1[49].i32[1] = v18;
      if (v10 >= 1)
      {
        v19 = 0;
        v20 = *(_QWORD *)&a1[36] + 40;
        do
        {
          v21 = a1[65].i32[1];
          *(_DWORD *)(v20 - 4) = v21;
          *(_DWORD *)v20 = v21;
          *(_DWORD *)(v20 - 12) = sub_1003A7E94(*(int *)(v20 - 32) * (unint64_t)a1[6].u32[0], a1[48].i32[0] * (uint64_t)v21);
          *(_DWORD *)(v20 - 8) = sub_1003A7E94(*(int *)(v20 - 28) * (unint64_t)a1[6].u32[1], a1[65].i32[1] * (uint64_t)a1[48].i32[1]);
          *(_DWORD *)(v20 + 4) = sub_1003A7E94(*(int *)(v20 - 32) * (unint64_t)a1[6].u32[0], a1[48].i32[0]);
          *(_DWORD *)(v20 + 8) = sub_1003A7E94(*(int *)(v20 - 28) * (unint64_t)a1[6].u32[1], a1[48].i32[1]);
          *(_BYTE *)(v20 + 12) = 1;
          *(_QWORD *)(v20 + 40) = 0;
          ++v19;
          v20 += 96;
        }
        while (v19 < a1[7].i32[0]);
        v18 = a1[65].i32[1];
      }
      a1[50].i32[0] = sub_1003A7E94(a1[6].u32[1], a1[48].i32[1] * (uint64_t)v18);
      v22 = a1[52].i32[0];
      if (v22 >= a1[7].i32[0])
      {
        *(_BYTE *)(*(_QWORD *)&a1[72] + 32) = a1[37].i8[1] != 0;
        if (v22)
        {
LABEL_73:
          *(_DWORD *)(*(_QWORD *)&v1 + 40) = 0;
          return 1;
        }
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)&a1[72] + 32) = 1;
        if (v22)
          goto LABEL_73;
      }
LABEL_43:
      *(_DWORD *)(*(_QWORD *)&v1 + 40) = 2;
      v5 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)&a1[73] + 8))(a1);
      if ((_DWORD)v5 != 1)
        goto LABEL_4;
    }
    if (!*(_BYTE *)(*(_QWORD *)&v1 + 32))
      break;
    if (a1[52].i32[0])
      goto LABEL_77;
LABEL_10:
    v5 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)&a1[73] + 8))(a1);
    if ((_DWORD)v5 != 1)
      goto LABEL_4;
  }
  v7 = *a1;
  *(_DWORD *)(*(_QWORD *)&v7 + 40) = 36;
  (**(void (***)(int32x2_t *))&v7)(a1);
  if (!a1[52].i32[0])
    goto LABEL_10;
LABEL_77:
  sub_10038EE90((uint64_t *)a1);
  return 1;
}

uint64_t sub_10038EE38(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)v2 = sub_10038E858;
  *(_WORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 40) = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  result = (**(uint64_t (***)(uint64_t))(a1 + 584))(a1);
  *(_QWORD *)(a1 + 176) = 0;
  return result;
}

uint64_t sub_10038EE90(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  void (**v8)(_QWORD);
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(_QWORD);
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;

  v2 = *((_DWORD *)a1 + 104);
  if (v2 == 1)
  {
    v3 = a1[53];
    v4 = *(_DWORD *)(v3 + 32);
    *((_DWORD *)a1 + 114) = *(_DWORD *)(v3 + 28);
    *((_DWORD *)a1 + 115) = v4;
    *(_QWORD *)(v3 + 56) = 0x100000001;
    LODWORD(v5) = 1;
    v6 = *(_DWORD *)(v3 + 36);
    *(_DWORD *)(v3 + 64) = 1;
    *(_DWORD *)(v3 + 68) = v6;
    v7 = v4 % *(_DWORD *)(v3 + 12);
    if (!v7)
      v7 = *(_DWORD *)(v3 + 12);
    *(_DWORD *)(v3 + 72) = 1;
    *(_DWORD *)(v3 + 76) = v7;
    a1[58] = 1;
LABEL_21:
    v20 = 0;
    do
    {
      v29 = a1[v20 + 53];
      if (!*(_QWORD *)(v29 + 80))
      {
        v30 = *(unsigned int *)(v29 + 16);
        if (v30 > 3 || !a1[v30 + 23])
        {
          v21 = (void (**)(_QWORD))*a1;
          *((_DWORD *)v21 + 10) = 54;
          *((_DWORD *)v21 + 11) = v30;
          (*(void (**)(uint64_t *))*a1)(a1);
        }
        v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 130);
        v5 = a1[(int)v30 + 23];
        *(_OWORD *)v22 = *(_OWORD *)v5;
        v23 = *(_OWORD *)(v5 + 16);
        v24 = *(_OWORD *)(v5 + 32);
        v25 = *(_OWORD *)(v5 + 64);
        *(_OWORD *)(v22 + 48) = *(_OWORD *)(v5 + 48);
        *(_OWORD *)(v22 + 64) = v25;
        *(_OWORD *)(v22 + 16) = v23;
        *(_OWORD *)(v22 + 32) = v24;
        v26 = *(_OWORD *)(v5 + 80);
        v27 = *(_OWORD *)(v5 + 96);
        v28 = *(_OWORD *)(v5 + 112);
        *(_WORD *)(v22 + 128) = *(_WORD *)(v5 + 128);
        *(_OWORD *)(v22 + 96) = v27;
        *(_OWORD *)(v22 + 112) = v28;
        *(_OWORD *)(v22 + 80) = v26;
        *(_QWORD *)(v29 + 80) = v22;
        LODWORD(v5) = *((_DWORD *)a1 + 104);
      }
      ++v20;
    }
    while (v20 < (int)v5);
    goto LABEL_29;
  }
  if ((v2 - 5) <= 0xFFFFFFFB)
  {
    v8 = (void (**)(_QWORD))*a1;
    *((_DWORD *)v8 + 10) = 27;
    *((_DWORD *)v8 + 11) = v2;
    *(_DWORD *)(*a1 + 48) = 4;
    (*(void (**)(uint64_t *))*a1)(a1);
  }
  *((_DWORD *)a1 + 114) = sub_1003A7E94(*((unsigned int *)a1 + 12), *((int *)a1 + 131) * (uint64_t)*((int *)a1 + 96));
  *((_DWORD *)a1 + 115) = sub_1003A7E94(*((unsigned int *)a1 + 13), *((int *)a1 + 131) * (uint64_t)*((int *)a1 + 97));
  *((_DWORD *)a1 + 116) = 0;
  if (*((int *)a1 + 104) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = (_DWORD *)a1[v9 + 53];
      v11 = v10[2];
      v12 = v10[3];
      v13 = v12 * v11;
      v14 = v10[8];
      v15 = v10[9] * v11;
      v10[16] = v12 * v11;
      v10[17] = v15;
      v16 = v10[7] % v11;
      v10[14] = v11;
      v10[15] = v12;
      if (v16)
        v11 = v16;
      if (v14 % v12)
        v12 = v14 % v12;
      v10[18] = v11;
      v10[19] = v12;
      if (*((_DWORD *)a1 + 116) + v13 >= 11)
      {
        v17 = *a1;
        *(_DWORD *)(v17 + 40) = 14;
        (*(void (**)(uint64_t *))v17)(a1);
      }
      if (v13 >= 1)
      {
        v18 = v13 + 1;
        do
        {
          v19 = *((int *)a1 + 116);
          *((_DWORD *)a1 + 116) = v19 + 1;
          *((_DWORD *)a1 + v19 + 117) = v9;
          --v18;
        }
        while (v18 > 1);
      }
      ++v9;
      v5 = *((int *)a1 + 104);
    }
    while (v9 < v5);
    if ((int)v5 >= 1)
      goto LABEL_21;
  }
LABEL_29:
  (*(void (**)(uint64_t *))a1[74])(a1);
  result = (*(uint64_t (**)(uint64_t *))a1[70])(a1);
  *(_QWORD *)a1[72] = *(_QWORD *)(a1[70] + 8);
  return result;
}

uint64_t sub_10038F130(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 592) + 16))();
  **(_QWORD **)(a1 + 576) = sub_10038E858;
  return result;
}

uint64_t (**sub_10038F168(uint64_t *a1, int a2))(uint64_t result, int a2)
{
  uint64_t (**result)(uint64_t, int);
  uint64_t (**v5)(uint64_t, int);
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t (**v17)(uint64_t, int);
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)(uint64_t, int);
  _DWORD *v21;

  result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(void))a1[1])();
  v5 = result;
  a1[69] = (uint64_t)result;
  *result = sub_10038F338;
  if (a2)
  {
    v6 = *a1;
    *(_DWORD *)(v6 + 40) = 3;
    result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *))v6)(a1);
  }
  v7 = *((_DWORD *)a1 + 99);
  if (!*(_BYTE *)(a1[76] + 16))
  {
    if (*((int *)a1 + 14) < 1)
      return result;
    goto LABEL_12;
  }
  if (v7 <= 1)
  {
    v8 = *a1;
    *(_DWORD *)(v8 + 40) = 48;
    (*(void (**)(uint64_t *))v8)(a1);
    v7 = *((_DWORD *)a1 + 99);
  }
  v9 = a1[69];
  result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 16 * *((int *)a1 + 14));
  v10 = *((int *)a1 + 14);
  *(_QWORD *)(v9 + 104) = result;
  *(_QWORD *)(v9 + 112) = &result[v10];
  if ((int)v10 >= 1)
  {
    v11 = 0;
    v12 = v7 + 4;
    v13 = (int *)(a1[36] + 40);
    do
    {
      v14 = *(v13 - 7);
      v15 = *v13;
      v13 += 24;
      v16 = v15 * v14 / *((_DWORD *)a1 + 99);
      result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 16 * v16 * v12);
      v17 = &result[v16];
      v18 = 8 * v11;
      *(_QWORD *)(*(_QWORD *)(v9 + 104) + v18) = v17;
      *(_QWORD *)(*(_QWORD *)(v9 + 112) + v18) = &v17[v16 * v12];
      ++v11;
      v10 = *((int *)a1 + 14);
    }
    while (v11 < v10);
  }
  v7 = *((_DWORD *)a1 + 99) + 2;
  if ((int)v10 >= 1)
  {
LABEL_12:
    v19 = 0;
    v20 = v5 + 2;
    v21 = (_DWORD *)(a1[36] + 40);
    do
    {
      result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, _QWORD))(a1[1] + 16))(a1, 1, (*(v21 - 1) * *(v21 - 3)), (*v21 * *(v21 - 7) / *((_DWORD *)a1 + 99) * v7));
      v20[v19++] = (uint64_t (*)(uint64_t, int))result;
      v21 += 24;
    }
    while (v19 < *((int *)a1 + 14));
  }
  return result;
}

uint64_t sub_10038F338(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  _OWORD *v42;
  __int128 v43;
  _OWORD *v44;
  uint64_t v45;

  v2 = *(_QWORD *)(result + 552);
  if (a2 == 2)
  {
    *(_QWORD *)(v2 + 8) = sub_10038FAF8;
  }
  else if (a2)
  {
    v45 = *(_QWORD *)result;
    *(_DWORD *)(v45 + 40) = 3;
    return (*(uint64_t (**)(uint64_t))v45)(result);
  }
  else if (*(_BYTE *)(*(_QWORD *)(result + 608) + 16))
  {
    *(_QWORD *)(v2 + 8) = sub_10038F600;
    v3 = *(unsigned int *)(result + 56);
    if ((int)v3 >= 1)
    {
      v4 = 0;
      v5 = *(_DWORD *)(result + 396);
      v6 = *(_QWORD *)(result + 288);
      while (1)
      {
        v7 = *(_DWORD *)(v6 + 40) * *(_DWORD *)(v6 + 12) / v5;
        v8 = *(_QWORD **)(*(_QWORD *)(v2 + 104) + 8 * v4);
        v9 = *(_QWORD *)(*(_QWORD *)(v2 + 112) + 8 * v4);
        result = *(_QWORD *)(v2 + 8 * v4 + 16);
        v10 = (v7 * (v5 + 2));
        if ((int)v10 < 1)
          goto LABEL_12;
        if (v10 < 0xA)
          break;
        v11 = 0;
        if ((unint64_t)v8 - v9 < 0x20)
          goto LABEL_10;
        if ((unint64_t)(v9 - result) < 0x20)
          goto LABEL_10;
        if ((unint64_t)v8 - result < 0x20)
          goto LABEL_10;
        v11 = v10 & 0x7FFFFFFC;
        v27 = (__int128 *)(result + 16);
        v28 = (_OWORD *)(v9 + 16);
        v29 = v8 + 2;
        v30 = v10 & 0xFFFFFFFC;
        do
        {
          v31 = *(v27 - 1);
          v32 = *v27;
          *(v28 - 1) = v31;
          *v28 = v32;
          *(v29 - 1) = v31;
          *v29 = v32;
          v27 += 2;
          v28 += 2;
          v29 += 2;
          v30 -= 4;
        }
        while (v30);
        if (v11 != v10)
          goto LABEL_10;
LABEL_12:
        if (v7 >= 1)
        {
          LODWORD(v18) = 2 * v7;
          v19 = v7 * v5;
          v20 = v7 * (v5 - 2);
          if (2 * v7 <= 1)
            v18 = 1;
          else
            v18 = v18;
          if (v18 < 0x1C)
          {
            v21 = 0;
            goto LABEL_18;
          }
          v21 = 0;
          v33 = 8 * v19;
          v34 = 8 * v19 + v9;
          v35 = 8 * v20;
          v36 = 8 * v20 + result;
          if ((unint64_t)(v34 - v36) < 0x20)
            goto LABEL_18;
          if ((unint64_t)(v34 - (v33 + result)) < 0x20)
            goto LABEL_18;
          v37 = v35 + v9;
          if ((unint64_t)(v36 - (v35 + v9)) < 0x20)
            goto LABEL_18;
          if ((unint64_t)(v37 - (v33 + result)) < 0x20)
            goto LABEL_18;
          if ((unint64_t)(v34 - v37) < 0x20)
            goto LABEL_18;
          v21 = v18 & 0x7FFFFFFC;
          v38 = result + 16;
          v39 = v9;
          v40 = v21;
          do
          {
            v41 = *(_OWORD *)(v38 + 8 * v19);
            v42 = (_OWORD *)(v39 + v35);
            *v42 = *(_OWORD *)(v38 + v33 - 16);
            v42[1] = v41;
            v43 = *(_OWORD *)(v38 + 8 * v20);
            v44 = (_OWORD *)(v39 + v33);
            *v44 = *(_OWORD *)(v38 + v35 - 16);
            v44[1] = v43;
            v39 += 32;
            v38 += 32;
            v40 -= 4;
          }
          while (v40);
          if (v21 != v18)
          {
LABEL_18:
            v22 = v18 - v21;
            v23 = v21 + v20;
            v24 = v21 + v19;
            do
            {
              *(_QWORD *)(v9 + 8 * v23) = *(_QWORD *)(result + 8 * v24);
              *(_QWORD *)(v9 + 8 * v24) = *(_QWORD *)(result + 8 * v23);
              result += 8;
              v9 += 8;
              --v22;
            }
            while (v22);
          }
          v25 = -(uint64_t)v7;
          do
            v8[v25] = *v8;
          while (!__CFADD__(v25++, 1));
        }
        ++v4;
        v6 += 96;
        if (v4 == v3)
          goto LABEL_42;
      }
      v11 = 0;
LABEL_10:
      v12 = v10 - v11;
      v13 = 8 * v11;
      v14 = &v8[v11];
      v15 = (_QWORD *)(v9 + v13);
      v16 = (uint64_t *)(result + v13);
      do
      {
        v17 = *v16++;
        *v15++ = v17;
        *v14++ = v17;
        --v12;
      }
      while (v12);
      goto LABEL_12;
    }
LABEL_42:
    *(_QWORD *)(v2 + 120) = 0;
    *(_DWORD *)(v2 + 132) = 0;
    *(_BYTE *)(v2 + 96) = 0;
    *(_DWORD *)(v2 + 100) = 0;
  }
  else
  {
    *(_QWORD *)(v2 + 8) = sub_10038FA54;
    *(_BYTE *)(v2 + 96) = 0;
    *(_DWORD *)(v2 + 100) = 0;
  }
  return result;
}

uint64_t sub_10038F600(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v54;
  _OWORD *v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;

  v7 = result;
  v8 = *(_QWORD *)(result + 552);
  if (*(_BYTE *)(v8 + 96))
  {
    v9 = *(_DWORD *)(v8 + 124);
    if (!v9)
      goto LABEL_10;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(result + 560) + 24))(result, *(_QWORD *)(v8 + 8 * *(int *)(v8 + 120) + 104));
    if (!(_DWORD)result)
      return result;
    *(_BYTE *)(v8 + 96) = 1;
    ++*(_DWORD *)(v8 + 132);
    v9 = *(_DWORD *)(v8 + 124);
    if (!v9)
      goto LABEL_10;
  }
  if (v9 == 1)
    goto LABEL_27;
  if (v9 != 2)
    return result;
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _DWORD *, uint64_t))(*(_QWORD *)(v7 + 568) + 8))(v7, *(_QWORD *)(v8 + 8 * *(int *)(v8 + 120) + 104), v8 + 100, *(unsigned int *)(v8 + 128), a2, a3, a4);
  if (*(_DWORD *)(v8 + 100) < *(_DWORD *)(v8 + 128))
    return result;
  *(_DWORD *)(v8 + 124) = 0;
  if (*a3 >= a4)
    return result;
LABEL_10:
  *(_DWORD *)(v8 + 100) = 0;
  v10 = *(_DWORD *)(v7 + 396);
  *(_DWORD *)(v8 + 128) = v10 - 1;
  if (*(_DWORD *)(v8 + 132) == *(_DWORD *)(v7 + 400))
  {
    v11 = *(unsigned int *)(v7 + 56);
    if ((int)v11 >= 1)
    {
      v12 = 0;
      v13 = *(_DWORD **)(v7 + 288);
      v14 = *(_QWORD *)(v7 + 552);
      v15 = (_QWORD *)(v14 + 8 * *(int *)(v14 + 120) + 104);
      do
      {
        v16 = v13[10] * v13[3];
        v17 = v16 / v10;
        v18 = v13[12] % v16;
        if (!v18)
          v18 = v13[10] * v13[3];
        if (v12)
        {
          if (v17 >= 1)
            goto LABEL_20;
        }
        else
        {
          *(_DWORD *)(v14 + 128) = (v18 - 1) / v17 + 1;
          if (v17 >= 1)
          {
LABEL_20:
            v19 = *(_QWORD *)(*v15 + 8 * v12);
            LODWORD(v20) = 2 * v17;
            v21 = v18 - 1;
            if ((int)v20 <= 1)
              v20 = 1;
            else
              v20 = v20;
            v22 = (_QWORD *)(v19 + 8 * v18);
            do
            {
              *v22++ = *(_QWORD *)(v19 + 8 * v21);
              --v20;
            }
            while (v20);
          }
        }
        ++v12;
        v13 += 24;
      }
      while (v12 != v11);
    }
  }
  *(_DWORD *)(v8 + 124) = 1;
LABEL_27:
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _DWORD *, uint64_t))(*(_QWORD *)(v7 + 568) + 8))(v7, *(_QWORD *)(v8 + 8 * *(int *)(v8 + 120) + 104), v8 + 100, *(unsigned int *)(v8 + 128), a2, a3, a4);
  if (*(_DWORD *)(v8 + 100) >= *(_DWORD *)(v8 + 128))
  {
    v23 = *(_DWORD *)(v7 + 396);
    if (*(_DWORD *)(v8 + 132) == 1)
    {
      v24 = *(unsigned int *)(v7 + 56);
      if ((int)v24 >= 1)
      {
        v25 = 0;
        v26 = *(_QWORD *)(v7 + 288);
        v27 = *(_QWORD *)(v7 + 552);
        v28 = v23 + 1;
        v29 = v23 + 2;
        v68 = v23;
        v66 = v27;
        v67 = v24;
        v64 = v23 + 2;
        v65 = v23 + 1;
        do
        {
          v30 = (*(_DWORD *)(v26 + 40) * *(_DWORD *)(v26 + 12) / v23);
          if ((int)v30 >= 1)
          {
            v31 = *(_QWORD *)(*(_QWORD *)(v27 + 104) + 8 * v25);
            v32 = *(_QWORD *)(*(_QWORD *)(v27 + 112) + 8 * v25);
            v33 = 8 * (int)v30 * v29;
            v34 = 8 * v30;
            result = 8 * (int)v30 * v28;
            if (v30 >= 0x32)
            {
              if (v33 + v31 - (v32 - v34) >= 0x10
                && (unint64_t)(v32 - (v31 - v34)) >= 0x10
                && (unint64_t)(result + v32 - (v31 - v34)) >= 0x10
                && v33 + v32 - (v31 - v34) >= 0x10
                && (unint64_t)(v32 - v31) >= 0x10
                && v33 + v34 >= 0x10
                && (unint64_t)(-8 * v30 - result) >= 0x10
                && v33 + v34 >= 0x10
                && (unint64_t)(v32 - v34 - (result + v31)) >= 0x10
                && (unint64_t)(-8 * v30 - result) >= 0x10
                && (unint64_t)(v31 - (v32 - v34)) >= 0x10
                && (unint64_t)(v32 - v31) >= 0x10
                && v33 - result >= 0x10
                && v33 + v31 - (result + v32) >= 0x10
                && v33 >= 0x10
                && v32 - (v33 + v31) >= 0x10
                && v33 + v32 - (result + v31) >= 0x10
                && v33 - result >= 0x10
                && v33 + v32 - v31 >= 0x10)
              {
                v35 = v30 & 0xFFFFFFFE;
                v54 = v35;
                v55 = *(_OWORD **)(*(_QWORD *)(v27 + 104) + 8 * v25);
                v56 = *(_OWORD **)(*(_QWORD *)(v27 + 112) + 8 * v25);
                do
                {
                  *(_OWORD *)((char *)v55 - 8 * v30) = *(_OWORD *)((char *)v55 + result);
                  *(_OWORD *)((char *)v56 - 8 * v30) = *(_OWORD *)((char *)v56 + result);
                  *(_OWORD *)((char *)v55 + 8 * (int)v30 * v29) = *v55;
                  *(_OWORD *)((char *)v56 + 8 * (int)v30 * v29) = *v56;
                  ++v56;
                  ++v55;
                  v54 -= 2;
                }
                while (v54);
                v23 = v68;
                v27 = v66;
                v24 = v67;
                v29 = v64;
                v28 = v65;
                if (v35 == v30)
                  goto LABEL_31;
              }
              else
              {
                v35 = 0;
                v23 = v68;
                v27 = v66;
                v24 = v67;
                v29 = v64;
                v28 = v65;
              }
            }
            else
            {
              v35 = 0;
            }
            v57 = v32 + v33;
            v58 = v31 + v33;
            v59 = v32 - v34;
            v60 = v31 - v34;
            v61 = v32 + result;
            result += v31;
            do
            {
              v62 = 8 * v35;
              *(_QWORD *)(v60 + v62) = *(_QWORD *)(result + 8 * v35);
              *(_QWORD *)(v59 + v62) = *(_QWORD *)(v61 + 8 * v35);
              *(_QWORD *)(v58 + v62) = *(_QWORD *)(v31 + 8 * v35);
              *(_QWORD *)(v57 + v62) = *(_QWORD *)(v32 + 8 * v35++);
            }
            while (v30 != v35);
          }
LABEL_31:
          ++v25;
          v26 += 96;
        }
        while (v25 != v24);
      }
    }
    v63 = *(_DWORD *)(v8 + 120) ^ 1;
    *(_BYTE *)(v8 + 96) = 0;
    *(_DWORD *)(v8 + 100) = v23 + 1;
    *(_DWORD *)(v8 + 120) = v63;
    *(_DWORD *)(v8 + 124) = 2;
    *(_DWORD *)(v8 + 128) = v23 + 2;
  }
  return result;
}

uint64_t sub_10038FA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  unsigned int v10;

  v8 = *(_QWORD *)(a1 + 552);
  if (!*(_BYTE *)(v8 + 96))
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 560) + 24))(a1, v8 + 16);
    if (!(_DWORD)result)
      return result;
    *(_BYTE *)(v8 + 96) = 1;
  }
  v10 = *(_DWORD *)(a1 + 396);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 568) + 8))(a1, v8 + 16, v8 + 100, v10, a2, a3, a4);
  if (*(_DWORD *)(v8 + 100) >= v10)
  {
    *(_BYTE *)(v8 + 96) = 0;
    *(_DWORD *)(v8 + 100) = 0;
  }
  return result;
}

uint64_t sub_10038FAF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 568) + 8))();
}

uint64_t sub_10038FB1C(_DWORD *a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1[135];
  v5 = *(_QWORD *)a1;
  *(_DWORD *)(v5 + 40) = 124;
  *(_DWORD *)(v5 + 44) = v4;
  *(_DWORD *)(*(_QWORD *)a1 + 48) = a2;
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 8))(a1, 0xFFFFFFFFLL);
  if (v4 < 192)
  {
LABEL_7:
    while (1)
    {
      v6 = *(_QWORD *)a1;
      *(_DWORD *)(v6 + 40) = 99;
      *(_DWORD *)(v6 + 44) = v4;
      *(_DWORD *)(*(_QWORD *)a1 + 48) = 2;
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 8))(a1, 4);
      if (!sub_10038FC98(a1))
        return 0;
      v4 = a1[135];
      if (v4 >= 192)
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    if ((v4 - 216) < 0xFFFFFFF8
      || v4 == (((_BYTE)a2 + 1) & 7 | 0xD0)
      || v4 == (((_BYTE)a2 + 2) & 7 | 0xD0))
    {
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(v8 + 40) = 99;
      *(_DWORD *)(v8 + 44) = v4;
      *(_DWORD *)(*(_QWORD *)a1 + 48) = 3;
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 8))(a1, 4);
      return 1;
    }
    else
    {
      if (v4 == (((_BYTE)a2 - 1) & 7 | 0xD0) || v4 == ((a2 + 6) & 7 | 0xD0))
        goto LABEL_7;
      v9 = *(_QWORD *)a1;
      *(_DWORD *)(v9 + 40) = 99;
      *(_DWORD *)(v9 + 44) = v4;
      v7 = 1;
      *(_DWORD *)(*(_QWORD *)a1 + 48) = 1;
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 8))(a1, 4);
      a1[135] = 0;
    }
  }
  return v7;
}

uint64_t sub_10038FC98(_QWORD *a1)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  uint64_t i;
  int v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  v2 = (unsigned __int8 **)a1[5];
  v3 = *v2;
  for (i = (uint64_t)v2[1]; i; v2[1] = (unsigned __int8 *)i)
  {
LABEL_2:
    v5 = *v3++;
    --i;
    if (v5 == 255)
      goto LABEL_8;
LABEL_3:
    ++*(_DWORD *)(a1[73] + 32);
    *v2 = v3;
  }
  while (1)
  {
    result = ((uint64_t (*)(_QWORD *))v2[3])(a1);
    if (!(_DWORD)result)
      return result;
    v3 = *v2 + 1;
    i = (uint64_t)(v2[1] - 1);
    if (**v2 != 255)
      goto LABEL_3;
    do
    {
LABEL_8:
      if (!i)
      {
        result = ((uint64_t (*)(_QWORD *))v2[3])(a1);
        if (!(_DWORD)result)
          return result;
        v3 = *v2;
        i = (uint64_t)v2[1];
      }
      --i;
      v8 = *v3++;
      v7 = v8;
    }
    while (v8 == 255);
    if (v7)
    {
      v9 = *(_DWORD *)(a1[73] + 32);
      if (v9)
      {
        v10 = *a1;
        *(_DWORD *)(v10 + 40) = 119;
        *(_DWORD *)(v10 + 44) = v9;
        *(_DWORD *)(*a1 + 48) = v7;
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
        *(_DWORD *)(a1[73] + 32) = 0;
      }
      *((_DWORD *)a1 + 135) = v7;
      result = 1;
      *v2 = v3;
      v2[1] = (unsigned __int8 *)i;
      return result;
    }
    *(_DWORD *)(a1[73] + 32) += 2;
    *v2 = v3;
    v2[1] = (unsigned __int8 *)i;
    if (i)
      goto LABEL_2;
  }
}

double sub_10038FDB4(uint64_t a1)
{
  uint64_t v2;
  double result;
  uint64_t v4;

  v2 = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 584) = v2;
  *(_QWORD *)v2 = sub_10038FE70;
  *(_QWORD *)(v2 + 8) = sub_10038FE90;
  *(_QWORD *)(v2 + 16) = sub_100391A4C;
  *(_QWORD *)(v2 + 40) = sub_100391AFC;
  *(_DWORD *)(v2 + 176) = 0;
  memset_pattern16((void *)(v2 + 48), off_100454CA0, 0x80uLL);
  result = 0.0;
  *(_OWORD *)(v2 + 228) = 0u;
  *(_OWORD *)(v2 + 212) = 0u;
  *(_OWORD *)(v2 + 196) = 0u;
  *(_OWORD *)(v2 + 180) = 0u;
  *(_QWORD *)(v2 + 48) = sub_100391BF4;
  *(_QWORD *)(v2 + 160) = sub_100391BF4;
  v4 = *(_QWORD *)(a1 + 584);
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  *(_DWORD *)(a1 + 540) = 0;
  *(_WORD *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 248) = 0;
  return result;
}

uint64_t sub_10038FE70(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 584);
  *(_QWORD *)(result + 288) = 0;
  *(_DWORD *)(result + 156) = 0;
  *(_DWORD *)(result + 540) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 248) = 0;
  return result;
}

uint64_t sub_10038FE90(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 **v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 **v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned __int8 **v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 **v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  uint64_t v56;
  unsigned __int8 **v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  unsigned __int8 *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  int v79;
  uint64_t v80;
  unsigned __int8 *v81;
  int v82;
  uint64_t v83;
  unsigned __int8 *v84;
  int v85;
  uint64_t v86;
  unsigned __int8 *v87;
  int v88;
  uint64_t v89;
  unsigned __int8 *v90;
  int v91;
  uint64_t v92;
  unsigned __int8 *v93;
  int v94;
  uint64_t v95;
  unsigned __int8 *v96;
  int v97;
  uint64_t v98;
  unsigned __int8 *v99;
  int v100;
  uint64_t v101;
  unsigned __int8 *v102;
  int v103;
  uint64_t v104;
  unsigned __int8 *v105;
  int v106;
  uint64_t v107;
  unsigned __int8 *v108;
  int v109;
  uint64_t v110;
  unsigned __int8 *v111;
  int v112;
  uint64_t v113;
  unsigned __int8 *v114;
  int v115;
  uint64_t v116;
  unsigned __int8 *v117;
  int v118;
  uint64_t v119;
  unsigned __int8 *v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  __int128 *v131;
  unint64_t v132;
  char v133;
  unsigned int v134;
  _BYTE **v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 *v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  unsigned int v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint16x4_t *v161;
  uint16x4_t **v162;
  uint16x4_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint16x4_t *v167;
  int *v168;
  uint64_t v169;
  __int16 v170;
  uint64_t v171;
  __int16 v172;
  unsigned __int8 *v173;
  __int16 v174;
  __int16 v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned __int8 *v186;
  unint64_t v187;
  uint64_t v188;
  unsigned __int8 *v189;
  uint64_t v190;
  unsigned __int8 *v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  unsigned __int8 *v195;
  unsigned int v196;
  uint64_t v197;
  unsigned __int8 *v198;
  unsigned __int8 *v199;
  int v200;
  uint64_t v201;
  unsigned __int8 *v202;
  int v203;
  unsigned __int8 *v204;
  int v205;
  uint64_t v206;
  int v207;
  int v208;
  int v209;
  unsigned __int8 *v210;
  int v211;
  uint64_t v212;
  int v213;
  int v214;
  int v215;
  _DWORD *v216;
  int v217;
  int v218;
  int v219;
  unsigned __int8 *v220;
  int v221;
  int v222;
  unsigned __int8 *v223;
  int v224;
  unsigned __int8 *v225;
  int v226;
  int v227;
  unsigned __int8 *v228;
  int v229;
  unsigned __int8 *v231;
  int v232;
  int v233;
  unsigned __int8 *v234;
  int v235;
  unsigned __int8 *v236;
  int v237;
  int v238;
  unsigned __int8 *v239;
  int v240;
  unsigned __int8 *v242;
  int v243;
  int v244;
  unsigned __int8 *v245;
  int v246;
  unsigned __int8 *v247;
  int v248;
  int v249;
  unsigned __int8 *v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  unsigned __int8 **v254;
  unsigned __int8 *v255;
  unsigned __int8 *v256;
  uint64_t v257;
  unsigned __int8 *v258;
  uint64_t v259;
  unsigned int v260;
  unsigned __int8 *v261;
  unsigned __int8 *v262;
  uint64_t v263;
  unsigned int v264;
  unsigned __int8 *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v270;
  unsigned __int8 *v271;
  unsigned __int8 *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned __int8 *v276;
  unsigned __int8 *v277;
  unsigned int v278;
  uint64_t v279;
  int v280;
  int v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  _DWORD *v285;
  int v286;
  int v287;
  int v288;
  uint64_t i;
  int **v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  char v294;
  unsigned __int8 *v295;
  int v296;
  unsigned __int8 *v297;
  unsigned __int8 *v298;
  int v299;
  unsigned __int8 *v300;
  unsigned __int8 *v301;
  unsigned __int8 *v302;
  unsigned int v303;
  uint64_t v304;
  unsigned __int8 **v305;
  unsigned __int8 *v306;
  uint64_t v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  _QWORD *v322;
  _QWORD *v323;
  _QWORD *v324;
  int v325;
  uint64_t v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;

  v324 = (_QWORD *)(a1 + 299);
  v322 = (_QWORD *)(a1 + 331);
  v323 = (_QWORD *)(a1 + 315);
  v2 = *(_DWORD *)(a1 + 540);
  while (2)
  {
    if (!v2)
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 584) + 24))
      {
        result = sub_10038FC98((_QWORD *)a1);
        if (!(_DWORD)result)
          return result;
        v2 = *(_DWORD *)(a1 + 540);
        v4 = v2 - 1;
        if ((v2 - 1) > 0xFD)
        {
LABEL_26:
          v6 = *(_QWORD *)a1;
          v7 = 70;
LABEL_14:
          *(_DWORD *)(v6 + 40) = v7;
          *(_DWORD *)(v6 + 44) = v2;
          (**(void (***)(uint64_t))a1)(a1);
          goto LABEL_3;
        }
        goto LABEL_6;
      }
      v8 = *(uint64_t **)(a1 + 40);
      v9 = (unsigned __int8 *)v8[1];
      if (v9)
      {
        v10 = (unsigned __int8 *)(*v8 + 1);
        v11 = *(unsigned __int8 *)*v8;
        v12 = v9 - 1;
        if (v9 != (unsigned __int8 *)1)
          goto LABEL_17;
      }
      else
      {
        result = ((uint64_t (*)(uint64_t))v8[3])(a1);
        if (!(_DWORD)result)
          return result;
        v15 = (unsigned __int8 *)v8[1];
        v10 = (unsigned __int8 *)(*v8 + 1);
        v11 = *(unsigned __int8 *)*v8;
        v12 = v15 - 1;
        if (v15 != (unsigned __int8 *)1)
        {
LABEL_17:
          v14 = *v10;
          v13 = (uint64_t)(v10 + 1);
          v2 = v14;
          if (v11 != 255)
            goto LABEL_25;
LABEL_23:
          if (v2 == 216)
          {
            *(_DWORD *)(a1 + 540) = 216;
            *v8 = v13;
            v8[1] = (uint64_t)(v12 - 1);
            v4 = 215;
            goto LABEL_6;
          }
LABEL_25:
          v16 = *(_QWORD *)a1;
          *(_DWORD *)(v16 + 40) = 55;
          *(_DWORD *)(v16 + 44) = v11;
          *(_DWORD *)(*(_QWORD *)a1 + 48) = v2;
          (**(void (***)(uint64_t))a1)(a1);
          *(_DWORD *)(a1 + 540) = v2;
          *v8 = v13;
          v8[1] = (uint64_t)(v12 - 1);
          v4 = v2 - 1;
          if ((v2 - 1) > 0xFD)
            goto LABEL_26;
          goto LABEL_6;
        }
      }
      result = ((uint64_t (*)(uint64_t))v8[3])(a1);
      if (!(_DWORD)result)
        return result;
      v12 = (unsigned __int8 *)v8[1];
      v13 = *v8 + 1;
      v2 = *(unsigned __int8 *)*v8;
      if (v11 != 255)
        goto LABEL_25;
      goto LABEL_23;
    }
    v4 = v2 - 1;
LABEL_6:
    switch(v4)
    {
      case 0:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(v3 + 40) = 94;
        *(_DWORD *)(v3 + 44) = v2;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, 1);
        goto LABEL_3;
      case 191:
        result = sub_100391E6C((uint64_t *)a1, 1, 0, 0);
        if ((_DWORD)result)
          goto LABEL_3;
        return result;
      case 192:
        result = sub_100391E6C((uint64_t *)a1, 0, 0, 0);
        if ((_DWORD)result)
          goto LABEL_3;
        return result;
      case 193:
        result = sub_100391E6C((uint64_t *)a1, 0, 1, 0);
        if ((_DWORD)result)
          goto LABEL_3;
        return result;
      case 194:
      case 196:
      case 197:
      case 198:
      case 199:
      case 202:
      case 204:
      case 205:
      case 206:
        v6 = *(_QWORD *)a1;
        v7 = 63;
        goto LABEL_14;
      case 195:
        v17 = *(unsigned __int8 ***)(a1 + 40);
        v18 = v17[1];
        if (v18)
        {
          v20 = *v17 + 1;
          v19 = **v17;
          v21 = (uint64_t)(v18 - 1);
          if (v21)
            goto LABEL_69;
        }
        else
        {
          if (!((unsigned int (*)(uint64_t))v17[3])(a1))
            return 0;
          v20 = *v17 + 1;
          v19 = **v17;
          v21 = (uint64_t)(v17[1] - 1);
          if (v17[1] != (unsigned __int8 *)1)
            goto LABEL_69;
        }
        if (!((unsigned int (*)(uint64_t))v17[3])(a1))
          return 0;
        v20 = *v17;
        v21 = (uint64_t)v17[1];
LABEL_69:
        v60 = (unsigned __int8 *)(v21 - 1);
        v62 = *v20;
        v61 = v20 + 1;
        v63 = (v19 << 8) | v62;
        v64 = v63 - 2;
        if (v63 >= 0x13)
        {
          v305 = v17;
          do
          {
            if (!v60)
            {
              if (!((unsigned int (*)(uint64_t))v17[3])(a1))
                return 0;
              v61 = *v17;
              v60 = v17[1];
            }
            v76 = *v61;
            v75 = v61 + 1;
            v77 = *(_QWORD *)a1;
            *(_DWORD *)(v77 + 40) = 82;
            *(_DWORD *)(v77 + 44) = v76;
            v307 = v76;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, 1);
            if (v60 == (unsigned __int8 *)1)
            {
              if (!((unsigned int (*)(uint64_t))v17[3])(a1))
                return 0;
              v78 = *v17 + 1;
              v321 = **v17;
              v80 = (uint64_t)(v17[1] - 1);
              if (v17[1] != (unsigned __int8 *)1)
              {
LABEL_79:
                v82 = *v78;
                v81 = v78 + 1;
                v320 = v82;
                v83 = v80 - 1;
                if (v83)
                  goto LABEL_80;
                goto LABEL_98;
              }
            }
            else
            {
              v79 = *v75;
              v78 = v75 + 1;
              v321 = v79;
              v80 = (uint64_t)(v60 - 2);
              if (v60 != (unsigned __int8 *)2)
                goto LABEL_79;
            }
            if (!((unsigned int (*)(uint64_t))v17[3])(a1))
              return 0;
            v81 = *v17 + 1;
            v320 = **v17;
            v83 = (uint64_t)(v17[1] - 1);
            if (v17[1] != (unsigned __int8 *)1)
            {
LABEL_80:
              v85 = *v81;
              v84 = v81 + 1;
              v319 = v85;
              v86 = v83 - 1;
              if (v86)
                goto LABEL_81;
              goto LABEL_100;
            }
LABEL_98:
            if (!((unsigned int (*)(uint64_t))v17[3])(a1))
              return 0;
            v84 = *v17 + 1;
            v319 = **v17;
            v86 = (uint64_t)(v17[1] - 1);
            if (v17[1] != (unsigned __int8 *)1)
            {
LABEL_81:
              v88 = *v84;
              v87 = v84 + 1;
              v318 = v88;
              v89 = v86 - 1;
              if (v89)
                goto LABEL_82;
              goto LABEL_102;
            }
LABEL_100:
            if (!((unsigned int (*)(uint64_t))v17[3])(a1))
              return 0;
            v87 = *v17 + 1;
            v318 = **v17;
            v89 = (uint64_t)(v17[1] - 1);
            if (v17[1] != (unsigned __int8 *)1)
            {
LABEL_82:
              v91 = *v87;
              v90 = v87 + 1;
              v317 = v91;
              v92 = v89 - 1;
              if (v92)
                goto LABEL_83;
              goto LABEL_104;
            }
LABEL_102:
            if (!((unsigned int (*)(uint64_t))v17[3])(a1))
              return 0;
            v90 = *v17 + 1;
            v317 = **v17;
            v92 = (uint64_t)(v17[1] - 1);
            if (v17[1] != (unsigned __int8 *)1)
            {
LABEL_83:
              v94 = *v90;
              v93 = v90 + 1;
              v316 = v94;
              v95 = v92 - 1;
              if (v95)
                goto LABEL_84;
              goto LABEL_106;
            }
LABEL_104:
            if (!((unsigned int (*)(uint64_t))v17[3])(a1))
              return 0;
            v93 = *v17 + 1;
            v316 = **v17;
            v95 = (uint64_t)(v17[1] - 1);
            if (v17[1] != (unsigned __int8 *)1)
            {
LABEL_84:
              v97 = *v93;
              v96 = v93 + 1;
              v315 = v97;
              v98 = v95 - 1;
              if (v98)
                goto LABEL_85;
              goto LABEL_108;
            }
LABEL_106:
            if (!((unsigned int (*)(uint64_t))v17[3])(a1))
              return 0;
            v96 = *v17 + 1;
            v315 = **v17;
            v98 = (uint64_t)(v17[1] - 1);
            if (v17[1] != (unsigned __int8 *)1)
            {
LABEL_85:
              v100 = *v96;
              v99 = v96 + 1;
              v314 = v100;
              v101 = v98 - 1;
              if (v101)
                goto LABEL_86;
              goto LABEL_110;
            }
LABEL_108:
            if (!((unsigned int (*)(uint64_t))v17[3])(a1))
              return 0;
            v99 = *v17 + 1;
            v314 = **v17;
            v101 = (uint64_t)(v17[1] - 1);
            if (v17[1] != (unsigned __int8 *)1)
            {
LABEL_86:
              v103 = *v99;
              v102 = v99 + 1;
              v325 = v103;
              v104 = v101 - 1;
              if (v104)
                goto LABEL_87;
              goto LABEL_112;
            }
LABEL_110:
            if (!((unsigned int (*)(uint64_t))v17[3])(a1))
              return 0;
            v102 = *v17 + 1;
            v325 = **v17;
            v104 = (uint64_t)(v17[1] - 1);
            if (v17[1] != (unsigned __int8 *)1)
            {
LABEL_87:
              v106 = *v102;
              v105 = v102 + 1;
              v313 = v106;
              v107 = v104 - 1;
              if (v107)
                goto LABEL_88;
              goto LABEL_114;
            }
LABEL_112:
            if (!((unsigned int (*)(uint64_t))v17[3])(a1))
              return 0;
            v105 = *v17 + 1;
            v313 = **v17;
            v107 = (uint64_t)(v17[1] - 1);
            if (v17[1] != (unsigned __int8 *)1)
            {
LABEL_88:
              v109 = *v105;
              v108 = v105 + 1;
              v312 = v109;
              v110 = v107 - 1;
              if (v110)
                goto LABEL_89;
              goto LABEL_116;
            }
LABEL_114:
            if (!((unsigned int (*)(uint64_t))v17[3])(a1))
              return 0;
            v108 = *v17 + 1;
            v312 = **v17;
            v110 = (uint64_t)(v17[1] - 1);
            if (v17[1] != (unsigned __int8 *)1)
            {
LABEL_89:
              v112 = *v108;
              v111 = v108 + 1;
              v311 = v112;
              v113 = v110 - 1;
              if (v113)
                goto LABEL_90;
              goto LABEL_118;
            }
LABEL_116:
            if (!((unsigned int (*)(uint64_t))v17[3])(a1))
              return 0;
            v111 = *v17 + 1;
            v311 = **v17;
            v113 = (uint64_t)(v17[1] - 1);
            if (v17[1] != (unsigned __int8 *)1)
            {
LABEL_90:
              v115 = *v111;
              v114 = v111 + 1;
              v310 = v115;
              v116 = v113 - 1;
              if (v116)
                goto LABEL_91;
              goto LABEL_120;
            }
LABEL_118:
            if (!((unsigned int (*)(uint64_t))v17[3])(a1))
              return 0;
            v114 = *v17 + 1;
            v310 = **v17;
            v116 = (uint64_t)(v17[1] - 1);
            if (v17[1] != (unsigned __int8 *)1)
            {
LABEL_91:
              v118 = *v114;
              v117 = v114 + 1;
              v309 = v118;
              v119 = v116 - 1;
              if (v119)
                goto LABEL_92;
              goto LABEL_122;
            }
LABEL_120:
            if (!((unsigned int (*)(uint64_t))v17[3])(a1))
              return 0;
            v117 = *v17 + 1;
            v309 = **v17;
            v119 = (uint64_t)(v17[1] - 1);
            if (v17[1] != (unsigned __int8 *)1)
            {
LABEL_92:
              v121 = *v117;
              v120 = v117 + 1;
              v308 = v121;
              v122 = v119 - 1;
              if (!v122)
                goto LABEL_124;
              goto LABEL_93;
            }
LABEL_122:
            if (!((unsigned int (*)(uint64_t))v17[3])(a1))
              return 0;
            v120 = *v17 + 1;
            v308 = **v17;
            v122 = (uint64_t)(v17[1] - 1);
            if (v17[1] == (unsigned __int8 *)1)
            {
LABEL_124:
              if (!((unsigned int (*)(uint64_t))v17[3])(a1))
                return 0;
              v123 = v64;
              v120 = *v17;
              v306 = v17[1];
              goto LABEL_126;
            }
LABEL_93:
            v306 = (unsigned __int8 *)v122;
            v123 = v64;
LABEL_126:
            v124 = *v120;
            v61 = v120 + 1;
            v125 = *(_QWORD *)a1;
            *(_DWORD *)(v125 + 48) = v320;
            *(_DWORD *)(v125 + 52) = v319;
            v126 = v123 - 17;
            *(_DWORD *)(v125 + 56) = v318;
            *(_DWORD *)(v125 + 60) = v317;
            *(_DWORD *)(v125 + 64) = v316;
            *(_DWORD *)(v125 + 68) = v315;
            *(_DWORD *)(v125 + 72) = v314;
            *(_DWORD *)(v125 + 40) = 88;
            *(_DWORD *)(v125 + 44) = v321;
            (*(void (**)(uint64_t, uint64_t))(v125 + 8))(a1, 2);
            v127 = *(_QWORD *)a1;
            *(_DWORD *)(v127 + 48) = v313;
            *(_DWORD *)(v127 + 52) = v312;
            v128 = (v320
                                + v321
                                + v319
                                + v318
                                + v317
                                + v316
                                + v315
                                + v314
                                + v325
                                + v313
                                + v312
                                + v311
                                + v310
                                + v309
                                + v308
                                + v124);
            *(_DWORD *)(v127 + 56) = v311;
            *(_DWORD *)(v127 + 60) = v310;
            v129 = v124;
            *(_DWORD *)(v127 + 64) = v309;
            *(_DWORD *)(v127 + 68) = v308;
            *(_DWORD *)(v127 + 72) = v124;
            *(_DWORD *)(v127 + 40) = 88;
            *(_DWORD *)(v127 + 44) = v325;
            (*(void (**)(uint64_t, uint64_t))(v127 + 8))(a1, 2);
            if (v128 > 0x100 || v126 < v128)
            {
              v130 = *(_QWORD *)a1;
              *(_DWORD *)(v130 + 40) = 9;
              (*(void (**)(uint64_t))v130)(a1);
            }
            v60 = v306 - 1;
            v341 = 0u;
            v342 = 0u;
            v339 = 0u;
            v340 = 0u;
            v337 = 0u;
            v338 = 0u;
            v335 = 0u;
            v336 = 0u;
            v333 = 0u;
            v334 = 0u;
            v331 = 0u;
            v332 = 0u;
            v329 = 0u;
            v330 = 0u;
            v327 = 0u;
            v328 = 0u;
            if ((_DWORD)v128)
            {
              v131 = &v327;
              v132 = v128;
              v17 = v305;
              while (1)
              {
                if (!v60)
                {
                  if (!((unsigned int (*)(uint64_t))v305[3])(a1))
                    return 0;
                  v61 = *v305;
                  v60 = v305[1];
                }
                --v60;
                v133 = *v61++;
                *(_BYTE *)v131 = v133;
                v131 = (__int128 *)((char *)v131 + 1);
                if (!--v132)
                  goto LABEL_137;
              }
            }
            v17 = v305;
LABEL_137:
            v134 = v307 - 16;
            if ((v307 & 0x10) != 0)
            {
              v135 = (_BYTE **)(a1 + 8 * (v307 - 16) + 248);
            }
            else
            {
              v134 = v307;
              v135 = (_BYTE **)(a1 + 8 * v307 + 216);
            }
            if (v134 >= 4)
            {
              v136 = *(_QWORD *)a1;
              *(_DWORD *)(v136 + 40) = 31;
              *(_DWORD *)(v136 + 44) = v134;
              (**(void (***)(uint64_t))a1)(a1);
            }
            v65 = *v135;
            if (!*v135)
            {
              v65 = (_BYTE *)sub_10037FD10(a1);
              *v135 = v65;
            }
            *v65 = 0;
            v65[1] = v321;
            v65[2] = v320;
            v65[3] = v319;
            v65[4] = v318;
            v65[5] = v317;
            v65[6] = v316;
            v65[7] = v315;
            v65[8] = v314;
            v65[9] = v325;
            v65[10] = v313;
            v65[11] = v312;
            v65[12] = v311;
            v65[13] = v310;
            v65[14] = v309;
            v65[15] = v308;
            v65[16] = v129;
            v66 = *v135;
            v67 = v340;
            *(_OWORD *)(v66 + 209) = v339;
            *(_OWORD *)(v66 + 225) = v67;
            v68 = v342;
            *(_OWORD *)(v66 + 241) = v341;
            v69 = v336;
            *(_OWORD *)(v66 + 145) = v335;
            *(_OWORD *)(v66 + 161) = v69;
            v70 = v338;
            *(_OWORD *)(v66 + 177) = v337;
            *(_OWORD *)(v66 + 193) = v70;
            v71 = v332;
            *(_OWORD *)(v66 + 81) = v331;
            *(_OWORD *)(v66 + 97) = v71;
            v72 = v334;
            *(_OWORD *)(v66 + 113) = v333;
            *(_OWORD *)(v66 + 129) = v72;
            v73 = v328;
            *(_OWORD *)(v66 + 17) = v327;
            *(_OWORD *)(v66 + 33) = v73;
            v74 = v330;
            *(_OWORD *)(v66 + 49) = v329;
            *(_OWORD *)(v66 + 65) = v74;
            v64 = v126 - v128;
            *(_OWORD *)(v66 + 257) = v68;
          }
          while ((uint64_t)(v126 - v128) > 16);
        }
        if (v64)
        {
          v137 = *(_QWORD *)a1;
          *(_DWORD *)(v137 + 40) = 12;
          (*(void (**)(uint64_t))v137)(a1);
        }
        *v17 = v61;
        v17[1] = v60;
LABEL_3:
        v2 = 0;
        *(_DWORD *)(a1 + 540) = 0;
        continue;
      case 200:
        result = sub_100391E6C((uint64_t *)a1, 0, 0, 1);
        if ((_DWORD)result)
          goto LABEL_3;
        return result;
      case 201:
        result = sub_100391E6C((uint64_t *)a1, 0, 1, 1);
        if ((_DWORD)result)
          goto LABEL_3;
        return result;
      case 203:
        v22 = *(unsigned __int8 ***)(a1 + 40);
        v23 = v22[1];
        if (v23)
        {
          v24 = *v22 + 1;
          v25 = **v22;
          v26 = (uint64_t)(v23 - 1);
          if (v26)
          {
LABEL_42:
            v28 = *v24;
            v27 = v24 + 1;
            v29 = (v25 << 8) | v28;
            v30 = v26 - 1;
            if (v29 >= 3)
              goto LABEL_156;
LABEL_149:
            v138 = v29 - 2;
LABEL_150:
            if (v138)
            {
              v139 = *(_QWORD *)a1;
              *(_DWORD *)(v139 + 40) = 12;
              (*(void (**)(uint64_t))v139)(a1);
            }
            *v22 = v27;
            v22[1] = (unsigned __int8 *)v30;
            goto LABEL_3;
          }
        }
        else
        {
          result = ((uint64_t (*)(uint64_t))v22[3])(a1);
          if (!(_DWORD)result)
            return result;
          v24 = *v22 + 1;
          v25 = **v22;
          v26 = (uint64_t)(v22[1] - 1);
          if (v22[1] != (unsigned __int8 *)1)
            goto LABEL_42;
        }
        result = ((uint64_t (*)(uint64_t))v22[3])(a1);
        if (!(_DWORD)result)
          return result;
        v27 = *v22 + 1;
        v29 = (v25 << 8) | **v22;
        v30 = (uint64_t)(v22[1] - 1);
        if (v29 < 3)
          goto LABEL_149;
        while (1)
        {
LABEL_156:
          if (v30)
          {
            v143 = *v27;
            v141 = v27 + 1;
            v142 = v143;
            v144 = v30 - 1;
            if (v144)
              goto LABEL_163;
          }
          else
          {
            result = ((uint64_t (*)(uint64_t))v22[3])(a1);
            if (!(_DWORD)result)
              return result;
            v141 = *v22 + 1;
            v142 = **v22;
            v144 = (uint64_t)(v22[1] - 1);
            if (v22[1] != (unsigned __int8 *)1)
              goto LABEL_163;
          }
          result = ((uint64_t (*)(uint64_t))v22[3])(a1);
          if (!(_DWORD)result)
            return result;
          v141 = *v22;
          v144 = (uint64_t)v22[1];
LABEL_163:
          v145 = *v141;
          v146 = *(_QWORD *)a1;
          *(_DWORD *)(v146 + 40) = 81;
          *(_DWORD *)(v146 + 44) = v142;
          *(_DWORD *)(*(_QWORD *)a1 + 48) = v145;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, 1);
          if (v142 >= 0x20)
          {
            v140 = *(_QWORD *)a1;
            *(_DWORD *)(v140 + 40) = 29;
            *(_DWORD *)(v140 + 44) = v142;
            (**(void (***)(uint64_t))a1)(a1);
          }
          else if (v142 < 0x10)
          {
            v147 = a1 + v142;
            *(_BYTE *)(v147 + 299) = v145 & 0xF;
            *(_BYTE *)(v147 + 315) = v145 >> 4;
            if ((v145 & 0xF) > v145 >> 4)
            {
              v148 = *(_QWORD *)a1;
              *(_DWORD *)(v148 + 40) = 30;
              *(_DWORD *)(v148 + 44) = v145;
              (**(void (***)(uint64_t))a1)(a1);
            }
            goto LABEL_155;
          }
          *(_BYTE *)(a1 + (v142 - 16) + 331) = v145;
LABEL_155:
          v27 = v141 + 1;
          v30 = v144 - 1;
          v29 -= 2;
          v138 = v29 - 2;
          if (v29 <= 2)
            goto LABEL_150;
        }
      case 215:
        v31 = *(_QWORD *)a1;
        *(_DWORD *)(v31 + 40) = 104;
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a1, 1);
        v32 = *(_QWORD *)(a1 + 584);
        if (*(_BYTE *)(v32 + 24))
        {
          v33 = *(_QWORD *)a1;
          *(_DWORD *)(v33 + 40) = 64;
          (*(void (**)(uint64_t))v33)(a1);
          v32 = *(_QWORD *)(a1 + 584);
        }
        *v324 = 0;
        v324[1] = 0;
        *v323 = 0x101010101010101;
        v323[1] = 0x101010101010101;
        *v322 = 0x505050505050505;
        v322[1] = 0x505050505050505;
        *(_DWORD *)(a1 + 348) = 0;
        *(_DWORD *)(a1 + 60) = 0;
        *(_DWORD *)(a1 + 364) = 0;
        *(_BYTE *)(a1 + 368) = 0;
        *(_DWORD *)(a1 + 352) = 65792;
        *(_DWORD *)(a1 + 356) = 65537;
        *(_WORD *)(a1 + 360) = 0;
        *(_BYTE *)(v32 + 24) = 1;
        goto LABEL_3;
      case 216:
        v253 = *(_QWORD *)a1;
        *(_DWORD *)(v253 + 40) = 87;
        (*(void (**)(uint64_t, uint64_t))(v253 + 8))(a1, 1);
        *(_DWORD *)(a1 + 540) = 0;
        return 2;
      case 217:
        v254 = *(unsigned __int8 ***)(a1 + 40);
        v255 = *v254;
        v256 = v254[1];
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 584) + 25))
        {
          v257 = *(_QWORD *)a1;
          *(_OWORD *)(v257 + 60) = unk_1003C64BA;
          *(_OWORD *)(v257 + 76) = xmmword_1003C64CA;
          *(_OWORD *)(v257 + 92) = unk_1003C64DA;
          *(_OWORD *)(v257 + 108) = xmmword_1003C64EA;
          *(_DWORD *)(v257 + 40) = 60;
          *(_OWORD *)(v257 + 44) = xmmword_1003C64AA;
          (**(void (***)(uint64_t))a1)(a1);
        }
        if (v256)
          goto LABEL_339;
        result = ((uint64_t (*)(uint64_t))v254[3])(a1);
        if (!(_DWORD)result)
          return result;
        v255 = *v254;
        v256 = v254[1];
LABEL_339:
        v260 = *v255;
        v258 = v255 + 1;
        v259 = v260;
        v261 = v256 - 1;
        if (v256 != (unsigned __int8 *)1)
          goto LABEL_342;
        result = ((uint64_t (*)(uint64_t))v254[3])(a1);
        if (!(_DWORD)result)
          return result;
        v258 = *v254;
        v261 = v254[1];
LABEL_342:
        v264 = *v258;
        v262 = v258 + 1;
        v263 = v264;
        v265 = v261 - 1;
        if (v261 != (unsigned __int8 *)1)
          goto LABEL_345;
        result = ((uint64_t (*)(uint64_t))v254[3])(a1);
        if (!(_DWORD)result)
          return result;
        v262 = *v254;
        v265 = v254[1];
LABEL_345:
        v266 = (v259 << 8) | v263;
        v267 = *v262;
        v268 = *(_QWORD *)a1;
        *(_DWORD *)(v268 + 40) = 105;
        *(_DWORD *)(v268 + 44) = v267;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, 1);
        if (v266 != 2 * v267 + 6 || v267 > 4)
          goto LABEL_350;
        if ((_DWORD)v267)
        {
          *(_DWORD *)(a1 + 416) = v267;
          v271 = v262 + 1;
          v272 = v265 - 1;
          goto LABEL_354;
        }
        if (*(_BYTE *)(a1 + 297))
        {
          *(_DWORD *)(a1 + 416) = 0;
          v271 = v262 + 1;
          v272 = v265 - 1;
        }
        else
        {
LABEL_350:
          v270 = *(_QWORD *)a1;
          *(_DWORD *)(v270 + 40) = 12;
          (*(void (**)(uint64_t))v270)(a1);
          *(_DWORD *)(a1 + 416) = v267;
          v271 = v262 + 1;
          v272 = v265 - 1;
          if ((_DWORD)v267)
          {
LABEL_354:
            v273 = 0;
            v274 = a1 + 424;
            v275 = -1;
            while (1)
            {
              if (!v272)
              {
                result = ((uint64_t (*)(uint64_t))v254[3])(a1);
                if (!(_DWORD)result)
                  return result;
                v271 = *v254;
                v272 = v254[1];
              }
              v281 = *v271;
              v276 = v271 + 1;
              v280 = v281;
              if (v273)
                break;
LABEL_364:
              v285 = *(_DWORD **)(a1 + 288);
              v286 = *(_DWORD *)(a1 + 56);
              v287 = v286 - 1;
              if (v286 < 1)
                goto LABEL_386;
LABEL_382:
              v292 = (uint64_t)&v285[24 * v287 + 24];
              do
              {
                if (v280 == *v285)
                  goto LABEL_387;
                v285 += 24;
                --v286;
              }
              while (v286);
              v285 = (_DWORD *)v292;
LABEL_386:
              v293 = *(_QWORD *)a1;
              *(_DWORD *)(v293 + 40) = 4;
              *(_DWORD *)(v293 + 44) = v280;
              (**(void (***)(uint64_t))a1)(a1);
LABEL_387:
              *(_QWORD *)(a1 + 8 * v273 + 424) = v285;
              v277 = v272 - 1;
              if (!v277)
              {
                result = ((uint64_t (*)(uint64_t))v254[3])(a1);
                if (!(_DWORD)result)
                  return result;
                v276 = *v254;
                v277 = v254[1];
              }
              v278 = *v276;
              v271 = v276 + 1;
              v285[5] = v278 >> 4;
              v285[6] = v278 & 0xF;
              v279 = *(_QWORD *)a1;
              *(_DWORD *)(v279 + 44) = *v285;
              *(_DWORD *)(v279 + 48) = v285[5];
              *(_DWORD *)(v279 + 52) = v285[6];
              *(_DWORD *)(v279 + 40) = 106;
              (*(void (**)(uint64_t, uint64_t))(v279 + 8))(a1, 1);
              ++v273;
              v272 = v277 - 1;
              ++v275;
              if (v273 == v267)
              {
                v294 = 0;
                goto LABEL_394;
              }
            }
            v282 = 0;
            v283 = v275 & 0xFFFFFFFFFFFFFFFELL;
            v284 = v273 - 1;
            while (**(_DWORD **)(v274 + 8 * v282) != v280)
            {
              if (v273 == ++v282)
                goto LABEL_364;
            }
            v288 = **(_DWORD **)(a1 + 424);
            if (v273 >= 2)
            {
              if (v273 == 2)
              {
                for (i = 1; i != v273; ++i)
                {
LABEL_378:
                  if (**(_DWORD **)(v274 + 8 * i) > v288)
                    v288 = **(_DWORD **)(v274 + 8 * i);
                }
                goto LABEL_381;
              }
              i = v284 | 1;
              v290 = (int **)(a1 + 440);
              v291 = **(_DWORD **)(a1 + 424);
              do
              {
                if (**(v290 - 1) > v288)
                  v288 = **(v290 - 1);
                if (**v290 > v291)
                  v291 = **v290;
                v290 += 2;
                v283 -= 2;
              }
              while (v283);
              if (v288 <= v291)
                v288 = v291;
              if (v284 != (v284 & 0xFFFFFFFFFFFFFFFELL))
                goto LABEL_378;
            }
LABEL_381:
            v280 = v288 + 1;
            v285 = *(_DWORD **)(a1 + 288);
            v286 = *(_DWORD *)(a1 + 56);
            v287 = v286 - 1;
            if (v286 < 1)
              goto LABEL_386;
            goto LABEL_382;
          }
        }
        v294 = 1;
LABEL_394:
        if (v272)
          goto LABEL_397;
        result = ((uint64_t (*)(uint64_t))v254[3])(a1);
        if (!(_DWORD)result)
          return result;
        v271 = *v254;
        v272 = v254[1];
LABEL_397:
        v296 = *v271;
        v295 = v271 + 1;
        *(_DWORD *)(a1 + 508) = v296;
        v297 = v272 - 1;
        if (v272 != (unsigned __int8 *)1)
          goto LABEL_400;
        result = ((uint64_t (*)(uint64_t))v254[3])(a1);
        if (!(_DWORD)result)
          return result;
        v295 = *v254;
        v297 = v254[1];
LABEL_400:
        v299 = *v295;
        v298 = v295 + 1;
        *(_DWORD *)(a1 + 512) = v299;
        v300 = v297 - 1;
        if (v300)
          goto LABEL_403;
        result = ((uint64_t (*)(uint64_t))v254[3])(a1);
        if ((_DWORD)result)
        {
          v298 = *v254;
          v300 = v254[1];
LABEL_403:
          v301 = v300 - 1;
          v303 = *v298;
          v302 = v298 + 1;
          *(_DWORD *)(a1 + 516) = v303 >> 4;
          *(_DWORD *)(a1 + 520) = v303 & 0xF;
          v304 = *(_QWORD *)a1;
          *(_DWORD *)(v304 + 44) = *(_DWORD *)(a1 + 508);
          *(_DWORD *)(v304 + 48) = *(_DWORD *)(a1 + 512);
          *(_DWORD *)(v304 + 52) = *(_DWORD *)(a1 + 516);
          *(_DWORD *)(v304 + 56) = *(_DWORD *)(a1 + 520);
          *(_DWORD *)(v304 + 40) = 107;
          (*(void (**)(uint64_t, uint64_t))(v304 + 8))(a1, 1);
          *(_DWORD *)(*(_QWORD *)(a1 + 584) + 28) = 0;
          if ((v294 & 1) == 0)
            ++*(_DWORD *)(a1 + 156);
          *v254 = v302;
          v254[1] = v301;
          result = 1;
          *(_DWORD *)(a1 + 540) = 0;
        }
        return result;
      case 218:
        v34 = *(unsigned __int8 ***)(a1 + 40);
        v35 = v34[1];
        if (v35)
        {
          v37 = *v34 + 1;
          v36 = **v34;
          v38 = (uint64_t)(v35 - 1);
          if (v38)
            goto LABEL_171;
        }
        else
        {
          result = ((uint64_t (*)(uint64_t))v34[3])(a1);
          if (!(_DWORD)result)
            return result;
          v37 = *v34 + 1;
          v36 = **v34;
          v38 = (uint64_t)(v34[1] - 1);
          if (v34[1] != (unsigned __int8 *)1)
            goto LABEL_171;
        }
        result = ((uint64_t (*)(uint64_t))v34[3])(a1);
        if (!(_DWORD)result)
          return result;
        v37 = *v34;
        v38 = (uint64_t)v34[1];
LABEL_171:
        v149 = (unsigned __int8 *)(v38 - 1);
        v151 = *v37;
        v150 = v37 + 1;
        v152 = (v36 << 8) | v151;
        v153 = v152 - 2;
        if (v152 < 3)
        {
LABEL_172:
          if (v153)
          {
            v154 = *(_QWORD *)a1;
            *(_DWORD *)(v154 + 40) = 12;
            (*(void (**)(uint64_t))v154)(a1);
          }
          *v34 = v150;
          v34[1] = v149;
          goto LABEL_3;
        }
        while (1)
        {
          if (!v149)
          {
            result = ((uint64_t (*)(uint64_t))v34[3])(a1);
            if (!(_DWORD)result)
              return result;
            v150 = *v34;
            v149 = v34[1];
          }
          v156 = *v150;
          v157 = v156 & 0xF;
          v158 = *(_QWORD *)a1;
          *(_DWORD *)(v158 + 40) = 83;
          *(_DWORD *)(v158 + 44) = v156 & 0xF;
          *(_DWORD *)(*(_QWORD *)a1 + 48) = v156 >> 4;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, 1);
          if ((v156 & 0xF) < 4)
          {
            v166 = a1 + 8 * v157;
            v167 = *(uint16x4_t **)(v166 + 184);
            v162 = (uint16x4_t **)(v166 + 184);
            v161 = v167;
            if (!v167)
            {
LABEL_184:
              v161 = (uint16x4_t *)sub_10037FCE8(a1);
              *v162 = v161;
              v164 = v153 - 1;
              v326 = v153 - 1;
              if (v156 >= 0x10)
                goto LABEL_185;
              goto LABEL_189;
            }
          }
          else
          {
            v159 = *(_QWORD *)a1;
            *(_DWORD *)(v159 + 40) = 32;
            *(_DWORD *)(v159 + 44) = v157;
            (**(void (***)(uint64_t))a1)(a1);
            v160 = a1 + 8 * v157;
            v163 = *(uint16x4_t **)(v160 + 184);
            v162 = (uint16x4_t **)(v160 + 184);
            v161 = v163;
            if (!v163)
              goto LABEL_184;
          }
          v164 = v153 - 1;
          v326 = v153 - 1;
          if (v156 >= 0x10)
          {
LABEL_185:
            if ((unint64_t)v153 > 0x80)
              goto LABEL_193;
            memset_pattern16(v161, &unk_1003C6550, 0x80uLL);
            v165 = v164 >> 1;
            goto LABEL_191;
          }
LABEL_189:
          if ((unint64_t)v153 > 0x40)
          {
LABEL_193:
            ++v150;
            --v149;
            v168 = (int *)&unk_1003C68A0;
            v165 = 64;
            if (v156 >= 0x10)
              goto LABEL_208;
            goto LABEL_194;
          }
          memset_pattern16(v161, &unk_1003C6550, 0x80uLL);
          v165 = v164;
LABEL_191:
          v168 = (int *)&unk_1003C6D3C;
          switch(v165)
          {
            case 4:
              break;
            case 9:
              v168 = (int *)&unk_1003C6CD8;
              break;
            case 16:
              v168 = (int *)&unk_1003C6C58;
              break;
            case 25:
              v168 = (int *)&unk_1003C6BB4;
              break;
            case 36:
              v168 = (int *)&unk_1003C6AE4;
              break;
            case 49:
              v168 = (int *)&unk_1003C69E0;
              break;
            default:
              ++v150;
              --v149;
              if (!v165)
                goto LABEL_217;
              v168 = (int *)&unk_1003C68A0;
              if (v156 >= 0x10)
                goto LABEL_208;
              goto LABEL_194;
          }
          ++v150;
          --v149;
          if (v156 >= 0x10)
          {
LABEL_208:
            v171 = 0;
            while (1)
            {
              if (v149)
              {
                v175 = *v150;
                v173 = v150 + 1;
                v174 = v175;
                v176 = v149 - 1;
                if (v149 != (unsigned __int8 *)1)
                  goto LABEL_209;
              }
              else
              {
                result = ((uint64_t (*)(uint64_t))v34[3])(a1);
                if (!(_DWORD)result)
                  return result;
                v177 = v34[1];
                v173 = *v34 + 1;
                v174 = **v34;
                v176 = v177 - 1;
                if (v177 != (unsigned __int8 *)1)
                  goto LABEL_209;
              }
              result = ((uint64_t (*)(uint64_t))v34[3])(a1);
              if (!(_DWORD)result)
                return result;
              v173 = *v34;
              v176 = v34[1];
LABEL_209:
              v172 = *v173;
              v150 = v173 + 1;
              v161->i16[v168[v171++]] = (v174 << 8) | v172;
              v149 = v176 - 1;
              if (v165 == v171)
                goto LABEL_217;
            }
          }
LABEL_194:
          v169 = 0;
          do
          {
            if (!v149)
            {
              result = ((uint64_t (*)(uint64_t))v34[3])(a1);
              if (!(_DWORD)result)
                return result;
              v150 = *v34;
              v149 = v34[1];
            }
            v170 = *v150++;
            v161->i16[v168[v169++]] = v170;
            --v149;
          }
          while (v165 != v169);
LABEL_217:
          v178 = *(_QWORD *)a1;
          if (*(int *)(*(_QWORD *)a1 + 124) >= 2)
          {
            *(uint32x4_t *)(v178 + 44) = vmovl_u16(*v161);
            *(uint32x4_t *)(v178 + 60) = vmovl_u16(v161[1]);
            *(_DWORD *)(v178 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v178 + 8))(a1, 2);
            v179 = *(_QWORD *)a1;
            *(uint32x4_t *)(v179 + 44) = vmovl_u16(v161[2]);
            *(uint32x4_t *)(v179 + 60) = vmovl_u16(v161[3]);
            *(_DWORD *)(v179 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v179 + 8))(a1, 2);
            v180 = *(_QWORD *)a1;
            *(uint32x4_t *)(v180 + 44) = vmovl_u16(v161[4]);
            *(uint32x4_t *)(v180 + 60) = vmovl_u16(v161[5]);
            *(_DWORD *)(v180 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v180 + 8))(a1, 2);
            v181 = *(_QWORD *)a1;
            *(uint32x4_t *)(v181 + 44) = vmovl_u16(v161[6]);
            *(uint32x4_t *)(v181 + 60) = vmovl_u16(v161[7]);
            *(_DWORD *)(v181 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v181 + 8))(a1, 2);
            v182 = *(_QWORD *)a1;
            *(uint32x4_t *)(v182 + 44) = vmovl_u16(v161[8]);
            *(uint32x4_t *)(v182 + 60) = vmovl_u16(v161[9]);
            *(_DWORD *)(v182 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v182 + 8))(a1, 2);
            v183 = *(_QWORD *)a1;
            *(uint32x4_t *)(v183 + 44) = vmovl_u16(v161[10]);
            *(uint32x4_t *)(v183 + 60) = vmovl_u16(v161[11]);
            *(_DWORD *)(v183 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v183 + 8))(a1, 2);
            v184 = *(_QWORD *)a1;
            *(uint32x4_t *)(v184 + 44) = vmovl_u16(v161[12]);
            *(uint32x4_t *)(v184 + 60) = vmovl_u16(v161[13]);
            *(_DWORD *)(v184 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v184 + 8))(a1, 2);
            v185 = *(_QWORD *)a1;
            *(uint32x4_t *)(v185 + 44) = vmovl_u16(v161[14]);
            *(uint32x4_t *)(v185 + 60) = vmovl_u16(v161[15]);
            *(_DWORD *)(v185 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v185 + 8))(a1, 2);
          }
          if (v156 >= 0x10)
            v155 = v165;
          else
            v155 = 0;
          v153 = v326 - v165 - v155;
          if (v153 <= 0)
            goto LABEL_172;
        }
      case 219:
        v39 = *(unsigned __int8 ***)(a1 + 40);
        v40 = v39[1];
        if (v40)
        {
          v42 = *v39 + 1;
          v41 = **v39;
          v43 = (uint64_t)(v40 - 1);
          if (v43)
            goto LABEL_223;
        }
        else
        {
          result = ((uint64_t (*)(uint64_t))v39[3])(a1);
          if (!(_DWORD)result)
            return result;
          v42 = *v39 + 1;
          v41 = **v39;
          v43 = (uint64_t)(v39[1] - 1);
          if (v39[1] != (unsigned __int8 *)1)
            goto LABEL_223;
        }
        result = ((uint64_t (*)(uint64_t))v39[3])(a1);
        if (!(_DWORD)result)
          return result;
        v42 = *v39;
        v43 = (uint64_t)v39[1];
LABEL_223:
        v186 = (unsigned __int8 *)(v43 - 1);
        v187 = (v41 << 8) | *v42;
        v188 = *(_QWORD *)a1;
        *(_DWORD *)(v188 + 40) = 93;
        *(_DWORD *)(v188 + 44) = *(_DWORD *)(a1 + 540);
        *(_DWORD *)(*(_QWORD *)a1 + 48) = v187 - 2;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, 1);
        *v39 = v42 + 1;
        v39[1] = v186;
        if (v187 >= 3)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)(a1 + 40) + 32))(a1, v187 - 2);
        goto LABEL_3;
      case 220:
        v44 = *(unsigned __int8 ***)(a1 + 40);
        v45 = v44[1];
        if (v45)
        {
          v46 = *v44 + 1;
          v47 = **v44;
          v48 = v45 - 1;
          if (v45 != (unsigned __int8 *)1)
            goto LABEL_55;
        }
        else
        {
          result = ((uint64_t (*)(uint64_t))v44[3])(a1);
          if (!(_DWORD)result)
            return result;
          v189 = v44[1];
          v46 = *v44 + 1;
          v47 = **v44;
          v48 = v189 - 1;
          if (v189 != (unsigned __int8 *)1)
          {
LABEL_55:
            v50 = *v46;
            v49 = v46 + 1;
            if (((v47 << 8) | v50) == 4)
              goto LABEL_57;
            goto LABEL_56;
          }
        }
        result = ((uint64_t (*)(uint64_t))v44[3])(a1);
        if (!(_DWORD)result)
          return result;
        v48 = v44[1];
        v49 = *v44 + 1;
        if (((v47 << 8) | **v44) == 4)
        {
LABEL_57:
          v52 = v48 - 1;
          if (v48 == (unsigned __int8 *)1)
          {
            result = ((uint64_t (*)(uint64_t))v44[3])(a1);
            if (!(_DWORD)result)
              return result;
            v53 = *v44 + 1;
            v54 = **v44;
            v56 = (uint64_t)(v44[1] - 1);
            if (v44[1] == (unsigned __int8 *)1)
              goto LABEL_246;
          }
          else
          {
            v55 = *v49;
            v53 = v49 + 1;
            v54 = v55;
            v56 = (uint64_t)(v52 - 1);
            if (!v56)
            {
LABEL_246:
              result = ((uint64_t (*)(uint64_t))v44[3])(a1);
              if (!(_DWORD)result)
                return result;
              v53 = *v44;
              v56 = (uint64_t)v44[1];
            }
          }
          v209 = v54 << 8;
          v210 = (unsigned __int8 *)(v56 - 1);
          v211 = v209 | *v53;
          v212 = *(_QWORD *)a1;
          *(_DWORD *)(v212 + 40) = 84;
          *(_DWORD *)(v212 + 44) = v211;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, 1);
          *(_DWORD *)(a1 + 348) = v211;
          *v44 = v53 + 1;
          v44[1] = v210;
          goto LABEL_3;
        }
LABEL_56:
        v51 = *(_QWORD *)a1;
        *(_DWORD *)(v51 + 40) = 12;
        (*(void (**)(uint64_t))v51)(a1);
        goto LABEL_57;
      case 223:
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 584) + 8 * (v2 - 224) + 48))(a1);
        if ((_DWORD)result)
          goto LABEL_3;
        return result;
      case 247:
        v57 = *(unsigned __int8 ***)(a1 + 40);
        v59 = *v57;
        v58 = (uint64_t)v57[1];
        if (*(_BYTE *)(*(_QWORD *)(a1 + 584) + 25))
        {
          if (*(int *)(a1 + 56) < 3)
            goto LABEL_329;
        }
        else
        {
          v190 = *(_QWORD *)a1;
          *(_DWORD *)(v190 + 40) = 60;
          *(_OWORD *)(v190 + 60) = unk_1003C650B;
          *(_OWORD *)(v190 + 76) = xmmword_1003C651B;
          *(_OWORD *)(v190 + 92) = unk_1003C652B;
          *(_OWORD *)(v190 + 108) = xmmword_1003C653B;
          *(_OWORD *)(v190 + 44) = xmmword_1003C64FB;
          (**(void (***)(uint64_t))a1)(a1);
          if (*(int *)(a1 + 56) < 3)
            goto LABEL_329;
        }
        if (v58)
        {
          v193 = *v59;
          v191 = v59 + 1;
          v192 = v193;
          v194 = v58 - 1;
          if (v194)
            goto LABEL_233;
        }
        else
        {
          result = ((uint64_t (*)(uint64_t))v57[3])(a1);
          if (!(_DWORD)result)
            return result;
          v191 = *v57 + 1;
          v192 = **v57;
          v194 = (uint64_t)(v57[1] - 1);
          if (v57[1] != (unsigned __int8 *)1)
          {
LABEL_233:
            v196 = *v191;
            v195 = v191 + 1;
            if (((v192 << 8) | v196) == 0x18)
              goto LABEL_235;
            goto LABEL_234;
          }
        }
        result = ((uint64_t (*)(uint64_t))v57[3])(a1);
        if (!(_DWORD)result)
          return result;
        v194 = (uint64_t)v57[1];
        v195 = *v57 + 1;
        if (((v192 << 8) | **v57) == 0x18)
        {
LABEL_235:
          v198 = (unsigned __int8 *)(v194 - 1);
          if (!v198)
          {
            result = ((uint64_t (*)(uint64_t))v57[3])(a1);
            if (!(_DWORD)result)
              return result;
            v195 = *v57;
            v198 = v57[1];
          }
          v200 = *v195;
          v199 = v195 + 1;
          if (v200 != 13)
          {
            v201 = *(_QWORD *)a1;
            *(_DWORD *)(v201 + 40) = 70;
            *(_DWORD *)(v201 + 44) = *(_DWORD *)(a1 + 540);
            (**(void (***)(uint64_t))a1)(a1);
          }
          v202 = v198 - 1;
          if (v198 == (unsigned __int8 *)1)
          {
            result = ((uint64_t (*)(uint64_t))v57[3])(a1);
            if (!(_DWORD)result)
              return result;
            v204 = *v57 + 1;
            v203 = **v57;
            v206 = (uint64_t)(v57[1] - 1);
            if (v57[1] != (unsigned __int8 *)1)
            {
LABEL_242:
              v207 = v203 << 8;
              v58 = v206 - 1;
              v208 = *v204;
              v59 = v204 + 1;
              if ((v207 | v208) != 0xFF)
                goto LABEL_329;
LABEL_258:
              if (v58)
              {
                --v58;
                v214 = *v59++;
                if (v214 != 3)
                  goto LABEL_329;
              }
              else
              {
                result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                if (!(_DWORD)result)
                  return result;
                v58 = (uint64_t)(v57[1] - 1);
                v59 = *v57 + 1;
                if (**v57 != 3)
                  goto LABEL_329;
              }
              if (!v58)
              {
                result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                if (!(_DWORD)result)
                  return result;
                v59 = *v57;
                v58 = (uint64_t)v57[1];
              }
              --v58;
              v215 = *v59++;
              v216 = *(_DWORD **)(a1 + 288);
              if (v216[24] == v215)
              {
                if (!v58)
                {
                  result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                  if (!(_DWORD)result)
                    return result;
                  v59 = *v57;
                  v58 = (uint64_t)v57[1];
                  v216 = *(_DWORD **)(a1 + 288);
                }
                --v58;
                v217 = *v59++;
                if (*v216 == v217)
                {
                  if (!v58)
                  {
                    result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                    if (!(_DWORD)result)
                      return result;
                    v59 = *v57;
                    v58 = (uint64_t)v57[1];
                    v216 = *(_DWORD **)(a1 + 288);
                  }
                  --v58;
                  v218 = *v59++;
                  if (v216[48] == v218)
                  {
                    if (!v58)
                    {
                      result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                      if (!(_DWORD)result)
                        return result;
                      v59 = *v57;
                      v58 = (uint64_t)v57[1];
                    }
                    --v58;
                    v219 = *v59++;
                    if (v219 == 128)
                    {
                      if (!v58)
                      {
                        result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                        if (!(_DWORD)result)
                          return result;
                        v59 = *v57;
                        v58 = (uint64_t)v57[1];
                      }
                      v222 = *v59;
                      v220 = v59 + 1;
                      v221 = v222;
                      v223 = (unsigned __int8 *)(v58 - 1);
                      if (v58 == 1)
                      {
                        result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                        if (!(_DWORD)result)
                          return result;
                        v220 = *v57;
                        v223 = v57[1];
                      }
                      v58 = (uint64_t)(v223 - 1);
                      v224 = *v220;
                      v59 = v220 + 1;
                      if (!((v221 << 8) | v224))
                      {
                        if (v223 == (unsigned __int8 *)1)
                        {
                          result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                          if (!(_DWORD)result)
                            return result;
                          v59 = *v57;
                          v58 = (uint64_t)v57[1];
                        }
                        v227 = *v59;
                        v225 = v59 + 1;
                        v226 = v227;
                        v228 = (unsigned __int8 *)(v58 - 1);
                        if (v58 == 1)
                        {
                          result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                          if (!(_DWORD)result)
                            return result;
                          v225 = *v57;
                          v228 = v57[1];
                        }
                        v58 = (uint64_t)(v228 - 1);
                        v229 = *v225;
                        v59 = v225 + 1;
                        if (!((v226 << 8) | v229))
                        {
                          if (v228 == (unsigned __int8 *)1)
                          {
                            result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                            if (!(_DWORD)result)
                              return result;
                            v59 = *v57;
                            v58 = (uint64_t)v57[1];
                          }
                          --v58;
                          if (!*v59++)
                          {
                            if (!v58)
                            {
                              result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                              if (!(_DWORD)result)
                                return result;
                              v59 = *v57;
                              v58 = (uint64_t)v57[1];
                            }
                            v233 = *v59;
                            v231 = v59 + 1;
                            v232 = v233;
                            v234 = (unsigned __int8 *)(v58 - 1);
                            if (v58 == 1)
                            {
                              result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                              if (!(_DWORD)result)
                                return result;
                              v231 = *v57;
                              v234 = v57[1];
                            }
                            v58 = (uint64_t)(v234 - 1);
                            v235 = *v231;
                            v59 = v231 + 1;
                            if (((v232 << 8) | v235) == 1)
                            {
                              if (v234 == (unsigned __int8 *)1)
                              {
                                result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                                if (!(_DWORD)result)
                                  return result;
                                v59 = *v57;
                                v58 = (uint64_t)v57[1];
                              }
                              v238 = *v59;
                              v236 = v59 + 1;
                              v237 = v238;
                              v239 = (unsigned __int8 *)(v58 - 1);
                              if (v58 == 1)
                              {
                                result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                                if (!(_DWORD)result)
                                  return result;
                                v236 = *v57;
                                v239 = v57[1];
                              }
                              v58 = (uint64_t)(v239 - 1);
                              v240 = *v236;
                              v59 = v236 + 1;
                              if (!((v237 << 8) | v240))
                              {
                                if (v239 == (unsigned __int8 *)1)
                                {
                                  result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                                  if (!(_DWORD)result)
                                    return result;
                                  v59 = *v57;
                                  v58 = (uint64_t)v57[1];
                                }
                                --v58;
                                if (!*v59++)
                                {
                                  if (!v58)
                                  {
                                    result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                                    if (!(_DWORD)result)
                                      return result;
                                    v59 = *v57;
                                    v58 = (uint64_t)v57[1];
                                  }
                                  v244 = *v59;
                                  v242 = v59 + 1;
                                  v243 = v244;
                                  v245 = (unsigned __int8 *)(v58 - 1);
                                  if (v58 == 1)
                                  {
                                    result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                                    if (!(_DWORD)result)
                                      return result;
                                    v242 = *v57;
                                    v245 = v57[1];
                                  }
                                  v58 = (uint64_t)(v245 - 1);
                                  v246 = *v242;
                                  v59 = v242 + 1;
                                  if (((v243 << 8) | v246) == 1)
                                  {
                                    if (v245 == (unsigned __int8 *)1)
                                    {
                                      result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                                      if (!(_DWORD)result)
                                        return result;
                                      v59 = *v57;
                                      v58 = (uint64_t)v57[1];
                                    }
                                    v249 = *v59;
                                    v247 = v59 + 1;
                                    v248 = v249;
                                    v250 = (unsigned __int8 *)(v58 - 1);
                                    if (v58 == 1)
                                    {
                                      result = ((uint64_t (*)(uint64_t))v57[3])(a1);
                                      if (!(_DWORD)result)
                                        return result;
                                      v247 = *v57;
                                      v250 = v57[1];
                                    }
                                    v58 = (uint64_t)(v250 - 1);
                                    v251 = *v247;
                                    v59 = v247 + 1;
                                    if (!((v248 << 8) | v251))
                                    {
LABEL_330:
                                      *(_DWORD *)(a1 + 364) = 1;
                                      *v57 = v59;
                                      v57[1] = (unsigned __int8 *)v58;
                                      goto LABEL_3;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_329:
              v252 = *(_QWORD *)a1;
              *(_DWORD *)(v252 + 40) = 28;
              (*(void (**)(uint64_t))v252)(a1);
              goto LABEL_330;
            }
          }
          else
          {
            v205 = *v199;
            v204 = v199 + 1;
            v203 = v205;
            v206 = (uint64_t)(v202 - 1);
            if (v206)
              goto LABEL_242;
          }
          result = ((uint64_t (*)(uint64_t))v57[3])(a1);
          if (!(_DWORD)result)
            return result;
          v213 = v203 << 8;
          v58 = (uint64_t)(v57[1] - 1);
          v59 = *v57 + 1;
          if ((v213 | **v57) != 0xFF)
            goto LABEL_329;
          goto LABEL_258;
        }
LABEL_234:
        v197 = *(_QWORD *)a1;
        *(_DWORD *)(v197 + 40) = 12;
        (*(void (**)(uint64_t))v197)(a1);
        goto LABEL_235;
      case 253:
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 584) + 40))(a1);
        if ((_DWORD)result)
          goto LABEL_3;
        return result;
      default:
        goto LABEL_26;
    }
  }
}

uint64_t sub_100391A4C(uint64_t *a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t result;

  v2 = *((_DWORD *)a1 + 135);
  if (!v2)
  {
    result = sub_10038FC98(a1);
    if (!(_DWORD)result)
      return result;
    v3 = *(_DWORD *)(a1[73] + 28);
    if (*((_DWORD *)a1 + 135) == v3 + 208)
      goto LABEL_3;
LABEL_6:
    result = (*(uint64_t (**)(uint64_t *))(a1[5] + 40))(a1);
    if (!(_DWORD)result)
      return result;
    goto LABEL_7;
  }
  v3 = *(_DWORD *)(a1[73] + 28);
  if (v2 != v3 + 208)
    goto LABEL_6;
LABEL_3:
  v4 = *a1;
  *(_DWORD *)(v4 + 40) = 100;
  *(_DWORD *)(v4 + 44) = v3;
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 3);
  *((_DWORD *)a1 + 135) = 0;
LABEL_7:
  *(_DWORD *)(a1[73] + 28) = (*(_DWORD *)(a1[73] + 28) + 1) & 7;
  return 1;
}

uint64_t sub_100391AFC(_QWORD *a1)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v2 = (unsigned __int8 **)a1[5];
  v3 = v2[1];
  if (v3)
  {
    v5 = *v2 + 1;
    v4 = **v2;
    v6 = (uint64_t)(v3 - 1);
    if (v6)
      goto LABEL_7;
    goto LABEL_3;
  }
  if (!((unsigned int (*)(_QWORD *))v2[3])(a1))
    return 0;
  v5 = *v2 + 1;
  v4 = **v2;
  v6 = (uint64_t)(v2[1] - 1);
  if (v2[1] == (unsigned __int8 *)1)
  {
LABEL_3:
    if (((unsigned int (*)(_QWORD *))v2[3])(a1))
    {
      v5 = *v2;
      v6 = (uint64_t)v2[1];
      goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  v7 = (unsigned __int8 *)(v6 - 1);
  v8 = (v4 << 8) | *v5;
  v9 = *a1;
  v10 = *((_DWORD *)a1 + 135);
  *(_DWORD *)(v9 + 40) = 93;
  *(_DWORD *)(v9 + 44) = v10;
  *(_DWORD *)(*a1 + 48) = v8 - 2;
  v11 = 1;
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 8))(a1, 1);
  *v2 = v5 + 1;
  v2[1] = v7;
  if (v8 >= 3)
    (*(void (**)(_QWORD *, unint64_t))(a1[5] + 32))(a1, v8 - 2);
  return v11;
}

uint64_t sub_100391BF4(uint64_t *a1, uint8x8_t a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t result;
  unsigned __int8 *v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  __int32 *v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int32 v26;
  char v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  unsigned __int8 v31;

  v3 = (unsigned __int8 **)a1[5];
  v4 = v3[1];
  if (v4)
  {
    v6 = *v3 + 1;
    v5 = **v3;
    v7 = (uint64_t)(v4 - 1);
    if (v7)
      goto LABEL_8;
  }
  else
  {
    result = ((uint64_t (*)(uint64_t *))v3[3])(a1);
    if (!(_DWORD)result)
      return result;
    v6 = *v3 + 1;
    v5 = **v3;
    v7 = (uint64_t)(v3[1] - 1);
    if (v3[1] != (unsigned __int8 *)1)
      goto LABEL_8;
  }
  result = ((uint64_t (*)(uint64_t *))v3[3])(a1);
  if (!(_DWORD)result)
    return result;
  v6 = *v3;
  v7 = (uint64_t)v3[1];
LABEL_8:
  v10 = *v6;
  v9 = v6 + 1;
  v11 = (v5 << 8) | v10;
  v12 = v11 - 2;
  if (v11 <= 2)
    v13 = 0;
  else
    v13 = v11 - 2;
  if (v11 <= 0xF)
    v14 = v13;
  else
    v14 = 14;
  v15 = (unsigned __int8 *)(v7 - 1);
  if (!(_DWORD)v14)
  {
    v19 = *((_DWORD *)a1 + 135);
    if (v19 != 238)
      goto LABEL_22;
LABEL_26:
    if (v14 >= 0xC
      && (a2.i32[0] = v26, vmovn_s16((int16x8_t)vmovl_u8(a2)).u32[0] == 1651467329)
      && v27 == 101)
    {
      v20 = __rev16(v28);
      v21 = __rev16(v30);
      v22 = v31;
      v23 = *a1;
      *(_DWORD *)(v23 + 48) = __rev16(v29);
      *(_DWORD *)(v23 + 52) = v21;
      *(_DWORD *)(v23 + 56) = v22;
      *(_DWORD *)(v23 + 40) = 78;
      *(_DWORD *)(v23 + 44) = v20;
      (*(void (**)(uint64_t *, uint64_t))(v23 + 8))(a1, 1);
      *((_BYTE *)a1 + 360) = 1;
      *((_BYTE *)a1 + 361) = v22;
      *v3 = v9;
      v3[1] = v15;
      if (v12 < 1)
        return 1;
    }
    else
    {
      v25 = *a1;
      *(_DWORD *)(v25 + 40) = 80;
      *(_DWORD *)(v25 + 44) = v14 + v12;
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
      *v3 = v9;
      v3[1] = v15;
      if (v12 < 1)
        return 1;
    }
    goto LABEL_32;
  }
  v16 = &v26;
  v17 = v14;
  do
  {
    if (!v15)
    {
      result = ((uint64_t (*)(uint64_t *))v3[3])(a1);
      if (!(_DWORD)result)
        return result;
      v9 = *v3;
      v15 = v3[1];
    }
    v18 = *v9++;
    *(_BYTE *)v16 = v18;
    v16 = (__int32 *)((char *)v16 + 1);
    --v15;
    --v17;
  }
  while (v17);
  v12 -= v14;
  v19 = *((_DWORD *)a1 + 135);
  if (v19 == 238)
    goto LABEL_26;
LABEL_22:
  if (v19 == 224)
  {
    sub_100392380(a1, (uint64_t)&v26, v14, v12);
    *v3 = v9;
    v3[1] = v15;
    if (v12 < 1)
      return 1;
    goto LABEL_32;
  }
  v24 = *a1;
  *(_DWORD *)(v24 + 40) = 70;
  *(_DWORD *)(v24 + 44) = v19;
  (*(void (**)(uint64_t *))*a1)(a1);
  *v3 = v9;
  v3[1] = v15;
  if (v12 >= 1)
LABEL_32:
    (*(void (**)(uint64_t *, uint64_t))(a1[5] + 32))(a1, v12);
  return 1;
}

uint64_t sub_100391E6C(uint64_t *a1, char a2, char a3, char a4)
{
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t result;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  int v56;
  _DWORD *v57;
  unsigned __int8 *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  _DWORD *v63;
  _DWORD *v64;
  int v65;
  int v66;
  int *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unsigned __int8 *v74;
  unsigned int v75;

  v5 = (unsigned __int8 **)a1[5];
  v7 = *v5;
  v6 = v5[1];
  *((_BYTE *)a1 + 296) = a2;
  *((_BYTE *)a1 + 297) = a3;
  *((_BYTE *)a1 + 298) = a4;
  if (v6)
  {
    v10 = *v7;
    v8 = v7 + 1;
    v9 = v10;
    v11 = (uint64_t)(v6 - 1);
    if (v11)
      goto LABEL_3;
  }
  else
  {
    result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!(_DWORD)result)
      return result;
    v8 = *v5 + 1;
    v9 = **v5;
    v11 = (uint64_t)(v5[1] - 1);
    if (v5[1] != (unsigned __int8 *)1)
    {
LABEL_3:
      v14 = *v8;
      v12 = v8 + 1;
      v13 = v14;
      v15 = v11 - 1;
      if (v15)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
  if (!(_DWORD)result)
    return result;
  v12 = *v5 + 1;
  v13 = **v5;
  v15 = (uint64_t)(v5[1] - 1);
  if (v5[1] != (unsigned __int8 *)1)
  {
LABEL_4:
    v17 = *v12;
    v16 = v12 + 1;
    *((_DWORD *)a1 + 70) = v17;
    v18 = v15 - 1;
    if (v18)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_14:
  result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
  if (!(_DWORD)result)
    return result;
  v34 = v5[1];
  v16 = *v5 + 1;
  *((_DWORD *)a1 + 70) = **v5;
  v18 = (uint64_t)(v34 - 1);
  if (v18)
  {
LABEL_5:
    v20 = *v16;
    v19 = v16 + 1;
    v21 = v20 << 8;
    *((_DWORD *)a1 + 13) = v20 << 8;
    v22 = (unsigned __int8 *)(v18 - 1);
    if (v22)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_16:
  result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
  if (!(_DWORD)result)
    return result;
  v35 = v5[1];
  v19 = *v5 + 1;
  v21 = **v5 << 8;
  *((_DWORD *)a1 + 13) = v21;
  v22 = v35 - 1;
  if (v22)
  {
LABEL_6:
    v24 = *v19;
    v23 = v19 + 1;
    *((_DWORD *)a1 + 13) = v21 + v24;
    v25 = v22 - 1;
    if (v25)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_18:
  result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
  if (!(_DWORD)result)
    return result;
  v36 = v5[1];
  v23 = *v5 + 1;
  *((_DWORD *)a1 + 13) += **v5;
  v25 = v36 - 1;
  if (v25)
  {
LABEL_7:
    v27 = *v23;
    v26 = v23 + 1;
    v28 = v27 << 8;
    *((_DWORD *)a1 + 12) = v27 << 8;
    v29 = v25 - 1;
    if (v29)
      goto LABEL_8;
LABEL_22:
    result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!(_DWORD)result)
      return result;
    v38 = v5[1];
    v30 = *v5 + 1;
    *((_DWORD *)a1 + 12) += **v5;
    v32 = v38 - 1;
    if (v38 != (unsigned __int8 *)1)
      goto LABEL_26;
    goto LABEL_24;
  }
LABEL_20:
  result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
  if (!(_DWORD)result)
    return result;
  v37 = v5[1];
  v26 = *v5 + 1;
  v28 = **v5 << 8;
  *((_DWORD *)a1 + 12) = v28;
  v29 = v37 - 1;
  if (!v29)
    goto LABEL_22;
LABEL_8:
  v31 = *v26;
  v30 = v26 + 1;
  *((_DWORD *)a1 + 12) = v28 + v31;
  v32 = v29 - 1;
  if (v29 != (unsigned __int8 *)1)
    goto LABEL_26;
LABEL_24:
  result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
  if (!(_DWORD)result)
    return result;
  v30 = *v5;
  v32 = v5[1];
LABEL_26:
  v39 = (v9 << 8) | v13;
  *((_DWORD *)a1 + 14) = *v30;
  v40 = *a1;
  *(_DWORD *)(v40 + 44) = *((_DWORD *)a1 + 135);
  *(_DWORD *)(v40 + 48) = *((_DWORD *)a1 + 12);
  *(_DWORD *)(v40 + 52) = *((_DWORD *)a1 + 13);
  *(_DWORD *)(v40 + 56) = *((_DWORD *)a1 + 14);
  *(_DWORD *)(v40 + 40) = 102;
  (*(void (**)(uint64_t *, uint64_t))(v40 + 8))(a1, 1);
  if (*(_BYTE *)(a1[73] + 25))
  {
    v41 = *a1;
    *(_DWORD *)(v41 + 40) = 61;
    (*(void (**)(uint64_t *))v41)(a1);
  }
  v42 = v39 - 8;
  if (*((_DWORD *)a1 + 13) && *((_DWORD *)a1 + 12) && (v43 = *((_DWORD *)a1 + 14), v43 > 0))
  {
    if (v42 == 3 * v43)
      goto LABEL_32;
  }
  else
  {
    v46 = *a1;
    *(_DWORD *)(v46 + 40) = 33;
    (*(void (**)(uint64_t *))v46)(a1);
    v43 = *((_DWORD *)a1 + 14);
    if (v42 == 3 * v43)
    {
LABEL_32:
      if (a1[36])
        goto LABEL_33;
      goto LABEL_37;
    }
  }
  v47 = *a1;
  *(_DWORD *)(v47 + 40) = 12;
  (*(void (**)(uint64_t *))v47)(a1);
  v43 = *((_DWORD *)a1 + 14);
  if (a1[36])
  {
LABEL_33:
    v44 = v30 + 1;
    v45 = v32 - 1;
    if (v43 < 1)
      goto LABEL_74;
    goto LABEL_38;
  }
LABEL_37:
  a1[36] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 96 * v43);
  v44 = v30 + 1;
  v45 = v32 - 1;
  if (*((int *)a1 + 14) >= 1)
  {
LABEL_38:
    v48 = 0;
    v49 = -2;
    do
    {
      if (v45)
      {
        v56 = *v44;
        v55 = v44 + 1;
        v54 = v56;
        v57 = (_DWORD *)a1[36];
        if (v48)
          goto LABEL_48;
      }
      else
      {
        result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
        if (!(_DWORD)result)
          return result;
        v45 = v5[1];
        v55 = *v5 + 1;
        v54 = **v5;
        v57 = (_DWORD *)a1[36];
        if (v48)
        {
LABEL_48:
          v60 = (v49 + 1) & 0x1FFFFFFFELL;
          v61 = v48 - 2 + 1;
          v62 = v48;
          v63 = v57;
          while (*v63 != v54)
          {
            v63 += 24;
            if (!--v62)
            {
              v57 = v63;
              *v63 = v54;
              v63[1] = v48;
              v58 = v45 - 1;
              if (v58)
                goto LABEL_44;
              goto LABEL_70;
            }
          }
          v64 = v57 + 24;
          v65 = *v57;
          if (v48 < 2)
            goto LABEL_69;
          if (v48 == 2)
          {
            v66 = 1;
          }
          else
          {
            v64 += 24 * (v61 & 0x1FFFFFFFELL);
            v66 = (v48 - 1) | 1;
            v67 = v57 + 48;
            v68 = *v57;
            do
            {
              v69 = *(v67 - 24);
              v71 = *v67;
              v67 += 48;
              v70 = v71;
              if (v69 > v65)
                v65 = v69;
              if (v70 > v68)
                v68 = v70;
              v60 -= 2;
            }
            while (v60);
            if (v65 <= v68)
              v65 = v68;
            if (v61 == (v61 & 0x1FFFFFFFELL))
            {
LABEL_69:
              v57 = v64;
              *v64 = v65 + 1;
              v64[1] = v48;
              v58 = v45 - 1;
              if (v58)
                goto LABEL_44;
LABEL_70:
              result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
              if (!(_DWORD)result)
                return result;
              v74 = v5[1];
              v50 = *v5 + 1;
              v75 = **v5;
              v57[2] = v75 >> 4;
              v57[3] = v75 & 0xF;
              v51 = v74 - 1;
              if (v74 != (unsigned __int8 *)1)
                goto LABEL_40;
              goto LABEL_72;
            }
          }
          do
          {
            v73 = *v64;
            v64 += 24;
            v72 = v73;
            if (v73 > v65)
              v65 = v72;
            ++v66;
          }
          while (v48 != v66);
          goto LABEL_69;
        }
      }
      *v57 = v54;
      v57[1] = v48;
      v58 = v45 - 1;
      if (!v58)
        goto LABEL_70;
LABEL_44:
      v59 = *v55;
      v50 = v55 + 1;
      v57[2] = v59 >> 4;
      v57[3] = v59 & 0xF;
      v51 = v58 - 1;
      if (v58 != (unsigned __int8 *)1)
        goto LABEL_40;
LABEL_72:
      result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
      if (!(_DWORD)result)
        return result;
      v50 = *v5;
      v51 = v5[1];
LABEL_40:
      v52 = *v50;
      v44 = v50 + 1;
      v57[4] = v52;
      v53 = *a1;
      *(_DWORD *)(v53 + 44) = *v57;
      *(_DWORD *)(v53 + 48) = v57[2];
      *(_DWORD *)(v53 + 52) = v57[3];
      *(_DWORD *)(v53 + 56) = v57[4];
      *(_DWORD *)(v53 + 40) = 103;
      (*(void (**)(uint64_t *, uint64_t))(v53 + 8))(a1, 1);
      ++v48;
      v45 = v51 - 1;
      ++v49;
    }
    while ((signed int)v48 < *((_DWORD *)a1 + 14));
  }
LABEL_74:
  result = 1;
  *(_BYTE *)(a1[73] + 25) = 1;
  *v5 = v44;
  v5[1] = v45;
  return result;
}

uint64_t sub_100392380(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a4 + a3;
  if (a3 < 0xE)
  {
    if (a3 < 6 || *(_BYTE *)a2 != 74)
      goto LABEL_19;
    goto LABEL_15;
  }
  if (*(_BYTE *)a2 != 74)
    goto LABEL_19;
  if (*(_BYTE *)(a2 + 1) != 70 || *(_BYTE *)(a2 + 2) != 73 || *(_BYTE *)(a2 + 3) != 70 || *(_BYTE *)(a2 + 4))
  {
LABEL_15:
    if (*(_BYTE *)(a2 + 1) == 70 && *(_BYTE *)(a2 + 2) == 88 && *(_BYTE *)(a2 + 3) == 88 && !*(_BYTE *)(a2 + 4))
    {
      v20 = *(unsigned __int8 *)(a2 + 5);
      switch(v20)
      {
        case 19:
          v18 = *a1;
          v19 = 112;
          break;
        case 17:
          v18 = *a1;
          v19 = 111;
          break;
        case 16:
          v18 = *a1;
          v19 = 110;
          break;
        default:
          v22 = *a1;
          *(_DWORD *)(v22 + 40) = 91;
          *(_DWORD *)(v22 + 44) = *(unsigned __int8 *)(a2 + 5);
          *(_DWORD *)(*a1 + 48) = v6;
          return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
      }
      goto LABEL_20;
    }
LABEL_19:
    v18 = *a1;
    v19 = 79;
LABEL_20:
    *(_DWORD *)(v18 + 40) = v19;
    *(_DWORD *)(v18 + 44) = v6;
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
  }
  *((_BYTE *)a1 + 352) = 1;
  v7 = *(unsigned __int8 *)(a2 + 5);
  *((_BYTE *)a1 + 353) = v7;
  v8 = *(unsigned __int8 *)(a2 + 6);
  *((_BYTE *)a1 + 354) = v8;
  v9 = *(unsigned __int8 *)(a2 + 7);
  *((_BYTE *)a1 + 355) = v9;
  v10 = bswap32(*(unsigned __int16 *)(a2 + 8)) >> 16;
  *((_WORD *)a1 + 178) = v10;
  v11 = bswap32(*(unsigned __int16 *)(a2 + 10)) >> 16;
  *((_WORD *)a1 + 179) = v11;
  if ((v7 - 1) >= 2)
  {
    v12 = *a1;
    *(_DWORD *)(v12 + 40) = 122;
    *(_DWORD *)(v12 + 44) = v7;
    *(_DWORD *)(*a1 + 48) = *((unsigned __int8 *)a1 + 354);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
    v7 = *((unsigned __int8 *)a1 + 353);
    v8 = *((unsigned __int8 *)a1 + 354);
    v10 = *((unsigned __int16 *)a1 + 178);
    v11 = *((unsigned __int16 *)a1 + 179);
    v9 = *((unsigned __int8 *)a1 + 355);
  }
  v13 = *a1;
  *(_DWORD *)(v13 + 48) = v8;
  *(_DWORD *)(v13 + 52) = v10;
  *(_DWORD *)(v13 + 56) = v11;
  *(_DWORD *)(v13 + 60) = v9;
  *(_DWORD *)(v13 + 40) = 89;
  *(_DWORD *)(v13 + 44) = v7;
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 8))(a1, 1);
  v15 = *(unsigned __int8 *)(a2 + 12);
  v16 = *(unsigned __int8 *)(a2 + 13);
  if (v16 | v15)
  {
    v17 = *a1;
    *(_DWORD *)(v17 + 40) = 92;
    *(_DWORD *)(v17 + 44) = *(unsigned __int8 *)(a2 + 12);
    *(_DWORD *)(*a1 + 48) = *(unsigned __int8 *)(a2 + 13);
    result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
    v15 = *(unsigned __int8 *)(a2 + 12);
    v16 = *(unsigned __int8 *)(a2 + 13);
  }
  if (v6 - 14 != 3 * v15 * (unint64_t)v16)
  {
    v21 = *a1;
    *(_DWORD *)(v21 + 40) = 90;
    *(_DWORD *)(v21 + 44) = v6 - 14;
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
  }
  return result;
}

BOOL sub_1003925DC(uint64_t a1)
{
  int v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _DWORD *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  int *v47;
  int v48;
  int *v49;
  uint64_t v50;
  int *v51;
  int v52;
  int v53;
  _DWORD *v54;
  int v55;
  int v56;
  _BOOL8 result;

  v2 = *(_DWORD *)(a1 + 36);
  if (v2 != 202)
  {
    v3 = *(void (***)(_QWORD))a1;
    *((_DWORD *)v3 + 10) = 21;
    *((_DWORD *)v3 + 11) = v2;
    (**(void (***)(uint64_t))a1)(a1);
  }
  sub_10038E348(a1);
  v4 = *(unsigned int *)(a1 + 56);
  if ((int)v4 >= 1)
  {
    v5 = *(_QWORD *)(a1 + 288);
    v6 = *(_DWORD *)(a1 + 392);
    if (*(_BYTE *)(a1 + 96))
      v7 = 8;
    else
      v7 = 4;
    v8 = *(_DWORD *)(a1 + 396);
    if (v6 <= v7)
    {
      v13 = *(_DWORD *)(a1 + 384);
      if (v8 <= v7)
      {
        v27 = 0;
        v28 = *(_DWORD *)(a1 + 388);
        v29 = *(_DWORD **)(a1 + 288);
        do
        {
          v30 = v29[2];
          v31 = v6;
          if (!(v13 % (2 * v30)))
          {
            v32 = 2;
            do
            {
              v31 = v6 * v32;
              if (v6 * v32 > v7)
                break;
              v32 *= 2;
            }
            while (!(v13 % (v32 * v30)));
          }
          v29[9] = v31;
          v33 = v29[3];
          v34 = v8;
          if (!(v28 % (2 * v33)))
          {
            v35 = 2;
            do
            {
              v34 = v8 * v35;
              if (v8 * v35 > v7)
                break;
              v35 *= 2;
            }
            while (!(v28 % (v35 * v33)));
          }
          v29[10] = v34;
          if (v31 > 2 * v34)
          {
            v29[9] = 2 * v34;
          }
          else
          {
            v36 = 2 * v31;
            if (v34 > v36)
              v29[10] = v36;
          }
          ++v27;
          v29 += 24;
        }
        while (v27 != (_DWORD)v4);
      }
      else
      {
        v14 = 0;
        v15 = 2 * v8;
        v16 = *(_DWORD **)(a1 + 288);
        do
        {
          v17 = v16[2];
          v18 = v6;
          if (!(v13 % (2 * v17)))
          {
            v19 = 2;
            do
            {
              v18 = v6 * v19;
              if (v6 * v19 > v7)
                break;
              v19 *= 2;
            }
            while (!(v13 % (v19 * v17)));
          }
          v16[9] = v18;
          v16[10] = v8;
          if (v18 > v15)
          {
            v16[9] = v15;
          }
          else
          {
            v20 = 2 * v18;
            if (v8 > v20)
              v16[10] = v20;
          }
          ++v14;
          v16 += 24;
        }
        while (v14 != (_DWORD)v4);
      }
      goto LABEL_69;
    }
    v9 = 2 * v6;
    if (v8 <= v7)
    {
      v21 = 0;
      v22 = *(_DWORD *)(a1 + 388);
      v23 = *(_DWORD **)(a1 + 288);
      do
      {
        v23[9] = v6;
        v24 = v23[3];
        v25 = v8;
        if (!(v22 % (2 * v24)))
        {
          v26 = 2;
          do
          {
            v25 = v8 * v26;
            if (v8 * v26 > v7)
              break;
            v26 *= 2;
          }
          while (!(v22 % (v26 * v24)));
        }
        v23[10] = v25;
        if (v6 > 2 * v25)
        {
          v23[9] = 2 * v25;
        }
        else if (v25 > v9)
        {
          v23[10] = v9;
        }
        ++v21;
        v23 += 24;
      }
      while (v21 != (_DWORD)v4);
      goto LABEL_69;
    }
    v10 = 2 * v8;
    if (v6 <= 2 * v8)
    {
      if (v8 <= v9)
      {
        if (v4 >= 2)
        {
          v43 = v4 & 0xFFFFFFFE;
          v44 = v5 + 96 * v43;
          v49 = (int *)(v5 + 136);
          v50 = v43;
          do
          {
            *(v49 - 1) = v6;
            *v49 = v8;
            *(v49 - 25) = v6;
            *(v49 - 24) = v8;
            v49 += 48;
            v50 -= 2;
          }
          while (v50);
          if (v43 == v4)
            goto LABEL_69;
        }
        else
        {
          LODWORD(v43) = 0;
          v44 = *(_QWORD *)(a1 + 288);
        }
        v51 = (int *)(v44 + 40);
        v52 = v4 - v43;
        do
        {
          *(v51 - 1) = v6;
          *v51 = v8;
          v51 += 24;
          --v52;
        }
        while (v52);
      }
      else
      {
        if (v4 >= 2)
        {
          v37 = v4 & 0xFFFFFFFE;
          v38 = v5 + 96 * v37;
          v45 = (int *)(v5 + 136);
          v46 = v37;
          do
          {
            *(v45 - 1) = v6;
            *v45 = v9;
            *(v45 - 25) = v6;
            *(v45 - 24) = v9;
            v45 += 48;
            v46 -= 2;
          }
          while (v46);
          if (v37 == v4)
            goto LABEL_69;
        }
        else
        {
          LODWORD(v37) = 0;
          v38 = *(_QWORD *)(a1 + 288);
        }
        v47 = (int *)(v38 + 40);
        v48 = v4 - v37;
        do
        {
          *(v47 - 1) = v6;
          *v47 = v9;
          v47 += 24;
          --v48;
        }
        while (v48);
      }
    }
    else
    {
      if (v4 >= 2)
      {
        v11 = v4 & 0xFFFFFFFE;
        v12 = v5 + 96 * v11;
        v39 = (int *)(v5 + 136);
        v40 = v11;
        do
        {
          *(v39 - 1) = v10;
          *v39 = v8;
          *(v39 - 25) = v10;
          *(v39 - 24) = v8;
          v39 += 48;
          v40 -= 2;
        }
        while (v40);
        if (v11 == v4)
          goto LABEL_69;
      }
      else
      {
        LODWORD(v11) = 0;
        v12 = *(_QWORD *)(a1 + 288);
      }
      v41 = (int *)(v12 + 40);
      v42 = v4 - v11;
      do
      {
        *(v41 - 1) = v10;
        *v41 = v8;
        v41 += 24;
        --v42;
      }
      while (v42);
    }
LABEL_69:
    v53 = 0;
    v54 = (_DWORD *)(v5 + 48);
    do
    {
      *(v54 - 1) = sub_1003A7E94((int)*(v54 - 3) * (uint64_t)(int)*(v54 - 10) * *(unsigned int *)(a1 + 48), *(int *)(a1 + 524) * (uint64_t)*(int *)(a1 + 384));
      *v54 = sub_1003A7E94((int)*(v54 - 2) * (uint64_t)(int)*(v54 - 9) * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524) * (uint64_t)*(int *)(a1 + 388));
      v54 += 24;
      ++v53;
      LODWORD(v4) = *(_DWORD *)(a1 + 56);
    }
    while (v53 < (int)v4);
  }
  v55 = *(_DWORD *)(a1 + 64) - 1;
  if (v55 <= 6)
    LODWORD(v4) = dword_1003C6560[v55];
  if (*(_BYTE *)(a1 + 98))
    v56 = 1;
  else
    v56 = v4;
  *(_DWORD *)(a1 + 124) = v4;
  *(_DWORD *)(a1 + 128) = v56;
  result = sub_100392A34(a1);
  if (result)
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a1 + 388);
  else
    *(_DWORD *)(a1 + 132) = 1;
  return result;
}

BOOL sub_100392A34(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  int v4;

  if (!*(_BYTE *)(a1 + 368)
    && (*(_DWORD *)(a1 + 60) | 4) == 7
    && *(_DWORD *)(a1 + 56) == 3
    && *(_DWORD *)(a1 + 64) == 2
    && *(_DWORD *)(a1 + 124) == 3
    && !*(_DWORD *)(a1 + 364)
    && (v2 = *(_DWORD **)(a1 + 288), v2[2] == 2)
    && v2[26] == 1
    && v2[50] == 1
    && (int)v2[3] <= 2
    && v2[27] == 1
    && v2[51] == 1
    && (v3 = v2[9], v3 == *(_DWORD *)(a1 + 392))
    && v2[33] == v3
    && v2[57] == v3
    && (v4 = v2[10], v4 == *(_DWORD *)(a1 + 396))
    && v2[34] == v4)
  {
    return v2[58] == v4;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100392B20(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void (**v4)(uint64_t);
  _OWORD *v5;
  __int128 v6;
  unsigned int v7;
  int v8;
  void (**v9)(uint64_t);
  void (**v10)(uint64_t);
  BOOL v11;
  void (**v12)(uint64_t);
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v2 = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 544) = v2;
  *(_QWORD *)v2 = sub_100392FB4;
  *(_QWORD *)(v2 + 8) = sub_100393184;
  *(_BYTE *)(v2 + 16) = 0;
  v3 = *(_DWORD *)(a1 + 280);
  if (v3 != 8)
  {
    v4 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v4 + 10) = 16;
    *((_DWORD *)v4 + 11) = v3;
    (**(void (***)(uint64_t))a1)(a1);
  }
  sub_1003925DC(a1);
  v5 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1280);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  v5[17] = 0u;
  v5[18] = 0u;
  v5[19] = 0u;
  v5[20] = 0u;
  v5[21] = 0u;
  v5[22] = 0u;
  v5[23] = 0u;
  v5[24] = 0u;
  v5[25] = 0u;
  v5[26] = 0u;
  v5[27] = 0u;
  v5[28] = 0u;
  v5[29] = 0u;
  v5[30] = 0u;
  v5[31] = 0u;
  *(_QWORD *)(a1 + 408) = v5 + 32;
  v5[32] = xmmword_1003C4960;
  v5[33] = xmmword_1003C4970;
  v5[39] = xmmword_1003C49D0;
  v5[40] = xmmword_1003C49E0;
  v5[41] = xmmword_1003C49F0;
  v5[42] = xmmword_1003C4A00;
  v5[43] = xmmword_1003C4A10;
  v5[44] = xmmword_1003C4A20;
  v5[45] = xmmword_1003C4A30;
  v5[46] = xmmword_1003C4A40;
  v5[47] = xmmword_1003C4A50;
  *(_QWORD *)&v6 = -1;
  *((_QWORD *)&v6 + 1) = -1;
  v5[48] = v6;
  v5[49] = v6;
  v5[50] = v6;
  v5[51] = v6;
  v5[52] = v6;
  v5[53] = v6;
  v5[54] = v6;
  v5[55] = v6;
  v5[56] = v6;
  v5[57] = v6;
  v5[58] = v6;
  v5[59] = v6;
  v5[60] = v6;
  v5[61] = v6;
  v5[62] = v6;
  v5[63] = v6;
  v5[64] = v6;
  v5[65] = v6;
  v5[66] = v6;
  v5[67] = v6;
  v5[68] = v6;
  v5[69] = v6;
  v5[70] = v6;
  v5[71] = v6;
  v5[72] = v6;
  v5[73] = v6;
  v5[74] = v6;
  v5[75] = v6;
  v5[76] = v6;
  v5[77] = v6;
  v5[78] = v6;
  v5[79] = v6;
  if (!*(_DWORD *)(a1 + 120) || (v7 = *(_DWORD *)(a1 + 116)) == 0 || (v8 = *(_DWORD *)(a1 + 124), v8 <= 0))
  {
    v9 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v9 + 10) = 33;
    (*v9)(a1);
    v7 = *(_DWORD *)(a1 + 116);
    v8 = *(_DWORD *)(a1 + 124);
  }
  if (((unint64_t)v7 * v8) >> 32)
  {
    v10 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v10 + 10) = 72;
    (*v10)(a1);
  }
  *(_DWORD *)(v2 + 24) = 0;
  v11 = sub_100392A34(a1);
  *(_QWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 28) = v11;
  *(_QWORD *)(v2 + 40) = 0;
  if (*(_BYTE *)(a1 + 98))
  {
    if (!*(_BYTE *)(a1 + 88))
    {
      *(_WORD *)(a1 + 112) = 0;
      *(_BYTE *)(a1 + 114) = 0;
    }
    if (*(_BYTE *)(a1 + 89))
    {
      v12 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v12 + 10) = 48;
      (*v12)(a1);
    }
    if (*(_DWORD *)(a1 + 124) == 3)
    {
      if (*(_QWORD *)(a1 + 144))
      {
        *(_BYTE *)(a1 + 113) = 1;
      }
      else if (*(_BYTE *)(a1 + 104))
      {
        *(_BYTE *)(a1 + 114) = 1;
      }
      else
      {
        *(_BYTE *)(a1 + 112) = 1;
      }
    }
    else
    {
      *(_WORD *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 114) = 0;
      *(_QWORD *)(a1 + 144) = 0;
    }
    if (*(_BYTE *)(a1 + 112))
    {
      sub_1003A49B0(a1);
      *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 624);
    }
    if (*(_BYTE *)(a1 + 114) || *(_BYTE *)(a1 + 113))
    {
      sub_1003A5CB8(a1);
      *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 624);
    }
  }
  else
  {
    *(_WORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 114) = 0;
  }
  if (*(_BYTE *)(a1 + 89))
  {
    sub_10038A1A4(a1);
    if (*(_BYTE *)(a1 + 298))
      goto LABEL_26;
  }
  else
  {
    if (*(_BYTE *)(v2 + 28))
    {
      sub_1003931C0(a1);
    }
    else
    {
      sub_100388C28((uint64_t *)a1);
      sub_100393D1C((uint64_t *)a1);
    }
    sub_100393884(a1, *(unsigned __int8 *)(a1 + 114));
    sub_10038A1A4(a1);
    if (*(_BYTE *)(a1 + 298))
    {
LABEL_26:
      sub_100385E18(a1);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 576) + 32))
        goto LABEL_27;
LABEL_45:
      sub_100387A5C(a1, *(_BYTE *)(a1 + 88) != 0);
      if (*(_BYTE *)(a1 + 89))
        goto LABEL_29;
      goto LABEL_28;
    }
  }
  sub_10038B128(a1);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 576) + 32))
    goto LABEL_45;
LABEL_27:
  sub_100387A5C(a1, 1);
  if (!*(_BYTE *)(a1 + 89))
LABEL_28:
    sub_10038F168((uint64_t *)a1, 0);
LABEL_29:
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 576) + 16))(a1);
  v14 = *(_QWORD *)(a1 + 16);
  if (v14 && !*(_BYTE *)(a1 + 88) && *(_BYTE *)(*(_QWORD *)(a1 + 576) + 32))
  {
    if (*(_BYTE *)(a1 + 297))
      v15 = 3 * *(_DWORD *)(a1 + 56) + 2;
    else
      v15 = *(_DWORD *)(a1 + 56);
    v16 = *(unsigned int *)(a1 + 400);
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = v15 * v16;
    if (*(_BYTE *)(a1 + 114))
      v17 = 3;
    else
      v17 = 2;
    *(_DWORD *)(v14 + 24) = 0;
    *(_DWORD *)(v14 + 28) = v17;
    ++*(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t sub_100392FB4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[68];
  if (*(_BYTE *)(v2 + 16))
  {
    *(_BYTE *)(v2 + 16) = 0;
    (*(void (**)(uint64_t *, _QWORD))a1[78])(a1, 0);
    v3 = 2;
    (*(void (**)(uint64_t *, uint64_t))a1[71])(a1, 2);
LABEL_3:
    result = (*(uint64_t (**)(uint64_t *, uint64_t))a1[69])(a1, v3);
    goto LABEL_7;
  }
  if (*((_BYTE *)a1 + 98) && !a1[18])
  {
    if (*((_BYTE *)a1 + 104) && *((_BYTE *)a1 + 114))
    {
      a1[78] = *(_QWORD *)(v2 + 40);
      *(_BYTE *)(v2 + 16) = 1;
    }
    else if (*((_BYTE *)a1 + 112))
    {
      a1[78] = *(_QWORD *)(v2 + 32);
    }
    else
    {
      v11 = *a1;
      *(_DWORD *)(v11 + 40) = 47;
      (*(void (**)(uint64_t *))v11)(a1);
    }
  }
  (*(void (**)(uint64_t *))a1[75])(a1);
  result = (*(uint64_t (**)(uint64_t *))(a1[70] + 16))(a1);
  if (!*((_BYTE *)a1 + 89))
  {
    if (!*(_BYTE *)(v2 + 28))
      (*(void (**)(uint64_t *))a1[77])(a1);
    (*(void (**)(uint64_t *))a1[76])(a1);
    if (*((_BYTE *)a1 + 98))
      (*(void (**)(uint64_t *, _QWORD))a1[78])(a1, *(unsigned __int8 *)(v2 + 16));
    if (*(_BYTE *)(v2 + 16))
      v10 = 3;
    else
      v10 = 0;
    (*(void (**)(uint64_t *, uint64_t))a1[71])(a1, v10);
    v3 = 0;
    goto LABEL_3;
  }
LABEL_7:
  v5 = a1[2];
  if (v5)
  {
    v6 = *(_DWORD *)(v2 + 24);
    v7 = *(_BYTE *)(v2 + 16) ? 2 : 1;
    v8 = v7 + v6;
    *(_DWORD *)(v5 + 24) = v6;
    *(_DWORD *)(v5 + 28) = v8;
    if (*((_BYTE *)a1 + 88))
    {
      if (!*(_BYTE *)(a1[72] + 33))
      {
        if (*((_BYTE *)a1 + 114))
          v9 = 2;
        else
          v9 = 1;
        *(_DWORD *)(v5 + 28) = v9 + v8;
      }
    }
  }
  return result;
}

uint64_t sub_100393184(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 544);
  if (*(_BYTE *)(result + 98))
    result = (*(uint64_t (**)(void))(*(_QWORD *)(result + 624) + 16))();
  ++*(_DWORD *)(v1 + 24);
  return result;
}

uint64_t sub_1003931C0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v2 = (**(uint64_t (***)(void))(a1 + 8))();
  v3 = (_QWORD *)v2;
  *(_QWORD *)(a1 + 608) = v2;
  *(_QWORD *)v2 = sub_1003933FC;
  *(_BYTE *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 76) = *(_DWORD *)(a1 + 124) * *(_DWORD *)(a1 + 116);
  if (*(_DWORD *)(a1 + 388) == 2)
  {
    *(_QWORD *)(v2 + 8) = sub_100393410;
    *(_QWORD *)(v2 + 24) = sub_100393540;
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1);
  }
  else
  {
    v4 = 0;
    v3[1] = sub_100393714;
    v3[3] = sub_100393764;
  }
  v3[8] = v4;
  v5 = *(_DWORD *)(a1 + 60);
  v6 = *(_QWORD **)(a1 + 608);
  v6[4] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
  v6[5] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
  v6[6] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
  result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
  v6[7] = result;
  v8 = v6[4];
  v9 = v6[5];
  v10 = v6[6];
  if (v5 == 7)
  {
    v11 = 0;
    v12 = -29696512;
    v13 = -23488896;
    v14 = 5806464;
    v15 = 11981184;
    do
    {
      v16 = 4 * v11;
      v17 = 8 * v11;
      *(_QWORD *)(v10 + v17) = v15;
      *(_QWORD *)(result + v17) = v14;
      ++v11;
      v14 -= 45107;
      v15 -= 93603;
      v18 = v13 >> 16;
      v19 = v12 >> 16;
      v12 += 232260;
      v13 += 183763;
      *(_DWORD *)(v8 + v16) = v18;
      *(_DWORD *)(v9 + v16) = v19;
    }
    while (v11 != 256);
  }
  else
  {
    v20 = 0;
    v21 = -14831872;
    v22 = -11728000;
    v23 = 2919552;
    v24 = 5990656;
    do
    {
      v25 = 4 * v20;
      v26 = 8 * v20;
      *(_QWORD *)(v10 + v26) = v24;
      *(_QWORD *)(result + v26) = v23;
      ++v20;
      v23 -= 22553;
      v24 -= 46802;
      v27 = v22 >> 16;
      v28 = v21 >> 16;
      v21 += 116130;
      v22 += 91881;
      *(_DWORD *)(v8 + v25) = v27;
      *(_DWORD *)(v9 + v25) = v28;
    }
    while (v20 != 256);
  }
  return result;
}

uint64_t sub_1003933FC(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 608);
  *(_BYTE *)(v1 + 72) = 0;
  *(_DWORD *)(v1 + 80) = *(_DWORD *)(result + 120);
  return result;
}

char *sub_100393410(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, int a7)
{
  uint64_t v9;
  char *result;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *(_QWORD *)(a1 + 608);
  if (*(_BYTE *)(v9 + 72))
  {
    result = sub_1003A7EB8((char *)(v9 + 64), 0, a5 + 8 * *a6, 0, 1, *(unsigned int *)(v9 + 76));
    *(_BYTE *)(v9 + 72) = 0;
    ++*a6;
    --*(_DWORD *)(v9 + 80);
LABEL_3:
    ++*a3;
    return result;
  }
  v11 = *(_DWORD *)(v9 + 80);
  v12 = *a6;
  if (v11 >= a7 - (int)v12)
    v11 = a7 - v12;
  if (v11 >= 2)
    v13 = 2;
  else
    v13 = v11;
  v16 = *(_QWORD *)(a5 + 8 * v12);
  if (v13 < 2)
  {
    v14 = *(_QWORD *)(v9 + 64);
    *(_BYTE *)(v9 + 72) = 1;
  }
  else
  {
    v14 = *(_QWORD *)(a5 + 8 * (v12 + 1));
  }
  v17 = v14;
  result = (char *)(*(uint64_t (**)(void))(v9 + 24))();
  v15 = *(unsigned __int8 *)(v9 + 72);
  *a6 += v13;
  *(_DWORD *)(v9 + 80) -= v13;
  if (!v15)
    goto LABEL_3;
  return result;
}

uint64_t sub_100393540(uint64_t result, _QWORD *a2, unsigned int a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *(_QWORD **)(result + 608);
  v5 = *(_QWORD *)(result + 408);
  v7 = v4[4];
  v6 = v4[5];
  v8 = v4[6];
  v9 = v4[7];
  v10 = *(unsigned __int8 **)(*a2 + 16 * a3);
  v11 = *(unsigned __int8 **)(*a2 + 8 * ((2 * a3) | 1));
  v12 = 8 * a3;
  v13 = *(unsigned __int8 **)(a2[1] + v12);
  v14 = *(unsigned __int8 **)(a2[2] + v12);
  v16 = *(_BYTE **)a4;
  v15 = *(_BYTE **)(a4 + 8);
  v17 = *(unsigned int *)(result + 116);
  if (v17 < 2)
  {
    if ((v17 & 1) == 0)
      return result;
LABEL_7:
    v32 = *v14;
    v33 = *(int *)(v7 + 4 * v32);
    v34 = *v13;
    v35 = *(_QWORD *)(v8 + 8 * v32) + *(_QWORD *)(v9 + 8 * v34);
    v36 = *(int *)(v6 + 4 * v34);
    v37 = *v10;
    *v16 = *(_BYTE *)(v5 + v33 + v37);
    v38 = (int)(v35 >> 16);
    v16[1] = *(_BYTE *)(v5 + v37 + v38);
    v16[2] = *(_BYTE *)(v5 + v36 + v37);
    v39 = *v11;
    *v15 = *(_BYTE *)(v5 + v33 + v39);
    v15[1] = *(_BYTE *)(v5 + v39 + v38);
    v15[2] = *(_BYTE *)(v5 + v36 + v39);
    return result;
  }
  v18 = 0;
  v19 = v17 >> 1;
  do
  {
    v20 = v13[v18];
    v21 = v14[v18];
    v22 = *(int *)(v7 + 4 * v21);
    v23 = *(_QWORD *)(v8 + 8 * v21) + *(_QWORD *)(v9 + 8 * v20);
    v24 = *v10;
    v25 = *(int *)(v6 + 4 * v20);
    *v16 = *(_BYTE *)(v5 + v22 + v24);
    v26 = (int)(v23 >> 16);
    v16[1] = *(_BYTE *)(v5 + v24 + v26);
    v16[2] = *(_BYTE *)(v5 + v25 + v24);
    v27 = v10[1];
    v16[3] = *(_BYTE *)(v5 + v22 + v27);
    v16[4] = *(_BYTE *)(v5 + v27 + v26);
    v16[5] = *(_BYTE *)(v5 + v25 + v27);
    v28 = *v11;
    *v15 = *(_BYTE *)(v5 + v22 + v28);
    v15[1] = *(_BYTE *)(v5 + v28 + v26);
    v15[2] = *(_BYTE *)(v5 + v25 + v28);
    v29 = v11[1];
    v15[3] = *(_BYTE *)(v5 + v22 + v29);
    LOBYTE(v22) = *(_BYTE *)(v5 + v29 + v26);
    v30 = v10 + 2;
    v31 = v11 + 2;
    v15[4] = v22;
    v16 += 6;
    v15[5] = *(_BYTE *)(v5 + v25 + v29);
    v15 += 6;
    ++v18;
    v11 += 2;
    v10 += 2;
  }
  while ((_DWORD)v19 != (_DWORD)v18);
  v14 += v18;
  v13 += v18;
  v10 = v30;
  v11 = v31;
  if ((*(_DWORD *)(result + 116) & 1) != 0)
    goto LABEL_7;
  return result;
}

uint64_t sub_100393714(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 608) + 24))();
  ++*a6;
  ++*a3;
  return result;
}

uint64_t sub_100393764(uint64_t result, _QWORD *a2, unsigned int a3, _BYTE **a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_QWORD **)(result + 608);
  v5 = *(_QWORD *)(result + 408);
  v7 = v4[4];
  v6 = v4[5];
  v8 = v4[6];
  v9 = v4[7];
  v10 = 8 * a3;
  v11 = *(unsigned __int8 **)(*a2 + v10);
  v12 = *(unsigned __int8 **)(a2[1] + v10);
  v13 = *(unsigned __int8 **)(a2[2] + v10);
  v14 = *a4;
  v15 = *(_DWORD *)(result + 116);
  if (v15 < 2)
  {
    if ((v15 & 1) == 0)
      return result;
LABEL_7:
    v27 = *v12;
    v28 = *v13;
    v29 = (*(_QWORD *)(v8 + 8 * v28) + *(_QWORD *)(v9 + 8 * v27)) >> 16;
    v30 = *(int *)(v6 + 4 * v27);
    v31 = *v11;
    *v14 = *(_BYTE *)(v5 + *(int *)(v7 + 4 * v28) + v31);
    v14[1] = *(_BYTE *)(v5 + v31 + (int)v29);
    v14[2] = *(_BYTE *)(v5 + v30 + v31);
    return result;
  }
  v16 = v15 >> 1;
  do
  {
    v18 = *v12++;
    v17 = v18;
    v19 = *v13++;
    v20 = *(int *)(v7 + 4 * v19);
    v21 = *(_QWORD *)(v8 + 8 * v19) + *(_QWORD *)(v9 + 8 * v17);
    v22 = *(int *)(v6 + 4 * v17);
    v23 = *v11;
    *v14 = *(_BYTE *)(v5 + v20 + v23);
    v24 = (int)(v21 >> 16);
    v14[1] = *(_BYTE *)(v5 + v23 + v24);
    v14[2] = *(_BYTE *)(v5 + v22 + v23);
    v25 = v11 + 2;
    v26 = v11[1];
    v14[3] = *(_BYTE *)(v5 + v20 + v26);
    v14[4] = *(_BYTE *)(v5 + v26 + v24);
    v14[5] = *(_BYTE *)(v5 + v22 + v26);
    v14 += 6;
    v11 = v25;
    --v16;
  }
  while (v16);
  v11 = v25;
  if ((*(_DWORD *)(result + 116) & 1) != 0)
    goto LABEL_7;
  return result;
}

uint64_t sub_100393884(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD);
  uint64_t v12;

  result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 568) = result;
  *(_QWORD *)result = sub_100393954;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  if (*(_BYTE *)(a1 + 98))
  {
    v5 = result;
    v6 = *(unsigned int *)(a1 + 388);
    *(_DWORD *)(result + 32) = v6;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 116);
    v9 = *(_DWORD *)(a1 + 124);
    v10 = (v9 * v8);
    if (a2)
    {
      v11 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(v7 + 32);
      v12 = sub_1003A7EA4(*(unsigned int *)(a1 + 120), v6);
      result = v11(a1, 1, 0, v10, v12, *(unsigned int *)(v5 + 32));
      *(_QWORD *)(v5 + 16) = result;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v7 + 16))(a1, 1, (v9 * v8));
      *(_QWORD *)(v5 + 24) = result;
    }
  }
  return result;
}

uint64_t sub_100393954(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 568);
  if (a2 == 3)
  {
    if (!*(_QWORD *)(v2 + 16))
    {
      v3 = *(_QWORD *)result;
      *(_DWORD *)(v3 + 40) = 3;
      result = (*(uint64_t (**)(uint64_t))v3)(result);
    }
    *(_QWORD *)(v2 + 8) = sub_100393B18;
    *(_DWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 40) = 0;
  }
  else if (a2 == 2)
  {
    if (!*(_QWORD *)(v2 + 16))
    {
      v4 = *(_QWORD *)result;
      *(_DWORD *)(v4 + 40) = 3;
      result = (*(uint64_t (**)(uint64_t))v4)(result);
    }
    *(_QWORD *)(v2 + 8) = sub_100393C38;
    *(_DWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 40) = 0;
  }
  else if (a2)
  {
    v5 = *(_QWORD *)result;
    *(_DWORD *)(v5 + 40) = 3;
    result = (*(uint64_t (**)(uint64_t))v5)(result);
    *(_DWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 40) = 0;
  }
  else if (*(_BYTE *)(result + 98))
  {
    *(_QWORD *)(v2 + 8) = sub_100393A84;
    if (!*(_QWORD *)(v2 + 24))
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)(result + 8) + 56))();
      *(_QWORD *)(v2 + 24) = result;
    }
    *(_DWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 40) = 0;
  }
  else
  {
    *(_QWORD *)(v2 + 8) = *(_QWORD *)(*(_QWORD *)(result + 608) + 8);
    *(_DWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 40) = 0;
  }
  return result;
}

uint64_t sub_100393A84(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v9;
  uint64_t result;

  v9 = a1[71];
  (*(void (**)(void))(a1[76] + 8))();
  result = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, _QWORD))(a1[78] + 8))(a1, *(_QWORD *)(v9 + 24), a5 + 8 * *a6, 0);
  *a6 = *a6;
  return result;
}

uint64_t sub_100393B18(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v11 = a1[71];
  v12 = *(_DWORD *)(v11 + 40);
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 24);
  }
  else
  {
    v13 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t))(a1[1] + 56))(a1, *(_QWORD *)(v11 + 16), *(unsigned int *)(v11 + 36), *(unsigned int *)(v11 + 32), 1);
    *(_QWORD *)(v11 + 24) = v13;
    v12 = *(_DWORD *)(v11 + 40);
  }
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1[76] + 8))(a1, a2, a3, a4, v13, v11 + 40, *(unsigned int *)(v11 + 32));
  v15 = *(_DWORD *)(v11 + 40);
  v16 = v15 - v12;
  if (v15 <= v12)
  {
    v17 = *(_DWORD *)(v11 + 32);
    if (v15 < v17)
      return result;
LABEL_8:
    *(_QWORD *)(v11 + 36) = *(_DWORD *)(v11 + 36) + v17;
    return result;
  }
  result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(a1[78] + 8))(a1, *(_QWORD *)(v11 + 24) + 8 * v12, 0, v16);
  *a6 += v16;
  v17 = *(_DWORD *)(v11 + 32);
  if (*(_DWORD *)(v11 + 40) >= v17)
    goto LABEL_8;
  return result;
}

uint64_t sub_100393C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, int a7)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t result;
  unsigned int v19;
  unsigned int v20;

  v11 = *(_QWORD *)(a1 + 568);
  v12 = *(_DWORD *)(v11 + 40);
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 24);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 56))(a1, *(_QWORD *)(v11 + 16), *(unsigned int *)(v11 + 36), *(unsigned int *)(v11 + 32), 0);
    *(_QWORD *)(v11 + 24) = v13;
    v12 = *(_DWORD *)(v11 + 40);
  }
  v14 = *(_DWORD *)(v11 + 32) - v12;
  v15 = *a6;
  if (v14 >= a7 - (int)v15)
    v14 = a7 - v15;
  v16 = *(_DWORD *)(a1 + 120) - *(_DWORD *)(v11 + 36);
  if (v14 >= v16)
    v17 = v16;
  else
    v17 = v14;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 624) + 8))(a1, v13 + 8 * v12, a5 + 8 * v15, v17);
  *a6 += v17;
  v19 = *(_DWORD *)(v11 + 40) + v17;
  *(_DWORD *)(v11 + 40) = v19;
  v20 = *(_DWORD *)(v11 + 32);
  if (v19 >= v20)
    *(_QWORD *)(v11 + 36) = *(_DWORD *)(v11 + 36) + v20;
  return result;
}

uint64_t sub_100393D1C(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t *, uint64_t, uint64_t, _QWORD);
  uint64_t v22;
  uint64_t v23;

  result = (*(uint64_t (**)(void))a1[1])();
  v3 = result;
  a1[76] = result;
  *(_QWORD *)result = sub_100393F04;
  *(_QWORD *)(result + 8) = sub_100393F18;
  *(_BYTE *)(result + 16) = 0;
  if (*((_BYTE *)a1 + 368))
  {
    v4 = *a1;
    *(_DWORD *)(v4 + 40) = 26;
    result = (*(uint64_t (**)(uint64_t *))v4)(a1);
  }
  if (*((int *)a1 + 14) >= 1)
  {
    v5 = 0;
    v6 = v3 + 192;
    v7 = (_QWORD *)(v3 + 104);
    v8 = a1[36] + 36;
    do
    {
      v9 = *((_DWORD *)a1 + 98);
      v10 = *(_DWORD *)(v8 - 28);
      v11 = *(_DWORD *)v8;
      v12 = *(_DWORD *)(v8 + 4) * *(_DWORD *)(v8 - 24) / *((_DWORD *)a1 + 99);
      v13 = *((_DWORD *)a1 + 96);
      v14 = *((_DWORD *)a1 + 97);
      *(_DWORD *)(v6 + 4 * v5) = v12;
      if (*(_BYTE *)(v8 + 16))
      {
        v15 = v11 * v10 / v9;
        if (v15 == v13 && v12 == v14)
        {
          *v7 = sub_100394064;
        }
        else
        {
          if (2 * v15 == v13 && v12 == v14)
          {
            *v7 = sub_10039406C;
          }
          else if (2 * v15 == v13 && 2 * v12 == v14)
          {
            *v7 = sub_1003941CC;
          }
          else
          {
            v18 = v13 / v15;
            if (v13 % v15 || (v19 = v14 / v12, v14 % v12))
            {
              v20 = *a1;
              *(_DWORD *)(v20 + 40) = 39;
              (*(void (**)(uint64_t *))v20)(a1);
            }
            else
            {
              *v7 = sub_100394364;
              v23 = v6 + v5;
              *(_BYTE *)(v23 + 40) = v18;
              *(_BYTE *)(v23 + 50) = v19;
            }
          }
          v21 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD))(a1[1] + 16);
          v22 = sub_1003A7EA4(*((unsigned int *)a1 + 29), *((int *)a1 + 96));
          result = v21(a1, 1, v22, *((unsigned int *)a1 + 97));
          *(v7 - 10) = result;
        }
      }
      else
      {
        *v7 = sub_10039405C;
      }
      v8 += 96;
      ++v5;
      ++v7;
    }
    while (v5 < *((int *)a1 + 14));
  }
  return result;
}

uint64_t sub_100393F04(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(result + 608);
  v2 = *(_DWORD *)(result + 120);
  *(_DWORD *)(v1 + 184) = *(_DWORD *)(result + 388);
  *(_DWORD *)(v1 + 188) = v2;
  return result;
}

uint64_t sub_100393F18(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, int a7)
{
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(uint64_t, uint64_t, uint64_t, _QWORD);
  void (**v18)(uint64_t, uint64_t, uint64_t, _QWORD);
  void (*v19)(uint64_t, uint64_t, uint64_t, _QWORD);
  unsigned int v20;
  unsigned int v21;
  uint64_t result;
  unsigned int v23;
  signed int v24;

  v11 = *(_QWORD *)(a1 + 608);
  v12 = *(_DWORD *)(v11 + 184);
  v13 = *(_DWORD *)(a1 + 388);
  if (v12 >= v13)
  {
    if (*(int *)(a1 + 56) >= 1)
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 288);
      v17 = (void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v11 + 104);
      do
      {
        v18 = v17 - 10;
        v19 = *v17++;
        v19(a1, v16, *(_QWORD *)(a2 + 8 * v15) + 8 * (*(_DWORD *)(v11 + 192 + 4 * v15) * *a3), v18);
        ++v15;
        v16 += 96;
      }
      while (v15 < *(int *)(a1 + 56));
      v13 = *(_DWORD *)(a1 + 388);
    }
    v12 = 0;
    *(_DWORD *)(v11 + 184) = 0;
  }
  v20 = v13 - v12;
  if (v20 >= *(_DWORD *)(v11 + 188))
    v20 = *(_DWORD *)(v11 + 188);
  if (v20 >= a7 - *a6)
    v21 = a7 - *a6;
  else
    v21 = v20;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 616) + 8))(a1, v11 + 24);
  *a6 += v21;
  v23 = *(_DWORD *)(v11 + 188) - v21;
  v24 = *(_DWORD *)(v11 + 184) + v21;
  *(_DWORD *)(v11 + 184) = v24;
  *(_DWORD *)(v11 + 188) = v23;
  if (v24 >= *(_DWORD *)(a1 + 388))
    ++*a3;
  return result;
}

void sub_10039405C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = 0;
}

void sub_100394064(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = a3;
}

uint64_t sub_10039406C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int8x16_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int8x16_t *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int8x16_t *v21;
  int8x8_t *v22;
  char *v23;
  uint64_t v24;
  int8x8_t v25;
  __int8 v26;
  uint64_t i;
  int8x8x2_t v28;
  int8x16x2_t v29;
  int8x16x2_t v30;

  v4 = *(_DWORD *)(result + 388);
  if (v4 >= 1)
  {
    if (*(_DWORD *)(result + 116))
    {
      v5 = 0;
      v6 = *a4;
      while (1)
      {
        v7 = *(unsigned int *)(result + 116);
        if (!(_DWORD)v7)
          goto LABEL_5;
        v8 = *(_QWORD *)(v6 + 8 * v5);
        v9 = v8 + v7;
        v10 = *(int8x16_t **)(a3 + 8 * v5);
        v11 = v8 + 2;
        if (v9 > v8 + 2)
          v11 = v9;
        v12 = v11 + ~v8;
        if (v12 >= 0xE
          && (v8 >= (unint64_t)v10->u64 + (v12 >> 1) + 1
           || (unint64_t)v10 >= v8 + (v12 & 0xFFFFFFFFFFFFFFFELL) + 2))
        {
          v14 = (v12 >> 1) + 1;
          if (v12 < 0x3E)
          {
            v15 = 0;
LABEL_21:
            v20 = v8 + 2 * (v14 & 0xFFFFFFFFFFFFFFF8);
            v21 = (int8x16_t *)((char *)v10 + (v14 & 0xFFFFFFFFFFFFFFF8));
            v22 = (int8x8_t *)&v10->i8[v15];
            v23 = (char *)(v8 + 2 * v15);
            v24 = v15 - (v14 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v25 = *v22++;
              v28.val[0] = v25;
              v28.val[1] = v25;
              vst2_s8(v23, v28);
              v23 += 16;
              v24 += 8;
            }
            while (v24);
            v8 = v20;
            v10 = v21;
            if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_4;
            goto LABEL_26;
          }
          v15 = v14 & 0xFFFFFFFFFFFFFFE0;
          v16 = v10 + 1;
          v17 = (char *)(v8 + 32);
          v18 = v14 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v19 = v17 - 32;
            v29.val[0] = v16[-1];
            v30.val[0] = *v16;
            v29.val[1] = v29.val[0];
            vst2q_s8(v19, v29);
            v30.val[1] = v30.val[0];
            vst2q_s8(v17, v30);
            v16 += 2;
            v17 += 64;
            v18 -= 32;
          }
          while (v18);
          if (v14 == v15)
            goto LABEL_4;
          if ((v14 & 0x18) != 0)
            goto LABEL_21;
          v10 = (int8x16_t *)((char *)v10 + v15);
          v8 += 2 * v15;
        }
        do
        {
LABEL_26:
          v26 = v10->i8[0];
          v10 = (int8x16_t *)((char *)v10 + 1);
          *(_BYTE *)v8 = v26;
          *(_BYTE *)(v8 + 1) = v26;
          v8 += 2;
        }
        while (v8 < v9);
LABEL_4:
        v4 = *(_DWORD *)(result + 388);
LABEL_5:
        if (++v5 >= v4)
          return result;
      }
    }
    for (i = 0; i < v4; ++i)
      ;
  }
  return result;
}

char *sub_1003941CC(char *result, uint64_t a2, uint64_t a3, char **a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int8x16_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  int8x16_t *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  int8x16_t *v24;
  int8x8_t *v25;
  char *v26;
  unint64_t v27;
  int8x8_t v28;
  __int8 v29;
  int8x8x2_t v30;
  int8x16x2_t v31;
  int8x16x2_t v32;

  if (*((int *)result + 97) >= 1)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    v8 = *a4;
    while (1)
    {
      v10 = *((unsigned int *)v5 + 29);
      if ((_DWORD)v10)
        break;
      v9 = 0;
LABEL_4:
      result = sub_1003A7EB8(v8, v7, (uint64_t)v8, v7 | 1, 1, v9);
      ++v6;
      v7 += 2;
      if (*((_DWORD *)v5 + 97) <= (int)v7)
        return result;
    }
    v11 = *(_QWORD *)&v8[8 * v7];
    v12 = v11 + v10;
    v13 = *(int8x16_t **)(a3 + 8 * v6);
    v14 = v11 + 2;
    if (v12 > v11 + 2)
      v14 = v12;
    v15 = v14 + ~v11;
    if (v15 < 0xE)
      goto LABEL_25;
    if (v11 < (unint64_t)v13->u64 + (v15 >> 1) + 1
      && (unint64_t)v13 < v11 + (v15 & 0xFFFFFFFFFFFFFFFELL) + 2)
    {
      goto LABEL_25;
    }
    v17 = (v15 >> 1) + 1;
    if (v15 >= 0x3E)
    {
      v18 = v17 & 0xFFFFFFFFFFFFFFE0;
      v19 = v13 + 1;
      v20 = (char *)(v11 + 32);
      v21 = v17 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v22 = v20 - 32;
        v31.val[0] = v19[-1];
        v32.val[0] = *v19;
        v31.val[1] = v31.val[0];
        vst2q_s8(v22, v31);
        v32.val[1] = v32.val[0];
        vst2q_s8(v20, v32);
        v19 += 2;
        v20 += 64;
        v21 -= 32;
      }
      while (v21);
      if (v17 == v18)
        goto LABEL_26;
      if ((v17 & 0x18) == 0)
      {
        v13 = (int8x16_t *)((char *)v13 + v18);
        v11 += 2 * v18;
        do
        {
LABEL_25:
          v29 = v13->i8[0];
          v13 = (int8x16_t *)((char *)v13 + 1);
          *(_BYTE *)v11 = v29;
          *(_BYTE *)(v11 + 1) = v29;
          v11 += 2;
        }
        while (v11 < v12);
LABEL_26:
        v9 = *((unsigned int *)v5 + 29);
        goto LABEL_4;
      }
    }
    else
    {
      v18 = 0;
    }
    v23 = v11 + 2 * (v17 & 0xFFFFFFFFFFFFFFF8);
    v24 = (int8x16_t *)((char *)v13 + (v17 & 0xFFFFFFFFFFFFFFF8));
    v25 = (int8x8_t *)&v13->i8[v18];
    v26 = (char *)(v11 + 2 * v18);
    v27 = v18 - (v17 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v28 = *v25++;
      v30.val[0] = v28;
      v30.val[1] = v28;
      vst2_s8(v26, v30);
      v26 += 16;
      v27 += 8;
    }
    while (v27);
    v11 = v23;
    v13 = v24;
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_26;
    goto LABEL_25;
  }
  return result;
}

_DWORD *sub_100394364(_DWORD *result, uint64_t a2, uint64_t a3, char **a4)
{
  int v4;
  _DWORD *v5;
  char *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  char *v26;
  char *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;

  v4 = result[97];
  if (v4 >= 1)
  {
    v5 = result;
    v6 = *a4;
    v7 = *((_QWORD *)result + 76) + *(int *)(a2 + 4);
    v8 = *(_BYTE *)(v7 + 232);
    v9 = *(_BYTE *)(v7 + 242);
    v10 = v9;
    v11 = v9 - 1;
    v12 = v8;
    if (!v8)
    {
      if (v9 < 2u)
      {
        v30 = 0;
        while (!result[29])
        {
          v30 += v10;
          if (v30 >= v4)
            return result;
        }
      }
      else
      {
        v22 = 0;
        while (!v5[29])
        {
          result = sub_1003A7EB8(v6, v22, (uint64_t)v6, v22 + 1, (int)v10 - 1, 0);
          v22 += v10;
          if (v22 >= v5[97])
            return result;
        }
      }
      while (1)
        ;
    }
    if (v9 > 1u)
    {
      v13 = 0;
      v14 = 0;
      v31 = v9;
      do
      {
        v16 = v5[29];
        if ((_DWORD)v16)
        {
          v17 = v11;
          v18 = *(char **)&v6[8 * v14];
          v19 = &v18[v16];
          v20 = *(unsigned __int8 **)(a3 + 8 * v13);
          do
          {
            v21 = *v20++;
            memset(v18, v21, v12);
            v18 += (v12 - 1) + 1;
          }
          while (v18 < v19);
          v15 = v5[29];
          v11 = v17;
          v10 = v31;
        }
        else
        {
          v15 = 0;
        }
        result = sub_1003A7EB8(v6, v14, (uint64_t)v6, (int)v14 + 1, v11, v15);
        ++v13;
        v14 += v10;
      }
      while (v5[97] > (int)v14);
    }
    else
    {
      v23 = 0;
      for (i = 0; i < v4; i += v10)
      {
        v25 = v5[29];
        if ((_DWORD)v25)
        {
          v26 = *(char **)&v6[8 * i];
          v27 = &v26[v25];
          v28 = *(unsigned __int8 **)(a3 + 8 * v23);
          do
          {
            v29 = *v28++;
            result = memset(v26, v29, v12);
            v26 += v12;
          }
          while (v26 < v27);
          v4 = v5[97];
        }
        ++v23;
      }
    }
  }
  return result;
}

uint64_t sub_100394530(uint64_t result)
{
  *(_QWORD *)result = sub_100394588;
  *(_QWORD *)(result + 8) = sub_1003945B4;
  *(_QWORD *)(result + 16) = sub_100394618;
  *(_QWORD *)(result + 24) = sub_100394694;
  *(_QWORD *)(result + 32) = sub_100394780;
  *(_DWORD *)(result + 124) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = off_100454CB0;
  *(_DWORD *)(result + 144) = 126;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  return result;
}

void sub_100394588(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_10037FCB0(a1);
  exit(1);
}

uint64_t *sub_1003945B4(uint64_t *result, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  if (a2 < 0)
  {
    v3 = *(_QWORD *)(v2 + 128);
    if (!v3 || *(int *)(v2 + 124) >= 3)
    {
      result = (uint64_t *)(*(uint64_t (**)(void))(v2 + 16))();
      v3 = *(_QWORD *)(v2 + 128);
    }
    *(_QWORD *)(v2 + 128) = v3 + 1;
  }
  else if (*(_DWORD *)(v2 + 124) >= a2)
  {
    return (uint64_t *)(*(uint64_t (**)(void))(v2 + 16))();
  }
  return result;
}

uint64_t sub_100394618(uint64_t a1)
{
  char v2[200];

  (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 24))(a1, v2);
  return fprintf(__stderrp, "%s\n", v2);
}

uint64_t sub_100394694(uint64_t *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  const char *v8;
  const char *v9;
  int v10;
  int v11;

  v2 = *a1;
  v3 = *(unsigned int *)(*a1 + 40);
  if ((int)v3 < 1 || (int)v3 > *(_DWORD *)(v2 + 144))
  {
    v4 = *(_QWORD *)(v2 + 152);
    if (v4)
    {
      v5 = *(_DWORD *)(v2 + 160);
      v6 = __OFSUB__((_DWORD)v3, v5);
      v7 = v3 - v5;
      if (v7 < 0 == v6 && (int)v3 <= *(_DWORD *)(v2 + 164))
      {
        v8 = *(const char **)(v4 + 8 * v7);
        if (v8)
          goto LABEL_10;
      }
    }
    goto LABEL_9;
  }
  v8 = *(const char **)(*(_QWORD *)(v2 + 136) + 8 * v3);
  if (!v8)
  {
LABEL_9:
    *(_DWORD *)(v2 + 44) = v3;
    v8 = **(const char ***)(v2 + 136);
  }
LABEL_10:
  v9 = v8;
  while (1)
  {
    v11 = *(unsigned __int8 *)v9++;
    v10 = v11;
    if (!v11)
      break;
    if (v10 == 37)
    {
      if (*v9 == 115)
        return sprintf(a2, v8, v2 + 44);
      return sprintf(a2, v8, *(unsigned int *)(v2 + 44), *(unsigned int *)(v2 + 48), *(unsigned int *)(v2 + 52), *(unsigned int *)(v2 + 56), *(unsigned int *)(v2 + 60), *(unsigned int *)(v2 + 64), *(unsigned int *)(v2 + 68), *(unsigned int *)(v2 + 72));
    }
  }
  return sprintf(a2, v8, *(unsigned int *)(v2 + 44), *(unsigned int *)(v2 + 48), *(unsigned int *)(v2 + 52), *(unsigned int *)(v2 + 56), *(unsigned int *)(v2 + 60), *(unsigned int *)(v2 + 64), *(unsigned int *)(v2 + 68), *(unsigned int *)(v2 + 72));
}

uint64_t *sub_100394780(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *(_QWORD *)(v1 + 128) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

float32x4_t sub_100394790(float32x4_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  float v8;
  float v9;
  int v10;
  int v11;
  float v12;
  float *f32;
  int v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t result;

  v3 = 0;
  v4 = a3;
  do
  {
    v5 = (unsigned __int8 *)(*(_QWORD *)(a2 + v3 * 4) + v4);
    v6 = *v5;
    v7 = v5[7];
    v8 = (float)(v7 + v6);
    v9 = (float)(v6 - v7);
    v10 = v5[1];
    v11 = v5[6];
    v12 = (float)(v11 + v10);
    f32 = a1[v3].f32;
    v14 = v10 - v11;
    v15 = v5[2];
    v16 = v5[5];
    v17 = (float)v14;
    v18 = (float)(v16 + v15);
    v19 = (float)(v15 - v16);
    v20 = v5[3];
    LODWORD(v5) = v5[4];
    v21 = v8 + (float)((int)v5 + v20);
    v22 = v8 - (float)((int)v5 + v20);
    v23 = v12 + v18;
    v24 = v12 - v18;
    v25 = v23 + v21;
    v26 = v21 - v23;
    v27 = v19 + (float)(v20 - (int)v5);
    v28 = (float)(v27 - (float)(v9 + v17)) * 0.38268;
    v29 = v28 + (float)(v27 * 0.5412);
    v30 = v28 + (float)((float)(v9 + v17) * 1.3066);
    v31 = (float)(v24 + v22) * 0.70711;
    v32 = v22 + v31;
    v33 = v22 - v31;
    v34 = (float)(v17 + v19) * 0.70711;
    v35 = v34 + v9;
    v36 = v9 - v34;
    *f32 = v25 + -1024.0;
    f32[1] = v35 + v30;
    f32[4] = v26;
    f32[5] = v36 + v29;
    f32[2] = v32;
    f32[3] = v36 - v29;
    f32[6] = v33;
    f32[7] = v35 - v30;
    v3 += 2;
  }
  while (v3 != 16);
  v37 = a1[1];
  v38 = a1[14];
  v39 = a1[15];
  v40 = vaddq_f32(*a1, v38);
  v41 = vsubq_f32(*a1, v38);
  v42 = a1[2];
  v43 = a1[3];
  v44 = a1[12];
  v45 = a1[13];
  v46 = vaddq_f32(v42, v44);
  v47 = vsubq_f32(v42, v44);
  v48 = a1[4];
  v49 = a1[5];
  v50 = a1[10];
  v51 = a1[11];
  v52 = vaddq_f32(v48, v50);
  v53 = vsubq_f32(v48, v50);
  v54 = a1[6];
  v55 = a1[7];
  v56 = a1[8];
  v57 = a1[9];
  v58 = vaddq_f32(v54, v56);
  v59 = vsubq_f32(v54, v56);
  v60 = vaddq_f32(v40, v58);
  v61 = vsubq_f32(v40, v58);
  v62 = vaddq_f32(v46, v52);
  v63 = vsubq_f32(v46, v52);
  v64 = vaddq_f32(v62, v60);
  v65 = vsubq_f32(v60, v62);
  v66 = (float32x4_t)vdupq_n_s32(0x3F3504F3u);
  v67 = vmulq_f32(vaddq_f32(v63, v61), v66);
  v68 = vaddq_f32(v61, v67);
  v69 = vsubq_f32(v61, v67);
  v70 = vaddq_f32(v53, v59);
  v71 = vaddq_f32(v47, v53);
  v72 = vaddq_f32(v41, v47);
  v73 = (float32x4_t)vdupq_n_s32(0x3EC3EF15u);
  v74 = vmulq_f32(vsubq_f32(v70, v72), v73);
  v75 = (float32x4_t)vdupq_n_s32(0x3F0A8BD4u);
  v76 = vmlaq_f32(v74, v75, v70);
  v77 = (float32x4_t)vdupq_n_s32(0x3FA73D75u);
  v78 = vmlaq_f32(v74, v77, v72);
  v79 = vmulq_f32(v71, v66);
  v80 = vaddq_f32(v41, v79);
  v81 = vsubq_f32(v41, v79);
  v82 = vaddq_f32(v81, v76);
  v83 = vsubq_f32(v81, v76);
  v84 = vaddq_f32(v80, v78);
  v85 = vsubq_f32(v80, v78);
  v86 = vaddq_f32(v37, v39);
  v87 = vsubq_f32(v37, v39);
  v88 = vaddq_f32(v43, v45);
  v89 = vsubq_f32(v43, v45);
  v90 = vaddq_f32(v49, v51);
  v91 = vsubq_f32(v49, v51);
  v92 = vaddq_f32(v55, v57);
  v93 = vsubq_f32(v55, v57);
  v94 = vaddq_f32(v86, v92);
  v95 = vsubq_f32(v86, v92);
  v96 = vaddq_f32(v88, v90);
  *a1 = v64;
  a1[1] = vaddq_f32(v96, v94);
  a1[8] = v65;
  a1[9] = vsubq_f32(v94, v96);
  v97 = vmulq_f32(vaddq_f32(vsubq_f32(v88, v90), v95), v66);
  a1[4] = v68;
  a1[5] = vaddq_f32(v95, v97);
  a1[12] = v69;
  a1[13] = vsubq_f32(v95, v97);
  v98 = vaddq_f32(v91, v93);
  v99 = vaddq_f32(v89, v91);
  v100 = vaddq_f32(v87, v89);
  v101 = vmulq_f32(vsubq_f32(v98, v100), v73);
  v102 = vmlaq_f32(v101, v75, v98);
  v103 = vmlaq_f32(v101, v77, v100);
  v104 = vmulq_f32(v99, v66);
  v105 = vaddq_f32(v87, v104);
  v106 = vsubq_f32(v87, v104);
  a1[10] = v82;
  a1[11] = vaddq_f32(v106, v102);
  a1[6] = v83;
  a1[7] = vsubq_f32(v106, v102);
  a1[2] = v84;
  a1[3] = vaddq_f32(v105, v103);
  result = vsubq_f32(v105, v103);
  a1[14] = v85;
  a1[15] = result;
  return result;
}

int32x4_t sub_100394A38(int32x4_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  int32x4_t *v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int32 v26;
  int v27;
  __int32 v28;
  __int32 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t result;

  v3 = 0;
  v4 = a3;
  do
  {
    v5 = &a1[v3];
    v6 = (unsigned __int8 *)(*(_QWORD *)(a2 + v3 * 4) + v4);
    v7 = *v6;
    v8 = v6[7];
    v9 = v8 + v7;
    v10 = v7 - v8;
    v11 = v6[1];
    v12 = v6[6];
    v13 = v12 + v11;
    v14 = v11 - v12;
    v15 = v6[2];
    v16 = v6[5];
    v17 = v16 + v15;
    v18 = v15 - v16;
    v19 = v6[3];
    LODWORD(v6) = v6[4];
    v20 = (_DWORD)v6 + v19;
    LODWORD(v6) = v19 - (_DWORD)v6;
    v21 = v20 + v9;
    v22 = v9 - v20;
    v23 = v17 + v13;
    v24 = v13 - v17;
    v25 = v21 + v23;
    v26 = v21 - v23;
    v27 = (181 * (v24 + v22)) >> 8;
    v28 = v27 + v22;
    v29 = v22 - v27;
    LODWORD(v6) = (_DWORD)v6 + v18;
    v30 = v18 + v14;
    v31 = v14 + v10;
    v32 = (98 * ((int)v6 - v31)) >> 8;
    LODWORD(v6) = v32 + ((139 * (int)v6) >> 8);
    v33 = (181 * v30) >> 8;
    v5[1].i32[0] = v26;
    v5[1].i32[1] = (_DWORD)v6 + v10 - v33;
    v34 = v32 + ((334 * v31) >> 8);
    v5->i32[2] = v28;
    v5->i32[3] = v10 - v33 - (_DWORD)v6;
    v5->i32[0] = v25 - 1024;
    v5->i32[1] = v34 + v33 + v10;
    v5[1].i32[2] = v29;
    v5[1].i32[3] = v33 + v10 - v34;
    v3 += 2;
  }
  while (v3 != 16);
  v35 = a1[1];
  v36 = a1[14];
  v37 = a1[15];
  v38 = vaddq_s32(v36, *a1);
  v39 = vsubq_s32(*a1, v36);
  v40 = a1[2];
  v41 = a1[3];
  v42 = a1[12];
  v43 = a1[13];
  v44 = vaddq_s32(v42, v40);
  v45 = vsubq_s32(v40, v42);
  v46 = a1[4];
  v47 = a1[5];
  v48 = a1[10];
  v49 = a1[11];
  v50 = vaddq_s32(v48, v46);
  v51 = vsubq_s32(v46, v48);
  v52 = a1[6];
  v53 = a1[7];
  v54 = a1[8];
  v55 = a1[9];
  v56 = vaddq_s32(v54, v52);
  v57 = vsubq_s32(v52, v54);
  v58 = vaddq_s32(v56, v38);
  v59 = vsubq_s32(v38, v56);
  v60 = vaddq_s32(v50, v44);
  v61 = vsubq_s32(v44, v50);
  v62 = vaddq_s32(v58, v60);
  v63 = vsubq_s32(v58, v60);
  v64 = vaddq_s32(v61, v59);
  v60.i64[0] = 0xB5000000B5;
  v60.i64[1] = 0xB5000000B5;
  v65 = vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v64.i8, (int32x2_t)0xB5000000B5), 8uLL), vmull_high_s32(v64, v60), 8uLL);
  v66 = vaddq_s32(v59, v65);
  v67 = vsubq_s32(v59, v65);
  v68 = vaddq_s32(v57, v51);
  v69 = vaddq_s32(v51, v45);
  v70 = vaddq_s32(v45, v39);
  v71 = vsubq_s32(v68, v70);
  v72.i64[0] = 0x6200000062;
  v72.i64[1] = 0x6200000062;
  v73 = vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v71.i8, (int32x2_t)0x6200000062), 8uLL), vmull_high_s32(v71, v72), 8uLL);
  v74.i64[0] = 0x8B0000008BLL;
  v74.i64[1] = 0x8B0000008BLL;
  v75 = vdupq_n_s32(0x14Eu);
  v76 = vaddq_s32(v73, vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v68.i8, (int32x2_t)0x8B0000008BLL), 8uLL), vmull_high_s32(v68, v74), 8uLL));
  v77 = vaddq_s32(v73, vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v70.i8, *(int32x2_t *)v75.i8), 8uLL), vmull_high_s32(v70, v75), 8uLL));
  v78 = vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v69.i8, (int32x2_t)0xB5000000B5), 8uLL), vmull_high_s32(v69, v60), 8uLL);
  v79 = vaddq_s32(v39, v78);
  v80 = vsubq_s32(v39, v78);
  v81 = vaddq_s32(v76, v80);
  v82 = vsubq_s32(v80, v76);
  v83 = vaddq_s32(v37, v35);
  v84 = vsubq_s32(v35, v37);
  v85 = vaddq_s32(v43, v41);
  v86 = vsubq_s32(v41, v43);
  v87 = vaddq_s32(v49, v47);
  v88 = vsubq_s32(v47, v49);
  v89 = vaddq_s32(v55, v53);
  v90 = vsubq_s32(v53, v55);
  v91 = vaddq_s32(v89, v83);
  v92 = vsubq_s32(v83, v89);
  v93 = vaddq_s32(v87, v85);
  *a1 = v62;
  a1[1] = vaddq_s32(v91, v93);
  a1[8] = v63;
  a1[9] = vsubq_s32(v91, v93);
  v94 = vaddq_s32(vsubq_s32(v85, v87), v92);
  v95 = vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v94.i8, (int32x2_t)0xB5000000B5), 8uLL), vmull_high_s32(v94, v60), 8uLL);
  a1[4] = v66;
  a1[5] = vaddq_s32(v92, v95);
  a1[12] = v67;
  a1[13] = vsubq_s32(v92, v95);
  v96 = vaddq_s32(v90, v88);
  v97 = vaddq_s32(v88, v86);
  v98 = vaddq_s32(v86, v84);
  v99 = vsubq_s32(v96, v98);
  v100 = vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v99.i8, (int32x2_t)0x6200000062), 8uLL), vmull_high_s32(v99, v72), 8uLL);
  v101 = vaddq_s32(v100, vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v96.i8, (int32x2_t)0x8B0000008BLL), 8uLL), vmull_high_s32(v96, v74), 8uLL));
  v102 = vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v97.i8, (int32x2_t)0xB5000000B5), 8uLL), vmull_high_s32(v97, v60), 8uLL);
  v103 = vsubq_s32(v84, v102);
  a1[10] = v81;
  a1[11] = vaddq_s32(v101, v103);
  a1[6] = v82;
  a1[7] = vsubq_s32(v103, v101);
  v104 = vaddq_s32(v100, vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v98.i8, *(int32x2_t *)v75.i8), 8uLL), vmull_high_s32(v98, v75), 8uLL));
  v105 = vaddq_s32(v84, v102);
  a1[2] = vaddq_s32(v77, v79);
  a1[3] = vaddq_s32(v104, v105);
  result = vsubq_s32(v105, v104);
  a1[14] = vsubq_s32(v79, v77);
  a1[15] = result;
  return result;
}

uint64_t sub_100394D2C(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t i;
  _DWORD *v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  for (i = 0; i != 64; i += 8)
  {
    v4 = (_DWORD *)(result + 4 * i);
    v5 = (unsigned __int8 *)(*(_QWORD *)(a2 + i) + a3);
    v6 = *v5;
    v7 = v5[7];
    v8 = v5[1];
    v9 = v5[6];
    v10 = (v9 + v8);
    v11 = v5[2];
    v12 = v5[5];
    v13 = (v12 + v11);
    v14 = v5[3];
    LODWORD(v5) = v5[4];
    v15 = (_DWORD)v5 + v14 + v7 + v6;
    v16 = v7 + v6 - ((_DWORD)v5 + v14);
    v17 = v13 + v10;
    v18 = v10 - v13;
    v19 = v6 - v7;
    v20 = v8 - v9;
    v21 = v11 - v12;
    LODWORD(v5) = v14 - (_DWORD)v5;
    v22 = 4433 * (v16 + (int)v18) + 1024;
    v23 = (unint64_t)(v22 + 6270 * v16) >> 11;
    v24 = (unint64_t)(v22 + 0x7FFFFFFC4DFLL * v18) >> 11;
    v25 = 9633 * ((int)v5 + v20 + v21 + v19) + 1024;
    v26 = v25 - 3196 * (v21 + v19);
    v27 = v25 - 16069 * ((int)v5 + v20);
    *v4 = 4 * (v15 + v17) - 4096;
    v4[1] = (unint64_t)(12299 * v19 - 7373 * ((int)v5 + v19) + v26) >> 11;
    v4[2] = v23;
    v4[3] = (unint64_t)(25172 * v20 - 20995 * (v21 + v20) + v27) >> 11;
    v4[4] = 4 * (v15 - v17);
    v4[5] = (unint64_t)(16819 * v21 - 20995 * (v21 + v20) + v26) >> 11;
    v4[6] = v24;
    v4[7] = (unint64_t)(2446 * (int)v5 - 7373 * ((int)v5 + v19) + v27) >> 11;
  }
  v28 = 0;
  do
  {
    v29 = (_DWORD *)(result + v28);
    v30 = *(_DWORD *)(result + v28);
    v31 = *(_DWORD *)(result + v28 + 224);
    v32 = v31 + v30;
    v33 = *(_DWORD *)(result + v28 + 32);
    v34 = *(_DWORD *)(result + v28 + 192);
    v35 = v34 + v33;
    v36 = *(_DWORD *)(result + v28 + 64);
    v37 = *(_DWORD *)(result + v28 + 160);
    v38 = v37 + v36;
    v39 = *(_DWORD *)(result + v28 + 96);
    v40 = *(_DWORD *)(result + v28 + 128);
    v41 = v40 + v39;
    v42 = v32 + v41 + 2;
    v43 = v32 - v41;
    v44 = v38 + v35;
    v45 = v35 - v38;
    v46 = v30 - v31;
    v47 = v33 - v34;
    v48 = v36 - v37;
    v49 = v39 - v40;
    *v29 = (unint64_t)(v42 + v44) >> 2;
    v29[32] = (unint64_t)(v42 - v44) >> 2;
    v50 = 4433 * (v43 + v45) + 0x4000;
    v29[16] = (unint64_t)(v50 + 6270 * v43) >> 15;
    v29[48] = (unint64_t)(v50 + 0x7FFFFFFFC4DFLL * v45) >> 15;
    v51 = v48 + v46;
    v52 = v49 + v47;
    v53 = 9633 * (v52 + v51) + 0x4000;
    v54 = v53 - 3196 * v51;
    v55 = v53 - 16069 * v52;
    v56 = -7373 * (v49 + v46);
    v57 = -20995 * (v48 + v47);
    v29[8] = (unint64_t)(v56 + 12299 * v46 + v54) >> 15;
    v29[24] = (unint64_t)(v57 + 25172 * v47 + v55) >> 15;
    v29[40] = (unint64_t)(v57 + 16819 * v48 + v54) >> 15;
    v29[56] = (unint64_t)(v56 + 2446 * v49 + v55) >> 15;
    v28 += 4;
  }
  while ((_DWORD)v28 != 32);
  return result;
}

_OWORD *sub_100395008(_OWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _DWORD *v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = 0;
  result[14] = 0u;
  result[15] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  result[10] = 0u;
  result[11] = 0u;
  result[8] = 0u;
  result[9] = 0u;
  result[6] = 0u;
  result[7] = 0u;
  result[4] = 0u;
  result[5] = 0u;
  result[2] = 0u;
  result[3] = 0u;
  *result = 0u;
  result[1] = 0u;
  do
  {
    v4 = &result[v3];
    v5 = (unsigned __int8 *)(*(_QWORD *)(a2 + v3 * 4) + a3);
    v6 = *v5;
    v7 = v5[6];
    v8 = v7 + v6;
    v9 = v5[1];
    v10 = v5[5];
    v11 = (v10 + v9);
    v12 = v5[2];
    v13 = v5[4];
    v14 = v13 + v12;
    v15 = v5[3];
    v16 = v6 - v7;
    v17 = v9 - v10;
    LODWORD(v5) = v12 - v13;
    v18 = v13 + v12 + v8;
    v19 = 4 * (v15 + v11 + v18) - 3584;
    v20 = v18 - 4 * v15;
    v21 = v8 - (v13 + v12);
    v22 = v11 - v14;
    v23 = (unint64_t)(7542 * v21 + 2578 * ((int)v11 - v14) + 2896 * v20 + 1024) >> 11;
    v24 = 7223 * (v8 - (int)v11) + 1024;
    v25 = (v24 + 2578 * v22 + 0x7FFFFFFE95FLL * (v11 - 2 * (unint64_t)v15)) >> 11;
    v4[6] = (unint64_t)(v24 - 7542 * v21 + 2896 * v20) >> 11;
    LODWORD(v24) = v17 + v16;
    v26 = 1395 * (v16 - v17);
    v27 = (_DWORD)v5 + v17;
    v28 = 5027 * ((int)v5 + v16) + 1024;
    *v4 = v19;
    v4[1] = (unint64_t)(v28 - v26 + 7663 * (int)v24) >> 11;
    v4[2] = v23;
    v4[3] = (unint64_t)(v26 - 11295 * v27 + 7663 * (int)v24 + 1024) >> 11;
    v4[4] = v25;
    v4[5] = (unint64_t)(v28 + 15326 * (int)v5 - 11295 * v27) >> 11;
    v3 += 2;
  }
  while (v3 != 14);
  v29 = 0;
  do
  {
    v30 = (_DWORD *)((char *)result + v29);
    v31 = *(_DWORD *)((char *)result + v29);
    v32 = *(_DWORD *)((char *)result + v29 + 192);
    v33 = v32 + v31;
    v34 = *(_DWORD *)((char *)result + v29 + 32);
    v35 = *(_DWORD *)((char *)result + v29 + 160);
    v36 = v35 + v34;
    v37 = *(_DWORD *)((char *)result + v29 + 64);
    v38 = *(_DWORD *)((char *)result + v29 + 128);
    v39 = v38 + v37;
    v40 = *(int *)((char *)result + v29 + 96);
    v41 = v31 - v32;
    v42 = v34 - v35;
    v43 = v37 - v38;
    *v30 = (unint64_t)(10700 * (v40 + v36 + v39 + v33) + 0x4000) >> 15;
    v44 = 3783 * (v39 + v33 - 4 * v40);
    v45 = 9850 * (v33 - v39);
    v46 = 3367 * (v36 - v39);
    v30[16] = (unint64_t)(v46 + v45 + v44 + 0x4000) >> 15;
    v47 = 9434 * (v33 - v36) + 0x4000;
    v30[32] = (unint64_t)(v47 + v46 + 0x7FFFFFFFE272 * (v36 - 2 * v40)) >> 15;
    v30[48] = (unint64_t)(v47 - v45 + v44) >> 15;
    v48 = 10009 * (v42 + v41);
    v49 = 1822 * (v41 - v42);
    v50 = -14752 * (v43 + v42);
    v51 = 6565 * (v43 + v41) + 0x4000;
    v30[8] = (unint64_t)(v51 - v49 + v48) >> 15;
    v30[24] = (unint64_t)(v50 + v49 + v48 + 0x4000) >> 15;
    v30[40] = (unint64_t)(v51 + 20017 * v43 + v50) >> 15;
    v29 += 4;
  }
  while ((_DWORD)v29 != 28);
  return result;
}

uint64_t sub_1003952D8(uint64_t result, _QWORD *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  _DWORD *v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v3 = 0;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  v4 = a3;
  v5 = a2[1];
  v6 = (unsigned __int8 *)(*a2 + a3);
  v7 = *v6;
  v8 = v6[5];
  v9 = v6[1];
  v10 = v6[4];
  v11 = v10 + v9;
  v12 = v6[2];
  LODWORD(v6) = v6[3];
  v13 = (_DWORD)v6 + v12 + v8 + v7;
  v14 = v8 + v7 - ((_DWORD)v6 + v12);
  v15 = v9 - v10;
  v16 = v12 - (_DWORD)v6;
  v17 = 4 * (v13 + v11) - 3072;
  v18 = (unint64_t)(5793 * (v13 - 2 * v11) + 1024) >> 11;
  v19 = (unint64_t)(2998 * (v16 + v7 - v8) + 1024) >> 11;
  *(_DWORD *)result = v17;
  *(_DWORD *)(result + 4) = v19 + 4 * (v15 + v7 - v8);
  *(_DWORD *)(result + 8) = (10033 * v14 + 1024) >> 11;
  *(_DWORD *)(result + 12) = 4 * (v7 - v8 - (v15 + v16));
  *(_DWORD *)(result + 16) = v18;
  *(_DWORD *)(result + 20) = v19 + 4 * (v16 - v15);
  v20 = (unsigned __int8 *)(v5 + v4);
  v21 = *v20;
  v22 = v20[5];
  v23 = v20[1];
  v24 = v20[4];
  LODWORD(v19) = v20[2];
  LODWORD(v20) = v20[3];
  v25 = (_DWORD)v20 + v19 + v22 + v21;
  LODWORD(v18) = v22 + v21 - ((_DWORD)v20 + v19);
  v26 = v21 - v22;
  LODWORD(v20) = v19 - (_DWORD)v20;
  v27 = (unint64_t)(2998 * ((int)v20 + v26) + 1024) >> 11;
  *(_DWORD *)(result + 32) = 4 * (v25 + v24 + v23) - 3072;
  *(_DWORD *)(result + 36) = v27 + 4 * (v23 - v24 + v26);
  *(_DWORD *)(result + 40) = (10033 * (int)v18 + 1024) >> 11;
  *(_DWORD *)(result + 44) = 4 * (v26 - (v23 - v24 + (_DWORD)v20));
  *(_DWORD *)(result + 48) = (unint64_t)(5793 * (v25 - 2 * (v24 + v23)) + 1024) >> 11;
  *(_DWORD *)(result + 52) = v27 + 4 * ((_DWORD)v20 - (v23 - v24));
  v28 = a2[3];
  v29 = (unsigned __int8 *)(a2[2] + v4);
  v30 = *v29;
  LODWORD(v18) = v29[5];
  v31 = v29[2];
  LODWORD(v27) = v29[3];
  v32 = v27 + v31 + v18 + v30;
  v33 = v18 + v30 - (v27 + v31);
  v34 = v29[1];
  LODWORD(v29) = v29[4];
  v35 = v30 - v18;
  LODWORD(v18) = (_DWORD)v29 + v34;
  LODWORD(v29) = v34 - (_DWORD)v29;
  v36 = v31 - v27;
  v37 = (unint64_t)(2998 * (v36 + v35) + 1024) >> 11;
  *(_DWORD *)(result + 64) = 4 * (v32 + v18) - 3072;
  *(_DWORD *)(result + 68) = v37 + 4 * ((_DWORD)v29 + v35);
  *(_DWORD *)(result + 72) = (10033 * v33 + 1024) >> 11;
  *(_DWORD *)(result + 76) = 4 * (v35 - ((_DWORD)v29 + v36));
  *(_DWORD *)(result + 80) = (unint64_t)(5793 * (v32 - 2 * (int)v18) + 1024) >> 11;
  *(_DWORD *)(result + 84) = v37 + 4 * (v36 - (_DWORD)v29);
  v38 = (unsigned __int8 *)(v28 + v4);
  LODWORD(v28) = *(unsigned __int8 *)(v28 + v4);
  v39 = v38[5];
  v40 = v38[1];
  v41 = v38[4];
  LODWORD(v27) = v38[2];
  LODWORD(v38) = v38[3];
  v42 = (_DWORD)v38 + v27 + v39 + v28;
  LODWORD(v18) = v39 + v28 - ((_DWORD)v38 + v27);
  LODWORD(v28) = v28 - v39;
  LODWORD(v38) = v27 - (_DWORD)v38;
  v43 = (unint64_t)(2998 * ((int)v38 + (int)v28) + 1024) >> 11;
  *(_DWORD *)(result + 96) = 4 * (v42 + v41 + v40) - 3072;
  *(_DWORD *)(result + 100) = v43 + 4 * (v40 - v41 + v28);
  *(_DWORD *)(result + 104) = (10033 * (int)v18 + 1024) >> 11;
  *(_DWORD *)(result + 108) = 4 * (v28 - (v40 - v41 + (_DWORD)v38));
  *(_DWORD *)(result + 112) = (unint64_t)(5793 * (v42 - 2 * (v41 + v40)) + 1024) >> 11;
  *(_DWORD *)(result + 116) = v43 + 4 * ((_DWORD)v38 - (v40 - v41));
  v44 = a2[5];
  v45 = (unsigned __int8 *)(a2[4] + v4);
  v46 = *v45;
  LODWORD(v18) = v45[5];
  v47 = v45[1];
  v48 = v45[4];
  LODWORD(v43) = v45[2];
  LODWORD(v45) = v45[3];
  v49 = (_DWORD)v45 + v43 + v18 + v46;
  v50 = v18 + v46 - ((_DWORD)v45 + v43);
  v51 = v46 - v18;
  LODWORD(v45) = v43 - (_DWORD)v45;
  v52 = (unint64_t)(2998 * ((int)v45 + v51) + 1024) >> 11;
  *(_DWORD *)(result + 128) = 4 * (v49 + v48 + v47) - 3072;
  *(_DWORD *)(result + 132) = v52 + 4 * (v47 - v48 + v51);
  *(_DWORD *)(result + 136) = (10033 * v50 + 1024) >> 11;
  *(_DWORD *)(result + 140) = 4 * (v51 - (v47 - v48 + (_DWORD)v45));
  *(_DWORD *)(result + 144) = (unint64_t)(5793 * (v49 - 2 * (v48 + v47)) + 1024) >> 11;
  *(_DWORD *)(result + 148) = v52 + 4 * ((_DWORD)v45 - (v47 - v48));
  v53 = (unsigned __int8 *)(v44 + v4);
  LODWORD(v45) = *v53;
  LODWORD(v44) = v53[5];
  LODWORD(v18) = v53[1];
  v54 = v53[4];
  v55 = v53[2];
  LODWORD(v53) = v53[3];
  LODWORD(v37) = (_DWORD)v53 + v55 + v44 + (_DWORD)v45;
  v56 = v44 + (_DWORD)v45 - ((_DWORD)v53 + v55);
  LODWORD(v45) = (_DWORD)v45 - v44;
  LODWORD(v53) = v55 - (_DWORD)v53;
  v57 = (unint64_t)(2998 * ((int)v53 + (int)v45) + 1024) >> 11;
  *(_DWORD *)(result + 160) = 4 * (v37 + v54 + v18) - 3072;
  *(_DWORD *)(result + 164) = v57 + 4 * (v18 - v54 + (_DWORD)v45);
  *(_DWORD *)(result + 168) = (10033 * v56 + 1024) >> 11;
  *(_DWORD *)(result + 172) = 4 * ((_DWORD)v45 - (v18 - v54 + (_DWORD)v53));
  *(_DWORD *)(result + 176) = (unint64_t)(5793 * ((int)v37 - 2 * (v54 + (int)v18)) + 1024) >> 11;
  *(_DWORD *)(result + 180) = v57 + 4 * ((_DWORD)v53 - (v18 - v54));
  do
  {
    v58 = (_DWORD *)(result + v3);
    v59 = *(_DWORD *)(result + v3);
    v60 = *(_DWORD *)(result + v3 + 160);
    v61 = v60 + v59;
    v62 = *(_DWORD *)(result + v3 + 32);
    v63 = *(_DWORD *)(result + v3 + 128);
    v64 = v63 + v62;
    v65 = *(_DWORD *)(result + v3 + 64);
    v66 = *(_DWORD *)(result + v3 + 96);
    v67 = v66 + v65;
    v68 = v59 - v60;
    v69 = v62 - v63;
    v70 = v65 - v66;
    *v58 = (unint64_t)(14564 * (v67 + v61 + v64) + 0x4000) >> 15;
    v58[16] = (unint64_t)(17837 * (v61 - v67) + 0x4000) >> 15;
    v58[32] = (unint64_t)(10298 * (v67 + v61 - 2 * v64) + 0x4000) >> 15;
    v71 = 5331 * (v70 + v68) + 0x4000;
    v58[8] = (unint64_t)(v71 + 14564 * (v69 + v68)) >> 15;
    v58[24] = (unint64_t)(14564 * (v68 - (v69 + v70)) + 0x4000) >> 15;
    v58[40] = (unint64_t)(v71 + 14564 * (v70 - v69)) >> 15;
    v3 += 4;
  }
  while ((_DWORD)v3 != 24);
  return result;
}

double sub_1003957A8(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  double result;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a3;
  v5 = a2[1];
  v6 = (unsigned __int8 *)(*a2 + a3);
  v7 = *v6;
  v8 = v6[4];
  v9 = v6[1];
  v10 = v6[3];
  LODWORD(v6) = v6[2];
  v11 = v10 + v9 + v8 + v7;
  v12 = v7 - v8;
  v13 = 8 * (v11 + (_DWORD)v6) - 5120;
  LODWORD(v6) = v11 - 4 * (_DWORD)v6;
  v14 = 6476 * (v8 + v7 - ((int)v10 + (int)v9)) + 512;
  *(_DWORD *)(a1 + 16) = (unint64_t)(v14 - 2896 * (int)v6) >> 10;
  v15 = 6810 * ((int)v9 - (int)v10 + v12) + 512;
  *(_DWORD *)a1 = v13;
  *(_DWORD *)(a1 + 4) = (unint64_t)(v15 + 4209 * v12) >> 10;
  *(_DWORD *)(a1 + 8) = (unint64_t)(v14 + 2896 * (int)v6) >> 10;
  *(_DWORD *)(a1 + 12) = (unint64_t)(v15 + 0x3FFFFFFBA5CLL * (v9 - v10)) >> 10;
  v16 = (unsigned __int8 *)(v5 + a3);
  v17 = *v16;
  v18 = v16[4];
  v19 = v16[1];
  v20 = v16[3];
  LODWORD(v16) = v16[2];
  v21 = v20 + v19 + v18 + v17;
  v22 = v18 + v17 - (v20 + v19);
  v23 = v17 - v18;
  v24 = v19 - v20;
  LODWORD(v19) = 8 * (v21 + (_DWORD)v16) - 5120;
  LODWORD(v16) = v21 - 4 * (_DWORD)v16;
  v25 = 6476 * v22 + 512;
  v26 = (unint64_t)(v25 + 2896 * (int)v16) >> 10;
  *(_DWORD *)(a1 + 48) = (unint64_t)(v25 - 2896 * (int)v16) >> 10;
  v27 = 6810 * ((int)v24 + v23) + 512;
  *(_DWORD *)(a1 + 32) = v19;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v27 + 4209 * v23) >> 10;
  *(_DWORD *)(a1 + 40) = v26;
  *(_DWORD *)(a1 + 44) = (unint64_t)(v27 + 0x3FFFFFFBA5CLL * v24) >> 10;
  v28 = a2[3];
  v29 = (unsigned __int8 *)(a2[2] + v4);
  LODWORD(v24) = *v29;
  LODWORD(v25) = v29[4];
  v30 = v29[1];
  v31 = v29[3];
  LODWORD(v29) = v29[2];
  v32 = v31 + v30 + v25 + v24;
  LODWORD(v19) = v25 + v24 - (v31 + v30);
  LODWORD(v24) = v24 - v25;
  v33 = v30 - v31;
  LODWORD(v30) = 8 * (v32 + (_DWORD)v29) - 5120;
  LODWORD(v29) = v32 - 4 * (_DWORD)v29;
  v34 = 6476 * (int)v19 + 512;
  v35 = (unint64_t)(v34 + 2896 * (int)v29) >> 10;
  *(_DWORD *)(a1 + 80) = (unint64_t)(v34 - 2896 * (int)v29) >> 10;
  v36 = 6810 * ((int)v33 + (int)v24) + 512;
  *(_DWORD *)(a1 + 64) = v30;
  *(_DWORD *)(a1 + 68) = (unint64_t)(v36 + 4209 * (int)v24) >> 10;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = (unint64_t)(v36 + 0x3FFFFFFBA5CLL * v33) >> 10;
  v37 = (unsigned __int8 *)(v28 + v4);
  LODWORD(v28) = *(unsigned __int8 *)(v28 + v4);
  LODWORD(v24) = v37[4];
  v38 = v37[1];
  v39 = v37[3];
  v40 = v37[2];
  v41 = v39 + v38 + v24 + v28;
  LODWORD(v33) = v24 + v28 - (v39 + v38);
  LODWORD(v28) = v28 - v24;
  v42 = v38 - v39;
  LODWORD(v37) = 8 * (v41 + v40) - 5120;
  LODWORD(v38) = v41 - 4 * v40;
  v43 = 6476 * (int)v33 + 512;
  v44 = (unint64_t)(v43 + 2896 * (int)v38) >> 10;
  v45 = (unint64_t)(v43 - 2896 * (int)v38) >> 10;
  v46 = 6810 * ((int)v42 + (int)v28) + 512;
  v47 = (unsigned __int8 *)(a2[4] + v4);
  *(_DWORD *)(a1 + 108) = (unint64_t)(v46 + 0x3FFFFFFBA5CLL * v42) >> 10;
  *(_DWORD *)(a1 + 112) = v45;
  *(_DWORD *)(a1 + 96) = (_DWORD)v37;
  *(_DWORD *)(a1 + 100) = (unint64_t)(v46 + 4209 * (int)v28) >> 10;
  *(_DWORD *)(a1 + 104) = v44;
  LODWORD(v28) = *v47;
  LODWORD(v42) = v47[4];
  v48 = v47[1];
  v49 = v47[3];
  LODWORD(v35) = v49 + v48 + v42 + v28;
  v50 = v47[2];
  LODWORD(v47) = 8 * (v35 + v50) - 5120;
  LODWORD(v10) = v35 - 4 * v50;
  v51 = v42 + v28 - (v49 + v48);
  LODWORD(v28) = v28 - v42;
  v52 = 6476 * v51 + 512;
  v53 = (unint64_t)(v52 + 2896 * (int)v10) >> 10;
  v54 = (unint64_t)(v52 - 2896 * (int)v10) >> 10;
  v55 = 6810 * ((int)v48 - (int)v49 + (int)v28) + 512;
  v56 = (unint64_t)(v55 + 4209 * (int)v28) >> 10;
  v57 = (unint64_t)(v55 + 0x3FFFFFFBA5CLL * (v48 - v49)) >> 10;
  LODWORD(v6) = *(_DWORD *)a1;
  LODWORD(v42) = *(_DWORD *)(a1 + 4);
  v58 = (int)v47 + *(_DWORD *)a1;
  LODWORD(v10) = *(_DWORD *)(a1 + 32);
  LODWORD(v52) = *(_DWORD *)(a1 + 36);
  v59 = (int)v37 + (int)v10;
  v60 = v59 + v58;
  *(_DWORD *)(a1 + 140) = v57;
  *(_DWORD *)(a1 + 144) = v54;
  v61 = v58 - v59;
  v62 = (int)v10 - (int)v37;
  v64 = *(int *)(a1 + 64);
  v63 = *(int *)(a1 + 68);
  *(_DWORD *)(a1 + 136) = v53;
  v65 = 3707 * (v60 - 4 * v64);
  v66 = 8290 * v61 + 0x4000;
  v67 = 8716 * (v62 + (int)v6 - (int)v47) + 0x4000;
  v68 = (unint64_t)(v67 + 5387 * ((int)v6 - (int)v47)) >> 15;
  v69 = (unint64_t)(v67 + 0x7FFFFFFFA6DCLL * v62) >> 15;
  v70 = (int)v42 + (int)v56;
  v71 = *(_DWORD *)(a1 + 100);
  v72 = *(_DWORD *)(a1 + 104);
  v73 = v71 + (int)v52;
  LODWORD(v56) = v42 - v56;
  v74 = (int)v52 - v71;
  *(_DWORD *)a1 = (unint64_t)(10486 * (v60 + v64) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 4) = (unint64_t)(10486 * (v73 + v70 + v63) + 0x4000) >> 15;
  v75 = 3707 * (v73 + v70 - 4 * v63);
  v76 = 8290 * (v70 - v73) + 0x4000;
  *(_DWORD *)(a1 + 64) = (unint64_t)(v66 + v65) >> 15;
  *(_DWORD *)(a1 + 68) = (unint64_t)(v76 + v75) >> 15;
  *(_DWORD *)(a1 + 128) = (unint64_t)(v66 - v65) >> 15;
  *(_DWORD *)(a1 + 132) = (unint64_t)(v76 - v75) >> 15;
  v77 = 8716 * (v74 + (int)v56) + 0x4000;
  *(_DWORD *)(a1 + 32) = v68;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v77 + 5387 * (int)v56) >> 15;
  *(_DWORD *)(a1 + 96) = v69;
  *(_DWORD *)(a1 + 100) = (unint64_t)(v77 + 0x7FFFFFFFA6DCLL * v74) >> 15;
  LODWORD(v69) = *(_DWORD *)(a1 + 8);
  LODWORD(v56) = *(_DWORD *)(a1 + 12);
  LODWORD(v74) = *(_DWORD *)(a1 + 136);
  LODWORD(v77) = *(_DWORD *)(a1 + 140);
  v78 = (int)v74 + (int)v69;
  LODWORD(v60) = *(_DWORD *)(a1 + 40);
  LODWORD(v44) = *(_DWORD *)(a1 + 44);
  v79 = v72 + (int)v60;
  v80 = v79 + v78;
  v81 = v78 - v79;
  LODWORD(v69) = v69 - v74;
  v82 = (int)v60 - v72;
  v83 = *(int *)(a1 + 72);
  v84 = *(int *)(a1 + 76);
  v85 = v80 + v83;
  v86 = 3707 * (v80 - 4 * v83);
  v87 = 8290 * v81 + 0x4000;
  v88 = v87 + v86;
  v89 = v87 - v86;
  v90 = 8716 * (v82 + (int)v69) + 0x4000;
  v91 = v90 + 5387 * (int)v69;
  v92 = v90 + 0x7FFFFFFFA6DCLL * v82;
  v93 = (int)v77 + (int)v56;
  v94 = *(_DWORD *)(a1 + 108);
  v95 = *(_DWORD *)(a1 + 112);
  v96 = v94 + (int)v44;
  LODWORD(v56) = v56 - v77;
  *(_DWORD *)(a1 + 8) = (unint64_t)(10486 * v85 + 0x4000) >> 15;
  *(_DWORD *)(a1 + 12) = (unint64_t)(10486 * (v96 + v93 + v84) + 0x4000) >> 15;
  v97 = (int)v44 - v94;
  v98 = 3707 * (v96 + v93 - 4 * v84);
  v99 = 8290 * (v93 - v96) + 0x4000;
  *(_DWORD *)(a1 + 72) = v88 >> 15;
  *(_DWORD *)(a1 + 76) = (unint64_t)(v99 + v98) >> 15;
  *(_DWORD *)(a1 + 136) = v89 >> 15;
  *(_DWORD *)(a1 + 140) = (unint64_t)(v99 - v98) >> 15;
  v100 = 8716 * (v97 + (int)v56) + 0x4000;
  *(_DWORD *)(a1 + 40) = v91 >> 15;
  *(_DWORD *)(a1 + 44) = (unint64_t)(v100 + 5387 * (int)v56) >> 15;
  *(_DWORD *)(a1 + 104) = v92 >> 15;
  *(_DWORD *)(a1 + 108) = (unint64_t)(v100 + 0x7FFFFFFFA6DCLL * v97) >> 15;
  LODWORD(v91) = *(_DWORD *)(a1 + 16);
  LODWORD(v56) = *(_DWORD *)(a1 + 144);
  v101 = (int)v56 + (int)v91;
  LODWORD(v100) = *(_DWORD *)(a1 + 48);
  v102 = v95 + (int)v100;
  v103 = *(int *)(a1 + 80);
  LODWORD(v91) = v91 - v56;
  v104 = (int)v100 - v95;
  *(_DWORD *)(a1 + 16) = (unint64_t)(10486 * (v102 + v101 + v103) + 0x4000) >> 15;
  v105 = 3707 * (v102 + v101 - 4 * v103);
  v106 = 8290 * (v101 - v102) + 0x4000;
  *(_DWORD *)(a1 + 80) = (unint64_t)(v106 + v105) >> 15;
  *(_DWORD *)(a1 + 144) = (unint64_t)(v106 - v105) >> 15;
  v107 = 8716 * (v104 + (int)v91) + 0x4000;
  *(_DWORD *)(a1 + 48) = (unint64_t)(v107 + 5387 * (int)v91) >> 15;
  *(_DWORD *)(a1 + 112) = (unint64_t)(v107 + 0x7FFFFFFFA6DCLL * v104) >> 15;
  return result;
}

double sub_100395CF8(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  double result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a2[1];
  v5 = (unsigned __int8 *)(*a2 + a3);
  v6 = *v5;
  v7 = v5[3];
  v8 = v7 + v6;
  v9 = v5[1];
  v10 = v5[2];
  v11 = v10 + v9;
  v12 = v6 - v7;
  v13 = v9 - v10;
  v14 = 16 * (v11 + v8) - 0x2000;
  v15 = 16 * (v8 - v11);
  v16 = 4433 * ((int)v13 + v12) + 256;
  *(_DWORD *)a1 = v14;
  *(_DWORD *)(a1 + 4) = (unint64_t)(v16 + 6270 * v12) >> 9;
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 12) = (unint64_t)(v16 + 0x1FFFFFFC4DFLL * v13) >> 9;
  v17 = (unsigned __int8 *)(v4 + a3);
  v18 = *v17;
  LODWORD(v13) = v17[3];
  LODWORD(v16) = v13 + v18;
  v19 = v17[1];
  v20 = v17[2];
  v21 = v20 + v19;
  v22 = v18 - v13;
  v23 = v19 - v20;
  v24 = 4433 * ((int)v23 + v22) + 256;
  *(_DWORD *)(a1 + 32) = 16 * (v21 + v16) - 0x2000;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v24 + 6270 * v22) >> 9;
  *(_DWORD *)(a1 + 40) = 16 * (v16 - v21);
  *(_DWORD *)(a1 + 44) = (unint64_t)(v24 + 0x1FFFFFFC4DFLL * v23) >> 9;
  v25 = a2[3];
  v26 = (unsigned __int8 *)(a2[2] + a3);
  v27 = *v26;
  LODWORD(v16) = v26[3];
  LODWORD(v24) = v16 + v27;
  v28 = v26[1];
  v29 = v26[2];
  v30 = v29 + v28;
  v31 = v27 - v16;
  v32 = v28 - v29;
  LODWORD(v29) = 16 * (v29 + v28 + v24) - 0x2000;
  v33 = 4433 * ((int)v32 + v31) + 256;
  v34 = (unint64_t)(v33 + 6270 * v31) >> 9;
  *(_DWORD *)(a1 + 64) = v29;
  *(_DWORD *)(a1 + 68) = v34;
  *(_DWORD *)(a1 + 72) = 16 * (v24 - v30);
  *(_DWORD *)(a1 + 76) = (unint64_t)(v33 + 0x1FFFFFFC4DFLL * v32) >> 9;
  v35 = (unsigned __int8 *)(v25 + a3);
  LODWORD(v25) = *v35;
  LODWORD(v32) = v35[3];
  LODWORD(v24) = v32 + v25;
  v36 = v35[1];
  v37 = v35[2];
  v38 = v37 + v36;
  LODWORD(v32) = v25 - v32;
  v39 = v36 - v37;
  LODWORD(v36) = 16 * (v38 + v24) - 0x2000;
  LODWORD(v25) = v24 - v38;
  v40 = 4433 * ((int)v39 + (int)v32) + 256;
  v41 = (unint64_t)(v40 + 6270 * (int)v32) >> 9;
  v42 = v40 + 0x1FFFFFFC4DFLL * v39;
  LODWORD(v40) = *(_DWORD *)(a1 + 4);
  v43 = (int)v36 + *(_DWORD *)a1 + 2;
  v44 = *(_DWORD *)(a1 + 32);
  v45 = *(_DWORD *)(a1 + 36);
  v46 = (int)v29 + v44;
  v47 = *(_DWORD *)a1 - v36;
  v48 = v44 - (int)v29;
  v49 = (unint64_t)(v43 + v46) >> 2;
  v50 = v43 - v46;
  v51 = 4433 * (v48 + v47) + 0x4000;
  v52 = v51 + 6270 * v47;
  v53 = v51 + 0x7FFFFFFFC4DFLL * v48;
  v54 = (int)v40 + (int)v41 + 2;
  LODWORD(v41) = v40 - v41;
  v55 = v45 + (int)v34;
  *(_DWORD *)a1 = v49;
  *(_DWORD *)(a1 + 4) = (unint64_t)(v54 + v55) >> 2;
  LODWORD(v25) = 16 * v25;
  v56 = v45 - (int)v34;
  *(_DWORD *)(a1 + 64) = v50 >> 2;
  *(_DWORD *)(a1 + 68) = (unint64_t)(v54 - v55) >> 2;
  v57 = 4433 * (v56 + (int)v41) + 0x4000;
  *(_DWORD *)(a1 + 32) = v52 >> 15;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v57 + 6270 * (int)v41) >> 15;
  *(_DWORD *)(a1 + 96) = v53 >> 15;
  *(_DWORD *)(a1 + 100) = (unint64_t)(v57 + 0x7FFFFFFFC4DFLL * v56) >> 15;
  LODWORD(v56) = *(_DWORD *)(a1 + 8);
  LODWORD(v41) = *(_DWORD *)(a1 + 12);
  v58 = (int)v25 + (int)v56 + 2;
  LODWORD(v56) = v56 - v25;
  LODWORD(v25) = *(_DWORD *)(a1 + 40);
  LODWORD(v53) = *(_DWORD *)(a1 + 44);
  LODWORD(v50) = *(_DWORD *)(a1 + 72);
  LODWORD(v49) = *(_DWORD *)(a1 + 76);
  v59 = (int)v50 + (int)v25;
  v60 = (int)v25 - (int)v50;
  v61 = v58 + v59;
  v62 = v58 - v59;
  v63 = 4433 * (v60 + (int)v56) + 0x4000;
  v42 >>= 9;
  *(_DWORD *)(a1 + 104) = (unint64_t)(v63 + 0x7FFFFFFFC4DFLL * v60) >> 15;
  *(_DWORD *)(a1 + 108) = v42;
  v64 = (int)v42 + (int)v41 + 2;
  LODWORD(v42) = v41 - v42;
  v65 = (int)v49 + (int)v53;
  v66 = (int)v53 - (int)v49;
  *(_DWORD *)(a1 + 8) = v61 >> 2;
  *(_DWORD *)(a1 + 12) = (unint64_t)(v64 + v65) >> 2;
  *(_DWORD *)(a1 + 72) = v62 >> 2;
  *(_DWORD *)(a1 + 76) = (unint64_t)(v64 - v65) >> 2;
  v67 = 4433 * (v66 + (int)v42) + 0x4000;
  *(_DWORD *)(a1 + 40) = (unint64_t)(v63 + 6270 * (int)v56) >> 15;
  *(_DWORD *)(a1 + 44) = (unint64_t)(v67 + 6270 * (int)v42) >> 15;
  *(_DWORD *)(a1 + 108) = (unint64_t)(v67 + 0x7FFFFFFFC4DFLL * v66) >> 15;
  return result;
}

double sub_10039600C(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  double result;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a3;
  v5 = a2[1];
  v6 = (unsigned __int8 *)(*a2 + a3);
  v7 = *v6;
  v8 = v6[2];
  v9 = v8 + v7;
  LODWORD(v6) = v6[1];
  v10 = v7 - v8;
  v11 = 16 * (v9 + (_DWORD)v6) - 6144;
  *(_DWORD *)(a1 + 8) = (5793 * (v9 - 2 * (int)v6) + 256) >> 9;
  v12 = (10033 * v10 + 256) >> 9;
  *(_DWORD *)a1 = v11;
  *(_DWORD *)(a1 + 4) = v12;
  v13 = (unsigned __int8 *)(v5 + a3);
  LODWORD(v5) = *v13;
  v14 = v13[2];
  v15 = v14 + v5;
  LODWORD(v13) = v13[1];
  v16 = v5 - v14;
  v17 = 16 * (v15 + (_DWORD)v13) - 6144;
  LODWORD(v5) = 5793 * (v15 - 2 * (_DWORD)v13) + 256;
  v18 = (10033 * v16 + 256) >> 9;
  *(_DWORD *)(a1 + 32) = v17;
  *(_DWORD *)(a1 + 36) = v18;
  *(_DWORD *)(a1 + 40) = (int)v5 >> 9;
  v19 = (unsigned __int8 *)(a2[2] + v4);
  v20 = *v19;
  v21 = v19[2];
  LODWORD(v19) = v19[1];
  v22 = 16 * (v21 + v20 + (_DWORD)v19) - 6144;
  LODWORD(v19) = (5793 * (v21 + v20 - 2 * (int)v19) + 256) >> 9;
  v23 = (10033 * (v20 - v21) + 256) >> 9;
  v24 = v22 + v11;
  *(_DWORD *)a1 = (unint64_t)(14564 * (v24 + v17) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 4) = (unint64_t)(14564 * (v23 + v12 + v18) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 64) = (unint64_t)(10298 * (v24 - 2 * v17) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 68) = (unint64_t)(10298 * (v23 + v12 - 2 * v18) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 32) = (unint64_t)(17837 * (v11 - v22) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 36) = (unint64_t)(17837 * (v12 - v23) + 0x4000) >> 15;
  v25 = *(_DWORD *)(a1 + 8);
  v26 = (int)v19 + v25;
  *(_DWORD *)(a1 + 8) = (unint64_t)(14564 * (v26 + ((uint64_t)(int)v5 >> 9)) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 72) = (unint64_t)(10298 * (v26 - 2 * ((int)v5 >> 9)) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 40) = (unint64_t)(17837 * (v25 - (int)v19) + 0x4000) >> 15;
  return result;
}

double sub_1003961D0(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  double result;
  unsigned __int8 *v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  int v9;

  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (unsigned __int8 *)(*a2 + a3);
  v5 = *v4;
  LODWORD(v4) = v4[1];
  v6 = (_DWORD)v4 + v5;
  LODWORD(v4) = v5 - (_DWORD)v4;
  v7 = (unsigned __int8 *)(a2[1] + a3);
  v8 = *v7;
  LODWORD(v7) = v7[1];
  v9 = (_DWORD)v7 + v8;
  LODWORD(v7) = v8 - (_DWORD)v7;
  *(_DWORD *)a1 = 16 * (v9 + v6) - 0x2000;
  *(_DWORD *)(a1 + 4) = 16 * ((_DWORD)v7 + (_DWORD)v4);
  *(_DWORD *)(a1 + 32) = 16 * (v6 - v9);
  *(_DWORD *)(a1 + 36) = 16 * ((_DWORD)v4 - (_DWORD)v7);
  return result;
}

double sub_100396254(_OWORD *a1, _QWORD *a2, unsigned int a3)
{
  double result;

  result = 0.0;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  *(_DWORD *)a1 = (*(unsigned __int8 *)(*a2 + a3) << 6) - 0x2000;
  return result;
}

_DWORD *sub_100396290(_DWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _DWORD *i;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[32];

  v3 = 0;
  for (i = result; ; i += 8)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * v3) + a3);
      v6 = *v5;
      v7 = v5[8];
      v8 = (v7 + v6);
      v9 = v5[1];
      v10 = v5[7];
      v11 = (v10 + v9);
      v12 = v5[2];
      v13 = v5[6];
      v14 = (v13 + v12);
      v15 = v5[3];
      v16 = v5[5];
      v17 = (v16 + v15);
      v18 = v5[4];
      v19 = v6 - v7;
      LODWORD(v5) = v9 - v10;
      v20 = v12 - v13;
      v21 = v14 + v8 + v17;
      v22 = 2 * (v21 + v18 + v11) - 2304;
      v23 = (unint64_t)(5793 * (v21 - 2 * (v18 + v11)) + 2048) >> 12;
      LODWORD(v11) = v11 - 2 * v18;
      v24 = 10887 * ((int)v8 - (int)v14) + 2048;
      v25 = (unint64_t)(v24 + 2012 * ((int)v17 - (int)v8) - 5793 * (int)v11) >> 12;
      i[2] = (unint64_t)(v24 + 8875 * ((int)v14 - (int)v17) + 5793 * (int)v11) >> 12;
      i[3] = (unint64_t)(10033 * (v19 - (v20 + v15 - v16)) + 2048) >> 12;
      v26 = 7447 * (v20 + v19);
      v27 = 3962 * (v15 - v16 + v19);
      *i = v22;
      i[1] = (unint64_t)(v26 + 10033 * (int)v5 + v27 + 2048) >> 12;
      v28 = v20 - (v15 - v16);
      i[4] = v25;
      i[5] = (unint64_t)(v26 - 11409 * v28 - 10033 * (int)v5 + 2048) >> 12;
      i[6] = v23;
      i[7] = (unint64_t)(v27 - 10033 * (int)v5 + 11409 * v28 + 2048) >> 12;
      if ((_DWORD)v3 != 7)
        break;
      i = v54;
      ++v3;
    }
    if ((_DWORD)v3 == 8)
      break;
    ++v3;
  }
  v29 = 0;
  do
  {
    v30 = &result[v29];
    v31 = result[v29];
    v32 = *(_DWORD *)&v54[v29 * 4];
    v33 = v32 + v31;
    v34 = result[v29 + 8];
    v35 = result[v29 + 56];
    v36 = v35 + v34;
    v37 = result[v29 + 16];
    v38 = result[v29 + 48];
    v39 = v38 + v37;
    v40 = result[v29 + 24];
    v41 = result[v29 + 40];
    v42 = v41 + v40;
    v43 = (int)result[v29 + 32];
    v44 = v31 - v32;
    v45 = v34 - v35;
    v46 = v37 - v38;
    v47 = v40 - v41;
    v48 = v39 + v33 + v42;
    *v30 = (unint64_t)(12945 * (v48 + v43 + v36) + 0x4000) >> 15;
    v30[48] = (unint64_t)(9154 * (v48 - 2 * (v43 + v36)) + 0x4000) >> 15;
    v49 = 9154 * (v36 - 2 * v43);
    v50 = 17203 * (v33 - v39) + 0x4000;
    v30[16] = (unint64_t)(v50 + 14024 * (v39 - v42) + v49) >> 15;
    v30[32] = (unint64_t)(v50 + 3179 * (v42 - v33) - v49) >> 15;
    v30[24] = (unint64_t)(15855 * (v44 - (v46 + v47)) + 0x4000) >> 15;
    v51 = 11768 * (v46 + v44);
    v52 = 6262 * (v47 + v44);
    v30[8] = (unint64_t)(v51 + 15855 * v45 + v52 + 0x4000) >> 15;
    v53 = 18029 * (v46 - v47);
    v30[40] = (unint64_t)(v51 - 15855 * v45 - v53 + 0x4000) >> 15;
    v30[56] = (unint64_t)(v52 - 15855 * v45 + v53 + 0x4000) >> 15;
    ++v29;
  }
  while ((_DWORD)(v29 * 4) != 32);
  return result;
}

unint64_t sub_1003965C8(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _DWORD *i;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t result;
  _BYTE v64[64];

  v3 = 0;
  for (i = a1; ; i += 8)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * v3) + a3);
      v6 = *v5;
      v7 = v5[9];
      v8 = v5[1];
      v9 = v5[8];
      v10 = (v9 + v8);
      v11 = v5[3];
      v12 = v5[6];
      v13 = (v12 + v11);
      v14 = v5[4];
      v15 = v5[5];
      v16 = v15 + v14 + v7 + v6;
      v17 = v7 + v6 - (v15 + v14);
      v18 = v13 + v10;
      v19 = v10 - v13;
      v20 = v6 - v7;
      v21 = v5[2];
      v22 = v5[7];
      v23 = v8 - v9;
      LODWORD(v8) = v22 + v21;
      v24 = v21 - v22;
      v25 = v11 - v12;
      LODWORD(v12) = v8 + v16 + v18;
      v26 = (0xFFFFFFFF204 * (v18 - (unint64_t)(2 * v8)) + 9373 * (v16 - 2 * (int)v8) + 2048) >> 12;
      v27 = 6810 * (v17 + (int)v19) + 2048;
      LODWORD(v8) = v14 - v15 + v20;
      i[4] = v26;
      i[5] = 2 * (v8 - (v23 - v25 + v24));
      v24 <<= 13;
      *i = 2 * v12 - 2560;
      i[1] = (unint64_t)(10323 * (int)v23
                              + 11443 * v20
                              + v24
                              + 5260 * (int)v25
                              + 1812 * (v14 - v15)
                              + 2048) >> 12;
      v28 = -4815 * ((int)v25 + (int)v23) + 7791 * (v20 - (v14 - v15));
      v29 = 2531 * ((int)v8 + (int)v23 - (int)v25) - v24 + ((v23 - v25) << 12);
      v28 += 2048;
      i[2] = (unint64_t)(v27 + 4209 * v17) >> 12;
      i[3] = (unint64_t)(v28 + v29) >> 12;
      i[6] = (unint64_t)(v27 + 0xFFFFFFFBA5CLL * v19) >> 12;
      i[7] = (unint64_t)(v28 - v29) >> 12;
      if ((_DWORD)v3 != 7)
        break;
      i = v64;
      ++v3;
    }
    if ((_DWORD)v3 == 9)
      break;
    ++v3;
  }
  v30 = 0;
  do
  {
    v31 = &a1[v30];
    v32 = a1[v30];
    v33 = *(_DWORD *)&v64[v30 * 4 + 32];
    v34 = v33 + v32;
    v35 = a1[v30 + 8];
    v36 = *(_DWORD *)&v64[v30 * 4];
    v37 = v36 + v35;
    v38 = a1[v30 + 24];
    v39 = a1[v30 + 48];
    v40 = v39 + v38;
    v41 = a1[v30 + 32];
    v42 = a1[v30 + 40];
    v43 = v42 + v41;
    v44 = v43 + v34;
    v45 = v34 - v43;
    v46 = v40 + v37;
    v47 = v37 - v40;
    LODWORD(v40) = a1[v30 + 16];
    v48 = v32 - v33;
    v49 = a1[v30 + 56];
    v50 = v35 - v36;
    v51 = v49 + v40;
    v52 = v40 - v49;
    *v31 = (unint64_t)(10486 * (v46 + v51 + v44) + 0x4000) >> 15;
    v53 = 2 * v51;
    v54 = v44 - v53;
    v55 = v46 - v53;
    v56 = v38 - v39;
    v31[32] = (unint64_t)(11997 * v54 + 0x7FFFFFFFEE1ALL * v55 + 0x4000) >> 15;
    v57 = 8716 * (v45 + v47) + 0x4000;
    v31[16] = (unint64_t)(v57 + 5387 * v45) >> 15;
    v31[48] = (unint64_t)(v57 + 0x7FFFFFFFA6DCLL * v47) >> 15;
    v58 = v41 - v42 + (uint64_t)v48;
    v59 = v50 - v56;
    v31[40] = (unint64_t)(10486 * (v58 - (v59 + v52)) + 0x4000) >> 15;
    v31[8] = (unint64_t)(13213 * v50
                              + 14647 * v48
                              + 10486 * v52
                              + 6732 * v56
                              + 2320 * (v41 - v42)
                              + 0x4000) >> 15;
    v60 = 5243 * v59 - 10486 * v52 + 3240 * (v58 + v59);
    v61 = -6163 * (v56 + v50) + 9973 * (v48 - (uint64_t)(v41 - v42)) + 0x4000;
    result = (unint64_t)(v61 + v60) >> 15;
    v31[24] = result;
    v31[56] = (unint64_t)(v61 - v60) >> 15;
    ++v30;
  }
  while ((_DWORD)(v30 * 4) != 32);
  return result;
}

uint64_t sub_100396980(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _DWORD *i;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t result;
  _BYTE v79[96];

  v3 = 0;
  for (i = a1; ; i += 8)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * v3) + a3);
      v6 = *v5;
      v7 = v5[10];
      v8 = (v7 + v6);
      v9 = v5[2];
      v10 = v5[8];
      v11 = (v10 + v9);
      v12 = v5[3];
      v13 = v5[7];
      v14 = (v13 + v12);
      v15 = v5[4];
      v16 = v5[6];
      v17 = (v16 + v15);
      v18 = v5[5];
      v19 = 2 * v5[5];
      v20 = v17 - v19;
      v21 = 1649 * ((int)v11 - (int)v19 + (int)v17 - (int)v19) + 11116 * ((int)v8 - (int)v19 + (int)v14 - (int)v19);
      v22 = v5[1];
      LODWORD(v5) = v5[9];
      v23 = v6 - v7;
      v24 = ((_DWORD)v5 + v22);
      v25 = v22 - (_DWORD)v5;
      LODWORD(v7) = v12 - v13;
      v26 = v15 - v16;
      v27 = v24 - v14;
      v28 = v17 + v24 + v8 + v11 + v14 + v18;
      v29 = 0xFFFFFFFDF6ALL * (v14 - v19) + 7587 * ((int)v24 - (int)v14) + 0xFFFFFFFD37DLL * (v17 - v19);
      v30 = 9746 * ((int)v8 - (int)v24) + 2048;
      v31 = v30 + 0xFFFFFFFCC25 * (v8 - v19);
      v32 = v30 - (v24 - v19) + ((v24 - v19) << 9) + 0xFFFFFFFD494 * (v11 - v19) + 4813 * v20;
      v33 = v29 + v21;
      v34 = v32 + 7587 * v27;
      v35 = v31 + 0xFFFFFFFE6C3 * (v11 - v19) + v21;
      LODWORD(v31) = v9 - v10 + v23;
      v36 = 10538 * (v25 + (int)v23) + 2048;
      *i = 2 * v28 - 2816;
      i[1] = (unint64_t)(v36
                              + 0xFFFFFFFC8F6 * v23
                              + 8756 * (int)v31
                              + 6263 * ((int)v7 + (int)v23)
                              + 3264 * (int)v26) >> 12;
      v37 = (unint64_t)(v33 + 2048) >> 12;
      LODWORD(v33) = v9 - v10 + v25;
      i[2] = v37;
      i[3] = (unint64_t)(v36
                              + 10456 * v25
                              - 6263 * (int)v33
                              - 11467 * ((int)v7 + v25)
                              + 0xFFFFFFFDDCCLL * v26) >> 12;
      v38 = -16294 * (v9 - v10) - 6263 * (int)v33 + 8756 * (int)v31;
      LODWORD(v33) = v7 + v9 - v10;
      i[4] = v34 >> 12;
      i[5] = (unint64_t)(v38 + 3264 * (int)v33 + 11467 * (int)v26 + 2048) >> 12;
      i[6] = v35 >> 12;
      i[7] = (unint64_t)(10695 * (int)v7
                              + 3264 * (int)v33
                              - 11467 * ((int)v7 + v25)
                              + 6263 * ((int)v7 + (int)v23)
                              + 0xFFFFFFFD6D6 * v26
                              + 2048) >> 12;
      if ((_DWORD)v3 != 7)
        break;
      i = v79;
      ++v3;
    }
    if ((_DWORD)v3 == 10)
      break;
    ++v3;
  }
  v39 = 0;
  do
  {
    v40 = &a1[v39];
    v41 = a1[v39];
    v42 = *(_DWORD *)&v79[v39 * 4 + 64];
    v43 = v42 + v41;
    v44 = a1[v39 + 8];
    v45 = *(_DWORD *)&v79[v39 * 4 + 32];
    v46 = v45 + v44;
    v47 = a1[v39 + 16];
    v48 = *(_DWORD *)&v79[v39 * 4];
    v49 = v48 + v47;
    v50 = a1[v39 + 24];
    v51 = a1[v39 + 56];
    v52 = v51 + v50;
    v53 = a1[v39 + 32];
    v54 = v41 - v42;
    v55 = a1[v39 + 48];
    v56 = v44 - v45;
    v57 = v55 + v53;
    v58 = v47 - v48;
    v59 = (int)a1[v39 + 40];
    v60 = v50 - v51;
    v61 = v53 - v55;
    *v40 = (unint64_t)(8666 * (v46 + v43 + v49 + v52 + v57 + v59) + 0x4000) >> 15;
    v59 *= 2;
    v62 = v43 - v59;
    v63 = v49 - v59;
    v64 = v57 - v59;
    v65 = 1744 * (v63 + v57 - v59);
    v66 = v46 - v59;
    v67 = v52 - v59;
    v68 = v65 + 11759 * (v62 + v67);
    v69 = 8026 * (v66 - v67);
    v40[16] = (unint64_t)(v69 + 0x7FFFFFFFDD87 * v67 + 0x7FFFFFFFD0EALL * v64 + v68 + 0x4000) >> 15;
    v70 = 10310 * (v62 - v66) + 0x4000;
    v40[32] = (unint64_t)(v70 + 540 * v66 + 0x7FFFFFFFD211 * v63 + 5091 * v64 + v69) >> 15;
    v40[48] = (unint64_t)(v70 + 0x7FFFFFFFC925 * v62 + 0x7FFFFFFFE54DLL * v63 + v68) >> 15;
    v71 = 9262 * (v58 + (uint64_t)v54);
    v72 = 6626 * (v60 + (uint64_t)v54);
    v73 = 11148 * (v56 + (uint64_t)v54) + 0x4000;
    v40[8] = (unint64_t)(v73 + 0x7FFFFFFFC5C7 * v54 + v71 + v72 + 3453 * v61) >> 15;
    v74 = -6626 * (v58 + (uint64_t)v56);
    v75 = 3453 * (v60 + (uint64_t)v58);
    result = 0x7FFFFFFFD474;
    v40[24] = (unint64_t)(v73 + 11061 * v56 + v74 - 12131 * (v60 + (uint64_t)v56) + 0x7FFFFFFFDBD2 * v61) >> 15;
    v40[40] = (unint64_t)(v74 - 17237 * v58 + v71 + v75 + 12131 * v61 + 0x4000) >> 15;
    v40[56] = (unint64_t)(v75
                               + 11314 * v60
                               + -12131 * (v60 + (uint64_t)v56)
                               + v72
                               + 0x7FFFFFFFD474 * v61
                               + 0x4000) >> 15;
    ++v39;
  }
  while ((_DWORD)(v39 * 4) != 32);
  return result;
}

uint64_t sub_100396E50(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _DWORD *i;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  _BYTE v70[128];

  v3 = 0;
  for (i = a1; ; i += 8)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * v3) + a3);
      v6 = *v5;
      v7 = v5[11];
      v8 = v5[1];
      v9 = v5[2];
      v10 = v5[9];
      v11 = (v10 + v9);
      v12 = v5[3];
      v13 = v5[8];
      v14 = (v13 + v12);
      v15 = v5[5];
      v16 = v5[6];
      v17 = v16 + v15 + v7 + v6;
      v18 = v7 + v6 - (v16 + v15);
      v19 = v14 + v11;
      v20 = v11 - v14;
      v21 = v5[10];
      v22 = v6 - v7;
      v23 = (v21 + v8);
      v24 = v8 - v21;
      v25 = v9 - v10;
      LODWORD(v6) = v5[4];
      v26 = v5[7];
      v27 = (v26 + v6);
      LODWORD(v10) = v6 - v26;
      v28 = v15 - v16;
      v29 = v23 - v27;
      LODWORD(v23) = v19 + v23 + v27 + v17 - 1536;
      v30 = v18 - (v29 + v20);
      v31 = v17 - v19;
      v32 = v29 - v20 + 11190 * (v18 + (int)v20);
      v33 = 6270 * v24 + 4433 * ((int)v10 + v24);
      v34 = -15137 * (int)v10 + 4433 * ((int)v10 + v24);
      v35 = v12 - v13 + v22;
      v36 = 9191 * ((int)v25 + (int)v22) + 4096;
      *i = v23;
      i[1] = (unint64_t)(v36 + 0x1FFFFFFFED6ALL * v22 + 7053 * v35 + v33 + 1512 * (int)v28) >> 13;
      i[2] = (unint64_t)(v32 + 4096) >> 13;
      i[3] = (unint64_t)(v34 + 10703 * ((int)v22 - (v12 - v13)) + 0x1FFFFFFFEEAFLL * (v28 + v25) + 4096) >> 13;
      v37 = v12 - v13 + v25;
      i[4] = (unint64_t)(10033 * v31 + 4096) >> 13;
      i[5] = (unint64_t)(v36 - 19165 * (int)v25 - 1512 * v37 - v34 + 7053 * (int)v28) >> 13;
      i[6] = v30;
      i[7] = (unint64_t)(5946 * (v12 - v13) + 7053 * v35 - 1512 * v37 - v33 + 0x1FFFFFFFDC19 * v28 + 4096) >> 13;
      if ((_DWORD)v3 != 7)
        break;
      i = v70;
      ++v3;
    }
    if ((_DWORD)v3 == 11)
      break;
    ++v3;
  }
  v38 = 0;
  do
  {
    v39 = &a1[v38];
    v40 = a1[v38];
    v41 = *(_DWORD *)&v70[v38 * 4 + 96];
    v42 = v41 + v40;
    v43 = a1[v38 + 16];
    v44 = *(_DWORD *)&v70[v38 * 4 + 32];
    v45 = v44 + v43;
    v46 = a1[v38 + 24];
    v47 = *(_DWORD *)&v70[v38 * 4];
    v48 = v47 + v46;
    v49 = a1[v38 + 40];
    v50 = a1[v38 + 48];
    v51 = v50 + v49;
    v52 = v51 + v42;
    v53 = v42 - v51;
    v54 = v48 + v45;
    v55 = v45 - v48;
    LODWORD(v42) = a1[v38 + 8];
    v56 = *(_DWORD *)&v70[v38 * 4 + 64];
    LODWORD(v48) = v40 - v41;
    v57 = v56 + v42;
    v58 = v42 - v56;
    LODWORD(v42) = a1[v38 + 32];
    v59 = v43 - v44;
    v60 = a1[v38 + 56];
    v61 = v60 + v42;
    v62 = v42 - v60;
    LODWORD(v42) = v49 - v50;
    v63 = v57 - (uint64_t)v61;
    *v39 = (unint64_t)(7282 * (v54 + v57 + (uint64_t)v61 + v52) + 0x2000) >> 14;
    v39[48] = (unint64_t)(7282 * (v53 - (v63 + v55)) + 0x2000) >> 14;
    v39[32] = (unint64_t)(8918 * (v52 - v54) + 0x2000) >> 14;
    v39[16] = (unint64_t)(9947 * (v53 + v55) + 7282 * (v63 - v55) + 0x2000) >> 14;
    v64 = 3941 * (v62 + (uint64_t)v58);
    v65 = v64 + 5573 * v58;
    v66 = v64 - 13455 * v62;
    result = 6269 * (v46 - v47 + (uint64_t)(int)v48);
    v68 = 8170 * (v59 + (uint64_t)(int)v48) + 0x2000;
    v39[8] = (unint64_t)(v68 + 0x3FFFFFFFEF7BLL * (int)v48 + result + v65 + 1344 * (int)v42) >> 14;
    v39[24] = (unint64_t)(v66
                               + 9514 * ((int)v48 - (uint64_t)(v46 - v47))
                               + 0x3FFFFFFFF09BLL * ((int)v42 + (uint64_t)v59)
                               + 0x2000) >> 14;
    v39[40] = (unint64_t)(v68 - 17036 * v59 - 1344 * (v46 - v47 + (uint64_t)v59) - v66 + 6269 * (int)v42) >> 14;
    v39[56] = (unint64_t)(result
                               + 5285 * (v46 - v47)
                               - 1344 * (v46 - v47 + (uint64_t)v59)
                               - v65
                               + 0x3FFFFFFFE016 * (int)v42
                               + 0x2000) >> 14;
    ++v38;
  }
  while ((_DWORD)(v38 * 4) != 32);
  return result;
}

uint64_t sub_100397278(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t result;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v93;
  _BYTE v94[160];

  v3 = 0;
  v90 = a1;
  v91 = a3;
  while (1)
  {
    while (1)
    {
      v93 = v3;
      v4 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * v3) + v91);
      v5 = *v4;
      v6 = v4[12];
      v7 = v4[1];
      v8 = v4[6];
      v9 = 2 * v4[6];
      v10 = v6 + v5 - v9;
      v11 = v4[11];
      v12 = v11 + v7;
      v13 = v11 + v7 - v9;
      v14 = v4[2];
      v15 = v4[10];
      v16 = v15 + v14 - v9;
      v17 = v4[3];
      v18 = v4[9];
      v19 = (v18 + v17);
      v20 = v19 - v9;
      v21 = v4[4];
      v22 = v4[8];
      v23 = (v22 + v21);
      v24 = v23 - v9;
      v25 = v4[5];
      v26 = v4[7];
      v27 = (v26 + v25);
      v28 = v27 - v9;
      v29 = 11249 * v10
          + 8672 * v13
          + 4108 * v16
          + 0x1FFFFFFFFA8CLL * (v19 - v9)
          + 0x1FFFFFFFE64BLL * (v23 - v9)
          + 0x1FFFFFFFD7EELL * (v27 - v9);
      v30 = v7 - v11;
      v31 = v21 - v22;
      v32 = v25 - v26;
      v33 = 9465 * (v10 - v16) - 3570 * (v20 - v24) - 2592 * (v13 - v28);
      v34 = v27 + v12 + v6 + v5 + v15 + v14 + v19 + v23 + v8 - 1664;
      v35 = 793 * (v10 + v16) - 7678 * (v20 + v24) + 3989 * (v13 + v28);
      v36 = v35 + v33;
      v37 = v33 - v35;
      v38 = 7682 * (v17 - v18 + (int)v5 - (int)v6) + 2773 * ((int)v32 + (int)v31);
      v39 = -2773 * (v14 - v15 + v30) + 7682 * ((int)v31 - (int)v32);
      v40 = 10832 * (v30 + (int)v5 - (int)v6) + 4096;
      v41 = v14 - v15 + v5 - v6;
      *a1 = v34;
      a1[1] = (unint64_t)(v40 + 0x1FFFFFFFBF5BLL * (v5 - v6) + 9534 * v41 + 2611 * (int)v31 + v38) >> 13;
      v42 = v40 + 6859 * v30;
      v43 = v17 - v18 + v30;
      a1[2] = (unint64_t)(v29 + 4096) >> 13;
      a1[3] = (unint64_t)(v42 - 9534 * v43 + 0x1FFFFFFFB511 * v31 + v39) >> 13;
      LODWORD(v42) = v17 - v18 + v14 - v15;
      a1[4] = (unint64_t)(v36 + 4096) >> 13;
      a1[5] = (unint64_t)(-12879 * (v14 - v15)
                               + 9534 * v41
                               - 5384 * (int)v42
                               + 18515 * (int)v32
                               + v39
                               + 4096) >> 13;
      a1[6] = (unint64_t)(v37 + 4096) >> 13;
      a1[7] = (unint64_t)(18068 * (v17 - v18)
                               - 5384 * (int)v42
                               - 9534 * v43
                               + 0x1FFFFFFFC83FLL * v32
                               + v38
                               + 4096) >> 13;
      if ((_DWORD)v93 != 7)
        break;
      a1 = v94;
      v3 = v93 + 1;
    }
    if ((_DWORD)v93 == 12)
      break;
    a1 += 8;
    v3 = v93 + 1;
  }
  v44 = 0;
  do
  {
    v45 = &v90[v44];
    v46 = v90[v44];
    v47 = *(_DWORD *)&v94[v44 * 4 + 128];
    v48 = v47 + v46;
    v49 = v90[v44 + 8];
    v50 = *(_DWORD *)&v94[v44 * 4 + 96];
    v51 = v90[v44 + 16];
    v52 = v50 + v49;
    v53 = *(_DWORD *)&v94[v44 * 4 + 64];
    v54 = v90[v44 + 24];
    v55 = *(_DWORD *)&v94[v44 * 4 + 32];
    v56 = v53 + v51;
    v57 = v55 + v54;
    v58 = v90[v44 + 32];
    v59 = *(_DWORD *)&v94[v44 * 4];
    v60 = v90[v44 + 40];
    v61 = v59 + v58;
    v62 = v90[v44 + 56];
    v63 = (int)v90[v44 + 48];
    v64 = v46 - v47;
    v65 = v49 - v50;
    v66 = v62 + v60;
    v67 = v51 - v53;
    v68 = v54 - v55;
    v69 = v52 + v48;
    v70 = v56 + v57;
    v71 = v61 + v66;
    v72 = v48 - 2 * v63;
    v73 = v52 - 2 * v63;
    v74 = v56 - 2 * v63;
    v75 = v57 - 2 * v63;
    v76 = v61 - 2 * v63;
    v77 = v69 + v70;
    v78 = v66 - 2 * v63;
    v79 = 7169 * (v72 - v74) - 2704 * (v75 - v76) - 1963 * (v73 - v78);
    v80 = v77 + v71 + v63;
    LODWORD(v63) = v58 - v59;
    v81 = v60 - v62;
    *v45 = (unint64_t)(6205 * v80 + 0x2000) >> 14;
    result = 8520 * v72 + 6568 * v73 + 3112 * v74 + 0x3FFFFFFFFBDELL * v75 + 0x3FFFFFFFEC87 * v76;
    v83 = 601 * (v72 + v74) - 5816 * (v75 + v76) + 3021 * (v73 + v78);
    v84 = v83 + v79;
    v85 = 5819 * (v68 + (uint64_t)v64) + 2100 * (v81 + (uint64_t)(int)v63);
    v86 = v79 - v83;
    v87 = -2100 * (v67 + (uint64_t)v65) + 5819 * ((int)v63 - (uint64_t)v81);
    v88 = 8204 * (v65 + (uint64_t)v64) + 0x2000;
    v89 = 7221 * (v67 + (uint64_t)v64);
    v45[8] = (unint64_t)(v88 + 0x3FFFFFFFCF0ALL * v64 + v89 + 1978 * (int)v63 + v85) >> 14;
    v45[32] = (unint64_t)(v84 + 0x2000) >> 14;
    v45[24] = (unint64_t)(v88 + 5195 * v65 - 7221 * (v68 + (uint64_t)v65) + 0x3FFFFFFFC73FLL * (int)v63 + v87) >> 14;
    v45[48] = (unint64_t)(v86 + 0x2000) >> 14;
    v45[40] = (unint64_t)(v89 - 9754 * v67 - 4078 * (v68 + (uint64_t)v67) + 14023 * v81 + v87 + 0x2000) >> 14;
    v45[16] = (unint64_t)(result + 0x3FFFFFFFE1A6 * v78 + 0x2000) >> 14;
    v45[56] = (unint64_t)(-4078 * (v68 + (uint64_t)v67)
                               + 13685 * v68
                               - 7221 * (v68 + (uint64_t)v65)
                               + 0x3FFFFFFFD5C5 * v81
                               + v85
                               + 0x2000) >> 14;
    ++v44;
  }
  while ((_DWORD)(v44 * 4) != 32);
  return result;
}

uint64_t sub_1003977F4(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _DWORD *i;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t result;
  uint64_t v81;
  _BYTE v83[192];

  v3 = 0;
  for (i = a1; ; i += 8)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * v3) + a3);
      v6 = *v5;
      v7 = v5[13];
      v8 = v5[1];
      v9 = v5[12];
      v10 = (v9 + v8);
      v11 = v5[2];
      v12 = v5[11];
      v13 = (v12 + v11);
      v14 = v5[4];
      v15 = v5[9];
      v16 = (v15 + v14);
      v17 = v5[5];
      v18 = v5[8];
      v19 = (v18 + v17);
      v20 = v5[6];
      v21 = v5[7];
      v22 = v21 + v20 + v7 + v6;
      v23 = v7 + v6 - (v21 + v20);
      v24 = v19 + v10;
      v25 = v10 - v19;
      v26 = v16 + v13;
      v27 = v13 - v16;
      v28 = v6 - v7;
      v29 = v8 - v9;
      v30 = v5[3];
      v31 = v5[10];
      v32 = v11 - v12;
      LODWORD(v12) = v31 + v30;
      v33 = v30 - v31;
      LODWORD(v11) = v14 - v15;
      v34 = v17 - v18;
      LODWORD(v8) = v12 + v24 + v26 + v22;
      v35 = 9058 * (v23 + (int)v25) + 4096;
      v36 = v35 + 5027 * (int)v27 + 2237 * v23;
      LODWORD(v17) = v17 - v18 - v11;
      i[6] = (unint64_t)(v35 + 0x1FFFFFFFD3E1 * v27 + 0x1FFFFFFFC8FCLL * v25) >> 13;
      i[7] = v28 + v33 - (v20 - v21) - (v32 + v29 + v17);
      v37 = v33 << 13;
      v38 = 11512 * (int)v17 - (v33 << 13) - 1297 * ((int)v32 + (int)v29);
      v39 = 9810 * ((int)v32 + (int)v28) + 6164 * ((int)v20 - (int)v21 + (int)v11);
      v38 += 4096;
      i[4] = (0x1FFFFFFFE3C9 * (v26 - (unint64_t)(2 * v12))
            + 2578 * (v24 - 2 * (int)v12)
            + 10438 * (v22 - 2 * (int)v12)
            + 4096) >> 13;
      i[5] = (unint64_t)(v38 + 0x1FFFFFFFB409 * v32 + 9175 * (int)v11 + v39) >> 13;
      v40 = 10935 * ((int)v29 + (int)v28) + 3826 * ((int)v34 - ((int)v20 - (int)v21));
      i[2] = v36 >> 13;
      i[3] = (unint64_t)(v38 + 0x1FFFFFFFF26ELL * v29 + 0x1FFFFFFF9DC4 * v34 + v40) >> 13;
      *i = v8 - 1792;
      i[1] = (unint64_t)(v40 + v37 + v20 - v21 + 0x1FFFFFFFDBF0 * (v20 - v21 + v28) + v39 + 4096) >> 13;
      if ((_DWORD)v3 != 7)
        break;
      i = v83;
      ++v3;
    }
    if ((_DWORD)v3 == 13)
      break;
    ++v3;
  }
  v41 = 0;
  do
  {
    v42 = &a1[v41];
    v43 = a1[v41];
    v44 = *(_DWORD *)&v83[v41 * 4 + 160];
    v45 = v44 + v43;
    v46 = a1[v41 + 8];
    v47 = *(_DWORD *)&v83[v41 * 4 + 128];
    v48 = a1[v41 + 16];
    v49 = *(_DWORD *)&v83[v41 * 4 + 96];
    v50 = v47 + v46;
    v51 = v49 + v48;
    v52 = a1[v41 + 32];
    v53 = *(_DWORD *)&v83[v41 * 4 + 32];
    v54 = v53 + v52;
    v55 = a1[v41 + 40];
    v56 = a1[v41 + 48];
    v57 = a1[v41 + 56];
    v58 = *(_DWORD *)&v83[v41 * 4] + v55;
    v59 = v57 + v56;
    v60 = v59 + v45;
    v61 = v45 - v59;
    v62 = v58 + v50;
    v63 = v50 - v58;
    v64 = v54 + v51;
    v65 = v51 - v54;
    LODWORD(v51) = v43 - v44;
    v66 = a1[v41 + 24];
    v67 = *(_DWORD *)&v83[v41 * 4 + 64];
    v68 = v67 + v66;
    v69 = v66 - v67;
    v70 = (int)v51;
    v71 = v46 - v47;
    v72 = v48 - v49;
    v73 = v52 - v53;
    v74 = v55 - *(_DWORD *)&v83[v41 * 4];
    v75 = v56 - v57;
    *v42 = (unint64_t)(5350 * (v64 + v68 + v62 + v60) + 0x2000) >> 14;
    v76 = 5915 * (v61 + v63) + 0x2000;
    v42[56] = (unint64_t)(5350 * ((int)v51 + (uint64_t)v69 - (v72 + v71 + v74 - v73 + v75)) + 0x2000) >> 14;
    v77 = v76 + 0x3FFFFFFFE330 * v65 + 0x3FFFFFFFDC12 * v63;
    v42[16] = (unint64_t)(v76 + 3283 * v65 + 1461 * v61) >> 14;
    v78 = 7518 * (v74 - v73) - 5350 * v69 - 847 * (v72 + v71) + 0x2000;
    v42[48] = v77 >> 14;
    v42[32] = (unint64_t)(1684 * (v62 - 2 * v68)
                               + 0x3FFFFFFFED93 * (v64 - 2 * v68)
                               + 6817 * (v60 - 2 * v68)
                               + 0x2000) >> 14;
    v79 = 7141 * (v71 + (int)v51) + 2499 * (v74 - v75);
    result = v79 + 0x3FFFFFFFE873 * (int)v51 + 5350 * v69 + 0x3FFFFFFFFD59 * v75;
    v81 = 6406 * (v72 + v70) + 4025 * (v75 + v73);
    v42[40] = (unint64_t)(v78 + 0x3FFFFFFFCE64 * v72 + 5992 * v73 + v81) >> 14;
    v42[24] = (unint64_t)(v78 + 0x3FFFFFFFF723 * v71 + 0x3FFFFFFFBFD9 * v74 + v79) >> 14;
    v42[8] = (unint64_t)(result + v81 + 0x2000) >> 14;
    ++v41;
  }
  while ((_DWORD)(v41 * 4) != 32);
  return result;
}

uint64_t sub_100397CB8(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _DWORD *i;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t result;
  uint64_t v81;
  _BYTE v84[224];

  v3 = 0;
  for (i = a1; ; i += 8)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * v3) + a3);
      v6 = *v5;
      v7 = v5[14];
      v8 = (v7 + v6);
      v9 = v5[1];
      v10 = v5[13];
      v11 = (v10 + v9);
      v12 = v5[2];
      v13 = v5[12];
      v14 = (v13 + v12);
      v15 = v5[3];
      v16 = v5[11];
      v17 = (v16 + v15);
      v18 = v5[4];
      v19 = v5[10];
      v20 = (v19 + v18);
      v21 = v5[5];
      v22 = v5[9];
      v23 = (v22 + v21);
      v24 = v6 - v7;
      v25 = v5[6];
      v26 = v9 - v10;
      v27 = v5[8];
      v28 = (v27 + v25);
      v29 = v5[7];
      v30 = v15 - v16;
      v31 = v25 - v27;
      v32 = v20 + v8 + v23;
      v33 = v17 + v11 + v28;
      LODWORD(v27) = v29 + v14 + v32 + v33;
      v34 = 0x1FFFFFFFF204 * (v33 - 2 * (v29 + v14)) + 9373 * (v32 - 2 * (v29 + v14));
      v35 = v14 - 2 * v29 + ((unint64_t)(v20 + v11) >> 1);
      v36 = 11332 * ((int)v8 - (int)v17) + 6476 * ((int)v11 - (int)v20) + 7752 * ((int)v28 - (int)v23) + 4096;
      v37 = v36 + 12543 * (v17 - v35) + 0x1FFFFFFFB860 * (v28 - v35);
      v38 = v36 + 6541 * (v23 - v35) + 0x1FFFFFFFFD14 * (v8 - v35);
      v39 = 11018 * ((int)v18 - (int)v19 + v26)
          + 4712 * ((int)v21 - (int)v22 + (int)v30)
          + 11522 * ((int)v24 - (int)v31);
      *i = v27 - 1920;
      i[1] = (unint64_t)(3897 * (int)v30
                              + 10033 * ((int)v12 - (int)v13)
                              + 0x1FFFFFFFEF8FLL * (v18 - v19)
                              + 13930 * (int)v31
                              + v39
                              + 4096) >> 13;
      i[2] = v37 >> 13;
      i[3] = (unint64_t)(6810 * (v26 - ((int)v30 + (int)v31))
                              + 11018 * ((int)v24 - ((int)v18 - (int)v19 + (int)v21 - (int)v22))
                              + 4096) >> 13;
      i[4] = v38 >> 13;
      i[5] = (unint64_t)(10033 * (v24 - (v12 - v13 + v30) + v21 - v22 + v31) + 4096) >> 13;
      i[6] = (unint64_t)(v34 + 4096) >> 13;
      i[7] = (unint64_t)(-17828 * v26
                              - 2912 * (int)v24
                              - 10033 * ((int)v12 - (int)v13)
                              + 0x1FFFFFFFE42FLL * (v21 - v22)
                              + v39
                              + 4096) >> 13;
      if ((_DWORD)v3 != 7)
        break;
      i = v84;
      ++v3;
    }
    if ((_DWORD)v3 == 14)
      break;
    ++v3;
  }
  v40 = 0;
  do
  {
    v41 = &a1[v40];
    v42 = a1[v40];
    v43 = *(_DWORD *)&v84[v40 * 4 + 192];
    v44 = v43 + v42;
    v45 = a1[v40 + 8];
    v46 = *(_DWORD *)&v84[v40 * 4 + 160];
    v47 = a1[v40 + 16];
    v48 = *(_DWORD *)&v84[v40 * 4 + 128];
    v49 = v46 + v45;
    v50 = v48 + v47;
    v51 = a1[v40 + 24];
    v52 = *(_DWORD *)&v84[v40 * 4 + 96];
    v53 = v52 + v51;
    v54 = a1[v40 + 32];
    v55 = *(_DWORD *)&v84[v40 * 4 + 64];
    v56 = a1[v40 + 40];
    v57 = *(_DWORD *)&v84[v40 * 4 + 32];
    v58 = v55 + v54;
    v59 = a1[v40 + 48];
    v60 = *(_DWORD *)&v84[v40 * 4];
    v61 = v42 - v43;
    v62 = v60 + v59;
    v63 = v57 + v56;
    v64 = v45 - v46;
    v65 = (int)a1[v40 + 56];
    v66 = v47 - v48;
    v67 = v51 - v52;
    v68 = v54 - v55;
    v69 = v56 - v57;
    v70 = v59 - v60;
    v71 = v58 + v44 + v63;
    v72 = v53 + v49 + v62;
    v73 = 2 * (v65 + v50);
    v74 = v72 + v71 + v65 + v50;
    v75 = v50 - 2 * v65 + ((v58 + v49) >> 1);
    v76 = v53 - v75;
    *v41 = (unint64_t)(9321 * v74 + 0x4000) >> 15;
    v41[48] = (unint64_t)(0x7FFFFFFFF017 * (v72 - v73) + 10664 * (v71 - v73) + 0x4000) >> 15;
    v77 = 12893 * (v44 - v53) + 7369 * (v49 - v58) + 8820 * (v62 - v63) + 0x4000;
    v78 = v77 + 14271 * v76 + 0x7FFFFFFFAE82 * (v62 - v75);
    v79 = v77 + 7442 * (v63 - v75) + 0x7FFFFFFFFCACLL * (v44 - v75);
    result = 4434 * v67 + 11415 * v66 + 0x7FFFFFFFED4CLL * v68;
    v81 = 12536 * (v68 + (uint64_t)v64) + 5361 * (v69 + (uint64_t)v67) + 13109 * (v61 - (uint64_t)v70);
    v41[8] = (unint64_t)(result + 15850 * v70 + v81 + 0x4000) >> 15;
    v41[24] = (unint64_t)(7748 * (v64 - (v67 + (uint64_t)v70)) + 12536 * (v61 - (v68 + (uint64_t)v69)) + 0x4000) >> 15;
    v41[40] = (unint64_t)(11415 * (v61 - (v67 + (uint64_t)v66) + v69 + (uint64_t)v70) + 0x4000) >> 15;
    v41[16] = v78 >> 15;
    v41[32] = v79 >> 15;
    v41[56] = (unint64_t)(-20284 * v64 - 3314 * v61 - 11415 * v66 + 0x7FFFFFFFE05ALL * v69 + v81 + 0x4000) >> 15;
    ++v40;
  }
  while ((_DWORD)(v40 * 4) != 32);
  return result;
}

uint64_t sub_1003981C8(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t result;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  _BYTE v91[256];

  v3 = a1;
  v4 = 0;
  v81 = a3;
  while (1)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * v4) + v81);
      v85 = *v5;
      v87 = v5[15];
      v89 = v4;
      v6 = (v87 + v85);
      v83 = v5[1];
      v7 = v5[14];
      v8 = v5[2];
      v9 = v5[13];
      v10 = v5[3];
      v11 = v5[12];
      v12 = (v11 + v10);
      v13 = v5[4];
      v14 = v5[11];
      v15 = (v14 + v13);
      v16 = v5[5];
      v17 = v5[10];
      v18 = v5[6];
      v19 = v5[7];
      v20 = v5[8];
      v21 = (v20 + v19);
      v22 = v21 + v6;
      v23 = v5[9];
      LODWORD(v5) = v23 + v18 + v7 + v83;
      v24 = v17 + v16 + v9 + v8;
      v25 = 10703 * ((int)v21 + (int)v6 - ((int)v15 + (int)v12)) + 4433 * ((int)v5 - v24);
      v26 = v6 - v21;
      v27 = v7 + v83 - (v23 + v18);
      v28 = v9 + v8 - (v17 + v16);
      LODWORD(v6) = v83 - v7;
      v29 = v8 - v9;
      v30 = 2260 * ((int)v12 - (int)v15 - v27) + 11363 * ((int)v26 - v28) + 1024;
      v31 = v30 + 17799 * v28 + 11893 * v27;
      v32 = v10 - v11;
      v33 = v18 - v23;
      v34 = v24 + v15 + v12 + (_DWORD)v5 + v22;
      v35 = v30 + 0x7FFFFFFDE07 * (v12 - v15) + 0x7FFFFFFF93ELL * v26;
      v36 = 11086 * ((int)v6 + (int)v85 - (int)v87) + 3363 * ((int)v33 - (v19 - v20));
      v37 = 10217 * (v29 + (int)v85 - (int)v87) + 5461 * (v19 - v20 + v16 - v17);
      v38 = 8956 * (v10 - v11 + (int)v85 - (int)v87) + 7350 * (v13 - v14 - (v19 - v20));
      v39 = 1136 * (v29 + (int)v6) + 11529 * ((int)v33 - (v16 - v17));
      v40 = -5461 * (v10 - v11 + (int)v6) - 10217 * ((int)v33 + v13 - v14);
      v41 = -11086 * (v10 - v11 + v29) + 3363 * (v16 - v17 - (v13 - v14));
      *v3 = 4 * v34 - 0x2000;
      v3[1] = (unint64_t)(v37 + 0x7FFFFFFB6D6 * (v85 - v87) + 6387 * (v19 - v20) + v36 + v38 + 1024) >> 11;
      v3[2] = v31 >> 11;
      v3[3] = (unint64_t)(v40 + 589 * (int)v6 + 0x7FFFFFFCAC1 * v33 + v39 + v36 + 1024) >> 11;
      v3[4] = (unint64_t)(v25 + 1024) >> 11;
      v3[5] = (unint64_t)(v41 + 1024 - 9222 * v29 + 10055 * (v16 - v17) + v39 + v37) >> 11;
      v3[6] = v35 >> 11;
      v3[7] = (unint64_t)(v41 + 1024 + 8728 * v32 + 17760 * (v13 - v14) + v40 + v38) >> 11;
      if ((_DWORD)v89 != 7)
        break;
      v3 = v91;
      v4 = v89 + 1;
    }
    if ((_DWORD)v89 == 15)
      break;
    v3 += 8;
    v4 = v89 + 1;
  }
  v42 = 0;
  do
  {
    v43 = &a1[v42];
    v88 = a1[v42];
    v90 = *(_DWORD *)&v91[v42 * 4 + 224];
    v44 = v90 + v88;
    v84 = a1[v42 + 8];
    v86 = *(_DWORD *)&v91[v42 * 4 + 192];
    v45 = v86 + v84;
    v46 = a1[v42 + 16];
    v47 = *(_DWORD *)&v91[v42 * 4 + 160];
    v48 = v47 + v46;
    v49 = a1[v42 + 24];
    v50 = *(_DWORD *)&v91[v42 * 4 + 128];
    v51 = v50 + v49;
    v52 = a1[v42 + 32];
    v53 = *(_DWORD *)&v91[v42 * 4 + 96];
    v54 = v53 + v52;
    v55 = a1[v42 + 40];
    v56 = *(_DWORD *)&v91[v42 * 4 + 64];
    v57 = v56 + v55;
    v58 = a1[v42 + 48];
    v59 = a1[v42 + 56];
    v60 = *(_DWORD *)&v91[v42 * 4];
    v61 = v60 + v59;
    v62 = v61 + v44;
    v63 = *(_DWORD *)&v91[v42 * 4 + 32];
    v64 = v63 + v58;
    v65 = v64 + v45;
    v66 = 10703 * (v61 + v44 - (v54 + v51)) + 4433 * (v64 + v45 - (v57 + v48));
    v67 = v44 - v61;
    v68 = v45 - v64;
    v69 = v46 - v47;
    LODWORD(v44) = v52 - v53;
    v70 = v88 - v90;
    *v43 = (unint64_t)(v54 + v51 + v57 + v48 + v65 + v62 + 8) >> 4;
    v43[32] = (unint64_t)(v66 + 0x10000) >> 17;
    v71 = v58 - v63;
    v72 = 2260 * (v51 - v54 - v68) + 11363 * (v67 - (v48 - v57)) + 0x10000;
    v73 = v59 - v60;
    v43[16] = (unint64_t)(v72 + 17799 * (v48 - v57) + 11893 * v68) >> 17;
    v43[48] = (unint64_t)(v72 + 0x1FFFFFFFFDE07 * (v51 - v54) + 0x1FFFFFFFFF93ELL * v67) >> 17;
    v74 = 11086 * (v84 - v86 + v70) + 3363 * (v71 - v73);
    result = 10217 * (v69 + v70) + 5461 * (v73 + v55 - v56);
    v76 = 8956 * (v49 - v50 + v70) + 7350 * ((int)v44 - v73);
    v77 = 1136 * (v69 + (uint64_t)(v84 - v86)) + 11529 * (v71 - (v55 - v56));
    v78 = -5461 * (v49 - v50 + (uint64_t)(v84 - v86)) - 10217 * (v71 + (int)v44);
    v43[8] = (unint64_t)(result + 0x1FFFFFFFFB6D6 * v70 + 6387 * (v59 - v60) + v74 + v76 + 0x10000) >> 17;
    v43[24] = (unint64_t)(v78 + 589 * (v84 - v86) + 0x1FFFFFFFFCAC1 * v71 + v77 + v74 + 0x10000) >> 17;
    v79 = -11086 * (v49 - v50 + (uint64_t)v69) + 3363 * (v55 - v56 - (uint64_t)(int)v44) + 0x10000;
    v43[40] = (unint64_t)(v79 - 9222 * v69 + 10055 * (v55 - v56) + v77 + result) >> 17;
    v43[56] = (unint64_t)(v79 + 8728 * (v49 - v50) + 17760 * (int)v44 + v78 + v76) >> 17;
    ++v42;
  }
  while ((_DWORD)(v42 * 4) != 32);
  return result;
}

uint64_t sub_1003987A8(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  _DWORD *v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v3 = 0;
  v4 = a3;
  do
  {
    v5 = (unsigned __int8 *)(*(_QWORD *)(a2 + v3) + v4);
    v6 = *v5;
    v7 = v5[15];
    v8 = (v7 + v6);
    v9 = v5[1];
    v10 = v5[14];
    v11 = v5[2];
    v12 = v5[13];
    v13 = v5[3];
    v14 = v5[5];
    v15 = v5[10];
    v16 = v5[6];
    v17 = v5[9];
    v18 = v5[7];
    v19 = v5[8];
    v20 = (v19 + v18);
    v21 = v20 + v8;
    v22 = v8 - v20;
    v23 = v17 + v16 + v10 + v9;
    v24 = v10 + v9 - (v17 + v16);
    v25 = v15 + v14 + v12 + v11;
    v26 = v12 + v11 - (v15 + v14);
    LODWORD(v8) = v5[12];
    v27 = v6 - v7;
    v28 = v5[4];
    LODWORD(v7) = v9 - v10;
    v29 = (v8 + v13);
    v30 = v5[11];
    LODWORD(v6) = v11 - v12;
    v31 = (v30 + v28);
    LODWORD(v5) = v13 - v8;
    v32 = v29 - v31;
    LODWORD(v29) = v31 + v29;
    v33 = v16 - v17;
    v34 = v18 - v19;
    v35 = 11086 * ((int)v7 + (int)v27) + 3363 * ((int)v16 - (int)v17 - v34);
    v36 = v28 - v30;
    LODWORD(v31) = v14 - v15;
    v37 = 10703 * (v21 - (int)v29) + 4433 * (v23 - v25);
    v38 = v25 + v29 + v23 + v21;
    v39 = 2260 * ((int)v32 - v24) + 11363 * ((int)v22 - v26) + 1024;
    v40 = v39 + 17799 * v26;
    v41 = 10217 * ((int)v6 + (int)v27) + 5461 * (v34 + (int)v31);
    v42 = 8956 * ((int)v5 + (int)v27) + 7350 * (v36 - v34);
    v43 = v39 + 0x7FFFFFFDE07 * v32;
    v44 = 1136 * ((int)v6 + (int)v7) + 11529 * ((int)v33 - (int)v31);
    v45 = v40 + 11893 * v24;
    v46 = -5461 * ((int)v5 + (int)v7) - 10217 * ((int)v33 + v36);
    v47 = v41 + 0x7FFFFFFB6D6 * v27 + 6387 * v34 + v35 + v42;
    v48 = v46 + 589 * (int)v7 + 0x7FFFFFFCAC1 * v33 + v44 + v35;
    v49 = -11086 * ((int)v5 + (int)v6) + 3363 * ((int)v31 - v36) + 1024;
    v50 = (_DWORD *)(result + 4 * v3);
    v50[4] = (unint64_t)(v37 + 1024) >> 11;
    v50[5] = (unint64_t)(v49 - 9222 * (int)v6 + 10055 * (int)v31 + v44 + v41) >> 11;
    *v50 = 4 * v38 - 0x2000;
    v50[1] = (unint64_t)(v47 + 1024) >> 11;
    v50[2] = v45 >> 11;
    v50[3] = (unint64_t)(v48 + 1024) >> 11;
    v50[6] = (unint64_t)(v43 + 0x7FFFFFFF93ELL * v22) >> 11;
    v50[7] = (unint64_t)(v49 + 8728 * (int)v5 + 17760 * v36 + v46 + v42) >> 11;
    v3 += 8;
  }
  while (v3 != 64);
  v51 = 0;
  do
  {
    v52 = (_DWORD *)(result + v51);
    v53 = *(_DWORD *)(result + v51);
    v54 = *(_DWORD *)(result + v51 + 224);
    v55 = v54 + v53;
    v56 = *(_DWORD *)(result + v51 + 32);
    v57 = *(_DWORD *)(result + v51 + 192);
    v58 = v57 + v56;
    v59 = *(_DWORD *)(result + v51 + 64);
    v60 = *(_DWORD *)(result + v51 + 160);
    v61 = v60 + v59;
    v62 = *(_DWORD *)(result + v51 + 96);
    v63 = *(_DWORD *)(result + v51 + 128);
    v64 = v63 + v62;
    v65 = v64 + v55;
    v66 = v55 - v64;
    v67 = v61 + v58;
    v68 = v58 - v61;
    v69 = v53 - v54;
    v70 = v56 - v57;
    v71 = v59 - v60;
    v72 = v62 - v63;
    *v52 = (unint64_t)(v67 + v65 + 4) >> 3;
    v52[32] = (unint64_t)(v65 - v67 + 4) >> 3;
    v73 = 4433 * (v66 + v68) + 0x8000;
    v52[16] = (unint64_t)(v73 + 6270 * v66) >> 16;
    v52[48] = (unint64_t)(v73 + 0xFFFFFFFFC4DFLL * v68) >> 16;
    v74 = v71 + v69;
    v75 = v72 + v70;
    v76 = 9633 * (v75 + v74);
    v77 = v76 - 3196 * v74;
    v78 = v76 - 16069 * v75;
    v79 = -7373 * (v72 + v69) + 0x8000;
    v52[8] = (unint64_t)(v79 + 12299 * v69 + v77) >> 16;
    v80 = -20995 * (v71 + v70) + 0x8000;
    v52[24] = (unint64_t)(v80 + 25172 * v70 + v78) >> 16;
    v52[40] = (unint64_t)(v80 + 16819 * v71 + v77) >> 16;
    v52[56] = (unint64_t)(v79 + 2446 * v72 + v78) >> 16;
    v51 += 4;
  }
  while ((_DWORD)v51 != 32);
  return result;
}

uint64_t sub_100398BA0(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v3 = 0;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  do
  {
    v4 = (unsigned __int8 *)(*(_QWORD *)(a2 + v3) + a3);
    v5 = *v4;
    v6 = v4[13];
    v7 = v4[1];
    v8 = v4[12];
    v9 = v4[2];
    v10 = v4[11];
    v11 = (v8 + v7);
    v12 = v4[3];
    v13 = v4[5];
    v14 = v4[8];
    v15 = v4[6];
    v16 = v4[7];
    v17 = (v14 + v13);
    v18 = v16 + v15 + v6 + v5;
    v19 = v6 + v5 - (v16 + v15);
    v20 = v17 + v11;
    v21 = v11 - v17;
    v22 = (v10 + v9);
    v23 = v5 - v6;
    v24 = v4[10];
    v25 = v7 - v8;
    LODWORD(v7) = v4[4];
    v26 = v9 - v10;
    LODWORD(v10) = v24 + v12;
    LODWORD(v4) = v4[9];
    v27 = v12 - v24;
    v28 = ((_DWORD)v4 + v7);
    LODWORD(v4) = v7 - (_DWORD)v4;
    v29 = v28 + v22;
    v30 = v22 - v28;
    v31 = v13 - v14;
    v32 = v15 - v16;
    v33 = (2 * v10);
    LODWORD(v10) = v10 + v20 + v29 + v18;
    v34 = 9058 * (v19 + (int)v21) + 1024;
    v35 = 0x7FFFFFFE3C9 * (v29 - v33) + 2578 * (v20 - (int)v33) + 10438 * (v18 - (int)v33);
    v36 = v34 + 0x7FFFFFFD3E1 * v30;
    v37 = v23 + v27 - v32 - (v26 + v25 + v31 - (_DWORD)v4);
    v27 <<= 13;
    v38 = v34 + 5027 * (int)v30 + 2237 * v19;
    v39 = 9810 * ((int)v26 + (int)v23) + 6164 * ((int)v32 + (int)v4);
    v40 = 10935 * ((int)v25 + (int)v23) + 3826 * ((int)v31 - (int)v32);
    v41 = 11512 * ((int)v31 - (int)v4) - v27 - 1297 * ((int)v26 + (int)v25) + 1024;
    v42 = (_DWORD *)(result + 4 * v3);
    v42[6] = (unint64_t)(v36 + 0x7FFFFFFC8FCLL * v21) >> 11;
    v42[7] = 4 * v37;
    v42[4] = (unint64_t)(v35 + 1024) >> 11;
    v42[5] = (unint64_t)(v41 + 0x7FFFFFFB409 * v26 + 9175 * (int)v4 + v39) >> 11;
    v42[2] = v38 >> 11;
    v42[3] = (unint64_t)(v41 + 0x7FFFFFFF26ELL * v25 + 0x7FFFFFF9DC4 * v31 + v40) >> 11;
    *v42 = 4 * v10 - 7168;
    v42[1] = (unint64_t)(v40 + v27 + v32 + 0x7FFFFFFDBF0 * (v32 + v23) + v39 + 1024) >> 11;
    v3 += 8;
  }
  while (v3 != 56);
  v43 = 0;
  do
  {
    v44 = (_DWORD *)(result + v43);
    v45 = *(_DWORD *)(result + v43);
    v46 = *(_DWORD *)(result + v43 + 192);
    v47 = v46 + v45;
    v48 = *(_DWORD *)(result + v43 + 32);
    v49 = *(_DWORD *)(result + v43 + 160);
    v50 = v49 + v48;
    v51 = *(_DWORD *)(result + v43 + 64);
    v52 = *(_DWORD *)(result + v43 + 128);
    v53 = v52 + v51;
    v54 = *(int *)(result + v43 + 96);
    v55 = v45 - v46;
    v56 = v48 - v49;
    v57 = v51 - v52;
    *v44 = (unint64_t)(10700 * (v54 + v50 + v53 + v47) + 0x8000) >> 16;
    v58 = 3783 * (v53 + v47 - 4 * v54);
    v59 = 9850 * (v47 - v53);
    v60 = 3367 * (v50 - v53);
    v44[16] = (unint64_t)(v60 + v59 + v58 + 0x8000) >> 16;
    v61 = 9434 * (v47 - v50) + 0x8000;
    v44[32] = (unint64_t)(v61 + v60 + 0xFFFFFFFFE272 * (v50 - 2 * v54)) >> 16;
    v44[48] = (unint64_t)(v61 - v59 + v58) >> 16;
    v62 = 10009 * (v56 + v55);
    v63 = 1822 * (v55 - v56);
    v64 = -14752 * (v57 + v56);
    v65 = 6565 * (v57 + v55) + 0x8000;
    v44[8] = (unint64_t)(v65 - v63 + v62) >> 16;
    v44[24] = (unint64_t)(v64 + v63 + v62 + 0x8000) >> 16;
    v44[40] = (unint64_t)(v65 + 20017 * v57 + v64) >> 16;
    v43 += 4;
  }
  while ((_DWORD)v43 != 32);
  return result;
}

_OWORD *sub_100398F34(_OWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v3 = 0;
  result[14] = 0u;
  result[15] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  do
  {
    v4 = (unsigned __int8 *)(*(_QWORD *)(a2 + v3 * 4) + a3);
    v5 = *v4;
    v6 = v4[11];
    v7 = v4[1];
    v8 = v4[2];
    v9 = v4[9];
    v10 = (v9 + v8);
    v11 = v4[3];
    v12 = v4[8];
    v13 = (v12 + v11);
    v14 = v4[5];
    v15 = v4[6];
    v16 = v15 + v14 + v6 + v5;
    v17 = v6 + v5 - (v15 + v14);
    v18 = v13 + v10;
    v19 = v10 - v13;
    v20 = v4[10];
    v21 = v5 - v6;
    v22 = (v20 + v7);
    v23 = v7 - v20;
    v24 = v8 - v9;
    LODWORD(v6) = v4[4];
    LODWORD(v4) = v4[7];
    v25 = ((_DWORD)v4 + v6);
    LODWORD(v9) = v6 - (_DWORD)v4;
    v26 = &result[v3];
    v27 = v14 - v15;
    v28 = v22 - v25;
    LODWORD(v8) = 4 * (v18 + v22 + v25 + v16) - 6144;
    LODWORD(v25) = v17 - (v22 - v25 + v19);
    LODWORD(v15) = v16 - v18;
    v29 = v28 - v19 + 11190 * (v17 + (int)v19);
    v30 = 6270 * v23 + 4433 * ((int)v9 + v23);
    v31 = -15137 * (int)v9 + 4433 * ((int)v9 + v23);
    LODWORD(v22) = v11 - v12 + v21;
    v32 = 9191 * ((int)v24 + (int)v21) + 1024;
    *v26 = v8;
    v26[1] = (unint64_t)(v32 + 0x7FFFFFFED6ALL * v21 + 7053 * (int)v22 + v30 + 1512 * (int)v27) >> 11;
    v26[2] = (unint64_t)(v29 + 1024) >> 11;
    v26[3] = (unint64_t)(v31 + 10703 * ((int)v21 - (v11 - v12)) + 0x7FFFFFFEEAFLL * (v27 + v24) + 1024) >> 11;
    v33 = v11 - v12 + v24;
    v26[4] = (unint64_t)(10033 * (int)v15 + 1024) >> 11;
    v26[5] = (unint64_t)(v32 - 19165 * (int)v24 - 1512 * v33 - v31 + 7053 * (int)v27) >> 11;
    v26[6] = 4 * v25;
    v26[7] = (unint64_t)(5946 * (v11 - v12)
                              + 7053 * (int)v22
                              - 1512 * v33
                              - v30
                              + 0x7FFFFFFDC19 * v27
                              + 1024) >> 11;
    v3 += 2;
  }
  while (v3 != 12);
  v34 = 0;
  do
  {
    v35 = (_DWORD *)((char *)result + v34);
    v36 = *(_DWORD *)((char *)result + v34);
    v37 = *(_DWORD *)((char *)result + v34 + 160);
    v38 = v37 + v36;
    v39 = *(_DWORD *)((char *)result + v34 + 32);
    v40 = *(_DWORD *)((char *)result + v34 + 128);
    v41 = v40 + v39;
    v42 = *(_DWORD *)((char *)result + v34 + 64);
    v43 = *(_DWORD *)((char *)result + v34 + 96);
    v44 = v43 + v42;
    v45 = v36 - v37;
    v46 = v39 - v40;
    v47 = v42 - v43;
    *v35 = (unint64_t)(14564 * (v44 + v38 + v41) + 0x8000) >> 16;
    v35[16] = (unint64_t)(17837 * (v38 - v44) + 0x8000) >> 16;
    v35[32] = (unint64_t)(10298 * (v44 + v38 - 2 * v41) + 0x8000) >> 16;
    v48 = 5331 * (v47 + v45) + 0x8000;
    v35[8] = (unint64_t)(v48 + 14564 * (v46 + v45)) >> 16;
    v35[24] = (unint64_t)(14564 * (v45 - (v46 + v47)) + 0x8000) >> 16;
    v35[40] = (unint64_t)(v48 + 14564 * (v47 - v46)) >> 16;
    v34 += 4;
  }
  while ((_DWORD)v34 != 32);
  return result;
}

_OWORD *sub_100399204(_OWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = 0;
  result[14] = 0u;
  result[15] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  result[10] = 0u;
  result[11] = 0u;
  do
  {
    v4 = (unsigned __int8 *)(*(_QWORD *)(a2 + v3 * 4) + a3);
    v5 = *v4;
    v6 = v4[9];
    v7 = v4[1];
    v8 = v4[8];
    v9 = (v8 + v7);
    v10 = v4[3];
    v11 = v4[6];
    v12 = (v11 + v10);
    v13 = v4[4];
    v14 = v4[5];
    v15 = v14 + v13 + v6 + v5;
    v16 = v6 + v5 - (v14 + v13);
    v17 = v12 + v9;
    v18 = v9 - v12;
    v19 = v5 - v6;
    v20 = v4[2];
    v21 = v4[7];
    v22 = v7 - v8;
    LODWORD(v8) = v21 + v20;
    v23 = v20 - v21;
    v24 = &result[v3];
    v25 = v10 - v11;
    LODWORD(v12) = v8 + v15 + v17;
    v26 = (0x7FFFFFFF204 * (v17 - (unint64_t)(2 * v8)) + 9373 * (v15 - 2 * (int)v8) + 1024) >> 11;
    v27 = 6810 * (v16 + (int)v18) + 1024;
    LODWORD(v8) = v13 - v14 + v19;
    v24[4] = v26;
    v24[5] = 4 * (v8 - (v22 - v25 + v23));
    v23 <<= 13;
    *v24 = 4 * v12 - 5120;
    v24[1] = (unint64_t)(10323 * (int)v22
                              + 11443 * v19
                              + v23
                              + 5260 * (int)v25
                              + 1812 * (v13 - v14)
                              + 1024) >> 11;
    v28 = -4815 * ((int)v25 + (int)v22) + 7791 * (v19 - (v13 - v14));
    v29 = 2531 * ((int)v8 + (int)v22 - (int)v25) - v23 + ((v22 - v25) << 12);
    v28 += 1024;
    v24[2] = (unint64_t)(v27 + 4209 * v16) >> 11;
    v24[3] = (unint64_t)(v28 + v29) >> 11;
    v24[6] = (unint64_t)(v27 + 0x7FFFFFFBA5CLL * v18) >> 11;
    v24[7] = (unint64_t)(v28 - v29) >> 11;
    v3 += 2;
  }
  while (v3 != 10);
  v30 = 0;
  do
  {
    v31 = (_DWORD *)((char *)result + v30);
    v32 = *(_DWORD *)((char *)result + v30);
    v33 = *(_DWORD *)((char *)result + v30 + 128);
    v34 = v33 + v32;
    v35 = *(_DWORD *)((char *)result + v30 + 32);
    v36 = *(_DWORD *)((char *)result + v30 + 96);
    v37 = v36 + v35;
    v38 = *(int *)((char *)result + v30 + 64);
    v39 = v32 - v33;
    v40 = v35 - v36;
    *v31 = (unint64_t)(10486 * (v37 + v34 + v38) + 0x4000) >> 15;
    v41 = 3707 * (v37 + v34 - 4 * v38);
    v42 = 8290 * (v34 - v37) + 0x4000;
    v31[16] = (unint64_t)(v42 + v41) >> 15;
    v31[32] = (unint64_t)(v42 - v41) >> 15;
    v43 = 8716 * (v40 + v39) + 0x4000;
    v31[8] = (unint64_t)(v43 + 5387 * v39) >> 15;
    v31[24] = (unint64_t)(v43 + 0x7FFFFFFFA6DCLL * v40) >> 15;
    v30 += 4;
  }
  while ((_DWORD)v30 != 32);
  return result;
}

double sub_100399480(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  double result;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v4 = a3;
  v5 = a2[1];
  v6 = (unsigned __int8 *)(*a2 + a3);
  v7 = *v6;
  v8 = v6[7];
  v9 = v6[1];
  v10 = v6[6];
  v11 = (v10 + v9);
  v12 = v6[2];
  v13 = v6[5];
  v14 = (v13 + v12);
  v15 = v6[3];
  LODWORD(v6) = v6[4];
  v16 = (_DWORD)v6 + v15 + v8 + v7;
  v17 = v8 + v7 - ((_DWORD)v6 + v15);
  v18 = v14 + v11;
  v19 = v11 - v14;
  v20 = v7 - v8;
  v21 = v9 - v10;
  v22 = 4433 * (v17 + (int)v19) + 512;
  v23 = (unint64_t)(v22 + 6270 * v17) >> 10;
  v24 = (unint64_t)(v22 + 0x3FFFFFFC4DFLL * v19) >> 10;
  v25 = v12 - v13 + v20;
  v26 = 9633 * (v15 - (int)v6 + v21 + v25) + 512;
  v27 = v26 - 3196 * v25;
  v28 = v26 - 16069 * (v15 - (int)v6 + v21);
  *(_DWORD *)a1 = 8 * (v16 + v18) - 0x2000;
  *(_DWORD *)(a1 + 4) = (unint64_t)(12299 * v20 - 7373 * (v15 - (int)v6 + v20) + v27) >> 10;
  *(_DWORD *)(a1 + 8) = v23;
  *(_DWORD *)(a1 + 12) = (unint64_t)(25172 * v21 - 20995 * (v12 - v13 + v21) + v28) >> 10;
  *(_DWORD *)(a1 + 16) = 8 * (v16 - v18);
  *(_DWORD *)(a1 + 20) = (unint64_t)(16819 * (v12 - v13) - 20995 * (v12 - v13 + v21) + v27) >> 10;
  *(_DWORD *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 28) = (unint64_t)(2446 * (v15 - (int)v6) - 7373 * (v15 - (int)v6 + v20) + v28) >> 10;
  v29 = (unsigned __int8 *)(v5 + v4);
  v30 = *v29;
  v31 = v29[7];
  v32 = v29[1];
  LODWORD(v23) = v29[6];
  v33 = (v23 + v32);
  LODWORD(v27) = v29[2];
  LODWORD(v28) = v29[5];
  v34 = (v28 + v27);
  v35 = v29[3];
  LODWORD(v29) = v29[4];
  v36 = (_DWORD)v29 + v35 + v31 + v30;
  v37 = v31 + v30 - ((_DWORD)v29 + v35);
  v38 = v34 + v33;
  v39 = v33 - v34;
  v40 = v30 - v31;
  v41 = v32 - v23;
  v42 = v27 - v28;
  LODWORD(v29) = v35 - (_DWORD)v29;
  v43 = 4433 * (v37 + (int)v39) + 512;
  v44 = (unint64_t)(v43 + 6270 * v37) >> 10;
  v45 = (unint64_t)(v43 + 0x3FFFFFFC4DFLL * v39) >> 10;
  v46 = 9633 * ((int)v29 + v41 + v42 + v40) + 512;
  v47 = v46 - 3196 * (v42 + v40);
  v48 = v46 - 16069 * ((int)v29 + v41);
  *(_DWORD *)(a1 + 32) = 8 * (v36 + v38) - 0x2000;
  *(_DWORD *)(a1 + 36) = (unint64_t)(12299 * v40 - 7373 * ((int)v29 + v40) + v47) >> 10;
  *(_DWORD *)(a1 + 40) = v44;
  *(_DWORD *)(a1 + 44) = (unint64_t)(25172 * v41 - 20995 * (v42 + v41) + v48) >> 10;
  *(_DWORD *)(a1 + 48) = 8 * (v36 - v38);
  *(_DWORD *)(a1 + 52) = (unint64_t)(16819 * v42 - 20995 * (v42 + v41) + v47) >> 10;
  *(_DWORD *)(a1 + 56) = v45;
  *(_DWORD *)(a1 + 60) = (unint64_t)(2446 * (int)v29 - 7373 * ((int)v29 + v40) + v48) >> 10;
  v49 = (unsigned __int8 *)(a2[2] + v4);
  v50 = *v49;
  v51 = v49[7];
  v52 = v49[1];
  LODWORD(v23) = v49[6];
  v53 = (v23 + v52);
  LODWORD(v27) = v49[2];
  LODWORD(v47) = v49[5];
  v54 = (v47 + v27);
  LODWORD(v46) = v49[3];
  LODWORD(v49) = v49[4];
  v55 = (_DWORD)v49 + v46 + v51 + v50;
  LODWORD(v44) = v51 + v50 - ((_DWORD)v49 + v46);
  v56 = v54 + v53;
  v57 = v53 - v54;
  v58 = v50 - v51;
  v59 = v52 - v23;
  v60 = v27 - v47;
  LODWORD(v49) = v46 - (_DWORD)v49;
  v61 = 4433 * ((int)v44 + (int)v57) + 512;
  v62 = (unint64_t)(v61 + 6270 * (int)v44) >> 10;
  v63 = (unint64_t)(v61 + 0x3FFFFFFC4DFLL * v57) >> 10;
  v64 = 9633 * ((int)v49 + v59 + v60 + v58) + 512;
  v65 = v64 - 3196 * (v60 + v58);
  v66 = v64 - 16069 * ((int)v49 + v59);
  v67 = (unsigned __int8 *)(a2[3] + v4);
  *(_DWORD *)(a1 + 64) = 8 * (v55 + v56) - 0x2000;
  *(_DWORD *)(a1 + 68) = (unint64_t)(12299 * v58 - 7373 * ((int)v49 + v58) + v65) >> 10;
  *(_DWORD *)(a1 + 72) = v62;
  *(_DWORD *)(a1 + 76) = (unint64_t)(25172 * v59 - 20995 * (v60 + v59) + v66) >> 10;
  *(_DWORD *)(a1 + 80) = 8 * (v55 - v56);
  *(_DWORD *)(a1 + 84) = (unint64_t)(16819 * v60 - 20995 * (v60 + v59) + v65) >> 10;
  *(_DWORD *)(a1 + 88) = v63;
  *(_DWORD *)(a1 + 92) = (unint64_t)(2446 * (int)v49 - 7373 * ((int)v49 + v58) + v66) >> 10;
  v68 = *v67;
  LODWORD(v49) = v67[7];
  v69 = v67[1];
  LODWORD(v62) = v67[6];
  v70 = (v62 + v69);
  LODWORD(v23) = v67[2];
  LODWORD(v63) = v67[5];
  v71 = (v63 + v23);
  LODWORD(v65) = v67[3];
  LODWORD(v67) = v67[4];
  LODWORD(v64) = (_DWORD)v67 + v65 + (_DWORD)v49 + v68;
  v72 = (_DWORD)v49 + v68 - ((_DWORD)v67 + v65);
  LODWORD(v66) = v71 + v70;
  v73 = v70 - v71;
  LODWORD(v71) = v68 - (_DWORD)v49;
  v74 = v69 - v62;
  LODWORD(v62) = v23 - v63;
  v75 = 8 * (v64 + v66) - 0x2000;
  v76 = 4433 * (v72 + (int)v73) + 512;
  v77 = (unint64_t)(v76 + 6270 * v72) >> 10;
  v78 = 9633 * ((int)v65 - (int)v67 + v74 + (int)v62 + (int)v71) + 512;
  v79 = v78 - 3196 * ((int)v62 + (int)v71);
  v80 = v78 - 16069 * ((int)v65 - (int)v67 + v74);
  v81 = (unint64_t)(12299 * (int)v71 - 7373 * ((int)v65 - (int)v67 + (int)v71) + v79) >> 10;
  v82 = (unint64_t)(25172 * v74 - 20995 * ((int)v62 + v74) + v80) >> 10;
  v83 = (unint64_t)(16819 * (int)v62 - 20995 * ((int)v62 + v74) + v79) >> 10;
  v84 = (unint64_t)(2446 * ((int)v65 - (int)v67) - 7373 * ((int)v65 - (int)v67 + (int)v71) + v80) >> 10;
  v85 = *(_DWORD *)(a1 + 4);
  v86 = v75 + *(_DWORD *)a1 + 2;
  LODWORD(v78) = *(_DWORD *)(a1 + 32);
  LODWORD(v79) = *(_DWORD *)(a1 + 36);
  v87 = *(_DWORD *)(a1 + 64);
  v88 = *(_DWORD *)(a1 + 68);
  v89 = v87 + (int)v78;
  LODWORD(v26) = *(_DWORD *)a1 - v75;
  *(_DWORD *)(a1 + 104) = v77;
  *(_DWORD *)(a1 + 108) = v82;
  *(_DWORD *)(a1 + 112) = 8 * (v64 - v66);
  *(_DWORD *)(a1 + 116) = v83;
  *(_DWORD *)(a1 + 120) = (unint64_t)(v76 + 0x3FFFFFFC4DFLL * v73) >> 10;
  *(_DWORD *)(a1 + 124) = v84;
  v90 = (int)v78 - v87;
  v91 = 4433 * (v90 + (int)v26) + 0x4000;
  v92 = (unint64_t)(v91 + 6270 * (int)v26) >> 15;
  v93 = (unint64_t)(v91 + 0x7FFFFFFFC4DFLL * v90) >> 15;
  v94 = v85 + (int)v81 + 2;
  v95 = v88 + (int)v79;
  LODWORD(v81) = v85 - v81;
  v96 = (int)v79 - v88;
  *(_DWORD *)a1 = (unint64_t)(v86 + v89) >> 2;
  *(_DWORD *)(a1 + 4) = (unint64_t)(v94 + v95) >> 2;
  *(_DWORD *)(a1 + 64) = (unint64_t)(v86 - v89) >> 2;
  *(_DWORD *)(a1 + 68) = (unint64_t)(v94 - v95) >> 2;
  v97 = 4433 * (v96 + (int)v81) + 0x4000;
  *(_DWORD *)(a1 + 32) = v92;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v97 + 6270 * (int)v81) >> 15;
  *(_DWORD *)(a1 + 96) = v93;
  *(_DWORD *)(a1 + 100) = (unint64_t)(v97 + 0x7FFFFFFFC4DFLL * v96) >> 15;
  LODWORD(v81) = *(_DWORD *)(a1 + 8);
  LODWORD(v93) = *(_DWORD *)(a1 + 12);
  LODWORD(v97) = *(_DWORD *)(a1 + 104);
  LODWORD(v92) = *(_DWORD *)(a1 + 108);
  v98 = (int)v97 + (int)v81 + 2;
  LODWORD(v86) = *(_DWORD *)(a1 + 40);
  LODWORD(v94) = *(_DWORD *)(a1 + 44);
  LODWORD(v95) = *(_DWORD *)(a1 + 72);
  LODWORD(v79) = *(_DWORD *)(a1 + 76);
  v99 = (int)v95 + (int)v86;
  LODWORD(v81) = v81 - v97;
  v100 = (int)v86 - (int)v95;
  v101 = (unint64_t)(v98 + v99) >> 2;
  v102 = (unint64_t)(v98 - v99) >> 2;
  v103 = 4433 * (v100 + (int)v81) + 0x4000;
  v104 = (unint64_t)(v103 + 6270 * (int)v81) >> 15;
  v105 = (unint64_t)(v103 + 0x7FFFFFFFC4DFLL * v100) >> 15;
  v106 = (int)v92 + (int)v93 + 2;
  v107 = (int)v79 + (int)v94;
  LODWORD(v93) = v93 - v92;
  v108 = (int)v94 - (int)v79;
  *(_DWORD *)(a1 + 8) = v101;
  *(_DWORD *)(a1 + 12) = (unint64_t)(v106 + v107) >> 2;
  *(_DWORD *)(a1 + 72) = v102;
  *(_DWORD *)(a1 + 76) = (unint64_t)(v106 - v107) >> 2;
  v109 = 4433 * (v108 + (int)v93) + 0x4000;
  *(_DWORD *)(a1 + 40) = v104;
  *(_DWORD *)(a1 + 44) = (unint64_t)(v109 + 6270 * (int)v93) >> 15;
  *(_DWORD *)(a1 + 104) = v105;
  *(_DWORD *)(a1 + 108) = (unint64_t)(v109 + 0x7FFFFFFFC4DFLL * v108) >> 15;
  LODWORD(v104) = *(_DWORD *)(a1 + 16);
  LODWORD(v93) = *(_DWORD *)(a1 + 20);
  LODWORD(v105) = *(_DWORD *)(a1 + 112);
  LODWORD(v108) = *(_DWORD *)(a1 + 116);
  v110 = (int)v105 + (int)v104 + 2;
  LODWORD(v101) = *(_DWORD *)(a1 + 48);
  LODWORD(v94) = *(_DWORD *)(a1 + 52);
  LODWORD(v106) = *(_DWORD *)(a1 + 80);
  LODWORD(v79) = *(_DWORD *)(a1 + 84);
  v111 = (int)v106 + (int)v101;
  LODWORD(v104) = v104 - v105;
  v112 = (int)v101 - (int)v106;
  v113 = (unint64_t)(v110 + v111) >> 2;
  v114 = (unint64_t)(v110 - v111) >> 2;
  v115 = 4433 * (v112 + (int)v104) + 0x4000;
  v116 = (unint64_t)(v115 + 6270 * (int)v104) >> 15;
  v117 = (unint64_t)(v115 + 0x7FFFFFFFC4DFLL * v112) >> 15;
  v118 = (int)v108 + (int)v93 + 2;
  v119 = (int)v79 + (int)v94;
  LODWORD(v93) = v93 - v108;
  v120 = (int)v94 - (int)v79;
  *(_DWORD *)(a1 + 16) = v113;
  *(_DWORD *)(a1 + 20) = (unint64_t)(v118 + v119) >> 2;
  *(_DWORD *)(a1 + 80) = v114;
  *(_DWORD *)(a1 + 84) = (unint64_t)(v118 - v119) >> 2;
  v121 = 4433 * (v120 + (int)v93) + 0x4000;
  *(_DWORD *)(a1 + 48) = v116;
  *(_DWORD *)(a1 + 52) = (unint64_t)(v121 + 6270 * (int)v93) >> 15;
  *(_DWORD *)(a1 + 112) = v117;
  *(_DWORD *)(a1 + 116) = (unint64_t)(v121 + 0x7FFFFFFFC4DFLL * v120) >> 15;
  LODWORD(v116) = *(_DWORD *)(a1 + 24);
  LODWORD(v93) = *(_DWORD *)(a1 + 28);
  LODWORD(v117) = *(_DWORD *)(a1 + 120);
  LODWORD(v120) = *(_DWORD *)(a1 + 124);
  v122 = (int)v117 + (int)v116 + 2;
  LODWORD(v113) = *(_DWORD *)(a1 + 56);
  LODWORD(v94) = *(_DWORD *)(a1 + 60);
  LODWORD(v118) = *(_DWORD *)(a1 + 88);
  LODWORD(v79) = *(_DWORD *)(a1 + 92);
  v123 = (int)v118 + (int)v113;
  LODWORD(v116) = v116 - v117;
  v124 = (int)v113 - (int)v118;
  v125 = (unint64_t)(v122 + v123) >> 2;
  v126 = (unint64_t)(v122 - v123) >> 2;
  v127 = 4433 * (v124 + (int)v116) + 0x4000;
  v128 = (unint64_t)(v127 + 6270 * (int)v116) >> 15;
  v129 = (unint64_t)(v127 + 0x7FFFFFFFC4DFLL * v124) >> 15;
  v130 = (int)v120 + (int)v93 + 2;
  v131 = (int)v79 + (int)v94;
  LODWORD(v93) = v93 - v120;
  v132 = (int)v94 - (int)v79;
  *(_DWORD *)(a1 + 24) = v125;
  *(_DWORD *)(a1 + 28) = (unint64_t)(v130 + v131) >> 2;
  *(_DWORD *)(a1 + 88) = v126;
  *(_DWORD *)(a1 + 92) = (unint64_t)(v130 - v131) >> 2;
  v133 = 4433 * (v132 + (int)v93) + 0x4000;
  *(_DWORD *)(a1 + 56) = v128;
  *(_DWORD *)(a1 + 60) = (unint64_t)(v133 + 6270 * (int)v93) >> 15;
  *(_DWORD *)(a1 + 120) = v129;
  *(_DWORD *)(a1 + 124) = (unint64_t)(v133 + 0x7FFFFFFFC4DFLL * v132) >> 15;
  return result;
}

double sub_100399BA4(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  double result;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;

  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a3;
  v5 = a2[1];
  v6 = (unsigned __int8 *)(*a2 + a3);
  v7 = *v6;
  v8 = v6[5];
  v9 = v6[1];
  v10 = v6[4];
  v11 = v6[2];
  LODWORD(v6) = v6[3];
  v12 = (_DWORD)v6 + v11 + v8 + v7;
  v13 = v8 + v7 - ((_DWORD)v6 + v11);
  LODWORD(v6) = v11 - (_DWORD)v6;
  v14 = 8 * (v12 + v10 + v9) - 6144;
  v15 = (unint64_t)(5793 * (v12 - 2 * (v10 + v9)) + 512) >> 10;
  v16 = (unint64_t)(2998 * ((int)v6 + v7 - v8) + 512) >> 10;
  *(_DWORD *)a1 = v14;
  *(_DWORD *)(a1 + 4) = v16 + 8 * (v9 - v10 + v7 - v8);
  *(_DWORD *)(a1 + 8) = (10033 * v13 + 512) >> 10;
  *(_DWORD *)(a1 + 12) = 8 * (v7 - v8 - (v9 - v10 + (_DWORD)v6));
  *(_DWORD *)(a1 + 16) = v15;
  *(_DWORD *)(a1 + 20) = v16 + 8 * ((_DWORD)v6 - (v9 - v10));
  v17 = (unsigned __int8 *)(v5 + a3);
  LODWORD(v5) = *v17;
  LODWORD(v15) = v17[5];
  v18 = v17[1];
  LODWORD(v16) = v17[4];
  v19 = v16 + v18;
  v20 = v17[2];
  LODWORD(v17) = v17[3];
  v21 = (_DWORD)v17 + v20 + v15 + v5;
  v22 = v15 + v5 - ((_DWORD)v17 + v20);
  LODWORD(v15) = v5 - v15;
  v23 = v18 - v16;
  LODWORD(v16) = v20 - (_DWORD)v17;
  LODWORD(v17) = 8 * (v21 + v19) - 6144;
  v24 = (2998 * ((int)v16 + (int)v15) + 512) >> 10;
  LODWORD(v5) = v24 + 8 * (v23 + v15);
  *(_DWORD *)(a1 + 32) = (_DWORD)v17;
  *(_DWORD *)(a1 + 36) = v5;
  *(_DWORD *)(a1 + 40) = (10033 * v22 + 512) >> 10;
  *(_DWORD *)(a1 + 44) = 8 * (v15 - (v23 + v16));
  *(_DWORD *)(a1 + 48) = (unint64_t)(5793 * (v21 - 2 * v19) + 512) >> 10;
  *(_DWORD *)(a1 + 52) = v24 + 8 * (v16 - v23);
  v25 = (unsigned __int8 *)(a2[2] + v4);
  LODWORD(v15) = *v25;
  v26 = v25[5];
  v27 = v25[1];
  LODWORD(v16) = v25[4];
  LODWORD(v24) = v25[2];
  LODWORD(v25) = v25[3];
  v28 = (_DWORD)v25 + v24 + v26 + v15;
  v29 = 8 * (v28 + v16 + v27) - 6144;
  v30 = v26 + v15 - ((_DWORD)v25 + v24);
  LODWORD(v15) = v15 - v26;
  LODWORD(v25) = v24 - (_DWORD)v25;
  v31 = (10033 * v30 + 512) >> 10;
  v32 = (unint64_t)(2998 * ((int)v25 + (int)v15) + 512) >> 10;
  v33 = v32 + 8 * (v27 - v16 + v15);
  v34 = 8 * (v15 - (v27 - v16 + (_DWORD)v25));
  *(_DWORD *)(a1 + 80) = (unint64_t)(5793 * (v28 - 2 * ((int)v16 + v27)) + 512) >> 10;
  *(_DWORD *)(a1 + 84) = v32 + 8 * ((_DWORD)v25 - (v27 - v16));
  LODWORD(v15) = *(_DWORD *)(a1 + 4);
  v35 = v29 + *(_DWORD *)a1;
  v36 = (unint64_t)(17837 * (*(_DWORD *)a1 - v29) + 0x4000) >> 15;
  v37 = (int)v15 + v33;
  *(_DWORD *)a1 = (unint64_t)(14564 * (v35 + (int)v17) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 4) = (unint64_t)(14564 * (v37 + (int)v5) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 64) = (unint64_t)(10298 * (v35 - 2 * (int)v17) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 68) = (unint64_t)(10298 * (v37 - 2 * (int)v5) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 32) = v36;
  *(_DWORD *)(a1 + 36) = (unint64_t)(17837 * ((int)v15 - v33) + 0x4000) >> 15;
  LODWORD(v5) = *(_DWORD *)(a1 + 8);
  LODWORD(v36) = *(_DWORD *)(a1 + 12);
  v38 = v31 + (int)v5;
  LODWORD(v5) = v5 - v31;
  v39 = *(int *)(a1 + 40);
  v40 = *(int *)(a1 + 44);
  v41 = (unint64_t)(14564 * (v38 + v39) + 0x4000) >> 15;
  v42 = (unint64_t)(10298 * (v38 - 2 * v39) + 0x4000) >> 15;
  v43 = v34 + (int)v36;
  *(_DWORD *)(a1 + 8) = v41;
  *(_DWORD *)(a1 + 12) = (unint64_t)(14564 * (v43 + v40) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 72) = v42;
  *(_DWORD *)(a1 + 76) = (unint64_t)(10298 * (v43 - 2 * v40) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 40) = (unint64_t)(17837 * (int)v5 + 0x4000) >> 15;
  *(_DWORD *)(a1 + 44) = (unint64_t)(17837 * ((int)v36 - v34) + 0x4000) >> 15;
  LODWORD(v5) = *(_DWORD *)(a1 + 16);
  LODWORD(v42) = *(_DWORD *)(a1 + 20);
  v44 = *(_DWORD *)(a1 + 80);
  LODWORD(v36) = *(_DWORD *)(a1 + 84);
  v45 = v44 + (int)v5;
  LODWORD(v5) = v5 - v44;
  v46 = *(int *)(a1 + 48);
  v47 = *(int *)(a1 + 52);
  v48 = (unint64_t)(14564 * (v45 + v46) + 0x4000) >> 15;
  v49 = (unint64_t)(10298 * (v45 - 2 * v46) + 0x4000) >> 15;
  v50 = (int)v36 + (int)v42;
  *(_DWORD *)(a1 + 16) = v48;
  *(_DWORD *)(a1 + 20) = (unint64_t)(14564 * (v50 + v47) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 80) = v49;
  *(_DWORD *)(a1 + 84) = (unint64_t)(10298 * (v50 - 2 * v47) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 48) = (unint64_t)(17837 * (int)v5 + 0x4000) >> 15;
  *(_DWORD *)(a1 + 52) = (unint64_t)(17837 * ((int)v42 - (int)v36) + 0x4000) >> 15;
  return result;
}

double sub_100399F28(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  double result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a2[1];
  v5 = (unsigned __int8 *)(*a2 + a3);
  v6 = *v5;
  v7 = v5[3];
  v8 = v7 + v6;
  v9 = v5[1];
  v10 = v5[2];
  v11 = v10 + v9;
  v12 = v6 - v7;
  v13 = v9 - v10;
  v14 = (32 * (v11 + v8));
  v15 = v8 - v11;
  v16 = 4433 * ((int)v13 + v12) + 128;
  v17 = v16 + 6270 * v12;
  *(_DWORD *)a1 = v14 - 0x4000;
  *(_DWORD *)(a1 + 4) = (unint64_t)v17 >> 8;
  v18 = v16 + 0xFFFFFFC4DFLL * v13;
  *(_DWORD *)(a1 + 8) = 32 * v15;
  *(_DWORD *)(a1 + 12) = (unint64_t)v18 >> 8;
  v19 = (unsigned __int8 *)(v4 + a3);
  LODWORD(v4) = *v19;
  v20 = v19[3];
  LODWORD(v16) = v20 + v4;
  v21 = v19[1];
  v22 = v19[2];
  v23 = v22 + v21;
  LODWORD(v4) = v4 - v20;
  v24 = v21 - v22;
  v25 = 32 * (v23 + v16) - 0x4000;
  LODWORD(v16) = 32 * (v16 - v23);
  v26 = 4433 * ((int)v24 + (int)v4) + 128;
  v14 -= 16382;
  v27 = (v17 >> 8) + 2;
  v28 = (v26 + 6270 * (int)v4) >> 8;
  *(_DWORD *)a1 = (unint64_t)(v14 + v25) >> 2;
  *(_DWORD *)(a1 + 4) = (unint64_t)(v27 + v28) >> 2;
  *(_DWORD *)(a1 + 32) = (unint64_t)(v14 - v25) >> 2;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v27 - v28) >> 2;
  v29 = (32 * v15) | 2;
  v30 = (int)(v18 >> 8) + 2;
  v31 = (int)((v26 + 0xFFFFFFC4DFLL * v24) >> 8);
  *(_DWORD *)(a1 + 8) = (unint64_t)(v29 + (int)v16) >> 2;
  *(_DWORD *)(a1 + 12) = (unint64_t)(v30 + v31) >> 2;
  *(_DWORD *)(a1 + 40) = (unint64_t)(v29 - (int)v16) >> 2;
  *(_DWORD *)(a1 + 44) = (unint64_t)(v30 - v31) >> 2;
  return result;
}

double sub_10039A094(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  double result;
  unsigned __int8 *v4;
  int v5;

  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (unsigned __int8 *)(*a2 + a3);
  v5 = *v4;
  LODWORD(v4) = v4[1];
  *(_DWORD *)a1 = 32 * ((_DWORD)v4 + v5) - 0x2000;
  *(_DWORD *)(a1 + 4) = 32 * (v5 - (_DWORD)v4);
  return result;
}

uint64_t sub_10039A0E4(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  _DWORD *v3;
  uint64_t i;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v69;
  int v70;
  int v71;
  int v72;
  _BYTE v73[256];

  v3 = a1;
  for (i = 0; ; ++i)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * i) + a3);
      v6 = *v5;
      v7 = v5[7];
      v8 = v5[1];
      v9 = v5[6];
      v10 = (v9 + v8);
      v11 = v5[2];
      v12 = v5[5];
      v13 = (v12 + v11);
      v14 = v5[3];
      LODWORD(v5) = v5[4];
      v15 = (_DWORD)v5 + v14 + v7 + v6;
      v16 = v7 + v6 - ((_DWORD)v5 + v14);
      v17 = v13 + v10;
      v18 = v10 - v13;
      v19 = v6 - v7;
      v20 = v8 - v9;
      v21 = v11 - v12;
      LODWORD(v5) = v14 - (_DWORD)v5;
      v22 = 4433 * (v16 + (int)v18) + 1024;
      v23 = (unint64_t)(v22 + 6270 * v16) >> 11;
      v24 = (unint64_t)(v22 + 0x7FFFFFFC4DFLL * v18) >> 11;
      LODWORD(v13) = (_DWORD)v5 + v20 + v21 + v19;
      v25 = -3196 * (v21 + v19) + 9633 * (int)v13;
      v26 = -16069 * ((int)v5 + v20) + 9633 * (int)v13;
      v27 = -20995 * (v21 + v20);
      v28 = -7373 * ((int)v5 + v19) + 1024;
      *v3 = 4 * (v15 + v17) - 4096;
      v3[1] = (unint64_t)(v28 + 12299 * v19 + v25) >> 11;
      v3[2] = v23;
      v3[3] = (unint64_t)(v27 + 1024 + 25172 * v20 + v26) >> 11;
      v3[4] = 4 * (v15 - v17);
      v3[5] = (unint64_t)(v27 + 1024 + 16819 * v21 + v25) >> 11;
      v3[6] = v24;
      v3[7] = (unint64_t)(v28 + 2446 * (int)v5 + v26) >> 11;
      if ((_DWORD)i != 7)
        break;
      v3 = v73;
      ++i;
    }
    if ((_DWORD)i == 15)
      break;
    v3 += 8;
  }
  v29 = 0;
  do
  {
    v30 = &a1[v29];
    v71 = a1[v29];
    v72 = *(_DWORD *)&v73[v29 * 4 + 224];
    v31 = v72 + v71;
    v69 = a1[v29 + 8];
    v70 = *(_DWORD *)&v73[v29 * 4 + 192];
    v32 = v70 + v69;
    v33 = a1[v29 + 16];
    v34 = *(_DWORD *)&v73[v29 * 4 + 160];
    v35 = v34 + v33;
    v36 = a1[v29 + 24];
    v37 = *(_DWORD *)&v73[v29 * 4 + 128];
    v38 = v37 + v36;
    v39 = a1[v29 + 32];
    v40 = *(_DWORD *)&v73[v29 * 4 + 96];
    v41 = v40 + v39;
    v42 = a1[v29 + 40];
    v43 = *(_DWORD *)&v73[v29 * 4 + 64];
    v44 = v43 + v42;
    v45 = a1[v29 + 48];
    v46 = a1[v29 + 56];
    v47 = *(_DWORD *)&v73[v29 * 4];
    v48 = v47 + v46;
    v49 = *(_DWORD *)&v73[v29 * 4 + 32];
    v50 = v49 + v45;
    v51 = v50 + v32;
    v52 = v44 + v35;
    v53 = 10703 * (v48 + v31 - (v41 + v38)) + 4433 * (v50 + v32 - (v44 + v35));
    v54 = v32 - v50;
    v55 = v35 - v44;
    v56 = v33 - v34;
    v57 = v71 - v72;
    *v30 = (unint64_t)(v41 + v38 + v52 + v51 + v48 + v31 + 4) >> 3;
    v30[32] = (unint64_t)(v53 + 0x8000) >> 16;
    v58 = v45 - v49;
    v59 = 2260 * (v38 - v41 - v54) + 11363 * (v31 - v48 - v55) + 0x8000;
    v60 = v59 + 17799 * v55 + 11893 * v54;
    v61 = v46 - v47;
    v30[16] = v60 >> 16;
    v30[48] = (unint64_t)(v59 + 0xFFFFFFFFDE07 * (v38 - v41) + 0xFFFFFFFFF93ELL * (v31 - v48)) >> 16;
    v62 = 11086 * (v69 - v70 + v57) + 3363 * (v58 - v61);
    v63 = 10217 * (v56 + v57) + 5461 * (v61 + v42 - v43);
    result = 8956 * (v36 - v37 + v57) + 7350 * (v39 - v40 - v61);
    v65 = 1136 * (v56 + (uint64_t)(v69 - v70)) + 11529 * (v58 - (v42 - v43));
    v66 = -5461 * (v36 - v37 + (uint64_t)(v69 - v70)) - 10217 * (v58 + v39 - v40);
    v30[8] = (unint64_t)(v63 + 0xFFFFFFFFB6D6 * v57 + 6387 * (v46 - v47) + v62 + result + 0x8000) >> 16;
    v30[24] = (unint64_t)(v66 + 589 * (v69 - v70) + 0xFFFFFFFFCAC1 * v58 + v65 + v62 + 0x8000) >> 16;
    v67 = -11086 * (v36 - v37 + (uint64_t)v56) + 3363 * (v42 - v43 - (uint64_t)(v39 - v40)) + 0x8000;
    v30[40] = (unint64_t)(v67 - 9222 * v56 + 10055 * (v42 - v43) + v65 + v63) >> 16;
    v30[56] = (unint64_t)(v67 + 8728 * (v36 - v37) + 17760 * (v39 - v40) + v66 + result) >> 16;
    ++v29;
  }
  while ((_DWORD)(v29 * 4) != 32);
  return result;
}

_OWORD *sub_10039A578(_OWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _DWORD *v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[192];

  v3 = 0;
  result[14] = 0u;
  result[15] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  result[10] = 0u;
  result[11] = 0u;
  result[8] = 0u;
  result[9] = 0u;
  result[6] = 0u;
  result[7] = 0u;
  result[4] = 0u;
  result[5] = 0u;
  result[2] = 0u;
  result[3] = 0u;
  v4 = result;
  *result = 0u;
  result[1] = 0u;
  while (1)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * v3) + a3);
      v6 = *v5;
      v7 = v5[6];
      v8 = v7 + v6;
      v9 = v5[1];
      v10 = v5[5];
      v11 = (v10 + v9);
      v12 = v5[2];
      v13 = v5[4];
      v14 = v13 + v12;
      v15 = v5[3];
      v16 = v6 - v7;
      v17 = v9 - v10;
      LODWORD(v5) = v12 - v13;
      v18 = v13 + v12 + v8;
      v19 = 4 * (v15 + v11 + v18) - 3584;
      v20 = v18 - 4 * v15;
      v21 = v8 - (v13 + v12);
      v22 = v11 - v14;
      v23 = (unint64_t)(7542 * v21 + 2578 * ((int)v11 - v14) + 2896 * v20 + 1024) >> 11;
      v24 = 7223 * (v8 - (int)v11) + 1024;
      v25 = (v24 + 2578 * v22 + 0x7FFFFFFE95FLL * (v11 - 2 * (unint64_t)v15)) >> 11;
      v4[6] = (unint64_t)(v24 - 7542 * v21 + 2896 * v20) >> 11;
      LODWORD(v24) = v17 + v16;
      v26 = 1395 * (v16 - v17);
      v27 = (_DWORD)v5 + v17;
      v28 = 5027 * ((int)v5 + v16) + 1024;
      *v4 = v19;
      v4[1] = (unint64_t)(v28 - v26 + 7663 * (int)v24) >> 11;
      v4[2] = v23;
      v4[3] = (unint64_t)(v26 - 11295 * v27 + 7663 * (int)v24 + 1024) >> 11;
      v4[4] = v25;
      v4[5] = (unint64_t)(v28 + 15326 * (int)v5 - 11295 * v27) >> 11;
      if ((_DWORD)v3 != 7)
        break;
      v4 = v69;
      ++v3;
    }
    if ((_DWORD)v3 == 13)
      break;
    v4 += 8;
    ++v3;
  }
  v29 = 0;
  do
  {
    v30 = (_DWORD *)((char *)result + v29);
    v31 = *(_DWORD *)((char *)result + v29);
    v32 = *(_DWORD *)&v69[v29 + 160];
    v33 = v32 + v31;
    v34 = *(_DWORD *)((char *)result + v29 + 32);
    v35 = *(_DWORD *)&v69[v29 + 128];
    v36 = *(_DWORD *)((char *)result + v29 + 64);
    v37 = *(_DWORD *)&v69[v29 + 96];
    v38 = v35 + v34;
    v39 = v37 + v36;
    v40 = *(_DWORD *)((char *)result + v29 + 128);
    v41 = *(_DWORD *)&v69[v29 + 32];
    v42 = v41 + v40;
    v43 = *(_DWORD *)((char *)result + v29 + 160);
    v44 = *(_DWORD *)&v69[v29];
    v45 = *(_DWORD *)((char *)result + v29 + 192);
    v46 = *(_DWORD *)((char *)result + v29 + 224);
    v47 = v44 + v43;
    v48 = v46 + v45;
    v49 = v48 + v33;
    v50 = v33 - v48;
    v51 = v47 + v38;
    v52 = v38 - v47;
    v53 = v42 + v39;
    v54 = v39 - v42;
    LODWORD(v42) = v31 - v32;
    v55 = *(_DWORD *)((char *)result + v29 + 96);
    v56 = *(_DWORD *)&v69[v29 + 64];
    v57 = v56 + v55;
    v58 = v55 - v56;
    v59 = v34 - v35;
    v60 = v36 - v37;
    v61 = v40 - v41;
    v62 = v43 - v44;
    v63 = v45 - v46;
    *v30 = (unint64_t)(5350 * (v53 + v57 + v51 + v49) + 0x4000) >> 15;
    v64 = 5915 * (v50 + v52) + 0x4000;
    v30[56] = (unint64_t)(5350 * ((int)v42 + (uint64_t)v58 - (v60 + v59 + v62 - v61 + v63)) + 0x4000) >> 15;
    v65 = v64 + 0x7FFFFFFFE330 * v54 + 0x7FFFFFFFDC12 * v52;
    v30[16] = (unint64_t)(v64 + 3283 * v54 + 1461 * v50) >> 15;
    v66 = 7518 * (v62 - v61) - 5350 * v58 - 847 * (v60 + v59) + 0x4000;
    v30[48] = v65 >> 15;
    v30[32] = (unint64_t)(1684 * (v51 - 2 * v57)
                               + 0x7FFFFFFFED93 * (v53 - 2 * v57)
                               + 6817 * (v49 - 2 * v57)
                               + 0x4000) >> 15;
    v67 = 7141 * (v59 + (int)v42) + 2499 * (v62 - v63);
    v68 = 6406 * (v60 + (int)v42) + 4025 * (v63 + v61);
    v30[40] = (unint64_t)(v66 + 0x7FFFFFFFCE64 * v60 + 5992 * v61 + v68) >> 15;
    v30[24] = (unint64_t)(v66 + 0x7FFFFFFFF723 * v59 + 0x7FFFFFFFBFD9 * v62 + v67) >> 15;
    v30[8] = (unint64_t)(v67 + 0x7FFFFFFFE873 * (int)v42 + 5350 * v58 + 0x7FFFFFFFFD59 * v63 + v68 + 0x4000) >> 15;
    v29 += 4;
  }
  while ((_DWORD)v29 != 28);
  return result;
}

int *sub_10039A990(int *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[128];

  v3 = 0;
  *((_OWORD *)result + 14) = 0u;
  *((_OWORD *)result + 15) = 0u;
  *((_OWORD *)result + 12) = 0u;
  *((_OWORD *)result + 13) = 0u;
  *((_OWORD *)result + 10) = 0u;
  *((_OWORD *)result + 11) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 5) = 0u;
  v4 = a3;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  v5 = result;
  *(_OWORD *)result = 0u;
  *((_OWORD *)result + 1) = 0u;
  while (1)
  {
    while (1)
    {
      v6 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * v3) + v4);
      v7 = *v6;
      v8 = v6[5];
      v9 = v6[1];
      v10 = v6[4];
      v11 = v10 + v9;
      v12 = v6[2];
      LODWORD(v6) = v6[3];
      v13 = (_DWORD)v6 + v12 + v8 + v7;
      v14 = v8 + v7 - ((_DWORD)v6 + v12);
      v15 = v7 - v8;
      v16 = v9 - v10;
      LODWORD(v6) = v12 - (_DWORD)v6;
      v17 = 4 * (v13 + v10 + v9) - 3072;
      v18 = (unint64_t)(5793 * (v13 - 2 * v11) + 1024) >> 11;
      v19 = (unint64_t)(2998 * ((int)v6 + v15) + 1024) >> 11;
      *v5 = v17;
      v5[1] = v19 + 4 * (v16 + v15);
      v5[2] = (10033 * v14 + 1024) >> 11;
      v5[3] = 4 * (v15 - (v16 + (_DWORD)v6));
      v5[4] = v18;
      v5[5] = v19 + 4 * ((_DWORD)v6 - v16);
      if ((_DWORD)v3 != 7)
        break;
      v5 = (int *)v54;
      ++v3;
    }
    if ((_DWORD)v3 == 11)
      break;
    v5 += 8;
    ++v3;
  }
  v20 = 0;
  do
  {
    v21 = &result[v20];
    v22 = result[v20];
    v23 = *(_DWORD *)&v54[v20 * 4 + 96];
    v24 = v23 + v22;
    v25 = result[v20 + 16];
    v26 = *(_DWORD *)&v54[v20 * 4 + 32];
    v27 = v26 + v25;
    v28 = result[v20 + 24];
    v29 = *(_DWORD *)&v54[v20 * 4];
    v30 = v29 + v28;
    v31 = result[v20 + 40];
    v32 = result[v20 + 48];
    v33 = v32 + v31;
    v34 = v33 + v24;
    v35 = v24 - v33;
    v36 = v30 + v27;
    v37 = v27 - v30;
    LODWORD(v27) = result[v20 + 8];
    v38 = *(_DWORD *)&v54[v20 * 4 + 64];
    v39 = v22 - v23;
    v40 = v38 + v27;
    LODWORD(v27) = v27 - v38;
    v41 = result[v20 + 32];
    v42 = v25 - v26;
    v43 = result[v20 + 56];
    v44 = v43 + v41;
    v45 = v41 - v43;
    v46 = v40;
    v47 = v31 - v32;
    v48 = v46 - v44;
    *v21 = (unint64_t)(7282 * (v36 + v46 + v44 + v34) + 0x4000) >> 15;
    v21[48] = (unint64_t)(7282 * (v35 - (v48 + v37)) + 0x4000) >> 15;
    v21[32] = (unint64_t)(8918 * (v34 - v36) + 0x4000) >> 15;
    v21[16] = (unint64_t)(9947 * (v35 + v37) + 7282 * (v48 - v37) + 0x4000) >> 15;
    v49 = 3941 * (v45 + (uint64_t)(int)v27);
    v50 = v49 + 5573 * (int)v27;
    v51 = v49 - 13455 * v45;
    v52 = 6269 * (v28 - v29 + (uint64_t)v39);
    v53 = 8170 * (v42 + (uint64_t)v39) + 0x4000;
    v21[8] = (unint64_t)(v53 + 0x7FFFFFFFEF7BLL * v39 + v52 + v50 + 1344 * v47) >> 15;
    v21[24] = (unint64_t)(v51
                               + 9514 * (v39 - (uint64_t)(v28 - v29))
                               + 0x7FFFFFFFF09BLL * (v47 + (uint64_t)v42)
                               + 0x4000) >> 15;
    v21[40] = (unint64_t)(v53 - 17036 * v42 - 1344 * (v28 - v29 + (uint64_t)v42) - v51 + 6269 * v47) >> 15;
    v21[56] = (unint64_t)(v52
                               + 5285 * (v28 - v29)
                               - 1344 * (v28 - v29 + (uint64_t)v42)
                               - v50
                               + 0x7FFFFFFFE016 * v47
                               + 0x4000) >> 15;
    ++v20;
  }
  while ((_DWORD)(v20 * 4) != 24);
  return result;
}

_OWORD *sub_10039ACF4(_OWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[64];

  v3 = 0;
  result[14] = 0u;
  result[15] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  result[10] = 0u;
  result[11] = 0u;
  result[8] = 0u;
  result[9] = 0u;
  result[6] = 0u;
  result[7] = 0u;
  result[4] = 0u;
  result[5] = 0u;
  v4 = a3;
  result[2] = 0u;
  result[3] = 0u;
  v5 = result;
  *result = 0u;
  result[1] = 0u;
  while (1)
  {
    while (1)
    {
      v6 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * v3) + v4);
      v7 = *v6;
      v8 = v6[4];
      v9 = v8 + v7;
      v10 = v6[1];
      v11 = v6[3];
      v12 = v11 + v10;
      LODWORD(v6) = v6[2];
      v13 = v7 - v8;
      v14 = v10 - v11;
      LODWORD(v10) = 4 * (v11 + v10 + v9 + (_DWORD)v6) - 2560;
      LODWORD(v6) = v12 + v9 - 4 * (_DWORD)v6;
      v15 = 6476 * (v9 - v12) + 1024;
      v16 = (unint64_t)(v15 + 2896 * (int)v6) >> 11;
      v5[4] = (unint64_t)(v15 - 2896 * (int)v6) >> 11;
      v17 = 6810 * ((int)v14 + v13) + 1024;
      *v5 = v10;
      v5[1] = (unint64_t)(v17 + 4209 * v13) >> 11;
      v5[2] = v16;
      v5[3] = (unint64_t)(v17 + 0x7FFFFFFBA5CLL * v14) >> 11;
      if ((_DWORD)v3 != 7)
        break;
      v5 = v48;
      ++v3;
    }
    if ((_DWORD)v3 == 9)
      break;
    v5 += 8;
    ++v3;
  }
  v18 = 0;
  do
  {
    v19 = (_DWORD *)((char *)result + v18);
    v20 = *(_DWORD *)((char *)result + v18);
    v21 = *(_DWORD *)&v48[v18 + 32];
    v22 = v21 + v20;
    v23 = *(_DWORD *)((char *)result + v18 + 32);
    v24 = *(_DWORD *)&v48[v18];
    v25 = v24 + v23;
    v26 = *(_DWORD *)((char *)result + v18 + 96);
    v27 = *(_DWORD *)((char *)result + v18 + 192);
    v28 = v27 + v26;
    v29 = *(_DWORD *)((char *)result + v18 + 128);
    v30 = *(_DWORD *)((char *)result + v18 + 160);
    v31 = v30 + v29;
    v32 = v31 + v22;
    v33 = v22 - v31;
    v34 = v28 + v25;
    v35 = v25 - v28;
    LODWORD(v28) = *(_DWORD *)((char *)result + v18 + 64);
    v36 = v20 - v21;
    v37 = *(_DWORD *)((char *)result + v18 + 224);
    v38 = v23 - v24;
    v39 = v37 + v28;
    v40 = v28 - v37;
    v41 = v26 - v27;
    v42 = v29 - v30;
    *v19 = (unint64_t)(10486 * (v34 + v39 + v32) + 0x4000) >> 15;
    v19[32] = (unint64_t)(11997 * (v32 - 2 * v39) + 0x7FFFFFFFEE1ALL * (v34 - 2 * v39) + 0x4000) >> 15;
    v43 = 8716 * (v33 + v35) + 0x4000;
    v19[16] = (unint64_t)(v43 + 5387 * v33) >> 15;
    v19[48] = (unint64_t)(v43 + 0x7FFFFFFFA6DCLL * v35) >> 15;
    v44 = v42 + (uint64_t)v36;
    v45 = v38 - (uint64_t)v41;
    v19[40] = (unint64_t)(10486 * (v44 - (v45 + v40)) + 0x4000) >> 15;
    v19[8] = (unint64_t)(13213 * v38 + 14647 * v36 + 10486 * v40 + 6732 * v41 + 2320 * v42 + 0x4000) >> 15;
    v46 = 5243 * v45 - 10486 * v40 + 3240 * (v44 + v45);
    v47 = -6163 * (v41 + (uint64_t)v38) + 9973 * (v36 - (uint64_t)v42) + 0x4000;
    v19[24] = (unint64_t)(v47 + v46) >> 15;
    v19[56] = (unint64_t)(v47 - v46) >> 15;
    v18 += 4;
  }
  while ((_DWORD)v18 != 20);
  return result;
}

uint64_t sub_10039B004(uint64_t result, _QWORD *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v3 = 0;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  v4 = a3;
  v5 = a2[1];
  v6 = (unsigned __int8 *)(*a2 + a3);
  v7 = *v6;
  v8 = v6[3];
  v9 = v8 + v7;
  v10 = v6[1];
  v11 = v6[2];
  v12 = v11 + v10;
  v13 = v7 - v8;
  v14 = v10 - v11;
  v15 = 8 * (v12 + v9) - 4096;
  v16 = 8 * (v9 - v12);
  v17 = 4433 * ((int)v14 + v13) + 512;
  *(_DWORD *)result = v15;
  *(_DWORD *)(result + 4) = (unint64_t)(v17 + 6270 * v13) >> 10;
  *(_DWORD *)(result + 8) = v16;
  *(_DWORD *)(result + 12) = (unint64_t)(v17 + 0x3FFFFFFC4DFLL * v14) >> 10;
  v18 = (unsigned __int8 *)(v5 + a3);
  v19 = *v18;
  LODWORD(v14) = v18[3];
  LODWORD(v17) = v14 + v19;
  v20 = v18[1];
  v21 = v18[2];
  v22 = v21 + v20;
  v23 = v19 - v14;
  v24 = v20 - v21;
  v25 = 4433 * ((int)v24 + v23) + 512;
  *(_DWORD *)(result + 32) = 8 * (v22 + v17) - 4096;
  *(_DWORD *)(result + 36) = (unint64_t)(v25 + 6270 * v23) >> 10;
  *(_DWORD *)(result + 40) = 8 * (v17 - v22);
  *(_DWORD *)(result + 44) = (unint64_t)(v25 + 0x3FFFFFFC4DFLL * v24) >> 10;
  v26 = a2[3];
  v27 = (unsigned __int8 *)(a2[2] + v4);
  LODWORD(v14) = *v27;
  LODWORD(v17) = v27[3];
  LODWORD(v25) = v17 + v14;
  v28 = v27[1];
  v29 = v27[2];
  v30 = v29 + v28;
  LODWORD(v14) = v14 - v17;
  v31 = v28 - v29;
  v32 = 4433 * ((int)v31 + (int)v14) + 512;
  *(_DWORD *)(result + 64) = 8 * (v30 + v25) - 4096;
  *(_DWORD *)(result + 68) = (unint64_t)(v32 + 6270 * (int)v14) >> 10;
  *(_DWORD *)(result + 72) = 8 * (v25 - v30);
  *(_DWORD *)(result + 76) = (unint64_t)(v32 + 0x3FFFFFFC4DFLL * v31) >> 10;
  v33 = (unsigned __int8 *)(v26 + v4);
  LODWORD(v26) = *(unsigned __int8 *)(v26 + v4);
  LODWORD(v14) = v33[3];
  LODWORD(v17) = v14 + v26;
  v34 = v33[1];
  v35 = v33[2];
  LODWORD(v32) = v35 + v34;
  LODWORD(v26) = v26 - v14;
  v36 = v34 - v35;
  v37 = 4433 * ((int)v36 + (int)v26) + 512;
  *(_DWORD *)(result + 96) = 8 * (v32 + v17) - 4096;
  *(_DWORD *)(result + 100) = (unint64_t)(v37 + 6270 * (int)v26) >> 10;
  *(_DWORD *)(result + 104) = 8 * (v17 - v32);
  *(_DWORD *)(result + 108) = (unint64_t)(v37 + 0x3FFFFFFC4DFLL * v36) >> 10;
  v38 = a2[5];
  v39 = (unsigned __int8 *)(a2[4] + v4);
  LODWORD(v14) = *v39;
  LODWORD(v17) = v39[3];
  LODWORD(v37) = v17 + v14;
  v40 = v39[1];
  v41 = v39[2];
  v42 = v41 + v40;
  LODWORD(v14) = v14 - v17;
  v43 = v40 - v41;
  v44 = 4433 * ((int)v43 + (int)v14) + 512;
  *(_DWORD *)(result + 128) = 8 * (v42 + v37) - 4096;
  *(_DWORD *)(result + 132) = (unint64_t)(v44 + 6270 * (int)v14) >> 10;
  *(_DWORD *)(result + 136) = 8 * (v37 - v42);
  *(_DWORD *)(result + 140) = (unint64_t)(v44 + 0x3FFFFFFC4DFLL * v43) >> 10;
  v45 = (unsigned __int8 *)(v38 + v4);
  LODWORD(v38) = *(unsigned __int8 *)(v38 + v4);
  LODWORD(v14) = v45[3];
  LODWORD(v17) = v14 + v38;
  v46 = v45[1];
  v47 = v45[2];
  LODWORD(v44) = v47 + v46;
  LODWORD(v38) = v38 - v14;
  v48 = v46 - v47;
  v49 = 4433 * ((int)v48 + (int)v38) + 512;
  *(_DWORD *)(result + 160) = 8 * (v44 + v17) - 4096;
  *(_DWORD *)(result + 164) = (unint64_t)(v49 + 6270 * (int)v38) >> 10;
  *(_DWORD *)(result + 168) = 8 * (v17 - v44);
  *(_DWORD *)(result + 172) = (unint64_t)(v49 + 0x3FFFFFFC4DFLL * v48) >> 10;
  v50 = a2[7];
  v51 = (unsigned __int8 *)(a2[6] + v4);
  LODWORD(v14) = *v51;
  LODWORD(v17) = v51[3];
  LODWORD(v49) = v17 + v14;
  v52 = v51[1];
  v53 = v51[2];
  LODWORD(v44) = v53 + v52;
  LODWORD(v14) = v14 - v17;
  v54 = v52 - v53;
  v55 = 4433 * ((int)v54 + (int)v14) + 512;
  *(_DWORD *)(result + 192) = 8 * (v44 + v49) - 4096;
  *(_DWORD *)(result + 196) = (unint64_t)(v55 + 6270 * (int)v14) >> 10;
  *(_DWORD *)(result + 200) = 8 * (v49 - v44);
  *(_DWORD *)(result + 204) = (unint64_t)(v55 + 0x3FFFFFFC4DFLL * v54) >> 10;
  v56 = (unsigned __int8 *)(v50 + v4);
  LODWORD(v54) = *v56;
  LODWORD(v50) = v56[3];
  LODWORD(v14) = v50 + v54;
  v57 = v56[1];
  v58 = v56[2];
  LODWORD(v49) = v58 + v57;
  LODWORD(v54) = v54 - v50;
  v59 = v57 - v58;
  LODWORD(v50) = 8 * (v49 + v14) - 4096;
  LODWORD(v49) = 8 * (v14 - v49);
  v60 = 4433 * ((int)v59 + (int)v54) + 512;
  *(_DWORD *)(result + 224) = v50;
  *(_DWORD *)(result + 228) = (unint64_t)(v60 + 6270 * (int)v54) >> 10;
  *(_DWORD *)(result + 232) = v49;
  *(_DWORD *)(result + 236) = (unint64_t)(v60 + 0x3FFFFFFC4DFLL * v59) >> 10;
  do
  {
    v61 = (_DWORD *)(result + v3);
    v62 = *(_DWORD *)(result + v3);
    v63 = *(_DWORD *)(result + v3 + 224);
    v64 = v63 + v62;
    v65 = *(_DWORD *)(result + v3 + 32);
    v66 = *(_DWORD *)(result + v3 + 192);
    v67 = v66 + v65;
    v68 = *(_DWORD *)(result + v3 + 64);
    v69 = *(_DWORD *)(result + v3 + 160);
    v70 = v69 + v68;
    v71 = *(_DWORD *)(result + v3 + 96);
    v72 = *(_DWORD *)(result + v3 + 128);
    v73 = v72 + v71;
    v74 = v64 + v73 + 2;
    v75 = v64 - v73;
    v76 = v70 + v67;
    v77 = v67 - v70;
    v78 = v62 - v63;
    v79 = v65 - v66;
    v80 = v68 - v69;
    v81 = v71 - v72;
    *v61 = (unint64_t)(v74 + v76) >> 2;
    v61[32] = (unint64_t)(v74 - v76) >> 2;
    v82 = 4433 * (v75 + v77) + 0x4000;
    v61[16] = (unint64_t)(v82 + 6270 * v75) >> 15;
    v61[48] = (unint64_t)(v82 + 0x7FFFFFFFC4DFLL * v77) >> 15;
    v83 = v80 + v78;
    v84 = v81 + v79;
    v85 = 9633 * (v84 + v83) + 0x4000;
    v86 = v85 - 3196 * v83;
    v87 = v85 - 16069 * v84;
    v88 = -7373 * (v81 + v78);
    v89 = -20995 * (v80 + v79);
    v61[8] = (unint64_t)(v88 + 12299 * v78 + v86) >> 15;
    v61[24] = (unint64_t)(v89 + 25172 * v79 + v87) >> 15;
    v61[40] = (unint64_t)(v89 + 16819 * v80 + v86) >> 15;
    v61[56] = (unint64_t)(v88 + 2446 * v81 + v87) >> 15;
    v3 += 4;
  }
  while ((_DWORD)v3 != 16);
  return result;
}

double sub_10039B4B0(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  double result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a2[1];
  v5 = (unsigned __int8 *)(*a2 + a3);
  v6 = *v5;
  v7 = v5[2];
  LODWORD(v5) = v5[1];
  *(_DWORD *)(a1 + 8) = (5793 * (v7 + v6 - 2 * (int)v5) + 512) >> 10;
  *(_DWORD *)a1 = 8 * (v7 + v6 + (_DWORD)v5) - 3072;
  *(_DWORD *)(a1 + 4) = (10033 * (v6 - v7) + 512) >> 10;
  v8 = (unsigned __int8 *)(v4 + a3);
  v9 = *v8;
  v10 = v8[2];
  LODWORD(v8) = v8[1];
  *(_DWORD *)(a1 + 40) = (5793 * (v10 + v9 - 2 * (int)v8) + 512) >> 10;
  *(_DWORD *)(a1 + 32) = 8 * (v10 + v9 + (_DWORD)v8) - 3072;
  *(_DWORD *)(a1 + 36) = (10033 * (v9 - v10) + 512) >> 10;
  v11 = a2[3];
  v12 = (unsigned __int8 *)(a2[2] + a3);
  v13 = *v12;
  v14 = v12[2];
  LODWORD(v12) = v12[1];
  *(_DWORD *)(a1 + 72) = (5793 * (v14 + v13 - 2 * (int)v12) + 512) >> 10;
  *(_DWORD *)(a1 + 64) = 8 * (v14 + v13 + (_DWORD)v12) - 3072;
  *(_DWORD *)(a1 + 68) = (10033 * (v13 - v14) + 512) >> 10;
  v15 = (unsigned __int8 *)(v11 + a3);
  LODWORD(v11) = *v15;
  v16 = v15[2];
  v17 = v16 + v11;
  LODWORD(v15) = v15[1];
  v18 = v11 - v16;
  LODWORD(v11) = 8 * (v17 + (_DWORD)v15) - 3072;
  *(_DWORD *)(a1 + 104) = (5793 * (v17 - 2 * (int)v15) + 512) >> 10;
  *(_DWORD *)(a1 + 96) = v11;
  *(_DWORD *)(a1 + 100) = (10033 * v18 + 512) >> 10;
  v19 = a2[5];
  v20 = (unsigned __int8 *)(a2[4] + a3);
  v21 = *v20;
  v22 = v20[2];
  v23 = v22 + v21;
  LODWORD(v20) = v20[1];
  v24 = v21 - v22;
  v25 = 8 * (v23 + (_DWORD)v20) - 3072;
  *(_DWORD *)(a1 + 136) = (5793 * (v23 - 2 * (int)v20) + 512) >> 10;
  LODWORD(v20) = (10033 * v24 + 512) >> 10;
  *(_DWORD *)(a1 + 128) = v25;
  *(_DWORD *)(a1 + 132) = (_DWORD)v20;
  v26 = (unsigned __int8 *)(v19 + a3);
  LODWORD(v19) = *v26;
  v27 = v26[2];
  LODWORD(v26) = v26[1];
  v28 = v27 + v19 - 2 * (_DWORD)v26;
  LODWORD(v26) = 8 * (v27 + v19 + (_DWORD)v26) - 3072;
  v29 = *(_DWORD *)(a1 + 4);
  v30 = (int)v26 + *(_DWORD *)a1;
  v32 = *(_DWORD *)(a1 + 32);
  v31 = *(_DWORD *)(a1 + 36);
  v34 = *(_DWORD *)(a1 + 64);
  v33 = *(_DWORD *)(a1 + 68);
  v35 = (int)v11 + v34;
  v36 = v35 + v30 - 2 * (v25 + v32);
  v37 = 5793 * v28 + 512;
  v38 = (10033 * ((int)v19 - v27) + 512) >> 10;
  v39 = v25 + v32;
  v40 = *(_DWORD *)a1 - (int)v26;
  v41 = v32 - v25;
  v42 = v34 - (int)v11;
  v43 = 5331 * (v42 + v40) + 0x4000;
  v44 = v43 + 14564 * (v41 + v40);
  v45 = v40 - (v41 + v42);
  v46 = v43 + 14564 * (v42 - v41);
  v47 = v38 + v29;
  v48 = *(_DWORD *)(a1 + 100);
  LODWORD(v43) = *(_DWORD *)(a1 + 104);
  v49 = v48 + v33;
  *(_DWORD *)(a1 + 168) = v37 >> 10;
  v50 = v29 - v38;
  v51 = (_DWORD)v20 + v31;
  LODWORD(v20) = v31 - (_DWORD)v20;
  *(_DWORD *)a1 = (unint64_t)(14564 * (v35 + v30 + v39) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 4) = (unint64_t)(14564 * (v49 + v47 + v51) + 0x4000) >> 15;
  v52 = v33 - v48;
  *(_DWORD *)(a1 + 64) = (unint64_t)(17837 * (v30 - v35) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 68) = (unint64_t)(17837 * (v47 - v49) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 128) = (unint64_t)(10298 * v36 + 0x4000) >> 15;
  *(_DWORD *)(a1 + 132) = (unint64_t)(10298 * (v49 + v47 - 2 * v51) + 0x4000) >> 15;
  v53 = 5331 * (v52 + v50) + 0x4000;
  *(_DWORD *)(a1 + 32) = v44 >> 15;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v53 + 14564 * ((int)v20 + (uint64_t)v50)) >> 15;
  *(_DWORD *)(a1 + 96) = (unint64_t)(14564 * v45 + 0x4000) >> 15;
  *(_DWORD *)(a1 + 100) = (unint64_t)(14564 * (v50 - ((int)v20 + v52)) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 160) = v46 >> 15;
  *(_DWORD *)(a1 + 164) = (unint64_t)(v53 + 14564 * (v52 - (int)v20)) >> 15;
  LODWORD(v20) = *(_DWORD *)(a1 + 8);
  LODWORD(v44) = *(_DWORD *)(a1 + 168);
  v54 = (int)v44 + (int)v20;
  LODWORD(v46) = *(_DWORD *)(a1 + 40);
  LODWORD(v53) = *(_DWORD *)(a1 + 136);
  v55 = (int)v53 + (int)v46;
  v56 = *(_DWORD *)(a1 + 72);
  v57 = (int)v43 + v56;
  v58 = (int)v20 - (int)v44;
  v59 = (int)v46 - (int)v53;
  v60 = v56 - (int)v43;
  *(_DWORD *)(a1 + 8) = (unint64_t)(14564 * (v57 + v54 + v55) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 72) = (unint64_t)(17837 * (v54 - v57) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 136) = (unint64_t)(10298 * (v57 + v54 - 2 * v55) + 0x4000) >> 15;
  v61 = 5331 * (v60 + v58) + 0x4000;
  *(_DWORD *)(a1 + 40) = (unint64_t)(v61 + 14564 * (v59 + v58)) >> 15;
  *(_DWORD *)(a1 + 104) = (unint64_t)(14564 * (v58 - (v59 + v60)) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 168) = (unint64_t)(v61 + 14564 * (v60 - v59)) >> 15;
  return result;
}

double sub_10039B880(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  double result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a2[1];
  v5 = (unsigned __int8 *)(*a2 + a3);
  v6 = *v5;
  LODWORD(v5) = v5[1];
  v7 = 8 * ((_DWORD)v5 + v6) - 2048;
  LODWORD(v5) = 8 * (v6 - (_DWORD)v5);
  *(_DWORD *)a1 = v7;
  *(_DWORD *)(a1 + 4) = (_DWORD)v5;
  v8 = (unsigned __int8 *)(v4 + a3);
  v9 = *v8;
  LODWORD(v8) = v8[1];
  v10 = 8 * ((_DWORD)v8 + v9) - 2048;
  LODWORD(v8) = 8 * (v9 - (_DWORD)v8);
  *(_DWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 36) = (_DWORD)v8;
  v11 = a2[3];
  v12 = (unsigned __int8 *)(a2[2] + a3);
  v13 = *v12;
  LODWORD(v12) = v12[1];
  v14 = 8 * ((_DWORD)v12 + v13) - 2048;
  LODWORD(v12) = 8 * (v13 - (_DWORD)v12);
  *(_DWORD *)(a1 + 64) = v14;
  *(_DWORD *)(a1 + 68) = (_DWORD)v12;
  v15 = (unsigned __int8 *)(v11 + a3);
  LODWORD(v11) = *v15;
  LODWORD(v15) = v15[1];
  v16 = 8 * ((_DWORD)v15 + v11) - 2048;
  LODWORD(v15) = 8 * (v11 - (_DWORD)v15);
  LODWORD(v11) = v16 + v7;
  v17 = v14 + v10;
  v18 = v7 - v16;
  v19 = v10 - v14;
  v20 = 4433 * (v19 + v18) + 4096;
  v21 = v20 + 6270 * v18;
  v22 = v20 + 0x1FFFFFFFC4DFLL * v19;
  LODWORD(v20) = (_DWORD)v15 + (_DWORD)v5;
  LODWORD(v15) = (_DWORD)v5 - (_DWORD)v15;
  LODWORD(v5) = (_DWORD)v12 + (_DWORD)v8;
  LODWORD(v8) = (_DWORD)v8 - (_DWORD)v12;
  *(_DWORD *)a1 = v17 + v11;
  *(_DWORD *)(a1 + 4) = (_DWORD)v5 + v20;
  *(_DWORD *)(a1 + 64) = v11 - v17;
  *(_DWORD *)(a1 + 68) = v20 - (_DWORD)v5;
  v23 = 4433 * ((int)v8 + (int)v15) + 4096;
  *(_DWORD *)(a1 + 32) = v21 >> 13;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v23 + 6270 * (int)v15) >> 13;
  *(_DWORD *)(a1 + 96) = v22 >> 13;
  *(_DWORD *)(a1 + 100) = (unint64_t)(v23 + 0x1FFFFFFFC4DFLL * (int)v8) >> 13;
  return result;
}

double sub_10039B9D0(_OWORD *a1, _QWORD *a2, unsigned int a3)
{
  double result;
  int v4;
  int v5;

  result = 0.0;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  v4 = *(unsigned __int8 *)(*a2 + a3);
  v5 = *(unsigned __int8 *)(a2[1] + a3);
  *(_DWORD *)a1 = 32 * (v5 + v4) - 0x2000;
  *((_DWORD *)a1 + 8) = 32 * (v4 - v5);
  return result;
}

uint64_t sub_10039BA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  int16x4_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  unsigned int i;
  uint64_t v19;
  int v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  _BYTE *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t result;
  _BYTE v63[256];

  v14 = 0;
  v15 = *(_QWORD *)(a1 + 408);
  v16 = (_WORD *)(a3 + 64);
  v17 = *(_QWORD *)(a2 + 88) + 128;
  for (i = 9; i > 1; --i)
  {
    v19 = v17 + v14;
    v20 = (unsigned __int16)*(v16 - 24);
    v21 = (unsigned __int16)*(v16 - 16);
    if (v20 | v21)
      goto LABEL_9;
    if (*(v16 - 8) || *v16 || v16[8] || v16[16] || v16[24])
    {
      LOWORD(v21) = 0;
LABEL_9:
      LOWORD(a6) = *(v16 - 32);
      *(_QWORD *)&a6 = vmovl_s16(*(int16x4_t *)&a6).u64[0];
      *(float *)&a6 = *(float *)(v19 - 128) * (float)SLODWORD(a6);
      LODWORD(a8) = *(_DWORD *)(v19 - 64);
      v22 = *(float *)&a8 * (float)(__int16)v21;
      LOWORD(a8) = *v16;
      *(_QWORD *)&a8 = vmovl_s16(*(int16x4_t *)&a8).u64[0];
      LODWORD(a9) = *(_DWORD *)v19;
      *(float *)&a8 = *(float *)v19 * (float)SLODWORD(a8);
      LOWORD(a9) = v16[16];
      *(_QWORD *)&a9 = vmovl_s16(*(int16x4_t *)&a9).u64[0];
      *(float *)&a9 = *(float *)(v19 + 64) * (float)SLODWORD(a9);
      v23 = *(float *)&a6 + *(float *)&a8;
      *(float *)&a6 = *(float *)&a6 - *(float *)&a8;
      *(float *)&a8 = v22 + *(float *)&a9;
      v24 = -(float)((float)(v22 + *(float *)&a9) - (float)((float)(v22 - *(float *)&a9) * 1.4142));
      v25 = v23 + *(float *)&a8;
      *(float *)&a8 = v23 - *(float *)&a8;
      v26 = *(float *)&a6 + v24;
      *(float *)&a6 = *(float *)&a6 - v24;
      LODWORD(a12) = *(_DWORD *)(v19 - 96);
      v27 = *(float *)&a12 * (float)(__int16)v20;
      LOWORD(a12) = *(v16 - 8);
      *(_QWORD *)&a12 = vmovl_s16(*(int16x4_t *)&a12).u64[0];
      LODWORD(a13) = *(_DWORD *)(v19 - 32);
      *(float *)&a12 = *(float *)&a13 * (float)SLODWORD(a12);
      LOWORD(a13) = v16[8];
      *(_QWORD *)&a13 = vmovl_s16(*(int16x4_t *)&a13).u64[0];
      v13.i32[0] = *(_DWORD *)(v19 + 32);
      *(float *)&a13 = *(float *)v13.i32 * (float)SLODWORD(a13);
      v13.i16[0] = v16[24];
      v13 = (int16x4_t)vmovl_s16(v13).u64[0];
      *(float *)v13.i32 = *(float *)(v19 + 96) * (float)v13.i32[0];
      v28 = *(float *)&a12 + *(float *)&a13;
      *(float *)&a12 = *(float *)&a13 - *(float *)&a12;
      *(float *)&a13 = v27 + *(float *)v13.i32;
      v29 = v27 - *(float *)v13.i32;
      *(float *)v13.i32 = v28 + *(float *)&a13;
      *(float *)&a9 = (float)(*(float *)&a13 - v28) * 1.4142;
      *(float *)&a13 = (float)(*(float *)&a12 + v29) * 1.8478;
      *(float *)&a12 = (float)(*(float *)&a13 + (float)(*(float *)&a12 * -2.6131)) - *(float *)v13.i32;
      *(float *)&a9 = *(float *)&a9 - *(float *)&a12;
      v30 = (float)(*(float *)&a13 + (float)(v29 * -1.0824)) - *(float *)&a9;
      v31 = (float *)&v63[v14];
      *v31 = v25 + *(float *)v13.i32;
      v31[56] = v25 - *(float *)v13.i32;
      v31[8] = v26 + *(float *)&a12;
      v31[48] = v26 - *(float *)&a12;
      v31[16] = *(float *)&a6 + *(float *)&a9;
      v31[40] = *(float *)&a6 - *(float *)&a9;
      v31[24] = *(float *)&a8 + v30;
      *(float *)&a6 = *(float *)&a8 - v30;
      v32 = 32;
      goto LABEL_10;
    }
    LOWORD(a6) = *(v16 - 32);
    *(_QWORD *)&a6 = vmovl_s16(*(int16x4_t *)&a6).u64[0];
    *(float *)&a6 = *(float *)(v19 - 128) * (float)SLODWORD(a6);
    v33 = &v63[v14];
    *v33 = LODWORD(a6);
    v33[8] = LODWORD(a6);
    v33[16] = LODWORD(a6);
    v33[24] = LODWORD(a6);
    v33[32] = LODWORD(a6);
    v33[40] = LODWORD(a6);
    v33[48] = LODWORD(a6);
    v32 = 56;
LABEL_10:
    *(_DWORD *)&v63[4 * v32 + v14] = LODWORD(a6);
    v14 += 4;
    ++v16;
  }
  v34 = 0;
  v35 = v15 - 384;
  do
  {
    v36 = (float *)&v63[4 * v34];
    v37 = (_BYTE *)(*(_QWORD *)(a4 + v34) + a5);
    v38 = v36[1];
    v39 = *v36 + 512.5;
    v41 = v36[4];
    v40 = v36[5];
    v42 = v39 + v41;
    v43 = v36[2];
    v44 = v36[3];
    v45 = v39 - v41;
    v47 = v36[6];
    v46 = v36[7];
    v48 = v43 + v47;
    v49 = -(float)((float)(v43 + v47) - (float)((float)(v43 - v47) * 1.4142));
    v50 = v42 + v48;
    v51 = v42 - v48;
    v52 = v40 + v44;
    v53 = v40 - v44;
    v54 = v38 + v46;
    v55 = v38 - v46;
    v56 = v45 + v49;
    v57 = v45 - v49;
    v58 = (float)(v53 + v55) * 1.8478;
    v59 = v58 + (float)(v55 * -1.0824);
    v60 = (float)(v58 + (float)(v53 * -2.6131)) - (float)(v52 + v54);
    v61 = (float)((float)(v54 - v52) * 1.4142) - v60;
    *v37 = *(_BYTE *)(v35 + ((int)(float)(v50 + (float)(v52 + v54)) & 0x3FFLL));
    v37[7] = *(_BYTE *)(v35 + ((int)(float)(v50 - (float)(v52 + v54)) & 0x3FFLL));
    v37[1] = *(_BYTE *)(v35 + ((int)(float)(v56 + v60) & 0x3FFLL));
    v37[6] = *(_BYTE *)(v35 + ((int)(float)(v56 - v60) & 0x3FFLL));
    v37[2] = *(_BYTE *)(v35 + ((int)(float)(v57 + v61) & 0x3FFLL));
    v37[5] = *(_BYTE *)(v35 + ((int)(float)(v57 - v61) & 0x3FFLL));
    v37[3] = *(_BYTE *)(v35 + ((int)(float)(v51 + (float)(v59 - v61)) & 0x3FFLL));
    result = *(unsigned __int8 *)(v35 + ((int)(float)(v51 - (float)(v59 - v61)) & 0x3FFLL));
    v37[4] = result;
    v34 += 8;
  }
  while (v34 != 64);
  return result;
}

int8x8_t sub_10039BE04(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  unsigned int i;
  _DWORD *v10;
  unsigned __int16 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  _BYTE *v45;
  int v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  int8x8_t result;
  _BYTE v73[256];

  v5 = 0;
  v6 = *(_QWORD *)(a1 + 408);
  v7 = (__int16 *)(a3 + 64);
  v8 = *(_QWORD *)(a2 + 88) + 128;
  for (i = 9; i > 1; --i)
  {
    v10 = (_DWORD *)(v8 + v5);
    v11 = *(v7 - 16);
    if ((unsigned __int16)*(v7 - 24) | v11)
      goto LABEL_9;
    if (*(v7 - 8) || *v7 || v7[8] || v7[16] || v7[24])
    {
      v11 = 0;
LABEL_9:
      v12 = *(v10 - 32) * *(v7 - 32);
      v13 = *(v10 - 16) * (__int16)v11;
      v14 = *v10 * *v7;
      v15 = v10[16] * v7[16];
      v16 = v14 + v12;
      v17 = v12 - v14;
      v18 = v15 + v13;
      v19 = ((unint64_t)(362 * (v13 - v15)) >> 8) - (v15 + v13);
      v20 = v18 + v16;
      v21 = v16 - v18;
      v22 = v19 + v17;
      v23 = v17 - v19;
      v24 = *(v10 - 24) * *(v7 - 24);
      v25 = *(v10 - 8) * *(v7 - 8);
      v26 = v10[8] * v7[8];
      v27 = v10[24] * v7[24];
      v28 = v26 + v25;
      v29 = v26 - v25;
      v30 = v27 + v24;
      v31 = v24 - v27;
      v32 = v30 + v28;
      v33 = (unint64_t)(362 * (v30 - v28)) >> 8;
      v34 = &v73[v5];
      *v34 = v32 + v20;
      v35 = (unint64_t)(473 * (v31 + v29)) >> 8;
      v36 = v35 - (v32 + ((unint64_t)(669 * v29) >> 8));
      LODWORD(v33) = v33 - v36;
      v34[56] = v20 - v32;
      v34[8] = v36 + v22;
      v37 = v35 - ((unint64_t)(277 * v31) >> 8) - v33;
      v34[48] = v22 - v36;
      v34[16] = v33 + v23;
      v34[40] = v23 - v33;
      v34[24] = v37 + v21;
      v38 = v21 - v37;
      v39 = 32;
      goto LABEL_10;
    }
    v38 = *(v10 - 32) * *(v7 - 32);
    v40 = (int *)&v73[v5];
    *v40 = v38;
    v40[8] = v38;
    v40[16] = v38;
    v40[24] = v38;
    v40[32] = v38;
    v40[40] = v38;
    v40[48] = v38;
    v39 = 56;
LABEL_10:
    *(_DWORD *)&v73[4 * v39 + v5] = v38;
    v5 += 4;
    ++v7;
  }
  v41 = v6 - 384;
  v42 = 28;
  v43 = a5;
  do
  {
    while (1)
    {
      v44 = (int *)&v73[v42];
      v45 = (_BYTE *)(*a4 + v43);
      v46 = *(_DWORD *)&v73[v42 - 24];
      v47 = (*(_DWORD *)&v73[v42 - 28] + 16400);
      v48 = *(_DWORD *)&v73[v42 - 20];
      if (!*(_QWORD *)&v73[v42 - 24])
        break;
LABEL_20:
      v50 = *(v44 - 4);
      v49 = *(v44 - 3);
      v51 = v49 + v47;
      v52 = v47 - v49;
      v54 = *(v44 - 2);
      v53 = *(v44 - 1);
      v55 = v53 + v48;
      v56 = ((362 * (unint64_t)(v48 - v53)) >> 8) - (v53 + v48);
      v57 = v55 + v51;
      v58 = v51 - v55;
      v59 = v56 + v52;
      v60 = v52 - v56;
      v61 = v50 + v54;
      v62 = v54 - v50;
      v63 = *v44;
      v64 = v63 + v46;
      v65 = v46 - v63;
      v66 = v64 + v61;
      v67 = (362 * (unint64_t)(v64 - v61)) >> 8;
      *v45 = *(_BYTE *)(v41 + (((unint64_t)(v66 + v57) >> 5) & 0x3FF));
      v68 = (473 * (unint64_t)(v65 + v62)) >> 8;
      v69 = v66 + ((669 * (unint64_t)v62) >> 8);
      v45[7] = *(_BYTE *)(v41 + (((unint64_t)(v57 - v66) >> 5) & 0x3FF));
      v45[1] = *(_BYTE *)(v41 + (((unint64_t)(v68 - v69 + v59) >> 5) & 0x3FF));
      LODWORD(v67) = v67 - (v68 - v69);
      v45[6] = *(_BYTE *)(v41 + (((unint64_t)(v59 - (v68 - v69)) >> 5) & 0x3FF));
      v45[2] = *(_BYTE *)(v41 + (((unint64_t)(v67 + v60) >> 5) & 0x3FF));
      v70 = v68 - ((277 * (unint64_t)v65) >> 8) - v67;
      v45[5] = *(_BYTE *)(v41 + (((unint64_t)(v60 - v67) >> 5) & 0x3FF));
      v45[3] = *(_BYTE *)(v41 + (((unint64_t)(v70 + v58) >> 5) & 0x3FF));
      v45[4] = *(_BYTE *)(v41 + (((unint64_t)(v58 - v70) >> 5) & 0x3FF));
      ++a4;
      v42 += 32;
      if (v42 == 284)
        return result;
    }
    if (*(v44 - 4)
      || *(_DWORD *)&v73[v42 - 12]
      || *(_DWORD *)&v73[v42 - 8]
      || *(_DWORD *)&v73[v42 - 4]
      || *(_DWORD *)&v73[v42])
    {
      v48 = 0;
      goto LABEL_20;
    }
    v71 = *(unsigned __int8 *)(v41 + ((v47 >> 5) & 0x3FF));
    result = vdup_n_s8(v71);
    *(_DWORD *)v45 = result.i32[0];
    v45[4] = v71;
    v45[5] = v71;
    v45[6] = v71;
    v45[7] = v71;
    ++a4;
    v42 += 32;
  }
  while (v42 != 284);
  return result;
}

int8x8_t sub_10039C20C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  unsigned int i;
  _DWORD *v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t j;
  int *v44;
  _BYTE *v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  int8x8_t result;
  uint64_t v75;
  _BYTE v77[256];

  v5 = 0;
  v6 = (__int16 *)(a3 + 64);
  v7 = *(_QWORD *)(a2 + 88) + 128;
  v75 = *(_QWORD *)(a1 + 408);
  for (i = 9; i > 1; --i)
  {
    v9 = (_DWORD *)(v7 + v5);
    v10 = *(v6 - 16);
    if ((unsigned __int16)*(v6 - 24) | v10)
      goto LABEL_9;
    if (*(v6 - 8) || *v6 || v6[8] || v6[16] || v6[24])
    {
      v10 = 0;
LABEL_9:
      v11 = (uint64_t)(*v9 * *v6) << 13;
      v12 = ((uint64_t)(*(v9 - 32) * *(v6 - 32)) << 13) | 0x400;
      v13 = v11 + v12;
      v14 = v12 - v11;
      v15 = (int)*(v9 - 16) * (uint64_t)(__int16)v10;
      v16 = (int)v9[16] * (uint64_t)v6[16];
      v17 = 4433 * (v15 + v16);
      v18 = v17 + 6270 * v15;
      v19 = v17 - 15137 * v16;
      v20 = v18 + v13;
      v21 = v13 - v18;
      v22 = v19 + v14;
      v23 = v14 - v19;
      v24 = (int)v9[24] * (uint64_t)v6[24];
      v25 = (int)v9[8] * (uint64_t)v6[8];
      v26 = *(v9 - 8);
      v27 = (int)*(v9 - 24) * (uint64_t)*(v6 - 24);
      v28 = v24 + v26 * (uint64_t)*(v6 - 8);
      v29 = 9633 * (v25 + v27 + v28);
      v30 = v29 - 16069 * v28;
      v31 = v29 - 3196 * (v25 + v27);
      v32 = -7373 * (v24 + v27);
      v33 = v32 + 2446 * v24 + v30;
      v34 = v32 + 12299 * v27 + v31;
      v35 = -20995 * (v25 + v26 * (uint64_t)*(v6 - 8));
      v36 = v35 + 16819 * v25 + v31;
      v37 = v35 + 25172 * v26 * (uint64_t)*(v6 - 8) + v30;
      v38 = &v77[v5];
      *v38 = (unint64_t)(v34 + v20) >> 11;
      v38[56] = (unint64_t)(v20 - v34) >> 11;
      v38[8] = (unint64_t)(v37 + v22) >> 11;
      v38[48] = (unint64_t)(v22 - v37) >> 11;
      v38[16] = (unint64_t)(v36 + v23) >> 11;
      v38[40] = (unint64_t)(v23 - v36) >> 11;
      v38[24] = (unint64_t)(v33 + v21) >> 11;
      v39 = (unint64_t)(v21 - v33) >> 11;
      v40 = 32;
      goto LABEL_10;
    }
    LODWORD(v39) = 4 * *(v6 - 32) * *(v9 - 32);
    v41 = &v77[v5];
    *v41 = v39;
    v41[8] = v39;
    v41[16] = v39;
    v41[24] = v39;
    v41[32] = v39;
    v41[40] = v39;
    v41[48] = v39;
    v40 = 56;
LABEL_10:
    *(_DWORD *)&v77[4 * v40 + v5] = v39;
    v5 += 4;
    ++v6;
  }
  v42 = v75 - 384;
  for (j = 28; j != 284; j += 32)
  {
    while (1)
    {
      v44 = (int *)&v77[j];
      v45 = (_BYTE *)(*a4 + a5);
      v46 = *(_DWORD *)&v77[j - 24];
      v47 = *(int *)&v77[j - 28] + 16400;
      v48 = *(unsigned int *)&v77[j - 20];
      if (v46)
        v49 = 0;
      else
        v49 = v48 == 0;
      if (!v49)
        goto LABEL_24;
      if (!*(v44 - 4)
        && !*(_DWORD *)&v77[j - 12]
        && !*(_DWORD *)&v77[j - 8]
        && !*(_DWORD *)&v77[j - 4]
        && !*(_DWORD *)&v77[j])
      {
        break;
      }
      LODWORD(v48) = 0;
LABEL_24:
      v51 = *(v44 - 4);
      v50 = *(v44 - 3);
      v52 = ((_DWORD)v47 + v50) << 13;
      v53 = ((_DWORD)v47 - v50) << 13;
      v55 = *(v44 - 2);
      v54 = *(v44 - 1);
      v56 = 4433 * (v54 + v48);
      v57 = v56 + 6270 * v48;
      v58 = v56 - 15137 * v54;
      v59 = v57 + v52;
      v60 = v52 - v57;
      v61 = v58 + v53;
      v62 = v53 - v58;
      v63 = *v44;
      v64 = 9633 * (v51 + v63 + v55 + v46);
      v65 = v64 - 16069 * (v51 + v63);
      v66 = v64 - 3196 * (v55 + v46);
      v67 = -7373 * (v63 + v46);
      v68 = v67 + 12299 * v46 + v66;
      *v45 = *(_BYTE *)(v42 + (((unint64_t)(v68 + v59) >> 18) & 0x3FF));
      v69 = (v59 - v68);
      v70 = -20995 * (v51 + v55);
      v71 = v70 + 25172 * v51 + v65;
      v45[7] = *(_BYTE *)(v42 + ((v69 >> 18) & 0x3FF));
      v45[1] = *(_BYTE *)(v42 + (((unint64_t)(v71 + v61) >> 18) & 0x3FF));
      v72 = v70 + 16819 * v55 + v66;
      v45[6] = *(_BYTE *)(v42 + (((unint64_t)(v61 - v71) >> 18) & 0x3FF));
      v45[2] = *(_BYTE *)(v42 + (((unint64_t)(v72 + v62) >> 18) & 0x3FF));
      LODWORD(v69) = v67 + 2446 * v63 + v65;
      v45[5] = *(_BYTE *)(v42 + (((unint64_t)(v62 - v72) >> 18) & 0x3FF));
      v45[3] = *(_BYTE *)(v42 + (((unint64_t)(v69 + v60) >> 18) & 0x3FF));
      v45[4] = *(_BYTE *)(v42 + (((unint64_t)(v60 - v69) >> 18) & 0x3FF));
      ++a4;
      j += 32;
      if (j == 284)
        return result;
    }
    v73 = *(unsigned __int8 *)(v42 + ((v47 >> 5) & 0x3FF));
    result = vdup_n_s8(v73);
    *(_DWORD *)v45 = result.i32[0];
    v45[4] = v73;
    v45[5] = v73;
    v45[6] = v73;
    v45[7] = v73;
    ++a4;
  }
  return result;
}

uint64_t sub_10039C6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  _BYTE *v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  _BYTE v63[196];

  v5 = 0;
  v61 = *(_QWORD *)(a1 + 408);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = &v63[4 * v5];
    v8 = (_DWORD *)(v6 + 4 * v5);
    v9 = (__int16 *)(a3 + 2 * v5);
    v10 = ((uint64_t)(*v8 * *v9) << 13) | 0x400;
    v11 = (int)v8[16] * (uint64_t)v9[16];
    v12 = (int)v8[32] * (uint64_t)v9[32];
    v13 = (int)v8[48] * (uint64_t)v9[48];
    v14 = 7223 * (v12 - v13);
    v15 = 2578 * (v11 - v12);
    v16 = v10 - 15083 * v12 + v15 + v14;
    v17 = v10 + 10438 * (v11 + v13);
    v18 = v14 - 637 * v13 + v17;
    v19 = v15 - 20239 * v11 + v17;
    v20 = v10 + 11585 * (v12 - (v11 + v13));
    v21 = (int)v8[8] * (uint64_t)v9[8];
    v22 = (int)v8[24] * (uint64_t)v9[24];
    v23 = (int)v8[40] * (uint64_t)v9[40];
    v24 = 7663 * (v21 + v22);
    v25 = 1395 * (v21 - v22);
    v26 = v24 - v25;
    v27 = v24 + v25 - 11295 * (v22 + v23);
    v28 = 5027 * (v21 + v23);
    v29 = v28 + v26;
    v30 = v28 + 15326 * v23 - 11295 * (v22 + v23);
    *v7 = (unint64_t)(v29 + v18) >> 11;
    v7[42] = (unint64_t)(v18 - v29) >> 11;
    v7[7] = (unint64_t)(v27 + v16) >> 11;
    v7[35] = (unint64_t)(v16 - v27) >> 11;
    v7[14] = (unint64_t)(v30 + v19) >> 11;
    v7[28] = (unint64_t)(v19 - v30) >> 11;
    v7[21] = v20 >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 7);
  v31 = 0;
  v32 = v61 - 384;
  result = 11585;
  do
  {
    v34 = *a4++;
    v35 = *(_DWORD *)&v63[v31 + 4];
    v36 = (*(_DWORD *)&v63[v31] << 13) + 134348800;
    v38 = *(_DWORD *)&v63[v31 + 20];
    v37 = *(_DWORD *)&v63[v31 + 24];
    v39 = *(_DWORD *)&v63[v31 + 16];
    v40 = 7223 * (v39 - v37);
    v42 = *(_DWORD *)&v63[v31 + 8];
    v41 = *(_DWORD *)&v63[v31 + 12];
    v43 = 2578 * (v42 - v39);
    v44 = v43 + v40;
    v45 = v37 + v42;
    v46 = v40 - 637 * v37;
    v47 = 7663 * (v41 + v35);
    v48 = v43 - 20239 * v42;
    v49 = 1395 * (v35 - v41);
    v50 = v47 - v49;
    v51 = v47 + v49;
    v52 = v36 + 10438 * v45;
    v53 = v46 + v52;
    v54 = 5027 * (v38 + v35);
    v55 = v50 + v54;
    v56 = v36 - 15083 * v39 + v44;
    v57 = (_BYTE *)(v34 + a5);
    *v57 = *(_BYTE *)(v32 + (((unint64_t)(v55 + v53) >> 18) & 0x3FF));
    v58 = -11295 * (v38 + v41);
    v59 = v51 + v58;
    v57[6] = *(_BYTE *)(v32 + (((unint64_t)(v53 - v55) >> 18) & 0x3FF));
    v60 = v54 + 15326 * v38 + v58;
    v57[1] = *(_BYTE *)(v32 + (((unint64_t)(v59 + v56) >> 18) & 0x3FF));
    v57[5] = *(_BYTE *)(v32 + (((unint64_t)(v56 - v59) >> 18) & 0x3FF));
    v57[2] = *(_BYTE *)(v32 + (((unint64_t)(v60 + v48 + v52) >> 18) & 0x3FF));
    v57[4] = *(_BYTE *)(v32 + (((unint64_t)(v48 + v52 - v60) >> 18) & 0x3FF));
    v57[3] = *(_BYTE *)(v32 + (((unint64_t)(v36 + 11585 * (v39 - v45)) >> 18) & 0x3FF));
    v31 += 28;
  }
  while (v31 != 196);
  return result;
}

_BYTE *sub_10039C9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *result;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  _BYTE v43[144];

  v5 = 0;
  v6 = *(_QWORD *)(a1 + 408);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = &v43[4 * v5];
    v9 = (_DWORD *)(v7 + 4 * v5);
    v10 = (__int16 *)(a3 + 2 * v5);
    v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    v12 = (int)v9[32] * (uint64_t)v10[32];
    v13 = v11 + 5793 * v12;
    v14 = (unint64_t)(v11 - 11586 * v12) >> 11;
    v15 = 10033 * (int)v9[16] * (uint64_t)v10[16];
    v16 = v15 + v13;
    v17 = v13 - v15;
    v18 = (int)v9[8] * (uint64_t)v10[8];
    v19 = (int)v9[24] * (uint64_t)v10[24];
    v20 = (int)v9[40] * (uint64_t)v10[40];
    v21 = 2998 * (v18 + v20);
    v22 = v21 + ((v18 + v19) << 13);
    v23 = v21 + ((v20 - v19) << 13);
    LODWORD(v18) = 4 * (v18 - (v19 + v20));
    *v8 = (unint64_t)(v22 + v16) >> 11;
    v8[30] = (unint64_t)(v16 - v22) >> 11;
    v8[6] = v18 + v14;
    v8[24] = v14 - v18;
    v8[12] = (unint64_t)(v23 + v17) >> 11;
    v8[18] = (unint64_t)(v17 - v23) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 6);
  v24 = 0;
  v25 = v6 - 384;
  v26 = a5;
  do
  {
    v27 = *a4++;
    result = (_BYTE *)(v27 + v26);
    v29 = *(_DWORD *)&v43[v24 + 4];
    v30 = *(_DWORD *)&v43[v24 + 16];
    v31 = *(_DWORD *)&v43[v24 + 20];
    v32 = (*(_DWORD *)&v43[v24] << 13) + 134348800;
    v33 = v32 + 5793 * v30;
    v34 = *(_DWORD *)&v43[v24 + 12];
    v35 = 10033 * *(_DWORD *)&v43[v24 + 8];
    v36 = 2998 * (v31 + v29);
    v37 = v31 - v34;
    v38 = v34 + v31;
    v39 = v36 + ((v34 + v29) << 13);
    v40 = v32 - 11586 * v30;
    v41 = (v29 - v38) << 13;
    *result = *(_BYTE *)(v25 + (((unint64_t)(v39 + v33 + v35) >> 18) & 0x3FF));
    v42 = v36 + (v37 << 13);
    result[5] = *(_BYTE *)(v25 + (((unint64_t)(v33 + v35 - v39) >> 18) & 0x3FF));
    result[1] = *(_BYTE *)(v25 + (((unint64_t)(v41 + v40) >> 18) & 0x3FF));
    result[4] = *(_BYTE *)(v25 + (((unint64_t)(v40 - v41) >> 18) & 0x3FF));
    result[2] = *(_BYTE *)(v25 + (((unint64_t)(v42 + v33 - v35) >> 18) & 0x3FF));
    result[3] = *(_BYTE *)(v25 + (((unint64_t)(v33 - v35 - v42) >> 18) & 0x3FF));
    v24 += 24;
  }
  while (v24 != 144);
  return result;
}

uint64_t sub_10039CC38(uint64_t a1, uint64_t a2, __int16 *a3, _QWORD *a4, unsigned int a5)
{
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t result;
  _BYTE *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  _BYTE *v77;
  unint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  int v82;
  _BYTE *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _BYTE *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unsigned int v111;

  v5 = *(_DWORD **)(a2 + 88);
  v6 = ((*v5 * *a3) << 13) | 0x400;
  v7 = v5[16] * a3[16];
  v8 = v5[33];
  v9 = v5[32] * a3[32];
  v10 = v9 + v7;
  v11 = v7 - v9;
  v104 = v10;
  v106 = v6 + 2896 * v11;
  v111 = v6 - 11584 * v11;
  v12 = v5[8] * a3[8];
  v13 = v5[24] * a3[24];
  v14 = ((uint64_t)(v5[1] * a3[1]) << 13) | 0x400;
  v15 = (int)v5[17] * (uint64_t)a3[17];
  v16 = v15 + v8 * (uint64_t)a3[33];
  v17 = v15 - v8 * (uint64_t)a3[33];
  v18 = v14 + 2896 * v17;
  v109 = v14 + 0x7FFFFFFD2C0 * v17;
  v19 = (int)v5[9] * (uint64_t)a3[9];
  v20 = (int)v5[25] * (uint64_t)a3[25];
  v21 = 6810 * (v19 + v20);
  v97 = v21 + 4209 * v19;
  v107 = v21 - 17828 * v20;
  v22 = ((uint64_t)(v5[2] * a3[2]) << 13) | 0x400;
  v23 = (int)v5[18] * (uint64_t)a3[18];
  v25 = v5[34];
  v24 = v5[35];
  v26 = v23 + v25 * (uint64_t)a3[34];
  v27 = v23 - v25 * (uint64_t)a3[34];
  v28 = v22 + 2896 * v27;
  v99 = v22 + 0x7FFFFFFD2C0 * v27;
  v29 = (int)v5[19] * (uint64_t)a3[19];
  v30 = v29 + v24 * (uint64_t)a3[35];
  v31 = v29 - v24 * (uint64_t)a3[35];
  v32 = (int)v5[20] * (uint64_t)a3[20];
  v33 = v5[36];
  v34 = v32 + v33 * (uint64_t)a3[36];
  v35 = v32 - v33 * (uint64_t)a3[36];
  v36 = (int)v5[10] * (uint64_t)a3[10];
  v37 = (int)v5[26] * (uint64_t)a3[26];
  v38 = 6810 * (v36 + v37);
  v103 = v38 + 4209 * v36;
  v39 = v38 - 17828 * v37;
  v40 = ((uint64_t)(v5[3] * a3[3]) << 13) | 0x400;
  v41 = v40 + 2896 * v31;
  v94 = v40 + 0x7FFFFFFD2C0 * v31;
  v42 = (int)v5[11] * (uint64_t)a3[11];
  v43 = (int)v5[27] * (uint64_t)a3[27];
  v44 = 6810 * (v42 + v43);
  v96 = v44 + 4209 * v42;
  v45 = v44 - 17828 * v43;
  v46 = ((uint64_t)(v5[4] * a3[4]) << 13) | 0x400;
  v93 = v46 + 0x7FFFFFFD2C0 * v35;
  v47 = v46 + 2896 * v35;
  v48 = (int)v5[12] * (uint64_t)a3[12];
  v49 = (int)v5[28] * (uint64_t)a3[28];
  v50 = 6810 * (v48 + v49);
  v51 = v50 - 17828 * v49;
  v52 = 6476 * v26;
  v101 = v50 + 4209 * v48;
  v102 = v28 + 6476 * v26;
  v53 = (unint64_t)(v103 + v102) >> 11;
  v54 = 6476 * v34;
  v100 = v47 + 6476 * v34;
  v55 = (unint64_t)(v101 + v100) >> 11;
  LODWORD(v36) = v53 - v55;
  LODWORD(v48) = 6476 * v104;
  v56 = v13;
  LODWORD(v43) = 6810 * (v13 + v12);
  v105 = v43 + 4209 * v12;
  v98 = v106 + v48;
  LODWORD(v46) = ((v105 + v106 + v48) >> 11 << 13) + 134348800;
  LODWORD(v53) = 6476 * (v55 + v53);
  LODWORD(v34) = v46 + 2896 * v36;
  LODWORD(v35) = v34 + v53;
  LODWORD(v34) = v34 - v53;
  v57 = (v46 + 268423872 * v36);
  v58 = 6476 * v16;
  v59 = v18;
  v108 = v18 + 6476 * v16;
  v60 = (unint64_t)(v97 + v108) >> 11;
  v95 = v41 + 6476 * v30;
  v61 = (unint64_t)(v96 + v95) >> 11;
  result = *(_QWORD *)(a1 + 408) - 384;
  v63 = (_BYTE *)(*a4 + a5);
  v64 = 6810 * (v61 + v60);
  LODWORD(v60) = v64 + 4209 * v60;
  *v63 = *(_BYTE *)(result + (((unint64_t)(v60 + v35) >> 18) & 0x3FF));
  v65 = v64 - 17828 * v61;
  v63[4] = *(_BYTE *)(result + (((unint64_t)(v35 - v60) >> 18) & 0x3FF));
  v63[1] = *(_BYTE *)(result + (((unint64_t)(v65 + v34) >> 18) & 0x3FF));
  v63[3] = *(_BYTE *)(result + (((unint64_t)(v34 - v65) >> 18) & 0x3FF));
  v63[2] = *(_BYTE *)(result + ((v57 >> 18) & 0x3FF));
  LODWORD(v35) = v106 - v48;
  LODWORD(v61) = v43 - 17828 * v56;
  v66 = v59 - v58;
  v67 = v41 - 6476 * v30;
  v68 = v47 - v54;
  v69 = (unint64_t)(v39 + v28 - v52) >> 11;
  v70 = (unint64_t)(v51 + v47 - v54) >> 11;
  v71 = v70 + v69;
  LODWORD(v69) = v69 - v70;
  LODWORD(v70) = ((v61 + v35) >> 11 << 13) + 134348800;
  v71 *= 6476;
  LODWORD(v54) = v70 + 2896 * v69;
  LODWORD(v63) = v54 + v71;
  v72 = v54 - v71;
  v73 = (v70 + 268423872 * v69);
  v74 = (unint64_t)(v107 + v66) >> 11;
  v75 = (unint64_t)(v45 + v67) >> 11;
  v76 = 6810 * (v75 + v74);
  LODWORD(v74) = v76 + 4209 * v74;
  v77 = (_BYTE *)(a4[1] + a5);
  *v77 = *(_BYTE *)(result + (((unint64_t)(v74 + (_DWORD)v63) >> 18) & 0x3FF));
  LODWORD(v75) = v76 - 17828 * v75;
  v77[4] = *(_BYTE *)(result + (((unint64_t)((_DWORD)v63 - v74) >> 18) & 0x3FF));
  v77[1] = *(_BYTE *)(result + (((unint64_t)(v75 + v72) >> 18) & 0x3FF));
  v77[3] = *(_BYTE *)(result + (((unint64_t)(v72 - v75) >> 18) & 0x3FF));
  v77[2] = *(_BYTE *)(result + ((v73 >> 18) & 0x3FF));
  v78 = v68 - v51;
  LODWORD(v74) = (v111 >> 11 << 13) + 134348800;
  v79 = 6476 * ((v93 >> 11) + (v99 >> 11));
  v80 = (v99 >> 11) - (v93 >> 11);
  LODWORD(v73) = v74 + 2896 * v80;
  LODWORD(v75) = v73 + v79;
  LODWORD(v73) = v73 - v79;
  v81 = (v74 + 268423872 * v80);
  LODWORD(v74) = 6810 * ((v94 >> 11) + (v109 >> 11));
  v82 = v74 + 4209 * (v109 >> 11);
  v83 = (_BYTE *)(a4[2] + a5);
  *v83 = *(_BYTE *)(result + (((unint64_t)(v82 + v75) >> 18) & 0x3FF));
  LODWORD(v74) = v74 - 17828 * (v94 >> 11);
  v83[4] = *(_BYTE *)(result + (((unint64_t)(v75 - v82) >> 18) & 0x3FF));
  v83[1] = *(_BYTE *)(result + (((unint64_t)(v74 + v73) >> 18) & 0x3FF));
  v84 = (unint64_t)(v66 - v107) >> 11;
  v85 = (unint64_t)(v28 - v52 - v39) >> 11;
  v86 = (unint64_t)(v67 - v45) >> 11;
  v83[3] = *(_BYTE *)(result + (((unint64_t)(v73 - v74) >> 18) & 0x3FF));
  v78 >>= 11;
  v83[2] = *(_BYTE *)(result + ((v81 >> 18) & 0x3FF));
  LODWORD(v35) = ((v35 - v61) >> 11 << 13) + 134348800;
  LODWORD(v73) = 6476 * (v78 + v85);
  LODWORD(v85) = v85 - v78;
  LODWORD(v78) = v35 + 2896 * v85;
  LODWORD(v74) = v78 + v73;
  LODWORD(v78) = v78 - v73;
  LODWORD(v73) = 6810 * (v86 + v84);
  LODWORD(v84) = v73 + 4209 * v84;
  v87 = (_BYTE *)(a4[3] + a5);
  *v87 = *(_BYTE *)(result + (((unint64_t)(v84 + v74) >> 18) & 0x3FF));
  LODWORD(v86) = v73 - 17828 * v86;
  v87[4] = *(_BYTE *)(result + (((unint64_t)(v74 - v84) >> 18) & 0x3FF));
  v87[1] = *(_BYTE *)(result + (((unint64_t)(v86 + v78) >> 18) & 0x3FF));
  v87[3] = *(_BYTE *)(result + (((unint64_t)(v78 - v86) >> 18) & 0x3FF));
  v87[2] = *(_BYTE *)(result + (((unint64_t)(v35 + 268423872 * v85) >> 18) & 0x3FF));
  v88 = (unint64_t)(v102 - v103) >> 11;
  v89 = (unint64_t)(v100 - v101) >> 11;
  LODWORD(v86) = ((v98 - v105) >> 11 << 13) + 134348800;
  LODWORD(v78) = 6476 * (v89 + v88);
  v90 = (unint64_t)(v108 - v97) >> 11;
  v91 = (unint64_t)(v95 - v96) >> 11;
  LODWORD(v88) = v88 - v89;
  LODWORD(v89) = 6810 * (v91 + v90);
  LODWORD(v90) = v89 + 4209 * v90;
  LODWORD(v74) = v86 + 2896 * v88;
  LODWORD(v91) = v89 - 17828 * v91;
  v92 = (_BYTE *)(a4[4] + a5);
  *v92 = *(_BYTE *)(result + (((unint64_t)(v90 + v74 + v78) >> 18) & 0x3FF));
  v92[4] = *(_BYTE *)(result + (((unint64_t)(v74 + v78 - v90) >> 18) & 0x3FF));
  v92[1] = *(_BYTE *)(result + (((unint64_t)(v91 + v74 - v78) >> 18) & 0x3FF));
  v92[3] = *(_BYTE *)(result + (((unint64_t)(v74 - v78 - v91) >> 18) & 0x3FF));
  v92[2] = *(_BYTE *)(result + (((unint64_t)(v86 + 268423872 * v88) >> 18) & 0x3FF));
  return result;
}

uint64_t sub_10039D2F8(uint64_t a1, uint64_t a2, __int16 *a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  _BYTE *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  _BYTE *v48;
  int v49;
  int v50;
  int v51;
  _BYTE *v52;
  uint64_t result;
  int v54;
  _BYTE *v55;
  int v56;
  int v57;

  v5 = *(_QWORD *)(a1 + 408);
  v6 = *(_DWORD **)(a2 + 88);
  v7 = *v6 * *a3;
  v8 = v6[16] * a3[16];
  v9 = 4 * (v8 + v7);
  v10 = 4 * (v7 - v8);
  v11 = (int)v6[8] * (uint64_t)a3[8];
  v12 = (int)v6[24] * (uint64_t)a3[24];
  v13 = 4433 * (v11 + v12) + 1024;
  v14 = (unint64_t)(v13 + 6270 * v11) >> 11;
  v15 = (unint64_t)(v13 - 15137 * v12) >> 11;
  LODWORD(v11) = v9 - v14;
  v16 = v6[1] * a3[1];
  v17 = v6[17] * a3[17];
  LODWORD(v13) = 4 * (v17 + v16);
  v18 = 4 * (v16 - v17);
  v19 = (int)v6[9] * (uint64_t)a3[9];
  v20 = (int)v6[25] * (uint64_t)a3[25];
  v21 = 4433 * (v19 + v20) + 1024;
  v22 = (unint64_t)(v21 + 6270 * v19) >> 11;
  v23 = (unint64_t)(v21 - 15137 * v20) >> 11;
  v24 = v22 + v13;
  LODWORD(v22) = v13 - v22;
  v25 = v23 + v18;
  v26 = v18 - v23;
  LODWORD(v23) = v6[2] * a3[2];
  LODWORD(v13) = v6[18] * a3[18];
  LODWORD(v20) = v13 + v23;
  LODWORD(v23) = v23 - v13;
  v27 = (int)v6[10] * (uint64_t)a3[10];
  v28 = (int)v6[26] * (uint64_t)a3[26];
  LODWORD(v13) = v10 - v15;
  LODWORD(v20) = 4 * v20;
  v29 = 4 * v23;
  v30 = 4433 * (v27 + v28) + 1024;
  v31 = (unint64_t)(v30 + 6270 * v27) >> 11;
  v32 = (unint64_t)(v30 - 15137 * v28) >> 11;
  LODWORD(v28) = v31 + v20;
  LODWORD(v30) = v20 - v31;
  LODWORD(v31) = v32 + v29;
  LODWORD(v20) = v29 - v32;
  v33 = v6[3] * a3[3];
  v34 = v6[19] * a3[19];
  LODWORD(v32) = 4 * (v34 + v33);
  v35 = 4 * (v33 - v34);
  v36 = (int)v6[11] * (uint64_t)a3[11];
  v37 = (int)v6[27] * (uint64_t)a3[27];
  v38 = 4433 * (v36 + v37) + 1024;
  v39 = (unint64_t)(v38 + 6270 * v36) >> 11;
  v40 = (unint64_t)(v38 - 15137 * v37) >> 11;
  v41 = v39 + v32;
  LODWORD(v38) = v32 - v39;
  v5 -= 384;
  v42 = (_BYTE *)(*a4 + a5);
  v43 = v14 + v9 + 16400;
  LODWORD(v14) = (v43 + (_DWORD)v28) << 13;
  LODWORD(v37) = (v43 - (_DWORD)v28) << 13;
  LODWORD(v32) = 4433 * (v39 + v32 + v24);
  v44 = v32 + 6270 * v24;
  *v42 = *(_BYTE *)(v5 + (((unint64_t)(v44 + v14) >> 18) & 0x3FF));
  LOBYTE(v14) = *(_BYTE *)(v5 + (((unint64_t)(v14 - v44) >> 18) & 0x3FF));
  v45 = v32 - 15137 * v41;
  v42[3] = v14;
  v46 = v40 + v35;
  v42[1] = *(_BYTE *)(v5 + (((unint64_t)(v45 + v37) >> 18) & 0x3FF));
  LOBYTE(v14) = *(_BYTE *)(v5 + (((unint64_t)(v37 - v45) >> 18) & 0x3FF));
  v47 = v35 - v40;
  v42[2] = v14;
  v48 = (_BYTE *)(a4[1] + a5);
  v49 = v15 + v10 + 16400;
  LODWORD(v15) = (v49 + (_DWORD)v31) << 13;
  v50 = (v49 - (_DWORD)v31) << 13;
  LODWORD(v40) = 4433 * (v40 + v35 + v25);
  v51 = v40 + 6270 * v25;
  LODWORD(v40) = v40 - 15137 * v46;
  *v48 = *(_BYTE *)(v5 + (((unint64_t)(v51 + v15) >> 18) & 0x3FF));
  v48[3] = *(_BYTE *)(v5 + (((unint64_t)(v15 - v51) >> 18) & 0x3FF));
  v48[1] = *(_BYTE *)(v5 + (((unint64_t)(v40 + v50) >> 18) & 0x3FF));
  v48[2] = *(_BYTE *)(v5 + (((unint64_t)(v50 - v40) >> 18) & 0x3FF));
  v52 = (_BYTE *)(a4[2] + a5);
  result = (((_DWORD)v13 + 16400 + (_DWORD)v20) << 13);
  LODWORD(v15) = ((_DWORD)v13 + 16400 - (_DWORD)v20) << 13;
  LODWORD(v13) = 4433 * (v47 + v26);
  v54 = v13 + 6270 * v26;
  LODWORD(v13) = v13 - 15137 * v47;
  *v52 = *(_BYTE *)(v5 + (((unint64_t)(v54 + result) >> 18) & 0x3FF));
  v52[3] = *(_BYTE *)(v5 + (((unint64_t)(result - v54) >> 18) & 0x3FF));
  v52[1] = *(_BYTE *)(v5 + (((unint64_t)(v13 + v15) >> 18) & 0x3FF));
  v52[2] = *(_BYTE *)(v5 + (((unint64_t)(v15 - v13) >> 18) & 0x3FF));
  v55 = (_BYTE *)(a4[3] + a5);
  LODWORD(v11) = v11 + 16400;
  LODWORD(v52) = ((_DWORD)v11 + (_DWORD)v30) << 13;
  v56 = 4433 * (v38 + v22) + 6270 * v22;
  LODWORD(v11) = ((_DWORD)v11 - (_DWORD)v30) << 13;
  *v55 = *(_BYTE *)(v5 + (((unint64_t)(v56 + (_DWORD)v52) >> 18) & 0x3FF));
  v57 = 4433 * (v38 + v22) - 15137 * v38;
  v55[3] = *(_BYTE *)(v5 + (((unint64_t)((_DWORD)v52 - v56) >> 18) & 0x3FF));
  v55[1] = *(_BYTE *)(v5 + (((unint64_t)(v57 + v11) >> 18) & 0x3FF));
  v55[2] = *(_BYTE *)(v5 + (((unint64_t)(v11 - v57) >> 18) & 0x3FF));
  return result;
}

uint64_t sub_10039D67C(uint64_t a1, uint64_t a2, __int16 *a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  int v31;
  _BYTE *v32;
  int v33;
  unint64_t v34;
  uint64_t result;
  int v36;
  int v37;
  _BYTE *v38;

  v5 = *(_QWORD *)(a1 + 408);
  v6 = *(_DWORD **)(a2 + 88);
  v7 = ((*v6 * *a3) << 13) | 0x400;
  v8 = v6[16] * a3[16];
  v9 = v7 + 5793 * v8;
  v10 = v7 - 11586 * v8;
  v11 = 10033 * v6[8] * a3[8];
  v12 = v11 + v9;
  v13 = v9 - v11;
  v14 = ((uint64_t)(v6[1] * a3[1]) << 13) | 0x400;
  v15 = (int)v6[17] * (uint64_t)a3[17];
  v16 = v14 + 5793 * v15;
  v17 = v14 + 0x7FFFFFFD2BELL * v15;
  v18 = 10033 * (int)v6[9] * (uint64_t)a3[9];
  v19 = (unint64_t)(v18 + v16) >> 11;
  v20 = (unint64_t)(v16 - v18) >> 11;
  v21 = ((uint64_t)(v6[2] * a3[2]) << 13) | 0x400;
  v22 = (int)v6[18] * (uint64_t)a3[18];
  v23 = v21 + 5793 * v22;
  v24 = v21 + 0x7FFFFFFD2BELL * v22;
  v25 = 10033 * (int)v6[10] * (uint64_t)a3[10];
  v26 = (unint64_t)(v25 + v23) >> 11;
  v27 = (unint64_t)(v23 - v25) >> 11;
  v28 = v24 >> 11;
  v5 -= 384;
  v29 = a5;
  v30 = (_BYTE *)(*a4 + a5);
  v31 = (v12 >> 11 << 13) + 134348800;
  LODWORD(v23) = v31 + 5793 * v26;
  LODWORD(v19) = 10033 * v19;
  *v30 = *(_BYTE *)(v5 + (((unint64_t)(v23 + v19) >> 18) & 0x3FF));
  v30[2] = *(_BYTE *)(v5 + (((unint64_t)(v23 - v19) >> 18) & 0x3FF));
  v30[1] = *(_BYTE *)(v5 + (((unint64_t)(v31 + 268423870 * v26) >> 18) & 0x3FF));
  v32 = (_BYTE *)(a4[1] + v29);
  v33 = (v10 >> 11 << 13) + 134348800;
  LODWORD(v19) = v33 + 5793 * v28;
  v34 = (v33 + 268423870 * v28);
  LODWORD(v17) = 10033 * (v17 >> 11);
  result = *(unsigned __int8 *)(v5 + (((unint64_t)(v19 + v17) >> 18) & 0x3FF));
  *v32 = result;
  v32[2] = *(_BYTE *)(v5 + (((unint64_t)(v19 - v17) >> 18) & 0x3FF));
  v32[1] = *(_BYTE *)(v5 + ((v34 >> 18) & 0x3FF));
  v36 = (v13 >> 11 << 13) + 134348800;
  v37 = v36 + 5793 * v27;
  v38 = (_BYTE *)(a4[2] + v29);
  *v38 = *(_BYTE *)(v5 + (((unint64_t)(v37 + 10033 * v20) >> 18) & 0x3FF));
  v38[2] = *(_BYTE *)(v5 + (((unint64_t)(v37 - 10033 * v20) >> 18) & 0x3FF));
  v38[1] = *(_BYTE *)(v5 + (((unint64_t)(v36 + 268423870 * v27) >> 18) & 0x3FF));
  return result;
}

uint64_t sub_10039D858(uint64_t result, uint64_t a2, unsigned __int16 *a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;

  v5 = *(_QWORD *)(result + 408) - 384;
  v6 = *(_DWORD **)(a2 + 88);
  v7 = *v6 * *a3 + 4100;
  v8 = v6[8] * a3[8];
  v9 = v8 + v7;
  v10 = v7 - v8;
  v11 = v6[1] * a3[1];
  LODWORD(v6) = v6[9] * a3[9];
  v12 = (_DWORD)v6 + v11;
  LODWORD(v6) = v11 - (_DWORD)v6;
  v13 = (_BYTE *)(*a4 + a5);
  *v13 = *(_BYTE *)(v5 + (((unint64_t)(v12 + v9) >> 3) & 0x3FF));
  v13[1] = *(_BYTE *)(v5 + (((unint64_t)(v9 - v12) >> 3) & 0x3FF));
  v14 = (_BYTE *)(a4[1] + a5);
  *v14 = *(_BYTE *)(v5 + (((unint64_t)((_DWORD)v6 + v10) >> 3) & 0x3FF));
  v14[1] = *(_BYTE *)(v5 + (((unint64_t)(v10 - (_DWORD)v6) >> 3) & 0x3FF));
  return result;
}

uint64_t sub_10039D8F8(uint64_t result, uint64_t a2, unsigned __int16 *a3, _QWORD *a4, unsigned int a5)
{
  *(_BYTE *)(*a4 + a5) = *(_BYTE *)(*(_QWORD *)(result + 408)
                                  + (((unint64_t)(**(_DWORD **)(a2 + 88) * *a3 + 4100) >> 3) & 0x3FF)
                                  - 384);
  return result;
}

uint64_t sub_10039D92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  _DWORD *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  _BYTE *v65;
  int v66;
  int v67;
  _DWORD v70[72];

  v5 = 0;
  v6 = *(_QWORD *)(a1 + 408);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = (_DWORD *)(v7 + 4 * v5);
    v9 = (__int16 *)(a3 + 2 * v5);
    v10 = (int)v8[16] * (uint64_t)v9[16];
    v11 = ((uint64_t)(*v8 * *v9) << 13) | 0x400;
    v12 = v8[32];
    v13 = (int)v8[48] * (uint64_t)v9[48];
    v14 = v11 + 5793 * v13;
    v15 = v11 - 11586 * v13;
    v16 = (int)v8[8] * (uint64_t)v9[8];
    v17 = (int)v8[40] * (uint64_t)v9[40];
    v18 = v16 + v17;
    v19 = v16 - v17;
    v20 = v8[56];
    v21 = v16 + v20 * (uint64_t)v9[56];
    v22 = v17 - v20 * (uint64_t)v9[56];
    v23 = v19 - v20 * (uint64_t)v9[56];
    v24 = v10 - v12 * (uint64_t)v9[32];
    v25 = v15 + 5793 * v24;
    v26 = v15 + 0x7FFFFFFD2BELL * v24;
    v27 = v12 * (uint64_t)v9[32];
    v28 = 10887 * (v10 + v27);
    v10 *= 8875;
    v29 = 2012 * v27;
    v30 = v28 - 2012 * v27 + v14;
    v31 = v14 - v28 + v10;
    v32 = v14 - v10 + v29;
    v33 = -10033 * (int)v8[24] * (uint64_t)v9[24];
    v22 *= 11409;
    v18 *= 7447;
    v34 = v33 - v22 + v18;
    v35 = &v70[v5];
    v36 = v18 - v33 + 3962 * v21;
    v37 = v22 + v33 + 3962 * v21;
    *v35 = (unint64_t)(v36 + v30) >> 11;
    v23 *= 10033;
    v35[64] = (unint64_t)(v30 - v36) >> 11;
    v35[8] = (unint64_t)(v23 + v25) >> 11;
    v35[56] = (unint64_t)(v25 - v23) >> 11;
    v35[16] = (unint64_t)(v34 + v31) >> 11;
    v35[48] = (unint64_t)(v31 - v34) >> 11;
    v35[24] = (unint64_t)(v37 + v32) >> 11;
    v35[40] = (unint64_t)(v32 - v37) >> 11;
    v35[32] = v26 >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v38 = 0;
  v39 = v6 - 384;
  result = 4294957263;
  do
  {
    v41 = &v70[v38];
    v42 = v41[1];
    v43 = v41[6];
    v44 = v41[7];
    v45 = (*v41 << 13) + 134348800;
    v46 = v45 + 5793 * v43;
    v47 = v41[2];
    v48 = v41[3];
    v49 = v41[4];
    LODWORD(v41) = v41[5];
    v50 = v45 - 11586 * v43;
    v51 = v47 - v49;
    v52 = v50 + 5793 * (v47 - v49);
    v53 = 10887 * (v49 + v47);
    v47 *= 8875;
    v54 = (v50 + 268423870 * v51);
    v55 = 2012 * v49;
    v56 = v53 - 2012 * v49 + v46;
    v57 = v46 - v53;
    v58 = v46 - v47;
    v59 = v57 + v47;
    v48 *= -10033;
    v60 = 7447 * ((_DWORD)v41 + v42);
    v61 = 3962 * (v44 + v42);
    v62 = v58 + v55;
    v63 = v60 - v48 + v61;
    v64 = (_DWORD)v41 - v44;
    LODWORD(v41) = v42 - ((_DWORD)v41 + v44);
    v65 = (_BYTE *)(*(_QWORD *)(a4 + v38) + a5);
    *v65 = *(_BYTE *)(v39 + (((unint64_t)(v63 + v56) >> 18) & 0x3FF));
    LODWORD(v41) = 10033 * (_DWORD)v41;
    v65[8] = *(_BYTE *)(v39 + (((unint64_t)(v56 - v63) >> 18) & 0x3FF));
    v65[1] = *(_BYTE *)(v39 + (((unint64_t)((_DWORD)v41 + v52) >> 18) & 0x3FF));
    v64 *= 11409;
    v66 = v48 - v64 + v60;
    v65[7] = *(_BYTE *)(v39 + (((unint64_t)(v52 - (_DWORD)v41) >> 18) & 0x3FF));
    v65[2] = *(_BYTE *)(v39 + (((unint64_t)(v66 + v59) >> 18) & 0x3FF));
    v67 = v64 + v48 + v61;
    v65[6] = *(_BYTE *)(v39 + (((unint64_t)(v59 - v66) >> 18) & 0x3FF));
    v65[3] = *(_BYTE *)(v39 + (((unint64_t)(v67 + v62) >> 18) & 0x3FF));
    v65[5] = *(_BYTE *)(v39 + (((unint64_t)(v62 - v67) >> 18) & 0x3FF));
    v65[4] = *(_BYTE *)(v39 + ((v54 >> 18) & 0x3FF));
    v38 += 8;
  }
  while (v38 != 72);
  return result;
}

uint64_t sub_10039DCC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  _DWORD *v38;
  _BYTE *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  _DWORD v69[80];

  v5 = 0;
  v67 = *(_QWORD *)(a1 + 408);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v10 = (int)v7[32] * (uint64_t)v8[32];
    v11 = v9 + 9373 * v10;
    v12 = v9 - 3580 * v10;
    v13 = v9 - 11586 * v10;
    v14 = (int)v7[16] * (uint64_t)v8[16];
    v15 = (int)v7[48] * (uint64_t)v8[48];
    v16 = 6810 * (v14 + v15);
    v17 = v16 + 4209 * v14;
    v18 = v16 - 17828 * v15;
    v19 = v17 + v11;
    v20 = v11 - v17;
    v21 = v18 + v12;
    v22 = v12 - v18;
    v23 = (int)v7[8] * (uint64_t)v8[8];
    v24 = (int)v7[24] * (uint64_t)v8[24];
    v25 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    v26 = v24 + (int)v7 * (uint64_t)(int)v8;
    v27 = v24 - (int)v7 * (uint64_t)(int)v8;
    v28 = (v25 << 13) + 2531 * v27;
    v29 = 7791 * v26 + 11443 * v23 + v28;
    v30 = 1812 * v23 - 7791 * v26 + v28;
    v31 = (v25 << 13) - 6627 * v27;
    LODWORD(v27) = v23 - v25 - v27;
    v32 = 10323 * v23 - (4815 * v26 + v31);
    v33 = &v69[v5];
    v34 = 5260 * v23 - 4815 * v26 + v31;
    *v33 = (unint64_t)(v29 + v19) >> 11;
    v33[72] = (unint64_t)(v19 - v29) >> 11;
    v33[8] = (unint64_t)(v32 + v21) >> 11;
    LODWORD(v27) = 4 * v27;
    v33[64] = (unint64_t)(v21 - v32) >> 11;
    v33[16] = v27 + (v13 >> 11);
    v33[56] = (v13 >> 11) - v27;
    v33[24] = (unint64_t)(v34 + v22) >> 11;
    v33[48] = (unint64_t)(v22 - v34) >> 11;
    v33[32] = (unint64_t)(v30 + v20) >> 11;
    v33[40] = (unint64_t)(v20 - v30) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v35 = 0;
  v36 = v67 - 384;
  result = 2531;
  do
  {
    v38 = &v69[v35];
    v39 = (_BYTE *)(*(_QWORD *)(a4 + v35) + a5);
    v40 = v38[1];
    v41 = (*v38 << 13) + 134348800;
    v42 = v38[4];
    v43 = v38[5];
    v44 = v41 + 9373 * v42;
    v45 = v41 - 3580 * v42;
    v46 = v41 - 11586 * v42;
    v48 = v38[2];
    v47 = v38[3];
    v49 = a4;
    v51 = v38[6];
    v50 = v38[7];
    LODWORD(v38) = 6810 * (v51 + v48);
    v52 = (_DWORD)v38 + 4209 * v48;
    v53 = (_DWORD)v38 - 17828 * v51;
    v54 = v52 + v44;
    LODWORD(v38) = v44 - v52;
    v55 = v53 + v45;
    v56 = v45 - v53;
    v57 = v50 + v47;
    v58 = v47 - v50;
    v59 = (v43 << 13) + 2531 * v58;
    v60 = (v43 << 13) - 6627 * v58;
    v61 = v40 - v43 - v58;
    v62 = 7791 * v57 + 11443 * v40 + v59;
    v63 = 1812 * v40 - 7791 * v57 + v59;
    *v39 = *(_BYTE *)(v36 + (((unint64_t)(v62 + v54) >> 18) & 0x3FF));
    v64 = (v54 - v62);
    v65 = 10323 * v40 - (4815 * v57 + v60);
    v39[9] = *(_BYTE *)(v36 + ((v64 >> 18) & 0x3FF));
    v39[1] = *(_BYTE *)(v36 + (((unint64_t)(v65 + v55) >> 18) & 0x3FF));
    v61 <<= 13;
    v39[8] = *(_BYTE *)(v36 + (((unint64_t)(v55 - v65) >> 18) & 0x3FF));
    v66 = 5260 * v40 - 4815 * v57;
    v39[2] = *(_BYTE *)(v36 + (((unint64_t)(v61 + v46) >> 18) & 0x3FF));
    v39[7] = *(_BYTE *)(v36 + (((unint64_t)(v46 - v61) >> 18) & 0x3FF));
    v39[3] = *(_BYTE *)(v36 + (((unint64_t)(v66 + v60 + v56) >> 18) & 0x3FF));
    a4 = v49;
    v39[6] = *(_BYTE *)(v36 + (((unint64_t)(v56 - (v66 + v60)) >> 18) & 0x3FF));
    v39[4] = *(_BYTE *)(v36 + (((unint64_t)(v63 + (_DWORD)v38) >> 18) & 0x3FF));
    v39[5] = *(_BYTE *)(v36 + (((unint64_t)((_DWORD)v38 - v63) >> 18) & 0x3FF));
    v35 += 8;
  }
  while (v35 != 80);
  return result;
}

uint64_t sub_10039E0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  _BYTE *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t result;
  int v78;
  uint64_t v79;
  _DWORD v82[88];

  v5 = 0;
  v79 = *(_QWORD *)(a1 + 408);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = *v7 * *v8;
    v10 = (int)v7[16] * (uint64_t)v8[16];
    v11 = (int)v7[32] * (uint64_t)v8[32];
    v12 = (int)v7[48] * (uint64_t)v8[48];
    v13 = (int)v7[8] * (uint64_t)v8[8];
    v14 = (int)v7[24] * (uint64_t)v8[24];
    v15 = (int)v7[40] * (uint64_t)v8[40];
    v16 = (int)v7[56] * (uint64_t)v8[56];
    v17 = v10 + v12 - v11;
    v18 = v13 + v16;
    v19 = 3264 * (v13 + v14 + v15 + v16);
    v20 = 7274 * (v13 + v14);
    v21 = 5492 * (v13 + v15);
    v22 = v20 - 7562 * v13 + v21;
    v23 = v19 - 9527 * (v14 + v15);
    v24 = v21 - 9766 * v15 + v23;
    v25 = v20 + 16984 * v14 - 14731 * (v14 + v16) + v23;
    v26 = v19 + 3000 * v18;
    v27 = v22 + v26;
    v28 = -14731 * (v14 + v16) + 17223 * v16 + v26;
    v29 = &v82[v5];
    v30 = ((uint64_t)v9 << 13) | 0x400;
    v31 = v30 + 11116 * v17;
    v32 = 20862 * (v11 - v12);
    v33 = v31 + 3529 * (v11 - v10);
    v34 = -12019 * v14 + 8203 * v15 - 13802 * v16;
    v35 = v31 + v32;
    v36 = v34 + v19;
    v37 = v33 - 14924 * v11 + v32;
    v38 = v35 + 17333 * v12;
    *v29 = (unint64_t)(v27 + v38) >> 11;
    v29[80] = (unint64_t)(v38 - v27) >> 11;
    v39 = v25 + v37;
    v40 = v37 - v25;
    v41 = v31 - 9467 * (v10 + v12);
    v29[8] = v39 >> 11;
    v42 = -11395 * v10 + 15929 * v11 + v41;
    v43 = v41 - 6461 * v12;
    v29[16] = (unint64_t)(v24 + v43) >> 11;
    v29[64] = (unint64_t)(v43 - v24) >> 11;
    v29[72] = v40 >> 11;
    v44 = v33 - 12399 * v10;
    v29[24] = (unint64_t)(v28 + v44) >> 11;
    v29[56] = (unint64_t)(v44 - v28) >> 11;
    v29[32] = (unint64_t)(v36 + v42) >> 11;
    v29[48] = (unint64_t)(v42 - v36) >> 11;
    v29[40] = (unint64_t)(v30 + 0x7FFFFFFD2BFLL * v17) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v45 = 0;
  v46 = v79 - 384;
  do
  {
    v47 = &v82[v45];
    v48 = v47[1];
    v49 = (_BYTE *)(*(_QWORD *)(a4 + v45) + a5);
    v50 = (*v47 << 13) + 134348800;
    v51 = v47[4];
    v52 = v47[5];
    v54 = v47[6];
    v53 = v47[7];
    v55 = 20862 * (v51 - v54);
    v56 = v47[2];
    v57 = v47[3];
    v58 = v54 + v56 - v51;
    v59 = v50 + 11116 * v58;
    LODWORD(v47) = v59 + 3529 * (v51 - v56);
    v60 = (_DWORD)v47 - 14924 * v51;
    v61 = v59 + v55 + 17333 * v54;
    v62 = (_DWORD)v47 - 12399 * v56;
    v63 = v59 - 9467 * (v54 + v56);
    v64 = -11395 * v56 + 15929 * v51;
    v65 = (v50 + 268423871 * v58);
    v66 = v63 - 6461 * v54;
    v67 = 3264 * (v57 + v48 + v52 + v53);
    v68 = 7274 * (v57 + v48);
    v69 = v64 + v63;
    v70 = 5492 * (v52 + v48);
    v71 = v67 + 3000 * (v53 + v48);
    v72 = v60 + v55;
    v73 = v68 - 7562 * v48 + v70 + v71;
    *v49 = *(_BYTE *)(v46 + (((unint64_t)(v73 + v61) >> 18) & 0x3FF));
    v74 = v67 - 9527 * (v52 + v57);
    v75 = v70 - 9766 * v52 + v74;
    v76 = v68 + 16984 * v57 - 14731 * (v53 + v57) + v74;
    v49[10] = *(_BYTE *)(v46 + (((unint64_t)(v61 - v73) >> 18) & 0x3FF));
    v49[1] = *(_BYTE *)(v46 + (((unint64_t)(v76 + v72) >> 18) & 0x3FF));
    LOBYTE(v73) = *(_BYTE *)(v46 + (((unint64_t)(v72 - v76) >> 18) & 0x3FF));
    result = (-14731 * (v53 + v57) + 17223 * v53 + v71);
    v49[9] = v73;
    v49[2] = *(_BYTE *)(v46 + (((unint64_t)(v75 + v66) >> 18) & 0x3FF));
    v49[8] = *(_BYTE *)(v46 + (((unint64_t)(v66 - v75) >> 18) & 0x3FF));
    v49[3] = *(_BYTE *)(v46 + (((unint64_t)(result + v62) >> 18) & 0x3FF));
    v78 = -12019 * v57 + 8203 * v52 - 13802 * v53 + v67;
    v49[7] = *(_BYTE *)(v46 + (((unint64_t)(v62 - result) >> 18) & 0x3FF));
    v49[4] = *(_BYTE *)(v46 + (((unint64_t)(v78 + v69) >> 18) & 0x3FF));
    v49[6] = *(_BYTE *)(v46 + (((unint64_t)(v69 - v78) >> 18) & 0x3FF));
    v49[5] = *(_BYTE *)(v46 + ((v65 >> 18) & 0x3FF));
    v45 += 8;
  }
  while (v45 != 88);
  return result;
}

_BYTE *sub_10039E55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  _BYTE *result;
  unint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v80;
  _DWORD v82[96];

  v5 = 0;
  v80 = *(_QWORD *)(a1 + 408);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v10 = 10033 * (int)v7[32] * (uint64_t)v8[32];
    v11 = v10 + v9;
    v12 = v9 - v10;
    v13 = (int)v7[16] * (uint64_t)v8[16];
    v14 = v7[48];
    v15 = (v14 * (uint64_t)v8[48]) << 13;
    v16 = (v13 - v14 * (uint64_t)v8[48]) << 13;
    v17 = v16 + v9;
    v18 = v9 - v16;
    v19 = v15 + 11190 * v13;
    v20 = v19 + v11;
    v21 = v11 - v19;
    v22 = 2998 * v13 - v15;
    v23 = v22 + v12;
    v24 = v12 - v22;
    v25 = (int)v7[8] * (uint64_t)v8[8];
    v26 = (int)v7[24] * (uint64_t)v8[24];
    v27 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    v28 = 10703 * v26;
    v29 = -4433 * v26;
    v30 = 7053 * (v25 + v27 + (int)v7 * (uint64_t)(int)v8);
    v31 = v30 + 2139 * (v25 + v27);
    v32 = v26 - v27;
    v33 = v28 + 2295 * v25 + v31;
    v34 = -8565 * (v27 + (int)v7 * (uint64_t)(int)v8);
    v35 = v29 - 12112 * v27 - 8565 * (v27 + (int)v7 * (uint64_t)(int)v8) + v31;
    v36 = (int)v7 * (uint64_t)(int)v8;
    v37 = v25 - v36;
    v38 = v29 - 5540 * v25 - 16244 * v36;
    v39 = &v82[v5];
    v40 = 12998 * v36 - v28 + v34 + v30;
    v41 = v38 + v30;
    v42 = 4433 * (v37 + v32);
    v43 = v42 + 6270 * v37;
    v44 = v42 - 15137 * v32;
    *v39 = (unint64_t)(v33 + v20) >> 11;
    v39[88] = (unint64_t)(v20 - v33) >> 11;
    v39[8] = (unint64_t)(v43 + v17) >> 11;
    v39[80] = (unint64_t)(v17 - v43) >> 11;
    v39[16] = (unint64_t)(v35 + v23) >> 11;
    v39[72] = (unint64_t)(v23 - v35) >> 11;
    v39[24] = (unint64_t)(v40 + v24) >> 11;
    v39[64] = (unint64_t)(v24 - v40) >> 11;
    v39[32] = (unint64_t)(v44 + v18) >> 11;
    v39[56] = (unint64_t)(v18 - v44) >> 11;
    v39[40] = (unint64_t)(v41 + v21) >> 11;
    v39[48] = (unint64_t)(v21 - v41) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v45 = 0;
  v46 = v80 - 384;
  do
  {
    v47 = &v82[v45];
    v48 = v47[1];
    v49 = (*v47 << 13) + 134348800;
    v50 = v47[5];
    v51 = 10033 * v47[4];
    v52 = v49 + v51;
    v54 = v47[6];
    v53 = v47[7];
    v55 = v54 << 13;
    v56 = v47[2];
    v57 = v47[3];
    v58 = v49 - v51;
    LODWORD(v47) = (v56 - v54) << 13;
    v59 = (_DWORD)v47 + v49;
    v60 = v49 - (_DWORD)v47;
    LODWORD(v47) = v55 + 11190 * v56;
    v61 = (_DWORD)v47 + v52;
    LODWORD(v47) = v52 - (_DWORD)v47;
    v62 = 2998 * v56 - v55;
    v63 = 10703 * v57;
    v64 = -4433 * v57;
    v65 = v62 + v58;
    v66 = 7053 * (v50 + v48 + v53);
    v67 = v66 + 2139 * (v50 + v48);
    v68 = v58 - v62;
    v69 = 10703 * v57 + 2295 * v48 + v67;
    v70 = -8565 * (v53 + v50);
    v71 = -4433 * v57 - 12112 * v50 - 8565 * (v53 + v50) + v67;
    v72 = v57 - v50;
    result = (_BYTE *)(*(_QWORD *)(a4 + v45) + a5);
    *result = *(_BYTE *)(v46 + (((unint64_t)(v69 + v61) >> 18) & 0x3FF));
    v74 = (v61 - v69);
    v75 = 4433 * (v48 - v53 + v72);
    v76 = v75 + 6270 * (v48 - v53);
    result[11] = *(_BYTE *)(v46 + ((v74 >> 18) & 0x3FF));
    result[1] = *(_BYTE *)(v46 + (((unint64_t)(v76 + v59) >> 18) & 0x3FF));
    LODWORD(v74) = 12998 * v53 - v63 + v66 + v70;
    result[10] = *(_BYTE *)(v46 + (((unint64_t)(v59 - v76) >> 18) & 0x3FF));
    result[2] = *(_BYTE *)(v46 + (((unint64_t)(v71 + v65) >> 18) & 0x3FF));
    result[9] = *(_BYTE *)(v46 + (((unint64_t)(v65 - v71) >> 18) & 0x3FF));
    v77 = v64 - 5540 * v48 - 16244 * v53 + v66;
    result[3] = *(_BYTE *)(v46 + (((unint64_t)(v74 + v68) >> 18) & 0x3FF));
    v78 = v75 - 15137 * v72;
    result[8] = *(_BYTE *)(v46 + (((unint64_t)(v68 - v74) >> 18) & 0x3FF));
    result[4] = *(_BYTE *)(v46 + (((unint64_t)(v78 + v60) >> 18) & 0x3FF));
    result[7] = *(_BYTE *)(v46 + (((unint64_t)(v60 - v78) >> 18) & 0x3FF));
    result[5] = *(_BYTE *)(v46 + (((unint64_t)(v77 + (_DWORD)v47) >> 18) & 0x3FF));
    result[6] = *(_BYTE *)(v46 + (((unint64_t)((_DWORD)v47 - v77) >> 18) & 0x3FF));
    v45 += 8;
  }
  while (v45 != 96);
  return result;
}

uint64_t sub_10039E9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  _BYTE *v86;
  int v87;
  unint64_t v88;
  int v89;
  int v90;
  int v91;
  uint64_t result;
  uint64_t v93;
  _DWORD v97[104];

  v5 = 0;
  v93 = *(_QWORD *)(a1 + 408);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = v8[16];
    v10 = v7[16];
    v11 = v10 * (uint64_t)v8[16];
    v12 = (int)v7[32] * (uint64_t)v8[32];
    v13 = v7[48];
    v14 = v12 + v13 * (uint64_t)v8[48];
    v15 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v16 = v12 - v13 * (uint64_t)v8[48];
    v17 = v15 + 793 * v16;
    v18 = 9465 * v14 + 11249 * v11;
    v19 = 2592 * v14 - 10258 * v11;
    v20 = 3570 * v14 - 6581 * v11;
    v21 = -9465 * v14 + 4108 * v11;
    v22 = (int)v7[8] * (uint64_t)v8[8];
    v23 = -2592 * v14 + 8672 * v11;
    v24 = (int)v7[24] * (uint64_t)v8[24];
    v25 = v8[40];
    v26 = v7[40];
    LODWORD(v8) = v8[56];
    v27 = v7[56];
    v28 = -3570 * v14 - 1396 * v11;
    v29 = 10832 * (v22 + v24);
    v30 = 9534 * (v22 + v26 * (uint64_t)v25);
    v31 = v22 + v27 * (uint64_t)(int)v8;
    v32 = v18 + v17;
    v33 = v29 - 16549 * v22 + v30 + 7682 * v31;
    v34 = v26 * (uint64_t)v25;
    v35 = v21 + v17;
    v36 = -2773 * (v24 + v34);
    v37 = -9534 * (v24 + v27 * (uint64_t)(int)v8);
    v38 = v29 + 6859 * v24 + v36 - 9534 * (v24 + v27 * (uint64_t)(int)v8);
    v39 = v27 * (uint64_t)(int)v8;
    v40 = v15 + 3989 * v16;
    v41 = v19 + v40;
    v42 = v23 + v40;
    v43 = v36 - 12879 * v34 + v30 - 5384 * (v34 + v39);
    v44 = v37 + 18068 * v39 + 7682 * v31 - 5384 * (v34 + v39);
    v45 = v16 - v10 * (uint64_t)v9;
    v46 = &v97[v5];
    v47 = v15 - 7678 * v16;
    v48 = v20 + v47;
    v49 = v28 + v47;
    *v46 = (unint64_t)(v33 + v32) >> 11;
    v46[96] = (unint64_t)(v32 - v33) >> 11;
    v46[8] = (unint64_t)(v38 + v42) >> 11;
    v46[88] = (unint64_t)(v42 - v38) >> 11;
    v46[16] = (unint64_t)(v43 + v35) >> 11;
    v50 = 7682 * (v34 - v24) + 2773 * v31;
    v46[80] = (unint64_t)(v35 - v43) >> 11;
    v46[24] = (unint64_t)(v44 + v49) >> 11;
    v46[72] = (unint64_t)(v49 - v44) >> 11;
    v51 = v50 + 2611 * v22 - 3818 * v24;
    v46[32] = (unint64_t)(v51 + v48) >> 11;
    v46[64] = (unint64_t)(v48 - v51) >> 11;
    v52 = v50 + 3150 * v34 - 14273 * v39;
    v46[40] = (unint64_t)(v52 + v41) >> 11;
    v46[56] = (unint64_t)(v41 - v52) >> 11;
    v46[48] = (unint64_t)(v15 + 11585 * v45) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v53 = 0;
  v54 = v93 - 384;
  do
  {
    v55 = &v97[v53];
    v56 = v55[1];
    v58 = v55[4];
    v57 = v55[5];
    v59 = (*v55 << 13) + 134348800;
    v60 = v55[6];
    v61 = v55[7];
    v62 = v60 + v58;
    v63 = v58 - v60;
    v64 = 9465 * (v60 + v58);
    v65 = v59 + 793 * v63;
    v67 = v55[2];
    v66 = v55[3];
    v68 = 4108 * v67 - v64;
    v69 = v64 + 11249 * v67 + v65;
    v70 = v59 + 3989 * v63;
    v71 = -2592 * v62 + 8672 * v67;
    LODWORD(v55) = 2592 * v62 - 10258 * v67;
    v62 *= 3570;
    v72 = (_DWORD)v55 + v70;
    v73 = v59 - 7678 * v63;
    v74 = -v62 - 1396 * v67;
    v75 = v62 - 6581 * v67 + v73;
    v76 = v68 + v65;
    v77 = (v59 + 11585 * (v63 - v67));
    v78 = 10832 * (v66 + v56);
    v79 = v71 + v70;
    v80 = 9534 * (v57 + v56);
    v81 = v74 + v73;
    v82 = v78 - 16549 * v56 + v80 + 7682 * (v61 + v56);
    v83 = -2773 * (v57 + v66);
    v84 = v78 + 6859 * v66 + v83 - 9534 * (v61 + v66);
    v85 = v83 - 12879 * v57 + v80 - 5384 * (v61 + v57);
    v86 = (_BYTE *)(*(_QWORD *)(a4 + v53) + a5);
    *v86 = *(_BYTE *)(v54 + (((unint64_t)(v82 + v69) >> 18) & 0x3FF));
    v86[12] = *(_BYTE *)(v54 + (((unint64_t)(v69 - v82) >> 18) & 0x3FF));
    v87 = -9534 * (v61 + v66) + 18068 * v61 + 7682 * (v61 + v56) - 5384 * (v61 + v57);
    v86[1] = *(_BYTE *)(v54 + (((unint64_t)(v84 + v79) >> 18) & 0x3FF));
    v86[11] = *(_BYTE *)(v54 + (((unint64_t)(v79 - v84) >> 18) & 0x3FF));
    v86[2] = *(_BYTE *)(v54 + (((unint64_t)(v85 + v76) >> 18) & 0x3FF));
    v88 = (v76 - v85);
    v89 = 7682 * (v57 - v66) + 2773 * (v61 + v56);
    v86[10] = *(_BYTE *)(v54 + ((v88 >> 18) & 0x3FF));
    v86[3] = *(_BYTE *)(v54 + (((unint64_t)(v87 + v81) >> 18) & 0x3FF));
    v90 = v89 + 2611 * v56 - 3818 * v66;
    v86[9] = *(_BYTE *)(v54 + (((unint64_t)(v81 - v87) >> 18) & 0x3FF));
    v86[4] = *(_BYTE *)(v54 + (((unint64_t)(v90 + v75) >> 18) & 0x3FF));
    v91 = v89 + 3150 * v57 - 14273 * v61;
    v86[8] = *(_BYTE *)(v54 + (((unint64_t)(v75 - v90) >> 18) & 0x3FF));
    result = *(unsigned __int8 *)(v54 + (((unint64_t)(v91 + v72) >> 18) & 0x3FF));
    v86[5] = result;
    v86[7] = *(_BYTE *)(v54 + (((unint64_t)(v72 - v91) >> 18) & 0x3FF));
    v86[6] = *(_BYTE *)(v54 + ((v77 >> 18) & 0x3FF));
    v53 += 8;
  }
  while (v53 != 104);
  return result;
}

uint64_t sub_10039EF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  _BYTE *v72;
  int v73;
  int v74;
  unint64_t v75;
  int v76;
  uint64_t result;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  _DWORD v85[112];

  v5 = 0;
  v82 = *(_QWORD *)(a1 + 408);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = (int)v7[32] * (uint64_t)v8[32];
    v10 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v11 = v10 + 10438 * v9;
    v12 = v10 + 2578 * v9;
    v13 = v10 - 7223 * v9;
    v14 = (int)v7[16] * (uint64_t)v8[16];
    v15 = (int)v7[48] * (uint64_t)v8[48];
    v16 = 9058 * (v14 + v15);
    v17 = v16 + 2237 * v14;
    v18 = v16 - 14084 * v15;
    v19 = 5027 * v14 - 11295 * v15;
    v20 = v17 + v11;
    v21 = v11 - v17;
    v22 = v18 + v12;
    v23 = v12 - v18;
    v24 = v19 + v13;
    v25 = v13 - v19;
    v26 = (int)v7[8] * (uint64_t)v8[8];
    v27 = (int)v7[24] * (uint64_t)v8[24];
    v28 = (int)v7[40] * (uint64_t)v8[40];
    v29 = (int)v7[56] * (uint64_t)v8[56];
    v30 = 10935 * (v26 + v27);
    v31 = 9810 * (v26 + v28);
    v32 = v30 - 9232 * v26 + v31 + (v29 << 13);
    v33 = -8192 * v29 - 1297 * (v27 + v28);
    v34 = v30 - 3474 * v27 + v33;
    v35 = v31 - 19447 * v28 + v33;
    v36 = 6164 * (v26 + v28);
    v37 = 11512 * (v28 - v27);
    v38 = v37 - 13850 * v28 + v36 + (v29 << 13);
    LODWORD(v17) = v26 - v27;
    v39 = v37 + 5529 * v27;
    v40 = -8192 * v29 + 3826 * (v26 - v27);
    v41 = v36 - 8693 * v26 + v40;
    v42 = v39 + v40;
    v43 = &v85[v5];
    *v43 = (unint64_t)(v32 + v20) >> 11;
    v43[104] = (unint64_t)(v20 - v32) >> 11;
    v43[8] = (unint64_t)(v34 + v22) >> 11;
    v43[96] = (unint64_t)(v22 - v34) >> 11;
    v43[16] = (unint64_t)(v35 + v24) >> 11;
    v44 = (unint64_t)(v10 - 11586 * v9) >> 11;
    LODWORD(v22) = 4 * (v17 - v28 + v29);
    v43[88] = (unint64_t)(v24 - v35) >> 11;
    v43[24] = v22 + v44;
    v43[80] = v44 - v22;
    v43[32] = (unint64_t)(v38 + v25) >> 11;
    v43[72] = (unint64_t)(v25 - v38) >> 11;
    v43[40] = (unint64_t)(v42 + v23) >> 11;
    v43[64] = (unint64_t)(v23 - v42) >> 11;
    v43[48] = (unint64_t)(v41 + v21) >> 11;
    v43[56] = (unint64_t)(v21 - v41) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v45 = 0;
  v46 = v82 - 384;
  do
  {
    v47 = &v85[v45];
    v48 = v47[1];
    v49 = (*v47 << 13) + 134348800;
    v51 = v47[4];
    v50 = v47[5];
    v52 = v49 + 10438 * v51;
    v53 = v49 + 2578 * v51;
    v54 = v49 - 7223 * v51;
    v56 = v47[2];
    v55 = v47[3];
    v57 = v47[6];
    v58 = v47[7];
    v59 = v49 - 11586 * v51;
    LODWORD(v47) = 9058 * (v57 + v56);
    v60 = (_DWORD)v47 + 2237 * v56;
    v61 = (_DWORD)v47 - 14084 * v57;
    LODWORD(v47) = 5027 * v56 - 11295 * v57;
    v62 = v60 + v52;
    v63 = v52 - v60;
    v64 = (_DWORD)v47 + v54;
    LODWORD(v47) = v54 - (_DWORD)v47;
    v65 = v61 + v53;
    v66 = 10935 * (v55 + v48);
    v67 = v53 - v61;
    v68 = v66 - 9232 * v48 + 9810 * (v50 + v48) + (v58 << 13);
    v69 = -8192 * v58 - 1297 * (v50 + v55);
    v70 = v66 - 3474 * v55 + v69;
    v71 = 9810 * (v50 + v48) - 19447 * v50 + v69;
    v72 = (_BYTE *)(*(_QWORD *)(a4 + v45) + a5);
    *v72 = *(_BYTE *)(v46 + (((unint64_t)(v68 + v62) >> 18) & 0x3FF));
    v72[13] = *(_BYTE *)(v46 + (((unint64_t)(v62 - v68) >> 18) & 0x3FF));
    v72[1] = *(_BYTE *)(v46 + (((unint64_t)(v70 + v65) >> 18) & 0x3FF));
    v73 = -8192 * v58 + 3826 * (v48 - v55);
    v72[12] = *(_BYTE *)(v46 + (((unint64_t)(v65 - v70) >> 18) & 0x3FF));
    v74 = v48 - v55 - v50 + v58;
    v72[2] = *(_BYTE *)(v46 + (((unint64_t)(v71 + v64) >> 18) & 0x3FF));
    v75 = (v64 - v71);
    v76 = (v58 << 13) - 13850 * v50;
    result = (6164 * (v50 + v48));
    v78 = 11512 * (v50 - v55);
    v74 <<= 13;
    v72[11] = *(_BYTE *)(v46 + ((v75 >> 18) & 0x3FF));
    v79 = v76 + v78 + result;
    v72[3] = *(_BYTE *)(v46 + (((unint64_t)(v74 + v59) >> 18) & 0x3FF));
    v72[10] = *(_BYTE *)(v46 + (((unint64_t)(v59 - v74) >> 18) & 0x3FF));
    v72[4] = *(_BYTE *)(v46 + (((unint64_t)(v79 + (_DWORD)v47) >> 18) & 0x3FF));
    v80 = result - 8693 * v48 + v73;
    v81 = v78 + 5529 * v55 + v73;
    v72[9] = *(_BYTE *)(v46 + (((unint64_t)((_DWORD)v47 - v79) >> 18) & 0x3FF));
    v72[5] = *(_BYTE *)(v46 + (((unint64_t)(v81 + v67) >> 18) & 0x3FF));
    v72[8] = *(_BYTE *)(v46 + (((unint64_t)(v67 - v81) >> 18) & 0x3FF));
    v72[6] = *(_BYTE *)(v46 + (((unint64_t)(v80 + v63) >> 18) & 0x3FF));
    v72[7] = *(_BYTE *)(v46 + (((unint64_t)(v63 - v80) >> 18) & 0x3FF));
    v45 += 8;
  }
  while (v45 != 112);
  return result;
}

uint64_t sub_10039F424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _BYTE *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  int v84;
  int v85;
  uint64_t result;
  int v87;
  int v88;
  uint64_t v89;
  _DWORD v93[120];

  v5 = 0;
  v89 = *(_QWORD *)(a1 + 408);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = (int)v7[16] * (uint64_t)v8[16];
    v10 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v11 = (int)v7[48] * (uint64_t)v8[48];
    v12 = v7[32];
    v13 = v10 - 3580 * v11;
    v14 = v10 + 9373 * v11;
    v15 = v9 - v12 * (uint64_t)v8[32];
    v16 = v9 + v12 * (uint64_t)v8[32];
    v17 = 11795 * v9;
    v18 = 374 * v15 + 10958 * v16 + v14;
    v19 = 11795 * v9 - 10958 * v16 + 374 * v15 + v13;
    v20 = -3271 * v15 - 4482 * v16 + v14;
    v21 = 4482 * v16 - v17 + -3271 * v15 + v13;
    v22 = 6476 * v16;
    v23 = 2896 * v15 + 6476 * v16 + v13;
    v24 = v14 - v22 + 2896 * v15;
    v25 = (int)v7[8] * (uint64_t)v8[8];
    v26 = (int)v7[24] * (uint64_t)v8[24];
    v27 = v8[40];
    v28 = v7[40];
    v29 = 10033 * v28 * (uint64_t)v8[40];
    v30 = (int)v7[56] * (uint64_t)v8[56];
    v31 = -11018 * v26;
    v32 = v29 + 11522 * (v25 - v30);
    v33 = 11018 * v26 + 20131 * v30 + v32;
    v34 = -6810 * v26 - 9113 * v25 + v32;
    v35 = v26 - v30;
    v36 = &v93[v5];
    v37 = 4712 * (v25 + v30);
    v38 = -6810 * v26 + 3897 * v25 - v29 + v37;
    v39 = v29 + v31 - 7121 * v30 + v37;
    *v36 = (unint64_t)(v33 + v18) >> 11;
    v36[112] = (unint64_t)(v18 - v33) >> 11;
    v40 = 6810 * (v35 + v25);
    v41 = v40 + 4209 * v25;
    v36[8] = (unint64_t)(v41 + v23) >> 11;
    v36[104] = (unint64_t)(v23 - v41) >> 11;
    v42 = v10 - 11586 * v11;
    v43 = v42 + 5792 * v15;
    v44 = 10033 * (v25 - v30 - v28 * (uint64_t)v27);
    v36[16] = (unint64_t)(v44 + v43) >> 11;
    v36[96] = (unint64_t)(v43 - v44) >> 11;
    v36[24] = (unint64_t)(v38 + v19) >> 11;
    v36[88] = (unint64_t)(v19 - v38) >> 11;
    v45 = v40 - 17828 * v35;
    v36[32] = (unint64_t)(v45 + v24) >> 11;
    v36[80] = (unint64_t)(v24 - v45) >> 11;
    v36[40] = (unint64_t)(v39 + v20) >> 11;
    v36[72] = (unint64_t)(v20 - v39) >> 11;
    v36[48] = (unint64_t)(v34 + v21) >> 11;
    v36[64] = (unint64_t)(v21 - v34) >> 11;
    v36[56] = (unint64_t)(v42 + 0x7FFFFFFD2C0 * v15) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v46 = 0;
  v47 = v89 - 384;
  do
  {
    v48 = &v93[v46];
    v49 = (_BYTE *)(*(_QWORD *)(a4 + v46) + a5);
    v50 = v48[1];
    v51 = (*v48 << 13) + 134348800;
    v52 = v48[6];
    v53 = v48[7];
    v54 = v51 - 3580 * v52;
    v55 = v51 + 9373 * v52;
    v56 = v48[2];
    v57 = v48[3];
    v58 = v48[4];
    v59 = v48[5];
    LODWORD(v48) = v51 - 11586 * v52;
    v60 = v56 - v58;
    v61 = v58 + v56;
    v56 *= 11795;
    v62 = 374 * v60 + 10958 * v61 + v55;
    v63 = v56 - 10958 * v61 + 374 * v60;
    v64 = -3271 * v60 - 4482 * v61 + v55;
    v65 = 4482 * v61 - v56 - 3271 * v60;
    v61 *= 6476;
    v66 = 2896 * v60;
    v67 = v63 + v54;
    v68 = 2896 * v60 + v61 + v54;
    v69 = v55 - v61;
    v70 = (_DWORD)v48 + 5792 * v60;
    v71 = ((_DWORD)v48 + 268423872 * v60);
    v72 = v65 + v54;
    v73 = 10033 * v59;
    v74 = v57 - v53;
    v75 = -11018 * v57;
    v76 = 10033 * v59 + 11522 * (v50 - v53);
    v77 = v69 + v66;
    v78 = 11018 * v57 + 20131 * v53 + v76;
    v79 = (v78 + v62);
    v80 = (v62 - v78);
    v81 = 6810 * (v57 - v53 + v50);
    *v49 = *(_BYTE *)(v47 + ((v79 >> 18) & 0x3FF));
    LODWORD(v79) = v81 + 4209 * v50;
    v49[14] = *(_BYTE *)(v47 + ((v80 >> 18) & 0x3FF));
    v49[1] = *(_BYTE *)(v47 + (((unint64_t)(v79 + v68) >> 18) & 0x3FF));
    v82 = 10033 * (v50 - v53 - v59);
    v49[13] = *(_BYTE *)(v47 + (((unint64_t)(v68 - v79) >> 18) & 0x3FF));
    v57 *= -6810;
    v49[2] = *(_BYTE *)(v47 + (((unint64_t)(v82 + v70) >> 18) & 0x3FF));
    LODWORD(v80) = 4712 * (v53 + v50);
    v83 = (v70 - v82);
    v84 = v57 + 3897 * v50 - v73 + v80;
    v49[12] = *(_BYTE *)(v47 + ((v83 >> 18) & 0x3FF));
    v85 = v81 - 17828 * v74;
    v49[3] = *(_BYTE *)(v47 + (((unint64_t)(v84 + v67) >> 18) & 0x3FF));
    result = (v73 + v75);
    v49[11] = *(_BYTE *)(v47 + (((unint64_t)(v67 - v84) >> 18) & 0x3FF));
    v49[4] = *(_BYTE *)(v47 + (((unint64_t)(v85 + v77) >> 18) & 0x3FF));
    v87 = result - 7121 * v53 + v80;
    v49[10] = *(_BYTE *)(v47 + (((unint64_t)(v77 - v85) >> 18) & 0x3FF));
    v49[5] = *(_BYTE *)(v47 + (((unint64_t)(v87 + v64) >> 18) & 0x3FF));
    v88 = v57 - 9113 * v50 + v76;
    v49[9] = *(_BYTE *)(v47 + (((unint64_t)(v64 - v87) >> 18) & 0x3FF));
    v49[6] = *(_BYTE *)(v47 + (((unint64_t)(v88 + v72) >> 18) & 0x3FF));
    v49[8] = *(_BYTE *)(v47 + (((unint64_t)(v72 - v88) >> 18) & 0x3FF));
    v49[7] = *(_BYTE *)(v47 + ((v71 >> 18) & 0x3FF));
    v46 += 8;
  }
  while (v46 != 120);
  return result;
}

uint64_t sub_10039F98C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t result;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  _BYTE *v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  _DWORD v117[128];

  v5 = 0;
  v110 = *(_QWORD *)(a1 + 408);
  v113 = *(_QWORD *)(a2 + 88);
  do
  {
    v6 = (_DWORD *)(v113 + 4 * v5);
    v7 = (__int16 *)(a3 + 2 * v5);
    v8 = (int)v6[32] * (uint64_t)v7[32];
    v9 = ((uint64_t)(*v6 * *v7) << 13) | 0x400;
    v10 = 10703 * v8;
    v8 *= 4433;
    v11 = v10 + v9;
    v12 = v9 - v10;
    v13 = v8 + v9;
    v14 = v9 - v8;
    v15 = (int)v6[16] * (uint64_t)v7[16];
    v16 = (int)v6[48] * (uint64_t)v7[48];
    v17 = 2260 * (v15 - v16);
    v18 = 11363 * (v15 - v16);
    v19 = v18 + 20995 * v16;
    v20 = v17 + 7373 * v15;
    v21 = v18 - 4926 * v15;
    v22 = v17 - 4176 * v16;
    v23 = v19 + v11;
    v116 = v11 - v19;
    v24 = v20 + v13;
    v115 = v13 - v20;
    v25 = v21 + v14;
    v26 = v14 - v21;
    v27 = v22 + v12;
    v28 = v12 - v22;
    v29 = (int)v6[8] * (uint64_t)v7[8];
    v30 = (int)v6[24] * (uint64_t)v7[24];
    v31 = v7[40];
    v32 = v6[40];
    v33 = v7[56];
    v34 = v6[56];
    v35 = v29 + v32 * (uint64_t)v7[40];
    v36 = 11086 * (v29 + v30);
    v37 = 10217 * v35;
    v38 = 8956 * (v29 + v34 * (uint64_t)v33);
    v39 = 7350 * (v29 - v34 * (uint64_t)v33);
    v40 = 5461 * v35;
    v41 = 3363 * (v29 - v30);
    v42 = v36 - 18730 * v29 + 10217 * v35 + v38;
    v43 = v41 - 15038 * v29 + 5461 * v35 + v39;
    v44 = 1136 * (v30 + v32 * (uint64_t)v31);
    v45 = v30 + v34 * (uint64_t)v33;
    v46 = -5461 * v45;
    v47 = v36 + 589 * v30 + v44 - 5461 * v45;
    v48 = v32 * (uint64_t)v31;
    v49 = 11529 * (v48 - v30);
    v50 = -10217 * v45;
    v51 = v41 + 16154 * v30 + v49 - 10217 * v45;
    v52 = v44 - 9222 * v48 + v37 - 11086 * (v48 + v34 * (uint64_t)v33);
    v53 = v38 - 11086 * (v48 + v34 * (uint64_t)v33);
    v54 = v34 * (uint64_t)v33;
    v55 = v46 + 8728 * v54 + v53;
    v56 = 3363 * (v54 - v48);
    v57 = v50 + 25733 * v54 + v39 + v56;
    v58 = &v117[v5];
    v59 = v49 - 6278 * v48 + v40 + v56;
    *v58 = (unint64_t)(v42 + v23) >> 11;
    v58[120] = (unint64_t)(v23 - v42) >> 11;
    v58[8] = (unint64_t)(v47 + v24) >> 11;
    v58[112] = (unint64_t)(v24 - v47) >> 11;
    v58[16] = (unint64_t)(v52 + v25) >> 11;
    v58[104] = (unint64_t)(v25 - v52) >> 11;
    v58[24] = (unint64_t)(v55 + v27) >> 11;
    v58[96] = (unint64_t)(v27 - v55) >> 11;
    v58[32] = (unint64_t)(v57 + v28) >> 11;
    v58[88] = (unint64_t)(v28 - v57) >> 11;
    v58[40] = (unint64_t)(v59 + v26) >> 11;
    v58[80] = (unint64_t)(v26 - v59) >> 11;
    v58[48] = (unint64_t)(v51 + v115) >> 11;
    v58[72] = (unint64_t)(v115 - v51) >> 11;
    v58[56] = (unint64_t)(v43 + v116) >> 11;
    v58[64] = (unint64_t)(v116 - v43) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v60 = 0;
  v61 = v110 - 384;
  do
  {
    v62 = &v117[v60];
    v63 = v62[1];
    v64 = v62[4];
    v65 = v62[5];
    v66 = (*v62 << 13) + 134348800;
    v67 = 10703 * v64;
    v64 *= 4433;
    v68 = v66 + v67;
    v69 = v66 - v67;
    v71 = v62[2];
    v70 = v62[3];
    v72 = v66 + v64;
    v73 = v62[6];
    v74 = v62[7];
    v75 = 2260 * (v71 - v73);
    v76 = v66 - v64;
    LODWORD(v62) = 11363 * (v71 - v73);
    v77 = (_DWORD)v62 + 20995 * v73;
    v78 = v75 + 7373 * v71;
    v79 = (_DWORD)v62 - 4926 * v71;
    v80 = v75 - 4176 * v73;
    v81 = v77 + v68;
    LODWORD(v62) = v68 - v77;
    v82 = v78 + v72;
    v83 = v72 - v78;
    v84 = v79 + v76;
    result = (v76 - v79);
    v86 = 11086 * (v70 + v63);
    v87 = 10217 * (v65 + v63);
    v88 = 8956 * (v74 + v63);
    v89 = v80 + v69;
    v90 = 7350 * (v63 - v74);
    v91 = 5461 * (v65 + v63);
    v92 = 3363 * (v63 - v70);
    v93 = v69 - v80;
    v94 = v86 - 18730 * v63 + v87 + v88;
    v95 = v92 - 15038 * v63 + v91 + v90;
    v96 = 1136 * (v65 + v70);
    v97 = v96 - 9222 * v65;
    v98 = v86 + 589 * v70 + v96 - 5461 * (v74 + v70);
    v99 = v97 + v87 - 11086 * (v74 + v65);
    v100 = -5461 * (v74 + v70) + 8728 * v74 + v88 - 11086 * (v74 + v65);
    v101 = (_BYTE *)(*(_QWORD *)(a4 + v60) + a5);
    *v101 = *(_BYTE *)(v61 + (((unint64_t)(v94 + v81) >> 18) & 0x3FF));
    v101[15] = *(_BYTE *)(v61 + (((unint64_t)(v81 - v94) >> 18) & 0x3FF));
    v101[1] = *(_BYTE *)(v61 + (((unint64_t)(v98 + v82) >> 18) & 0x3FF));
    v102 = -10217 * (v74 + v70);
    v103 = v102 + 25733 * v74;
    v104 = 3363 * (v74 - v65);
    v105 = v103 + v90 + v104;
    v101[14] = *(_BYTE *)(v61 + (((unint64_t)(v82 - v98) >> 18) & 0x3FF));
    v101[2] = *(_BYTE *)(v61 + (((unint64_t)(v99 + v84) >> 18) & 0x3FF));
    v101[13] = *(_BYTE *)(v61 + (((unint64_t)(v84 - v99) >> 18) & 0x3FF));
    v101[3] = *(_BYTE *)(v61 + (((unint64_t)(v100 + v89) >> 18) & 0x3FF));
    v101[12] = *(_BYTE *)(v61 + (((unint64_t)(v89 - v100) >> 18) & 0x3FF));
    v101[4] = *(_BYTE *)(v61 + (((unint64_t)(v105 + v93) >> 18) & 0x3FF));
    v106 = v92 + 16154 * v70;
    v107 = 11529 * (v65 - v70);
    v108 = v107 - 6278 * v65 + v91 + v104;
    v101[11] = *(_BYTE *)(v61 + (((unint64_t)(v93 - v105) >> 18) & 0x3FF));
    v101[5] = *(_BYTE *)(v61 + (((unint64_t)(v108 + result) >> 18) & 0x3FF));
    v109 = v106 + v107 + v102;
    v101[10] = *(_BYTE *)(v61 + (((unint64_t)(result - v108) >> 18) & 0x3FF));
    v101[6] = *(_BYTE *)(v61 + (((unint64_t)(v109 + v83) >> 18) & 0x3FF));
    v101[9] = *(_BYTE *)(v61 + (((unint64_t)(v83 - v109) >> 18) & 0x3FF));
    v101[7] = *(_BYTE *)(v61 + (((unint64_t)(v95 + (_DWORD)v62) >> 18) & 0x3FF));
    v101[8] = *(_BYTE *)(v61 + (((unint64_t)((_DWORD)v62 - v95) >> 18) & 0x3FF));
    v60 += 8;
  }
  while (v60 != 128);
  return result;
}

uint64_t sub_10039FFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  unsigned int i;
  _DWORD *v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t result;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  _BYTE *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  _BYTE v94[256];

  v5 = 0;
  v6 = (__int16 *)(a3 + 64);
  v7 = *(_QWORD *)(a2 + 88) + 128;
  v91 = *(_QWORD *)(a1 + 408);
  for (i = 9; i > 1; --i)
  {
    v9 = (_DWORD *)(v7 + v5);
    v10 = *(v6 - 16);
    if ((unsigned __int16)*(v6 - 24) | v10)
      goto LABEL_9;
    if (*(v6 - 8) || *v6 || v6[8] || v6[16] || v6[24])
    {
      v10 = 0;
LABEL_9:
      v11 = (int)*(v9 - 16) * (uint64_t)(__int16)v10;
      v12 = (int)v9[16] * (uint64_t)v6[16];
      v13 = 4433 * (v11 + v12);
      v14 = v13 + 6270 * v11;
      v15 = v13 - 15137 * v12;
      v16 = (uint64_t)(*v9 * *v6) << 13;
      v17 = ((uint64_t)(*(v9 - 32) * *(v6 - 32)) << 13) | 0x400;
      v18 = v16 + v17;
      v19 = v17 - v16;
      v20 = v18 + v14;
      v21 = v18 - v14;
      v22 = v19 + v15;
      v23 = v19 - v15;
      v24 = (int)v9[24] * (uint64_t)v6[24];
      v25 = (int)v9[8] * (uint64_t)v6[8];
      v26 = (int)*(v9 - 8) * (uint64_t)*(v6 - 8);
      v27 = (int)*(v9 - 24) * (uint64_t)*(v6 - 24);
      v28 = 9633 * (v25 + v27 + v24 + v26);
      v29 = v28 - 16069 * (v24 + v26);
      v30 = v28 - 3196 * (v25 + v27);
      v31 = -7373 * (v24 + v27);
      v32 = v31 + 2446 * v24 + v29;
      v33 = v31 + 12299 * v27 + v30;
      v34 = -20995 * (v25 + v26);
      v35 = v34 + 16819 * v25 + v30;
      v36 = v34 + 25172 * v26 + v29;
      v37 = &v94[v5];
      *v37 = (unint64_t)(v33 + v20) >> 11;
      v37[56] = (unint64_t)(v20 - v33) >> 11;
      v37[8] = (unint64_t)(v36 + v22) >> 11;
      v37[48] = (unint64_t)(v22 - v36) >> 11;
      v37[16] = (unint64_t)(v35 + v23) >> 11;
      v37[40] = (unint64_t)(v23 - v35) >> 11;
      v37[24] = (unint64_t)(v32 + v21) >> 11;
      v38 = (unint64_t)(v21 - v32) >> 11;
      v39 = 32;
      goto LABEL_10;
    }
    LODWORD(v38) = 4 * *(v6 - 32) * *(v9 - 32);
    v40 = &v94[v5];
    *v40 = v38;
    v40[8] = v38;
    v40[16] = v38;
    v40[24] = v38;
    v40[32] = v38;
    v40[40] = v38;
    v40[48] = v38;
    v39 = 56;
LABEL_10:
    *(_DWORD *)&v94[4 * v39 + v5] = v38;
    v5 += 4;
    ++v6;
  }
  v41 = 0;
  v42 = v91 - 384;
  do
  {
    v43 = &v94[4 * v41];
    v44 = v43[1];
    v45 = v43[4];
    v46 = v43[5];
    v47 = (*v43 << 13) + 134348800;
    v48 = 10703 * v45;
    v45 *= 4433;
    v49 = v47 + v48;
    v50 = v47 - v48;
    v52 = v43[2];
    v51 = v43[3];
    v53 = v47 + v45;
    v54 = v43[6];
    v55 = v43[7];
    v56 = 2260 * (v52 - v54);
    v57 = v47 - v45;
    LODWORD(v43) = 11363 * (v52 - v54);
    v58 = (_DWORD)v43 + 20995 * v54;
    v59 = v56 + 7373 * v52;
    v60 = (_DWORD)v43 - 4926 * v52;
    v61 = v56 - 4176 * v54;
    v62 = v58 + v49;
    LODWORD(v43) = v49 - v58;
    v63 = v59 + v53;
    v64 = v53 - v59;
    v65 = v60 + v57;
    result = (v57 - v60);
    v67 = 11086 * (v51 + v44);
    v68 = 10217 * (v46 + v44);
    v69 = 8956 * (v55 + v44);
    v70 = v61 + v50;
    v71 = 7350 * (v44 - v55);
    v72 = 5461 * (v46 + v44);
    v73 = 3363 * (v44 - v51);
    v74 = v50 - v61;
    v75 = v67 - 18730 * v44 + v68 + v69;
    v76 = v73 - 15038 * v44 + v72 + v71;
    v77 = 1136 * (v46 + v51);
    v78 = v77 - 9222 * v46;
    v79 = v67 + 589 * v51 + v77 - 5461 * (v55 + v51);
    v80 = v78 + v68 - 11086 * (v55 + v46);
    v81 = -5461 * (v55 + v51) + 8728 * v55 + v69 - 11086 * (v55 + v46);
    v82 = (_BYTE *)(*(_QWORD *)(a4 + v41) + a5);
    *v82 = *(_BYTE *)(v42 + (((unint64_t)(v75 + v62) >> 18) & 0x3FF));
    v82[15] = *(_BYTE *)(v42 + (((unint64_t)(v62 - v75) >> 18) & 0x3FF));
    v82[1] = *(_BYTE *)(v42 + (((unint64_t)(v79 + v63) >> 18) & 0x3FF));
    v83 = -10217 * (v55 + v51);
    v84 = v83 + 25733 * v55;
    v85 = 3363 * (v55 - v46);
    v86 = v84 + v71 + v85;
    v82[14] = *(_BYTE *)(v42 + (((unint64_t)(v63 - v79) >> 18) & 0x3FF));
    v82[2] = *(_BYTE *)(v42 + (((unint64_t)(v80 + v65) >> 18) & 0x3FF));
    v82[13] = *(_BYTE *)(v42 + (((unint64_t)(v65 - v80) >> 18) & 0x3FF));
    v82[3] = *(_BYTE *)(v42 + (((unint64_t)(v81 + v70) >> 18) & 0x3FF));
    v82[12] = *(_BYTE *)(v42 + (((unint64_t)(v70 - v81) >> 18) & 0x3FF));
    v82[4] = *(_BYTE *)(v42 + (((unint64_t)(v86 + v74) >> 18) & 0x3FF));
    v87 = v73 + 16154 * v51;
    v88 = 11529 * (v46 - v51);
    v89 = v88 - 6278 * v46 + v72 + v85;
    v82[11] = *(_BYTE *)(v42 + (((unint64_t)(v74 - v86) >> 18) & 0x3FF));
    v82[5] = *(_BYTE *)(v42 + (((unint64_t)(v89 + result) >> 18) & 0x3FF));
    v90 = v87 + v88 + v83;
    v82[10] = *(_BYTE *)(v42 + (((unint64_t)(result - v89) >> 18) & 0x3FF));
    v82[6] = *(_BYTE *)(v42 + (((unint64_t)(v90 + v64) >> 18) & 0x3FF));
    v82[9] = *(_BYTE *)(v42 + (((unint64_t)(v64 - v90) >> 18) & 0x3FF));
    v82[7] = *(_BYTE *)(v42 + (((unint64_t)(v76 + (_DWORD)v43) >> 18) & 0x3FF));
    v82[8] = *(_BYTE *)(v42 + (((unint64_t)((_DWORD)v43 - v76) >> 18) & 0x3FF));
    v41 += 8;
  }
  while (v41 != 64);
  return result;
}

uint64_t sub_1003A051C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  _BYTE *v59;
  int v60;
  int v61;
  unint64_t v62;
  int v63;
  uint64_t result;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  _DWORD v72[56];

  v5 = 0;
  v69 = *(_QWORD *)(a1 + 408);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = &v72[v5];
    v8 = (_DWORD *)(v6 + 4 * v5);
    v9 = (__int16 *)(a3 + 2 * v5);
    v10 = ((uint64_t)(*v8 * *v9) << 13) | 0x400;
    v11 = (int)v8[16] * (uint64_t)v9[16];
    v12 = (int)v8[32] * (uint64_t)v9[32];
    v13 = (int)v8[48] * (uint64_t)v9[48];
    v14 = 7223 * (v12 - v13);
    v15 = 2578 * (v11 - v12);
    v16 = v10 - 15083 * v12 + v15 + v14;
    v17 = v10 + 10438 * (v11 + v13);
    v18 = v14 - 637 * v13 + v17;
    v19 = v15 - 20239 * v11 + v17;
    v20 = v10 + 11585 * (v12 - (v11 + v13));
    v21 = (int)v8[8] * (uint64_t)v9[8];
    v22 = (int)v8[24] * (uint64_t)v9[24];
    v23 = (int)v8[40] * (uint64_t)v9[40];
    v24 = 7663 * (v21 + v22);
    v25 = 1395 * (v21 - v22);
    v26 = v24 - v25;
    v27 = v24 + v25 - 11295 * (v22 + v23);
    v28 = 5027 * (v21 + v23);
    v29 = v28 + v26;
    v30 = v28 + 15326 * v23 - 11295 * (v22 + v23);
    *v7 = (unint64_t)(v29 + v18) >> 11;
    v7[48] = (unint64_t)(v18 - v29) >> 11;
    v7[8] = (unint64_t)(v27 + v16) >> 11;
    v7[40] = (unint64_t)(v16 - v27) >> 11;
    v7[16] = (unint64_t)(v30 + v19) >> 11;
    v7[32] = (unint64_t)(v19 - v30) >> 11;
    v7[24] = v20 >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v31 = 0;
  v32 = v69 - 384;
  do
  {
    v33 = &v72[v31];
    v34 = v33[1];
    v35 = (*v33 << 13) + 134348800;
    v36 = v33[4];
    v37 = v33[5];
    v38 = v35 + 10438 * v36;
    v39 = v35 + 2578 * v36;
    v40 = v35 - 7223 * v36;
    v42 = v33[2];
    v41 = v33[3];
    v43 = v33[6];
    v44 = v33[7];
    v45 = v35 - 11586 * v36;
    LODWORD(v33) = 9058 * (v43 + v42);
    v46 = (_DWORD)v33 + 2237 * v42;
    v47 = (_DWORD)v33 - 14084 * v43;
    LODWORD(v33) = 5027 * v42 - 11295 * v43;
    v48 = v46 + v38;
    v49 = v38 - v46;
    v50 = (_DWORD)v33 + v40;
    LODWORD(v33) = v40 - (_DWORD)v33;
    v51 = v44 << 13;
    v52 = v47 + v39;
    v53 = 10935 * (v41 + v34);
    v54 = v39 - v47;
    v55 = v53 - 9232 * v34 + 9810 * (v37 + v34) + (v44 << 13);
    v56 = -8192 * v44 - 1297 * (v37 + v41);
    v57 = v53 - 3474 * v41 + v56;
    v58 = 9810 * (v37 + v34) - 19447 * v37 + v56;
    v59 = (_BYTE *)(*(_QWORD *)(a4 + v31) + a5);
    *v59 = *(_BYTE *)(v32 + (((unint64_t)(v55 + v48) >> 18) & 0x3FF));
    v59[13] = *(_BYTE *)(v32 + (((unint64_t)(v48 - v55) >> 18) & 0x3FF));
    v59[1] = *(_BYTE *)(v32 + (((unint64_t)(v57 + v52) >> 18) & 0x3FF));
    LOBYTE(v48) = *(_BYTE *)(v32 + (((unint64_t)(v52 - v57) >> 18) & 0x3FF));
    v60 = -8192 * v44 + 3826 * (v34 - v41);
    v59[12] = v48;
    v61 = v34 - v41 - v37 + v44;
    v59[2] = *(_BYTE *)(v32 + (((unint64_t)(v58 + v50) >> 18) & 0x3FF));
    v62 = (v50 - v58);
    v63 = v51 - 13850 * v37;
    result = (6164 * (v37 + v34));
    v65 = 11512 * (v37 - v41);
    v61 <<= 13;
    v59[11] = *(_BYTE *)(v32 + ((v62 >> 18) & 0x3FF));
    v66 = v63 + v65 + result;
    v59[3] = *(_BYTE *)(v32 + (((unint64_t)(v61 + v45) >> 18) & 0x3FF));
    v59[10] = *(_BYTE *)(v32 + (((unint64_t)(v45 - v61) >> 18) & 0x3FF));
    v59[4] = *(_BYTE *)(v32 + (((unint64_t)(v66 + (_DWORD)v33) >> 18) & 0x3FF));
    v67 = result - 8693 * v34 + v60;
    v68 = v65 + 5529 * v41 + v60;
    v59[9] = *(_BYTE *)(v32 + (((unint64_t)((_DWORD)v33 - v66) >> 18) & 0x3FF));
    v59[5] = *(_BYTE *)(v32 + (((unint64_t)(v68 + v54) >> 18) & 0x3FF));
    v59[8] = *(_BYTE *)(v32 + (((unint64_t)(v54 - v68) >> 18) & 0x3FF));
    v59[6] = *(_BYTE *)(v32 + (((unint64_t)(v67 + v49) >> 18) & 0x3FF));
    v59[7] = *(_BYTE *)(v32 + (((unint64_t)(v49 - v67) >> 18) & 0x3FF));
    v31 += 8;
  }
  while (v31 != 56);
  return result;
}

uint64_t sub_1003A094C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  _BYTE *v52;
  unint64_t v53;
  uint64_t result;
  int v55;
  int v56;
  int v57;
  int v58;
  _DWORD v59[48];

  v5 = 0;
  v6 = *(_QWORD *)(a1 + 408);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = &v59[v5];
    v9 = (_DWORD *)(v7 + 4 * v5);
    v10 = (__int16 *)(a3 + 2 * v5);
    v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    v12 = (int)v9[32] * (uint64_t)v10[32];
    v13 = v11 + 5793 * v12;
    v14 = (unint64_t)(v11 - 11586 * v12) >> 11;
    v15 = 10033 * (int)v9[16] * (uint64_t)v10[16];
    v16 = v15 + v13;
    v17 = v13 - v15;
    v18 = (int)v9[8] * (uint64_t)v10[8];
    v19 = (int)v9[24] * (uint64_t)v10[24];
    v20 = (int)v9[40] * (uint64_t)v10[40];
    v21 = 2998 * (v18 + v20);
    v22 = v21 + ((v18 + v19) << 13);
    v23 = v21 + ((v20 - v19) << 13);
    LODWORD(v18) = 4 * (v18 - (v19 + v20));
    *v8 = (unint64_t)(v22 + v16) >> 11;
    v8[40] = (unint64_t)(v16 - v22) >> 11;
    v8[8] = v18 + v14;
    v8[32] = v14 - v18;
    v8[16] = (unint64_t)(v23 + v17) >> 11;
    v8[24] = (unint64_t)(v17 - v23) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v24 = 0;
  v25 = v6 - 384;
  do
  {
    v26 = &v59[v24];
    v27 = v26[1];
    v28 = (*v26 << 13) + 134348800;
    v29 = v26[5];
    v30 = 10033 * v26[4];
    v31 = v28 + v30;
    v33 = v26[6];
    v32 = v26[7];
    v34 = v33 << 13;
    v35 = v26[2];
    v36 = v26[3];
    v37 = v28 - v30;
    LODWORD(v26) = (v35 - v33) << 13;
    v38 = (_DWORD)v26 + v28;
    v39 = v28 - (_DWORD)v26;
    LODWORD(v26) = v34 + 11190 * v35;
    v40 = (_DWORD)v26 + v31;
    LODWORD(v26) = v31 - (_DWORD)v26;
    v41 = 2998 * v35 - v34;
    v42 = 10703 * v36;
    v43 = -4433 * v36;
    v44 = v41 + v37;
    v45 = 7053 * (v29 + v27 + v32);
    v46 = v45 + 2139 * (v29 + v27);
    v47 = v37 - v41;
    v48 = 10703 * v36 + 2295 * v27 + v46;
    v49 = -8565 * (v32 + v29);
    v50 = -4433 * v36 - 12112 * v29 - 8565 * (v32 + v29) + v46;
    v51 = v36 - v29;
    v52 = (_BYTE *)(*(_QWORD *)(a4 + v24) + a5);
    *v52 = *(_BYTE *)(v25 + (((unint64_t)(v48 + v40) >> 18) & 0x3FF));
    v53 = (v40 - v48);
    result = (4433 * (v27 - v32 + v51));
    v55 = result + 6270 * (v27 - v32);
    v52[11] = *(_BYTE *)(v25 + ((v53 >> 18) & 0x3FF));
    v52[1] = *(_BYTE *)(v25 + (((unint64_t)(v55 + v38) >> 18) & 0x3FF));
    v56 = 12998 * v32 - v42 + v45 + v49;
    v52[10] = *(_BYTE *)(v25 + (((unint64_t)(v38 - v55) >> 18) & 0x3FF));
    v52[2] = *(_BYTE *)(v25 + (((unint64_t)(v50 + v44) >> 18) & 0x3FF));
    v52[9] = *(_BYTE *)(v25 + (((unint64_t)(v44 - v50) >> 18) & 0x3FF));
    v57 = v43 - 5540 * v27 - 16244 * v32 + v45;
    v52[3] = *(_BYTE *)(v25 + (((unint64_t)(v56 + v47) >> 18) & 0x3FF));
    LOBYTE(v47) = *(_BYTE *)(v25 + (((unint64_t)(v47 - v56) >> 18) & 0x3FF));
    v58 = result - 15137 * v51;
    v52[8] = v47;
    v52[4] = *(_BYTE *)(v25 + (((unint64_t)(v58 + v39) >> 18) & 0x3FF));
    v52[7] = *(_BYTE *)(v25 + (((unint64_t)(v39 - v58) >> 18) & 0x3FF));
    v52[5] = *(_BYTE *)(v25 + (((unint64_t)(v57 + (_DWORD)v26) >> 18) & 0x3FF));
    v52[6] = *(_BYTE *)(v25 + (((unint64_t)((_DWORD)v26 - v57) >> 18) & 0x3FF));
    v24 += 8;
  }
  while (v24 != 48);
  return result;
}

uint64_t sub_1003A0CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _DWORD *v28;
  _BYTE *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  _DWORD v55[40];

  v5 = 0;
  v6 = *(_QWORD *)(a1 + 408);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = &v55[v5];
    v9 = (_DWORD *)(v7 + 4 * v5);
    v10 = (__int16 *)(a3 + 2 * v5);
    v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    v12 = (int)v9[16] * (uint64_t)v10[16];
    v13 = v9[32];
    v14 = 6476 * (v12 + v13 * (uint64_t)v10[32]);
    v15 = v12 - v13 * (uint64_t)v10[32];
    v16 = v11 + 2896 * v15;
    v17 = v16 + v14;
    v18 = v16 - v14;
    v19 = v11 + 0x7FFFFFFD2C0 * v15;
    v20 = (int)v9[8] * (uint64_t)v10[8];
    v21 = (int)v9[24] * (uint64_t)v10[24];
    v22 = 6810 * (v20 + v21);
    v23 = v22 + 4209 * v20;
    v24 = v22 - 17828 * v21;
    *v8 = (unint64_t)(v23 + v17) >> 11;
    v8[32] = (unint64_t)(v17 - v23) >> 11;
    v8[8] = (unint64_t)(v24 + v18) >> 11;
    v8[24] = (unint64_t)(v18 - v24) >> 11;
    v8[16] = v19 >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v25 = 0;
  v26 = v6 - 384;
  result = 2531;
  do
  {
    v28 = &v55[v25];
    v29 = (_BYTE *)(*(_QWORD *)(a4 + v25) + a5);
    v30 = v28[1];
    v31 = (*v28 << 13) + 134348800;
    v32 = v28[4];
    v33 = v28[5];
    v34 = v31 + 9373 * v32;
    v35 = v31 - 3580 * v32;
    v36 = v31 - 11586 * v32;
    v38 = v28[2];
    v37 = v28[3];
    v39 = v28[6];
    v40 = v28[7];
    LODWORD(v28) = 6810 * (v39 + v38);
    v41 = (_DWORD)v28 + 4209 * v38;
    v42 = (_DWORD)v28 - 17828 * v39;
    v43 = v41 + v34;
    LODWORD(v28) = v34 - v41;
    v44 = v42 + v35;
    v45 = v35 - v42;
    v46 = v40 + v37;
    v47 = v37 - v40;
    v48 = (v33 << 13) + 2531 * v47;
    v49 = (v33 << 13) - 6627 * v47;
    v50 = v30 - v33 - v47;
    v51 = 7791 * v46 + 11443 * v30 + v48;
    v52 = 1812 * v30 - 7791 * v46 + v48;
    *v29 = *(_BYTE *)(v26 + (((unint64_t)(v51 + v43) >> 18) & 0x3FF));
    v53 = (v43 - v51);
    v54 = 10323 * v30 - (4815 * v46 + v49);
    v29[9] = *(_BYTE *)(v26 + ((v53 >> 18) & 0x3FF));
    v29[1] = *(_BYTE *)(v26 + (((unint64_t)(v54 + v44) >> 18) & 0x3FF));
    v50 <<= 13;
    v29[8] = *(_BYTE *)(v26 + (((unint64_t)(v44 - v54) >> 18) & 0x3FF));
    v29[2] = *(_BYTE *)(v26 + (((unint64_t)(v50 + v36) >> 18) & 0x3FF));
    LODWORD(v53) = 5260 * v30 - 4815 * v46 + v49;
    v29[7] = *(_BYTE *)(v26 + (((unint64_t)(v36 - v50) >> 18) & 0x3FF));
    v29[3] = *(_BYTE *)(v26 + (((unint64_t)(v53 + v45) >> 18) & 0x3FF));
    v29[6] = *(_BYTE *)(v26 + (((unint64_t)(v45 - v53) >> 18) & 0x3FF));
    v29[4] = *(_BYTE *)(v26 + (((unint64_t)(v52 + (_DWORD)v28) >> 18) & 0x3FF));
    v29[5] = *(_BYTE *)(v26 + (((unint64_t)((_DWORD)v28 - v52) >> 18) & 0x3FF));
    v25 += 8;
  }
  while (v25 != 40);
  return result;
}

uint64_t sub_1003A0F9C(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t result;
  _DWORD *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  _BYTE *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  _DWORD v98[32];

  v5 = 0;
  v6 = *(_DWORD **)(a2 + 88);
  v7 = *v6 * *a3;
  v8 = v6[16] * a3[16];
  v9 = (int)v6[8] * (uint64_t)a3[8];
  v10 = (int)v6[24] * (uint64_t)a3[24];
  v11 = 4433 * (v9 + v10) + 1024;
  v12 = 4 * (v8 + v7);
  v13 = 4 * (v7 - v8);
  v14 = (unint64_t)(v11 + 6270 * v9) >> 11;
  v15 = (unint64_t)(v11 - 15137 * v10) >> 11;
  LODWORD(v11) = v14 + v12;
  LODWORD(v14) = v12 - v14;
  v16 = v15 + v13;
  LODWORD(v15) = v13 - v15;
  v17 = v6[1] * a3[1];
  v18 = v6[17] * a3[17];
  v19 = 4 * (v18 + v17);
  v20 = 4 * (v17 - v18);
  v21 = (int)v6[9] * (uint64_t)a3[9];
  v22 = (int)v6[25] * (uint64_t)a3[25];
  v23 = 4433 * (v21 + v22) + 1024;
  v24 = (unint64_t)(v23 + 6270 * v21) >> 11;
  v25 = (unint64_t)(v23 - 15137 * v22) >> 11;
  v98[0] = v11;
  v98[1] = v24 + v19;
  v98[24] = v14;
  v98[25] = v19 - v24;
  v98[8] = v16;
  v98[9] = v25 + v20;
  v98[16] = v15;
  v98[17] = v20 - v25;
  v26 = v6[2] * a3[2];
  LODWORD(v24) = v6[18] * a3[18];
  LODWORD(v14) = 4 * (v24 + v26);
  v27 = 4 * (v26 - v24);
  v28 = (int)v6[10] * (uint64_t)a3[10];
  v29 = (int)v6[26] * (uint64_t)a3[26];
  v30 = 4433 * (v28 + v29) + 1024;
  v31 = (unint64_t)(v30 + 6270 * v28) >> 11;
  v32 = (unint64_t)(v30 - 15137 * v29) >> 11;
  v33 = v31 + v14;
  LODWORD(v31) = v14 - v31;
  LODWORD(v14) = v32 + v27;
  v34 = v27 - v32;
  LODWORD(v25) = v6[3] * a3[3];
  v35 = v6[19] * a3[19];
  LODWORD(v32) = 4 * (v35 + v25);
  LODWORD(v25) = 4 * (v25 - v35);
  v36 = (int)v6[11] * (uint64_t)a3[11];
  v37 = (int)v6[27] * (uint64_t)a3[27];
  v38 = 4433 * (v36 + v37) + 1024;
  v39 = (unint64_t)(v38 + 6270 * v36) >> 11;
  v40 = (unint64_t)(v38 - 15137 * v37) >> 11;
  v98[2] = v33;
  v98[3] = v39 + v32;
  v98[26] = v31;
  v98[27] = v32 - v39;
  v98[10] = v14;
  v98[11] = v40 + v25;
  v98[18] = v34;
  v98[19] = v25 - v40;
  v41 = v6[4] * a3[4];
  LODWORD(v31) = v6[20] * a3[20];
  LODWORD(v14) = 4 * (v31 + v41);
  v42 = 4 * (v41 - v31);
  v43 = (int)v6[12] * (uint64_t)a3[12];
  v44 = (int)v6[28] * (uint64_t)a3[28];
  v45 = 4433 * (v43 + v44) + 1024;
  v46 = (unint64_t)(v45 + 6270 * v43) >> 11;
  v47 = (unint64_t)(v45 - 15137 * v44) >> 11;
  v48 = v46 + v14;
  LODWORD(v46) = v14 - v46;
  LODWORD(v14) = v47 + v42;
  v49 = v42 - v47;
  LODWORD(v25) = v6[5] * a3[5];
  LODWORD(v39) = v6[21] * a3[21];
  LODWORD(v47) = 4 * (v39 + v25);
  LODWORD(v25) = 4 * (v25 - v39);
  v50 = (int)v6[13] * (uint64_t)a3[13];
  v51 = (int)v6[29] * (uint64_t)a3[29];
  v52 = 4433 * (v50 + v51) + 1024;
  v53 = (unint64_t)(v52 + 6270 * v50) >> 11;
  v54 = (unint64_t)(v52 - 15137 * v51) >> 11;
  v98[4] = v48;
  v98[5] = v53 + v47;
  v98[28] = v46;
  v98[29] = v47 - v53;
  v98[12] = v14;
  v98[13] = v54 + v25;
  LODWORD(v46) = v25 - v54;
  LODWORD(v25) = v6[6] * a3[6];
  LODWORD(v14) = v6[22] * a3[22];
  LODWORD(v47) = v14 + v25;
  LODWORD(v25) = v25 - v14;
  v55 = (int)v6[14] * (uint64_t)a3[14];
  v56 = (int)v6[30] * (uint64_t)a3[30];
  LODWORD(v47) = 4 * v47;
  LODWORD(v25) = 4 * v25;
  v57 = 4433 * (v55 + v56) + 1024;
  v58 = (unint64_t)(v57 + 6270 * v55) >> 11;
  v59 = (unint64_t)(v57 - 15137 * v56) >> 11;
  LODWORD(v51) = v58 + v47;
  LODWORD(v58) = v47 - v58;
  LODWORD(v47) = v59 + v25;
  LODWORD(v59) = v25 - v59;
  LODWORD(v25) = v6[7] * a3[7];
  LODWORD(v53) = v6[23] * a3[23];
  LODWORD(v54) = v53 + v25;
  LODWORD(v25) = v25 - v53;
  v60 = (int)v6[15] * (uint64_t)a3[15];
  v61 = (int)v6[31] * (uint64_t)a3[31];
  v62 = 4433 * (v60 + v61) + 1024;
  v63 = *(_QWORD *)(a1 + 408);
  LODWORD(v25) = 4 * v25;
  v64 = (unint64_t)(v62 + 6270 * v60) >> 11;
  v65 = (unint64_t)(v62 - 15137 * v61) >> 11;
  v66 = v64 + 4 * v54;
  v67 = 4 * v54 - v64;
  LODWORD(v64) = v65 + v25;
  v98[20] = v49;
  v98[21] = v46;
  v98[6] = v51;
  v98[7] = v66;
  LODWORD(v54) = v25 - v65;
  v68 = v63 - 384;
  v98[30] = v58;
  v98[31] = v67;
  v98[14] = v47;
  v98[15] = v64;
  result = 4294964100;
  v98[22] = v59;
  v98[23] = v54;
  do
  {
    v70 = &v98[v5];
    v71 = v70[1];
    v72 = v70[4];
    v73 = v70[5];
    v74 = *v70 + 16400;
    v75 = v74 + v72;
    v76 = v74 - v72;
    v77 = v70[6];
    v78 = v70[7];
    v75 <<= 13;
    v79 = v70[2];
    LODWORD(v70) = v70[3];
    v80 = 4433 * (v77 + v79);
    v81 = v80 + 6270 * v79;
    v82 = v80 - 15137 * v77;
    v83 = (_DWORD)v70 + v78;
    v84 = v71 + v73;
    v85 = -7373 * (v71 + v78);
    v86 = v85 + 2446 * v78;
    v87 = v85 + 12299 * v71;
    v88 = 9633 * (v71 + v73 + v83);
    v89 = v88 - 3196 * v84;
    v90 = v87 + v89;
    v91 = v88 - 16069 * v83;
    v92 = -20995 * ((_DWORD)v70 + v73);
    v93 = (_BYTE *)(*(_QWORD *)(a4 + v5) + a5);
    v94 = v76 << 13;
    *v93 = *(_BYTE *)(v68 + (((unint64_t)(v90 + v81 + v75) >> 18) & 0x3FF));
    v95 = v82 + (v76 << 13);
    LODWORD(v70) = v92 + 25172 * (_DWORD)v70 + v91;
    v96 = v94 - v82;
    v93[7] = *(_BYTE *)(v68 + (((unint64_t)(v81 + v75 - v90) >> 18) & 0x3FF));
    v97 = v92 + 16819 * v73 + v89;
    v93[1] = *(_BYTE *)(v68 + (((unint64_t)((_DWORD)v70 + v95) >> 18) & 0x3FF));
    v93[6] = *(_BYTE *)(v68 + (((unint64_t)(v95 - (_DWORD)v70) >> 18) & 0x3FF));
    v93[2] = *(_BYTE *)(v68 + (((unint64_t)(v97 + v96) >> 18) & 0x3FF));
    v93[5] = *(_BYTE *)(v68 + (((unint64_t)(v96 - v97) >> 18) & 0x3FF));
    v93[3] = *(_BYTE *)(v68 + (((unint64_t)(v86 + v91 + v75 - v81) >> 18) & 0x3FF));
    v93[4] = *(_BYTE *)(v68 + (((unint64_t)(v75 - v81 - (v86 + v91)) >> 18) & 0x3FF));
    v5 += 8;
  }
  while (v5 != 32);
  return result;
}

uint64_t sub_1003A14D0(uint64_t a1, uint64_t a2, __int16 *a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  _BYTE *v57;
  int v58;
  _BYTE *v59;
  int v60;
  int v61;
  int v62;
  unint64_t v63;
  _BYTE *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unint64_t v70;
  uint64_t result;
  unsigned int v72;
  int v73;
  unint64_t v74;

  v5 = *(_QWORD *)(a1 + 408);
  v6 = *(_DWORD **)(a2 + 88);
  v7 = ((*v6 * *a3) << 13) | 0x400;
  v8 = v6[16] * a3[16];
  v9 = v7 + 5793 * v8;
  v10 = v7 - 11586 * v8;
  v11 = 10033 * v6[8] * a3[8];
  v12 = v11 + v9;
  v13 = v9 - v11;
  v14 = ((uint64_t)(v6[1] * a3[1]) << 13) | 0x400;
  v15 = (int)v6[17] * (uint64_t)a3[17];
  v16 = v14 + 5793 * v15;
  v17 = v14 + 0x7FFFFFFD2BELL * v15;
  v18 = 10033 * (int)v6[9] * (uint64_t)a3[9];
  v19 = v18 + v16;
  v74 = v16 - v18;
  v20 = ((uint64_t)(v6[2] * a3[2]) << 13) | 0x400;
  v21 = (int)v6[18] * (uint64_t)a3[18];
  v22 = v20 + 5793 * v21;
  v23 = v20 + 0x7FFFFFFD2BELL * v21;
  v24 = 10033 * (int)v6[10] * (uint64_t)a3[10];
  v25 = (unint64_t)(v24 + v22) >> 11;
  v26 = (unint64_t)(v22 - v24) >> 11;
  v27 = v23 >> 11;
  v28 = ((uint64_t)(v6[3] * a3[3]) << 13) | 0x400;
  v29 = (int)v6[19] * (uint64_t)a3[19];
  v30 = v28 + 5793 * v29;
  v31 = v28 + 0x7FFFFFFD2BELL * v29;
  v32 = 10033 * (int)v6[11] * (uint64_t)a3[11];
  v33 = v32 + v30;
  v34 = v30 - v32;
  v35 = v6[5];
  v36 = ((uint64_t)(v6[4] * a3[4]) << 13) | 0x400;
  v37 = v6[21];
  v38 = (int)v6[20] * (uint64_t)a3[20];
  v39 = v36 + 5793 * v38;
  v40 = v6[13];
  v41 = 10033 * (int)v6[12] * (uint64_t)a3[12];
  v42 = (unint64_t)(v41 + v39) >> 11;
  v43 = (unint64_t)(v39 - v41) >> 11;
  v44 = (unint64_t)(v36 + 0x7FFFFFFD2BELL * v38) >> 11;
  v45 = ((uint64_t)(v35 * a3[5]) << 13) | 0x400;
  v46 = v37 * (uint64_t)a3[21];
  v47 = v45 + 5793 * v46;
  v48 = v45 + 0x7FFFFFFD2BELL * v46;
  v49 = 10033 * v40 * (uint64_t)a3[13];
  v50 = v49 + v47;
  v51 = v47 - v49;
  v5 -= 384;
  v52 = (v12 >> 11 << 13) + 134348800;
  v53 = v52 + 5793 * v42;
  v54 = v52 - 11586 * v42;
  LODWORD(v25) = 10033 * v25;
  LODWORD(v42) = v53 + v25;
  LODWORD(v25) = v53 - v25;
  v33 >>= 11;
  v50 >>= 11;
  v55 = 2998 * (v50 + (v19 >> 11));
  v56 = v55 + (((_DWORD)v33 + (v19 >> 11)) << 13);
  v57 = (_BYTE *)(*a4 + a5);
  *v57 = *(_BYTE *)(v5 + (((unint64_t)(v56 + v42) >> 18) & 0x3FF));
  LODWORD(v18) = ((v19 >> 11) - ((_DWORD)v33 + (_DWORD)v50)) << 13;
  v57[5] = *(_BYTE *)(v5 + (((unint64_t)(v42 - v56) >> 18) & 0x3FF));
  v57[1] = *(_BYTE *)(v5 + (((unint64_t)(v18 + v54) >> 18) & 0x3FF));
  LOBYTE(v18) = *(_BYTE *)(v5 + (((unint64_t)(v54 - v18) >> 18) & 0x3FF));
  v58 = v55 + (((_DWORD)v50 - (_DWORD)v33) << 13);
  v57[4] = v18;
  v57[2] = *(_BYTE *)(v5 + (((unint64_t)(v58 + v25) >> 18) & 0x3FF));
  v57[3] = *(_BYTE *)(v5 + (((unint64_t)(v25 - v58) >> 18) & 0x3FF));
  v59 = (_BYTE *)(a4[1] + a5);
  v60 = (v10 >> 11 << 13) + 134348800;
  v61 = v60 + 5793 * v44;
  v62 = v60 - 11586 * v44;
  LODWORD(v27) = 10033 * v27;
  LODWORD(v44) = v61 + v27;
  LODWORD(v27) = v61 - v27;
  v17 >>= 11;
  v31 >>= 11;
  v63 = v48 >> 11;
  LODWORD(v48) = 2998 * ((v48 >> 11) + v17);
  LODWORD(v25) = v48 + (((_DWORD)v31 + (_DWORD)v17) << 13);
  LODWORD(v48) = v48 + (((_DWORD)v63 - (_DWORD)v31) << 13);
  LODWORD(v17) = ((_DWORD)v17 - ((_DWORD)v31 + (_DWORD)v63)) << 13;
  *v59 = *(_BYTE *)(v5 + (((unint64_t)(v25 + v44) >> 18) & 0x3FF));
  v59[5] = *(_BYTE *)(v5 + (((unint64_t)(v44 - v25) >> 18) & 0x3FF));
  v59[1] = *(_BYTE *)(v5 + (((unint64_t)(v17 + v62) >> 18) & 0x3FF));
  v59[4] = *(_BYTE *)(v5 + (((unint64_t)(v62 - v17) >> 18) & 0x3FF));
  v59[2] = *(_BYTE *)(v5 + (((unint64_t)(v48 + v27) >> 18) & 0x3FF));
  v59[3] = *(_BYTE *)(v5 + (((unint64_t)(v27 - v48) >> 18) & 0x3FF));
  v64 = (_BYTE *)(a4[2] + a5);
  v65 = (v13 >> 11 << 13) + 134348800;
  v66 = v65 + 5793 * v43;
  v67 = v65 - 11586 * v43;
  v68 = 10033 * v26;
  LODWORD(v26) = v66 + 10033 * v26;
  v69 = v66 - v68;
  v34 >>= 11;
  v70 = v51 >> 11;
  LODWORD(v17) = 2998 * ((v51 >> 11) + (v74 >> 11));
  LODWORD(v43) = v17 + (((_DWORD)v34 + (v74 >> 11)) << 13);
  result = v34 + (v51 >> 11);
  *v64 = *(_BYTE *)(v5 + (((unint64_t)(v43 + v26) >> 18) & 0x3FF));
  v72 = ((v74 >> 11) - (_DWORD)result) << 13;
  v64[5] = *(_BYTE *)(v5 + (((unint64_t)(v26 - v43) >> 18) & 0x3FF));
  v64[1] = *(_BYTE *)(v5 + (((unint64_t)(v72 + v67) >> 18) & 0x3FF));
  LOBYTE(v72) = *(_BYTE *)(v5 + (((unint64_t)(v67 - v72) >> 18) & 0x3FF));
  v73 = v17 + (((_DWORD)v70 - (_DWORD)v34) << 13);
  v64[4] = v72;
  v64[2] = *(_BYTE *)(v5 + (((unint64_t)(v73 + v69) >> 18) & 0x3FF));
  v64[3] = *(_BYTE *)(v5 + (((unint64_t)(v69 - v73) >> 18) & 0x3FF));
  return result;
}

_BYTE *sub_1003A18D8(uint64_t a1, uint64_t a2, __int16 *a3, _QWORD *a4, unsigned int a5)
{
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  _BYTE *result;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _BYTE *v27;
  int v28;
  int v29;
  int v30;
  int v31;

  v5 = *(_DWORD **)(a2 + 88);
  v6 = *v5 * *a3;
  v7 = v5[8] * a3[8];
  v8 = v7 + v6;
  v9 = v6 - v7;
  v10 = v5[1] * a3[1];
  v11 = v5[9] * a3[9];
  v12 = v11 + v10;
  v13 = v10 - v11;
  v14 = v5[2] * a3[2];
  v15 = v5[10] * a3[10];
  v16 = v15 + v14;
  v17 = v14 - v15;
  v18 = v5[3] * a3[3];
  LODWORD(v5) = v5[11] * a3[11];
  v19 = (_DWORD)v5 + v18;
  LODWORD(v5) = v18 - (_DWORD)v5;
  v20 = *(_QWORD *)(a1 + 408) - 384;
  result = (_BYTE *)(*a4 + a5);
  v8 += 4100;
  v22 = (v8 + v16) << 13;
  v23 = v8 - v16;
  v24 = 4433 * (v19 + v12);
  v25 = v24 + 6270 * v12;
  v26 = v24 - 15137 * v19;
  v23 <<= 13;
  *result = *(_BYTE *)(v20 + (((unint64_t)(v25 + v22) >> 16) & 0x3FF));
  result[3] = *(_BYTE *)(v20 + (((unint64_t)(v22 - v25) >> 16) & 0x3FF));
  result[1] = *(_BYTE *)(v20 + (((unint64_t)(v26 + v23) >> 16) & 0x3FF));
  result[2] = *(_BYTE *)(v20 + (((unint64_t)(v23 - v26) >> 16) & 0x3FF));
  v27 = (_BYTE *)(a4[1] + a5);
  v9 += 4100;
  v28 = (v9 + v17) << 13;
  v29 = v9 - v17;
  v30 = 4433 * ((_DWORD)v5 + v13);
  v31 = v30 + 6270 * v13;
  v29 <<= 13;
  *v27 = *(_BYTE *)(v20 + (((unint64_t)(v31 + v28) >> 16) & 0x3FF));
  LODWORD(v5) = v30 - 15137 * (_DWORD)v5;
  v27[3] = *(_BYTE *)(v20 + (((unint64_t)(v28 - v31) >> 16) & 0x3FF));
  v27[1] = *(_BYTE *)(v20 + (((unint64_t)((_DWORD)v5 + v29) >> 16) & 0x3FF));
  v27[2] = *(_BYTE *)(v20 + (((unint64_t)(v29 - (_DWORD)v5) >> 16) & 0x3FF));
  return result;
}

uint64_t sub_1003A1A44(uint64_t result, uint64_t a2, unsigned __int16 *a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  _BYTE *v7;
  int v8;

  v5 = *(_QWORD *)(result + 408) - 384;
  v6 = *(_DWORD **)(a2 + 88);
  v7 = (_BYTE *)(*a4 + a5);
  v8 = *v6 * *a3 + 4100;
  LODWORD(v6) = v6[1] * a3[1];
  *v7 = *(_BYTE *)(v5 + (((unint64_t)((_DWORD)v6 + v8) >> 3) & 0x3FF));
  v7[1] = *(_BYTE *)(v5 + (((unint64_t)(v8 - (_DWORD)v6) >> 3) & 0x3FF));
  return result;
}

uint64_t sub_1003A1A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  _DWORD *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unint64_t v84;
  _BYTE *v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  _DWORD v96[128];

  v5 = 0;
  v89 = *(_QWORD *)(a1 + 408);
  v92 = *(_QWORD *)(a2 + 88);
  do
  {
    v6 = (_DWORD *)(v92 + 4 * v5);
    v7 = (__int16 *)(a3 + 2 * v5);
    v8 = (int)v6[32] * (uint64_t)v7[32];
    v9 = ((uint64_t)(*v6 * *v7) << 13) | 0x400;
    v10 = 10703 * v8;
    v8 *= 4433;
    v11 = v10 + v9;
    v12 = v9 - v10;
    v13 = v8 + v9;
    v14 = v9 - v8;
    v15 = (int)v6[16] * (uint64_t)v7[16];
    v16 = (int)v6[48] * (uint64_t)v7[48];
    v17 = 2260 * (v15 - v16);
    v18 = 11363 * (v15 - v16);
    v19 = v18 + 20995 * v16;
    v20 = v17 + 7373 * v15;
    v21 = v18 - 4926 * v15;
    v22 = v17 - 4176 * v16;
    v23 = v19 + v11;
    v95 = v11 - v19;
    v24 = v20 + v13;
    v94 = v13 - v20;
    v25 = v21 + v14;
    v26 = v14 - v21;
    v27 = v22 + v12;
    v28 = v12 - v22;
    v29 = (int)v6[8] * (uint64_t)v7[8];
    v30 = (int)v6[24] * (uint64_t)v7[24];
    LODWORD(v22) = v7[40];
    v31 = v6[40];
    v32 = v7[56];
    v33 = v6[56];
    v34 = v29 + v31 * (uint64_t)v7[40];
    v35 = 11086 * (v29 + v30);
    v36 = 10217 * v34;
    v37 = 8956 * (v29 + v33 * (uint64_t)v32);
    v38 = 7350 * (v29 - v33 * (uint64_t)v32);
    v39 = 5461 * v34;
    v40 = 3363 * (v29 - v30);
    v41 = v35 - 18730 * v29 + 10217 * v34 + v37;
    v42 = v40 - 15038 * v29 + 5461 * v34 + v38;
    v43 = 1136 * (v30 + v31 * (uint64_t)(int)v22);
    v44 = v30 + v33 * (uint64_t)v32;
    v45 = -5461 * v44;
    v46 = v35 + 589 * v30 + v43 - 5461 * v44;
    v47 = v31 * (uint64_t)(int)v22;
    v48 = 11529 * (v47 - v30);
    v44 *= -10217;
    v49 = v40 + 16154 * v30 + v48 + v44;
    v50 = v43 - 9222 * v47 + v36 - 11086 * (v47 + v33 * (uint64_t)v32);
    v51 = v37 - 11086 * (v47 + v33 * (uint64_t)v32);
    v52 = v33 * (uint64_t)v32;
    v53 = v45 + 8728 * v52 + v51;
    v54 = 3363 * (v52 - v47);
    v55 = v44 + 25733 * v52 + v38 + v54;
    v56 = &v96[v5];
    v57 = v48 - 6278 * v47 + v39 + v54;
    *v56 = (unint64_t)(v41 + v23) >> 11;
    v56[120] = (unint64_t)(v23 - v41) >> 11;
    v56[8] = (unint64_t)(v46 + v24) >> 11;
    v56[112] = (unint64_t)(v24 - v46) >> 11;
    v56[16] = (unint64_t)(v50 + v25) >> 11;
    v56[104] = (unint64_t)(v25 - v50) >> 11;
    v56[24] = (unint64_t)(v53 + v27) >> 11;
    v56[96] = (unint64_t)(v27 - v53) >> 11;
    v56[32] = (unint64_t)(v55 + v28) >> 11;
    v56[88] = (unint64_t)(v28 - v55) >> 11;
    v56[40] = (unint64_t)(v57 + v26) >> 11;
    v56[80] = (unint64_t)(v26 - v57) >> 11;
    v56[48] = (unint64_t)(v49 + v94) >> 11;
    v56[72] = (unint64_t)(v94 - v49) >> 11;
    v56[56] = (unint64_t)(v42 + v95) >> 11;
    v56[64] = (unint64_t)(v95 - v42) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v58 = 0;
  v59 = v89 - 384;
  result = 4294959923;
  do
  {
    v61 = &v96[v58];
    v62 = v61[1];
    v63 = v61[4];
    v64 = v61[5];
    v65 = *v61 + 16400;
    v66 = v65 + v63;
    v67 = v65 - v63;
    v68 = v61[6];
    v69 = v61[7];
    v66 <<= 13;
    v70 = v61[2];
    LODWORD(v61) = v61[3];
    v71 = 4433 * (v68 + v70);
    v72 = v71 + 6270 * v70;
    v73 = v71 - 15137 * v68;
    v74 = (_DWORD)v61 + v69;
    v75 = v62 + v64;
    v76 = -7373 * (v62 + v69);
    v77 = v76 + 2446 * v69;
    v78 = v76 + 12299 * v62;
    v79 = 9633 * (v75 + v74);
    v80 = v79 - 3196 * v75;
    v81 = v78 + v80;
    v82 = v79 - 16069 * v74;
    v83 = -20995 * ((_DWORD)v61 + v64);
    v84 = (v72 + v66 - v81);
    v85 = (_BYTE *)(*(_QWORD *)(a4 + v58) + a5);
    v67 <<= 13;
    *v85 = *(_BYTE *)(v59 + (((unint64_t)(v81 + v72 + v66) >> 18) & 0x3FF));
    v86 = v73 + v67;
    LODWORD(v61) = v83 + 25172 * (_DWORD)v61 + v82;
    v87 = v67 - v73;
    v85[7] = *(_BYTE *)(v59 + ((v84 >> 18) & 0x3FF));
    v88 = v83 + 16819 * v64 + v80;
    v85[1] = *(_BYTE *)(v59 + (((unint64_t)((_DWORD)v61 + v86) >> 18) & 0x3FF));
    v85[6] = *(_BYTE *)(v59 + (((unint64_t)(v86 - (_DWORD)v61) >> 18) & 0x3FF));
    v85[2] = *(_BYTE *)(v59 + (((unint64_t)(v88 + v87) >> 18) & 0x3FF));
    v85[5] = *(_BYTE *)(v59 + (((unint64_t)(v87 - v88) >> 18) & 0x3FF));
    v85[3] = *(_BYTE *)(v59 + (((unint64_t)(v77 + v82 + v66 - v72) >> 18) & 0x3FF));
    v85[4] = *(_BYTE *)(v59 + (((unint64_t)(v66 - v72 - (v77 + v82)) >> 18) & 0x3FF));
    v58 += 8;
  }
  while (v58 != 128);
  return result;
}

uint64_t sub_1003A1F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  _BYTE *v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  _BYTE v77[392];

  v5 = 0;
  v75 = *(_QWORD *)(a1 + 408);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = (int)v7[32] * (uint64_t)v8[32];
    v10 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v11 = v10 + 10438 * v9;
    v12 = v10 + 2578 * v9;
    v13 = v10 - 7223 * v9;
    v14 = (int)v7[16] * (uint64_t)v8[16];
    v15 = (int)v7[48] * (uint64_t)v8[48];
    v16 = 9058 * (v14 + v15);
    v17 = v16 + 2237 * v14;
    v18 = v16 - 14084 * v15;
    v19 = 5027 * v14 - 11295 * v15;
    v20 = v17 + v11;
    v21 = v11 - v17;
    v22 = v18 + v12;
    v23 = v12 - v18;
    v24 = v19 + v13;
    v25 = v13 - v19;
    v26 = (int)v7[8] * (uint64_t)v8[8];
    v27 = (int)v7[24] * (uint64_t)v8[24];
    v28 = (int)v7[40] * (uint64_t)v8[40];
    v29 = (int)v7[56] * (uint64_t)v8[56];
    v30 = 10935 * (v26 + v27);
    v31 = 9810 * (v26 + v28);
    v32 = v30 - 9232 * v26 + v31 + (v29 << 13);
    v33 = -8192 * v29 - 1297 * (v27 + v28);
    v34 = v30 - 3474 * v27 + v33;
    v35 = v31 - 19447 * v28 + v33;
    v36 = 6164 * (v26 + v28);
    v37 = 11512 * (v28 - v27);
    v38 = v37 - 13850 * v28 + v36 + (v29 << 13);
    LODWORD(v17) = v26 - v27;
    v39 = v37 + 5529 * v27;
    v40 = -8192 * v29 + 3826 * (v26 - v27);
    v41 = v36 - 8693 * v26 + v40;
    v42 = v39 + v40;
    v43 = &v77[4 * v5];
    *v43 = (unint64_t)(v32 + v20) >> 11;
    v43[91] = (unint64_t)(v20 - v32) >> 11;
    v43[7] = (unint64_t)(v34 + v22) >> 11;
    v43[84] = (unint64_t)(v22 - v34) >> 11;
    v43[14] = (unint64_t)(v35 + v24) >> 11;
    v44 = (unint64_t)(v10 - 11586 * v9) >> 11;
    LODWORD(v22) = 4 * (v17 - v28 + v29);
    v43[77] = (unint64_t)(v24 - v35) >> 11;
    v43[21] = v22 + v44;
    v43[70] = v44 - v22;
    v43[28] = (unint64_t)(v38 + v25) >> 11;
    v43[63] = (unint64_t)(v25 - v38) >> 11;
    v43[35] = (unint64_t)(v42 + v23) >> 11;
    v43[56] = (unint64_t)(v23 - v42) >> 11;
    v43[42] = (unint64_t)(v41 + v21) >> 11;
    v43[49] = (unint64_t)(v21 - v41) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 7);
  v45 = 0;
  v46 = v75 - 384;
  result = 11585;
  do
  {
    v48 = *a4++;
    v49 = *(_DWORD *)&v77[v45 + 4];
    v50 = (*(_DWORD *)&v77[v45] << 13) + 134348800;
    v52 = *(_DWORD *)&v77[v45 + 20];
    v51 = *(_DWORD *)&v77[v45 + 24];
    v53 = *(_DWORD *)&v77[v45 + 16];
    v54 = 7223 * (v53 - v51);
    v56 = *(_DWORD *)&v77[v45 + 8];
    v55 = *(_DWORD *)&v77[v45 + 12];
    v57 = 2578 * (v56 - v53);
    v58 = v57 + v54;
    v59 = v51 + v56;
    v60 = v54 - 637 * v51;
    v61 = 7663 * (v55 + v49);
    v62 = v57 - 20239 * v56;
    v63 = 1395 * (v49 - v55);
    v64 = v61 - v63;
    v65 = v61 + v63;
    v66 = v50 + 10438 * v59;
    v67 = v60 + v66;
    v68 = 5027 * (v52 + v49);
    v69 = v64 + v68;
    v70 = v50 - 15083 * v53 + v58;
    v71 = (_BYTE *)(v48 + a5);
    *v71 = *(_BYTE *)(v46 + (((unint64_t)(v69 + v67) >> 18) & 0x3FF));
    v72 = -11295 * (v52 + v55);
    v73 = v65 + v72;
    v71[6] = *(_BYTE *)(v46 + (((unint64_t)(v67 - v69) >> 18) & 0x3FF));
    v74 = v68 + 15326 * v52 + v72;
    v71[1] = *(_BYTE *)(v46 + (((unint64_t)(v73 + v70) >> 18) & 0x3FF));
    v71[5] = *(_BYTE *)(v46 + (((unint64_t)(v70 - v73) >> 18) & 0x3FF));
    v71[2] = *(_BYTE *)(v46 + (((unint64_t)(v74 + v62 + v66) >> 18) & 0x3FF));
    v71[4] = *(_BYTE *)(v46 + (((unint64_t)(v62 + v66 - v74) >> 18) & 0x3FF));
    v71[3] = *(_BYTE *)(v46 + (((unint64_t)(v50 + 11585 * (v53 - v59)) >> 18) & 0x3FF));
    v45 += 28;
  }
  while (v45 != 392);
  return result;
}

_BYTE *sub_1003A2384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *result;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  _BYTE v65[288];

  v5 = 0;
  v63 = *(_QWORD *)(a1 + 408);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v10 = 10033 * (int)v7[32] * (uint64_t)v8[32];
    v11 = v10 + v9;
    v12 = v9 - v10;
    v13 = (int)v7[16] * (uint64_t)v8[16];
    v14 = v7[48];
    v15 = (v14 * (uint64_t)v8[48]) << 13;
    v16 = (v13 - v14 * (uint64_t)v8[48]) << 13;
    v17 = v16 + v9;
    v18 = v9 - v16;
    v19 = v15 + 11190 * v13;
    v20 = v19 + v11;
    v21 = v11 - v19;
    v22 = 2998 * v13 - v15;
    v23 = v22 + v12;
    v24 = v12 - v22;
    v25 = (int)v7[8] * (uint64_t)v8[8];
    v26 = (int)v7[24] * (uint64_t)v8[24];
    v27 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    v28 = 10703 * v26;
    v29 = -4433 * v26;
    v30 = 7053 * (v25 + v27 + (int)v7 * (uint64_t)(int)v8);
    v31 = v30 + 2139 * (v25 + v27);
    v32 = v26 - v27;
    v33 = v28 + 2295 * v25 + v31;
    v34 = -8565 * (v27 + (int)v7 * (uint64_t)(int)v8);
    v35 = v29 - 12112 * v27 - 8565 * (v27 + (int)v7 * (uint64_t)(int)v8) + v31;
    v36 = (int)v7 * (uint64_t)(int)v8;
    v37 = v25 - v36;
    v38 = v29 - 5540 * v25 - 16244 * v36;
    v39 = &v65[4 * v5];
    v40 = 12998 * v36 - v28 + v34 + v30;
    v41 = v38 + v30;
    v42 = 4433 * (v37 + v32);
    v43 = v42 + 6270 * v37;
    v44 = v42 - 15137 * v32;
    *v39 = (unint64_t)(v33 + v20) >> 11;
    v39[66] = (unint64_t)(v20 - v33) >> 11;
    v39[6] = (unint64_t)(v43 + v17) >> 11;
    v39[60] = (unint64_t)(v17 - v43) >> 11;
    v39[12] = (unint64_t)(v35 + v23) >> 11;
    v39[54] = (unint64_t)(v23 - v35) >> 11;
    v39[18] = (unint64_t)(v40 + v24) >> 11;
    v39[48] = (unint64_t)(v24 - v40) >> 11;
    v39[24] = (unint64_t)(v44 + v18) >> 11;
    v39[42] = (unint64_t)(v18 - v44) >> 11;
    v39[30] = (unint64_t)(v41 + v21) >> 11;
    v39[36] = (unint64_t)(v21 - v41) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 6);
  v45 = 0;
  v46 = v63 - 384;
  do
  {
    v47 = *a4++;
    result = (_BYTE *)(v47 + a5);
    v49 = *(_DWORD *)&v65[v45 + 4];
    v50 = *(_DWORD *)&v65[v45 + 16];
    v51 = *(_DWORD *)&v65[v45 + 20];
    v52 = (*(_DWORD *)&v65[v45] << 13) + 134348800;
    v53 = v52 + 5793 * v50;
    v54 = *(_DWORD *)&v65[v45 + 12];
    v55 = 10033 * *(_DWORD *)&v65[v45 + 8];
    v56 = 2998 * (v51 + v49);
    v57 = v51 - v54;
    v58 = v54 + v51;
    v59 = v56 + ((v54 + v49) << 13);
    v60 = v52 - 11586 * v50;
    v61 = (v49 - v58) << 13;
    *result = *(_BYTE *)(v46 + (((unint64_t)(v59 + v53 + v55) >> 18) & 0x3FF));
    v62 = v56 + (v57 << 13);
    result[5] = *(_BYTE *)(v46 + (((unint64_t)(v53 + v55 - v59) >> 18) & 0x3FF));
    result[1] = *(_BYTE *)(v46 + (((unint64_t)(v61 + v60) >> 18) & 0x3FF));
    result[4] = *(_BYTE *)(v46 + (((unint64_t)(v60 - v61) >> 18) & 0x3FF));
    result[2] = *(_BYTE *)(v46 + (((unint64_t)(v62 + v53 - v55) >> 18) & 0x3FF));
    result[3] = *(_BYTE *)(v46 + (((unint64_t)(v53 - v55 - v62) >> 18) & 0x3FF));
    v45 += 24;
  }
  while (v45 != 288);
  return result;
}

uint64_t sub_1003A26F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  int v39;
  _BYTE *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  _BYTE v55[200];

  v5 = 0;
  v53 = *(_QWORD *)(a1 + 408);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v10 = (int)v7[32] * (uint64_t)v8[32];
    v11 = v9 + 9373 * v10;
    v12 = v9 - 3580 * v10;
    v13 = v9 - 11586 * v10;
    v14 = (int)v7[16] * (uint64_t)v8[16];
    v15 = (int)v7[48] * (uint64_t)v8[48];
    v16 = 6810 * (v14 + v15);
    v17 = v16 + 4209 * v14;
    v18 = v16 - 17828 * v15;
    v19 = v17 + v11;
    v20 = v11 - v17;
    v21 = v18 + v12;
    v22 = v12 - v18;
    v23 = (int)v7[8] * (uint64_t)v8[8];
    v24 = (int)v7[24] * (uint64_t)v8[24];
    v25 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    v26 = v24 + (int)v7 * (uint64_t)(int)v8;
    v27 = v24 - (int)v7 * (uint64_t)(int)v8;
    v28 = (v25 << 13) + 2531 * v27;
    v29 = 7791 * v26 + 11443 * v23 + v28;
    v30 = 1812 * v23 - 7791 * v26 + v28;
    v31 = (v25 << 13) - 6627 * v27;
    LODWORD(v27) = v23 - v25 - v27;
    v32 = 10323 * v23 - (4815 * v26 + v31);
    v33 = &v55[4 * v5];
    v34 = 5260 * v23 - 4815 * v26 + v31;
    *v33 = (unint64_t)(v29 + v19) >> 11;
    v33[45] = (unint64_t)(v19 - v29) >> 11;
    v33[5] = (unint64_t)(v32 + v21) >> 11;
    LODWORD(v27) = 4 * v27;
    v33[40] = (unint64_t)(v21 - v32) >> 11;
    v33[10] = v27 + (v13 >> 11);
    v33[35] = (v13 >> 11) - v27;
    v33[15] = (unint64_t)(v34 + v22) >> 11;
    v33[30] = (unint64_t)(v22 - v34) >> 11;
    v33[20] = (unint64_t)(v30 + v20) >> 11;
    v33[25] = (unint64_t)(v20 - v30) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 5);
  v35 = 0;
  v36 = v53 - 384;
  result = a5;
  do
  {
    v38 = *a4++;
    v39 = *(_DWORD *)&v55[v35 + 4];
    v40 = (_BYTE *)(v38 + a5);
    v41 = (*(_DWORD *)&v55[v35] << 13) + 134348800;
    v42 = *(_DWORD *)&v55[v35 + 8];
    v43 = *(_DWORD *)&v55[v35 + 12];
    v44 = *(_DWORD *)&v55[v35 + 16];
    v45 = 6476 * (v44 + v42);
    v46 = v42 - v44;
    v47 = v41 + 2896 * v46;
    v48 = 6810 * (v43 + v39);
    v49 = v47 + v45;
    v50 = v48 + 4209 * v39;
    v51 = v48 - 17828 * v43;
    *v40 = *(_BYTE *)(v36 + (((unint64_t)(v50 + v47 + v45) >> 18) & 0x3FF));
    v52 = v47 - v45;
    v40[4] = *(_BYTE *)(v36 + (((unint64_t)(v49 - v50) >> 18) & 0x3FF));
    v40[1] = *(_BYTE *)(v36 + (((unint64_t)(v51 + v52) >> 18) & 0x3FF));
    v40[3] = *(_BYTE *)(v36 + (((unint64_t)(v52 - v51) >> 18) & 0x3FF));
    v40[2] = *(_BYTE *)(v36 + (((unint64_t)(v41 + 268423872 * v46) >> 18) & 0x3FF));
    v35 += 20;
  }
  while (v35 != 200);
  return result;
}

uint64_t sub_1003A29FC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  unsigned int i;
  _DWORD *v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  _BYTE *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  _BYTE *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  _BYTE *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _BYTE *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  _BYTE *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  _BYTE *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  _BYTE *v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t result;
  _BYTE *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;

  v5 = 0;
  v6 = (__int16 *)(a3 + 64);
  v7 = *(_QWORD *)(a2 + 88) + 128;
  v95 = *(_QWORD *)(a1 + 408);
  for (i = 5; i > 1; --i)
  {
    v9 = (_DWORD *)(v7 + v5);
    v10 = *(v6 - 16);
    if ((unsigned __int16)*(v6 - 24) | v10)
      goto LABEL_9;
    if (*(v6 - 8) || *v6 || v6[8] || v6[16] || v6[24])
    {
      v10 = 0;
LABEL_9:
      v11 = (int)*(v9 - 16) * (uint64_t)(__int16)v10;
      v12 = (int)v9[16] * (uint64_t)v6[16];
      v13 = 4433 * (v11 + v12);
      v14 = v13 + 6270 * v11;
      v15 = v13 - 15137 * v12;
      v16 = (uint64_t)(*v9 * *v6) << 13;
      v17 = ((uint64_t)(*(v9 - 32) * *(v6 - 32)) << 13) | 0x400;
      v18 = v16 + v17;
      v19 = v17 - v16;
      v20 = v18 + v14;
      v21 = v18 - v14;
      v22 = v19 + v15;
      v23 = v19 - v15;
      v24 = (int)v9[24] * (uint64_t)v6[24];
      v25 = (int)v9[8] * (uint64_t)v6[8];
      v26 = *(v9 - 8);
      v27 = (int)*(v9 - 24) * (uint64_t)*(v6 - 24);
      v28 = v24 + v26 * (uint64_t)*(v6 - 8);
      v29 = 9633 * (v25 + v27 + v28);
      v30 = v29 - 16069 * v28;
      v31 = v29 - 3196 * (v25 + v27);
      v32 = -7373 * (v24 + v27);
      v33 = v32 + 2446 * v24 + v30;
      v34 = v32 + 12299 * v27 + v31;
      v35 = -20995 * (v25 + v26 * (uint64_t)*(v6 - 8));
      v36 = v35 + 16819 * v25 + v31;
      v37 = v35 + 25172 * v26 * (uint64_t)*(v6 - 8) + v30;
      v38 = (int *)((char *)&v98 + v5);
      *v38 = (unint64_t)(v34 + v20) >> 11;
      v38[28] = (unint64_t)(v20 - v34) >> 11;
      v38[4] = (unint64_t)(v37 + v22) >> 11;
      v38[24] = (unint64_t)(v22 - v37) >> 11;
      v38[8] = (unint64_t)(v36 + v23) >> 11;
      v38[20] = (unint64_t)(v23 - v36) >> 11;
      v38[12] = (unint64_t)(v33 + v21) >> 11;
      v39 = (unint64_t)(v21 - v33) >> 11;
      v40 = 16;
      goto LABEL_10;
    }
    LODWORD(v39) = 4 * *(v6 - 32) * *(v9 - 32);
    v41 = (int *)((char *)&v98 + v5);
    *v41 = v39;
    v41[4] = v39;
    v41[8] = v39;
    v41[12] = v39;
    v41[16] = v39;
    v41[20] = v39;
    v41[24] = v39;
    v40 = 28;
LABEL_10:
    *(int *)((char *)&v98 + 4 * v40 + v5) = v39;
    v5 += 4;
    ++v6;
  }
  v42 = (_BYTE *)(*a4 + a5);
  v43 = v101;
  v44 = (v98 + 16400 + v100) << 13;
  v45 = (v98 + 16400 - v100) << 13;
  v46 = 4433 * (v101 + v99);
  v47 = v46 + 6270 * v99;
  *v42 = *(_BYTE *)(v95 - 384 + (((unint64_t)(v47 + v44) >> 18) & 0x3FF));
  v48 = v46 - 15137 * v43;
  v42[3] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v44 - v47) >> 18) & 0x3FF));
  v42[1] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v48 + v45) >> 18) & 0x3FF));
  v42[2] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v45 - v48) >> 18) & 0x3FF));
  v49 = (_BYTE *)(a4[1] + a5);
  v50 = v105;
  v51 = (v102 + 16400 + v104) << 13;
  v52 = 4433 * (v105 + v103);
  v53 = v52 + 6270 * v103;
  v54 = (v102 + 16400 - v104) << 13;
  *v49 = *(_BYTE *)(v95 - 384 + (((unint64_t)(v53 + v51) >> 18) & 0x3FF));
  v55 = v52 - 15137 * v50;
  v49[3] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v51 - v53) >> 18) & 0x3FF));
  v49[1] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v55 + v54) >> 18) & 0x3FF));
  v49[2] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v54 - v55) >> 18) & 0x3FF));
  v56 = (_BYTE *)(a4[2] + a5);
  v57 = v109;
  v58 = (v106 + 16400 + v108) << 13;
  v59 = 4433 * (v109 + v107);
  v60 = v59 + 6270 * v107;
  v61 = (v106 + 16400 - v108) << 13;
  *v56 = *(_BYTE *)(v95 - 384 + (((unint64_t)(v60 + v58) >> 18) & 0x3FF));
  v62 = v59 - 15137 * v57;
  v56[3] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v58 - v60) >> 18) & 0x3FF));
  v56[1] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v62 + v61) >> 18) & 0x3FF));
  v56[2] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v61 - v62) >> 18) & 0x3FF));
  v63 = (_BYTE *)(a4[3] + a5);
  v64 = v113;
  v65 = (v110 + 16400 + v112) << 13;
  v66 = 4433 * (v113 + v111);
  v67 = v66 + 6270 * v111;
  v68 = (v110 + 16400 - v112) << 13;
  *v63 = *(_BYTE *)(v95 - 384 + (((unint64_t)(v67 + v65) >> 18) & 0x3FF));
  v69 = v66 - 15137 * v64;
  v63[3] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v65 - v67) >> 18) & 0x3FF));
  v63[1] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v69 + v68) >> 18) & 0x3FF));
  v63[2] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v68 - v69) >> 18) & 0x3FF));
  v70 = (_BYTE *)(a4[4] + a5);
  v71 = v117;
  v72 = (v114 + 16400 + v116) << 13;
  v73 = v114 + 16400 - v116;
  v74 = 4433 * (v117 + v115);
  v75 = v74 + 6270 * v115;
  *v70 = *(_BYTE *)(v95 - 384 + (((unint64_t)(v75 + v72) >> 18) & 0x3FF));
  v73 <<= 13;
  v76 = v74 - 15137 * v71;
  v70[3] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v72 - v75) >> 18) & 0x3FF));
  v70[1] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v76 + v73) >> 18) & 0x3FF));
  v70[2] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v73 - v76) >> 18) & 0x3FF));
  v77 = (_BYTE *)(a4[5] + a5);
  v78 = (v118 + 16400 + v120) << 13;
  v79 = 4433 * (v121 + v119);
  v80 = v79 + 6270 * v119;
  v81 = v79 - 15137 * v121;
  v82 = (v118 + 16400 - v120) << 13;
  *v77 = *(_BYTE *)(v95 - 384 + (((unint64_t)(v80 + v78) >> 18) & 0x3FF));
  v77[3] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v78 - v80) >> 18) & 0x3FF));
  v77[1] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v81 + v82) >> 18) & 0x3FF));
  v77[2] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v82 - v81) >> 18) & 0x3FF));
  v83 = (_BYTE *)(a4[6] + a5);
  v84 = (v122 + 16400 + v124) << 13;
  v85 = (v122 + 16400 - v124) << 13;
  v86 = 4433 * (v125 + v123);
  v87 = v86 + 6270 * v123;
  v88 = v86 - 15137 * v125;
  result = *(unsigned __int8 *)(v95 - 384 + (((unint64_t)(v87 + v84) >> 18) & 0x3FF));
  *v83 = result;
  v83[3] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v84 - v87) >> 18) & 0x3FF));
  v83[1] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v88 + v85) >> 18) & 0x3FF));
  v83[2] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v85 - v88) >> 18) & 0x3FF));
  v90 = (_BYTE *)(a4[7] + a5);
  v91 = (v126 + 16400 + v128) << 13;
  v92 = (v126 + 16400 - v128) << 13;
  v93 = 4433 * (v129 + v127) + 6270 * v127;
  v94 = 4433 * (v129 + v127) - 15137 * v129;
  *v90 = *(_BYTE *)(v95 - 384 + (((unint64_t)(v93 + v91) >> 18) & 0x3FF));
  v90[3] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v91 - v93) >> 18) & 0x3FF));
  v90[1] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v94 + v92) >> 18) & 0x3FF));
  v90[2] = *(_BYTE *)(v95 - 384 + (((unint64_t)(v92 - v94) >> 18) & 0x3FF));
  return result;
}

uint64_t sub_1003A3060(uint64_t a1, uint64_t a2, __int16 *a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  int v58;
  int v59;
  _BYTE *v60;
  int v61;
  _BYTE *v62;
  int v63;
  int v64;
  _BYTE *v65;
  _BYTE *v66;
  int v67;
  uint64_t result;
  int v69;
  _BYTE *v70;

  v5 = *(_QWORD *)(a1 + 408);
  v6 = *(_DWORD **)(a2 + 88);
  v7 = ((uint64_t)(*v6 * *a3) << 13) | 0x400;
  v8 = (int)v6[32] * (uint64_t)a3[32];
  v9 = v7 + 5793 * v8;
  v10 = (unint64_t)(v7 - 11586 * v8) >> 11;
  LODWORD(v8) = 10033 * v6[16] * a3[16];
  v11 = v8 + v9;
  v12 = v9 - v8;
  LODWORD(v8) = v6[8] * a3[8];
  v13 = v6[25];
  v14 = v6[24] * a3[24];
  v15 = v6[40] * a3[40];
  v16 = 2998 * (v15 + v8);
  v17 = v16 + ((v14 + (_DWORD)v8) << 13);
  v18 = v16 + ((v15 - v14) << 13);
  v19 = 4 * (v8 - v14 - v15);
  v20 = v17 + v11;
  LODWORD(v8) = v11 - v17;
  v21 = v19 + v10;
  v22 = v10 - v19;
  v23 = v18 + v12;
  LODWORD(v10) = v12 - v18;
  v24 = ((uint64_t)(v6[1] * a3[1]) << 13) | 0x400;
  v25 = (int)v6[33] * (uint64_t)a3[33];
  v26 = v24 + 5793 * v25;
  v27 = (unint64_t)(v24 - 11586 * v25) >> 11;
  v28 = 10033 * (int)v6[17] * (uint64_t)a3[17];
  v29 = v28 + v26;
  v30 = v26 - v28;
  v31 = (int)v6[9] * (uint64_t)a3[9];
  v32 = (int)v6[41] * (uint64_t)a3[41];
  v33 = 2998 * (v31 + v32);
  v34 = v33 + ((v31 + v13 * (uint64_t)a3[25]) << 13);
  v35 = v33 + ((v32 - v13 * (uint64_t)a3[25]) << 13);
  LODWORD(v26) = 4 * (v31 - (v13 * a3[25] + v32));
  v36 = (unint64_t)(v34 + v29) >> 11;
  v37 = (unint64_t)(v29 - v34) >> 11;
  v38 = v26 + v27;
  LODWORD(v27) = v27 - v26;
  v39 = (unint64_t)(v35 + v30) >> 11;
  v40 = (unint64_t)(v30 - v35) >> 11;
  v41 = ((uint64_t)(v6[2] * a3[2]) << 13) | 0x400;
  v42 = (int)v6[34] * (uint64_t)a3[34];
  v43 = v41 + 5793 * v42;
  v44 = (unint64_t)(v41 - 11586 * v42) >> 11;
  v45 = 10033 * (int)v6[18] * (uint64_t)a3[18];
  v46 = v45 + v43;
  v47 = v43 - v45;
  v48 = (int)v6[10] * (uint64_t)a3[10];
  LODWORD(v34) = a3[26];
  LODWORD(v32) = v6[26];
  v49 = (int)v6[42] * (uint64_t)a3[42];
  v50 = 2998 * (v48 + v49);
  v51 = v50 + ((v48 + (int)v32 * (uint64_t)a3[26]) << 13);
  v52 = v50 + ((v49 - (int)v32 * (uint64_t)(int)v34) << 13);
  LODWORD(v48) = 4 * (v48 - (v32 * v34 + v49));
  v53 = (unint64_t)(v51 + v46) >> 11;
  v54 = (unint64_t)(v46 - v51) >> 11;
  LODWORD(v32) = v48 + v44;
  LODWORD(v48) = v44 - v48;
  v55 = (unint64_t)(v52 + v47) >> 11;
  v56 = (unint64_t)(v47 - v52) >> 11;
  v5 -= 384;
  v57 = (_BYTE *)(*a4 + a5);
  v58 = (v20 >> 11 << 13) + 134348800;
  v59 = v58 + 5793 * v53;
  LODWORD(v36) = 10033 * v36;
  *v57 = *(_BYTE *)(v5 + (((unint64_t)(v59 + v36) >> 18) & 0x3FF));
  v57[2] = *(_BYTE *)(v5 + (((unint64_t)(v59 - v36) >> 18) & 0x3FF));
  v57[1] = *(_BYTE *)(v5 + (((unint64_t)(v58 + 268423870 * v53) >> 18) & 0x3FF));
  v60 = (_BYTE *)(a4[1] + a5);
  v61 = (v21 << 13) + 134348800;
  LODWORD(v36) = v61 + 5793 * v32;
  v38 *= 10033;
  *v60 = *(_BYTE *)(v5 + (((unint64_t)(v36 + v38) >> 18) & 0x3FF));
  v60[2] = *(_BYTE *)(v5 + (((unint64_t)(v36 - v38) >> 18) & 0x3FF));
  v60[1] = *(_BYTE *)(v5 + (((unint64_t)(v61 + 268423870 * v32) >> 18) & 0x3FF));
  v62 = (_BYTE *)(a4[2] + a5);
  v63 = (v23 >> 11 << 13) + 134348800;
  v64 = v63 + 5793 * v55;
  LODWORD(v39) = 10033 * v39;
  *v62 = *(_BYTE *)(v5 + (((unint64_t)(v64 + v39) >> 18) & 0x3FF));
  v62[2] = *(_BYTE *)(v5 + (((unint64_t)(v64 - v39) >> 18) & 0x3FF));
  v62[1] = *(_BYTE *)(v5 + (((unint64_t)(v63 + 268423870 * v55) >> 18) & 0x3FF));
  v65 = (_BYTE *)(a4[3] + a5);
  LODWORD(v10) = (v10 >> 11 << 13) + 134348800;
  LODWORD(v39) = v10 + 5793 * v56;
  LODWORD(v40) = 10033 * v40;
  *v65 = *(_BYTE *)(v5 + (((unint64_t)(v39 + v40) >> 18) & 0x3FF));
  v65[2] = *(_BYTE *)(v5 + (((unint64_t)(v39 - v40) >> 18) & 0x3FF));
  v65[1] = *(_BYTE *)(v5 + (((unint64_t)(v10 + 268423870 * v56) >> 18) & 0x3FF));
  v66 = (_BYTE *)(a4[4] + a5);
  v67 = (v22 << 13) + 134348800;
  LODWORD(v40) = v67 + 5793 * v48;
  LODWORD(v27) = 10033 * v27;
  result = *(unsigned __int8 *)(v5 + (((unint64_t)(v40 + v27) >> 18) & 0x3FF));
  *v66 = result;
  v66[2] = *(_BYTE *)(v5 + (((unint64_t)(v40 - v27) >> 18) & 0x3FF));
  v66[1] = *(_BYTE *)(v5 + (((unint64_t)(v67 + 268423870 * v48) >> 18) & 0x3FF));
  LODWORD(v8) = (v8 >> 11 << 13) + 134348800;
  v69 = v8 + 5793 * v54;
  v70 = (_BYTE *)(a4[5] + a5);
  *v70 = *(_BYTE *)(v5 + (((unint64_t)(v69 + 10033 * v37) >> 18) & 0x3FF));
  v70[2] = *(_BYTE *)(v5 + (((unint64_t)(v69 - 10033 * v37) >> 18) & 0x3FF));
  v70[1] = *(_BYTE *)(v5 + (((unint64_t)(v8 + 268423870 * v54) >> 18) & 0x3FF));
  return result;
}

uint64_t sub_1003A3468(uint64_t a1, uint64_t a2, __int16 *a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t result;
  int v28;
  _BYTE *v29;
  _BYTE *v30;
  int v31;
  _BYTE *v32;
  _BYTE *v33;

  v5 = *(_QWORD *)(a1 + 408);
  v6 = *(_DWORD **)(a2 + 88);
  v7 = *v6 * *a3;
  v8 = v6[16] * a3[16];
  v9 = (v8 + v7) << 13;
  v10 = (v7 - v8) << 13;
  v11 = v6[8] * a3[8];
  v12 = v6[24] * a3[24];
  v13 = 4433 * (v12 + v11);
  v14 = v13 + 6270 * v11;
  v15 = v13 - 15137 * v12;
  v16 = v9 - v14;
  v17 = v10 - v15;
  v18 = v6[1] * a3[1];
  v19 = v6[17] * a3[17];
  v20 = (v19 + v18) << 13;
  v21 = (v18 - v19) << 13;
  v22 = v6[9] * a3[9];
  LODWORD(v6) = v6[25] * a3[25];
  v23 = 4433 * ((_DWORD)v6 + v22);
  v24 = v23 + 6270 * v22;
  LODWORD(v6) = v23 - 15137 * (_DWORD)v6;
  v25 = v24 + v20;
  v26 = v20 - v24;
  result = ((_DWORD)v6 + v21);
  v5 -= 384;
  v28 = v14 + v9 + 33587200;
  v29 = (_BYTE *)(*a4 + a5);
  *v29 = *(_BYTE *)(v5 + (((unint64_t)(v28 + v25) >> 16) & 0x3FF));
  LODWORD(v6) = v21 - (_DWORD)v6;
  v29[1] = *(_BYTE *)(v5 + (((unint64_t)(v28 - v25) >> 16) & 0x3FF));
  v30 = (_BYTE *)(a4[1] + a5);
  v31 = v15 + v10 + 33587200;
  *v30 = *(_BYTE *)(v5 + (((unint64_t)(v31 + result) >> 16) & 0x3FF));
  v30[1] = *(_BYTE *)(v5 + (((unint64_t)(v31 - result) >> 16) & 0x3FF));
  v32 = (_BYTE *)(a4[2] + a5);
  *v32 = *(_BYTE *)(v5 + (((unint64_t)(v17 + 33587200 + (_DWORD)v6) >> 16) & 0x3FF));
  v32[1] = *(_BYTE *)(v5 + (((unint64_t)(v17 + 33587200 - (_DWORD)v6) >> 16) & 0x3FF));
  v33 = (_BYTE *)(a4[3] + a5);
  *v33 = *(_BYTE *)(v5 + (((unint64_t)(v16 + 33587200 + v26) >> 16) & 0x3FF));
  v33[1] = *(_BYTE *)(v5 + (((unint64_t)(v16 + 33587200 - v26) >> 16) & 0x3FF));
  return result;
}

uint64_t sub_1003A35F0(uint64_t result, uint64_t a2, unsigned __int16 *a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;

  v5 = *(_QWORD *)(result + 408) - 384;
  v6 = *(_DWORD **)(a2 + 88);
  v7 = *v6 * *a3 + 4100;
  LODWORD(v6) = v6[8] * a3[8];
  *(_BYTE *)(*a4 + a5) = *(_BYTE *)(v5 + (((unint64_t)((_DWORD)v6 + v7) >> 3) & 0x3FF));
  *(_BYTE *)(a4[1] + a5) = *(_BYTE *)(v5 + (((unint64_t)(v7 - (_DWORD)v6) >> 3) & 0x3FF));
  return result;
}

const char *sub_1003A3648(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  const char *result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  a1[1] = 0;
  v2 = OpenCVWrapperContours.startIndex.getter();
  v7 = v2;
  v3 = (char *)sub_1003A496C((int)a1, 0xA8uLL);
  if (!v3)
  {
    nullsub_1(a1);
    *(_QWORD *)(*a1 + 40) = 56;
    (*(void (**)(_QWORD *))*a1)(a1);
  }
  *(_QWORD *)v3 = sub_1003A37B4;
  *((_QWORD *)v3 + 1) = sub_1003A396C;
  *((_QWORD *)v3 + 2) = sub_1003A3A88;
  *((_QWORD *)v3 + 3) = sub_1003A3C5C;
  *((_QWORD *)v3 + 4) = sub_1003A3E68;
  *((_QWORD *)v3 + 5) = sub_1003A3F08;
  *((_QWORD *)v3 + 6) = sub_1003A3FA8;
  *((_QWORD *)v3 + 7) = sub_1003A41A4;
  *((_QWORD *)v3 + 8) = sub_1003A44B4;
  *((_QWORD *)v3 + 9) = sub_1003A47D4;
  *((_QWORD *)v3 + 11) = v2;
  *((_QWORD *)v3 + 12) = 1000000000;
  *((_QWORD *)v3 + 10) = sub_1003A4924;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *((_QWORD *)v3 + 19) = 168;
  a1[1] = v3;
  result = getenv("JPEGMEM");
  if (result)
  {
    v6 = 120;
    result = (const char *)sscanf(result, "%ld%c", &v7, &v6);
    if ((int)result >= 1)
    {
      if ((v6 & 0xDF) == 0x4D)
        v5 = 1000 * v7;
      else
        v5 = v7;
      *((_QWORD *)v3 + 11) = 1000 * v5;
    }
  }
  return result;
}

uint64_t sub_1003A37B4(_QWORD *a1, signed int a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *i;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;

  v6 = a1[1];
  if (a3 > 0x3B9AC9E8)
  {
    *(_QWORD *)(*a1 + 40) = 0x100000038;
    (*(void (**)(_QWORD *))*a1)(a1);
    v7 = a3 + 7;
    if (a2 < 2)
    {
LABEL_3:
      v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      v9 = v6 + 8 * a2;
      v12 = *(_QWORD **)(v9 + 104);
      v11 = (_QWORD *)(v9 + 104);
      v10 = v12;
      if (v12)
        goto LABEL_4;
LABEL_9:
      v13 = 0;
LABEL_10:
      v17 = v8 + 24;
      v18 = &unk_1003C65B8;
      if (!v13)
        v18 = &unk_1003C65A8;
      if (v18[a2] >= 999999976 - v8)
        v19 = 999999976 - v8;
      else
        v19 = v18[a2];
      v20 = v17 + v19;
      for (i = sub_1003A496C((int)a1, v17 + v19); !i; i = sub_1003A496C((int)a1, v17 + v19))
      {
        if (v19 <= 0x63)
        {
          *(_QWORD *)(*a1 + 40) = 0x200000038;
          (*(void (**)(_QWORD *))*a1)(a1);
        }
        v19 >>= 1;
        v20 = v17 + v19;
      }
      *(_QWORD *)(v6 + 152) += v20;
      *i = 0;
      i[1] = 0;
      i[2] = v19 + v8;
      if (v13)
        v22 = v13;
      else
        v22 = v11;
      *v22 = i;
      v13 = i;
      goto LABEL_20;
    }
  }
  else
  {
    v7 = a3 + 7;
    if (a2 < 2)
      goto LABEL_3;
  }
  v14 = *a1;
  *(_DWORD *)(v14 + 40) = 15;
  *(_DWORD *)(v14 + 44) = a2;
  (*(void (**)(_QWORD *))*a1)(a1);
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  v15 = v6 + 8 * a2;
  v16 = *(_QWORD **)(v15 + 104);
  v11 = (_QWORD *)(v15 + 104);
  v10 = v16;
  if (!v16)
    goto LABEL_9;
LABEL_4:
  while (1)
  {
    v13 = v10;
    if (v10[2] >= v8)
      break;
    v10 = (_QWORD *)*v10;
    if (!*v13)
      goto LABEL_10;
  }
LABEL_20:
  v23 = v13[1];
  result = (uint64_t)v13 + v23 + 24;
  v25 = v13[2] - v8;
  v13[1] = v23 + v8;
  v13[2] = v25;
  return result;
}

_QWORD *sub_1003A396C(_QWORD *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void (**v12)(_QWORD);

  v6 = a1[1];
  if (a3 < 0x3B9AC9E9)
  {
    v7 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (a2 < 2)
      goto LABEL_3;
LABEL_6:
    v12 = (void (**)(_QWORD))*a1;
    *((_DWORD *)v12 + 10) = 15;
    *((_DWORD *)v12 + 11) = a2;
    (*(void (**)(_QWORD *))*a1)(a1);
    v8 = v7 + 24;
    v9 = sub_1003A4984((int)a1, v7 + 24);
    if (v9)
      goto LABEL_4;
LABEL_7:
    *(_QWORD *)(*a1 + 40) = 0x400000038;
    (*(void (**)(_QWORD *))*a1)(a1);
    goto LABEL_4;
  }
  *(_QWORD *)(*a1 + 40) = 0x300000038;
  (*(void (**)(_QWORD *))*a1)(a1);
  v7 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (a2 >= 2)
    goto LABEL_6;
LABEL_3:
  v8 = v7 + 24;
  v9 = sub_1003A4984((int)a1, v7 + 24);
  if (!v9)
    goto LABEL_7;
LABEL_4:
  *(_QWORD *)(v6 + 152) += v8;
  v10 = v6 + 8 * (int)a2;
  *v9 = *(_QWORD *)(v10 + 120);
  v9[1] = v7;
  v9[2] = 0;
  *(_QWORD *)(v10 + 120) = v9;
  return v9 + 3;
}

uint64_t sub_1003A3A88(_QWORD *a1, signed int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;

  v7 = a1[1];
  v8 = 0x3B9AC9E8 / a3;
  if (a3 > 0x3B9AC9E8)
  {
    v9 = *a1;
    *(_DWORD *)(v9 + 40) = 72;
    (*(void (**)(_QWORD *))v9)(a1);
  }
  if (v8 >= a4)
    v10 = a4;
  else
    v10 = v8;
  *(_DWORD *)(v7 + 160) = v10;
  v11 = sub_1003A37B4(a1, a2, 8 * a4);
  if (a4)
  {
    v12 = 0;
    v13 = a3;
    do
    {
      if (v10 >= a4 - v12)
        v10 = a4 - v12;
      v15 = v13 * (unint64_t)v10;
      v16 = a1[1];
      if (v15 >= 0x3B9AC9E9)
      {
        *(_QWORD *)(*a1 + 40) = 0x300000038;
        (*(void (**)(_QWORD *))*a1)(a1);
      }
      if (a2 >= 2)
      {
        v17 = *a1;
        *(_DWORD *)(v17 + 40) = 15;
        *(_DWORD *)(v17 + 44) = a2;
        (*(void (**)(_QWORD *))*a1)(a1);
      }
      v18 = (v15 + 7) & 0x7FFFFFFFFFFFFFF8;
      v19 = sub_1003A4984((int)a1, v18 + 24);
      if (!v19)
      {
        *(_QWORD *)(*a1 + 40) = 0x400000038;
        (*(void (**)(_QWORD *))*a1)(a1);
      }
      *(_QWORD *)(v16 + 152) += v18 + 24;
      v20 = v16 + 8 * a2;
      *v19 = *(_QWORD *)(v20 + 120);
      v19[1] = v18;
      v19[2] = 0;
      *(_QWORD *)(v20 + 120) = v19;
      if (v10)
      {
        v21 = v19 + 3;
        v22 = v10;
        do
        {
          v14 = (v12 + 1);
          *(_QWORD *)(v11 + 8 * v12) = v21;
          v21 = (_QWORD *)((char *)v21 + v13);
          LODWORD(v12) = v12 + 1;
          --v22;
        }
        while (v22);
      }
      else
      {
        v14 = v12;
      }
      v12 = v14;
    }
    while (v14 < a4);
  }
  return v11;
}

uint64_t sub_1003A3C5C(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  unint64_t v23;

  v7 = a1[1];
  v23 = (unint64_t)a3 << 7;
  if (a3 >= 0x773594)
  {
    v8 = *a1;
    *(_DWORD *)(v8 + 40) = 72;
    (*(void (**)(_QWORD *))v8)(a1);
  }
  if (0x3B9AC9E8 / v23 >= a4)
    LODWORD(v9) = a4;
  else
    LODWORD(v9) = 0x3B9AC9E8 / v23;
  *(_DWORD *)(v7 + 160) = v9;
  v10 = sub_1003A37B4(a1, a2, 8 * a4);
  if (a4)
  {
    v11 = 0;
    v12 = (unint64_t)a3 << 7;
    do
    {
      if (v9 >= a4 - v11)
        v9 = a4 - v11;
      else
        v9 = v9;
      v14 = v23 * v9;
      v15 = a1[1];
      if (v23 * v9 > 0x3B9AC9E8)
      {
        *(_QWORD *)(*a1 + 40) = 0x300000038;
        (*(void (**)(_QWORD *))*a1)(a1);
        if (a2 < 2)
        {
LABEL_15:
          v16 = v14 | 0x18;
          v17 = sub_1003A4984((int)a1, v14 | 0x18);
          if (!v17)
            goto LABEL_22;
          goto LABEL_16;
        }
      }
      else if (a2 < 2)
      {
        goto LABEL_15;
      }
      v21 = *a1;
      *(_DWORD *)(v21 + 40) = 15;
      *(_DWORD *)(v21 + 44) = a2;
      (*(void (**)(_QWORD *))*a1)(a1);
      v16 = v14 | 0x18;
      v17 = sub_1003A4984((int)a1, v14 | 0x18);
      if (!v17)
      {
LABEL_22:
        *(_QWORD *)(*a1 + 40) = 0x400000038;
        (*(void (**)(_QWORD *))*a1)(a1);
      }
LABEL_16:
      *(_QWORD *)(v15 + 152) += v16;
      v18 = v15 + 8 * (int)a2;
      *v17 = *(_QWORD *)(v18 + 120);
      v17[1] = v14;
      v17[2] = 0;
      *(_QWORD *)(v18 + 120) = v17;
      if ((_DWORD)v9)
      {
        v19 = v17 + 3;
        v20 = v9;
        do
        {
          v13 = (v11 + 1);
          *(_QWORD *)(v10 + 8 * v11) = v19;
          v19 = (_QWORD *)((char *)v19 + v12);
          LODWORD(v11) = v11 + 1;
          --v20;
        }
        while (v20);
      }
      else
      {
        v13 = v11;
      }
      v11 = v13;
    }
    while (v13 < a4);
  }
  return v10;
}

uint64_t sub_1003A3E68(_QWORD *a1, signed int a2, char a3, int a4, int a5, int a6)
{
  uint64_t v12;
  void (**v13)(_QWORD);
  uint64_t result;

  v12 = a1[1];
  if (a2 != 1)
  {
    v13 = (void (**)(_QWORD))*a1;
    *((_DWORD *)v13 + 10) = 15;
    *((_DWORD *)v13 + 11) = a2;
    (*(void (**)(_QWORD *))*a1)(a1);
  }
  result = sub_1003A37B4(a1, a2, 0x90uLL);
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = a5;
  *(_DWORD *)(result + 12) = a4;
  *(_DWORD *)(result + 16) = a6;
  *(_BYTE *)(result + 36) = a3;
  *(_BYTE *)(result + 38) = 0;
  *(_QWORD *)(result + 40) = *(_QWORD *)(v12 + 136);
  *(_QWORD *)(v12 + 136) = result;
  return result;
}

uint64_t sub_1003A3F08(_QWORD *a1, signed int a2, char a3, int a4, int a5, int a6)
{
  uint64_t v12;
  void (**v13)(_QWORD);
  uint64_t result;

  v12 = a1[1];
  if (a2 != 1)
  {
    v13 = (void (**)(_QWORD))*a1;
    *((_DWORD *)v13 + 10) = 15;
    *((_DWORD *)v13 + 11) = a2;
    (*(void (**)(_QWORD *))*a1)(a1);
  }
  result = sub_1003A37B4(a1, a2, 0x90uLL);
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = a5;
  *(_DWORD *)(result + 12) = a4;
  *(_DWORD *)(result + 16) = a6;
  *(_BYTE *)(result + 36) = a3;
  *(_BYTE *)(result + 38) = 0;
  *(_QWORD *)(result + 40) = *(_QWORD *)(v12 + 144);
  *(_QWORD *)(v12 + 144) = result;
  return result;
}

uint64_t sub_1003A3FA8(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  uint64_t v15;

  v1 = (uint64_t *)result;
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 136);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      if (!*(_QWORD *)v3)
      {
        v6 = *(_DWORD *)(v3 + 12);
        v5 += v6 * (unint64_t)*(unsigned int *)(v3 + 16);
        v4 += *(unsigned int *)(v3 + 8) * (unint64_t)v6;
      }
      v3 = *(_QWORD *)(v3 + 40);
    }
    while (v3);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  for (i = *(_QWORD *)(v2 + 144); i; i = *(_QWORD *)(i + 40))
  {
    if (!*(_QWORD *)i)
    {
      v10 = *(_DWORD *)(i + 12);
      v5 += (*(unsigned int *)(i + 16) * (unint64_t)v10) << 7;
      v4 += (v10 * (unint64_t)*(unsigned int *)(i + 8)) << 7;
    }
  }
  if (v5 >= 1)
  {
    result = sub_1003A4994(result, v5, v4);
    if (result >= v4)
    {
      v8 = 1000000000;
      v9 = *(_QWORD *)(v2 + 136);
      if (!v9)
        goto LABEL_26;
    }
    else
    {
      if (result / v5 <= 1)
        v8 = 1;
      else
        v8 = result / v5;
      v9 = *(_QWORD *)(v2 + 136);
      if (!v9)
      {
LABEL_26:
        for (j = *(_QWORD *)(v2 + 144); j; j = *(_QWORD *)(j + 40))
        {
          if (!*(_QWORD *)j)
          {
            v14 = *(unsigned int *)(j + 8);
            v15 = *(unsigned int *)(j + 16);
            if ((v14 - 1) / v15 >= v8)
            {
              *(_DWORD *)(j + 20) = v15 * v8;
              sub_1003A499C(v1);
              *(_BYTE *)(j + 38) = 1;
              LODWORD(v14) = *(_DWORD *)(j + 20);
            }
            else
            {
              *(_DWORD *)(j + 20) = v14;
            }
            result = sub_1003A3C5C(v1, 1u, *(_DWORD *)(j + 12), v14);
            *(_QWORD *)j = result;
            *(_QWORD *)(j + 24) = *(unsigned int *)(v2 + 160);
            *(_DWORD *)(j + 32) = 0;
            *(_BYTE *)(j + 37) = 0;
          }
        }
        return result;
      }
    }
    do
    {
      if (!*(_QWORD *)v9)
      {
        v11 = *(unsigned int *)(v9 + 8);
        v12 = *(unsigned int *)(v9 + 16);
        if ((v11 - 1) / v12 >= v8)
        {
          *(_DWORD *)(v9 + 20) = v12 * v8;
          sub_1003A499C(v1);
          *(_BYTE *)(v9 + 38) = 1;
          LODWORD(v11) = *(_DWORD *)(v9 + 20);
        }
        else
        {
          *(_DWORD *)(v9 + 20) = v11;
        }
        result = sub_1003A3A88(v1, 1, *(_DWORD *)(v9 + 12), v11);
        *(_QWORD *)v9 = result;
        *(_QWORD *)(v9 + 24) = *(unsigned int *)(v2 + 160);
        *(_DWORD *)(v9 + 32) = 0;
        *(_BYTE *)(v9 + 37) = 0;
      }
      v9 = *(_QWORD *)(v9 + 40);
    }
    while (v9);
    goto LABEL_26;
  }
  return result;
}

uint64_t sub_1003A41A4(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  size_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v39;

  v9 = a4 + a3;
  if (v9 <= *(_DWORD *)(a2 + 8) && *(_DWORD *)(a2 + 16) >= a4 && *(_QWORD *)a2)
  {
    v10 = *(_DWORD *)(a2 + 28);
    if (v10 > a3)
      goto LABEL_8;
  }
  else
  {
    v11 = *a1;
    *(_DWORD *)(v11 + 40) = 23;
    (*(void (**)(uint64_t *))v11)(a1);
    v10 = *(_DWORD *)(a2 + 28);
    if (v10 > a3)
      goto LABEL_8;
  }
  if (v9 <= *(_DWORD *)(a2 + 20) + v10)
    goto LABEL_35;
LABEL_8:
  if (!*(_BYTE *)(a2 + 38))
  {
    v12 = *a1;
    *(_DWORD *)(v12 + 40) = 71;
    (*(void (**)(uint64_t *))v12)(a1);
  }
  if (*(_BYTE *)(a2 + 37))
  {
    v13 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = *(unsigned int *)(a2 + 12);
      v16 = *(unsigned int *)(a2 + 24);
      v17 = *(unsigned int *)(a2 + 28) * (unint64_t)v15;
      do
      {
        v18 = v13 - v14;
        if (v18 >= v16)
          v18 = v16;
        v19 = v14 + *(unsigned int *)(a2 + 28);
        if (v18 >= (uint64_t)(*(unsigned int *)(a2 + 32) - v19))
          v18 = *(unsigned int *)(a2 + 32) - v19;
        v20 = *(unsigned int *)(a2 + 8) - v19;
        if (v18 >= v20)
          v18 = v20;
        if (v18 < 1)
          break;
        v21 = v18 * v15;
        (*(void (**)(uint64_t *, uint64_t, _QWORD, unint64_t, uint64_t))(a2 + 56))(a1, a2 + 48, *(_QWORD *)(*(_QWORD *)a2 + 8 * v14), v17, v18 * v15);
        v17 += v21;
        v13 = *(unsigned int *)(a2 + 20);
        v16 = *(unsigned int *)(a2 + 24);
        v14 += v16;
      }
      while (v14 < v13);
    }
    *(_BYTE *)(a2 + 37) = 0;
  }
  if (*(_DWORD *)(a2 + 28) >= a3)
  {
    v22 = *(unsigned int *)(a2 + 20);
    v23 = (v9 - v22) & ~((uint64_t)(v9 - v22) >> 63);
    *(_DWORD *)(a2 + 28) = v23;
    if (!(_DWORD)v22)
      goto LABEL_35;
  }
  else
  {
    LODWORD(v22) = *(_DWORD *)(a2 + 20);
    v23 = a3;
    *(_DWORD *)(a2 + 28) = a3;
    if (!(_DWORD)v22)
      goto LABEL_35;
  }
  v24 = 0;
  v25 = *(unsigned int *)(a2 + 12);
  v22 = v22;
  v26 = v25 * (unint64_t)v23;
  v27 = *(unsigned int *)(a2 + 24);
  do
  {
    v28 = v22 - v24;
    if (v28 >= v27)
      v28 = v27;
    v29 = v24 + *(unsigned int *)(a2 + 28);
    if (v28 >= (uint64_t)(*(unsigned int *)(a2 + 32) - v29))
      v28 = *(unsigned int *)(a2 + 32) - v29;
    v30 = *(unsigned int *)(a2 + 8) - v29;
    if (v28 >= v30)
      v28 = v30;
    if (v28 < 1)
      break;
    v31 = v28 * v25;
    (*(void (**)(uint64_t *, uint64_t, _QWORD, unint64_t, uint64_t))(a2 + 48))(a1, a2 + 48, *(_QWORD *)(*(_QWORD *)a2 + 8 * v24), v26, v28 * v25);
    v26 += v31;
    v22 = *(unsigned int *)(a2 + 20);
    v27 = *(unsigned int *)(a2 + 24);
    v24 += v27;
  }
  while (v24 < v22);
LABEL_35:
  v32 = *(_DWORD *)(a2 + 32);
  if (v32 >= v9)
    goto LABEL_46;
  if (v32 < a3)
  {
    if (a5)
    {
      v33 = *a1;
      *(_DWORD *)(v33 + 40) = 23;
      (*(void (**)(uint64_t *))v33)(a1);
      v32 = a3;
      goto LABEL_40;
    }
    v32 = a3;
    if (*(_BYTE *)(a2 + 36))
      goto LABEL_43;
LABEL_50:
    v39 = *a1;
    *(_DWORD *)(v39 + 40) = 23;
    (*(void (**)(uint64_t *))v39)(a1);
    return *(_QWORD *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
  }
  if (a5)
  {
LABEL_40:
    *(_DWORD *)(a2 + 32) = v9;
    if (!*(_BYTE *)(a2 + 36))
      goto LABEL_47;
    goto LABEL_43;
  }
  if (!*(_BYTE *)(a2 + 36))
    goto LABEL_50;
LABEL_43:
  v34 = *(_DWORD *)(a2 + 28);
  if (v32 - v34 < (int)v9 - v34)
  {
    v35 = *(unsigned int *)(a2 + 12);
    v36 = 8 * (v32 - v34);
    v37 = a4 + a3 - v32;
    do
    {
      bzero(*(void **)(*(_QWORD *)a2 + v36), v35);
      v36 += 8;
      --v37;
    }
    while (v37);
  }
LABEL_46:
  if (a5)
LABEL_47:
    *(_BYTE *)(a2 + 37) = 1;
  return *(_QWORD *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
}

uint64_t sub_1003A44B4(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  size_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v39;

  v9 = a4 + a3;
  if (v9 <= *(_DWORD *)(a2 + 8) && *(_DWORD *)(a2 + 16) >= a4 && *(_QWORD *)a2)
  {
    v10 = *(_DWORD *)(a2 + 28);
    if (v10 > a3)
      goto LABEL_8;
  }
  else
  {
    v11 = *a1;
    *(_DWORD *)(v11 + 40) = 23;
    (*(void (**)(uint64_t *))v11)(a1);
    v10 = *(_DWORD *)(a2 + 28);
    if (v10 > a3)
      goto LABEL_8;
  }
  if (v9 <= *(_DWORD *)(a2 + 20) + v10)
    goto LABEL_35;
LABEL_8:
  if (!*(_BYTE *)(a2 + 38))
  {
    v12 = *a1;
    *(_DWORD *)(v12 + 40) = 71;
    (*(void (**)(uint64_t *))v12)(a1);
  }
  if (*(_BYTE *)(a2 + 37))
  {
    v13 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = (unint64_t)*(unsigned int *)(a2 + 12) << 7;
      v16 = *(unsigned int *)(a2 + 24);
      v17 = v15 * *(unsigned int *)(a2 + 28);
      do
      {
        v18 = v13 - v14;
        if (v18 >= v16)
          v18 = v16;
        v19 = v14 + *(unsigned int *)(a2 + 28);
        if (v18 >= (uint64_t)(*(unsigned int *)(a2 + 32) - v19))
          v18 = *(unsigned int *)(a2 + 32) - v19;
        v20 = *(unsigned int *)(a2 + 8) - v19;
        if (v18 >= v20)
          v18 = v20;
        if (v18 < 1)
          break;
        v21 = v18 * v15;
        (*(void (**)(uint64_t *, uint64_t, _QWORD, unint64_t, unint64_t))(a2 + 56))(a1, a2 + 48, *(_QWORD *)(*(_QWORD *)a2 + 8 * v14), v17, v18 * v15);
        v17 += v21;
        v13 = *(unsigned int *)(a2 + 20);
        v16 = *(unsigned int *)(a2 + 24);
        v14 += v16;
      }
      while (v14 < v13);
    }
    *(_BYTE *)(a2 + 37) = 0;
  }
  if (*(_DWORD *)(a2 + 28) >= a3)
  {
    v22 = *(unsigned int *)(a2 + 20);
    v23 = (v9 - v22) & ~((uint64_t)(v9 - v22) >> 63);
    *(_DWORD *)(a2 + 28) = v23;
    if (!(_DWORD)v22)
      goto LABEL_35;
  }
  else
  {
    LODWORD(v22) = *(_DWORD *)(a2 + 20);
    v23 = a3;
    *(_DWORD *)(a2 + 28) = a3;
    if (!(_DWORD)v22)
      goto LABEL_35;
  }
  v24 = 0;
  v25 = (unint64_t)*(unsigned int *)(a2 + 12) << 7;
  v22 = v22;
  v26 = v25 * v23;
  v27 = *(unsigned int *)(a2 + 24);
  do
  {
    v28 = v22 - v24;
    if (v28 >= v27)
      v28 = v27;
    v29 = v24 + *(unsigned int *)(a2 + 28);
    if (v28 >= (uint64_t)(*(unsigned int *)(a2 + 32) - v29))
      v28 = *(unsigned int *)(a2 + 32) - v29;
    v30 = *(unsigned int *)(a2 + 8) - v29;
    if (v28 >= v30)
      v28 = v30;
    if (v28 < 1)
      break;
    v31 = v28 * v25;
    (*(void (**)(uint64_t *, uint64_t, _QWORD, unint64_t, unint64_t))(a2 + 48))(a1, a2 + 48, *(_QWORD *)(*(_QWORD *)a2 + 8 * v24), v26, v28 * v25);
    v26 += v31;
    v22 = *(unsigned int *)(a2 + 20);
    v27 = *(unsigned int *)(a2 + 24);
    v24 += v27;
  }
  while (v24 < v22);
LABEL_35:
  v32 = *(_DWORD *)(a2 + 32);
  if (v32 >= v9)
    goto LABEL_46;
  if (v32 < a3)
  {
    if (a5)
    {
      v33 = *a1;
      *(_DWORD *)(v33 + 40) = 23;
      (*(void (**)(uint64_t *))v33)(a1);
      v32 = a3;
      goto LABEL_40;
    }
    v32 = a3;
    if (*(_BYTE *)(a2 + 36))
      goto LABEL_43;
LABEL_50:
    v39 = *a1;
    *(_DWORD *)(v39 + 40) = 23;
    (*(void (**)(uint64_t *))v39)(a1);
    return *(_QWORD *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
  }
  if (a5)
  {
LABEL_40:
    *(_DWORD *)(a2 + 32) = v9;
    if (!*(_BYTE *)(a2 + 36))
      goto LABEL_47;
    goto LABEL_43;
  }
  if (!*(_BYTE *)(a2 + 36))
    goto LABEL_50;
LABEL_43:
  v34 = *(_DWORD *)(a2 + 28);
  if (v32 - v34 < (int)v9 - v34)
  {
    v35 = (unint64_t)*(unsigned int *)(a2 + 12) << 7;
    v36 = 8 * (v32 - v34);
    v37 = a4 + a3 - v32;
    do
    {
      bzero(*(void **)(*(_QWORD *)a2 + v36), v35);
      v36 += 8;
      --v37;
    }
    while (v37);
  }
LABEL_46:
  if (a5)
LABEL_47:
    *(_BYTE *)(a2 + 37) = 1;
  return *(_QWORD *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
}

void sub_1003A47D4(_QWORD *a1, signed int a2)
{
  _QWORD *v4;
  void (**v5)(_QWORD);
  uint64_t i;
  uint64_t j;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = (_QWORD *)a1[1];
  if (a2 < 2)
  {
    if (a2 == 1)
    {
      for (i = v4[17]; i; i = *(_QWORD *)(i + 40))
      {
        if (*(_BYTE *)(i + 38))
        {
          *(_BYTE *)(i + 38) = 0;
          (*(void (**)(_QWORD *, uint64_t))(i + 64))(a1, i + 48);
        }
      }
      v4[17] = 0;
      for (j = v4[18]; j; j = *(_QWORD *)(j + 40))
      {
        if (*(_BYTE *)(j + 38))
        {
          *(_BYTE *)(j + 38) = 0;
          (*(void (**)(_QWORD *, uint64_t))(j + 64))(a1, j + 48);
        }
      }
      v4[18] = 0;
    }
  }
  else
  {
    v5 = (void (**)(_QWORD))*a1;
    *((_DWORD *)v5 + 10) = 15;
    *((_DWORD *)v5 + 11) = a2;
    (*(void (**)(_QWORD *))*a1)(a1);
  }
  v8 = a2;
  v9 = &v4[a2];
  v10 = (_QWORD *)v9[15];
  v9[15] = 0;
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      v12 = v10[1] + v10[2] + 24;
      sub_1003A497C((int)a1, v10);
      v4[19] -= v12;
      v10 = v11;
    }
    while (v11);
  }
  v13 = &v4[v8];
  v14 = (_QWORD *)v13[13];
  v13[13] = 0;
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      v16 = v14[1] + v14[2] + 24;
      sub_1003A497C((int)a1, v14);
      v4[19] -= v16;
      v14 = v15;
    }
    while (v15);
  }
}

uint64_t sub_1003A4924(uint64_t a1)
{
  sub_1003A47D4((_QWORD *)a1, 1);
  sub_1003A47D4((_QWORD *)a1, 0);
  sub_1003A497C(a1, *(void **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return nullsub_1(a1);
}

void *sub_1003A496C(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x69A4C161uLL);
}

void sub_1003A497C(int a1, void *a2)
{
  free(a2);
}

void *sub_1003A4984(int a1, size_t size)
{
  return malloc_type_malloc(size, 0xFA110552uLL);
}

uint64_t sub_1003A4994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_1003A499C(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *(_DWORD *)(v1 + 40) = 51;
  return (*(uint64_t (**)(uint64_t *))v1)(a1);
}

uint64_t sub_1003A49B0(uint64_t a1)
{
  void (**v2)(uint64_t);
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int32x4_t v12;
  int32x4_t *v13;
  int32x4_t v14;
  uint64_t v15;
  int32x4_t v16;
  int8x16_t v17;
  uint64_t v18;
  _DWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  void (**v34)(uint64_t, uint64_t);
  int v35;
  void (**v36)(uint64_t, uint64_t);
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;

  v2 = (void (**)(uint64_t))(**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 624) = v2;
  *v2 = sub_1003A4EE8;
  v2[2] = (void (*)(uint64_t))nullsub_105;
  v2[3] = (void (*)(uint64_t))sub_1003A52E8;
  v2[14] = 0;
  v2[10] = 0;
  if (*(int *)(a1 + 124) >= 5)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 40) = 0x400000039;
    (**(void (***)(uint64_t))a1)(a1);
    v3 = *(_DWORD *)(a1 + 108);
    if (v3 < 257)
    {
LABEL_3:
      v4 = *(unsigned int *)(a1 + 124);
      v5 = v3;
      if ((int)v4 >= 2)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 108);
    if (v3 < 257)
      goto LABEL_3;
  }
  *(_QWORD *)(*(_QWORD *)a1 + 40) = 0x1000000003BLL;
  (**(void (***)(uint64_t))a1)(a1);
  v4 = *(unsigned int *)(a1 + 124);
  v5 = *(int *)(a1 + 108);
  if ((int)v4 >= 2)
  {
LABEL_4:
    if ((_DWORD)v4 == 2)
    {
      v6 = 0;
      do
      {
        v7 = (v6 + 2) * (v6 + 2);
        ++v6;
      }
      while (v7 <= v5);
    }
    else if ((_DWORD)v4 - 1 == (((_DWORD)v4 - 1) & 0xFFFFFFFE))
    {
      v51 = 1;
      do
      {
        LODWORD(v6) = v51++;
        v52 = (v4 - 1) & 0xFFFFFFFE;
        v53 = v51;
        v54 = 1;
        do
        {
          v53 *= v51;
          v54 *= v51;
          v52 -= 2;
        }
        while (v52);
        v7 = v54 * v53;
      }
      while (v7 <= v5);
    }
    else
    {
      v59 = 1;
      do
      {
        LODWORD(v6) = v59++;
        v60 = (v4 - 1) & 0xFFFFFFFE;
        v61 = v59;
        v62 = 1;
        do
        {
          v61 *= v59;
          v62 *= v59;
          v60 -= 2;
        }
        while (v60);
        v7 = v62 * v61;
        v63 = v4 - ((v4 - 1) | 1);
        do
        {
          v7 *= v59;
          --v63;
        }
        while (v63);
      }
      while (v7 <= v5);
    }
    goto LABEL_14;
  }
LABEL_10:
  if ((int)v5 <= 1)
    LODWORD(v6) = 1;
  else
    LODWORD(v6) = v5;
  LODWORD(v7) = v6 + 1;
LABEL_14:
  v8 = *(_QWORD *)(a1 + 624);
  if (v6 <= 1)
  {
    v9 = *(_QWORD *)a1;
    *(_DWORD *)(v9 + 40) = 58;
    *(_DWORD *)(v9 + 44) = v7;
    (**(void (***)(uint64_t))a1)(a1);
  }
  if ((int)v4 < 1)
  {
    v11 = 1;
    goto LABEL_33;
  }
  if (v4 < 8)
  {
    v10 = 0;
    LODWORD(v11) = 1;
LABEL_23:
    v18 = v4 - v10;
    v19 = (_DWORD *)(v8 + 4 * v10 + 60);
    do
    {
      *v19++ = v6;
      v11 = (v11 * v6);
      --v18;
    }
    while (v18);
    goto LABEL_25;
  }
  v10 = v4 & 0x7FFFFFF8;
  v12 = vdupq_n_s32(v6);
  v13 = (int32x4_t *)(v8 + 76);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  v15 = v4 & 0xFFFFFFF8;
  v16.i64[0] = 0x100000001;
  v16.i64[1] = 0x100000001;
  do
  {
    v13[-1] = v12;
    *v13 = v12;
    v14 = vmulq_s32(v14, v12);
    v16 = vmulq_s32(v16, v12);
    v13 += 2;
    v15 -= 8;
  }
  while (v15);
  v17 = (int8x16_t)vmulq_s32(v16, v14);
  *(int32x2_t *)v17.i8 = vmul_s32(*(int32x2_t *)v17.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
  v11 = (v17.i32[0] * v17.i32[1]);
  if (v10 != v4)
    goto LABEL_23;
LABEL_25:
  v20 = (int *)(v8 + 60);
  v21 = (v4 - 1);
  if (*(_DWORD *)(a1 + 64) == 2)
  {
    v22 = *(int *)(v8 + 64);
    v23 = v22 + 1;
    v24 = (int)v11 / (int)v22 * (v22 + 1);
    if (v24 <= v5)
    {
      v25 = 0;
      v26 = (int *)(v8 + 64);
      do
      {
        do
        {
          *v26 = v23;
          v11 = v24;
          if (v25 == v21)
            break;
          v26 = &v20[dword_1003C66D8[++v25]];
          v28 = *v26;
          v29 = v28 + 1;
          v24 = (int)v11 / (int)v28 * (v28 + 1);
          v23 = v29;
        }
        while (v24 <= v5);
        v25 = 0;
        v27 = *(int *)(v8 + 64);
        v23 = v27 + 1;
        v24 = (int)v11 / (int)v27 * (v27 + 1);
        v26 = (int *)(v8 + 64);
      }
      while (v24 <= v5);
    }
  }
  else
  {
    v30 = *v20;
    v31 = v30 + 1;
    v32 = (int)v11 / (int)v30 * (v30 + 1);
    if (v32 <= v5)
    {
      v55 = 0;
      do
      {
        do
        {
          v20[v55] = v31;
          v11 = v32;
          if (v55 == v21)
            break;
          v57 = v20[++v55];
          v58 = v57 + 1;
          v32 = (int)v11 / (int)v57 * (v57 + 1);
          v31 = v58;
        }
        while (v32 <= v5);
        v55 = 0;
        v56 = *v20;
        v31 = v56 + 1;
        v32 = (int)v11 / (int)v56 * (v56 + 1);
      }
      while (v32 <= v5);
    }
  }
LABEL_33:
  v33 = *(_DWORD *)(a1 + 124);
  v34 = *(void (***)(uint64_t, uint64_t))a1;
  *(_DWORD *)(*(_QWORD *)a1 + 44) = v11;
  if (v33 == 3)
  {
    *((_DWORD *)v34 + 12) = *(_DWORD *)(v8 + 60);
    *((_DWORD *)v34 + 13) = *(_DWORD *)(v8 + 64);
    *((_DWORD *)v34 + 14) = *(_DWORD *)(v8 + 68);
    v35 = 96;
    v36 = v34;
  }
  else
  {
    v36 = *(void (***)(uint64_t, uint64_t))a1;
    v35 = 97;
  }
  *((_DWORD *)v34 + 10) = v35;
  v36[1](a1, 1);
  v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 16))(a1, 1, v11, *(unsigned int *)(a1 + 124));
  v38 = *(_DWORD *)(a1 + 124);
  if (v38 >= 1)
  {
    v39 = 0;
    v40 = v11;
    do
    {
      v41 = *(unsigned int *)(v8 + 4 * v39 + 60);
      v42 = (v40 / (int)v41);
      if ((int)v41 >= 1 && (int)v42 >= 1)
      {
        v43 = 0;
        v44 = 0;
        do
        {
          if (v43 * v42 < (int)v11)
          {
            v45 = v44;
            do
            {
              for (i = 0; i != v42; ++i)
                *(_BYTE *)(*(_QWORD *)(v37 + 8 * v39) + v45 + i) = ((unint64_t)((v41 - 1) >> 1)
                                                                  - v43
                                                                  + (v43 << 8))
                                                                 / (v41 - 1);
              v45 += v40;
            }
            while (v45 < (int)v11);
          }
          ++v43;
          v44 += v42;
        }
        while (v43 != v41);
        v38 = *(_DWORD *)(a1 + 124);
      }
      ++v39;
      v40 /= (int)v41;
    }
    while (v39 < v38);
  }
  *(_QWORD *)(v8 + 32) = v37;
  *(_DWORD *)(v8 + 40) = v11;
  result = sub_1003A52FC(a1);
  if (*(_DWORD *)(a1 + 100) == 2 && *(int *)(a1 + 124) >= 1)
  {
    v48 = 0;
    v49 = 2 * (*(_DWORD *)(a1 + 116) + 2);
    v50 = *(_QWORD *)(a1 + 624) + 112;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, v49);
      *(_QWORD *)(v50 + 8 * v48++) = result;
    }
    while (v48 < *(int *)(a1 + 124));
  }
  return result;
}

void sub_1003A4EE8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  _DWORD *v24;

  v2 = *(_QWORD *)(a1 + 624);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v2 + 32);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(v2 + 40);
  v3 = *(_DWORD *)(a1 + 100);
  if (v3 == 2)
  {
    *(_QWORD *)(v2 + 8) = sub_1003A5944;
    *(_BYTE *)(v2 + 144) = 0;
    if (*(_QWORD *)(v2 + 112))
    {
      LODWORD(v5) = *(_DWORD *)(a1 + 124);
    }
    else
    {
      if (*(int *)(a1 + 124) < 1)
        return;
      v8 = 0;
      v9 = 2 * (*(_DWORD *)(a1 + 116) + 2);
      do
      {
        *(_QWORD *)(v2 + 112 + 8 * v8++) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                + 8))(a1, 1, v9);
        v5 = *(int *)(a1 + 124);
      }
      while (v8 < v5);
    }
    if ((int)v5 >= 1)
    {
      v10 = 0;
      v11 = 2 * (*(_DWORD *)(a1 + 116) + 2);
      v12 = v2 + 112;
      do
        bzero(*(void **)(v12 + 8 * v10++), v11);
      while (v10 < *(int *)(a1 + 124));
    }
  }
  else if (v3 == 1)
  {
    v6 = sub_1003A57F8;
    if (*(_DWORD *)(a1 + 124) == 3)
      v6 = sub_1003A5704;
    *(_QWORD *)(v2 + 8) = v6;
    *(_DWORD *)(v2 + 76) = 0;
    if (*(_BYTE *)(v2 + 56))
    {
      if (*(_QWORD *)(v2 + 80))
        return;
    }
    else
    {
      sub_1003A52FC(a1);
      if (*(_QWORD *)(v2 + 80))
        return;
    }
    v13 = *(_DWORD *)(a1 + 124);
    if (v13 >= 1)
    {
      v14 = 0;
      v15 = *(_QWORD *)(a1 + 624);
      v16 = v15 + 60;
      do
      {
        while (1)
        {
          v18 = *(_DWORD *)(v15 + 4 * v14 + 60);
          if (!v14)
            break;
          v19 = 0;
          while (v18 != *(_DWORD *)(v16 + 4 * v19))
          {
            if (v14 == ++v19)
              goto LABEL_32;
          }
          v17 = *(_QWORD *)(v16 + 8 * v19 + 20);
          if (!v17)
            break;
          *(_QWORD *)(v15 + 8 * v14++ + 80) = v17;
          if (v14 >= v13)
            return;
        }
LABEL_32:
        v20 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
        v21 = 0;
        v22 = (uint64_t)(v18 - 1) << 9;
        v23 = (unsigned __int8 *)&byte_1003C65DF;
        do
        {
          v24 = (_DWORD *)(v20 + v21);
          *v24 = 255 * (255 - 2 * *(v23 - 7)) / v22;
          v24[1] = 255 * (255 - 2 * *(v23 - 6)) / v22;
          v24[2] = 255 * (255 - 2 * *(v23 - 5)) / v22;
          v24[3] = 255 * (255 - 2 * *(v23 - 4)) / v22;
          v24[4] = 255 * (255 - 2 * *(v23 - 3)) / v22;
          v24[5] = 255 * (255 - 2 * *(v23 - 2)) / v22;
          v24[6] = 255 * (255 - 2 * *(v23 - 1)) / v22;
          v24[7] = 255 * (255 - 2 * *v23) / v22;
          v24[8] = 255 * (255 - 2 * v23[1]) / v22;
          v24[9] = 255 * (255 - 2 * v23[2]) / v22;
          v24[10] = 255 * (255 - 2 * v23[3]) / v22;
          v24[11] = 255 * (255 - 2 * v23[4]) / v22;
          v24[12] = 255 * (255 - 2 * v23[5]) / v22;
          v24[13] = 255 * (255 - 2 * v23[6]) / v22;
          v24[14] = 255 * (255 - 2 * v23[7]) / v22;
          v24[15] = 255 * (255 - 2 * v23[8]) / v22;
          v21 += 64;
          v23 += 16;
        }
        while (v21 != 1024);
        v13 = *(_DWORD *)(a1 + 124);
        *(_QWORD *)(v15 + 8 * v14++ + 80) = v20;
      }
      while (v14 < v13);
    }
  }
  else if (v3)
  {
    v7 = *(_QWORD *)a1;
    *(_DWORD *)(v7 + 40) = 49;
    (*(void (**)(uint64_t))v7)(a1);
  }
  else
  {
    if (*(_DWORD *)(a1 + 124) == 3)
      v4 = sub_1003A54D0;
    else
      v4 = sub_1003A5548;
    *(_QWORD *)(v2 + 8) = v4;
  }
}

uint64_t sub_1003A52E8(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *(_DWORD *)(v1 + 40) = 47;
  return (*(uint64_t (**)(uint64_t *))v1)(a1);
}

uint64_t sub_1003A52FC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v2 = *(_QWORD *)(a1 + 624);
  v3 = *(_DWORD *)(a1 + 100);
  if (v3 == 1)
    v4 = 766;
  else
    v4 = 256;
  *(_BYTE *)(v2 + 56) = v3 == 1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 16))(a1, 1, v4, *(unsigned int *)(a1 + 124));
  *(_QWORD *)(v2 + 48) = result;
  if (*(int *)(a1 + 124) >= 1)
  {
    v6 = *(_DWORD *)(v2 + 40);
    if (v3 == 1)
    {
      v7 = 0;
      do
      {
        v8 = 0;
        v9 = 0;
        v10 = *(int *)(v2 + 4 * v7 + 60);
        v6 /= (int)v10;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v7) += 255;
        v11 = *(char **)(*(_QWORD *)(v2 + 48) + 8 * v7);
        v12 = v10 - 1;
        v13 = v10 + 254;
        v14 = 2 * ((int)v10 - 1);
        v15 = v13 / v14;
        do
        {
          if (v8 > (int)v15)
          {
            v16 = 2 * v9 + 3;
            do
            {
              v15 = (v12 - v16 + ((uint64_t)v16 << 8)) / v14;
              ++v9;
              v16 += 2;
            }
            while (v8 > (int)v15);
          }
          v11[v8++] = v9 * v6;
        }
        while (v8 != 256);
        v17 = 0;
        v18 = *v11;
        v19 = v11 + 256;
        do
        {
          v11[v17 - 1] = v18;
          *v19++ = v11[255];
          --v17;
        }
        while (v17 != -255);
        ++v7;
      }
      while (v7 < *(int *)(a1 + 124));
    }
    else
    {
      v20 = 0;
      do
      {
        v21 = 0;
        v22 = 0;
        v23 = *(int *)(v2 + 4 * v20 + 60);
        v6 /= (int)v23;
        v24 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v20);
        v25 = v23 - 1;
        v26 = v23 + 254;
        v27 = 2 * ((int)v23 - 1);
        v28 = v26 / v27;
        do
        {
          if (v21 > (int)v28)
          {
            v29 = 2 * v22 + 3;
            do
            {
              v28 = (v25 - v29 + ((uint64_t)v29 << 8)) / v27;
              ++v22;
              v29 += 2;
            }
            while (v21 > (int)v28);
          }
          *(_BYTE *)(v24 + v21++) = v22 * v6;
        }
        while (v21 != 256);
        ++v20;
      }
      while (v20 < *(int *)(a1 + 124));
    }
  }
  return result;
}

uint64_t sub_1003A54D0(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  int v12;

  if (a4 >= 1)
  {
    v4 = *(_DWORD *)(result + 116);
    if (v4)
    {
      v5 = 0;
      v6 = *(uint64_t **)(*(_QWORD *)(result + 624) + 48);
      v7 = *v6;
      v8 = v6[1];
      v9 = v6[2];
      do
      {
        v10 = *(unsigned __int8 **)(a2 + 8 * v5);
        v11 = *(_BYTE **)(a3 + 8 * v5);
        v12 = v4;
        do
        {
          result = *(unsigned __int8 *)(v8 + v10[1]);
          *v11++ = result + *(_BYTE *)(v7 + *v10) + *(_BYTE *)(v9 + v10[2]);
          v10 += 3;
          --v12;
        }
        while (v12);
        ++v5;
      }
      while (v5 != a4);
    }
  }
  return result;
}

void sub_1003A5548(uint64_t a1, uint64_t a2, void **a3, int a4)
{
  size_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  unsigned __int8 *v10;
  _BYTE *v11;
  int v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  char v21;
  char v22;
  _QWORD *v23;
  uint64_t k;
  uint64_t v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;

  if (a4 >= 1)
  {
    v4 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v4)
    {
      v5 = a3;
      v6 = *(unsigned int *)(a1 + 124);
      v7 = a4;
      if ((int)v6 <= 0)
      {
        do
        {
          v14 = *v5++;
          bzero(v14, v4);
          --v7;
        }
        while (v7);
      }
      else
      {
        v8 = *(_QWORD **)(*(_QWORD *)(a1 + 624) + 48);
        if ((_DWORD)v6 == 1)
        {
          for (i = 0; i != a4; ++i)
          {
            v10 = *(unsigned __int8 **)(a2 + 8 * i);
            v11 = a3[i];
            v12 = v4;
            do
            {
              v13 = *(_BYTE *)(*v8 + *v10);
              v10 += v6;
              *v11++ = v13;
              --v12;
            }
            while (v12);
          }
        }
        else
        {
          v15 = v6 & 0xFFFFFFFE;
          if (v15 == v6)
          {
            for (j = 0; j != a4; ++j)
            {
              v17 = *(_QWORD *)(a2 + 8 * j);
              v18 = v5[j];
              v19 = v4;
              do
              {
                v20 = 0;
                v21 = 0;
                v22 = 0;
                do
                {
                  v23 = &v8[v20];
                  v21 += *(_BYTE *)(*v23 + *(unsigned __int8 *)(v17 + v20));
                  v22 += *(_BYTE *)(v23[1] + *(unsigned __int8 *)(v17 + v20 + 1));
                  v20 += 2;
                }
                while (v15 != v20);
                v17 += v6;
                *v18++ = v22 + v21;
                --v19;
              }
              while (v19);
            }
          }
          else
          {
            for (k = 0; k != a4; ++k)
            {
              v25 = *(_QWORD *)(a2 + 8 * k);
              v26 = v5[k];
              v27 = v4;
              do
              {
                v28 = 0;
                v29 = 0;
                v30 = 0;
                do
                {
                  v31 = &v8[v28];
                  v29 += *(_BYTE *)(*v31 + *(unsigned __int8 *)(v25 + v28));
                  v30 += *(_BYTE *)(v31[1] + *(unsigned __int8 *)(v25 + v28 + 1));
                  v28 += 2;
                }
                while (v15 != v28);
                v32 = v30 + v29;
                v33 = v6 & 0xFFFFFFFE;
                do
                {
                  v32 += *(_BYTE *)(v8[v33] + *(unsigned __int8 *)(v25 + v33));
                  ++v33;
                }
                while (v6 != v33);
                v25 += v6;
                *v26++ = v32;
                --v27;
              }
              while (v27);
            }
          }
        }
      }
    }
  }
}

_BYTE *sub_1003A5704(_BYTE *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;

  if (a4 >= 1)
  {
    v4 = *((_QWORD *)result + 78);
    v5 = *((_DWORD *)result + 29);
    if (v5)
    {
      v6 = 0;
      v7 = *(uint64_t **)(v4 + 48);
      v8 = *v7;
      v9 = v7[1];
      v10 = v7[2];
      v11 = a4;
      v12 = *(_DWORD *)(v4 + 76);
      do
      {
        v13 = 0;
        v14 = *(unsigned __int8 **)(a2 + 8 * v6);
        result = *(_BYTE **)(a3 + 8 * v6);
        v15 = (uint64_t)v12 << 6;
        v16 = *(_QWORD *)(v4 + 80) + v15;
        v17 = *(_QWORD *)(v4 + 88) + v15;
        v18 = *(_QWORD *)(v4 + 96) + v15;
        v19 = v5;
        do
        {
          *result++ = *(_BYTE *)(v9 + *(int *)(v17 + 4 * v13) + (unint64_t)v14[1])
                    + *(_BYTE *)(v8 + *(int *)(v16 + 4 * v13) + (unint64_t)*v14)
                    + *(_BYTE *)(v10 + *(int *)(v18 + 4 * v13) + (unint64_t)v14[2]);
          v13 = ((_BYTE)v13 + 1) & 0xF;
          v14 += 3;
          --v19;
        }
        while (v19);
        v12 = ((_BYTE)v12 + 1) & 0xF;
        *(_DWORD *)(v4 + 76) = v12;
        ++v6;
      }
      while (v6 != v11);
    }
    else
    {
      v20 = *(_DWORD *)(v4 + 76);
      do
      {
        v20 = ((_BYTE)v20 + 1) & 0xF;
        --a4;
      }
      while (a4);
      *(_DWORD *)(v4 + 76) = v20;
    }
  }
  return result;
}

void sub_1003A57F8(uint64_t a1, uint64_t a2, void **a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t v20;
  void *v21;

  if (a4 >= 1)
  {
    v5 = *(_QWORD *)(a1 + 624);
    v6 = *(unsigned int *)(a1 + 124);
    v7 = *(unsigned int *)(a1 + 116);
    if ((int)v6 <= 0)
    {
      v20 = a4;
      do
      {
        v21 = *a3++;
        bzero(v21, v7);
        *(_DWORD *)(v5 + 76) = (*(_DWORD *)(v5 + 76) + 1) & 0xF;
        --v20;
      }
      while (v20);
    }
    else
    {
      v8 = a4;
      if ((_DWORD)v7)
      {
        for (i = 0; i != v8; ++i)
        {
          bzero(a3[i], v7);
          v11 = 0;
          v12 = *(int *)(v5 + 76);
          do
          {
            v13 = 0;
            v14 = *(_QWORD *)(a2 + 8 * i);
            v15 = a3[i];
            v16 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v11);
            v17 = *(_QWORD *)(v5 + 8 * v11 + 80) + (v12 << 6);
            v18 = v7;
            do
            {
              *v15++ += *(_BYTE *)(v16 + *(int *)(v17 + 4 * v13) + (unint64_t)*(unsigned __int8 *)(v14 + v11));
              v13 = ((_BYTE)v13 + 1) & 0xF;
              v14 += (int)v6;
              --v18;
            }
            while (v18);
            ++v11;
          }
          while (v11 != v6);
          *(_DWORD *)(v5 + 76) = ((_BYTE)v12 + 1) & 0xF;
        }
      }
      else
      {
        do
        {
          v19 = *a3++;
          bzero(v19, v7);
          *(_DWORD *)(v5 + 76) = (*(_DWORD *)(v5 + 76) + 1) & 0xF;
          --v8;
        }
        while (v8);
      }
    }
  }
}

void sub_1003A5944(uint64_t a1, uint64_t a2, void **a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  unsigned __int8 *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t k;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t j;
  int v36;
  uint64_t v37;
  _WORD **v38;
  _WORD *v39;
  uint64_t v40;
  _WORD **v41;
  _WORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (a4 >= 1)
  {
    v5 = *(_QWORD *)(a1 + 624);
    v6 = *(unsigned int *)(a1 + 124);
    v7 = *(unsigned int *)(a1 + 116);
    if ((int)v6 <= 0)
    {
      v27 = a4;
      do
      {
        v28 = *a3++;
        bzero(v28, v7);
        *(_BYTE *)(v5 + 144) = *(_BYTE *)(v5 + 144) == 0;
        --v27;
      }
      while (v27);
    }
    else
    {
      v50 = a4;
      if ((_DWORD)v7)
      {
        v9 = 0;
        v10 = *(_QWORD *)(a1 + 408);
        v11 = (v7 - 1);
        do
        {
          bzero(a3[v9], v7);
          for (i = 0; i != v6; ++i)
          {
            v13 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * v9) + i);
            v14 = a3[v9];
            if (*(_BYTE *)(v5 + 144))
            {
              v13 += (v11 * v6);
              v14 += v11;
              v15 = *(_QWORD *)(v5 + 8 * i + 112) + 2 * (v7 + 1);
              v16 = -1;
              v17 = -(int)v6;
            }
            else
            {
              v15 = *(_QWORD *)(v5 + 8 * i + 112);
              v16 = 1;
              v17 = v6;
            }
            v18 = 0;
            v19 = 0;
            v20 = 0;
            v21 = 0;
            v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * i);
            v23 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i);
            v24 = v7;
            do
            {
              v25 = *(unsigned __int8 *)(v10 + *v13 + (uint64_t)((v21 + *(__int16 *)(v15 + 2 * v16 + 2 * v18) + 8) >> 4));
              v26 = *(unsigned __int8 *)(v22 + v25);
              v14[v18] += v26;
              LODWORD(v26) = v25 - *(unsigned __int8 *)(v23 + v26);
              *(_WORD *)(v15 + 2 * v18) = 3 * v26 + v19;
              v19 = 5 * v26 + v20;
              v21 = 7 * v26;
              v13 += v17;
              v18 += v16;
              v20 = v26;
              --v24;
            }
            while (v24);
            *(_WORD *)(v15 + 2 * v18) = v19;
          }
          *(_BYTE *)(v5 + 144) = *(_BYTE *)(v5 + 144) == 0;
          ++v9;
        }
        while (v9 != v50);
      }
      else
      {
        v29 = v6 & 0xFFFFFFFE;
        if (v6 >= 2)
        {
          for (j = 0; j != v50; ++j)
          {
            bzero(a3[j], v7);
            v36 = *(unsigned __int8 *)(v5 + 144);
            v37 = v6 & 0xFFFFFFFE;
            v38 = (_WORD **)(v5 + 120);
            if (*(_BYTE *)(v5 + 144))
            {
              v43 = v6 & 0xFFFFFFFE;
              v44 = (uint64_t *)(v5 + 120);
              do
              {
                v45 = *v44;
                *(_WORD *)(*(v44 - 1) + 2 * (v7 + 1)) = 0;
                *(_WORD *)(v45 + 2 * (v7 + 1)) = 0;
                v44 += 2;
                v43 -= 2;
              }
              while (v43);
              v46 = v6 & 0xFFFFFFFE;
              if (v6 != v29)
              {
                v47 = (uint64_t *)(v5 + 112 + 8 * v46);
                v48 = v6 - v46;
                do
                {
                  v49 = *v47++;
                  *(_WORD *)(v49 + 2 * (v7 + 1)) = 0;
                  --v48;
                }
                while (v48);
              }
            }
            else
            {
              do
              {
                v39 = *v38;
                **(v38 - 1) = 0;
                *v39 = 0;
                v38 += 2;
                v37 -= 2;
              }
              while (v37);
              v40 = v6 - v29;
              v41 = (_WORD **)(v5 + 112 + ((8 * v6) & 0x7FFFFFFF0));
              if (v6 != v29)
              {
                do
                {
                  v42 = *v41++;
                  *v42 = 0;
                  --v40;
                }
                while (v40);
              }
            }
            *(_BYTE *)(v5 + 144) = v36 == 0;
          }
        }
        else
        {
          for (k = 0; k != v50; ++k)
          {
            bzero(a3[k], v7);
            v31 = *(unsigned __int8 *)(v5 + 144);
            if (*(_BYTE *)(v5 + 144))
            {
              v32 = v6;
              v33 = (uint64_t *)(v5 + 112);
              do
              {
                v34 = *v33++;
                *(_WORD *)(v34 + 2 * (v7 + 1)) = 0;
                --v32;
              }
              while (v32);
            }
            else
            {
              **(_WORD **)(v5 + 112) = 0;
            }
            *(_BYTE *)(v5 + 144) = v31 == 0;
          }
        }
      }
    }
  }
}

uint64_t sub_1003A5CB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 624) = v2;
  *(_QWORD *)v2 = sub_1003A6224;
  *(_QWORD *)(v2 + 24) = sub_1003A6524;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  if (*(_DWORD *)(a1 + 124) != 3)
  {
    v3 = *(_QWORD *)a1;
    *(_DWORD *)(v3 + 40) = 48;
    (*(void (**)(uint64_t))v3)(a1);
  }
  *(_QWORD *)(v2 + 48) = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 256);
  **(_QWORD **)(v2 + 48) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                 + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 24) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 32) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 40) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 48) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 56) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 64) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 72) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 80) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 88) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 96) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 104) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 112) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 120) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 128) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 136) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 144) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 152) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 160) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 168) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 176) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 184) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 192) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 200) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 208) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 216) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 224) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 232) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 240) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 248) = result;
  *(_BYTE *)(v2 + 56) = 1;
  if (*(_BYTE *)(a1 + 114))
  {
    v5 = *(unsigned int *)(a1 + 108);
    if ((int)v5 >= 8)
    {
      if (v5 < 0x101)
        goto LABEL_11;
      v6 = 0x1000000003BLL;
    }
    else
    {
      v6 = 0x80000003ALL;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 40) = v6;
    (**(void (***)(uint64_t))a1)(a1);
LABEL_11:
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1, 1, v5, 3);
    *(_QWORD *)(v2 + 32) = result;
    *(_DWORD *)(v2 + 40) = v5;
    if (*(_DWORD *)(a1 + 100))
      goto LABEL_12;
    return result;
  }
  *(_QWORD *)(v2 + 32) = 0;
  if (*(_DWORD *)(a1 + 100))
  {
LABEL_12:
    *(_DWORD *)(a1 + 100) = 2;
    *(_QWORD *)(v2 + 64) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 6 * (*(_DWORD *)(a1 + 116) + 2));
    return sub_1003A6534(a1);
  }
  return result;
}

void sub_1003A6224(uint64_t a1, int a2)
{
  uint64_t v3;
  void **v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  void *v9;
  void *v10;

  v3 = *(_QWORD *)(a1 + 624);
  v4 = *(void ***)(v3 + 48);
  if (!*(_DWORD *)(a1 + 100))
  {
    if (!a2)
    {
      *(_QWORD *)(v3 + 8) = sub_1003A6DF0;
      *(_QWORD *)(v3 + 16) = nullsub_106;
      v5 = *(_DWORD *)(a1 + 136);
      if (v5 >= 1)
        goto LABEL_4;
LABEL_12:
      v6 = 0x10000003ALL;
      goto LABEL_14;
    }
LABEL_10:
    *(_QWORD *)(v3 + 8) = sub_1003A66A4;
    *(_QWORD *)(v3 + 16) = sub_1003A6724;
    *(_BYTE *)(v3 + 56) = 1;
LABEL_7:
    bzero(*v4, 0x1000uLL);
    bzero(v4[1], 0x1000uLL);
    bzero(v4[2], 0x1000uLL);
    bzero(v4[3], 0x1000uLL);
    bzero(v4[4], 0x1000uLL);
    bzero(v4[5], 0x1000uLL);
    bzero(v4[6], 0x1000uLL);
    bzero(v4[7], 0x1000uLL);
    bzero(v4[8], 0x1000uLL);
    bzero(v4[9], 0x1000uLL);
    bzero(v4[10], 0x1000uLL);
    bzero(v4[11], 0x1000uLL);
    bzero(v4[12], 0x1000uLL);
    bzero(v4[13], 0x1000uLL);
    bzero(v4[14], 0x1000uLL);
    bzero(v4[15], 0x1000uLL);
    bzero(v4[16], 0x1000uLL);
    bzero(v4[17], 0x1000uLL);
    bzero(v4[18], 0x1000uLL);
    bzero(v4[19], 0x1000uLL);
    bzero(v4[20], 0x1000uLL);
    bzero(v4[21], 0x1000uLL);
    bzero(v4[22], 0x1000uLL);
    bzero(v4[23], 0x1000uLL);
    bzero(v4[24], 0x1000uLL);
    bzero(v4[25], 0x1000uLL);
    bzero(v4[26], 0x1000uLL);
    bzero(v4[27], 0x1000uLL);
    bzero(v4[28], 0x1000uLL);
    bzero(v4[29], 0x1000uLL);
    bzero(v4[30], 0x1000uLL);
    bzero(v4[31], 0x1000uLL);
    *(_BYTE *)(v3 + 56) = 0;
    return;
  }
  *(_DWORD *)(a1 + 100) = 2;
  if (a2)
    goto LABEL_10;
  *(_QWORD *)(v3 + 8) = sub_1003A6ADC;
  *(_QWORD *)(v3 + 16) = nullsub_106;
  v5 = *(_DWORD *)(a1 + 136);
  if (v5 < 1)
    goto LABEL_12;
LABEL_4:
  if (v5 < 0x101)
  {
    if (*(_DWORD *)(a1 + 100) != 2)
      goto LABEL_6;
    goto LABEL_15;
  }
  v6 = 0x1000000003BLL;
LABEL_14:
  *(_QWORD *)(*(_QWORD *)a1 + 40) = v6;
  (**(void (***)(uint64_t))a1)(a1);
  if (*(_DWORD *)(a1 + 100) != 2)
  {
LABEL_6:
    if (!*(_BYTE *)(v3 + 56))
      return;
    goto LABEL_7;
  }
LABEL_15:
  v7 = *(_DWORD *)(a1 + 116) + 2;
  v8 = 6 * v7;
  v9 = *(void **)(v3 + 64);
  if (v9)
  {
    bzero(v9, 6 * v7);
    if (*(_QWORD *)(v3 + 80))
      goto LABEL_17;
LABEL_20:
    sub_1003A6534(a1);
    *(_BYTE *)(v3 + 72) = 0;
    if (!*(_BYTE *)(v3 + 56))
      return;
    goto LABEL_7;
  }
  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, size_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, v8);
  *(_QWORD *)(v3 + 64) = v10;
  bzero(v10, v8);
  if (!*(_QWORD *)(v3 + 80))
    goto LABEL_20;
LABEL_17:
  *(_BYTE *)(v3 + 72) = 0;
  if (*(_BYTE *)(v3 + 56))
    goto LABEL_7;
}

uint64_t sub_1003A6524(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 624) + 56) = 1;
  return result;
}

uint64_t sub_1003A6534(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 624);
  result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(v1 + 80) = result + 1020;
  *(_OWORD *)(result + 1008) = xmmword_1003C6710;
  *(_OWORD *)(result + 1024) = xmmword_1003C6720;
  *(_OWORD *)(result + 1040) = xmmword_1003C6740;
  *(_OWORD *)(result + 1056) = xmmword_1003C6760;
  *(_OWORD *)(result + 976) = xmmword_1003C6750;
  *(_OWORD *)(result + 992) = xmmword_1003C6730;
  *(_OWORD *)(result + 1072) = xmmword_1003C6780;
  *(_OWORD *)(result + 1088) = xmmword_1003C67A0;
  *(_OWORD *)(result + 944) = xmmword_1003C6790;
  *(_OWORD *)(result + 960) = xmmword_1003C6770;
  *(_OWORD *)(result + 1104) = xmmword_1003C67C0;
  *(_OWORD *)(result + 1120) = xmmword_1003C67E0;
  *(_OWORD *)(result + 912) = xmmword_1003C67D0;
  *(_OWORD *)(result + 928) = xmmword_1003C67B0;
  *(_OWORD *)(result + 1136) = xmmword_1003C6800;
  *(_OWORD *)(result + 1152) = xmmword_1003C6820;
  *(_OWORD *)(result + 880) = xmmword_1003C6810;
  *(_OWORD *)(result + 896) = xmmword_1003C67F0;
  *(_OWORD *)(result + 1168) = xmmword_1003C6840;
  *(_OWORD *)(result + 1184) = xmmword_1003C6860;
  *(_QWORD *)(result + 1200) = 0x1F0000001ELL;
  *(_DWORD *)(result + 1208) = 31;
  v3 = 1212;
  v4 = 828;
  *(_OWORD *)(result + 848) = xmmword_1003C6850;
  *(_OWORD *)(result + 864) = xmmword_1003C6830;
  *(_OWORD *)(result + 832) = xmmword_1003C6870;
  do
  {
    *(_DWORD *)(result + v3) = 32;
    *(_DWORD *)(result + v4) = -32;
    v3 += 4;
    v4 -= 4;
  }
  while (v4 != -4);
  return result;
}

uint64_t sub_1003A66A4(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  if (a4 >= 1)
  {
    v4 = *(_DWORD *)(result + 116);
    if (v4)
    {
      v5 = 0;
      v6 = *(_QWORD *)(*(_QWORD *)(result + 624) + 48);
      do
      {
        v7 = *(_BYTE **)(a2 + 8 * v5);
        v8 = v4;
        do
        {
          v9 = *(_QWORD *)(v6 + (*v7 & 0xF8)) + ((16 * v7[1]) & 0xFC0);
          v10 = ((unint64_t)v7[2] >> 2) & 0x3E;
          v11 = *(unsigned __int16 *)(v9 + v10);
          if (((v11 + 1) & 0x10000) == 0)
            LOWORD(v11) = v11 + 1;
          *(_WORD *)(v9 + v10) = v11;
          v7 += 3;
          --v8;
        }
        while (v8);
        ++v5;
      }
      while (v5 != a4);
    }
  }
  return result;
}

uint64_t sub_1003A6724(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned __int16 *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;

  v2 = a1[78];
  a1[18] = *(_QWORD *)(v2 + 32);
  v58 = v2;
  v3 = *(_DWORD *)(v2 + 40);
  v4 = (*(uint64_t (**)(void))a1[1])();
  *(_OWORD *)v4 = xmmword_1003C6880;
  *(_QWORD *)(v4 + 16) = 0x1F00000000;
  sub_1003A6ED8(*(_QWORD *)(a1[78] + 48), (int *)v4);
  v5 = 1;
  if (v3 < 2)
    goto LABEL_34;
  v6 = 1;
  while (1)
  {
    if (v3 >= (unint64_t)(2 * v6))
    {
      v9 = 0;
      v26 = 0;
      v27 = v6;
      v28 = v4;
      do
      {
        if (*(_QWORD *)(v28 + 32) > v26 && *(uint64_t *)(v28 + 24) > 0)
        {
          v26 = *(_QWORD *)(v28 + 32);
          v9 = (int *)v28;
        }
        v28 += 40;
        --v27;
      }
      while (v27);
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v11 = v6;
      v12 = v4;
      do
      {
        if (*(_QWORD *)(v12 + 24) > v10)
        {
          v10 = *(_QWORD *)(v12 + 24);
          v9 = (int *)v12;
        }
        v12 += 40;
        --v11;
      }
      while (v11);
    }
    if (!v9)
      break;
    v13 = v4 + 40 * v6;
    *(_DWORD *)(v13 + 20) = v9[5];
    *(_OWORD *)v13 = *(_OWORD *)v9;
    v14 = v9[5];
    *(_DWORD *)(v13 + 16) = v9[4];
    v15 = (_DWORD *)(v13 + 16);
    v17 = *v9;
    v16 = v9[1];
    v18 = 16 * (v16 - *v9);
    v20 = v9[2];
    v19 = v9[3];
    v21 = 12 * (v19 - v20);
    v22 = v9[4];
    v23 = v18 <= v21;
    if (v18 <= v21)
      v18 = 12 * (v19 - v20);
    if (v18 >= 8 * (v14 - v22))
      v24 = v23;
    else
      v24 = 2;
    if (v24 == 2)
    {
      v7 = v22 + v14;
      if (v22 + v14 < 0 != __OFADD__(v22, v14))
        ++v7;
      v8 = v7 >> 1;
      v9[5] = v8;
    }
    else if (v24 == 1)
    {
      v15 = (_DWORD *)(v4 + 40 * v6 + 8);
      v29 = v20 + v19;
      if (v20 + v19 < 0 != __OFADD__(v20, v19))
        ++v29;
      v8 = v29 >> 1;
      v9[3] = v8;
    }
    else
    {
      v25 = v17 + v16;
      if (v17 + v16 < 0 != __OFADD__(v17, v16))
        ++v25;
      v8 = v25 >> 1;
      v9[1] = v25 >> 1;
      v15 = (_DWORD *)(v4 + 40 * v6);
    }
    *v15 = v8 + 1;
    sub_1003A6ED8(*(_QWORD *)(a1[78] + 48), v9);
    sub_1003A6ED8(*(_QWORD *)(a1[78] + 48), (int *)(v4 + 40 * v6++));
    if (v6 == v3)
      goto LABEL_33;
  }
  v3 = v6;
LABEL_33:
  v5 = v3;
  if (v3 >= 1)
  {
LABEL_34:
    v30 = 0;
    v57 = v5;
    v59 = v5;
    do
    {
      v35 = (int *)(v4 + 40 * v30);
      v36 = v35[1];
      v37 = *v35;
      if ((int)v37 <= v36
        && ((v38 = v35[3], v39 = v35[2], v40 = v35[5], v41 = *(_DWORD *)(v4 + 40 * v30 + 16), (int)v39 <= v38)
          ? (v42 = v41 <= v40)
          : (v42 = 0),
            v42))
      {
        v34 = 0;
        v33 = 0;
        v32 = 0;
        v31 = 0;
        v43 = v38 + 1;
        v44 = v36 + 1;
        v45 = v40 - v41 + 1;
        do
        {
          v46 = v39;
          do
          {
            v47 = (8 * v41) | 4;
            v48 = v45;
            v49 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1[78] + 48) + 8 * v37) + (v46 << 6) + 2 * v41);
            do
            {
              v50 = *v49++;
              v51 = v31 + v50;
              v52 = v32 + (int)v50 * (uint64_t)(int)((8 * v37) | 4);
              v53 = v33 + (int)v50 * (uint64_t)(int)((4 * v46) | 2);
              v54 = v34 + (int)v50 * (uint64_t)v47;
              if (v50)
              {
                v31 = v51;
                v32 = v52;
                v33 = v53;
                v34 = v54;
              }
              v47 += 8;
              --v48;
            }
            while (v48);
            ++v46;
          }
          while (v43 != (_DWORD)v46);
          ++v37;
        }
        while (v44 != (_DWORD)v37);
      }
      else
      {
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
      }
      *(_BYTE *)(*(_QWORD *)a1[18] + v30) = (v32 + (v31 >> 1)) / v31;
      *(_BYTE *)(*(_QWORD *)(a1[18] + 8) + v30) = (v33 + (v31 >> 1)) / v31;
      *(_BYTE *)(*(_QWORD *)(a1[18] + 16) + v30++) = (v34 + (v31 >> 1)) / v31;
    }
    while (v30 != v59);
    v5 = v57;
  }
  *((_DWORD *)a1 + 34) = v5;
  v55 = *a1;
  *(_DWORD *)(v55 + 40) = 98;
  *(_DWORD *)(v55 + 44) = v5;
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
  *(_BYTE *)(v58 + 56) = 1;
  return result;
}

uint64_t sub_1003A6ADC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  int v27;
  int v28;
  __int16 v29;
  _WORD *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  __int16 v36;
  __int16 v37;
  _WORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _WORD *v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;

  if (a4 >= 1)
  {
    v4 = *(_QWORD *)(result + 624);
    v5 = *(_DWORD *)(result + 116);
    v6 = 3 * v5;
    if (v5)
    {
      v7 = 0;
      v8 = *(_QWORD *)(v4 + 48);
      v9 = *(_QWORD *)(result + 408);
      v10 = *(_QWORD *)(v4 + 80);
      v11 = *(uint64_t **)(result + 144);
      v12 = *v11;
      v13 = v11[1];
      v14 = v11[2];
      v50 = (v5 - 1);
      v51 = (v6 + 3);
      v49 = (v6 - 3);
      v52 = a4;
      v54 = *(_QWORD *)(result + 624);
      v53 = *(_DWORD *)(result + 116);
      v62 = v9;
      v63 = v8;
      v60 = *v11;
      v61 = v10;
      v58 = v14;
      v59 = v13;
      do
      {
        v15 = *(_QWORD *)(a2 + 8 * v7);
        v16 = *(_BYTE **)(a3 + 8 * v7);
        v57 = v7;
        if (*(_BYTE *)(v4 + 72))
        {
          v17 = 0;
          v15 += v49;
          v16 += v50;
          v18 = *(_QWORD *)(v4 + 64) + 2 * v51;
          v19 = -3;
          v20 = -1;
        }
        else
        {
          v18 = *(_QWORD *)(v4 + 64);
          v19 = 3;
          v17 = 1;
          v20 = 1;
        }
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(v4 + 72) = v17;
        v29 = 0;
        v67 = v19;
        v66 = v19;
        v30 = (_WORD *)(v18 + 2);
        v31 = (unsigned __int8 *)(v15 + 2);
        v64 = v20;
        do
        {
          v68 = v26;
          v69 = v25;
          v70 = v24;
          v71 = v23;
          v72 = v22;
          v38 = &v30[v66];
          v39 = *(unsigned __int8 *)(v9
                                   + *(int *)(v10 + 4 * ((v21 + (__int16)v30[v66 - 1] + 8) >> 4))
                                   + (unint64_t)*(v31 - 2));
          v40 = *(unsigned __int8 *)(v9
                                   + *(int *)(v10 + 4 * ((v28 + (__int16)v30[v66] + 8) >> 4))
                                   + (unint64_t)*(v31 - 1));
          v41 = *(unsigned __int8 *)(v9
                                   + *(int *)(v10 + 4 * ((v27 + (__int16)v30[v66 + 1] + 8) >> 4))
                                   + (unint64_t)*v31);
          v42 = (_WORD *)(*(_QWORD *)(v8 + 8 * (v39 >> 3)) + (v40 >> 2 << 6) + 2 * (v41 >> 3));
          v43 = (unsigned __int16)*v42;
          if (!*v42)
          {
            v44 = result;
            v65 = v29;
            sub_1003A7448(result, v39 >> 3, v40 >> 2, v41 >> 3);
            v29 = v65;
            v8 = v63;
            v20 = v64;
            v13 = v59;
            v12 = v60;
            v10 = v61;
            v9 = v62;
            result = v44;
            v14 = v58;
            v43 = (unsigned __int16)*v42;
          }
          v32 = v43 - 1;
          *v16 = v32;
          v33 = v39 - *(unsigned __int8 *)(v12 + v32);
          v34 = v40 - *(unsigned __int8 *)(v13 + v32);
          v35 = v41 - *(unsigned __int8 *)(v14 + v32);
          v24 = 5 * v33 + v29;
          v36 = 3 * (v40 - *(unsigned __int8 *)(v13 + v32)) + v71;
          v23 = 5 * v34 + v68;
          v37 = 3 * (v41 - *(unsigned __int8 *)(v14 + v32)) + v72;
          v21 = 7 * v33;
          v22 = 5 * v35 + v69;
          v28 = 7 * v34;
          *(v30 - 1) = 3 * (v39 - *(unsigned __int8 *)(v12 + v32)) + v70;
          *v30 = v36;
          v27 = 7 * v35;
          v16 += v20;
          v31 += v67;
          v30[1] = v37;
          v30 = (_WORD *)((char *)v30 + v66 * 2);
          v25 = v35;
          v26 = v34;
          v29 = v33;
          --v5;
        }
        while (v5);
        *(v38 - 1) = v24;
        *v38 = v23;
        v38[1] = v22;
        v7 = v57 + 1;
        v4 = v54;
        v5 = v53;
      }
      while (v57 + 1 != v52);
    }
    else
    {
      v45 = *(_BYTE *)(v4 + 72);
      v46 = *(_QWORD *)(v4 + 64);
      do
      {
        v45 = v45 == 0;
        if (v45)
          v47 = 0;
        else
          v47 = (3 * v5 + 3);
        v48 = v46 + 2 * v47;
        *(_DWORD *)v48 = 0;
        *(_WORD *)(v48 + 4) = 0;
        --a4;
      }
      while (a4);
      *(_BYTE *)(v4 + 72) = v45;
    }
  }
  return result;
}

_BYTE *sub_1003A6DF0(_BYTE *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int16 *v16;
  __int16 v17;

  if (a4 >= 1)
  {
    v4 = (uint64_t)result;
    v5 = *((_DWORD *)result + 29);
    if (v5)
    {
      v7 = 0;
      v8 = *(_QWORD *)(*((_QWORD *)result + 78) + 48);
      v9 = a4;
      do
      {
        v10 = *(unsigned __int8 **)(a2 + 8 * v7);
        v11 = *(_BYTE **)(a3 + 8 * v7);
        v12 = v5;
        do
        {
          v13 = (unint64_t)*v10 >> 3;
          v14 = (unint64_t)v10[1] >> 2;
          v15 = (unint64_t)v10[2] >> 3;
          v16 = (__int16 *)(*(_QWORD *)(v8 + 8 * v13) + (v14 << 6) + 2 * v15);
          v17 = *v16;
          if (!*v16)
          {
            result = sub_1003A7448(v4, v13, v14, v15);
            LOBYTE(v17) = *(_BYTE *)v16;
          }
          *v11++ = v17 - 1;
          v10 += 3;
          --v12;
        }
        while (v12);
        ++v7;
      }
      while (v7 != v9);
    }
  }
  return result;
}

uint64_t sub_1003A6ED8(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _WORD *v16;
  int v17;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  _WORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  _WORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned __int16 *v50;
  int v51;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int8x16_t v56;
  uint64_t v57;
  int16x8_t *v58;
  uint64_t v59;
  int64x2_t v60;
  int64x2_t v61;
  unsigned __int16 *v62;
  uint64_t v63;
  int16x8_t *v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  uint16x8_t v71;
  uint32x4_t v72;
  int8x16_t v73;
  int64x2_t v74;
  int64x2_t v75;
  uint32x4_t v76;
  int64x2_t v77;
  int64x2_t v78;
  uint16x8_t v79;
  uint32x4_t v80;
  int64x2_t v81;
  int64x2_t v82;
  uint32x4_t v83;
  int64x2_t v84;
  int v85;

  LODWORD(v3) = *a2;
  v2 = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  v6 = v4;
  v7 = a2[4];
  v8 = a2[5];
  v9 = v7;
  v10 = v2 > *a2 && v4 <= v5;
  if (v10 && v7 <= v8)
  {
    v12 = (int)v3;
    if (v2 <= (int)v3)
      v13 = *a2;
    else
      v13 = a2[1];
    v14 = v13 + 1;
    do
    {
      v15 = v4;
      while (2)
      {
        v16 = (_WORD *)(*(_QWORD *)(result + 8 * v12) + (v15 << 6) + 2 * v7);
        v17 = v8 - v7 + 1;
        do
        {
          if (*v16)
          {
            *a2 = v12;
            LODWORD(v3) = v12;
            goto LABEL_21;
          }
          ++v16;
          --v17;
        }
        while (v17);
        if (v5 + 1 != (_DWORD)++v15)
          continue;
        break;
      }
      ++v12;
    }
    while (v14 != (_DWORD)v12);
  }
LABEL_21:
  if (v2 > (int)v3 && v4 <= v5 && v7 <= v8)
  {
    v20 = v2;
    do
    {
      v21 = v4;
      while (2)
      {
        v22 = (_WORD *)(*(_QWORD *)(result + 8 * v20) + (v21 << 6) + 2 * v7);
        v23 = v8 - v7 + 1;
        do
        {
          if (*v22)
          {
            a2[1] = v20;
            v2 = v20;
            goto LABEL_39;
          }
          ++v22;
          --v23;
        }
        while (v23);
        if (v5 + 1 != (_DWORD)++v21)
          continue;
        break;
      }
      v10 = v20-- <= (int)v3;
    }
    while (!v10);
  }
LABEL_39:
  if (v5 > v4 && v2 >= (int)v3 && v7 <= v8)
  {
    if (v4 <= v5)
      v24 = v5;
    else
      v24 = v4;
    v25 = v24 + 1;
    do
    {
      v26 = (int)v3;
      while (2)
      {
        v27 = (_WORD *)(*(_QWORD *)(result + 8 * v26) + (v6 << 6) + 2 * v7);
        v28 = v8 - v7 + 1;
        do
        {
          if (*v27)
          {
            a2[2] = v6;
            v4 = v6;
            goto LABEL_54;
          }
          ++v27;
          --v28;
        }
        while (v28);
        if (v2 + 1 != (_DWORD)++v26)
          continue;
        break;
      }
      ++v6;
    }
    while (v25 != (_DWORD)v6);
  }
LABEL_54:
  if (v5 > v4 && v2 >= (int)v3 && v7 <= v8)
  {
    v29 = v5;
    do
    {
      v30 = (int)v3;
      while (2)
      {
        v31 = (_WORD *)(*(_QWORD *)(result + 8 * v30) + (v29 << 6) + 2 * v7);
        v32 = v8 - v7 + 1;
        do
        {
          if (*v31)
          {
            a2[3] = v29;
            v5 = v29;
            goto LABEL_67;
          }
          ++v31;
          --v32;
        }
        while (v32);
        if (v2 + 1 != (_DWORD)++v30)
          continue;
        break;
      }
      v10 = v29-- <= v4;
    }
    while (!v10);
  }
LABEL_67:
  if (v8 > v7 && v2 >= (int)v3 && v5 >= v4)
  {
    if (v7 <= v8)
      v33 = v8;
    else
      v33 = v7;
    v34 = v33 + 1;
    do
    {
      v35 = (int)v3;
      while (2)
      {
        v36 = (_WORD *)(*(_QWORD *)(result + 8 * v35) + ((uint64_t)v4 << 6) + 2 * v9);
        v37 = v5 - v4 + 1;
        do
        {
          if (*v36)
          {
            a2[4] = v9;
            v7 = v9;
            goto LABEL_82;
          }
          v36 += 32;
          --v37;
        }
        while (v37);
        if (v2 + 1 != (_DWORD)++v35)
          continue;
        break;
      }
      ++v9;
    }
    while (v34 != (_DWORD)v9);
  }
LABEL_82:
  if (v8 > v7 && v2 >= (int)v3 && v5 >= v4)
  {
    v38 = v8;
    do
    {
      v39 = (int)v3;
      while (2)
      {
        v40 = (_WORD *)(*(_QWORD *)(result + 8 * v39) + ((uint64_t)v4 << 6) + 2 * v38);
        v41 = v5 - v4 + 1;
        do
        {
          if (*v40)
          {
            a2[5] = v38;
            v8 = v38;
            goto LABEL_95;
          }
          v40 += 32;
          --v41;
        }
        while (v41);
        if (v2 + 1 != (_DWORD)++v39)
          continue;
        break;
      }
      v10 = v38-- <= v7;
    }
    while (!v10);
  }
LABEL_95:
  v42 = (v8 - v7);
  *((_QWORD *)a2 + 3) = 12 * (v5 - v4) * (uint64_t)(12 * (v5 - v4))
                      + 16 * (v2 - (int)v3) * (uint64_t)(16 * (v2 - (int)v3))
                      + 8 * (int)v42 * (uint64_t)(8 * (int)v42);
  if (v2 < (int)v3)
  {
    v43 = 0;
LABEL_97:
    *((_QWORD *)a2 + 4) = v43;
    return result;
  }
  if (v5 >= v4)
  {
    v44 = v8 - v7;
    if (v8 >= v7)
    {
      v46 = v5 + 1;
      v3 = (int)v3;
      v47 = v2 + 1;
      if (v42 >= 0xF)
      {
        v43 = 0;
        v53 = v42 + 1;
        v54 = (v42 + 1) & 0x1FFFFFFF0;
        v55 = v44 - v54 + 1;
        v56 = (int8x16_t)vdupq_n_s64(1uLL);
        do
        {
          v57 = *(_QWORD *)(result + 8 * v3);
          v58 = (int16x8_t *)(v57 + ((uint64_t)v4 << 6) + 2 * v7 + 16);
          v59 = v4;
          do
          {
            v60 = 0uLL;
            v61 = (int64x2_t)(unint64_t)v43;
            v62 = (unsigned __int16 *)(v57 + (v59 << 6) + 2 * v7 + 2 * v54);
            v63 = v54;
            v64 = v58;
            v65 = 0uLL;
            v66 = 0uLL;
            v67 = 0uLL;
            v68 = 0uLL;
            v69 = 0uLL;
            v70 = 0uLL;
            do
            {
              v71 = (uint16x8_t)vtstq_s16(v64[-1], v64[-1]);
              v72 = vmovl_u16(*(uint16x4_t *)v71.i8);
              v73.i64[0] = v72.u32[0];
              v73.i64[1] = v72.u32[1];
              v74 = (int64x2_t)vandq_s8(v73, v56);
              v73.i64[0] = v72.u32[2];
              v73.i64[1] = v72.u32[3];
              v75 = (int64x2_t)vandq_s8(v73, v56);
              v76 = vmovl_high_u16(v71);
              v73.i64[0] = v76.u32[0];
              v73.i64[1] = v76.u32[1];
              v77 = (int64x2_t)vandq_s8(v73, v56);
              v73.i64[0] = v76.u32[2];
              v73.i64[1] = v76.u32[3];
              v78 = (int64x2_t)vandq_s8(v73, v56);
              v79 = (uint16x8_t)vtstq_s16(*v64, *v64);
              v80 = vmovl_u16(*(uint16x4_t *)v79.i8);
              v73.i64[0] = v80.u32[0];
              v73.i64[1] = v80.u32[1];
              v81 = (int64x2_t)vandq_s8(v73, v56);
              v73.i64[0] = v80.u32[2];
              v73.i64[1] = v80.u32[3];
              v82 = (int64x2_t)vandq_s8(v73, v56);
              v83 = vmovl_high_u16(v79);
              v73.i64[0] = v83.u32[0];
              v73.i64[1] = v83.u32[1];
              v84 = (int64x2_t)vandq_s8(v73, v56);
              v73.i64[0] = v83.u32[2];
              v73.i64[1] = v83.u32[3];
              v66 = vaddq_s64(v66, v78);
              v65 = vaddq_s64(v65, v77);
              v60 = vaddq_s64(v60, v75);
              v61 = vaddq_s64(v61, v74);
              v70 = vaddq_s64(v70, (int64x2_t)vandq_s8(v73, v56));
              v69 = vaddq_s64(v69, v84);
              v68 = vaddq_s64(v68, v82);
              v67 = vaddq_s64(v67, v81);
              v64 += 2;
              v63 -= 16;
            }
            while (v63);
            v43 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v67, v61), vaddq_s64(v69, v65)), vaddq_s64(vaddq_s64(v68, v60), vaddq_s64(v70, v66))));
            if (v53 != v54)
            {
              v85 = v55;
              do
              {
                if (*v62++)
                  ++v43;
                --v85;
              }
              while (v85);
            }
            ++v59;
            v58 += 4;
          }
          while (v46 != (_DWORD)v59);
          ++v3;
        }
        while (v47 != (_DWORD)v3);
      }
      else
      {
        v43 = 0;
        v48 = v44 + 1;
        do
        {
          v49 = v4;
          do
          {
            v50 = (unsigned __int16 *)(*(_QWORD *)(result + 8 * v3) + (v49 << 6) + 2 * v7);
            v51 = v48;
            do
            {
              if (*v50++)
                ++v43;
              --v51;
            }
            while (v51);
            ++v49;
          }
          while (v46 != (_DWORD)v49);
          ++v3;
        }
        while (v47 != (_DWORD)v3);
      }
      goto LABEL_97;
    }
    v45 = v2 - v3 + 1;
    do
      --v45;
    while (v45);
    *((_QWORD *)a2 + 4) = 0;
  }
  else
  {
    *((_QWORD *)a2 + 4) = 0;
  }
  return result;
}

_BYTE *sub_1003A7448(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  signed int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  _BYTE *result;
  uint64_t v104;
  uint64_t v105;
  _WORD *v106;
  _WORD *v107;
  _WORD *v108;
  _WORD *v109;
  _WORD *v110;
  _WORD *v111;
  _WORD *v112;
  _WORD *v113;
  uint64_t v117;
  _BYTE v118[15];
  _BYTE v119[369];
  _QWORD __b[16];
  uint64_t v121;

  v117 = *(_QWORD *)(*(_QWORD *)(a1 + 624) + 48);
  v4 = *(unsigned int *)(a1 + 136);
  if ((int)v4 <= 0)
    goto LABEL_102;
  v5 = 0;
  v6 = (32 * (a2 >> 2)) | 4;
  v7 = 4 * a3;
  v8 = v7 & 0xFFFFFFFFFFFFFFE0 | 2;
  v9 = 8 * a4;
  v10 = v9 & 0xFFFFFFFFFFFFFFE0 | 4;
  v11 = (8 * a2) | 0x1C;
  v12 = v7 | 0x1E;
  v13 = (v8 + (v7 | 0x1E)) >> 1;
  v14 = v9 | 0x1C;
  v15 = *(uint64_t **)(a1 + 144);
  v16 = *v15;
  v17 = v15[1];
  v18 = v15[2];
  v19 = 0x7FFFFFFFLL;
  do
  {
    v40 = *(unsigned __int8 *)(v16 + v5);
    v21 = v40 - v6;
    if (v40 < v6)
    {
      v20 = 2 * v21 * (uint64_t)(2 * v21);
      v21 = v40 - v11;
LABEL_4:
      v22 = 2 * v21;
      goto LABEL_5;
    }
    v41 = v40 - v11;
    if (v40 > v11)
    {
      v20 = 2 * v41 * (uint64_t)(2 * v41);
      goto LABEL_4;
    }
    if ((v6 + v11) >> 1 < v40)
    {
      v20 = 0;
      goto LABEL_4;
    }
    v20 = 0;
    v22 = 2 * v41;
LABEL_5:
    v23 = v22 * (uint64_t)v22;
    v24 = *(unsigned __int8 *)(v17 + v5);
    v25 = 3 * (v24 - (int)v8) * 3 * (v24 - (int)v8);
    v26 = 3 * (v24 - (int)v12);
    v27 = v26 * v26;
    if (v13 < v24)
      v27 = 3 * (v24 - (int)v8) * 3 * (v24 - (int)v8);
    v28 = v20 + v26 * v26;
    if ((int)v24 <= (int)v12)
    {
      v28 = v20;
      v25 = v27;
    }
    v29 = v20 + 3 * (v24 - v8) * 3 * (v24 - v8);
    if ((int)v24 < (int)v8)
    {
      v30 = 3 * (v24 - v12) * 3 * (v24 - v12);
    }
    else
    {
      v29 = v28;
      v30 = v25;
    }
    v31 = v30 + v23;
    v32 = *(unsigned __int8 *)(v18 + v5);
    v33 = (v32 - (int)v10) * (v32 - (int)v10);
    v34 = v32 - (int)v14;
    v35 = v34 * v34;
    if ((v10 + v14) >> 1 < v32)
      v35 = (v32 - (int)v10) * (v32 - (int)v10);
    v36 = v29 + v34 * v34;
    if ((int)v32 <= (int)v14)
    {
      v36 = v29;
      v33 = v35;
    }
    v37 = v29 + (v32 - v10) * (v32 - v10);
    if ((int)v32 < (int)v10)
    {
      v38 = (v32 - v14) * (v32 - v14);
    }
    else
    {
      v37 = v36;
      v38 = v33;
    }
    v39 = v31 + v38;
    __b[v5] = v37;
    if (v39 < v19)
      v19 = v39;
    ++v5;
  }
  while (v4 != v5);
  v42 = 0;
  v43 = 0;
  do
  {
    if (__b[v42] <= v19)
      v119[v43++ + 113] = v42;
    ++v42;
  }
  while (v4 != v42);
  memset_pattern16(__b, &unk_1003C6890, 0x400uLL);
  if (v43 >= 1)
  {
    v44 = 0;
    v45 = (int)v8;
    v46 = (int)v10;
    v47 = v43;
    do
    {
      v48 = 0;
      v49 = v119[v44 + 113];
      v50 = 2 * (v6 - *(unsigned __int8 *)(*v15 + v49));
      v51 = v45 - *(unsigned __int8 *)(v17 + v49);
      v52 = v46 - *(unsigned __int8 *)(v18 + v49);
      v53 = 3 * v51 * 3 * v51 + v50 * (uint64_t)v50 + v52 * v52;
      v54 = 32 * v50 + 256;
      v55 = 72 * v51;
      v56 = 72 * v51 + 144;
      v57 = 16 * v52;
      v58 = 16 * v52 + 64;
      v59 = v57 + 192;
      v60 = v57 + 320;
      v61 = v55 + 432;
      v62 = v55 + 720;
      v63 = v55 + 1008;
      v64 = v55 + 1296;
      v65 = v55 + 1584;
      v66 = v55 + 1872;
      v67 = v119;
      v68 = &v121;
      do
      {
        if (v53 < *(v68 - 16))
        {
          *(v68 - 16) = v53;
          *(v67 - 15) = v49;
          v69 = v53 + v58;
          if (v53 + v58 >= *(v68 - 15))
          {
LABEL_39:
            v70 = v69 + v59;
            if (v70 >= *(v68 - 14))
              goto LABEL_40;
            goto LABEL_72;
          }
        }
        else
        {
          v69 = v53 + v58;
          if (v53 + v58 >= *(v68 - 15))
            goto LABEL_39;
        }
        *(v68 - 15) = v69;
        *(v67 - 14) = v49;
        v70 = v69 + v59;
        if (v70 >= *(v68 - 14))
        {
LABEL_40:
          v71 = v70 + v60;
          if (v71 >= *(v68 - 13))
            goto LABEL_41;
          goto LABEL_73;
        }
LABEL_72:
        *(v68 - 14) = v70;
        *(v67 - 13) = v49;
        v71 = v70 + v60;
        if (v71 >= *(v68 - 13))
        {
LABEL_41:
          v72 = v56 + v53;
          if (v56 + v53 >= *(v68 - 12))
            goto LABEL_42;
          goto LABEL_74;
        }
LABEL_73:
        *(v68 - 13) = v71;
        *(v67 - 12) = v49;
        v72 = v56 + v53;
        if (v56 + v53 >= *(v68 - 12))
        {
LABEL_42:
          v73 = v72 + v58;
          if (v72 + v58 >= *(v68 - 11))
            goto LABEL_43;
          goto LABEL_75;
        }
LABEL_74:
        *(v68 - 12) = v72;
        *(v67 - 11) = v49;
        v73 = v72 + v58;
        if (v72 + v58 >= *(v68 - 11))
        {
LABEL_43:
          v74 = v73 + v59;
          if (v74 >= *(v68 - 10))
            goto LABEL_44;
          goto LABEL_76;
        }
LABEL_75:
        *(v68 - 11) = v73;
        *(v67 - 10) = v49;
        v74 = v73 + v59;
        if (v74 >= *(v68 - 10))
        {
LABEL_44:
          v75 = v74 + v60;
          if (v75 >= *(v68 - 9))
            goto LABEL_45;
          goto LABEL_77;
        }
LABEL_76:
        *(v68 - 10) = v74;
        *(v67 - 9) = v49;
        v75 = v74 + v60;
        if (v75 >= *(v68 - 9))
        {
LABEL_45:
          v76 = v61 + v72;
          if (v76 >= *(v68 - 8))
            goto LABEL_46;
          goto LABEL_78;
        }
LABEL_77:
        *(v68 - 9) = v75;
        *(v67 - 8) = v49;
        v76 = v61 + v72;
        if (v76 >= *(v68 - 8))
        {
LABEL_46:
          v77 = v76 + v58;
          if (v76 + v58 >= *(v68 - 7))
            goto LABEL_47;
          goto LABEL_79;
        }
LABEL_78:
        *(v68 - 8) = v76;
        *(v67 - 7) = v49;
        v77 = v76 + v58;
        if (v76 + v58 >= *(v68 - 7))
        {
LABEL_47:
          v78 = v77 + v59;
          if (v78 >= *(v68 - 6))
            goto LABEL_48;
          goto LABEL_80;
        }
LABEL_79:
        *(v68 - 7) = v77;
        *(v67 - 6) = v49;
        v78 = v77 + v59;
        if (v78 >= *(v68 - 6))
        {
LABEL_48:
          v79 = v78 + v60;
          if (v79 >= *(v68 - 5))
            goto LABEL_49;
          goto LABEL_81;
        }
LABEL_80:
        *(v68 - 6) = v78;
        *(v67 - 5) = v49;
        v79 = v78 + v60;
        if (v79 >= *(v68 - 5))
        {
LABEL_49:
          v80 = v62 + v76;
          if (v80 >= *(v68 - 4))
            goto LABEL_50;
          goto LABEL_82;
        }
LABEL_81:
        *(v68 - 5) = v79;
        *(v67 - 4) = v49;
        v80 = v62 + v76;
        if (v80 >= *(v68 - 4))
        {
LABEL_50:
          v81 = v80 + v58;
          if (v80 + v58 >= *(v68 - 3))
            goto LABEL_51;
          goto LABEL_83;
        }
LABEL_82:
        *(v68 - 4) = v80;
        *(v67 - 3) = v49;
        v81 = v80 + v58;
        if (v80 + v58 >= *(v68 - 3))
        {
LABEL_51:
          v82 = v81 + v59;
          if (v82 >= *(v68 - 2))
            goto LABEL_52;
          goto LABEL_84;
        }
LABEL_83:
        *(v68 - 3) = v81;
        *(v67 - 2) = v49;
        v82 = v81 + v59;
        if (v82 >= *(v68 - 2))
        {
LABEL_52:
          v83 = v82 + v60;
          if (v83 >= *(v68 - 1))
            goto LABEL_53;
          goto LABEL_85;
        }
LABEL_84:
        *(v68 - 2) = v82;
        *(v67 - 1) = v49;
        v83 = v82 + v60;
        if (v83 >= *(v68 - 1))
        {
LABEL_53:
          v84 = v63 + v80;
          if (v84 >= *v68)
            goto LABEL_54;
          goto LABEL_86;
        }
LABEL_85:
        *(v68 - 1) = v83;
        *v67 = v49;
        v84 = v63 + v80;
        if (v84 >= *v68)
        {
LABEL_54:
          v85 = v84 + v58;
          if (v84 + v58 >= v68[1])
            goto LABEL_55;
          goto LABEL_87;
        }
LABEL_86:
        *v68 = v84;
        v67[1] = v49;
        v85 = v84 + v58;
        if (v84 + v58 >= v68[1])
        {
LABEL_55:
          v86 = v85 + v59;
          if (v86 >= v68[2])
            goto LABEL_56;
          goto LABEL_88;
        }
LABEL_87:
        v68[1] = v85;
        v67[2] = v49;
        v86 = v85 + v59;
        if (v86 >= v68[2])
        {
LABEL_56:
          v87 = v86 + v60;
          if (v87 >= v68[3])
            goto LABEL_57;
          goto LABEL_89;
        }
LABEL_88:
        v68[2] = v86;
        v67[3] = v49;
        v87 = v86 + v60;
        if (v87 >= v68[3])
        {
LABEL_57:
          v88 = v64 + v84;
          if (v88 >= v68[4])
            goto LABEL_58;
          goto LABEL_90;
        }
LABEL_89:
        v68[3] = v87;
        v67[4] = v49;
        v88 = v64 + v84;
        if (v88 >= v68[4])
        {
LABEL_58:
          v89 = v88 + v58;
          if (v88 + v58 >= v68[5])
            goto LABEL_59;
          goto LABEL_91;
        }
LABEL_90:
        v68[4] = v88;
        v67[5] = v49;
        v89 = v88 + v58;
        if (v88 + v58 >= v68[5])
        {
LABEL_59:
          v90 = v89 + v59;
          if (v90 >= v68[6])
            goto LABEL_60;
          goto LABEL_92;
        }
LABEL_91:
        v68[5] = v89;
        v67[6] = v49;
        v90 = v89 + v59;
        if (v90 >= v68[6])
        {
LABEL_60:
          v91 = v90 + v60;
          if (v91 >= v68[7])
            goto LABEL_61;
          goto LABEL_93;
        }
LABEL_92:
        v68[6] = v90;
        v67[7] = v49;
        v91 = v90 + v60;
        if (v91 >= v68[7])
        {
LABEL_61:
          v92 = v65 + v88;
          if (v92 >= v68[8])
            goto LABEL_62;
          goto LABEL_94;
        }
LABEL_93:
        v68[7] = v91;
        v67[8] = v49;
        v92 = v65 + v88;
        if (v92 >= v68[8])
        {
LABEL_62:
          v93 = v92 + v58;
          if (v92 + v58 >= v68[9])
            goto LABEL_63;
          goto LABEL_95;
        }
LABEL_94:
        v68[8] = v92;
        v67[9] = v49;
        v93 = v92 + v58;
        if (v92 + v58 >= v68[9])
        {
LABEL_63:
          v94 = v93 + v59;
          if (v94 >= v68[10])
            goto LABEL_64;
          goto LABEL_96;
        }
LABEL_95:
        v68[9] = v93;
        v67[10] = v49;
        v94 = v93 + v59;
        if (v94 >= v68[10])
        {
LABEL_64:
          v95 = v94 + v60;
          if (v95 >= v68[11])
            goto LABEL_65;
          goto LABEL_97;
        }
LABEL_96:
        v68[10] = v94;
        v67[11] = v49;
        v95 = v94 + v60;
        if (v95 >= v68[11])
        {
LABEL_65:
          v96 = v66 + v92;
          if (v96 >= v68[12])
            goto LABEL_66;
          goto LABEL_98;
        }
LABEL_97:
        v68[11] = v95;
        v67[12] = v49;
        v96 = v66 + v92;
        if (v96 >= v68[12])
        {
LABEL_66:
          v97 = v96 + v58;
          if (v97 >= v68[13])
            goto LABEL_67;
          goto LABEL_99;
        }
LABEL_98:
        v68[12] = v96;
        v67[13] = v49;
        v97 = v96 + v58;
        if (v97 >= v68[13])
        {
LABEL_67:
          v98 = v97 + v59;
          if (v98 < v68[14])
            goto LABEL_100;
          goto LABEL_68;
        }
LABEL_99:
        v68[13] = v97;
        v67[14] = v49;
        v98 = v97 + v59;
        if (v98 < v68[14])
        {
LABEL_100:
          v68[14] = v98;
          v67[15] = v49;
          v99 = v98 + v60;
          if (v99 >= v68[15])
            goto LABEL_36;
          goto LABEL_101;
        }
LABEL_68:
        v99 = v98 + v60;
        if (v99 >= v68[15])
          goto LABEL_36;
LABEL_101:
        v68[15] = v99;
        v67[16] = v49;
LABEL_36:
        v53 += v54 + v48;
        v48 += 512;
        v68 += 32;
        v67 += 32;
      }
      while ((_DWORD)v48 != 2048);
      ++v44;
    }
    while (v44 != v47);
  }
LABEL_102:
  v100 = 0;
  v101 = a3 & 0xFFFFFFFFFFFFFFF8;
  v102 = (uint64_t *)(v117 + 8 * (int)(a2 & 0xFFFFFFFC));
  result = v118;
  v104 = 2 * (a4 & 0xFFFFFFFC);
  do
  {
    v105 = *v102++;
    v106 = (_WORD *)(v105 + (v101 << 6) + v104);
    *v106 = v118[v100] + 1;
    v106[1] = v118[v100 + 1] + 1;
    v106[2] = v118[v100 + 2] + 1;
    v106[3] = v118[v100 + 3] + 1;
    v107 = (_WORD *)(v105 + ((v101 | 1) << 6) + v104);
    *v107 = v118[v100 + 4] + 1;
    v107[1] = v118[v100 + 5] + 1;
    v107[2] = v118[v100 + 6] + 1;
    v107[3] = v118[v100 + 7] + 1;
    v108 = (_WORD *)(v105 + ((v101 | 2) << 6) + v104);
    *v108 = v118[v100 + 8] + 1;
    v108[1] = v118[v100 + 9] + 1;
    v108[2] = v118[v100 + 10] + 1;
    v108[3] = v118[v100 + 11] + 1;
    v109 = (_WORD *)(v105 + ((v101 | 3) << 6) + v104);
    *v109 = v118[v100 + 12] + 1;
    v109[1] = v118[v100 + 13] + 1;
    v109[2] = v118[v100 + 14] + 1;
    v109[3] = v118[v100 + 15] + 1;
    v110 = (_WORD *)(v105 + ((v101 | 4) << 6) + v104);
    *v110 = v119[v100 + 1] + 1;
    v110[1] = v119[v100 + 2] + 1;
    v110[2] = v119[v100 + 3] + 1;
    v110[3] = v119[v100 + 4] + 1;
    v111 = (_WORD *)(v105 + ((v101 | 5) << 6) + v104);
    *v111 = v119[v100 + 5] + 1;
    v111[1] = v119[v100 + 6] + 1;
    v111[2] = v119[v100 + 7] + 1;
    v111[3] = v119[v100 + 8] + 1;
    v112 = (_WORD *)(v105 + ((v101 | 6) << 6) + v104);
    *v112 = v119[v100 + 9] + 1;
    v112[1] = v119[v100 + 10] + 1;
    v112[2] = v119[v100 + 11] + 1;
    v112[3] = v119[v100 + 12] + 1;
    v113 = (_WORD *)(v105 + ((v101 | 7) << 6) + v104);
    *v113 = v119[v100 + 13] + 1;
    v113[1] = v119[v100 + 14] + 1;
    v113[2] = v119[v100 + 15] + 1;
    v113[3] = v119[v100 + 16] + 1;
    v100 += 32;
  }
  while (v100 != 128);
  return result;
}

uint64_t sub_1003A7E94(uint64_t a1, uint64_t a2)
{
  return (a1 + a2 - 1) / a2;
}

uint64_t sub_1003A7EA4(uint64_t a1, uint64_t a2)
{
  return (a1 + a2 - 1) / a2 * a2;
}

char *sub_1003A7EB8(char *result, int a2, uint64_t a3, int a4, int a5, size_t __n)
{
  size_t v6;
  void **v7;
  unsigned int v8;
  const void **v9;
  const void *v10;
  const void *v11;
  void *v12;

  if (a5 >= 1)
  {
    v6 = __n;
    v7 = (void **)(a3 + 8 * a4);
    v8 = a5 + 1;
    v9 = (const void **)&result[8 * a2];
    do
    {
      v11 = *v9++;
      v10 = v11;
      v12 = *v7++;
      result = (char *)memcpy(v12, v10, v6);
      --v8;
    }
    while (v8 > 1);
  }
  return result;
}

void *sub_1003A7F0C(void *__src, void *__dst, unsigned int a3)
{
  return memcpy(__dst, __src, (unint64_t)a3 << 7);
}

void sub_1003A7F20()
{
  __assert_rtn("safeUnsignedCast", "OpenCVWrapperInternal.h", 73, "value >= 0 && \"int outside of valid range to cast to size_t\"");
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGColor");
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGImage");
}

id objc_msgSend_CGPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGPath");
}

id objc_msgSend__hasHomeButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasHomeButton");
}

id objc_msgSend__referenceBounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_referenceBounds");
}

id objc_msgSend__setInterfaceOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setInterfaceOrientation:");
}

id objc_msgSend__solveForInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_solveForInput:");
}

id objc_msgSend__updateForRotation_shiftAngle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateForRotation:shiftAngle:");
}

id objc_msgSend__updateOffsetLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOffsetLabel:");
}

id objc_msgSend_activateWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithCompletionBlock:");
}

id objc_msgSend_addChildViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChildViewController:");
}

id objc_msgSend_addGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGestureRecognizer:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addSublayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSublayer:");
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubview:");
}

id objc_msgSend_addToRunLoop_forMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addToRunLoop:forMode:");
}

id objc_msgSend_animateAlongsideTransition_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateAlongsideTransition:completion:");
}

id objc_msgSend_attitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attitude");
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "begin");
}

id objc_msgSend_bezierPathWithOvalInRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPathWithOvalInRect:");
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blackColor");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bounds");
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "center");
}

id objc_msgSend_childViewControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childViewControllers");
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearColor");
}

id objc_msgSend_clone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clone");
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commit");
}

id objc_msgSend_configure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configure");
}

id objc_msgSend_contours(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contours");
}

id objc_msgSend_corners(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "corners");
}

id objc_msgSend_correctionRotationAngleForReferenceOrientation_targetOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "correctionRotationAngleForReferenceOrientation:targetOrientation:");
}

id objc_msgSend_correctionRotationBoundsForReferenceOrientation_targetOrientation_bounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "correctionRotationBoundsForReferenceOrientation:targetOrientation:bounds:");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_counterRotateChildrenForBoundsOrOrientationChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "counterRotateChildrenForBoundsOrOrientationChange");
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDevice");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_deactivate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivate");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultConfiguration");
}

id objc_msgSend_deviceMotion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceMotion");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didMoveToParentViewController:");
}

id objc_msgSend_displayLinkWithTarget_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayLinkWithTarget:selector:");
}

id objc_msgSend_filterWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterWithType:");
}

id objc_msgSend_floatForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatForKey:");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatValue");
}

id objc_msgSend_functionWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "functionWithName:");
}

id objc_msgSend_getRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRed:green:blue:alpha:");
}

id objc_msgSend_image(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "image");
}

id objc_msgSend_imageWithCGImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithCGImage:");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithConfiguration_view_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:view:");
}

id objc_msgSend_initWithContours_originalImageSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContours:originalImageSize:");
}

id objc_msgSend_initWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:");
}

id objc_msgSend_initWithImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:");
}

id objc_msgSend_initWithTarget_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:action:");
}

id objc_msgSend_interfaceLockedToPortrait(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceLockedToPortrait");
}

id objc_msgSend_interfaceOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceOrientation");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_isAutorotationEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAutorotationEnabled");
}

id objc_msgSend_isOverriddingStatusBarOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOverriddingStatusBarOrientation");
}

id objc_msgSend_isViewLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isViewLoaded");
}

id objc_msgSend_labelFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelFont");
}

id objc_msgSend_layer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layer");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithFormat:");
}

id objc_msgSend_lockRendererOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockRendererOrientation");
}

id objc_msgSend_lockedOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockedOrientation");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainRunLoop");
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainScreen");
}

id objc_msgSend_multiplyByInverseOfAttitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multiplyByInverseOfAttitude:");
}

id objc_msgSend_notifyViewHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyViewHidden");
}

id objc_msgSend_notifyViewShown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyViewShown");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_orientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orientation");
}

id objc_msgSend_orientationLockedView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orientationLockedView");
}

id objc_msgSend_orientationToLockTo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orientationToLockTo");
}

id objc_msgSend_originalImageSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "originalImageSize");
}

id objc_msgSend_performWhileInterfaceOrientationLocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWhileInterfaceOrientationLocked:");
}

id objc_msgSend_performWithoutAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithoutAnimation:");
}

id objc_msgSend_registerDefaults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDefaults:");
}

id objc_msgSend_removeFromRunLoop_forMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFromRunLoop:forMode:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_renderer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderer");
}

id objc_msgSend_rotationAngleForOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotationAngleForOrientation:");
}

id objc_msgSend_rotationMatrix(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotationMatrix");
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_setAllowsEdgeAntialiasing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsEdgeAntialiasing:");
}

id objc_msgSend_setAnchorPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnchorPoint:");
}

id objc_msgSend_setAutoresizingMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoresizingMask:");
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundColor:");
}

id objc_msgSend_setCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCenter:");
}

id objc_msgSend_setClipsToBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClipsToBounds:");
}

id objc_msgSend_setCompositingFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompositingFilter:");
}

id objc_msgSend_setDeviceMotionUpdateInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceMotionUpdateInterval:");
}

id objc_msgSend_setDisableActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableActions:");
}

id objc_msgSend_setFillColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFillColor:");
}

id objc_msgSend_setFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFont:");
}

id objc_msgSend_setFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrame:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHoldAttitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHoldAttitude:");
}

id objc_msgSend_setIdleTimerDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdleTimerDisabled:");
}

id objc_msgSend_setInterfaceLockedToPortrait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterfaceLockedToPortrait:");
}

id objc_msgSend_setOverriddenStatusBarOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverriddenStatusBarOrientation:");
}

id objc_msgSend_setOverriddingStatusBarOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverriddingStatusBarOrientation:");
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPath:");
}

id objc_msgSend_setPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPosition:");
}

id objc_msgSend_setPreviousOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousOrientation:");
}

id objc_msgSend_setShowsDeviceMovementDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsDeviceMovementDisplay:");
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setText:");
}

id objc_msgSend_setTextColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextColor:");
}

id objc_msgSend_setTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransform:");
}

id objc_msgSend_sharedApplication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedApplication");
}

id objc_msgSend_sizeToFit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeToFit");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_startDeviceMotionUpdatesUsingReferenceFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDeviceMotionUpdatesUsingReferenceFrame:");
}

id objc_msgSend_statusBarOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusBarOrientation");
}

id objc_msgSend_superview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "superview");
}

id objc_msgSend_systemGreenColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemGreenColor");
}

id objc_msgSend_systemRedColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemRedColor");
}

id objc_msgSend_traitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollection");
}

id objc_msgSend_transitionCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionCoordinator");
}

id objc_msgSend_tweakedConfigurationForCaller_usage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tweakedConfigurationForCaller:usage:");
}

id objc_msgSend_updateColors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateColors");
}

id objc_msgSend_updateDegreesLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDegreesLabel");
}

id objc_msgSend_updateLevelWithForcedInterfaceUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLevelWithForcedInterfaceUpdate:");
}

id objc_msgSend_updateTicsForOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTicsForOrientation:");
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceIdiom");
}

id objc_msgSend_valueWithCGPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithCGPoint:");
}

id objc_msgSend_verticalSizeClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verticalSizeClass");
}

id objc_msgSend_view(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "view");
}

id objc_msgSend_whiteColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whiteColor");
}

id objc_msgSend_xxx_sizeThatFits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xxx_sizeThatFits:");
}

