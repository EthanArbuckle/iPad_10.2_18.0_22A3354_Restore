void sub_100003784(uint64_t a1)
{
  objc_class *v1;
  objc_method *InstanceMethod;
  objc_method *v3;
  void (*Implementation)(void);
  const char *TypeEncoding;
  void (*v6)(void);
  const char *v7;

  v1 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
  InstanceMethod = class_getInstanceMethod(v1, "interfaceOrientation");
  v3 = class_getInstanceMethod(v1, "xxx_interfaceOrientation");
  Implementation = method_getImplementation(v3);
  TypeEncoding = method_getTypeEncoding(v3);
  if (class_addMethod(v1, "interfaceOrientation", Implementation, TypeEncoding))
  {
    v6 = method_getImplementation(InstanceMethod);
    v7 = method_getTypeEncoding(InstanceMethod);
    class_replaceMethod(v1, "xxx_interfaceOrientation", v6, v7);
  }
  else
  {
    method_exchangeImplementations(InstanceMethod, v3);
  }
}

double sub_10000388C(double a1, double a2)
{
  double v2;

  if (a2 <= 3.14159265)
  {
    if (a2 < -3.14159265)
      a2 = a2 + 6.28318531;
  }
  else
  {
    a2 = -(6.28318531 - a2);
  }
  v2 = a2 - a1;
  if (a2 - a1 > 3.14159265)
    return a1 - (6.28318531 - v2);
  if (v2 < -3.14159265)
    return v2 + 6.28318531 + a1;
  return a2;
}

double sub_100003910(double a1, double a2, double a3)
{
  return a1 + a3 * (a2 - a1);
}

id sub_100003A44(uint64_t a1)
{
  objc_super v2;

  v2.receiver = *(id *)(a1 + 32);
  v2.super_class = (Class)NonRotatingARSCNView;
  return objc_msgSendSuper2(&v2, "layoutSubviews");
}

id sub_100004F78(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 312), "impactOccurredWithIntensity:atLocation:", 1.0, 0.0, 1.0);
}

void sub_100006BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  sub_100006BE4((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_100006BE4(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 20);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      sub_100256C90(a1);
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 64);
    do
      *(_DWORD *)(v7 + 4 * v6++) = 0;
    while (v6 < *(int *)(a1 + 4));
  }
  v8 = *(void **)(a1 + 72);
  if (v8 != (void *)(a1 + 80))
    j__free(v8);
  return a1;
}

void sub_100006DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_100006BE4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100006F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_100006BE4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100007210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1000075AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100007A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100007AAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100007B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;

  a13 = (void **)&a16;
  sub_100008E68(&a13);

  _Unwind_Resume(a1);
}

void sub_100007BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100007BF0(uint64_t a1, int a2)
{
  __n128 *v3;
  __n128 *v4;
  uint64_t v5;
  unint64_t v6;
  float v7;
  __n128 *v9;
  int v12;
  __n128 *v13;
  uint64_t v14;
  char v15[8];
  float v16;
  float v17;

  v4 = *(__n128 **)a1;
  v3 = *(__n128 **)(a1 + 8);
  if (*(__n128 **)a1 == v3)
    goto LABEL_22;
  if (a2 < 0)
    sub_1003A7F20();
  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2;
  v7 = (float)a2;
  while (v6 <= (uint64_t)(v4->n128_u64[1] - v4->n128_u64[0]) >> 3)
  {
    v13 = v4;
    v14 = 0;
    v12 = -2130509812;
    sub_10034297C((uint64_t)&v12, (uint64_t)v15);
    if (v16 < v7 && v17 < v7)
      break;
    v4 = (__n128 *)((char *)v4 + 24);
    if (v4 == v3)
      return sub_100008400(a1, v5, *(__n128 **)(a1 + 8));
  }
  if (v4 != v3)
  {
    v9 = (__n128 *)((char *)v4 + 24);
    if (&v4[1].n128_i8[8] != (__int8 *)v3)
    {
      v5 = (uint64_t)v4;
      do
      {
        if (v6 <= (uint64_t)(v9->n128_u64[1] - v9->n128_u64[0]) >> 3)
        {
          v13 = v9;
          v14 = 0;
          v12 = -2130509812;
          sub_10034297C((uint64_t)&v12, (uint64_t)v15);
          if (v16 >= v7 || v17 >= v7)
          {
            sub_100009590(v5, v9);
            v5 += 24;
          }
        }
        v9 = (__n128 *)((char *)v9 + 24);
      }
      while (v9 != v3);
      return sub_100008400(a1, v5, *(__n128 **)(a1 + 8));
    }
LABEL_22:
    v5 = (uint64_t)v4;
  }
  return sub_100008400(a1, v5, *(__n128 **)(a1 + 8));
}

void sub_100007F08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  sub_100006BE4(v3 - 192);

  _Unwind_Resume(a1);
}

void sub_1000081B4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_100006BE4(v2 - 184);

  _Unwind_Resume(a1);
}

void sub_1000083C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_100008400(uint64_t a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  if ((__n128 *)a2 != a3)
  {
    sub_1000095E0(a3, *(__n128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      v8 = *(_QWORD *)(a1 + 8);
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v7 - 16) = v9;
          operator delete(v9);
        }
        v7 = v8;
      }
      while (v8 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void sub_1000085D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100008754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10000876C(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return 0;
  else
    return dword_1003AE784[a1 - 1];
}

void sub_100008790(uint64_t a1, _QWORD *a2, _DWORD *a3, int a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  int32x2_t *v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  float32x2_t v25;
  int32x2_t v26;
  float32x2_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  float *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  float *v50;
  int v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  float v57;
  double v58;
  double v59;
  unint64_t v60;
  double *v61;
  double *v62;
  double *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  double *v69;
  double *v70;
  __int128 v71;
  float *v72;
  char *v73;
  char *v74;
  void *__p;
  uint64_t *v76;
  uint64_t *v77;

  __p = 0;
  v76 = 0;
  v77 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v4 = a2[1] - *a2;
  if ((unint64_t)v4 > 0xA7)
  {
    v10 = 0;
    v11 = v4 >> 3;
    v12 = v11 >= 0x14;
    v13 = v11 - 20;
    if (!v12)
      v13 = 0;
    if (v13 <= 1)
      v14 = 1;
    else
      v14 = v13;
    v15 = 0.0;
    v16 = 0xFFFFFFFFLL;
    do
    {
      v17 = (int32x2_t *)(*a2 + 8 * v10);
      v18 = vcvt_f32_s32(*v17);
      v19 = vcvt_f32_s32(*(int32x2_t *)(*a2 + 8 * (v10 + 10)));
      v20 = vcvt_f32_s32(v17[20]);
      v21 = vsub_f32(v19, v18);
      v22 = vsub_f32(v20, v18);
      v23 = vmul_f32(v22, v22);
      v24 = (int32x2_t)vmul_f32(v21, v21);
      v25 = vsub_f32(v20, v19);
      v26 = (int32x2_t)vmul_f32(v25, v25);
      v27 = vadd_f32((float32x2_t)vzip1_s32(v26, v24), (float32x2_t)vzip2_s32(v26, v24));
      v28 = sqrtf(fabsf(vmul_f32(v27, vmul_lane_f32(vadd_f32(v23, (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1)), v27, 1)).f32[0]));
      if (v28 != 0.0)
      {
        v29 = vmlas_n_f32(vmuls_lane_f32(-v22.f32[0], v21, 1), v22.f32[1], v21.f32[0]);
        v30 = (float)(v29 + v29) / v28;
        v31 = fabsf(v30);
        if (v31 >= 0.08)
        {
          if (v31 > fabsf(v15))
          {
            if ((unint64_t)(v10 + 10) >= 0x7FFFFFFF)
              __assert_rtn("safeSignedCast", "OpenCVWrapperInternal.h", 67, "value < INT_MAX && \"size_t outside of valid range to cast to int\"");
            v16 = (v10 + 10);
            v15 = v30;
          }
        }
        else if ((v16 & 0x80000000) == 0)
        {
          v32 = v76;
          if (v76 >= v77)
          {
            v34 = (uint64_t *)__p;
            v35 = ((char *)v76 - (_BYTE *)__p) >> 3;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 61)
              sub_100008F3C();
            v37 = (char *)v77 - (_BYTE *)__p;
            if (((char *)v77 - (_BYTE *)__p) >> 2 > v36)
              v36 = v37 >> 2;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)sub_100008F50((uint64_t)&v77, v38);
              v34 = (uint64_t *)__p;
              v32 = v76;
            }
            else
            {
              v39 = 0;
            }
            v40 = (uint64_t *)&v39[8 * v35];
            *v40 = v16;
            v33 = v40 + 1;
            while (v32 != v34)
            {
              v41 = *--v32;
              *--v40 = v41;
            }
            __p = v40;
            v76 = v33;
            v77 = (uint64_t *)&v39[8 * v38];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *v76 = v16;
            v33 = v32 + 1;
          }
          v76 = v33;
          v42 = v73;
          if (v73 >= v74)
          {
            v44 = v72;
            v45 = (v73 - (char *)v72) >> 2;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 62)
              sub_100008F3C();
            v47 = v74 - (char *)v72;
            if ((v74 - (char *)v72) >> 1 > v46)
              v46 = v47 >> 1;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
              v48 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              v49 = (char *)sub_10000963C((uint64_t)&v74, v48);
              v44 = v72;
              v42 = v73;
            }
            else
            {
              v49 = 0;
            }
            v50 = (float *)&v49[4 * v45];
            *v50 = v15;
            v43 = (char *)(v50 + 1);
            while (v42 != (char *)v44)
            {
              v51 = *((_DWORD *)v42 - 1);
              v42 -= 4;
              *((_DWORD *)v50-- - 1) = v51;
            }
            v72 = v50;
            v74 = &v49[4 * v48];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *(float *)v73 = v15;
            v43 = v73 + 4;
          }
          v73 = v43;
          v15 = 0.0;
          v16 = 0xFFFFFFFFLL;
        }
      }
      ++v10;
    }
    while (v10 != v14);
    v5 = (uint64_t *)__p;
    v52 = v76;
    if (v76 != __p)
    {
      v53 = 0;
      do
      {
        v54 = v5[v53];
        v55 = *(_DWORD *)(*a2 + 8 * v54);
        if (v55 >= a4)
        {
          v56 = *(_DWORD *)(*a2 + 8 * v54 + 4);
          if (v56 >= a4 && v55 <= *a3 - a4 && v56 <= a3[1] - a4)
          {
            v57 = v72[v53];
            v58 = (double)v55;
            v59 = (double)v56;
            v61 = *(double **)(a1 + 8);
            v60 = *(_QWORD *)(a1 + 16);
            if ((unint64_t)v61 >= v60)
            {
              v63 = *(double **)a1;
              v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v61 - *(_QWORD *)a1) >> 3);
              v65 = v64 + 1;
              if (v64 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_100008F3C();
              v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (_QWORD)v63) >> 3);
              if (2 * v66 > v65)
                v65 = 2 * v66;
              if (v66 >= 0x555555555555555)
                v67 = 0xAAAAAAAAAAAAAAALL;
              else
                v67 = v65;
              if (v67)
              {
                v68 = (char *)sub_100009218(a1 + 16, v67);
                v63 = *(double **)a1;
                v61 = *(double **)(a1 + 8);
              }
              else
              {
                v68 = 0;
              }
              v69 = (double *)&v68[24 * v64];
              *v69 = v58;
              v69[1] = v59;
              *((float *)v69 + 4) = v57;
              v70 = v69;
              if (v61 != v63)
              {
                do
                {
                  v71 = *(_OWORD *)(v61 - 3);
                  *(v70 - 1) = *(v61 - 1);
                  *(_OWORD *)(v70 - 3) = v71;
                  v70 -= 3;
                  v61 -= 3;
                }
                while (v61 != v63);
                v63 = *(double **)a1;
              }
              v62 = v69 + 3;
              *(_QWORD *)a1 = v70;
              *(_QWORD *)(a1 + 8) = v69 + 3;
              *(_QWORD *)(a1 + 16) = &v68[24 * v67];
              if (v63)
                operator delete(v63);
            }
            else
            {
              *v61 = v58;
              v61[1] = v59;
              v62 = v61 + 3;
              *((float *)v61 + 4) = v57;
            }
            *(_QWORD *)(a1 + 8) = v62;
            v5 = (uint64_t *)__p;
            v52 = v76;
          }
        }
        ++v53;
      }
      while (v53 < v52 - v5);
    }
  }
  else
  {
    v5 = 0;
  }
  if (v72)
  {
    operator delete(v72);
    v5 = (uint64_t *)__p;
  }
  if (v5)
  {
    v76 = v5;
    operator delete(v5);
  }
}

void sub_100008C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_100008C88(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t sub_100008C98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  v2 = *(_QWORD *)(a1 + 264);
  if (v2)
  {
    v3 = a1 + 208;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  if (*(int *)(a1 + 212) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 272);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 212));
  }
  v9 = *(void **)(a1 + 280);
  if (v9 != (void *)(a1 + 288))
    j__free(v9);
  v10 = *(_QWORD *)(a1 + 168);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 20);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      sub_100256C90(a1 + 112);
  }
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  if (*(int *)(a1 + 116) >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 176);
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 116));
  }
  v16 = *(void **)(a1 + 184);
  if (v16 != (void *)(a1 + 192))
    j__free(v16);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 20);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      sub_100256C90(a1 + 16);
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    v21 = 0;
    v22 = *(_QWORD *)(a1 + 80);
    do
      *(_DWORD *)(v22 + 4 * v21++) = 0;
    while (v21 < *(int *)(a1 + 20));
  }
  v23 = *(void **)(a1 + 88);
  if (v23 != (void *)(a1 + 96))
    j__free(v23);
  return a1;
}

unsigned int **sub_100008E14(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void sub_100008E68(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100008EA8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100008EA8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

char *sub_100008EFC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_100008F3C();
  result = (char *)sub_100008F50((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_100008F3C()
{
  sub_100008F84("vector");
}

void *sub_100008F50(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_100008FF8();
  return operator new(8 * a2);
}

void sub_100008F84(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100008FD4(exception, a1);
}

void sub_100008FC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100008FD4(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_100008FF8()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

uint64_t sub_100009020(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100008F3C();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100009218(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_100009134(v11, *a2, a2[1], a2[1] - *a2);
  v15 += 24;
  sub_1000091A4(a1, v14);
  v12 = a1[1];
  sub_100009374((uint64_t)v14);
  return v12;
}

void sub_100009120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100009374((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_100009134(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100008EFC(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_100009188(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000091A4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10000925C((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100009218(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_100008FF8();
  return operator new(24 * a2);
}

uint64_t sub_10000925C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1000092FC((uint64_t)v11);
  return v9;
}

uint64_t sub_1000092FC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100009330(a1);
  return a1;
}

void sub_100009330(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_100009374(uint64_t a1)
{
  sub_1000093A8(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1000093A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

__int128 *sub_100009400(__int128 *a1, __int128 *a2, void **a3)
{
  __int128 *v3;
  __int128 *v4;
  void **v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    sub_100009460(&v6, v3);
    v3 = (__int128 *)((char *)v3 + 24);
  }
  while (v3 != v4);
  return v4;
}

void ***sub_100009460(void ***a1, __int128 *a2)
{
  void **v4;
  char *v5;
  void **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;

  v4 = *a1;
  v5 = (char *)(*a1)[1];
  v6 = *a1;
  v9 = (char *)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if (v5 >= v9)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*v4) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100008F3C();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*v4) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)sub_100009218(v7, v15);
    else
      v16 = 0;
    v17 = &v16[24 * v12];
    v18 = &v16[24 * v15];
    v19 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v19;
    v11 = v17 + 24;
    v21 = (char *)*v4;
    v20 = (char *)v4[1];
    if (v20 != *v4)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v17 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v17 - 24) = v22;
        v17 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = (char *)*v4;
    }
    *v4 = v17;
    v4[1] = v11;
    v4[2] = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v10 = *a2;
    *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v10;
    v11 = v5 + 24;
  }
  v4[1] = v11;
  return a1;
}

__n128 sub_100009590(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

__n128 *sub_1000095E0(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_100009590(a3, v4);
      v4 = (__n128 *)((char *)v4 + 24);
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *sub_10000963C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_100008FF8();
  return operator new(4 * a2);
}

void sub_1000097F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100009960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  sub_100006BE4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100009A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100006BE4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100009BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_100006BE4((uint64_t)va);
  sub_100008C98((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_100009D34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100009F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;

  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10029434C(&a9);
  sub_100006BE4((uint64_t)&a17);

  _Unwind_Resume(a1);
}

void sub_10000A1A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000A2EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10000A364(uint64_t result, int a2, int a3, unsigned int a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a6;
  *(_DWORD *)result = a4 & 0xFFF | 0x42FF0000;
  *(_DWORD *)(result + 4) = 2;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_QWORD *)(result + 16) = a5;
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 64) = result + 8;
  *(_QWORD *)(result + 72) = result + 80;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_QWORD *)(result + 88) = 0;
  if (a3 * (uint64_t)a2 && !a5)
  {
    v11 = 0;
    v12 = 0;
    qmemcpy((void *)sub_10029430C(&v11, 30), "total() == 0 || data != __null", 30);
    sub_100294B74(-215, &v11, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/.OpenCV/opencv2.framework/Headers/core/mat.inl.hpp", 500);
  }
  v7 = (((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3);
  v8 = a3 * (uint64_t)(int)v7;
  if (!a6)
  {
    v6 = a3 * (uint64_t)(int)v7;
LABEL_11:
    *(_DWORD *)result |= 0x4000u;
    goto LABEL_12;
  }
  if (a6 % ((0x88442211uLL >> (4 * (a4 & 7))) & 0xF))
  {
    v11 = 0;
    v12 = 0;
    qmemcpy((void *)sub_10029430C(&v11, 31), "Step must be a multiple of esz1", 31);
    sub_100294B74(-13, &v11, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/.OpenCV/opencv2.framework/Headers/core/mat.inl.hpp", 515);
  }
  if (v8 == a6 || *(_DWORD *)(result + 8) == 1)
    goto LABEL_11;
LABEL_12:
  v9 = *(uint64_t **)(result + 72);
  *v9 = v6;
  v9[1] = v7;
  v10 = *(_QWORD *)(result + 24) + v6 * *(int *)(result + 8);
  *(_QWORD *)(result + 32) = v10 - v6 + v8;
  *(_QWORD *)(result + 40) = v10;
  return result;
}

void sub_10000A524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10000A554(uint64_t *a1, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = (uint64_t)(a1 + 2);
  v9 = (uint64_t **)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a4)
  {
    sub_10000A6DC(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_100008F3C();
    v10 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_10000A714(a1, v11);
    v12 = sub_10000A764(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v9) >> 3) < a4)
  {
    v13 = &a2[(a1[1] - (uint64_t)v9) >> 3];
    sub_10000A894((uint64_t)&v20, a2, v13, v9);
    v12 = sub_10000A764(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  sub_10000A894((uint64_t)&v21, a2, a3, v9);
  v15 = v14;
  v16 = a1[1];
  if (v16 != v14)
  {
    v17 = a1[1];
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  a1[1] = v15;
}

void sub_10000A6CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10000A6D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10000A6DC(uint64_t *a1)
{
  if (*a1)
  {
    sub_100008EA8(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_10000A714(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_100008F3C();
  result = (char *)sub_100009218((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t sub_10000A764(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_100009134((char *)v4, *v6, v6[1], v6[1] - *v6);
      v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_10000A814((uint64_t)v8);
  return v4;
}

void sub_10000A800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10000A814((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10000A814(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10000A848(a1);
  return a1;
}

void sub_10000A848(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t **sub_10000A894(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t **v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4)
        sub_10000A900(a4, *v5, v5[1], v5[1] - *v5);
      v5 += 3;
      a4 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *sub_10000A900(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6++;
          *(_QWORD *)v27 = v28;
          v27 += 8;
          v26 += 8;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        v21 = 8 * v19;
        do
        {
          v22 = *v6++;
          *(_QWORD *)result = v22;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      v23 = v12;
      if (v20 != a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_QWORD *)v24 = v25;
          v24 += 8;
          v23 += 8;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      sub_100008F3C();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_100008EFC(a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_QWORD *)v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

char *sub_10000AA50(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_100008F3C();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = sub_10000A714(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

id sub_10000ADDC(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10000AE3C;
  v2[3] = &unk_10043BB10;
  v2[4] = *(_QWORD *)(a1 + 32);
  return +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v2);
}

id sub_10000AE3C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "counterRotateChildrenForBoundsOrOrientationChange");
}

id sub_10000B48C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "counterRotateChildrenForBoundsOrOrientationChange");
}

void sub_10000B6B4(uint64_t a1)
{
  objc_class *v1;
  objc_method *InstanceMethod;
  objc_method *v3;
  void (*Implementation)(void);
  const char *TypeEncoding;
  void (*v6)(void);
  const char *v7;

  v1 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
  InstanceMethod = class_getInstanceMethod(v1, "sizeThatFits:");
  v3 = class_getInstanceMethod(v1, "xxx_sizeThatFits:");
  Implementation = method_getImplementation(v3);
  TypeEncoding = method_getTypeEncoding(v3);
  if (class_addMethod(v1, "sizeThatFits:", Implementation, TypeEncoding))
  {
    v6 = method_getImplementation(InstanceMethod);
    v7 = method_getTypeEncoding(InstanceMethod);
    class_replaceMethod(v1, "xxx_sizeThatFits:", v6, v7);
  }
  else
  {
    method_exchangeImplementations(InstanceMethod, v3);
  }
}

int main(int argc, const char **argv, const char **envp)
{
  int v3;
  char **v4;
  unint64_t v5;
  objc_class *ObjCClassFromMetadata;
  NSString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  NSString *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = static CommandLine.argc.getter(*(_QWORD *)&argc, argv, envp);
  v4 = (char **)static CommandLine.unsafeArgv.getter();
  v5 = sub_10000B900();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v5);
  v7 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = v8;
    v7 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
  }
  v10 = type metadata accessor for AppDelegate();
  v11 = (objc_class *)swift_getObjCClassFromMetadata(v10);
  v12 = NSStringFromClass(v11);
  if (!v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v14 = v13;
    v12 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
  }
  UIApplicationMain(v3, v4, v7, v12);

  return 0;
}

unint64_t sub_10000B900()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047B240;
  if (!qword_10047B240)
  {
    v1 = objc_opt_self(MeasureApplication);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10047B240);
  }
  return result;
}

uint64_t OpenCVWrapperContours.startIndex.getter()
{
  return 0;
}

uint64_t variable initialization expression of SCNPatchDebugger.SKDebugRenderer.patchPadding()
{
  return 5;
}

uint64_t variable initialization expression of SCNPatchDebugger.SKDebugRenderer.bytesPerPixel()
{
  return 4;
}

_UNKNOWN **variable initialization expression of SCNPatchDebugger.SKDebugRenderer.textureBgColor()
{
  return &off_10043BBD0;
}

uint64_t variable initialization expression of SCNPatchDebugger.SKDebugRenderer.renderEmboss()
{
  return 1;
}

double variable initialization expression of SCNPatchDebugger.SKDebugRenderer.textureBuffer@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t variable initialization expression of SCNPatchDebugger.SKDebugRenderer.$__lazy_storage_$_patchSizeInPixels()
{
  return 0;
}

uint64_t variable initialization expression of RectangleLabelData.edge1RoundedMeasurement()
{
  return 0x100000000;
}

void *variable initialization expression of PointTrail.pointNodes()
{
  return &_swiftEmptyArrayStorage;
}

float variable initialization expression of PointTrail.minDistanceSquared()
{
  return 0.0;
}

uint64_t variable initialization expression of PointTrail.isStarted()
{
  return 0;
}

void type metadata accessor for CGPath(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B248, (uint64_t)&unk_10043D9F8);
}

void type metadata accessor for CVPixelBufferLockFlags(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B250, (uint64_t)&unk_10043DA28);
}

void type metadata accessor for UIDeviceOrientation(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B258, (uint64_t)&unk_10043DA50);
}

void type metadata accessor for CFRunLoop(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B260, (uint64_t)&unk_10043DA70);
}

void type metadata accessor for CFRunLoopObserver(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B268, (uint64_t)&unk_10043DAA0);
}

void type metadata accessor for CVBuffer(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B270, (uint64_t)&unk_10043DAD0);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B278, (uint64_t)&unk_10043DB00);
}

void type metadata accessor for VTPixelTransferSession(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B280, (uint64_t)&unk_10043DB28);
}

__n128 initializeWithTake for SnapPoint(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_10000BA70(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B288, (uint64_t)&unk_10043DBB0);
}

__n128 initializeWithTake for SnapPointsState(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B290, (uint64_t)&unk_10043DC30);
}

__n128 initializeWithTake for LabelRenderEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PersonHeightInstrument.HeightResultContainer.HeightResult(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PersonHeightInstrument.HeightResultContainer.HeightResult(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B298, (uint64_t)&unk_10043DCB0);
}

uint64_t getEnumTagSinglePayload for RubberBand(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RubberBand(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for vImage_Buffer(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B2A0, (uint64_t)&unk_10043DD40);
}

void type metadata accessor for Name(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B2A8, (uint64_t)&unk_10043DD70);
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B2B0, (uint64_t)&unk_10043DD98);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B2B8, (uint64_t)&unk_10043DE10);
}

__n128 initializeWithTake for Measurements(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_10000BBFC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10000BC1C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for Corner(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B2C0, (uint64_t)&unk_10043DE90);
}

__n128 sub_10000BC5C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10000BC70(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10000BC90(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B2C8, (uint64_t)&unk_10043DF10);
}

uint64_t sub_10000BCE0(uint64_t a1, uint64_t a2)
{
  return sub_10000D54C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

NSNumber sub_10000BD04()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_10000BD0C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static CGFloat._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_10000BD5C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_10000BDB0(double *a1@<X8>)
{
  *a1 = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

_QWORD *sub_10000BDD4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_10000BDE8(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_10000BE18(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_10000BE2C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

uint64_t sub_10000BE40(uint64_t a1, uint64_t a2)
{
  return sub_10000D54C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

id sub_10000BE50()
{
  id *v0;

  return *v0;
}

uint64_t sub_10000BE58@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_10000BE60(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_10000BE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10000BE80(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1003B04B8, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_10000BEBC(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1003B04B8, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_10000BF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000CD98(a1, a2, a3, (uint64_t)&unk_1003B04B8);
}

uint64_t sub_10000BF10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_1003B072C, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_10000BF5C(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_10000BFD0(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10000C04C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

_QWORD *sub_10000C08C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_10000C0A0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_10000C0B4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_10000C0E0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_10000C104(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_10000C118@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10000C12C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_10000C140(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_10000C154(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_10000C168()
{
  _QWORD *v0;

  return *v0 == 0;
}

_QWORD *sub_10000C178(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_10000C18C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10000C198()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(ARErrorDomain);
}

uint64_t sub_10000C1A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000C4B0(&qword_100482EE0, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B0528);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000C1E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000C4B0(&qword_100482EE0, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B0528);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000C228(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000C4B0(&qword_100482EE0, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B0528);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10000C28C()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10000C2C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000C4B0(&qword_100482EE0, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B0528);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10000C310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

_QWORD *sub_10000C36C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10000C37C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10000C388(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_1003B04B8, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_10000C3D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0(&qword_10047B2E8, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1003AEAC8);
  v3 = sub_10000C4B0(&qword_10047B2F0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1003AEA68);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000C458()
{
  return sub_10000C4B0(&qword_10047B2D0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1003AEA2C);
}

uint64_t sub_10000C484()
{
  return sub_10000C4B0(&qword_10047B2D8, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1003AEA00);
}

uint64_t sub_10000C4B0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000C4F0()
{
  return sub_10000C4B0(&qword_10047B2E0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1003AEA9C);
}

uint64_t sub_10000C51C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0(&qword_10047B630, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1003AF774);
  v3 = sub_10000C4B0(&qword_10047B638, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1003AF714);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

double sub_10000C5A0@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_10000C5AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = sub_10000C4B0(&qword_10047B650, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1003AF500);
  v3 = sub_10000C4B0(&qword_10047B658, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1003AF4A0);
  v4 = sub_10000E000();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, v4);
}

uint64_t sub_10000C64C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0(&qword_10047B600, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1003AFB70);
  v3 = sub_10000C4B0(&qword_10047B608, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1003AFB18);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000C6D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0((unint64_t *)&qword_10047B5F0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1003B06A4);
  v3 = sub_10000C4B0(&qword_10047B5F8, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1003AFC60);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000C754(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0((unint64_t *)&qword_10047B5C0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1003B0474);
  v3 = sub_10000C4B0(&qword_10047B5C8, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1003B0270);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000C7D8@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10000C800(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0(&qword_10047B640, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1003B079C);
  v3 = sub_10000C4B0(&qword_10047B648, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1003AF600);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000C884@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10000DFC8(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10000C8C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0((unint64_t *)&qword_10047B610, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1003B06E8);
  v3 = sub_10000C4B0(&qword_10047B618, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1003AFA0C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000C944(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0((unint64_t *)&qword_10047B698, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1003B0824);
  v3 = sub_10000C4B0(&qword_10047B6A0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1003AEFC8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000C9C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0(&qword_10047B5B0, (uint64_t (*)(uint64_t))type metadata accessor for SCNHitTestOption, (uint64_t)&unk_1003B0430);
  v3 = sub_10000C4B0(&qword_10047B5B8, (uint64_t (*)(uint64_t))type metadata accessor for SCNHitTestOption, (uint64_t)&unk_1003B0384);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000CA4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000C4B0(&qword_10047B520, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B018C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000CA8C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000C4B0(&qword_10047B520, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B018C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10000CAD0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000C4B0(&qword_100482EE0, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B0528);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10000CB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_10000C4B0(&qword_100482EE0, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B0528);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_10000CB68(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10000CB7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0((unint64_t *)&qword_10047B5E0, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_1003B0628);
  v3 = sub_10000C4B0(&qword_10047B5E8, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_1003AFED4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000CC00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0(&qword_10047B5D0, (uint64_t (*)(uint64_t))type metadata accessor for DocumentType, (uint64_t)&unk_1003B002C);
  v3 = sub_10000C4B0(&qword_10047B5D8, (uint64_t (*)(uint64_t))type metadata accessor for DocumentType, (uint64_t)&unk_1003AFFD4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000CC84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0(&qword_10047B620, (uint64_t (*)(uint64_t))type metadata accessor for SCNShaderModifierEntryPoint, (uint64_t)&unk_1003B0758);
  v3 = sub_10000C4B0(&qword_10047B628, (uint64_t (*)(uint64_t))type metadata accessor for SCNShaderModifierEntryPoint, (uint64_t)&unk_1003AF878);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000CD08(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1003B072C, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_10000CD44(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1003B072C, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_10000CD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000CD98(a1, a2, a3, (uint64_t)&unk_1003B072C);
}

Swift::Int sub_10000CD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  WitnessTable = swift_getWitnessTable(a4, a2);
  _CFObject.hash(into:)(v8, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_10000CDF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0((unint64_t *)&qword_10047B678, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1003B07E0);
  v3 = sub_10000C4B0(&qword_10047B680, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1003AF234);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000CE7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0(&qword_10047B668, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1003AF3A8);
  v3 = sub_10000C4B0(&qword_10047B670, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1003AF348);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000CF00@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

void type metadata accessor for SCNHitTestOption(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B2F8, (uint64_t)&unk_10043DF38);
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B300, (uint64_t)&unk_10043DF60);
}

void type metadata accessor for CFNumber(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B308, (uint64_t)&unk_10043DF88);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B310, (uint64_t)&unk_10043DFB8);
}

void type metadata accessor for CGImagePropertyOrientation(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B318, (uint64_t)&unk_10043DFE8);
}

__n128 sub_10000CFA8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_10000CFB4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for SCNVector4(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B320, (uint64_t)&unk_10043E060);
}

void type metadata accessor for ARError(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B328, (uint64_t)&unk_10043E090);
}

void type metadata accessor for DocumentType(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B330, (uint64_t)&unk_10043E0B8);
}

void type metadata accessor for DocumentAttributeKey(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B338, (uint64_t)&unk_10043E0E0);
}

void type metadata accessor for SCNDebugOptions(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B340, (uint64_t)&unk_10043E108);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B348, (uint64_t)&unk_10043E130);
}

void type metadata accessor for ActivityType(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B350, (uint64_t)&unk_10043E158);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B358, (uint64_t)&unk_10043E180);
}

void type metadata accessor for CGColorSpace(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B360, (uint64_t)&unk_10043E1A8);
}

void type metadata accessor for SCNShaderModifierEntryPoint(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B368, (uint64_t)&unk_10043E1D8);
}

uint64_t initializeBufferWithCopyOfBuffer for CardInteractionState.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_10000D0CC(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t sub_10000D0F0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10000D110(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

void type metadata accessor for CATransform3D(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B370, (uint64_t)&unk_10043E258);
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B378, (uint64_t)&unk_10043E2B8);
}

void type metadata accessor for VNImageOption(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B380, (uint64_t)&unk_10043E2E0);
}

uint64_t sub_10000D198(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t sub_10000D1AC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10000D1CC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

void type metadata accessor for SCNVector3(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B388, (uint64_t)&unk_10043E360);
}

void type metadata accessor for Weight(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B390, (uint64_t)&unk_10043E390);
}

void type metadata accessor for TraitKey(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B398, (uint64_t)&unk_10043E3B8);
}

void type metadata accessor for AttributeName(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B3A0, (uint64_t)&unk_10043E3E0);
}

void type metadata accessor for FeatureKey(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B3A8, (uint64_t)&unk_10043E408);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B3B0, (uint64_t)&unk_10043E430);
}

uint64_t sub_10000D270()
{
  return sub_10000C4B0(&qword_10047B3B8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1003AEF8C);
}

uint64_t sub_10000D29C()
{
  return sub_10000C4B0(&qword_10047B3C0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1003AEF60);
}

uint64_t sub_10000D2C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000C4B0(&qword_10047B688, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1003AF13C);
  v3 = sub_10000C4B0(&qword_10047B690, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1003AF0DC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000D34C()
{
  return sub_10000C4B0(&qword_10047B3C8, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1003AF0A0);
}

uint64_t sub_10000D378()
{
  return sub_10000C4B0(&qword_10047B3D0, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1003AF074);
}

uint64_t sub_10000D3A4()
{
  return sub_10000C4B0(&qword_10047B3D8, (uint64_t (*)(uint64_t))type metadata accessor for FeatureKey, (uint64_t)&unk_1003AF110);
}

uint64_t sub_10000D3D0()
{
  return sub_10000C4B0(&qword_10047B3E0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1003AF1F8);
}

uint64_t sub_10000D3FC()
{
  return sub_10000C4B0(&qword_10047B3E8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1003AF1CC);
}

uint64_t sub_10000D428()
{
  return sub_10000C4B0(&qword_10047B3F0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1003AF30C);
}

uint64_t sub_10000D454()
{
  return sub_10000C4B0(&qword_10047B3F8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1003AF2E0);
}

uint64_t sub_10000D480()
{
  return sub_10000C4B0(&qword_10047B400, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1003AF37C);
}

uint64_t sub_10000D4AC()
{
  return sub_10000C4B0(&qword_10047B408, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1003AF464);
}

uint64_t sub_10000D4D8()
{
  return sub_10000C4B0(&qword_10047B410, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1003AF438);
}

uint64_t sub_10000D504()
{
  double *v0;

  return Double.hashValue.getter(*v0);
}

void sub_10000D50C()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_10000D53C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:_:)(a1, v2);
}

uint64_t sub_10000D54C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10000D588(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10000D5C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

BOOL sub_10000D638(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10000D64C()
{
  return sub_10000C4B0(&qword_10047B418, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1003AF4D4);
}

uint64_t sub_10000D678()
{
  return sub_10000C4B0(&qword_10047B420, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1003AF5C4);
}

uint64_t sub_10000D6A4()
{
  return sub_10000C4B0(&qword_10047B428, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1003AF598);
}

uint64_t sub_10000D6D0()
{
  return sub_10000C4B0(&qword_10047B430, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1003AF6D8);
}

uint64_t sub_10000D6FC()
{
  return sub_10000C4B0(&qword_10047B438, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1003AF6AC);
}

uint64_t sub_10000D728()
{
  return sub_10000C4B0(&qword_10047B440, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1003AF748);
}

uint64_t sub_10000D754()
{
  return sub_10000C4B0(&qword_10047B448, (uint64_t (*)(uint64_t))type metadata accessor for SCNShaderModifierEntryPoint, (uint64_t)&unk_1003AF83C);
}

uint64_t sub_10000D780()
{
  return sub_10000C4B0(&qword_10047B450, (uint64_t (*)(uint64_t))type metadata accessor for SCNShaderModifierEntryPoint, (uint64_t)&unk_1003AF810);
}

uint64_t sub_10000D7AC()
{
  return sub_10000C4B0(&qword_10047B458, (uint64_t (*)(uint64_t))type metadata accessor for CGColorSpace, (uint64_t)&unk_1003AF934);
}

uint64_t sub_10000D7D8()
{
  return sub_10000C4B0(&qword_10047B460, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1003AF9D0);
}

uint64_t sub_10000D804()
{
  return sub_10000C4B0(&qword_10047B468, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1003AF9A4);
}

uint64_t sub_10000D830()
{
  return sub_10000C4B0(&qword_10047B470, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1003AFAE0);
}

uint64_t sub_10000D85C()
{
  return sub_10000C4B0(&qword_10047B478, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1003AFAB8);
}

uint64_t sub_10000D888()
{
  return sub_10000C4B0(&qword_10047B480, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1003AFB48);
}

uint64_t sub_10000D8B4()
{
  return sub_10000C4B0(&qword_10047B488, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1003AFC24);
}

uint64_t sub_10000D8E0()
{
  return sub_10000C4B0(&qword_10047B490, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1003AFBF8);
}

uint64_t sub_10000D90C()
{
  return sub_10000C4B0(&qword_10047B498, (uint64_t (*)(uint64_t))type metadata accessor for SCNDebugOptions, (uint64_t)&unk_1003AFD40);
}

uint64_t sub_10000D938()
{
  return sub_10000C4B0(&qword_10047B4A0, (uint64_t (*)(uint64_t))type metadata accessor for SCNDebugOptions, (uint64_t)&unk_1003AFD0C);
}

uint64_t sub_10000D964()
{
  return sub_10000C4B0(&qword_10047B4A8, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_1003AFE9C);
}

uint64_t sub_10000D990()
{
  return sub_10000C4B0(&qword_10047B4B0, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_1003AFE74);
}

uint64_t sub_10000D9BC()
{
  return sub_10000C4B0(&qword_10047B4B8, (uint64_t (*)(uint64_t))type metadata accessor for DocumentType, (uint64_t)&unk_1003AFF9C);
}

uint64_t sub_10000D9E8()
{
  return sub_10000C4B0(&qword_10047B4C0, (uint64_t (*)(uint64_t))type metadata accessor for DocumentType, (uint64_t)&unk_1003AFF74);
}

uint64_t sub_10000DA14(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10000DA9C()
{
  return sub_10000C4B0(&qword_10047B4C8, (uint64_t (*)(uint64_t))type metadata accessor for DocumentType, (uint64_t)&unk_1003B0004);
}

uint64_t sub_10000DAC8()
{
  return sub_10000C4B0(&qword_10047B4D0, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B00B4);
}

uint64_t sub_10000DAF4()
{
  return sub_10000C4B0(&qword_10047B4D8, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B00DC);
}

uint64_t sub_10000DB20()
{
  return sub_10000C4B0(&qword_10047B4E0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1003B0234);
}

uint64_t sub_10000DB4C()
{
  return sub_10000C4B0(&qword_10047B4E8, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1003B0208);
}

uint64_t sub_10000DB78()
{
  return sub_10000C4B0(&qword_10047B4F0, (uint64_t (*)(uint64_t))type metadata accessor for SCNHitTestOption, (uint64_t)&unk_1003B0348);
}

uint64_t sub_10000DBA4()
{
  return sub_10000C4B0(&qword_10047B4F8, (uint64_t (*)(uint64_t))type metadata accessor for SCNHitTestOption, (uint64_t)&unk_1003B031C);
}

uint64_t sub_10000DBD0()
{
  return sub_10000C4B0(&qword_10047B500, (uint64_t (*)(uint64_t))type metadata accessor for SCNHitTestOption, (uint64_t)&unk_1003B03B8);
}

uint64_t sub_10000DBFC()
{
  return sub_10000C4B0(&qword_10047B508, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1003B02A4);
}

uint64_t sub_10000DC28()
{
  return sub_10000C4B0((unint64_t *)&qword_10047B510, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1003B04E4);
}

uint64_t sub_10000DC54()
{
  return sub_10000C4B0(&qword_10047B518, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1003B01DC);
}

uint64_t sub_10000DC80()
{
  return sub_10000C4B0(&qword_10047B520, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B018C);
}

uint64_t sub_10000DCAC()
{
  return sub_10000C4B0(&qword_10047B528, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B015C);
}

uint64_t sub_10000DCD8()
{
  return sub_10000C4B0(&qword_10047B530, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B011C);
}

uint64_t sub_10000DD04()
{
  return sub_10000C4B0(&qword_10047B538, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1003B05C8);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B6A8, (uint64_t)&unk_10043E458);
}

uint64_t sub_10000DD44()
{
  return sub_10000C4B0(&qword_10047B540, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1003B0590);
}

unint64_t sub_10000DD74()
{
  unint64_t result;

  result = qword_10047B548;
  if (!qword_10047B548)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10047B548);
  }
  return result;
}

uint64_t sub_10000DDB8()
{
  return sub_10000C4B0((unint64_t *)&unk_10047B550, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1003B0600);
}

uint64_t sub_10000DDE4()
{
  return sub_10000C4B0(&qword_100482EE0, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B0528);
}

uint64_t sub_10000DE10()
{
  return sub_10000C4B0(&qword_10047B560, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_1003AFF04);
}

uint64_t sub_10000DE3C()
{
  return sub_10000C4B0(&qword_10047B568, (uint64_t (*)(uint64_t))type metadata accessor for SCNDebugOptions, (uint64_t)&unk_1003AFD6C);
}

uint64_t sub_10000DE68()
{
  return sub_10000C4B0(&qword_10047B570, (uint64_t (*)(uint64_t))type metadata accessor for SCNDebugOptions, (uint64_t)&unk_1003AFDA8);
}

uint64_t sub_10000DE94()
{
  return sub_10000C4B0(&qword_10047B578, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1003AFC94);
}

uint64_t sub_10000DEC0()
{
  return sub_10000C4B0(&qword_10047B580, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1003AFA40);
}

uint64_t sub_10000DEEC()
{
  return sub_10000C4B0(&qword_10047B588, (uint64_t (*)(uint64_t))type metadata accessor for CGColorSpace, (uint64_t)&unk_1003AF960);
}

uint64_t sub_10000DF18()
{
  return sub_10000C4B0(&qword_10047B590, (uint64_t (*)(uint64_t))type metadata accessor for SCNShaderModifierEntryPoint, (uint64_t)&unk_1003AF8AC);
}

uint64_t sub_10000DF44()
{
  return sub_10000C4B0(&qword_10047B598, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1003AF634);
}

uint64_t sub_10000DF70()
{
  return sub_10000C4B0(&qword_10047B5A0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1003AF268);
}

uint64_t sub_10000DF9C()
{
  return sub_10000C4B0(&qword_10047B5A8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1003AEFFC);
}

uint64_t sub_10000DFC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t sub_10000E000()
{
  unint64_t result;

  result = qword_10047B660;
  if (!qword_10047B660)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_10047B660);
  }
  return result;
}

void type metadata accessor for Event(uint64_t a1)
{
  sub_10000E058(a1, &qword_10047B6B0, (uint64_t)&unk_10043E478);
}

void sub_10000E058(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_10000E09C()
{
  return sub_10000C4B0(&qword_10047B6B8, (uint64_t (*)(uint64_t))type metadata accessor for Event, (uint64_t)&unk_1003B08DC);
}

uint64_t sub_10000E0C8()
{
  return sub_10000C4B0(&qword_10047B6C0, (uint64_t (*)(uint64_t))type metadata accessor for Event, (uint64_t)&unk_1003B08A8);
}

uint64_t sub_10000E0F4()
{
  return sub_10000C4B0(&qword_10047B6C8, (uint64_t (*)(uint64_t))type metadata accessor for Event, (uint64_t)&unk_1003B0908);
}

uint64_t sub_10000E120()
{
  return sub_10000C4B0((unint64_t *)&unk_10047B6D0, (uint64_t (*)(uint64_t))type metadata accessor for Event, (uint64_t)&unk_1003B0944);
}

__n128 initializeWithCopy for CardInteractionState.State(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CardInteractionState.State(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CardInteractionState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CardInteractionState()
{
  return &type metadata for CardInteractionState;
}

uint64_t sub_10000E234()
{
  uint64_t result;

  result = Contexts.UIKit.init()();
  qword_1004AF060 = result;
  return result;
}

id sub_10000E250@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A730 != -1)
    swift_once(&qword_10047A730, sub_10000E234);
  v2 = (void *)qword_1004AF060;
  *a1 = qword_1004AF060;
  return v2;
}

unint64_t sub_10000E2A8()
{
  unint64_t result;

  result = qword_100487380;
  if (!qword_100487380)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Contexts.UIKit, &type metadata for Contexts.UIKit);
    atomic_store(result, (unint64_t *)&qword_100487380);
  }
  return result;
}

unint64_t sub_10000E2EC(uint64_t a1)
{
  unint64_t result;

  result = sub_10000E310();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10000E310()
{
  unint64_t result;

  result = qword_10047B8E8;
  if (!qword_10047B8E8)
  {
    result = swift_getWitnessTable(&unk_1003B0A78, &type metadata for CardInteractionState);
    atomic_store(result, (unint64_t *)&qword_10047B8E8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CardInteractionState.State(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

uint64_t sub_10000E388(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10000E3A8(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    *(_BYTE *)(result + 32) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CardInteractionState.State()
{
  return &type metadata for CardInteractionState.State;
}

BOOL sub_10000E3DC(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(a1 + 32);
  v3 = *(unsigned __int8 *)(a2 + 32);
  v4 = v2 & v3;
  if ((v2 & 1) == 0 && (v3 & 1) == 0)
    return CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2);
  return v4;
}

BOOL sub_10000E41C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10000E430()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000E474()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000E49C()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

UIContentSizeCategory sub_10000E4DC()
{
  qword_1004AF068 = (uint64_t)UIContentSizeCategoryLarge;
  return UIContentSizeCategoryLarge;
}

uint64_t sub_10000E4F4()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  NSString v3;
  uint64_t result;

  _StringGuts.grow(_:)(33);
  if (qword_10047A970 != -1)
    swift_once(&qword_10047A970, sub_10009581C);
  v0 = unk_1004AF2D0;
  swift_bridgeObjectRetain(unk_1004AF2D0);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1._object = (void *)0x80000001003D7A60;
  v1._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v1);
  v2 = v0;
  v3 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v2);
  qword_1004AF070 = (uint64_t)v3;
  return result;
}

void sub_10000E5BC()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  char *v6;
  NSString *v7;
  NSString *v8;
  NSString *v9;
  NSString *v10;
  id v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  id v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  _QWORD aBlock[5];
  uint64_t v39;
  objc_super v40;
  char v41[104];

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = &qword_10047B000;
  v3 = OBJC_IVAR____TtC7Measure30AccessiblityUISettingsObserver_eventLookup;
  v4 = sub_10000EDC8(&qword_10047B928);
  inited = swift_initStackObject(v4, v41);
  *(_OWORD *)(inited + 16) = xmmword_1003B0AF0;
  *(_QWORD *)(inited + 32) = UIAccessibilityInvertColorsStatusDidChangeNotification;
  *(_BYTE *)(inited + 40) = 0;
  *(_QWORD *)(inited + 48) = UIAccessibilityDarkerSystemColorsStatusDidChangeNotification;
  *(_BYTE *)(inited + 56) = 1;
  *(_QWORD *)(inited + 64) = UIAccessibilityBoldTextStatusDidChangeNotification;
  *(_BYTE *)(inited + 72) = 2;
  *(_QWORD *)(inited + 80) = UIContentSizeCategoryDidChangeNotification;
  *(_BYTE *)(inited + 88) = 3;
  v6 = v0;
  v7 = UIAccessibilityInvertColorsStatusDidChangeNotification;
  v8 = UIAccessibilityDarkerSystemColorsStatusDidChangeNotification;
  v9 = UIAccessibilityBoldTextStatusDidChangeNotification;
  v10 = UIContentSizeCategoryDidChangeNotification;
  *(_QWORD *)&v0[v3] = sub_1000C6F74(inited);

  v40.receiver = v6;
  v40.super_class = ObjectType;
  v11 = objc_msgSendSuper2(&v40, "init");
  v12 = qword_10047A738;
  v13 = (char *)v11;
  if (v12 != -1)
LABEL_28:
    swift_once(&qword_10047A738, sub_10000E4DC);
  v14 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v15 = objc_msgSend(v14, "preferredContentSizeCategory");

  v16 = (void *)qword_1004AF068;
  qword_1004AF068 = (uint64_t)v15;

  v17 = *(_QWORD *)&v13[v2[286]];
  v18 = v17 + 64;
  v19 = 1 << *(_BYTE *)(v17 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & *(_QWORD *)(v17 + 64);
  v22 = (unint64_t)(v19 + 63) >> 6;
  swift_bridgeObjectRetain(*(_QWORD *)&v13[v2[286]]);
  v23 = 0;
  while (1)
  {
    if (v21)
    {
      v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v25 = v24 | (v23 << 6);
      goto LABEL_6;
    }
    v35 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v35 >= v22)
      goto LABEL_26;
    v36 = *(_QWORD *)(v18 + 8 * v35);
    ++v23;
    if (!v36)
    {
      v23 = v35 + 1;
      if (v35 + 1 >= v22)
        goto LABEL_26;
      v36 = *(_QWORD *)(v18 + 8 * v23);
      if (!v36)
      {
        v23 = v35 + 2;
        if (v35 + 2 >= v22)
          goto LABEL_26;
        v36 = *(_QWORD *)(v18 + 8 * v23);
        if (!v36)
        {
          v23 = v35 + 3;
          if (v35 + 3 >= v22)
            goto LABEL_26;
          v36 = *(_QWORD *)(v18 + 8 * v23);
          if (!v36)
          {
            v23 = v35 + 4;
            if (v35 + 4 >= v22)
              goto LABEL_26;
            v36 = *(_QWORD *)(v18 + 8 * v23);
            if (!v36)
              break;
          }
        }
      }
    }
LABEL_25:
    v21 = (v36 - 1) & v36;
    v25 = __clz(__rbit64(v36)) + (v23 << 6);
LABEL_6:
    v26 = *(void **)(*(_QWORD *)(v17 + 48) + 8 * v25);
    v27 = (void *)objc_opt_self(NSNotificationCenter);
    v28 = v26;
    v29 = objc_msgSend(v27, "defaultCenter");
    v30 = swift_allocObject(&unk_10043E8D8, 24, 7);
    *(_QWORD *)(v30 + 16) = v13;
    aBlock[4] = sub_10000EE2C;
    v39 = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000DCC48;
    aBlock[3] = &unk_10043E8F0;
    v31 = _Block_copy(aBlock);
    v32 = v39;
    v33 = v13;
    v2 = (uint64_t *)v28;
    v34 = objc_msgSend(v29, "addObserverForName:object:queue:usingBlock:", v2, 0, 0, v31, swift_release(v32).n128_f64[0]);
    _Block_release(v31);
    swift_unknownObjectRelease(v34);

  }
  v37 = v35 + 5;
  if (v37 >= v22)
  {
LABEL_26:

    swift_release(v17);
    return;
  }
  v36 = *(_QWORD *)(v18 + 8 * v37);
  if (v36)
  {
    v23 = v37;
    goto LABEL_25;
  }
  while (1)
  {
    v23 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v23 >= v22)
      goto LABEL_26;
    v36 = *(_QWORD *)(v18 + 8 * v23);
    ++v37;
    if (v36)
      goto LABEL_25;
  }
  __break(1u);
}

uint64_t sub_10000E980()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v23;

  v1 = (void *)Notification.name.getter();
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryDidChangeNotification);
  if (v2 == v5 && v4 == v6)
  {

    swift_bridgeObjectRelease_n(v4, 2);
  }
  else
  {
    v8 = v6;
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);

    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v8);
    if ((v9 & 1) == 0)
      goto LABEL_11;
  }
  if (qword_10047A738 != -1)
    swift_once(&qword_10047A738, sub_10000E4DC);
  v10 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v11 = objc_msgSend(v10, "preferredContentSizeCategory");

  v12 = (void *)qword_1004AF068;
  qword_1004AF068 = (uint64_t)v11;

LABEL_11:
  v13 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10047A740 != -1)
    swift_once(&qword_10047A740, sub_10000E4F4);
  v14 = qword_1004AF070;
  v15 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure30AccessiblityUISettingsObserver_eventLookup);
  v16 = Notification.name.getter();
  v17 = (void *)v16;
  if (*(_QWORD *)(v15 + 16) && (v18 = sub_1000C810C(v16), (v19 & 1) != 0))
  {
    v20 = *(_BYTE *)(*(_QWORD *)(v15 + 56) + v18);

    v23 = v20;
    v21 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v23, &type metadata for AccessibilityEvent);
  }
  else
  {

    v21 = 0;
  }
  objc_msgSend(v13, "postNotificationName:object:", v14, v21);

  return swift_unknownObjectRelease(v21);
}

id sub_10000EBA4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AccessiblityUISettingsObserver()
{
  return objc_opt_self(_TtC7Measure30AccessiblityUISettingsObserver);
}

_BYTE *initializeBufferWithCopyOfBuffer for AccessibilityEvent(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityEvent(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityEvent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10000ECF0 + 4 * byte_1003B0B15[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10000ED24 + 4 * byte_1003B0B10[v4]))();
}

uint64_t sub_10000ED24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000ED2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10000ED34);
  return result;
}

uint64_t sub_10000ED40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10000ED48);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10000ED4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000ED54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000ED60(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10000ED68(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityEvent()
{
  return &type metadata for AccessibilityEvent;
}

unint64_t sub_10000ED84()
{
  unint64_t result;

  result = qword_10047B920;
  if (!qword_10047B920)
  {
    result = swift_getWitnessTable(&unk_1003B0B94, &type metadata for AccessibilityEvent);
    atomic_store(result, (unint64_t *)&qword_10047B920);
  }
  return result;
}

uint64_t sub_10000EDC8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000EE08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000EE2C()
{
  return sub_10000E980();
}

uint64_t sub_10000EE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000EE5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10000EE64()
{
  id v0;
  NSString *v1;
  id v2;
  double v3;
  double v4;
  double v5;

  v0 = objc_allocWithZone((Class)UIFontMetrics);
  v1 = UIFontTextStyleHeadline;
  v2 = objc_msgSend(v0, "initForTextStyle:", v1);

  objc_msgSend(v2, "scaledValueForValue:", 45.0);
  v4 = v3;

  v5 = 65.0;
  if (v4 <= 65.0)
    v5 = v4;
  qword_1004AF080 = *(_QWORD *)&v5;
}

void sub_10000EF04()
{
  qword_1004AF088 = 0x4077700000000000;
}

void sub_10000EF18()
{
  qword_1004AF090 = 0x4030000000000000;
}

void sub_10000EF28()
{
  qword_1004AF098 = 0x4034000000000000;
}

void sub_10000EF38()
{
  qword_1004AF0A0 = 0x4030000000000000;
}

void sub_10000EF48()
{
  qword_1004AF0A8 = 0x4034000000000000;
}

void sub_10000EF58()
{
  qword_1004AF0B0 = 0x404B800000000000;
}

void sub_10000EF6C()
{
  qword_1004AF0B8 = 0x4046000000000000;
}

double sub_10000EF7C()
{
  double v0;
  double result;

  if (qword_10047A778 != -1)
    swift_once(&qword_10047A778, sub_10000EF58);
  v0 = *(double *)&qword_1004AF0B0;
  if (qword_10047A780 != -1)
    swift_once(&qword_10047A780, sub_10000EF6C);
  result = v0 - *(double *)&qword_1004AF0B8;
  *(double *)&qword_1004AF0C0 = v0 - *(double *)&qword_1004AF0B8;
  return result;
}

void sub_10000F000()
{
  qword_1004AF0C8 = 0x404B800000000000;
}

uint64_t sub_10000F014()
{
  unint64_t v0;
  uint64_t result;
  double v2;

  v0 = sub_10000F0D8();
  result = static UIDevice.isIPhone()(v0);
  v2 = 0.0;
  xmmword_1004AF0D0 = xmmword_1003B0BC0;
  if ((result & 1) != 0)
    v2 = 16.0;
  qword_1004AF0E0 = 0;
  qword_1004AF0E8 = *(_QWORD *)&v2;
  return result;
}

void sub_10000F068()
{
  qword_1004AF0F0 = 0x4056000000000000;
}

void sub_10000F078()
{
  qword_1004AF0F8 = 0x4020000000000000;
}

void sub_10000F088()
{
  qword_1004AF100 = 0x4024000000000000;
}

uint64_t sub_10000F098()
{
  unint64_t v0;
  uint64_t result;
  double v2;

  v0 = sub_10000F0D8();
  result = static UIDevice.isIPhone()(v0);
  v2 = 0.0;
  if ((result & 1) != 0)
    v2 = 16.0;
  qword_1004AF108 = *(_QWORD *)&v2;
  return result;
}

unint64_t sub_10000F0D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047E560;
  if (!qword_10047E560)
  {
    v1 = objc_opt_self(UIDevice);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10047E560);
  }
  return result;
}

uint64_t type metadata accessor for MeasureShareActivityItem()
{
  return objc_opt_self(_TtC7Measure24MeasureShareActivityItem);
}

id sub_10000F388(void *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;
  id v20;
  void *v21;
  id v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  void *object;
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  NSString *v30;
  NSString *v31;
  NSString *v32;
  NSString *v33;
  NSString *v34;
  Class v35;
  id v36;
  void *v37;
  Swift::String v39;

  v12 = sub_10000EDC8(&qword_10047B9C0);
  v13 = swift_allocObject(v12, 64, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1003B0BD0;
  v14 = objc_msgSend(a1, "string");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 32) = v15;
  *(_QWORD *)(v13 + 40) = v17;
  v18 = objc_allocWithZone((Class)UIActivityViewController);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(v18, "initWithActivityItems:applicationActivities:", isa, 0, swift_bridgeObjectRelease(v13).n128_f64[0]);

  v21 = (void *)objc_opt_self(NSBundle);
  v22 = v20;
  v23 = objc_msgSend(v21, "mainBundle");
  v39._object = (void *)0xE000000000000000;
  v24._object = (void *)0x80000001003D7B00;
  v24._countAndFlagsBits = 0xD00000000000002BLL;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v39._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v39)._object;

  v27 = String._bridgeToObjectiveC()();
  objc_msgSend(v22, "setTitle:", v27, swift_bridgeObjectRelease(object).n128_f64[0]);

  v28 = sub_10000EDC8(&qword_10047B9C8);
  v29 = swift_allocObject(v28, 72, 7);
  *(_OWORD *)(v29 + 16) = xmmword_1003B0BE0;
  *(_QWORD *)(v29 + 32) = UIActivityTypeAssignToContact;
  *(_QWORD *)(v29 + 40) = UIActivityTypeAddToReadingList;
  *(_QWORD *)(v29 + 48) = UIActivityTypeMarkupAsPDF;
  *(_QWORD *)(v29 + 56) = UIActivityTypeOpenInIBooks;
  *(_QWORD *)(v29 + 64) = UIActivityTypeSaveToCameraRoll;
  type metadata accessor for ActivityType(0);
  v30 = UIActivityTypeAssignToContact;
  v31 = UIActivityTypeAddToReadingList;
  v32 = UIActivityTypeMarkupAsPDF;
  v33 = UIActivityTypeOpenInIBooks;
  v34 = UIActivityTypeSaveToCameraRoll;
  v35 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v22, "setExcludedActivityTypes:", v35, swift_bridgeObjectRelease(v29).n128_f64[0]);

  v36 = objc_msgSend(v22, "popoverPresentationController");
  if (v36)
  {
    v37 = v36;
    objc_msgSend(v36, "setSourceView:", a2);
    objc_msgSend(v37, "setSourceRect:", a3, a4, a5, a6);

  }
  return v22;
}

_QWORD *sub_10000F66C(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10000F690(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10000F6B0()
{
  id v0;
  unsigned __int8 v1;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = objc_msgSend(v0, "showGuideSnapPoints");

  byte_1004AF110 = v1;
}

void sub_10000F708()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, __n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  id v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  id v65;
  _BYTE v66[24];
  void *v67;
  void *v68;

  v1 = v0;
  v2 = *v0;
  v0[8] = (uint64_t)_swiftEmptyArrayStorage;
  v0[9] = (uint64_t)_swiftEmptyArrayStorage;
  v0[10] = 0;
  *((_DWORD *)v0 + 22) = 1092616192;
  v0[12] = 1;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  *((_BYTE *)v0 + 128) = 0;
  v3 = sub_10000EDC8(&qword_10047BB98);
  KeyPath = swift_getKeyPath(&unk_1003B0D38);
  v5 = qword_10047AD88;
  swift_retain(v1);
  if (v5 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v6 = qword_1004AF890;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v3 + 272);
  v8 = swift_retain(qword_1004AF890);
  v1[17] = v7(KeyPath, v6, v8);
  v9 = swift_getKeyPath(&unk_1003B0D60);
  v10 = sub_10000EDC8(&qword_10047BBA0);
  v11 = qword_1004AF890;
  v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 272);
  v13 = swift_retain(qword_1004AF890);
  v1[18] = v12(v9, v11, v13);
  v14 = sub_10000EDC8(&qword_10047BBA8);
  v15 = swift_getKeyPath(&unk_1003B0D88);
  v16 = qword_1004AF890;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v14 + 272);
  v18 = swift_retain(qword_1004AF890);
  v1[19] = v17(v15, v16, v18);
  v19 = sub_10000EDC8(&qword_10047BBB0);
  v20 = swift_getKeyPath(&unk_1003B0DB0);
  v21 = qword_1004AF890;
  v22 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v19 + 272);
  v23 = swift_retain(qword_1004AF890);
  v1[20] = v22(v20, v21, v23);
  sub_10000EDC8(&qword_10047BBB8);
  v24 = swift_getKeyPath(&unk_1003B0DD8);
  v1[21] = MutableStateValue.__allocating_init(_:_:)(v24, v2);
  sub_10000EDC8(&qword_10047BBC0);
  v25 = swift_getKeyPath(&unk_1003B0E00);
  v1[22] = MutableStateBinding.__allocating_init(_:_:)(v25, v2);
  v26 = swift_getKeyPath(&unk_1003B0E28);
  v27 = sub_10000EDC8(&qword_10047BBC8);
  v28 = qword_1004AF890;
  v29 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v27 + 272);
  v30 = swift_retain(qword_1004AF890);
  v1[23] = v29(v26, v28, v30);
  v31 = swift_getKeyPath(&unk_1003B0E50);
  v32 = sub_10000EDC8(&qword_10047BBD0);
  v33 = qword_1004AF890;
  v34 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v32 + 272);
  v35 = swift_retain(qword_1004AF890);
  v36 = v34(v31, v33, v35);
  v1[25] = 0;
  v1[26] = 0;
  v1[24] = v36;
  *((_WORD *)v1 + 108) = 256;
  v1[28] = 0;
  if (qword_10047A7C0 != -1)
    swift_once(&qword_10047A7C0, sub_10000F6B0);
  if (byte_1004AF110 != 1)
    goto LABEL_11;
  v37 = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  v38 = (void *)v1[28];
  v1[28] = (uint64_t)v37;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  v39 = (void *)*((_QWORD *)&xmmword_1004AF228 + 1);
  if (*((_QWORD *)&xmmword_1004AF228 + 1))
  {
    v40 = qword_1004AF270;
    v59 = qword_1004AF278;
    v60 = (void *)qword_1004AF280;
    v41 = (void *)*((_QWORD *)&xmmword_1004AF258 + 1);
    v42 = qword_1004AF268;
    v43 = (void *)xmmword_1004AF258;
    v45 = (void *)qword_1004AF240;
    v44 = qword_1004AF248;
    v46 = qword_1004AF238;
    v64 = qword_1004AF238;
    v47 = (void *)xmmword_1004AF228;
    v62 = (id)qword_1004AF288;
    v65 = v47;
    v48 = v39;
    swift_retain(v46);
    v63 = v45;
    v49 = v44;
    swift_retain(v44);
    v61 = v43;
    v50 = v41;
    v51 = v42;
    swift_retain(v42);
    v52 = v40;
    swift_retain(v40);
    swift_retain(v59);
    v53 = v60;
    v54 = sub_1001CA908();
    v55 = objc_msgSend(v54, "scene");

    v56 = objc_msgSend(v55, "rootNode");
    swift_release(v59);
    swift_release(v52);
    swift_release(v51);

    swift_release(v49);
    swift_release(v64);

    v57 = (void *)v1[28];
    if (v57)
    {
      v58 = v57;
      objc_msgSend(v56, "addChildNode:", v58);

LABEL_11:
      swift_release(v1);
      v67 = &type metadata for Configurations.Default;
      v68 = &protocol witness table for Configurations.Default;
      StateObserver.init(configuration:)(v66);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10000FBBC()
{
  uint64_t v0;

  swift_allocObject(v0, 232, 7);
  sub_10000FBE0();
}

void sub_10000FBE0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;

  v1 = v0;
  v2 = *v0;
  v0[8] = (uint64_t)_swiftEmptyArrayStorage;
  v0[9] = (uint64_t)_swiftEmptyArrayStorage;
  v0[10] = 0;
  *((_DWORD *)v0 + 22) = 1092616192;
  v0[12] = 1;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  *((_BYTE *)v0 + 128) = 0;
  v3 = sub_10000EDC8(&qword_10047BB98);
  KeyPath = swift_getKeyPath(&unk_1003B0D38);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v5 = qword_1004AF890;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 272);
  swift_retain(qword_1004AF890);
  v1[17] = v6(KeyPath, v5);
  v7 = swift_getKeyPath(&unk_1003B0D60);
  v8 = sub_10000EDC8(&qword_10047BBA0);
  v9 = qword_1004AF890;
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 272);
  swift_retain(qword_1004AF890);
  v1[18] = v10(v7, v9);
  v11 = sub_10000EDC8(&qword_10047BBA8);
  v12 = swift_getKeyPath(&unk_1003B0D88);
  v13 = qword_1004AF890;
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 272);
  swift_retain(qword_1004AF890);
  v1[19] = v14(v12, v13);
  v15 = sub_10000EDC8(&qword_10047BBB0);
  v16 = swift_getKeyPath(&unk_1003B0DB0);
  v17 = qword_1004AF890;
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 272);
  swift_retain(qword_1004AF890);
  v1[20] = v18(v16, v17);
  sub_10000EDC8(&qword_10047BBB8);
  v19 = swift_getKeyPath(&unk_1003B0DD8);
  v1[21] = MutableStateValue.__allocating_init(_:_:)(v19, v2);
  sub_10000EDC8(&qword_10047BBC0);
  v20 = swift_getKeyPath(&unk_1003B0E00);
  v1[22] = MutableStateBinding.__allocating_init(_:_:)(v20, v2);
  v21 = swift_getKeyPath(&unk_1003B0E28);
  v22 = sub_10000EDC8(&qword_10047BBC8);
  v23 = qword_1004AF890;
  v24 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 272);
  swift_retain(qword_1004AF890);
  v1[23] = v24(v21, v23);
  v25 = swift_getKeyPath(&unk_1003B0E50);
  v26 = sub_10000EDC8(&qword_10047BBD0);
  v27 = qword_1004AF890;
  v28 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 272);
  swift_retain(qword_1004AF890);
  v29 = v28(v25, v27);
  v1[25] = 0;
  v1[26] = 0;
  v1[24] = v29;
  *((_WORD *)v1 + 108) = 256;
  v1[28] = 0;
  swift_release(v1);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/EdgeGuidesInstrument.swift", 34, 2, 70, 0);
  __break(1u);
}

double sub_10000FE94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t (*)(unsigned __int8 *), _BYTE *);
  uint64_t v7;
  void (*v8)(_QWORD *__return_ptr, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t (*)(uint64_t), _BYTE *);
  double result;
  _BYTE v23[16];
  uint64_t (*v24)();
  uint64_t v25;
  _BYTE v26[16];
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  _QWORD v29[4];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 200);
  v4 = swift_retain(v2);
  v5 = v3(v4);
  swift_release(v2);
  v27 = sub_1000127A4;
  v28 = v1;
  v6 = *(void (**)(uint64_t (*)(unsigned __int8 *), _BYTE *))(*(_QWORD *)v5 + 296);
  swift_retain(v1);
  v6(sub_1000127AC, v26);
  swift_release(v5);
  swift_release(v1);
  v7 = *(_QWORD *)(v1 + 144);
  v8 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v7 + 144);
  v9 = swift_retain(v7);
  v8(v29, v9);
  swift_release(v7);
  v11 = (void *)v29[0];
  v10 = (_QWORD *)v29[1];

  if (v10)
  {
    v12 = (*(uint64_t (**)(void))((swift_isaMask & *v10) + 0x2F0))();

  }
  else
  {
    v12 = 0;
  }
  *(_QWORD *)(v1 + 120) = v12;
  *(_BYTE *)(v1 + 128) = v10 == 0;
  v13 = *(_QWORD *)(v1 + 136);
  swift_retain(v13);
  StateValue.ifUpdated(_:)(sub_1000127B4, v1);
  swift_release(v13);
  v14 = *(_QWORD *)(v1 + 152);
  __chkstk_darwin(v15);
  v24 = sub_1000127B8;
  v25 = v1;
  swift_retain(v1);
  swift_retain(v14);
  StateValue.ifUpdated(_:)(sub_1000127BC, v23);
  swift_release(v14);
  swift_release(v1);
  v16 = *(_QWORD *)(v1 + 176);
  v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200);
  v18 = swift_retain(v16);
  v19 = v17(v18);
  swift_release(v16);
  __chkstk_darwin(v20);
  v24 = sub_1000127C4;
  v25 = v1;
  v21 = *(void (**)(uint64_t (*)(uint64_t), _BYTE *))(*(_QWORD *)v19 + 296);
  swift_retain(v1);
  v21(sub_1000127C8, v23);
  swift_release(v19);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_1000100A8(uint64_t result, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t (*v5)(_BYTE *);
  void (*v6)(_BYTE *, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_BYTE *);
  void (*v11)(_BYTE *, _QWORD);
  uint64_t *v12;
  uint64_t v13;
  _BYTE v14[32];

  if (result >= 2u)
  {
    v4 = *(_QWORD *)(a2 + 168);
    v5 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 400);
    swift_retain(v4);
    v6 = (void (*)(_BYTE *, _QWORD))v5(v14);
    v8 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(v7 + 8) = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v8);
    v6(v14, 0);
    swift_release(v4);
    v9 = *(_QWORD *)(a2 + 168);
    v10 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v9 + 400);
    swift_retain(v9);
    v11 = (void (*)(_BYTE *, _QWORD))v10(v14);
    v13 = *v12;
    *v12 = (uint64_t)&_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v13);
    v11(v14, 0);
    result = swift_release(v9);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  *(_BYTE *)(a2 + 217) = v3;
  return result;
}

void sub_100010178()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  id v3;
  uint64_t v4;
  void (*v5)(Swift::String *__return_ptr, uint64_t);
  uint64_t v6;
  __n128 *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  __n128 *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned __int8 (*v24)(void);
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  __n128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  Swift::String v41;
  uint64_t v42;
  unint64_t v43;
  Swift::String v44;
  void *object;
  unint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(__n128 *);
  void (*v49)(__n128 *, _QWORD);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  unsigned __int8 (*v58)(void);
  _QWORD *v59;
  int v60;
  uint64_t v61;
  void (*v62)(__n128 *__return_ptr, uint64_t);
  uint64_t v63;
  Swift::String v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  void *v70;
  id v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(__n128 *);
  void (*v80)(__n128 *, _QWORD);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 *v85;
  __n128 *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(__n128 *);
  void (*v99)(__n128 *, _QWORD);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  __n128 v104;
  __int128 v105;
  __n128 v106;
  __int128 v107;
  __n128 v108;
  __int128 v109;
  __n128 v110;
  __n128 v111;
  __int128 v112;
  _OWORD v113[4];
  Swift::String v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __int128 v122;
  __n128 *v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __int128 v132;
  __n128 *v133;
  char v134[24];
  char v135[32];

  if (*(_BYTE *)(v0 + 217) != 1)
    return;
  v1 = (_QWORD *)v0;
  if (qword_10047A7C0 != -1)
    goto LABEL_62;
  while (byte_1004AF110 != 1)
  {
LABEL_14:
    v21 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v22 = objc_msgSend(v21, "guideSnapPointsEnabled");

    if (v22)
    {
      v23 = (_QWORD *)v1[25];
      if (v23)
      {
        v24 = *(unsigned __int8 (**)(void))((swift_isaMask & *v23) + 0x258);
        v25 = v23;
        if (!v24() || v24() == 1)
        {
          v26 = v1[17];
          v27 = swift_retain(v26);
          StateValue.wrappedValue.getter(&v124, v27);
          swift_release(v26);

          v28 = (void *)v124.n128_u64[1];
          if (v124.n128_u64[1])
          {
            v29 = sub_100011688(v25, v124.n128_i64[1]);
            if ((v31 & 1) == 0)
            {
              v32 = v29;
              v33 = v30;
              v34.n128_u64[0] = v29;
              v34.n128_u64[1] = v30;
              v111 = v34;
              v35 = (*(uint64_t (**)(void))((swift_isaMask & *v25) + 0x2A0))();
              v36.n128_f64[0] = simd_float4x4.forward.getter(v35);
              *(double *)&v37 = static simd_float4x4.make(position:normalizedForward:)(v111, v36);
              v109 = v38;
              v112 = v37;
              v105 = v40;
              v107 = v39;
              if (qword_10047AA18 != -1)
                swift_once(&qword_10047AA18, sub_1000E1018);
              v124.n128_u64[0] = 0;
              v124.n128_u64[1] = 0xE000000000000000;
              _StringGuts.grow(_:)(57);
              v41._object = (void *)0x80000001003D7D00;
              v41._countAndFlagsBits = 0xD000000000000037;
              String.append(_:)(v41);
              *(_QWORD *)&v113[0] = v32;
              *((_QWORD *)&v113[0] + 1) = v33;
              v42 = sub_10000EDC8((uint64_t *)&unk_100486AB0);
              v43 = sub_100012B34();
              v44._countAndFlagsBits = SIMD.description.getter(v42, v43);
              object = v44._object;
              String.append(_:)(v44);
              swift_bridgeObjectRelease(object);
              v46 = v124.n128_u64[1];
              Log.default(_:isPrivate:)((Swift::String)v124, 0);
              swift_bridgeObjectRelease(v46);
              v47 = v1[22];
              v48 = *(uint64_t (**)(__n128 *))(*(_QWORD *)v47 + 400);
              swift_retain(v47);
              v49 = (void (*)(__n128 *, _QWORD))v48(&v124);
              v51 = v50;
              v52 = *(char **)(v50 + 144);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v52);
              *(_QWORD *)(v51 + 144) = v52;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v52 = sub_10005F028(0, *((_QWORD *)v52 + 2) + 1, 1, v52);
                *(_QWORD *)(v51 + 144) = v52;
              }
              v55 = *((_QWORD *)v52 + 2);
              v54 = *((_QWORD *)v52 + 3);
              if (v55 >= v54 >> 1)
              {
                v52 = sub_10005F028((char *)(v54 > 1), v55 + 1, 1, v52);
                *(_QWORD *)(v51 + 144) = v52;
              }
              *((_QWORD *)v52 + 2) = v55 + 1;
              v56 = &v52[64 * v55];
              *((_OWORD *)v56 + 2) = v112;
              *((_OWORD *)v56 + 3) = v109;
              *((_OWORD *)v56 + 4) = v107;
              *((_OWORD *)v56 + 5) = v105;
              v49(&v124, 0);
              swift_release(v47);
            }

          }
        }

      }
    }
    v57 = (_QWORD *)v1[25];
    if (v57)
    {
      v58 = *(unsigned __int8 (**)(void))((swift_isaMask & *v57) + 0x258);
      v59 = v57;
      if (!v58() || v58() == 3)
      {

LABEL_58:
        v92 = v1;
        goto LABEL_59;
      }
      v60 = v58();

      if (v60 == 1)
        goto LABEL_58;
    }
    v61 = v1[18];
    v62 = *(void (**)(__n128 *__return_ptr, uint64_t))(*(_QWORD *)v61 + 144);
    v63 = swift_retain(v61);
    v62(&v124, v63);
    swift_release(v61);
    v64 = (Swift::String)v124;

    if (v64._object)
    {
      v65 = (*(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v64._object) + 0x2F0))();

      if (v65 == 8)
        goto LABEL_58;
    }
    v66 = (void *)v1[14];
    v67 = v1[17];
    v68 = v66;
    v69 = swift_retain(v67);
    StateValue.wrappedValue.getter(&v124, v69);
    swift_release(v67);
    v70 = (void *)v124.n128_u64[0];

    if (!v66)
    {
      if (!v70)
      {
LABEL_55:
        v93 = v1[17];
        v94 = swift_retain(v93);
        StateValue.wrappedValue.getter(&v124, v94);
        swift_release(v93);
        v95 = (void *)v124.n128_u64[0];

        if (!v95)
        {
          v76 = v1 + 8;
LABEL_57:
          swift_beginAccess(v76, v113, 1, 0);
          v96 = v1[8];
          v1[8] = _swiftEmptyArrayStorage;
          swift_bridgeObjectRelease(v96);
          v97 = v1[22];
          v98 = *(uint64_t (**)(__n128 *))(*(_QWORD *)v97 + 400);
          swift_retain(v97);
          v99 = (void (*)(__n128 *, _QWORD))v98(&v124);
          v101 = *(_QWORD *)(v100 + 144);
          *(_QWORD *)(v100 + 144) = _swiftEmptyArrayStorage;
          swift_bridgeObjectRelease(v101);
          v99(&v124, 0);
          swift_release(v97);
        }
        goto LABEL_58;
      }
      v68 = v70;
LABEL_42:

      goto LABEL_43;
    }
    if (!v70)
      goto LABEL_42;
    type metadata accessor for WorldEdge(0);
    v71 = v68;
    v72 = static NSObject.== infix(_:_:)(v71, v70);

    if ((v72 & 1) != 0)
      goto LABEL_55;
LABEL_43:
    v73 = v1[17];
    v74 = swift_retain(v73);
    StateValue.wrappedValue.getter(&v124, v74);
    swift_release(v73);
    v75 = (char *)v124.n128_u64[0];

    v76 = v1 + 8;
    if (!v75)
      goto LABEL_57;
    swift_beginAccess(v76, v113, 1, 0);
    v77 = v1[8];
    v1[8] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v77);
    v78 = v1[22];
    v79 = *(uint64_t (**)(__n128 *))(*(_QWORD *)v78 + 400);
    swift_retain(v78);
    v80 = (void (*)(__n128 *, _QWORD))v79(&v124);
    v82 = *(_QWORD *)(v81 + 144);
    *(_QWORD *)(v81 + 144) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v82);
    v80(&v124, 0);
    swift_release(v78);
    sub_1000120FC();
    v83 = v1[8];
    v103 = v1;
    if ((unint64_t)v83 >> 62)
    {
      if (v83 < 0)
        v102 = v1[8];
      else
        v102 = v83 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v83);
      v84 = _CocoaArrayWrapper.endIndex.getter(v102);
      if (!v84)
      {
LABEL_54:

        swift_bridgeObjectRelease(v83);
        v92 = v103;
LABEL_59:
        sub_1000115CC(v92);
        return;
      }
    }
    else
    {
      v84 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v83);
      if (!v84)
        goto LABEL_54;
    }
    v85 = (__n128 *)&v75[direct field offset for WorldEdge.p1];
    v86 = (__n128 *)&v75[direct field offset for WorldEdge.p2];
    swift_beginAccess(&v75[direct field offset for WorldEdge.p1], v135, 0, 0);
    swift_beginAccess(v86, v134, 0, 0);
    v87 = 4;
    v1 = &swift_isaMask;
    while (1)
    {
      v88 = (v83 & 0xC000000000000001) != 0
          ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v87 - 4, v83)
          : *(id *)(v83 + 8 * v87);
      v89 = v88;
      v90 = v87 - 3;
      if (__OFADD__(v87 - 4, 1))
        break;
      sub_100012838((uint64_t)v75, 1, &v124);
      v91 = (*(uint64_t (**)(__n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))((swift_isaMask & *v89) + 0x2D0))(v124, v125, v126, v127, v128, v129, v130, v131);
      if ((v85[1].n128_u8[0] & 1) != 0)
        goto LABEL_69;
      if ((v86[1].n128_u8[0] & 1) != 0)
        goto LABEL_70;
      (*(void (**)(uint64_t, __n128, __n128))((swift_isaMask & *v89) + 0x2D8))(v91, *v85, *v86);

      ++v87;
      if (v90 == v84)
        goto LABEL_54;
    }
    __break(1u);
LABEL_62:
    swift_once(&qword_10047A7C0, sub_10000F6B0);
  }
  v2 = (void *)v1[28];
  if (v2)
  {
    v3 = v2;
    SCNNode.removeAllChildren()();

  }
  v4 = v1[22];
  v5 = *(void (**)(Swift::String *__return_ptr, uint64_t))(*(_QWORD *)v4 + 144);
  v6 = swift_retain(v4);
  v5(&v114, v6);
  swift_release(v4);
  v130 = v120;
  v131 = v121;
  v132 = v122;
  v133 = v123;
  v126 = v116;
  v127 = v117;
  v128 = v118;
  v129 = v119;
  v124 = (__n128)v114;
  v125 = v115;
  v7 = v123;
  swift_bridgeObjectRetain(v123);
  sub_100012BC4((uint64_t)&v124);
  v8 = v7[1].n128_i64[0];
  if (!v8)
  {
    swift_bridgeObjectRelease(v7);
    goto LABEL_14;
  }
  v9 = v1;
  v10 = (void *)objc_opt_self(UIColor);
  v11 = (void *)objc_opt_self(SCNSphere);
  v12 = v7 + 5;
  while (1)
  {
    v108 = v12[-2];
    v110 = v12[-3];
    v104 = *v12;
    v106 = v12[-1];
    v13 = objc_msgSend(v10, "orangeColor", v103);
    v14 = objc_msgSend(v11, "sphereWithRadius:", 0.001);
    v15 = objc_msgSend(v14, "firstMaterial");
    if (!v15)
      break;
    v16 = v15;
    v17 = objc_msgSend(v15, "diffuse");

    objc_msgSend(v17, "setContents:", v13);
    v18 = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
    SCNMatrix4.init(_:)(&v114, v110, v108, v106, v104);
    v113[0] = v114;
    v113[1] = v115;
    v113[2] = v116;
    v113[3] = v117;
    objc_msgSend(v18, "setTransform:", v113);
    objc_msgSend(v18, "setGeometry:", v14);
    v19 = (void *)v9[28];
    if (v19)
    {
      v20 = v19;
      objc_msgSend(v20, "addChildNode:", v18);

      v13 = v20;
    }

    v12 += 4;
    if (!--v8)
    {
      swift_bridgeObjectRelease(v7);
      v1 = v9;
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
}

uint64_t sub_100010AC8(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void (*v18)(__int128 *__return_ptr);
  id v19;
  __int128 v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  double (*v29)(void);
  _QWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49[24];
  uint64_t v50;
  char v51[24];
  char v52[24];
  char v53[24];
  char v54[24];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;

  v2 = v1;
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    if ((a1 >> 62) - 1 >= 2)
    {
      *(_BYTE *)(v2 + 216) = 0;
    }
    else
    {
      *(_BYTE *)(v2 + 216) = 1;
      v4 = (uint64_t *)(v2 + 64);
      swift_beginAccess(v2 + 64, v49, 1, 0);
      v5 = *(_QWORD *)(v2 + 64);
      if (!((unint64_t)v5 >> 62))
      {
        if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_7;
        goto LABEL_5;
      }
      if (v5 < 0)
        v43 = *(_QWORD *)(v2 + 64);
      else
        v43 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v2 + 64));
      v44 = _CocoaArrayWrapper.endIndex.getter(v43);
      swift_bridgeObjectRelease(v5);
      if (v44)
      {
LABEL_5:
        v6 = *v4;
        *v4 = (uint64_t)_swiftEmptyArrayStorage;
        swift_bridgeObjectRelease(v6);
      }
    }
  }
LABEL_7:
  if (a1 != 0xC000000000000010)
  {
    v25 = *(void **)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;

    v26 = *(_QWORD *)(v2 + 72);
    *(_QWORD *)(v2 + 72) = _swiftEmptyArrayStorage;
LABEL_20:
    swift_bridgeObjectRelease(v26);
    return sub_100011020((_QWORD *)v2);
  }
  v7 = *(void **)(v2 + 208);
  if (v7)
  {
    v8 = *(void **)(v2 + 80);
    *(_QWORD *)(v2 + 80) = v7;
    v9 = v7;

    v10 = *(_QWORD *)(v2 + 80);
    if (v10)
    {
      v11 = &v9[direct field offset for WorldEdge.connectedSurfaces];
      swift_beginAccess(&v9[direct field offset for WorldEdge.connectedSurfaces], v54, 0, 0);
      v12 = *(_QWORD *)v11;
      v13 = (uint64_t *)(v10 + direct field offset for WorldEdge.connectedSurfaces);
      swift_beginAccess(v13, v53, 1, 0);
      v14 = *v13;
      *v13 = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v14);
    }
    v15 = *(_QWORD *)(v2 + 72);
    *(_QWORD *)(v2 + 72) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v15);
    v16 = *(void **)(v2 + 80);
    if (v16)
    {
      v17 = *(_QWORD *)(v2 + 144);
      v18 = *(void (**)(__int128 *__return_ptr))(*(_QWORD *)v17 + 144);
      swift_retain(v17);
      v19 = v16;
      v18(&v55);
      swift_release(v17);
      v20 = v55;

      swift_beginAccess(v2 + 96, v52, 1, 0);
      v21 = *(void **)(v2 + 96);
      v22 = *(void **)(v2 + 104);
      *(_OWORD *)(v2 + 96) = v20;
      sub_100012774(v21, v22);
      swift_beginAccess(v2 + 64, v51, 1, 0);
      v23 = *(_QWORD *)(v2 + 64);
      swift_beginAccess(v2 + 96, &v55, 32, 0);
      v24 = *(void **)(v2 + 96);
      if (v24 == (void *)1)
      {
        swift_bridgeObjectRetain(v23);
      }
      else
      {
        v27 = *(void **)(v2 + 104);
        swift_bridgeObjectRetain(v23);
        sub_100012C28(v24, v27);

        v28 = *(_QWORD **)(v2 + 104);
        if (v28)
        {
          swift_endAccess(&v55);
          v29 = *(double (**)(void))((swift_isaMask & *v28) + 0x2B0);
          v30 = v28;
          *(double *)&v31 = v29();
          v47 = v32;
          v48 = v31;
          v45 = v34;
          v46 = v33;

          v36 = v45;
          v35 = v46;
          v38 = v47;
          v37 = v48;
          v39 = 0;
LABEL_19:
          v55 = v37;
          v56 = v38;
          v57 = v35;
          v58 = v36;
          v59 = v39;
          v40 = sub_100011140((uint64_t)v19, (uint64_t)&v55);
          v50 = v23;
          sub_1000FFED0((uint64_t)v40);
          v41 = *(_QWORD *)(v2 + 72);
          *(_QWORD *)(v2 + 72) = v50;
          swift_bridgeObjectRelease(v41);
          v26 = *(_QWORD *)(v2 + 64);
          *(_QWORD *)(v2 + 64) = _swiftEmptyArrayStorage;

          goto LABEL_20;
        }
      }
      swift_endAccess(&v55);
      v37 = 0uLL;
      v39 = 1;
      v38 = 0uLL;
      v35 = 0uLL;
      v36 = 0uLL;
      goto LABEL_19;
    }

  }
  return sub_100011020((_QWORD *)v2);
}

void sub_100010E1C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  id v5;
  char v6;
  unsigned __int8 (*v7)(void);
  id v8;
  void *v9;
  int v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[2];
  id v18[18];
  uint64_t v19[18];
  id v20[18];
  uint64_t v21[18];

  v2 = v1;
  v3 = (void *)v1[25];
  sub_100012C58(a1, (uint64_t)v20, (uint64_t *)&unk_100486700);
  sub_100012C58((uint64_t)v20, (uint64_t)v21, (uint64_t *)&unk_100486700);
  if (sub_1000127D0(v21) == 1)
    v4 = 0;
  else
    v4 = v21[0];
  if (v3)
  {
    if (v4)
    {
      type metadata accessor for WorldLineGuide(0);
      v5 = v3;
      sub_1000127E8(v20);
      v6 = static NSObject.== infix(_:_:)(v5, v4);
      sub_100012810(v20);

      if ((v6 & 1) != 0)
        goto LABEL_16;
    }
  }
  else if (!v4)
  {
    sub_1000127E8(v20);
LABEL_16:
    sub_100012C58((uint64_t)v20, (uint64_t)v19, (uint64_t *)&unk_100486700);
    if (sub_1000127D0(v19) == 1)
      v8 = 0;
    else
      v8 = (id)v19[0];
    goto LABEL_20;
  }
  sub_100012C58((uint64_t)v20, (uint64_t)v19, (uint64_t *)&unk_100486700);
  if (sub_1000127D0(v19) != 1)
  {
    v7 = *(unsigned __int8 (**)(void))((swift_isaMask & *(_QWORD *)v19[0]) + 0x258);
    sub_100012C58((uint64_t)v20, (uint64_t)v18, (uint64_t *)&unk_100486700);
    v8 = v18[0];
    if (!v7())
    {
      v13 = v2[17];
      v14 = swift_retain(v13);
      StateValue.wrappedValue.getter(v17, v14);
      swift_release(v13);
      sub_100012810(v20);
      v15 = v17[0];

      v16 = (void *)v2[26];
      v2[26] = v15;

LABEL_20:
      v12 = (void *)v2[25];
      v2[25] = v8;
      goto LABEL_21;
    }
    sub_100012810(v20);
  }
  v9 = (void *)v2[26];
  v2[26] = 0;

  sub_100012C58((uint64_t)v20, (uint64_t)v18, (uint64_t *)&unk_100486700);
  v10 = sub_1000127D0((uint64_t *)v18);
  v11 = v18[0];
  if (v10 == 1)
    v11 = 0;
  v12 = (void *)v2[25];
  v2[25] = v11;
LABEL_21:
  sub_1000127E8(v20);

  sub_100010178();
}

uint64_t sub_100011020(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_BYTE *);
  void (*v5)(_BYTE *, _QWORD);
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(_BYTE *);
  id v11;
  void (*v12)(_BYTE *, _QWORD);
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_BYTE *);
  void (*v18)(_BYTE *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[24];
  _BYTE v23[32];

  v2 = a1[9];
  v3 = a1[21];
  v4 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 400);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  v5 = (void (*)(_BYTE *, _QWORD))v4(v23);
  v7 = *v6;
  *v6 = v2;
  swift_bridgeObjectRelease(v7);
  v5(v23, 0);
  swift_release(v3);
  v8 = (void *)a1[10];
  v9 = a1[22];
  v10 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v9 + 400);
  v11 = v8;
  swift_retain(v9);
  v12 = (void (*)(_BYTE *, _QWORD))v10(v23);
  v14 = *(void **)(v13 + 136);
  *(_QWORD *)(v13 + 136) = v8;

  v12(v23, 0);
  swift_release(v9);
  swift_beginAccess(a1 + 8, v22, 0, 0);
  v15 = a1[8];
  v16 = a1[21];
  v17 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v16 + 400);
  swift_bridgeObjectRetain(v15);
  swift_retain(v16);
  v18 = (void (*)(_BYTE *, _QWORD))v17(v23);
  v20 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(v19 + 8) = v15;
  swift_bridgeObjectRelease(v20);
  v18(v23, 0);
  return swift_release(v16);
}

_QWORD *sub_100011140(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __n128 v13;
  __n128 v14;
  _QWORD *v15;
  float32x4_t **v16;
  float32x4_t *v17;
  uint64_t v18;
  __n128 v19;
  float v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float v30;
  int32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x4_t v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  uint64_t v48;
  _OWORD *v49;
  id v50;
  _QWORD *v51;
  uint64_t v52;
  void (*v53)(_QWORD *__return_ptr, uint64_t);
  uint64_t v54;
  void *v55;
  id v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  float32x4_t v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  unint64_t v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  unint64_t v86;
  __n128 v87;
  float32x4_t v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  _QWORD __src[65];
  char v94[24];
  unint64_t v95;
  char v96[24];
  _QWORD v97[10];
  _BYTE v98[80];
  _BYTE __dst[528];

  v3 = v2;
  sub_100012C58(a2, (uint64_t)v97, &qword_10047BBE0);
  v6 = v97[0];
  v7 = v97[1];
  v8 = v97[2];
  v9 = v97[3];
  v10 = v97[4];
  v86 = v97[5];
  v11 = v97[6];
  v82 = v97[7];
  sub_100012C58(a2, (uint64_t)v98, &qword_10047BBE0);
  if ((v98[64] & 1) != 0)
  {
    v12 = (__n128 *)(a1 + direct field offset for WorldEdge.transform);
    swift_beginAccess(a1 + direct field offset for WorldEdge.transform, v96, 0, 0);
    v90 = v12[1];
    v91 = *v12;
    v87 = v12[2];
    v13 = v12[3];
  }
  else
  {
    v14.n128_u64[0] = v6;
    v14.n128_u64[1] = v7;
    v91 = v14;
    v14.n128_u64[0] = v8;
    v14.n128_u64[1] = v9;
    v90 = v14;
    v14.n128_u64[0] = v10;
    v14.n128_u64[1] = v86;
    v87 = v14;
    v13.n128_u64[0] = v11;
    v13.n128_u64[1] = v82;
  }
  v83 = v13;
  v15 = _swiftEmptyArrayStorage;
  v95 = (unint64_t)_swiftEmptyArrayStorage;
  v16 = (float32x4_t **)(a1 + direct field offset for WorldEdge.connectedSurfaces);
  swift_beginAccess(a1 + direct field offset for WorldEdge.connectedSurfaces, v94, 0, 0);
  v17 = *v16;
  v18 = v17[1].i64[0];
  if (v18)
  {
    v19.n128_f64[0] = simd_float4x4.position.getter(v91, v90, v87, v83);
    v92 = v19;
    v20 = v19.n128_f32[2];
    v21 = swift_bridgeObjectRetain(v17);
    SIMD3<>.zero.unsafeMutableAddressor(v21);
    v22 = v17 + 4;
    v23 = (float32x2_t)vdup_n_s32(0x3FA66666u);
    do
    {
      v24 = v22[-2];
      v88 = v22[-1];
      v76 = *v22;
      v25 = vmulq_f32(v24, vsubq_f32(v88, (float32x4_t)v92));
      v26 = vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1));
      v27 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), v26);
      v26.i32[0] = 1.0;
      v28.i64[0] = 0x8000000080000000;
      v28.i64[1] = 0x8000000080000000;
      v29 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v26, v27);
      if (*(float *)v27.i32 == 0.0)
        v30 = 0.0;
      else
        v30 = v29.f32[0];
      *(float32x2_t *)v29.f32 = vmul_n_f32(*(float32x2_t *)v24.f32, v30);
      v29.i32[2] = vmuls_lane_f32(v30, v24, 2);
      v31 = (int32x4_t)vmulq_f32(v29, v29);
      v31.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v31, 2), vadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1))).u32[0];
      v32 = vrsqrte_f32((float32x2_t)v31.u32[0]);
      v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v32, v32)));
      v34 = vmulq_n_f32(v29, vmul_f32(v33, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v33, v33))).f32[0]);
      v35.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v92.n128_u64[0], vmul_f32(*(float32x2_t *)v34.f32, v23));
      v35.n128_f32[2] = v20 + vmuls_lane_f32(1.3, v34, 2);
      v35.n128_u32[3] = 0;
      v74 = v35;
      v36.n128_f64[0] = createTransform(forward:normal:position:)();
      v70 = v37;
      v72 = v36;
      v67 = v39;
      v68 = v38;
      v40.n128_f64[0] = simd_float4x4.translated(to:)(v92, v36, v37, v38, v39);
      v80 = v41;
      v84 = v40;
      v77 = v43;
      v78 = v42;
      v44.n128_f64[0] = simd_float4x4.translated(to:)(v74, v72, v70, v68, v67);
      v73 = v45;
      v75 = v44;
      v69 = v47;
      v71 = v46;
      v48 = sub_10000EDC8(&qword_10047E670);
      v49 = (_OWORD *)swift_allocObject(v48, 64, 15);
      v49[1] = xmmword_1003B0BD0;
      v49[2] = v88;
      v49[3] = v76;
      v50 = objc_allocWithZone((Class)type metadata accessor for WorldLineGuide(0));
      LOBYTE(v66) = 1;
      v51 = (_QWORD *)WorldLineGuide.init(guideType:end1:end2:primarySegmentEnd1:primarySegmentEnd2:backingPlanes:anchorState:)(1, 0, 0, 1, 0, 0, 1, v49, v84, v80, v78, v77, v75, v73, v71, v69, v66);
      v52 = *(_QWORD *)(v3 + 192);
      v53 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v52 + 144);
      v54 = swift_retain(v52);
      v53(__src, v54);
      swift_release(v52);
      memcpy(__dst, __src, 0x200uLL);
      v55 = (void *)sub_10008F8B8();
      sub_100012C00((uint64_t)__dst);
      if (v55)
      {
        v56 = objc_msgSend(v55, "camera");

        objc_msgSend(v56, "transform");
        v85 = v58;
        v89 = v57;
        v79 = v60;
        v81 = v59;

        if (qword_10047AB68 != -1)
          swift_once(&qword_10047AB68, sub_10011E814);
        sub_100119FD0(v51, a1, v89, v85, v81, v79);
      }
      v61 = v51;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v63 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v62 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v63 >= v62 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
      v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v61);
      specialized Array._endMutation()(v64);

      v22 += 4;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease(v17);
    return (_QWORD *)v95;
  }
  return v15;
}

uint64_t sub_1000115CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *);
  void (*v9)(_QWORD *, _QWORD);
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  _BYTE v14[24];

  v2 = a1[17];
  v3 = swift_retain(v2);
  StateValue.wrappedValue.getter(v13, v3);
  swift_release(v2);
  v4 = v13[0];

  v5 = (void *)a1[14];
  a1[14] = v4;

  swift_beginAccess(a1 + 8, v14, 0, 0);
  v6 = a1[8];
  v7 = a1[21];
  v8 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v7 + 400);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  v9 = (void (*)(_QWORD *, _QWORD))v8(v13);
  v11 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 8) = v6;
  swift_bridgeObjectRelease(v11);
  v9(v13, 0);
  return swift_release(v7);
}

uint64_t sub_100011688(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float32x4_t *v6;
  uint64_t v7;
  float32x4_t *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *__return_ptr, uint64_t);
  uint64_t v12;
  __int128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  uint64_t result;
  __n128 *v20;
  float32x4_t **v21;
  float32x4_t *v22;
  int64_t v23;
  float32x4_t *v24;
  __n128 *v25;
  unint64_t v26;
  uint64_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  unint64_t v31;
  unint64_t v32;
  float32x4_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  float32x4_t *v37;
  uint64_t v38;
  float32x4_t v39;
  unint64_t v40;
  unint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  uint64_t v45;
  float32x4_t v46;
  int64x2_t v47;
  float v48;
  float32x2_t v49;
  float v50;
  float32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  float32x4_t v62;
  double (*v63)(void);
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  float32x2_t v71;
  float32x2_t v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  int8x16_t v77;
  float v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x16_t v83;
  int8x16_t v84;
  uint64_t v85;
  float v86;
  float v87;
  float32x2_t v88;
  float32x2_t v89;
  int8x16_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(_BYTE *__return_ptr, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(_BYTE *__return_ptr, uint64_t);
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  __n128 *v104;
  _QWORD *v105;
  uint64_t v106;
  __n128 *v107;
  int32x4_t v108;
  uint64_t v109;
  __n128 *v110;
  __n128 *v111;
  __n128 *v112;
  char v113;
  uint64_t v114;
  void (*v115)(__int128 *__return_ptr, uint64_t);
  uint64_t v116;
  unint64_t v117;
  __n128 *v118;
  int8x16_t v119;
  float v120;
  float32x2_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  float v125;
  float32x4_t v126;
  float32x4_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  float32x2_t v133;
  int v134;
  int8x16_t v135;
  __n128 v136;
  __n128 v137;
  float32x2_t v138;
  float v139;
  __n128 v140;
  float32x4_t v141;
  float v142;
  __n128 v143;
  __n128 v144;
  float32x4_t v145;
  __n128 v146;
  float32x4_t v147;
  __n128 v148;
  __n128 v149;
  float32x4_t v150;
  __n128 v151;
  float32x4_t v152;
  float32x4_t v153;
  int8x16_t v154;
  int32x4_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __n128 *v165;
  _BYTE v166[152];
  _OWORD v167[9];
  uint64_t v168;
  _BYTE v169[152];
  uint64_t v170[17];
  char v171[24];
  char v172[24];
  char v173[40];

  v3 = v2;
  v6 = (float32x4_t *)(a2 + direct field offset for WorldEdge.p1);
  swift_beginAccess(a2 + direct field offset for WorldEdge.p1, v173, 0, 0);
  if ((v6[1].i8[0] & 1) != 0)
    return 0;
  v7 = v6->i64[0];
  v127 = *v6;
  v8 = (float32x4_t *)(a2 + direct field offset for WorldEdge.p2);
  swift_beginAccess(a2 + direct field offset for WorldEdge.p2, v172, 0, 0);
  if ((v8[1].i8[0] & 1) != 0)
    return 0;
  v9 = v8->i64[0];
  v126 = *v8;
  v10 = *(_QWORD *)(v3 + 144);
  v11 = *(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v10 + 144);
  v12 = swift_retain(v10);
  v11(v169, v12);
  swift_release(v10);
  v13 = *(_OWORD *)v169;

  if (!*((_QWORD *)&v13 + 1))
    return 0;
  v14.n128_f64[0] = (*(double (**)(void))((swift_isaMask & **((_QWORD **)&v13 + 1)) + 0x2B0))();
  v144 = v15;
  v149 = v14;
  v136 = v17;
  v140 = v16;

  v18.n128_f64[0] = simd_float4x4.position.getter(v149, v144, v140, v136);
  v137 = v18;
  result = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x228))();
  if (!result)
    return result;
  v20 = (__n128 *)result;
  LODWORD(v125) = v7;
  v21 = (float32x4_t **)(a2 + direct field offset for WorldEdge.connectedSurfaces);
  swift_beginAccess(a2 + direct field offset for WorldEdge.connectedSurfaces, v171, 0, 0);
  v22 = *v21;
  v23 = (*v21)[1].i64[0];
  v24 = (float32x4_t *)_swiftEmptyArrayStorage;
  if (v23)
  {
    v25 = v20;
    *(_QWORD *)v169 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v22);
    sub_1000A55C4(0, v23, 0);
    v24 = *(float32x4_t **)v169;
    v26 = *(_QWORD *)(*(_QWORD *)v169 + 16);
    v27 = 2 * v26;
    v28 = v22 + 4;
    do
    {
      v29 = v28[-1];
      v30 = *v28;
      *(_QWORD *)v169 = v24;
      v31 = v24[1].u64[1];
      v32 = v26 + 1;
      if (v26 >= v31 >> 1)
      {
        v145 = v30;
        v150 = v29;
        sub_1000A55C4((char *)(v31 > 1), v26 + 1, 1);
        v30 = v145;
        v29 = v150;
        v24 = *(float32x4_t **)v169;
      }
      v24[1].i64[0] = v32;
      v33 = &v24[v27];
      v33[2] = v29;
      v33[3] = v30;
      v27 += 2;
      v28 += 4;
      v26 = v32;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease(v22);
    v20 = v25;
  }
  v129 = v20[1].n128_u64[0];
  if (v129)
  {
    v124 = v3;
    v123 = a1;
    v131 = 0;
    v132 = 0;
    v133 = 0;
    v130 = 0;
    v34 = 0;
    v35 = v24[1].i64[0];
    v134 = 1;
    v36 = 1;
    v128 = v35;
    do
    {
      if (v35)
      {
        v37 = v24 + 3;
        v38 = (uint64_t)&v20[2 * v34 + 2];
        v39 = *(float32x4_t *)(v38 + 16);
        v40 = *(_QWORD *)v38;
        v41 = *(_QWORD *)(v38 + 8);
        v42 = v39;
        v141 = v39;
        do
        {
          v43 = vmulq_f32(v39, *v37);
          if ((float)(v43.f32[2] + vaddv_f32(*(float32x2_t *)v43.f32)) >= 0.7)
          {
            v146 = *(__n128 *)v37;
            v151 = (__n128)v37[-1];
            type metadata accessor for PlaneUtil(0);
            v44 = static PlaneUtil.distance(point:plane:)(v137, v151, v146);
            v39 = v141;
            if (v44 <= 0.05)
            {
              v134 = 0;
              v36 = 0;
              v131 = v41;
              v132 = v40;
              v130 = v42.u64[1];
              v133 = *(float32x2_t *)v42.f32;
            }
          }
          v37 += 2;
          --v35;
        }
        while (v35);
      }
      ++v34;
      v35 = v128;
    }
    while (v34 != v129);
    swift_bridgeObjectRelease(v24);
    v45 = swift_bridgeObjectRelease(v20);
    if (((v36 | v134) & 1) != 0)
      return 0;
    v46 = (float32x4_t)vdupq_n_s64(v130);
    v47 = vdupq_n_s64(v131);
    v48 = vmuls_lane_f32(v127.f32[2] - *(float *)&v47.i32[2], v46, 2)
        + (float)((float)((float)(v125 - *(float *)&v132) * v133.f32[0])
                + COERCE_FLOAT(vmulq_f32(vsubq_f32(v127, (float32x4_t)v132), (float32x4_t)*(unint64_t *)&v133).i32[1]));
    v49 = vsub_f32((float32x2_t)__PAIR64__(v127.u32[1], LODWORD(v125)), vmul_n_f32(v133, v48));
    v50 = v127.f32[2] - vmuls_lane_f32(v48, v46, 2);
    v51 = vmulq_f32(vsubq_f32(v126, (float32x4_t)v132), (float32x4_t)(unint64_t)v133);
    v51.f32[0] = vmuls_lane_f32(v126.f32[2] - *(float *)&v47.i32[2], v46, 2)
               + (float)((float)((float)(*(float *)&v9 - *(float *)&v132) * v133.f32[0]) + v51.f32[1]);
    v46.f32[0] = vmuls_lane_f32(v51.f32[0], v46, 2);
    *(float32x2_t *)v51.f32 = vsub_f32(vsub_f32((float32x2_t)__PAIR64__(v126.u32[1], v9), vmul_n_f32(v133, v51.f32[0])), v49);
    v51.f32[2] = (float)(v126.f32[2] - v46.f32[0]) - v50;
    v52 = (int32x4_t)vmulq_f32(v51, v51);
    v52.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v52, 2), vadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.i8, 1))).u32[0];
    *(float32x2_t *)v46.f32 = vrsqrte_f32((float32x2_t)v52.u32[0]);
    *(float32x2_t *)v46.f32 = vmul_f32(*(float32x2_t *)v46.f32, vrsqrts_f32((float32x2_t)v52.u32[0], vmul_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32)));
    v53 = vmulq_n_f32(v51, vmul_f32(*(float32x2_t *)v46.f32, vrsqrts_f32((float32x2_t)v52.u32[0], vmul_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32))).f32[0]);
    v54 = (int32x4_t)vmulq_f32(v53, v53);
    v54.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v54, 2), vadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v54.i8, 1))).u32[0];
    *(float32x2_t *)v52.i8 = vrsqrte_f32((float32x2_t)v54.u32[0]);
    *(float32x2_t *)v52.i8 = vmul_f32(*(float32x2_t *)v52.i8, vrsqrts_f32((float32x2_t)v54.u32[0], vmul_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8)));
    v55 = vmulq_n_f32(v53, vmul_f32(*(float32x2_t *)v52.i8, vrsqrts_f32((float32x2_t)v54.u32[0], vmul_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8))).f32[0]);
    v47.i32[1] = v137.n128_i32[1];
    v47.i32[0] = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u32[0];
    v56.i32[1] = v55.i32[1];
    v56.i32[0] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u32[0];
    v57 = vmul_f32(vsub_f32(*(float32x2_t *)v47.i8, (float32x2_t)__PAIR64__(v49.u32[1], LODWORD(v50))), v56);
    *(float *)v52.i32 = v57.f32[0] + (float)((float)((float)(v137.n128_f32[0] - v49.f32[0]) * v55.f32[0]) + v57.f32[1]);
    v46.f32[0] = (float)(v50 + vmuls_lane_f32(*(float *)v52.i32, v55, 2)) - v137.n128_f32[2];
    *(float32x2_t *)v55.f32 = vsub_f32(vadd_f32(v49, vmul_n_f32(*(float32x2_t *)v55.f32, *(float *)v52.i32)), (float32x2_t)v137.n128_u64[0]);
    if ((float)((float)(v46.f32[0] * v46.f32[0]) + vaddv_f32(vmul_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32))) >= 0.0025)
      return 0;
    v138 = v49;
    v142 = v50;
    v147 = v53;
    v58.n128_f64[0] = (*(double (**)(uint64_t))((swift_isaMask & *v123) + 0x2A8))(v45);
    *(double *)v62.i64 = simd_float4x4.position.getter(v58, v59, v60, v61);
    v152 = v62;
    v63 = *(double (**)(void))((swift_isaMask & *v123) + 0x2A0);
    v64.n128_f64[0] = v63();
    *(double *)v68.i64 = simd_float4x4.position.getter(v64, v65, v66, v67);
    v69 = vsubq_f32(v152, v68);
    v70 = (int32x4_t)vmulq_f32(v69, v69);
    v70.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v70, 2), vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1))).u32[0];
    v71 = vrsqrte_f32((float32x2_t)v70.u32[0]);
    v72 = vmul_f32(v71, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v71, v71)));
    v153 = vmulq_n_f32(v69, vmul_f32(v72, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v72, v72))).f32[0]);
    v73.n128_f64[0] = v63();
    *(double *)v77.i64 = simd_float4x4.position.getter(v73, v74, v75, v76);
    v135 = v77;
    v78 = *(float *)&v77.i32[1];
    *(float32x2_t *)v79.f32 = vsub_f32(v138, *(float32x2_t *)v77.i8);
    v79.f32[2] = v142 - *(float *)&v77.i32[2];
    v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v147, (int32x4_t)v147), (int8x16_t)v147, 0xCuLL);
    v81 = vmlaq_f32(vmulq_f32(v80, vnegq_f32(v79)), v147, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL));
    v82 = vmlaq_f32(vmulq_f32(v80, vnegq_f32(v153)), v147, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v153, (int32x4_t)v153), (int8x16_t)v153, 0xCuLL));
    v143 = (__n128)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v81, (int32x4_t)v81), (int8x16_t)v81, 0xCuLL);
    v148 = (__n128)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), (int8x16_t)v82, 0xCuLL);
    v83 = (int8x16_t)vmulq_f32(v81, v81);
    v83.i64[0] = vextq_s8(v83, v83, 4uLL).u64[0];
    v84 = (int8x16_t)vmulq_f32(v82, v82);
    v84.i64[0] = vextq_s8(v84, v84, 4uLL).u64[0];
    *(int32x2_t *)v81.f32 = vzip1_s32(*(int32x2_t *)v81.f32, *(int32x2_t *)v82.f32);
    *(float32x2_t *)v81.f32 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v83.i8, *(int32x2_t *)v84.i8), vadd_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v83.i8, *(int32x2_t *)v84.i8), vmul_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32))));
    v139 = vdiv_f32(*(float32x2_t *)v81.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v81.f32, 1)).f32[0];
    type metadata accessor for LineUtil(0);
    v85 = static LineUtil.isParallel(_:_:)(v143, v148);
    v86 = -v139;
    if (v85 != -1)
      v86 = v139;
    v87 = vmuls_lane_f32(v86, *(float32x2_t *)v153.f32, 1);
    v88.i32[0] = vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL).u32[0];
    v88.i32[1] = v153.i32[0];
    v89 = vmul_n_f32(v88, v86);
    v90 = vextq_s8(v135, v135, 8uLL);
    v90.i32[1] = v135.i32[0];
    v154 = v90;
    v91 = sub_10000EDC8(&qword_10047B9C0);
    v92 = swift_allocObject(v91, 64, 7);
    *(_OWORD *)(v92 + 16) = xmmword_1003B0BD0;
    v93 = *(_QWORD *)(v124 + 176);
    v94 = *(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v93 + 144);
    v95 = swift_retain(v93);
    v94(v166, v95);
    swift_release(v93);
    v167[6] = *(_OWORD *)&v166[96];
    v167[7] = *(_OWORD *)&v166[112];
    v167[8] = *(_OWORD *)&v166[128];
    v168 = *(_QWORD *)&v166[144];
    v167[2] = *(_OWORD *)&v166[32];
    v167[3] = *(_OWORD *)&v166[48];
    v167[4] = *(_OWORD *)&v166[64];
    v167[5] = *(_OWORD *)&v166[80];
    v167[0] = *(_OWORD *)v166;
    v167[1] = *(_OWORD *)&v166[16];
    v96 = *(_QWORD *)&v166[144];
    swift_bridgeObjectRetain(*(_QWORD *)&v166[144]);
    sub_100012BC4((uint64_t)v167);
    v97 = *(_QWORD *)(v96 + 16);
    swift_bridgeObjectRelease(v96);
    *(_QWORD *)(v92 + 56) = &type metadata for Int;
    *(_QWORD *)(v92 + 32) = v97;
    print(_:separator:terminator:)(v92, 32, 0xE100000000000000, 10, 0xE100000000000000);
    swift_bridgeObjectRelease(v92);
    v98 = *(_QWORD *)(v124 + 176);
    v99 = *(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v98 + 144);
    v100 = swift_retain(v98);
    v99(v166, v100);
    swift_release(v98);
    *(_OWORD *)&v169[96] = *(_OWORD *)&v166[96];
    *(_OWORD *)&v169[112] = *(_OWORD *)&v166[112];
    *(_OWORD *)&v169[32] = *(_OWORD *)&v166[32];
    *(_OWORD *)&v169[48] = *(_OWORD *)&v166[48];
    *(_OWORD *)&v169[128] = *(_OWORD *)&v166[128];
    *(_QWORD *)&v169[144] = *(_QWORD *)&v166[144];
    *(_OWORD *)&v169[64] = *(_OWORD *)&v166[64];
    *(_OWORD *)&v169[80] = *(_OWORD *)&v166[80];
    *(_OWORD *)v169 = *(_OWORD *)v166;
    *(_OWORD *)&v169[16] = *(_OWORD *)&v166[16];
    v101 = *(void **)v166;
    v162 = *(_OWORD *)&v169[104];
    v163 = *(_OWORD *)&v169[120];
    v164 = *(_OWORD *)&v169[136];
    v158 = *(_OWORD *)&v169[40];
    v159 = *(_OWORD *)&v169[56];
    v160 = *(_OWORD *)&v169[72];
    v161 = *(_OWORD *)&v169[88];
    v156 = *(_OWORD *)&v169[8];
    v157 = *(_OWORD *)&v169[24];
    sub_100012C58((uint64_t)v169, (uint64_t)v170, (uint64_t *)&unk_100486700);
    if (sub_1000127D0(v170) == 1)
    {
      v102 = sub_100012BC4((uint64_t)v169);
      v103 = 0;
      v104 = 0;
    }
    else
    {
      *(_OWORD *)&v166[88] = v161;
      *(_OWORD *)&v166[104] = v162;
      *(_OWORD *)&v166[120] = v163;
      *(_OWORD *)&v166[136] = v164;
      *(_OWORD *)&v166[24] = v157;
      *(_OWORD *)&v166[40] = v158;
      *(_OWORD *)&v166[56] = v159;
      *(_OWORD *)&v166[72] = v160;
      *(_QWORD *)v166 = v101;
      *(_OWORD *)&v166[8] = v156;
      v105 = v101;
      v106 = sub_100012BC4((uint64_t)v166);
      v103 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v105) + 0xB8))(v106);
      v104 = v107;

    }
    v108.i64[1] = v154.i64[1];
    *(float32x2_t *)v108.i8 = vadd_f32(*(float32x2_t *)v154.i8, v89);
    v155 = v108;
    v109 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v123) + 0xB8))(v102);
    v111 = v110;
    if (v104)
    {
      if (v103 == v109 && v104 == v110)
      {
        swift_bridgeObjectRelease(v104);
        swift_bridgeObjectRelease(v111);
      }
      else
      {
        v113 = _stringCompareWithSmolCheck(_:_:expecting:)(v103, v104, v109, v110, 0);
        swift_bridgeObjectRelease(v104);
        swift_bridgeObjectRelease(v111);
        if ((v113 & 1) == 0)
        {
LABEL_43:
          LODWORD(v122) = vtrn2q_s32(v155, (int32x4_t)0).u32[0];
          *((float *)&v122 + 1) = v78 + v87;
          return v122;
        }
      }
      v114 = *(_QWORD *)(v124 + 176);
      v115 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v114 + 144);
      v116 = swift_retain(v114);
      v115(&v156, v116);
      swift_release(v114);
      *(_OWORD *)&v166[96] = v162;
      *(_OWORD *)&v166[112] = v163;
      *(_OWORD *)&v166[128] = v164;
      *(_QWORD *)&v166[144] = v165;
      *(_OWORD *)&v166[32] = v158;
      *(_OWORD *)&v166[48] = v159;
      *(_OWORD *)&v166[64] = v160;
      *(_OWORD *)&v166[80] = v161;
      *(_OWORD *)v166 = v156;
      *(_OWORD *)&v166[16] = v157;
      v20 = v165;
      swift_bridgeObjectRetain(v165);
      sub_100012BC4((uint64_t)v166);
      v117 = v20[1].n128_u64[0];
      if (v117)
      {
        v118 = v20 + 5;
        do
        {
          *(double *)v119.i64 = simd_float4x4.position.getter(v118[-3], v118[-2], v118[-1], *v118);
          v120 = (float)(*(float *)&v119.i32[1] - (float)(v78 + v87))
               * (float)(*(float *)&v119.i32[1] - (float)(v78 + v87));
          v121.i32[0] = vextq_s8(v119, v119, 8uLL).u32[0];
          v121.i32[1] = v119.i32[0];
          *(float32x2_t *)v119.i8 = vsub_f32(v121, *(float32x2_t *)v155.i8);
          *(float32x2_t *)v119.i8 = vmul_f32(*(float32x2_t *)v119.i8, *(float32x2_t *)v119.i8);
          if ((float)(*(float *)v119.i32 + (float)(*(float *)&v119.i32[1] + v120)) < 0.0025)
            goto LABEL_27;
          v118 += 4;
        }
        while (--v117);
      }
      v112 = v20;
    }
    else
    {
      v112 = v110;
    }
    swift_bridgeObjectRelease(v112);
    goto LABEL_43;
  }
  swift_bridgeObjectRelease(v24);
LABEL_27:
  swift_bridgeObjectRelease(v20);
  return 0;
}

void sub_1000120FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[3];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 136);
  v3 = swift_retain(v2);
  StateValue.wrappedValue.getter(v11, v3);
  swift_release(v2);
  v4 = (_QWORD *)v11[0];

  if (v4)
  {
    v5 = v4;
    if ((*(_BYTE *)(v1 + 216) & 1) == 0)
    {
      v6 = sub_1000121DC((uint64_t)v4);
      swift_beginAccess(v1 + 64, v11, 33, 0);
      v5 = v6;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v7 = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFFF8;
      v9 = *(_QWORD *)(v7 + 0x10);
      v8 = *(_QWORD *)(v7 + 24);
      if (v9 >= v8 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v5);
      specialized Array._endMutation()(v10);
      swift_endAccess(v11);

    }
  }
}

_QWORD *sub_1000121DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(_QWORD *__return_ptr, uint64_t);
  uint64_t v27;
  void *v28;
  id v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  float32x4_t v33;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  float32x4_t v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  _QWORD __src[65];
  char v54[24];
  char v55[24];
  char v56[24];
  _OWORD __dst[33];

  v2 = v1;
  sub_100012838(a1, 1, __dst);
  v49 = (__n128)__dst[1];
  v51 = (__n128)__dst[0];
  v45 = (__n128)__dst[3];
  v47 = (__n128)__dst[2];
  v43 = (__n128)__dst[5];
  v44 = (__n128)__dst[4];
  v41 = (__n128)__dst[7];
  v42 = (__n128)__dst[6];
  v4 = a1 + direct field offset for WorldEdge.p1;
  swift_beginAccess(a1 + direct field offset for WorldEdge.p1, v56, 0, 0);
  v5 = *(_QWORD *)v4;
  v6 = *(_QWORD *)(v4 + 8);
  v40 = *(unsigned __int8 *)(v4 + 16);
  v7 = a1 + direct field offset for WorldEdge.p2;
  swift_beginAccess(a1 + direct field offset for WorldEdge.p2, v55, 0, 0);
  v8 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(unsigned __int8 *)(v7 + 16);
  v11 = a1 + direct field offset for WorldEdge.connectedSurfaces;
  swift_beginAccess(a1 + direct field offset for WorldEdge.connectedSurfaces, v54, 0, 0);
  v12 = *(_QWORD *)v11;
  v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  v14 = _swiftEmptyArrayStorage;
  if (v13)
  {
    v37 = v6;
    v38 = v5;
    v39 = v2;
    *(_QWORD *)&__dst[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v12);
    sub_1000A55C4(0, v13, 0);
    v14 = *(_QWORD **)&__dst[0];
    v15 = *(_QWORD *)(*(_QWORD *)&__dst[0] + 16);
    v16 = 4 * v15;
    v17 = (__int128 *)(v12 + 64);
    do
    {
      v18 = *(v17 - 1);
      v19 = *v17;
      *(_QWORD *)&__dst[0] = v14;
      v20 = v14[3];
      v21 = v15 + 1;
      if (v15 >= v20 >> 1)
      {
        v35 = v19;
        v36 = v18;
        sub_1000A55C4((char *)(v20 > 1), v15 + 1, 1);
        v19 = v35;
        v18 = v36;
        v14 = *(_QWORD **)&__dst[0];
      }
      v14[2] = v21;
      v22 = &v14[v16];
      *((_OWORD *)v22 + 2) = v18;
      *((_OWORD *)v22 + 3) = v19;
      v16 += 4;
      v17 += 4;
      v15 = v21;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease(v12);
    v5 = v38;
    v2 = v39;
    v6 = v37;
  }
  v23 = objc_allocWithZone((Class)type metadata accessor for WorldLineGuide(0));
  v24 = (_QWORD *)WorldLineGuide.init(guideType:end1:end2:primarySegmentEnd1:primarySegmentEnd2:backingPlanes:anchorState:)(0, v5, v6, v40, v8, v9, v10, v14, v51, v49, v47, v45, v44, v43, v42, v41, 0);
  v25 = *(_QWORD *)(v2 + 192);
  v26 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v25 + 144);
  v27 = swift_retain(v25);
  v26(__src, v27);
  swift_release(v25);
  memcpy(__dst, __src, 0x200uLL);
  v28 = (void *)sub_10008F8B8();
  sub_100012C00((uint64_t)__dst);
  if (v28)
  {
    v29 = objc_msgSend(v28, "camera");

    objc_msgSend(v29, "transform");
    v50 = v31;
    v52 = v30;
    v46 = v33;
    v48 = v32;

    if (qword_10047AB68 != -1)
      swift_once(&qword_10047AB68, sub_10011E814);
    sub_1001199A4(v24, a1, v52, v50, v48, v46);
  }
  return v24;
}

void sub_1000124C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));

  sub_100012774(*(void **)(v0 + 96), *(void **)(v0 + 104));
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 144));
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(*(_QWORD *)(v0 + 168));
  swift_release(*(_QWORD *)(v0 + 176));
  swift_release(*(_QWORD *)(v0 + 184));
  swift_release(*(_QWORD *)(v0 + 192));

}

uint64_t sub_10001254C(uint64_t a1)
{
  uint64_t v1;

  v1 = StateObserver.deinit(a1);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 72));

  sub_100012774(*(void **)(v1 + 96), *(void **)(v1 + 104));
  swift_release(*(_QWORD *)(v1 + 136));
  swift_release(*(_QWORD *)(v1 + 144));
  swift_release(*(_QWORD *)(v1 + 152));
  swift_release(*(_QWORD *)(v1 + 160));
  swift_release(*(_QWORD *)(v1 + 168));
  swift_release(*(_QWORD *)(v1 + 176));
  swift_release(*(_QWORD *)(v1 + 184));
  swift_release(*(_QWORD *)(v1 + 192));

  return v1;
}

uint64_t sub_1000125F0(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_10001254C(a1);
  return swift_deallocClassInstance(v1, 232, 7);
}

uint64_t type metadata accessor for EdgeGuidesInstrument(uint64_t a1)
{
  uint64_t result;

  result = qword_10047B9F8;
  if (!qword_10047B9F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EdgeGuidesInstrument);
  return result;
}

uint64_t sub_100012648(uint64_t a1)
{
  _QWORD v2[20];

  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = "\b";
  v2[3] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[4] = &unk_1003B0CF0;
  v2[5] = "\b";
  v2[6] = &unk_1003B0D08;
  v2[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[12] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[13] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[14] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[15] = "\b";
  v2[16] = "\b";
  v2[17] = &unk_1003B0D20;
  v2[18] = &unk_1003B0D20;
  v2[19] = "\b";
  return swift_initClassMetadata2(a1, 256, 20, v2, a1 + 208);
}

id sub_1000126E8@<X0>(_QWORD *a1@<X8>)
{
  id result;
  id v3;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  result = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (*((_QWORD *)&xmmword_1004AF258 + 1))
  {
    v3 = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
    *a1 = Contexts.PrivateQueue.init(_:)();
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100012774(void *a1, void *a2)
{
  if (a1 != (void *)1)
  {

  }
}

uint64_t sub_1000127A4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000100A8(a1, v1);
}

uint64_t sub_1000127AC(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_1000F2ED0(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_1000127BC(_QWORD *a1)
{
  uint64_t v1;

  return sub_10016EB54(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_1000127C8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E6418(a1, *(uint64_t (**)(_OWORD *))(v1 + 16));
}

uint64_t sub_1000127D0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

id *sub_1000127E8(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

id *sub_100012810(id *a1)
{

  return a1;
}

void sub_100012838(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  float32x4_t *v6;
  float v7;
  float32x4_t v8;
  float32x2_t v9;
  __n128 *v10;
  uint64_t v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  float32x4_t v15;
  float v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float v24;
  float32x2_t v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float32x2_t v33;
  __n128 v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __n128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  float32x4_t v49;
  __int128 v50;
  float v51;
  __int128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  char v57[24];
  char v58[24];
  char v59[24];

  v6 = (float32x4_t *)(a1 + direct field offset for WorldEdge.p1);
  swift_beginAccess(a1 + direct field offset for WorldEdge.p1, v59, 0, 0);
  if ((v6[1].i8[0] & 1) != 0)
  {
    v7 = 2.6;
  }
  else
  {
    v8 = vsubq_f32(*v6, *v6);
    v9 = vsub_f32(*(float32x2_t *)v6->f32, *(float32x2_t *)v6->f32);
    v7 = sqrtf(COERCE_FLOAT(vmulq_f32(v8, v8).i32[2]) + vaddv_f32(vmul_f32(v9, v9))) + 2.6;
  }
  v51 = v7;
  v10 = (__n128 *)(a1 + direct field offset for WorldEdge.transform);
  v11 = swift_beginAccess(a1 + direct field offset for WorldEdge.transform, v58, 0, 0);
  v55 = v10[1];
  v56 = *v10;
  v53 = v10[3];
  v54 = v10[2];
  *(double *)v12.i64 = simd_float4x4.forward.getter(v11);
  v49 = v12;
  *(double *)&v13 = simd_float4x4.position.getter(v56, v55, v54, v53);
  v14 = v13;
  if ((v6[1].i8[0] & 1) != 0)
  {
    v15 = v49;
    v16 = v51;
  }
  else
  {
    v17 = &v6->i64[1];
    v18 = v6->i64[0];
    *(_QWORD *)&v19 = v18;
    *((_QWORD *)&v19 + 1) = *v17;
    v45 = v14;
    v47 = v19;
    v20 = (float32x4_t *)(a1 + direct field offset for WorldEdge.p2);
    swift_beginAccess(v20, v57, 0, 0);
    if ((v20[1].i8[0] & 1) != 0)
    {
      v15 = v49;
      v16 = v51;
      v14 = v45;
    }
    else
    {
      v22 = *v20;
      v16 = v51;
      if ((a2 & 1) != 0)
      {
        LODWORD(v23) = v20->i64[1];
        v24 = *((float *)&v47 + 2);
        v25 = (float32x2_t)__PAIR64__(DWORD1(v47), v18);
        v22.i32[0] = v20->i64[0];
        *(float32x2_t *)v21.f32 = vsub_f32((float32x2_t)__PAIR64__(DWORD1(v47), v18), *(float32x2_t *)v22.f32);
        v21.f32[2] = *((float *)&v47 + 2) - v22.f32[2];
        v26 = vmulq_f32(v21, v21);
        v27 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]);
      }
      else
      {
        v24 = *((float *)&v47 + 2);
        LODWORD(v23) = v20->i64[1];
        v22.i32[0] = v20->i64[0];
        *(float32x2_t *)v21.f32 = vsub_f32((float32x2_t)__PAIR64__(DWORD1(v47), v18), *(float32x2_t *)v22.f32);
        v21.f32[2] = *((float *)&v47 + 2) - v22.f32[2];
        v28 = vmulq_f32(v21, v21);
        v27 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]);
        v16 = v27;
        v25 = (float32x2_t)__PAIR64__(DWORD1(v47), v18);
      }
      *(float32x2_t *)v22.f32 = vsub_f32(*(float32x2_t *)v22.f32, v25);
      v22.f32[2] = v23 - v24;
      v29 = (int32x4_t)vmulq_f32(v22, v22);
      v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
      v30 = vrsqrte_f32((float32x2_t)v29.u32[0]);
      v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v30, v30)));
      v15 = vmulq_n_f32(v22, vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31))).f32[0]);
      *(float32x2_t *)&v14 = vadd_f32(vmul_n_f32(*(float32x2_t *)v15.f32, v27 * 0.5), v25);
      *((float *)&v14 + 2) = v24 + vmuls_lane_f32(v27 * 0.5, v15, 2);
    }
  }
  v32 = vmuls_lane_f32(v16, v15, 2) * 0.5;
  v33 = vmul_f32(vmul_n_f32(*(float32x2_t *)v15.f32, v16), (float32x2_t)0x3F0000003F000000);
  v34.n128_u64[0] = (unint64_t)vsub_f32(*(float32x2_t *)&v14, v33);
  v34.n128_f32[2] = *((float *)&v14 + 2) - v32;
  v34.n128_u32[3] = 0;
  v35.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)&v14, v33);
  v35.n128_f32[2] = *((float *)&v14 + 2) + v32;
  v35.n128_u32[3] = 0;
  v44 = v35;
  *(double *)&v36 = simd_float4x4.translated(to:)(v34, v56, v55, v54, v53);
  v50 = v37;
  v52 = v36;
  v46 = v39;
  v48 = v38;
  *(double *)&v40 = simd_float4x4.translated(to:)(v44, v56, v55, v54, v53);
  *a3 = v52;
  a3[1] = v50;
  a3[2] = v48;
  a3[3] = v46;
  a3[4] = v40;
  a3[5] = v41;
  a3[6] = v42;
  a3[7] = v43;
}

unint64_t sub_100012B34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047BBD8;
  if (!qword_10047BBD8)
  {
    v1 = sub_100012B80((uint64_t *)&unk_100486AB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for SIMD3<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10047BBD8);
  }
  return result;
}

uint64_t sub_100012B80(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100012BC4(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 136);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 144));

  return a1;
}

uint64_t sub_100012C00(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 16));
  return a1;
}

id sub_100012C28(id result, void *a2)
{
  id v2;
  id v3;

  if (result != (id)1)
  {
    v3 = result;
    v2 = a2;
    return v3;
  }
  return result;
}

uint64_t sub_100012C58(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000EDC8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id sub_100012C9C(uint64_t a1)
{
  return sub_100012CD8(a1, (SEL *)&selRef_labelColor, &qword_1004AF118);
}

id sub_100012CB0(uint64_t a1)
{
  return sub_100012CD8(a1, (SEL *)&selRef_tertiaryLabelColor, &qword_1004AF120);
}

id sub_100012CC4(uint64_t a1)
{
  return sub_100012CD8(a1, (SEL *)&selRef_systemYellowColor, &qword_1004AF128);
}

id sub_100012CD8(uint64_t a1, SEL *a2, _QWORD *a3)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIColor), *a2);
  *a3 = result;
  return result;
}

void sub_100012D18()
{
  qword_1004AF130 = 0x4000000000000000;
}

void sub_100012D28()
{
  qword_1004AF138 = 0x4020000000000000;
}

double sub_100012D38()
{
  double result;

  if (qword_10047A7E8 != -1)
    swift_once(&qword_10047A7E8, sub_100012D28);
  result = *(double *)&qword_1004AF138 * 0.5;
  *(double *)&qword_1004AF140 = *(double *)&qword_1004AF138 * 0.5;
  return result;
}

void sub_100012D88()
{
  qword_1004AF148 = 0x4036000000000000;
}

void sub_100012D98()
{
  qword_1004AF150 = 0x4041800000000000;
}

void sub_100012DAC()
{
  qword_1004AF158 = 0x401C000000000000;
}

id sub_100012DBC()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 16.0, UIFontWeightMedium);
  qword_1004AF160 = (uint64_t)result;
  return result;
}

void sub_100012E04()
{
  qword_1004AF168 = 0x4056000000000000;
}

void sub_100012E14()
{
  qword_1004AF170 = 0x4066000000000000;
}

void sub_100012E24()
{
  qword_1004AF178 = 0x404C000000000000;
}

void sub_100012E34()
{
  qword_1004AF180 = 0x4044000000000000;
}

uint64_t sub_100012E44()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for Sketch()
{
  return objc_opt_self(_TtC7Measure6Sketch);
}

id sub_100012E74(void *a1, char a2, char a3, char a4)
{
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t *v13;
  id v14;
  id v15;
  id v16;
  float v17;
  id v18;
  double v19;

  v8 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v9 = objc_msgSend(a1, "CGPath");
  objc_msgSend(v8, "setPath:", v9);

  if ((a3 & 1) != 0)
  {
    if ((a4 & 1) != 0)
    {
      if (qword_10047A7D8 != -1)
        swift_once(&qword_10047A7D8, sub_100012CC4);
      v10 = objc_msgSend((id)qword_1004AF128, "CGColor");
    }
    else
    {
      v14 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
      v10 = objc_msgSend(v14, "CGColor");

    }
    objc_msgSend(v8, "setFillColor:", v10);

    if ((a4 & 1) != 0)
    {
      v15 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
      v16 = objc_msgSend(v15, "CGColor");

      v17 = 0.5;
    }
    else
    {
      if (qword_10047A7D8 != -1)
        swift_once(&qword_10047A7D8, sub_100012CC4);
      v16 = objc_msgSend((id)qword_1004AF128, "CGColor");
      v17 = 1.0;
    }
    objc_msgSend(v8, "setStrokeColor:", v16);

    *(float *)&v19 = v17;
    objc_msgSend(v8, "setOpacity:", v19);
  }
  else
  {
    v11 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    v12 = objc_msgSend(v11, "CGColor");

    objc_msgSend(v8, "setFillColor:", v12);
    if ((a2 & 1) != 0)
    {
      if (qword_10047A7D0 != -1)
        swift_once(&qword_10047A7D0, sub_100012CB0);
      v13 = &qword_1004AF120;
    }
    else
    {
      if (qword_10047A7C8 != -1)
        swift_once(&qword_10047A7C8, sub_100012C9C);
      v13 = &qword_1004AF118;
    }
    v18 = objc_msgSend((id)*v13, "CGColor");
    objc_msgSend(v8, "setStrokeColor:", v18);

  }
  if (qword_10047A7E0 != -1)
    swift_once(&qword_10047A7E0, sub_100012D18);
  objc_msgSend(v8, "setLineWidth:", *(double *)&qword_1004AF130);
  return v8;
}

id sub_1000131A4(double a1, double a2, double a3, double a4)
{
  id v8;
  double v9;
  double v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v8 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
  objc_msgSend(v8, "moveToPoint:", a1, a2);
  v9 = a1 + a3;
  objc_msgSend(v8, "addLineToPoint:", v9, a2);
  v10 = a2 + a4;
  objc_msgSend(v8, "addLineToPoint:", v9, v10);
  objc_msgSend(v8, "addLineToPoint:", a1, v10);
  objc_msgSend(v8, "addLineToPoint:", a1, a2);
  v11 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v12 = objc_msgSend(v8, "CGPath");
  objc_msgSend(v11, "setPath:", v12);

  v13 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v14 = objc_msgSend(v13, "CGColor");

  objc_msgSend(v11, "setFillColor:", v14);
  if (qword_10047A7C8 != -1)
    swift_once(&qword_10047A7C8, sub_100012C9C);
  v15 = objc_msgSend((id)qword_1004AF118, "CGColor");
  objc_msgSend(v11, "setStrokeColor:", v15);

  if (qword_10047A7E0 != -1)
    swift_once(&qword_10047A7E0, sub_100012D18);
  objc_msgSend(v11, "setLineWidth:", *(double *)&qword_1004AF130);

  return v11;
}

id sub_1000133C0(char a1, double a2, double a3, double a4, double a5)
{
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t *v15;
  id v16;
  double v17;

  v10 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
  objc_msgSend(v10, "moveToPoint:", a2, a3);
  objc_msgSend(v10, "addLineToPoint:", a4, a5);
  v11 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v12 = objc_msgSend(v10, "CGPath");
  objc_msgSend(v11, "setPath:", v12);

  v13 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v14 = objc_msgSend(v13, "CGColor");

  objc_msgSend(v11, "setFillColor:", v14);
  if ((a1 & 1) != 0)
  {
    if (qword_10047A7D0 != -1)
      swift_once(&qword_10047A7D0, sub_100012CB0);
    v15 = &qword_1004AF120;
  }
  else
  {
    if (qword_10047A7C8 != -1)
      swift_once(&qword_10047A7C8, sub_100012C9C);
    v15 = &qword_1004AF118;
  }
  v16 = objc_msgSend((id)*v15, "CGColor");
  objc_msgSend(v11, "setStrokeColor:", v16);

  if (qword_10047A7E0 != -1)
    swift_once(&qword_10047A7E0, sub_100012D18);
  objc_msgSend(v11, "setLineWidth:", *(double *)&qword_1004AF130);
  LODWORD(v17) = 1.0;
  objc_msgSend(v11, "setOpacity:", v17);

  return v11;
}

id sub_1000135EC(char a1, double a2, double a3)
{
  id v6;
  id v7;
  id v8;
  uint64_t *v9;
  id v10;
  id v11;
  id v12;

  v6 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  if (qword_10047A7F0 != -1)
    swift_once(&qword_10047A7F0, sub_100012D38);
  v7 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:", 1, a2, a3, *(double *)&qword_1004AF140, 0.0, 6.28318531);
  v8 = objc_msgSend(v7, "CGPath");

  objc_msgSend(v6, "setPath:", v8);
  if ((a1 & 1) != 0)
  {
    if (qword_10047A7D8 != -1)
      swift_once(&qword_10047A7D8, sub_100012CC4);
    v9 = &qword_1004AF128;
  }
  else
  {
    if (qword_10047A7C8 != -1)
      swift_once(&qword_10047A7C8, sub_100012C9C);
    v9 = &qword_1004AF118;
  }
  v10 = objc_msgSend((id)*v9, "CGColor");
  objc_msgSend(v6, "setFillColor:", v10);

  v11 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v12 = objc_msgSend(v11, "CGColor");

  objc_msgSend(v6, "setStrokeColor:", v12);
  return v6;
}

uint64_t sub_1000137DC()
{
  char *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  id v7;
  void *v8;
  uint64_t v9;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC7Measure32DetailedPlatterCellTableViewCell_measureContent], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v1 = objc_msgSend(v0, "contentView");
  v2 = sub_100124D70(v1, UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right);
  v3 = v2;
  if (!((unint64_t)v2 >> 62))
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v2);
    if (v4)
      goto LABEL_3;
LABEL_13:

    return swift_bridgeObjectRelease_n(v3, 2);
  }
  if (v2 < 0)
    v9 = v2;
  else
    v9 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  result = _CocoaArrayWrapper.endIndex.getter(v9);
  v4 = result;
  if (!result)
    goto LABEL_13;
LABEL_3:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      else
        v7 = *(id *)(v3 + 8 * i + 32);
      v8 = v7;
      objc_msgSend(v7, "setActive:", 1);

    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

char *sub_100013910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  objc_class *ObjectType;
  uint64_t v8;
  id v9;
  char *v10;
  NSString v11;
  id v12;
  char *v13;
  id v14;
  objc_super v16;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType(v3);
  v8 = OBJC_IVAR____TtC7Measure32DetailedPlatterCellTableViewCell_measureContent;
  v9 = objc_allocWithZone((Class)type metadata accessor for MeasureTableViewCellCommonContentView());
  v10 = v4;
  *(_QWORD *)&v4[v8] = objc_msgSend(v9, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  if (a3)
  {
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v11 = 0;
  }
  v16.receiver = v10;
  v16.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v16, "initWithStyle:reuseIdentifier:", a1, v11);

  v13 = (char *)v12;
  v14 = objc_msgSend(v13, "contentView");
  objc_msgSend(v14, "addSubview:", *(_QWORD *)&v13[OBJC_IVAR____TtC7Measure32DetailedPlatterCellTableViewCell_measureContent]);

  sub_1000137DC();
  return v13;
}

id sub_100013A88(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  id v5;
  char *v6;
  id v7;
  id v8;
  char *v9;
  id v10;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = OBJC_IVAR____TtC7Measure32DetailedPlatterCellTableViewCell_measureContent;
  v5 = objc_allocWithZone((Class)type metadata accessor for MeasureTableViewCellCommonContentView());
  v6 = v1;
  *(_QWORD *)&v1[v4] = objc_msgSend(v5, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v12.receiver = v6;
  v12.super_class = ObjectType;
  v7 = objc_msgSendSuper2(&v12, "initWithCoder:", a1);
  v8 = v7;
  if (v7)
  {
    v9 = (char *)v7;
    v10 = objc_msgSend(v9, "contentView");
    objc_msgSend(v10, "addSubview:", *(_QWORD *)&v9[OBJC_IVAR____TtC7Measure32DetailedPlatterCellTableViewCell_measureContent]);

    sub_1000137DC();
  }

  return v8;
}

uint64_t type metadata accessor for DetailedPlatterCellTableViewCell()
{
  return objc_opt_self(_TtC7Measure32DetailedPlatterCellTableViewCell);
}

id sub_100013BD4()
{
  return sub_100013BFC(&OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___pointContainerNode, (uint64_t (*)(void))sub_100014B8C);
}

id sub_100013BE8()
{
  return sub_100013BFC(&OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___paintContainerNode, (uint64_t (*)(void))sub_100014BB0);
}

id sub_100013BFC(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = (void *)a2();
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

uint64_t sub_100013C54()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v1 = OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___pointPool;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___pointPool];
  if (v2)
  {
    v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___pointPool];
  }
  else
  {
    v4 = v0;
    v5 = swift_allocObject(&unk_10043EBB0, 24, 7);
    *(_QWORD *)(v5 + 16) = v4;
    v6 = swift_allocObject(&unk_10043EBD8, 32, 7);
    *(_QWORD *)(v6 + 16) = sub_100018240;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_10000EDC8(&qword_10047BDD0);
    swift_allocObject(v7, 64, 7);
    v8 = v4;
    v3 = ObjectPool.init(allocator:deallocator:synchronized:)(sub_1000182C4, v6, 0, 0, 0);
    v9 = *(_QWORD *)&v4[v1];
    *(_QWORD *)&v4[v1] = v3;
    swift_retain(v3);
    swift_release(v9);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_100013D30()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v1 = OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___paintPool;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___paintPool];
  if (v2)
  {
    v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___paintPool];
  }
  else
  {
    v4 = v0;
    v5 = swift_allocObject(&unk_10043EB10, 24, 7);
    *(_QWORD *)(v5 + 16) = v4;
    v6 = swift_allocObject(&unk_10043EB38, 32, 7);
    *(_QWORD *)(v6 + 16) = sub_100018118;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_10000EDC8(&qword_10047BDD0);
    swift_allocObject(v7, 64, 7);
    v8 = v4;
    v3 = ObjectPool.init(allocator:deallocator:synchronized:)(sub_100018140, v6, 0, 0, 0);
    v9 = *(_QWORD *)&v4[v1];
    *(_QWORD *)&v4[v1] = v3;
    swift_retain(v3);
    swift_release(v9);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

id sub_100013E0C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v1 = OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___skRenderer;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___skRenderer);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___skRenderer);
  }
  else
  {
    v4 = v0;
    v5 = *(void **)(v0 + OBJC_IVAR____TtC7Measure16SCNPatchDebugger_sceneView);
    v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure16SCNPatchDebugger_tracker);
    objc_allocWithZone((Class)type metadata accessor for SCNPatchDebugger.SKDebugRenderer());
    v7 = v5;
    swift_retain(v6);
    SCNPatchDebugger.SKDebugRenderer.init(sceneView:tracker:)(v7, v6);
    v8 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v9;
    v3 = v9;

    v2 = 0;
  }
  v10 = v2;
  return v3;
}

void SCNPatchDebugger.SKDebugRenderer.__allocating_init(sceneView:tracker:)(void *a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  SCNPatchDebugger.SKDebugRenderer.init(sceneView:tracker:)(a1, a2);
}

id SCNPatchDebugger.__allocating_init(sceneView:tracker:)(void *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v6;
  uint64_t v7;

  v6 = objc_allocWithZone(v3);
  return SCNPatchDebugger.init(sceneView:tracker:)(a1, v7, a3);
}

id SCNPatchDebugger.init(sceneView:tracker:)(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  NSString v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  objc_super v26;

  v6 = OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___pointContainerNode;
  *(_QWORD *)&v3[OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___pointContainerNode] = 0;
  v7 = OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___paintContainerNode;
  *(_QWORD *)&v3[OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___paintContainerNode] = 0;
  v8 = OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___pointPool;
  *(_QWORD *)&v3[OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___pointPool] = 0;
  v9 = OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___paintPool;
  *(_QWORD *)&v3[OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___paintPool] = 0;
  v10 = OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___skRenderer;
  *(_QWORD *)&v3[OBJC_IVAR____TtC7Measure16SCNPatchDebugger____lazy_storage___skRenderer] = 0;
  v11 = objc_opt_self(ARSCNView);
  v12 = swift_dynamicCastObjCClass(a1, v11);
  if (v12)
  {
    v13 = (void *)v12;
    *(_QWORD *)&v3[OBJC_IVAR____TtC7Measure16SCNPatchDebugger_sceneView] = v12;
    *(_QWORD *)&v3[OBJC_IVAR____TtC7Measure16SCNPatchDebugger_tracker] = a3;
    v26.receiver = v3;
    v26.super_class = (Class)type metadata accessor for SCNPatchDebugger();
    v14 = a1;
    swift_retain(a3);
    v15 = objc_msgSendSuper2(&v26, "init");
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setName:", v16, v26.receiver, v26.super_class);

    v17 = (void *)objc_opt_self(SCNTransaction);
    objc_msgSend(v17, "begin");
    v18 = objc_msgSend(v13, "scene");
    v19 = objc_msgSend(v18, "rootNode");

    objc_msgSend(v19, "addChildNode:", v15);
    objc_msgSend(v17, "commit");
    sub_100018148(0, (unint64_t *)&unk_100481BB0, NSUserDefaults_ptr);
    v20 = v15;
    v21 = *(_QWORD *)PatchTracker.DebugOptions.keys.unsafeMutableAddressor();
    swift_bridgeObjectRetain(v21);
    static NSUserDefaults.observe(observer:keys:)(v20, v21);
    swift_bridgeObjectRelease(v21);

    swift_release(a3);
  }
  else
  {
    v22 = v3;

    swift_release(a3);
    swift_release(*(_QWORD *)&v3[v8]);
    swift_release(*(_QWORD *)&v3[v9]);
    v23 = *(void **)&v3[v10];

    v24 = type metadata accessor for SCNPatchDebugger();
    swift_deallocPartialClassInstance(v22, v24, 64, 7);
    return 0;
  }
  return v20;
}

void SCNPatchDebugger.update(intersections:candidates:confidentPoint:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  double v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float32x2_t v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  double v44;
  char v45;
  uint64_t v46;
  id v47;
  id v48;
  double v49;

  v15 = (*(uint64_t (**)(void))(**(_QWORD **)(v8 + OBJC_IVAR____TtC7Measure16SCNPatchDebugger_tracker) + 1232))();
  if ((*(_QWORD *)PatchTracker.DebugOptions.showPoints.unsafeMutableAddressor(v15) & ~v15) == 0)
  {
    v46 = a1;
    v45 = a5;
    v16 = sub_100013C54();
    v17 = sub_100013BD4();
    v18 = objc_msgSend(v17, "childNodes");

    v19 = sub_100018148(0, &qword_10047BCE8, SCNNode_ptr);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 216))(v20);
    swift_release(v16);
    swift_bridgeObjectRelease(v20);
    v21 = sub_100013BD4();
    SCNNode.removeAllChildren()();

    v44 = *(double *)&a3;
    if (a2)
      v47 = *(id *)(a2 + 16);
    else
      v47 = 0;
    v22 = *(_QWORD *)(v46 + 16);
    if (v22)
    {
      v43 = a6;
      swift_bridgeObjectRetain(v46);
      v23 = 0;
      while (1)
      {
        v31 = v46 + 32 + 176 * v23;
        v32 = *(_OWORD *)v31;
        v33 = *(_QWORD *)(v31 + 96);
        v35 = *(void **)(v31 + 128);
        v34 = *(void **)(v31 + 136);
        v36 = *(_QWORD *)(v31 + 144);
        v49 = *(double *)v31;
        if (!v47)
          goto LABEL_7;
        if (!a2)
        {
          __break(1u);
          return;
        }
        v37 = *(_QWORD *)(a2 + 16);
        if (v37)
        {
          v38 = (float *)(a2 + 40);
          while (1)
          {
            v39 = vsub_f32(*(float32x2_t *)(v38 - 2), *(float32x2_t *)&v32);
            if ((float)((float)((float)(*v38 - *((float *)&v32 + 2)) * (float)(*v38 - *((float *)&v32 + 2)))
                       + vaddv_f32(vmul_f32(v39, v39))) == 0.0)
              break;
            v38 += 44;
            if (!--v37)
              goto LABEL_7;
          }
          v24 = &selRef_yellowColor;
          v25 = 0.002;
        }
        else
        {
LABEL_7:
          v24 = &selRef_redColor;
          v25 = 0.001;
        }
        ++v23;
        v26 = (void *)objc_opt_self(UIColor);
        swift_retain(v33);
        swift_retain(v36);
        v27 = objc_msgSend(v26, *v24);
        v28 = v27;
        sub_100014728(v28, v35, v34, 0, v27, v49, v25);
        v30 = v29;
        swift_release(v36);
        swift_release(v33);

        if (v23 == v22)
        {
          swift_bridgeObjectRelease(v46);
          a6 = v43;
          break;
        }
      }
    }
    if ((v45 & 1) == 0)
    {
      v40 = objc_msgSend((id)objc_opt_self(UIColor), "magentaColor");
      sub_100014728(v40, 0, 0, (void *)1, 0, v44, 0.003);

    }
    if ((a8 & 1) == 0)
    {
      v48 = objc_msgSend((id)objc_opt_self(UIColor), "greenColor");
      sub_100014728(v48, 0, 0, (void *)1, 0, *(double *)&a6, 0.005);

    }
  }
}

void sub_100014728(void *a1, void *a2, void *a3, void *a4, void *a5, double a6, double a7)
{
  uint64_t v12;
  double v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  double v44;
  __n128 v47;
  id v48;

  v12 = sub_100013C54();
  (*(void (**)(id *__return_ptr))(*(_QWORD *)v12 + 200))(&v48);
  *(_QWORD *)&v13 = swift_release(v12).n128_u64[0];
  v14 = v48;
  v15 = objc_msgSend(v48, "geometry", v13);
  if (v15)
  {
    v16 = v15;
    v17 = objc_opt_self(SCNSphere);
    v18 = (void *)swift_dynamicCastObjCClass(v16, v17);
    if (!v18)
    {
LABEL_15:

      goto LABEL_16;
    }
    v19 = v18;
    v20 = a5;
    a5 = a2;
    a2 = a3;
    v21 = objc_msgSend(v18, "materials");
    v22 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
    v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

    if ((unint64_t)v23 >> 62)
    {
      if (v23 < 0)
        v27 = v23;
      else
        v27 = v23 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v23);
      v28 = _CocoaArrayWrapper.endIndex.getter(v27);
      swift_bridgeObjectRelease(v23);
      if (v28)
        goto LABEL_5;
    }
    else if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_5:
      if ((v23 & 0xC000000000000001) != 0)
      {
        v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v23);
      }
      else
      {
        if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_34;
        }
        v24 = *(id *)(v23 + 32);
      }
      v25 = v24;
      swift_bridgeObjectRelease(v23);
      v26 = objc_msgSend(v25, "diffuse");

      objc_msgSend(v26, "setContents:", a1);
      goto LABEL_14;
    }
    swift_bridgeObjectRelease(v23);
LABEL_14:
    objc_msgSend(v19, "setRadius:", a7);
    a3 = a2;
    a2 = a5;
    a5 = v20;
    goto LABEL_15;
  }
LABEL_16:
  objc_msgSend(v14, "setSimdPosition:", a6);
  v29 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v14, "childNodeWithName:recursively:", v29, 0);

  if (!v19)
  {
LABEL_31:
    v40 = sub_100013BD4();
    objc_msgSend(v40, "addChildNode:", v14);

    return;
  }
  if ((a4 & 1) != 0)
    goto LABEL_29;
  v30 = objc_msgSend(v19, "geometry");
  if (!v30)
    goto LABEL_29;
  a4 = v30;
  v31 = objc_opt_self(SCNBox);
  v32 = swift_dynamicCastObjCClass(a4, v31);
  if (!v32)
  {

LABEL_29:
    objc_msgSend(v19, "setHidden:", 1);
LABEL_30:

    goto LABEL_31;
  }
  v16 = (void *)v32;
  v20 = a3;
  objc_msgSend(v19, "setHidden:", 0);
  v33 = objc_msgSend(v16, "materials");
  v34 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
  v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33, v34);

  if (!((unint64_t)v23 >> 62))
  {
    if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_22;
LABEL_38:
    swift_bridgeObjectRelease(v23);
LABEL_39:
    v43.n128_u64[0] = (unint64_t)a2;
    v43.n128_u64[1] = (unint64_t)v20;
    v47 = v43;
    v44 = a7 * 0.25;
    objc_msgSend(v16, "setWidth:", v44);
    SCNNode.setForwardDirection(direction:)(objc_msgSend(v16, "setHeight:", v44), v47);

    goto LABEL_30;
  }
LABEL_34:
  if (v23 < 0)
    v41 = v23;
  else
    v41 = v23 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v23);
  v42 = _CocoaArrayWrapper.endIndex.getter(v41);
  swift_bridgeObjectRelease(v23);
  if (!v42)
    goto LABEL_38;
LABEL_22:
  if ((v23 & 0xC000000000000001) != 0)
  {
    v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v23);
    goto LABEL_25;
  }
  if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v35 = *(id *)(v23 + 32);
LABEL_25:
    v36 = v35;
    swift_bridgeObjectRelease(v23);
    v37 = objc_msgSend(v36, "diffuse");

    v38 = a5;
    if (!a5)
      v38 = a1;
    v39 = a5;
    objc_msgSend(v37, "setContents:", v38);

    goto LABEL_39;
  }
  __break(1u);
}

id sub_100014B8C()
{
  return sub_100014BD4(0xD000000000000014, 0x80000001003D81E0, (uint64_t (*)(void))&PatchTracker.DebugOptions.showPoints.unsafeMutableAddressor);
}

id sub_100014BB0()
{
  return sub_100014BD4(0xD000000000000013, 0x80000001003D81C0, (uint64_t (*)(void))&PatchTracker.DebugOptions.paintMode.unsafeMutableAddressor);
}

id sub_100014BD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  char *v3;
  char *v5;
  id v6;
  NSString v7;
  uint64_t v8;

  v5 = v3;
  v6 = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setName:", v7);

  v8 = (*(uint64_t (**)(void))(**(_QWORD **)&v5[OBJC_IVAR____TtC7Measure16SCNPatchDebugger_tracker] + 1232))();
  objc_msgSend(v6, "setHidden:", (*(_QWORD *)a3() & ~v8) != 0);
  objc_msgSend(v5, "addChildNode:", v6);
  return v6;
}

void SCNPatchDebugger.paint(hitResult:)(float32x4_t a1, double a2, double a3, double a4, double a5, double a6, double a7, float a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, float *a13, float a14)
{
  sub_100017874(a13, a1, a8, a14);
}

Swift::Void __swiftcall SCNPatchDebugger.clearPatches()()
{
  char *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  _QWORD v8[5];
  uint64_t v9;

  v0 = (char *)sub_100013E0C();
  v1 = *(void **)&v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingTexture];
  if (v1)
  {
    v2 = v0;
    v3 = swift_allocObject(&unk_10043E998, 24, 7);
    *(_QWORD *)(v3 + 16) = v2;
    v8[4] = sub_100017DF4;
    v9 = v3;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    v8[2] = sub_100015A60;
    v8[3] = &unk_10043E9B0;
    v4 = _Block_copy(v8);
    v5 = v9;
    v6 = v1;
    v7 = v2;
    objc_msgSend(v6, "modifyPixelDataWithBlock:", v4, swift_release(v5).n128_f64[0]);
    _Block_release(v4);

  }
  else
  {
    __break(1u);
  }
}

void SCNPatchDebugger.drawPatch(_:)(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  char *v11;
  _QWORD v12[5];
  _QWORD *v13;

  v2 = (char *)sub_100013E0C();
  v3 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v4 = swift_allocObject(v3, 40, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1003B0F00;
  *(_QWORD *)(v4 + 32) = a1;
  v12[0] = v4;
  specialized Array._endMutation()(v4);
  v5 = *(void **)&v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingTexture];
  if (v5)
  {
    v6 = v12[0];
    v7 = (_QWORD *)swift_allocObject(&unk_10043E9E8, 40, 7);
    v7[2] = v2;
    v7[3] = v6;
    v7[4] = 0;
    v12[4] = sub_100017E18;
    v13 = v7;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_100015A60;
    v12[3] = &unk_10043EA00;
    v8 = _Block_copy(v12);
    v9 = v13;
    swift_retain(a1);
    v10 = v5;
    v11 = v2;
    swift_bridgeObjectRetain(v6);
    objc_msgSend(v10, "modifyPixelDataWithBlock:", v8, swift_release(v9).n128_f64[0]);
    _Block_release(v8);

    swift_bridgeObjectRelease(v6);
  }
  else
  {
    __break(1u);
  }
}

void sub_100014ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___width;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___width + 8) == 1)
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_tracker);
    v3 = *(_QWORD *)(v2 + 224);
    v4 = __OFADD__(v3, 5);
    v5 = v3 + 5;
    if (v4)
    {
      __break(1u);
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 240);
      v7 = v5 * v6;
      if ((unsigned __int128)(v5 * (__int128)v6) >> 64 == (v5 * v6) >> 63)
      {
        if (!__OFADD__(v7, 5))
        {
          *(_QWORD *)v1 = v7 + 5;
          *(_BYTE *)(v1 + 8) = 0;
          return;
        }
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_9:
    __break(1u);
  }
}

void sub_100014F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___height;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___height + 8) == 1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_tracker) + 224);
    v3 = __OFADD__(v2, 5);
    v4 = v2 + 5;
    if (v3)
    {
      __break(1u);
    }
    else if (v4 + 0x4000000000000000 >= 0)
    {
      v5 = 2 * v4;
      if (!__OFADD__(v5, 5))
      {
        *(_QWORD *)v1 = v5 + 5;
        *(_BYTE *)(v1 + 8) = 0;
        return;
      }
      goto LABEL_9;
    }
    __break(1u);
LABEL_9:
    __break(1u);
  }
}

uint64_t sub_100014FAC()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  v1 = (_BYTE *)(v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchSizeInPixels);
  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchSizeInPixels
                + 8) != 1)
    return *(_QWORD *)v1;
  result = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_tracker) + 224);
  *(_QWORD *)v1 = result;
  v1[8] = 0;
  return result;
}

uint64_t sub_100014FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchAlphaBuffer;
  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchAlphaBuffer
                + 32) != 1)
    return *(_QWORD *)v1;
  v2 = sub_100014FAC();
  static vImage_Buffer.make(width:height:rowBytes:allocating:)(v2, *(_QWORD *)(v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchSizeInPixels), *(_QWORD *)(v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchSizeInPixels), *(unsigned __int8 *)(v0+ OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchSizeInPixels+ 8), 1);
  result = vImage_Buffer.fill(value:)(255);
  *(_QWORD *)v1 = result;
  *(_QWORD *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 24) = v6;
  *(_BYTE *)(v1 + 32) = 0;
  return result;
}

uint64_t sub_100015070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchEmbossBuffer;
  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchEmbossBuffer
                + 32) != 1)
    return *(_QWORD *)v1;
  v2 = sub_100014FAC();
  result = static vImage_Buffer.make(width:height:rowBytes:allocating:)(v2, *(_QWORD *)(v0+ OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchSizeInPixels), *(_QWORD *)(v0+ OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchSizeInPixels), *(unsigned __int8 *)(v0+ OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchSizeInPixels+ 8), 1);
  *(_QWORD *)v1 = result;
  *(_QWORD *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 24) = v6;
  *(_BYTE *)(v1 + 32) = 0;
  return result;
}

uint64_t sub_1000150DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchARGBBuffer;
  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchARGBBuffer
                + 32) != 1)
    return *(_QWORD *)v1;
  result = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_tracker) + 224);
  if ((unint64_t)(result - 0x2000000000000000) >> 62 == 3)
  {
    result = static vImage_Buffer.make(width:height:rowBytes:allocating:)(result, *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_tracker) + 224), 4 * result, 0, 1);
    *(_QWORD *)v1 = result;
    *(_QWORD *)(v1 + 8) = v3;
    *(_QWORD *)(v1 + 16) = v4;
    *(_QWORD *)(v1 + 24) = v5;
    *(_BYTE *)(v1 + 32) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100015160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineOnBuffer;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineOnBuffer + 32) != 1)
    return *(_QWORD *)v1;
  v2 = sub_100014FAC();
  static vImage_Buffer.make(width:height:rowBytes:allocating:)(1, v2, 1, 0, 1);
  result = vImage_Buffer.fill(value:)(255);
  *(_QWORD *)v1 = result;
  *(_QWORD *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 24) = v6;
  *(_BYTE *)(v1 + 32) = 0;
  return result;
}

uint64_t sub_1000151E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineOffBuffer;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineOffBuffer + 32) != 1)
    return *(_QWORD *)v1;
  v2 = sub_100015160();
  vImage_Buffer.clone()(v2);
  result = vImage_Buffer.fill(value:)(0);
  *(_QWORD *)v1 = result;
  *(_QWORD *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 24) = v6;
  *(_BYTE *)(v1 + 32) = 0;
  return result;
}

uint64_t sub_10001524C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineARGBBuffer;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineARGBBuffer + 32) != 1)
    return *(_QWORD *)v1;
  result = sub_100015160();
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineOnBuffer + 8);
    v5 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineOnBuffer
                   + 16);
    if (((v5 | v4) & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v5 - 0x2000000000000000) >> 62 == 3)
      {
        result = static vImage_Buffer.make(width:height:rowBytes:allocating:)(v3, v4, 4 * v5, 0, 1);
        *(_QWORD *)v1 = result;
        *(_QWORD *)(v1 + 8) = v6;
        *(_QWORD *)(v1 + 16) = v7;
        *(_QWORD *)(v1 + 24) = v8;
        *(_BYTE *)(v1 + 32) = 0;
        return result;
      }
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

void SCNPatchDebugger.SKDebugRenderer.init(sceneView:tracker:)(void *a1, uint64_t a2)
{
  _BYTE *v2;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  id v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  id v20;
  char *v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  double v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  char *v40;
  objc_super v41;

  *(_QWORD *)&v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_patchPadding] = 5;
  *(_QWORD *)&v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_bytesPerPixel] = 4;
  *(_QWORD *)&v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_textureBgColor] = &off_10043BBA8;
  v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_renderEmboss] = 1;
  *(_QWORD *)&v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingTexture] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingNode] = 0;
  v5 = &v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_textureBuffer];
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  v6 = &v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___width];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = &v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___height];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = &v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchSizeInPixels];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = &v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchAlphaBuffer];
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[32] = 1;
  v10 = &v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchEmbossBuffer];
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  v10[32] = 1;
  v11 = &v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchARGBBuffer];
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v11[32] = 1;
  v12 = &v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineOnBuffer];
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  v12[32] = 1;
  v13 = &v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineOffBuffer];
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  v13[32] = 1;
  v14 = &v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineARGBBuffer];
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  v14[32] = 1;
  *(_QWORD *)&v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_tracker] = a2;
  v41.receiver = v2;
  v41.super_class = (Class)type metadata accessor for SCNPatchDebugger.SKDebugRenderer();
  swift_retain(a2);
  v15 = objc_msgSendSuper2(&v41, "init");
  sub_100014ED8();
  v17 = (double)v16;
  sub_100014F44();
  v19 = (double)v18;
  v20 = objc_allocWithZone((Class)SKMutableTexture);
  v21 = (char *)v15;
  v22 = objc_msgSend(v20, "initWithSize:pixelFormat:", 1380401729, v17, v19, v41.receiver, v41.super_class);
  v23 = OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingTexture;
  v24 = *(void **)&v21[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingTexture];
  *(_QWORD *)&v21[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingTexture] = v22;

  v25 = objc_msgSend(objc_allocWithZone((Class)SKSpriteNode), "initWithTexture:", *(_QWORD *)&v21[v23]);
  v26 = OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingNode;
  v27 = *(void **)&v21[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingNode];
  *(_QWORD *)&v21[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingNode] = v25;

  v28 = *(void **)&v21[v26];
  if (!v28)
  {
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(v28, "setScale:", 2.0);
  v29 = *(void **)&v21[v26];
  if (!v29)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v30 = v29;
  objc_msgSend(v30, "yScale");
  objc_msgSend(v30, "setYScale:", -v31);

  v32 = *(void **)&v21[v26];
  if (!v32)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v33 = v32;
  objc_msgSend(v33, "anchorPoint");
  objc_msgSend(v33, "setAnchorPoint:", 0.5);

  v34 = *(void **)&v21[v26];
  if (!v34)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v35 = v34;
  objc_msgSend(v35, "anchorPoint");
  objc_msgSend(v35, "setAnchorPoint:");

  v36 = *(void **)&v21[v26];
  if (!v36)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v36, "setZRotation:", -1.57079633);
  if (!*(_QWORD *)&v21[v26])
  {
LABEL_16:
    __break(1u);
    return;
  }
  v37 = (*(uint64_t (**)(id))(*(_QWORD *)a2 + 1232))(objc_msgSend(v21, "addChild:"));
  if ((*(_QWORD *)PatchTracker.DebugOptions.drawPatches.unsafeMutableAddressor() & ~v37) == 0)
  {
    v38 = objc_msgSend(a1, "overlaySKScene");
    if (v38)
    {
      v39 = v38;
      v40 = v21;
      objc_msgSend(v39, "addChild:", v40);

    }
  }

  swift_release(a2);
}

uint64_t type metadata accessor for SCNPatchDebugger()
{
  return objc_opt_self(_TtC7Measure16SCNPatchDebugger);
}

id SCNPatchDebugger.SKDebugRenderer.__deallocating_deinit()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  objc_super v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = sub_100014FE8();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  vImage_Buffer.deallocate()();
  v8 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchAlphaBuffer];
  *(_QWORD *)v8 = v1;
  *((_QWORD *)v8 + 1) = v3;
  *((_QWORD *)v8 + 2) = v5;
  *((_QWORD *)v8 + 3) = v7;
  v8[32] = 0;
  v9 = sub_100015070();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  vImage_Buffer.deallocate()();
  v16 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchEmbossBuffer];
  *(_QWORD *)v16 = v9;
  *((_QWORD *)v16 + 1) = v11;
  *((_QWORD *)v16 + 2) = v13;
  *((_QWORD *)v16 + 3) = v15;
  v16[32] = 0;
  v17 = sub_1000150DC();
  v19 = v18;
  v21 = v20;
  v23 = v22;
  vImage_Buffer.deallocate()();
  v24 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchARGBBuffer];
  *(_QWORD *)v24 = v17;
  *((_QWORD *)v24 + 1) = v19;
  *((_QWORD *)v24 + 2) = v21;
  *((_QWORD *)v24 + 3) = v23;
  v24[32] = 0;
  v25 = sub_100015160();
  v27 = v26;
  v29 = v28;
  v31 = v30;
  vImage_Buffer.deallocate()();
  v32 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineOnBuffer];
  *(_QWORD *)v32 = v25;
  *((_QWORD *)v32 + 1) = v27;
  *((_QWORD *)v32 + 2) = v29;
  *((_QWORD *)v32 + 3) = v31;
  v32[32] = 0;
  v33 = sub_1000151E0();
  v35 = v34;
  v37 = v36;
  v39 = v38;
  vImage_Buffer.deallocate()();
  v40 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineOffBuffer];
  *(_QWORD *)v40 = v33;
  *((_QWORD *)v40 + 1) = v35;
  *((_QWORD *)v40 + 2) = v37;
  *((_QWORD *)v40 + 3) = v39;
  v40[32] = 0;
  v41 = sub_10001524C();
  v43 = v42;
  v45 = v44;
  v47 = v46;
  v51 = v41;
  v52 = v42;
  v53 = v44;
  v54 = v46;
  vImage_Buffer.deallocate()();
  v48 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineARGBBuffer];
  *(_QWORD *)v48 = v41;
  *((_QWORD *)v48 + 1) = v43;
  *((_QWORD *)v48 + 2) = v45;
  *((_QWORD *)v48 + 3) = v47;
  v48[32] = 0;
  v50.receiver = v0;
  v50.super_class = (Class)type metadata accessor for SCNPatchDebugger.SKDebugRenderer();
  return objc_msgSendSuper2(&v50, "dealloc");
}

Swift::Void __swiftcall SCNPatchDebugger.SKDebugRenderer.clear()()
{
  char *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  char *v6;
  _QWORD v7[5];
  uint64_t v8;

  v1 = *(void **)&v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingTexture];
  if (v1)
  {
    v2 = swift_allocObject(&unk_10043EA38, 24, 7);
    *(_QWORD *)(v2 + 16) = v0;
    v7[4] = sub_100018288;
    v8 = v2;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    v7[2] = sub_100015A60;
    v7[3] = &unk_10043EA50;
    v3 = _Block_copy(v7);
    v4 = v8;
    v5 = v1;
    v6 = v0;
    objc_msgSend(v5, "modifyPixelDataWithBlock:", v3, swift_release(v4).n128_f64[0]);
    _Block_release(v3);

  }
  else
  {
    __break(1u);
  }
}

vImage_Error sub_1000159E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  __int128 v4;
  vImage_Error result;
  vImage_Buffer v6;

  v3 = (_OWORD *)(a3 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_textureBuffer);
  if ((*(_BYTE *)(a3 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_textureBuffer + 32) & 1) == 0)
  {
    v4 = v3[1];
    *(_OWORD *)&v6.data = *v3;
    *(_OWORD *)&v6.width = v4;
    return vImageBufferFill_ARGB8888(&v6, (const uint8_t *)(*(_QWORD *)(a3+ OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_textureBgColor)+ 32), 0);
  }
  return result;
}

uint64_t sub_100015A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v6(a2, a3);
  return swift_release(v5);
}

void SCNPatchDebugger.SKDebugRenderer.drawPatches(goodPatches:badPatches:result:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  void *v3;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  id v9;
  char *v10;
  _QWORD v11[5];
  _QWORD *v12;

  v3 = *(void **)&v2[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingTexture];
  if (v3)
  {
    v6 = (_QWORD *)swift_allocObject(&unk_10043EA88, 40, 7);
    v6[2] = v2;
    v6[3] = a1;
    v6[4] = a2;
    v11[4] = sub_1000182C0;
    v12 = v6;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100015A60;
    v11[3] = &unk_10043EAA0;
    v7 = _Block_copy(v11);
    v8 = v12;
    swift_bridgeObjectRetain(a2);
    v9 = v3;
    v10 = v2;
    swift_bridgeObjectRetain(a1);
    objc_msgSend(v9, "modifyPixelDataWithBlock:", v7, swift_release(v8).n128_f64[0]);
    _Block_release(v7);

  }
  else
  {
    __break(1u);
  }
}

void sub_100015B9C(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  char *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  double v17;
  double v18;

  if (!a1)
    goto LABEL_10;
  v8 = &a3[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_textureBuffer];
  if (a3[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_textureBuffer + 32] != 1)
    goto LABEL_10;
  sub_100014ED8();
  if (v11 < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v12 = v11;
  sub_100014F44();
  if (v13 < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v14 = *(_QWORD *)&a3[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___height];
  if (!v14)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (a2 != 0x8000000000000000 || v14 != -1)
  {
    *(_QWORD *)v8 = a1;
    *((_QWORD *)v8 + 1) = v13;
    *((_QWORD *)v8 + 2) = v12;
    *((_QWORD *)v8 + 3) = a2 / v14;
    v8[32] = 0;
    v15 = objc_msgSend(a3, "scene");
    if (v15)
    {
      v16 = v15;
      objc_msgSend(v15, "size");
      v18 = v17;
      objc_msgSend(a3, "position");
      objc_msgSend(a3, "setPosition:", v18);
      objc_msgSend(v16, "size");
      objc_msgSend(a3, "position");
      objc_msgSend(a3, "setPosition:");

    }
LABEL_10:
    sub_100015CF8(a4, a5);
    return;
  }
LABEL_14:
  __break(1u);
}

uint64_t sub_100015CF8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t i;
  uint64_t v5;
  _OWORD *v6;
  int64_t v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  vImagePixelCount v24;
  vImagePixelCount v25;
  size_t v26;
  vImagePixelCount v27;
  vImagePixelCount v28;
  size_t v29;
  vImagePixelCount v30;
  vImagePixelCount v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  float v41;
  vImagePixelCount v42;
  vImagePixelCount v43;
  size_t v44;
  void *v45;
  vImagePixelCount v46;
  vImagePixelCount v47;
  size_t v48;
  __int128 v49;
  vImagePixelCount v50;
  vImagePixelCount v51;
  size_t v52;
  __int128 v53;
  __int128 v54;
  vImagePixelCount v55;
  vImagePixelCount v56;
  size_t v57;
  __int128 v58;
  __int128 v59;
  vImagePixelCount v60;
  vImagePixelCount v61;
  size_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  vImagePixelCount v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  _OWORD *v92;
  int64_t v93;
  uint64_t v94;
  unint64_t v95;
  size_t rowBytes;
  vImagePixelCount width;
  vImagePixelCount height;
  void *data;
  int64_t v100;
  vImage_Buffer v101;
  vImage_Buffer v102;
  vImage_Buffer v103;
  vImage_Buffer srcR;
  vImage_Buffer srcB;
  vImage_Buffer srcG;
  vImage_Buffer dest;
  _QWORD v108[5];
  vImage_Buffer v109;
  char v110;
  uint64_t v111[4];
  char v112;

  v5 = v2;
  v6 = (_OWORD *)(v2 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_textureBuffer);
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_textureBuffer + 32) & 1) != 0)
    return result;
  v8 = result;
  v9 = v6[1];
  *(_OWORD *)&dest.data = *v6;
  *(_OWORD *)&dest.width = v9;
  vImageBufferFill_ARGB8888(&dest, (const uint8_t *)(*(_QWORD *)(v5 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_textureBgColor)+ 32), 0);
  v100 = v8;
  if (a2)
  {
    v111[0] = a2;
    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0)
        v3 = v8;
      else
        v3 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(a2);
      v10 = _CocoaArrayWrapper.endIndex.getter(v3);
    }
    else
    {
      v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(a2);
    }
    i = *(_QWORD *)(*(_QWORD *)(v5 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_tracker) + 232);
    if (v10 >= i)
    {
      v18 = a2;
    }
    else
    {
      v3 = 0;
      sub_100016424(v111);
      v11 = __OFSUB__(i, v10);
      i -= v10;
      if (v11)
        goto LABEL_92;
      v3 = v111[0];
      if ((unint64_t)v111[0] >> 62)
      {
LABEL_93:
        if (v3 < 0)
          v90 = v3;
        else
          v90 = v3 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v3);
        v12 = _CocoaArrayWrapper.endIndex.getter(v90);
        swift_bridgeObjectRelease(v3);
      }
      else
      {
        v12 = *(_QWORD *)((v111[0] & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v12 >= i)
        v13 = i;
      else
        v13 = v12;
      if (v13 < 0)
      {
        __break(1u);
        goto LABEL_98;
      }
      if (v13)
      {
        if ((v3 & 0xC000000000000001) != 0
          || (unint64_t)(v13 - 1) < *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          for (i = 0; i != v13; ++i)
          {
            if ((v3 & 0xC000000000000001) != 0)
            {
              v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
            }
            else
            {
              v14 = *(_QWORD *)(v3 + 8 * i + 32);
              swift_retain(v14);
            }
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v16 = *(_QWORD *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v15 = *(_QWORD *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v16 >= v15 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
            v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
            specialized Array._endMutation()(v17);
          }
          swift_bridgeObjectRelease(v3);
          v8 = v100;
          goto LABEL_28;
        }
LABEL_98:
        __break(1u);
      }
      v18 = v3;
    }
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    swift_bridgeObjectRetain(v8);
  }
LABEL_28:
  if ((unint64_t)v8 >> 62)
    goto LABEL_81;
  v19 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v19)
  {
    if (v19 < 1)
    {
      __break(1u);
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    v20 = (uint64_t *)(v5 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchARGBBuffer);
    v21 = v5 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineOnBuffer;
    v92 = (_OWORD *)(v5 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineOffBuffer);
    v94 = OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchSizeInPixels;
    v91 = (_OWORD *)(v5 + OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchAlphaBuffer);
    height = dest.height;
    data = dest.data;
    rowBytes = dest.rowBytes;
    width = dest.width;
    v93 = v8;
    type metadata accessor for CVUtil(0);
    v22 = 0;
    v95 = v8 & 0xC000000000000001;
    while (1)
    {
      if (v95)
      {
        v23 = (float *)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v8);
      }
      else
      {
        v23 = *(float **)(v8 + 8 * v22 + 32);
        swift_retain(v23);
      }
      srcG.data = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v23 + 232))();
      srcG.height = v24;
      srcG.width = v25;
      srcG.rowBytes = v26;
      srcB.data = (void *)sub_100014FE8();
      srcB.height = v27;
      srcB.width = v28;
      srcB.rowBytes = v29;
      srcR.data = (void *)sub_1000150DC();
      srcR.height = v30;
      srcR.width = v31;
      srcR.rowBytes = v32;
      vImageConvert_Planar8toARGB8888(&srcG, &srcG, &srcG, &srcB, &srcR, 0);
      v3 = *v20;
      i = v20[1];
      v33 = v20[2];
      v8 = v20[3];
      v34 = sub_100014FAC();
      v35 = v34 + 5;
      if (__OFADD__(v34, 5))
        break;
      v36 = v22 * v35;
      if ((unsigned __int128)(v22 * (__int128)v35) >> 64 != (v22 * v35) >> 63)
        goto LABEL_66;
      if (__OFADD__(v36, 5))
        goto LABEL_67;
      vImage_Buffer.draw(onto:offsetX:offsetY:bytesPerPixel:)(data, height, width, rowBytes, v36 + 5, 5, 4, v3, i, v33, v8);
      v37 = v23[30];
      if (v37 > 0.0)
      {
        if (v37 <= 1.0)
          v38 = v23[30];
        else
          v38 = 1.0;
        v39 = sub_100015160();
        v41 = roundf(v38 * (float)v40);
        if ((~LODWORD(v41) & 0x7F800000) == 0)
          goto LABEL_68;
        if (v41 <= -9.2234e18)
          goto LABEL_69;
        if (v41 >= 9.2234e18)
          goto LABEL_70;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 208))(v39) & 1) != 0)
        {
          srcB.data = (void *)sub_1000151E0();
          srcB.height = v42;
          srcB.width = v43;
          srcB.rowBytes = v44;
          v45 = *(void **)v21;
          v46 = *(_QWORD *)(v21 + 8);
          v47 = *(_QWORD *)(v21 + 16);
          v48 = *(_QWORD *)(v21 + 24);
          srcR.data = *(void **)v21;
          srcR.height = v46;
          srcR.width = v47;
          srcR.rowBytes = v48;
          v49 = v92[1];
          *(_OWORD *)&v103.data = *v92;
          *(_OWORD *)&v103.width = v49;
          goto LABEL_50;
        }
        if (((*(uint64_t (**)(void))(*(_QWORD *)v23 + 216))() & 1) != 0)
        {
          srcB.data = (void *)sub_1000151E0();
          srcB.height = v50;
          srcB.width = v51;
          srcB.rowBytes = v52;
          v53 = v92[1];
          *(_OWORD *)&srcR.data = *v92;
          *(_OWORD *)&srcR.width = v53;
          v45 = *(void **)v21;
          v46 = *(_QWORD *)(v21 + 8);
          v47 = *(_QWORD *)(v21 + 16);
          v48 = *(_QWORD *)(v21 + 24);
          v103.data = *(void **)v21;
          v103.height = v46;
          v103.width = v47;
          v103.rowBytes = v48;
LABEL_50:
          v102.data = v45;
          v102.height = v46;
          v102.width = v47;
          v102.rowBytes = v48;
        }
        else
        {
          v54 = *(_OWORD *)(v21 + 16);
          *(_OWORD *)&srcB.data = *(_OWORD *)v21;
          *(_OWORD *)&srcB.width = v54;
          srcR.data = (void *)sub_1000151E0();
          srcR.height = v55;
          srcR.width = v56;
          srcR.rowBytes = v57;
          v58 = v92[1];
          *(_OWORD *)&v103.data = *v92;
          *(_OWORD *)&v103.width = v58;
          v59 = *(_OWORD *)(v21 + 16);
          *(_OWORD *)&v102.data = *(_OWORD *)v21;
          *(_OWORD *)&v102.width = v59;
        }
        v101.data = (void *)sub_10001524C();
        v101.height = v60;
        v101.width = v61;
        v101.rowBytes = v62;
        vImageConvert_Planar8toARGB8888(&srcB, &srcR, &v103, &v102, &v101, 0);
        v63 = *(_QWORD *)(v5 + v94);
        v64 = v63 + 5;
        if (__OFADD__(v63, 5))
          goto LABEL_71;
        v65 = v22 * v64;
        if ((unsigned __int128)(v22 * (__int128)v64) >> 64 != (v22 * v64) >> 63)
          goto LABEL_72;
        v11 = __OFADD__(v65, 5);
        v66 = v65 + 5;
        if (v11)
          goto LABEL_73;
        v11 = __OFADD__(v66, v63);
        v67 = v66 + v63;
        if (v11)
          goto LABEL_75;
        v68 = *(_QWORD *)(v21 + 8);
        v69 = v68 + 5;
        if (__OFADD__(v68, 5))
          goto LABEL_77;
        v70 = (uint64_t)v41;
        v11 = __OFSUB__(v69, (uint64_t)v41);
        v71 = v69 - (uint64_t)v41;
        if (v11)
          goto LABEL_79;
        v72 = *(_QWORD *)(v21 + 16);
        if ((v72 | v68) < 0)
          goto LABEL_80;
        v73 = (double)v67;
        v74 = (double)v71;
        v75 = (double)v72;
        v76 = (double)v70;
        v77 = sub_10001524C();
        vImage_Buffer.draw(onto:within:bytesPerPixel:)(data, height, width, rowBytes, 4, v77, v78, v79, v73, v74, v75, v76, v80);
      }
      v3 = (uint64_t)srcG.data;
      i = srcG.height;
      v81 = srcG.width;
      v8 = srcG.rowBytes;
      v111[0] = sub_100015070();
      v111[1] = v82;
      v111[2] = v83;
      v111[3] = v84;
      v112 = 0;
      static CVUtil.emboss(srcBuffer:dstBuffer:tempBuffer:flags:)(v108, v3, i, v81, v8, v111, 0, 8);
      sub_100017F4C((uint64_t)v108, (uint64_t)&v109);
      if ((v110 & 1) == 0)
      {
        srcB = v109;
        v85 = v91[1];
        *(_OWORD *)&srcR.data = *v91;
        *(_OWORD *)&srcR.width = v85;
        v86 = *((_OWORD *)v20 + 1);
        *(_OWORD *)&v103.data = *(_OWORD *)v20;
        *(_OWORD *)&v103.width = v86;
        vImageConvert_Planar8toARGB8888(&srcB, &srcB, &srcB, &srcR, &v103, 0);
        v87 = *(_QWORD *)(v5 + v94);
        v88 = v22 * (v87 + 5);
        if ((unsigned __int128)(v22 * (__int128)(v87 + 5)) >> 64 != v88 >> 63)
          goto LABEL_74;
        if (__OFADD__(v88, 5))
          goto LABEL_76;
        if (__OFADD__(v87, 10))
          goto LABEL_78;
        vImage_Buffer.draw(onto:offsetX:offsetY:bytesPerPixel:)(data, height, width, rowBytes, v88 + 5, v87 + 10, 4, *v20, v20[1], v20[2], v20[3]);
      }
      swift_release(v23);
      ++v22;
      v8 = v93;
      if (v19 == v22)
        return swift_bridgeObjectRelease(v8);
    }
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    if (v8 < 0)
      v89 = v8;
    else
      v89 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v19 = _CocoaArrayWrapper.endIndex.getter(v89);
    swift_bridgeObjectRelease(v8);
  }
  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_100016424(uint64_t *a1)
{
  uint64_t v2;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v2 < 0 || (v2 & 0x4000000000000000) != 0)
  {
    v2 = sub_10002874C(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v7[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v7[1] = v4;
  v5 = sub_100016730(v7);
  return specialized Array._endMutation()(v5);
}

id SCNSegmentationDebugger.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void SCNPatchDebugger.SKDebugRenderer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Measure.SKDebugRenderer", 23, "init()", 6, 0);
  __break(1u);
}

void SCNPatchDebugger.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Measure.SCNPatchDebugger", 24, "init()", 6, 0);
  __break(1u);
}

id SCNPatchDebugger.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SCNPatchDebugger();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_100016630@<X0>(void *a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  id v6;
  id result;

  v6 = objc_allocWithZone((Class)type metadata accessor for SCNPatchDebugger());
  result = SCNPatchDebugger.init(sceneView:tracker:)(a1, (uint64_t)v6, a2);
  *a3 = result;
  return result;
}

void sub_10001667C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  SCNPatchDebugger.update(intersections:candidates:confidentPoint:result:)(a1, a2, a3, a4, a5 & 1, a6, a7, a8 & 1);
}

void sub_1000166A4(float32x4_t a1, double a2, double a3, double a4, double a5, double a6, double a7, float a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, float *a13, float a14)
{
  sub_100017874(a13, a1, a8, a14);
}

void sub_1000166D0()
{
  SCNPatchDebugger.clearPatches()();
}

void sub_1000166F0(uint64_t a1)
{
  SCNPatchDebugger.drawPatch(_:)(a1);
}

void sub_100016710(uint64_t a1, uint64_t a2)
{
  _s7Measure16SCNPatchDebuggerC11drawPatches04goodE003badE06resultySay0A10Foundation12PatchTrackerC0J0CG_AMSgs5SIMD3VySfG8position_AQSg6normalAQ9sourceHit_AQ6origin_AQ9directiont0O3RayAL0oJ0AqV_AqWt04destS0AL0tJ0Sf5depthSf06rayDotS0Sf10confidencet4testtSgtF_0(a1, a2);
}

uint64_t sub_100016730(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t *v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t *v23;
  uint64_t v24;
  Swift::Int v25;
  _QWORD *v26;
  uint64_t v27;
  Swift::Int v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  Swift::Int v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;

  v2 = v1;
  v4 = a1[1];
  result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4)
        return sub_100016D5C(0, v4, 1, a1);
      return result;
    }
    goto LABEL_132;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_131;
  v7 = result;
  v89 = a1;
  if (v4 <= 1)
  {
    v10 = (char *)_swiftEmptyArrayStorage;
    v95 = (uint64_t)_swiftEmptyArrayStorage;
    v94 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      goto LABEL_97;
    }
  }
  else
  {
    v8 = v6 >> 1;
    v9 = type metadata accessor for PatchTracker.Patch(0);
    result = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v94 = (char *)((result & 0xFFFFFFFFFFFFFF8) + 32);
    v95 = result;
  }
  v11 = 0;
  v12 = *a1;
  v90 = *a1 - 8;
  v10 = (char *)_swiftEmptyArrayStorage;
  v91 = v7;
  v92 = v4;
  v93 = *a1;
  while (1)
  {
    v14 = v11++;
    if (v11 < v4)
    {
      v15 = *(_QWORD *)(v12 + 8 * v11);
      v16 = *(float *)(v15 + 120);
      v17 = *(float *)(*(_QWORD *)(v12 + 8 * v14) + 120);
      v11 = v14 + 2;
      if (v14 + 2 < v4)
      {
        v18 = *(float *)(v15 + 120);
        while (1)
        {
          v19 = v18;
          v18 = *(float *)(*(_QWORD *)(v12 + 8 * v11) + 120);
          if (v17 <= v16 == v19 > v18)
            break;
          if (v4 == ++v11)
          {
            v11 = v4;
            break;
          }
        }
      }
      if (v17 <= v16)
      {
        if (v11 < v14)
          goto LABEL_133;
        if (v14 < v11)
        {
          v20 = (uint64_t *)(v90 + 8 * v11);
          v21 = v11;
          v22 = v14;
          v23 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v22 != --v21)
            {
              if (!v12)
                goto LABEL_138;
              v24 = *v23;
              *v23 = *v20;
              *v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v11 < v4)
    {
      if (__OFSUB__(v11, v14))
        goto LABEL_130;
      if (v11 - v14 < v7)
      {
        v25 = v14 + v7;
        if (__OFADD__(v14, v7))
          goto LABEL_134;
        if (v25 >= v4)
          v25 = v4;
        if (v25 < v14)
          goto LABEL_135;
        if (v11 != v25)
        {
          v26 = (_QWORD *)(v90 + 8 * v11);
          do
          {
            v27 = *(_QWORD *)(v12 + 8 * v11);
            v28 = v14;
            v29 = v26;
            do
            {
              v30 = *v29;
              if (*(float *)(*v29 + 120) > *(float *)(v27 + 120))
                break;
              if (!v12)
                goto LABEL_136;
              *v29 = v27;
              v29[1] = v30;
              --v29;
              ++v28;
            }
            while (v11 != v28);
            ++v11;
            ++v26;
          }
          while (v11 != v25);
          v11 = v25;
        }
      }
    }
    if (v11 < v14)
    {
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }
    result = swift_isUniquelyReferenced_nonNull_native(v10);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1000A7838(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
      v10 = (char *)result;
    }
    v32 = *((_QWORD *)v10 + 2);
    v31 = *((_QWORD *)v10 + 3);
    v13 = v32 + 1;
    v12 = v93;
    if (v32 >= v31 >> 1)
    {
      result = (uint64_t)sub_1000A7838((char *)(v31 > 1), v32 + 1, 1, v10);
      v12 = v93;
      v10 = (char *)result;
    }
    *((_QWORD *)v10 + 2) = v13;
    v33 = v10 + 32;
    v34 = &v10[16 * v32 + 32];
    *(_QWORD *)v34 = v14;
    *((_QWORD *)v34 + 1) = v11;
    if (v32)
      break;
    v13 = 1;
LABEL_14:
    v7 = v91;
    v4 = v92;
    if (v11 >= v92)
    {
      v2 = v1;
LABEL_97:
      result = (uint64_t)v10;
      if (v13 < 2)
        goto LABEL_94;
      v83 = *v89;
      while (1)
      {
        v84 = v13 - 2;
        if (v13 < 2)
          break;
        if (!v83)
          goto LABEL_139;
        v81 = result;
        v85 = *(_QWORD *)(result + 32 + 16 * v84);
        v86 = *(_QWORD *)(result + 32 + 16 * (v13 - 1) + 8);
        result = sub_100016DC4((char *)(v83 + 8 * v85), (char *)(v83 + 8 * *(_QWORD *)(result + 32 + 16 * (v13 - 1))), v83 + 8 * v86, v94);
        if (v2)
          goto LABEL_93;
        if (v86 < v85)
          goto LABEL_127;
        result = swift_isUniquelyReferenced_nonNull_native(v81);
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1000A7930(v81);
          v81 = result;
        }
        if (v84 >= *(_QWORD *)(v81 + 16))
          goto LABEL_128;
        v87 = (_QWORD *)(v81 + 32 + 16 * v84);
        *v87 = v85;
        v87[1] = v86;
        v88 = *(_QWORD *)(v81 + 16);
        if (v13 > v88)
          goto LABEL_129;
        memmove((void *)(v81 + 32 + 16 * (v13 - 1)), (const void *)(v81 + 32 + 16 * v13), 16 * (v88 - v13));
        result = v81;
        *(_QWORD *)(v81 + 16) = v88 - 1;
        v13 = v88 - 1;
        if (v88 <= 2)
          goto LABEL_94;
      }
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
      return result;
    }
  }
  while (1)
  {
    v35 = v13 - 1;
    if (v13 >= 4)
    {
      v40 = &v33[2 * v13];
      v41 = *(v40 - 8);
      v42 = *(v40 - 7);
      v46 = __OFSUB__(v42, v41);
      v43 = v42 - v41;
      if (v46)
        goto LABEL_114;
      v45 = *(v40 - 6);
      v44 = *(v40 - 5);
      v46 = __OFSUB__(v44, v45);
      v38 = v44 - v45;
      v39 = v46;
      if (v46)
        goto LABEL_115;
      v47 = v13 - 2;
      v48 = &v33[2 * v13 - 4];
      v50 = *v48;
      v49 = v48[1];
      v46 = __OFSUB__(v49, v50);
      v51 = v49 - v50;
      if (v46)
        goto LABEL_116;
      v46 = __OFADD__(v38, v51);
      v52 = v38 + v51;
      if (v46)
        goto LABEL_118;
      if (v52 >= v43)
      {
        v70 = &v33[2 * v35];
        v72 = *v70;
        v71 = v70[1];
        v46 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v46)
          goto LABEL_124;
        v63 = v38 < v73;
        goto LABEL_82;
      }
    }
    else
    {
      if (v13 != 3)
      {
        v64 = *((_QWORD *)v10 + 4);
        v65 = *((_QWORD *)v10 + 5);
        v46 = __OFSUB__(v65, v64);
        v57 = v65 - v64;
        v58 = v46;
        goto LABEL_76;
      }
      v37 = *((_QWORD *)v10 + 4);
      v36 = *((_QWORD *)v10 + 5);
      v46 = __OFSUB__(v36, v37);
      v38 = v36 - v37;
      v39 = v46;
    }
    if ((v39 & 1) != 0)
      goto LABEL_117;
    v47 = v13 - 2;
    v53 = &v33[2 * v13 - 4];
    v55 = *v53;
    v54 = v53[1];
    v56 = __OFSUB__(v54, v55);
    v57 = v54 - v55;
    v58 = v56;
    if (v56)
      goto LABEL_119;
    v59 = &v33[2 * v35];
    v61 = *v59;
    v60 = v59[1];
    v46 = __OFSUB__(v60, v61);
    v62 = v60 - v61;
    if (v46)
      goto LABEL_121;
    if (__OFADD__(v57, v62))
      goto LABEL_123;
    if (v57 + v62 >= v38)
    {
      v63 = v38 < v62;
LABEL_82:
      if (v63)
        v35 = v47;
      goto LABEL_84;
    }
LABEL_76:
    if ((v58 & 1) != 0)
      goto LABEL_120;
    v66 = &v33[2 * v35];
    v68 = *v66;
    v67 = v66[1];
    v46 = __OFSUB__(v67, v68);
    v69 = v67 - v68;
    if (v46)
      goto LABEL_122;
    if (v69 < v57)
      goto LABEL_14;
LABEL_84:
    v74 = v35 - 1;
    if (v35 - 1 >= v13)
    {
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
      goto LABEL_125;
    }
    if (!v12)
      goto LABEL_137;
    v75 = v10;
    v76 = &v33[2 * v74];
    v77 = *v76;
    v78 = &v33[2 * v35];
    v79 = v78[1];
    result = sub_100016DC4((char *)(v12 + 8 * *v76), (char *)(v12 + 8 * *v78), v12 + 8 * v79, v94);
    if (v1)
      break;
    if (v79 < v77)
      goto LABEL_111;
    if (v35 > *((_QWORD *)v75 + 2))
      goto LABEL_112;
    *v76 = v77;
    v33[2 * v74 + 1] = v79;
    v80 = *((_QWORD *)v75 + 2);
    if (v35 >= v80)
      goto LABEL_113;
    v10 = v75;
    v13 = v80 - 1;
    result = (uint64_t)memmove(&v33[2 * v35], v78 + 2, 16 * (v80 - 1 - v35));
    *((_QWORD *)v75 + 2) = v80 - 1;
    v12 = v93;
    if (v80 <= 2)
      goto LABEL_14;
  }
  v81 = (uint64_t)v75;
LABEL_93:
  result = v81;
LABEL_94:
  v82 = swift_bridgeObjectRelease(result);
  *(_QWORD *)((v95 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()(v82);
  return swift_bridgeObjectRelease(v95);
}

uint64_t sub_100016D5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 8 * a3 - 8;
LABEL_5:
    v6 = *(_QWORD *)(v4 + 8 * a3);
    v7 = result;
    v8 = (_QWORD *)v5;
    while (1)
    {
      v9 = *v8;
      if (*(float *)(*v8 + 120) > *(float *)(v6 + 120))
      {
LABEL_4:
        ++a3;
        v5 += 8;
        if (a3 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v4)
        break;
      *v8 = v6;
      v8[1] = v9;
      --v8;
      if (a3 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100016DC4(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 7;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 3;
  if (v10 >= v12 >> 3)
  {
    if (a4 != __src || &__src[8 * v13] <= a4)
      memmove(a4, __src, 8 * v13);
    v14 = &v4[8 * v13];
    if (v7 >= v6 || v11 < 8)
      goto LABEL_39;
    v17 = (char *)(a3 - 8);
    v18 = v6;
    while (1)
    {
      v19 = v17 + 8;
      v21 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      v20 = v21;
      if (*(float *)(v21 + 120) <= *(float *)(*((_QWORD *)v14 - 1) + 120))
        break;
      v20 = *((_QWORD *)v14 - 1);
      v18 = v6;
      if (v19 != v14)
      {
        v14 -= 8;
LABEL_35:
        *(_QWORD *)v17 = v20;
        goto LABEL_36;
      }
      v22 = v17 >= v14;
      v14 -= 8;
      if (v22)
        goto LABEL_35;
LABEL_36:
      if (v18 > v7)
      {
        v17 -= 8;
        v6 = v18;
        if (v14 > v4)
          continue;
      }
      v6 = v18;
      goto LABEL_39;
    }
    if (v19 == v6 && v17 < v6)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (a4 != __dst || &__dst[8 * v10] <= a4)
    memmove(a4, __dst, 8 * v10);
  v14 = &v4[8 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      v15 = *(_QWORD *)v6;
      if (*(float *)(*(_QWORD *)v4 + 120) <= *(float *)(*(_QWORD *)v6 + 120))
        break;
      v15 = *(_QWORD *)v4;
      v16 = v7 == v4;
      v4 += 8;
      if (!v16)
        goto LABEL_16;
LABEL_17:
      v7 += 8;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v16 = v7 == v6;
    v6 += 8;
    if (v16)
      goto LABEL_17;
LABEL_16:
    *(_QWORD *)v7 = v15;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_39:
  v23 = v14 - v4 + (v14 - v4 < 0 ? 7uLL : 0);
  if (v6 != v4 || v6 >= &v4[v23 & 0xFFFFFFFFFFFFFFF8])
    memmove(v6, v4, 8 * (v23 >> 3));
  return 1;
}

void sub_100016FD4()
{
  id v0;
  void *v1;
  id v2;
  NSString v3;
  id v4;
  id v5;
  NSString v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v0 = objc_msgSend((id)objc_opt_self(SCNSphere), "sphereWithRadius:", 0.002);
  v1 = (void *)objc_opt_self(SCNNode);
  v2 = objc_msgSend(v1, "nodeWithGeometry:", v0);
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setName:", v3);

  objc_msgSend(v2, "setOpacity:", 0.5);
  v4 = objc_msgSend((id)objc_opt_self(SCNBox), "boxWithWidth:height:length:chamferRadius:", 0.0005, 0.0005, 0.5, 0.0);
  v5 = objc_msgSend(v1, "nodeWithGeometry:", v4);

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setName:", v6);

  v7 = objc_msgSend(v5, "geometry");
  if (!v7)
    goto LABEL_13;
  v8 = v7;
  v9 = objc_msgSend(v7, "materials");

  v10 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  if (!((unint64_t)v11 >> 62))
  {
    if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_12:
    swift_bridgeObjectRelease(v11);
    goto LABEL_13;
  }
  if (v11 < 0)
    v16 = v11;
  else
    v16 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v11);
  v17 = _CocoaArrayWrapper.endIndex.getter(v16);
  swift_bridgeObjectRelease(v11);
  if (!v17)
    goto LABEL_12;
LABEL_4:
  if ((v11 & 0xC000000000000001) != 0)
  {
    v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v11);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v12 = *(id *)(v11 + 32);
LABEL_7:
    v13 = v12;
    swift_bridgeObjectRelease(v11);
    v14 = objc_msgSend(v13, "diffuse");

    v15 = objc_msgSend((id)objc_opt_self(UIColor), "redColor");
    objc_msgSend(v14, "setContents:", v15);

LABEL_13:
    objc_msgSend(v5, "position");
    objc_msgSend(v5, "setPosition:");
    objc_msgSend(v5, "setHidden:", 1);
    objc_msgSend(v2, "addChildNode:", v5);

    return;
  }
  __break(1u);
}

void sub_1000172C0()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;

  v0 = objc_msgSend((id)objc_opt_self(SCNSphere), "sphereWithRadius:", 0.001);
  v1 = objc_msgSend(v0, "materials");
  v2 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v8 = v3;
    else
      v8 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v9 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(v3);
    if (v9)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease(v3);
    goto LABEL_12;
  }
  if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_11;
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
  }
  else
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_26;
    }
    v4 = *(id *)(v3 + 32);
  }
  v5 = v4;
  swift_bridgeObjectRelease(v3);
  v6 = objc_msgSend(v5, "diffuse");

  v7 = objc_msgSend((id)objc_opt_self(UIColor), "yellowColor");
  objc_msgSend(v6, "setContents:", v7);

LABEL_12:
  v10 = objc_msgSend(v0, "materials");
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v2);

  if (!((unint64_t)v2 >> 62))
  {
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_14;
LABEL_22:
    swift_bridgeObjectRelease(v2);
    goto LABEL_23;
  }
  if (v2 < 0)
    v13 = v2;
  else
    v13 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v14 = _CocoaArrayWrapper.endIndex.getter(v13);
  swift_bridgeObjectRelease(v2);
  if (!v14)
    goto LABEL_22;
LABEL_14:
  if ((v2 & 0xC000000000000001) != 0)
  {
LABEL_26:
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
    goto LABEL_17;
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v2 + 32);
LABEL_17:
    v12 = v11;
    swift_bridgeObjectRelease(v2);
    objc_msgSend(v12, "setBlendMode:", 4);

LABEL_23:
    v15 = objc_msgSend((id)objc_opt_self(SCNNode), "nodeWithGeometry:", v0);
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setName:", v16);

    objc_msgSend(v15, "setOpacity:", 0.1);
    return;
  }
  __break(1u);
}

void _s7Measure16SCNPatchDebuggerC12observeValue10forKeyPath2of6change7contextySSSg_ypSgSDySo05NSKeye6ChangeG0aypGSgSvSgtF_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, _QWORD);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  _BYTE v30[32];
  uint64_t v31;

  if (a2)
  {
    v3 = v2;
    v6 = (_QWORD *)PatchTracker.DebugOptions.keyForFeature.unsafeMutableAddressor();
    v7 = *v6;
    if (*(_QWORD *)(*v6 + 16))
    {
      swift_bridgeObjectRetain(*v6);
      swift_bridgeObjectRetain(a2);
      v8 = sub_1000C80A8(a1, a2);
      if ((v9 & 1) == 0)
      {
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v7);
        return;
      }
      v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v7);
      sub_100018148(0, (unint64_t *)&unk_100481BB0, NSUserDefaults_ptr);
      v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7Measure16SCNPatchDebugger_tracker);
      v31 = v10;
      v12 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 1248))(v30);
      v14 = v13;
      v15 = sub_100018244();
      v16 = static NSUserDefaults.update<A>(_:key:feature:)(v14, a1, a2, &v31, &type metadata for PatchTracker.DebugOptions, v15);
      v17 = v12(v30, 0);
      if (*(_QWORD *)PatchTracker.DebugOptions.showPoints.unsafeMutableAddressor(v17) == v10)
      {
        v18 = sub_100013BD4();
        objc_msgSend(v18, "setHidden:", (v16 & 1) == 0);
LABEL_6:

        return;
      }
      if (*(_QWORD *)PatchTracker.DebugOptions.paintMode.unsafeMutableAddressor() == v10)
      {
        v19 = sub_100013BE8();
        objc_msgSend(v19, "setHidden:", (v16 & 1) == 0);

        if ((v16 & 1) != 0)
        {
          v20 = sub_100013D30();
          v21 = sub_100013BE8();
          v22 = objc_msgSend(v21, "childNodes");

          v23 = sub_100018148(0, &qword_10047BCE8, SCNNode_ptr);
          v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 216))(v24);
          swift_release(v20);
          swift_bridgeObjectRelease(v24);
          v25 = sub_100013BE8();
          SCNNode.removeAllChildren()();

        }
      }
      else if (*(_QWORD *)PatchTracker.DebugOptions.drawPatches.unsafeMutableAddressor() == v10)
      {
        v26 = sub_100013E0C();
        v27 = objc_msgSend(v26, "parent");

        if ((v16 & 1) != 0)
        {
          if (!v27)
          {
            v28 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v3
                                                                        + OBJC_IVAR____TtC7Measure16SCNPatchDebugger_sceneView), "overlaySKScene"));
            if (v28)
            {
              v29 = v28;
              v18 = sub_100013E0C();
              objc_msgSend(v29, "addChild:", v18);

              goto LABEL_6;
            }
          }
        }
        else if (v27)
        {
          v18 = sub_100013E0C();
          objc_msgSend(v18, "removeFromParent");
          goto LABEL_6;
        }
      }
    }
  }
}

void sub_100017874(float *a1, float32x4_t a2, float a3, float a4)
{
  uint64_t v4;
  _UNKNOWN **v5;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  id v15;
  void *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  double v24;
  id v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  float *v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t v46;
  char *v48;

  v9 = sub_100013BE8();
  v10 = objc_msgSend(v9, "childNodes");

  v11 = sub_100018148(0, &qword_10047BCE8, SCNNode_ptr);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  if (!((unint64_t)v12 >> 62))
  {
    v13 = *(char **)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease(v12);
LABEL_15:
    v21 = sub_100013D30();
    (*(void (**)(char **__return_ptr))(*(_QWORD *)v21 + 200))(&v48);
    swift_release(v21);
    v13 = v48;
    SCNVector3.init(_:)(*(double *)a2.i64);
    objc_msgSend(v13, "setPosition:");
    v22 = sub_100013BE8();
    objc_msgSend(v22, "addChildNode:", v13);

    v23 = objc_msgSend(v13, "geometry");
    if (!v23)
      goto LABEL_37;
    v12 = (uint64_t)v23;
    if ((float)(1.0 - a3) * 50.0 <= 1.0)
      v24 = (float)(1.0 - a3) * 50.0;
    else
      v24 = 1.0;
    v5 = &_sSo7UIColorC17MeasureFoundationE4argbABs6UInt32V_tcfC_ptr;
    a1 = (float *)objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithDisplayP3Red:green:blue:alpha:", (float)(1.0 - a4), a1[30], v24, 1.0);
    v25 = objc_msgSend((id)v12, "materials");
    v26 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v26);

    if (!((unint64_t)v4 >> 62))
    {
      if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_21:
        if ((v4 & 0xC000000000000001) != 0)
        {
          v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
        }
        else
        {
          if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_58;
          }
          v27 = *(id *)(v4 + 32);
        }
        v28 = v27;
        swift_bridgeObjectRelease(v4);
        v29 = objc_msgSend(v28, "diffuse");

        if (a4 >= 0.0)
          v30 = a1;
        else
          v30 = (float *)objc_msgSend((id)objc_opt_self(v5[369]), "redColor");
        v31 = v30;
        objc_msgSend(v29, "setContents:", v30, *(_OWORD *)&v46);

LABEL_37:
        v34 = sub_100013BE8();
        v35 = objc_msgSend(v34, "childNodes");

        v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v35, v11);
        if ((unint64_t)v36 >> 62)
        {
          if (v36 < 0)
            v43 = v36;
          else
            v43 = v36 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v36);
          v37 = _CocoaArrayWrapper.endIndex.getter(v43);
          swift_bridgeObjectRelease(v36);
        }
        else
        {
          v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease(v36);
        if (v37 < 2001)
        {

          return;
        }
        v38 = sub_100013BE8();
        v39 = objc_msgSend(v38, "childNodes");

        v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v39, v11);
        if ((unint64_t)v12 >> 62)
        {
          if (v12 < 0)
            v44 = v12;
          else
            v44 = v12 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v12);
          v45 = _CocoaArrayWrapper.endIndex.getter(v44);
          swift_bridgeObjectRelease(v12);
          if (v45)
          {
LABEL_42:
            if ((v12 & 0xC000000000000001) == 0)
            {
              if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                return;
              }
              v40 = (char *)*(id *)(v12 + 32);
LABEL_45:
              v41 = v40;
              swift_bridgeObjectRelease(v12);
              objc_msgSend(v41, "removeFromParentNode");
              v42 = sub_100013D30();
              v48 = v41;
              (*(void (**)(char **))(*(_QWORD *)v42 + 208))(&v48);

              swift_release(v42);
              return;
            }
LABEL_58:
            v40 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
            goto LABEL_45;
          }
        }
        else if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_42;
        }

        swift_bridgeObjectRelease(v12);
        return;
      }
LABEL_36:

      swift_bridgeObjectRelease(v4);
      goto LABEL_37;
    }
LABEL_32:
    if (v4 < 0)
      v32 = v4;
    else
      v32 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v33 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease(v4);
    if (v33)
      goto LABEL_21;
    goto LABEL_36;
  }
  if (v12 < 0)
    v20 = v12;
  else
    v20 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v12);
  v13 = (char *)_CocoaArrayWrapper.endIndex.getter(v20);
  swift_bridgeObjectRelease(v12);
  if (!v13)
    goto LABEL_14;
LABEL_3:
  v14 = v13 - 1;
  if (__OFSUB__(v13, 1))
  {
    __break(1u);
  }
  else if ((v12 & 0xC000000000000001) == 0)
  {
    if (((unint64_t)v14 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v14 < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v15 = *(id *)(v12 + 8 * (_QWORD)v14 + 32);
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_32;
  }
  v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v12);
LABEL_8:
  v16 = v15;
  swift_bridgeObjectRelease(v12);
  *(double *)v17.i64 = SCNVector3.floats.getter(objc_msgSend(v16, "position"));
  v46 = v17;

  v18 = vsubq_f32(v46, a2);
  v19 = vmulq_f32(v18, v18);
  if ((float)(v19.f32[2] + vaddv_f32(*(float32x2_t *)v19.f32)) >= 0.000001)
    goto LABEL_15;
}

uint64_t sub_100017DD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

vImage_Error sub_100017DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000159E4(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100017DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100017E0C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100017E18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100015B9C(a1, a2, *(_BYTE **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

void _s7Measure16SCNPatchDebuggerC11drawPatches04goodE003badE06resultySay0A10Foundation12PatchTrackerC0J0CG_AMSgs5SIMD3VySfG8position_AQSg6normalAQ9sourceHit_AQ6origin_AQ9directiont0O3RayAL0oJ0AqV_AqWt04destS0AL0tJ0Sf5depthSf06rayDotS0Sf10confidencet4testtSgtF_0(uint64_t a1, uint64_t a2)
{
  char *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  id v11;
  _QWORD v12[5];
  _QWORD *v13;

  v4 = (char *)sub_100013E0C();
  v5 = *(void **)&v4[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingTexture];
  if (v5)
  {
    v6 = v4;
    v7 = (_QWORD *)swift_allocObject(&unk_10043EB60, 40, 7);
    v7[2] = v6;
    v7[3] = a1;
    v7[4] = a2;
    v12[4] = sub_1000182C0;
    v13 = v7;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_100015A60;
    v12[3] = &unk_10043EB78;
    v8 = _Block_copy(v12);
    v9 = v13;
    swift_bridgeObjectRetain(a2);
    v10 = v5;
    v11 = v6;
    swift_bridgeObjectRetain(a1);
    objc_msgSend(v10, "modifyPixelDataWithBlock:", v8, swift_release(v9).n128_f64[0]);
    _Block_release(v8);

  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for SCNPatchDebugger.SKDebugRenderer()
{
  return objc_opt_self(_TtCC7Measure16SCNPatchDebugger15SKDebugRenderer);
}

uint64_t sub_100017F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8(&qword_10047BDC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100017F94()
{
  _BYTE *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  *(_QWORD *)&v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_patchPadding] = 5;
  *(_QWORD *)&v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_bytesPerPixel] = 4;
  *(_QWORD *)&v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_textureBgColor] = &off_10043BBF8;
  v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_renderEmboss] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingTexture] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_drawingNode] = 0;
  v1 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer_textureBuffer];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  v1[32] = 1;
  v2 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___width];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  v3 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___height];
  *(_QWORD *)v3 = 0;
  v3[8] = 1;
  v4 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchSizeInPixels];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchAlphaBuffer];
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  v6 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchEmbossBuffer];
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  v7 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___patchARGBBuffer];
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  v8 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineOnBuffer];
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  v9 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineOffBuffer];
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[32] = 1;
  v10 = &v0[OBJC_IVAR____TtCC7Measure16SCNPatchDebugger15SKDebugRenderer____lazy_storage___lineARGBBuffer];
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  v10[32] = 1;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/SCNPatchDebugger.swift", 30, 2, 307, 0);
  __break(1u);
}

uint64_t sub_10001811C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100018140@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10003666C(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_100018148(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100018180(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000EDC8((uint64_t *)&unk_10047ED00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000181C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047B5F0;
  if (!qword_10047B5F0)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    result = swift_getWitnessTable(&unk_1003B06A4, v1);
    atomic_store(result, (unint64_t *)&qword_10047B5F0);
  }
  return result;
}

uint64_t sub_10001820C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

unint64_t sub_100018244()
{
  unint64_t result;

  result = qword_10047BDD8;
  if (!qword_10047BDD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PatchTracker.DebugOptions, &type metadata for PatchTracker.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_10047BDD8);
  }
  return result;
}

id sub_1000182C8(void *a1, double a2, double a3, CGFloat a4)
{
  CGAffineTransform v6;

  CGAffineTransformMakeRotation(&v6, a4);
  objc_msgSend(a1, "setTransform:", &v6);
  objc_msgSend(a1, "bounds");
  objc_msgSend(a1, "setBounds:");
  return objc_msgSend(a1, "layoutIfNeeded");
}

void sub_100018364(void *a1, double a2)
{
  id v3;

  v3 = objc_msgSend(a1, "tabBar");
  objc_msgSend(v3, "setAlpha:", a2);

}

uint64_t type metadata accessor for SpatialViewUtils()
{
  return objc_opt_self(_TtC7Measure16SpatialViewUtils);
}

void sub_1000183D4(unint64_t a1, void *a2, char a3, uint64_t a4, char a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t v18;
  uint64_t v19;
  double v20;
  double Height;
  double Width;
  double v23;
  CGFloat tx;
  CGFloat ty;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t KeyPath;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  CGFloat v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  double v52;
  double v53;
  double v54;
  CGAffineTransform aBlock;
  CGRect v56;
  CGRect v57;

  sub_10000F0D8();
  v18 = static UIDevice.isIPad()();
  if ((v18 & 1) != 0)
  {
    if (a1 - 1 >= 4)
      return;
LABEL_6:
    v19 = static UIDevice.isIPhone()(v18);
    v20 = 0.0;
    if ((v19 & 1) == 0)
    {
      switch(a1)
      {
        case 2uLL:
          v20 = 3.1415925;
          break;
        case 4uLL:
          v20 = -*(float *)Float.piDiv2.unsafeMutableAddressor(v19);
LABEL_15:
          v56.origin.x = a6;
          v56.origin.y = a7;
          v56.size.width = a8;
          v56.size.height = a9;
          Height = CGRectGetHeight(v56);
          v57.origin.x = a6;
          v57.origin.y = a7;
          v57.size.width = a8;
          v57.size.height = a9;
          Width = CGRectGetWidth(v57);
          a8 = CGSize.init(_:_:)(Height, Width);
          a9 = v23;
          if ((a5 & 1) == 0)
          {
LABEL_16:
            if ((a3 & 1) != 0)
            {
              objc_msgSend(a2, "transform");
              v50 = *(_OWORD *)&aBlock.c;
              v51 = *(_OWORD *)&aBlock.a;
              tx = aBlock.tx;
              ty = aBlock.ty;
              objc_msgSend(a2, "bounds");
              v53 = v27;
              v54 = v26;
              v52 = v28;
              v30 = v29;
              CGAffineTransformMakeRotation(&aBlock, v20);
              objc_msgSend(a2, "setTransform:", &aBlock);
              objc_msgSend(a2, "bounds");
              objc_msgSend(a2, "setBounds:");
              objc_msgSend(a2, "setNeedsLayout");
              objc_msgSend(a2, "layoutIfNeeded");
              sub_100184080(a2);
              KeyPath = swift_getKeyPath(&unk_1003B0F88);
              v32 = swift_getKeyPath(&unk_1003B0FB0);
              static Published.subscript.getter(&aBlock, a4, KeyPath, v32);
              swift_release();
              *(_QWORD *)&v33 = swift_release().n128_u64[0];
              v34 = dbl_1003B1040[SLOBYTE(aBlock.a)];
              objc_msgSend(*(id *)(a4 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView), "frame", v33);
              v36 = v35;
              v37 = swift_getKeyPath(&unk_1003B0FD0);
              v38 = swift_getKeyPath(&unk_1003B0FF8);
              swift_retain();
              static Published.subscript.getter(&aBlock, v39, v37, v38);
              swift_release();
              swift_release();
              swift_release();
              *(double *)&v40 = fabs(v34) * (v36 - aBlock.a);
              *(_OWORD *)&aBlock.a = v51;
              *(_OWORD *)&aBlock.c = v50;
              aBlock.tx = tx;
              aBlock.ty = ty;
              objc_msgSend(a2, "setTransform:", &aBlock);
              objc_msgSend(a2, "setBounds:", v54, v53, v52, v30);
              objc_msgSend(a2, "setNeedsLayout");
              objc_msgSend(a2, "layoutIfNeeded");
              v41 = swift_getKeyPath(&unk_1003B0F88);
              v42 = swift_getKeyPath(&unk_1003B0FB0);
              static Published.subscript.getter(&aBlock, a4, v41, v42);
              swift_release();
              swift_release();
              sub_100184394(SLOBYTE(aBlock.a), v40, 0);
              v43 = (void *)objc_opt_self(UIViewPropertyAnimator);
              v44 = COERCE_DOUBLE(swift_allocObject(&unk_10043EC08, 48, 7));
              *(_QWORD *)(*(_QWORD *)&v44 + 16) = a2;
              *(CGFloat *)(*(_QWORD *)&v44 + 24) = a8;
              *(CGFloat *)(*(_QWORD *)&v44 + 32) = a9;
              *(double *)(*(_QWORD *)&v44 + 40) = v20;
              *(_QWORD *)&aBlock.tx = sub_100018D3C;
              aBlock.ty = v44;
              *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
              *(_QWORD *)&aBlock.b = 1107296256;
              *(_QWORD *)&aBlock.c = sub_10003ECA0;
              *(_QWORD *)&aBlock.d = &unk_10043EC20;
              v45 = _Block_copy(&aBlock);
              v46 = a2;
              swift_release();
              v47 = objc_msgSend(v43, "runningPropertyAnimatorWithDuration:delay:options:animations:completion:", 0, v45, 0, 0.25, 0.25);
              _Block_release(v45);

            }
            else
            {
              CGAffineTransformMakeRotation(&aBlock, v20);
              objc_msgSend(a2, "setTransform:", &aBlock);
              objc_msgSend(a2, "bounds");
              objc_msgSend(a2, "setBounds:");
              objc_msgSend(a2, "setNeedsLayout");
              objc_msgSend(a2, "layoutIfNeeded");
              sub_100184080(a2);
              v48 = swift_getKeyPath(&unk_1003B0F88);
              v49 = swift_getKeyPath(&unk_1003B0FB0);
              static Published.subscript.getter(&aBlock, a4, v48, v49);
              swift_release();
              swift_release();
              sub_100184394(SLOBYTE(aBlock.a), 0, 1);
              objc_msgSend(a2, "setNeedsLayout");
              objc_msgSend(a2, "layoutIfNeeded");
            }
            return;
          }
LABEL_13:
          CGAffineTransformMakeRotation(&aBlock, v20);
          objc_msgSend(a2, "setTransform:", &aBlock);
          objc_msgSend(a2, "bounds");
          objc_msgSend(a2, "setBounds:");
          objc_msgSend(a2, "setNeedsLayout");
          objc_msgSend(a2, "layoutIfNeeded");
          return;
        case 3uLL:
          v20 = *(float *)Float.piDiv2.unsafeMutableAddressor(v19);
          goto LABEL_15;
      }
    }
    if ((a5 & 1) == 0)
      goto LABEL_16;
    goto LABEL_13;
  }
  if (a1 <= 4 && ((1 << a1) & 0x1A) != 0)
    goto LABEL_6;
}

uint64_t sub_1000189B0(__int128 *a1)
{
  __int128 v2;
  __int128 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];
  __int128 v21;

  v2 = a1[1];
  v19 = *a1;
  v20[0] = v2;
  *(_QWORD *)((char *)v20 + 14) = *(_QWORD *)((char *)a1 + 30);
  v3 = *(__int128 *)((char *)a1 + 56);
  v16 = *(__int128 *)((char *)a1 + 40);
  v17[0] = v3;
  *(_QWORD *)((char *)v17 + 14) = *(_QWORD *)((char *)a1 + 70);
  v4 = sub_100108D3C((float *)&v19, (uint64_t)&v16);
  v5 = sub_10000EDC8((uint64_t *)&unk_10048A100);
  if ((v4 & 1) != 0)
  {
    v6 = swift_allocObject(v5, 112, 7);
    *(_OWORD *)(v6 + 16) = xmmword_1003B0F60;
    v21 = v19;
    *(_QWORD *)(v6 + 56) = &type metadata for String;
    v7 = sub_100018B34();
    *(_QWORD *)(v6 + 64) = v7;
    *(_OWORD *)(v6 + 32) = v19;
    v18 = a1[5];
    v8 = v18;
    *(_QWORD *)(v6 + 96) = &type metadata for String;
    *(_QWORD *)(v6 + 104) = v7;
    *(_OWORD *)(v6 + 72) = v8;
    sub_100018B78((uint64_t)&v21);
    sub_100018B78((uint64_t)&v18);
    v9 = 0x29402528204025;
    v10 = 0xE700000000000000;
  }
  else
  {
    v6 = swift_allocObject(v5, 152, 7);
    *(_OWORD *)(v6 + 16) = xmmword_1003B0F50;
    v21 = v19;
    *(_QWORD *)(v6 + 56) = &type metadata for String;
    v11 = sub_100018B34();
    *(_QWORD *)(v6 + 64) = v11;
    *(_OWORD *)(v6 + 32) = v19;
    v12 = v16;
    v18 = v16;
    *(_QWORD *)(v6 + 96) = &type metadata for String;
    *(_QWORD *)(v6 + 104) = v11;
    *(_OWORD *)(v6 + 72) = v12;
    v15 = a1[5];
    v13 = v15;
    *(_QWORD *)(v6 + 136) = &type metadata for String;
    *(_QWORD *)(v6 + 144) = v11;
    *(_OWORD *)(v6 + 112) = v13;
    sub_100018B78((uint64_t)&v21);
    sub_100018B78((uint64_t)&v18);
    sub_100018B78((uint64_t)&v15);
    v9 = 0x202C402528204025;
    v10 = 0xEB00000000294025;
  }
  return String.init(format:_:)(v9, v10, v6);
}

unint64_t sub_100018B34()
{
  unint64_t result;

  result = qword_10047BE78;
  if (!qword_10047BE78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10047BE78);
  }
  return result;
}

uint64_t sub_100018B78(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_100018BA0(uint64_t a1)
{
  id v2;
  void *v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  CGRect v15;
  CGRect v16;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  if (!(_QWORD)xmmword_1004AF258)
  {
    __break(1u);
    goto LABEL_16;
  }
  v2 = objc_msgSend((id)xmmword_1004AF258, "view");
  if (!v2)
  {
LABEL_16:
    __break(1u);
    return;
  }
  v3 = v2;
  objc_msgSend(v2, "frame");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  v15.origin.x = v5;
  v15.origin.y = v7;
  v15.size.width = v9;
  v15.size.height = v11;
  CGRectGetHeight(v15);
  v12 = sub_10000F0D8();
  v13 = static UIDevice.isIPhone()(v12);
  if ((v13 & 1) != 0)
  {
    if (qword_10047A790 != -1)
      v13 = swift_once(&qword_10047A790, sub_10000F000);
  }
  else if (qword_10047A790 != -1)
  {
    v13 = swift_once(&qword_10047A790, sub_10000F000);
  }
  if ((static UIDevice.isIPhone()(v13) & 1) != 0)
    v14 = &OBJC_IVAR____TtC7Measure17CardContainerView_magicPocketView;
  else
    v14 = &OBJC_IVAR____TtC7Measure17CardContainerView_bottomStackView;
  objc_msgSend(*(id *)(a1 + *v14), "bounds");
  CGRectGetHeight(v16);
}

uint64_t sub_100018D18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

id sub_100018D3C()
{
  uint64_t v0;

  return sub_1000182C8(*(void **)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(CGFloat *)(v0 + 40));
}

uint64_t sub_100018D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018D5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100018D64()
{
  uint64_t v0;

  swift_allocObject(v0, 184, 7);
  sub_100018D88();
}

void sub_100018D88()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;

  v1 = v0;
  v2 = *v0;
  v0[10] = 0;
  *((_DWORD *)v0 + 22) = 1106247680;
  v0[12] = 0;
  v0[14] = 0;
  v0[15] = 0;
  KeyPath = swift_getKeyPath(&unk_1003B1128);
  v4 = sub_10000EDC8((uint64_t *)&unk_1004873C0);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v5 = qword_1004AF890;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 272);
  swift_retain(qword_1004AF890);
  v1[16] = v6(KeyPath, v5);
  v7 = swift_getKeyPath(&unk_1003B1150);
  v8 = sub_10000EDC8(&qword_10047BBA0);
  v9 = qword_1004AF890;
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 272);
  swift_retain(qword_1004AF890);
  v1[17] = v10(v7, v9);
  v11 = swift_getKeyPath(&unk_1003B1178);
  v12 = sub_10000EDC8(&qword_100481BA0);
  v13 = qword_1004AF890;
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 272);
  swift_retain(qword_1004AF890);
  v1[18] = v14(v11, v13);
  v15 = sub_10000EDC8(&qword_10047E5E0);
  v16 = swift_getKeyPath(&unk_1003B11A0);
  v17 = qword_1004AF890;
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 272);
  swift_retain(qword_1004AF890);
  v1[19] = v18(v16, v17);
  v19 = sub_10000EDC8(&qword_10047BBA8);
  v20 = swift_getKeyPath(&unk_1003B11C8);
  v21 = qword_1004AF890;
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 272);
  swift_retain(qword_1004AF890);
  v1[20] = v22(v20, v21);
  v23 = sub_10000EDC8(&qword_10047ECF0);
  v24 = swift_getKeyPath(&unk_1003B11F0);
  v25 = qword_1004AF890;
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 272);
  swift_retain(qword_1004AF890);
  v1[21] = v26(v24, v25);
  sub_10000EDC8(&qword_10047C010);
  v27 = swift_getKeyPath(&unk_1003B1218);
  v1[22] = MutableStateValue.__allocating_init(_:_:)(v27, v2);
  swift_release(v1);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/ActionController.swift", 30, 2, 57, 0);
  __break(1u);
}

double sub_100018FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 152);
  swift_retain(v2);
  StateValue.ifUpdated(_:)(sub_10001A804, v1);
  swift_release(v2);
  v3 = *(_QWORD *)(v1 + 168);
  swift_retain(v3);
  StateValue.ifUpdated(_:)(sub_10001A80C, v1);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

void sub_100019054(_BYTE *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  void (*v5)(_QWORD *__return_ptr, uint64_t);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *__return_ptr, uint64_t);
  uint64_t v9;
  _QWORD v10[6];

  v3 = a1[2];
  if (*a1)
  {
    v4 = *(_QWORD *)(a2 + 176);
    v5 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v4 + 144);
    v6 = swift_retain(v4);
    v5(v10, v6);
    swift_release(v4);
    if (LOBYTE(v10[0]) == 2)
      sub_100019FF0();
  }
  if ((v3 & 1) == 0)
  {
    v7 = *(_QWORD *)(a2 + 176);
    v8 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v7 + 144);
    v9 = swift_retain(v7);
    v8(v10, v9);
    swift_release(v7);
    if (LOBYTE(v10[0]) == 2)
      sub_100019CA4(*(double *)(a2 + 112), *(double *)(a2 + 120));
  }
}

void sub_100019104()
{
  float32x2_t *v0;
  float32x2_t *v1;
  float32x2_t v2;
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  float32x2_t v7;
  void (*v8)(void ***__return_ptr, uint64_t);
  uint64_t v9;
  float32x2_t v10;
  void (*v11)(void ***__return_ptr, uint64_t);
  uint64_t v12;
  float32x2_t v13;
  void (*v14)(void ***__return_ptr, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t (*v19)(uint64_t);
  double (*v20)(void);
  uint64_t (*v21)(uint64_t);
  float32x2_t v22;
  void *v23;
  _QWORD *v24;
  id v25;
  id v26;
  id v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  float32x4_t v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float32x2_t v43;
  uint64_t (*v44)(void ***);
  void (*v45)(void ***, _QWORD);
  _BYTE *v46;
  uint64_t v47;
  double v48;
  double v49;
  float32x2_t v50;
  float v51;
  float32x2_t v52;
  float32x2_t v53;
  CGFloat v54;
  float v55;
  CGFloat v56;
  float v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  float32x2_t v78;
  uint64_t (*v79)(void ***);
  void (*v80)(void ***, _QWORD);
  uint64_t v81;
  id v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  float32x4_t v86;
  float32x2_t v87;
  __n128 v88;
  float32x4_t v89;
  float v90;
  char v91[24];
  void **aBlock;
  uint64_t v93;
  uint64_t (*v94)(uint64_t);
  void *v95;
  id (*v96)();
  uint64_t v97;
  float v98[3];
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;

  v1 = v0;
  v2 = v0[20];
  v3 = swift_retain(*(_QWORD *)&v2);
  StateValue.wrappedValue.getter(&aBlock, v3);
  swift_release(*(_QWORD *)&v2);
  *((_QWORD *)&v5 + 1) = aBlock;
  *(_QWORD *)&v5 = aBlock + 0x800000000000000;
  v4 = v5 >> 3;
  if ((unint64_t)aBlock >> 62 != 3 || v4 < 3)
    goto LABEL_5;
  v10 = v1[22];
  v11 = *(void (**)(void ***__return_ptr, uint64_t))(**(_QWORD **)&v10 + 144);
  v12 = swift_retain(*(_QWORD *)&v10);
  v11(&aBlock, v12);
  swift_release(*(_QWORD *)&v10);
  if (aBlock != 1)
    goto LABEL_5;
  v13 = v1[17];
  v14 = *(void (**)(void ***__return_ptr, uint64_t))(**(_QWORD **)&v13 + 144);
  v15 = swift_retain(*(_QWORD *)&v13);
  v14(&aBlock, v15);
  swift_release(*(_QWORD *)&v13);
  v16 = aBlock;
  v17 = (_QWORD *)v93;
  v19 = v94;
  v18 = v95;
  if (v94)
  {
    v20 = *(double (**)(void))((swift_isaMask & *(_QWORD *)v94) + 0x200);
    v21 = v94;
    v22 = COERCE_FLOAT32X2_T(v20());

  }
  else
  {
    v22 = 0;
  }
  v98[0] = 1.0;
  if (v18)
  {
    v23 = (void *)v1[8];
    v24 = v18;
    v25 = objc_msgSend(v23, "session");
    v26 = objc_msgSend(v25, "currentFrame");

    if (v26)
    {
      v27 = objc_msgSend(v26, "camera");
      objc_msgSend(v27, "transform");
      v85 = v29;
      v88 = v28;
      v83 = v31;
      v84 = v30;

      *(double *)v32.i64 = simd_float4x4.position.getter(v88, v85, v84, v83);
      v89 = v32;
      v33.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *v24) + 0x2B0))();
      *(double *)v37.i64 = simd_float4x4.position.getter(v33, v34, v35, v36);
      v86 = v37;

      v38 = vsubq_f32(v89, v86);
      v39 = vmulq_f32(v38, v38);
      v40 = sqrtf(v39.f32[2] + vaddv_f32(*(float32x2_t *)v39.f32));
      v41 = 1.0;
      if (v40 >= 0.25 && v40 < 1.0)
      {
        v41 = (float)((float)((float)(v40 + -0.25) / 0.75) * 0.5) + 1.0;
        v98[0] = v41;
      }
      else if (v40 > 1.0)
      {
        v98[0] = 1.5;
        v41 = 1.5;
      }
      v90 = v41;
      v43 = v1[22];
      v44 = *(uint64_t (**)(void ***))(**(_QWORD **)&v43 + 400);
      swift_retain(*(_QWORD *)&v43);
      v45 = (void (*)(void ***, _QWORD))v44(&aBlock);
      *v46 = 2;
      v45(&aBlock, 0);
      swift_release(*(_QWORD *)&v43);
      if (v19)
      {
        v1[10] = v22;
        if (qword_10047A938 != -1)
          swift_once(&qword_10047A938, sub_100083764);
        v47 = *(_QWORD *)(qword_1004AF290 + 64);
        LOBYTE(aBlock) = 0;
        swift_retain(v47);
        Synchronized.wrappedValue.setter(&aBlock);
        swift_release(v47);
        sub_1000833A0(6);
        objc_msgSend(v23, "center");
        v50 = vsub_f32(v22, COERCE_FLOAT32X2_T(SIMD2<>.init(_:)(v48, v49)));
        v51 = v90;
        v52 = vmul_n_f32(v50, v90);
        if (qword_10047ADB8 != -1)
        {
          swift_once(&qword_10047ADB8, sub_100195628);
          v51 = v90;
        }
        v53 = vmul_n_f32(vsub_f32(vadd_f32(v22, (float32x2_t)qword_1004AF8A0), v1[10]), v51);
        v1[12] = v53;
        v87 = vadd_f32(vsub_f32(v50, v52), v53);
        objc_msgSend(v23, "bounds", *(_OWORD *)&v83);
        v54 = CGRectGetHeight(v99) * v90;
        v55 = fabsf(v87.f32[1] + v87.f32[1]);
        objc_msgSend(v23, "bounds");
        if (v54 - CGRectGetHeight(v100) < v55)
        {
          objc_msgSend(v23, "bounds");
          v56 = CGRectGetHeight(v101) + v55;
          objc_msgSend(v23, "bounds");
          v57 = v56 / CGRectGetHeight(v102);
          v90 = v57;
          v98[0] = v57;
        }
        v58 = (void *)objc_opt_self(UIView);
        v59 = swift_allocObject(&unk_10043ECD8, 40, 7);
        *(_QWORD *)(v59 + 16) = v1;
        *(float *)(v59 + 24) = v90;
        *(float32x2_t *)(v59 + 32) = v87;
        v96 = sub_10001A858;
        v97 = v59;
        aBlock = _NSConcreteStackBlock;
        v93 = 1107296256;
        v94 = sub_10003ECA0;
        v95 = &unk_10043ECF0;
        v60 = _Block_copy(&aBlock);
        v61 = v97;
        swift_retain(v1);
        swift_release(v61);
        objc_msgSend(v58, "animateWithDuration:delay:options:animations:completion:", 0, v60, 0, 0.3, 0.0);
        _Block_release(v60);
        v62 = static CGPoint.- prefix(_:)(objc_msgSend(v23, "frame"));
        v64 = v63;
        objc_msgSend(v23, "frame");
        v66 = v62 / v65;
        objc_msgSend(v23, "frame");
        v68 = v64 / v67;
        objc_msgSend(v23, "bounds");
        v70 = v69;
        v72 = v71;
        swift_beginAccess(v98, v91, 0, 0);
        v73 = CGSize.divide(by:)(v98[0], v70, v72);
        v75 = v74;
        objc_msgSend(v23, "bounds");
        v76 = v66 * CGRectGetWidth(v103);
        objc_msgSend(v23, "bounds");
        v77 = v68 * CGRectGetHeight(v104);
        v78 = v1[22];
        v79 = *(uint64_t (**)(void ***))(**(_QWORD **)&v78 + 400);
        swift_retain(*(_QWORD *)&v78);
        v80 = (void (*)(void ***, _QWORD))v79(&aBlock);
        *(double *)(v81 + 8) = v76;
        *(double *)(v81 + 16) = v77;
        *(double *)(v81 + 24) = v73;
        *(_QWORD *)(v81 + 32) = v75;
        *(_BYTE *)(v81 + 40) = 0;
        v80(&aBlock, 0);
        swift_release(*(_QWORD *)&v78);
        v82 = *(id *)&v1[13];
        sub_1001CA3E8(0, 0.3);

        v24 = v16;
        v16 = v17;
      }
      else
      {
        v19 = (uint64_t (*)(uint64_t))v17;
      }

LABEL_5:
      v7 = v1[22];
      v8 = *(void (**)(void ***__return_ptr, uint64_t))(**(_QWORD **)&v7 + 144);
      v9 = swift_retain(*(_QWORD *)&v7);
      v8(&aBlock, v9);
      swift_release(*(_QWORD *)&v7);
      __asm { BR              X10 }
    }

  }
}

void sub_100019774(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t (*v20)(double, double);
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(_QWORD *__return_ptr, uint64_t);
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t (*v31)(double, double);
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _QWORD v36[7];
  uint64_t v37;

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 152);
  v7 = swift_retain(v6);
  StateValue.wrappedValue.getter(v36, v7);
  swift_release(v6);
  if ((v36[0] & 0x100000000) == 0)
  {
    v8 = *(_QWORD *)(v3 + 144);
    v9 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v8 + 144);
    v10 = swift_retain(v8);
    v9(v36, v10);
    swift_release(v8);
    v11 = v36[0];
    v12 = v36[1];
    v13 = v36[2];
    v37 = v36[0];
    swift_bridgeObjectRetain(v36[0]);
    v14 = sub_10000EDC8(&qword_10047C018);
    v15 = sub_10000EDC8(&qword_10047C020);
    swift_dynamicCast(v36, &v37, v14, v15, 7);
    v16 = v36[0];
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v11);
    if ((unint64_t)v16 >> 62)
      goto LABEL_19;
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v16);
    for (; v17; v17 = _CocoaArrayWrapper.endIndex.getter(v35))
    {
      if ((v16 & 0xC000000000000001) != 0)
        v18 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
      else
        v18 = *(id *)(v16 + 32);
      v19 = v18;
      v20 = (uint64_t (*)(double, double))(*(uint64_t (**)(void))((swift_isaMask & *v18) + 0x118))();
      v22 = v21;
      v23 = v20(a1, a2);
      swift_release(v22);
      if ((v23 & 1) != 0)
      {
LABEL_7:
        swift_bridgeObjectRelease_n(v16, 2);
        *(double *)(v3 + 112) = a1;
        *(double *)(v3 + 120) = a2;
        v24 = *(_QWORD *)(v3 + 176);
        v25 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v24 + 144);
        v26 = swift_retain(v24);
        v25(v36, v26);
        swift_release(v24);
        __asm { BR              X10 }
      }

      if (v17 == 1)
        break;
      v27 = 5;
      while (1)
      {
        v28 = (v16 & 0xC000000000000001) != 0
            ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v27 - 4, v16)
            : *(id *)(v16 + 8 * v27);
        v29 = v28;
        v30 = v27 - 3;
        if (__OFADD__(v27 - 4, 1))
          break;
        v31 = (uint64_t (*)(double, double))(*(uint64_t (**)(void))((swift_isaMask & *v28) + 0x118))();
        v33 = v32;
        v34 = v31(a1, a2);
        swift_release(v33);
        if ((v34 & 1) != 0)
          goto LABEL_7;

        ++v27;
        if (v30 == v17)
          goto LABEL_16;
      }
      __break(1u);
LABEL_19:
      v35 = v16 < 0 ? v16 : v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
    }
LABEL_16:
    swift_bridgeObjectRelease_n(v16, 2);
  }
}

void sub_100019BBC(double a1, double a2)
{
  uint64_t v2;
  float32x2_t *v3;
  uint64_t v6;
  void (*v7)(_QWORD *__return_ptr, __n128);
  __n128 v8;
  float32x2_t v9;
  uint64_t (*v10)(__n128);
  __n128 v11;
  uint64_t v12;
  void (*v13)(double (*)(uint64_t), float32x2_t *, __n128);
  __n128 v14;
  _QWORD v15[6];

  v3 = (float32x2_t *)v2;
  *(double *)(v2 + 112) = a1;
  *(double *)(v2 + 120) = a2;
  v6 = *(_QWORD *)(v2 + 176);
  v7 = *(void (**)(_QWORD *__return_ptr, __n128))(*(_QWORD *)v6 + 144);
  v8 = swift_retain(v6);
  v7(v15, v8);
  swift_release(v6);
  if (LOBYTE(v15[0]) == 2)
  {
    v3[10] = vadd_f32(COERCE_FLOAT32X2_T(SIMD2<>.init(_:)(a1, a2)), v3[12]);
    v3[11].i32[0] = 1106247680;
    v9 = v3[16];
    v10 = *(uint64_t (**)(__n128))(**(_QWORD **)&v9 + 200);
    v11 = swift_retain(*(_QWORD *)&v9);
    v12 = v10(v11);
    swift_release(*(_QWORD *)&v9);
    v13 = *(void (**)(double (*)(uint64_t), float32x2_t *, __n128))(*(_QWORD *)v12 + 280);
    v14 = swift_retain(v3);
    v13(sub_10001A7B8, v3, v14);
    swift_release(v12);
    swift_release(v3);
  }
}

void sub_100019CA4(double a1, double a2)
{
  uint64_t v2;
  float32x2_t *v3;
  uint64_t v6;
  void (*v7)(uint64_t *__return_ptr, uint64_t);
  uint64_t v8;
  float32x2_t v9;
  void (*v10)(uint64_t *__return_ptr, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  float32x2_t v23;
  __int32 v24;
  float32x2_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x2_t v30;
  void (*v31)(uint64_t *__return_ptr, uint64_t);
  uint64_t v32;
  float32x2_t v33;
  uint64_t (*v34)(uint64_t *);
  _BYTE *v35;
  void (*v36)(uint64_t *, _QWORD);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = (float32x2_t *)v2;
  *(double *)(v2 + 112) = a1;
  *(double *)(v2 + 120) = a2;
  v6 = *(_QWORD *)(v2 + 176);
  v7 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 144);
  v8 = swift_retain(v6);
  v7(&v37, v8);
  swift_release(v6);
  if (v37 - 1 <= 1)
  {
    v3[10] = vadd_f32(COERCE_FLOAT32X2_T(SIMD2<>.init(_:)(a1, a2)), v3[12]);
    v9 = v3[16];
    v10 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)&v9 + 144);
    v11 = swift_retain(*(_QWORD *)&v9);
    v10(&v37, v11);
    swift_release(*(_QWORD *)&v9);
    v13 = v37;
    v12 = v38;
    v14 = v39;
    v15 = v40;
    v16 = v41;
    v17 = *(_QWORD *)(v38 + 16);
    if (v17)
    {
      v18 = sub_1000C8204(7u);
      if ((v19 & 1) != 0)
        v17 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v18);
      else
        v17 = 0;
    }
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
    }
    else
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
      v37 = v12;
      sub_1000BC7CC(v20, 7u, isUniquelyReferenced_nonNull_native);
      v22 = v37;
      swift_bridgeObjectRelease(0x8000000000000000);
      v23 = v3[10];
      v24 = v3[11].i32[0];
      v25 = v3[16];
      v26 = *(uint64_t (**)(uint64_t))(**(_QWORD **)&v25 + 200);
      v27 = swift_retain(*(_QWORD *)&v25);
      v28 = v26(v27);
      swift_release(*(_QWORD *)&v25);
      v29 = swift_allocObject(&unk_10043EC88, 72, 7);
      *(_QWORD *)(v29 + 16) = v13;
      *(_QWORD *)(v29 + 24) = v22;
      *(_QWORD *)(v29 + 32) = v14;
      *(float32x2_t *)(v29 + 40) = v23;
      *(_DWORD *)(v29 + 48) = v24;
      *(_QWORD *)(v29 + 56) = v15;
      *(_QWORD *)(v29 + 64) = v16;
      (*(void (**)(_QWORD *(*)(uint64_t *), uint64_t))(*(_QWORD *)v28 + 280))(sub_10001A75C, v29);
      swift_release(v28);
      swift_release(v29);
      v30 = v3[22];
      v31 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)&v30 + 144);
      v32 = swift_retain(*(_QWORD *)&v30);
      v31(&v37, v32);
      swift_release(*(_QWORD *)&v30);
      LODWORD(v31) = v37;
      v33 = v3[22];
      v34 = *(uint64_t (**)(uint64_t *))(**(_QWORD **)&v33 + 400);
      swift_retain(*(_QWORD *)&v33);
      v36 = (void (*)(uint64_t *, _QWORD))v34(&v37);
      if ((_DWORD)v31 == 2)
        *v35 = 3;
      else
        *v35 = 0;
      v36(&v37, 0);
      swift_release(*(_QWORD *)&v33);
    }
  }
}

_QWORD *sub_100019ED4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *a1;
  v5 = a1[1];
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  a1[6] = *(_QWORD *)(a2 + 48);
  return sub_10001A774((_QWORD *)a2);
}

id sub_100019F34(uint64_t a1, float a2, double a3)
{
  void *v3;
  CGFloat tx;
  CGFloat ty;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v11;
  __int128 v12;
  CGAffineTransform v13;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v3 = *(void **)(a1 + 64);
  CGAffineTransformMakeScale(&t1, a2, a2);
  v11 = *(_OWORD *)&t1.c;
  v12 = *(_OWORD *)&t1.a;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, *(float *)&a3, *((float *)&a3 + 1));
  v6 = *(_OWORD *)&t1.a;
  v7 = *(_OWORD *)&t1.c;
  v8 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v12;
  *(_OWORD *)&t1.c = v11;
  t1.tx = tx;
  t1.ty = ty;
  *(_OWORD *)&t2.a = v6;
  *(_OWORD *)&t2.c = v7;
  *(_OWORD *)&t2.tx = v8;
  CGAffineTransformConcat(&v13, &t1, &t2);
  t1 = v13;
  return objc_msgSend(v3, "setTransform:", &t1);
}

void sub_100019FF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void ***);
  void (*v4)(void ***, _QWORD);
  _BYTE *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void ***);
  void (*v11)(void ***, _QWORD);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  void **v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  void *v24;
  uint64_t v25;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(uint64_t (**)(void ***))(*(_QWORD *)v2 + 400);
  swift_retain(v2);
  v4 = (void (*)(void ***, _QWORD))v3(&v20);
  *v5 = 0;
  v4(&v20, 0);
  swift_release(v2);
  v6 = (void *)objc_opt_self(UIView);
  v24 = sub_10001A880;
  v25 = v1;
  v20 = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_10003ECA0;
  v23 = &unk_10043ED18;
  v7 = _Block_copy(&v20);
  v8 = v25;
  swift_retain(v1);
  swift_release(v8);
  objc_msgSend(v6, "animateWithDuration:delay:options:animations:completion:", 0, v7, 0, 0.3, 0.0);
  _Block_release(v7);
  v9 = *(_QWORD *)(v1 + 176);
  v10 = *(uint64_t (**)(void ***))(*(_QWORD *)v9 + 400);
  swift_retain(v9);
  v11 = (void (*)(void ***, _QWORD))v10(&v20);
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_BYTE *)(v12 + 40) = 1;
  v11(&v20, 0);
  swift_release(v9);
  v13 = *(void **)(v1 + 104);
  v14 = swift_allocObject(&unk_10043ED50, 33, 7);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = 0x3FF0000000000000;
  *(_BYTE *)(v14 + 32) = 1;
  v15 = objc_allocWithZone((Class)UIViewPropertyAnimator);
  v24 = sub_10001A8AC;
  v25 = v14;
  v20 = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_10003ECA0;
  v23 = &unk_10043ED68;
  v16 = _Block_copy(&v20);
  v17 = v25;
  v18 = v13;
  swift_release(v17);
  v19 = objc_msgSend(v15, "initWithDuration:dampingRatio:animations:", v16, 0.3, 1.0);
  _Block_release(v16);
  objc_msgSend(v19, "setInterruptible:", 0);
  objc_msgSend(v19, "startAnimation");

  if (qword_10047A938 != -1)
    swift_once(&qword_10047A938, sub_100083764);
  sub_1000833A0(7);
}

id sub_10001A254(uint64_t a1)
{
  void *v1;
  CGAffineTransform v3;

  v1 = *(void **)(a1 + 64);
  CGAffineTransformMakeScale(&v3, 1.0, 1.0);
  return objc_msgSend(v1, "setTransform:", &v3);
}

uint64_t sub_10001A2AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 144));
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(*(_QWORD *)(v0 + 168));
  return swift_release(*(_QWORD *)(v0 + 176));
}

uint64_t sub_10001A308()
{
  uint64_t v0;

  v0 = StateObserver.deinit();

  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 144));
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(*(_QWORD *)(v0 + 168));
  swift_release(*(_QWORD *)(v0 + 176));
  return v0;
}

uint64_t sub_10001A37C()
{
  uint64_t v0;

  v0 = sub_10001A308();
  return swift_deallocClassInstance(v0, 184, 7);
}

uint64_t type metadata accessor for ActionController(uint64_t a1)
{
  uint64_t result;

  result = qword_10047BEA8;
  if (!qword_10047BEA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActionController);
  return result;
}

uint64_t sub_10001A3D4(uint64_t a1)
{
  _QWORD v2[13];

  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = &unk_1003B10E8;
  v2[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[5] = &unk_1003B1100;
  v2[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[12] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 256, 13, v2, a1 + 208);
}

uint64_t sub_10001A458@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Contexts.UIKit.init()();
  *a1 = result;
  return result;
}

uint64_t sub_10001A47C(void *a1, void *a2, void *a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, __n128);
  __n128 v39;
  uint64_t v40;
  id v41;
  char *v42;
  id v43;
  uint64_t v44;
  char *v45;
  char v47[24];
  void *v48;
  void *v49;

  v4 = v3;
  v8 = *v3;
  v3[10] = 0;
  *((_DWORD *)v3 + 22) = 1106247680;
  v3[12] = 0;
  v3[14] = 0;
  v3[15] = 0;
  KeyPath = swift_getKeyPath(&unk_1003B1128);
  v10 = sub_10000EDC8((uint64_t *)&unk_1004873C0);
  v11 = qword_10047AD88;
  swift_retain();
  if (v11 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v12 = qword_1004AF890;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 272);
  v14 = swift_retain();
  v4[16] = v13(KeyPath, v12, v14);
  v15 = swift_getKeyPath(&unk_1003B1150);
  v16 = sub_10000EDC8(&qword_10047BBA0);
  v17 = qword_1004AF890;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v16 + 272);
  v19 = swift_retain();
  v4[17] = v18(v15, v17, v19);
  v20 = swift_getKeyPath(&unk_1003B1178);
  v21 = sub_10000EDC8(&qword_100481BA0);
  v22 = qword_1004AF890;
  v23 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v21 + 272);
  v24 = swift_retain();
  v4[18] = v23(v20, v22, v24);
  v25 = sub_10000EDC8(&qword_10047E5E0);
  v26 = swift_getKeyPath(&unk_1003B11A0);
  v27 = qword_1004AF890;
  v28 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v25 + 272);
  v29 = swift_retain();
  v4[19] = v28(v26, v27, v29);
  v30 = sub_10000EDC8(&qword_10047BBA8);
  v31 = swift_getKeyPath(&unk_1003B11C8);
  v32 = qword_1004AF890;
  v33 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v30 + 272);
  v34 = swift_retain();
  v4[20] = v33(v31, v32, v34);
  v35 = sub_10000EDC8(&qword_10047ECF0);
  v36 = swift_getKeyPath(&unk_1003B11F0);
  v37 = qword_1004AF890;
  v38 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v35 + 272);
  v39 = swift_retain();
  v4[21] = v38(v36, v37, v39);
  sub_10000EDC8(&qword_10047C010);
  v40 = swift_getKeyPath(&unk_1003B1218);
  v4[22] = MutableStateValue.__allocating_init(_:_:)(v40, v8);
  v4[8] = a1;
  v4[9] = a2;
  v4[13] = a3;
  v41 = a1;
  v42 = a2;
  v43 = a3;
  swift_release();
  v48 = &type metadata for Configurations.Default;
  v49 = &protocol witness table for Configurations.Default;
  v44 = StateObserver.init(configuration:)(v47);
  v45 = &v42[OBJC_IVAR____TtC7Measure10ActionView_delegate];
  *((_QWORD *)v45 + 1) = &off_10043EC58;
  swift_unknownObjectWeakAssign(v45, v44);
  return v44;
}

_QWORD *sub_10001A75C(uint64_t *a1)
{
  uint64_t v1;

  return sub_100019ED4(a1, v1 + 16);
}

_QWORD *sub_10001A774(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  swift_bridgeObjectRetain(*a1);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

double sub_10001A7B8(uint64_t a1)
{
  uint64_t v1;
  double result;
  int v3;

  result = *(double *)(v1 + 80);
  v3 = *(_DWORD *)(v1 + 88);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t sub_10001A7D0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return swift_deallocObject(v0, 72, 7);
}

void sub_10001A804(_BYTE *a1)
{
  uint64_t v1;

  sub_100019054(a1, v1);
}

void sub_10001A810(unint64_t a1)
{
  unint64_t v1;

  v1 = a1 >> 62;
  if (!(a1 >> 62))
    goto LABEL_5;
  if ((_DWORD)v1 == 2 || (_DWORD)v1 == 1)
  {
    a1 &= 0x3FFFFFFFFFFFFFFFuLL;
LABEL_5:

  }
}

uint64_t sub_10001A834()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

id sub_10001A858()
{
  uint64_t v0;

  return sub_100019F34(*(_QWORD *)(v0 + 16), *(float *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_10001A868(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001A878(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_10001A880()
{
  uint64_t v0;

  return sub_10001A254(v0);
}

uint64_t sub_10001A888()
{
  uint64_t v0;

  return swift_deallocObject(v0, 33, 7);
}

void sub_10001A8AC()
{
  uint64_t v0;

  sub_1001CDB4C(*(char **)(v0 + 16), *(_BYTE *)(v0 + 32), *(double *)(v0 + 24));
}

void sub_10001A954(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  Class isa;
  uint64_t v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t (*v15)(double, double);
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  objc_super v19;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v3);
  sub_10001AD70();
  sub_10001ADAC();
  isa = Set._bridgeToObjectiveC()().super.isa;
  v19.receiver = v3;
  v19.super_class = ObjectType;
  objc_msgSendSuper2(&v19, "touchesBegan:withEvent:", isa, a2);

  v8 = swift_bridgeObjectRetain(a1);
  v9 = (void *)sub_10008BF70(v8);
  swift_bridgeObjectRelease(a1);
  if (v9)
  {
    objc_msgSend(v9, "locationInView:", v3);
    v11 = v10;
    v13 = v12;
    v15 = *(uint64_t (**)(double, double))&v3[OBJC_IVAR____TtC7Measure10ActionView_shouldPreventManipulatingPoint];
    v14 = *(_QWORD *)&v3[OBJC_IVAR____TtC7Measure10ActionView_shouldPreventManipulatingPoint + 8];
    swift_retain(v14);
    LOBYTE(v15) = v15(v11, v13);
    swift_release(v14);
    if ((v15 & 1) != 0
      || (Strong = swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC7Measure10ActionView_delegate], v16)) == 0)
    {

    }
    else
    {
      v18 = Strong;
      sub_100019774(v11, v13);

      swift_unknownObjectRelease(v18);
    }
  }
}

uint64_t sub_10001AB20(void *a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5, void (*a6)(double, double))
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  id v15;

  v11 = sub_10001AD70();
  v12 = sub_10001ADAC();
  v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(a3, v11, v12);
  v14 = a4;
  v15 = a1;
  sub_10001ABC8(v13, (uint64_t)a4, a5, a6);

  return swift_bridgeObjectRelease(v13);
}

void sub_10001ABC8(uint64_t a1, uint64_t a2, SEL *a3, void (*a4)(double, double))
{
  char *v4;
  objc_class *ObjectType;
  Class isa;
  uint64_t v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  objc_super v20;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  sub_10001AD70();
  sub_10001ADAC();
  isa = Set._bridgeToObjectiveC()().super.isa;
  v20.receiver = v4;
  v20.super_class = ObjectType;
  objc_msgSendSuper2(&v20, *a3, isa, a2);

  v11 = swift_bridgeObjectRetain(a1);
  v12 = (void *)sub_10008BF70(v11);
  swift_bridgeObjectRelease(a1);
  if (v12)
  {
    objc_msgSend(v12, "locationInView:", v4);
    v14 = v13;
    v16 = v15;
    Strong = swift_unknownObjectWeakLoadStrong(&v4[OBJC_IVAR____TtC7Measure10ActionView_delegate], v17);
    if (Strong)
    {
      v19 = Strong;
      a4(v14, v16);

      swift_unknownObjectRelease(v19);
    }
    else
    {

    }
  }
}

uint64_t type metadata accessor for ActionView()
{
  return objc_opt_self(_TtC7Measure10ActionView);
}

unint64_t sub_10001AD70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047C060;
  if (!qword_10047C060)
  {
    v1 = objc_opt_self(UITouch);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10047C060);
  }
  return result;
}

unint64_t sub_10001ADAC()
{
  unint64_t result;
  unint64_t v1;

  result = qword_10047C068;
  if (!qword_10047C068)
  {
    v1 = sub_10001AD70();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10047C068);
  }
  return result;
}

uint64_t sub_10001ADF4(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

unint64_t sub_10001AE1C()
{
  __int128 *v0;
  char v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[704];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_10001C034(v0, &v27);
  v1 = v37;
  if (v37 < 0)
  {
    v37 &= ~0x8000000000000000;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    v16 = v30;
    v17 = v31;
    v18 = v32;
    v21 = v33;
    v22 = v34;
    v23 = v35;
    v24 = v36;
    v9 = v39;
    v25 = v38;
    v19 = sub_10000EDC8(&qword_10047C070);
    inited = swift_initStackObject(v19, v26);
    *(_OWORD *)(inited + 16) = xmmword_1003B1260;
    *(_QWORD *)(inited + 32) = 0x547972616D6D7573;
    *(_QWORD *)(inited + 40) = 0xEB00000000657079;
    *(_QWORD *)(inited + 48) = v13;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = &off_10043EDB8;
    *(_QWORD *)(inited + 56) = *((_QWORD *)&v13 + 1);
    *(_QWORD *)(inited + 88) = 0xD000000000000010;
    *(_QWORD *)(inited + 96) = 0x80000001003D8510;
    *(_QWORD *)(inited + 128) = &type metadata for Int;
    *(_QWORD *)(inited + 136) = &off_10043EDC8;
    *(_QWORD *)(inited + 104) = v14;
    *(_QWORD *)(inited + 144) = 0x6E756F436F646E75;
    *(_QWORD *)(inited + 152) = 0xE900000000000074;
    *(_QWORD *)(inited + 160) = v15;
    *(_QWORD *)(inited + 184) = &type metadata for Int;
    *(_QWORD *)(inited + 192) = &off_10043EDC8;
    *(_QWORD *)(inited + 200) = 0x656D7473756A6461;
    *(_QWORD *)(inited + 208) = 0xEF746E756F43746ELL;
    *(_QWORD *)(inited + 216) = v16;
    *(_QWORD *)(inited + 240) = &type metadata for Int;
    *(_QWORD *)(inited + 248) = &off_10043EDC8;
    *(_QWORD *)(inited + 256) = 0xD000000000000013;
    *(_QWORD *)(inited + 264) = 0x80000001003D8530;
    *(_QWORD *)(inited + 296) = &type metadata for Int;
    *(_QWORD *)(inited + 304) = &off_10043EDC8;
    *(_QWORD *)(inited + 272) = v17;
    *(_QWORD *)(inited + 312) = 0xD000000000000017;
    *(_QWORD *)(inited + 320) = 0x80000001003D8550;
    *(_QWORD *)(inited + 352) = &type metadata for Int;
    *(_QWORD *)(inited + 360) = &off_10043EDC8;
    *(_QWORD *)(inited + 328) = v18;
    *(_QWORD *)(inited + 368) = 0x6F43736564697567;
    *(_QWORD *)(inited + 376) = 0xEB00000000746E75;
    *(_QWORD *)(inited + 408) = &type metadata for Int;
    *(_QWORD *)(inited + 416) = &off_10043EDC8;
    *(_QWORD *)(inited + 384) = v21;
    *(_QWORD *)(inited + 424) = 0xD000000000000012;
    *(_QWORD *)(inited + 432) = 0x80000001003D8570;
    *(_QWORD *)(inited + 464) = &type metadata for Int;
    *(_QWORD *)(inited + 472) = &off_10043EDC8;
    *(_QWORD *)(inited + 440) = v22;
    *(_QWORD *)(inited + 480) = 0xD000000000000011;
    *(_QWORD *)(inited + 488) = 0x80000001003D8590;
    *(_QWORD *)(inited + 520) = &type metadata for Int;
    *(_QWORD *)(inited + 528) = &off_10043EDC8;
    *(_QWORD *)(inited + 496) = v23;
    *(_QWORD *)(inited + 536) = 0xD000000000000018;
    *(_QWORD *)(inited + 544) = 0x80000001003D85B0;
    *(_QWORD *)(inited + 576) = &type metadata for Int;
    *(_QWORD *)(inited + 584) = &off_10043EDC8;
    *(_QWORD *)(inited + 552) = v24;
    *(_QWORD *)(inited + 592) = 0xD00000000000001BLL;
    *(_QWORD *)(inited + 600) = 0x80000001003D85D0;
    *(_QWORD *)(inited + 632) = &type metadata for Bool;
    *(_QWORD *)(inited + 640) = &off_10043EDD0;
    *(_BYTE *)(inited + 608) = v1 & 1;
    strcpy((char *)(inited + 648), "trackingState");
    *(_WORD *)(inited + 662) = -4864;
    *(_QWORD *)(inited + 688) = &type metadata for String;
    *(_QWORD *)(inited + 696) = &off_10043EDB8;
    *(_QWORD *)(inited + 664) = v25;
    *(_QWORD *)(inited + 672) = v9;
    v12 = *((_QWORD *)&v13 + 1);
  }
  else
  {
    v2 = v27;
    v3 = v28;
    v4 = v29;
    v6 = v30;
    v5 = v31;
    v8 = v32;
    v7 = v33;
    v9 = v34;
    v10 = sub_10000EDC8(&qword_10047C070);
    inited = swift_allocObject(v10, 424, 7);
    *(_OWORD *)(inited + 16) = xmmword_1003B1270;
    *(_QWORD *)(inited + 32) = 0x547972616D6D7573;
    *(_QWORD *)(inited + 40) = 0xEB00000000657079;
    *(_QWORD *)(inited + 48) = v2;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = &off_10043EDB8;
    *(_QWORD *)(inited + 56) = *((_QWORD *)&v2 + 1);
    *(_QWORD *)(inited + 88) = 0xD000000000000010;
    *(_QWORD *)(inited + 96) = 0x80000001003D8510;
    *(_QWORD *)(inited + 128) = &type metadata for Int;
    *(_QWORD *)(inited + 136) = &off_10043EDC8;
    *(_QWORD *)(inited + 104) = v3;
    *(_QWORD *)(inited + 144) = 0x6E756F436F646E75;
    *(_QWORD *)(inited + 152) = 0xE900000000000074;
    *(_QWORD *)(inited + 160) = v4;
    *(_QWORD *)(inited + 184) = &type metadata for Int;
    *(_QWORD *)(inited + 192) = &off_10043EDC8;
    *(_QWORD *)(inited + 200) = 0x656D7473756A6461;
    *(_QWORD *)(inited + 208) = 0xEF746E756F43746ELL;
    *(_QWORD *)(inited + 216) = v6;
    *(_QWORD *)(inited + 240) = &type metadata for Int;
    *(_QWORD *)(inited + 248) = &off_10043EDC8;
    *(_QWORD *)(inited + 256) = 0xD000000000000013;
    *(_QWORD *)(inited + 264) = 0x80000001003D8530;
    *(_QWORD *)(inited + 296) = &type metadata for Int;
    *(_QWORD *)(inited + 304) = &off_10043EDC8;
    *(_QWORD *)(inited + 272) = v5;
    *(_QWORD *)(inited + 312) = 0xD000000000000017;
    *(_QWORD *)(inited + 320) = 0x80000001003D8550;
    *(_QWORD *)(inited + 352) = &type metadata for Int;
    *(_QWORD *)(inited + 360) = &off_10043EDC8;
    *(_QWORD *)(inited + 328) = v8;
    strcpy((char *)(inited + 368), "trackingState");
    *(_WORD *)(inited + 382) = -4864;
    *(_QWORD *)(inited + 384) = v7;
    *(_QWORD *)(inited + 408) = &type metadata for String;
    *(_QWORD *)(inited + 416) = &off_10043EDB8;
    *(_QWORD *)(inited + 392) = v9;
    v12 = *((_QWORD *)&v2 + 1);
  }
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v9);
  return sub_1000C73B4(inited);
}

unint64_t sub_10001B270()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[368];
  _BYTE v37[160];

  sub_10001BFDC(v0, (uint64_t)v37);
  v1 = sub_10001C014((uint64_t)v37);
  v2 = nullsub_1(v37);
  v3 = *(_QWORD *)v2;
  if (v1 == 1)
  {
    v5 = *(_QWORD *)(v2 + 8);
    v4 = *(_QWORD *)(v2 + 16);
    v7 = *(_QWORD *)(v2 + 24);
    v6 = *(_QWORD *)(v2 + 32);
    v8 = *(_QWORD *)(v2 + 40);
    v9 = *(_QWORD *)(v2 + 48);
    v10 = *(_QWORD *)(v2 + 56);
    v12 = *(_DWORD *)(v2 + 64);
    v11 = *(_DWORD *)(v2 + 68);
    v14 = *(_DWORD *)(v2 + 72);
    v13 = *(_DWORD *)(v2 + 76);
    v28 = *(_QWORD *)(v2 + 88);
    v29 = *(_QWORD *)(v2 + 80);
    v30 = *(_QWORD *)(v2 + 104);
    v31 = *(_QWORD *)(v2 + 96);
    v32 = *(_QWORD *)(v2 + 120);
    v33 = *(_QWORD *)(v2 + 112);
    v34 = *(_QWORD *)(v2 + 136);
    v35 = *(_QWORD *)(v2 + 128);
    v15 = sub_10000EDC8(&qword_10047C070);
    v16 = swift_allocObject(v15, 760, 7);
    *(_OWORD *)(v16 + 16) = xmmword_1003B1290;
    *(_QWORD *)(v16 + 32) = 0x6874676E656CLL;
    *(_QWORD *)(v16 + 40) = 0xE600000000000000;
    *(_QWORD *)(v16 + 72) = &type metadata for Int;
    *(_QWORD *)(v16 + 80) = &off_10043EDC8;
    *(_QWORD *)(v16 + 48) = v3;
    strcpy((char *)(v16 + 88), "viewDistance");
    *(_BYTE *)(v16 + 101) = 0;
    *(_WORD *)(v16 + 102) = -5120;
    *(_QWORD *)(v16 + 128) = &type metadata for Int;
    *(_QWORD *)(v16 + 136) = &off_10043EDC8;
    *(_QWORD *)(v16 + 104) = v5;
    *(_QWORD *)(v16 + 144) = 0xD000000000000011;
    *(_QWORD *)(v16 + 152) = 0x80000001003D83F0;
    *(_QWORD *)(v16 + 184) = &type metadata for String;
    *(_QWORD *)(v16 + 192) = &off_10043EDB8;
    *(_QWORD *)(v16 + 160) = v4;
    *(_QWORD *)(v16 + 168) = v7;
    strcpy((char *)(v16 + 200), "point1SnapType");
    *(_BYTE *)(v16 + 215) = -18;
    *(_QWORD *)(v16 + 240) = &type metadata for String;
    *(_QWORD *)(v16 + 248) = &off_10043EDB8;
    *(_QWORD *)(v16 + 216) = v6;
    *(_QWORD *)(v16 + 224) = v8;
    strcpy((char *)(v16 + 256), "point2SnapType");
    *(_BYTE *)(v16 + 271) = -18;
    *(_QWORD *)(v16 + 296) = &type metadata for String;
    *(_QWORD *)(v16 + 304) = &off_10043EDB8;
    *(_QWORD *)(v16 + 272) = v9;
    *(_QWORD *)(v16 + 280) = v10;
    *(_QWORD *)(v16 + 312) = 0xD000000000000010;
    *(_QWORD *)(v16 + 320) = 0x80000001003D8410;
    *(_QWORD *)(v16 + 352) = &type metadata for Float;
    *(_QWORD *)(v16 + 360) = &off_10043EDC0;
    *(_DWORD *)(v16 + 328) = v12;
    *(_QWORD *)(v16 + 368) = 0xD000000000000010;
    *(_QWORD *)(v16 + 376) = 0x80000001003D8430;
    *(_QWORD *)(v16 + 408) = &type metadata for Float;
    *(_QWORD *)(v16 + 416) = &off_10043EDC0;
    *(_DWORD *)(v16 + 384) = v11;
    *(_QWORD *)(v16 + 424) = 0xD000000000000015;
    *(_QWORD *)(v16 + 432) = 0x80000001003D8450;
    *(_QWORD *)(v16 + 464) = &type metadata for Float;
    *(_QWORD *)(v16 + 472) = &off_10043EDC0;
    *(_DWORD *)(v16 + 440) = v14;
    *(_QWORD *)(v16 + 480) = 0xD000000000000015;
    *(_QWORD *)(v16 + 488) = 0x80000001003D8470;
    *(_QWORD *)(v16 + 520) = &type metadata for Float;
    *(_QWORD *)(v16 + 528) = &off_10043EDC0;
    *(_DWORD *)(v16 + 496) = v13;
    *(_QWORD *)(v16 + 536) = 0x6C5031746E696F70;
    *(_QWORD *)(v16 + 544) = 0xEF65707954656E61;
    *(_QWORD *)(v16 + 576) = &type metadata for String;
    *(_QWORD *)(v16 + 584) = &off_10043EDB8;
    *(_QWORD *)(v16 + 552) = v29;
    *(_QWORD *)(v16 + 560) = v28;
    *(_QWORD *)(v16 + 592) = 0x6C5032746E696F70;
    *(_QWORD *)(v16 + 600) = 0xEF65707954656E61;
    *(_QWORD *)(v16 + 632) = &type metadata for String;
    *(_QWORD *)(v16 + 640) = &off_10043EDB8;
    *(_QWORD *)(v16 + 608) = v31;
    *(_QWORD *)(v16 + 616) = v30;
    *(_QWORD *)(v16 + 648) = 0xD000000000000016;
    *(_QWORD *)(v16 + 656) = 0x80000001003D8490;
    *(_QWORD *)(v16 + 688) = &type metadata for String;
    *(_QWORD *)(v16 + 696) = &off_10043EDB8;
    *(_QWORD *)(v16 + 664) = v33;
    *(_QWORD *)(v16 + 672) = v32;
    *(_QWORD *)(v16 + 704) = 0xD000000000000016;
    *(_QWORD *)(v16 + 712) = 0x80000001003D84B0;
    *(_QWORD *)(v16 + 744) = &type metadata for String;
    *(_QWORD *)(v16 + 752) = &off_10043EDB8;
    *(_QWORD *)(v16 + 720) = v35;
    *(_QWORD *)(v16 + 728) = v34;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v34);
    v17 = v16;
  }
  else
  {
    v18 = *(_DWORD *)(v2 + 8);
    v19 = *(_QWORD *)(v2 + 16);
    v20 = *(_DWORD *)(v2 + 24);
    v22 = *(_QWORD *)(v2 + 32);
    v21 = *(_QWORD *)(v2 + 40);
    v24 = *(_QWORD *)(v2 + 48);
    v23 = *(_QWORD *)(v2 + 56);
    v25 = sub_10000EDC8(&qword_10047C070);
    inited = swift_initStackObject(v25, v36);
    *(_OWORD *)(inited + 16) = xmmword_1003B1280;
    *(_QWORD *)(inited + 32) = 1634038369;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    *(_QWORD *)(inited + 72) = &type metadata for Int;
    *(_QWORD *)(inited + 80) = &off_10043EDC8;
    *(_QWORD *)(inited + 48) = v3;
    *(_QWORD *)(inited + 88) = 0x6152746365707361;
    *(_QWORD *)(inited + 96) = 0xEB000000006F6974;
    *(_QWORD *)(inited + 128) = &type metadata for Float;
    *(_QWORD *)(inited + 136) = &off_10043EDC0;
    *(_DWORD *)(inited + 104) = v18;
    strcpy((char *)(inited + 144), "viewDistance");
    *(_BYTE *)(inited + 157) = 0;
    *(_WORD *)(inited + 158) = -5120;
    *(_QWORD *)(inited + 184) = &type metadata for Int;
    *(_QWORD *)(inited + 192) = &off_10043EDC8;
    *(_QWORD *)(inited + 160) = v19;
    *(_QWORD *)(inited + 200) = 0x6C676E4177656976;
    *(_QWORD *)(inited + 208) = 0xE900000000000065;
    *(_QWORD *)(inited + 240) = &type metadata for Float;
    *(_QWORD *)(inited + 248) = &off_10043EDC0;
    *(_DWORD *)(inited + 216) = v20;
    *(_QWORD *)(inited + 256) = 0x707954656E616C70;
    *(_QWORD *)(inited + 264) = 0xE900000000000065;
    *(_QWORD *)(inited + 296) = &type metadata for String;
    *(_QWORD *)(inited + 304) = &off_10043EDB8;
    *(_QWORD *)(inited + 272) = v22;
    *(_QWORD *)(inited + 280) = v21;
    *(_QWORD *)(inited + 312) = 0xD000000000000010;
    *(_QWORD *)(inited + 320) = 0x80000001003D84D0;
    *(_QWORD *)(inited + 352) = &type metadata for String;
    *(_QWORD *)(inited + 360) = &off_10043EDB8;
    *(_QWORD *)(inited + 328) = v24;
    *(_QWORD *)(inited + 336) = v23;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v23);
    v17 = inited;
  }
  return sub_1000C73B4(v17);
}

unint64_t sub_10001B710()
{
  __int128 *v0;
  char v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v13;
  _BYTE v14[4];
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;

  sub_10001C01C(v0, (uint64_t)v14);
  v1 = v14[0];
  v2 = v15;
  v3 = v16;
  v4 = v17;
  v5 = v18;
  v7 = v19;
  v6 = v20;
  v8 = v21;
  v9 = v22;
  v10 = sub_10000EDC8(&qword_10047C070);
  inited = swift_initStackObject(v10, &v13);
  *(_OWORD *)(inited + 16) = xmmword_1003B12A0;
  *(_QWORD *)(inited + 32) = 0x73736563637573;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_QWORD *)(inited + 80) = &off_10043EDD0;
  *(_BYTE *)(inited + 48) = v1;
  *(_QWORD *)(inited + 88) = 0x6E6F697461727564;
  *(_QWORD *)(inited + 96) = 0xE800000000000000;
  *(_QWORD *)(inited + 128) = &type metadata for Float;
  *(_QWORD *)(inited + 136) = &off_10043EDC0;
  *(_DWORD *)(inited + 104) = v2;
  strcpy((char *)(inited + 144), "durationShown");
  *(_WORD *)(inited + 158) = -4864;
  *(_QWORD *)(inited + 184) = &type metadata for Float;
  *(_QWORD *)(inited + 192) = &off_10043EDC0;
  *(_DWORD *)(inited + 160) = v3;
  strcpy((char *)(inited + 200), "cameraDistance");
  *(_BYTE *)(inited + 215) = -18;
  *(_QWORD *)(inited + 240) = &type metadata for Float;
  *(_QWORD *)(inited + 248) = &off_10043EDC0;
  *(_DWORD *)(inited + 216) = v4;
  *(_QWORD *)(inited + 256) = 0x6E416172656D6163;
  *(_QWORD *)(inited + 264) = 0xEB00000000656C67;
  *(_QWORD *)(inited + 296) = &type metadata for Float;
  *(_QWORD *)(inited + 304) = &off_10043EDC0;
  *(_DWORD *)(inited + 272) = v5;
  strcpy((char *)(inited + 312), "deviationLow");
  *(_BYTE *)(inited + 325) = 0;
  *(_WORD *)(inited + 326) = -5120;
  *(_QWORD *)(inited + 352) = &type metadata for Float;
  *(_QWORD *)(inited + 360) = &off_10043EDC0;
  *(_DWORD *)(inited + 328) = v7;
  strcpy((char *)(inited + 368), "deviationHigh");
  *(_WORD *)(inited + 382) = -4864;
  *(_QWORD *)(inited + 408) = &type metadata for Float;
  *(_QWORD *)(inited + 416) = &off_10043EDC0;
  *(_DWORD *)(inited + 384) = v6;
  *(_QWORD *)(inited + 424) = 0xD000000000000011;
  *(_QWORD *)(inited + 432) = 0x80000001003D84F0;
  *(_QWORD *)(inited + 464) = &type metadata for Float;
  *(_QWORD *)(inited + 472) = &off_10043EDC0;
  *(_DWORD *)(inited + 440) = v8;
  strcpy((char *)(inited + 480), "samplesCount");
  *(_BYTE *)(inited + 493) = 0;
  *(_WORD *)(inited + 494) = -5120;
  *(_QWORD *)(inited + 520) = &type metadata for Int;
  *(_QWORD *)(inited + 528) = &off_10043EDC8;
  *(_QWORD *)(inited + 496) = v9;
  return sub_1000C73B4(inited);
}

unint64_t sub_10001B914()
{
  uint64_t v0;
  unsigned __int16 v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t inited;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  uint64_t v37;
  _BYTE v39[368];
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned __int16 v54;

  sub_10001BFB4(v0, (uint64_t)&v40);
  v1 = v54;
  v2 = v54 >> 14;
  if (v2)
  {
    if (v2 != 1)
    {
      v54 &= 0x3FFFu;
      v31 = v40;
      v32 = v41;
      v33 = v42;
      v34 = v43;
      v35 = v44;
      v36 = v45;
      v37 = sub_10000EDC8(&qword_10047C070);
      inited = swift_initStackObject(v37, v39);
      *(_OWORD *)(inited + 16) = xmmword_1003B1280;
      *(_QWORD *)(inited + 32) = 0x6769654870616E73;
      *(_QWORD *)(inited + 40) = 0xEA00000000007468;
      *(_QWORD *)(inited + 72) = &type metadata for Float;
      *(_QWORD *)(inited + 80) = &off_10043EDC0;
      *(_DWORD *)(inited + 48) = v31;
      strcpy((char *)(inited + 88), "cameraDistance");
      *(_BYTE *)(inited + 103) = -18;
      *(_QWORD *)(inited + 128) = &type metadata for Float;
      *(_QWORD *)(inited + 136) = &off_10043EDC0;
      *(_DWORD *)(inited + 104) = v32;
      *(_QWORD *)(inited + 144) = 0x6E416172656D6163;
      *(_QWORD *)(inited + 152) = 0xEB00000000656C67;
      *(_QWORD *)(inited + 184) = &type metadata for Float;
      *(_QWORD *)(inited + 192) = &off_10043EDC0;
      *(_DWORD *)(inited + 160) = v33;
      strcpy((char *)(inited + 200), "snapDuration");
      *(_BYTE *)(inited + 213) = 0;
      *(_WORD *)(inited + 214) = -5120;
      *(_QWORD *)(inited + 240) = &type metadata for Float;
      *(_QWORD *)(inited + 248) = &off_10043EDC0;
      *(_DWORD *)(inited + 216) = v34;
      strcpy((char *)(inited + 256), "slideDistance");
      *(_WORD *)(inited + 270) = -4864;
      *(_QWORD *)(inited + 296) = &type metadata for Float;
      *(_QWORD *)(inited + 304) = &off_10043EDC0;
      *(_DWORD *)(inited + 272) = v35;
      *(_QWORD *)(inited + 312) = 0x6F50646563616C70;
      *(_QWORD *)(inited + 320) = 0xEB00000000746E69;
      *(_QWORD *)(inited + 352) = &type metadata for Bool;
      *(_QWORD *)(inited + 360) = &off_10043EDD0;
      *(_BYTE *)(inited + 328) = v36;
      return sub_1000C73B4(inited);
    }
    v54 &= 0x3FFFu;
    v3 = v40;
    v4 = v41;
    v5 = v42;
    v6 = v43;
    v7 = v44;
    v9 = v46;
    v8 = v47;
    v11 = v48;
    v10 = v49;
    v13 = v50;
    v12 = v51;
    v15 = v52;
    v14 = v53;
    v16 = sub_10000EDC8(&qword_10047C070);
    v17 = swift_allocObject(v16, 648, 7);
    *(_OWORD *)(v17 + 16) = xmmword_1003B12B0;
    *(_QWORD *)(v17 + 32) = 0x6874676E656CLL;
    *(_QWORD *)(v17 + 40) = 0xE600000000000000;
    *(_QWORD *)(v17 + 72) = &type metadata for Float;
    *(_QWORD *)(v17 + 80) = &off_10043EDC0;
    *(_DWORD *)(v17 + 48) = v3;
    strcpy((char *)(v17 + 88), "cameraDistance");
    *(_BYTE *)(v17 + 103) = -18;
    *(_QWORD *)(v17 + 128) = &type metadata for Float;
    *(_QWORD *)(v17 + 136) = &off_10043EDC0;
    *(_DWORD *)(v17 + 104) = v4;
    *(_QWORD *)(v17 + 144) = 0x6E416172656D6163;
    *(_QWORD *)(v17 + 152) = 0xEB00000000656C67;
    *(_QWORD *)(v17 + 184) = &type metadata for Float;
    *(_QWORD *)(v17 + 192) = &off_10043EDC0;
    *(_DWORD *)(v17 + 160) = v5;
    *(_QWORD *)(v17 + 200) = 0xD000000000000010;
    *(_QWORD *)(v17 + 208) = 0x80000001003D8390;
    *(_QWORD *)(v17 + 240) = &type metadata for Float;
    *(_QWORD *)(v17 + 248) = &off_10043EDC0;
    *(_DWORD *)(v17 + 216) = v6;
    *(_QWORD *)(v17 + 256) = 0xD000000000000010;
    *(_QWORD *)(v17 + 264) = 0x80000001003D83B0;
    *(_QWORD *)(v17 + 296) = &type metadata for Float;
    *(_QWORD *)(v17 + 304) = &off_10043EDC0;
    *(_DWORD *)(v17 + 272) = v7;
    *(_QWORD *)(v17 + 312) = 0x795441656E616C70;
    *(_QWORD *)(v17 + 320) = 0xEA00000000006570;
    *(_QWORD *)(v17 + 352) = &type metadata for String;
    *(_QWORD *)(v17 + 360) = &off_10043EDB8;
    *(_QWORD *)(v17 + 328) = v9;
    *(_QWORD *)(v17 + 336) = v8;
    *(_QWORD *)(v17 + 368) = 0x795442656E616C70;
    *(_QWORD *)(v17 + 376) = 0xEA00000000006570;
    *(_QWORD *)(v17 + 408) = &type metadata for String;
    *(_QWORD *)(v17 + 416) = &off_10043EDB8;
    *(_QWORD *)(v17 + 384) = v11;
    *(_QWORD *)(v17 + 392) = v10;
    strcpy((char *)(v17 + 424), "classification");
    *(_BYTE *)(v17 + 439) = -18;
    *(_QWORD *)(v17 + 464) = &type metadata for String;
    *(_QWORD *)(v17 + 472) = &off_10043EDB8;
    *(_QWORD *)(v17 + 440) = v13;
    *(_QWORD *)(v17 + 448) = v12;
    strcpy((char *)(v17 + 480), "snapDuration");
    *(_BYTE *)(v17 + 493) = 0;
    *(_WORD *)(v17 + 494) = -5120;
    *(_QWORD *)(v17 + 520) = &type metadata for Float;
    *(_QWORD *)(v17 + 528) = &off_10043EDC0;
    *(_DWORD *)(v17 + 496) = v15;
    strcpy((char *)(v17 + 536), "slideDistance");
    *(_WORD *)(v17 + 550) = -4864;
    *(_QWORD *)(v17 + 576) = &type metadata for Float;
    *(_QWORD *)(v17 + 584) = &off_10043EDC0;
    *(_DWORD *)(v17 + 552) = v14;
    *(_QWORD *)(v17 + 592) = 0x6F50646563616C70;
    *(_QWORD *)(v17 + 600) = 0xEB00000000746E69;
    *(_QWORD *)(v17 + 632) = &type metadata for Bool;
    *(_QWORD *)(v17 + 640) = &off_10043EDD0;
    *(_BYTE *)(v17 + 608) = v1 & 1;
  }
  else
  {
    v54 &= 0x3FFFu;
    v18 = v40;
    v19 = v41;
    v20 = v42;
    v21 = v43;
    v23 = v44;
    v22 = v45;
    v24 = v46;
    v8 = v47;
    v25 = v48;
    v10 = v49;
    v26 = v50;
    v12 = v51;
    v28 = v52;
    v27 = v53;
    v29 = sub_10000EDC8(&qword_10047C070);
    v17 = swift_allocObject(v29, 760, 7);
    *(_OWORD *)(v17 + 16) = xmmword_1003B1290;
    *(_QWORD *)(v17 + 32) = 0x6874676E656CLL;
    *(_QWORD *)(v17 + 40) = 0xE600000000000000;
    *(_QWORD *)(v17 + 72) = &type metadata for Float;
    *(_QWORD *)(v17 + 80) = &off_10043EDC0;
    *(_DWORD *)(v17 + 48) = v18;
    *(_QWORD *)(v17 + 88) = 0xD000000000000010;
    *(_QWORD *)(v17 + 96) = 0x80000001003D83D0;
    *(_QWORD *)(v17 + 128) = &type metadata for Float;
    *(_QWORD *)(v17 + 136) = &off_10043EDC0;
    *(_DWORD *)(v17 + 104) = v19;
    strcpy((char *)(v17 + 144), "cameraDistance");
    *(_BYTE *)(v17 + 159) = -18;
    *(_QWORD *)(v17 + 184) = &type metadata for Float;
    *(_QWORD *)(v17 + 192) = &off_10043EDC0;
    *(_DWORD *)(v17 + 160) = v20;
    *(_QWORD *)(v17 + 200) = 0x6E416172656D6163;
    *(_QWORD *)(v17 + 208) = 0xEB00000000656C67;
    *(_QWORD *)(v17 + 240) = &type metadata for Float;
    *(_QWORD *)(v17 + 248) = &off_10043EDC0;
    *(_DWORD *)(v17 + 216) = v21;
    *(_QWORD *)(v17 + 256) = 0xD000000000000010;
    *(_QWORD *)(v17 + 264) = 0x80000001003D8390;
    *(_QWORD *)(v17 + 296) = &type metadata for Float;
    *(_QWORD *)(v17 + 304) = &off_10043EDC0;
    *(_DWORD *)(v17 + 272) = v23;
    *(_QWORD *)(v17 + 312) = 0xD000000000000010;
    *(_QWORD *)(v17 + 320) = 0x80000001003D83B0;
    *(_QWORD *)(v17 + 352) = &type metadata for Float;
    *(_QWORD *)(v17 + 360) = &off_10043EDC0;
    *(_DWORD *)(v17 + 328) = v22;
    *(_QWORD *)(v17 + 368) = 0x795441656E616C70;
    *(_QWORD *)(v17 + 376) = 0xEA00000000006570;
    *(_QWORD *)(v17 + 408) = &type metadata for String;
    *(_QWORD *)(v17 + 416) = &off_10043EDB8;
    *(_QWORD *)(v17 + 384) = v24;
    *(_QWORD *)(v17 + 392) = v8;
    *(_QWORD *)(v17 + 424) = 0x795442656E616C70;
    *(_QWORD *)(v17 + 432) = 0xEA00000000006570;
    *(_QWORD *)(v17 + 464) = &type metadata for String;
    *(_QWORD *)(v17 + 472) = &off_10043EDB8;
    *(_QWORD *)(v17 + 440) = v25;
    *(_QWORD *)(v17 + 448) = v10;
    strcpy((char *)(v17 + 480), "classification");
    *(_BYTE *)(v17 + 495) = -18;
    *(_QWORD *)(v17 + 520) = &type metadata for String;
    *(_QWORD *)(v17 + 528) = &off_10043EDB8;
    *(_QWORD *)(v17 + 496) = v26;
    *(_QWORD *)(v17 + 504) = v12;
    strcpy((char *)(v17 + 536), "snapDuration");
    *(_BYTE *)(v17 + 549) = 0;
    *(_WORD *)(v17 + 550) = -5120;
    *(_QWORD *)(v17 + 576) = &type metadata for Float;
    *(_QWORD *)(v17 + 584) = &off_10043EDC0;
    *(_DWORD *)(v17 + 552) = v28;
    strcpy((char *)(v17 + 592), "slideDistance");
    *(_WORD *)(v17 + 606) = -4864;
    *(_QWORD *)(v17 + 632) = &type metadata for Float;
    *(_QWORD *)(v17 + 640) = &off_10043EDC0;
    *(_DWORD *)(v17 + 608) = v27;
    *(_QWORD *)(v17 + 648) = 0x6F50646563616C70;
    *(_QWORD *)(v17 + 656) = 0xEB00000000746E69;
    *(_QWORD *)(v17 + 688) = &type metadata for Bool;
    *(_QWORD *)(v17 + 696) = &off_10043EDD0;
    *(_BYTE *)(v17 + 664) = v1 & 1;
    *(_QWORD *)(v17 + 704) = 0x694C646563616C70;
    *(_QWORD *)(v17 + 712) = 0xEA0000000000656ELL;
    *(_QWORD *)(v17 + 744) = &type metadata for Bool;
    *(_QWORD *)(v17 + 752) = &off_10043EDD0;
    *(_BYTE *)(v17 + 720) = HIBYTE(v1) & 0x3F;
  }
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  inited = v17;
  return sub_1000C73B4(inited);
}

uint64_t sub_10001BFB4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 64);
  *(_WORD *)(a2 + 80) = *(_WORD *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  return a2;
}

uint64_t sub_10001BFDC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  v6 = *(_OWORD *)(a1 + 96);
  v7 = *(_OWORD *)(a1 + 112);
  v8 = *(_OWORD *)(a1 + 128);
  *(_BYTE *)(a2 + 144) = *(_BYTE *)(a1 + 144);
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 128) = v8;
  *(_OWORD *)(a2 + 96) = v6;
  return a2;
}

uint64_t sub_10001C014(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t sub_10001C01C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_OWORD *sub_10001C034(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[6];
  a2[5] = a1[5];
  a2[6] = v6;
  a2[3] = v4;
  a2[4] = v5;
  return a2;
}

uint64_t sub_10001C05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t *v15;

  v14 = a12;
  swift_bridgeObjectRetain(a2);
  v15 = &a9;
  if (v14 < 0)
    v15 = &a14;
  return swift_bridgeObjectRetain(*v15);
}

uint64_t destroy for SessionEvent(uint64_t *a1)
{
  return sub_10001C0D4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13]);
}

uint64_t sub_10001C0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t *v15;

  v14 = a12;
  swift_bridgeObjectRelease(a2);
  v15 = &a9;
  if (v14 < 0)
    v15 = &a14;
  return swift_bridgeObjectRelease(*v15);
}

uint64_t *initializeWithCopy for SessionEvent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  sub_10001C05C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  return a1;
}

uint64_t assignWithCopy for SessionEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v25 = a2[9];
  v26 = a2[10];
  v27 = a2[11];
  v28 = a2[12];
  v29 = a2[13];
  sub_10001C05C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28, v29);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 96);
  v23 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v27;
  *(_QWORD *)(a1 + 96) = v28;
  *(_QWORD *)(a1 + 104) = v29;
  sub_10001C0D4(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, v23);
  return a1;
}

__n128 initializeWithTake for SessionEvent(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for SessionEvent(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 104);
  v15 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v16;
  v17 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v17;
  *(_OWORD *)(a1 + 96) = a2[6];
  sub_10001C0D4(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionEvent(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 88) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for SessionEvent(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 2 * -a2;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 104) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10001C43C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88) >> 63;
}

uint64_t sub_10001C448(uint64_t result)
{
  *(_QWORD *)(result + 88) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_10001C458(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 88) = *(_QWORD *)(result + 88) & 1 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for SessionEvent()
{
  return &type metadata for SessionEvent;
}

__n128 initializeWithCopy for PersonHeightEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PersonHeightEvent(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[40])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PersonHeightEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PersonHeightEvent()
{
  return &type metadata for PersonHeightEvent;
}

uint64_t sub_10001C540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if ((a19 & 1) != 0)
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a14);
    a6 = a16;
    a8 = a18;
  }
  swift_bridgeObjectRetain(a6);
  return swift_bridgeObjectRetain(a8);
}

uint64_t destroy for ConfirmedEvent(uint64_t a1)
{
  return sub_10001C614(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_BYTE *)(a1 + 144));
}

uint64_t sub_10001C614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if ((a19 & 1) != 0)
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a12);
    swift_bridgeObjectRelease(a14);
    a6 = a16;
    a8 = a18;
  }
  swift_bridgeObjectRelease(a6);
  return swift_bridgeObjectRelease(a8);
}

uint64_t initializeWithCopy for ConfirmedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_BYTE *)(a2 + 144);
  sub_10001C540(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  *(_BYTE *)(a1 + 144) = v22;
  return a1;
}

uint64_t assignWithCopy for ConfirmedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v28 = *(_QWORD *)(a2 + 72);
  v29 = *(_QWORD *)(a2 + 80);
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_QWORD *)(a2 + 96);
  v32 = *(_QWORD *)(a2 + 104);
  v33 = *(_QWORD *)(a2 + 112);
  v34 = *(_QWORD *)(a2 + 120);
  v35 = *(_QWORD *)(a2 + 128);
  v36 = *(_QWORD *)(a2 + 136);
  v37 = *(_BYTE *)(a2 + 144);
  sub_10001C540(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  v24 = *(_QWORD *)(a1 + 128);
  v25 = *(_QWORD *)(a1 + 136);
  v26 = *(_BYTE *)(a1 + 144);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v28;
  *(_QWORD *)(a1 + 80) = v29;
  *(_QWORD *)(a1 + 88) = v30;
  *(_QWORD *)(a1 + 96) = v31;
  *(_QWORD *)(a1 + 104) = v32;
  *(_QWORD *)(a1 + 112) = v33;
  *(_QWORD *)(a1 + 120) = v34;
  *(_QWORD *)(a1 + 128) = v35;
  *(_QWORD *)(a1 + 136) = v36;
  *(_BYTE *)(a1 + 144) = v37;
  sub_10001C614(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25, v26);
  return a1;
}

__n128 initializeWithTake for ConfirmedEvent(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for ConfirmedEvent(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v3 = *(_BYTE *)(a2 + 144);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 136);
  v18 = *(_BYTE *)(a1 + 144);
  v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v19;
  v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v20;
  v21 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v21;
  v22 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v22;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = v3;
  sub_10001C614(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmedEvent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 145))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 144);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmedEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 145) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 145) = 0;
    if (a2)
      *(_BYTE *)(result + 144) = -(char)a2;
  }
  return result;
}

uint64_t sub_10001CA90(uint64_t result, char a2)
{
  *(_BYTE *)(result + 144) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ConfirmedEvent()
{
  return &type metadata for ConfirmedEvent;
}

uint64_t sub_10001CAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11)
{
  uint64_t result;

  if ((a11 & 0x80000000) == 0)
  {
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a7);
    return swift_bridgeObjectRetain(a9);
  }
  return result;
}

uint64_t destroy for GuidesEvent(uint64_t a1)
{
  return sub_10001CB34(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_WORD *)(a1 + 80));
}

uint64_t sub_10001CB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11)
{
  uint64_t result;

  if ((a11 & 0x80000000) == 0)
  {
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a7);
    return swift_bridgeObjectRelease(a9);
  }
  return result;
}

uint64_t initializeWithCopy for GuidesEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int16 v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_WORD *)(a2 + 80);
  sub_10001CAAC(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  *(_WORD *)(a1 + 80) = v14;
  return a1;
}

uint64_t assignWithCopy for GuidesEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v24;
  __int16 v25;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v25 = *(_WORD *)(a2 + 80);
  sub_10001CAAC(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_WORD *)(a1 + 80);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_WORD *)(a1 + 80) = v25;
  sub_10001CB34(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

__n128 initializeWithTake for GuidesEvent(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for GuidesEvent(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_WORD *)(a2 + 80);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_WORD *)(a1 + 80);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = v3;
  sub_10001CB34(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GuidesEvent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFE && *(_BYTE *)(a1 + 82))
    return (*(_DWORD *)a1 + 16382);
  v3 = (*(_WORD *)(a1 + 80) & 0x3E00 | (*(unsigned __int16 *)(a1 + 80) >> 14) & 0xFFFFFE03 | (4
                                                                                            * (*(_WORD *)(a1 + 80) >> 1))) ^ 0x3FFF;
  if (v3 >= 0x3FFD)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for GuidesEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;

  if (a2 > 0x3FFD)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 16382;
    if (a3 >= 0x3FFE)
      *(_BYTE *)(result + 82) = 1;
  }
  else
  {
    if (a3 >= 0x3FFE)
      *(_BYTE *)(result + 82) = 0;
    if (a2)
    {
      v3 = ((-a2 >> 2) & 0xFFF) - (a2 << 12);
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_WORD *)(result + 80) = (4 * v3) & 0xFE00 | (2 * (v3 & 0x7F));
    }
  }
  return result;
}

uint64_t sub_10001CE94(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 80) >> 14;
}

uint64_t sub_10001CEA0(uint64_t result)
{
  *(_WORD *)(result + 80) &= 0x3FFFu;
  return result;
}

uint64_t sub_10001CEB0(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 80) = *(_WORD *)(result + 80) & 0x101 | (a2 << 14);
  return result;
}

ValueMetadata *type metadata accessor for GuidesEvent()
{
  return &type metadata for GuidesEvent;
}

double sub_10001CED4()
{
  uint64_t v0;
  id v1;
  id v2;
  double Height;
  double v4;
  CGRect v6;
  CGRect v7;
  CGRect v8;

  v1 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v2 = objc_msgSend(v1, "preferredContentSizeCategory");

  LOBYTE(v1) = UIContentSizeCategory.isAccessibilityCategory.getter(v2);
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_sketchView), "bounds");
  Height = CGRectGetHeight(v6);
  if ((v1 & 1) != 0)
  {
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilityLength), "bounds");
    Height = Height + CGRectGetHeight(v7);
    if (qword_10047A758 != -1)
      swift_once(&qword_10047A758, sub_10000EF18);
    v4 = *(double *)&qword_1004AF090;
  }
  else
  {
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_labelStrip), "bounds");
    v4 = CGRectGetHeight(v8);
  }
  return Height + v4;
}

void sub_10001CFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  double Height;
  void *v10;
  void *v11;
  Class isa;
  void (*v13)(char *, uint64_t);
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  Class v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  uint64_t v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  v3 = type metadata accessor for IndexPath(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v8 = objc_msgSend(v7, "preferredContentSizeCategory");

  LOBYTE(v7) = UIContentSizeCategory.isAccessibilityCategory.getter(v8);
  if ((v7 & 1) != 0)
  {
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilityLength), "bounds");
    Height = CGRectGetHeight(v32);
    v10 = *(void **)(v2 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilityWidth);
    objc_msgSend(v10, "bounds");
    if (Height + CGRectGetHeight(v33) != 0.0)
    {
      sub_10001CED4();
      objc_msgSend(v10, "bounds");
      CGRectGetHeight(v34);
      objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilitySeparator), "bounds");
      CGRectGetHeight(v35);
      if (qword_10047A758 != -1)
        swift_once(&qword_10047A758, sub_10000EF18);
    }
  }
  else
  {
    sub_10001CED4();
    v11 = *(void **)(v2 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_tableView);
    IndexPath.init(row:section:)(0, 0);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v13 = *(void (**)(char *, uint64_t))(v4 + 8);
    v13(v6, v3);
    objc_msgSend(v11, "rectForRowAtIndexPath:", isa);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    v21 = v20;

    v36.origin.x = v15;
    v36.origin.y = v17;
    v36.size.width = v19;
    v36.size.height = v21;
    CGRectGetHeight(v36);
    IndexPath.init(row:section:)(1, 0);
    v22 = IndexPath._bridgeToObjectiveC()().super.isa;
    v13(v6, v3);
    objc_msgSend(v11, "rectForRowAtIndexPath:", v22);
    v24 = v23;
    v26 = v25;
    v28 = v27;
    v30 = v29;

    v37.origin.x = v24;
    v37.origin.y = v26;
    v37.size.width = v28;
    v37.size.height = v30;
    CGRectGetHeight(v37);
  }
}

void sub_10001D25C(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  id v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  id v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  id v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t Strong;
  uint64_t v33;
  void *v34;
  void *v35;
  __int128 v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  NSString v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  NSString v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  NSString v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  _OWORD v82[2];
  _BYTE v83[16];
  __int128 v84;
  _BYTE v85[22];
  _BYTE v86[16];
  _QWORD v87[2];
  _QWORD v88[3];
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  Swift::String v92;

  v2 = v1;
  *(_QWORD *)&v79 = *((_QWORD *)a1 + 6);
  *((_QWORD *)&v79 + 1) = *((_QWORD *)a1 + 5);
  v77 = *((_QWORD *)a1 + 8);
  v78 = *((_QWORD *)a1 + 7);
  v4 = *((_QWORD *)a1 + 12);
  v75 = *((_QWORD *)a1 + 11);
  v76 = *((_QWORD *)a1 + 10);
  v5 = *((_QWORD *)a1 + 13);
  v6 = *((_QWORD *)a1 + 20);
  v80 = *((_QWORD *)a1 + 21);
  v8 = *((_QWORD *)a1 + 22);
  v7 = *((_QWORD *)a1 + 23);
  v9 = *((_QWORD *)a1 + 25);
  v70 = *((_QWORD *)a1 + 27);
  v71 = *((_QWORD *)a1 + 26);
  v69 = *((_QWORD *)a1 + 28);
  v10 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v11 = objc_msgSend(v10, "preferredContentSizeCategory");

  LOBYTE(v10) = UIContentSizeCategory.isAccessibilityCategory.getter(v11);
  v73 = v7;
  v74 = v8;
  v72 = v9;
  if ((v10 & 1) != 0)
  {
    v13 = (void *)objc_opt_self(NSBundle);
    v14 = objc_msgSend(v13, "mainBundle");
    v89._object = (void *)0xE000000000000000;
    v15._countAndFlagsBits = 0xD000000000000010;
    v15._object = (void *)0x80000001003D8710;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    v89._countAndFlagsBits = 0;
    v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v89);

    v18 = objc_msgSend(v13, "mainBundle");
    v90._object = (void *)0xE000000000000000;
    v19._countAndFlagsBits = 0xD000000000000010;
    v19._object = (void *)0x80000001003D8710;
    v20._countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    v90._countAndFlagsBits = 0;
    v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v18, v20, v90);

    sub_100125740(v17._countAndFlagsBits, (uint64_t)v17._object, v21._countAndFlagsBits, v21._object, *((uint64_t *)&v79 + 1), v79, v78, v77, v76, v75, v4, v5);
    swift_bridgeObjectRelease(v17._object);
    swift_bridgeObjectRelease(v21._object);
    v22 = objc_msgSend(v13, "mainBundle");
    v91._object = (void *)0xE000000000000000;
    v23._countAndFlagsBits = 0x4C474E4154434552;
    v23._object = (void *)0xEF48544449575F45;
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    v91._countAndFlagsBits = 0;
    v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v91);

    v26 = objc_msgSend(v13, "mainBundle");
    v92._object = (void *)0xE000000000000000;
    v27._countAndFlagsBits = 0x4C474E4154434552;
    v27._object = (void *)0xEF48544449575F45;
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    v92._countAndFlagsBits = 0;
    v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, (Swift::String_optional)0, (NSBundle)v26, v28, v92);

    sub_100125740(v25._countAndFlagsBits, (uint64_t)v25._object, v29._countAndFlagsBits, v29._object, v6, v80, v8, v7, v9, v71, v70, v69);
    swift_bridgeObjectRelease(v25._object);
    swift_bridgeObjectRelease(v29._object);
    return;
  }
  v30 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_labelStrip);
  v31 = v30 + OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_lengthLabels;
  Strong = swift_unknownObjectWeakLoadStrong(v30 + OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_lengthLabels, v12);
  if (!Strong)
  {
    __break(1u);
    goto LABEL_29;
  }
  v34 = (void *)Strong;
  v35 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_mainUnit, v33);

  if (!v35)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v36 = a1[1];
  v84 = *a1;
  *(_OWORD *)v85 = v36;
  *(_QWORD *)&v85[14] = *(_QWORD *)((char *)a1 + 30);
  v37 = String._bridgeToObjectiveC()();
  objc_msgSend(v35, "setText:", v37);

  v39 = swift_unknownObjectWeakLoadStrong(v31, v38);
  if (!v39)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v41 = (void *)v39;
  v42 = (void *)swift_unknownObjectWeakLoadStrong(v39 + OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_mainUnit, v40);

  if (!v42)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  sub_10001F9D8((uint64_t)v85, (uint64_t)v86);
  sub_10001F9D8((uint64_t)v86, (uint64_t)v87);
  if (v87[1])
    v43 = String._bridgeToObjectiveC()();
  else
    v43 = 0;
  objc_msgSend(v42, "setAccessibilityLabel:", v43);

  v45 = swift_unknownObjectWeakLoadStrong(v31, v44);
  if (!v45)
    goto LABEL_32;
  v47 = (void *)v45;
  v48 = (void *)swift_unknownObjectWeakLoadStrong(v45 + OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_secondaryLabelStack, v46);

  if (!v48)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (__PAIR128__(v84, *((unint64_t *)&v84 + 1)) == v79)
    v49 = 1;
  else
    v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v84, *((_QWORD *)&v84 + 1), *((_QWORD *)&v79 + 1), v79, 0);
  sub_10013495C(*((uint64_t *)&v79 + 1), v79, v78, v77, v76, v75, v4, v5, v49 & 1);

  v50 = v30 + OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_widthLabels;
  v52 = swift_unknownObjectWeakLoadStrong(v30 + OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_widthLabels, v51);
  if (!v52)
    goto LABEL_34;
  v54 = (void *)v52;
  v55 = (void *)swift_unknownObjectWeakLoadStrong(v52 + OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_mainUnit, v53);

  if (!v55)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v81 = *(__int128 *)((char *)a1 + 120);
  v82[0] = *(__int128 *)((char *)a1 + 136);
  *(_QWORD *)((char *)v82 + 14) = *(_QWORD *)((char *)a1 + 150);
  v56 = String._bridgeToObjectiveC()();
  objc_msgSend(v55, "setText:", v56);

  v58 = swift_unknownObjectWeakLoadStrong(v50, v57);
  if (!v58)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v60 = (void *)v58;
  v61 = (void *)swift_unknownObjectWeakLoadStrong(v58 + OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_mainUnit, v59);

  if (!v61)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  sub_10001F9D8((uint64_t)v82, (uint64_t)v83);
  sub_10001F9D8((uint64_t)v83, (uint64_t)v88);
  if (v88[1])
    v62 = String._bridgeToObjectiveC()();
  else
    v62 = 0;
  objc_msgSend(v61, "setAccessibilityLabel:", v62);

  v64 = swift_unknownObjectWeakLoadStrong(v50, v63);
  if (!v64)
    goto LABEL_38;
  v66 = (void *)v64;
  v67 = (void *)swift_unknownObjectWeakLoadStrong(v64 + OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_secondaryLabelStack, v65);

  if (!v67)
  {
LABEL_39:
    __break(1u);
    return;
  }
  if (v81 == __PAIR128__(v80, v6))
    v68 = 1;
  else
    v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, *((_QWORD *)&v81 + 1), v6, v80, 0);
  sub_10013495C(v6, v80, v74, v73, v72, v71, v70, v69, v68 & 1);

}

char *sub_10001D908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  char *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  id v15;
  id v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *ObjCClassFromMetadata;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  id v44;
  double v45;
  double v46;
  objc_class *ObjectType;
  objc_super v50;
  _OWORD v51[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[22];
  _OWORD v57[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];

  v6 = v5;
  ObjectType = (objc_class *)swift_getObjectType(v5);
  v11 = &v5[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_numberOfRowsChangedCallback];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v12 = OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_minContentViewHeight;
  *(_QWORD *)&v6[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_minContentViewHeight] = 0x407AA00000000000;
  v13 = (void *)objc_opt_self(UITraitCollection);
  v14 = v6;
  v15 = objc_msgSend(v13, "currentTraitCollection");
  v16 = objc_msgSend(v15, "preferredContentSizeCategory");

  LOBYTE(v15) = UIContentSizeCategory.isAccessibilityCategory.getter(v16);
  if ((v15 & 1) != 0)
    v17 = 222.0;
  else
    v17 = 88.0;
  *(double *)&v14[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_tableRowHeight] = v17;
  *(_QWORD *)&v14[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_numberOfRows] = 2;
  v18 = OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_sketchView;
  v19 = type metadata accessor for SketchSurface();
  *(_QWORD *)&v14[v18] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v19)), "init");
  v20 = OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_labelStrip;
  v21 = type metadata accessor for SurfaceLabelStrip();
  *(_QWORD *)&v14[v20] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v21)), "init");
  v22 = OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_tableView;
  v23 = type metadata accessor for IntrinsicTableView();
  *(_QWORD *)&v14[v22] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v23)), "init");
  v24 = OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilityLength;
  v25 = type metadata accessor for AccessibilityTripleStack();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v25);
  *(_QWORD *)&v14[v24] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v27 = OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilityWidth;
  *(_QWORD *)&v14[v27] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v28 = OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilitySeparator;
  *(_QWORD *)&v14[v28] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v29 = &v14[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_measurementID];
  *(_QWORD *)v29 = a1;
  *((_QWORD *)v29 + 1) = a2;
  v30 = &v14[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_title];
  *(_QWORD *)v30 = a4;
  *((_QWORD *)v30 + 1) = a5;
  v31 = *(double *)&v6[v12];
  v32 = type metadata accessor for CardContainerView.Configuration(0);
  v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  swift_beginAccess(v33 + OBJC_IVAR____TtCC7Measure17CardContainerView13Configuration__maxHeight, v57, 33, 0);
  *(double *)v51 = v17 + v17 + v31;
  Published.init(initialValue:)(v51, &type metadata for CGFloat);
  swift_endAccess(v57);
  swift_beginAccess(v33 + OBJC_IVAR____TtCC7Measure17CardContainerView13Configuration__minHeight, v57, 33, 0);
  *(double *)v51 = v31;
  Published.init(initialValue:)(v51, &type metadata for CGFloat);
  swift_endAccess(v57);
  *(_QWORD *)(v33 + OBJC_IVAR____TtCC7Measure17CardContainerView13Configuration_velocityThreshold) = 0x408F400000000000;
  *(_QWORD *)(v33 + OBJC_IVAR____TtCC7Measure17CardContainerView13Configuration_velocityUpperThreshold) = 0x40A7700000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_containerConfiguration] = v33;

  v50.receiver = v14;
  v50.super_class = ObjectType;
  v34 = (char *)objc_msgSendSuper2(&v50, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_10001D25C((__int128 *)a3);
  sub_10001DD40();
  sub_10001E68C();
  v35 = *(_OWORD *)(a3 + 80);
  v60 = *(_OWORD *)(a3 + 64);
  v61 = v35;
  v62[0] = *(_OWORD *)(a3 + 96);
  *(_QWORD *)((char *)v62 + 14) = *(_QWORD *)(a3 + 110);
  v36 = *(_OWORD *)(a3 + 16);
  v57[0] = *(_OWORD *)a3;
  v57[1] = v36;
  v37 = *(_OWORD *)(a3 + 48);
  v58 = *(_OWORD *)(a3 + 32);
  v59 = v37;
  v38 = *(_OWORD *)(a3 + 120);
  v39 = *(_OWORD *)(a3 + 136);
  v40 = *(_OWORD *)(a3 + 168);
  v52 = *(_OWORD *)(a3 + 152);
  v53 = v40;
  v51[0] = v38;
  v51[1] = v39;
  v41 = *(_OWORD *)(a3 + 184);
  v42 = *(_OWORD *)(a3 + 200);
  v43 = *(_OWORD *)(a3 + 216);
  *(_QWORD *)&v56[14] = *(_QWORD *)(a3 + 230);
  v55 = v42;
  *(_OWORD *)v56 = v43;
  v54 = v41;
  sub_100021314(v57);
  sub_100021314(v51);
  sub_100021388((_QWORD *)a3);
  v44 = *(id *)&v34[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_sketchView];
  sub_10002150C(v57);
  sub_10002150C(v51);
  v45 = *(float *)&v58;
  v46 = *(float *)&v52;
  if ((BYTE4(v58) & 1) != 0)
    v45 = 0.0;
  if ((BYTE4(v52) & 1) != 0)
    v46 = 0.0;
  sub_1000444B0(v45, v46);

  return v34;
}

void sub_10001DD40()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  char v55;
  uint64_t v56;
  char v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t Strong;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  id v66;
  Swift::String v67;
  Swift::String v68;
  void *object;
  NSString v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  Swift::String v77;
  Swift::String v78;
  void *v79;
  NSString v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  Swift::String v84;
  Swift::String v85;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v3 = objc_msgSend(v2, "preferredContentSizeCategory");

  LOBYTE(v2) = UIContentSizeCategory.isAccessibilityCategory.getter(v3);
  if ((v2 & 1) != 0)
  {
    v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilityLength];
    v6 = OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel;
    v7 = *(void **)(v5 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel);
    v8 = (void *)objc_opt_self(UIFont);
    v9 = v7;
    v10 = objc_msgSend(v8, "preferredFontForTextStyle:", UIFontTextStyleBody);
    v11 = objc_msgSend(v10, "fontDescriptor");

    v12 = objc_msgSend(v11, "fontDescriptorWithSymbolicTraits:", 2);
    if (v12)
    {
      v13 = objc_msgSend(v8, "fontWithDescriptor:size:", v12, 0.0);

      objc_msgSend(v9, "setFont:", v13);
      v14 = OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel;
      v15 = *(id *)(v5 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel);
      v16 = objc_msgSend(v8, "preferredFontForTextStyle:", UIFontTextStyleLargeTitle);
      objc_msgSend(v15, "setFont:", v16);

      v17 = OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel;
      v18 = *(id *)(v5 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel);
      v19 = objc_msgSend(v8, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
      v20 = objc_msgSend(v19, "fontDescriptor");

      v21 = objc_msgSend(v20, "fontDescriptorWithSymbolicTraits:", 2);
      if (v21)
      {
        v22 = objc_msgSend(v8, "fontWithDescriptor:size:", v21, 0.0);

        objc_msgSend(v18, "setFont:", v22);
        v23 = *(void **)(v5 + v6);
        v24 = (void *)objc_opt_self(UIColor);
        v25 = v23;
        v26 = objc_msgSend(v24, "secondaryLabelColor");
        objc_msgSend(v25, "setTextColor:", v26);

        v27 = *(id *)(v5 + v14);
        v28 = objc_msgSend(v24, "labelColor");
        objc_msgSend(v27, "setTextColor:", v28);

        v82 = v5;
        v29 = *(id *)(v5 + v17);
        v30 = objc_msgSend(v24, "secondaryLabelColor");
        objc_msgSend(v29, "setTextColor:", v30);

        v31 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilityWidth];
        v83 = OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel;
        v32 = *(id *)(v31 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel);
        v33 = objc_msgSend(v8, "preferredFontForTextStyle:", UIFontTextStyleBody);
        v34 = objc_msgSend(v33, "fontDescriptor");

        v35 = objc_msgSend(v34, "fontDescriptorWithSymbolicTraits:", 2);
        if (v35)
        {
          v36 = objc_msgSend(v8, "fontWithDescriptor:size:", v35, 0.0);

          objc_msgSend(v32, "setFont:", v36);
          v37 = OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel;
          v38 = *(id *)(v31 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel);
          v39 = objc_msgSend(v8, "preferredFontForTextStyle:", UIFontTextStyleLargeTitle);
          objc_msgSend(v38, "setFont:", v39);

          v40 = OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel;
          v41 = *(id *)(v31 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel);
          v42 = objc_msgSend(v8, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
          v43 = objc_msgSend(v42, "fontDescriptor");

          v44 = objc_msgSend(v43, "fontDescriptorWithSymbolicTraits:", 2);
          if (v44)
          {
            v45 = objc_msgSend(v8, "fontWithDescriptor:size:", v44, 0.0);

            objc_msgSend(v41, "setFont:", v45);
            v46 = *(id *)(v31 + v83);
            v47 = objc_msgSend(v24, "secondaryLabelColor");
            objc_msgSend(v46, "setTextColor:", v47);

            v48 = *(id *)(v31 + v37);
            v49 = objc_msgSend(v24, "labelColor");
            objc_msgSend(v48, "setTextColor:", v49);

            v50 = *(id *)(v31 + v40);
            v51 = objc_msgSend(v24, "secondaryLabelColor");
            objc_msgSend(v50, "setTextColor:", v51);

            v52 = *(void **)&v1[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilitySeparator];
            if (qword_10047B128 != -1)
              swift_once(&qword_10047B128, sub_100197BAC);
            v53 = (void *)qword_1004AFCC8;
            v54 = qword_1004AFCD0;
            if ((byte_1004AFCD8 & 1) != 0)
            {
              v55 = byte_1004AFCE8;
              v56 = qword_1004AFCE0;
              v57 = byte_10048A2A0;
              v58 = (id)qword_1004AFCC8;
              v59 = sub_100070DBC(v57, v56, v55);
              sub_100021580(v53, v54, 1);
            }
            else
            {
              if ((byte_10048A2A0 & 1) != 0)
                v81 = qword_1004AFCD0;
              else
                v81 = (id)qword_1004AFCC8;
              v59 = v81;
            }
            objc_msgSend(v52, "setBackgroundColor:", v59);

            objc_msgSend(v1, "addSubview:", *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_sketchView]);
            objc_msgSend(v1, "addSubview:", v82);
            objc_msgSend(v1, "addSubview:", v31);
            goto LABEL_20;
          }
          goto LABEL_24;
        }
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
  v60 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_labelStrip];
  Strong = swift_unknownObjectWeakLoadStrong(v60 + OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_lengthLabels, v4);
  if (!Strong)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v63 = (void *)Strong;
  v64 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_sideTitle, v62);

  if (!v64)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v65 = (void *)objc_opt_self(NSBundle);
  v66 = objc_msgSend(v65, "mainBundle");
  v84._object = (void *)0xE000000000000000;
  v67._object = (void *)0x80000001003D8710;
  v67._countAndFlagsBits = 0xD000000000000010;
  v68._countAndFlagsBits = 0;
  v68._object = (void *)0xE000000000000000;
  v84._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v67, (Swift::String_optional)0, (NSBundle)v66, v68, v84)._object;

  v70 = String._bridgeToObjectiveC()();
  objc_msgSend(v64, "setText:", v70, swift_bridgeObjectRelease(object).n128_f64[0]);

  v72 = swift_unknownObjectWeakLoadStrong(v60 + OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_widthLabels, v71);
  if (!v72)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v74 = (void *)v72;
  v75 = (void *)swift_unknownObjectWeakLoadStrong(v72 + OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_sideTitle, v73);

  if (v75)
  {
    v76 = objc_msgSend(v65, "mainBundle");
    v85._object = (void *)0xE000000000000000;
    v77._countAndFlagsBits = 0x4C474E4154434552;
    v77._object = (void *)0xEF48544449575F45;
    v78._countAndFlagsBits = 0;
    v78._object = (void *)0xE000000000000000;
    v85._countAndFlagsBits = 0;
    v79 = NSLocalizedString(_:tableName:bundle:value:comment:)(v77, (Swift::String_optional)0, (NSBundle)v76, v78, v85)._object;

    v80 = String._bridgeToObjectiveC()();
    objc_msgSend(v75, "setText:", v80, swift_bridgeObjectRelease(v79).n128_f64[0]);

    objc_msgSend(v1, "addSubview:", *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_sketchView]);
    objc_msgSend(v1, "addSubview:", v60);
    v52 = *(void **)&v1[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_tableView];
LABEL_20:
    objc_msgSend(v1, "addSubview:", v52);
    return;
  }
LABEL_28:
  __break(1u);
}

void sub_10001E68C()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  id v59;
  double v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  void *v93;
  void *v94;
  id v95;
  Class isa;

  v1 = *(void **)&v0[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_sketchView];
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v2 = (void *)objc_opt_self(UITraitCollection);
  v3 = objc_msgSend(v2, "currentTraitCollection");
  v4 = objc_msgSend(v3, "preferredContentSizeCategory");

  LOBYTE(v3) = UIContentSizeCategory.isAccessibilityCategory.getter(v4);
  if ((v3 & 1) != 0)
  {
    v5 = *(void **)&v0[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilityLength];
    objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v95 = *(id *)&v0[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilityWidth];
    objc_msgSend(v95, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v6 = *(void **)&v0[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilitySeparator];
    objc_msgSend(v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v94 = (void *)objc_opt_self(NSLayoutConstraint);
    v7 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
    v8 = swift_allocObject(v7, 152, 7);
    *(_OWORD *)(v8 + 16) = xmmword_1003B13D0;
    v9 = objc_msgSend(v1, "heightAnchor");
    if (qword_10047A820 != -1)
      swift_once(&qword_10047A820, sub_100012E14);
    v10 = objc_msgSend(v9, "constraintEqualToConstant:", *(double *)&qword_1004AF170);

    *(_QWORD *)(v8 + 32) = v10;
    v11 = objc_msgSend(v1, "leadingAnchor");
    v12 = objc_msgSend(v0, "leadingAnchor");
    v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

    *(_QWORD *)(v8 + 40) = v13;
    v14 = objc_msgSend(v1, "trailingAnchor");
    v15 = objc_msgSend(v0, "trailingAnchor");
    v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

    *(_QWORD *)(v8 + 48) = v16;
    v17 = objc_msgSend(v1, "topAnchor");
    v18 = objc_msgSend(v0, "topAnchor");
    v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

    *(_QWORD *)(v8 + 56) = v19;
    v20 = objc_msgSend(v5, "leadingAnchor");
    v21 = objc_msgSend(v0, "leadingAnchor");
    if (qword_10047A758 != -1)
      swift_once(&qword_10047A758, sub_10000EF18);
    v22 = objc_msgSend(v20, "constraintEqualToAnchor:constant:", v21, *(double *)&qword_1004AF090);

    *(_QWORD *)(v8 + 64) = v22;
    v23 = objc_msgSend(v5, "topAnchor");
    v24 = objc_msgSend(v1, "bottomAnchor");
    v25 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

    *(_QWORD *)(v8 + 72) = v25;
    v26 = objc_msgSend(v5, "trailingAnchor");
    v27 = objc_msgSend(v0, "trailingAnchor");
    v28 = objc_msgSend(v26, "constraintEqualToAnchor:", v27);

    *(_QWORD *)(v8 + 80) = v28;
    v29 = objc_msgSend(v6, "leadingAnchor");
    v30 = objc_msgSend(v0, "leadingAnchor");
    v31 = objc_msgSend(v29, "constraintEqualToAnchor:constant:", v30, *(double *)&qword_1004AF090);

    *(_QWORD *)(v8 + 88) = v31;
    v32 = objc_msgSend(v6, "topAnchor");
    v33 = objc_msgSend(v5, "bottomAnchor");
    v34 = objc_msgSend(v32, "constraintEqualToAnchor:constant:", v33, *(double *)&qword_1004AF090);

    *(_QWORD *)(v8 + 96) = v34;
    v35 = objc_msgSend(v6, "trailingAnchor");
    v36 = objc_msgSend(v0, "trailingAnchor");
    v37 = objc_msgSend(v35, "constraintEqualToAnchor:constant:", v36, -*(double *)&qword_1004AF090);

    *(_QWORD *)(v8 + 104) = v37;
    v38 = objc_msgSend(v6, "heightAnchor");
    v39 = objc_msgSend(v38, "constraintEqualToConstant:", 0.5);

    *(_QWORD *)(v8 + 112) = v39;
    v40 = objc_msgSend(v95, "leadingAnchor");
    v41 = objc_msgSend(v0, "leadingAnchor");
    v42 = objc_msgSend(v40, "constraintEqualToAnchor:constant:", v41, *(double *)&qword_1004AF090);

    *(_QWORD *)(v8 + 120) = v42;
    v43 = objc_msgSend(v95, "topAnchor");
    v44 = objc_msgSend(v6, "bottomAnchor");
    v45 = objc_msgSend(v43, "constraintEqualToAnchor:constant:", v44, *(double *)&qword_1004AF090);

    *(_QWORD *)(v8 + 128) = v45;
    v46 = objc_msgSend(v95, "trailingAnchor");
    v47 = objc_msgSend(v0, "trailingAnchor");
    v48 = objc_msgSend(v46, "constraintEqualToAnchor:", v47);

    *(_QWORD *)(v8 + 136) = v48;
    v49 = objc_msgSend(v95, "bottomAnchor");
    v50 = objc_msgSend(v0, "bottomAnchor");
    v51 = objc_msgSend(v49, "constraintEqualToAnchor:constant:", v50, -*(double *)&qword_1004AF090);

    *(_QWORD *)(v8 + 144) = v51;
    specialized Array._endMutation()(v52);
    sub_100018148(0, (unint64_t *)&qword_100486300, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v94, "activateConstraints:", isa, swift_bridgeObjectRelease(v8).n128_f64[0]);
  }
  else
  {
    v53 = *(void **)&v0[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_labelStrip];
    objc_msgSend(v53, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v54 = *(void **)&v0[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_tableView];
    objc_msgSend(v54, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v55 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
    v56 = swift_allocObject(v55, 120, 7);
    *(_OWORD *)(v56 + 16) = xmmword_1003B13C0;
    v57 = objc_msgSend(v1, "heightAnchor");
    v58 = objc_msgSend(v2, "currentTraitCollection");
    v59 = objc_msgSend(v58, "preferredContentSizeCategory");

    LOBYTE(v58) = UIContentSizeCategory.isAccessibilityCategory.getter(v59);
    v60 = 176.0;
    if ((v58 & 1) != 0)
      v60 = 444.0;
    v61 = objc_msgSend(v57, "constraintEqualToConstant:", v60);

    *(_QWORD *)(v56 + 32) = v61;
    v62 = objc_msgSend(v1, "leadingAnchor");
    v63 = objc_msgSend(v0, "leadingAnchor");
    v64 = objc_msgSend(v62, "constraintEqualToAnchor:", v63);

    *(_QWORD *)(v56 + 40) = v64;
    v65 = objc_msgSend(v1, "trailingAnchor");
    v66 = objc_msgSend(v0, "trailingAnchor");
    v67 = objc_msgSend(v65, "constraintEqualToAnchor:", v66);

    *(_QWORD *)(v56 + 48) = v67;
    v68 = objc_msgSend(v1, "topAnchor");
    v69 = objc_msgSend(v0, "topAnchor");
    v70 = objc_msgSend(v68, "constraintEqualToAnchor:", v69);

    *(_QWORD *)(v56 + 56) = v70;
    v71 = objc_msgSend(v53, "topAnchor");
    v72 = objc_msgSend(v1, "bottomAnchor");
    v73 = objc_msgSend(v71, "constraintEqualToAnchor:", v72);

    *(_QWORD *)(v56 + 64) = v73;
    v74 = objc_msgSend(v53, "leadingAnchor");
    v75 = objc_msgSend(v0, "leadingAnchor");
    v76 = objc_msgSend(v74, "constraintEqualToAnchor:", v75);

    *(_QWORD *)(v56 + 72) = v76;
    v77 = objc_msgSend(v53, "trailingAnchor");
    v78 = objc_msgSend(v0, "trailingAnchor");
    v79 = objc_msgSend(v77, "constraintEqualToAnchor:", v78);

    *(_QWORD *)(v56 + 80) = v79;
    v80 = objc_msgSend(v54, "topAnchor");
    v81 = objc_msgSend(v53, "bottomAnchor");
    v82 = objc_msgSend(v80, "constraintEqualToAnchor:", v81);

    *(_QWORD *)(v56 + 88) = v82;
    v83 = objc_msgSend(v54, "leadingAnchor");
    v84 = objc_msgSend(v0, "leadingAnchor");
    v85 = objc_msgSend(v83, "constraintEqualToAnchor:", v84);

    *(_QWORD *)(v56 + 96) = v85;
    v86 = objc_msgSend(v54, "trailingAnchor");
    v87 = objc_msgSend(v0, "trailingAnchor");
    v88 = objc_msgSend(v86, "constraintEqualToAnchor:", v87);

    *(_QWORD *)(v56 + 104) = v88;
    v89 = objc_msgSend(v54, "bottomAnchor");
    v90 = objc_msgSend(v0, "bottomAnchor");
    v91 = objc_msgSend(v89, "constraintEqualToAnchor:", v90);

    *(_QWORD *)(v56 + 112) = v91;
    specialized Array._endMutation()(v92);
    v93 = (void *)objc_opt_self(NSLayoutConstraint);
    sub_100018148(0, (unint64_t *)&qword_100486300, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v93, "activateConstraints:", isa, swift_bridgeObjectRelease(v56).n128_f64[0]);
  }

}

id sub_10001F324(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  Class isa;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  Class v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id result;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v4 = type metadata accessor for IndexPath(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v3 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_tableView);
  IndexPath.init(row:section:)(0, 0);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(v8, "cellForRowAtIndexPath:", isa);

  if (!v10)
    return (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v11 = type metadata accessor for DetailedPlatterCellTableViewCell();
  v12 = swift_dynamicCastClass(v10, v11);
  if (!v12)
    goto LABEL_8;
  v32 = v3;
  v13 = *(_QWORD *)(v12 + OBJC_IVAR____TtC7Measure32DetailedPlatterCellTableViewCell_measureContent);
  objc_msgSend(*(id *)(v13 + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits), "setSelectedRange:", 0, 0);
  v14 = *(_QWORD *)(v13 + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels);
  objc_msgSend(*(id *)(*(_QWORD *)(v14 + OBJC_IVAR____TtC7Measure22NewSecondaryLabelStack_topLabel)+ OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label), "setSelectedRange:", 0, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(v14 + OBJC_IVAR____TtC7Measure22NewSecondaryLabelStack_bottomLabel)+ OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label), "setSelectedRange:", 0, 0);

  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, v4);
  IndexPath.init(row:section:)(1, 0);
  v16 = IndexPath._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(v8, "cellForRowAtIndexPath:", v16);

  v17 = v32;
  if (!v10)
    return (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v18 = swift_dynamicCastClass(v10, v11);
  if (!v18)
  {
LABEL_8:

    return (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v19 = *(_QWORD *)(v18 + OBJC_IVAR____TtC7Measure32DetailedPlatterCellTableViewCell_measureContent);
  objc_msgSend(*(id *)(v19 + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits), "setSelectedRange:", 0, 0);
  v20 = *(_QWORD *)(v19 + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels);
  objc_msgSend(*(id *)(*(_QWORD *)(v20 + OBJC_IVAR____TtC7Measure22NewSecondaryLabelStack_topLabel)+ OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label), "setSelectedRange:", 0, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(v20 + OBJC_IVAR____TtC7Measure22NewSecondaryLabelStack_bottomLabel)+ OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label), "setSelectedRange:", 0, 0);

  v15(v7, v4);
  v21 = *(_QWORD *)(v17 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_labelStrip);
  result = (id)swift_unknownObjectWeakLoadStrong(v21 + OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_lengthLabels, v22);
  if (result)
  {
    v25 = result;
    sub_1000D964C((uint64_t)result, v24);

    result = (id)swift_unknownObjectWeakLoadStrong(v21 + OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_widthLabels, v26);
    if (result)
    {
      v28 = result;
      sub_1000D964C((uint64_t)result, v27);

      v29 = *(_QWORD *)(v17 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilityLength);
      objc_msgSend(*(id *)(v29 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel), "setSelectedRange:", 0, 0);
      objc_msgSend(*(id *)(v29 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel), "setSelectedRange:", 0, 0);
      objc_msgSend(*(id *)(v29 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel), "setSelectedRange:", 0, 0);
      v30 = *(_QWORD *)(v17 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilityWidth);
      objc_msgSend(*(id *)(v30 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel), "setSelectedRange:", 0, 0);
      objc_msgSend(*(id *)(v30 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel), "setSelectedRange:", 0, 0);
      return objc_msgSend(*(id *)(v30 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel), "setSelectedRange:", 0, 0);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RectanglePlatterSpatial()
{
  return objc_opt_self(_TtC7Measure23RectanglePlatterSpatial);
}

__n128 sub_10001F7F4@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  _OWORD v6[7];

  sub_100020860(a1, (uint64_t *)v6);
  v3 = v6[5];
  *(_OWORD *)(a2 + 64) = v6[4];
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = v6[6];
  v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  result = (__n128)v6[3];
  *(_OWORD *)(a2 + 32) = v6[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t sub_10001F840()
{
  return 2;
}

uint64_t sub_10001F84C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_title);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_title + 8));
  return v1;
}

void *sub_10001F884()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_tableView);
  v2 = v1;
  return v1;
}

uint64_t sub_10001F8B0()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_containerConfiguration));
}

void sub_10001F8C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  __int128 v9[30];
  _BYTE v10[848];
  _BYTE v11[848];

  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_title);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_title + 8);
  *v5 = v4;
  v5[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v6);
  v7 = type metadata accessor for MeasurementHistoryItem(0);
  sub_10001F970((const void *)(a1 + *(int *)(v7 + 28)), v10);
  sub_10001F970(v10, v11);
  if (sub_10001F9AC((uint64_t)v11) == 1)
  {
    v8 = (const void *)sub_10001F9B8((uint64_t)v11);
    memcpy(v9, v8, 0x1DEuLL);
    sub_10001D25C(v9);
  }
}

void *sub_10001F970(const void *a1, void *a2)
{
  initializeWithTake for MeasurementDetail(a2, a1);
  return a2;
}

uint64_t sub_10001F9AC(uint64_t a1)
{
  return *(_WORD *)(a1 + 836) >> 6;
}

uint64_t sub_10001F9B8(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(unsigned int *)(result + 832);
  v2 = (v1 | ((unint64_t)*(unsigned __int16 *)(result + 836) << 32)) & 0xFFFFFF3FFFFFFFFFLL;
  *(_DWORD *)(result + 832) = v1;
  *(_WORD *)(result + 836) = WORD2(v2);
  return result;
}

uint64_t sub_10001F9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8((uint64_t *)&unk_10048A0F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10001FA20(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  _OWORD v34[4];
  _OWORD v35[2];
  _OWORD v36[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10000EDC8(&qword_10047C118);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v31 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v32 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v32 << 6);
      goto LABEL_28;
    }
    v11 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v30)
      goto LABEL_37;
    v12 = *(_QWORD *)(v31 + 8 * v11);
    v13 = v32 + 1;
    if (!v12)
    {
      v13 = v32 + 2;
      if (v32 + 2 >= v30)
        goto LABEL_37;
      v12 = *(_QWORD *)(v31 + 8 * v13);
      if (!v12)
      {
        v13 = v32 + 3;
        if (v32 + 3 >= v30)
          goto LABEL_37;
        v12 = *(_QWORD *)(v31 + 8 * v13);
        if (!v12)
        {
          v13 = v32 + 4;
          if (v32 + 4 >= v30)
            goto LABEL_37;
          v12 = *(_QWORD *)(v31 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v32 = v13;
LABEL_28:
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    *(_QWORD *)&v36[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    *(_QWORD *)&v35[0] = v15;
    v16 = *(id *)&v36[0];
    swift_bridgeObjectRetain(v15);
    v17 = sub_10000EDC8(&qword_10047C120);
    swift_dynamicCast((char *)v36 + 8, v35, v17, (char *)&type metadata for Any + 8, 7);
    v18 = *(_QWORD *)&v36[0];
    sub_100020848((_OWORD *)((char *)v36 + 8), v34);
    sub_100020848(v34, v36);
    sub_100020848(v36, v35);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;
    Hasher.init(_seed:)(&v33);
    String.hash(into:)(&v33, v19, v21);
    v22 = Hasher._finalize()();
    swift_bridgeObjectRelease(v21);
    v23 = -1 << *((_BYTE *)v3 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~v7[v24 >> 6]) != 0)
    {
      v8 = __clz(__rbit64((-1 << v24) & ~v7[v24 >> 6])) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = v7[v25];
      }
      while (v29 == -1);
      v8 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)((char *)v7 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(_QWORD *)(v3[6] + 8 * v8) = v18;
    sub_100020848(v35, (_OWORD *)(v3[7] + 32 * v8));
    ++v3[2];
  }
  v14 = v32 + 5;
  if (v32 + 5 >= v30)
  {
LABEL_37:
    swift_release();
    sub_100020858(a1);
    return;
  }
  v12 = *(_QWORD *)(v31 + 8 * v14);
  if (v12)
  {
    v13 = v32 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v30)
      goto LABEL_37;
    v12 = *(_QWORD *)(v31 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

void sub_10001FDC4(uint64_t a1)
{
  sub_10001FDEC(a1, &qword_10047C110, UIFont_ptr);
}

void sub_10001FDD8(uint64_t a1)
{
  sub_10001FDEC(a1, (unint64_t *)&qword_10047C128, NSObject_ptr);
}

void sub_10001FDEC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v38;
  uint64_t v39;
  _OWORD v40[4];
  _OWORD v41[2];
  _OWORD v42[3];

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    sub_10000EDC8(&qword_10047C108);
    v5 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v4);
  }
  else
  {
    v5 = _swiftEmptyDictionarySingleton;
  }
  v35 = a1 + 64;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v34 = (unint64_t)(63 - v6) >> 6;
  v9 = v5 + 8;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v38 = 0;
  while (1)
  {
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v38 << 6);
      goto LABEL_28;
    }
    v13 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v34)
      goto LABEL_37;
    v14 = *(_QWORD *)(v35 + 8 * v13);
    v15 = v38 + 1;
    if (!v14)
    {
      v15 = v38 + 2;
      if (v38 + 2 >= v34)
        goto LABEL_37;
      v14 = *(_QWORD *)(v35 + 8 * v15);
      if (!v14)
      {
        v15 = v38 + 3;
        if (v38 + 3 >= v34)
          goto LABEL_37;
        v14 = *(_QWORD *)(v35 + 8 * v15);
        if (!v14)
        {
          v15 = v38 + 4;
          if (v38 + 4 >= v34)
            goto LABEL_37;
          v14 = *(_QWORD *)(v35 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v38 = v15;
LABEL_28:
    v18 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v12);
    *(_QWORD *)&v42[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12);
    v17 = *(void **)&v42[0];
    *(_QWORD *)&v41[0] = v18;
    v19 = sub_100018148(0, a2, a3);
    v20 = v17;
    v21 = v18;
    swift_dynamicCast((char *)v42 + 8, v41, v19, (char *)&type metadata for Any + 8, 7);
    v22 = *(_QWORD *)&v42[0];
    sub_100020848((_OWORD *)((char *)v42 + 8), v40);
    sub_100020848(v40, v42);
    sub_100020848(v42, v41);
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;
    Hasher.init(_seed:)(&v39);
    String.hash(into:)(&v39, v23, v25);
    v26 = Hasher._finalize()();
    swift_bridgeObjectRelease(v25);
    v27 = -1 << *((_BYTE *)v5 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~v9[v28 >> 6]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v28) & ~v9[v28 >> 6])) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = v9[v29];
      }
      while (v33 == -1);
      v10 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)((char *)v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    *(_QWORD *)(v5[6] + 8 * v10) = v22;
    sub_100020848(v41, (_OWORD *)(v5[7] + 32 * v10));
    ++v5[2];
  }
  v16 = v38 + 5;
  if (v38 + 5 >= v34)
  {
LABEL_37:
    swift_release();
    sub_100020858(a1);
    return;
  }
  v14 = *(_QWORD *)(v35 + 8 * v16);
  if (v14)
  {
    v15 = v38 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v34)
      goto LABEL_37;
    v14 = *(_QWORD *)(v35 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

id sub_100020194(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSString *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSString v14;
  Class isa;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  int v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  uint64_t v65;
  int v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  Swift::String v82;
  Swift::String v83;
  Swift::String v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  void *object;
  id v91;
  NSString v92;
  id v93;
  __int128 v95[2];
  int v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  int v108;
  char v109;
  char v110;
  __int128 v111[2];
  int v112;
  char v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  int v118;
  char v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  int v124;
  char v125;
  char v126;
  __int128 v127[2];
  int v128;
  char v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  int v134;
  char v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  int v140;
  char v141;
  char v142;
  _BYTE v143[848];
  _BYTE v144[864];
  Swift::String v145;
  Swift::String v146;
  Swift::String v147;
  Swift::String v148;

  v2 = type metadata accessor for MeasurementHistoryItem(0);
  sub_10001F970((const void *)(a1 + *(int *)(v2 + 28)), v143);
  sub_10001F970(v143, v144);
  v3 = 0;
  if (sub_10001F9AC((uint64_t)v144) == 1)
  {
    v4 = sub_10001F9B8((uint64_t)v144);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = sub_10000EDC8(&qword_100486370);
    v7 = swift_allocObject(v6, 48, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1003B0BD0;
    *(_QWORD *)(v7 + 32) = NSFontAttributeName;
    v8 = (void *)objc_opt_self(UIFont);
    v9 = NSFontAttributeName;
    objc_msgSend(v8, "systemFontSize");
    *(_QWORD *)(v7 + 40) = objc_msgSend(v8, "systemFontOfSize:weight:");
    v10 = sub_1000C74F4(v7);
    swift_bridgeObjectRetain(v5);
    sub_10001FDEC(v10, &qword_10047C110, UIFont_ptr);
    v12 = v11;
    swift_bridgeObjectRelease(v10);
    v13 = objc_allocWithZone((Class)NSAttributedString);
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    type metadata accessor for Key(0);
    sub_100020800();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v16 = objc_msgSend(v13, "initWithString:attributes:", v14, isa, swift_bridgeObjectRelease(v12).n128_f64[0]);

    v3 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "initWithAttributedString:", v16);
    v17 = sub_10000EDC8((uint64_t *)&unk_10048A100);
    v18 = swift_allocObject(v17, 392, 7);
    *(_OWORD *)(v18 + 16) = xmmword_1003B12A0;
    v19 = (void *)objc_opt_self(NSBundle);
    v20 = objc_msgSend(v19, "mainBundle");
    v145._object = (void *)0xE000000000000000;
    v21._object = (void *)0x80000001003D8710;
    v21._countAndFlagsBits = 0xD000000000000010;
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    v145._countAndFlagsBits = 0;
    v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v145);

    *(_QWORD *)(v18 + 56) = &type metadata for String;
    v24 = sub_100018B34();
    *(_QWORD *)(v18 + 64) = v24;
    *(Swift::String *)(v18 + 32) = v23;
    v25 = *(_QWORD *)(v4 + 8);
    v26 = *(_DWORD *)(v4 + 32);
    v27 = *(_BYTE *)(v4 + 36);
    v28 = *(_BYTE *)(v4 + 37);
    v29 = *(_QWORD *)(v4 + 40);
    v30 = *(_QWORD *)(v4 + 48);
    v31 = *(_DWORD *)(v4 + 72);
    v32 = *(_BYTE *)(v4 + 76);
    v33 = *(_BYTE *)(v4 + 77);
    v34 = *(_QWORD *)(v4 + 80);
    v35 = *(_QWORD *)(v4 + 88);
    v36 = *(_DWORD *)(v4 + 112);
    v37 = *(_BYTE *)(v4 + 116);
    v38 = *(_BYTE *)(v4 + 117);
    *(_QWORD *)&v127[0] = *(_QWORD *)v4;
    *((_QWORD *)&v127[0] + 1) = v25;
    v127[1] = *(_OWORD *)(v4 + 16);
    v128 = v26;
    v129 = v27;
    v130 = v28;
    v131 = v29;
    v132 = v30;
    v133 = *(_OWORD *)(v4 + 56);
    v134 = v31;
    v135 = v32;
    v136 = v33;
    v137 = v34;
    v138 = v35;
    v139 = *(_OWORD *)(v4 + 96);
    v140 = v36;
    v141 = v37;
    v142 = v38;
    v39 = sub_1000189B0(v127);
    *(_QWORD *)(v18 + 96) = &type metadata for String;
    *(_QWORD *)(v18 + 104) = v24;
    *(_QWORD *)(v18 + 72) = v39;
    *(_QWORD *)(v18 + 80) = v40;
    v41 = objc_msgSend(v19, "mainBundle");
    v146._object = (void *)0xE000000000000000;
    v42._countAndFlagsBits = 0x4C474E4154434552;
    v42._object = (void *)0xEF48544449575F45;
    v43._countAndFlagsBits = 0;
    v43._object = (void *)0xE000000000000000;
    v146._countAndFlagsBits = 0;
    v44 = NSLocalizedString(_:tableName:bundle:value:comment:)(v42, (Swift::String_optional)0, (NSBundle)v41, v43, v146);

    *(_QWORD *)(v18 + 136) = &type metadata for String;
    *(_QWORD *)(v18 + 144) = v24;
    *(Swift::String *)(v18 + 112) = v44;
    v45 = *(_QWORD *)(v4 + 128);
    v46 = *(_DWORD *)(v4 + 152);
    v47 = *(_BYTE *)(v4 + 156);
    v48 = *(_BYTE *)(v4 + 157);
    v49 = *(_QWORD *)(v4 + 160);
    v50 = *(_QWORD *)(v4 + 168);
    v51 = *(_DWORD *)(v4 + 192);
    v52 = *(_BYTE *)(v4 + 196);
    v53 = *(_BYTE *)(v4 + 197);
    v54 = *(_QWORD *)(v4 + 200);
    v55 = *(_QWORD *)(v4 + 208);
    v56 = *(_DWORD *)(v4 + 232);
    v57 = *(_BYTE *)(v4 + 236);
    v58 = *(_BYTE *)(v4 + 237);
    *(_QWORD *)&v111[0] = *(_QWORD *)(v4 + 120);
    *((_QWORD *)&v111[0] + 1) = v45;
    v111[1] = *(_OWORD *)(v4 + 136);
    v112 = v46;
    v113 = v47;
    v114 = v48;
    v115 = v49;
    v116 = v50;
    v117 = *(_OWORD *)(v4 + 176);
    v118 = v51;
    v119 = v52;
    v120 = v53;
    v121 = v54;
    v122 = v55;
    v123 = *(_OWORD *)(v4 + 216);
    v124 = v56;
    v125 = v57;
    v126 = v58;
    v59 = sub_1000189B0(v111);
    *(_QWORD *)(v18 + 176) = &type metadata for String;
    *(_QWORD *)(v18 + 184) = v24;
    *(_QWORD *)(v18 + 152) = v59;
    *(_QWORD *)(v18 + 160) = v60;
    v61 = objc_msgSend(v19, "mainBundle");
    v147._object = (void *)0xE000000000000000;
    v62._countAndFlagsBits = 0x4C414E4F47414944;
    v62._object = (void *)0xE800000000000000;
    v63._countAndFlagsBits = 0;
    v63._object = (void *)0xE000000000000000;
    v147._countAndFlagsBits = 0;
    v64 = NSLocalizedString(_:tableName:bundle:value:comment:)(v62, (Swift::String_optional)0, (NSBundle)v61, v63, v147);

    *(_QWORD *)(v18 + 216) = &type metadata for String;
    *(_QWORD *)(v18 + 224) = v24;
    *(Swift::String *)(v18 + 192) = v64;
    v65 = *(_QWORD *)(v4 + 248);
    v66 = *(_DWORD *)(v4 + 272);
    v67 = *(_BYTE *)(v4 + 276);
    v68 = *(_BYTE *)(v4 + 277);
    v69 = *(_QWORD *)(v4 + 280);
    v70 = *(_QWORD *)(v4 + 288);
    v71 = *(_DWORD *)(v4 + 312);
    v72 = *(_BYTE *)(v4 + 316);
    v73 = *(_BYTE *)(v4 + 317);
    v74 = *(_QWORD *)(v4 + 320);
    v75 = *(_QWORD *)(v4 + 328);
    v76 = *(_DWORD *)(v4 + 352);
    v77 = *(_BYTE *)(v4 + 356);
    v78 = *(_BYTE *)(v4 + 357);
    *(_QWORD *)&v95[0] = *(_QWORD *)(v4 + 240);
    *((_QWORD *)&v95[0] + 1) = v65;
    v95[1] = *(_OWORD *)(v4 + 256);
    v96 = v66;
    v97 = v67;
    v98 = v68;
    v99 = v69;
    v100 = v70;
    v101 = *(_OWORD *)(v4 + 296);
    v102 = v71;
    v103 = v72;
    v104 = v73;
    v105 = v74;
    v106 = v75;
    v107 = *(_OWORD *)(v4 + 336);
    v108 = v76;
    v109 = v77;
    v110 = v78;
    v79 = sub_1000189B0(v95);
    *(_QWORD *)(v18 + 256) = &type metadata for String;
    *(_QWORD *)(v18 + 264) = v24;
    *(_QWORD *)(v18 + 232) = v79;
    *(_QWORD *)(v18 + 240) = v80;
    v81 = objc_msgSend(v19, "mainBundle");
    v148._object = (void *)0xE000000000000000;
    v82._countAndFlagsBits = 0x5F45434146525553;
    v82._object = (void *)0xEC00000041455241;
    v83._countAndFlagsBits = 0;
    v83._object = (void *)0xE000000000000000;
    v148._countAndFlagsBits = 0;
    v84 = NSLocalizedString(_:tableName:bundle:value:comment:)(v82, (Swift::String_optional)0, (NSBundle)v81, v83, v148);

    *(_QWORD *)(v18 + 296) = &type metadata for String;
    *(_QWORD *)(v18 + 304) = v24;
    *(Swift::String *)(v18 + 272) = v84;
    v86 = *(_QWORD *)(v4 + 360);
    v85 = *(_QWORD *)(v4 + 368);
    v87 = *(_QWORD *)(v4 + 440);
    v88 = *(_QWORD *)(v4 + 448);
    *(_QWORD *)(v18 + 336) = &type metadata for String;
    *(_QWORD *)(v18 + 344) = v24;
    *(_QWORD *)(v18 + 312) = v86;
    *(_QWORD *)(v18 + 320) = v85;
    *(_QWORD *)(v18 + 376) = &type metadata for String;
    *(_QWORD *)(v18 + 384) = v24;
    *(_QWORD *)(v18 + 352) = v87;
    *(_QWORD *)(v18 + 360) = v88;
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v88);
    v89._countAndFlagsBits = String.init(format:_:)(0xD000000000000020, 0x80000001003D8730, v18);
    object = v89._object;
    String.append(_:)(v89);
    swift_bridgeObjectRelease(object);
    v91 = objc_allocWithZone((Class)NSAttributedString);
    v92 = String._bridgeToObjectiveC()();
    v93 = objc_msgSend(v91, "initWithString:", v92, swift_bridgeObjectRelease(0xE100000000000000).n128_f64[0]);

    objc_msgSend(v3, "appendAttributedString:", v93);
  }
  return v3;
}

unint64_t sub_100020800()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047B698;
  if (!qword_10047B698)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(&unk_1003B0824, v1);
    atomic_store(result, (unint64_t *)&qword_10047B698);
  }
  return result;
}

_OWORD *sub_100020848(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100020858(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100020860@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *object;
  uint64_t countAndFlagsBits;
  _BYTE v37[848];
  _BYTE v38[848];
  _BYTE v39[848];
  Swift::String v40;
  Swift::String v41;

  v4 = type metadata accessor for MeasurementHistoryItem(0);
  sub_10001F970((const void *)(a1 + *(int *)(v4 + 28)), v38);
  sub_10001F970(v38, v39);
  result = sub_10001F9AC((uint64_t)v39);
  if ((_DWORD)result != 1)
    goto LABEL_8;
  v6 = (_QWORD *)sub_10001F9B8((uint64_t)v39);
  sub_10001F970(v38, v37);
  v7 = (_QWORD *)sub_10001F9B8((uint64_t)v37);
  v8 = sub_100020ACC(v7);
  v9 = IndexPath.item.getter(v8);
  if (v9 == 1)
  {
    v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v41._object = (void *)0xE000000000000000;
    v24._countAndFlagsBits = 0x4C414E4F47414944;
    v24._object = (void *)0xE800000000000000;
    v25._countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    v41._countAndFlagsBits = 0;
    v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v41);
    object = v26._object;
    countAndFlagsBits = v26._countAndFlagsBits;

    v14 = v6[31];
    v15 = v6[33];
    v33 = v6[32];
    v34 = v6[30];
    v16 = v6[36];
    v32 = v6[35];
    v18 = v6[37];
    v17 = v6[38];
    v19 = v6[40];
    v20 = v6[41];
    v21 = v6[42];
    v22 = v6[43];
    goto LABEL_6;
  }
  if (v9)
  {
    result = sub_100020C50((uint64_t)v38);
LABEL_8:
    v31 = 0;
    v30 = 0;
    v27 = 0;
    v15 = 0;
    v28 = 0;
    v18 = 0;
    v17 = 0;
    v19 = 0;
    v21 = 0;
    v22 = 0;
    v29 = 0xE000000000000000;
    v14 = 0xE000000000000000;
    v16 = 0xE000000000000000;
    v20 = 0xE000000000000000;
    goto LABEL_9;
  }
  v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v40._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 0x5F45434146525553;
  v11._object = (void *)0xEC00000041455241;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v40._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v40);
  object = v13._object;
  countAndFlagsBits = v13._countAndFlagsBits;

  v14 = v6[46];
  v15 = v6[48];
  v33 = v6[47];
  v34 = v6[45];
  v16 = v6[51];
  v32 = v6[50];
  v18 = v6[52];
  v17 = v6[53];
  v19 = v6[55];
  v20 = v6[56];
  v21 = v6[57];
  v22 = v6[58];
LABEL_6:
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  result = sub_100020C50((uint64_t)v38);
  v28 = v32;
  v27 = v33;
  v30 = v34;
  v29 = (unint64_t)object;
  v31 = countAndFlagsBits;
LABEL_9:
  *a2 = v31;
  a2[1] = v29;
  a2[2] = v30;
  a2[3] = v14;
  a2[4] = v27;
  a2[5] = v15;
  a2[6] = v28;
  a2[7] = v16;
  a2[8] = v18;
  a2[9] = v17;
  a2[10] = v19;
  a2[11] = v20;
  a2[12] = v21;
  a2[13] = v22;
  return result;
}

_QWORD *sub_100020ACC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[8];
  v6 = a1[11];
  v7 = a1[13];
  v8 = a1[16];
  v9 = a1[18];
  v10 = a1[21];
  v12 = a1[23];
  v13 = a1[26];
  v14 = a1[28];
  v15 = a1[31];
  v16 = a1[33];
  v17 = a1[36];
  v18 = a1[38];
  v19 = a1[41];
  v20 = a1[43];
  v21 = a1[46];
  v22 = a1[48];
  v23 = a1[51];
  v24 = a1[53];
  v25 = a1[56];
  swift_bridgeObjectRetain(a1[58]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  return a1;
}

uint64_t sub_100020C50(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v17 = *(_OWORD *)(a1 + 464);
  v18 = *(_OWORD *)(a1 + 480);
  v15 = *(_OWORD *)(a1 + 432);
  v16 = *(_OWORD *)(a1 + 448);
  v13 = *(_OWORD *)(a1 + 400);
  v14 = *(_OWORD *)(a1 + 416);
  v11 = *(_OWORD *)(a1 + 368);
  v12 = *(_OWORD *)(a1 + 384);
  v9 = *(_OWORD *)(a1 + 336);
  v10 = *(_OWORD *)(a1 + 352);
  v7 = *(_OWORD *)(a1 + 304);
  v8 = *(_OWORD *)(a1 + 320);
  v6 = *(_OWORD *)(a1 + 288);
  v5 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 256);
  v3 = *(_OWORD *)(a1 + 240);
  sub_100020E24(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(_QWORD *)(a1 + 496));
  return a1;
}

uint64_t sub_100020E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a67;
  uint64_t a69;
  uint64_t a70;
  uint64_t result;
  unint64_t v72;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;

  result = a14;
  v72 = (STACK[0x460] >> 38) & 3;
  switch((_DWORD)v72)
  {
    case 2:
      v86 = STACK[0x458];
      v79 = STACK[0x448];
      v85 = STACK[0x430];
      v78 = STACK[0x420];
      v84 = STACK[0x408];
      v77 = STACK[0x3F8];
      v83 = STACK[0x3E0];
      v76 = STACK[0x3D0];
      v82 = STACK[0x3B8];
      v75 = STACK[0x3A8];
      v81 = STACK[0x390];
      v74 = STACK[0x380];
      v80 = STACK[0x368];
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a7);
      swift_bridgeObjectRelease(a12);
      swift_bridgeObjectRelease(a17);
      swift_bridgeObjectRelease(a22);
      swift_bridgeObjectRelease(a27);
      swift_bridgeObjectRelease(a32);
      swift_bridgeObjectRelease(a37);
      swift_bridgeObjectRelease(a42);
      swift_bridgeObjectRelease(a47);
      swift_bridgeObjectRelease(a52);
      swift_bridgeObjectRelease(a57);
      swift_bridgeObjectRelease(a62);
      swift_bridgeObjectRelease(a67);
      swift_bridgeObjectRelease(a70);
      swift_bridgeObjectRelease(v74);
      swift_bridgeObjectRelease(v75);
      swift_bridgeObjectRelease(v76);
      swift_bridgeObjectRelease(v77);
      swift_bridgeObjectRelease(v78);
      swift_bridgeObjectRelease(v79);
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(a9);
      swift_bridgeObjectRelease(a14);
      swift_bridgeObjectRelease(a19);
      swift_bridgeObjectRelease(a24);
      swift_bridgeObjectRelease(a29);
      swift_bridgeObjectRelease(a34);
      swift_bridgeObjectRelease(a39);
      swift_bridgeObjectRelease(a44);
      swift_bridgeObjectRelease(a49);
      swift_bridgeObjectRelease(a54);
      swift_bridgeObjectRelease(a59);
      swift_bridgeObjectRelease(a64);
      swift_bridgeObjectRelease(a69);
      swift_bridgeObjectRelease(v80);
      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v83);
      swift_bridgeObjectRelease(v84);
      swift_bridgeObjectRelease(v85);
      return swift_bridgeObjectRelease(v86);
    case 1:
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a7);
      swift_bridgeObjectRelease(a12);
      swift_bridgeObjectRelease(a17);
      swift_bridgeObjectRelease(a22);
      swift_bridgeObjectRelease(a27);
      swift_bridgeObjectRelease(a32);
      swift_bridgeObjectRelease(a37);
      swift_bridgeObjectRelease(a42);
      swift_bridgeObjectRelease(a47);
      swift_bridgeObjectRelease(a52);
      swift_bridgeObjectRelease(a57);
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(a9);
      swift_bridgeObjectRelease(a14);
      swift_bridgeObjectRelease(a19);
      swift_bridgeObjectRelease(a24);
      swift_bridgeObjectRelease(a29);
      swift_bridgeObjectRelease(a34);
      swift_bridgeObjectRelease(a39);
      swift_bridgeObjectRelease(a44);
      swift_bridgeObjectRelease(a49);
      swift_bridgeObjectRelease(a54);
      return swift_bridgeObjectRelease(a59);
    case 0:
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a7);
      swift_bridgeObjectRelease(a12);
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(a9);
      swift_bridgeObjectRelease(a14);
      return sub_1000212A4(a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  return result;
}

uint64_t sub_1000212A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a12);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a9);
    return swift_bridgeObjectRelease(a14);
  }
  return result;
}

_QWORD *sub_100021314(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[8];
  v6 = a1[11];
  swift_bridgeObjectRetain(a1[13]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *sub_100021388(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v13 = a1[1];
  v14 = a1[3];
  v12 = a1[6];
  v2 = a1[11];
  v15 = a1[8];
  v16 = a1[13];
  v3 = a1[16];
  v4 = a1[21];
  v17 = a1[18];
  v18 = a1[23];
  v5 = a1[26];
  v6 = a1[31];
  v19 = a1[28];
  v20 = a1[33];
  v7 = a1[36];
  v8 = a1[41];
  v21 = a1[38];
  v22 = a1[43];
  v9 = a1[46];
  v10 = a1[51];
  v23 = a1[48];
  v24 = a1[53];
  v25 = a1[58];
  swift_bridgeObjectRelease(a1[56]);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v25);
  return a1;
}

_QWORD *sub_10002150C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[8];
  v6 = a1[13];
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

void sub_100021580(void *a1, void *a2, char a3)
{

  if ((a3 & 1) == 0)
}

void sub_1000215C4()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *ObjCClassFromMetadata;
  uint64_t v14;
  uint64_t v15;

  v1 = &v0[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_numberOfRowsChangedCallback];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_minContentViewHeight] = 0x407AA00000000000;
  v2 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v3 = objc_msgSend(v2, "preferredContentSizeCategory");

  LOBYTE(v2) = UIContentSizeCategory.isAccessibilityCategory.getter(v3);
  v4 = 88.0;
  if ((v2 & 1) != 0)
    v4 = 222.0;
  *(double *)&v0[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_tableRowHeight] = v4;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_numberOfRows] = 2;
  v5 = OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_sketchView;
  v6 = type metadata accessor for SketchSurface();
  *(_QWORD *)&v0[v5] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v6)), "init");
  v7 = OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_labelStrip;
  v8 = type metadata accessor for SurfaceLabelStrip();
  *(_QWORD *)&v0[v7] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v8)), "init");
  v9 = OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_tableView;
  v10 = type metadata accessor for IntrinsicTableView();
  *(_QWORD *)&v0[v9] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v10)), "init");
  v11 = OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilityLength;
  v12 = type metadata accessor for AccessibilityTripleStack();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v12);
  *(_QWORD *)&v0[v11] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v14 = OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilityWidth;
  *(_QWORD *)&v0[v14] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v15 = OBJC_IVAR____TtC7Measure23RectanglePlatterSpatial_accessibilitySeparator;
  *(_QWORD *)&v0[v15] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/RectanglePlatterSpatial.swift", 37, 2, 154, 0);
  __break(1u);
}

uint64_t sub_1000217BC(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void sub_1000217CC()
{
  qword_10047C130 = 0x4024000000000000;
}

void sub_1000217DC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  double v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  double v46;
  id v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  Class isa;
  uint64_t v58;

  v1 = v0;
  v2 = OBJC_IVAR____TtC7Measure29LineHistoryCellWithScreenshot_screenshot;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC7Measure29LineHistoryCellWithScreenshot_screenshot], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_bottomContentAnchor;
  v4 = *(void **)&v0[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_bottomContentAnchor];
  if (!v4)
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  objc_msgSend(v4, "setActive:", 0);
  v5 = objc_msgSend(*(id *)&v0[v2], "bottomAnchor");
  v6 = objc_msgSend(v1, "contentView");
  v7 = objc_msgSend(v6, "bottomAnchor");

  if (qword_10047A758 != -1)
    swift_once(&qword_10047A758, sub_10000EF18);
  v8 = objc_msgSend(v5, "constraintEqualToAnchor:constant:", v7, -*(double *)&qword_1004AF090);

  v9 = *(void **)&v1[v3];
  *(_QWORD *)&v1[v3] = v8;

  v11 = *(void **)&v1[v3];
  if (!v11)
    goto LABEL_21;
  LODWORD(v10) = 1148813312;
  objc_msgSend(v11, "setPriority:", v10);
  v12 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v13 = swift_allocObject(v12, 64, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1003B1410;
  v14 = objc_msgSend(*(id *)&v1[v2], "leadingAnchor");
  v15 = objc_msgSend(v1, "contentView");
  v16 = objc_msgSend(v15, "leadingAnchor");

  if (qword_10047A7A0 != -1)
    swift_once(&qword_10047A7A0, sub_10000F068);
  v17 = objc_msgSend(v14, "constraintEqualToAnchor:constant:", v16, *(double *)&qword_1004AF0F0);

  *(_QWORD *)(v13 + 32) = v17;
  v18 = objc_msgSend(*(id *)&v1[v2], "trailingAnchor");
  v19 = objc_msgSend(v1, "contentView");
  v20 = objc_msgSend(v19, "trailingAnchor");

  v21 = objc_msgSend(v18, "constraintEqualToAnchor:constant:", v20, -*(double *)&qword_1004AF0F0);
  *(_QWORD *)(v13 + 40) = v21;
  v22 = objc_msgSend(*(id *)&v1[v2], "heightAnchor");
  v23 = objc_msgSend(*(id *)&v1[v2], "widthAnchor");
  v24 = objc_msgSend(v22, "constraintLessThanOrEqualToAnchor:multiplier:", v23, 0.75);

  *(_QWORD *)(v13 + 48) = v24;
  v26 = *(void **)&v1[v3];
  if (!v26)
    goto LABEL_22;
  *(_QWORD *)(v13 + 56) = v26;
  v58 = v13;
  specialized Array._endMutation()(v25);
  v27 = (void *)objc_opt_self(UITraitCollection);
  v28 = v26;
  v29 = objc_msgSend(v27, "currentTraitCollection");
  v30 = objc_msgSend(v29, "preferredContentSizeCategory");

  LOBYTE(v29) = UIContentSizeCategory.isAccessibilityCategory.getter(v30);
  if ((v29 & 1) != 0)
  {
    v31 = objc_msgSend(*(id *)&v1[v2], "topAnchor");
    v32 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_accessibleMeasureContent], "bottomAnchor");
    v33 = objc_msgSend(v31, "constraintEqualToAnchor:constant:", v32, *(double *)&qword_1004AF090);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v35 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v34 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v35 >= v34 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
    v36 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v33);
    specialized Array._endMutation()(v36);
LABEL_19:
    v56 = (void *)objc_opt_self(NSLayoutConstraint);
    sub_10002277C();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v58);
    objc_msgSend(v56, "activateConstraints:", isa);

    return;
  }
  v37 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchBottomAnchor;
  v38 = *(void **)&v1[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchBottomAnchor];
  if (!v38)
    goto LABEL_23;
  objc_msgSend(v38, "setActive:", 0);
  v39 = objc_msgSend(*(id *)&v1[v2], "topAnchor");
  v40 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchView], "bottomAnchor");
  v41 = objc_msgSend(v39, "constraintGreaterThanOrEqualToAnchor:constant:", v40, *(double *)&qword_1004AF090);

  v42 = *(void **)&v1[v37];
  *(_QWORD *)&v1[v37] = v41;

  v43 = objc_msgSend(*(id *)&v1[v2], "topAnchor");
  v44 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_measureContent], "bottomAnchor");
  v45 = objc_msgSend(v43, "constraintEqualToAnchor:", v44);

  LODWORD(v46) = 1148813312;
  objc_msgSend(v45, "setPriority:", v46);
  v47 = v45;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v49 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v48 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v49 >= v48 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
  v50 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v47);
  specialized Array._endMutation()(v50);
  v51 = *(void **)&v1[v37];
  if (v51)
  {
    v52 = v51;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v54 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v53 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v54 >= v53 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
    v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v52);
    specialized Array._endMutation()(v55);

    goto LABEL_19;
  }
LABEL_24:
  __break(1u);
}

char *sub_100021E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  objc_class *ObjectType;
  uint64_t v8;
  id v9;
  char *v10;
  NSString v11;
  char *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  id v17;
  id v18;
  objc_super v20;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType(v3);
  v8 = OBJC_IVAR____TtC7Measure29LineHistoryCellWithScreenshot_screenshot;
  v9 = objc_allocWithZone((Class)UIImageView);
  v10 = v4;
  *(_QWORD *)&v4[v8] = objc_msgSend(v9, "init");

  if (a3)
  {
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v11 = 0;
  }
  v20.receiver = v10;
  v20.super_class = ObjectType;
  v12 = (char *)objc_msgSendSuper2(&v20, "initWithStyle:reuseIdentifier:", a1, v11);

  v13 = OBJC_IVAR____TtC7Measure29LineHistoryCellWithScreenshot_screenshot;
  v14 = *(void **)&v12[OBJC_IVAR____TtC7Measure29LineHistoryCellWithScreenshot_screenshot];
  v15 = v12;
  objc_msgSend(v14, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(*(id *)&v12[v13], "setClipsToBounds:", 1);
  v16 = qword_10047A838;
  v17 = *(id *)&v12[v13];
  if (v16 != -1)
    swift_once(&qword_10047A838, sub_1000217CC);
  objc_msgSend(v17, "_setContinuousCornerRadius:", *(double *)&qword_10047C130);

  v18 = objc_msgSend(v15, "contentView");
  objc_msgSend(v18, "addSubview:", *(_QWORD *)&v12[v13]);

  sub_1000217DC();
  return v15;
}

char *sub_100022054(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  id v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  objc_super v16;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = OBJC_IVAR____TtC7Measure29LineHistoryCellWithScreenshot_screenshot;
  v5 = objc_allocWithZone((Class)UIImageView);
  v6 = v1;
  *(_QWORD *)&v1[v4] = objc_msgSend(v5, "init");

  v16.receiver = v6;
  v16.super_class = ObjectType;
  v7 = (char *)objc_msgSendSuper2(&v16, "initWithCoder:", a1);
  v8 = v7;
  if (v7)
  {
    v9 = OBJC_IVAR____TtC7Measure29LineHistoryCellWithScreenshot_screenshot;
    v10 = *(void **)&v7[OBJC_IVAR____TtC7Measure29LineHistoryCellWithScreenshot_screenshot];
    v11 = v7;
    objc_msgSend(v10, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(*(id *)&v8[v9], "setClipsToBounds:", 1);
    v12 = qword_10047A838;
    v13 = *(id *)&v8[v9];
    if (v12 != -1)
      swift_once(&qword_10047A838, sub_1000217CC);
    objc_msgSend(v13, "_setContinuousCornerRadius:", *(double *)&qword_10047C130);

    v14 = objc_msgSend(v11, "contentView");
    objc_msgSend(v14, "addSubview:", *(_QWORD *)&v8[v9]);

    sub_1000217DC();
  }

  return v8;
}

void sub_1000221E0()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = OBJC_IVAR____TtC7Measure29LineHistoryCellWithScreenshot_screenshot;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC7Measure29LineHistoryCellWithScreenshot_screenshot], "removeFromSuperview");
  v3 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v4 = *(void **)&v0[v2];
  *(_QWORD *)&v0[v2] = v3;

  v8.receiver = v0;
  v8.super_class = ObjectType;
  objc_msgSendSuper2(&v8, "prepareForReuse");
  objc_msgSend(*(id *)&v0[v2], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(*(id *)&v0[v2], "setClipsToBounds:", 1);
  v5 = qword_10047A838;
  v6 = *(id *)&v0[v2];
  if (v5 != -1)
    swift_once(&qword_10047A838, sub_1000217CC);
  objc_msgSend(v6, "_setContinuousCornerRadius:", *(double *)&qword_10047C130);

  v7 = objc_msgSend(v0, "contentView");
  objc_msgSend(v7, "addSubview:", *(_QWORD *)&v0[v2]);

  sub_1000217DC();
}

uint64_t sub_100022344(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSString v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  NSString v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[848];
  _BYTE v48[848];

  v3 = type metadata accessor for MeasurementHistoryItem(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000226FC(a1, (uint64_t)v5);
  sub_10001F970(&v5[*(int *)(v3 + 28)], v47);
  sub_10001F970(v47, v48);
  if (sub_10001F9AC((uint64_t)v48))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ALL, 0x80000001003D8820, "Measure/LineHistoryCellWithScreenshot.swift", 43, 2, 107, 0);
    __break(1u);
  }
  else
  {
    v46 = a1;
    v6 = sub_10001F9B8((uint64_t)v48);
    v7 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
    v8 = objc_msgSend(v7, "preferredContentSizeCategory");

    LOBYTE(v7) = UIContentSizeCategory.isAccessibilityCategory.getter(v8);
    if ((v7 & 1) != 0)
    {
      v9 = *(void **)(v1 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_accessibleMeasureContent);
      v10 = *((_QWORD *)v5 + 2);
      v11 = (void *)*((_QWORD *)v5 + 3);
      v12 = *(_QWORD *)(v6 + 40);
      v13 = *(_QWORD *)(v6 + 48);
      v14 = *(_QWORD *)(v6 + 56);
      v44 = *(NSString *)(v6 + 64);
      v45 = v1;
      v43 = *(_OWORD *)(v6 + 80);
      v16 = *(_QWORD *)(v6 + 96);
      v15 = *(_QWORD *)(v6 + 104);
      v17 = v9;
      v18 = v13;
      v19 = v45;
      sub_100125740(v10, (uint64_t)v11, v10, v11, v12, v18, v14, (uint64_t)v44, v43, *((uint64_t *)&v43 + 1), v16, v15);
      v20 = v46;
    }
    else
    {
      v21 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_measureContent;
      v22 = objc_retain(*(id *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_measureContent)
                              + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_title));
      v23 = String._bridgeToObjectiveC()();
      objc_msgSend(v22, "setText:", v23);

      v24 = *(void **)(*(_QWORD *)(v1 + v21) + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits);
      v25 = *(_QWORD *)v6;
      v26 = *(_QWORD *)(v6 + 8);
      v27 = *(_QWORD *)(v6 + 40);
      v28 = *(_QWORD *)(v6 + 48);
      v29 = *(_QWORD *)(v6 + 56);
      v44 = *(NSString *)(v6 + 64);
      v45 = v29;
      v30 = *(_QWORD *)(v6 + 80);
      v42 = *(_QWORD *)(v6 + 88);
      *(_QWORD *)&v43 = v30;
      v41 = *(_QWORD *)(v6 + 96);
      v31 = *(_QWORD *)(v6 + 104);
      v39 = v27;
      v40 = v31;
      v32 = v24;
      v33 = String._bridgeToObjectiveC()();
      objc_msgSend(v32, "setText:", v33);

      v19 = v1;
      v34 = v28;
      v35 = v39;

      v36 = *(void **)(*(_QWORD *)(v19 + v21)
                     + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels);
      if (v25 == v35 && v26 == v34)
        v37 = 1;
      else
        v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v35, v34, 0);
      v20 = v46;
      v17 = v36;
      sub_100134B8C(v35, v34, v45, v44, v43, v42, v41, v40, v37 & 1);
    }

    objc_msgSend(*(id *)(v19 + OBJC_IVAR____TtC7Measure29LineHistoryCellWithScreenshot_screenshot), "setImage:", *(_QWORD *)(v20 + *(int *)(type metadata accessor for SpatialPlattersHistoryItem(0) + 20)));
    return sub_100022740((uint64_t)v5);
  }
  return result;
}

void sub_1000226B8()
{
  uint64_t v0;

}

uint64_t type metadata accessor for LineHistoryCellWithScreenshot()
{
  return objc_opt_self(_TtC7Measure29LineHistoryCellWithScreenshot);
}

uint64_t sub_1000226FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MeasurementHistoryItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100022740(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MeasurementHistoryItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10002277C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100486300;
  if (!qword_100486300)
  {
    v1 = objc_opt_self(NSLayoutConstraint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100486300);
  }
  return result;
}

uint64_t sub_1000227FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC7Measure11AppDelegate____lazy_storage___perfTestRunner;
  result = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure11AppDelegate____lazy_storage___perfTestRunner);
  if (result)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure11AppDelegate____lazy_storage___perfTestRunner);
LABEL_5:
    swift_retain();
    return v3;
  }
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure11AppDelegate_coordinator);
  if (v4)
  {
    v5 = type metadata accessor for PerformanceTestRunner();
    v3 = swift_allocObject(v5, 24, 7);
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(v0 + v1) = v3;
    swift_retain();
    swift_retain();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id sub_100022884()
{
  char *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, __n128);
  __n128 v8;
  uint64_t v9;
  objc_super v11;

  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure11AppDelegate_window] = 0;
  v1 = OBJC_IVAR____TtC7Measure11AppDelegate__appState;
  KeyPath = swift_getKeyPath(&unk_1003B1738);
  v3 = sub_10000EDC8((uint64_t *)&unk_100481B90);
  v4 = qword_10047AD88;
  v5 = v0;
  if (v4 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v6 = qword_1004AF890;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v3 + 272);
  v8 = swift_retain(qword_1004AF890);
  *(_QWORD *)&v5[v1] = v7(KeyPath, v6, v8);
  v9 = OBJC_IVAR____TtC7Measure11AppDelegate_accessibilityListener;
  *(_QWORD *)&v5[v9] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AccessiblityUISettingsObserver()), "init");
  *(_QWORD *)&v5[OBJC_IVAR____TtC7Measure11AppDelegate_coordinator] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7Measure11AppDelegate____lazy_storage___perfTestRunner] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7Measure11AppDelegate_randomSeed] = 1234567890;

  v11.receiver = v5;
  v11.super_class = (Class)type metadata accessor for AppDelegate();
  return objc_msgSendSuper2(&v11, "init");
}

id sub_1000229C8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC7Measure11AppDelegate);
}

void sub_100022A80(uint64_t a1)
{
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC7Measure11AppDelegate_coordinator))
  {
    swift_retain();
    sub_1000ED4A0();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

_BYTE *sub_100022ABC(_BYTE *result)
{
  *result = 0;
  return result;
}

_BYTE *sub_100022BA0(_BYTE *result)
{
  *result = 1;
  return result;
}

_BYTE *sub_100022BF8(_BYTE *result)
{
  *result = 2;
  return result;
}

_BYTE *sub_100022CEC(_BYTE *result)
{
  *result = 3;
  return result;
}

void sub_100022DD8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  char v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t (*v7)(__n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  char v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  _BYTE v23[17];

  v2 = v1;
  v3 = a1;
  v4 = sub_100199224(v3);

  if (v4 != 2)
  {
    if (qword_10047AA70 != -1)
      swift_once(&qword_10047AA70, sub_1000E13E4);
    v23[8] = 0;
    *(_QWORD *)&v23[9] = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    v5._object = (void *)0x80000001003D8950;
    v5._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v5);
    *(_QWORD *)v23 = v4 & 1;
    _print_unlocked<A, B>(_:_:)(v23, &v23[1], &type metadata for Tab, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v6 = *(_QWORD *)&v23[9];
    Log.default(_:isPrivate:)(*(Swift::String *)&v23[1], 0);
    swift_bridgeObjectRelease(v6);
    v7 = *(uint64_t (**)(__n128))(**(_QWORD **)(v2 + OBJC_IVAR____TtC7Measure11AppDelegate__appState) + 200);
    v8 = swift_retain();
    v9 = v7(v8);
    swift_release();
    v10 = swift_allocObject(&unk_10043F130, 17, 7);
    *(_BYTE *)(v10 + 16) = v4 & 1;
    (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(*(_QWORD *)v9 + 280))(sub_100023EFC, v10);
    swift_release();
    swift_release();
    v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure11AppDelegate_coordinator);
    if (v11)
    {
      v12 = *(void **)(v11 + 104);
      if (v12)
      {
        swift_retain();
        v13 = v12;
        v14 = sub_1001CA530(v4 & 1, (uint64_t)&off_10043BC98);
        if ((v15 & 1) == 0)
        {
          objc_msgSend(v13, "setSelectedIndex:", v14);
          swift_release();

          return;
        }
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  if (qword_10047AA70 != -1)
    swift_once(&qword_10047AA70, sub_1000E13E4);
  _StringGuts.grow(_:)(46);
  v16 = objc_msgSend(v3, "description", swift_bridgeObjectRelease(0xE000000000000000).n128_f64[0]);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  v21._countAndFlagsBits = 0x6C7561666544202ELL;
  v21._object = (void *)0xED00002E676E6974;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0xD00000000000001FLL;
  v22._object = (void *)0x80000001003D8930;
  Log.error(_:isPrivate:)(v22, 0);
  swift_bridgeObjectRelease(0x80000001003D8930);
}

uint64_t sub_100023364(char a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t KeyPath;
  void *v5;
  char v6;
  uint64_t i;
  uint64_t v8;
  id v9;
  char v11;
  uint64_t v12;
  char v13[112];

  v2 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  inited = swift_initStackObject(v2, v13);
  *(_OWORD *)(inited + 16) = xmmword_1003B1450;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1003B14B0);
  *(_QWORD *)(inited + 40) = swift_getKeyPath(&unk_1003B1508);
  *(_QWORD *)(inited + 48) = swift_getKeyPath(&unk_1003B1548);
  *(_QWORD *)(inited + 56) = swift_getKeyPath(&unk_1003B1588);
  *(_QWORD *)(inited + 64) = swift_getKeyPath(&unk_1003B15C8);
  *(_QWORD *)(inited + 72) = swift_getKeyPath(&unk_1003B1608);
  *(_QWORD *)(inited + 80) = swift_getKeyPath(&unk_1003B1648);
  *(_QWORD *)(inited + 88) = swift_getKeyPath(&unk_1003B1688);
  *(_QWORD *)(inited + 96) = swift_getKeyPath(&unk_1003B16C8);
  KeyPath = swift_getKeyPath(&unk_1003B1710);
  *(_QWORD *)(inited + 104) = KeyPath;
  v12 = inited;
  specialized Array._endMutation()(KeyPath);
  v5 = (void *)objc_opt_self(NSUserDefaults);
  v6 = a1 & 1;
  for (i = 4; i != 14; ++i)
  {
    if ((inited & 0xC000000000000001) != 0)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, inited);
    }
    else
    {
      v8 = *(_QWORD *)(inited + 8 * i);
      swift_retain(v8);
    }
    v9 = objc_msgSend(v5, "standardUserDefaults");
    v12 = (uint64_t)v9;
    v11 = v6;
    swift_setAtReferenceWritableKeyPath(&v12, v8, &v11);
    swift_release(v8);

  }
  return swift_bridgeObjectRelease(inited);
}

void sub_10002350C(void *a1)
{
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  void *object;
  NSString v6;
  void *v7;
  id v8;
  id v9;
  NSString v10;
  NSString v11;
  id v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  NSString v17;
  id v18;
  id v19;
  NSString v20;
  NSString v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  Class isa;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;

  v1 = (void *)objc_opt_self(NSBundle);
  v2 = objc_msgSend(v1, "mainBundle");
  v30._object = (void *)0xE000000000000000;
  v3._countAndFlagsBits = 0x4552555341454DLL;
  v3._object = (void *)0xE700000000000000;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v30._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v30)._object;

  v6 = String._bridgeToObjectiveC()();
  v7 = (void *)objc_opt_self(UIApplicationShortcutIcon);
  v8 = objc_msgSend(v7, "iconWithSystemImageName:", v6);

  v9 = objc_allocWithZone((Class)UIApplicationShortcutItem);
  v10 = String._bridgeToObjectiveC()();
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v12 = objc_msgSend(v9, "initWithType:localizedTitle:localizedSubtitle:icon:userInfo:", v10, v11, 0, v8, 0);

  v13 = objc_msgSend(v1, "mainBundle");
  v31._object = (void *)0xE000000000000000;
  v14._countAndFlagsBits = 0x4C4556454CLL;
  v14._object = (void *)0xE500000000000000;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v31._countAndFlagsBits = 0;
  v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v31)._object;

  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v7, "iconWithSystemImageName:", v17);

  v19 = objc_allocWithZone((Class)UIApplicationShortcutItem);
  v20 = String._bridgeToObjectiveC()();
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  v22 = objc_msgSend(v19, "initWithType:localizedTitle:localizedSubtitle:icon:userInfo:", v20, v21, 0, v18, 0);

  v23 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v24 = swift_allocObject(v23, 48, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1003B1460;
  *(_QWORD *)(v24 + 32) = v22;
  *(_QWORD *)(v24 + 40) = v12;
  v29 = v24;
  specialized Array._endMutation()(v24);
  sub_100018148(0, &qword_10047C290, UIApplicationShortcutItem_ptr);
  v25 = v22;
  v26 = v12;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v29);
  objc_msgSend(a1, "setShortcutItems:", isa);

}

void sub_100023828(void *a1)
{
  char *v1;
  char *v2;
  Swift::String v4;
  char v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t (*v20)(__n128);
  __n128 v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  _QWORD v25[6];

  v2 = v1;
  if (qword_10047AA70 != -1)
    swift_once(&qword_10047AA70, sub_1000E13E4);
  v4._countAndFlagsBits = 0xD000000000000041;
  v4._object = (void *)0x80000001003D8A10;
  Log.debug(_:isPrivate:)(v4, 0);
  srand48(1234567890);
  v5 = objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable");
  sub_100023364(v5);
  v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setBool:forKey:", 1, v7);

  v8 = objc_msgSend(objc_allocWithZone((Class)UIWindow), "init");
  v9 = type metadata accessor for MeasureCoordinator(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = sub_1000F2440(v8);
  v11 = OBJC_IVAR____TtC7Measure11AppDelegate_coordinator;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11AppDelegate_coordinator] = v10;
  swift_release();
  v12 = (void *)objc_opt_self(MeasureApplication);
  v13 = objc_msgSend(v12, "sharedApplication");
  v14 = objc_msgSend(v13, "statusBarOrientation");

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  v15 = qword_1004AF250;
  if (v14 == (id)qword_1004AF250)
  {
    if (!*(_QWORD *)&v2[v11])
    {
      __break(1u);
      return;
    }
    swift_retain();
    sub_1000ED4A0();
    swift_release();
  }
  else
  {
    v16 = objc_msgSend(v12, "sharedApplication");
    v17 = swift_allocObject(&unk_10043F158, 24, 7);
    *(_QWORD *)(v17 + 16) = v2;
    v25[4] = sub_100023F74;
    v25[5] = v17;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 1107296256;
    v25[2] = sub_10003ECA0;
    v25[3] = &unk_10043F170;
    v18 = _Block_copy(v25);
    v19 = v2;
    objc_msgSend(v16, "performWhileOverriddingStatusBarOrientation:block:", v15, v18, swift_release().n128_f64[0]);
    _Block_release(v18);

  }
  v20 = *(uint64_t (**)(__n128))(**(_QWORD **)&v2[OBJC_IVAR____TtC7Measure11AppDelegate__appState] + 200);
  v21 = swift_retain();
  v22 = v20(v21);
  v23 = swift_release();
  (*(void (**)(_BYTE *(*)(_BYTE *), _QWORD, __n128))(*(_QWORD *)v22 + 280))(sub_100022ABC, 0, v23);
  swift_release();
  v24 = sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
  if ((static UIDevice.isIPhone()(v24) & 1) != 0)
    sub_10002350C(a1);

}

void sub_100023B68()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t (*v2)(__n128);
  __n128 v3;
  uint64_t v4;
  __n128 v5;
  id v6;

  if (qword_10047AA70 != -1)
    swift_once(&qword_10047AA70, sub_1000E13E4);
  v1._object = (void *)0x80000001003D89F0;
  v1._countAndFlagsBits = 0xD000000000000015;
  Log.default(_:isPrivate:)(v1, 0);
  if (qword_10047AB68 != -1)
    swift_once(&qword_10047AB68, sub_10011E814);
  sub_10011ACD8();
  v2 = *(uint64_t (**)(__n128))(**(_QWORD **)(v0 + OBJC_IVAR____TtC7Measure11AppDelegate__appState) + 200);
  v3 = swift_retain();
  v4 = v2(v3);
  v5 = swift_release();
  (*(void (**)(_BYTE *(*)(_BYTE *), _QWORD, __n128))(*(_QWORD *)v4 + 280))(sub_10002427C, 0, v5);
  swift_release();
  v6 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  objc_msgSend(v6, "beginGeneratingDeviceOrientationNotifications");

}

void sub_100023C9C()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t (*v2)(__n128);
  __n128 v3;
  uint64_t v4;
  __n128 v5;
  id v6;

  if (qword_10047AA70 != -1)
    swift_once(&qword_10047AA70, sub_1000E13E4);
  v1._object = (void *)0x80000001003D89D0;
  v1._countAndFlagsBits = 0xD000000000000016;
  Log.default(_:isPrivate:)(v1, 0);
  v2 = *(uint64_t (**)(__n128))(**(_QWORD **)(v0 + OBJC_IVAR____TtC7Measure11AppDelegate__appState) + 200);
  v3 = swift_retain();
  v4 = v2(v3);
  v5 = swift_release();
  (*(void (**)(_BYTE *(*)(_BYTE *), _QWORD, __n128))(*(_QWORD *)v4 + 280))(sub_100022BA0, 0, v5);
  swift_release();
  v6 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  objc_msgSend(v6, "endGeneratingDeviceOrientationNotifications");

}

void sub_100023D98()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t (*v2)(__n128);
  __n128 v3;
  uint64_t v4;
  __n128 v5;
  id v6;

  if (qword_10047AA70 != -1)
    swift_once(&qword_10047AA70, sub_1000E13E4);
  v1._object = (void *)0x80000001003D89B0;
  v1._countAndFlagsBits = 0xD000000000000018;
  Log.default(_:isPrivate:)(v1, 0);
  v2 = *(uint64_t (**)(__n128))(**(_QWORD **)(v0 + OBJC_IVAR____TtC7Measure11AppDelegate__appState) + 200);
  v3 = swift_retain();
  v4 = v2(v3);
  v5 = swift_release();
  (*(void (**)(_BYTE *(*)(_BYTE *), _QWORD, __n128))(*(_QWORD *)v4 + 280))(sub_100022BF8, 0, v5);
  swift_release();
  if (qword_10047AB68 != -1)
    swift_once(&qword_10047AB68, sub_10011E814);
  sub_10011AE68();
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  if (qword_1004AF240)
  {
    v6 = (id)qword_1004AF240;
    sub_100177FDC(0, 0);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100023EEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100023EFC(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 1) = *(_BYTE *)(v1 + 16);
  return result;
}

unint64_t sub_100023F08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047B5C0;
  if (!qword_10047B5C0)
  {
    type metadata accessor for LaunchOptionsKey(255);
    result = swift_getWitnessTable(&unk_1003B0474, v1);
    atomic_store(result, (unint64_t *)&qword_10047B5C0);
  }
  return result;
}

uint64_t sub_100023F50()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100023F74()
{
  uint64_t v0;

  sub_100022A80(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100023F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100023F8C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

const char *sub_100023F94()
{
  return "shouldRenderOpaqueSurfaces";
}

id sub_100023FA0@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "shouldRenderOpaqueSurfaces");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100023FD0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setShouldRenderOpaqueSurfaces:", *a1);
}

const char *sub_100023FE4()
{
  return "shouldUseNormalsForBoxOrientation";
}

id sub_100023FF0@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "shouldUseNormalsForBoxOrientation");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100024020(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setShouldUseNormalsForBoxOrientation:", *a1);
}

const char *sub_100024034()
{
  return "kADEdgeDetectionEnabled";
}

id sub_100024040@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "kADEdgeDetectionEnabled");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100024070(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setKADEdgeDetectionEnabled:", *a1);
}

const char *sub_100024084()
{
  return "isLabelOcclusionEnabled";
}

id sub_100024090@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isLabelOcclusionEnabled");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000240C0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsLabelOcclusionEnabled:", *a1);
}

const char *sub_1000240D4()
{
  return "isLineOcclusionEnabled";
}

id sub_1000240E0@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isLineOcclusionEnabled");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100024110(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsLineOcclusionEnabled:", *a1);
}

const char *sub_100024124()
{
  return "isPointOcclusionEnabled";
}

id sub_100024130@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isPointOcclusionEnabled");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100024160(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsPointOcclusionEnabled:", *a1);
}

const char *sub_100024174()
{
  return "kDivisionsEnabled";
}

id sub_100024180@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "kDivisionsEnabled");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000241B0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setKDivisionsEnabled:", *a1);
}

const char *sub_1000241C4()
{
  return "showsOnlyYukonEModes";
}

id sub_1000241D0@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "showsOnlyYukonEModes");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100024200(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setShowsOnlyYukonEModes:", *a1);
}

const char *sub_100024214()
{
  return "kPersonHeightEnabled";
}

id sub_100024220@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "kPersonHeightEnabled");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100024250(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setKPersonHeightEnabled:", *a1);
}

const char *sub_100024264()
{
  return "kPersonHeightCoachingEnabled";
}

ValueMetadata *type metadata accessor for ReticleSizeState()
{
  return &type metadata for ReticleSizeState;
}

uint64_t sub_100024290()
{
  uint64_t result;

  result = Contexts.UIKit.init()();
  qword_1004AF188 = result;
  return result;
}

id sub_1000242AC@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A840 != -1)
    swift_once(&qword_10047A840, sub_100024290);
  v2 = (void *)qword_1004AF188;
  *a1 = qword_1004AF188;
  return v2;
}

BOOL sub_1000242FC(float *a1, float *a2)
{
  return *a1 == *a2;
}

unint64_t sub_100024310(uint64_t a1)
{
  unint64_t result;

  result = sub_100024334();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100024334()
{
  unint64_t result;

  result = qword_10047C2C0;
  if (!qword_10047C2C0)
  {
    result = swift_getWitnessTable(&unk_1003B1774, &type metadata for ReticleSizeState);
    atomic_store(result, (unint64_t *)&qword_10047C2C0);
  }
  return result;
}

_QWORD *sub_100024378(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    v8 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_WORD *)(a1 + 72) = *((_WORD *)a2 + 36);
    v9 = *((_OWORD *)a2 + 5);
    v10 = *((_OWORD *)a2 + 6);
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
    *(_WORD *)(a1 + 121) = *(_WORD *)((char *)a2 + 121);
    v11 = a3[23];
    v12 = (void *)(a1 + v11);
    v13 = (char *)a2 + v11;
    *(_OWORD *)(a1 + 80) = v9;
    *(_OWORD *)(a1 + 96) = v10;
    v14 = type metadata accessor for ARCamera.TrackingState(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = sub_10000EDC8(&qword_10047C2C8);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v18 = type metadata accessor for ARCamera.TrackingState.Reason(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v13, 2, v18))
      {
        memcpy(v12, v13, *(_QWORD *)(v15 + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v19 + 16))(v12, v13, v18);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v12, 0, 2, v18);
      }
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v20 = a3[25];
    *(_QWORD *)((char *)v4 + a3[24]) = *(uint64_t *)((char *)a2 + a3[24]);
    *((_BYTE *)v4 + v20) = *((_BYTE *)a2 + v20);
  }
  return v4;
}

uint64_t sub_100024518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = a1 + *(int *)(a2 + 92);
  v3 = type metadata accessor for ARCamera.TrackingState(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  if (!(_DWORD)result)
  {
    v5 = type metadata accessor for ARCamera.TrackingState.Reason(0);
    v6 = *(_QWORD *)(v5 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 2, v5);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
  }
  return result;
}

uint64_t sub_1000245A8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_WORD *)(a1 + 121) = *(_WORD *)(a2 + 121);
  v10 = a3[23];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  v13 = type metadata accessor for ARCamera.TrackingState(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_10000EDC8(&qword_10047C2C8);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = type metadata accessor for ARCamera.TrackingState.Reason(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v12, 2, v16))
    {
      memcpy(v11, v12, *(_QWORD *)(v14 + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v11, v12, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v11, 0, 2, v16);
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v18 = a3[25];
  *(_QWORD *)(a1 + a3[24]) = *(_QWORD *)(a2 + a3[24]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  return a1;
}

uint64_t sub_10002471C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  v6 = a3[23];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for ARCamera.TrackingState(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      v17 = type metadata accessor for ARCamera.TrackingState.Reason(0);
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
      v20 = v19(v7, 2, v17);
      v21 = v19(v8, 2, v17);
      if (v20)
      {
        if (!v21)
        {
          (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v7, v8, v17);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v7, 0, 2, v17);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v21)
        {
          (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v7, v8, v17);
          goto LABEL_14;
        }
        (*(void (**)(void *, uint64_t))(v18 + 8))(v7, v17);
      }
      v16 = *(_QWORD *)(v10 + 64);
      goto LABEL_8;
    }
    sub_1000258F8((uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for ARCamera.TrackingState);
LABEL_7:
    v16 = *(_QWORD *)(*(_QWORD *)(sub_10000EDC8(&qword_10047C2C8) - 8) + 64);
LABEL_8:
    memcpy(v7, v8, v16);
    goto LABEL_14;
  }
  if (v13)
    goto LABEL_7;
  v14 = type metadata accessor for ARCamera.TrackingState.Reason(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v8, 2, v14))
  {
    memcpy(v7, v8, *(_QWORD *)(v10 + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v7, v8, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v7, 0, 2, v14);
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_14:
  *(_QWORD *)(a1 + a3[24]) = *(_QWORD *)(a2 + a3[24]);
  *(_BYTE *)(a1 + a3[25]) = *(_BYTE *)(a2 + a3[25]);
  return a1;
}

uint64_t sub_1000249B4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_WORD *)(a1 + 121) = *(_WORD *)(a2 + 121);
  v10 = a3[23];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  v13 = type metadata accessor for ARCamera.TrackingState(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_10000EDC8(&qword_10047C2C8);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = type metadata accessor for ARCamera.TrackingState.Reason(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v12, 2, v16))
    {
      memcpy(v11, v12, *(_QWORD *)(v14 + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v11, v12, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v11, 0, 2, v16);
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v18 = a3[25];
  *(_QWORD *)(a1 + a3[24]) = *(_QWORD *)(a2 + a3[24]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  return a1;
}

uint64_t sub_100024B28(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  v10 = a3[23];
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  *(_QWORD *)(a1 + 112) = v9;
  v13 = type metadata accessor for ARCamera.TrackingState(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      v21 = type metadata accessor for ARCamera.TrackingState.Reason(0);
      v22 = *(_QWORD *)(v21 - 8);
      v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
      v24 = v23(v11, 2, v21);
      v25 = v23(v12, 2, v21);
      if (v24)
      {
        if (!v25)
        {
          (*(void (**)(void *, void *, uint64_t))(v22 + 32))(v11, v12, v21);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v11, 0, 2, v21);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v25)
        {
          (*(void (**)(void *, void *, uint64_t))(v22 + 40))(v11, v12, v21);
          goto LABEL_14;
        }
        (*(void (**)(void *, uint64_t))(v22 + 8))(v11, v21);
      }
      v20 = *(_QWORD *)(v14 + 64);
      goto LABEL_8;
    }
    sub_1000258F8((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for ARCamera.TrackingState);
LABEL_7:
    v20 = *(_QWORD *)(*(_QWORD *)(sub_10000EDC8(&qword_10047C2C8) - 8) + 64);
LABEL_8:
    memcpy(v11, v12, v20);
    goto LABEL_14;
  }
  if (v17)
    goto LABEL_7;
  v18 = type metadata accessor for ARCamera.TrackingState.Reason(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v12, 2, v18))
  {
    memcpy(v11, v12, *(_QWORD *)(v14 + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v11, v12, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v11, 0, 2, v18);
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_14:
  v26 = a3[25];
  *(_QWORD *)(a1 + a3[24]) = *(_QWORD *)(a2 + a3[24]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  return a1;
}

uint64_t sub_100024D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100024D80);
}

uint64_t sub_100024D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = sub_10000EDC8(&qword_10047C2C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 92), a2, v10);
  }
}

uint64_t sub_100024E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100024E0C);
}

uint64_t sub_100024E0C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 72) = a2 + 1;
  }
  else
  {
    v7 = sub_10000EDC8(&qword_10047C2C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 92), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AppSession(uint64_t a1)
{
  uint64_t result;

  result = qword_10047C328;
  if (!qword_10047C328)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppSession);
  return result;
}

void sub_100024EBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[22];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[9] = &unk_1003B17C8;
  v4[10] = &unk_1003B17C8;
  v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[13] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[14] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[15] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[16] = &unk_1003B17C8;
  v4[17] = &unk_1003B17C8;
  v4[18] = &unk_1003B17C8;
  sub_100024F6C(319);
  if (v3 <= 0x3F)
  {
    v4[19] = *(_QWORD *)(v2 - 8) + 64;
    v4[20] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[21] = &unk_1003B17C8;
    swift_initStructMetadata(a1, 256, 22, v4, a1 + 16);
  }
}

void sub_100024F6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10047C338)
  {
    v2 = type metadata accessor for ARCamera.TrackingState(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10047C338);
  }
}

void sub_100024FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  char *v12;
  double v13;
  double v14;
  unsigned int v15;
  uint64_t v16;
  double v17;
  double v18;
  char v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  char v26;
  char v27;
  uint64_t v28;

  v1 = type metadata accessor for AppSession(0);
  v2 = __chkstk_darwin(v1);
  v4 = (double *)((char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __chkstk_darwin(v2);
  v7 = (double *)((char *)&v28 - v6);
  v8 = __chkstk_darwin(v5);
  v10 = (double *)((char *)&v28 - v9);
  __chkstk_darwin(v8);
  v12 = (char *)&v28 - v11;
  v13 = CACurrentMediaTime();
  v14 = *(double *)(v0 + 112);
  v15 = objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable");
  sub_1000258B4(v0, (uint64_t)v12);
  if (!v15)
  {
    sub_1000258F8((uint64_t)v12, type metadata accessor for AppSession);
    if ((*(_BYTE *)(v0 + 72) & 1) == 0)
      goto LABEL_11;
LABEL_8:
    v19 = 9;
    goto LABEL_9;
  }
  v16 = *((_QWORD *)v12 + 12);
  sub_1000258F8((uint64_t)v12, type metadata accessor for AppSession);
  if ((*(_BYTE *)(v0 + 72) & 1) != 0)
    goto LABEL_8;
  if (v16 >= 1)
  {
    v17 = *(double *)(v0 + 64);
    sub_1000258B4(v0, (uint64_t)v10);
    if (v17 <= 0.0)
    {
      sub_1000258F8((uint64_t)v10, type metadata accessor for AppSession);
    }
    else
    {
      v18 = v10[4];
      sub_1000258F8((uint64_t)v10, type metadata accessor for AppSession);
      if (v18 > 0.0)
      {
        v19 = 10;
LABEL_9:
        sub_100025294(v19);
        return;
      }
    }
    if (*(double *)(v0 + 64) <= 0.0)
    {
      if (*(double *)(v0 + 32) <= 0.0)
        v19 = 13;
      else
        v19 = 12;
    }
    else
    {
      v19 = 11;
    }
    goto LABEL_9;
  }
LABEL_11:
  v20 = *(double *)(v0 + 64);
  sub_1000258B4(v0, (uint64_t)v7);
  if (v20 <= 0.0)
  {
    v21 = v7[4];
    sub_1000258F8((uint64_t)v7, type metadata accessor for AppSession);
    if (v21 <= 0.0)
    {
      v24 = v13 - v14;
      if (*(_BYTE *)(v0 + 121) == 1)
      {
        if (v24 <= 2.0)
        {
          v19 = 3;
          goto LABEL_9;
        }
        v25 = v24 > 10.0;
        v26 = 4;
        v27 = 5;
      }
      else
      {
        if (v24 <= 2.0)
        {
          v19 = 6;
          goto LABEL_9;
        }
        v25 = v24 > 10.0;
        v26 = 7;
        v27 = 8;
      }
      if (v25)
        v19 = v27;
      else
        v19 = v26;
      goto LABEL_9;
    }
  }
  else
  {
    sub_1000258F8((uint64_t)v7, type metadata accessor for AppSession);
  }
  v22 = *(double *)(v0 + 64);
  sub_1000258B4(v0, (uint64_t)v4);
  if (v22 <= 0.0)
  {
    sub_1000258F8((uint64_t)v4, type metadata accessor for AppSession);
  }
  else
  {
    v23 = v4[4];
    sub_1000258F8((uint64_t)v4, type metadata accessor for AppSession);
    if (v23 > 0.0)
    {
      v19 = 2;
      goto LABEL_9;
    }
  }
  if (*(double *)(v0 + 64) > 0.0)
  {
    v19 = 0;
    goto LABEL_9;
  }
  if (*(double *)(v0 + 32) > 0.0)
  {
    v19 = 1;
    goto LABEL_9;
  }
}

void sub_100025294(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v3 = type metadata accessor for ARCamera.TrackingState(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000EDC8(&qword_10047C2C8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v46 - v11;
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    LOBYTE(v49) = a1;
    v13 = String.init<A>(describing:)(&v49, &type metadata for TelemetryValue.SessionSummary);
    v15 = *(double *)v1;
    if ((~*(_QWORD *)v1 & 0x7FF0000000000000) != 0)
    {
      if (v15 > -9.22337204e18)
      {
        if (v15 < 9.22337204e18)
        {
          v16 = *(double *)(v1 + 8);
          if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) != 0)
          {
            if (v16 > -9.22337204e18)
            {
              if (v16 < 9.22337204e18)
              {
                v17 = *(double *)(v1 + 16);
                if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) != 0)
                {
                  if (v17 > -9.22337204e18)
                  {
                    if (v17 < 9.22337204e18)
                    {
                      v18 = *(double *)(v1 + 24);
                      if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) != 0)
                      {
                        if (v18 > -9.22337204e18)
                        {
                          if (v18 < 9.22337204e18)
                          {
                            v19 = *(double *)(v1 + 32);
                            if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) != 0)
                            {
                              if (v19 > -9.22337204e18)
                              {
                                if (v19 < 9.22337204e18)
                                {
                                  v20 = v13;
                                  v21 = v14;
                                  v22 = *(_QWORD *)(v1 + 88);
                                  v48 = *(_QWORD *)(v1 + 80);
                                  v23 = *(_QWORD *)(v1 + 96);
                                  v47 = *(_QWORD *)(v1 + 104);
                                  v24 = type metadata accessor for AppSession(0);
                                  v25 = *(unsigned __int8 *)(v1 + *(int *)(v24 + 100));
                                  sub_100025934(v1 + *(int *)(v24 + 92), (uint64_t)v12);
                                  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3);
                                  if ((_DWORD)v26 == 1)
                                  {
                                    sub_10002597C((uint64_t)v12);
                                    v27 = type metadata accessor for ARCamera.TrackingState.Reason(0);
                                    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v6, 1, 2, v27);
                                  }
                                  else
                                  {
                                    v6 = v12;
                                  }
                                  v40 = ARCamera.TrackingState.analyticsDescription.getter(v26);
                                  v42 = v41;
                                  sub_1000258F8((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for ARCamera.TrackingState);
                                  v43 = v25 | 0x8000000000000000;
                                  *(_QWORD *)&v49 = v20;
                                  *((_QWORD *)&v49 + 1) = v21;
                                  v36 = v21;
                                  v50 = (uint64_t)v15;
                                  v51 = (uint64_t)v16;
                                  v52 = (uint64_t)v17;
                                  v53 = (uint64_t)v18;
                                  v54 = (uint64_t)v19;
                                  v55 = v48;
                                  v56 = v22;
                                  *(_QWORD *)&v57 = v23;
                                  *((_QWORD *)&v57 + 1) = v47;
                                  *(_QWORD *)&v58 = v43;
                                  *((_QWORD *)&v58 + 1) = v40;
                                  v59 = v42;
LABEL_40:
                                  sub_100123C84(&v49);
                                  swift_bridgeObjectRelease(v42);
                                  swift_bridgeObjectRelease(v36);
                                  return;
                                }
                                goto LABEL_55;
                              }
LABEL_54:
                              __break(1u);
LABEL_55:
                              __break(1u);
                              goto LABEL_56;
                            }
LABEL_53:
                            __break(1u);
                            goto LABEL_54;
                          }
LABEL_52:
                          __break(1u);
                          goto LABEL_53;
                        }
LABEL_51:
                        __break(1u);
                        goto LABEL_52;
                      }
LABEL_50:
                      __break(1u);
                      goto LABEL_51;
                    }
LABEL_49:
                    __break(1u);
                    goto LABEL_50;
                  }
LABEL_48:
                  __break(1u);
                  goto LABEL_49;
                }
LABEL_47:
                __break(1u);
                goto LABEL_48;
              }
LABEL_46:
              __break(1u);
              goto LABEL_47;
            }
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_43;
  }
  LOBYTE(v49) = a1;
  v28 = String.init<A>(describing:)(&v49, &type metadata for TelemetryValue.SessionSummary);
  v30 = *(double *)v1;
  if ((~*(_QWORD *)v1 & 0x7FF0000000000000) == 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v30 <= -9.22337204e18)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v30 >= 9.22337204e18)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v31 = *(double *)(v1 + 8);
  if ((~*(_QWORD *)&v31 & 0x7FF0000000000000) == 0)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v31 <= -9.22337204e18)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v31 >= 9.22337204e18)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v32 = *(double *)(v1 + 16);
  if ((~*(_QWORD *)&v32 & 0x7FF0000000000000) == 0)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v32 <= -9.22337204e18)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (v32 >= 9.22337204e18)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v33 = *(double *)(v1 + 24);
  if ((~*(_QWORD *)&v33 & 0x7FF0000000000000) == 0)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (v33 <= -9.22337204e18)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (v33 >= 9.22337204e18)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v34 = *(double *)(v1 + 32);
  if ((~*(_QWORD *)&v34 & 0x7FF0000000000000) == 0)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  if (v34 <= -9.22337204e18)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (v34 < 9.22337204e18)
  {
    v35 = v28;
    v36 = v29;
    v37 = type metadata accessor for AppSession(0);
    sub_100025934(v1 + *(int *)(v37 + 92), (uint64_t)v10);
    v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3);
    if ((_DWORD)v38 == 1)
    {
      sub_10002597C((uint64_t)v10);
      v39 = type metadata accessor for ARCamera.TrackingState.Reason(0);
      v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v6, 1, 2, v39);
    }
    else
    {
      v6 = v10;
    }
    v44 = ARCamera.TrackingState.analyticsDescription.getter(v38);
    v42 = v45;
    sub_1000258F8((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for ARCamera.TrackingState);
    *(_QWORD *)&v49 = v35;
    *((_QWORD *)&v49 + 1) = v36;
    v50 = (uint64_t)v30;
    v51 = (uint64_t)v31;
    v52 = (uint64_t)v32;
    v53 = (uint64_t)v33;
    v54 = (uint64_t)v34;
    v55 = v44;
    v56 = v42;
    v57 = 0u;
    v58 = 0u;
    v59 = 0;
    goto LABEL_40;
  }
LABEL_70:
  __break(1u);
}

void sub_10002581C(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)(a1 + 58) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(CFTimeInterval *)(a1 + 112) = CACurrentMediaTime();
  *(_WORD *)(a1 + 120) = 1;
  *(_BYTE *)(a1 + 122) = 0;
  v2 = (int *)type metadata accessor for AppSession(0);
  v3 = a1 + v2[23];
  v4 = type metadata accessor for ARCamera.TrackingState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v2[24];
  *(CFTimeInterval *)(a1 + v5) = CACurrentMediaTime();
  *(_BYTE *)(a1 + v2[25]) = 0;
}

uint64_t sub_1000258B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000258F8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100025934(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8(&qword_10047C2C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002597C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000EDC8(&qword_10047C2C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100025A68(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  id v10;
  void *v11;
  char *v12;
  id v13;
  NSString v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  objc_super v19;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  swift_unknownObjectWeakInit(&v4[OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_lengthLabels], 0);
  swift_unknownObjectWeakInit(&v4[OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_widthLabels], 0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_contentView] = 0;
  v19.receiver = v4;
  v19.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v19, "initWithFrame:", a1, a2, a3, a4);
  v11 = (void *)objc_opt_self(NSBundle);
  v12 = (char *)v10;
  v13 = objc_msgSend(v11, "mainBundle");
  v14 = String._bridgeToObjectiveC()();

  v15 = OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_contentView;
  if (!*(_QWORD *)&v12[OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_contentView])
  {
    __break(1u);
    goto LABEL_6;
  }
  objc_msgSend(v12, "addSubview:");
  v16 = *(void **)&v12[v15];
  if (!v16)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v17 = v16;
  objc_msgSend(v12, "bounds");
  objc_msgSend(v17, "setFrame:");

  v18 = *(void **)&v12[v15];
  if (v18)
  {
    objc_msgSend(v18, "setAutoresizingMask:", 18);

    return;
  }
LABEL_7:
  __break(1u);
}

void sub_100025C38(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  double v4;
  id v5;
  void *v6;
  char *v7;
  id v8;
  NSString v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  objc_super v14;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_lengthLabels], 0);
  *(_QWORD *)&v4 = swift_unknownObjectWeakInit(&v1[OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_widthLabels], 0).n128_u64[0];
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_contentView] = 0;
  v14.receiver = v1;
  v14.super_class = ObjectType;
  v5 = objc_msgSendSuper2(&v14, "initWithCoder:", a1, v4);
  if (!v5)
    goto LABEL_6;
  v6 = (void *)objc_opt_self(NSBundle);
  v7 = (char *)v5;
  v8 = objc_msgSend(v6, "mainBundle");
  v9 = String._bridgeToObjectiveC()();

  v10 = OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_contentView;
  if (!*(_QWORD *)&v7[OBJC_IVAR____TtC7Measure17SurfaceLabelStrip_contentView])
  {
    __break(1u);
    goto LABEL_8;
  }
  objc_msgSend(v7, "addSubview:");
  v11 = *(void **)&v7[v10];
  if (!v11)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v12 = v11;
  objc_msgSend(v7, "bounds");
  objc_msgSend(v12, "setFrame:");

  v13 = *(void **)&v7[v10];
  if (v13)
  {
    objc_msgSend(v13, "setAutoresizingMask:", 18);

LABEL_6:
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t type metadata accessor for SurfaceLabelStrip()
{
  return objc_opt_self(_TtC7Measure17SurfaceLabelStrip);
}

uint64_t sub_100025E78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  id v28;
  id v29;
  id v30;
  char v31;
  char *v32;
  void *v33;
  char *v34;
  NSString v35;
  NSString v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  id v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  id v48;
  id v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  id v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  id v57;
  NSString v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  id v63;
  id v64;
  Swift::String v65;
  Swift::String v66;
  void *object;
  NSString v68;
  id v69;
  NSString v70;
  void *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  id v77;
  id v78;
  Swift::String v79;
  Swift::String v80;
  void *v81;
  NSString v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  NSString v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t result;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSString v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE v118[848];
  _BYTE v119[848];
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  Swift::String v124;
  Swift::String v125;

  v2 = v1;
  v4 = type metadata accessor for MeasurementHistoryItem(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000226FC(a1, (uint64_t)v6);
  sub_10001F970(&v6[*(int *)(v4 + 28)], v118);
  sub_10001F970(v118, v119);
  if (sub_10001F9AC((uint64_t)v119) == 1)
  {
    v7 = sub_10001F9B8((uint64_t)v119);
    v8 = *(_QWORD *)v7;
    v9 = *(float *)(v7 + 32);
    v10 = *(unsigned __int8 *)(v7 + 36);
    v11 = *(_QWORD *)(v7 + 40);
    v12 = *(_QWORD *)(v7 + 48);
    v116 = *(_QWORD *)(v7 + 8);
    v117 = v12;
    v13 = *(_QWORD *)(v7 + 56);
    v106 = *(NSString *)(v7 + 64);
    v107 = v13;
    v14 = *(_QWORD *)(v7 + 80);
    v104 = *(_QWORD *)(v7 + 88);
    v105 = v14;
    v103 = *(_QWORD *)(v7 + 96);
    v15 = *(_QWORD *)(v7 + 104);
    v101 = v11;
    v102 = v15;
    v16 = v9;
    v17 = *(_QWORD *)(v7 + 120);
    v18 = *(_QWORD *)(v7 + 128);
    v19 = *(float *)(v7 + 152);
    v20 = *(unsigned __int8 *)(v7 + 156);
    v21 = *(_QWORD *)(v7 + 160);
    v114 = *(_QWORD *)(v7 + 168);
    v115 = v21;
    v22 = *(_QWORD *)(v7 + 176);
    v112 = *(void **)(v7 + 184);
    v113 = v22;
    v23 = *(_QWORD *)(v7 + 200);
    v110 = *(_QWORD *)(v7 + 208);
    v111 = v23;
    v24 = *(_QWORD *)(v7 + 216);
    v108 = *(_QWORD *)(v7 + 224);
    v109 = v24;
    v25 = v19;
    if (v10)
      v26 = 0.0;
    else
      v26 = v16;
    if (v20)
      v27 = 0.0;
    else
      v27 = v25;
    v28 = *(id *)(v2 + OBJC_IVAR____TtC7Measure24BaseRectangleHistoryCell_sketchView);
    sub_100045520(v26, v27);

    v29 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
    v30 = objc_msgSend(v29, "preferredContentSizeCategory");

    v31 = UIContentSizeCategory.isAccessibilityCategory.getter(v30);
    if ((v31 & 1) != 0)
    {
      v32 = *(char **)(v2 + OBJC_IVAR____TtC7Measure24BaseRectangleHistoryCell_accessibleCellTitle);
      v33 = *(void **)&v32[OBJC_IVAR____TtC7Measure24AccessibilitySingleStack_label];
      v34 = v32;
      v35 = String._bridgeToObjectiveC()();
      objc_msgSend(v33, "setText:", v35);

      v36 = String._bridgeToObjectiveC()();
      objc_msgSend(v33, "setAccessibilityLabel:", v36);

      v37 = *(void **)(v2 + OBJC_IVAR____TtC7Measure24BaseRectangleHistoryCell_accessibleLengthLabel);
      v38 = (void *)objc_opt_self(NSBundle);
      v39 = v37;
      v40 = objc_msgSend(v38, "mainBundle");
      v120._object = (void *)0xE000000000000000;
      v41._countAndFlagsBits = 0xD000000000000010;
      v41._object = (void *)0x80000001003D8710;
      v42._countAndFlagsBits = 0;
      v42._object = (void *)0xE000000000000000;
      v120._countAndFlagsBits = 0;
      v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, (Swift::String_optional)0, (NSBundle)v40, v42, v120);

      v44 = objc_msgSend(v38, "mainBundle");
      v121._object = (void *)0xE000000000000000;
      v45._countAndFlagsBits = 0xD000000000000010;
      v45._object = (void *)0x80000001003D8710;
      v46._countAndFlagsBits = 0;
      v46._object = (void *)0xE000000000000000;
      v121._countAndFlagsBits = 0;
      v47 = NSLocalizedString(_:tableName:bundle:value:comment:)(v45, (Swift::String_optional)0, (NSBundle)v44, v46, v121);

      sub_100125740(v43._countAndFlagsBits, (uint64_t)v43._object, v47._countAndFlagsBits, v47._object, v101, v117, v107, (uint64_t)v106, v105, v104, v103, v102);
      swift_bridgeObjectRelease(v43._object);
      swift_bridgeObjectRelease(v47._object);
      v48 = *(id *)(v2 + OBJC_IVAR____TtC7Measure24BaseRectangleHistoryCell_accessibleWidthLabel);
      v49 = objc_msgSend(v38, "mainBundle");
      v122._object = (void *)0xE000000000000000;
      v50._countAndFlagsBits = 0x4C474E4154434552;
      v50._object = (void *)0xEF48544449575F45;
      v51._countAndFlagsBits = 0;
      v51._object = (void *)0xE000000000000000;
      v122._countAndFlagsBits = 0;
      v52 = NSLocalizedString(_:tableName:bundle:value:comment:)(v50, (Swift::String_optional)0, (NSBundle)v49, v51, v122);

      v53 = objc_msgSend(v38, "mainBundle");
      v123._object = (void *)0xE000000000000000;
      v54._countAndFlagsBits = 0x4C474E4154434552;
      v54._object = (void *)0xEF48544449575F45;
      v55._countAndFlagsBits = 0;
      v55._object = (void *)0xE000000000000000;
      v123._countAndFlagsBits = 0;
      v56 = NSLocalizedString(_:tableName:bundle:value:comment:)(v54, (Swift::String_optional)0, (NSBundle)v53, v55, v123);

      sub_100125740(v52._countAndFlagsBits, (uint64_t)v52._object, v56._countAndFlagsBits, v56._object, v115, v114, v113, (uint64_t)v112, v111, v110, v109, v108);
      swift_bridgeObjectRelease(v52._object);
      swift_bridgeObjectRelease(v56._object);
    }
    else
    {
      v99 = v18;
      v100 = v17;
      v57 = *(id *)(v2 + OBJC_IVAR____TtC7Measure24BaseRectangleHistoryCell_cellTitle);
      v58 = String._bridgeToObjectiveC()();
      v59 = v8;
      objc_msgSend(v57, "setText:", v58);

      v60 = OBJC_IVAR____TtC7Measure24BaseRectangleHistoryCell_lengthLabels;
      v61 = *(void **)(*(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure24BaseRectangleHistoryCell_lengthLabels)
                     + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_title);
      v62 = (void *)objc_opt_self(NSBundle);
      v63 = v61;
      v98 = v62;
      v64 = objc_msgSend(v62, "mainBundle");
      v124._object = (void *)0xE000000000000000;
      v65._object = (void *)0x80000001003D8710;
      v65._countAndFlagsBits = 0xD000000000000010;
      v66._countAndFlagsBits = 0;
      v66._object = (void *)0xE000000000000000;
      v124._countAndFlagsBits = 0;
      object = NSLocalizedString(_:tableName:bundle:value:comment:)(v65, (Swift::String_optional)0, (NSBundle)v64, v66, v124)._object;

      v68 = String._bridgeToObjectiveC()();
      objc_msgSend(v63, "setText:", v68, swift_bridgeObjectRelease(object).n128_f64[0]);

      v69 = objc_retain(*(id *)(*(_QWORD *)(v2 + v60)
                              + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits));
      v70 = String._bridgeToObjectiveC()();
      objc_msgSend(v69, "setText:", v70);

      v71 = *(void **)(*(_QWORD *)(v2 + v60)
                     + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels);
      v72 = v101;
      if (v8 == v101 && v116 == v117)
      {
        v73 = 1;
        v74 = v117;
      }
      else
      {
        v74 = v117;
        v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v116, v101, v117, 0);
      }
      v75 = v71;
      sub_100134B8C(v72, v74, v107, v106, v105, v104, v103, v102, v73 & 1);

      v76 = OBJC_IVAR____TtC7Measure24BaseRectangleHistoryCell_widthLabels;
      v77 = objc_retain(*(id *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure24BaseRectangleHistoryCell_widthLabels)
                              + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_title));
      v78 = objc_msgSend(v98, "mainBundle");
      v125._object = (void *)0xE000000000000000;
      v79._countAndFlagsBits = 0x4C474E4154434552;
      v79._object = (void *)0xEF48544449575F45;
      v80._countAndFlagsBits = 0;
      v80._object = (void *)0xE000000000000000;
      v125._countAndFlagsBits = 0;
      v81 = NSLocalizedString(_:tableName:bundle:value:comment:)(v79, (Swift::String_optional)0, (NSBundle)v78, v80, v125)._object;

      v82 = String._bridgeToObjectiveC()();
      objc_msgSend(v77, "setText:", v82, swift_bridgeObjectRelease(v81).n128_f64[0]);

      v83 = objc_retain(*(id *)(*(_QWORD *)(v2 + v76)
                              + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits));
      v84 = v99;
      v85 = v100;
      v86 = String._bridgeToObjectiveC()();
      objc_msgSend(v83, "setText:", v86);

      v87 = v84;
      v88 = *(void **)(*(_QWORD *)(v2 + v76)
                     + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels);
      v90 = v114;
      v89 = v115;
      if (v85 == v115 && v87 == v114)
        v91 = 1;
      else
        v91 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v87, v115, v114, 0);
      v93 = v112;
      v92 = v113;
      v95 = v110;
      v94 = v111;
      v96 = v88;
      sub_100134B8C(v89, v90, v92, v93, v94, v95, v109, v108, v91 & 1);

    }
    return sub_100022740((uint64_t)v6);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ALL, 0x80000001003D8820, "Measure/RectangleHistoryCell.swift", 34, 2, 64, 0);
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for RectangleHistoryCell()
{
  return objc_opt_self(_TtC7Measure20RectangleHistoryCell);
}

uint64_t sub_100026848(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = "(";
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 96);
}

uint64_t sub_100026898(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + qword_10047C420);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

void *sub_1000268E8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + qword_10047C420, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10002692C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + qword_10047C428;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100026E60(v3, a1);
}

uint64_t sub_10002697C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + qword_10047C428;
  swift_beginAccess(v3, v5, 33, 0);
  sub_100026E18(a1, v3);
  return swift_endAccess(v5);
}

void *sub_1000269D4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + qword_10047C428, a1, 33, 0);
  return &j__swift_endAccess;
}

id sub_100026A1C(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v13;
  char *v14;
  objc_class *v15;
  id v16;
  objc_super v18;

  v13 = swift_isaMask & *v8;
  *(_QWORD *)((char *)v8 + qword_10047C420) = _swiftEmptyArrayStorage;
  v14 = (char *)v8 + qword_10047C428;
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((_QWORD *)v14 + 4) = 0;
  v15 = (objc_class *)type metadata accessor for StateObservingSKView(0, *(_QWORD *)(v13 + 80), *(_QWORD *)(v13 + 88), a8);
  v18.receiver = v8;
  v18.super_class = v15;
  v16 = objc_msgSendSuper2(&v18, "initWithFrame:", a1, a2, a3, a4);
  swift_getWitnessTable(&unk_1003B1898, v15);
  StateObserving.setup()();

  return v16;
}

id sub_100026AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  return sub_100026A1C(a5, a6, a7, a8, a1, a2, a3, a4);
}

void sub_100026B1C()
{
  char *v0;
  char *v1;

  *(_QWORD *)&v0[qword_10047C420] = &_swiftEmptyArrayStorage;
  v1 = &v0[qword_10047C428];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, 0x80000001003D8CB0, "Measure/StateObservingSKView.swift", 34, 2, 46, 0);
  __break(1u);
}

void sub_100026BA4()
{
  sub_100026B1C();
}

void sub_100026BC4(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_100026EA8();
}

id sub_100026BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for StateObservingSKView(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t sub_100026C34(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_10047C420));
  return sub_100026F30(a1 + qword_10047C428);
}

uint64_t type metadata accessor for StateObservingSKView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100026F70(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StateObservingSKView);
}

uint64_t sub_100026C78(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t sub_100026C80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = j___s8Stateful8ContextsO5UIKitVAEycfC();
  *a1 = result;
  return result;
}

void (*sub_100026CAC(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1000269D4((uint64_t)v2);
  return sub_100026CF0;
}

uint64_t sub_100026CF4()
{
  uint64_t v0;

  v0 = sub_100026DD4();
  return swift_bridgeObjectRetain(v0);
}

void (*sub_100026D0C(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1000268E8((uint64_t)v2);
  return sub_100026CF0;
}

void sub_100026D50(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void sub_100026D7C()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000012, 0x80000001003D8C90, "Measure/StateObservingSKView.swift", 34, 2, 54, 0);
  __break(1u);
}

uint64_t sub_100026DD4()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + qword_10047C420;
  swift_beginAccess(v0 + qword_10047C420, v3, 0, 0);
  return *(_QWORD *)v1;
}

uint64_t sub_100026E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8(&qword_10047C518);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100026E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8(&qword_10047C518);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100026EA8()
{
  char *v0;
  char *v1;

  *(_QWORD *)&v0[qword_10047C420] = &_swiftEmptyArrayStorage;
  v1 = &v0[qword_10047C428];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/StateObservingSKView.swift", 34, 2, 50, 0);
  __break(1u);
}

uint64_t sub_100026F30(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000EDC8(&qword_10047C518);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100026F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

void sub_100026FA0(uint64_t a1)
{
  void *v1;
  double v2;
  CGFloat m43;
  CGFloat m44;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  CGFloat v12;
  void *v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  CATransform3D aBlock;
  CGAffineTransform m;

  switch(a1)
  {
    case 2:
      v2 = 3.14159265;
      break;
    case 4:
      v2 = -*(double *)CGFloat.piDiv2.unsafeMutableAddressor();
      break;
    case 3:
      v2 = *(double *)CGFloat.piDiv2.unsafeMutableAddressor();
      break;
    default:
      v2 = 0.0;
      break;
  }
  CGAffineTransformMakeRotation((CGAffineTransform *)&aBlock, v2);
  *(_OWORD *)&m.a = *(_OWORD *)&aBlock.m11;
  *(_OWORD *)&m.c = *(_OWORD *)&aBlock.m13;
  *(_OWORD *)&m.tx = *(_OWORD *)&aBlock.m21;
  CATransform3DMakeAffineTransform(&aBlock, &m);
  v20 = *(_OWORD *)&aBlock.m13;
  v21 = *(_OWORD *)&aBlock.m11;
  v18 = *(_OWORD *)&aBlock.m23;
  v19 = *(_OWORD *)&aBlock.m21;
  v16 = *(_OWORD *)&aBlock.m33;
  v17 = *(_OWORD *)&aBlock.m31;
  v15 = *(_OWORD *)&aBlock.m41;
  m43 = aBlock.m43;
  m44 = aBlock.m44;
  v5 = sub_10002717C();
  v7 = v6;
  v8 = sub_10002735C();
  v10 = v9;
  v11 = (void *)objc_opt_self(UIView);
  v12 = COERCE_DOUBLE(swift_allocObject(&unk_10043F2F0, 184, 7));
  *(_QWORD *)(*(_QWORD *)&v12 + 16) = v1;
  *(_OWORD *)(*(_QWORD *)&v12 + 24) = v21;
  *(_OWORD *)(*(_QWORD *)&v12 + 40) = v20;
  *(_OWORD *)(*(_QWORD *)&v12 + 56) = v19;
  *(_OWORD *)(*(_QWORD *)&v12 + 72) = v18;
  *(_OWORD *)(*(_QWORD *)&v12 + 88) = v17;
  *(_OWORD *)(*(_QWORD *)&v12 + 104) = v16;
  *(_OWORD *)(*(_QWORD *)&v12 + 120) = v15;
  *(CGFloat *)(*(_QWORD *)&v12 + 136) = m43;
  *(CGFloat *)(*(_QWORD *)&v12 + 144) = m44;
  *(double *)(*(_QWORD *)&v12 + 152) = v5;
  *(_QWORD *)(*(_QWORD *)&v12 + 160) = v7;
  *(double *)(*(_QWORD *)&v12 + 168) = v8;
  *(_QWORD *)(*(_QWORD *)&v12 + 176) = v10;
  *(_QWORD *)&aBlock.m21 = sub_100027D40;
  aBlock.m22 = v12;
  *(_QWORD *)&aBlock.m11 = _NSConcreteStackBlock;
  *(_QWORD *)&aBlock.m12 = 1107296256;
  *(_QWORD *)&aBlock.m13 = sub_10003ECA0;
  *(_QWORD *)&aBlock.m14 = &unk_10043F308;
  v13 = _Block_copy(&aBlock);
  v14 = v1;
  swift_release();
  objc_msgSend(v11, "animateWithDuration:delay:options:animations:completion:", 0, v13, 0, 0.25, 0.25);
  _Block_release(v13);
}

double sub_10002717C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  id v5;
  double Width;
  double v7;
  double v8;
  uint64_t v10;

  v1 = v0;
  swift_retain();
  StateValue.wrappedValue.getter(&v10, v2);
  swift_release();
  v3 = v10 - 3;
  v4 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v5 = objc_msgSend(v4, "userInterfaceLayoutDirection");

  if (v3 <= 1)
  {
    if (v5 == (id)1)
    {
      Width = CGRectGetWidth(*(CGRect *)(v1 + qword_10047F690));
      if (qword_10047ADD8 != -1)
        swift_once(&qword_10047ADD8, sub_100195820);
      v7 = Width - *(double *)&qword_1004AF8C0 + -47.0;
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  if (v5 != (id)1)
  {
LABEL_10:
    if (qword_10047ADD8 != -1)
      swift_once(&qword_10047ADD8, sub_100195820);
    v7 = *(double *)&qword_1004AF8C0;
    goto LABEL_13;
  }
  v8 = CGRectGetWidth(*(CGRect *)(v1 + qword_10047F690));
  if (qword_10047ADD8 != -1)
    swift_once(&qword_10047ADD8, sub_100195820);
  v7 = v8 - (*(double *)&qword_1004AF8C0 + 80.0);
LABEL_13:
  if (qword_10047ADE0 != -1)
    swift_once(&qword_10047ADE0, sub_100195900);
  return v7;
}

double sub_10002735C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  id v5;
  double Width;
  double v7;
  double v8;
  uint64_t v10;

  v1 = v0;
  swift_retain();
  StateValue.wrappedValue.getter(&v10, v2);
  swift_release();
  v3 = v10 - 3;
  v4 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v5 = objc_msgSend(v4, "userInterfaceLayoutDirection");

  if (v3 <= 1)
  {
    if (v5 != (id)1)
    {
      Width = CGRectGetWidth(*(CGRect *)(v1 + qword_10047F690));
      if (qword_10047ADD8 != -1)
        swift_once(&qword_10047ADD8, sub_100195820);
      v7 = Width - *(double *)&qword_1004AF8C0 + -47.0;
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  if (v5 == (id)1)
  {
LABEL_7:
    if (qword_10047ADD8 != -1)
      swift_once(&qword_10047ADD8, sub_100195820);
    v7 = *(double *)&qword_1004AF8C0;
    goto LABEL_13;
  }
  v8 = CGRectGetWidth(*(CGRect *)(v1 + qword_10047F690));
  if (qword_10047ADD8 != -1)
    swift_once(&qword_10047ADD8, sub_100195820);
  v7 = v8 - (*(double *)&qword_1004AF8C0 + 80.0);
LABEL_13:
  if (qword_10047ADE0 != -1)
    swift_once(&qword_10047ADE0, sub_100195900);
  return v7;
}

void sub_10002753C(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v35 = a2[4];
  v36 = *a2;
  v33 = a2[5];
  v34 = a2[1];
  v31 = a2[6];
  v32 = a2[2];
  v7 = a2[8];
  v29 = a2[7];
  v30 = a2[3];
  v8 = a2[9];
  v9 = a2[10];
  v11 = a2[11];
  v10 = a2[12];
  v12 = a2[13];
  v13 = a2[14];
  v14 = a2[15];
  v15 = qword_10047F630;
  v16 = *(void **)(a1 + qword_10047F630);
  if (v16)
  {
    v17 = objc_msgSend(v16, "layer");
    v37 = v36;
    v38 = v34;
    v39 = v32;
    v40 = v30;
    v41 = v35;
    v42 = v33;
    v43 = v31;
    v44 = v29;
    v45 = v7;
    v46 = v8;
    v47 = v9;
    v48 = v11;
    v49 = v10;
    v50 = v12;
    v51 = v13;
    v52 = v14;
    objc_msgSend(v17, "setTransform:", &v37);

  }
  v18 = qword_10047F638;
  v19 = *(void **)(a1 + qword_10047F638);
  if (v19)
  {
    v20 = objc_msgSend(v19, "layer");
    v37 = v36;
    v38 = v34;
    v39 = v32;
    v40 = v30;
    v41 = v35;
    v42 = v33;
    v43 = v31;
    v44 = v29;
    v45 = v7;
    v46 = v8;
    v47 = v9;
    v48 = v11;
    v49 = v10;
    v50 = v12;
    v51 = v13;
    v52 = v14;
    objc_msgSend(v20, "setTransform:", &v37);

  }
  v21 = *(void **)(a1 + v15);
  if (v21)
  {
    v22 = v21;
    objc_msgSend(v22, "frame");
    objc_msgSend(v22, "setFrame:", a3, a4);

  }
  v23 = *(void **)(a1 + v18);
  if (v23)
  {
    v24 = v23;
    objc_msgSend(v24, "frame");
    objc_msgSend(v24, "setFrame:", a5, a6);

  }
}

double sub_100027758()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  CGRect v11;
  CGRect v12;
  CGRect v13;

  v1 = *(void **)&v0[qword_10047F648];
  if (!v1)
    return 0.0;
  v2 = (void *)objc_opt_self(UIApplication);
  v3 = v1;
  v4 = objc_msgSend(v2, "sharedApplication");
  v5 = objc_msgSend(v4, "userInterfaceLayoutDirection");

  if (v5 == (id)1)
  {
    if (qword_10047ADD8 != -1)
      swift_once(&qword_10047ADD8, sub_100195820);
    v6 = *(double *)&qword_1004AF8C0;
  }
  else
  {
    objc_msgSend(v0, "frame");
    v8 = v7;
    objc_msgSend(v3, "frame");
    v9 = v8 - CGRectGetWidth(v11);
    if (qword_10047ADD8 != -1)
      swift_once(&qword_10047ADD8, sub_100195820);
    v6 = v9 - *(double *)&qword_1004AF8C0;
  }
  objc_msgSend(v0, "frame");
  CGRectGetHeight(v12);
  if (qword_10047ADC8 != -1)
    swift_once(&qword_10047ADC8, sub_100195650);
  objc_msgSend(v3, "frame");
  CGRectGetHeight(v13);

  return v6;
}

id sub_1000278F8()
{
  void *v0;
  double v1;
  double v2;
  id result;
  void *v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  CGRect v13;

  objc_msgSend(v0, "frame");
  v2 = v1;
  result = objc_msgSend(v0, "superview");
  if (result)
  {
    v4 = result;
    objc_msgSend(result, "bounds");
    v6 = v5;
    v8 = v7;
    v10 = v9;
    v12 = v11;

    v13.origin.x = v6;
    v13.origin.y = v8;
    v13.size.width = v10;
    v13.size.height = v12;
    return objc_msgSend(v0, "setFrame:", 0.0, 0.0, v2, CGRectGetMaxY(v13));
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000279B0()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = objc_msgSend((id)objc_opt_self(CUShutterButton), "smallShutterButton");
  if (v1)
  {
    v2 = *(void **)(v0 + qword_10047F648);
    *(_QWORD *)(v0 + qword_10047F648) = v1;

  }
  else
  {
    __break(1u);
  }
}

void sub_1000279FC()
{
  char *v0;
  double v1;
  double v2;
  double v3;
  double Height;
  double v5;
  double v6;
  double v7;
  double v8;
  id v9;
  char *v10;
  void *v11;
  CGRect v12;

  objc_msgSend(v0, "bounds");
  v2 = v1;
  if (qword_10047ADD0 != -1)
    swift_once(&qword_10047ADD0, sub_1001956EC);
  v3 = *(double *)&qword_1004AF8B8;
  objc_msgSend(v0, "bounds");
  Height = CGRectGetHeight(v12);
  if (qword_10047ADC8 != -1)
    swift_once(&qword_10047ADC8, sub_100195650);
  v5 = (v2 - v3) * 0.5;
  v6 = Height - *(double *)&qword_1004AF8B0;
  v7 = *(double *)&qword_1004AF8B8;
  v8 = v6 - *(double *)&qword_1004AF8B8 * 0.5;
  v9 = objc_allocWithZone((Class)type metadata accessor for EditButton());
  v10 = sub_10007BE0C(0, v5, v8, v7, v7);
  v11 = *(void **)&v0[qword_10047F628];
  *(_QWORD *)&v0[qword_10047F628] = v10;

}

void sub_100027B10()
{
  uint64_t v0;
  double v1;
  double v2;
  id v3;
  void *v4;

  v1 = sub_10002735C();
  v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DeleteButton()), "initWithFrame:", v1, v2, 80.0, 47.0);
  v4 = *(void **)(v0 + qword_10047F638);
  *(_QWORD *)(v0 + qword_10047F638) = v3;

}

void sub_100027B7C()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  id v4;
  void *v5;
  uint64_t v6;

  v1 = sub_10002717C();
  v3 = v2;
  v4 = objc_allocWithZone((Class)type metadata accessor for UndoButton());
  sub_1001C92AC(0, v1, v3, 80.0, 47.0);
  v5 = *(void **)(v0 + qword_10047F630);
  *(_QWORD *)(v0 + qword_10047F630) = v6;

}

id sub_100027BF4(void *a1, double a2, double a3, double a4, double a5)
{
  objc_super v10;

  v10.receiver = a1;
  v10.super_class = (Class)swift_getObjectType(a1);
  return objc_msgSendSuper2(&v10, "initWithFrame:", a2, a3, a4, a5);
}

id sub_100027C60(void *a1, uint64_t a2, uint64_t a3)
{
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)swift_getObjectType(a1);
  return objc_msgSendSuper2(&v5, "initWithCoder:", a3);
}

uint64_t type metadata accessor for EditViewCompact(uint64_t a1)
{
  uint64_t result;

  result = qword_10047C548;
  if (!qword_10047C548)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EditViewCompact);
  return result;
}

uint64_t sub_100027CE0(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 256, 0, v2, a1 + 872);
}

uint64_t sub_100027D14()
{
  return type metadata accessor for EditViewCompact(0);
}

uint64_t sub_100027D1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 184, 7);
}

void sub_100027D40()
{
  uint64_t v0;

  sub_10002753C(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24), *(double *)(v0 + 152), *(double *)(v0 + 160), *(double *)(v0 + 168), *(double *)(v0 + 176));
}

uint64_t sub_100027D54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100027D64(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t ARSCNView.viewport.getter()
{
  uint64_t result;

  if (qword_10047B190 != -1)
    result = swift_once(&qword_10047B190, sub_1001C81CC);
  if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
    __break(1u);
  return result;
}

void ARSCNView.normalize(screenPoint:)()
{
  uint64_t v0;

  if (qword_10047B190 != -1)
    swift_once(&qword_10047B190, sub_1001C81CC);
  v0 = qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
  if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    CGRectGetWidth(*(CGRect *)(v0 + 48));
    if ((*(_BYTE *)(v0 + 80) & 1) == 0)
    {
      CGRectGetHeight(*(CGRect *)(v0 + 48));
      return;
    }
  }
  __break(1u);
}

void ARSCNView.normalize(screenPoint:)(double a1)
{
  uint64_t v1;

  CGPoint.init(_:)(a1);
  if (qword_10047B190 != -1)
    swift_once(&qword_10047B190, sub_1001C81CC);
  v1 = qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
  if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    CGRectGetWidth(*(CGRect *)(v1 + 48));
    if ((*(_BYTE *)(v1 + 80) & 1) == 0)
    {
      CGRectGetHeight(*(CGRect *)(v1 + 48));
      return;
    }
  }
  __break(1u);
}

id sub_100027F24()
{
  void *v0;

  return objc_msgSend(v0, "session");
}

uint64_t sub_100027F48()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 33, 7);
}

uint64_t type metadata accessor for WeightedAverageDouble()
{
  return objc_opt_self(_TtC7Measure21WeightedAverageDouble);
}

ValueMetadata *type metadata accessor for MeasurementProposals()
{
  return &type metadata for MeasurementProposals;
}

id sub_100027F9C()
{
  id result;
  id v1;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  result = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (*((_QWORD *)&xmmword_1004AF258 + 1))
  {
    v1 = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
    qword_1004AF190 = Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_100028000(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  unint64_t v14;
  double result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *v2;
  if ((unint64_t)*v2 >> 62)
  {
    if (v5 < 0)
      v24 = *v2;
    else
      v24 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v24);
    if (!v6)
      goto LABEL_27;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*v2);
    if (!v6)
      goto LABEL_27;
  }
  if ((v5 & 0xC000000000000001) != 0)
LABEL_34:
    v7 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
  else
    v7 = *(id *)(v5 + 32);
  v8 = v7;
  v9 = (*(uint64_t (**)(void))((swift_isaMask & *v7) + 0xB8))();
  if (v9 == a1 && v10 == a2)
  {
    v14 = 0;
LABEL_13:
    swift_bridgeObjectRelease(v5);

LABEL_14:
    swift_bridgeObjectRelease(a2);

    return result;
  }
  v12 = v10;
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, a1, a2, 0);

  swift_bridgeObjectRelease(v12);
  if ((v13 & 1) != 0)
  {
    v14 = 0;
LABEL_11:
    a2 = v5;
    goto LABEL_14;
  }
  if (v6 != 1)
  {
    v16 = 5;
    do
    {
      v14 = v16 - 4;
      v17 = (v5 & 0xC000000000000001) != 0
          ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, v5)
          : *(id *)(v5 + 8 * v16);
      v8 = v17;
      v18 = (*(uint64_t (**)(void))((swift_isaMask & *v17) + 0xB8))();
      if (v18 == a1 && v19 == a2)
        goto LABEL_13;
      v21 = v19;
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, a1, a2, 0);

      swift_bridgeObjectRelease(v21);
      if ((v22 & 1) != 0)
        goto LABEL_11;
      v23 = v16 - 3;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        goto LABEL_34;
      }
      ++v16;
    }
    while (v23 != v6);
  }
LABEL_27:
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

uint64_t sub_1000281FC(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v3;
  if (!(_DWORD)result || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    result = sub_1000287B4(v3);
    v3 = result;
    *v1 = result;
  }
  v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    v7 = (v3 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 32;
    v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
    v9 = memmove((void *)v7, (const void *)(v7 + 8), 8 * (v5 - 1 - a1));
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10) = v6;
    specialized Array._endMutation()(v9);
    return v8;
  }
  return result;
}

uint64_t sub_100028290(unint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = (_QWORD *)*v1;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1000287A0(v3);
    v3 = (_QWORD *)result;
  }
  v5 = v3[2];
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    v7 = &v3[2 * a1];
    v8 = v7[4];
    memmove(v7 + 4, v7 + 6, 16 * (v5 - 1 - a1));
    v3[2] = v6;
    *v1 = v3;
    return v8;
  }
  return result;
}

uint64_t sub_100028318(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v3;
  if (!(_DWORD)result || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    result = sub_1000287B4(v3);
    v3 = result;
    *v1 = result;
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v5 + 8 * a1;
    v9 = *(_QWORD *)(v8 + 32);
    v10 = memmove((void *)(v8 + 32), (const void *)(v8 + 40), 8 * (v6 - 1 - a1));
    *(_QWORD *)(v5 + 16) = v7;
    specialized Array._endMutation()(v10);
    return v9;
  }
  return result;
}

uint64_t sub_1000283AC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5 = (_QWORD *)*v2;
  result = swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((result & 1) == 0)
  {
    result = sub_10002881C(v5);
    v5 = (_QWORD *)result;
  }
  v7 = v5[2];
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v7 - 1;
    v9 = type metadata accessor for SpatialPlattersHistoryItem(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(_QWORD *)(v10 + 72);
    v12 = (unint64_t)v5
        + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
        + v11 * a1;
    result = sub_100028858(v12, a2);
    if (v11 > 0 || v12 >= v12 + v11 + v11 * (v8 - a1))
    {
      result = swift_arrayInitWithTakeFrontToBack(v12, v12 + v11, v8 - a1, v9);
    }
    else if (v11)
    {
      result = swift_arrayInitWithTakeBackToFront(v12);
    }
    v5[2] = v8;
    *v2 = v5;
  }
  return result;
}

double *sub_10002848C(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  double *result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  result = (double *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((result & 1) == 0)
  {
    result = sub_100028844(v3);
    v3 = (uint64_t)result;
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    v7 = v3 + 24 * a1;
    v8 = *(_QWORD *)(v7 + 32);
    memmove((void *)(v7 + 32), (const void *)(v7 + 56), 24 * (v5 - 1 - a1));
    *(_QWORD *)(v3 + 16) = v6;
    *v1 = v3;
    return (double *)v8;
  }
  return result;
}

uint64_t sub_10002852C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = *v0;
  if (!(*v0 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n(*v0, 2);
    if (v3)
      goto LABEL_3;
LABEL_13:
    result = swift_bridgeObjectRelease_n(v2, 3);
    *v1 = &_swiftEmptyArrayStorage;
    return result;
  }
  if (v2 < 0)
    v11 = *v0;
  else
    v11 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v2, 2);
  result = _CocoaArrayWrapper.endIndex.getter(v11);
  v3 = result;
  if (!result)
    goto LABEL_13;
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v6 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
      else
        v6 = *(id *)(v2 + 8 * v5 + 32);
      v7 = v6;
      ++v5;
      v8 = (void (*)(void))(*(uint64_t (**)(void))((swift_isaMask & *v6) + 0x178))();
      v10 = v9;
      v8();

      swift_release(v10);
    }
    while (v3 != v5);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

id sub_100028640@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A848 != -1)
    swift_once(&qword_10047A848, sub_100027F9C);
  v2 = (void *)qword_1004AF190;
  *a1 = qword_1004AF190;
  return v2;
}

uint64_t sub_100028690(uint64_t *a1, uint64_t *a2)
{
  return sub_100074910(*a1, *a2);
}

unint64_t sub_1000286A0()
{
  unint64_t result;

  result = qword_10047C9C8;
  if (!qword_10047C9C8)
  {
    result = swift_getWitnessTable(&unk_1003BA1E8, &_s8SceneKitVN);
    atomic_store(result, (unint64_t *)&qword_10047C9C8);
  }
  return result;
}

unint64_t sub_1000286E4(uint64_t a1)
{
  unint64_t result;

  result = sub_100028708();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100028708()
{
  unint64_t result;

  result = qword_10047C9F8;
  if (!qword_10047C9F8)
  {
    result = swift_getWitnessTable(&unk_1003B1938, &type metadata for MeasurementProposals);
    atomic_store(result, (unint64_t *)&qword_10047C9F8);
  }
  return result;
}

size_t sub_100028750(_QWORD *a1)
{
  return sub_10005F68C(0, a1[2], 0, a1);
}

double *sub_100028764(uint64_t a1)
{
  return sub_10005F6A0(0, *(_QWORD *)(a1 + 16), 0, a1);
}

char *sub_100028778(uint64_t a1)
{
  return sub_10005F240(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_10002878C(uint64_t a1)
{
  return sub_10005F338(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1000287A0(_QWORD *a1)
{
  return sub_10005F44C(0, a1[2], 0, a1);
}

uint64_t sub_1000287B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

size_t sub_10002881C(_QWORD *a1)
{
  return sub_100060654(0, a1[2], 0, a1);
}

double *sub_100028830(uint64_t a1)
{
  return sub_100060880(0, *(_QWORD *)(a1 + 16), 0, (double *)a1);
}

double *sub_100028844(uint64_t a1)
{
  return sub_100060D18(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_100028858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SpatialPlattersHistoryItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10002889C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10002CA78(*a1);
  *a2 = result;
  return result;
}

void sub_1000288C4(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

char *sub_1000288D0(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  void *v9;
  void *v10;
  _BYTE *v12;
  id v13;
  id v14;
  unint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  float v32;
  __n128 *v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  unsigned int v38;
  int v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  id v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  id v56;
  Class isa;
  NSString v58;
  id v59;
  Class v60;
  NSString v61;
  id v62;
  Class v63;
  NSString v64;
  id v65;
  Class v66;
  NSString v67;
  double v68;
  void *v69;
  double *v70;
  double v71;
  void *v72;
  id v73;
  id v74;
  double v75;
  id v76;
  id v77;
  double v78;
  id v79;
  id v80;
  double v81;
  id v82;
  id v83;
  id v84;
  void *v85;
  id v86;
  void *v87;
  id v88;
  void *v89;
  id v90;
  void *v91;
  void *v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  double v97;
  id v98;
  double v99;
  id v100;
  double v101;
  id v102;
  double v103;
  id v104;
  id v105;
  objc_class *ObjectType;
  uint64_t v114;
  uint64_t v116;
  uint64_t v118;
  simd_float4 v119;
  uint64_t v120;
  simd_float4 v121;
  uint64_t v122;
  simd_float4 v123;
  uint64_t v124;
  simd_float4 v125;
  objc_super v126;
  void *v127;
  double v128[3];
  void *v129;

  v10 = v9;
  ObjectType = (objc_class *)swift_getObjectType(v10);
  v12 = v10;
  v13 = sub_100181ABC(7);
  v14 = objc_msgSend(v13, "copy");

  _bridgeAnyObjectToAny(_:)(v128, v14);
  swift_unknownObjectRelease(v14);
  v15 = sub_10002CA3C();
  if (swift_dynamicCast(&v127, v128, (char *)&type metadata for Any + 8, v15, 6))
    v16 = v127;
  else
    v16 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
  *(_QWORD *)&v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0Material] = v16;
  v17 = sub_100181ABC(7);
  v18 = objc_msgSend(v17, "copy");

  _bridgeAnyObjectToAny(_:)(v128, v18);
  swift_unknownObjectRelease(v18);
  if (swift_dynamicCast(&v127, v128, (char *)&type metadata for Any + 8, v15, 6))
    v19 = v127;
  else
    v19 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
  *(_QWORD *)&v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1Material] = v19;
  v20 = sub_100181ABC(7);
  v21 = objc_msgSend(v20, "copy");

  _bridgeAnyObjectToAny(_:)(v128, v21);
  swift_unknownObjectRelease(v21);
  if (swift_dynamicCast(&v127, v128, (char *)&type metadata for Any + 8, v15, 6))
    v22 = v127;
  else
    v22 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
  *(_QWORD *)&v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2Material] = v22;
  v23 = sub_100181ABC(7);
  v24 = objc_msgSend(v23, "copy");

  _bridgeAnyObjectToAny(_:)(v128, v24);
  swift_unknownObjectRelease(v24);
  if (swift_dynamicCast(&v127, v128, (char *)&type metadata for Any + 8, v15, 6))
    v25 = v127;
  else
    v25 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
  *(_QWORD *)&v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3Material] = v25;
  v26 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0;
  *(_QWORD *)&v12[v26] = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  v27 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1;
  *(_QWORD *)&v12[v27] = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  v28 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2;
  *(_QWORD *)&v12[v28] = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  v29 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3;
  *(_QWORD *)&v12[v29] = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_isOnVerticalGuide] = 0;
  v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState] = 0;
  v30 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_state;
  *(_QWORD *)&v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_state] = static MeasureObjectState.default;
  *(_DWORD *)&v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_lastNormTEnter] = 0;
  *(_DWORD *)&v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_lastNormTExit] = 0;
  if (qword_10047AC60 != -1)
    swift_once(&qword_10047AC60, sub_1001834A0);
  v31 = byte_1004AF791 == 0;
  v32 = -0.07;
  if (byte_1004AF791)
    v32 = -0.023;
  *(float *)&v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_numbersRevealOffset] = v32;
  v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_isOcclusionInitialized] = 0;
  *(_QWORD *)&v12[v30] = a1;
  v33 = (__n128 *)&v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_endTransforms];
  *v33 = a2;
  v33[1] = a3;
  v33[2] = a4;
  v33[3] = a5;
  v33[4] = a6;
  v33[5] = a7;
  v33[6] = a8;
  v33[7] = a9;
  v34 = 0.0180000011;
  if (!v31)
    v34 = 0.0150000006;
  v35 = 0.0450000018;
  if (v31)
    v35 = 0.0594000027;
  v36 = (double *)&v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_markerWidth];
  *v36 = v34;
  v36[1] = v34 * 1.5;
  v36[2] = v34 * 2.5;
  v36[3] = v35;
  if (v31)
    v37 = 0.0594000027;
  else
    v37 = v34 * 2.5;
  if (v31)
    v38 = 0;
  else
    v38 = -1;
  *(int8x16_t *)&v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_increments] = vbslq_s8((int8x16_t)vdupq_n_s32(v38), (int8x16_t)xmmword_1003B19D0, (int8x16_t)xmmword_1003B19C0);
  v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_isClosestLine] = 0;
  *(float *)&v39 = v37 * 0.5;
  v40 = objc_allocWithZone((Class)type metadata accessor for LineDivisionsNumbers());
  v48 = sub_10006F514(a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)v40, v41, v42, v43, v44, v45, v46, v47, v39);
  *(_QWORD *)&v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_numbers] = v48;
  v125 = matrix_identity_float4x4.columns[0];
  v121 = matrix_identity_float4x4.columns[2];
  v123 = matrix_identity_float4x4.columns[1];
  v119 = matrix_identity_float4x4.columns[3];
  objc_msgSend(v48, "setSimdTransform:");
  v49 = objc_allocWithZone((Class)type metadata accessor for LineDivisionsEndNumber());
  v50 = sub_1001C454C(a2, a3, a4, a5, a6, a7, a8, a9);
  *(_QWORD *)&v12[OBJC_IVAR____TtC7Measure19LineDivisionsRender_endNumber] = v50;
  v51 = v50;
  objc_msgSend(v51, "setSimdTransform:", *(double *)v125.i64, *(double *)v123.i64, *(double *)v121.i64, *(double *)v119.i64);

  v126.receiver = v12;
  v126.super_class = ObjectType;
  v52 = (char *)objc_msgSendSuper2(&v126, "init");
  objc_msgSend(v52, "setSimdTransform:", *(double *)v125.i64, *(double *)v123.i64, *(double *)v121.i64, *(double *)v119.i64);
  v116 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0;
  objc_msgSend(*(id *)&v52[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0], "setSimdTransform:", *(double *)v125.i64, *(double *)v123.i64, *(double *)v121.i64, *(double *)v119.i64);
  v118 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1;
  objc_msgSend(*(id *)&v52[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1], "setSimdTransform:", *(double *)v125.i64, *(double *)v123.i64, *(double *)v121.i64, *(double *)v119.i64);
  v53 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2;
  objc_msgSend(*(id *)&v52[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2], "setSimdTransform:", *(double *)v125.i64, *(double *)v123.i64, *(double *)v121.i64, *(double *)v119.i64);
  v54 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3;
  objc_msgSend(*(id *)&v52[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3], "setSimdTransform:", *(double *)v125.i64, *(double *)v123.i64, *(double *)v121.i64, *(double *)v119.i64);
  v124 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0Material;
  v55 = (float *)&v52[OBJC_IVAR____TtC7Measure19LineDivisionsRender_increments];
  v56 = *(id *)&v52[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0Material];
  isa = Float._bridgeToObjectiveC()().super.super.isa;
  v58 = String._bridgeToObjectiveC()();
  objc_msgSend(v56, "setValue:forKeyPath:", isa, v58);

  v122 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1Material;
  v59 = *(id *)&v52[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1Material];
  v60 = Float._bridgeToObjectiveC()().super.super.isa;
  v61 = String._bridgeToObjectiveC()();
  objc_msgSend(v59, "setValue:forKeyPath:", v60, v61);

  v120 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2Material;
  v62 = *(id *)&v52[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2Material];
  v63 = Float._bridgeToObjectiveC()().super.super.isa;
  v64 = String._bridgeToObjectiveC()();
  objc_msgSend(v62, "setValue:forKeyPath:", v63, v64);

  v114 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3Material;
  v65 = *(id *)&v52[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3Material];
  v66 = Float._bridgeToObjectiveC()().super.super.isa;
  v67 = String._bridgeToObjectiveC()();
  objc_msgSend(v65, "setValue:forKeyPath:", v66, v67);

  if (qword_10047AC68 != -1)
    swift_once(&qword_10047AC68, sub_100183514);
  v129 = &type metadata for CGFloat;
  v128[0] = *(float *)&dword_1004AF794;
  sub_100029570((uint64_t)v128);
  sub_100018180((uint64_t)v128);
  v68 = 0.000999999931;
  if (byte_1004AF791)
    v68 = 0.00059999997;
  v129 = &type metadata for CGFloat;
  v128[0] = v68;
  sub_100029570((uint64_t)v128);
  sub_100018180((uint64_t)v128);
  if (qword_10047AC98 != -1)
    swift_once(&qword_10047AC98, sub_100183710);
  v129 = &type metadata for CGFloat;
  v128[0] = (double)qword_1004AF7B0;
  sub_100029570((uint64_t)v128);
  sub_100018180((uint64_t)v128);
  v69 = *(void **)&v52[v116];
  v70 = (double *)&v52[OBJC_IVAR____TtC7Measure19LineDivisionsRender_markerWidth];
  v71 = *(double *)&v52[OBJC_IVAR____TtC7Measure19LineDivisionsRender_markerWidth];
  v72 = (void *)objc_opt_self(SCNBox);
  v73 = v69;
  v74 = objc_msgSend(v72, "boxWithWidth:height:length:chamferRadius:", v71, 0.0, 0.0, 0.0005);
  objc_msgSend(v73, "setGeometry:", v74);

  v75 = v70[1];
  v76 = *(id *)&v52[v118];
  v77 = objc_msgSend(v72, "boxWithWidth:height:length:chamferRadius:", v75, 0.0, 0.0, 0.0005);
  objc_msgSend(v76, "setGeometry:", v77);

  v78 = v70[2];
  v79 = *(id *)&v52[v53];
  v80 = objc_msgSend(v72, "boxWithWidth:height:length:chamferRadius:", v78, 0.0, 0.0, 0.0005);
  objc_msgSend(v79, "setGeometry:", v80);

  v81 = v70[3];
  v82 = *(id *)&v52[v54];
  v83 = objc_msgSend(v72, "boxWithWidth:height:length:chamferRadius:", v81, 0.0, 0.0, 0.0005);
  objc_msgSend(v82, "setGeometry:", v83);

  v84 = objc_msgSend(*(id *)&v52[v116], "geometry");
  if (v84)
  {
    v85 = v84;
    objc_msgSend(v84, "setFirstMaterial:", *(_QWORD *)&v52[v124]);

  }
  v86 = objc_msgSend(*(id *)&v52[v118], "geometry");
  if (v86)
  {
    v87 = v86;
    objc_msgSend(v86, "setFirstMaterial:", *(_QWORD *)&v52[v122]);

  }
  v88 = objc_msgSend(*(id *)&v52[v53], "geometry");
  if (v88)
  {
    v89 = v88;
    objc_msgSend(v88, "setFirstMaterial:", *(_QWORD *)&v52[v120]);

  }
  v90 = objc_msgSend(*(id *)&v52[v54], "geometry");
  if (v90)
  {
    v91 = v90;
    objc_msgSend(v90, "setFirstMaterial:", *(_QWORD *)&v52[v114]);

  }
  sub_100029964();
  v92 = (void *)objc_opt_self(SCNTransaction);
  objc_msgSend(v92, "begin");
  if (*v55 > 0.0)
  {
    *(float *)&v93 = *v55;
    objc_msgSend(v52, "addChildNode:", *(_QWORD *)&v52[v116], v93);
  }
  if (v55[1] > 0.0)
    objc_msgSend(v52, "addChildNode:", *(_QWORD *)&v52[v118]);
  if (v55[2] > 0.0)
    objc_msgSend(v52, "addChildNode:", *(_QWORD *)&v52[v53]);
  if (v55[3] > 0.0)
    objc_msgSend(v52, "addChildNode:", *(_QWORD *)&v52[v54]);
  v94 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_numbers;
  objc_msgSend(v52, "addChildNode:", *(_QWORD *)&v52[OBJC_IVAR____TtC7Measure19LineDivisionsRender_numbers]);
  v95 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_endNumber;
  objc_msgSend(v52, "addChildNode:", *(_QWORD *)&v52[OBJC_IVAR____TtC7Measure19LineDivisionsRender_endNumber]);
  v96 = *(id *)&v52[v116];
  objc_msgSend(v96, "scale");
  LODWORD(v97) = 0;
  objc_msgSend(v96, "setScale:", v97);

  v98 = *(id *)&v52[v118];
  objc_msgSend(v98, "scale");
  LODWORD(v99) = 0;
  objc_msgSend(v98, "setScale:", v99);

  v100 = *(id *)&v52[v53];
  objc_msgSend(v100, "scale");
  LODWORD(v101) = 0;
  objc_msgSend(v100, "setScale:", v101);

  v102 = *(id *)&v52[v54];
  objc_msgSend(v102, "scale");
  LODWORD(v103) = 0;
  objc_msgSend(v102, "setScale:", v103);

  v104 = *(id *)&v52[v94];
  objc_msgSend(v104, "position");
  objc_msgSend(v104, "setPosition:");

  v105 = *(id *)&v52[v95];
  objc_msgSend(v105, "position");
  objc_msgSend(v105, "setPosition:");

  objc_msgSend(v92, "commit");
  return v52;
}

void sub_100029570(uint64_t a1)
{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSString v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSString v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  NSString v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD v37[3];
  uint64_t v38;

  v3 = *(void **)((char *)v1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0Material);
  sub_10002C9F4(a1, (uint64_t)v37);
  v4 = v38;
  if (v38)
  {
    v5 = sub_10000F66C(v37, v38);
    v6 = *(_QWORD *)(v4 - 8);
    __chkstk_darwin(v5);
    v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v6 + 16))(v8);
    v9 = _bridgeAnythingToObjectiveC<A>(_:)(v8, v4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    sub_10000F690(v37);
  }
  else
  {
    v9 = 0;
  }
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setValue:forKeyPath:", v9, v10);
  swift_unknownObjectRelease(v9);

  v11 = *(void **)((char *)v1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1Material);
  sub_10002C9F4(a1, (uint64_t)v37);
  v12 = v38;
  if (v38)
  {
    v13 = sub_10000F66C(v37, v38);
    v36 = &v35;
    v14 = *(_QWORD *)(v12 - 8);
    __chkstk_darwin(v13);
    v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v14 + 16))(v16);
    v17 = _bridgeAnythingToObjectiveC<A>(_:)(v16, v12);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v12);
    sub_10000F690(v37);
  }
  else
  {
    v17 = 0;
  }
  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "setValue:forKeyPath:", v17, v18);
  swift_unknownObjectRelease(v17);

  v36 = v1;
  v19 = *(void **)((char *)v1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2Material);
  sub_10002C9F4(a1, (uint64_t)v37);
  v20 = v38;
  if (v38)
  {
    v21 = sub_10000F66C(v37, v38);
    v22 = *(_QWORD *)(v20 - 8);
    __chkstk_darwin(v21);
    v24 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v22 + 16))(v24);
    v25 = _bridgeAnythingToObjectiveC<A>(_:)(v24, v20);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v20);
    sub_10000F690(v37);
  }
  else
  {
    v25 = 0;
  }
  v26 = String._bridgeToObjectiveC()();
  objc_msgSend(v19, "setValue:forKeyPath:", v25, v26);
  swift_unknownObjectRelease(v25);

  v27 = *(void **)((char *)v36 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3Material);
  sub_10002C9F4(a1, (uint64_t)v37);
  v28 = v38;
  if (v38)
  {
    v29 = sub_10000F66C(v37, v38);
    v30 = *(_QWORD *)(v28 - 8);
    __chkstk_darwin(v29);
    v32 = (char *)&v35 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v30 + 16))(v32);
    v33 = _bridgeAnythingToObjectiveC<A>(_:)(v32, v28);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v28);
    sub_10000F690(v37);
  }
  else
  {
    v33 = 0;
  }
  v34 = String._bridgeToObjectiveC()();
  objc_msgSend(v27, "setValue:forKeyPath:", v33, v34);
  swift_unknownObjectRelease(v33);

}

void sub_100029964()
{
  uint64_t v0;
  void *v1;
  Class isa;
  NSString v3;
  Class v4;
  NSString v5;
  Class v6;
  NSString v7;
  Class v8;
  NSString v9;
  Class v10;
  NSString v11;
  Class v12;
  NSString v13;
  Class v14;
  NSString v15;
  void *v16;
  Class v17;
  NSString v18;
  Class v19;
  NSString v20;
  Class v21;
  NSString v22;
  Class v23;
  NSString v24;
  Class v25;
  NSString v26;
  Class v27;
  NSString v28;
  Class v29;
  id v30;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0Material);
  if (qword_10047AC88 != -1)
    swift_once(&qword_10047AC88, sub_10018362C);
  isa = Float._bridgeToObjectiveC()().super.super.isa;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setValue:forKeyPath:", isa, v3);

  v4 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setValue:forKeyPath:", v4, v5);

  v6 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setValue:forKeyPath:", v6, v7);

  if (qword_10047AC90 != -1)
    swift_once(&qword_10047AC90, sub_100183694);
  v8 = Float._bridgeToObjectiveC()().super.super.isa;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setValue:forKeyPath:", v8, v9);

  if (qword_10047AC98 != -1)
    swift_once(&qword_10047AC98, sub_100183710);
  v10 = Int._bridgeToObjectiveC()().super.super.isa;
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setValue:forKeyPath:", v10, v11);

  v12 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setValue:forKeyPath:", v12, v13);

  v14 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setValue:forKeyPath:", v14, v15);

  if (qword_10047AC60 != -1)
    swift_once(&qword_10047AC60, sub_1001834A0);
  if ((byte_1004AF791 & 1) == 0)
  {
    v16 = *(void **)(v0 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1Material);
    v17 = Float._bridgeToObjectiveC()().super.super.isa;
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "setValue:forKeyPath:", v17, v18);

    v19 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    v20 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "setValue:forKeyPath:", v19, v20);

    v21 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    v22 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "setValue:forKeyPath:", v21, v22);

    v23 = Float._bridgeToObjectiveC()().super.super.isa;
    v24 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "setValue:forKeyPath:", v23, v24);

    v25 = Int._bridgeToObjectiveC()().super.super.isa;
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "setValue:forKeyPath:", v25, v26);

    v27 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    v28 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "setValue:forKeyPath:", v27, v28);

    v29 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    v30 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "setValue:forKeyPath:", v29, v30);

  }
}

void sub_100029E84()
{
  char *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char **KeyPath;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v31;
  id v32;
  NSString v33;
  _BYTE *v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  __n128 v44;
  __n128 v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  id v49;
  Class isa;
  NSString v51;
  Class v52;
  NSString v53;
  Class v54;
  NSString v55;
  Class v56;
  NSString v57;
  Class v58;
  NSString v59;
  Class v60;
  NSString v61;
  Class v62;
  NSString v63;
  Class v64;
  NSString v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  char v75[24];
  _QWORD v76[4];
  char v77[24];
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  char v81[24];
  char v82[24];
  _QWORD v83[7];

  v1 = v0;
  v2 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v3 = swift_allocObject(v2, 64, 7);
  v4 = *(void **)&v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0Material];
  *(_OWORD *)(v3 + 16) = xmmword_1003B1410;
  v5 = *(void **)&v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1Material];
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = v5;
  v6 = *(void **)&v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2Material];
  v7 = *(void **)&v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3Material];
  *(_QWORD *)(v3 + 48) = v6;
  *(_QWORD *)(v3 + 56) = v7;
  v83[0] = v3;
  specialized Array._endMutation()(v3);
  v8 = v83[0];
  v9 = (void *)objc_opt_self(Gestalt);
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  if (!objc_msgSend(v9, "jasperAvailable")
    || (v71 = (id)objc_opt_self(NSUserDefaults),
        v14 = objc_msgSend(v71, "standardUserDefaults"),
        v15 = objc_msgSend(v14, "isLineOcclusionEnabled"),
        v14,
        !v15))
  {
    swift_bridgeObjectRelease(v83[0]);
    return;
  }
  v17 = *(_QWORD *)MeasureCore.shared.unsafeMutableAddressor(v16);
  swift_beginAccess(v17 + 112, v82, 0, 0);
  if (!*(_QWORD *)(v17 + 112))
  {
    swift_bridgeObjectRelease(v8);
    return;
  }
  v69 = *(_QWORD *)(v17 + 112);
  v18 = objc_msgSend(v71, "standardUserDefaults", swift_retain().n128_f64[0]);
  KeyPath = (char **)swift_getKeyPath(&unk_1003B1B18);
  if (qword_10047A930 != -1)
LABEL_26:
    swift_once(&qword_10047A930, sub_100083368);
  v20 = (void *)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (!*((_QWORD *)&xmmword_1004AF258 + 1))
    goto LABEL_34;
  v21 = (void *)Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
  v22 = swift_allocObject(&unk_10043F600, 24, 7);
  v68 = v1;
  swift_unknownObjectWeakInit(v22 + 16, v1);
  v23 = swift_allocObject(&unk_10043F628, 32, 7);
  *(_QWORD *)(v23 + 16) = v22;
  *(_QWORD *)(v23 + 24) = v8;
  v24 = v20;
  swift_bridgeObjectRetain(v8);
  NSUserDefaults.performOnChange<A>(to:on:action:)(KeyPath, v21, sub_10002CEF0, v23);

  swift_release();
  swift_release();
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v67 = v8;
    else
      v67 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v25 = _CocoaArrayWrapper.endIndex.getter(v67);
    swift_bridgeObjectRelease(v8);
    if (v25)
      goto LABEL_8;
LABEL_31:
    swift_release();
    swift_bridgeObjectRelease(v8);
    v68[OBJC_IVAR____TtC7Measure19LineDivisionsRender_isOcclusionInitialized] = 1;
    return;
  }
  v25 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v25)
    goto LABEL_31;
LABEL_8:
  v26 = (uint64_t *)(v69 + 208);
  swift_beginAccess(v69 + 208, v81, 0, 0);
  v27 = 4;
  KeyPath = &selRef_renderer_didAddNode_forAnchor_;
  v70 = v25;
  while (1)
  {
    v18 = (id)(v27 - 4);
    if ((v8 & 0xC000000000000001) != 0)
      v34 = (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(v27 - 4, v8);
    else
      v34 = *(id *)(v8 + 8 * v27);
    v1 = v34;
    v35 = v27 - 3;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (qword_10047AF18 != -1)
      swift_once(&qword_10047AF18, sub_1001963D0);
    v39 = UIColor.rgba.getter();
    v79 = 0u;
    v80 = 0u;
    v78 = 0u;
    if (!*v26)
      break;
    v40 = v36;
    v41 = v37;
    v42 = v38;
    swift_retain();
    ADProcessor.transformer.getter(v43);
    v44 = swift_release();
    Transformer.clipToCameraNormalized.getter(v83, v44);
    v45 = swift_release();
    simd_float3x3.copy(from:)(v83, v45);
    v46 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1003B19E0, v78.f32[0]), (float32x4_t)xmmword_1003B19F0, *(float32x2_t *)v78.f32, 1), (float32x4_t)xmmword_1003B1A00, v78, 2);
    v47 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1003B19E0, v79.f32[0]), (float32x4_t)xmmword_1003B19F0, *(float32x2_t *)v79.f32, 1), (float32x4_t)xmmword_1003B1A00, v79, 2);
    v46.i32[3] = v74.i32[3];
    v48 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1003B19E0, v80.f32[0]), (float32x4_t)xmmword_1003B19F0, *(float32x2_t *)v80.f32, 1), (float32x4_t)xmmword_1003B1A00, v80, 2);
    v47.i32[3] = v73.i32[3];
    v73 = v47;
    v74 = v46;
    v48.i32[3] = v72.i32[3];
    v72 = v48;
    v49 = objc_msgSend(v71, "standardUserDefaults");
    objc_msgSend(v49, "isLineOcclusionEnabled");

    isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    v51 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setValue:forKeyPath:", isa, v51);

    SCNVector4.init(_:_:_:_:)(v39, v40, v41, v42);
    v52 = SCNVector4._bridgeToObjectiveC()().super.isa;
    v53 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setValue:forKeyPath:", v52, v53);

    v54 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    v55 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setValue:forKeyPath:", v54, v55);

    SCNVector3.init(_:)(*(double *)v74.i64);
    v56 = SCNVector3._bridgeToObjectiveC()().super.isa;
    v57 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setValue:forKey:", v56, v57);

    SCNVector3.init(_:)(*(double *)v73.i64);
    v58 = SCNVector3._bridgeToObjectiveC()().super.isa;
    v59 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setValue:forKey:", v58, v59);

    SCNVector3.init(_:)(*(double *)v72.i64);
    v60 = SCNVector3._bridgeToObjectiveC()().super.isa;
    v61 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setValue:forKey:", v60, v61);

    v62 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    v63 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setValue:forKeyPath:", v62, v63);

    v64 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    v65 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setValue:forKeyPath:", v64, v65);

    v66 = *v26;
    if (!*v26)
      goto LABEL_33;
    swift_beginAccess(v66 + 242, v77, 0, 0);
    if (*(_BYTE *)(v66 + 242) == 1)
    {
      swift_beginAccess(v66 + 256, v75, 0, 0);
      v29 = *(_QWORD *)(v66 + 256);
      if (!v29)
        goto LABEL_11;
      swift_unknownObjectRetain_n(*(_QWORD *)(v66 + 256), 2);
    }
    else
    {
      v28 = swift_retain();
      v29 = ADProcessor.outputDepthTexture.getter(v28);
      swift_release();
      swift_unknownObjectRetain(v29);
    }
    ObjectType = swift_getObjectType(v29);
    v76[3] = ObjectType;
    v76[0] = v29;
    swift_unknownObjectRetain(v29);
    v31 = _bridgeAnythingToObjectiveC<A>(_:)(v76, ObjectType);
    v32 = objc_msgSend((id)objc_opt_self(SCNMaterialProperty), "materialPropertyWithContents:", v31);
    swift_unknownObjectRelease(v31);
    sub_10000F690(v76);
    v33 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setValue:forKey:", v32, v33);
    swift_unknownObjectRelease(v29);

    v25 = v70;
LABEL_11:
    objc_msgSend(v1, "setBlendMode:", 6);

    swift_unknownObjectRelease(v29);
    ++v27;
    if (v35 == v25)
      goto LABEL_31;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

void *sub_10002A73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  Class isa;
  NSString v12;
  uint64_t v13;
  _BYTE v14[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  result = (void *)swift_unknownObjectWeakLoadStrong(v4, v5);
  if (result)
  {

    if ((unint64_t)a3 >> 62)
    {
      if (a3 < 0)
        v13 = a3;
      else
        v13 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a3);
      result = (void *)_CocoaArrayWrapper.endIndex.getter(v13);
      v7 = (uint64_t)result;
      if (result)
        goto LABEL_4;
    }
    else
    {
      v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (void *)swift_bridgeObjectRetain(a3);
      if (v7)
      {
LABEL_4:
        if (v7 < 1)
        {
          __break(1u);
          return result;
        }
        v8 = 0;
        do
        {
          if ((a3 & 0xC000000000000001) != 0)
            v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a3);
          else
            v9 = *(id *)(a3 + 8 * v8 + 32);
          v10 = v9;
          ++v8;
          isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
          v12 = String._bridgeToObjectiveC()();
          objc_msgSend(v10, "setValue:forKeyPath:", isa, v12);

        }
        while (v7 != v8);
      }
    }
    return (void *)swift_bridgeObjectRelease(a3);
  }
  return result;
}

void sub_10002A8A8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  char v17;

  v2 = v1;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_isOcclusionInitialized) & 1) == 0)
    sub_100029E84();
  v4 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_isClosestLine;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_isClosestLine) = a1 & 1;
  sub_10002AA08(1);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_numbers);
  v6 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_state;
  v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_state);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_state) = *(_QWORD *)(v2
                                                                                     + OBJC_IVAR____TtC7Measure19LineDivisionsRender_state);
  sub_10006E1F0(v7);
  if (*(_BYTE *)(v2 + v4) == 1)
  {
    v8 = *(_QWORD *)(v2 + v6);
    v9 = v8 > 5;
    v10 = (0x25u >> v8) & 1;
    if (v9)
      v11 = 0;
    else
      v11 = v10;
  }
  else
  {
    v11 = 0;
  }
  if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_isOcclusionInitialized) & 1) == 0)
    sub_10006FB00();
  v12 = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_shouldRenderNumbers);
  *(_BYTE *)(v5 + OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_shouldRenderNumbers) = v11;
  if (v11 != v12)
    sub_10006F0B4(0);
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_endNumber);
  if (*(_BYTE *)(v2 + v4) == 1)
  {
    v14 = *(_QWORD *)(v2 + v6);
    v9 = v14 > 5;
    v15 = (0x25u >> v14) & 1;
    if (v9)
      v16 = 0;
    else
      v16 = v15;
  }
  else
  {
    v16 = 0;
  }
  if ((*(_BYTE *)(v13 + OBJC_IVAR____TtC7Measure22LineDivisionsEndNumber_isOcclusionInitialized) & 1) == 0)
    sub_1001C4A9C();
  v17 = *(_BYTE *)(v13 + OBJC_IVAR____TtC7Measure22LineDivisionsEndNumber_shouldRenderNumbers);
  *(_BYTE *)(v13 + OBJC_IVAR____TtC7Measure22LineDivisionsEndNumber_shouldRenderNumbers) = v16;
  if ((v17 & 1) == 0 && v16 == 1)
    sub_1001C5338();
}

void sub_10002AA08(char a1)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  float v7;
  float v8;
  uint64_t v9;
  BOOL v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_isClosestLine) == 1)
  {
    v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_state);
    v3 = v2 > 5;
    v4 = (0x25u >> v2) & 1;
    if (v3)
      v5 = 0;
    else
      v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  v6 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState);
  if (v6 == 1)
  {
    if ((v5 & 1) != 0)
      return;
    goto LABEL_18;
  }
  if (((v5 ^ (v6 != 2)) & 1) != 0)
    return;
  if (!v5)
  {
LABEL_18:
    v8 = 0.0;
    if ((a1 & 1) != 0)
    {
      if (qword_10047AD48 != -1)
      {
        v13 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState;
        swift_once(&qword_10047AD48, sub_100183D88);
        v6 = *(unsigned __int8 *)(v1 + v13);
      }
      v8 = *(float *)&dword_1004AF84C;
    }
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_state);
    v10 = (unint64_t)(v9 - 3) < 2 || v9 == 7;
    v11 = 0.2;
    if (!v10)
      v11 = 1.0;
    v12 = v8 * v11;
    if (v6 == 3 || v6 == 2)
      sub_10002B0A8(v12);
    return;
  }
  v7 = 0.0;
  if ((a1 & 1) != 0)
  {
    if (qword_10047AD40 != -1)
    {
      v14 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState;
      swift_once(&qword_10047AD40, sub_100183D20);
      v6 = *(unsigned __int8 *)(v1 + v14);
    }
    v7 = *(float *)&dword_1004AF848;
  }
  if (v6 == 3 || !v6)
    sub_10002AB70(v7);
}

void sub_10002AB70(float a1)
{
  _BYTE *v1;
  _BYTE *v2;
  _BYTE *v4;
  __n128 *v5;
  float v6;
  _BOOL4 v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  void *v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _BYTE *v18;
  id v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  char v36;
  uint64_t v37;
  void *v38;
  void *v39;
  double v40;
  void *v41;
  double v42;
  void *v43;
  double v44;
  void *v45;
  double v46;
  __n128 v47;
  float32x4_t v48;
  __n128 v49;
  float32x4_t v50;
  __n128 v51;
  float32x4_t v52;
  __n128 v53;
  float32x4_t v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  float32x4_t v59;
  _QWORD v60[6];
  uint64_t v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  _QWORD aBlock[2];
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;

  v2 = v1;
  v4 = *(_BYTE **)&v1[OBJC_IVAR____TtC7Measure19LineDivisionsRender_numbers];
  v4[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_shouldHide] = 0;
  v5 = (__n128 *)&v4[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms];
  v6 = sub_10007011C(*(__n128 *)&v4[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms], *(__n128 *)&v4[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 16], *(__n128 *)&v4[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 32], *(__n128 *)&v4[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 48], *(__n128 *)&v4[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 64], *(__n128 *)&v4[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 80], *(__n128 *)&v4[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 96], *(__n128 *)&v4[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 112]);
  v7 = (~LODWORD(v6) & 0x7F800000) == 0 || v6 < 0.0;
  v8 = v6 > 1000.0 || v7;
  objc_msgSend(v4, "setHidden:", v8);
  v9 = *(_BYTE **)&v1[OBJC_IVAR____TtC7Measure19LineDivisionsRender_endNumber];
  v9[OBJC_IVAR____TtC7Measure22LineDivisionsEndNumber_shouldHide] = 0;
  sub_1001C5520();
  objc_msgSend(v9, "setHidden:", v10 & 1);
  if (a1 <= 0.0)
  {
    v39 = *(void **)&v2[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0];
    objc_msgSend(v39, "scale");
    LODWORD(v40) = 1.0;
    objc_msgSend(v39, "setScale:", v40);
    v41 = *(void **)&v2[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1];
    objc_msgSend(v41, "scale");
    LODWORD(v42) = 1.0;
    objc_msgSend(v41, "setScale:", v42);
    v43 = *(void **)&v2[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2];
    objc_msgSend(v43, "scale");
    LODWORD(v44) = 1.0;
    objc_msgSend(v43, "setScale:", v44);
    v45 = *(void **)&v2[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3];
    objc_msgSend(v45, "scale");
    LODWORD(v46) = 1.0;
    objc_msgSend(v45, "setScale:", v46);
    v2[OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState] = 2;
  }
  else
  {
    objc_msgSend(v2, "removeAllActions");
    v11 = *(void **)&v2[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0];
    objc_msgSend(v11, "scale");
    LODWORD(v12) = 1.0;
    objc_msgSend(v11, "setScale:", v12);
    if (qword_10047AC60 != -1)
      swift_once(&qword_10047AC60, sub_1001834A0);
    if ((byte_1004AF791 & 1) == 0)
    {
      v13 = *(void **)&v2[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1];
      objc_msgSend(v13, "scale");
      LODWORD(v14) = 1.0;
      objc_msgSend(v13, "setScale:", v14);
    }
    v15 = (void *)objc_opt_self(SCNAction);
    v16 = swift_allocObject(&unk_10043F4C0, 28, 7);
    *(_QWORD *)(v16 + 16) = v2;
    *(float *)(v16 + 24) = a1;
    v68.n128_u64[0] = (unint64_t)sub_10002CE18;
    v68.n128_u64[1] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    v67.n128_u64[0] = (unint64_t)sub_1000D28CC;
    v67.n128_u64[1] = (unint64_t)&unk_10043F4D8;
    v17 = _Block_copy(aBlock);
    v18 = v2;
    swift_release();
    v19 = objc_msgSend(v15, "customActionWithDuration:actionBlock:", v17, a1);
    _Block_release(v17);
    v51 = v5[1];
    v53 = *v5;
    v47 = v5[3];
    v49 = v5[2];
    v57 = v5[5];
    v58 = v5[4];
    v55 = v5[7];
    v56 = v5[6];
    sub_10006EBE8();
    v59 = v20;
    type metadata accessor for MeasureCamera(0);
    v53.n128_u64[0] = simd_float4x4.position.getter(v53, v51, v49, v47);
    static ComputedCameraProperties.shared.getter(&v61);
    v21 = (float32x4_t)static MeasureCamera.viewSpacePoint(fromWorldSpace:view:)(v53.n128_f64[0], v62, v63, v64, v65);
    v22 = vmulq_f32(v59, (float32x4_t)xmmword_1003B1A10);
    v23 = (int32x4_t)vnegq_f32(v22);
    v24 = (int8x16_t)vtrn2q_s32((int32x4_t)v22, vtrn1q_s32((int32x4_t)v22, v23));
    v52 = (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v23, 8uLL);
    v54 = (float32x4_t)vextq_s8(v24, v24, 8uLL);
    v25 = (float32x4_t)vrev64q_s32((int32x4_t)v22);
    v25.i32[0] = v23.i32[1];
    v25.i32[3] = v23.i32[2];
    v48 = v25;
    v26 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v52, *(float32x2_t *)v21.f32, 1), v54, v21.f32[0]), v25, v21, 2);
    v27 = (int32x4_t)vnegq_f32(v26);
    v28 = (int8x16_t)vtrn2q_s32((int32x4_t)v26, vtrn1q_s32((int32x4_t)v26, v27));
    v29 = (float32x4_t)vrev64q_s32((int32x4_t)v26);
    v29.i32[0] = v27.i32[1];
    v29.i32[3] = v27.i32[2];
    v50 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v26, v59, 3), v29, v59, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v27, 8uLL), *(float32x2_t *)v59.f32, 1), (float32x4_t)vextq_s8(v28, v28, 8uLL), v59.f32[0]));
    v58.n128_u64[0] = simd_float4x4.position.getter(v58, v57, v56, v55);
    static ComputedCameraProperties.shared.getter(aBlock);
    v30 = (float32x4_t)static MeasureCamera.viewSpacePoint(fromWorldSpace:view:)(v58.n128_f64[0], v67, v68, v69, v70);
    v31 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v52, *(float32x2_t *)v30.f32, 1), v54, v30.f32[0]), v48, v30, 2);
    v32 = (int32x4_t)vnegq_f32(v31);
    v33 = (int8x16_t)vtrn2q_s32((int32x4_t)v31, vtrn1q_s32((int32x4_t)v31, v32));
    v34 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v32, 8uLL), *(float32x2_t *)v59.f32, 1), (float32x4_t)vextq_s8(v33, v33, 8uLL), v59.f32[0]);
    v35 = (float32x4_t)vrev64q_s32((int32x4_t)v31);
    v35.i32[0] = v32.i32[1];
    v35.i32[3] = v32.i32[2];
    if (vsubq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v31, v59, 3), v35, v59, 2), v34), v50).f32[0] <= 0.0)
      v36 = 2;
    else
      v36 = 3;
    sub_10006ECD8(v36);
    v4[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_lastNumbersOrientation] = v36;
    sub_10006E468();
    v18[OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState] = 1;
    v37 = swift_allocObject(&unk_10043F510, 24, 7);
    *(_QWORD *)(v37 + 16) = v18;
    v60[4] = sub_10002CE3C;
    v60[5] = v37;
    v60[0] = _NSConcreteStackBlock;
    v60[1] = 1107296256;
    v60[2] = sub_10003ECA0;
    v60[3] = &unk_10043F528;
    v38 = _Block_copy(v60);
    objc_msgSend(v18, "runAction:completionHandler:", v19, v38, swift_release().n128_f64[0]);
    _Block_release(v38);

  }
}

void sub_10002B0A8(float a1)
{
  _BYTE *v1;
  void *v3;
  uint64_t v4;
  void *v5;
  _BYTE *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  double v11;
  void *v12;
  double v13;
  void *v14;
  double v15;
  void *v16;
  double v17;
  void **v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  if (a1 <= 0.0)
  {
    v10 = *(void **)&v1[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0];
    objc_msgSend(v10, "scale");
    LODWORD(v11) = 0;
    objc_msgSend(v10, "setScale:", v11);
    v12 = *(void **)&v1[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1];
    objc_msgSend(v12, "scale");
    LODWORD(v13) = 0;
    objc_msgSend(v12, "setScale:", v13);
    v14 = *(void **)&v1[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2];
    objc_msgSend(v14, "scale");
    LODWORD(v15) = 0;
    objc_msgSend(v14, "setScale:", v15);
    v16 = *(void **)&v1[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3];
    objc_msgSend(v16, "scale");
    LODWORD(v17) = 0;
    objc_msgSend(v16, "setScale:", v17);
    v1[OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState] = 0;
  }
  else
  {
    objc_msgSend(v1, "removeAllActions");
    v3 = (void *)objc_opt_self(SCNAction);
    v4 = swift_allocObject(&unk_10043F560, 28, 7);
    *(_QWORD *)(v4 + 16) = v1;
    *(float *)(v4 + 24) = a1;
    v22 = sub_10002CE54;
    v23 = v4;
    v18 = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_1000D28CC;
    v21 = &unk_10043F578;
    v5 = _Block_copy(&v18);
    v6 = v1;
    swift_release();
    v7 = objc_msgSend(v3, "customActionWithDuration:actionBlock:", v5, a1);
    _Block_release(v5);
    v6[OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState] = 3;
    v8 = swift_allocObject(&unk_10043F5B0, 24, 7);
    *(_QWORD *)(v8 + 16) = v6;
    v22 = sub_10002CE84;
    v23 = v8;
    v18 = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_10003ECA0;
    v21 = &unk_10043F5C8;
    v9 = _Block_copy(&v18);
    objc_msgSend(v6, "runAction:completionHandler:", v7, v9, swift_release().n128_f64[0]);
    _Block_release(v9);

  }
}

id sub_10002B2FC(double a1, float a2, uint64_t a3, uint64_t a4)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  void *v19;
  Class isa;
  NSString v21;
  void *v22;
  float v23;
  float v24;
  double v25;
  void *v26;
  float v27;
  float v28;
  void *v29;
  Class v30;
  NSString v31;
  float v32;
  double v33;
  void *v34;
  float v35;
  float v36;
  double v37;
  void *v38;
  char *v39;
  id v40;
  void *v41;
  id result;

  v5 = a1;
  v6 = (float)(v5 / a2) + *(float *)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_lastNormTExit);
  v7 = 1.0;
  if (v6 <= 1.0)
    v7 = v6;
  if (v6 >= 0.0)
    v8 = v7;
  else
    v8 = 0.0;
  if (qword_10047ACF0 != -1)
    swift_once(&qword_10047ACF0, sub_1001839BC);
  v9 = *(float *)&dword_1004AF820;
  v10 = v8 - *(float *)&dword_1004AF820;
  if (qword_10047AD20 != -1)
  {
    swift_once(&qword_10047AD20, sub_100183BC8);
    v9 = *(float *)&dword_1004AF820;
  }
  v11 = v10 / (float)(*(float *)&dword_1004AF838 - v9);
  v12 = 1.0;
  if (v11 <= 1.0)
    v12 = v11;
  if (v11 >= 0.0)
    v13 = v12;
  else
    v13 = 0.0;
  if (qword_10047ACE8 != -1)
    swift_once(&qword_10047ACE8, sub_1001839AC);
  v14 = *(float *)&dword_1004AF81C;
  v15 = v8 - *(float *)&dword_1004AF81C;
  if (qword_10047AD18 != -1)
  {
    swift_once(&qword_10047AD18, sub_100183B60);
    v14 = *(float *)&dword_1004AF81C;
  }
  v16 = v15 / (float)(*(float *)&dword_1004AF834 - v14);
  v17 = 1.0;
  if (v16 <= 1.0)
    v17 = v16;
  if (v16 >= 0.0)
    v18 = v17;
  else
    v18 = 0.0;
  if (qword_10047ACE0 != -1)
    swift_once(&qword_10047ACE0, sub_10018394C);
  if (qword_10047AD10 != -1)
    swift_once(&qword_10047AD10, sub_100183AFC);
  if (qword_10047ACF8 != -1)
    swift_once(&qword_10047ACF8, sub_1001839CC);
  if (qword_10047AD28 != -1)
    swift_once(&qword_10047AD28, sub_100183C30);
  if (qword_10047AD00 != -1)
    swift_once(&qword_10047AD00, sub_100183A2C);
  if (qword_10047AD30 != -1)
    swift_once(&qword_10047AD30, sub_100183C98);
  if (qword_10047AD08 != -1)
    swift_once(&qword_10047AD08, sub_100183A94);
  if (qword_10047AD38 != -1)
    swift_once(&qword_10047AD38, sub_100183CA4);
  v19 = *(void **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0Material);
  isa = Float._bridgeToObjectiveC()().super.super.isa;
  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v19, "setValue:forKey:", isa, v21);

  if (qword_10047AC60 != -1)
    swift_once(&qword_10047AC60, sub_1001834A0);
  if (byte_1004AF791 == 1)
  {
    v22 = *(void **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1);
    v23 = 1.0 - (float)((float)(1.0 - v18) * (float)(1.0 - v18));
    objc_msgSend(v22, "scale");
    if (v23 <= v24)
      v23 = v24;
    objc_msgSend(v22, "scale");
    *(float *)&v25 = v23;
    objc_msgSend(v22, "setScale:", v25);
    v26 = *(void **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2);
    objc_msgSend(v26, "scale");
    if (v13 > v27)
      v28 = v13;
    else
      v28 = v27;
  }
  else
  {
    v29 = *(void **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1Material);
    v30 = Float._bridgeToObjectiveC()().super.super.isa;
    v31 = String._bridgeToObjectiveC()();
    objc_msgSend(v29, "setValue:forKey:", v30, v31);

    v26 = *(void **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2);
    v28 = 1.0 - (float)((float)(1.0 - v18) * (float)(1.0 - v18));
    objc_msgSend(v26, "scale");
    if (v28 <= v32)
      v28 = v32;
  }
  objc_msgSend(v26, "scale");
  *(float *)&v33 = v28;
  objc_msgSend(v26, "setScale:", v33);
  v34 = *(void **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3);
  objc_msgSend(v34, "scale");
  if (v13 > v35)
    v36 = v13;
  else
    v36 = v35;
  objc_msgSend(v34, "scale");
  *(float *)&v37 = v36;
  objc_msgSend(v34, "setScale:", v37);
  v38 = *(void **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_numbers);
  objc_msgSend(v38, "position");
  objc_msgSend(v38, "position");
  objc_msgSend(v38, "setPosition:");
  v39 = *(char **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_endNumber);
  objc_msgSend(v39, "position");
  objc_msgSend(v39, "position");
  v40 = objc_msgSend(v39, "setPosition:");
  v41 = *(void **)&v39[OBJC_IVAR____TtC7Measure22LineDivisionsEndNumber_number];
  if (qword_10047ACB8 != -1)
    v40 = (id)swift_once(&qword_10047ACB8, sub_100183844);
  result = objc_msgSend(v41, "setScale:", * infix(_:_:)(v40));
  *(float *)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_lastNormTEnter) = v8;
  return result;
}

id sub_10002B9C8(double a1, float a2, uint64_t a3, uint64_t a4)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  void *v19;
  Class isa;
  NSString v21;
  void *v22;
  float v23;
  float v24;
  double v25;
  void *v26;
  float v27;
  float v28;
  void *v29;
  Class v30;
  NSString v31;
  float v32;
  double v33;
  void *v34;
  float v35;
  float v36;
  double v37;
  void *v38;
  char *v39;
  id v40;
  void *v41;
  id result;

  v5 = a1;
  v6 = *(float *)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_lastNormTEnter) - (float)(v5 / a2);
  v7 = 1.0;
  if (v6 <= 1.0)
    v7 = v6;
  if (v6 >= 0.0)
    v8 = v7;
  else
    v8 = 0.0;
  if (qword_10047ACF0 != -1)
    swift_once(&qword_10047ACF0, sub_1001839BC);
  v9 = *(float *)&dword_1004AF820;
  v10 = v8 - *(float *)&dword_1004AF820;
  if (qword_10047AD20 != -1)
  {
    swift_once(&qword_10047AD20, sub_100183BC8);
    v9 = *(float *)&dword_1004AF820;
  }
  v11 = v10 / (float)(*(float *)&dword_1004AF838 - v9);
  v12 = 1.0;
  if (v11 <= 1.0)
    v12 = v11;
  if (v11 >= 0.0)
    v13 = v12;
  else
    v13 = 0.0;
  if (qword_10047ACE8 != -1)
    swift_once(&qword_10047ACE8, sub_1001839AC);
  v14 = *(float *)&dword_1004AF81C;
  v15 = v8 - *(float *)&dword_1004AF81C;
  if (qword_10047AD18 != -1)
  {
    swift_once(&qword_10047AD18, sub_100183B60);
    v14 = *(float *)&dword_1004AF81C;
  }
  v16 = v15 / (float)(*(float *)&dword_1004AF834 - v14);
  v17 = 1.0;
  if (v16 <= 1.0)
    v17 = v16;
  if (v16 >= 0.0)
    v18 = v17;
  else
    v18 = 0.0;
  if (qword_10047ACE0 != -1)
    swift_once(&qword_10047ACE0, sub_10018394C);
  if (qword_10047AD10 != -1)
    swift_once(&qword_10047AD10, sub_100183AFC);
  if (qword_10047ACF8 != -1)
    swift_once(&qword_10047ACF8, sub_1001839CC);
  if (qword_10047AD28 != -1)
    swift_once(&qword_10047AD28, sub_100183C30);
  if (qword_10047AD00 != -1)
    swift_once(&qword_10047AD00, sub_100183A2C);
  if (qword_10047AD30 != -1)
    swift_once(&qword_10047AD30, sub_100183C98);
  if (qword_10047AD08 != -1)
    swift_once(&qword_10047AD08, sub_100183A94);
  if (qword_10047AD38 != -1)
    swift_once(&qword_10047AD38, sub_100183CA4);
  v19 = *(void **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0Material);
  isa = Float._bridgeToObjectiveC()().super.super.isa;
  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v19, "setValue:forKey:", isa, v21);

  if (qword_10047AC60 != -1)
    swift_once(&qword_10047AC60, sub_1001834A0);
  if (byte_1004AF791 == 1)
  {
    v22 = *(void **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1);
    v23 = 1.0 - (float)((float)(1.0 - v18) * (float)(1.0 - v18));
    objc_msgSend(v22, "scale");
    if (v24 < v23)
      v23 = v24;
    objc_msgSend(v22, "scale");
    *(float *)&v25 = v23;
    objc_msgSend(v22, "setScale:", v25);
    v26 = *(void **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2);
    objc_msgSend(v26, "scale");
    if (v27 >= v13)
      v28 = v13;
    else
      v28 = v27;
  }
  else
  {
    v29 = *(void **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1Material);
    v30 = Float._bridgeToObjectiveC()().super.super.isa;
    v31 = String._bridgeToObjectiveC()();
    objc_msgSend(v29, "setValue:forKey:", v30, v31);

    v26 = *(void **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2);
    v28 = 1.0 - (float)((float)(1.0 - v18) * (float)(1.0 - v18));
    objc_msgSend(v26, "scale");
    if (v32 < v28)
      v28 = v32;
  }
  objc_msgSend(v26, "scale");
  *(float *)&v33 = v28;
  objc_msgSend(v26, "setScale:", v33);
  v34 = *(void **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3);
  objc_msgSend(v34, "scale");
  if (v35 >= v13)
    v36 = v13;
  else
    v36 = v35;
  objc_msgSend(v34, "scale");
  *(float *)&v37 = v36;
  objc_msgSend(v34, "setScale:", v37);
  v38 = *(void **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_numbers);
  objc_msgSend(v38, "position");
  objc_msgSend(v38, "position");
  objc_msgSend(v38, "setPosition:");
  v39 = *(char **)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_endNumber);
  objc_msgSend(v39, "position");
  objc_msgSend(v39, "position");
  v40 = objc_msgSend(v39, "setPosition:");
  v41 = *(void **)&v39[OBJC_IVAR____TtC7Measure22LineDivisionsEndNumber_number];
  if (qword_10047ACB8 != -1)
    v40 = (id)swift_once(&qword_10047ACB8, sub_100183844);
  result = objc_msgSend(v41, "setScale:", * infix(_:_:)(v40));
  *(float *)(a4 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_lastNormTExit) = v8;
  return result;
}

id sub_10002C094(uint64_t a1)
{
  void *v2;
  double v3;
  void *v4;
  double v5;
  _BYTE *v6;
  double v7;
  _BYTE *v8;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0);
  objc_msgSend(v2, "scale");
  LODWORD(v3) = 0;
  objc_msgSend(v2, "setScale:", v3);
  if (qword_10047AC60 != -1)
    swift_once(&qword_10047AC60, sub_1001834A0);
  if ((byte_1004AF791 & 1) == 0)
  {
    v4 = *(void **)(a1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1);
    objc_msgSend(v4, "scale");
    LODWORD(v5) = 0;
    objc_msgSend(v4, "setScale:", v5);
  }
  *(_BYTE *)(a1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState) = 0;
  v6 = *(_BYTE **)(a1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_numbers);
  v6[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_shouldHide] = 1;
  *(float *)&v7 = sub_10007011C(*(__n128 *)&v6[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms], *(__n128 *)&v6[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 16], *(__n128 *)&v6[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 32], *(__n128 *)&v6[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 48], *(__n128 *)&v6[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 64], *(__n128 *)&v6[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 80], *(__n128 *)&v6[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 96], *(__n128 *)&v6[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 112]);
  objc_msgSend(v6, "setHidden:", 1, v7);
  v8 = *(_BYTE **)(a1 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_endNumber);
  v8[OBJC_IVAR____TtC7Measure22LineDivisionsEndNumber_shouldHide] = 1;
  return objc_msgSend(v8, "setHidden:", 1);
}

void sub_10002C1C8(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  __n128 *v20;
  uint64_t v21;
  __n128 *v22;
  void *v23;
  Class isa;
  NSString v25;
  Class v26;
  NSString v27;
  double v32;
  double v33;
  int v38;
  int v39;
  int v40;
  uint64_t v41;

  v33 = simd_float4x4.position.getter(a1, a2, a3, a4);
  SCNVector3.init(_:)(v33);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  type metadata accessor for SCNVector3(0);
  v16 = v15;
  v41 = v15;
  v38 = v10;
  v39 = v12;
  v40 = v14;
  sub_100029570((uint64_t)&v38);
  sub_100018180((uint64_t)&v38);
  v32 = simd_float4x4.position.getter(a5, a6, a7, a8);
  SCNVector3.init(_:)(v32);
  v41 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  sub_100029570((uint64_t)&v38);
  sub_100018180((uint64_t)&v38);
  v20 = (__n128 *)(v8 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_endTransforms);
  *v20 = a1;
  v20[1] = a2;
  v20[2] = a3;
  v20[3] = a4;
  v20[4] = a5;
  v20[5] = a6;
  v20[6] = a7;
  v20[7] = a8;
  v21 = *(_QWORD *)(v8 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_numbers);
  v22 = (__n128 *)(v21 + OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms);
  *v22 = a1;
  v22[1] = a2;
  v22[2] = a3;
  v22[3] = a4;
  v22[4] = a5;
  v22[5] = a6;
  v22[6] = a7;
  v22[7] = a8;
  v23 = *(void **)(v21 + OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbersMaterial);
  SCNVector3.init(_:)(v33);
  isa = SCNVector3._bridgeToObjectiveC()().super.isa;
  v25 = String._bridgeToObjectiveC()();
  objc_msgSend(v23, "setValue:forKeyPath:", isa, v25);

  SCNVector3.init(_:)(v32);
  v26 = SCNVector3._bridgeToObjectiveC()().super.isa;
  v27 = String._bridgeToObjectiveC()();
  objc_msgSend(v23, "setValue:forKeyPath:", v26, v27);

  sub_1001C3434(*v20, v20[1], v20[2], v20[3], v20[4], v20[5], v20[6], v20[7]);
}

void sub_10002C3BC(float a1)
{
  uint64_t v1;
  float v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;

  v3 = a1 * 10.0;
  if ((~LODWORD(v3) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v3 <= -9.2234e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v3 >= 9.2234e18)
  {
LABEL_28:
    __break(1u);
    return;
  }
  v4 = (uint64_t)v3;
  if ((uint64_t)v3 >= 30)
    v4 = 30;
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  v6 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0), "geometry"));
  if (v6)
  {
    v7 = v6;
    v8 = objc_opt_self(SCNBox);
    v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
    if (v9)
    {
      v10 = v9;
      objc_msgSend(v9, "setLength:", a1);
      objc_msgSend(v10, "setLengthSegmentCount:", v5);
    }

  }
  v11 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                              + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1), "geometry"));
  if (v11)
  {
    v12 = v11;
    v13 = objc_opt_self(SCNBox);
    v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
    if (v14)
    {
      v15 = v14;
      objc_msgSend(v14, "setLength:", a1);
      objc_msgSend(v15, "setLengthSegmentCount:", v5);
    }

  }
  v16 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                              + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2), "geometry"));
  if (v16)
  {
    v17 = v16;
    v18 = objc_opt_self(SCNBox);
    v19 = (void *)swift_dynamicCastObjCClass(v17, v18);
    if (v19)
    {
      v20 = v19;
      objc_msgSend(v19, "setLength:", a1);
      objc_msgSend(v20, "setLengthSegmentCount:", v5);
    }

  }
  v21 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                              + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3), "geometry"));
  if (v21)
  {
    v25 = v21;
    v22 = objc_opt_self(SCNBox);
    v23 = (void *)swift_dynamicCastObjCClass(v25, v22);
    if (v23)
    {
      v24 = v23;
      objc_msgSend(v23, "setLength:", a1);
      objc_msgSend(v24, "setLengthSegmentCount:", v5);
    }

  }
}

void sub_10002C618(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v5 = *(void **)(v2 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0Material);
  v6 = objc_msgSend(v5, "diffuse");
  objc_msgSend(v6, "setContents:", a1);

  v7 = *(void **)(v2 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1Material);
  v8 = objc_msgSend(v7, "diffuse");
  objc_msgSend(v8, "setContents:", a1);

  v9 = *(void **)(v2 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2Material);
  v10 = objc_msgSend(v9, "diffuse");
  objc_msgSend(v10, "setContents:", a1);

  v11 = *(void **)(v2 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3Material);
  v12 = objc_msgSend(v11, "diffuse");
  objc_msgSend(v12, "setContents:", a1);

  v13 = objc_msgSend(v5, "emission");
  objc_msgSend(v13, "setContents:", a2);

  v14 = objc_msgSend(v7, "emission");
  objc_msgSend(v14, "setContents:", a2);

  v15 = objc_msgSend(v9, "emission");
  objc_msgSend(v15, "setContents:", a2);

  v16 = objc_msgSend(v11, "emission");
  objc_msgSend(v16, "setContents:", a2);

}

uint64_t type metadata accessor for LineDivisionsRender()
{
  return objc_opt_self(_TtC7Measure19LineDivisionsRender);
}

uint64_t storeEnumTagSinglePayload for LineDivisionsRender.ShowState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10002C92C + 4 * byte_1003B1A25[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10002C960 + 4 * byte_1003B1A20[v4]))();
}

uint64_t sub_10002C960(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002C968(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002C970);
  return result;
}

uint64_t sub_10002C97C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002C984);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10002C988(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002C990(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LineDivisionsRender.ShowState()
{
  return &type metadata for LineDivisionsRender.ShowState;
}

unint64_t sub_10002C9B0()
{
  unint64_t result;

  result = qword_10047CAD0;
  if (!qword_10047CAD0)
  {
    result = swift_getWitnessTable(&unk_1003B1AC8, &type metadata for LineDivisionsRender.ShowState);
    atomic_store(result, (unint64_t *)&qword_10047CAD0);
  }
  return result;
}

uint64_t sub_10002C9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8((uint64_t *)&unk_10047ED00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10002CA3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10048A110;
  if (!qword_10048A110)
  {
    v1 = objc_opt_self(SCNMaterial);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10048A110);
  }
  return result;
}

unint64_t sub_10002CA78(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

void sub_10002CA88()
{
  _BYTE *v0;
  id v1;
  id v2;
  unint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  void *v19;
  _QWORD v20[4];

  v1 = sub_100181ABC(7);
  v2 = objc_msgSend(v1, "copy");

  _bridgeAnyObjectToAny(_:)(v20, v2);
  swift_unknownObjectRelease(v2);
  v3 = sub_10002CA3C();
  if (swift_dynamicCast(&v19, v20, (char *)&type metadata for Any + 8, v3, 6))
    v4 = v19;
  else
    v4 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0Material] = v4;
  v5 = sub_100181ABC(7);
  v6 = objc_msgSend(v5, "copy");

  _bridgeAnyObjectToAny(_:)(v20, v6);
  swift_unknownObjectRelease(v6);
  if (swift_dynamicCast(&v19, v20, (char *)&type metadata for Any + 8, v3, 6))
    v7 = v19;
  else
    v7 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1Material] = v7;
  v8 = sub_100181ABC(7);
  v9 = objc_msgSend(v8, "copy");

  _bridgeAnyObjectToAny(_:)(v20, v9);
  swift_unknownObjectRelease(v9);
  if (swift_dynamicCast(&v19, v20, (char *)&type metadata for Any + 8, v3, 6))
    v10 = v19;
  else
    v10 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2Material] = v10;
  v11 = sub_100181ABC(7);
  v12 = objc_msgSend(v11, "copy");

  _bridgeAnyObjectToAny(_:)(v20, v12);
  swift_unknownObjectRelease(v12);
  if (swift_dynamicCast(&v19, v20, (char *)&type metadata for Any + 8, v3, 6))
    v13 = v19;
  else
    v13 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3Material] = v13;
  v14 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD0;
  *(_QWORD *)&v0[v14] = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  v15 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD1;
  *(_QWORD *)&v0[v15] = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  v16 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD2;
  *(_QWORD *)&v0[v16] = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  v17 = OBJC_IVAR____TtC7Measure19LineDivisionsRender_divisionsLOD3;
  *(_QWORD *)&v0[v17] = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_isOnVerticalGuide] = 0;
  v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_state] = static MeasureObjectState.default;
  *(_DWORD *)&v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_lastNormTEnter] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_lastNormTExit] = 0;
  if (qword_10047AC60 != -1)
    swift_once(&qword_10047AC60, sub_1001834A0);
  v18 = -0.07;
  if (byte_1004AF791)
    v18 = -0.023;
  *(float *)&v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_numbersRevealOffset] = v18;
  v0[OBJC_IVAR____TtC7Measure19LineDivisionsRender_isOcclusionInitialized] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/LineDivisionsRender.swift", 33, 2, 144, 0);
  __break(1u);
}

uint64_t sub_10002CDF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 28, 7);
}

id sub_10002CE18(uint64_t a1, double a2)
{
  uint64_t v2;

  return sub_10002B2FC(a2, *(float *)(v2 + 24), a1, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10002CE24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002CE34(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10002CE3C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState) = 2;
}

id sub_10002CE54(uint64_t a1, double a2)
{
  uint64_t v2;

  return sub_10002B9C8(a2, *(float *)(v2 + 24), a1, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10002CE60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10002CE84()
{
  uint64_t v0;

  return sub_10002C094(*(_QWORD *)(v0 + 16));
}

const char *sub_10002CE8C()
{
  return "isLineOcclusionAlphaBlendingEnabled";
}

uint64_t sub_10002CEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

uint64_t sub_10002CEC4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void *sub_10002CEF0(uint64_t a1)
{
  uint64_t v1;

  return sub_10002A73C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

ValueMetadata *type metadata accessor for DeviceOrientationState()
{
  return &type metadata for DeviceOrientationState;
}

uint64_t sub_10002CF28()
{
  uint64_t result;

  result = Contexts.UIKit.init()();
  qword_1004AF198 = result;
  return result;
}

id sub_10002CF44@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A850 != -1)
    swift_once(&qword_10047A850, sub_10002CF28);
  v2 = (void *)qword_1004AF198;
  *a1 = qword_1004AF198;
  return v2;
}

unint64_t sub_10002CF94(uint64_t a1)
{
  unint64_t result;

  result = sub_10002CFB8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10002CFB8()
{
  unint64_t result;

  result = qword_10047CB00;
  if (!qword_10047CB00)
  {
    result = swift_getWitnessTable(&unk_1003B1B58, &type metadata for DeviceOrientationState);
    atomic_store(result, (unint64_t *)&qword_10047CB00);
  }
  return result;
}

id sub_10002CFFC(uint64_t a1)
{
  return *(id *)(a1 + qword_10047CB50);
}

uint64_t sub_10002D00C(uint64_t a1, uint64_t a2)
{
  return sub_100030C54(*(void **)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16), *(void **)a2, *(void **)(a2 + 8), *(_BYTE *)(a2 + 16));
}

void sub_10002D028(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = *(_QWORD *)&v1[qword_10047CBE0];
  if (!v1[qword_10047CBE0 + 16])
  {
    if ((v2 & 1) == 0)
    {
      sub_10002D3C4(a1);
      return;
    }
    goto LABEL_7;
  }
  if (v1[qword_10047CBE0 + 16] == 1 && (v2 & 1) != 0)
LABEL_7:
    sub_10002D060(v1);
}

void sub_10002D060(void *a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  char *v9;
  id v10;
  char *v11;
  void *v12;
  void *v13;
  char v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;

  v2 = swift_allocObject(&unk_10043F820, 24, 7);
  *(_QWORD *)(v2 + 16) = a1;
  v3 = objc_allocWithZone((Class)UIViewPropertyAnimator);
  v19 = sub_100030C44;
  v20 = v2;
  v15 = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_10003ECA0;
  v18 = &unk_10043F838;
  v4 = _Block_copy(&v15);
  v5 = a1;
  swift_release();
  v6 = objc_msgSend(v3, "initWithDuration:dampingRatio:animations:", v4, 0.4, 0.9);
  _Block_release(v4);
  v7 = swift_allocObject(&unk_10043F870, 24, 7);
  *(_QWORD *)(v7 + 16) = v5;
  v19 = sub_100030C4C;
  v20 = v7;
  v15 = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_10002E168;
  v18 = &unk_10043F888;
  v8 = _Block_copy(&v15);
  v9 = (char *)v5;
  v10 = v6;
  objc_msgSend(v10, "addCompletion:", v8, swift_release().n128_f64[0]);
  _Block_release(v8);
  objc_msgSend(v10, "startAnimation");

  v11 = &v9[qword_10047CBE0];
  v12 = *(void **)&v9[qword_10047CBE0];
  v13 = *(void **)&v9[qword_10047CBE0 + 8];
  *(_QWORD *)v11 = v6;
  *((_QWORD *)v11 + 1) = 0;
  v14 = v11[16];
  v11[16] = 2;
  sub_100030A20(v12, v13, v14);
}

id sub_10002D20C(void *a1)
{
  CGFloat tx;
  CGFloat ty;
  long double v4;
  CGFloat v5;
  CGFloat v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  CGFloat v10;
  CGFloat v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CGAffineTransform v20;
  CGAffineTransform t2;
  CGAffineTransform t1;

  objc_msgSend(a1, "setAlpha:", 0.0);
  objc_msgSend(a1, "transform");
  tx = t1.tx;
  ty = t1.ty;
  v4 = atan2(t1.b, t1.a);
  CGAffineTransformMakeScale(&t1, 0.9, 0.9);
  v16 = *(_OWORD *)&t1.c;
  v18 = *(_OWORD *)&t1.a;
  v5 = t1.tx;
  v6 = t1.ty;
  CGAffineTransformMakeRotation(&t1, v4);
  v7 = *(_OWORD *)&t1.a;
  v8 = *(_OWORD *)&t1.c;
  v9 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v18;
  *(_OWORD *)&t1.c = v16;
  t1.tx = v5;
  t1.ty = v6;
  *(_OWORD *)&t2.a = v7;
  *(_OWORD *)&t2.c = v8;
  *(_OWORD *)&t2.tx = v9;
  CGAffineTransformConcat(&v20, &t1, &t2);
  v17 = *(_OWORD *)&v20.c;
  v19 = *(_OWORD *)&v20.a;
  v10 = v20.tx;
  v11 = v20.ty;
  CGAffineTransformMakeTranslation(&t1, tx, ty);
  v12 = *(_OWORD *)&t1.a;
  v13 = *(_OWORD *)&t1.c;
  v14 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v19;
  *(_OWORD *)&t1.c = v17;
  t1.tx = v10;
  t1.ty = v11;
  *(_OWORD *)&t2.a = v12;
  *(_OWORD *)&t2.c = v13;
  *(_OWORD *)&t2.tx = v14;
  CGAffineTransformConcat(&v20, &t1, &t2);
  t1 = v20;
  return objc_msgSend(a1, "setTransform:", &t1);
}

void sub_10002D350(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;

  swift_retain();
  StateValue.wrappedValue.getter(&v8, v3);
  swift_release();
  sub_10002D3C4(v8);
  v4 = a2 + qword_10047CBE0;
  v5 = *(void **)(a2 + qword_10047CBE0);
  v6 = *(void **)(a2 + qword_10047CBE0 + 8);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v7 = *(_BYTE *)(v4 + 16);
  *(_BYTE *)(v4 + 16) = 0;
  sub_100030A20(v5, v6, v7);
}

id sub_10002D3C4(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  char *v6;
  uint64_t v7;
  char v8;
  float32x2_t v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  id v15;
  void *v16;
  double v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char v22;
  float32x2_t v23;
  id v24;
  void *v25;
  uint64_t *v26;
  CGFloat *v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  id v31;
  void *v32;
  double v33;
  double v34;
  id v35;
  void *v36;
  float32x2_t v37;
  float v38;
  double v39;
  char *v40;
  uint64_t v41;
  double *v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  char v46;
  float32x2_t v47;
  id v48;
  void *v49;
  double v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  id v58;
  void *v59;
  double v60;
  id v61;
  void *v62;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  double v70;
  double v71;
  double v72;
  double *v73;
  id v74;
  void *v75;
  double v76;
  double v77;
  double v78;
  id v79;
  void *v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  id v91;
  void *v92;
  double v93;
  id v94;
  void *v95;
  double v96;
  id v97;
  void *v98;
  float32x2_t v99;
  float v100;
  double v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  float32x2_t v106;
  float32x2_t v107;
  CGAffineTransform v108;

  v2 = v1;
  v3 = qword_10047CBA8;
  v1[qword_10047CBA8] = 0;
  switch(a1)
  {
    case 0:
    case 1:
      CGAffineTransformMakeRotation(&v108, 0.0);
      v4 = *(_OWORD *)&v108.c;
      v5 = *(_OWORD *)&v108.tx;
      v6 = &v1[qword_10047CBB8];
      *(_OWORD *)v6 = *(_OWORD *)&v108.a;
      *((_OWORD *)v6 + 1) = v4;
      *((_OWORD *)v6 + 2) = v5;
      if (v1[qword_10047CB88] == 1)
      {
        if (qword_10047B0B8 != -1)
          swift_once(&qword_10047B0B8, sub_1001976EC);
        v7 = qword_10047CBA0;
        *(_QWORD *)&v1[qword_10047CBA0] = qword_1004AFBB8;
        sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
        v8 = static UIDevice.isIPad()();
        v9 = *(float32x2_t *)&v1[v7];
        if ((v8 & 1) == 0)
        {
          *(float32x2_t *)&v1[qword_10047CB80] = v9;
          v58 = objc_msgSend(v1, "superview");
          if (v58)
          {
            v59 = v58;
            objc_msgSend(v58, "center");
            v17 = v60;

            v61 = objc_msgSend(v2, "superview");
            if (v61)
            {
              v62 = v61;
              objc_msgSend(v61, "frame");

              if (qword_10047ADC8 != -1)
                swift_once(&qword_10047ADC8, sub_100195650);
              goto LABEL_54;
            }
            goto LABEL_114;
          }
          goto LABEL_108;
        }
        *(float32x2_t *)&v1[qword_10047CB80] = vsub_f32(0, v9);
        v10 = objc_msgSend(v1, "superview");
        if (v10)
        {
          v11 = v10;
          objc_msgSend(v10, "frame");
          v13 = v12;

          if (qword_10047ADC8 != -1)
            swift_once(&qword_10047ADC8, sub_100195650);
          v14 = *(double *)&qword_1004AF8B0;
          v15 = objc_msgSend(v2, "superview");
          if (v15)
          {
            v16 = v15;
            v17 = v13 - v14;
            objc_msgSend(v15, "center");

            v2[v3] = 1;
LABEL_54:
            if (qword_10047B0F0 != -1)
              swift_once(&qword_10047B0F0, sub_1001979AC);
            v63 = qword_1004AFBF0;
            goto LABEL_99;
          }
          goto LABEL_112;
        }
        goto LABEL_106;
      }
      if (qword_10047B0E0 != -1)
        swift_once(&qword_10047B0E0, sub_100197974);
      *(_QWORD *)&v1[qword_10047CB80] = qword_1004AFBE0;
      v51 = objc_msgSend(v1, "superview");
      if (!v51)
      {
        __break(1u);
LABEL_106:
        __break(1u);
        goto LABEL_107;
      }
      v52 = v51;
      objc_msgSend(v51, "center");
      v54 = v53;

      if (qword_10047B0B0 != -1)
        swift_once(&qword_10047B0B0, sub_100197654);
      v55 = qword_1004AFBB0;
      v56 = &v2[qword_10047CB98];
      *(_QWORD *)v56 = v54;
      *((_QWORD *)v56 + 1) = v55;
      v56[16] = 0;
      if (qword_10047B0E8 != -1)
        swift_once(&qword_10047B0E8, sub_100197988);
      v57 = qword_1004AFBE8;
      goto LABEL_84;
    case 2:
      sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
      if ((static UIDevice.isIPad()() & 1) != 0)
      {
        CGAffineTransformMakeRotation(&v108, 3.14159265);
        v19 = *(_OWORD *)&v108.c;
        v20 = *(_OWORD *)&v108.tx;
        v21 = &v1[qword_10047CBB8];
        *(_OWORD *)v21 = *(_OWORD *)&v108.a;
        *((_OWORD *)v21 + 1) = v19;
        *((_OWORD *)v21 + 2) = v20;
      }
      if (v1[qword_10047CB88] != 1)
      {
        if (qword_10047B0E8 != -1)
          swift_once(&qword_10047B0E8, sub_100197988);
        *(_QWORD *)&v1[qword_10047CB80] = qword_1004AFBE8;
        v64 = objc_msgSend(v1, "superview");
        if (!v64)
          goto LABEL_109;
        v65 = v64;
        objc_msgSend(v64, "center");
        v67 = v66;

        v68 = objc_msgSend(v2, "superview");
        if (!v68)
        {
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
          goto LABEL_118;
        }
        v69 = v68;
        objc_msgSend(v68, "frame");
        v71 = v70;

        if (qword_10047B0B0 != -1)
          swift_once(&qword_10047B0B0, sub_100197654);
        v72 = v71 - *(double *)&qword_1004AFBB0;
        v73 = (double *)&v2[qword_10047CB98];
        *(_QWORD *)v73 = v67;
        v73[1] = v72;
        *((_BYTE *)v73 + 16) = 0;
LABEL_64:
        if (qword_10047B0E0 != -1)
          swift_once(&qword_10047B0E0, sub_100197974);
        v57 = qword_1004AFBE0;
        goto LABEL_84;
      }
      if (qword_10047B0C0 != -1)
        swift_once(&qword_10047B0C0, sub_1001977A0);
      v7 = qword_10047CBA0;
      *(_QWORD *)&v1[qword_10047CBA0] = qword_1004AFBC0;
      v22 = static UIDevice.isIPad()();
      v23 = *(float32x2_t *)&v1[v7];
      if ((v22 & 1) == 0)
      {
        *(float32x2_t *)&v1[qword_10047CB80] = v23;
        v91 = objc_msgSend(v1, "superview");
        if (!v91)
        {
LABEL_119:
          __break(1u);
          goto LABEL_120;
        }
        v92 = v91;
        objc_msgSend(v91, "center");
        v17 = v93;

        if (qword_10047ADC8 != -1)
          swift_once(&qword_10047ADC8, sub_100195650);
        goto LABEL_88;
      }
      *(float32x2_t *)&v1[qword_10047CB80] = vsub_f32(0, v23);
      if (qword_10047ADC8 != -1)
        swift_once(&qword_10047ADC8, sub_100195650);
      v17 = *(double *)&qword_1004AF8B0;
      v24 = objc_msgSend(v1, "superview");
      if (!v24)
        goto LABEL_117;
      v25 = v24;
      objc_msgSend(v24, "center");

      v2[v3] = 1;
      if (qword_10047B0F8 != -1)
        swift_once(&qword_10047B0F8, sub_1001979C0);
      v26 = &qword_1004AFBF8;
LABEL_98:
      v63 = *v26;
LABEL_99:
      *(_QWORD *)&v2[qword_10047CBB0] = v63;
      v99 = *(float32x2_t *)&v2[v7];
      if (qword_10047B0D8 != -1)
      {
        v106 = *(float32x2_t *)&v2[v7];
        swift_once(&qword_10047B0D8, sub_10019791C);
        v99 = v106;
      }
      v100 = *(double *)&qword_1004AFBD8;
      CGPoint.init(_:)(COERCE_DOUBLE(vmul_n_f32(v99, v100)));
      v101 = static CGPoint.- infix(_:_:)(v17);
      v102 = &v2[qword_10047CB90];
      *(double *)v102 = v101;
      *((_QWORD *)v102 + 1) = v103;
      v102[16] = 0;
LABEL_102:
      if ((v2[qword_10047CB90 + 16] & 1) == 0)
        objc_msgSend(*(id *)&v2[qword_10047CB20], "setCenter:", *(double *)&v2[qword_10047CB90], *(double *)&v2[qword_10047CB90 + 8]);
      v104 = *(_OWORD *)&v2[qword_10047CBB8 + 16];
      *(_OWORD *)&v108.a = *(_OWORD *)&v2[qword_10047CBB8];
      *(_OWORD *)&v108.c = v104;
      *(_OWORD *)&v108.tx = *(_OWORD *)&v2[qword_10047CBB8 + 32];
      return objc_msgSend(v2, "setTransform:", &v108);
    case 3:
      v27 = (CGFloat *)CGFloat.piDiv2.unsafeMutableAddressor();
      CGAffineTransformMakeRotation(&v108, *v27);
      v28 = *(_OWORD *)&v108.c;
      v29 = *(_OWORD *)&v108.tx;
      v30 = &v1[qword_10047CBB8];
      *(_OWORD *)v30 = *(_OWORD *)&v108.a;
      *((_OWORD *)v30 + 1) = v28;
      *((_OWORD *)v30 + 2) = v29;
      if (v1[qword_10047CB88] != 1)
      {
        if (qword_10047B0F8 != -1)
          swift_once(&qword_10047B0F8, sub_1001979C0);
        *(_QWORD *)&v1[qword_10047CB80] = qword_1004AFBF8;
        v74 = objc_msgSend(v1, "superview");
        if (!v74)
          goto LABEL_110;
        v75 = v74;
        objc_msgSend(v74, "frame");
        v77 = v76;

        if (qword_10047B0A8 != -1)
          swift_once(&qword_10047B0A8, sub_1001975A0);
        v78 = *(double *)&qword_1004AFBA8;
        v79 = objc_msgSend(v2, "superview");
        if (!v79)
          goto LABEL_116;
        v80 = v79;
        v81 = v77 - v78;
        objc_msgSend(v79, "center");
        v83 = v82;

        v84 = &v2[qword_10047CB98];
        *(double *)v84 = v81;
        *((_QWORD *)v84 + 1) = v83;
        v84[16] = 0;
        if (qword_10047B0F0 != -1)
          swift_once(&qword_10047B0F0, sub_1001979AC);
        v57 = qword_1004AFBF0;
LABEL_84:
        *(_QWORD *)&v2[qword_10047CBB0] = v57;
        goto LABEL_102;
      }
      v31 = objc_msgSend(v1, "superview");
      if (!v31)
      {
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
        goto LABEL_113;
      }
      v32 = v31;
      objc_msgSend(v31, "center");
      v34 = v33;

      v35 = objc_msgSend(v2, "superview");
      if (!v35)
      {
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        goto LABEL_115;
      }
      v36 = v35;
      objc_msgSend(v35, "frame");

      if (qword_10047ADC8 != -1)
        swift_once(&qword_10047ADC8, sub_100195650);
      if (qword_10047B0C8 != -1)
        swift_once(&qword_10047B0C8, sub_100197820);
      v37 = (float32x2_t)qword_1004AFBC8;
      *(_QWORD *)&v2[qword_10047CBA0] = qword_1004AFBC8;
      *(float32x2_t *)&v2[qword_10047CB80] = vsub_f32(0, v37);
      if (qword_10047B0D8 != -1)
      {
        v107 = v37;
        swift_once(&qword_10047B0D8, sub_10019791C);
        v37 = v107;
      }
      v38 = *(double *)&qword_1004AFBD8;
      CGPoint.init(_:)(COERCE_DOUBLE(vmul_n_f32(v37, v38)));
      v39 = static CGPoint.- infix(_:_:)(v34);
      v40 = &v2[qword_10047CB90];
      *(double *)v40 = v39;
      *((_QWORD *)v40 + 1) = v41;
      v40[16] = 0;
      v2[v3] = 1;
      goto LABEL_64;
    case 4:
      v42 = (double *)CGFloat.piDiv2.unsafeMutableAddressor();
      CGAffineTransformMakeRotation(&v108, -*v42);
      v43 = *(_OWORD *)&v108.c;
      v44 = *(_OWORD *)&v108.tx;
      v45 = &v1[qword_10047CBB8];
      *(_OWORD *)v45 = *(_OWORD *)&v108.a;
      *((_OWORD *)v45 + 1) = v43;
      *((_OWORD *)v45 + 2) = v44;
      if (v1[qword_10047CB88] == 1)
      {
        if (qword_10047B0D0 != -1)
          swift_once(&qword_10047B0D0, sub_100197868);
        v7 = qword_10047CBA0;
        *(_QWORD *)&v1[qword_10047CBA0] = qword_1004AFBD0;
        sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
        v46 = static UIDevice.isIPad()();
        v47 = *(float32x2_t *)&v1[v7];
        if ((v46 & 1) == 0)
        {
          *(float32x2_t *)&v1[qword_10047CB80] = v47;
          v94 = objc_msgSend(v1, "superview");
          if (!v94)
          {
LABEL_120:
            __break(1u);
            goto LABEL_121;
          }
          v95 = v94;
          objc_msgSend(v94, "center");
          v17 = v96;

          v97 = objc_msgSend(v2, "superview");
          if (!v97)
          {
LABEL_121:
            __break(1u);
            JUMPOUT(0x10002E154);
          }
          v98 = v97;
          objc_msgSend(v97, "frame");

          if (qword_10047ADC8 != -1)
            swift_once(&qword_10047ADC8, sub_100195650);
          if (qword_10047B0E0 != -1)
            swift_once(&qword_10047B0E0, sub_100197974);
          v26 = &qword_1004AFBE0;
          goto LABEL_98;
        }
        *(float32x2_t *)&v1[qword_10047CB80] = vsub_f32(0, v47);
        v48 = objc_msgSend(v1, "superview");
        if (!v48)
        {
LABEL_118:
          __break(1u);
          goto LABEL_119;
        }
        v49 = v48;
        objc_msgSend(v48, "center");
        v17 = v50;

        if (qword_10047ADC8 != -1)
          swift_once(&qword_10047ADC8, sub_100195650);
        v2[v3] = 1;
LABEL_88:
        if (qword_10047B0E8 != -1)
          swift_once(&qword_10047B0E8, sub_100197988);
        v26 = &qword_1004AFBE8;
        goto LABEL_98;
      }
      if (qword_10047B0F0 != -1)
        swift_once(&qword_10047B0F0, sub_1001979AC);
      *(_QWORD *)&v1[qword_10047CB80] = qword_1004AFBF0;
      if (qword_10047B0A8 != -1)
        swift_once(&qword_10047B0A8, sub_1001975A0);
      v85 = qword_1004AFBA8;
      v86 = objc_msgSend(v1, "superview");
      if (!v86)
        goto LABEL_111;
      v87 = v86;
      objc_msgSend(v86, "center");
      v89 = v88;

      v90 = &v2[qword_10047CB98];
      *(_QWORD *)v90 = v85;
      *((_QWORD *)v90 + 1) = v89;
      v90[16] = 0;
      if (qword_10047B0F8 != -1)
        swift_once(&qword_10047B0F8, sub_1001979C0);
      v57 = qword_1004AFBF8;
      goto LABEL_84;
    default:
      v18 = &v1[qword_10047CBB8];
      *(_QWORD *)v18 = 0x3FF0000000000000;
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = 0;
      *((_QWORD *)v18 + 3) = 0x3FF0000000000000;
      *((_QWORD *)v18 + 4) = 0;
      *((_QWORD *)v18 + 5) = 0;
      goto LABEL_102;
  }
}

uint64_t sub_10002E168(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

void sub_10002E1A4(void *a1, char a2, char a3)
{
  char *v3;
  char *v7;
  uint64_t v8;
  id v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, __n128);
  __n128 v25;
  char *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  NSString v39;
  void *v40;
  id v41;
  uint64_t v42;
  id v43;
  Class isa;
  _UNKNOWN **v45;
  id v46;
  double v47;
  char *v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  CGFloat v53;
  SEL *v54;
  CGFloat ty;
  char *v56;
  double v57;
  id v58;
  uint64_t v59;
  void *v60;
  id v61;
  uint64_t v62;
  void *v63;
  id v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  void *v69;
  id v70;
  uint64_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  void *v75;
  id v76;
  void *v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  id v85;
  void *v86;
  id v87;
  id v88;
  void *v89;
  void *v90;
  id v91;
  void *v92;
  id v93;
  id v94;
  void *v95;
  void *v96;
  id v97;
  double v98;
  void *v99;
  id v100;
  id v101;
  void *v102;
  uint64_t v103;
  double v104;
  void *v105;
  id v106;
  double v107;
  void *v108;
  id v109;
  id v110;
  void *v111;
  double v112;
  id v113;
  void *v114;
  id v115;
  double v116;
  void *v117;
  id v118;
  id v119;
  void *v120;
  id v121;
  double v122;
  double v123;
  void *v124;
  id v125;
  double v126;
  void *v127;
  id v128;
  id v129;
  void *v130;
  id v131;
  double v132;
  double v133;
  char *v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  objc_class *ObjectType;
  char *v140;
  CGAffineTransform aBlock;
  objc_super v142;

  ObjectType = (objc_class *)swift_getObjectType(v3);
  *(_QWORD *)&v3[qword_10047CB08] = 0;
  *(_QWORD *)&v3[qword_10047CB10] = 0;
  *(_QWORD *)&v3[qword_10047CB18] = 0;
  *(_QWORD *)&v3[qword_10047CB20] = 0;
  *(_QWORD *)&v3[qword_10047CB28] = 0;
  *(_QWORD *)&v3[qword_10047CB30] = 0;
  *(_QWORD *)&v3[qword_10047CB38] = 0;
  *(_QWORD *)&v3[qword_10047CB40] = 0;
  *(_QWORD *)&v3[qword_10047CB48] = 0;
  v7 = &v3[qword_10047CB58];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  *(_QWORD *)&v3[qword_10047CB70] = 0x4032000000000000;
  v8 = qword_10047CB78;
  v9 = objc_allocWithZone((Class)UIBezierPath);
  v10 = v3;
  *(_QWORD *)&v3[v8] = objc_msgSend(v9, "init");
  *(_QWORD *)&v10[qword_10047CB80] = 0;
  v11 = &v10[qword_10047CB90];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v12 = &v10[qword_10047CB98];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  *(_QWORD *)&v10[qword_10047CBA0] = 0;
  v10[qword_10047CBA8] = 0;
  *(_QWORD *)&v10[qword_10047CBB0] = 0;
  v13 = &v10[qword_10047CBB8];
  *(_QWORD *)v13 = 0x3FF0000000000000;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0x3FF0000000000000;
  *((_QWORD *)v13 + 4) = 0;
  *((_QWORD *)v13 + 5) = 0;
  v10[qword_10047CBC0] = 0;
  *(_QWORD *)&v10[qword_10047CBC8] = 0;
  v14 = qword_10047CBD0;
  KeyPath = swift_getKeyPath(&unk_1003B1D70);
  v16 = sub_10000EDC8((uint64_t *)&unk_100481B90);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v17 = qword_1004AF890;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v16 + 272);
  v19 = swift_retain();
  *(_QWORD *)&v10[v14] = v18(KeyPath, v17, v19);
  v20 = qword_10047CBD8;
  v21 = swift_getKeyPath(&unk_1003B1D98);
  v22 = sub_10000EDC8((uint64_t *)&unk_100486710);
  v23 = qword_1004AF890;
  v24 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v22 + 272);
  v25 = swift_retain();
  *(_QWORD *)&v10[v20] = v24(v21, v23, v25);
  v26 = &v10[qword_10047CBE0];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v26[16] = 0;
  v27 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v28 = qword_10047CB50;
  *(_QWORD *)&v10[qword_10047CB50] = v27;
  objc_msgSend(v27, "setTextAlignment:", 1);
  v29 = qword_10047B080;
  v30 = v27;
  if (v29 != -1)
    swift_once(&qword_10047B080, sub_1001971F0);
  objc_msgSend(v30, "setTextColor:", qword_1004AFB90);

  v31 = *(void **)&v10[v28];
  v32 = (void *)objc_opt_self(UIFont);
  v33 = v31;
  v34 = objc_msgSend(v32, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  v35 = objc_msgSend(v34, "fontDescriptor");

  v36 = objc_msgSend(v35, "fontDescriptorWithSymbolicTraits:", 2);
  if (!v36)
  {
    __break(1u);
    goto LABEL_49;
  }
  v138 = a2;
  v37 = objc_msgSend(v32, "fontWithDescriptor:size:", v36, 0.0);

  objc_msgSend(v33, "setFont:", v37);
  v38 = *(id *)&v10[v28];
  v39 = String._bridgeToObjectiveC()();
  objc_msgSend(v38, "setText:", v39);

  v40 = *(void **)&v10[v28];
  objc_msgSend(v40, "setAdjustsFontSizeToFitWidth:", 1);
  objc_msgSend(v40, "setBaselineAdjustment:", 1);
  objc_msgSend(v40, "sizeToFit");
  v41 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v10[qword_10047CB68] = v41;
  v42 = qword_10047B088;
  v43 = v41;
  if (v42 != -1)
    swift_once(&qword_10047B088, sub_10019725C);
  sub_100018148(0, &qword_10047CE40, UIVisualEffect_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v43, "setBackgroundEffects:", isa);

  v45 = &_sSo7UIColorC17MeasureFoundationE4argbABs6UInt32V_tcfC_ptr;
  v46 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  *(_QWORD *)&v10[qword_10047CB60] = v46;
  objc_msgSend(v46, "setClipsToBounds:", 1);
  v10[qword_10047CB88] = a3 & 1;
  if ((a3 & 1) != 0)
    v47 = 20.0;
  else
    v47 = 18.0;

  objc_msgSend(a1, "frame");
  v142.receiver = v10;
  v142.super_class = ObjectType;
  v48 = (char *)objc_msgSendSuper2(&v142, "initWithFrame:");
  objc_msgSend(a1, "frame");
  objc_msgSend(v48, "frame");
  objc_msgSend(v48, "setFrame:");

  objc_msgSend(a1, "addSubview:", v48);
  objc_msgSend(v48, "setAlpha:", 0.0);
  objc_msgSend(v48, "setUserInteractionEnabled:", 0);
  v49 = (char *)qword_10047CB60;
  v50 = *(void **)&v48[qword_10047CB60];
  objc_msgSend(v48, "addSubview:", v50);
  objc_msgSend(v50, "addSubview:", *(_QWORD *)&v48[qword_10047CB68]);
  objc_msgSend(v50, "addSubview:", *(_QWORD *)&v48[qword_10047CB50]);
  *(double *)&v48[qword_10047CB70] = v47;
  v51 = objc_opt_self(UIView);
  v52 = swift_allocObject(&unk_10043F7A8, 24, 7);
  *(_QWORD *)(v52 + 16) = v48;
  v53 = COERCE_DOUBLE(swift_allocObject(&unk_10043F7D0, 32, 7));
  *(_QWORD *)(*(_QWORD *)&v53 + 16) = sub_100030C0C;
  *(_QWORD *)(*(_QWORD *)&v53 + 24) = v52;
  *(_QWORD *)&aBlock.tx = sub_100030C24;
  aBlock.ty = v53;
  *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
  *(_QWORD *)&aBlock.b = 1107296256;
  *(_QWORD *)&aBlock.c = sub_1000DDB80;
  *(_QWORD *)&aBlock.d = &unk_10043F7E8;
  v54 = (SEL *)_Block_copy(&aBlock);
  ty = aBlock.ty;
  v56 = v48;
  swift_retain();
  objc_msgSend((id)v51, "performWithoutAnimation:", v54, swift_release().n128_f64[0]);
  _Block_release(v54);
  LOBYTE(v51) = swift_isEscapingClosureAtFileLocation(*(_QWORD *)&v53, "", 99, 276, 40, 1);
  *(_QWORD *)&v57 = swift_release().n128_u64[0];
  if ((v51 & 1) == 0)
  {
    objc_msgSend(v56, "updateText:", 0, v57);
    CGAffineTransformMakeScale(&aBlock, 0.9, 0.9);
    objc_msgSend(v56, "setTransform:", &aBlock);
    if ((v138 & 1) == 0)
    {
LABEL_45:
      sub_1000DCCEC();
      swift_release();

      return;
    }
    v140 = v49;
    v58 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v59 = qword_10047CB08;
    v60 = *(void **)&v56[qword_10047CB08];
    *(_QWORD *)&v56[qword_10047CB08] = v58;

    v61 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v62 = qword_10047CB10;
    v63 = *(void **)&v56[qword_10047CB10];
    *(_QWORD *)&v56[qword_10047CB10] = v61;

    v64 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v65 = qword_10047CB18;
    v66 = *(void **)&v56[qword_10047CB18];
    *(_QWORD *)&v56[qword_10047CB18] = v64;

    v67 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v68 = qword_10047CB20;
    v69 = *(void **)&v56[qword_10047CB20];
    *(_QWORD *)&v56[qword_10047CB20] = v67;

    v70 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v71 = qword_10047CB28;
    v72 = *(void **)&v56[qword_10047CB28];
    *(_QWORD *)&v56[qword_10047CB28] = v70;

    v73 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v74 = qword_10047CB30;
    v75 = *(void **)&v56[qword_10047CB30];
    *(_QWORD *)&v56[qword_10047CB30] = v73;

    v76 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v77 = *(void **)&v56[qword_10047CB38];
    v137 = qword_10047CB38;
    *(_QWORD *)&v56[qword_10047CB38] = v76;

    v78 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v79 = *(void **)&v56[qword_10047CB40];
    v136 = qword_10047CB40;
    *(_QWORD *)&v56[qword_10047CB40] = v78;

    v80 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v45 = (_UNKNOWN **)qword_10047CB48;
    v81 = *(void **)&v56[qword_10047CB48];
    *(_QWORD *)&v56[qword_10047CB48] = v80;

    if (*(_QWORD *)&v56[v62])
    {
      objc_msgSend(*(id *)&v140[(_QWORD)v48], "addSubview:");
      v82 = *(void **)&v56[v62];
      if (v82)
      {
        if (*(_QWORD *)&v56[v59])
        {
          objc_msgSend(v82, "addSubview:");
          v83 = *(void **)&v56[v62];
          if (v83)
          {
            v54 = (SEL *)&selRef_renderer_didAddNode_forAnchor_;
            if (*(_QWORD *)&v56[v65])
            {
              objc_msgSend(v83, "addSubview:");
              if (*(_QWORD *)&v56[v68])
              {
                objc_msgSend(a1, "addSubview:");
                v84 = *(void **)&v56[v68];
                if (v84)
                {
                  CGSize.init(_:_:)(4.0, 4.0);
                  v85 = v84;
                  objc_msgSend(v85, "frame");
                  objc_msgSend(v85, "setFrame:");

                  v86 = *(void **)&v56[v68];
                  if (v86)
                  {
                    v49 = (char *)objc_opt_self(UIColor);
                    v87 = v86;
                    v88 = objc_msgSend(v49, "purpleColor");
                    objc_msgSend(v87, "setBackgroundColor:", v88);

                    v89 = *(void **)&v56[v68];
                    if (v89)
                    {
                      objc_msgSend(v89, "setCenter:", 0.0, 0.0);
                      if (*(_QWORD *)&v56[v71])
                      {
                        objc_msgSend(a1, "addSubview:");
                        v90 = *(void **)&v56[v71];
                        if (v90)
                        {
                          v91 = v90;
                          objc_msgSend(v91, "frame");
                          objc_msgSend(v91, "setFrame:");

                          v92 = *(void **)&v56[v71];
                          ty = COERCE_DOUBLE(&off_10046F000);
                          if (v92)
                          {
                            v93 = v92;
                            v94 = objc_msgSend(v49, "purpleColor");
                            objc_msgSend(v93, "setBackgroundColor:", v94);

                            v95 = *(void **)&v56[v71];
                            if (v95)
                            {
                              objc_msgSend(v95, "setCenter:", 0.0, 0.0);
                              if (*(_QWORD *)&v56[v74])
                              {
                                objc_msgSend(a1, "addSubview:");
                                v96 = *(void **)&v56[v74];
                                if (v96)
                                {
                                  v97 = v96;
                                  objc_msgSend(a1, "frame");
                                  CGSize.init(_:_:)(2.0, v98);
                                  objc_msgSend(v97, "frame");
                                  objc_msgSend(v97, "setFrame:");

                                  v99 = *(void **)&v56[v74];
                                  if (v99)
                                  {
                                    v100 = v99;
                                    v101 = objc_msgSend(v49, "purpleColor");
                                    objc_msgSend(v100, "setBackgroundColor:", v101);

                                    v102 = *(void **)&v56[v74];
                                    if (v102)
                                    {
                                      v103 = qword_10047ADD8;
                                      v48 = v102;
                                      if (v103 == -1)
                                        goto LABEL_31;
                                      goto LABEL_47;
                                    }
LABEL_65:
                                    __break(1u);
                                    goto LABEL_66;
                                  }
LABEL_64:
                                  __break(1u);
                                  goto LABEL_65;
                                }
LABEL_63:
                                __break(1u);
                                goto LABEL_64;
                              }
LABEL_62:
                              __break(1u);
                              goto LABEL_63;
                            }
LABEL_61:
                            __break(1u);
                            goto LABEL_62;
                          }
LABEL_60:
                          __break(1u);
                          goto LABEL_61;
                        }
LABEL_59:
                        __break(1u);
                        goto LABEL_60;
                      }
LABEL_58:
                      __break(1u);
                      goto LABEL_59;
                    }
LABEL_57:
                    __break(1u);
                    goto LABEL_58;
                  }
LABEL_56:
                  __break(1u);
                  goto LABEL_57;
                }
LABEL_55:
                __break(1u);
                goto LABEL_56;
              }
LABEL_54:
              __break(1u);
              goto LABEL_55;
            }
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  __break(1u);
LABEL_47:
  swift_once(&qword_10047ADD8, sub_100195820);
LABEL_31:
  v104 = *(double *)&qword_1004AF8C0;
  objc_msgSend(a1, "center");
  objc_msgSend(v48, *(SEL *)(*(_QWORD *)&ty + 2560), v104);

  if (!*(_QWORD *)&v56[v137])
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  objc_msgSend(a1, "addSubview:");
  v105 = *(void **)&v56[v137];
  if (!v105)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v106 = v105;
  objc_msgSend(a1, v54[92]);
  CGSize.init(_:_:)(2.0, v107);
  objc_msgSend(v106, v54[92]);
  objc_msgSend(v106, "setFrame:");

  v108 = *(void **)&v56[v137];
  if (!v108)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  v109 = v108;
  v110 = objc_msgSend(v49, "purpleColor");
  objc_msgSend(v109, "setBackgroundColor:", v110);

  v111 = *(void **)&v56[v137];
  if (!v111)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v112 = *(double *)&qword_1004AF8C0 + 47.0;
  v113 = v111;
  objc_msgSend(a1, "center");
  objc_msgSend(v113, *(SEL *)(*(_QWORD *)&ty + 2560), v112);

  if (!*(_QWORD *)&v56[v136])
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  objc_msgSend(a1, "addSubview:");
  v114 = *(void **)&v56[v136];
  if (!v114)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  v115 = v114;
  objc_msgSend(a1, v54[92]);
  CGSize.init(_:_:)(2.0, v116);
  objc_msgSend(v115, v54[92]);
  objc_msgSend(v115, "setFrame:");

  v117 = *(void **)&v56[v136];
  if (!v117)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v118 = v117;
  v119 = objc_msgSend(v49, "purpleColor");
  objc_msgSend(v118, "setBackgroundColor:", v119);

  v120 = *(void **)&v56[v136];
  if (!v120)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v121 = v120;
  objc_msgSend(a1, v54[92]);
  v123 = v122 - *(double *)&qword_1004AF8C0;
  objc_msgSend(a1, "center");
  objc_msgSend(v121, "setCenter:", v123);

  if (!*(_QWORD *)&v56[v137])
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  objc_msgSend(a1, "addSubview:");
  if (!*(_UNKNOWN **)((char *)v45 + (_QWORD)v56))
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  objc_msgSend(a1, "addSubview:");
  v124 = *(_UNKNOWN **)((char *)v45 + (_QWORD)v56);
  if (!v124)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v125 = v124;
  objc_msgSend(a1, v54[92]);
  CGSize.init(_:_:)(2.0, v126);
  objc_msgSend(v125, v54[92]);
  objc_msgSend(v125, "setFrame:");

  v127 = *(_UNKNOWN **)((char *)v45 + (_QWORD)v56);
  if (!v127)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v128 = v127;
  v129 = objc_msgSend(v49, "purpleColor");
  objc_msgSend(v128, "setBackgroundColor:", v129);

  v130 = *(_UNKNOWN **)((char *)v45 + (_QWORD)v56);
  if (v130)
  {
    v131 = v130;
    objc_msgSend(a1, v54[92]);
    v133 = v132 - (*(double *)&qword_1004AF8C0 + 47.0);
    objc_msgSend(a1, "center");
    objc_msgSend(v131, "setCenter:", v133);

    v134 = v56;
    v135 = objc_msgSend(v49, "redColor");
    objc_msgSend(v134, "setBackgroundColor:", v135);

    goto LABEL_45;
  }
LABEL_78:
  __break(1u);
}

id sub_10002F1AC(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  swift_retain();
  StateValue.wrappedValue.getter(&v6, v2);
  swift_release();
  v3 = *(_QWORD *)&a1[qword_10047CBE0];
  if (!a1[qword_10047CBE0 + 16])
  {
    if ((v3 & 1) == 0)
    {
      sub_10002D3C4(v6);
      goto LABEL_8;
    }
LABEL_7:
    sub_10002D060(a1);
    goto LABEL_8;
  }
  if (a1[qword_10047CBE0 + 16] == 1 && (v3 & 1) != 0)
    goto LABEL_7;
LABEL_8:
  swift_retain();
  StateValue.wrappedValue.getter(&v6, v4);
  swift_release();
  return sub_10002D3C4(v6);
}

double sub_10002F268(uint64_t a1)
{
  uint64_t v1;
  double result;
  _QWORD v3[4];

  if (*(_BYTE *)(v1 + qword_10047ED70) == 1)
  {
    __chkstk_darwin(a1);
    v3[2] = v1;
    swift_retain();
    StateValue.ifUpdated(_:)(sub_100030FA8, v3);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_10002F2F8(char a1, uint64_t a2, char a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  __n128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter();
  v14 = swift_allocObject(&unk_10043F8C0, 41, 7);
  *(_QWORD *)(v14 + 16) = v3;
  *(_BYTE *)(v14 + 24) = a1;
  *(_QWORD *)(v14 + 32) = a2;
  *(_BYTE *)(v14 + 40) = a3 & 1;
  aBlock[4] = sub_100030DEC;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_10043F8D8;
  v15 = _Block_copy(aBlock);
  v16 = v3;
  v17 = swift_release();
  static DispatchQoS.unspecified.getter(v17);
  aBlock[0] = _swiftEmptyArrayStorage;
  v18 = sub_100030E1C();
  v19 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v20 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v22);
}

void sub_10002F4F4(char a1, uint64_t a2, char a3)
{
  char *v3;
  char *v4;
  void (*v7)(uint64_t *__return_ptr, __n128);
  __n128 v8;
  void (*v9)(unint64_t *__return_ptr, __n128);
  __n128 v10;
  unint64_t v11;
  char v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;

  v4 = v3;
  if ((a1 & 1) == 0)
    goto LABEL_4;
  v7 = *(void (**)(uint64_t *__return_ptr, __n128))(**(_QWORD **)&v3[qword_10047CBD0] + 144);
  v8 = swift_retain();
  v7(&v15, v8);
  swift_release();
  if ((v15 & 0x1000000) != 0
    || (v9 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)&v3[qword_10047CBD8] + 144),
        v10 = swift_retain(),
        v9(&v14, v10),
        swift_release(),
        v11 = v14,
        sub_10001A810(v14),
        v11 == 0xC000000000000018))
  {
LABEL_4:
    v12 = 0;
    if ((a3 & 1) == 0)
LABEL_5:
      objc_msgSend(v4, "updateText:", a2);
  }
  else
  {
    v13 = *(void **)&v4[qword_10047CBC8];
    if (v13)
      objc_msgSend(v13, "invalidate");
    v12 = 1;
    if ((a3 & 1) == 0)
      goto LABEL_5;
  }
  sub_10002F600(v12);
}

void sub_10002F600(char a1)
{
  char *v1;
  char *v3;
  void *v4;
  void *v5;
  int v6;
  uint64_t v7;
  id v8;
  char v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  char v16;
  char v17[24];

  v3 = &v1[qword_10047CBE0];
  v4 = *(void **)&v1[qword_10047CBE0];
  v5 = *(void **)&v1[qword_10047CBE0 + 8];
  v6 = v1[qword_10047CBE0 + 16];
  v7 = swift_allocObject(&unk_10043F910, 33, 7);
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v5;
  *(_BYTE *)(v7 + 32) = v6;
  if (v6)
  {
    if (v6 != 1)
    {
      v10 = v4;
      goto LABEL_11;
    }
    sub_1000309F0(v4, v5, 1);
    v8 = v5;
  }
  if ((v4 & 1) != 0)
  {
    if ((a1 & 1) == 0)
    {
      v9 = 0;
      goto LABEL_10;
    }
  }
  else if ((a1 & 1) != 0)
  {
    v9 = 1;
LABEL_10:
    sub_10002F720(v9, v1, v7);
  }
LABEL_11:
  swift_beginAccess(v7 + 16, v17, 0, 0);
  v11 = *(void **)(v7 + 16);
  v12 = *(void **)(v7 + 24);
  v13 = *(void **)v3;
  v14 = (void *)*((_QWORD *)v3 + 1);
  *(_QWORD *)v3 = v11;
  *((_QWORD *)v3 + 1) = v12;
  v15 = *(_BYTE *)(v7 + 32);
  v16 = v3[16];
  v3[16] = v15;
  sub_1000309F0(v11, v12, v15);
  sub_100030A20(v13, v14, v16);
  swift_release();
  sub_100030A20(v4, v5, v6);
}

void sub_10002F720(char a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  char v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _BYTE v21[24];
  void **aBlock;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  v6 = a3 + 16;
  v7 = swift_allocObject(&unk_10043F938, 25, 7);
  *(_QWORD *)(v7 + 16) = a2;
  v8 = a1 & 1;
  *(_BYTE *)(v7 + 24) = a1;
  v9 = objc_allocWithZone((Class)UIViewPropertyAnimator);
  v26 = sub_100030EFC;
  v27 = v7;
  aBlock = _NSConcreteStackBlock;
  v23 = 1107296256;
  v24 = sub_10003ECA0;
  v25 = &unk_10043F950;
  v10 = _Block_copy(&aBlock);
  v11 = a2;
  swift_release();
  v12 = objc_msgSend(v9, "initWithDuration:dampingRatio:animations:", v10, 0.4, 0.9);
  _Block_release(v10);
  swift_beginAccess(v6, v21, 1, 0);
  v13 = *(void **)(a3 + 16);
  v14 = *(void **)(a3 + 24);
  *(_QWORD *)(a3 + 16) = a1 & 1;
  *(_QWORD *)(a3 + 24) = v12;
  v15 = *(_BYTE *)(a3 + 32);
  *(_BYTE *)(a3 + 32) = 1;
  v16 = v12;
  sub_100030A20(v13, v14, v15);
  if ((a1 & 1) != 0)
  {
    swift_retain();
    StateValue.wrappedValue.getter(&aBlock, v17);
    swift_release();
    sub_10002D3C4((uint64_t)aBlock);
  }
  v18 = swift_allocObject(&unk_10043F988, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16, v11);
  v19 = swift_allocObject(&unk_10043F9B0, 33, 7);
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = a3;
  *(_BYTE *)(v19 + 32) = v8;
  v26 = sub_100030F70;
  v27 = v19;
  aBlock = _NSConcreteStackBlock;
  v23 = 1107296256;
  v24 = sub_10002E168;
  v25 = &unk_10043F9C8;
  v20 = _Block_copy(&aBlock);
  swift_retain();
  objc_msgSend(v16, "addCompletion:", v20, swift_release().n128_f64[0]);
  _Block_release(v20);
  objc_msgSend(v16, "startAnimation");

}

void sub_10002F96C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  int v15;
  void *v16;
  char v17;
  char v18;
  void *v19;
  void *v20;
  char v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  id v26;
  _QWORD v27[6];
  _BYTE v28[24];
  _BYTE v29[24];

  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v29, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6, v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    v10 = Strong + qword_10047CBE0;
    v11 = *(void **)(Strong + qword_10047CBE0);
    v12 = *(void **)(Strong + qword_10047CBE0 + 8);
    v13 = *(unsigned __int8 *)(Strong + qword_10047CBE0 + 16);
    swift_beginAccess(a3 + 16, v28, 0, 0);
    v14 = *(void **)(a3 + 16);
    v15 = *(unsigned __int8 *)(a3 + 32);
    if (v13)
    {
      v16 = *(void **)(a3 + 24);
      if (v13 == 1)
      {
        if (v15 != 1)
          goto LABEL_15;
        if (((((v11 & 1) == 0) ^ v14) & 1) == 0)
          goto LABEL_15;
        sub_100018148(0, (unint64_t *)&qword_10047C128, NSObject_ptr);
        sub_1000309F0(v14, v16, 1);
        sub_1000309F0(v11, v12, 1);
        v17 = static NSObject.== infix(_:_:)(v12, v16);
        sub_100030A20(v14, v16, 1);
        sub_100030A20(v11, v12, 1);
        if ((v17 & 1) == 0)
          goto LABEL_15;
      }
      else
      {
        if (v15 != 2)
          goto LABEL_15;
        sub_100018148(0, (unint64_t *)&qword_10047C128, NSObject_ptr);
        sub_1000309F0(v14, v16, 2);
        sub_1000309F0(v11, v12, 2);
        v18 = static NSObject.== infix(_:_:)(v11, v14);
        sub_100030A20(v14, v16, 2);
        sub_100030A20(v11, v12, 2);
        if ((v18 & 1) == 0)
          goto LABEL_15;
      }
    }
    else if (*(_BYTE *)(a3 + 32) || ((((v11 & 1) == 0) ^ v14) & 1) == 0)
    {
      goto LABEL_15;
    }
    v19 = *(void **)v10;
    v20 = *(void **)(v10 + 8);
    *(_QWORD *)v10 = a4 & 1;
    *(_QWORD *)(v10 + 8) = 0;
    v21 = *(_BYTE *)(v10 + 16);
    *(_BYTE *)(v10 + 16) = 0;
    sub_100030A20(v19, v20, v21);
    if ((a4 & 1) != 0)
    {
      v22 = (void *)objc_opt_self(NSTimer);
      v23 = swift_allocObject(&unk_10043FA00, 24, 7);
      *(_QWORD *)(v23 + 16) = v9;
      v27[4] = sub_100030F7C;
      v27[5] = v23;
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 1107296256;
      v27[2] = sub_10004C834;
      v27[3] = &unk_10043FA18;
      v24 = _Block_copy(v27);
      v25 = v9;
      swift_release();
      v26 = objc_msgSend(v22, "scheduledTimerWithTimeInterval:repeats:block:", 0, v24, 1.0);
      _Block_release(v24);
      v9 = *(void **)&v25[qword_10047CBC8];
      *(_QWORD *)&v25[qword_10047CBC8] = v26;

    }
LABEL_15:

  }
}

void sub_10002FC1C(uint64_t a1)
{
  _BYTE *v1;
  int v2;
  double v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  id v9;
  void *v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float v28;
  uint64_t v29;
  double v30;
  float v31;
  double v32;
  double v33;
  double v34;
  double v35;
  id v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  float32x2_t v42;
  int32x2_t v43;
  float32x2_t v44;
  int32x2_t v45;
  double v46;
  double v47;
  double *v48;
  double v49;
  double v50;
  float v51;
  double v52;
  double v53;
  id v54;
  void *v55;
  double v56;
  double v57;
  id v58;
  void *v59;
  double v60;
  double v61;
  double v62;
  void *v63;
  id v64;
  double v65;
  double v66;
  id v67;
  double v68;
  double v69;
  uint64_t v70;
  void *v71;
  id v72;
  void *v73;
  id v74;
  id v75;
  void *v76;
  void *v77;
  id v78;
  void *v79;
  void *v80;
  id v81;
  id v82;
  uint64_t v83;
  void *v84;
  void *v85;
  id v86;
  id v87;
  uint64_t v88;
  void *v89;
  void *v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  void *v95;
  void *v96;
  id v97;
  id v98;
  double v99;
  double v100;
  double v101;
  double v102;
  id v103;
  id v104;
  id v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  id v109;

  v2 = v1[qword_10047CB88];
  if (v1[qword_10047CB88])
    v3 = 12.0;
  else
    v3 = 0.0;
  v4 = &v1[qword_10047CB58];
  *(_QWORD *)v4 = a1;
  v4[8] = 0;
  v5 = *(void **)&v1[qword_10047CB50];
  sub_10006CAF8(a1);
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setText:", v8, swift_bridgeObjectRelease(v7).n128_f64[0]);

  objc_msgSend(v5, "sizeToFit");
  v9 = objc_msgSend(v1, "superview");
  if (!v9)
  {
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v10 = v9;
  objc_msgSend(v9, "bounds");
  v12 = v11;

  v13 = qword_10047CB70;
  v14 = v12 + *(double *)&v1[qword_10047CB70] * -4.0;
  objc_msgSend(v5, "frame");
  if (v14 < v15)
  {
    objc_msgSend(v5, "frame");
    objc_msgSend(v5, "setFrame:");
  }
  objc_msgSend(v5, "frame");
  v17 = v16;
  v18 = *(double *)&v1[v13];
  v19 = objc_msgSend(v5, "font");
  if (!v19)
    goto LABEL_52;
  v20 = v19;
  v21 = v17 + v18 + v18;
  objc_msgSend(v19, "capHeight");
  v23 = v22;

  v24 = fmax(v23 + 36.0, 47.0);
  v25 = v3 + v24;
  objc_msgSend(v1, "bounds");
  objc_msgSend(v1, "setBounds:");
  v107 = qword_10047CBA8;
  if (v1[qword_10047CBA8])
    v26 = v3;
  else
    v26 = 0.0;
  if (v2)
  {
    if ((v1[qword_10047CB90 + 16] & 1) != 0)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    v27 = *(double *)&v1[qword_10047CB90];
    v28 = v25 * 0.5;
    CGPoint.init(_:)(COERCE_DOUBLE(vmul_n_f32(*(float32x2_t *)&v1[qword_10047CBA0], v28)));
    objc_msgSend(v1, "setCenter:", static CGPoint.- infix(_:_:)(v27));
    v29 = qword_10047CBB0;
    v30 = CGPoint.init(_:)(*(double *)&v1[qword_10047CBB0]);
    v31 = v21 * 0.5;
    v33 = CGPoint.multiply(by:)(v31, v30, v32);
    v35 = v34;
    v36 = objc_msgSend(v1, "center");
    v39 = CGPoint.add(_:)(v36, v33, v35, v37, v38);
    v41 = v40;
    v42 = *(float32x2_t *)&v1[v29];
    if (qword_10047B0E8 != -1)
      swift_once(&qword_10047B0E8, sub_100197988);
    v43 = vceq_f32(v42, (float32x2_t)qword_1004AFBE8);
    if ((v43.i32[0] & v43.i32[1] & 1) != 0)
      goto LABEL_19;
    v44 = *(float32x2_t *)&v1[v29];
    if (qword_10047B0F8 != -1)
      swift_once(&qword_10047B0F8, sub_1001979C0);
    v45 = vceq_f32(v44, (float32x2_t)qword_1004AFBF8);
    if ((v45.i32[0] & v45.i32[1] & 1) != 0)
    {
LABEL_19:
      v46 = fmin(v39 + -16.0, 0.0);
      v47 = fmin(v41 + -16.0, 0.0);
    }
    else
    {
      v54 = objc_msgSend(v1, "superview");
      if (!v54)
      {
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      v55 = v54;
      objc_msgSend(v54, "frame");
      v57 = v56;

      v58 = objc_msgSend(v1, "superview");
      if (!v58)
      {
LABEL_64:
        __break(1u);
        return;
      }
      v59 = v58;
      if (v39 - (v57 + -16.0) < 0.0)
        v46 = 0.0;
      else
        v46 = v39 - (v57 + -16.0);
      objc_msgSend(v58, "frame", v107);
      v61 = v60;

      if (v41 - (v61 + -16.0) < 0.0)
        v47 = 0.0;
      else
        v47 = v41 - (v61 + -16.0);
    }
    objc_msgSend(v1, "center", v107);
    objc_msgSend(v1, "setCenter:", static CGPoint.- infix(_:_:)(v62));
    v63 = *(void **)&v1[qword_10047CB28];
    if (v63)
    {
      v64 = v63;
      objc_msgSend(v1, "center");
      objc_msgSend(v64, "setCenter:");

    }
  }
  else
  {
    v48 = (double *)&v1[qword_10047CB98];
    if ((v1[qword_10047CB98 + 16] & 1) != 0)
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    v50 = *v48;
    v49 = v48[1];
    v51 = v25 * 0.5;
    v52 = CGPoint.init(_:)(COERCE_DOUBLE(vmul_n_f32(*(float32x2_t *)&v1[qword_10047CB80], v51)));
    static CGPoint.+ infix(_:_:)(v50, v49, v52, v53);
    objc_msgSend(v1, "setCenter:");
    v47 = 0.0;
    v46 = 0.0;
  }
  objc_msgSend(v1, "bounds", v107);
  v66 = v65 * 0.5;
  objc_msgSend(v5, "center");
  objc_msgSend(v5, "setCenter:", v66);
  objc_msgSend(v1, "bounds");
  objc_msgSend(v5, "center");
  objc_msgSend(v5, "setCenter:");
  v67 = objc_msgSend(v5, "center");
  objc_msgSend(v5, "setCenter:", CGPoint.add(_:)(v67, 0.0, v26, v68, v69));
  objc_msgSend(v1, "bounds");
  objc_msgSend(v1, "setBounds:", 0.0, 0.0);
  v70 = qword_10047CB08;
  v71 = *(void **)&v1[qword_10047CB08];
  if (v71)
  {
    v72 = v71;
    objc_msgSend(v5, "frame");
    objc_msgSend(v72, "setFrame:");

    v73 = *(void **)&v1[v70];
    if (v73)
    {
      v74 = v73;
      v75 = objc_msgSend(v5, "font");
      if (v75)
      {
        v76 = v75;
        objc_msgSend(v75, "capHeight");

        objc_msgSend(v74, "frame");
        objc_msgSend(v74, "setFrame:");

        v77 = *(void **)&v1[v70];
        if (v77)
        {
          v78 = v77;
          objc_msgSend(v5, "center");
          objc_msgSend(v78, "setCenter:");

          v79 = *(void **)&v1[v70];
          if (v79)
          {
            v80 = (void *)objc_opt_self(UIColor);
            v81 = v79;
            v82 = objc_msgSend(v80, "greenColor");
            objc_msgSend(v81, "setBackgroundColor:", v82);

            v83 = qword_10047CB10;
            v84 = *(void **)&v1[qword_10047CB10];
            if (v84)
            {
              objc_msgSend(v84, "setFrame:", 0.0, 0.0, v21, v24);
              v85 = *(void **)&v1[v83];
              if (v85)
              {
                v86 = v85;
                v87 = objc_msgSend(v80, "blueColor");
                objc_msgSend(v86, "setBackgroundColor:", v87);

                v88 = qword_10047CB18;
                v89 = *(void **)&v1[qword_10047CB18];
                if (v89)
                {
                  objc_msgSend(v89, "setFrame:", 0.0, v24, v21, 12.0);
                  v90 = *(void **)&v1[v88];
                  if (v90)
                  {
                    v91 = v90;
                    v92 = objc_msgSend(v80, "yellowColor");
                    objc_msgSend(v91, "setBackgroundColor:", v92);

                    goto LABEL_42;
                  }
                  goto LABEL_60;
                }
LABEL_59:
                __break(1u);
LABEL_60:
                __break(1u);
                goto LABEL_61;
              }
LABEL_58:
              __break(1u);
              goto LABEL_59;
            }
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
LABEL_42:
  v93 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:", -1, 0.0, v26, v21, v24, 15.0, 15.0);
  v94 = qword_10047CB78;
  v95 = *(void **)&v1[qword_10047CB78];
  *(_QWORD *)&v1[qword_10047CB78] = v93;

  v96 = *(void **)&v1[qword_10047CB60];
  objc_msgSend(v1, "bounds");
  objc_msgSend(v96, "frame");
  objc_msgSend(v96, "setFrame:");
  v109 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v97 = objc_msgSend(*(id *)&v1[v94], "CGPath");
  objc_msgSend(v109, "setPath:", v97);

  if (v2)
  {
    v98 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
    if (v1[v108])
      v99 = -1.0;
    else
      v99 = 1.0;
    v100 = CGPoint.elementSum()(fabs(v46 * (float)-COERCE_FLOAT(HIDWORD(*(_QWORD *)&v1[qword_10047CB80]))), fabs(v47 * (float)-COERCE_FLOAT(*(_QWORD *)&v1[qword_10047CB80])));
    objc_msgSend(v96, "frame");
    if (v26 > v24 * v99)
      v102 = v26;
    else
      v102 = v24 * v99;
    v103 = sub_100030FB0(v101 * 0.5 + -15.0 - v99 * v100, v102, v99);
    v104 = objc_msgSend(v103, "CGPath");

    objc_msgSend(v98, "setPath:", v104);
    objc_msgSend(v109, "addSublayer:", v98);

  }
  v105 = objc_msgSend(v96, "layer");
  objc_msgSend(v105, "setMask:", v109);

  v106 = *(void **)&v1[qword_10047CB68];
  objc_msgSend(v1, "bounds");
  objc_msgSend(v106, "frame");
  objc_msgSend(v106, "setFrame:");

}

void sub_100030604(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;

  v4 = a1;
  sub_10002FC1C(a3);

}

void sub_100030644(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_1000313D0();
}

void sub_100030668()
{
  _swift_stdlib_reportUnimplementedInitializer("Measure.CalloutViewRegular", 26, "init(frame:)", 12, 0);
  __break(1u);
}

void sub_100030694()
{
  uint64_t v0;

  swift_release();
  swift_release();
  sub_100030A20(*(void **)(v0 + qword_10047CBE0), *(void **)(v0 + qword_10047CBE0 + 8), *(_BYTE *)(v0 + qword_10047CBE0 + 16));
}

void sub_1000307B8(uint64_t a1)
{

  swift_release();
  swift_release();
  sub_100030A20(*(void **)(a1 + qword_10047CBE0), *(void **)(a1 + qword_10047CBE0 + 8), *(_BYTE *)(a1 + qword_10047CBE0 + 16));
}

uint64_t type metadata accessor for CalloutViewRegular(uint64_t a1)
{
  uint64_t result;

  result = qword_10047CC10;
  if (!qword_10047CC10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalloutViewRegular);
  return result;
}

uint64_t sub_100030924(uint64_t a1)
{
  _QWORD v2[28];

  v2[0] = "\b";
  v2[1] = "\b";
  v2[2] = "\b";
  v2[3] = "\b";
  v2[4] = "\b";
  v2[5] = "\b";
  v2[6] = "\b";
  v2[7] = "\b";
  v2[8] = "\b";
  v2[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[10] = &unk_1003B1CB0;
  v2[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[13] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[15] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[16] = &unk_1003B1CC8;
  v2[17] = &unk_1003B1CE0;
  v2[18] = &unk_1003B1CE0;
  v2[19] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[20] = &unk_1003B1CC8;
  v2[21] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[22] = &unk_1003B1CF8;
  v2[23] = &unk_1003B1CC8;
  v2[24] = "\b";
  v2[25] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[26] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[27] = &unk_1003B1D10;
  return swift_initClassMetadata2(a1, 256, 28, v2, a1 + 264);
}

uint64_t sub_1000309E4()
{
  return type metadata accessor for CalloutViewRegular(0);
}

id sub_1000309F0(id result, void *a2, char a3)
{
  if (a3 != 1)
  {
    if (a3 != 2)
      return result;
    a2 = result;
  }
  return a2;
}

void destroy for CalloutViewRegular.AnimationState(uint64_t a1)
{
  sub_100030A20(*(void **)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_100030A20(void *a1, void *a2, char a3)
{
  if (a3 != 1)
  {
    if (a3 != 2)
      return;
    a2 = a1;
  }

}

uint64_t _s7Measure18CalloutViewRegularC14AnimationStateOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000309F0(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CalloutViewRegular.AnimationState(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000309F0(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100030A20(v6, v7, v8);
  return a1;
}

__n128 initializeBufferWithCopyOfBuffer for EdgeDetectionPointInfo(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CalloutViewRegular.AnimationState(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100030A20(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalloutViewRegular.AnimationState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CalloutViewRegular.AnimationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100030BC0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100030BC8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CalloutViewRegular.AnimationState()
{
  return &type metadata for CalloutViewRegular.AnimationState;
}

uint64_t sub_100030BE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100030C0C()
{
  uint64_t v0;

  return sub_10002F1AC(*(char **)(v0 + 16));
}

uint64_t sub_100030C14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100030C24()
{
  uint64_t v0;

  return sub_1000DDB60(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100030C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100030C3C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_100030C44()
{
  uint64_t v0;

  return sub_10002D20C(*(void **)(v0 + 16));
}

void sub_100030C4C(uint64_t a1)
{
  uint64_t v1;

  sub_10002D350(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100030C54(void *a1, void *a2, char a3, void *a4, void *a5, char a6)
{
  char v10;
  void *v11;
  void *v12;
  char v13;
  char v14;

  if (a3)
  {
    if (a3 == 1)
    {
      if (a6 == 1 && ((a1 & 1) == 0) != (a4 & 1))
      {
        sub_100018148(0, (unint64_t *)&qword_10047C128, NSObject_ptr);
        sub_1000309F0(a1, a2, 1);
        sub_1000309F0(a4, a5, 1);
        v10 = static NSObject.== infix(_:_:)(a2, a5);
        sub_100030A20(a4, a5, 1);
        v11 = a1;
        v12 = a2;
        v13 = 1;
LABEL_10:
        sub_100030A20(v11, v12, v13);
        return v10 & 1;
      }
    }
    else if (a6 == 2)
    {
      sub_100018148(0, (unint64_t *)&qword_10047C128, NSObject_ptr);
      sub_1000309F0(a1, a2, 2);
      sub_1000309F0(a4, a5, 2);
      v10 = static NSObject.== infix(_:_:)(a1, a4);
      sub_100030A20(a4, a5, 2);
      v11 = a1;
      v12 = a2;
      v13 = 2;
      goto LABEL_10;
    }
    v14 = 0;
  }
  else
  {
    v14 = ((a1 & 1) == 0) ^ a4;
    if (a6)
      v14 = 0;
  }
  return v14 & 1;
}

uint64_t sub_100030DC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

void sub_100030DEC()
{
  uint64_t v0;

  sub_10002F4F4(*(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

unint64_t sub_100030E1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047D7F0;
  if (!qword_10047D7F0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10047D7F0);
  }
  return result;
}

unint64_t sub_100030E64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047D800;
  if (!qword_10047D800)
  {
    v1 = sub_100012B80((uint64_t *)&unk_10047E430);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10047D800);
  }
  return result;
}

uint64_t sub_100030EB0()
{
  uint64_t v0;

  sub_100030A20(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_100030ED8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

id sub_100030EFC()
{
  uint64_t v0;
  double v1;

  v1 = 0.0;
  if (*(_BYTE *)(v0 + 24))
    v1 = 1.0;
  return objc_msgSend(*(id *)(v0 + 16), "setAlpha:", v1);
}

uint64_t sub_100030F20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

uint64_t sub_100030F44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

void sub_100030F70(uint64_t a1)
{
  uint64_t v1;

  sub_10002F96C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_100030F7C()
{
  return sub_10002F2F8(0, 0, 1);
}

void sub_100030FA8(uint64_t *a1)
{
  uint64_t v1;

  sub_10006D198(a1, *(_QWORD **)(v1 + 16));
}

id sub_100030FB0(double a1, double a2, double a3)
{
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v6 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
  v20 = a2 - a3;
  objc_msgSend(v6, "moveToPoint:", a1 + -1.0);
  v18 = a3 * 0.0 + a2;
  objc_msgSend(v6, "addLineToPoint:", a1 + 0.0, v18);
  v17 = a3 * 0.03 + a2;
  v19 = a3 * 0.1 + a2;
  objc_msgSend(v6, "addCurveToPoint:controlPoint1:controlPoint2:", a1 + 1.11);
  v16 = a3 * 0.13 + a2;
  objc_msgSend(v6, "addLineToPoint:", a1 + 2.22);
  v15 = a3 * 0.65 + a2;
  objc_msgSend(v6, "addLineToPoint:", a1 + 4.25);
  v14 = a3 * 1.86 + a2;
  objc_msgSend(v6, "addLineToPoint:", a1 + 6.03);
  v7 = a3 * 3.94 + a2;
  objc_msgSend(v6, "addLineToPoint:", a1 + 7.89, v7);
  v8 = a3 * 6.19 + a2;
  objc_msgSend(v6, "addLineToPoint:", a1 + 9.57, v8);
  v9 = a3 * 8.2 + a2;
  objc_msgSend(v6, "addLineToPoint:", a1 + 11.05, v9);
  v10 = a3 * 10.19 + a2;
  objc_msgSend(v6, "addLineToPoint:", a1 + 12.55, v10);
  v11 = a3 * 12.0 + a2;
  v12 = a3 * 11.4 + a2;
  objc_msgSend(v6, "addCurveToPoint:controlPoint1:controlPoint2:", a1 + 15.0, v11, a1 + 13.6, v12, a1 + 14.3, v11);
  objc_msgSend(v6, "addCurveToPoint:controlPoint1:controlPoint2:", a1 + 17.45, v10, a1 + 15.8, v11, a1 + 16.2, v12);
  objc_msgSend(v6, "addLineToPoint:", a1 + 18.95, v9);
  objc_msgSend(v6, "addLineToPoint:", a1 + 20.43, v8);
  objc_msgSend(v6, "addLineToPoint:", a1 + 22.11, v7);
  objc_msgSend(v6, "addLineToPoint:", a1 + 23.97, v14);
  objc_msgSend(v6, "addLineToPoint:", a1 + 25.75, v15);
  objc_msgSend(v6, "addLineToPoint:", a1 + 27.78, v16);
  objc_msgSend(v6, "addLineToPoint:", a1 + 28.89, v17);
  objc_msgSend(v6, "addCurveToPoint:controlPoint1:controlPoint2:", a1 + 30.0, v18, a1 + 29.0, v19, a1 + 29.3, v18);
  objc_msgSend(v6, "addLineToPoint:", a1 + 30.3, v20);
  objc_msgSend(v6, "setLineJoinStyle:", 0);
  objc_msgSend(v6, "setMiterLimit:", 0.0);
  return v6;
}

void sub_1000313D0()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  char *v19;

  v1 = v0;
  *(_QWORD *)&v0[qword_10047CB08] = 0;
  *(_QWORD *)&v0[qword_10047CB10] = 0;
  *(_QWORD *)&v0[qword_10047CB18] = 0;
  *(_QWORD *)&v0[qword_10047CB20] = 0;
  *(_QWORD *)&v0[qword_10047CB28] = 0;
  *(_QWORD *)&v0[qword_10047CB30] = 0;
  *(_QWORD *)&v0[qword_10047CB38] = 0;
  *(_QWORD *)&v0[qword_10047CB40] = 0;
  *(_QWORD *)&v0[qword_10047CB48] = 0;
  v2 = &v0[qword_10047CB58];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  *(_QWORD *)&v0[qword_10047CB70] = 0x4032000000000000;
  v3 = qword_10047CB78;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
  *(_QWORD *)&v0[qword_10047CB80] = 0;
  v4 = &v0[qword_10047CB90];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  v5 = &v0[qword_10047CB98];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  *(_QWORD *)&v0[qword_10047CBA0] = 0;
  v0[qword_10047CBA8] = 0;
  *(_QWORD *)&v0[qword_10047CBB0] = 0;
  v6 = &v0[qword_10047CBB8];
  *(_QWORD *)v6 = 0x3FF0000000000000;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = 0x3FF0000000000000;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0;
  v0[qword_10047CBC0] = 0;
  *(_QWORD *)&v0[qword_10047CBC8] = 0;
  v7 = qword_10047CBD0;
  KeyPath = swift_getKeyPath(&unk_1003B1D70);
  v9 = sub_10000EDC8((uint64_t *)&unk_100481B90);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v10 = qword_1004AF890;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v9 + 272);
  v12 = swift_retain();
  *(_QWORD *)&v1[v7] = v11(KeyPath, v10, v12);
  v13 = qword_10047CBD8;
  v14 = swift_getKeyPath(&unk_1003B1D98);
  v15 = sub_10000EDC8((uint64_t *)&unk_100486710);
  v16 = qword_1004AF890;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v15 + 272);
  v18 = swift_retain();
  *(_QWORD *)&v1[v13] = v17(v14, v16, v18);
  v19 = &v1[qword_10047CBE0];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/CalloutViewRegular.swift", 32, 2, 554, 0);
  __break(1u);
}

uint64_t destroy for GuideSnapState(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 144));
}

uint64_t initializeWithCopy for GuideSnapState(uint64_t a1, uint64_t a2)
{
  void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v8 = *(void **)(a2 + 136);
  v7 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 144) = v7;
  v9 = v3;
  v10 = v8;
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for GuideSnapState(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  v10 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  v11 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v12 = *(void **)(a1 + 136);
  v13 = *(void **)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v13;
  v14 = v13;

  v15 = *(_QWORD *)(a2 + 144);
  v16 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

__n128 initializeWithTake for GuideSnapState(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for GuideSnapState(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;

  v8 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for GuideSnapState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 144);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GuideSnapState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 144) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GuideSnapState()
{
  return &type metadata for GuideSnapState;
}

id sub_100031938()
{
  id result;
  id v1;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  result = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (*((_QWORD *)&xmmword_1004AF258 + 1))
  {
    v1 = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
    qword_1004AF1A0 = Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10003199C@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A858 != -1)
    swift_once(&qword_10047A858, sub_100031938);
  v2 = (void *)qword_1004AF1A0;
  *a1 = qword_1004AF1A0;
  return v2;
}

uint64_t sub_1000319EC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[9];
  uint64_t v12;
  _OWORD v13[9];
  uint64_t v14;

  v2 = *(_OWORD *)(a1 + 112);
  v11[6] = *(_OWORD *)(a1 + 96);
  v11[7] = v2;
  v11[8] = *(_OWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 144);
  v3 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v5;
  v6 = *(_OWORD *)(a2 + 112);
  v13[6] = *(_OWORD *)(a2 + 96);
  v13[7] = v6;
  v13[8] = *(_OWORD *)(a2 + 128);
  v14 = *(_QWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 48);
  v13[2] = *(_OWORD *)(a2 + 32);
  v13[3] = v7;
  v8 = *(_OWORD *)(a2 + 80);
  v13[4] = *(_OWORD *)(a2 + 64);
  v13[5] = v8;
  v9 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v9;
  return sub_100031CEC((uint64_t)v11, (uint64_t)v13) & 1;
}

unint64_t sub_100031A7C(uint64_t a1)
{
  unint64_t result;

  result = sub_100031AA0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031AA0()
{
  unint64_t result;

  result = qword_10047CE70;
  if (!qword_10047CE70)
  {
    result = swift_getWitnessTable(&unk_1003B1DD8, &type metadata for GuideSnapState);
    atomic_store(result, (unint64_t *)&qword_10047CE70);
  }
  return result;
}

uint64_t sub_100031AE4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[8];
  char v12;
  _OWORD v13[8];
  char v14;

  v2 = *(_OWORD *)(a1 + 112);
  v11[6] = *(_OWORD *)(a1 + 96);
  v11[7] = v2;
  v12 = *(_BYTE *)(a1 + 128);
  v3 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v5;
  v6 = *(_OWORD *)(a2 + 112);
  v13[6] = *(_OWORD *)(a2 + 96);
  v13[7] = v6;
  v14 = *(_BYTE *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 48);
  v13[2] = *(_OWORD *)(a2 + 32);
  v13[3] = v7;
  v8 = *(_OWORD *)(a2 + 80);
  v13[4] = *(_OWORD *)(a2 + 64);
  v13[5] = v8;
  v9 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v9;
  return sub_100031B64((uint64_t)v11, (uint64_t)v13) & 1;
}

uint64_t sub_100031B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t result;
  unsigned int v13;
  int v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;

  v4 = (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)a1) + 0xB8))();
  v6 = v5;
  v7 = (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)a2) + 0xB8))();
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }
  else
  {
    v10 = v8;
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v10);
    result = 0;
    if ((v11 & 1) == 0)
      return result;
  }
  v13 = *(unsigned __int8 *)(a1 + 48);
  v14 = *(unsigned __int8 *)(a2 + 48);
  result = v14 & v13;
  if ((v14 & 1) == 0 && (v13 & 1) == 0)
  {
    v15 = *(float32x2_t *)(a1 + 16);
    v16 = *(float32x2_t *)(a2 + 16);
    *(float32x2_t *)v17.f32 = vsub_f32(v15, v16);
    *(float32x2_t *)&v17.u32[2] = vsub_f32(*(float32x2_t *)(a1 + 24), *(float32x2_t *)(a2 + 24));
    v18 = vmulq_f32(v17, v17);
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0] <= 0.00000011921)
    {
      v19 = *(float32x2_t *)(a2 + 32);
      v20 = *(float32x2_t *)(a1 + 32);
      *(float32x2_t *)v21.f32 = vsub_f32(v20, v19);
      *(float32x2_t *)&v21.u32[2] = vsub_f32(*(float32x2_t *)(a1 + 40), *(float32x2_t *)(a2 + 40));
      v22 = vmulq_f32(v21, v21);
      return vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0] <= 0.00000011921;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100031CEC(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  char v9;
  char v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  uint64_t v30[18];
  uint64_t v31[2];
  __int128 v32;
  __int128 v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  id v50[18];
  id v51[18];
  uint64_t v52[18];

  sub_100031ED4(a1, (uint64_t)v50);
  sub_100031ED4(a2, (uint64_t)v51);
  sub_100031ED4((uint64_t)v50, (uint64_t)v52);
  if (sub_1000127D0(v52) == 1)
  {
    sub_100031ED4((uint64_t)v51, (uint64_t)v31);
    if (sub_1000127D0(v31) == 1)
      goto LABEL_7;
LABEL_5:
    sub_100031ED4((uint64_t)v50, (uint64_t)v31);
    sub_100031ED4((uint64_t)v51, (uint64_t)&v40);
    sub_1000127E8(v50);
    sub_1000127E8(v51);
    sub_100031F1C((uint64_t)v31);
    goto LABEL_12;
  }
  sub_100031ED4((uint64_t)v51, (uint64_t)v30);
  if (sub_1000127D0(v30) == 1)
    goto LABEL_5;
  sub_100031ED4((uint64_t)v50, (uint64_t)&v12);
  v41 = v12;
  v42 = v13;
  v43 = v14;
  v44 = v15;
  v45 = v16;
  v46 = v17;
  v47 = v18;
  v48 = v19;
  v49 = v20;
  sub_100031ED4((uint64_t)v51, (uint64_t)&v21);
  v31[0] = v21;
  v32 = v22;
  v33 = v23;
  v34 = v24;
  v35 = v25;
  v36 = v26;
  v37 = v27;
  v38 = v28;
  v39 = v29;
  sub_1000127E8(v50);
  sub_1000127E8(v51);
  v4 = sub_100031B64((uint64_t)&v41, (uint64_t)v31);
  sub_100012810(v51);
  sub_100012810(v50);
  if ((v4 & 1) == 0)
    goto LABEL_12;
LABEL_7:
  v5 = *(void **)(a1 + 136);
  v6 = *(void **)(a2 + 136);
  if (v5)
  {
    if (v6)
    {
      type metadata accessor for WorldEdge(0);
      v7 = v6;
      v8 = v5;
      v9 = static NSObject.== infix(_:_:)(v8, v7);

      if ((v9 & 1) != 0)
        goto LABEL_10;
    }
LABEL_12:
    v10 = 0;
    return v10 & 1;
  }
  if (v6)
    goto LABEL_12;
LABEL_10:
  sub_100074CC0(*(float32x4_t **)(a1 + 144), *(float32x4_t **)(a2 + 144));
  return v10 & 1;
}

uint64_t sub_100031ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8((uint64_t *)&unk_100486700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031F1C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 144);

  return a1;
}

void destroy for MotionState(id *a1)
{

}

uint64_t initializeWithCopy for GuideSnapDetails(uint64_t a1, uint64_t a2)
{
  void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  id v7;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = v3;
  return a1;
}

uint64_t assignWithCopy for GuideSnapDetails(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  v10 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  v11 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for GuideSnapDetails(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for GuideSnapDetails(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for GuideSnapDetails(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 129))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GuideSnapDetails(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 128) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 129) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 129) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GuideSnapDetails()
{
  return &type metadata for GuideSnapDetails;
}

void sub_100032164()
{
  uint64_t v0;

  swift_allocObject(v0, 176, 7);
  sub_100032188();
}

void sub_100032188()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v1 = v0;
  v26 = *v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v27 = *(_QWORD *)(v2 - 8);
  v28 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_BYTE *)v0 + 80) = 0;
  v0[12] = 0;
  v0[13] = 0;
  v0[11] = 0;
  v11 = sub_10000EDC8(&qword_10047D010);
  KeyPath = swift_getKeyPath(&unk_1003B1FF0);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v13 = qword_1004AF890;
  v14 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v11 + 272);
  v15 = swift_retain();
  v1[14] = v14(KeyPath, v13, v15);
  sub_10000EDC8(&qword_10047D018);
  v16 = swift_getKeyPath(&unk_1003B2018);
  v1[15] = MutableStateValue.__allocating_init(_:_:)(v16, v26);
  v29 = 0;
  v17 = sub_10000EDC8(&qword_10047D020);
  swift_allocObject(v17, 32, 7);
  v1[16] = Synchronized.init(wrappedValue:)(&v29);
  swift_unknownObjectUnownedInit(v1 + 17, 0);
  v1[18] = _swiftEmptyArrayStorage;
  v18 = swift_getKeyPath(&unk_1003B2040);
  v19 = sub_10000EDC8(&qword_100481BA0);
  v20 = qword_1004AF890;
  v21 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v19 + 272);
  v22 = swift_retain();
  v1[19] = v21(v18, v20, v22);
  swift_unknownObjectWeakInit(v1 + 20, 0);
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  static DispatchQoS.userInitiated.getter();
  v29 = _swiftEmptyArrayStorage;
  v23 = sub_10000C4B0((unint64_t *)&qword_10047E690, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v24 = sub_10000EDC8(&qword_100486EF0);
  v25 = sub_100036038((unint64_t *)&qword_10047E6A0, &qword_100486EF0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v24, v25, v5, v23);
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v28);
  v1[21] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x69616E626D756874, 0xEE0065756575516CLL, v10, v7, v4, 0);
  swift_release();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/CaptureController.swift", 31, 2, 61, 0);
  __break(1u);
}

uint64_t sub_1000324C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_retain(v1);
  StateValue.ifUpdated(_:)(sub_100036014, v0);
  return swift_release(v1);
}

void sub_100032504()
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

void sub_1000325B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 72));
    v3 = (uint64_t *)(v1 + 40);
    do
    {
      v4 = *(v3 - 1);
      v5 = *v3;
      ObjectType = swift_getObjectType(v4);
      v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      swift_unknownObjectRetain(v4);
      v7(ObjectType, v5);
      swift_unknownObjectRelease(v4);
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
  *(_BYTE *)(v0 + 80) = 2;
}

double sub_100032C58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  if (!*(_BYTE *)(v2 + 80))
  {
    v5 = *(void **)(v2 + 64);
    v6 = objc_msgSend(v5, "snapshotViewAfterScreenUpdates:", 0);
    if (v6)
    {
      v7 = v6;
      objc_msgSend(v5, "bounds");
      objc_msgSend(v7, "setFrame:");
      v8 = objc_msgSend(v5, "superview");
      objc_msgSend(v8, "addSubview:", v7);

      v9 = *(void **)(v2 + 88);
      *(_QWORD *)(v2 + 88) = v7;

    }
    v10 = *(_QWORD *)(v2 + 96);
    v11 = *(_QWORD *)(v2 + 104);
    *(_QWORD *)(v2 + 96) = a1;
    *(_QWORD *)(v2 + 104) = a2;
    sub_1000217BC(v10, v11);
    *(_BYTE *)(v2 + 80) = 1;
    *(_QWORD *)&result = swift_retain().n128_u64[0];
  }
  return result;
}

void sub_100032D40()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  sub_1000217BC(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectUnownedDestroy(v0 + 136);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_release();
  swift_unknownObjectWeakDestroy(v0 + 160, v1);

}

uint64_t sub_100032DAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = StateObserver.deinit(a1);

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 72));
  sub_1000217BC(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectUnownedDestroy(v1 + 136);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 144));
  swift_release();
  swift_unknownObjectWeakDestroy(v1 + 160, v2);

  return v1;
}

uint64_t sub_100032E30(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_100032DAC(a1);
  return swift_deallocClassInstance(v1, 176, 7);
}

uint64_t type metadata accessor for CaptureController(uint64_t a1)
{
  uint64_t result;

  result = qword_10047CEA0;
  if (!qword_10047CEA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CaptureController);
  return result;
}

uint64_t sub_100032E88(uint64_t a1)
{
  _QWORD v2[13];

  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = &unk_1003B1F08;
  v2[3] = &unk_1003B1F20;
  v2[4] = &unk_1003B1F38;
  v2[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[8] = &unk_1003B1F50;
  v2[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[11] = &unk_1003B1F50;
  v2[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 256, 13, v2, a1 + 208);
}

uint64_t getEnumTagSinglePayload for CaptureController.CaptureState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CaptureController.CaptureState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_100032FF8 + 4 * byte_1003B1E7B[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10003302C + 4 * byte_1003B1E76[v4]))();
}

uint64_t sub_10003302C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100033034(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003303CLL);
  return result;
}

uint64_t sub_100033048(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100033050);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_100033054(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003305C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CaptureController.CaptureState()
{
  return &type metadata for CaptureController.CaptureState;
}

unint64_t sub_10003307C()
{
  unint64_t result;

  result = qword_10047D008;
  if (!qword_10047D008)
  {
    result = swift_getWitnessTable(&unk_1003B1FC4, &type metadata for CaptureController.CaptureState);
    atomic_store(result, (unint64_t *)&qword_10047D008);
  }
  return result;
}

void sub_1000330C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t ObjectType;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  __n128 v32;
  uint64_t v33;
  id v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *__return_ptr, __n128);
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t (*v50)(void);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  id v55;
  double v56;
  CGFloat v57;
  double v58;
  CGFloat v59;
  double v60;
  CGFloat v61;
  double v62;
  CGFloat v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  float v78;
  CGPoint v79;
  CGFloat v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  uint64_t v91;
  char v92;
  _QWORD *v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  id v107;
  double v108;
  double v109;
  double v110;
  uint64_t (*v111)(void);
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char v118;
  unint64_t v119;
  unint64_t v120;
  double *v121;
  uint64_t v122;
  uint64_t i;
  id v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(_QWORD *__return_ptr, __n128);
  __n128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t (*v138)(void);
  uint64_t v139;
  uint64_t v140;
  __n128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t (*v147)(void);
  uint64_t v148;
  uint64_t v149;
  id v150;
  double v151;
  CGFloat v152;
  double v153;
  CGFloat v154;
  double v155;
  CGFloat v156;
  double v157;
  CGFloat v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  float v173;
  BOOL v174;
  CGPoint v175;
  CGFloat y;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  float v191;
  CGPoint v192;
  CGFloat v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  __n128 v197;
  uint64_t v198;
  __n128 v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  id v216;
  double v217;
  double v218;
  double v219;
  uint64_t (*v220)(void);
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  id v228;
  uint64_t v229;
  uint64_t v230;
  id v231;
  uint64_t j;
  id v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t (*v239)(__n128);
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  id v245;
  uint64_t v246;
  id v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  id Strong;
  __n128 v252;
  __n128 v253;
  __n128 v254;
  __n128 v255;
  __n128 v256;
  id v257[3];
  uint64_t v258;
  _QWORD v259[64];
  _OWORD v260[32];
  double v261[64];
  _OWORD v262[32];
  _QWORD v263[64];
  unint64_t v264;
  CGRect v265;
  CGRect v266;
  CGRect v267;

  v4 = v0;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v236 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  *v8 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v9 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    if (v6 < 0)
      v10 = v6;
    else
      v10 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v12 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v6);
    if (!v12)
      goto LABEL_23;
    goto LABEL_4;
  }
  v264 = (unint64_t)_swiftEmptyArrayStorage;
  v257[0] = *(id *)(v4 + 64);
  v10 = (uint64_t)objc_msgSend(v257[0], "subviews");
  v11 = sub_100018148(0, (unint64_t *)&qword_100481BC0, UIView_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  v258 = v4;
  if ((unint64_t)v6 >> 62)
    goto LABEL_19;
  v12 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
    goto LABEL_23;
LABEL_4:
  if (v12 < 1)
  {
    __break(1u);
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  v13 = 0;
  v14 = &selRef_renderer_didAddNode_forAnchor_;
  do
  {
    if ((v6 & 0xC000000000000001) != 0)
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v6);
    else
      v16 = *(id *)(v6 + 8 * v13 + 32);
    v17 = v16;
    if ((objc_msgSend(v16, v14[204]) & 1) == 0)
    {
      ObjectType = swift_getObjectType(v17);
      if (!(swift_conformsToProtocol2(ObjectType, &protocol descriptor for CaptureTarget) ? v17 : 0))
      {
        v20 = v17;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
        v22 = *(_QWORD *)((v264 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v21 = *(_QWORD *)((v264 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v22 >= v21 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
        specialized Array._endMutation()(v15);
        objc_msgSend(v20, "setHidden:", 1);
        v14 = &selRef_renderer_didAddNode_forAnchor_;
      }
    }
    ++v13;

  }
  while (v12 != v13);
LABEL_23:
  swift_bridgeObjectRelease(v6);
  v23 = sub_100018148(0, &qword_10047D028, UIGraphicsImageRendererFormat_ptr);
  v2 = (uint64_t)objc_msgSend((id)swift_getObjCClassFromMetadata(v23), "preferredFormat");
  objc_msgSend(v257[0], "bounds");
  v28 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithBounds:format:", v2, v24, v25, v26, v27);
  v29 = swift_allocObject(&unk_10043FCF0, 32, 7);
  v3 = v258;
  *(_QWORD *)(v29 + 16) = sub_1000360CC;
  *(_QWORD *)(v29 + 24) = v3;
  v263[4] = sub_100036118;
  v263[5] = v29;
  v263[0] = _NSConcreteStackBlock;
  v263[1] = 1107296256;
  v263[2] = sub_1001C35A8;
  v263[3] = &unk_10043FD08;
  v30 = _Block_copy(v263);
  swift_retain();
  swift_retain();
  v31 = objc_msgSend(v28, "imageWithActions:", v30, swift_release().n128_f64[0]);
  _Block_release(v30);
  LOBYTE(v30) = swift_isEscapingClosureAtFileLocation(v29, "", 97, 213, 54, 1);
  swift_release();
  if ((v30 & 1) != 0)
  {
    __break(1u);
    goto LABEL_80;
  }
  if (qword_10047AD88 != -1)
LABEL_80:
    swift_once(&qword_10047AD88, sub_1001883CC);
  v247 = v28;
  v32 = swift_retain();
  PublishedValue.wrappedValue.getter(v32);
  swift_release();
  if (!v31
    || (v33 = v263[0],
        v34 = v31,
        v243 = v33,
        v35 = (void *)UIImage.rotated(to:)(v33),
        v34,
        v34,
        !v35))
  {
    v10 = v264;
    v1 = (uint64_t)&off_10046F000;
    if (!(v264 >> 62))
    {
      v122 = *(_QWORD *)((v264 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v264);
      if (!v122)
        goto LABEL_87;
      goto LABEL_73;
    }
LABEL_83:
    if (v10 < 0)
      v126 = v10;
    else
      v126 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v122 = _CocoaArrayWrapper.endIndex.getter(v126);
    if (!v122)
      goto LABEL_87;
LABEL_73:
    if (v122 < 1)
    {
      __break(1u);
LABEL_89:
      if (v1 < 0)
        v127 = v1;
      else
        v127 = v1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v1);
      v2 = _CocoaArrayWrapper.endIndex.getter(v127);
      swift_bridgeObjectRelease(v1);
      if (v2)
        goto LABEL_31;
      goto LABEL_93;
    }
    for (i = 0; i != v122; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0)
        v124 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v10);
      else
        v124 = *(id *)(v10 + 8 * i + 32);
      v125 = v124;
      objc_msgSend(v124, *(SEL *)(v1 + 2624), 0);

    }
LABEL_87:
    swift_bridgeObjectRelease(v10);
    *(_BYTE *)(v3 + 80) = 6;
    swift_release();
LABEL_207:
    swift_bridgeObjectRelease(v10);

    return;
  }
  v36 = (void *)objc_opt_self(Gestalt);
  v238 = v35;
  v245 = v35;
  v1 = 0x10046F000;
  if (!objc_msgSend(v36, "jasperAvailable")
    || (Strong = (id)swift_unknownObjectWeakLoadStrong(v3 + 160, v37)) == 0)
  {
LABEL_186:
    v229 = *(_QWORD *)(v3 + 96);
    v230 = *(_QWORD *)(v3 + 104);
    sub_100036254(v229, v230);
    v231 = v245;
    sub_100036120((uint64_t)v245, v229, v230);
    sub_1000217BC(v229, v230);

    v10 = v264;
    if (v264 >> 62)
      goto LABEL_202;
    v134 = *(_QWORD *)((v264 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v264);
    if (v134)
      goto LABEL_188;
LABEL_206:
    swift_bridgeObjectRelease(v10);
    *(_BYTE *)(v3 + 80) = 6;
    swift_release();

    goto LABEL_207;
  }
  v237 = v2;
  v38 = *(_QWORD *)(v3 + 144);
  *(_QWORD *)(v3 + 144) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v38);
  v39 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v3 + 152) + 144);
  v40 = swift_retain();
  v39(v263, v40);
  swift_release();
  v41 = v263[0];
  v42 = v263[1];
  v43 = v263[2];
  *(_QWORD *)&v262[0] = v263[0];
  swift_bridgeObjectRetain(v263[0]);
  v44 = sub_10000EDC8(&qword_10047C018);
  v45 = sub_10000EDC8(&qword_10047C020);
  v250 = v44;
  swift_dynamicCast(v263, v262, v44, v45, 7);
  v1 = v263[0];
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v41);
  if ((unint64_t)v1 >> 62)
    goto LABEL_89;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
  {
LABEL_93:
    swift_bridgeObjectRelease(v1);
    v128 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v3 + 152) + 144);
    v129 = swift_retain();
    v128(v263, v129);
    swift_release();
    v10 = v263[0];
    v130 = v263[1];
    v131 = v263[2];
    *(_QWORD *)&v262[0] = v263[1];
    swift_bridgeObjectRetain(v263[1]);
    v132 = sub_10000EDC8(&qword_10047D030);
    swift_dynamicCast(v263, v262, v250, v132, 7);
    v133 = v131;
    v134 = v263[0];
    swift_bridgeObjectRelease(v133);
    swift_bridgeObjectRelease(v130);
    swift_bridgeObjectRelease(v10);
    if ((unint64_t)v134 >> 62)
      goto LABEL_209;
    v135 = *(_QWORD *)((v134 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_95:
    if (v135)
    {
      v2 = 0;
      v249 = v135;
      v250 = v134 & 0xC000000000000001;
      v241 = v134 + 32;
      v242 = v134 & 0xFFFFFFFFFFFFFF8;
      v244 = v134;
      do
      {
        if (v250)
        {
          v136 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v2, v134);
        }
        else
        {
          if ((unint64_t)v2 >= *(_QWORD *)(v242 + 16))
            goto LABEL_198;
          v136 = *(id *)(v241 + 8 * v2);
        }
        v1 = (uint64_t)v136;
        if (__OFADD__(v2++, 1))
        {
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          if (v10 < 0)
            v235 = v10;
          else
            v235 = v10 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v10);
          v134 = _CocoaArrayWrapper.endIndex.getter(v235);
          if (!v134)
            goto LABEL_206;
LABEL_188:
          if (v134 >= 1)
          {
            for (j = 0; j != v134; ++j)
            {
              if ((v10 & 0xC000000000000001) != 0)
                v233 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v10);
              else
                v233 = *(id *)(v10 + 8 * j + 32);
              v234 = v233;
              objc_msgSend(v233, *(SEL *)(v1 + 2624), 0);

            }
            goto LABEL_206;
          }
          __break(1u);
LABEL_209:
          if (v134 < 0)
            v10 = v134;
          else
            v10 = v134 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v134);
          v135 = _CocoaArrayWrapper.endIndex.getter(v10);
          swift_bridgeObjectRelease(v134);
          goto LABEL_95;
        }
        v138 = *(uint64_t (**)(void))((swift_isaMask & *v136) + 0x230);
        v139 = v138();
        v10 = v139;
        if ((unint64_t)v139 >> 62)
        {
          if (v139 >= 0)
            v139 &= 0xFFFFFFFFFFFFFF8uLL;
          v140 = _CocoaArrayWrapper.endIndex.getter(v139);
        }
        else
        {
          v140 = *(_QWORD *)((v139 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v141 = swift_bridgeObjectRelease(v10);
        if (v140 < 4)
        {

        }
        else
        {
          v10 = v1;
          v142 = ((uint64_t (*)(__n128))v138)(v141);
          v143 = v142;
          if ((unint64_t)v142 >> 62)
          {
            if (v142 >= 0)
              v142 &= 0xFFFFFFFFFFFFFF8uLL;
            v144 = _CocoaArrayWrapper.endIndex.getter(v142);
            if (!v144)
            {
LABEL_159:
              v199 = swift_bridgeObjectRelease(v143);
              v198 = ((uint64_t (*)(__n128))v138)(v199);
LABEL_160:
              v10 = v198;
              if ((v198 & 0xC000000000000001) != 0)
              {
                v200 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v198);
              }
              else
              {
                if (!*(_QWORD *)((v198 & 0xFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_201;
                v200 = *(id *)(v198 + 32);
              }
              v201 = v200;
              swift_bridgeObjectRelease(v10);
              type metadata accessor for MeasureCamera(0);
              v202 = (_QWORD *)(*(uint64_t (**)(void))((swift_isaMask & *v201) + 0x268))();

              v203.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *v202) + 0x2B0))();
              v256 = v204;
              *(__n128 *)v257 = v203;
              v254 = v206;
              v255 = v205;

              v207.n128_f64[0] = simd_float4x4.position.getter(*(__n128 *)v257, v256, v255, v254);
              *(__n128 *)v257 = v207;
              swift_retain();
              StateValue.wrappedValue.getter(v263, v208);
              swift_release();
              memcpy(v262, v263, 0x1F8uLL);
              sub_100036264((uint64_t)v262);
              v255 = (__n128)v262[11];
              v256 = (__n128)v262[10];
              v253 = (__n128)v262[13];
              v254 = (__n128)v262[12];
              swift_retain();
              StateValue.wrappedValue.getter(v261, v209);
              swift_release();
              memcpy(v263, v261, 0x1F8uLL);
              v210 = sub_100036264((uint64_t)v263);
              v211 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v210, *(__n128 *)v257, v256, v255, v254, v253, *(double *)&v263[2]);
              v212 = *(float *)&v211;
              v213 = *((float *)&v211 + 1);
              if (v243 != 2)
              {
                if (v243 == 4)
                {
                  objc_msgSend(Strong, "frame");
                  v213 = v219 - v213;
                  v215 = v212;
                }
                else
                {
                  if (v243 == 3)
                  {
                    objc_msgSend(Strong, "frame");
                    v215 = v214 - v212;
                    goto LABEL_171;
                  }
                  v215 = *((float *)&v211 + 1);
LABEL_170:
                  v213 = v212;
                }
LABEL_171:
                v220 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v1) + 0xB8);
                v10 = (uint64_t)(id)v1;
                v221 = v220();
                v223 = v222;

                v1 = *(_QWORD *)(v3 + 144);
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
                *(_QWORD *)(v3 + 144) = v1;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  v1 = (uint64_t)sub_10005F56C(0, *(_QWORD *)(v1 + 16) + 1, 1, (_QWORD *)v1);
                  *(_QWORD *)(v3 + 144) = v1;
                }
                v226 = *(_QWORD *)(v1 + 16);
                v225 = *(_QWORD *)(v1 + 24);
                if (v226 >= v225 >> 1)
                {
                  v1 = (uint64_t)sub_10005F56C((_QWORD *)(v225 > 1), v226 + 1, 1, (_QWORD *)v1);
                  *(_QWORD *)(v258 + 144) = v1;
                }
                *(_QWORD *)(v1 + 16) = v226 + 1;
                v227 = v1 + 32 * v226;
                *(double *)(v227 + 32) = v213;
                *(double *)(v227 + 40) = v215;
                *(_QWORD *)(v227 + 48) = v221;
                *(_QWORD *)(v227 + 56) = v223;

LABEL_176:
                v3 = v258;
                v134 = v244;
                continue;
              }
              v216 = Strong;
              objc_msgSend(Strong, "frame");
              v212 = v217 - v212;
              objc_msgSend(v216, "frame");
              v215 = v218 - v213;
              goto LABEL_170;
            }
          }
          else
          {
            v144 = *(_QWORD *)((v142 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (!v144)
              goto LABEL_159;
          }
          v248 = v143 & 0xC000000000000001;
          v239 = (uint64_t (*)(__n128))v138;
          if ((v143 & 0xC000000000000001) != 0)
          {
            v145 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v143);
          }
          else
          {
            if (!*(_QWORD *)((v143 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_199;
            v145 = *(id *)(v143 + 32);
          }
          v146 = v145;
          v147 = *(uint64_t (**)(void))((swift_isaMask & *v145) + 0x250);
          v148 = v147();
          v10 = v148;
          if ((unint64_t)v148 >> 62)
          {
            if (v148 >= 0)
              v148 &= 0xFFFFFFFFFFFFFF8uLL;
            v149 = _CocoaArrayWrapper.endIndex.getter(v148);
          }
          else
          {
            v149 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease(v10);
          if (v149 >= 2)
          {
            v257[0] = (id)type metadata accessor for MeasureCamera(0);
            v3 = 0;
            v240 = v143 & 0xFFFFFFFFFFFFFF8;
            v246 = v144 - 1;
            while (1)
            {
              v10 = (uint64_t)v146;
              (*(void (**)(void))((swift_isaMask & *v146) + 0x2C8))();
              v150 = objc_msgSend(Strong, "frame");
              v152 = v151;
              v154 = v153;
              v156 = v155;
              v158 = v157;
              v159 = ((uint64_t (*)(id))v147)(v150);
              v160 = v159;
              if ((v159 & 0xC000000000000001) != 0)
              {
                v161 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v159);
              }
              else
              {
                if (!*(_QWORD *)((v159 & 0xFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_195;
                v161 = *(id *)(v159 + 32);
              }
              v162 = v161;
              v163 = swift_bridgeObjectRelease(v160);
              v164.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v162) + 0x2B0))(v163);
              v255 = v165;
              v256 = v164;
              v253 = v167;
              v254 = v166;

              v168.n128_f64[0] = simd_float4x4.position.getter(v256, v255, v254, v253);
              v256 = v168;
              swift_retain();
              StateValue.wrappedValue.getter(v261, v169);
              swift_release();
              memcpy(v262, v261, 0x1F8uLL);
              sub_100036264((uint64_t)v262);
              v254 = (__n128)v262[11];
              v255 = (__n128)v262[10];
              v252 = (__n128)v262[13];
              v253 = (__n128)v262[12];
              swift_retain();
              StateValue.wrappedValue.getter(v261, v170);
              swift_release();
              memcpy(v263, v261, 0x1F8uLL);
              v171 = sub_100036264((uint64_t)v263);
              v10 = (uint64_t)v257[0];
              v172 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v171, v256, v255, v254, v253, v252, *(double *)&v263[2]);
              v174 = v173 < 0.0 || v173 > 1.0;
              if (v174
                || (v175 = (CGPoint)vcvtq_f64_f32(*(float32x2_t *)&v172),
                    y = v175.y,
                    v266.origin.x = v152,
                    v266.origin.y = v154,
                    v266.size.width = v156,
                    v266.size.height = v158,
                    !CGRectContainsPoint(v266, v175)))
              {

                swift_bridgeObjectRelease(v143);
                goto LABEL_151;
              }
              v10 = (uint64_t)v146;
              v177 = v147();
              v178 = v177;
              if ((v177 & 0xC000000000000001) != 0)
              {
                v179 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v177);
              }
              else
              {
                if (*(_QWORD *)((v177 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                  goto LABEL_196;
                v179 = *(id *)(v177 + 40);
              }
              v180 = v179;
              v181 = swift_bridgeObjectRelease(v178);
              v182.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v180) + 0x2B0))(v181);
              v255 = v183;
              v256 = v182;
              v253 = v185;
              v254 = v184;

              v186.n128_f64[0] = simd_float4x4.position.getter(v256, v255, v254, v253);
              v256 = v186;
              swift_retain();
              StateValue.wrappedValue.getter(v259, v187);
              swift_release();
              memcpy(v260, v259, 0x1F8uLL);
              sub_100036264((uint64_t)v260);
              v254 = (__n128)v260[11];
              v255 = (__n128)v260[10];
              v252 = (__n128)v260[13];
              v253 = (__n128)v260[12];
              swift_retain();
              StateValue.wrappedValue.getter(v259, v188);
              swift_release();
              memcpy(v261, v259, 0x1F8uLL);
              v189 = sub_100036264((uint64_t)v261);
              v10 = (uint64_t)v257[0];
              v190 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v189, v256, v255, v254, v253, v252, v261[2]);
              v135 = v249;
              if (v191 < 0.0 || v191 > 1.0)
              {
                swift_bridgeObjectRelease(v143);

                goto LABEL_176;
              }
              v192 = (CGPoint)vcvtq_f64_f32(*(float32x2_t *)&v190);
              v193 = v192.y;
              v267.origin.x = v152;
              v267.origin.y = v154;
              v267.size.width = v156;
              v267.size.height = v158;
              v10 = CGRectContainsPoint(v267, v192);

              if ((v10 & 1) == 0)
              {
                swift_bridgeObjectRelease(v143);

                goto LABEL_176;
              }
              if (v246 == v3)
              {
                v197 = swift_bridgeObjectRelease(v143);
                v3 = v258;
                v198 = v239(v197);
                goto LABEL_160;
              }
              v10 = v3 + 1;
              if (v248)
              {
                v194 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 + 1, v143);
              }
              else
              {
                if ((unint64_t)v10 >= *(_QWORD *)(v240 + 16))
                  goto LABEL_200;
                v194 = *(id *)(v143 + 8 * v3 + 40);
              }
              v146 = v194;
              if (__OFADD__(v10, 1))
                goto LABEL_197;
              v147 = *(uint64_t (**)(void))((swift_isaMask & *v194) + 0x250);
              v195 = v147();
              v10 = v195;
              if ((unint64_t)v195 >> 62)
              {
                if (v195 >= 0)
                  v195 &= 0xFFFFFFFFFFFFFF8uLL;
                v196 = _CocoaArrayWrapper.endIndex.getter(v195);
              }
              else
              {
                v196 = *(_QWORD *)((v195 & 0xFFFFFFFFFFFFF8) + 0x10);
              }
              swift_bridgeObjectRelease(v10);
              if (v196 < 2)
                break;
              ++v3;
            }
            swift_bridgeObjectRelease(v143);

LABEL_151:
            v3 = v258;
          }
          else
          {
            swift_bridgeObjectRelease(v143);

          }
          v134 = v244;
          v135 = v249;
        }
      }
      while (v2 != v135);
    }
    swift_bridgeObjectRelease(v134);
    if (*(_QWORD *)(*(_QWORD *)(v3 + 144) + 16))
    {
      v263[0] = v238;
      v228 = v245;
      swift_retain();
      Synchronized.wrappedValue.setter(v263);

      swift_release();
    }
    else
    {

    }
    v1 = (uint64_t)&off_10046F000;
    v2 = v237;
    goto LABEL_186;
  }
LABEL_31:
  if (v2 >= 1)
  {
    v46 = 0;
    v47 = v1 & 0xC000000000000001;
    v252.n128_u64[0] = v1 & 0xC000000000000001;
    while (1)
    {
      if (v47)
        v48 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v46, v1);
      else
        v48 = *(id *)(v1 + 8 * v46 + 32);
      v49 = v48;
      v50 = *(uint64_t (**)(void))((swift_isaMask & *v48) + 0x250);
      v51 = v50();
      v52 = v51;
      if ((unint64_t)v51 >> 62)
      {
        if (v51 >= 0)
          v51 &= 0xFFFFFFFFFFFFFF8uLL;
        v53 = _CocoaArrayWrapper.endIndex.getter(v51);
      }
      else
      {
        v53 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v54 = swift_bridgeObjectRelease(v52);
      if (v53 >= 2 && ((*(uint64_t (**)(__n128))((swift_isaMask & *v49) + 0x2C8))(v54) & 1) != 0)
      {
        v55 = objc_msgSend(Strong, "frame");
        v57 = v56;
        v59 = v58;
        v61 = v60;
        v63 = v62;
        v10 = (uint64_t)v49;
        v64 = ((uint64_t (*)(id))v50)(v55);
        v65 = v64;
        if ((v64 & 0xC000000000000001) != 0)
        {
          v66 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v64);
        }
        else
        {
          if (!*(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_82;
          v66 = *(id *)(v64 + 32);
        }
        v67 = v66;
        v68 = swift_bridgeObjectRelease(v65);
        v69.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v67) + 0x2B0))(v68);
        v256 = v70;
        *(__n128 *)v257 = v69;
        v254 = v72;
        v255 = v71;

        v73.n128_f64[0] = simd_float4x4.position.getter(*(__n128 *)v257, v256, v255, v254);
        *(__n128 *)v257 = v73;
        type metadata accessor for MeasureCamera(0);
        swift_retain();
        StateValue.wrappedValue.getter(v261, v74);
        swift_release();
        memcpy(v262, v261, 0x1F8uLL);
        sub_100036264((uint64_t)v262);
        v255 = (__n128)v262[11];
        v256 = (__n128)v262[10];
        v253 = (__n128)v262[13];
        v254 = (__n128)v262[12];
        swift_retain();
        StateValue.wrappedValue.getter(v261, v75);
        swift_release();
        memcpy(v263, v261, 0x1F8uLL);
        v76 = sub_100036264((uint64_t)v263);
        v77 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v76, *(__n128 *)v257, v256, v255, v254, v253, *(double *)&v263[2]);
        if (v78 >= 0.0 && v78 <= 1.0)
        {
          v79 = (CGPoint)vcvtq_f64_f32(*(float32x2_t *)&v77);
          v80 = v79.y;
          v265.origin.x = v57;
          v265.origin.y = v59;
          v265.size.width = v61;
          v265.size.height = v63;
          if (CGRectContainsPoint(v265, v79))
          {
            v81 = v50();
            v82 = v81;
            if ((v81 & 0xC000000000000001) != 0)
            {
              v83 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v81);
            }
            else
            {
              if (*(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                goto LABEL_214;
              v83 = *(id *)(v81 + 40);
            }
            v84 = v83;
            v85 = swift_bridgeObjectRelease(v82);
            v86.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v84) + 0x2B0))(v85);
            v256 = v87;
            *(__n128 *)v257 = v86;
            v254 = v89;
            v255 = v88;

            v90.n128_f64[0] = simd_float4x4.position.getter(*(__n128 *)v257, v256, v255, v254);
            v3 = v258;
            v91 = sub_100035B00(v90, v57, v59, v61, v63);
            if ((v92 & 1) == 0)
            {
              v93 = (_QWORD *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v49) + 0x268))(v91);
              v94.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *v93) + 0x2B0))();
              v256 = v95;
              *(__n128 *)v257 = v94;
              v254 = v97;
              v255 = v96;

              v98.n128_f64[0] = simd_float4x4.position.getter(*(__n128 *)v257, v256, v255, v254);
              *(__n128 *)v257 = v98;
              swift_retain();
              StateValue.wrappedValue.getter(v261, v99);
              swift_release();
              memcpy(v260, v261, 0x1F8uLL);
              sub_100036264((uint64_t)v260);
              v255 = (__n128)v260[11];
              v256 = (__n128)v260[10];
              v253 = (__n128)v260[13];
              v254 = (__n128)v260[12];
              swift_retain();
              StateValue.wrappedValue.getter(v259, v100);
              swift_release();
              memcpy(v261, v259, 0x1F8uLL);
              v101 = sub_100036264((uint64_t)v261);
              v102 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v101, *(__n128 *)v257, v256, v255, v254, v253, v261[2]);
              v103 = *(float *)&v102;
              v104 = *((float *)&v102 + 1);
              switch(v243)
              {
                case 2:
                  v107 = Strong;
                  objc_msgSend(Strong, "frame");
                  v103 = v108 - v103;
                  objc_msgSend(v107, "frame");
                  v106 = v109 - v104;
                  break;
                case 3:
                  objc_msgSend(Strong, "frame");
                  v106 = v110 - v103;
                  goto LABEL_61;
                case 4:
                  objc_msgSend(Strong, "frame");
                  v104 = v105 - v104;
                  v106 = v103;
LABEL_61:
                  v111 = *(uint64_t (**)(void))((swift_isaMask & *v49) + 0xB8);
                  v112 = v49;
                  v113 = v111();
                  v115 = v114;

                  v116 = v3;
                  v117 = *(_QWORD **)(v3 + 144);
                  v118 = swift_isUniquelyReferenced_nonNull_native(v117);
                  *(_QWORD *)(v116 + 144) = v117;
                  if ((v118 & 1) == 0)
                  {
                    v117 = sub_10005F56C(0, v117[2] + 1, 1, v117);
                    *(_QWORD *)(v258 + 144) = v117;
                  }
                  v120 = v117[2];
                  v119 = v117[3];
                  if (v120 >= v119 >> 1)
                  {
                    v117 = sub_10005F56C((_QWORD *)(v119 > 1), v120 + 1, 1, v117);
                    *(_QWORD *)(v258 + 144) = v117;
                  }
                  v117[2] = v120 + 1;
                  v121 = (double *)&v117[4 * v120];
                  v121[4] = v104;
                  v121[5] = v106;
                  *((_QWORD *)v121 + 6) = v113;
                  *((_QWORD *)v121 + 7) = v115;

                  v3 = v258;
                  v47 = v252.n128_u64[0];
                  goto LABEL_34;
                default:
                  v106 = *((float *)&v102 + 1);
                  break;
              }
              v104 = v103;
              goto LABEL_61;
            }
          }
        }

        v47 = v252.n128_u64[0];
      }
      else
      {

      }
LABEL_34:
      if (v2 == ++v46)
        goto LABEL_93;
    }
  }
  __break(1u);
LABEL_214:
  __break(1u);
}

void sub_1000346F0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  double *v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(__n128);
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  char v65;
  uint64_t v66;
  _QWORD *v67;
  UIImage *v68;
  NSData *v69;
  uint64_t v70;
  NSData *v71;
  unint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  __n128 v82;
  void (*v83)(char *, uint64_t, __n128);
  char *v84;
  void (*v85)(void);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  __n128 v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  void (*v100)(void);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  __n128 v112;
  void (*v113)(char *, uint64_t, __n128);
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  id v143;
  id v144;
  __n128 v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  void (*v152)(char *, uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  void *v157;
  __n128 v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(void);
  uint64_t v168;
  void (*v169)(uint64_t, uint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  id v180;
  char *v181;
  void (*v182)(char *, uint64_t);
  void (*v183)(char *, uint64_t);
  unint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  UIImage *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  void **aBlock;
  uint64_t v215;
  uint64_t (*v216)(uint64_t);
  void *v217;
  void *v218;
  uint64_t v219;

  v180 = a1;
  v178 = type metadata accessor for DispatchWorkItemFlags(0);
  v177 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v176 = (char *)&v166 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for DispatchQoS(0);
  v174 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v173 = (char *)&v166 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = type metadata accessor for UUID(0);
  v192 = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200);
  v191 = (char *)&v166 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v166 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v196 = (uint64_t)&v166 - v9;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v190 = (char *)&v166 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v189 = (char *)&v166 - v15;
  v16 = __chkstk_darwin(v14);
  v188 = (char *)&v166 - v17;
  v18 = __chkstk_darwin(v16);
  v195 = (char *)&v166 - v19;
  __chkstk_darwin(v18);
  v198 = (char *)&v166 - v20;
  v21 = type metadata accessor for MeasurementCapture(0);
  v202 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v171 = (uint64_t)&v166 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v187 = (char *)&v166 - v25;
  v26 = __chkstk_darwin(v24);
  v168 = (uint64_t)&v166 - v27;
  v28 = __chkstk_darwin(v26);
  v179 = (char *)&v166 - v29;
  v30 = __chkstk_darwin(v28);
  v170 = (uint64_t)&v166 - v31;
  v172 = v32;
  __chkstk_darwin(v30);
  v186 = (uint64_t)&v166 - v33;
  v34 = type metadata accessor for MeasurementHistoryItem(0);
  v203 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v36 = (uint64_t *)((char *)&v166 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = type metadata accessor for MeasurementsHistory(0);
  __chkstk_darwin(v37);
  v212 = (uint64_t)&v166 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_10000EDC8((uint64_t *)&unk_100482AF0);
  v40 = __chkstk_darwin(v39);
  v197 = (uint64_t)&v166 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v199 = v11;
  v42 = *(void (**)(void))(v11 + 56);
  v201 = (uint64_t)&v166 - v43;
  v167 = v42;
  v42();
  v44 = *(_QWORD *)(v1 + 144);
  v45 = &unk_1003B0000;
  v208 = *(_QWORD *)(v44 + 16);
  v209 = v1;
  if (!v208)
  {
LABEL_49:
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    v156 = (void *)static OS_dispatch_queue.main.getter();
    v218 = sub_10003628C;
    v219 = v209;
    aBlock = _NSConcreteStackBlock;
    v215 = v45[352];
    v216 = sub_10003ECA0;
    v217 = &unk_10043FD58;
    v157 = _Block_copy(&aBlock);
    swift_retain();
    v158 = swift_release();
    v159 = v173;
    static DispatchQoS.unspecified.getter(v158);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v160 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v161 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v162 = sub_100036038((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430);
    v163 = v176;
    v164 = v161;
    v165 = v178;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v164, v162, v178, v160);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v159, v163, v157);
    _Block_release(v157);

    (*(void (**)(char *, uint64_t))(v177 + 8))(v163, v165);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v159, v175);
    sub_100036600(v201, (uint64_t *)&unk_100482AF0);
    return;
  }
  v207 = v44 + 32;
  swift_bridgeObjectRetain(v44);
  v46 = 0;
  v204 = 0;
  v185 = v8;
  v210 = v10;
  v205 = v21;
  v206 = v44;
  while (v46 < *(_QWORD *)(v44 + 16))
  {
    v48 = v10;
    v211 = v46;
    v49 = (double *)(v207 + 32 * v46);
    v51 = *v49;
    v50 = v49[1];
    v53 = *((_QWORD *)v49 + 2);
    v52 = *((_QWORD *)v49 + 3);
    v54 = *(void (**)(__n128))(**(_QWORD **)(v209 + 120) + 144);
    swift_bridgeObjectRetain(v52);
    v55 = swift_retain();
    v56 = v212;
    v54(v55);
    swift_release();
    v57 = *(_QWORD *)v56;
    v58 = *(_QWORD *)(*(_QWORD *)v56 + 16);
    if (v58)
    {
      v59 = v203;
      v60 = v57 + ((*(unsigned __int8 *)(v203 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v203 + 80));
      swift_bridgeObjectRetain(v57);
      v61 = 0;
      v62 = *(_QWORD *)(v59 + 72);
      while (1)
      {
        sub_100036344(v60, (uint64_t)v36, type metadata accessor for MeasurementHistoryItem);
        v63 = v36[1];
        v64 = *v36 == v53 && v63 == v52;
        if (v64)
          break;
        v65 = _stringCompareWithSmolCheck(_:_:expecting:)(*v36, v63, v53, v52, 0);
        sub_1000258F8((uint64_t)v36, type metadata accessor for MeasurementHistoryItem);
        if ((v65 & 1) != 0)
          goto LABEL_18;
        ++v61;
        v60 += v62;
        if (v58 == v61)
        {
          swift_bridgeObjectRelease(v57);
          v10 = v210;
          v45 = (_QWORD *)&unk_1003B0000;
          goto LABEL_4;
        }
      }
      sub_1000258F8((uint64_t)v36, type metadata accessor for MeasurementHistoryItem);
LABEL_18:
      swift_bridgeObjectRelease(v57);
      sub_1000258F8(v212, type metadata accessor for MeasurementsHistory);
      swift_bridgeObjectRelease(v52);
      v66 = v197;
      sub_1000362A0(v201, v197);
      v67 = (_QWORD *)v199;
      v10 = v210;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v199 + 48))(v66, 1, v210) == 1)
      {
        sub_100036600(v66, (uint64_t *)&unk_100482AF0);
        v68 = (UIImage *)v180;
        v69 = UIImageJPEGRepresentation(v68, 1.0);
        v70 = v205;
        if (!v69)
        {

          v45 = (_QWORD *)&unk_1003B0000;
          v44 = v206;
          v47 = v211;
          goto LABEL_45;
        }
        v71 = v69;
        v194 = v68;
        v193 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v184 = v72;

        if (qword_10047A978 != -1)
          swift_once(&qword_10047A978, sub_1000958BC);
        v183 = (void (*)(char *, uint64_t))sub_1000362E8(v10, (uint64_t)qword_1004AF2D8);
        v73 = (void (*)(uint64_t, uint64_t, uint64_t))v67[2];
        v74 = v190;
        v75 = ((uint64_t (*)(char *, void (*)(char *, uint64_t), uint64_t))v73)(v190, v183, v10);
        v76 = v191;
        v77 = UUID.init()(v75);
        v78 = UUID.uuidString.getter(v77);
        v80 = v79;
        v182 = *(void (**)(char *, uint64_t))(v192 + 8);
        v182(v76, v200);
        v81 = v189;
        URL.appendingPathComponent(_:)(v78);
        v82 = swift_bridgeObjectRelease(v80);
        v83 = (void (*)(char *, uint64_t, __n128))v67[1];
        v83(v74, v210, v82);
        v84 = v188;
        URL.appendingPathExtension(_:)(6778986, 0xE300000000000000);
        ((void (*)(char *, uint64_t))v83)(v81, v210);
        v181 = &v187[*(int *)(v205 + 20)];
        v85 = (void (*)(void))v67[4];
        v85();
        v169 = v73;
        v86 = ((uint64_t (*)(char *, void (*)(char *, uint64_t), uint64_t))v73)(v74, v183, v210);
        v87 = UUID.init()(v86);
        v88 = UUID.uuidString.getter(v87);
        v90 = v89;
        v91 = v76;
        v10 = v210;
        v182(v91, v200);
        URL.appendingPathComponent(_:)(v88);
        v92 = swift_bridgeObjectRelease(v90);
        v83(v74, v10, v92);
        URL.appendingPathExtension(_:)(6778986, 0xE300000000000000);
        v93 = (uint64_t)v187;
        v183 = (void (*)(char *, uint64_t))v83;
        ((void (*)(char *, uint64_t))v83)(v81, v10);
        ((void (*)(uint64_t, char *, uint64_t))v85)(v93, v84, v10);
        v94 = v181;
        v95 = v193;
        v96 = v184;
        v97 = v204;
        Data.write(to:options:)(v181, 0, v193, v184);
        if (v97)
        {
          sub_100171C8C();

          swift_errorRelease(v97);
          sub_100036300(v95, v96);
          v204 = 0;
          v70 = v205;
          v45 = (_QWORD *)&unk_1003B0000;
          goto LABEL_44;
        }
        v204 = 0;
        v125 = sub_100171640(v51, v50, v95, v96, 1);

        sub_100036300(v95, v96);
        v126 = (uint64_t)v185;
        v45 = (_QWORD *)&unk_1003B0000;
        if ((v125 & 1) == 0)
        {
          v70 = v205;
LABEL_44:
          v47 = v211;
          v152 = v183;
          v183((char *)v93, v10);
          v152(v94, v10);
          v44 = v206;
LABEL_45:
          v126 = (uint64_t)v185;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v202 + 56))(v185, 1, 1, v70);
LABEL_46:
          sub_100036600(v126, (uint64_t *)&unk_1004862E0);
          goto LABEL_6;
        }
        sub_100036344(v93, (uint64_t)v185, type metadata accessor for MeasurementCapture);
        v127 = v202;
        v128 = v205;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v202 + 56))(v126, 0, 1, v205);
        sub_1000258F8(v93, type metadata accessor for MeasurementCapture);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v126, 1, v128) == 1)
        {
          v44 = v206;
          v47 = v211;
          goto LABEL_46;
        }
        v153 = v201;
        sub_100036600(v201, (uint64_t *)&unk_100482AF0);
        v154 = v168;
        sub_100036388(v126, v168);
        v155 = v186;
        sub_100036388(v154, v186);
        v169(v153, v155 + *(int *)(v128 + 20), v10);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v167)(v153, 0, 1, v10);
        goto LABEL_39;
      }
      v98 = v67;
      v99 = v198;
      v194 = (UIImage *)v67[4];
      ((void (*)(char *, uint64_t, uint64_t))v194)(v198, v66, v10);
      v100 = (void (*)(void))v67[2];
      ((void (*)(char *, char *, uint64_t))v100)(v195, v99, v10);
      v101 = (uint64_t)v179;
      v193 = (uint64_t)&v179[*(int *)(v205 + 20)];
      v100();
      if (qword_10047A978 != -1)
        swift_once(&qword_10047A978, sub_1000958BC);
      v102 = sub_1000362E8(v10, (uint64_t)qword_1004AF2D8);
      v103 = v10;
      v104 = v190;
      v105 = ((uint64_t (*)(char *, uint64_t, uint64_t))v100)(v190, v102, v103);
      v106 = v191;
      v107 = UUID.init()(v105);
      v108 = UUID.uuidString.getter(v107);
      v110 = v109;
      (*(void (**)(char *, uint64_t))(v192 + 8))(v106, v200);
      v111 = v189;
      URL.appendingPathComponent(_:)(v108);
      v112 = swift_bridgeObjectRelease(v110);
      v113 = (void (*)(char *, uint64_t, __n128))v98[1];
      v114 = v104;
      v10 = v103;
      v113(v114, v103, v112);
      v115 = v188;
      URL.appendingPathExtension(_:)(6778986, 0xE300000000000000);
      ((void (*)(char *, uint64_t))v113)(v111, v103);
      ((void (*)(uint64_t, char *, uint64_t))v194)(v101, v115, v103);
      v116 = v204;
      v117 = Data.init(contentsOf:options:)(v193, 0);
      if (v116)
      {
        ((void (*)(char *, uint64_t))v113)(v195, v103);
        sub_1000258F8(v101, type metadata accessor for MeasurementCapture);
        swift_errorRelease(v116);
        v204 = 0;
        v119 = 1;
        v120 = v196;
      }
      else
      {
        v121 = v117;
        v122 = v118;
        v204 = 0;
        sub_10003649C(v117, v118);
        v123 = sub_100171640(v51, v50, v121, v122, 0);
        sub_100036300(v121, v122);
        sub_100036300(v121, v122);
        ((void (*)(char *, uint64_t))v113)(v195, v10);
        v124 = v196;
        if ((v123 & 1) != 0)
        {
          sub_100036388(v101, v196);
          v119 = 0;
        }
        else
        {
          sub_1000258F8(v101, type metadata accessor for MeasurementCapture);
          v119 = 1;
        }
        v120 = v124;
      }
      v129 = v202;
      v130 = v205;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v202 + 56))(v120, v119, 1, v205);
      ((void (*)(char *, uint64_t))v113)(v198, v10);
      v131 = v130;
      v132 = v196;
      v64 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v196, 1, v131) == 1;
      v45 = (_QWORD *)&unk_1003B0000;
      v133 = v132;
      if (!v64)
      {
        v134 = v170;
        sub_100036388(v133, v170);
        sub_100036388(v134, v186);
LABEL_39:
        if (qword_10047A930 != -1)
          swift_once(&qword_10047A930, sub_100083368);
        v135 = (void *)*((_QWORD *)&xmmword_1004AF258 + 1);
        if (!*((_QWORD *)&xmmword_1004AF258 + 1))
          goto LABEL_51;
        v136 = (void *)Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
        v137 = v186;
        v138 = v171;
        sub_100036344(v186, v171, type metadata accessor for MeasurementCapture);
        v139 = *(unsigned __int8 *)(v202 + 80);
        v140 = (v139 + 32) & ~v139;
        v141 = swift_allocObject(&unk_10043FD90, v140 + v172, v139 | 7);
        *(_QWORD *)(v141 + 16) = v209;
        *(_QWORD *)(v141 + 24) = v61;
        sub_100036388(v138, v141 + v140);
        v218 = sub_10003646C;
        v219 = v141;
        aBlock = _NSConcreteStackBlock;
        v215 = 1107296256;
        v216 = sub_10003ECA0;
        v217 = &unk_10043FDA8;
        v142 = _Block_copy(&aBlock);
        v143 = v135;
        v144 = v136;
        v145 = swift_retain();
        v146 = v173;
        static DispatchQoS.unspecified.getter(v145);
        v213 = _swiftEmptyArrayStorage;
        v147 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v148 = sub_10000EDC8((uint64_t *)&unk_10047E430);
        v149 = sub_100036038((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430);
        v150 = v176;
        v151 = v178;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v213, v148, v149, v178, v147);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v146, v150, v142);
        _Block_release(v142);

        (*(void (**)(char *, uint64_t))(v177 + 8))(v150, v151);
        (*(void (**)(char *, uint64_t))(v174 + 8))(v146, v175);
        sub_1000258F8(v137, type metadata accessor for MeasurementCapture);

        swift_release();
        v10 = v210;
        v45 = (_QWORD *)&unk_1003B0000;
        goto LABEL_5;
      }
      sub_100036600(v132, (uint64_t *)&unk_1004862E0);
    }
    else
    {
      v10 = v48;
LABEL_4:
      sub_1000258F8(v212, type metadata accessor for MeasurementsHistory);
      swift_bridgeObjectRelease(v52);
    }
LABEL_5:
    v44 = v206;
    v47 = v211;
LABEL_6:
    v46 = v47 + 1;
    if (v46 == v208)
    {
      swift_bridgeObjectRelease(v44);
      goto LABEL_49;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
}

void sub_100035818(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    objc_msgSend(v2, "removeFromSuperview");
    v3 = *(void **)(a1 + 88);
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)(a1 + 88) = 0;

  *(_BYTE *)(a1 + 80) = 0;
}

double sub_100035860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(__n128);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;

  v6 = type metadata accessor for MeasurementCapture(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = *(uint64_t (**)(__n128))(**(_QWORD **)(a1 + 120) + 200);
  v10 = swift_retain();
  v11 = v9(v10);
  swift_release();
  sub_100036344(a3, (uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MeasurementCapture);
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = swift_allocObject(&unk_10043FDE0, v13 + v8, v12 | 7);
  *(_QWORD *)(v14 + 16) = a2;
  sub_100036388((uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
  (*(void (**)(uint64_t (*)(uint64_t *), uint64_t))(*(_QWORD *)v11 + 416))(sub_100036578, v14);
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100035970(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100036344(a3, (uint64_t)v8, type metadata accessor for MeasurementCapture);
  v9 = type metadata accessor for MeasurementCapture(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
  v10 = (_QWORD *)*a1;
  result = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = (uint64_t)v10;
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  result = sub_100028750(v10);
  v10 = (_QWORD *)result;
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_7;
LABEL_3:
  if (v10[2] <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v12 = type metadata accessor for MeasurementHistoryItem(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = (char *)v10 + v14;
  v16 = *(_QWORD *)(v13 + 72) * a2;
  sub_1000365B8((uint64_t)v8, (uint64_t)&v15[*(int *)(v12 + 24) + v16]);
  v17 = *a1;
  v18 = (uint64_t)a1 + *(int *)(type metadata accessor for MeasurementsHistory(0) + 24);
  result = sub_100036600(v18, (uint64_t *)&unk_100488B90);
  if (*(_QWORD *)(v17 + 16) > a2)
  {
    sub_100036344(v17 + v14 + v16, v18, type metadata accessor for MeasurementHistoryItem);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v18, 0, 1, v12);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100035B00(__n128 a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  float v13;
  CGPoint v15;
  CGFloat y;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  CGFloat x;
  _QWORD v24[64];
  _OWORD __dst[32];
  double __src[64];
  CGRect v27;

  type metadata accessor for MeasureCamera(0);
  swift_retain();
  StateValue.wrappedValue.getter(__src, v9);
  swift_release();
  memcpy(__dst, __src, 0x1F8uLL);
  sub_100036264((uint64_t)__dst);
  v20 = (__n128)__dst[11];
  v21 = (__n128)__dst[10];
  v18 = (__n128)__dst[13];
  v19 = (__n128)__dst[12];
  swift_retain();
  StateValue.wrappedValue.getter(v24, v10);
  swift_release();
  memcpy(__src, v24, 0x1F8uLL);
  v11 = sub_100036264((uint64_t)__src);
  v12 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v11, a1, v21, v20, v19, v18, __src[2]);
  if (v13 < 0.0 || v13 > 1.0)
    return 0;
  v15 = (CGPoint)vcvtq_f64_f32(*(float32x2_t *)&v12);
  v27.origin.x = a2;
  v27.origin.y = a3;
  v27.size.width = a4;
  v27.size.height = a5;
  y = v15.y;
  x = v15.x;
  if (!CGRectContainsPoint(v27, v15))
    return 0;
  else
    return *(_QWORD *)&x;
}

uint64_t sub_100035C58(void *a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[5];

  v3 = v2;
  v40 = a1;
  v41 = a2;
  v4 = *v2;
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_BYTE *)v2 + 80) = 0;
  v2[12] = 0;
  v2[13] = 0;
  v2[11] = 0;
  v14 = sub_10000EDC8(&qword_10047D010);
  KeyPath = swift_getKeyPath(&unk_1003B1FF0);
  v16 = qword_10047AD88;
  swift_retain();
  if (v16 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v17 = qword_1004AF890;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v14 + 272);
  v19 = swift_retain();
  v3[14] = v18(KeyPath, v17, v19);
  sub_10000EDC8(&qword_10047D018);
  v20 = swift_getKeyPath(&unk_1003B2018);
  v3[15] = MutableStateValue.__allocating_init(_:_:)(v20, v4);
  v42[0] = 0;
  v21 = sub_10000EDC8(&qword_10047D020);
  swift_allocObject(v21, 32, 7);
  v3[16] = Synchronized.init(wrappedValue:)(v42);
  swift_unknownObjectUnownedInit(v3 + 17, 0);
  v3[18] = _swiftEmptyArrayStorage;
  v22 = swift_getKeyPath(&unk_1003B2040);
  v23 = sub_10000EDC8(&qword_100481BA0);
  v24 = qword_1004AF890;
  v25 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v23 + 272);
  v26 = swift_retain();
  v3[19] = v25(v22, v24, v26);
  swift_unknownObjectWeakInit(v3 + 20, 0);
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  static DispatchQoS.userInitiated.getter();
  v42[0] = _swiftEmptyArrayStorage;
  v27 = sub_10000C4B0((unint64_t *)&qword_10047E690, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v28 = sub_10000EDC8(&qword_100486EF0);
  v29 = sub_100036038((unint64_t *)&qword_10047E6A0, &qword_100486EF0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v42, v28, v29, v8, v27);
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v39);
  v3[21] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x69616E626D756874, 0xEE0065756575516CLL, v13, v10, v7, 0);
  v30 = v40;
  v3[8] = v40;
  v31 = (void *)objc_opt_self(Gestalt);
  v32 = v30;
  if (objc_msgSend(v31, "jasperAvailable"))
  {
    v33 = objc_opt_self(ARSCNView);
    v34 = (void *)swift_dynamicCastObjCClass(v32, v33);
    if (v34)
      v35 = v32;
    swift_unknownObjectWeakAssign(v3 + 20, v34);

  }
  v3[9] = v41;
  swift_release();
  v42[3] = &type metadata for Configurations.Default;
  v42[4] = &protocol witness table for Configurations.Default;
  return StateObserver.init(configuration:)(v42);
}

void sub_100036018()
{
  uint64_t v0;

  sub_100035818(v0);
}

uint64_t sub_100036020(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100036030(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100036038(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100012B80(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100036078()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000360A4()
{
  uint64_t v0;

  sub_1000346F0(*(void **)(v0 + 24));
}

id sub_1000360CC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 64);
  objc_msgSend(v1, "bounds");
  return objc_msgSend(v1, "drawViewHierarchyInRect:afterScreenUpdates:", 1);
}

uint64_t sub_100036108()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100036118(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C3588(a1, *(uint64_t (**)(void))(v1 + 16));
}

void sub_100036120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;
  void *v8;
  id v9;
  double v10;
  id v11;
  _QWORD v12[6];

  v6 = objc_msgSend(objc_allocWithZone((Class)SSUIServiceOptions), "init");
  objc_msgSend(v6, "setFlashStyle:", 0);
  objc_msgSend(v6, "setSaveLocation:", 1);
  v7 = objc_msgSend(objc_allocWithZone((Class)SSUIService), "init");
  if (a2)
  {
    v12[4] = a2;
    v12[5] = a3;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_10003ECA0;
    v12[3] = &unk_10043FD30;
    v8 = _Block_copy(v12);
    v9 = v6;
    sub_100036254(a2, a3);
    *(_QWORD *)&v10 = swift_release().n128_u64[0];
  }
  else
  {
    v11 = v6;
    v8 = 0;
  }
  objc_msgSend(v7, "showScreenshotUIForImage:options:withCompletion:", a1, v6, v8, v10);
  _Block_release(v8);

}

uint64_t sub_100036254(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_100036264(uint64_t a1)
{

  return a1;
}

uint64_t sub_10003628C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 144) = &_swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_1000362A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8((uint64_t *)&unk_100482AF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000362E8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_100036300(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100036344(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100036388(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MeasurementCapture(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000363CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for MeasurementCapture(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  v8 = type metadata accessor for URL(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  return swift_deallocObject(v0, v5, v6);
}

double sub_10003646C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MeasurementCapture(0) - 8) + 80);
  return sub_100035860(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_10003649C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000364E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for MeasurementCapture(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for URL(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100036578(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MeasurementCapture(0) - 8) + 80);
  return sub_100035970(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_1000365B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100036600(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10000EDC8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10003666C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

void sub_100036694()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  id v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  NSString v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSString v26;
  id v27;
  double v28;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  NSString v38;
  id v39;
  id v40;
  NSString v41;
  _QWORD v42[2];
  uint64_t v43[14];
  unsigned __int8 v44;
  __C::SCNVector3 v45;

  v1 = v0;
  v2 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeGeometry, (uint64_t (*)(void))sub_100036EA8);
  v3 = (void *)objc_opt_self(SCNNode);
  v4 = objc_msgSend(v3, "nodeWithGeometry:", v2);

  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setName:", v5);

  v6 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger_detector];
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 544))();
  if ((*(_QWORD *)LocalPlaneDetector.DebugOptions.showPlane.unsafeMutableAddressor() & ~v7) != 0)
  {
    v8 = 1;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 496))(v43);
    v8 = v44;
  }
  objc_msgSend(v4, "setHidden:", v8);
  v9 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  sub_100038000((uint64_t)v9, 0.001);
  v11 = v10;

  objc_msgSend(v4, "addChildNode:", v11);
  v12 = (id)objc_opt_self(SCNPlane);
  v13 = objc_msgSend(v12, "planeWithWidth:height:", 0.1, 0.005);
  v14 = objc_msgSend(v3, "nodeWithGeometry:", v13);

  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setName:", v15);

  v16 = objc_msgSend(v14, "geometry");
  if (!v16)
    goto LABEL_16;
  v17 = v16;
  v18 = objc_msgSend(v16, "materials");

  v19 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0)
      v23 = v20;
    else
      v23 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v24 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v20);
    if (v24)
      goto LABEL_7;
LABEL_15:
    swift_bridgeObjectRelease(v20);
    goto LABEL_16;
  }
  if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_15;
LABEL_7:
  if ((v20 & 0xC000000000000001) != 0)
  {
    v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
  }
  else
  {
    if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_31;
    }
    v21 = *(id *)(v20 + 32);
  }
  v22 = v21;
  objc_msgSend(v21, "setColorBufferWriteMask:", 8, swift_bridgeObjectRelease(v20).n128_f64[0]);

LABEL_16:
  objc_msgSend(v4, "addChildNode:", v14);
  v25 = objc_msgSend(v12, "planeWithWidth:height:", 0.005, 0.1);
  v12 = objc_msgSend(v3, "nodeWithGeometry:", v25);

  v26 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "setName:", v26);

  v27 = objc_msgSend(v12, "geometry");
  if (!v27)
  {
LABEL_28:
    objc_msgSend(v4, "addChildNode:", v12, v28);
    v42[0] = 0;
    v42[1] = 0xE000000000000000;
    v36 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v42, &type metadata for String);
    v37 = objc_msgSend((id)objc_opt_self(SCNText), "textWithString:extrusionDepth:", v36, 0.01);
    swift_unknownObjectRelease(v36);
    v38 = String._bridgeToObjectiveC()();
    v39 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithName:size:", v38, 1.0);

    objc_msgSend(v37, "setFont:", v39);
    v40 = objc_msgSend(v3, "nodeWithGeometry:", v37);
    v41 = String._bridgeToObjectiveC()();
    objc_msgSend(v40, "setName:", v41);

    objc_msgSend(v40, "position");
    objc_msgSend(v40, "setPosition:");
    v45 = SCNVector3.init(_:_:_:)(0.02, 0.02, 0.02);
    objc_msgSend(v40, "setScale:", *(double *)&v45.x, *(double *)&v45.y, *(double *)&v45.z);
    objc_msgSend(v4, "addChildNode:", v40);
    objc_msgSend(v1, "addChildNode:", v4);

    return;
  }
  v29 = v27;
  v30 = objc_msgSend(v27, "materials");

  v31 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);

  if (!((unint64_t)v20 >> 62))
  {
    if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_19;
LABEL_27:
    *(_QWORD *)&v28 = swift_bridgeObjectRelease(v20).n128_u64[0];
    goto LABEL_28;
  }
  if (v20 < 0)
    v34 = v20;
  else
    v34 = v20 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v20);
  v35 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_bridgeObjectRelease(v20);
  if (!v35)
    goto LABEL_27;
LABEL_19:
  if ((v20 & 0xC000000000000001) != 0)
  {
LABEL_31:
    v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
    goto LABEL_22;
  }
  if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v32 = *(id *)(v20 + 32);
LABEL_22:
    v33 = v32;
    objc_msgSend(v32, "setColorBufferWriteMask:", 8, swift_bridgeObjectRelease(v20).n128_f64[0]);

    goto LABEL_28;
  }
  __break(1u);
}

void sub_100036CE8()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;

  v1 = objc_msgSend((id)objc_opt_self(SCNSphere), "sphereWithRadius:", 0.005);
  v2 = objc_msgSend(v1, "materials");
  v3 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease(v4);
    goto LABEL_12;
  }
  if (v4 < 0)
    v7 = v4;
  else
    v7 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v8 = _CocoaArrayWrapper.endIndex.getter(v7);
  swift_bridgeObjectRelease(v4);
  if (!v8)
    goto LABEL_11;
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(id *)(v4 + 32);
LABEL_6:
    v6 = v5;
    objc_msgSend(v5, "setColorBufferWriteMask:", 8, swift_bridgeObjectRelease(v4).n128_f64[0]);

LABEL_12:
    v9 = objc_msgSend((id)objc_opt_self(SCNNode), "nodeWithGeometry:", v1);
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setName:", v10);

    objc_msgSend(v9, "setHidden:", 1);
    objc_msgSend(v0, "addChildNode:", v9);

    return;
  }
  __break(1u);
}

void sub_100036EA8()
{
  uint64_t v0;
  float *v1;
  double (*v2)(void);
  double v3;
  double v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  Class isa;
  uint64_t v13;
  uint64_t v14;

  v1 = *(float **)(v0 + OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger_detector);
  v2 = *(double (**)(void))(*(_QWORD *)v1 + 280);
  v3 = v2();
  v2();
  v5 = objc_msgSend((id)objc_opt_self(SCNPlane), "planeWithWidth:height:", v3, v4);
  objc_msgSend(v5, "setCornerRadius:", v1[6]);
  v6 = objc_msgSend(v5, "materials");
  v7 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v13 = v8;
    else
      v13 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v14 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(v8);
    if (v14)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease(v8);
    return;
  }
  if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_11;
LABEL_3:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = *(id *)(v8 + 32);
LABEL_6:
    v10 = v9;
    v11 = objc_msgSend(v9, "diffuse", swift_bridgeObjectRelease(v8).n128_f64[0]);
    sub_100018148(0, &qword_10047D0A0, UIColor_ptr);
    isa = UIColor.init(argb:)(0xFF3333FF).super.isa;
    objc_msgSend(v11, "setContents:", isa);

    objc_msgSend(v10, "setBlendMode:", 4);
    return;
  }
  __break(1u);
}

id sub_100037084()
{
  char *v0;
  char *v1;
  id v2;
  NSString v3;
  uint64_t v4;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setName:", v3);

  v4 = (*(uint64_t (**)(void))(**(_QWORD **)&v1[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger_detector] + 544))();
  objc_msgSend(v2, "setHidden:", (*(_QWORD *)LocalPlaneDetector.DebugOptions.showPoints.unsafeMutableAddressor() & ~v4) != 0);
  objc_msgSend(v1, "addChildNode:", v2);
  return v2;
}

id sub_100037150()
{
  char *v0;
  char *v1;
  id v2;
  NSString v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v11[14];
  unsigned __int8 v12;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setName:", v3);

  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger_detector];
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 544))();
  if ((*(_QWORD *)LocalPlaneDetector.DebugOptions.showPlane.unsafeMutableAddressor() & ~v5) != 0)
  {
    v6 = 1;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 496))(v11);
    v6 = v12;
  }
  objc_msgSend(v2, "setHidden:", v6);
  v7 = objc_msgSend((id)objc_opt_self(UIColor), "yellowColor");
  sub_100038000((uint64_t)v7, 0.0005);
  v9 = v8;

  objc_msgSend(v2, "addChildNode:", v9);
  objc_msgSend(v1, "addChildNode:", v2);
  return v2;
}

uint64_t sub_100037294()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v1 = OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___pointPool;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___pointPool])
  {
    v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___pointPool];
  }
  else
  {
    v3 = v0;
    v4 = swift_allocObject(&unk_10043FE88, 24, 7);
    *(_QWORD *)(v4 + 16) = v3;
    v5 = swift_allocObject(&unk_10043FEB0, 32, 7);
    *(_QWORD *)(v5 + 16) = sub_100038E98;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_10000EDC8(&qword_10047BDD0);
    swift_allocObject(v6, 64, 7);
    v7 = v3;
    v2 = ObjectPool.init(allocator:deallocator:synchronized:)(sub_100038EC4, v5, 0, 0, 0);
    *(_QWORD *)&v3[v1] = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

id sub_100037370()
{
  id v0;
  id v1;
  NSString v2;

  v0 = objc_msgSend((id)objc_opt_self(SCNSphere), "sphereWithRadius:", 0.001);
  v1 = objc_msgSend((id)objc_opt_self(SCNNode), "nodeWithGeometry:", v0);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setName:", v2);

  return v1;
}

id sub_100037440(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  double v16;
  id v17;
  NSString v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  char *v24;
  objc_class *ObjectType;
  objc_super v27;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType(v4);
  v7 = OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeNode;
  *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeNode] = 0;
  v8 = OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___intersectionNode;
  *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___intersectionNode] = 0;
  v9 = OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeGeometry;
  *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeGeometry] = 0;
  v10 = OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___pointContainerNode;
  *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___pointContainerNode] = 0;
  v11 = OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___mlNode;
  *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___mlNode] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___pointPool] = 0;
  v12 = objc_opt_self(ARSCNView);
  v13 = swift_dynamicCastObjCClass(a1, v12);
  if (v13)
  {
    v14 = (void *)v13;
    *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger_sceneView] = v13;
    *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger_detector] = a3;
    v27.receiver = v4;
    v27.super_class = ObjectType;
    v15 = a1;
    *(_QWORD *)&v16 = swift_retain().n128_u64[0];
    v17 = objc_msgSendSuper2(&v27, "init", v16);
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v17, "setName:", v18);

    v19 = (void *)objc_opt_self(SCNTransaction);
    objc_msgSend(v19, "begin");
    v20 = objc_msgSend(v14, "scene");
    v21 = objc_msgSend(v20, "rootNode");

    objc_msgSend(v21, "addChildNode:", v17);
    objc_msgSend(v19, "commit");
    sub_100018148(0, (unint64_t *)&unk_100481BB0, NSUserDefaults_ptr);
    v22 = v17;
    v23 = *(_QWORD *)LocalPlaneDetector.DebugOptions.keys.unsafeMutableAddressor();
    swift_bridgeObjectRetain(v23);
    static NSUserDefaults.observe(observer:keys:)(v22, v23);
    swift_bridgeObjectRelease(v23);

    swift_release();
  }
  else
  {
    v24 = v4;

    swift_release();
    swift_release();
    swift_deallocPartialClassInstance(v24, ObjectType, 72, 7);
    return 0;
  }
  return v22;
}

void sub_1000377E4()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _DWORD *v8;
  int32x2_t v9;
  NSString v10;
  uint64_t v11;
  _QWORD *v12;
  float v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  __n128 v24;
  double v25;
  double v26;
  id v27;
  id v28;
  unint64_t v29;
  int v30;
  _QWORD v31[16];
  _BYTE v32[32];
  __int32 v33;
  char v34;

  v1 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeNode, (uint64_t (*)(void))sub_100036694);
  v2 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v1, "childNodeWithName:recursively:", v2, 0);

  if (!v27)
    return;
  v3 = objc_msgSend(v27, "geometry");
  if (!v3)
  {
LABEL_7:

    return;
  }
  v4 = v3;
  v5 = objc_opt_self(SCNText);
  v6 = swift_dynamicCastObjCClass(v4, v5);
  if (!v6)
  {

    goto LABEL_7;
  }
  v7 = (void *)v6;
  v8 = *(_DWORD **)(v0 + OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger_detector);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v8 + 496))(v31);
  sub_100012C58((uint64_t)v31, (uint64_t)v32, &qword_10047D0A8);
  if ((v34 & 1) != 0)
    v9.i32[0] = v8[6];
  else
    v9.i32[0] = v33;
  *(float *)v9.i32 = *(float *)v9.i32 / 2.5;
  objc_msgSend(v27, "setSimdScale:", *(double *)vdupq_lane_s32(v9, 0).i64, v27);
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setString:", v10);

  v11 = sub_100018148(0, &qword_10047BCE8, SCNNode_ptr);
  v12 = SCNBoundingVolume.boundingBox.getter(&v29, v11);
  v13 = SCNNode.boundingSize.getter(v12) * -0.5;
  objc_msgSend(v28, "position");
  *(float *)&v14 = v13;
  objc_msgSend(v28, "setPosition:", v14);
  objc_msgSend(v28, "position");
  objc_msgSend(v28, "setPosition:");
  objc_msgSend(v28, "scale");
  v16 = v15;
  v18 = v17;
  v20 = v19;
  objc_msgSend(v28, "position");
  v29 = __PAIR64__(v22, v21);
  v30 = v23;
  v24 = *= infix(_:_:)(&v29, v16, v18, v20);
  LODWORD(v25) = HIDWORD(v29);
  v24.n128_u32[0] = v29;
  LODWORD(v26) = v30;
  objc_msgSend(v28, "setPosition:", v24.n128_f64[0], v25, v26);

}

double sub_100037A68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  BOOL v21;
  float v22;
  float v23;
  char **v24;
  uint64_t v25;
  double v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  double v39;
  __int128 v40;
  __int128 v41;
  id v42;

  v4 = sub_100037294();
  v5 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___pointContainerNode, (uint64_t (*)(void))sub_100037084);
  v6 = objc_msgSend(v5, "childNodes");

  v7 = sub_100018148(0, &qword_10047BCE8, SCNNode_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 216))(v8);
  swift_release();
  swift_bridgeObjectRelease(v8);
  v9 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___pointContainerNode, (uint64_t (*)(void))sub_100037084);
  SCNNode.removeAllChildren()();

  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 16);
    v13 = a1 + 32;
    v14 = a2 + 32;
    v38 = a1;
    swift_bridgeObjectRetain(a1);
    v15 = 0;
    do
    {
      v17 = *(_OWORD *)(v13 + 16 * v15);
      v39 = *(double *)&v17;
      if (v12)
      {
        v18 = 0;
LABEL_9:
        v19 = 0;
        v20 = *(_OWORD *)(v14 + 16 * v18);
        v21 = 1;
        while (1)
        {
          while (!v21)
          {
            if (v19 == 2)
            {
LABEL_8:
              if (++v18 == v12)
                goto LABEL_15;
              goto LABEL_9;
            }
            v21 = 0;
            ++v19;
          }
          v40 = v20;
          v22 = *(float *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
          v41 = v17;
          v23 = *(float *)((unint64_t)&v41 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
          v21 = v22 == v23;
          if (v19 == 2)
            break;
          ++v19;
        }
        if (v22 != v23)
          goto LABEL_8;
        v24 = &selRef_greenColor;
      }
      else
      {
LABEL_15:
        v24 = &selRef_redColor;
      }
      v25 = sub_100037294();
      (*(void (**)(id *__return_ptr))(*(_QWORD *)v25 + 200))(&v42);
      *(_QWORD *)&v26 = swift_release().n128_u64[0];
      v27 = v42;
      v28 = objc_msgSend(v42, "geometry", v26);
      if (v28)
      {
        v29 = v28;
        v30 = objc_opt_self(SCNSphere);
        v31 = (void *)swift_dynamicCastObjCClass(v29, v30);
        if (v31)
        {
          v32 = objc_msgSend(v31, "firstMaterial");
          if (v32)
          {
            v33 = v32;
            v34 = v11;
            v35 = v13;
            v36 = objc_msgSend(v32, "diffuse");

            v37 = objc_msgSend((id)objc_opt_self(UIColor), *v24);
            objc_msgSend(v36, "setContents:", v37);

            v13 = v35;
            v11 = v34;

          }
        }

      }
      ++v15;
      objc_msgSend(v27, "setSimdPosition:", v39, v38);
      v16 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___pointContainerNode, (uint64_t (*)(void))sub_100037084);
      objc_msgSend(v16, "addChildNode:", v27);

    }
    while (v15 != v11);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v38).n128_u64[0];
  }
  return result;
}

uint64_t type metadata accessor for SCNLocalPlaneDebugger()
{
  return objc_opt_self(_TtC7Measure21SCNLocalPlaneDebugger);
}

id sub_100037E60@<X0>(void *a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  objc_class *v3;
  id v7;
  uint64_t v8;
  id result;

  v7 = objc_allocWithZone(v3);
  result = sub_100037440(a1, v8, a2);
  *a3 = result;
  return result;
}

void sub_100037EA8(__n128 a1, double a2, float a3, float a4, double a5, double a6, double a7, double a8)
{
  sub_1000385BC(a1, a3, a4, a5, a6, a7, a8);
}

void sub_100037EE0(char a1)
{
  id v2;

  v2 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeNode, (uint64_t (*)(void))sub_100036694);
  objc_msgSend(v2, "setHidden:", (a1 & 1) == 0);

}

void sub_100037F38(char a1, uint64_t a2)
{
  id v4;
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;

  v4 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___intersectionNode, (uint64_t (*)(void))sub_100036CE8);
  objc_msgSend(v4, "setHidden:", (a1 & 1) == 0);

  sub_100012C58(a2, (uint64_t)&v10, &qword_10047BBE0);
  if ((v14 & 1) == 0)
  {
    v8 = *(double *)&v12;
    v9 = *(double *)&v13;
    v6 = *(double *)&v10;
    v7 = *(double *)&v11;
    v5 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___intersectionNode, (uint64_t (*)(void))sub_100036CE8);
    objc_msgSend(v5, "setSimdWorldTransform:", v6, v7, v8, v9);

  }
}

void sub_100038000(uint64_t a1, double a2)
{
  id v3;
  id v4;
  NSString v5;
  id v6;
  double v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;

  v3 = objc_msgSend((id)objc_opt_self(SCNBox), "boxWithWidth:height:length:chamferRadius:", a2, a2, 0.1, 0.0);
  v4 = objc_msgSend((id)objc_opt_self(SCNNode), "nodeWithGeometry:", v3);

  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setName:", v5);

  objc_msgSend(v4, "position");
  objc_msgSend(v4, "setPosition:");
  v6 = objc_msgSend(v4, "geometry");
  if (!v6)
    goto LABEL_13;
  v8 = v6;
  v9 = objc_msgSend(v6, "materials");

  v10 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v14 = v11;
    else
      v14 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v15 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(v11);
    if (v15)
      goto LABEL_4;
LABEL_12:
    *(_QWORD *)&v7 = swift_bridgeObjectRelease(v11).n128_u64[0];
    goto LABEL_13;
  }
  if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_12;
LABEL_4:
  if ((v11 & 0xC000000000000001) != 0)
  {
    v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v11);
  }
  else
  {
    if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_28;
    }
    v12 = *(id *)(v11 + 32);
  }
  v13 = v12;
  objc_msgSend(v12, "setBlendMode:", 4, swift_bridgeObjectRelease(v11).n128_f64[0]);

LABEL_13:
  v16 = objc_msgSend(v4, "geometry", v7);
  if (!v16)
    return;
  v17 = v16;
  v18 = objc_msgSend(v16, "materials");

  v19 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

  if (!((unint64_t)v11 >> 62))
  {
    if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_16;
LABEL_24:
    swift_bridgeObjectRelease(v11);
    return;
  }
  if (v11 < 0)
    v23 = v11;
  else
    v23 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v11);
  v24 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v11);
  if (!v24)
    goto LABEL_24;
LABEL_16:
  if ((v11 & 0xC000000000000001) != 0)
  {
LABEL_28:
    v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v11);
    goto LABEL_19;
  }
  if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v20 = *(id *)(v11 + 32);
LABEL_19:
    v21 = v20;
    v22 = objc_msgSend(v20, "diffuse", swift_bridgeObjectRelease(v11).n128_f64[0]);

    objc_msgSend(v22, "setContents:", a1);
    return;
  }
  __break(1u);
}

void sub_100038330()
{
  char *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeNode] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___intersectionNode] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeGeometry] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___pointContainerNode] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___mlNode] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___pointPool] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/SCNLocalPlaneDebugger.swift", 35, 2, 27, 0);
  __break(1u);
}

void sub_1000383D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, _QWORD);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  id v18;
  _BOOL8 v19;
  id v20;
  _BYTE v21[32];
  uint64_t v22;

  if (a2)
  {
    v3 = v2;
    v6 = (_QWORD *)LocalPlaneDetector.DebugOptions.keyForFeature.unsafeMutableAddressor();
    v7 = *v6;
    if (*(_QWORD *)(*v6 + 16))
    {
      swift_bridgeObjectRetain(*v6);
      swift_bridgeObjectRetain(a2);
      v8 = sub_1000C80A8(a1, a2);
      if ((v9 & 1) == 0)
      {
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v7);
        return;
      }
      v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v7);
      sub_100018148(0, (unint64_t *)&unk_100481BB0, NSUserDefaults_ptr);
      v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger_detector);
      v22 = v10;
      v12 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 560))(v21);
      v14 = v13;
      v15 = sub_100038EEC();
      v16 = static NSUserDefaults.update<A>(_:key:feature:)(v14, a1, a2, &v22, &type metadata for LocalPlaneDetector.DebugOptions, v15);
      v17 = v12(v21, 0);
      if (*(_QWORD *)LocalPlaneDetector.DebugOptions.showPlane.unsafeMutableAddressor(v17) == v10)
      {
        v18 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeNode, (uint64_t (*)(void))sub_100036694);
        v19 = (v16 & 1) == 0;
        objc_msgSend(v18, "setHidden:", v19);

        v20 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___mlNode, (uint64_t (*)(void))sub_100037150);
        objc_msgSend(v20, "setHidden:", v19);
      }
      else
      {
        if (*(_QWORD *)LocalPlaneDetector.DebugOptions.showPoints.unsafeMutableAddressor() != v10)
          return;
        v20 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___pointContainerNode, (uint64_t (*)(void))sub_100037084);
        objc_msgSend(v20, "setHidden:", (v16 & 1) == 0);
      }

    }
  }
}

void sub_1000385BC(__n128 a1, float a2, float a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t (*v10)(void);
  uint64_t v11;
  __n128 v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  double v18;
  id v19;
  NSString v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  NSString v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  NSString v37;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  __int128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  __int128 v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  BOOL v61;
  float v62;
  float v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::tuple_actualPoints_OpaquePointer_bestPoints_OpaquePointer v70;
  id v71;
  NSString v72;
  id v73;
  id v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  id v79;
  id v80;
  id v81;
  NSString v82;
  id v83;
  void *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  __n128 v90;
  __n128 v92;
  __n128 v94;
  id v96[2];
  id v97[2];
  id v98;
  __int128 v99;
  __int128 v100;

  v10 = *(uint64_t (**)(void))(**(_QWORD **)(v7 + OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger_detector) + 544);
  v11 = v10();
  if ((*(_QWORD *)LocalPlaneDetector.DebugOptions.showPlane.unsafeMutableAddressor(v11) & ~v11) == 0)
  {
    v13 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeNode, (uint64_t (*)(void))sub_100036694);
    objc_msgSend(v13, "setSimdWorldTransform:", a4, a5, a6, a7);

    v14 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeNode, (uint64_t (*)(void))sub_100036694);
    objc_msgSend(v14, "setHidden:", 0);

    v15 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeGeometry, (uint64_t (*)(void))sub_100036EA8);
    objc_msgSend(v15, "setWidth:", (float)(a2 + a2));

    v16 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeGeometry, (uint64_t (*)(void))sub_100036EA8);
    objc_msgSend(v16, "setHeight:", (float)(a2 + a2));

    v17 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeGeometry, (uint64_t (*)(void))sub_100036EA8);
    v18 = a2;
    objc_msgSend(v17, "setCornerRadius:", a2);

    v19 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeNode, (uint64_t (*)(void))sub_100036694);
    v20 = String._bridgeToObjectiveC()();
    v21 = objc_msgSend(v19, "childNodeWithName:recursively:", v20, 0);

    if (v21)
    {
      v22 = objc_msgSend(v21, "geometry");
      if (v22)
      {
        v23 = v22;
        v24 = objc_opt_self(SCNBox);
        v25 = (void *)swift_dynamicCastObjCClass(v23, v24);
        if (v25)
        {
          v26 = v25;
          objc_msgSend(v25, "setLength:", v18 + v18);
          objc_msgSend(v26, "length");
          objc_msgSend(v21, "position");
          objc_msgSend(v21, "setPosition:");
          v27 = v21;
          v21 = v23;
        }
        else
        {
          v27 = v23;
        }

      }
    }
    v28 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeNode, (uint64_t (*)(void))sub_100036694);
    v29 = String._bridgeToObjectiveC()();
    v30 = objc_msgSend(v28, "childNodeWithName:recursively:", v29, 0);

    if (v30)
    {
      v31 = objc_msgSend(v30, "geometry");
      if (v31)
      {
        v32 = v31;
        v33 = objc_opt_self(SCNPlane);
        v34 = (void *)swift_dynamicCastObjCClass(v32, v33);
        if (v34)
        {
          objc_msgSend(v34, "setWidth:", v18 + v18);
          v35 = v30;
          v30 = v32;
        }
        else
        {
          v35 = v32;
        }

      }
    }
    v36 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeNode, (uint64_t (*)(void))sub_100036694);
    v37 = String._bridgeToObjectiveC()();
    v38 = objc_msgSend(v36, "childNodeWithName:recursively:", v37, 0);

    if (v38)
    {
      v40 = objc_msgSend(v38, "geometry");
      if (v40)
      {
        v41 = v40;
        v42 = objc_opt_self(SCNPlane);
        v43 = (void *)swift_dynamicCastObjCClass(v41, v42);
        if (v43)
        {
          objc_msgSend(v43, "setHeight:", v18 + v18);
          v44 = v38;
          v38 = v41;
        }
        else
        {
          v44 = v41;
        }

      }
    }
    MeasureCore.shared.unsafeMutableAddressor(v39);
    swift_retain();
    v45 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___planeNode, (uint64_t (*)(void))sub_100036694);
    objc_msgSend(v45, "simdWorldTransform");
    v94 = v47;
    *(_OWORD *)v96 = v46;
    v90 = v49;
    v92 = v48;

    v50 = simd_float4x4.position.getter(*(__n128 *)v96, v94, v92, v90);
    v51 = MeasureCore.mlNormal(of:)(v50);
    v53 = v52;
    v55 = v54;
    swift_release();
    if ((v55 & 1) != 0)
      goto LABEL_31;
    *(_QWORD *)&v57 = v51;
    *((_QWORD *)&v57 + 1) = v53;
    *(_OWORD *)v97 = v57;
    v58 = (__int128 *)SIMD3<>.zero.unsafeMutableAddressor(v56);
    v59 = 0;
    v60 = *v58;
    while (1)
    {
      v99 = *(_OWORD *)v97;
      v62 = *(float *)((unint64_t)&v99 & 0xFFFFFFFFFFFFFFF3 | (4 * (v59 & 3)));
      v100 = v60;
      v63 = *(float *)((unint64_t)&v100 & 0xFFFFFFFFFFFFFFF3 | (4 * (v59 & 3)));
      v61 = v62 == v63;
      if (v59 == 2)
        break;
      while (1)
      {
        ++v59;
        if (v61)
          break;
        if (v59 == 2)
          goto LABEL_40;
        v61 = 0;
      }
    }
    if (v62 == v63)
    {
LABEL_31:
      v64 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___mlNode, (uint64_t (*)(void))sub_100037150);
      objc_msgSend(v64, "setHidden:", 1);
    }
    else
    {
LABEL_40:
      v79 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___mlNode, (uint64_t (*)(void))sub_100037150);
      objc_msgSend(v79, "setSimdWorldTransform:", static simd_float4x4.make(position:normalizedForward:)(a1, *(__n128 *)v97));

      v80 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___mlNode, (uint64_t (*)(void))sub_100037150);
      objc_msgSend(v80, "setHidden:", 0);

      v81 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___mlNode, (uint64_t (*)(void))sub_100037150);
      v82 = String._bridgeToObjectiveC()();
      v64 = objc_msgSend(v81, "childNodeWithName:recursively:", v82, 0);

      if (!v64)
        goto LABEL_33;
      v83 = objc_msgSend(v64, "geometry");
      if (v83)
      {
        v84 = v83;
        v85 = objc_opt_self(SCNBox);
        v86 = (void *)swift_dynamicCastObjCClass(v84, v85);
        if (v86)
        {
          v87 = v86;
          objc_msgSend(v86, "setLength:", v18 + v18);
          objc_msgSend(v87, "length");
          objc_msgSend(v64, "position");
          objc_msgSend(v64, "setPosition:");

          v64 = v84;
        }
        else
        {

        }
      }
    }

LABEL_33:
    v65 = sub_10000EDC8((uint64_t *)&unk_10048A100);
    v66 = swift_allocObject(v65, 72, 7);
    *(_OWORD *)(v66 + 16) = xmmword_1003B0BD0;
    *(_QWORD *)(v66 + 56) = &type metadata for Float;
    *(_QWORD *)(v66 + 64) = &protocol witness table for Float;
    *(float *)(v66 + 32) = a3;
    String.init(format:_:)(1714564645, 0xE400000000000000, v66);
    v68 = v67;
    sub_1000377E4();
    v12 = swift_bridgeObjectRelease(v68);
  }
  v69 = ((uint64_t (*)(__n128))v10)(v12);
  if ((*(_QWORD *)LocalPlaneDetector.DebugOptions.showPoints.unsafeMutableAddressor() & ~v69) == 0)
  {
    v70 = LocalPlaneDetector.getPointsForDebug()();
    sub_100037A68((uint64_t)v70.actualPoints._rawValue, (uint64_t)v70.bestPoints._rawValue);
    swift_bridgeObjectRelease(v70.bestPoints._rawValue);
    swift_bridgeObjectRelease(v70.actualPoints._rawValue);
    v71 = sub_100013BFC(&OBJC_IVAR____TtC7Measure21SCNLocalPlaneDebugger____lazy_storage___intersectionNode, (uint64_t (*)(void))sub_100036CE8);
    v72 = String._bridgeToObjectiveC()();
    v98 = objc_msgSend(v71, "childNodeWithName:recursively:", v72, 0);

    if (v98)
    {
      v73 = objc_msgSend(v98, "geometry");
      if (v73)
      {
        v74 = v73;
        v75 = objc_opt_self(SCNBox);
        v76 = (void *)swift_dynamicCastObjCClass(v74, v75);
        if (v76)
        {
          v77 = v76;
          objc_msgSend(v76, "setLength:", a2 + a2);
          objc_msgSend(v77, "length");
          objc_msgSend(v98, "position");
          objc_msgSend(v98, "setPosition:");
          v78 = v98;
          v98 = v74;
        }
        else
        {
          v78 = v74;
        }

      }
    }
  }
}

uint64_t sub_100038E74()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100038E98()
{
  return sub_100037370();
}

uint64_t sub_100038EA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100038EC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

unint64_t sub_100038EEC()
{
  unint64_t result;

  result = qword_10047D0B0;
  if (!qword_10047D0B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LocalPlaneDetector.DebugOptions, &type metadata for LocalPlaneDetector.DebugOptions);
    atomic_store(result, (unint64_t *)&qword_10047D0B0);
  }
  return result;
}

id sub_100038F30(void *a1, void *a2, double a3, double a4, double a5, double a6, double a7)
{
  char *v7;
  id v15;
  id v16;
  id v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  unint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  double v35;
  id v36;
  objc_super v38;

  *(_QWORD *)&v7[OBJC_IVAR____TtC7Measure31ButtonWithCustomBackgroundColor_backgroundColorNormal] = a1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC7Measure31ButtonWithCustomBackgroundColor_backgroundColorHighlighted] = a2;
  *(double *)&v7[OBJC_IVAR____TtC7Measure31ButtonWithCustomBackgroundColor_radius] = a7;
  v38.receiver = v7;
  v38.super_class = (Class)type metadata accessor for ButtonWithCustomBackgroundColor();
  v15 = a1;
  v16 = a2;
  v17 = objc_msgSendSuper2(&v38, "initWithFrame:", a3, a4, a5, a6);
  objc_msgSend(v17, "setBackgroundColor:", v15, v38.receiver, v38.super_class);
  objc_msgSend(v17, "bounds");
  v22 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:", 12, v18, v19, v20, v21, a7, a7);
  v23 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  objc_msgSend(v17, "bounds");
  objc_msgSend(v23, "setFrame:");
  v24 = objc_msgSend(v22, "CGPath");
  objc_msgSend(v23, "setPath:", v24);

  v25 = objc_msgSend(v17, "layer");
  objc_msgSend(v25, "setMask:", v23);

  v26 = objc_msgSend(v17, "layer");
  objc_msgSend(v26, "setCornerCurve:", kCACornerCurveContinuous);

  v27 = sub_10000F0D8();
  if ((static UIDevice.isIPhone()(v27) & 1) != 0
    && objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    objc_msgSend(v17, "setContentHorizontalAlignment:", 4);
    objc_msgSend(v17, "setContentEdgeInsets:", 0.0, 16.0, 0.0, 16.0);
    v28 = objc_msgSend(v17, "layer");
    objc_msgSend(v28, "setShadowOffset:", 0.0, 4.0);

    v29 = objc_msgSend(v17, "layer");
    objc_msgSend(v29, "setShadowPathIsBounds:", 1);

    v30 = objc_msgSend(v17, "layer");
    if (qword_10047A7B0 != -1)
      swift_once(&qword_10047A7B0, sub_10000F088);
    objc_msgSend(v30, "setShadowRadius:", *(double *)&qword_1004AF100);

    v31 = objc_msgSend(v17, "layer");
    v32 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
    v33 = objc_msgSend(v32, "CGColor");

    objc_msgSend(v31, "setShadowColor:", v33);
    v34 = objc_msgSend(v17, "layer");
    LODWORD(v35) = 1039516303;
    objc_msgSend(v34, "setShadowOpacity:", v35);

    v36 = objc_msgSend(v17, "layer");
    objc_msgSend(v36, "setCornerCurve:", kCACornerCurveContinuous);

  }
  return v17;
}

void sub_100039484()
{
  char *v0;
  void *v1;
  unint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  id v8;
  id v9;
  id v10;
  id v11;
  objc_super v12;

  v1 = v0;
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for ButtonWithCustomBackgroundColor();
  objc_msgSendSuper2(&v12, "layoutSubviews");
  v2 = sub_10000F0D8();
  if ((static UIDevice.isIPhone()(v2) & 1) != 0
    && objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    sub_10003966C(*(double *)&v0[OBJC_IVAR____TtC7Measure31ButtonWithCustomBackgroundColor_radius]);
  }
  else
  {
    v3 = *(double *)&v0[OBJC_IVAR____TtC7Measure31ButtonWithCustomBackgroundColor_radius];
    objc_msgSend(v0, "bounds");
    v8 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:", 12, v4, v5, v6, v7, v3, v3);
    v9 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
    objc_msgSend(v1, "bounds");
    objc_msgSend(v9, "setFrame:");
    v10 = objc_msgSend(v8, "CGPath");
    objc_msgSend(v9, "setPath:", v10);

    v11 = objc_msgSend(v1, "layer");
    objc_msgSend(v11, "setMask:", v9);

  }
}

void sub_10003966C(double a1)
{
  void *v1;
  double v3;
  double v4;
  double v5;
  double v6;
  id v7;
  id v8;
  id v9;
  id v10;

  objc_msgSend(v1, "bounds");
  v7 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithRoundedRect:cornerRadius:", v3, v4, v5, v6, a1);
  v8 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  objc_msgSend(v1, "bounds");
  objc_msgSend(v8, "setFrame:");
  v9 = objc_msgSend(v7, "CGPath");
  objc_msgSend(v8, "setPath:", v9);

  v10 = objc_msgSend(v1, "layer");
  objc_msgSend(v10, "setMask:", v8);

}

id sub_1000397D8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ButtonWithCustomBackgroundColor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ButtonWithCustomBackgroundColor()
{
  return objc_opt_self(_TtC7Measure31ButtonWithCustomBackgroundColor);
}

uint64_t getEnumTagSinglePayload for CurrentPlatterOnScreenState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CurrentPlatterOnScreenState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CurrentPlatterOnScreenState()
{
  return &type metadata for CurrentPlatterOnScreenState;
}

uint64_t sub_1000398CC()
{
  uint64_t result;

  result = Contexts.UIKit.init()();
  qword_1004AF1A8 = result;
  return result;
}

id sub_1000398E8@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A860 != -1)
    swift_once(&qword_10047A860, sub_1000398CC);
  v2 = (void *)qword_1004AF1A8;
  *a1 = qword_1004AF1A8;
  return v2;
}

unint64_t sub_10003993C(uint64_t a1)
{
  unint64_t result;

  result = sub_100039960();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100039960()
{
  unint64_t result;

  result = qword_10047D120;
  if (!qword_10047D120)
  {
    result = swift_getWitnessTable(&unk_1003B20EC, &type metadata for CurrentPlatterOnScreenState);
    atomic_store(result, (unint64_t *)&qword_10047D120);
  }
  return result;
}

BOOL sub_1000399A4(uint64_t a1, uint64_t a2)
{
  void *Strong;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  char v8;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1, a2);
  v5 = swift_unknownObjectWeakLoadStrong(a2, v4);
  v6 = (void *)v5;
  if (Strong)
  {
    if (v5)
    {
      type metadata accessor for CardContainerView();
      v7 = Strong;
      v8 = static NSObject.== infix(_:_:)(v7, v6);

      return (v8 & 1) != 0;
    }
    v6 = Strong;
  }
  else if (!v5)
  {
    return 1;
  }

  return 0;
}

id sub_100039AB8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BlurredButton();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BlurredButton()
{
  return objc_opt_self(_TtC7Measure13BlurredButton);
}

void sub_100039B08(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  double v16;
  id v17;
  id v18;
  NSString v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  CGFloat v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  CGRect v43;

  v42 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", UIContentSizeCategoryLarge);
  v41 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:compatibleWithTraitCollection:", a8, v42);
  objc_msgSend(v41, "pointSize");
  v17 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 7, 3, v16);
  swift_bridgeObjectRetain(a7);
  v18 = v17;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a7);
  v20 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v19, v18);

  v21 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v40 = v20;
  objc_msgSend(v21, "setImage:", v20);
  objc_msgSend(v21, "sizeToFit");
  if (qword_10047ADE8 != -1)
    swift_once(&qword_10047ADE8, sub_1001959EC);
  objc_msgSend(v21, "setTintColor:", qword_1004AF8D0, a1);
  v22 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v23 = objc_msgSend(v22, "preferredContentSizeCategory");

  LOBYTE(v22) = UIContentSizeCategory.isAccessibilityCategory.getter(v23);
  if ((v22 & 1) != 0 && (a9 & 1) != 0)
  {
    objc_msgSend(v21, "setAdjustsImageSizeForAccessibilityContentSizeCategory:", 0);
    objc_msgSend(v21, "setContentMode:", 1);
    v24 = v21;
    objc_msgSend(v24, "bounds");
    objc_msgSend(v24, "setBounds:");

  }
  v25 = (void *)objc_opt_self(UIBlurEffect);
  v26 = objc_msgSend(v25, "effectWithStyle:", 14);
  v27 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v26);

  v28 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v43.origin.x = a2;
  v43.origin.y = a3;
  v43.size.width = a4;
  v43.size.height = a5;
  v29 = CGRectGetWidth(v43) * 0.5;
  v30 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:", 1, v29, v29, v29, 0.0, 6.28318531);
  v31 = objc_msgSend(v30, "CGPath");
  objc_msgSend(v28, "setPath:", v31);

  objc_msgSend(v27, "setFrame:", a2, a3, a4, a5);
  objc_msgSend(v27, "setUserInteractionEnabled:", 0);
  v32 = objc_msgSend(v27, "layer");
  objc_msgSend(v32, "setMask:", v28);

  objc_msgSend(v38, "addSubview:", v27);
  v33 = objc_msgSend(v25, "effectWithStyle:", 12);
  v34 = objc_msgSend((id)objc_opt_self(UIVibrancyEffect), "effectForBlurEffect:style:", v33, 4);

  v35 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v34);
  objc_msgSend(v35, "setFrame:", a2, a3, a4, a5);
  v36 = objc_msgSend(v27, "contentView");
  objc_msgSend(v36, "addSubview:", v35);

  objc_msgSend(v21, "setCenter:", v29, v29);
  v39 = objc_msgSend(v35, "contentView");
  objc_msgSend(v39, "addSubview:", v21);

}

char *sub_10003A054()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  id v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  char *v13;
  objc_super v15;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_contentView;
  v4 = objc_allocWithZone((Class)UIImageView);
  v5 = v0;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "init");
  v6 = OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_backgroundColorView;
  *(_QWORD *)&v5[v6] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v7 = OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_shadowView;
  v8 = type metadata accessor for PlatterShadowView();
  *(_QWORD *)&v5[v7] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v8)), "init");
  v9 = OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_backdropView;
  *(_QWORD *)&v5[v9] = objc_msgSend(objc_allocWithZone((Class)_UIVisualEffectBackdropView), "init");
  v10 = OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_backgroundBlur;
  v11 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 9);
  v12 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v11);

  *(_QWORD *)&v5[v10] = v12;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_viewsToUpdate] = _swiftEmptyArrayStorage;

  v15.receiver = v5;
  v15.super_class = ObjectType;
  v13 = (char *)objc_msgSendSuper2(&v15, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_10003A24C();
  objc_msgSend(*(id *)&v13[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_shadowView], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(*(id *)&v13[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_backdropView], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(*(id *)&v13[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_contentView], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(*(id *)&v13[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_backgroundBlur], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(*(id *)&v13[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_backgroundColorView], "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  return v13;
}

void sub_10003A24C()
{
  char *v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  NSString v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];

  v1 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v0, "setBackgroundColor:", v1);

  v2 = objc_msgSend(v0, "layer");
  if (qword_10047A768 != -1)
    swift_once(&qword_10047A768, sub_10000EF38);
  objc_msgSend(v2, "setCornerRadius:", *(double *)&qword_1004AF0A0);

  v3 = objc_msgSend(v0, "layer");
  objc_msgSend(v3, "setCornerCurve:", kCACornerCurveContinuous);

  v4 = *(void **)&v0[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_contentView];
  objc_msgSend(v4, "setClipsToBounds:", 1);
  v5 = objc_msgSend(v4, "layer");
  objc_msgSend(v5, "setCornerRadius:", *(double *)&qword_1004AF0A0);

  v6 = objc_msgSend(v4, "layer");
  objc_msgSend(v6, "setCornerCurve:", kCACornerCurveContinuous);

  v7 = *(void **)&v0[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_backgroundBlur];
  objc_msgSend(v7, "setClipsToBounds:", 1);
  v8 = objc_msgSend(v7, "layer");
  objc_msgSend(v8, "setCornerRadius:", *(double *)&qword_1004AF0A0);

  v9 = objc_msgSend(v7, "layer");
  objc_msgSend(v9, "setCornerCurve:", kCACornerCurveContinuous);

  v10 = *(void **)&v0[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_backgroundColorView];
  objc_msgSend(v10, "setClipsToBounds:", 1);
  v11 = objc_msgSend(v10, "layer");
  objc_msgSend(v11, "setCornerRadius:", *(double *)&qword_1004AF0A0);

  v12 = objc_msgSend(v10, "layer");
  objc_msgSend(v12, "setCornerCurve:", kCACornerCurveContinuous);

  v13 = *(void **)&v0[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_backdropView];
  objc_msgSend(v13, "setRenderMode:", 1);
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "_setGroupName:", v14);

  objc_msgSend(v7, "_setCaptureView:", v13);
  if (qword_10047AE70 != -1)
    swift_once(&qword_10047AE70, sub_100195D4C);
  objc_msgSend(v10, "setBackgroundColor:", qword_1004AF968);
  objc_msgSend(v0, "addSubview:", v13);
  objc_msgSend(v0, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_shadowView]);
  objc_msgSend(v0, "addSubview:", v7);
  objc_msgSend(v0, "addSubview:", v10);
  objc_msgSend(v0, "addSubview:", v4);
  v15 = objc_msgSend(v0, "subviews");
  v16 = sub_10003ABF8();
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  if (!((unint64_t)v17 >> 62))
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v17);
    if (v18)
      goto LABEL_7;
LABEL_20:
    swift_bridgeObjectRelease_n(v17, 2);
    return;
  }
  if (v17 < 0)
    v27 = v17;
  else
    v27 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v17);
  v18 = _CocoaArrayWrapper.endIndex.getter(v27);
  if (!v18)
    goto LABEL_20;
LABEL_7:
  if (v18 >= 1)
  {
    v19 = 0;
    v20 = &v0[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_viewsToUpdate];
    do
    {
      if ((v17 & 0xC000000000000001) != 0)
        v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
      else
        v21 = *(id *)(v17 + 8 * v19 + 32);
      v22 = v21;
      swift_beginAccess(v20, v28, 33, 0);
      v23 = v22;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      v25 = *(_QWORD *)((*(_QWORD *)v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v24 = *(_QWORD *)((*(_QWORD *)v20 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v25 >= v24 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      ++v19;
      v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
      specialized Array._endMutation()(v26);
      swift_endAccess(v28);

    }
    while (v18 != v19);
    goto LABEL_20;
  }
  __break(1u);
}

void sub_10003A73C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  id v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  objc_super v20;

  v20.receiver = (id)v0;
  v20.super_class = (Class)swift_getObjectType(v0);
  objc_msgSendSuper2(&v20, "layoutSubviews");
  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_viewsToUpdate);
  swift_beginAccess(v0 + OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_viewsToUpdate, v19, 0, 0);
  v2 = *v1;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v11 = v2;
    else
      v11 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v2, 2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v11);
    if (!v3)
      goto LABEL_13;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v2, 2);
    if (!v3)
      goto LABEL_13;
  }
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_25;
  }
  v4 = 0;
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
    else
      v5 = *(id *)(v2 + 8 * v4 + 32);
    v6 = v5;
    ++v4;
    objc_msgSend((id)v0, "bounds");
    objc_msgSend(v6, "setFrame:");
    v7 = objc_msgSend(v6, "layer");
    v8 = objc_msgSend((id)v0, "layer");
    objc_msgSend(v8, "cornerRadius");
    v10 = v9;

    objc_msgSend(v7, "setCornerRadius:", v10);
  }
  while (v3 != v4);
LABEL_13:
  *(_QWORD *)&v12 = swift_bridgeObjectRelease_n(v2, 2).n128_u64[0];
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_contentView);
  v13 = objc_msgSend((id)v2, "subviews", v12);
  v14 = sub_10003ABF8();
  v0 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  if (!((unint64_t)v0 >> 62))
  {
    if (*(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_15;
LABEL_23:
    swift_bridgeObjectRelease(v0);
    return;
  }
  if (v0 < 0)
    v17 = v0;
  else
    v17 = v0 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v0);
  v18 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v0);
  if (!v18)
    goto LABEL_23;
LABEL_15:
  if ((v0 & 0xC000000000000001) != 0)
  {
LABEL_25:
    v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v0);
    goto LABEL_18;
  }
  if (*(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v15 = *(id *)(v0 + 32);
LABEL_18:
    v16 = v15;
    objc_msgSend((id)v2, "bounds", swift_bridgeObjectRelease(v0).n128_f64[0]);
    objc_msgSend(v16, "setFrame:");

    return;
  }
  __break(1u);
}

id sub_10003AA08(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  uint64_t i;
  id v10;
  void *v11;
  uint64_t v12;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_contentView);
  v4 = objc_msgSend(v3, "subviews");
  v5 = sub_10003ABF8();
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if (!((unint64_t)v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain(v6);
    if (v7)
      goto LABEL_3;
    return objc_msgSend(v3, "addSubview:", a1, swift_bridgeObjectRelease_n(v6, 2).n128_f64[0]);
  }
  if (v6 < 0)
    v12 = v6;
  else
    v12 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  result = (id)_CocoaArrayWrapper.endIndex.getter(v12);
  v7 = (uint64_t)result;
  if (!result)
    return objc_msgSend(v3, "addSubview:", a1, swift_bridgeObjectRelease_n(v6, 2).n128_f64[0]);
LABEL_3:
  if (v7 >= 1)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
      else
        v10 = *(id *)(v6 + 8 * i + 32);
      v11 = v10;
      objc_msgSend(v10, "removeFromSuperview");

    }
    return objc_msgSend(v3, "addSubview:", a1, swift_bridgeObjectRelease_n(v6, 2).n128_f64[0]);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PillToPlatterTransitionView()
{
  return objc_opt_self(_TtC7Measure27PillToPlatterTransitionView);
}

unint64_t sub_10003ABF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100481BC0;
  if (!qword_100481BC0)
  {
    v1 = objc_opt_self(UIView);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100481BC0);
  }
  return result;
}

void sub_10003AC34()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;

  v1 = OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_contentView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v2 = OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_backgroundColorView;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v3 = OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_shadowView;
  v4 = type metadata accessor for PlatterShadowView();
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4)), "init");
  v5 = OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_backdropView;
  *(_QWORD *)&v0[v5] = objc_msgSend(objc_allocWithZone((Class)_UIVisualEffectBackdropView), "init");
  v6 = OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_backgroundBlur;
  v7 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 9);
  v8 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v7);

  *(_QWORD *)&v0[v6] = v8;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_viewsToUpdate] = _swiftEmptyArrayStorage;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/PillToPlatterTransitionView.swift", 41, 2, 28, 0);
  __break(1u);
}

uint64_t getEnumTagSinglePayload for CaptureState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CaptureState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003AE78 + 4 * byte_1003B21A1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003AEAC + 4 * asc_1003B219C[v4]))();
}

uint64_t sub_10003AEAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003AEB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003AEBCLL);
  return result;
}

uint64_t sub_10003AEC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003AED0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10003AED4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003AEDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CaptureState()
{
  return &type metadata for CaptureState;
}

id sub_10003AEF8()
{
  id result;
  id v1;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  result = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (*((_QWORD *)&xmmword_1004AF258 + 1))
  {
    v1 = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
    qword_1004AF1B0 = Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10003AF5C@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A868 != -1)
    swift_once(&qword_10047A868, sub_10003AEF8);
  v2 = (void *)qword_1004AF1B0;
  *a1 = qword_1004AF1B0;
  return v2;
}

BOOL sub_10003AFAC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t sub_10003AFC4(uint64_t a1)
{
  unint64_t result;

  result = sub_10003AFE8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003AFE8()
{
  unint64_t result;

  result = qword_10047D1D0;
  if (!qword_10047D1D0)
  {
    result = swift_getWitnessTable(&unk_1003B21B4, &type metadata for CaptureState);
    atomic_store(result, (unint64_t *)&qword_10047D1D0);
  }
  return result;
}

void sub_10003B02C()
{
  uint64_t v0;

  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  sub_10003B050();
}

void sub_10003B050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, __n128);
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, __n128);
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, __n128);
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, __n128);
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, __n128);
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v1 = v0;
  v2 = sub_10000EDC8(&qword_10047E5E0);
  KeyPath = swift_getKeyPath(&unk_1003B22F8);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v4 = qword_1004AF890;
  v5 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v2 + 272);
  v6 = swift_retain();
  *(_QWORD *)(v1 + 64) = v5(KeyPath, v4, v6);
  v7 = swift_getKeyPath(&unk_1003B2320);
  v8 = sub_10000EDC8((uint64_t *)&unk_100486710);
  v9 = qword_1004AF890;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v8 + 272);
  v11 = swift_retain();
  *(_QWORD *)(v1 + 72) = v10(v7, v9, v11);
  v12 = sub_10000EDC8(&qword_10047ECF0);
  v13 = swift_getKeyPath(&unk_1003B2348);
  v14 = qword_1004AF890;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v12 + 272);
  v16 = swift_retain();
  *(_QWORD *)(v1 + 80) = v15(v13, v14, v16);
  v17 = sub_10000EDC8(&qword_10047D438);
  v18 = swift_getKeyPath(&unk_1003B2370);
  v19 = qword_1004AF890;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v17 + 272);
  v21 = swift_retain();
  *(_QWORD *)(v1 + 88) = v20(v18, v19, v21);
  v22 = sub_10000EDC8(&qword_10047D440);
  v23 = swift_getKeyPath(&unk_1003B2398);
  v24 = qword_1004AF890;
  v25 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v22 + 272);
  v26 = swift_retain();
  *(_QWORD *)(v1 + 96) = v25(v23, v24, v26);
  v27 = sub_10000EDC8(&qword_10047D448);
  v28 = swift_getKeyPath(&unk_1003B23C0);
  v29 = qword_1004AF890;
  v30 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v27 + 272);
  v31 = swift_retain();
  *(_QWORD *)(v1 + 104) = v30(v28, v29, v31);
  v32 = sub_10000EDC8(&qword_10047D450);
  v33 = swift_getKeyPath(&unk_1003B23E8);
  v34 = qword_1004AF890;
  v35 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v32 + 272);
  v36 = swift_retain();
  *(_QWORD *)(v1 + 112) = v35(v33, v34, v36);
  v37 = swift_getKeyPath(&unk_1003B2410);
  v38 = sub_10000EDC8((uint64_t *)&unk_10047E5D0);
  v39 = qword_1004AF890;
  v40 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v38 + 272);
  v41 = swift_retain();
  *(_QWORD *)(v1 + 120) = v40(v37, v39, v41);
  v42 = swift_getKeyPath(&unk_1003B2438);
  v43 = sub_10000EDC8(&qword_10047D458);
  v44 = qword_1004AF890;
  v45 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v43 + 272);
  v46 = swift_retain();
  *(_QWORD *)(v1 + 128) = v45(v42, v44, v46);
  v47 = sub_10000EDC8(&qword_10047D460);
  v48 = swift_getKeyPath(&unk_1003B2460);
  v49 = qword_1004AF890;
  v50 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v47 + 272);
  v51 = swift_retain();
  *(_QWORD *)(v1 + 136) = v50(v48, v49, v51);
  v52 = swift_getKeyPath(&unk_1003B2488);
  v53 = sub_10000EDC8(&qword_10047D468);
  v54 = qword_1004AF890;
  v55 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v53 + 272);
  v56 = swift_retain();
  *(_QWORD *)(v1 + 144) = v55(v52, v54, v56);
  *(_QWORD *)(v1 + 160) = _swiftEmptyArrayStorage;
  *(_DWORD *)(v1 + 168) = 0x1000000;
  *(_QWORD *)(v1 + 176) = 0;
  *(_BYTE *)(v1 + 184) = 0;
  v57 = v1 + qword_10047D1D8;
  v58 = type metadata accessor for ARCamera.TrackingState(0);
  v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 1, 1, v58);
  *(_QWORD *)(v1 + qword_10047D1E0) = 0;
  *(_QWORD *)(v1 + qword_10047D1E8) = 0;
  *(_BYTE *)(v1 + qword_10047D1F0) = 0;
  *(_BYTE *)(v1 + qword_10047D1F8) = 0;
  *(_QWORD *)(v1 + qword_10047D200) = 0;
  *(_BYTE *)(v1 + qword_10047D208) = 0;
  *(_BYTE *)(v1 + qword_10047D210) = 1;
  v60 = qword_10047D218;
  *(double *)(v1 + v60) = static Date.timeIntervalSinceReferenceDate.getter(v59);
  v61 = qword_10047D220;
  *(double *)(v1 + v61) = static Date.timeIntervalSinceReferenceDate.getter(v62);
  swift_release();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/CoachingController.swift", 32, 2, 95, 0);
  __break(1u);
}

double sub_10003B47C()
{
  uint64_t v0;
  double result;

  swift_retain();
  StateValue.ifUpdated(_:)(sub_10003E4A8, v0);
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_10003E4B0, v0);
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_10003E4B8, v0);
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_10003E4C0, v0);
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_10003E4C8, v0);
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_10003E4E0, v0);
  swift_release();
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    swift_retain();
    StateValue.ifUpdated(_:)(sub_10003E4E8, v0);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_10003B5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t result;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_BYTE *, uint64_t, uint64_t);
  int v19;
  _BYTE v20[24];
  _BYTE v21[24];

  v4 = sub_10000EDC8(&qword_10047C2C8);
  v5 = __chkstk_darwin(v4);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __chkstk_darwin(v5);
  v10 = &v20[-v9];
  result = __chkstk_darwin(v8);
  v13 = &v20[-v12];
  v14 = *(_BYTE *)(a1 + 4);
  *(_BYTE *)(a2 + 184) = v14;
  if ((v14 & 1) == 0)
  {
    v15 = a2 + qword_10047D1D8;
    swift_beginAccess(a2 + qword_10047D1D8, v21, 0, 0);
    sub_100025934(v15, (uint64_t)v13);
    v16 = type metadata accessor for ARCamera.TrackingState(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48);
    v19 = v18(v13, 1, v16);
    result = sub_10002597C((uint64_t)v13);
    if (v19 != 1)
    {
      sub_100025934(v15, (uint64_t)v10);
      result = v18(v10, 1, v16);
      if ((_DWORD)result == 1)
      {
        __break(1u);
      }
      else
      {
        sub_10003E4F0((uint64_t)v10, (uint64_t)v7);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v7, 0, 1, v16);
        swift_beginAccess(v15, v20, 33, 0);
        sub_10003E534((uint64_t)v7, v15);
        swift_endAccess(v20);
        sub_10003D248();
        return sub_10003E57C((uint64_t)v10);
      }
    }
  }
  return result;
}

void sub_10003B760(const void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  Swift::String v12;
  double v13;
  float v14;
  void *object;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  NSString v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  void (*v33)(uint64_t *__return_ptr, __n128);
  __n128 v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  _BYTE v41[512];

  v37 = a2;
  v3 = sub_10000EDC8(&qword_10047C2C8);
  __chkstk_darwin(v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ARCamera.TrackingState(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v41, a1, sizeof(v41));
  v10 = (void *)sub_10008F8B8();
  v11 = objc_msgSend(v10, "lightEstimate");

  if (qword_10047AA80 != -1)
    swift_once(&qword_10047AA80, sub_1000E1484);
  v40._countAndFlagsBits = 0;
  v40._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(19);
  v12._object = (void *)0x80000001003D9BE0;
  v12._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v12);
  if (v11)
  {
    objc_msgSend(v11, "ambientIntensity");
    v14 = v13;
  }
  else
  {
    v14 = -1.0;
  }
  Float.write<A>(to:)(&v40, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v14);
  object = v40._object;
  Log.debug(_:isPrivate:)(v40, 0);
  swift_bridgeObjectRelease(object);
  v16 = v37;
  v17 = *(void **)(v37 + qword_10047D1E0);
  *(_QWORD *)(v37 + qword_10047D1E0) = v11;
  v18 = v11;

  v19 = v16 + qword_10047D1D8;
  swift_beginAccess(v16 + qword_10047D1D8, &v40, 0, 0);
  sub_100025934(v19, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10002597C((uint64_t)v5);
    goto LABEL_26;
  }
  sub_10003E5B8((uint64_t)v5, (uint64_t)v9);
  v20 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v21 = *(_QWORD *)(Defaults.showLightIntensityDebugInfo.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v21);
  v22 = String._bridgeToObjectiveC()();
  LOBYTE(v21) = objc_msgSend(v20, "BOOLForKey:", v22, swift_bridgeObjectRelease(v21).n128_f64[0]);

  if ((v21 & 1) == 0)
  {
    sub_10003E57C((uint64_t)v9);
    goto LABEL_26;
  }
  v36 = v18;
  swift_beginAccess(v16 + 160, &v38, 0, 0);
  v23 = *(_QWORD *)(v16 + 160);
  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0)
      v32 = *(_QWORD *)(v16 + 160);
    else
      v32 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v16 + 160));
    v24 = _CocoaArrayWrapper.endIndex.getter(v32);
    if (v24)
      goto LABEL_11;
  }
  else
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v16 + 160));
    if (v24)
    {
LABEL_11:
      if (v24 < 1)
      {
        __break(1u);
        JUMPOUT(0x10003BB9CLL);
      }
      for (i = 0; i != v24; ++i)
      {
        if ((v23 & 0xC000000000000001) != 0)
        {
          v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v23);
        }
        else
        {
          v27 = *(_QWORD *)(v23 + 8 * i + 32);
          swift_retain();
        }
        Strong = swift_unknownObjectWeakLoadStrong(v27 + 16, v26);
        if (Strong)
        {
          v29 = Strong;
          v30 = *(_QWORD *)(v27 + 24);
          ObjectType = swift_getObjectType(Strong);
          (*(void (**)(char *, id, uint64_t, uint64_t))(v30 + 144))(v9, v11, ObjectType, v30);
          swift_release();
          swift_unknownObjectRelease(v29);
        }
        else
        {
          swift_release();
        }
      }
    }
  }
  swift_bridgeObjectRelease(v23);
  sub_10003E57C((uint64_t)v9);
  v18 = v36;
  v16 = v37;
LABEL_26:
  sub_10003D248();

  v33 = *(void (**)(uint64_t *__return_ptr, __n128))(**(_QWORD **)(v16 + 72) + 144);
  v34 = swift_retain();
  v33(&v39, v34);
  swift_release();
  __asm { BR              X10 }
}

uint64_t sub_10003BBAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[24];

  v4 = sub_10000EDC8(&qword_10047C2C8);
  __chkstk_darwin(v4);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for SessionState(0);
  sub_10003E4F0(a1 + *(int *)(v7 + 20), (uint64_t)v6);
  v8 = type metadata accessor for ARCamera.TrackingState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 0, 1, v8);
  v9 = a2 + qword_10047D1D8;
  swift_beginAccess(a2 + qword_10047D1D8, v12, 33, 0);
  sub_10003E534((uint64_t)v6, v9);
  swift_endAccess(v12);
  return sub_10003D248();
}

void sub_10003BC88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_OWORD *__return_ptr, __n128);
  __n128 v26;
  int v27;
  BOOL v28;
  void (*v29)(_OWORD *__return_ptr, __n128);
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  void (*v43)(_OWORD *__return_ptr, __n128);
  __n128 v44;
  void (*v45)(_OWORD *__return_ptr, __n128);
  __n128 v46;
  char v47;
  void (*v48)(_OWORD *__return_ptr, __n128);
  __n128 v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  NSString v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_OWORD *__return_ptr, __n128);
  __n128 v65;
  uint64_t v66;
  uint64_t k;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t mm;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t kk;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 v91;
  uint64_t jj;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(_OWORD *__return_ptr, __n128);
  __n128 v100;
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  id v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t m;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t ii;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t n;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  BOOL v147;
  int v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _OWORD __src[32];
  _OWORD __dst[32];
  char v154[32];

  v4 = qword_10047D210;
  *(_BYTE *)(v1 + qword_10047D210) = a1 == 0;
  if (*(_BYTE *)(v1 + 184) == 1)
  {
    swift_beginAccess(v1 + 160, __dst, 0, 0);
    v5 = *(_QWORD *)(v1 + 160);
    if ((unint64_t)v5 >> 62)
    {
      if (v5 < 0)
        v22 = *(_QWORD *)(v1 + 160);
      else
        v22 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = _CocoaArrayWrapper.endIndex.getter(v22);
      if (!v6)
        goto LABEL_218;
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v1 + 160));
      if (!v6)
        goto LABEL_218;
    }
    if (v6 >= 1)
    {
      for (i = 0; i != v6; ++i)
      {
        if ((v5 & 0xC000000000000001) != 0)
        {
          v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
        }
        else
        {
          v12 = *(_QWORD *)(v5 + 8 * i + 32);
          swift_retain();
        }
        Strong = swift_unknownObjectWeakLoadStrong(v12 + 16, v11);
        if (Strong)
        {
          v8 = Strong;
          v9 = *(_QWORD *)(v12 + 24);
          ObjectType = swift_getObjectType(Strong);
          (*(void (**)(uint64_t, uint64_t))(v9 + 48))(ObjectType, v9);
          swift_release();
          swift_unknownObjectRelease(v8);
        }
        else
        {
          swift_release();
        }
      }
      goto LABEL_218;
    }
    __break(1u);
    goto LABEL_31;
  }
  if ((*(_BYTE *)(v1 + 170) & 1) != 0)
    return;
  v3 = a1;
  v149 = v4;
  v150 = (uint64_t *)(v1 + 160);
  swift_beginAccess(v1 + 160, v154, 0, 0);
  v2 = *(_QWORD *)(v1 + 160);
  v151 = v1;
  if ((unint64_t)v2 >> 62)
  {
LABEL_31:
    if (v2 < 0)
      v23 = v2;
    else
      v23 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v14 = _CocoaArrayWrapper.endIndex.getter(v23);
    if (!v14)
      goto LABEL_35;
    goto LABEL_16;
  }
  v14 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v2);
  if (!v14)
    goto LABEL_35;
LABEL_16:
  if (v14 < 1)
    goto LABEL_192;
  for (j = 0; j != v14; ++j)
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(j, v2);
    }
    else
    {
      v20 = *(_QWORD *)(v2 + 8 * j + 32);
      swift_retain();
    }
    v21 = swift_unknownObjectWeakLoadStrong(v20 + 16, v19);
    if (v21)
    {
      v16 = v21;
      v17 = *(_QWORD *)(v20 + 24);
      v18 = swift_getObjectType(v21);
      (*(void (**)(BOOL, uint64_t, uint64_t))(v17 + 128))(v3 != 0, v18, v17);
      swift_release();
      swift_unknownObjectRelease(v16);
    }
    else
    {
      swift_release();
    }
  }
LABEL_35:
  swift_bridgeObjectRelease(v2);
  v24 = v151;
  v25 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v151 + 144) + 144);
  v26 = swift_retain();
  v25(__dst, v26);
  swift_release();
  v27 = LOBYTE(__dst[0]);
  v28 = LOBYTE(__dst[0]) == 1;
  v29 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v151 + 144) + 144);
  v30 = swift_retain();
  v29(__dst, v30);
  swift_release();
  v148 = v27;
  if (LOBYTE(__dst[0]) != 4)
  {
    v41 = 0;
    v42 = v149;
    goto LABEL_53;
  }
  v14 = *v150;
  v147 = v28;
  if ((unint64_t)*v150 >> 62)
    goto LABEL_193;
  v31 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v14);
LABEL_38:
  if (v31)
  {
    v32 = 0;
    v33 = v14 & 0xC000000000000001;
    if ((v14 & 0xC000000000000001) != 0)
      goto LABEL_40;
    while (v32 < *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      v35 = *(_QWORD *)(v14 + 8 * v32 + 32);
      swift_retain();
      v36 = v32 + 1;
      if (__OFADD__(v32, 1))
      {
LABEL_173:
        __break(1u);
        goto LABEL_174;
      }
      while (2)
      {
        v37 = swift_unknownObjectWeakLoadStrong(v35 + 16, v34);
        if (v37)
        {
          v38 = v37;
          v39 = *(_QWORD *)(v35 + 24);
          v40 = swift_getObjectType(v37);
          (*(void (**)(uint64_t, uint64_t))(v39 + 80))(v40, v39);
          swift_release();
          swift_unknownObjectRelease(v38);
          if (v36 == v31)
            goto LABEL_52;
        }
        else
        {
          swift_release();
          if (v36 == v31)
            goto LABEL_52;
        }
        ++v32;
        if (v33)
        {
LABEL_40:
          v35 = specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v14);
          v36 = v32 + 1;
          if (__OFADD__(v32, 1))
            goto LABEL_173;
          continue;
        }
        break;
      }
    }
    __break(1u);
    goto LABEL_190;
  }
LABEL_52:
  swift_bridgeObjectRelease(v14);
  v24 = v151;
  v42 = v149;
  v41 = v31 != 0;
  v28 = v147;
LABEL_53:
  v43 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v24 + 72) + 144);
  v44 = swift_retain();
  v43(__dst, v44);
  swift_release();
  LODWORD(v43) = (*(_QWORD *)&__dst[0] >> 62) - 1;
  sub_10001A810(*(unint64_t *)&__dst[0]);
  if (v43 > 1)
  {
    if (v3)
    {
      v58 = (void *)objc_opt_self(NSUserDefaults);
      v3 = (uint64_t)(id)v3;
      v59 = objc_msgSend(v58, "standardUserDefaults");
      v60 = *(_QWORD *)(Defaults.coachingCalloutEnabled.unsafeMutableAddressor() + 8);
      swift_bridgeObjectRetain(v60);
      v61 = String._bridgeToObjectiveC()();
      LODWORD(v60) = objc_msgSend(v59, "BOOLForKey:", v61, swift_bridgeObjectRelease(v60).n128_f64[0]);

      if ((_DWORD)v60)
      {
        v28 = v148 == 1
           || (type metadata accessor for MeasureCamera(0),
               swift_retain(),
               StateValue.wrappedValue.getter(__src, v62),
               swift_release(),
               memcpy(__dst, __src, sizeof(__dst)),
               sub_100012C00((uint64_t)__dst),
               (static MeasureCamera.planeTooClose(for:transform:)(v3, (__n128)__dst[21], (__n128)__dst[22], (__n128)__dst[23], (__n128)__dst[24]) & 1) != 0)|| sub_10003DE78();
        v64 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v24 + 72) + 144);
        v65 = swift_retain();
        v64(__dst, v65);
        swift_release();
        v66 = *(_QWORD *)&__dst[0];
        sub_10001A810(*(unint64_t *)&__dst[0]);
        if (v66 != 0xC000000000000010)
        {
          type metadata accessor for MeasureCamera(0);
          swift_retain();
          StateValue.wrappedValue.getter(__src, v90);
          swift_release();
          memcpy(__dst, __src, sizeof(__dst));
          sub_100012C00((uint64_t)__dst);
          v47 = static MeasureCamera.planeTooFar(for:transform:)(v3, (__n128)__dst[21], (__n128)__dst[22], (__n128)__dst[23], (__n128)__dst[24]);

          if (v41)
            return;
          goto LABEL_81;
        }
      }

    }
    if (v41)
      return;
    v47 = 0;
    goto LABEL_81;
  }
  v45 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v24 + 144) + 144);
  v46 = swift_retain();
  v45(__dst, v46);
  swift_release();
  v47 = LOBYTE(__dst[0]) == 2;
  v48 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v24 + 144) + 144);
  v49 = swift_retain();
  v48(__dst, v49);
  swift_release();
  if (v41)
    return;
  if (LOBYTE(__dst[0]) == 3)
  {
    v3 = *v150;
    if (!((unint64_t)*v150 >> 62))
    {
      v14 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*v150);
      if (v14)
        goto LABEL_58;
      goto LABEL_207;
    }
    goto LABEL_203;
  }
LABEL_81:
  while (*(_BYTE *)(v24 + v42) == 1)
  {
    v5 = *v150;
    if ((unint64_t)*v150 >> 62)
    {
      if (v5 < 0)
        v138 = *v150;
      else
        v138 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v150);
      v24 = _CocoaArrayWrapper.endIndex.getter(v138);
      if (!v24)
        goto LABEL_218;
    }
    else
    {
      v24 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*v150);
      if (!v24)
        goto LABEL_218;
    }
    if (v24 >= 1)
    {
      for (k = 0; k != v24; ++k)
      {
        if ((v5 & 0xC000000000000001) != 0)
        {
          v72 = specialized _ArrayBuffer._getElementSlowPath(_:)(k, v5);
        }
        else
        {
          v72 = *(_QWORD *)(v5 + 8 * k + 32);
          swift_retain();
        }
        v73 = swift_unknownObjectWeakLoadStrong(v72 + 16, v71);
        if (v73)
        {
          v68 = v73;
          v69 = *(_QWORD *)(v72 + 24);
          v70 = swift_getObjectType(v73);
          (*(void (**)(uint64_t, uint64_t))(v69 + 56))(v70, v69);
          swift_release();
          swift_unknownObjectRelease(v68);
        }
        else
        {
          swift_release();
        }
      }
      goto LABEL_218;
    }
    __break(1u);
LABEL_203:
    if (v3 < 0)
      v139 = v3;
    else
      v139 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v14 = _CocoaArrayWrapper.endIndex.getter(v139);
    if (v14)
    {
LABEL_58:
      v50 = 0;
      if ((v3 & 0xC000000000000001) != 0)
      {
LABEL_59:
        v52 = specialized _ArrayBuffer._getElementSlowPath(_:)(v50, v3);
        v53 = v50 + 1;
        if (!__OFADD__(v50, 1))
          goto LABEL_64;
LABEL_190:
        __break(1u);
        goto LABEL_191;
      }
      while (v50 < *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        v52 = *(_QWORD *)(v3 + 8 * v50 + 32);
        swift_retain();
        v53 = v50 + 1;
        if (__OFADD__(v50, 1))
          goto LABEL_190;
LABEL_64:
        v54 = swift_unknownObjectWeakLoadStrong(v52 + 16, v51);
        if (v54)
        {
          v55 = v54;
          v56 = *(_QWORD *)(v52 + 24);
          v57 = swift_getObjectType(v54);
          (*(void (**)(uint64_t, uint64_t))(v56 + 72))(v57, v56);
          swift_release();
          swift_unknownObjectRelease(v55);
          if (v53 == v14)
            goto LABEL_75;
        }
        else
        {
          swift_release();
          if (v53 == v14)
          {
LABEL_75:
            v63 = v3;
            goto LABEL_219;
          }
        }
        ++v50;
        if ((v3 & 0xC000000000000001) != 0)
          goto LABEL_59;
      }
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      if (v14 < 0)
        v137 = v14;
      else
        v137 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v14);
      v31 = _CocoaArrayWrapper.endIndex.getter(v137);
      goto LABEL_38;
    }
LABEL_207:
    swift_bridgeObjectRelease(v3);
  }
  if ((v47 & 1) == 0)
  {
    if (!v28)
    {
      v5 = *(_QWORD *)(**(_QWORD **)(v24 + 120) + 144);
      v91 = swift_retain();
      ((void (*)(_OWORD *__return_ptr, __n128))v5)(__src, v91);
      swift_release();
      __dst[4] = __src[4];
      __dst[5] = __src[5];
      __dst[6] = __src[6];
      LOBYTE(__dst[7]) = __src[7];
      __dst[0] = __src[0];
      __dst[1] = __src[1];
      __dst[2] = __src[2];
      __dst[3] = __src[3];
      if (!sub_10007089C())
      {
        v99 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v24 + 72) + 144);
        v100 = swift_retain();
        v99(__src, v100);
        swift_release();
        v101 = *(_QWORD *)&__src[0];
        if ((*(_QWORD *)&__src[0] >> 62) - 1 >= 2)
        {
          if (*(_QWORD *)&__src[0] >> 62)
          {
            v102 = 0;
          }
          else
          {
            sub_10001A810(*(unint64_t *)&__src[0]);
            v102 = 1;
          }
          v103 = 1;
        }
        else
        {
          sub_10001A810(*(unint64_t *)&__src[0]);
          v102 = 0;
          v103 = 0;
          *(_BYTE *)(v24 + qword_10047D1F8) = 0;
        }
        v104 = qword_10047D1F8;
        *(_BYTE *)(v24 + qword_10047D1F8) = v103 & *(_BYTE *)(v24 + qword_10047D208);
        v105 = v24;
        if ((*(_BYTE *)(v24 + v42) & 1) == 0)
        {
          swift_retain();
          StateValue.wrappedValue.getter(__src, v106);
          swift_release();
          if ((BYTE3(__src[0]) & 1) == 0 && (*(_BYTE *)(v24 + v104) & 1) == 0)
          {
            v107 = qword_10047D200;
            if (!*(_QWORD *)(v105 + qword_10047D200))
            {
              v108 = (void *)objc_opt_self(NSTimer);
              *(_QWORD *)&__src[2] = sub_10003E638;
              *((_QWORD *)&__src[2] + 1) = v105;
              *(_QWORD *)&__src[0] = _NSConcreteStackBlock;
              *((_QWORD *)&__src[0] + 1) = 1107296256;
              *(_QWORD *)&__src[1] = sub_10004C834;
              *((_QWORD *)&__src[1] + 1) = &unk_1004400B0;
              v109 = _Block_copy(__src);
              swift_retain();
              swift_release();
              v110 = objc_msgSend(v108, "scheduledTimerWithTimeInterval:repeats:block:", 0, v109, 5.0);
              _Block_release(v109);
              v111 = *(void **)(v105 + v107);
              *(_QWORD *)(v105 + v107) = v110;

            }
          }
        }
        v33 = static Date.timeIntervalSinceReferenceDate.getter(v101) - *(double *)(v105 + qword_10047D218) > 1.0
           && static Date.timeIntervalSinceReferenceDate.getter(v112) - *(double *)(v105 + qword_10047D220) > 1.0;
        if ((*(_BYTE *)(v105 + v149) & 1) == 0)
        {
          if ((*(_BYTE *)(v105 + 169) & 1) == 0 && (v102 & *(_BYTE *)(v105 + v104)) == 1)
          {
            v5 = *v150;
            if (!((unint64_t)*v150 >> 62))
            {
              v113 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain(*v150);
              if (!v113)
                goto LABEL_218;
              goto LABEL_150;
            }
LABEL_234:
            if (v5 < 0)
              v145 = v5;
            else
              v145 = v5 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v5);
            v113 = _CocoaArrayWrapper.endIndex.getter(v145);
            if (!v113)
              goto LABEL_218;
LABEL_150:
            if (v113 >= 1)
            {
              for (m = 0; m != v113; ++m)
              {
                if ((v5 & 0xC000000000000001) != 0)
                {
                  v119 = specialized _ArrayBuffer._getElementSlowPath(_:)(m, v5);
                }
                else
                {
                  v119 = *(_QWORD *)(v5 + 8 * m + 32);
                  swift_retain();
                }
                v120 = swift_unknownObjectWeakLoadStrong(v119 + 16, v118);
                if (v120)
                {
                  v115 = v120;
                  v116 = *(_QWORD *)(v119 + 24);
                  v117 = swift_getObjectType(v120);
                  (*(void (**)(uint64_t, uint64_t))(v116 + 40))(v117, v116);
                  swift_release();
                  swift_unknownObjectRelease(v115);
                }
                else
                {
                  swift_release();
                }
              }
              goto LABEL_218;
            }
            __break(1u);
            goto LABEL_240;
          }
          if ((*(_BYTE *)(v105 + 168) & 1) == 0 && !(v102 & 1 | ((*(_BYTE *)(v105 + v104) & 1) == 0)))
          {
LABEL_174:
            if (qword_10047A930 != -1)
              swift_once(&qword_10047A930, sub_100083368);
            if (!qword_1004AF278 || *(_BYTE *)(qword_1004AF278 + 544))
            {
              v5 = *v150;
              if (!((unint64_t)*v150 >> 62))
              {
                v129 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain(*v150);
                if (!v129)
                  goto LABEL_218;
                goto LABEL_180;
              }
LABEL_240:
              if (v5 < 0)
                v146 = v5;
              else
                v146 = v5 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v5);
              v129 = _CocoaArrayWrapper.endIndex.getter(v146);
              if (!v129)
                goto LABEL_218;
LABEL_180:
              if (v129 >= 1)
              {
                for (n = 0; n != v129; ++n)
                {
                  if ((v5 & 0xC000000000000001) != 0)
                  {
                    v135 = specialized _ArrayBuffer._getElementSlowPath(_:)(n, v5);
                  }
                  else
                  {
                    v135 = *(_QWORD *)(v5 + 8 * n + 32);
                    swift_retain();
                  }
                  v136 = swift_unknownObjectWeakLoadStrong(v135 + 16, v134);
                  if (v136)
                  {
                    v131 = v136;
                    v132 = *(_QWORD *)(v135 + 24);
                    v133 = swift_getObjectType(v136);
                    (*(void (**)(int64_t, uint64_t, uint64_t))(v132 + 32))(v33, v133, v132);
                    swift_release();
                    swift_unknownObjectRelease(v131);
                  }
                  else
                  {
                    swift_release();
                  }
                }
                goto LABEL_218;
              }
              __break(1u);
              return;
            }
          }
        }
        if (!(_DWORD)v33)
          return;
        v5 = *v150;
        if (!((unint64_t)*v150 >> 62))
        {
          v121 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(*v150);
          if (!v121)
            goto LABEL_218;
          goto LABEL_164;
        }
LABEL_228:
        if (v5 < 0)
          v144 = v5;
        else
          v144 = v5 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v5);
        v121 = _CocoaArrayWrapper.endIndex.getter(v144);
        if (!v121)
          goto LABEL_218;
LABEL_164:
        if (v121 >= 1)
        {
          for (ii = 0; ii != v121; ++ii)
          {
            if ((v5 & 0xC000000000000001) != 0)
            {
              v127 = specialized _ArrayBuffer._getElementSlowPath(_:)(ii, v5);
            }
            else
            {
              v127 = *(_QWORD *)(v5 + 8 * ii + 32);
              swift_retain();
            }
            v128 = swift_unknownObjectWeakLoadStrong(v127 + 16, v126);
            if (v128)
            {
              v123 = v128;
              v124 = *(_QWORD *)(v127 + 24);
              v125 = swift_getObjectType(v128);
              (*(void (**)(uint64_t, uint64_t))(v124 + 48))(v125, v124);
              swift_release();
              swift_unknownObjectRelease(v123);
            }
            else
            {
              swift_release();
            }
          }
          goto LABEL_218;
        }
        __break(1u);
        goto LABEL_234;
      }
      v82 = *v150;
      if (!((unint64_t)*v150 >> 62))
      {
        v33 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(*v150);
        if (!v33)
        {
LABEL_226:
          swift_bridgeObjectRelease(v82);
          *(double *)(v151 + qword_10047D220) = static Date.timeIntervalSinceReferenceDate.getter(v143);
          return;
        }
        goto LABEL_122;
      }
LABEL_222:
      if (v82 < 0)
        v142 = v82;
      else
        v142 = v82 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v82);
      v33 = _CocoaArrayWrapper.endIndex.getter(v142);
      if (!v33)
        goto LABEL_226;
LABEL_122:
      if (v33 >= 1)
      {
        for (jj = 0; jj != v33; ++jj)
        {
          if ((v82 & 0xC000000000000001) != 0)
          {
            v97 = specialized _ArrayBuffer._getElementSlowPath(_:)(jj, v82);
          }
          else
          {
            v97 = *(_QWORD *)(v82 + 8 * jj + 32);
            swift_retain();
          }
          v98 = swift_unknownObjectWeakLoadStrong(v97 + 16, v96);
          if (v98)
          {
            v93 = v98;
            v94 = *(_QWORD *)(v97 + 24);
            v95 = swift_getObjectType(v98);
            (*(void (**)(uint64_t, uint64_t))(v94 + 64))(v95, v94);
            swift_release();
            swift_unknownObjectRelease(v93);
          }
          else
          {
            swift_release();
          }
        }
        goto LABEL_226;
      }
      __break(1u);
      goto LABEL_228;
    }
    v5 = *v150;
    if (!((unint64_t)*v150 >> 62))
    {
      v82 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*v150);
      if (!v82)
        goto LABEL_218;
      goto LABEL_108;
    }
LABEL_214:
    if (v5 < 0)
      v141 = v5;
    else
      v141 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v82 = _CocoaArrayWrapper.endIndex.getter(v141);
    if (!v82)
      goto LABEL_218;
LABEL_108:
    if (v82 >= 1)
    {
      for (kk = 0; kk != v82; ++kk)
      {
        if ((v5 & 0xC000000000000001) != 0)
        {
          v88 = specialized _ArrayBuffer._getElementSlowPath(_:)(kk, v5);
        }
        else
        {
          v88 = *(_QWORD *)(v5 + 8 * kk + 32);
          swift_retain();
        }
        v89 = swift_unknownObjectWeakLoadStrong(v88 + 16, v87);
        if (v89)
        {
          v84 = v89;
          v85 = *(_QWORD *)(v88 + 24);
          v86 = swift_getObjectType(v89);
          (*(void (**)(uint64_t, uint64_t))(v85 + 24))(v86, v85);
          swift_release();
          swift_unknownObjectRelease(v84);
        }
        else
        {
          swift_release();
        }
      }
      goto LABEL_218;
    }
    __break(1u);
    goto LABEL_222;
  }
  v5 = *v150;
  if ((unint64_t)*v150 >> 62)
  {
    if (v5 < 0)
      v140 = *v150;
    else
      v140 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v150);
    v74 = _CocoaArrayWrapper.endIndex.getter(v140);
    if (!v74)
      goto LABEL_218;
LABEL_96:
    if (v74 >= 1)
    {
      for (mm = 0; mm != v74; ++mm)
      {
        if ((v5 & 0xC000000000000001) != 0)
        {
          v80 = specialized _ArrayBuffer._getElementSlowPath(_:)(mm, v5);
        }
        else
        {
          v80 = *(_QWORD *)(v5 + 8 * mm + 32);
          swift_retain();
        }
        v81 = swift_unknownObjectWeakLoadStrong(v80 + 16, v79);
        if (v81)
        {
          v76 = v81;
          v77 = *(_QWORD *)(v80 + 24);
          v78 = swift_getObjectType(v81);
          (*(void (**)(uint64_t, uint64_t))(v77 + 16))(v78, v77);
          swift_release();
          swift_unknownObjectRelease(v76);
        }
        else
        {
          swift_release();
        }
      }
      goto LABEL_218;
    }
    __break(1u);
    goto LABEL_214;
  }
  v74 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*v150);
  if (v74)
    goto LABEL_96;
LABEL_218:
  v63 = v5;
LABEL_219:
  swift_bridgeObjectRelease(v63);
}

void sub_10003CC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  if (!*(_QWORD *)(a1 + 8))
  {
    swift_beginAccess(a2 + 160, v14, 0, 0);
    v3 = *(_QWORD *)(a2 + 160);
    if ((unint64_t)v3 >> 62)
    {
      if (v3 < 0)
        v12 = *(_QWORD *)(a2 + 160);
      else
        v12 = v3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(a2 + 160));
      v4 = _CocoaArrayWrapper.endIndex.getter(v12);
      if (v4)
        goto LABEL_4;
    }
    else
    {
      v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(a2 + 160));
      if (v4)
      {
LABEL_4:
        if (v4 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v4; ++i)
        {
          if ((v3 & 0xC000000000000001) != 0)
          {
            v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
          }
          else
          {
            v7 = *(_QWORD *)(v3 + 8 * i + 32);
            swift_retain(v7);
          }
          Strong = swift_unknownObjectWeakLoadStrong(v7 + 16, v6);
          if (Strong)
          {
            v9 = Strong;
            v10 = *(_QWORD *)(v7 + 24);
            ObjectType = swift_getObjectType(Strong);
            (*(void (**)(uint64_t, uint64_t))(v10 + 136))(ObjectType, v10);
            swift_release(v7);
            swift_unknownObjectRelease(v9);
          }
          else
          {
            swift_release(v7);
          }
        }
      }
    }
    v13 = swift_bridgeObjectRelease(v3);
    *(double *)(a2 + qword_10047D218) = static Date.timeIntervalSinceReferenceDate.getter(v13);
  }
}

uint64_t sub_10003CDCC(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t result;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_BYTE *, uint64_t, uint64_t);
  int v19;
  _BYTE v20[24];
  _BYTE v21[24];

  v4 = sub_10000EDC8(&qword_10047C2C8);
  v5 = __chkstk_darwin(v4);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __chkstk_darwin(v5);
  v10 = &v20[-v9];
  result = __chkstk_darwin(v8);
  v13 = &v20[-v12];
  v14 = *a1;
  *(_BYTE *)(a2 + 184) = *a1;
  if ((v14 & 1) == 0)
  {
    v15 = a2 + qword_10047D1D8;
    swift_beginAccess(a2 + qword_10047D1D8, v21, 0, 0);
    sub_100025934(v15, (uint64_t)v13);
    v16 = type metadata accessor for ARCamera.TrackingState(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48);
    v19 = v18(v13, 1, v16);
    result = sub_10002597C((uint64_t)v13);
    if (v19 != 1)
    {
      sub_100025934(v15, (uint64_t)v10);
      result = v18(v10, 1, v16);
      if ((_DWORD)result == 1)
      {
        __break(1u);
      }
      else
      {
        sub_10003E4F0((uint64_t)v10, (uint64_t)v7);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v7, 0, 1, v16);
        swift_beginAccess(v15, v20, 33, 0);
        sub_10003E534((uint64_t)v7, v15);
        swift_endAccess(v20);
        sub_10003D248();
        return sub_10003E57C((uint64_t)v10);
      }
    }
  }
  return result;
}

void sub_10003CF74()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  sub_10002597C(v0 + qword_10047D1D8);

}

uint64_t sub_10003D030(uint64_t a1)
{
  uint64_t v1;

  v1 = StateObserver.deinit(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 160));
  sub_10002597C(v1 + qword_10047D1D8);

  return v1;
}

uint64_t sub_10003D104(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_10003D030(a1);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t type metadata accessor for CoachingController(uint64_t a1)
{
  uint64_t result;

  result = qword_10047D250;
  if (!qword_10047D250)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CoachingController);
  return result;
}

void sub_10003D160(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[29];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[13] = &unk_1003B22B8;
  v4[14] = &unk_1003B22B8;
  v4[15] = &unk_1003B22B8;
  v4[16] = &unk_1003B22B8;
  v4[17] = &unk_1003B22D0;
  v4[18] = &unk_1003B22B8;
  sub_100024F6C(319);
  if (v3 <= 0x3F)
  {
    v4[19] = *(_QWORD *)(v2 - 8) + 64;
    v4[20] = &unk_1003B22D0;
    v4[21] = &unk_1003B22D0;
    v4[22] = &unk_1003B22B8;
    v4[23] = &unk_1003B22B8;
    v4[24] = &unk_1003B22D0;
    v4[25] = &unk_1003B22B8;
    v4[26] = &unk_1003B22B8;
    v4[27] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[28] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initClassMetadata2(a1, 256, 29, v4, a1 + 208);
  }
}

uint64_t sub_10003D248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t ObjectType;
  int v29;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t k;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t n;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t m;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[24];
  _BYTE v71[24];

  v1 = v0;
  v2 = type metadata accessor for ARCamera.TrackingState.Reason(0);
  v69 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (uint64_t)&v68 - v6;
  v8 = sub_10000EDC8(&qword_10047C2C8);
  __chkstk_darwin(v8);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ARCamera.TrackingState(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v68 - v16;
  result = sub_10003D9B4();
  if ((result & 1) == 0 && !*(_QWORD *)(v0 + qword_10047D1E8))
  {
    v19 = v0 + qword_10047D1D8;
    swift_beginAccess(v1 + qword_10047D1D8, v71, 0, 0);
    sub_100025934(v19, (uint64_t)v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      return sub_10002597C((uint64_t)v10);
    v20 = (uint64_t)v17;
    sub_10003E5B8((uint64_t)v10, (uint64_t)v17);
    sub_10003E4F0((uint64_t)v17, (uint64_t)v15);
    v21 = v69;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v15, 2, v2))
    {
      if ((*(_BYTE *)(v1 + 170) & 1) != 0)
      {
LABEL_69:
        sub_10003E57C(v20);
        *(_BYTE *)(v1 + 170) = 0;
        v62 = (uint64_t)v15;
        return sub_10003E57C(v62);
      }
      swift_beginAccess(v1 + 160, v70, 0, 0);
      v2 = *(_QWORD *)(v1 + 160);
      if ((unint64_t)v2 >> 62)
      {
        if (v2 < 0)
          v61 = *(_QWORD *)(v1 + 160);
        else
          v61 = v2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*(_QWORD *)(v1 + 160));
        v22 = _CocoaArrayWrapper.endIndex.getter(v61);
        if (v22)
          goto LABEL_9;
      }
      else
      {
        v22 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(*(_QWORD *)(v1 + 160));
        if (v22)
        {
LABEL_9:
          if (v22 >= 1)
          {
            for (i = 0; i != v22; ++i)
            {
              if ((v2 & 0xC000000000000001) != 0)
              {
                v25 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
              }
              else
              {
                v25 = *(_QWORD *)(v2 + 8 * i + 32);
                swift_retain();
              }
              Strong = swift_unknownObjectWeakLoadStrong(v25 + 16, v24);
              v27 = *(_QWORD *)(v25 + 24);
              swift_release();
              if (Strong)
              {
                ObjectType = swift_getObjectType(Strong);
                (*(void (**)(uint64_t, uint64_t))(v27 + 120))(ObjectType, v27);
                swift_unknownObjectRelease(Strong);
              }
            }
            goto LABEL_68;
          }
          __break(1u);
LABEL_71:
          if (v7 < 0)
            v63 = v7;
          else
            v63 = v7 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v7);
          v30 = _CocoaArrayWrapper.endIndex.getter(v63);
          if (!v30)
            goto LABEL_92;
          goto LABEL_20;
        }
      }
LABEL_68:
      swift_bridgeObjectRelease(v2);
      goto LABEL_69;
    }
    v22 = v7;
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v7, v15, v2);
    *(_BYTE *)(v1 + 170) = 1;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v5, v7, v2);
    v29 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v5, v2);
    if (v29 == enum case for ARCamera.TrackingState.Reason.initializing(_:))
    {
      swift_beginAccess(v1 + 160, v70, 0, 0);
      v7 = *(_QWORD *)(v1 + 160);
      if ((unint64_t)v7 >> 62)
        goto LABEL_71;
      v30 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v1 + 160));
      if (v30)
      {
LABEL_20:
        if (v30 >= 1)
        {
          for (j = 0; j != v30; ++j)
          {
            if ((v7 & 0xC000000000000001) != 0)
            {
              v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(j, v7);
            }
            else
            {
              v36 = *(_QWORD *)(v7 + 8 * j + 32);
              swift_retain();
            }
            v37 = swift_unknownObjectWeakLoadStrong(v36 + 16, v35);
            if (v37)
            {
              v32 = v37;
              v33 = *(_QWORD *)(v36 + 24);
              v34 = swift_getObjectType(v37);
              (*(void (**)(uint64_t, uint64_t))(v33 + 104))(v34, v33);
              swift_release();
              swift_unknownObjectRelease(v32);
            }
            else
            {
              swift_release();
            }
          }
          goto LABEL_92;
        }
        __break(1u);
LABEL_77:
        if (v7 < 0)
          v64 = v7;
        else
          v64 = v7 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v7);
        v38 = _CocoaArrayWrapper.endIndex.getter(v64);
        if (!v38)
          goto LABEL_92;
        goto LABEL_32;
      }
    }
    else if (v29 == enum case for ARCamera.TrackingState.Reason.excessiveMotion(_:))
    {
      swift_beginAccess(v1 + 160, v70, 0, 0);
      v7 = *(_QWORD *)(v1 + 160);
      if ((unint64_t)v7 >> 62)
        goto LABEL_77;
      v38 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v7);
      if (v38)
      {
LABEL_32:
        if (v38 >= 1)
        {
          for (k = 0; k != v38; ++k)
          {
            if ((v7 & 0xC000000000000001) != 0)
            {
              v44 = specialized _ArrayBuffer._getElementSlowPath(_:)(k, v7);
            }
            else
            {
              v44 = *(_QWORD *)(v7 + 8 * k + 32);
              swift_retain();
            }
            v45 = swift_unknownObjectWeakLoadStrong(v44 + 16, v43);
            if (v45)
            {
              v40 = v45;
              v41 = *(_QWORD *)(v44 + 24);
              v42 = swift_getObjectType(v45);
              (*(void (**)(uint64_t, uint64_t))(v41 + 64))(v42, v41);
              swift_release();
              swift_unknownObjectRelease(v40);
            }
            else
            {
              swift_release();
            }
          }
          goto LABEL_92;
        }
        __break(1u);
LABEL_83:
        if (v7 < 0)
          v65 = v7;
        else
          v65 = v7 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v7);
        v46 = _CocoaArrayWrapper.endIndex.getter(v65);
        if (!v46)
          goto LABEL_92;
        goto LABEL_44;
      }
    }
    else
    {
      if (v29 != enum case for ARCamera.TrackingState.Reason.insufficientFeatures(_:))
      {
        if (v29 != enum case for ARCamera.TrackingState.Reason.relocalizing(_:))
        {
LABEL_97:
          result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Measure/CoachingController.swift", 32, 2, 257, 0);
          __break(1u);
          return result;
        }
        swift_beginAccess(v1 + 160, v70, 0, 0);
        v7 = *(_QWORD *)(v1 + 160);
        if ((unint64_t)v7 >> 62)
        {
          if (v7 < 0)
            v66 = *(_QWORD *)(v1 + 160);
          else
            v66 = v7 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*(_QWORD *)(v1 + 160));
          v53 = _CocoaArrayWrapper.endIndex.getter(v66);
          if (!v53)
            goto LABEL_92;
        }
        else
        {
          v53 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v7);
          if (!v53)
            goto LABEL_92;
        }
        if (v53 >= 1)
        {
          for (m = 0; m != v53; ++m)
          {
            if ((v7 & 0xC000000000000001) != 0)
            {
              v59 = specialized _ArrayBuffer._getElementSlowPath(_:)(m, v7);
            }
            else
            {
              v59 = *(_QWORD *)(v7 + 8 * m + 32);
              swift_retain();
            }
            v60 = swift_unknownObjectWeakLoadStrong(v59 + 16, v58);
            if (v60)
            {
              v55 = v60;
              v56 = *(_QWORD *)(v59 + 24);
              v57 = swift_getObjectType(v60);
              (*(void (**)(uint64_t, uint64_t))(v56 + 112))(v57, v56);
              swift_release();
              swift_unknownObjectRelease(v55);
            }
            else
            {
              swift_release();
            }
          }
          goto LABEL_92;
        }
        goto LABEL_96;
      }
      swift_beginAccess(v1 + 160, v70, 0, 0);
      v7 = *(_QWORD *)(v1 + 160);
      if ((unint64_t)v7 >> 62)
        goto LABEL_83;
      v46 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v1 + 160));
      if (v46)
      {
LABEL_44:
        if (v46 >= 1)
        {
          for (n = 0; n != v46; ++n)
          {
            if ((v7 & 0xC000000000000001) != 0)
            {
              v49 = specialized _ArrayBuffer._getElementSlowPath(_:)(n, v7);
            }
            else
            {
              v49 = *(_QWORD *)(v7 + 8 * n + 32);
              swift_retain();
            }
            v50 = swift_unknownObjectWeakLoadStrong(v49 + 16, v48);
            v51 = *(_QWORD *)(v49 + 24);
            swift_release();
            if (v50)
            {
              v52 = swift_getObjectType(v50);
              (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v51);
              swift_unknownObjectRelease(v50);
            }
          }
          goto LABEL_92;
        }
        __break(1u);
LABEL_96:
        __break(1u);
        goto LABEL_97;
      }
    }
LABEL_92:
    v67 = swift_bridgeObjectRelease(v7);
    (*(void (**)(uint64_t, uint64_t, __n128))(v69 + 8))(v22, v2, v67);
    v62 = v20;
    return sub_10003E57C(v62);
  }
  return result;
}

uint64_t sub_10003D9B4()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  double v18;
  uint64_t v19;
  void *v20;
  uint64_t result;
  int v22;
  void (*v23)(unint64_t *__return_ptr, __n128);
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  uint64_t Strong;
  uint64_t v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  id v42;
  unint64_t aBlock[6];
  _BYTE v44[24];

  v1 = v0;
  v2 = type metadata accessor for ARCamera.TrackingState.Reason(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000EDC8(&qword_10047C2C8);
  __chkstk_darwin(v6);
  v8 = (char *)&aBlock[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ARCamera.TrackingState(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&aBlock[-1] - v14;
  v16 = *(void **)(v1 + qword_10047D1E0);
  if (!v16)
    goto LABEL_6;
  v17 = v16;
  objc_msgSend(v17, "ambientIntensity");
  if (v18 >= 500.0)
  {

    goto LABEL_6;
  }
  v42 = v17;
  v19 = v1 + qword_10047D1D8;
  swift_beginAccess(v1 + qword_10047D1D8, v44, 0, 0);
  sub_100025934(v19, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {

    sub_10002597C((uint64_t)v8);
LABEL_6:
    v20 = *(void **)(v1 + qword_10047D1E8);
    *(_QWORD *)(v1 + qword_10047D1E8) = 0;

    result = 0;
    *(_BYTE *)(v1 + qword_10047D1F0) = 0;
    return result;
  }
  sub_10003E5B8((uint64_t)v8, (uint64_t)v15);
  sub_10003E4F0((uint64_t)v15, (uint64_t)v13);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v13, 2, v2);
  if (!v22)
  {
    sub_10003E57C((uint64_t)v15);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v13, v2);
    if ((*(unsigned int (**)(char *, uint64_t))(v3 + 88))(v5, v2) == enum case for ARCamera.TrackingState.Reason.insufficientFeatures(_:))
      goto LABEL_15;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_32:

    goto LABEL_6;
  }
  if (v22 != 1)
  {
    if (*(_BYTE *)(v1 + qword_10047D210) == 1)
    {
      v23 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(v1 + 72) + 144);
      v24 = swift_retain();
      v23(aBlock, v24);
      swift_release();
      v25 = aBlock[0];
      sub_10001A810(aBlock[0]);
      sub_10003E57C((uint64_t)v15);
      if (v25 != 0xC000000000000010)
        goto LABEL_15;
    }
    else
    {
      sub_10003E57C((uint64_t)v15);
    }
    goto LABEL_32;
  }
  sub_10003E57C((uint64_t)v15);
LABEL_15:
  if (*(_BYTE *)(v1 + qword_10047D1F0) == 1)
  {
    swift_beginAccess(v1 + 160, aBlock, 0, 0);
    v26 = *(_QWORD *)(v1 + 160);
    if ((unint64_t)v26 >> 62)
    {
      if (v26 < 0)
        v41 = v26;
      else
        v41 = v26 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v26);
      result = _CocoaArrayWrapper.endIndex.getter(v41);
      v27 = result;
    }
    else
    {
      v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain(v26);
    }
    v28 = v42;
    if (v27)
    {
      if (v27 < 1)
      {
        __break(1u);
        return result;
      }
      for (i = 0; i != v27; ++i)
      {
        if ((v26 & 0xC000000000000001) != 0)
        {
          v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v26);
        }
        else
        {
          v34 = *(_QWORD *)(v26 + 8 * i + 32);
          swift_retain();
        }
        Strong = swift_unknownObjectWeakLoadStrong(v34 + 16, v33);
        if (Strong)
        {
          v30 = Strong;
          v31 = *(_QWORD *)(v34 + 24);
          ObjectType = swift_getObjectType(Strong);
          objc_msgSend(v28, "ambientIntensity");
          (*(void (**)(uint64_t, uint64_t))(v31 + 96))(ObjectType, v31);
          swift_release();
          swift_unknownObjectRelease(v30);
        }
        else
        {
          swift_release();
        }
      }
    }

    swift_bridgeObjectRelease(v26);
    return 1;
  }
  v36 = qword_10047D1E8;
  if (*(_QWORD *)(v1 + qword_10047D1E8))
  {
    v37 = v42;
  }
  else
  {
    v38 = (void *)objc_opt_self(NSTimer);
    aBlock[4] = (unint64_t)sub_10003E5FC;
    aBlock[5] = v1;
    aBlock[0] = (unint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (unint64_t)sub_10004C834;
    aBlock[3] = (unint64_t)&unk_100440088;
    v39 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    v40 = objc_msgSend(v38, "scheduledTimerWithTimeInterval:repeats:block:", 0, v39, 1.5);

    _Block_release(v39);
    v37 = *(id *)(v1 + v36);
    *(_QWORD *)(v1 + v36) = v40;
  }

  return 0;
}

BOOL sub_10003DE78()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, uint64_t);
  id v5;
  uint64_t v6;
  float v7;
  double v8;
  float v9;
  uint64_t v11;
  void (*v12)(uint64_t *__return_ptr, uint64_t);
  uint64_t v13;
  float v14;
  double v15;
  double v16;
  float v17;
  uint64_t v18;

  v1 = *(void **)(v0 + 176);
  if (!v1)
    return 0;
  v2 = v0;
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 144);
  v5 = v1;
  v6 = swift_retain(v3);
  v4((uint64_t *)((char *)&v18 + 4), v6);
  swift_release(v3);
  v7 = *((float *)&v18 + 1);
  objc_msgSend(v5, "bounds");
  v9 = v8;
  if (v7 <= v9)
  {
    v11 = *(_QWORD *)(v2 + 128);
    v12 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 144);
    v13 = swift_retain(v11);
    v12(&v18, v13);
    swift_release(v11);
    v14 = *(float *)&v18;
    objc_msgSend(v5, "bounds");
    v16 = v15;

    v17 = v16;
    return v14 > v17;
  }
  else
  {

    return 1;
  }
}

uint64_t sub_10003DF5C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 171) = result;
  return result;
}

uint64_t sub_10003DF64@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10003DF74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10003DF84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10003DF94@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10003DFA4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10003DFB4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 224);
  *a2 = v2;
  return swift_retain(v2);
}

double sub_10003DFC4(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, __n128);
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, __n128);
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, __n128);
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, __n128);
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, __n128);
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  id v70;
  uint64_t v71;
  double result;
  _BYTE v73[24];
  void *v74;
  void *v75;

  v3 = v2;
  v6 = sub_10000EDC8(&qword_10047E5E0);
  KeyPath = swift_getKeyPath(&unk_1003B22F8);
  v8 = qword_10047AD88;
  swift_retain();
  if (v8 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v9 = qword_1004AF890;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v6 + 272);
  v11 = swift_retain();
  *(_QWORD *)(v3 + 64) = v10(KeyPath, v9, v11);
  v12 = swift_getKeyPath(&unk_1003B2320);
  v13 = sub_10000EDC8((uint64_t *)&unk_100486710);
  v14 = qword_1004AF890;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v13 + 272);
  v16 = swift_retain();
  *(_QWORD *)(v3 + 72) = v15(v12, v14, v16);
  v17 = sub_10000EDC8(&qword_10047ECF0);
  v18 = swift_getKeyPath(&unk_1003B2348);
  v19 = qword_1004AF890;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v17 + 272);
  v21 = swift_retain();
  *(_QWORD *)(v3 + 80) = v20(v18, v19, v21);
  v22 = sub_10000EDC8(&qword_10047D438);
  v23 = swift_getKeyPath(&unk_1003B2370);
  v24 = qword_1004AF890;
  v25 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v22 + 272);
  v26 = swift_retain();
  *(_QWORD *)(v3 + 88) = v25(v23, v24, v26);
  v27 = sub_10000EDC8(&qword_10047D440);
  v28 = swift_getKeyPath(&unk_1003B2398);
  v29 = qword_1004AF890;
  v30 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v27 + 272);
  v31 = swift_retain();
  *(_QWORD *)(v3 + 96) = v30(v28, v29, v31);
  v32 = sub_10000EDC8(&qword_10047D448);
  v33 = swift_getKeyPath(&unk_1003B23C0);
  v34 = qword_1004AF890;
  v35 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v32 + 272);
  v36 = swift_retain();
  *(_QWORD *)(v3 + 104) = v35(v33, v34, v36);
  v37 = sub_10000EDC8(&qword_10047D450);
  v38 = swift_getKeyPath(&unk_1003B23E8);
  v39 = qword_1004AF890;
  v40 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v37 + 272);
  v41 = swift_retain();
  *(_QWORD *)(v3 + 112) = v40(v38, v39, v41);
  v42 = swift_getKeyPath(&unk_1003B2410);
  v43 = sub_10000EDC8((uint64_t *)&unk_10047E5D0);
  v44 = qword_1004AF890;
  v45 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v43 + 272);
  v46 = swift_retain();
  *(_QWORD *)(v3 + 120) = v45(v42, v44, v46);
  v47 = swift_getKeyPath(&unk_1003B2438);
  v48 = sub_10000EDC8(&qword_10047D458);
  v49 = qword_1004AF890;
  v50 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v48 + 272);
  v51 = swift_retain();
  *(_QWORD *)(v3 + 128) = v50(v47, v49, v51);
  v52 = sub_10000EDC8(&qword_10047D460);
  v53 = swift_getKeyPath(&unk_1003B2460);
  v54 = qword_1004AF890;
  v55 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v52 + 272);
  v56 = swift_retain();
  *(_QWORD *)(v3 + 136) = v55(v53, v54, v56);
  v57 = swift_getKeyPath(&unk_1003B2488);
  v58 = sub_10000EDC8(&qword_10047D468);
  v59 = qword_1004AF890;
  v60 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v58 + 272);
  v61 = swift_retain();
  *(_QWORD *)(v3 + 144) = v60(v57, v59, v61);
  *(_QWORD *)(v3 + 160) = _swiftEmptyArrayStorage;
  *(_DWORD *)(v3 + 168) = 0x1000000;
  *(_QWORD *)(v3 + 176) = 0;
  *(_BYTE *)(v3 + 184) = 0;
  v62 = v3 + qword_10047D1D8;
  v63 = type metadata accessor for ARCamera.TrackingState(0);
  v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v62, 1, 1, v63);
  *(_QWORD *)(v3 + qword_10047D1E0) = 0;
  *(_QWORD *)(v3 + qword_10047D1E8) = 0;
  *(_BYTE *)(v3 + qword_10047D1F0) = 0;
  *(_BYTE *)(v3 + qword_10047D1F8) = 0;
  *(_QWORD *)(v3 + qword_10047D200) = 0;
  *(_BYTE *)(v3 + qword_10047D208) = 0;
  *(_BYTE *)(v3 + qword_10047D210) = 1;
  v65 = qword_10047D218;
  *(double *)(v3 + v65) = static Date.timeIntervalSinceReferenceDate.getter(v64);
  v66 = qword_10047D220;
  *(double *)(v3 + v66) = static Date.timeIntervalSinceReferenceDate.getter(v67);
  v68 = *(void **)(v3 + 176);
  *(_QWORD *)(v3 + 176) = a1;
  v69 = a1;

  *(_QWORD *)(v3 + 152) = a2;
  v70 = a2;
  swift_release();
  v74 = &type metadata for Configurations.Default;
  v75 = &protocol witness table for Configurations.Default;
  v71 = StateObserver.init(configuration:)(v73);
  *(double *)(v71 + qword_10047D218) = *(double *)(v71 + qword_10047D218) + -1.0;
  result = *(double *)(v71 + qword_10047D220) + -1.0;
  *(double *)(v71 + qword_10047D220) = result;
  return result;
}

uint64_t sub_10003E440@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10003E450@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10003E460@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10003E470@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10003E484@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10003E498@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 224);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10003E4A8(uint64_t a1)
{
  uint64_t v1;

  return sub_10003B5B8(a1, v1);
}

void sub_10003E4B0(const void *a1)
{
  uint64_t v1;

  sub_10003B760(a1, v1);
}

uint64_t sub_10003E4B8(uint64_t a1)
{
  uint64_t v1;

  return sub_10003BBAC(a1, v1);
}

void sub_10003E4C0(uint64_t a1)
{
  sub_10003BC88(*(_QWORD *)(a1 + 8));
}

_BYTE *sub_10003E4C8(_BYTE *result)
{
  uint64_t v1;

  if (*result == 2)
    *(_BYTE *)(v1 + 169) = 1;
  return result;
}

void sub_10003E4E0(uint64_t a1)
{
  uint64_t v1;

  sub_10003CC8C(a1, v1);
}

uint64_t sub_10003E4E8(char *a1)
{
  uint64_t v1;

  return sub_10003CDCC(a1, v1);
}

uint64_t sub_10003E4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ARCamera.TrackingState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003E534(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8(&qword_10047C2C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003E57C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ARCamera.TrackingState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003E5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ARCamera.TrackingState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10003E5FC()
{
  uint64_t v0;
  void *v1;

  *(_BYTE *)(v0 + qword_10047D1F0) = 1;
  v1 = *(void **)(v0 + qword_10047D1E8);
  *(_QWORD *)(v0 + qword_10047D1E8) = 0;

}

uint64_t sub_10003E620(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003E630(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10003E638()
{
  uint64_t v0;

  *(_BYTE *)(v0 + qword_10047D208) = 1;
}

ValueMetadata *type metadata accessor for DeletedMeasurementsState()
{
  return &type metadata for DeletedMeasurementsState;
}

uint64_t sub_10003E664()
{
  uint64_t result;

  result = Contexts.UIKit.init()();
  qword_1004AF1B8 = result;
  return result;
}

id sub_10003E680@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A870 != -1)
    swift_once(&qword_10047A870, sub_10003E664);
  v2 = (void *)qword_1004AF1B8;
  *a1 = qword_1004AF1B8;
  return v2;
}

uint64_t sub_10003E6D0(uint64_t *a1, uint64_t *a2)
{
  return sub_10003E744(*a1, *a2);
}

unint64_t sub_10003E6DC(uint64_t a1)
{
  unint64_t result;

  result = sub_10003E700();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003E700()
{
  unint64_t result;

  result = qword_10047D498;
  if (!qword_10047D498)
  {
    result = swift_getWitnessTable(&unk_1003B24CC, &type metadata for DeletedMeasurementsState);
    atomic_store(result, (unint64_t *)&qword_10047D498);
  }
  return result;
}

uint64_t sub_10003E744(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t i;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  _QWORD v34[9];

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v31 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v32 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v33 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_24;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v10 >= v32)
      return 1;
    v11 = *(_QWORD *)(v31 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v32)
        return 1;
      v11 = *(_QWORD *)(v31 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v32)
          return 1;
        v11 = *(_QWORD *)(v31 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_23:
    v6 = (v11 - 1) & v11;
    v33 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    Hasher.init(_seed:)(v34);
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(v34, v17, v16);
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_39;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = v22[1];
    v24 = *v22 == v17 && v23 == v16;
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, v17, v16, 0) & 1) == 0)
    {
      v25 = ~v19;
      for (i = v20 + 1; ; i = v27 + 1)
      {
        v27 = i & v25;
        if (((*(_QWORD *)(v7 + (((i & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v25)) & 1) == 0)
          break;
        v28 = (_QWORD *)(v21 + 16 * v27);
        v29 = v28[1];
        v30 = *v28 == v17 && v29 == v16;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v17, v16, 0) & 1) != 0)
          goto LABEL_7;
      }
LABEL_39:
      swift_bridgeObjectRelease(v16);
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease(v16);
    result = v14;
    v3 = v33;
  }
  v13 = v3 + 4;
  if (v3 + 4 >= v32)
    return 1;
  v11 = *(_QWORD *)(v31 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v32)
      return 1;
    v11 = *(_QWORD *)(v31 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_23;
  }
LABEL_43:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for PersonHeightCoachingState()
{
  return &type metadata for PersonHeightCoachingState;
}

uint64_t sub_10003E9E0()
{
  uint64_t result;

  result = Contexts.UIKit.init()();
  qword_1004AF1C0 = result;
  return result;
}

id sub_10003E9FC@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A878 != -1)
    swift_once(&qword_10047A878, sub_10003E9E0);
  v2 = (void *)qword_1004AF1C0;
  *a1 = qword_1004AF1C0;
  return v2;
}

unint64_t sub_10003EA4C(uint64_t a1)
{
  unint64_t result;

  result = sub_10003EA70();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003EA70()
{
  unint64_t result;

  result = qword_10047D4C8;
  if (!qword_10047D4C8)
  {
    result = swift_getWitnessTable(&unk_1003B253C, &type metadata for PersonHeightCoachingState);
    atomic_store(result, (unint64_t *)&qword_10047D4C8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SessionResetEvent(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s7Measure25PersonHeightCoachingStateV13CoachingStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10003EB90 + 4 * byte_1003B2515[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10003EBC4 + 4 * byte_1003B2510[v4]))();
}

uint64_t sub_10003EBC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003EBCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003EBD4);
  return result;
}

uint64_t sub_10003EBE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003EBE8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10003EBEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003EBF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PersonHeightCoachingState.CoachingState()
{
  return &type metadata for PersonHeightCoachingState.CoachingState;
}

unint64_t sub_10003EC14()
{
  unint64_t result;

  result = qword_10047D4D0;
  if (!qword_10047D4D0)
  {
    result = swift_getWitnessTable(&unk_1003B25D0, &type metadata for PersonHeightCoachingState.CoachingState);
    atomic_store(result, (unint64_t *)&qword_10047D4D0);
  }
  return result;
}

uint64_t sub_10003EC5C()
{
  uint64_t v0;

  sub_10001ADF4(v0 + 16);
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for WeakCoachingControllerDelegate()
{
  return objc_opt_self(_TtC7Measure30WeakCoachingControllerDelegate);
}

uint64_t sub_10003ECA0(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_10003ECCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[24];

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  result = __chkstk_darwin();
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (!a1)
  {
    Date.init(timeIntervalSince1970:)(result, 0.0);
    goto LABEL_5;
  }
  if (*(_QWORD *)(v1 + qword_10047D5F0) != a1)
  {
    Date.init()(result);
LABEL_5:
    v8 = v1 + qword_10047D5E8;
    swift_beginAccess(v1 + qword_10047D5E8, v10, 33, 0);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 40))(v8, v7, v3);
    result = swift_endAccess(v10);
  }
  *(_QWORD *)(v1 + qword_10047D5F0) = a1;
  return result;
}

void sub_10003EDB4(void *a1, double a2, double a3, double a4, double a5)
{
  char *v5;
  objc_class *ObjectType;
  uint64_t v12;
  uint64_t KeyPath;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  id v48;
  void *v49;
  char *v50;
  id v51;
  uint64_t v52;
  NSString v53;
  id v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  id v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  char *v72;
  char *v73;
  _QWORD v74[6];
  objc_super v75;

  ObjectType = (objc_class *)swift_getObjectType(v5);
  *(_QWORD *)&v5[qword_10047D598] = 0;
  *(_QWORD *)&v5[qword_10047D5A0] = 0;
  *(_QWORD *)&v5[qword_10047D5A8] = 0;
  v12 = qword_10047D5B0;
  sub_10000EDC8((uint64_t *)&unk_10047D810);
  KeyPath = swift_getKeyPath(&unk_1003B2690);
  v14 = v5;
  *(_QWORD *)&v5[v12] = MutableStateBinding.__allocating_init(_:_:)(KeyPath, ObjectType);
  v15 = qword_10047D5B8;
  v16 = sub_10000EDC8(&qword_10047BBA8);
  v17 = swift_getKeyPath(&unk_1003B26B8);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v18 = qword_1004AF890;
  v19 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v16 + 272);
  v20 = swift_retain();
  *(_QWORD *)&v14[v15] = v19(v17, v18, v20);
  v21 = qword_10047D5C0;
  sub_10000EDC8((uint64_t *)&unk_10047D820);
  v22 = swift_getKeyPath(&unk_1003B26E0);
  *(_QWORD *)&v14[v21] = MutableStateValue.__allocating_init(_:_:)(v22, ObjectType);
  v23 = qword_10047D5C8;
  v24 = sub_10000EDC8((uint64_t *)&unk_1004810D0);
  v25 = swift_getKeyPath(&unk_1003B2708);
  v26 = qword_1004AF890;
  v27 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v24 + 272);
  v28 = swift_retain();
  v29 = v27(v25, v26, v28);
  *(_QWORD *)&v14[v23] = v29;
  *(_QWORD *)&v14[qword_10047D5E0] = 0x3FE3333333333333;
  Date.init()(v29);
  *(_QWORD *)&v14[qword_10047D5F0] = 0;
  v30 = CGRect.center.getter(a2, a3, a4, a5);
  v32 = v31;
  v33 = static CGSize.* infix(_:_:)(a4, a5, 3.0);
  v35 = CGRect.init(center:size:)(v30, v32, v33, v34);
  v39 = objc_msgSend(objc_allocWithZone((Class)ARCoachingOverlayView), "initWithFrame:", v35, v36, v37, v38);
  v40 = qword_10047D590;
  *(_QWORD *)&v14[qword_10047D590] = v39;
  objc_msgSend(v39, "setSession:", a1);
  v41 = *(void **)&v14[v40];
  v42 = (void *)objc_opt_self(Gestalt);
  v43 = v41;
  if (objc_msgSend(v42, "jasperAvailable"))
    v44 = 0;
  else
    v44 = 3;
  objc_msgSend(v43, "setGoal:", v44);

  v45 = a5;
  if (qword_10047B098 != -1)
    swift_once(&qword_10047B098, sub_10019752C);
  *(float *)&v14[qword_10047D5D0] = *(float *)&dword_1004AFBA0 + v45;
  v46 = a5 - a4;
  v47 = (float)(v46 * 0.5) + v45;
  if (qword_10047B0A0 != -1)
    swift_once(&qword_10047B0A0, sub_100197588);
  *(float *)&v14[qword_10047D5D8] = v47 + *(float *)&dword_1004AFBA4;

  v75.receiver = v14;
  v75.super_class = ObjectType;
  v48 = objc_msgSendSuper2(&v75, "initWithFrame:", a2, a3, a4, a5);
  v49 = (void *)objc_opt_self(NSUserDefaults);
  v50 = (char *)v48;
  v51 = objc_msgSend(v49, "standardUserDefaults");
  v52 = *(_QWORD *)(Defaults.showLightIntensityDebugInfo.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v52);
  v53 = String._bridgeToObjectiveC()();
  LODWORD(v52) = objc_msgSend(v51, "BOOLForKey:", v53, swift_bridgeObjectRelease(v52).n128_f64[0]);

  if (!(_DWORD)v52)
    goto LABEL_18;
  v54 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v55 = qword_10047D5A8;
  v56 = *(void **)&v50[qword_10047D5A8];
  *(_QWORD *)&v50[qword_10047D5A8] = v54;

  v57 = *(void **)&v50[v55];
  if (!v57)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  objc_msgSend(v57, "setFrame:", a2, a3, a4, a5);
  v58 = *(void **)&v50[v55];
  if (!v58)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  objc_msgSend(v58, "setTextAlignment:", 1);
  v59 = *(void **)&v50[v55];
  if (!v59)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v60 = (void *)objc_opt_self(UIColor);
  v61 = v59;
  v62 = objc_msgSend(v60, "yellowColor");
  objc_msgSend(v61, "setTextColor:", v62);

  v63 = *(void **)&v50[v55];
  if (!v63)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v64 = v63;
  v65 = objc_msgSend(v60, "blackColor");
  objc_msgSend(v64, "setShadowColor:", v65);

  v66 = *(void **)&v50[v55];
  if (!v66)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  objc_msgSend(v66, "setNumberOfLines:", 0);
  if (*(_QWORD *)&v50[v55])
  {
    objc_msgSend(v50, "addSubview:");
LABEL_18:
    v67 = qword_10047D590;
    objc_msgSend(*(id *)&v50[qword_10047D590], "setDelegate:", v50);
    objc_msgSend(v50, "addSubview:", *(_QWORD *)&v50[v67]);
    v68 = objc_opt_self(UIView);
    v69 = swift_allocObject(&unk_100440798, 24, 7);
    *(_QWORD *)(v69 + 16) = v50;
    v70 = swift_allocObject(&unk_1004407C0, 32, 7);
    *(_QWORD *)(v70 + 16) = sub_1000413DC;
    *(_QWORD *)(v70 + 24) = v69;
    v74[4] = sub_100030C24;
    v74[5] = v70;
    v74[0] = _NSConcreteStackBlock;
    v74[1] = 1107296256;
    v74[2] = sub_1000DDB80;
    v74[3] = &unk_1004407D8;
    v71 = _Block_copy(v74);
    v72 = v50;
    swift_retain();
    objc_msgSend((id)v68, "performWithoutAnimation:", v71, swift_release().n128_f64[0]);
    _Block_release(v71);
    LOBYTE(v68) = swift_isEscapingClosureAtFileLocation(v70, "", 93, 85, 40, 1);
    swift_release();
    if ((v68 & 1) == 0)
    {
      v73 = v72;
      objc_msgSend(v73, "setUserInteractionEnabled:", 0);
      swift_release();

      return;
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_26:
  __break(1u);
}

void sub_10003F47C()
{
  uint64_t v0;
  uint64_t v1;

  swift_retain();
  StateValue.wrappedValue.getter(&v1, v0);
  swift_release();
  sub_10003F4D0(v1);
}

void sub_10003F4D0(uint64_t a1)
{
  char *v1;
  double v3;
  CGFloat m43;
  CGFloat m44;
  _BOOL4 v6;
  uint64_t *v7;
  int v8;
  void *v9;
  CGFloat v10;
  void *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CATransform3D aBlock;
  CGAffineTransform m;

  switch(a1)
  {
    case 2:
      v3 = 3.14159265;
      break;
    case 4:
      v3 = -*(double *)CGFloat.piDiv2.unsafeMutableAddressor();
      break;
    case 3:
      v3 = *(double *)CGFloat.piDiv2.unsafeMutableAddressor();
      break;
    default:
      v3 = 0.0;
      break;
  }
  CGAffineTransformMakeRotation((CGAffineTransform *)&aBlock, v3);
  *(_OWORD *)&m.a = *(_OWORD *)&aBlock.m11;
  *(_OWORD *)&m.c = *(_OWORD *)&aBlock.m13;
  *(_OWORD *)&m.tx = *(_OWORD *)&aBlock.m21;
  CATransform3DMakeAffineTransform(&aBlock, &m);
  v18 = *(_OWORD *)&aBlock.m13;
  v19 = *(_OWORD *)&aBlock.m11;
  v16 = *(_OWORD *)&aBlock.m23;
  v17 = *(_OWORD *)&aBlock.m21;
  v14 = *(_OWORD *)&aBlock.m33;
  v15 = *(_OWORD *)&aBlock.m31;
  v13 = *(_OWORD *)&aBlock.m41;
  m43 = aBlock.m43;
  m44 = aBlock.m44;
  v6 = sub_1000413F4(a1);
  v7 = &qword_10047D5D8;
  if (!v6)
    v7 = &qword_10047D5D0;
  v8 = *(_DWORD *)&v1[*v7];
  v9 = (void *)objc_opt_self(UIView);
  v10 = COERCE_DOUBLE(swift_allocObject(&unk_100440810, 156, 7));
  *(_QWORD *)(*(_QWORD *)&v10 + 16) = v1;
  *(_OWORD *)(*(_QWORD *)&v10 + 24) = v19;
  *(_OWORD *)(*(_QWORD *)&v10 + 40) = v18;
  *(_OWORD *)(*(_QWORD *)&v10 + 56) = v17;
  *(_OWORD *)(*(_QWORD *)&v10 + 72) = v16;
  *(_OWORD *)(*(_QWORD *)&v10 + 88) = v15;
  *(_OWORD *)(*(_QWORD *)&v10 + 104) = v14;
  *(_OWORD *)(*(_QWORD *)&v10 + 120) = v13;
  *(CGFloat *)(*(_QWORD *)&v10 + 136) = m43;
  *(CGFloat *)(*(_QWORD *)&v10 + 144) = m44;
  *(_DWORD *)(*(_QWORD *)&v10 + 152) = v8;
  *(_QWORD *)&aBlock.m21 = sub_100041428;
  aBlock.m22 = v10;
  *(_QWORD *)&aBlock.m11 = _NSConcreteStackBlock;
  *(_QWORD *)&aBlock.m12 = 1107296256;
  *(_QWORD *)&aBlock.m13 = sub_10003ECA0;
  *(_QWORD *)&aBlock.m14 = &unk_100440828;
  v11 = _Block_copy(&aBlock);
  v12 = v1;
  swift_release();
  objc_msgSend(v9, "animateWithDuration:delay:options:animations:completion:", 0, v11, 0, 0.25, 0.25);
  _Block_release(v11);
}

double sub_10003F6B4()
{
  void *v0;
  uint64_t v1;
  id v2;
  double result;
  _QWORD v4[4];
  _BYTE v5[16];
  void *v6;

  v6 = v0;
  swift_retain();
  StateValue.ifUpdated(_:)(sub_100041810, v5);
  swift_release();
  v1 = swift_allocObject(&unk_100440860, 24, 7);
  *(_QWORD *)(v1 + 16) = v0;
  v4[2] = sub_10004183C;
  v4[3] = v1;
  swift_retain();
  v2 = v0;
  StateValue.ifUpdated(_:)(sub_10004185C, v4);
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_10003F770(uint64_t *a1)
{
  uint64_t v1;
  __n128 v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *a1;
  v2 = swift_retain();
  StateValue.previous.getter(&v4, v2);
  swift_release();
  v3 = v4;
  sub_10003F7E0(v4, v1);
  sub_100041880(v3);
}

void sub_10003F7E0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  __n128 v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((~a1 & 0xF000000000000007) == 0 || (sub_1000915E8(a1), (v14 & 1) == 0))
  {
    if (a2 == 0xC000000000000018)
    {
      sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
      v15 = (void *)static OS_dispatch_queue.main.getter();
      v16 = swift_allocObject(&unk_100440888, 24, 7);
      *(_QWORD *)(v16 + 16) = v3;
      aBlock[4] = sub_100041894;
      aBlock[5] = v16;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10003ECA0;
      aBlock[3] = &unk_1004408A0;
      v17 = _Block_copy(aBlock);
      v18 = v3;
      v19 = swift_release();
      static DispatchQoS.unspecified.getter(v19);
      aBlock[0] = _swiftEmptyArrayStorage;
      v20 = sub_100030E1C();
      v21 = sub_10000EDC8((uint64_t *)&unk_10047E430);
      v22 = sub_100030E64();
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v6, v20);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v17);
      _Block_release(v17);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
  }
}

id sub_10003F9EC(uint64_t a1, __int128 *a2, float a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  double v9;
  double v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[7];
  uint64_t v20;
  uint64_t v21;

  v17 = a2[1];
  v18 = *a2;
  v15 = a2[3];
  v16 = a2[2];
  v13 = a2[5];
  v14 = a2[4];
  v12 = a2[6];
  v5 = *((_QWORD *)a2 + 14);
  v6 = *((_QWORD *)a2 + 15);
  v7 = qword_10047D590;
  v8 = objc_msgSend(*(id *)(a1 + qword_10047D590), "layer");
  v19[0] = v18;
  v19[1] = v17;
  v19[2] = v16;
  v19[3] = v15;
  v19[4] = v14;
  v19[5] = v13;
  v19[6] = v12;
  v20 = v5;
  v21 = v6;
  objc_msgSend(v8, "setTransform:", v19);

  *(float *)&v9 = a3;
  objc_msgSend(*(id *)(a1 + v7), "setResetButtonPortraitVerticalOffset:", v9);
  *(float *)&v10 = a3;
  objc_msgSend(*(id *)(a1 + v7), "setResetButtonLandscapeVerticalOffset:", v10);
  objc_msgSend(*(id *)(a1 + v7), "updateConstraintsIfNeeded");
  return objc_msgSend(*(id *)(a1 + v7), "layoutIfNeeded");
}

void sub_10003FB0C()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v1 = v0;
  v2 = objc_msgSend(v0, "superview");
  if (v2)
  {
    v15 = v2;
    v3 = (void *)objc_opt_self(Gestalt);
    if (!objc_msgSend(v3, "jasperAvailable")
      || (v4 = sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr),
          (static UIDevice.isIPhone()(v4) & 1) == 0))
    {
      objc_msgSend(v15, "frame");
      objc_msgSend(v0, "setFrame:");
    }
    v5 = qword_10047D598;
    if (!*(_QWORD *)&v0[qword_10047D598])
    {
      v6 = objc_allocWithZone((Class)type metadata accessor for CalloutViewRegular(0));
      sub_10002E1A4(v0, 0, 0);
      v7 = *(void **)&v0[v5];
      *(_QWORD *)&v0[v5] = v8;

    }
    v9 = qword_10047D5A0;
    if (*(_QWORD *)&v0[qword_10047D5A0])
    {
      v10 = v15;
    }
    else
    {
      if (objc_msgSend(v3, "jasperAvailable")
        && (sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr),
            (static UIDevice.isIPad()() & 1) != 0))
      {
        v11 = objc_allocWithZone((Class)type metadata accessor for CalloutViewSpatial(0));
        v12 = sub_1000DE028(v0, 1);
      }
      else
      {
        v13 = objc_allocWithZone((Class)type metadata accessor for CalloutViewRegular(0));
        sub_10002E1A4(v0, 0, 1);
      }
      v14 = v12;

      v10 = *(void **)&v1[v9];
      *(_QWORD *)&v1[v9] = v14;
    }

  }
}

void sub_10003FCB8(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  double v15;
  _QWORD *v16;
  void (*v17)(_QWORD, _QWORD, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  id v21;
  _BYTE v23[24];

  v4 = v3;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((sub_10003FE50(a3) & 1) != 0)
  {
    if ((a2 & 1) == 0
      || *(_QWORD *)(v4 + qword_10047D5F0) == a1
      || (v12 = v4 + qword_10047D5E8,
          v13 = swift_beginAccess(v4 + qword_10047D5E8, v23, 0, 0),
          v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, v12, v8, v13),
          v15 = Date.timeIntervalSinceNow.getter(v14),
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8),
          v15 < -0.6))
    {
      v16 = *(_QWORD **)(v4 + qword_10047D5A0);
      if (v16)
      {
        v17 = *(void (**)(_QWORD, _QWORD, uint64_t))((swift_isaMask & *v16) + 0xF8);
        v18 = v16;
        v17(0, 0, 1);

      }
      if ((a2 & 1) != 0)
        v19 = a1;
      else
        v19 = 0;
      sub_10003ECCC(v19);
      sub_10003FB0C();
      v20 = *(void **)(v4 + qword_10047D598);
      if (v20)
      {
        v21 = v20;
        sub_10002F2F8(a2 & 1, a1, 0);

      }
    }
  }
}

uint64_t sub_10003FE50(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t *__return_ptr, uint64_t);
  uint64_t v8;
  uint64_t v10;
  char v11;

  v2 = v1;
  if ((a1 & 1) != 0)
  {
    if (objc_msgSend(*(id *)(v1 + qword_10047D590), "isActive"))
    {
      v3 = *(_QWORD *)(v1 + qword_10047D5B0);
      v4 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 144);
      v5 = swift_retain(*(_QWORD *)(v2 + qword_10047D5B0));
      v4(&v10, v5);
      swift_release(v3);
      if (BYTE4(v10) != 1)
        return 1;
    }
  }
  v6 = *(_QWORD *)(v2 + qword_10047D5B0);
  v7 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 144);
  v8 = swift_retain(v6);
  v7((uint64_t *)((char *)&v10 + 5), v8);
  swift_release(v6);
  if ((v11 & 1) != 0)
    return 0;
  else
    return objc_msgSend(*(id *)(v2 + qword_10047D590), "isActive") ^ 1;
}

void sub_10003FF30(uint64_t a1, char a2)
{
  uint64_t v2;
  void (*v5)(uint64_t *__return_ptr, __n128);
  __n128 v6;
  double v7;
  _QWORD *v8;
  void (*v9)(_QWORD, uint64_t, _QWORD);
  _QWORD *v10;
  uint64_t v11;

  v5 = *(void (**)(uint64_t *__return_ptr, __n128))(**(_QWORD **)(v2 + qword_10047D5B0) + 144);
  v6 = swift_retain();
  v5(&v11, v6);
  *(_QWORD *)&v7 = swift_release().n128_u64[0];
  if ((v11 & 0x100000000) == 0
    && (objc_msgSend(*(id *)(v2 + qword_10047D590), "isActive", v7) & 1) == 0)
  {
    sub_10003FB0C();
    v8 = *(_QWORD **)(v2 + qword_10047D5A0);
    if (v8)
    {
      v9 = *(void (**)(_QWORD, uint64_t, _QWORD))((swift_isaMask & *v8) + 0xF8);
      v10 = v8;
      v9(a2 & 1, a1, 0);

    }
  }
}

void sub_100040008(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_100041438();
}

void sub_10004002C()
{
  _swift_stdlib_reportUnimplementedInitializer("Measure.CoachingView", 20, "init(frame:)", 12, 0);
  __break(1u);
}

uint64_t sub_100040058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + qword_10047D5B0));
  swift_release(*(_QWORD *)(v0 + qword_10047D5B8));
  swift_release(*(_QWORD *)(v0 + qword_10047D5C0));
  swift_release(*(_QWORD *)(v0 + qword_10047D5C8));
  v1 = v0 + qword_10047D5E8;
  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t sub_100040114(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(a1 + qword_10047D5B0));
  swift_release(*(_QWORD *)(a1 + qword_10047D5B8));
  swift_release(*(_QWORD *)(a1 + qword_10047D5C0));
  swift_release(*(_QWORD *)(a1 + qword_10047D5C8));
  v2 = a1 + qword_10047D5E8;
  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t type metadata accessor for CoachingView(uint64_t a1)
{
  uint64_t result;

  result = qword_10047D620;
  if (!qword_10047D620)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CoachingView);
  return result;
}

uint64_t sub_100040210(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  v4[2] = "\b";
  v4[3] = "\b";
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[9] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[11] = *(_QWORD *)(result - 8) + 64;
    v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
    return swift_initClassMetadata2(a1, 256, 13, v4, a1 + 184);
  }
  return result;
}

uint64_t sub_1000402C8()
{
  return type metadata accessor for CoachingView(0);
}

uint64_t sub_100040464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  __n128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter();
  v14 = swift_allocObject(a1, 24, 7);
  *(_QWORD *)(v14 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = a3;
  v15 = _Block_copy(aBlock);
  v16 = v3;
  v17 = swift_release();
  static DispatchQoS.unspecified.getter(v17);
  aBlock[0] = _swiftEmptyArrayStorage;
  v18 = sub_100030E1C();
  v19 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v20 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v22);
}

void sub_10004063C(uint64_t a1)
{
  _QWORD *v2;
  void (*v3)(_QWORD, _QWORD, uint64_t);
  _QWORD *v4;
  void *v5;
  id v6;

  sub_10003ECCC(0);
  v2 = *(_QWORD **)(a1 + qword_10047D5A0);
  if (v2)
  {
    v3 = *(void (**)(_QWORD, _QWORD, uint64_t))((swift_isaMask & *v2) + 0xF8);
    v4 = v2;
    v3(0, 0, 1);

  }
  v5 = *(void **)(a1 + qword_10047D598);
  if (v5)
  {
    v6 = v5;
    sub_10002F2F8(0, 0, 1);

  }
}

void sub_100040700(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + qword_10047D598);
  if (v3)
  {
    v4 = v3;
    sub_10002F2F8(0, 0, 1);

  }
  sub_10003FF30(a2, 1);
}

void sub_100040764(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  double v9;
  _QWORD *v10;
  void (*v11)(_QWORD, _QWORD, uint64_t);
  _QWORD *v12;
  void *v13;
  id v14;
  _BYTE v16[24];

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (!*(_QWORD *)(a1 + qword_10047D5F0)
    || (v6 = a1 + qword_10047D5E8,
        v7 = swift_beginAccess(a1 + qword_10047D5E8, v16, 0, 0),
        v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v5, v6, v2, v7),
        v9 = Date.timeIntervalSinceNow.getter(v8),
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2),
        v9 < -0.6))
  {
    sub_10003ECCC(0);
    v10 = *(_QWORD **)(a1 + qword_10047D5A0);
    if (v10)
    {
      v11 = *(void (**)(_QWORD, _QWORD, uint64_t))((swift_isaMask & *v10) + 0xF8);
      v12 = v10;
      v11(0, 0, 1);

    }
    v13 = *(void **)(a1 + qword_10047D598);
    if (v13)
    {
      v14 = v13;
      sub_10002F2F8(0, 0, 1);

    }
  }
}

void sub_1000408C4(char a1)
{
  char *v1;
  id v3;
  unsigned int v4;
  uint64_t v5;

  v3 = objc_msgSend((id)objc_opt_self(NSThread), "currentThread");
  v4 = objc_msgSend(v3, "isMainThread");

  if (v4)
  {
    if ((a1 & 1) != 0)
    {
      v5 = qword_10047D590;
      objc_msgSend(*(id *)&v1[qword_10047D590], "setGoal:", 0);
      if (objc_msgSend(*(id *)&v1[v5], "isActive"))
      {
        objc_msgSend(*(id *)&v1[v5], "setActive:animated:", 0, 1);
        objc_msgSend(v1, "setUserInteractionEnabled:", 0);
      }
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000029, 0x80000001003D9DB0, "Measure/CoachingView.swift", 26, 2, 334, 0);
    __break(1u);
  }
}

uint64_t sub_1000409E8(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  char *v26;
  __n128 v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD aBlock[6];

  v3 = v2;
  v33 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ARCamera.TrackingState(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  result = __chkstk_darwin(v12);
  v16 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)&v3[qword_10047D5A8])
  {
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    v31 = v6;
    v17 = static OS_dispatch_queue.main.getter();
    v32 = v9;
    v18 = (void *)v17;
    sub_10003E4F0(a1, (uint64_t)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    v19 = *(unsigned __int8 *)(v13 + 80);
    v20 = (v19 + 24) & ~v19;
    v21 = (v14 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = swift_allocObject(&unk_100440338, v21 + 8, v19 | 7);
    *(_QWORD *)(v22 + 16) = v3;
    sub_10003E5B8((uint64_t)v16, v22 + v20);
    v23 = v33;
    *(_QWORD *)(v22 + v21) = v33;
    aBlock[4] = sub_1000411B4;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003ECA0;
    aBlock[3] = &unk_100440350;
    v24 = _Block_copy(aBlock);
    v25 = v23;
    v26 = v3;
    v27 = swift_release();
    static DispatchQoS.unspecified.getter(v27);
    aBlock[0] = _swiftEmptyArrayStorage;
    v28 = sub_100030E1C();
    v29 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v30 = sub_100030E64();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v29, v30, v5, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v24);
    _Block_release(v24);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v11, v32);
  }
  return result;
}

void sub_100040C60(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  void *v4;
  id v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  NSString v11;
  void *v12;
  id v13;
  double v14;
  Swift::String v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  NSString v22;

  v3 = qword_10047D5A8;
  v4 = *(void **)(a1 + qword_10047D5A8);
  if (!v4)
    goto LABEL_15;
  v7 = v4;
  _StringGuts.grow(_:)(17);
  v8 = swift_bridgeObjectRelease(0xE000000000000000);
  v9._countAndFlagsBits = ARCamera.TrackingState.description.getter(v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xEF0A3A6574617453);
  objc_msgSend(v7, "setText:", v11);

  v12 = *(void **)(a1 + v3);
  if (!v12)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v13 = v12;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(0xE000000000000000);
  if (!a3)
    goto LABEL_8;
  objc_msgSend(a3, "ambientIntensity");
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v14 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v14 >= 9.22337204e18)
    __break(1u);
LABEL_8:
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v16 = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v16);
  v17 = objc_msgSend(v13, "text");
  if (!v17)
  {
LABEL_17:
    __break(1u);
    return;
  }
  v18 = v17;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21._countAndFlagsBits = 0xD000000000000012;
  v21._object = (void *)0x80000001003D9D70;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(0x80000001003D9D70);
  if (v20)
  {
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    v22 = 0;
  }
  objc_msgSend(v13, "setText:", v22);

}

uint64_t sub_100040EB8()
{
  return sub_100040464((uint64_t)&unk_100440748, (uint64_t)sub_100041394, (uint64_t)&unk_100440760);
}

uint64_t sub_100040EE4()
{
  return sub_100040464((uint64_t)&unk_1004406F8, (uint64_t)sub_100041368, (uint64_t)&unk_100440710);
}

uint64_t sub_100040F10()
{
  return sub_100040464((uint64_t)&unk_1004406A8, (uint64_t)sub_10004134C, (uint64_t)&unk_1004406C0);
}

uint64_t sub_100040F3C()
{
  return sub_100040464((uint64_t)&unk_100440658, (uint64_t)sub_100041330, (uint64_t)&unk_100440670);
}

uint64_t sub_100040F68()
{
  return sub_100040464((uint64_t)&unk_100440608, (uint64_t)sub_100041328, (uint64_t)&unk_100440620);
}

uint64_t sub_100040F94()
{
  return sub_100040464((uint64_t)&unk_1004405B8, (uint64_t)sub_1000412FC, (uint64_t)&unk_1004405D0);
}

uint64_t sub_100040FC0()
{
  return sub_100040464((uint64_t)&unk_100440568, (uint64_t)sub_1000412D0, (uint64_t)&unk_100440580);
}

uint64_t sub_100040FEC()
{
  return sub_100040464((uint64_t)&unk_100440518, (uint64_t)sub_1000412A4, (uint64_t)&unk_100440530);
}

uint64_t sub_100041018()
{
  return sub_100040464((uint64_t)&unk_1004404C8, (uint64_t)sub_100041278, (uint64_t)&unk_1004404E0);
}

uint64_t sub_100041044()
{
  return sub_100040464((uint64_t)&unk_100440478, (uint64_t)sub_10004124C, (uint64_t)&unk_100440490);
}

uint64_t sub_100041070()
{
  return sub_100040464((uint64_t)&unk_100440428, (uint64_t)sub_100041930, (uint64_t)&unk_100440440);
}

uint64_t sub_10004109C()
{
  return sub_100040464((uint64_t)&unk_1004403D8, (uint64_t)sub_100041930, (uint64_t)&unk_1004403F0);
}

uint64_t sub_1000410CC()
{
  return sub_100040464((uint64_t)&unk_100440388, (uint64_t)sub_100041210, (uint64_t)&unk_1004403A0);
}

uint64_t sub_1000410FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(type metadata accessor for ARCamera.TrackingState(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);

  v5 = type metadata accessor for ARCamera.TrackingState.Reason(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 2, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  v7 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;

  return swift_deallocObject(v0, v8, v2 | 7);
}

void sub_1000411B4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for ARCamera.TrackingState(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_100040C60(*(_QWORD *)(v0 + 16), v0 + v2, *(void **)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000411F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100041208(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100041210()
{
  sub_10003FCB8(10, 1, 2);
}

uint64_t sub_10004123C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 128);
  *a2 = v2;
  return swift_retain(v2);
}

void sub_10004124C()
{
  sub_10003FCB8(2, 1, 1);
}

void sub_100041278()
{
  sub_10003FCB8(6, 1, 2);
}

void sub_1000412A4()
{
  sub_10003FCB8(5, 1, 2);
}

void sub_1000412D0()
{
  sub_10003FCB8(1, 1, 2);
}

void sub_1000412FC()
{
  sub_10003FCB8(9, 1, 2);
}

void sub_100041328()
{
  uint64_t v0;

  sub_100040764(*(_QWORD *)(v0 + 16));
}

void sub_100041330()
{
  uint64_t v0;

  sub_100040700(*(_QWORD *)(v0 + 16), 7);
}

void sub_10004134C()
{
  uint64_t v0;

  sub_100040700(*(_QWORD *)(v0 + 16), 8);
}

void sub_100041368()
{
  sub_10003FCB8(4, 1, 2);
}

void sub_100041394()
{
  sub_10003FCB8(3, 1, 2);
}

uint64_t sub_1000413C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 128);
  *a2 = v2;
  return swift_retain(v2);
}

void sub_1000413DC()
{
  sub_10003F47C();
}

uint64_t sub_1000413E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

BOOL sub_1000413F4(uint64_t a1)
{
  return (unint64_t)(a1 - 3) < 2;
}

uint64_t sub_100041404()
{
  uint64_t v0;

  return swift_deallocObject(v0, 156, 7);
}

id sub_100041428()
{
  uint64_t v0;

  return sub_10003F9EC(*(_QWORD *)(v0 + 16), (__int128 *)(v0 + 24), *(float *)(v0 + 152));
}

void sub_100041438()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, __n128);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  *(_QWORD *)&v0[qword_10047D598] = 0;
  *(_QWORD *)&v0[qword_10047D5A0] = 0;
  *(_QWORD *)&v0[qword_10047D5A8] = 0;
  v3 = qword_10047D5B0;
  sub_10000EDC8((uint64_t *)&unk_10047D810);
  KeyPath = swift_getKeyPath(&unk_1003B2690);
  *(_QWORD *)&v0[v3] = MutableStateBinding.__allocating_init(_:_:)(KeyPath, ObjectType);
  v5 = qword_10047D5B8;
  v6 = sub_10000EDC8(&qword_10047BBA8);
  v7 = swift_getKeyPath(&unk_1003B26B8);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v8 = qword_1004AF890;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v6 + 272);
  v10 = swift_retain();
  *(_QWORD *)&v1[v5] = v9(v7, v8, v10);
  v11 = qword_10047D5C0;
  sub_10000EDC8((uint64_t *)&unk_10047D820);
  v12 = swift_getKeyPath(&unk_1003B26E0);
  *(_QWORD *)&v1[v11] = MutableStateValue.__allocating_init(_:_:)(v12, ObjectType);
  v13 = qword_10047D5C8;
  v14 = sub_10000EDC8((uint64_t *)&unk_1004810D0);
  v15 = swift_getKeyPath(&unk_1003B2708);
  v16 = qword_1004AF890;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v14 + 272);
  v18 = swift_retain();
  v19 = v17(v15, v16, v18);
  *(_QWORD *)&v1[v13] = v19;
  *(_QWORD *)&v1[qword_10047D5E0] = 0x3FE3333333333333;
  Date.init()(v19);
  *(_QWORD *)&v1[qword_10047D5F0] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/CoachingView.swift", 26, 2, 188, 0);
  __break(1u);
}

void sub_100041620()
{
  char *v0;
  uint64_t (*v1)(_BYTE *, __n128);
  __n128 v2;
  void (*v3)(_BYTE *, _QWORD);
  uint64_t v4;
  id v5;
  Swift::String v6;
  _BYTE v7[32];

  v1 = *(uint64_t (**)(_BYTE *, __n128))(**(_QWORD **)&v0[qword_10047D5B0] + 400);
  v2 = swift_retain();
  v3 = (void (*)(_BYTE *, _QWORD))v1(v7, v2);
  *(_BYTE *)(v4 + 3) = 1;
  v3(v7, 0);
  objc_msgSend(v0, "setUserInteractionEnabled:", 1, swift_release().n128_f64[0]);
  v5 = objc_msgSend((id)objc_opt_self(UIMenuController), "sharedMenuController");
  objc_msgSend(v5, "hideMenu");

  if (qword_10047AA88 != -1)
    swift_once(&qword_10047AA88, sub_1000E14D8);
  v6._object = (void *)0x80000001003D9E20;
  v6._countAndFlagsBits = 0xD00000000000001CLL;
  Log.default(_:isPrivate:)(v6, 0);
}

void sub_100041730()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(char *, __n128);
  __n128 v3;
  id v4;
  Swift::String v5;
  char v6;

  v1 = *(_QWORD *)(v0 + qword_10047D5C0);
  v6 = 3;
  v2 = *(void (**)(char *, __n128))(*(_QWORD *)v1 + 392);
  v3 = swift_retain();
  v2(&v6, v3);
  swift_release();
  v4 = objc_msgSend((id)objc_opt_self(UIMenuController), "sharedMenuController");
  objc_msgSend(v4, "hideMenu");

  if (qword_10047AA88 != -1)
    swift_once(&qword_10047AA88, sub_1000E14D8);
  v5._object = (void *)0x80000001003D9DE0;
  v5._countAndFlagsBits = 0x100000000000001CLL;
  Log.default(_:isPrivate:)(v5, 0);
}

void sub_100041810(uint64_t *a1)
{
  sub_10003F770(a1);
}

uint64_t sub_100041818()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10004183C(uint64_t a1)
{
  sub_10003F4D0(a1);
}

uint64_t sub_10004185C(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

void sub_100041880(unint64_t a1)
{
  if ((~a1 & 0xF000000000000007) != 0)
    sub_10001A810(a1);
}

void sub_100041894()
{
  uint64_t v0;

  sub_10004063C(*(_QWORD *)(v0 + 16));
}

id sub_10004196C()
{
  return objc_msgSend(objc_allocWithZone((Class)UISwitch), "init");
}

uint64_t sub_100041990()
{
  return sub_100042144((uint64_t)sub_10004199C);
}

id sub_10004199C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  id result;

  v3 = *a1;
  v4 = objc_opt_self(UISwitch);
  result = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(v3, v4, 0, 0, 0), "isOn");
  *(_QWORD *)(a2 + 24) = &type metadata for Bool;
  *(_BYTE *)a2 = (_BYTE)result;
  return result;
}

void sub_1000419FC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSString v10;
  id v11;
  id v12;

  v12 = sub_100041D60();
  v1 = objc_opt_self(UISwitch);
  v2 = (void *)swift_dynamicCastObjCClassUnconditional(v12, v1, 0, 0, 0);
  v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Measure11DefaultCell_def);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure11DefaultCell_def + 8);
  if (v4)
  {
    v5 = v3[3];
    v6 = v3[2];
    v7 = *v3;
    v8 = (void *)objc_opt_self(NSUserDefaults);
    sub_100043294(v7, v4, v6, v5);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v4);
    v9 = objc_msgSend(v8, "standardUserDefaults");
    v10 = String._bridgeToObjectiveC()();
    v11 = objc_msgSend(v9, "BOOLForKey:", v10);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v4);

    sub_100043264(v7, v4, v6, v5);
  }
  else
  {
    v11 = 0;
  }
  objc_msgSend(v2, "setOn:", v11);

}

uint64_t type metadata accessor for SwitchCell()
{
  return objc_opt_self(_TtC7Measure10SwitchCell);
}

id sub_100041B94()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___stack;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___stack);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___stack);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
    objc_msgSend(v4, "setAxis:", 0);
    objc_msgSend(v4, "setAlignment:", 3);
    objc_msgSend(v4, "setDistribution:", 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_100041C40()
{
  return sub_100041C58(&OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___titleLabel);
}

id sub_100041C4C()
{
  return sub_100041C58(&OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___valueLabel);
}

id sub_100041C58(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  v2 = *a1;
  v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    v4 = *(id *)(v1 + *a1);
  }
  else
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
    v6 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
    objc_msgSend(v5, "setTextColor:", v6);

    v7 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleBody);
    objc_msgSend(v5, "setFont:", v7);

    objc_msgSend(v5, "setNumberOfLines:", 1);
    v8 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    v4 = v5;

    v3 = 0;
  }
  v9 = v3;
  return v4;
}

id sub_100041D60()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___control;
  v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___control);
  if (v2)
  {
    v3 = *(id *)((char *)v0 + OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___control);
  }
  else
  {
    v4 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x120))();
    v5 = *(void **)((char *)v0 + v1);
    *(_QWORD *)((char *)v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

void sub_100041DD4()
{
  _QWORD *v0;
  id v1;
  double v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v1 = sub_100041C40();
  v3 = (_QWORD *)((char *)v0 + OBJC_IVAR____TtC7Measure11DefaultCell_def);
  v4 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7Measure11DefaultCell_def + 8);
  if (v4
    && (v5 = v3[3],
        v6 = v3[2],
        v7 = *v3,
        swift_bridgeObjectRetain(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7Measure11DefaultCell_def + 8)),
        swift_bridgeObjectRetain_n(v5, 2),
        sub_100043264(v7, v4, v6, v5),
        v5))
  {
    v8 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v2 = swift_bridgeObjectRelease(v5).n128_u64[0];
  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v1, "setText:", v8, v2);

  (*(void (**)(void))((swift_isaMask & *v0) + 0x130))();
  v9 = sub_100041C4C();
  (*(void (**)(void))((swift_isaMask & *v0) + 0x138))();
  v11 = v10;
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setText:", v12, swift_bridgeObjectRelease(v11).n128_f64[0]);

}

double sub_100041F0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  __n128 v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  _QWORD v21[3];

  v1 = sub_10000EDC8(&qword_10047D980);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v21[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x128))(v3);
  v6 = swift_allocObject(&unk_1004408F8, 24, 7);
  *(_QWORD *)(v6 + 16) = v0;
  v7 = v0;
  v8 = sub_10000EDC8(&qword_10047D988);
  v9 = sub_100043310(&qword_10047D990, &qword_10047D988, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_1000432E8, v6, v8, v9, v10);
  swift_release();
  swift_release();
  v11 = swift_allocObject(&unk_100440920, 24, 7);
  *(_QWORD *)(v11 + 16) = v7;
  v12 = sub_100043310(&qword_10047D998, &qword_10047D980, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v13 = v7;
  Publisher<>.sink(receiveValue:)(sub_100043308, v11, v1, v12, v14);
  v15 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v2 + 8))(v5, v1, v15);
  v16 = &v13[OBJC_IVAR____TtC7Measure11DefaultCell_cancellables];
  swift_beginAccess(&v13[OBJC_IVAR____TtC7Measure11DefaultCell_cancellables], v21, 33, 0);
  v17 = sub_10000EDC8(&qword_10047D9A0);
  v18 = sub_100043310(&qword_10047D9A8, &qword_10047D9A0, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v16, v17, v18);
  swift_endAccess(v21);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100042108()
{
  return 0;
}

id sub_100042114()
{
  return objc_msgSend(objc_allocWithZone((Class)UISlider), "init");
}

uint64_t sub_100042138()
{
  return sub_100042144((uint64_t)sub_100042268);
}

uint64_t sub_100042144(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v2 = sub_10000EDC8(&qword_10047D960);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100041D60();
  v12[0] = v6;
  v12[1] = 4096;
  v7 = sub_10000EDC8(&qword_10047D968);
  v8 = sub_100043310(&qword_10047D970, &qword_10047D968, (uint64_t)&unk_1003B8C30);
  Publisher.map<A>(_:)(a1, 0, v7, (char *)&type metadata for Any + 8, v8);

  v9 = sub_100043310(&qword_10047D978, &qword_10047D960, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v10 = Publisher.eraseToAnyPublisher()(v2, v9);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v10;
}

id sub_100042268@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  id result;
  int v6;

  v3 = *a1;
  v4 = objc_opt_self(UISlider);
  result = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(v3, v4, 0, 0, 0), "value");
  *(_QWORD *)(a2 + 24) = &type metadata for Float;
  *(_DWORD *)a2 = v6;
  return result;
}

void sub_1000422C8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  double v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSString v11;
  int v12;
  int v13;
  id v14;

  v14 = sub_100041D60();
  v1 = objc_opt_self(UISlider);
  v2 = (void *)swift_dynamicCastObjCClassUnconditional(v14, v1, 0, 0, 0);
  v4 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Measure11DefaultCell_def);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure11DefaultCell_def + 8);
  if (v5)
  {
    v6 = v4[3];
    v7 = v4[2];
    v8 = *v4;
    v9 = (void *)objc_opt_self(NSUserDefaults);
    sub_100043294(v8, v5, v7, v6);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v5);
    v10 = objc_msgSend(v9, "standardUserDefaults");
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "floatForKey:", v11);
    v13 = v12;
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5);

    sub_100043264(v8, v5, v7, v6);
  }
  else
  {
    v13 = 0;
  }
  LODWORD(v3) = v13;
  objc_msgSend(v2, "setValue:", v3);

}

uint64_t sub_10004243C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  int v4;
  int v5;

  v0 = sub_10000EDC8((uint64_t *)&unk_10048A100);
  v1 = swift_allocObject(v0, 72, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1003B0BD0;
  v2 = sub_100041D60();
  v3 = objc_opt_self(UISlider);
  objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(v2, v3, 0, 0, 0), "value");
  v5 = v4;

  *(_QWORD *)(v1 + 56) = &type metadata for Float;
  *(_QWORD *)(v1 + 64) = &protocol witness table for Float;
  *(_DWORD *)(v1 + 32) = v5;
  return String.init(format:_:)(1714564645, 0xE400000000000000, v1);
}

void sub_1000424EC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  double v12;
  double v13;

  v1 = sub_100041D60();
  v2 = objc_opt_self(UISlider);
  v3 = swift_dynamicCastObjCClass(v1, v2);
  if (v3)
  {
    v4 = v0 + OBJC_IVAR____TtC7Measure11DefaultCell_def;
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure11DefaultCell_def + 8);
    if (v5)
    {
      v6 = (void *)v3;
      v8 = *(_QWORD *)(v4 + 24);
      v7 = *(_QWORD *)(v4 + 32);
      v9 = *(_QWORD *)(v4 + 16);
      v10 = *(_QWORD *)v4;
      v11 = *(_BYTE *)(v4 + 40);
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure11DefaultCell_def + 8));
      swift_bridgeObjectRetain(v8);
      sub_100043264(v10, v5, v9, v8);
      if ((v11 & 1) == 0)
      {
        LODWORD(v12) = v7;
        objc_msgSend(v6, "setMinimumValue:", v12);
        LODWORD(v13) = HIDWORD(v7);
        objc_msgSend(v6, "setMaximumValue:", v13);
      }
    }
  }

  sub_100041DD4();
}

uint64_t type metadata accessor for SliderCell()
{
  return objc_opt_self(_TtC7Measure10SliderCell);
}

id sub_100042604()
{
  uint64_t v0;

  v0 = type metadata accessor for ColorPicker();
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0)), "init");
}

uint64_t sub_10004262C()
{
  return sub_100042144((uint64_t)sub_100042638);
}

uint64_t sub_100042638@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = type metadata accessor for ColorPicker();
  result = swift_dynamicCastClassUnconditional(v3, v4, 0, 0, 0);
  v6 = *(_QWORD *)(result + OBJC_IVAR____TtC7Measure11ColorPicker_value);
  a2[3] = &type metadata for Int;
  *a2 = v6;
  return result;
}

void sub_100042698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSString v11;
  id v12;
  id v13;

  v13 = sub_100041D60();
  v1 = type metadata accessor for ColorPicker();
  v2 = swift_dynamicCastClassUnconditional(v13, v1, 0, 0, 0);
  v4 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Measure11DefaultCell_def);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure11DefaultCell_def + 8);
  if (v5)
  {
    v6 = v4[3];
    v7 = v4[2];
    v8 = *v4;
    v9 = (void *)objc_opt_self(NSUserDefaults);
    sub_100043294(v8, v5, v7, v6);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v5);
    v10 = objc_msgSend(v9, "standardUserDefaults");
    v11 = String._bridgeToObjectiveC()();
    v12 = objc_msgSend(v10, "integerForKey:", v11);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5);

    sub_100043264(v8, v5, v7, v6);
  }
  else
  {
    v12 = 0;
  }
  *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure11ColorPicker_value) = v12;
  sub_1001266E4(v3);

}

uint64_t sub_100042804()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v0 = sub_100041D60();
  v1 = type metadata accessor for ColorPicker();
  v2 = swift_dynamicCastClassUnconditional(v0, v1, 0, 0, 0);
  *(double *)&v3 = sub_1001267CC(*(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure11ColorPicker_value));
  v7 = v3;

  v4 = sub_10000EDC8((uint64_t *)&unk_10048A100);
  v5 = swift_allocObject(v4, 192, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1003B0AF0;
  *(_QWORD *)(v5 + 56) = &type metadata for Float;
  *(_QWORD *)(v5 + 64) = &protocol witness table for Float;
  *(_DWORD *)(v5 + 32) = v7;
  *(_DWORD *)(v5 + 72) = DWORD1(v7);
  *(_QWORD *)(v5 + 96) = &type metadata for Float;
  *(_QWORD *)(v5 + 104) = &protocol witness table for Float;
  *(_QWORD *)(v5 + 136) = &type metadata for Float;
  *(_QWORD *)(v5 + 144) = &protocol witness table for Float;
  *(_DWORD *)(v5 + 112) = DWORD2(v7);
  *(_QWORD *)(v5 + 176) = &type metadata for Float;
  *(_QWORD *)(v5 + 184) = &protocol witness table for Float;
  *(_DWORD *)(v5 + 152) = HIDWORD(v7);
  return String.init(format:_:)(0xD000000000000018, 0x80000001003D9FC0, v5);
}

uint64_t type metadata accessor for ColorCell()
{
  return objc_opt_self(_TtC7Measure9ColorCell);
}

void sub_100042A3C(_QWORD *a1, _QWORD *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v4 = sub_100041C4C();
  (*(void (**)(void))((swift_isaMask & *a2) + 0x138))();
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setText:", v7, swift_bridgeObjectRelease(v6).n128_f64[0]);

  v8 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v9 = a1[3];
  v10 = sub_10000F66C(a1, v9);
  v11 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v9);
  v12 = *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC7Measure11DefaultCell_def + 8);
  if (v12)
  {
    v13 = v11;
    swift_bridgeObjectRetain(v12);
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "setObject:forKey:", v13, v14, swift_bridgeObjectRelease(v12).n128_f64[0]);

    swift_unknownObjectRelease(v13);
  }
  else
  {
    __break(1u);
  }
}

void sub_100042B6C()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000029, 0x80000001003D9F90, "Measure/DefaultCell.swift", 25, 2, 161, 0);
  __break(1u);
}

void sub_100042BC4()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000029, 0x80000001003D9F90, "Measure/DefaultCell.swift", 25, 2, 165, 0);
  __break(1u);
}

void sub_100042C1C()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000029, 0x80000001003D9F90, "Measure/DefaultCell.swift", 25, 2, 169, 0);
  __break(1u);
}

id sub_100042C74()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DefaultCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DefaultCell()
{
  return objc_opt_self(_TtC7Measure11DefaultCell);
}

uint64_t sub_100042D4C(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  NSString v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  Class isa;
  uint64_t result;
  objc_super v43;

  *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___stack] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___titleLabel] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___valueLabel] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___control] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11DefaultCell_cancellables] = _swiftEmptyArrayStorage;
  v3 = &v2[OBJC_IVAR____TtC7Measure11DefaultCell_def];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *(_OWORD *)(v3 + 25) = 0u;
  if (a2)
  {
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v43.receiver = v2;
    v43.super_class = (Class)type metadata accessor for DefaultCell();
    v6 = objc_msgSendSuper2(&v43, "initWithStyle:reuseIdentifier:", 0, v5);

    v7 = v6;
    v8 = sub_100041C40();
    v9 = sub_100041D60();
    v10 = sub_100041C4C();
    v11 = v8;
    v12 = sub_100041B94();
    objc_msgSend(v12, "addArrangedSubview:", v11);

    v13 = v9;
    v14 = sub_100041B94();
    objc_msgSend(v14, "addArrangedSubview:", v13);

    v15 = v10;
    v16 = sub_100041B94();
    objc_msgSend(v16, "addArrangedSubview:", v15);

    v17 = objc_msgSend(v7, "contentView");
    v18 = sub_100041B94();
    objc_msgSend(v17, "addSubview:", v18);

    v19 = sub_100041B94();
    objc_msgSend(v19, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

    v20 = (void *)objc_opt_self(NSLayoutConstraint);
    v21 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
    v22 = swift_allocObject(v21, 64, 7);
    *(_OWORD *)(v22 + 16) = xmmword_1003B1410;
    v23 = sub_100041B94();
    v24 = objc_msgSend(v23, "leftAnchor");

    v25 = objc_msgSend(v7, "leftAnchor");
    v26 = objc_msgSend(v24, "constraintEqualToAnchor:constant:", v25, 16.0);

    *(_QWORD *)(v22 + 32) = v26;
    v27 = sub_100041B94();
    v28 = objc_msgSend(v27, "rightAnchor");

    v29 = objc_msgSend(v7, "rightAnchor");
    v30 = objc_msgSend(v28, "constraintEqualToAnchor:constant:", v29, -16.0);

    *(_QWORD *)(v22 + 40) = v30;
    v31 = sub_100041B94();
    v32 = objc_msgSend(v31, "topAnchor");

    v33 = objc_msgSend(v7, "topAnchor");
    v34 = objc_msgSend(v32, "constraintEqualToAnchor:", v33);

    *(_QWORD *)(v22 + 48) = v34;
    v35 = sub_100041B94();
    v36 = objc_msgSend(v35, "bottomAnchor");

    v37 = objc_msgSend(v7, "bottomAnchor");
    v38 = objc_msgSend(v36, "constraintEqualToAnchor:", v37);

    *(_QWORD *)(v22 + 56) = v38;
    specialized Array._endMutation()(v39);
    v40 = v22;
    sub_10002277C();
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v20, "activateConstraints:", isa, swift_bridgeObjectRelease(v40).n128_f64[0]);

    sub_100041F0C();
    return (uint64_t)v7;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Measure/DefaultCell.swift", 25, 2, 121, 0);
    __break(1u);
  }
  return result;
}

void sub_1000431AC()
{
  char *v0;
  char *v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___stack] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___titleLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___valueLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure11DefaultCell____lazy_storage___control] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure11DefaultCell_cancellables] = &_swiftEmptyArrayStorage;
  v1 = &v0[OBJC_IVAR____TtC7Measure11DefaultCell_def];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *(_OWORD *)(v1 + 25) = 0u;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/DefaultCell.swift", 25, 2, 141, 0);
  __break(1u);
}

uint64_t sub_100043264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_100043294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_1000432C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

BOOL sub_1000432E8()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC7Measure11DefaultCell_def + 8) != 0;
}

void sub_100043308(_QWORD *a1)
{
  uint64_t v1;

  sub_100042A3C(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_100043310(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100012B80(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_100043354(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  double v8;
  uint64_t v9;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  void *object;
  Swift::String v23;
  Swift::String v24;
  void *v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  void *v29;
  Swift::String v30;
  _QWORD v31[13];
  _BYTE v32[16];
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;

  v5 = v4;
  v8 = *(double *)(v4 + 48);
  v9 = *(_QWORD *)(v4 + 56);
  v10 = *(unsigned __int8 *)(v4 + 64);
  v11 = *(double *)(v4 + 32);
  v12 = *(double *)(v4 + 40);
  v13 = ARFrame.viewToCamera(screenPoint:sceneView:orientation:)(a2, &protocol witness table for ARSCNView, v11, v12);
  v15 = SIMD2<>.init(_:)(v13, v14);
  if (a4
    && ((*(void (**)(_QWORD *__return_ptr, void *, uint64_t, double))(*(_QWORD *)a4 + 312))(v31, a1, 7, v15), sub_10004402C((uint64_t)v31, (uint64_t)v32), v37))
  {
    v16 = simd_float4x4.position.getter(v33, v34, v35, v36);
    v17 = 0;
    v9 = v18;
    v8 = v16;
  }
  else
  {
    v17 = v10;
  }
  *(double *)(v5 + 48) = v8;
  *(_QWORD *)(v5 + 56) = v9;
  *(_BYTE *)(v5 + 64) = v17;
  objc_msgSend(a1, "timestamp");
  *(_QWORD *)(v5 + 72) = v19;
  if ((v17 & 1) == 0 && v10)
  {
    if (qword_10047AAA0 != -1)
      swift_once(&qword_10047AAA0, sub_1000E16EC);
    _StringGuts.grow(_:)(69);
    v20._object = (void *)0x80000001003DA030;
    v20._countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v20);
    v21._countAndFlagsBits = CGPoint.debugDescription.getter(*(double *)(v5 + 8), *(double *)(v5 + 16));
    object = v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(object);
    v23._countAndFlagsBits = 0x65726373206F7420;
    v23._object = (void *)0xEF20736F70206E65;
    String.append(_:)(v23);
    v24._countAndFlagsBits = CGPoint.debugDescription.getter(v11, v12);
    v25 = v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v25);
    v26._countAndFlagsBits = 0x6C726F77206F7420;
    v26._object = (void *)0xEE0020736F702064;
    String.append(_:)(v26);
    v27 = sub_10000EDC8((uint64_t *)&unk_100486AB0);
    v28._countAndFlagsBits = SIMD3.debugDescription.getter(v27);
    v29 = v28._object;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(v29);
    v30._countAndFlagsBits = 0;
    v30._object = (void *)0xE000000000000000;
    Log.debug(_:isPrivate:)(v30, 0);
    swift_bridgeObjectRelease(0xE000000000000000);
  }
  swift_release();
}

void sub_1000435AC(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  double *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  __n128 *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  Swift::String v23;
  Swift::String v24;
  void *object;
  Swift::String v26;
  Swift::String v27;
  void *v28;
  Swift::String v29;
  void *v30;
  void *v31;
  double *v32;
  unint64_t v33;
  unint64_t v34;
  double *v35;
  _QWORD *v36;
  __n128 v41;
  __int128 v42;

  v6 = *(double **)(v5 + 8);
  v7 = *((_QWORD *)v6 + 2);
  if (v7)
  {
    v8 = (_QWORD *)v5;
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + 8)) & 1) == 0)
LABEL_41:
      v6 = sub_100028764((uint64_t)v6);
    v10 = 0;
    v11 = 0;
    v36 = v8;
    while (1)
    {
      if (v7 == v11)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      v12 = *((_QWORD *)v6 + 2);
      if (v11 >= v12)
        goto LABEL_36;
      if (LOBYTE(v6[v10 + 15]) == 1)
        break;
LABEL_5:
      ++v11;
      v10 += 12;
      if (v7 == v11)
      {
        v8[1] = v6;
        return;
      }
    }
    if (BYTE1(v6[v10 + 15]) == 1 && (a5 & 1) != 0)
    {
      v8 = (_QWORD *)a1[1].n128_u64[0];
      if (v8 && (v13 = (void *)(*(uint64_t (**)(void))(*v8 + 112))()) != 0)
      {

      }
      else
      {
        if (qword_10047AA50 != -1)
          swift_once(&qword_10047AA50, sub_1000E12A4);
        _StringGuts.grow(_:)(62);
        v23._countAndFlagsBits = 0xD000000000000027;
        v23._object = (void *)0x80000001003D9FE0;
        String.append(_:)(v23);
        v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
        object = v24._object;
        String.append(_:)(v24);
        swift_bridgeObjectRelease(object);
        v26._countAndFlagsBits = 0xD000000000000013;
        v26._object = (void *)0x80000001003DA010;
        String.append(_:)(v26);
        sub_100043FF0();
        v27._countAndFlagsBits = static NSThread.prettyPrintCallStack(toDepth:)(10, 0);
        v28 = v27._object;
        String.append(_:)(v27);
        swift_bridgeObjectRelease(v28);
        v29._countAndFlagsBits = 0;
        v29._object = (void *)0xE000000000000000;
        Log.error(_:isPrivate:)(v29, 0);
        swift_bridgeObjectRelease(0xE000000000000000);
        if (!v8)
        {
LABEL_42:
          __break(1u);
          return;
        }
      }
      v30 = (void *)(*(uint64_t (**)(void))(*v8 + 112))();
      if (!v30)
        goto LABEL_42;
      if (v11 >= *((_QWORD *)v6 + 2))
        goto LABEL_38;
      v31 = v30;
      sub_100043354(v30, a2, a3, a4);

      v12 = *((_QWORD *)v6 + 2);
      v8 = v36;
    }
    else
    {
      v14 = (__n128 *)&v6[v10];
      if ((LOBYTE(v6[v10 + 12]) & 1) == 0)
      {
        v41 = v14[5];
        v15 = type metadata accessor for MeasureCamera(0);
        static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v15, v41, a1[11], a1[12], a1[13], a1[14], a1[2].n128_f64[0]);
        v17 = CGPoint.init(xy:)(v16);
        v19 = v18;
        v20 = a1->n128_f64[1];
        v21 = v14[6].n128_f64[1];
        if ((static MeasureCamera.isOnScreen(screenPoint:viewRect:)() & 1) != 0
          && *(double *)(*v8 + 104) >= v20 - v21)
        {
          v22 = *((_QWORD *)v6 + 2);
          if (v11 >= v22)
            goto LABEL_39;
        }
        else
        {
          v22 = *((_QWORD *)v6 + 2);
          if (v11 >= v22)
            goto LABEL_40;
          v14[5].n128_u64[0] = 0;
          v14[5].n128_u64[1] = 0;
          v14[6].n128_u8[0] = 1;
        }
        v35 = &v6[v10];
        v35[8] = v17;
        *((_QWORD *)v35 + 9) = v19;
        if (v11 >= v22)
          goto LABEL_37;
        goto LABEL_26;
      }
    }
    if (v11 >= v12)
      goto LABEL_37;
LABEL_26:
    v42 = *(_OWORD *)&v6[v10 + 8];
    v32 = (double *)v8[2];
    if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
      v32 = sub_10005F7B4(0, *((_QWORD *)v32 + 2) + 1, 1, (uint64_t)v32);
    v34 = *((_QWORD *)v32 + 2);
    v33 = *((_QWORD *)v32 + 3);
    if (v34 >= v33 >> 1)
      v32 = sub_10005F7B4((double *)(v33 > 1), v34 + 1, 1, (uint64_t)v32);
    *((_QWORD *)v32 + 2) = v34 + 1;
    *(_OWORD *)&v32[2 * v34 + 4] = v42;
    v8[2] = v32;
    goto LABEL_5;
  }
}

void sub_1000439AC(uint64_t a1, void *a2, __int128 *a3)
{
  CGFloat *v3;
  void *v4;
  int64_t v5;
  CGFloat v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  char *v23;
  uint64_t v24;
  double b;
  double v26;
  CGPoint v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  double *v31;
  float v32;
  CGFloat v33;
  float v34;
  float v35;
  void *v36;
  id v37;
  double v38;
  double v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  CGFloat v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  CGFloat a;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char v60;
  uint64_t v61;
  char v62;
  char isUniquelyReferenced_nonNull_native;
  void *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  id v75;
  char v76;
  CGFloat *v77;
  char v78;
  float v79;
  char v80;
  CGAffineTransform v81;
  CGPoint v82;

  v4 = a2;
  v67 = a3[1];
  v68 = *a3;
  v66 = a3[2];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  if (!v5)
  {
LABEL_11:
    swift_bridgeObjectRelease(*((_QWORD *)v3 + 1));
    v3[1] = v6;
    v22 = v4;
    if (!objc_msgSend(v22, "getCornerCount"))
    {
LABEL_38:

      v50 = *(_QWORD *)(*(_QWORD *)&v6 + 16);
      if (v50)
      {
        swift_bridgeObjectRetain(*(_QWORD *)&v6);
        v51 = 0;
        a = COERCE_DOUBLE(_swiftEmptyArrayStorage);
        do
        {
          v56 = *(_QWORD *)&v6 + v51;
          v57 = *(_QWORD *)(*(_QWORD *)&v6 + v51 + 112);
          if (v57 >= 1)
          {
            v58 = *(_QWORD *)(v56 + 32);
            v59 = *(_DWORD *)(v56 + 56);
            v71 = *(_OWORD *)(v56 + 64);
            v73 = *(_OWORD *)(v56 + 40);
            v69 = *(_OWORD *)(v56 + 80);
            v60 = *(_BYTE *)(v56 + 96);
            v61 = *(_QWORD *)(v56 + 104);
            v62 = *(_BYTE *)(v56 + 120);
            v80 = *(_BYTE *)(v56 + 121);
            v76 = *(_BYTE *)(v56 + 122);
            swift_retain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&a);
            v81.a = a;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1000A560C(0, *(_QWORD *)(*(_QWORD *)&a + 16) + 1, 1);
              a = v81.a;
            }
            v54 = *(_QWORD *)(*(_QWORD *)&a + 16);
            v53 = *(_QWORD *)(*(_QWORD *)&a + 24);
            if (v54 >= v53 >> 1)
            {
              sub_1000A560C((double *)(v53 > 1), v54 + 1, 1);
              a = v81.a;
            }
            *(_QWORD *)(*(_QWORD *)&a + 16) = v54 + 1;
            v55 = *(_QWORD *)&a + 96 * v54;
            *(_QWORD *)(v55 + 32) = v58;
            *(_OWORD *)(v55 + 40) = v73;
            *(_DWORD *)(v55 + 56) = v59;
            *(_OWORD *)(v55 + 64) = v71;
            *(_OWORD *)(v55 + 80) = v69;
            *(_BYTE *)(v55 + 96) = v60;
            *(_QWORD *)(v55 + 104) = v61;
            *(_QWORD *)(v55 + 112) = v57;
            *(_BYTE *)(v55 + 120) = v62;
            *(_BYTE *)(v55 + 121) = v80;
            *(_BYTE *)(v55 + 122) = v76;
            v3 = v77;
          }
          v51 += 96;
          --v50;
        }
        while (v50);
        swift_bridgeObjectRelease(*(_QWORD *)&v6);
      }
      else
      {
        a = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      }
      swift_bridgeObjectRelease(*(_QWORD *)&v6);
      v3[1] = a;
      return;
    }
    v23 = 0;
    v75 = v22;
LABEL_15:
    objc_msgSend(v22, "getCornerAtIndex:", v23, v64);
    v11 = __OFADD__(v23++, 1);
    if (v11)
      goto LABEL_51;
    v26 = v81.a;
    b = v81.b;
    v79 = *(float *)&v81.c;
    *(_OWORD *)&v81.a = v68;
    *(_OWORD *)&v81.c = v67;
    *(_OWORD *)&v81.tx = v66;
    v82.x = v26;
    v82.y = b;
    v27 = CGPointApplyAffineTransform(v82, &v81);
    v28 = *(_QWORD *)(*(_QWORD *)&v6 + 16);
    if (!v28)
    {
LABEL_34:
      v47 = *v3;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v6) & 1) == 0)
        v6 = COERCE_DOUBLE(sub_10005F6A0(0, *(_QWORD *)(*(_QWORD *)&v6 + 16) + 1, 1, *(uint64_t *)&v6));
      v49 = *(_QWORD *)(*(_QWORD *)&v6 + 16);
      v48 = *(_QWORD *)(*(_QWORD *)&v6 + 24);
      if (v49 >= v48 >> 1)
        v6 = COERCE_DOUBLE(sub_10005F6A0((double *)(v48 > 1), v49 + 1, 1, *(uint64_t *)&v6));
      *(_QWORD *)(*(_QWORD *)&v6 + 16) = v49 + 1;
      v24 = *(_QWORD *)&v6 + 96 * v49;
      *(CGFloat *)(v24 + 32) = v47;
      *(double *)(v24 + 40) = v26;
      *(double *)(v24 + 48) = b;
      *(float *)(v24 + 56) = v79;
      *(CGPoint *)(v24 + 64) = v27;
      *(_QWORD *)(v24 + 80) = 0;
      *(_QWORD *)(v24 + 88) = 0;
      *(_BYTE *)(v24 + 96) = 1;
      *(_QWORD *)(v24 + 104) = 0;
      *(_QWORD *)(v24 + 112) = 1;
      *(_WORD *)(v24 + 120) = 256;
      *(_BYTE *)(v24 + 122) = 0;
      v3 = v77;
      goto LABEL_14;
    }
    swift_bridgeObjectRetain(*(_QWORD *)&v6);
    v29 = 0;
    v30 = 64;
    while (1)
    {
      v31 = (double *)(*(_QWORD *)&v6 + v30);
      v32 = *(float *)(*(_QWORD *)&v6 + v30 - 8);
      v33 = *v3;
      if (*(_BYTE *)(*(_QWORD *)&v6 + v30 + 58) == 1)
      {
        v34 = static CGPoint.distanceSq(_:_:)(*(v31 - 3), *(v31 - 2), v26, b);
        v35 = *(float *)(*(_QWORD *)&v33 + 112);
        v36 = (void *)objc_opt_self(UIScreen);
        swift_retain();
        v37 = objc_msgSend(v36, "mainScreen", swift_retain().n128_f64[0]);
        objc_msgSend(v37, "scale");
        v39 = v38;

        v40 = v39;
        if (v34 >= (float)((float)(v35 * v40) * (float)(v35 * v40)))
        {
          swift_release();
          swift_release();
        }
        else
        {
          v41 = *(float *)(*(_QWORD *)&v33 + 116);
          swift_release();
          swift_release();
          if (fabsf(fabsf(v32 / v79) + -1.0) < v41)
            goto LABEL_26;
        }
      }
      else if (static CGPoint.distanceSq(_:_:)(*v31, v31[1], v27.x, v27.y) < (float)(*(float *)(*(_QWORD *)&v33 + 112)
                                                                                    * *(float *)(*(_QWORD *)&v33 + 112))
             && fabsf(fabsf(v32 / v79) + -1.0) < *(float *)(*(_QWORD *)&v33 + 116))
      {
LABEL_26:
        swift_bridgeObjectRelease(*(_QWORD *)&v6);
        if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v6) & 1) == 0)
          v6 = COERCE_DOUBLE(sub_100028764(*(uint64_t *)&v6));
        if (v29 >= *(_QWORD *)(*(_QWORD *)&v6 + 16))
          goto LABEL_52;
        v42 = *(_QWORD *)&v6 + v30;
        *(double *)(v42 - 24) = v26;
        *(double *)(v42 - 16) = b;
        *(float *)(v42 - 8) = v79;
        *(CGPoint *)v42 = v27;
        v43 = *(_QWORD *)(*(_QWORD *)&v6 + v30 + 48);
        v11 = __OFADD__(v43, 2);
        v44 = v43 + 2;
        if (v11)
          goto LABEL_53;
        v45 = *(_QWORD *)(*(_QWORD *)(v42 - 32) + 96);
        v46 = v44 >= v45;
        if (v44 >= v45)
          v44 = *(_QWORD *)(*(_QWORD *)(v42 - 32) + 96);
        *(_QWORD *)(v42 + 48) = v44;
        *(_BYTE *)(v42 + 56) = (*(_BYTE *)(v42 + 56) | v46) & 1;
        *(_BYTE *)(v42 + 57) = 1;
        v22 = v75;
LABEL_14:
        if (v23 == objc_msgSend(v22, "getCornerCount"))
          goto LABEL_38;
        goto LABEL_15;
      }
      ++v29;
      v30 += 96;
      if (v28 == v29)
      {
        swift_bridgeObjectRelease(*(_QWORD *)&v6);
        v22 = v75;
        goto LABEL_34;
      }
    }
  }
  v7 = a1;
  v64 = a2;
  *(_QWORD *)&v81.a = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  sub_1000A560C(0, v5, 0);
  v8 = 0;
  v6 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  v65 = v7;
  while (1)
  {
    v9 = v7 + v8;
    v10 = *(_QWORD *)(v7 + v8 + 112);
    v11 = __OFSUB__(v10, 1);
    v12 = v10 - 1;
    if (v11)
      break;
    v13 = *(_QWORD *)(v9 + 32);
    v14 = *(_DWORD *)(v9 + 56);
    v72 = *(_OWORD *)(v9 + 64);
    v74 = *(_OWORD *)(v9 + 40);
    v70 = *(_OWORD *)(v9 + 80);
    v15 = *(unsigned __int8 *)(v9 + 96);
    v16 = *(_QWORD *)(v9 + 104);
    v17 = *(_BYTE *)(v9 + 120);
    v78 = *(_BYTE *)(v9 + 121);
    if (v12 <= (v15 ^ 1u))
      v18 = v15 ^ 1u;
    else
      v18 = v12;
    v81.a = v6;
    v20 = *(_QWORD *)(*(_QWORD *)&v6 + 16);
    v19 = *(_QWORD *)(*(_QWORD *)&v6 + 24);
    swift_retain();
    if (v20 >= v19 >> 1)
    {
      sub_1000A560C((double *)(v19 > 1), v20 + 1, 1);
      v6 = v81.a;
    }
    *(_QWORD *)(*(_QWORD *)&v6 + 16) = v20 + 1;
    v21 = *(_QWORD *)&v6 + 96 * v20;
    *(_QWORD *)(v21 + 32) = v13;
    *(_OWORD *)(v21 + 40) = v74;
    *(_DWORD *)(v21 + 56) = v14;
    *(_OWORD *)(v21 + 64) = v72;
    *(_OWORD *)(v21 + 80) = v70;
    *(_BYTE *)(v21 + 96) = v15;
    *(_QWORD *)(v21 + 104) = v16;
    *(_QWORD *)(v21 + 112) = v18;
    *(_BYTE *)(v21 + 120) = v17;
    *(_BYTE *)(v21 + 121) = 0;
    *(_BYTE *)(v21 + 122) = v78;
    v8 += 96;
    --v5;
    v3 = v77;
    v7 = v65;
    if (!v5)
    {
      swift_bridgeObjectRelease(v65);
      v4 = v64;
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
}

unint64_t sub_100043FF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047D9B0;
  if (!qword_10047D9B0)
  {
    v1 = objc_opt_self(NSThread);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10047D9B0);
  }
  return result;
}

uint64_t sub_10004402C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8(&qword_1004866F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for CornerAccumulationBuffer.CornerCandidate(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t initializeWithCopy for CornerAccumulationBuffer.CornerCandidate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(_QWORD *)(a1 + 24) = a2[3];
  v4 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
  *(_BYTE *)(a1 + 90) = *((_BYTE *)a2 + 90);
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for CornerAccumulationBuffer.CornerCandidate(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
  a1[4] = a2[4];
  a1[5] = a2[5];
  v6 = *((_OWORD *)a2 + 3);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  *((_OWORD *)a1 + 3) = v6;
  a1[9] = a2[9];
  a1[10] = a2[10];
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a1 + 89) = *((_BYTE *)a2 + 89);
  *((_BYTE *)a1 + 90) = *((_BYTE *)a2 + 90);
  return a1;
}

__n128 initializeWithTake for CornerAccumulationBuffer.CornerCandidate(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 75) = *(_OWORD *)(a2 + 75);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t *assignWithTake for CornerAccumulationBuffer.CornerCandidate(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
  v5 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v5;
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  a1[9] = a2[9];
  a1[10] = a2[10];
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a1 + 89) = *((_BYTE *)a2 + 89);
  *((_BYTE *)a1 + 90) = *((_BYTE *)a2 + 90);
  return a1;
}

uint64_t getEnumTagSinglePayload for CornerAccumulationBuffer.CornerCandidate(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 91))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CornerAccumulationBuffer.CornerCandidate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 90) = 0;
    *(_WORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 91) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 91) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CornerAccumulationBuffer.CornerCandidate()
{
  return &type metadata for CornerAccumulationBuffer.CornerCandidate;
}

uint64_t destroy for CornerAccumulationBuffer(_QWORD *a1)
{
  swift_release(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s7Measure24CornerAccumulationBufferVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for CornerAccumulationBuffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for CornerAccumulationBuffer(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Measurements(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Measurements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CornerAccumulationBuffer()
{
  return &type metadata for CornerAccumulationBuffer;
}

void sub_1000444B0(double a1, double a2)
{
  char *v2;
  void *v3;
  double v4;
  double v5;
  void *v6;
  void *v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  objc_class *v12;
  id v13;
  char *v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  id v19;
  char *v20;
  double v21;
  double v22;
  id v23;
  id v24;
  double v25;
  NSString v26;
  id v27;
  id v28;
  id v29;
  double v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  id v61;
  id v62;
  id v63;
  char *v64;
  Class isa;
  char *v66;
  Swift::String v67;
  Swift::String v68;

  v3 = v2;
  if (a2 <= a1)
  {
    v5 = a1 / a2 * 104.0;
    if (a2 > 0.0)
      v4 = v5;
    else
      v4 = 179.92;
  }
  else
  {
    v4 = 104.0;
  }
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v6 = *(void **)&v2[OBJC_IVAR____TtC7Measure13SketchSurface_surfaceView];
  objc_msgSend(v2, "addSubview:", v6);
  objc_msgSend(v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v7 = (void *)objc_opt_self(NSBundle);
  v8 = objc_msgSend(v7, "mainBundle");
  v9._countAndFlagsBits = 0xD000000000000022;
  v67._object = (void *)0x80000001003DA140;
  v9._object = (void *)0x80000001003DA110;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v67._countAndFlagsBits = 0xD000000000000022;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v67);

  v12 = (objc_class *)type metadata accessor for SketchLabel();
  v13 = objc_allocWithZone(v12);
  v14 = sub_10012FDAC(v11._countAndFlagsBits, (uint64_t)v11._object);
  objc_msgSend(v14, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v66 = v14;
  objc_msgSend(v3, "addSubview:", v14);
  v15 = objc_msgSend(v7, "mainBundle");
  v68._object = (void *)0x80000001003DA1A0;
  v16._object = (void *)0x80000001003DA170;
  v16._countAndFlagsBits = 0xD000000000000021;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v68._countAndFlagsBits = 0xD000000000000021;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v68);

  v19 = objc_allocWithZone(v12);
  v20 = sub_10012FDAC(v18._countAndFlagsBits, (uint64_t)v18._object);
  objc_msgSend(v20, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v64 = v20;
  objc_msgSend(v3, "addSubview:", v20);
  if (qword_10047A7E8 != -1)
    swift_once(&qword_10047A7E8, sub_100012D28);
  v21 = v4 + *(double *)&qword_1004AF138;
  v22 = *(double *)&qword_1004AF138 + 104.0;
  v23 = objc_msgSend(v6, "widthAnchor");
  v24 = objc_msgSend(v23, "constraintEqualToConstant:", v21);

  LODWORD(v25) = 1148813312;
  objc_msgSend(v24, "setPriority:", v25);
  v26 = String._bridgeToObjectiveC()();
  objc_msgSend(v24, "setIdentifier:", v26);

  v27 = objc_msgSend(v6, "centerYAnchor");
  v28 = objc_msgSend(v3, "centerYAnchor");
  v29 = objc_msgSend(v27, "constraintEqualToAnchor:", v28);

  LODWORD(v30) = 1148764160;
  objc_msgSend(v29, "setPriority:", v30);
  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v29, "setIdentifier:", v31);

  v63 = (id)objc_opt_self(NSLayoutConstraint);
  v32 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v33 = swift_allocObject(v32, 120, 7);
  *(_OWORD *)(v33 + 16) = xmmword_1003B13C0;
  *(_QWORD *)(v33 + 32) = v29;
  v62 = v29;
  v34 = objc_msgSend(v6, "centerXAnchor");
  v35 = objc_msgSend(v3, "centerXAnchor");
  v36 = objc_msgSend(v34, "constraintEqualToAnchor:", v35);

  *(_QWORD *)(v33 + 40) = v36;
  v37 = objc_msgSend(v6, "bottomAnchor");
  v38 = objc_msgSend(v3, "bottomAnchor");
  v39 = objc_msgSend(v37, "constraintLessThanOrEqualToAnchor:", v38);

  *(_QWORD *)(v33 + 48) = v39;
  *(_QWORD *)(v33 + 56) = v24;
  v61 = v24;
  v40 = objc_msgSend(v6, "heightAnchor");
  v41 = objc_msgSend(v40, "constraintEqualToConstant:", v22);

  *(_QWORD *)(v33 + 64) = v41;
  v42 = objc_msgSend(v66, "topAnchor");
  v43 = objc_msgSend(v3, "topAnchor");
  v44 = objc_msgSend(v42, "constraintGreaterThanOrEqualToAnchor:constant:", v43, 10.0);

  *(_QWORD *)(v33 + 72) = v44;
  v45 = objc_msgSend(v66, "bottomAnchor");
  v46 = objc_msgSend(v6, "topAnchor");
  if (qword_10047A808 != -1)
    swift_once(&qword_10047A808, sub_100012DAC);
  v47 = objc_msgSend(v45, "constraintEqualToAnchor:constant:", v46, -*(double *)&qword_1004AF158);

  *(_QWORD *)(v33 + 80) = v47;
  v48 = objc_msgSend(v66, "centerXAnchor");
  v49 = objc_msgSend(v6, "centerXAnchor");
  v50 = objc_msgSend(v48, "constraintEqualToAnchor:", v49);

  *(_QWORD *)(v33 + 88) = v50;
  v51 = objc_msgSend(v64, "rightAnchor");
  v52 = objc_msgSend(v6, "leftAnchor");
  v53 = objc_msgSend(v51, "constraintEqualToAnchor:constant:", v52, -*(double *)&qword_1004AF158);

  *(_QWORD *)(v33 + 96) = v53;
  v54 = objc_msgSend(v64, "centerYAnchor");
  v55 = objc_msgSend(v6, "centerYAnchor");
  v56 = objc_msgSend(v54, "constraintEqualToAnchor:", v55);

  *(_QWORD *)(v33 + 104) = v56;
  v57 = objc_msgSend(v64, "leftAnchor");
  v58 = objc_msgSend(v3, "leftAnchor");
  v59 = objc_msgSend(v57, "constraintGreaterThanOrEqualToAnchor:constant:", v58, 10.0);

  *(_QWORD *)(v33 + 112) = v59;
  specialized Array._endMutation()(v60);
  sub_100018148(0, (unint64_t *)&qword_100486300, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v63, "activateConstraints:", isa, swift_bridgeObjectRelease(v33).n128_f64[0]);

}

void sub_100044CA8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  uint64_t v14;
  double v15;
  double v16;
  void *v17;
  double Width;
  double Height;
  double v20;
  double v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  double v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  void *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[24];
  char v65[24];
  objc_super v66;
  CGRect v67;
  CGRect v68;

  v1 = v0;
  v66.receiver = v0;
  v66.super_class = (Class)type metadata accessor for SketchSurface();
  objc_msgSendSuper2(&v66, "layoutSubviews");
  v2 = OBJC_IVAR____TtC7Measure13SketchSurface_rectSublayer;
  v3 = *(void **)&v1[OBJC_IVAR____TtC7Measure13SketchSurface_rectSublayer];
  if (v3)
    objc_msgSend(v3, "removeFromSuperlayer");
  v63 = v2;
  v4 = OBJC_IVAR____TtC7Measure13SketchSurface_horizontalLineSublayer;
  v5 = *(void **)&v1[OBJC_IVAR____TtC7Measure13SketchSurface_horizontalLineSublayer];
  if (v5)
    objc_msgSend(v5, "removeFromSuperlayer");
  v6 = OBJC_IVAR____TtC7Measure13SketchSurface_verticalLineSublayer;
  v7 = *(void **)&v1[OBJC_IVAR____TtC7Measure13SketchSurface_verticalLineSublayer];
  if (v7)
    objc_msgSend(v7, "removeFromSuperlayer");
  v8 = (uint64_t *)&v1[OBJC_IVAR____TtC7Measure13SketchSurface_dotLayers];
  swift_beginAccess(&v1[OBJC_IVAR____TtC7Measure13SketchSurface_dotLayers], v65, 0, 0);
  v9 = *v8;
  if ((unint64_t)*v8 >> 62)
  {
    if (v9 < 0)
      v14 = *v8;
    else
      v14 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(*v8, 2);
    v10 = _CocoaArrayWrapper.endIndex.getter(v14);
    if (!v10)
      goto LABEL_19;
  }
  else
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(*v8, 2);
    if (!v10)
      goto LABEL_19;
  }
  if (v10 < 1)
  {
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  for (i = 0; i != v10; ++i)
  {
    if ((v9 & 0xC000000000000001) != 0)
      v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v9);
    else
      v12 = *(id *)(v9 + 8 * i + 32);
    v13 = v12;
    objc_msgSend(v12, "removeFromSuperlayer");

  }
LABEL_19:
  swift_bridgeObjectRelease_n(v9, 2);
  if (qword_10047A7E8 != -1)
    swift_once(&qword_10047A7E8, sub_100012D28);
  v15 = *(double *)&qword_1004AF138;
  if (qword_10047A7F0 != -1)
    swift_once(&qword_10047A7F0, sub_100012D38);
  v16 = *(double *)&qword_1004AF140;
  v17 = *(void **)&v1[OBJC_IVAR____TtC7Measure13SketchSurface_surfaceView];
  objc_msgSend(v17, "bounds");
  Width = CGRectGetWidth(v67);
  objc_msgSend(v17, "bounds");
  Height = CGRectGetHeight(v68);
  v20 = Width - v15;
  v21 = Height - v15;
  v22 = sub_1000131A4(v16, v16, v20, v21);
  v23 = *(void **)&v1[v63];
  *(_QWORD *)&v1[v63] = v22;

  v24 = sub_1000133C0(1, v16 + v20 * 0.5, v16, v16 + v20 * 0.5, v16 + v21);
  v25 = *(void **)&v1[v4];
  *(_QWORD *)&v1[v4] = v24;

  v26 = sub_1000133C0(1, v16, v16 + v21 * 0.5, v16 + v20, v16 + v21 * 0.5);
  v27 = *(void **)&v1[v6];
  *(_QWORD *)&v1[v6] = v26;

  v28 = sub_1000135EC(0, v16, v16);
  swift_beginAccess(v8, v64, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
  v31 = *(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v30 = *(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v31 >= v30 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
  v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v28);
  specialized Array._endMutation()(v32);
  swift_endAccess(v64);
  v33 = Width - v16;
  v34 = sub_1000135EC(0, v33, v16);
  swift_beginAccess(v8, v64, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
  v37 = *(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v36 = *(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v37 >= v36 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
  v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v34);
  specialized Array._endMutation()(v38);
  swift_endAccess(v64);
  v39 = Height - v16;
  v40 = sub_1000135EC(0, v33, v39);
  swift_beginAccess(v8, v64, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v41);
  v43 = *(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v42 = *(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v43 >= v42 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
  v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v40);
  specialized Array._endMutation()(v44);
  swift_endAccess(v64);
  v45 = sub_1000135EC(0, v16, v39);
  swift_beginAccess(v8, v64, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v46);
  v48 = *(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v47 = *(_QWORD *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v48 >= v47 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
  v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v45);
  specialized Array._endMutation()(v49);
  v50 = objc_msgSend(v17, "layer", swift_endAccess(v64).n128_f64[0]);
  if (!*(_QWORD *)&v1[v63])
    goto LABEL_49;
  v51 = v50;
  objc_msgSend(v50, "addSublayer:");

  v52 = objc_msgSend(v17, "layer");
  if (!*(_QWORD *)&v1[v4])
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v53 = v52;
  objc_msgSend(v52, "addSublayer:");

  v54 = objc_msgSend(v17, "layer");
  if (*(_QWORD *)&v1[v6])
  {
    v55 = v54;
    objc_msgSend(v54, "addSublayer:");

    v56 = *v8;
    if ((unint64_t)*v8 >> 62)
    {
      if (v56 < 0)
        v62 = *v8;
      else
        v62 = v56 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v56, 2);
      v57 = _CocoaArrayWrapper.endIndex.getter(v62);
      if (v57)
      {
LABEL_36:
        if (v57 >= 1)
        {
          v58 = 0;
          do
          {
            if ((v56 & 0xC000000000000001) != 0)
              v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v58, v56);
            else
              v59 = *(id *)(v56 + 8 * v58 + 32);
            v60 = v59;
            ++v58;
            v61 = objc_msgSend(v17, "layer");
            objc_msgSend(v61, "addSublayer:", v60);

          }
          while (v57 != v58);
          goto LABEL_46;
        }
        goto LABEL_48;
      }
    }
    else
    {
      v57 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v56, 2);
      if (v57)
        goto LABEL_36;
    }
LABEL_46:
    swift_bridgeObjectRelease_n(v56, 2);
    return;
  }
LABEL_51:
  __break(1u);
}

id sub_10004539C(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  id v6;
  objc_super v8;

  v3 = OBJC_IVAR____TtC7Measure13SketchSurface_surfaceView;
  v4 = objc_allocWithZone((Class)UIView);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "init");
  *(_QWORD *)&v5[OBJC_IVAR____TtC7Measure13SketchSurface_rectSublayer] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7Measure13SketchSurface_horizontalLineSublayer] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7Measure13SketchSurface_verticalLineSublayer] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7Measure13SketchSurface_dotLayers] = _swiftEmptyArrayStorage;

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for SketchSurface();
  v6 = objc_msgSendSuper2(&v8, "initWithCoder:", a1);

  return v6;
}

id sub_10004548C()
{
  return sub_100045D08(type metadata accessor for SketchSurface);
}

uint64_t type metadata accessor for SketchSurface()
{
  return objc_opt_self(_TtC7Measure13SketchSurface);
}

void sub_100045520(double a1, double a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  Class v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  Class isa;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  Class v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  double v44;
  char v45;
  double v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  char v54;
  id v55;
  _QWORD v56[2];
  _QWORD v57[4];

  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  if (qword_10047A828 != -1)
    swift_once(&qword_10047A828, sub_100012E24);
  v5 = qword_1004AF178;
  if (qword_10047A830 != -1)
    swift_once(&qword_10047A830, sub_100012E34);
  v6 = qword_1004AF180;
  if (qword_10047A7E8 != -1)
    swift_once(&qword_10047A7E8, sub_100012D28);
  v7 = *(double *)&qword_1004AF138;
  if (qword_10047A7F0 != -1)
    swift_once(&qword_10047A7F0, sub_100012D38);
  v8 = *(double *)&qword_1004AF140;
  if (a2 > a1)
    v9 = *(double *)&v5;
  else
    v9 = *(double *)&v6;
  if (a2 > a1)
    v10 = *(double *)&v6;
  else
    v10 = *(double *)&v5;
  v11 = v10 - v7;
  v12 = v9 - v7;
  v13 = v7 + v10 - v7;
  v14 = v7 + v9 - v7;
  v55 = *(id *)&v2[OBJC_IVAR____TtC7Measure20SketchSurfaceHistory_surfaceView];
  v15 = (Class)objc_msgSend(v55, "layer");
  v16 = -[objc_class sublayers](v15, "sublayers");
  if (v16)
  {
    v17 = v16;
    v18 = sub_100018148(0, &qword_10047DA38, CALayer_ptr);
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);
    swift_bridgeObjectRelease(v19);

    isa = Array._bridgeToObjectiveC()().super.isa;
    -[objc_class setSublayers:](v15, "setSublayers:", isa, swift_bridgeObjectRelease(_swiftEmptyArrayStorage).n128_f64[0]);

    v15 = isa;
  }
  else
  {
    -[objc_class setSublayers:](v15, "setSublayers:", 0);
  }

  objc_msgSend(v55, "removeFromSuperview");
  objc_msgSend(v2, "addSubview:", v55);
  objc_msgSend(v55, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v21 = (void *)objc_opt_self(NSLayoutConstraint);
  v22 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v23 = swift_allocObject(v22, 64, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1003B1410;
  v24 = objc_msgSend(v55, "widthAnchor");
  v25 = objc_msgSend(v24, "constraintEqualToConstant:", v13);

  *(_QWORD *)(v23 + 32) = v25;
  v26 = objc_msgSend(v55, "heightAnchor");
  v27 = objc_msgSend(v26, "constraintEqualToConstant:", v14);

  *(_QWORD *)(v23 + 40) = v27;
  v28 = objc_msgSend(v55, "centerXAnchor");
  v29 = objc_msgSend(v2, "centerXAnchor");
  v30 = objc_msgSend(v28, "constraintEqualToAnchor:", v29);

  *(_QWORD *)(v23 + 48) = v30;
  v31 = objc_msgSend(v55, "topAnchor");
  v32 = objc_msgSend(v2, "topAnchor");
  v33 = objc_msgSend(v31, "constraintEqualToAnchor:", v32);

  *(_QWORD *)(v23 + 56) = v33;
  v57[2] = v23;
  specialized Array._endMutation()(v34);
  sub_100018148(0, (unint64_t *)&qword_100486300, NSLayoutConstraint_ptr);
  v35 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v21, "activateConstraints:", v35, swift_bridgeObjectRelease(v23).n128_f64[0]);

  v36 = objc_msgSend(v55, "layer");
  v37 = sub_1000131A4(v8, v8, v11, v12);
  objc_msgSend(v36, "addSublayer:", v37);

  *(double *)v57 = v8;
  *(double *)&v57[1] = v11 + v8;
  v38 = (void *)objc_opt_self(UIBezierPath);
  v39 = (void *)objc_opt_self(UIColor);
  v40 = 0;
  v41 = 0;
  do
  {
    v42 = 0;
    v43 = 0;
    v44 = *(double *)&v57[v41];
    v54 = v40;
    *(double *)v56 = v8;
    *(double *)&v56[1] = v12 + v8;
    do
    {
      v45 = v42;
      v46 = *(double *)&v56[v43];
      v47 = objc_msgSend(v55, "layer");
      v48 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
      v49 = objc_msgSend(v38, "bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:", 1, v44, v46, *(double *)&qword_1004AF140, 0.0, 6.28318531);
      v50 = objc_msgSend(v49, "CGPath");

      objc_msgSend(v48, "setPath:", v50);
      if (qword_10047A7C8 != -1)
        swift_once(&qword_10047A7C8, sub_100012C9C);
      v51 = objc_msgSend((id)qword_1004AF118, "CGColor");
      objc_msgSend(v48, "setFillColor:", v51);

      v52 = objc_msgSend(v39, "clearColor");
      v53 = objc_msgSend(v52, "CGColor");

      objc_msgSend(v48, "setStrokeColor:", v53);
      objc_msgSend(v47, "addSublayer:", v48);

      v42 = 1;
      v43 = 1;
    }
    while ((v45 & 1) == 0);
    v40 = 1;
    v41 = 1;
  }
  while ((v54 & 1) == 0);
}

id sub_100045CFC()
{
  return sub_100045D08(type metadata accessor for SketchSurfaceHistory);
}

id sub_100045D08(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for SketchSurfaceHistory()
{
  return objc_opt_self(_TtC7Measure20SketchSurfaceHistory);
}

uint64_t sub_100045D68()
{
  uint64_t v0;

  v0 = type metadata accessor for DispatchQoS(0);
  sub_1000477C8(v0, qword_1004AF1C8);
  sub_1000362E8(v0, (uint64_t)qword_1004AF1C8);
  return static DispatchQoS.userInitiated.getter();
}

BOOL sub_100045DB0(double *a1, double *a2)
{
  _BOOL8 result;

  result = 0;
  if (*(unsigned __int8 *)a1 == *(unsigned __int8 *)a2
    && ((*((unsigned __int8 *)a1 + 1) ^ *((unsigned __int8 *)a2 + 1)) & 1) == 0)
  {
    return a1[1] == a2[1];
  }
  return result;
}

uint64_t sub_100045DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  void *v9;
  id v10;
  id v11;
  Swift::String v12;
  void *object;
  Swift::String v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t result;

  objc_msgSend(*(id *)(v0 + 40), "frame");
  *(_QWORD *)(v0 + 208) = v1;
  *(_QWORD *)(v0 + 216) = v2;
  *(_QWORD *)(v0 + 224) = v3;
  *(_QWORD *)(v0 + 232) = v4;
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  *(_QWORD *)(v0 + 240) = qword_1004AF250;
  if (qword_10047AA70 != -1)
    swift_once(&qword_10047AA70, sub_1000E13E4);
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(0xE000000000000000);
  v5 = 0x70616373646E616CLL;
  v6 = 0xED00007466654C65;
  switch(*(_QWORD *)(v0 + 240))
  {
    case 0:
      v6 = 0xE700000000000000;
      v5 = 0x6E776F6E6B6E75;
      break;
    case 1:
      v6 = 0xE800000000000000;
      v5 = 0x7469617274726F70;
      break;
    case 2:
      v5 = 0xD000000000000012;
      v6 = 0x80000001003DA300;
      break;
    case 3:
      v6 = 0xEE00746867695265;
      break;
    case 4:
      break;
    default:
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Measure/UIInterfaceOrientation.swift", 36, 2, 25, 0);
      __break(1u);
      JUMPOUT(0x100046154);
  }
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0xD000000000000023;
  v8._object = (void *)0x80000001003DA270;
  Log.default(_:isPrivate:)(v8, 0);
  swift_bridgeObjectRelease(0x80000001003DA270);
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(0xE000000000000000);
  v9 = (void *)objc_opt_self(UIDevice);
  v10 = objc_msgSend(v9, "currentDevice");
  v11 = objc_msgSend(v10, "orientation");

  v12._countAndFlagsBits = UIDeviceOrientation.description.getter(v11);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._countAndFlagsBits = 0xD000000000000023;
  v14._object = (void *)0x80000001003DA2D0;
  Log.default(_:isPrivate:)(v14, 0);
  swift_bridgeObjectRelease(0x80000001003DA2D0);
  if (qword_10047AB68 != -1)
    swift_once(&qword_10047AB68, sub_10011E814);
  v15 = qword_1004AF6B8;
  v16 = objc_msgSend(v9, "currentDevice");
  v17 = (unint64_t)objc_msgSend(v16, "orientation");

  sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
  result = static UIDevice.isIPad()();
  if ((result & 1) != 0)
  {
    if (v17 - 1 >= 4)
      return result;
    goto LABEL_17;
  }
  if (v17 <= 4 && ((1 << v17) & 0x1A) != 0)
LABEL_17:
    *(_QWORD *)(v15 + 24) = v17;
  return result;
}

void sub_100046168(__int16 a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  int v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  Swift::String v26;
  char v27;
  char v28;
  double v29;
  Swift::String v30;

  v3 = v2;
  v5 = a1 & 1;
  v6 = a1 & 0x100;
  if (*(_BYTE *)(v2 + 248) == 1)
  {
    if ((((v5 != 0) ^ *(_BYTE *)(v2 + 24)) & 1) == 0
      && (((v6 != 0) ^ *(unsigned __int8 *)(v2 + 25)) & 1) == 0
      && *(double *)(v2 + 32) == a2)
    {
      if (qword_10047AA40 != -1)
        swift_once(&qword_10047AA40, sub_1000E11FC);
      v7._countAndFlagsBits = 0xD000000000000047;
      v7._object = (void *)0x80000001003DA470;
      Log.debug(_:isPrivate:)(v7, 0);
      return;
    }
    if (qword_10047AA40 != -1)
      swift_once(&qword_10047AA40, sub_1000E11FC);
    v30._countAndFlagsBits = 0;
    v30._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(84);
    v8._countAndFlagsBits = 0xD000000000000052;
    v8._object = (void *)0x80000001003DA3A0;
    String.append(_:)(v8);
    v27 = v5;
    v28 = BYTE1(v6);
    v29 = a2;
    _print_unlocked<A, B>(_:_:)(&v27, &v30, &type metadata for CVOptions, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    object = v30._object;
    Log.debug(_:isPrivate:)(v30, 0);
    swift_bridgeObjectRelease(object);
    if (*(_BYTE *)(v3 + 248) == 1)
    {
      v10._countAndFlagsBits = 0xD000000000000021;
      v10._object = (void *)0x80000001003DA440;
      Log.debug(_:isPrivate:)(v10, 0);
      v11 = *(_QWORD *)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      swift_release(v11);
      *(_BYTE *)(v3 + 248) = 0;
    }
    else
    {
      v12._countAndFlagsBits = 0xD000000000000037;
      v12._object = (void *)0x80000001003DA400;
      Log.debug(_:isPrivate:)(v12, 0);
    }
  }
  if (qword_10047AA40 != -1)
    swift_once(&qword_10047AA40, sub_1000E11FC);
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(50);
  v13._countAndFlagsBits = 0xD000000000000030;
  v13._object = (void *)0x80000001003DA320;
  String.append(_:)(v13);
  v27 = v5;
  v28 = BYTE1(v6);
  v29 = a2;
  _print_unlocked<A, B>(_:_:)(&v27, &v30, &type metadata for CVOptions, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v14 = v30._object;
  Log.debug(_:isPrivate:)(v30, 0);
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(v3 + 24) = v5;
  *(_BYTE *)(v3 + 25) = BYTE1(v6);
  *(double *)(v3 + 32) = a2;
  if (v6)
  {
    v15._object = (void *)0x80000001003DA380;
    v15._countAndFlagsBits = 0xD000000000000015;
    Log.debug(_:isPrivate:)(v15, 0);
    v16 = *(double *)(v3 + 232);
    v17 = type metadata accessor for EdgeDetector();
    v18 = swift_allocObject(v17, 203, 7);
    *(_DWORD *)(v18 + 16) = 984861703;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_BYTE *)(v18 + 56) = 1;
    v19 = v16;
    v20 = v19 * 0.0013717;
    v21 = v20 * 5.0;
    v22 = v20 * 10.0;
    *(_QWORD *)(v18 + 64) = 0;
    *(_QWORD *)(v18 + 72) = 0;
    v23 = v20 * 15.0;
    *(_OWORD *)(v18 + 88) = xmmword_1003B0BE0;
    *(_DWORD *)(v18 + 80) = 1056964608;
    v24 = v20 * 50.0;
    *(_QWORD *)(v18 + 104) = 0x4008000000000000;
    *(float *)(v18 + 112) = v22;
    *(_DWORD *)(v18 + 116) = 1041865114;
    *(float *)(v18 + 120) = v21;
    *(_QWORD *)(v18 + 128) = 0x3FE0000000000000;
    *(_DWORD *)(v18 + 136) = 5;
    *(_QWORD *)(v18 + 144) = sub_100072D04;
    *(_QWORD *)(v18 + 152) = 0;
    *(_QWORD *)(v18 + 160) = sub_100072D60;
    *(_QWORD *)(v18 + 168) = 0;
    *(_DWORD *)(v18 + 176) = 5;
    *(float *)(v18 + 180) = v23;
    *(float *)(v18 + 184) = v24;
    *(float *)(v18 + 188) = v22;
    *(float *)(v18 + 192) = v24;
    *(_DWORD *)(v18 + 196) = 1008981770;
    *(_WORD *)(v18 + 200) = 257;
    *(_BYTE *)(v18 + 202) = 1;
    v25 = *(_QWORD *)(v3 + 48);
    *(_QWORD *)(v3 + 48) = v18;
  }
  else
  {
    v26._countAndFlagsBits = 0xD000000000000018;
    v26._object = (void *)0x80000001003DA360;
    Log.debug(_:isPrivate:)(v26, 0);
    v25 = *(_QWORD *)(v3 + 48);
    *(_QWORD *)(v3 + 48) = 0;
  }
  swift_release(v25);
  *(_BYTE *)(v3 + 248) = 1;
}

uint64_t sub_1000465CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5;
  uint64_t v11;
  void *v12;
  void (*v13)(_QWORD *__return_ptr, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[10];
  _BYTE v19[144];
  _QWORD v20[18];

  ariadne_trace(_:_:_:_:_:)(727056384, 0, 0, 0, 0);
  v11 = sub_10008F8B8();
  if (v11)
  {
    v12 = (void *)v11;
    if (!ARFrame.isVIOTrackingUnacceptable()())
    {
      v13 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v5 + 16) + 144);
      v14 = swift_retain();
      v13(v20, v14);
      swift_release();
      if ((v20[0] & 0x1000000) == 0)
      {
        __chkstk_darwin(v15);
        v18[2] = v5;
        v18[3] = v12;
        *(double *)&v18[4] = a4;
        *(double *)&v18[5] = a5;
        v18[6] = a1;
        v18[7] = a2;
        v17 = sub_10000EDC8(&qword_10047DB20);
        OS_dispatch_queue.sync<A>(execute:)(v20, sub_100047254, v18, v17);

        sub_100012C58((uint64_t)v20, (uint64_t)v19, &qword_10047DB20);
        ariadne_trace(_:_:_:_:_:)(727056388, 0, 0, 0, 0);
        goto LABEL_6;
      }
    }

  }
  sub_100047238((uint64_t)v19);
  ariadne_trace(_:_:_:_:_:)(727056388, 0, 0, 0, 0);
LABEL_6:
  sub_100012C58((uint64_t)v19, (uint64_t)v20, &qword_10047DB20);
  return sub_100012C58((uint64_t)v20, a3, &qword_10047DB20);
}

void sub_100046780(uint64_t a1@<X0>, void *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v13;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  __n128 *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  _BYTE v45[24];
  _BYTE v46[136];
  _BYTE v47[24];
  _BYTE v48[144];
  _BYTE v49[144];
  __n128 v50[8];
  char v51;
  id v52[12];
  _QWORD v53[12];
  __n128 v54[8];
  char v55;
  _QWORD v56[12];
  _BYTE v57[144];
  _BYTE v58[160];
  uint64_t v59;

  v8 = a4;
  v9 = a3;
  v13 = a5;
  if (!*(_QWORD *)(a1 + 48))
  {
    v25 = 0;
LABEL_7:
    sub_100047238((uint64_t)v57);
    sub_100012C58((uint64_t)v57, (uint64_t)v58, &qword_10047DB20);
    goto LABEL_10;
  }
  v59 = v7;
  v15 = *(double *)(a1 + 224);
  v16 = *(double *)(a1 + 232);
  v17 = *(_QWORD *)(a1 + 240);
  v18 = sub_100073A9C(a6, a7, *(double *)(a1 + 32), v15, v16);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  swift_retain();
  sub_10007319C(a2, v17, (uint64_t)v52, v18, v20, v22, v24, v15, v16);
  v25 = v52[0];
  v26 = v52[1];
  v27 = v52[2];
  v28 = v52[3];
  v29 = v52[4];
  v30 = v52[6];
  v31 = v52[7];
  v40 = v52[8];
  v41 = v52[5];
  v38 = v52[10];
  v39 = v52[9];
  v37 = v52[11];
  swift_release();
  sub_100012C58((uint64_t)v52, (uint64_t)v53, &qword_10047DB28);
  if (!v53[0])
  {
    v8 = a4;
    v13 = a5;
    v9 = a3;
    goto LABEL_7;
  }
  v56[0] = v25;
  v56[1] = v26;
  v56[2] = v27;
  v56[3] = v28;
  v56[4] = v29;
  v56[5] = v41;
  v56[6] = v30;
  v56[7] = v31;
  v56[8] = v40;
  v56[9] = v39;
  v56[10] = v38;
  v56[11] = v37;
  if (*(_QWORD *)(a1 + 48))
  {
    swift_beginAccess(a1 + 64, v45, 0, 0);
    sub_100012C58(a1 + 64, (uint64_t)v57, &qword_10047DB20);
    sub_1000127E8(v52);
    swift_retain();
    sub_100047648((uint64_t)v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000476AC);
    sub_100072644((uint64_t)v56, (uint64_t)v57, v50);
    sub_100047648((uint64_t)v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000475C4);
    swift_release();
    sub_100012810(v52);
    v54[6] = v50[6];
    v54[7] = v50[7];
    v55 = v51;
    v54[2] = v50[2];
    v54[3] = v50[3];
    v54[4] = v50[4];
    v54[5] = v50[5];
    v54[0] = v50[0];
    v54[1] = v50[1];
    nullsub_1(v54);
    v32 = v54;
  }
  else
  {
    sub_100047238((uint64_t)v57);
    v32 = (__n128 *)v57;
  }
  sub_100012C58((uint64_t)v32, (uint64_t)v58, &qword_10047DB20);
  v8 = a4;
  v13 = a5;
  v9 = a3;
LABEL_10:
  v33 = a1 + 64;
  swift_beginAccess(a1 + 64, v47, 1, 0);
  sub_100012C58(a1 + 64, (uint64_t)v48, &qword_10047DB20);
  sub_100012C58((uint64_t)v58, a1 + 64, &qword_10047DB20);
  sub_100047648((uint64_t)v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000475C4);
  swift_beginAccess(a1 + 64, v54, 33, 0);
  sub_100012C58(a1 + 64, (uint64_t)v49, &qword_10047DB20);
  sub_100012C58((uint64_t)v49, (uint64_t)v50, &qword_10047DB20);
  if (sub_1000127D0((uint64_t *)v50) != 1)
    sub_1000435AC(v9, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 240), v8, *(_BYTE *)(*(_QWORD *)(a1 + 64) + 202));
  swift_endAccess(v54);
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  if (qword_1004AF238)
  {
    v34 = *(void **)(qword_1004AF238 + 72);
    if (v34)
    {
      sub_100012C58(a1 + 64, (uint64_t)v54, &qword_10047DB20);
      v35 = *(_QWORD *)(a1 + 240);
      v36 = v34;
      sub_100047648((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000476AC);
      sub_100079804((uint64_t)v54, v35, a6, a7);

      sub_100047648((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000475C4);
    }
    else
    {
      v36 = v25;
    }

    sub_100012C58(v33, (uint64_t)v46, &qword_10047DB20);
    sub_100012C58((uint64_t)v46, v13, &qword_10047DB20);
    sub_100047648((uint64_t)v46, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000476AC);
  }
  else
  {
    __break(1u);
  }
}

void sub_100046BE4(uint64_t a1, uint64_t a2, char a3, const void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[6];

  v6 = v5;
  v12 = *(NSObject **)(v5 + 200);
  v13 = swift_allocObject(&unk_100440AF8, 576, 15);
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  *(_BYTE *)(v13 + 32) = a3;
  memcpy((void *)(v13 + 48), a4, 0x200uLL);
  *(_QWORD *)(v13 + 560) = v6;
  *(_QWORD *)(v13 + 568) = a5;
  v14 = swift_allocObject(&unk_100440B20, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_1000471A8;
  *(_QWORD *)(v14 + 24) = v13;
  v16[4] = sub_100030C24;
  v16[5] = v14;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_1000DDB80;
  v16[3] = &unk_100440B38;
  v15 = _Block_copy(v16);
  sub_1000471E8((uint64_t)a4);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation(v14, "", 75, 131, 24, 1);
  swift_release();
  swift_release();
  if ((v12 & 1) != 0)
    __break(1u);
}

void sub_100046D54(uint64_t a1, uint64_t a2, char a3, __n128 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  char v22;
  double v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  id v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  _BYTE v34[24];
  _BYTE v35[24];
  _BYTE v36[144];
  uint64_t v37[18];
  _QWORD v38[16];
  _BYTE v39[16];
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  uint64_t v44;

  if (a3 == 2 || (v12 = sub_10008F8B8()) == 0)
  {
    swift_beginAccess(a5 + 64, v39, 1, 0);
    sub_100012C58(a5 + 64, (uint64_t)v36, &qword_10047DB20);
    sub_100012C58((uint64_t)v36, (uint64_t)v37, &qword_10047DB20);
    if (sub_1000127D0(v37) != 1)
    {
      *(_QWORD *)(a5 + 176) = 0;
      *(_QWORD *)(a5 + 184) = 0;
      *(_BYTE *)(a5 + 192) = 2;
    }
  }
  else
  {
    v13 = (void *)v12;
    v14 = ARFrame.viewToCamera(screenPoint:sceneView:orientation:)(*(_QWORD *)(a5 + 40), &protocol witness table for ARSCNView, *(double *)&a1, *(double *)&a2);
    if (a6
      && (v16 = SIMD2<>.init(_:)(v14, v15),
          (*(void (**)(_QWORD *__return_ptr, void *, uint64_t, double))(*(_QWORD *)a6 + 312))(v38, v13, 7, v16), sub_100012C58((uint64_t)v38, (uint64_t)v39, &qword_1004866F0), v44))
    {
      v32 = v41;
      v33 = v40;
      v30 = v43;
      v31 = v42;
      sub_100047210((uint64_t)v38);
      v17 = simd_float4x4.position.getter(v33, v32, v31, v30);
      v18 = 0;
      v20 = v19;
      v21 = v17;
    }
    else
    {
      v21 = 0.0;
      v20 = 0;
      v18 = 1;
    }
    swift_beginAccess(a5 + 64, v34, 1, 0);
    sub_100012C58(a5 + 64, (uint64_t)v36, &qword_10047DB20);
    sub_100012C58((uint64_t)v36, (uint64_t)v37, &qword_10047DB20);
    if (sub_1000127D0(v37) != 1)
    {
      v22 = a3 & 1;
      if (v18)
        v23 = 0.0;
      else
        v23 = v21;
      if (v18)
        v24 = 0;
      else
        v24 = v20;
      if (v18)
        v22 = 2;
      *(double *)(a5 + 176) = v23;
      *(_QWORD *)(a5 + 184) = v24;
      *(_BYTE *)(a5 + 192) = v22;
    }

  }
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  if (qword_1004AF238)
  {
    v25 = *(void **)(qword_1004AF238 + 72);
    if (v25)
    {
      swift_beginAccess(a5 + 64, v35, 0, 0);
      sub_100012C58(a5 + 64, (uint64_t)v36, &qword_10047DB20);
      sub_100012C58((uint64_t)v36, (uint64_t)v37, &qword_10047DB20);
      if (sub_1000127D0(v37) == 1 || *(_BYTE *)(a5 + 192) == 2)
      {
        v26 = 0;
        v27 = 0;
        v28 = 1;
      }
      else
      {
        v28 = 0;
        v26 = *(_QWORD *)(a5 + 176);
        v27 = *(_QWORD *)(a5 + 184);
      }
      v29 = v25;
      sub_10007A4EC(v26, v27, v28, a4);

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100047044()
{
  uint64_t v0;
  _BYTE v2[144];

  swift_release();

  swift_release();
  sub_100012C58(v0 + 64, (uint64_t)v2, &qword_10047DB20);
  sub_100047648((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000475C4);

  return swift_deallocClassInstance(v0, 249, 15);
}

uint64_t type metadata accessor for CVController()
{
  return objc_opt_self(_TtC7Measure12CVController);
}

uint64_t getEnumTagSinglePayload for CVOptions(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[16])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CVOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CVOptions()
{
  return &type metadata for CVOptions;
}

uint64_t sub_100047174()
{
  _QWORD *v0;

  swift_release(v0[8]);
  swift_release(v0[70]);
  swift_release(v0[71]);
  return swift_deallocObject(v0, 576, 15);
}

void sub_1000471A8()
{
  __n128 *v0;

  sub_100046D54(v0[1].n128_i64[0], v0[1].n128_i64[1], v0[2].n128_i8[0], v0 + 3, v0[35].n128_i64[0], v0[35].n128_i64[1]);
}

uint64_t sub_1000471C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000471D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000471E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000471E8(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_100047210(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 104));
  return a1;
}

double sub_100047238(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void sub_100047254(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100046780(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(__n128 **)(v1 + 48), *(_QWORD *)(v1 + 56), a1, *(double *)(v1 + 32), *(double *)(v1 + 40));
}

uint64_t sub_100047274(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  void *v21;
  id v22;
  id v23;
  __int16 v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  _QWORD *v31;
  _BYTE v32[144];

  v2 = v1;
  v30 = a1;
  v28 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v27 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v29 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1003B2850);
  v12 = sub_10000EDC8((uint64_t *)&unk_100481B90);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v13 = qword_1004AF890;
  v14 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v12 + 272);
  v15 = swift_retain(qword_1004AF890);
  *(_QWORD *)(v2 + 16) = v14(KeyPath, v13, v15);
  *(_WORD *)(v2 + 24) = 257;
  *(_QWORD *)(v2 + 32) = 0x403E000000000000;
  *(_QWORD *)(v2 + 48) = 0;
  sub_100047238((uint64_t)v32);
  sub_100012C58((uint64_t)v32, v2 + 64, &qword_10047DB20);
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  if (qword_10047A880 != -1)
    swift_once(&qword_10047A880, sub_100045D68);
  v16 = sub_1000362E8(v7, (uint64_t)qword_1004AF1C8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v16, v7);
  v31 = _swiftEmptyArrayStorage;
  v17 = sub_100047734();
  v18 = sub_10000EDC8(&qword_100486EF0);
  v19 = sub_10004777C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v18, v19, v4, v17);
  v20 = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v29, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v28);
  *(_QWORD *)(v2 + 200) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x7465645F65676465, 0xED0000726F746365, v10, v6, v20, 0);
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_QWORD *)(v2 + 240) = 4;
  *(_BYTE *)(v2 + 248) = 0;
  v21 = v30;
  *(_QWORD *)(v2 + 40) = v30;
  v22 = v21;
  sub_100045DEC();
  v23 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v23, "addObserver:selector:name:object:", v2, "updateForCurrentOrientation", UIDeviceOrientationDidChangeNotification, 0);

  if (*(_BYTE *)(v2 + 25))
    v24 = 256;
  else
    v24 = 0;
  sub_100046168(v24 | *(unsigned __int8 *)(v2 + 24), *(double *)(v2 + 32));
  return v2;
}

uint64_t sub_1000475C4(uint64_t result, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (result)
  {
    swift_release(result);

    swift_bridgeObjectRelease(a10);
    swift_release(a11);
    swift_bridgeObjectRelease(a12);
    swift_bridgeObjectRelease(a13);
    return swift_release(a14);
  }
  return result;
}

uint64_t sub_100047648(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 128);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), v4);
  return a1;
}

uint64_t sub_1000476AC(uint64_t result, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  id v17;
  id v18;
  id v19;

  if (result)
  {
    swift_retain(result);
    v17 = a2;
    v18 = a3;
    v19 = a4;
    swift_bridgeObjectRetain(a10);
    swift_retain(a11);
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a13);
    return swift_retain(a14);
  }
  return result;
}

unint64_t sub_100047734()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047E690;
  if (!qword_10047E690)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_10047E690);
  }
  return result;
}

unint64_t sub_10004777C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047E6A0;
  if (!qword_10047E6A0)
  {
    v1 = sub_100012B80(&qword_100486EF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10047E6A0);
  }
  return result;
}

uint64_t *sub_1000477C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

double sub_100047894(void *a1, __n128 a2, __n128 a3, double a4)
{
  void *v4;
  void *v5;
  _QWORD *v8;
  int64x2_t v9;
  _QWORD *v10;
  int64x2_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  int64x2_t v26;
  int64x2_t v28;
  _QWORD v29[18];
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  double v34[60];
  _QWORD v35[18];
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  double v40[60];

  v5 = v4;
  type metadata accessor for MeasureCamera(0);
  static ComputedCameraProperties.shared.getter(v29);
  v21 = v31;
  v23 = v30;
  v17 = v33;
  v19 = v32;
  v8 = static ComputedCameraProperties.shared.getter(v34);
  *(double *)v9.i64 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v8, a2, v23, v21, v19, v17, v34[0]);
  v28 = v9;
  static ComputedCameraProperties.shared.getter(v35);
  v22 = v37;
  v24 = v36;
  v18 = v39;
  v20 = v38;
  v10 = static ComputedCameraProperties.shared.getter(v40);
  *(double *)v11.i64 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v10, a3, v24, v22, v20, v18, v40[0]);
  v26 = v11;
  v12 = sub_1000490F8(a1, *(double *)v28.i64, *(double *)v11.i64, a4);
  v13 = objc_msgSend(v5, "layer");
  objc_msgSend(v13, "addSublayer:", v12);

  v14 = sub_10000EDC8(&qword_10047DB70);
  v15 = swift_allocObject(v14, 48, 7);
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v15 + 16) = xmmword_1003B0F60;
  *(int64x2_t *)(v15 + 32) = vzip1q_s64(v28, v26);
  return result;
}

double sub_1000479D8(void *a1, __n128 a2, float32x4_t a3, float a4, double a5)
{
  float v5;
  __n128 v6;

  v5 = vmuls_lane_f32(a4, a3, 2);
  v6.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)a2.n128_u64[0], vmul_n_f32(*(float32x2_t *)a3.f32, a4));
  v6.n128_f32[2] = a2.n128_f32[2] + v5;
  v6.n128_u32[3] = 0;
  return sub_100047894(a1, a2, v6, a5);
}

uint64_t type metadata accessor for DebugLineView()
{
  return objc_opt_self(_TtC7Measure13DebugLineView);
}

void destroy for DebugRectangle(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)a1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

uint64_t *_s7Measure14DebugRectangleVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (void *)a2[2];
  a1[2] = (uint64_t)v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v6 = v5;
  return a1;
}

uint64_t *assignWithCopy for DebugRectangle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (void *)a2[2];
  v9 = (void *)a1[2];
  a1[2] = (uint64_t)v8;
  v10 = v8;

  return a1;
}

_QWORD *assignWithTake for DebugRectangle(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = (void *)a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for DebugRectangle()
{
  return &type metadata for DebugRectangle;
}

uint64_t sub_100047C24(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, double a5)
{
  void *v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  __n128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v14 - 8);
  v29 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100049274();
  v17 = (void *)static OS_dispatch_queue.main.getter();
  v18 = swift_allocObject(&unk_100440CA8, 64, 7);
  *(_QWORD *)(v18 + 16) = v5;
  *(_QWORD *)(v18 + 24) = a1;
  *(double *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a2;
  *(_QWORD *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a4;
  aBlock[4] = sub_100049968;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100440CC0;
  v19 = _Block_copy(aBlock);
  v20 = v5;
  swift_bridgeObjectRetain(a1);
  v21 = a2;
  swift_bridgeObjectRetain(a4);
  v22 = swift_release();
  static DispatchQoS.unspecified.getter(v22);
  aBlock[0] = _swiftEmptyArrayStorage;
  v23 = sub_100030E1C();
  v24 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v25 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v11, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v16, v29);
}

void sub_100047E30(char *a1, __n128 *a2, void *a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char *v13;
  id v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  double v19;
  char v20;
  double v21;
  double v22;
  id v23;
  NSString v24;
  id v25;
  NSString v26;
  id v27;
  char *v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE v33[24];

  sub_100048154(a2, a3, a4);
  if (v6)
  {
    v9 = v6;
    v10 = v7;
    v11 = v8;
    sub_10004827C(3);
    v12 = OBJC_IVAR____TtC7Measure13DebugLineView_allRectangles;
    v13 = *(char **)&a1[OBJC_IVAR____TtC7Measure13DebugLineView_allRectangles];
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v14 = v11;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
    *(_QWORD *)&a1[v12] = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v13 = sub_10005F8AC(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
      *(_QWORD *)&a1[v12] = v13;
    }
    v17 = *((_QWORD *)v13 + 2);
    v16 = *((_QWORD *)v13 + 3);
    if (v17 >= v16 >> 1)
    {
      v13 = sub_10005F8AC((char *)(v16 > 1), v17 + 1, 1, v13);
      *(_QWORD *)&a1[v12] = v13;
    }
    *((_QWORD *)v13 + 2) = v17 + 1;
    v18 = &v13[24 * v17];
    *((_QWORD *)v18 + 4) = v9;
    *((_QWORD *)v18 + 5) = v10;
    *((_QWORD *)v18 + 6) = v14;
    v19 = COERCE_DOUBLE(pointClosestToOrigin(_:)(v9));
    if ((v20 & 1) != 0)
    {

      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v9);
    }
    else
    {
      v21 = CGPoint.init(_:)(v19);
      v23 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", v21, v22, 100.0, 100.0);
      v24 = String._bridgeToObjectiveC()();
      v25 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithName:size:", v24, 12.0);

      objc_msgSend(v23, "setFont:", v25);
      v26 = String._bridgeToObjectiveC()();
      objc_msgSend(v23, "setText:", v26);

      objc_msgSend(v23, "setTextColor:", a3);
      v27 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
      objc_msgSend(v23, "setShadowColor:", v27);

      objc_msgSend(a1, "addSubview:", v23);
      v28 = &a1[OBJC_IVAR____TtC7Measure13DebugLineView_allRectangleLabels];
      swift_beginAccess(v28, v33, 33, 0);
      v29 = v23;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v31 = *(_QWORD *)((*(_QWORD *)v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v30 = *(_QWORD *)((*(_QWORD *)v28 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v31 >= v30 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
      v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
      specialized Array._endMutation()(v32);
      swift_endAccess(v33);

      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v9);

    }
  }
}

void sub_100048154(__n128 *a1, void *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;

  v6 = sub_10000EDC8(&qword_10047DB68);
  v7 = swift_allocObject(v6, 96, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1003B0AF0;
  v8 = a1[1].n128_u64[0];
  if (!v8)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v8 == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v9 = (_QWORD *)v7;
  v20 = a1[2];
  v21 = a1[3];
  sub_100047894(a2, v20, v21, a3);
  v9[4] = v10;
  v9[5] = v11;
  if (v8 < 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v12 = v21;
  v22 = a1[4];
  sub_100047894(a2, v12, v22, a3);
  v9[6] = v13;
  v9[7] = v14;
  if (v8 != 3)
  {
    v19 = a1[5];
    sub_100047894(a2, v22, v19, a3);
    v9[8] = v15;
    v9[9] = v16;
    sub_100047894(a2, v19, v20, a3);
    v9[10] = v17;
    v9[11] = v18;
    sub_100048CBC(v9);
    swift_bridgeObjectRelease(v9);
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_10004827C(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100049274();
  v11 = (void *)static OS_dispatch_queue.main.getter();
  v12 = swift_allocObject(&unk_100440C08, 32, 7);
  *(_QWORD *)(v12 + 16) = v1;
  *(_QWORD *)(v12 + 24) = a1;
  aBlock[4] = sub_1000492D4;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100440C20;
  v13 = _Block_copy(aBlock);
  v14 = v1;
  v15 = swift_release();
  static DispatchQoS.unspecified.getter(v15);
  aBlock[0] = _swiftEmptyArrayStorage;
  v16 = sub_100030E1C();
  v17 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v18 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_100048448(char *a1, double *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  double v18;
  char v19;
  double v20;
  double v21;
  id v22;
  NSString v23;
  id v24;
  NSString v25;
  id v26;
  char *v27;
  id v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE v32[24];

  sub_10004827C(3);
  v6 = sub_10004874C(a2, a3, 1.0);
  v8 = v7;
  v10 = v9;
  v11 = OBJC_IVAR____TtC7Measure13DebugLineView_allRectangles;
  v12 = *(char **)&a1[OBJC_IVAR____TtC7Measure13DebugLineView_allRectangles];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v13 = v10;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
  *(_QWORD *)&a1[v11] = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v12 = sub_10005F8AC(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    *(_QWORD *)&a1[v11] = v12;
  }
  v16 = *((_QWORD *)v12 + 2);
  v15 = *((_QWORD *)v12 + 3);
  if (v16 >= v15 >> 1)
  {
    v12 = sub_10005F8AC((char *)(v15 > 1), v16 + 1, 1, v12);
    *(_QWORD *)&a1[v11] = v12;
  }
  *((_QWORD *)v12 + 2) = v16 + 1;
  v17 = &v12[24 * v16];
  *((_QWORD *)v17 + 4) = v6;
  *((_QWORD *)v17 + 5) = v8;
  *((_QWORD *)v17 + 6) = v13;
  v18 = COERCE_DOUBLE(pointClosestToOrigin(_:)(v6));
  if ((v19 & 1) != 0)
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v20 = CGPoint.init(_:)(v18);
    v22 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", v20, v21, 100.0, 100.0);
    v23 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithName:size:", v23, 12.0);

    objc_msgSend(v22, "setFont:", v24);
    v25 = String._bridgeToObjectiveC()();
    objc_msgSend(v22, "setText:", v25);

    objc_msgSend(v22, "setTextColor:", a3);
    v26 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
    objc_msgSend(v22, "setShadowColor:", v26);

    objc_msgSend(a1, "addSubview:", v22);
    v27 = &a1[OBJC_IVAR____TtC7Measure13DebugLineView_allRectangleLabels];
    swift_beginAccess(v27, v32, 33, 0);
    v28 = v22;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
    v30 = *(_QWORD *)((*(_QWORD *)v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v29 = *(_QWORD *)((*(_QWORD *)v27 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v30 >= v29 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
    v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v28);
    specialized Array._endMutation()(v31);
    swift_endAccess(v32);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v6);

  }
}

uint64_t sub_10004874C(double *a1, void *a2, double a3)
{
  void *v3;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  _QWORD *v10;
  double v11;
  double v12;
  id v13;
  id v14;
  uint64_t v15;
  double v16;
  id v17;
  id v18;
  double v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;

  v7 = sub_10000EDC8(&qword_10047DB68);
  result = swift_allocObject(v7, 96, 7);
  *(_OWORD *)(result + 16) = xmmword_1003B0AF0;
  v9 = *((_QWORD *)a1 + 2);
  if (!v9)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v9 == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v10 = (_QWORD *)result;
  v11 = a1[4];
  v12 = a1[5];
  v13 = sub_1000490F8(a2, v11, v12, a3);
  v14 = objc_msgSend(v3, "layer");
  objc_msgSend(v14, "addSublayer:", v13);

  v15 = sub_10000EDC8(&qword_10047DB70);
  result = swift_allocObject(v15, 48, 7);
  *(_OWORD *)(result + 16) = xmmword_1003B0F60;
  *(double *)(result + 32) = v11;
  *(double *)(result + 40) = v12;
  v10[4] = result;
  v10[5] = v13;
  if (v9 < 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v16 = a1[6];
  v17 = sub_1000490F8(a2, v12, v16, a3);
  v18 = objc_msgSend(v3, "layer");
  objc_msgSend(v18, "addSublayer:", v17);

  result = swift_allocObject(v15, 48, 7);
  *(_OWORD *)(result + 16) = xmmword_1003B0F60;
  *(double *)(result + 32) = v12;
  *(double *)(result + 40) = v16;
  v10[6] = result;
  v10[7] = v17;
  if (v9 != 3)
  {
    v19 = a1[7];
    v20 = sub_1000490F8(a2, v16, v19, a3);
    v21 = objc_msgSend(v3, "layer");
    objc_msgSend(v21, "addSublayer:", v20);

    v22 = swift_allocObject(v15, 48, 7);
    *(_OWORD *)(v22 + 16) = xmmword_1003B0F60;
    *(double *)(v22 + 32) = v16;
    *(double *)(v22 + 40) = v19;
    v10[8] = v22;
    v10[9] = v20;
    v23 = sub_1000490F8(a2, v19, v11, a3);
    v24 = objc_msgSend(v3, "layer");
    objc_msgSend(v24, "addSublayer:", v23);

    v25 = swift_allocObject(v15, 48, 7);
    *(_OWORD *)(v25 + 16) = xmmword_1003B0F60;
    *(double *)(v25 + 32) = v19;
    *(double *)(v25 + 40) = v11;
    v10[10] = v25;
    v10[11] = v23;
    v26 = sub_100048CBC(v10);
    swift_bridgeObjectRelease(v10);
    return v26;
  }
LABEL_9:
  __break(1u);
  return result;
}

unint64_t sub_1000489D0(char *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  uint64_t v14;
  unint64_t result;
  uint64_t v16;
  uint64_t i;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];

  v3 = &a1[OBJC_IVAR____TtC7Measure13DebugLineView_allRectangles];
  v4 = *(_QWORD *)(*(_QWORD *)&a1[OBJC_IVAR____TtC7Measure13DebugLineView_allRectangles] + 16);
  if (v4 >= a2)
    v5 = a2;
  else
    v5 = *(_QWORD *)(*(_QWORD *)&a1[OBJC_IVAR____TtC7Measure13DebugLineView_allRectangles] + 16);
  v6 = v4 - v5;
  if (__OFSUB__(v4, v5))
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v6 < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v2 = a1;
  v7 = v6;
  v6 = 0;
  v8 = sub_100048E40(0, v7, (uint64_t)v2);

  v9 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v10 = v9 - v5;
  if (__OFSUB__(v9, v5))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v2 = v2;
  v6 = (uint64_t)sub_100048FB4(0, (_BYTE *)v10, (uint64_t)v2);

  v11 = *((_QWORD *)v8 + 2);
  if (v11)
  {
    v12 = (void **)(v8 + 48);
    do
    {
      v13 = *v12;
      v12 += 3;
      objc_msgSend(v13, "removeFromSuperlayer");
      --v11;
    }
    while (v11);
  }
  swift_bridgeObjectRelease(v8);
  v14 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (__OFSUB__(v14, v5))
    goto LABEL_24;
  result = sub_100048BD4(v14 - v5);
  if (!((unint64_t)v6 >> 62))
  {
    v16 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v16)
      goto LABEL_29;
    goto LABEL_14;
  }
LABEL_25:
  if (v6 < 0)
    v20 = v6;
  else
    v20 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v16 = _CocoaArrayWrapper.endIndex.getter(v20);
  result = swift_bridgeObjectRelease(v6);
  if (!v16)
    goto LABEL_29;
LABEL_14:
  if (v16 < 1)
    goto LABEL_32;
  for (i = 0; i != v16; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0)
      v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
    else
      v18 = *(id *)(v6 + 8 * i + 32);
    v19 = v18;
    objc_msgSend(v18, "removeFromSuperview");

  }
LABEL_29:
  result = swift_bridgeObjectRelease(v6);
  v21 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v22 = v21 - v5;
  if (!__OFSUB__(v21, v5))
  {
    swift_beginAccess(&v2[OBJC_IVAR____TtC7Measure13DebugLineView_allRectangleLabels], v23, 33, 0);
    sub_100048BFC(v22);
    return swift_endAccess(v23);
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

unint64_t sub_100048BD4(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
      v3 = v2 >= result;
      result = v2 - result;
      if (v3)
        return sub_100063ACC(result, v2);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100048BFC(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if (result)
  {
    v3 = result;
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *v1;
      if (!((unint64_t)*v1 >> 62))
      {
        v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
        v5 = -v4;
        if (!__OFSUB__(0, v4))
          goto LABEL_5;
        goto LABEL_20;
      }
    }
    if (v2 < 0)
      v8 = v2;
    else
      v8 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v4 = _CocoaArrayWrapper.endIndex.getter(v8);
    result = swift_bridgeObjectRelease(v2);
    v5 = -v4;
    if (!__OFSUB__(0, v4))
    {
LABEL_5:
      v6 = -v3;
      if (v5 <= 0 && v5 > v6)
        goto LABEL_23;
      result = v4 - v3;
      if (!__OFADD__(v4, v6))
      {
        if (v4 >= result)
          return (uint64_t)sub_100063BF0(result, v4);
        goto LABEL_22;
      }
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      return result;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_100048CBC(_QWORD *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v3 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v4 = sub_10000EDC8(&qword_10047DB70);
  result = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(result + 16) = xmmword_1003B0AF0;
  v6 = a1[2];
  if (!v6)
  {
    __break(1u);
    goto LABEL_11;
  }
  v7 = a1[4];
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v8 = result;
  *(_QWORD *)(result + 32) = *(_QWORD *)(v7 + 32);
  if (v6 < 2)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v9 = a1[6];
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *(_QWORD *)(result + 40) = *(_QWORD *)(v9 + 32);
  if (v6 < 3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v10 = a1[8];
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *(_QWORD *)(result + 48) = *(_QWORD *)(v10 + 32);
  if (v6 < 4)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v11 = a1[10];
  if (*(_QWORD *)(v11 + 16))
  {
    *(_QWORD *)(result + 56) = *(_QWORD *)(v11 + 32);
    objc_msgSend(v3, "addSublayer:", a1[5]);
    objc_msgSend(v3, "addSublayer:", a1[7]);
    objc_msgSend(v3, "addSublayer:", a1[9]);
    objc_msgSend(v3, "addSublayer:", a1[11]);
    v12 = objc_msgSend(v1, "layer");
    objc_msgSend(v12, "addSublayer:", v3);

    swift_bridgeObjectRetain(a1);
    return v8;
  }
LABEL_17:
  __break(1u);
  return result;
}

char *sub_100048E40(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v16;
  __int128 v17;

  v16 = (uint64_t)result;
  v3 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v3)
    return (char *)_swiftEmptyArrayStorage;
  result = sub_1000A5644(0, v3 & ~(v3 >> 63), 0);
  if (a2 >= v16 && (v3 & 0x8000000000000000) == 0)
  {
    v5 = OBJC_IVAR____TtC7Measure13DebugLineView_allRectangles;
    v6 = v16;
    v7 = 24 * v16;
    while (a2 != v6)
    {
      if (v16 < 0)
        goto LABEL_14;
      v8 = *(_QWORD *)(a3 + v5);
      if (v6 >= *(_QWORD *)(v8 + 16))
        goto LABEL_15;
      v9 = v8 + v7;
      v17 = *(_OWORD *)(v9 + 32);
      v10 = *(void **)(v9 + 48);
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(*((_QWORD *)&v17 + 1));
      result = v10;
      v13 = result;
      if (v12 >= v11 >> 1)
        result = sub_1000A5644((char *)(v11 > 1), v12 + 1, 1);
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v14 = &_swiftEmptyArrayStorage[3 * v12];
      *((_OWORD *)v14 + 2) = v17;
      v14[6] = v13;
      ++v6;
      v7 += 24;
      if (a2 == v6)
        return (char *)_swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
  return result;
}

_QWORD *sub_100048FB4(_QWORD *result, _BYTE *a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _QWORD *v15;

  v3 = a2 - (_BYTE *)result;
  if (__OFSUB__(a2, result))
    goto LABEL_18;
  v4 = (uint64_t)result;
  result = &_swiftEmptyArrayStorage;
  if (v3)
  {
    v15 = &_swiftEmptyArrayStorage;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v3);
    if ((uint64_t)a2 < v4 || v3 < 0)
      goto LABEL_19;
    v7 = (uint64_t *)(a3 + OBJC_IVAR____TtC7Measure13DebugLineView_allRectangleLabels);
    while (a2 != (_BYTE *)v4)
    {
      result = (_QWORD *)swift_beginAccess(v7, v14, 32, 0);
      v8 = *v7;
      if ((*v7 & 0xC000000000000001) != 0)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v8);
      }
      else
      {
        if (v4 < 0)
          goto LABEL_16;
        if ((unint64_t)v4 >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_17;
        v9 = *(id *)(v8 + 8 * v4 + 32);
      }
      v10 = v9;
      v11 = swift_endAccess(v14);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v12 = v15[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
      result = (_QWORD *)specialized ContiguousArray._endMutation()(v13);
      if (a2 == (_BYTE *)++v4)
        return v15;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  return result;
}

id sub_1000490F8(void *a1, double a2, double a3, double a4)
{
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v8 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v9 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
  CGPoint.init(_:)(a2);
  objc_msgSend(v9, "moveToPoint:");
  CGPoint.init(_:)(a3);
  objc_msgSend(v9, "addLineToPoint:");
  v10 = objc_msgSend(v9, "CGPath");
  objc_msgSend(v8, "setPath:", v10);

  objc_msgSend(v8, "setLineWidth:", a4);
  v11 = objc_msgSend(a1, "CGColor");
  objc_msgSend(v8, "setStrokeColor:", v11);

  v12 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v13 = objc_msgSend(v12, "CGColor");

  objc_msgSend(v8, "setFillColor:", v13);
  return v8;
}

unint64_t sub_100049274()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047FB70;
  if (!qword_10047FB70)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10047FB70);
  }
  return result;
}

uint64_t sub_1000492B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000492D4()
{
  uint64_t v0;

  return sub_1000489D0(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000492DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000492EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000492F4(void *a1, void *a2, double a3, float a4)
{
  id v8;
  double v9;
  double v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v8 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v9 = CGPoint.init(_:)(a3);
  v11 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:", 1, v9, v10, a4, 0.0, 6.28318531);
  v12 = objc_msgSend(v11, "CGPath");
  objc_msgSend(v8, "setPath:", v12);

  objc_msgSend(v8, "setLineWidth:", 1.0);
  v13 = objc_msgSend(a1, "CGColor");
  objc_msgSend(v8, "setStrokeColor:", v13);

  v14 = objc_msgSend(a2, "CGColor");
  objc_msgSend(v8, "setFillColor:", v14);

  return v8;
}

uint64_t sub_10004945C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  id v19;
  id v20;
  __n128 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v12 - 8);
  v28 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100049274();
  v16 = (void *)static OS_dispatch_queue.main.getter(v15);
  v17 = (_QWORD *)swift_allocObject(&unk_100440C58, 56, 7);
  v17[2] = v4;
  v17[3] = a1;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a4;
  aBlock[4] = sub_100049694;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100440C70;
  v18 = _Block_copy(aBlock);
  v19 = v4;
  swift_bridgeObjectRetain(a1);
  v20 = a2;
  swift_bridgeObjectRetain(a4);
  v21 = swift_release();
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  v22 = sub_100030E1C();
  v23 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v24 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v9, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v14, v28);
}

uint64_t sub_100049658()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100049694()
{
  uint64_t v0;

  sub_100048448(*(char **)(v0 + 16), *(double **)(v0 + 24), *(void **)(v0 + 32));
}

void sub_1000496A4(uint64_t a1, void *a2)
{
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  _QWORD v29[18];
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  double v34[60];
  _QWORD v35[18];
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  double v40[62];

  v18 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    type metadata accessor for MeasureCamera(0);
    v4 = (void *)objc_opt_self(UIColor);
    v5 = 0;
    v6 = a1 + 32;
    while (1)
    {
      v7 = v5 + 1;
      v8 = (v5 + 1) & 3;
      if (v8 >= v3)
        break;
      v27 = *(__n128 *)(v6 + 16 * v8);
      v28 = *(__n128 *)(v6 + 16 * v5);
      static ComputedCameraProperties.shared.getter(v29);
      v23 = v31;
      v25 = v30;
      v19 = v33;
      v21 = v32;
      v9 = static ComputedCameraProperties.shared.getter(v34);
      v28.n128_u64[0] = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v9, v28, v25, v23, v21, v19, v34[0]);
      static ComputedCameraProperties.shared.getter(v35);
      v24 = v37;
      v26 = v36;
      v20 = v39;
      v22 = v38;
      v10 = static ComputedCameraProperties.shared.getter(v40);
      v27.n128_u64[0] = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v10, v27, v26, v24, v22, v20, v40[0]);
      v11 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
      v12 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
      objc_msgSend(v12, "moveToPoint:", CGPoint.init(_:)(v28.n128_f64[0]));
      objc_msgSend(v12, "addLineToPoint:", CGPoint.init(_:)(v27.n128_f64[0]));
      v13 = objc_msgSend(v12, "CGPath");
      objc_msgSend(v11, "setPath:", v13);

      objc_msgSend(v11, "setLineWidth:", 1.0);
      v14 = objc_msgSend(a2, "CGColor");
      objc_msgSend(v11, "setStrokeColor:", v14);

      v15 = objc_msgSend(v4, "clearColor");
      v16 = objc_msgSend(v15, "CGColor");

      objc_msgSend(v11, "setFillColor:", v16);
      objc_msgSend(v18, "addSublayer:", v11);

      v5 = v7;
      if (v3 == v7)
        return;
    }
    __break(1u);
  }
}

uint64_t sub_10004992C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100049968()
{
  uint64_t v0;

  sub_100047E30(*(char **)(v0 + 16), *(__n128 **)(v0 + 24), *(void **)(v0 + 40), *(double *)(v0 + 32));
}

uint64_t *initializeBufferWithCopyOfBuffer for DebugLine2D(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = (uint64_t)v4;
  swift_bridgeObjectRetain(v3);
  v5 = v4;
  return a1;
}

void destroy for DebugLine2D(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)a1);

}

uint64_t *assignWithCopy for DebugLine2D(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a2[1];
  v7 = (void *)a1[1];
  a1[1] = (uint64_t)v6;
  v8 = v6;

  return a1;
}

_QWORD *assignWithTake for DebugLine2D(_QWORD *a1, _OWORD *a2)
{
  void *v4;

  swift_bridgeObjectRelease(*a1);
  v4 = (void *)a1[1];
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for DebugLine2D(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DebugLine2D(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugLine2D()
{
  return &type metadata for DebugLine2D;
}

void destroy for LineDivisionsState(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));

}

uint64_t initializeWithCopy for LineDivisionsState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  id v12;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  v6 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 64);
  v8 = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 96);
  v10 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  v11 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v11;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  v12 = v6;
  return a1;
}

uint64_t assignWithCopy for LineDivisionsState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v9 = *(void **)(a1 + 48);
  v10 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  v11 = v10;

  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 96);
  v14 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v13;
  *(_OWORD *)(a1 + 112) = v14;
  *(_OWORD *)(a1 + 80) = v12;
  v15 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v15;
  return a1;
}

__n128 initializeWithTake for LineDivisionsState(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for LineDivisionsState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for LineDivisionsState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 145))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LineDivisionsState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 145) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 145) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LineDivisionsState()
{
  return &type metadata for LineDivisionsState;
}

id sub_100049E38()
{
  id result;
  id v1;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  result = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (*((_QWORD *)&xmmword_1004AF258 + 1))
  {
    v1 = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
    qword_1004AF1E0 = Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100049E9C@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A888 != -1)
    swift_once(&qword_10047A888, sub_100049E38);
  v2 = (void *)qword_1004AF1E0;
  *a1 = qword_1004AF1E0;
  return v2;
}

uint64_t sub_100049EEC(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v11[9];
  __int8 v12;
  float32x4_t v13[9];
  __int8 v14;

  v2 = a1[7];
  v11[6] = a1[6];
  v11[7] = v2;
  v11[8] = a1[8];
  v12 = a1[9].i8[0];
  v3 = a1[3];
  v11[2] = a1[2];
  v11[3] = v3;
  v4 = a1[5];
  v11[4] = a1[4];
  v11[5] = v4;
  v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  v6 = a2[7];
  v13[6] = a2[6];
  v13[7] = v6;
  v13[8] = a2[8];
  v14 = a2[9].i8[0];
  v7 = a2[3];
  v13[2] = a2[2];
  v13[3] = v7;
  v8 = a2[5];
  v13[4] = a2[4];
  v13[5] = v8;
  v9 = a2[1];
  v13[0] = *a2;
  v13[1] = v9;
  return sub_10004A194(v11, v13) & 1;
}

unint64_t sub_100049F7C(uint64_t a1)
{
  unint64_t result;

  result = sub_100049FA0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100049FA0()
{
  unint64_t result;

  result = qword_10047DBA0;
  if (!qword_10047DBA0)
  {
    result = swift_getWitnessTable(&unk_1003B28B4, &type metadata for LineDivisionsState);
    atomic_store(result, (unint64_t *)&qword_10047DBA0);
  }
  return result;
}

void sub_100049FE4(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  char v20;
  char v21;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(float *)(*(_QWORD *)(a1 + 56) + 4 * v11);
    swift_bridgeObjectRetain(v17);
    v19 = sub_1000C80A8(v16, v17);
    v21 = v20;
    swift_bridgeObjectRelease(v17);
    if ((v21 & 1) == 0 || *(float *)(*(_QWORD *)(a2 + 56) + 4 * v19) != v18)
      return;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_10004A194(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  char v16;
  unsigned __int8 v17;
  int32x2_t v18;

  if (((a1->u8[0] ^ a2->u8[0]) & 1) != 0 || ((a1->u8[1] ^ a2->u8[1]) & 1) != 0)
    return 0;
  v5 = a1[1].i64[0];
  v6 = a2[1].i64[0];
  if (!v5)
  {
    if (v6)
      return 0;
    goto LABEL_12;
  }
  if (!v6)
    return 0;
  v7 = a1->i64[1];
  v8 = a2->i64[1];
  if (v7 == v8 && v5 == v6
    || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v5, v8, v6, 0), result = 0, (v9 & 1) != 0))
  {
LABEL_12:
    v10 = a2[1].i8[12];
    if ((a1[1].i8[12] & 1) != 0)
    {
      if (!a2[1].i8[12])
        return 0;
    }
    else
    {
      if (a1[1].f32[2] != a2[1].f32[2])
        v10 = 1;
      if ((v10 & 1) != 0)
        return 0;
    }
    sub_100049FE4(a1[2].i64[0], a2[2].i64[0]);
    if ((v11 & 1) == 0 || *(double *)&a1[2].i64[1] != *(double *)&a2[2].i64[1])
      return 0;
    v12 = (void *)a1[3].i64[0];
    v13 = (void *)a2[3].i64[0];
    if (v12)
    {
      if (!v13)
        return 0;
      type metadata accessor for WorldLine(0);
      v14 = v13;
      v15 = v12;
      v16 = static NSObject.== infix(_:_:)(v15, v14);

      if ((v16 & 1) == 0)
        return 0;
    }
    else if (v13)
    {
      return 0;
    }
    if ((a1[8].i8[0] & 1) != 0)
    {
      if (!a2[8].i8[0])
        return 0;
    }
    else if ((a2[8].i8[0] & 1) != 0
           || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[6], a2[6]), (int8x16_t)vceqq_f32(a1[7], a2[7])), vandq_s8((int8x16_t)vceqq_f32(a1[5], a2[5]), (int8x16_t)vceqq_f32(a1[4], a2[4])))) & 0x80000000) == 0)
    {
      return 0;
    }
    v17 = a2[9].u8[0];
    if ((a1[9].i8[0] & 1) != 0)
      goto LABEL_33;
    if ((a2[9].i8[0] & 1) == 0)
    {
      v18 = vceq_f32(*(float32x2_t *)&a1[8].u32[2], *(float32x2_t *)&a2[8].u32[2]);
      v17 = v18.i8[0] & v18.i8[4];
LABEL_33:
      if ((v17 & 1) != 0)
        return 1;
    }
    return 0;
  }
  return result;
}

double sub_10004A394@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  double v8;
  char v9;
  char v10;
  double result;
  int v12;
  _BYTE v13[16];
  _DWORD v14[4];
  char v15;
  __int16 v16;
  char v17;
  int v18;
  __int16 v19;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin();
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LOBYTE(v14[0]) = 1;
  LOBYTE(v18) = 0;
  LOBYTE(v16) = 1;
  v7 = Date.init()(v4);
  v8 = Date.timeIntervalSince1970.getter(v7);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
  v9 = v18;
  v10 = v16;
  v15 = 1;
  v13[0] = 1;
  *(_BYTE *)a1 = v14[0];
  *(_BYTE *)(a1 + 1) = v9;
  *(_DWORD *)(a1 + 2) = v18;
  *(_WORD *)(a1 + 6) = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = v10;
  *(_WORD *)(a1 + 29) = v16;
  *(_BYTE *)(a1 + 31) = v17;
  *(_QWORD *)(a1 + 32) = &_swiftEmptyDictionarySingleton;
  *(double *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_BYTE *)(a1 + 128) = v15;
  v12 = v14[0];
  *(_DWORD *)(a1 + 132) = *(_DWORD *)((char *)v14 + 3);
  *(_DWORD *)(a1 + 129) = v12;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = v13[0];
  return result;
}

void sub_10004A4C8()
{
  char *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  Class isa;

  v1 = *(void **)&v0[OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_topLabel];
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v2 = *(void **)&v0[OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_bottomLabel];
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v27 = (void *)objc_opt_self(NSLayoutConstraint);
  v3 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v4 = swift_allocObject(v3, 88, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1003B2900;
  v5 = objc_msgSend(v2, "leadingAnchor");
  v6 = objc_msgSend(v0, "leadingAnchor");
  v7 = objc_msgSend(v5, "constraintEqualToAnchor:", v6);

  *(_QWORD *)(v4 + 32) = v7;
  v8 = objc_msgSend(v2, "trailingAnchor");
  v9 = objc_msgSend(v0, "trailingAnchor");
  v10 = objc_msgSend(v8, "constraintEqualToAnchor:", v9);

  *(_QWORD *)(v4 + 40) = v10;
  v11 = objc_msgSend(v2, "bottomAnchor");
  v12 = objc_msgSend(v0, "bottomAnchor");
  v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

  *(_QWORD *)(v4 + 48) = v13;
  v14 = objc_msgSend(v2, "topAnchor");
  v15 = objc_msgSend(v1, "bottomAnchor");
  v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

  *(_QWORD *)(v4 + 56) = v16;
  v17 = objc_msgSend(v1, "leadingAnchor");
  v18 = objc_msgSend(v0, "leadingAnchor");
  v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

  *(_QWORD *)(v4 + 64) = v19;
  v20 = objc_msgSend(v1, "trailingAnchor");
  v21 = objc_msgSend(v0, "trailingAnchor");
  v22 = objc_msgSend(v20, "constraintEqualToAnchor:", v21);

  *(_QWORD *)(v4 + 72) = v22;
  v23 = objc_msgSend(v1, "topAnchor");
  v24 = objc_msgSend(v0, "topAnchor");
  v25 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

  *(_QWORD *)(v4 + 80) = v25;
  specialized Array._endMutation()(v26);
  sub_10002277C();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "activateConstraints:", isa, swift_bridgeObjectRelease(v4).n128_f64[0]);

}

char *sub_10004A844(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  uint64_t v10;
  uint64_t v11;
  objc_class *ObjCClassFromMetadata;
  id v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  objc_super v21;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  v10 = OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_topLabel;
  v11 = type metadata accessor for InteractiveLabel();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v11);
  v13 = objc_allocWithZone(ObjCClassFromMetadata);
  v14 = v4;
  *(_QWORD *)&v4[v10] = objc_msgSend(v13, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v15 = OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_bottomLabel;
  *(_QWORD *)&v14[v15] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v21.receiver = v14;
  v21.super_class = ObjectType;
  v16 = (char *)objc_msgSendSuper2(&v21, "initWithFrame:", a1, a2, a3, a4);
  v17 = *(void **)&v16[OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_topLabel];
  v18 = v16;
  objc_msgSend(v17, "setUserInteractionEnabled:", 1);
  v19 = *(void **)&v18[OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_bottomLabel];
  objc_msgSend(v19, "setUserInteractionEnabled:", 1);
  objc_msgSend(v18, "addSubview:", v17);
  objc_msgSend(v18, "addSubview:", v19);
  sub_10004A4C8();

  return v18;
}

char *sub_10004A9D0(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  objc_class *ObjCClassFromMetadata;
  id v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  objc_super v17;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v5 = OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_topLabel;
  v6 = type metadata accessor for InteractiveLabel();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v6);
  v8 = objc_allocWithZone(ObjCClassFromMetadata);
  v9 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v8, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v10 = OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_bottomLabel;
  *(_QWORD *)&v9[v10] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v17.receiver = v9;
  v17.super_class = ObjectType;
  v11 = (char *)objc_msgSendSuper2(&v17, "initWithCoder:", a1);
  v12 = v11;
  if (v11)
  {
    v13 = *(void **)&v11[OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_topLabel];
    v14 = v11;
    objc_msgSend(v13, "setUserInteractionEnabled:", 1);
    v15 = *(void **)&v14[OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_bottomLabel];
    objc_msgSend(v15, "setUserInteractionEnabled:", 1);
    objc_msgSend(v14, "addSubview:", v13);
    objc_msgSend(v14, "addSubview:", v15);
    sub_10004A4C8();

  }
  return v12;
}

void sub_10004AB58(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  NSString v4;
  NSString v5;
  void *v6;
  NSString v7;
  NSString v8;
  _BYTE v9[16];
  _QWORD v10[2];

  v3 = *(void **)(v1 + OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_topLabel);
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setText:", v4);

  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setAccessibilityLabel:", v5);

  v6 = *(void **)(v1 + OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_bottomLabel);
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setText:", v7);

  sub_10001F9D8(a1 + 32, (uint64_t)v9);
  sub_10001F9D8((uint64_t)v9, (uint64_t)v10);
  if (v10[1])
    v8 = String._bridgeToObjectiveC()();
  else
    v8 = 0;
  objc_msgSend(v6, "setAccessibilityLabel:", v8);

}

void sub_10004AC68(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v11;
  NSString v12;
  void *v13;
  NSString v14;
  NSString v15;
  id v16;

  v11 = *(void **)(v8 + OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_topLabel);
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "setText:", v12);

  if (a4)
    a4 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "setAccessibilityLabel:", a4);

  v13 = *(void **)(v8 + OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_bottomLabel);
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "setText:", v14);

  if (a8)
    v15 = String._bridgeToObjectiveC()();
  else
    v15 = 0;
  v16 = v15;
  objc_msgSend(v13, "setAccessibilityLabel:");

}

uint64_t type metadata accessor for AccessibilityDoubleStack()
{
  return objc_opt_self(_TtC7Measure24AccessibilityDoubleStack);
}

UIColor sub_10004ADD0()
{
  UIColor result;

  sub_100018148(0, &qword_10047D0A0, UIColor_ptr);
  result.super.isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(1.0, 1.0, 1.0, 1.0).super.isa;
  qword_10047DBE0 = (uint64_t)result.super.isa;
  return result;
}

void sub_10004AE20()
{
  qword_10047DBE8 = 0x4032000000000000;
}

char *sub_10004AE30(double a1, double a2, double a3, double a4)
{
  char *v4;
  id v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char *v20;
  uint64_t v21;
  char *v22;
  objc_class *ObjectType;
  objc_super v25;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure17AccuracyDebugView_maxWidth] = 0;
  v9 = objc_allocWithZone((Class)UILabel);
  v10 = v4;
  v11 = objc_msgSend(v9, "initWithFrame:", a1, a2, a3, a4);
  if (qword_10047A890 != -1)
    swift_once(&qword_10047A890, sub_10004ADD0);
  objc_msgSend(v11, "setTextColor:", qword_10047DBE0);
  objc_msgSend(v11, "setTextAlignment:", 0);
  v12 = (void *)objc_opt_self(UIFont);
  if (qword_10047A898 != -1)
    swift_once(&qword_10047A898, sub_10004AE20);
  v13 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DBE8);
  objc_msgSend(v11, "setFont:", v13);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure17AccuracyDebugView_lineLengthLabel] = v11;
  v14 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v14, "setTextColor:", qword_10047DBE0);
  objc_msgSend(v14, "setTextAlignment:", 0);
  v15 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DBE8);
  objc_msgSend(v14, "setFont:", v15);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure17AccuracyDebugView_currentLineLabel] = v14;
  v16 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v16, "setTextColor:", qword_10047DBE0);
  objc_msgSend(v16, "setTextAlignment:", 0);
  v17 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DBE8);
  objc_msgSend(v16, "setFont:", v17);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure17AccuracyDebugView_currentEstimatedErrorLabel] = v16;
  v18 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v18, "setTextColor:", qword_10047DBE0);
  objc_msgSend(v18, "setTextAlignment:", 0);
  v19 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DBE8);
  objc_msgSend(v18, "setFont:", v19);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure17AccuracyDebugView_planeTypesLabel] = v18;
  v25.receiver = v10;
  v25.super_class = ObjectType;
  v20 = (char *)objc_msgSendSuper2(&v25, "initWithFrame:", a1, a2, a3, a4);
  v21 = *(_QWORD *)&v20[OBJC_IVAR____TtC7Measure17AccuracyDebugView_lineLengthLabel];
  v22 = v20;
  objc_msgSend(v22, "addSubview:", v21);
  objc_msgSend(v22, "addSubview:", *(_QWORD *)&v22[OBJC_IVAR____TtC7Measure17AccuracyDebugView_currentLineLabel]);
  objc_msgSend(v22, "addSubview:", *(_QWORD *)&v22[OBJC_IVAR____TtC7Measure17AccuracyDebugView_currentEstimatedErrorLabel]);
  objc_msgSend(v22, "addSubview:", *(_QWORD *)&v22[OBJC_IVAR____TtC7Measure17AccuracyDebugView_planeTypesLabel]);

  return v22;
}

void sub_10004B284()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  id v16;
  void *v17;
  uint64_t v18;
  char **v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  id v26;
  void *v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  id v38;
  void *v39;
  double v40;
  double v41;
  unint64_t v42;
  unint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  double *v47;
  double v48;
  double v49;
  uint64_t v50;
  double v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  id v57;
  void *v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  CGRect v63;

  v1 = v0;
  v2 = objc_msgSend(v0, "superview");
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "frame");
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;

    v12 = objc_msgSend(v1, "subviews");
    v62 = sub_100018148(0, (unint64_t *)&qword_100481BC0, UIView_ptr);
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v62);

    if ((unint64_t)v13 >> 62)
    {
      if (v13 < 0)
        v18 = v13;
      else
        v18 = v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v13);
      v14 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (!v14)
        goto LABEL_15;
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v13);
      if (!v14)
        goto LABEL_15;
    }
    if (v14 < 1)
    {
      __break(1u);
      goto LABEL_72;
    }
    for (i = 0; i != v14; ++i)
    {
      if ((v13 & 0xC000000000000001) != 0)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v13);
      else
        v16 = *(id *)(v13 + 8 * i + 32);
      v17 = v16;
      objc_msgSend(v16, "sizeToFit", v62);

    }
LABEL_15:
    v19 = &selRef_renderer_didAddNode_forAnchor_;
    v20 = objc_msgSend(v1, "subviews", swift_bridgeObjectRelease_n(v13, 2).n128_f64[0]);
    v21 = v62;
    v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v62);

    if ((unint64_t)v22 >> 62)
    {
      if (v22 < 0)
        v30 = v22;
      else
        v30 = v22 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v22);
      v23 = _CocoaArrayWrapper.endIndex.getter(v30);
      if (v23)
      {
LABEL_17:
        if (v23 >= 1)
        {
          v24 = 0;
          v25 = 0.0;
          do
          {
            if ((v22 & 0xC000000000000001) != 0)
              v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v22);
            else
              v26 = *(id *)(v22 + 8 * v24 + 32);
            v27 = v26;
            ++v24;
            objc_msgSend(v26, "frame", v62);
            v29 = v28;

            v25 = v25 + v29;
          }
          while (v23 != v24);
LABEL_28:
          *(_QWORD *)&v31 = swift_bridgeObjectRelease_n(v22, 2).n128_u64[0];
          v32 = OBJC_IVAR____TtC7Measure17AccuracyDebugView_maxWidth;
          v33 = *(double *)&v1[OBJC_IVAR____TtC7Measure17AccuracyDebugView_maxWidth];
          v34 = objc_msgSend(v1, "subviews", v31);
          v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v21);

          if ((unint64_t)v35 >> 62)
          {
            if (v35 < 0)
              v50 = v35;
            else
              v50 = v35 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v35);
            v36 = _CocoaArrayWrapper.endIndex.getter(v50);
            swift_bridgeObjectRelease(v35);
            if (v36)
            {
LABEL_30:
              sub_1000A5660(0, v36 & ~(v36 >> 63), 0);
              if ((v36 & 0x8000000000000000) == 0)
              {
                for (j = 0; j != v36; ++j)
                {
                  if ((v35 & 0xC000000000000001) != 0)
                    v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v35);
                  else
                    v38 = *(id *)(v35 + 8 * j + 32);
                  v39 = v38;
                  objc_msgSend(v38, "frame", v62);
                  v41 = v40;

                  v43 = *(_QWORD *)&_swiftEmptyArrayStorage[2];
                  v42 = *(_QWORD *)&_swiftEmptyArrayStorage[3];
                  if (v43 >= v42 >> 1)
                    sub_1000A5660((char *)(v42 > 1), v43 + 1, 1);
                  *(_QWORD *)&_swiftEmptyArrayStorage[2] = v43 + 1;
                  _swiftEmptyArrayStorage[v43 + 4] = v41;
                }
                swift_bridgeObjectRelease(v35);
                v19 = &selRef_renderer_didAddNode_forAnchor_;
                v21 = v62;
                v44 = _swiftEmptyArrayStorage[2];
                if (v44 != 0.0)
                  goto LABEL_39;
                goto LABEL_50;
              }
LABEL_73:
              __break(1u);
LABEL_74:
              __break(1u);
              return;
            }
          }
          else
          {
            v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v36)
              goto LABEL_30;
          }
          swift_bridgeObjectRelease(v35);
          v44 = _swiftEmptyArrayStorage[2];
          if (v44 != 0.0)
          {
LABEL_39:
            v45 = _swiftEmptyArrayStorage[4];
            v46 = *(_QWORD *)&v44 - 1;
            if (v46)
            {
              v47 = &_swiftEmptyArrayStorage[5];
              do
              {
                v48 = *v47++;
                v49 = v48;
                if (v45 < v48)
                  v45 = v49;
                --v46;
              }
              while (v46);
            }
LABEL_51:
            swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
            if ((*(_QWORD *)&v45 & 0xFFFFFFFFFFFFFLL) != 0)
              v51 = v33;
            else
              v51 = v45;
            if ((~*(_QWORD *)&v45 & 0x7FF0000000000000) != 0)
              v51 = v45;
            if (v45 < v33)
              v51 = v33;
            *(double *)&v1[v32] = v51;
            v63.origin.x = v5;
            v63.origin.y = v7;
            v63.size.width = v9;
            v63.size.height = v11;
            objc_msgSend(v1, "setFrame:", 0.0, CGRectGetMidY(v63) + 100.0, *(double *)&v1[v32], v25);
            v52 = objc_msgSend(v1, v19[203]);
            v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, v21);

            if ((unint64_t)v53 >> 62)
            {
              if (v53 < 0)
                v61 = v53;
              else
                v61 = v53 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v53);
              v54 = _CocoaArrayWrapper.endIndex.getter(v61);
              swift_bridgeObjectRelease(v53);
              if (v54)
              {
LABEL_60:
                if (v54 >= 1)
                {
                  v55 = 0;
                  v56 = 0.0;
                  do
                  {
                    if ((v53 & 0xC000000000000001) != 0)
                      v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v53);
                    else
                      v57 = *(id *)(v53 + 8 * v55 + 32);
                    v58 = v57;
                    ++v55;
                    objc_msgSend(v57, "frame", v62);
                    objc_msgSend(v58, "setFrame:");
                    objc_msgSend(v58, "frame");
                    v60 = v59;

                    v56 = v56 + v60;
                  }
                  while (v54 != v55);
                  goto LABEL_70;
                }
                goto LABEL_74;
              }
            }
            else
            {
              v54 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
              if (v54)
                goto LABEL_60;
            }
LABEL_70:
            swift_bridgeObjectRelease(v53);
            return;
          }
LABEL_50:
          v45 = 0.0;
          goto LABEL_51;
        }
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
    }
    else
    {
      v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v22);
      if (v23)
        goto LABEL_17;
    }
    v25 = 0.0;
    goto LABEL_28;
  }
}

void sub_10004B834(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  NSString v5;
  void *v6;
  Swift::String v7;
  float (*v8)(void);
  float v9;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  unint64_t v13;
  NSString v14;
  float (*v15)(void);
  float v16;
  Swift::String v17;
  float v18;
  Swift::String v19;
  float v20;
  float v21;
  Swift::String v22;
  void *v23;
  void *v24;
  Swift::String v25;
  unint64_t v26;
  NSString v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v3 = 0xD000000000000019;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC7Measure17AccuracyDebugView_lineLengthLabel);
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setText:", v5);

  v38 = v1;
  v39 = 0;
  v6 = *(void **)(v1 + OBJC_IVAR____TtC7Measure17AccuracyDebugView_currentLineLabel);
  v40 = 0xE000000000000000;
  v7._countAndFlagsBits = 2112076;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  v8 = *(float (**)(void))((swift_isaMask & *a1) + 0x340);
  v9 = v8();
  Float.write<A>(to:)(&v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v9 * 100.0);
  v10._countAndFlagsBits = 28003;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = v39;
  v12 = (void *)v40;
  v39 = 8224;
  v40 = 0xE200000000000000;
  v11._object = v12;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  v13 = v40;
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setText:", v14, swift_bridgeObjectRelease(v13).n128_f64[0]);

  v15 = *(float (**)(void))((swift_isaMask & *a1) + 0x360);
  v16 = v15();
  if (v16 < 0.0)
  {
    v23 = (void *)0x80000001003DA640;
  }
  else
  {
    v39 = 0;
    v40 = 0xE000000000000000;
    v17._countAndFlagsBits = 2112069;
    v17._object = (void *)0xE300000000000000;
    String.append(_:)(v17);
    v18 = v15();
    Float.write<A>(to:)(&v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v18 * 100.0);
    v19._countAndFlagsBits = 673213795;
    v19._object = (void *)0xE400000000000000;
    String.append(_:)(v19);
    v20 = v15();
    v21 = v8();
    Float.write<A>(to:)(&v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, (float)(v20 / v21) * 100.0);
    v22._countAndFlagsBits = 10533;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    v3 = v39;
    v23 = (void *)v40;
  }
  v24 = *(void **)(v38 + OBJC_IVAR____TtC7Measure17AccuracyDebugView_currentEstimatedErrorLabel);
  v39 = 8224;
  v40 = 0xE200000000000000;
  v25._countAndFlagsBits = v3;
  v25._object = v23;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v23);
  v26 = v40;
  v27 = String._bridgeToObjectiveC()();
  objc_msgSend(v24, "setText:", v27, swift_bridgeObjectRelease(v26).n128_f64[0]);

  v28 = *(void **)(v38 + OBJC_IVAR____TtC7Measure17AccuracyDebugView_planeTypesLabel);
  if (v16 >= 0.0)
  {
    v39 = 540684368;
    v40 = 0xE400000000000000;
    v29 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x250))();
    v30 = v29;
    if ((v29 & 0xC000000000000001) != 0)
    {
      v31 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v29);
    }
    else
    {
      if (!*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        JUMPOUT(0x10004BE20);
      }
      v31 = *(id *)(v29 + 32);
    }
    v32 = v31;
    v33 = swift_bridgeObjectRelease(v30);
    v34 = (*(uint64_t (**)(__n128))((swift_isaMask & *v32) + 0x2C0))(v33);

    v35 = (*(uint64_t (**)(void))(*(_QWORD *)v34 + 216))();
    swift_release();
    if (v35)
    {
      v36 = *(unsigned __int8 *)(v35 + 48);
      swift_release();
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x10004BE38);
  }
  v37 = String._bridgeToObjectiveC()();
  objc_msgSend(v28, "setText:", v37, swift_bridgeObjectRelease(0xE000000000000000).n128_f64[0]);

  sub_10004B284();
}

uint64_t sub_10004BE74(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v2 < v5)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

unint64_t sub_10004BEB8(uint64_t a1)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(float *)(a1 + 32);
    v3 = v1 - 1;
    if (v1 != 1)
    {
      v4 = (float *)(a1 + 36);
      do
      {
        v5 = *v4++;
        v6 = v5;
        if (v2 < v5)
          v2 = v6;
        --v3;
      }
      while (v3);
    }
    v7 = LODWORD(v2);
  }
  else
  {
    v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

uint64_t type metadata accessor for AccuracyDebugView()
{
  return objc_opt_self(_TtC7Measure17AccuracyDebugView);
}

void sub_10004BF88(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  if (qword_10047A8A8 != -1)
    a1 = swift_once(&qword_10047A8A8, sub_10004C6F0);
  v5 = qword_1004AF1F0;
  v6 = *(_QWORD *)(v2 + 16);
  if (!((unint64_t)qword_1004AF1F0 >> 62))
  {
    v7 = *(_QWORD *)((qword_1004AF1F0 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_5;
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (qword_1004AF1F0 < 0)
    v16 = qword_1004AF1F0;
  else
    v16 = qword_1004AF1F0 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(qword_1004AF1F0);
  v7 = _CocoaArrayWrapper.endIndex.getter(v16);
  swift_bridgeObjectRelease(v5);
  if (!v7)
    goto LABEL_18;
LABEL_5:
  if (v6 == 0x8000000000000000 && v7 == -1)
    goto LABEL_23;
  a1 = v6 % v7;
  if ((v5 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (a1 < *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v8 = *(id *)(v5 + 8 * a1 + 32);
      goto LABEL_11;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_19:
  v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v5);
LABEL_11:
  v9 = v8;
  sub_10004C100((uint64_t)v8);
  v11 = v10;

  if (v11)
  {
    v12 = (void *)objc_opt_self(SCNTransaction);
    objc_msgSend(v12, "begin");
    objc_msgSend(a2, "addChildNode:", v11);
    objc_msgSend(v12, "commit");

    v13 = *(_QWORD *)(v3 + 16);
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (!v14)
    {
      *(_QWORD *)(v3 + 16) = v15;
      return;
    }
    goto LABEL_22;
  }
LABEL_24:
  __break(1u);
}

void sub_10004C100(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  double v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  unint64_t v35;
  NSString v36;
  uint64_t v37;
  id v38;
  NSString v39;
  id v40;
  id v41;
  float *v42;
  NSString v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __C::SCNVector3 v48;
  __C::SCNVector4 v49;

  v2 = v1;
  v45 = a1;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10047A8A0 != -1)
    swift_once(&qword_10047A8A0, sub_10004C6D4);
  v7 = qword_1004AF1E8;
  if (!qword_1004AF1E8)
    return;
  v8 = (void *)objc_opt_self(ARSCNPlaneGeometry);
  swift_unknownObjectRetain(v7);
  v9 = objc_msgSend(v8, "planeGeometryWithDevice:", v7);
  if (!v9)
  {
    swift_unknownObjectRelease(v7);
    return;
  }
  v10 = v9;
  v11 = objc_msgSend(v9, "materials");
  v12 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v17 = v13;
    else
      v17 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v18 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v13);
    if (v18)
      goto LABEL_7;
LABEL_17:
    *(_QWORD *)&v16 = swift_bridgeObjectRelease(v13).n128_u64[0];
    goto LABEL_18;
  }
  if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_17;
LABEL_7:
  if ((v13 & 0xC000000000000001) != 0)
  {
    v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
  }
  else
  {
    if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_32;
    }
    v14 = *(id *)(v13 + 32);
  }
  v15 = v14;
  objc_msgSend(v14, "setBlendMode:", 4, swift_bridgeObjectRelease(v13).n128_f64[0]);

LABEL_18:
  v19 = objc_msgSend(v10, "materials", v16);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v12);

  if (!((unint64_t)v12 >> 62))
  {
    if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_20;
LABEL_28:
    *(_QWORD *)&v23 = swift_bridgeObjectRelease(v12).n128_u64[0];
    goto LABEL_29;
  }
  if (v12 < 0)
    v24 = v12;
  else
    v24 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v12);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v12);
  if (!v25)
    goto LABEL_28;
LABEL_20:
  if ((v12 & 0xC000000000000001) != 0)
  {
LABEL_32:
    v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
    goto LABEL_23;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v20 = *(id *)(v12 + 32);
LABEL_23:
    v21 = v20;
    v22 = objc_msgSend(v20, "diffuse", swift_bridgeObjectRelease(v12).n128_f64[0]);

    objc_msgSend(v22, "setContents:", v45);
LABEL_29:
    v26 = objc_msgSend(v1, "geometry", v23);
    objc_msgSend(v10, "updateFromPlaneGeometry:", v26);

    v27 = (void *)objc_opt_self(SCNNode);
    v28 = objc_msgSend(v27, "nodeWithGeometry:", v10);
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    *(_QWORD *)&v29 = swift_bridgeObjectRelease(v47).n128_u64[0];
    v46 = 0xD000000000000015;
    v47 = 0x80000001003DA6C0;
    v30 = objc_msgSend(v2, "identifier", v29);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v31 = UUID.uuidString.getter();
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v34._countAndFlagsBits = v31;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(v33);
    v35 = v47;
    v36 = String._bridgeToObjectiveC()();
    objc_msgSend(v28, "setName:", v36, swift_bridgeObjectRelease(v35).n128_f64[0]);

    v46 = 0;
    v47 = 0xE000000000000000;
    v37 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v46, &type metadata for String);
    v38 = objc_msgSend((id)objc_opt_self(SCNText), "textWithString:extrusionDepth:", v37, 0.01);
    swift_unknownObjectRelease(v37);
    v39 = String._bridgeToObjectiveC()();
    v40 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithName:size:", v39, 1.0);

    objc_msgSend(v38, "setFont:", v40);
    v41 = objc_msgSend(v27, "nodeWithGeometry:", v38);
    v42 = (float *)Float.piDiv2.unsafeMutableAddressor(v41);
    v49 = SCNVector4.init(_:_:_:_:)(1.0, 0.0, 0.0, -*v42);
    objc_msgSend(v41, "setRotation:", *(double *)&v49.x, *(double *)&v49.y, *(double *)&v49.z, *(double *)&v49.w);
    v43 = String._bridgeToObjectiveC()();
    objc_msgSend(v41, "setName:", v43);

    objc_msgSend(v41, "position");
    objc_msgSend(v41, "setPosition:");
    v48 = SCNVector3.init(_:_:_:)(0.05, 0.05, 0.05);
    objc_msgSend(v41, "setScale:", *(double *)&v48.x, *(double *)&v48.y, *(double *)&v48.z);
    objc_msgSend(v28, "addChildNode:", v41);
    swift_unknownObjectRelease(v7);

    return;
  }
  __break(1u);
}

uint64_t sub_10004C6A4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for DebugPlaneVisualizer()
{
  return objc_opt_self(_TtC7Measure20DebugPlaneVisualizer);
}

id sub_10004C6D4()
{
  id result;

  result = MTLCreateSystemDefaultDevice();
  qword_1004AF1E8 = (uint64_t)result;
  return result;
}

uint64_t sub_10004C6F0()
{
  uint64_t v0;
  uint64_t v1;
  UIColor v2;
  uint64_t result;

  v0 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v1 = swift_allocObject(v0, 72, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1003B2960;
  sub_100018148(0, &qword_10047D0A0, UIColor_ptr);
  *(UIColor *)(v1 + 32) = UIColor.init(_colorLiteralRed:green:blue:alpha:)(1.0, 0.14913, 0.0, 0.5);
  *(UIColor *)(v1 + 40) = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.99942, 0.98555, 0.0, 0.5);
  *(UIColor *)(v1 + 48) = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.23922, 0.67451, 0.96863, 0.5);
  *(UIColor *)(v1 + 56) = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.96078, 0.70588, 0.2, 0.5);
  v2.super.isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(1.0, 0.25279, 1.0, 0.5).super.isa;
  *(UIColor *)(v1 + 64) = v2;
  result = specialized Array._endMutation()(v2.super.isa);
  qword_1004AF1F0 = v1;
  return result;
}

void sub_10004C834(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_10004C884(double a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  if (__OFADD__(*(_QWORD *)v1, 1))
  {
    __break(1u);
    return;
  }
  v2 = *(double *)(v1 + 16);
  v3 = a1 - *(double *)(v1 + 8);
  v5 = *(double *)(v1 + 24);
  v4 = *(double *)(v1 + 32);
  if ((*(_QWORD *)&v3 & 0xFFFFFFFFFFFFFLL) != 0)
    v6 = *(double *)(v1 + 24);
  else
    v6 = v3;
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) != 0)
    v6 = v3;
  if (v3 >= v5)
    v5 = v6;
  ++*(_QWORD *)v1;
  *(double *)(v1 + 16) = v2 + v3;
  *(double *)(v1 + 24) = v5;
  if (v3 < v4)
  {
LABEL_15:
    *(double *)(v1 + 32) = v4;
    return;
  }
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) != 0)
  {
    v4 = v3;
    goto LABEL_15;
  }
  if ((*(_QWORD *)&v3 & 0xFFFFFFFFFFFFFLL) == 0)
    v4 = v3;
  *(double *)(v1 + 32) = v4;
}

void sub_10004C8FC()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (*(uint64_t *)v0 < 1)
    v1 = 0.0;
  else
    v1 = *(double *)(v0 + 16) / (double)*(uint64_t *)v0;
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  v2 = *(_QWORD *)(v0 + 48);
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + 48) = v4;
    *(double *)(v0 + 40) = *(double *)(v0 + 40) + (v1 - *(double *)(v0 + 40)) / (double)v4;
  }
}

void sub_10004C95C(_OWORD *a1)
{
  void *v2;
  void *v3;
  id v4;
  _QWORD v5[6];

  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[3] = 0u;
  v2 = (void *)objc_opt_self(NSTimer);
  v5[4] = sub_10004D548;
  v5[5] = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_10004C834;
  v5[3] = &unk_100440EF8;
  v3 = _Block_copy(v5);
  swift_retain();
  swift_release();
  v4 = objc_msgSend(v2, "scheduledTimerWithTimeInterval:repeats:block:", 1, v3, 1.0);
  _Block_release(v3);

}

uint64_t sub_10004CA38()
{
  return sub_10004CA70((uint64_t)&unk_100440F30, (uint64_t)sub_10004D658, (uint64_t)&unk_100440F48);
}

uint64_t sub_10004CA54()
{
  return sub_10004CA70((uint64_t)&unk_100440F80, (uint64_t)sub_10004D668, (uint64_t)&unk_100440F98);
}

uint64_t sub_10004CA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  CFTimeInterval v13;
  __n128 v14;
  void *v15;
  uint64_t v16;
  void *v17;
  __n128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = CACurrentMediaTime();
  sub_100049274();
  v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  v16 = swift_allocObject(a1, 32, 7);
  *(_QWORD *)(v16 + 16) = v3;
  *(CFTimeInterval *)(v16 + 24) = v13;
  aBlock[4] = a2;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = a3;
  v17 = _Block_copy(aBlock);
  swift_retain();
  v18 = swift_release();
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  v19 = sub_100030E1C();
  v20 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v21 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v7, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v23);
}

uint64_t sub_10004CC50(uint64_t result, double a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(result + 48);
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
    return result;
  }
  v5 = *(double *)(result + 64);
  v6 = a2 - *(double *)(result + 56);
  v8 = *(double *)(result + 72);
  v7 = *(double *)(result + 80);
  if ((*(_QWORD *)&v6 & 0xFFFFFFFFFFFFFLL) != 0)
    v9 = *(double *)(result + 72);
  else
    v9 = v6;
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) != 0)
    v9 = v6;
  if (v6 >= v8)
    v8 = v9;
  *(_QWORD *)(result + 48) = v4;
  *(double *)(result + 64) = v5 + v6;
  *(double *)(result + 72) = v8;
  if (v6 < v7)
  {
LABEL_15:
    *(double *)(result + 80) = v7;
    return result;
  }
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) != 0)
  {
    v7 = v6;
    goto LABEL_15;
  }
  if ((*(_QWORD *)&v6 & 0xFFFFFFFFFFFFFLL) == 0)
    v7 = v6;
  *(double *)(result + 80) = v7;
  return result;
}

void sub_10004CCC8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *Strong;
  void *v7;
  double v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  void *v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  void *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[24];
  double *v49;
  char v50[24];

  v3 = v2;
  v5 = v2 + 192;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5, a2);
  if (Strong)
  {
    v7 = Strong;

    if (v7 == a1)
      return;
  }
  v8 = CACurrentMediaTime();
  *(double *)(v3 + 112) = v8;
  swift_unknownObjectWeakAssign(v5, a1);
  v9 = (uint64_t *)(v3 + 200);
  swift_beginAccess(v3 + 200, v50, 1, 0);
  v10 = *(_QWORD *)(v3 + 200);
  v49 = _swiftEmptyArrayStorage;
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v5 = v10;
    else
      v5 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v5);
    if (v11)
      goto LABEL_5;
LABEL_19:
    swift_bridgeObjectRelease(v10);
    v19 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v10);
  if (!v11)
    goto LABEL_19;
LABEL_5:
  if (v11 < 1)
  {
    __break(1u);
    goto LABEL_61;
  }
  for (i = 0; i != v11; ++i)
  {
    if ((v10 & 0xC000000000000001) != 0)
    {
      v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v10);
    }
    else
    {
      v15 = *(_QWORD *)(v10 + 8 * i + 32);
      v16 = swift_retain();
    }
    v17 = (void *)(*(uint64_t (**)(__n128))(*(_QWORD *)v15 + 112))(v16);

    if (v17)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
      v13 = *((_QWORD *)v49 + 2);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v15);
      specialized ContiguousArray._endMutation()(v14);
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease(v10);
  v19 = v49;
LABEL_20:
  v20 = *v9;
  *v9 = (uint64_t)v19;
  swift_bridgeObjectRelease(v20);
  v21 = sub_10000EDC8(&qword_10047DDD8);
  v22 = swift_allocObject(v21, 32, 7);
  swift_unknownObjectWeakInit(v22 + 16, 0);
  swift_beginAccess(v23, &v49, 1, 0);
  swift_unknownObjectWeakAssign(v22 + 16, a1);
  v24 = a1;
  v25 = NSObject.hashValue.getter();

  *(_QWORD *)(v22 + 24) = v25;
  swift_beginAccess(v3 + 200, v48, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
  v28 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v27 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v28 >= v27 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
  v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v22);
  specialized Array._endMutation()(v29);
  swift_endAccess(v48);
  v5 = *v9;
  if ((unint64_t)*v9 >> 62)
  {
    if (v5 < 0)
      v45 = *v9;
    else
      v45 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v9);
    v30 = _CocoaArrayWrapper.endIndex.getter(v45);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v30 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v31 = *(_QWORD *)(v3 + 160);
  v32 = __OFADD__(v31, v30);
  v33 = v31 + v30;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 160) = v33;
    v22 = *(_QWORD *)(v3 + 168);
    v5 = *(_QWORD *)(v3 + 200);
    if (!((unint64_t)v5 >> 62))
    {
      v34 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_27;
    }
  }
  if (v5 < 0)
    v46 = v5;
  else
    v46 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v34 = _CocoaArrayWrapper.endIndex.getter(v46);
  swift_bridgeObjectRelease(v5);
  v5 = *v9;
LABEL_27:
  if (v34 <= v22)
    v35 = v22;
  else
    v35 = v34;
  v36 = *(_QWORD *)(v3 + 176);
  if (v35 > v36)
    v36 = v35;
  *(_QWORD *)(v3 + 168) = v35;
  *(_QWORD *)(v3 + 176) = v36;
  if (!((unint64_t)v5 >> 62))
  {
    v37 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v5);
    if (v37)
      goto LABEL_34;
LABEL_58:
    swift_bridgeObjectRelease(v5);
    return;
  }
  if (v5 < 0)
    v47 = v5;
  else
    v47 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  if (!_CocoaArrayWrapper.endIndex.getter(v47))
    goto LABEL_58;
LABEL_34:
  if ((v5 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v38 = *(_QWORD *)(v5 + 32);
    swift_retain();
    goto LABEL_37;
  }
LABEL_61:
  v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
LABEL_37:
  v39 = swift_bridgeObjectRelease(v5);
  v40 = (void *)(*(uint64_t (**)(__n128))(*(_QWORD *)v38 + 112))(v39);
  *(_QWORD *)&v41 = swift_release().n128_u64[0];
  if (v40)
  {
    objc_msgSend(v40, "timestamp", v41);
    v43 = v42;

    v44 = *(double *)(v3 + 184);
    if (v8 - v43 >= v44)
    {
      if ((~COERCE__INT64(v8 - v43) & 0x7FF0000000000000) != 0)
      {
        v44 = v8 - v43;
      }
      else if ((COERCE_UNSIGNED_INT64(v8 - v43) & 0xFFFFFFFFFFFFFLL) == 0)
      {
        v44 = v8 - v43;
      }
    }
    *(double *)(v3 + 184) = v44;
  }
}

uint64_t sub_10004D118()
{
  uint64_t v0;
  uint64_t v1;

  swift_unknownObjectWeakDestroy(v0 + 192, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
  return swift_deallocClassInstance(v0, 208, 7);
}

uint64_t type metadata accessor for DebugStatsController()
{
  return objc_opt_self(_TtC7Measure20DebugStatsController);
}

__n128 initializeWithTake for UserInputs(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DebugStatsController.FrameSampleWindow(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DebugStatsController.FrameSampleWindow(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DebugStatsController.FrameSampleWindow()
{
  return &type metadata for DebugStatsController.FrameSampleWindow;
}

uint64_t sub_10004D1F0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  __n128 v19;
  void *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  void *v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v32 - 8);
  v11 = __chkstk_darwin(v32);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v31 = (char *)&v30 - v14;
  *(_QWORD *)(v2 + 16) = 0;
  *(CFTimeInterval *)(v2 + 32) = CACurrentMediaTime();
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_QWORD *)(v2 + 184) = 0;
  swift_unknownObjectWeakInit(v2 + 192, 0);
  *(_QWORD *)(v2 + 200) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v2 + 24) = a1;
  v15 = (void *)objc_opt_self(CADisplayLink);
  v16 = a1;
  v17 = objc_msgSend(v15, "displayLinkWithTarget:selector:", v2, "tick");
  v18 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  objc_msgSend(v17, "addToRunLoop:forMode:", v18, NSDefaultRunLoopMode);

  sub_100049274();
  v20 = (void *)static OS_dispatch_queue.main.getter(v19);
  static DispatchTime.now()();
  + infix(_:_:)(v13, 3.0);
  v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22 = v32;
  v21(v13, v32);
  aBlock[4] = sub_10004D528;
  aBlock[5] = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100440ED0;
  v23 = _Block_copy(aBlock);
  swift_retain();
  v24 = swift_release();
  static DispatchQoS.unspecified.getter(v24);
  aBlock[0] = _swiftEmptyArrayStorage;
  v25 = sub_100030E1C();
  v26 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v27 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v4, v25);
  v28 = v31;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v31, v9, v6, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
  v21(v28, v22);
  return v2;
}

void sub_10004D528()
{
  _OWORD *v0;

  sub_10004C95C(v0);
}

uint64_t sub_10004D530(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004D540(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10004D54C()
{
  uint64_t v0;
  CFTimeInterval v1;
  uint64_t v2;
  CFTimeInterval v3;
  uint64_t v4;
  double v5;
  Swift::Double v6;
  Swift::Double v7;
  uint64_t v8;
  double v9;
  double v10;
  Swift::Double v11;
  Swift::Double v12;

  v1 = CACurrentMediaTime();
  v2 = *(_QWORD *)(v0 + 40);
  v3 = v1 - *(double *)(v0 + 32);
  *(CFTimeInterval *)(v0 + 32) = v1;
  sub_10004D690((double)v2 / v3);
  *(_QWORD *)(v0 + 40) = 0;
  v4 = 0;
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
    v4 = *(_QWORD *)(v0 + 16);
  sub_10004C8FC();
  sub_10004D80C(v4, v5, v6, *(Swift::Double *)(v0 + 88), v7, *(Swift::Double *)(v0 + 80));
  v8 = *(_QWORD *)(v0 + 104);
  if (v8 <= 1)
    v8 = 1;
  v9 = (double)*(uint64_t *)(v0 + 160) / (double)v8;
  sub_10004C8FC();
  sub_10004DCFC(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), v10, v11, *(Swift::Double *)(v0 + 144), v12, *(Swift::Double *)(v0 + 136), v9, *(Swift::Double *)(v0 + 184));
  *(_QWORD *)(v0 + 184) = 0;
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 168) = 0;
  sub_10004E3A4();
}

uint64_t sub_10004D634()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

double sub_10004D658()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 56) = result;
  return result;
}

uint64_t sub_10004D668()
{
  uint64_t v0;

  return sub_10004CC50(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

double sub_10004D690(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t countAndFlagsBits;
  void *object;
  void *v8;
  NSString v9;
  Swift::String v10;
  Swift::String v11;
  double result;

  v3 = sub_10000EDC8((uint64_t *)&unk_10048A100);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1003B0BD0;
  *(_QWORD *)(v4 + 56) = &type metadata for Double;
  *(_QWORD *)(v4 + 64) = &protocol witness table for Double;
  *(double *)(v4 + 32) = a1;
  v5._countAndFlagsBits = String.init(format:_:)(0x322E25203A535046, 0xE900000000000066, v4);
  countAndFlagsBits = v5._countAndFlagsBits;
  object = v5._object;
  v8 = *(void **)(v1 + OBJC_IVAR____TtC7Measure14DebugStatsView_tickFPSLabel);
  String.append(_:)(v5);
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setText:", v9, swift_bridgeObjectRelease(0xE200000000000000).n128_f64[0], 8224);

  if (qword_10047AAA8 != -1)
    swift_once(&qword_10047AAA8, sub_1000E17E0);
  v10._countAndFlagsBits = countAndFlagsBits;
  v10._object = object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 0xD000000000000013;
  v11._object = (void *)0x80000001003DA950;
  Log.default(_:isPrivate:)(v11, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(0x80000001003DA950).n128_u64[0];
  return result;
}

double sub_10004D80C(uint64_t a1, double a2, Swift::Double a3, Swift::Double a4, Swift::Double a5, Swift::Double a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  Swift::String v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  NSString v34;
  void *v35;
  Swift::String v36;
  NSString v37;
  void *v38;
  Swift::String v39;
  NSString v40;
  void *v41;
  Swift::String v42;
  NSString v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  double result;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;

  v13 = sub_10000EDC8((uint64_t *)&unk_10048A100);
  v14 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1003B0BD0;
  *(_QWORD *)(v14 + 56) = &type metadata for Double;
  *(_QWORD *)(v14 + 64) = &protocol witness table for Double;
  *(double *)(v14 + 32) = a2;
  v15 = String.init(format:_:)(0x322E25203A535046, 0xE900000000000066, v14);
  v17 = v16;
  v18 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1003B0F60;
  v19 = benchmarkFormat(seconds:)(a3);
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  v20 = sub_100018B34();
  *(_QWORD *)(v18 + 64) = v20;
  *(Swift::String *)(v18 + 32) = v19;
  v21 = benchmarkFormat(seconds:)(a5);
  *(_QWORD *)(v18 + 96) = &type metadata for String;
  *(_QWORD *)(v18 + 104) = v20;
  *(Swift::String *)(v18 + 72) = v21;
  v22 = String.init(format:_:)(0x3A78614D2F677641, 0xEE0040252F402520, v18);
  v52 = v23;
  v24 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1003B0F60;
  v25 = benchmarkFormat(seconds:)(a4);
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  *(_QWORD *)(v24 + 64) = v20;
  *(Swift::String *)(v24 + 32) = v25;
  v26 = benchmarkFormat(seconds:)(a6);
  *(_QWORD *)(v24 + 96) = &type metadata for String;
  *(_QWORD *)(v24 + 104) = v20;
  *(Swift::String *)(v24 + 72) = v26;
  v27 = String.init(format:_:)(0x203A6C61626F6C47, 0xED000040252F4025, v24);
  v29 = v28;
  v30 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v30 + 16) = xmmword_1003B0BD0;
  *(_QWORD *)(v30 + 56) = &type metadata for Int;
  *(_QWORD *)(v30 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v30 + 32) = a1;
  v51 = String.init(format:_:)(0x6F7463656A6F7250, 0xEE006425203A7372, v30);
  v53 = v31;
  v32 = *(void **)(v6 + OBJC_IVAR____TtC7Measure14DebugStatsView_renderFPSLabel);
  v54 = v15;
  v33._countAndFlagsBits = v15;
  v55 = v17;
  v33._object = v17;
  String.append(_:)(v33);
  v34 = String._bridgeToObjectiveC()();
  objc_msgSend(v32, "setText:", v34, swift_bridgeObjectRelease(0xE200000000000000).n128_f64[0]);

  v35 = *(void **)(v6 + OBJC_IVAR____TtC7Measure14DebugStatsView_renderTimeLabel);
  v36._countAndFlagsBits = v22;
  v36._object = v52;
  String.append(_:)(v36);
  v37 = String._bridgeToObjectiveC()();
  objc_msgSend(v35, "setText:", v37, swift_bridgeObjectRelease(0xE200000000000000).n128_f64[0]);

  v38 = *(void **)(v6 + OBJC_IVAR____TtC7Measure14DebugStatsView_renderGlobalTimeLabel);
  v39._countAndFlagsBits = v27;
  v39._object = v29;
  String.append(_:)(v39);
  v40 = String._bridgeToObjectiveC()();
  objc_msgSend(v38, "setText:", v40, swift_bridgeObjectRelease(0xE200000000000000).n128_f64[0]);

  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    v41 = *(void **)(v6 + OBJC_IVAR____TtC7Measure14DebugStatsView_projectorLabel);
    v42._countAndFlagsBits = v51;
    v42._object = v53;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(v53);
    v43 = String._bridgeToObjectiveC()();
    objc_msgSend(v41, "setText:", v43, swift_bridgeObjectRelease(0xE200000000000000).n128_f64[0]);

  }
  else
  {
    swift_bridgeObjectRelease(v53);
  }
  if (qword_10047AAA8 != -1)
    swift_once(&qword_10047AAA8, sub_1000E17E0);
  v44._countAndFlagsBits = v54;
  v44._object = v55;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v55);
  v45._countAndFlagsBits = 0x74694B656E656353;
  v45._object = (void *)0xEA0000000000203ALL;
  Log.default(_:isPrivate:)(v45, 0);
  swift_bridgeObjectRelease(0xEA0000000000203ALL);
  v46._countAndFlagsBits = v22;
  v46._object = v52;
  String.append(_:)(v46);
  swift_bridgeObjectRelease(v52);
  v47._countAndFlagsBits = 0x74694B656E656353;
  v47._object = (void *)0xEA0000000000203ALL;
  Log.default(_:isPrivate:)(v47, 0);
  swift_bridgeObjectRelease(0xEA0000000000203ALL);
  v48._countAndFlagsBits = v27;
  v48._object = v29;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v29);
  v49._countAndFlagsBits = 0x74694B656E656353;
  v49._object = (void *)0xEA0000000000203ALL;
  Log.default(_:isPrivate:)(v49, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(0xEA0000000000203ALL).n128_u64[0];
  return result;
}

double sub_10004DCFC(uint64_t a1, uint64_t a2, double a3, Swift::Double a4, Swift::Double a5, Swift::Double a6, Swift::Double a7, double a8, Swift::Double a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  Swift::String v23;
  unint64_t v24;
  Swift::String v25;
  void *v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  void *v39;
  void *v40;
  Swift::String v41;
  NSString v42;
  void *v43;
  NSString v44;
  void *v45;
  Swift::String v46;
  NSString v47;
  void *v48;
  Swift::String v49;
  NSString v50;
  void *v51;
  Swift::String v52;
  NSString v53;
  void *v54;
  Swift::String v55;
  NSString v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  double result;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  Swift::String v77;

  v10 = v9;
  v18 = sub_10000EDC8((uint64_t *)&unk_10048A100);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1003B0BD0;
  *(_QWORD *)(v19 + 56) = &type metadata for Double;
  *(_QWORD *)(v19 + 64) = &protocol witness table for Double;
  *(double *)(v19 + 32) = a3;
  v20 = String.init(format:_:)(0x322E25203A535046, 0xE900000000000066, v19);
  v67 = v21;
  v22 = swift_allocObject(v18, 112, 7);
  *(_OWORD *)(v22 + 16) = xmmword_1003B0F60;
  v23 = benchmarkFormat(seconds:)(a4);
  *(_QWORD *)(v22 + 56) = &type metadata for String;
  v24 = sub_100018B34();
  *(_QWORD *)(v22 + 64) = v24;
  *(Swift::String *)(v22 + 32) = v23;
  v25 = benchmarkFormat(seconds:)(a6);
  *(_QWORD *)(v22 + 96) = &type metadata for String;
  *(_QWORD *)(v22 + 104) = v24;
  *(Swift::String *)(v22 + 72) = v25;
  v77._countAndFlagsBits = String.init(format:_:)(0x3A78614D2F677641, 0xEE0040252F402520, v22);
  v77._object = v26;
  v27 = swift_allocObject(v18, 112, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1003B0F60;
  v28 = benchmarkFormat(seconds:)(a5);
  *(_QWORD *)(v27 + 56) = &type metadata for String;
  *(_QWORD *)(v27 + 64) = v24;
  *(Swift::String *)(v27 + 32) = v28;
  v29 = benchmarkFormat(seconds:)(a7);
  *(_QWORD *)(v27 + 96) = &type metadata for String;
  *(_QWORD *)(v27 + 104) = v24;
  *(Swift::String *)(v27 + 72) = v29;
  v75 = String.init(format:_:)(0x203A6C61626F6C47, 0xED000040252F4025, v27);
  v31 = v30;
  v32 = swift_allocObject(v18, 112, 7);
  *(_OWORD *)(v32 + 16) = xmmword_1003B0F60;
  *(_QWORD *)(v32 + 56) = &type metadata for Double;
  *(_QWORD *)(v32 + 64) = &protocol witness table for Double;
  *(double *)(v32 + 32) = a8;
  *(_QWORD *)(v32 + 96) = &type metadata for Int;
  *(_QWORD *)(v32 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v32 + 72) = a1;
  v74 = String.init(format:_:)(0xD000000000000019, 0x80000001003DA910, v32);
  v76 = v33;
  v34 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v34 + 16) = xmmword_1003B0BD0;
  *(_QWORD *)(v34 + 56) = &type metadata for Int;
  *(_QWORD *)(v34 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v34 + 32) = a2;
  v70 = String.init(format:_:)(0xD000000000000017, 0x80000001003DA930, v34);
  v68 = v35;
  v36 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v36 + 16) = xmmword_1003B0BD0;
  v37 = benchmarkFormat(seconds:)(a9);
  *(_QWORD *)(v36 + 56) = &type metadata for String;
  *(_QWORD *)(v36 + 64) = v24;
  *(Swift::String *)(v36 + 32) = v37;
  v38 = String.init(format:_:)(0x3A6567412078614DLL, 0xEB00000000402520, v36);
  v69 = v39;
  v40 = *(void **)(v10 + OBJC_IVAR____TtC7Measure14DebugStatsView_arFPSLabel);
  v72 = v20;
  v41._countAndFlagsBits = v20;
  v41._object = v67;
  String.append(_:)(v41);
  v42 = String._bridgeToObjectiveC()();
  objc_msgSend(v40, "setText:", v42, swift_bridgeObjectRelease(0xE200000000000000).n128_f64[0]);

  v43 = *(void **)(v10 + OBJC_IVAR____TtC7Measure14DebugStatsView_arTimeLabel);
  String.append(_:)(v77);
  v44 = String._bridgeToObjectiveC()();
  objc_msgSend(v43, "setText:", v44, swift_bridgeObjectRelease(0xE200000000000000).n128_f64[0]);

  v45 = *(void **)(v10 + OBJC_IVAR____TtC7Measure14DebugStatsView_arGlobalTimeLabel);
  v46._countAndFlagsBits = v75;
  v46._object = v31;
  String.append(_:)(v46);
  v47 = String._bridgeToObjectiveC()();
  objc_msgSend(v45, "setText:", v47, swift_bridgeObjectRelease(0xE200000000000000).n128_f64[0]);

  v48 = *(void **)(v10 + OBJC_IVAR____TtC7Measure14DebugStatsView_arFrameCountLabel);
  v49._countAndFlagsBits = v74;
  v49._object = v76;
  String.append(_:)(v49);
  v50 = String._bridgeToObjectiveC()();
  objc_msgSend(v48, "setText:", v50, swift_bridgeObjectRelease(0xE200000000000000).n128_f64[0]);

  v51 = *(void **)(v10 + OBJC_IVAR____TtC7Measure14DebugStatsView_arGlobalMaxFrameCountLabel);
  v52._countAndFlagsBits = v70;
  v52._object = v68;
  String.append(_:)(v52);
  swift_bridgeObjectRelease(v68);
  v53 = String._bridgeToObjectiveC()();
  objc_msgSend(v51, "setText:", v53, swift_bridgeObjectRelease(0xE200000000000000).n128_f64[0]);

  v54 = *(void **)(v10 + OBJC_IVAR____TtC7Measure14DebugStatsView_arAgeLabel);
  v55._countAndFlagsBits = v38;
  v55._object = v69;
  String.append(_:)(v55);
  v56 = String._bridgeToObjectiveC()();
  objc_msgSend(v54, "setText:", v56, swift_bridgeObjectRelease(0xE200000000000000).n128_f64[0]);

  if (qword_10047AAA8 != -1)
    swift_once(&qword_10047AAA8, sub_1000E17E0);
  v57._countAndFlagsBits = v72;
  v57._object = v67;
  String.append(_:)(v57);
  swift_bridgeObjectRelease(v67);
  v58._countAndFlagsBits = 0x656D617246205241;
  v58._object = (void *)0xEB00000000203A73;
  Log.default(_:isPrivate:)(v58, 0);
  swift_bridgeObjectRelease(0xEB00000000203A73);
  String.append(_:)(v77);
  swift_bridgeObjectRelease(v77._object);
  v59._countAndFlagsBits = 0x656D617246205241;
  v59._object = (void *)0xEB00000000203A73;
  Log.default(_:isPrivate:)(v59, 0);
  swift_bridgeObjectRelease(0xEB00000000203A73);
  v60._countAndFlagsBits = v75;
  v60._object = v31;
  String.append(_:)(v60);
  swift_bridgeObjectRelease(v31);
  v61._countAndFlagsBits = 0x656D617246205241;
  v61._object = (void *)0xEB00000000203A73;
  Log.default(_:isPrivate:)(v61, 0);
  swift_bridgeObjectRelease(0xEB00000000203A73);
  v62._countAndFlagsBits = v74;
  v62._object = v76;
  String.append(_:)(v62);
  swift_bridgeObjectRelease(v76);
  v63._countAndFlagsBits = 0x656D617246205241;
  v63._object = (void *)0xEB00000000203A73;
  Log.default(_:isPrivate:)(v63, 0);
  swift_bridgeObjectRelease(0xEB00000000203A73);
  v64._countAndFlagsBits = v38;
  v64._object = v69;
  String.append(_:)(v64);
  swift_bridgeObjectRelease(v69);
  v65._countAndFlagsBits = 0x656D617246205241;
  v65._object = (void *)0xEB00000000203A73;
  Log.default(_:isPrivate:)(v65, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(0xEB00000000203A73).n128_u64[0];
  return result;
}

void sub_10004E3A4()
{
  char *v0;
  char *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  uint64_t v8;
  char **v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  id v16;
  void *v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  id v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  double v38;
  double v39;
  double v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  id v46;
  void *v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;

  v1 = v0;
  v2 = objc_msgSend(v0, "subviews");
  v51 = sub_100018148(0, (unint64_t *)&qword_100481BC0, UIView_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v51);

  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v8 = v3;
    else
      v8 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v8);
    if (!v4)
      goto LABEL_13;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v3);
    if (!v4)
      goto LABEL_13;
  }
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_65;
  }
  for (i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0)
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
    else
      v6 = *(id *)(v3 + 8 * i + 32);
    v7 = v6;
    objc_msgSend(v6, "sizeToFit", v51);

  }
LABEL_13:
  v9 = &selRef_renderer_didAddNode_forAnchor_;
  v10 = objc_msgSend(v1, "subviews", swift_bridgeObjectRelease_n(v3, 2).n128_f64[0]);
  v11 = v51;
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v51);

  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0)
      v20 = v12;
    else
      v20 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v13 = _CocoaArrayWrapper.endIndex.getter(v20);
    if (!v13)
      goto LABEL_25;
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v12);
    if (!v13)
      goto LABEL_25;
  }
  if (v13 < 1)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v14 = 0;
  v15 = 0.0;
  do
  {
    if ((v12 & 0xC000000000000001) != 0)
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v12);
    else
      v16 = *(id *)(v12 + 8 * v14 + 32);
    v17 = v16;
    ++v14;
    objc_msgSend(v16, "frame", v51);
    v19 = v18;

    v15 = v15 + v19;
  }
  while (v13 != v14);
LABEL_25:
  *(_QWORD *)&v21 = swift_bridgeObjectRelease_n(v12, 2).n128_u64[0];
  v22 = OBJC_IVAR____TtC7Measure14DebugStatsView_maxWidth;
  v23 = *(double *)&v1[OBJC_IVAR____TtC7Measure14DebugStatsView_maxWidth];
  v24 = objc_msgSend(v1, "subviews", v21);
  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v11);

  if (!((unint64_t)v25 >> 62))
  {
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v26)
      goto LABEL_27;
LABEL_40:
    swift_bridgeObjectRelease(v25);
    goto LABEL_41;
  }
  if (v25 < 0)
    v34 = v25;
  else
    v34 = v25 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v25);
  v26 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_bridgeObjectRelease(v25);
  if (!v26)
    goto LABEL_40;
LABEL_27:
  sub_1000A5660(0, v26 & ~(v26 >> 63), 0);
  if (v26 < 0)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  for (j = 0; j != v26; ++j)
  {
    if ((v25 & 0xC000000000000001) != 0)
      v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v25);
    else
      v28 = *(id *)(v25 + 8 * j + 32);
    v29 = v28;
    objc_msgSend(v28, "frame", v51);
    v31 = v30;

    v33 = _swiftEmptyArrayStorage[2];
    v32 = _swiftEmptyArrayStorage[3];
    if (*(_QWORD *)&v33 >= *(_QWORD *)&v32 >> 1)
      sub_1000A5660((char *)(*(_QWORD *)&v32 > 1uLL), *(_QWORD *)&v33 + 1, 1);
    *(_QWORD *)&_swiftEmptyArrayStorage[2] = *(_QWORD *)&v33 + 1;
    _swiftEmptyArrayStorage[*(_QWORD *)&v33 + 4] = v31;
  }
  swift_bridgeObjectRelease(v25);
  v9 = &selRef_renderer_didAddNode_forAnchor_;
  v11 = v51;
LABEL_41:
  *(double *)&v35 = COERCE_DOUBLE(sub_10004BE74((uint64_t)_swiftEmptyArrayStorage));
  v37 = v36;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  v38 = *(double *)&v35;
  if ((v37 & 1) != 0)
    v38 = 0.0;
  if ((*(_QWORD *)&v38 & 0xFFFFFFFFFFFFFLL) != 0)
    v39 = v23;
  else
    v39 = v38;
  if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) != 0)
    v39 = v38;
  if (v38 >= v23)
    v40 = v39;
  else
    v40 = v23;
  *(double *)&v1[v22] = v40;
  objc_msgSend(v1, "setFrame:", 0.0, 75.0, v51);
  v41 = objc_msgSend(v1, v9[203]);
  v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v11);

  if (!((unint64_t)v42 >> 62))
  {
    v43 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v43)
      goto LABEL_53;
LABEL_63:
    swift_bridgeObjectRelease(v42);
    return;
  }
  if (v42 < 0)
    v50 = v42;
  else
    v50 = v42 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v42);
  v43 = _CocoaArrayWrapper.endIndex.getter(v50);
  swift_bridgeObjectRelease(v42);
  if (!v43)
    goto LABEL_63;
LABEL_53:
  if (v43 >= 1)
  {
    v44 = 0;
    v45 = 0.0;
    do
    {
      if ((v42 & 0xC000000000000001) != 0)
        v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v42);
      else
        v46 = *(id *)(v42 + 8 * v44 + 32);
      v47 = v46;
      ++v44;
      objc_msgSend(v46, "frame");
      objc_msgSend(v47, "setFrame:");
      objc_msgSend(v47, "frame");
      v49 = v48;

      v45 = v45 + v49;
    }
    while (v43 != v44);
    goto LABEL_63;
  }
LABEL_67:
  __break(1u);
}

UIColor sub_10004E878()
{
  UIColor result;

  sub_100018148(0, &qword_10047D0A0, UIColor_ptr);
  result.super.isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, 0.0, 0.0, 0.5).super.isa;
  qword_10047DDE0 = (uint64_t)result.super.isa;
  return result;
}

UIColor sub_10004E8C8()
{
  UIColor result;

  sub_100018148(0, &qword_10047D0A0, UIColor_ptr);
  result.super.isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(1.0, 1.0, 1.0, 1.0).super.isa;
  qword_10047DDE8 = (uint64_t)result.super.isa;
  return result;
}

void sub_10004E918()
{
  qword_10047DDF0 = 0x4028000000000000;
}

char *sub_10004E928(double a1, double a2, double a3, double a4)
{
  char *v4;
  id v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  char *v36;
  id v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  NSString v52;
  id v53;
  id v54;
  NSString v55;
  id v56;
  id v57;
  NSString v58;
  id v59;
  id v60;
  NSString v61;
  uint64_t ObjectType;
  objc_class *v64;
  _QWORD v65[2];
  __int128 v66;
  __int128 v67;
  objc_super v68;

  ObjectType = swift_getObjectType(v4);
  *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure14DebugStatsView_maxWidth] = 0;
  v9 = objc_allocWithZone((Class)UILabel);
  v10 = v4;
  v11 = objc_msgSend(v9, "initWithFrame:", a1, a2, a3, a4);
  if (qword_10047A8B8 != -1)
    swift_once(&qword_10047A8B8, sub_10004E8C8);
  objc_msgSend(v11, "setTextColor:", qword_10047DDE8, ObjectType);
  objc_msgSend(v11, "setTextAlignment:", 0);
  v12 = (void *)objc_opt_self(UIFont);
  if (qword_10047A8C0 != -1)
    swift_once(&qword_10047A8C0, sub_10004E918);
  v13 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v11, "setFont:", v13);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure14DebugStatsView_tickFPSLabel] = v11;
  v14 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v14, "setTextColor:", qword_10047DDE8);
  objc_msgSend(v14, "setTextAlignment:", 0);
  v15 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v14, "setFont:", v15);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure14DebugStatsView_renderFPSLabel] = v14;
  v16 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v16, "setTextColor:", qword_10047DDE8);
  objc_msgSend(v16, "setTextAlignment:", 0);
  v17 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v16, "setFont:", v17);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure14DebugStatsView_renderTimeLabel] = v16;
  v18 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v18, "setTextColor:", qword_10047DDE8);
  objc_msgSend(v18, "setTextAlignment:", 0);
  v19 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v18, "setFont:", v19);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure14DebugStatsView_renderGlobalTimeLabel] = v18;
  v20 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v20, "setTextColor:", qword_10047DDE8);
  objc_msgSend(v20, "setTextAlignment:", 0);
  v21 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v20, "setFont:", v21);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure14DebugStatsView_projectorLabel] = v20;
  v22 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v22, "setTextColor:", qword_10047DDE8);
  objc_msgSend(v22, "setTextAlignment:", 0);
  v23 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v22, "setFont:", v23);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure14DebugStatsView_arFPSLabel] = v22;
  v24 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v24, "setTextColor:", qword_10047DDE8);
  objc_msgSend(v24, "setTextAlignment:", 0);
  v25 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v24, "setFont:", v25);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure14DebugStatsView_arTimeLabel] = v24;
  v26 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v26, "setTextColor:", qword_10047DDE8);
  objc_msgSend(v26, "setTextAlignment:", 0);
  v27 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v26, "setFont:", v27);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure14DebugStatsView_arGlobalTimeLabel] = v26;
  v28 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v28, "setTextColor:", qword_10047DDE8);
  objc_msgSend(v28, "setTextAlignment:", 0);
  v29 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v28, "setFont:", v29);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure14DebugStatsView_arFrameCountLabel] = v28;
  v30 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v30, "setTextColor:", qword_10047DDE8);
  objc_msgSend(v30, "setTextAlignment:", 0);
  v31 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v30, "setFont:", v31);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure14DebugStatsView_arGlobalMaxFrameCountLabel] = v30;
  v32 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v32, "setTextColor:", qword_10047DDE8);
  objc_msgSend(v32, "setTextAlignment:", 0);
  v33 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v32, "setFont:", v33);

  *(_QWORD *)&v10[OBJC_IVAR____TtC7Measure14DebugStatsView_arAgeLabel] = v32;
  v68.receiver = v10;
  v68.super_class = v64;
  v34 = objc_msgSendSuper2(&v68, "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v34, "setUserInteractionEnabled:", 0);
  v35 = qword_10047A8B0;
  v36 = (char *)v34;
  if (v35 != -1)
    swift_once(&qword_10047A8B0, sub_10004E878);
  objc_msgSend(v36, "setBackgroundColor:", qword_10047DDE0);

  objc_msgSend(v36, "setContentMode:", 9);
  v37 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v38 = objc_msgSend(v37, "infoDictionary");

  if (!v38)
  {
    v66 = 0u;
    v67 = 0u;
LABEL_16:
    sub_100018180((uint64_t)&v66);
    goto LABEL_17;
  }
  v39 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v38, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (*(_QWORD *)(v39 + 16) && (v40 = sub_1000C80A8(0xD00000000000001ALL, 0x80000001003DA9D0), (v41 & 1) != 0))
  {
    sub_10004F88C(*(_QWORD *)(v39 + 56) + 32 * v40, (uint64_t)&v66);
  }
  else
  {
    v66 = 0u;
    v67 = 0u;
  }
  swift_bridgeObjectRelease(v39);
  if (!*((_QWORD *)&v67 + 1))
    goto LABEL_16;
  if (swift_dynamicCast(v65, &v66, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
    v42 = v65[0];
    v43 = v65[1];
    goto LABEL_18;
  }
LABEL_17:
  v42 = 0;
  v43 = 0;
LABEL_18:
  v44 = sub_10000EDC8((uint64_t *)&unk_10048A100);
  v45 = swift_allocObject(v44, 72, 7);
  *(_OWORD *)(v45 + 16) = xmmword_1003B0BD0;
  *(_QWORD *)(v45 + 56) = &type metadata for String;
  *(_QWORD *)(v45 + 64) = sub_100018B34();
  v46 = 0x6E776F6E6B6E55;
  if (v43)
    v46 = v42;
  v47 = 0xE700000000000000;
  if (v43)
    v47 = v43;
  *(_QWORD *)(v45 + 32) = v46;
  *(_QWORD *)(v45 + 40) = v47;
  String.init(format:_:)(0xD000000000000013, 0x80000001003DA990, v45);
  v49 = v48;
  v50 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v50, "setTextColor:", qword_10047DDE8);
  objc_msgSend(v50, "setTextAlignment:", 0);
  v51 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v50, "setFont:", v51);

  v52 = String._bridgeToObjectiveC()();
  objc_msgSend(v50, "setText:", v52);
  swift_bridgeObjectRelease(v49);

  objc_msgSend(v36, "addSubview:", v50);
  v53 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v53, "setTextColor:", qword_10047DDE8);
  objc_msgSend(v53, "setTextAlignment:", 0);
  v54 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v53, "setFont:", v54);

  v55 = String._bridgeToObjectiveC()();
  objc_msgSend(v53, "setText:", v55);

  objc_msgSend(v36, "addSubview:", v53);
  objc_msgSend(v36, "addSubview:", *(_QWORD *)&v36[OBJC_IVAR____TtC7Measure14DebugStatsView_tickFPSLabel]);
  v56 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v56, "setTextColor:", qword_10047DDE8);
  objc_msgSend(v56, "setTextAlignment:", 0);
  v57 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v56, "setFont:", v57);

  v58 = String._bridgeToObjectiveC()();
  objc_msgSend(v56, "setText:", v58);

  objc_msgSend(v36, "addSubview:", v56);
  objc_msgSend(v36, "addSubview:", *(_QWORD *)&v36[OBJC_IVAR____TtC7Measure14DebugStatsView_renderFPSLabel]);
  objc_msgSend(v36, "addSubview:", *(_QWORD *)&v36[OBJC_IVAR____TtC7Measure14DebugStatsView_renderTimeLabel]);
  objc_msgSend(v36, "addSubview:", *(_QWORD *)&v36[OBJC_IVAR____TtC7Measure14DebugStatsView_renderGlobalTimeLabel]);
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
    objc_msgSend(v36, "addSubview:", *(_QWORD *)&v36[OBJC_IVAR____TtC7Measure14DebugStatsView_projectorLabel]);
  v59 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v59, "setTextColor:", qword_10047DDE8);
  objc_msgSend(v59, "setTextAlignment:", 0);
  v60 = objc_msgSend(v12, "systemFontOfSize:", *(double *)&qword_10047DDF0);
  objc_msgSend(v59, "setFont:", v60);

  v61 = String._bridgeToObjectiveC()();
  objc_msgSend(v59, "setText:", v61);

  objc_msgSend(v36, "addSubview:", v59);
  objc_msgSend(v36, "addSubview:", *(_QWORD *)&v36[OBJC_IVAR____TtC7Measure14DebugStatsView_arFPSLabel]);
  objc_msgSend(v36, "addSubview:", *(_QWORD *)&v36[OBJC_IVAR____TtC7Measure14DebugStatsView_arTimeLabel]);
  objc_msgSend(v36, "addSubview:", *(_QWORD *)&v36[OBJC_IVAR____TtC7Measure14DebugStatsView_arGlobalTimeLabel]);
  objc_msgSend(v36, "addSubview:", *(_QWORD *)&v36[OBJC_IVAR____TtC7Measure14DebugStatsView_arFrameCountLabel]);
  objc_msgSend(v36, "addSubview:", *(_QWORD *)&v36[OBJC_IVAR____TtC7Measure14DebugStatsView_arGlobalMaxFrameCountLabel]);
  objc_msgSend(v36, "addSubview:", *(_QWORD *)&v36[OBJC_IVAR____TtC7Measure14DebugStatsView_arAgeLabel]);

  return v36;
}

uint64_t type metadata accessor for DebugStatsView()
{
  return objc_opt_self(_TtC7Measure14DebugStatsView);
}

uint64_t sub_10004F88C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_10004F8C8()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  char v4;
  uint64_t v5;
  char v6;
  id v7;
  id v8;
  id v9;

  v1 = v0;
  if (qword_10047B128 != -1)
    swift_once(&qword_10047B128, sub_100197BAC);
  v2 = (void *)qword_1004AFCC8;
  v3 = qword_1004AFCD0;
  if ((byte_1004AFCD8 & 1) != 0)
  {
    v4 = byte_1004AFCE8;
    v5 = qword_1004AFCE0;
    v6 = byte_10048A2A0;
    v7 = (id)qword_1004AFCC8;
    v9 = sub_100070DBC(v6, v5, v4);
    sub_100021580(v2, v3, 1);
  }
  else
  {
    if ((byte_10048A2A0 & 1) != 0)
      v8 = qword_1004AFCD0;
    else
      v8 = (id)qword_1004AFCC8;
    v9 = v8;
  }
  objc_msgSend(v1, "setBackgroundColor:", v9);

}

void sub_10004FAD0(char a1)
{
  char *v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  char *v8;
  id v9;
  _QWORD v10[6];

  v2 = (double)(a1 & 1);
  objc_msgSend(v1, "alpha");
  if (v3 != v2)
  {
    v4 = OBJC_IVAR____TtC7Measure13SeparatorView_targetAlpha;
    if (*(double *)&v1[OBJC_IVAR____TtC7Measure13SeparatorView_targetAlpha] != v2)
    {
      v5 = swift_allocObject(&unk_100440FD0, 32, 7);
      *(_QWORD *)(v5 + 16) = v1;
      *(double *)(v5 + 24) = v2;
      v6 = objc_allocWithZone((Class)UIViewPropertyAnimator);
      v10[4] = sub_10004FC64;
      v10[5] = v5;
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 1107296256;
      v10[2] = sub_10003ECA0;
      v10[3] = &unk_100440FE8;
      v7 = _Block_copy(v10);
      v8 = v1;
      swift_release();
      v9 = objc_msgSend(v6, "initWithDuration:controlPoint1:controlPoint2:animations:", v7, 0.065, 0.25, 0.1, 0.25, 1.0);
      _Block_release(v7);
      *(double *)&v1[v4] = v2;
      objc_msgSend(v9, "startAnimation");

    }
  }
}

id sub_10004FC14(void *a1)
{
  return objc_msgSend(a1, "setAlpha:");
}

uint64_t type metadata accessor for SeparatorView()
{
  return objc_opt_self(_TtC7Measure13SeparatorView);
}

uint64_t sub_10004FC40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_10004FC64()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setAlpha:", *(double *)(v0 + 24));
}

uint64_t sub_10004FC78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004FC88(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10004FC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v6;
  NSString v7;
  NSString v8;
  id v9;
  id v10;

  if (a2)
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a2);
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    swift_bridgeObjectRetain(a4);
    v6 = 0;
  }
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v10 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v6, v7, 1);

  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v8, 0, 0);

  objc_msgSend(v10, "addAction:", v9);
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  if ((_QWORD)xmmword_1004AF258)
  {
    objc_msgSend((id)xmmword_1004AF258, "presentViewController:animated:completion:", v10, 1, 0);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10004FE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  __n128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  _QWORD *v26;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100049274();
  v14 = (void *)static OS_dispatch_queue.main.getter();
  v15 = (_QWORD *)swift_allocObject(&unk_100441020, 48, 7);
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a1;
  v15[5] = a2;
  aBlock[4] = sub_10005001C;
  v26 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100441038;
  v16 = _Block_copy(aBlock);
  v17 = v26;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a2);
  v18 = swift_release(v17);
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  v19 = sub_100030E1C();
  v20 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v21 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v8, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v23);
}

uint64_t sub_10004FFF0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10005001C()
{
  uint64_t *v0;

  sub_10004FC90(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100050028(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100050038(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100050040(char **a1, float a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v4 = sub_1000A7944((uint64_t)v4);
  v5 = *((_QWORD *)v4 + 2);
  v6[0] = (uint64_t)(v4 + 32);
  v6[1] = v5;
  sub_100061648(v6, a2);
  *a1 = v4;
}

uint64_t sub_1000500B8(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_100050130()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for UUID(0);
  sub_1000477C8(v0, qword_1004AF1F8);
  v1 = sub_1000362E8(v0, (uint64_t)qword_1004AF1F8);
  return UUID.init()(v1);
}

void sub_100050178()
{
  dword_1004AF210 = 1059360187;
}

void sub_10005018C()
{
  dword_1004AF214 = 1060439283;
}

id sub_1000501A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  v1 = qword_10047DFB8;
  v2 = *(void **)(v0 + qword_10047DFB8);
  if (v2)
  {
    v3 = *(id *)(v0 + qword_10047DFB8);
  }
  else
  {
    v4 = v0;
    v5 = *(void **)(v0 + qword_10047DFC0);
    v6 = objc_allocWithZone((Class)type metadata accessor for PersonHeightView(0));
    v7 = sub_1001B88A8(v5);
    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v4 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

void sub_100050220(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _QWORD v16[6];

  v3 = (uint64_t *)(v1 + qword_10047DFF0);
  if ((*(_BYTE *)(v1 + qword_10047DFF0 + 48) & 1) == 0)
  {
    v14 = v3[4];
    v13 = v3[5];
    v12 = v3[2];
    v11 = v3[3];
    v10 = *v3;
    v9 = v3[1];
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(v1 + qword_10047DFE8);
  if (v4)
  {
    swift_beginAccess(v4 + 208, v15, 0, 0);
    v5 = *(_QWORD *)(v4 + 208);
    if (v5)
    {
      v6 = swift_retain(v5);
      v7 = ADProcessor.transformer.getter(v6);
      v8 = swift_release(v5);
      ADTransformer.viewToAD.getter(v16, v8);
      v10 = v16[0];
      v9 = v16[1];
      v12 = v16[2];
      v11 = v16[3];
      v14 = v16[4];
      v13 = v16[5];
      swift_release(v7);
      *v3 = v10;
      v3[1] = v9;
      v3[2] = v12;
      v3[3] = v11;
      v3[4] = v14;
      v3[5] = v13;
      *((_BYTE *)v3 + 48) = 0;
LABEL_6:
      *a1 = v10;
      a1[1] = v9;
      a1[2] = v12;
      a1[3] = v11;
      a1[4] = v14;
      a1[5] = v13;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100050310(CGFloat *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CGFloat tx;
  CGFloat ty;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat v29;
  CGFloat v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  CGAffineTransform v35;
  CGAffineTransform t2;
  _BYTE __src[512];
  _BYTE __dst[512];

  v3 = v1 + qword_10047E000;
  if ((*(_BYTE *)(v1 + qword_10047E000 + 48) & 1) == 0)
  {
    v30 = *(double *)(v3 + 32);
    v29 = *(double *)(v3 + 40);
    c = *(double *)(v3 + 16);
    d = *(double *)(v3 + 24);
    a = *(double *)v3;
    b = *(double *)(v3 + 8);
    goto LABEL_8;
  }
  swift_retain();
  StateValue.wrappedValue.getter(__src, v4);
  swift_release();
  memcpy(__dst, __src, sizeof(__dst));
  v5 = (void *)sub_10008F8B8();
  sub_100012C00((uint64_t)__dst);
  if (v5)
  {
    v6 = objc_msgSend(v5, "camera");

    objc_msgSend(v6, "imageResolution");
    v8 = v7;
    v10 = v9;

    if (qword_10047B190 != -1)
      v11 = swift_once(&qword_10047B190, sub_1001C81CC);
    v12 = qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
    if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) == 0)
    {
      v14 = *(double *)(v12 + 64);
      v13 = *(double *)(v12 + 72);
      v15 = *(_QWORD *)effectiveStatusBarOrientation.unsafeMutableAddressor(v11);
      CGAffineTransformMakeScale((CGAffineTransform *)__src, 1.0, -1.0);
      v31 = *(_OWORD *)&__src[16];
      v33 = *(_OWORD *)__src;
      v16 = *(_OWORD *)&__src[32];
      CGAffineTransformMakeTranslation((CGAffineTransform *)__src, 0.0, 1.0);
      v17 = *(_OWORD *)__src;
      v18 = *(_OWORD *)&__src[16];
      v19 = *(_OWORD *)&__src[32];
      *(_OWORD *)__src = v33;
      *(_OWORD *)&__src[16] = v31;
      *(_OWORD *)&__src[32] = v16;
      *(_OWORD *)&t2.a = v17;
      *(_OWORD *)&t2.c = v18;
      *(_OWORD *)&t2.tx = v19;
      CGAffineTransformConcat(&v35, (CGAffineTransform *)__src, &t2);
      v32 = *(_OWORD *)&v35.c;
      v34 = *(_OWORD *)&v35.a;
      tx = v35.tx;
      ty = v35.ty;
      ARCameraImageToViewTransform(__src, v15, 0, v8, v10, v14, v13);
      v22 = *(_OWORD *)__src;
      v23 = *(_OWORD *)&__src[16];
      v24 = *(_OWORD *)&__src[32];
      *(_OWORD *)__src = v34;
      *(_OWORD *)&__src[16] = v32;
      *(CGFloat *)&__src[32] = tx;
      *(CGFloat *)&__src[40] = ty;
      *(_OWORD *)&t2.a = v22;
      *(_OWORD *)&t2.c = v23;
      *(_OWORD *)&t2.tx = v24;
      CGAffineTransformConcat(&v35, (CGAffineTransform *)__src, &t2);
      a = v35.a;
      b = v35.b;
      c = v35.c;
      d = v35.d;
      v30 = v35.tx;
      v29 = v35.ty;
      *(CGFloat *)v3 = v35.a;
      *(CGFloat *)(v3 + 8) = b;
      *(CGFloat *)(v3 + 16) = c;
      *(CGFloat *)(v3 + 24) = d;
      *(CGFloat *)(v3 + 32) = v30;
      *(CGFloat *)(v3 + 40) = v29;
      *(_BYTE *)(v3 + 48) = 0;
LABEL_8:
      *a1 = a;
      a1[1] = b;
      a1[2] = c;
      a1[3] = d;
      a1[4] = v30;
      a1[5] = v29;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10005054C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(unint64_t *__return_ptr, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjCClassFromMetadata;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;

  v1 = *(_QWORD *)(v0 + qword_10047DEE8);
  v2 = *(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1 + 144);
  v3 = swift_retain(v1);
  v2(&v14, v3);
  swift_release(v1);
  v4 = v14;
  if (!(v14 >> 62))
  {
    v5 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v14);
    if (v5)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease_n(v4, 2);
    return 0;
  }
LABEL_16:
  if (v4 < 0)
    v13 = v4;
  else
    v13 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v5 = _CocoaArrayWrapper.endIndex.getter(v13);
  if (!v5)
    goto LABEL_10;
LABEL_3:
  v6 = type metadata accessor for WorldPerson(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v8 = 4;
  while (1)
  {
    if ((v4 & 0xC000000000000001) != 0)
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v4);
    else
      v9 = *(id *)(v4 + 8 * v8);
    v10 = v9;
    v11 = v8 - 3;
    if (__OFADD__(v8 - 4, 1))
    {
      __break(1u);
      goto LABEL_16;
    }
    if (objc_msgSend(v9, "isKindOfClass:", ObjCClassFromMetadata))
      break;

    ++v8;
    if (v11 == v5)
      goto LABEL_10;
  }
  swift_bridgeObjectRelease_n(v4, 2);
  result = swift_dynamicCastClass(v10, v6);
  if (result)
    return result;

  return 0;
}

void sub_1000506A8(uint64_t a1, void *a2)
{
  uint64_t v2;
  char **v5;
  char *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::String v12;

  v5 = (char **)(v2 + qword_10047E028);
  v6 = *v5;
  swift_bridgeObjectRetain(a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
  *v5 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = sub_10005F9C4(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
    *v5 = v6;
  }
  v9 = *((_QWORD *)v6 + 2);
  v8 = *((_QWORD *)v6 + 3);
  if (v9 >= v8 >> 1)
  {
    v6 = sub_10005F9C4((char *)(v8 > 1), v9 + 1, 1, v6);
    *v5 = v6;
  }
  *((_QWORD *)v6 + 2) = v9 + 1;
  v10 = &v6[16 * v9];
  *((_QWORD *)v10 + 4) = a1;
  *((_QWORD *)v10 + 5) = a2;
  v11 = *((_QWORD *)*v5 + 2);
  if (v11 >= 6)
    sub_100063E78(0, v11 - 5);
  if (qword_10047AA20 != -1)
    swift_once(&qword_10047AA20, sub_1000E1068);
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  Log.debug(_:isPrivate:)(v12, 0);
}

uint64_t sub_1000507C4(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, __n128);
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, __n128);
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, __n128);
  __n128 v59;
  uint64_t result;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t, uint64_t);
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  objc_class *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  objc_class *v124;
  __int128 v125;
  _BYTE v126[24];
  objc_super v127;
  char v128[24];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  char v133;

  v2 = v1;
  v117 = a1;
  ObjectType = swift_getObjectType(v1);
  v122 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v118 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v123 = (char *)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v120);
  v121 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v119 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v116 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v115 = (char *)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v114 = (char *)&v113 - v11;
  v12 = qword_10047DEB0;
  KeyPath = swift_getKeyPath(&unk_1003B2CB0);
  v14 = sub_10000EDC8((uint64_t *)&unk_10047E5C0);
  v15 = qword_10047AD88;
  v16 = v2;
  if (v15 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v17 = qword_1004AF890;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v14 + 272);
  v19 = swift_retain(qword_1004AF890);
  *(_QWORD *)&v2[v12] = v18(KeyPath, v17, v19);
  v20 = qword_10047DEB8;
  v21 = sub_10000EDC8(&qword_10047ECF0);
  v22 = swift_getKeyPath(&unk_1003B2CD8);
  v23 = qword_1004AF890;
  v24 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v21 + 272);
  v25 = swift_retain(qword_1004AF890);
  *(_QWORD *)&v16[v20] = v24(v22, v23, v25);
  v26 = qword_10047DEC0;
  v27 = swift_getKeyPath(&unk_1003B2D00);
  v28 = sub_10000EDC8((uint64_t *)&unk_10047E5D0);
  v29 = qword_1004AF890;
  v30 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v28 + 272);
  v31 = swift_retain(qword_1004AF890);
  *(_QWORD *)&v16[v26] = v30(v27, v29, v31);
  v32 = qword_10047DEC8;
  v33 = swift_getKeyPath(&unk_1003B2D28);
  v34 = sub_10000EDC8((uint64_t *)&unk_10047EFD0);
  v35 = qword_1004AF890;
  v36 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v34 + 272);
  v37 = swift_retain(qword_1004AF890);
  *(_QWORD *)&v16[v32] = v36(v33, v35, v37);
  v38 = qword_10047DED0;
  v39 = sub_10000EDC8(&qword_10047E5E0);
  v40 = swift_getKeyPath(&unk_1003B2D50);
  v41 = qword_1004AF890;
  v42 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v39 + 272);
  v43 = swift_retain(qword_1004AF890);
  *(_QWORD *)&v16[v38] = v42(v40, v41, v43);
  v44 = qword_10047DED8;
  sub_10000EDC8(&qword_10047E5E8);
  v45 = swift_getKeyPath(&unk_1003B2D78);
  *(_QWORD *)&v16[v44] = MutableStateValue.__allocating_init(_:_:)(v45, ObjectType);
  v46 = qword_10047DEE0;
  sub_10000EDC8(&qword_10047E5F0);
  v47 = swift_getKeyPath(&unk_1003B2DA0);
  *(_QWORD *)&v16[v46] = MutableStateValue.__allocating_init(_:_:)(v47, ObjectType);
  v48 = qword_10047DEE8;
  sub_10000EDC8(&qword_10047E5F8);
  v49 = swift_getKeyPath(&unk_1003B2DC8);
  *(_QWORD *)&v16[v48] = MutableStateValue.__allocating_init(_:_:)(v49, ObjectType);
  v50 = qword_10047DEF0;
  sub_10000EDC8(&qword_10047E600);
  v51 = swift_getKeyPath(&unk_1003B2DF0);
  *(_QWORD *)&v16[v50] = MutableStateValue.__allocating_init(_:_:)(v51, ObjectType);
  v52 = qword_10047DF00;
  sub_10000EDC8(&qword_10047E608);
  v53 = swift_getKeyPath(&unk_1003B2E18);
  *(_QWORD *)&v16[v52] = MutableStateValue.__allocating_init(_:_:)(v53, ObjectType);
  v54 = qword_10047DF08;
  v55 = swift_getKeyPath(&unk_1003B2E40);
  v56 = sub_10000EDC8(&qword_10047E610);
  v57 = qword_1004AF890;
  v58 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v56 + 272);
  v59 = swift_retain(qword_1004AF890);
  result = v58(v55, v57, v59);
  *(_QWORD *)&v16[v54] = result;
  if (qword_10047B190 != -1)
    result = swift_once(&qword_10047B190, sub_1001C81CC);
  v124 = (objc_class *)ObjectType;
  if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_OWORD *)&v16[qword_10047DF10] = *(_OWORD *)(qword_1004AFD08
                                                 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits
                                                 + 64);
    v16[qword_10047DF18] = 0;
    v61 = &v16[qword_10047DF20];
    v62 = sub_10000EDC8(&qword_10047E080);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v61, 1, 1, v62);
    v16[qword_1004AF218] = 3;
    v63 = qword_10047DF28;
    v64 = sub_10000EDC8(&qword_10047E470);
    swift_allocObject(v64, *(unsigned int *)(v64 + 48), *(unsigned __int16 *)(v64 + 52));
    v65 = PassthroughSubject.init()();
    *(_QWORD *)&v16[v63] = v65;
    Date.init()(v65);
    *(_QWORD *)&v16[qword_10047DF40] = 0x4000000000000000;
    v66 = v116;
    v67 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v116 + 56);
    v67(&v16[qword_10047DF48], 1, 1, v8);
    v67(&v16[qword_10047DF50], 1, 1, v8);
    v68 = &v16[qword_10047DF58];
    *(_QWORD *)v68 = 0;
    *((_QWORD *)v68 + 1) = 0;
    v68[16] = 1;
    v69 = qword_10047DF60;
    v70 = type metadata accessor for PersonHeightInstrument.HeightResultContainer();
    v71 = swift_allocObject(v70, 24, 7);
    v72 = sub_10005F338(0, 8, 0, (char *)_swiftEmptyArrayStorage);
    v125 = xmmword_1003B2A60;
    v129 = xmmword_1003B2A60;
    *(_QWORD *)&v130 = v72;
    v73 = sub_10000EDC8(&qword_10047E618);
    swift_allocObject(v73, 48, 7);
    *(_QWORD *)(v71 + 16) = Synchronized.init(wrappedValue:)(&v129);
    *(_QWORD *)&v16[v69] = v71;
    v74 = qword_10047DF68;
    v75 = sub_10005F240(0, 8, 0, (char *)_swiftEmptyArrayStorage);
    v129 = v125;
    *(_QWORD *)&v130 = v75;
    v76 = sub_10000EDC8(&qword_10047E620);
    swift_allocObject(v76, 48, 7);
    v77 = Synchronized.init(wrappedValue:)(&v129);
    *(_QWORD *)&v16[v74] = v77;
    v78 = Date.init()(v77);
    v79 = qword_10047DF78;
    v80 = v114;
    Date.init()(v78);
    v81 = v115;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v115, v80, v8);
    v82 = sub_10000EDC8(&qword_10047E628);
    swift_allocObject(v82, *(unsigned int *)(v82 + 48), *(unsigned __int16 *)(v82 + 52));
    v83 = Synchronized.init(wrappedValue:)(v81);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v80, v8);
    *(_QWORD *)&v16[v79] = v83;
    v67(&v16[qword_10047DF80], 1, 1, v8);
    v84 = qword_10047DF88;
    v85 = sub_10005F240(0, 8, 0, (char *)_swiftEmptyArrayStorage);
    v129 = v125;
    *(_QWORD *)&v130 = v85;
    swift_allocObject(v76, 48, 7);
    *(_QWORD *)&v16[v84] = Synchronized.init(wrappedValue:)(&v129);
    v67(&v16[qword_10047DF98], 1, 1, v8);
    v67(&v16[qword_10047DFA0], 1, 1, v8);
    v67(&v16[qword_10047DFA8], 1, 1, v8);
    v86 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v67)(&v16[qword_10047DFB0], 1, 1, v8);
    *(_QWORD *)&v16[qword_10047DFB8] = 0;
    *(_QWORD *)&v16[qword_10047DFC8] = 0;
    *(_QWORD *)&v16[qword_10047DFD0] = 0;
    *(_QWORD *)&v16[qword_10047DFD8] = 0;
    Date.init()(v86);
    v87 = &v16[qword_10047DFF0];
    *((_OWORD *)v87 + 1) = 0u;
    *((_OWORD *)v87 + 2) = 0u;
    *(_OWORD *)v87 = 0u;
    v87[48] = 1;
    v88 = &v16[qword_10047DFF8];
    *((_OWORD *)v88 + 1) = 0u;
    *((_OWORD *)v88 + 2) = 0u;
    *(_OWORD *)v88 = 0u;
    v88[48] = 1;
    v89 = &v16[qword_10047E000];
    *(_OWORD *)v89 = 0u;
    *((_OWORD *)v89 + 1) = 0u;
    *((_OWORD *)v89 + 2) = 0u;
    v89[48] = 1;
    *(_QWORD *)&v16[qword_10047E008] = 0;
    v16[qword_10047E010] = 0;
    v90 = qword_10047E018;
    *(_QWORD *)&v129 = 0;
    v91 = sub_10000EDC8(&qword_10047E630);
    swift_allocObject(v91, 32, 7);
    *(_QWORD *)&v16[v90] = Synchronized.init(wrappedValue:)(&v129);
    v92 = qword_10047E020;
    LOBYTE(v129) = 0;
    v93 = sub_10000EDC8(&qword_10047E638);
    swift_allocObject(v93, 32, 7);
    *(_QWORD *)&v16[v92] = Synchronized.init(wrappedValue:)(&v129);
    *(_QWORD *)&v16[qword_10047E028] = _swiftEmptyArrayStorage;
    v16[qword_10047E030] = 0;
    v94 = qword_10047E038;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v133 = 1;
    v95 = sub_10000EDC8(&qword_10047E640);
    swift_allocObject(v95, 96, 7);
    *(_QWORD *)&v16[v94] = Synchronized.init(wrappedValue:)(&v129);
    v96 = (void *)v117;
    *(_QWORD *)&v16[qword_10047DFC0] = v117;
    v97 = type metadata accessor for PersonHeightCoachingController(0);
    swift_allocObject(v97, 129, 7);
    *(_QWORD *)&v125 = v96;
    *(_QWORD *)&v16[qword_10047DEF8] = sub_100198A98();
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    v98 = v119;
    static DispatchQoS.userInitiated.getter();
    *(_QWORD *)&v129 = _swiftEmptyArrayStorage;
    v99 = sub_10000C4B0((unint64_t *)&qword_10047E690, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v116 = v99;
    v100 = sub_10000EDC8(&qword_100486EF0);
    v115 = (char *)v100;
    v117 = sub_100043310((unint64_t *)&qword_10047E6A0, &qword_100486EF0, (uint64_t)&protocol conformance descriptor for [A]);
    v101 = v121;
    v102 = v120;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v129, v100, v117, v120, v99);
    v103 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
    v104 = *(void (**)(char *, uint64_t, uint64_t))(v118 + 104);
    v105 = v123;
    v106 = v122;
    v104(v123, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v122);
    *(_QWORD *)&v16[qword_10047DF30] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x7465645F65636166, 0xED0000726F746365, v98, v101, v105, 0);
    static DispatchQoS.userInitiated.getter();
    *(_QWORD *)&v129 = _swiftEmptyArrayStorage;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v129, v115, v117, v102, v116);
    v104(v105, v103, v106);
    *(_QWORD *)&v16[qword_10047DF90] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000017, 0x80000001003DB440, v98, v101, v105, 0);
    v107 = *(_QWORD *)MeasureCore.shared.unsafeMutableAddressor();
    swift_beginAccess(v107 + 112, v128, 0, 0);
    v108 = *(_QWORD *)(v107 + 112);
    *(_QWORD *)&v16[qword_10047DFE8] = v108;
    swift_retain(v108);

    v109 = v124;
    v127.receiver = v16;
    v127.super_class = v124;
    v110 = (char *)objc_msgSendSuper2(&v127, "init");
    v111 = *(_QWORD *)&v110[qword_10047DEF8];
    *((_QWORD *)&v130 + 1) = v109;
    *(_QWORD *)&v131 = &off_100441178;
    v112 = v110;
    swift_retain(v111);

    *(_QWORD *)&v129 = v112;
    swift_beginAccess(v111 + 64, v126, 33, 0);
    sub_10006494C((uint64_t)&v129, v111 + 64, &qword_10047E6A8);
    swift_endAccess(v126);
    swift_release(v111);
    return (uint64_t)v112;
  }
  return result;
}

uint64_t sub_1000513EC()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  sub_100051408();
  return sub_100051408();
}

uint64_t sub_100051408()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, __n128);
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, __n128);
  __n128 v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_BYTE *, uint64_t, uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t result;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  char v96;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = type metadata accessor for Date(0);
  v90 = *(_QWORD *)(v3 - 8);
  v91 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v89 - v7;
  v9 = qword_10047DEB0;
  KeyPath = swift_getKeyPath(&unk_1003B2CB0);
  v11 = sub_10000EDC8((uint64_t *)&unk_10047E5C0);
  if (qword_10047AD88 != -1)
    goto LABEL_6;
  while (1)
  {
    v12 = qword_1004AF890;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v11 + 272);
    v14 = swift_retain();
    *(_QWORD *)&v1[v9] = v13(KeyPath, v12, v14);
    v15 = qword_10047DEB8;
    v16 = sub_10000EDC8(&qword_10047ECF0);
    v17 = swift_getKeyPath(&unk_1003B2CD8);
    v18 = qword_1004AF890;
    v19 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v16 + 272);
    v20 = swift_retain();
    *(_QWORD *)&v1[v15] = v19(v17, v18, v20);
    v21 = qword_10047DEC0;
    v22 = swift_getKeyPath(&unk_1003B2D00);
    v23 = sub_10000EDC8((uint64_t *)&unk_10047E5D0);
    v24 = qword_1004AF890;
    v25 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v23 + 272);
    v26 = swift_retain();
    *(_QWORD *)&v1[v21] = v25(v22, v24, v26);
    v27 = qword_10047DEC8;
    v28 = swift_getKeyPath(&unk_1003B2D28);
    v29 = sub_10000EDC8((uint64_t *)&unk_10047EFD0);
    v30 = qword_1004AF890;
    v31 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v29 + 272);
    v32 = swift_retain();
    *(_QWORD *)&v1[v27] = v31(v28, v30, v32);
    v33 = qword_10047DED0;
    v34 = sub_10000EDC8(&qword_10047E5E0);
    v35 = swift_getKeyPath(&unk_1003B2D50);
    v36 = qword_1004AF890;
    v37 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v34 + 272);
    v38 = swift_retain();
    *(_QWORD *)&v1[v33] = v37(v35, v36, v38);
    v39 = qword_10047DED8;
    sub_10000EDC8(&qword_10047E5E8);
    v40 = swift_getKeyPath(&unk_1003B2D78);
    *(_QWORD *)&v1[v39] = MutableStateValue.__allocating_init(_:_:)(v40, ObjectType);
    v41 = qword_10047DEE0;
    sub_10000EDC8(&qword_10047E5F0);
    v42 = swift_getKeyPath(&unk_1003B2DA0);
    *(_QWORD *)&v1[v41] = MutableStateValue.__allocating_init(_:_:)(v42, ObjectType);
    v43 = qword_10047DEE8;
    sub_10000EDC8(&qword_10047E5F8);
    v44 = swift_getKeyPath(&unk_1003B2DC8);
    *(_QWORD *)&v1[v43] = MutableStateValue.__allocating_init(_:_:)(v44, ObjectType);
    v45 = qword_10047DEF0;
    sub_10000EDC8(&qword_10047E600);
    v46 = swift_getKeyPath(&unk_1003B2DF0);
    *(_QWORD *)&v1[v45] = MutableStateValue.__allocating_init(_:_:)(v46, ObjectType);
    v47 = qword_10047DF00;
    sub_10000EDC8(&qword_10047E608);
    v48 = swift_getKeyPath(&unk_1003B2E18);
    *(_QWORD *)&v1[v47] = MutableStateValue.__allocating_init(_:_:)(v48, ObjectType);
    v9 = qword_10047DF08;
    v49 = swift_getKeyPath(&unk_1003B2E40);
    ObjectType = sub_10000EDC8(&qword_10047E610);
    v11 = qword_1004AF890;
    v50 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(ObjectType + 272);
    v51 = swift_retain();
    v52 = v49;
    KeyPath = ObjectType;
    *(_QWORD *)&v1[v9] = v50(v52, v11, v51);
    if (qword_10047B190 != -1)
      swift_once(&qword_10047B190, sub_1001C81CC);
    if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) == 0)
      break;
    __break(1u);
LABEL_6:
    swift_once(&qword_10047AD88, sub_1001883CC);
  }
  *(_OWORD *)&v1[qword_10047DF10] = *(_OWORD *)(qword_1004AFD08
                                              + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits
                                              + 64);
  v1[qword_10047DF18] = 0;
  v53 = &v1[qword_10047DF20];
  v54 = sub_10000EDC8(&qword_10047E080);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v53, 1, 1, v54);
  v1[qword_1004AF218] = 3;
  v55 = qword_10047DF28;
  v56 = sub_10000EDC8(&qword_10047E470);
  swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
  v58 = PassthroughSubject.init()(v57);
  *(_QWORD *)&v1[v55] = v58;
  Date.init()(v58);
  *(_QWORD *)&v1[qword_10047DF40] = 0x4000000000000000;
  v59 = v90;
  v60 = v91;
  v61 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v90 + 56);
  v61(&v1[qword_10047DF48], 1, 1, v91);
  v61(&v1[qword_10047DF50], 1, 1, v60);
  v62 = &v1[qword_10047DF58];
  *(_QWORD *)v62 = 0;
  *((_QWORD *)v62 + 1) = 0;
  v62[16] = 1;
  v63 = qword_10047DF60;
  v64 = type metadata accessor for PersonHeightInstrument.HeightResultContainer();
  v65 = swift_allocObject(v64, 24, 7);
  v66 = sub_10005F338(0, 8, 0, (char *)_swiftEmptyArrayStorage);
  v89 = xmmword_1003B2A60;
  v92 = xmmword_1003B2A60;
  *(_QWORD *)&v93 = v66;
  v67 = sub_10000EDC8(&qword_10047E618);
  swift_allocObject(v67, 48, 7);
  *(_QWORD *)(v65 + 16) = Synchronized.init(wrappedValue:)(&v92);
  *(_QWORD *)&v1[v63] = v65;
  v68 = qword_10047DF68;
  v69 = sub_10005F240(0, 8, 0, (char *)_swiftEmptyArrayStorage);
  v92 = v89;
  *(_QWORD *)&v93 = v69;
  v70 = sub_10000EDC8(&qword_10047E620);
  swift_allocObject(v70, 48, 7);
  v71 = Synchronized.init(wrappedValue:)(&v92);
  *(_QWORD *)&v1[v68] = v71;
  v72 = Date.init()(v71);
  v73 = qword_10047DF78;
  Date.init()(v72);
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v6, v8, v60);
  v74 = sub_10000EDC8(&qword_10047E628);
  swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
  v75 = Synchronized.init(wrappedValue:)(v6);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v8, v60);
  *(_QWORD *)&v1[v73] = v75;
  v61(&v1[qword_10047DF80], 1, 1, v60);
  v76 = qword_10047DF88;
  v77 = sub_10005F240(0, 8, 0, (char *)_swiftEmptyArrayStorage);
  v92 = v89;
  *(_QWORD *)&v93 = v77;
  swift_allocObject(v70, 48, 7);
  *(_QWORD *)&v1[v76] = Synchronized.init(wrappedValue:)(&v92);
  v61(&v1[qword_10047DF98], 1, 1, v60);
  v61(&v1[qword_10047DFA0], 1, 1, v60);
  v61(&v1[qword_10047DFA8], 1, 1, v60);
  v78 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v61)(&v1[qword_10047DFB0], 1, 1, v60);
  *(_QWORD *)&v1[qword_10047DFB8] = 0;
  *(_QWORD *)&v1[qword_10047DFC8] = 0;
  *(_QWORD *)&v1[qword_10047DFD0] = 0;
  *(_QWORD *)&v1[qword_10047DFD8] = 0;
  Date.init()(v78);
  v79 = &v1[qword_10047DFF0];
  *((_OWORD *)v79 + 1) = 0u;
  *((_OWORD *)v79 + 2) = 0u;
  *(_OWORD *)v79 = 0u;
  v79[48] = 1;
  v80 = &v1[qword_10047DFF8];
  *((_OWORD *)v80 + 1) = 0u;
  *((_OWORD *)v80 + 2) = 0u;
  *(_OWORD *)v80 = 0u;
  v80[48] = 1;
  v81 = &v1[qword_10047E000];
  *(_OWORD *)v81 = 0u;
  *((_OWORD *)v81 + 1) = 0u;
  *((_OWORD *)v81 + 2) = 0u;
  v81[48] = 1;
  *(_QWORD *)&v1[qword_10047E008] = 0;
  v1[qword_10047E010] = 0;
  v82 = qword_10047E018;
  *(_QWORD *)&v92 = 0;
  v83 = sub_10000EDC8(&qword_10047E630);
  swift_allocObject(v83, 32, 7);
  *(_QWORD *)&v1[v82] = Synchronized.init(wrappedValue:)(&v92);
  v84 = qword_10047E020;
  LOBYTE(v92) = 0;
  v85 = sub_10000EDC8(&qword_10047E638);
  swift_allocObject(v85, 32, 7);
  *(_QWORD *)&v1[v84] = Synchronized.init(wrappedValue:)(&v92);
  *(_QWORD *)&v1[qword_10047E028] = _swiftEmptyArrayStorage;
  v1[qword_10047E030] = 0;
  v86 = qword_10047E038;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v96 = 1;
  v87 = sub_10000EDC8(&qword_10047E640);
  swift_allocObject(v87, 96, 7);
  *(_QWORD *)&v1[v86] = Synchronized.init(wrappedValue:)(&v92);

  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/PersonHeightInstrument.swift", 36, 2, 268, 0);
  __break(1u);
  return result;
}

double sub_100051C90()
{
  double result;
  uint64_t v1;

  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000642C4, &v1);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_100051CE4(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  double v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_OWORD *__return_ptr, __n128);
  __n128 v52;
  uint64_t v53;
  char *v54;
  __n128 v55;
  __n128 v56;
  char v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_BYTE *__return_ptr, __n128);
  __n128 v65;
  void (*v66)(__n128 *__return_ptr, __n128);
  __n128 v67;
  char v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  double v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  int v76;
  uint64_t v77;
  double v78;
  void (*v79)(char *, uint64_t);
  void (*v80)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  id v91;
  unsigned __int8 v92;
  uint64_t (*v93)(_OWORD *, __n128);
  __n128 v94;
  void (*v95)(_OWORD *, _QWORD);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  BOOL v101;
  double v102;
  void (*v103)(_BYTE *__return_ptr, __n128);
  __n128 v104;
  float v105;
  float v106;
  float32x4_t v107;
  uint64_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float v112;
  char v113;
  float v114;
  float v115;
  uint64_t (*v116)(__n128);
  __n128 v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(void (*)(uint64_t), uint64_t);
  char *v121;
  Swift::String v122;
  Swift::String v123;
  unint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int32x4_t v130;
  float32x2_t v131;
  float32x2_t v132;
  uint64_t v133;
  float v134;
  __n128 v135;
  float32x4_t v136;
  float v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __n128 v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  __n128 v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  void (*v159)(char *, uint64_t, uint64_t);
  id v160;
  char *v161;
  char *v162;
  __n128 v163;
  char *v164;
  double v165;
  double v166;
  void (*v167)(char *, uint64_t);
  __n128 v168;
  char *v169;
  char *v170;
  __n128 v171;
  double v172;
  __n128 v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(_BYTE *__return_ptr, __n128);
  __n128 v177;
  void (*v178)(__n128 *__return_ptr, __n128);
  __n128 v179;
  void (*v180)(__n128 *__return_ptr, __n128);
  __n128 v181;
  uint64_t v182;
  void (*v183)(__n128 *__return_ptr, __n128);
  __n128 v184;
  float v185;
  void (*v186)(__n128 *__return_ptr, __n128);
  __n128 v187;
  uint64_t v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  float32x2_t v196;
  float32x2_t v197;
  float32x2_t v198;
  float32x2_t v199;
  BOOL v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  double v207;
  uint64_t v208;
  uint64_t v209;
  id v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void (*v214)(uint64_t, char *, uint64_t);
  void (*v215)(char *, uint64_t, uint64_t, uint64_t);
  void (*v216)(char *, char *, uint64_t, __n128);
  id v217;
  uint64_t (*v218)(char *, uint64_t, uint64_t);
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  float32x4_t v231;
  char *v232;
  char *v233;
  char *v234;
  double v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD v238[64];
  __n128 v239[34];
  __n128 v240[34];
  _BYTE v241[531];
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _OWORD v245[34];
  __n128 v246[34];
  double *v247[64];
  _BYTE v248[512];
  _BYTE v249[512];
  _BYTE v250[528];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v228 = *(_QWORD *)(v3 - 8);
  v229 = v3;
  __chkstk_darwin(v3);
  v227 = (char *)&v213 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v225 = *(_QWORD *)(v5 - 8);
  v226 = v5;
  __chkstk_darwin(v5);
  v224 = (char *)&v213 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  v8 = __chkstk_darwin(v7);
  v223 = (uint64_t)&v213 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v234 = (char *)&v213 - v11;
  v12 = __chkstk_darwin(v10);
  v231.i64[0] = (uint64_t)&v213 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v213 - v14;
  v16 = type metadata accessor for Date(0);
  v235 = *(double *)(v16 - 8);
  v236 = v16;
  v17 = *(_QWORD *)(*(_QWORD *)&v235 + 64);
  v18 = __chkstk_darwin(v16);
  v222 = (char *)&v213 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v18);
  v230 = (char *)&v213 - v20;
  v21 = __chkstk_darwin(v19);
  v232 = (char *)&v213 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v213 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v213 - v27;
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v213 - v30;
  v32 = __chkstk_darwin(v29);
  v34 = (char *)&v213 - v33;
  __chkstk_darwin(v32);
  v233 = (char *)&v213 - v35;
  v36 = (uint64_t)sub_100053F64();
  if ((v36 & 1) == 0
    || (v37 = qword_10047DEB8,
        swift_retain(),
        StateValue.wrappedValue.getter(v246, v38),
        swift_release(),
        memcpy(v250, v246, 0x200uLL),
        v39 = (void *)sub_10008F8B8(),
        v36 = sub_100012C00((uint64_t)v250),
        !v39))
  {
    v49 = (uint64_t)v234;
    Date.init()(v36);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)&v235 + 56))(v49, 0, 1, v236);
    v50 = (uint64_t)&a2[qword_10047DF80];
    swift_beginAccess(&a2[qword_10047DF80], v245, 33, 0);
    sub_10006494C(v49, v50, (uint64_t *)&unk_10047E440);
    swift_endAccess(v245);
    *(_QWORD *)&v245[0] = 0;
    swift_retain();
    Synchronized.wrappedValue.setter(v245);
    swift_release();
    v51 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)&a2[qword_10047DED8] + 144);
    v52 = swift_retain();
    v51(v245, v52);
    swift_release();
    memcpy(v246, v245, 0x213uLL);
    sub_1000642CC((uint64_t)v246);
    if ((v246[24].n128_u8[8] & 1) == 0)
    {
      sub_1000506A8(0xD000000000000020, (void *)0x80000001003DB0F0);
      sub_100053698();
    }
    return;
  }

  v220 = v37;
  swift_retain();
  StateValue.wrappedValue.getter(v246, v40);
  swift_release();
  memcpy(v249, v246, sizeof(v249));
  v41 = (void *)sub_10008F8B8();
  sub_100012C00((uint64_t)v249);
  v42 = v235;
  if (!v41)
    goto LABEL_8;
  v43 = objc_msgSend(v41, "worldTrackingState");
  v221 = a2;
  v44 = v43;

  v45 = v44;
  a2 = v221;
  if (!v45)
    goto LABEL_8;
  if ((objc_msgSend(v45, "majorRelocalization") & 1) != 0
    || (v46 = objc_msgSend(v45, "minorRelocalization"), (v46 & 1) != 0))
  {

LABEL_8:
    sub_1000506A8(0xD00000000000001ALL, (void *)0x80000001003DB120);
    v47 = (uint64_t)v234;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)&v42 + 56))(v234, 1, 1, v236);
    v48 = (uint64_t)&a2[qword_10047DF80];
    swift_beginAccess(&a2[qword_10047DF80], v246, 33, 0);
    sub_10006494C(v47, v48, (uint64_t *)&unk_10047E440);
    swift_endAccess(v246);
    return;
  }
  v217 = v45;
  Date.init()(v46);
  v219 = qword_10047E020;
  swift_retain();
  Synchronized.wrappedValue.getter(v246, v53);
  swift_release();
  if (v246[0].n128_u8[0] == 1)
  {
    v246[0].n128_u8[0] = 0;
    swift_retain();
    Synchronized.wrappedValue.setter(v246);
    swift_release();
    sub_1000506A8(0x20676E69646E6550, (void *)0xED00007465736572);
    sub_100053698();
  }
  v219 = qword_10047DED8;
  v54 = v221;
  v218 = *(uint64_t (**)(char *, uint64_t, uint64_t))(**(_QWORD **)&v221[qword_10047DED8] + 144);
  v55 = swift_retain();
  ((void (*)(_OWORD *__return_ptr, __n128))v218)(v245, v55);
  swift_release();
  memcpy(v246, v245, 0x213uLL);
  sub_1000642CC((uint64_t)v246);
  if ((v246[12].n128_u8[0] & 1) == 0)
  {
    v56.n128_f64[0] = simd_float4x4.position.getter(v246[8], v246[9], v246[10], v246[11]);
    sub_100054370(v56);
    if ((v57 & 1) == 0)
    {
      sub_1000506A8(0xD000000000000016, (void *)0x80000001003DB140);
      sub_100053698();
    }
  }
  v58 = (uint64_t)&v54[qword_10047DF48];
  swift_beginAccess(&v54[qword_10047DF48], &v244, 0, 0);
  sub_1000644F8(v58, (uint64_t)v15, (uint64_t *)&unk_10047E440);
  v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v42 + 48);
  v60 = v59(v15, 1, v236);
  v218 = v59;
  if (v60 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v42 + 32))(v34, v15, v236);
    v64 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)&v54[v219] + 144);
    v65 = swift_retain();
    v64(v241, v65);
    swift_release();
    memcpy(v245, v241, 0x213uLL);
    sub_1000642CC((uint64_t)v245);
    if ((BYTE8(v245[28]) & 1) != 0)
    {
      v66 = *(void (**)(__n128 *__return_ptr, __n128))(**(_QWORD **)&v54[v219] + 144);
      v67 = swift_retain();
      v66(v240, v67);
      swift_release();
      memcpy(v241, v240, sizeof(v241));
      sub_1000642CC((uint64_t)v241);
      v68 = v241[392];
      v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v42 + 16);
      v70 = v236;
      v69(v31, v233, v236);
      v69(v28, v34, v70);
      if ((v68 & 1) == 0)
      {
        v71 = Date.timeIntervalSince(_:)(v28);
        v72 = *(void (**)(char *, uint64_t))(*(_QWORD *)&v42 + 8);
        v72(v28, v70);
        v72(v31, v70);
        v73 = v70;
        v62 = v231.i64[0];
        if (v71 > 0.4)
        {
          sub_1000506A8(0xD000000000000012, (void *)0x80000001003DB1A0);
          sub_100053698();
          v72(v34, v73);
          v61 = (uint64_t)v233;
LABEL_26:
          v59 = v218;
          v63 = v73;
          goto LABEL_27;
        }
        v61 = (uint64_t)v233;
LABEL_25:
        v72(v34, v73);
        goto LABEL_26;
      }
    }
    else
    {
      v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v42 + 16);
      v70 = v236;
      v74(v31, v233, v236);
      v74(v28, v34, v70);
    }
    v72 = *(void (**)(char *, uint64_t))(*(_QWORD *)&v42 + 8);
    v72(v28, v70);
    v72(v31, v70);
    v61 = (uint64_t)v233;
    v73 = v70;
    v62 = v231.i64[0];
    goto LABEL_25;
  }
  sub_100036600((uint64_t)v15, (uint64_t *)&unk_10047E440);
  v61 = (uint64_t)v233;
  v62 = v231.i64[0];
  v63 = v236;
LABEL_27:
  v75 = (uint64_t)&v221[qword_10047DF80];
  swift_beginAccess(&v221[qword_10047DF80], &v243, 0, 0);
  sub_1000644F8(v75, v62, (uint64_t *)&unk_10047E440);
  v76 = v59((char *)v62, 1, v63);
  v77 = v219;
  if (v76 == 1)
  {
    sub_100036600(v62, (uint64_t *)&unk_10047E440);
    goto LABEL_31;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v42 + 32))(v25, v62, v63);
  v78 = Date.timeIntervalSince(_:)(v25);
  v79 = *(void (**)(char *, uint64_t))(*(_QWORD *)&v42 + 8);
  v79(v25, v63);
  if (v78 >= 2.0)
  {
LABEL_31:
    v80 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)&v42 + 56);
    v81 = (uint64_t)v234;
    v80(v234, 1, 1, v63);
    swift_beginAccess(v75, v245, 33, 0);
    sub_10006494C(v81, v75, (uint64_t *)&unk_10047E440);
    swift_endAccess(v245);
    v82 = v221;
    swift_retain();
    Synchronized.wrappedValue.getter(v245, v83);
    swift_release();
    v84 = *(void **)&v245[0];
    if (*(_QWORD *)&v245[0])
    {
      *(_QWORD *)&v245[0] = 0;
      swift_retain();
      Synchronized.wrappedValue.setter(v245);
      swift_release();
      swift_retain();
      StateValue.wrappedValue.getter(v245, v85);
      swift_release();
      memcpy(v248, v245, sizeof(v248));
      sub_1000544D8(v84, v248);
      sub_100012C00((uint64_t)v248);

    }
    v86 = sub_100054750();
    if ((v86 & 0x100000000) != 0)
    {
      swift_retain();
      Synchronized.wrappedValue.getter(v245, v89);
      sub_10000EDC8(&qword_10047E460);
      RingBuffer.clear()();
    }
    else
    {
      v240[0].n128_u32[0] = v86;
      swift_retain();
      Synchronized.wrappedValue.getter(v245, v87);
      v88 = sub_10000EDC8(&qword_10047E460);
      RingBuffer.append(_:)(v240, v88);
    }
    *(_OWORD *)v241 = v245[0];
    *(_QWORD *)&v241[16] = *(_QWORD *)&v245[1];
    Synchronized.wrappedValue.setter(v241);
    v90 = objc_msgSend(*(id *)&v82[qword_10047DFC0], "session", swift_release().n128_f64[0]);
    v91 = objc_msgSend(v90, "configuration");

    if (!v91)
    {
      __break(1u);
      JUMPOUT(0x100053688);
    }
    v92 = objc_msgSend(v91, "frameSemantics");

    v93 = *(uint64_t (**)(_OWORD *, __n128))(**(_QWORD **)&v82[v77] + 400);
    v94 = swift_retain();
    v95 = (void (*)(_OWORD *, _QWORD))v93(v245, v94);
    *(_BYTE *)(v96 + 2) = v92 & 1;
    v95(v245, 0);
    swift_release();
    sub_100054884(v61);
    swift_retain();
    swift_retain();
    Synchronized.wrappedValue.getter(v245, v97);
    swift_release();
    v98 = *(_QWORD *)&v245[1];
    v99 = v82;
    v100 = *(_QWORD *)(*(_QWORD *)&v245[1] + 16);
    swift_release();
    swift_bridgeObjectRelease(v98);
    v101 = v100 == 8;
    v102 = v235;
    if (v101)
    {
      v103 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)&v99[v77] + 144);
      v104 = swift_retain();
      v103(v241, v104);
      swift_release();
      memcpy(v245, v241, 0x213uLL);
      sub_1000642CC((uint64_t)v245);
      if ((BYTE8(v245[28]) & 1) != 0)
      {
        swift_retain();
        sub_10005DFD8();
        v106 = v105;
        swift_release();
        swift_retain();
        *(double *)v107.i64 = sub_10005E178();
        v231 = v107;
        swift_release();
        swift_retain();
        StateValue.wrappedValue.getter(v240, v108);
        swift_release();
        memcpy(v241, v240, 0x200uLL);
        sub_100012C00((uint64_t)v241);
        *(double *)v109.i64 = simd_float4x4.position.getter(*(__n128 *)&v241[336], *(__n128 *)&v241[352], *(__n128 *)&v241[368], *(__n128 *)&v241[384]);
        v110 = vsubq_f32(v231, v109);
        v111 = vmulq_f32(v110, v110);
        v112 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v111, 2), vaddq_f32(v111, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v111.f32, 1))).f32[0]);
        sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
        v113 = static UIDevice.isIPad()();
        v114 = 0.0;
        if ((v113 & 1) != 0)
          v114 = (float)((float)(v112 * 0.0169) + (float)(v112 * (float)(v112 * -0.0053))) + -0.0089;
        v115 = v106 - v114;
        v116 = *(uint64_t (**)(__n128))(**(_QWORD **)&v99[v77] + 200);
        v117 = swift_retain();
        v118 = v116(v117);
        swift_release();
        v119 = swift_allocObject(&unk_100441358, 32, 7);
        *(float *)(v119 + 16) = v115;
        *(_QWORD *)(v119 + 24) = v99;
        v120 = *(void (**)(void (*)(uint64_t), uint64_t))(*(_QWORD *)v118 + 416);
        v121 = v99;
        v120(sub_1000643E0, v119);
        swift_release();
        v102 = v235;
        swift_release();
        v240[0].n128_u64[0] = 0;
        v240[0].n128_u64[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(29);
        v122._countAndFlagsBits = 0xD000000000000014;
        v122._object = (void *)0x80000001003DB180;
        String.append(_:)(v122);
        Float.write<A>(to:)(v240, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, (float)((float)(v112 * 0.0169) + (float)(v112 * (float)(v112 * -0.0053))) + -0.0089);
        v123._countAndFlagsBits = 0x2E726F72726520;
        v123._object = (void *)0xE700000000000000;
        String.append(_:)(v123);
        v124 = v240[0].n128_u64[1];
        sub_1000506A8(v240[0].n128_i64[0], (void *)v240[0].n128_u64[1]);
        swift_bridgeObjectRelease(v124);
        v125 = sub_10005054C();
        if (v125)
        {
          v126 = (_QWORD *)v125;
          swift_retain();
          StateValue.wrappedValue.getter(v239, v127);
          swift_release();
          memcpy(v240, v239, 0x200uLL);
          sub_100012C00((uint64_t)v240);
          *(double *)v128.i64 = simd_float4x4.position.getter(v240[21], v240[22], v240[23], v240[24]);
          v129 = vsubq_f32(v231, v128);
          v130 = (int32x4_t)vmulq_f32(v129, v129);
          v130.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v130, 2), vadd_f32(*(float32x2_t *)v130.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v130.i8, 1))).u32[0];
          v131 = vrsqrte_f32((float32x2_t)v130.u32[0]);
          v132 = vmul_f32(v131, vrsqrts_f32((float32x2_t)v130.u32[0], vmul_f32(v131, v131)));
          v231 = vmulq_n_f32(v129, vmul_f32(v132, vrsqrts_f32((float32x2_t)v130.u32[0], vmul_f32(v132, v132))).f32[0]);
          v134 = *(float *)Float.piDiv2.unsafeMutableAddressor(v133);
          v136 = vmulq_f32(*(float32x4_t *)SIMD3<>.up.unsafeMutableAddressor(v135), v231);
          v137 = (float)(v134
                       - fabsf(acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v136, 2), vaddq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 1))).f32[0])))* 57.296;
          if (qword_10047AB68 != -1)
            swift_once(&qword_10047AB68, sub_10011E814);
          sub_10011C050(v126, v106, v112, v137);

        }
        v138 = (uint64_t)v234;
        v80(v234, 1, 1, v236);
        v139 = (uint64_t)&v121[qword_10047DFB0];
        swift_beginAccess(&v121[qword_10047DFB0], v240, 33, 0);
        sub_10006494C(v138, v139, (uint64_t *)&unk_10047E440);
        swift_endAccess(v240);
        v99 = v221;
      }
    }
    v215 = v80;
    v231.i64[0] = *(_QWORD *)&v99[qword_10047DF90];
    v140 = swift_allocObject(&unk_1004412E0, 24, 7);
    v141 = swift_unknownObjectWeakInit(v140 + 16, v99);
    v216 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)&v102 + 16);
    v142 = v232;
    v143 = (uint64_t)v233;
    v144 = v236;
    v216(v232, v233, v236, v141);
    v145 = *(unsigned __int8 *)(*(_QWORD *)&v102 + 80);
    v146 = v102;
    v147 = (v145 + 24) & ~v145;
    v148 = swift_allocObject(&unk_100441308, v147 + v17, v145 | 7);
    *(_QWORD *)(v148 + 16) = v140;
    v214 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)&v146 + 32);
    v214(v148 + v147, v142, v144);
    *(_QWORD *)&v245[2] = sub_10006438C;
    *((_QWORD *)&v245[2] + 1) = v148;
    *(_QWORD *)&v245[0] = _NSConcreteStackBlock;
    *((_QWORD *)&v245[0] + 1) = 1107296256;
    *(_QWORD *)&v245[1] = sub_10003ECA0;
    *((_QWORD *)&v245[1] + 1) = &unk_100441320;
    v149 = _Block_copy(v245);
    v150 = swift_retain();
    v151 = v224;
    static DispatchQoS.unspecified.getter(v150);
    *(_QWORD *)v241 = _swiftEmptyArrayStorage;
    v152 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v153 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v154 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
    v155 = v227;
    v156 = v153;
    v157 = v229;
    dispatch thunk of SetAlgebra.init<A>(_:)(v241, v156, v154, v229, v152);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v151, v155, v149);
    _Block_release(v149);
    v158 = v155;
    v159 = (void (*)(char *, uint64_t, uint64_t))v216;
    (*(void (**)(char *, uint64_t))(v228 + 8))(v158, v157);
    (*(void (**)(char *, uint64_t))(v225 + 8))(v151, v226);
    swift_release();
    swift_release();
    v160 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    LODWORD(v140) = objc_msgSend(v160, "kPersonHeightDebugViewEnabled");

    v161 = v230;
    v159(v230, v143, v144);
    if ((_DWORD)v140)
    {
      v162 = &v221[qword_10047DFE0];
      v163 = swift_beginAccess(&v221[qword_10047DFE0], &v237, 0, 0);
      v164 = v232;
      ((void (*)(char *, char *, uint64_t, __n128))v159)(v232, v162, v144, v163);
      v165 = Date.timeIntervalSince(_:)(v164);
      v166 = v235;
      v167 = *(void (**)(char *, uint64_t))(*(_QWORD *)&v235 + 8);
      v167(v164, v144);
      v167(v161, v144);
      if (v165 > 0.0333333333)
      {
        v168 = swift_beginAccess(v162, v245, 33, 0);
        (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)&v166 + 24))(v162, v143, v144, v168);
        swift_endAccess(v245);
        sub_100055924();
      }
    }
    else
    {
      v167 = *(void (**)(char *, uint64_t))(*(_QWORD *)&v235 + 8);
      v167(v161, v144);
      v164 = v232;
    }
    v169 = v221;
    v170 = &v221[qword_10047DF38];
    v171 = swift_beginAccess(&v221[qword_10047DF38], &v242, 0, 0);
    ((void (*)(char *, char *, uint64_t, __n128))v159)(v164, v170, v144, v171);
    v172 = Date.timeIntervalSince(_:)(v164);
    v167(v164, v144);
    if (1.0 / *(double *)&v169[qword_10047DF40] < v172)
    {
      v173 = swift_beginAccess(v170, v245, 33, 0);
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)&v235 + 24))(v170, v143, v144, v173);
      swift_endAccess(v245);
      swift_retain();
      StateValue.wrappedValue.getter(v245, v174);
      swift_release();
      memcpy(v247, v245, sizeof(v247));
      sub_100055B3C(v247);
      sub_100012C00((uint64_t)v247);
    }
    v175 = v219;
    v176 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)&v169[v219] + 144);
    v177 = swift_retain();
    v176(v241, v177);
    swift_release();
    memcpy(v245, v241, 0x213uLL);
    sub_1000642CC((uint64_t)v245);
    if ((BYTE8(v245[24]) & 1) == 0)
    {
      v178 = *(void (**)(__n128 *__return_ptr, __n128))(**(_QWORD **)&v169[v175] + 144);
      v179 = swift_retain();
      v178(v240, v179);
      swift_release();
      memcpy(v241, v240, sizeof(v241));
      sub_1000642CC((uint64_t)v241);
      if ((v241[456] & 1) != 0)
      {
        v180 = *(void (**)(__n128 *__return_ptr, __n128))(**(_QWORD **)&v169[v175] + 144);
        v181 = swift_retain();
        v180(v239, v181);
        swift_release();
        memcpy(v240, v239, 0x213uLL);
        sub_1000642CC((uint64_t)v240);
        if (v240[0].n128_u8[2] == 1)
        {
          v182 = qword_10047DEC0;
          v183 = *(void (**)(__n128 *__return_ptr, __n128))(**(_QWORD **)&v169[qword_10047DEC0] + 144);
          v184 = swift_retain();
          v183(v239, v184);
          swift_release();
          if ((v239[6].n128_u8[8] & 1) != 0
            || (v185 = v239[6].n128_f32[1],
                v186 = *(void (**)(__n128 *__return_ptr, __n128))(**(_QWORD **)&v169[v182] + 144),
                v187 = swift_retain(),
                v186(v239, v187),
                swift_release(),
                (v239[7].n128_u8[0] & 1) != 0)
            || v185 >= 0.075
            || v239[6].n128_f32[3] >= 0.4)
          {
            sub_1000506A8(0xD000000000000016, (void *)0x80000001003DB160);
          }
          else
          {
            swift_retain();
            StateValue.wrappedValue.getter(v238, v212);
            swift_release();
            memcpy(v239, v238, 0x200uLL);
            sub_100055F10(v239, v143);
            sub_100012C00((uint64_t)v239);
          }
          v144 = v236;
        }
      }
    }
    swift_retain();
    Synchronized.wrappedValue.getter(v241, v188);
    swift_release();
    if ((v241[64] & 1) != 0)
    {
      v169[qword_10047DF18] = 0;
      goto LABEL_70;
    }
    v189 = *(double *)v241;
    v190 = *(double *)&v241[8];
    v191 = *(double *)&v241[16];
    v192 = *(double *)&v241[24];
    v193 = *(double *)&v241[32];
    v194 = *(double *)&v241[40];
    v235 = *(double *)&v241[48];
    v195 = *(double *)&v241[56];
    v196 = COERCE_FLOAT32X2_T(SIMD2<>.init(_:)(*(double *)&v169[qword_10047DF10] * 0.5, *(double *)&v169[qword_10047DF10 + 8] * 0.5));
    v197 = COERCE_FLOAT32X2_T(SIMD2<>.init(_:)(v189, v190));
    SIMD2<>.init(_:)(v191, v192);
    v198 = COERCE_FLOAT32X2_T(SIMD2<>.init(_:)(v193, v194));
    *(double *)&v199 = SIMD2<>.init(_:)(v235, v195);
    v200 = sub_10010E2D4(v196, v197, v198, v199);
    v169[qword_10047DF18] = v200;
    if (!v200)
    {
LABEL_70:
      sub_100056D24(v143);
      v210 = sub_1000501A0();
      swift_retain();
      Synchronized.wrappedValue.getter(v241, v211);

      swift_release();
      __asm { BR              X10 }
    }
    v201 = sub_10005695C();
    if ((v201 & 1) == 0)
    {
      v202 = (uint64_t)&v169[qword_10047DFA8];
      swift_beginAccess(&v169[qword_10047DFA8], v238, 0, 0);
      v203 = v202;
      v204 = v223;
      sub_1000644F8(v203, v223, (uint64_t *)&unk_10047E440);
      if (v218((char *)v204, 1, v144) == 1)
      {
        sub_100036600(v204, (uint64_t *)&unk_10047E440);
        v169 = v221;
        goto LABEL_68;
      }
      v205 = v222;
      v206 = ((uint64_t (*)(char *, uint64_t, uint64_t))v214)(v222, v204, v144);
      Date.init()(v206);
      v207 = Date.timeIntervalSince(_:)(v205);
      v167(v164, v144);
      v201 = ((uint64_t (*)(char *, uint64_t))v167)(v205, v144);
      v169 = v221;
      if (v207 >= 0.5)
      {
LABEL_68:
        v201 = sub_100056BDC(0.0);
        if ((v201 & 1) != 0)
          goto LABEL_70;
      }
    }
    v208 = (uint64_t)v234;
    Date.init()(v201);
    v215((char *)v208, 0, 1, v144);
    v209 = (uint64_t)&v169[qword_10047DFB0];
    swift_beginAccess(&v169[qword_10047DFB0], v241, 33, 0);
    sub_10006494C(v208, v209, (uint64_t *)&unk_10047E440);
    swift_endAccess(v241);
    goto LABEL_70;
  }
  v79((char *)v61, v63);

}

void sub_100053698()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  void *v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(__n128);
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t (*v33)(__int128 *, __n128);
  __n128 v34;
  void (*v35)(__int128 *, _QWORD, __n128);
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  void (*v40)(__int128 *, __n128);
  __n128 v41;
  uint64_t v42;
  void (*v43)(__int128 *__return_ptr, __n128);
  __n128 v44;
  __int128 v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t (*v52)(__int128 *, __n128);
  __n128 v53;
  void (*v54)(__int128 *, _QWORD, __n128);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(__int128 *, _QWORD);
  id v62;
  __n128 v63;
  uint64_t v64;
  void (*v65)(__int128 *, __n128);
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t ObjectType;
  Swift::String v72;
  void *object;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t (*v79)(uint64_t);
  __int128 aBlock;
  uint64_t (*v81)(uint64_t);
  void *v82;
  void (*v83)();
  uint64_t v84;

  v1 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  __chkstk_darwin(v1);
  v3 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v77 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v75 = *(_QWORD *)(v7 - 8);
  v76 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10047AA20 != -1)
    swift_once(&qword_10047AA20, sub_1000E1068);
  v10._object = (void *)0x80000001003DB090;
  v10._countAndFlagsBits = 0xD00000000000001CLL;
  Log.debug(_:isPrivate:)(v10, 0);
  v11 = (void *)Contexts.UIKit.init()();
  v12 = swift_allocObject(&unk_100441290, 24, 7);
  *(_QWORD *)(v12 + 16) = v0;
  v83 = sub_10005EE20;
  v84 = v12;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v81 = sub_10003ECA0;
  v82 = &unk_1004412A8;
  v13 = _Block_copy(&aBlock);
  v14 = v0;
  static DispatchQoS.unspecified.getter(v15);
  *(_QWORD *)&v78 = _swiftEmptyArrayStorage;
  v16 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v18 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v17, v18, v4, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v77 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v9, v76);
  swift_release();
  v19 = *(uint64_t (**)(__n128))(**(_QWORD **)&v14[qword_10047DED8] + 200);
  v20 = swift_retain();
  v21 = v19(v20);
  v22 = swift_release();
  (*(void (**)(double (*)(uint64_t), _QWORD, __n128))(*(_QWORD *)v21 + 416))(sub_1000573C8, 0, v22);
  swift_release();
  v23 = &v14[qword_10047DF58];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v23[16] = 1;
  v14[qword_10047E030] = 0;
  v14[qword_10047DF18] = 0;
  v24 = type metadata accessor for Date(0);
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v25(v3, 1, 1, v24);
  v26 = (uint64_t)&v14[qword_10047DFA0];
  swift_beginAccess(&v14[qword_10047DFA0], &aBlock, 33, 0);
  sub_10006494C((uint64_t)v3, v26, (uint64_t *)&unk_10047E440);
  v27 = swift_endAccess(&aBlock);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v25)(v3, 1, 1, v24, v27);
  v28 = (uint64_t)&v14[qword_10047DFA8];
  swift_beginAccess(&v14[qword_10047DFA8], &aBlock, 33, 0);
  sub_10006494C((uint64_t)v3, v28, (uint64_t *)&unk_10047E440);
  v29 = swift_endAccess(&aBlock);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v25)(v3, 1, 1, v24, v29);
  v30 = (uint64_t)&v14[qword_10047DF98];
  swift_beginAccess(&v14[qword_10047DF98], &aBlock, 33, 0);
  sub_10006494C((uint64_t)v3, v30, (uint64_t *)&unk_10047E440);
  swift_endAccess(&aBlock);
  v31 = sub_10005054C();
  if (v31)
  {
    v32 = (_QWORD *)v31;
    v33 = *(uint64_t (**)(__int128 *, __n128))(**(_QWORD **)&v14[qword_10047DEE8] + 400);
    v34 = swift_retain();
    v35 = (void (*)(__int128 *, _QWORD, __n128))v33(&aBlock, v34);
    v36 = (*(uint64_t (**)(void))((swift_isaMask & *v32) + 0xB8))();
    v9 = (char *)v37;
    sub_100028000(v36, v37);
    v38 = swift_bridgeObjectRelease(v9);
    v35(&aBlock, 0, v38);
    swift_release();
    v39 = *(_QWORD *)&v14[qword_10047DF00];
    *(_QWORD *)&aBlock = 0xC000000000000008;
    v40 = *(void (**)(__int128 *, __n128))(*(_QWORD *)v39 + 392);
    v41 = swift_retain();
    v40(&aBlock, v41);

    swift_release();
  }
  v42 = qword_10047DEF0;
  v43 = *(void (**)(__int128 *__return_ptr, __n128))(**(_QWORD **)&v14[qword_10047DEF0] + 144);
  v44 = swift_retain();
  v43(&aBlock, v44);
  swift_release();
  v45 = aBlock;
  v46 = v81;
  *(_QWORD *)&v78 = v81;
  swift_bridgeObjectRetain(v81);
  v47 = sub_10000EDC8(&qword_10047C018);
  v48 = sub_10000EDC8(&qword_10047E450);
  swift_dynamicCast(&aBlock, &v78, v47, v48, 7);
  v49 = aBlock;
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(*((_QWORD *)&v45 + 1));
  swift_bridgeObjectRelease(v45);
  if (!((unint64_t)v49 >> 62))
  {
    v50 = *(void **)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v50)
      goto LABEL_7;
LABEL_21:
    swift_bridgeObjectRelease(v49);
    goto LABEL_22;
  }
  if (v49 < 0)
    v67 = v49;
  else
    v67 = v49 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v49);
  v50 = (void *)_CocoaArrayWrapper.endIndex.getter(v67);
  swift_bridgeObjectRelease(v49);
  if (!v50)
    goto LABEL_21;
LABEL_7:
  if ((v49 & 0xC000000000000001) != 0)
  {
    v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v49);
  }
  else
  {
    if (!*(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_25;
    }
    v51 = *(id *)(v49 + 32);
  }
  v50 = v51;
  swift_bridgeObjectRelease(v49);
  v52 = *(uint64_t (**)(__int128 *, __n128))(**(_QWORD **)&v14[v42] + 400);
  v53 = swift_retain();
  v54 = (void (*)(__int128 *, _QWORD, __n128))v52(&aBlock, v53);
  v56 = v55;
  v11 = *(void **)v55;
  v9 = *(char **)(v55 + 8);
  v42 = *(_QWORD *)(v55 + 16);
  v57 = type metadata accessor for WorldLine(0);
  if (swift_dynamicCastClass(v50, v57))
  {
    v58 = &unk_1003B2C88;
LABEL_16:
    swift_getKeyPath(v58);
    v61 = (void (*)(__int128 *, _QWORD))swift_modifyAtWritableKeyPath(&v78, v56);
    sub_10005B8D0((uint64_t)v50, (unint64_t)&type metadata accessor for MeasureObject, (uint64_t)sub_1000281FC);

    v61(&v78, 0);
    v63 = swift_release();
    v54(&aBlock, 0, v63);
    swift_release();
    v64 = *(_QWORD *)&v14[qword_10047DF00];
    *(_QWORD *)&aBlock = 0xC000000000000008;
    v65 = *(void (**)(__int128 *, __n128))(*(_QWORD *)v64 + 392);
    v66 = swift_retain();
    v65(&aBlock, v66);

    swift_release();
LABEL_22:
    swift_retain();
    swift_retain();
    Synchronized.wrappedValue.getter(&aBlock, v68);
    sub_10000EDC8(&qword_10047E458);
    RingBuffer.clear()();
    v78 = aBlock;
    v79 = v81;
    Synchronized.wrappedValue.setter(&v78);
    swift_release();
    swift_release();
    swift_retain();
    Synchronized.wrappedValue.getter(&aBlock, v69);
    sub_10000EDC8(&qword_10047E460);
    RingBuffer.clear()();
    v78 = aBlock;
    v79 = v81;
    Synchronized.wrappedValue.setter(&v78);
    swift_release();
    swift_retain();
    Synchronized.wrappedValue.getter(&aBlock, v70);
    RingBuffer.clear()();
    v78 = aBlock;
    v79 = v81;
    Synchronized.wrappedValue.setter(&v78);
    swift_release();
    return;
  }
  v59 = type metadata accessor for WorldRectangle(0);
  if (swift_dynamicCastClass(v50, v59))
  {
    v58 = &unk_1003B2C60;
    goto LABEL_16;
  }
  v60 = type metadata accessor for WorldPerson(0);
  if (swift_dynamicCastClass(v50, v60))
  {
    v58 = &unk_1003B2C38;
    goto LABEL_16;
  }
LABEL_25:
  *(_QWORD *)&v78 = 0;
  *((_QWORD *)&v78 + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v42);
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(*((_QWORD *)&v78 + 1));
  *(_QWORD *)&v78 = 0xD00000000000001CLL;
  *((_QWORD *)&v78 + 1) = 0x80000001003DB0D0;
  ObjectType = swift_getObjectType(v50);
  v72._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0);
  object = v72._object;
  String.append(_:)(v72);
  swift_bridgeObjectRelease(object);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v78, *((_QWORD *)&v78 + 1), "Measure/Measurements.swift", 26, 2, 129, 0);
  __break(1u);
}

float *sub_100053F64()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_OWORD *__return_ptr, __n128);
  __n128 v3;
  void (*v4)(_OWORD *__return_ptr, __n128);
  __n128 v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  float v10;
  void (*v11)(_OWORD *__return_ptr, __n128);
  __n128 v12;
  uint64_t v13;
  void (*v14)(_OWORD *__return_ptr, __n128);
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  float *result;
  float v19;
  float v20;
  int64x2_t v21;
  void (*v22)(_OWORD *__return_ptr, __n128);
  __n128 v23;
  void (*v24)(_OWORD *__return_ptr, __n128);
  __n128 v25;
  uint64_t v26;
  __int128 v27;
  Swift::Bool v28;
  float v29;
  _OWORD v30[7];
  char v31;
  _OWORD v32[34];
  _OWORD __src[34];
  _OWORD v34[9];
  uint64_t v35;
  uint64_t v36[18];
  _BYTE __dst[512];

  v1 = v0;
  v2 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v0 + qword_10047DF00) + 144);
  v3 = swift_retain();
  v2(__src, v3);
  swift_release();
  if ((*(_QWORD *)&__src[0] >> 62) - 1 >= 2)
  {
    if (!(*(_QWORD *)&__src[0] >> 62))
    {
      sub_10001A810(*(unint64_t *)&__src[0]);
      return 0;
    }
    *((_QWORD *)&v27 + 1) = *(_QWORD *)&__src[0];
    *(_QWORD *)&v27 = *(_QWORD *)&__src[0] + 0x4000000000000000;
    if ((unint64_t)(v27 >> 3) >= 2)
      return 0;
  }
  else
  {
    sub_10001A810(*(unint64_t *)&__src[0]);
  }
  v4 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v0 + qword_10047DF08) + 144);
  v5 = swift_retain();
  v4(__src, v5);
  swift_release();
  v34[6] = __src[6];
  v34[7] = __src[7];
  v34[8] = __src[8];
  v35 = *(_QWORD *)&__src[9];
  v34[2] = __src[2];
  v34[3] = __src[3];
  v34[4] = __src[4];
  v34[5] = __src[5];
  v34[0] = __src[0];
  v34[1] = __src[1];
  sub_1000127E8((id *)v34);
  sub_100012BC4((uint64_t)v34);
  sub_100012C58((uint64_t)v34, (uint64_t)v36, (uint64_t *)&unk_100486700);
  if (sub_1000127D0(v36) != 1)
  {
    sub_100012810((id *)v34);
    return 0;
  }
  swift_retain();
  StateValue.wrappedValue.getter(__src, v6);
  swift_release();
  memcpy(__dst, __src, sizeof(__dst));
  v7 = (void *)sub_10008F8B8();
  sub_100012C00((uint64_t)__dst);
  if (!v7)
    return 0;
  v8 = objc_msgSend(v7, "camera");
  objc_msgSend(v8, "transform");

  v10 = fabsf(COERCE_FLOAT(HIDWORD(COERCE_UNSIGNED_INT64(simd_float4x4.forward.getter(v9)))));
  if (qword_10047A8D0 != -1)
  {
    v29 = v10;
    swift_once(&qword_10047A8D0, sub_100050178);
    v10 = v29;
  }
  if (*(float *)&dword_1004AF210 < v10)
  {
    v11 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + qword_10047DED8) + 144);
    v12 = swift_retain();
    v11(v32, v12);
    swift_release();
    memcpy(__src, v32, 0x213uLL);
    sub_1000642CC((uint64_t)__src);
    if ((BYTE8(__src[28]) & 1) != 0)
    {
LABEL_17:

      return 0;
    }
  }
  v13 = sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
  if ((static UIDevice.isIPhone()(v13) & 1) != 0)
  {
    v14 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + qword_10047DEC0) + 144);
    v15 = swift_retain();
    v14(__src, v15);
    swift_release();
    if ((__src[6] & 1) == 0)
    {
      v17 = *((_QWORD *)&__src[5] + 1);
      result = (float *)Float.piDiv2.unsafeMutableAddressor(v16);
      v19 = -0.7854 - *result;
      v20 = 0.7854 - *result;
      if (v19 > v20)
      {
        __break(1u);
        return result;
      }
      v21 = vdupq_n_s64(v17);
      if (v19 > *(float *)&v21.i32[2] || *(float *)&v21.i32[2] > v20)
        goto LABEL_17;
    }
  }
  v22 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + qword_10047DED8) + 144);
  v23 = swift_retain();
  v22(v32, v23);
  swift_release();
  memcpy(__src, v32, 0x213uLL);
  sub_1000642CC((uint64_t)__src);
  if (LOBYTE(__src[0]) != 1)
    goto LABEL_17;
  v24 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + qword_10047DEC0) + 144);
  v25 = swift_retain();
  v24(v30, v25);
  swift_release();
  v32[4] = v30[4];
  v32[5] = v30[5];
  v32[6] = v30[6];
  LOBYTE(v32[7]) = v31;
  v32[0] = v30[0];
  v32[1] = v30[1];
  v32[2] = v30[2];
  v32[3] = v30[3];
  if (sub_10007089C())
    goto LABEL_17;
  swift_retain();
  StateValue.wrappedValue.getter(v30, v26);
  swift_release();
  if ((BYTE3(v30[0]) & 1) != 0)
    goto LABEL_17;
  v28 = ARFrame.isVIOTrackingUnacceptable()();

  return (float *)!v28;
}

void sub_100054370(__n128 a1)
{
  double *v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGFloat v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  _QWORD v16[64];
  _OWORD __dst[32];
  double __src[64];
  CGPoint v19;
  CGRect v20;

  if (qword_10047B190 != -1)
    swift_once(&qword_10047B190, sub_1001C81CC);
  v1 = (double *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits);
  if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = v1[8];
    v2 = v1[9];
    v5 = v1[6];
    v4 = v1[7];
    type metadata accessor for MeasureCamera(0);
    swift_retain();
    StateValue.wrappedValue.getter(__src, v6);
    swift_release();
    memcpy(__dst, __src, sizeof(__dst));
    sub_100012C00((uint64_t)__dst);
    v13 = (__n128)__dst[12];
    v14 = (__n128)__dst[11];
    v11 = (__n128)__dst[14];
    v12 = (__n128)__dst[13];
    swift_retain();
    StateValue.wrappedValue.getter(v16, v7);
    swift_release();
    memcpy(__src, v16, sizeof(__src));
    v8 = sub_100012C00((uint64_t)__src);
    static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v8, a1, v14, v13, v12, v11, __src[4]);
    v19.x = CGPoint.init(xy:)(v9);
    v19.y = v10;
    v20.origin.x = v5;
    v20.origin.y = v4;
    v20.size.width = v3;
    v20.size.height = v2;
    CGRectContainsPoint(v20, v19);
  }
}

void sub_1000544D8(void *a1, const void *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10008F8B8();
  if (v14)
  {
    v15 = (void *)v14;
    v30 = v7;
    if (qword_10047A930 != -1)
      swift_once(&qword_10047A930, sub_100083368);
    v28 = v11;
    v29 = v10;
    v16 = (void *)*((_QWORD *)&xmmword_1004AF258 + 1);
    if (*((_QWORD *)&xmmword_1004AF258 + 1))
    {
      v17 = (void *)Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
      v18 = (_QWORD *)swift_allocObject(&unk_100441380, 560, 15);
      v18[2] = v3;
      v18[3] = a1;
      v18[4] = v15;
      memcpy(v18 + 6, a2, 0x200uLL);
      aBlock[4] = sub_100064428;
      aBlock[5] = v18;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10003ECA0;
      aBlock[3] = &unk_100441398;
      v19 = _Block_copy(aBlock);
      v20 = v16;
      v21 = v3;
      v22 = a1;
      v23 = v15;
      sub_1000471E8((uint64_t)a2);
      static DispatchQoS.unspecified.getter(v24);
      v31 = _swiftEmptyArrayStorage;
      v25 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v26 = sub_10000EDC8((uint64_t *)&unk_10047E430);
      v27 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v26, v27, v6, v25);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v19);
      _Block_release(v19);

      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v29);
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

unint64_t sub_100054750()
{
  uint64_t v0;
  void (*v1)(__n128 *__return_ptr, __n128);
  __n128 v2;
  unsigned __int8 v3;
  uint64_t v4;
  float32x4_t v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v11;
  _QWORD v12[64];
  __n128 __src[34];
  __n128 __dst[34];

  v1 = *(void (**)(__n128 *__return_ptr, __n128))(**(_QWORD **)(v0 + qword_10047DED8) + 144);
  v2 = swift_retain();
  v1(__src, v2);
  swift_release();
  memcpy(__dst, __src, 0x213uLL);
  sub_1000642CC((uint64_t)__dst);
  v3 = __dst[12].n128_u8[0];
  if ((__dst[12].n128_u8[0] & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    *(double *)v5.i64 = simd_float4x4.position.getter(__dst[8], __dst[9], __dst[10], __dst[11]);
    v11 = v5;
    swift_retain();
    StateValue.wrappedValue.getter(v12, v6);
    swift_release();
    memcpy(__src, v12, 0x200uLL);
    sub_100012C00((uint64_t)__src);
    *(double *)v7.i64 = simd_float4x4.position.getter(__src[21], __src[22], __src[23], __src[24]);
    v8 = vsubq_f32(v11, v7);
    v9 = vmulq_f32(v8, v8);
    v4 = COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]));
  }
  return v4 | ((unint64_t)v3 << 32);
}

void sub_100054884(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  double v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  BOOL v18;
  double v19;
  double v20;
  uint64_t v21;
  void (*v22)(_QWORD *__return_ptr, __n128);
  __n128 v23;
  void (*v24)(_QWORD *__return_ptr, __n128);
  __n128 v25;
  void (*v26)(_QWORD *__return_ptr, __n128);
  __n128 v27;
  uint64_t (*v28)(_QWORD *, __n128);
  __n128 v29;
  void (*v30)(_QWORD *, _QWORD);
  uint64_t v31;
  uint64_t (*v32)(_QWORD *, __n128);
  __n128 v33;
  void (*v34)(_QWORD *, _QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[68];
  _QWORD v39[68];
  _BYTE v40[544];
  _BYTE v41[32];

  v37 = a1;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v36 - v10;
  v36 = v1;
  v12 = v1 + qword_10047DF48;
  swift_beginAccess(v1 + qword_10047DF48, v41, 0, 0);
  sub_1000644F8(v12, (uint64_t)v11, (uint64_t *)&unk_10047E440);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  v14 = v13(v11, 1, v2);
  sub_100036600((uint64_t)v11, (uint64_t *)&unk_10047E440);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v37, v2);
  if (v14 == 1)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_6:
    v17 = v36;
    v18 = *(_BYTE *)(v36 + qword_1004AF218) == 2;
    v19 = 2.0;
    v20 = 0.25;
    goto LABEL_7;
  }
  sub_1000644F8(v12, (uint64_t)v9, (uint64_t *)&unk_10047E440);
  if (v13(v9, 1, v2) == 1)
  {
    __break(1u);
    return;
  }
  v15 = Date.timeIntervalSince(_:)(v9);
  v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v5, v2);
  v16(v9, v2);
  if (v15 >= 1.0)
    goto LABEL_6;
  v17 = v36;
  v18 = *(_BYTE *)(v36 + qword_1004AF218) == 2;
  v19 = 20.0;
  v20 = 5.0;
LABEL_7:
  if (v18)
    v19 = v20;
  *(double *)(v17 + qword_10047DF40) = v19;
  v21 = qword_10047DED8;
  v22 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v17 + qword_10047DED8) + 144);
  v23 = swift_retain();
  v22(v39, v23);
  swift_release();
  memcpy(v40, v39, 0x213uLL);
  sub_1000642CC((uint64_t)v40);
  if (v40[456] == 1)
  {
    v24 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v17 + v21) + 144);
    v25 = swift_retain();
    v24(v38, v25);
    swift_release();
    memcpy(v39, v38, 0x213uLL);
    sub_1000642CC((uint64_t)v39);
    if (LOBYTE(v39[49]) != 1)
      goto LABEL_12;
  }
  v26 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v17 + v21) + 144);
  v27 = swift_retain();
  v26(v38, v27);
  swift_release();
  memcpy(v39, v38, 0x213uLL);
  sub_1000642CC((uint64_t)v39);
  if (BYTE2(v39[66]) == 1)
  {
LABEL_12:
    v28 = *(uint64_t (**)(_QWORD *, __n128))(**(_QWORD **)(v17 + v21) + 400);
    v29 = swift_retain();
    v30 = (void (*)(_QWORD *, _QWORD))v28(v39, v29);
    *(_BYTE *)(v31 + 1) = 1;
    v30(v39, 0);
  }
  else
  {
    v32 = *(uint64_t (**)(_QWORD *, __n128))(**(_QWORD **)(v17 + v21) + 400);
    v33 = swift_retain();
    v34 = (void (*)(_QWORD *, _QWORD))v32(v38, v33);
    *(_BYTE *)(v35 + 1) = 0;
    v34(v38, 0);
  }
  swift_release();
}

void sub_100054BEC(uint64_t a1, float a2)
{
  __int128 v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *(float *)(a1 + 452) = a2;
  *(_BYTE *)(a1 + 456) = 0;
  swift_retain();
  *(double *)&v3 = sub_10005E318();
  v9 = v3;
  swift_release();
  *(_OWORD *)(a1 + 464) = v9;
  *(_BYTE *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 530) = 1;
  v4 = (_QWORD *)sub_10005054C();
  if (v4)
  {
    v5 = v4;
    v6 = (*(uint64_t (**)(void))((swift_isaMask & *v4) + 0xB8))();
    v8 = v7;

    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 496));
    *(_QWORD *)(a1 + 488) = v6;
    *(_QWORD *)(a1 + 496) = v8;
  }
}

void sub_100054CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t Strong;
  char *v13;
  uint64_t v14;
  double v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(__n128);
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t (*)(uint64_t), uint64_t);
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  _OWORD v33[32];
  uint64_t v34;
  __n128 v35[33];

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v30 - v9;
  a1 += 16;
  swift_beginAccess(a1, &v34, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v11);
  if (Strong)
  {
    v13 = (char *)Strong;
    swift_retain();
    Synchronized.wrappedValue.getter(v10, v14);
    swift_release();
    v15 = Date.timeIntervalSince(_:)(v10);
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v10, v4);
    if (v15 > 0.1)
    {
      swift_retain();
      StateValue.wrappedValue.getter(v33, v17);
      swift_release();
      memcpy(v35, v33, 0x200uLL);
      sub_100054F44(v35);
      v19 = v18;
      sub_100012C00((uint64_t)v35);
      if ((v19 & 0x100000000) == 0)
      {
        v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v20(v10, a2, v4);
        v20(v8, (uint64_t)v10, v4);
        swift_retain();
        Synchronized.wrappedValue.setter(v8);
        v21 = swift_release();
        ((void (*)(char *, uint64_t, __n128))v16)(v10, v4, v21);
        v32 = v19;
        swift_retain();
        Synchronized.wrappedValue.getter(v33, v22);
        v23 = sub_10000EDC8(&qword_10047E460);
        RingBuffer.append(_:)(&v32, v23);
        v30 = v33[0];
        v31 = *(_QWORD *)&v33[1];
        Synchronized.wrappedValue.setter(&v30);
        swift_release();
        v24 = *(uint64_t (**)(__n128))(**(_QWORD **)&v13[qword_10047DEE0] + 200);
        v25 = swift_retain();
        v26 = v24(v25);
        swift_release();
        v27 = swift_allocObject(&unk_1004416A0, 24, 7);
        *(_QWORD *)(v27 + 16) = v13;
        v28 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(*(_QWORD *)v26 + 280);
        v29 = v13;
        v28(sub_100064918, v27);
        swift_release();
        swift_release();
      }
    }

  }
}

void sub_100054F44(__n128 *a1)
{
  uint64_t v1;
  void (*v3)(_QWORD *__return_ptr, __n128);
  __n128 v4;
  uint64_t v5;
  int8x16_t v6;
  float32x2_t v7;
  int8x16_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int32x2_t *v14;
  double *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  float32x2_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double *v24;
  unint64_t v25;
  char v26;
  float32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  __n128 v32;
  float v33;
  float v34;
  float v35;
  float32x4_t v36;
  __n128 v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  double *v42;
  double v43;
  __int128 v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float *v60;
  float v61;
  uint64_t v62;
  float v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  float *v70;
  float v71;
  uint64_t v72;
  float v73;
  float v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  unint64_t v78;
  float v79;
  unint64_t v80;
  float *v81;
  float v82;
  double v83;
  unsigned __int8 v84;
  float v85;
  __n128 *v86;
  void *v87;
  __int128 v88;
  __n128 v89;
  int v90;
  float v91;
  double *v92;
  _QWORD __src[68];
  __n128 __dst[34];

  v3 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + qword_10047DED8) + 144);
  v4 = swift_retain();
  v3(__src, v4);
  swift_release();
  memcpy(__dst, __src, 0x213uLL);
  v5 = sub_1000642CC((uint64_t)__dst);
  if ((__dst[12].n128_u8[0] & 1) != 0)
  {
    *(double *)v6.i64 = simd_float4x4.forward.getter(v5);
    v7 = vmul_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)), (float32x2_t)0xC0000000C0000000);
  }
  else
  {
    *(double *)v8.i64 = simd_float4x4.position.getter(__dst[8], __dst[9], __dst[10], __dst[11]);
    v7 = (float32x2_t)vzip1_s32(*(int32x2_t *)v8.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  }
  ariadne_trace(_:_:_:_:_:)(727056560, 0, 0, 0, 0);
  v9 = (void *)sub_10008F8B8();
  if (!v9)
    goto LABEL_106;
  v10 = v9;
  if (!*(_QWORD *)(v1 + qword_10047DFE8))
  {

    goto LABEL_106;
  }
  swift_retain();
  v11 = (unint64_t)DepthProcessor.getJasperPointsPosition(requestedMinConfidence:currentFrame:)(0.99, (ARFrame)v10);
  if (!v11)
  {

    swift_release();
    goto LABEL_106;
  }
  v12 = v11;
  v87 = v10;
  v86 = a1;
  v13 = *(_QWORD *)(v11 + 16);
  if (v13)
  {
    v14 = (int32x2_t *)(v11 + 32);
    v15 = _swiftEmptyArrayStorage;
    do
    {
      v19 = vsub_f32(v7, (float32x2_t)vzip1_s32(*v14, (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v14->i8, *(int8x16_t *)v14->i8, 8uLL)));
      if (vaddv_f32(vmul_f32(v19, v19)) < 0.5625)
      {
        v88 = *(_OWORD *)v14->i8;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
        __src[0] = v15;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000A5698(0, *((_QWORD *)v15 + 2) + 1, 1);
          v15 = (double *)__src[0];
        }
        v17 = *((_QWORD *)v15 + 2);
        v16 = *((_QWORD *)v15 + 3);
        v18 = v88;
        if (v17 >= v16 >> 1)
        {
          sub_1000A5698((char *)(v16 > 1), v17 + 1, 1);
          v18 = v88;
          v15 = (double *)__src[0];
        }
        *((_QWORD *)v15 + 2) = v17 + 1;
        *(_OWORD *)&v15[2 * v17 + 4] = v18;
      }
      v14 += 2;
      --v13;
    }
    while (v13);
  }
  else
  {
    v15 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v12);
  v22 = 0;
  v23 = *((_QWORD *)v15 + 2);
  v24 = _swiftEmptyArrayStorage;
  while (1)
  {
    v25 = v22;
    if (v22 == v23)
      break;
    while (1)
    {
      if (v25 >= *((_QWORD *)v15 + 2))
      {
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        __break(1u);
        swift_release();
        __break(1u);
        return;
      }
      v89 = *(__n128 *)&v15[2 * v25 + 4];
      MeasureCore.shared.unsafeMutableAddressor(v21);
      swift_retain();
      v26 = MeasureCore.mlLabel(of:kernelRadius:)(0, v89);
      swift_release();
      if (v26 != 33)
      {
        swift_retain();
        v27 = (float32x2_t)MeasureCore.mlNormal(of:)(v89.n128_f64[0]);
        v29 = v28;
        v31 = v30;
        v32 = swift_release();
        if ((v31 & 1) == 0 && v26 == 1)
          break;
      }
      if (v23 == ++v25)
        goto LABEL_35;
    }
    v21 = SIMD3<>.up.unsafeMutableAddressor(v32);
    v33 = *(float *)v21;
    v34 = *(float *)(v21 + 4);
    v35 = *(float *)(v21 + 8);
    if (qword_10047A8D8 != -1)
    {
      v85 = *(float *)(v21 + 8);
      v21 = swift_once(&qword_10047A8D8, sub_10005018C);
      v35 = v85;
    }
    *(float32x2_t *)v36.f32 = v27;
    v36.i64[1] = v29;
    v22 = v25 + 1;
    if (*(float *)&dword_1004AF214 < (float)(vmuls_lane_f32(v35, v36, 2)
                                            + (float)((float)(v33 * v27.f32[0]) + vmuls_lane_f32(v34, v27, 1))))
    {
      v21 = swift_isUniquelyReferenced_nonNull_native(v24);
      v92 = v24;
      if ((v21 & 1) == 0)
      {
        v21 = (uint64_t)sub_1000A5698(0, *((_QWORD *)v24 + 2) + 1, 1);
        v24 = v92;
      }
      v37 = v89;
      v39 = *((_QWORD *)v24 + 2);
      v38 = *((_QWORD *)v24 + 3);
      if (v39 >= v38 >> 1)
      {
        v21 = (uint64_t)sub_1000A5698((char *)(v38 > 1), v39 + 1, 1);
        v37 = v89;
        v24 = v92;
      }
      v22 = v25 + 1;
      *((_QWORD *)v24 + 2) = v39 + 1;
      *(__n128 *)&v24[2 * v39 + 4] = v37;
    }
  }
LABEL_35:
  swift_release();
  v40 = *((_QWORD *)v24 + 2);
  if (v40)
  {
    v92 = _swiftEmptyArrayStorage;
    sub_1000A567C(0, v40, 0);
    v41 = 0;
    v42 = _swiftEmptyArrayStorage;
    v43 = _swiftEmptyArrayStorage[2];
    do
    {
      v44 = *(_OWORD *)&v24[2 * v41 + 4];
      v92 = v42;
      v45 = *((_QWORD *)v42 + 3);
      if (*(_QWORD *)&v43 >= v45 >> 1)
      {
        v90 = DWORD1(v44);
        sub_1000A567C((char *)(v45 > 1), *(_QWORD *)&v43 + 1, 1);
        DWORD1(v44) = v90;
        v42 = v92;
      }
      ++v41;
      *((_QWORD *)v42 + 2) = *(_QWORD *)&v43 + 1;
      *((_DWORD *)v42 + (*(_QWORD *)&v43)++ + 8) = DWORD1(v44);
    }
    while (v40 != v41);
    swift_release();
  }
  else
  {
    swift_release();
    v42 = _swiftEmptyArrayStorage;
  }
  v92 = v42;
  swift_bridgeObjectRetain(v42);
  sub_1000500B8((uint64_t *)&v92, (uint64_t (*)(uint64_t))sub_1000A7958, (uint64_t (*)(_QWORD *))sub_100061CA4);
  swift_bridgeObjectRelease(v42);
  v46 = (char *)v92;
  __src[0] = v92;
  v47 = *((_QWORD *)v92 + 2);
  if (v47 > 0x28)
  {
    sub_1000641C0(0, v47 - 40);
    v46 = (char *)__src[0];
    v47 = *(_QWORD *)(__src[0] + 16);
  }
  if (v47 < 6)
  {
    swift_release();

    swift_bridgeObjectRelease(v46);
    goto LABEL_106;
  }
  v48 = (char *)_swiftEmptyArrayStorage;
  v49 = 5;
  do
  {
    if (!*((_QWORD *)v46 + 2))
      goto LABEL_109;
    if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) != 0)
    {
      v50 = *((_QWORD *)v46 + 2);
      if (!v50)
        goto LABEL_110;
    }
    else
    {
      v46 = sub_100028778((uint64_t)v46);
      v50 = *((_QWORD *)v46 + 2);
      if (!v50)
        goto LABEL_110;
    }
    v51 = v50 - 1;
    v52 = *(_DWORD *)&v46[4 * v51 + 32];
    *((_QWORD *)v46 + 2) = v51;
    if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
      v48 = sub_10005F240(0, *((_QWORD *)v48 + 2) + 1, 1, v48);
    v54 = *((_QWORD *)v48 + 2);
    v53 = *((_QWORD *)v48 + 3);
    v55 = v54 + 1;
    if (v54 >= v53 >> 1)
      v48 = sub_10005F240((char *)(v53 > 1), v54 + 1, 1, v48);
    *((_QWORD *)v48 + 2) = v55;
    *(_DWORD *)&v48[4 * v54 + 32] = v52;
    --v49;
  }
  while (v49);
  v56 = *((_QWORD *)v46 + 2);
  if (v56)
  {
    while (1)
    {
      v57 = v56 - 1;
      v58 = *(float *)&v46[4 * v57 + 32];
      *((_QWORD *)v46 + 2) = v57;
      v59 = *((_QWORD *)v48 + 2);
      if (v59)
      {
        v60 = (float *)(v48 + 32);
        v61 = 0.0;
        v62 = *((_QWORD *)v48 + 2);
        do
        {
          v63 = *v60++;
          v61 = v61 + v63;
          --v62;
        }
        while (v62);
      }
      else
      {
        v61 = 0.0;
      }
      if (vabds_f32(v61 / (float)v59, v58) >= 0.15)
        break;
      v64 = *((_QWORD *)v48 + 3);
      v55 = v59 + 1;
      if (v59 >= v64 >> 1)
        v48 = sub_10005F240((char *)(v64 > 1), v59 + 1, 1, v48);
      *((_QWORD *)v48 + 2) = v55;
      *(float *)&v48[4 * v59 + 32] = v58;
      v56 = *((_QWORD *)v46 + 2);
      if (!v56)
        goto LABEL_71;
    }
    if (!v59)
    {
      swift_bridgeObjectRetain(v48);
      v66 = v48;
      goto LABEL_105;
    }
    v55 = *((_QWORD *)v48 + 2);
  }
LABEL_71:
  swift_bridgeObjectRetain(v48);
  v65 = 0;
  v66 = v48;
  do
  {
    v69 = *((_QWORD *)v66 + 2);
    if (!v69)
      goto LABEL_75;
    v70 = (float *)(v66 + 32);
    v71 = 0.0;
    v72 = *((_QWORD *)v66 + 2);
    do
    {
      v73 = *v70++;
      v71 = v71 + v73;
      --v72;
    }
    while (v72);
    v74 = *(float *)&v48[4 * v65 + 32];
    if (vabds_f32(v74, v71 / (float)v69) <= 0.02)
      goto LABEL_75;
    if (*((float *)v66 + 8) == v74)
    {
      v67 = 0;
      if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
        goto LABEL_95;
    }
    else
    {
      if (v69 == 1)
        goto LABEL_75;
      if (*((float *)v66 + 9) == v74)
      {
        v67 = 1;
        if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
          goto LABEL_95;
        v67 = 1;
      }
      else
      {
        if (v69 == 2)
          goto LABEL_75;
        if (*((float *)v66 + 10) != v74)
        {
          v75 = 0;
          while (v69 - 3 != v75)
          {
            v76 = *(float *)&v66[4 * v75++ + 44];
            if (v76 == v74)
            {
              v67 = v75 + 2;
              if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) != 0)
                goto LABEL_73;
              goto LABEL_95;
            }
          }
          goto LABEL_75;
        }
        v67 = 2;
        if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
        {
LABEL_95:
          v66 = sub_100028778((uint64_t)v66);
          goto LABEL_73;
        }
        v67 = 2;
      }
    }
LABEL_73:
    v68 = *((_QWORD *)v66 + 2);
    if (v67 >= v68)
      goto LABEL_111;
    v69 = v68 - 1;
    memmove(&v66[4 * v67 + 32], &v66[4 * v67 + 36], 4 * (v68 - 1 - v67));
    *((_QWORD *)v66 + 2) = v69;
LABEL_75:
    ++v65;
  }
  while (v65 != v55);
  if ((unint64_t)v69 <= 5)
  {
LABEL_105:
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v66);
    swift_release();

    goto LABEL_106;
  }
  v77 = 0;
  v78 = v69 & 0xFFFFFFFFFFFFFFFELL;
  v79 = 0.0;
  do
  {
    v79 = (float)(v79 + *(float *)&v66[4 * v77 + 32]) + *(float *)&v66[4 * v77 + 36];
    v77 += 2;
  }
  while (v78 != v77);
  v80 = v69 - v78;
  if (v80)
  {
    v81 = (float *)&v66[8 * ((unint64_t)v69 >> 1) + 32];
    do
    {
      v82 = *v81++;
      v79 = v79 + v82;
      --v80;
    }
    while (v80);
  }
  swift_bridgeObjectRelease(v66);
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v48);
  v83 = simd_float4x4.position.getter(v86[21], v86[22], v86[23], v86[24]);
  v91 = *((float *)&v83 + 1);
  swift_release();

  if (vabds_f32(v79 / (float)v69, v91) >= 0.85)
  {
    ariadne_trace(_:_:_:_:_:)(727056564, 0, 0, 0, 0);
    v84 = 0;
    goto LABEL_107;
  }
LABEL_106:
  ariadne_trace(_:_:_:_:_:)(727056564, 0, 0, 0, 0);
  v84 = 1;
LABEL_107:
  __dst[0].n128_u8[0] = v84;
}

uint64_t sub_1000558B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t result;
  _QWORD v8[2];
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + qword_10047DF68);
  v4 = swift_retain(v3);
  Synchronized.wrappedValue.getter(v8, v4);
  swift_release(v3);
  v5 = v9;
  v6 = RingBuffer<A>.average()(v8[0], v8[1], v9);
  result = swift_bridgeObjectRelease(v5);
  *(float *)(a1 + 148) = v6;
  *(_BYTE *)(a1 + 152) = 0;
  return result;
}

uint64_t sub_100055924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v18 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  v9 = (void *)static OS_dispatch_queue.main.getter();
  v10 = swift_allocObject(&unk_1004412E0, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v1);
  aBlock[4] = sub_1000645D4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100441500;
  v11 = _Block_copy(aBlock);
  v12 = swift_release();
  static DispatchQoS.unspecified.getter(v12);
  aBlock[0] = _swiftEmptyArrayStorage;
  v13 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v15 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v14, v15, v2, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100055B3C(double **a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  Swift::String v12;
  void *object;
  void *v14;
  double v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  Swift::String aBlock;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  double *v40;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)sub_10008F8B8();
  if (v11)
  {
    v30 = v1;
    v31 = v8;
    v33 = v4;
    v34 = v11;
    v32 = v7;
    if (qword_10047AA20 != -1)
      swift_once(&qword_10047AA20, sub_1000E1068);
    aBlock._countAndFlagsBits = 0;
    aBlock._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease(aBlock._object);
    aBlock._countAndFlagsBits = 0xD000000000000016;
    aBlock._object = (void *)0x80000001003DB2B0;
    v40 = *a1;
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
    object = v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(object);
    v14 = aBlock._object;
    Log.debug(_:isPrivate:)(aBlock, 0);
    *(_QWORD *)&v15 = swift_bridgeObjectRelease(v14).n128_u64[0];
    v16 = objc_msgSend(v34, "capturedImage", v15);
    v17 = swift_allocObject(&unk_100441538, 544, 15);
    v18 = v30;
    *(_QWORD *)(v17 + 16) = v30;
    memcpy((void *)(v17 + 32), a1, 0x200uLL);
    v19 = objc_allocWithZone((Class)VNDetectFaceRectanglesRequest);
    v38 = sub_100064800;
    v39 = v17;
    aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    v36 = sub_100157FEC;
    v37 = &unk_100441550;
    v20 = _Block_copy(&aBlock);
    v18;
    sub_1000471E8((uint64_t)a1);
    v21 = objc_msgSend(v19, "initWithCompletionHandler:", v20, swift_release().n128_f64[0]);
    _Block_release(v20);
    v22 = swift_allocObject(&unk_100441588, 40, 7);
    *(_QWORD *)(v22 + 16) = v16;
    *(_DWORD *)(v22 + 24) = 1;
    *(_QWORD *)(v22 + 32) = v21;
    v38 = sub_10006484C;
    v39 = v22;
    aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    v36 = sub_10003ECA0;
    v37 = &unk_1004415A0;
    v23 = _Block_copy(&aBlock);
    v24 = v16;
    v25 = v21;
    static DispatchQoS.unspecified.getter(v26);
    v40 = _swiftEmptyArrayStorage;
    v27 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v28 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v29 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v28, v29, v3, v27);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v23);
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v32);
    swift_release();
  }
}

void sub_100055F10(__n128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(_QWORD *__return_ptr, __n128);
  __n128 v12;
  uint64_t v13;
  Swift::String v14;
  void *object;
  void *v16;
  void (*v17)(_OWORD *__return_ptr, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  char v30;
  uint64_t (*v31)(__n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  Swift::String v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  Swift::String v57;
  void *v58;
  void *v59;
  float32x4_t v60;
  void (*v61)(_OWORD *__return_ptr, __n128);
  __n128 v62;
  float32x4_t v63;
  uint64_t v64;
  float32x4_t v65;
  uint64_t v66;
  Swift::String v67;
  float32x4_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  _OWORD v80[34];
  Swift::String v81;
  _QWORD v82[68];
  char v83[48];
  Swift::String v84[2];
  char v85;
  _BYTE v86[544];

  v3 = v2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = qword_10047DED8;
  v11 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v2 + qword_10047DED8) + 144);
  v12 = swift_retain();
  v11(v82, v12);
  swift_release();
  memcpy(v86, v82, 0x213uLL);
  sub_1000642CC((uint64_t)v86);
  if (v86[2] == 1)
  {
    if (!sub_100056BDC(0.0))
      return;
    v70 = a2;
    v71 = v7;
    v69 = v6;
    if (qword_10047AA20 != -1)
      swift_once(&qword_10047AA20, sub_1000E1068);
    *(_QWORD *)&v80[0] = 0;
    *((_QWORD *)&v80[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease(*((_QWORD *)&v80[0] + 1));
    v84[0]._countAndFlagsBits = 0xD000000000000017;
    v84[0]._object = (void *)0x80000001003DB320;
    swift_retain();
    StateValue.wrappedValue.getter(v80, v13);
    swift_release();
    memcpy(&v81, v80, 0x200uLL);
    sub_100012C00((uint64_t)&v81);
    *(_QWORD *)&v80[0] = v81._countAndFlagsBits;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    v16 = v84[0]._object;
    Log.debug(_:isPrivate:)(v84[0], 0);
    swift_bridgeObjectRelease(v16);
    ariadne_trace(_:_:_:_:_:)(727056568, 0, 0, 0, 0);
    v17 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v3 + v10) + 144);
    v18 = swift_retain();
    v17(v80, v18);
    swift_release();
    memcpy(v82, v80, 0x213uLL);
    sub_1000642CC((uint64_t)v82);
    if ((v82[49] & 1) != 0)
      goto LABEL_32;
    sub_10005A448(a1, v83, *(double *)&v82[45], *(double *)&v82[46], *(double *)&v82[47], *(double *)&v82[48]);
    sub_100012C58((uint64_t)v83, (uint64_t)v84, &qword_10047E5A8);
    if ((v85 & 1) != 0)
      goto LABEL_32;
    v67 = v84[1];
    v68 = (float32x4_t)v84[0];
    sub_100058CB4(1, (__n128)v84[0]);
    v20 = v19;
    v22 = v21;
    v24 = v23;
    sub_100054F44(a1);
    if ((v25 & 0x100000000) == 0)
    {
      v66 = v22;
      v26 = v20;
      v27 = *(float *)&v25;
      v28 = v68.f32[1];
LABEL_9:
      v29 = v28 - v27;
      v79 = v28 - v27;
      v30 = 1;
LABEL_10:
      v31 = *(uint64_t (**)(__n128))(**(_QWORD **)(v3 + v10) + 200);
      v32 = swift_retain();
      v33 = v31(v32);
      swift_release();
      v34 = swift_allocObject(&unk_1004415D8, 50, 15);
      *(float *)(v34 + 16) = v29;
      v35 = v66;
      *(_QWORD *)(v34 + 32) = v26;
      *(_QWORD *)(v34 + 40) = v35;
      *(_BYTE *)(v34 + 48) = v24 & 1;
      *(_BYTE *)(v34 + 49) = v30;
      (*(void (**)(void (*)(uint64_t), uint64_t))(*(_QWORD *)v33 + 416))(sub_10006486C, v34);
      swift_release();
      swift_release();
      v36 = v3 + qword_10047DF70;
      v37 = swift_beginAccess(v3 + qword_10047DF70, &v78, 0, 0);
      v38 = v71;
      v39 = v69;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v71 + 16))(v9, v36, v69, v37);
      v40 = v70;
      v41 = Date.timeIntervalSince(_:)(v9);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v39);
      if (v41 > 0.5)
      {
        sub_1000506A8(0xD000000000000015, (void *)0x80000001003DB3D0);
        swift_retain();
        swift_retain();
        Synchronized.wrappedValue.getter(v80, v42);
        sub_10000EDC8(&qword_10047E458);
        RingBuffer.clear()();
        v76 = v80[0];
        v77 = *(_QWORD *)&v80[1];
        Synchronized.wrappedValue.setter(&v76);
        swift_release();
        swift_release();
      }
      v43._countAndFlagsBits = 0xD000000000000020;
      v43._object = (void *)0x80000001003DB360;
      Log.debug(_:isPrivate:)(v43, 0);
      swift_beginAccess(&v79, &v76, 0, 0);
      v44 = v79;
      *(float *)v80 = v79;
      v80[1] = v68;
      v80[2] = v67;
      swift_retain();
      swift_retain();
      Synchronized.wrappedValue.getter(&v74, v45);
      v46 = sub_10000EDC8(&qword_10047E458);
      RingBuffer.append(_:)(v80, v46);
      v72 = v74;
      v73 = v75;
      Synchronized.wrappedValue.setter(&v72);
      swift_release();
      swift_release();
      v47 = sub_10005054C();
      if (v47)
      {
        v48 = (_QWORD *)v47;
        if (qword_10047AB68 != -1)
          swift_once(&qword_10047AB68, sub_10011E814);
        sub_10011C37C(v48, v44);

      }
      v49 = swift_beginAccess(v36, v80, 33, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v71 + 24))(v36, v40, v39, v49);
      swift_endAccess(v80);
      swift_retain();
      swift_retain();
      Synchronized.wrappedValue.getter(v80, v50);
      swift_release();
      v51 = *(_QWORD *)&v80[1];
      v52 = *(_QWORD *)(*(_QWORD *)&v80[1] + 16);
      swift_release();
      swift_bridgeObjectRelease(v51);
      if (v52 == 8)
      {
        swift_retain();
        v53 = sub_10005E4B8();
        swift_release();
        if ((v53 & 0x100000000) == 0)
        {
          *(_QWORD *)&v80[0] = 0;
          *((_QWORD *)&v80[0] + 1) = 0xE000000000000000;
          if (*(float *)&v53 <= 0.1)
          {
            _StringGuts.grow(_:)(20);
            v55 = 0x80000001003DB390;
            v54 = 0xD000000000000012;
          }
          else
          {
            _StringGuts.grow(_:)(18);
            v54 = 0xD000000000000010;
            v55 = 0x80000001003DB3B0;
          }
          String.append(_:)(*(Swift::String *)&v54);
          Float.write<A>(to:)(v80, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(float *)&v53);
          v64 = *((_QWORD *)&v80[0] + 1);
          sub_1000506A8(*(uint64_t *)&v80[0], *((void **)&v80[0] + 1));
          swift_bridgeObjectRelease(v64);
        }
      }
      goto LABEL_32;
    }
    if ((v24 & 1) == 0)
    {
      v60.i64[0] = v20;
      v60.i64[1] = v22;
      v65 = v60;
      v61 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v3 + qword_10047DEE0) + 144);
      v62 = swift_retain();
      v61(v80, v62);
      swift_release();
      if ((BYTE8(v80[9]) & 1) == 0)
      {
        v66 = v22;
        v26 = v20;
        v27 = *((float *)&v80[9] + 1);
        v28 = v68.f32[1];
        if (*((float *)&v80[9] + 1) >= v65.f32[1])
        {
          v30 = 0;
          v29 = v68.f32[1] - v65.f32[1];
          v79 = v68.f32[1] - v65.f32[1];
          goto LABEL_10;
        }
        goto LABEL_9;
      }
      *(double *)v63.i64 = simd_float4x4.position.getter(a1[21], a1[22], a1[23], a1[24]);
      if (fabsf(COERCE_FLOAT(vsubq_f32(v65, v63).i32[1])) < 0.85)
      {
        v66 = v22;
        v26 = v20;
        v30 = 0;
        LODWORD(v29) = vsubq_f32(v68, v65).i32[1];
        v79 = v29;
        goto LABEL_10;
      }
    }
    sub_1000506A8(0xD000000000000012, (void *)0x80000001003DB340);
LABEL_32:
    ariadne_trace(_:_:_:_:_:)(727056572, 0, 0, 0, 0);
    return;
  }
  if (qword_10047AA20 != -1)
    swift_once(&qword_10047AA20, sub_1000E1068);
  v82[0] = 0;
  v82[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease(v82[1]);
  v81._countAndFlagsBits = 0xD00000000000002ALL;
  v81._object = (void *)0x80000001003DB2F0;
  swift_retain();
  StateValue.wrappedValue.getter(v80, v56);
  swift_release();
  memcpy(v82, v80, 0x200uLL);
  sub_100012C00((uint64_t)v82);
  *(_QWORD *)&v80[0] = v82[0];
  v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  v58 = v57._object;
  String.append(_:)(v57);
  swift_bridgeObjectRelease(v58);
  v59 = v81._object;
  Log.debug(_:isPrivate:)(v81, 0);
  swift_bridgeObjectRelease(v59);
}

BOOL sub_100056824(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  double v21;
  _QWORD v22[2];
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  char v29;

  v2 = v1;
  if ((a1 & 1) == 0)
  {
    v3 = *(_QWORD *)(v1 + qword_10047DF88);
    swift_retain(*(_QWORD *)(v2 + qword_10047DF88));
    Synchronized.wrappedValue.getter(v22, v4);
    swift_release(v3);
    v5 = *(_QWORD *)(*(_QWORD *)&v23 + 16);
    swift_bridgeObjectRelease(*(_QWORD *)&v23);
    if (!v5)
      return 0;
  }
  v6 = *(_QWORD *)(v2 + qword_10047E038);
  swift_retain(v6);
  Synchronized.wrappedValue.getter(v22, v7);
  swift_release(v6);
  if ((v29 & 1) == 0)
  {
    v9 = *(double *)v22;
    v10 = *(double *)&v22[1];
    v11 = v23;
    v12 = v24;
    v13 = v25;
    v14 = v26;
    v15 = v28;
    v21 = v27;
    v16 = COERCE_FLOAT32X2_T(SIMD2<>.init(_:)(*(double *)(v2 + qword_10047DF10) * 0.5, *(double *)(v2
                                                                                                 + qword_10047DF10
                                                                                                 + 8) * 0.5));
    v17 = COERCE_FLOAT32X2_T(SIMD2<>.init(_:)(v9, v10));
    SIMD2<>.init(_:)(v11, v12);
    v18 = COERCE_FLOAT32X2_T(SIMD2<>.init(_:)(v13, v14));
    *(double *)&v19 = SIMD2<>.init(_:)(v21, v15);
    return sub_10010E2D4(v16, v17, v18, v19);
  }
  else
  {
    return 0;
  }
}

BOOL sub_10005695C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int (*v19)(_BYTE *, uint64_t, uint64_t);
  uint64_t v20;
  double v21;
  void (*v22)(_BYTE *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  double v25;
  void (*v26)(_BYTE *, uint64_t);
  _BYTE v28[24];
  _BYTE v29[24];

  v1 = v0;
  v2 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  v3 = __chkstk_darwin(v2);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v7 = &v28[-v6];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __chkstk_darwin(v10);
  v15 = &v28[-v14];
  __chkstk_darwin(v13);
  v17 = &v28[-v16];
  v18 = v1 + qword_10047DF98;
  swift_beginAccess(v1 + qword_10047DF98, v29, 0, 0);
  sub_1000644F8(v18, (uint64_t)v7, (uint64_t *)&unk_10047E440);
  v19 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48);
  if (v19(v7, 1, v8) == 1)
  {
    sub_100036600((uint64_t)v7, (uint64_t *)&unk_10047E440);
  }
  else
  {
    v20 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v17, v7, v8);
    Date.init()(v20);
    v21 = Date.timeIntervalSince(_:)(v17);
    v22 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
    v22(v15, v8);
    v22(v17, v8);
    if (v21 < 0.5)
      return 1;
  }
  v23 = v1 + qword_10047DFA0;
  swift_beginAccess(v23, v28, 0, 0);
  sub_1000644F8(v23, (uint64_t)v5, (uint64_t *)&unk_10047E440);
  if (v19(v5, 1, v8) != 1)
  {
    v24 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v12, v5, v8);
    Date.init()(v24);
    v25 = Date.timeIntervalSince(_:)(v12);
    v26 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
    v26(v15, v8);
    v26(v12, v8);
    return v25 < 0.5;
  }
  sub_100036600((uint64_t)v5, (uint64_t *)&unk_10047E440);
  return 0;
}

BOOL sub_100056BDC(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = qword_10047DF88;
  v5 = *(_QWORD *)(v1 + qword_10047DF88);
  v6 = swift_retain(v5);
  Synchronized.wrappedValue.getter(&v21, v6);
  swift_release(v5);
  v7 = *(_QWORD *)(v23 + 16);
  swift_bridgeObjectRelease(v23);
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(v2 + v4);
  v9 = swift_retain(v8);
  Synchronized.wrappedValue.getter(&v21, v9);
  swift_release(v8);
  v10 = v23;
  v11 = RingBuffer<A>.average()(v21, v22, v23);
  swift_bridgeObjectRelease(v10);
  if (v11 < (float)(a1 + 1.5))
    return 0;
  v12 = *(_QWORD *)(v2 + v4);
  v13 = swift_retain(v12);
  Synchronized.wrappedValue.getter(&v21, v13);
  swift_release(v12);
  v14 = v23;
  v15 = RingBuffer<A>.average()(v21, v22, v23);
  swift_bridgeObjectRelease(v14);
  if ((float)(3.0 - a1) < v15)
    return 0;
  v17 = *(_QWORD *)(v2 + v4);
  v18 = swift_retain(v17);
  Synchronized.wrappedValue.getter(&v21, v18);
  swift_release(v17);
  v19 = v23;
  v20 = RingBuffer<A>.average()(v21, v22, v23);
  swift_bridgeObjectRelease(v19);
  return v20 <= 5.0;
}

void sub_100056D24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  double (*v21)(void);
  _QWORD *v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  _QWORD v50[64];
  _OWORD v51[32];
  double v52[64];
  char v53[32];

  *(_QWORD *)&v49 = a1;
  v2 = sub_10000EDC8(&qword_10047E558);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v41 - v6;
  v8 = sub_10000EDC8(&qword_10047E080);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v41 - v13;
  v47 = v1;
  v15 = v1 + qword_10047DF20;
  swift_beginAccess(v1 + qword_10047DF20, v53, 0, 0);
  sub_1000644F8(v15, (uint64_t)v7, &qword_10047E558);
  v48 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_100036600((uint64_t)v7, &qword_10047E558);
    return;
  }
  v46 = v5;
  v16 = *(int *)(v8 + 48);
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v14, v7, v17);
  v19 = *(_QWORD **)&v7[v16];
  *(_QWORD *)&v14[v16] = v19;
  if (Date.timeIntervalSince(_:)(v14) >= 3.0)
  {
    sub_100036600((uint64_t)v14, &qword_10047E080);
    v40 = (uint64_t)v46;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v46, 1, 1, v8);
    swift_beginAccess(v15, v52, 33, 0);
    sub_10006494C(v40, v15, &qword_10047E558);
    v39 = v52;
    goto LABEL_10;
  }
  *(_QWORD *)&v49 = type metadata accessor for MeasureCamera(0);
  v20 = *(int *)(v8 + 48);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v12, v14, v17);
  *(_QWORD *)&v12[v20] = v19;
  v21 = *(double (**)(void))((swift_isaMask & *v19) + 0x210);
  v22 = v19;
  v23.n128_f64[0] = v21();
  v44 = v24;
  v45 = v23;
  v42 = v26;
  v43 = v25;

  v27.n128_f64[0] = simd_float4x4.position.getter(v45, v44, v43, v42);
  v45 = v27;
  swift_retain();
  StateValue.wrappedValue.getter(v50, v28);
  swift_release();
  memcpy(v51, v50, sizeof(v51));
  sub_100012C00((uint64_t)v51);
  v43 = (__n128)v51[12];
  v44 = (__n128)v51[11];
  v41 = (__n128)v51[14];
  v42 = (__n128)v51[13];
  swift_retain();
  StateValue.wrappedValue.getter(v50, v29);
  swift_release();
  memcpy(v52, v50, sizeof(v52));
  v30 = sub_100012C00((uint64_t)v52);
  *(double *)&v31 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v30, v45, v44, v43, v42, v41, v52[4]);
  v49 = v31;
  v32 = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v12, v17);
  v33 = CGPoint.init(xy:)(v32);
  v35 = v33;
  v36 = v34;
  if (qword_10047B190 != -1)
  {
    *(double *)&v49 = v33;
    v47 = v34;
    swift_once(&qword_10047B190, sub_1001C81CC);
    v36 = v47;
    v35 = *(double *)&v49;
  }
  if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
  {
    __break(1u);
    return;
  }
  v37 = CGRectContainsPoint(*(CGRect *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48), *(CGPoint *)&v35);
  sub_100036600((uint64_t)v14, &qword_10047E080);
  v38 = (uint64_t)v46;
  if (!v37)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v46, 1, 1, v8);
    swift_beginAccess(v15, v50, 33, 0);
    sub_10006494C(v38, v15, &qword_10047E558);
    v39 = (double *)v50;
LABEL_10:
    swift_endAccess(v39);
  }
}

void sub_100057134(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v6;

  v6 = a4 & 0xFE;
  if (v6 != 2)
  {
    sub_1000506A8(0xD000000000000011, (void *)0x80000001003DB070);
    sub_100053698();
  }
  sub_1000571A0(v6 != 2);
  *(_BYTE *)(a3 + qword_1004AF218) = a4;
}

double sub_1000571A0(char a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  double *v21;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10047AAD8 != -1)
    swift_once(&qword_10047AAD8, sub_1000EBDC8);
  v10 = (void *)qword_1004AF630;
  v11 = swift_allocObject(&unk_100441240, 25, 7);
  *(_QWORD *)(v11 + 16) = v1;
  *(_BYTE *)(v11 + 24) = a1 & 1;
  aBlock[4] = sub_10005EDFC;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100441258;
  v12 = _Block_copy(aBlock);
  v13 = v10;
  v14 = v1;
  static DispatchQoS.unspecified.getter(v15);
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v18 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_1000573C8(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_BYTE *)(a1 + 392) = 1;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_BYTE *)(a1 + 192) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_BYTE *)(a1 + 352) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_BYTE *)(a1 + 432) = 1;
  *(_DWORD *)(a1 + 452) = 0;
  *(_BYTE *)(a1 + 456) = 1;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 480) = 1;
  return result;
}

uint64_t sub_100057438(void *a1, uint64_t a2, void *a3)
{
  id v6;
  unint64_t v7;
  id v8;
  Class isa;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Class v14;
  double v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v22;

  ariadne_trace(_:_:_:_:_:)(727056544, 0, 0, 0, 0);
  v6 = a1;
  v7 = sub_1000C77CC((uint64_t)_swiftEmptyArrayStorage);
  v8 = objc_allocWithZone((Class)VNImageRequestHandler);
  type metadata accessor for VNImageOption(0);
  sub_10000C4B0(&qword_10047B640, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1003B079C);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(v8, "initWithCVPixelBuffer:orientation:options:", v6, a2, isa, swift_bridgeObjectRelease(v7).n128_f64[0]);

  v11 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1003B0F00;
  *(_QWORD *)(v12 + 32) = a3;
  v22 = (id)v12;
  specialized Array._endMutation()(v12);
  sub_100018148(0, &qword_10047E5A0, VNRequest_ptr);
  v13 = a3;
  v14 = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v15 = swift_bridgeObjectRelease(v22).n128_u64[0];
  v22 = 0;
  LODWORD(a2) = objc_msgSend(v10, "performRequests:error:", v14, &v22, v15);

  v16 = v22;
  if ((_DWORD)a2)
  {
    v17 = v22;
  }
  else
  {
    v18 = v22;
    v19 = _convertNSErrorToError(_:)(v16);

    swift_willThrow(v20);
    swift_errorRelease(v19);
  }
  return ariadne_trace(_:_:_:_:_:)(727056548, 0, 0, 0, 0);
}

void sub_100057654(_DWORD *a1, void *a2, unint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *__return_ptr, __n128);
  __n128 v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char **v39;
  unint64_t v40;
  id v41;
  BOOL v42;
  unint64_t v43;
  const char *v44;
  double v45;
  CGFloat v46;
  double v47;
  CGFloat v48;
  double v49;
  CGFloat v50;
  double v51;
  CGFloat v52;
  CGFloat x;
  double y;
  double height;
  double v56;
  uint64_t v57;
  double Width;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  double *v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  double *v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  double *v77;
  double *v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  double *v84;
  Swift::OpaquePointer v85;
  unint64_t v86;
  uint64_t v87;
  __n128 *v88;
  __n128 v89;
  uint64_t v90;
  float *v91;
  uint64_t v92;
  double v93;
  float v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  double (*v108)(void);
  _QWORD *v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  void (*v117)(char *, unint64_t);
  char *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char v123;
  __n128 v124;
  void (*v125)(char *, uint64_t, uint64_t, unint64_t);
  uint64_t v126;
  double v127;
  double v128;
  double v129;
  _BOOL8 v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x2_t v134;
  double v135;
  double v136;
  float32x2_t v137;
  char v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  void *v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  float v151;
  CGFloat v152;
  id v153;
  unint64_t v154;
  unint64_t v155;
  __n128 v156;
  double *v157;
  __n128 *v158;
  unint64_t v159;
  double *v160;
  double *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  void (*v171)(_BYTE *__return_ptr, __n128);
  __n128 v172;
  uint64_t v173;
  id v174;
  void *v175;
  uint64_t v176;
  _QWORD *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  __int128 v182;
  __int128 v183;
  int v184;
  char v185;
  id v186;
  uint64_t v187;
  char *v188;
  double v189;
  void (*v190)(char *, unint64_t);
  void *v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  id v202;
  double v203;
  CGFloat v204;
  double v205;
  CGFloat v206;
  double v207;
  CGFloat v208;
  double v209;
  CGFloat v210;
  CGFloat v211;
  CGFloat v212;
  CGFloat v213;
  CGFloat v214;
  __n128 v215;
  __n128 v216;
  __n128 v217;
  __n128 v218;
  _UNKNOWN **v219;
  float32x4_t *v220;
  BOOL v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t (*v232)(__n128);
  __n128 v233;
  uint64_t v234;
  uint64_t v235;
  __n128 v236;
  unint64_t v237;
  __int128 v238;
  uint64_t v239;
  __int128 v240;
  uint64_t v241;
  __int128 v242;
  uint64_t v243;
  __n128 v244;
  __n128 v245;
  void (*v246)(void (*)(uint64_t), uint64_t);
  id v247;
  uint64_t v248;
  Swift::String v249;
  void *object;
  void *v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t (*v256)(__n128);
  __n128 v257;
  uint64_t v258;
  CGFloat *v259;
  float32x4_t v260;
  char *v261;
  double v262;
  void (*v263)(char *, unint64_t);
  _DWORD *v264;
  double v265;
  char *v266;
  char *v267;
  char *v268;
  uint64_t v269;
  char *v270;
  char *v271;
  double *v272;
  double *v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  char *v281;
  char *v282;
  uint64_t v283;
  __n128 v284;
  __n128 v285;
  __n128 v286;
  float32x4_t v287;
  float32x4_t v288;
  __n128 v289;
  __n128 v290;
  uint64_t v291;
  __n128 v292;
  __n128 v293;
  __n128 v294;
  _DWORD *v295;
  __n128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  _QWORD v301[64];
  Swift::String v302;
  uint64_t v303;
  _BYTE v304[531];
  _OWORD v305[3];
  _OWORD v306[3];
  __n128 v307[35];
  CGRect v308;
  CGRect v309;
  CGRect v310;
  CGRect v311;
  CGRect v312;
  CGRect v313;

  v283 = a4;
  v294.n128_u64[0] = a3;
  v293.n128_u64[0] = type metadata accessor for Date(0);
  v291 = *(_QWORD *)(v293.n128_u64[0] - 8);
  v8 = __chkstk_darwin(v293.n128_u64[0]);
  v10 = (char *)&v266 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v268 = (char *)&v266 - v12;
  __chkstk_darwin(v11);
  v281 = (char *)&v266 - v13;
  v14 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  v15 = __chkstk_darwin(v14);
  v270 = (char *)&v266 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v267 = (char *)&v266 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v266 - v19;
  v21 = sub_10000EDC8(&qword_10047E558);
  __chkstk_darwin(v21);
  v23 = (char *)&v266 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v290.n128_u64[0] = sub_10000EDC8(&qword_10047E080);
  v289.n128_u64[0] = *(_QWORD *)(v290.n128_u64[0] - 8);
  v24 = __chkstk_darwin(v290.n128_u64[0]);
  v280 = (char *)&v266 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v279 = (char *)&v266 - v26;
  ariadne_trace(_:_:_:_:_:)(727056552, 0, 0, 0, 0);
  v269 = qword_10047DED8;
  v27 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)((char *)a1 + qword_10047DED8) + 144);
  v28 = swift_retain();
  v27(v304, v28);
  swift_release();
  memcpy(v307, v304, 0x213uLL);
  v29 = objc_msgSend(a2, "results");
  if (!v29)
    goto LABEL_57;
  v30 = v29;
  v31 = sub_100018148(0, (unint64_t *)&unk_1004866E0, VNObservation_ptr);
  v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);

  v33 = sub_100152980(v32);
  v34 = v32;
  v35 = (uint64_t)v33;
  swift_bridgeObjectRelease(v34);
  if (!v35)
  {
LABEL_57:
    sub_1000642CC((uint64_t)v307);
LABEL_113:
    ariadne_trace(_:_:_:_:_:)(727056556, 0, 0, 0, 0);
    return;
  }
  v36 = v35 & 0xFFFFFFFFFFFFFF8;
  v278 = v35 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)v35 >> 62)
    goto LABEL_84;
  v37 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  v38 = v281;
  v39 = &selRef_renderer_didAddNode_forAnchor_;
  v295 = a1;
  v276 = v20;
  v266 = v10;
  if (v37)
  {
    v10 = (char *)v37;
    v282 = (char *)a1 + qword_10047DF98;
    v272 = (double *)((char *)a1 + qword_10047DF10);
    v271 = (char *)a1 + qword_10047DF48;
    v292.n128_u64[0] = v35 & 0xC000000000000001;
    v288.i64[0] = (uint64_t)a1 + qword_10047DF20;
    swift_beginAccess((char *)a1 + qword_10047DF20, &v303, 0, 0);
    v40 = 0;
    v277 = v35 + 32;
    v273 = _swiftEmptyArrayStorage;
    v274 = v35;
    v275 = v10;
    while (1)
    {
      if (v292.n128_u64[0])
      {
        v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40, v35);
        v42 = __OFADD__(v40, 1);
        v43 = v40 + 1;
        if (v42)
          goto LABEL_82;
      }
      else
      {
        if (v40 >= *(_QWORD *)(v278 + 16))
          goto LABEL_83;
        v41 = *(id *)(v277 + 8 * v40);
        v42 = __OFADD__(v40, 1);
        v43 = v40 + 1;
        if (v42)
        {
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          if (v35 >= 0)
            v194 = v36;
          else
            v194 = v35;
          swift_bridgeObjectRetain(v35);
          v37 = _CocoaArrayWrapper.endIndex.getter(v194);
          swift_bridgeObjectRelease(v35);
          goto LABEL_5;
        }
      }
      v44 = v39[309];
      *(_QWORD *)&v298 = v41;
      objc_msgSend(v41, v44, v266);
      v46 = v45;
      v48 = v47;
      v50 = v49;
      v52 = v51;
      sub_100050310((CGFloat *)v305);
      *(_OWORD *)v304 = v305[0];
      *(_OWORD *)&v304[16] = v305[1];
      *(_OWORD *)&v304[32] = v305[2];
      v308.origin.x = v46;
      v308.origin.y = v48;
      v308.size.width = v50;
      v308.size.height = v52;
      v309 = CGRectApplyAffineTransform(v308, (CGAffineTransform *)v304);
      x = v309.origin.x;
      y = v309.origin.y;
      height = v309.size.height;
      *(CGFloat *)&v299 = v309.size.width;
      v56 = CGRect.center.getter(v309.origin.x, v309.origin.y, v309.size.width, v309.size.height);
      if (qword_10047B190 != -1)
        swift_once(&qword_10047B190, sub_1001C81CC);
      v57 = qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
      if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
        goto LABEL_119;
      *(_QWORD *)&v297 = v43;
      Width = CGRectGetWidth(*(CGRect *)(v57 + 48));
      v59 = x;
      v60 = x;
      v5 = y;
      v4 = height;
      CGRect.center.getter(v60, y, *(double *)&v299, height);
      if ((*(_BYTE *)(v57 + 80) & 1) != 0)
        goto LABEL_120;
      v62 = v56 * Width;
      v63 = v61 * CGRectGetHeight(*(CGRect *)(v57 + 48));
      v64 = -1;
      v65 = _swiftEmptyArrayStorage;
      do
      {
        v66 = static CGPoint.+ infix(_:_:)(v62, v63, (float)((float)v64 + (float)v64), -2.0);
        v68 = v67;
        if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
          v65 = sub_10005F7B4(0, *((_QWORD *)v65 + 2) + 1, 1, (uint64_t)v65);
        v70 = *((_QWORD *)v65 + 2);
        v69 = *((_QWORD *)v65 + 3);
        if (v70 >= v69 >> 1)
          v65 = sub_10005F7B4((double *)(v69 > 1), v70 + 1, 1, (uint64_t)v65);
        *((_QWORD *)v65 + 2) = v70 + 1;
        v71 = &v65[2 * v70];
        v71[4] = v66;
        *((_QWORD *)v71 + 5) = v68;
        v72 = static CGPoint.+ infix(_:_:)(v62, v63, (float)((float)v64 + (float)v64), 0.0);
        v74 = v73;
        v76 = *((_QWORD *)v65 + 2);
        v75 = *((_QWORD *)v65 + 3);
        if (v76 >= v75 >> 1)
          v65 = sub_10005F7B4((double *)(v75 > 1), v76 + 1, 1, (uint64_t)v65);
        *((_QWORD *)v65 + 2) = v76 + 1;
        v77 = &v65[2 * v76];
        v77[4] = v72;
        *((_QWORD *)v77 + 5) = v74;
        v79 = static CGPoint.+ infix(_:_:)(v62, v63, (float)((float)v64 + (float)v64), 2.0);
        v81 = v80;
        v83 = *((_QWORD *)v65 + 2);
        v82 = *((_QWORD *)v65 + 3);
        if (v83 >= v82 >> 1)
        {
          v78 = sub_10005F7B4((double *)(v82 > 1), v83 + 1, 1, (uint64_t)v65);
          v65 = v78;
        }
        *((_QWORD *)v65 + 2) = v83 + 1;
        v84 = &v65[2 * v83];
        v84[4] = v79;
        *((_QWORD *)v84 + 5) = v81;
        ++v64;
      }
      while (v64 != 2);
      MeasureCore.shared.unsafeMutableAddressor(v78);
      swift_retain();
      v85._rawValue = (void *)swift_bridgeObjectRetain(v65);
      v86 = (unint64_t)MeasureCore.adHitTestPositionOnly(screenPoints:frame:)(v85, (ARFrame)v294.n128_u64[0]);
      swift_release();
      swift_bridgeObjectRelease(v65);
      if (!v86)
        break;
      v88 = (__n128 *)SIMD3<>.zero.unsafeMutableAddressor(v87);
      v89 = *v88;
      v90 = *(_QWORD *)(v86 + 16);
      if (v90)
      {
        v91 = (float *)(v86 + 40);
        v92 = *(_QWORD *)(v86 + 16);
        v93 = v4;
        do
        {
          v95.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v89.n128_u64[0], *(float32x2_t *)(v91 - 2));
          v94 = *v91;
          v91 += 4;
          v95.n128_f32[2] = v89.n128_f32[2] + v94;
          v95.n128_u32[3] = 0;
          v89 = v95;
          --v92;
        }
        while (v92);
      }
      else
      {
        v95 = *v88;
        v93 = v4;
      }
      v296 = v95;
      v96 = swift_bridgeObjectRelease(v86);
      v96.n128_f32[0] = (float)v90;
      v97.n128_u64[0] = (unint64_t)vdiv_f32((float32x2_t)v296.n128_u64[0], (float32x2_t)vdup_lane_s32((int32x2_t)v96.n128_u64[0], 0));
      v97.n128_f32[2] = v296.n128_f32[2] / (float)v90;
      v97.n128_u32[3] = 0;
      v296 = v97;
      sub_1000644F8(v288.i64[0], (uint64_t)v23, &qword_10047E558);
      v98 = v290.n128_u64[0];
      if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v289.n128_u64[0] + 48))(v23, 1, v290.n128_u64[0]) == 1)
      {
        sub_100036600((uint64_t)v23, &qword_10047E558);
        a1 = v295;
      }
      else
      {
        v99 = v98;
        v100 = *(int *)(v98 + 48);
        v101 = v291;
        v102 = v279;
        v103 = v293.n128_u64[0];
        (*(void (**)(char *, char *, unint64_t))(v291 + 32))(v279, v23, v293.n128_u64[0]);
        v104 = *(_QWORD **)&v23[v100];
        *(_QWORD *)&v102[v100] = v104;
        v105 = *(int *)(v99 + 48);
        v106 = v23;
        v107 = v280;
        (*(void (**)(char *, char *, unint64_t))(v101 + 16))(v280, v102, v103);
        *(_QWORD *)&v107[v105] = v104;
        v108 = *(double (**)(void))((swift_isaMask & *v104) + 0x210);
        v109 = v104;
        v110.n128_f64[0] = v108();
        v286 = v111;
        v287 = (float32x4_t)v110;
        v284 = v113;
        v285 = v112;

        *(double *)v114.i64 = simd_float4x4.position.getter((__n128)v287, v286, v285, v284);
        v115 = vsubq_f32(v114, (float32x4_t)v296);
        v116 = vmulq_f32(v115, v115);
        v287 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 2), vaddq_f32(v116, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v116.f32, 1)));
        v117 = *(void (**)(char *, unint64_t))(v101 + 8);
        v38 = v281;
        v118 = v107;
        v23 = v106;
        v119 = v103;
        v10 = v275;
        v20 = v276;
        v117(v118, v119);
        v120 = (uint64_t)v102;
        v35 = v274;
        sub_100036600(v120, &qword_10047E080);
        a1 = v295;
        if (v287.f32[0] <= 0.0625)
        {

          swift_bridgeObjectRelease(v65);
          goto LABEL_8;
        }
      }
      sub_100058CB4(0, v296);
      if ((v123 & 1) != 0)
      {
        swift_bridgeObjectRelease(v65);
        Date.init()(v140);

        (*(void (**)(char *, _QWORD, uint64_t, unint64_t))(v291 + 56))(v20, 0, 1, v293.n128_u64[0]);
        v141 = (uint64_t)v282;
        swift_beginAccess(v282, v304, 33, 0);
        sub_10006494C((uint64_t)v20, v141, (uint64_t *)&unk_10047E440);
        swift_endAccess(v304);
        goto LABEL_8;
      }
      v124.n128_u64[0] = v121;
      v124.n128_u64[1] = v122;
      v287 = (float32x4_t)v124;
      v125 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(v291 + 56);
      v125(v20, 1, 1, v293.n128_u64[0]);
      v126 = (uint64_t)v282;
      swift_beginAccess(v282, v304, 33, 0);
      sub_10006494C((uint64_t)v20, v126, (uint64_t *)&unk_10047E440);
      swift_endAccess(v304);
      sub_1000598CC((uint64_t)v304, v59, v5, *(double *)&v299, v93, (__n128)v287);
      v4 = *(double *)v304;
      v5 = *(double *)&v304[8];
      *(_QWORD *)&v299 = *(_QWORD *)&v304[16];
      v287.i64[0] = *(_QWORD *)&v304[24];
      v286.n128_u64[0] = *(_QWORD *)&v304[32];
      v127 = *(double *)&v304[40];
      v128 = *(double *)&v304[48];
      v129 = *(double *)&v304[56];
      swift_bridgeObjectRelease(v65);
      if ((v307[12].n128_u8[0] & 1) == 0)
      {
        *(double *)v131.i64 = simd_float4x4.position.getter(v307[8], v307[9], v307[10], v307[11]);
        v132 = vsubq_f32(v131, (float32x4_t)v296);
        v133 = vmulq_f32(v132, v132);
        if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v133, 2), vaddq_f32(v133, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v133.f32, 1))).f32[0]) <= 0.25)
        {
          v138 = 1;
          v39 = &selRef_renderer_didAddNode_forAnchor_;
          v139 = 0.5;
LABEL_48:
          Date.init()(v130);
          v125(v20, 0, 1, v293.n128_u64[0]);
          v142 = (uint64_t)v271;
          swift_beginAccess(v271, v304, 33, 0);
          sub_10006494C((uint64_t)v20, v142, (uint64_t *)&unk_10047E440);
          *(_QWORD *)&v143 = swift_endAccess(v304).n128_u64[0];
          v144 = (void *)v298;
          objc_msgSend((id)v298, v39[309], v143);
          v149 = CGRect.center.getter(v145, v146, v147, v148);
          v151 = static CGPoint.distanceSq(_:_:)(v149, v150, 0.5, 0.5);
          objc_msgSend(v144, v39[309]);
          if (CGRectGetWidth(v310) <= v139)
          {
            objc_msgSend(v144, v39[309]);
            v152 = CGRectGetHeight(v311);
            a1 = v295;
            if (v152 <= v139)
            {
              v153 = v144;
              if ((swift_isUniquelyReferenced_nonNull_native(v273) & 1) == 0)
                v273 = sub_10005FBCC(0, *((_QWORD *)v273 + 2) + 1, 1, v273);
              v155 = *((_QWORD *)v273 + 2);
              v154 = *((_QWORD *)v273 + 3);
              v156 = v296;
              if (v155 >= v154 >> 1)
              {
                v160 = sub_10005FBCC((double *)(v154 > 1), v155 + 1, 1, v273);
                v156 = v296;
                v273 = v160;
              }
              v157 = v273;
              *((_QWORD *)v273 + 2) = v155 + 1;
              v158 = (__n128 *)&v157[14 * v155];
              v158[2].n128_u64[0] = (unint64_t)v153;
              v158[2].n128_f64[1] = v4;
              v158[3].n128_f64[0] = v5;
              v159 = v287.i64[0];
              v158[3].n128_u64[1] = v299;
              v158[4].n128_u64[0] = v159;
              v158[4].n128_u64[1] = v286.n128_u64[0];
              v158[5].n128_f64[0] = v127;
              v158[5].n128_f64[1] = v128;
              v158[6].n128_f64[0] = v129;
              v158[7] = v156;
              v158[8].n128_f32[0] = v151;
              v158[8].n128_u8[4] = v138;

              a1 = v295;
              v39 = &selRef_renderer_didAddNode_forAnchor_;
              v10 = v275;
            }
            else
            {

            }
          }
          else
          {

            a1 = v295;
          }
          goto LABEL_9;
        }
      }
      v134 = COERCE_FLOAT32X2_T(SIMD2<>.init(_:)(*v272 * 0.5, v272[1] * 0.5));
      v135 = v4;
      v136 = v5;
      v4 = SIMD2<>.init(_:)(v4, v5);
      SIMD2<>.init(_:)(*(double *)&v299, *(double *)v287.i64);
      v5 = SIMD2<>.init(_:)(v286.n128_f64[0], v127);
      *(double *)&v137 = SIMD2<>.init(_:)(v128, v129);
      v130 = sub_10010E2D4(v134, *(float32x2_t *)&v4, *(float32x2_t *)&v5, v137);
      v39 = &selRef_renderer_didAddNode_forAnchor_;
      if (v130)
      {
        v138 = 0;
        v139 = 0.5;
        v4 = v135;
        v5 = v136;
        goto LABEL_48;
      }

      a1 = v295;
LABEL_9:
      v40 = v297;
      if ((char *)v297 == v10)
        goto LABEL_59;
    }

    swift_bridgeObjectRelease(v65);
    a1 = v295;
LABEL_8:
    v39 = &selRef_renderer_didAddNode_forAnchor_;
    goto LABEL_9;
  }
  v273 = _swiftEmptyArrayStorage;
LABEL_59:
  swift_bridgeObjectRelease(v35);
  v161 = v273;
  v162 = v293.n128_u64[0];
  v163 = v291;
  if (!*((_QWORD *)v273 + 2))
  {
LABEL_66:
    swift_bridgeObjectRelease(v161);
    sub_1000642CC((uint64_t)v307);
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v163 + 56))(v20, 1, 1, v162);
    v169 = (uint64_t)a1 + qword_10047DFB0;
    swift_beginAccess((char *)a1 + qword_10047DFB0, v304, 33, 0);
    sub_10006494C((uint64_t)v20, v169, (uint64_t *)&unk_10047E440);
    swift_endAccess(v304);
    goto LABEL_113;
  }
  *(_QWORD *)v304 = v273;
  swift_bridgeObjectRetain_n(v273, 2);
  sub_1000500B8((uint64_t *)v304, (uint64_t (*)(uint64_t))sub_1000A796C, (uint64_t (*)(_QWORD *))sub_1000622F0);
  swift_bridgeObjectRelease(v161);
  v164 = *(_QWORD *)v304;
  v165 = *(_QWORD *)(*(_QWORD *)v304 + 16);
  v166 = (uint64_t)v270;
  if (!v165)
  {
    swift_release();
    v20 = v276;
    v161 = v273;
    goto LABEL_66;
  }
  v167 = 0;
  while (1)
  {
    v168 = *(_QWORD *)v304 + v167;
    if ((*(_BYTE *)(*(_QWORD *)v304 + v167 + 132) & 1) != 0)
      break;
    v167 += 112;
    if (!--v165)
      goto LABEL_76;
  }
  if (v167)
  {
    v170 = a1;
    a1 = (_DWORD *)(*(_QWORD *)v304 + v167);
    LODWORD(v4) = *(_DWORD *)(*(_QWORD *)v304 + v167 + 128);
    LODWORD(v5) = *(_DWORD *)(*(_QWORD *)v304 + 128);
    swift_bridgeObjectRelease(v273);
    v171 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)((char *)v170 + qword_10047DEF0) + 144);
    v172 = swift_retain();
    v171(v304, v172);
    swift_release();
    v173 = *(_QWORD *)v304;
    v163 = *(_QWORD *)&v304[16];
    swift_bridgeObjectRelease(*(_QWORD *)&v304[8]);
    swift_bridgeObjectRelease(v173);
    if (!((unint64_t)v163 >> 62))
    {
      if (*(_QWORD *)((v163 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_70;
LABEL_93:
      swift_bridgeObjectRelease(v163);
      goto LABEL_94;
    }
  }
  else
  {
LABEL_76:
    swift_bridgeObjectRelease(v273);
    if (*(_QWORD *)(v164 + 16))
    {
      v181 = *(void **)(v164 + 32);
      v182 = *(_OWORD *)(v164 + 88);
      v298 = *(_OWORD *)(v164 + 72);
      v299 = v182;
      v183 = *(_OWORD *)(v164 + 56);
      v296 = *(__n128 *)(v164 + 40);
      v297 = v183;
      v294 = *(__n128 *)(v164 + 112);
      v184 = *(_DWORD *)(v164 + 128);
      v185 = *(_BYTE *)(v164 + 132);
      v186 = v181;
      swift_release();
      goto LABEL_98;
    }
    __break(1u);
  }
  if (v163 < 0)
    v195 = v163;
  else
    v195 = v163 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v163);
  v196 = _CocoaArrayWrapper.endIndex.getter(v195);
  swift_bridgeObjectRelease(v163);
  if (!v196)
    goto LABEL_93;
LABEL_70:
  if ((v163 & 0xC000000000000001) != 0)
  {
    v174 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v163);
LABEL_73:
    v175 = v174;
    swift_bridgeObjectRelease(v163);
    v176 = type metadata accessor for WorldPerson(0);
    v177 = (_QWORD *)swift_dynamicCastClass(v175, v176);
    if (v177)
    {
      v178 = v267;
      (*(void (**)(void))((swift_isaMask & *v177) + 0x240))();
      v179 = (uint64_t)v178;
      v180 = v291;
      if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v291 + 48))(v179, 1, v162) == 1)
      {

        sub_100036600(v179, (uint64_t *)&unk_10047E440);
LABEL_94:
        v166 = (uint64_t)v270;
        if ((float)(*(float *)&v4 / *(float *)&v5) <= 2.5)
        {
          v197 = *(void **)(v168 + 32);
          v200 = *(_OWORD *)(v164 + v167 + 88);
          v298 = *(_OWORD *)(v164 + v167 + 72);
          v299 = v200;
          v201 = *(_OWORD *)(v164 + v167 + 56);
          v296 = *(__n128 *)(v164 + v167 + 40);
          v297 = v201;
          v294 = *(__n128 *)(v164 + v167 + 112);
          v184 = a1[32];
          v185 = *(_BYTE *)(v168 + 132);
        }
        else
        {
          v197 = *(void **)(v164 + 32);
          v198 = *(_OWORD *)(v164 + 88);
          v298 = *(_OWORD *)(v164 + 72);
          v299 = v198;
          v199 = *(_OWORD *)(v164 + 56);
          v296 = *(__n128 *)(v164 + 40);
          v297 = v199;
          v294 = *(__n128 *)(v164 + 112);
          v184 = *(_DWORD *)(v164 + 128);
          v185 = *(_BYTE *)(v164 + 132);
        }
        v186 = v197;
        swift_release();
        a1 = v295;
LABEL_98:
        v202 = v186;
        objc_msgSend(v202, "boundingBox");
        v204 = v203;
        v206 = v205;
        v208 = v207;
        v210 = v209;
        sub_100050310((CGFloat *)v306);
        *(_OWORD *)v304 = v306[0];
        *(_OWORD *)&v304[16] = v306[1];
        *(_OWORD *)&v304[32] = v306[2];
        v312.origin.x = v204;
        v312.origin.y = v206;
        v312.size.width = v208;
        v312.size.height = v210;
        v313 = CGRectApplyAffineTransform(v312, (CGAffineTransform *)v304);
        v211 = v313.origin.x;
        v212 = v313.origin.y;
        v213 = v313.size.width;
        v214 = v313.size.height;
        v215.n128_f64[0] = simd_float4x4.translated(to:)(v294, (__n128)matrix_identity_float4x4.columns[0], (__n128)matrix_identity_float4x4.columns[1], (__n128)matrix_identity_float4x4.columns[2], (__n128)matrix_identity_float4x4.columns[3]);
        v219 = &off_10047D000;
        v292 = v217;
        v293 = v218;
        v289 = v215;
        v290 = v216;
        if ((v185 & 1) != 0)
        {
          sub_1000642CC((uint64_t)v307);
LABEL_106:
          v229 = (uint64_t)v276;
          (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v291 + 56))(v276, 1, 1, v162);
          v230 = (uint64_t)v219[490] + (_QWORD)a1;
          swift_beginAccess(v230, v304, 33, 0);
          sub_10006494C(v229, v230, (uint64_t *)&unk_10047E440);
          swift_endAccess(v304);
          v231 = (char *)a1 + qword_10047DF58;
          *(_QWORD *)v231 = 0;
          *((_QWORD *)v231 + 1) = 0;
          v231[16] = 1;
          v232 = *(uint64_t (**)(__n128))(**(_QWORD **)((char *)a1 + v269) + 200);
          v233 = swift_retain();
          v234 = v232(v233);
          swift_release();
          v235 = swift_allocObject(&unk_1004413D0, 224, 15);
          *(CGFloat *)(v235 + 16) = v211;
          *(CGFloat *)(v235 + 24) = v212;
          *(CGFloat *)(v235 + 32) = v213;
          *(CGFloat *)(v235 + 40) = v214;
          *(_QWORD *)(v235 + 48) = v202;
          v236 = v296;
          *(__n128 *)(v235 + 56) = v296;
          v296 = v236;
          v237 = v236.n128_u64[1];
          v238 = v297;
          *(_OWORD *)(v235 + 72) = v297;
          v297 = v238;
          v239 = *((_QWORD *)&v238 + 1);
          v240 = v298;
          *(_OWORD *)(v235 + 88) = v298;
          v298 = v240;
          v241 = *((_QWORD *)&v240 + 1);
          v242 = v299;
          *(_OWORD *)(v235 + 104) = v299;
          v299 = v242;
          v243 = *((_QWORD *)&v242 + 1);
          *(__n128 *)(v235 + 128) = v294;
          *(_DWORD *)(v235 + 144) = v184;
          *(_BYTE *)(v235 + 148) = v185;
          *(_QWORD *)(v235 + 152) = a1;
          v244 = v290;
          *(__n128 *)(v235 + 160) = v289;
          *(__n128 *)(v235 + 176) = v244;
          v245 = v293;
          *(__n128 *)(v235 + 192) = v292;
          *(__n128 *)(v235 + 208) = v245;
          v246 = *(void (**)(void (*)(uint64_t), uint64_t))(*(_QWORD *)v234 + 416);
          v247 = v202;
          a1;
          v246(sub_100064464, v235);
          swift_release();
          swift_release();
          if (qword_10047AA20 != -1)
            swift_once(&qword_10047AA20, sub_1000E1068);
          *(_QWORD *)v304 = 0;
          *(_QWORD *)&v304[8] = 0xE000000000000000;
          _StringGuts.grow(_:)(22);
          swift_bridgeObjectRelease(*(_QWORD *)&v304[8]);
          v302._countAndFlagsBits = 0xD000000000000014;
          v302._object = (void *)0x80000001003DB1C0;
          swift_retain();
          StateValue.wrappedValue.getter(v301, v248);
          swift_release();
          memcpy(v304, v301, 0x200uLL);
          sub_100012C00((uint64_t)v304);
          v301[0] = *(_QWORD *)v304;
          v249._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
          object = v249._object;
          String.append(_:)(v249);
          swift_bridgeObjectRelease(object);
          v251 = v302._object;
          Log.debug(_:isPrivate:)(v302, 0);
          swift_bridgeObjectRelease(v251);
          v301[0] = v296.n128_u64[0];
          v301[1] = v237;
          v301[2] = v297;
          v301[3] = v239;
          v301[4] = v298;
          v301[5] = v241;
          v301[6] = v299;
          v301[7] = v243;
          LOBYTE(v301[8]) = 0;
          swift_retain();
          Synchronized.wrappedValue.setter(v301);

          swift_release();
          goto LABEL_113;
        }
        v220 = (float32x4_t *)((char *)a1 + qword_10047DF58);
        if ((*((_BYTE *)a1 + qword_10047DF58 + 16) & 1) != 0)
        {
          sub_1000642CC((uint64_t)v307);
          v221 = 0;
          if ((v307[24].n128_u8[8] & 1) == 0)
            goto LABEL_102;
        }
        else
        {
          v288 = *v220;
          *(double *)v225.i64 = simd_float4x4.position.getter(v215, v216, v217, v218);
          v226 = vsubq_f32(v288, v225);
          v227 = vmulq_f32(v226, v226);
          v228 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v227, 2), vaddq_f32(v227, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v227.f32, 1))).f32[0]);
          sub_1000642CC((uint64_t)v307);
          v221 = v228 > 0.25;
          if ((v307[24].n128_u8[8] & 1) == 0)
          {
LABEL_102:
            v222 = (uint64_t)v295 + qword_10047DF50;
            swift_beginAccess((char *)v295 + qword_10047DF50, &v300, 0, 0);
            sub_1000644F8(v222, v166, (uint64_t *)&unk_10047E440);
            v223 = v291;
            if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v291 + 48))(v166, 1, v162) == 1)
            {
              v224 = sub_100036600(v166, (uint64_t *)&unk_10047E440);
            }
            else
            {
              v252 = v166;
              v253 = v266;
              v254 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v223 + 32))(v266, v252, v162);
              if (!v221)
              {
                v261 = v268;
                Date.init()(v254);
                v262 = Date.timeIntervalSince(_:)(v253);
                v263 = *(void (**)(char *, unint64_t))(v223 + 8);
                v263(v261, v162);
                if (v262 > 0.5)
                {
                  v264 = v295;
                  v265 = sub_100059BA4(v289, v290, v292, v293);
                  ((void (*)(char *, unint64_t, double))v263)(v253, v162, v265);
                  a1 = v264;
                  v219 = &off_10047D000;
                  goto LABEL_106;
                }
                v263(v253, v162);
LABEL_112:
                v256 = *(uint64_t (**)(__n128))(**(_QWORD **)((char *)v295 + v269) + 200);
                v257 = swift_retain();
                v258 = v256(v257);
                swift_release();
                v259 = (CGFloat *)swift_allocObject(&unk_1004413F8, 48, 7);
                v259[2] = v211;
                v259[3] = v212;
                v259[4] = v213;
                v259[5] = v214;
                (*(void (**)(__n128 (*)(uint64_t), CGFloat *))(*(_QWORD *)v258 + 416))(sub_1000644E8, v259);
                swift_release();
                swift_release();

                *(double *)v260.i64 = simd_float4x4.position.getter(v289, v290, v292, v293);
                *v220 = v260;
                v220[1].i8[0] = 0;
                goto LABEL_113;
              }
              v224 = (*(uint64_t (**)(char *, unint64_t))(v223 + 8))(v253, v162);
            }
            v255 = (uint64_t)v276;
            Date.init()(v224);
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v223 + 56))(v255, 0, 1, v162);
            swift_beginAccess(v222, v304, 33, 0);
            sub_10006494C(v255, v222, (uint64_t *)&unk_10047E440);
            swift_endAccess(v304);
            goto LABEL_112;
          }
        }
        a1 = v295;
        sub_100059BA4(v289, v290, v292, v293);
        v219 = &off_10047D000;
        goto LABEL_106;
      }
      v187 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v180 + 32))(v38, v179, v162);
      v188 = v268;
      Date.init()(v187);
      v189 = Date.timeIntervalSince(_:)(v38);
      v190 = *(void (**)(char *, unint64_t))(v180 + 8);
      v190(v188, v162);
      if (v189 < 3.0)
      {
        v191 = *(void **)(v168 + 32);
        v192 = *(_OWORD *)(v164 + v167 + 88);
        v298 = *(_OWORD *)(v164 + v167 + 72);
        v299 = v192;
        v193 = *(_OWORD *)(v164 + v167 + 56);
        v296 = *(__n128 *)(v164 + v167 + 40);
        v297 = v193;
        v294 = *(__n128 *)(v164 + v167 + 112);
        v184 = a1[32];
        v185 = *(_BYTE *)(v168 + 132);
        v186 = v191;
        swift_release();

        v190(v38, v162);
        a1 = v295;
        v166 = (uint64_t)v270;
        goto LABEL_98;
      }
      v190(v38, v162);
    }

    goto LABEL_94;
  }
  if (*(_QWORD *)((v163 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v174 = *(id *)(v163 + 32);
    goto LABEL_73;
  }
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
  swift_release();
  __break(1u);
}

void sub_100058CB4(char a1, __n128 a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SEL *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x4_t v25;
  __n128 v26;
  float32x2_t *v27;
  __n128 v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  void (*v47)(char **__return_ptr, __n128);
  __n128 v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  id v56;
  void *v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  float32x4_t v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  id v74;
  void *v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  unint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  id v98;
  void *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  SEL *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  char *v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  char *v119[14];
  float v120;
  char v121;

  v3 = v2;
  v115 = a2;
  v5 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  __chkstk_darwin(v5);
  v114 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118.n128_u64[0] = type metadata accessor for ARPlaneAnchor.Classification(0);
  v117.n128_u64[0] = *(_QWORD *)(v118.n128_u64[0] - 8);
  __chkstk_darwin(v118.n128_u64[0]);
  v116.n128_u64[0] = (unint64_t)v110.n128_u64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10008F8B8();
  if (!v8)
    return;
  v9 = (SEL *)v8;
  MeasureCore.shared.unsafeMutableAddressor(v8);
  v10 = swift_retain();
  v11 = MeasureCore.allPlaneAnchors.getter(v10);
  swift_release();
  sub_10005D16C(v11);
  v13 = v12;
  v14 = -[SEL camera](v9, "camera");
  objc_msgSend(v14, "transform");
  v113 = v15;
  v112 = v16;
  v111 = v17;
  v110 = v18;

  *(double *)v19.i64 = simd_float4x4.position.getter(v113, v112, v111, v110);
  v20 = vsubq_f32((float32x4_t)v115, v19);
  v21 = v20;
  v21.i32[1] = vmuls_lane_f32(0.0, *(float32x2_t *)v20.f32, 1);
  v21.i32[2] = v20.i32[2];
  v22 = (int32x4_t)vmulq_f32(v21, v21);
  v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
  v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
  v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
  v25 = vmulq_n_f32(v21, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
  v26.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v115.n128_u64[0], vmul_f32(*(float32x2_t *)v25.f32, (float32x2_t)0xBF000000BF000000));
  v26.n128_f32[2] = v115.n128_f32[2] + vmuls_lane_f32(-0.5, v25, 2);
  v26.n128_u32[3] = 0;
  v113 = v26;
  v27 = (float32x2_t *)SIMD3<>.up.unsafeMutableAddressor();
  v28.n128_u64[0] = (unint64_t)vsub_f32(0, *v27);
  v28.n128_f32[2] = 0.0 - v27[1].f32[0];
  v28.n128_u32[3] = 0;
  v112 = v28;
  v29 = objc_allocWithZone((Class)ARRaycastQuery);
  v30 = objc_msgSend(v29, "initWithOrigin:direction:allowingTarget:alignment:", 0, 0, v113.n128_f64[0], v112.n128_f64[0]);
  v112.n128_u64[0] = v3;
  v31 = objc_msgSend(*(id *)(v3 + qword_10047DFC0), "session");
  v32 = objc_msgSend(v31, "raycast:", v30);

  v33 = sub_100018148(0, (unint64_t *)&unk_10047E580, ARRaycastResult_ptr);
  v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, v33);

  v35 = swift_bridgeObjectRetain(v34);
  v36 = (uint64_t)sub_100063440(v35, v13);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v13);
  if ((unint64_t)v34 >> 62)
  {
    if (v34 < 0)
      v86 = v34;
    else
      v86 = v34 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v34);
    v37 = _CocoaArrayWrapper.endIndex.getter(v86);
    swift_bridgeObjectRelease(v34);
  }
  else
  {
    v37 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v111.n128_u64[0] = (unint64_t)v30;
  if (v37)
  {
    if (!((unint64_t)v36 >> 62))
    {
      if (*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_7;
LABEL_61:
      v110.n128_u64[0] = (unint64_t)v9;
      swift_bridgeObjectRelease(v36);
      v96 = v34 & 0xC000000000000001;
      v115.n128_u32[0] = enum case for ARPlaneAnchor.Classification.none(_:);
      swift_bridgeObjectRetain(v34);
      v65 = 4;
      v9 = (SEL *)&selRef_renderer_didAddNode_forAnchor_;
      v113.n128_u64[0] = v34;
      while (1)
      {
        v98 = v96
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v65 - 4, v34)
            : *(id *)(v34 + 8 * v65);
        v99 = v98;
        v44 = v65 - 3;
        if (__OFADD__(v65 - 4, 1))
          break;
        v100 = objc_msgSend(v98, v9[313]);
        if (v100)
        {
          v97 = v100;
          v101 = objc_opt_self(ARPlaneAnchor);
          if (swift_dynamicCastObjCClass(v97, v101))
          {
            v102 = v37;
            v103 = v9;
            v104 = v116.n128_u64[0];
            ARPlaneAnchor.classification.getter();

            v105 = v117.n128_u64[0];
            v106 = v118.n128_u64[0];
            v107 = (*(uint64_t (**)(unint64_t, unint64_t))(v117.n128_u64[0] + 88))(v104, v118.n128_u64[0]);
            (*(void (**)(unint64_t, unint64_t))(v105 + 8))(v104, v106);
            if (v107 == v115.n128_u32[0])
            {
              swift_bridgeObjectRelease_n(v113.n128_u64[0], 2);

              v50 = (uint64_t)v114;
              Date.init()(v108);

              v109 = type metadata accessor for Date(0);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56))(v50, 0, 1, v109);
              v52 = v112.n128_u64[0] + qword_10047DFA8;
              goto LABEL_75;
            }
            v97 = v99;
            v9 = v103;
            v37 = v102;
            v34 = v113.n128_u64[0];
          }
          else
          {

          }
        }
        else
        {
          v97 = v99;
        }

        ++v65;
        if (v44 == v37)
        {

          swift_bridgeObjectRelease_n(v34, 2);
          return;
        }
      }
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    if (v36 < 0)
      v94 = v36;
    else
      v94 = v36 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v36);
    v95 = _CocoaArrayWrapper.endIndex.getter(v94);
    swift_bridgeObjectRelease(v36);
    if (!v95)
      goto LABEL_61;
  }
LABEL_7:
  v38 = a1;
  swift_bridgeObjectRelease(v34);
  v39 = type metadata accessor for Date(0);
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56);
  v41 = (uint64_t)v114;
  v40(v114, 1, 1, v39);
  v42 = v112.n128_u64[0] + qword_10047DFA8;
  swift_beginAccess(v112.n128_u64[0] + qword_10047DFA8, v119, 33, 0);
  sub_10006494C(v41, v42, (uint64_t *)&unk_10047E440);
  swift_endAccess(v119);
  v43 = swift_bridgeObjectRetain(v36);
  v44 = (uint64_t)sub_1000637B0(v43, v36);
  swift_bridgeObjectRelease_n(v36, 2);
  if (!((unint64_t)v44 >> 62))
  {
    v45 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
    if ((unint64_t)v45 > 1)
      goto LABEL_9;
LABEL_51:
    if (!v45)
    {

      swift_bridgeObjectRelease(v44);
      return;
    }
    v65 = v111.n128_u64[0];
    if ((v44 & 0xC000000000000001) == 0)
    {
      if (!*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        swift_release();
        __break(1u);
        return;
      }
      v88 = *(id *)(v44 + 32);
LABEL_55:
      v89 = v88;
      objc_msgSend(v88, "worldTransform", swift_bridgeObjectRelease(v44).n128_f64[0]);
      v118 = v90;
      v117 = v91;
      v116 = v92;
      v115 = v93;

      simd_float4x4.position.getter(v118, v117, v116, v115);
      return;
    }
LABEL_78:
    v88 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v44);
    goto LABEL_55;
  }
  if (v44 < 0)
    v87 = v44;
  else
    v87 = v44 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v44);
  v45 = _CocoaArrayWrapper.endIndex.getter(v87);
  swift_bridgeObjectRelease(v44);
  if (v45 <= 1)
  {
    swift_bridgeObjectRetain(v44);
    v45 = _CocoaArrayWrapper.endIndex.getter(v87);
    swift_bridgeObjectRelease(v44);
    goto LABEL_51;
  }
LABEL_9:
  if ((v38 & 1) == 0)
  {
    v53 = v111.n128_u64[0];
    v110.n128_u64[0] = (unint64_t)v9;
    v119[0] = (char *)_swiftEmptyArrayStorage;
    sub_1000A5698(0, v45, 0);
    v54 = 0;
    v55 = v119[0];
    do
    {
      if ((v44 & 0xC000000000000001) != 0)
        v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v54, v44);
      else
        v56 = *(id *)(v44 + 8 * v54 + 32);
      v57 = v56;
      objc_msgSend(v56, "worldTransform");
      v62.n128_f64[0] = simd_float4x4.position.getter(v58, v59, v60, v61);
      v118 = v62;

      v119[0] = v55;
      v64 = *((_QWORD *)v55 + 2);
      v63 = *((_QWORD *)v55 + 3);
      v9 = (SEL *)(v64 + 1);
      if (v64 >= v63 >> 1)
      {
        sub_1000A5698((char *)(v63 > 1), v64 + 1, 1);
        v55 = v119[0];
      }
      ++v54;
      *((_QWORD *)v55 + 2) = v9;
      *(__n128 *)&v55[16 * v64 + 32] = v118;
    }
    while (v45 != v54);
    swift_bridgeObjectRelease(v44);
    v119[0] = v55;
    swift_bridgeObjectRetain(v55);
    sub_1000500B8((uint64_t *)v119, (uint64_t (*)(uint64_t))sub_1000A7944, (uint64_t (*)(_QWORD *))sub_100060FB8);
    v65 = v53;
    swift_bridgeObjectRelease(v55);
    v66 = *((_QWORD *)v119[0] + 2);
    v67 = (void *)v110.n128_u64[0];
    if (!v66)
    {
      swift_release();

      return;
    }
    if (fabsf(COERCE_FLOAT(vsubq_f32(*(float32x4_t *)&v115, *(float32x4_t *)(*v119 + 32)).i32[1])) < 2.5)
    {
      v68 = *((float32x4_t *)v119[0] + 2);
LABEL_23:
      v118 = (__n128)v68;

      swift_release();
      return;
    }
    if (v66 == 1)
    {
LABEL_39:
      v118 = *((__n128 *)v119[0] + 2);

      swift_release();
      return;
    }
    v84 = 3;
    while (1)
    {
      v85 = v84 - 1;
      if (__OFADD__(v84 - 2, 1))
        goto LABEL_77;
      v68 = *(float32x4_t *)&v119[0][16 * v84];
      if (fabsf(COERCE_FLOAT(vsubq_f32(*(float32x4_t *)&v115, v68).i32[1])) < 2.5)
        goto LABEL_23;
      ++v84;
      if (v85 == v66)
        goto LABEL_39;
    }
  }
  v46 = v112.n128_u64[0];
  v47 = *(void (**)(char **__return_ptr, __n128))(**(_QWORD **)(v112.n128_u64[0] + qword_10047DEE0) + 144);
  v48 = swift_retain();
  v47(v119, v48);
  v49 = swift_release();
  if ((v121 & 1) != 0)
  {
    swift_bridgeObjectRelease(v44);
    v50 = (uint64_t)v114;
    Date.init()(v51);

    v40((char *)v50, 0, 1, v39);
    v52 = v46 + qword_10047DFA0;
LABEL_75:
    swift_beginAccess(v52, v119, 33, 0);
    sub_10006494C(v50, v52, (uint64_t *)&unk_10047E440);
    swift_endAccess(v119);
  }
  else
  {
    v110.n128_u64[0] = (unint64_t)v9;
    v69 = v120;
    v70 = (uint64_t)v114;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v40)(v114, 1, 1, v39, v49);
    v71 = v46 + qword_10047DFA0;
    swift_beginAccess(v46 + qword_10047DFA0, v119, 33, 0);
    sub_10006494C(v70, v71, (uint64_t *)&unk_10047E440);
    swift_endAccess(v119);
    v119[0] = (char *)_swiftEmptyArrayStorage;
    sub_1000A5698(0, v45, 0);
    v72 = 0;
    v73 = v119[0];
    do
    {
      if ((v44 & 0xC000000000000001) != 0)
        v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v72, v44);
      else
        v74 = *(id *)(v44 + 8 * v72 + 32);
      v75 = v74;
      objc_msgSend(v74, "worldTransform");
      v80.n128_f64[0] = simd_float4x4.position.getter(v76, v77, v78, v79);
      v118 = v80;

      v119[0] = v73;
      v82 = *((_QWORD *)v73 + 2);
      v81 = *((_QWORD *)v73 + 3);
      if (v82 >= v81 >> 1)
      {
        sub_1000A5698((char *)(v81 > 1), v82 + 1, 1);
        v73 = v119[0];
      }
      ++v72;
      *((_QWORD *)v73 + 2) = v82 + 1;
      *(__n128 *)&v73[16 * v82 + 32] = v118;
    }
    while (v45 != v72);
    swift_bridgeObjectRelease(v44);
    v119[0] = v73;
    swift_bridgeObjectRetain(v73);
    sub_100050040(v119, v69);
    swift_bridgeObjectRelease(v73);
    v83 = (void *)v111.n128_u64[0];
    if (*((_QWORD *)v119[0] + 2))
    {
      v118 = *((__n128 *)v119[0] + 2);

    }
    else
    {

      v118 = 0u;
    }
    swift_release();
  }
}

void sub_1000598CC(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, __n128 a6@<Q4>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  unint64_t v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  _QWORD v61[64];
  _OWORD __dst[32];
  double __src[64];

  type metadata accessor for MeasureCamera(0);
  swift_retain();
  StateValue.wrappedValue.getter(__src, v12);
  swift_release();
  memcpy(__dst, __src, sizeof(__dst));
  sub_100012C00((uint64_t)__dst);
  v58 = (__n128)__dst[12];
  v59 = (__n128)__dst[11];
  v56 = (__n128)__dst[14];
  v57 = (__n128)__dst[13];
  swift_retain();
  StateValue.wrappedValue.getter(v61, v13);
  swift_release();
  memcpy(__src, v61, sizeof(__src));
  v14 = sub_100012C00((uint64_t)__src);
  static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v14, a6, v59, v58, v57, v56, __src[4]);
  CGPoint.init(xy:)(v15);
  v16 = (double *)(v6 + qword_10047DF10);
  v17 = CGRect.center.getter(a2, a3, a4, a5) * *v16;
  CGRect.center.getter(a2, a3, a4, a5);
  v19 = v18 * v16[1];
  v20 = static CGPoint.- infix(_:_:)(v17);
  v22 = v21;
  v23 = CGPoint.length()();
  v24 = CGPoint.normalized()(v20, v22);
  v26 = v25;
  *(float *)&a4 = (a4 + a4) * *v16;
  v27 = CGPoint.multiply(by:)(*(float *)&a4, v24, v25);
  v29 = v28;
  CGPoint.multiply(by:)(v23, v24, v26);
  v58.n128_u64[0] = static CGPoint.- prefix(_:)(v30);
  v57.n128_u64[0] = v31;
  v32 = CGPoint.multiply(by:)(*(float *)&a4, v26, -v24);
  v34 = v33;
  v36 = static CGPoint.- prefix(_:)(v35);
  v38 = v37;
  v39 = static CGPoint.+ infix(_:_:)(v17, v19, v27, v29);
  a6.n128_u64[0] = static CGPoint.+ infix(_:_:)(v39, v40, v32, v34);
  v59.n128_u64[0] = v41;
  v42 = static CGPoint.+ infix(_:_:)(v17, v19, v27, v29);
  v44 = static CGPoint.+ infix(_:_:)(v42, v43, v36, v38);
  v55 = v45;
  v56.n128_f64[0] = v44;
  v46 = static CGPoint.+ infix(_:_:)(v17, v19, v58.n128_f64[0], v57.n128_f64[0]);
  v48 = static CGPoint.+ infix(_:_:)(v46, v47, v36, v38);
  v50 = v49;
  v51 = static CGPoint.+ infix(_:_:)(v17, v19, v58.n128_f64[0], v57.n128_f64[0]);
  v53 = static CGPoint.+ infix(_:_:)(v51, v52, v32, v34);
  *(_QWORD *)a1 = a6.n128_u64[0];
  *(_QWORD *)(a1 + 8) = v59.n128_u64[0];
  *(_QWORD *)(a1 + 16) = v56.n128_u64[0];
  *(_QWORD *)(a1 + 24) = v55;
  *(double *)(a1 + 32) = v48;
  *(_QWORD *)(a1 + 40) = v50;
  *(double *)(a1 + 48) = v53;
  *(_QWORD *)(a1 + 56) = v54;
}

double sub_100059BA4(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  double result;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  _BYTE v27[24];
  _BYTE v28[24];

  v25 = a3;
  v26 = a4;
  v23 = a1;
  v24 = a2;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v23 - v13;
  v15 = (void *)sub_10005054C();
  if (v15)
  {

    sub_1000506A8(0xD000000000000019, (void *)0x80000001003DB1E0);
    sub_100053698();
  }
  v16 = v4 + qword_10047DFB0;
  swift_beginAccess(v4 + qword_10047DFB0, v28, 0, 0);
  sub_1000644F8(v16, (uint64_t)v14, (uint64_t *)&unk_10047E440);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5);
  v18 = sub_100036600((uint64_t)v14, (uint64_t *)&unk_10047E440);
  if (v17 == 1)
  {
    Date.init()(v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v12, 0, 1, v5);
    swift_beginAccess(v16, v27, 33, 0);
    sub_10006494C((uint64_t)v12, v16, (uint64_t *)&unk_10047E440);
    swift_endAccess(v27);
  }
  sub_100059ED8(v23, v24, v25, v26);
  Date.init()(v19);
  v20 = v4 + qword_10047DF70;
  v21 = swift_beginAccess(v20, v27, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t, __n128))(v6 + 40))(v20, v8, v5, v21);
  *(_QWORD *)&result = swift_endAccess(v27).n128_u64[0];
  return result;
}

void sub_100059DA8(uint64_t a1, void **a2, double a3, double a4, double a5, double a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double Width;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  CGFloat Height;

  v11 = *a2;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_BYTE *)(a1 + 432) = 1;
  *(double *)(a1 + 360) = a3;
  *(double *)(a1 + 368) = a4;
  *(double *)(a1 + 376) = a5;
  *(double *)(a1 + 384) = a6;
  *(_BYTE *)(a1 + 392) = 0;
  objc_msgSend(v11, "boundingBox");
  v16 = CGRect.center.getter(v12, v13, v14, v15);
  if (qword_10047B190 != -1)
    swift_once(&qword_10047B190, sub_1001C81CC);
  v17 = qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
  if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    Width = CGRectGetWidth(*(CGRect *)(v17 + 48));
    objc_msgSend(v11, "boundingBox");
    CGRect.center.getter(v19, v20, v21, v22);
    if ((*(_BYTE *)(v17 + 80) & 1) == 0)
    {
      v24 = v23;
      Height = CGRectGetHeight(*(CGRect *)(v17 + 48));
      *(double *)(a1 + 8) = v16 * Width;
      *(double *)(a1 + 16) = v24 * Height;
      *(_BYTE *)(a1 + 24) = 0;
      *(__n128 *)(a1 + 128) = a7;
      *(__n128 *)(a1 + 144) = a8;
      *(__n128 *)(a1 + 160) = a9;
      *(__n128 *)(a1 + 176) = a10;
      *(_BYTE *)(a1 + 192) = 0;
      return;
    }
  }
  __break(1u);
}

void sub_100059ED8(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  void *v4;
  void *v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *(*)(), uint64_t, __n128);
  _QWORD *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t (*)(), uint64_t, __n128);
  _QWORD *v16;
  __n128 v17;
  uint64_t v18;
  void (*v19)(double (*)(), uint64_t);
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(double (*)(), uint64_t, __n128);
  _QWORD *v25;
  __n128 v26;
  uint64_t v27;
  void (*v28)(double (*)(), uint64_t);
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(void (*)(), uint64_t, __n128);
  _QWORD *v34;
  __n128 v35;
  void (*v36)(uint64_t (*)(_QWORD), _QWORD);
  _QWORD *v37;
  void (*v38)(uint64_t (*)(_QWORD), _QWORD);
  _QWORD *v39;
  void (*v40)(double (*)(), _QWORD);
  _QWORD *v41;
  void (*v42)(double (*)(), _QWORD);
  _QWORD *v43;
  uint64_t v44;
  Swift::String v45;
  void *object;
  void *v47;
  uint64_t (*v48)(_QWORD *, __n128);
  __n128 v49;
  void (*v50)(_QWORD *, _QWORD);
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD __src[64];
  Swift::String _;
  _QWORD __dst[64];

  v5 = v4;
  v6 = objc_allocWithZone((Class)type metadata accessor for WorldPerson(0));
  v7 = (_QWORD *)WorldPerson.init(_:)(a1, a2, a3, a4);
  v8 = swift_allocObject(&unk_1004412E0, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16, v5);
  v9 = swift_allocObject(&unk_100441420, 32, 7);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  v10 = *(void (**)(void *(*)(), uint64_t, __n128))((swift_isaMask & *v7) + 0xF0);
  v11 = v7;
  v12 = swift_retain();
  v10(sub_100064540, v9, v12);
  swift_release();
  v13 = swift_allocObject(&unk_1004412E0, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, v5);
  v14 = swift_allocObject(&unk_100441448, 32, 7);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v11;
  v15 = *(void (**)(uint64_t (*)(), uint64_t, __n128))((swift_isaMask & *v11) + 0x108);
  v16 = v11;
  v17 = swift_retain();
  v15(sub_10006454C, v14, v17);
  swift_release();
  v18 = swift_allocObject(&unk_100441470, 32, 7);
  *(_QWORD *)(v18 + 16) = v16;
  *(_QWORD *)(v18 + 24) = v5;
  v19 = *(void (**)(double (*)(), uint64_t))((swift_isaMask & *v16) + 0x138);
  v20 = v16;
  v21 = v5;
  v19(sub_100064580, v18);

  v22 = swift_allocObject(&unk_1004412E0, 24, 7);
  swift_unknownObjectWeakInit(v22 + 16, v21);
  v23 = swift_allocObject(&unk_100441498, 32, 7);
  *(_QWORD *)(v23 + 16) = v22;
  *(_QWORD *)(v23 + 24) = v20;
  v24 = *(void (**)(double (*)(), uint64_t, __n128))((swift_isaMask & *v20) + 0x180);
  v25 = v20;
  v26 = swift_retain();
  v24(sub_10006458C, v23, v26);
  swift_release();
  v27 = swift_allocObject(&unk_1004414C0, 32, 7);
  *(_QWORD *)(v27 + 16) = v21;
  *(_QWORD *)(v27 + 24) = v25;
  v28 = *(void (**)(double (*)(), uint64_t))((swift_isaMask & *v25) + 0x1C8);
  v29 = v25;
  v30 = (char *)v21;
  v28(sub_100064594, v27);
  v31 = swift_allocObject(&unk_1004412E0, 24, 7);
  swift_unknownObjectWeakInit(v31 + 16, v30);
  v32 = swift_allocObject(&unk_1004414E8, 32, 7);
  *(_QWORD *)(v32 + 16) = v31;
  *(_QWORD *)(v32 + 24) = v29;
  v33 = *(void (**)(void (*)(), uint64_t, __n128))((swift_isaMask & *v29) + 0x1B0);
  v34 = v29;
  v35 = swift_retain();
  v33(sub_1000645CC, v32, v35);
  swift_release();
  v36 = *(void (**)(uint64_t (*)(_QWORD), _QWORD))((swift_isaMask & *v34) + 0x150);
  v37 = v34;
  v36(nullsub_1, 0);

  v38 = *(void (**)(uint64_t (*)(_QWORD), _QWORD))((swift_isaMask & *v37) + 0x168);
  v39 = v37;
  v38(nullsub_1, 0);

  v40 = *(void (**)(double (*)(), _QWORD))((swift_isaMask & *v39) + 0x1E0);
  v41 = v39;
  v40(sub_10005DFBC, 0);

  v42 = *(void (**)(double (*)(), _QWORD))((swift_isaMask & *v41) + 0x198);
  v43 = v41;
  v42(sub_10005DFBC, 0);

  if (qword_10047AA20 != -1)
    swift_once(&qword_10047AA20, sub_1000E1068);
  __dst[0] = 0;
  __dst[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(0xE000000000000000);
  _._countAndFlagsBits = 0xD000000000000014;
  _._object = (void *)0x80000001003DB200;
  swift_retain();
  StateValue.wrappedValue.getter(__src, v44);
  swift_release();
  memcpy(__dst, __src, sizeof(__dst));
  sub_100012C00((uint64_t)__dst);
  __src[0] = __dst[0];
  v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  object = v45._object;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(object);
  v47 = _._object;
  Log.debug(_:isPrivate:)(_, 0);
  swift_bridgeObjectRelease(v47);
  v48 = *(uint64_t (**)(_QWORD *, __n128))(**(_QWORD **)&v30[qword_10047DEE8] + 400);
  v49 = swift_retain();
  v50 = (void (*)(_QWORD *, _QWORD))v48(__src, v49);
  v52 = v51;
  v53 = v43;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v53);
  v55 = *(_QWORD *)((*v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v54 = *(_QWORD *)((*v52 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v55 >= v54 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
  v56 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v53);
  specialized Array._endMutation()(v56);
  v50(__src, 0);
  swift_release();
  if (qword_10047AB68 != -1)
    swift_once(&qword_10047AB68, sub_10011E814);
  sub_10011C6F0(v53);

}

void sub_10005A448(__n128 *a1@<X0>, char *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  char *v6;
  char *v7;
  _QWORD *v14;
  double *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int64x2_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  void *v26;
  __CVBuffer *v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double Width;
  double v33;
  double Height;
  __CVBuffer *v35;
  int64_t v36;
  __CVBuffer *v37;
  void (*v38)(CGAffineTransform *__return_ptr, __n128);
  __n128 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  float v43;
  float *v44;
  double v45;
  double a;
  double b;
  double c;
  double d;
  float v50;
  float v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  float v57;
  double v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  CGPoint v68;
  double v69;
  float v70;
  double v71;
  uint64_t v72;
  double v73;
  double v74;
  CGPoint v75;
  double v76;
  double v77;
  uint64_t v78;
  double v79;
  CGFloat v80;
  double v81;
  CGFloat v82;
  CGPoint v83;
  double v84;
  float v85;
  __n128 v86;
  __n128 v87;
  CGFloat v88;
  CGFloat v89;
  CGFloat v90;
  CGFloat v91;
  CGFloat v92;
  CGFloat v93;
  float v94;
  float v95;
  float v96;
  uint64_t v97;
  float v98;
  float v99;
  double v100;
  float v101;
  double v102;
  double v103;
  uint64_t v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  void *v117;
  CGFloat v118;
  double v119;
  double v120;
  double v121;
  void *v122;
  char *v123;
  __n128 v124;
  uint64_t v125;
  char *v126;
  _QWORD *v127;
  uint64_t v128;
  unsigned __int8 *v129;
  __n128 v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  float v136;
  float v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  __int128 v147;
  __n128 v148;
  CGPoint v149;
  unsigned int v152;
  uint64_t v154;
  __n128 v155;
  unint64_t v156;
  unint64_t v157;
  __n128 *v158;
  uint64_t v159;
  __n128 *v160;
  __n128 v161;
  uint64_t v162;
  float *v163;
  float v164;
  __n128 v165;
  __n128 v166;
  uint64_t v167;
  double *v168;
  double v169;
  double v170;
  double v171;
  uint64_t v172;
  __n128 v173;
  double v174;
  double v175;
  CVPixelBufferRef v176;
  CVPixelBufferRef v177;
  __CVBuffer *v178;
  id v179;
  uint64_t v180;
  __int128 v181;
  char *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  char *v187;
  __n128 v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  const void *v194;
  char *v195;
  CVPixelBufferRef v196;
  uint64_t v197;
  char *v198;
  CVPixelBufferRef v199;
  id v200;
  double *v201;
  _QWORD *v202;
  uint64_t v203;
  char *v204;
  CVPixelBufferRef v205;
  int v206;
  double v207;
  double v208;
  uint64_t v209;
  unint64_t v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  char *v217;
  uint64_t v218;
  __n128 *v219;
  float v220;
  uint64_t v221;
  double v222;
  __n128 v223;
  CGFloat v224;
  __n128 v225;
  CGFloat v226;
  __n128 v227;
  CGFloat v228;
  __n128 v229;
  __n128 v230;
  __n128 v231;
  __n128 v232;
  uint64_t v233;
  char *v234;
  unsigned __int8 *BaseAddress;
  __n128 v236;
  double v237;
  double v238;
  __int128 v239;
  _QWORD v240[6];
  CGAffineTransform v241;
  char v242;
  unint64_t v243;
  char v244;
  CGAffineTransform v245;
  CGAffineTransform v246;
  char v247;
  CGPoint v248;
  CGPoint v249;
  CGPoint v250;
  CGRect v251;

  v7 = v6;
  v14 = (_QWORD *)type metadata accessor for DispatchWorkItemFlags(0);
  v15 = (double *)*(v14 - 1);
  __chkstk_darwin(v14);
  v17 = (char *)&v197 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v218 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v217 = (char *)&v197 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = a1;
  v20 = (void *)sub_10008F8B8();
  v21 = 0uLL;
  if (!v20)
  {
    v42 = 0;
    v27 = 0;
    v41 = 1;
    goto LABEL_15;
  }
  v22 = (uint64_t)v20;
  v23 = objc_msgSend(v20, "segmentationBuffer", 0.0);
  if (!v23)
    goto LABEL_12;
  v24 = (uint64_t)v23;
  v25 = objc_msgSend((id)v22, "sceneDepth");
  if (!v25)
  {

LABEL_12:
    v42 = 0;
    v27 = 0;
LABEL_13:
    v41 = 1;
    goto LABEL_14;
  }
  v26 = v25;
  v204 = v17;
  v27 = (__CVBuffer *)objc_msgSend(v25, "depthMap");

  if (!v27)
  {

    v42 = 0;
    goto LABEL_13;
  }
  v203 = v18;
  v205 = v27;
  v28 = CGRect.center.getter(a3, a4, a5, a6);
  v30 = v29;
  if (qword_10047B190 != -1)
    goto LABEL_104;
LABEL_6:
  v31 = qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
  if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
  {
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
    return;
  }
  v234 = v7;
  v201 = v15;
  v202 = v14;
  Width = CGRectGetWidth(*(CGRect *)(v31 + 48));
  if ((*(_BYTE *)(v31 + 80) & 1) != 0)
    goto LABEL_107;
  v33 = Width;
  Height = CGRectGetHeight(*(CGRect *)(v31 + 48));
  CVPixelBufferLockBaseAddress((CVPixelBufferRef)v24, 1uLL);
  v35 = v205;
  CVPixelBufferLockBaseAddress(v205, 1uLL);
  v36 = CVPixelBufferGetWidth((CVPixelBufferRef)v24);
  BaseAddress = (unsigned __int8 *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)v24);
  v37 = (__CVBuffer *)v24;
  v14 = CVPixelBufferGetBaseAddress(v35);
  v38 = *(void (**)(CGAffineTransform *__return_ptr, __n128))(**(_QWORD **)&v234[qword_10047DEC0] + 144);
  v39 = swift_retain();
  v38(&v241, v39);
  swift_release();
  if ((v244 & 1) != 0)
  {
    v41 = 1;
    CVPixelBufferUnlockBaseAddress(v37, 1uLL);
    CVPixelBufferUnlockBaseAddress(v35, 1uLL);

    v42 = 0;
    v27 = 0;
LABEL_14:
    v21 = 0uLL;
    goto LABEL_15;
  }
  v232.n128_f64[0] = a6;
  *(double *)&v233 = a5;
  v199 = v37;
  v200 = (id)v22;
  v43 = COERCE_FLOAT(vdupq_n_s64(v243).i32[2]);
  v44 = (float *)Float.piDiv2.unsafeMutableAddressor(v40);
  CGAffineTransformMakeRotation(&v241, (float)(v43 + (float)(*v44 * 3.0)));
  if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
    goto LABEL_108;
  v45 = v28 * v33;
  v236.n128_f64[0] = v30 * Height;
  a = v241.a;
  b = v241.b;
  c = v241.c;
  d = v241.d;
  v15 = (double *)v36;
  v50 = CGRectGetHeight(*(CGRect *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48));
  v51 = (float)v36 / v50;
  v52 = ((uint64_t (*)(float, double, double))CGPoint.divide(by:))(v51, a, b);
  v222 = static CGPoint.- prefix(_:)(v52);
  v30 = v53;
  v220 = v51;
  v54 = CGPoint.divide(by:)(v51, c, d);
  v237 = v55;
  v238 = v54;
  *(double *)&v239 = (double)v36;
  v56 = -1;
  v57 = 0.0;
  v24 = 0xC3E0000000000001;
  v22 = 0x43E0000000000000;
  v7 = v234;
  do
  {
    v58 = CGPoint.multiply(by:)((float)v56, v222, v30);
    v28 = v45;
    v61 = CGPoint.add(_:)(v59, v58, v60, v45, v236.n128_f64[0]);
    v63 = v62;
    v64 = CGPoint.multiply(by:)(-1.0, v238, v237);
    a5 = CGPoint.add(_:)(v65, v64, v66, v61, v63);
    a6 = v67;
    sub_100050220(&v245);
    v241 = v245;
    v248.x = a5;
    v248.y = a6;
    v68 = CGPointApplyAffineTransform(v248, &v241);
    v69 = round(v68.x) + round(v68.y) * *(double *)&v239;
    if ((~*(_QWORD *)&v69 & 0x7FF0000000000000) == 0)
    {
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      swift_once(&qword_10047B190, sub_1001C81CC);
      goto LABEL_6;
    }
    if (v69 <= -9.22337204e18)
      goto LABEL_96;
    if (v69 >= 9.22337204e18)
      goto LABEL_97;
    v70 = *((float *)v14 + (uint64_t)v69);
    v71 = CGPoint.multiply(by:)(0.0, v238, v237);
    a5 = CGPoint.add(_:)(v72, v71, v73, v61, v63);
    a6 = v74;
    sub_100050220(&v245);
    v241 = v245;
    v249.x = a5;
    v249.y = a6;
    v75 = CGPointApplyAffineTransform(v249, &v241);
    v76 = round(v75.x) + round(v75.y) * *(double *)&v239;
    if ((~*(_QWORD *)&v76 & 0x7FF0000000000000) == 0)
      goto LABEL_95;
    if (v76 <= -9.22337204e18)
      goto LABEL_96;
    if (v76 >= 9.22337204e18)
      goto LABEL_97;
    LODWORD(a5) = *((_DWORD *)v14 + (uint64_t)v76);
    v77 = CGPoint.multiply(by:)(1.0, v238, v237);
    v80 = CGPoint.add(_:)(v78, v77, v79, v61, v63);
    v82 = v81;
    sub_100050220(&v245);
    v241 = v245;
    v250.x = v80;
    v250.y = v82;
    v83 = CGPointApplyAffineTransform(v250, &v241);
    v84 = round(v83.x) + round(v83.y) * *(double *)&v239;
    if ((~*(_QWORD *)&v84 & 0x7FF0000000000000) == 0)
      goto LABEL_95;
    if (v84 <= -9.22337204e18)
      goto LABEL_96;
    if (v84 >= 9.22337204e18)
      goto LABEL_97;
    v57 = (float)((float)(v57 + v70) + *(float *)&a5) + *((float *)v14 + (uint64_t)v84);
    ++v56;
    v45 = v28;
  }
  while (v56 != 2);
  v198 = a2;
  v85 = v232.n128_f64[0];
  v86 = v219[7];
  v231 = v219[8];
  v232 = v86;
  v87 = v219[9];
  v229 = v219[10];
  v230 = v87;
  v88 = v219[19].n128_f64[0];
  v89 = v219[19].n128_f64[1];
  v91 = v219[20].n128_f64[0];
  v228 = v219[20].n128_f64[1];
  v90 = v228;
  v227 = v219[29];
  v225 = v219[30];
  v223 = v219[31];
  *(float *)&a6 = v57 / 9.0;
  v92 = v88;
  v93 = v89;
  v87.n128_f64[0] = v91;
  v94 = CGRectGetHeight(*(CGRect *)(&v87 - 1));
  v95 = v85 * v94;
  v96 = *(double *)&v233;
  v251.origin.x = v88;
  v251.origin.y = v89;
  v251.size.width = v91;
  v251.size.height = v228;
  v98 = CGRectGetWidth(v251);
  v99 = v96 * v98;
  v100 = v28;
  if (v95 > v99)
    v99 = v95;
  v101 = roundf(v220 * (float)(v99 * 0.5));
  v28 = v222;
  v102 = static CGPoint.- prefix(_:)(v97);
  v103 = v236.n128_f64[0];
  v104 = (uint64_t)BaseAddress;
  sub_100063FD4(0, (uint64_t)BaseAddress, (uint64_t)v14, (uint64_t)v15, v100, v236.n128_f64[0], *(float *)&a6, v102, v105, v101);
  v107 = v106;
  v109 = v108;
  sub_100063FD4(1, v104, (uint64_t)v14, (uint64_t)v15, v100, v103, *(float *)&a6, v28, v30, v101);
  v213 = v111;
  v214 = v110;
  v215 = v109;
  v216 = v107;
  v112 = static CGPoint.+ infix(_:_:)(v110, v111, v107, v109);
  v113 = / infix(_:_:)(v112);
  a5 = v114;
  sub_100063FD4(2, v104, (uint64_t)v14, (uint64_t)v15, v113, v114, *(float *)&a6, v238, v237, v101);
  v211 = v116;
  v212 = v115;
  v197 = qword_10047E010;
  if (v7[qword_10047E010] == 1)
  {
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    v117 = (void *)static OS_dispatch_queue.main.getter();
    v118 = COERCE_DOUBLE(swift_allocObject(&unk_100441650, 104, 7));
    *(_QWORD *)(*(_QWORD *)&v118 + 16) = v7;
    v119 = v215;
    *(double *)(*(_QWORD *)&v118 + 24) = v216;
    *(double *)(*(_QWORD *)&v118 + 32) = v119;
    v120 = v213;
    *(double *)(*(_QWORD *)&v118 + 40) = v214;
    *(double *)(*(_QWORD *)&v118 + 48) = v120;
    v121 = v211;
    *(double *)(*(_QWORD *)&v118 + 56) = v212;
    *(double *)(*(_QWORD *)&v118 + 64) = v121;
    *(double *)(*(_QWORD *)&v118 + 72) = v100;
    *(double *)(*(_QWORD *)&v118 + 80) = v103;
    *(double *)(*(_QWORD *)&v118 + 88) = v113;
    *(double *)(*(_QWORD *)&v118 + 96) = a5;
    *(_QWORD *)&v241.tx = sub_1000648E0;
    v241.ty = v118;
    *(_QWORD *)&v241.a = _NSConcreteStackBlock;
    *(_QWORD *)&v241.b = 1107296256;
    *(_QWORD *)&v241.c = sub_10003ECA0;
    *(_QWORD *)&v241.d = &unk_100441668;
    v122 = _Block_copy(&v241);
    v123 = v7;
    v124 = swift_release();
    v24 = (uint64_t)v217;
    static DispatchQoS.unspecified.getter(v124);
    *(_QWORD *)&v241.a = _swiftEmptyArrayStorage;
    v236.n128_u64[0] = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v15 = (double *)sub_10000EDC8((uint64_t *)&unk_10047E430);
    v125 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
    v126 = v204;
    v127 = v202;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v241, v15, v125, v202, v236.n128_u64[0]);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v24, v126, v122);
    _Block_release(v122);

    (*((void (**)(char *, _QWORD *))v201 + 1))(v126, v127);
    (*(void (**)(uint64_t, uint64_t))(v218 + 8))(v24, v203);
  }
  v209 = 0;
  v210 = 0;
  a2 = &v7[qword_10047DFF0];
  v233 = qword_10047DFE8;
  v228 = v227.n128_f64[0];
  v226 = v225.n128_f64[0];
  v227.n128_u64[0] = v227.n128_u64[1];
  v224 = v223.n128_f64[0];
  v225.n128_u64[0] = v225.n128_u64[1];
  v223.n128_u64[0] = v223.n128_u64[1];
  v128 = -3;
  v206 = 1;
  v207 = 0.0;
  v208 = 0.0;
  v22 = 0x4070000000000000;
  v129 = BaseAddress;
  while (2)
  {
    v131 = CGPoint.multiply(by:)((float)v128, v238, v237);
    v133 = static CGPoint.+ infix(_:_:)(v212, v211, v131, v132);
    v135 = v134;
    v136 = static CGPoint.distance(_:_:)(v214, v213, v216, v215);
    v137 = v220 * (float)(v136 * 0.5);
    if ((~LODWORD(v137) & 0x7F800000) == 0)
      goto LABEL_98;
    if (v137 <= -9.2234e18)
      goto LABEL_99;
    if (v137 >= 9.2234e18)
      goto LABEL_100;
    v138 = (uint64_t)v137;
    if ((uint64_t)v137 < 0)
    {
      v139 = __OFSUB__(0, v138);
      v138 = -v138;
      if (v139)
        goto LABEL_103;
    }
    v24 = -v138;
    if (__OFSUB__(0, v138))
      goto LABEL_101;
    if (v138 < v24)
      goto LABEL_102;
    v221 = v128;
    v140 = 2 * v138;
    v15 = _swiftEmptyArrayStorage;
    while (1)
    {
      v141 = CGPoint.multiply(by:)((float)v24, v28, v30);
      v143 = static CGPoint.+ infix(_:_:)(v133, v135, v141, v142);
      v144 = v143;
      v146 = v145;
      v147 = *((_OWORD *)a2 + 1);
      *(_OWORD *)&v246.a = *(_OWORD *)a2;
      *(_OWORD *)&v246.c = v147;
      *(_OWORD *)&v246.tx = *((_OWORD *)a2 + 2);
      *(double *)&v147 = v146;
      v149 = CGPointApplyAffineTransform(*(CGPoint *)&v143, &v246);
      if (v149.x < 0.0 || v149.x >= 256.0)
        goto LABEL_61;
      if (v149.y < 0.0 || v149.y >= 192.0)
        goto LABEL_61;
      v148.n128_f64[0] = round(v149.x) + round(v149.y) * *(double *)&v239;
      if ((~v148.n128_u64[0] & 0x7FF0000000000000) == 0)
        goto LABEL_92;
      if (v148.n128_f64[0] <= -9.22337204e18)
        goto LABEL_93;
      if (v148.n128_f64[0] >= 9.22337204e18)
        goto LABEL_94;
      v152 = v129[(uint64_t)v148.n128_f64[0]];
      LODWORD(a5) = *((_DWORD *)v14 + (uint64_t)v148.n128_f64[0]);
      v148.n128_f32[0] = vabds_f32(*(float *)&a5, *(float *)&a6);
      if (v152 < 2 || v148.n128_f32[0] >= 0.15)
      {
LABEL_61:
        if (!v140)
          break;
        goto LABEL_62;
      }
      if (!*(_QWORD *)&v7[v233])
      {
        __break(1u);
        goto LABEL_106;
      }
      v154 = DepthProcessor.transformer.getter(v148);
      v241.a = v228;
      *(_QWORD *)&v241.b = v227.n128_u64[0];
      v241.c = v226;
      *(_QWORD *)&v241.d = v225.n128_u64[0];
      v241.tx = v224;
      *(_QWORD *)&v241.ty = v223.n128_u64[0];
      v242 = 0;
      v155.n128_f64[0] = (*(double (**)(CGAffineTransform *, double, double, float, __n128, __n128, __n128, __n128))(*(_QWORD *)v154 + 584))(&v241, v144, v146, *(float *)&a5, v232, v231, v230, v229);
      v236 = v155;
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
        v15 = sub_10005FAC4(0, *((_QWORD *)v15 + 2) + 1, 1, (uint64_t)v15);
      v157 = *((_QWORD *)v15 + 2);
      v156 = *((_QWORD *)v15 + 3);
      if (v157 >= v156 >> 1)
        v15 = sub_10005FAC4((double *)(v156 > 1), v157 + 1, 1, (uint64_t)v15);
      *((_QWORD *)v15 + 2) = v157 + 1;
      v158 = (__n128 *)&v15[6 * v157];
      v158[2] = v236;
      v158[3].n128_u32[0] = LODWORD(a5);
      v158[3].n128_f64[1] = v144;
      v158[4].n128_f64[0] = v146;
      v7 = v234;
      v129 = BaseAddress;
      if (!v140)
        break;
LABEL_62:
      --v140;
      v139 = __OFADD__(v24++, 1);
      if (v139)
      {
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
        goto LABEL_95;
      }
    }
    if (*((_QWORD *)v15 + 2) < 4uLL)
    {
      v130 = swift_bridgeObjectRelease(v15);
      if (v221 != 3)
      {
        v128 = v221 + 1;
        if (!__OFADD__(v221, 1))
          continue;
        goto LABEL_85;
      }
LABEL_86:
      if ((v206 & 1) != 0)
      {
        v41 = 1;
        v176 = v199;
        CVPixelBufferUnlockBaseAddress(v199, 1uLL);
        v177 = v205;
        CVPixelBufferUnlockBaseAddress(v205, 1uLL);

        v42 = 0;
        v27 = 0;
        a2 = v198;
        goto LABEL_14;
      }
    }
    else
    {
      v159 = swift_bridgeObjectRetain(v15);
      v160 = (__n128 *)SIMD3<>.zero.unsafeMutableAddressor(v159);
      v161 = *v160;
      v162 = *((_QWORD *)v15 + 2);
      if (v162)
      {
        v163 = (float *)(v15 + 5);
        do
        {
          v165.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v161.n128_u64[0], *(float32x2_t *)(v163 - 2));
          v164 = *v163;
          v163 += 12;
          v165.n128_f32[2] = v161.n128_f32[2] + v164;
          v165.n128_u32[3] = 0;
          v161 = v165;
          --v162;
        }
        while (v162);
      }
      else
      {
        v165 = *v160;
      }
      v236 = v165;
      v166 = swift_bridgeObjectRelease(v15);
      v167 = *((_QWORD *)v15 + 2);
      if (v167)
      {
        swift_bridgeObjectRetain(v15);
        v168 = v15 + 8;
        v169 = 0.0;
        v24 = v167;
        v170 = 0.0;
        do
        {
          v170 = static CGPoint.+ infix(_:_:)(v170, v169, *(v168 - 1), *v168);
          v169 = v171;
          v168 += 6;
          --v24;
        }
        while (v24);
        v166 = swift_bridgeObjectRelease(v15);
        v172 = *((_QWORD *)v15 + 2);
      }
      else
      {
        v172 = 0;
        v170 = 0.0;
        v169 = 0.0;
      }
      v166.n128_f32[0] = (float)v167;
      v173.n128_u64[0] = (unint64_t)vdiv_f32((float32x2_t)v236.n128_u64[0], (float32x2_t)vdup_lane_s32((int32x2_t)v166.n128_u64[0], 0));
      v173.n128_f32[2] = v236.n128_f32[2] / (float)v167;
      v173.n128_u32[3] = 0;
      v236 = v173;
      swift_bridgeObjectRelease(v15);
      v174 = CGPoint.divide(by:)((float)v172, v170, v169);
      v207 = v175;
      v208 = v174;
      v130 = v236;
      v209 = v236.n128_i64[1];
      v210 = v236.n128_u64[0];
      if (v221 != 3)
      {
        v206 = 0;
        v129 = BaseAddress;
        v128 = v221 + 1;
        if (!__OFADD__(v221, 1))
          continue;
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
    }
    break;
  }
  a2 = v198;
  v178 = v199;
  v179 = v200;
  if (!*(_QWORD *)&v7[v233])
    goto LABEL_109;
  v180 = DepthProcessor.transformer.getter(v130);
  v246.a = v228;
  *(_QWORD *)&v246.b = v227.n128_u64[0];
  v246.c = v226;
  *(_QWORD *)&v246.d = v225.n128_u64[0];
  v246.tx = v224;
  *(_QWORD *)&v246.ty = v223.n128_u64[0];
  v247 = 0;
  *(double *)&v181 = (*(double (**)(CGAffineTransform *, double, double, float, __n128, __n128, __n128, __n128))(*(_QWORD *)v180 + 584))(&v246, v208, v207, *(float *)&a6, v232, v231, v230, v229);
  v239 = v181;
  swift_release();
  v182 = v204;
  if (v7[v197] == 1)
  {
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    v183 = (void *)static OS_dispatch_queue.main.getter();
    v184 = swift_allocObject(&unk_100441600, 552, 15);
    *(_OWORD *)(v184 + 16) = v239;
    v185 = (uint64_t)v219;
    memcpy((void *)(v184 + 32), v219, 0x200uLL);
    *(_QWORD *)(v184 + 544) = v7;
    v240[4] = sub_1000648AC;
    v240[5] = v184;
    v240[0] = _NSConcreteStackBlock;
    v240[1] = 1107296256;
    v240[2] = sub_10003ECA0;
    v240[3] = &unk_100441618;
    v186 = _Block_copy(v240);
    v187 = v7;
    sub_1000471E8(v185);
    v188 = swift_release();
    v189 = v217;
    static DispatchQoS.unspecified.getter(v188);
    v240[0] = _swiftEmptyArrayStorage;
    v190 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v191 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v192 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
    v193 = v202;
    dispatch thunk of SetAlgebra.init<A>(_:)(v240, v191, v192, v202, v190);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v189, v182, v186);
    v194 = v186;
    v178 = v199;
    _Block_release(v194);

    (*((void (**)(char *, _QWORD *))v201 + 1))(v182, v193);
    v195 = v189;
    v179 = v200;
    (*(void (**)(char *, uint64_t))(v218 + 8))(v195, v203);
  }
  v27 = (__CVBuffer *)*((_QWORD *)&v239 + 1);
  CVPixelBufferUnlockBaseAddress(v178, 1uLL);
  v196 = v205;
  CVPixelBufferUnlockBaseAddress(v205, 1uLL);

  v41 = 0;
  v21 = vdupq_lane_s64(v239, 0);
  v21.i64[0] = v209;
  v42 = v210;
LABEL_15:
  *(_QWORD *)a2 = v42;
  *(int64x2_t *)(a2 + 8) = v21;
  *((_QWORD *)a2 + 3) = v27;
  a2[32] = v41;
}

void sub_10005B480(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  id v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;

  v26 = (char *)sub_1000501A0();
  v27 = (uint64_t)sub_1001B885C();
  v28 = v27;
  if ((unint64_t)v27 >> 62)
  {
    if (v27 >= 0)
      v27 &= 0xFFFFFFFFFFFFFF8uLL;
    v29 = _CocoaArrayWrapper.endIndex.getter(v27);
    if (!v29)
      goto LABEL_12;
  }
  else
  {
    v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v29)
    {
LABEL_12:
      swift_bridgeObjectRelease(v28);
      v33 = sub_1001B885C();
      swift_bridgeObjectRelease(v33);
      v34 = *(_QWORD *)&v26[qword_100489C30];
      *(_QWORD *)&v26[qword_100489C30] = _swiftEmptyArrayStorage;

      swift_bridgeObjectRelease(v34);
      v35 = sub_1000501A0();
      v36 = (void *)objc_opt_self(UIColor);
      v37 = objc_msgSend(v36, "redColor");
      sub_1001B73A8((uint64_t)v37, a1, a2, 3.0);

      v38 = sub_1000501A0();
      v39 = objc_msgSend(v36, "greenColor");
      sub_1001B73A8((uint64_t)v39, a3, a4, 3.0);

      v40 = sub_1000501A0();
      v41 = objc_msgSend(v36, "blueColor");
      sub_1001B73A8((uint64_t)v41, a5, a6, 3.0);

      v42 = sub_1000501A0();
      v43 = objc_msgSend(v36, "orangeColor");
      sub_1001B73A8((uint64_t)v43, a7, a8, 3.0);

      v44 = sub_1000501A0();
      v45 = objc_msgSend(v36, "yellowColor");
      sub_1001B73A8((uint64_t)v45, a9, a10, 3.0);

      return;
    }
  }
  if (v29 >= 1)
  {
    for (i = 0; i != v29; ++i)
    {
      if ((v28 & 0xC000000000000001) != 0)
        v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v28);
      else
        v31 = *(id *)(v28 + 8 * i + 32);
      v32 = v31;
      objc_msgSend(v31, "removeFromParent");

    }
    goto LABEL_12;
  }
  __break(1u);
}

void sub_10005B720(__n128 *a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  id v8;

  v3 = type metadata accessor for MeasureCamera(0);
  static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v3, a2, a1[11], a1[12], a1[13], a1[14], a1[2].n128_f64[0]);
  v5 = CGPoint.init(xy:)(v4);
  v7 = v6;
  v8 = sub_1000501A0();
  a2.n128_u64[0] = (unint64_t)objc_msgSend((id)objc_opt_self(UIColor), "grayColor");
  sub_1001B73A8(a2.n128_i64[0], v5, v7, 3.0);

}

void sub_10005B7C8(uint64_t a1, uint64_t a2, float a3, uint64_t a4, char a5, char a6)
{
  int v8;
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  __int128 v13;
  float v14;
  int v15;

  *(float *)(a1 + 436) = a3;
  *(_BYTE *)(a1 + 440) = 0;
  if ((*(_BYTE *)(a1 + 192) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = HIDWORD(a2);
    v10 = a1 + 440;
    *(double *)&v11 = simd_float4x4.position.getter(*(__n128 *)(a1 + 128), *(__n128 *)(a1 + 144), *(__n128 *)(a1 + 160), *(__n128 *)(a1 + 176));
    v12.f32[0] = a3 * 0.0;
    v12.f32[1] = a3;
    *(float32x2_t *)&v13 = vsub_f32(v11, v12);
    *((float *)&v13 + 2) = v14 - (float)(a3 * 0.0);
    HIDWORD(v13) = 0;
    *(_OWORD *)(a1 + 512) = v13;
    *(_BYTE *)(v10 + 88) = 0;
    v15 = v8;
    if ((a5 & 1) != 0)
      v15 = 0;
    *(_DWORD *)(a1 + 444) = v15;
    *(_BYTE *)(v10 + 8) = a5 & 1;
    *(_BYTE *)(a1 + 529) = a6;
  }
}

void sub_10005B8A8(uint64_t a1)
{
  sub_10005B8D0(a1, (unint64_t)&type metadata accessor for MeasureObject, (uint64_t)sub_1000281FC);
}

void sub_10005B8BC(uint64_t a1)
{
  sub_10005B8D0(a1, (unint64_t)&type metadata accessor for WorldLine, (uint64_t)sub_100028318);
}

void sub_10005B8D0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  char v12;
  id v13;
  void *v14;
  char v15;
  id v16;
  void *v17;
  char v18;
  uint64_t v19;
  void (*v20)(unint64_t);

  v7 = *v3;
  if ((unint64_t)*v3 >> 62)
    goto LABEL_26;
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v8)
    return;
  while (1)
  {
    v9 = v7 & 0xC000000000000001;
    v20 = (void (*)(unint64_t))a3;
    if ((v7 & 0xC000000000000001) == 0)
      break;
    v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
LABEL_6:
    v11 = v10;
    ((void (*)(_QWORD))a2)(0);
    v12 = static NSObject.== infix(_:_:)(v11, a1);

    a2 = 0;
    if ((v12 & 1) != 0)
      goto LABEL_7;
    if (v8 == 1)
      return;
    if (v9)
    {
      v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v7);
    }
    else
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
        goto LABEL_35;
      v13 = *(id *)(v7 + 40);
    }
    v14 = v13;
    v15 = static NSObject.== infix(_:_:)(v13, a1);

    if ((v15 & 1) != 0)
    {
      a2 = 1;
LABEL_7:
      v20(a2);
      return;
    }
    a3 = 1;
    while (1)
    {
      a2 = a3 + 1;
      if (__OFADD__(a3, 1))
        break;
      if (a2 == v8)
        return;
      if (v9)
      {
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a3 + 1, v7);
      }
      else
      {
        if ((a2 & 0x8000000000000000) != 0)
          goto LABEL_33;
        if (a2 >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_34;
        v16 = *(id *)(v7 + 32 + 8 * a2);
      }
      v17 = v16;
      v18 = static NSObject.== infix(_:_:)(v16, a1);

      ++a3;
      if ((v18 & 1) != 0)
        goto LABEL_7;
    }
    __break(1u);
LABEL_26:
    if (v7 < 0)
      v19 = v7;
    else
      v19 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v7);
    if (!v8)
      return;
  }
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v10 = *(id *)(v7 + 32);
    goto LABEL_6;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

void sub_10005BAB8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  v8 = (void *)static OS_dispatch_queue.main.getter();
  v9 = swift_allocObject(&unk_1004416C8, 24, 7);
  *(_QWORD *)(v9 + 16) = v0;
  aBlock[4] = sub_1000649B4;
  v30 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_1004416E0;
  v10 = _Block_copy(aBlock);
  v11 = v30;
  v12 = v1;
  v13 = swift_release(v11);
  static DispatchQoS.unspecified.getter(v13);
  aBlock[0] = _swiftEmptyArrayStorage;
  v14 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v16 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v15, v16, v2, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v27);
  v17 = MTLCreateSystemDefaultDevice();
  if (!v17)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v18 = qword_10047DFC8;
  v19 = *(_QWORD *)&v12[qword_10047DFC8];
  *(_QWORD *)&v12[qword_10047DFC8] = v17;
  swift_unknownObjectRelease(v19);
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  if (!*((_QWORD *)&xmmword_1004AF228 + 1))
    goto LABEL_8;
  v20 = *((id *)&xmmword_1004AF228 + 1);
  v21 = sub_1001CA894();

  v22 = *(void **)&v12[v18];
  if (v22)
  {
    v23 = type metadata accessor for PersonHeightDebugNode();
    swift_allocObject(v23, 136, 15);
    v24 = v12;
    swift_unknownObjectRetain(v22);
    sub_10013395C(v21, v24, v22);
    v25 = *(_QWORD *)&v24[qword_10047DFD0];
    *(_QWORD *)&v24[qword_10047DFD0] = v26;
    swift_release(v25);
    return;
  }
LABEL_9:
  __break(1u);
}

void sub_10005BDA4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  double MaxY;
  CGFloat v5;
  id v6;
  void *v7;
  CGRect v8;
  CGRect v9;
  CGRect v10;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  v2 = qword_1004AF238;
  if (!qword_1004AF238)
  {
    __break(1u);
    goto LABEL_12;
  }
  v3 = *(void **)(qword_1004AF238 + 88);
  if (!v3)
  {
    objc_msgSend(*(id *)(a1 + qword_10047DFC0), "frame", swift_retain(qword_1004AF238).n128_f64[0]);
LABEL_8:
    v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PersonHeightDebugStatsView(0)), "initWithFrame:", v10.origin.x, v10.origin.y, v10.size.width, v10.size.height);
    v7 = *(void **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = v6;
    swift_release(v2);

    if (qword_1004AF238)
    {
      if (*(_QWORD *)(qword_1004AF238 + 24))
      {
        objc_msgSend(*(id *)(qword_1004AF238 + 16), "addSubview:");
        return;
      }
      goto LABEL_13;
    }
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(v3, "frame");
  MaxY = CGRectGetMaxY(v8);
  v2 = qword_1004AF238;
  if (qword_1004AF238)
  {
    v5 = MaxY;
    objc_msgSend(*(id *)(a1 + qword_10047DFC0), "frame", swift_retain(qword_1004AF238).n128_f64[0]);
    v10 = CGRectOffset(v9, 0.0, v5);
    goto LABEL_8;
  }
LABEL_14:
  __break(1u);
}

uint64_t sub_10005BEFC(uint64_t a1, char a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_BYTE *);
  void (*v8)(_BYTE *, _QWORD);
  BOOL *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *);
  void (*v13)(_BYTE *, _QWORD);
  uint64_t v14;
  _BYTE v15[32];

  v4 = ~a2;
  v5 = qword_10047DED8;
  v6 = *(_QWORD *)(a1 + qword_10047DED8);
  v7 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 400);
  swift_retain(v6);
  v8 = (void (*)(_BYTE *, _QWORD))v7(v15);
  *v9 = (a2 & 1) == 0;
  v8(v15, 0);
  result = swift_release(v6);
  if ((v4 & 1) == 0)
  {
    v11 = *(_QWORD *)(a1 + v5);
    v12 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 400);
    swift_retain(v11);
    v13 = (void (*)(_BYTE *, _QWORD))v12(v15);
    *(_BYTE *)(v14 + 1) = 0;
    v13(v15, 0);
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_10005BFBC(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  void *v12;
  void *v13;
  void *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  void **aBlock;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  void *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_BYTE **)(v1 + qword_10047DFD0);
  v21 = v4;
  if ((a1 & 1) != 0)
  {
    if (v11)
    {
      swift_beginAccess(v11 + 32, v30, 1, 0);
      v11[32] = 0;
      swift_beginAccess(v11 + 33, v29, 1, 0);
      v11[33] = 0;
      swift_beginAccess(v11 + 34, v28, 1, 0);
      v11[34] = 0;
    }
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    v12 = (void *)static OS_dispatch_queue.main.getter();
    v26 = sub_10005C2AC;
    v27 = 0;
    aBlock = _NSConcreteStackBlock;
    v23 = 1107296256;
    v13 = &unk_100441730;
  }
  else
  {
    if (v11)
    {
      swift_beginAccess(v11 + 32, v30, 1, 0);
      v11[32] = 1;
      swift_beginAccess(v11 + 33, v29, 1, 0);
      v11[33] = 1;
      swift_beginAccess(v11 + 34, v28, 1, 0);
      v11[34] = 1;
    }
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    v12 = (void *)static OS_dispatch_queue.main.getter();
    v26 = sub_10005C30C;
    v27 = 0;
    aBlock = _NSConcreteStackBlock;
    v23 = 1107296256;
    v13 = &unk_100441708;
  }
  v24 = sub_10003ECA0;
  v25 = v13;
  v14 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter(v15);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v16 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v18 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v14);
  v19 = v21;
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_10005C2AC()
{
  void *v0;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  if (qword_1004AF238)
  {
    v0 = *(void **)(qword_1004AF238 + 24);
    if (v0)
      objc_msgSend(v0, "removeFromSuperview");
  }
  else
  {
    __break(1u);
  }
}

id sub_10005C30C()
{
  id result;

  if (qword_10047A930 != -1)
    result = (id)swift_once(&qword_10047A930, sub_100083368);
  if (qword_1004AF238)
  {
    if (*(_QWORD *)(qword_1004AF238 + 24))
      return objc_msgSend(*(id *)(qword_1004AF238 + 16), "addSubview:");
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10005C36C(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  _BYTE *v12;
  uint64_t v13;
  void (*v14)(_QWORD *__return_ptr, __n128);
  __n128 v15;
  uint64_t v16;
  char *v17;
  id *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  _QWORD *v27;
  void *v28;
  char v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void *v39;
  id v40;
  double v41;
  double v42;
  _QWORD __src[68];
  _QWORD __dst[67];
  char v45[24];

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v45, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v9, v10);
  if (!Strong)
    return;
  v12 = (_BYTE *)Strong;
  swift_retain();
  Synchronized.wrappedValue.getter(__dst, v13);
  swift_release();
  if ((__dst[8] & 1) == 0)
  {
    v4 = *(double *)__dst;
    v5 = *(double *)&__dst[1];
    v6 = *(double *)&__dst[2];
    v7 = *(double *)&__dst[3];
    v8 = *(double *)&__dst[4];
    v1 = *(double *)&__dst[5];
    v2 = *(double *)&__dst[6];
    v3 = *(double *)&__dst[7];
    v14 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)&v12[qword_10047DED8] + 144);
    v15 = swift_retain();
    v14(__src, v15);
    swift_release();
    memcpy(__dst, __src, 0x213uLL);
    sub_1000642CC((uint64_t)__dst);
    if ((__dst[49] & 1) == 0)
    {
      CGRect.center.getter(*(double *)&__dst[45], *(double *)&__dst[46], *(double *)&__dst[47], *(double *)&__dst[48]);
      if (qword_10047A930 != -1)
        goto LABEL_32;
      v21 = qword_1004AF238;
      if (qword_1004AF238)
        goto LABEL_10;
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      return;
    }
  }
  if (qword_10047A930 != -1)
    goto LABEL_30;
  v16 = qword_1004AF238;
  if (!qword_1004AF238)
    goto LABEL_31;
LABEL_6:
  v17 = *(char **)(v16 + 24);
  if (v17)
  {
    v18 = (id *)&v17[qword_100484D88];
    v19 = *(void **)&v17[qword_100484D88];
    v20 = v17;
    objc_msgSend(v19, "removeFromSuperview");
    objc_msgSend(v18[1], "removeFromSuperview");
    objc_msgSend(v18[2], "removeFromSuperview");
    objc_msgSend(v18[3], "removeFromSuperview");
    objc_msgSend(*(id *)&v20[qword_100484D98], "removeFromSuperview");

  }
  while (qword_10047A930 == -1)
  {
    v24 = qword_1004AF238;
    if (qword_1004AF238)
      goto LABEL_14;
LABEL_29:
    __break(1u);
LABEL_30:
    swift_once(&qword_10047A930, sub_100083368);
    v16 = qword_1004AF238;
    if (qword_1004AF238)
      goto LABEL_6;
LABEL_31:
    __break(1u);
LABEL_32:
    swift_once(&qword_10047A930, sub_100083368);
    v21 = qword_1004AF238;
    if (!qword_1004AF238)
      goto LABEL_33;
LABEL_10:
    v22 = *(void **)(v21 + 24);
    if (v22)
    {
      v41 = v2;
      v42 = v3;
      v3 = v1;
      v1 = *(double *)&v12[qword_10047DF10] * 0.5;
      v2 = *(double *)&v12[qword_10047DF10 + 8] * 0.5;
      v23 = v22;
      sub_10012A890(v4, v5, v6, v7, v8, v3, v41, v42, v1, v2);

    }
  }
  swift_once(&qword_10047A930, sub_100083368);
  v24 = qword_1004AF238;
  if (!qword_1004AF238)
    goto LABEL_29;
LABEL_14:
  v25 = *(void **)(v24 + 24);
  if (v25)
  {
    v26 = v25;
    v27 = (_QWORD *)sub_10005054C();
    sub_100127400(v27);

    v24 = qword_1004AF238;
    if (!qword_1004AF238)
      goto LABEL_34;
  }
  v28 = *(void **)(v24 + 24);
  if (v28)
  {
    v29 = v12[qword_10047DF18];
    v30 = v28;
    sub_1001275C8(v29);

    v24 = qword_1004AF238;
    if (!qword_1004AF238)
      goto LABEL_35;
  }
  v31 = *(void **)(v24 + 24);
  if (v31)
  {
    v32 = v31;
    sub_100127B88();

    v24 = qword_1004AF238;
    if (!qword_1004AF238)
      goto LABEL_36;
  }
  v33 = *(void **)(v24 + 24);
  if (v33)
  {
    v34 = v33;
    sub_100128180();

    v24 = qword_1004AF238;
    if (!qword_1004AF238)
      goto LABEL_37;
  }
  v35 = *(void **)(v24 + 24);
  if (v35)
  {
    v36 = *(_QWORD *)&v12[qword_10047E028];
    v37 = v35;
    v38 = swift_bridgeObjectRetain(v36);
    sub_100128274(v38);

    swift_bridgeObjectRelease(v36);
    v24 = qword_1004AF238;
    if (!qword_1004AF238)
      goto LABEL_38;
  }
  v39 = *(void **)(v24 + 24);
  if (v39)
  {
    v40 = v39;
    sub_100128400();

  }
}

void sub_10005C71C()
{
  _swift_stdlib_reportUnimplementedInitializer("Measure.PersonHeightInstrument", 30, "init()", 6, 0);
  __break(1u);
}

double sub_10005C748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, __n128);
  __n128 v4;
  double result;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100036600(v0 + qword_10047DF20, &qword_10047E558);
  swift_release();

  v1 = v0 + qword_10047DF38;
  v2 = type metadata accessor for Date(0);
  v3 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v2 - 8) + 8);
  ((void (*)(uint64_t, uint64_t))v3)(v1, v2);
  sub_100036600(v0 + qword_10047DF48, (uint64_t *)&unk_10047E440);
  sub_100036600(v0 + qword_10047DF50, (uint64_t *)&unk_10047E440);
  swift_release();
  v4 = swift_release();
  v3(v0 + qword_10047DF70, v2, v4);
  swift_release();
  sub_100036600(v0 + qword_10047DF80, (uint64_t *)&unk_10047E440);
  swift_release();

  sub_100036600(v0 + qword_10047DF98, (uint64_t *)&unk_10047E440);
  sub_100036600(v0 + qword_10047DFA0, (uint64_t *)&unk_10047E440);
  sub_100036600(v0 + qword_10047DFA8, (uint64_t *)&unk_10047E440);
  sub_100036600(v0 + qword_10047DFB0, (uint64_t *)&unk_10047E440);

  swift_unknownObjectRelease(*(_QWORD *)(v0 + qword_10047DFC8));
  swift_release();

  ((void (*)(uint64_t, uint64_t))v3)(v0 + qword_10047DFE0, v2);
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_10047E028));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_10005CA44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, __n128);
  __n128 v5;
  double result;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100036600(a1 + qword_10047DF20, &qword_10047E558);
  swift_release();

  v2 = a1 + qword_10047DF38;
  v3 = type metadata accessor for Date(0);
  v4 = *(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v3 - 8) + 8);
  ((void (*)(uint64_t, uint64_t))v4)(v2, v3);
  sub_100036600(a1 + qword_10047DF48, (uint64_t *)&unk_10047E440);
  sub_100036600(a1 + qword_10047DF50, (uint64_t *)&unk_10047E440);
  swift_release();
  v5 = swift_release();
  v4(a1 + qword_10047DF70, v3, v5);
  swift_release();
  sub_100036600(a1 + qword_10047DF80, (uint64_t *)&unk_10047E440);
  swift_release();

  sub_100036600(a1 + qword_10047DF98, (uint64_t *)&unk_10047E440);
  sub_100036600(a1 + qword_10047DFA0, (uint64_t *)&unk_10047E440);
  sub_100036600(a1 + qword_10047DFA8, (uint64_t *)&unk_10047E440);
  sub_100036600(a1 + qword_10047DFB0, (uint64_t *)&unk_10047E440);

  swift_unknownObjectRelease(*(_QWORD *)(a1 + qword_10047DFC8));
  swift_release();

  ((void (*)(uint64_t, uint64_t))v4)(a1 + qword_10047DFE0, v3);
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_10047E028));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t type metadata accessor for PersonHeightInstrument(uint64_t a1)
{
  uint64_t result;

  result = qword_10047E068;
  if (!qword_10047E068)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PersonHeightInstrument);
  return result;
}

void sub_10005CD80(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[20];
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  char *v36;
  char *v37;
  char *v38;
  void *v39;
  char *v40;

  v9[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[12] = &unk_1003B2A98;
  v9[13] = &unk_1003B2AB0;
  sub_10005CF4C(319);
  if (v3 <= 0x3F)
  {
    v9[14] = *(_QWORD *)(v2 - 8) + 64;
    v9[15] = &unk_1003B2AC8;
    v9[16] = (char *)&value witness table for Builtin.NativeObject + 64;
    v9[17] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v6 = *(_QWORD *)(v4 - 8) + 64;
      v9[18] = v6;
      v9[19] = (char *)&value witness table for Builtin.Int64 + 64;
      sub_10005CFA4(319);
      if (v8 <= 0x3F)
      {
        v10 = *(_QWORD *)(v7 - 8) + 64;
        v11 = v10;
        v12 = &unk_1003B2AE0;
        v13 = (char *)&value witness table for Builtin.NativeObject + 64;
        v14 = (char *)&value witness table for Builtin.NativeObject + 64;
        v15 = v6;
        v16 = (char *)&value witness table for Builtin.NativeObject + 64;
        v17 = v10;
        v18 = (char *)&value witness table for Builtin.NativeObject + 64;
        v19 = (char *)&value witness table for Builtin.UnknownObject + 64;
        v20 = v10;
        v21 = v10;
        v22 = v10;
        v23 = v10;
        v24 = &unk_1003B2AF8;
        v25 = (char *)&value witness table for Builtin.UnknownObject + 64;
        v26 = &unk_1003B2AF8;
        v27 = &unk_1003B2AF8;
        v28 = &unk_1003B2AF8;
        v29 = v6;
        v30 = &unk_1003B2AF8;
        v31 = &unk_1003B2B10;
        v32 = &unk_1003B2B10;
        v33 = &unk_1003B2B10;
        v34 = &unk_1003B2AF8;
        v35 = &unk_1003B2AB0;
        v36 = (char *)&value witness table for Builtin.NativeObject + 64;
        v37 = (char *)&value witness table for Builtin.NativeObject + 64;
        v38 = (char *)&value witness table for Builtin.BridgeObject + 64;
        v39 = &unk_1003B2AC8;
        v40 = (char *)&value witness table for Builtin.NativeObject + 64;
        swift_initClassMetadata2(a1, 256, 51, v9, a1 + 200);
      }
    }
  }
}

id sub_10005CEFC@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047AAD8 != -1)
    swift_once(&qword_10047AAD8, sub_1000EBDC8);
  v2 = (void *)qword_1004AF630;
  *a1 = qword_1004AF630;
  return v2;
}

void sub_10005CF4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10047E078)
  {
    v2 = sub_100012B80(&qword_10047E080);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10047E078);
  }
}

void sub_10005CFA4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10047E088)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10047E088);
  }
}

uint64_t sub_10005CFF8()
{
  return type metadata accessor for PersonHeightInstrument(0);
}

uint64_t sub_10005D000@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10047A8C8 != -1)
    swift_once(&qword_10047A8C8, sub_100050130);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_1000362E8(v2, (uint64_t)qword_1004AF1F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10005D070()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + qword_1004AF218);
}

uint64_t sub_10005D080()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10000EDC8(&qword_10047E470);
  v1 = sub_100043310(&qword_10047E478, &qword_10047E470, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t sub_10005D0F4(char a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  __n128 v6;

  v3 = swift_allocObject(&unk_100441218, 25, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = a1;
  v4 = sub_10000EDC8((uint64_t *)&unk_10047E420);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = v1;
  return Future.init(_:)(sub_10005EDF0, v3, v6);
}

void sub_10005D16C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  id v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  _QWORD *v31;

  v2 = type metadata accessor for ARPlaneAnchor.Classification(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = 0;
  v31 = &_swiftEmptyArrayStorage;
  v7 = *(_QWORD *)(a1 + 64);
  v28 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v29 = (unint64_t)(v8 + 63) >> 6;
  v11 = enum case for ARPlaneAnchor.Classification.floor(_:);
  if ((v9 & v7) != 0)
    goto LABEL_6;
LABEL_7:
  v14 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v14 < v29)
    {
      v15 = *(_QWORD *)(v28 + 8 * v14);
      ++v6;
      if (v15)
        goto LABEL_22;
      v6 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_26;
      v15 = *(_QWORD *)(v28 + 8 * v6);
      if (v15)
        goto LABEL_22;
      v6 = v14 + 2;
      if (v14 + 2 >= v29)
        goto LABEL_26;
      v15 = *(_QWORD *)(v28 + 8 * v6);
      if (v15)
        goto LABEL_22;
      v6 = v14 + 3;
      if (v14 + 3 >= v29)
        goto LABEL_26;
      v15 = *(_QWORD *)(v28 + 8 * v6);
      if (v15)
      {
LABEL_22:
        v10 = (v15 - 1) & v15;
        for (i = __clz(__rbit64(v15)) + (v6 << 6); ; i = v12 | (v6 << 6))
        {
          v17 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * i);
          ARPlaneAnchor.classification.getter();
          v18 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
          if ((_DWORD)v18 == (_DWORD)v11)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
            v30 = v6;
            v19 = v5;
            v20 = v2;
            v21 = v3;
            v22 = v11;
            v23 = a1;
            v24 = v31[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
            v25 = v24;
            a1 = v23;
            v11 = v22;
            v3 = v21;
            v2 = v20;
            v5 = v19;
            v6 = v30;
            v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v17);
            specialized ContiguousArray._endMutation()(v26);
            if (!v10)
              goto LABEL_7;
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);

            if (!v10)
              goto LABEL_7;
          }
LABEL_6:
          v12 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
        }
      }
      v16 = v14 + 4;
      if (v16 < v29)
      {
        v15 = *(_QWORD *)(v28 + 8 * v16);
        if (v15)
        {
          v6 = v16;
          goto LABEL_22;
        }
        while (1)
        {
          v6 = v16 + 1;
          if (__OFADD__(v16, 1))
            goto LABEL_28;
          if (v6 >= v29)
            break;
          v15 = *(_QWORD *)(v28 + 8 * v6);
          ++v16;
          if (v15)
            goto LABEL_22;
        }
      }
    }
LABEL_26:
    swift_release(a1);
    return;
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

BOOL sub_10005D3F8(float a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  _QWORD v8[2];
  uint64_t v9;

  v3 = *(_QWORD *)(*v1 + qword_10047DF88);
  v4 = swift_retain(v3);
  Synchronized.wrappedValue.getter(v8, v4);
  swift_release(v3);
  v5 = v9;
  v6 = RingBuffer<A>.average()(v8[0], v8[1], v9);
  swift_bridgeObjectRelease(v5);
  return v6 < (float)(a1 + 1.5);
}

BOOL sub_10005D478(float a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  _QWORD v8[2];
  uint64_t v9;

  v3 = *(_QWORD *)(*v1 + qword_10047DF88);
  v4 = swift_retain(v3);
  Synchronized.wrappedValue.getter(v8, v4);
  swift_release(v3);
  v5 = v9;
  v6 = RingBuffer<A>.average()(v8[0], v8[1], v9);
  swift_bridgeObjectRelease(v5);
  return (float)(3.0 - a1) < v6;
}

BOOL sub_10005D4F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  _QWORD v6[2];
  uint64_t v7;

  v1 = *(_QWORD *)(*v0 + qword_10047DF88);
  v2 = swift_retain(v1);
  Synchronized.wrappedValue.getter(v6, v2);
  swift_release(v1);
  v3 = v7;
  v4 = RingBuffer<A>.average()(v6[0], v6[1], v7);
  swift_bridgeObjectRelease(v3);
  return v4 > 5.0;
}

void *sub_10005D570(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *result;
  uint64_t (*v9)(void);
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  v4 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  __chkstk_darwin(v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v14, 0, 0);
  result = (void *)swift_unknownObjectWeakLoadStrong(a1, v7);
  if (result)
  {

    v9 = *(uint64_t (**)(void))((swift_isaMask & *a2) + 0xD0);
    result = (void *)v9();
    if (result != (void *)6)
    {
      result = (void *)v9();
      if (result != (void *)5)
      {
        if (qword_10047AA20 != -1)
          swift_once(&qword_10047AA20, sub_1000E1068);
        v10._object = (void *)0x80000001003DB290;
        v10._countAndFlagsBits = 0xD000000000000019;
        Log.debug(_:isPrivate:)(v10, 0);
        v11 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a2) + 0xD8))(6);
        Date.init()(v11);
        v12 = type metadata accessor for Date(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 0, 1, v12);
        return (void *)(*(uint64_t (**)(char *))((swift_isaMask & *a2) + 0x248))(v6);
      }
    }
  }
  return result;
}

uint64_t sub_10005D6E4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t Strong;
  char *v16;
  uint64_t v17;
  char v18;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  uint64_t v31;
  double v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  double v35;
  _QWORD v36[8];
  char v37;
  _BYTE v38[24];

  v4 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v34 - v12;
  a1 += 16;
  swift_beginAccess(a1, v38, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v14);
  if (!Strong)
    goto LABEL_4;
  v16 = (char *)Strong;
  swift_retain();
  Synchronized.wrappedValue.getter(v36, v17);
  swift_release();
  if ((v37 & 1) != 0)
  {

LABEL_4:
    v18 = 0;
    return v18 & 1;
  }
  v20 = *(double *)v36;
  v21 = *(double *)&v36[1];
  v22 = *(double *)&v36[2];
  v23 = *(double *)&v36[3];
  v24 = *(double *)&v36[4];
  v25 = *(double *)&v36[5];
  v26 = *(double *)&v36[7];
  v35 = *(double *)&v36[6];
  v27 = COERCE_FLOAT32X2_T(SIMD2<>.init(_:)(*(double *)&v16[qword_10047DF10] * 0.5, *(double *)&v16[qword_10047DF10 + 8] * 0.5));
  v28 = COERCE_FLOAT32X2_T(SIMD2<>.init(_:)(v20, v21));
  SIMD2<>.init(_:)(v22, v23);
  v29 = COERCE_FLOAT32X2_T(SIMD2<>.init(_:)(v24, v25));
  *(double *)&v30 = SIMD2<>.init(_:)(v35, v26);
  v18 = sub_10010E2D4(v27, v28, v29, v30);
  (*(void (**)(void))((swift_isaMask & *a2) + 0x240))();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {

    sub_100036600((uint64_t)v6, (uint64_t *)&unk_10047E440);
  }
  else
  {
    v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
    Date.init()(v31);
    v32 = Date.timeIntervalSince(_:)(v13);

    v33 = *(void (**)(char *, uint64_t))(v8 + 8);
    v33(v11, v7);
    v33(v13, v7);
    v18 |= v32 < 3.0;
  }
  return v18 & 1;
}

double sub_10005D978(unint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(void);
  double result;
  Swift::String v6;
  uint64_t v7;
  void (*v8)(unint64_t *, __n128);
  _QWORD *v9;
  __n128 v10;
  unint64_t v11;

  v4 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)a1) + 0xD0);
  if (v4() == 6 || v4() == 5)
  {
    if (qword_10047AA20 != -1)
      swift_once(&qword_10047AA20, sub_1000E1068);
    v6._object = (void *)0x80000001003DB250;
    v6._countAndFlagsBits = 0xD00000000000003ALL;
    Log.debug(_:isPrivate:)(v6, 0);
    (*(void (**)(uint64_t))((swift_isaMask & *(_QWORD *)a1) + 0xD8))(5);
    v7 = *(_QWORD *)(a2 + qword_10047DF00);
    v11 = a1 | 0x8000000000000000;
    v8 = *(void (**)(unint64_t *, __n128))(*(_QWORD *)v7 + 392);
    v9 = (id)a1;
    v10 = swift_retain();
    v8(&v11, v10);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_10005DA84(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  double result;
  void *v7;
  Swift::String v8;
  char v9;
  _BYTE v10[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    v7 = (void *)Strong;
    if (qword_10047AA20 != -1)
      swift_once(&qword_10047AA20, sub_1000E1068);
    v8._object = (void *)0x80000001003DB220;
    v8._countAndFlagsBits = 0xD000000000000023;
    Log.debug(_:isPrivate:)(v8, 0);
    sub_10005DB64(a2);
    v9 = 1;
    swift_retain();
    Synchronized.wrappedValue.setter(&v9);

    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

void sub_10005DB64(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  _QWORD v28[64];
  _OWORD v29[32];
  double v30[64];
  CGPoint v31;

  v2 = v1;
  v4 = sub_10000EDC8(&qword_10047E558);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MeasureCamera(0);
  v7.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *a1) + 0x210))();
  v11.n128_f64[0] = simd_float4x4.position.getter(v7, v8, v9, v10);
  v27 = v11;
  swift_retain();
  StateValue.wrappedValue.getter(v30, v12);
  swift_release();
  memcpy(v29, v30, sizeof(v29));
  sub_100012C00((uint64_t)v29);
  v25 = (__n128)v29[12];
  v26 = (__n128)v29[11];
  v23 = (__n128)v29[14];
  v24 = (__n128)v29[13];
  swift_retain();
  StateValue.wrappedValue.getter(v28, v13);
  swift_release();
  memcpy(v30, v28, sizeof(v30));
  v14 = sub_100012C00((uint64_t)v30);
  static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v14, v27, v26, v25, v24, v23, v30[4]);
  v16 = CGPoint.init(xy:)(v15);
  v18 = v17;
  if (qword_10047B190 != -1)
    swift_once(&qword_10047B190, sub_1001C81CC);
  if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v31.x = v16;
    v31.y = v18;
    if (CGRectContainsPoint(*(CGRect *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48), v31))
    {
      v19 = sub_10000EDC8(&qword_10047E080);
      v20 = *(int *)(v19 + 48);
      Date.init()(v19);
      *(_QWORD *)&v6[v20] = a1;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 0, 1, v19);
      v21 = v2 + qword_10047DF20;
      swift_beginAccess(v2 + qword_10047DF20, v28, 33, 0);
      v22 = a1;
      sub_10006494C((uint64_t)v6, v21, &qword_10047E558);
      swift_endAccess(v28);
    }
  }
}

double sub_10005DDA8(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  float32x4_t v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v15;
  float32x4_t v16;
  _QWORD __src[64];
  __n128 __dst[32];

  swift_retain();
  StateValue.wrappedValue.getter(__src, v3);
  swift_release();
  memcpy(__dst, __src, sizeof(__dst));
  sub_100012C00((uint64_t)__dst);
  v4 = SCNMatrix4.init(_:)(__src, __dst[21], __dst[22], __dst[23], __dst[24]);
  *(double *)v5.i64 = SCNMatrix4.forward.getter(v4);
  v16 = v5;
  v6.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *a2) + 0x210))();
  *(double *)v10.i64 = simd_float4x4.position.getter(v6, v7, v8, v9);
  v15 = v10;
  *(double *)v12.i64 = SCNMatrix4.position.getter(v11);
  v13 = vmulq_f32(v16, vsubq_f32(v15, v12));
  return fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
}

void sub_10005DE84(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  double (*v7)(void);
  id v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  double v13;
  double v14;
  _BYTE v15[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    v7 = *(double (**)(void))((swift_isaMask & *a2) + 0x210);
    v8 = *(id *)(Strong + qword_10047DFC0);
    v9.n128_f64[0] = v7();
    v13 = simd_float4x4.position.getter(v9, v10, v11, v12);
    SCNVector3.init(_:)(v13);
    objc_msgSend(v8, "projectPoint:");

    if (qword_10047B190 != -1)
      swift_once(&qword_10047B190, sub_1001C81CC);
    if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v14 = CGRect.center.getter(*(double *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48), *(double *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 56), *(double *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 64), *(double *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 72));
      static CGPoint.- infix(_:_:)(v14);
      CGPoint.length()();

    }
  }
}

double sub_10005DFBC()
{
  return 1.0;
}

uint64_t sub_10005DFC4(uint64_t a1, uint64_t a2)
{
  return sub_1000633E0(*(float32_t *)a1, *(int32x4_t *)(a1 + 16), *(float32x4_t *)(a1 + 32), *(float32_t *)a2, *(int32x4_t *)(a2 + 16), *(float32x4_t *)(a2 + 32));
}

void sub_10005DFD8()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  _QWORD v17[2];
  uint64_t v18;
  double *v19;

  swift_retain();
  Synchronized.wrappedValue.getter(v17, v0);
  swift_release();
  v1 = v18;
  v2 = *(_QWORD *)(v18 + 16);
  if (!v2)
  {
    swift_bridgeObjectRelease(v18);
    return;
  }
  v3 = v17[0];
  v4 = v17[1];
  v19 = _swiftEmptyArrayStorage;
  sub_1000A567C(0, v2, 0);
  v5 = 0;
  v6 = v19;
  do
  {
    RingBuffer.subscript.getter(v17, v5, v3, v4, v1, &type metadata for PersonHeightInstrument.HeightResultContainer.HeightResult);
    v7 = v17[0];
    v19 = v6;
    v9 = *((_QWORD *)v6 + 2);
    v8 = *((_QWORD *)v6 + 3);
    if (v9 >= v8 >> 1)
    {
      sub_1000A567C((char *)(v8 > 1), v9 + 1, 1);
      v6 = v19;
    }
    ++v5;
    *((_QWORD *)v6 + 2) = v9 + 1;
    *((_DWORD *)v6 + v9 + 8) = v7;
  }
  while (v2 != v5);
  if (v9)
  {
    v10 = (v9 + 1) & 0x7FFFFFFFFFFFFFFELL;
    v11 = (float *)v6 + 9;
    v12 = 0.0;
    v13 = v10;
    do
    {
      v12 = (float)(v12 + *(v11 - 1)) + *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    if (v9 + 1 == v10)
      goto LABEL_15;
  }
  else
  {
    v10 = 0;
    v12 = 0.0;
  }
  v14 = v9 - v10 + 1;
  v15 = (float *)v6 + v10 + 8;
  do
  {
    v16 = *v15++;
    v12 = v12 + v16;
    --v14;
  }
  while (v14);
LABEL_15:
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v6);
}

double sub_10005E178()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  char *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  float *v14;
  float v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int32x2_t v19;
  __int128 v21;
  float32x2_t v22;
  _QWORD v23[2];
  __int128 v24;
  double *v25;

  swift_retain();
  Synchronized.wrappedValue.getter(v23, v0);
  swift_release();
  v1 = v24;
  v2 = *(_QWORD *)(v24 + 16);
  if (v2)
  {
    v3 = v23[0];
    v4 = v23[1];
    v25 = _swiftEmptyArrayStorage;
    sub_1000A5698(0, v2, 0);
    v5 = 0;
    v6 = v25;
    do
    {
      v7 = (char *)RingBuffer.subscript.getter(v23, v5, v3, v4, v1, &type metadata for PersonHeightInstrument.HeightResultContainer.HeightResult);
      v8 = v24;
      v25 = v6;
      v10 = *((_QWORD *)v6 + 2);
      v9 = *((_QWORD *)v6 + 3);
      if (v10 >= v9 >> 1)
      {
        v21 = v24;
        v7 = sub_1000A5698((char *)(v9 > 1), v10 + 1, 1);
        v8 = v21;
        v6 = v25;
      }
      ++v5;
      *((_QWORD *)v6 + 2) = v10 + 1;
      *(_OWORD *)&v6[2 * v10 + 4] = v8;
    }
    while (v2 != v5);
    v11 = (__int128 *)SIMD3<>.zero.unsafeMutableAddressor(v7);
    v12 = *v11;
    v13 = *((_QWORD *)v6 + 2);
    if (v13)
    {
      v14 = (float *)(v6 + 5);
      do
      {
        *(float32x2_t *)&v16 = vadd_f32(*(float32x2_t *)&v12, *(float32x2_t *)(v14 - 2));
        v15 = *v14;
        v14 += 4;
        *((float *)&v16 + 2) = *((float *)&v12 + 2) + v15;
        HIDWORD(v16) = 0;
        v12 = v16;
        --v13;
      }
      while (v13);
    }
    else
    {
      v16 = *v11;
    }
    v22 = (float32x2_t)v16;
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v6);
    *(float *)v19.i32 = (float)v2;
    *(float32x2_t *)&v18 = vdiv_f32(v22, (float32x2_t)vdup_lane_s32(v19, 0));
  }
  else
  {
    swift_bridgeObjectRelease(v24);
    v18 = *(_OWORD *)SIMD3<>.zero.unsafeMutableAddressor(v17);
  }
  return *(double *)&v18;
}

double sub_10005E318()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  char *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  float *v14;
  float v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  int32x2_t v19;
  __int128 v21;
  float32x2_t v22;
  _QWORD v23[2];
  uint64_t v24;
  __int128 v25;
  double *v26;

  swift_retain();
  Synchronized.wrappedValue.getter(v23, v0);
  swift_release();
  v1 = v24;
  v2 = *(_QWORD *)(v24 + 16);
  if (v2)
  {
    v3 = v23[0];
    v4 = v23[1];
    v26 = _swiftEmptyArrayStorage;
    sub_1000A5698(0, v2, 0);
    v5 = 0;
    v6 = v26;
    do
    {
      v7 = (char *)RingBuffer.subscript.getter(v23, v5, v3, v4, v1, &type metadata for PersonHeightInstrument.HeightResultContainer.HeightResult);
      v8 = v25;
      v26 = v6;
      v10 = *((_QWORD *)v6 + 2);
      v9 = *((_QWORD *)v6 + 3);
      if (v10 >= v9 >> 1)
      {
        v21 = v25;
        v7 = sub_1000A5698((char *)(v9 > 1), v10 + 1, 1);
        v8 = v21;
        v6 = v26;
      }
      ++v5;
      *((_QWORD *)v6 + 2) = v10 + 1;
      *(_OWORD *)&v6[2 * v10 + 4] = v8;
    }
    while (v2 != v5);
    v11 = (__int128 *)SIMD3<>.zero.unsafeMutableAddressor(v7);
    v12 = *v11;
    v13 = *((_QWORD *)v6 + 2);
    if (v13)
    {
      v14 = (float *)(v6 + 5);
      do
      {
        *(float32x2_t *)&v16 = vadd_f32(*(float32x2_t *)&v12, *(float32x2_t *)(v14 - 2));
        v15 = *v14;
        v14 += 4;
        *((float *)&v16 + 2) = *((float *)&v12 + 2) + v15;
        HIDWORD(v16) = 0;
        v12 = v16;
        --v13;
      }
      while (v13);
    }
    else
    {
      v16 = *v11;
    }
    v22 = (float32x2_t)v16;
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v6);
    *(float *)v19.i32 = (float)v2;
    *(float32x2_t *)&v18 = vdiv_f32(v22, (float32x2_t)vdup_lane_s32(v19, 0));
  }
  else
  {
    swift_bridgeObjectRelease(v24);
    v18 = *(_OWORD *)SIMD3<>.zero.unsafeMutableAddressor(v17);
  }
  return *(double *)&v18;
}

unint64_t sub_10005E4B8()
{
  float v0;
  float v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  __int128 v5;
  uint64_t v6;
  double *v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  uint64_t v12;
  float v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  float v33;
  unsigned __int8 v34;
  uint64_t v35;
  char *v36;
  unint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  float v42;
  int32x4_t v43;
  float32x4_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  float32x4_t v50;
  uint64_t v51;
  float32x4_t v52;
  unint64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int16x4_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  float32x4_t v74;
  float32x4_t v75;
  __int128 v76;
  __int128 v77;
  int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;

  sub_10005DFD8();
  v1 = v0;
  swift_retain();
  Synchronized.wrappedValue.getter(&v87, v2);
  swift_release();
  v3 = v88;
  v4 = *(_QWORD *)(v88 + 16);
  if (v4)
  {
    v5 = v87;
    sub_1000A567C(0, v4, 0);
    v6 = 0;
    v7 = _swiftEmptyArrayStorage;
    do
    {
      RingBuffer.subscript.getter(&v87, v6, v5, *((_QWORD *)&v5 + 1), v3, &type metadata for PersonHeightInstrument.HeightResultContainer.HeightResult);
      v8 = *(float *)&v87;
      *(_QWORD *)&v85 = v7;
      v10 = *((_QWORD *)v7 + 2);
      v9 = *((_QWORD *)v7 + 3);
      if (v10 >= v9 >> 1)
      {
        sub_1000A567C((char *)(v9 > 1), v10 + 1, 1);
        v7 = (double *)v85;
      }
      ++v6;
      *((_QWORD *)v7 + 2) = v10 + 1;
      *((float *)v7 + v10 + 8) = (float)(v8 - v1) * (float)(v8 - v1);
    }
    while (v4 != v6);
    swift_bridgeObjectRelease(v3);
    v11 = v7[2];
    if (v11 != 0.0)
      goto LABEL_7;
LABEL_10:
    v13 = 0.0;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease(v88);
  v7 = _swiftEmptyArrayStorage;
  v11 = _swiftEmptyArrayStorage[2];
  if (v11 == 0.0)
    goto LABEL_10;
LABEL_7:
  if (*(_QWORD *)&v11 == 1)
  {
    v12 = 0;
    v13 = 0.0;
  }
  else
  {
    v12 = *(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFELL;
    v14 = (float *)v7 + 9;
    v13 = 0.0;
    v15 = *(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v13 = (float)(v13 + *(v14 - 1)) + *v14;
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    if (*(_QWORD *)&v11 == v12)
      goto LABEL_16;
  }
  v16 = *(_QWORD *)&v11 - v12;
  v17 = (float *)v7 + v12 + 8;
  do
  {
    v18 = *v17++;
    v13 = v13 + v18;
    --v16;
  }
  while (v16);
LABEL_16:
  swift_bridgeObjectRelease(v7);
  swift_retain();
  Synchronized.wrappedValue.getter(&v87, v19);
  swift_release();
  v20 = *(_QWORD *)(v88 + 16);
  swift_bridgeObjectRelease(v88);
  v21 = sqrtf(v13 / (float)(v20 - 1));
  if (v21 > 0.1)
  {
    swift_retain();
    Synchronized.wrappedValue.getter(&v87, v22);
    sub_10000EDC8(&qword_10047E458);
    RingBuffer.clear()();
    v85 = v87;
    v86 = v88;
    Synchronized.wrappedValue.setter(&v85);
    swift_release();
LABEL_84:
    v34 = 0;
    v33 = v21;
    goto LABEL_85;
  }
  if (v21 <= 0.01)
  {
    v33 = 0.0;
    v34 = 1;
LABEL_85:
    LOBYTE(v87) = v34;
    return LODWORD(v33) | ((unint64_t)v34 << 32);
  }
  swift_retain();
  Synchronized.wrappedValue.getter(&v87, v23);
  swift_release();
  v24 = v88;
  v25 = *(_QWORD *)(v88 + 16);
  if (v25)
  {
    v26 = v87;
    swift_bridgeObjectRetain(v88);
    v27 = 0;
    v28 = (char *)_swiftEmptyArrayStorage;
    do
    {
      RingBuffer.subscript.getter(&v87, v27, v26, *((_QWORD *)&v26 + 1), v24, &type metadata for PersonHeightInstrument.HeightResultContainer.HeightResult);
      v29 = v87;
      v79 = v89;
      v81 = v88;
      if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
        v28 = sub_10005F338(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
      v31 = *((_QWORD *)v28 + 2);
      v30 = *((_QWORD *)v28 + 3);
      if (v31 >= v30 >> 1)
        v28 = sub_10005F338((char *)(v30 > 1), v31 + 1, 1, v28);
      *((_QWORD *)v28 + 2) = v31 + 1;
      v32 = &v28[48 * v31];
      *((_DWORD *)v32 + 8) = v29;
      ++v27;
      *((_OWORD *)v32 + 3) = v81;
      *((_OWORD *)v32 + 4) = v79;
    }
    while (v25 != v27);
    swift_bridgeObjectRelease_n(v24, 2);
  }
  else
  {
    swift_bridgeObjectRelease(v88);
    v28 = (char *)_swiftEmptyArrayStorage;
  }
  v35 = *((_QWORD *)v28 + 2);
  if (!v35)
  {
    v39 = (uint64_t)v28;
LABEL_79:
    swift_retain();
    Synchronized.wrappedValue.getter(&v87, v67);
    v68 = sub_10000EDC8(&qword_10047E458);
    RingBuffer.clear()();
    v85 = v87;
    v86 = v88;
    Synchronized.wrappedValue.setter(&v85);
    swift_release();
    v69 = *(_QWORD *)(v39 + 16);
    if (v69)
    {
      swift_bridgeObjectRetain(v39);
      v70 = (_OWORD *)(v39 + 64);
      do
      {
        v71 = *(v70 - 1);
        v72 = *v70;
        LODWORD(v87) = *((_DWORD *)v70 - 8);
        v88 = v71;
        v89 = v72;
        swift_retain();
        Synchronized.wrappedValue.getter(&v85, v73);
        RingBuffer.append(_:)(&v87, v68);
        v83 = v85;
        v84 = v86;
        Synchronized.wrappedValue.setter(&v83);
        swift_release();
        v70 += 3;
        --v69;
      }
      while (v69);
      swift_bridgeObjectRelease(v39);
    }
    swift_bridgeObjectRelease(v39);
    goto LABEL_84;
  }
  v36 = v28 + 32;
  result = swift_bridgeObjectRetain(v28);
  v38 = 0;
  v39 = (uint64_t)v28;
  while (1)
  {
    v40 = *(_QWORD *)(v39 + 16);
    if (v40)
    {
      v41 = &v36[48 * v38];
      v42 = *(float *)v41;
      v43 = *((int32x4_t *)v41 + 1);
      v44 = *((float32x4_t *)v41 + 2);
      v45 = 0.0;
      v46 = 32;
      v47 = *(_QWORD *)(v39 + 16);
      do
      {
        v45 = v45 + *(float *)(v39 + v46);
        v46 += 48;
        --v47;
      }
      while (v47);
      if (vabds_f32(v42, v45 / (float)v40) > 0.01)
        break;
    }
LABEL_32:
    if (++v38 == v35)
    {
      swift_bridgeObjectRelease(v28);
      goto LABEL_79;
    }
  }
  v48 = 0;
  v49 = 0;
  v50 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v43, (int8x16_t)v43, 0xCuLL), (int8x16_t)v44, 8uLL);
  v51 = v39 + 48;
  do
  {
    v52.i64[0] = *(_QWORD *)(v51 + 4);
    v52.i64[1] = *(_QWORD *)(v51 + 16);
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(v52, v50)), 0xFuLL))) & 1) != 0
      && *(float *)v51 == *(float *)v43.i32
      && *(float *)(v51 - 16) == v42
      && *(float *)(v51 + 24) == v44.f32[2])
    {
      v54 = v49 + 1;
      if (__OFADD__(v49, 1))
      {
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }
      if (v54 == v40)
      {
LABEL_48:
        if (v40 >= v49)
        {
          if ((v49 & 0x8000000000000000) == 0)
            goto LABEL_52;
          goto LABEL_90;
        }
      }
      else
      {
        v60 = (float32x4_t)vzip1q_s32(v43, vzip2q_s32(v43, v43));
        v60.f32[1] = v42;
        v74 = v60;
        v75 = v44;
        while (v54 < v40)
        {
          v61 = (float32x4_t)vzip1q_s32(*(int32x4_t *)(v39 + v48 + 96), vzip2q_s32(*(int32x4_t *)(v39 + v48 + 96), *(int32x4_t *)(v39 + v48 + 96)));
          v61.i32[1] = *(_DWORD *)(v39 + v48 + 80);
          if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(v61, v60)), 0xFuLL))) & 1) == 0
            || (v62 = vmovn_s32(vceqq_f32(*(float32x4_t *)(v39 + v48 + 112), v44)), (v62.i8[0] & 1) == 0)
            || (v62.i8[2] & 1) == 0
            || (v62.i8[4] & 1) == 0)
          {
            if (v54 != v49)
            {
              if (v49 >= (unint64_t)v40)
                goto LABEL_88;
              v78 = *(_DWORD *)(v39 + v48 + 80);
              v80 = *(_OWORD *)(v39 + v48 + 112);
              v82 = *(_OWORD *)(v39 + v48 + 96);
              v63 = v39 + 32 + 48 * v49;
              v64 = *(_DWORD *)v63;
              v76 = *(_OWORD *)(v63 + 32);
              v77 = *(_OWORD *)(v63 + 16);
              result = swift_isUniquelyReferenced_nonNull_native(v39);
              if ((result & 1) == 0)
              {
                result = (unint64_t)sub_10002878C(v39);
                v39 = result;
              }
              v65 = v39 + 48 * v49;
              *(_DWORD *)(v65 + 32) = v78;
              *(_OWORD *)(v65 + 48) = v82;
              *(_OWORD *)(v65 + 64) = v80;
              v66 = v39 + v48;
              *(_DWORD *)(v66 + 80) = v64;
              *(_OWORD *)(v66 + 96) = v77;
              *(_OWORD *)(v66 + 112) = v76;
              v60 = v74;
              v44 = v75;
            }
            v58 = __OFADD__(v49++, 1);
            if (v58)
              goto LABEL_87;
            v40 = *(_QWORD *)(v39 + 16);
          }
          ++v54;
          v48 += 48;
          if (v54 == v40)
            goto LABEL_48;
        }
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
      }
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
      goto LABEL_92;
    }
    ++v49;
    v51 += 48;
    v48 += 48;
  }
  while (v40 != v49);
  v49 = *(_QWORD *)(v39 + 16);
LABEL_52:
  v55 = v49 - v40;
  if (__OFADD__(v40, v49 - v40))
    goto LABEL_91;
  result = swift_isUniquelyReferenced_nonNull_native(v39);
  if ((_DWORD)result && v49 <= *(_QWORD *)(v39 + 24) >> 1)
  {
    if (v49 != v40)
      goto LABEL_61;
LABEL_31:
    v36 = v28 + 32;
    goto LABEL_32;
  }
  if (v40 <= v49)
    v56 = v49;
  else
    v56 = v40;
  result = (unint64_t)sub_10005F338((char *)result, v56, 1, (char *)v39);
  v39 = result;
  if (v49 == v40)
    goto LABEL_31;
LABEL_61:
  result = (unint64_t)memmove((void *)(v39 + 32 + 48 * v49), (const void *)(v39 + 32 + 48 * v40), 48 * (*(_QWORD *)(v39 + 16) - v40));
  v57 = *(_QWORD *)(v39 + 16);
  v58 = __OFADD__(v57, v55);
  v59 = v57 + v55;
  if (!v58)
  {
    *(_QWORD *)(v39 + 16) = v59;
    goto LABEL_31;
  }
LABEL_93:
  __break(1u);
  return result;
}

uint64_t sub_10005EC50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for PersonHeightInstrument.HeightResultContainer()
{
  return objc_opt_self(_TtCC7Measure22PersonHeightInstrumentP33_8D6987B00695F3CFC0684A03243AB4CC21HeightResultContainer);
}

__n128 initializeWithCopy for PersonHeightInstrument.HeightResultContainer.HeightResult(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for PersonHeightInstrument.HeightResultContainer.HeightResult()
{
  return &type metadata for PersonHeightInstrument.HeightResultContainer.HeightResult;
}

uint64_t storeEnumTagSinglePayload for PersonHeightInstrument.ConfirmationAnimation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10005ED04 + 4 * byte_1003B2A75[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10005ED38 + 4 * byte_1003B2A70[v4]))();
}

uint64_t sub_10005ED38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005ED40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005ED48);
  return result;
}

uint64_t sub_10005ED54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005ED5CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10005ED60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005ED68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PersonHeightInstrument.ConfirmationAnimation()
{
  return &type metadata for PersonHeightInstrument.ConfirmationAnimation;
}

unint64_t sub_10005ED88()
{
  unint64_t result;

  result = qword_10047E418;
  if (!qword_10047E418)
  {
    result = swift_getWitnessTable(&unk_1003B2BC8, &type metadata for PersonHeightInstrument.ConfirmationAnimation);
    atomic_store(result, (unint64_t *)&qword_10047E418);
  }
  return result;
}

uint64_t sub_10005EDCC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

void sub_10005EDF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100057134(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24));
}

uint64_t sub_10005EDFC()
{
  uint64_t v0;

  return sub_10005BEFC(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10005EE08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005EE18(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10005EE20()
{
  id v0;

  v0 = sub_1000501A0();
  objc_msgSend(v0, "toggleViewVisibilityWithIsVisible:", 0);

}

uint64_t sub_10005EE60@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10005EE6C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = *a2;
  swift_bridgeObjectRetain(*a1);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v3;
  return result;
}

uint64_t sub_10005EEAC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10005EEB8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain(*a1);
  result = swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a2 + 8) = v3;
  return result;
}

uint64_t sub_10005EEF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10005EF04@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10005EF10(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(*a1);
  result = swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_10005EF50(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(*a1);
  result = swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_10005EF90@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10005EF9C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain(*a1);
  result = swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a2 + 8) = v3;
  return result;
}

uint64_t sub_10005EFDC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10005EFE8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = *a2;
  swift_bridgeObjectRetain(*a1);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v3;
  return result;
}

char *sub_10005F028(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E538);
    v11 = (char *)swift_allocObject(v10, (v9 << 6) | 0x20, 15);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 6);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[64 * v8])
      memmove(v14, v15, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, v8 << 6);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

_QWORD *sub_10005F120(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E528);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_10000EDC8(&qword_10047E530);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10005F240(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E488);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 4 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10005F338(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E550);
    v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v8])
      memmove(v13, v14, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 48 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

_QWORD *sub_10005F44C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E540);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_10000EDC8(&qword_10047E548);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

_QWORD *sub_10005F56C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E648);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[4 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_10000EDC8(&qword_10047E650);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

size_t sub_10005F68C(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100060BA4(a1, a2, a3, a4, &qword_10047E480, type metadata accessor for MeasurementHistoryItem);
}

double *sub_10005F6A0(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8((uint64_t *)&unk_10047E4A0);
    v11 = (double *)swift_allocObject(v10, 96 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 96);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (char *)(v11 + 4);
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    if (v11 != (double *)a4 || v13 >= &v14[96 * v8])
      memmove(v13, v14, 96 * v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for CornerAccumulationBuffer.CornerCandidate);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

double *sub_10005F7B4(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8((uint64_t *)&unk_10047ED60);
    v11 = (double *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10005F8AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E4D8);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for DebugRectangle);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10005F9C4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E468);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

double *sub_10005FAC4(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8((uint64_t *)&unk_10047E5B0);
    v11 = (double *)swift_allocObject(v10, 48 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (char *)(v11 + 4);
  v14 = (char *)(a4 + 32);
  v15 = 48 * v8;
  if ((v5 & 1) != 0)
  {
    if (v11 != (double *)a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

double *sub_10005FBCC(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  uint64_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E570);
    v11 = (double *)swift_allocObject(v10, 112 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 112);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[14 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 112 * v8);
    a4[2] = 0.0;
  }
  else
  {
    v14 = sub_10000EDC8(&qword_10047E578);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

double *sub_10005FD04(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E508);
    v11 = (double *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (char *)(v11 + 4);
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    if (v11 != (double *)a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10005FDEC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E688);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 32 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

double *sub_10005FEE4(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E490);
    v11 = (double *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0.0;
  }
  else
  {
    v15 = sub_10000EDC8(&qword_10047E498);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100060004(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E680);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 40 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100060114(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E678);
    v11 = (char *)swift_allocObject(v10, (v9 << 7) | 0x20, 15);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 95;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 7);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[128 * v8])
      memmove(v14, v15, v8 << 7);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for WorldPlaneHitTestResult);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100060214(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E670);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 32 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

_QWORD *sub_10006030C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E660);
    v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[6 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
  }
  else
  {
    v14 = sub_10000EDC8(&qword_10047E668);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100060444(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E658);
    v11 = (char *)swift_allocObject(v10, (v9 << 6) | 0x20, 15);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 6);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = v8 << 6;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, v16);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100060538(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8((uint64_t *)&unk_10047E4B0);
    v11 = (char *)swift_allocObject(v10, 304 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 304);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[304 * v8])
      memmove(v13, v14, 304 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for WorldRectangleData);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

size_t sub_100060654(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100060BA4(a1, a2, a3, a4, &qword_10047E4E8, type metadata accessor for SpatialPlattersHistoryItem);
}

double *sub_100060668(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E518);
    v11 = (double *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[v8 + 4])
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0.0;
  }
  else
  {
    v15 = sub_10000EDC8(&qword_10047E520);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

double *sub_100060788(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047DB70);
    v11 = (double *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

double *sub_100060880(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8((uint64_t *)&unk_10047E4C0);
    v11 = (double *)swift_allocObject(v10, (v9 << 7) | 0x20, 15);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 95;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 7);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[16 * v8 + 4])
      memmove(v11 + 4, a4 + 4, v8 << 7);
    a4[2] = 0.0;
  }
  else
  {
    v15 = sub_10000EDC8(&qword_1004866F0);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

double *sub_1000609A0(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E4D0);
    v11 = (double *)swift_allocObject(v10, 16 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

double *sub_100060A98(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E510);
    v11 = (double *)swift_allocObject(v10, (v9 << 7) | 0x20, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 95;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 7);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[128 * v8])
      memmove(v14, v15, v8 << 7);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v14, v15, v8 << 7);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

size_t sub_100060B90(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100060BA4(a1, a2, a3, a4, &qword_10047E500, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

size_t sub_100060BA4(size_t result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10000EDC8(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  result = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_29;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(result - v17) / v15);
LABEL_19:
  v20 = a6(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((v8 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24, v11, v20);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v23, v24, v11, v20);
  }
  swift_bridgeObjectRelease(a4);
  return (size_t)v18;
}

double *sub_100060D18(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E4F0);
    v11 = (double *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (char *)(v11 + 4);
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    if (v11 != (double *)a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for DefaultGroup);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

unint64_t sub_100060E30(unint64_t result, int64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  size_t isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v7 = result;
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    return result;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = (_QWORD *)sub_100060BA4(isUniquelyReferenced_nonNull_native, v13, 1, v5, &qword_10047E4E8, type metadata accessor for SpatialPlattersHistoryItem);
    *v3 = v5;
  }
  v14 = type metadata accessor for SpatialPlattersHistoryItem(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (char *)v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v17 = *(_QWORD *)(v15 + 72);
  v18 = (uint64_t)&v16[v17 * v7];
  result = swift_arrayDestroy(v18, v8, v14);
  if (!v9)
    goto LABEL_24;
  v19 = v5[2];
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_32;
  result = v18 + v17;
  v21 = (unint64_t)&v16[v17 * a2];
  if (v18 + v17 < v21 || result >= v21 + v20 * v17)
  {
    result = swift_arrayInitWithTakeFrontToBack(result, v21, v20, v14);
  }
  else if (result != v21)
  {
    result = swift_arrayInitWithTakeBackToFront();
  }
  v23 = v5[2];
  v24 = __OFADD__(v23, v9);
  v25 = v23 + v9;
  if (v24)
    goto LABEL_33;
  v5[2] = v25;
LABEL_24:
  if (v17 >= 1)
    sub_100063F90(a3, v18);
  return sub_100036600(a3, &qword_10047E4F8);
}

void sub_100060FB8(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  __int128 *v21;
  Swift::Int v22;
  Swift::Int v23;
  __int128 *v24;
  __int128 v25;
  Swift::Int v26;
  uint64_t v27;
  __int128 v28;
  float v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t i;
  __int128 v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double *v104;
  Swift::Int v105;
  Swift::Int v106;
  uint64_t v107;
  float *v108;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return;
      v85 = *a1;
      v86 = -1;
      v87 = 1;
      for (i = *a1; ; i += 16)
      {
        v89 = *(_OWORD *)(v85 + 16 * v87);
        LODWORD(v90) = HIDWORD(*(_QWORD *)(v85 + 16 * v87));
        v91 = v86;
        v92 = i;
        do
        {
          if (v90 >= *(float *)(v92 + 4))
            break;
          if (!v85)
            goto LABEL_144;
          *(_OWORD *)(v92 + 16) = *(_OWORD *)v92;
          *(_OWORD *)v92 = v89;
          v92 -= 16;
        }
        while (!__CFADD__(v91++, 1));
        ++v87;
        --v86;
        if (v87 == v3)
          return;
      }
    }
    goto LABEL_140;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_139;
  v6 = v4;
  v100 = a1;
  if (v3 <= 1)
  {
    v10 = _swiftEmptyArrayStorage;
    v108 = (float *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = *(_QWORD *)&_swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_105;
    }
    v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_10000EDC8((uint64_t *)&unk_100486AB0);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v104 = (double *)v9;
    v108 = (float *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v102 = *a1 + 36;
  v103 = *a1 + 4;
  v101 = *a1 - 16;
  v13 = (char *)_swiftEmptyArrayStorage;
  v105 = v6;
  v106 = v3;
  v107 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(float *)(v103 + 16 * v11);
      v17 = *(float *)(v103 + 16 * v15);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v18 = (float *)(v102 + 16 * v15);
        v19 = v16;
        while (1)
        {
          v20 = v19;
          v19 = *v18;
          if (v16 < v17 == *v18 >= v20)
            break;
          ++v11;
          v18 += 4;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v16 < v17)
      {
        if (v11 < v15)
          goto LABEL_141;
        if (v15 < v11)
        {
          v21 = (__int128 *)(v101 + 16 * v11);
          v22 = v11;
          v23 = v15;
          v24 = (__int128 *)(v12 + 16 * v15);
          do
          {
            if (v23 != --v22)
            {
              if (!v12)
                goto LABEL_147;
              v25 = *v24;
              *v24 = *v21;
              *v21 = v25;
            }
            ++v23;
            --v21;
            ++v24;
          }
          while (v23 < v22);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_138;
      if (v11 - v15 < v6)
      {
        v26 = v15 + v6;
        if (__OFADD__(v15, v6))
          goto LABEL_142;
        if (v26 >= v3)
          v26 = v3;
        if (v26 < v15)
          goto LABEL_143;
        if (v11 != v26)
        {
          v27 = v101 + 16 * v11;
          do
          {
            v28 = *(_OWORD *)(v12 + 16 * v11);
            LODWORD(v29) = HIDWORD(*(_QWORD *)(v12 + 16 * v11));
            v30 = v15;
            v31 = v27;
            do
            {
              if (v29 >= *(float *)(v31 + 4))
                break;
              if (!v12)
                goto LABEL_145;
              *(_OWORD *)(v31 + 16) = *(_OWORD *)v31;
              *(_OWORD *)v31 = v28;
              v31 -= 16;
              ++v30;
            }
            while (v11 != v30);
            ++v11;
            v27 += 16;
          }
          while (v11 != v26);
          v11 = v26;
        }
      }
    }
    if (v11 < v15)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_1000A7838(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v33 = *((_QWORD *)v13 + 2);
    v32 = *((_QWORD *)v13 + 3);
    v14 = v33 + 1;
    v12 = v107;
    if (v33 >= v32 >> 1)
    {
      v82 = sub_1000A7838((char *)(v32 > 1), v33 + 1, 1, v13);
      v12 = v107;
      v13 = v82;
    }
    *((_QWORD *)v13 + 2) = v14;
    v34 = v13 + 32;
    v35 = &v13[16 * v33 + 32];
    *(_QWORD *)v35 = v15;
    *((_QWORD *)v35 + 1) = v11;
    if (v33)
      break;
    v14 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v11 >= v106)
    {
      v10 = v104;
LABEL_105:
      v84 = v13;
      v104 = v10;
      if (v14 < 2)
        goto LABEL_95;
      v94 = *v100;
      while (1)
      {
        v95 = v14 - 2;
        if (v14 < 2)
          break;
        if (!v94)
          goto LABEL_148;
        v83 = v84;
        v96 = *(_QWORD *)&v84[16 * v95 + 32];
        v97 = *(_QWORD *)&v84[16 * v14 + 24];
        sub_100062B34((float *)(v94 + 16 * v96), (float *)(v94 + 16 * *(_QWORD *)&v84[16 * v14 + 16]), v94 + 16 * v97, v108);
        if (v1)
          goto LABEL_94;
        if (v97 < v96)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0)
          v83 = sub_1000A7930((uint64_t)v83);
        if (v95 >= *((_QWORD *)v83 + 2))
          goto LABEL_136;
        v98 = &v83[16 * v95 + 32];
        *(_QWORD *)v98 = v96;
        *((_QWORD *)v98 + 1) = v97;
        v99 = *((_QWORD *)v83 + 2);
        if (v14 > v99)
          goto LABEL_137;
        memmove(&v83[16 * v14 + 16], &v83[16 * v14 + 32], 16 * (v99 - v14));
        v84 = v83;
        *((_QWORD *)v83 + 2) = v99 - 1;
        v14 = v99 - 1;
        if (v99 <= 2)
          goto LABEL_95;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      return;
    }
  }
  while (1)
  {
    v36 = v14 - 1;
    if (v14 >= 4)
    {
      v41 = &v34[16 * v14];
      v42 = *((_QWORD *)v41 - 8);
      v43 = *((_QWORD *)v41 - 7);
      v47 = __OFSUB__(v43, v42);
      v44 = v43 - v42;
      if (v47)
        goto LABEL_122;
      v46 = *((_QWORD *)v41 - 6);
      v45 = *((_QWORD *)v41 - 5);
      v47 = __OFSUB__(v45, v46);
      v39 = v45 - v46;
      v40 = v47;
      if (v47)
        goto LABEL_123;
      v48 = v14 - 2;
      v49 = &v34[16 * v14 - 32];
      v51 = *(_QWORD *)v49;
      v50 = *((_QWORD *)v49 + 1);
      v47 = __OFSUB__(v50, v51);
      v52 = v50 - v51;
      if (v47)
        goto LABEL_124;
      v47 = __OFADD__(v39, v52);
      v53 = v39 + v52;
      if (v47)
        goto LABEL_126;
      if (v53 >= v44)
      {
        v71 = &v34[16 * v36];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v47 = __OFSUB__(v72, v73);
        v74 = v72 - v73;
        if (v47)
          goto LABEL_132;
        v64 = v39 < v74;
        goto LABEL_83;
      }
    }
    else
    {
      if (v14 != 3)
      {
        v65 = *((_QWORD *)v13 + 4);
        v66 = *((_QWORD *)v13 + 5);
        v47 = __OFSUB__(v66, v65);
        v58 = v66 - v65;
        v59 = v47;
        goto LABEL_77;
      }
      v38 = *((_QWORD *)v13 + 4);
      v37 = *((_QWORD *)v13 + 5);
      v47 = __OFSUB__(v37, v38);
      v39 = v37 - v38;
      v40 = v47;
    }
    if ((v40 & 1) != 0)
      goto LABEL_125;
    v48 = v14 - 2;
    v54 = &v34[16 * v14 - 32];
    v56 = *(_QWORD *)v54;
    v55 = *((_QWORD *)v54 + 1);
    v57 = __OFSUB__(v55, v56);
    v58 = v55 - v56;
    v59 = v57;
    if (v57)
      goto LABEL_127;
    v60 = &v34[16 * v36];
    v62 = *(_QWORD *)v60;
    v61 = *((_QWORD *)v60 + 1);
    v47 = __OFSUB__(v61, v62);
    v63 = v61 - v62;
    if (v47)
      goto LABEL_129;
    if (__OFADD__(v58, v63))
      goto LABEL_131;
    if (v58 + v63 >= v39)
    {
      v64 = v39 < v63;
LABEL_83:
      if (v64)
        v36 = v48;
      goto LABEL_85;
    }
LABEL_77:
    if ((v59 & 1) != 0)
      goto LABEL_128;
    v67 = &v34[16 * v36];
    v69 = *(_QWORD *)v67;
    v68 = *((_QWORD *)v67 + 1);
    v47 = __OFSUB__(v68, v69);
    v70 = v68 - v69;
    if (v47)
      goto LABEL_130;
    if (v70 < v58)
      goto LABEL_15;
LABEL_85:
    v75 = v36 - 1;
    if (v36 - 1 >= v14)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v12)
      goto LABEL_146;
    v76 = v13;
    v77 = &v34[16 * v75];
    v78 = *(_QWORD *)v77;
    v79 = &v34[16 * v36];
    v80 = *((_QWORD *)v79 + 1);
    sub_100062B34((float *)(v12 + 16 * *(_QWORD *)v77), (float *)(v12 + 16 * *(_QWORD *)v79), v12 + 16 * v80, v108);
    if (v1)
      break;
    if (v80 < v78)
      goto LABEL_119;
    if (v36 > *((_QWORD *)v76 + 2))
      goto LABEL_120;
    *(_QWORD *)v77 = v78;
    *(_QWORD *)&v34[16 * v75 + 8] = v80;
    v81 = *((_QWORD *)v76 + 2);
    if (v36 >= v81)
      goto LABEL_121;
    v13 = v76;
    v14 = v81 - 1;
    memmove(&v34[16 * v36], v79 + 16, 16 * (v81 - 1 - v36));
    *((_QWORD *)v76 + 2) = v81 - 1;
    v12 = v107;
    if (v81 <= 2)
      goto LABEL_15;
  }
  v83 = v76;
LABEL_94:
  v84 = v83;
LABEL_95:
  swift_bridgeObjectRelease(v84);
  v104[2] = 0.0;
  swift_bridgeObjectRelease(v104);
}

void sub_100061648(uint64_t *a1, float a2)
{
  uint64_t v2;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  Swift::Int v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  Swift::Int v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  __int128 *v23;
  Swift::Int v24;
  Swift::Int v25;
  __int128 *v26;
  __int128 v27;
  Swift::Int v28;
  uint64_t v29;
  __int128 v30;
  float v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double *v96;
  Swift::Int v97;
  Swift::Int v98;
  uint64_t v99;
  float *v100;

  v5 = a1[1];
  v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
      if (v5)
        sub_100062ABC(0, v5, 1, a1, a2);
      return;
    }
    goto LABEL_133;
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_132;
  v8 = v6;
  v92 = a1;
  if (v5 <= 1)
  {
    v12 = _swiftEmptyArrayStorage;
    v100 = (float *)&_swiftEmptyArrayStorage[4];
    if (v5 != 1)
    {
      v16 = *(_QWORD *)&_swiftEmptyArrayStorage[2];
      v15 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_98;
    }
    v96 = _swiftEmptyArrayStorage;
  }
  else
  {
    v9 = v7 >> 1;
    v10 = sub_10000EDC8((uint64_t *)&unk_100486AB0);
    v11 = static Array._allocateBufferUninitialized(minimumCapacity:)(v9, v10);
    *(_QWORD *)(v11 + 16) = v9;
    v96 = (double *)v11;
    v100 = (float *)(v11 + 32);
  }
  v13 = 0;
  v14 = *a1;
  v94 = *a1 + 36;
  v95 = *a1 + 4;
  v93 = *a1 - 16;
  v15 = (char *)_swiftEmptyArrayStorage;
  v97 = v8;
  v98 = v5;
  v99 = v14;
  while (1)
  {
    v17 = v13++;
    if (v13 < v5)
    {
      v18 = *(float *)(v95 + 16 * v13);
      v19 = vabds_f32(v18, a2);
      v20 = vabds_f32(*(float *)(v95 + 16 * v17), a2);
      v13 = v17 + 2;
      if (v17 + 2 < v5)
      {
        v21 = (float *)(v94 + 16 * v17);
        while (1)
        {
          v22 = vabds_f32(v18, a2);
          v18 = *v21;
          if (v19 < v20 == vabds_f32(*v21, a2) >= v22)
            break;
          ++v13;
          v21 += 4;
          if (v5 == v13)
          {
            v13 = v5;
            break;
          }
        }
      }
      if (v19 < v20)
      {
        if (v13 < v17)
          goto LABEL_134;
        if (v17 < v13)
        {
          v23 = (__int128 *)(v93 + 16 * v13);
          v24 = v13;
          v25 = v17;
          v26 = (__int128 *)(v14 + 16 * v17);
          do
          {
            if (v25 != --v24)
            {
              if (!v14)
                goto LABEL_139;
              v27 = *v26;
              *v26 = *v23;
              *v23 = v27;
            }
            ++v25;
            --v23;
            ++v26;
          }
          while (v25 < v24);
        }
      }
    }
    if (v13 < v5)
    {
      if (__OFSUB__(v13, v17))
        goto LABEL_131;
      if (v13 - v17 < v8)
      {
        v28 = v17 + v8;
        if (__OFADD__(v17, v8))
          goto LABEL_135;
        if (v28 >= v5)
          v28 = v5;
        if (v28 < v17)
          goto LABEL_136;
        if (v13 != v28)
        {
          v29 = v93 + 16 * v13;
          do
          {
            v30 = *(_OWORD *)(v14 + 16 * v13);
            v31 = vabds_f32(COERCE_FLOAT(HIDWORD(*(_QWORD *)(v14 + 16 * v13))), a2);
            v32 = v17;
            v33 = v29;
            do
            {
              if (v31 >= vabds_f32(*(float *)(v33 + 4), a2))
                break;
              if (!v14)
                goto LABEL_137;
              *(_OWORD *)(v33 + 16) = *(_OWORD *)v33;
              *(_OWORD *)v33 = v30;
              v33 -= 16;
              ++v32;
            }
            while (v13 != v32);
            ++v13;
            v29 += 16;
          }
          while (v13 != v28);
          v13 = v28;
        }
      }
    }
    if (v13 < v17)
    {
LABEL_126:
      __break(1u);
      goto LABEL_127;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
      v15 = sub_1000A7838(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
    v35 = *((_QWORD *)v15 + 2);
    v34 = *((_QWORD *)v15 + 3);
    v16 = v35 + 1;
    v14 = v99;
    if (v35 >= v34 >> 1)
    {
      v83 = sub_1000A7838((char *)(v34 > 1), v35 + 1, 1, v15);
      v14 = v99;
      v15 = v83;
    }
    *((_QWORD *)v15 + 2) = v16;
    v36 = v15 + 32;
    v37 = &v15[16 * v35 + 32];
    *(_QWORD *)v37 = v17;
    *((_QWORD *)v37 + 1) = v13;
    if (v35)
      break;
    v16 = 1;
LABEL_15:
    v8 = v97;
    v5 = v98;
    if (v13 >= v98)
    {
      v12 = v96;
LABEL_98:
      v85 = v15;
      v96 = v12;
      if (v16 < 2)
        goto LABEL_95;
      v86 = *v92;
      while (1)
      {
        v87 = v16 - 2;
        if (v16 < 2)
          break;
        if (!v86)
          goto LABEL_140;
        v84 = v85;
        v88 = *(_QWORD *)&v85[16 * v87 + 32];
        v89 = *(_QWORD *)&v85[16 * v16 + 24];
        sub_100062D58((float *)(v86 + 16 * v88), (float *)(v86 + 16 * *(_QWORD *)&v85[16 * v16 + 16]), v86 + 16 * v89, v100, a2);
        if (v2)
          goto LABEL_94;
        if (v89 < v88)
          goto LABEL_128;
        if ((swift_isUniquelyReferenced_nonNull_native(v84) & 1) == 0)
          v84 = sub_1000A7930((uint64_t)v84);
        if (v87 >= *((_QWORD *)v84 + 2))
          goto LABEL_129;
        v90 = &v84[16 * v87 + 32];
        *(_QWORD *)v90 = v88;
        *((_QWORD *)v90 + 1) = v89;
        v91 = *((_QWORD *)v84 + 2);
        if (v16 > v91)
          goto LABEL_130;
        memmove(&v84[16 * v16 + 16], &v84[16 * v16 + 32], 16 * (v91 - v16));
        v85 = v84;
        *((_QWORD *)v84 + 2) = v91 - 1;
        v16 = v91 - 1;
        if (v91 <= 2)
          goto LABEL_95;
      }
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
      return;
    }
  }
  while (1)
  {
    v38 = v16 - 1;
    if (v16 >= 4)
    {
      v43 = &v36[16 * v16];
      v44 = *((_QWORD *)v43 - 8);
      v45 = *((_QWORD *)v43 - 7);
      v49 = __OFSUB__(v45, v44);
      v46 = v45 - v44;
      if (v49)
        goto LABEL_115;
      v48 = *((_QWORD *)v43 - 6);
      v47 = *((_QWORD *)v43 - 5);
      v49 = __OFSUB__(v47, v48);
      v41 = v47 - v48;
      v42 = v49;
      if (v49)
        goto LABEL_116;
      v50 = v16 - 2;
      v51 = &v36[16 * v16 - 32];
      v53 = *(_QWORD *)v51;
      v52 = *((_QWORD *)v51 + 1);
      v49 = __OFSUB__(v52, v53);
      v54 = v52 - v53;
      if (v49)
        goto LABEL_117;
      v49 = __OFADD__(v41, v54);
      v55 = v41 + v54;
      if (v49)
        goto LABEL_119;
      if (v55 >= v46)
      {
        v73 = &v36[16 * v38];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v49 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v49)
          goto LABEL_125;
        v66 = v41 < v76;
        goto LABEL_83;
      }
    }
    else
    {
      if (v16 != 3)
      {
        v67 = *((_QWORD *)v15 + 4);
        v68 = *((_QWORD *)v15 + 5);
        v49 = __OFSUB__(v68, v67);
        v60 = v68 - v67;
        v61 = v49;
        goto LABEL_77;
      }
      v40 = *((_QWORD *)v15 + 4);
      v39 = *((_QWORD *)v15 + 5);
      v49 = __OFSUB__(v39, v40);
      v41 = v39 - v40;
      v42 = v49;
    }
    if ((v42 & 1) != 0)
      goto LABEL_118;
    v50 = v16 - 2;
    v56 = &v36[16 * v16 - 32];
    v58 = *(_QWORD *)v56;
    v57 = *((_QWORD *)v56 + 1);
    v59 = __OFSUB__(v57, v58);
    v60 = v57 - v58;
    v61 = v59;
    if (v59)
      goto LABEL_120;
    v62 = &v36[16 * v38];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v49 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v49)
      goto LABEL_122;
    if (__OFADD__(v60, v65))
      goto LABEL_124;
    if (v60 + v65 >= v41)
    {
      v66 = v41 < v65;
LABEL_83:
      if (v66)
        v38 = v50;
      goto LABEL_85;
    }
LABEL_77:
    if ((v61 & 1) != 0)
      goto LABEL_121;
    v69 = &v36[16 * v38];
    v71 = *(_QWORD *)v69;
    v70 = *((_QWORD *)v69 + 1);
    v49 = __OFSUB__(v70, v71);
    v72 = v70 - v71;
    if (v49)
      goto LABEL_123;
    if (v72 < v60)
      goto LABEL_15;
LABEL_85:
    v77 = v38 - 1;
    if (v38 - 1 >= v16)
    {
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }
    if (!v14)
      goto LABEL_138;
    v78 = &v36[16 * v77];
    v79 = *(_QWORD *)v78;
    v80 = &v36[16 * v38];
    v81 = *((_QWORD *)v80 + 1);
    sub_100062D58((float *)(v14 + 16 * *(_QWORD *)v78), (float *)(v14 + 16 * *(_QWORD *)v80), v14 + 16 * v81, v100, a2);
    if (v2)
      break;
    if (v81 < v79)
      goto LABEL_112;
    if (v38 > *((_QWORD *)v15 + 2))
      goto LABEL_113;
    *(_QWORD *)v78 = v79;
    *(_QWORD *)&v36[16 * v77 + 8] = v81;
    v82 = *((_QWORD *)v15 + 2);
    if (v38 >= v82)
      goto LABEL_114;
    v16 = v82 - 1;
    memmove(&v36[16 * v38], v80 + 16, 16 * (v82 - 1 - v38));
    *((_QWORD *)v15 + 2) = v82 - 1;
    v14 = v99;
    if (v82 <= 2)
      goto LABEL_15;
  }
  v84 = v15;
LABEL_94:
  v85 = v84;
LABEL_95:
  swift_bridgeObjectRelease(v85);
  v96[2] = 0.0;
  swift_bridgeObjectRelease(v96);
}

void sub_100061CA4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int *v18;
  Swift::Int v19;
  Swift::Int v20;
  int *v21;
  int v22;
  Swift::Int v23;
  float *v24;
  float v25;
  Swift::Int v26;
  float *v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  double *v97;
  Swift::Int v98;
  Swift::Int v99;
  uint64_t v100;
  float *v101;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return;
      v82 = 0;
      v83 = *v2;
      v84 = 1;
      while (1)
      {
        v85 = *(float *)(v83 + 4 * v84);
        v86 = v82;
        do
        {
          v87 = v83 + 4 * v86;
          if (*(float *)v87 >= v85)
            break;
          if (!v83)
            goto LABEL_143;
          *(_DWORD *)(v87 + 4) = *(_DWORD *)v87;
          *(float *)(v83 + 4 * v86--) = v85;
        }
        while (v86 != -1);
        ++v84;
        ++v82;
        if (v84 == v3)
          return;
      }
    }
    goto LABEL_139;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_138;
  v98 = v4;
  v99 = v3;
  if (v3 <= 1)
  {
    v8 = _swiftEmptyArrayStorage;
    v101 = (float *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = *(_QWORD *)&_swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_103;
    }
    v97 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for Float);
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v99;
    v97 = (double *)v7;
    v101 = (float *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v95 = v2;
  v96 = *v2 - 4;
  v11 = (char *)_swiftEmptyArrayStorage;
  v100 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(float *)(v10 + 4 * v9);
      v15 = *(float *)(v10 + 4 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = v16;
          v16 = *(float *)(v10 + 4 * v9);
          if (v15 < v14 == v17 >= v16)
            break;
          if (v3 == ++v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v15 < v14)
      {
        if (v9 < v13)
          goto LABEL_140;
        if (v13 < v9)
        {
          v18 = (int *)(v96 + 4 * v9);
          v19 = v9;
          v20 = v13;
          v21 = (int *)(v10 + 4 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_146;
              v22 = *v21;
              *v21 = *v18;
              *v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_137;
      if (v9 - v13 < v98)
      {
        v23 = v13 + v98;
        if (__OFADD__(v13, v98))
          goto LABEL_141;
        if (v23 >= v3)
          v23 = v3;
        if (v23 < v13)
          goto LABEL_142;
        if (v9 != v23)
        {
          v24 = (float *)(v96 + 4 * v9);
          do
          {
            v25 = *(float *)(v10 + 4 * v9);
            v26 = v13;
            v27 = v24;
            do
            {
              v28 = *v27;
              if (*v27 >= v25)
                break;
              if (!v10)
                goto LABEL_144;
              *v27 = v25;
              v27[1] = v28;
              --v27;
              ++v26;
            }
            while (v9 != v26);
            ++v9;
            ++v24;
          }
          while (v9 != v23);
          v9 = v23;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1000A7838(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v30 = *((_QWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 3);
    v12 = v30 + 1;
    v10 = v100;
    if (v30 >= v29 >> 1)
    {
      v79 = sub_1000A7838((char *)(v29 > 1), v30 + 1, 1, v11);
      v10 = v100;
      v11 = v79;
    }
    *((_QWORD *)v11 + 2) = v12;
    v31 = v11 + 32;
    v32 = &v11[16 * v30 + 32];
    *(_QWORD *)v32 = v13;
    *((_QWORD *)v32 + 1) = v9;
    if (v30)
      break;
    v12 = 1;
LABEL_15:
    v3 = v99;
    if (v9 >= v99)
    {
      v8 = v97;
      v2 = v95;
LABEL_103:
      v97 = v8;
      if (v12 < 2)
      {
LABEL_114:
        v81 = v11;
        goto LABEL_115;
      }
      v88 = *v2;
      while (1)
      {
        v89 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v88)
          goto LABEL_147;
        v80 = v11;
        v90 = v11 + 32;
        v91 = *(_QWORD *)&v11[16 * v89 + 32];
        v92 = *(_QWORD *)&v11[16 * v12 + 24];
        sub_100062F98((float *)(v88 + 4 * v91), (float *)(v88 + 4 * *(_QWORD *)&v90[16 * v12 - 16]), v88 + 4 * v92, v101);
        if (v1)
          goto LABEL_94;
        if (v92 < v91)
          goto LABEL_134;
        if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0)
          v80 = sub_1000A7930((uint64_t)v80);
        if (v89 >= *((_QWORD *)v80 + 2))
          goto LABEL_135;
        v93 = &v80[16 * v89 + 32];
        *(_QWORD *)v93 = v91;
        *((_QWORD *)v93 + 1) = v92;
        v94 = *((_QWORD *)v80 + 2);
        if (v12 > v94)
          goto LABEL_136;
        memmove(&v80[16 * v12 + 16], &v80[16 * v12 + 32], 16 * (v94 - v12));
        v11 = v80;
        *((_QWORD *)v80 + 2) = v94 - 1;
        v12 = v94 - 1;
        if (v94 <= 2)
          goto LABEL_114;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      return;
    }
  }
  while (1)
  {
    v33 = v12 - 1;
    if (v12 >= 4)
    {
      v38 = &v31[16 * v12];
      v39 = *((_QWORD *)v38 - 8);
      v40 = *((_QWORD *)v38 - 7);
      v44 = __OFSUB__(v40, v39);
      v41 = v40 - v39;
      if (v44)
        goto LABEL_121;
      v43 = *((_QWORD *)v38 - 6);
      v42 = *((_QWORD *)v38 - 5);
      v44 = __OFSUB__(v42, v43);
      v36 = v42 - v43;
      v37 = v44;
      if (v44)
        goto LABEL_122;
      v45 = v12 - 2;
      v46 = &v31[16 * v12 - 32];
      v48 = *(_QWORD *)v46;
      v47 = *((_QWORD *)v46 + 1);
      v44 = __OFSUB__(v47, v48);
      v49 = v47 - v48;
      if (v44)
        goto LABEL_123;
      v44 = __OFADD__(v36, v49);
      v50 = v36 + v49;
      if (v44)
        goto LABEL_125;
      if (v50 >= v41)
      {
        v68 = &v31[16 * v33];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v44 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v44)
          goto LABEL_131;
        v61 = v36 < v71;
        goto LABEL_83;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v62 = *((_QWORD *)v11 + 4);
        v63 = *((_QWORD *)v11 + 5);
        v44 = __OFSUB__(v63, v62);
        v55 = v63 - v62;
        v56 = v44;
        goto LABEL_77;
      }
      v35 = *((_QWORD *)v11 + 4);
      v34 = *((_QWORD *)v11 + 5);
      v44 = __OFSUB__(v34, v35);
      v36 = v34 - v35;
      v37 = v44;
    }
    if ((v37 & 1) != 0)
      goto LABEL_124;
    v45 = v12 - 2;
    v51 = &v31[16 * v12 - 32];
    v53 = *(_QWORD *)v51;
    v52 = *((_QWORD *)v51 + 1);
    v54 = __OFSUB__(v52, v53);
    v55 = v52 - v53;
    v56 = v54;
    if (v54)
      goto LABEL_126;
    v57 = &v31[16 * v33];
    v59 = *(_QWORD *)v57;
    v58 = *((_QWORD *)v57 + 1);
    v44 = __OFSUB__(v58, v59);
    v60 = v58 - v59;
    if (v44)
      goto LABEL_128;
    if (__OFADD__(v55, v60))
      goto LABEL_130;
    if (v55 + v60 >= v36)
    {
      v61 = v36 < v60;
LABEL_83:
      if (v61)
        v33 = v45;
      goto LABEL_85;
    }
LABEL_77:
    if ((v56 & 1) != 0)
      goto LABEL_127;
    v64 = &v31[16 * v33];
    v66 = *(_QWORD *)v64;
    v65 = *((_QWORD *)v64 + 1);
    v44 = __OFSUB__(v65, v66);
    v67 = v65 - v66;
    if (v44)
      goto LABEL_129;
    if (v67 < v55)
      goto LABEL_15;
LABEL_85:
    v72 = v33 - 1;
    if (v33 - 1 >= v12)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v10)
      goto LABEL_145;
    v73 = &v31[16 * v72];
    v74 = *(_QWORD *)v73;
    v75 = v31;
    v76 = &v31[16 * v33];
    v77 = *((_QWORD *)v76 + 1);
    sub_100062F98((float *)(v10 + 4 * *(_QWORD *)v73), (float *)(v10 + 4 * *(_QWORD *)v76), v10 + 4 * v77, v101);
    if (v1)
      break;
    if (v77 < v74)
      goto LABEL_118;
    if (v33 > *((_QWORD *)v11 + 2))
      goto LABEL_119;
    *(_QWORD *)v73 = v74;
    *(_QWORD *)&v75[16 * v72 + 8] = v77;
    v78 = *((_QWORD *)v11 + 2);
    if (v33 >= v78)
      goto LABEL_120;
    v12 = v78 - 1;
    memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
    v31 = v75;
    *((_QWORD *)v11 + 2) = v78 - 1;
    v10 = v100;
    if (v78 <= 2)
      goto LABEL_15;
  }
  v80 = v11;
LABEL_94:
  v81 = v80;
LABEL_115:
  swift_bridgeObjectRelease(v81);
  v97[2] = 0.0;
  swift_bridgeObjectRelease(v97);
}

void sub_1000622F0(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  Swift::Int v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  Swift::Int v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  char v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  double *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t i;
  uint64_t v98;
  uint64_t v99;
  float v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v114;
  unint64_t v115;
  double v116;
  double v117;
  char *v118;
  unint64_t v119;
  Swift::Int v120;
  _QWORD *v121;
  uint64_t v122;
  double *v123;
  Swift::Int v124;
  Swift::Int v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  float *v131;
  double *v132;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return;
      v94 = *v2;
      v95 = -1;
      v96 = 1;
      for (i = *v2; ; i += 112)
      {
        v98 = v95;
        v99 = i;
        do
        {
          v100 = *(float *)(v99 + 208);
          if (v100 >= *(float *)(v99 + 96))
            break;
          if (!v94)
            goto LABEL_146;
          v101 = v99 + 112;
          v102 = *(_QWORD *)(v99 + 112);
          v103 = *(_OWORD *)(v99 + 192);
          v104 = *(_BYTE *)(v99 + 212);
          v105 = *(_OWORD *)(v99 + 120);
          v106 = *(_OWORD *)(v99 + 136);
          v107 = *(_OWORD *)(v99 + 152);
          v108 = *(_OWORD *)(v99 + 168);
          v109 = *(_OWORD *)(v99 + 80);
          *(_OWORD *)(v99 + 176) = *(_OWORD *)(v99 + 64);
          *(_OWORD *)(v99 + 192) = v109;
          *(_OWORD *)(v99 + 208) = *(_OWORD *)(v99 + 96);
          v110 = *(_OWORD *)(v99 + 16);
          *(_OWORD *)(v99 + 112) = *(_OWORD *)v99;
          *(_OWORD *)(v99 + 128) = v110;
          *(_OWORD *)(v99 + 8) = v105;
          v112 = *(_OWORD *)(v99 + 32);
          v111 = *(_OWORD *)(v99 + 48);
          *(_QWORD *)v99 = v102;
          *(_OWORD *)(v99 + 24) = v106;
          *(_OWORD *)(v99 + 40) = v107;
          *(_OWORD *)(v99 + 56) = v108;
          *(_OWORD *)(v99 + 80) = v103;
          *(float *)(v99 + 96) = v100;
          *(_BYTE *)(v99 + 100) = v104;
          v99 -= 112;
          *(_OWORD *)(v101 + 32) = v112;
          *(_OWORD *)(v101 + 48) = v111;
        }
        while (!__CFADD__(v98++, 1));
        ++v96;
        --v95;
        if (v96 == v3)
          return;
      }
    }
    goto LABEL_142;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_141;
  v124 = v4;
  if (v3 <= 1)
  {
    v9 = _swiftEmptyArrayStorage;
    v131 = (float *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = *(_QWORD *)&_swiftEmptyArrayStorage[2];
      v93 = _swiftEmptyArrayStorage;
LABEL_107:
      v123 = v9;
      if (v12 < 2)
        goto LABEL_97;
      v114 = *v2;
      while (1)
      {
        v115 = v12 - 2;
        if (v12 < 2)
          goto LABEL_136;
        if (!v114)
          goto LABEL_150;
        v92 = (char *)v93;
        v116 = v93[2 * v115 + 4];
        v117 = v93[2 * v12 + 3];
        sub_100063198((float *)(v114 + 112 * *(_QWORD *)&v116), (float *)(v114 + 112 * *(_QWORD *)&v93[2 * v12 + 2]), v114 + 112 * *(_QWORD *)&v117, v131);
        if (v1)
          goto LABEL_96;
        if (*(uint64_t *)&v117 < *(uint64_t *)&v116)
          goto LABEL_137;
        if ((swift_isUniquelyReferenced_nonNull_native(v92) & 1) == 0)
          v92 = sub_1000A7930((uint64_t)v92);
        if (v115 >= *((_QWORD *)v92 + 2))
          goto LABEL_138;
        v118 = &v92[16 * v115 + 32];
        *(double *)v118 = v116;
        *((double *)v118 + 1) = v117;
        v119 = *((_QWORD *)v92 + 2);
        if (v12 > v119)
          goto LABEL_139;
        memmove(&v92[16 * v12 + 16], &v92[16 * v12 + 32], 16 * (v119 - v12));
        v93 = (double *)v92;
        *((_QWORD *)v92 + 2) = v119 - 1;
        v12 = v119 - 1;
        if (v119 <= 2)
          goto LABEL_97;
      }
    }
    v123 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_10000EDC8(&qword_10047E578);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)(v8 + 16) = v6;
    v123 = (double *)v8;
    v131 = (float *)(v8 + 32);
  }
  v10 = 0;
  v121 = v2;
  v11 = *v2;
  v122 = v11 + 96;
  v132 = _swiftEmptyArrayStorage;
  v125 = v3;
  while (1)
  {
    v13 = v10++;
    if (v10 < v3)
    {
      v14 = *(float *)(v122 + 112 * v10);
      v15 = *(float *)(v122 + 112 * v13);
      v10 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = (float *)(v11 + 208 + 112 * v13);
        while (v14 < v15 != v16[28] >= *v16)
        {
          ++v10;
          v16 += 28;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v10 < v13)
          goto LABEL_143;
        if (v13 < v10)
        {
          v17 = 112 * v10;
          v18 = v10;
          v19 = v13;
          v120 = v13;
          v20 = 112 * v13;
          do
          {
            if (v19 != --v18)
            {
              if (!v11)
                goto LABEL_149;
              v21 = v11 + v17;
              v22 = *(_QWORD *)(v11 + v20);
              v23 = *(_DWORD *)(v11 + v20 + 96);
              v24 = *(_BYTE *)(v11 + v20 + 100);
              v129 = *(_OWORD *)(v11 + v20 + 8);
              v130 = *(_OWORD *)(v11 + v20 + 80);
              v127 = *(_OWORD *)(v11 + v20 + 40);
              v128 = *(_OWORD *)(v11 + v20 + 24);
              v126 = *(_OWORD *)(v11 + v20 + 56);
              memmove((void *)(v11 + v20), (const void *)(v11 + v17 - 112), 0x70uLL);
              *(_QWORD *)(v21 - 112) = v22;
              *(_OWORD *)(v21 - 104) = v129;
              *(_OWORD *)(v21 - 88) = v128;
              *(_OWORD *)(v21 - 72) = v127;
              *(_OWORD *)(v21 - 56) = v126;
              *(_OWORD *)(v21 - 32) = v130;
              *(_DWORD *)(v21 - 16) = v23;
              *(_BYTE *)(v21 - 12) = v24;
            }
            ++v19;
            v17 -= 112;
            v20 += 112;
          }
          while (v19 < v18);
          v3 = v125;
          v13 = v120;
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_39;
    if (__OFSUB__(v10, v13))
      goto LABEL_140;
    if (v10 - v13 >= v124)
      goto LABEL_39;
    v25 = v13 + v124;
    if (__OFADD__(v13, v124))
      goto LABEL_144;
    if (v25 >= v3)
      v25 = v3;
    if (v25 < v13)
      goto LABEL_145;
    if (v10 == v25)
    {
LABEL_39:
      v26 = (char *)v132;
      if (v10 < v13)
        goto LABEL_135;
    }
    else
    {
      v76 = v11 - 112 + 112 * v10;
      v26 = (char *)v132;
      do
      {
        v77 = v13;
        v78 = v76;
        do
        {
          v79 = *(float *)(v78 + 208);
          if (v79 >= *(float *)(v78 + 96))
            break;
          if (!v11)
            goto LABEL_147;
          v80 = v78 + 112;
          v81 = *(_QWORD *)(v78 + 112);
          v82 = *(_OWORD *)(v78 + 192);
          v83 = *(_BYTE *)(v78 + 212);
          v84 = *(_OWORD *)(v78 + 120);
          v85 = *(_OWORD *)(v78 + 136);
          v86 = *(_OWORD *)(v78 + 152);
          v87 = *(_OWORD *)(v78 + 168);
          v88 = *(_OWORD *)(v78 + 80);
          *(_OWORD *)(v78 + 176) = *(_OWORD *)(v78 + 64);
          *(_OWORD *)(v78 + 192) = v88;
          *(_OWORD *)(v78 + 208) = *(_OWORD *)(v78 + 96);
          v89 = *(_OWORD *)(v78 + 16);
          *(_OWORD *)(v78 + 112) = *(_OWORD *)v78;
          *(_OWORD *)(v78 + 128) = v89;
          *(_OWORD *)(v78 + 8) = v84;
          v91 = *(_OWORD *)(v78 + 32);
          v90 = *(_OWORD *)(v78 + 48);
          *(_QWORD *)v78 = v81;
          *(_OWORD *)(v78 + 24) = v85;
          *(_OWORD *)(v78 + 40) = v86;
          *(_OWORD *)(v78 + 56) = v87;
          *(_OWORD *)(v78 + 80) = v82;
          *(float *)(v78 + 96) = v79;
          *(_BYTE *)(v78 + 100) = v83;
          v78 -= 112;
          ++v77;
          *(_OWORD *)(v80 + 32) = v91;
          *(_OWORD *)(v80 + 48) = v90;
        }
        while (v10 != v77);
        ++v10;
        v76 += 112;
      }
      while (v10 != v25);
      v10 = v25;
      if (v25 < v13)
      {
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
        return;
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
      v26 = sub_1000A7838(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
    v28 = *((_QWORD *)v26 + 2);
    v27 = *((_QWORD *)v26 + 3);
    v12 = v28 + 1;
    if (v28 >= v27 >> 1)
      v26 = sub_1000A7838((char *)(v27 > 1), v28 + 1, 1, v26);
    *((_QWORD *)v26 + 2) = v12;
    v29 = v26 + 32;
    v30 = &v26[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v10;
    v132 = (double *)v26;
    if (v28)
      break;
    v12 = 1;
LABEL_15:
    v3 = v125;
    if (v10 >= v125)
    {
      v9 = v123;
      v93 = v132;
      v2 = v121;
      goto LABEL_107;
    }
  }
  while (1)
  {
    v31 = v12 - 1;
    if (v12 >= 4)
    {
      v36 = &v29[16 * v12];
      v37 = *((_QWORD *)v36 - 8);
      v38 = *((_QWORD *)v36 - 7);
      v42 = __OFSUB__(v38, v37);
      v39 = v38 - v37;
      if (v42)
        goto LABEL_124;
      v41 = *((_QWORD *)v36 - 6);
      v40 = *((_QWORD *)v36 - 5);
      v42 = __OFSUB__(v40, v41);
      v34 = v40 - v41;
      v35 = v42;
      if (v42)
        goto LABEL_125;
      v43 = v12 - 2;
      v44 = &v29[16 * v12 - 32];
      v46 = *(_QWORD *)v44;
      v45 = *((_QWORD *)v44 + 1);
      v42 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if (v42)
        goto LABEL_126;
      v42 = __OFADD__(v34, v47);
      v48 = v34 + v47;
      if (v42)
        goto LABEL_128;
      if (v48 >= v39)
      {
        v66 = &v29[16 * v31];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v42 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v42)
          goto LABEL_134;
        v59 = v34 < v69;
        goto LABEL_76;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v60 = *((_QWORD *)v26 + 4);
        v61 = *((_QWORD *)v26 + 5);
        v42 = __OFSUB__(v61, v60);
        v53 = v61 - v60;
        v54 = v42;
        goto LABEL_70;
      }
      v33 = *((_QWORD *)v26 + 4);
      v32 = *((_QWORD *)v26 + 5);
      v42 = __OFSUB__(v32, v33);
      v34 = v32 - v33;
      v35 = v42;
    }
    if ((v35 & 1) != 0)
      goto LABEL_127;
    v43 = v12 - 2;
    v49 = &v29[16 * v12 - 32];
    v51 = *(_QWORD *)v49;
    v50 = *((_QWORD *)v49 + 1);
    v52 = __OFSUB__(v50, v51);
    v53 = v50 - v51;
    v54 = v52;
    if (v52)
      goto LABEL_129;
    v55 = &v29[16 * v31];
    v57 = *(_QWORD *)v55;
    v56 = *((_QWORD *)v55 + 1);
    v42 = __OFSUB__(v56, v57);
    v58 = v56 - v57;
    if (v42)
      goto LABEL_131;
    if (__OFADD__(v53, v58))
      goto LABEL_133;
    if (v53 + v58 >= v34)
    {
      v59 = v34 < v58;
LABEL_76:
      if (v59)
        v31 = v43;
      goto LABEL_78;
    }
LABEL_70:
    if ((v54 & 1) != 0)
      goto LABEL_130;
    v62 = &v29[16 * v31];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v42 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v42)
      goto LABEL_132;
    if (v65 < v53)
      goto LABEL_15;
LABEL_78:
    v70 = v31 - 1;
    if (v31 - 1 >= v12)
    {
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
    if (!v11)
      goto LABEL_148;
    v71 = &v29[16 * v70];
    v72 = *(_QWORD *)v71;
    v73 = &v29[16 * v31];
    v74 = *((_QWORD *)v73 + 1);
    sub_100063198((float *)(v11 + 112 * *(_QWORD *)v71), (float *)(v11 + 112 * *(_QWORD *)v73), v11 + 112 * v74, v131);
    if (v1)
      break;
    if (v74 < v72)
      goto LABEL_121;
    if (v31 > *((_QWORD *)v132 + 2))
      goto LABEL_122;
    *(_QWORD *)v71 = v72;
    *(_QWORD *)&v29[16 * v70 + 8] = v74;
    v75 = *((_QWORD *)v132 + 2);
    if (v31 >= v75)
      goto LABEL_123;
    v26 = (char *)v132;
    v12 = v75 - 1;
    memmove(&v29[16 * v31], v73 + 16, 16 * (v75 - 1 - v31));
    *((_QWORD *)v132 + 2) = v75 - 1;
    if (v75 <= 2)
      goto LABEL_15;
  }
  v92 = (char *)v132;
LABEL_96:
  v93 = (double *)v92;
LABEL_97:
  swift_bridgeObjectRelease(v93);
  v123[2] = 0.0;
  swift_bridgeObjectRelease(v123);
}

uint64_t sub_100062ABC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  float v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 != a2)
  {
    v5 = *a4;
    v6 = *a4 + 16 * a3 - 16;
LABEL_5:
    v7 = *(_OWORD *)(v5 + 16 * a3);
    v8 = vabds_f32(COERCE_FLOAT(HIDWORD(*(_QWORD *)(v5 + 16 * a3))), a5);
    v9 = result;
    v10 = v6;
    while (1)
    {
      if (v8 >= vabds_f32(*(float *)(v10 + 4), a5))
      {
LABEL_4:
        ++a3;
        v6 += 16;
        if (a3 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v5)
        break;
      *(_OWORD *)(v10 + 16) = *(_OWORD *)v10;
      *(_OWORD *)v10 = v7;
      v10 -= 16;
      if (a3 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100062B34(float *__dst, float *__src, unint64_t a3, float *a4)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  BOOL v21;
  int64_t v22;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = (char *)__src - (char *)__dst + 15;
  if ((char *)__src - (char *)__dst >= 0)
    v9 = (char *)__src - (char *)__dst;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 4;
  if (v10 >= v12 >> 4)
  {
    if (a4 != __src || &__src[4 * v13] <= a4)
      memmove(a4, __src, 16 * v13);
    v14 = &v4[4 * v13];
    if (v7 >= v6 || v11 < 16)
      goto LABEL_43;
    v18 = (float *)(a3 - 16);
    while (1)
    {
      v19 = v18 + 4;
      if (*(v14 - 3) >= *(v6 - 3))
      {
        v20 = v14 - 4;
        if (v19 != v14)
        {
          v14 -= 4;
          goto LABEL_40;
        }
        v21 = v18 >= v14;
        v14 -= 4;
        if (v21)
          goto LABEL_40;
      }
      else
      {
        v20 = v6 - 4;
        if (v19 != v6)
        {
          v6 -= 4;
LABEL_40:
          *(_OWORD *)v18 = *(_OWORD *)v20;
          goto LABEL_41;
        }
        v21 = v18 >= v6;
        v6 -= 4;
        if (v21)
          goto LABEL_40;
      }
LABEL_41:
      if (v6 > v7)
      {
        v18 -= 4;
        if (v14 > v4)
          continue;
      }
      goto LABEL_43;
    }
  }
  if (a4 != __dst || &__dst[4 * v10] <= a4)
    memmove(a4, __dst, 16 * v10);
  v14 = &v4[4 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      if (v6[1] >= v4[1])
      {
        v17 = v4 + 4;
        v16 = v4;
        v15 = v6;
        if (v7 == v4)
        {
          v4 += 4;
          if (v7 < v17)
            goto LABEL_20;
        }
        else
        {
          v4 += 4;
        }
      }
      else
      {
        v15 = v6 + 4;
        v16 = v6;
        if (v7 == v6 && v7 < v15)
          goto LABEL_20;
      }
      *(_OWORD *)v7 = *(_OWORD *)v16;
LABEL_20:
      v7 += 4;
      if (v4 < v14)
      {
        v6 = v15;
        if ((unint64_t)v15 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_43:
  v22 = (char *)v14 - (char *)v4 + ((char *)v14 - (char *)v4 < 0 ? 0xFuLL : 0);
  if (v6 != v4 || v6 >= (float *)((char *)v4 + (v22 & 0xFFFFFFFFFFFFFFF0)))
    memmove(v6, v4, 16 * (v22 >> 4));
  return 1;
}

uint64_t sub_100062D58(float *__dst, float *__src, unint64_t a3, float *a4, float a5)
{
  float *v5;
  float *v8;
  float *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  BOOL v23;
  int64_t v24;

  v5 = a4;
  v8 = __src;
  v9 = __dst;
  v10 = (char *)__src - (char *)__dst;
  v11 = (char *)__src - (char *)__dst + 15;
  if ((char *)__src - (char *)__dst >= 0)
    v11 = (char *)__src - (char *)__dst;
  v12 = v11 >> 4;
  v13 = a3 - (_QWORD)__src;
  v14 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v14 = a3 - (_QWORD)__src;
  v15 = v14 >> 4;
  if (v12 >= v14 >> 4)
  {
    if (a4 != __src || &__src[4 * v15] <= a4)
      memmove(a4, __src, 16 * v15);
    v16 = &v5[4 * v15];
    if (v9 >= v8 || v13 < 16)
      goto LABEL_43;
    v20 = (float *)(a3 - 16);
    while (1)
    {
      v21 = v20 + 4;
      if (vabds_f32(*(v16 - 3), a5) >= vabds_f32(*(v8 - 3), a5))
      {
        v22 = v16 - 4;
        if (v21 != v16)
        {
          v16 -= 4;
          goto LABEL_40;
        }
        v23 = v20 >= v16;
        v16 -= 4;
        if (v23)
          goto LABEL_40;
      }
      else
      {
        v22 = v8 - 4;
        if (v21 != v8)
        {
          v8 -= 4;
LABEL_40:
          *(_OWORD *)v20 = *(_OWORD *)v22;
          goto LABEL_41;
        }
        v23 = v20 >= v8;
        v8 -= 4;
        if (v23)
          goto LABEL_40;
      }
LABEL_41:
      if (v8 > v9)
      {
        v20 -= 4;
        if (v16 > v5)
          continue;
      }
      goto LABEL_43;
    }
  }
  if (a4 != __dst || &__dst[4 * v12] <= a4)
    memmove(a4, __dst, 16 * v12);
  v16 = &v5[4 * v12];
  if ((unint64_t)v8 < a3 && v10 >= 16)
  {
    while (1)
    {
      if (vabds_f32(v8[1], a5) >= vabds_f32(v5[1], a5))
      {
        v19 = v5 + 4;
        v18 = v5;
        v17 = v8;
        if (v9 == v5)
        {
          v5 += 4;
          if (v9 < v19)
            goto LABEL_20;
        }
        else
        {
          v5 += 4;
        }
      }
      else
      {
        v17 = v8 + 4;
        v18 = v8;
        if (v9 == v8 && v9 < v17)
          goto LABEL_20;
      }
      *(_OWORD *)v9 = *(_OWORD *)v18;
LABEL_20:
      v9 += 4;
      if (v5 < v16)
      {
        v8 = v17;
        if ((unint64_t)v17 < a3)
          continue;
      }
      break;
    }
  }
  v8 = v9;
LABEL_43:
  v24 = (char *)v16 - (char *)v5 + ((char *)v16 - (char *)v5 < 0 ? 0xFuLL : 0);
  if (v8 != v5 || v8 >= (float *)((char *)v5 + (v24 & 0xFFFFFFFFFFFFFFF0)))
    memmove(v8, v5, 16 * (v24 >> 4));
  return 1;
}

uint64_t sub_100062F98(float *__dst, float *__src, unint64_t a3, float *a4)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float v15;
  BOOL v16;
  float *v17;
  float *v18;
  float *v19;
  float v20;
  float v21;
  int64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = (char *)__src - (char *)__dst + 3;
  if ((char *)__src - (char *)__dst >= 0)
    v9 = (char *)__src - (char *)__dst;
  v10 = v9 >> 2;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 3;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 2;
  if (v10 >= v12 >> 2)
  {
    if (a4 != __src || &__src[v13] <= a4)
      memmove(a4, __src, 4 * v13);
    v14 = &v4[v13];
    if (v7 >= v6 || v11 < 4)
      goto LABEL_39;
    v17 = (float *)(a3 - 4);
    v18 = v6;
    while (1)
    {
      v19 = v17 + 1;
      v20 = *--v18;
      v21 = v20;
      if (v20 < *(v14 - 1))
        break;
      v21 = *(v14 - 1);
      v18 = v6;
      if (v19 != v14)
      {
        --v14;
LABEL_35:
        *v17 = v21;
        goto LABEL_36;
      }
      if (v17 >= v14--)
        goto LABEL_35;
LABEL_36:
      if (v18 > v7)
      {
        --v17;
        v6 = v18;
        if (v14 > v4)
          continue;
      }
      v6 = v18;
      goto LABEL_39;
    }
    if (v19 == v6 && v17 < v6)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (a4 != __dst || &__dst[v10] <= a4)
    memmove(a4, __dst, 4 * v10);
  v14 = &v4[v10];
  if ((unint64_t)v6 < a3 && v8 >= 4)
  {
    while (1)
    {
      v15 = *v6;
      if (*v4 >= *v6)
        break;
      v16 = v7 == v6++;
      if (!v16)
        goto LABEL_16;
LABEL_17:
      ++v7;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v15 = *v4;
    v16 = v7 == v4++;
    if (v16)
      goto LABEL_17;
LABEL_16:
    *v7 = v15;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_39:
  v23 = (char *)v14 - (char *)v4 + ((char *)v14 - (char *)v4 < 0 ? 3uLL : 0);
  if (v6 != v4 || v6 >= (float *)((char *)v4 + (v23 & 0xFFFFFFFFFFFFFFFCLL)))
    memmove(v6, v4, 4 * (v23 >> 2));
  return 1;
}

uint64_t sub_100063198(float *__dst, float *__src, unint64_t a3, float *a4)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  float *v18;
  float *v19;
  float *v20;
  BOOL v21;
  size_t v22;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 112;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 112;
  if (v9 >= v11)
  {
    v17 = 28 * v11;
    if (a4 != __src || &__src[v17] <= a4)
      memmove(a4, __src, 112 * v11);
    v13 = &v4[v17];
    if (v7 >= v6 || v10 < 112)
      goto LABEL_39;
    v18 = (float *)(a3 - 112);
    while (1)
    {
      v19 = v18 + 28;
      if (*(v13 - 4) >= *(v6 - 4))
      {
        v20 = v13 - 28;
        if (v19 != v13)
        {
          v13 -= 28;
          goto LABEL_36;
        }
        v21 = v18 >= v13;
        v13 -= 28;
        if (v21)
          goto LABEL_36;
      }
      else
      {
        v20 = v6 - 28;
        if (v19 != v6)
        {
          v6 -= 28;
LABEL_36:
          memmove(v18, v20, 0x70uLL);
          goto LABEL_37;
        }
        v21 = v18 >= v6;
        v6 -= 28;
        if (v21)
          goto LABEL_36;
      }
LABEL_37:
      if (v6 > v7)
      {
        v18 -= 28;
        if (v13 > v4)
          continue;
      }
      goto LABEL_39;
    }
  }
  v12 = 28 * v9;
  if (a4 != __dst || &__dst[v12] <= a4)
    memmove(a4, __dst, v12 * 4);
  v13 = &v4[v12];
  if ((unint64_t)v6 < a3 && v8 >= 112)
  {
    while (1)
    {
      if (v6[24] >= v4[24])
      {
        v16 = v4 + 28;
        v15 = v4;
        v14 = v6;
        if (v7 == v4)
        {
          v4 += 28;
          if (v7 < v16)
            goto LABEL_16;
        }
        else
        {
          v4 += 28;
        }
      }
      else
      {
        v14 = v6 + 28;
        v15 = v6;
        if (v7 == v6 && v7 < v14)
          goto LABEL_16;
      }
      memmove(v7, v15, 0x70uLL);
LABEL_16:
      v7 += 28;
      if (v4 < v13)
      {
        v6 = v14;
        if ((unint64_t)v14 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_39:
  v22 = 28 * (((char *)v13 - (char *)v4) / 112);
  if (v6 != v4 || v6 >= &v4[v22])
    memmove(v6, v4, v22 * 4);
  return 1;
}

uint64_t sub_1000633E0(float32_t a1, int32x4_t a2, float32x4_t a3, float32_t a4, int32x4_t a5, float32x4_t a6)
{
  float32x4_t v6;
  float32x4_t v7;
  int16x4_t v9;

  v6 = (float32x4_t)vzip1q_s32(a2, vzip2q_s32(a2, a2));
  v6.f32[1] = a1;
  v7 = (float32x4_t)vzip1q_s32(a5, vzip2q_s32(a5, a5));
  v7.f32[1] = a4;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(v6, v7)), 0xFuLL))) & 1) == 0)
    return 0;
  v9 = vmovn_s32(vceqq_f32(a3, a6));
  return (unsigned __int16)(v9.i16[0] & v9.i16[1]) & v9.i16[2] & 1;
}

double *sub_100063440(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  id v10;
  void *v11;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  id v29;
  char v30;
  double v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_47;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v36 = v3;
      v5 = 0;
      v6 = v3 & 0xC000000000000001;
      v7 = v3 & 0xFFFFFFFFFFFFFF8;
      v3 += 32;
      v8 = a2 & 0xFFFFFFFFFFFFFF8;
      v42 = a2 & 0xFFFFFFFFFFFFFF8;
      if (a2 < 0)
        v8 = a2;
      v35 = v8;
      v40 = v6;
      v41 = a2 & 0xC000000000000001;
      v9 = &selRef_renderer_didAddNode_forAnchor_;
      v43 = (unint64_t)a2 >> 62;
      v44 = a2;
      v37 = v4;
      v38 = v3;
      v39 = v7;
      while (1)
      {
        if (v6)
        {
          v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v36);
        }
        else
        {
          if (v5 >= *(_QWORD *)(v7 + 16))
          {
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }
          v10 = *(id *)(v3 + 8 * v5);
        }
        v11 = v10;
        if (__OFADD__(v5++, 1))
          goto LABEL_44;
        v13 = objc_msgSend(v10, v9[313]);
        if (v13)
          break;

LABEL_7:
        if (v5 == v4)
          return _swiftEmptyArrayStorage;
      }
      v14 = v13;
      v45 = v11;
      v15 = objc_opt_self(ARPlaneAnchor);
      v16 = swift_dynamicCastObjCClass(v14, v15);
      if (!v16)
        break;
      v17 = v16;
      if (!v43)
      {
        v18 = *(_QWORD *)(v42 + 16);
        swift_bridgeObjectRetain(a2);
        if (v18)
          goto LABEL_16;
        goto LABEL_40;
      }
      swift_bridgeObjectRetain(a2);
      v18 = _CocoaArrayWrapper.endIndex.getter(v35);
      if (!v18)
      {
LABEL_40:

        swift_bridgeObjectRelease(a2);
        v9 = &selRef_renderer_didAddNode_forAnchor_;
        goto LABEL_7;
      }
LABEL_16:
      if (v41)
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
      else
        v19 = *(id *)(a2 + 32);
      v20 = v19;
      v3 = sub_100018148(0, (unint64_t *)&unk_10047E590, ARPlaneAnchor_ptr);
      v21 = static NSObject.== infix(_:_:)(v20, v17);

      if ((v21 & 1) != 0)
      {

        swift_bridgeObjectRelease(a2);
LABEL_37:
        v9 = &selRef_renderer_didAddNode_forAnchor_;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
        v31 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)&v31);
        v32 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(*(_QWORD *)&v31, v45);
        specialized ContiguousArray._endMutation()(v32);
        v7 = v39;
        v6 = v40;
        v3 = v38;
        goto LABEL_7;
      }
      if (v18 == 1)
      {

        swift_bridgeObjectRelease(a2);
LABEL_35:
        v7 = v39;
        v6 = v40;
        v3 = v38;
        v9 = &selRef_renderer_didAddNode_forAnchor_;
        goto LABEL_7;
      }
      if (v41)
      {
        v23 = 1;
        while (1)
        {
          v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v23, a2);
          v25 = v23 + 1;
          if (__OFADD__(v23, 1))
            goto LABEL_45;
          v26 = v24;
          v27 = static NSObject.== infix(_:_:)(v24, v17);
          swift_unknownObjectRelease(v26);
          if ((v27 & 1) != 0)
            goto LABEL_36;
          ++v23;
          a2 = v44;
          if (v25 == v18)
          {

            goto LABEL_34;
          }
        }
      }
      a2 = 5;
      while (1)
      {
        v28 = a2 - 3;
        if (__OFADD__(a2 - 4, 1))
          break;
        v29 = *(id *)(v44 + 8 * a2);
        v30 = static NSObject.== infix(_:_:)(v29, v17);

        if ((v30 & 1) != 0)
        {
LABEL_36:

          a2 = v44;
          swift_bridgeObjectRelease(v44);
          v4 = v37;
          goto LABEL_37;
        }
        ++a2;
        if (v28 == v18)
        {

          a2 = v44;
LABEL_34:
          swift_bridgeObjectRelease(a2);
          v4 = v37;
          goto LABEL_35;
        }
      }
LABEL_46:
      __break(1u);
LABEL_47:
      if (v3 < 0)
        v34 = v3;
      else
        v34 = v3 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v34);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }

    goto LABEL_7;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1000637B0(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  float32x4_t v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  float32x4_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  float32x4_t v47;
  _QWORD *v48;

  v3 = a1;
  v48 = &_swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_41;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v37))
  {
    v39 = v3;
    v5 = 0;
    v6 = v3 & 0xC000000000000001;
    v44 = v3 + 32;
    v45 = v3 & 0xFFFFFFFFFFFFFF8;
    v7 = a2 & 0xFFFFFFFFFFFFFF8;
    v41 = i;
    if (a2 < 0)
      v7 = a2;
    v38 = v7;
    v40 = v3 & 0xC000000000000001;
    while (1)
    {
      if (v6)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v39);
        goto LABEL_11;
      }
      if (v5 >= *(_QWORD *)(v45 + 16))
        break;
      v8 = *(id *)(v44 + 8 * v5);
LABEL_11:
      v9 = v8;
      if (__OFADD__(v5++, 1))
        goto LABEL_40;
      v46 = objc_msgSend(v8, "anchor");
      if (!v46)
      {
LABEL_6:

        goto LABEL_7;
      }
      if ((unint64_t)a2 >> 62)
      {
        swift_bridgeObjectRetain(a2);
        v11 = _CocoaArrayWrapper.endIndex.getter(v38);
        if (!v11)
        {
LABEL_35:

          v33 = swift_bridgeObjectRelease(a2);
          goto LABEL_36;
        }
      }
      else
      {
        v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(a2);
        if (!v11)
          goto LABEL_35;
      }
      v42 = v5;
      v12 = 0;
      v13 = 0;
LABEL_16:
      v43 = v13;
      do
      {
        if ((a2 & 0xC000000000000001) != 0)
          v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a2);
        else
          v15 = *(id *)(a2 + 8 * v12 + 32);
        v16 = v15;
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
          goto LABEL_39;
        }
        v18 = objc_msgSend(v15, "anchor");
        if (!v18)
        {
          v14 = v16;
LABEL_18:

          goto LABEL_19;
        }
        v14 = v18;
        v3 = (uint64_t)&selRef_renderer_didAddNode_forAnchor_;
        objc_msgSend(v9, "worldTransform");
        *(double *)v23.i64 = simd_float4x4.position.getter(v19, v20, v21, v22);
        v47 = v23;
        objc_msgSend(v16, "worldTransform");
        *(double *)v28.i64 = simd_float4x4.position.getter(v24, v25, v26, v27);
        if (fabsf(COERCE_FLOAT(vsubq_f32(v47, v28).i32[1])) >= 0.5)
        {

          goto LABEL_18;
        }
        v3 = (uint64_t)&selRef_renderer_didAddNode_forAnchor_;
        objc_msgSend(v46, "lastUpdateTimestamp");
        v30 = v29;
        objc_msgSend(v14, "lastUpdateTimestamp");
        v32 = v31;

        if (v30 < v32)
        {
          v13 = 1;
          ++v12;
          if (v17 != v11)
            goto LABEL_16;

          swift_bridgeObjectRelease(a2);
          v6 = v40;
          i = v41;
          v5 = v42;
          goto LABEL_7;
        }
LABEL_19:
        ++v12;
      }
      while (v17 != v11);

      v33 = swift_bridgeObjectRelease(a2);
      v6 = v40;
      i = v41;
      v5 = v42;
      if ((v43 & 1) != 0)
        goto LABEL_6;
LABEL_36:
      v3 = (uint64_t)&v48;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v33);
      v34 = v48[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v34);
      v35 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v9);
      specialized ContiguousArray._endMutation()(v35);
LABEL_7:
      if (v5 == i)
        return v48;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    if (v3 < 0)
      v37 = v3;
    else
      v37 = v3 & 0xFFFFFFFFFFFFFF8;
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100063ACC(uint64_t result, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_10005F8AC(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy(&v4[24 * v6 + 32], v7, &type metadata for DebugRectangle);
  if (!v7)
    goto LABEL_19;
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_25;
  v15 = &v4[24 * a2 + 32];
  if (v6 != a2 || &v4[24 * v6 + 32] >= &v15[24 * v14])
    result = (uint64_t)memmove(&v4[24 * v6 + 32], v15, 24 * v14);
  v16 = *((_QWORD *)v4 + 2);
  v13 = __OFADD__(v16, v8);
  v17 = v16 - v7;
  if (!v13)
  {
    *((_QWORD *)v4 + 2) = v17;
LABEL_19:
    *v2 = v4;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

void *sub_100063BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  if (v5 < 0)
    v20 = v5;
  else
    v20 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v20);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_33;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_41:
    __break(1u);
LABEL_42:
    if (v5 < 0)
      v22 = v5;
    else
      v22 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }
LABEL_36:
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_41;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_42;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = sub_100018148(0, &qword_10047E4E0, UILabel_ptr);
  result = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return (void *)specialized Array._endMutation()(result);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v5 < 0)
    v23 = v5;
  else
    v23 = v11;
  swift_bridgeObjectRetain(v5);
  v24 = _CocoaArrayWrapper.endIndex.getter(v23);
  result = (void *)swift_bridgeObjectRelease(v5);
  v16 = v24 - v2;
  if (__OFSUB__(v24, v2))
    goto LABEL_51;
LABEL_21:
  v17 = (const void *)(v11 + 32 + 8 * v2);
  if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
    result = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
  if ((unint64_t)v5 >> 62)
  {
LABEL_52:
    if (v5 < 0)
      v25 = v5;
    else
      v25 = v11;
    swift_bridgeObjectRetain(v5);
    v26 = _CocoaArrayWrapper.endIndex.getter(v25);
    result = (void *)swift_bridgeObjectRelease(v5);
    v19 = v26 + v6;
    if (!__OFADD__(v26, v6))
      goto LABEL_26;
    goto LABEL_57;
  }
  v18 = *(_QWORD *)(v11 + 16);
  v19 = v18 + v6;
  if (!__OFADD__(v18, v6))
  {
LABEL_26:
    *(_QWORD *)(v11 + 16) = v19;
    return (void *)specialized Array._endMutation()(result);
  }
LABEL_57:
  __break(1u);
  return result;
}

uint64_t sub_100063E78(uint64_t result, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_10005F9C4(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy(&v4[16 * v6 + 32], v7, &type metadata for String);
  if (!v7)
    goto LABEL_19;
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_25;
  v15 = &v4[16 * a2 + 32];
  if (v6 != a2 || &v4[16 * v6 + 32] >= &v15[16 * v14])
    result = (uint64_t)memmove(&v4[16 * v6 + 32], v15, 16 * v14);
  v16 = *((_QWORD *)v4 + 2);
  v13 = __OFADD__(v16, v8);
  v17 = v16 - v7;
  if (!v13)
  {
    *((_QWORD *)v4 + 2) = v17;
LABEL_19:
    *v2 = v4;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100063F90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SpatialPlattersHistoryItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100063FD4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, float a7, double a8, double a9, float a10)
{
  float v16;
  double v17;
  char v18;
  float v19;
  double v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  CGPoint v25;
  double v26;
  _BOOL4 v28;
  double v29;
  double v30;
  CGAffineTransform v34;
  CGAffineTransform v35;
  CGPoint v36;

  v16 = 0.0;
  v17 = (double)a4;
  v18 = 1;
  while (1)
  {
    v19 = v16;
    v16 = v16 + 1.0;
    v20 = CGPoint.multiply(by:)(v16, a8, a9);
    v22 = static CGPoint.+ infix(_:_:)(a5, a6, v20, v21);
    v24 = v23;
    sub_100050220(&v35);
    v34 = v35;
    v36.x = v22;
    v36.y = v24;
    v25 = CGPointApplyAffineTransform(v36, &v34);
    v26 = round(v25.x) + round(v25.y) * v17;
    if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0)
      break;
    if (v26 <= -9.22337204e18)
      goto LABEL_27;
    if (v26 >= 9.22337204e18)
      goto LABEL_28;
    v28 = vabds_f32(*(float *)(a3 + 4 * (uint64_t)v26), a7) < 0.15 && *(unsigned __int8 *)(a2 + (uint64_t)v26) > 1u;
    if (v25.x < 0.0)
      v28 = 0;
    if (v25.x >= 256.0)
      v28 = 0;
    if (v25.y < 0.0)
      v28 = 0;
    if (v25.y >= 192.0)
      v28 = 0;
    if (!v28 && (v18 & 1) == 0)
    {
      v19 = v19 + -2.0;
LABEL_25:
      v29 = CGPoint.multiply(by:)(v19, a8, a9);
      static CGPoint.+ infix(_:_:)(a5, a6, v29, v30);
      return;
    }
    v18 = v28;
    if (a1 != 2)
    {
      v18 = v28;
      if (fabsf(v19) >= a10)
        goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

unint64_t sub_1000641C0(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_10005F240((char *)result, v10, 1, (char *)v4);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 4 * v6;
  v14 = (const void *)(v4 + 32 + 4 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 4 * v13)
    result = (unint64_t)memmove((void *)result, v14, 4 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_1000642C4(uint64_t a1)
{
  uint64_t v1;

  sub_100051CE4(a1, *(char **)(v1 + 16));
}

uint64_t sub_1000642CC(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 496));
  return a1;
}

uint64_t sub_1000642F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

uint64_t sub_100064318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10006438C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  sub_100054CA0(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1000643BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000643E0(uint64_t a1)
{
  uint64_t v1;

  sub_100054BEC(a1, *(float *)(v1 + 16));
}

uint64_t sub_1000643EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 560, 15);
}

void sub_100064428()
{
  uint64_t v0;

  sub_100057654(*(_DWORD **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + 48);
}

uint64_t sub_100064438()
{
  uint64_t v0;

  return swift_deallocObject(v0, 224, 15);
}

void sub_100064464(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  __int128 v6;
  int v7;
  char v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  char v16;

  v2 = *(double *)(v1 + 16);
  v3 = *(double *)(v1 + 24);
  v4 = *(double *)(v1 + 32);
  v5 = *(double *)(v1 + 40);
  v6 = *(_OWORD *)(v1 + 128);
  v7 = *(_DWORD *)(v1 + 144);
  v8 = *(_BYTE *)(v1 + 148);
  v9 = *(void **)(v1 + 48);
  v10 = *(_OWORD *)(v1 + 56);
  v11 = *(_OWORD *)(v1 + 72);
  v12 = *(_OWORD *)(v1 + 88);
  v13 = *(_OWORD *)(v1 + 104);
  v14 = v6;
  v15 = v7;
  v16 = v8;
  sub_100059DA8(a1, &v9, v2, v3, v4, v5, *(__n128 *)(v1 + 160), *(__n128 *)(v1 + 176), *(__n128 *)(v1 + 192), *(__n128 *)(v1 + 208));
}

uint64_t sub_1000644D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

__n128 sub_1000644E8(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  *(__n128 *)(a1 + 400) = result;
  *(_OWORD *)(a1 + 416) = v3;
  *(_BYTE *)(a1 + 432) = 0;
  return result;
}

uint64_t sub_1000644F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000EDC8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *sub_100064540()
{
  uint64_t v0;

  return sub_10005D570(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_10006454C()
{
  uint64_t v0;

  return sub_10005D6E4(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_100064554()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_100064580()
{
  uint64_t v0;

  return sub_10005D978(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

double sub_10006458C()
{
  uint64_t v0;

  return sub_10005DA84(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

double sub_100064594()
{
  uint64_t v0;

  return sub_10005DDA8(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_1000645A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000645CC()
{
  uint64_t v0;

  sub_10005DE84(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

void sub_1000645D4()
{
  uint64_t v0;

  sub_10005C36C(v0);
}

void sub_1000645DC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  void (*v17)(char *, uint64_t);
  __n128 v18;
  id v19;
  void *v20;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  __chkstk_darwin(v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v9);
  v13 = &v21[-v12 - 8];
  v14 = v2 + qword_10047DF80;
  swift_beginAccess(v2 + qword_10047DF80, v21, 0, 0);
  sub_1000644F8(v14, (uint64_t)v6, (uint64_t *)&unk_10047E440);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100036600((uint64_t)v6, (uint64_t *)&unk_10047E440);
  }
  else
  {
    v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
    Date.init()(v15);
    v16 = Date.timeIntervalSince(_:)(v13);
    v17 = *(void (**)(char *, uint64_t))(v8 + 8);
    v17(v11, v7);
    if (v16 < 2.0)
    {
      v20 = 0;
      swift_retain();
      Synchronized.wrappedValue.setter(&v20);
      v18 = swift_release();
      ((void (*)(char *, uint64_t, __n128))v17)(v13, v7, v18);
      return;
    }
    v17(v13, v7);
  }
  v20 = a1;
  v19 = a1;
  swift_retain();
  Synchronized.wrappedValue.setter(&v20);
  swift_release();
}

uint64_t sub_1000647D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 544, 15);
}

void sub_100064800(void *a1)
{
  sub_1000645DC(a1);
}

uint64_t sub_100064820()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006484C()
{
  uint64_t v0;

  return sub_100057438(*(void **)(v0 + 16), *(unsigned int *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10006485C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 50, 15);
}

void sub_10006486C(uint64_t a1)
{
  uint64_t v1;

  sub_10005B7C8(a1, *(_QWORD *)(v1 + 32), *(float *)(v1 + 16), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48), *(_BYTE *)(v1 + 49));
}

uint64_t sub_100064880()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 552, 15);
}

void sub_1000648AC()
{
  __n128 *v0;

  sub_10005B720(v0 + 2, v0[1]);
}

uint64_t sub_1000648BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 104, 7);
}

void sub_1000648E0()
{
  CGFloat *v0;

  sub_10005B480(v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10], v0[11], v0[12]);
}

uint64_t sub_100064918(uint64_t a1)
{
  uint64_t v1;

  return sub_1000558B0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10006494C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000EDC8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100064990()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000649B4()
{
  uint64_t v0;

  sub_10005BDA4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000649BC(uint64_t result, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100060538(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy(&v4[304 * v6 + 32], v7, &type metadata for WorldRectangleData);
  if (!v7)
    goto LABEL_19;
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_25;
  v15 = &v4[304 * a2 + 32];
  if (v6 != a2 || &v4[304 * v6 + 32] >= &v15[304 * v14])
    result = (uint64_t)memmove(&v4[304 * v6 + 32], v15, 304 * v14);
  v16 = *((_QWORD *)v4 + 2);
  v13 = __OFADD__(v16, v8);
  v17 = v16 - v7;
  if (!v13)
  {
    *((_QWORD *)v4 + 2) = v17;
LABEL_19:
    *v2 = v4;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_100064B48()
{
  char *v0;
  id v1;
  id v2;
  uint64_t **v3;
  char *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t i;
  id v39;
  void *v40;
  uint64_t v41;
  id v42;
  id v43;

  v1 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v2 = objc_msgSend(v1, "preferredContentSizeCategory");

  LOBYTE(v1) = UIContentSizeCategory.isAccessibilityCategory.getter(v2);
  v3 = &off_10046F000;
  if ((v1 & 1) == 0)
  {
    v4 = &v0[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_measureContent];
    v30 = *(void **)(*(_QWORD *)&v0[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_measureContent]
                   + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_title);
    v31 = (void *)objc_opt_self(UIColor);
    v32 = v30;
    v33 = objc_msgSend(v31, "labelColor");
    objc_msgSend(v32, "setTextColor:", v33);

    v34 = *(void **)v4;
    v35 = *(_QWORD *)(*(_QWORD *)v4
                    + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_horizontalConstraints);
    if ((unint64_t)v35 >> 62)
    {
      if (v35 < 0)
        v41 = *(_QWORD *)(*(_QWORD *)v4
                        + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_horizontalConstraints);
      else
        v41 = v35 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(*(_QWORD *)(*(_QWORD *)v4 + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_horizontalConstraints), 2);
      v42 = v34;
      v36 = _CocoaArrayWrapper.endIndex.getter(v41);
      if (!v36)
        goto LABEL_17;
    }
    else
    {
      v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(*(_QWORD *)(*(_QWORD *)v4 + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_horizontalConstraints), 2);
      v37 = v34;
      if (!v36)
        goto LABEL_17;
    }
    if (v36 < 1)
    {
      __break(1u);
      goto LABEL_20;
    }
    for (i = 0; i != v36; ++i)
    {
      if ((v35 & 0xC000000000000001) != 0)
        v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v35);
      else
        v39 = *(id *)(v35 + 8 * i + 32);
      v40 = v39;
      objc_msgSend(v39, "setConstant:", 0.0);

    }
LABEL_17:
    swift_bridgeObjectRelease_n(v35, 2);

    v27 = objc_msgSend(v0, "contentView");
    v28 = v27;
    v29 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchView];
    goto LABEL_18;
  }
  v4 = &v0[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_accessibleMeasureContent];
  v5 = *(void **)(*(_QWORD *)&v0[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_accessibleMeasureContent]
                + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel);
  v6 = (void *)objc_opt_self(UIFont);
  v7 = v5;
  v8 = objc_msgSend(v6, "preferredFontForTextStyle:", UIFontTextStyleBody);
  v9 = objc_msgSend(v8, "fontDescriptor");

  v10 = objc_msgSend(v9, "fontDescriptorWithSymbolicTraits:", 2);
  if (!v10)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v11 = objc_msgSend(v6, "fontWithDescriptor:size:", v10, 0.0);

  objc_msgSend(v7, "setFont:", v11);
  v12 = *(id *)(*(_QWORD *)v4 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel);
  v13 = objc_msgSend(v6, "preferredFontForTextStyle:", UIFontTextStyleLargeTitle);
  objc_msgSend(v12, "setFont:", v13);

  v14 = *(id *)(*(_QWORD *)v4 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel);
  v15 = objc_msgSend(v6, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  v16 = objc_msgSend(v15, "fontDescriptor");

  v17 = objc_msgSend(v16, "fontDescriptorWithSymbolicTraits:", 2);
  if (v17)
  {
    v18 = objc_msgSend(v6, "fontWithDescriptor:size:", v17, 0.0);

    objc_msgSend(v14, "setFont:", v18);
    v19 = *(void **)(*(_QWORD *)v4 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel);
    v20 = (void *)objc_opt_self(UIColor);
    v21 = v19;
    v22 = objc_msgSend(v20, "labelColor");
    objc_msgSend(v21, "setTextColor:", v22);

    v23 = *(id *)(*(_QWORD *)v4 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel);
    v24 = objc_msgSend(v20, "labelColor");
    objc_msgSend(v23, "setTextColor:", v24);

    v25 = *(id *)(*(_QWORD *)v4 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel);
    v26 = objc_msgSend(v20, "secondaryLabelColor");
    objc_msgSend(v25, "setTextColor:", v26);

    v27 = objc_msgSend(v0, "contentView");
    v28 = v27;
    v29 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchView];
    v3 = &off_10046F000;
LABEL_18:
    objc_msgSend(v27, (SEL)v3[232], v29);

    v43 = objc_msgSend(v0, "contentView");
    objc_msgSend(v43, (SEL)v3[232], *(_QWORD *)v4);

    return;
  }
LABEL_21:
  __break(1u);
}

void sub_1000650B4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  void *v54;
  double v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  void *v72;
  void *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  void *v86;
  void *v87;
  id v88;
  char *v89;
  Class isa;

  v1 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_measureContent;
  objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_measureContent), "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v2 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchView;
  objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchView), "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_accessibleMeasureContent;
  objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_accessibleMeasureContent), "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v5 = objc_msgSend(v4, "preferredContentSizeCategory");

  LOBYTE(v4) = UIContentSizeCategory.isAccessibilityCategory.getter(v5);
  if ((v4 & 1) != 0)
  {
    v6 = objc_msgSend(*(id *)((char *)v0 + v3), "bottomAnchor");
    v7 = objc_msgSend(v0, "contentView");
    v8 = objc_msgSend(v7, "bottomAnchor");

    if (qword_10047A758 != -1)
      swift_once(&qword_10047A758, sub_10000EF18);
    v9 = objc_msgSend(v6, "constraintEqualToAnchor:constant:", v8, -*(double *)&qword_1004AF090);

    v10 = *(void **)((char *)v0 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_bottomContentAnchor);
    v89 = (char *)OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_bottomContentAnchor;
    *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_bottomContentAnchor) = v9;

    v11 = objc_msgSend(*(id *)((char *)v0 + v3), "topAnchor");
    v12 = objc_msgSend(*(id *)((char *)v0 + v2), "bottomAnchor");
    v13 = objc_msgSend(v11, "constraintEqualToAnchor:constant:", v12, *(double *)&qword_1004AF090);

    LODWORD(v14) = 1148813312;
    objc_msgSend(v13, "setPriority:", v14);
    v15 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
    v16 = swift_allocObject(v15, 96, 7);
    *(_OWORD *)(v16 + 16) = xmmword_1003B2E80;
    v17 = objc_msgSend(*(id *)((char *)v0 + v2), "leadingAnchor");
    v18 = objc_msgSend(v0, "contentView");
    v19 = objc_msgSend(v18, "leadingAnchor");

    v20 = objc_msgSend(v17, "constraintEqualToAnchor:constant:", v19, *(double *)&qword_1004AF090);
    *(_QWORD *)(v16 + 32) = v20;
    v21 = objc_msgSend(*(id *)((char *)v0 + v2), "topAnchor");
    v22 = objc_msgSend(v0, "contentView");
    v23 = objc_msgSend(v22, "topAnchor");

    v24 = objc_msgSend(v21, "constraintEqualToAnchor:constant:", v23, *(double *)&qword_1004AF090);
    *(_QWORD *)(v16 + 40) = v24;
    v25 = objc_msgSend(*(id *)((char *)v0 + v2), "widthAnchor");
    if (qword_10047A8E0 != -1)
      swift_once(&qword_10047A8E0, sub_100065CD8);
    v26 = objc_msgSend(v25, "constraintEqualToConstant:", *(double *)&qword_10047E6B0);

    *(_QWORD *)(v16 + 48) = v26;
    v27 = objc_msgSend(*(id *)((char *)v0 + v2), "heightAnchor");
    v28 = objc_msgSend(*(id *)((char *)v0 + v2), "widthAnchor");
    v29 = objc_msgSend(v27, "constraintEqualToAnchor:", v28);

    *(_QWORD *)(v16 + 56) = v29;
    v30 = objc_msgSend(*(id *)((char *)v0 + v3), "leadingAnchor");
    v31 = objc_msgSend(v0, "contentView");
    v32 = objc_msgSend(v31, "leadingAnchor");

    v33 = objc_msgSend(v30, "constraintEqualToAnchor:constant:", v32, *(double *)&qword_1004AF090);
    *(_QWORD *)(v16 + 64) = v33;
    *(_QWORD *)(v16 + 72) = v13;
    v34 = *(void **)((char *)v0 + v3);
    v35 = v13;
    v36 = objc_msgSend(v34, "trailingAnchor");
    v37 = objc_msgSend(v0, "contentView");
    v38 = objc_msgSend(v37, "trailingAnchor");

    v39 = objc_msgSend(v36, "constraintEqualToAnchor:", v38);
    *(_QWORD *)(v16 + 80) = v39;
    v40 = *(void **)&v89[(_QWORD)v0];
    if (v40)
    {
      v41 = (void *)objc_opt_self(NSLayoutConstraint);
      *(_QWORD *)(v16 + 88) = v40;
      specialized Array._endMutation()(v41);
      sub_10002277C();
      v42 = v40;
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v41, "activateConstraints:", isa, swift_bridgeObjectRelease(v16).n128_f64[0]);

LABEL_16:
      return;
    }
    __break(1u);
    goto LABEL_18;
  }
  v43 = objc_msgSend(*(id *)((char *)v0 + v1), "bottomAnchor");
  v44 = objc_msgSend(v0, "contentView");
  v45 = objc_msgSend(v44, "bottomAnchor");

  v46 = objc_msgSend(v43, "constraintEqualToAnchor:", v45);
  v47 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_bottomContentAnchor;
  v48 = *(void **)((char *)v0 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_bottomContentAnchor);
  *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_bottomContentAnchor) = v46;

  v49 = objc_msgSend(*(id *)((char *)v0 + v2), "bottomAnchor");
  v50 = objc_msgSend(v0, "contentView");
  v51 = objc_msgSend(v50, "bottomAnchor");

  if (qword_10047A758 != -1)
    swift_once(&qword_10047A758, sub_10000EF18);
  v52 = objc_msgSend(v49, "constraintLessThanOrEqualToAnchor:constant:", v51, -*(double *)&qword_1004AF090);

  v53 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchBottomAnchor;
  v54 = *(void **)((char *)v0 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchBottomAnchor);
  *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchBottomAnchor) = v52;

  v56 = *(void **)((char *)v0 + v53);
  if (!v56)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  LODWORD(v55) = 1148829696;
  objc_msgSend(v56, "setPriority:", v55);
  v57 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v58 = swift_allocObject(v57, 104, 7);
  *(_OWORD *)(v58 + 16) = xmmword_1003B2E70;
  v59 = objc_msgSend(*(id *)((char *)v0 + v2), "leadingAnchor");
  v60 = objc_msgSend(v0, "contentView");
  v61 = objc_msgSend(v60, "leadingAnchor");

  v62 = objc_msgSend(v59, "constraintEqualToAnchor:constant:", v61, *(double *)&qword_1004AF090);
  *(_QWORD *)(v58 + 32) = v62;
  v63 = objc_msgSend(*(id *)((char *)v0 + v2), "topAnchor");
  v64 = objc_msgSend(v0, "contentView");
  v65 = objc_msgSend(v64, "topAnchor");

  v66 = objc_msgSend(v63, "constraintEqualToAnchor:constant:", v65, *(double *)&qword_1004AF090);
  *(_QWORD *)(v58 + 40) = v66;
  v67 = objc_msgSend(*(id *)((char *)v0 + v2), "widthAnchor");
  if (qword_10047A8E0 != -1)
    swift_once(&qword_10047A8E0, sub_100065CD8);
  v68 = objc_msgSend(v67, "constraintEqualToConstant:", *(double *)&qword_10047E6B0);

  *(_QWORD *)(v58 + 48) = v68;
  v69 = objc_msgSend(*(id *)((char *)v0 + v2), "heightAnchor");
  v70 = objc_msgSend(*(id *)((char *)v0 + v2), "widthAnchor");
  v71 = objc_msgSend(v69, "constraintEqualToAnchor:", v70);

  *(_QWORD *)(v58 + 56) = v71;
  v72 = *(void **)((char *)v0 + v53);
  if (!v72)
    goto LABEL_19;
  *(_QWORD *)(v58 + 64) = v72;
  v73 = *(void **)((char *)v0 + v1);
  v74 = v72;
  v75 = objc_msgSend(v73, "leadingAnchor");
  v76 = objc_msgSend(*(id *)((char *)v0 + v2), "trailingAnchor");
  v77 = objc_msgSend(v75, "constraintEqualToAnchor:constant:", v76, *(double *)&qword_1004AF090);

  *(_QWORD *)(v58 + 72) = v77;
  v78 = objc_msgSend(*(id *)((char *)v0 + v1), "topAnchor");
  v79 = objc_msgSend(v0, "contentView");
  v80 = objc_msgSend(v79, "topAnchor");

  v81 = objc_msgSend(v78, "constraintEqualToAnchor:", v80);
  *(_QWORD *)(v58 + 80) = v81;
  v82 = objc_msgSend(*(id *)((char *)v0 + v1), "trailingAnchor");
  v83 = objc_msgSend(v0, "contentView");
  v84 = objc_msgSend(v83, "trailingAnchor");

  v85 = objc_msgSend(v82, "constraintEqualToAnchor:", v84);
  *(_QWORD *)(v58 + 88) = v85;
  v86 = *(void **)((char *)v0 + v47);
  if (v86)
  {
    v87 = (void *)objc_opt_self(NSLayoutConstraint);
    *(_QWORD *)(v58 + 96) = v86;
    specialized Array._endMutation()(v87);
    sub_10002277C();
    v88 = v86;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v87, "activateConstraints:", isa, swift_bridgeObjectRelease(v58).n128_f64[0]);
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

void sub_100065B7C()
{
  uint64_t v0;
  char *v1;
  void *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;

  v1 = *(char **)(v0 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_measureContent);
  v2 = *(void **)&v1[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits];
  v3 = v1;
  objc_msgSend(v2, "setSelectedRange:", 0, 0);
  v4 = *(_QWORD *)&v3[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels];
  objc_msgSend(*(id *)(*(_QWORD *)(v4 + OBJC_IVAR____TtC7Measure22NewSecondaryLabelStack_topLabel)+ OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label), "setSelectedRange:", 0, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(v4 + OBJC_IVAR____TtC7Measure22NewSecondaryLabelStack_bottomLabel)+ OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label), "setSelectedRange:", 0, 0);

  v5 = *(char **)(v0 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_accessibleMeasureContent);
  v6 = *(void **)&v5[OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel];
  v7 = v5;
  objc_msgSend(v6, "setSelectedRange:", 0, 0);
  objc_msgSend(*(id *)&v7[OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel], "setSelectedRange:", 0, 0);
  objc_msgSend(*(id *)&v7[OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel], "setSelectedRange:", 0, 0);

}

void sub_100065CD8()
{
  qword_10047E6B0 = 0x404C000000000000;
}

id sub_100065CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  id v14;
  objc_super v16;

  v6 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_measureContent;
  v7 = objc_allocWithZone((Class)type metadata accessor for MeasureTableViewCellCommonContentView());
  v8 = v3;
  *(_QWORD *)&v3[v6] = objc_msgSend(v7, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v9 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchView;
  v10 = type metadata accessor for SketchLineHistory();
  *(_QWORD *)&v8[v9] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v10)), "init");
  v11 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_accessibleMeasureContent;
  *(_QWORD *)&v8[v11] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AccessibilityTripleStack()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v8[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_bottomContentAnchor] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchBottomAnchor] = 0;

  if (a3)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v12 = 0;
  }
  v16.receiver = v8;
  v16.super_class = (Class)type metadata accessor for BaseLineHistoryCell();
  v13 = objc_msgSendSuper2(&v16, "initWithStyle:reuseIdentifier:", a1, v12);

  v14 = v13;
  sub_100064B48();
  sub_1000650B4();

  return v14;
}

id sub_100065E90(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  objc_super v13;

  v3 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_measureContent;
  v4 = objc_allocWithZone((Class)type metadata accessor for MeasureTableViewCellCommonContentView());
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v6 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchView;
  v7 = type metadata accessor for SketchLineHistory();
  *(_QWORD *)&v5[v6] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7)), "init");
  v8 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_accessibleMeasureContent;
  *(_QWORD *)&v5[v8] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AccessibilityTripleStack()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v5[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_bottomContentAnchor] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchBottomAnchor] = 0;

  v13.receiver = v5;
  v13.super_class = (Class)type metadata accessor for BaseLineHistoryCell();
  v9 = objc_msgSendSuper2(&v13, "initWithCoder:", a1);
  v10 = v9;
  if (v9)
  {
    v11 = v9;
    sub_100064B48();
    sub_1000650B4();

  }
  return v10;
}

void sub_100065FE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v10;

  v1 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_measureContent;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_measureContent), "removeFromSuperview");
  v2 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchView;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_sketchView), "removeFromSuperview");
  v3 = OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_accessibleMeasureContent;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure19BaseLineHistoryCell_accessibleMeasureContent), "removeFromSuperview");
  v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MeasureTableViewCellCommonContentView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v5 = *(void **)(v0 + v1);
  *(_QWORD *)(v0 + v1) = v4;

  v6 = type metadata accessor for SketchLineHistory();
  v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v6)), "init");
  v8 = *(void **)(v0 + v2);
  *(_QWORD *)(v0 + v2) = v7;

  v9 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AccessibilityTripleStack()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v10 = *(void **)(v0 + v3);
  *(_QWORD *)(v0 + v3) = v9;

  sub_100064B48();
  sub_1000650B4();
}

id sub_10006610C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BaseLineHistoryCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BaseLineHistoryCell()
{
  return objc_opt_self(_TtC7Measure19BaseLineHistoryCell);
}

void sub_1000661C4(void *a1)
{
  CGFloat v2;
  CGFloat v3;
  id v4;
  CGContext *v5;
  CGContext *v6;
  UIImage *v7;
  CGSize v8;

  objc_msgSend(a1, "frame");
  v8.width = v2;
  v8.height = v3;
  UIGraphicsBeginImageContext(v8);
  v4 = objc_msgSend(a1, "layer");
  v5 = UIGraphicsGetCurrentContext();
  if (!v5)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = v5;
  objc_msgSend(v4, "renderInContext:", v5);

  v7 = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  if (!v7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (objc_msgSend(objc_allocWithZone((Class)CIImage), "initWithImage:", v7))
  {

    return;
  }
LABEL_7:
  __break(1u);
}

void sub_10006634C(uint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  NSString v9;
  objc_super v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure13PrefixedLabel_prefix + 8];
  v11 = *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure13PrefixedLabel_prefix];
  v12 = v5;
  swift_bridgeObjectRetain(v5);
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  if (a2)
    v7 = a1;
  else
    v7 = 0;
  if (!a2)
    a2 = 0xE000000000000000;
  v8 = a2;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease(a2);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for PrefixedLabel();
  objc_msgSendSuper2(&v10, "setText:", v9);

}

id sub_10006653C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PrefixedLabel();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PrefixedLabel()
{
  return objc_opt_self(_TtC7Measure13PrefixedLabel);
}

void sub_1000665A0(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  id v13;
  __n128 v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __n128 v21;
  void *v22;
  id v23;
  uint64_t v24;
  NSString v25;
  double v26;
  double v27;
  double v28;
  double v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  double v35;
  id v36;
  uint64_t v37;
  NSString v38;
  double v39;
  double v40;
  double v41;
  double v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  id v49;
  id v50;
  __n128 v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  id v57;
  __n128 v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  __n128 v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  __n128 v72;
  void *v73;
  id v74;
  uint64_t v75;
  NSString v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  uint64_t v81;
  NSString v82;
  id v83;
  id v84;
  __n128 v85;
  uint64_t v86;
  NSString v87;
  id v88;
  unint64_t v89;
  SCNDebugOptions v90;
  double v91;
  id v92;
  uint64_t v93;
  NSString v94;
  id v95;
  uint64_t v96;
  NSString v97;
  id v98;
  Swift::String v99;
  void *object;
  unint64_t v101;
  id v102;
  uint64_t v103;
  NSString v104;
  double v105;
  id v106;
  uint64_t v107;
  NSString v108;
  id v109;
  Swift::String v110;
  void *v111;
  unint64_t v112;
  uint64_t v113;
  CGFloat v114;
  double Width;
  double v116;
  double v117;
  id v118;
  Swift::String v119;
  Swift::String v120;
  NSString v121;
  id v122;
  void *v123;
  id v124;
  id v125;
  id v126;
  CGRect v127;
  CGRect v128;

  v3 = v2;
  *(_QWORD *)(v3 + 56) = 0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 16) = a1;
  v6 = objc_allocWithZone((Class)type metadata accessor for SceneDebugObserver());
  v124 = a1;
  v7 = a2;
  *(_QWORD *)(v3 + 64) = sub_1001760C4(v7);
  v8 = (void *)objc_opt_self(NSUserDefaults);
  v9 = objc_msgSend(v8, "standardUserDefaults");
  KeyPath = swift_getKeyPath(&unk_1003B2F88);
  v11 = swift_allocObject(&unk_1004417E8, 24, 7);
  swift_weakInit(v11 + 16, v3);
  v12 = swift_allocObject(&unk_100441810, 32, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = v7;
  sub_100049274();
  v13 = v7;
  v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  NSUserDefaults.performOnChange<A>(to:on:action:)(KeyPath, v15, sub_100067EB4, v12);

  swift_release();
  swift_release();

  v16 = objc_msgSend(v8, "standardUserDefaults");
  v17 = swift_getKeyPath(&unk_1003B2FC0);
  v18 = swift_allocObject(&unk_1004417E8, 24, 7);
  swift_weakInit(v18 + 16, v3);
  v19 = swift_allocObject(&unk_100441838, 32, 7);
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = v13;
  v20 = v13;
  v22 = (void *)static OS_dispatch_queue.main.getter(v21);
  NSUserDefaults.performOnChange<A>(to:on:action:)(v17, v22, sub_100067928, v19);

  swift_release();
  swift_release();

  v126 = v8;
  v23 = objc_msgSend(v8, "standardUserDefaults");
  v24 = *(_QWORD *)(Defaults.showWorldAnchorDebugInfo.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v24);
  v25 = String._bridgeToObjectiveC()();
  LODWORD(v24) = objc_msgSend(v23, "BOOLForKey:", v25, swift_bridgeObjectRelease(v24).n128_f64[0]);

  if ((_DWORD)v24)
  {
    objc_msgSend(v20, "frame");
    v30 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DebugLineView()), "initWithFrame:", v26, v27, v28, v29);
    v31 = *(void **)(v3 + 120);
    *(_QWORD *)(v3 + 120) = v30;

    v32 = *(void **)(v3 + 120);
    if (v32)
    {
      v33 = type metadata accessor for WorldAnchorDebugVisual();
      v34 = (_QWORD *)swift_allocObject(v33, 96, 7);
      *(_QWORD *)(v3 + 56) = sub_100067AEC(v20, v32, v34);
      *(_QWORD *)&v35 = swift_release().n128_u64[0];
      if (*(_QWORD *)(v3 + 120))
      {
        objc_msgSend(v124, "addSubview:", v35);
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
LABEL_5:
  v36 = objc_msgSend(v8, "standardUserDefaults");
  v37 = *(_QWORD *)(Defaults.showRectangleDebugInfo.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v37);
  v38 = String._bridgeToObjectiveC()();
  LODWORD(v37) = objc_msgSend(v36, "BOOLForKey:", v38, swift_bridgeObjectRelease(v37).n128_f64[0]);

  if (!(_DWORD)v37)
    goto LABEL_8;
  objc_msgSend(v20, "frame");
  v43 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DebugLineView()), "initWithFrame:", v39, v40, v41, v42);
  v44 = *(void **)(v3 + 80);
  *(_QWORD *)(v3 + 80) = v43;

  if (!*(_QWORD *)(v3 + 80))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  objc_msgSend(v124, "addSubview:");
LABEL_8:
  v45 = objc_msgSend(v8, "standardUserDefaults");
  v46 = swift_getKeyPath(&unk_1003B2FF8);
  v47 = swift_allocObject(&unk_1004417E8, 24, 7);
  swift_weakInit(v47 + 16, v3);
  v48 = (_QWORD *)swift_allocObject(&unk_100441860, 40, 7);
  v48[2] = v47;
  v48[3] = v20;
  v48[4] = v124;
  v49 = v124;
  v50 = v20;
  v52 = (void *)static OS_dispatch_queue.main.getter(v51);
  NSUserDefaults.performOnChange<A>(to:on:action:)(v46, v52, sub_100067994, v48);

  swift_release();
  swift_release();

  v53 = objc_msgSend(v126, "standardUserDefaults");
  v54 = swift_getKeyPath(&unk_1003B3038);
  v55 = swift_allocObject(&unk_1004417E8, 24, 7);
  swift_weakInit(v55 + 16, v3);
  v56 = (_QWORD *)swift_allocObject(&unk_100441888, 40, 7);
  v56[2] = v55;
  v56[3] = v50;
  v56[4] = v49;
  v125 = v49;
  v57 = v50;
  v59 = (void *)static OS_dispatch_queue.main.getter(v58);
  NSUserDefaults.performOnChange<A>(to:on:action:)(v54, v59, sub_100067A28, v56);

  swift_release();
  swift_release();

  v60 = objc_msgSend(v126, "standardUserDefaults");
  v61 = swift_getKeyPath(&unk_1003B3070);
  v62 = swift_allocObject(&unk_1004417E8, 24, 7);
  swift_weakInit(v62 + 16, v3);
  v63 = swift_allocObject(&unk_1004418B0, 32, 7);
  *(_QWORD *)(v63 + 16) = v62;
  *(_QWORD *)(v63 + 24) = v57;
  v64 = v57;
  v66 = (void *)static OS_dispatch_queue.main.getter(v65);
  NSUserDefaults.performOnChange<A>(to:on:action:)(v61, v66, sub_100067A88, v63);

  swift_release();
  swift_release();

  v67 = objc_msgSend(v126, "standardUserDefaults");
  v68 = swift_getKeyPath(&unk_1003B30A8);
  v69 = swift_allocObject(&unk_1004417E8, 24, 7);
  swift_weakInit(v69 + 16, v3);
  v70 = swift_allocObject(&unk_1004418D8, 32, 7);
  *(_QWORD *)(v70 + 16) = v69;
  *(_QWORD *)(v70 + 24) = v64;
  v71 = v64;
  v73 = (void *)static OS_dispatch_queue.main.getter(v72);
  NSUserDefaults.performOnChange<A>(to:on:action:)(v68, v73, sub_100067AE4, v70);

  swift_release();
  swift_release();

  v74 = objc_msgSend(v126, "standardUserDefaults");
  v75 = *(_QWORD *)(Defaults.drawDebugPlanes.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v75);
  v76 = String._bridgeToObjectiveC()();
  LODWORD(v75) = objc_msgSend(v74, "BOOLForKey:", v76, swift_bridgeObjectRelease(v75).n128_f64[0]);

  if ((_DWORD)v75)
  {
    v77 = type metadata accessor for DebugPlaneVisualizer();
    v78 = swift_allocObject(v77, 24, 7);
    *(_QWORD *)(v78 + 16) = 0;
    *(_QWORD *)(v3 + 48) = v78;
    swift_release();
  }
  v79 = v71;
  v80 = objc_msgSend(v126, "standardUserDefaults");
  v81 = *(_QWORD *)(Defaults.showStatistics.unsafeMutableAddressor(v80) + 8);
  swift_bridgeObjectRetain(v81);
  v82 = String._bridgeToObjectiveC()();
  v83 = objc_msgSend(v80, "BOOLForKey:", v82, swift_bridgeObjectRelease(v81).n128_f64[0]);

  objc_msgSend(v79, "setShowsStatistics:", v83);
  v84 = objc_msgSend(v126, "standardUserDefaults");
  v86 = *(_QWORD *)(Defaults.showFeaturePoints.unsafeMutableAddressor(v85) + 8);
  swift_bridgeObjectRetain(v86);
  v87 = String._bridgeToObjectiveC()();
  LODWORD(v86) = objc_msgSend(v84, "BOOLForKey:", v87, swift_bridgeObjectRelease(v86).n128_f64[0]);

  if ((_DWORD)v86)
  {
    v88 = v79;
    v89 = (unint64_t)objc_msgSend(v88, "debugOptions");
    if ((ARSCNDebugOptionShowFeaturePoints & ~v89) != 0)
      v90 = ARSCNDebugOptionShowFeaturePoints;
    else
      v90 = 0;
    objc_msgSend(v88, "setDebugOptions:", v90 | v89);

  }
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable")
    && (v92 = objc_msgSend(v126, "standardUserDefaults"),
        v93 = *(_QWORD *)(Defaults.peShowADIndicator.unsafeMutableAddressor() + 8),
        swift_bridgeObjectRetain(v93),
        v94 = String._bridgeToObjectiveC()(),
        LODWORD(v93) = objc_msgSend(v92, "BOOLForKey:", v94, swift_bridgeObjectRelease(v93).n128_f64[0]),
        v92,
        v94,
        (_DWORD)v93))
  {
    v95 = objc_msgSend(v126, "standardUserDefaults");
    v96 = *(_QWORD *)(Defaults.peADTestMode.unsafeMutableAddressor() + 8);
    swift_bridgeObjectRetain(v96);
    v97 = String._bridgeToObjectiveC()();
    v98 = objc_msgSend(v95, "integerForKey:", v97, swift_bridgeObjectRelease(v96).n128_f64[0]);

    if ((unint64_t)v98 > 3)
    {
LABEL_33:
      __break(1u);
      return;
    }
    v99._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v99._object;
    String.append(_:)(v99);
    *(_QWORD *)&v91 = swift_bridgeObjectRelease(object).n128_u64[0];
    v101 = 0xE200000000000000;
  }
  else
  {
    v101 = 0xE000000000000000;
  }
  v102 = objc_msgSend(v126, "standardUserDefaults", v91);
  v103 = *(_QWORD *)(Defaults.peShowPatchTrackingIndicator.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v103);
  v104 = String._bridgeToObjectiveC()();
  LODWORD(v103) = objc_msgSend(v102, "BOOLForKey:", v104, swift_bridgeObjectRelease(v103).n128_f64[0]);

  if ((_DWORD)v103)
  {
    v106 = objc_msgSend(v126, "standardUserDefaults");
    v107 = *(_QWORD *)(Defaults.pePatchTrackingMode.unsafeMutableAddressor() + 8);
    swift_bridgeObjectRetain(v107);
    v108 = String._bridgeToObjectiveC()();
    v109 = objc_msgSend(v106, "integerForKey:", v108, swift_bridgeObjectRelease(v107).n128_f64[0]);

    if ((unint64_t)v109 <= 4)
    {
      v110._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v111 = v110._object;
      String.append(_:)(v110);
      *(_QWORD *)&v105 = swift_bridgeObjectRelease(v111).n128_u64[0];
      v113 = 21584;
      v112 = 0xE200000000000000;
      goto LABEL_24;
    }
    goto LABEL_32;
  }
  v113 = 0;
  v112 = 0xE000000000000000;
LABEL_24:
  if ((v101 & 0xF00000000000000) != 0 || (v112 & 0xF00000000000000) != 0)
  {
    objc_msgSend(v79, "frame", v105);
    v114 = CGRectGetHeight(v127) + -200.0;
    objc_msgSend(v79, "frame");
    Width = CGRectGetWidth(v128);
    v116 = CGSize.init(_:_:)(Width, 200.0);
    v118 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 10.0, v114, v116, v117);
    objc_msgSend(v118, "setAlpha:", 0.5);
    swift_bridgeObjectRetain(v101);
    v119._countAndFlagsBits = 32;
    v119._object = (void *)0xE100000000000000;
    String.append(_:)(v119);
    swift_bridgeObjectRelease(v101);
    swift_bridgeObjectRetain(v101);
    v120._countAndFlagsBits = v113;
    v120._object = (void *)v112;
    String.append(_:)(v120);
    swift_bridgeObjectRelease(v101);
    swift_bridgeObjectRelease(v112);
    v121 = String._bridgeToObjectiveC()();
    objc_msgSend(v118, "setText:", v121, swift_bridgeObjectRelease(v101).n128_f64[0]);

    v122 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
    objc_msgSend(v118, "setTextColor:", v122);

    v123 = v125;
    objc_msgSend(v125, "addSubview:", v118);

  }
  else
  {
    swift_bridgeObjectRelease(v112);
    swift_bridgeObjectRelease(v101);
    v123 = v125;
  }

}

double sub_10006725C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t Strong;
  double result;
  _BYTE v7[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    sub_100067D08(a3, Strong);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

void sub_1000672BC(unsigned __int8 *a1, uint64_t a2, void *a3, void *a4)
{
  int v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  double v20;
  void *v21;
  id v22;
  _BYTE v23[24];

  v6 = *a1;
  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v23, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (!Strong)
    return;
  v9 = Strong;
  if (v6 && !*(_QWORD *)(Strong + 88))
  {
    objc_msgSend(a3, "frame");
    v14 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DebugStatsView()), "initWithFrame:", v10, v11, v12, v13);
    v15 = *(void **)(v9 + 88);
    *(_QWORD *)(v9 + 88) = v14;

    v16 = *(void **)(v9 + 88);
    if (v16)
    {
      v17 = type metadata accessor for DebugStatsController();
      swift_allocObject(v17, 208, 7);
      v18 = v16;
      v19 = sub_10004D1F0(v18);

      *(_QWORD *)(v9 + 32) = v19;
      *(_QWORD *)&v20 = swift_release().n128_u64[0];
      if (*(_QWORD *)(v9 + 88))
      {
        objc_msgSend(a4, "addSubview:", v20);
        goto LABEL_7;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_7:
  v21 = *(void **)(v9 + 88);
  if (v21)
  {
    v22 = v21;
    objc_msgSend(v22, "setHidden:", v6 ^ 1u);

  }
  swift_release();
}

void sub_100067428(unsigned __int8 *a1, uint64_t a2, void *a3, void *a4)
{
  int v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  char *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _BYTE v22[24];

  v6 = *a1;
  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v22, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (!Strong)
    return;
  v9 = Strong;
  if (v6 && !*(_QWORD *)(Strong + 96))
  {
    objc_msgSend(a3, "frame");
    v14 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DebugStateView(0)), "initWithFrame:", v10, v11, v12, v13);
    v15 = *(void **)(v9 + 96);
    *(_QWORD *)(v9 + 96) = v14;

    v16 = *(void **)(v9 + 96);
    if (v16)
    {
      v17 = objc_allocWithZone((Class)type metadata accessor for DebugStateController(0));
      v18 = sub_100067EB8(v16);
      v19 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v18;

      if (*(_QWORD *)(v9 + 96))
      {
        objc_msgSend(a4, "addSubview:");
        goto LABEL_7;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_7:
  v20 = *(_QWORD *)(v9 + 40);
  if (v20)
    *(_BYTE *)(v20 + qword_10047E880) = v6;
  v21 = *(void **)(v9 + 96);
  if (v21)
    objc_msgSend(v21, "setHidden:", v6 ^ 1u);
  swift_release();
}

void sub_100067580(unsigned __int8 *a1, uint64_t a2, void *a3)
{
  int v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;
  void *v14;
  _BYTE v15[24];

  v4 = *a1;
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v15, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    v8 = *(void **)(Strong + 104);
    if (v4)
    {
      if (v8)
        goto LABEL_8;
      objc_msgSend(a3, "frame");
      v13 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PlaneSelectionStatsView()), "initWithFrame:", v9, v10, v11, v12);
      v14 = *(void **)(v7 + 104);
      *(_QWORD *)(v7 + 104) = v13;

      if (!*(_QWORD *)(v7 + 104))
      {
        __break(1u);
        return;
      }
      objc_msgSend(*(id *)(v7 + 16), "addSubview:");
      v8 = *(void **)(v7 + 104);
      if (v8)
        goto LABEL_8;
      __break(1u);
    }
    if (!v8)
    {
LABEL_9:
      swift_release();
      return;
    }
LABEL_8:
    objc_msgSend(v8, "setHidden:", v4 ^ 1u);
    goto LABEL_9;
  }
}

void sub_10006768C(unsigned __int8 *a1, uint64_t a2, void *a3)
{
  int v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;
  void *v14;
  _BYTE v15[24];

  v4 = *a1;
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v15, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    v8 = *(void **)(Strong + 112);
    if (v4)
    {
      if (v8)
        goto LABEL_8;
      objc_msgSend(a3, "frame");
      v13 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AccuracyDebugView()), "initWithFrame:", v9, v10, v11, v12);
      v14 = *(void **)(v7 + 112);
      *(_QWORD *)(v7 + 112) = v13;

      if (!*(_QWORD *)(v7 + 112))
      {
        __break(1u);
        return;
      }
      objc_msgSend(*(id *)(v7 + 16), "addSubview:");
      v8 = *(void **)(v7 + 112);
      if (v8)
        goto LABEL_8;
      __break(1u);
    }
    if (!v8)
    {
LABEL_9:
      swift_release();
      return;
    }
LABEL_8:
    objc_msgSend(v8, "setHidden:", v4 ^ 1u);
    goto LABEL_9;
  }
}

uint64_t sub_100067798()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));

  return v0;
}

uint64_t sub_10006781C()
{
  uint64_t v0;

  sub_100067798();
  return swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for DebugVisualizer()
{
  return objc_opt_self(_TtC7Measure15DebugVisualizer);
}

const char *sub_10006785C()
{
  return "kEdgeDetectionDebugReticleEnabled";
}

id sub_100067868@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "kEdgeDetectionDebugReticleEnabled");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100067898(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setKEdgeDetectionDebugReticleEnabled:", *a1);
}

uint64_t sub_1000678AC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

const char *sub_1000678D4()
{
  return "showEDLines";
}

id sub_1000678E0@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "showEDLines");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100067910(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setShowEDLines:", *a1);
}

double sub_100067928(uint64_t a1)
{
  uint64_t v1;

  return sub_10006725C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

const char *sub_100067940()
{
  return "kShowStatistics";
}

id sub_10006794C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "kShowStatistics");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10006797C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setKShowStatistics:", *a1);
}

void sub_100067994(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_1000672BC(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

const char *sub_1000679A0()
{
  return "kShowOverallState";
}

id sub_1000679AC@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "kShowOverallState");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000679DC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setKShowOverallState:", *a1);
}

uint64_t sub_1000679F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_100067A28(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_100067428(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

const char *sub_100067A34()
{
  return "kPEShowStats";
}

id sub_100067A40@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "kPEShowStats");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100067A70(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setKPEShowStats:", *a1);
}

void sub_100067A88(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_100067580(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

const char *sub_100067A90()
{
  return "kPEShowAccuracy";
}

id sub_100067A9C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "kPEShowAccuracy");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100067ACC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setKPEShowAccuracy:", *a1);
}

void sub_100067AE4(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_10006768C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

_QWORD *sub_100067AEC(void *a1, void *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSString v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[5];

  v3 = a3;
  v6 = *a3;
  v7 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v8 = *(_QWORD *)(Defaults.showWorldAnchorDebugInfo.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v8);
  v9 = String._bridgeToObjectiveC()();
  LOBYTE(v8) = objc_msgSend(v7, "BOOLForKey:", v9, swift_bridgeObjectRelease(v8).n128_f64[0]);

  *((_BYTE *)v3 + 16) = v8;
  v3[3] = sub_1000C9150(_swiftEmptyArrayStorage);
  v3[4] = sub_1000C925C(_swiftEmptyArrayStorage);
  v3[5] = sub_1000C9268((uint64_t)_swiftEmptyArrayStorage);
  v3[6] = sub_1000C933C(_swiftEmptyArrayStorage);
  v3[7] = sub_1000C933C(_swiftEmptyArrayStorage);
  v10 = (void *)objc_opt_self(UIColor);
  v3[10] = objc_msgSend(v10, "redColor");
  v3[11] = objc_msgSend(v10, "greenColor");
  v11 = objc_opt_self(ARSCNView);
  v12 = swift_dynamicCastObjCClass(a1, v11);
  if (v12)
  {
    v3[8] = a2;
    v3[9] = v12;
    v13 = a1;
    v14 = a2;
    v15 = WorldAnchor.delegate.unsafeMutableAddressor();
    v18[3] = v6;
    v18[4] = &off_10044C7A8;
    v18[0] = v3;
    swift_beginAccess(v15, &v17, 1, 0);
    swift_retain();
    sub_100067E6C((uint64_t)v18, v15);

  }
  else
  {

    swift_bridgeObjectRelease(v3[3]);
    swift_bridgeObjectRelease(v3[4]);
    swift_bridgeObjectRelease(v3[5]);
    swift_bridgeObjectRelease(v3[6]);
    swift_bridgeObjectRelease(v3[7]);

    swift_deallocPartialClassInstance(v3, v6, 96, 7);
    return 0;
  }
  return v3;
}

void sub_100067D08(void *a1, uint64_t a2)
{
  void *v4;
  id v5;
  unsigned __int8 v6;
  id v7;
  unsigned int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;

  v4 = (void *)objc_opt_self(NSUserDefaults);
  v5 = objc_msgSend(v4, "standardUserDefaults");
  v6 = objc_msgSend(v5, "kEdgeDetectionDebugReticleEnabled");

  if ((v6 & 1) != 0
    || (v7 = objc_msgSend(v4, "standardUserDefaults"),
        v8 = objc_msgSend(v7, "showEDLines"),
        v7,
        v8))
  {
    if (!*(_QWORD *)(a2 + 72))
    {
      objc_msgSend(a1, "frame");
      v13 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for EdgeDetectorDebugView()), "initWithFrame:", v9, v10, v11, v12);
      v14 = *(void **)(a2 + 72);
      *(_QWORD *)(a2 + 72) = v13;

      if (!*(_QWORD *)(a2 + 72))
      {
        __break(1u);
        return;
      }
      objc_msgSend(*(id *)(a2 + 16), "addSubview:");
    }
    v15 = 0;
    v16 = *(void **)(a2 + 72);
    if (v16)
LABEL_7:
      objc_msgSend(v16, "setHidden:", v15);
  }
  else
  {
    v15 = 1;
    v16 = *(void **)(a2 + 72);
    if (v16)
      goto LABEL_7;
  }
}

uint64_t sub_100067E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8(&qword_10047E840);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

char *sub_100067EB8(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, __n128);
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, __n128);
  __n128 v42;
  id v43;
  char *v44;
  char *v45;
  void *v46;
  char *v47;
  id v48;
  objc_super v50;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v5 = qword_10047E848;
  v6 = sub_10000EDC8(&qword_10047D438);
  KeyPath = swift_getKeyPath(&unk_1003B3118);
  v8 = qword_10047AD88;
  v9 = v2;
  if (v8 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v10 = qword_1004AF890;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v6 + 272);
  v12 = swift_retain();
  *(_QWORD *)&v2[v5] = v11(KeyPath, v10, v12);
  v13 = qword_10047E850;
  v14 = sub_10000EDC8(&qword_10047E5E0);
  v15 = swift_getKeyPath(&unk_1003B3140);
  v16 = qword_1004AF890;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v14 + 272);
  v18 = swift_retain();
  *(_QWORD *)&v9[v13] = v17(v15, v16, v18);
  v19 = qword_10047E858;
  v20 = sub_10000EDC8(&qword_10047EA00);
  v21 = swift_getKeyPath(&unk_1003B3168);
  v22 = qword_1004AF890;
  v23 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v20 + 272);
  v24 = swift_retain();
  *(_QWORD *)&v9[v19] = v23(v21, v22, v24);
  v25 = qword_10047E860;
  v26 = sub_10000EDC8(&qword_10047BBB0);
  v27 = swift_getKeyPath(&unk_1003B3190);
  v28 = qword_1004AF890;
  v29 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v26 + 272);
  v30 = swift_retain();
  *(_QWORD *)&v9[v25] = v29(v27, v28, v30);
  v31 = qword_10047E868;
  v32 = sub_10000EDC8(&qword_10047BBA8);
  v33 = swift_getKeyPath(&unk_1003B31B8);
  v34 = qword_1004AF890;
  v35 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v32 + 272);
  v36 = swift_retain();
  *(_QWORD *)&v9[v31] = v35(v33, v34, v36);
  v37 = qword_10047E870;
  v38 = sub_10000EDC8(&qword_10047EA08);
  v39 = swift_getKeyPath(&unk_1003B31E0);
  v40 = qword_1004AF890;
  v41 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v38 + 272);
  v42 = swift_retain();
  *(_QWORD *)&v9[v37] = v41(v39, v40, v42);
  *(_QWORD *)&v9[qword_10047E878] = a1;
  v9[qword_10047E880] = 1;
  v43 = a1;

  v50.receiver = v9;
  v50.super_class = ObjectType;
  v44 = (char *)objc_msgSendSuper2(&v50, "init");
  v45 = v44;
  v46 = *(void **)&v44[qword_10047E878];
  if (v46)
  {
    v47 = v44;
    v48 = v46;
    sub_1000C9850();

  }
  return v45;
}

void sub_100068160(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  sub_100068184(a1);
}

void sub_100068184(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, __n128);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, __n128);
  __n128 v40;
  _BYTE v41[40];

  v3 = qword_10047E848;
  v4 = sub_10000EDC8(&qword_10047D438);
  KeyPath = swift_getKeyPath(&unk_1003B3118);
  v6 = qword_10047AD88;
  v7 = v1;
  if (v6 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v8 = qword_1004AF890;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 272);
  v10 = swift_retain();
  *(_QWORD *)&v7[v3] = v9(KeyPath, v8, v10);
  v11 = qword_10047E850;
  v12 = sub_10000EDC8(&qword_10047E5E0);
  v13 = swift_getKeyPath(&unk_1003B3140);
  v14 = qword_1004AF890;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v12 + 272);
  v16 = swift_retain();
  *(_QWORD *)&v7[v11] = v15(v13, v14, v16);
  v17 = qword_10047E858;
  v18 = sub_10000EDC8(&qword_10047EA00);
  v19 = swift_getKeyPath(&unk_1003B3168);
  v20 = qword_1004AF890;
  v21 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v18 + 272);
  v22 = swift_retain();
  *(_QWORD *)&v7[v17] = v21(v19, v20, v22);
  v23 = qword_10047E860;
  v24 = sub_10000EDC8(&qword_10047BBB0);
  v25 = swift_getKeyPath(&unk_1003B3190);
  v26 = qword_1004AF890;
  v27 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v24 + 272);
  v28 = swift_retain();
  *(_QWORD *)&v7[v23] = v27(v25, v26, v28);
  v29 = qword_10047E868;
  v30 = sub_10000EDC8(&qword_10047BBA8);
  v31 = swift_getKeyPath(&unk_1003B31B8);
  v32 = qword_1004AF890;
  v33 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v30 + 272);
  v34 = swift_retain();
  *(_QWORD *)&v7[v29] = v33(v31, v32, v34);
  v35 = qword_10047E870;
  v36 = sub_10000EDC8(&qword_10047EA08);
  v37 = swift_getKeyPath(&unk_1003B31E0);
  v38 = qword_1004AF890;
  v39 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v36 + 272);
  v40 = swift_retain();
  *(_QWORD *)&v7[v35] = v39(v37, v38, v40);
  *(_QWORD *)&v7[qword_10047E878] = 0;
  v7[qword_10047E880] = 0;

  sub_100068B24(a1, (uint64_t)v41);
  StateObservingNSObject.init(configuration:)(v41);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/DebugStateController.swift", 34, 2, 50, 0);
  __break(1u);
}

double sub_100068408(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  _BYTE v10[16];
  id v11;

  if (*(_QWORD *)(v1 + qword_10047E878))
  {
    if (*(_BYTE *)(v1 + qword_10047E880) == 1)
    {
      __chkstk_darwin(a1);
      v11 = v2;
      v3 = v2;
      swift_retain();
      StateValue.ifUpdated(_:)(sub_100068A54, v10);
      swift_release();
      __chkstk_darwin(v4);
      v11 = v3;
      swift_retain();
      StateValue.ifUpdated(_:)(sub_100068A5C, v10);
      swift_release();
      __chkstk_darwin(v5);
      v11 = v3;
      swift_retain();
      StateValue.ifUpdated(_:)(sub_100068A64, v10);
      swift_release();
      __chkstk_darwin(v6);
      v11 = v3;
      swift_retain();
      StateValue.ifUpdated(_:)(sub_100068A88, v10);
      swift_release();
      __chkstk_darwin(v7);
      v11 = v3;
      swift_retain();
      StateValue.ifUpdated(_:)(sub_100068AB4, v10);
      swift_release();
      __chkstk_darwin(v8);
      v11 = v3;
      swift_retain();
      StateValue.ifUpdated(_:)(sub_100068ABC, v10);

      *(_QWORD *)&result = swift_release().n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_100068660(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  _QWORD v7[4];

  v2 = *(void **)(a2 + qword_100481CC8);
  v3 = a1 + *(int *)(type metadata accessor for SessionState(0) + 20);
  v7[3] = type metadata accessor for ARCamera.TrackingState(0);
  v4 = sub_100068AE8(v7);
  sub_10003E4F0(v3, (uint64_t)v4);
  v5 = v2;
  sub_1000CA2B8(v5, (uint64_t)v7);

  return sub_10000F690(v7);
}

uint64_t sub_1000686EC(char *a1, uint64_t a2)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  void *v7;
  id v8;
  _QWORD v10[4];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = *(void **)(a2 + qword_100481CE0);
  v10[3] = &type metadata for MeasureAppState;
  LOBYTE(v10[0]) = v2;
  BYTE1(v10[0]) = v3;
  BYTE2(v10[0]) = v4;
  BYTE3(v10[0]) = v5;
  BYTE4(v10[0]) = v6;
  v8 = v7;
  sub_1000CA2B8(v8, (uint64_t)v10);

  return sub_10000F690(v10);
}

uint64_t sub_100068770(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  void *v3;
  id v4;
  _QWORD v6[4];

  v2 = *a1;
  v3 = *(void **)(a2 + qword_100481CF8);
  v6[3] = &type metadata for MeasurementState;
  v6[0] = v2;
  v4 = v3;
  sub_100068AC4(v2);
  sub_1000CA2B8(v4, (uint64_t)v6);

  return sub_10000F690(v6);
}

uint64_t sub_1000687E8(char *a1, uint64_t a2)
{
  char v2;
  void *v3;
  id v4;
  _QWORD v6[4];

  v2 = *a1;
  v3 = *(void **)(a2 + qword_100481D00);
  v6[3] = &type metadata for InstrumentationState;
  LOBYTE(v6[0]) = v2;
  v4 = v3;
  sub_1000CA2B8(v4, (uint64_t)v6);

  return sub_10000F690(v6);
}

void sub_10006884C()
{
  _swift_stdlib_reportUnimplementedInitializer("Measure.DebugStateController", 28, "init()", 6, 0);
  __break(1u);
}

void sub_100068878()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + qword_10047E848));
  swift_release(*(_QWORD *)(v0 + qword_10047E850));
  swift_release(*(_QWORD *)(v0 + qword_10047E858));
  swift_release(*(_QWORD *)(v0 + qword_10047E860));
  swift_release(*(_QWORD *)(v0 + qword_10047E868));
  swift_release(*(_QWORD *)(v0 + qword_10047E870));

}

void sub_1000688F4(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + qword_10047E848));
  swift_release(*(_QWORD *)(a1 + qword_10047E850));
  swift_release(*(_QWORD *)(a1 + qword_10047E858));
  swift_release(*(_QWORD *)(a1 + qword_10047E860));
  swift_release(*(_QWORD *)(a1 + qword_10047E868));
  swift_release(*(_QWORD *)(a1 + qword_10047E870));

}

uint64_t type metadata accessor for DebugStateController(uint64_t a1)
{
  uint64_t result;

  result = qword_10047E8B0;
  if (!qword_10047E8B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DebugStateController);
  return result;
}

uint64_t sub_1000689B8(uint64_t a1)
{
  _QWORD v2[8];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[6] = "\b";
  v2[7] = &unk_1003B3100;
  return swift_initClassMetadata2(a1, 256, 8, v2, a1 + 200);
}

uint64_t sub_100068A18()
{
  return type metadata accessor for DebugStateController(0);
}

uint64_t sub_100068A28@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_100068A38@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_100068A54(uint64_t a1)
{
  uint64_t v1;

  return sub_100068660(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100068A5C(char *a1)
{
  uint64_t v1;

  return sub_1000686EC(a1, *(_QWORD *)(v1 + 16));
}

void sub_100068A64(uint64_t *a1)
{
  sub_1000C9B20(*a1);
}

uint64_t sub_100068A88(uint64_t *a1)
{
  return sub_1000CA088(*a1, a1[1], a1[2]);
}

uint64_t sub_100068AB4(unint64_t *a1)
{
  uint64_t v1;

  return sub_100068770(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100068ABC(char *a1)
{
  uint64_t v1;

  return sub_1000687E8(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_100068AC4(unint64_t result)
{
  unint64_t v1;

  v1 = result >> 62;
  if (!(result >> 62))
    return (unint64_t)(id)result;
  if ((_DWORD)v1 == 2 || (_DWORD)v1 == 1)
  {
    result &= 0x3FFFFFFFFFFFFFFFuLL;
    return (unint64_t)(id)result;
  }
  return result;
}

_QWORD *sub_100068AE8(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100068B24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_100068B68(char **a1)
{
  char *v2;
  uint64_t v3;
  _QWORD v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1000A7980((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_10006B12C(v4);
  *a1 = v2;
}

BOOL sub_100068BD0(char *a1, char *a2)
{
  return qword_1003B3378[*a1] == qword_1003B3378[*a2];
}

Swift::Int sub_100068BF4()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_1003B3378[v1]);
  return Hasher._finalize()();
}

void sub_100068C40()
{
  char *v0;

  Hasher._combine(_:)(qword_1003B3378[*v0]);
}

Swift::Int sub_100068C74()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_1003B3378[v1]);
  return Hasher._finalize()();
}

uint64_t sub_100068CBC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10006C77C(*a1);
  *a2 = result;
  return result;
}

void sub_100068CE4(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1003B3378[*v1];
}

uint64_t sub_100068CFC()
{
  uint64_t v0;
  _QWORD *v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v1 = (_QWORD *)(v0 + qword_10047EA20);
  swift_beginAccess(v0 + qword_10047EA20, v10, 33, 0);
  if (*(_QWORD *)(*v1 + 16))
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
    v8 = *v1;
    *v1 = 0x8000000000000000;
    sub_10000EDC8(&qword_10047ECC8);
    _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
    v3 = *v1;
    *v1 = v8;
    swift_bridgeObjectRelease(v3);
  }
  swift_endAccess(v10);
  v4 = (_QWORD *)(v0 + qword_10047EA28);
  swift_beginAccess(v0 + qword_10047EA28, v10, 33, 0);
  if (*(_QWORD *)(*v4 + 16))
  {
    v5 = swift_isUniquelyReferenced_nonNull_native(*v4);
    v9 = *v4;
    *v4 = 0x8000000000000000;
    sub_10000EDC8(&qword_10047ECC0);
    _NativeDictionary.removeAll(isUnique:)(v5);
    v6 = *v4;
    *v4 = v9;
    swift_bridgeObjectRelease(v6);
  }
  result = swift_endAccess(v10);
  *(_BYTE *)(v0 + qword_10047EA30) = 0;
  *(_BYTE *)(v0 + qword_10047EA38) = 0;
  *(_BYTE *)(v0 + qword_10047EA40) = 0;
  return result;
}

uint64_t sub_100068E3C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  Swift::String v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  id v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  uint64_t v45;
  Swift::String v46;
  id v47;
  float v48;
  float v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  void *object;
  __n128 v55;
  Swift::String v56;
  Swift::String v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  void *v62;
  uint64_t countAndFlagsBits;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t i;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  void *v74;
  id v75;
  uint64_t v76;
  void *v77;
  void *v78;
  Swift::String v79;
  void *v80;
  char *v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  Swift::String v95[2];
  Swift::String v96;
  char v97[32];

  v91 = a2;
  v4 = type metadata accessor for String.Encoding(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v92 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v93 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t *)(v2 + qword_10047EA20);
  swift_beginAccess(v2 + qword_10047EA20, v97, 0, 0);
  if (!*(_QWORD *)(*v14 + 16))
    return 0;
  v87 = v5;
  v88 = v4;
  v89 = v8;
  v90 = v7;
  v95[0]._countAndFlagsBits = 0;
  v95[0]._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(73);
  v15._countAndFlagsBits = 0x6544202320202020;
  v15._object = (void *)0xEE00203A65636976;
  String.append(_:)(v15);
  v16 = (void *)objc_opt_self(UIDevice);
  v17 = objc_msgSend(v16, "currentDevice");
  v18 = objc_msgSend(v17, "name");

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v94 = a1;
  v20 = v19;
  v22 = v21;

  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v22);
  v24._countAndFlagsBits = 8236;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  v25 = objc_msgSend(v16, "currentDevice");
  v26 = objc_msgSend(v25, "model");

  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  v30._countAndFlagsBits = v27;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v29);
  v31._countAndFlagsBits = 8236;
  v31._object = (void *)0xE200000000000000;
  String.append(_:)(v31);
  v32 = objc_msgSend(v16, "currentDevice");
  v33 = objc_msgSend(v32, "systemName");

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  v37._countAndFlagsBits = v34;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v36);
  v38._countAndFlagsBits = 8236;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  v39 = objc_msgSend(v16, "currentDevice");
  v40 = objc_msgSend(v39, "systemVersion");

  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v43 = v42;

  v44._countAndFlagsBits = v41;
  v44._object = v43;
  String.append(_:)(v44);
  v45 = v94;
  swift_bridgeObjectRelease(v43);
  v46._countAndFlagsBits = 8236;
  v46._object = (void *)0xE200000000000000;
  String.append(_:)(v46);
  v47 = objc_msgSend(v16, "currentDevice");
  objc_msgSend(v47, "batteryLevel");
  v49 = v48;

  Float.write<A>(to:)(v95, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v49);
  v50._countAndFlagsBits = 0x442023202020200ALL;
  v50._object = (void *)0xED0000203A657461;
  String.append(_:)(v50);
  Date.init()(v51);
  v52 = sub_10000C4B0(&qword_10047EC98, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v52);
  object = v53._object;
  String.append(_:)(v53);
  v55 = swift_bridgeObjectRelease(object);
  (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v10, v55);
  v56._countAndFlagsBits = 0x4F2023202020200ALL;
  v56._object = (void *)0xEF203A6E69676972;
  String.append(_:)(v56);
  v57._countAndFlagsBits = v45;
  v58 = v91;
  v57._object = v91;
  String.append(_:)(v57);
  v59._countAndFlagsBits = 0x202020200A0ALL;
  v59._object = (void *)0xE600000000000000;
  String.append(_:)(v59);
  v60._countAndFlagsBits = 0xD000000000000035;
  v60._object = (void *)0x80000001003DB790;
  String.append(_:)(v60);
  v61._countAndFlagsBits = 10;
  v61._object = (void *)0xE100000000000000;
  String.append(_:)(v61);
  countAndFlagsBits = v95[0]._countAndFlagsBits;
  v62 = v95[0]._object;
  v96 = v95[0];
  v64 = *v14;
  swift_bridgeObjectRetain_n(*v14, 2);
  v65 = sub_10006BBCC(v64);
  swift_bridgeObjectRelease(v64);
  v95[0]._countAndFlagsBits = (uint64_t)v65;
  sub_100068B68((char **)v95);
  swift_bridgeObjectRelease(v64);
  v66 = v95[0]._countAndFlagsBits;
  v67 = *(_QWORD *)(v95[0]._countAndFlagsBits + 16);
  if (v67)
  {
    for (i = 0; i != v67; ++i)
    {
      v69 = *(_QWORD *)(v66 + 8 * i + 32);
      v70 = swift_beginAccess(v14, v95, 32, 0);
      v71 = *v14;
      if (*(_QWORD *)(*v14 + 16) && (v72 = sub_1000C984C(v69, v70), (v73 & 1) != 0))
      {
        v74 = *(void **)(*(_QWORD *)(v71 + 56) + 8 * v72);
        swift_endAccess(v95);
        v75 = v74;
        v76 = sub_1001509E8();
        v78 = v77;
        v95[0]._countAndFlagsBits = v76;
        v95[0]._object = v77;
        swift_bridgeObjectRetain(v77);
        v79._countAndFlagsBits = 10;
        v79._object = (void *)0xE100000000000000;
        String.append(_:)(v79);
        swift_bridgeObjectRelease(v78);
        v80 = v95[0]._object;
        String.append(contentsOf:)(v95[0]);

        swift_bridgeObjectRelease(v80);
      }
      else
      {
        swift_endAccess(v95);
      }
    }
    swift_release();
    countAndFlagsBits = v96._countAndFlagsBits;
    v62 = v96._object;
    v45 = v94;
  }
  else
  {
    swift_release();
  }
  v82 = v93;
  URL.init(fileURLWithPath:)(v45, v58);
  v95[0]._countAndFlagsBits = countAndFlagsBits;
  v95[0]._object = v62;
  v83 = swift_bridgeObjectRetain(v62);
  v84 = v92;
  static String.Encoding.utf8.getter(v83);
  v85 = sub_10006C814();
  StringProtocol.write(to:atomically:encoding:)(v82, 0, v84, &type metadata for String, v85);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v84, v88);
  v86 = swift_bridgeObjectRelease(v95[0]._object);
  (*(void (**)(char *, uint64_t, __n128))(v89 + 8))(v82, v90, v86);
  swift_bridgeObjectRelease(v96._object);
  return 1;
}

void sub_1000695D4(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  _BYTE *v17;
  double *v18;
  char *v19;
  void *v20;
  objc_super v21;
  _QWORD v22[64];
  _QWORD __src[64];
  _QWORD __dst[64];

  v5 = v4;
  swift_retain();
  StateValue.wrappedValue.getter(__src, v10);
  swift_release();
  memcpy(__dst, __src, sizeof(__dst));
  sub_100012C00((uint64_t)__dst);
  if ((a4 & 1) != 0)
    v11 = 0.0;
  else
    v11 = *(double *)&a3;
  if ((a4 & 1) != 0)
    v12 = 0.0;
  else
    v12 = *(double *)&a2;
  v13 = __dst[0];
  swift_retain();
  StateValue.wrappedValue.getter(v22, v14);
  swift_release();
  memcpy(__src, v22, sizeof(__src));
  sub_100012C00((uint64_t)__src);
  v15 = __src[1];
  v16 = (objc_class *)type metadata accessor for FrameEvent();
  v17 = objc_allocWithZone(v16);
  v17[OBJC_IVAR____TtC7Measure10FrameEvent_replayed] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC7Measure10FrameEvent_index] = v13;
  v17[OBJC_IVAR____TtC7Measure10FrameEvent_button] = a1;
  v18 = (double *)&v17[OBJC_IVAR____TtC7Measure10FrameEvent_position];
  *v18 = v12;
  v18[1] = v11;
  *(_QWORD *)&v17[OBJC_IVAR____TtC7Measure10FrameEvent_timestamp] = v15;
  v21.receiver = v17;
  v21.super_class = v16;
  v19 = (char *)objc_msgSendSuper2(&v21, "init");
  sub_100069794(v19);
  v20 = *(void **)(v5 + qword_10047EA50);
  if (v20)
  {
    if (objc_msgSend((id)swift_unknownObjectRetain(v20), "expectCustomData"))
      objc_msgSend(v20, "recordCustomData:forTimestamp:", v19, *(double *)&v19[OBJC_IVAR____TtC7Measure10FrameEvent_timestamp]);
    swift_unknownObjectRelease(v20);
  }

}

void sub_100069794(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  double v9;
  _QWORD *v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  v2 = v1;
  v4 = *(_QWORD *)&a1[OBJC_IVAR____TtC7Measure10FrameEvent_index];
  v5 = (_QWORD *)(v2 + qword_10047EA20);
  swift_beginAccess(v2 + qword_10047EA20, v16, 33, 0);
  v6 = a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v14 = *v5;
  *v5 = 0x8000000000000000;
  sub_1000BCA28((uint64_t)v6, v4, isUniquelyReferenced_nonNull_native);
  v8 = *v5;
  *v5 = v14;
  swift_bridgeObjectRelease(v8);
  swift_endAccess(v16);
  v9 = *(double *)&v6[OBJC_IVAR____TtC7Measure10FrameEvent_timestamp];
  v10 = (_QWORD *)(v2 + qword_10047EA28);
  swift_beginAccess(v10, v16, 33, 0);
  v11 = v6;
  v12 = swift_isUniquelyReferenced_nonNull_native(*v10);
  v15 = *v10;
  *v10 = 0x8000000000000000;
  sub_1000BC8F4((uint64_t)v11, v12, v9);
  v13 = *v10;
  *v10 = v15;
  swift_bridgeObjectRelease(v13);
  swift_endAccess(v16);
}

uint64_t sub_1000698C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSString v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  Swift::String v32;
  char *v33;
  void *v34;
  uint64_t v35;
  char *v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  double v39;
  char *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];

  v3 = v2;
  v6 = type metadata accessor for CharacterSet(0);
  v46 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "fileExistsAtPath:", v13);

  if (!v14)
    return 0;
  v15 = sub_100068CFC();
  static String.Encoding.utf8.getter(v15);
  v16 = String.init(contentsOfFile:encoding:)(a1, a2, v11);
  v19 = v18;
  v47 = v16;
  v48 = v18;
  v49[0] = 10;
  v49[1] = 0xE100000000000000;
  v20 = sub_10006C814();
  v21 = StringProtocol.components<A>(separatedBy:)(v49, &type metadata for String, &type metadata for String, v20, v20);
  swift_bridgeObjectRelease(v19);
  v22 = *(_QWORD *)(v21 + 16);
  if (v22)
  {
    v23 = (_QWORD *)(v3 + qword_10047EA20);
    v24 = (_QWORD *)(v3 + qword_10047EA28);
    v45 = v21;
    v25 = (uint64_t *)(v21 + 40);
    do
    {
      v26 = *v25;
      v47 = *(v25 - 1);
      v48 = v26;
      v27 = swift_bridgeObjectRetain(v26);
      static CharacterSet.whitespaces.getter(v27);
      v28 = StringProtocol.trimmingCharacters(in:)(v8, &type metadata for String, v20);
      v30 = v29;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v6);
      swift_bridgeObjectRelease(v26);
      v31 = HIBYTE(v30) & 0xF;
      if ((v30 & 0x2000000000000000) == 0)
        v31 = v28 & 0xFFFFFFFFFFFFLL;
      if (!v31
        || (v32._countAndFlagsBits = 35, v32._object = (void *)0xE100000000000000, String.hasPrefix(_:)(v32)))
      {
        swift_bridgeObjectRelease(v30);
      }
      else
      {
        v33 = (char *)sub_100151EF0(v28, v30);
        if (v33)
        {
          v34 = v33;
          v35 = *(_QWORD *)&v33[OBJC_IVAR____TtC7Measure10FrameEvent_index];
          swift_beginAccess(v23, &v47, 33, 0);
          v36 = v34;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v23);
          v49[0] = *v23;
          *v23 = 0x8000000000000000;
          sub_1000BCA28((uint64_t)v36, v35, isUniquelyReferenced_nonNull_native);
          v38 = *v23;
          *v23 = v49[0];
          swift_bridgeObjectRelease(v38);
          swift_endAccess(&v47);
          v39 = *(double *)&v36[OBJC_IVAR____TtC7Measure10FrameEvent_timestamp];
          swift_beginAccess(v24, &v47, 33, 0);
          v40 = v36;
          v41 = swift_isUniquelyReferenced_nonNull_native(*v24);
          v49[0] = *v24;
          *v24 = 0x8000000000000000;
          sub_1000BC8F4((uint64_t)v40, v41, v39);
          v42 = *v24;
          *v24 = v49[0];
          swift_bridgeObjectRelease(v42);
          swift_endAccess(&v47);

        }
      }
      v25 += 2;
      --v22;
    }
    while (v22);
    v43 = v45;
  }
  else
  {
    v43 = v21;
  }
  swift_bridgeObjectRelease(v43);
  return 1;
}

double sub_100069D54()
{
  double result;
  uint64_t v1;

  swift_retain();
  StateValue.ifUpdated(_:)(sub_10006C860, &v1);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_100069DA8(void *__src)
{
  id v1;
  _QWORD __dst[64];

  memcpy(__dst, __src, sizeof(__dst));
  v1 = (id)sub_10008F8B8();
  sub_100069E08(v1, __dst[0] == 1);

}

void sub_100069E08(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v6;
  id v7;
  id v8;
  uint64_t Strong;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  void *object;
  Swift::String v22;
  void *v23;
  Swift::String v24;
  id v25;
  void *v26;
  _OWORD v27[2];
  Swift::String v28;
  uint64_t v29;

  if (!a1)
    return;
  v3 = v2;
  v4 = a2;
  if (*(_BYTE *)(v3 + qword_10047EA38) != 1)
  {
    if (*(_BYTE *)(v3 + qword_10047EA40) != 1)
      return;
    Strong = swift_unknownObjectWeakLoadStrong(v3 + qword_10047EA48, a2);
    if (!Strong)
      return;
    v10 = (void *)Strong;
    v11 = a1;
    if ((v4 & 1) != 0)
    {
      v12 = objc_msgSend(v10, "customDataClasses");
      v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v12, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

      v14 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)&v15 = swift_bridgeObjectRelease(v13).n128_u64[0];
      if (v14)
      {
        objc_msgSend(v11, "timestamp", v15);
        v16 = objc_msgSend(v10, "customDataForTimestamp:");
        if (v16)
        {
          v17 = v16;
          _bridgeAnyObjectToAny(_:)(v27, v16);
          swift_unknownObjectRelease(v17);
        }
        else
        {
          memset(v27, 0, sizeof(v27));
        }
        sub_10006C868((uint64_t)v27, (uint64_t)&v28);
        if (v29)
        {
          v18 = type metadata accessor for MetaData();
          if ((swift_dynamicCast(&v26, &v28, (char *)&type metadata for Any + 8, v18, 6) & 1) != 0)
          {
            v19 = v26;
            if (qword_10047AA58 != -1)
              swift_once(&qword_10047AA58, sub_1000E12F0);
            v28._countAndFlagsBits = 0;
            v28._object = (void *)0xE000000000000000;
            _StringGuts.grow(_:)(48);
            swift_bridgeObjectRelease(v28._object);
            v28._countAndFlagsBits = 0xD00000000000002DLL;
            v28._object = (void *)0x80000001003DB840;
            v20._countAndFlagsBits = sub_100084094();
            object = v20._object;
            String.append(_:)(v20);
            swift_bridgeObjectRelease(object);
            v22._countAndFlagsBits = 46;
            v22._object = (void *)0xE100000000000000;
            String.append(_:)(v22);
            v23 = v28._object;
            Log.debug(_:isPrivate:)(v28, 0);

            swift_bridgeObjectRelease(v23);
            goto LABEL_25;
          }
        }
        else
        {
          sub_100018180((uint64_t)&v28);
        }
        if (qword_10047AA58 != -1)
          swift_once(&qword_10047AA58, sub_1000E12F0);
        v24._object = (void *)0x80000001003DB810;
        v24._countAndFlagsBits = 0xD000000000000023;
        Log.error(_:isPrivate:)(v24, 0);
      }
    }
LABEL_25:
    sub_10006A920();
    swift_unknownObjectRelease(v10);

    return;
  }
  if ((a2 & 1) != 0)
  {
    v6 = *(void **)(v3 + qword_10047EA50);
    if (v6)
    {
      v25 = a1;
      if (objc_msgSend((id)swift_unknownObjectRetain(v6), "expectCustomData"))
      {
        v7 = objc_allocWithZone((Class)type metadata accessor for MetaData());
        v8 = sub_1000841B0(0, 0, 0, 0);
        objc_msgSend(v25, "timestamp");
        objc_msgSend(v6, "recordCustomData:forTimestamp:", v8);
        swift_unknownObjectRelease(v6);

      }
      else
      {
        swift_unknownObjectRelease(v6);
      }

    }
  }
}

uint64_t sub_10006A178(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  _OWORD v20[2];

  if (a3)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v10 = v9;
    if (a4)
      goto LABEL_3;
LABEL_6:
    memset(v20, 0, sizeof(v20));
    v17 = a5;
    v18 = a1;
    if (a5)
      goto LABEL_4;
LABEL_7:
    v16 = 0;
    goto LABEL_8;
  }
  v8 = 0;
  v10 = 0;
  if (!a4)
    goto LABEL_6;
LABEL_3:
  swift_unknownObjectRetain(a4);
  v11 = a5;
  v12 = a1;
  _bridgeAnyObjectToAny(_:)(v20, a4);
  swift_unknownObjectRelease(a4);
  if (!a5)
    goto LABEL_7;
LABEL_4:
  type metadata accessor for NSKeyValueChangeKey(0);
  v14 = v13;
  v15 = sub_10000C4B0((unint64_t *)&qword_10047B5F0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1003B06A4);
  v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a5, v14, (char *)&type metadata for Any + 8, v15);

LABEL_8:
  sub_10006C8B0(v8, v10);

  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v10);
  return sub_100018180((uint64_t)v20);
}

uint64_t sub_10006A294(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return sub_10006A2C4(a1);
}

uint64_t sub_10006A2C4(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[40];

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  v5 = qword_10047EA10;
  v6 = sub_10000EDC8(&qword_10047ECF0);
  KeyPath = swift_getKeyPath(&unk_1003B3328);
  v8 = qword_10047AD88;
  v9 = v2;
  if (v8 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v10 = qword_1004AF890;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v6 + 272);
  v12 = swift_retain();
  *(_QWORD *)&v9[v5] = v11(KeyPath, v10, v12);
  v13 = qword_10047EA18;
  sub_10000EDC8(&qword_10047ECF8);
  v14 = swift_getKeyPath(&unk_1003B3350);
  *(_QWORD *)&v9[v13] = MutableStateValue.__allocating_init(_:_:)(v14, ObjectType);
  *(_QWORD *)&v9[qword_10047EA20] = _swiftEmptyDictionarySingleton;
  *(_QWORD *)&v9[qword_10047EA28] = _swiftEmptyDictionarySingleton;
  v9[qword_10047EA30] = 0;
  v9[qword_10047EA38] = 0;
  v9[qword_10047EA40] = 0;
  swift_unknownObjectWeakInit(&v9[qword_10047EA48], 0);
  *(_QWORD *)&v9[qword_10047EA50] = 0;

  sub_100068B24((uint64_t)a1, (uint64_t)v17);
  v15 = StateObservingNSObject.init(configuration:)(v17);
  sub_10000F690(a1);
  return v15;
}

id sub_10006A44C()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, __n128);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  objc_super v14;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = qword_10047EA10;
  v4 = sub_10000EDC8(&qword_10047ECF0);
  KeyPath = swift_getKeyPath(&unk_1003B3328);
  v6 = qword_10047AD88;
  v7 = v1;
  if (v6 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v8 = qword_1004AF890;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 272);
  v10 = swift_retain();
  *(_QWORD *)&v7[v3] = v9(KeyPath, v8, v10);
  v11 = qword_10047EA18;
  sub_10000EDC8(&qword_10047ECF8);
  v12 = swift_getKeyPath(&unk_1003B3350);
  *(_QWORD *)&v7[v11] = MutableStateValue.__allocating_init(_:_:)(v12, ObjectType);
  *(_QWORD *)&v7[qword_10047EA20] = _swiftEmptyDictionarySingleton;
  *(_QWORD *)&v7[qword_10047EA28] = _swiftEmptyDictionarySingleton;
  v7[qword_10047EA30] = 0;
  v7[qword_10047EA38] = 0;
  v7[qword_10047EA40] = 0;
  swift_unknownObjectWeakInit(&v7[qword_10047EA48], 0);
  *(_QWORD *)&v7[qword_10047EA50] = 0;

  v14.receiver = v7;
  v14.super_class = ObjectType;
  return objc_msgSendSuper2(&v14, "init");
}

id sub_10006A5BC()
{
  return sub_10006A44C();
}

uint64_t sub_10006A5DC()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_10047EA20));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_10047EA28));
  sub_10001ADF4(v0 + qword_10047EA48);
  return swift_unknownObjectRelease(*(_QWORD *)(v0 + qword_10047EA50));
}

uint64_t sub_10006A648(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_10047EA20));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_10047EA28));
  sub_10001ADF4(a1 + qword_10047EA48);
  return swift_unknownObjectRelease(*(_QWORD *)(a1 + qword_10047EA50));
}

uint64_t type metadata accessor for EventsRecorder(uint64_t a1)
{
  uint64_t result;

  result = qword_10047EA80;
  if (!qword_10047EA80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EventsRecorder);
  return result;
}

uint64_t sub_10006A6FC(uint64_t a1)
{
  _QWORD v2[9];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[4] = &unk_1003B3228;
  v2[5] = &unk_1003B3228;
  v2[6] = &unk_1003B3228;
  v2[7] = &unk_1003B3240;
  v2[8] = &unk_1003B3258;
  return swift_initClassMetadata2(a1, 256, 9, v2, a1 + 200);
}

uint64_t sub_10006A774()
{
  return type metadata accessor for EventsRecorder(0);
}

uint64_t getEnumTagSinglePayload for EventButton(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EventButton(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10006A858 + 4 * byte_1003B320D[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10006A88C + 4 * byte_1003B3208[v4]))();
}

uint64_t sub_10006A88C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A894(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006A89CLL);
  return result;
}

uint64_t sub_10006A8A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006A8B0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10006A8B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A8BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventButton()
{
  return &type metadata for EventButton;
}

unint64_t sub_10006A8DC()
{
  unint64_t result;

  result = qword_10047EC90;
  if (!qword_10047EC90)
  {
    result = swift_getWitnessTable(&unk_1003B32FC, &type metadata for EventButton);
    atomic_store(result, (unint64_t *)&qword_10047EC90);
  }
  return result;
}

void sub_10006A920()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  double v3;
  double v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t (*v8)(_QWORD *, __n128);
  __n128 v9;
  void (*v10)(_QWORD *, _QWORD);
  _QWORD v11[64];
  uint64_t __src[64];
  _BYTE __dst[512];

  swift_retain();
  StateValue.wrappedValue.getter(__src, v1);
  swift_release();
  memcpy(__dst, __src, sizeof(__dst));
  v2 = (void *)sub_10008F8B8();
  sub_100012C00((uint64_t)__dst);
  if (v2)
  {
    objc_msgSend(v2, "timestamp");
    v4 = v3;
    swift_retain();
    StateValue.wrappedValue.getter(v11, v5);
    swift_release();
    memcpy(__src, v11, sizeof(__src));
    sub_100012C00((uint64_t)__src);
    v6 = sub_10006AA68(__src[0], v4);
    if (v6 == 10)
    {

    }
    else
    {
      v7 = v6;
      v8 = *(uint64_t (**)(_QWORD *, __n128))(**(_QWORD **)(v0 + qword_10047EA18) + 400);
      v9 = swift_retain();
      v10 = (void (*)(_QWORD *, _QWORD))v8(v11, v9);
      sub_100090D48(v7);
      v10(v11, 0);

      swift_release();
    }
  }
}

uint64_t sub_10006AA68(uint64_t a1, double a2)
{
  char *v2;
  uint64_t v4;

  v2 = (char *)sub_10006AAD0(a1, a2);
  if (!v2)
    return 10;
  if ((v2[OBJC_IVAR____TtC7Measure10FrameEvent_replayed] & 1) != 0)
  {

    return 10;
  }
  v2[OBJC_IVAR____TtC7Measure10FrameEvent_replayed] = 1;
  v4 = v2[OBJC_IVAR____TtC7Measure10FrameEvent_button];

  return byte_1003B33C8[v4];
}

void *sub_10006AAD0(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  __n128 v11;
  char v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *Strong;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v24;
  _OWORD v25[2];
  _BYTE v26[24];
  uint64_t v27;

  v3 = v2;
  v6 = (uint64_t *)(v2 + qword_10047EA28);
  swift_beginAccess(v6, v26, 32, 0);
  v7 = *v6;
  if (*(_QWORD *)(v7 + 16) && (v8 = sub_1000C827C(a2), (v9 & 1) != 0)
    || (swift_endAccess(v26),
        v10 = (uint64_t *)(v3 + qword_10047EA20),
        v11 = swift_beginAccess(v3 + qword_10047EA20, v26, 32, 0),
        v7 = *v10,
        *(_QWORD *)(v7 + 16))
    && (v8 = sub_1000C984C(a1, v11), (v12 & 1) != 0))
  {
    v13 = *(void **)(*(_QWORD *)(v7 + 56) + 8 * v8);
    swift_endAccess(v26);
    v14 = v13;
    return v13;
  }
  swift_endAccess(v26);
  if (*(_BYTE *)(v3 + qword_10047EA30) != 1)
    return 0;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3 + qword_10047EA48, v15);
  v13 = Strong;
  if (!Strong)
    return v13;
  v17 = objc_msgSend(Strong, "customDataClasses");
  v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

  v19 = *(_QWORD *)(v18 + 16);
  swift_bridgeObjectRelease(v18);
  if (!v19)
  {
    swift_unknownObjectRelease(v13);
    return 0;
  }
  v20 = objc_msgSend(v13, "customDataForTimestamp:", a2);
  if (v20)
  {
    v21 = v20;
    _bridgeAnyObjectToAny(_:)(v25, v20);
    swift_unknownObjectRelease(v13);
    swift_unknownObjectRelease(v21);
  }
  else
  {
    swift_unknownObjectRelease(v13);
    memset(v25, 0, sizeof(v25));
  }
  sub_10006C868((uint64_t)v25, (uint64_t)v26);
  if (!v27)
  {
    sub_100018180((uint64_t)v26);
    return 0;
  }
  v22 = type metadata accessor for FrameEvent();
  if (swift_dynamicCast(&v24, v26, (char *)&type metadata for Any + 8, v22, 6))
    return (void *)v24;
  else
    return 0;
}

_QWORD *sub_10006ACD0(_QWORD *result, _QWORD *a2, uint64_t a3, id a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = result;
  if (!a2)
  {
LABEL_8:
    v8 = 0;
    goto LABEL_9;
  }
  v8 = a3;
  if (!a3)
  {
LABEL_9:
    *v7 = a4;
    v7[1] = a5;
    v7[2] = v8;
    return (_QWORD *)v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (objc_msgSend(a4, "getPointCountAtContourIndex:", a5))
    {
      objc_msgSend(a4, "getPointAtContourIndex:pointIndex:", a5, 0);
      *a2 = v10;
      a2[1] = v11;
      if (v8 != 1)
      {
        if (objc_msgSend(a4, "getPointCountAtContourIndex:", a5) == (id)1)
        {
          v8 = 1;
        }
        else
        {
          objc_msgSend(a4, "getPointAtContourIndex:pointIndex:", a5, 1);
          a2[2] = v12;
          a2[3] = v13;
          if (v8 != 2)
          {
            if (objc_msgSend(a4, "getPointCountAtContourIndex:", a5) == (id)2)
            {
              v8 = 2;
            }
            else
            {
              v14 = a2 + 4;
              v15 = 3;
              while (1)
              {
                objc_msgSend(a4, "getPointAtContourIndex:pointIndex:", a5, v15 - 1);
                *v14 = v16;
                v14[1] = v17;
                if (v8 == v15)
                  break;
                v18 = v15 + 1;
                v14 += 2;
                if (v15++ == (_QWORD)objc_msgSend(a4, "getPointCountAtContourIndex:", a5))
                {
                  v8 = v18 - 1;
                  goto LABEL_9;
                }
              }
            }
          }
        }
      }
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10006AE2C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  int v12;

  v4 = result;
  if (!a2)
  {
LABEL_8:
    v5 = 0;
    goto LABEL_9;
  }
  v5 = a3;
  if (!a3)
  {
LABEL_9:
    *v4 = v3;
    v4[1] = v5;
    return (_QWORD *)v5;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (objc_msgSend(v3, "getCornerCount"))
    {
      objc_msgSend(v3, "getCornerAtIndex:", 0);
      *(_OWORD *)a2 = v11;
      *(_DWORD *)(a2 + 16) = v12;
      if (v5 != 1)
      {
        if (objc_msgSend(v3, "getCornerCount") == (id)1)
        {
          v5 = 1;
        }
        else
        {
          objc_msgSend(v3, "getCornerAtIndex:", 1);
          *(_OWORD *)(a2 + 24) = v11;
          *(_DWORD *)(a2 + 40) = v12;
          if (v5 != 2)
          {
            if (objc_msgSend(v3, "getCornerCount") == (id)2)
            {
              v5 = 2;
            }
            else
            {
              v7 = a2 + 48;
              v8 = 3;
              while (1)
              {
                objc_msgSend(v3, "getCornerAtIndex:", v8 - 1);
                *(_OWORD *)v7 = v11;
                *(_DWORD *)(v7 + 16) = v12;
                if (v5 == v8)
                  break;
                v9 = v8 + 1;
                v7 += 24;
                if (v8++ == (_QWORD)objc_msgSend(v3, "getCornerCount"))
                {
                  v5 = v9 - 1;
                  goto LABEL_9;
                }
              }
            }
          }
        }
      }
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10006AF90(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  id v7;
  id v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = result;
  if (!a2)
    goto LABEL_7;
  v5 = a3;
  if (!a3)
    goto LABEL_8;
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (objc_msgSend(v3, "getContourCount"))
    {
      *a2 = v3;
      a2[1] = 0;
      if (v5 != 1)
      {
        v8 = v3;
        if (objc_msgSend(v8, "getContourCount") == (id)1)
        {
          v5 = 1;
          goto LABEL_8;
        }
        a2[2] = v8;
        a2[3] = 1;
        if (v5 != 2)
        {
          v9 = v8;
          if (objc_msgSend(v9, "getContourCount") == (id)2)
          {
            v5 = 2;
            goto LABEL_8;
          }
          v10 = a2 + 4;
          v11 = 3;
          while (1)
          {
            *v10 = v9;
            v10[1] = v11 - 1;
            if (v5 == v11)
              break;
            v12 = v11 + 1;
            v10 += 2;
            if (v11++ == (_QWORD)objc_msgSend(v9, "getContourCount"))
            {
              v5 = v12 - 1;
              goto LABEL_8;
            }
          }
        }
      }
      v7 = v3;
LABEL_8:
      *v4 = v3;
      v4[1] = v5;
      return (_QWORD *)v5;
    }
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006B0A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;

  if (!a2)
  {
    v7 = 0;
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    v7 = 0;
LABEL_14:
    v8 = a4;
LABEL_15:
    *(_QWORD *)result = a4;
    *(_QWORD *)(result + 8) = a5;
    *(_QWORD *)(result + 16) = v8;
    *(_BYTE *)(result + 24) = v7;
    return a3;
  }
  if (a3 < 0)
    goto LABEL_17;
  v5 = 0;
  v6 = a4;
  while (1)
  {
    v7 = v6 == a5;
    if (v6 != a5)
      break;
    v8 = 0;
LABEL_8:
    *(_QWORD *)(a2 + 8 * v5) = v6;
    if (a3 - 1 == v5)
      goto LABEL_15;
    ++v5;
    v9 = v6 == a5;
    v6 = v8;
    if (v9)
    {
      v7 = 1;
      a3 = v5;
      goto LABEL_15;
    }
  }
  v8 = v6 + 1;
  if (!__OFADD__(v6, 1))
    goto LABEL_8;
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

void sub_10006B12C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  unint64_t *v22;
  unint64_t v23;
  Swift::Int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  Swift::Int v96;
  Swift::Int v97;
  uint64_t v98;
  char *v99;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return;
      v80 = 0;
      v81 = *v2;
      v82 = 1;
      while (1)
      {
        v83 = *(_QWORD *)(v81 + 8 * v82);
        v84 = v80;
        do
        {
          v85 = *(_QWORD *)(v81 + v84);
          if (v83 >= v85)
            break;
          if (!v81)
            goto LABEL_144;
          *(_QWORD *)(v81 + v84 + 8) = v85;
          *(_QWORD *)(v81 + v84) = v83;
          v84 -= 8;
        }
        while (v84 != -8);
        ++v82;
        v80 += 8;
        if (v82 == v3)
          return;
      }
    }
    goto LABEL_140;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_139;
  v96 = v4;
  v97 = v3;
  if (v3 <= 1)
  {
    v8 = _swiftEmptyArrayStorage;
    v99 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v95 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for UInt);
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v97;
    v95 = (_QWORD *)v7;
    v99 = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v93 = v2;
  v94 = *v2 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v98 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 8 * v9);
      v15 = *(_QWORD *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_141;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_147;
              v20 = *(_QWORD *)(v10 + 8 * v19);
              *(_QWORD *)(v10 + 8 * v19) = *(_QWORD *)(v10 + 8 * v18);
              *(_QWORD *)(v10 + 8 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_138;
      if (v9 - v13 < v96)
      {
        v21 = v13 + v96;
        if (__OFADD__(v13, v96))
          goto LABEL_142;
        if (v21 >= v3)
          v21 = v3;
        if (v21 < v13)
          goto LABEL_143;
        if (v9 != v21)
        {
          v22 = (unint64_t *)(v94 + 8 * v9);
          do
          {
            v23 = *(_QWORD *)(v10 + 8 * v9);
            v24 = v13;
            v25 = v22;
            do
            {
              v26 = *v25;
              if (v23 >= *v25)
                break;
              if (!v10)
                goto LABEL_145;
              *v25 = v23;
              v25[1] = v26;
              --v25;
              ++v24;
            }
            while (v9 != v24);
            ++v9;
            ++v22;
          }
          while (v9 != v21);
          v9 = v21;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1000A7838(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v98;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_1000A7838((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v98;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
      break;
    v12 = 1;
LABEL_15:
    v3 = v97;
    if (v9 >= v97)
    {
      v8 = v95;
      v2 = v93;
LABEL_104:
      v95 = v8;
      if (v12 < 2)
      {
LABEL_115:
        v79 = v11;
        goto LABEL_116;
      }
      v86 = *v2;
      while (1)
      {
        v87 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v86)
          goto LABEL_148;
        v78 = v11;
        v88 = v11 + 32;
        v89 = *(_QWORD *)&v11[16 * v87 + 32];
        v90 = *(_QWORD *)&v11[16 * v12 + 24];
        sub_10006BE5C((char *)(v86 + 8 * v89), (char *)(v86 + 8 * *(_QWORD *)&v88[16 * v12 - 16]), v86 + 8 * v90, v99);
        if (v1)
          goto LABEL_95;
        if (v90 < v89)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) == 0)
          v78 = sub_1000A7930((uint64_t)v78);
        if (v87 >= *((_QWORD *)v78 + 2))
          goto LABEL_136;
        v91 = &v78[16 * v87 + 32];
        *(_QWORD *)v91 = v89;
        *((_QWORD *)v91 + 1) = v90;
        v92 = *((_QWORD *)v78 + 2);
        if (v12 > v92)
          goto LABEL_137;
        memmove(&v78[16 * v12 + 16], &v78[16 * v12 + 32], 16 * (v92 - v12));
        v11 = v78;
        *((_QWORD *)v78 + 2) = v92 - 1;
        v12 = v92 - 1;
        if (v92 <= 2)
          goto LABEL_115;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      return;
    }
  }
  while (1)
  {
    v31 = v12 - 1;
    if (v12 >= 4)
    {
      v36 = &v29[16 * v12];
      v37 = *((_QWORD *)v36 - 8);
      v38 = *((_QWORD *)v36 - 7);
      v42 = __OFSUB__(v38, v37);
      v39 = v38 - v37;
      if (v42)
        goto LABEL_122;
      v41 = *((_QWORD *)v36 - 6);
      v40 = *((_QWORD *)v36 - 5);
      v42 = __OFSUB__(v40, v41);
      v34 = v40 - v41;
      v35 = v42;
      if (v42)
        goto LABEL_123;
      v43 = v12 - 2;
      v44 = &v29[16 * v12 - 32];
      v46 = *(_QWORD *)v44;
      v45 = *((_QWORD *)v44 + 1);
      v42 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if (v42)
        goto LABEL_124;
      v42 = __OFADD__(v34, v47);
      v48 = v34 + v47;
      if (v42)
        goto LABEL_126;
      if (v48 >= v39)
      {
        v66 = &v29[16 * v31];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v42 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v42)
          goto LABEL_132;
        v59 = v34 < v69;
        goto LABEL_84;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v60 = *((_QWORD *)v11 + 4);
        v61 = *((_QWORD *)v11 + 5);
        v42 = __OFSUB__(v61, v60);
        v53 = v61 - v60;
        v54 = v42;
        goto LABEL_78;
      }
      v33 = *((_QWORD *)v11 + 4);
      v32 = *((_QWORD *)v11 + 5);
      v42 = __OFSUB__(v32, v33);
      v34 = v32 - v33;
      v35 = v42;
    }
    if ((v35 & 1) != 0)
      goto LABEL_125;
    v43 = v12 - 2;
    v49 = &v29[16 * v12 - 32];
    v51 = *(_QWORD *)v49;
    v50 = *((_QWORD *)v49 + 1);
    v52 = __OFSUB__(v50, v51);
    v53 = v50 - v51;
    v54 = v52;
    if (v52)
      goto LABEL_127;
    v55 = &v29[16 * v31];
    v57 = *(_QWORD *)v55;
    v56 = *((_QWORD *)v55 + 1);
    v42 = __OFSUB__(v56, v57);
    v58 = v56 - v57;
    if (v42)
      goto LABEL_129;
    if (__OFADD__(v53, v58))
      goto LABEL_131;
    if (v53 + v58 >= v34)
    {
      v59 = v34 < v58;
LABEL_84:
      if (v59)
        v31 = v43;
      goto LABEL_86;
    }
LABEL_78:
    if ((v54 & 1) != 0)
      goto LABEL_128;
    v62 = &v29[16 * v31];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v42 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v42)
      goto LABEL_130;
    if (v65 < v53)
      goto LABEL_15;
LABEL_86:
    v70 = v31 - 1;
    if (v31 - 1 >= v12)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v10)
      goto LABEL_146;
    v71 = &v29[16 * v70];
    v72 = *(_QWORD *)v71;
    v73 = v29;
    v74 = &v29[16 * v31];
    v75 = *((_QWORD *)v74 + 1);
    sub_10006BE5C((char *)(v10 + 8 * *(_QWORD *)v71), (char *)(v10 + 8 * *(_QWORD *)v74), v10 + 8 * v75, v99);
    if (v1)
      break;
    if (v75 < v72)
      goto LABEL_119;
    if (v31 > *((_QWORD *)v11 + 2))
      goto LABEL_120;
    *(_QWORD *)v71 = v72;
    *(_QWORD *)&v73[16 * v70 + 8] = v75;
    v76 = *((_QWORD *)v11 + 2);
    if (v31 >= v76)
      goto LABEL_121;
    v12 = v76 - 1;
    memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
    v29 = v73;
    *((_QWORD *)v11 + 2) = v76 - 1;
    v10 = v98;
    if (v76 <= 2)
      goto LABEL_15;
  }
  v78 = v11;
LABEL_95:
  v79 = v78;
LABEL_116:
  swift_bridgeObjectRelease(v79);
  v95[2] = 0;
  swift_bridgeObjectRelease(v95);
}

uint64_t sub_10006B770(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11[3];

  v4 = (uint64_t)objc_msgSend(a1, "getPointCountAtContourIndex:", a2);
  result = (uint64_t)objc_msgSend(a1, "getPointCountAtContourIndex:", a2);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = (uint64_t)objc_msgSend(a1, "getPointCountAtContourIndex:", a2);
    if ((v4 & 0x8000000000000000) == 0 && result >= v4)
    {
      if (v4)
      {
        v6 = sub_10000EDC8((uint64_t *)&unk_10047ED60);
        v7 = (_QWORD *)swift_allocObject(v6, 16 * v4 + 32, 7);
        v8 = j__malloc_size(v7);
        v9 = v8 - 32;
        if (v8 < 32)
          v9 = v8 - 17;
        v7[2] = v4;
        v7[3] = 2 * (v9 >> 4);
        v10 = sub_10006ACD0(v11, v7 + 4, v4, a1, a2);

        if (v10 == (_QWORD *)v4)
          return (uint64_t)v7;
        __break(1u);
      }
      return (uint64_t)_swiftEmptyArrayStorage;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10006B878(void *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  id v7;
  _QWORD *v8;
  id v9[2];

  v2 = (uint64_t)objc_msgSend(a1, "getCornerCount");
  result = (uint64_t)objc_msgSend(a1, "getCornerCount");
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = (uint64_t)objc_msgSend(a1, "getCornerCount");
    if ((v2 & 0x8000000000000000) == 0 && result >= v2)
    {
      if (v2)
      {
        v4 = sub_10000EDC8(&qword_10047ED50);
        v5 = (_QWORD *)swift_allocObject(v4, 24 * v2 + 32, 7);
        v6 = j__malloc_size(v5);
        v5[2] = v2;
        v5[3] = 2 * ((uint64_t)(v6 - 32) / 24);
        v7 = a1;
        v8 = sub_10006AE2C(v9, (uint64_t)(v5 + 4), v2);

        if (v8 == (_QWORD *)v2)
          return (uint64_t)v5;
        __break(1u);
      }
      return (uint64_t)_swiftEmptyArrayStorage;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10006B974(void *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  id v10[2];

  v2 = (uint64_t)objc_msgSend(a1, "getContourCount");
  result = (uint64_t)objc_msgSend(a1, "getContourCount");
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = (uint64_t)objc_msgSend(a1, "getContourCount");
    if ((v2 & 0x8000000000000000) == 0 && result >= v2)
    {
      if (v2)
      {
        v4 = sub_10000EDC8(&qword_10047ED58);
        v5 = (_QWORD *)swift_allocObject(v4, 16 * v2 + 32, 7);
        v6 = j__malloc_size(v5);
        v7 = v6 - 32;
        if (v6 < 32)
          v7 = v6 - 17;
        v5[2] = v2;
        v5[3] = 2 * (v7 >> 4);
        v8 = a1;
        v9 = sub_10006AF90(v10, v5 + 4, v2);

        if (v9 == (_QWORD *)v2)
          return (uint64_t)v5;
        __break(1u);
      }
      return (uint64_t)_swiftEmptyArrayStorage;
    }
  }
  __break(1u);
  return result;
}

_QWORD *sub_10006BA60(uint64_t a1)
{
  return sub_10006BAB0(a1, &qword_10047ED10, type metadata accessor for MetricsManager.PersonHeightMetric);
}

_QWORD *sub_10006BA74(uint64_t a1)
{
  return sub_10006BAB0(a1, &qword_10047ED18, type metadata accessor for MetricsManager.VerticalGuideMetric);
}

_QWORD *sub_10006BA88(uint64_t a1)
{
  return sub_10006BAB0(a1, &qword_10047ED20, type metadata accessor for MetricsManager.SurfaceVectorGuideMetric);
}

_QWORD *sub_10006BA9C(uint64_t a1)
{
  return sub_10006BAB0(a1, &qword_10047ED28, type metadata accessor for MetricsManager.EdgeGuideMetric);
}

_QWORD *sub_10006BAB0(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v6 = sub_10000EDC8(a2);
  v7 = *(_QWORD *)(a3(0) - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = (_QWORD *)swift_allocObject(v6, v10 + v8 * v3, v9 | 7);
  result = (_QWORD *)j__malloc_size(v11);
  if (v8)
  {
    if ((_QWORD *)((char *)result - v10) != (_QWORD *)0x8000000000000000 || v8 != -1)
    {
      v11[2] = v3;
      v11[3] = 2 * (((uint64_t)result - v10) / v8);
      v14 = sub_10006C05C(&v16, (uint64_t)v11 + v10, v3, a1, a3);
      v15 = v16;
      swift_bridgeObjectRetain(a1);
      sub_100020858(v15);
      if (v14 == v3)
        return v11;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_10006BBCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10000EDC8(&qword_10047ECB8);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 3);
  v7 = sub_10006C314(&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100020858(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

void sub_10006BCB0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        v12 = sub_10000EDC8(&qword_10047ED30);
        swift_arrayInitWithCopy(v9 + 4, a2 + 32 * a3, v5, v12);
        return;
      }
    }
    else
    {
      v8 = sub_10000EDC8(&qword_10047ED38);
      v9 = (_QWORD *)swift_allocObject(v8, 32 * v5 + 32, 15);
      v10 = j__malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 1;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 5);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_11;
  }
}

_QWORD *sub_10006BD8C(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_13;
  }
  v3 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v2 == -1)
    return _swiftEmptyArrayStorage;
  v5 = (uint64_t)result;
  if (v3 <= 0)
  {
    v7 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = sub_10000EDC8((uint64_t *)&unk_10047ED40);
    v7 = (_QWORD *)swift_allocObject(v6, 8 * v3 + 32, 7);
    v8 = j__malloc_size(v7);
    v9 = v8 - 32;
    if (v8 < 32)
      v9 = v8 - 25;
    v7[2] = v3;
    v7[3] = 2 * (v9 >> 3);
  }
  result = (_QWORD *)sub_10006B0A0((uint64_t)&v10, (uint64_t)(v7 + 4), v3, v5, a2);
  if (result == (_QWORD *)v3)
    return v7;
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_10006BE5C(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  int64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 7;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 3;
  if (v10 >= v12 >> 3)
  {
    if (a4 != __src || &__src[8 * v13] <= a4)
      memmove(a4, __src, 8 * v13);
    v14 = &v4[8 * v13];
    if (v7 >= v6 || v11 < 8)
      goto LABEL_39;
    v17 = (char *)(a3 - 8);
    v18 = v6;
    while (1)
    {
      v19 = v17 + 8;
      v21 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      v20 = v21;
      if (*((_QWORD *)v14 - 1) < v21)
        break;
      v20 = *((_QWORD *)v14 - 1);
      v18 = v6;
      if (v19 != v14)
      {
        v14 -= 8;
LABEL_35:
        *(_QWORD *)v17 = v20;
        goto LABEL_36;
      }
      v22 = v17 >= v14;
      v14 -= 8;
      if (v22)
        goto LABEL_35;
LABEL_36:
      if (v18 > v7)
      {
        v17 -= 8;
        v6 = v18;
        if (v14 > v4)
          continue;
      }
      v6 = v18;
      goto LABEL_39;
    }
    if (v19 == v6 && v17 < v6)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (a4 != __dst || &__dst[8 * v10] <= a4)
    memmove(a4, __dst, 8 * v10);
  v14 = &v4[8 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      v15 = *(_QWORD *)v6;
      if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        break;
      v16 = v7 == v6;
      v6 += 8;
      if (!v16)
        goto LABEL_16;
LABEL_17:
      v7 += 8;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v15 = *(_QWORD *)v4;
    v16 = v7 == v4;
    v4 += 8;
    if (v16)
      goto LABEL_17;
LABEL_16:
    *(_QWORD *)v7 = v15;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_39:
  v23 = v14 - v4 + (v14 - v4 < 0 ? 7uLL : 0);
  if (v6 != v4 || v6 >= &v4[v23 & 0xFFFFFFFFFFFFFFF8])
    memmove(v6, v4, 8 * (v23 >> 3));
  return 1;
}

uint64_t sub_10006C05C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v10 = a5(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v17 = (char *)&v33 - v16;
  v38 = a4;
  v20 = *(_QWORD *)(a4 + 64);
  v19 = a4 + 64;
  v18 = v20;
  v37 = v19;
  v21 = -1 << *(_BYTE *)(v19 - 32);
  if (-v21 < 64)
    v22 = ~(-1 << -(char)v21);
  else
    v22 = -1;
  v23 = v22 & v18;
  if (!a2)
  {
    v24 = 0;
    a3 = 0;
LABEL_38:
    v32 = v37;
    *a1 = v38;
    a1[1] = v32;
    a1[2] = ~v21;
    a1[3] = v24;
    a1[4] = v23;
    return a3;
  }
  if (!a3)
  {
    v24 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v34 = -1 << *(_BYTE *)(v19 - 32);
  v35 = a1;
  v24 = 0;
  v25 = 0;
  v36 = (unint64_t)(63 - v21) >> 6;
  v33 = v36 - 1;
  if (!v23)
    goto LABEL_9;
LABEL_8:
  v26 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  v27 = v26 | (v24 << 6);
  while (1)
  {
    ++v25;
    v31 = *(_QWORD *)(v11 + 72);
    sub_100036344(*(_QWORD *)(v38 + 56) + v31 * v27, (uint64_t)v14, a5);
    sub_10006CAB4((uint64_t)v14, (uint64_t)v17, a5);
    result = sub_10006CAB4((uint64_t)v17, a2, a5);
    if (v25 == a3)
      goto LABEL_37;
    a2 += v31;
    if (v23)
      goto LABEL_8;
LABEL_9:
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v28 >= v36)
      goto LABEL_32;
    v29 = *(_QWORD *)(v37 + 8 * v28);
    if (!v29)
      break;
LABEL_18:
    v23 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v28 << 6);
    v24 = v28;
  }
  v24 += 2;
  if (v28 + 1 >= v36)
  {
    v23 = 0;
    v24 = v28;
    goto LABEL_36;
  }
  v29 = *(_QWORD *)(v37 + 8 * v24);
  if (v29)
    goto LABEL_14;
  v30 = v28 + 2;
  if (v28 + 2 >= v36)
    goto LABEL_32;
  v29 = *(_QWORD *)(v37 + 8 * v30);
  if (v29)
    goto LABEL_17;
  v24 = v28 + 3;
  if (v28 + 3 >= v36)
  {
    v23 = 0;
    v24 = v28 + 2;
    goto LABEL_36;
  }
  v29 = *(_QWORD *)(v37 + 8 * v24);
  if (v29)
  {
LABEL_14:
    v28 = v24;
    goto LABEL_18;
  }
  v30 = v28 + 4;
  if (v28 + 4 >= v36)
  {
LABEL_32:
    v23 = 0;
LABEL_36:
    a3 = v25;
LABEL_37:
    v21 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  v29 = *(_QWORD *)(v37 + 8 * v30);
  if (v29)
  {
LABEL_17:
    v28 = v30;
    goto LABEL_18;
  }
  while (1)
  {
    v28 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v28 >= v36)
    {
      v23 = 0;
      v24 = v33;
      goto LABEL_36;
    }
    v29 = *(_QWORD *)(v37 + 8 * v28);
    ++v30;
    if (v29)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_10006C314(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

void sub_10006C4A8(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  Class isa;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakAssign(a2 + qword_10047EA48, a1);
  v8 = objc_msgSend(a1, "sequenceURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v10 = URL.path.getter(v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v28 = v10;
  v29 = v12;
  swift_bridgeObjectRetain(v12);
  v13._countAndFlagsBits = 1735355438;
  v13._object = (void *)0xE400000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  v14 = v29;
  LOBYTE(v7) = sub_1000698C8(v28, v29);
  swift_bridgeObjectRelease(v14);
  if ((v7 & 1) != 0)
  {
    v15 = 0;
  }
  else
  {
    sub_100018148(0, (unint64_t *)&unk_10047ECD0, NSSet_ptr);
    v16 = sub_10000EDC8(&qword_10047B9C0);
    v17 = swift_allocObject(v16, 96, 7);
    *(_OWORD *)(v17 + 16) = xmmword_1003B0F60;
    v18 = type metadata accessor for MetaData();
    *(_QWORD *)(v17 + 56) = sub_10000EDC8(&qword_10047ECE0);
    *(_QWORD *)(v17 + 32) = v18;
    v19 = type metadata accessor for FrameEvent();
    *(_QWORD *)(v17 + 88) = sub_10000EDC8(&qword_10047ECE8);
    *(_QWORD *)(v17 + 64) = v19;
    v20 = (void *)NSSet.init(objects:)(v17);
    v28 = 0;
    static Set._forceBridgeFromObjectiveC(_:result:)(v20, &v28, &type metadata for AnyHashable, &protocol witness table for AnyHashable);
    v21 = v28;
    if (!v28)
      goto LABEL_10;

    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v21);
    objc_msgSend(a1, "setCustomDataClasses:", isa);

    v15 = 1;
  }
  *(_BYTE *)(a2 + qword_10047EA30) = v15;
  v23 = (void *)objc_opt_self(NSUserDefaults);
  v24 = objc_msgSend(v23, "appleGlobalDomain");
  if (v24)
  {
    v25 = v24;
    objc_msgSend(v24, "addObserver:forKeyPath:options:context:", a2, ARReplaySensorFilePathAdvanceToFrameUserDefaultsKey, 11, 0);

    v26 = objc_msgSend(v23, "appleGlobalDomain");
    if (v26)
    {
      v27 = v26;
      objc_msgSend(v26, "addObserver:forKeyPath:options:context:", a2, ARReplaySensorFilePathAdvanceFramesPerSecondMultiplierUserDefaultsKey, 11, 0);

      *(_BYTE *)(a2 + qword_10047EA40) = 1;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  __break(1u);
}

uint64_t sub_10006C77C(uint64_t a1)
{
  uint64_t result;

  if (a1 > 99)
  {
    switch(a1)
    {
      case 'd':
        return 7;
      case 'e':
        return 8;
      case 'f':
        return 9;
      default:
        return 10;
    }
  }
  else
  {
    result = 1;
    switch(a1)
    {
      case 0:
        result = 0;
        break;
      case 1:
        return result;
      case 2:
        result = 2;
        break;
      case 3:
        result = 3;
        break;
      case 4:
        result = 4;
        break;
      case 5:
        result = 5;
        break;
      case 6:
        result = 6;
        break;
      default:
        return 10;
    }
  }
  return result;
}

unint64_t sub_10006C814()
{
  unint64_t result;

  result = qword_10047ECA0;
  if (!qword_10047ECA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10047ECA0);
  }
  return result;
}

void sub_10006C860(void *__src)
{
  sub_100069DA8(__src);
}

uint64_t sub_10006C868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8((uint64_t *)&unk_10047ED00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006C8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSString v20;
  id v21;
  uint64_t v22;
  void *v23;
  NSString v24;
  float v25;
  float v26;
  double v27;

  result = swift_unknownObjectWeakLoadStrong(v2 + qword_10047EA48, a2);
  if (result)
  {
    v6 = (void *)result;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(ARReplaySensorFilePathAdvanceToFrameUserDefaultsKey);
    v9 = v8;
    if (!a2)
    {
      swift_bridgeObjectRelease(v8);
      static String._unconditionallyBridgeFromObjectiveC(_:)(ARReplaySensorFilePathAdvanceFramesPerSecondMultiplierUserDefaultsKey);
      v18 = v17;
      swift_unknownObjectRelease(v6);
      return swift_bridgeObjectRelease(v18);
    }
    if (v7 == a1 && v8 == a2)
    {
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v7, v8, 0);
      swift_bridgeObjectRelease(v9);
      if ((v11 & 1) == 0)
      {
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(ARReplaySensorFilePathAdvanceFramesPerSecondMultiplierUserDefaultsKey);
        v14 = v13;
        if (v12 == a1 && v13 == a2)
        {
          swift_bridgeObjectRelease(v13);
        }
        else
        {
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v12, v13, 0);
          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) == 0)
            return swift_unknownObjectRelease(v6);
        }
        v23 = (void *)objc_opt_self(ARKitUserDefaults);
        v24 = String._bridgeToObjectiveC()();
        objc_msgSend(v23, "floatForKey:", v24);
        v26 = v25;

        LODWORD(v27) = 1.0;
        if (v26 > 0.0)
          *(float *)&v27 = v26;
        objc_msgSend(v6, "setAdvanceFramesPerSecondMultiplier:", v27);
        return swift_unknownObjectRelease(v6);
      }
    }
    v19 = (void *)objc_opt_self(ARKitUserDefaults);
    v20 = String._bridgeToObjectiveC()();
    v21 = objc_msgSend(v19, "integerForKey:", v20);

    if ((uint64_t)v21 <= 0)
      v22 = -1;
    else
      v22 = (uint64_t)v21;
    objc_msgSend(v6, "advanceToFrameIndex:", v22);
    return swift_unknownObjectRelease(v6);
  }
  return result;
}

uint64_t sub_10006CAB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006CAF8(uint64_t a1)
{
  uint64_t countAndFlagsBits;
  id v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;

  countAndFlagsBits = a1;
  switch(a1)
  {
    case 0:
      return countAndFlagsBits;
    case 1:
      v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v3 = 0xE90000000000004ELL;
      v8 = 0xE000000000000000;
      v4 = 0x574F445F574F4C53;
      goto LABEL_11;
    case 2:
      v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v8 = 0xE000000000000000;
      v4 = 0x4B5241445F4F4F54;
      v3 = 0xE800000000000000;
      goto LABEL_11;
    case 3:
      v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v8 = 0xE000000000000000;
      v4 = 0x4F4C435F45564F4DLL;
      v3 = 0xEB00000000524553;
      goto LABEL_11;
    case 4:
      v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v8 = 0xE000000000000000;
      v4 = 0x534F4C435F4F4F54;
      v3 = 0xE900000000000045;
      goto LABEL_11;
    case 5:
    case 6:
      v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v8 = 0xE000000000000000;
      v3 = 0x80000001003DB8B0;
      v4 = 0xD000000000000012;
      goto LABEL_11;
    case 7:
      v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v8 = 0xE000000000000000;
      v4 = 0x544345525F444441;
      v3 = 0xED0000454C474E41;
      goto LABEL_11;
    case 8:
      v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v3 = 0xE900000000000054;
      v8 = 0xE000000000000000;
      v4 = 0x4E494F505F444441;
      goto LABEL_11;
    case 9:
      v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v8 = 0xE000000000000000;
      v4 = 0x5255535F444E4946;
      v3 = 0xEC00000045434146;
      goto LABEL_11;
    case 10:
      v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v4 = 0xD000000000000013;
      v8 = 0xE000000000000000;
      v3 = 0x80000001003DB8D0;
LABEL_11:
      v5._countAndFlagsBits = 0;
      v5._object = (void *)0xE000000000000000;
      v6 = 0;
      countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, (Swift::String_optional)0, (NSBundle)v2, v5, *(Swift::String *)(&v8 - 1))._countAndFlagsBits;

      return countAndFlagsBits;
    default:
      v9 = a1;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for CalloutReason, &v9, &type metadata for CalloutReason, &type metadata for Int);
      __break(1u);
      JUMPOUT(0x10006CE58);
  }
}

Swift::Int sub_10006CE84()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10006CEC8()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10006CEF0()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_10006CF30@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_10006D534(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_10006CF60()
{
  uint64_t *v0;

  return sub_10006CAF8(*v0);
}

_BYTE *sub_10006CF68(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, __n128);
  __n128 v16;
  _BYTE *result;
  objc_super v18;

  v4[qword_10047ED70] = 0;
  v9 = qword_10047ED78;
  v10 = sub_10000EDC8((uint64_t *)&unk_1004810D0);
  KeyPath = swift_getKeyPath(&unk_1003B34D8);
  v12 = qword_10047AD88;
  v13 = v4;
  if (v12 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v14 = qword_1004AF890;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 272);
  v16 = swift_retain();
  *(_QWORD *)&v13[v9] = v15(KeyPath, v14, v16);

  v18.receiver = v13;
  v18.super_class = (Class)type metadata accessor for CalloutView(0);
  result = objc_msgSendSuper2(&v18, "initWithFrame:", a1, a2, a3, a4);
  result[qword_10047ED70] = 1;
  return result;
}

_BYTE *sub_10006D088(double a1, double a2, double a3, double a4)
{
  return sub_10006CF68(a1, a2, a3, a4);
}

void sub_10006D0A8(_BYTE *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, __n128);
  __n128 v12;

  a1[qword_10047ED70] = 0;
  v5 = qword_10047ED78;
  v6 = sub_10000EDC8((uint64_t *)&unk_1004810D0);
  KeyPath = swift_getKeyPath(&unk_1003B34D8);
  v8 = qword_10047AD88;
  v9 = a3;
  if (v8 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v10 = qword_1004AF890;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v6 + 272);
  v12 = swift_retain();
  *(_QWORD *)&a1[v5] = v11(KeyPath, v10, v12);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/CalloutView.swift", 25, 2, 70, 0);
  __break(1u);
}

void sub_10006D198(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  char isEscapingClosureAtFileLocation;
  _QWORD v12[6];

  v3 = *a1;
  v4 = swift_allocObject(&unk_100441A48, 32, 7);
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = v3;
  if (*((_BYTE *)a2 + qword_10047ED70) == 1)
  {
    v5 = *(void (**)(uint64_t))((swift_isaMask & *a2) + 0xF0);
    v6 = a2;
    v5(v3);
    swift_release();
  }
  else
  {
    v7 = (void *)objc_opt_self(UIView);
    v8 = swift_allocObject(&unk_100441A70, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_10006D568;
    *(_QWORD *)(v8 + 24) = v4;
    v12[4] = sub_100030C24;
    v12[5] = v8;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_1000DDB80;
    v12[3] = &unk_100441A88;
    v9 = _Block_copy(v12);
    v10 = a2;
    swift_retain();
    swift_retain();
    objc_msgSend(v7, "performWithoutAnimation:", v9, swift_release().n128_f64[0]);
    _Block_release(v9);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v8, "", 92, 87, 48, 1);
    swift_release_n(v4, 2);
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

void sub_10006D338()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x65764F207473754DLL, 0xED00006564697272, "Measure/CalloutView.swift", 25, 2, 93, 0);
  __break(1u);
}

void sub_10006D398()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x65764F207473754DLL, 0xED00006564697272, "Measure/CalloutView.swift", 25, 2, 104, 0);
  __break(1u);
}

uint64_t sub_10006D3F8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + qword_10047ED78));
}

id sub_10006D408()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CalloutView(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10006D43C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + qword_10047ED78));
}

uint64_t type metadata accessor for CalloutView(uint64_t a1)
{
  uint64_t result;

  result = qword_10047EDA8;
  if (!qword_10047EDA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalloutView);
  return result;
}

uint64_t sub_10006D488(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = &unk_1003B33E8;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 256, 2, v2, a1 + 184);
}

uint64_t sub_10006D4D4()
{
  return type metadata accessor for CalloutView(0);
}

ValueMetadata *type metadata accessor for CalloutReason()
{
  return &type metadata for CalloutReason;
}

unint64_t sub_10006D4F0()
{
  unint64_t result;

  result = qword_10047EEF0;
  if (!qword_10047EEF0)
  {
    result = swift_getWitnessTable(&unk_1003B3488, &type metadata for CalloutReason);
    atomic_store(result, (unint64_t *)&qword_10047EEF0);
  }
  return result;
}

unint64_t sub_10006D534(unint64_t result)
{
  if (result > 0xA)
    return 0;
  return result;
}

uint64_t sub_10006D544()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006D568()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))((swift_isaMask & **(_QWORD **)(v0 + 16)) + 0xF0))(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10006D5A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006D5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006D5C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10006D614(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  objc_class *ObjectType;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  uint64_t ObjCClassFromMetadata;
  id v25;
  NSString v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  char v34;
  uint64_t v35;
  char v36;
  id v37;
  id v38;
  id v39;
  id v40;
  objc_super v41;
  _QWORD v42[4];

  ObjectType = (objc_class *)swift_getObjectType(v4);
  v10 = &v4[OBJC_IVAR____TtC7Measure12DeleteButton_delegate];
  *((_QWORD *)v10 + 1) = 0;
  swift_unknownObjectWeakInit(v10, 0);
  v4[OBJC_IVAR____TtC7Measure12DeleteButton_isEnabled] = 1;
  v11 = v4;
  v12 = (_QWORD *)static Locale.preferredLanguages.getter();
  v13 = v12;
  if (v12[2])
  {
    v15 = v12[4];
    v14 = v12[5];
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRelease(v13);
    v42[2] = v15;
    v42[3] = v14;
    v42[0] = 28261;
    v42[1] = 0xE200000000000000;
    v16 = sub_10006E0F8();
    v17 = sub_10006E13C();
    v18 = BidirectionalCollection<>.starts<A>(with:)(v42, &type metadata for String, &type metadata for String, v16, v17);
    swift_bridgeObjectRelease(v14);
    if ((v18 & 1) != 0)
    {
      if (qword_10047AE48 != -1)
        swift_once(&qword_10047AE48, sub_100195C48);
      v19 = *((_QWORD *)&xmmword_1004AF938 + 1);
      v20 = objc_allocWithZone((Class)ASVRoundedButton);
      swift_bridgeObjectRetain(v19);
      v21 = String._bridgeToObjectiveC()();
      v22 = objc_msgSend(v20, "initWithTitle:buttonStyle:textStyle:controlStyle:", v21, 0, 1, 1, swift_bridgeObjectRelease(v19).n128_f64[0]);

      *(_QWORD *)&v11[OBJC_IVAR____TtC7Measure12DeleteButton_deleteButton] = v22;
LABEL_16:

      v41.receiver = v11;
      v41.super_class = ObjectType;
      v40 = objc_msgSendSuper2(&v41, "initWithFrame:", a1, a2, a3, a4);
      sub_10006D9C0();
      sub_10006DAD8();
      sub_10006DC08();

      return;
    }
    v23 = type metadata accessor for ViewController(0);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v23);
    v25 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v26 = String._bridgeToObjectiveC()();
    v27 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:compatibleWithTraitCollection:", v26, v25, 0);

    if (v27)
    {
      v28 = objc_msgSend(v27, "imageWithRenderingMode:", 2);

      v29 = objc_msgSend(objc_allocWithZone((Class)ASVRoundedButton), "initWithImage:buttonStyle:textStyle:controlStyle:", v28, 0, 0, 1);
      *(_QWORD *)&v11[OBJC_IVAR____TtC7Measure12DeleteButton_deleteButton] = v29;
      v30 = qword_10047B110;
      v31 = v29;
      if (v30 != -1)
        swift_once(&qword_10047B110, sub_100197AC8);
      v32 = (void *)qword_1004AFC50;
      v33 = *(void **)algn_1004AFC58;
      if ((byte_1004AFC60 & 1) != 0)
      {
        v34 = byte_1004AFC70;
        v35 = qword_1004AFC68;
        v36 = byte_10048A2A0;
        v37 = (id)qword_1004AFC50;
        v38 = sub_100070DBC(v36, v35, v34);
        sub_100021580(v32, v33, 1);
      }
      else
      {
        if ((byte_10048A2A0 & 1) != 0)
          v39 = *(id *)algn_1004AFC58;
        else
          v39 = (id)qword_1004AFC50;
        v38 = v39;
      }
      objc_msgSend(v31, "setTintColor:", v38);

      goto LABEL_16;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v12);
    __break(1u);
  }
  __break(1u);
}

void sub_10006D9C0()
{
  char *v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  id v5;

  v1 = OBJC_IVAR____TtC7Measure12DeleteButton_deleteButton;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC7Measure12DeleteButton_deleteButton], "addTarget:action:forControlEvents:", v0, "tapDeleteFrom:", 64);
  objc_msgSend(v0, "addSubview:", *(_QWORD *)&v0[v1]);
  v2 = objc_msgSend(*(id *)&v0[v1], "widthAnchor");
  v3 = objc_msgSend(v2, "constraintEqualToConstant:", 80.0);

  objc_msgSend(v3, "setActive:", 1);
  v4 = objc_msgSend(*(id *)&v0[v1], "heightAnchor");
  v5 = objc_msgSend(v4, "constraintEqualToConstant:", 47.0);

  objc_msgSend(v5, "setActive:", 1);
}

void sub_10006DAD8()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[6];

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10047B198 != -1)
    swift_once(&qword_10047B198, sub_1001CA024);
  v2 = qword_1004AFD10;
  v3 = swift_allocObject(&unk_100441B40, 24, 7);
  *(_QWORD *)(v3 + 16) = v0;
  v7[4] = sub_10006E1A4;
  v7[5] = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1000DCC48;
  v7[3] = &unk_100441B58;
  v4 = _Block_copy(v7);
  v5 = v0;
  v6 = objc_msgSend(v1, "addObserverForName:object:queue:usingBlock:", v2, 0, 0, v4, swift_release().n128_f64[0]);
  _Block_release(v4);
  swift_unknownObjectRelease(v6);

}

id sub_10006DC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  char v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  v1 = v0;
  v2 = OBJC_IVAR____TtC7Measure12DeleteButton_deleteButton;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC7Measure12DeleteButton_deleteButton);
  v4 = qword_10047B110;
  v5 = v3;
  if (v4 != -1)
    swift_once(&qword_10047B110, sub_100197AC8);
  v6 = (void *)qword_1004AFC50;
  v7 = *(void **)algn_1004AFC58;
  if ((byte_1004AFC60 & 1) != 0)
  {
    v8 = byte_1004AFC70;
    v9 = qword_1004AFC68;
    v10 = byte_10048A2A0;
    v11 = (id)qword_1004AFC50;
    v12 = sub_100070DBC(v10, v9, v8);
    sub_100021580(v6, v7, 1);
  }
  else
  {
    if ((byte_10048A2A0 & 1) != 0)
      v13 = *(id *)algn_1004AFC58;
    else
      v13 = (id)qword_1004AFC50;
    v12 = v13;
  }
  objc_msgSend(v5, "setTintColor:", v12);

  if (byte_10048A2A0)
    v14 = 2;
  else
    v14 = 1;
  return objc_msgSend(*(id *)(v1 + v2), "setControlStyle:", v14);
}

uint64_t type metadata accessor for DeleteButton()
{
  return objc_opt_self(_TtC7Measure12DeleteButton);
}

uint64_t sub_10006DE3C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100049274();
  v11 = (void *)static OS_dispatch_queue.main.getter();
  v12 = swift_allocObject(&unk_100441B90, 24, 7);
  *(_QWORD *)(v12 + 16) = a2;
  aBlock[4] = sub_10006E1C4;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100441BA8;
  v13 = _Block_copy(aBlock);
  v14 = a2;
  v15 = swift_release();
  static DispatchQoS.unspecified.getter(v15);
  aBlock[0] = _swiftEmptyArrayStorage;
  v16 = sub_100030E1C();
  v17 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v18 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_10006E0F8()
{
  unint64_t result;

  result = qword_10047EF38;
  if (!qword_10047EF38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10047EF38);
  }
  return result;
}

unint64_t sub_10006E13C()
{
  unint64_t result;

  result = qword_10047EF40;
  if (!qword_10047EF40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10047EF40);
  }
  return result;
}

uint64_t sub_10006E180()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006E1A4(uint64_t a1)
{
  uint64_t v1;

  return sub_10006DE3C(a1, *(void **)(v1 + 16));
}

uint64_t sub_10006E1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006E1BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_10006E1C4()
{
  return sub_10006DC08();
}

void sub_10006E1F0(unint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  char v23;
  __n128 v24;
  float32x4_t v25;
  __n128 v26;
  float32x4_t v27;
  __n128 v28;
  float32x4_t v29;
  __n128 v30;
  float32x4_t v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  float32x4_t v36;
  uint64_t v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  uint64_t v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;

  v2 = v1;
  v4 = OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_state;
  v5 = *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_state];
  if (v5 == a1)
  {
    if (a1 != 7 || (objc_msgSend(v2, "isHidden") & 1) != 0)
      return;
    v5 = *(_QWORD *)&v2[v4];
  }
  if (v5 == 5 || v5 == 0)
  {
    if (a1 <= 7 && ((1 << a1) & 0x98) != 0)
    {
LABEL_16:
      v28 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 16];
      v30 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms];
      v24 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 48];
      v26 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 32];
      v34 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 80];
      v35 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 64];
      v32 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 112];
      v33 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 96];
      sub_10006EBE8();
      v36 = v7;
      type metadata accessor for MeasureCamera(0);
      v30.n128_u64[0] = simd_float4x4.position.getter(v30, v28, v26, v24);
      static ComputedCameraProperties.shared.getter(&v37);
      v8 = (float32x4_t)static MeasureCamera.viewSpacePoint(fromWorldSpace:view:)(v30.n128_f64[0], v38, v39, v40, v41);
      v9 = vmulq_f32(v36, (float32x4_t)xmmword_1003B1A10);
      v10 = (int32x4_t)vnegq_f32(v9);
      v11 = (int8x16_t)vtrn2q_s32((int32x4_t)v9, vtrn1q_s32((int32x4_t)v9, v10));
      v29 = (float32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v10, 8uLL);
      v31 = (float32x4_t)vextq_s8(v11, v11, 8uLL);
      v12 = (float32x4_t)vrev64q_s32((int32x4_t)v9);
      v12.i32[0] = v10.i32[1];
      v12.i32[3] = v10.i32[2];
      v25 = v12;
      v13 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v29, *(float32x2_t *)v8.f32, 1), v31, v8.f32[0]), v12, v8, 2);
      v14 = (int32x4_t)vnegq_f32(v13);
      v15 = (int8x16_t)vtrn2q_s32((int32x4_t)v13, vtrn1q_s32((int32x4_t)v13, v14));
      v16 = (float32x4_t)vrev64q_s32((int32x4_t)v13);
      v16.i32[0] = v14.i32[1];
      v16.i32[3] = v14.i32[2];
      v27 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v13, v36, 3), v16, v36, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v14, 8uLL), *(float32x2_t *)v36.f32, 1), (float32x4_t)vextq_s8(v15, v15, 8uLL), v36.f32[0]));
      v35.n128_u64[0] = simd_float4x4.position.getter(v35, v34, v33, v32);
      static ComputedCameraProperties.shared.getter(&v42);
      v17 = (float32x4_t)static MeasureCamera.viewSpacePoint(fromWorldSpace:view:)(v35.n128_f64[0], v43, v44, v45, v46);
      v18 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v29, *(float32x2_t *)v17.f32, 1), v31, v17.f32[0]), v25, v17, 2);
      v19 = (int32x4_t)vnegq_f32(v18);
      v20 = (int8x16_t)vtrn2q_s32((int32x4_t)v18, vtrn1q_s32((int32x4_t)v18, v19));
      v21 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 8uLL), *(float32x2_t *)v36.f32, 1), (float32x4_t)vextq_s8(v20, v20, 8uLL), v36.f32[0]);
      v22 = (float32x4_t)vrev64q_s32((int32x4_t)v18);
      v22.i32[0] = v19.i32[1];
      v22.i32[3] = v19.i32[2];
      if (vsubq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v18, v36, 3), v22, v36, 2), v21), v27).f32[0] <= 0.0)
        v23 = 2;
      else
        v23 = 3;
      sub_10006ECD8(v23);
      v2[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_lastNumbersOrientation] = v23;
      goto LABEL_20;
    }
  }
  else
  {
    if ((a1 - 3 < 2 || a1 == 7) && v5 == 2)
      goto LABEL_16;
    if (v5 == 7 && (objc_msgSend(v2, "isHidden") & 1) == 0)
LABEL_20:
      sub_10006E468();
  }
}

void sub_10006E468()
{
  char *v0;
  char *v1;
  __int128 v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float v6;
  int8x16_t v7;
  int8x16_t v8;
  __n128 v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float *v13;
  __float2 v14;
  BOOL v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  uint64_t v45;
  id v46[2];
  void *v47;
  __n128 v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  id v52[2];
  float32x4_t v53;
  double v54;
  void *v55;
  __n128 v56;
  float32x4_t v57;
  double v58;
  uint64_t v59;
  char v60[32];

  v1 = v0;
  ariadne_trace(_:_:_:_:_:)(727056648, 0, 0, 0, 0);
  if (qword_10047AC78 != -1)
    goto LABEL_31;
  while (1)
  {
    *(_OWORD *)v52 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 16];
    v56 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms];
    v48 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 48];
    v50 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 32];
    *(double *)&v2 = simd_float4x4.position.getter(*(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 64], *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 80], *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 96], *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 112]);
    *(_OWORD *)v46 = v2;
    *(double *)v3.i64 = simd_float4x4.position.getter(v56, *(__n128 *)v52, v50, v48);
    v4 = vsubq_f32(*(float32x4_t *)v46, v3);
    v5 = vmulq_f32(v4, v4);
    v6 = sqrtf(v5.f32[2] + vaddv_f32(*(float32x2_t *)v5.f32));
    objc_msgSend(v1, "simdTransform");
    *(double *)v10.i64 = sub_100070244(v7, v8, v9);
    v57 = v10;
    v51 = OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_lastNumbersOrientation;
    sub_100183334(v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_lastNumbersOrientation]);
    v53 = v11;
    v13 = (float *)Float.piDiv2.unsafeMutableAddressor(v12);
    v14 = __sincosf_stret(*v13 * -0.5);
    v15 = (~LODWORD(v6) & 0x7F800000) == 0;
    if (v6 < 0.0)
      v15 = 1;
    v16 = v6 > 1000.0 || v15;
    objc_msgSend(v1, "setHidden:", (v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_shouldHide] | v16) & 1, *(_OWORD *)&v44);
    if ((v16 & 1) != 0)
    {
      ariadne_trace(_:_:_:_:_:)(727056652, 0, 0, 0, 0);
      return;
    }
    v17 = (uint64_t *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbers];
    swift_beginAccess(&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbers], v60, 0, 0);
    v18 = *v17;
    if ((unint64_t)*v17 >> 62)
    {
      if (v18 < 0)
        v43 = *v17;
      else
        v43 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v17);
      v19 = _CocoaArrayWrapper.endIndex.getter(v43);
      swift_bridgeObjectRelease(v18);
    }
    else
    {
      v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v49 = sub_10007017C(v6);
    v20 = *(float *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_widthOffset];
    if (qword_10047AC60 != -1)
      swift_once(&qword_10047AC60, sub_1001834A0);
    if (v19 < 0)
    {
      __break(1u);
      JUMPOUT(0x10006EBD8);
    }
    v21 = (int32x4_t)vnegq_f32(v53);
    v22 = (float32x4_t)vrev64q_s32((int32x4_t)v53);
    v23 = vmulq_n_f32((float32x4_t)xmmword_1003B3540, v14.__sinval);
    v24 = (int8x16_t)vtrn2q_s32((int32x4_t)v53, vtrn1q_s32((int32x4_t)v53, v21));
    v22.i32[0] = v21.i32[1];
    v23.i32[3] = LODWORD(v14.__cosval);
    v22.i32[3] = v21.i32[2];
    v25 = (int32x4_t)vnegq_f32(v23);
    v26 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v21, 8uLL), *(float32x2_t *)v57.f32, 1), (float32x4_t)vextq_s8(v24, v24, 8uLL), v57.f32[0]);
    v27 = vmlaq_laneq_f32(vmulq_laneq_f32(v53, v57, 3), v22, v57, 2);
    v28 = (float32x4_t)vrev64q_s32((int32x4_t)v23);
    v29 = vaddq_f32(v27, v26);
    v30 = (int8x16_t)vtrn2q_s32((int32x4_t)v23, vtrn1q_s32((int32x4_t)v23, v25));
    v28.i32[0] = v25.i32[1];
    v28.i32[3] = v25.i32[2];
    v31 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v23, v29, 3), v28, v29, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v25, 8uLL), *(float32x2_t *)v29.f32, 1), (float32x4_t)vextq_s8(v30, v30, 8uLL), v29.f32[0]));
    v58 = *(double *)v31.i64;
    v31.f32[0] = -v20;
    v44 = v31;
    if (!v19)
      break;
    v32 = 0;
    *(_QWORD *)&v54 = v31.u32[0];
    while (1)
    {
      swift_beginAccess(v17, &v59, 32, 0);
      v33 = *v17;
      if ((*v17 & 0xC000000000000001) == 0)
        break;
      v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v33);
LABEL_18:
      v35 = v34;
      v36 = v32 + 1;
      swift_endAccess(&v59);
      objc_msgSend(v35, "setSimdPosition:", v54);

      swift_beginAccess(v17, &v59, 32, 0);
      v37 = *v17;
      if ((*v17 & 0xC000000000000001) != 0)
      {
        v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v37);
      }
      else
      {
        if (v32 >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_30;
        v38 = *(id *)(v37 + 8 * v32 + 32);
      }
      v39 = v38;
      swift_endAccess(&v59);
      objc_msgSend(v39, "setSimdOrientation:", v58);

      v32 = v36;
      if (v19 == v36)
        goto LABEL_26;
    }
    if (v32 < *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v34 = *(id *)(v33 + 8 * v32 + 32);
      goto LABEL_18;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_once(&qword_10047AC78, sub_1001835CC);
  }
LABEL_26:
  if (v19 < v49)
  {
    v55 = (void *)objc_opt_self(SCNPlane);
    v47 = (void *)objc_opt_self(SCNNode);
    v45 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbersMaterial];
    ariadne_trace(_:_:_:_:_:)(727056656, 0, 0, 0, 0);
    v40 = objc_msgSend(v55, "planeWithWidth:height:", 200.0, 100.0);
    objc_msgSend(v40, "setFirstMaterial:", v45);
    objc_msgSend(objc_msgSend(v47, "nodeWithGeometry:", v40), "setSimdPosition:", COERCE_DOUBLE((unint64_t)v44.u32[0]));
    v41 = v1[v51];
    v42 = sub_100018148(0, &qword_10047BCE8, SCNNode_ptr);
    SCNBoundingVolume.boundingBox.getter(&v59, v42);
    __asm { BR              X8 }
  }
  sub_10006F0B4(1);
  ariadne_trace(_:_:_:_:_:)(727056652, 0, 0, 0, 0);
}

void sub_10006EBE8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, uint64_t);
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure20LineDivisionsNumbers__orientationState);
  v2 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1 + 144);
  v3 = swift_retain(v1);
  v2(&v7, v3);
  v4 = swift_release(v1);
  switch(v7)
  {
    case 2:
      SIMD3<>.forward.unsafeMutableAddressor(v4);
      break;
    case 3:
      v5 = *(float *)Float.piDiv2.unsafeMutableAddressor(v4);
      ((uint64_t (*)(void))SIMD3<>.forward.unsafeMutableAddressor)();
      v6 = 0.5;
      goto LABEL_6;
    case 4:
      v5 = *(float *)Float.piDiv2.unsafeMutableAddressor(v4);
      ((uint64_t (*)(void))SIMD3<>.forward.unsafeMutableAddressor)();
      v6 = -0.5;
LABEL_6:
      __sincosf_stret(v5 * v6);
      break;
    default:
      vmulq_f32(*(float32x4_t *)SIMD3<>.forward.unsafeMutableAddressor(v4), (float32x4_t)0);
      break;
  }
}

void sub_10006ECD8(char a1)
{
  char *v1;
  char *v2;
  int8x16_t v4;
  int8x16_t v5;
  __n128 v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  float *v10;
  __float2 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  Class isa;
  NSString v32;
  uint64_t v33;
  float32x4_t v34;
  char v35;
  float32x4_t v36;
  uint64_t v37;
  char v38[32];

  v2 = v1;
  objc_msgSend(v2, "simdTransform");
  *(double *)v7.i64 = sub_100070244(v4, v5, v6);
  v36 = v7;
  v35 = a1;
  sub_100183334(a1);
  v34 = v8;
  v10 = (float *)Float.piDiv2.unsafeMutableAddressor(v9);
  v11 = __sincosf_stret(*v10 * -0.5);
  v12 = (uint64_t *)&v2[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbers];
  swift_beginAccess(&v2[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbers], v38, 0, 0);
  v13 = *v12;
  if ((unint64_t)*v12 >> 62)
    goto LABEL_16;
  v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v14)
  {
    v15 = (int32x4_t)vnegq_f32(v34);
    v16 = (int8x16_t)vtrn2q_s32((int32x4_t)v34, vtrn1q_s32((int32x4_t)v34, v15));
    v17 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v15, 8uLL), *(float32x2_t *)v36.f32, 1), (float32x4_t)vextq_s8(v16, v16, 8uLL), v36.f32[0]);
    v18 = (float32x4_t)vrev64q_s32((int32x4_t)v34);
    v18.i32[0] = v15.i32[1];
    v18.i32[3] = v15.i32[2];
    v19 = vaddq_f32(v17, vmlaq_laneq_f32(vmulq_laneq_f32(v34, v36, 3), v18, v36, 2));
    v20 = vmulq_n_f32((float32x4_t)xmmword_1003B3540, v11.__sinval);
    v20.i32[3] = LODWORD(v11.__cosval);
    v21 = (int32x4_t)vnegq_f32(v20);
    v22 = (int8x16_t)vtrn2q_s32((int32x4_t)v20, vtrn1q_s32((int32x4_t)v20, v21));
    v23 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 8uLL), *(float32x2_t *)v19.f32, 1), (float32x4_t)vextq_s8(v22, v22, 8uLL), v19.f32[0]);
    v24 = (float32x4_t)vrev64q_s32((int32x4_t)v20);
    v24.i32[0] = v21.i32[1];
    v24.i32[3] = v21.i32[2];
    v36 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v20, v19, 3), v24, v19, 2), v23);
    swift_beginAccess(v12, &v37, 32, 0);
    v25 = *v12;
    if ((*v12 & 0xC000000000000001) != 0)
    {
      v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v25);
    }
    else
    {
      if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        __break(1u);
        goto LABEL_15;
      }
      v26 = *(id *)(v25 + 32);
    }
    v27 = v26;
    swift_endAccess(&v37);
    objc_msgSend(v27, "setSimdOrientation:", *(double *)v36.i64);

    swift_beginAccess(v12, &v37, 32, 0);
    v13 = *v12;
    if ((*v12 & 0xC000000000000001) != 0)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)(0, *v12);
      v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
LABEL_10:
      swift_endAccess(&v37);
      v29 = sub_100018148(0, &qword_10047BCE8, SCNNode_ptr);
      SCNBoundingVolume.boundingBox.getter(&v37, v29);

      __asm { BR              X8 }
    }
    if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v28 = *(id *)(v13 + 32);
      goto LABEL_10;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    if (v13 < 0)
      v33 = v13;
    else
      v33 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v14 = _CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease(v13);
    if (v14 < 0)
    {
      __break(1u);
      JUMPOUT(0x10006F0A4);
    }
  }
  v30 = *(void **)&v2[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbersMaterial];
  isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v32 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "setValue:forKeyPath:", isa, v32);

}

id sub_10006F0B4(char a1)
{
  char *v1;
  char *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  char v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  BOOL v25;
  unsigned __int8 v26;
  char v27;
  id result;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t i;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  float32x4_t v41;
  __n128 v42;
  float32x4_t v43;
  __n128 v44;
  float32x4_t v45;
  __n128 v46;
  __n128 v47;
  float32x4_t v48;
  __n128 v49;
  float32x4_t v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  float32x4_t v57;
  __n128 v58;
  _BYTE v59[24];
  char v60[24];
  uint64_t v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  uint64_t v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;

  v2 = v1;
  if ((a1 & 1) == 0 && v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_shouldRenderNumbers] == 1)
  {
    v46 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 16];
    v47 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms];
    v42 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 48];
    v44 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 32];
    v53 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 80];
    v55 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 64];
    v49 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 112];
    v51 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 96];
    sub_10006EBE8();
    v57 = v3;
    type metadata accessor for MeasureCamera(0);
    v47.n128_u64[0] = simd_float4x4.position.getter(v47, v46, v44, v42);
    static ComputedCameraProperties.shared.getter(&v61);
    v4 = (float32x4_t)static MeasureCamera.viewSpacePoint(fromWorldSpace:view:)(v47.n128_f64[0], v62, v63, v64, v65);
    v5 = vmulq_f32(v57, (float32x4_t)xmmword_1003B1A10);
    v6 = (int32x4_t)vnegq_f32(v5);
    v7 = (int8x16_t)vtrn2q_s32((int32x4_t)v5, vtrn1q_s32((int32x4_t)v5, v6));
    v45 = (float32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v6, 8uLL);
    v48 = (float32x4_t)vextq_s8(v7, v7, 8uLL);
    v8 = (float32x4_t)vrev64q_s32((int32x4_t)v5);
    v8.i32[0] = v6.i32[1];
    v8.i32[3] = v6.i32[2];
    v41 = v8;
    v9 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v45, *(float32x2_t *)v4.f32, 1), v48, v4.f32[0]), v8, v4, 2);
    v10 = (int32x4_t)vnegq_f32(v9);
    v11 = (int8x16_t)vtrn2q_s32((int32x4_t)v9, vtrn1q_s32((int32x4_t)v9, v10));
    v12 = (float32x4_t)vrev64q_s32((int32x4_t)v9);
    v12.i32[0] = v10.i32[1];
    v12.i32[3] = v10.i32[2];
    v43 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v9, v57, 3), v12, v57, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v10, 8uLL), *(float32x2_t *)v57.f32, 1), (float32x4_t)vextq_s8(v11, v11, 8uLL), v57.f32[0]));
    v55.n128_u64[0] = simd_float4x4.position.getter(v55, v53, v51, v49);
    static ComputedCameraProperties.shared.getter(&v66);
    v13 = (float32x4_t)static MeasureCamera.viewSpacePoint(fromWorldSpace:view:)(v55.n128_f64[0], v67, v68, v69, v70);
    v14 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v45, *(float32x2_t *)v13.f32, 1), v48, v13.f32[0]), v41, v13, 2);
    v15 = (int32x4_t)vnegq_f32(v14);
    v16 = (int8x16_t)vtrn2q_s32((int32x4_t)v14, vtrn1q_s32((int32x4_t)v14, v15));
    v17 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v15, 8uLL), *(float32x2_t *)v57.f32, 1), (float32x4_t)vextq_s8(v16, v16, 8uLL), v57.f32[0]);
    v18 = (float32x4_t)vrev64q_s32((int32x4_t)v14);
    v18.i32[0] = v15.i32[1];
    v18.i32[3] = v15.i32[2];
    if (vsubq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v14, v57, 3), v18, v57, 2), v17), v43).f32[0] <= 0.0)
      v19 = 2;
    else
      v19 = 3;
    sub_10006ECD8(v19);
    v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_lastNumbersOrientation] = v19;
  }
  v56 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 16];
  v58 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms];
  v52 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 48];
  v54 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 32];
  *(double *)v20.i64 = simd_float4x4.position.getter(*(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 64], *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 80], *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 96], *(__n128 *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms + 112]);
  v50 = v20;
  *(double *)v21.i64 = simd_float4x4.position.getter(v58, v56, v54, v52);
  v22 = vsubq_f32(v50, v21);
  v23 = vmulq_f32(v22, v22);
  v24 = sqrtf(v23.f32[2] + vaddv_f32(*(float32x2_t *)v23.f32));
  v25 = (~LODWORD(v24) & 0x7F800000) == 0 || v24 < 0.0;
  v26 = v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_shouldHide];
  v27 = v24 > 1000.0 || v25;
  result = objc_msgSend(v2, "setHidden:", (v26 | v27) & 1, *(_OWORD *)&v41, *(_OWORD *)&v43, *(_OWORD *)&v45);
  if ((v27 & 1) == 0)
  {
    v29 = (uint64_t *)&v2[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbers];
    swift_beginAccess(v29, v60, 0, 0);
    v30 = *v29;
    if ((unint64_t)*v29 >> 62)
      goto LABEL_33;
    v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
    v30 = sub_10007017C(v24);
    v32 = (void *)objc_opt_self(SCNTransaction);
    objc_msgSend(v32, "begin");
    result = objc_msgSend(v32, "setAnimationDuration:", 0.0);
    if (v31 < 0)
    {
      __break(1u);
    }
    else
    {
      if (v31)
      {
        for (i = 0; v31 != i; ++i)
        {
          swift_beginAccess(v29, v59, 32, 0);
          v34 = *v29;
          if ((*v29 & 0xC000000000000001) != 0)
          {
            v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v34);
          }
          else
          {
            if (i >= *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_32:
              __break(1u);
LABEL_33:
              if (v30 < 0)
                v40 = v30;
              else
                v40 = v30 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v30);
              v31 = _CocoaArrayWrapper.endIndex.getter(v40);
              swift_bridgeObjectRelease(v30);
              goto LABEL_16;
            }
            v35 = *(id *)(v34 + 8 * i + 32);
          }
          v36 = v35;
          swift_endAccess(v59);
          objc_msgSend(v36, "setOpacity:", 1.0);

          swift_beginAccess(v29, v59, 32, 0);
          v37 = *v29;
          if ((*v29 & 0xC000000000000001) != 0)
          {
            v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v37);
          }
          else
          {
            if (i >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_32;
            v38 = *(id *)(v37 + 8 * i + 32);
          }
          v39 = v38;
          objc_msgSend(v38, "setHidden:", v30 <= (uint64_t)i, swift_endAccess(v59).n128_f64[0]);

        }
      }
      return objc_msgSend(v32, "commit");
    }
  }
  return result;
}

char *sub_10006F514(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  void *v17;
  objc_class *ObjectType;
  _BYTE *v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, __n128);
  __n128 v29;
  __n128 *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  id v35;
  Class isa;
  NSString v37;
  uint64_t v38;
  id v39;
  Class v40;
  NSString v41;
  id v42;
  Class v43;
  NSString v44;
  id v45;
  Class v46;
  NSString v47;
  uint64_t v48;
  id v49;
  Class v50;
  NSString v51;
  id v52;
  Class v53;
  NSString v54;
  uint64_t v55;
  id v56;
  Class v57;
  NSString v58;
  id v59;
  Class v60;
  NSString v61;
  objc_super v71;
  void *v72;
  _QWORD v73[4];

  ObjectType = (objc_class *)swift_getObjectType(v17);
  v19 = v17;
  v20 = sub_100181ABC(8);
  v21 = objc_msgSend(v20, "copy");

  _bridgeAnyObjectToAny(_:)(v73, v21);
  swift_unknownObjectRelease(v21);
  v22 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
  if (swift_dynamicCast(&v72, v73, (char *)&type metadata for Any + 8, v22, 6))
    v23 = v72;
  else
    v23 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
  *(_QWORD *)&v19[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbersMaterial] = v23;
  v24 = OBJC_IVAR____TtC7Measure20LineDivisionsNumbers__orientationState;
  KeyPath = swift_getKeyPath(&unk_1003B3588);
  v26 = sub_10000EDC8((uint64_t *)&unk_10047EFD0);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v27 = qword_1004AF890;
  v28 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v26 + 272);
  v29 = swift_retain();
  *(_QWORD *)&v19[v24] = v28(KeyPath, v27, v29);
  *(_QWORD *)&v19[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_state] = static MeasureObjectState.default;
  v19[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_shouldHide] = 1;
  v19[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_lastNumbersOrientation] = 2;
  v19[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_shouldRenderNumbers] = 0;
  v19[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_isOcclusionInitialized] = 0;
  v30 = (__n128 *)&v19[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_endTransforms];
  *v30 = a1;
  v30[1] = a2;
  v30[2] = a3;
  v30[3] = a4;
  v30[4] = a5;
  v30[5] = a6;
  v30[6] = a7;
  v30[7] = a8;
  *(_QWORD *)&v19[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbers] = _swiftEmptyArrayStorage;
  *(_DWORD *)&v19[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_widthOffset] = a17;

  v71.receiver = v19;
  v71.super_class = ObjectType;
  v31 = (char *)objc_msgSendSuper2(&v71, "init");
  v32 = OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbersMaterial;
  v33 = *(void **)&v31[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbersMaterial];
  v34 = v31;
  v35 = v33;
  isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v37 = String._bridgeToObjectiveC()();
  objc_msgSend(v35, "setValue:forKeyPath:", isa, v37);

  v38 = qword_10047AC78;
  v39 = *(id *)&v31[v32];
  if (v38 != -1)
    swift_once(&qword_10047AC78, sub_1001835CC);
  v40 = Float._bridgeToObjectiveC()().super.super.isa;
  v41 = String._bridgeToObjectiveC()();
  objc_msgSend(v39, "setValue:forKeyPath:", v40, v41);

  v42 = *(id *)&v31[v32];
  v43 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v44 = String._bridgeToObjectiveC()();
  objc_msgSend(v42, "setValue:forKeyPath:", v43, v44);

  v45 = *(id *)&v31[v32];
  v46 = Int._bridgeToObjectiveC()().super.super.isa;
  v47 = String._bridgeToObjectiveC()();
  objc_msgSend(v45, "setValue:forKeyPath:", v46, v47);

  v48 = qword_10047ACC0;
  v49 = *(id *)&v31[v32];
  if (v48 != -1)
    swift_once(&qword_10047ACC0, sub_1001838FC);
  v50 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v51 = String._bridgeToObjectiveC()();
  objc_msgSend(v49, "setValue:forKey:", v50, v51);

  v52 = *(id *)&v31[v32];
  v53 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v54 = String._bridgeToObjectiveC()();
  objc_msgSend(v52, "setValue:forKey:", v53, v54);

  v55 = qword_10047ACC8;
  v56 = *(id *)&v31[v32];
  if (v55 != -1)
    swift_once(&qword_10047ACC8, sub_100183910);
  v57 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v58 = String._bridgeToObjectiveC()();
  objc_msgSend(v56, "setValue:forKey:", v57, v58);

  v59 = *(id *)&v31[v32];
  v60 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v61 = String._bridgeToObjectiveC()();
  objc_msgSend(v59, "setValue:forKey:", v60, v61);

  return v34;
}

void sub_10006FB00()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  __n128 v18;
  __n128 v19;
  id v20;
  Class v21;
  NSString v22;
  Class v23;
  NSString v24;
  Class v25;
  NSString v26;
  Class v27;
  NSString v28;
  Class v29;
  NSString v30;
  Class v31;
  NSString v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  Class isa;
  NSString v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSString v42;
  double v43;
  double v44;
  double v45;
  _BYTE v46[24];
  uint64_t v47;
  _BYTE v48[24];
  _BYTE v49[24];
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  _BYTE v53[24];
  _QWORD v54[6];

  v1 = v0;
  if (!objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable")
    || (v2 = (void *)objc_opt_self(NSUserDefaults),
        v3 = objc_msgSend(v2, "standardUserDefaults"),
        v4 = objc_msgSend(v3, "isLineOcclusionEnabled"),
        v3,
        !v4)
    || (v6 = *(_QWORD *)MeasureCore.shared.unsafeMutableAddressor(v5),
        swift_beginAccess(v6 + 112, v53, 0, 0),
        (v7 = *(_QWORD *)(v6 + 112)) == 0))
  {
    v35 = *(void **)(v1 + OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbersMaterial);
    isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    v37 = String._bridgeToObjectiveC()();
    objc_msgSend(v35, "setValue:forKeyPath:", isa, v37);

    return;
  }
  v8 = *(void **)(v1 + OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbersMaterial);
  v9 = qword_10047AF18;
  swift_retain();
  if (v9 != -1)
    swift_once(&qword_10047AF18, sub_1001963D0);
  v10 = UIColor.rgba.getter();
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v51 = 0u;
  v52 = 0u;
  v50 = 0u;
  swift_beginAccess(v7 + 208, v49, 0, 0);
  if (!*(_QWORD *)(v7 + 208))
  {
    __break(1u);
    goto LABEL_14;
  }
  swift_retain();
  ADProcessor.transformer.getter(v17);
  v18 = swift_release();
  Transformer.clipToCameraNormalized.getter(v54, v18);
  v19 = swift_release();
  simd_float3x3.copy(from:)(v54, v19);
  *(_QWORD *)&v43 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1003B19E0, v50.f32[0]), (float32x4_t)xmmword_1003B19F0, *(float32x2_t *)v50.f32, 1), (float32x4_t)xmmword_1003B1A00, v50, 2).u64[0];
  *(_QWORD *)&v44 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1003B19E0, v51.f32[0]), (float32x4_t)xmmword_1003B19F0, *(float32x2_t *)v51.f32, 1), (float32x4_t)xmmword_1003B1A00, v51, 2).u64[0];
  *(_QWORD *)&v45 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1003B19E0, v52.f32[0]), (float32x4_t)xmmword_1003B19F0, *(float32x2_t *)v52.f32, 1), (float32x4_t)xmmword_1003B1A00, v52, 2).u64[0];
  v20 = objc_msgSend(v2, "standardUserDefaults");
  objc_msgSend(v20, "isLineOcclusionEnabled");

  v21 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v22 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setValue:forKeyPath:", v21, v22);

  SCNVector4.init(_:_:_:_:)(v10, v12, v14, v16);
  v23 = SCNVector4._bridgeToObjectiveC()().super.isa;
  v24 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setValue:forKeyPath:", v23, v24);

  v25 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v26 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setValue:forKeyPath:", v25, v26);

  SCNVector3.init(_:)(v43);
  v27 = SCNVector3._bridgeToObjectiveC()().super.isa;
  v28 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setValue:forKey:", v27, v28);

  SCNVector3.init(_:)(v44);
  v29 = SCNVector3._bridgeToObjectiveC()().super.isa;
  v30 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setValue:forKey:", v29, v30);

  SCNVector3.init(_:)(v45);
  v31 = SCNVector3._bridgeToObjectiveC()().super.isa;
  v32 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setValue:forKey:", v31, v32);

  v33 = *(_QWORD *)(v7 + 208);
  if (!v33)
  {
LABEL_14:
    __break(1u);
    return;
  }
  swift_beginAccess(v33 + 242, v48, 0, 0);
  if (*(_BYTE *)(v33 + 242) == 1)
  {
    swift_beginAccess(v33 + 256, v46, 0, 0);
    v34 = *(_QWORD *)(v33 + 256);
    swift_unknownObjectRetain(v34);
  }
  else
  {
    v38 = swift_retain();
    v34 = ADProcessor.outputDepthTexture.getter(v38);
    swift_release();
  }
  v47 = v34;
  swift_unknownObjectRetain_n(v34, 2);
  v39 = sub_10000EDC8((uint64_t *)&unk_10047F040);
  v40 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v47, v39);
  v41 = objc_msgSend((id)objc_opt_self(SCNMaterialProperty), "materialPropertyWithContents:", v40);
  swift_unknownObjectRelease(v34);
  swift_unknownObjectRelease(v40);
  v42 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setValue:forKey:", v41, v42);
  swift_unknownObjectRelease(v34);

  swift_release();
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_isOcclusionInitialized) = 1;
}

uint64_t type metadata accessor for LineDivisionsNumbers()
{
  return objc_opt_self(_TtC7Measure20LineDivisionsNumbers);
}

float sub_10007011C(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v13;

  *(double *)v8.i64 = simd_float4x4.position.getter(a5, a6, a7, a8);
  v13 = v8;
  *(double *)v9.i64 = simd_float4x4.position.getter(a1, a2, a3, a4);
  v10 = vsubq_f32(v13, v9);
  v11 = vmulq_f32(v10, v10);
  return sqrtf(v11.f32[2] + vaddv_f32(*(float32x2_t *)v11.f32));
}

uint64_t sub_10007017C(float a1)
{
  float v2;
  float v3;
  uint64_t result;

  if (qword_10047AC78 != -1)
    result = swift_once(&qword_10047AC78, sub_1001835CC);
  v2 = *(float *)&dword_1004AF79C;
  if (qword_10047AC70 != -1)
    result = swift_once(&qword_10047AC70, sub_10018357C);
  v3 = floorf((float)(a1 - *(float *)&dword_1004AF798) / v2);
  if ((~LODWORD(v3) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v3 <= -9.2234e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v3 < 9.2234e18)
    return (uint64_t)v3;
LABEL_11:
  __break(1u);
  return result;
}

double sub_100070244(int8x16_t a1, int8x16_t a2, __n128 a3)
{
  float v3;
  float v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  unsigned __int32 v19;
  float32x2_t v24;
  float v25;
  unsigned int v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;

  v3 = a3.n128_f32[2] + (float)(*(float *)a1.i32 + *(float *)&a2.i32[1]);
  if (v3 >= 0.0)
  {
    v12 = sqrtf(v3 + 1.0);
    v13 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v12 + v12));
    v14 = vmul_f32(v13, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v12 + v12), v13));
    v24 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL), (int32x2_t)a3.n128_u64[0]), (float32x2_t)vext_s8((int8x8_t)a3.n128_u64[0], (int8x8_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), 4uLL)), vmul_f32(v14, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v12 + v12), v14)).f32[0]);
  }
  else if (*(float *)a1.i32 < *(float *)&a2.i32[1] || *(float *)a1.i32 < a3.n128_f32[2])
  {
    v5 = 1.0 - *(float *)a1.i32;
    if (*(float *)&a2.i32[1] >= a3.n128_f32[2])
    {
      v25 = sqrtf(*(float *)&a2.i32[1] + (float)(v5 - a3.n128_f32[2]));
      *(float *)&v26 = v25 + v25;
      v27 = vrecpe_f32((float32x2_t)v26);
      v28 = vmul_f32(v27, vrecps_f32((float32x2_t)v26, v27));
      v29.i32[0] = vmul_f32(v28, vrecps_f32((float32x2_t)v26, v28)).u32[0];
      v28.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a1.i8, 1), *(float32x2_t *)a2.i8).u32[0];
      v28.i32[1] = v26;
      v29.i32[1] = 0.25;
      v24 = vmul_f32(v28, v29);
    }
    else
    {
      v6 = (float32x2_t)__PAIR64__(a1.u32[1], COERCE_UNSIGNED_INT(sqrtf(a3.n128_f32[2] + (float)(v5 - *(float *)&a2.i32[1]))));
      v7 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL)), (float32x2_t)a3.n128_u64[0]);
      v8 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2.i8, 0);
      v8.i32[0] = 2.0;
      v8.i32[0] = vmul_f32(v6, v8).u32[0];
      v9 = vrecpe_f32((float32x2_t)v8.u32[0]);
      v10 = vmul_f32(v9, vrecps_f32((float32x2_t)v8.u32[0], v9));
      v24 = vmul_n_f32(v7, vmul_f32(v10, vrecps_f32((float32x2_t)v8.u32[0], v10)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    v15 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2.i8, 0);
    v16 = vadd_f32(*(float32x2_t *)a1.i8, v15);
    v15.i32[0] = 2.0;
    v15.i32[0] = vmul_f32((float32x2_t)__PAIR64__(a1.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)a1.i32 + (float)((float)(1.0 - *(float *)&a2.i32[1])- a3.n128_f32[2])))), v15).u32[0];
    v15.i32[1] = v16.i32[1];
    v17 = vrecpe_f32((float32x2_t)v15.u32[0]);
    v18 = vmul_f32(v17, vrecps_f32((float32x2_t)v15.u32[0], v17));
    v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v15.u32[0], v18)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v19;
    v24 = vmul_f32(v15, _D5);
  }
  return *(double *)&v24;
}

void sub_100070428()
{
  _BYTE *v0;
  _BYTE *v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, __n128);
  __n128 v11;
  void *v12;
  _QWORD v13[4];

  v1 = v0;
  v2 = sub_100181ABC(8);
  v3 = objc_msgSend(v2, "copy");

  _bridgeAnyObjectToAny(_:)(v13, v3);
  swift_unknownObjectRelease(v3);
  v4 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
  if (swift_dynamicCast(&v12, v13, (char *)&type metadata for Any + 8, v4, 6))
    v5 = v12;
  else
    v5 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_divisionNumbersMaterial] = v5;
  v6 = OBJC_IVAR____TtC7Measure20LineDivisionsNumbers__orientationState;
  KeyPath = swift_getKeyPath(&unk_1003B3588);
  v8 = sub_10000EDC8((uint64_t *)&unk_10047EFD0);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v9 = qword_1004AF890;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v8 + 272);
  v11 = swift_retain();
  *(_QWORD *)&v1[v6] = v10(KeyPath, v9, v11);
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_state] = static MeasureObjectState.default;
  v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_shouldHide] = 1;
  v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_lastNumbersOrientation] = 2;
  v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_shouldRenderNumbers] = 0;
  v1[OBJC_IVAR____TtC7Measure20LineDivisionsNumbers_isOcclusionInitialized] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/LineDivisionsNumbers.swift", 34, 2, 111, 0);
  __break(1u);
}

uint64_t type metadata accessor for IntrinsicTableView()
{
  return objc_opt_self(_TtC7Measure18IntrinsicTableView);
}

__n128 initializeWithCopy for DeviceState(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 113))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DeviceState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 113) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DeviceState()
{
  return &type metadata for DeviceState;
}

BOOL sub_10007089C()
{
  uint64_t v0;
  float v1;
  float v3;
  void *v4;
  id v5;
  uint64_t v6;
  NSString v7;
  float v8;
  float v9;
  id v10;
  uint64_t v11;
  NSString v12;
  float v13;
  float v14;
  uint64_t v15;
  _BYTE v16[8];
  float v17;
  char v18;
  float v19;
  char v20;

  sub_100070BAC(v0 + 100, (uint64_t)v16);
  sub_100070BAC((uint64_t)v16, (uint64_t)&v17);
  if ((v18 & 1) != 0)
    return 0;
  v1 = v17;
  sub_100070BAC(v0 + 108, (uint64_t)&v15);
  sub_100070BAC((uint64_t)&v15, (uint64_t)&v19);
  if ((v20 & 1) != 0)
    return 0;
  v3 = v19;
  v4 = (void *)objc_opt_self(NSUserDefaults);
  v5 = objc_msgSend(v4, "standardUserDefaults");
  v6 = *(_QWORD *)(Defaults.maxDeviceAcceleration.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v6);
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "floatForKey:", v7, swift_bridgeObjectRelease(v6).n128_f64[0]);
  v9 = v8;

  if (v9 < v1)
    return 1;
  v10 = objc_msgSend(v4, "standardUserDefaults");
  v11 = *(_QWORD *)(Defaults.maxDeviceRotation.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v11);
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "floatForKey:", v12, swift_bridgeObjectRelease(v11).n128_f64[0]);
  v14 = v13;

  return v14 < v3;
}

id sub_100070A10()
{
  id result;
  id v1;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  result = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (*((_QWORD *)&xmmword_1004AF258 + 1))
  {
    v1 = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
    qword_1004AF220 = Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100070A74@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A8E8 != -1)
    swift_once(&qword_10047A8E8, sub_100070A10);
  v2 = (void *)qword_1004AF220;
  *a1 = qword_1004AF220;
  return v2;
}

uint64_t sub_100070AC4(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[7];
  char v13;
  _OWORD v14[7];
  char v15;

  v2 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v2;
  v12[6] = *(_OWORD *)(a1 + 96);
  v13 = *(_BYTE *)(a1 + 112);
  v3 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v4;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  v14[2] = a2[2];
  v14[3] = v7;
  v14[0] = v5;
  v14[1] = v6;
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v15 = *((_BYTE *)a2 + 112);
  v14[5] = v9;
  v14[6] = v10;
  v14[4] = v8;
  return sub_100070BF4((uint64_t)v12, (uint64_t)v14) & 1;
}

unint64_t sub_100070B44(uint64_t a1)
{
  unint64_t result;

  result = sub_100070B68();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100070B68()
{
  unint64_t result;

  result = qword_10047F0A0;
  if (!qword_10047F0A0)
  {
    result = swift_getWitnessTable(&unk_1003B35E0, &type metadata for DeviceState);
    atomic_store(result, (unint64_t *)&qword_10047F0A0);
  }
  return result;
}

uint64_t sub_100070BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8(&qword_10047F0A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100070BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  BOOL v6;
  float v8;
  float v9;
  char v10;
  __int128 v11;
  __int128 v12;

  v2 = *(unsigned __int8 *)(a2 + 64);
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 64))
      return v2;
  }
  else if ((v2 & 1) != 0
         || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 32), *(float32x4_t *)(a2 + 32)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 48), *(float32x4_t *)(a2 + 48))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 16), *(float32x4_t *)(a2 + 16)), (int8x16_t)vceqq_f32(*(float32x4_t *)a1, *(float32x4_t *)a2)))) & 0x80000000) == 0)
  {
    return 0;
  }
  v2 = *(unsigned __int8 *)(a2 + 72);
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 72))
      return v2;
  }
  else
  {
    if (*(float *)(a1 + 68) != *(float *)(a2 + 68))
      LOBYTE(v2) = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 96) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 96) & 1) == 0)
      return 0;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 96) & 1) != 0)
      return 0;
    v3 = 0;
    v4 = *(_OWORD *)(a1 + 80);
    v5 = *(_OWORD *)(a2 + 80);
    while (1)
    {
      v11 = v4;
      v8 = *(float *)((unint64_t)&v11 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
      v12 = v5;
      v9 = *(float *)((unint64_t)&v12 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
      v6 = v8 == v9;
      if (v3 == 2)
        break;
      while (1)
      {
        ++v3;
        if (v6)
          break;
        v6 = 0;
        v2 = 0;
        if (v3 == 2)
          return v2;
      }
    }
    if (v8 != v9)
      return 0;
  }
  v2 = *(unsigned __int8 *)(a2 + 104);
  if ((*(_BYTE *)(a1 + 104) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 104))
      return v2;
    goto LABEL_30;
  }
  if (*(float *)(a1 + 100) != *(float *)(a2 + 100))
    LOBYTE(v2) = 1;
  if ((v2 & 1) == 0)
  {
LABEL_30:
    v10 = *(_BYTE *)(a2 + 112);
    if ((*(_BYTE *)(a1 + 112) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 112) & 1) != 0)
        return 1;
    }
    else
    {
      if (*(float *)(a1 + 108) != *(float *)(a2 + 108))
        v10 = 1;
      if ((v10 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

id sub_100070DBC(char a1, uint64_t a2, char a3)
{
  void *v3;
  void *v4;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id result;
  uint64_t v17;
  Class isa;
  id v19;
  id v20;

  v4 = v3;
  v8 = (void *)objc_opt_self(UITraitCollection);
  v9 = objc_msgSend(v8, "_currentTraitCollection");
  if ((a1 & 1) == 0 && (a3 & 1) != 0 && UIAccessibilityIsInvertColorsEnabled())
  {
    v10 = objc_msgSend(v8, "traitCollectionWithUserInterfaceStyle:", 2);
    objc_msgSend(v8, "_setCurrentTraitCollection:", v10);
LABEL_10:

    v19 = objc_msgSend(v4, "CGColor");
    objc_msgSend(v8, "_setCurrentTraitCollection:", v9);
    v20 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v19);

    return v20;
  }
  if ((a1 & 1) != 0)
    v11 = 2;
  else
    v11 = 1;
  v12 = objc_msgSend(v8, "traitCollectionWithUserInterfaceStyle:", v11);
  v13 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v14 = swift_allocObject(v13, 48, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1003B1460;
  *(_QWORD *)(v14 + 32) = v12;
  v15 = v12;
  result = objc_msgSend(v8, "_traitCollectionWithBackgroundLevel:", a2);
  if (result)
  {
    *(_QWORD *)(v14 + 40) = result;
    specialized Array._endMutation()(result);
    v17 = v14;
    sub_100070FBC();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v17);
    v10 = objc_msgSend(v8, "traitCollectionWithTraitsFromCollections:", isa);

    objc_msgSend(v8, "_setCurrentTraitCollection:", v10);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

unint64_t sub_100070FBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047F0B0;
  if (!qword_10047F0B0)
  {
    v1 = objc_opt_self(UITraitCollection);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10047F0B0);
  }
  return result;
}

uint64_t sub_100070FF8(char *a1, char *a2)
{
  return sub_1000F3E80(*a1, *a2);
}

Swift::Int sub_100071004()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x72656E726F63;
  else
    v2 = 1701274725;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100071078(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x72656E726F63;
  else
    v2 = 1701274725;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000710C8()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x72656E726F63;
  else
    v2 = 1701274725;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100071138@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043BD38, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100071194(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1701274725;
  if (*v1)
    v2 = 0x72656E726F63;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1000711C8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, __n128 *a5, __n128 a6, double a7)
{
  uint64_t *v7;
  uint64_t *v8;
  double v11;
  uint64_t v15;
  float v16;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  double *v31;
  double v32;
  double v33;
  _QWORD *v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  char v39;
  char v40;
  __n128 v42;
  _QWORD v43[8];
  float v44;
  char v45;
  _OWORD v46[2];
  __int128 v47;
  _OWORD v48[3];
  _OWORD v49[2];
  __int128 v50;
  _BYTE v51[48];
  _OWORD v52[2];
  _BYTE v53[24];
  _OWORD v54[2];
  _BYTE v55[24];
  _BYTE v56[32];
  __n128 v57;
  char v58;
  _QWORD v59[2];
  char v60;
  _BYTE v61[16];
  char v62;

  v8 = v7;
  v11 = a6.n128_f64[0];
  v15 = *v7;
  a6.n128_u32[0] = *(_DWORD *)(*v7 + 184);
  v16 = a6.n128_f32[0] * a6.n128_f32[0];
  if (*(_BYTE *)(*v7 + 202) == 1 && *(_BYTE *)(v15 + 200) == 1)
  {
    sub_100012C58(a4, (uint64_t)v49, &qword_10047F0B8);
    if (v50 != 3)
    {
      *(_OWORD *)v51 = v49[0];
      *(_OWORD *)&v51[16] = v49[1];
      *(_OWORD *)&v51[32] = v50;
      v52[0] = *(_OWORD *)&v51[8];
      *(_OWORD *)((char *)v52 + 9) = *(_OWORD *)&v51[17];
      sub_100012C58((uint64_t)v52 + 8, (uint64_t)v53, &qword_10047F0C0);
      sub_100012C58((uint64_t)v53, (uint64_t)v61, &qword_10047F0C0);
      if (v62 != 2)
      {
        if ((v62 & 1) != 0)
        {
          swift_bridgeObjectRelease(0xE600000000000000);
        }
        else
        {
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)(1701274725, 0xE400000000000000, 0x72656E726F63, 0xE600000000000000, 0);
          a6 = swift_bridgeObjectRelease(0xE400000000000000);
          if ((v18 & 1) == 0)
            goto LABEL_16;
        }
        sub_100012C58((uint64_t)(v8 + 14), (uint64_t)v56, &qword_10047F0C8);
        sub_100012C58((uint64_t)v56, (uint64_t)&v57, &qword_10047F0C8);
        if (v58 != 2)
        {
          v42 = v57;
          if ((v58 & 1) != 0)
          {
            swift_bridgeObjectRelease(0xE600000000000000);
          }
          else
          {
            v19 = _stringCompareWithSmolCheck(_:_:expecting:)(1701274725, 0xE400000000000000, 0x72656E726F63, 0xE600000000000000, 0);
            a6 = swift_bridgeObjectRelease(0xE400000000000000);
            if ((v19 & 1) == 0)
              goto LABEL_16;
          }
          v20 = type metadata accessor for MeasureCamera(0);
          static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v20, v42, a5[11], a5[12], a5[13], a5[14], a5[2].n128_f64[0]);
          v22 = CGPoint.init(xy:)(v21);
          a6.n128_f32[0] = static CGPoint.distanceSq(_:_:)(v22, v23, v11, a7);
          if (a6.n128_f32[0] < v16)
            return *(_QWORD *)&v22;
        }
      }
    }
  }
LABEL_16:
  if (*(_BYTE *)(v15 + 200) != 1)
    goto LABEL_29;
  sub_100012C58(a4, (uint64_t)v46, &qword_10047F0B8);
  if (v47 == 3)
    goto LABEL_29;
  v48[0] = v46[0];
  v48[1] = v46[1];
  v48[2] = v47;
  v54[0] = *(_OWORD *)((char *)v48 + 8);
  *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)((char *)&v48[1] + 1);
  sub_100012C58((uint64_t)v54 + 8, (uint64_t)v55, &qword_10047F0C0);
  sub_100012C58((uint64_t)v55, (uint64_t)v59, &qword_10047F0C0);
  if (v60 == 2)
    goto LABEL_29;
  v25 = *(double *)v59;
  v26 = *(double *)&v59[1];
  if ((v60 & 1) != 0)
  {
    a6 = swift_bridgeObjectRelease(0xE600000000000000);
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(1701274725, 0xE400000000000000, 0x72656E726F63, 0xE600000000000000, 0);
    a6 = swift_bridgeObjectRelease(0xE400000000000000);
    if ((v27 & 1) == 0)
    {
LABEL_29:
      v34 = (*(_QWORD *(**)(_QWORD *__return_ptr, __n128))(*(_QWORD *)v8[13] + 144))(v43, a6);
      if ((v45 & 1) == 0 && *(float *)(v15 + 196) < v44)
        return 0;
      v35 = v8[12];
      v36 = (a3 & 1) != 0 ? v11 : *(double *)&a1;
      v37 = (a3 & 1) != 0 ? a7 : *(double *)&a2;
      __chkstk_darwin(v34);
      v38 = swift_bridgeObjectRetain(v35);
      v24 = sub_100072030(v38, (uint64_t (*)(void))sub_100071EF8, v36, v37);
      v40 = v39;
      swift_bridgeObjectRelease(v35);
      if ((v40 & 1) != 0)
        return 0;
      return v24;
    }
  }
  v28 = v8[12];
  v29 = *(_QWORD *)(v28 + 16);
  if (!v29)
    goto LABEL_29;
  v30 = *(float *)(v15 + 112) * *(float *)(v15 + 112);
  v31 = (double *)(v28 + 40);
  while (1)
  {
    v33 = *(v31 - 1);
    v32 = *v31;
    a6.n128_f32[0] = static CGPoint.distanceSq(_:_:)(v33, *v31, v25, v26);
    if (a6.n128_f32[0] < v30)
    {
      a6.n128_f32[0] = static CGPoint.distanceSq(_:_:)(v33, v32, v11, a7);
      if (a6.n128_f32[0] < v16)
        return *(_QWORD *)&v33;
    }
    v31 += 2;
    if (!--v29)
      goto LABEL_29;
  }
}

uint64_t sub_100071604(uint64_t a1, uint64_t a2, char a3, uint64_t a4, double a5, double a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v13;
  __n128 v14;
  char v15;
  uint64_t v16;
  char v17;
  double v18;
  double v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  double v28;
  double v29;
  int v30;
  uint64_t v31;
  char v32;
  char v33;
  _QWORD v35[3];
  __int128 v36;
  char v37;
  double v38;
  double v39;
  int v40;
  _QWORD v41[2];
  __int128 v42;
  _QWORD v43[8];
  float v44;
  char v45;
  _OWORD v46[2];
  __int128 v47;
  _BYTE v48[48];
  _OWORD v49[2];
  _BYTE v50[24];
  __int128 v51;
  char v52;

  v7 = v6;
  v13 = *v6;
  sub_100012C58(a4, (uint64_t)v46, &qword_10047F0B8);
  if (v47 != 3)
  {
    *(_OWORD *)v48 = v46[0];
    *(_OWORD *)&v48[16] = v46[1];
    *(_OWORD *)&v48[32] = v47;
    v49[0] = *(_OWORD *)&v48[8];
    *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)&v48[17];
    sub_100012C58((uint64_t)v49 + 8, (uint64_t)v50, &qword_10047F0C0);
    sub_100012C58((uint64_t)v50, (uint64_t)&v51, &qword_10047F0C0);
    if (v52 != 2)
    {
      v15 = v52 & 1;
      v42 = v51;
      if ((v52 & 1) == 0)
      {
        swift_bridgeObjectRelease(0xE400000000000000);
        goto LABEL_6;
      }
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72656E726F63, 0xE600000000000000, 1701274725, 0xE400000000000000, 0);
      v14 = swift_bridgeObjectRelease(0xE600000000000000);
      if ((v17 & 1) != 0)
      {
LABEL_6:
        v41[1] = v41;
        if ((a3 & 1) != 0)
          v18 = a5;
        else
          v18 = *(double *)&a1;
        if ((a3 & 1) != 0)
          v19 = a6;
        else
          v19 = *(double *)&a2;
        v20 = v7[9];
        __chkstk_darwin(v16);
        v35[2] = v7;
        v36 = v42;
        v37 = v15;
        v38 = a5;
        v39 = a6;
        v40 = v21;
        v22 = swift_bridgeObjectRetain(v20);
        v23 = sub_100072030(v22, (uint64_t (*)(void))sub_100072158, v18, v19);
        v25 = v24;
        v14 = swift_bridgeObjectRelease(v20);
        if ((v25 & 1) == 0)
          return v23;
      }
    }
  }
  v26 = (*(_QWORD *(**)(_QWORD *__return_ptr, __n128))(*(_QWORD *)v7[13] + 144))(v43, v14);
  if ((v45 & 1) == 0 && *(float *)(v13 + 196) < v44)
    return 0;
  v27 = v7[9];
  v28 = (a3 & 1) != 0 ? a5 : *(double *)&a1;
  v29 = (a3 & 1) != 0 ? a6 : *(double *)&a2;
  __chkstk_darwin(v26);
  *(double *)&v35[-4] = a5;
  *(double *)&v35[-3] = a6;
  LODWORD(v35[-2]) = v30;
  v31 = swift_bridgeObjectRetain(v27);
  v23 = sub_100072030(v31, (uint64_t (*)(void))sub_100071EF8, v28, v29);
  v33 = v32;
  swift_bridgeObjectRelease(v27);
  if ((v33 & 1) != 0)
    return 0;
  return v23;
}

BOOL sub_1000718A8(uint64_t *a1, double a2, double a3, double a4, double a5, double a6, double a7, float a8)
{
  uint64_t v13;

  v13 = *a1;
  return ((float (*)(void))static CGPoint.distanceSq(_:_:))() < (float)(*(float *)(v13 + 120) * *(float *)(v13 + 120))
      && static CGPoint.distanceSq(_:_:)(a2, a3, a6, a7) < a8;
}

float sub_100071928@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float result;
  char v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD v25[2];
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[56];

  sub_100012C58(a1, (uint64_t)&v38, &qword_10047F0B8);
  v10 = v38;
  v9 = v39;
  v11 = v41;
  v22 = v40;
  v12 = v42;
  v13 = v43;
  sub_100012C58(a1, (uint64_t)v44, &qword_10047F0B8);
  if (v44[32] == 3)
  {
    v14 = *v23;
    v15 = a2;
    if (*(_BYTE *)(*v23 + 201) == 1)
    {
      v16 = 0;
      v11 = 0;
      v13 = 0;
      v9 = *(_DWORD *)(v14 + 80);
      v10 = *(_QWORD *)(v14 + 88);
      v12 = 2;
    }
    else
    {
      v10 = 0;
      v16 = 0;
      v11 = 0;
      v13 = 0;
      v12 = 2;
      v9 = 1065353216;
    }
  }
  else
  {
    v15 = a2;
    v16 = v22;
  }
  v27 = v10;
  v28 = v9;
  v29 = v16;
  v30 = v11;
  v31 = v12;
  v32 = v13;
  v25[0] = v15;
  v25[1] = a3;
  v26 = a4;
  v17 = sub_10000EDC8(&qword_10047F0D0);
  OptionalSmoothedValue.updated(with:)(&v33, v25, v17);
  result = v34;
  v19 = v36;
  v20 = v37;
  v21 = v35;
  *(_QWORD *)a5 = v33;
  *(float *)(a5 + 8) = result;
  *(_OWORD *)(a5 + 16) = v21;
  *(_BYTE *)(a5 + 32) = v19;
  *(_QWORD *)(a5 + 40) = v20;
  return result;
}

uint64_t sub_100071A78(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a1 & 1;
  CGPoint.lerped<A>(newValue:t:)(a2, a4, a5);
  return v5;
}

uint64_t sub_100071AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = sub_100071A78(*(_BYTE *)(a1 + 16), a2, a3, a3, a4);
  *(_QWORD *)a5 = v7;
  *(_QWORD *)(a5 + 8) = v8;
  *(_BYTE *)(a5 + 16) = result & 1;
  return result;
}

uint64_t Corner.lerped<A>(newValue:t:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CGPoint.lerped<A>(newValue:t:)(a1, a2, a3);
}

uint64_t sub_100071B14@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;

  result = Corner.lerped<A>(newValue:t:)(a1, a2, a3);
  *(_QWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

uint64_t getEnumTagSinglePayload for EdgeDetectionPointInfo(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EdgeDetectionPointInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for EdgeDetectionPointInfo()
{
  return &type metadata for EdgeDetectionPointInfo;
}

uint64_t destroy for EdgeDetectionResults(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  swift_release(*(_QWORD *)(a1 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  return swift_release(*(_QWORD *)(a1 + 104));
}

uint64_t initializeWithCopy for EdgeDetectionResults(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;

  v3 = *a2;
  v4 = (void *)a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (void *)a2[2];
  v6 = (void *)a2[3];
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v8;
  v9 = a2[10];
  v10 = a2[11];
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v10;
  v11 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 104) = v12;
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  swift_retain(v3);
  v13 = v4;
  v14 = v5;
  v15 = v6;
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_retain(v12);
  return a1;
}

uint64_t *assignWithCopy for EdgeDetectionResults(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = (void *)a2[1];
  v7 = (void *)a1[1];
  a1[1] = (uint64_t)v6;
  v8 = v6;

  v9 = (void *)a2[2];
  v10 = (void *)a1[2];
  a1[2] = (uint64_t)v9;
  v11 = v9;

  v12 = (void *)a2[3];
  v13 = (void *)a1[3];
  a1[3] = (uint64_t)v12;
  v14 = v12;

  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v15 = a2[9];
  v16 = a1[9];
  a1[9] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a2[10];
  v18 = a1[10];
  a1[10] = v17;
  swift_retain(v17);
  swift_release(v18);
  v19 = a2[11];
  v20 = a1[11];
  a1[11] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = a2[12];
  v22 = a1[12];
  a1[12] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = a2[13];
  v24 = a1[13];
  a1[13] = v23;
  swift_retain(v23);
  swift_release(v24);
  v25 = *((_OWORD *)a2 + 7);
  *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
  *((_OWORD *)a1 + 7) = v25;
  return a1;
}

uint64_t assignWithTake for EdgeDetectionResults(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release(*(_QWORD *)a1);
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v7 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release(v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  v8 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release(v9);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

ValueMetadata *type metadata accessor for EdgeDetectionResults()
{
  return &type metadata for EdgeDetectionResults;
}

double *sub_100071EFC(double *result, uint64_t (*a2)(void))
{
  uint64_t v2;
  double *v4;
  unint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  __int128 v10;

  v4 = result;
  v5 = 0;
  v6 = *((_QWORD *)result + 2);
  while (1)
  {
    if (v6 == v5)
      goto LABEL_12;
    if (v5 >= *((_QWORD *)v4 + 2))
      break;
    v10 = *(_OWORD *)&v4[2 * v5 + 4];
    result = (double *)a2();
    if (v2)
    {
      swift_release();
LABEL_12:
      swift_bridgeObjectRelease(v4);
      return _swiftEmptyArrayStorage;
    }
    ++v5;
    if ((result & 1) != 0)
    {
      result = (double *)swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_1000A5628(0, *(_QWORD *)&_swiftEmptyArrayStorage[2] + 1, 1);
      v8 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      *(_QWORD *)&v9 = *(_QWORD *)&v8 + 1;
      if (*(_QWORD *)&v8 >= *(_QWORD *)&v7 >> 1)
      {
        result = sub_1000A5628((double *)(*(_QWORD *)&v7 > 1uLL), *(_QWORD *)&v8 + 1, 1);
        *(_QWORD *)&v9 = *(_QWORD *)&v8 + 1;
      }
      _swiftEmptyArrayStorage[2] = v9;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * *(_QWORD *)&v8 + 4] = v10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100072030(uint64_t a1, uint64_t (*a2)(void), double a3, double a4)
{
  double *v7;
  double *v8;
  double *v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  float v17;

  v7 = (double *)swift_bridgeObjectRetain(a1);
  v8 = sub_100071EFC(v7, a2);
  v9 = v8;
  v10 = *((_QWORD *)v8 + 2);
  if (v10)
  {
    v12 = v8[4];
    v11 = v8[5];
    v13 = v10 - 1;
    if (v10 != 1)
    {
      v14 = v8 + 7;
      do
      {
        v15 = *(v14 - 1);
        v16 = *v14;
        v17 = static CGPoint.distanceSq(_:_:)(v15, *v14, a3, a4);
        if (v17 < static CGPoint.distanceSq(_:_:)(v12, v11, a3, a4))
        {
          v12 = v15;
          v11 = v16;
        }
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    swift_bridgeObjectRelease(v9);
    return *(_QWORD *)&v12;
  }
  else
  {
    swift_bridgeObjectRelease(v8);
    return 0;
  }
}

BOOL sub_10007212C(double a1, double a2)
{
  uint64_t v2;
  float v3;

  v3 = *(float *)(v2 + 32);
  return static CGPoint.distanceSq(_:_:)(a1, a2, *(double *)(v2 + 16), *(double *)(v2 + 24)) < v3;
}

BOOL sub_100072158(double a1, double a2)
{
  uint64_t v2;

  return sub_1000718A8(*(uint64_t **)(v2 + 16), a1, a2, *(double *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + 48), *(double *)(v2 + 56), *(float *)(v2 + 64));
}

uint64_t getEnumTagSinglePayload for Tab(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EdgeDetectionPointType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10007224C + 4 * byte_1003B3635[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100072280 + 4 * byte_1003B3630[v4]))();
}

uint64_t sub_100072280(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100072288(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100072290);
  return result;
}

uint64_t sub_10007229C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000722A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000722A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000722B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000722BC(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for EdgeDetectionPointType()
{
  return &type metadata for EdgeDetectionPointType;
}

unint64_t sub_1000722DC()
{
  unint64_t result;

  result = qword_10047F0D8;
  if (!qword_10047F0D8)
  {
    result = swift_getWitnessTable(&unk_1003B3740, &type metadata for EdgeDetectionPointType);
    atomic_store(result, (unint64_t *)&qword_10047F0D8);
  }
  return result;
}

void sub_100072320(void *a1, CGFloat *a2)
{
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  id v12;
  id v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  CGPoint v21;
  unint64_t v22;
  unint64_t v23;
  id v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  int64_t v31;
  uint64_t v32;
  CGAffineTransform v33;
  double *v34;
  CGPoint v35;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  sub_100072C24(a1);
  if (!v9)
    return;
  v10 = v9;
  v34 = _swiftEmptyArrayStorage;
  v31 = v9 & ~(v9 >> 63);
  sub_1000A5628(0, v31, 0);
  v11 = _swiftEmptyArrayStorage;
  v12 = objc_msgSend(a1, "getContourCount");
  if (v12)
  {
    v13 = v12;
    v14 = 0;
    if (objc_msgSend(a1, "getPointCountAtContourIndex:", 0))
    {
LABEL_4:
      if (v10 < 0)
        goto LABEL_37;
      v15 = 0;
      goto LABEL_13;
    }
    if (v13 != (id)1)
    {
      v14 = 1;
      while (!objc_msgSend(a1, "getPointCountAtContourIndex:", v14))
      {
        v16 = v14 + 1;
        if (__OFADD__(v14, 1))
          goto LABEL_35;
        ++v14;
        if ((id)v16 == v13)
          goto LABEL_11;
      }
      goto LABEL_4;
    }
  }
LABEL_11:
  v17 = objc_msgSend(a1, "getContourCount");
  if ((v10 & 0x8000000000000000) == 0)
  {
    v14 = (uint64_t)v17;
    v15 = 1;
LABEL_13:
    v18 = 0;
    v19 = 0;
    v20 = v31;
    while (v18 != v20)
    {
      if ((v15 & 1) != 0)
        goto LABEL_39;
      objc_msgSend(a1, "getPointAtContourIndex:pointIndex:", v14, v19);
      v33.a = v3;
      v33.b = v4;
      v33.c = v5;
      v33.d = v6;
      v33.tx = v7;
      v33.ty = v8;
      v21 = CGPointApplyAffineTransform(v35, &v33);
      v34 = v11;
      v23 = *((_QWORD *)v11 + 2);
      v22 = *((_QWORD *)v11 + 3);
      if (v23 >= v22 >> 1)
      {
        sub_1000A5628((double *)(v22 > 1), v23 + 1, 1);
        v20 = v31;
        v11 = v34;
      }
      *((_QWORD *)v11 + 2) = v23 + 1;
      *(CGPoint *)&v11[2 * v23 + 4] = v21;
      if (__OFADD__(v19++, 1))
        goto LABEL_34;
      if (v19 == objc_msgSend(a1, "getPointCountAtContourIndex:", v14))
      {
        if (__OFADD__(v14, 1))
          goto LABEL_40;
        v32 = v14 + 1;
        if ((id)(v14 + 1) == objc_msgSend(a1, "getContourCount"))
        {
LABEL_29:
          v14 = (uint64_t)objc_msgSend(a1, "getContourCount");
          v19 = 0;
          v15 = 1;
        }
        else
        {
          sub_100073A18();
          sub_100073A54();
          while (1)
          {
            v25 = a1;
            v26 = sub_10012B744(&v33, &v32);
            v28 = *(_QWORD *)(v27 + 8);
            v29 = *(id *)v27;
            ((void (*)(CGAffineTransform *, _QWORD))v26)(&v33, 0);

            if (objc_msgSend(v29, "getPointCountAtContourIndex:", v28))
              break;

            v30 = (id)(v32 + 1);
            if (__OFADD__(v32, 1))
              goto LABEL_38;
            ++v32;
            if (v30 == objc_msgSend(v25, "getContourCount"))
              goto LABEL_29;
          }
          v14 = v32;

          v19 = 0;
          v15 = 0;
        }
        v20 = v31;
      }
      else
      {
        v15 = 0;
      }
      if (++v18 == v10)
        return;
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

__n128 sub_100072644@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v8;
  void *v9;
  int v10;
  double v11;
  double v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double *v38;
  int64x2_t v39;
  __int128 v40;
  char v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  CGFloat v52;
  CGFloat v53;
  double v54;
  double v55;
  uint64_t v56;
  CGFloat ty;
  CGFloat tx;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  CGFloat v62;
  CGFloat v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  CGFloat v67;
  CGFloat v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, __n128);
  __n128 v80;
  uint64_t v81;
  id v82;
  unint64_t v83;
  unint64_t v84;
  double *v85;
  __n128 result;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t KeyPath;
  unint64_t v95;
  void *v96;
  unint64_t v97;
  void *v98;
  char v99;
  uint64_t v100;
  double v101;
  void *v102;
  CGAffineTransform t1;
  __n128 v104;
  double *v105;
  CGAffineTransform v106;
  uint64_t v107;
  id v108;
  id v109;
  id v110;
  __int128 v111;
  __int128 v112;
  double v113;
  double *v114;
  uint64_t v115;
  int64x2_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char v120;
  _BYTE v121[144];
  uint64_t v122[18];
  CGAffineTransform t2;
  _BYTE v124[160];

  v4 = v3;
  sub_100012C58(a2, (uint64_t)v121, &qword_10047DB20);
  sub_100012C58((uint64_t)v121, (uint64_t)v124, &qword_10047DB20);
  v8 = *(void **)a1;
  v9 = (void *)objc_opt_self(OpenCVWrapper);
  v10 = objc_msgSend(v9, "calcHistogramMedianForImage:", v8);
  v11 = (double)v10 * 0.8;
  v12 = (double)v10 * 1.66;
  v13 = objc_msgSend(v8, "getSize");
  v15 = v14;
  v17 = v16;
  v18 = *(unsigned int *)(v3 + 176);
  v19 = (*(uint64_t (**)(id))(v3 + 160))(v13);
  v20 = (*(uint64_t (**)(double, double))(v3 + 144))(v15, v17);
  v21 = objc_msgSend(v9, "blurredImage:blurSize:", v8, *(unsigned int *)(v4 + 136));
  v22 = objc_msgSend(v9, "findCannyEdgesInImage:threshold1:threshold2:", v21, v11, v12);

  v23 = v22;
  v24 = objc_msgSend(v9, "findContoursInImage:", v22);
  objc_msgSend(v9, "filterContours:forMinEdgeLength:", v24, v20);
  v25 = objc_msgSend(v9, "findCornersAndFilterContours:forMaxEdgeTurns:forTurningPointMargin:", v24, v18, v19);
  v100 = a2;
  sub_100012C58(a2, (uint64_t)v122, &qword_10047DB20);
  v102 = v25;
  if (sub_1000127D0(v122) == 1)
  {
    KeyPath = swift_getKeyPath(&unk_1003B37C0);
    v26 = sub_10000EDC8((uint64_t *)&unk_10047E5D0);
    v27 = v24;
    v28 = qword_10047AD88;
    v98 = v23;
    v29 = v23;
    v96 = v27;
    v30 = v27;
    v31 = v25;
    swift_retain();
    if (v28 != -1)
      swift_once(&qword_10047AD88, sub_1001883CC);
    v32 = qword_1004AF890;
    v33 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v26 + 272);
    v34 = swift_retain();
    v35 = v33(KeyPath, v32, v34);
    swift_retain();
    v36 = 0;
    v37 = 0;
    v38 = _swiftEmptyArrayStorage;
    v39 = vdupq_n_s64((unint64_t)_swiftEmptyArrayStorage);
    v40 = 0uLL;
    v41 = 2;
    v42 = 1.0;
    v43 = v4;
    v44 = v4;
    v45 = 0uLL;
    v24 = v96;
    v23 = v98;
  }
  else
  {
    sub_100012C58((uint64_t)v124, (uint64_t)&v107, &qword_10047DB20);
    v36 = v118;
    v37 = v119;
    v41 = v120;
    v35 = v117;
    v39 = v116;
    v38 = v114;
    v44 = v115;
    v42 = v113;
    v40 = v111;
    v45 = v112;
    v30 = v109;
    v31 = v110;
    v43 = v107;
    v29 = v108;
  }
  v93 = v39.i64[0];
  v95 = v36;
  v97 = v37;
  v99 = v41;
  v107 = v43;
  v108 = v29;
  v109 = v30;
  v110 = v31;
  v111 = v40;
  v112 = v45;
  v113 = v42;
  v114 = v38;
  v115 = v44;
  v116 = v39;
  v117 = v35;
  v118 = v36;
  v119 = v37;
  v120 = v41;
  v46 = *(double *)(a1 + 24);
  v47 = *(double *)(a1 + 32);
  v48 = *(double *)(v4 + 128);
  sub_100073614(v100);
  v101 = v48;
  v49 = static CGSize.* infix(_:_:)(v46, v47, v48);
  v51 = v50;
  v52 = *(double *)(a1 + 40);
  v53 = *(double *)(a1 + 48);
  v54 = *(double *)(a1 + 56);
  v55 = *(double *)(a1 + 64);
  v56 = *(_QWORD *)(a1 + 88);
  CGAffineTransformMakeScale(&t1, 1.0 / v49, 1.0 / v50);
  v87 = *(_OWORD *)&t1.c;
  v90 = *(_OWORD *)&t1.a;
  tx = t1.tx;
  ty = t1.ty;
  ARCameraImageToViewTransform(&t1, v56, 0, v49, v51, v54, v55);
  v59 = *(_OWORD *)&t1.a;
  v60 = *(_OWORD *)&t1.c;
  v61 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v90;
  *(_OWORD *)&t1.c = v87;
  t1.tx = tx;
  t1.ty = ty;
  *(_OWORD *)&t2.a = v59;
  *(_OWORD *)&t2.c = v60;
  *(_OWORD *)&t2.tx = v61;
  CGAffineTransformConcat(&v106, &t1, &t2);
  v88 = *(_OWORD *)&v106.c;
  v91 = *(_OWORD *)&v106.a;
  v62 = v106.tx;
  v63 = v106.ty;
  CGAffineTransformMakeScale(&t1, v54, v55);
  v64 = *(_OWORD *)&t1.a;
  v65 = *(_OWORD *)&t1.c;
  v66 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v91;
  *(_OWORD *)&t1.c = v88;
  t1.tx = v62;
  t1.ty = v63;
  *(_OWORD *)&t2.a = v64;
  *(_OWORD *)&t2.c = v65;
  *(_OWORD *)&t2.tx = v66;
  CGAffineTransformConcat(&v106, &t1, &t2);
  v89 = *(_OWORD *)&v106.c;
  v92 = *(_OWORD *)&v106.a;
  v67 = v106.tx;
  v68 = v106.ty;
  CGAffineTransformMakeTranslation(&t1, v52, v53);
  v69 = *(_OWORD *)&t1.a;
  v70 = *(_OWORD *)&t1.c;
  v71 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v92;
  *(_OWORD *)&t1.c = v89;
  t1.tx = v67;
  t1.ty = v68;
  *(_OWORD *)&t2.a = v69;
  *(_OWORD *)&t2.c = v70;
  *(_OWORD *)&t2.tx = v71;
  CGAffineTransformConcat(&v106, &t1, &t2);
  t2 = v106;
  v72 = swift_getKeyPath(&unk_1003B37C0);
  v73 = sub_10000EDC8((uint64_t *)&unk_10047E5D0);
  v74 = qword_10047AD88;
  v75 = v23;
  v76 = v24;
  v77 = v102;
  swift_retain();
  if (v74 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v78 = qword_1004AF890;
  v79 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v73 + 272);
  v80 = swift_retain();
  v81 = v79(v72, v78, v80);
  v104.n128_u64[0] = v43;
  v104.n128_u64[1] = (unint64_t)_swiftEmptyArrayStorage;
  v105 = _swiftEmptyArrayStorage;
  v82 = v76;
  swift_retain();
  sub_100072320(v82, &t2.a);
  v84 = v83;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);

  sub_1000439AC(v93, v77, (__int128 *)&t2);
  sub_10007398C(&v107);

  v85 = v105;
  result = v104;
  a3->n128_u64[0] = v43;
  a3->n128_u64[1] = (unint64_t)v75;
  a3[1].n128_u64[0] = (unint64_t)v82;
  a3[1].n128_u64[1] = (unint64_t)v77;
  a3[2].n128_f64[0] = v52;
  a3[2].n128_f64[1] = v53;
  a3[3].n128_f64[0] = v54;
  a3[3].n128_f64[1] = v55;
  a3[4].n128_f64[0] = v101;
  a3[4].n128_u64[1] = v84;
  a3[5] = result;
  a3[6].n128_u64[0] = (unint64_t)v85;
  a3[6].n128_u64[1] = v81;
  a3[7].n128_u64[0] = v95;
  a3[7].n128_u64[1] = v97;
  a3[8].n128_u8[0] = v99;
  return result;
}

void sub_100072C24(void *a1)
{
  id v2;
  id v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = objc_msgSend(a1, "getContourCount");
  if (!v2)
    goto LABEL_9;
  v3 = v2;
  if (objc_msgSend(a1, "getPointCountAtContourIndex:", 0))
  {
    v4 = 0;
    v5 = 0;
LABEL_10:
    sub_100073674(v5, 0, v4, (uint64_t)objc_msgSend(a1, "getContourCount"), 0, 1, a1);
    return;
  }
  if (v3 == (id)1)
  {
LABEL_9:
    v5 = (uint64_t)objc_msgSend(a1, "getContourCount");
    v4 = 1;
    goto LABEL_10;
  }
  v5 = 1;
  while (1)
  {
    if (objc_msgSend(a1, "getPointCountAtContourIndex:", v5))
    {
      v4 = 0;
      goto LABEL_10;
    }
    v6 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    ++v5;
    if ((id)v6 == v3)
      goto LABEL_9;
  }
  __break(1u);
}

uint64_t sub_100072D04(double a1, double a2)
{
  if (a2 > a1)
    a1 = a2;
  if (a1 == 40.0)
    return 30;
  if (a1 == 49.0)
    return 45;
  if (a1 == 59.0)
    return 55;
  return 75;
}

uint64_t sub_100072D60(double a1, double a2)
{
  if (a2 > a1)
    a1 = a2;
  if (a1 == 49.0 || a1 == 40.0)
    return 17;
  else
    return 20;
}

uint64_t sub_100072D94()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[6];
  _OWORD v8[2];

  v1 = v0;
  v2 = (_OWORD *)(v0 + 24);
  swift_beginAccess(v2, v7, 33, 0);
  if ((*(_BYTE *)(v1 + 56) & 1) == 0)
    vImage_Buffer.deallocate()();
  *v2 = 0u;
  v2[1] = 0u;
  *(_BYTE *)(v1 + 56) = 1;
  swift_endAccess(v7);
  sub_1000217BC(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
  v3 = *(_OWORD *)(v1 + 160);
  v7[4] = *(_OWORD *)(v1 + 144);
  v7[5] = v3;
  v8[0] = *(_OWORD *)(v1 + 176);
  *(_OWORD *)((char *)v8 + 11) = *(_OWORD *)(v1 + 187);
  v4 = *(_OWORD *)(v1 + 96);
  v7[0] = *(_OWORD *)(v1 + 80);
  v7[1] = v4;
  v5 = *(_OWORD *)(v1 + 128);
  v7[2] = *(_OWORD *)(v1 + 112);
  v7[3] = v5;
  sub_100073B14((uint64_t)v7);
  return swift_deallocClassInstance(v1, 203, 7);
}

uint64_t type metadata accessor for EdgeDetector()
{
  return objc_opt_self(_TtC7Measure12EdgeDetector);
}

uint64_t destroy for EdgeDetector.Parameters(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 72));
  return swift_release(*(_QWORD *)(a1 + 88));
}

uint64_t initializeWithCopy for EdgeDetector.Parameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v3 = *(_QWORD *)(a2 + 88);
  v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 88) = v3;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_WORD *)(a1 + 121) = *(_WORD *)(a2 + 121);
  swift_retain(v4);
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for EdgeDetector.Parameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 88);
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  return a1;
}

__n128 initializeWithTake for EdgeDetector.Parameters(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 107) = *(__int128 *)((char *)a2 + 107);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for EdgeDetector.Parameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release(v6);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 100) = *(_OWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  return a1;
}

uint64_t getEnumTagSinglePayload for EdgeDetector.Parameters(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 123))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EdgeDetector.Parameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 122) = 0;
    *(_WORD *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 123) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 123) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EdgeDetector.Parameters()
{
  return &type metadata for EdgeDetector.Parameters;
}

void sub_10007319C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>, double a8@<D4>, double a9@<D5>)
{
  uint64_t v9;
  __CVBuffer *v15;
  int64_t WidthOfPlane;
  double HeightOfPlane;
  CGFloat tx;
  CGFloat ty;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  CGFloat v23;
  CGFloat v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  CGFloat c;
  CGFloat v29;
  CGFloat v30;
  CGPoint v31;
  CGFloat MidX;
  double v33;
  double v34;
  double v35;
  CGPoint v36;
  double v37;
  double v38;
  double v39;
  double v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  float v48;
  Swift::String v49;
  id v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  double v55;
  double v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  double v62;
  double v63;
  double v64;
  CGFloat a;
  CGFloat d;
  CGFloat v67;
  CGFloat b;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v76[24];
  _BYTE v77[24];
  CGAffineTransform v78;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _QWORD v81[5];
  _QWORD v82[6];
  CGPoint v83;
  CGPoint v84;
  CGPoint v85;
  CGRect v86;
  CGRect v87;

  v15 = (__CVBuffer *)objc_msgSend(a1, "capturedImage");
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(v15, 0);
  HeightOfPlane = (double)(uint64_t)CVPixelBufferGetHeightOfPlane(v15, 0);
  CGAffineTransformMakeScale(&t1, 1.0 / a8, 1.0 / a9);
  v69 = *(_OWORD *)&t1.c;
  v71 = *(_OWORD *)&t1.a;
  tx = t1.tx;
  ty = t1.ty;
  v63 = a8;
  v64 = a9;
  ARViewToCameraImageTransform(&t1, a2, 0, a8, a9, (double)WidthOfPlane, HeightOfPlane);
  v20 = *(_OWORD *)&t1.a;
  v21 = *(_OWORD *)&t1.c;
  v22 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v71;
  *(_OWORD *)&t1.c = v69;
  t1.tx = tx;
  t1.ty = ty;
  *(_OWORD *)&t2.a = v20;
  *(_OWORD *)&t2.c = v21;
  *(_OWORD *)&t2.tx = v22;
  CGAffineTransformConcat(&v78, &t1, &t2);
  v70 = *(_OWORD *)&v78.c;
  v72 = *(_OWORD *)&v78.a;
  v23 = v78.tx;
  v24 = v78.ty;
  CGAffineTransformMakeScale(&t1, (double)WidthOfPlane, HeightOfPlane);
  v25 = *(_OWORD *)&t1.a;
  v26 = *(_OWORD *)&t1.c;
  v27 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v72;
  *(_OWORD *)&t1.c = v70;
  t1.tx = v23;
  t1.ty = v24;
  *(_OWORD *)&t2.a = v25;
  *(_OWORD *)&t2.c = v26;
  *(_OWORD *)&t2.tx = v27;
  CGAffineTransformConcat(&v78, &t1, &t2);
  c = v78.c;
  a = v78.a;
  d = v78.d;
  v29 = v78.tx;
  v67 = v78.ty;
  b = v78.b;
  t1 = v78;
  v30 = v78.b;
  v83.x = a4;
  v83.y = a5;
  v31 = CGPointApplyAffineTransform(v83, &t1);
  v86.origin.x = a4;
  v86.origin.y = a5;
  v86.size.width = a6;
  v86.size.height = a7;
  MidX = CGRectGetMidX(v86);
  v87.origin.x = a4;
  v87.origin.y = a5;
  v87.size.width = a6;
  v87.size.height = a7;
  v84.y = CGRectGetMidY(v87);
  t1.a = a;
  t1.b = v30;
  t1.c = c;
  t1.d = d;
  t1.tx = v29;
  t1.ty = v67;
  v84.x = MidX;
  *(_QWORD *)&v33 = *(_OWORD *)&CGPointApplyAffineTransform(v84, &t1);
  v34 = CGPoint.init(_:)(a6, a7);
  v85.x = static CGPoint.+ infix(_:_:)(a4, a5, v34, v35);
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = v29;
  t1.ty = v67;
  v36 = CGPointApplyAffineTransform(v85, &t1);
  v37 = vabdd_f64(v36.x, v31.x);
  v38 = vabdd_f64(v36.y, v31.y);
  v39 = static CGSize.* infix(_:_:)(v37, v38, 0.5);
  CGPoint.init(_:)(v39, v40);
  v41 = static CGPoint.- infix(_:_:)(v33);
  v43 = v42;
  t1.a = v41;
  t1.b = v42;
  t1.c = v37;
  t1.d = v38;
  LOBYTE(t1.tx) = 0;
  static vImage_Buffer.wrap(pixelBuffer:planeIndex:srcRect:)(v81, v15, 0, &t1);
  sub_100012C58((uint64_t)v81, (uint64_t)&v78, &qword_10047BDC8);
  if ((LOBYTE(v78.tx) & 1) == 0)
  {
    v44 = v78.a;
    v45 = v78.b;
    v46 = v78.c;
    v47 = v78.d;
    swift_beginAccess(v9 + 24, v76, 1, 0);
    sub_100012C58(v9 + 24, (uint64_t)&t2, &qword_10047BDC8);
    v48 = *(double *)(v9 + 128);
    static vImage_Buffer.scalePlanar8(srcImageBuffer:dstImageBuffer:scaleFactor:flags:tempBuffer:)(v82, *(_QWORD *)&v44, *(_QWORD *)&v45, *(_QWORD *)&v46, *(_QWORD *)&v47, &t2, 0, 0, v48);
    sub_100012C58((uint64_t)v82, v9 + 24, &qword_10047BDC8);
  }
  swift_beginAccess(v9 + 24, v77, 0, 0);
  if ((*(_BYTE *)(v9 + 56) & 1) != 0)
  {
    if (qword_10047AAA0 != -1)
      swift_once(&qword_10047AAA0, sub_1000E16EC);
    v49._object = (void *)0x80000001003DBC20;
    v49._countAndFlagsBits = 0xD000000000000029;
    Log.error(_:isPrivate:)(v49, 0);

    v50 = 0;
    a2 = 0;
    v41 = 0.0;
    v43 = 0.0;
    v37 = 0.0;
    v38 = 0.0;
    v51 = 0.0;
    v52 = 0.0;
    v53 = 0.0;
    v54 = 0.0;
    v55 = 0.0;
    v56 = 0.0;
    goto LABEL_10;
  }
  v57 = *(_QWORD *)(v9 + 32);
  v58 = *(_QWORD *)(v9 + 40);
  if ((v58 | v57) >> 31)
  {
    __break(1u);
  }
  else
  {
    v59 = *(_QWORD *)(v9 + 24);
    if (v59)
    {
      v60 = *(_QWORD *)(v9 + 48);
      v61 = objc_allocWithZone((Class)OpenCVWrapperImage);
      LODWORD(v62) = 1.0;
      v50 = objc_msgSend(v61, "initWithWidth:height:pixelFormat:pixelData:bytesPerRow:scaleFactor:", v58, v57, 0, v59, v60, v62);

      v55 = v63;
      v56 = v64;
      v53 = a6;
      v54 = a7;
      v51 = a4;
      v52 = a5;
LABEL_10:
      *(_QWORD *)a3 = v50;
      *(CGFloat *)(a3 + 8) = v41;
      *(CGFloat *)(a3 + 16) = v43;
      *(double *)(a3 + 24) = v37;
      *(double *)(a3 + 32) = v38;
      *(CGFloat *)(a3 + 40) = v51;
      *(CGFloat *)(a3 + 48) = v52;
      *(CGFloat *)(a3 + 56) = v53;
      *(CGFloat *)(a3 + 64) = v54;
      *(double *)(a3 + 72) = v55;
      *(double *)(a3 + 80) = v56;
      *(_QWORD *)(a3 + 88) = a2;
      return;
    }
  }
  __break(1u);
}

uint64_t sub_100073614(uint64_t a1)
{
  sub_1000476AC(*(_QWORD *)a1, *(void **)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  return a1;
}

void sub_100073674(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, void *a7)
{
  id v7;
  uint64_t v11;
  uint64_t v13;
  id v14;
  int64_t v15;
  id v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  id v24;
  id v25;
  BOOL v26;
  char *v27;
  int64_t v28;
  id v29;
  int64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  char v38;
  char v39;

  v7 = a7;
  v11 = a2;
  if (a4 == a1)
  {
    if ((a6 & 1) == 0)
    {
      if ((a3 & 1) != 0)
      {
LABEL_60:
        __break(1u);
        return;
      }
      if (a5 >= a2)
        goto LABEL_13;
LABEL_9:
      v13 = a5;
      v14 = a7;
      v15 = (int64_t)objc_msgSend(v14, "getContourCount");
      v16 = objc_msgSend(v14, "getContourCount");
      if (v15 < 0 || (uint64_t)v16 < v15)
      {
LABEL_50:
        __break(1u);
      }
      else
      {
        v17 = (unint64_t)objc_msgSend(v14, "getContourCount");

        if ((v17 & 0x8000000000000000) == 0)
        {
          a5 = v13;
          if (a4 != a1)
            goto LABEL_15;
LABEL_13:
          if (((a3 | a6) & 1) != 0)
            return;
LABEL_42:
          v33 = a5;
          v34 = v7;
          v35 = objc_msgSend(v34, "getPointCountAtContourIndex:", a1);
          if ((v11 & 0x8000000000000000) == 0 && (uint64_t)v35 >= v11)
          {
            v36 = objc_msgSend(v34, "getPointCountAtContourIndex:", a1);

            if ((v33 & 0x8000000000000000) == 0 && (uint64_t)v36 >= v33)
              return;
            goto LABEL_59;
          }
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
      }
      __break(1u);
      goto LABEL_52;
    }
    if ((a3 & 1) != 0)
      return;
    __break(1u);
  }
  if (a4 < a1)
    goto LABEL_9;
LABEL_15:
  if (a4 >= a1)
  {
    v37 = a5;
    v18 = a6 & 1;
    v19 = a4;
    v20 = a1;
    v21 = v11;
    if ((a3 & 1) == 0)
      goto LABEL_17;
  }
  else
  {
    v18 = a3 & 1;
    v19 = a1;
    v20 = a4;
    v21 = a5;
    v37 = v11;
    if ((a6 & 1) == 0)
    {
LABEL_17:
      v38 = v18;
      v22 = v7;
      v23 = (int64_t)objc_msgSend(v22, "getPointCountAtContourIndex:", v20);
      v24 = objc_msgSend(v22, "getPointCountAtContourIndex:", v20);
      if ((v21 & 0x8000000000000000) == 0 && (uint64_t)v24 >= v21)
      {
        v25 = objc_msgSend(v22, "getPointCountAtContourIndex:", v20);

        if ((v23 & 0x8000000000000000) == 0 && (uint64_t)v25 >= v23)
        {
          v26 = __OFADD__(v20++, 1);
          v18 = v38;
          if (!v26)
          {
            v27 = (char *)(v23 - v21);
            v28 = v23 - v21;
            if (v20 >= v19)
              goto LABEL_23;
LABEL_27:
            v39 = v18;
            v28 = (int64_t)v27;
            do
            {
              v29 = v7;
              v30 = (int64_t)objc_msgSend(v29, "getPointCountAtContourIndex:", v20);
              if (((unint64_t)objc_msgSend(v29, "getPointCountAtContourIndex:", v20) & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_48:
                __break(1u);
LABEL_49:
                __break(1u);
                goto LABEL_50;
              }
              v31 = objc_msgSend(v29, "getPointCountAtContourIndex:", v20);

              if (v30 < 0 || (uint64_t)v31 < v30)
                goto LABEL_48;
              v26 = __OFADD__(v28, v30);
              v28 += v30;
              if (v26)
                goto LABEL_49;
              ++v20;
            }
            while (v20 < v19);
            if ((v39 & 1) != 0)
              goto LABEL_38;
            goto LABEL_34;
          }
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
  }
  v27 = 0;
  v28 = 0;
  if (v20 < v19)
    goto LABEL_27;
LABEL_23:
  if ((v18 & 1) != 0)
    goto LABEL_38;
LABEL_34:
  v7 = v7;
  if (((unint64_t)objc_msgSend(v7, "getPointCountAtContourIndex:", v20) & 0x8000000000000000) != 0)
  {
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v32 = objc_msgSend(v7, "getPointCountAtContourIndex:", v20);

  if (v37 < 0 || (uint64_t)v32 < v37)
    goto LABEL_56;
  v26 = __OFADD__(v28, v37);
  v28 += v37;
  if (v26)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
LABEL_38:
  if (a4 < a1)
  {
    v26 = __OFSUB__(0, v28);
    v11 = -v28;
    if (v26)
    {
      __break(1u);
      goto LABEL_42;
    }
  }
}

uint64_t *sub_10007398C(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = (void *)a1[1];
  v4 = (void *)a1[2];
  v5 = (void *)a1[3];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[11];
  v9 = a1[12];
  swift_release(a1[13]);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_release(v7);
  swift_bridgeObjectRelease(v6);

  swift_release(v2);
  return a1;
}

unint64_t sub_100073A18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047F198;
  if (!qword_10047F198)
  {
    v1 = objc_opt_self(OpenCVWrapperContours);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10047F198);
  }
  return result;
}

unint64_t sub_100073A54()
{
  unint64_t result;
  unint64_t v1;

  result = qword_10047F1A0;
  if (!qword_10047F1A0)
  {
    v1 = sub_100073A18();
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenCVWrapperContours, v1);
    atomic_store(result, (unint64_t *)&qword_10047F1A0);
  }
  return result;
}

double sub_100073A9C(double a1, double a2, double a3, double a4, double a5)
{
  return fmax(a1 - a3 * 0.00137174211 * a5, 0.0);
}

uint64_t sub_100073B14(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 72);
  swift_release(*(_QWORD *)(a1 + 88));
  swift_release(v2);
  return a1;
}

uint64_t initializeWithCopy for PreparedEdgeDetectionFrame(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for PreparedEdgeDetectionFrame(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

__n128 initializeWithTake for PreparedEdgeDetectionFrame(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for PreparedEdgeDetectionFrame(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for PreparedEdgeDetectionFrame(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PreparedEdgeDetectionFrame(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PreparedEdgeDetectionFrame()
{
  return &type metadata for PreparedEdgeDetectionFrame;
}

void sub_100073D6C(char a1)
{
  void *v1;
  float v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[6];

  if ((a1 & 1) != 0)
    v2 = 1.0;
  else
    v2 = 0.5;
  v3 = swift_allocObject(&unk_1004420B0, 28, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(float *)(v3 + 24) = v2;
  v4 = objc_allocWithZone((Class)UIViewPropertyAnimator);
  v8[4] = sub_100074424;
  v8[5] = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10003ECA0;
  v8[3] = &unk_1004420C8;
  v5 = _Block_copy(v8);
  v6 = v1;
  swift_release();
  v7 = objc_msgSend(v4, "initWithDuration:dampingRatio:animations:", v5, 0.5, 0.6);
  _Block_release(v5);
  objc_msgSend(v7, "setInterruptible:", 0);
  objc_msgSend(v7, "startAnimation");

}

id sub_100073F44(void *a1, uint64_t a2, SEL *a3)
{
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for AnimatingUIControl();
  return objc_msgSendSuper2(&v5, *a3);
}

id sub_100073FC0(char a1)
{
  void *v1;
  int v3;
  id result;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  objc_super v12;
  void **aBlock;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  id (*v17)();
  uint64_t v18;

  v3 = a1 & 1;
  result = objc_msgSend(v1, "isHighlighted");
  if ((_DWORD)result != v3)
  {
    if ((a1 & 1) != 0)
    {
      if (!objc_msgSend(v1, "isEnabled"))
      {
LABEL_7:
        v12.receiver = v1;
        v12.super_class = (Class)type metadata accessor for AnimatingUIControl();
        return objc_msgSendSuper2(&v12, "setHighlighted:", a1 & 1);
      }
      v5 = swift_allocObject(&unk_100442060, 32, 7);
      *(_QWORD *)(v5 + 16) = v1;
      *(_QWORD *)(v5 + 24) = 0x3FECCCCCCCCCCCCDLL;
      v6 = objc_allocWithZone((Class)UIViewPropertyAnimator);
      v17 = sub_10007443C;
      v18 = v5;
      aBlock = _NSConcreteStackBlock;
      v14 = 1107296256;
      v7 = &unk_100442078;
    }
    else
    {
      v8 = swift_allocObject(&unk_100442010, 32, 7);
      *(_QWORD *)(v8 + 16) = v1;
      *(_QWORD *)(v8 + 24) = 0x3FF0000000000000;
      v6 = objc_allocWithZone((Class)UIViewPropertyAnimator);
      v17 = sub_1000743DC;
      v18 = v8;
      aBlock = _NSConcreteStackBlock;
      v14 = 1107296256;
      v7 = &unk_100442028;
    }
    v15 = sub_10003ECA0;
    v16 = v7;
    v9 = _Block_copy(&aBlock);
    v10 = v1;
    swift_release();
    v11 = objc_msgSend(v6, "initWithDuration:dampingRatio:animations:", v9, 0.5, 1.0);
    _Block_release(v9);
    objc_msgSend(v11, "setInterruptible:", 0);
    objc_msgSend(v11, "startAnimation");

    goto LABEL_7;
  }
  return result;
}

id sub_100074188(void *a1, CGFloat a2)
{
  CGFloat tx;
  CGFloat ty;
  long double v6;
  CGFloat v7;
  CGFloat v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CGFloat v12;
  CGFloat v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  CGAffineTransform v22;
  CGAffineTransform t2;
  CGAffineTransform t1;

  objc_msgSend(a1, "transform");
  tx = t1.tx;
  ty = t1.ty;
  v6 = atan2(t1.b, t1.a);
  CGAffineTransformMakeScale(&t1, a2, a2);
  v18 = *(_OWORD *)&t1.c;
  v20 = *(_OWORD *)&t1.a;
  v7 = t1.tx;
  v8 = t1.ty;
  CGAffineTransformMakeRotation(&t1, v6);
  v9 = *(_OWORD *)&t1.a;
  v10 = *(_OWORD *)&t1.c;
  v11 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v20;
  *(_OWORD *)&t1.c = v18;
  t1.tx = v7;
  t1.ty = v8;
  *(_OWORD *)&t2.a = v9;
  *(_OWORD *)&t2.c = v10;
  *(_OWORD *)&t2.tx = v11;
  CGAffineTransformConcat(&v22, &t1, &t2);
  v19 = *(_OWORD *)&v22.c;
  v21 = *(_OWORD *)&v22.a;
  v12 = v22.tx;
  v13 = v22.ty;
  CGAffineTransformMakeTranslation(&t1, tx, ty);
  v14 = *(_OWORD *)&t1.a;
  v15 = *(_OWORD *)&t1.c;
  v16 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v21;
  *(_OWORD *)&t1.c = v19;
  t1.tx = v12;
  t1.ty = v13;
  *(_OWORD *)&t2.a = v14;
  *(_OWORD *)&t2.c = v15;
  *(_OWORD *)&t2.tx = v16;
  CGAffineTransformConcat(&v22, &t1, &t2);
  t1 = v22;
  return objc_msgSend(a1, "setTransform:", &t1);
}

id sub_100074368()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnimatingUIControl();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AnimatingUIControl()
{
  return objc_opt_self(_TtC7Measure18AnimatingUIControl);
}

uint64_t sub_1000743B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000743DC()
{
  uint64_t v0;

  return sub_100074188(*(void **)(v0 + 16), *(CGFloat *)(v0 + 24));
}

uint64_t sub_1000743E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000743F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100074400()
{
  uint64_t v0;

  return swift_deallocObject(v0, 28, 7);
}

id sub_100074424()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setAlpha:", *(float *)(v0 + 24));
}

uint64_t destroy for DefaultGroup(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s7Measure12DefaultGroupVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for DefaultGroup(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for DefaultGroup(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultGroup(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultGroup()
{
  return &type metadata for DefaultGroup;
}

uint64_t destroy for MeasurementStringDetails(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for Default(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for Default(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  return a1;
}

__n128 initializeWithCopy for PointMoveState(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Default(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Default(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Default(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Default()
{
  return &type metadata for Default;
}

uint64_t sub_1000747F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 8);
  if (*((_BYTE *)a1 + 8) == 1)
  {
    v5 = v3 == 0;
    if (v3)
      v6 = 0;
    else
      v6 = *((unsigned __int8 *)a2 + 8);
    if (v5)
      v4 = 0;
    if (v2)
      return v4;
    else
      return v6;
  }
  else
  {
    return (v4 & 1) == 0 && *(float *)&v2 == *(float *)&v3 && *((float *)&v2 + 1) == *((float *)&v3 + 1);
  }
}

uint64_t sub_100074860(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 25);
  return sub_100074ED0((uint64_t *)&v5, &v7) & 1;
}

uint64_t sub_1000748A8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a2[1];
  v6 = a2[2];
  if (v3)
  {
    if (v5)
    {
      v7 = *a1;
      v8 = v7 == *a2 && v3 == v5;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v3, *a2, v5, 0) & 1) != 0)
        return sub_100074D7C(v4, v6);
    }
  }
  else if (!v5)
  {
    return sub_100074D7C(v4, v6);
  }
  return 0;
}

uint64_t sub_100074910(uint64_t a1, uint64_t a2)
{
  return sub_100074928(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for MeasureObject);
}

uint64_t sub_10007491C(uint64_t a1, uint64_t a2)
{
  return sub_100074928(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for WorldLineGuide);
}

uint64_t sub_100074928(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  unint64_t v3;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  id v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t i;
  id v21;
  void *v22;
  char v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v7 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = (unint64_t)a2 >> 62;
    if (!((unint64_t)a2 >> 62))
      goto LABEL_3;
LABEL_38:
    if (a2 < 0)
      v27 = a2;
    else
      v27 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v10 = (void *)_CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(a2);
    if ((void *)v8 == v10)
      goto LABEL_4;
    return 0;
  }
  if (a1 < 0)
    v26 = a1;
  else
    v26 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v8 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(a1);
  v9 = (unint64_t)a2 >> 62;
  if ((unint64_t)a2 >> 62)
    goto LABEL_38;
LABEL_3:
  v10 = *(void **)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if ((void *)v8 != v10)
    return 0;
LABEL_4:
  if (!v8)
    return 1;
  v11 = a1 & 0xFFFFFFFFFFFFFF8;
  v12 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0)
    v11 = a1;
  if (v7)
    v12 = v11;
  v13 = a2 & 0xFFFFFFFFFFFFFF8;
  v14 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0)
    v13 = a2;
  if (v9)
    v14 = v13;
  if (v12 == v14)
    return 1;
  if (v8 < 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v28 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_47:
    result = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_18;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_49;
  }
  result = (uint64_t)*(id *)(a1 + 32);
LABEL_18:
  v10 = (void *)result;
  v3 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_49:
    v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_21:
    v17 = v16;
    a3 = (uint64_t (*)(_QWORD))a3(0);
    v18 = static NSObject.== infix(_:_:)(v10, v17);

    if ((v18 & 1) != 0)
    {
      v19 = 1 - v8;
      for (i = 5; ; ++i)
      {
        v8 = v19 + i == 5;
        if (v19 + i == 5)
          return v8;
        v24 = i - 4;
        if (v28)
        {
          v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
          if (v3)
            goto LABEL_23;
        }
        else
        {
          if (v24 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }
          v25 = *(id *)(a1 + 8 * i);
          if (v3)
          {
LABEL_23:
            v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v24 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_45;
        v21 = *(id *)(a2 + 8 * i);
LABEL_24:
        v22 = v21;
        v23 = static NSObject.== infix(_:_:)(v25, v21);

        if ((v23 & 1) == 0)
          return v8;
      }
    }
    return 0;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v16 = *(id *)(a2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_100074BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for MeasurementHistoryItem(0);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v10 = (uint64_t *)((char *)&v19 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_1000226FC(a1 + v12, (uint64_t)v10);
        sub_1000226FC(a2 + v12, (uint64_t)v7);
        v15 = sub_1001ADF08(v10, v7);
        sub_100022740((uint64_t)v7);
        sub_100022740((uint64_t)v10);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

float sub_100074CC0(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v2;
  float result;
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;

  v2 = a1[1].i64[0];
  if (v2 == a2[1].i64[0])
  {
    if (v2)
    {
      if (a1 != a2)
      {
        result = COERCE_FLOAT(vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[3], a2[3]), (int8x16_t)vceqq_f32(a1[2], a2[2])), vandq_s8((int8x16_t)vceqq_f32(a1[4], a2[4]), (int8x16_t)vceqq_f32(a1[5], a2[5])))));
        if ((LODWORD(result) & 0x80000000) != 0)
        {
          v4 = a2 + 9;
          v5 = a1 + 9;
          do
          {
            if (!--v2)
              break;
            v6 = v4[-3];
            v7 = v4[-2];
            v8 = v4[-1];
            v9 = *v4;
            v4 += 4;
            v11 = v5[-1];
            v10 = *v5;
            v13 = v5[-3];
            v12 = v5[-2];
            v5 += 4;
            result = COERCE_FLOAT(vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v12, v7), (int8x16_t)vceqq_f32(v13, v6)), vandq_s8((int8x16_t)vceqq_f32(v11, v8), (int8x16_t)vceqq_f32(v10, v9)))));
          }
          while ((LODWORD(result) & 0x80000000) != 0);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100074D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v20;
  char v22;
  int v23;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    v3 = a2;
    v4 = a1;
    if (a1 != a2)
    {
      for (i = 0; ; i += 48)
      {
        v7 = *(_QWORD *)(v4 + i + 32);
        v8 = *(_QWORD *)(v4 + i + 40);
        v10 = *(_QWORD *)(v4 + i + 48);
        v9 = *(_QWORD *)(v4 + i + 56);
        v11 = *(_QWORD *)(v4 + i + 64);
        v12 = *(unsigned __int8 *)(v4 + i + 72);
        v13 = *(_QWORD *)(v3 + i + 32);
        v14 = *(_QWORD *)(v3 + i + 40);
        v16 = *(_QWORD *)(v3 + i + 48);
        v15 = *(_QWORD *)(v3 + i + 56);
        v17 = *(_QWORD *)(v3 + i + 64);
        v18 = *(unsigned __int8 *)(v3 + i + 72);
        if (v7 != v13 || v8 != v14)
        {
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v13, v14, 0);
          v4 = a1;
          v3 = a2;
          if ((v20 & 1) == 0)
            break;
        }
        if (v9)
        {
          if (!v15)
            return 0;
          if (v10 != v16 || v9 != v15)
          {
            v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v9, v16, v15, 0);
            v4 = a1;
            v3 = a2;
            if ((v22 & 1) == 0)
              return 0;
          }
        }
        else if (v15)
        {
          return 0;
        }
        if (v12)
        {
          if (v11)
          {
            if (v17)
              v23 = v18;
            else
              v23 = 0;
            if (v23 != 1)
              return 0;
          }
          else
          {
            if (v17)
              v6 = 0;
            else
              v6 = v18;
            if ((v6 & 1) == 0)
              return 0;
          }
        }
        else
        {
          if ((v18 & 1) != 0)
            return 0;
          if (*(float *)&v11 != *(float *)&v17 || *((float *)&v11 + 1) != *((float *)&v17 + 1))
            return 0;
        }
        if (!--v2)
          return 1;
      }
      return 0;
    }
  }
  return 1;
}

uint64_t sub_100074ED0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 != *a2 || v5 != v6)
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
    result = 0;
    if ((v8 & 1) == 0)
      return result;
  }
  v10 = a1[3];
  v11 = a2[3];
  if (!v10)
  {
    if (!v11)
      goto LABEL_15;
    return 0;
  }
  if (!v11)
    return 0;
  v12 = a1[2];
  v13 = a2[2];
  v14 = v12 == v13 && v10 == v11;
  if (v14 || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v10, v13, v11, 0), result = 0, (v15 & 1) != 0))
  {
LABEL_15:
    sub_100075030(a1 + 4, (uint64_t)&v18);
    sub_100075030(a2 + 4, (uint64_t)&v17);
    sub_100075030(&v18, (uint64_t)&v19);
    if (v20 == 1)
    {
      if (v19)
      {
        sub_100075030(&v17, (uint64_t)&v21);
        if (v22 == 1)
          return v21 != 0;
      }
      else
      {
        sub_100075030(&v17, (uint64_t)&v21);
        if (v22 == 1)
          return v21 == 0;
      }
    }
    else
    {
      v16 = v19;
      sub_100075030(&v17, (uint64_t)&v21);
      if ((v22 & 1) == 0 && *(float *)&v16 == *(float *)&v21 && *((float *)&v16 + 1) == *((float *)&v21 + 1))
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_100075030(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a1 + 8);
  *(_QWORD *)a2 = v2;
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for ControlType(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ControlType(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ControlType(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000750A8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000750C4(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ControlType()
{
  return &type metadata for ControlType;
}

id sub_1000750F4(void *a1, double a2, double a3, double a4, double a5)
{
  char *v5;
  void *v6;
  objc_class *ObjectType;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  id v22;
  objc_super v24;

  v6 = v5;
  ObjectType = (objc_class *)swift_getObjectType(v5);
  *(_QWORD *)&v5[OBJC_IVAR____TtC7Measure16InteractiveLabel_cancellableSubs] = _swiftEmptyArrayStorage;
  v13 = &v5[OBJC_IVAR____TtC7Measure16InteractiveLabel_configuration];
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((_QWORD *)v13 + 4) = 0;
  v5[OBJC_IVAR____TtC7Measure16InteractiveLabel_shouldDismissSelection] = 0;
  v14 = OBJC_IVAR____TtC7Measure16InteractiveLabel__appState;
  v15 = sub_10000EDC8(&qword_10047E5E0);
  KeyPath = swift_getKeyPath(&unk_1003B3940);
  v17 = qword_10047AD88;
  v18 = v6;
  if (v17 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v19 = qword_1004AF890;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v15 + 272);
  v21 = swift_retain();
  *(_QWORD *)&v18[v14] = v20(KeyPath, v19, v21);

  v24.receiver = v18;
  v24.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v24, "initWithFrame:textContainer:", a1, a2, a3, a4, a5);
  sub_100075258();

  return v22;
}

void sub_100075258()
{
  void *v0;
  id v1;
  id v2;

  swift_getObjectType(v0);
  sub_1000757F4();
  StateObserving.setup()();
  objc_msgSend(v0, "setTextContainerInset:", UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right);
  v1 = objc_msgSend(v0, "textContainer");
  objc_msgSend(v1, "setLineFragmentPadding:", 0.0);

  objc_msgSend(v0, "setSelectable:", 1);
  objc_msgSend(v0, "setScrollEnabled:", 0);
  objc_msgSend(v0, "setEditable:", 0);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setUserInteractionEnabled:", 1);
  v2 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v0, "setBackgroundColor:", v2);

}

id sub_1000753E0(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, __n128);
  __n128 v13;
  id v14;
  id v15;
  id v16;
  objc_super v18;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure16InteractiveLabel_cancellableSubs] = _swiftEmptyArrayStorage;
  v5 = &v1[OBJC_IVAR____TtC7Measure16InteractiveLabel_configuration];
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_QWORD *)v5 + 4) = 0;
  v1[OBJC_IVAR____TtC7Measure16InteractiveLabel_shouldDismissSelection] = 0;
  v6 = OBJC_IVAR____TtC7Measure16InteractiveLabel__appState;
  v7 = sub_10000EDC8(&qword_10047E5E0);
  KeyPath = swift_getKeyPath(&unk_1003B3940);
  v9 = qword_10047AD88;
  v10 = v2;
  if (v9 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v11 = qword_1004AF890;
  v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v7 + 272);
  v13 = swift_retain();
  *(_QWORD *)&v2[v6] = v12(KeyPath, v11, v13);

  v18.receiver = v10;
  v18.super_class = ObjectType;
  v14 = objc_msgSendSuper2(&v18, "initWithCoder:", a1);
  v15 = v14;
  if (v14)
  {
    v16 = v14;
    sub_100075258();

  }
  return v15;
}

uint64_t type metadata accessor for InteractiveLabel()
{
  return objc_opt_self(_TtC7Measure16InteractiveLabel);
}

_UNKNOWN **sub_1000755B0()
{
  return &off_10044A548;
}

uint64_t sub_1000755BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC7Measure16InteractiveLabel_configuration;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100026E60(v3, a1);
}

double sub_10007560C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC7Measure16InteractiveLabel_configuration;
  swift_beginAccess(v3, v5, 33, 0);
  sub_100026E18(a1, v3);
  *(_QWORD *)&result = swift_endAccess(v5).n128_u64[0];
  return result;
}

uint64_t (*sub_100075664(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure16InteractiveLabel_configuration, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000756A8()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC7Measure16InteractiveLabel_cancellableSubs);
  swift_beginAccess(v0 + OBJC_IVAR____TtC7Measure16InteractiveLabel_cancellableSubs, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_1000756F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure16InteractiveLabel_cancellableSubs);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_100075740(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure16InteractiveLabel_cancellableSubs, a1, 33, 0);
  return j_j__swift_endAccess;
}

id sub_100075784()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  uint64_t v5;

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure16InteractiveLabel__appState];
  v3 = swift_retain(v2);
  StateValue.wrappedValue.getter(&v5, v3);
  result = (id)swift_release(v2);
  if (BYTE3(v5) == 1)
    return objc_msgSend(v1, "setSelectedRange:", 0, 0);
  return result;
}

unint64_t sub_1000757F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047F280;
  if (!qword_10047F280)
  {
    v1 = type metadata accessor for InteractiveLabel();
    result = swift_getWitnessTable(&unk_1003B3924, v1);
    atomic_store(result, (unint64_t *)&qword_10047F280);
  }
  return result;
}

uint64_t sub_100075838@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t countAndFlagsBits;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *object;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  float v28;
  id v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE __dst[272];
  _BYTE v56[848];
  _BYTE v57[848];
  Swift::String v58;
  Swift::String v59;

  v5 = type metadata accessor for MeasurementHistoryItem(0);
  sub_10001F970((const void *)(a1 + *(int *)(v5 + 28)), v56);
  sub_10001F970(v56, v57);
  result = sub_10001F9AC((uint64_t)v57);
  if ((_DWORD)result)
    goto LABEL_2;
  v21 = (float32x4_t *)sub_10001F9B8((uint64_t)v57);
  v22 = memcpy(__dst, v21, 0x10DuLL);
  v23 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_numberOfRows);
  result = IndexPath.item.getter(v22);
  if (v23 != 3)
  {
    if (result != 1)
    {
      if (result)
        goto LABEL_2;
LABEL_14:
      v28 = sub_10007912C(v21[8]);
      sub_1000A7B84((uint64_t)&v41, v28);
      v29 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v59._object = (void *)0xE000000000000000;
      v30._countAndFlagsBits = 0x45434E4154534944;
      v30._object = (void *)0xED0000594157415FLL;
      v31._countAndFlagsBits = 0;
      v31._object = (void *)0xE000000000000000;
      v59._countAndFlagsBits = 0;
      v32 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, (Swift::String_optional)0, (NSBundle)v29, v31, v59);
      countAndFlagsBits = v32._countAndFlagsBits;
      object = v32._object;

      v8 = v41;
      v18 = (uint64_t)v42;
      v10 = v44;
      v19 = v47;
      v36 = v43;
      v37 = v46;
      v13 = v49;
      v20 = v52;
      v38 = v48;
      v39 = v51;
      v16 = v54;
      v40 = v53;
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v20);
      result = (uint64_t)sub_10002150C(&v41);
      goto LABEL_15;
    }
LABEL_13:
    result = sub_100079180((uint64_t)__dst, &v41);
    v15 = v53;
    v16 = v54;
    v14 = v51;
    v20 = v52;
    v12 = v49;
    v13 = v50;
    v11 = v47;
    v19 = v48;
    v9 = v45;
    v10 = v46;
    v8 = v43;
    v18 = v44;
    countAndFlagsBits = v41;
    object = v42;
    goto LABEL_3;
  }
  if (result == 2)
    goto LABEL_13;
  if (result == 1)
    goto LABEL_14;
  if (result)
  {
LABEL_2:
    countAndFlagsBits = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    object = (void *)0xE000000000000000;
    v18 = 0xE000000000000000;
    v19 = 0xE000000000000000;
    v20 = 0xE000000000000000;
LABEL_3:
    *a2 = countAndFlagsBits;
    a2[1] = (uint64_t)object;
    a2[2] = v8;
    a2[3] = v18;
    a2[4] = v9;
    a2[5] = v10;
    a2[6] = v11;
    a2[7] = v19;
    a2[8] = v12;
    a2[9] = v13;
    a2[10] = v14;
    a2[11] = v20;
    a2[12] = v15;
    a2[13] = v16;
    return result;
  }
  v18 = v21[9].i64[1];
  if (v18)
  {
    v16 = v21[15].i64[1];
    v20 = v21[14].i64[1];
    v39 = v21[14].i64[0];
    v40 = v21[15].i64[0];
    v13 = v21[13].i64[0];
    v35 = v21[13].i64[1];
    v19 = v21[12].i64[0];
    v37 = v21[11].i64[1];
    v38 = v21[12].i64[1];
    v10 = v21[10].i64[1];
    v34 = v21[11].i64[0];
    v36 = v21[10].i64[0];
    v8 = v21[9].i64[0];
    v24 = (void *)objc_opt_self(NSBundle);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v20);
    v33 = objc_msgSend(v24, "mainBundle");
    v58._object = (void *)0xE000000000000000;
    v25._countAndFlagsBits = 0x4F49544156454C45;
    v25._object = (void *)0xE90000000000004ELL;
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    v58._countAndFlagsBits = 0;
    v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v33, v26, v58);
    countAndFlagsBits = v27._countAndFlagsBits;
    object = v27._object;

    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v16);
    result = sub_1000212A4(v8, v18, v36, v10, v34, v37, v19, v38, v13, v35, v39, v20, v40, v16);
LABEL_15:
    v9 = v36;
    v11 = v37;
    v12 = v38;
    v14 = v39;
    v15 = v40;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

double sub_100075C10()
{
  uint64_t v0;
  id v1;
  id v2;
  double Height;
  double v4;
  CGRect v6;
  CGRect v7;
  CGRect v8;

  v1 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v2 = objc_msgSend(v1, "preferredContentSizeCategory");

  LOBYTE(v1) = UIContentSizeCategory.isAccessibilityCategory.getter(v2);
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_sketchView), "bounds");
  Height = CGRectGetHeight(v6);
  if ((v1 & 1) != 0)
  {
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityLabelStrip), "bounds");
    Height = Height + CGRectGetHeight(v7);
    if (qword_10047A758 != -1)
      swift_once(&qword_10047A758, sub_10000EF18);
    v4 = *(double *)&qword_1004AF090;
  }
  else
  {
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_labelStrip), "bounds");
    v4 = CGRectGetHeight(v8);
  }
  return Height + v4;
}

void sub_100075D14()
{
  uint64_t v0;
  id v1;
  id v2;
  double Height;
  double v4;
  CGRect v5;
  CGRect v6;
  CGRect v7;

  v1 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v2 = objc_msgSend(v1, "preferredContentSizeCategory");

  LOBYTE(v1) = UIContentSizeCategory.isAccessibilityCategory.getter(v2);
  if ((v1 & 1) != 0)
  {
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityElevation), "bounds");
    Height = CGRectGetHeight(v5);
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityDistance), "bounds");
    v4 = Height + CGRectGetHeight(v6);
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityAngle), "bounds");
    if (v4 + CGRectGetHeight(v7) != 0.0)
    {
      sub_100075C10();
      if (qword_10047A758 != -1)
        swift_once(&qword_10047A758, sub_10000EF18);
    }
  }
  else
  {
    sub_100075C10();
    sub_10012C520(*(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_numberOfRows), 0);
  }
}

void sub_100075E94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void (*v11)(__n128);
  uint64_t v12;
  __n128 v13;
  _BYTE v14[272];
  _BYTE v15[848];
  _BYTE v16[848];

  v2 = v1;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = (_QWORD *)(v2 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_title);
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_title + 8);
  *v6 = v5;
  v6[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v7);
  v8 = type metadata accessor for MeasurementHistoryItem(0);
  sub_10001F970((const void *)(a1 + *(int *)(v8 + 28)), v15);
  sub_10001F970(v15, v16);
  if (!sub_10001F9AC((uint64_t)v16))
  {
    v9 = (_QWORD *)sub_10001F9B8((uint64_t)v16);
    memcpy(v14, v9, 0x10DuLL);
    v10 = 2;
    if (v9[19])
      v10 = 3;
    if (v10 != *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_numberOfRows))
    {
      *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_numberOfRows) = v10;
      v11 = *(void (**)(__n128))(v2 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_numberOfRowsChangedCallback);
      if (v11)
      {
        v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_numberOfRowsChangedCallback + 8);
        v13 = swift_retain();
        v11(v13);
        objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_tableView), "reloadData");
        sub_1000217BC((uint64_t)v11, v12);
      }
    }
    sub_100075FB0((uint64_t)v14);
  }
}

void sub_100075FB0(uint64_t a1)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSString v12;
  void *v13;
  NSString v14;
  id v15;
  id v16;
  void *v17;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _OWORD v26[2];
  _BYTE v27[16];
  uint64_t v28;
  void *v29;

  v3 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v4 = objc_msgSend(v3, "preferredContentSizeCategory");

  LOBYTE(v3) = UIContentSizeCategory.isAccessibilityCategory.getter(v4);
  if ((v3 & 1) != 0)
  {
    sub_1000783A4(a1);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 88);
    v23 = *(_QWORD *)(a1 + 80);
    v24 = *(_QWORD *)(a1 + 56);
    v21 = *(_QWORD *)(a1 + 96);
    v22 = *(void **)(a1 + 64);
    v20 = *(_QWORD *)(a1 + 104);
    v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_labelStrip);
    v9 = OBJC_IVAR____TtC7Measure11LabelsStrip_primaryLabel;
    v10 = *(void **)(v8 + OBJC_IVAR____TtC7Measure11LabelsStrip_primaryLabel);
    v25 = *(_OWORD *)a1;
    v26[0] = *(_OWORD *)(a1 + 16);
    *(_QWORD *)((char *)v26 + 14) = *(_QWORD *)(a1 + 30);
    v11 = v10;
    v12 = String._bridgeToObjectiveC()();
    objc_msgSend(v11, "setText:", v12);

    v13 = *(void **)(v8 + v9);
    sub_100012C58((uint64_t)v26, (uint64_t)v27, (uint64_t *)&unk_10048A0F0);
    sub_100012C58((uint64_t)v27, (uint64_t)&v28, (uint64_t *)&unk_10048A0F0);
    v14 = v29;
    if (v29)
    {
      v15 = v13;
      v14 = String._bridgeToObjectiveC()();
    }
    else
    {
      v16 = v13;
    }
    objc_msgSend(v13, "setAccessibilityLabel:", v14);

    v17 = *(void **)(v8 + OBJC_IVAR____TtC7Measure11LabelsStrip_secondaryLabelStack);
    if (v25 == __PAIR128__(v6, v5))
      v18 = 1;
    else
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, *((_QWORD *)&v25 + 1), v5, v6, 0);
    v19 = v17;
    sub_100134B8C(v5, v6, v24, v22, v23, v7, v21, v20, v18 & 1);

  }
}

id sub_1000761F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  uint64_t v9;
  void *v10;
  char *v11;
  id v12;
  id v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  objc_class *ObjCClassFromMetadata;
  uint64_t v26;
  uint64_t v27;
  objc_class *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  objc_class *ObjectType;
  objc_super v48;
  double v49;
  _BYTE v50[24];

  v6 = v5;
  ObjectType = (objc_class *)swift_getObjectType(v5);
  v9 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_minContentViewHeight;
  *(_QWORD *)&v6[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_minContentViewHeight] = 0x4071400000000000;
  v10 = (void *)objc_opt_self(UITraitCollection);
  v11 = v6;
  v12 = objc_msgSend(v10, "currentTraitCollection");
  v13 = objc_msgSend(v12, "preferredContentSizeCategory");

  LOBYTE(v12) = UIContentSizeCategory.isAccessibilityCategory.getter(v13);
  v14 = 88.0;
  if ((v12 & 1) != 0)
    v14 = 222.0;
  v15 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_tableRowHeight;
  *(double *)&v11[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_tableRowHeight] = v14;
  v16 = &v11[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_numberOfRowsChangedCallback];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v17 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_sketchView;
  v18 = type metadata accessor for SketchLine();
  *(_QWORD *)&v11[v17] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v18)), "init");
  v19 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_labelStrip;
  v20 = type metadata accessor for LabelsStrip();
  *(_QWORD *)&v11[v19] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v20)), "init");
  v21 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_tableView;
  v22 = type metadata accessor for IntrinsicTableView();
  *(_QWORD *)&v11[v21] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v22)), "init");
  v23 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityLabelStrip;
  v24 = type metadata accessor for AccessibilityDoubleStack();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v24);
  *(_QWORD *)&v11[v23] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v26 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityElevation;
  v27 = type metadata accessor for AccessibilityTripleStack();
  v28 = (objc_class *)swift_getObjCClassFromMetadata(v27);
  *(_QWORD *)&v11[v26] = objc_msgSend(objc_allocWithZone(v28), "init");
  v29 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityDistance;
  *(_QWORD *)&v11[v29] = objc_msgSend(objc_allocWithZone(v28), "init");
  v30 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityAngle;
  *(_QWORD *)&v11[v30] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v31 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilitySeparatorOne;
  if (qword_10047A750 != -1)
    swift_once(&qword_10047A750, sub_10000EF04);
  v32 = *(double *)&qword_1004AF088;
  *(_QWORD *)&v11[v31] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, *(double *)&qword_1004AF088, 0.5);
  v33 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilitySeparatorTwo;
  *(_QWORD *)&v11[v33] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, v32, 0.5);
  v34 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilitySeparatorThree;
  *(_QWORD *)&v11[v34] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, v32, 0.5);
  v35 = &v11[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_measurementID];
  *(_QWORD *)v35 = a1;
  *((_QWORD *)v35 + 1) = a2;
  v36 = &v11[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_title];
  *(_QWORD *)v36 = a4;
  *((_QWORD *)v36 + 1) = a5;
  v37 = 2;
  if (*(_QWORD *)(a3 + 152))
    v37 = 3;
  *(_QWORD *)&v11[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_numberOfRows] = v37;
  v38 = *(double *)&v6[v9];
  v39 = v38 + *(double *)&v11[v15] * (double)v37;
  v40 = type metadata accessor for CardContainerView.Configuration(0);
  v41 = swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  swift_beginAccess(v41 + OBJC_IVAR____TtCC7Measure17CardContainerView13Configuration__maxHeight, v50, 33, 0);
  v49 = v39;
  Published.init(initialValue:)(&v49, &type metadata for CGFloat);
  swift_endAccess(v50);
  swift_beginAccess(v41 + OBJC_IVAR____TtCC7Measure17CardContainerView13Configuration__minHeight, v50, 33, 0);
  v49 = v38;
  Published.init(initialValue:)(&v49, &type metadata for CGFloat);
  swift_endAccess(v50);
  *(_QWORD *)(v41 + OBJC_IVAR____TtCC7Measure17CardContainerView13Configuration_velocityThreshold) = 0x408F400000000000;
  *(_QWORD *)(v41 + OBJC_IVAR____TtCC7Measure17CardContainerView13Configuration_velocityUpperThreshold) = 0x40A7700000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_containerConfiguration] = v41;

  v48.receiver = v11;
  v48.super_class = ObjectType;
  v42 = objc_msgSendSuper2(&v48, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_100075FB0(a3);
  sub_100079448(a3);
  sub_100076640();
  sub_1000772FC();

  return v42;
}

void sub_100076640()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  void *v80;
  void *v81;
  id v82;
  char v83;
  uint64_t v84;
  char v85;
  id v86;
  id v87;
  uint64_t v88;
  const char *v89;
  void *v90;
  id v91;
  void *v92;
  void *v93;
  id v94;
  void *v95;
  char v96;
  uint64_t v97;
  char v98;
  id v99;
  id v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  char v105;
  uint64_t v106;
  char v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v1 = v0;
  objc_msgSend(v0, "setAxis:", 1);
  v2 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v3 = objc_msgSend(v2, "preferredContentSizeCategory");

  LOBYTE(v2) = UIContentSizeCategory.isAccessibilityCategory.getter(v3);
  if ((v2 & 1) == 0)
  {
    objc_msgSend(v1, "addArrangedSubview:", *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_sketchView]);
    objc_msgSend(v1, "addArrangedSubview:", *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_labelStrip]);
    v88 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_tableView];
    v89 = "addArrangedSubview:";
    v90 = v1;
LABEL_34:
    objc_msgSend(v90, v89, v88);
    return;
  }
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityLabelStrip];
  v5 = OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_topLabel;
  v6 = *(void **)(v4 + OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_topLabel);
  v7 = (void *)objc_opt_self(UIFont);
  v8 = v6;
  v9 = objc_msgSend(v7, "systemFontOfSize:weight:", 60.0, UIFontWeightRegular);
  objc_msgSend(v8, "setFont:", v9);

  v10 = OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_bottomLabel;
  v11 = *(id *)(v4 + OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_bottomLabel);
  v12 = objc_msgSend(v7, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  v13 = objc_msgSend(v12, "fontDescriptor");

  v14 = objc_msgSend(v13, "fontDescriptorWithSymbolicTraits:", 2);
  if (!v14)
  {
    __break(1u);
    goto LABEL_36;
  }
  v15 = objc_msgSend(v7, "fontWithDescriptor:size:", v14, 0.0);

  objc_msgSend(v11, "setFont:", v15);
  v16 = *(void **)(v4 + v5);
  v17 = (void *)objc_opt_self(UIColor);
  v18 = v16;
  v19 = objc_msgSend(v17, "labelColor");
  objc_msgSend(v18, "setTextColor:", v19);

  v115 = v4;
  v20 = *(id *)(v4 + v10);
  v21 = objc_msgSend(v17, "secondaryLabelColor");
  objc_msgSend(v20, "setTextColor:", v21);

  v22 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityElevation];
  v23 = OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel;
  v24 = *(id *)(v22 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel);
  v25 = objc_msgSend(v7, "preferredFontForTextStyle:", UIFontTextStyleBody);
  v26 = objc_msgSend(v25, "fontDescriptor");

  v27 = objc_msgSend(v26, "fontDescriptorWithSymbolicTraits:", 2);
  if (!v27)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v28 = objc_msgSend(v7, "fontWithDescriptor:size:", v27, 0.0);

  objc_msgSend(v24, "setFont:", v28);
  v29 = OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel;
  v30 = *(id *)(v22 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel);
  v31 = objc_msgSend(v7, "preferredFontForTextStyle:", UIFontTextStyleLargeTitle);
  objc_msgSend(v30, "setFont:", v31);

  v32 = OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel;
  v33 = *(id *)(v22 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel);
  v34 = objc_msgSend(v7, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  v35 = v22;
  v36 = objc_msgSend(v34, "fontDescriptor");

  v37 = objc_msgSend(v36, "fontDescriptorWithSymbolicTraits:", 2);
  if (!v37)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v38 = objc_msgSend(v7, "fontWithDescriptor:size:", v37, 0.0);

  objc_msgSend(v33, "setFont:", v38);
  v39 = *(id *)(v35 + v23);
  v40 = objc_msgSend(v17, "secondaryLabelColor");
  objc_msgSend(v39, "setTextColor:", v40);

  v41 = *(id *)(v35 + v29);
  v42 = objc_msgSend(v17, "labelColor");
  objc_msgSend(v41, "setTextColor:", v42);

  v112 = v35;
  v43 = *(id *)(v35 + v32);
  v44 = objc_msgSend(v17, "secondaryLabelColor");
  objc_msgSend(v43, "setTextColor:", v44);

  v45 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityDistance];
  v113 = OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel;
  v46 = *(id *)(v45 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel);
  v47 = objc_msgSend(v7, "preferredFontForTextStyle:", UIFontTextStyleBody);
  v48 = objc_msgSend(v47, "fontDescriptor");

  v49 = objc_msgSend(v48, "fontDescriptorWithSymbolicTraits:", 2);
  if (!v49)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v50 = objc_msgSend(v7, "fontWithDescriptor:size:", v49, 0.0);

  objc_msgSend(v46, "setFont:", v50);
  v51 = OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel;
  v52 = *(id *)(v45 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel);
  v53 = objc_msgSend(v7, "preferredFontForTextStyle:", UIFontTextStyleLargeTitle);
  objc_msgSend(v52, "setFont:", v53);

  v54 = OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel;
  v55 = *(id *)(v45 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel);
  v56 = objc_msgSend(v7, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  v57 = objc_msgSend(v56, "fontDescriptor");

  v58 = objc_msgSend(v57, "fontDescriptorWithSymbolicTraits:", 2);
  if (!v58)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v59 = objc_msgSend(v7, "fontWithDescriptor:size:", v58, 0.0);

  objc_msgSend(v55, "setFont:", v59);
  v60 = *(id *)(v45 + v113);
  v61 = objc_msgSend(v17, "secondaryLabelColor");
  objc_msgSend(v60, "setTextColor:", v61);

  v62 = *(id *)(v45 + v51);
  v63 = objc_msgSend(v17, "labelColor");
  objc_msgSend(v62, "setTextColor:", v63);

  v116 = v45;
  v64 = *(id *)(v45 + v54);
  v65 = objc_msgSend(v17, "secondaryLabelColor");
  objc_msgSend(v64, "setTextColor:", v65);

  v66 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityAngle];
  v67 = OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_topLabel;
  v68 = *(id *)(v66 + OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_topLabel);
  v69 = objc_msgSend(v7, "preferredFontForTextStyle:", UIFontTextStyleBody);
  v70 = objc_msgSend(v69, "fontDescriptor");

  v71 = objc_msgSend(v70, "fontDescriptorWithSymbolicTraits:", 2);
  if (v71)
  {
    v72 = objc_msgSend(v7, "fontWithDescriptor:size:", v71, 0.0);

    objc_msgSend(v68, "setFont:", v72);
    v73 = OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_bottomLabel;
    v74 = *(id *)(v66 + OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_bottomLabel);
    v75 = objc_msgSend(v7, "preferredFontForTextStyle:", UIFontTextStyleLargeTitle);
    objc_msgSend(v74, "setFont:", v75);

    v76 = *(id *)(v66 + v67);
    v77 = objc_msgSend(v17, "secondaryLabelColor");
    objc_msgSend(v76, "setTextColor:", v77);

    v78 = *(id *)(v66 + v73);
    v79 = objc_msgSend(v17, "labelColor");
    objc_msgSend(v78, "setTextColor:", v79);

    v80 = *(void **)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilitySeparatorOne];
    if (qword_10047B128 != -1)
      swift_once(&qword_10047B128, sub_100197BAC);
    v81 = (void *)qword_1004AFCC8;
    v82 = qword_1004AFCD0;
    if ((byte_1004AFCD8 & 1) != 0)
    {
      v83 = byte_1004AFCE8;
      v84 = qword_1004AFCE0;
      v85 = byte_10048A2A0;
      v86 = (id)qword_1004AFCC8;
      v87 = sub_100070DBC(v85, v84, v83);
      sub_100021580(v81, v82, 1);
    }
    else
    {
      if ((byte_10048A2A0 & 1) != 0)
        v91 = qword_1004AFCD0;
      else
        v91 = (id)qword_1004AFCC8;
      v87 = v91;
    }
    objc_msgSend(v80, "setBackgroundColor:", v87);

    v92 = *(void **)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilitySeparatorTwo];
    v93 = (void *)qword_1004AFCC8;
    v94 = qword_1004AFCD0;
    v114 = v66;
    if ((byte_1004AFCD8 & 1) != 0)
    {
      v95 = v80;
      v96 = byte_1004AFCE8;
      v97 = qword_1004AFCE0;
      v98 = byte_10048A2A0;
      v99 = (id)qword_1004AFCC8;
      v100 = sub_100070DBC(v98, v97, v96);
      sub_100021580(v93, v94, 1);
    }
    else
    {
      v95 = v80;
      if ((byte_10048A2A0 & 1) != 0)
        v101 = qword_1004AFCD0;
      else
        v101 = (id)qword_1004AFCC8;
      v100 = v101;
    }
    objc_msgSend(v92, "setBackgroundColor:", v100);

    v102 = *(void **)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilitySeparatorThree];
    v104 = (void *)qword_1004AFCC8;
    v103 = qword_1004AFCD0;
    if ((byte_1004AFCD8 & 1) != 0)
    {
      v105 = byte_1004AFCE8;
      v106 = qword_1004AFCE0;
      v107 = byte_10048A2A0;
      v108 = (id)qword_1004AFCC8;
      v109 = sub_100070DBC(v107, v106, v105);
      sub_100021580(v104, v103, 1);
    }
    else
    {
      if ((byte_10048A2A0 & 1) != 0)
        v110 = qword_1004AFCD0;
      else
        v110 = (id)qword_1004AFCC8;
      v109 = v110;
    }
    objc_msgSend(v102, "setBackgroundColor:", v109);

    objc_msgSend(v1, "addSubview:", *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_sketchView]);
    objc_msgSend(v1, "addSubview:", v95);
    objc_msgSend(v1, "addSubview:", v92);
    v111 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_numberOfRows;
    if (*(_QWORD *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_numberOfRows] == 3)
      objc_msgSend(v1, "addSubview:", v102);
    objc_msgSend(v1, "addSubview:", v115);
    if (*(_QWORD *)&v1[v111] == 3)
      objc_msgSend(v1, "addSubview:", v112);
    objc_msgSend(v1, "addSubview:", v116);
    v89 = "addSubview:";
    v90 = v1;
    v88 = v114;
    goto LABEL_34;
  }
LABEL_40:
  __break(1u);
}

void sub_1000772FC()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t inited;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  id v94;
  id v95;
  id v96;
  double v97;
  id v98;
  char **v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  id v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  Class isa;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  char v134[112];
  uint64_t v135;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_sketchView];
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = (void *)objc_opt_self(UITraitCollection);
  v4 = objc_msgSend(v3, "currentTraitCollection");
  v5 = objc_msgSend(v4, "preferredContentSizeCategory");

  LOBYTE(v4) = UIContentSizeCategory.isAccessibilityCategory.getter(v5);
  if ((v4 & 1) != 0)
  {
    v6 = *(void **)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityLabelStrip];
    objc_msgSend(v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v127 = *(id *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityElevation];
    objc_msgSend(v127, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v129 = *(id *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityDistance];
    objc_msgSend(v129, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v131 = *(id *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityAngle];
    objc_msgSend(v131, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v130 = *(id *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilitySeparatorOne];
    objc_msgSend(v130, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v132 = *(id *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilitySeparatorTwo];
    objc_msgSend(v132, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v128 = *(id *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilitySeparatorThree];
    objc_msgSend(v128, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v125 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
    v7 = swift_allocObject(v125, 184, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1003B3970;
    v8 = objc_msgSend(v2, "heightAnchor");
    if (qword_10047A818 != -1)
      swift_once(&qword_10047A818, sub_100012E04);
    v9 = objc_msgSend(v8, "constraintEqualToConstant:", *(double *)&qword_1004AF168, v125);

    *(_QWORD *)(v7 + 32) = v9;
    v10 = objc_msgSend(v2, "leadingAnchor");
    v11 = objc_msgSend(v1, "leadingAnchor");
    v12 = objc_msgSend(v10, "constraintEqualToAnchor:", v11);

    *(_QWORD *)(v7 + 40) = v12;
    v13 = objc_msgSend(v2, "trailingAnchor");
    v14 = objc_msgSend(v1, "trailingAnchor");
    v15 = objc_msgSend(v13, "constraintEqualToAnchor:", v14);

    *(_QWORD *)(v7 + 48) = v15;
    v16 = objc_msgSend(v2, "topAnchor");
    v17 = objc_msgSend(v1, "topAnchor");
    v18 = objc_msgSend(v16, "constraintEqualToAnchor:", v17);

    *(_QWORD *)(v7 + 56) = v18;
    v19 = objc_msgSend(v6, "leadingAnchor");
    v20 = objc_msgSend(v1, "leadingAnchor");
    if (qword_10047A758 != -1)
      swift_once(&qword_10047A758, sub_10000EF18);
    v21 = objc_msgSend(v19, "constraintEqualToAnchor:constant:", v20, *(double *)&qword_1004AF090);

    *(_QWORD *)(v7 + 64) = v21;
    v22 = objc_msgSend(v6, "topAnchor");
    v23 = objc_msgSend(v2, "bottomAnchor");
    v24 = objc_msgSend(v22, "constraintEqualToAnchor:", v23);

    *(_QWORD *)(v7 + 72) = v24;
    v25 = objc_msgSend(v6, "trailingAnchor");
    v26 = objc_msgSend(v1, "trailingAnchor");
    v27 = objc_msgSend(v25, "constraintEqualToAnchor:", v26);

    *(_QWORD *)(v7 + 80) = v27;
    v28 = objc_msgSend(v130, "leadingAnchor");
    v29 = objc_msgSend(v1, "leadingAnchor");
    v30 = objc_msgSend(v28, "constraintEqualToAnchor:constant:", v29, *(double *)&qword_1004AF090);

    *(_QWORD *)(v7 + 88) = v30;
    v31 = objc_msgSend(v130, "topAnchor");
    v32 = objc_msgSend(v6, "bottomAnchor");
    v33 = objc_msgSend(v31, "constraintEqualToAnchor:constant:", v32, *(double *)&qword_1004AF090);

    *(_QWORD *)(v7 + 96) = v33;
    v34 = objc_msgSend(v130, "trailingAnchor");
    v35 = objc_msgSend(v1, "trailingAnchor");
    v36 = objc_msgSend(v34, "constraintEqualToAnchor:constant:", v35, -*(double *)&qword_1004AF090);

    *(_QWORD *)(v7 + 104) = v36;
    v37 = objc_msgSend(v130, "heightAnchor");
    v38 = objc_msgSend(v37, "constraintEqualToConstant:", 0.5);

    *(_QWORD *)(v7 + 112) = v38;
    v39 = objc_msgSend(v131, "leadingAnchor");
    v40 = objc_msgSend(v1, "leadingAnchor");
    v41 = objc_msgSend(v39, "constraintEqualToAnchor:constant:", v40, *(double *)&qword_1004AF090);

    *(_QWORD *)(v7 + 120) = v41;
    v42 = objc_msgSend(v131, "trailingAnchor");
    v43 = objc_msgSend(v1, "trailingAnchor");
    v44 = objc_msgSend(v42, "constraintEqualToAnchor:", v43);

    *(_QWORD *)(v7 + 128) = v44;
    v45 = objc_msgSend(v131, "bottomAnchor");
    v46 = objc_msgSend(v1, "bottomAnchor");
    v47 = objc_msgSend(v45, "constraintEqualToAnchor:constant:", v46, -*(double *)&qword_1004AF090);

    *(_QWORD *)(v7 + 136) = v47;
    v48 = objc_msgSend(v132, "leadingAnchor");
    v49 = objc_msgSend(v1, "leadingAnchor");
    v50 = objc_msgSend(v48, "constraintEqualToAnchor:constant:", v49, *(double *)&qword_1004AF090);

    *(_QWORD *)(v7 + 144) = v50;
    v51 = objc_msgSend(v132, "trailingAnchor");
    v52 = objc_msgSend(v1, "trailingAnchor");
    v53 = objc_msgSend(v51, "constraintEqualToAnchor:constant:", v52, -*(double *)&qword_1004AF090);

    *(_QWORD *)(v7 + 152) = v53;
    v54 = objc_msgSend(v132, "heightAnchor");
    v55 = objc_msgSend(v54, "constraintEqualToConstant:", 0.5);

    *(_QWORD *)(v7 + 160) = v55;
    v56 = objc_msgSend(v129, "leadingAnchor");
    v57 = objc_msgSend(v1, "leadingAnchor");
    v58 = objc_msgSend(v56, "constraintEqualToAnchor:constant:", v57, *(double *)&qword_1004AF090);

    *(_QWORD *)(v7 + 168) = v58;
    v59 = objc_msgSend(v129, "trailingAnchor");
    v60 = objc_msgSend(v1, "trailingAnchor");
    v61 = objc_msgSend(v59, "constraintEqualToAnchor:", v60);

    *(_QWORD *)(v7 + 176) = v61;
    v135 = v7;
    specialized Array._endMutation()(v62);
    if (*(_QWORD *)&v1[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_numberOfRows] == 3)
    {
      inited = swift_initStackObject(v126, v134);
      *(_OWORD *)(inited + 16) = xmmword_1003B1450;
      v64 = objc_msgSend(v128, "leadingAnchor");
      v65 = objc_msgSend(v1, "leadingAnchor");
      v66 = objc_msgSend(v64, "constraintEqualToAnchor:constant:", v65, *(double *)&qword_1004AF090);

      *(_QWORD *)(inited + 32) = v66;
      v67 = objc_msgSend(v128, "topAnchor");
      v68 = objc_msgSend(v129, "bottomAnchor");
      v69 = objc_msgSend(v67, "constraintEqualToAnchor:constant:", v68, *(double *)&qword_1004AF090);

      *(_QWORD *)(inited + 40) = v69;
      v70 = objc_msgSend(v128, "trailingAnchor");
      v71 = objc_msgSend(v1, "trailingAnchor");
      v72 = objc_msgSend(v70, "constraintEqualToAnchor:constant:", v71, -*(double *)&qword_1004AF090);

      *(_QWORD *)(inited + 48) = v72;
      v73 = objc_msgSend(v128, "heightAnchor");
      v74 = objc_msgSend(v73, "constraintEqualToConstant:", 0.5);

      *(_QWORD *)(inited + 56) = v74;
      v75 = objc_msgSend(v127, "leadingAnchor");
      v76 = objc_msgSend(v1, "leadingAnchor");
      v77 = objc_msgSend(v75, "constraintEqualToAnchor:constant:", v76, *(double *)&qword_1004AF090);

      *(_QWORD *)(inited + 64) = v77;
      v78 = objc_msgSend(v127, "topAnchor");
      v79 = objc_msgSend(v130, "bottomAnchor");
      v80 = objc_msgSend(v78, "constraintEqualToAnchor:constant:", v79, *(double *)&qword_1004AF090);

      *(_QWORD *)(inited + 72) = v80;
      v81 = objc_msgSend(v127, "trailingAnchor");
      v82 = objc_msgSend(v1, "trailingAnchor");
      v83 = objc_msgSend(v81, "constraintEqualToAnchor:", v82);

      *(_QWORD *)(inited + 80) = v83;
      v84 = objc_msgSend(v131, "topAnchor");
      v85 = objc_msgSend(v128, "bottomAnchor");
      v86 = objc_msgSend(v84, "constraintEqualToAnchor:constant:", v85, *(double *)&qword_1004AF090);

      *(_QWORD *)(inited + 88) = v86;
      v87 = objc_msgSend(v132, "topAnchor");
      v88 = objc_msgSend(v127, "bottomAnchor");
      v89 = objc_msgSend(v87, "constraintEqualToAnchor:constant:", v88, *(double *)&qword_1004AF090);

      *(_QWORD *)(inited + 96) = v89;
      v90 = objc_msgSend(v129, "topAnchor");
      v91 = objc_msgSend(v132, "bottomAnchor");
      v92 = objc_msgSend(v90, "constraintEqualToAnchor:constant:", v91, *(double *)&qword_1004AF090);

      *(_QWORD *)(inited + 104) = v92;
      specialized Array._endMutation()(v93);
      sub_1000FFFEC(inited);
LABEL_19:
      v121 = (void *)objc_opt_self(NSLayoutConstraint);
      v122 = v135;
      sub_10002277C();
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v121, "activateConstraints:", isa, swift_bridgeObjectRelease(v122).n128_f64[0]);

      return;
    }
    v98 = objc_msgSend(v131, "topAnchor");
    v99 = &selRef_renderer_didAddNode_forAnchor_;
    v100 = objc_msgSend(v132, "bottomAnchor");
    v101 = objc_msgSend(v98, "constraintEqualToAnchor:constant:", v100, *(double *)&qword_1004AF090);

    v102 = objc_msgSend(v132, "topAnchor");
    v103 = objc_msgSend(v129, "bottomAnchor");
    v104 = objc_msgSend(v102, "constraintEqualToAnchor:constant:", v103, *(double *)&qword_1004AF090);

    v105 = objc_msgSend(v129, "topAnchor");
    v106 = objc_msgSend(v130, "bottomAnchor");
    v107 = objc_msgSend(v105, "constraintEqualToAnchor:constant:", v106, *(double *)&qword_1004AF090);

    if ((unint64_t)v7 >> 62)
    {
      if (v7 < 0)
        v124 = v7;
      else
        v124 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v7);
      v109 = _CocoaArrayWrapper.endIndex.getter(v124);
      swift_bridgeObjectRelease(v7);
      v110 = v109 + 3;
      if (!__OFADD__(v109, 3))
      {
LABEL_13:
        v111 = sub_100078D9C(v110, 1);
        specialized Array._endMutation()(v111);
        v99 = (char **)v101;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v99);
        v109 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v108 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v109 < v108 >> 1)
        {
LABEL_14:
          v112 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v109, v99);
          specialized Array._endMutation()(v112);
          v113 = v104;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v113);
          v115 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v114 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v115 >= v114 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v114 > 1, v115 + 1, 1);
          v116 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v115, v113);
          specialized Array._endMutation()(v116);
          v117 = v107;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v117);
          v119 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v118 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v119 >= v118 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v118 > 1, v119 + 1, 1);
          v120 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v119, v117);
          specialized Array._endMutation()(v120);

          goto LABEL_19;
        }
LABEL_26:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v108 > 1, v109 + 1, 1);
        goto LABEL_14;
      }
    }
    else
    {
      v108 = v7 & 0xFFFFFFFFFFFFF8;
      v109 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      v110 = v109 + 3;
      if (!__OFADD__(v109, 3))
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_26;
  }
  v94 = objc_msgSend(v2, "heightAnchor");
  v95 = objc_msgSend(v3, "currentTraitCollection");
  v96 = objc_msgSend(v95, "preferredContentSizeCategory");

  LOBYTE(v95) = UIContentSizeCategory.isAccessibilityCategory.getter(v96);
  v97 = 88.0;
  if ((v95 & 1) != 0)
    v97 = 222.0;
  v133 = objc_msgSend(v94, "constraintEqualToConstant:", v97);

  objc_msgSend(v133, "setActive:", 1);
}

void sub_1000783A4(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  float v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[13];
  uint64_t v38;
  uint64_t v39[14];
  _BYTE v40[120];
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Swift::String v79;
  Swift::String v80;

  v2 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v3 = objc_msgSend(v2, "preferredContentSizeCategory");

  LOBYTE(v2) = UIContentSizeCategory.isAccessibilityCategory.getter(v3);
  if ((v2 & 1) != 0)
  {
    sub_10004AC68(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(NSString *)(a1 + 24), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
    sub_100012C58(a1 + 144, (uint64_t)v40, &qword_10047F338);
    sub_100012C58((uint64_t)v40, (uint64_t)&v67, &qword_10047F338);
    v4 = v68;
    if (v68)
    {
      v35 = v71;
      v36 = v69;
      v25 = v67;
      v26 = v72;
      v5 = v74;
      v6 = v76;
      v31 = v75;
      v33 = v73;
      v7 = v78;
      v27 = v70;
      v29 = v77;
      v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v79._object = (void *)0xE000000000000000;
      v9._countAndFlagsBits = 0x4F49544156454C45;
      v9._object = (void *)0xE90000000000004ELL;
      v10._countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      v79._countAndFlagsBits = 0;
      v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v79);

      v54 = v11;
      v55 = v25;
      v56 = v4;
      v57 = v36;
      v58 = v27;
      v59 = v35;
      v60 = v26;
      v61 = v33;
      v62 = v5;
      v63 = v31;
      v64 = v6;
      v65 = v29;
      v66 = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v6);
      sub_1001258C4((uint64_t)&v54);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v11._object);
    }
    v12 = sub_10007912C(*(float32x4_t *)(a1 + 128));
    sub_1000A7B84((uint64_t)v37, v12);
    v13 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v80._object = (void *)0xE000000000000000;
    v14._countAndFlagsBits = 0x45434E4154534944;
    v14._object = (void *)0xED0000594157415FLL;
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    v80._countAndFlagsBits = 0;
    v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v80);

    v17 = v37[0];
    v18 = v37[1];
    v20 = v37[2];
    v19 = v37[3];
    v21 = v37[6];
    v22 = v37[8];
    v32 = v37[7];
    v34 = v37[5];
    v23 = v37[11];
    v24 = v38;
    v28 = v37[12];
    v30 = v37[10];
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    sub_10002150C(v37);
    v41 = v16;
    v42 = v17;
    v43 = v18;
    v44 = v20;
    v45 = v19;
    v46 = v34;
    v47 = v21;
    v48 = v32;
    v49 = v22;
    v50 = v30;
    v51 = v23;
    v52 = v28;
    v53 = v24;
    sub_1001258C4((uint64_t)&v41);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v16._object);
    sub_100079180(a1, v39);
    sub_10004AB58((uint64_t)v39);
    sub_1000793C0(v39);
  }
}

id sub_1000787A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Class isa;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = type metadata accessor for IndexPath(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  result = (id)__chkstk_darwin(v3);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v2;
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_numberOfRows);
  if ((v8 & 0x8000000000000000) == 0)
  {
    if (!v8)
    {
LABEL_8:
      v17 = v25;
      v18 = *(_QWORD *)(v25 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_labelStrip);
      objc_msgSend(*(id *)(v18 + OBJC_IVAR____TtC7Measure11LabelsStrip_primaryLabel), "setSelectedRange:", 0, 0);
      v19 = *(_QWORD *)(v18 + OBJC_IVAR____TtC7Measure11LabelsStrip_secondaryLabelStack);
      objc_msgSend(*(id *)(*(_QWORD *)(v19 + OBJC_IVAR____TtC7Measure22NewSecondaryLabelStack_topLabel)+ OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label), "setSelectedRange:", 0, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(v19 + OBJC_IVAR____TtC7Measure22NewSecondaryLabelStack_bottomLabel)+ OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label), "setSelectedRange:", 0, 0);
      v20 = *(_QWORD *)(v17 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityLabelStrip);
      objc_msgSend(*(id *)(v20 + OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_topLabel), "setSelectedRange:", 0, 0);
      objc_msgSend(*(id *)(v20 + OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_bottomLabel), "setSelectedRange:", 0, 0);
      v21 = *(_QWORD *)(v17 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityElevation);
      objc_msgSend(*(id *)(v21 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel), "setSelectedRange:", 0, 0);
      objc_msgSend(*(id *)(v21 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel), "setSelectedRange:", 0, 0);
      objc_msgSend(*(id *)(v21 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel), "setSelectedRange:", 0, 0);
      v22 = *(_QWORD *)(v17 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityDistance);
      objc_msgSend(*(id *)(v22 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_topLabel), "setSelectedRange:", 0, 0);
      objc_msgSend(*(id *)(v22 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_middleLabel), "setSelectedRange:", 0, 0);
      objc_msgSend(*(id *)(v22 + OBJC_IVAR____TtC7Measure24AccessibilityTripleStack_bottomLabel), "setSelectedRange:", 0, 0);
      v23 = *(_QWORD *)(v17 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityAngle);
      objc_msgSend(*(id *)(v23 + OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_topLabel), "setSelectedRange:", 0, 0);
      return objc_msgSend(*(id *)(v23 + OBJC_IVAR____TtC7Measure24AccessibilityDoubleStack_bottomLabel), "setSelectedRange:", 0, 0);
    }
    v9 = 0;
    v10 = *(void **)(v25 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_tableView);
    while (v8 != v9)
    {
      IndexPath.init(row:section:)(v9, 0);
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v12 = objc_msgSend(v10, "cellForRowAtIndexPath:", isa);

      if (!v12)
        return (id)(*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v13 = type metadata accessor for DetailedPlatterCellTableViewCell();
      v14 = swift_dynamicCastClass(v12, v13);
      if (!v14)
      {

        return (id)(*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      }
      ++v9;
      v15 = *(_QWORD *)(v14 + OBJC_IVAR____TtC7Measure32DetailedPlatterCellTableViewCell_measureContent);
      objc_msgSend(*(id *)(v15 + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits), "setSelectedRange:", 0, 0);
      v16 = *(_QWORD *)(v15 + OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels);
      objc_msgSend(*(id *)(*(_QWORD *)(v16 + OBJC_IVAR____TtC7Measure22NewSecondaryLabelStack_topLabel)+ OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label), "setSelectedRange:", 0, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(v16 + OBJC_IVAR____TtC7Measure22NewSecondaryLabelStack_bottomLabel)+ OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label), "setSelectedRange:", 0, 0);

      result = (id)(*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      if (v8 == v9)
        goto LABEL_8;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for LinePlatterSpatial()
{
  return objc_opt_self(_TtC7Measure18LinePlatterSpatial);
}

__n128 sub_100078CB8@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  _OWORD v6[7];

  sub_100075838(a1, (uint64_t *)v6);
  v3 = v6[5];
  *(_OWORD *)(a2 + 64) = v6[4];
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = v6[6];
  v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  result = (__n128)v6[3];
  *(_OWORD *)(a2 + 32) = v6[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t sub_100078D04()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_numberOfRows);
}

uint64_t sub_100078D18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_title);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_title + 8));
  return v1;
}

void *sub_100078D50()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_tableView);
  v2 = v1;
  return v1;
}

uint64_t sub_100078D7C()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure18LinePlatterSpatial_containerConfiguration));
}

uint64_t sub_100078D9C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

id sub_100078E58(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSString *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSString v14;
  Class isa;
  id v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  Swift::String v31;
  void *object;
  id v33;
  NSString v34;
  id v35;
  __int128 v37[2];
  int v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  char v51;
  char v52;
  _BYTE v53[848];
  _BYTE v54[848];

  v2 = type metadata accessor for MeasurementHistoryItem(0);
  sub_10001F970((const void *)(a1 + *(int *)(v2 + 28)), v53);
  sub_10001F970(v53, v54);
  v3 = 0;
  if (!sub_10001F9AC((uint64_t)v54))
  {
    v4 = sub_10001F9B8((uint64_t)v54);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = sub_10000EDC8(&qword_100486370);
    v7 = swift_allocObject(v6, 48, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1003B0BD0;
    *(_QWORD *)(v7 + 32) = NSFontAttributeName;
    v8 = (void *)objc_opt_self(UIFont);
    v9 = NSFontAttributeName;
    objc_msgSend(v8, "systemFontSize");
    *(_QWORD *)(v7 + 40) = objc_msgSend(v8, "systemFontOfSize:weight:");
    v10 = sub_1000C74F4(v7);
    swift_bridgeObjectRetain(v5);
    sub_10001FDC4(v10);
    v12 = v11;
    swift_bridgeObjectRelease(v10);
    v13 = objc_allocWithZone((Class)NSAttributedString);
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    type metadata accessor for Key(0);
    sub_100020800();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v16 = objc_msgSend(v13, "initWithString:attributes:", v14, isa, swift_bridgeObjectRelease(v12).n128_f64[0]);

    v3 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "initWithAttributedString:", v16);
    v17 = *(_QWORD *)(v4 + 8);
    v18 = *(_DWORD *)(v4 + 32);
    v19 = *(_BYTE *)(v4 + 36);
    v20 = *(_BYTE *)(v4 + 37);
    v21 = *(_QWORD *)(v4 + 40);
    v22 = *(_QWORD *)(v4 + 48);
    v23 = *(_DWORD *)(v4 + 72);
    v24 = *(_BYTE *)(v4 + 76);
    v25 = *(_BYTE *)(v4 + 77);
    v26 = *(_QWORD *)(v4 + 80);
    v27 = *(_QWORD *)(v4 + 88);
    v28 = *(_DWORD *)(v4 + 112);
    v29 = *(_BYTE *)(v4 + 116);
    v30 = *(_BYTE *)(v4 + 117);
    *(_QWORD *)&v37[0] = *(_QWORD *)v4;
    *((_QWORD *)&v37[0] + 1) = v17;
    v37[1] = *(_OWORD *)(v4 + 16);
    v38 = v18;
    v39 = v19;
    v40 = v20;
    v41 = v21;
    v42 = v22;
    v43 = *(_OWORD *)(v4 + 56);
    v44 = v23;
    v45 = v24;
    v46 = v25;
    v47 = v26;
    v48 = v27;
    v49 = *(_OWORD *)(v4 + 96);
    v50 = v28;
    v51 = v29;
    v52 = v30;
    v31._countAndFlagsBits = sub_1000189B0(v37);
    object = v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(object);
    v33 = objc_allocWithZone((Class)NSAttributedString);
    v34 = String._bridgeToObjectiveC()();
    v35 = objc_msgSend(v33, "initWithString:", v34, swift_bridgeObjectRelease(0xE100000000000000).n128_f64[0]);

    objc_msgSend(v3, "appendAttributedString:", v35);
  }
  return v3;
}

float sub_10007912C(float32x4_t a1)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  _QWORD v6[38];
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;

  static ComputedCameraProperties.shared.getter(v6);
  *(double *)v1.i64 = simd_float4x4.position.getter(v7, v8, v9, v10);
  v2 = vsubq_f32(a1, v1);
  v3 = vmulq_f32(v2, v2);
  return sqrtf(v3.f32[2] + vaddv_f32(*(float32x2_t *)v3.f32));
}

uint64_t sub_100079180@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  id v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22[8];
  float v23;
  char v24;
  Swift::String v25;
  Swift::String v26;

  sub_100012C58(a1 + 264, (uint64_t)v22, &qword_10047F0A8);
  result = sub_100012C58((uint64_t)v22, (uint64_t)&v23, &qword_10047F0A8);
  if ((v24 & 1) != 0 || (~LODWORD(v23) & 0x7F800000) == 0)
  {
    v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v5 = 0xE000000000000000;
    v25._object = (void *)0xE000000000000000;
    v6._countAndFlagsBits = 0x454C474E41;
    v6._object = (void *)0xE500000000000000;
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    v25._countAndFlagsBits = 0;
    v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v4, v7, v25);
    countAndFlagsBits = v8._countAndFlagsBits;
    object = v8._object;

    v11 = 0;
    result = 0;
    v12 = 0;
LABEL_7:
    *a2 = countAndFlagsBits;
    a2[1] = (uint64_t)object;
    a2[2] = v11;
    a2[3] = v5;
    a2[4] = result;
    a2[5] = v12;
    a2[6] = 0;
    a2[7] = 0xE000000000000000;
    a2[8] = 0;
    a2[9] = 0;
    a2[10] = 0;
    a2[11] = 0xE000000000000000;
    a2[12] = 0;
    a2[13] = 0;
    return result;
  }
  if (v23 <= -9.2234e18)
  {
    __break(1u);
  }
  else if (v23 < 9.2234e18)
  {
    v13 = (uint64_t)v23;
    v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v26._object = (void *)0xE000000000000000;
    v15._countAndFlagsBits = 0x454C474E41;
    v15._object = (void *)0xE500000000000000;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    v26._countAndFlagsBits = 0;
    v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v26);
    countAndFlagsBits = v17._countAndFlagsBits;
    object = v17._object;

    v18 = sub_10000EDC8((uint64_t *)&unk_10048A100);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_1003B0BD0;
    *(_QWORD *)(v19 + 56) = &type metadata for Int;
    *(_QWORD *)(v19 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v19 + 32) = v13;
    v11 = String.init(format:_:)(2965529637, 0xA400000000000000, v19);
    v5 = v20;
    v21 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_1003B0BD0;
    *(_QWORD *)(v21 + 56) = &type metadata for Int;
    *(_QWORD *)(v21 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v21 + 32) = v13;
    result = String.init(format:_:)(2965529637, 0xA400000000000000, v21);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000793C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[13];
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_100079448(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 104);
  v18 = *(_QWORD *)(a1 + 152);
  v19 = *(_QWORD *)(a1 + 144);
  v7 = *(_QWORD *)(a1 + 168);
  v17 = *(_QWORD *)(a1 + 160);
  v15 = *(_QWORD *)(a1 + 184);
  v16 = *(_QWORD *)(a1 + 176);
  v13 = *(_QWORD *)(a1 + 200);
  v14 = *(_QWORD *)(a1 + 192);
  v11 = *(_OWORD *)(a1 + 224);
  v12 = *(_OWORD *)(a1 + 208);
  v8 = *(_QWORD *)(a1 + 240);
  v9 = *(_QWORD *)(a1 + 248);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  sub_1000212A4(v19, v18, v17, v7, v16, v15, v14, v13, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v8, v9);
  return a1;
}

void sub_10007954C()
{
  char *v0;
  id v1;
  id v2;
  double v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *ObjCClassFromMetadata;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_minContentViewHeight] = 0x4071400000000000;
  v1 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v2 = objc_msgSend(v1, "preferredContentSizeCategory");

  LOBYTE(v1) = UIContentSizeCategory.isAccessibilityCategory.getter(v2);
  v3 = 88.0;
  if ((v1 & 1) != 0)
    v3 = 222.0;
  *(double *)&v0[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_tableRowHeight] = v3;
  v4 = &v0[OBJC_IVAR____TtC7Measure18LinePlatterSpatial_numberOfRowsChangedCallback];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_sketchView;
  v6 = type metadata accessor for SketchLine();
  *(_QWORD *)&v0[v5] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v6)), "init");
  v7 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_labelStrip;
  v8 = type metadata accessor for LabelsStrip();
  *(_QWORD *)&v0[v7] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v8)), "init");
  v9 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_tableView;
  v10 = type metadata accessor for IntrinsicTableView();
  *(_QWORD *)&v0[v9] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v10)), "init");
  v11 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityLabelStrip;
  v12 = type metadata accessor for AccessibilityDoubleStack();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v12);
  *(_QWORD *)&v0[v11] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v14 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityElevation;
  v15 = type metadata accessor for AccessibilityTripleStack();
  v16 = (objc_class *)swift_getObjCClassFromMetadata(v15);
  *(_QWORD *)&v0[v14] = objc_msgSend(objc_allocWithZone(v16), "init");
  v17 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityDistance;
  *(_QWORD *)&v0[v17] = objc_msgSend(objc_allocWithZone(v16), "init");
  v18 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilityAngle;
  *(_QWORD *)&v0[v18] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v19 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilitySeparatorOne;
  if (qword_10047A750 != -1)
    swift_once(&qword_10047A750, sub_10000EF04);
  v20 = *(double *)&qword_1004AF088;
  *(_QWORD *)&v0[v19] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, *(double *)&qword_1004AF088, 0.5);
  v21 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilitySeparatorTwo;
  *(_QWORD *)&v0[v21] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, v20, 0.5);
  v22 = OBJC_IVAR____TtC7Measure18LinePlatterSpatial_accessibilitySeparatorThree;
  *(_QWORD *)&v0[v22] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, v20, 0.5);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/LinePlatterSpatial.swift", 32, 2, 195, 0);
  __break(1u);
}

void sub_100079804(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  int v16;
  char *v17;
  id v18;
  id v19;
  double *v20;
  CGFloat a;
  char v22;
  uint64_t v23;
  double v24;
  CGFloat b;
  void *v26;
  id v27;
  double v28;
  double v29;
  double v30;
  char **v31;
  uint64_t v32;
  NSString v33;
  uint64_t v34;
  double v35;
  id v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  id v43;
  double v44;
  CGFloat v45;
  double v46;
  CGFloat tx;
  CGFloat ty;
  CGFloat v49;
  double v50;
  double v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  CGFloat v55;
  CGFloat v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  id v60;
  id v61;
  uint64_t v62;
  NSString v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  char v70;
  void (*v71)(_BYTE *__return_ptr, __n128);
  __n128 v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 v77;
  char v78;
  int v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  char *v95;
  void *v96;
  id v97;
  char *v98;
  double v99;
  double v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  uint64_t v109;
  id v110;
  __n128 v111;
  void *v112;
  uint64_t v113;
  void *v114;
  void *v115;
  void *v116;
  id v117;
  id v118;
  id v119;
  __n128 v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  char *v129;
  id v130;
  id v131;
  id v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  char *v141;
  __int128 v142;
  _BYTE v143[512];
  uint64_t v144;
  _OWORD v145[2];
  uint64_t v146;
  _OWORD v147[8];
  char v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  char v157;
  uint64_t v158;
  _OWORD v159[2];
  _BYTE v160[24];
  _BYTE v161[48];
  _BYTE v162[48];
  _BYTE v163[48];
  CGAffineTransform v164;
  _BYTE v165[48];
  CGAffineTransform v166;
  _QWORD v167[2];
  char v168;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v135 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10047A908 != -1)
    swift_once(&qword_10047A908, sub_10007A7E0);
  v15 = (void *)qword_10047F360;
  sub_100012C58(a1, (uint64_t)v147, &qword_10047DB20);
  v16 = sub_1000127D0((uint64_t *)v147);
  v138 = v9;
  v139 = v8;
  v136 = v12;
  v137 = v11;
  if (v16 == 1)
  {
    v17 = v14;
    v134 = xmmword_1003B39B0;
    v18 = v15;
    v19 = 0;
    v140 = 0u;
    v20 = _swiftEmptyArrayStorage;
    a = 1.0;
    v22 = 1;
    v23 = 0;
    v24 = 0.0;
    b = 0.0;
    v142 = 0u;
    v133 = 0u;
LABEL_70:
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    v112 = (void *)static OS_dispatch_queue.main.getter(v111);
    v113 = swift_allocObject(&unk_100442390, 152, 7);
    v114 = v141;
    *(_QWORD *)(v113 + 16) = v141;
    *(CGFloat *)(v113 + 24) = a;
    *(CGFloat *)(v113 + 32) = b;
    *(_OWORD *)(v113 + 40) = v134;
    *(_OWORD *)(v113 + 56) = v133;
    *(_OWORD *)(v113 + 72) = v140;
    *(_OWORD *)(v113 + 88) = v142;
    *(_QWORD *)(v113 + 104) = v19;
    *(_BYTE *)(v113 + 112) = v22;
    *(double *)(v113 + 120) = v24;
    *(_QWORD *)(v113 + 128) = v23;
    *(_QWORD *)(v113 + 136) = v18;
    *(_QWORD *)(v113 + 144) = v20;
    *(_QWORD *)&v143[32] = sub_10007BB20;
    *(_QWORD *)&v143[40] = v113;
    *(_QWORD *)v143 = _NSConcreteStackBlock;
    *(_QWORD *)&v143[8] = 1107296256;
    *(_QWORD *)&v143[16] = sub_10003ECA0;
    *(_QWORD *)&v143[24] = &unk_1004423A8;
    v115 = v18;
    v116 = _Block_copy(v143);
    v117 = v19;
    v118 = v115;
    v119 = v114;
    v120 = swift_release();
    v121 = v17;
    static DispatchQoS.unspecified.getter(v120);
    *(_QWORD *)v143 = _swiftEmptyArrayStorage;
    v122 = sub_100030E1C();
    v123 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v124 = sub_100030E64();
    v125 = v137;
    v126 = v139;
    dispatch thunk of SetAlgebra.init<A>(_:)(v143, v123, v124, v139, v122);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v121, v125, v116);
    _Block_release(v116);

    (*(void (**)(char *, uint64_t))(v138 + 8))(v125, v126);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v121, v136);
    return;
  }
  *(_QWORD *)&v134 = a2;
  v155 = v147[6];
  v156 = v147[7];
  v157 = v148;
  v151 = v147[2];
  v152 = v147[3];
  v153 = v147[4];
  v154 = v147[5];
  v149 = v147[0];
  v150 = v147[1];
  v26 = (void *)objc_opt_self(UIScreen);
  v131 = v15;
  v128 = a1;
  sub_100047648(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000476AC);
  v27 = objc_msgSend(v26, "mainScreen");
  objc_msgSend(v27, "scale");
  v29 = v28;

  v30 = v29 * *(double *)&v153;
  v130 = (id)objc_opt_self(NSUserDefaults);
  v31 = (char **)objc_msgSend(v130, "standardUserDefaults");
  v32 = *(_QWORD *)(Defaults.edgeDetectionUniqueContours.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v32);
  v33 = String._bridgeToObjectiveC()();
  LODWORD(v32) = objc_msgSend(v31, "BOOLForKey:", v33, swift_bridgeObjectRelease(v32).n128_f64[0]);

  v34 = v150;
  v129 = v14;
  if ((_DWORD)v32)
  {
    if (qword_10047A8F0 != -1)
    {
      v31 = &selRef_setOverlaySKScene_;
      swift_once(&qword_10047A8F0, sub_10007A798);
    }
    v35 = v30 * *(double *)&qword_10047F340;
    if ((~COERCE__INT64(v30 * *(double *)&qword_10047F340) & 0x7FF0000000000000) != 0)
    {
      if (v35 > -2147483650.0)
      {
        if (v35 < 2147483650.0)
        {
          v36 = objc_msgSend((id)objc_opt_self(OpenCVWrapper), "makeCVImageFromUniqueContours:lineThickness:", v34, (int)v35);
          goto LABEL_18;
        }
        goto LABEL_76;
      }
      goto LABEL_74;
    }
    __break(1u);
  }
  else if (qword_10047A8F0 == -1)
  {
    goto LABEL_13;
  }
  v31 = &selRef_setOverlaySKScene_;
  swift_once(&qword_10047A8F0, sub_10007A798);
LABEL_13:
  v37 = v30 * *(double *)&qword_10047F340;
  if ((~COERCE__INT64(v30 * *(double *)&qword_10047F340) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if (v37 <= -2147483650.0)
  {
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  if (v37 >= 2147483650.0)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v31 = (char **)(int)v37;
  if (qword_10047A918 != -1)
LABEL_78:
    swift_once(&qword_10047A918, sub_10007A8B0);
  v36 = objc_msgSend((id)objc_opt_self(OpenCVWrapper), "makeCVImageFromContours:lineThickness:color:", v34, v31, qword_10047F370);
LABEL_18:
  v132 = v36;
  v158 = *((_QWORD *)&v154 + 1);
  v38 = *(_QWORD *)(*((_QWORD *)&v154 + 1) + 16);
  if (v38)
  {
    v39 = swift_bridgeObjectRetain(*((_QWORD *)&v154 + 1)) + 64;
    v20 = _swiftEmptyArrayStorage;
    do
    {
      if ((*(_BYTE *)(v39 + 56) & 1) != 0)
      {
        v142 = *(_OWORD *)v39;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
          v20 = sub_10005F7B4(0, *((_QWORD *)v20 + 2) + 1, 1, (uint64_t)v20);
        v41 = *((_QWORD *)v20 + 2);
        v40 = *((_QWORD *)v20 + 3);
        if (v41 >= v40 >> 1)
          v20 = sub_10005F7B4((double *)(v40 > 1), v41 + 1, 1, (uint64_t)v20);
        *((_QWORD *)v20 + 2) = v41 + 1;
        *(_OWORD *)&v20[2 * v41 + 4] = v142;
        swift_release();
      }
      v39 += 96;
      --v38;
    }
    while (v38);
    sub_10007BB44(&v158);
  }
  else
  {
    v20 = _swiftEmptyArrayStorage;
  }
  v42 = (void *)objc_opt_self(OpenCVWrapper);
  v43 = v132;
  v19 = objc_msgSend(v42, "makeUIImageFromCVImage:", v132);
  v142 = v152;
  v140 = v151;
  objc_msgSend(v19, "size");
  v45 = 1.0 / v44;
  objc_msgSend(v19, "size");
  CGAffineTransformMakeScale(&v164, v45, 1.0 / v46);
  v133 = *(_OWORD *)&v164.a;
  v127 = *(_OWORD *)&v164.c;
  tx = v164.tx;
  ty = v164.ty;
  objc_msgSend(v19, "size");
  v49 = *((double *)&v142 + 1);
  ARCameraImageToViewTransform(&v164, v134, 0, v50, v51, *(double *)&v142, *((double *)&v142 + 1));
  v52 = *(_OWORD *)&v164.a;
  v53 = *(_OWORD *)&v164.c;
  v54 = *(_OWORD *)&v164.tx;
  *(_OWORD *)&v164.a = v133;
  *(_OWORD *)&v164.c = v127;
  v164.tx = tx;
  v164.ty = ty;
  *(_OWORD *)v143 = v52;
  *(_OWORD *)&v143[16] = v53;
  *(_OWORD *)&v143[32] = v54;
  CGAffineTransformConcat(&v166, &v164, (CGAffineTransform *)v143);
  v133 = *(_OWORD *)&v166.c;
  v134 = *(_OWORD *)&v166.a;
  v55 = v166.tx;
  v56 = v166.ty;
  CGAffineTransformMakeScale(&v164, *(CGFloat *)&v142, v49);
  v57 = *(_OWORD *)&v164.a;
  v58 = *(_OWORD *)&v164.c;
  v59 = *(_OWORD *)&v164.tx;
  *(_OWORD *)&v164.a = v134;
  *(_OWORD *)&v164.c = v133;
  v164.tx = v55;
  v164.ty = v56;
  *(_OWORD *)v143 = v57;
  *(_OWORD *)&v143[16] = v58;
  *(_OWORD *)&v143[32] = v59;
  CGAffineTransformConcat(&v166, &v164, (CGAffineTransform *)v143);
  a = v166.a;
  b = v166.b;
  v133 = *(_OWORD *)&v166.tx;
  v134 = *(_OWORD *)&v166.c;
  v60 = v19;
  v61 = objc_msgSend(v130, "standardUserDefaults");
  v62 = *(_QWORD *)(Defaults.edgeDetectionDebugReticleEnabled.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v62);
  v63 = String._bridgeToObjectiveC()();
  LODWORD(v62) = objc_msgSend(v61, "BOOLForKey:", v63, swift_bridgeObjectRelease(v62).n128_f64[0]);

  if (!(_DWORD)v62)
  {
    v17 = v129;

    sub_100047648(v128, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000475C4);
    v22 = 1;
    v23 = 0;
    v24 = 0.0;
    v18 = v131;
    goto LABEL_70;
  }
  v130 = v60;
  v64 = v141;
  v65 = (uint64_t)&v141[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_reticlePoint];
  sub_100012C58((uint64_t)&v141[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_reticlePoint], (uint64_t)v163, &qword_10047F0B8);
  v66 = *(_QWORD *)(v65 + 16);
  v67 = *(_QWORD *)(v65 + 24);
  v68 = *(unsigned __int8 *)(v65 + 32);
  sub_100012C58((uint64_t)v163, (uint64_t)v165, &qword_10047F0B8);
  v69 = v165[32] == 3 || v68 == 2;
  v70 = v69;
  if (v69)
  {
    v66 = 0;
    v67 = 0;
  }
  v71 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)&v64[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView__frameState]
                                                           + 144);
  v72 = swift_retain();
  v71(v143, v72);
  swift_release();
  memcpy(&v164, v143, 0x200uLL);
  v73.n128_f64[0] = a3;
  v74 = sub_1000711C8(v66, v67, v70, (uint64_t)v163, (__n128 *)&v164, v73, a4);
  v76 = v75;
  v78 = v77;
  v79 = v77;
  sub_100012C00((uint64_t)&v164);
  v80 = v129;
  if (v79 == 2)
  {
    sub_100012C58(v65, (uint64_t)v162, &qword_10047F0B8);
    v81 = *(_QWORD *)(v65 + 16);
    v82 = *(_QWORD *)(v65 + 24);
    v83 = *(unsigned __int8 *)(v65 + 32);
    sub_100012C58((uint64_t)v162, (uint64_t)&v166, &qword_10047F0B8);
    v84 = LOBYTE(v166.tx) == 3 || v83 == 2;
    v85 = v84;
    if (v84)
      v86 = 0;
    else
      v86 = v81;
    if (v84)
      v87 = 0;
    else
      v87 = v82;
    v74 = sub_100071604(v86, v87, v85, (uint64_t)v162, a3, a4);
    v76 = v88;
    v78 = v89;
  }
  sub_100012C58(v65, (uint64_t)v161, &qword_10047F0B8);
  sub_100071928((uint64_t)v161, v74, v76, v78, (uint64_t)&v144);
  v90 = LODWORD(v145[0]);
  v91 = BYTE8(v145[1]);
  v92 = v146;
  *(_QWORD *)v65 = v144;
  *(_QWORD *)(v65 + 8) = v90;
  *(_OWORD *)(v65 + 16) = *(_OWORD *)((char *)v145 + 8);
  *(_QWORD *)(v65 + 32) = v91;
  *(_QWORD *)(v65 + 40) = v92;
  v159[0] = v145[0];
  *(_OWORD *)((char *)v159 + 9) = *(_OWORD *)((char *)v145 + 9);
  sub_100012C58((uint64_t)v159 + 8, (uint64_t)v160, &qword_10047F0C0);
  sub_100012C58((uint64_t)v160, (uint64_t)v167, &qword_10047F0C0);
  v18 = v131;
  if (v168 == 2)
  {
LABEL_62:
    (*(void (**)(_BYTE *__return_ptr))(**((_QWORD **)&v155 + 1) + 144))(v143);
    if ((v143[72] & 1) != 0 || *(float *)(v149 + 196) >= *(float *)&v143[68])
    {
      v17 = v80;

      sub_100047648(v128, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000475C4);
      v22 = 1;
      v23 = 0;
      v24 = 0.0;
    }
    else
    {
      v102 = static CGSize.* infix(_:_:)(*(double *)&v142, v49, 0.5);
      v104 = CGPoint.init(_:)(v102, v103);
      v106 = static CGPoint.+ infix(_:_:)(*(double *)&v140, *((double *)&v140 + 1), v104, v105);
      if (qword_10047A900 != -1)
        swift_once(&qword_10047A900, sub_10007A7B8);
      v17 = v80;
      v107 = static CGSize.* infix(_:_:)(*(double *)&qword_10047F350, *(double *)algn_10047F358, 0.5);
      CGPoint.init(_:)(v107, v108);
      v24 = static CGPoint.- infix(_:_:)(v106);
      v23 = v109;
      if (qword_10047A910 != -1)
        swift_once(&qword_10047A910, sub_10007A848);
      v110 = (id)qword_10047F368;

      sub_100047648(v128, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000475C4);
      v22 = 0;
      v18 = v110;
    }
    goto LABEL_70;
  }
  v93 = *(double *)v167;
  v94 = *(double *)&v167[1];
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  if (*((_QWORD *)&xmmword_1004AF228 + 1))
  {
    v95 = *(char **)(*((_QWORD *)&xmmword_1004AF228 + 1) + qword_10048A350);
    if (v95)
    {
      v96 = *(void **)&v95[OBJC_IVAR____TtC7Measure11ReticleView_reticleBoundsLayer];
      v97 = *((id *)&xmmword_1004AF228 + 1);
      v98 = v95;
      objc_msgSend(v96, "convertPoint:fromLayer:", 0, v93, v94);
      LODWORD(v96) = objc_msgSend(v96, "containsPoint:");

      if ((_DWORD)v96)
      {
        v17 = v80;
        if (qword_10047A900 != -1)
          swift_once(&qword_10047A900, sub_10007A7B8);
        v99 = static CGSize.* infix(_:_:)(*(double *)&qword_10047F350, *(double *)algn_10047F358, 0.5);
        CGPoint.init(_:)(v99, v100);
        v24 = static CGPoint.- infix(_:_:)(v93);
        v23 = v101;

        sub_100047648(v128, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000475C4);
        v22 = 0;
        goto LABEL_70;
      }
    }
    goto LABEL_62;
  }

  __break(1u);
}

uint64_t sub_10007A4EC(unint64_t a1, unint64_t a2, char a3, __n128 *a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  __n128 v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __n128 v36;
  int v37;
  uint64_t v38;
  _QWORD aBlock[6];

  v5 = v4;
  v37 = a3 & 1;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = 0;
  v18 = 0.0;
  if ((a3 & 1) == 0)
  {
    v19.n128_u64[0] = a1;
    v19.n128_u64[1] = a2;
    v36 = v19;
    v20 = type metadata accessor for MeasureCamera(0);
    static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v20, v36, a4[11], a4[12], a4[13], a4[14], a4[2].n128_f64[0]);
    v22 = CGPoint.init(xy:)(v21);
    if (qword_10047A900 != -1)
      swift_once(&qword_10047A900, sub_10007A7B8);
    v23 = static CGSize.* infix(_:_:)(*(double *)&qword_10047F350, *(double *)algn_10047F358, 0.5);
    CGPoint.init(_:)(v23, v24);
    v18 = static CGPoint.- infix(_:_:)(v22);
    v17 = v25;
  }
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  v27 = (void *)static OS_dispatch_queue.main.getter(v26);
  v28 = swift_allocObject(&unk_100442340, 48, 7);
  *(_QWORD *)(v28 + 16) = v5;
  *(_BYTE *)(v28 + 24) = v37;
  *(double *)(v28 + 32) = v18;
  *(_QWORD *)(v28 + 40) = v17;
  aBlock[4] = sub_10007BA60;
  aBlock[5] = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100442358;
  v29 = _Block_copy(aBlock);
  v30 = v5;
  v31 = swift_release();
  static DispatchQoS.unspecified.getter(v31);
  aBlock[0] = _swiftEmptyArrayStorage;
  v32 = sub_100030E1C();
  v33 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v34 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v33, v34, v10, v32);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v12, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

void sub_10007A798()
{
  qword_10047F340 = 0x3FF0000000000000;
}

void sub_10007A7A8()
{
  qword_10047F348 = 0x4014000000000000;
}

void sub_10007A7B8()
{
  uint64_t v0;

  qword_10047F350 = CGSize.init(_:_:)(5.0, 5.0);
  *(_QWORD *)algn_10047F358 = v0;
}

UIColor sub_10007A7E0()
{
  UIColor result;

  sub_100018148(0, &qword_10047D0A0, UIColor_ptr);
  result.super.isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.47451, 0.83922, 0.97647, 1.0).super.isa;
  qword_10047F360 = (uint64_t)result.super.isa;
  return result;
}

UIColor sub_10007A848()
{
  UIColor result;

  sub_100018148(0, &qword_10047D0A0, UIColor_ptr);
  result.super.isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.7451, 0.15686, 0.07451, 1.0).super.isa;
  qword_10047F368 = (uint64_t)result.super.isa;
  return result;
}

UIColor sub_10007A8B0()
{
  UIColor result;

  sub_100018148(0, &qword_10047D0A0, UIColor_ptr);
  result.super.isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.7451, 0.15686, 0.07451, 1.0).super.isa;
  qword_10047F370 = (uint64_t)result.super.isa;
  return result;
}

UIColor sub_10007A918()
{
  UIColor result;

  sub_100018148(0, &qword_10047D0A0, UIColor_ptr);
  result.super.isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.9098, 0.47843, 0.64314, 1.0).super.isa;
  qword_10047F378 = (uint64_t)result.super.isa;
  return result;
}

UIColor sub_10007A980()
{
  UIColor result;

  sub_100018148(0, &qword_10047D0A0, UIColor_ptr);
  result.super.isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.9098, 0.47843, 0.64314, 1.0).super.isa;
  qword_10047F380 = (uint64_t)result.super.isa;
  return result;
}

char *sub_10007A9E8(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v5;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, __n128);
  __n128 v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  char *v32;
  uint64_t v33;
  char *v34;
  objc_class *ObjectType;
  objc_super v37;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType(v4);
  v10 = OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView__frameState;
  KeyPath = swift_getKeyPath(&unk_1003B39E8);
  v12 = sub_10000EDC8(&qword_10047BBD0);
  v13 = qword_10047AD88;
  v14 = v5;
  if (v13 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v15 = qword_1004AF890;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v12 + 272);
  v17 = swift_retain();
  *(_QWORD *)&v5[v10] = v16(KeyPath, v15, v17);
  *(_QWORD *)&v14[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_cornerViews] = _swiftEmptyArrayStorage;
  v18 = &v14[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_reticlePoint];
  *(_OWORD *)v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  *((_OWORD *)v18 + 2) = xmmword_1003B39C0;
  v14[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_isRenderingEdges] = 0;
  v14[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_isRenderingLines] = 0;
  v14[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_isRenderingSmoothLines] = 0;
  v19 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  *(_QWORD *)&v14[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_imageView] = v19;
  objc_msgSend(v19, "setContentMode:", 4);
  objc_msgSend(v19, "setAlpha:", 0.65);
  objc_msgSend(v19, "setHidden:", 1);
  objc_msgSend(v19, "setOpaque:", 0);
  v20 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  *(_QWORD *)&v14[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_edgeView] = v20;
  objc_msgSend(v20, "setContentMode:", 4);
  objc_msgSend(v20, "setAlpha:", 0.65);
  objc_msgSend(v20, "setHidden:", 1);
  objc_msgSend(v20, "setOpaque:", 0);
  v21 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  *(_QWORD *)&v14[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_lineView] = v21;
  objc_msgSend(v21, "setContentMode:", 4);
  objc_msgSend(v21, "setAlpha:", 0.75);
  objc_msgSend(v21, "setHidden:", 1);
  objc_msgSend(v21, "setOpaque:", 0);
  v22 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  *(_QWORD *)&v14[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_smoothLineView] = v22;
  objc_msgSend(v22, "setContentMode:", 4);
  objc_msgSend(v22, "setAlpha:", 0.85);
  objc_msgSend(v22, "setHidden:", 0);
  objc_msgSend(v22, "setOpaque:", 0);
  if (qword_10047A900 != -1)
    swift_once(&qword_10047A900, sub_10007A7B8);
  v23 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, *(double *)&qword_10047F350, *(double *)algn_10047F358);
  v24 = OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_pointView;
  *(_QWORD *)&v14[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_pointView] = v23;
  objc_msgSend(v23, "setContentMode:", 4);
  v25 = qword_10047A908;
  v26 = v23;
  if (v25 != -1)
    swift_once(&qword_10047A908, sub_10007A7E0);
  objc_msgSend(v26, "setBackgroundColor:", qword_10047F360);

  objc_msgSend(*(id *)&v14[v24], "setHidden:", 1);
  v27 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, *(double *)&qword_10047F350, *(double *)algn_10047F358);
  v28 = OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_unprojectedPointView;
  *(_QWORD *)&v14[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_unprojectedPointView] = v27;
  objc_msgSend(v27, "setContentMode:", 4);
  v29 = qword_10047A928;
  v30 = v27;
  if (v29 != -1)
    swift_once(&qword_10047A928, sub_10007A980);
  objc_msgSend(v30, "setBackgroundColor:", qword_10047F380);

  v31 = *(id *)&v14[v28];
  objc_msgSend(v31, "setHidden:", 1);

  v37.receiver = v14;
  v37.super_class = ObjectType;
  v32 = (char *)objc_msgSendSuper2(&v37, "initWithFrame:", a1, a2, a3, a4);
  v33 = *(_QWORD *)&v32[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_imageView];
  v34 = v32;
  objc_msgSend(v34, "addSubview:", v33);
  objc_msgSend(v34, "addSubview:", *(_QWORD *)&v34[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_edgeView]);
  objc_msgSend(v34, "addSubview:", *(_QWORD *)&v34[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_lineView]);
  objc_msgSend(v34, "addSubview:", *(_QWORD *)&v34[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_smoothLineView]);
  objc_msgSend(v34, "addSubview:", *(_QWORD *)&v34[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_pointView]);
  objc_msgSend(v34, "addSubview:", *(_QWORD *)&v34[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_unprojectedPointView]);
  objc_msgSend(v34, "setUserInteractionEnabled:", 0);

  return v34;
}

void sub_10007AF64(char *a1, __int128 *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  unsigned int v26;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  double v38;
  uint64_t v39;
  id v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  _BYTE v60[24];
  _OWORD v61[2];
  uint64_t v62;
  uint64_t v63;

  v57 = a2[1];
  v58 = *a2;
  v22 = *((_QWORD *)a2 + 4);
  v23 = *((_QWORD *)a2 + 5);
  v24 = *(void **)&a1[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_imageView];
  v25 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v26 = objc_msgSend(v25, "kEdgeDetectionDebugReticleEnabled");

  objc_msgSend(v24, "setHidden:", v26 ^ 1);
  v61[0] = v58;
  v61[1] = v57;
  v62 = v22;
  v63 = v23;
  objc_msgSend(v24, "setTransform:", v61);
  objc_msgSend(v24, "setFrame:", a7, a8, a9, a10);
  objc_msgSend(v24, "setImage:", a3);
  v27 = *(void **)&a1[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_pointView];
  objc_msgSend(v27, "setHidden:", a4 & 1);
  objc_msgSend(v27, "frame");
  objc_msgSend(v27, "setFrame:", a11, a12);
  objc_msgSend(v27, "setBackgroundColor:", a5);
  v28 = (uint64_t *)&a1[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_cornerViews];
  swift_beginAccess(&a1[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_cornerViews], v61, 0, 0);
  v29 = *v28;
  if ((unint64_t)*v28 >> 62)
  {
    if (v29 < 0)
      v34 = *v28;
    else
      v34 = v29 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(*v28, 2);
    v30 = _CocoaArrayWrapper.endIndex.getter(v34);
    if (v30)
      goto LABEL_3;
  }
  else
  {
    v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(*v28, 2);
    if (v30)
    {
LABEL_3:
      if (v30 < 1)
        goto LABEL_37;
      for (i = 0; i != v30; ++i)
      {
        if ((v29 & 0xC000000000000001) != 0)
          v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v29);
        else
          v32 = *(id *)(v29 + 8 * i + 32);
        v33 = v32;
        objc_msgSend(v32, "setHidden:", 1, v57, v58);

      }
    }
  }
  swift_bridgeObjectRelease_n(v29, 2);
  v35 = *(_QWORD *)(a6 + 16);
  if (!v35)
    return;
  v36 = 0;
  for (j = swift_bridgeObjectRetain(a6) + 40; ; j += 16)
  {
    v38 = *(double *)(j - 8);
    v39 = *v28;
    if ((unint64_t)*v28 >> 62)
    {
      if (v39 < 0)
        v55 = *v28;
      else
        v55 = v39 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v28);
      v56 = _CocoaArrayWrapper.endIndex.getter(v55);
      swift_bridgeObjectRelease(v39);
      if (v36 < v56)
        goto LABEL_24;
    }
    else if (v36 < *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_24;
    }
    if (qword_10047A8F8 != -1)
      swift_once(&qword_10047A8F8, sub_10007A7A8);
    v40 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, *(double *)&qword_10047F348, *(double *)&qword_10047F348);
    objc_msgSend(v40, "setContentMode:", 4);
    if (qword_10047A920 != -1)
      swift_once(&qword_10047A920, sub_10007A918);
    objc_msgSend(v40, "setBackgroundColor:", qword_10047F378, v57, v58);
    objc_msgSend(a1, "addSubview:", v40);
    swift_beginAccess(v28, v60, 33, 0);
    v41 = v40;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v41);
    v43 = *(_QWORD *)((*v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v42 = *(_QWORD *)((*v28 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v43 >= v42 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
    v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v41);
    specialized Array._endMutation()(v44);
    swift_endAccess(v60);

LABEL_24:
    swift_beginAccess(v28, v60, 32, 0);
    v45 = *v28;
    if ((*v28 & 0xC000000000000001) != 0)
    {
      v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v45);
      goto LABEL_27;
    }
    if ((unint64_t)v36 >= *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10))
      break;
    v46 = *(id *)(v45 + 8 * v36 + 32);
LABEL_27:
    v47 = v46;
    ++v36;
    objc_msgSend(v46, "setHidden:", 0, swift_endAccess(v60).n128_f64[0]);
    objc_msgSend(v47, "frame");
    v50 = static CGSize.* infix(_:_:)(v48, v49, 0.5);
    CGPoint.init(_:)(v50, v51);
    v52 = static CGPoint.- infix(_:_:)(v38);
    v54 = v53;
    objc_msgSend(v47, "frame");
    objc_msgSend(v47, "setFrame:", v52, v54);

    if (v35 == v36)
    {
      swift_bridgeObjectRelease(a6);
      return;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
}

void sub_10007B454(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  CGFloat Width;
  CGContext *v23;
  id v24;
  CGColor *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  UIImage *v31;
  UIImage *v32;
  CGFloat v33;
  CGFloat Height;
  void *v35;
  CGFloat *v36;
  void *v37;
  CGFloat *v38;
  id v39;
  UIImage *v40;
  __n128 v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  CGContextRef v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  CGContextRef v49;
  _QWORD aBlock[5];
  CGFloat *v51;
  CGSize v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  if (!*((_QWORD *)&xmmword_1004AF228 + 1))
  {
    __break(1u);
    goto LABEL_16;
  }
  v12 = objc_msgSend(*((id *)&xmmword_1004AF228 + 1), "view");
  if (!v12)
  {
LABEL_16:
    __break(1u);
    return;
  }
  v13 = v12;
  objc_msgSend(v12, "bounds");
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;

  v53.origin.x = v15;
  v53.origin.y = v17;
  v53.size.width = v19;
  v53.size.height = v21;
  Width = CGRectGetWidth(v53);
  v54.origin.x = v15;
  v54.origin.y = v17;
  v54.size.width = v19;
  v54.size.height = v21;
  v52.height = CGRectGetHeight(v54);
  v52.width = Width;
  UIGraphicsBeginImageContextWithOptions(v52, 0, 0.0);
  objc_msgSend(v48, "drawAtPoint:", 0.0, 0.0);
  v23 = UIGraphicsGetCurrentContext();
  if (v23)
  {
    v47 = v5;
    v49 = v23;
    CGContextSetLineWidth(v23, 1.2);
    v24 = objc_msgSend((id)objc_opt_self(UIColor), "greenColor");
    v25 = (CGColor *)objc_msgSend(v24, "CGColor");

    CGContextSetStrokeColorWithColor(v49, v25);
    v26 = *(_QWORD *)(a1 + 16);
    if (v26)
    {
      v27 = swift_bridgeObjectRetain(a1);
      v28 = (double *)(a1 + 56);
      do
      {
        v29 = *(v28 - 1);
        v30 = *v28;
        CGContextRef.move(to:)(v27, *(v28 - 3), *(v28 - 2));
        CGContextRef.addLine(to:)(v29, v30);
        CGContextStrokePath(v49);
        v28 += 4;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease(a1);
    }
    v31 = UIGraphicsGetImageFromCurrentImageContext();
    if (v31)
    {
      v32 = v31;
      UIGraphicsEndImageContext();
      v55.origin.x = v15;
      v55.origin.y = v17;
      v55.size.width = v19;
      v55.size.height = v21;
      v33 = CGRectGetWidth(v55);
      v56.origin.x = v15;
      v56.origin.y = v17;
      v56.size.width = v19;
      v56.size.height = v21;
      Height = CGRectGetHeight(v56);
      sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
      v35 = (void *)static OS_dispatch_queue.main.getter();
      v36 = (CGFloat *)swift_allocObject(&unk_1004423E0, 64, 7);
      v36[3] = 0.0;
      v36[4] = 0.0;
      *((_QWORD *)v36 + 2) = v2;
      v36[5] = v33;
      v36[6] = Height;
      *((_QWORD *)v36 + 7) = v32;
      aBlock[4] = sub_10007BCD4;
      v51 = v36;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10003ECA0;
      aBlock[3] = &unk_1004423F8;
      v37 = _Block_copy(aBlock);
      v38 = v51;
      v39 = v2;
      v40 = v32;
      v41 = swift_release(v38);
      static DispatchQoS.unspecified.getter(v41);
      aBlock[0] = _swiftEmptyArrayStorage;
      v42 = sub_100030E1C();
      v43 = sub_10000EDC8((uint64_t *)&unk_10047E430);
      v44 = sub_100030E64();
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v43, v44, v4, v42);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v37);
      _Block_release(v37);

      (*(void (**)(char *, uint64_t))(v47 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return;
    }

    v45 = v49;
  }
  else
  {
    UIGraphicsEndImageContext();
    v45 = (CGContextRef)v48;
  }

}

id sub_10007B8B8(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  void *v11;
  id v12;
  unsigned int v13;

  v11 = *(void **)(a1 + OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_smoothLineView);
  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v13 = objc_msgSend(v12, "showEDLines");

  objc_msgSend(v11, "setHidden:", v13 ^ 1);
  objc_msgSend(v11, "setFrame:", a3, a4, a5, a6);
  return objc_msgSend(v11, "setImage:", a2);
}

uint64_t type metadata accessor for EdgeDetectorDebugView()
{
  return objc_opt_self(_TtC7Measure21EdgeDetectorDebugView);
}

uint64_t sub_10007BA3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

id sub_10007BA60()
{
  uint64_t v0;
  double v1;
  double v2;
  void *v3;

  v1 = *(double *)(v0 + 32);
  v2 = *(double *)(v0 + 40);
  v3 = *(void **)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_unprojectedPointView);
  objc_msgSend(v3, "setHidden:", *(unsigned __int8 *)(v0 + 24));
  objc_msgSend(v3, "frame");
  return objc_msgSend(v3, "setFrame:", v1, v2);
}

uint64_t sub_10007BACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007BADC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10007BAE4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  return swift_deallocObject(v0, 152, 7);
}

void sub_10007BB20()
{
  uint64_t v0;

  sub_10007AF64(*(char **)(v0 + 16), (__int128 *)(v0 + 24), *(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96), *(double *)(v0 + 120), *(double *)(v0 + 128));
}

_QWORD *sub_10007BB44(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

void sub_10007BB6C()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, __n128);
  __n128 v7;
  _OWORD *v8;

  v1 = v0;
  v2 = OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView__frameState;
  KeyPath = swift_getKeyPath(&unk_1003B39E8);
  v4 = sub_10000EDC8(&qword_10047BBD0);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v5 = qword_1004AF890;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 272);
  v7 = swift_retain();
  *(_QWORD *)&v1[v2] = v6(KeyPath, v5, v7);
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_cornerViews] = _swiftEmptyArrayStorage;
  v8 = &v1[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_reticlePoint];
  *v8 = 0u;
  v8[1] = 0u;
  v8[2] = xmmword_1003B39C0;
  v1[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_isRenderingEdges] = 0;
  v1[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_isRenderingLines] = 0;
  v1[OBJC_IVAR____TtC7Measure21EdgeDetectorDebugView_isRenderingSmoothLines] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/EdgeDetectorDebugView.swift", 35, 2, 93, 0);
  __break(1u);
}

uint64_t sub_10007BCA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

id sub_10007BCD4()
{
  uint64_t v0;

  return sub_10007B8B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 56), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

void sub_10007BDC8(char a1)
{
  uint64_t v1;
  int v2;
  float v3;

  v2 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7Measure10EditButton_isInputEnabled);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure10EditButton_isInputEnabled) = a1;
  if (v2 != (a1 & 1) && (*(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure10EditButton_editEnabled) & 1) != 0)
  {
    v3 = 0.5;
    if ((a1 & 1) != 0)
      v3 = 1.0;
    sub_10007CC5C(v3);
  }
}

char *sub_10007BE0C(unsigned __int8 a1, double a2, double a3, double a4, double a5)
{
  char *v5;
  int v10;
  objc_class *ObjectType;
  char *v12;
  uint64_t v13;
  char *v14;
  NSString v15;
  id v16;
  id v17;
  id v18;
  char *v19;
  id v20;
  double Width;
  id v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  objc_class *v31;
  NSString *v32;
  id v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  uint64_t v38;
  void *v39;
  char *result;
  id v41;
  uint64_t v42;
  uint64_t ObjCClassFromMetadata;
  id v44;
  NSString v45;
  id v46;
  id v47;
  double v48;
  id v49;
  id v50;
  id v51;
  id v52;
  double v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  char *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  id v64;
  void *v65;
  uint64_t v66;
  float v67;
  float v68;
  objc_super v69;
  objc_super v70;
  CGRect v71;

  v10 = a1;
  ObjectType = (objc_class *)swift_getObjectType(v5);
  v12 = &v5[OBJC_IVAR____TtC7Measure10EditButton_delegate];
  *((_QWORD *)v12 + 1) = 0;
  swift_unknownObjectWeakInit(v12, 0);
  *(_QWORD *)&v5[OBJC_IVAR____TtC7Measure10EditButton_animatingView] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7Measure10EditButton_animatingBlur] = 0;
  v13 = OBJC_IVAR____TtC7Measure10EditButton_pressUpDownAnimation;
  v14 = v5;
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend((id)objc_opt_self(CASpringAnimation), "animationWithKeyPath:", v15);

  *(_QWORD *)&v5[v13] = v16;
  v14[OBJC_IVAR____TtC7Measure10EditButton_editState] = 0;
  v14[OBJC_IVAR____TtC7Measure10EditButton_editEnabled] = 1;
  v14[OBJC_IVAR____TtC7Measure10EditButton_isInputEnabled] = 0;
  v14[OBJC_IVAR____TtC7Measure10EditButton_isShowingAccessibilityHUD] = 0;

  v70.receiver = v14;
  v70.super_class = ObjectType;
  v17 = objc_msgSendSuper2(&v70, "initWithFrame:", a2, a3, a4, a5);
  v18 = objc_allocWithZone((Class)UIPointerInteraction);
  v19 = (char *)v17;
  v20 = objc_msgSend(v18, "initWithDelegate:", v19);
  objc_msgSend(v19, "addInteraction:", v20);
  objc_msgSend(v19, "bounds");
  Width = CGRectGetWidth(v71);
  v22 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  objc_msgSend(v19, "setUserInteractionEnabled:", 1);
  if ((v10 - 1) > 1)
  {
    v41 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
    v42 = type metadata accessor for ViewController(0);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v42);
    v44 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v45 = String._bridgeToObjectiveC()();
    v46 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:compatibleWithTraitCollection:", v45, v44, 0);

    if (v46)
    {
      v47 = objc_msgSend(v46, "imageWithRenderingMode:", 2);

    }
    else
    {
      v47 = 0;
    }
    v48 = Width * 0.5;
    v49 = v41;
    objc_msgSend(v19, "bounds");
    objc_msgSend(v49, "setFrame:");

    objc_msgSend(v49, "setImage:", v47);
    v50 = objc_msgSend(v49, "layer");
    objc_msgSend(v50, "setShadowOffset:", CGSize.init(_:_:)(0.0, 0.0));

    v51 = objc_msgSend(v49, "layer");
    objc_msgSend(v51, "setShadowRadius:", 10.0);

    v52 = objc_msgSend(v49, "layer");
    LODWORD(v53) = 1036831949;
    objc_msgSend(v52, "setShadowOpacity:", v53);

    if (qword_10047ADE8 != -1)
      swift_once(&qword_10047ADE8, sub_1001959EC);
    objc_msgSend(v49, "setTintColor:", qword_1004AF8D0);
    objc_msgSend(v49, "setUserInteractionEnabled:", 0);
    v54 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:", 1, v48, v48, v48 * 0.666667 + v48 * 0.333333 * 0.5, 0.0, 6.28318531);
    v55 = objc_msgSend(v54, "CGPath");
    objc_msgSend(v22, "setPath:", v55);

    v56 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    v57 = objc_msgSend(v56, "CGColor");

    objc_msgSend(v22, "setFillColor:", v57);
    if (qword_10047AE38 != -1)
      swift_once(&qword_10047AE38, sub_100195BD0);
    v58 = objc_msgSend((id)qword_1004AF920, "CGColor");
    objc_msgSend(v22, "setStrokeColor:", v58);

    objc_msgSend(v22, "setLineWidth:", v48 * 0.333333);
    v59 = objc_msgSend(v19, "layer");
    objc_msgSend(v59, "addSublayer:", v22);

    v60 = v19;
    objc_msgSend(v60, "addSubview:", v49);

    v61 = *(void **)&v60[OBJC_IVAR____TtC7Measure10EditButton_animatingView];
    *(_QWORD *)&v60[OBJC_IVAR____TtC7Measure10EditButton_animatingView] = v49;

    goto LABEL_14;
  }
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    objc_msgSend(v19, "bounds");
    v24 = v23;
    v26 = v25;
    v28 = v27;
    v30 = v29;
    CGSize.init(_:_:)(50.0, 46.5);
    v31 = (objc_class *)type metadata accessor for BlurredButton();
    v69.receiver = objc_allocWithZone(v31);
    v69.super_class = v31;
    v32 = UIFontTextStyleTitle1;
    v33 = objc_msgSendSuper2(&v69, "initWithFrame:", v24, v26, v28, v30);
    objc_msgSend(v33, "bounds", v69.receiver, v69.super_class);
    sub_100039B08((uint64_t)v33, v34, v35, v36, v37, 1937075312, 0xE400000000000000, (uint64_t)v32, 0);

    v38 = OBJC_IVAR____TtC7Measure10EditButton_animatingBlur;
    v39 = *(void **)&v19[OBJC_IVAR____TtC7Measure10EditButton_animatingBlur];
    *(_QWORD *)&v19[OBJC_IVAR____TtC7Measure10EditButton_animatingBlur] = v33;

    result = *(char **)&v19[v38];
    if (result)
    {
      result = (char *)objc_msgSend(result, "setUserInteractionEnabled:", 0);
      if (*(_QWORD *)&v19[v38])
      {
        objc_msgSend(v19, "addSubview:");
        goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_14:
  v62 = OBJC_IVAR____TtC7Measure10EditButton_pressUpDownAnimation;
  v63 = *(void **)&v19[OBJC_IVAR____TtC7Measure10EditButton_pressUpDownAnimation];
  objc_msgSend(v63, "setDamping:", 30.0);
  objc_msgSend(v63, "setStiffness:", 240.0);
  v64 = v63;
  objc_msgSend(v64, "settlingDuration");
  objc_msgSend(v64, "setDuration:");

  v65 = *(void **)&v19[v62];
  objc_msgSend(v65, "setFillMode:", kCAFillModeForwards);
  objc_msgSend(v65, "setRemovedOnCompletion:", 1);
  objc_msgSend(v19, "addTarget:action:forControlEvents:", v19, "editBegan", 1);
  objc_msgSend(v19, "addTarget:action:forControlEvents:", v19, "editEnded", 64);
  objc_msgSend(v19, "addTarget:action:forControlEvents:", v19, "editCancelled", 256);
  objc_msgSend(v19, "addTarget:action:forControlEvents:", v19, "editCancelled", 128);
  v66 = OBJC_IVAR____TtC7Measure10EditButton_editEnabled;
  if (v19[OBJC_IVAR____TtC7Measure10EditButton_editEnabled])
    v67 = 1.0;
  else
    v67 = 0.5;
  sub_10007CC5C(v67);
  if (v19[v66] == 1)
  {
    if (v19[OBJC_IVAR____TtC7Measure10EditButton_isInputEnabled])
      v68 = 1.0;
    else
      v68 = 0.5;
    sub_10007CC5C(v68);
  }

  return v19;
}

void sub_10007C674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  Class isa;
  Class v7;
  void *v8;
  id v9;
  NSString v10;
  void *v11;
  CATransform3D v12;

  v1 = OBJC_IVAR____TtC7Measure10EditButton_editState;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC7Measure10EditButton_editState) & 1) == 0)
  {
    v2 = OBJC_IVAR____TtC7Measure10EditButton_animatingView;
    v3 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10EditButton_animatingView);
    if (v3)
    {
      v4 = objc_msgSend(v3, "layer");
      CATransform3DMakeScale(&v12, 0.666667, 0.666667, 1.0);
      objc_msgSend(v4, "setTransform:", &v12);

    }
    v5 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10EditButton_pressUpDownAnimation);
    isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v5, "setFromValue:", isa);

    v7 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v5, "setToValue:", v7);

    v8 = *(void **)(v0 + v2);
    if (v8)
    {
      v9 = objc_msgSend(v8, "layer");
      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v9, "addAnimation:forKey:", v5, v10);

    }
    v11 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10EditButton_animatingBlur);
    if (v11)
      objc_msgSend(v11, "setHighlighted:", 1);
  }
  *(_BYTE *)(v0 + v1) = 1;
}

void sub_10007C868(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  Swift::String v8;

  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC7Measure10EditButton_editEnabled) == 1
    && *(_BYTE *)(v2 + OBJC_IVAR____TtC7Measure10EditButton_isInputEnabled) == 1)
  {
    v3 = v2 + OBJC_IVAR____TtC7Measure10EditButton_delegate;
    Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC7Measure10EditButton_delegate, a2);
    if (Strong)
    {
      v5 = Strong;
      v6 = *(_QWORD *)(v3 + 8);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
      swift_unknownObjectRelease(v5);
    }
    sub_10007C958();
    if (qword_10047AA98 != -1)
      swift_once(&qword_10047AA98, sub_1000E15B4);
    v8._object = (void *)0x80000001003DC0F0;
    v8._countAndFlagsBits = 0xD000000000000012;
    Log.default(_:isPrivate:)(v8, 0);
  }
}

void sub_10007C958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  Class isa;
  Class v7;
  void *v8;
  id v9;
  NSString v10;
  void *v11;
  CATransform3D v12;

  v1 = OBJC_IVAR____TtC7Measure10EditButton_editState;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC7Measure10EditButton_editState) == 1)
  {
    v2 = OBJC_IVAR____TtC7Measure10EditButton_animatingView;
    v3 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10EditButton_animatingView);
    if (v3)
    {
      v4 = objc_msgSend(v3, "layer");
      CATransform3DMakeScale(&v12, 1.0, 1.0, 1.0);
      objc_msgSend(v4, "setTransform:", &v12);

    }
    v5 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10EditButton_pressUpDownAnimation);
    isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v5, "setFromValue:", isa);

    v7 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v5, "setToValue:", v7);

    v8 = *(void **)(v0 + v2);
    if (v8)
    {
      v9 = objc_msgSend(v8, "layer");
      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v9, "addAnimation:forKey:", v5, v10);

    }
    v11 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10EditButton_animatingBlur);
    if (v11)
      objc_msgSend(v11, "setHighlighted:", 0);
  }
  *(_BYTE *)(v0 + v1) = 0;
}

void sub_10007CB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC7Measure10EditButton_editEnabled) == 1
    && *(_BYTE *)(v2 + OBJC_IVAR____TtC7Measure10EditButton_isInputEnabled) == 1
    && (*(_BYTE *)(v2 + OBJC_IVAR____TtC7Measure10EditButton_isShowingAccessibilityHUD) & 1) == 0)
  {
    v3 = v2 + OBJC_IVAR____TtC7Measure10EditButton_delegate;
    Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC7Measure10EditButton_delegate, a2);
    if (Strong)
    {
      v5 = Strong;
      v6 = *(_QWORD *)(v3 + 8);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
      swift_unknownObjectRelease(v5);
    }
    sub_10007C958();
  }
}

void sub_10007CC5C(float a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[6];

  v3 = swift_allocObject(&unk_1004424C0, 28, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(float *)(v3 + 24) = a1;
  v4 = objc_allocWithZone((Class)UIViewPropertyAnimator);
  v8[4] = sub_100074424;
  v8[5] = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10003ECA0;
  v8[3] = &unk_1004424D8;
  v5 = _Block_copy(v8);
  v6 = v1;
  swift_release();
  v7 = objc_msgSend(v4, "initWithDuration:dampingRatio:animations:", v5, 0.5, 0.6);
  _Block_release(v5);
  if (a1 == 0.5)
    sub_10007C958();
  objc_msgSend(v7, "setInterruptible:", 0);
  objc_msgSend(v7, "startAnimation");

}

uint64_t type metadata accessor for EditButton()
{
  return objc_opt_self(_TtC7Measure10EditButton);
}

uint64_t storeEnumTagSinglePayload for EditButton.EditButtonState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10007CEC8 + 4 * byte_1003B3A25[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10007CEFC + 4 * byte_1003B3A20[v4]))();
}

uint64_t sub_10007CEFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007CF04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007CF0CLL);
  return result;
}

uint64_t sub_10007CF18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007CF20);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10007CF24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007CF2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EditButton.EditButtonState()
{
  return &type metadata for EditButton.EditButtonState;
}

unint64_t sub_10007CF4C()
{
  unint64_t result;

  result = qword_10047F478;
  if (!qword_10047F478)
  {
    result = swift_getWitnessTable(&unk_1003B3AB0, &type metadata for EditButton.EditButtonState);
    atomic_store(result, (unint64_t *)&qword_10047F478);
  }
  return result;
}

uint64_t sub_10007CF90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 28, 7);
}

uint64_t sub_10007CFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007CFC4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10007CFCC()
{
  _BYTE *v0;
  char *v1;
  uint64_t v2;
  NSString v3;
  id v4;

  v1 = &v0[OBJC_IVAR____TtC7Measure10EditButton_delegate];
  *((_QWORD *)v1 + 1) = 0;
  swift_unknownObjectWeakInit(v1, 0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure10EditButton_animatingView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure10EditButton_animatingBlur] = 0;
  v2 = OBJC_IVAR____TtC7Measure10EditButton_pressUpDownAnimation;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(CASpringAnimation), "animationWithKeyPath:", v3);

  *(_QWORD *)&v0[v2] = v4;
  v0[OBJC_IVAR____TtC7Measure10EditButton_editState] = 0;
  v0[OBJC_IVAR____TtC7Measure10EditButton_editEnabled] = 1;
  v0[OBJC_IVAR____TtC7Measure10EditButton_isInputEnabled] = 0;
  v0[OBJC_IVAR____TtC7Measure10EditButton_isShowingAccessibilityHUD] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/EditButton.swift", 24, 2, 118, 0);
  __break(1u);
}

uint64_t sub_10007D0F4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v1 = sub_10000EDC8(&qword_10047F480);
  __chkstk_darwin(v1);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UIPointerEffect(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = objc_msgSend(objc_allocWithZone((Class)UIPreviewParameters), "init");
  objc_msgSend(v0, "bounds");
  v13 = CGRect.center.getter(v9, v10, v11, v12);
  v15 = v14;
  objc_msgSend(v0, "bounds");
  v18 = CGRect.init(center:size:)(v13, v15, v16, v17);
  v22 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithOvalInRect:", v18, v19, v20, v21);
  objc_msgSend(v8, "setVisiblePath:", v22);

  sub_10007D2E0();
  *v7 = objc_msgSend(objc_allocWithZone((Class)UITargetedPreview), "initWithView:parameters:", v0, v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for UIPointerEffect.lift(_:), v4);
  v23 = type metadata accessor for UIPointerShape(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v3, 1, 1, v23);
  v24 = UIPointerStyle.init(effect:shape:)(v7, v3);

  return v24;
}

unint64_t sub_10007D2E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047F488;
  if (!qword_10047F488)
  {
    v1 = objc_opt_self(UIPointerStyle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10047F488);
  }
  return result;
}

uint64_t sub_10007D31C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, __n128);
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, __n128);
  __n128 v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char v46[24];
  void *v47;
  void *v48;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_1003B3C50);
  v7 = sub_10000EDC8((uint64_t *)&unk_1004873C0);
  v8 = qword_10047AD88;
  swift_retain();
  if (v8 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v9 = qword_1004AF890;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v7 + 272);
  v11 = swift_retain();
  *(_QWORD *)(v3 + 80) = v10(KeyPath, v9, v11);
  v12 = sub_10000EDC8(&qword_10047BBA8);
  v13 = swift_getKeyPath(&unk_1003B3C78);
  v14 = qword_1004AF890;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v12 + 272);
  v16 = swift_retain();
  *(_QWORD *)(v3 + 88) = v15(v13, v14, v16);
  v17 = sub_10000EDC8(&qword_10047BBB0);
  v18 = swift_getKeyPath(&unk_1003B3CA0);
  v19 = qword_1004AF890;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v17 + 272);
  v21 = swift_retain();
  *(_QWORD *)(v3 + 96) = v20(v18, v19, v21);
  v22 = swift_getKeyPath(&unk_1003B3CC8);
  v23 = sub_10000EDC8(&qword_10047F618);
  v24 = qword_1004AF890;
  v25 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v23 + 272);
  v26 = swift_retain();
  *(_QWORD *)(v3 + 104) = v25(v22, v24, v26);
  v27 = sub_10000EDC8(&qword_10047E5E0);
  v28 = swift_getKeyPath(&unk_1003B3CF0);
  v29 = qword_1004AF890;
  v30 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v27 + 272);
  v31 = swift_retain();
  *(_QWORD *)(v3 + 112) = v30(v28, v29, v31);
  v32 = sub_10000EDC8(&qword_10047D440);
  v33 = swift_getKeyPath(&unk_1003B3D18);
  v34 = qword_1004AF890;
  v35 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v32 + 272);
  v36 = swift_retain();
  *(_QWORD *)(v3 + 120) = v35(v33, v34, v36);
  v37 = sub_10000EDC8(&qword_10047D460);
  v38 = swift_getKeyPath(&unk_1003B3D40);
  v39 = qword_1004AF890;
  v40 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v37 + 272);
  v41 = swift_retain();
  *(_QWORD *)(v3 + 128) = v40(v38, v39, v41);
  *(_QWORD *)(v3 + 136) = 0xC000000000000000;
  *(_BYTE *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 64) = a1;
  *(_QWORD *)(v3 + 72) = a2;
  v42 = a1;
  swift_retain();
  swift_release();
  v47 = &type metadata for Configurations.Default;
  v48 = &protocol witness table for Configurations.Default;
  v43 = StateObserver.init(configuration:)(v46);
  v44 = &v42[qword_10047F620];
  *((_QWORD *)v44 + 1) = &off_100442660;
  swift_unknownObjectWeakAssign(v44, v43);

  swift_release();
  return v43;
}

void sub_10007D5D8()
{
  uint64_t v0;

  swift_allocObject(v0, 145, 7);
  sub_10007D5FC();
}

void sub_10007D5FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, __n128);
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, __n128);
  __n128 v36;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1003B3C50);
  v3 = sub_10000EDC8((uint64_t *)&unk_1004873C0);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v4 = qword_1004AF890;
  v5 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v3 + 272);
  v6 = swift_retain();
  *(_QWORD *)(v1 + 80) = v5(KeyPath, v4, v6);
  v7 = sub_10000EDC8(&qword_10047BBA8);
  v8 = swift_getKeyPath(&unk_1003B3C78);
  v9 = qword_1004AF890;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v7 + 272);
  v11 = swift_retain();
  *(_QWORD *)(v1 + 88) = v10(v8, v9, v11);
  v12 = sub_10000EDC8(&qword_10047BBB0);
  v13 = swift_getKeyPath(&unk_1003B3CA0);
  v14 = qword_1004AF890;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v12 + 272);
  v16 = swift_retain();
  *(_QWORD *)(v1 + 96) = v15(v13, v14, v16);
  v17 = swift_getKeyPath(&unk_1003B3CC8);
  v18 = sub_10000EDC8(&qword_10047F618);
  v19 = qword_1004AF890;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v18 + 272);
  v21 = swift_retain();
  *(_QWORD *)(v1 + 104) = v20(v17, v19, v21);
  v22 = sub_10000EDC8(&qword_10047E5E0);
  v23 = swift_getKeyPath(&unk_1003B3CF0);
  v24 = qword_1004AF890;
  v25 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v22 + 272);
  v26 = swift_retain();
  *(_QWORD *)(v1 + 112) = v25(v23, v24, v26);
  v27 = sub_10000EDC8(&qword_10047D440);
  v28 = swift_getKeyPath(&unk_1003B3D18);
  v29 = qword_1004AF890;
  v30 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v27 + 272);
  v31 = swift_retain();
  *(_QWORD *)(v1 + 120) = v30(v28, v29, v31);
  v32 = sub_10000EDC8(&qword_10047D460);
  v33 = swift_getKeyPath(&unk_1003B3D40);
  v34 = qword_1004AF890;
  v35 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v32 + 272);
  v36 = swift_retain();
  *(_QWORD *)(v1 + 128) = v35(v33, v34, v36);
  *(_QWORD *)(v1 + 136) = 0xC000000000000000;
  *(_BYTE *)(v1 + 144) = 0;
  swift_release();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/EditController.swift", 28, 2, 69, 0);
  __break(1u);
}

double sub_10007D864()
{
  uint64_t v0;
  double result;

  swift_retain();
  StateValue.ifUpdated(_:)(sub_10007F0DC, v0);
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_10007F0E4, v0);
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_10007F0EC, v0);
  swift_release();
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    swift_retain();
    StateValue.ifUpdated(_:)(sub_10007F0FC, v0);
    swift_release();
  }
  swift_retain();
  StateValue.ifUpdated(_:)(sub_10007F0F4, v0);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_10007D94C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  _QWORD *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  char v22;
  uint64_t v23;
  void **v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  char v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  _QWORD *v34;
  __n128 v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BOOL4 v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void **aBlock;
  uint64_t v55;
  uint64_t (*v56)(uint64_t);
  id v57;
  void (*v58)();
  uint64_t v59;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  __chkstk_darwin(v4);
  v51 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v49 = *(_QWORD *)(v6 - 8);
  v50 = v6;
  __chkstk_darwin(v6);
  v48 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = *(_QWORD *)(v1 + 136);
  if (v46 >> 62)
  {
    sub_100068AC4(v46);
    swift_retain();
    StateValue.wrappedValue.getter(&aBlock, v9);
    swift_release();
    v10 = aBlock;
    v11 = v55;
    v12 = v56;
    v47 = sub_1001C6734((uint64_t)aBlock, v55, (uint64_t)v56);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v47 = a1 == 0xC000000000000008;
    v8 = (id)v46;
  }
  swift_retain();
  StateValue.wrappedValue.getter(&aBlock, v13);
  swift_release();
  v14 = aBlock;
  v15 = v55;
  v16 = v56;
  v17 = sub_1001C6834(1, (uint64_t)aBlock, v55, (uint64_t)v56);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v14);
  swift_retain();
  StateValue.wrappedValue.getter(&aBlock, v18);
  swift_release();
  v19 = aBlock;
  v20 = v55;
  v21 = v56;
  sub_1001C6B68((uint64_t)aBlock, v55, (uint64_t)v56);
  LOBYTE(v15) = v22;
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v19);
  swift_retain();
  StateValue.wrappedValue.getter(&aBlock, v23);
  swift_release();
  v24 = aBlock;
  v25 = (_QWORD *)v55;

  swift_retain();
  StateValue.wrappedValue.getter(&aBlock, v26);
  swift_release();
  v27 = aBlock;
  v28 = v55;
  v29 = v56;
  v30 = sub_10007E9C4(v25, (uint64_t)aBlock, v55, (uint64_t)v56);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v27);

  sub_100049274();
  v45 = static OS_dispatch_queue.main.getter();
  v31 = swift_allocObject(&unk_100442738, 64, 7);
  *(_QWORD *)(v31 + 16) = v2;
  *(_QWORD *)(v31 + 24) = a1;
  *(_BYTE *)(v31 + 32) = v47;
  *(_QWORD *)(v31 + 40) = v17;
  *(_BYTE *)(v31 + 48) = (v15 & 1) == 0;
  *(_BYTE *)(v31 + 49) = v30 & 1;
  v32 = v46;
  *(_QWORD *)(v31 + 56) = v46;
  v58 = sub_10007F17C;
  v59 = v31;
  aBlock = _NSConcreteStackBlock;
  v55 = 1107296256;
  v56 = sub_10003ECA0;
  v57 = &unk_100442750;
  v33 = _Block_copy(&aBlock);
  sub_100068AC4(v32);
  swift_retain();
  sub_100068AC4(a1);
  v34 = v17;
  v35 = swift_release();
  v36 = v48;
  static DispatchQoS.unspecified.getter(v35);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v37 = sub_100030E1C();
  v38 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v39 = sub_100030E64();
  v40 = v51;
  v41 = v53;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v38, v39, v53, v37);
  v42 = (void *)v45;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v40, v33);
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v41);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v50);
  v43 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(v2 + 136) = a1;
  sub_100068AC4(a1);
  sub_10001A810(v43);
  sub_10001A810(v32);
}

void sub_10007DD50(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD v10[4];

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  swift_retain();
  StateValue.wrappedValue.getter(v10, v6);
  swift_release();
  v7 = (void *)v10[0];
  v8 = (_QWORD *)v10[1];

  sub_10007DDF8(v8, v3, v4, v5);
  v9 = *(_QWORD *)(a2 + 136);
  sub_100068AC4(v9);
  sub_10007D94C(v9);
  sub_10001A810(v9);
}

void sub_10007DDF8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  void *v20;
  id v21;
  uint64_t v22;
  char v23;
  _BYTE *v24;
  int v25;
  float v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = v4;
  swift_retain();
  StateValue.wrappedValue.getter(&v28, v10);
  swift_release();
  v11 = v28;
  v12 = v29;
  v13 = v30;
  v14 = sub_1001C6834(1, v28, v29, v30);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v11);

  if (!v14)
    sub_10007FC04(0);
  swift_retain();
  StateValue.wrappedValue.getter(&v28, v15);
  swift_release();
  v16 = v28;
  v17 = v29;
  v18 = v30;
  v19 = sub_1001C6734(v28, v29, v30);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v16);
  if (!v19)
  {
    v20 = *(void **)(*(_QWORD *)(v5 + 64) + qword_10047F648);
    if (v20)
    {
      v21 = v20;
      objc_msgSend(v21, "setEnabled:", 0);
      objc_msgSend(v21, "setShowDisabled:", 1);

    }
  }
  v22 = *(_QWORD *)(v5 + 64);
  v23 = sub_10007E9C4(a1, a2, a3, a4);
  v24 = *(_BYTE **)(v22 + qword_10047F628);
  if (v24)
  {
    v25 = v24[OBJC_IVAR____TtC7Measure10EditButton_isInputEnabled];
    v24[OBJC_IVAR____TtC7Measure10EditButton_isInputEnabled] = v23 & 1;
    if ((v23 & 1) != v25 && v24[OBJC_IVAR____TtC7Measure10EditButton_editEnabled] == 1)
    {
      if ((v23 & 1) != 0)
        v26 = 1.0;
      else
        v26 = 0.5;
      v27 = v24;
      sub_10007CC5C(v26);

    }
  }
}

void sub_10007DFE4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  char v5;

  swift_retain();
  StateValue.wrappedValue.getter((uint64_t *)((char *)&v4 + 5), v0);
  swift_release();
  v1 = v5;
  swift_retain();
  StateValue.wrappedValue.getter(&v4, v2);
  swift_release();
  v3 = 0.0;
  if (BYTE4(v4) & 1 | ((v1 & 1) == 0))
    v3 = 1.0;
  sub_10007E898(v3);
}

void sub_10007E06C()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;

  swift_retain();
  StateValue.wrappedValue.getter((uint64_t *)((char *)&v3 + 3), v0);
  swift_release();
  if ((v3 & 0x1000000000000) == 0)
  {
    swift_retain();
    StateValue.wrappedValue.getter(&v3, v1);
    swift_release();
    v2 = 1.0;
    if ((_BYTE)v3)
      v2 = 0.0;
    sub_10007E898(v2);
  }
}

double sub_10007E0EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD **)(a1 + 8);
  swift_retain();
  StateValue.wrappedValue.getter(&v7, v2);
  swift_release();
  v3 = v7;
  v4 = v8;
  v5 = v9;
  sub_10007DDF8(v1, v7, v8, v9);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

void sub_10007E178()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10001A810(*(_QWORD *)(v0 + 136));
}

uint64_t sub_10007E1D4(uint64_t a1)
{
  uint64_t v1;

  v1 = StateObserver.deinit(a1);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10001A810(*(_QWORD *)(v1 + 136));
  return v1;
}

uint64_t sub_10007E248(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_10007E1D4(a1);
  return swift_deallocClassInstance(v1, 145, 7);
}

uint64_t type metadata accessor for EditController(uint64_t a1)
{
  uint64_t result;

  result = qword_10047F4B8;
  if (!qword_10047F4B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EditController);
  return result;
}

uint64_t sub_10007E2A0(uint64_t a1)
{
  _QWORD v2[11];

  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[9] = "\b";
  v2[10] = &unk_1003B3B68;
  return swift_initClassMetadata2(a1, 256, 11, v2, a1 + 208);
}

uint64_t storeEnumTagSinglePayload for EditController.EditConditions(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10007E360 + 4 * byte_1003B3ADD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10007E394 + 4 * byte_1003B3AD8[v4]))();
}

uint64_t sub_10007E394(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007E39C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007E3A4);
  return result;
}

uint64_t sub_10007E3B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007E3B8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10007E3BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007E3C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EditController.EditConditions()
{
  return &type metadata for EditController.EditConditions;
}

unint64_t sub_10007E3E4()
{
  unint64_t result;

  result = qword_10047F610;
  if (!qword_10047F610)
  {
    result = swift_getWitnessTable(&unk_1003B3C08, &type metadata for EditController.EditConditions);
    atomic_store(result, (unint64_t *)&qword_10047F610);
  }
  return result;
}

void sub_10007E428()
{
  sub_100090D48(4u);
}

void sub_10007E44C()
{
  sub_100090D48(8u);
}

void sub_10007E470()
{
  sub_100090D48(9u);
  sub_10007FAAC();
}

void sub_10007E4A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  _BYTE v12[24];

  v1 = type metadata accessor for DebugSessionCoordinator.RecordReplayState(0);
  __chkstk_darwin(v1);
  v3 = (void **)&v12[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = *(void **)(*(_QWORD *)(v0 + 64) + qword_10047F648);
  if (v4)
    objc_msgSend(v4, "setEnabled:", 0);
  v5 = swift_allocObject(&unk_100442698, 24, 7);
  swift_weakInit(v5 + 16, v0);
  swift_retain();
  sub_100032C58((uint64_t)sub_10007F034, v5);
  swift_release_n(v5, 2);
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  v6 = (void *)qword_1004AF240;
  if (qword_1004AF240)
  {
    v7 = qword_1004AF240 + qword_100487428;
    swift_beginAccess(qword_1004AF240 + qword_100487428, v12, 0, 0);
    sub_10007F03C(v7, (uint64_t)v3);
    if (swift_getEnumCaseMultiPayload(v3, v1) == 1)
    {
      v8 = *v3;
      v9 = v6;
      v10 = sub_1000E1D74();

      sub_1000695D4(5, 0, 0, 1);
    }
    else
    {
      sub_10007F080((uint64_t)v3);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10007E63C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD aBlock[6];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100049274();
  v10 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_10007F0BC;
  aBlock[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_1004426B0;
  v11 = _Block_copy(aBlock);
  swift_retain();
  v12 = swift_release();
  static DispatchQoS.unspecified.getter(v12);
  aBlock[0] = _swiftEmptyArrayStorage;
  v13 = sub_100030E1C();
  v14 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v15 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v14, v15, v2, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_10007E7F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  char *v4;
  void *v5;
  char *v6;
  char v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = (char *)*(id *)(Strong + 64);
    swift_release(v3);
    v5 = *(void **)&v4[qword_10047F648];
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v6, "setEnabled:", 1);
      objc_msgSend(v6, "setShowDisabled:", 0);

      v4 = v6;
    }

  }
}

void sub_10007E898(double a1)
{
  uint64_t v1;
  double v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[6];

  objc_msgSend(*(id *)(v1 + 64), "alpha");
  if (v3 != a1)
  {
    v4 = swift_allocObject(&unk_1004426E8, 32, 7);
    *(_QWORD *)(v4 + 16) = v1;
    *(double *)(v4 + 24) = a1;
    v5 = objc_allocWithZone((Class)UIViewPropertyAnimator);
    v8[4] = sub_10007F128;
    v8[5] = v4;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    v8[2] = sub_10003ECA0;
    v8[3] = &unk_100442700;
    v6 = _Block_copy(v8);
    swift_retain();
    swift_release();
    v7 = objc_msgSend(v5, "initWithDuration:dampingRatio:animations:", v6, 0.5, 0.6);
    _Block_release(v6);
    objc_msgSend(v7, "setInterruptible:", 0);
    objc_msgSend(v7, "startAnimation");

  }
}

uint64_t sub_10007E9C4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t result;
  uint64_t (*v11)(void);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  if (*(_BYTE *)(v4 + 144))
    return 0;
  swift_retain();
  StateValue.wrappedValue.getter(&v24, v9);
  swift_release();
  if (v24 >> 62 == 2 || v24 >> 62 == 1)
  {
    sub_10001A810(v24);
    return 0;
  }
  sub_10001A810(v24);
  if (a1)
  {
    v11 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0);
    v12 = a1;
    v13 = v11();

    if (v13 != 4)
      return 1;
  }
  result = sub_1001C70BC(a2, a3, a4);
  v14 = result;
  v24 = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)result >> 62))
  {
    v15 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v15)
      goto LABEL_10;
LABEL_25:
    swift_bridgeObjectRelease(v14);
    v21 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_29;
    goto LABEL_26;
  }
  if (result >= 0)
    result &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(result);
  v15 = result;
  if (!result)
    goto LABEL_25;
LABEL_10:
  if (v15 >= 1)
  {
    for (i = 0; i != v15; ++i)
    {
      if ((v14 & 0xC000000000000001) != 0)
        v19 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v14);
      else
        v19 = *(id *)(v14 + 8 * i + 32);
      v20 = v19;
      if ((*(uint64_t (**)(void))((swift_isaMask & *v19) + 0xD0))() == 6)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(6);
        v17 = *(_QWORD *)(v24 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
        v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v20);
        specialized ContiguousArray._endMutation()(v18);
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease(v14);
    v21 = v24;
    if ((v24 & 0x8000000000000000) != 0)
      goto LABEL_29;
LABEL_26:
    if ((v21 & 0x4000000000000000) == 0)
    {
      v22 = *(_QWORD *)(v21 + 16);
LABEL_28:
      swift_release();
      return v22 != 0;
    }
LABEL_29:
    v23 = swift_bridgeObjectRetain(v21);
    v22 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_release();
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

void sub_10007EBE4(uint64_t a1, unint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];

  sub_10007F2FC(a2, a3, a4 != 0, a5);
  if (a7 == 0xC000000000000010)
  {
    if (qword_10047A938 != -1)
      swift_once(&qword_10047A938, sub_100083764);
    swift_retain();
    sub_1000833A0(7);
    swift_release();
    swift_retain();
    swift_retain();
    Synchronized.wrappedValue.getter(v26, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26[0]);
    v25 = v26[0];
    v26[0] = 0x8000000000000000;
    sub_1000BC69C(1, 2, isUniquelyReferenced_nonNull_native);
    v11 = v26[0];
    v26[0] = v25;
    swift_bridgeObjectRelease(v11);
    v25 = v26[0];
    Synchronized.wrappedValue.setter(&v25);
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    Synchronized.wrappedValue.getter(v26, v12);
    v13 = swift_isUniquelyReferenced_nonNull_native(v26[0]);
    v25 = v26[0];
    v26[0] = 0x8000000000000000;
    sub_1000BC69C(1, 1, v13);
    v14 = v26[0];
    v26[0] = v25;
    swift_bridgeObjectRelease(v14);
    v25 = v26[0];
    Synchronized.wrappedValue.setter(&v25);
    swift_release();
    swift_release();
  }
  if (a2 >> 62 == 3 && (a2 | 8) == 0xC000000000000018)
  {
    if (qword_10047A938 != -1)
      swift_once(&qword_10047A938, sub_100083764);
    swift_retain();
    sub_1000833A0(6);
    swift_release();
    swift_retain();
    StateValue.wrappedValue.getter(v26, v15);
    swift_release();
    v17 = (void *)v26[0];
    v16 = (_QWORD *)v26[1];

    if (v16)
    {
      v18 = (*(uint64_t (**)(void))((swift_isaMask & *v16) + 0x2C0))();
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 368))(v18);
      swift_release();
      if (simd_float4x4.isAlmostHorizontal(marginInDegrees:)(10.0)
        && (unint64_t)(*(uint64_t (**)(void))((swift_isaMask & *v16) + 0x2F0))() < 3)
      {
        swift_retain();
        swift_retain();
        Synchronized.wrappedValue.getter(v26, v19);
        v20 = swift_isUniquelyReferenced_nonNull_native(v26[0]);
        v25 = v26[0];
        v26[0] = 0x8000000000000000;
        sub_1000BC69C(1, 1, v20);
        v21 = v26[0];
        v26[0] = v25;
        swift_bridgeObjectRelease(v21);
        v25 = v26[0];
        Synchronized.wrappedValue.setter(&v25);
        swift_release();
        swift_release();
        swift_retain();
        swift_retain();
        Synchronized.wrappedValue.getter(v26, v22);
        v23 = swift_isUniquelyReferenced_nonNull_native(v26[0]);
        v25 = v26[0];
        v26[0] = 0x8000000000000000;
        sub_1000BC69C(1, 2, v23);
        v24 = v26[0];
        v26[0] = v25;
        swift_bridgeObjectRelease(v24);
        v25 = v26[0];
        Synchronized.wrappedValue.setter(&v25);

        swift_release();
        swift_release();
      }
      else
      {

      }
    }
  }
}

void sub_10007EFAC()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 144) = 1;
}

void sub_10007EFB8()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 144) = 2;
}

void sub_10007EFC4()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 144) = 0;
}

void sub_10007EFCC()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 144) = 3;
}

uint64_t sub_10007EFD8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10007EFF4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10007F010()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007F034()
{
  uint64_t v0;

  return sub_10007E63C(v0);
}

uint64_t sub_10007F03C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DebugSessionCoordinator.RecordReplayState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007F080(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DebugSessionCoordinator.RecordReplayState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10007F0BC()
{
  uint64_t v0;

  sub_10007E7F0(v0);
}

uint64_t sub_10007F0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007F0D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10007F0DC(unint64_t *a1)
{
  sub_10007D94C(*a1);
}

void sub_10007F0E4(uint64_t *a1)
{
  uint64_t v1;

  sub_10007DD50(a1, v1);
}

void sub_10007F0EC()
{
  sub_10007DFE4();
}

double sub_10007F0F4(uint64_t a1)
{
  return sub_10007E0EC(a1);
}

void sub_10007F0FC()
{
  sub_10007E06C();
}

uint64_t sub_10007F104()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

id sub_10007F128()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + 64), "setAlpha:", *(double *)(v0 + 24));
}

uint64_t sub_10007F140()
{
  uint64_t v0;

  swift_release();
  sub_10001A810(*(_QWORD *)(v0 + 24));

  sub_10001A810(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_10007F17C()
{
  uint64_t v0;

  sub_10007EBE4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48), *(unsigned __int8 *)(v0 + 49), *(_QWORD *)(v0 + 56));
}

double sub_10007F1A8()
{
  uint64_t v0;
  double result;
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[16];
  uint64_t v5;
  _BYTE v6[16];
  uint64_t v7;

  v7 = v0;
  swift_retain();
  StateValue.ifUpdated(_:)(sub_100082438, v6);
  swift_release();
  v5 = v0;
  swift_retain();
  StateValue.ifUpdated(_:)(sub_100082440, v4);
  swift_release();
  v3 = v0;
  swift_retain();
  StateValue.ifUpdated(_:)(sub_100082448, &v2);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_10007F25C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t (*v5)(__n128);
  __n128 v6;
  uint64_t v7;
  void (*v8)(void (*)(), uint64_t, __n128);
  __n128 v9;

  result = swift_unknownObjectWeakLoadStrong(v2 + qword_10047F620, a2);
  if (result)
  {
    v4 = result;
    v5 = *(uint64_t (**)(__n128))(**(_QWORD **)(result + 80) + 200);
    v6 = swift_retain();
    v7 = v5(v6);
    swift_release();
    v8 = *(void (**)(void (*)(), uint64_t, __n128))(*(_QWORD *)v7 + 280);
    v9 = swift_retain();
    v8(sub_1000814E0, v4, v9);
    swift_release();
    return swift_release_n(v4, 2);
  }
  return result;
}

uint64_t sub_10007F2F0(uint64_t a1, uint64_t a2)
{
  return sub_100080F94((uint64_t)sub_10007E44C, a2);
}

void sub_10007F2FC(unint64_t a1, char a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  void *v18;
  id v19;
  _BYTE *v20;
  int v21;
  float v22;
  _BYTE *v23;
  void *v24;
  _BYTE *v25;
  void *v26;
  id v27;
  void *v28;
  _BYTE *v29;
  char v30;
  __int128 v31;
  _BYTE *v32;

  v5 = v4;
  v10 = qword_10047F628;
  v11 = *(_BYTE **)(v4 + qword_10047F628);
  if (v11)
  {
    v12 = v11[OBJC_IVAR____TtC7Measure10EditButton_isInputEnabled];
    v11[OBJC_IVAR____TtC7Measure10EditButton_isInputEnabled] = 1;
    if (v12 != 1 && v11[OBJC_IVAR____TtC7Measure10EditButton_editEnabled] == 1)
    {
      v13 = v11;
      sub_10007CC5C(1.0);

    }
  }
  if ((a1 >> 62) - 1 >= 2)
  {
    if (a1 >> 62)
    {
      *((_QWORD *)&v31 + 1) = a1;
      *(_QWORD *)&v31 = a1 + 0x4000000000000000;
      __asm { BR              X10 }
    }
    v23 = *(_BYTE **)(v5 + qword_10047F638);
    if (v23 && (v23[OBJC_IVAR____TtC7Measure12DeleteButton_isEnabled] & 1) == 0)
    {
      v23[OBJC_IVAR____TtC7Measure12DeleteButton_isEnabled] = 1;
      v24 = *(void **)&v23[OBJC_IVAR____TtC7Measure12DeleteButton_deleteButton];
      v25 = v23;
      objc_msgSend(v24, "setEnabled:", 1);
      objc_msgSend(v25, "setUserInteractionEnabled:", 1);

    }
    sub_10007FC04(a3 & 1);
    v26 = *(void **)(v5 + qword_10047F648);
    if (v26)
    {
      v27 = v26;
      objc_msgSend(v27, "setEnabled:", 0);
      objc_msgSend(v27, "setShowDisabled:", 1);

    }
    v28 = *(void **)(v5 + v10);
    if (v28)
    {
      objc_msgSend(v28, "setHidden:", 0);
      v29 = *(_BYTE **)(v5 + v10);
      if (v29)
      {
        v30 = v29[OBJC_IVAR____TtC7Measure10EditButton_editEnabled];
        v29[OBJC_IVAR____TtC7Measure10EditButton_editEnabled] = 1;
        if ((v30 & 1) == 0)
        {
          v32 = v29;
          v22 = 1.0;
          goto LABEL_25;
        }
      }
    }
  }
  else
  {
    v14 = *(_BYTE **)(v5 + qword_10047F638);
    if (v14)
    {
      v15 = a4 & 1;
      if (v14[OBJC_IVAR____TtC7Measure12DeleteButton_isEnabled] != (_DWORD)v15)
      {
        v14[OBJC_IVAR____TtC7Measure12DeleteButton_isEnabled] = a4 & 1;
        v16 = *(void **)&v14[OBJC_IVAR____TtC7Measure12DeleteButton_deleteButton];
        v17 = v14;
        objc_msgSend(v16, "setEnabled:", v15);
        objc_msgSend(v17, "setUserInteractionEnabled:", v15);

      }
    }
    sub_10007FC04(a3 & 1);
    v18 = *(void **)(v5 + qword_10047F648);
    if (v18)
    {
      v19 = v18;
      objc_msgSend(v19, "setEnabled:", a2 & 1);
      objc_msgSend(v19, "setShowDisabled:", (a2 & 1) == 0);

    }
    v20 = *(_BYTE **)(v5 + v10);
    if (v20)
    {
      v21 = v20[OBJC_IVAR____TtC7Measure10EditButton_isInputEnabled];
      v20[OBJC_IVAR____TtC7Measure10EditButton_isInputEnabled] = 0;
      if (v21 == 1 && v20[OBJC_IVAR____TtC7Measure10EditButton_editEnabled] == 1)
      {
        v32 = v20;
        v22 = 0.5;
LABEL_25:
        sub_10007CC5C(v22);

      }
    }
  }
}

void sub_10007FAAC()
{
  uint64_t v0;
  _BYTE *v1;
  void *v2;
  _BYTE *v3;
  _BYTE *v4;
  void *v5;
  _BYTE *v6;
  void *v7;
  id v8;

  v1 = *(_BYTE **)(v0 + qword_10047F630);
  if (v1 && v1[OBJC_IVAR____TtC7Measure10UndoButton_isEnabled] == 1)
  {
    v1[OBJC_IVAR____TtC7Measure10UndoButton_isEnabled] = 0;
    v2 = *(void **)&v1[OBJC_IVAR____TtC7Measure10UndoButton_undoButton];
    v3 = v1;
    if (v2)
      objc_msgSend(v2, "setEnabled:", 0);
    objc_msgSend(v1, "setUserInteractionEnabled:", 0);

  }
  v4 = *(_BYTE **)(v0 + qword_10047F638);
  if (v4 && (v4[OBJC_IVAR____TtC7Measure12DeleteButton_isEnabled] & 1) != 0)
  {
    v4[OBJC_IVAR____TtC7Measure12DeleteButton_isEnabled] = 0;
    v5 = *(void **)&v4[OBJC_IVAR____TtC7Measure12DeleteButton_deleteButton];
    v6 = v4;
    objc_msgSend(v5, "setEnabled:", 0);
    objc_msgSend(v6, "setUserInteractionEnabled:", 0);

  }
  v7 = *(void **)(v0 + qword_10047F648);
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v8, "setEnabled:", 0);
    objc_msgSend(v8, "setShowDisabled:", 1);

  }
}

void sub_10007FC04(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  void *v4;
  _BYTE *v5;
  id v6;

  v3 = *(_BYTE **)(v1 + qword_10047F630);
  if (v3 && v3[OBJC_IVAR____TtC7Measure10UndoButton_isEnabled] != (a1 & 1))
  {
    v3[OBJC_IVAR____TtC7Measure10UndoButton_isEnabled] = a1 & 1;
    v4 = *(void **)&v3[OBJC_IVAR____TtC7Measure10UndoButton_undoButton];
    v6 = v3;
    v5 = v3;
    if (v4)
      objc_msgSend(v4, "setEnabled:", a1 & 1);
    objc_msgSend(v6, "setUserInteractionEnabled:", a1 & 1);

  }
}

void sub_10007FCB4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  char isEscapingClosureAtFileLocation;
  _QWORD v12[6];

  v3 = *a1;
  v4 = swift_allocObject(&unk_100442840, 32, 7);
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = v3;
  if (*((_BYTE *)a2 + qword_10047F650) == 1)
  {
    v5 = *(void (**)(uint64_t))((swift_isaMask & *a2) + 0x280);
    v6 = a2;
    v5(v3);
    swift_release();
  }
  else
  {
    v7 = (void *)objc_opt_self(UIView);
    v8 = swift_allocObject(&unk_100442868, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_10008150C;
    *(_QWORD *)(v8 + 24) = v4;
    v12[4] = sub_100030C24;
    v12[5] = v8;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_1000DDB80;
    v12[3] = &unk_100442880;
    v9 = _Block_copy(v12);
    v10 = a2;
    swift_retain();
    swift_retain();
    objc_msgSend(v7, "performWithoutAnimation:", v9, swift_release().n128_f64[0]);
    _Block_release(v9);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v8, "", 88, 71, 48, 1);
    swift_release_n(v4, 2);
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

void sub_10007FE54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t (*v7)(__n128);
  __n128 v8;
  uint64_t v9;
  void (*v10)(void (*)(), uint64_t, __n128);
  __n128 v11;
  uint64_t v12;

  swift_retain();
  StateValue.wrappedValue.getter(&v12, v3);
  swift_release();
  if (v12 == 2)
  {
    Strong = swift_unknownObjectWeakLoadStrong(a2 + qword_10047F620, v4);
    if (Strong)
    {
      v6 = Strong;
      v7 = *(uint64_t (**)(__n128))(**(_QWORD **)(Strong + 80) + 200);
      v8 = swift_retain();
      v9 = v7(v8);
      swift_release();
      v10 = *(void (**)(void (*)(), uint64_t, __n128))(*(_QWORD *)v9 + 280);
      v11 = swift_retain();
      v10(sub_1000814E0, v6, v11);
      swift_release();
      swift_release_n(v6, 2);
    }
  }
}

uint64_t sub_10007FF24(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(__n128);
  __n128 v4;
  uint64_t v5;
  void (*v6)(void (*)(), uint64_t, __n128);
  __n128 v7;

  if (*(_BYTE *)result == 3)
  {
    result = swift_unknownObjectWeakLoadStrong(a2 + qword_10047F620, a2);
    if (result)
    {
      v2 = result;
      v3 = *(uint64_t (**)(__n128))(**(_QWORD **)(result + 80) + 200);
      v4 = swift_retain();
      v5 = v3(v4);
      swift_release();
      v6 = *(void (**)(void (*)(), uint64_t, __n128))(*(_QWORD *)v5 + 280);
      v7 = swift_retain();
      v6(sub_1000814E0, v2, v7);
      swift_release();
      return swift_release_n(v2, 2);
    }
  }
  return result;
}

void sub_10007FFC4()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x65764F207473754DLL, 0xED00006564697272, "Measure/EditView.swift", 22, 2, 103, 0);
  __break(1u);
}

void sub_100080024()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x65764F207473754DLL, 0xED00006564697272, "Measure/EditView.swift", 22, 2, 107, 0);
  __break(1u);
}

void sub_100080084()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x65764F207473754DLL, 0xED00006564697272, "Measure/EditView.swift", 22, 2, 125, 0);
  __break(1u);
}

void sub_1000800E4()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x65764F207473754DLL, 0xED00006564697272, "Measure/EditView.swift", 22, 2, 129, 0);
  __break(1u);
}

void sub_100080144()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x65764F207473754DLL, 0xED00006564697272, "Measure/EditView.swift", 22, 2, 133, 0);
  __break(1u);
}

void sub_1000801A4()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x65764F207473754DLL, 0xED00006564697272, "Measure/EditView.swift", 22, 2, 137, 0);
  __break(1u);
}

void sub_100080204()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x65764F207473754DLL, 0xED00006564697272, "Measure/EditView.swift", 22, 2, 141, 0);
  __break(1u);
}

void sub_100080264()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x65764F207473754DLL, 0xED00006564697272, "Measure/EditView.swift", 22, 2, 145, 0);
  __break(1u);
}

void sub_1000802C4()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x65764F207473754DLL, 0xED00006564697272, "Measure/EditView.swift", 22, 2, 148, 0);
  __break(1u);
}

void sub_100080324()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x65764F207473754DLL, 0xED00006564697272, "Measure/EditView.swift", 22, 2, 151, 0);
  __break(1u);
}

void sub_100080384(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v5;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  objc_class *ObjCClassFromMetadata;
  uint64_t v35;
  double *v36;
  id v37;
  id v38;
  char *v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  _QWORD v47[6];
  objc_super v48;

  v5 = v4;
  v10 = &v4[qword_10047F620];
  *((_QWORD *)v10 + 1) = 0;
  swift_unknownObjectWeakInit(v10, 0);
  *(_QWORD *)&v4[qword_10047F628] = 0;
  *(_QWORD *)&v4[qword_10047F630] = 0;
  *(_QWORD *)&v4[qword_10047F638] = 0;
  *(_QWORD *)&v4[qword_10047F640] = 0;
  *(_QWORD *)&v4[qword_10047F648] = 0;
  v4[qword_10047F650] = 0;
  *(_QWORD *)&v4[qword_10047F658] = 0;
  v11 = qword_10047F660;
  v12 = sub_10000EDC8((uint64_t *)&unk_1004810D0);
  KeyPath = swift_getKeyPath(&unk_1003B3E30);
  v14 = qword_10047AD88;
  v15 = v5;
  if (v14 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v16 = qword_1004AF890;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v12 + 272);
  v18 = swift_retain();
  *(_QWORD *)&v5[v11] = v17(KeyPath, v16, v18);
  v19 = qword_10047F668;
  v20 = sub_10000EDC8(&qword_10047E5E0);
  v21 = swift_getKeyPath(&unk_1003B3E58);
  v22 = qword_1004AF890;
  v23 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v20 + 272);
  v24 = swift_retain();
  *(_QWORD *)&v15[v19] = v23(v21, v22, v24);
  v25 = qword_10047F670;
  v26 = sub_10000EDC8(&qword_10047FAC8);
  v27 = swift_getKeyPath(&unk_1003B3E80);
  v28 = qword_1004AF890;
  v29 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v26 + 272);
  v30 = swift_retain();
  *(_QWORD *)&v15[v25] = v29(v27, v28, v30);
  v31 = qword_10047F678;
  *(_QWORD *)&v15[v31] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v32 = qword_10047F680;
  v33 = type metadata accessor for TouchPassThroughView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v33);
  *(_QWORD *)&v15[v32] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v35 = qword_10047F688;
  *(_QWORD *)&v15[v35] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v36 = (double *)&v15[qword_10047F690];
  *v36 = a1;
  v36[1] = a2;
  v36[2] = a3;
  v36[3] = a4;

  v48.receiver = v15;
  v48.super_class = (Class)type metadata accessor for EditView(0);
  v37 = objc_msgSendSuper2(&v48, "initWithFrame:", a1, a2, a3, a4);
  v38 = objc_allocWithZone((Class)UIAccessibilityHUDGestureManager);
  v39 = (char *)v37;
  v40 = objc_msgSend(v38, "initWithView:delegate:", v39, v39);
  v41 = *(void **)&v39[qword_10047F658];
  *(_QWORD *)&v39[qword_10047F658] = v40;

  v42 = objc_opt_self(UIView);
  v43 = swift_allocObject(&unk_100442980, 24, 7);
  *(_QWORD *)(v43 + 16) = v39;
  v44 = swift_allocObject(&unk_1004429A8, 32, 7);
  *(_QWORD *)(v44 + 16) = sub_100082420;
  *(_QWORD *)(v44 + 24) = v43;
  v47[4] = sub_100082450;
  v47[5] = v44;
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 1107296256;
  v47[2] = sub_1000DDB80;
  v47[3] = &unk_1004429C0;
  v45 = _Block_copy(v47);
  v46 = v39;
  swift_retain();
  objc_msgSend((id)v42, "performWithoutAnimation:", v45, swift_release().n128_f64[0]);

  _Block_release(v45);
  LOBYTE(v42) = swift_isEscapingClosureAtFileLocation(v44, "", 88, 162, 40, 1);
  swift_release();
  swift_release();
  if ((v42 & 1) != 0)
    __break(1u);
}

uint64_t sub_10008075C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)((char *)a1 + qword_10047F660);
  v3 = swift_retain(v2);
  StateValue.wrappedValue.getter(&v5, v3);
  swift_release(v2);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x280))(v5);
}

void sub_1000807C8(double a1, double a2, double a3, double a4)
{
  sub_100080384(a1, a2, a3, a4);
}

void sub_1000807E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_1000821D0();
}

void sub_10008080C()
{
  _QWORD *v0;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v2;
  id v3;
  uint64_t v4;
  SEL *v5;
  CGFloat m22;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  char *v25;
  char *v26;
  id v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  double v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  CGFloat v38;
  double v39;
  CGFloat v40;
  id v41;
  _BYTE *v42;
  void *v43;
  _BYTE *v44;
  void *v45;
  id v46;
  void *v47;
  CGFloat v48;
  __n128 v49;
  CATransform3D v50;

  isEscapingClosureAtFileLocation = qword_10047F650;
  if ((*((_BYTE *)v0 + qword_10047F650) & 1) == 0)
  {
    v2 = qword_10047F678;
    v3 = *(id *)((char *)v0 + qword_10047F678);
    objc_msgSend(v0, "bounds");
    objc_msgSend(v3, "setFrame:");

    v4 = *(_QWORD *)((char *)v0 + v2);
    v5 = (SEL *)&off_10046F000;
    objc_msgSend(v0, "addSubview:", v4);
    m22 = *(double *)&qword_10047F680;
    v7 = *(id *)((char *)v0 + qword_10047F680);
    objc_msgSend(v0, "bounds");
    objc_msgSend(v7, "setFrame:");

    objc_msgSend(v0, "addSubview:", *(_QWORD *)((char *)v0 + *(_QWORD *)&m22));
    v8 = qword_10047F688;
    v9 = *(id *)((char *)v0 + qword_10047F688);
    objc_msgSend(v0, "bounds");
    objc_msgSend(v9, "setFrame:");

    v10 = objc_msgSend(v0, "addSubview:", *(_QWORD *)((char *)v0 + v8));
    v11 = (*(uint64_t (**)(id))((swift_isaMask & *v0) + 0x2B0))(v10);
    v12 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x2B8))(v11);
    v13 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x2D8))(v12);
    (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x2D0))(v13);
    v14 = *(void **)((char *)v0 + qword_10047F628);
    if (v14)
    {
      v15 = *(void **)((char *)v0 + *(_QWORD *)&m22);
      v16 = v14;
      objc_msgSend(v15, "addSubview:", v16);
      v17 = &v16[OBJC_IVAR____TtC7Measure10EditButton_delegate];
      *((_QWORD *)v17 + 1) = &off_100442820;
      swift_unknownObjectWeakAssign(v17, v0);

    }
    v18 = *(void **)((char *)v0 + qword_10047F630);
    if (v18)
    {
      v19 = *(void **)((char *)v0 + *(_QWORD *)&m22);
      v20 = v18;
      objc_msgSend(v19, "addSubview:", v20);
      v21 = &v20[OBJC_IVAR____TtC7Measure10UndoButton_delegate];
      *((_QWORD *)v21 + 1) = &off_100442810;
      swift_unknownObjectWeakAssign(v21, v0);

    }
    v22 = qword_10047F638;
    v23 = *(void **)((char *)v0 + qword_10047F638);
    if (v23)
    {
      v24 = *(void **)((char *)v0 + *(_QWORD *)&m22);
      v25 = v23;
      objc_msgSend(v24, "addSubview:", v25);
      v26 = &v25[OBJC_IVAR____TtC7Measure12DeleteButton_delegate];
      *((_QWORD *)v26 + 1) = &off_100442800;
      swift_unknownObjectWeakAssign(v26, v0);

    }
    v27 = objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable");
    if ((_DWORD)v27)
    {
      (*(void (**)(void))((swift_isaMask & *v0) + 0x2E0))();
      if (!*(_QWORD *)((char *)v0 + qword_10047F640))
      {
        __break(1u);
        return;
      }
      v27 = objc_msgSend(*(id *)((char *)v0 + *(_QWORD *)&m22), "addSubview:");
    }
    (*(void (**)(id))((swift_isaMask & *v0) + 0x2C0))(v27);
    v28 = qword_10047F648;
    v29 = *(void **)((char *)v0 + qword_10047F648);
    if (!v29)
      goto LABEL_14;
    v30 = v29;
    objc_msgSend(v0, "frame");
    objc_msgSend(v30, "setFrame:");

    objc_msgSend(v30, "setExclusiveTouch:", 1);
    objc_msgSend(v30, "addTarget:action:forControlEvents:", v0, "capture", 64);
    v31 = objc_msgSend(v30, "layer");
    objc_msgSend(v31, "setShadowOffset:", CGSize.init(_:_:)(0.0, 0.0));

    v32 = objc_msgSend(v30, "layer");
    objc_msgSend(v32, "setShadowRadius:", 10.0);

    v33 = objc_msgSend(v30, "layer");
    LODWORD(v34) = 1036831949;
    objc_msgSend(v33, "setShadowOpacity:", v34);

    v35 = qword_10047ADE8;
    v36 = v30;
    if (v35 != -1)
      goto LABEL_23;
    while (1)
    {
      objc_msgSend(v36, "setTintColor:", qword_1004AF8D0);

      objc_msgSend(*(id *)((char *)v0 + *(_QWORD *)&m22), v5[232], v36);
      v37 = objc_msgSend(v36, "sizeToFit");
      v38 = (*(double (**)(id))((swift_isaMask & *v0) + 0x288))(v37);
      v40 = v39;
      v41 = objc_msgSend(v36, "layer");
      CATransform3DMakeTranslation(&v50, v38, v40, 0.0);
      objc_msgSend(v41, "setTransform:", &v50);

      objc_msgSend(v36, "setEnabled:", 0);
      objc_msgSend(v36, "setAdjustsImageWhenDisabled:", 1);

LABEL_14:
      v42 = *(_BYTE **)((char *)v0 + v22);
      if (v42 && v42[OBJC_IVAR____TtC7Measure12DeleteButton_isEnabled] == 1)
      {
        v42[OBJC_IVAR____TtC7Measure12DeleteButton_isEnabled] = 0;
        v43 = *(void **)&v42[OBJC_IVAR____TtC7Measure12DeleteButton_deleteButton];
        v44 = v42;
        objc_msgSend(v43, "setEnabled:", 0);
        objc_msgSend(v44, "setUserInteractionEnabled:", 0);

      }
      sub_10007FC04(0);
      v45 = *(void **)((char *)v0 + v28);
      if (v45)
      {
        v46 = v45;
        objc_msgSend(v46, "setEnabled:", 0);
        objc_msgSend(v46, "setShowDisabled:", 1);

      }
      *((_BYTE *)v0 + isEscapingClosureAtFileLocation) = 1;
      v47 = (void *)objc_opt_self(UIView);
      v36 = (_QWORD *)swift_allocObject(&unk_100442908, 24, 7);
      v36[2] = v0;
      v48 = COERCE_DOUBLE(swift_allocObject(&unk_100442930, 32, 7));
      *(_QWORD *)(*(_QWORD *)&v48 + 16) = sub_1000821B8;
      *(_QWORD *)(*(_QWORD *)&v48 + 24) = v36;
      *(_QWORD *)&v50.m21 = sub_100082450;
      v50.m22 = v48;
      *(_QWORD *)&v50.m11 = _NSConcreteStackBlock;
      *(_QWORD *)&v50.m12 = 1107296256;
      *(_QWORD *)&v50.m13 = sub_1000DDB80;
      *(_QWORD *)&v50.m14 = &unk_100442948;
      v5 = (SEL *)_Block_copy(&v50);
      m22 = v50.m22;
      v0 = v0;
      swift_retain();
      objc_msgSend(v47, "performWithoutAnimation:", v5, swift_release().n128_f64[0]);
      _Block_release(v5);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(*(_QWORD *)&v48, "", 88, 231, 44, 1);
      v49 = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0)
        break;
      __break(1u);
LABEL_23:
      swift_once(&qword_10047ADE8, sub_1001959EC);
    }
    (*(void (**)(__n128))((swift_isaMask & *v0) + 0x2C8))(v49);
    swift_release();
  }
}

uint64_t sub_100080ED4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  (*(void (**)(void))((swift_isaMask & *a1) + 0x2E8))();
  v2 = *(_QWORD *)((char *)a1 + qword_10047F660);
  v3 = swift_retain(v2);
  StateValue.wrappedValue.getter(&v5, v3);
  swift_release(v2);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x280))(v5);
}

void sub_100080F60(void *a1)
{
  id v1;

  v1 = a1;
  sub_10008080C();

}

uint64_t sub_100080F94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  result = swift_unknownObjectWeakLoadStrong(v2 + qword_10047F620, a2);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 80);
    v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 200);
    v8 = swift_retain(v6);
    v9 = v7(v8);
    swift_release(v6);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 280))(a1, 0);
    swift_unknownObjectRelease(v5);
    return swift_release(v9);
  }
  return result;
}

void sub_100081028(void *a1)
{
  id v1;

  v1 = a1;
  sub_100080F94((uint64_t)sub_10007E428, (uint64_t)v1);

}

uint64_t sub_100081068(char *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char *v5;

  result = swift_unknownObjectWeakLoadStrong(&a1[qword_10047F620], a2);
  if (result)
  {
    v4 = result;
    v5 = a1;
    sub_10007E4A0();

    return swift_unknownObjectRelease(v4);
  }
  return result;
}

id sub_1000810BC(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  void *v7;

  v4 = a3;
  v5 = a1;
  sub_100081570();
  v7 = v6;

  return v7;
}

id sub_10008111C(void *a1, uint64_t a2)
{
  id result;
  uint64_t v5;
  uint64_t v6;

  result = objc_msgSend(a1, "setHighlighted:", 0);
  v5 = qword_10047F628;
  if (*(_QWORD *)(a2 + qword_10047F628))
  {
    result = objc_msgSend(a1, "isDescendantOfView:");
    if ((_DWORD)result)
    {
      v6 = *(_QWORD *)(a2 + v5);
      if (v6)
        *(_BYTE *)(v6 + OBJC_IVAR____TtC7Measure10EditButton_isShowingAccessibilityHUD) = 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100081194(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;

  v8 = a5;
  v9 = a1;
  sub_100081E2C(a2, a3);

}

uint64_t sub_1000811F8()
{
  return 0;
}

void sub_100081200()
{
  uint64_t v0;

  sub_10001ADF4(v0 + qword_10047F620);

  swift_release();
  swift_release();
  swift_release();

}

id sub_1000812DC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EditView(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_100081310(uint64_t a1)
{
  sub_10001ADF4(a1 + qword_10047F620);

  swift_release();
  swift_release();
  swift_release();

}

uint64_t type metadata accessor for EditView(uint64_t a1)
{
  uint64_t result;

  result = qword_10047F720;
  if (!qword_10047F720)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EditView);
  return result;
}

uint64_t sub_100081434(uint64_t a1)
{
  _QWORD v2[15];

  v2[0] = &unk_1003B3DA0;
  v2[1] = &unk_1003B3DB8;
  v2[2] = &unk_1003B3DB8;
  v2[3] = &unk_1003B3DB8;
  v2[4] = &unk_1003B3DB8;
  v2[5] = &unk_1003B3DB8;
  v2[6] = &unk_1003B3DD0;
  v2[7] = &unk_1003B3DB8;
  v2[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[14] = &unk_1003B3DE8;
  return swift_initClassMetadata2(a1, 256, 15, v2, a1 + 184);
}

uint64_t sub_1000814C0()
{
  return type metadata accessor for EditView(0);
}

id sub_1000814C8()
{
  void *v0;

  return objc_msgSend(v0, "didTapEditButton");
}

void sub_1000814E0()
{
  sub_10007E470();
}

uint64_t sub_1000814E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008150C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))((swift_isaMask & **(_QWORD **)(v0 + 16)) + 0x280))(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100081548()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100081558(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100081568(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100081570()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *object;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  double left;
  double right;
  double bottom;
  id v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  double v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  uint64_t v44;
  id v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  id v51;
  double v52;
  id v53;
  id v54;
  id v55;
  NSString v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  Swift::String v85;
  Swift::String v86;

  v1 = v0;
  v2 = objc_msgSend(v0, "hitTest:withEvent:", 0);
  if (!v2)
    return;
  v3 = v2;
  v4 = objc_opt_self(UIControl);
  v5 = swift_dynamicCastObjCClass(v3, v4);
  if (!v5)
  {

    return;
  }
  v6 = (void *)v5;
  v7 = objc_opt_self(UIButton);
  object = (void *)swift_dynamicCastObjCClass(v6, v7);
  if (object)
  {
    v9 = v3;
    v10 = objc_msgSend(object, "imageView");
    v11 = objc_msgSend(v10, "image");

    v12 = objc_msgSend(object, "titleForState:", 0);
    if (v12)
    {
      v13 = v12;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      object = v14;

    }
    else
    {

      object = 0;
    }
  }
  else
  {
    v11 = 0;
  }
  if (!*(_QWORD *)&v1[qword_10047F630])
  {
    swift_bridgeObjectRelease(object);

    __break(1u);
LABEL_66:
    swift_bridgeObjectRelease(object);

    __break(1u);
    goto LABEL_67;
  }
  if ((objc_msgSend(v6, "isDescendantOfView:") & 1) != 0)
  {
    swift_bridgeObjectRelease(object);
    v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v84 = 0xE000000000000000;
    v16 = 0x80000001003DC3D0;
    v17 = 0xD00000000000001FLL;
LABEL_20:
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    v24 = 0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v17, (Swift::String_optional)0, (NSBundle)v15, v23, *(Swift::String *)(&v84 + -8))._object;

    goto LABEL_21;
  }
  v18 = *(void **)&v1[qword_10047F638];
  if (v18)
  {
    v19 = v18;
    if (objc_msgSend(v6, "isDescendantOfView:", v19))
    {
      swift_bridgeObjectRelease(object);
      v20 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v21._countAndFlagsBits = 0xD000000000000012;
      v85._object = (void *)0xE000000000000000;
      v21._object = (void *)0x80000001003DC3B0;
      v22._countAndFlagsBits = 0;
      v22._object = (void *)0xE000000000000000;
      v85._countAndFlagsBits = 0;
      object = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v85)._object;

      goto LABEL_21;
    }

  }
  if (!*(_QWORD *)&v1[qword_10047F648])
    goto LABEL_66;
  if ((objc_msgSend(v6, "isDescendantOfView:") & 1) != 0)
  {
    swift_bridgeObjectRelease(object);
    v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v17 = 0xD000000000000022;
    v84 = 0xE000000000000000;
    v16 = 0x80000001003DC380;
    goto LABEL_20;
  }
  v44 = qword_10047F628;
  if (!*(_QWORD *)&v1[qword_10047F628])
  {
LABEL_67:
    swift_bridgeObjectRelease(object);

    __break(1u);
    return;
  }
  if ((objc_msgSend(v6, "isDescendantOfView:") & 1) != 0)
  {
    swift_bridgeObjectRelease(object);
    v45 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v86._object = (void *)0xE000000000000000;
    v46._object = (void *)0x80000001003DC360;
    v46._countAndFlagsBits = 0xD00000000000001FLL;
    v47._countAndFlagsBits = 0;
    v47._object = (void *)0xE000000000000000;
    v86._countAndFlagsBits = 0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v46, (Swift::String_optional)0, (NSBundle)v45, v47, v86)._object;

    v48 = *(_QWORD *)&v1[v44];
    if (v48)
      *(_BYTE *)(v48 + OBJC_IVAR____TtC7Measure10EditButton_isShowingAccessibilityHUD) = 1;
  }
LABEL_21:
  left = UIEdgeInsetsZero.left;
  bottom = UIEdgeInsetsZero.bottom;
  right = UIEdgeInsetsZero.right;
  if (v11)
  {
    v28 = v11;
    v29 = objc_msgSend(v28, "CGImage");
    if (v29)
    {
      v30 = v29;
      v31 = (void *)objc_opt_self(UIApplication);
      v32 = objc_msgSend(v31, "sharedApplication");
      v33 = objc_msgSend(v32, "preferredContentSizeCategory");

      LOBYTE(v32) = UIContentSizeCategory.isAccessibilityCategory.getter(v33);
      v34 = 1.0;
      if ((v32 & 1) == 0)
      {
LABEL_39:
        v51 = v30;
        objc_msgSend(v28, "scale");
        v53 = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:scale:orientation:", v51, 0, v34 * v52);

        v54 = objc_msgSend(v53, "imageWithRenderingMode:", 2);
        v55 = v54;
        if (object)
        {
          v56 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(object);
        }
        else
        {
          v56 = 0;
        }
        objc_msgSend(objc_allocWithZone((Class)UIAccessibilityHUDItem), "initWithTitle:image:imageInsets:", v56, v54, UIEdgeInsetsZero.top, left, bottom, right);

        return;
      }
      v35 = objc_msgSend(v31, "sharedApplication");
      v36 = objc_msgSend(v35, "preferredContentSizeCategory");

      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryAccessibilityExtraExtraExtraLarge);
      v39 = v38;
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v42 = v40;
      if (v37 == v41 && v39 == v40)
      {
        swift_bridgeObjectRelease_n(v39, 2);
      }
      else
      {
        v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v41, v40, 0);
        swift_bridgeObjectRelease(v39);
        swift_bridgeObjectRelease(v42);
        if ((v49 & 1) == 0)
        {
          v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryAccessibilityExtraExtraLarge);
          v59 = v58;
          v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
          v62 = v60;
          if (v57 == v61 && v59 == v60)
          {
            swift_bridgeObjectRelease_n(v59, 2);
          }
          else
          {
            v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v59, v61, v60, 0);
            swift_bridgeObjectRelease(v59);
            swift_bridgeObjectRelease(v62);
            if ((v63 & 1) == 0)
            {
              v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryAccessibilityExtraLarge);
              v66 = v65;
              v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
              v69 = v67;
              if (v64 == v68 && v66 == v67)
              {
                swift_bridgeObjectRelease_n(v66, 2);
              }
              else
              {
                v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v66, v68, v67, 0);
                swift_bridgeObjectRelease(v66);
                swift_bridgeObjectRelease(v69);
                if ((v70 & 1) == 0)
                {
                  v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryAccessibilityLarge);
                  v73 = v72;
                  v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
                  v76 = v74;
                  if (v71 == v75 && v73 == v74)
                  {
                    swift_bridgeObjectRelease_n(v73, 2);
                  }
                  else
                  {
                    v77 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v73, v75, v74, 0);
                    swift_bridgeObjectRelease(v73);
                    swift_bridgeObjectRelease(v76);
                    if ((v77 & 1) == 0)
                    {
                      v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryAccessibilityMedium);
                      v80 = v79;
                      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
                      v83 = v81;
                      if (v78 == v82 && v80 == v81)
                      {
                        v34 = 0.7;
                      }
                      else if ((_stringCompareWithSmolCheck(_:_:expecting:)(v78, v80, v82, v81, 0) & 1) != 0)
                      {
                        v34 = 0.7;
                      }
                      else
                      {
                        v34 = 1.0;
                      }

                      swift_bridgeObjectRelease(v80);
                      swift_bridgeObjectRelease(v83);
                      goto LABEL_39;
                    }
                  }

                  *(double *)&v50 = 0.6;
                  goto LABEL_38;
                }
              }

              v34 = 0.5;
              goto LABEL_39;
            }
          }

          v34 = 0.4;
          goto LABEL_39;
        }
      }

      *(double *)&v50 = 0.3;
LABEL_38:
      v34 = *(double *)&v50;
      goto LABEL_39;
    }

  }
  if (object)
  {
    v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
  }
  else
  {
    v43 = 0;
  }
  objc_msgSend(objc_allocWithZone((Class)UIAccessibilityHUDItem), "initWithTitle:image:imageInsets:", v43, v11, UIEdgeInsetsZero.top, left, bottom, right);

}

void sub_100081E2C(double a1, double a2)
{
  char *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  __n128 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v10 - 8);
  v39 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchTime(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v35 - v18;
  v20 = *(void **)&v2[qword_10047F628];
  if (v20)
  {
    v21 = v20;
    sub_10007C958();

  }
  v40 = objc_msgSend(v3, "hitTest:withEvent:", 0, a1, a2);
  if (v40)
  {
    v37 = v7;
    v22 = objc_opt_self(UIControl);
    v23 = (void *)swift_dynamicCastObjCClass(v40, v22);
    if (v23)
    {
      v24 = v23;
      objc_msgSend(v23, "setHighlighted:", 1);
      objc_msgSend(v24, "sendActionsForControlEvents:", 64);
      sub_100049274();
      v36 = static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      + infix(_:_:)(v17, 0.1);
      v25 = *(void (**)(char *, uint64_t))(v14 + 8);
      v25(v17, v13);
      v26 = swift_allocObject(&unk_1004428B8, 32, 7);
      *(_QWORD *)(v26 + 16) = v24;
      *(_QWORD *)(v26 + 24) = v3;
      aBlock[4] = sub_10008218C;
      aBlock[5] = v26;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10003ECA0;
      aBlock[3] = &unk_1004428D0;
      v27 = _Block_copy(aBlock);
      v28 = v40;
      v29 = v3;
      v30 = swift_release();
      static DispatchQoS.unspecified.getter(v30);
      aBlock[0] = _swiftEmptyArrayStorage;
      v31 = sub_100030E1C();
      v32 = sub_10000EDC8((uint64_t *)&unk_10047E430);
      v33 = sub_100030E64();
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v32, v33, v6, v31);
      v34 = (void *)v36;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v19, v12, v9, v27);
      _Block_release(v27);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v6);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v39);
      v25(v19, v13);
    }
    else
    {

    }
  }
}

uint64_t sub_100082160()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_10008218C()
{
  uint64_t v0;

  return sub_10008111C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100082194()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000821B8()
{
  uint64_t v0;

  return sub_100080ED4(*(_QWORD **)(v0 + 16));
}

uint64_t sub_1000821C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000821D0()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, __n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  objc_class *ObjCClassFromMetadata;
  uint64_t v25;

  v1 = v0;
  v2 = &v0[qword_10047F620];
  *((_QWORD *)v2 + 1) = 0;
  swift_unknownObjectWeakInit(v2, 0);
  *(_QWORD *)&v0[qword_10047F628] = 0;
  *(_QWORD *)&v0[qword_10047F630] = 0;
  *(_QWORD *)&v0[qword_10047F638] = 0;
  *(_QWORD *)&v0[qword_10047F640] = 0;
  *(_QWORD *)&v0[qword_10047F648] = 0;
  v0[qword_10047F650] = 0;
  *(_QWORD *)&v0[qword_10047F658] = 0;
  v3 = qword_10047F660;
  v4 = sub_10000EDC8((uint64_t *)&unk_1004810D0);
  KeyPath = swift_getKeyPath(&unk_1003B3E30);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v6 = qword_1004AF890;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 272);
  v8 = swift_retain();
  *(_QWORD *)&v1[v3] = v7(KeyPath, v6, v8);
  v9 = qword_10047F668;
  v10 = sub_10000EDC8(&qword_10047E5E0);
  v11 = swift_getKeyPath(&unk_1003B3E58);
  v12 = qword_1004AF890;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 272);
  v14 = swift_retain();
  *(_QWORD *)&v1[v9] = v13(v11, v12, v14);
  v15 = qword_10047F670;
  v16 = sub_10000EDC8(&qword_10047FAC8);
  v17 = swift_getKeyPath(&unk_1003B3E80);
  v18 = qword_1004AF890;
  v19 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v16 + 272);
  v20 = swift_retain();
  *(_QWORD *)&v1[v15] = v19(v17, v18, v20);
  v21 = qword_10047F678;
  *(_QWORD *)&v1[v21] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v22 = qword_10047F680;
  v23 = type metadata accessor for TouchPassThroughView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v23);
  *(_QWORD *)&v1[v22] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v25 = qword_10047F688;
  *(_QWORD *)&v1[v25] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/EditView.swift", 22, 2, 172, 0);
  __break(1u);
}

uint64_t sub_100082420()
{
  uint64_t v0;

  return sub_10008075C(*(_QWORD **)(v0 + 16));
}

uint64_t sub_100082428()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100082438(uint64_t *a1)
{
  uint64_t v1;

  sub_10007FCB4(a1, *(_QWORD **)(v1 + 16));
}

void sub_100082440(uint64_t a1)
{
  uint64_t v1;

  sub_10007FE54(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100082448(uint64_t a1)
{
  uint64_t v1;

  return sub_10007FF24(a1, *(_QWORD *)(v1 + 16));
}

void sub_100082470()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  char v15;
  uint64_t v16;
  char v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;

  v1 = v0;
  v2 = sub_100082F18();
  if (v2)
  {
    v3 = v2;
    v26 = objc_msgSend(v2, "imageWithRenderingMode:", 2);

    v4 = objc_msgSend(objc_allocWithZone((Class)ASVRoundedButton), "initWithImage:buttonStyle:textStyle:controlStyle:", v26, 0, 0, 1);
    v5 = OBJC_IVAR____TtC7Measure13HistoryButton_button;
    v6 = *(void **)&v1[OBJC_IVAR____TtC7Measure13HistoryButton_button];
    *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure13HistoryButton_button] = v4;

    v7 = *(void **)&v1[v5];
    if (v7)
    {
      v8 = objc_opt_self(ASVRoundedButton);
      v9 = swift_dynamicCastObjCClass(v7, v8);
      if (v9)
      {
        v10 = (void *)v9;
        v11 = qword_10047B110;
        v12 = v7;
        if (v11 != -1)
          swift_once(&qword_10047B110, sub_100197AC8);
        v13 = (void *)qword_1004AFC50;
        v14 = *(void **)algn_1004AFC58;
        if ((byte_1004AFC60 & 1) != 0)
        {
          v15 = byte_1004AFC70;
          v16 = qword_1004AFC68;
          v17 = byte_10048A2A0;
          v18 = (id)qword_1004AFC50;
          v19 = sub_100070DBC(v17, v16, v15);
          sub_100021580(v13, v14, 1);
        }
        else
        {
          if ((byte_10048A2A0 & 1) != 0)
            v20 = *(id *)algn_1004AFC58;
          else
            v20 = (id)qword_1004AFC50;
          v19 = v20;
        }
        objc_msgSend(v10, "setTintColor:", v19);

        objc_msgSend(v10, "addTarget:action:forControlEvents:", v1, "showHistoryFrom:", 64);
        objc_msgSend(v1, "addSubview:", v10);
        v21 = objc_msgSend(v10, "widthAnchor");
        v22 = objc_msgSend(v21, "constraintEqualToConstant:", 80.0);

        objc_msgSend(v22, "setActive:", 1);
        v23 = objc_msgSend(v10, "heightAnchor");
        v24 = objc_msgSend(v23, "constraintEqualToConstant:", 47.0);

        objc_msgSend(v24, "setActive:", 1);
        sub_1000828E0();
        sub_100082A10();
        v25 = *(void **)&v1[v5];
        if (v25)
          objc_msgSend(v25, "setEnabled:", 0);

      }
    }

  }
  else
  {
    __break(1u);
  }
}

void sub_10008271C()
{
  char *v0;
  id v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  objc_class *v10;
  NSString *v11;
  id v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  objc_super v21;

  v1 = objc_msgSend(objc_allocWithZone((Class)UIPointerInteraction), "initWithDelegate:", v0);
  objc_msgSend(v0, "addInteraction:", v1);
  objc_msgSend(v0, "bounds");
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  CGSize.init(_:_:)(36.0, 32.0);
  v10 = (objc_class *)type metadata accessor for BlurredButton();
  v21.receiver = objc_allocWithZone(v10);
  v21.super_class = v10;
  v11 = UIFontTextStyleSubheadline;
  v12 = objc_msgSendSuper2(&v21, "initWithFrame:", v3, v5, v7, v9);
  objc_msgSend(v12, "bounds", v21.receiver, v21.super_class);
  sub_100039B08((uint64_t)v12, v13, v14, v15, v16, 0x6C75622E7473696CLL, 0xEB0000000074656CLL, (uint64_t)v11, 0);

  v17 = OBJC_IVAR____TtC7Measure13HistoryButton_button;
  v18 = *(void **)&v0[OBJC_IVAR____TtC7Measure13HistoryButton_button];
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure13HistoryButton_button] = v12;

  if (!*(_QWORD *)&v0[v17])
  {
    __break(1u);
    goto LABEL_7;
  }
  objc_msgSend(v0, "addSubview:");
  v19 = *(void **)&v0[v17];
  if (!v19)
  {
LABEL_7:
    __break(1u);
    return;
  }
  objc_msgSend(v19, "addTarget:action:forControlEvents:", v0, "showHistoryFrom:", 64);
  v20 = *(void **)&v0[v17];
  if (v20)
    objc_msgSend(v20, "setEnabled:", 0);

}

void sub_1000828E0()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[6];

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10047B198 != -1)
    swift_once(&qword_10047B198, sub_1001CA024);
  v2 = qword_1004AFD10;
  v3 = swift_allocObject(&unk_100442A28, 24, 7);
  *(_QWORD *)(v3 + 16) = v0;
  v7[4] = sub_100083080;
  v7[5] = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1000DCC48;
  v7[3] = &unk_100442A40;
  v4 = _Block_copy(v7);
  v5 = v0;
  v6 = objc_msgSend(v1, "addObserverForName:object:queue:usingBlock:", v2, 0, 0, v4, swift_release().n128_f64[0]);
  _Block_release(v4);
  swift_unknownObjectRelease(v6);

}

void sub_100082A10()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  char v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7Measure13HistoryButton_button);
  if (v1)
  {
    v2 = objc_opt_self(ASVRoundedButton);
    v3 = swift_dynamicCastObjCClass(v1, v2);
    if (v3)
    {
      v4 = (void *)v3;
      v5 = qword_10047B110;
      v15 = v1;
      if (v5 != -1)
        swift_once(&qword_10047B110, sub_100197AC8);
      v6 = (void *)qword_1004AFC50;
      v7 = *(void **)algn_1004AFC58;
      if ((byte_1004AFC60 & 1) != 0)
      {
        v8 = byte_1004AFC70;
        v9 = qword_1004AFC68;
        v10 = byte_10048A2A0;
        v11 = (id)qword_1004AFC50;
        v12 = sub_100070DBC(v10, v9, v8);
        sub_100021580(v6, v7, 1);
      }
      else
      {
        if ((byte_10048A2A0 & 1) != 0)
          v13 = *(id *)algn_1004AFC58;
        else
          v13 = (id)qword_1004AFC50;
        v12 = v13;
      }
      objc_msgSend(v4, "setTintColor:", v12);

      if (byte_10048A2A0)
        v14 = 2;
      else
        v14 = 1;
      objc_msgSend(v4, "setControlStyle:", v14);

    }
  }
}

uint64_t type metadata accessor for HistoryButton()
{
  return objc_opt_self(_TtC7Measure13HistoryButton);
}

uint64_t sub_100082C9C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  v12 = (void *)static OS_dispatch_queue.main.getter(v11);
  v13 = swift_allocObject(&unk_100442A78, 24, 7);
  *(_QWORD *)(v13 + 16) = a2;
  aBlock[4] = sub_1000830A0;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100442A90;
  v14 = _Block_copy(aBlock);
  v15 = a2;
  v16 = swift_release();
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = sub_100030E1C();
  v18 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v19 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

id sub_100082F18()
{
  id v0;
  id v1;
  double v2;
  id v3;
  NSString v4;
  id v5;

  v0 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", UIContentSizeCategoryLarge);
  v1 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:compatibleWithTraitCollection:", UIFontTextStyleSubheadline, v0);
  objc_msgSend(v1, "pointSize");
  v3 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 7, 3, v2);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v4, v3);

  return v5;
}

uint64_t sub_10008305C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100083080(uint64_t a1)
{
  uint64_t v1;

  return sub_100082C9C(a1, *(void **)(v1 + 16));
}

uint64_t sub_100083088(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100083098(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000830A0()
{
  sub_100082A10();
}

void sub_1000830C0()
{
  uint64_t v0;
  void *v1;
  void (*v2)(__n128);
  uint64_t v3;
  __n128 v4;
  id v5;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7Measure13HistoryButton_button);
  if (v1)
  {
    v5 = v1;
    if (objc_msgSend(v5, "isEnabled")
      && (v2 = *(void (**)(__n128))(v0 + OBJC_IVAR____TtC7Measure13HistoryButton_tapHandler)) != 0)
    {
      v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure13HistoryButton_tapHandler + 8);
      v4 = swift_retain();
      v2(v4);

      sub_1000217BC((uint64_t)v2, v3);
    }
    else
    {

    }
  }
}

uint64_t sub_100083160()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v1 = sub_10000EDC8(&qword_10047F480);
  __chkstk_darwin(v1);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UIPointerEffect(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = objc_msgSend(objc_allocWithZone((Class)UIPreviewParameters), "init");
  objc_msgSend(v0, "bounds");
  v13 = CGRect.center.getter(v9, v10, v11, v12);
  v15 = v14;
  objc_msgSend(v0, "bounds");
  v18 = CGRect.init(center:size:)(v13, v15, v16, v17);
  v22 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithOvalInRect:", v18, v19, v20, v21);
  objc_msgSend(v8, "setVisiblePath:", v22);

  sub_100018148(0, (unint64_t *)&qword_10047F488, UIPointerStyle_ptr);
  *v7 = objc_msgSend(objc_allocWithZone((Class)UITargetedPreview), "initWithView:parameters:", v0, v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for UIPointerEffect.lift(_:), v4);
  v23 = type metadata accessor for UIPointerShape(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v3, 1, 1, v23);
  v24 = UIPointerStyle.init(effect:shape:)(v7, v3);

  return v24;
}

double sub_100083368()
{
  uint64_t v0;
  double result;

  v0 = *(_QWORD *)effectiveStatusBarOrientation.unsafeMutableAddressor();
  result = 0.0;
  xmmword_1004AF228 = 0u;
  *(_OWORD *)&qword_1004AF238 = 0u;
  qword_1004AF248 = 0;
  qword_1004AF250 = v0;
  qword_1004AF288 = 0;
  *(_OWORD *)&qword_1004AF268 = 0u;
  *(_OWORD *)&qword_1004AF278 = 0u;
  xmmword_1004AF258 = 0u;
  return result;
}

void sub_1000833A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  int v9;
  uint64_t v10;
  void (*v11)(_QWORD *);
  id v12;
  char v13;
  void (*v14)(_QWORD *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v18;
  id v19;
  void **v20;
  void *v21;
  id v22;
  char v23;
  uint64_t v24;
  void (*v25)(_QWORD *__return_ptr, uint64_t);
  uint64_t v26;
  void **v27;
  void *v28;
  id v29;
  char v30;
  uint64_t v31;
  void (*v32)(_QWORD *__return_ptr, uint64_t);
  uint64_t v33;
  void **v34;
  void *v35;
  id v36;
  uint64_t v37;
  void **v38;
  _QWORD v39[3];
  _BYTE v40[24];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = (void **)(v1 + 40);
  swift_beginAccess(v1 + 40, v40, 0, 0);
  v8 = *(void **)(v1 + 40);
  v9 = *(unsigned __int8 *)(v2 + 48);
  *v7 = v8;
  v10 = enum case for DispatchPredicate.onQueue(_:);
  v11 = *(void (**)(_QWORD *))(v5 + 104);
  v11(v7);
  v12 = v8;
  v13 = _dispatchPreconditionTest(_:)(v7);
  v14 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v14(v7, v4);

  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v15 = *(_QWORD *)(v2 + 64);
  v16 = swift_retain(v15);
  Synchronized.wrappedValue.getter(v39, v16);
  swift_release(v15);
  if ((v39[0] & 1) != 0 || v9 == a1)
  {
LABEL_8:
    v20 = v38;
    swift_beginAccess(v38, v39, 33, 0);
    v21 = *v20;
    *v7 = v21;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v11)(v7, v10, v4);
    v22 = v21;
    LOBYTE(v21) = _dispatchPreconditionTest(_:)(v7);
    v14(v7, v4);
    if ((v21 & 1) != 0)
      goto LABEL_19;
    goto LABEL_21;
  }
  if ((a1 - 1) > 1u)
  {
    sub_100049274();
    *v7 = static OS_dispatch_queue.main.getter();
    ((void (*)(_QWORD *, uint64_t, uint64_t))v11)(v7, v10, v4);
    v23 = _dispatchPreconditionTest(_:)(v7);
    v14(v7, v4);
    if ((v23 & 1) == 0)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v24 = *(_QWORD *)(v2 + 56);
    v25 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v24 + 144);
    v26 = swift_retain(v24);
    v25(v39, v26);
    swift_release(v24);
    if (((BYTE3(v39[0]) | BYTE4(v39[0])) & 1) == 0)
      sub_1000838C4(a1);
    v27 = v38;
    swift_beginAccess(v38, v39, 33, 0);
    v28 = *v27;
    *v7 = v28;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v11)(v7, v10, v4);
    v29 = v28;
    LOBYTE(v28) = _dispatchPreconditionTest(_:)(v7);
    v14(v7, v4);
    if ((v28 & 1) != 0)
      goto LABEL_19;
    __break(1u);
  }
  else if ((v9 & 0xFE) == 6)
  {
    v17 = v38;
    swift_beginAccess(v38, v39, 33, 0);
    v18 = *v17;
    *v7 = v18;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v11)(v7, v10, v4);
    v19 = v18;
    LOBYTE(v18) = _dispatchPreconditionTest(_:)(v7);
    v14(v7, v4);
    if ((v18 & 1) != 0)
    {
LABEL_19:
      *(_BYTE *)(v2 + 48) = a1;
      swift_endAccess(v39);
      return;
    }
    __break(1u);
    goto LABEL_8;
  }
  sub_100049274();
  *v7 = static OS_dispatch_queue.main.getter();
  ((void (*)(_QWORD *, uint64_t, uint64_t))v11)(v7, v10, v4);
  v30 = _dispatchPreconditionTest(_:)(v7);
  v14(v7, v4);
  if ((v30 & 1) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v31 = *(_QWORD *)(v2 + 56);
  v32 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v31 + 144);
  v33 = swift_retain(v31);
  v32(v39, v33);
  swift_release(v31);
  if (((BYTE3(v39[0]) | BYTE4(v39[0])) & 1) == 0)
    sub_1000838C4(a1);
  v34 = v38;
  swift_beginAccess(v38, v39, 33, 0);
  v35 = *v34;
  *v7 = v35;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v11)(v7, v10, v4);
  v36 = v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)(v7);
  v14(v7, v4);
  if ((v35 & 1) != 0)
    goto LABEL_19;
LABEL_24:
  __break(1u);
}

uint64_t sub_100083764()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for FeedbackGenerator();
  swift_allocObject(v0, 72, 7);
  result = sub_10008379C();
  qword_1004AF290 = result;
  return result;
}

uint64_t sub_10008379C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  char v9;
  _QWORD *v10;

  v1 = v0;
  v10 = _swiftEmptyDictionarySingleton;
  v2 = sub_10000EDC8(&qword_10047FC40);
  swift_allocObject(v2, 32, 7);
  *(_QWORD *)(v0 + 16) = Synchronized.init(wrappedValue:)(&v10);
  sub_100049274();
  *(_QWORD *)(v0 + 24) = static OS_dispatch_queue.main.getter();
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = static OS_dispatch_queue.main.getter();
  *(_BYTE *)(v0 + 48) = 0;
  KeyPath = swift_getKeyPath(&unk_1003B3F88);
  v4 = sub_10000EDC8((uint64_t *)&unk_100481B90);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v5 = qword_1004AF890;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 272);
  swift_retain(qword_1004AF890);
  *(_QWORD *)(v1 + 56) = v6(KeyPath, v5);
  v9 = 0;
  v7 = sub_10000EDC8(&qword_10047E638);
  swift_allocObject(v7, 32, 7);
  *(_QWORD *)(v1 + 64) = Synchronized.init(wrappedValue:)(&v9);
  return v1;
}

double sub_1000838C4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  char v10;
  void (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  char v25;
  __n128 v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  char v36;
  Swift::String v37;
  char v38;
  void *object;
  double result;
  uint64_t v41;
  Swift::String v42;
  char v43;
  _QWORD v44[3];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100049274();
  *v7 = static OS_dispatch_queue.main.getter();
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 104);
  v9(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = _dispatchPreconditionTest(_:)(v7);
  v11 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v11(v7, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v12 = v2[2];
  v13 = swift_retain(v12);
  Synchronized.wrappedValue.getter(v44, v13);
  swift_release(v12);
  v14 = v44[0];
  if (!*(_QWORD *)(v44[0] + 16) || (v15 = sub_1000C819C(a1), (v16 & 1) == 0))
  {
    swift_bridgeObjectRelease(v14);
LABEL_7:
    v41 = a1;
    swift_beginAccess(v2 + 3, v44, 0, 0);
    v23 = (void *)v2[3];
    v22 = v2[4];
    *v7 = v23;
    v9(v7, v8, v4);
    swift_retain(v22);
    v24 = v23;
    v25 = _dispatchPreconditionTest(_:)(v7);
    v11(v7, v4);
    swift_release(v22);

    if ((v25 & 1) != 0)
    {
      if (!v22)
      {
        if (qword_10047AA38 != -1)
          swift_once(&qword_10047AA38, sub_1000E11A8);
        v27._countAndFlagsBits = 0xD000000000000045;
        v27._object = (void *)0x80000001003DC540;
        Log.debug(_:isPrivate:)(v27, 0);
        v28 = type metadata accessor for HapticFeedbackGenerator();
        swift_allocObject(v28, 24, 7);
        v29 = sub_10008FE40();
        swift_beginAccess(v2 + 3, &v42, 33, 0);
        v30 = (void *)v2[3];
        *v7 = v30;
        v9(v7, v8, v4);
        swift_retain(v29);
        v31 = v30;
        LOBYTE(v30) = _dispatchPreconditionTest(_:)(v7);
        v11(v7, v4);
        if ((v30 & 1) == 0)
        {
          __break(1u);
          goto LABEL_22;
        }
        v32 = v2[4];
        v2[4] = v29;
        swift_endAccess(&v42);
        swift_release(v29);
        v26 = swift_release(v32);
      }
      v33 = (void *)v2[3];
      v34 = v2[4];
      *v7 = v33;
      ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v9)(v7, v8, v4, v26);
      swift_retain(v34);
      v35 = v33;
      v36 = _dispatchPreconditionTest(_:)(v7);
      v11(v7, v4);

      if ((v36 & 1) != 0)
      {
        if (v34)
        {
          if (qword_10047AA38 == -1)
            goto LABEL_16;
          goto LABEL_20;
        }
LABEL_22:
        __break(1u);
        JUMPOUT(0x100083D1CLL);
      }
LABEL_19:
      __break(1u);
LABEL_20:
      swift_once(&qword_10047AA38, sub_1000E11A8);
LABEL_16:
      v42._countAndFlagsBits = 0;
      v42._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(20);
      v37._object = (void *)0x80000001003DC520;
      v37._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v37);
      v38 = v41;
      v43 = v41;
      _print_unlocked<A, B>(_:_:)(&v43, &v42, &type metadata for FeedbackGenerator.Feedback, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      object = v42._object;
      Log.debug(_:isPrivate:)(v42, 0);
      swift_bridgeObjectRelease(object);
      __asm { BR              X10 }
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v17 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 56) + v15);
  swift_bridgeObjectRelease(v14);
  if (v17 != 1)
    goto LABEL_7;
  v18 = v2[2];
  v19 = swift_retain(v18);
  Synchronized.wrappedValue.getter(v44, v19);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44[0]);
  v42._countAndFlagsBits = v44[0];
  v44[0] = 0x8000000000000000;
  sub_1000BC69C(0, a1, isUniquelyReferenced_nonNull_native);
  v21 = v44[0];
  v44[0] = v42._countAndFlagsBits;
  swift_bridgeObjectRelease(v21);
  v42._countAndFlagsBits = v44[0];
  Synchronized.wrappedValue.setter(&v42);
  *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  return result;
}

void sub_100083D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __n128 v5;
  void *v6;
  id v7;
  Swift::String v8;
  _BYTE v10[24];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = swift_beginAccess(v0 + 24, v10, 33, 0);
  v6 = *(void **)(v0 + 24);
  *v4 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1, v5);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  *(_QWORD *)(v0 + 32) = 0;
  swift_endAccess(v10);
  swift_release();
  if (qword_10047AA38 != -1)
LABEL_5:
    swift_once(&qword_10047AA38, sub_1000E11A8);
  v8._object = (void *)0x80000001003DC590;
  v8._countAndFlagsBits = 0xD000000000000025;
  Log.default(_:isPrivate:)(v8, 0);
}

uint64_t sub_100083E78()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 32);

  swift_release(v1);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for FeedbackGenerator()
{
  return objc_opt_self(_TtC7Measure17FeedbackGenerator);
}

uint64_t getEnumTagSinglePayload for FeedbackGenerator.Feedback(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FeedbackGenerator.Feedback(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_100083FC8 + 4 * byte_1003B3EC5[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_100083FFC + 4 * asc_1003B3EC0[v4]))();
}

uint64_t sub_100083FFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100084004(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008400CLL);
  return result;
}

uint64_t sub_100084018(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100084020);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_100084024(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008402C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeedbackGenerator.Feedback()
{
  return &type metadata for FeedbackGenerator.Feedback;
}

unint64_t sub_10008404C()
{
  unint64_t result;

  result = qword_10047FC38;
  if (!qword_10047FC38)
  {
    result = swift_getWitnessTable(&unk_1003B3F5C, &type metadata for FeedbackGenerator.Feedback);
    atomic_store(result, (unint64_t *)&qword_10047FC38);
  }
  return result;
}

unint64_t sub_100084094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure8MetaData_bundleIdentifier + 8);
  if (v1)
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure8MetaData_bundleIdentifier);
  else
    v2 = 0;
  if (v1)
    v3 = *(void **)(v0 + OBJC_IVAR____TtC7Measure8MetaData_bundleIdentifier + 8);
  else
    v3 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v1);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 0x6F6973726576202CLL;
  v5._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v5);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure8MetaData_versionString + 8);
  if (v6)
    v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure8MetaData_versionString);
  else
    v7 = 0;
  if (v6)
    v8 = *(void **)(v0 + OBJC_IVAR____TtC7Measure8MetaData_versionString + 8);
  else
    v8 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v6);
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0xD000000000000012;
}

id sub_1000841B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  objc_class *ObjectType;
  char *v11;
  void *v12;
  char *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t *v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char *v23;
  objc_super v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType(v5);
  if (a2)
  {
    v11 = v5;
  }
  else
  {
    v12 = (void *)objc_opt_self(NSBundle);
    v13 = v5;
    v14 = objc_msgSend(v12, "mainBundle");
    v15 = objc_msgSend(v14, "bundleIdentifier");

    if (v15)
    {
      a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      a2 = v16;

    }
    else
    {
      a1 = 0;
      a2 = 0;
    }
  }
  v17 = (uint64_t *)&v5[OBJC_IVAR____TtC7Measure8MetaData_bundleIdentifier];
  *v17 = a1;
  v17[1] = a2;
  if (!a4)
  {
    v18 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v19 = objc_msgSend(v18, "infoDictionary");

    if (v19)
    {
      v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

      if (*(_QWORD *)(v20 + 16) && (v21 = sub_1000C80A8(0xD00000000000001ALL, 0x80000001003DA9D0), (v22 & 1) != 0))
      {
        sub_10004F88C(*(_QWORD *)(v20 + 56) + 32 * v21, (uint64_t)&v26);
        swift_bridgeObjectRelease(v20);
        if (*((_QWORD *)&v27 + 1))
        {
          if (swift_dynamicCast(&v28, &v26, (char *)&type metadata for Any + 8, &type metadata for String, 6))
          {
            a3 = v28;
            a4 = v29;
            goto LABEL_18;
          }
LABEL_17:
          a4 = 0;
          a3 = 0;
          v28 = 0;
          v29 = 0;
          goto LABEL_18;
        }
      }
      else
      {
        v26 = 0u;
        v27 = 0u;
        swift_bridgeObjectRelease(v20);
      }
    }
    else
    {
      v26 = 0u;
      v27 = 0u;
    }
    sub_100018180((uint64_t)&v26);
    goto LABEL_17;
  }
  v28 = a3;
  v29 = a4;
LABEL_18:
  v23 = &v5[OBJC_IVAR____TtC7Measure8MetaData_versionString];
  *(_QWORD *)v23 = a3;
  *((_QWORD *)v23 + 1) = a4;

  v25.receiver = v5;
  v25.super_class = ObjectType;
  return objc_msgSendSuper2(&v25, "init");
}

id sub_1000843D8(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  id v5;
  NSString v6;
  id v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[24];
  uint64_t v24;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v5 = v2;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(a1, "decodeObjectForKey:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(&v21, v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  sub_10006C868((uint64_t)&v21, (uint64_t)v23);
  if (v24)
  {
    v8 = swift_dynamicCast(&v19, v23, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v8)
      v9 = v19;
    else
      v9 = 0;
    if (v8)
      v10 = v20;
    else
      v10 = 0;
  }
  else
  {
    sub_100018180((uint64_t)v23);
    v9 = 0;
    v10 = 0;
  }
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(a1, "decodeObjectForKey:", v11);

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)(&v21, v12);
    swift_unknownObjectRelease(v12);
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  sub_10006C868((uint64_t)&v21, (uint64_t)v23);
  if (!v24)
  {
    sub_100018180((uint64_t)v23);
    goto LABEL_19;
  }
  if (!swift_dynamicCast(&v19, v23, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
LABEL_19:

    v13 = 0;
    v14 = 0;
    goto LABEL_20;
  }
  v13 = v19;
  v14 = v20;

LABEL_20:
  v15 = objc_allocWithZone(ObjectType);
  v16 = sub_1000841B0(v9, v10, v13, v14);

  v17 = swift_getObjectType(v5);
  swift_deallocPartialClassInstance(v5, v17, 40, 7);
  return v16;
}

void sub_10008461C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  NSString v5;
  NSString v6;
  uint64_t v7;
  unint64_t v8;
  NSString v9;
  id v10;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure8MetaData_bundleIdentifier + 8);
  if (v3)
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure8MetaData_bundleIdentifier + 8);
  else
    v4 = 0xE000000000000000;
  swift_bridgeObjectRetain(v3);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "encodeObject:forKey:", v5, v6);

  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure8MetaData_versionString + 8);
  if (v7)
    v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure8MetaData_versionString + 8);
  else
    v8 = 0xE000000000000000;
  swift_bridgeObjectRetain(v7);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "encodeObject:forKey:", v9, v10);

}

uint64_t type metadata accessor for MetaData()
{
  return objc_opt_self(_TtC7Measure8MetaData);
}

void **initializeBufferWithCopyOfBuffer for MotionState(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void **assignWithCopy for MotionState(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

_QWORD *initializeWithTake for MeasurementState(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **assignWithTake for MotionState(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for MotionState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MotionState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MeasurementsHistoryLastConfirmed()
{
  return &type metadata for MeasurementsHistoryLastConfirmed;
}

_QWORD *sub_1000849E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  __int16 v118;
  int v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  __int16 v123;
  unsigned int (*v124)(void);
  int v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a3;
    v6 = a2;
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = type metadata accessor for MeasurementHistoryItem(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(void))(v12 + 48);
    swift_bridgeObjectRetain(v4);
    if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v13)(v10, 1, v11))
    {
      v14 = sub_10000EDC8((uint64_t *)&unk_100488B90);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v124 = v13;
      v268 = v12;
      v270 = v7;
      v15 = v10[1];
      *v9 = *v10;
      v9[1] = v15;
      v16 = v10[3];
      v9[2] = v10[2];
      v9[3] = v16;
      v272 = v11;
      v17 = *(int *)(v11 + 24);
      v266 = v9;
      v18 = (char *)v9 + v17;
      v19 = (char *)v10 + v17;
      v20 = type metadata accessor for MeasurementCapture(0);
      v21 = *(_QWORD *)(v20 - 8);
      v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      v121 = v6;
      v120 = v5;
      if (v22(v19, 1, v20))
      {
        v23 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        v24 = type metadata accessor for URL(0);
        v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
        v25(v18, v19, v24);
        v25(&v18[*(int *)(v20 + 20)], &v19[*(int *)(v20 + 20)], v24);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      v26 = *(int *)(v272 + 28);
      v27 = (char *)v266 + v26;
      v28 = (char *)v10 + v26;
      v122 = v10;
      v262 = *((_QWORD *)v28 + 10);
      v264 = *((_QWORD *)v28 + 9);
      v258 = *((_QWORD *)v28 + 12);
      v260 = *((_QWORD *)v28 + 11);
      v254 = *((_QWORD *)v28 + 14);
      v256 = *((_QWORD *)v28 + 13);
      v250 = *((_QWORD *)v28 + 16);
      v252 = *((_QWORD *)v28 + 15);
      v246 = *((_QWORD *)v28 + 18);
      v248 = *((_QWORD *)v28 + 17);
      v242 = *((_QWORD *)v28 + 20);
      v244 = *((_QWORD *)v28 + 19);
      v238 = *((_QWORD *)v28 + 22);
      v240 = *((_QWORD *)v28 + 21);
      v234 = *((_QWORD *)v28 + 24);
      v236 = *((_QWORD *)v28 + 23);
      v232 = *((_QWORD *)v28 + 25);
      v230 = *((_QWORD *)v28 + 26);
      v228 = *((_QWORD *)v28 + 27);
      v226 = *((_QWORD *)v28 + 28);
      v224 = *((_QWORD *)v28 + 29);
      v222 = *((_QWORD *)v28 + 30);
      v220 = *((_QWORD *)v28 + 31);
      v218 = *((_QWORD *)v28 + 32);
      v216 = *((_QWORD *)v28 + 33);
      v214 = *((_QWORD *)v28 + 34);
      v212 = *((_QWORD *)v28 + 35);
      v210 = *((_QWORD *)v28 + 36);
      v208 = *((_QWORD *)v28 + 37);
      v206 = *((_QWORD *)v28 + 38);
      v204 = *((_QWORD *)v28 + 39);
      v202 = *((_QWORD *)v28 + 40);
      v200 = *((_QWORD *)v28 + 41);
      v198 = *((_QWORD *)v28 + 42);
      v196 = *((_QWORD *)v28 + 43);
      v194 = *((_QWORD *)v28 + 44);
      v192 = *((_QWORD *)v28 + 45);
      v190 = *((_QWORD *)v28 + 46);
      v188 = *((_QWORD *)v28 + 47);
      v186 = *((_QWORD *)v28 + 48);
      v184 = *((_QWORD *)v28 + 49);
      v182 = *((_QWORD *)v28 + 50);
      v180 = *((_QWORD *)v28 + 51);
      v178 = *((_QWORD *)v28 + 52);
      v176 = *((_QWORD *)v28 + 53);
      v174 = *((_QWORD *)v28 + 54);
      v172 = *((_QWORD *)v28 + 55);
      v170 = *((_QWORD *)v28 + 56);
      v168 = *((_QWORD *)v28 + 57);
      v166 = *((_QWORD *)v28 + 58);
      v164 = *((_QWORD *)v28 + 59);
      v162 = *((_QWORD *)v28 + 60);
      v160 = *((_QWORD *)v28 + 61);
      v158 = *((_QWORD *)v28 + 62);
      v156 = *((_QWORD *)v28 + 63);
      v154 = *((_QWORD *)v28 + 64);
      v152 = *((_QWORD *)v28 + 65);
      v150 = *((_QWORD *)v28 + 66);
      v148 = *((_QWORD *)v28 + 67);
      v146 = *((_QWORD *)v28 + 68);
      v144 = *((_QWORD *)v28 + 69);
      v142 = *((_QWORD *)v28 + 70);
      v140 = *((_QWORD *)v28 + 71);
      v138 = *((_QWORD *)v28 + 72);
      v136 = *((_QWORD *)v28 + 73);
      v134 = *((_QWORD *)v28 + 74);
      v132 = *((_QWORD *)v28 + 75);
      v130 = *((_QWORD *)v28 + 76);
      v128 = *((_QWORD *)v28 + 77);
      v126 = *((_QWORD *)v28 + 78);
      v67 = *((_QWORD *)v28 + 79);
      v68 = *((_QWORD *)v28 + 80);
      v69 = *((_QWORD *)v28 + 81);
      v70 = *((_QWORD *)v28 + 82);
      v72 = *((_QWORD *)v28 + 83);
      v74 = *((_QWORD *)v28 + 84);
      v76 = *((_QWORD *)v28 + 85);
      v78 = *((_QWORD *)v28 + 86);
      v80 = *((_QWORD *)v28 + 87);
      v82 = *((_QWORD *)v28 + 88);
      v84 = *((_QWORD *)v28 + 89);
      v86 = *((_QWORD *)v28 + 90);
      v88 = *((_QWORD *)v28 + 91);
      v90 = *((_QWORD *)v28 + 92);
      v92 = *((_QWORD *)v28 + 93);
      v94 = *((_QWORD *)v28 + 94);
      v96 = *((_QWORD *)v28 + 95);
      v98 = *((_QWORD *)v28 + 96);
      v100 = *((_QWORD *)v28 + 97);
      v102 = *((_QWORD *)v28 + 98);
      v105 = *((_QWORD *)v28 + 99);
      v107 = *((_QWORD *)v28 + 100);
      v109 = *((_QWORD *)v28 + 101);
      v110 = *((_QWORD *)v28 + 102);
      v117 = *((_QWORD *)v28 + 103);
      v118 = *((_WORD *)v28 + 418);
      v119 = *((_DWORD *)v28 + 208);
      v29 = *((_QWORD *)v28 + 8);
      v30 = *(_QWORD *)v28;
      v31 = *((_QWORD *)v28 + 1);
      v32 = *((_QWORD *)v28 + 2);
      v33 = *((_QWORD *)v28 + 3);
      v34 = *((_QWORD *)v28 + 4);
      v35 = *((_QWORD *)v28 + 5);
      v36 = *((_QWORD *)v28 + 6);
      v37 = *((_QWORD *)v28 + 7);
      sub_100085E0C(*(_QWORD *)v28, v31, v32, v33, v34, v35, v36, v37, v29, v264, v262, v260, v258, v256, v254, v252, v250, v248, v246,
        v244,
        v242,
        v240,
        v238,
        v236,
        v234,
        v232,
        v230,
        v228,
        v226,
        v224,
        v222,
        v220,
        v218,
        v216,
        v214,
        v212,
        v210,
        v208,
        v206,
        v204,
        v202,
        v200,
        v198,
        v196,
        v194,
        v192,
        v190,
        v188,
        v186,
        v184,
        v182,
        v180,
        v178,
        v176,
        v174,
        v172,
        v170,
        v168,
        v166,
        v164,
        v162,
        v160,
        v158);
      *(_QWORD *)v27 = v30;
      *((_QWORD *)v27 + 1) = v31;
      *((_QWORD *)v27 + 2) = v32;
      *((_QWORD *)v27 + 3) = v33;
      *((_QWORD *)v27 + 4) = v34;
      *((_QWORD *)v27 + 5) = v35;
      *((_QWORD *)v27 + 6) = v36;
      *((_QWORD *)v27 + 7) = v37;
      *((_QWORD *)v27 + 8) = v29;
      v11 = v272;
      *((_QWORD *)v27 + 9) = v264;
      *((_QWORD *)v27 + 10) = v262;
      *((_QWORD *)v27 + 11) = v260;
      *((_QWORD *)v27 + 12) = v258;
      *((_QWORD *)v27 + 13) = v256;
      *((_QWORD *)v27 + 14) = v254;
      *((_QWORD *)v27 + 15) = v252;
      *((_QWORD *)v27 + 16) = v250;
      *((_QWORD *)v27 + 17) = v248;
      *((_QWORD *)v27 + 18) = v246;
      *((_QWORD *)v27 + 19) = v244;
      *((_QWORD *)v27 + 20) = v242;
      *((_QWORD *)v27 + 21) = v240;
      *((_QWORD *)v27 + 22) = v238;
      *((_QWORD *)v27 + 23) = v236;
      *((_QWORD *)v27 + 24) = v234;
      *((_QWORD *)v27 + 25) = v232;
      *((_QWORD *)v27 + 26) = v230;
      *((_QWORD *)v27 + 27) = v228;
      *((_QWORD *)v27 + 28) = v226;
      *((_QWORD *)v27 + 29) = v224;
      *((_QWORD *)v27 + 30) = v222;
      *((_QWORD *)v27 + 31) = v220;
      *((_QWORD *)v27 + 32) = v218;
      *((_QWORD *)v27 + 33) = v216;
      *((_QWORD *)v27 + 34) = v214;
      *((_QWORD *)v27 + 35) = v212;
      *((_QWORD *)v27 + 36) = v210;
      *((_QWORD *)v27 + 37) = v208;
      *((_QWORD *)v27 + 38) = v206;
      *((_QWORD *)v27 + 39) = v204;
      *((_QWORD *)v27 + 40) = v202;
      *((_QWORD *)v27 + 41) = v200;
      *((_QWORD *)v27 + 42) = v198;
      *((_QWORD *)v27 + 43) = v196;
      *((_QWORD *)v27 + 44) = v194;
      *((_QWORD *)v27 + 45) = v192;
      *((_QWORD *)v27 + 46) = v190;
      *((_QWORD *)v27 + 47) = v188;
      *((_QWORD *)v27 + 48) = v186;
      *((_QWORD *)v27 + 49) = v184;
      *((_QWORD *)v27 + 50) = v182;
      *((_QWORD *)v27 + 51) = v180;
      *((_QWORD *)v27 + 52) = v178;
      *((_QWORD *)v27 + 53) = v176;
      *((_QWORD *)v27 + 54) = v174;
      *((_QWORD *)v27 + 55) = v172;
      *((_QWORD *)v27 + 56) = v170;
      *((_QWORD *)v27 + 57) = v168;
      *((_QWORD *)v27 + 58) = v166;
      *((_QWORD *)v27 + 59) = v164;
      *((_QWORD *)v27 + 60) = v162;
      *((_QWORD *)v27 + 61) = v160;
      *((_QWORD *)v27 + 62) = v158;
      *((_QWORD *)v27 + 63) = v156;
      *((_QWORD *)v27 + 64) = v154;
      *((_QWORD *)v27 + 65) = v152;
      *((_QWORD *)v27 + 66) = v150;
      *((_QWORD *)v27 + 67) = v148;
      *((_QWORD *)v27 + 68) = v146;
      *((_QWORD *)v27 + 69) = v144;
      *((_QWORD *)v27 + 70) = v142;
      *((_QWORD *)v27 + 71) = v140;
      *((_QWORD *)v27 + 72) = v138;
      *((_QWORD *)v27 + 73) = v136;
      *((_QWORD *)v27 + 74) = v134;
      *((_QWORD *)v27 + 75) = v132;
      *((_QWORD *)v27 + 76) = v130;
      *((_QWORD *)v27 + 77) = v128;
      *((_QWORD *)v27 + 78) = v126;
      *((_QWORD *)v27 + 79) = v67;
      *((_QWORD *)v27 + 80) = v68;
      *((_QWORD *)v27 + 81) = v69;
      *((_QWORD *)v27 + 82) = v70;
      *((_QWORD *)v27 + 83) = v72;
      *((_QWORD *)v27 + 84) = v74;
      *((_QWORD *)v27 + 85) = v76;
      *((_QWORD *)v27 + 86) = v78;
      *((_QWORD *)v27 + 87) = v80;
      *((_QWORD *)v27 + 88) = v82;
      *((_QWORD *)v27 + 89) = v84;
      *((_QWORD *)v27 + 90) = v86;
      *((_QWORD *)v27 + 91) = v88;
      *((_QWORD *)v27 + 92) = v90;
      *((_QWORD *)v27 + 93) = v92;
      *((_QWORD *)v27 + 94) = v94;
      *((_QWORD *)v27 + 95) = v96;
      *((_QWORD *)v27 + 96) = v98;
      *((_QWORD *)v27 + 97) = v100;
      *((_QWORD *)v27 + 98) = v102;
      *((_QWORD *)v27 + 99) = v105;
      *((_QWORD *)v27 + 100) = v107;
      *((_QWORD *)v27 + 101) = v109;
      *((_QWORD *)v27 + 102) = v110;
      *((_QWORD *)v27 + 103) = v117;
      *((_WORD *)v27 + 418) = v118;
      *((_DWORD *)v27 + 208) = v119;
      v12 = v268;
      *((_BYTE *)v266 + *(int *)(v272 + 32)) = *((_BYTE *)v122 + *(int *)(v272 + 32));
      (*(void (**)(void))(v268 + 56))();
      v7 = v270;
      v13 = v124;
      v6 = v121;
      v5 = v120;
    }
    v38 = *(int *)(v5 + 24);
    v39 = (_QWORD *)((char *)v7 + v38);
    v40 = (_QWORD *)((char *)v6 + v38);
    if (v13())
    {
      v41 = sub_10000EDC8((uint64_t *)&unk_100488B90);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v269 = v12;
      v271 = v7;
      v42 = v40[1];
      *v39 = *v40;
      v39[1] = v42;
      v43 = v40[3];
      v39[2] = v40[2];
      v39[3] = v43;
      v44 = v11;
      v45 = *(int *)(v11 + 24);
      v46 = (char *)v39 + v45;
      v47 = (char *)v40 + v45;
      v48 = type metadata accessor for MeasurementCapture(0);
      v49 = *(_QWORD *)(v48 - 8);
      v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v43);
      if (v50(v47, 1, v48))
      {
        v51 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        v52 = type metadata accessor for URL(0);
        v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
        v53(v46, v47, v52);
        v53(&v46[*(int *)(v48 + 20)], &v47[*(int *)(v48 + 20)], v52);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      }
      v273 = v44;
      v54 = *(int *)(v44 + 28);
      v55 = (char *)v39 + v54;
      v115 = v40;
      v56 = (char *)v40 + v54;
      v127 = v39;
      v265 = *((_QWORD *)v56 + 10);
      v267 = *((_QWORD *)v56 + 9);
      v261 = *((_QWORD *)v56 + 12);
      v263 = *((_QWORD *)v56 + 11);
      v257 = *((_QWORD *)v56 + 14);
      v259 = *((_QWORD *)v56 + 13);
      v253 = *((_QWORD *)v56 + 16);
      v255 = *((_QWORD *)v56 + 15);
      v249 = *((_QWORD *)v56 + 18);
      v251 = *((_QWORD *)v56 + 17);
      v245 = *((_QWORD *)v56 + 20);
      v247 = *((_QWORD *)v56 + 19);
      v241 = *((_QWORD *)v56 + 22);
      v243 = *((_QWORD *)v56 + 21);
      v237 = *((_QWORD *)v56 + 24);
      v239 = *((_QWORD *)v56 + 23);
      v233 = *((_QWORD *)v56 + 26);
      v235 = *((_QWORD *)v56 + 25);
      v231 = *((_QWORD *)v56 + 27);
      v229 = *((_QWORD *)v56 + 28);
      v227 = *((_QWORD *)v56 + 29);
      v225 = *((_QWORD *)v56 + 30);
      v223 = *((_QWORD *)v56 + 31);
      v221 = *((_QWORD *)v56 + 32);
      v219 = *((_QWORD *)v56 + 33);
      v217 = *((_QWORD *)v56 + 34);
      v215 = *((_QWORD *)v56 + 35);
      v213 = *((_QWORD *)v56 + 36);
      v211 = *((_QWORD *)v56 + 37);
      v209 = *((_QWORD *)v56 + 38);
      v207 = *((_QWORD *)v56 + 39);
      v205 = *((_QWORD *)v56 + 40);
      v203 = *((_QWORD *)v56 + 41);
      v201 = *((_QWORD *)v56 + 42);
      v199 = *((_QWORD *)v56 + 43);
      v197 = *((_QWORD *)v56 + 44);
      v195 = *((_QWORD *)v56 + 45);
      v193 = *((_QWORD *)v56 + 46);
      v191 = *((_QWORD *)v56 + 47);
      v189 = *((_QWORD *)v56 + 48);
      v187 = *((_QWORD *)v56 + 49);
      v185 = *((_QWORD *)v56 + 50);
      v183 = *((_QWORD *)v56 + 51);
      v181 = *((_QWORD *)v56 + 52);
      v179 = *((_QWORD *)v56 + 53);
      v177 = *((_QWORD *)v56 + 54);
      v175 = *((_QWORD *)v56 + 55);
      v173 = *((_QWORD *)v56 + 56);
      v171 = *((_QWORD *)v56 + 57);
      v169 = *((_QWORD *)v56 + 58);
      v167 = *((_QWORD *)v56 + 59);
      v165 = *((_QWORD *)v56 + 60);
      v163 = *((_QWORD *)v56 + 61);
      v161 = *((_QWORD *)v56 + 62);
      v159 = *((_QWORD *)v56 + 63);
      v157 = *((_QWORD *)v56 + 64);
      v155 = *((_QWORD *)v56 + 65);
      v153 = *((_QWORD *)v56 + 66);
      v151 = *((_QWORD *)v56 + 67);
      v149 = *((_QWORD *)v56 + 68);
      v147 = *((_QWORD *)v56 + 69);
      v145 = *((_QWORD *)v56 + 70);
      v143 = *((_QWORD *)v56 + 71);
      v141 = *((_QWORD *)v56 + 72);
      v139 = *((_QWORD *)v56 + 73);
      v137 = *((_QWORD *)v56 + 74);
      v135 = *((_QWORD *)v56 + 75);
      v133 = *((_QWORD *)v56 + 76);
      v131 = *((_QWORD *)v56 + 77);
      v129 = *((_QWORD *)v56 + 78);
      v71 = *((_QWORD *)v56 + 79);
      v73 = *((_QWORD *)v56 + 80);
      v75 = *((_QWORD *)v56 + 81);
      v77 = *((_QWORD *)v56 + 82);
      v79 = *((_QWORD *)v56 + 83);
      v81 = *((_QWORD *)v56 + 84);
      v83 = *((_QWORD *)v56 + 85);
      v85 = *((_QWORD *)v56 + 86);
      v87 = *((_QWORD *)v56 + 87);
      v89 = *((_QWORD *)v56 + 88);
      v91 = *((_QWORD *)v56 + 89);
      v93 = *((_QWORD *)v56 + 90);
      v95 = *((_QWORD *)v56 + 91);
      v97 = *((_QWORD *)v56 + 92);
      v99 = *((_QWORD *)v56 + 93);
      v101 = *((_QWORD *)v56 + 94);
      v103 = *((_QWORD *)v56 + 95);
      v104 = *((_QWORD *)v56 + 96);
      v106 = *((_QWORD *)v56 + 97);
      v108 = *((_QWORD *)v56 + 98);
      v111 = *((_QWORD *)v56 + 99);
      v112 = *((_QWORD *)v56 + 100);
      v113 = *((_QWORD *)v56 + 101);
      v114 = *((_QWORD *)v56 + 102);
      v116 = *((_QWORD *)v56 + 103);
      v123 = *((_WORD *)v56 + 418);
      v125 = *((_DWORD *)v56 + 208);
      v57 = *((_QWORD *)v56 + 8);
      v58 = *(_QWORD *)v56;
      v59 = *((_QWORD *)v56 + 1);
      v60 = *((_QWORD *)v56 + 2);
      v61 = *((_QWORD *)v56 + 3);
      v62 = *((_QWORD *)v56 + 4);
      v63 = *((_QWORD *)v56 + 5);
      v64 = *((_QWORD *)v56 + 6);
      v65 = *((_QWORD *)v56 + 7);
      sub_100085E0C(*(_QWORD *)v56, v59, v60, v61, v62, v63, v64, v65, v57, v267, v265, v263, v261, v259, v257, v255, v253, v251, v249,
        v247,
        v245,
        v243,
        v241,
        v239,
        v237,
        v235,
        v233,
        v231,
        v229,
        v227,
        v225,
        v223,
        v221,
        v219,
        v217,
        v215,
        v213,
        v211,
        v209,
        v207,
        v205,
        v203,
        v201,
        v199,
        v197,
        v195,
        v193,
        v191,
        v189,
        v187,
        v185,
        v183,
        v181,
        v179,
        v177,
        v175,
        v173,
        v171,
        v169,
        v167,
        v165,
        v163,
        v161);
      *(_QWORD *)v55 = v58;
      *((_QWORD *)v55 + 1) = v59;
      *((_QWORD *)v55 + 2) = v60;
      *((_QWORD *)v55 + 3) = v61;
      *((_QWORD *)v55 + 4) = v62;
      *((_QWORD *)v55 + 5) = v63;
      *((_QWORD *)v55 + 6) = v64;
      *((_QWORD *)v55 + 7) = v65;
      *((_QWORD *)v55 + 8) = v57;
      *((_QWORD *)v55 + 9) = v267;
      *((_QWORD *)v55 + 10) = v265;
      *((_QWORD *)v55 + 11) = v263;
      *((_QWORD *)v55 + 12) = v261;
      *((_QWORD *)v55 + 13) = v259;
      *((_QWORD *)v55 + 14) = v257;
      *((_QWORD *)v55 + 15) = v255;
      *((_QWORD *)v55 + 16) = v253;
      *((_QWORD *)v55 + 17) = v251;
      *((_QWORD *)v55 + 18) = v249;
      *((_QWORD *)v55 + 19) = v247;
      *((_QWORD *)v55 + 20) = v245;
      *((_QWORD *)v55 + 21) = v243;
      *((_QWORD *)v55 + 22) = v241;
      *((_QWORD *)v55 + 23) = v239;
      *((_QWORD *)v55 + 24) = v237;
      *((_QWORD *)v55 + 25) = v235;
      *((_QWORD *)v55 + 26) = v233;
      *((_QWORD *)v55 + 27) = v231;
      *((_QWORD *)v55 + 28) = v229;
      *((_QWORD *)v55 + 29) = v227;
      *((_QWORD *)v55 + 30) = v225;
      *((_QWORD *)v55 + 31) = v223;
      *((_QWORD *)v55 + 32) = v221;
      *((_QWORD *)v55 + 33) = v219;
      *((_QWORD *)v55 + 34) = v217;
      *((_QWORD *)v55 + 35) = v215;
      *((_QWORD *)v55 + 36) = v213;
      *((_QWORD *)v55 + 37) = v211;
      *((_QWORD *)v55 + 38) = v209;
      *((_QWORD *)v55 + 39) = v207;
      *((_QWORD *)v55 + 40) = v205;
      *((_QWORD *)v55 + 41) = v203;
      *((_QWORD *)v55 + 42) = v201;
      *((_QWORD *)v55 + 43) = v199;
      *((_QWORD *)v55 + 44) = v197;
      *((_QWORD *)v55 + 45) = v195;
      *((_QWORD *)v55 + 46) = v193;
      *((_QWORD *)v55 + 47) = v191;
      *((_QWORD *)v55 + 48) = v189;
      *((_QWORD *)v55 + 49) = v187;
      *((_QWORD *)v55 + 50) = v185;
      *((_QWORD *)v55 + 51) = v183;
      *((_QWORD *)v55 + 52) = v181;
      *((_QWORD *)v55 + 53) = v179;
      *((_QWORD *)v55 + 54) = v177;
      *((_QWORD *)v55 + 55) = v175;
      *((_QWORD *)v55 + 56) = v173;
      *((_QWORD *)v55 + 57) = v171;
      *((_QWORD *)v55 + 58) = v169;
      *((_QWORD *)v55 + 59) = v167;
      *((_QWORD *)v55 + 60) = v165;
      *((_QWORD *)v55 + 61) = v163;
      *((_QWORD *)v55 + 62) = v161;
      *((_QWORD *)v55 + 63) = v159;
      *((_QWORD *)v55 + 64) = v157;
      *((_QWORD *)v55 + 65) = v155;
      *((_QWORD *)v55 + 66) = v153;
      *((_QWORD *)v55 + 67) = v151;
      *((_QWORD *)v55 + 68) = v149;
      *((_QWORD *)v55 + 69) = v147;
      *((_QWORD *)v55 + 70) = v145;
      *((_QWORD *)v55 + 71) = v143;
      *((_QWORD *)v55 + 72) = v141;
      *((_QWORD *)v55 + 73) = v139;
      *((_QWORD *)v55 + 74) = v137;
      *((_QWORD *)v55 + 75) = v135;
      *((_QWORD *)v55 + 76) = v133;
      *((_QWORD *)v55 + 77) = v131;
      *((_QWORD *)v55 + 78) = v129;
      *((_QWORD *)v55 + 79) = v71;
      *((_QWORD *)v55 + 80) = v73;
      *((_QWORD *)v55 + 81) = v75;
      *((_QWORD *)v55 + 82) = v77;
      *((_QWORD *)v55 + 83) = v79;
      *((_QWORD *)v55 + 84) = v81;
      *((_QWORD *)v55 + 85) = v83;
      *((_QWORD *)v55 + 86) = v85;
      *((_QWORD *)v55 + 87) = v87;
      *((_QWORD *)v55 + 88) = v89;
      *((_QWORD *)v55 + 89) = v91;
      *((_QWORD *)v55 + 90) = v93;
      *((_QWORD *)v55 + 91) = v95;
      *((_QWORD *)v55 + 92) = v97;
      *((_QWORD *)v55 + 93) = v99;
      *((_QWORD *)v55 + 94) = v101;
      *((_QWORD *)v55 + 95) = v103;
      *((_QWORD *)v55 + 96) = v104;
      *((_QWORD *)v55 + 97) = v106;
      *((_QWORD *)v55 + 98) = v108;
      *((_QWORD *)v55 + 99) = v111;
      *((_QWORD *)v55 + 100) = v112;
      *((_QWORD *)v55 + 101) = v113;
      *((_QWORD *)v55 + 102) = v114;
      *((_QWORD *)v55 + 103) = v116;
      *((_WORD *)v55 + 418) = v123;
      *((_DWORD *)v55 + 208) = v125;
      *((_BYTE *)v127 + *(int *)(v273 + 32)) = *((_BYTE *)v115 + *(int *)(v273 + 32));
      (*(void (**)(void))(v269 + 56))();
      return v271;
    }
  }
  return v7;
}

uint64_t sub_100085E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a67;
  uint64_t a69;
  uint64_t a70;
  uint64_t result;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;

  result = a24;
  v74 = (STACK[0x460] >> 38) & 3;
  switch((_DWORD)v74)
  {
    case 2:
      v86 = STACK[0x448];
      v85 = STACK[0x430];
      v84 = STACK[0x420];
      v83 = STACK[0x408];
      v82 = STACK[0x3F8];
      v81 = STACK[0x3E0];
      v80 = STACK[0x3D0];
      v79 = STACK[0x3B8];
      v78 = STACK[0x3A8];
      v77 = STACK[0x390];
      v76 = STACK[0x380];
      v75 = STACK[0x368];
      swift_bridgeObjectRetain(STACK[0x458]);
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(a7);
      swift_bridgeObjectRetain(a9);
      swift_bridgeObjectRetain(a12);
      swift_bridgeObjectRetain(a14);
      swift_bridgeObjectRetain(a17);
      swift_bridgeObjectRetain(a19);
      swift_bridgeObjectRetain(a22);
      swift_bridgeObjectRetain(a24);
      swift_bridgeObjectRetain(a27);
      swift_bridgeObjectRetain(a29);
      swift_bridgeObjectRetain(a32);
      swift_bridgeObjectRetain(a34);
      swift_bridgeObjectRetain(a37);
      swift_bridgeObjectRetain(a39);
      swift_bridgeObjectRetain(a42);
      swift_bridgeObjectRetain(a44);
      swift_bridgeObjectRetain(a47);
      swift_bridgeObjectRetain(a49);
      swift_bridgeObjectRetain(a52);
      swift_bridgeObjectRetain(a54);
      swift_bridgeObjectRetain(a57);
      swift_bridgeObjectRetain(a59);
      swift_bridgeObjectRetain(a62);
      swift_bridgeObjectRetain(a64);
      swift_bridgeObjectRetain(a67);
      swift_bridgeObjectRetain(a69);
      swift_bridgeObjectRetain(a70);
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRetain(v77);
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRetain(v85);
      return swift_bridgeObjectRetain(v86);
    case 1:
      swift_bridgeObjectRetain(a59);
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(a7);
      swift_bridgeObjectRetain(a9);
      swift_bridgeObjectRetain(a12);
      swift_bridgeObjectRetain(a14);
      swift_bridgeObjectRetain(a17);
      swift_bridgeObjectRetain(a19);
      swift_bridgeObjectRetain(a22);
      swift_bridgeObjectRetain(a24);
      swift_bridgeObjectRetain(a27);
      swift_bridgeObjectRetain(a29);
      swift_bridgeObjectRetain(a32);
      swift_bridgeObjectRetain(a34);
      swift_bridgeObjectRetain(a37);
      swift_bridgeObjectRetain(a39);
      swift_bridgeObjectRetain(a42);
      swift_bridgeObjectRetain(a44);
      swift_bridgeObjectRetain(a47);
      swift_bridgeObjectRetain(a49);
      swift_bridgeObjectRetain(a52);
      swift_bridgeObjectRetain(a54);
      return swift_bridgeObjectRetain(a57);
    case 0:
      swift_bridgeObjectRetain(a14);
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(a7);
      swift_bridgeObjectRetain(a9);
      swift_bridgeObjectRetain(a12);
      return sub_1000862A8(a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  return result;
}

uint64_t sub_1000862A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a14);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a9);
    return swift_bridgeObjectRetain(a12);
  }
  return result;
}

uint64_t sub_100086318(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  unsigned int (*v6)(char *, uint64_t, uint64_t);
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  char *v11;
  char *v12;
  uint64_t result;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for MeasurementHistoryItem(0);
  v6 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v4 + 1));
    swift_bridgeObjectRelease(*((_QWORD *)v4 + 3));
    v7 = &v4[*(int *)(v5 + 24)];
    v8 = type metadata accessor for MeasurementCapture(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    {
      v9 = type metadata accessor for URL(0);
      v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
      v10(v7, v9);
      v10(&v7[*(int *)(v8 + 20)], v9);
    }
    v11 = &v4[*(int *)(v5 + 28)];
    v48 = *((_OWORD *)v11 + 29);
    v50 = *((_OWORD *)v11 + 30);
    v44 = *((_OWORD *)v11 + 27);
    v46 = *((_OWORD *)v11 + 28);
    v40 = *((_OWORD *)v11 + 25);
    v42 = *((_OWORD *)v11 + 26);
    v36 = *((_OWORD *)v11 + 23);
    v38 = *((_OWORD *)v11 + 24);
    v32 = *((_OWORD *)v11 + 21);
    v34 = *((_OWORD *)v11 + 22);
    v28 = *((_OWORD *)v11 + 19);
    v30 = *((_OWORD *)v11 + 20);
    v26 = *((_OWORD *)v11 + 18);
    v24 = *((_OWORD *)v11 + 17);
    v22 = *((_OWORD *)v11 + 16);
    v20 = *((_OWORD *)v11 + 15);
    sub_100020E24(*(_QWORD *)v11, *((_QWORD *)v11 + 1), *((_QWORD *)v11 + 2), *((_QWORD *)v11 + 3), *((_QWORD *)v11 + 4), *((_QWORD *)v11 + 5), *((_QWORD *)v11 + 6), *((_QWORD *)v11 + 7), *((_QWORD *)v11 + 8), *((_QWORD *)v11 + 9), *((_QWORD *)v11 + 10), *((_QWORD *)v11 + 11), *((_QWORD *)v11 + 12), *((_QWORD *)v11 + 13), *((_QWORD *)v11 + 14), *((_QWORD *)v11 + 15), *((_QWORD *)v11 + 16), *((_QWORD *)v11 + 17), *((_QWORD *)v11 + 18),
      *((_QWORD *)v11 + 19),
      *((_QWORD *)v11 + 20),
      *((_QWORD *)v11 + 21),
      *((_QWORD *)v11 + 22),
      *((_QWORD *)v11 + 23),
      *((_QWORD *)v11 + 24),
      *((_QWORD *)v11 + 25),
      *((_QWORD *)v11 + 26),
      *((_QWORD *)v11 + 27),
      *((_QWORD *)v11 + 28),
      *((_QWORD *)v11 + 29),
      v20,
      *((uint64_t *)&v20 + 1),
      v22,
      *((uint64_t *)&v22 + 1),
      v24,
      *((uint64_t *)&v24 + 1),
      v26,
      *((uint64_t *)&v26 + 1),
      v28,
      *((uint64_t *)&v28 + 1),
      v30,
      *((uint64_t *)&v30 + 1),
      v32,
      *((uint64_t *)&v32 + 1),
      v34,
      *((uint64_t *)&v34 + 1),
      v36,
      *((uint64_t *)&v36 + 1),
      v38,
      *((uint64_t *)&v38 + 1),
      v40,
      *((uint64_t *)&v40 + 1),
      v42,
      *((uint64_t *)&v42 + 1),
      v44,
      *((uint64_t *)&v44 + 1),
      v46,
      *((uint64_t *)&v46 + 1),
      v48,
      *((uint64_t *)&v48 + 1),
      v50,
      *((uint64_t *)&v50 + 1),
      *((_QWORD *)v11 + 62));
  }
  v12 = (char *)a1 + *(int *)(a2 + 24);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v6)(v12, 1, v5);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*((_QWORD *)v12 + 1));
    swift_bridgeObjectRelease(*((_QWORD *)v12 + 3));
    v14 = &v12[*(int *)(v5 + 24)];
    v15 = type metadata accessor for MeasurementCapture(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      v16 = type metadata accessor for URL(0);
      v17 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
      v17(v14, v16);
      v17(&v14[*(int *)(v15 + 20)], v16);
    }
    v18 = &v12[*(int *)(v5 + 28)];
    v49 = *((_OWORD *)v18 + 29);
    v51 = *((_OWORD *)v18 + 30);
    v45 = *((_OWORD *)v18 + 27);
    v47 = *((_OWORD *)v18 + 28);
    v41 = *((_OWORD *)v18 + 25);
    v43 = *((_OWORD *)v18 + 26);
    v37 = *((_OWORD *)v18 + 23);
    v39 = *((_OWORD *)v18 + 24);
    v33 = *((_OWORD *)v18 + 21);
    v35 = *((_OWORD *)v18 + 22);
    v29 = *((_OWORD *)v18 + 19);
    v31 = *((_OWORD *)v18 + 20);
    v27 = *((_OWORD *)v18 + 18);
    v25 = *((_OWORD *)v18 + 17);
    v23 = *((_OWORD *)v18 + 16);
    v21 = *((_OWORD *)v18 + 15);
    v19 = *((_OWORD *)v18 + 14);
    return sub_100020E24(*(_QWORD *)v18, *((_QWORD *)v18 + 1), *((_QWORD *)v18 + 2), *((_QWORD *)v18 + 3), *((_QWORD *)v18 + 4), *((_QWORD *)v18 + 5), *((_QWORD *)v18 + 6), *((_QWORD *)v18 + 7), *((_QWORD *)v18 + 8), *((_QWORD *)v18 + 9), *((_QWORD *)v18 + 10), *((_QWORD *)v18 + 11), *((_QWORD *)v18 + 12), *((_QWORD *)v18 + 13), *((_QWORD *)v18 + 14), *((_QWORD *)v18 + 15), *((_QWORD *)v18 + 16), *((_QWORD *)v18 + 17), *((_QWORD *)v18 + 18),
             *((_QWORD *)v18 + 19),
             *((_QWORD *)v18 + 20),
             *((_QWORD *)v18 + 21),
             *((_QWORD *)v18 + 22),
             *((_QWORD *)v18 + 23),
             *((_QWORD *)v18 + 24),
             *((_QWORD *)v18 + 25),
             *((_QWORD *)v18 + 26),
             *((_QWORD *)v18 + 27),
             v19,
             *((uint64_t *)&v19 + 1),
             v21,
             *((uint64_t *)&v21 + 1),
             v23,
             *((uint64_t *)&v23 + 1),
             v25,
             *((uint64_t *)&v25 + 1),
             v27,
             *((uint64_t *)&v27 + 1),
             v29,
             *((uint64_t *)&v29 + 1),
             v31,
             *((uint64_t *)&v31 + 1),
             v33,
             *((uint64_t *)&v33 + 1),
             v35,
             *((uint64_t *)&v35 + 1),
             v37,
             *((uint64_t *)&v37 + 1),
             v39,
             *((uint64_t *)&v39 + 1),
             v41,
             *((uint64_t *)&v41 + 1),
             v43,
             *((uint64_t *)&v43 + 1),
             v45,
             *((uint64_t *)&v45 + 1),
             v47,
             *((uint64_t *)&v47 + 1),
             v49,
             *((uint64_t *)&v49 + 1),
             v51,
             *((uint64_t *)&v51 + 1),
             *((_QWORD *)v18 + 62));
  }
  return result;
}

_QWORD *sub_1000867D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  __int16 v117;
  int v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  __int16 v122;
  unsigned int (*v123)(void);
  int v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for MeasurementHistoryItem(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(void))(v11 + 48);
  swift_bridgeObjectRetain(v6);
  if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v12)(v9, 1, v10))
  {
    v13 = sub_10000EDC8((uint64_t *)&unk_100488B90);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v123 = v12;
    v125 = v3;
    v267 = v11;
    v269 = v5;
    v14 = v9[1];
    *v8 = *v9;
    v8[1] = v14;
    v15 = v9[3];
    v8[2] = v9[2];
    v8[3] = v15;
    v271 = v10;
    v16 = *(int *)(v10 + 24);
    v17 = (char *)v8 + v16;
    v18 = (char *)v9 + v16;
    v19 = type metadata accessor for MeasurementCapture(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    v121 = v4;
    if (v21(v18, 1, v19))
    {
      v22 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = type metadata accessor for URL(0);
      v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      v24(v17, v18, v23);
      v24(&v17[*(int *)(v19 + 20)], &v18[*(int *)(v19 + 20)], v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v25 = *(int *)(v271 + 28);
    v26 = (char *)v8 + v25;
    v27 = (char *)v9 + v25;
    v120 = v8;
    v119 = v9;
    v263 = *((_QWORD *)v27 + 10);
    v265 = *((_QWORD *)v27 + 9);
    v259 = *((_QWORD *)v27 + 12);
    v261 = *((_QWORD *)v27 + 11);
    v255 = *((_QWORD *)v27 + 14);
    v257 = *((_QWORD *)v27 + 13);
    v251 = *((_QWORD *)v27 + 16);
    v253 = *((_QWORD *)v27 + 15);
    v247 = *((_QWORD *)v27 + 18);
    v249 = *((_QWORD *)v27 + 17);
    v243 = *((_QWORD *)v27 + 20);
    v245 = *((_QWORD *)v27 + 19);
    v239 = *((_QWORD *)v27 + 22);
    v241 = *((_QWORD *)v27 + 21);
    v235 = *((_QWORD *)v27 + 24);
    v237 = *((_QWORD *)v27 + 23);
    v231 = *((_QWORD *)v27 + 26);
    v233 = *((_QWORD *)v27 + 25);
    v229 = *((_QWORD *)v27 + 27);
    v227 = *((_QWORD *)v27 + 28);
    v225 = *((_QWORD *)v27 + 29);
    v223 = *((_QWORD *)v27 + 30);
    v221 = *((_QWORD *)v27 + 31);
    v219 = *((_QWORD *)v27 + 32);
    v217 = *((_QWORD *)v27 + 33);
    v215 = *((_QWORD *)v27 + 34);
    v213 = *((_QWORD *)v27 + 35);
    v211 = *((_QWORD *)v27 + 36);
    v209 = *((_QWORD *)v27 + 37);
    v207 = *((_QWORD *)v27 + 38);
    v205 = *((_QWORD *)v27 + 39);
    v203 = *((_QWORD *)v27 + 40);
    v201 = *((_QWORD *)v27 + 41);
    v199 = *((_QWORD *)v27 + 42);
    v197 = *((_QWORD *)v27 + 43);
    v195 = *((_QWORD *)v27 + 44);
    v193 = *((_QWORD *)v27 + 45);
    v191 = *((_QWORD *)v27 + 46);
    v189 = *((_QWORD *)v27 + 47);
    v187 = *((_QWORD *)v27 + 48);
    v185 = *((_QWORD *)v27 + 49);
    v183 = *((_QWORD *)v27 + 50);
    v181 = *((_QWORD *)v27 + 51);
    v179 = *((_QWORD *)v27 + 52);
    v177 = *((_QWORD *)v27 + 53);
    v175 = *((_QWORD *)v27 + 54);
    v173 = *((_QWORD *)v27 + 55);
    v171 = *((_QWORD *)v27 + 56);
    v169 = *((_QWORD *)v27 + 57);
    v167 = *((_QWORD *)v27 + 58);
    v165 = *((_QWORD *)v27 + 59);
    v163 = *((_QWORD *)v27 + 60);
    v161 = *((_QWORD *)v27 + 61);
    v159 = *((_QWORD *)v27 + 62);
    v157 = *((_QWORD *)v27 + 63);
    v155 = *((_QWORD *)v27 + 64);
    v153 = *((_QWORD *)v27 + 65);
    v151 = *((_QWORD *)v27 + 66);
    v149 = *((_QWORD *)v27 + 67);
    v147 = *((_QWORD *)v27 + 68);
    v145 = *((_QWORD *)v27 + 69);
    v143 = *((_QWORD *)v27 + 70);
    v141 = *((_QWORD *)v27 + 71);
    v139 = *((_QWORD *)v27 + 72);
    v137 = *((_QWORD *)v27 + 73);
    v135 = *((_QWORD *)v27 + 74);
    v133 = *((_QWORD *)v27 + 75);
    v131 = *((_QWORD *)v27 + 76);
    v129 = *((_QWORD *)v27 + 77);
    v127 = *((_QWORD *)v27 + 78);
    v66 = *((_QWORD *)v27 + 79);
    v67 = *((_QWORD *)v27 + 80);
    v68 = *((_QWORD *)v27 + 81);
    v69 = *((_QWORD *)v27 + 82);
    v71 = *((_QWORD *)v27 + 83);
    v73 = *((_QWORD *)v27 + 84);
    v75 = *((_QWORD *)v27 + 85);
    v77 = *((_QWORD *)v27 + 86);
    v79 = *((_QWORD *)v27 + 87);
    v81 = *((_QWORD *)v27 + 88);
    v83 = *((_QWORD *)v27 + 89);
    v85 = *((_QWORD *)v27 + 90);
    v87 = *((_QWORD *)v27 + 91);
    v89 = *((_QWORD *)v27 + 92);
    v91 = *((_QWORD *)v27 + 93);
    v93 = *((_QWORD *)v27 + 94);
    v95 = *((_QWORD *)v27 + 95);
    v97 = *((_QWORD *)v27 + 96);
    v99 = *((_QWORD *)v27 + 97);
    v101 = *((_QWORD *)v27 + 98);
    v104 = *((_QWORD *)v27 + 99);
    v106 = *((_QWORD *)v27 + 100);
    v108 = *((_QWORD *)v27 + 101);
    v109 = *((_QWORD *)v27 + 102);
    v116 = *((_QWORD *)v27 + 103);
    v117 = *((_WORD *)v27 + 418);
    v118 = *((_DWORD *)v27 + 208);
    v28 = *((_QWORD *)v27 + 8);
    v29 = *(_QWORD *)v27;
    v30 = *((_QWORD *)v27 + 1);
    v31 = *((_QWORD *)v27 + 2);
    v32 = *((_QWORD *)v27 + 3);
    v33 = *((_QWORD *)v27 + 4);
    v34 = *((_QWORD *)v27 + 5);
    v35 = *((_QWORD *)v27 + 6);
    v36 = *((_QWORD *)v27 + 7);
    sub_100085E0C(*(_QWORD *)v27, v30, v31, v32, v33, v34, v35, v36, v28, v265, v263, v261, v259, v257, v255, v253, v251, v249, v247,
      v245,
      v243,
      v241,
      v239,
      v237,
      v235,
      v233,
      v231,
      v229,
      v227,
      v225,
      v223,
      v221,
      v219,
      v217,
      v215,
      v213,
      v211,
      v209,
      v207,
      v205,
      v203,
      v201,
      v199,
      v197,
      v195,
      v193,
      v191,
      v189,
      v187,
      v185,
      v183,
      v181,
      v179,
      v177,
      v175,
      v173,
      v171,
      v169,
      v167,
      v165,
      v163,
      v161,
      v159);
    *(_QWORD *)v26 = v29;
    *((_QWORD *)v26 + 1) = v30;
    *((_QWORD *)v26 + 2) = v31;
    *((_QWORD *)v26 + 3) = v32;
    *((_QWORD *)v26 + 4) = v33;
    *((_QWORD *)v26 + 5) = v34;
    *((_QWORD *)v26 + 6) = v35;
    *((_QWORD *)v26 + 7) = v36;
    *((_QWORD *)v26 + 8) = v28;
    v10 = v271;
    *((_QWORD *)v26 + 9) = v265;
    *((_QWORD *)v26 + 10) = v263;
    *((_QWORD *)v26 + 11) = v261;
    *((_QWORD *)v26 + 12) = v259;
    *((_QWORD *)v26 + 13) = v257;
    *((_QWORD *)v26 + 14) = v255;
    *((_QWORD *)v26 + 15) = v253;
    *((_QWORD *)v26 + 16) = v251;
    *((_QWORD *)v26 + 17) = v249;
    *((_QWORD *)v26 + 18) = v247;
    *((_QWORD *)v26 + 19) = v245;
    *((_QWORD *)v26 + 20) = v243;
    *((_QWORD *)v26 + 21) = v241;
    *((_QWORD *)v26 + 22) = v239;
    *((_QWORD *)v26 + 23) = v237;
    *((_QWORD *)v26 + 24) = v235;
    *((_QWORD *)v26 + 25) = v233;
    *((_QWORD *)v26 + 26) = v231;
    *((_QWORD *)v26 + 27) = v229;
    *((_QWORD *)v26 + 28) = v227;
    *((_QWORD *)v26 + 29) = v225;
    *((_QWORD *)v26 + 30) = v223;
    *((_QWORD *)v26 + 31) = v221;
    *((_QWORD *)v26 + 32) = v219;
    *((_QWORD *)v26 + 33) = v217;
    *((_QWORD *)v26 + 34) = v215;
    *((_QWORD *)v26 + 35) = v213;
    *((_QWORD *)v26 + 36) = v211;
    *((_QWORD *)v26 + 37) = v209;
    *((_QWORD *)v26 + 38) = v207;
    *((_QWORD *)v26 + 39) = v205;
    *((_QWORD *)v26 + 40) = v203;
    *((_QWORD *)v26 + 41) = v201;
    *((_QWORD *)v26 + 42) = v199;
    *((_QWORD *)v26 + 43) = v197;
    *((_QWORD *)v26 + 44) = v195;
    *((_QWORD *)v26 + 45) = v193;
    *((_QWORD *)v26 + 46) = v191;
    *((_QWORD *)v26 + 47) = v189;
    *((_QWORD *)v26 + 48) = v187;
    *((_QWORD *)v26 + 49) = v185;
    *((_QWORD *)v26 + 50) = v183;
    *((_QWORD *)v26 + 51) = v181;
    *((_QWORD *)v26 + 52) = v179;
    *((_QWORD *)v26 + 53) = v177;
    *((_QWORD *)v26 + 54) = v175;
    *((_QWORD *)v26 + 55) = v173;
    *((_QWORD *)v26 + 56) = v171;
    *((_QWORD *)v26 + 57) = v169;
    *((_QWORD *)v26 + 58) = v167;
    *((_QWORD *)v26 + 59) = v165;
    *((_QWORD *)v26 + 60) = v163;
    *((_QWORD *)v26 + 61) = v161;
    *((_QWORD *)v26 + 62) = v159;
    *((_QWORD *)v26 + 63) = v157;
    *((_QWORD *)v26 + 64) = v155;
    *((_QWORD *)v26 + 65) = v153;
    *((_QWORD *)v26 + 66) = v151;
    *((_QWORD *)v26 + 67) = v149;
    *((_QWORD *)v26 + 68) = v147;
    *((_QWORD *)v26 + 69) = v145;
    *((_QWORD *)v26 + 70) = v143;
    *((_QWORD *)v26 + 71) = v141;
    *((_QWORD *)v26 + 72) = v139;
    *((_QWORD *)v26 + 73) = v137;
    *((_QWORD *)v26 + 74) = v135;
    *((_QWORD *)v26 + 75) = v133;
    *((_QWORD *)v26 + 76) = v131;
    *((_QWORD *)v26 + 77) = v129;
    *((_QWORD *)v26 + 78) = v127;
    *((_QWORD *)v26 + 79) = v66;
    *((_QWORD *)v26 + 80) = v67;
    *((_QWORD *)v26 + 81) = v68;
    *((_QWORD *)v26 + 82) = v69;
    *((_QWORD *)v26 + 83) = v71;
    *((_QWORD *)v26 + 84) = v73;
    *((_QWORD *)v26 + 85) = v75;
    *((_QWORD *)v26 + 86) = v77;
    *((_QWORD *)v26 + 87) = v79;
    *((_QWORD *)v26 + 88) = v81;
    *((_QWORD *)v26 + 89) = v83;
    *((_QWORD *)v26 + 90) = v85;
    *((_QWORD *)v26 + 91) = v87;
    *((_QWORD *)v26 + 92) = v89;
    *((_QWORD *)v26 + 93) = v91;
    *((_QWORD *)v26 + 94) = v93;
    *((_QWORD *)v26 + 95) = v95;
    *((_QWORD *)v26 + 96) = v97;
    *((_QWORD *)v26 + 97) = v99;
    *((_QWORD *)v26 + 98) = v101;
    *((_QWORD *)v26 + 99) = v104;
    *((_QWORD *)v26 + 100) = v106;
    *((_QWORD *)v26 + 101) = v108;
    *((_QWORD *)v26 + 102) = v109;
    *((_QWORD *)v26 + 103) = v116;
    *((_WORD *)v26 + 418) = v117;
    *((_DWORD *)v26 + 208) = v118;
    *((_BYTE *)v120 + *(int *)(v271 + 32)) = *((_BYTE *)v119 + *(int *)(v271 + 32));
    v11 = v267;
    (*(void (**)(void))(v267 + 56))();
    v5 = v269;
    v3 = v125;
    v12 = v123;
    v4 = v121;
  }
  v37 = *(int *)(v3 + 24);
  v38 = (_QWORD *)((char *)v5 + v37);
  v39 = (_QWORD *)((char *)v4 + v37);
  if (v12())
  {
    v40 = sub_10000EDC8((uint64_t *)&unk_100488B90);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    v268 = v11;
    v270 = v5;
    v41 = v39[1];
    *v38 = *v39;
    v38[1] = v41;
    v42 = v39[3];
    v38[2] = v39[2];
    v38[3] = v42;
    v43 = v10;
    v44 = *(int *)(v10 + 24);
    v45 = (char *)v38 + v44;
    v46 = (char *)v39 + v44;
    v47 = type metadata accessor for MeasurementCapture(0);
    v48 = *(_QWORD *)(v47 - 8);
    v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v42);
    if (v49(v46, 1, v47))
    {
      v50 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      v51 = type metadata accessor for URL(0);
      v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
      v52(v45, v46, v51);
      v52(&v45[*(int *)(v47 + 20)], &v46[*(int *)(v47 + 20)], v51);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    v272 = v43;
    v53 = *(int *)(v43 + 28);
    v54 = (char *)v38 + v53;
    v114 = v39;
    v55 = (char *)v39 + v53;
    v126 = v38;
    v264 = *((_QWORD *)v55 + 10);
    v266 = *((_QWORD *)v55 + 9);
    v260 = *((_QWORD *)v55 + 12);
    v262 = *((_QWORD *)v55 + 11);
    v256 = *((_QWORD *)v55 + 14);
    v258 = *((_QWORD *)v55 + 13);
    v252 = *((_QWORD *)v55 + 16);
    v254 = *((_QWORD *)v55 + 15);
    v248 = *((_QWORD *)v55 + 18);
    v250 = *((_QWORD *)v55 + 17);
    v244 = *((_QWORD *)v55 + 20);
    v246 = *((_QWORD *)v55 + 19);
    v240 = *((_QWORD *)v55 + 22);
    v242 = *((_QWORD *)v55 + 21);
    v236 = *((_QWORD *)v55 + 24);
    v238 = *((_QWORD *)v55 + 23);
    v232 = *((_QWORD *)v55 + 26);
    v234 = *((_QWORD *)v55 + 25);
    v230 = *((_QWORD *)v55 + 27);
    v228 = *((_QWORD *)v55 + 28);
    v226 = *((_QWORD *)v55 + 29);
    v224 = *((_QWORD *)v55 + 30);
    v222 = *((_QWORD *)v55 + 31);
    v220 = *((_QWORD *)v55 + 32);
    v218 = *((_QWORD *)v55 + 33);
    v216 = *((_QWORD *)v55 + 34);
    v214 = *((_QWORD *)v55 + 35);
    v212 = *((_QWORD *)v55 + 36);
    v210 = *((_QWORD *)v55 + 37);
    v208 = *((_QWORD *)v55 + 38);
    v206 = *((_QWORD *)v55 + 39);
    v204 = *((_QWORD *)v55 + 40);
    v202 = *((_QWORD *)v55 + 41);
    v200 = *((_QWORD *)v55 + 42);
    v198 = *((_QWORD *)v55 + 43);
    v196 = *((_QWORD *)v55 + 44);
    v194 = *((_QWORD *)v55 + 45);
    v192 = *((_QWORD *)v55 + 46);
    v190 = *((_QWORD *)v55 + 47);
    v188 = *((_QWORD *)v55 + 48);
    v186 = *((_QWORD *)v55 + 49);
    v184 = *((_QWORD *)v55 + 50);
    v182 = *((_QWORD *)v55 + 51);
    v180 = *((_QWORD *)v55 + 52);
    v178 = *((_QWORD *)v55 + 53);
    v176 = *((_QWORD *)v55 + 54);
    v174 = *((_QWORD *)v55 + 55);
    v172 = *((_QWORD *)v55 + 56);
    v170 = *((_QWORD *)v55 + 57);
    v168 = *((_QWORD *)v55 + 58);
    v166 = *((_QWORD *)v55 + 59);
    v164 = *((_QWORD *)v55 + 60);
    v162 = *((_QWORD *)v55 + 61);
    v160 = *((_QWORD *)v55 + 62);
    v158 = *((_QWORD *)v55 + 63);
    v156 = *((_QWORD *)v55 + 64);
    v154 = *((_QWORD *)v55 + 65);
    v152 = *((_QWORD *)v55 + 66);
    v150 = *((_QWORD *)v55 + 67);
    v148 = *((_QWORD *)v55 + 68);
    v146 = *((_QWORD *)v55 + 69);
    v144 = *((_QWORD *)v55 + 70);
    v142 = *((_QWORD *)v55 + 71);
    v140 = *((_QWORD *)v55 + 72);
    v138 = *((_QWORD *)v55 + 73);
    v136 = *((_QWORD *)v55 + 74);
    v134 = *((_QWORD *)v55 + 75);
    v132 = *((_QWORD *)v55 + 76);
    v130 = *((_QWORD *)v55 + 77);
    v128 = *((_QWORD *)v55 + 78);
    v70 = *((_QWORD *)v55 + 79);
    v72 = *((_QWORD *)v55 + 80);
    v74 = *((_QWORD *)v55 + 81);
    v76 = *((_QWORD *)v55 + 82);
    v78 = *((_QWORD *)v55 + 83);
    v80 = *((_QWORD *)v55 + 84);
    v82 = *((_QWORD *)v55 + 85);
    v84 = *((_QWORD *)v55 + 86);
    v86 = *((_QWORD *)v55 + 87);
    v88 = *((_QWORD *)v55 + 88);
    v90 = *((_QWORD *)v55 + 89);
    v92 = *((_QWORD *)v55 + 90);
    v94 = *((_QWORD *)v55 + 91);
    v96 = *((_QWORD *)v55 + 92);
    v98 = *((_QWORD *)v55 + 93);
    v100 = *((_QWORD *)v55 + 94);
    v102 = *((_QWORD *)v55 + 95);
    v103 = *((_QWORD *)v55 + 96);
    v105 = *((_QWORD *)v55 + 97);
    v107 = *((_QWORD *)v55 + 98);
    v110 = *((_QWORD *)v55 + 99);
    v111 = *((_QWORD *)v55 + 100);
    v112 = *((_QWORD *)v55 + 101);
    v113 = *((_QWORD *)v55 + 102);
    v115 = *((_QWORD *)v55 + 103);
    v122 = *((_WORD *)v55 + 418);
    v124 = *((_DWORD *)v55 + 208);
    v56 = *((_QWORD *)v55 + 8);
    v57 = *(_QWORD *)v55;
    v58 = *((_QWORD *)v55 + 1);
    v59 = *((_QWORD *)v55 + 2);
    v60 = *((_QWORD *)v55 + 3);
    v61 = *((_QWORD *)v55 + 4);
    v62 = *((_QWORD *)v55 + 5);
    v63 = *((_QWORD *)v55 + 6);
    v64 = *((_QWORD *)v55 + 7);
    sub_100085E0C(*(_QWORD *)v55, v58, v59, v60, v61, v62, v63, v64, v56, v266, v264, v262, v260, v258, v256, v254, v252, v250, v248,
      v246,
      v244,
      v242,
      v240,
      v238,
      v236,
      v234,
      v232,
      v230,
      v228,
      v226,
      v224,
      v222,
      v220,
      v218,
      v216,
      v214,
      v212,
      v210,
      v208,
      v206,
      v204,
      v202,
      v200,
      v198,
      v196,
      v194,
      v192,
      v190,
      v188,
      v186,
      v184,
      v182,
      v180,
      v178,
      v176,
      v174,
      v172,
      v170,
      v168,
      v166,
      v164,
      v162,
      v160);
    *(_QWORD *)v54 = v57;
    *((_QWORD *)v54 + 1) = v58;
    *((_QWORD *)v54 + 2) = v59;
    *((_QWORD *)v54 + 3) = v60;
    *((_QWORD *)v54 + 4) = v61;
    *((_QWORD *)v54 + 5) = v62;
    *((_QWORD *)v54 + 6) = v63;
    *((_QWORD *)v54 + 7) = v64;
    *((_QWORD *)v54 + 8) = v56;
    *((_QWORD *)v54 + 9) = v266;
    *((_QWORD *)v54 + 10) = v264;
    *((_QWORD *)v54 + 11) = v262;
    *((_QWORD *)v54 + 12) = v260;
    *((_QWORD *)v54 + 13) = v258;
    *((_QWORD *)v54 + 14) = v256;
    *((_QWORD *)v54 + 15) = v254;
    *((_QWORD *)v54 + 16) = v252;
    *((_QWORD *)v54 + 17) = v250;
    *((_QWORD *)v54 + 18) = v248;
    *((_QWORD *)v54 + 19) = v246;
    *((_QWORD *)v54 + 20) = v244;
    *((_QWORD *)v54 + 21) = v242;
    *((_QWORD *)v54 + 22) = v240;
    *((_QWORD *)v54 + 23) = v238;
    *((_QWORD *)v54 + 24) = v236;
    *((_QWORD *)v54 + 25) = v234;
    *((_QWORD *)v54 + 26) = v232;
    *((_QWORD *)v54 + 27) = v230;
    *((_QWORD *)v54 + 28) = v228;
    *((_QWORD *)v54 + 29) = v226;
    *((_QWORD *)v54 + 30) = v224;
    *((_QWORD *)v54 + 31) = v222;
    *((_QWORD *)v54 + 32) = v220;
    *((_QWORD *)v54 + 33) = v218;
    *((_QWORD *)v54 + 34) = v216;
    *((_QWORD *)v54 + 35) = v214;
    *((_QWORD *)v54 + 36) = v212;
    *((_QWORD *)v54 + 37) = v210;
    *((_QWORD *)v54 + 38) = v208;
    *((_QWORD *)v54 + 39) = v206;
    *((_QWORD *)v54 + 40) = v204;
    *((_QWORD *)v54 + 41) = v202;
    *((_QWORD *)v54 + 42) = v200;
    *((_QWORD *)v54 + 43) = v198;
    *((_QWORD *)v54 + 44) = v196;
    *((_QWORD *)v54 + 45) = v194;
    *((_QWORD *)v54 + 46) = v192;
    *((_QWORD *)v54 + 47) = v190;
    *((_QWORD *)v54 + 48) = v188;
    *((_QWORD *)v54 + 49) = v186;
    *((_QWORD *)v54 + 50) = v184;
    *((_QWORD *)v54 + 51) = v182;
    *((_QWORD *)v54 + 52) = v180;
    *((_QWORD *)v54 + 53) = v178;
    *((_QWORD *)v54 + 54) = v176;
    *((_QWORD *)v54 + 55) = v174;
    *((_QWORD *)v54 + 56) = v172;
    *((_QWORD *)v54 + 57) = v170;
    *((_QWORD *)v54 + 58) = v168;
    *((_QWORD *)v54 + 59) = v166;
    *((_QWORD *)v54 + 60) = v164;
    *((_QWORD *)v54 + 61) = v162;
    *((_QWORD *)v54 + 62) = v160;
    *((_QWORD *)v54 + 63) = v158;
    *((_QWORD *)v54 + 64) = v156;
    *((_QWORD *)v54 + 65) = v154;
    *((_QWORD *)v54 + 66) = v152;
    *((_QWORD *)v54 + 67) = v150;
    *((_QWORD *)v54 + 68) = v148;
    *((_QWORD *)v54 + 69) = v146;
    *((_QWORD *)v54 + 70) = v144;
    *((_QWORD *)v54 + 71) = v142;
    *((_QWORD *)v54 + 72) = v140;
    *((_QWORD *)v54 + 73) = v138;
    *((_QWORD *)v54 + 74) = v136;
    *((_QWORD *)v54 + 75) = v134;
    *((_QWORD *)v54 + 76) = v132;
    *((_QWORD *)v54 + 77) = v130;
    *((_QWORD *)v54 + 78) = v128;
    *((_QWORD *)v54 + 79) = v70;
    *((_QWORD *)v54 + 80) = v72;
    *((_QWORD *)v54 + 81) = v74;
    *((_QWORD *)v54 + 82) = v76;
    *((_QWORD *)v54 + 83) = v78;
    *((_QWORD *)v54 + 84) = v80;
    *((_QWORD *)v54 + 85) = v82;
    *((_QWORD *)v54 + 86) = v84;
    *((_QWORD *)v54 + 87) = v86;
    *((_QWORD *)v54 + 88) = v88;
    *((_QWORD *)v54 + 89) = v90;
    *((_QWORD *)v54 + 90) = v92;
    *((_QWORD *)v54 + 91) = v94;
    *((_QWORD *)v54 + 92) = v96;
    *((_QWORD *)v54 + 93) = v98;
    *((_QWORD *)v54 + 94) = v100;
    *((_QWORD *)v54 + 95) = v102;
    *((_QWORD *)v54 + 96) = v103;
    *((_QWORD *)v54 + 97) = v105;
    *((_QWORD *)v54 + 98) = v107;
    *((_QWORD *)v54 + 99) = v110;
    *((_QWORD *)v54 + 100) = v111;
    *((_QWORD *)v54 + 101) = v112;
    *((_QWORD *)v54 + 102) = v113;
    *((_QWORD *)v54 + 103) = v115;
    *((_WORD *)v54 + 418) = v122;
    *((_DWORD *)v54 + 208) = v124;
    *((_BYTE *)v126 + *(int *)(v272 + 32)) = *((_BYTE *)v114 + *(int *)(v272 + 32));
    (*(void (**)(void))(v268 + 56))();
    return v270;
  }
  return v5;
}

