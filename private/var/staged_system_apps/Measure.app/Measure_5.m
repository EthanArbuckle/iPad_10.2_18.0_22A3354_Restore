void sub_100243834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (STACK[0x578] != a16)
  {
    if (STACK[0x578])
      operator delete[]();
  }
  _Unwind_Resume(a1);
}

_BYTE *sub_100243898(float *a1, unint64_t a2, float *a3, unint64_t a4, double *a5, unint64_t a6, int *a7, unsigned int *a8, char a9)
{
  double *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  float32x2_t *v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  double v37;
  float *v38;
  float *v39;
  uint64_t v40;
  float v41;
  float32x2_t *v42;
  float64x2_t v43;
  uint64_t v44;
  float64x2_t v45;
  float32x2_t *v46;
  float *v47;
  uint64_t v48;
  float v49;
  float *v50;
  double v51;
  float *v52;
  float *v53;
  uint64_t v54;
  float v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  double v60;
  unint64_t v61;
  float *v62;
  float *v63;
  float *v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v76;
  uint64_t v77;
  float *v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  float *v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  double v86;
  double v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const float *v91;
  const float *v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  uint64_t v113;
  uint64_t v114;
  float *v115;
  double v116;
  double v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const float *v121;
  const float *v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  uint64_t v128;
  size_t v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  __int128 v133;
  float *v134;
  uint64_t v135;
  uint64_t v136;
  float *v137;
  uint64_t v138;
  uint64_t v140;
  double *v141;
  int v142;
  uint64_t v143;
  unint64_t v144;
  float64x2_t *v145;
  float64x2_t v146;
  int i;
  unint64_t v148;
  float64x2_t *v149;
  float64x2_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  char v154;
  unsigned int v155;
  int v156;
  BOOL v157;
  unint64_t v159;
  int v160;
  uint64_t v161;
  _BYTE v162[1064];
  float32x4x2_t v163;
  float32x4x2_t v164;
  float32x4x2_t v165;
  float32x4x2_t v166;
  float32x4x2_t v167;
  float32x4x2_t v168;
  float32x4x2_t v169;
  float32x4x2_t v170;

  v9 = a5;
  v11 = a7[1];
  v12 = (int)*a8;
  v160 = a8[1];
  v13 = a2 >> 2;
  if ((a9 & 1) != 0)
  {
    if (v11 >= 0x109)
      operator new[]();
    v15 = 1;
    v14 = (float *)v162;
  }
  else
  {
    v14 = 0;
    v11 = *a7;
    v15 = a2 >> 2;
    v13 = 1;
  }
  v16 = *a8;
  v17 = a4 >> 2;
  v159 = a6 >> 3;
  v161 = v16;
  if ((a9 & 2) == 0)
  {
    if (v160 < 1)
      return v162;
    v18 = 0;
    v19 = v12 - 4;
    if (v14)
      v20 = v11 < 1;
    else
      v20 = 1;
    v21 = v20;
    v22 = v11 & 0xFFFFFFF8;
    v23 = v11 >= 8 && v13 == 1;
    v24 = 4 * v15;
    v25 = !v23;
    v26 = 4 * v13;
    v27 = (float32x2_t *)(a3 + 2);
    v28 = 4 * v17;
    v155 = *a8;
    v154 = v21;
    v153 = v24;
    v152 = v25;
    while (1)
    {
      if (v14)
        v29 = v14;
      else
        v29 = a1;
      if ((v21 & 1) != 0)
        goto LABEL_34;
      if ((v25 & 1) != 0)
      {
        v30 = 0;
      }
      else
      {
        v31 = 0;
        do
        {
          v32 = *(_OWORD *)&a1[v31 / 4 + 4];
          v33 = &v14[v31 / 4];
          *(_OWORD *)v33 = *(_OWORD *)&a1[v31 / 4];
          *((_OWORD *)v33 + 1) = v32;
          v31 += 32;
        }
        while (((4 * v11) & 0x3FFFFFFE0) != v31);
        v30 = v22;
        v29 = v14;
        if (v22 == v11)
          goto LABEL_34;
      }
      v34 = v26 * v30;
      do
      {
        v14[v30++] = *(float *)((char *)a1 + v34);
        v34 += v26;
      }
      while (v11 != v30);
      v29 = v14;
LABEL_34:
      if ((int)v12 >= 4)
      {
        v35 = 0;
        v42 = v27;
        do
        {
          v43 = 0uLL;
          v44 = 8 * v35;
          v45 = 0uLL;
          if ((a9 & 0x10) != 0)
          {
            v43 = *(float64x2_t *)&v9[v35];
            v45 = *(float64x2_t *)((char *)v9 + (v44 | 0x10));
          }
          if (v11 >= 1)
          {
            v46 = v42;
            v47 = v29;
            v48 = v11;
            do
            {
              v49 = *v47++;
              v43 = vmlaq_n_f64(v43, vcvtq_f64_f32(v46[-1]), v49);
              v45 = vmlaq_n_f64(v45, vcvtq_f64_f32(*v46), v49);
              v46 = (float32x2_t *)((char *)v46 + v28);
              --v48;
            }
            while (v48);
          }
          *(float64x2_t *)&v9[v35] = v43;
          *(float64x2_t *)((char *)v9 + (v44 | 0x10)) = v45;
          v35 += 4;
          v42 += 2;
        }
        while (v35 <= v19);
      }
      else
      {
        LODWORD(v35) = 0;
      }
      if ((int)v35 < (int)v16)
      {
        if (v11 < 1)
        {
          if ((a9 & 0x10) == 0)
          {
            v156 = v18;
            bzero(&v9[v35], 8 * (v12 + ~(_DWORD)v35) + 8);
            v27 = (float32x2_t *)(a3 + 2);
            v25 = v152;
            v24 = v153;
            v22 = v11 & 0xFFFFFFF8;
            v21 = v154;
            v18 = v156;
            LODWORD(v12) = v155;
            v16 = v161;
          }
        }
        else
        {
          v35 = v35;
          if ((a9 & 0x10) != 0)
          {
            v50 = &a3[v35];
            do
            {
              v51 = v9[v35];
              v52 = v50;
              v53 = v29;
              v54 = v11;
              do
              {
                v55 = *v53++;
                v51 = v51 + v55 * *v52;
                v52 = (float *)((char *)v52 + v28);
                --v54;
              }
              while (v54);
              v9[v35++] = v51;
              ++v50;
            }
            while (v35 != v16);
          }
          else
          {
            v36 = &a3[v35];
            do
            {
              v37 = 0.0;
              v38 = v36;
              v39 = v29;
              v40 = v11;
              do
              {
                v41 = *v39++;
                v37 = v37 + v41 * *v38;
                v38 = (float *)((char *)v38 + v28);
                --v40;
              }
              while (v40);
              v9[v35++] = v37;
              ++v36;
            }
            while (v35 != v16);
          }
        }
      }
      ++v18;
      a1 = (float *)((char *)a1 + v24);
      v9 += v159;
      if (v18 == v160)
        return v162;
    }
  }
  if (v160 < 1)
    return v162;
  if ((int)v12 < 1)
  {
    if (!v14 || v11 < 1)
      return v162;
    if (v11 < 8)
    {
      do
      {
        v64 = a1;
        if (v11 != 1)
        {
          v14[1] = a1[v13];
          if (v11 != 2)
          {
            v14[2] = a1[2 * v13];
            if (v11 != 3)
            {
              v14[3] = a1[3 * v13];
              if (v11 != 4)
              {
                v14[4] = a1[4 * v13];
                if (v11 != 5)
                {
                  v14[5] = a1[5 * v13];
                  if (v11 != 6)
                    v14[6] = a1[6 * v13];
                }
              }
            }
          }
        }
        a1 += v15;
        --v160;
      }
      while (v160);
      *v14 = *v64;
      return v162;
    }
    v130 = 0;
    v131 = 4 * v13;
    while (1)
    {
      if (v13 == 1)
      {
        v132 = 0;
        do
        {
          v133 = *(_OWORD *)&a1[v132 / 4 + 4];
          v134 = &v14[v132 / 4];
          *(_OWORD *)v134 = *(_OWORD *)&a1[v132 / 4];
          *((_OWORD *)v134 + 1) = v133;
          v132 += 32;
        }
        while (((4 * v11) & 0x3FFFFFFE0) != v132);
        v135 = v11 & 0xFFFFFFF8;
        if (v135 == v11)
          goto LABEL_142;
      }
      else
      {
        v135 = 0;
      }
      v136 = v11 - v135;
      v137 = &v14[v135];
      v138 = v131 * v135;
      do
      {
        *v137++ = *(float *)((char *)a1 + v138);
        v138 += v131;
        --v136;
      }
      while (v136);
LABEL_142:
      ++v130;
      a1 += v15;
      if (v130 == v160)
        return v162;
    }
  }
  if (v11 <= 1)
  {
    if (v11 >= 1)
    {
      v56 = 0;
      v57 = 8 * v16;
      v58 = 4 * v17;
      do
      {
        v59 = a1;
        if (v14)
        {
          *v14 = *a1;
          v59 = v14;
        }
        v60 = *v59;
        v61 = 0;
        if ((a9 & 0x10) != 0)
        {
          v63 = a3;
          do
          {
            v9[v61 / 8] = v9[v61 / 8] + v60 * *v63 + 0.0;
            v61 += 8;
            v63 = (float *)((char *)v63 + v58);
          }
          while (v57 != v61);
        }
        else
        {
          v62 = a3;
          do
          {
            v9[v61 / 8] = v60 * *v62 + 0.0 + 0.0;
            v61 += 8;
            v62 = (float *)((char *)v62 + v58);
          }
          while (v57 != v61);
        }
        ++v56;
        a1 += v15;
        v9 += v159;
      }
      while (v56 != v160);
      return v162;
    }
    if ((a9 & 0x10) == 0)
    {
      v129 = 8 * v16;
      if (v14)
      {
        do
        {
          bzero(v9, v129);
          v9 += v159;
          --v160;
        }
        while (v160);
      }
      else
      {
        do
        {
          bzero(v9, v129);
          v9 += v159;
          --v160;
        }
        while (v160);
      }
      return v162;
    }
    v140 = v12 & 0xFFFFFFFC;
    if (v14)
    {
      if (v12 >= 4)
      {
        for (i = 0; i != v160; ++i)
        {
          v148 = 0;
          do
          {
            v149 = (float64x2_t *)&v9[v148 / 8];
            v150 = vaddq_f64(*(float64x2_t *)&v9[v148 / 8 + 2], (float64x2_t)0);
            *v149 = vaddq_f64(*(float64x2_t *)&v9[v148 / 8], (float64x2_t)0);
            v149[1] = v150;
            v148 += 32;
          }
          while (((8 * v16) & 0x7FFFFFFE0) != v148);
          if (v140 != v16)
          {
            v151 = v12 & 0xFFFFFFFC;
            do
            {
              v9[v151] = v9[v151] + 0.0;
              ++v151;
            }
            while (v16 != v151);
          }
          v9 += v159;
        }
      }
      else
      {
        v141 = a5 + 2;
        do
        {
          *(v141 - 2) = *(v141 - 2) + 0.0;
          if ((_DWORD)v12 != 1)
          {
            *(v141 - 1) = *(v141 - 1) + 0.0;
            if ((_DWORD)v12 != 2)
              *v141 = *v141 + 0.0;
          }
          v141 += v159;
          --v160;
        }
        while (v160);
      }
      return v162;
    }
    v142 = 0;
    while (1)
    {
      if (v12 >= 4)
      {
        v144 = 0;
        do
        {
          v145 = (float64x2_t *)&v9[v144 / 8];
          v146 = vaddq_f64(*(float64x2_t *)&v9[v144 / 8 + 2], (float64x2_t)0);
          *v145 = vaddq_f64(*(float64x2_t *)&v9[v144 / 8], (float64x2_t)0);
          v145[1] = v146;
          v144 += 32;
        }
        while (((8 * v16) & 0x7FFFFFFE0) != v144);
        v143 = v12 & 0xFFFFFFFC;
        if (v140 == v16)
          goto LABEL_164;
      }
      else
      {
        v143 = 0;
      }
      do
      {
        v9[v143] = v9[v143] + 0.0;
        ++v143;
      }
      while (v16 != v143);
LABEL_164:
      ++v142;
      v9 += v159;
      if (v142 == v160)
        return v162;
    }
  }
  v65 = 0;
  v66 = (v11 - 2);
  v67 = (v66 & 0xFFFFFFFE) + 2;
  v68 = (v66 & 0xFFFFFFFE) + 3;
  if (v11 > v68)
    v68 = v11;
  v69 = v68 - (v66 & 0xFFFFFFFE) - 3;
  v70 = (v66 >> 1) + 1;
  v71 = v70 & 0xFFFFFFF8;
  v72 = (v69 + 1) & 0x1FFFFFFF8;
  v73 = 4 * v15;
  v74 = 4 * v13;
  v76 = v11 < 8 || v13 != 1;
  v157 = v76;
  v77 = 4 * v17;
  while (2)
  {
    v78 = a1;
    if (!v14)
      goto LABEL_105;
    if (v157)
    {
      v79 = 0;
    }
    else
    {
      v80 = 0;
      do
      {
        v81 = *(_OWORD *)&a1[v80 / 4 + 4];
        v82 = &v14[v80 / 4];
        *(_OWORD *)v82 = *(_OWORD *)&a1[v80 / 4];
        *((_OWORD *)v82 + 1) = v81;
        v80 += 32;
      }
      while (((4 * v11) & 0x3FFFFFFE0) != v80);
      v79 = v11 & 0xFFFFFFF8;
      v78 = v14;
      if (v79 == v11)
        goto LABEL_105;
    }
    v83 = v74 * v79;
    do
    {
      v14[v79++] = *(float *)((char *)a1 + v83);
      v83 += v74;
    }
    while (v11 != v79);
    v78 = v14;
LABEL_105:
    if (v67 < v11)
    {
      v84 = 0;
      v85 = a3;
      while (1)
      {
        v86 = 0.0;
        v87 = 0.0;
        if ((a9 & 0x10) != 0)
          v87 = v9[v84];
        if (v66 < 0xE)
          break;
        v89 = 0;
        v90 = v70 & 0xFFFFFFF8;
        do
        {
          v91 = &v78[v89];
          v163 = vld2q_f32(v91);
          v91 += 8;
          v165 = vld2q_f32(v91);
          v92 = &v85[v89];
          v167 = vld2q_f32(v92);
          v92 += 8;
          v169 = vld2q_f32(v92);
          v93 = vmulq_f64(vcvt_hight_f64_f32(v163.val[0]), vcvt_hight_f64_f32(v167.val[0]));
          v94 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v163.val[0].f32), vcvtq_f64_f32(*(float32x2_t *)v167.val[0].f32));
          v95 = vmulq_f64(vcvt_hight_f64_f32(v165.val[0]), vcvt_hight_f64_f32(v169.val[0]));
          v96 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v165.val[0].f32), vcvtq_f64_f32(*(float32x2_t *)v169.val[0].f32));
          v97 = vcvtq_f64_f32(*(float32x2_t *)v163.val[1].f32);
          v163.val[0] = (float32x4_t)vcvt_hight_f64_f32(v163.val[1]);
          v163.val[1] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v165.val[1].f32);
          v165.val[0] = (float32x4_t)vcvt_hight_f64_f32(v165.val[1]);
          v163.val[0] = (float32x4_t)vmulq_f64((float64x2_t)v163.val[0], vcvt_hight_f64_f32(v167.val[1]));
          v165.val[1] = (float32x4_t)vmulq_f64(v97, vcvtq_f64_f32(*(float32x2_t *)v167.val[1].f32));
          v165.val[0] = (float32x4_t)vmulq_f64((float64x2_t)v165.val[0], vcvt_hight_f64_f32(v169.val[1]));
          v163.val[1] = (float32x4_t)vmulq_f64((float64x2_t)v163.val[1], vcvtq_f64_f32(*(float32x2_t *)v169.val[1].f32));
          v86 = v86
              + *(double *)v165.val[1].i64
              + *(double *)&v165.val[1].i64[1]
              + *(double *)v163.val[0].i64
              + *(double *)&v163.val[0].i64[1]
              + *(double *)v163.val[1].i64
              + *(double *)&v163.val[1].i64[1]
              + *(double *)v165.val[0].i64
              + *(double *)&v165.val[0].i64[1];
          v87 = v87
              + v94.f64[0]
              + v94.f64[1]
              + v93.f64[0]
              + v93.f64[1]
              + v96.f64[0]
              + v96.f64[1]
              + v95.f64[0]
              + v95.f64[1];
          v89 += 16;
          v90 -= 8;
        }
        while (v90);
        v88 = 2 * (v70 & 0xFFFFFFF8);
        if (v70 != v71)
          goto LABEL_115;
LABEL_117:
        if (v69 >= 7)
        {
          v101 = (v66 & 0xFFFFFFFE) + 2;
          v102 = (v69 + 1) & 0x1FFFFFFF8;
          v100 = v161;
          do
          {
            v103 = *(float32x4_t *)&v78[v101];
            v104 = *(float32x4_t *)&v78[v101 + 4];
            v105 = vcvtq_f64_f32(*(float32x2_t *)v103.f32);
            v106 = vcvtq_f64_f32(*(float32x2_t *)v104.f32);
            v107 = *(float32x4_t *)&v85[v101];
            v108 = *(float32x4_t *)&v85[v101 + 4];
            v109 = vmulq_f64(vcvt_hight_f64_f32(v103), vcvt_hight_f64_f32(v107));
            v110 = vmulq_f64(v105, vcvtq_f64_f32(*(float32x2_t *)v107.f32));
            v111 = vmulq_f64(vcvt_hight_f64_f32(v104), vcvt_hight_f64_f32(v108));
            v112 = vmulq_f64(v106, vcvtq_f64_f32(*(float32x2_t *)v108.f32));
            v87 = v87
                + v110.f64[0]
                + v110.f64[1]
                + v109.f64[0]
                + v109.f64[1]
                + v112.f64[0]
                + v112.f64[1]
                + v111.f64[0]
                + v111.f64[1];
            v101 += 8;
            v102 -= 8;
          }
          while (v102);
          v99 = v72 + v67;
          if (v69 + 1 == v72)
            goto LABEL_107;
        }
        else
        {
          v99 = (v66 & 0xFFFFFFFE) + 2;
          v100 = v161;
        }
        v113 = v99;
        do
        {
          v87 = v87 + v78[v113] * v85[v113];
          LODWORD(v99) = v99 + 1;
          ++v113;
        }
        while (v11 > (int)v99);
LABEL_107:
        v9[v84++] = v86 + v87;
        v85 = (float *)((char *)v85 + v77);
        if (v84 == v100)
          goto LABEL_95;
      }
      v88 = 0;
LABEL_115:
      v98 = v88;
      do
      {
        v87 = v87 + v78[v98] * v85[v98];
        v86 = v86 + v78[v98 + 1] * v85[v98 + 1];
        v88 += 2;
        v98 += 2;
      }
      while (v88 <= v66);
      goto LABEL_117;
    }
    v114 = 0;
    v115 = a3;
    do
    {
      v116 = 0.0;
      v117 = 0.0;
      if ((a9 & 0x10) != 0)
        v117 = v9[v114];
      if (v66 < 0xE)
      {
        v118 = 0;
LABEL_134:
        v128 = v118;
        do
        {
          v117 = v117 + v78[v128] * v115[v128];
          v116 = v116 + v78[v128 + 1] * v115[v128 + 1];
          v118 += 2;
          v128 += 2;
        }
        while (v118 <= v66);
        goto LABEL_126;
      }
      v119 = 0;
      v120 = v70 & 0xFFFFFFF8;
      do
      {
        v121 = &v78[v119];
        v164 = vld2q_f32(v121);
        v121 += 8;
        v166 = vld2q_f32(v121);
        v122 = &v115[v119];
        v168 = vld2q_f32(v122);
        v122 += 8;
        v170 = vld2q_f32(v122);
        v123 = vmulq_f64(vcvt_hight_f64_f32(v164.val[0]), vcvt_hight_f64_f32(v168.val[0]));
        v124 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v164.val[0].f32), vcvtq_f64_f32(*(float32x2_t *)v168.val[0].f32));
        v125 = vmulq_f64(vcvt_hight_f64_f32(v166.val[0]), vcvt_hight_f64_f32(v170.val[0]));
        v126 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v166.val[0].f32), vcvtq_f64_f32(*(float32x2_t *)v170.val[0].f32));
        v127 = vcvtq_f64_f32(*(float32x2_t *)v164.val[1].f32);
        v164.val[0] = (float32x4_t)vcvt_hight_f64_f32(v164.val[1]);
        v164.val[1] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v166.val[1].f32);
        v166.val[0] = (float32x4_t)vcvt_hight_f64_f32(v166.val[1]);
        v164.val[0] = (float32x4_t)vmulq_f64((float64x2_t)v164.val[0], vcvt_hight_f64_f32(v168.val[1]));
        v166.val[1] = (float32x4_t)vmulq_f64(v127, vcvtq_f64_f32(*(float32x2_t *)v168.val[1].f32));
        v166.val[0] = (float32x4_t)vmulq_f64((float64x2_t)v166.val[0], vcvt_hight_f64_f32(v170.val[1]));
        v164.val[1] = (float32x4_t)vmulq_f64((float64x2_t)v164.val[1], vcvtq_f64_f32(*(float32x2_t *)v170.val[1].f32));
        v116 = v116
             + *(double *)v166.val[1].i64
             + *(double *)&v166.val[1].i64[1]
             + *(double *)v164.val[0].i64
             + *(double *)&v164.val[0].i64[1]
             + *(double *)v164.val[1].i64
             + *(double *)&v164.val[1].i64[1]
             + *(double *)v166.val[0].i64
             + *(double *)&v166.val[0].i64[1];
        v117 = v117
             + v124.f64[0]
             + v124.f64[1]
             + v123.f64[0]
             + v123.f64[1]
             + v126.f64[0]
             + v126.f64[1]
             + v125.f64[0]
             + v125.f64[1];
        v119 += 16;
        v120 -= 8;
      }
      while (v120);
      v118 = 2 * (v70 & 0xFFFFFFF8);
      if (v70 != v71)
        goto LABEL_134;
LABEL_126:
      v9[v114++] = v116 + v117;
      v115 = (float *)((char *)v115 + v77);
    }
    while (v114 != v161);
LABEL_95:
    ++v65;
    a1 = (float *)((char *)a1 + v73);
    v9 += v159;
    if (v65 != v160)
      continue;
    return v162;
  }
}

void sub_100244534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (a22 != v22)
  {
    if (a22)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

__int32 *sub_100244564(__int32 *result, unint64_t a2, float64x2_t *a3, unint64_t a4, float *a5, unint64_t a6, unsigned int *a7, char a8, double a9, double a10)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *v22;
  float64x2_t v23;
  uint64_t v24;
  float64x2_t *v25;
  uint64_t v26;
  float64x2_t *v27;
  unint64_t v28;
  float *v29;
  uint64_t v30;
  float64x2_t *v31;
  float32x2_t *v32;
  __int32 *v33;
  __int32 *v34;
  float32x2_t v35;
  __int32 *v36;
  __int32 *v37;
  __int32 *v38;
  float64x2_t v39;
  float v40;
  unint64_t v41;
  uint64_t v42;
  float *v43;
  const double *v44;
  const double *v45;
  uint64_t v46;
  float *v47;
  float64x2_t *v48;
  double v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t *v56;
  float64x2_t *v57;
  unint64_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float v63;
  float64x2x4_t v64;
  float64x2x4_t v65;
  float32x4x4_t v66;

  v10 = a7[1];
  v11 = a2 >> 2;
  if ((a8 & 4) != 0)
    v12 = 1;
  else
    v12 = a2 >> 2;
  if ((a8 & 4) == 0)
    v11 = 1;
  if (result)
    v13 = v12;
  else
    v13 = 0;
  if (result)
    v14 = v11;
  else
    v14 = 0;
  if (v10)
  {
    v15 = *a7;
    v16 = a4 >> 3;
    v17 = v14;
    v18 = (v15 - 4);
    v19 = (v18 >> 2) + 1;
    v20 = 4 * v13;
    v21 = 4 * v14;
    v22 = (float32x2_t *)(a5 + 2);
    v23 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a10, 0);
    v24 = 4 * (a6 >> 2);
    v25 = a3 + 1;
    v26 = 8 * v16;
    v27 = a3 + 2;
    while (result)
    {
      v28 = 0;
      if ((int)v15 >= 4)
      {
        v31 = v25;
        v32 = v22;
        v33 = result;
        do
        {
          v34 = v33;
          v35.i32[0] = *v33;
          v36 = &v33[v17];
          v35.i32[1] = *v36;
          v37 = &v36[v17];
          v32[-1] = vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(v31[-1], a9), vcvtq_f64_f32(v35), v23));
          v35.i32[0] = *v37;
          v38 = &v37[v17];
          v39 = *v31;
          v31 += 2;
          v35.i32[1] = *v38;
          v33 = &v38[v17];
          *v32 = vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(v39, a9), vcvtq_f64_f32(v35), v23));
          v32 += 2;
          v28 += 4;
        }
        while (v28 <= v18);
        v29 = (float *)&v34[v21];
        v28 = v28;
        if ((int)v28 >= (int)v15)
          goto LABEL_14;
        do
        {
LABEL_25:
          v40 = a3->f64[v28] * a9 + *v29 * a10;
          a5[v28++] = v40;
          v29 = (float *)((char *)v29 + v17 * 4);
        }
        while (v15 != v28);
        goto LABEL_14;
      }
      v29 = (float *)result;
      if ((int)v15 > 0)
        goto LABEL_25;
LABEL_14:
      result = (__int32 *)((char *)result + v20);
      v22 = (float32x2_t *)((char *)v22 + v24);
      v25 = (float64x2_t *)((char *)v25 + v26);
      a5 = (float *)((char *)a5 + v24);
      a3 = (float64x2_t *)((char *)a3 + v26);
      v27 = (float64x2_t *)((char *)v27 + v26);
      if (!--v10)
        return result;
    }
    if ((int)v15 < 4)
    {
      v30 = 0;
      if ((int)v15 <= 0)
        goto LABEL_14;
      goto LABEL_35;
    }
    if (v18 >= 0xC)
    {
      v42 = v19 & 0x7FFFFFFC;
      v43 = a5;
      v44 = (const double *)a3;
      do
      {
        v45 = v44;
        v64 = vld4q_f64(v45);
        v45 += 8;
        v65 = vld4q_f64(v45);
        v66.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v64.val[0], a9)), vmulq_n_f64(v65.val[0], a9));
        v66.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v64.val[1], a9)), vmulq_n_f64(v65.val[1], a9));
        v66.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v64.val[2], a9)), vmulq_n_f64(v65.val[2], a9));
        v66.val[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v64.val[3], a9)), vmulq_n_f64(v65.val[3], a9));
        vst4q_f32(v43, v66);
        v43 += 16;
        v44 += 16;
        v42 -= 4;
      }
      while (v42);
      v41 = 4 * (v19 & 0x7FFFFFFC);
      if (v19 == (v19 & 0x7FFFFFFC))
      {
LABEL_34:
        v30 = v41;
        if ((int)v41 >= (int)v15)
          goto LABEL_14;
LABEL_35:
        v54 = v15 - v30;
        if ((unint64_t)(v15 - v30) >= 8)
        {
          v55 = (v54 & 0xFFFFFFFFFFFFFFF8) + v30;
          v56 = (float32x4_t *)&a5[v30];
          v57 = (float64x2_t *)((char *)v27 + 8 * v30);
          v58 = v54 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v59 = v57[-2];
            v60 = v57[-1];
            v61 = *v57;
            v62 = v57[1];
            v57 += 4;
            *v56 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v59, a9)), vmulq_n_f64(v60, a9));
            v56[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v61, a9)), vmulq_n_f64(v62, a9));
            v56 += 2;
            v58 -= 8;
          }
          while (v58);
          if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_14;
        }
        else
        {
          v55 = v30;
        }
        do
        {
          v63 = a3->f64[v55] * a9;
          a5[v55++] = v63;
        }
        while (v15 != v55);
        goto LABEL_14;
      }
    }
    else
    {
      v41 = 0;
    }
    v46 = 8 * v41 + 24;
    v47 = &a5[v41];
    do
    {
      v48 = &a3[v41 / 2];
      v49 = v48[1].f64[0];
      v50 = *(double *)((char *)&a3[-1] + v46 - 8) * a9;
      v51 = v48->f64[1] * a9;
      *v47 = v50;
      v47[1] = v51;
      v52 = v49 * a9;
      v53 = *(double *)((char *)a3->f64 + v46) * a9;
      v47[2] = v52;
      v47[3] = v53;
      v41 += 4;
      v46 += 32;
      v47 += 4;
    }
    while (v41 <= v18);
    goto LABEL_34;
  }
  return result;
}

_QWORD *sub_100244854(_QWORD *a1, unint64_t a2, _QWORD *a3, unint64_t a4, double *a5, unint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, int *a11, int *a12, char a13)
{
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  double *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  double v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  double *v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  double *v48;
  double v49;
  double v50;
  double *v51;
  double *v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  double v60;
  double *v61;
  double v62;
  double *v63;
  double *v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  double *v84;
  uint64_t v85;
  unint64_t v86;
  __int128 v87;
  double *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float64x2_t v96;
  uint64_t v97;
  double *v98;
  const double *v99;
  uint64_t v100;
  double *v101;
  double v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  float64x2_t v106;
  uint64_t v107;
  unint64_t v108;
  float64x2_t *v109;
  float64x2_t v110;
  uint64_t v111;
  double *v112;
  uint64_t v113;
  uint64_t v114;
  float64x2_t v115;
  float64x2_t *v116;
  double *v117;
  BOOL v118;
  char v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  double *v123;
  int v124;
  uint64_t v125;
  double *v126;
  double *v127;
  double v128;
  double v129;
  uint64_t v130;
  double *v131;
  double v132;
  int v133;
  double *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  double *v144;
  unint64_t v145;
  __int128 v146;
  double *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  double *v152;
  uint64_t v153;
  double v154;
  double v155;
  double v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  const double *v160;
  const double *v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  float64x2_t v172;
  float64x2_t v173;
  uint64_t v174;
  double v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  double v184;
  uint64_t v185;
  double *v186;
  uint64_t v187;
  double v188;
  double v189;
  double v190;
  _QWORD *result;
  int v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  __int128 v197;
  double *v198;
  uint64_t v199;
  uint64_t v200;
  double *v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  char v215;
  unint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  int v220;
  int v221;
  double *v222;
  double *v225;
  _BYTE v227[1088];
  _QWORD *v228;
  uint64_t v229;
  _QWORD v230[137];
  float64x2x4_t v231;
  float64x2x4_t v232;
  float64x2x4_t v233;
  float64x2x4_t v234;
  float64x2x4_t v235;
  float64x2x4_t v236;

  v16 = a10;
  v17 = a9;
  v19 = *a12;
  v18 = a12[1];
  v20 = *a12;
  v21 = *a11;
  v22 = a11[1];
  v23 = (double *)v230;
  v228 = v230;
  v229 = 136;
  v24 = a2 >> 3;
  v25 = a4 >> 3;
  v26 = a6 >> 3;
  v216 = a8 >> 3;
  if ((a13 & 4) != 0)
    v27 = 1;
  else
    v27 = a6 >> 3;
  if ((a13 & 4) == 0)
    v26 = 1;
  if (!a5)
    v27 = 0;
  v219 = v27;
  v221 = v18;
  if (a5)
    v28 = v26;
  else
    v28 = 0;
  if ((a13 & 1) != 0)
  {
    v30 = 1;
    if (a2 >= 0x10 && (int)v22 >= 2)
    {
      v229 = v22;
      if (v22 >= 0x89)
        operator new[]();
      v30 = 1;
      v225 = (double *)v230;
      if ((a13 & 2) == 0)
        goto LABEL_27;
      goto LABEL_149;
    }
    v21 = v22;
    v29 = a2 >> 3;
    if ((_DWORD)v22 == 1)
      goto LABEL_13;
  }
  else
  {
    v29 = 1;
    v30 = a2 >> 3;
    if (v21 == 1)
    {
LABEL_13:
      if (a2 < 0x10 || (int)v22 < 2)
        goto LABEL_229;
      v229 = (int)v18;
      if (v18 >= 0x89)
        operator new[]();
      if ((int)v18 >= 1)
      {
        if ((_DWORD)v18 == 1)
        {
          v177 = 0;
        }
        else
        {
          v176 = 0;
          v177 = v18 & 0xFFFFFFFE;
          v178 = a1;
          do
          {
            v179 = v178[v24];
            v180 = &v230[v176];
            *v180 = *v178;
            v180[1] = v179;
            v176 += 2;
            v178 += 2 * v24;
          }
          while (v177 != v176);
          if (v177 == v18)
            goto LABEL_228;
        }
        v181 = &a1[v177 * v24];
        do
        {
          v230[v177++] = *v181;
          v181 += v24;
        }
        while (v18 != v177);
      }
LABEL_228:
      a1 = v230;
LABEL_229:
      if (a4 >= 0x10)
      {
        if ((unint64_t)(int)v19 > 0x88 && v19 >= 0x89)
          operator new[]();
        if ((int)v19 >= 1)
        {
          v182 = 0;
          do
          {
            *(_QWORD *)&v227[v182] = *a3;
            v182 += 8;
            a3 += v25;
          }
          while (8 * v19 != v182);
        }
        a3 = v227;
      }
      if ((int)v18 < 1)
        goto LABEL_253;
      v183 = 0;
      while (1)
      {
        v184 = *(double *)&a1[v183] * v17;
        if (v20 >= 2)
        {
          v187 = 0;
          v185 = 0;
          v186 = a5;
          do
          {
            v189 = v184 * *(double *)&a3[v187];
            v188 = v184 * *(double *)&a3[v187 + 1];
            if (v186)
            {
              *(double *)(a7 + v187 * 8) = v189 + *v186 * v16;
              v188 = v188 + v186[v28] * v16;
            }
            else
            {
              *(double *)(a7 + v187 * 8) = v189;
            }
            *(double *)(a7 + v187 * 8 + 8) = v188;
            v185 += 2;
            v186 += 2 * v28;
            v187 += 2;
          }
          while (v185 <= (int)v19 - 2);
          v185 = v185;
          if ((int)v185 < (int)v19)
          {
            do
            {
LABEL_251:
              v190 = v184 * *(double *)&a3[v185];
              if (v186)
                v190 = v190 + *v186 * v16;
              *(double *)(a7 + 8 * v185++) = v190;
              v186 += v28;
            }
            while (v19 != v185);
          }
        }
        else
        {
          v185 = 0;
          v186 = a5;
          if ((int)v19 > 0)
            goto LABEL_251;
        }
        ++v183;
        a5 += v27;
        a7 += 8 * v216;
        if (v183 == v18)
          goto LABEL_253;
      }
    }
  }
  v23 = 0;
  v24 = v29;
  LODWORD(v22) = v21;
  v225 = 0;
  if ((a13 & 2) == 0)
  {
LABEL_27:
    if ((unint64_t)(8 * (int)v19) <= 0x640)
    {
      if ((int)v18 < 1)
        goto LABEL_253;
      v31 = 0;
      v32 = a9 * 0.0;
      if (v23)
        v33 = (int)v22 < 1;
      else
        v33 = 1;
      v34 = v33;
      v35 = 8 * v30;
      v36 = v22 >= 4 && v24 == 1;
      v37 = 8 * v24;
      v38 = 8 * v25;
      v39 = !v36;
LABEL_43:
      if (v23)
        v40 = v23;
      else
        v40 = (double *)a1;
      if ((v34 & 1) != 0)
        goto LABEL_55;
      if ((v39 & 1) != 0)
      {
        v41 = 0;
      }
      else
      {
        v42 = 0;
        do
        {
          v43 = *(_OWORD *)&a1[v42 / 8 + 2];
          v44 = &v23[v42 / 8];
          *(_OWORD *)v44 = *(_OWORD *)&a1[v42 / 8];
          *((_OWORD *)v44 + 1) = v43;
          v42 += 32;
        }
        while (((8 * v22) & 0x7FFFFFFE0) != v42);
        v41 = v22 & 0xFFFFFFFC;
        v40 = v23;
        if (v41 == v22)
          goto LABEL_55;
      }
      v45 = v37 * v41;
      do
      {
        v23[v41++] = *(double *)((char *)a1 + v45);
        v45 += v37;
      }
      while (v22 != v41);
      v40 = v23;
LABEL_55:
      if ((int)v19 < 4)
      {
        v46 = 0;
        v47 = a5;
        if ((int)v19 > 0)
          goto LABEL_69;
        goto LABEL_42;
      }
      v46 = 0;
      v48 = (double *)(a3 + 2);
      v47 = a5;
      while (1)
      {
        if ((int)v22 < 1)
        {
          v58 = v17 * 0.0;
          v54 = 0.0;
          v50 = 0.0;
          v59 = 8 * v46;
          v60 = 0.0 * v17;
          if (v47)
            goto LABEL_67;
        }
        else
        {
          v50 = 0.0;
          v51 = v48;
          v52 = v40;
          v53 = v22;
          v54 = 0.0;
          v55 = 0.0;
          v56 = 0.0;
          do
          {
            v57 = *v52++;
            v56 = v56 + v57 * *(v51 - 2);
            v55 = v55 + v57 * *(v51 - 1);
            v54 = v54 + v57 * *v51;
            v50 = v50 + v57 * v51[1];
            v51 = (double *)((char *)v51 + v38);
            --v53;
          }
          while (v53);
          v58 = v56 * v17;
          v23 = v225;
          v59 = 8 * v46;
          v60 = v55 * v17;
          if (v47)
          {
LABEL_67:
            *(double *)(a7 + v59) = v58 + *v47 * v16;
            *(double *)(a7 + (v59 | 8)) = v60 + v47[v28] * v16;
            *(double *)(a7 + (v59 | 0x10)) = v54 * v17 + v47[2 * v28] * v16;
            v49 = v50 * v17 + v47[3 * v28] * v16;
            goto LABEL_60;
          }
        }
        *(double *)(a7 + v59) = v58;
        *(double *)(a7 + (v59 | 8)) = v60;
        *(double *)(a7 + (v59 | 0x10)) = v54 * v17;
        v49 = v50 * v17;
LABEL_60:
        *(double *)(a7 + (v59 | 0x18)) = v49;
        v46 += 4;
        v47 += 4 * v28;
        v48 += 4;
        if (v46 > v20 - 4)
        {
          v46 = v46;
          if ((int)v46 < (int)v19)
          {
LABEL_69:
            if ((int)v22 <= 0)
            {
              do
              {
                v68 = v17 * 0.0;
                if (v47)
                  v68 = v32 + *v47 * v16;
                *(double *)(a7 + 8 * v46++) = v68;
                v47 += v28;
              }
              while (v19 != v46);
            }
            else
            {
              v61 = (double *)&a3[v46];
              do
              {
                v62 = 0.0;
                v63 = v61;
                v64 = v40;
                v65 = v22;
                do
                {
                  v66 = *v64++;
                  v62 = v62 + v66 * *v63;
                  v63 = (double *)((char *)v63 + v38);
                  --v65;
                }
                while (v65);
                v67 = v62 * v17;
                if (v47)
                  v67 = v67 + *v47 * v16;
                v23 = v225;
                *(double *)(a7 + 8 * v46++) = v67;
                v47 += v28;
                ++v61;
              }
              while (v46 != v19);
            }
          }
LABEL_42:
          ++v31;
          a1 = (_QWORD *)((char *)a1 + v35);
          a5 += v27;
          a7 += 8 * v216;
          if (v31 == (_DWORD)v18)
            goto LABEL_253;
          goto LABEL_43;
        }
      }
    }
    if (v19 >= 0x89)
      operator new[]();
    if ((int)v18 < 1)
      goto LABEL_253;
    v69 = 0;
    v70 = (int)v19 - 4;
    v71 = 8 * v19;
    if (v23)
      v72 = (int)v22 < 1;
    else
      v72 = 1;
    v73 = v72;
    v214 = v73;
    if (v70 <= 3)
      v74 = 3;
    else
      v74 = (int)v19 - 4;
    v75 = (v74 >> 2) + 1;
    v76 = v75 & 0x7FFFFFFE;
    v77 = 4 * v76;
    v78 = 8 * v30;
    v203 = 8 * v24;
    v79 = v22 >= 4 && v24 == 1;
    v80 = 8 * v25;
    v217 = 8 * v216;
    v81 = !v79;
    v204 = v81;
    v210 = v27;
    v212 = v78;
    v82 = 8 * v28;
    v83 = v71 & 0x7FFFFFFE0;
    v208 = (v74 >> 2) + 1;
    v209 = v74;
    v206 = 4 * (v75 & 0x7FFFFFFE);
    v207 = v75 & 0x7FFFFFFE;
    v205 = 8 * v28;
    while (1)
    {
      if (v23)
        v84 = v23;
      else
        v84 = (double *)a1;
      v222 = a5;
      if ((v214 & 1) == 0)
      {
        if ((v204 & 1) != 0)
        {
          v85 = 0;
LABEL_108:
          v89 = v203 * v85;
          do
          {
            v23[v85++] = *(double *)((char *)a1 + v89);
            v89 += v203;
          }
          while (v22 != v85);
          v84 = v23;
          goto LABEL_111;
        }
        v86 = 0;
        do
        {
          v87 = *(_OWORD *)&a1[v86 / 8 + 2];
          v88 = &v23[v86 / 8];
          *(_OWORD *)v88 = *(_OWORD *)&a1[v86 / 8];
          *((_OWORD *)v88 + 1) = v87;
          v86 += 32;
        }
        while (((8 * v22) & 0x7FFFFFFE0) != v86);
        v85 = v22 & 0xFFFFFFFC;
        v84 = v23;
        if (v85 != v22)
          goto LABEL_108;
      }
LABEL_111:
      if (v20 >= 1)
      {
        v220 = v69;
        bzero(v227, 8 * v19);
        v83 = v71 & 0x7FFFFFFE0;
        v82 = v205;
        v77 = v206;
        v76 = v207;
        v75 = v208;
        v74 = v209;
        v69 = v220;
        v20 = v19;
        v23 = v225;
        v17 = a9;
        LODWORD(v18) = v221;
      }
      if ((int)v22 >= 1)
      {
        v90 = 0;
        v91 = a3;
        while (1)
        {
          v92 = *(uint64_t *)&v84[v90];
          if ((int)v19 < 4)
          {
            v93 = 0;
            if ((int)v19 <= 0)
              goto LABEL_115;
            goto LABEL_127;
          }
          if (v74 < 4)
            break;
          v95 = 0;
          v96 = (float64x2_t)vdupq_lane_s64(v92, 0);
          v97 = v76;
          do
          {
            v98 = (double *)&v227[v95 * 8];
            v231 = vld4q_f64(v98);
            v99 = (const double *)&v91[v95];
            v233 = vld4q_f64(v99);
            v231.val[0] = vmlaq_f64(v231.val[0], v96, v233.val[0]);
            v231.val[1] = vmlaq_f64(v231.val[1], v96, v233.val[1]);
            v231.val[2] = vmlaq_f64(v231.val[2], v96, v233.val[2]);
            v231.val[3] = vmlaq_f64(v231.val[3], v96, v233.val[3]);
            vst4q_f64(v98, v231);
            v95 += 8;
            v97 -= 2;
          }
          while (v97);
          v94 = v77;
          if (v75 != v76)
            goto LABEL_124;
LABEL_126:
          v93 = v94;
          if ((int)v94 >= (int)v19)
            goto LABEL_115;
LABEL_127:
          v104 = v19 - v93;
          if ((unint64_t)(v19 - v93) >= 4)
          {
            v105 = (v104 & 0xFFFFFFFFFFFFFFFCLL) + v93;
            v106 = (float64x2_t)vdupq_lane_s64(v92, 0);
            v107 = v93;
            v108 = v104 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v109 = (float64x2_t *)&v227[v107 * 8];
              v110 = vmlaq_f64(*(float64x2_t *)&v227[v107 * 8 + 16], v106, *(float64x2_t *)&v91[v107 + 2]);
              *v109 = vmlaq_f64(*(float64x2_t *)&v227[v107 * 8], v106, *(float64x2_t *)&v91[v107]);
              v109[1] = v110;
              v107 += 4;
              v108 -= 4;
            }
            while (v108);
            if (v104 == (v104 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_115;
          }
          else
          {
            v105 = v93;
          }
          do
          {
            *(double *)&v227[8 * v105] = *(double *)&v227[8 * v105] + *(double *)&v91[v105] * *(double *)&v92;
            ++v105;
          }
          while (v19 != v105);
LABEL_115:
          ++v90;
          v91 = (_QWORD *)((char *)v91 + v80);
          if (v90 == v22)
            goto LABEL_134;
        }
        v94 = 0;
LABEL_124:
        v100 = 8 * v94 + 16;
        do
        {
          v101 = (double *)&v227[v100];
          v102 = *(double *)&v227[v100 - 8] + *(double *)&v91[v94 + 1] * *(double *)&v92;
          *(v101 - 2) = *(double *)&v227[v100 - 16] + *(double *)((char *)v91 + v100 - 16) * *(double *)&v92;
          *(v101 - 1) = v102;
          v103 = *(double *)&v227[v100 + 8] + *(double *)((char *)v91 + v100 + 8) * *(double *)&v92;
          *v101 = *(double *)&v227[v100] + *(double *)((char *)v91 + v100) * *(double *)&v92;
          v101[1] = v103;
          v94 += 4;
          v100 += 32;
        }
        while (v94 <= v70);
        goto LABEL_126;
      }
LABEL_134:
      if (v222)
      {
        if (v20 >= 1)
        {
          v111 = 0;
          v112 = v222;
          do
          {
            *(double *)(a7 + v111) = *(double *)&v227[v111] * v17 + *v112 * v16;
            v111 += 8;
            v112 = (double *)((char *)v112 + v82);
          }
          while (v71 != v111);
        }
        goto LABEL_98;
      }
      if ((int)v19 >= 1)
      {
        if (v20 >= 4)
        {
          v114 = 0;
          do
          {
            v115 = vmulq_n_f64(*(float64x2_t *)&v227[v114 + 16], v17);
            v116 = (float64x2_t *)(a7 + v114);
            *v116 = vmulq_n_f64(*(float64x2_t *)&v227[v114], v17);
            v116[1] = v115;
            v114 += 32;
          }
          while (v83 != v114);
          v113 = v19 & 0xFFFFFFFC;
          if (v113 == v19)
            goto LABEL_98;
        }
        else
        {
          v113 = 0;
        }
        do
        {
          *(double *)(a7 + 8 * v113) = *(double *)&v227[8 * v113] * v17;
          ++v113;
        }
        while (v19 != v113);
      }
LABEL_98:
      ++v69;
      a1 = (_QWORD *)((char *)a1 + v212);
      a5 = &v222[v210];
      a7 += v217;
      if (v69 == (_DWORD)v18)
        goto LABEL_253;
    }
  }
LABEL_149:
  if ((int)v18 < 1)
    goto LABEL_253;
  if (v20 < 1)
  {
    if (!v23 || (int)v22 < 1)
      goto LABEL_253;
    if (v22 < 4)
    {
      v133 = v18;
      do
      {
        v134 = (double *)a1;
        if ((_DWORD)v22 != 1)
        {
          v23[1] = *(double *)&a1[v24];
          if ((_DWORD)v22 != 2)
            v23[2] = *(double *)&a1[2 * v24];
        }
        a1 += v30;
        --v133;
      }
      while (v133);
      *v23 = *v134;
      goto LABEL_253;
    }
    v193 = 0;
    v194 = 8 * v24;
    while (1)
    {
      if (v24 == 1)
      {
        v195 = 0;
        v196 = v18;
        do
        {
          v197 = *(_OWORD *)&a1[v195 / 8 + 2];
          v198 = &v23[v195 / 8];
          *(_OWORD *)v198 = *(_OWORD *)&a1[v195 / 8];
          *((_OWORD *)v198 + 1) = v197;
          v195 += 32;
        }
        while (((8 * v22) & 0x7FFFFFFE0) != v195);
        v199 = v22 & 0xFFFFFFFC;
        if (v199 == v22)
          goto LABEL_260;
      }
      else
      {
        v199 = 0;
        v196 = v18;
      }
      v200 = v22 - v199;
      v201 = &v23[v199];
      v202 = v194 * v199;
      do
      {
        *v201++ = *(double *)((char *)a1 + v202);
        v202 += v194;
        --v200;
      }
      while (v200);
LABEL_260:
      ++v193;
      a1 += v30;
      if (v193 == v196)
        goto LABEL_253;
    }
  }
  v117 = a5;
  if (v23)
    v118 = (int)v22 < 1;
  else
    v118 = 1;
  v119 = v118;
  if ((int)v22 <= 3)
  {
    v120 = 0;
    v121 = 8 * v19;
    v122 = 8 * v28;
    do
    {
      if (v23)
        v123 = v23;
      else
        v123 = (double *)a1;
      if ((v119 & 1) != 0)
      {
        v124 = v221;
      }
      else
      {
        *v23 = *(double *)a1;
        v123 = v23;
        v124 = v221;
        if ((_DWORD)v22 != 1)
        {
          v23[1] = *(double *)&a1[v24];
          v123 = v23;
          if ((_DWORD)v22 != 2)
          {
            v23[2] = *(double *)&a1[2 * v24];
            v123 = v23;
          }
        }
      }
      if ((int)v22 <= 0)
      {
        v130 = 0;
        v131 = v117;
        do
        {
          v132 = a9 * 0.0;
          if (v131)
            v132 = a9 * 0.0 + *v131 * a10;
          *(double *)(a7 + v130) = v132;
          v130 += 8;
          v131 = (double *)((char *)v131 + v122);
        }
        while (v121 != v130);
      }
      else
      {
        v125 = 0;
        v126 = (double *)(a3 + 1);
        v127 = v117;
        do
        {
          v128 = *v123 * *(v126 - 1) + 0.0;
          if ((_DWORD)v22 != 1)
          {
            v128 = v128 + v123[1] * *v126;
            if ((_DWORD)v22 != 2)
              v128 = v128 + v123[2] * v126[1];
          }
          v129 = (v128 + 0.0) * a9;
          if (v127)
            v129 = v129 + *v127 * a10;
          *(double *)(a7 + v125) = v129;
          v125 += 8;
          v127 = (double *)((char *)v127 + v122);
          v126 += v25;
        }
        while (v121 != v125);
      }
      ++v120;
      a1 += v30;
      a7 += 8 * v216;
      v117 += v27;
    }
    while (v120 != v124);
    goto LABEL_253;
  }
  v218 = 0;
  v135 = (int)v22 - 4;
  v136 = (v22 - 4) & 0xFFFFFFFC;
  v137 = (v136 + 4);
  v138 = (v22 - v136 - 5);
  v139 = 3;
  if (v135 > 3)
    v139 = (int)v22 - 4;
  v140 = (v139 >> 2) + 1;
  v211 = v24;
  v213 = 8 * v30;
  v141 = 8 * v24;
  v142 = (v138 + 1) & 0x1FFFFFFFCLL;
  v143 = 8 * v25;
  v215 = v119;
  while (2)
  {
    if (v23)
      v144 = v23;
    else
      v144 = (double *)a1;
    if ((v119 & 1) != 0)
      goto LABEL_205;
    if (v24 == 1)
    {
      v145 = 0;
      do
      {
        v146 = *(_OWORD *)&a1[v145 / 8 + 2];
        v147 = &v23[v145 / 8];
        *(_OWORD *)v147 = *(_OWORD *)&a1[v145 / 8];
        *((_OWORD *)v147 + 1) = v146;
        v145 += 32;
      }
      while (((8 * v22) & 0x7FFFFFFE0) != v145);
      v148 = v22 & 0xFFFFFFFC;
      v144 = v23;
      if (v148 == v22)
        goto LABEL_205;
    }
    else
    {
      v148 = 0;
    }
    v149 = v141 * v148;
    do
    {
      v23[v148++] = *(double *)((char *)a1 + v149);
      v149 += v141;
    }
    while (v22 != v148);
    v144 = v23;
LABEL_205:
    v150 = 0;
    v151 = a3;
    v152 = v117;
    do
    {
      if (v139 < 0xC)
      {
        v153 = 0;
        v154 = 0.0;
        v155 = 0.0;
        v156 = 0.0;
        v157 = 0.0;
LABEL_212:
        v168 = 8 * v153 + 16;
        do
        {
          v157 = v157 + *(double *)((char *)v144 + v168 - 16) * *(double *)((char *)v151 + v168 - 16);
          v156 = v156 + *(double *)((char *)v144 + v168 - 8) * *(double *)&v151[v153 + 1];
          v155 = v155 + *(double *)((char *)v144 + v168) * *(double *)((char *)v151 + v168);
          v154 = v154 + *(double *)((char *)v144 + v168 + 8) * *(double *)((char *)v151 + v168 + 8);
          v153 += 4;
          v168 += 32;
        }
        while (v153 <= v135);
        goto LABEL_214;
      }
      v158 = 0;
      v154 = 0.0;
      v159 = v140 & 0x3FFFFFFC;
      v155 = 0.0;
      v156 = 0.0;
      v157 = 0.0;
      do
      {
        v160 = &v144[v158];
        v232 = vld4q_f64(v160);
        v160 += 8;
        v234 = vld4q_f64(v160);
        v161 = (const double *)&v151[v158];
        v235 = vld4q_f64(v161);
        v161 += 8;
        v236 = vld4q_f64(v161);
        v162 = vmulq_f64(v232.val[0], v235.val[0]);
        v163 = vmulq_f64(v234.val[0], v236.val[0]);
        v164 = vmulq_f64(v232.val[1], v235.val[1]);
        v165 = vmulq_f64(v234.val[1], v236.val[1]);
        v166 = vmulq_f64(v232.val[2], v235.val[2]);
        v167 = vmulq_f64(v234.val[2], v236.val[2]);
        v232.val[0] = vmulq_f64(v232.val[3], v235.val[3]);
        v232.val[2] = vmulq_f64(v234.val[3], v236.val[3]);
        v154 = v154 + v232.val[0].f64[0] + v232.val[0].f64[1] + v232.val[2].f64[0] + v232.val[2].f64[1];
        v155 = v155 + v166.f64[0] + v166.f64[1] + v167.f64[0] + v167.f64[1];
        v156 = v156 + v164.f64[0] + v164.f64[1] + v165.f64[0] + v165.f64[1];
        v157 = v157 + v162.f64[0] + v162.f64[1] + v163.f64[0] + v163.f64[1];
        v158 += 16;
        v159 -= 4;
      }
      while (v159);
      v153 = 4 * (v140 & 0x3FFFFFFC);
      v16 = a10;
      v17 = a9;
      if (v140 != (v140 & 0x3FFFFFFC))
        goto LABEL_212;
LABEL_214:
      if ((int)v137 >= (int)v22)
        goto LABEL_222;
      if (v138 < 3)
      {
        v169 = v137;
LABEL_220:
        v174 = v169;
        do
        {
          v157 = v157 + v144[v174] * *(double *)&v151[v174];
          LODWORD(v169) = v169 + 1;
          ++v174;
        }
        while ((int)v22 > (int)v169);
        goto LABEL_222;
      }
      v170 = v137;
      v171 = (v138 + 1) & 0x1FFFFFFFCLL;
      do
      {
        v172 = vmulq_f64(*(float64x2_t *)&v144[v170], *(float64x2_t *)&v151[v170]);
        v173 = vmulq_f64(*(float64x2_t *)&v144[v170 + 2], *(float64x2_t *)&v151[v170 + 2]);
        v157 = v157 + v172.f64[0] + v172.f64[1] + v173.f64[0] + v173.f64[1];
        v170 += 4;
        v171 -= 4;
      }
      while (v171);
      v169 = v142 + v137;
      if (v138 + 1 != v142)
        goto LABEL_220;
LABEL_222:
      v175 = (v154 + v155 + v156 + v157) * v17;
      if (v152)
        v175 = v175 + *v152 * v16;
      *(double *)(a7 + 8 * v150++) = v175;
      v152 += v28;
      v151 = (_QWORD *)((char *)v151 + v143);
    }
    while (v150 != v19);
    v23 = v225;
    v24 = v211;
    a1 = (_QWORD *)((char *)a1 + v213);
    v117 += v219;
    a7 += 8 * v216;
    ++v218;
    v119 = v215;
    if (v218 != v221)
      continue;
    break;
  }
LABEL_253:
  result = v228;
  if (v228 != v230 && v228 != 0)
    operator delete[]();
  return result;
}

void sub_1002459F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (STACK[0x528] != a15)
  {
    if (STACK[0x528])
      operator delete[]();
  }
  _Unwind_Resume(a1);
}

_BYTE *sub_100245A54(double *a1, unint64_t a2, double *a3, unint64_t a4, double *a5, unint64_t a6, int *a7, unsigned int *a8, char a9)
{
  double *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  float64x2_t *v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  double v37;
  double *v38;
  double *v39;
  uint64_t v40;
  double v41;
  float64x2_t *v42;
  float64x2_t v43;
  uint64_t v44;
  float64x2_t v45;
  float64x2_t *v46;
  const double *v47;
  uint64_t v48;
  float64x2_t v49;
  double *v50;
  double v51;
  double *v52;
  double *v53;
  uint64_t v54;
  double v55;
  int v56;
  uint64_t v57;
  double *v58;
  unint64_t v59;
  double *v60;
  double *v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v73;
  uint64_t v74;
  double *v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  double *v79;
  uint64_t v80;
  uint64_t v81;
  double *v82;
  double v83;
  double v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const double *v88;
  const double *v89;
  float64x2_t v90;
  float64x2_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float64x2_t v97;
  float64x2_t v98;
  uint64_t v99;
  uint64_t v100;
  double *v101;
  double v102;
  double v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const double *v107;
  const double *v108;
  float64x2_t v109;
  float64x2_t v110;
  uint64_t v111;
  size_t v112;
  double *v113;
  unint64_t v114;
  double *v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  __int128 v119;
  double *v120;
  uint64_t v121;
  uint64_t v122;
  double *v123;
  uint64_t v124;
  uint64_t v126;
  double *v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  float64x2_t *v131;
  float64x2_t v132;
  int i;
  unint64_t v134;
  float64x2_t *v135;
  float64x2_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  unsigned int v141;
  int v142;
  BOOL v143;
  unint64_t v145;
  int v146;
  uint64_t v147;
  _BYTE v148[1096];
  float64x2x2_t v149;
  float64x2x2_t v150;
  float64x2x2_t v151;
  float64x2x2_t v152;
  float64x2x2_t v153;
  float64x2x2_t v154;
  float64x2x2_t v155;
  float64x2x2_t v156;

  v9 = a5;
  v11 = a7[1];
  v12 = (int)*a8;
  v146 = a8[1];
  v13 = a2 >> 3;
  if ((a9 & 1) != 0)
  {
    if (v11 >= 0x89)
      operator new[]();
    v15 = 1;
    v14 = (double *)v148;
  }
  else
  {
    v14 = 0;
    v11 = *a7;
    v15 = a2 >> 3;
    v13 = 1;
  }
  v16 = *a8;
  v17 = a4 >> 3;
  v145 = a6 >> 3;
  v147 = v16;
  if ((a9 & 2) == 0)
  {
    if (v146 < 1)
      return v148;
    v18 = 0;
    v19 = v12 - 4;
    if (v14)
      v20 = v11 < 1;
    else
      v20 = 1;
    v21 = v20;
    v22 = v11 & 0xFFFFFFFC;
    v23 = v11 >= 4 && v13 == 1;
    v24 = 8 * v15;
    v25 = !v23;
    v26 = 8 * v13;
    v27 = (float64x2_t *)(a3 + 2);
    v28 = 8 * v17;
    v141 = *a8;
    v140 = v21;
    v139 = v24;
    v138 = v25;
    while (1)
    {
      if (v14)
        v29 = v14;
      else
        v29 = a1;
      if ((v21 & 1) != 0)
        goto LABEL_34;
      if ((v25 & 1) != 0)
      {
        v30 = 0;
      }
      else
      {
        v31 = 0;
        do
        {
          v32 = *(_OWORD *)&a1[v31 / 8 + 2];
          v33 = &v14[v31 / 8];
          *(_OWORD *)v33 = *(_OWORD *)&a1[v31 / 8];
          *((_OWORD *)v33 + 1) = v32;
          v31 += 32;
        }
        while (((8 * v11) & 0x7FFFFFFE0) != v31);
        v30 = v22;
        v29 = v14;
        if (v22 == v11)
          goto LABEL_34;
      }
      v34 = v26 * v30;
      do
      {
        v14[v30++] = *(double *)((char *)a1 + v34);
        v34 += v26;
      }
      while (v11 != v30);
      v29 = v14;
LABEL_34:
      if ((int)v12 >= 4)
      {
        v35 = 0;
        v42 = v27;
        do
        {
          v43 = 0uLL;
          v44 = 8 * v35;
          v45 = 0uLL;
          if ((a9 & 0x10) != 0)
          {
            v43 = *(float64x2_t *)&v9[v35];
            v45 = *(float64x2_t *)((char *)v9 + (v44 | 0x10));
          }
          if (v11 >= 1)
          {
            v46 = v42;
            v47 = v29;
            v48 = v11;
            do
            {
              v49 = vld1q_dup_f64(v47++);
              v43 = vmlaq_f64(v43, v46[-1], v49);
              v45 = vmlaq_f64(v45, *v46, v49);
              v46 = (float64x2_t *)((char *)v46 + v28);
              --v48;
            }
            while (v48);
          }
          *(float64x2_t *)&v9[v35] = v43;
          *(float64x2_t *)((char *)v9 + (v44 | 0x10)) = v45;
          v35 += 4;
          v42 += 2;
        }
        while (v35 <= v19);
      }
      else
      {
        LODWORD(v35) = 0;
      }
      if ((int)v35 < (int)v16)
      {
        if (v11 < 1)
        {
          if ((a9 & 0x10) == 0)
          {
            v142 = v18;
            bzero(&v9[v35], 8 * (v12 + ~(_DWORD)v35) + 8);
            v27 = (float64x2_t *)(a3 + 2);
            v25 = v138;
            v24 = v139;
            v22 = v11 & 0xFFFFFFFC;
            v21 = v140;
            v18 = v142;
            LODWORD(v12) = v141;
            v16 = v147;
          }
        }
        else
        {
          v35 = v35;
          if ((a9 & 0x10) != 0)
          {
            v50 = &a3[v35];
            do
            {
              v51 = v9[v35];
              v52 = v50;
              v53 = v29;
              v54 = v11;
              do
              {
                v55 = *v53++;
                v51 = v51 + v55 * *v52;
                v52 = (double *)((char *)v52 + v28);
                --v54;
              }
              while (v54);
              v9[v35++] = v51;
              ++v50;
            }
            while (v35 != v16);
          }
          else
          {
            v36 = &a3[v35];
            do
            {
              v37 = 0.0;
              v38 = v36;
              v39 = v29;
              v40 = v11;
              do
              {
                v41 = *v39++;
                v37 = v37 + v41 * *v38;
                v38 = (double *)((char *)v38 + v28);
                --v40;
              }
              while (v40);
              v9[v35++] = v37;
              ++v36;
            }
            while (v35 != v16);
          }
        }
      }
      ++v18;
      a1 = (double *)((char *)a1 + v24);
      v9 += v145;
      if (v18 == v146)
        return v148;
    }
  }
  if (v146 < 1)
    return v148;
  if ((int)v12 < 1)
  {
    if (!v14 || v11 < 1)
      return v148;
    if (v11 < 4)
    {
      do
      {
        v61 = a1;
        if (v11 != 1)
        {
          v14[1] = a1[v13];
          if (v11 != 2)
            v14[2] = a1[2 * v13];
        }
        a1 += v15;
        --v146;
      }
      while (v146);
      *v14 = *v61;
      return v148;
    }
    v116 = 0;
    v117 = 8 * v13;
    while (1)
    {
      if (v13 == 1)
      {
        v118 = 0;
        do
        {
          v119 = *(_OWORD *)&a1[v118 / 8 + 2];
          v120 = &v14[v118 / 8];
          *(_OWORD *)v120 = *(_OWORD *)&a1[v118 / 8];
          *((_OWORD *)v120 + 1) = v119;
          v118 += 32;
        }
        while (((8 * v11) & 0x7FFFFFFE0) != v118);
        v121 = v11 & 0xFFFFFFFC;
        if (v121 == v11)
          goto LABEL_140;
      }
      else
      {
        v121 = 0;
      }
      v122 = v11 - v121;
      v123 = &v14[v121];
      v124 = v117 * v121;
      do
      {
        *v123++ = *(double *)((char *)a1 + v124);
        v124 += v117;
        --v122;
      }
      while (v122);
LABEL_140:
      ++v116;
      a1 += v15;
      if (v116 == v146)
        return v148;
    }
  }
  if (v11 <= 1)
  {
    if (v11 >= 1)
    {
      v56 = 0;
      v57 = 8 * v16;
      if ((a9 & 0x10) != 0)
      {
        do
        {
          v113 = a1;
          if (v14)
          {
            *v14 = *a1;
            v113 = v14;
          }
          v114 = 0;
          v115 = a3;
          do
          {
            v9[v114 / 8] = v9[v114 / 8] + *v113 * *v115 + 0.0;
            v114 += 8;
            v115 += v17;
          }
          while (v57 != v114);
          ++v56;
          a1 += v15;
          v9 += v145;
        }
        while (v56 != v146);
      }
      else
      {
        do
        {
          v58 = a1;
          if (v14)
          {
            *v14 = *a1;
            v58 = v14;
          }
          v59 = 0;
          v60 = a3;
          do
          {
            v9[v59 / 8] = *v58 * *v60 + 0.0 + 0.0;
            v59 += 8;
            v60 += v17;
          }
          while (v57 != v59);
          ++v56;
          a1 += v15;
          v9 += v145;
        }
        while (v56 != v146);
      }
      return v148;
    }
    if ((a9 & 0x10) == 0)
    {
      v112 = 8 * v16;
      if (v14)
      {
        do
        {
          bzero(v9, v112);
          v9 += v145;
          --v146;
        }
        while (v146);
      }
      else
      {
        do
        {
          bzero(v9, v112);
          v9 += v145;
          --v146;
        }
        while (v146);
      }
      return v148;
    }
    v126 = v12 & 0xFFFFFFFC;
    if (v14)
    {
      if (v12 >= 4)
      {
        for (i = 0; i != v146; ++i)
        {
          v134 = 0;
          do
          {
            v135 = (float64x2_t *)&v9[v134 / 8];
            v136 = vaddq_f64(*(float64x2_t *)&v9[v134 / 8 + 2], (float64x2_t)0);
            *v135 = vaddq_f64(*(float64x2_t *)&v9[v134 / 8], (float64x2_t)0);
            v135[1] = v136;
            v134 += 32;
          }
          while (((8 * v16) & 0x7FFFFFFE0) != v134);
          if (v126 != v16)
          {
            v137 = v12 & 0xFFFFFFFC;
            do
            {
              v9[v137] = v9[v137] + 0.0;
              ++v137;
            }
            while (v16 != v137);
          }
          v9 += v145;
        }
      }
      else
      {
        v127 = a5 + 2;
        do
        {
          *(v127 - 2) = *(v127 - 2) + 0.0;
          if ((_DWORD)v12 != 1)
          {
            *(v127 - 1) = *(v127 - 1) + 0.0;
            if ((_DWORD)v12 != 2)
              *v127 = *v127 + 0.0;
          }
          v127 += v145;
          --v146;
        }
        while (v146);
      }
      return v148;
    }
    v128 = 0;
    while (1)
    {
      if (v12 >= 4)
      {
        v130 = 0;
        do
        {
          v131 = (float64x2_t *)&v9[v130 / 8];
          v132 = vaddq_f64(*(float64x2_t *)&v9[v130 / 8 + 2], (float64x2_t)0);
          *v131 = vaddq_f64(*(float64x2_t *)&v9[v130 / 8], (float64x2_t)0);
          v131[1] = v132;
          v130 += 32;
        }
        while (((8 * v16) & 0x7FFFFFFE0) != v130);
        v129 = v12 & 0xFFFFFFFC;
        if (v126 == v16)
          goto LABEL_162;
      }
      else
      {
        v129 = 0;
      }
      do
      {
        v9[v129] = v9[v129] + 0.0;
        ++v129;
      }
      while (v16 != v129);
LABEL_162:
      ++v128;
      v9 += v145;
      if (v128 == v146)
        return v148;
    }
  }
  v62 = 0;
  v63 = (v11 - 2);
  v64 = (v63 & 0xFFFFFFFE) + 2;
  v65 = (v63 & 0xFFFFFFFE) + 3;
  if (v11 > v65)
    v65 = v11;
  v66 = v65 - (v63 & 0xFFFFFFFE) - 3;
  v67 = (v63 >> 1) + 1;
  v68 = v67 & 0xFFFFFFFC;
  v69 = (v66 + 1) & 0x1FFFFFFFCLL;
  v70 = 8 * v15;
  v71 = 8 * v13;
  v73 = v11 < 4 || v13 != 1;
  v143 = v73;
  v74 = 8 * v17;
  while (2)
  {
    v75 = a1;
    if (!v14)
      goto LABEL_97;
    if (v143)
    {
      v76 = 0;
    }
    else
    {
      v77 = 0;
      do
      {
        v78 = *(_OWORD *)&a1[v77 / 8 + 2];
        v79 = &v14[v77 / 8];
        *(_OWORD *)v79 = *(_OWORD *)&a1[v77 / 8];
        *((_OWORD *)v79 + 1) = v78;
        v77 += 32;
      }
      while (((8 * v11) & 0x7FFFFFFE0) != v77);
      v76 = v11 & 0xFFFFFFFC;
      v75 = v14;
      if (v76 == v11)
        goto LABEL_97;
    }
    v80 = v71 * v76;
    do
    {
      v14[v76++] = *(double *)((char *)a1 + v80);
      v80 += v71;
    }
    while (v11 != v76);
    v75 = v14;
LABEL_97:
    if (v64 < v11)
    {
      v81 = 0;
      v82 = a3;
      while (1)
      {
        v83 = 0.0;
        v84 = 0.0;
        if ((a9 & 0x10) != 0)
          v84 = v9[v81];
        if (v63 < 6)
          break;
        v86 = 0;
        v87 = v67 & 0xFFFFFFFC;
        do
        {
          v88 = &v75[v86];
          v149 = vld2q_f64(v88);
          v88 += 4;
          v151 = vld2q_f64(v88);
          v89 = &v82[v86];
          v153 = vld2q_f64(v89);
          v89 += 4;
          v155 = vld2q_f64(v89);
          v90 = vmulq_f64(v149.val[0], v153.val[0]);
          v91 = vmulq_f64(v151.val[0], v155.val[0]);
          v149.val[0] = vmulq_f64(v149.val[1], v153.val[1]);
          v151.val[0] = vmulq_f64(v151.val[1], v155.val[1]);
          v83 = v83 + v149.val[0].f64[0] + v149.val[0].f64[1] + v151.val[0].f64[0] + v151.val[0].f64[1];
          v84 = v84 + v90.f64[0] + v90.f64[1] + v91.f64[0] + v91.f64[1];
          v86 += 8;
          v87 -= 4;
        }
        while (v87);
        v85 = 2 * (v67 & 0xFFFFFFFC);
        if (v67 != v68)
          goto LABEL_107;
LABEL_109:
        if (v66 >= 3)
        {
          v95 = (v63 & 0xFFFFFFFE) + 2;
          v96 = (v66 + 1) & 0x1FFFFFFFCLL;
          v94 = v147;
          do
          {
            v97 = vmulq_f64(*(float64x2_t *)&v75[v95], *(float64x2_t *)&v82[v95]);
            v98 = vmulq_f64(*(float64x2_t *)&v75[v95 + 2], *(float64x2_t *)&v82[v95 + 2]);
            v84 = v84 + v97.f64[0] + v97.f64[1] + v98.f64[0] + v98.f64[1];
            v95 += 4;
            v96 -= 4;
          }
          while (v96);
          v93 = v69 + v64;
          if (v66 + 1 == v69)
            goto LABEL_99;
        }
        else
        {
          v93 = (v63 & 0xFFFFFFFE) + 2;
          v94 = v147;
        }
        v99 = v93;
        do
        {
          v84 = v84 + v75[v99] * v82[v99];
          LODWORD(v93) = v93 + 1;
          ++v99;
        }
        while (v11 > (int)v93);
LABEL_99:
        v9[v81++] = v83 + v84;
        v82 = (double *)((char *)v82 + v74);
        if (v81 == v94)
          goto LABEL_87;
      }
      v85 = 0;
LABEL_107:
      v92 = v85;
      do
      {
        v84 = v84 + v75[v92] * v82[v92];
        v83 = v83 + v75[v92 + 1] * v82[v92 + 1];
        v85 += 2;
        v92 += 2;
      }
      while (v85 <= v63);
      goto LABEL_109;
    }
    v100 = 0;
    v101 = a3;
    do
    {
      v102 = 0.0;
      v103 = 0.0;
      if ((a9 & 0x10) != 0)
        v103 = v9[v100];
      if (v63 < 6)
      {
        v104 = 0;
LABEL_126:
        v111 = v104;
        do
        {
          v103 = v103 + v75[v111] * v101[v111];
          v102 = v102 + v75[v111 + 1] * v101[v111 + 1];
          v104 += 2;
          v111 += 2;
        }
        while (v104 <= v63);
        goto LABEL_118;
      }
      v105 = 0;
      v106 = v67 & 0xFFFFFFFC;
      do
      {
        v107 = &v75[v105];
        v150 = vld2q_f64(v107);
        v107 += 4;
        v152 = vld2q_f64(v107);
        v108 = &v101[v105];
        v154 = vld2q_f64(v108);
        v108 += 4;
        v156 = vld2q_f64(v108);
        v109 = vmulq_f64(v150.val[0], v154.val[0]);
        v110 = vmulq_f64(v152.val[0], v156.val[0]);
        v150.val[0] = vmulq_f64(v150.val[1], v154.val[1]);
        v152.val[0] = vmulq_f64(v152.val[1], v156.val[1]);
        v102 = v102 + v150.val[0].f64[0] + v150.val[0].f64[1] + v152.val[0].f64[0] + v152.val[0].f64[1];
        v103 = v103 + v109.f64[0] + v109.f64[1] + v110.f64[0] + v110.f64[1];
        v105 += 8;
        v106 -= 4;
      }
      while (v106);
      v104 = 2 * (v67 & 0xFFFFFFFC);
      if (v67 != v68)
        goto LABEL_126;
LABEL_118:
      v9[v100++] = v102 + v103;
      v101 = (double *)((char *)v101 + v74);
    }
    while (v100 != v147);
LABEL_87:
    ++v62;
    a1 = (double *)((char *)a1 + v70);
    v9 += v145;
    if (v62 != v146)
      continue;
    return v148;
  }
}

void sub_100246548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (a22 != v22)
  {
    if (a22)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

double *sub_100246578(double *result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unsigned int *a7, char a8, double a9, double a10)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double *v20;
  double *v21;
  double v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  double *v38;
  double *v39;
  double *v40;
  double v41;
  double *v42;
  double v43;
  double *v44;
  double *v45;
  double v46;
  double *v47;
  double v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  const double *v55;
  double *v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double v62;
  unint64_t v63;
  double v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  uint64_t v70;
  unint64_t v71;
  float64x2x4_t v72;
  float64x2x4_t v73;

  v10 = a7[1];
  v11 = a2 >> 3;
  if ((a8 & 4) != 0)
    v12 = 1;
  else
    v12 = a2 >> 3;
  if ((a8 & 4) == 0)
    v11 = 1;
  if (result)
    v13 = v12;
  else
    v13 = 0;
  if (result)
    v14 = v11;
  else
    v14 = 0;
  if (!v10)
    return result;
  v15 = a3;
  v16 = *a7;
  v17 = a4 >> 3;
  v18 = a6 >> 3;
  v19 = (v16 - 4);
  if ((int)v16 >= 4)
  {
    v24 = 0;
    v25 = a6 & 0xFFFFFFFFFFFFFFF8;
    v26 = a4 & 0xFFFFFFFFFFFFFFF8;
    v27 = ((8 * v19) & 0x7FFFFFFE0) + 32;
    v70 = (v19 >> 2) + 1;
    v71 = v16 - (v16 & 0xFFFFFFFC);
    v28 = 8 * v13;
    v29 = 4 * v14;
    v30 = 8 * v18;
    v31 = 8 * v17;
    v32 = v14;
    v33 = &result[v29];
    v34 = a5 + 16;
    v35 = a5;
    while (result)
    {
      v36 = 0;
      v37 = 0;
      v38 = v33;
      v39 = result;
      do
      {
        v40 = v38;
        v41 = *(double *)(a3 + v36) * a9 + a10 * *v39;
        v42 = &v39[v32];
        v43 = *(double *)(a3 + v36 + 8) * a9 + a10 * *v42;
        v44 = (double *)(v35 + v36);
        *v44 = v41;
        v44[1] = v43;
        v45 = &v42[v32];
        v46 = *(double *)(a3 + v36 + 16) * a9 + a10 * *v45;
        v47 = &v45[v32];
        v48 = *(double *)(a3 + v36 + 24) * a9 + a10 * *v47;
        v37 += 4;
        v44[2] = v46;
        v44[3] = v48;
        v36 += 32;
        v39 = &v47[v32];
        v38 = (double *)((char *)v38 + v29 * 8);
      }
      while (v37 <= v19);
      if ((int)v16 > (int)v37)
      {
        v49 = v37 & 0xFFFFFFFC;
        do
        {
          *(double *)(v35 + 8 * v49) = *(double *)(a3 + 8 * v49) * a9 + *v40 * a10;
          ++v49;
          v40 = (double *)((char *)v40 + v32 * 8);
        }
        while (v49 != v16);
      }
LABEL_26:
      result = (double *)((char *)result + v28);
      a3 += v31;
      v35 += v30;
      ++v24;
      v33 = (double *)((char *)v33 + v28);
      v34 += v30;
      if (!--v10)
        return result;
    }
    v50 = a5 + v25 * v24;
    v51 = v15 + v26 * v24;
    if (v19 >= 4 && (v35 < v51 + v27 ? (v52 = a3 >= v50 + v27) : (v52 = 1), v52))
    {
      v53 = 0;
      v54 = v70 & 0x7FFFFFFE;
      do
      {
        v55 = (const double *)(a3 + v53);
        v72 = vld4q_f64(v55);
        v73.val[0] = vmulq_n_f64(v72.val[0], a9);
        v73.val[1] = vmulq_n_f64(v72.val[1], a9);
        v73.val[2] = vmulq_n_f64(v72.val[2], a9);
        v73.val[3] = vmulq_n_f64(v72.val[3], a9);
        v56 = (double *)(v35 + v53);
        vst4q_f64(v56, v73);
        v53 += 64;
        v54 -= 2;
      }
      while (v54);
      v57 = v70 & 0x7FFFFFFE;
      v58 = 4 * (v70 & 0x7FFFFFFE);
      if (v70 == (v70 & 0x7FFFFFFE))
      {
LABEL_47:
        if ((int)v16 > (int)v58)
        {
          v65 = v58 & 0xFFFFFFFC;
          if (v71 < 8)
            goto LABEL_57;
          if (v50 - v51 < 0x20)
            goto LABEL_57;
          v66 = v71 - (v16 & 3);
          v65 += v66;
          v67 = 32 * (v58 >> 2);
          do
          {
            v68 = vmulq_n_f64(*(float64x2_t *)(a3 + v67 + 16), a9);
            v69 = (float64x2_t *)(v35 + v67);
            *v69 = vmulq_n_f64(*(float64x2_t *)(a3 + v67), a9);
            v69[1] = v68;
            v67 += 32;
            v66 -= 4;
          }
          while (v66);
          if ((v16 & 3) != 0)
          {
LABEL_57:
            do
            {
              *(double *)(v35 + 8 * v65) = *(double *)(a3 + 8 * v65) * a9;
              ++v65;
            }
            while (v16 != v65);
          }
        }
        goto LABEL_26;
      }
    }
    else
    {
      v57 = 0;
      v58 = 0;
    }
    v59 = 8 * v58;
    v60 = v34;
    v61 = a3;
    do
    {
      v62 = *(double *)(v61 + v59 + 8) * a9;
      v63 = v60 + v59;
      *(double *)(v63 - 16) = *(double *)(v61 + v59) * a9;
      *(double *)(v63 - 8) = v62;
      v64 = *(double *)(v61 + v59 + 24);
      *(double *)(v60 + v59) = *(double *)(v61 + v59 + 16) * a9;
      v58 += 4;
      ++v57;
      *(double *)(v63 + 8) = v64 * a9;
      v61 += 32;
      v60 += 32;
    }
    while (v58 <= v19);
    goto LABEL_47;
  }
  if ((int)v16 >= 1)
  {
    v20 = (double *)(a3 + 16);
    v21 = (double *)(a5 + 8);
    do
    {
      v22 = *(v20 - 2) * a9;
      if (result)
      {
        *(v21 - 1) = v22 + *result * a10;
        if ((_DWORD)v16 == 1)
          goto LABEL_17;
        *v21 = *(v20 - 1) * a9 + result[v14] * a10;
        if ((_DWORD)v16 == 2)
          goto LABEL_17;
        v23 = *v20 * a9 + result[2 * v14] * a10;
      }
      else
      {
        *(v21 - 1) = v22;
        if ((_DWORD)v16 == 1)
          goto LABEL_17;
        *v21 = *(v20 - 1) * a9;
        if ((_DWORD)v16 == 2)
          goto LABEL_17;
        v23 = *v20 * a9;
      }
      v21[1] = v23;
LABEL_17:
      result += v13;
      v20 += v17;
      v21 += v18;
      --v10;
    }
    while (v10);
  }
  return result;
}

_QWORD *sub_100246964(_QWORD *a1, unint64_t a2, float32x2_t *a3, unint64_t a4, float32x2_t *a5, unint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, int *a11, unsigned int *a12, char a13)
{
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  double v34;
  unint64_t v35;
  float32x2_t *v36;
  double v37;
  float32x2_t *v38;
  _QWORD *v39;
  int v40;
  double v41;
  int v42;
  BOOL v43;
  char v44;
  BOOL v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  float32x2_t *v50;
  _QWORD *v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  float32x2_t *v57;
  float32x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  float *v61;
  float32x2_t *v62;
  uint64_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  uint64_t v77;
  float64x2_t v78;
  float *v79;
  float32x2_t *v80;
  float64x2_t v81;
  float32x2_t *v82;
  float *v83;
  uint64_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  unint64_t v88;
  float32x2_t *v89;
  int v90;
  int v91;
  double v92;
  double v93;
  _QWORD *v94;
  float32x2_t *v95;
  int v96;
  BOOL v97;
  char v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  _OWORD *v109;
  __int128 v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  float32x2_t *v114;
  float *v115;
  float64x2_t v116;
  uint64_t v117;
  uint64_t v118;
  float64x2_t *v119;
  float *v120;
  float64x2_t v121;
  float64x2_t v122;
  int8x16_t v123;
  int8x16_t v124;
  float64x2_t v125;
  float64x2_t v126;
  int8x16_t v127;
  float64x2_t v128;
  float64x2_t v129;
  int8x16_t v130;
  float64x2_t v131;
  uint64_t v132;
  uint64_t v133;
  float64x2_t v134;
  float64x2_t v135;
  uint64_t v136;
  double *v137;
  unint64_t v138;
  const float *v139;
  float64x2_t v140;
  float64x2_t v141;
  uint64_t v142;
  uint64_t v143;
  float64x2_t *v144;
  float64x2_t v145;
  uint64_t v146;
  float32x2_t *v147;
  uint64_t v148;
  uint64_t v149;
  const double *v150;
  const double *v151;
  float *v152;
  BOOL v153;
  char v154;
  int v155;
  uint64_t v156;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  _OWORD *v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  float32x2_t *v169;
  float32x2_t *v170;
  float v171;
  float *v172;
  float v173;
  int v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  unint64_t v179;
  uint64_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  double v194;
  uint64_t v195;
  uint64_t v196;
  const float *v197;
  const float *v198;
  float64x2_t v199;
  float64x2_t v200;
  const float *v201;
  const float *v202;
  double v203;
  double v204;
  double v205;
  double v206;
  uint64_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t i;
  uint64_t v219;
  float *v220;
  double v221;
  double v222;
  float64x2_t v223;
  int64_t v224;
  float32x2_t *v225;
  uint64_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  _QWORD *result;
  int v238;
  uint64_t v239;
  unint64_t v240;
  _OWORD *v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char v253;
  uint64_t v255;
  int v257;
  float32x2_t *v258;
  unint64_t v259;
  float32x2_t *v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v265;
  uint64_t v266;
  _QWORD *v268;
  _QWORD v269[4];
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  _QWORD v273[137];
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float32x2x2_t v278;
  float64x2x2_t v279;
  float64x2x2_t v280;
  float64x2x2_t v281;
  float32x4x2_t v282;
  float64x2x2_t v283;

  v19 = a11[1];
  v257 = *a11;
  v20 = *a12;
  v255 = a12[1];
  v261 = *a12;
  v268 = v273;
  bzero(v273, 0x440uLL);
  v21 = a5;
  v271 = v273;
  v272 = 136;
  v22 = a2 >> 3;
  v23 = a4;
  v24 = a4 >> 3;
  v25 = a6 >> 3;
  if ((a13 & 4) != 0)
    v26 = a6 >> 3;
  else
    v26 = 1;
  if ((a13 & 4) != 0)
    v25 = 1;
  if (a5)
    v27 = v26;
  else
    v27 = 0;
  if (!a5)
    v25 = 0;
  v262 = v25;
  v265 = a8 >> 3;
  if ((a13 & 1) == 0)
  {
    v28 = 1;
    v29 = a2 >> 3;
    v30 = a9;
    v31 = v257;
    if (v257 == 1)
      goto LABEL_13;
    goto LABEL_28;
  }
  v29 = 1;
  if (a2 < 0x10)
  {
    v28 = a2 >> 3;
    v31 = v19;
    v30 = a9;
    if ((_DWORD)v19 != 1)
      goto LABEL_28;
LABEL_13:
    v252 = a4 >> 3;
    v32 = a2 >> 3;
    v258 = v21;
    bzero(v269, 0x440uLL);
    if (a2 < 0x10)
    {
      v33 = v255;
      v36 = v258;
      v35 = (int)v20;
      v37 = a10;
      v34 = a9;
      v38 = a3;
      if (v23 < 0x10)
        goto LABEL_206;
    }
    else
    {
      v33 = v255;
      v34 = a9;
      v35 = (int)v20;
      if ((int)v19 >= 2)
      {
        v272 = (int)v255;
        if (v255 >= 0x89)
          operator new[]();
        v36 = v258;
        v37 = a10;
        v38 = a3;
        if ((int)v255 >= 1)
        {
          if ((_DWORD)v255 == 1)
          {
            v213 = 0;
LABEL_197:
            v217 = &a1[v213 * v32];
            do
            {
              v273[v213++] = *v217;
              v217 += v32;
            }
            while (v255 != v213);
            goto LABEL_199;
          }
          v212 = 0;
          v213 = v255 & 0xFFFFFFFE;
          v214 = a1;
          do
          {
            v215 = &v273[v212];
            v216 = v214[v32];
            *v215 = *v214;
            v215[1] = v216;
            v212 += 2;
            v214 += 2 * v32;
          }
          while (v213 != v212);
          if (v213 != v255)
            goto LABEL_197;
        }
LABEL_199:
        a1 = v273;
        if (v23 >= 0x10)
          goto LABEL_200;
LABEL_206:
        if ((int)v33 < 1)
          goto LABEL_222;
        v219 = 0;
        while (1)
        {
          v220 = (float *)&a1[v219];
          v221 = *v220 * v34;
          v222 = v220[1] * v34;
          v223.f64[0] = -v222;
          if ((int)v35 >= 2)
          {
            v226 = 0;
            v224 = 0;
            v227 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v221, 0);
            v228.f64[0] = -v222;
            v228.f64[1] = v220[1] * v34;
            v225 = v36;
            do
            {
              v230 = vcvtq_f64_f32(v38[v226]);
              v231 = vmlaq_f64(vmulq_f64(v228, (float64x2_t)vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL)), v230, v227);
              v232 = vcvtq_f64_f32(v38[v226 + 1]);
              v229 = vmlaq_f64(vmulq_f64(v228, (float64x2_t)vextq_s8((int8x16_t)v232, (int8x16_t)v232, 8uLL)), v232, v227);
              if (v225)
              {
                *(float32x2_t *)(a7 + v226 * 8) = vcvt_f32_f64(vaddq_f64(v231, vmulq_n_f64(vcvtq_f64_f32(*v225), v37)));
                v229 = vaddq_f64(v229, vmulq_n_f64(vcvtq_f64_f32(v225[v27]), v37));
              }
              else
              {
                *(float32x2_t *)(a7 + v226 * 8) = vcvt_f32_f64(v231);
              }
              *(float32x2_t *)(a7 + v226 * 8 + 8) = vcvt_f32_f64(v229);
              v224 += 2;
              v225 += 2 * v27;
              v226 += 2;
            }
            while (v224 <= (uint64_t)(v35 - 2));
            v224 = v224;
            if ((int)v224 < (int)v20)
            {
LABEL_218:
              v233 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v221, 0);
              v223.f64[1] = v222;
              do
              {
                v234 = vcvtq_f64_f32(v38[v224]);
                v235 = vmlaq_f64(vmulq_f64(v223, (float64x2_t)vextq_s8((int8x16_t)v234, (int8x16_t)v234, 8uLL)), v234, v233);
                if (v225)
                  v235 = vaddq_f64(v235, vmulq_n_f64(vcvtq_f64_f32(*v225), v37));
                *(float32x2_t *)(a7 + 8 * v224++) = vcvt_f32_f64(v235);
                v225 += v27;
              }
              while (v20 != v224);
            }
          }
          else
          {
            v224 = 0;
            v225 = v36;
            if ((int)v20 > 0)
              goto LABEL_218;
          }
          ++v219;
          v36 += v262;
          a7 += 8 * v265;
          if (v219 == v33)
            goto LABEL_222;
        }
      }
      v36 = v258;
      v37 = a10;
      v38 = a3;
      if (v23 < 0x10)
        goto LABEL_206;
    }
LABEL_200:
    if (v35 > 0x88)
      operator new[]();
    if ((int)v35 >= 1)
    {
      for (i = 0; i != v35; ++i)
      {
        v269[i] = *v38;
        v38 += v252;
      }
    }
    v38 = (float32x2_t *)v269;
    goto LABEL_206;
  }
  v30 = a9;
  v39 = v273;
  if ((int)v19 >= 2)
  {
    v272 = v19;
    if (v19 >= 0x89)
      operator new[]();
    v29 = 1;
    v40 = v255;
    v41 = a10;
    if ((a13 & 2) == 0)
      goto LABEL_29;
    goto LABEL_139;
  }
  v28 = a2 >> 3;
  v31 = v19;
  if ((_DWORD)v19 == 1)
    goto LABEL_13;
LABEL_28:
  v39 = 0;
  LODWORD(v19) = v31;
  v22 = v28;
  v40 = v255;
  v41 = a10;
  v268 = 0;
  if ((a13 & 2) == 0)
  {
LABEL_29:
    if ((unint64_t)(8 * (int)v20) <= 0x640)
    {
      if (v40 < 1)
        goto LABEL_222;
      v42 = 0;
      if (v39)
        v43 = (int)v19 < 1;
      else
        v43 = 1;
      v44 = v43;
      v45 = v19 >= 4 && v22 == 1;
      v46 = 8 * v29;
      v47 = !v45;
      v48 = 8 * v22;
      v49 = 8 * v24;
LABEL_45:
      v50 = v21;
      if (v39)
        v51 = v39;
      else
        v51 = a1;
      if ((v44 & 1) == 0)
      {
        v52 = 0;
        if ((v47 & 1) != 0)
          goto LABEL_52;
        do
        {
          v53 = (_OWORD *)((char *)v268 + v52);
          v54 = *(_OWORD *)((char *)a1 + v52 + 16);
          *v53 = *(_OWORD *)((char *)a1 + v52);
          v53[1] = v54;
          v51 = v268;
          v52 += 32;
        }
        while (((8 * v19) & 0x7FFFFFFE0) != v52);
        v52 = v19 & 0xFFFFFFFC;
        if (v52 != v19)
        {
LABEL_52:
          v55 = v48 * v52;
          do
          {
            v268[v52++] = *(_QWORD *)((char *)a1 + v55);
            v55 += v48;
          }
          while (v19 != v52);
          v51 = v268;
        }
      }
      if ((int)v20 < 4)
      {
        v56 = 0;
        v57 = v50;
        if ((int)v20 > 0)
          goto LABEL_69;
        goto LABEL_44;
      }
      v56 = 0;
      v58 = a3 + 2;
      v57 = v50;
      while (1)
      {
        v60 = 0uLL;
        if ((int)v19 < 1)
        {
          v66 = 0uLL;
          v76 = vmulq_n_f64((float64x2_t)0, v30);
          v77 = 8 * v56;
          v78 = v76;
          if (v57)
            goto LABEL_67;
        }
        else
        {
          v61 = (float *)v51 + 1;
          v62 = v58;
          v63 = v19;
          v64 = 0uLL;
          v65 = 0uLL;
          v66 = 0uLL;
          do
          {
            v67 = *(v61 - 1);
            v68.f64[0] = -*v61;
            v69 = vcvtq_f64_f32(v62[-2]);
            v68.f64[1] = *v61;
            v70 = vmlaq_n_f64(vmulq_f64(v68, (float64x2_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL)), v69, v67);
            v71 = vcvtq_f64_f32(v62[-1]);
            v64 = vaddq_f64(v64, v70);
            v72 = vmlaq_n_f64(vmulq_f64(v68, (float64x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL)), v71, v67);
            v73 = vcvtq_f64_f32(*v62);
            v65 = vaddq_f64(v65, v72);
            v74 = vmlaq_n_f64(vmulq_f64(v68, (float64x2_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL)), v73, v67);
            v75 = vcvtq_f64_f32(v62[1]);
            v66 = vaddq_f64(v66, v74);
            v60 = vaddq_f64(v60, vmlaq_n_f64(vmulq_f64(v68, (float64x2_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL)), v75, v67));
            v62 = (float32x2_t *)((char *)v62 + v49);
            v61 += 2;
            --v63;
          }
          while (v63);
          v76 = vmulq_n_f64(v64, v30);
          v77 = 8 * v56;
          v78 = vmulq_n_f64(v65, v30);
          if (v57)
          {
LABEL_67:
            *(float32x2_t *)(a7 + v77) = vcvt_f32_f64(vaddq_f64(v76, vmulq_n_f64(vcvtq_f64_f32(*v57), v41)));
            *(float32x2_t *)(a7 + (v77 | 8)) = vcvt_f32_f64(vaddq_f64(v78, vmulq_n_f64(vcvtq_f64_f32(v57[v27]), v41)));
            *(float32x2_t *)(a7 + (v77 | 0x10)) = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(v66, v30), vmulq_n_f64(vcvtq_f64_f32(v57[2 * v27]), v41)));
            v59 = vaddq_f64(vmulq_n_f64(v60, v30), vmulq_n_f64(vcvtq_f64_f32(v57[3 * v27]), v41));
            goto LABEL_60;
          }
        }
        *(float32x2_t *)(a7 + v77) = vcvt_f32_f64(v76);
        *(float32x2_t *)(a7 + (v77 | 8)) = vcvt_f32_f64(v78);
        *(float32x2_t *)(a7 + (v77 | 0x10)) = vcvt_f32_f64(vmulq_n_f64(v66, v30));
        v59 = vmulq_n_f64(v60, v30);
LABEL_60:
        *(float32x2_t *)(a7 + (v77 | 0x18)) = vcvt_f32_f64(v59);
        v56 += 4;
        v57 += 4 * v27;
        v58 += 4;
        if (v56 > (int)v20 - 4)
        {
          v56 = v56;
          if ((int)v56 < (int)v20)
          {
LABEL_69:
            v79 = (float *)v51 + 1;
            v80 = &a3[v56];
            do
            {
              v81 = 0uLL;
              if ((int)v19 >= 1)
              {
                v82 = v80;
                v83 = v79;
                v84 = v19;
                do
                {
                  v85.f64[0] = -*v83;
                  v86 = vcvtq_f64_f32(*v82);
                  v85.f64[1] = *v83;
                  v81 = vaddq_f64(v81, vmlaq_n_f64(vmulq_f64(v85, (float64x2_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL)), v86, *(v83 - 1)));
                  v83 += 2;
                  v82 = (float32x2_t *)((char *)v82 + v49);
                  --v84;
                }
                while (v84);
              }
              v87 = vmulq_n_f64(v81, v30);
              if (v57)
                v87 = vaddq_f64(v87, vmulq_n_f64(vcvtq_f64_f32(*v57), v41));
              *(float32x2_t *)(a7 + 8 * v56++) = vcvt_f32_f64(v87);
              v57 += v27;
              ++v80;
            }
            while (v56 != v20);
          }
LABEL_44:
          ++v42;
          a1 = (_QWORD *)((char *)a1 + v46);
          v21 = &v50[v262];
          a7 += 8 * v265;
          v39 = v268;
          if (v42 == v40)
            goto LABEL_222;
          goto LABEL_45;
        }
      }
    }
    v88 = a4 >> 3;
    v259 = v22;
    v89 = v21;
    bzero(v269, 0x480uLL);
    v90 = v261;
    if (v261 >= 0x49)
      operator new[]();
    v91 = v255;
    v92 = a10;
    v93 = a9;
    v94 = v268;
    if ((int)v255 < 1)
      goto LABEL_222;
    v95 = v89;
    v96 = 0;
    if (v268)
      v97 = (int)v19 < 1;
    else
      v97 = 1;
    v98 = v97;
    v253 = v98;
    v251 = 8 * v29;
    v99 = 8 * v19;
    v100 = v19 >= 4 && v259 == 1;
    v247 = 8 * v259;
    v101 = 8 * v88;
    v102 = !v100;
    v248 = v102;
    v103 = v99 & 0x7FFFFFFE0;
    v250 = v99 & 0x7FFFFFFE0;
    v263 = v262;
    v266 = 8 * v265;
    v104 = 8 * v27;
    v105 = (8 * v20) & 0x7FFFFFFE0;
    v249 = v104;
    while (1)
    {
      if (v94)
        v106 = v94;
      else
        v106 = a1;
      v260 = v95;
      if ((v253 & 1) == 0)
      {
        if ((v248 & 1) != 0)
        {
          v107 = 0;
LABEL_102:
          v111 = v247 * v107;
          do
          {
            v94[v107++] = *(_QWORD *)((char *)a1 + v111);
            v111 += v247;
          }
          while (v19 != v107);
          v106 = v94;
          goto LABEL_105;
        }
        v108 = 0;
        do
        {
          v109 = &v94[v108 / 8];
          v110 = *(_OWORD *)&a1[v108 / 8 + 2];
          *v109 = *(_OWORD *)&a1[v108 / 8];
          v109[1] = v110;
          v108 += 32;
        }
        while (v103 != v108);
        v107 = v19 & 0xFFFFFFFC;
        v106 = v94;
        if (v107 != v19)
          goto LABEL_102;
      }
LABEL_105:
      if (v90 >= 1)
      {
        v112 = v96;
        bzero(v269, 16 * v20);
        v104 = v249;
        v103 = v250;
        v96 = v112;
        v105 = (8 * v20) & 0x7FFFFFFE0;
        v90 = v20;
        v94 = v268;
        v93 = a9;
        v92 = a10;
        v91 = v255;
      }
      if ((int)v19 >= 1)
      {
        v113 = 0;
        v114 = a3;
        v115 = (float *)&a3[2];
        do
        {
          v116 = vcvtq_f64_f32((float32x2_t)v106[v113]);
          if ((int)v20 >= 4)
          {
            v118 = 0;
            v119 = (float64x2_t *)&v270;
            v120 = v115;
            do
            {
              v121.f64[0] = *(v120 - 3);
              v122.f64[0] = *(v120 - 1);
              v121.f64[1] = -v121.f64[0];
              v123 = (int8x16_t)vmulq_f64(v121, v116);
              v122.f64[1] = -v122.f64[0];
              v124 = (int8x16_t)vmulq_f64(v122, v116);
              v125.f64[0] = v120[1];
              v126.f64[0] = v120[3];
              v125.f64[1] = -v125.f64[0];
              v127 = (int8x16_t)vmulq_f64(v125, v116);
              v128 = vaddq_f64(v119[-1], vmlaq_n_f64((float64x2_t)vextq_s8(v124, v124, 8uLL), v116, *(v120 - 2)));
              v126.f64[1] = -v126.f64[0];
              v129 = vaddq_f64(*v119, vmlaq_n_f64((float64x2_t)vextq_s8(v127, v127, 8uLL), v116, *v120));
              v130 = (int8x16_t)vmulq_f64(v126, v116);
              v131 = vaddq_f64(v119[1], vmlaq_n_f64((float64x2_t)vextq_s8(v130, v130, 8uLL), v116, v120[2]));
              v119[-2] = vaddq_f64(v119[-2], vmlaq_n_f64((float64x2_t)vextq_s8(v123, v123, 8uLL), v116, *(v120 - 4)));
              v119[-1] = v128;
              *v119 = v129;
              v119[1] = v131;
              v119 += 4;
              v118 += 4;
              v120 += 8;
            }
            while (v118 <= (int)v20 - 4);
            v117 = v118;
            if ((int)v118 >= v90)
              goto LABEL_109;
          }
          else
          {
            v117 = 0;
            if (v90 <= 0)
              goto LABEL_109;
          }
          v132 = v20 - v117;
          if ((unint64_t)(v20 - v117) >= 2)
          {
            v134 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v116, 1);
            v133 = (v132 & 0xFFFFFFFFFFFFFFFELL) + v117;
            v135 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v116.f64[0], 0);
            v136 = v117;
            v137 = (double *)&v269[2 * v117];
            v138 = v132 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v139 = (const float *)&v114[v136];
              v274 = (float64x2_t)vld2_f32(v139);
              v140 = vcvtq_f64_f32(*(float32x2_t *)&v274.f64[0]);
              v274 = vcvtq_f64_f32(*(float32x2_t *)&v274.f64[1]);
              *(float64x2_t *)((char *)&v274 + 8) = vmlaq_f64(vmulq_laneq_f64(vnegq_f64(v274), v116, 1), v135, v140);
              v274 = vmlaq_f64(vmulq_n_f64(v274, v116.f64[0]), v134, v140);
              v281 = vld2q_f64(v137);
              v283.val[0] = vaddq_f64(v281.val[0], *(float64x2_t *)((char *)&v274 + 8));
              v283.val[1] = vaddq_f64(v281.val[1], v274);
              vst2q_f64(v137, v283);
              v137 += 4;
              v136 += 2;
              v138 -= 2;
            }
            while (v138);
            if (v132 == (v132 & 0xFFFFFFFFFFFFFFFELL))
              goto LABEL_109;
          }
          else
          {
            v133 = v117;
          }
          v141 = (float64x2_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL);
          v142 = v20 - v133;
          v143 = v133;
          v144 = (float64x2_t *)&v269[2 * v133];
          do
          {
            v145.f64[0] = -v114[v143].f32[1];
            v145.f64[1] = v114[v143].f32[1];
            *v144 = vaddq_f64(*v144, vmlaq_n_f64(vmulq_f64(v141, v145), v116, v114[v143].f32[0]));
            ++v144;
            ++v143;
            --v142;
          }
          while (v142);
LABEL_109:
          ++v113;
          v115 = (float *)((char *)v115 + v101);
          v114 = (float32x2_t *)((char *)v114 + v101);
        }
        while (v113 != v19);
      }
      if (v260)
      {
        if (v90 >= 1)
        {
          v146 = 0;
          v147 = v260;
          do
          {
            *(float32x2_t *)(a7 + 8 * v146) = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v269[2 * v146], v93), vmulq_n_f64(vcvtq_f64_f32(*v147), v92)));
            ++v146;
            v147 = (float32x2_t *)((char *)v147 + v104);
          }
          while (v20 != v146);
        }
        goto LABEL_92;
      }
      if ((int)v20 >= 1)
      {
        if (v90 >= 4)
        {
          v149 = 0;
          v150 = (const double *)v269;
          do
          {
            v151 = v150;
            v279 = vld2q_f64(v151);
            v151 += 4;
            v280 = vld2q_f64(v151);
            v282.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v279.val[0], v93)), vmulq_n_f64(v280.val[0], v93));
            v282.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v279.val[1], v93)), vmulq_n_f64(v280.val[1], v93));
            v152 = (float *)(a7 + v149);
            vst2q_f32(v152, v282);
            v149 += 32;
            v150 += 8;
          }
          while (v105 != v149);
          v148 = v20 & 0xFFFFFFFC;
          if (v148 == v20)
            goto LABEL_92;
        }
        else
        {
          v148 = 0;
        }
        do
        {
          *(float32x2_t *)(a7 + 8 * v148) = vcvt_f32_f64(vmulq_n_f64(*(float64x2_t *)&v269[2 * v148], v93));
          ++v148;
        }
        while (v20 != v148);
      }
LABEL_92:
      ++v96;
      a1 = (_QWORD *)((char *)a1 + v251);
      v95 = &v260[v263];
      a7 += v266;
      if (v96 == v91)
        goto LABEL_222;
    }
  }
LABEL_139:
  if (v40 < 1)
    goto LABEL_222;
  if (v39)
    v153 = (int)v19 < 1;
  else
    v153 = 1;
  v154 = v153;
  if ((int)v20 < 1)
  {
    if ((v154 & 1) != 0)
      goto LABEL_222;
    if (v19 < 4)
    {
      do
      {
        v211 = a1;
        if ((_DWORD)v19 != 1)
        {
          v39[1] = a1[v22];
          if ((_DWORD)v19 != 2)
            v39[2] = a1[2 * v22];
        }
        a1 += v29;
        --v40;
      }
      while (v40);
      *v39 = *v211;
      goto LABEL_222;
    }
    v238 = 0;
    v239 = 8 * v22;
    while (1)
    {
      if (v22 == 1)
      {
        v240 = 0;
        do
        {
          v241 = &v39[v240 / 8];
          v242 = *(_OWORD *)&a1[v240 / 8 + 2];
          *v241 = *(_OWORD *)&a1[v240 / 8];
          v241[1] = v242;
          v240 += 32;
        }
        while (((8 * v19) & 0x7FFFFFFE0) != v240);
        v243 = v19 & 0xFFFFFFFC;
        if (v243 == v19)
          goto LABEL_229;
      }
      else
      {
        v243 = 0;
      }
      v244 = v19 - v243;
      v245 = &v39[v243];
      v246 = v239 * v243;
      do
      {
        *v245++ = *(_QWORD *)((char *)a1 + v246);
        v246 += v239;
        --v244;
      }
      while (v244);
LABEL_229:
      ++v238;
      a1 += v29;
      if (v238 == v40)
        goto LABEL_222;
    }
  }
  v155 = 0;
  v156 = 8 * v29;
  v158 = v19 < 4 || v22 != 1;
  v159 = 8 * v22;
  v160 = 8 * v24;
  while (2)
  {
    if (v39)
      v161 = v39;
    else
      v161 = a1;
    if ((v154 & 1) != 0)
      goto LABEL_167;
    if (v158)
    {
      v162 = 0;
    }
    else
    {
      v163 = 0;
      do
      {
        v164 = &v39[v163 / 8];
        v165 = *(_OWORD *)&a1[v163 / 8 + 2];
        *v164 = *(_OWORD *)&a1[v163 / 8];
        v164[1] = v165;
        v163 += 32;
      }
      while (((8 * v19) & 0x7FFFFFFE0) != v163);
      v162 = v19 & 0xFFFFFFFC;
      v161 = v39;
      if (v162 == v19)
        goto LABEL_167;
    }
    v166 = v159 * v162;
    do
    {
      v39[v162++] = *(_QWORD *)((char *)a1 + v166);
      v166 += v159;
    }
    while (v19 != v162);
    v161 = v39;
LABEL_167:
    v167 = 0;
    v168 = (char *)v161 + 28;
    v169 = a3;
    v170 = v21;
    do
    {
      if ((int)v19 >= 4)
      {
        v179 = 0;
        v180 = 0;
        v175 = 0uLL;
        v176 = 0uLL;
        v177 = 0uLL;
        v178 = 0uLL;
        do
        {
          v181.f64[0] = -*(float *)&v168[v179 - 24];
          v182.f64[0] = -*(float *)&v168[v179 - 16];
          v183.f64[0] = -*(float *)&v168[v179 - 8];
          v184 = vcvtq_f64_f32(v169[v179 / 8]);
          v181.f64[1] = *(float *)&v168[v179 - 24];
          v185 = vmulq_f64(v181, (float64x2_t)vextq_s8((int8x16_t)v184, (int8x16_t)v184, 8uLL));
          v181.f64[0] = -*(float *)&v168[v179];
          v186 = vcvtq_f64_f32(v169[v179 / 8 + 1]);
          v182.f64[1] = *(float *)&v168[v179 - 16];
          v178 = vaddq_f64(v178, vmlaq_n_f64(v185, v184, *(float *)&v161[v179 / 8]));
          v187 = vcvtq_f64_f32(v169[v179 / 8 + 2]);
          v183.f64[1] = *(float *)&v168[v179 - 8];
          v177 = vaddq_f64(v177, vmlaq_n_f64(vmulq_f64(v182, (float64x2_t)vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL)), v186, *(float *)&v168[v179 - 20]));
          v188 = vcvtq_f64_f32(v169[v179 / 8 + 3]);
          v181.f64[1] = *(float *)&v168[v179];
          v176 = vaddq_f64(v176, vmlaq_n_f64(vmulq_f64(v183, (float64x2_t)vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL)), v187, *(float *)&v168[v179 - 12]));
          v175 = vaddq_f64(v175, vmlaq_n_f64(vmulq_f64(v181, (float64x2_t)vextq_s8((int8x16_t)v188, (int8x16_t)v188, 8uLL)), v188, *(float *)&v168[v179 - 4]));
          v180 += 4;
          v179 += 32;
        }
        while (v180 <= (int)v19 - 4);
        v174 = ((v19 - 4) & 0xFFFFFFFC) + 4;
        if (v174 >= (int)v19)
          goto LABEL_182;
      }
      else
      {
        v174 = 0;
        v175 = 0uLL;
        v176 = 0uLL;
        v177 = 0uLL;
        v178 = 0uLL;
        if ((int)v19 <= 0)
          goto LABEL_182;
      }
      v189 = v174;
      v190 = (v19 + ~v174);
      if (v190 < 3)
      {
        v191 = v189;
LABEL_180:
        v207 = v191;
        do
        {
          v208.f64[0] = -*((float *)&v161[v207] + 1);
          v209 = vcvtq_f64_f32(v169[v207]);
          v208.f64[1] = *((float *)&v161[v207] + 1);
          v178 = vaddq_f64(v178, vmlaq_n_f64(vmulq_f64(v208, (float64x2_t)vextq_s8((int8x16_t)v209, (int8x16_t)v209, 8uLL)), v209, *(float *)&v161[v207]));
          LODWORD(v191) = v191 + 1;
          ++v207;
        }
        while ((int)v19 > (int)v191);
        goto LABEL_182;
      }
      v192 = v190 + 1;
      v193 = (v190 + 1) & 0x1FFFFFFFCLL;
      v191 = v193 + v189;
      v194 = v178.f64[1];
      v195 = 8 * v189 + 16;
      v196 = v193;
      do
      {
        v197 = (const float *)((char *)v161 + v195);
        v198 = (const float *)((char *)v161 + v195 - 16);
        v275 = (float64x2_t)vld2_f32(v198);
        v276 = (float64x2_t)vld2_f32(v197);
        v199 = vcvtq_f64_f32(*(float32x2_t *)&v275.f64[0]);
        v200 = vcvtq_f64_f32(*(float32x2_t *)&v276.f64[0]);
        v201 = (const float *)((char *)v169 + v195);
        v202 = (const float *)((char *)&v169[-2] + v195);
        v277 = (float64x2_t)vld2_f32(v202);
        v278 = vld2_f32(v201);
        v275 = vcvtq_f64_f32(*(float32x2_t *)&v275.f64[1]);
        *(float64x2_t *)((char *)&v275 + 8) = vcvtq_f64_f32(*(float32x2_t *)&v276.f64[1]);
        v276 = vcvtq_f64_f32(*(float32x2_t *)&v277.f64[0]);
        *(float64x2_t *)((char *)&v276 + 8) = vcvtq_f64_f32(v278.val[0]);
        v277 = vcvtq_f64_f32(*(float32x2_t *)&v277.f64[1]);
        *(float64x2_t *)((char *)&v277 + 8) = vcvtq_f64_f32(v278.val[1]);
        v278 = (float32x2x2_t)vmlaq_f64(vmulq_f64(vnegq_f64(v275), v277), v276, v199);
        *(float32x2x2_t *)((char *)&v278 + 8) = (float32x2x2_t)vmlaq_f64(vmulq_f64(vnegq_f64(*(float64x2_t *)((char *)&v275 + 8)), *(float64x2_t *)((char *)&v277 + 8)), *(float64x2_t *)((char *)&v276 + 8), v200);
        v275 = vmlaq_f64(vmulq_f64(v275, v276), v277, v199);
        *(float64x2_t *)((char *)&v275 + 8) = vmlaq_f64(vmulq_f64(*(float64x2_t *)((char *)&v275 + 8), *(float64x2_t *)((char *)&v276 + 8)), *(float64x2_t *)((char *)&v277 + 8), v200);
        v194 = v194 + v275.f64[0] + v203 + v275.f64[1] + v204;
        v178.f64[0] = v178.f64[0] + *(double *)v278.val + v205 + *(double *)&v278.val[1] + v206;
        v195 += 32;
        v196 -= 4;
      }
      while (v196);
      v178.f64[1] = v194;
      if (v192 != v193)
        goto LABEL_180;
LABEL_182:
      v210 = vmulq_n_f64(vaddq_f64(v175, vaddq_f64(v176, vaddq_f64(v177, v178))), v30);
      if (v21)
        v210 = vaddq_f64(v210, vmulq_n_f64(vcvtq_f64_f32(*v21), v41));
      v171 = v210.f64[0];
      v172 = (float *)(a7 + 8 * v167);
      v173 = v210.f64[1];
      *v172 = v171;
      v172[1] = v173;
      ++v167;
      v21 += v27;
      v169 = (float32x2_t *)((char *)v169 + v160);
    }
    while (v167 != v20);
    ++v155;
    a1 = (_QWORD *)((char *)a1 + v156);
    v21 = &v170[v262];
    a7 += 8 * v265;
    v39 = v268;
    if (v155 != v40)
      continue;
    break;
  }
LABEL_222:
  result = v271;
  if (v271 != v273 && v271 != 0)
    operator delete[]();
  return result;
}

void sub_100247BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (STACK[0x568] != a14)
  {
    if (STACK[0x568])
      operator delete[]();
  }
  _Unwind_Resume(a1);
}

_BYTE *sub_100247C4C(_QWORD *a1, unint64_t a2, float32x2_t *a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, int *a8, char a9)
{
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  float32x2_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  _OWORD *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  float32x2_t *v45;
  float64x2_t v46;
  float32x2_t *v47;
  float *v48;
  uint64_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float32x2_t *v52;
  float64x2_t v53;
  uint64_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float *v58;
  float32x2_t *v59;
  uint64_t v60;
  double v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  BOOL v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  _OWORD *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  float32x2_t *v89;
  double *v90;
  double v91;
  double v92;
  double v93;
  double *v94;
  unsigned int v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const float *v100;
  const float *v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  double v116;
  double v117;
  double v118;
  double v119;
  uint64_t v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const float *v136;
  const float *v137;
  float64x2_t v138;
  float64x2_t v139;
  const float *v140;
  const float *v141;
  double v142;
  double v143;
  double v144;
  double v145;
  uint64_t v146;
  double v147;
  double v148;
  double v149;
  double v150;
  _QWORD *v151;
  unsigned int v152;
  unint64_t v153;
  _OWORD *v154;
  __int128 v155;
  int i;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  int v160;
  unint64_t v161;
  unint64_t v162;
  _OWORD *v163;
  __int128 v164;
  unint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  uint64_t v169;
  char v170;
  uint64_t v171;
  char v172;
  int v173;
  BOOL v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  _BYTE v180[1096];
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float32x2x2_t v184;
  float32x2x4_t v185;
  float32x2x4_t v186;
  float32x2x4_t v187;
  float32x2x4_t v188;

  v14 = *a7;
  v15 = a7[1];
  v175 = *a8;
  v178 = a8[1];
  bzero(v180, 0x440uLL);
  v16 = a2 >> 3;
  if ((a9 & 1) != 0)
  {
    if (v15 >= 0x89)
      operator new[]();
    v18 = 1;
    v17 = v180;
  }
  else
  {
    v17 = 0;
    v15 = v14;
    v18 = v16;
    v16 = 1;
  }
  v19 = v175;
  v20 = v175;
  v21 = a4 >> 3;
  v22 = a6 >> 4;
  v23 = v178;
  if ((a9 & 2) == 0)
  {
    if (v178 < 1)
      return v180;
    v24 = 0;
    if (v17)
      v25 = (int)v15 < 1;
    else
      v25 = 1;
    v26 = v25;
    v27 = v15 & 0xFFFFFFFC;
    v28 = v15 >= 4 && v16 == 1;
    v29 = 8 * v18;
    v30 = 8 * v15;
    v31 = !v28;
    v32 = v30 & 0x7FFFFFFE0;
    v33 = 8 * v16;
    v34 = a3 + 2;
    v35 = 8 * v21;
    v172 = v26;
    v171 = v29;
    v170 = v31;
    v169 = v30 & 0x7FFFFFFE0;
    while (1)
    {
      if (v17)
        v36 = v17;
      else
        v36 = a1;
      if ((v26 & 1) != 0)
        goto LABEL_34;
      if ((v31 & 1) != 0)
      {
        v37 = 0;
      }
      else
      {
        v38 = 0;
        do
        {
          v39 = &v17[v38 / 8];
          v40 = *(_OWORD *)&a1[v38 / 8 + 2];
          *v39 = *(_OWORD *)&a1[v38 / 8];
          v39[1] = v40;
          v38 += 32;
        }
        while (v32 != v38);
        v37 = v27;
        v36 = v17;
        if (v27 == v15)
          goto LABEL_34;
      }
      v41 = v33 * v37;
      do
      {
        v17[v37++] = *(_QWORD *)((char *)a1 + v41);
        v41 += v33;
      }
      while (v15 != v37);
      v36 = v17;
LABEL_34:
      if (v19 >= 4)
      {
        v42 = 0;
        v52 = v34;
        do
        {
          v53 = 0uLL;
          v54 = 16 * v42;
          v55 = 0uLL;
          v56 = 0uLL;
          v57 = 0uLL;
          if ((a9 & 0x10) != 0)
          {
            v53 = *(float64x2_t *)(a5 + 16 * v42);
            v55 = *(float64x2_t *)(a5 + (v54 | 0x10));
            v56 = *(float64x2_t *)(a5 + (v54 | 0x20));
            v57 = *(float64x2_t *)(a5 + (v54 | 0x30));
          }
          if ((int)v15 >= 1)
          {
            v58 = (float *)v36 + 1;
            v59 = v52;
            v60 = v15;
            do
            {
              v61 = *(v58 - 1);
              v62.f64[0] = -*v58;
              v63 = vcvtq_f64_f32(v59[-2]);
              v62.f64[1] = *v58;
              v64 = vmlaq_n_f64(vmulq_f64(v62, (float64x2_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL)), v63, v61);
              v65 = vcvtq_f64_f32(v59[-1]);
              v53 = vaddq_f64(v53, v64);
              v66 = vmlaq_n_f64(vmulq_f64(v62, (float64x2_t)vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), v65, v61);
              v67 = vcvtq_f64_f32(*v59);
              v55 = vaddq_f64(v55, v66);
              v68 = vmlaq_n_f64(vmulq_f64(v62, (float64x2_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL)), v67, v61);
              v69 = vcvtq_f64_f32(v59[1]);
              v56 = vaddq_f64(v56, v68);
              v57 = vaddq_f64(v57, vmlaq_n_f64(vmulq_f64(v62, (float64x2_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL)), v69, v61));
              v59 = (float32x2_t *)((char *)v59 + v35);
              v58 += 2;
              --v60;
            }
            while (v60);
          }
          *(float64x2_t *)(a5 + 16 * v42) = v53;
          *(float64x2_t *)(a5 + (v54 | 0x10)) = v55;
          *(float64x2_t *)(a5 + (v54 | 0x20)) = v56;
          *(float64x2_t *)(a5 + (v54 | 0x30)) = v57;
          v42 += 4;
          v52 += 4;
        }
        while (v42 <= v175 - 4);
      }
      else
      {
        LODWORD(v42) = 0;
      }
      if ((int)v42 < (int)v175)
      {
        v43 = v42;
        if ((int)v15 < 1)
        {
          if ((a9 & 0x10) == 0)
          {
            v173 = v24;
            bzero((void *)(a5 + 16 * v42), 16 * (v175 + ~(_DWORD)v42) + 16);
            v34 = a3 + 2;
            v32 = v169;
            v31 = v170;
            v29 = v171;
            v27 = v15 & 0xFFFFFFFC;
            v26 = v172;
            v24 = v173;
            v19 = v175;
            v22 = a6 >> 4;
            v23 = v178;
          }
        }
        else
        {
          v44 = (float *)v36 + 1;
          v45 = &a3[v42];
          do
          {
            v46 = 0uLL;
            if ((a9 & 0x10) != 0)
              v46 = *(float64x2_t *)(a5 + 16 * v43);
            v47 = v45;
            v48 = v44;
            v49 = v15;
            do
            {
              v50.f64[0] = -*v48;
              v51 = vcvtq_f64_f32(*v47);
              v50.f64[1] = *v48;
              v46 = vaddq_f64(v46, vmlaq_n_f64(vmulq_f64(v50, (float64x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL)), v51, *(v48 - 1)));
              v48 += 2;
              v47 = (float32x2_t *)((char *)v47 + v35);
              --v49;
            }
            while (v49);
            *(float64x2_t *)(a5 + 16 * v43++) = v46;
            ++v45;
          }
          while (v43 != v175);
        }
      }
      ++v24;
      a1 = (_QWORD *)((char *)a1 + v29);
      a5 += 16 * v22;
      if (v24 == v23)
        return v180;
    }
  }
  if (v178 < 1)
    return v180;
  if (v17)
    v70 = (int)v15 < 1;
  else
    v70 = 1;
  v71 = v70;
  if ((int)v175 < 1)
  {
    if ((v71 & 1) == 0)
    {
      if (v15 > 3)
      {
        if (v16 == 1)
        {
          v152 = v15 - (v15 & 0xFFFFFFFC);
          if (v15 == (unint64_t)(v15 & 0xFFFFFFFC))
          {
            do
            {
              v153 = 0;
              do
              {
                v154 = &v17[v153 / 8];
                v155 = *(_OWORD *)&a1[v153 / 8 + 2];
                *v154 = *(_OWORD *)&a1[v153 / 8];
                v154[1] = v155;
                v153 += 32;
              }
              while (((8 * v15) & 0x7FFFFFFE0) != v153);
              ++v152;
              a1 += v18;
            }
            while (v152 != v178);
          }
          else
          {
            v160 = 0;
            v161 = 32 * ((unint64_t)v15 >> 2);
            do
            {
              v162 = 0;
              do
              {
                v163 = &v17[v162 / 8];
                v164 = *(_OWORD *)&a1[v162 / 8 + 2];
                *v163 = *(_OWORD *)&a1[v162 / 8];
                v163[1] = v164;
                v162 += 32;
              }
              while (v161 != v162);
              v165 = 4 * ((unint64_t)v15 >> 2);
              v166 = &v17[v161 / 8];
              v167 = v15 - (unint64_t)(v15 & 0xFFFFFFFC);
              do
              {
                *v166++ = a1[v165++];
                --v167;
              }
              while (v167);
              ++v160;
              a1 += v18;
            }
            while (v160 != v178);
          }
        }
        else
        {
          for (i = 0; i != v178; ++i)
          {
            v157 = a1;
            v158 = v17;
            v159 = v15;
            do
            {
              *v158++ = *v157;
              v157 += v16;
              --v159;
            }
            while (v159);
            a1 += v18;
          }
        }
      }
      else
      {
        do
        {
          v151 = a1;
          if (v15 != 1)
          {
            v17[1] = a1[v16];
            if (v15 != 2)
              v17[2] = a1[2 * v16];
          }
          a1 += v18;
          --v23;
        }
        while (v23);
        *v17 = *v151;
      }
    }
    return v180;
  }
  v72 = 0;
  v73 = (int)(v15 - 2);
  if (v73 <= 1)
    v74 = 1;
  else
    v74 = (int)(v15 - 2);
  v75 = (v74 >> 1) + 1;
  v176 = 8 * v18;
  v177 = a6 >> 4;
  v77 = v15 < 4 || v16 != 1;
  v174 = v77;
  v78 = 8 * v16;
  v79 = 8 * v21;
  while (2)
  {
    if (v17)
      v80 = v17;
    else
      v80 = a1;
    if ((v71 & 1) != 0)
      goto LABEL_86;
    if (v174)
    {
      v81 = 0;
    }
    else
    {
      v82 = 0;
      do
      {
        v83 = &v17[v82 / 8];
        v84 = *(_OWORD *)&a1[v82 / 8 + 2];
        *v83 = *(_OWORD *)&a1[v82 / 8];
        v83[1] = v84;
        v82 += 32;
      }
      while (((8 * v15) & 0x7FFFFFFE0) != v82);
      v81 = v15 & 0xFFFFFFFC;
      v80 = v17;
      if (v81 == v15)
        goto LABEL_86;
    }
    v85 = v78 * v81;
    do
    {
      v17[v81++] = *(_QWORD *)((char *)a1 + v85);
      v85 += v78;
    }
    while (v15 != v81);
    v80 = v17;
LABEL_86:
    v86 = v71;
    v87 = 0;
    v88 = v80 + 1;
    v89 = a3;
    do
    {
      v91 = 0.0;
      v92 = 0.0;
      v93 = 0.0;
      if ((a9 & 0x10) != 0)
      {
        v94 = (double *)(a5 + 16 * v87);
        v92 = *v94;
        v93 = v94[1];
      }
      if ((int)v15 < 2)
      {
        v95 = 0;
        v96 = 0.0;
        goto LABEL_100;
      }
      if (v74 < 6)
      {
        v97 = 0;
        v96 = 0.0;
LABEL_97:
        v120 = v97;
        do
        {
          v121 = *(float *)&v80[v120];
          v122 = *((float *)&v88[v120 - 1] + 1);
          v123 = v89[v120].f32[0];
          v124 = v89[v120].f32[1];
          v92 = v92 + v121 * v123 - v122 * v124;
          v93 = v93 + v122 * v123 + v121 * v124;
          v125 = *(float *)&v88[v120];
          v126 = *((float *)&v88[v120] + 1);
          v127 = v89[v120 + 1].f32[0];
          v128 = v89[v120 + 1].f32[1];
          v91 = v91 + v125 * v127 - v126 * v128;
          v96 = v96 + v126 * v127 + v125 * v128;
          v97 += 2;
          v120 += 2;
        }
        while (v97 <= v73);
        v95 = ((v15 - 2) & 0xFFFFFFFE) + 2;
        goto LABEL_100;
      }
      v98 = 0;
      v96 = 0.0;
      v99 = v75 & 0x7FFFFFFC;
      do
      {
        v100 = (const float *)&v80[v98];
        v185 = vld4_f32(v100);
        v100 += 8;
        v186 = vld4_f32(v100);
        v101 = (const float *)&v89[v98];
        v187 = vld4_f32(v101);
        v101 += 8;
        v102 = vcvtq_f64_f32(v185.val[0]);
        v103 = vcvtq_f64_f32(v186.val[0]);
        v188 = vld4_f32(v101);
        v104 = vcvtq_f64_f32(v185.val[1]);
        v105 = vcvtq_f64_f32(v186.val[1]);
        v106 = vcvtq_f64_f32(v187.val[0]);
        v107 = vcvtq_f64_f32(v188.val[0]);
        v108 = vcvtq_f64_f32(v187.val[1]);
        v109 = vcvtq_f64_f32(v188.val[1]);
        v110 = vmlaq_f64(vmulq_f64(vnegq_f64(v104), v108), v106, v102);
        v111 = vmlaq_f64(vmulq_f64(vnegq_f64(v105), v109), v107, v103);
        v112 = vmlaq_f64(vmulq_f64(v104, v106), v108, v102);
        v113 = vmlaq_f64(vmulq_f64(v105, v107), v109, v103);
        v114 = vcvtq_f64_f32(v185.val[2]);
        v115 = vcvtq_f64_f32(v186.val[2]);
        *(float64x2_t *)v185.val[0].f32 = vcvtq_f64_f32(v185.val[3]);
        *(float64x2_t *)v185.val[1].f32 = vcvtq_f64_f32(v186.val[3]);
        *(float64x2_t *)v185.val[2].f32 = vcvtq_f64_f32(v187.val[2]);
        *(float64x2_t *)v186.val[0].f32 = vcvtq_f64_f32(v188.val[2]);
        *(float64x2_t *)v186.val[1].f32 = vcvtq_f64_f32(v187.val[3]);
        *(float64x2_t *)v186.val[2].f32 = vcvtq_f64_f32(v188.val[3]);
        *(float64x2_t *)v186.val[3].f32 = vmlaq_f64(vmulq_f64(vnegq_f64(*(float64x2_t *)v185.val[0].f32), *(float64x2_t *)v186.val[1].f32), *(float64x2_t *)v185.val[2].f32, v114);
        *(float64x2_t *)v187.val[0].f32 = vmlaq_f64(vmulq_f64(vnegq_f64(*(float64x2_t *)v185.val[1].f32), *(float64x2_t *)v186.val[2].f32), *(float64x2_t *)v186.val[0].f32, v115);
        *(float64x2_t *)v185.val[0].f32 = vmlaq_f64(vmulq_f64(*(float64x2_t *)v185.val[0].f32, *(float64x2_t *)v185.val[2].f32), *(float64x2_t *)v186.val[1].f32, v114);
        *(float64x2_t *)v185.val[1].f32 = vmlaq_f64(vmulq_f64(*(float64x2_t *)v185.val[1].f32, *(float64x2_t *)v186.val[0].f32), *(float64x2_t *)v186.val[2].f32, v115);
        v93 = v93 + v112.f64[0] + v112.f64[1] + v113.f64[0] + v113.f64[1];
        v92 = v92 + v110.f64[0] + v110.f64[1] + v111.f64[0] + v111.f64[1];
        v96 = v96 + *(double *)v185.val + v116 + *(double *)&v185.val[1] + v117;
        v91 = v91 + *(double *)&v186.val[3] + v118 + *(double *)v187.val + v119;
        v98 += 8;
        v99 -= 4;
      }
      while (v99);
      v97 = 2 * (v75 & 0x7FFFFFFC);
      v95 = ((v15 - 2) & 0xFFFFFFFE) + 2;
      if (v75 != (v75 & 0x7FFFFFFC))
        goto LABEL_97;
LABEL_100:
      if ((int)v95 >= (int)v15)
        goto LABEL_87;
      v129 = v95;
      v130 = v15 + ~v95;
      if (v130 < 3)
      {
        v131 = v129;
LABEL_106:
        v146 = v131;
        do
        {
          v147 = *(float *)&v80[v146];
          v148 = *((float *)&v80[v146] + 1);
          v149 = v89[v146].f32[0];
          v150 = v89[v146].f32[1];
          v92 = v92 + v147 * v149 - v148 * v150;
          v93 = v93 + v148 * v149 + v147 * v150;
          LODWORD(v131) = v131 + 1;
          ++v146;
        }
        while ((int)v15 > (int)v131);
        goto LABEL_87;
      }
      v132 = v130 + 1;
      v133 = (v130 + 1) & 0x1FFFFFFFCLL;
      v131 = v133 + v129;
      v134 = 8 * v129 + 16;
      v135 = v133;
      do
      {
        v136 = (const float *)((char *)v80 + v134);
        v137 = (const float *)((char *)v80 + v134 - 16);
        v181 = (float64x2_t)vld2_f32(v137);
        v182 = (float64x2_t)vld2_f32(v136);
        v138 = vcvtq_f64_f32(*(float32x2_t *)&v181.f64[0]);
        v139 = vcvtq_f64_f32(*(float32x2_t *)&v182.f64[0]);
        v140 = (const float *)((char *)v89 + v134);
        v141 = (const float *)((char *)&v89[-2] + v134);
        v183 = (float64x2_t)vld2_f32(v141);
        v184 = vld2_f32(v140);
        v181 = vcvtq_f64_f32(*(float32x2_t *)&v181.f64[1]);
        *(float64x2_t *)((char *)&v181 + 8) = vcvtq_f64_f32(*(float32x2_t *)&v182.f64[1]);
        v182 = vcvtq_f64_f32(*(float32x2_t *)&v183.f64[0]);
        *(float64x2_t *)((char *)&v182 + 8) = vcvtq_f64_f32(v184.val[0]);
        v183 = vcvtq_f64_f32(*(float32x2_t *)&v183.f64[1]);
        *(float64x2_t *)((char *)&v183 + 8) = vcvtq_f64_f32(v184.val[1]);
        v184 = (float32x2x2_t)vmlaq_f64(vmulq_f64(vnegq_f64(v181), v183), v182, v138);
        *(float32x2x2_t *)((char *)&v184 + 8) = (float32x2x2_t)vmlaq_f64(vmulq_f64(vnegq_f64(*(float64x2_t *)((char *)&v181 + 8)), *(float64x2_t *)((char *)&v183 + 8)), *(float64x2_t *)((char *)&v182 + 8), v139);
        v181 = vmlaq_f64(vmulq_f64(v181, v182), v183, v138);
        *(float64x2_t *)((char *)&v181 + 8) = vmlaq_f64(vmulq_f64(*(float64x2_t *)((char *)&v181 + 8), *(float64x2_t *)((char *)&v182 + 8)), *(float64x2_t *)((char *)&v183 + 8), v139);
        v93 = v93 + v181.f64[0] + v142 + v181.f64[1] + v143;
        v92 = v92 + *(double *)v184.val + v144 + *(double *)&v184.val[1] + v145;
        v134 += 32;
        v135 -= 4;
      }
      while (v135);
      if (v132 != v133)
        goto LABEL_106;
LABEL_87:
      v90 = (double *)(a5 + 16 * v87);
      *v90 = v91 + v92;
      v90[1] = v96 + v93;
      ++v87;
      v89 = (float32x2_t *)((char *)v89 + v79);
    }
    while (v87 != v20);
    ++v72;
    a1 = (_QWORD *)((char *)a1 + v176);
    a5 += 16 * v177;
    v71 = v86;
    if (v72 != v178)
      continue;
    return v180;
  }
}

void sub_10024862C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22 != a16)
  {
    if (a22)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

float32x2_t *sub_100248660(float32x2_t *result, unint64_t a2, float64x2_t *a3, unint64_t a4, float32x4_t *a5, unint64_t a6, unsigned int *a7, char a8, double a9, double a10)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  float64x2_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float32x2_t *v25;
  uint64_t v26;
  float64x2_t *v27;
  float32x4_t *v28;
  float32x2_t *v29;
  float32x2_t *v30;
  float32x2_t v31;
  float32x2_t *v32;
  float32x2_t *v33;
  float32x2_t v34;
  float32x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t i;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  const double *f64;
  float *v47;
  float64x2x2_t v48;
  float64x2x2_t v49;
  float32x4x2_t v50;

  v10 = a7[1];
  v11 = a2 >> 3;
  if ((a8 & 4) != 0)
    v12 = a2 >> 3;
  else
    v12 = 1;
  if ((a8 & 4) != 0)
    v11 = 1;
  if (result)
    v13 = v12;
  else
    v13 = 0;
  if (result)
    v14 = v11;
  else
    v14 = 0;
  if (v10)
  {
    v15 = *a7;
    v16 = (v15 - 4);
    v17 = 8 * v14;
    v18 = 4 * v13;
    v19 = a5 + 1;
    v20 = 8 * (a6 >> 3);
    v21 = a3 + 2;
    v22 = 16 * (a4 >> 4);
    v23 = v13;
    do
    {
      if (result)
      {
        v24 = 0;
        if ((int)v15 >= 4)
        {
          v27 = v21;
          v28 = v19;
          v29 = result;
          do
          {
            v30 = v29;
            v31 = *v29;
            v32 = &v29[v23];
            v28[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(v27[-2], a9), vmulq_n_f64(vcvtq_f64_f32(v31), a10))), vaddq_f64(vmulq_n_f64(v27[-1], a9), vmulq_n_f64(vcvtq_f64_f32(*v32), a10)));
            v33 = &v32[v23];
            v34 = *v33;
            v35 = &v33[v23];
            v37 = *v27;
            v36 = v27[1];
            v27 += 4;
            v24 += 4;
            *v28 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(v37, a9), vmulq_n_f64(vcvtq_f64_f32(v34), a10))), vaddq_f64(vmulq_n_f64(v36, a9), vmulq_n_f64(vcvtq_f64_f32(*v35), a10)));
            v28 += 2;
            v29 = &v35[v23];
          }
          while (v24 <= v16);
          v25 = &v30[v18];
          v24 = v24;
          if ((int)v24 >= (int)v15)
            goto LABEL_14;
          do
          {
LABEL_26:
            *(float32x2_t *)&a5->f32[2 * v24] = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(a3[v24], a9), vmulq_n_f64(vcvtq_f64_f32(*v25), a10)));
            ++v24;
            v25 = (float32x2_t *)((char *)v25 + v23 * 8);
          }
          while (v15 != v24);
          goto LABEL_14;
        }
        v25 = result;
        if ((int)v15 > 0)
          goto LABEL_26;
      }
      else
      {
        if ((int)v15 < 4)
        {
          v26 = 0;
          if ((int)v15 <= 0)
            goto LABEL_14;
        }
        else
        {
          v38 = 0;
          v39 = 0;
          for (i = 0; i <= v16; i += 4)
          {
            a5[v39] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(a3[v38], a9)), vmulq_n_f64(a3[v38 + 1], a9));
            v19[v39] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v21[v38], a9)), vmulq_n_f64(v21[v38 + 1], a9));
            v39 += 2;
            v38 += 4;
          }
          v26 = i;
          if ((int)i >= (int)v15)
            goto LABEL_14;
        }
        v41 = v15 - v26;
        if ((unint64_t)(v15 - v26) >= 4)
        {
          v42 = (v41 & 0xFFFFFFFFFFFFFFFCLL) + v26;
          v43 = 2 * v26;
          v44 = v26;
          v45 = v41 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            f64 = a3[v44].f64;
            v48 = vld2q_f64(f64);
            f64 += 4;
            v49 = vld2q_f64(f64);
            v50.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v48.val[0], a9)), vmulq_n_f64(v49.val[0], a9));
            v50.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v48.val[1], a9)), vmulq_n_f64(v49.val[1], a9));
            v47 = &a5->f32[v43];
            vst2q_f32(v47, v50);
            v43 += 8;
            v44 += 4;
            v45 -= 4;
          }
          while (v45);
          if (v41 == (v41 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_14;
        }
        else
        {
          v42 = v26;
        }
        do
        {
          *(float32x2_t *)&a5->f32[2 * v42] = vcvt_f32_f64(vmulq_n_f64(a3[v42], a9));
          ++v42;
        }
        while (v15 != v42);
      }
LABEL_14:
      result = (float32x2_t *)((char *)result + v17);
      v19 = (float32x4_t *)((char *)v19 + v20);
      v21 = (float64x2_t *)((char *)v21 + v22);
      a5 = (float32x4_t *)((char *)a5 + v20);
      a3 = (float64x2_t *)((char *)a3 + v22);
      --v10;
    }
    while (v10);
  }
  return result;
}

_BYTE *sub_1002488E8(_OWORD *a1, unint64_t a2, _OWORD *a3, unint64_t a4, float64x2_t *a5, unint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, int *a11, unsigned int *a12, char a13)
{
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  float64x2_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  double v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  _OWORD *v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  float64x2_t *v41;
  double v42;
  uint64_t v43;
  double v44;
  int v45;
  int v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  float64x2_t *v55;
  float64x2_t *v56;
  double *v57;
  double *v58;
  float64x2_t v59;
  float64x2_t v60;
  float64_t *v61;
  float64x2_t *v62;
  uint64_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  float64x2_t v69;
  float64x2_t v70;
  int8x16_t v71;
  int8x16_t v72;
  float64x2_t v73;
  int8x16_t v74;
  int8x16_t v75;
  float64x2_t v76;
  uint64_t v77;
  float64_t *v78;
  float64x2_t *v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64_t *v82;
  uint64_t v83;
  float64x2_t v84;
  int8x16_t v85;
  float64x2_t v86;
  uint64_t v87;
  _BYTE *v88;
  int v89;
  _OWORD *v90;
  float64x2_t *v91;
  double v92;
  double v93;
  int v94;
  int v95;
  size_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  uint64_t v105;
  _OWORD *v106;
  double *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double *v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  float64x2_t v140;
  float64x2_t v141;
  uint64_t v142;
  unint64_t v143;
  const double *v144;
  float64x2_t v145;
  float64x2_t v146;
  double *v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  double v151;
  double v152;
  double *v153;
  double v154;
  uint64_t v155;
  float64x2_t *v156;
  uint64_t v157;
  uint64_t v158;
  const double *v159;
  double *v160;
  BOOL v161;
  char v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _BYTE *v167;
  uint64_t v168;
  _OWORD *v169;
  uint64_t v170;
  _BYTE *v171;
  _OWORD *v172;
  float64x2_t *v173;
  int v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  unint64_t v179;
  uint64_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  int8x16_t v187;
  int8x16_t v188;
  float64x2_t v189;
  float64x2_t v190;
  int8x16_t v191;
  float64x2_t v192;
  int8x16_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  double v199;
  uint64_t v200;
  uint64_t v201;
  const double *v202;
  const double *v203;
  const double *v204;
  const double *v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  uint64_t v210;
  float64x2_t v211;
  float64x2_t v212;
  int8x16_t v213;
  float64x2_t v214;
  _OWORD *v215;
  unint64_t v216;
  uint64_t i;
  double *v218;
  double v219;
  float64x2_t v220;
  int64_t v221;
  float64x2_t *v222;
  uint64_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  int8x16_t v229;
  float64x2_t v230;
  int8x16_t v231;
  float64x2_t v232;
  float64x2_t v233;
  int8x16_t v234;
  float64x2_t v235;
  _BYTE *result;
  int v238;
  uint64_t v239;
  _OWORD *v240;
  _OWORD *v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v249;
  _OWORD *v252;
  _BYTE *v253;
  unsigned int v254;
  int v255;
  float64x2_t *v256;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  _BYTE v262[1152];
  _BYTE *v263;
  uint64_t v264;
  _BYTE v265[1160];
  float64x2x2_t v266;
  float64x2x2_t v267;
  float64x2x2_t v268;
  float64x2x2_t v269;
  float64x2x2_t v270;
  float64x2x2_t v271;
  float64x2x2_t v272;
  float64x2x2_t v273;
  float64x2x2_t v274;
  float64x2x2_t v275;

  v19 = a11[1];
  v255 = *a11;
  v20 = *a12;
  v260 = (int)a12[1];
  v249 = a12[1];
  v253 = v265;
  v254 = *a12;
  bzero(v265, 0x480uLL);
  v21 = a2;
  v22 = a5;
  v263 = v265;
  v264 = 72;
  v23 = a2 >> 4;
  v24 = a4 >> 4;
  v25 = a6 >> 4;
  v26 = a8 >> 4;
  if ((a13 & 4) != 0)
    v27 = v25;
  else
    v27 = 1;
  if ((a13 & 4) != 0)
    v25 = 1;
  v28 = a5 == 0;
  if (a5)
    v29 = v27;
  else
    v29 = 0;
  if (v28)
    v25 = 0;
  v258 = v25;
  if ((a13 & 1) == 0)
  {
    v30 = 1;
    v31 = a2 >> 4;
    v32 = a1;
    v33 = a9;
    v34 = v255;
    if (v255 == 1)
      goto LABEL_13;
    goto LABEL_29;
  }
  v31 = 1;
  if (a2 < 0x20)
  {
    v30 = a2 >> 4;
    v34 = v19;
    v32 = a1;
    v33 = a9;
    if ((_DWORD)v19 != 1)
      goto LABEL_29;
  }
  else
  {
    v32 = a1;
    v33 = a9;
    if ((int)v19 >= 2)
    {
      v264 = v19;
      if (v19 >= 0x49)
        operator new[]();
      v31 = 1;
      v44 = a10;
      v45 = v249;
      if ((a13 & 2) == 0)
        goto LABEL_30;
LABEL_118:
      if (v45 < 1)
        goto LABEL_177;
      if (v253)
        v161 = (int)v19 < 1;
      else
        v161 = 1;
      v162 = v161;
      if ((int)v20 < 1)
      {
        if ((v162 & 1) == 0)
        {
          v238 = 0;
          v239 = 16 * v31;
          do
          {
            v240 = v32;
            v241 = v253;
            v242 = v19;
            do
            {
              *v241++ = *v240;
              v240 += v23;
              --v242;
            }
            while (v242);
            ++v238;
            v32 = (_OWORD *)((char *)v32 + v239);
          }
          while (v238 != v45);
        }
        goto LABEL_177;
      }
      v163 = 0;
      v164 = 16 * v31;
      v165 = 16 * v23;
      v166 = 16 * v24;
LABEL_128:
      if (v253)
        v167 = v253;
      else
        v167 = v32;
      if ((v162 & 1) == 0)
      {
        v168 = 0;
        v169 = v32;
        do
        {
          *(_OWORD *)&v253[v168] = *v169;
          v168 += 16;
          v169 = (_OWORD *)((char *)v169 + v165);
        }
        while (16 * v19 != v168);
        v167 = v253;
      }
      v170 = 0;
      v171 = v167 + 56;
      v172 = a3;
      v173 = v22;
      while (1)
      {
        if ((int)v19 >= 4)
        {
          v179 = 0;
          v180 = 0;
          v175 = 0uLL;
          v176 = 0uLL;
          v177 = 0uLL;
          v178 = 0uLL;
          do
          {
            v181.f64[0] = *(float64_t *)&v171[v179 - 48];
            v182.f64[0] = *(float64_t *)&v171[v179 - 32];
            v183.f64[0] = *(float64_t *)&v171[v179 - 16];
            v184.f64[0] = *(float64_t *)&v171[v179];
            v181.f64[1] = -v181.f64[0];
            v185 = (float64x2_t)v172[v179 / 0x10];
            v186 = (float64x2_t)v172[v179 / 0x10 + 1];
            v187 = (int8x16_t)vmulq_f64(v185, v181);
            v182.f64[1] = -v182.f64[0];
            v188 = (int8x16_t)vmulq_f64(v186, v182);
            v178 = vaddq_f64(v178, vmlaq_n_f64((float64x2_t)vextq_s8(v187, v187, 8uLL), v185, *(double *)&v167[v179]));
            v183.f64[1] = -v183.f64[0];
            v189 = (float64x2_t)v172[v179 / 0x10 + 2];
            v190 = (float64x2_t)v172[v179 / 0x10 + 3];
            v191 = (int8x16_t)vmulq_f64(v189, v183);
            v177 = vaddq_f64(v177, vmlaq_n_f64((float64x2_t)vextq_s8(v188, v188, 8uLL), v186, *(double *)&v171[v179 - 40]));
            v192 = vmlaq_n_f64((float64x2_t)vextq_s8(v191, v191, 8uLL), v189, *(double *)&v171[v179 - 24]);
            v184.f64[1] = -v184.f64[0];
            v193 = (int8x16_t)vmulq_f64(v190, v184);
            v176 = vaddq_f64(v176, v192);
            v175 = vaddq_f64(v175, vmlaq_n_f64((float64x2_t)vextq_s8(v193, v193, 8uLL), v190, *(double *)&v171[v179 - 8]));
            v180 += 4;
            v179 += 64;
          }
          while (v180 <= (int)v19 - 4);
          v174 = ((v19 - 4) & 0xFFFFFFFC) + 4;
          if (v174 >= (int)v19)
            goto LABEL_150;
        }
        else
        {
          v174 = 0;
          v175 = 0uLL;
          v176 = 0uLL;
          v177 = 0uLL;
          v178 = 0uLL;
          if ((int)v19 <= 0)
            goto LABEL_150;
        }
        v194 = v174;
        v195 = (v19 + ~v174);
        if (v195 >= 3)
        {
          v197 = v195 + 1;
          v198 = (v195 + 1) & 0x1FFFFFFFCLL;
          v196 = v198 + v194;
          v199 = v178.f64[1];
          v200 = 16 * v194 + 32;
          v201 = v198;
          do
          {
            v202 = (const double *)&v167[v200];
            v203 = (const double *)&v167[v200 - 32];
            v271 = vld2q_f64(v203);
            v273 = vld2q_f64(v202);
            v204 = (const double *)((char *)v172 + v200);
            v205 = (const double *)((char *)v172 + v200 - 32);
            v274 = vld2q_f64(v205);
            v275 = vld2q_f64(v204);
            v206 = vmlaq_f64(vmulq_f64(v274.val[1], vnegq_f64(v271.val[1])), v274.val[0], v271.val[0]);
            v207 = vmlaq_f64(vmulq_f64(v275.val[1], vnegq_f64(v273.val[1])), v275.val[0], v273.val[0]);
            v208 = vmlaq_f64(vmulq_f64(v271.val[1], v274.val[0]), v274.val[1], v271.val[0]);
            v209 = vmlaq_f64(vmulq_f64(v273.val[1], v275.val[0]), v275.val[1], v273.val[0]);
            v199 = v199 + v208.f64[0] + v208.f64[1] + v209.f64[0] + v209.f64[1];
            v178.f64[0] = v178.f64[0] + v206.f64[0] + v206.f64[1] + v207.f64[0] + v207.f64[1];
            v200 += 64;
            v201 -= 4;
          }
          while (v201);
          v178.f64[1] = v199;
          if (v197 == v198)
            goto LABEL_150;
        }
        else
        {
          v196 = v194;
        }
        v210 = v196;
        do
        {
          v211.f64[0] = *(float64_t *)&v167[v210 * 16 + 8];
          v212 = (float64x2_t)v172[v210];
          v211.f64[1] = -v211.f64[0];
          v213 = (int8x16_t)vmulq_f64(v212, v211);
          v178 = vaddq_f64(v178, vmlaq_n_f64((float64x2_t)vextq_s8(v213, v213, 8uLL), v212, *(double *)&v167[v210 * 16]));
          LODWORD(v196) = v196 + 1;
          ++v210;
        }
        while ((int)v19 > (int)v196);
LABEL_150:
        v214 = vmulq_n_f64(vaddq_f64(v175, vaddq_f64(v176, vaddq_f64(v177, v178))), v33);
        if (v173)
          v214 = vaddq_f64(v214, vmulq_n_f64(*v173, v44));
        *(float64x2_t *)(a7 + 16 * v170++) = v214;
        v173 += v29;
        v172 = (_OWORD *)((char *)v172 + v166);
        if (v170 == v20)
        {
          ++v163;
          v32 = (_OWORD *)((char *)v32 + v164);
          v22 += v258;
          a7 += 16 * v26;
          if (v163 == (_DWORD)v260)
            goto LABEL_177;
          goto LABEL_128;
        }
      }
    }
    v30 = v23;
    v34 = v19;
    if ((_DWORD)v19 != 1)
    {
LABEL_29:
      v253 = 0;
      LODWORD(v19) = v34;
      v23 = v30;
      v44 = a10;
      v45 = v249;
      if ((a13 & 2) == 0)
      {
LABEL_30:
        if ((unint64_t)(16 * (int)v20) <= 0x640)
        {
          if (v45 < 1)
            goto LABEL_177;
          v46 = 0;
          if (v253)
            v47 = (int)v19 < 1;
          else
            v47 = 1;
          v48 = v47;
          v49 = 16 * v23;
          v50 = 16 * v24;
LABEL_40:
          if (v253)
            v51 = v253;
          else
            v51 = v32;
          if ((v48 & 1) == 0)
          {
            v52 = 0;
            v53 = v32;
            do
            {
              *(_OWORD *)&v253[v52] = *v53;
              v52 += 16;
              v53 = (_OWORD *)((char *)v53 + v49);
            }
            while (16 * v19 != v52);
            v51 = v253;
          }
          if ((int)v20 < 4)
          {
            v54 = 0;
            v55 = v22;
            if ((int)v20 > 0)
              goto LABEL_61;
            goto LABEL_39;
          }
          v54 = 0;
          v56 = (float64x2_t *)(a3 + 2);
          v55 = v22;
          while (1)
          {
            v60 = 0uLL;
            if ((int)v19 < 1)
            {
              v65 = 0uLL;
              v66 = 0uLL;
              v76 = vmulq_n_f64((float64x2_t)0, v33);
              v77 = 16 * v54;
              if (v55)
                goto LABEL_59;
            }
            else
            {
              v61 = (float64_t *)(v51 + 8);
              v62 = v56;
              v63 = v19;
              v64 = 0uLL;
              v65 = 0uLL;
              v66 = 0uLL;
              do
              {
                v67.f64[0] = *v61;
                v67.f64[1] = -*v61;
                v68 = *(v61 - 1);
                v69 = v62[-2];
                v70 = v62[-1];
                v71 = (int8x16_t)vmulq_f64(v69, v67);
                v64 = vaddq_f64(v64, vmlaq_n_f64((float64x2_t)vextq_s8(v71, v71, 8uLL), v69, v68));
                v72 = (int8x16_t)vmulq_f64(v70, v67);
                v65 = vaddq_f64(v65, vmlaq_n_f64((float64x2_t)vextq_s8(v72, v72, 8uLL), v70, v68));
                v73 = v62[1];
                v74 = (int8x16_t)vmulq_f64(*v62, v67);
                v66 = vaddq_f64(v66, vmlaq_n_f64((float64x2_t)vextq_s8(v74, v74, 8uLL), *v62, v68));
                v75 = (int8x16_t)vmulq_f64(v73, v67);
                v60 = vaddq_f64(v60, vmlaq_n_f64((float64x2_t)vextq_s8(v75, v75, 8uLL), v73, v68));
                v62 = (float64x2_t *)((char *)v62 + v50);
                v61 += 2;
                --v63;
              }
              while (v63);
              v76 = vmulq_n_f64(v64, v33);
              v77 = 16 * v54;
              if (v55)
              {
LABEL_59:
                *(float64x2_t *)(a7 + v77) = vaddq_f64(v76, vmulq_n_f64(*v55, v44));
                *(float64x2_t *)(a7 + (v77 | 0x10)) = vaddq_f64(vmulq_n_f64(v65, v33), vmulq_n_f64(v55[v29], v44));
                *(float64x2_t *)(a7 + (v77 | 0x20)) = vaddq_f64(vmulq_n_f64(v66, v33), vmulq_n_f64(v55[2 * v29], v44));
                v59 = vaddq_f64(vmulq_n_f64(v60, v33), vmulq_n_f64(v55[3 * v29], v44));
                goto LABEL_52;
              }
            }
            *(float64x2_t *)(a7 + v77) = v76;
            v57 = (double *)(a7 + (v77 | 0x10));
            *v57 = v33 * v65.f64[0];
            v57[1] = vmuld_lane_f64(v33, v65, 1);
            v58 = (double *)(a7 + (v77 | 0x20));
            *v58 = v33 * v66.f64[0];
            v58[1] = vmuld_lane_f64(v33, v66, 1);
            v59 = vmulq_n_f64(v60, v33);
LABEL_52:
            *(float64x2_t *)(a7 + (v77 | 0x30)) = v59;
            v54 += 4;
            v55 += 4 * v29;
            v56 += 4;
            if (v54 > (int)v20 - 4)
            {
              v54 = v54;
              if ((int)v54 < (int)v20)
              {
LABEL_61:
                v78 = (float64_t *)(v51 + 8);
                v79 = (float64x2_t *)&a3[v54];
                do
                {
                  v80 = 0uLL;
                  if ((int)v19 >= 1)
                  {
                    v81 = v79;
                    v82 = v78;
                    v83 = v19;
                    do
                    {
                      v84.f64[0] = *v82;
                      v84.f64[1] = -*v82;
                      v85 = (int8x16_t)vmulq_f64(*v81, v84);
                      v80 = vaddq_f64(v80, vmlaq_n_f64((float64x2_t)vextq_s8(v85, v85, 8uLL), *v81, *(v82 - 1)));
                      v82 += 2;
                      v81 = (float64x2_t *)((char *)v81 + v50);
                      --v83;
                    }
                    while (v83);
                  }
                  v86 = vmulq_n_f64(v80, v33);
                  if (v55)
                    v86 = vaddq_f64(v86, vmulq_n_f64(*v55, v44));
                  *(float64x2_t *)(a7 + 16 * v54++) = v86;
                  v55 += v29;
                  ++v79;
                }
                while (v54 != v20);
              }
LABEL_39:
              ++v46;
              v32 += v31;
              v22 += v258;
              a7 += 16 * v26;
              if (v46 == (_DWORD)v260)
                goto LABEL_177;
              goto LABEL_40;
            }
          }
        }
        v87 = v23;
        v245 = a4 >> 4;
        v246 = v31;
        bzero(v262, 0x480uLL);
        v88 = v253;
        v89 = v254;
        if (v254 >= 0x49)
          operator new[]();
        v90 = a1;
        v91 = v22;
        v92 = a10;
        v93 = a9;
        v94 = v249;
        if ((int)v260 < 1)
          goto LABEL_177;
        v95 = 0;
        v96 = 16 * v20;
        v97 = 16 * v19;
        v98 = 16 * v87;
        if (v253)
          v99 = (int)v19 < 1;
        else
          v99 = 1;
        v247 = 16 * v246;
        v100 = v99;
        v244 = v100;
        v259 = v258;
        v101 = 16 * v29;
        v102 = v96 & 0xFFFFFFFC0;
        v243 = v96 & 0xFFFFFFFC0;
        while (1)
        {
          if (!v88)
            v88 = v90;
          v256 = v91;
          if ((v244 & 1) == 0)
          {
            v103 = 0;
            v104 = v90;
            v88 = v253;
            do
            {
              *(_OWORD *)&v253[v103] = *v104;
              v103 += 16;
              v104 = (_OWORD *)((char *)v104 + v98);
            }
            while (v97 != v103);
          }
          if (v89 >= 1)
          {
            v252 = v90;
            v261 = v95;
            bzero(v262, v96);
            v102 = v243;
            v101 = 16 * v29;
            v98 = 16 * v87;
            v97 = 16 * v19;
            v96 = 16 * v20;
            v95 = v261;
            v94 = v249;
            v89 = v20;
            v93 = a9;
            v92 = a10;
            v90 = v252;
          }
          if ((int)v19 >= 1)
          {
            v105 = 0;
            v106 = a3;
            do
            {
              v107 = (double *)&v88[16 * v105];
              v108 = *(uint64_t *)v107;
              v109 = *((uint64_t *)v107 + 1);
              if ((int)v20 >= 4)
              {
                v111 = 0;
                v112 = 0;
                do
                {
                  v113 = (double *)&v262[v111 * 16 + 56];
                  v114 = *(double *)&v106[v111];
                  v115 = *((double *)&v106[v111] + 1);
                  v116 = v114 * *(double *)&v108 - v115 * *(double *)&v109;
                  v117 = *(double *)&v108 * v115 + v114 * *(double *)&v109;
                  v118 = *(double *)&v262[v111 * 16] + v116;
                  v119 = *(double *)&v262[v111 * 16 + 8] + v117;
                  v120 = *(double *)&v106[v111 + 1];
                  v121 = *((double *)&v106[v111 + 1] + 1);
                  v122 = v120 * *(double *)&v108 - v121 * *(double *)&v109;
                  v123 = *(double *)&v108 * v121 + v120 * *(double *)&v109;
                  v124 = *(double *)&v262[v111 * 16 + 16] + v122;
                  v125 = *(double *)&v262[v111 * 16 + 24] + v123;
                  *(v113 - 7) = v118;
                  *(v113 - 6) = v119;
                  *(v113 - 5) = v124;
                  *(v113 - 4) = v125;
                  v126 = *(double *)&v106[v111 + 2];
                  v127 = *((double *)&v106[v111 + 2] + 1);
                  v128 = v126 * *(double *)&v108 - v127 * *(double *)&v109;
                  v129 = *(double *)&v108 * v127 + v126 * *(double *)&v109;
                  v130 = *(double *)&v262[v111 * 16 + 32] + v128;
                  v131 = *(double *)&v262[v111 * 16 + 40] + v129;
                  v132 = *(double *)&v106[v111 + 3];
                  v133 = *((double *)&v106[v111 + 3] + 1);
                  v134 = v132 * *(double *)&v108 - v133 * *(double *)&v109;
                  v135 = *(double *)&v108 * v133 + v132 * *(double *)&v109;
                  v136 = *(double *)&v262[v111 * 16 + 48] + v134;
                  v137 = *(double *)&v262[v111 * 16 + 56] + v135;
                  *(v113 - 3) = v130;
                  *(v113 - 2) = v131;
                  *(v113 - 1) = v136;
                  *v113 = v137;
                  v112 += 4;
                  v111 += 4;
                }
                while (v112 <= (int)v20 - 4);
                v110 = v112;
                if ((int)v112 >= v89)
                  goto LABEL_88;
              }
              else
              {
                v110 = 0;
                if (v89 <= 0)
                  goto LABEL_88;
              }
              v138 = v20 - v110;
              if ((unint64_t)(v20 - v110) >= 2)
              {
                v139 = (v138 & 0xFFFFFFFFFFFFFFFELL) + v110;
                v140 = (float64x2_t)vdupq_lane_s64(v109, 0);
                v141 = (float64x2_t)vdupq_lane_s64(v108, 0);
                v142 = v110;
                v143 = v138 & 0xFFFFFFFFFFFFFFFELL;
                do
                {
                  v144 = (const double *)&v106[v142];
                  v268 = vld2q_f64(v144);
                  v145 = vmlaq_f64(vmulq_n_f64(vnegq_f64(v268.val[1]), *(double *)&v109), v141, v268.val[0]);
                  v146 = vmlaq_f64(vmulq_n_f64(v268.val[1], *(double *)&v108), v140, v268.val[0]);
                  v147 = (double *)&v262[v142 * 16];
                  v269 = vld2q_f64(v147);
                  v272.val[0] = vaddq_f64(v269.val[0], v145);
                  v272.val[1] = vaddq_f64(v146, v269.val[1]);
                  vst2q_f64(v147, v272);
                  v142 += 2;
                  v143 -= 2;
                }
                while (v143);
                if (v138 == (v138 & 0xFFFFFFFFFFFFFFFELL))
                  goto LABEL_88;
              }
              else
              {
                v139 = v110;
              }
              v148 = v20 - v139;
              v149 = v139;
              do
              {
                v150 = *(double *)&v106[v149];
                v151 = *((double *)&v106[v149] + 1);
                v152 = v150 * *(double *)&v108 - v151 * *(double *)&v109;
                v153 = (double *)&v262[v149 * 16];
                v154 = *(double *)&v108 * v151 + v150 * *(double *)&v109 + *(double *)&v262[v149 * 16 + 8];
                *v153 = *(double *)&v262[v149 * 16] + v152;
                v153[1] = v154;
                ++v149;
                --v148;
              }
              while (v148);
LABEL_88:
              ++v105;
              v106 += v245;
            }
            while (v105 != v19);
          }
          if (v256)
          {
            v88 = v253;
            if (v89 >= 1)
            {
              v155 = 0;
              v156 = v256;
              do
              {
                *(float64x2_t *)(a7 + v155) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v262[v155], v93), vmulq_n_f64(*v156, v92));
                v155 += 16;
                v156 = (float64x2_t *)((char *)v156 + v101);
              }
              while (v96 != v155);
            }
            goto LABEL_78;
          }
          v88 = v253;
          if ((int)v20 >= 1)
          {
            if (v89 >= 4)
            {
              v158 = 0;
              do
              {
                v159 = (const double *)&v262[v158];
                v266 = vld2q_f64(v159);
                v159 += 4;
                v267 = vld2q_f64(v159);
                v270.val[0] = vmulq_n_f64(v266.val[0], v93);
                v270.val[1] = vmulq_n_f64(v266.val[1], v93);
                v266.val[0] = vmulq_n_f64(v267.val[0], v93);
                v266.val[1] = vmulq_n_f64(v267.val[1], v93);
                v160 = (double *)(a7 + v158);
                vst2q_f64(v160, v270);
                v160 += 4;
                vst2q_f64(v160, v266);
                v158 += 64;
              }
              while (v102 != v158);
              v157 = v20 & 0xFFFFFFFC;
              if (v157 == v20)
                goto LABEL_78;
            }
            else
            {
              v157 = 0;
            }
            do
            {
              *(float64x2_t *)(a7 + 16 * v157) = vmulq_n_f64(*(float64x2_t *)&v262[16 * v157], v93);
              ++v157;
            }
            while (v20 != v157);
          }
LABEL_78:
          ++v95;
          v90 = (_OWORD *)((char *)v90 + v247);
          v91 = &v256[v259];
          a7 += 16 * v26;
          if (v95 == v94)
            goto LABEL_177;
        }
      }
      goto LABEL_118;
    }
  }
LABEL_13:
  v35 = v23;
  v36 = v21;
  bzero(v262, 0x480uLL);
  if (v36 < 0x20)
  {
    v37 = a1;
    v39 = (int)v20;
    v41 = v22;
    v42 = a10;
    v38 = a9;
    v40 = v249;
    if (a4 < 0x20)
      goto LABEL_161;
    goto LABEL_155;
  }
  v37 = a1;
  v38 = a9;
  v39 = (int)v20;
  v40 = v249;
  if ((int)v19 < 2)
  {
    v41 = v22;
    v42 = a10;
    if (a4 < 0x20)
      goto LABEL_161;
    goto LABEL_155;
  }
  v264 = v260;
  if (v249 >= 0x49)
    operator new[]();
  v41 = v22;
  v42 = a10;
  if ((int)v249 >= 1)
  {
    v43 = 0;
    do
    {
      *(_OWORD *)&v265[v43] = *v37;
      v43 += 16;
      v37 += v35;
    }
    while (16 * v249 != v43);
  }
  v37 = v265;
  if (a4 >= 0x20)
  {
LABEL_155:
    if (v39 > 0x48)
      operator new[]();
    if ((int)v39 >= 1)
    {
      v215 = v262;
      v216 = v39;
      do
      {
        *v215++ = *a3;
        a3 += a4 >> 4;
        --v216;
      }
      while (v216);
    }
    a3 = v262;
  }
LABEL_161:
  if ((int)v40 >= 1)
  {
    for (i = 0; i != v40; ++i)
    {
      v218 = (double *)&v37[i];
      v219 = *v218 * v38;
      v220.f64[0] = v218[1] * v38;
      if ((int)v39 >= 2)
      {
        v223 = 0;
        v221 = 0;
        v224 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v219, 0);
        v225.f64[0] = v218[1] * v38;
        v225.f64[1] = -v220.f64[0];
        v222 = v41;
        do
        {
          v227 = (float64x2_t)a3[v223];
          v228 = (float64x2_t)a3[v223 + 1];
          v229 = (int8x16_t)vmulq_f64(v227, v225);
          v230 = vmlaq_f64((float64x2_t)vextq_s8(v229, v229, 8uLL), v227, v224);
          v231 = (int8x16_t)vmulq_f64(v228, v225);
          v226 = vmlaq_f64((float64x2_t)vextq_s8(v231, v231, 8uLL), v228, v224);
          if (v222)
          {
            *(float64x2_t *)(a7 + v223 * 16) = vaddq_f64(v230, vmulq_n_f64(*v222, v42));
            v226 = vaddq_f64(v226, vmulq_n_f64(v222[v29], v42));
          }
          else
          {
            *(float64x2_t *)(a7 + v223 * 16) = v230;
          }
          *(float64x2_t *)(a7 + v223 * 16 + 16) = v226;
          v221 += 2;
          v223 += 2;
          v222 += 2 * v29;
        }
        while (v221 <= (uint64_t)(v39 - 2));
        v221 = v221;
        if ((int)v221 < (int)v20)
        {
LABEL_173:
          v232 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v219, 0);
          do
          {
            v233 = (float64x2_t)a3[v221];
            v220.f64[1] = -v220.f64[0];
            v234 = (int8x16_t)vmulq_f64(v233, v220);
            v235 = vmlaq_f64((float64x2_t)vextq_s8(v234, v234, 8uLL), v233, v232);
            if (v222)
              v235 = vaddq_f64(v235, vmulq_n_f64(*v222, v42));
            *(float64x2_t *)(a7 + 16 * v221++) = v235;
            v222 += v29;
          }
          while (v20 != v221);
        }
      }
      else
      {
        v221 = 0;
        v222 = v41;
        if ((int)v20 > 0)
          goto LABEL_173;
      }
      v41 += v258;
      a7 += 16 * v26;
    }
  }
LABEL_177:
  result = v263;
  if (v263 != v265 && v263 != 0)
    operator delete[]();
  return result;
}

void sub_100249884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (STACK[0x558] != a12)
  {
    if (STACK[0x558])
      operator delete[]();
  }
  _Unwind_Resume(a1);
}

_BYTE *sub_1002498EC(_OWORD *a1, unint64_t a2, float64x2_t *a3, unint64_t a4, uint64_t a5, unint64_t a6, int *a7, int *a8, char a9)
{
  int v13;
  int v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _OWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  float64x2_t *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  float64_t *v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t *v39;
  float64_t *v40;
  uint64_t v41;
  float64x2_t v42;
  int8x16_t v43;
  float64x2_t *v44;
  float64x2_t v45;
  uint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64_t *v50;
  float64x2_t *v51;
  uint64_t v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  int8x16_t v57;
  int8x16_t v58;
  float64x2_t v59;
  int8x16_t v60;
  int8x16_t v61;
  BOOL v62;
  char v63;
  int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  _OWORD *v75;
  uint64_t v76;
  _BYTE *v77;
  float64x2_t *v78;
  double *v79;
  double v80;
  double v81;
  double v82;
  double *v83;
  unsigned int v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const double *v89;
  const double *f64;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  uint64_t v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const double *v111;
  const double *v112;
  const double *v113;
  const double *v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  uint64_t v119;
  double v120;
  double v121;
  double v122;
  double v123;
  int i;
  _OWORD *v125;
  _OWORD *v126;
  uint64_t v127;
  char v129;
  uint64_t v130;
  int v131;
  uint64_t v133;
  uint64_t v134;
  int v135;
  _BYTE v137[1160];
  float64x2x2_t v138;
  float64x2x2_t v139;
  float64x2x2_t v140;
  float64x2x2_t v141;
  float64x2x4_t v142;
  float64x2x4_t v143;
  float64x2x4_t v144;
  float64x2x4_t v145;

  v14 = *a7;
  v13 = a7[1];
  v133 = *a8;
  v135 = a8[1];
  bzero(v137, 0x480uLL);
  v15 = a2 >> 4;
  if ((a9 & 1) != 0)
  {
    if (v13 >= 0x49)
      operator new[]();
    v17 = 1;
    v16 = v137;
  }
  else
  {
    v16 = 0;
    v13 = v14;
    v17 = v15;
    v15 = 1;
  }
  v18 = a1;
  v19 = v135;
  v20 = v133;
  v21 = v133;
  v22 = a4 >> 4;
  v23 = a6 >> 4;
  if ((a9 & 2) == 0)
  {
    if (v135 >= 1)
    {
      v24 = 0;
      v25 = 16 * v17;
      if (v16)
        v26 = v13 < 1;
      else
        v26 = 1;
      v27 = v26;
      v28 = 16 * v15;
      v29 = a3 + 2;
      v30 = 16 * v22;
      v130 = v25;
      v129 = v27;
      do
      {
        if (v16)
          v31 = v16;
        else
          v31 = v18;
        if ((v27 & 1) == 0)
        {
          v32 = 0;
          v33 = v18;
          do
          {
            *(_OWORD *)&v16[v32] = *v33;
            v32 += 16;
            v33 = (_OWORD *)((char *)v33 + v28);
          }
          while (16 * v13 != v32);
          v31 = v16;
        }
        if (v20 >= 4)
        {
          v34 = 0;
          v44 = v29;
          do
          {
            v45 = 0uLL;
            v46 = 16 * v34;
            v47 = 0uLL;
            v48 = 0uLL;
            v49 = 0uLL;
            if ((a9 & 0x10) != 0)
            {
              v45 = *(float64x2_t *)(a5 + 16 * v34);
              v47 = *(float64x2_t *)(a5 + (v46 | 0x10));
              v48 = *(float64x2_t *)(a5 + (v46 | 0x20));
              v49 = *(float64x2_t *)(a5 + (v46 | 0x30));
            }
            if (v13 >= 1)
            {
              v50 = (float64_t *)(v31 + 8);
              v51 = v44;
              v52 = v13;
              do
              {
                v53.f64[0] = *v50;
                v53.f64[1] = -*v50;
                v54 = *(v50 - 1);
                v55 = v51[-2];
                v56 = v51[-1];
                v57 = (int8x16_t)vmulq_f64(v55, v53);
                v45 = vaddq_f64(v45, vmlaq_n_f64((float64x2_t)vextq_s8(v57, v57, 8uLL), v55, v54));
                v58 = (int8x16_t)vmulq_f64(v56, v53);
                v47 = vaddq_f64(v47, vmlaq_n_f64((float64x2_t)vextq_s8(v58, v58, 8uLL), v56, v54));
                v59 = v51[1];
                v60 = (int8x16_t)vmulq_f64(*v51, v53);
                v48 = vaddq_f64(v48, vmlaq_n_f64((float64x2_t)vextq_s8(v60, v60, 8uLL), *v51, v54));
                v61 = (int8x16_t)vmulq_f64(v59, v53);
                v49 = vaddq_f64(v49, vmlaq_n_f64((float64x2_t)vextq_s8(v61, v61, 8uLL), v59, v54));
                v51 = (float64x2_t *)((char *)v51 + v30);
                v50 += 2;
                --v52;
              }
              while (v52);
            }
            *(float64x2_t *)(a5 + 16 * v34) = v45;
            *(float64x2_t *)(a5 + (v46 | 0x10)) = v47;
            *(float64x2_t *)(a5 + (v46 | 0x20)) = v48;
            *(float64x2_t *)(a5 + (v46 | 0x30)) = v49;
            v34 += 4;
            v44 += 4;
          }
          while (v34 <= v133 - 4);
        }
        else
        {
          LODWORD(v34) = 0;
        }
        if ((int)v34 < (int)v133)
        {
          v35 = v34;
          if (v13 < 1)
          {
            if ((a9 & 0x10) == 0)
            {
              v131 = v24;
              bzero((void *)(a5 + 16 * v34), 16 * (v133 + ~(_DWORD)v34) + 16);
              v29 = a3 + 2;
              v27 = v129;
              v25 = v130;
              v23 = a6 >> 4;
              v24 = v131;
              v20 = v133;
              v19 = v135;
            }
          }
          else
          {
            v36 = (float64_t *)(v31 + 8);
            v37 = &a3[v34];
            do
            {
              v38 = 0uLL;
              if ((a9 & 0x10) != 0)
                v38 = *(float64x2_t *)(a5 + 16 * v35);
              v39 = v37;
              v40 = v36;
              v41 = v13;
              do
              {
                v42.f64[0] = *v40;
                v42.f64[1] = -*v40;
                v43 = (int8x16_t)vmulq_f64(*v39, v42);
                v38 = vaddq_f64(v38, vmlaq_n_f64((float64x2_t)vextq_s8(v43, v43, 8uLL), *v39, *(v40 - 1)));
                v40 += 2;
                v39 = (float64x2_t *)((char *)v39 + v30);
                --v41;
              }
              while (v41);
              *(float64x2_t *)(a5 + 16 * v35++) = v38;
              ++v37;
            }
            while (v35 != v133);
          }
        }
        ++v24;
        v18 = (_OWORD *)((char *)v18 + v25);
        a5 += 16 * v23;
      }
      while (v24 != v19);
    }
    return v137;
  }
  if (v135 < 1)
    return v137;
  if (v16)
    v62 = v13 < 1;
  else
    v62 = 1;
  v63 = v62;
  if ((int)v133 < 1)
  {
    if ((v63 & 1) == 0)
    {
      for (i = 0; i != v135; ++i)
      {
        v125 = v18;
        v126 = v16;
        v127 = v13;
        do
        {
          *v126++ = *v125;
          v125 += v15;
          --v127;
        }
        while (v127);
        v18 += v17;
      }
    }
    return v137;
  }
  v64 = 0;
  v65 = v13 - 2;
  if (v13 - 2 <= 1)
    v66 = 1;
  else
    v66 = v65;
  v67 = (v66 >> 1) + 1;
  v134 = 16 * v17;
  v68 = (v65 & 0xFFFFFFFE) + 2;
  v69 = 16 * v15;
  v70 = 16 * v22;
  v71 = v63;
  while (2)
  {
    v72 = v23;
    if (v16)
      v73 = v16;
    else
      v73 = v18;
    if ((v63 & 1) == 0)
    {
      v74 = 0;
      v75 = v18;
      do
      {
        *(_OWORD *)&v16[v74] = *v75;
        v74 += 16;
        v75 = (_OWORD *)((char *)v75 + v69);
      }
      while (16 * v13 != v74);
      v73 = v16;
    }
    v76 = 0;
    v77 = v73 + 16;
    v78 = a3;
    do
    {
      v80 = 0.0;
      v81 = 0.0;
      v82 = 0.0;
      if ((a9 & 0x10) != 0)
      {
        v83 = (double *)(a5 + 16 * v76);
        v81 = *v83;
        v82 = v83[1];
      }
      if (v13 < 2)
      {
        v84 = 0;
        v85 = 0.0;
        goto LABEL_78;
      }
      if (v66 < 6)
      {
        v86 = 0;
        v85 = 0.0;
LABEL_75:
        v95 = v86;
        do
        {
          v96 = *(double *)&v73[v95 * 16];
          v97 = *(double *)&v77[v95 * 16 - 8];
          v98 = v78[v95].f64[0];
          v99 = v78[v95].f64[1];
          v81 = v81 + v96 * v98 - v97 * v99;
          v82 = v82 + v97 * v98 + v96 * v99;
          v100 = *(double *)&v77[v95 * 16];
          v101 = *(double *)&v77[v95 * 16 + 8];
          v102 = v78[v95 + 1].f64[0];
          v103 = v78[v95 + 1].f64[1];
          v80 = v80 + v100 * v102 - v101 * v103;
          v85 = v85 + v101 * v102 + v100 * v103;
          v86 += 2;
          v95 += 2;
        }
        while (v86 <= v13 - 2);
        v84 = v68;
        goto LABEL_78;
      }
      v87 = 0;
      v85 = 0.0;
      v88 = v67 & 0x7FFFFFFC;
      do
      {
        v89 = (const double *)&v73[v87 * 16];
        v142 = vld4q_f64(v89);
        v89 += 8;
        v144 = vld4q_f64(v89);
        f64 = v78[v87].f64;
        v145 = vld4q_f64(f64);
        f64 += 8;
        v91 = vmlaq_f64(vmulq_f64(v145.val[1], vnegq_f64(v142.val[1])), v145.val[0], v142.val[0]);
        v92 = vmlaq_f64(vmulq_f64(v142.val[1], v145.val[0]), v145.val[1], v142.val[0]);
        v93 = vmlaq_f64(vmulq_f64(v145.val[3], vnegq_f64(v142.val[3])), v145.val[2], v142.val[2]);
        v94 = vmlaq_f64(vmulq_f64(v142.val[3], v145.val[2]), v145.val[3], v142.val[2]);
        v143 = vld4q_f64(f64);
        v145.val[0] = vmlaq_f64(vmulq_f64(v143.val[1], vnegq_f64(v144.val[1])), v143.val[0], v144.val[0]);
        v145.val[1] = vmlaq_f64(vmulq_f64(v144.val[1], v143.val[0]), v143.val[1], v144.val[0]);
        v145.val[2] = vmlaq_f64(vmulq_f64(v143.val[3], vnegq_f64(v144.val[3])), v143.val[2], v144.val[2]);
        v145.val[3] = vmlaq_f64(vmulq_f64(v144.val[3], v143.val[2]), v143.val[3], v144.val[2]);
        v82 = v82 + v92.f64[0] + v92.f64[1] + v145.val[1].f64[0] + v145.val[1].f64[1];
        v81 = v81 + v91.f64[0] + v91.f64[1] + v145.val[0].f64[0] + v145.val[0].f64[1];
        v85 = v85 + v94.f64[0] + v94.f64[1] + v145.val[3].f64[0] + v145.val[3].f64[1];
        v80 = v80 + v93.f64[0] + v93.f64[1] + v145.val[2].f64[0] + v145.val[2].f64[1];
        v87 += 8;
        v88 -= 4;
      }
      while (v88);
      v86 = 2 * (v67 & 0x7FFFFFFC);
      v84 = v68;
      if (v67 != (v67 & 0x7FFFFFFC))
        goto LABEL_75;
LABEL_78:
      if ((int)v84 >= v13)
        goto LABEL_65;
      v104 = v84;
      v105 = v13 + ~v84;
      if (v105 < 3)
      {
        v106 = v84;
LABEL_84:
        v119 = v106;
        do
        {
          v120 = *(double *)&v73[v119 * 16];
          v121 = *(double *)&v73[v119 * 16 + 8];
          v122 = v78[v119].f64[0];
          v123 = v78[v119].f64[1];
          v81 = v81 + v120 * v122 - v121 * v123;
          v82 = v82 + v121 * v122 + v120 * v123;
          LODWORD(v106) = v106 + 1;
          ++v119;
        }
        while (v13 > (int)v106);
        goto LABEL_65;
      }
      v107 = v105 + 1;
      v108 = (v105 + 1) & 0x1FFFFFFFCLL;
      v106 = v108 + v104;
      v109 = 16 * v104 + 32;
      v110 = v108;
      do
      {
        v111 = (const double *)&v73[v109];
        v112 = (const double *)&v73[v109 - 32];
        v138 = vld2q_f64(v112);
        v139 = vld2q_f64(v111);
        v113 = (const double *)((char *)v78->f64 + v109);
        v114 = (const double *)((char *)v78[-2].f64 + v109);
        v140 = vld2q_f64(v114);
        v141 = vld2q_f64(v113);
        v115 = vmlaq_f64(vmulq_f64(v140.val[1], vnegq_f64(v138.val[1])), v140.val[0], v138.val[0]);
        v116 = vmlaq_f64(vmulq_f64(v141.val[1], vnegq_f64(v139.val[1])), v141.val[0], v139.val[0]);
        v117 = vmlaq_f64(vmulq_f64(v138.val[1], v140.val[0]), v140.val[1], v138.val[0]);
        v118 = vmlaq_f64(vmulq_f64(v139.val[1], v141.val[0]), v141.val[1], v139.val[0]);
        v82 = v82 + v117.f64[0] + v117.f64[1] + v118.f64[0] + v118.f64[1];
        v81 = v81 + v115.f64[0] + v115.f64[1] + v116.f64[0] + v116.f64[1];
        v109 += 64;
        v110 -= 4;
      }
      while (v110);
      if (v107 != v108)
        goto LABEL_84;
LABEL_65:
      v79 = (double *)(a5 + 16 * v76);
      *v79 = v80 + v81;
      v79[1] = v85 + v82;
      ++v76;
      v78 = (float64x2_t *)((char *)v78 + v70);
    }
    while (v76 != v21);
    ++v64;
    v18 = (_OWORD *)((char *)v18 + v134);
    v23 = v72;
    a5 += 16 * v72;
    v63 = v71;
    if (v64 != v135)
      continue;
    return v137;
  }
}

void sub_10024A03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  if (a20 != v20)
  {
    if (a20)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

float64x2_t *sub_10024A06C(float64x2_t *result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, char a8, double a9, double a10)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t *v28;
  uint64_t v29;
  unint64_t v30;
  float64x2_t *v31;
  float64x2_t *v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  uint64_t v39;
  unint64_t i;
  float64x2_t *v41;
  float64x2_t v42;
  float64x2_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  const double *v48;
  double *v49;
  float64x2x2_t v50;
  float64x2x2_t v51;
  float64x2x2_t v52;

  v10 = a7[1];
  v11 = a2 >> 4;
  if ((a8 & 4) != 0)
    v12 = a2 >> 4;
  else
    v12 = 1;
  if ((a8 & 4) != 0)
    v11 = 1;
  if (result)
    v13 = v12;
  else
    v13 = 0;
  if (result)
    v14 = v11;
  else
    v14 = 0;
  if (v10)
  {
    v15 = 0;
    v16 = *a7;
    v17 = (v16 - 4);
    v18 = 16 * v16;
    v19 = a6 & 0xFFFFFFFFFFFFFFF0;
    v20 = 16 * v14;
    v21 = a4 & 0xFFFFFFFFFFFFFFF0;
    v22 = v13 << 6;
    v23 = 16 * (a6 >> 4);
    v24 = 16 * (a4 >> 4);
    v25 = v13;
    v26 = a3;
    v27 = a5;
    do
    {
      if (result)
      {
        if ((int)v16 >= 4)
        {
          v29 = 0;
          v30 = 0;
          v31 = result;
          do
          {
            v32 = v31;
            v33 = (float64x2_t *)(v27 + v29);
            v34 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v26 + v29 + 16), a9), vmulq_n_f64(v31[v25], a10));
            *v33 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v26 + v29), a9), vmulq_n_f64(*v31, a10));
            v33[1] = v34;
            v35 = &v31[v25 + v25];
            v36 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v26 + v29 + 32), a9), vmulq_n_f64(*v35, a10));
            v37 = &v35[v25];
            v38 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v26 + v29 + 48), a9), vmulq_n_f64(*v37, a10));
            v33[2] = v36;
            v33[3] = v38;
            v30 += 4;
            v29 += 64;
            v31 = &v37[v25];
          }
          while (v30 <= v17);
          v28 = (float64x2_t *)((char *)v32 + v22);
          v30 = v30;
          if ((int)v30 >= (int)v16)
            goto LABEL_14;
          do
          {
LABEL_26:
            *(float64x2_t *)(v27 + 16 * v30) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v26 + 16 * v30), a9), vmulq_n_f64(*v28, a10));
            ++v30;
            v28 = (float64x2_t *)((char *)v28 + v25 * 16);
          }
          while (v16 != v30);
          goto LABEL_14;
        }
        v30 = 0;
        v28 = result;
        if ((int)v16 > 0)
          goto LABEL_26;
      }
      else if ((int)v16 < 4)
      {
        i = 0;
        if ((int)v16 > 0)
          goto LABEL_30;
      }
      else
      {
        v39 = 0;
        for (i = 0; i <= v17; i += 4)
        {
          v41 = (float64x2_t *)(v27 + v39);
          v42 = vmulq_n_f64(*(float64x2_t *)(v26 + v39 + 16), a9);
          *v41 = vmulq_n_f64(*(float64x2_t *)(v26 + v39), a9);
          v41[1] = v42;
          v43 = vmulq_n_f64(*(float64x2_t *)(v26 + v39 + 48), a9);
          v41[2] = vmulq_n_f64(*(float64x2_t *)(v26 + v39 + 32), a9);
          v41[3] = v43;
          v39 += 64;
        }
        i = i;
        if ((int)i < (int)v16)
        {
LABEL_30:
          v44 = v16 - i;
          if (v16 - i < 4)
            goto LABEL_43;
          v45 = 16 * i;
          if (v27 + 16 * i < a3 + v18 + v21 * v15 && v26 + 16 * i < a5 + v18 + v19 * v15)
            goto LABEL_43;
          i += v44 & 0xFFFFFFFFFFFFFFFCLL;
          v47 = v44 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v48 = (const double *)(v26 + v45);
            v50 = vld2q_f64(v48);
            v48 += 4;
            v51 = vld2q_f64(v48);
            v52.val[0] = vmulq_n_f64(v50.val[0], a9);
            v52.val[1] = vmulq_n_f64(v50.val[1], a9);
            v50.val[0] = vmulq_n_f64(v51.val[0], a9);
            v50.val[1] = vmulq_n_f64(v51.val[1], a9);
            v49 = (double *)(v27 + v45);
            vst2q_f64(v49, v52);
            v49 += 4;
            vst2q_f64(v49, v50);
            v45 += 64;
            v47 -= 4;
          }
          while (v47);
          if (v44 != (v44 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_43:
            do
            {
              *(float64x2_t *)(v27 + 16 * i) = vmulq_n_f64(*(float64x2_t *)(v26 + 16 * i), a9);
              ++i;
            }
            while (v16 != i);
          }
        }
      }
LABEL_14:
      result = (float64x2_t *)((char *)result + v20);
      v26 += v24;
      v27 += v23;
      ++v15;
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_10024A308(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;
  __int128 v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  _BYTE *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  __int128 v59;
  void *v60;
  _QWORD *v61;
  __int128 v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  _BYTE *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  _BYTE *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  _BYTE *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  _BYTE *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  __int128 v97;
  _QWORD *v98;
  _QWORD *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  __int128 v113;
  __int128 v114;
  _QWORD *v115;
  _QWORD *v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  _OWORD v123[2];
  _BYTE v124[64];
  _BYTE *v125;
  void *v126;
  _QWORD v127[2];
  _BYTE v128[64];
  _BYTE *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE v133[64];
  _BYTE *v134;
  void *v135;
  _QWORD v136[2];
  _BYTE v137[64];
  _BYTE *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE v142[80];
  _BYTE *v143;
  _BYTE *v144;
  _BYTE v145[16];
  _BYTE v146[96];
  _BYTE v147[96];
  __int128 v148;
  __int128 v149;
  __int128 v150;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v9 = *a2;
    v10 = *((_DWORD *)a2 + 2);
    *(_DWORD *)v137 = 1124007936;
    memset(&v137[4], 0, 60);
    v138 = &v137[8];
    v139 = &v140;
    v140 = 0;
    v141 = 0;
    *(_DWORD *)v133 = 1124007936;
    memset(&v133[4], 0, 60);
    v134 = &v133[8];
    v135 = v136;
    v136[0] = 0;
    v136[1] = 0;
    *(_DWORD *)v128 = 1124007936;
    memset(&v128[4], 0, 60);
    v129 = &v128[8];
    v130 = &v131;
    v131 = 0;
    v132 = 0;
    sub_100254384((uint64_t)v142, v9, v10, (uint64_t)v137, (uint64_t)v133, (uint64_t)v128, a2 + 40, *((double *)a2 + 38), *((double *)a2 + 39));
    *(_QWORD *)a5 = *(_QWORD *)v142;
    *(_DWORD *)(a5 + 8) = *(_DWORD *)&v142[8];
    if (v142 == (_BYTE *)a5)
    {
LABEL_29:
      sub_10024B080(a5 + 112, (uint64_t)v146);
      v122 = (_BYTE *)(a5 + 208);
      sub_10024B080(a5 + 208, (uint64_t)v147);
      v34 = v149;
      *(_OWORD *)(a5 + 304) = v148;
      *(_OWORD *)(a5 + 320) = v34;
      *(_OWORD *)(a5 + 336) = v150;
      sub_100008C98((uint64_t)v142);
      if (*(_QWORD *)&v128[56])
      {
        v35 = (unsigned int *)(*(_QWORD *)&v128[56] + 20);
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
          sub_100256C90((uint64_t)v128);
      }
      *(_QWORD *)&v128[56] = 0;
      memset(&v128[16], 0, 32);
      if (*(int *)&v128[4] >= 1)
      {
        v38 = 0;
        v39 = v129;
        do
          *(_DWORD *)&v39[4 * v38++] = 0;
        while (v38 < *(int *)&v128[4]);
      }
      if (v130 != &v131)
        j__free(v130);
      if (*(_QWORD *)&v133[56])
      {
        v40 = (unsigned int *)(*(_QWORD *)&v133[56] + 20);
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
          sub_100256C90((uint64_t)v133);
      }
      *(_QWORD *)&v133[56] = 0;
      memset(&v133[16], 0, 32);
      if (*(int *)&v133[4] >= 1)
      {
        v43 = 0;
        v44 = v134;
        do
          *(_DWORD *)&v44[4 * v43++] = 0;
        while (v43 < *(int *)&v133[4]);
      }
      if (v135 != v136)
        j__free(v135);
      if (*(_QWORD *)&v137[56])
      {
        v45 = (unsigned int *)(*(_QWORD *)&v137[56] + 20);
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
          sub_100256C90((uint64_t)v137);
      }
      *(_QWORD *)&v137[56] = 0;
      memset(&v137[16], 0, 32);
      if (*(int *)&v137[4] >= 1)
      {
        v48 = 0;
        v49 = v138;
        do
          *(_DWORD *)&v49[4 * v48++] = 0;
        while (v48 < *(int *)&v137[4]);
      }
      if (v139 != &v140)
        j__free(v139);
      if (!a2[4])
      {
LABEL_128:
        if (!a2[16])
          goto LABEL_154;
        v88 = *a4;
        *(_QWORD *)v137 = *a3;
        *(_QWORD *)v133 = v88;
        sub_100257548((uint64_t)v142, (_DWORD *)a2 + 28, (int *)v137, (uint64_t *)v133);
        if ((_BYTE *)(a5 + 112) == v142)
        {
          if (*(_QWORD *)&v142[56])
          {
            v100 = (unsigned int *)(*(_QWORD *)&v142[56] + 20);
            do
            {
              v101 = __ldaxr(v100);
              v102 = v101 - 1;
            }
            while (__stlxr(v102, v100));
            if (!v102)
              sub_100256C90((uint64_t)v142);
          }
          goto LABEL_149;
        }
        v89 = *(_QWORD *)(a5 + 168);
        if (v89)
        {
          v90 = (unsigned int *)(v89 + 20);
          do
          {
            v91 = __ldaxr(v90);
            v92 = v91 - 1;
          }
          while (__stlxr(v92, v90));
          if (!v92)
            sub_100256C90(a5 + 112);
        }
        *(_QWORD *)(a5 + 168) = 0;
        *(_OWORD *)(a5 + 128) = 0u;
        *(_OWORD *)(a5 + 144) = 0u;
        if (*(int *)(a5 + 116) >= 1)
        {
          v93 = 0;
          v94 = *(_QWORD *)(a5 + 176);
          do
            *(_DWORD *)(v94 + 4 * v93++) = 0;
          while (v93 < *(int *)(a5 + 116));
        }
        v95 = *(_DWORD *)&v142[4];
        v96 = *(_OWORD *)&v142[16];
        *(_OWORD *)(a5 + 112) = *(_OWORD *)v142;
        *(_OWORD *)(a5 + 128) = v96;
        v97 = *(_OWORD *)&v142[48];
        *(_OWORD *)(a5 + 144) = *(_OWORD *)&v142[32];
        *(_OWORD *)(a5 + 160) = v97;
        v98 = *(_QWORD **)(a5 + 184);
        if (v98 == (_QWORD *)(a5 + 192))
        {
          v99 = *(_QWORD **)&v142[72];
          if (v95 <= 2)
            goto LABEL_140;
        }
        else
        {
          j__free(v98);
          *(_QWORD *)(a5 + 176) = a5 + 120;
          *(_QWORD *)(a5 + 184) = a5 + 192;
          v98 = (_QWORD *)(a5 + 192);
          v99 = *(_QWORD **)&v142[72];
          if (*(int *)&v142[4] <= 2)
          {
LABEL_140:
            *v98 = *v99;
            v98[1] = v99[1];
LABEL_148:
            *(_DWORD *)v142 = 1124007936;
            memset(&v142[4], 0, 60);
LABEL_149:
            *(_QWORD *)&v142[56] = 0;
            memset(&v142[16], 0, 32);
            if (*(int *)&v142[4] >= 1)
            {
              v103 = 0;
              v104 = *(_QWORD *)&v142[64];
              do
                *(_DWORD *)(v104 + 4 * v103++) = 0;
              while (v103 < *(int *)&v142[4]);
            }
            if (*(_BYTE ***)&v142[72] != &v143)
              j__free(*(void **)&v142[72]);
LABEL_154:
            if (!a2[28])
              return;
            v105 = *a4;
            *(_QWORD *)v137 = *a3;
            *(_QWORD *)v133 = v105;
            sub_100257548((uint64_t)v142, (_DWORD *)a2 + 52, (int *)v137, (uint64_t *)v133);
            if (v122 == v142)
            {
              if (*(_QWORD *)&v142[56])
              {
                v117 = (unsigned int *)(*(_QWORD *)&v142[56] + 20);
                do
                {
                  v118 = __ldaxr(v117);
                  v119 = v118 - 1;
                }
                while (__stlxr(v119, v117));
                if (!v119)
                  sub_100256C90((uint64_t)v142);
              }
              goto LABEL_175;
            }
            v106 = *(_QWORD *)(a5 + 264);
            if (v106)
            {
              v107 = (unsigned int *)(v106 + 20);
              do
              {
                v108 = __ldaxr(v107);
                v109 = v108 - 1;
              }
              while (__stlxr(v109, v107));
              if (!v109)
                sub_100256C90((uint64_t)v122);
            }
            *(_QWORD *)(a5 + 264) = 0;
            *(_OWORD *)(a5 + 224) = 0u;
            *(_OWORD *)(a5 + 240) = 0u;
            if (*(int *)(a5 + 212) >= 1)
            {
              v110 = 0;
              v111 = *(_QWORD *)(a5 + 272);
              do
                *(_DWORD *)(v111 + 4 * v110++) = 0;
              while (v110 < *(int *)(a5 + 212));
            }
            v112 = *(_DWORD *)&v142[4];
            v113 = *(_OWORD *)&v142[16];
            *(_OWORD *)(a5 + 208) = *(_OWORD *)v142;
            *(_OWORD *)(a5 + 224) = v113;
            v114 = *(_OWORD *)&v142[48];
            *(_OWORD *)(a5 + 240) = *(_OWORD *)&v142[32];
            *(_OWORD *)(a5 + 256) = v114;
            v115 = *(_QWORD **)(a5 + 280);
            if (v115 == (_QWORD *)(a5 + 288))
            {
              v116 = *(_QWORD **)&v142[72];
              if (v112 <= 2)
                goto LABEL_166;
            }
            else
            {
              j__free(v115);
              *(_QWORD *)(a5 + 272) = a5 + 216;
              *(_QWORD *)(a5 + 280) = a5 + 288;
              v115 = (_QWORD *)(a5 + 288);
              v116 = *(_QWORD **)&v142[72];
              if (*(int *)&v142[4] <= 2)
              {
LABEL_166:
                *v115 = *v116;
                v115[1] = v116[1];
LABEL_174:
                *(_DWORD *)v142 = 1124007936;
                memset(&v142[4], 0, 60);
LABEL_175:
                *(_QWORD *)&v142[56] = 0;
                memset(&v142[16], 0, 32);
                if (*(int *)&v142[4] >= 1)
                {
                  v120 = 0;
                  v121 = *(_QWORD *)&v142[64];
                  do
                    *(_DWORD *)(v121 + 4 * v120++) = 0;
                  while (v120 < *(int *)&v142[4]);
                }
                if (*(_BYTE ***)&v142[72] != &v143)
                  j__free(*(void **)&v142[72]);
                return;
              }
            }
            *(_QWORD *)(a5 + 272) = *(_QWORD *)&v142[64];
            *(_QWORD *)(a5 + 280) = v116;
            *(_QWORD *)&v142[64] = &v142[8];
            *(_QWORD *)&v142[72] = &v143;
            goto LABEL_174;
          }
        }
        *(_QWORD *)(a5 + 176) = *(_QWORD *)&v142[64];
        *(_QWORD *)(a5 + 184) = v99;
        *(_QWORD *)&v142[64] = &v142[8];
        *(_QWORD *)&v142[72] = &v143;
        goto LABEL_148;
      }
      v50 = *a4;
      *(_QWORD *)v137 = *a3;
      *(_QWORD *)v133 = v50;
      sub_100257548((uint64_t)v142, (_DWORD *)a2 + 4, (int *)v137, (uint64_t *)v133);
      if ((_BYTE *)(a5 + 16) == v142)
      {
        if (*(_QWORD *)&v142[56])
        {
          v83 = (unsigned int *)(*(_QWORD *)&v142[56] + 20);
          do
          {
            v84 = __ldaxr(v83);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, v83));
          if (!v85)
            sub_100256C90((uint64_t)v142);
        }
        goto LABEL_123;
      }
      v51 = *(_QWORD *)(a5 + 72);
      if (v51)
      {
        v52 = (unsigned int *)(v51 + 20);
        do
        {
          v53 = __ldaxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
          sub_100256C90(a5 + 16);
      }
      *(_QWORD *)(a5 + 72) = 0;
      *(_OWORD *)(a5 + 32) = 0u;
      *(_OWORD *)(a5 + 48) = 0u;
      if (*(int *)(a5 + 20) >= 1)
      {
        v55 = 0;
        v56 = *(_QWORD *)(a5 + 80);
        do
          *(_DWORD *)(v56 + 4 * v55++) = 0;
        while (v55 < *(int *)(a5 + 20));
      }
      v57 = *(_DWORD *)&v142[4];
      v58 = *(_OWORD *)&v142[16];
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v142;
      *(_OWORD *)(a5 + 32) = v58;
      v59 = *(_OWORD *)&v142[48];
      *(_OWORD *)(a5 + 48) = *(_OWORD *)&v142[32];
      *(_OWORD *)(a5 + 64) = v59;
      v60 = *(void **)(a5 + 88);
      if (v60 == (void *)(a5 + 96))
      {
        v61 = *(_QWORD **)&v142[72];
        if (v57 <= 2)
          goto LABEL_71;
      }
      else
      {
        j__free(v60);
        *(_QWORD *)(a5 + 80) = a5 + 24;
        *(_QWORD *)(a5 + 88) = a5 + 96;
        v61 = *(_QWORD **)&v142[72];
        if (*(int *)&v142[4] <= 2)
        {
LABEL_71:
          *(_QWORD *)(a5 + 96) = *v61;
          *(_QWORD *)(a5 + 104) = v61[1];
LABEL_122:
          *(_DWORD *)v142 = 1124007936;
          memset(&v142[4], 0, 60);
LABEL_123:
          *(_QWORD *)&v142[56] = 0;
          memset(&v142[16], 0, 32);
          if (*(int *)&v142[4] >= 1)
          {
            v86 = 0;
            v87 = *(_QWORD *)&v142[64];
            do
              *(_DWORD *)(v87 + 4 * v86++) = 0;
            while (v86 < *(int *)&v142[4]);
          }
          if (*(_BYTE ***)&v142[72] != &v143)
            j__free(*(void **)&v142[72]);
          goto LABEL_128;
        }
      }
      *(_QWORD *)(a5 + 80) = *(_QWORD *)&v142[64];
      *(_QWORD *)(a5 + 88) = v61;
      *(_QWORD *)&v142[64] = &v142[8];
      *(_QWORD *)&v142[72] = &v143;
      goto LABEL_122;
    }
    v11 = *(_QWORD *)(a5 + 72);
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 20);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        sub_100256C90(a5 + 16);
    }
    *(_QWORD *)(a5 + 72) = 0;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    if (*(int *)(a5 + 20) >= 1)
    {
      v15 = 0;
      v16 = *(_QWORD *)(a5 + 80);
      do
        *(_DWORD *)(v16 + 4 * v15++) = 0;
      while (v15 < *(int *)(a5 + 20));
    }
    v17 = *(_DWORD *)&v142[20];
    v18 = *(_OWORD *)&v142[32];
    *(_OWORD *)(a5 + 16) = *(_OWORD *)&v142[16];
    *(_OWORD *)(a5 + 32) = v18;
    v19 = *(_OWORD *)&v142[64];
    *(_OWORD *)(a5 + 48) = *(_OWORD *)&v142[48];
    *(_OWORD *)(a5 + 64) = v19;
    v20 = *(void **)(a5 + 88);
    if (v20 == (void *)(a5 + 96))
    {
      v21 = v144;
      if (v17 <= 2)
        goto LABEL_13;
    }
    else
    {
      j__free(v20);
      *(_QWORD *)(a5 + 80) = a5 + 24;
      *(_QWORD *)(a5 + 88) = a5 + 96;
      v21 = v144;
      if (*(int *)&v142[20] <= 2)
      {
LABEL_13:
        *(_QWORD *)(a5 + 96) = *v21;
        *(_QWORD *)(a5 + 104) = v21[1];
LABEL_28:
        *(_DWORD *)&v142[16] = 1124007936;
        memset(&v142[20], 0, 60);
        goto LABEL_29;
      }
    }
    *(_QWORD *)(a5 + 80) = v143;
    *(_QWORD *)(a5 + 88) = v21;
    v144 = v145;
    v143 = &v142[24];
    goto LABEL_28;
  }
  *(_DWORD *)v137 = 1124007936;
  memset(&v137[4], 0, 60);
  v138 = &v137[8];
  v139 = &v140;
  v140 = 0;
  v141 = 0;
  (*(void (**)(_QWORD, _QWORD *, _BYTE *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v137, 0xFFFFFFFFLL);
  v22 = *a4;
  *(_QWORD *)v128 = *a3;
  *(_QWORD *)v124 = v22;
  sub_100257548((uint64_t)v133, v137, (int *)v128, (uint64_t *)v124);
  *(_DWORD *)v128 = 1124007936;
  memset(&v128[4], 0, 60);
  v129 = &v128[8];
  v130 = &v131;
  v131 = 0;
  v132 = 0;
  *(_DWORD *)v124 = 1124007936;
  memset(&v124[4], 0, 60);
  v125 = &v124[8];
  v126 = v127;
  v127[0] = 0;
  v127[1] = 0;
  memset(v123, 0, sizeof(v123));
  sub_100254384((uint64_t)v142, (uint64_t)off_10048AC28, 0, (uint64_t)v133, (uint64_t)v128, (uint64_t)v124, v123, 1.0, 1.0);
  *(_QWORD *)a5 = *(_QWORD *)v142;
  *(_DWORD *)(a5 + 8) = *(_DWORD *)&v142[8];
  if (v142 != (_BYTE *)a5)
  {
    v23 = *(_QWORD *)(a5 + 72);
    if (v23)
    {
      v24 = (unsigned int *)(v23 + 20);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
        sub_100256C90(a5 + 16);
    }
    *(_QWORD *)(a5 + 72) = 0;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    if (*(int *)(a5 + 20) >= 1)
    {
      v27 = 0;
      v28 = *(_QWORD *)(a5 + 80);
      do
        *(_DWORD *)(v28 + 4 * v27++) = 0;
      while (v27 < *(int *)(a5 + 20));
    }
    v29 = *(_DWORD *)&v142[20];
    v30 = *(_OWORD *)&v142[32];
    *(_OWORD *)(a5 + 16) = *(_OWORD *)&v142[16];
    *(_OWORD *)(a5 + 32) = v30;
    v31 = *(_OWORD *)&v142[64];
    *(_OWORD *)(a5 + 48) = *(_OWORD *)&v142[48];
    *(_OWORD *)(a5 + 64) = v31;
    v32 = *(_QWORD **)(a5 + 88);
    if (v32 == (_QWORD *)(a5 + 96))
    {
      v33 = v144;
      if (v29 <= 2)
        goto LABEL_25;
    }
    else
    {
      j__free(v32);
      *(_QWORD *)(a5 + 80) = a5 + 24;
      *(_QWORD *)(a5 + 88) = a5 + 96;
      v32 = (_QWORD *)(a5 + 96);
      v33 = v144;
      if (*(int *)&v142[20] <= 2)
      {
LABEL_25:
        *v32 = *v33;
        v32[1] = v33[1];
LABEL_74:
        *(_DWORD *)&v142[16] = 1124007936;
        memset(&v142[20], 0, 60);
        goto LABEL_75;
      }
    }
    *(_QWORD *)(a5 + 80) = v143;
    *(_QWORD *)(a5 + 88) = v33;
    v144 = v145;
    v143 = &v142[24];
    goto LABEL_74;
  }
LABEL_75:
  sub_10024B080(a5 + 112, (uint64_t)v146);
  sub_10024B080(a5 + 208, (uint64_t)v147);
  v62 = v149;
  *(_OWORD *)(a5 + 304) = v148;
  *(_OWORD *)(a5 + 320) = v62;
  *(_OWORD *)(a5 + 336) = v150;
  sub_100008C98((uint64_t)v142);
  if (*(_QWORD *)&v124[56])
  {
    v63 = (unsigned int *)(*(_QWORD *)&v124[56] + 20);
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
      sub_100256C90((uint64_t)v124);
  }
  *(_QWORD *)&v124[56] = 0;
  memset(&v124[16], 0, 32);
  if (*(int *)&v124[4] >= 1)
  {
    v66 = 0;
    v67 = v125;
    do
      *(_DWORD *)&v67[4 * v66++] = 0;
    while (v66 < *(int *)&v124[4]);
  }
  if (v126 != v127)
    j__free(v126);
  if (*(_QWORD *)&v128[56])
  {
    v68 = (unsigned int *)(*(_QWORD *)&v128[56] + 20);
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
      sub_100256C90((uint64_t)v128);
  }
  *(_QWORD *)&v128[56] = 0;
  memset(&v128[16], 0, 32);
  if (*(int *)&v128[4] >= 1)
  {
    v71 = 0;
    v72 = v129;
    do
      *(_DWORD *)&v72[4 * v71++] = 0;
    while (v71 < *(int *)&v128[4]);
  }
  if (v130 != &v131)
    j__free(v130);
  if (*(_QWORD *)&v133[56])
  {
    v73 = (unsigned int *)(*(_QWORD *)&v133[56] + 20);
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
      sub_100256C90((uint64_t)v133);
  }
  *(_QWORD *)&v133[56] = 0;
  memset(&v133[16], 0, 32);
  if (*(int *)&v133[4] >= 1)
  {
    v76 = 0;
    v77 = v134;
    do
      *(_DWORD *)&v77[4 * v76++] = 0;
    while (v76 < *(int *)&v133[4]);
  }
  if (v135 != v136)
    j__free(v135);
  if (*(_QWORD *)&v137[56])
  {
    v78 = (unsigned int *)(*(_QWORD *)&v137[56] + 20);
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
      sub_100256C90((uint64_t)v137);
  }
  *(_QWORD *)&v137[56] = 0;
  memset(&v137[16], 0, 32);
  if (*(int *)&v137[4] >= 1)
  {
    v81 = 0;
    v82 = v138;
    do
      *(_DWORD *)&v82[4 * v81++] = 0;
    while (v81 < *(int *)&v137[4]);
  }
  if (v139 != &v140)
    j__free(v139);
}

void sub_10024AFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_100006BE4((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_10024B004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  sub_100006BE4((uint64_t)&a15);
  sub_100006BE4((uint64_t)&a27);
  sub_100006BE4((uint64_t)&a39);
  sub_100006BE4((uint64_t)&a51);
  _Unwind_Resume(a1);
}

uint64_t sub_10024B080(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  _QWORD *v12;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a1 + 56);
    if (v4)
    {
      v5 = (unsigned int *)(v4 + 20);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        sub_100256C90(a1);
    }
    *(_QWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    if (*(int *)(a1 + 4) >= 1)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 64);
      do
        *(_DWORD *)(v9 + 4 * v8++) = 0;
      while (v8 < *(int *)(a1 + 4));
    }
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    v11 = *(_QWORD **)(a1 + 72);
    if (v11 != (_QWORD *)(a1 + 80))
    {
      j__free(v11);
      *(_QWORD *)(a1 + 64) = a1 + 8;
      *(_QWORD *)(a1 + 72) = a1 + 80;
      v11 = (_QWORD *)(a1 + 80);
    }
    v12 = *(_QWORD **)(a2 + 72);
    if (*(int *)(a2 + 4) > 2)
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v12;
      *(_QWORD *)(a2 + 64) = a2 + 8;
      *(_QWORD *)(a2 + 72) = a2 + 80;
    }
    else
    {
      *v11 = *v12;
      v11[1] = v12[1];
    }
    *(_DWORD *)a2 = 1124007936;
    *(_OWORD *)(a2 + 4) = 0u;
    *(_OWORD *)(a2 + 20) = 0u;
    *(_OWORD *)(a2 + 36) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
  }
  return a1;
}

void sub_10024B19C(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  __int128 v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  _DWORD *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  __int128 v55;
  void *v56;
  _QWORD *v57;
  __int128 v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  char *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  _DWORD *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  char *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  _DWORD *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  __int128 v92;
  _QWORD *v93;
  _QWORD *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  __int128 v107;
  __int128 v108;
  _QWORD *v109;
  _QWORD *v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD v116[2];
  _OWORD v117[4];
  char *v118;
  void *v119;
  _QWORD v120[2];
  int v121;
  _DWORD v122[15];
  _DWORD *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  _OWORD v127[4];
  char *v128;
  void *v129;
  _QWORD v130[2];
  int v131;
  _DWORD v132[15];
  _DWORD *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE v137[80];
  _BYTE *v138;
  _BYTE *v139;
  _BYTE v140[16];
  _BYTE v141[96];
  _BYTE v142[96];
  __int128 v143;
  __int128 v144;
  __int128 v145;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v7 = *a2;
    v8 = *((_DWORD *)a2 + 2);
    v131 = 1124007936;
    memset(v132, 0, sizeof(v132));
    v133 = &v132[1];
    v134 = &v135;
    v135 = 0;
    v136 = 0;
    LODWORD(v127[0]) = 1124007936;
    memset((char *)v127 + 4, 0, 48);
    v127[3] = 0u;
    v128 = (char *)v127 + 8;
    v129 = v130;
    v130[0] = 0;
    v130[1] = 0;
    v121 = 1124007936;
    memset(v122, 0, sizeof(v122));
    v123 = &v122[1];
    v124 = &v125;
    v125 = 0;
    v126 = 0;
    sub_100254384((uint64_t)v137, v7, v8, (uint64_t)&v131, (uint64_t)v127, (uint64_t)&v121, a2 + 40, *((double *)a2 + 38), *((double *)a2 + 39));
    *(_QWORD *)a4 = *(_QWORD *)v137;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)&v137[8];
    if (v137 == (_BYTE *)a4)
    {
LABEL_29:
      sub_10024B080(a4 + 112, (uint64_t)v141);
      sub_10024B080(a4 + 208, (uint64_t)v142);
      v31 = v144;
      *(_OWORD *)(a4 + 304) = v143;
      *(_OWORD *)(a4 + 320) = v31;
      *(_OWORD *)(a4 + 336) = v145;
      sub_100008C98((uint64_t)v137);
      if (*(_QWORD *)&v122[13])
      {
        v32 = (unsigned int *)(*(_QWORD *)&v122[13] + 20);
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
          sub_100256C90((uint64_t)&v121);
      }
      *(_QWORD *)&v122[13] = 0;
      memset(&v122[3], 0, 32);
      if (v122[0] >= 1)
      {
        v35 = 0;
        v36 = v123;
        do
          v36[v35++] = 0;
        while (v35 < v122[0]);
      }
      if (v124 != &v125)
        j__free(v124);
      if (*((_QWORD *)&v127[3] + 1))
      {
        v37 = (unsigned int *)(*((_QWORD *)&v127[3] + 1) + 20);
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
          sub_100256C90((uint64_t)v127);
      }
      *((_QWORD *)&v127[3] + 1) = 0;
      memset(&v127[1], 0, 32);
      if (SDWORD1(v127[0]) >= 1)
      {
        v40 = 0;
        v41 = v128;
        do
          *(_DWORD *)&v41[4 * v40++] = 0;
        while (v40 < SDWORD1(v127[0]));
      }
      if (v129 != v130)
        j__free(v129);
      if (*(_QWORD *)&v132[13])
      {
        v42 = (unsigned int *)(*(_QWORD *)&v132[13] + 20);
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
          sub_100256C90((uint64_t)&v131);
      }
      *(_QWORD *)&v132[13] = 0;
      memset(&v132[3], 0, 32);
      if (v132[0] >= 1)
      {
        v45 = 0;
        v46 = v133;
        do
          v46[v45++] = 0;
        while (v45 < v132[0]);
      }
      if (v134 != &v135)
        j__free(v134);
      if (!a2[4])
      {
LABEL_128:
        if (!a2[16])
          goto LABEL_154;
        sub_100257828((uint64_t)(a2 + 14), a3, (uint64_t)v137);
        if ((_BYTE *)(a4 + 112) == v137)
        {
          if (*(_QWORD *)&v137[56])
          {
            v95 = (unsigned int *)(*(_QWORD *)&v137[56] + 20);
            do
            {
              v96 = __ldaxr(v95);
              v97 = v96 - 1;
            }
            while (__stlxr(v97, v95));
            if (!v97)
              sub_100256C90((uint64_t)v137);
          }
          goto LABEL_149;
        }
        v84 = *(_QWORD *)(a4 + 168);
        if (v84)
        {
          v85 = (unsigned int *)(v84 + 20);
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (!v87)
            sub_100256C90(a4 + 112);
        }
        *(_QWORD *)(a4 + 168) = 0;
        *(_OWORD *)(a4 + 128) = 0u;
        *(_OWORD *)(a4 + 144) = 0u;
        if (*(int *)(a4 + 116) >= 1)
        {
          v88 = 0;
          v89 = *(_QWORD *)(a4 + 176);
          do
            *(_DWORD *)(v89 + 4 * v88++) = 0;
          while (v88 < *(int *)(a4 + 116));
        }
        v90 = *(_DWORD *)&v137[4];
        v91 = *(_OWORD *)&v137[16];
        *(_OWORD *)(a4 + 112) = *(_OWORD *)v137;
        *(_OWORD *)(a4 + 128) = v91;
        v92 = *(_OWORD *)&v137[48];
        *(_OWORD *)(a4 + 144) = *(_OWORD *)&v137[32];
        *(_OWORD *)(a4 + 160) = v92;
        v93 = *(_QWORD **)(a4 + 184);
        if (v93 == (_QWORD *)(a4 + 192))
        {
          v94 = *(_QWORD **)&v137[72];
          if (v90 <= 2)
            goto LABEL_140;
        }
        else
        {
          j__free(v93);
          *(_QWORD *)(a4 + 176) = a4 + 120;
          *(_QWORD *)(a4 + 184) = a4 + 192;
          v93 = (_QWORD *)(a4 + 192);
          v94 = *(_QWORD **)&v137[72];
          if (*(int *)&v137[4] <= 2)
          {
LABEL_140:
            *v93 = *v94;
            v93[1] = v94[1];
LABEL_148:
            *(_DWORD *)v137 = 1124007936;
            memset(&v137[4], 0, 60);
LABEL_149:
            *(_QWORD *)&v137[56] = 0;
            memset(&v137[16], 0, 32);
            if (*(int *)&v137[4] >= 1)
            {
              v98 = 0;
              v99 = *(_QWORD *)&v137[64];
              do
                *(_DWORD *)(v99 + 4 * v98++) = 0;
              while (v98 < *(int *)&v137[4]);
            }
            if (*(_BYTE ***)&v137[72] != &v138)
              j__free(*(void **)&v137[72]);
LABEL_154:
            if (!a2[28])
              return;
            sub_100257828((uint64_t)(a2 + 26), a3, (uint64_t)v137);
            if ((_BYTE *)(a4 + 208) == v137)
            {
              if (*(_QWORD *)&v137[56])
              {
                v111 = (unsigned int *)(*(_QWORD *)&v137[56] + 20);
                do
                {
                  v112 = __ldaxr(v111);
                  v113 = v112 - 1;
                }
                while (__stlxr(v113, v111));
                if (!v113)
                  sub_100256C90((uint64_t)v137);
              }
              goto LABEL_175;
            }
            v100 = *(_QWORD *)(a4 + 264);
            if (v100)
            {
              v101 = (unsigned int *)(v100 + 20);
              do
              {
                v102 = __ldaxr(v101);
                v103 = v102 - 1;
              }
              while (__stlxr(v103, v101));
              if (!v103)
                sub_100256C90(a4 + 208);
            }
            *(_QWORD *)(a4 + 264) = 0;
            *(_OWORD *)(a4 + 224) = 0u;
            *(_OWORD *)(a4 + 240) = 0u;
            if (*(int *)(a4 + 212) >= 1)
            {
              v104 = 0;
              v105 = *(_QWORD *)(a4 + 272);
              do
                *(_DWORD *)(v105 + 4 * v104++) = 0;
              while (v104 < *(int *)(a4 + 212));
            }
            v106 = *(_DWORD *)&v137[4];
            v107 = *(_OWORD *)&v137[16];
            *(_OWORD *)(a4 + 208) = *(_OWORD *)v137;
            *(_OWORD *)(a4 + 224) = v107;
            v108 = *(_OWORD *)&v137[48];
            *(_OWORD *)(a4 + 240) = *(_OWORD *)&v137[32];
            *(_OWORD *)(a4 + 256) = v108;
            v109 = *(_QWORD **)(a4 + 280);
            if (v109 == (_QWORD *)(a4 + 288))
            {
              v110 = *(_QWORD **)&v137[72];
              if (v106 <= 2)
                goto LABEL_166;
            }
            else
            {
              j__free(v109);
              *(_QWORD *)(a4 + 272) = a4 + 216;
              *(_QWORD *)(a4 + 280) = a4 + 288;
              v109 = (_QWORD *)(a4 + 288);
              v110 = *(_QWORD **)&v137[72];
              if (*(int *)&v137[4] <= 2)
              {
LABEL_166:
                *v109 = *v110;
                v109[1] = v110[1];
LABEL_174:
                *(_DWORD *)v137 = 1124007936;
                memset(&v137[4], 0, 60);
LABEL_175:
                *(_QWORD *)&v137[56] = 0;
                memset(&v137[16], 0, 32);
                if (*(int *)&v137[4] >= 1)
                {
                  v114 = 0;
                  v115 = *(_QWORD *)&v137[64];
                  do
                    *(_DWORD *)(v115 + 4 * v114++) = 0;
                  while (v114 < *(int *)&v137[4]);
                }
                if (*(_BYTE ***)&v137[72] != &v138)
                  j__free(*(void **)&v137[72]);
                return;
              }
            }
            *(_QWORD *)(a4 + 272) = *(_QWORD *)&v137[64];
            *(_QWORD *)(a4 + 280) = v110;
            *(_QWORD *)&v137[64] = &v137[8];
            *(_QWORD *)&v137[72] = &v138;
            goto LABEL_174;
          }
        }
        *(_QWORD *)(a4 + 176) = *(_QWORD *)&v137[64];
        *(_QWORD *)(a4 + 184) = v94;
        *(_QWORD *)&v137[64] = &v137[8];
        *(_QWORD *)&v137[72] = &v138;
        goto LABEL_148;
      }
      sub_100257828((uint64_t)(a2 + 2), a3, (uint64_t)v137);
      if ((_BYTE *)(a4 + 16) == v137)
      {
        if (*(_QWORD *)&v137[56])
        {
          v79 = (unsigned int *)(*(_QWORD *)&v137[56] + 20);
          do
          {
            v80 = __ldaxr(v79);
            v81 = v80 - 1;
          }
          while (__stlxr(v81, v79));
          if (!v81)
            sub_100256C90((uint64_t)v137);
        }
        goto LABEL_123;
      }
      v47 = *(_QWORD *)(a4 + 72);
      if (v47)
      {
        v48 = (unsigned int *)(v47 + 20);
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
          sub_100256C90(a4 + 16);
      }
      *(_QWORD *)(a4 + 72) = 0;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      if (*(int *)(a4 + 20) >= 1)
      {
        v51 = 0;
        v52 = *(_QWORD *)(a4 + 80);
        do
          *(_DWORD *)(v52 + 4 * v51++) = 0;
        while (v51 < *(int *)(a4 + 20));
      }
      v53 = *(_DWORD *)&v137[4];
      v54 = *(_OWORD *)&v137[16];
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v137;
      *(_OWORD *)(a4 + 32) = v54;
      v55 = *(_OWORD *)&v137[48];
      *(_OWORD *)(a4 + 48) = *(_OWORD *)&v137[32];
      *(_OWORD *)(a4 + 64) = v55;
      v56 = *(void **)(a4 + 88);
      if (v56 == (void *)(a4 + 96))
      {
        v57 = *(_QWORD **)&v137[72];
        if (v53 <= 2)
          goto LABEL_71;
      }
      else
      {
        j__free(v56);
        *(_QWORD *)(a4 + 80) = a4 + 24;
        *(_QWORD *)(a4 + 88) = a4 + 96;
        v57 = *(_QWORD **)&v137[72];
        if (*(int *)&v137[4] <= 2)
        {
LABEL_71:
          *(_QWORD *)(a4 + 96) = *v57;
          *(_QWORD *)(a4 + 104) = v57[1];
LABEL_122:
          *(_DWORD *)v137 = 1124007936;
          memset(&v137[4], 0, 60);
LABEL_123:
          *(_QWORD *)&v137[56] = 0;
          memset(&v137[16], 0, 32);
          if (*(int *)&v137[4] >= 1)
          {
            v82 = 0;
            v83 = *(_QWORD *)&v137[64];
            do
              *(_DWORD *)(v83 + 4 * v82++) = 0;
            while (v82 < *(int *)&v137[4]);
          }
          if (*(_BYTE ***)&v137[72] != &v138)
            j__free(*(void **)&v137[72]);
          goto LABEL_128;
        }
      }
      *(_QWORD *)(a4 + 80) = *(_QWORD *)&v137[64];
      *(_QWORD *)(a4 + 88) = v57;
      *(_QWORD *)&v137[64] = &v137[8];
      *(_QWORD *)&v137[72] = &v138;
      goto LABEL_122;
    }
    v9 = *(_QWORD *)(a4 + 72);
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 20);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        sub_100256C90(a4 + 16);
    }
    *(_QWORD *)(a4 + 72) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    if (*(int *)(a4 + 20) >= 1)
    {
      v13 = 0;
      v14 = *(_QWORD *)(a4 + 80);
      do
        *(_DWORD *)(v14 + 4 * v13++) = 0;
      while (v13 < *(int *)(a4 + 20));
    }
    v15 = *(_DWORD *)&v137[20];
    v16 = *(_OWORD *)&v137[32];
    *(_OWORD *)(a4 + 16) = *(_OWORD *)&v137[16];
    *(_OWORD *)(a4 + 32) = v16;
    v17 = *(_OWORD *)&v137[64];
    *(_OWORD *)(a4 + 48) = *(_OWORD *)&v137[48];
    *(_OWORD *)(a4 + 64) = v17;
    v18 = *(void **)(a4 + 88);
    if (v18 == (void *)(a4 + 96))
    {
      v19 = v139;
      if (v15 <= 2)
        goto LABEL_13;
    }
    else
    {
      j__free(v18);
      *(_QWORD *)(a4 + 80) = a4 + 24;
      *(_QWORD *)(a4 + 88) = a4 + 96;
      v19 = v139;
      if (*(int *)&v137[20] <= 2)
      {
LABEL_13:
        *(_QWORD *)(a4 + 96) = *v19;
        *(_QWORD *)(a4 + 104) = v19[1];
LABEL_28:
        *(_DWORD *)&v137[16] = 1124007936;
        memset(&v137[20], 0, 60);
        goto LABEL_29;
      }
    }
    *(_QWORD *)(a4 + 80) = v138;
    *(_QWORD *)(a4 + 88) = v19;
    v138 = &v137[24];
    v139 = v140;
    goto LABEL_28;
  }
  v131 = 1124007936;
  memset(v132, 0, sizeof(v132));
  v133 = &v132[1];
  v134 = &v135;
  v135 = 0;
  v136 = 0;
  (*(void (**)(_QWORD, _QWORD *, int *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, &v131, 0xFFFFFFFFLL);
  sub_100257828((uint64_t)&v131, a3, (uint64_t)v127);
  v121 = 1124007936;
  memset(v122, 0, sizeof(v122));
  v123 = &v122[1];
  v124 = &v125;
  v125 = 0;
  v126 = 0;
  LODWORD(v117[0]) = 1124007936;
  memset((char *)v117 + 4, 0, 48);
  v117[3] = 0u;
  v118 = (char *)v117 + 8;
  v119 = v120;
  v120[0] = 0;
  v120[1] = 0;
  memset(v116, 0, sizeof(v116));
  sub_100254384((uint64_t)v137, (uint64_t)off_10048AC28, 0, (uint64_t)v127, (uint64_t)&v121, (uint64_t)v117, v116, 1.0, 1.0);
  *(_QWORD *)a4 = *(_QWORD *)v137;
  *(_DWORD *)(a4 + 8) = *(_DWORD *)&v137[8];
  if (v137 != (_BYTE *)a4)
  {
    v20 = *(_QWORD *)(a4 + 72);
    if (v20)
    {
      v21 = (unsigned int *)(v20 + 20);
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
        sub_100256C90(a4 + 16);
    }
    *(_QWORD *)(a4 + 72) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    if (*(int *)(a4 + 20) >= 1)
    {
      v24 = 0;
      v25 = *(_QWORD *)(a4 + 80);
      do
        *(_DWORD *)(v25 + 4 * v24++) = 0;
      while (v24 < *(int *)(a4 + 20));
    }
    v26 = *(_DWORD *)&v137[20];
    v27 = *(_OWORD *)&v137[32];
    *(_OWORD *)(a4 + 16) = *(_OWORD *)&v137[16];
    *(_OWORD *)(a4 + 32) = v27;
    v28 = *(_OWORD *)&v137[64];
    *(_OWORD *)(a4 + 48) = *(_OWORD *)&v137[48];
    *(_OWORD *)(a4 + 64) = v28;
    v29 = *(_QWORD **)(a4 + 88);
    if (v29 == (_QWORD *)(a4 + 96))
    {
      v30 = v139;
      if (v26 <= 2)
        goto LABEL_25;
    }
    else
    {
      j__free(v29);
      *(_QWORD *)(a4 + 80) = a4 + 24;
      *(_QWORD *)(a4 + 88) = a4 + 96;
      v29 = (_QWORD *)(a4 + 96);
      v30 = v139;
      if (*(int *)&v137[20] <= 2)
      {
LABEL_25:
        *v29 = *v30;
        v29[1] = v30[1];
LABEL_74:
        *(_DWORD *)&v137[16] = 1124007936;
        memset(&v137[20], 0, 60);
        goto LABEL_75;
      }
    }
    *(_QWORD *)(a4 + 80) = v138;
    *(_QWORD *)(a4 + 88) = v30;
    v138 = &v137[24];
    v139 = v140;
    goto LABEL_74;
  }
LABEL_75:
  sub_10024B080(a4 + 112, (uint64_t)v141);
  sub_10024B080(a4 + 208, (uint64_t)v142);
  v58 = v144;
  *(_OWORD *)(a4 + 304) = v143;
  *(_OWORD *)(a4 + 320) = v58;
  *(_OWORD *)(a4 + 336) = v145;
  sub_100008C98((uint64_t)v137);
  if (*((_QWORD *)&v117[3] + 1))
  {
    v59 = (unsigned int *)(*((_QWORD *)&v117[3] + 1) + 20);
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
      sub_100256C90((uint64_t)v117);
  }
  *((_QWORD *)&v117[3] + 1) = 0;
  memset(&v117[1], 0, 32);
  if (SDWORD1(v117[0]) >= 1)
  {
    v62 = 0;
    v63 = v118;
    do
      *(_DWORD *)&v63[4 * v62++] = 0;
    while (v62 < SDWORD1(v117[0]));
  }
  if (v119 != v120)
    j__free(v119);
  if (*(_QWORD *)&v122[13])
  {
    v64 = (unsigned int *)(*(_QWORD *)&v122[13] + 20);
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
      sub_100256C90((uint64_t)&v121);
  }
  *(_QWORD *)&v122[13] = 0;
  memset(&v122[3], 0, 32);
  if (v122[0] >= 1)
  {
    v67 = 0;
    v68 = v123;
    do
      v68[v67++] = 0;
    while (v67 < v122[0]);
  }
  if (v124 != &v125)
    j__free(v124);
  if (*((_QWORD *)&v127[3] + 1))
  {
    v69 = (unsigned int *)(*((_QWORD *)&v127[3] + 1) + 20);
    do
    {
      v70 = __ldaxr(v69);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v69));
    if (!v71)
      sub_100256C90((uint64_t)v127);
  }
  *((_QWORD *)&v127[3] + 1) = 0;
  memset(&v127[1], 0, 32);
  if (SDWORD1(v127[0]) >= 1)
  {
    v72 = 0;
    v73 = v128;
    do
      *(_DWORD *)&v73[4 * v72++] = 0;
    while (v72 < SDWORD1(v127[0]));
  }
  if (v129 != v130)
    j__free(v129);
  if (*(_QWORD *)&v132[13])
  {
    v74 = (unsigned int *)(*(_QWORD *)&v132[13] + 20);
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
      sub_100256C90((uint64_t)&v131);
  }
  *(_QWORD *)&v132[13] = 0;
  memset(&v132[3], 0, 32);
  if (v132[0] >= 1)
  {
    v77 = 0;
    v78 = v133;
    do
      v78[v77++] = 0;
    while (v77 < v132[0]);
  }
  if (v134 != &v135)
    j__free(v134);
}

void sub_10024BDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_100006BE4((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void sub_10024BE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_100006BE4((uint64_t)&a13);
  sub_100006BE4((uint64_t)&a25);
  sub_100006BE4((uint64_t)&a37);
  sub_100006BE4((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_10024BEB8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[8];
  _QWORD *v11;
  void *v12;
  _QWORD v13[2];
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  LODWORD(v10[0]) = 1124007936;
  memset((char *)v10 + 4, 0, 32);
  memset((char *)&v10[4] + 4, 0, 28);
  v11 = &v10[1];
  v12 = v13;
  v13[0] = 0;
  v13[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v10, 0xFFFFFFFFLL);
  v22 = 0;
  v20 = 16842752;
  v21 = a3;
  v19 = 0;
  v17 = 16842752;
  v18 = v10;
  v14 = 33619968;
  v15 = a3;
  v16 = 0;
  v4 = sub_100263CBC();
  sub_1001D6364((uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v14, (uint64_t)v4, -1);
  if (v10[7])
  {
    v5 = (unsigned int *)(v10[7] + 20);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      sub_100256C90((uint64_t)v10);
  }
  v10[7] = 0;
  memset(&v10[2], 0, 32);
  if (SHIDWORD(v10[0]) >= 1)
  {
    v8 = 0;
    v9 = v11;
    do
      *((_DWORD *)v9 + v8++) = 0;
    while (v8 < SHIDWORD(v10[0]));
  }
  if (v12 != v13)
    j__free(v12);
}

void sub_10024BFE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024BFFC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[8];
  _QWORD *v11;
  void *v12;
  _QWORD v13[2];
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  LODWORD(v10[0]) = 1124007936;
  memset((char *)v10 + 4, 0, 32);
  memset((char *)&v10[4] + 4, 0, 28);
  v11 = &v10[1];
  v12 = v13;
  v13[0] = 0;
  v13[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v10, 0xFFFFFFFFLL);
  v22 = 0;
  v20 = 16842752;
  v21 = a3;
  v19 = 0;
  v17 = 16842752;
  v18 = v10;
  v14 = 33619968;
  v15 = a3;
  v16 = 0;
  v4 = sub_100263CBC();
  sub_1001D8554((uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v14, (uint64_t)v4, -1);
  if (v10[7])
  {
    v5 = (unsigned int *)(v10[7] + 20);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      sub_100256C90((uint64_t)v10);
  }
  v10[7] = 0;
  memset(&v10[2], 0, 32);
  if (SHIDWORD(v10[0]) >= 1)
  {
    v8 = 0;
    v9 = v11;
    do
      *((_DWORD *)v9 + v8++) = 0;
    while (v8 < SHIDWORD(v10[0]));
  }
  if (v12 != v13)
    j__free(v12);
}

void sub_10024C12C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024C140(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v14[8];
  _QWORD *v15;
  void *v16;
  _QWORD v17[2];
  int v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[4];
  char *v22;
  void *v23;
  _QWORD v24[2];
  int v25;
  _OWORD *v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  LODWORD(v14[0]) = 1124007936;
  memset((char *)v14 + 4, 0, 32);
  memset((char *)&v14[4] + 4, 0, 28);
  v15 = &v14[1];
  v16 = v17;
  v17[0] = 0;
  v17[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v14, 0xFFFFFFFFLL);
  v33 = 0;
  v31 = 16842752;
  v32 = a3;
  v30 = 0;
  v28 = 16842752;
  v29 = v14;
  LODWORD(v21[0]) = 1124007936;
  memset((char *)v21 + 4, 0, 48);
  v21[3] = 0u;
  v22 = (char *)v21 + 8;
  v23 = v24;
  v24[0] = 0;
  v24[1] = 0;
  v27 = 0;
  v25 = 16842752;
  v26 = v21;
  v18 = 33619968;
  v19 = a3;
  v20 = 0;
  sub_100231760((uint64_t)&v31, (uint64_t)&v28, (uint64_t)&v25, 1.0, 0.0, (uint64_t)&v18, 0);
  if (*((_QWORD *)&v21[3] + 1))
  {
    v4 = (unsigned int *)(*((_QWORD *)&v21[3] + 1) + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90((uint64_t)v21);
  }
  *((_QWORD *)&v21[3] + 1) = 0;
  memset(&v21[1], 0, 32);
  if (SDWORD1(v21[0]) >= 1)
  {
    v7 = 0;
    v8 = v22;
    do
      *(_DWORD *)&v8[4 * v7++] = 0;
    while (v7 < SDWORD1(v21[0]));
  }
  if (v23 != v24)
    j__free(v23);
  if (v14[7])
  {
    v9 = (unsigned int *)(v14[7] + 20);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      sub_100256C90((uint64_t)v14);
  }
  v14[7] = 0;
  memset(&v14[2], 0, 32);
  if (SHIDWORD(v14[0]) >= 1)
  {
    v12 = 0;
    v13 = v15;
    do
      *((_DWORD *)v13 + v12++) = 0;
    while (v12 < SHIDWORD(v14[0]));
  }
  if (v16 != v17)
    j__free(v16);
}

void sub_10024C31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_100006BE4((uint64_t)&a24);
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10024C338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10024C34C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v9[8];
  _QWORD *v10;
  void *v11;
  _QWORD v12[2];
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  LODWORD(v9[0]) = 1124007936;
  memset((char *)v9 + 4, 0, 32);
  memset((char *)&v9[4] + 4, 0, 28);
  v10 = &v9[1];
  v11 = v12;
  v12[0] = 0;
  v12[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v9, 0xFFFFFFFFLL);
  v21 = 0;
  v19 = 16842752;
  v20 = a3;
  v18 = 0;
  v16 = 16842752;
  v17 = v9;
  v13 = 33619968;
  v14 = a3;
  v15 = 0;
  sub_1001D8730((uint64_t)&v19, (uint64_t)&v16, (uint64_t)&v13, -1, 1.0);
  if (v9[7])
  {
    v4 = (unsigned int *)(v9[7] + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90((uint64_t)v9);
  }
  v9[7] = 0;
  memset(&v9[2], 0, 32);
  if (SHIDWORD(v9[0]) >= 1)
  {
    v7 = 0;
    v8 = v10;
    do
      *((_DWORD *)v8 + v7++) = 0;
    while (v7 < SHIDWORD(v9[0]));
  }
  if (v11 != v12)
    j__free(v11);
}

void sub_10024C478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024C48C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[8];
  _QWORD *v11;
  void *v12;
  _QWORD v13[2];
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  LODWORD(v10[0]) = 1124007936;
  memset((char *)v10 + 4, 0, 32);
  memset((char *)&v10[4] + 4, 0, 28);
  v11 = &v10[1];
  v12 = v13;
  v13[0] = 0;
  v13[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v10, 0xFFFFFFFFLL);
  v22 = 0;
  v20 = 16842752;
  v21 = a3;
  v19 = 0;
  v17 = 16842752;
  v18 = v10;
  v14 = 33619968;
  v15 = a3;
  v16 = 0;
  v4 = sub_100263CBC();
  sub_1001D47C0((uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v14, (uint64_t)v4);
  if (v10[7])
  {
    v5 = (unsigned int *)(v10[7] + 20);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      sub_100256C90((uint64_t)v10);
  }
  v10[7] = 0;
  memset(&v10[2], 0, 32);
  if (SHIDWORD(v10[0]) >= 1)
  {
    v8 = 0;
    v9 = v11;
    do
      *((_DWORD *)v9 + v8++) = 0;
    while (v8 < SHIDWORD(v10[0]));
  }
  if (v12 != v13)
    j__free(v12);
}

void sub_10024C5B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024C5CC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[8];
  _QWORD *v11;
  void *v12;
  _QWORD v13[2];
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  LODWORD(v10[0]) = 1124007936;
  memset((char *)v10 + 4, 0, 32);
  memset((char *)&v10[4] + 4, 0, 28);
  v11 = &v10[1];
  v12 = v13;
  v13[0] = 0;
  v13[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v10, 0xFFFFFFFFLL);
  v22 = 0;
  v20 = 16842752;
  v21 = a3;
  v19 = 0;
  v17 = 16842752;
  v18 = v10;
  v14 = 33619968;
  v15 = a3;
  v16 = 0;
  v4 = sub_100263CBC();
  sub_1001D5EE0((uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v14, (uint64_t)v4);
  if (v10[7])
  {
    v5 = (unsigned int *)(v10[7] + 20);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      sub_100256C90((uint64_t)v10);
  }
  v10[7] = 0;
  memset(&v10[2], 0, 32);
  if (SHIDWORD(v10[0]) >= 1)
  {
    v8 = 0;
    v9 = v11;
    do
      *((_DWORD *)v9 + v8++) = 0;
    while (v8 < SHIDWORD(v10[0]));
  }
  if (v12 != v13)
    j__free(v12);
}

void sub_10024C6F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024C70C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[8];
  _QWORD *v11;
  void *v12;
  _QWORD v13[2];
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  LODWORD(v10[0]) = 1124007936;
  memset((char *)v10 + 4, 0, 32);
  memset((char *)&v10[4] + 4, 0, 28);
  v11 = &v10[1];
  v12 = v13;
  v13[0] = 0;
  v13[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v10, 0xFFFFFFFFLL);
  v22 = 0;
  v20 = 16842752;
  v21 = a3;
  v19 = 0;
  v17 = 16842752;
  v18 = v10;
  v14 = 33619968;
  v15 = a3;
  v16 = 0;
  v4 = sub_100263CBC();
  sub_1001D5F80((uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v14, (uint64_t)v4);
  if (v10[7])
  {
    v5 = (unsigned int *)(v10[7] + 20);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      sub_100256C90((uint64_t)v10);
  }
  v10[7] = 0;
  memset(&v10[2], 0, 32);
  if (SHIDWORD(v10[0]) >= 1)
  {
    v8 = 0;
    v9 = v11;
    do
      *((_DWORD *)v9 + v8++) = 0;
    while (v8 < SHIDWORD(v10[0]));
  }
  if (v12 != v13)
    j__free(v12);
}

void sub_10024C838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024C84C(uint64_t a1, _QWORD *a2, float64x2_t *a3, uint64_t a4)
{
  double v8;
  float64_t v9;
  float64x2_t *v10;
  float64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _BYTE *v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE *v27;
  float64_t v28;
  _QWORD *v29;
  float64x2_t v30;
  double v31;
  float64x2_t v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  float64x2_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE v48[64];
  _BYTE *v49;
  void *v50;
  _QWORD v51[2];
  _BYTE v52[64];
  _BYTE *v53;
  void *v54;
  _QWORD v55[2];
  float64x2_t v56;
  float64x2_t v57;
  char v58[8];
  int v59;

  sub_100298C2C(v58, &off_10044D508);
  if (*(_QWORD *)&a3->f64[0] != a1)
  {
    (*(void (**)(_QWORD, _QWORD *, float64x2_t *, uint64_t))(**(_QWORD **)&a3->f64[0] + 104))(*(_QWORD *)&a3->f64[0], a2, a3, a4);
    goto LABEL_70;
  }
  v56 = 0u;
  v57 = 0u;
  *(_DWORD *)v52 = 1124007936;
  memset(&v52[4], 0, 60);
  v53 = &v52[8];
  v54 = v55;
  v55[0] = 0;
  v55[1] = 0;
  *(_DWORD *)v48 = 1124007936;
  memset(&v48[4], 0, 60);
  v49 = &v48[8];
  v50 = v51;
  v51[0] = 0;
  v51[1] = 0;
  if ((uint64_t (***)())*a2 != off_10048AC30 || a2[16] && *((double *)a2 + 39) != 0.0)
  {
    v8 = 1.0;
    (*(void (**)(_QWORD, _QWORD *, _BYTE *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v52, 0xFFFFFFFFLL);
    v9 = a3->f64[0];
    if (*(uint64_t (****)())&a3->f64[0] != off_10048AC30)
      goto LABEL_49;
    goto LABEL_7;
  }
  v19 = a2 + 2;
  if (v52 != (_BYTE *)(a2 + 2))
  {
    v20 = a2[9];
    if (v20)
    {
      v21 = (unsigned int *)(v20 + 20);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      if (*(_QWORD *)&v52[56])
      {
        v23 = (unsigned int *)(*(_QWORD *)&v52[56] + 20);
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          sub_100256C90((uint64_t)v52);
      }
    }
    *(_QWORD *)&v52[56] = 0;
    memset(&v52[16], 0, 32);
    if (*(uint64_t *)v52 <= 0)
    {
      *(_DWORD *)v52 = *v19;
    }
    else
    {
      v26 = 0;
      v27 = v53;
      do
        *(_DWORD *)&v27[4 * v26++] = 0;
      while (v26 < *(int *)&v52[4]);
      *(_DWORD *)v52 = *v19;
      if (*(int *)&v52[4] > 2)
        goto LABEL_46;
    }
    if (*((int *)a2 + 5) <= 2)
    {
      *(_DWORD *)&v52[4] = *((_DWORD *)a2 + 5);
      *(_QWORD *)&v52[8] = a2[3];
      v33 = (_QWORD *)a2[11];
      v34 = v54;
      *(_QWORD *)v54 = *v33;
      v34[1] = v33[1];
LABEL_47:
      v35 = *((_OWORD *)a2 + 3);
      *(_OWORD *)&v52[16] = *((_OWORD *)a2 + 2);
      *(_OWORD *)&v52[32] = v35;
      v36 = a2[9];
      *(_QWORD *)&v52[48] = a2[8];
      *(_QWORD *)&v52[56] = v36;
      goto LABEL_48;
    }
LABEL_46:
    sub_100256B48((uint64_t)v52, (uint64_t)(a2 + 2));
    goto LABEL_47;
  }
LABEL_48:
  v8 = *((double *)a2 + 38);
  v37 = *((float64x2_t *)a2 + 21);
  v56 = *((float64x2_t *)a2 + 20);
  v57 = v37;
  v9 = a3->f64[0];
  if (*(uint64_t (****)())&a3->f64[0] != off_10048AC30)
    goto LABEL_49;
LABEL_7:
  if (!*(_QWORD *)&a3[8].f64[0] || a3[19].f64[1] == 0.0)
  {
    v10 = a3 + 1;
    if (v48 == (_BYTE *)&a3[1])
    {
LABEL_42:
      v31 = a3[19].f64[0];
      v32 = vaddq_f64(a3[21], v57);
      v56 = vaddq_f64(a3[20], v56);
      v57 = v32;
      goto LABEL_50;
    }
    v11 = a3[4].f64[1];
    if (v11 != 0.0)
    {
      v12 = (unsigned int *)(*(_QWORD *)&v11 + 20);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
    if (*(_QWORD *)&v48[56])
    {
      v14 = (unsigned int *)(*(_QWORD *)&v48[56] + 20);
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        sub_100256C90((uint64_t)v48);
    }
    *(_QWORD *)&v48[56] = 0;
    memset(&v48[16], 0, 32);
    if (*(uint64_t *)v48 <= 0)
    {
      *(_DWORD *)v48 = LODWORD(v10->f64[0]);
    }
    else
    {
      v17 = 0;
      v18 = v49;
      do
        *(_DWORD *)&v18[4 * v17++] = 0;
      while (v17 < *(int *)&v48[4]);
      *(_DWORD *)v48 = LODWORD(v10->f64[0]);
      if (*(int *)&v48[4] > 2)
        goto LABEL_40;
    }
    if (SHIDWORD(a3[1].f64[0]) <= 2)
    {
      *(_DWORD *)&v48[4] = HIDWORD(a3[1].f64[0]);
      *(float64_t *)&v48[8] = a3[1].f64[1];
      v28 = a3[5].f64[1];
      v29 = v50;
      *(_QWORD *)v50 = **(_QWORD **)&v28;
      v29[1] = *(_QWORD *)(*(_QWORD *)&v28 + 8);
LABEL_41:
      v30 = a3[3];
      *(float64x2_t *)&v48[16] = a3[2];
      *(float64x2_t *)&v48[32] = v30;
      *(float64x2_t *)&v48[48] = a3[4];
      goto LABEL_42;
    }
LABEL_40:
    sub_100256B48((uint64_t)v48, (uint64_t)&a3[1]);
    goto LABEL_41;
  }
LABEL_49:
  v31 = 1.0;
  (*(void (**)(float64_t, float64x2_t *, _BYTE *, uint64_t))(**(_QWORD **)&v9 + 24))(COERCE_FLOAT64_T(*(_QWORD *)&v9), a3, v48, 0xFFFFFFFFLL);
LABEL_50:
  sub_10024CD14(a4, (uint64_t)v52, (uint64_t)v48, &v56, v8, v31);
  if (*(_QWORD *)&v48[56])
  {
    v38 = (unsigned int *)(*(_QWORD *)&v48[56] + 20);
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
      sub_100256C90((uint64_t)v48);
  }
  *(_QWORD *)&v48[56] = 0;
  memset(&v48[16], 0, 32);
  if (*(int *)&v48[4] >= 1)
  {
    v41 = 0;
    v42 = v49;
    do
      *(_DWORD *)&v42[4 * v41++] = 0;
    while (v41 < *(int *)&v48[4]);
  }
  if (v50 != v51)
    j__free(v50);
  if (*(_QWORD *)&v52[56])
  {
    v43 = (unsigned int *)(*(_QWORD *)&v52[56] + 20);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
      sub_100256C90((uint64_t)v52);
  }
  *(_QWORD *)&v52[56] = 0;
  memset(&v52[16], 0, 32);
  if (*(int *)&v52[4] >= 1)
  {
    v46 = 0;
    v47 = v53;
    do
      *(_DWORD *)&v47[4 * v46++] = 0;
    while (v46 < *(int *)&v52[4]);
  }
  if (v54 != v55)
    j__free(v54);
LABEL_70:
  if (v59)
    sub_1002989D0(v58);
}

void sub_10024CCDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_10024CCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  sub_100006BE4((uint64_t)&a9);
  sub_100006BE4((uint64_t)&a21);
  sub_1001D40CC(v21 - 96);
  _Unwind_Resume(a1);
}

void sub_10024CD14(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, double a5, double a6)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  _OWORD v24[4];
  char *v25;
  void *v26;
  _QWORD v27[2];
  uint64_t v28;
  int v29;
  _BYTE v30[64];
  _BYTE *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[9];

  LODWORD(v24[0]) = 1124007936;
  memset((char *)v24 + 4, 0, 48);
  v24[3] = 0u;
  v25 = (char *)v24 + 8;
  v26 = v27;
  v27[0] = 0;
  v27[1] = 0;
  sub_100254384((uint64_t)&v28, (uint64_t)off_10048AC30, 0, a2, a3, (uint64_t)v24, a4, a5, a6);
  *(_QWORD *)a1 = v28;
  *(_DWORD *)(a1 + 8) = v29;
  if (&v28 != (uint64_t *)a1)
  {
    v7 = *(_QWORD *)(a1 + 72);
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 20);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        sub_100256C90(a1 + 16);
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      v11 = 0;
      v12 = *(_QWORD *)(a1 + 80);
      do
        *(_DWORD *)(v12 + 4 * v11++) = 0;
      while (v11 < *(int *)(a1 + 20));
    }
    v13 = *(_DWORD *)&v30[4];
    v14 = *(_OWORD *)&v30[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v30;
    *(_OWORD *)(a1 + 32) = v14;
    v15 = *(_OWORD *)&v30[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v30[32];
    *(_OWORD *)(a1 + 64) = v15;
    v16 = *(uint64_t **)(a1 + 88);
    if (v16 == (uint64_t *)(a1 + 96))
    {
      v17 = v32;
      if (v13 <= 2)
        goto LABEL_12;
    }
    else
    {
      j__free(v16);
      *(_QWORD *)(a1 + 80) = a1 + 24;
      *(_QWORD *)(a1 + 88) = a1 + 96;
      v16 = (uint64_t *)(a1 + 96);
      v17 = v32;
      if (*(int *)&v30[4] <= 2)
      {
LABEL_12:
        *v16 = *v17;
        v16[1] = v17[1];
LABEL_15:
        *(_DWORD *)v30 = 1124007936;
        memset(&v30[4], 0, 60);
        goto LABEL_16;
      }
    }
    *(_QWORD *)(a1 + 80) = v31;
    *(_QWORD *)(a1 + 88) = v17;
    v31 = &v30[8];
    v32 = &v33;
    goto LABEL_15;
  }
LABEL_16:
  sub_10024B080(a1 + 112, (uint64_t)&v34);
  sub_10024B080(a1 + 208, (uint64_t)v35);
  v18 = v35[7];
  *(_OWORD *)(a1 + 304) = v35[6];
  *(_OWORD *)(a1 + 320) = v18;
  *(_OWORD *)(a1 + 336) = v35[8];
  sub_100008C98((uint64_t)&v28);
  if (*((_QWORD *)&v24[3] + 1))
  {
    v19 = (unsigned int *)(*((_QWORD *)&v24[3] + 1) + 20);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      sub_100256C90((uint64_t)v24);
  }
  *((_QWORD *)&v24[3] + 1) = 0;
  memset(&v24[1], 0, 32);
  if (SDWORD1(v24[0]) >= 1)
  {
    v22 = 0;
    v23 = v25;
    do
      *(_DWORD *)&v23[4 * v22++] = 0;
    while (v22 < SDWORD1(v24[0]));
  }
  if (v26 != v27)
    j__free(v26);
}

void sub_10024CF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10024CF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_100008C98((uint64_t)&a21);
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10024CF84(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD v17[4];
  char *v18;
  void *v19;
  _QWORD v20[2];
  _QWORD v21[8];
  _QWORD *v22;
  void *v23;
  _QWORD v24[2];
  _BYTE v25[8];
  int v26;

  sub_100298C2C(v25, &off_10044D528);
  LODWORD(v21[0]) = 1124007936;
  memset((char *)v21 + 4, 0, 32);
  memset((char *)&v21[4] + 4, 0, 28);
  v22 = &v21[1];
  v23 = v24;
  v24[0] = 0;
  v24[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v21, 0xFFFFFFFFLL);
  LODWORD(v17[0]) = 1124007936;
  memset((char *)v17 + 4, 0, 48);
  v17[3] = 0u;
  v18 = (char *)v17 + 8;
  v19 = v20;
  v20[0] = 0;
  v20[1] = 0;
  sub_10024CD14(a4, (uint64_t)v21, (uint64_t)v17, a3, 1.0, 0.0);
  if (*((_QWORD *)&v17[3] + 1))
  {
    v7 = (unsigned int *)(*((_QWORD *)&v17[3] + 1) + 20);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      sub_100256C90((uint64_t)v17);
  }
  *((_QWORD *)&v17[3] + 1) = 0;
  memset(&v17[1], 0, 32);
  if (SDWORD1(v17[0]) >= 1)
  {
    v10 = 0;
    v11 = v18;
    do
      *(_DWORD *)&v11[4 * v10++] = 0;
    while (v10 < SDWORD1(v17[0]));
  }
  if (v19 != v20)
    j__free(v19);
  if (v21[7])
  {
    v12 = (unsigned int *)(v21[7] + 20);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      sub_100256C90((uint64_t)v21);
  }
  v21[7] = 0;
  memset(&v21[2], 0, 32);
  if (SHIDWORD(v21[0]) >= 1)
  {
    v15 = 0;
    v16 = v22;
    do
      *((_DWORD *)v16 + v15++) = 0;
    while (v15 < SHIDWORD(v21[0]));
  }
  if (v23 != v24)
    j__free(v23);
  if (v26)
    sub_1002989D0(v25);
}

void sub_10024D158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  sub_100006BE4((uint64_t)&a9);
  sub_100006BE4((uint64_t)&a21);
  sub_1001D40CC(v21 - 64);
  _Unwind_Resume(a1);
}

void sub_10024D17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_100006BE4((uint64_t)va);
  sub_1001D40CC(v13 - 64);
  _Unwind_Resume(a1);
}

void sub_10024D198(uint64_t a1, _QWORD *a2, float64x2_t *a3, uint64_t a4)
{
  double v8;
  float64_t v9;
  float64x2_t *v10;
  float64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _BYTE *v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE *v27;
  float64_t v28;
  _QWORD *v29;
  float64x2_t v30;
  double v31;
  float64x2_t v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  float64x2_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE v48[64];
  _BYTE *v49;
  void *v50;
  _QWORD v51[2];
  _BYTE v52[64];
  _BYTE *v53;
  void *v54;
  _QWORD v55[2];
  float64x2_t v56;
  float64x2_t v57;
  char v58[8];
  int v59;

  sub_100298C2C(v58, &off_10044D548);
  if (*(_QWORD *)&a3->f64[0] != a1)
  {
    (*(void (**)(_QWORD, _QWORD *, float64x2_t *, uint64_t))(**(_QWORD **)&a3->f64[0] + 120))(*(_QWORD *)&a3->f64[0], a2, a3, a4);
    goto LABEL_70;
  }
  v56 = 0u;
  v57 = 0u;
  *(_DWORD *)v52 = 1124007936;
  memset(&v52[4], 0, 60);
  v53 = &v52[8];
  v54 = v55;
  v55[0] = 0;
  v55[1] = 0;
  *(_DWORD *)v48 = 1124007936;
  memset(&v48[4], 0, 60);
  v49 = &v48[8];
  v50 = v51;
  v51[0] = 0;
  v51[1] = 0;
  if ((uint64_t (***)())*a2 != off_10048AC30 || a2[16] && *((double *)a2 + 39) != 0.0)
  {
    v8 = 1.0;
    (*(void (**)(_QWORD, _QWORD *, _BYTE *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v52, 0xFFFFFFFFLL);
    v9 = a3->f64[0];
    if (*(uint64_t (****)())&a3->f64[0] != off_10048AC30)
      goto LABEL_49;
    goto LABEL_7;
  }
  v19 = a2 + 2;
  if (v52 != (_BYTE *)(a2 + 2))
  {
    v20 = a2[9];
    if (v20)
    {
      v21 = (unsigned int *)(v20 + 20);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      if (*(_QWORD *)&v52[56])
      {
        v23 = (unsigned int *)(*(_QWORD *)&v52[56] + 20);
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          sub_100256C90((uint64_t)v52);
      }
    }
    *(_QWORD *)&v52[56] = 0;
    memset(&v52[16], 0, 32);
    if (*(uint64_t *)v52 <= 0)
    {
      *(_DWORD *)v52 = *v19;
    }
    else
    {
      v26 = 0;
      v27 = v53;
      do
        *(_DWORD *)&v27[4 * v26++] = 0;
      while (v26 < *(int *)&v52[4]);
      *(_DWORD *)v52 = *v19;
      if (*(int *)&v52[4] > 2)
        goto LABEL_46;
    }
    if (*((int *)a2 + 5) <= 2)
    {
      *(_DWORD *)&v52[4] = *((_DWORD *)a2 + 5);
      *(_QWORD *)&v52[8] = a2[3];
      v33 = (_QWORD *)a2[11];
      v34 = v54;
      *(_QWORD *)v54 = *v33;
      v34[1] = v33[1];
LABEL_47:
      v35 = *((_OWORD *)a2 + 3);
      *(_OWORD *)&v52[16] = *((_OWORD *)a2 + 2);
      *(_OWORD *)&v52[32] = v35;
      v36 = a2[9];
      *(_QWORD *)&v52[48] = a2[8];
      *(_QWORD *)&v52[56] = v36;
      goto LABEL_48;
    }
LABEL_46:
    sub_100256B48((uint64_t)v52, (uint64_t)(a2 + 2));
    goto LABEL_47;
  }
LABEL_48:
  v8 = *((double *)a2 + 38);
  v37 = *((float64x2_t *)a2 + 21);
  v56 = *((float64x2_t *)a2 + 20);
  v57 = v37;
  v9 = a3->f64[0];
  if (*(uint64_t (****)())&a3->f64[0] != off_10048AC30)
    goto LABEL_49;
LABEL_7:
  if (!*(_QWORD *)&a3[8].f64[0] || a3[19].f64[1] == 0.0)
  {
    v10 = a3 + 1;
    if (v48 == (_BYTE *)&a3[1])
    {
LABEL_42:
      v31 = -a3[19].f64[0];
      v32 = vsubq_f64(v57, a3[21]);
      v56 = vsubq_f64(v56, a3[20]);
      v57 = v32;
      goto LABEL_50;
    }
    v11 = a3[4].f64[1];
    if (v11 != 0.0)
    {
      v12 = (unsigned int *)(*(_QWORD *)&v11 + 20);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
    if (*(_QWORD *)&v48[56])
    {
      v14 = (unsigned int *)(*(_QWORD *)&v48[56] + 20);
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        sub_100256C90((uint64_t)v48);
    }
    *(_QWORD *)&v48[56] = 0;
    memset(&v48[16], 0, 32);
    if (*(uint64_t *)v48 <= 0)
    {
      *(_DWORD *)v48 = LODWORD(v10->f64[0]);
    }
    else
    {
      v17 = 0;
      v18 = v49;
      do
        *(_DWORD *)&v18[4 * v17++] = 0;
      while (v17 < *(int *)&v48[4]);
      *(_DWORD *)v48 = LODWORD(v10->f64[0]);
      if (*(int *)&v48[4] > 2)
        goto LABEL_40;
    }
    if (SHIDWORD(a3[1].f64[0]) <= 2)
    {
      *(_DWORD *)&v48[4] = HIDWORD(a3[1].f64[0]);
      *(float64_t *)&v48[8] = a3[1].f64[1];
      v28 = a3[5].f64[1];
      v29 = v50;
      *(_QWORD *)v50 = **(_QWORD **)&v28;
      v29[1] = *(_QWORD *)(*(_QWORD *)&v28 + 8);
LABEL_41:
      v30 = a3[3];
      *(float64x2_t *)&v48[16] = a3[2];
      *(float64x2_t *)&v48[32] = v30;
      *(float64x2_t *)&v48[48] = a3[4];
      goto LABEL_42;
    }
LABEL_40:
    sub_100256B48((uint64_t)v48, (uint64_t)&a3[1]);
    goto LABEL_41;
  }
LABEL_49:
  v31 = -1.0;
  (*(void (**)(float64_t, float64x2_t *, _BYTE *, uint64_t))(**(_QWORD **)&v9 + 24))(COERCE_FLOAT64_T(*(_QWORD *)&v9), a3, v48, 0xFFFFFFFFLL);
LABEL_50:
  sub_10024CD14(a4, (uint64_t)v52, (uint64_t)v48, &v56, v8, v31);
  if (*(_QWORD *)&v48[56])
  {
    v38 = (unsigned int *)(*(_QWORD *)&v48[56] + 20);
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
      sub_100256C90((uint64_t)v48);
  }
  *(_QWORD *)&v48[56] = 0;
  memset(&v48[16], 0, 32);
  if (*(int *)&v48[4] >= 1)
  {
    v41 = 0;
    v42 = v49;
    do
      *(_DWORD *)&v42[4 * v41++] = 0;
    while (v41 < *(int *)&v48[4]);
  }
  if (v50 != v51)
    j__free(v50);
  if (*(_QWORD *)&v52[56])
  {
    v43 = (unsigned int *)(*(_QWORD *)&v52[56] + 20);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
      sub_100256C90((uint64_t)v52);
  }
  *(_QWORD *)&v52[56] = 0;
  memset(&v52[16], 0, 32);
  if (*(int *)&v52[4] >= 1)
  {
    v46 = 0;
    v47 = v53;
    do
      *(_DWORD *)&v47[4 * v46++] = 0;
    while (v46 < *(int *)&v52[4]);
  }
  if (v54 != v55)
    j__free(v54);
LABEL_70:
  if (v59)
    sub_1002989D0(v58);
}

void sub_10024D62C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_10024D640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  sub_100006BE4((uint64_t)&a9);
  sub_100006BE4((uint64_t)&a21);
  sub_1001D40CC(v21 - 96);
  _Unwind_Resume(a1);
}

void sub_10024D664(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD v17[4];
  char *v18;
  void *v19;
  _QWORD v20[2];
  _QWORD v21[8];
  _QWORD *v22;
  void *v23;
  _QWORD v24[2];
  _BYTE v25[8];
  int v26;

  sub_100298C2C(v25, &off_10044D568);
  LODWORD(v21[0]) = 1124007936;
  memset((char *)v21 + 4, 0, 32);
  memset((char *)&v21[4] + 4, 0, 28);
  v22 = &v21[1];
  v23 = v24;
  v24[0] = 0;
  v24[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a3 + 24))(*a3, a3, v21, 0xFFFFFFFFLL);
  LODWORD(v17[0]) = 1124007936;
  memset((char *)v17 + 4, 0, 48);
  v17[3] = 0u;
  v18 = (char *)v17 + 8;
  v19 = v20;
  v20[0] = 0;
  v20[1] = 0;
  sub_10024CD14(a4, (uint64_t)v21, (uint64_t)v17, a2, -1.0, 0.0);
  if (*((_QWORD *)&v17[3] + 1))
  {
    v7 = (unsigned int *)(*((_QWORD *)&v17[3] + 1) + 20);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      sub_100256C90((uint64_t)v17);
  }
  *((_QWORD *)&v17[3] + 1) = 0;
  memset(&v17[1], 0, 32);
  if (SDWORD1(v17[0]) >= 1)
  {
    v10 = 0;
    v11 = v18;
    do
      *(_DWORD *)&v11[4 * v10++] = 0;
    while (v10 < SDWORD1(v17[0]));
  }
  if (v19 != v20)
    j__free(v19);
  if (v21[7])
  {
    v12 = (unsigned int *)(v21[7] + 20);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      sub_100256C90((uint64_t)v21);
  }
  v21[7] = 0;
  memset(&v21[2], 0, 32);
  if (SHIDWORD(v21[0]) >= 1)
  {
    v15 = 0;
    v16 = v22;
    do
      *((_DWORD *)v16 + v15++) = 0;
    while (v15 < SHIDWORD(v21[0]));
  }
  if (v23 != v24)
    j__free(v23);
  if (v26)
    sub_1002989D0(v25);
}

void sub_10024D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  sub_100006BE4((uint64_t)&a9);
  sub_100006BE4((uint64_t)&a21);
  sub_1001D40CC(v21 - 64);
  _Unwind_Resume(a1);
}

void sub_10024D85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_100006BE4((uint64_t)va);
  sub_1001D40CC(v13 - 64);
  _Unwind_Resume(a1);
}

void sub_10024D878(uint64_t (***a1)(), uint64_t a2, _QWORD *a3, uint64_t a4, double a5)
{
  uint64_t (***v10)();
  uint64_t (***v11)();
  _DWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  _QWORD *v31;
  __int128 v32;
  int v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE *v42;
  _QWORD *v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  _BYTE *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  _BYTE *v56;
  _DWORD *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  _BYTE *v65;
  _QWORD *v66;
  _QWORD *v67;
  __int128 v68;
  _QWORD *v69;
  _QWORD *v70;
  __int128 v71;
  uint64_t v72;
  _BYTE v73[64];
  _BYTE *v74;
  void *v75;
  _QWORD v76[2];
  _BYTE v77[64];
  _BYTE *v78;
  void *v79;
  _QWORD v80[2];
  _BYTE v81[8];
  int v82;

  sub_100298C2C(v81, &off_10044D588);
  if ((uint64_t (***)())*a3 != a1)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t, double))(*(_QWORD *)*a3 + 136))(*a3, a2, a3, a4, a5);
    goto LABEL_102;
  }
  *(_DWORD *)v77 = 1124007936;
  memset(&v77[4], 0, 60);
  v78 = &v77[8];
  v79 = v80;
  v80[0] = 0;
  v80[1] = 0;
  *(_DWORD *)v73 = 1124007936;
  memset(&v73[4], 0, 60);
  v74 = &v73[8];
  v75 = v76;
  v76[0] = 0;
  v76[1] = 0;
  v10 = *(uint64_t (****)())a2;
  if (*(uint64_t (****)())a2 != off_10048AC38 || *(_DWORD *)(a2 + 8) != 47)
  {
    if (v10 != off_10048AC30
      || *(_QWORD *)(a2 + 128) && *(double *)(a2 + 312) != 0.0
      || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 336)))))) & 1) != 0)
    {
      goto LABEL_17;
    }
    v21 = (_DWORD *)(a2 + 16);
    if (v77 == (_BYTE *)(a2 + 16))
    {
LABEL_75:
      a5 = *(double *)(a2 + 304) * a5;
      v11 = (uint64_t (***)())*a3;
      if ((uint64_t (***)())*a3 != off_10048AC30)
        goto LABEL_18;
LABEL_76:
      if (a3[16] && *((double *)a3 + 39) != 0.0
        || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 20)), (int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 21)))))) & 1) != 0)
      {
        goto LABEL_79;
      }
      v57 = a3 + 2;
      if (v73 == (_BYTE *)(a3 + 2))
      {
LABEL_124:
        a5 = a5 * *((double *)a3 + 38);
        goto LABEL_80;
      }
      v58 = a3[9];
      if (v58)
      {
        v59 = (unsigned int *)(v58 + 20);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 + 1, v59));
      }
      if (*(_QWORD *)&v73[56])
      {
        v61 = (unsigned int *)(*(_QWORD *)&v73[56] + 20);
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
          sub_100256C90((uint64_t)v73);
      }
      *(_QWORD *)&v73[56] = 0;
      memset(&v73[16], 0, 32);
      if (*(uint64_t *)v73 <= 0)
      {
        *(_DWORD *)v73 = *v57;
      }
      else
      {
        v64 = 0;
        v65 = v74;
        do
          *(_DWORD *)&v65[4 * v64++] = 0;
        while (v64 < *(int *)&v73[4]);
        *(_DWORD *)v73 = *v57;
        if (*(int *)&v73[4] > 2)
          goto LABEL_122;
      }
      if (*((int *)a3 + 5) <= 2)
      {
        *(_DWORD *)&v73[4] = *((_DWORD *)a3 + 5);
        *(_QWORD *)&v73[8] = a3[3];
        v66 = (_QWORD *)a3[11];
        v67 = v75;
        *(_QWORD *)v75 = *v66;
        v67[1] = v66[1];
LABEL_123:
        v68 = *((_OWORD *)a3 + 3);
        *(_OWORD *)&v73[16] = *((_OWORD *)a3 + 2);
        *(_OWORD *)&v73[32] = v68;
        *(_OWORD *)&v73[48] = *((_OWORD *)a3 + 4);
        goto LABEL_124;
      }
LABEL_122:
      sub_100256B48((uint64_t)v73, (uint64_t)(a3 + 2));
      goto LABEL_123;
    }
    v22 = *(_QWORD *)(a2 + 72);
    if (v22)
    {
      v23 = (unsigned int *)(v22 + 20);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      if (*(_QWORD *)&v77[56])
      {
        v25 = (unsigned int *)(*(_QWORD *)&v77[56] + 20);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
          sub_100256C90((uint64_t)v77);
      }
    }
    *(_QWORD *)&v77[56] = 0;
    memset(&v77[16], 0, 32);
    if (*(uint64_t *)v77 <= 0)
    {
      *(_DWORD *)v77 = *v21;
    }
    else
    {
      v28 = 0;
      v29 = v78;
      do
        *(_DWORD *)&v29[4 * v28++] = 0;
      while (v28 < *(int *)&v77[4]);
      *(_DWORD *)v77 = *v21;
      if (*(int *)&v77[4] > 2)
        goto LABEL_73;
    }
    if (*(int *)(a2 + 20) <= 2)
    {
      *(_DWORD *)&v77[4] = *(_DWORD *)(a2 + 20);
      *(_QWORD *)&v77[8] = *(_QWORD *)(a2 + 24);
      v43 = *(_QWORD **)(a2 + 88);
      v44 = v79;
      *(_QWORD *)v79 = *v43;
      v44[1] = v43[1];
LABEL_74:
      v45 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v77[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v77[32] = v45;
      v46 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)&v77[48] = *(_QWORD *)(a2 + 64);
      *(_QWORD *)&v77[56] = v46;
      goto LABEL_75;
    }
LABEL_73:
    sub_100256B48((uint64_t)v77, a2 + 16);
    goto LABEL_74;
  }
  if (!*(_QWORD *)(a2 + 128) || *(double *)(a2 + 312) == 0.0)
  {
    if (a1 != off_10048AC30
      || a3[16] && *((double *)a3 + 39) != 0.0
      || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 20)), (int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 21)))))) & 1) != 0)
    {
      ((void (*)(uint64_t (***)(), _QWORD *, _BYTE *, uint64_t))(*a1)[3])(a1, a3, v73, 0xFFFFFFFFLL);
LABEL_12:
      sub_10024E050(a4, 47, (uint64_t)v73, a2 + 16, a5 / *(double *)(a2 + 304));
      goto LABEL_82;
    }
    a5 = *((double *)a3 + 38) * a5;
    v34 = a3 + 2;
    if (v73 == (_BYTE *)(a3 + 2))
      goto LABEL_12;
    v35 = a3[9];
    if (v35)
    {
      v36 = (unsigned int *)(v35 + 20);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      if (*(_QWORD *)&v73[56])
      {
        v38 = (unsigned int *)(*(_QWORD *)&v73[56] + 20);
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
          sub_100256C90((uint64_t)v73);
      }
    }
    *(_QWORD *)&v73[56] = 0;
    memset(&v73[16], 0, 32);
    if (*(uint64_t *)v73 <= 0)
    {
      *(_DWORD *)v73 = *v34;
    }
    else
    {
      v41 = 0;
      v42 = v74;
      do
        *(_DWORD *)&v42[4 * v41++] = 0;
      while (v41 < *(int *)&v73[4]);
      *(_DWORD *)v73 = *v34;
      if (*(int *)&v73[4] > 2)
        goto LABEL_128;
    }
    if (*((int *)a3 + 5) <= 2)
    {
      *(_DWORD *)&v73[4] = *((_DWORD *)a3 + 5);
      *(_QWORD *)&v73[8] = a3[3];
      v69 = (_QWORD *)a3[11];
      v70 = v75;
      *(_QWORD *)v75 = *v69;
      v70[1] = v69[1];
LABEL_129:
      v71 = *((_OWORD *)a3 + 3);
      *(_OWORD *)&v73[16] = *((_OWORD *)a3 + 2);
      *(_OWORD *)&v73[32] = v71;
      v72 = a3[9];
      *(_QWORD *)&v73[48] = a3[8];
      *(_QWORD *)&v73[56] = v72;
      goto LABEL_12;
    }
LABEL_128:
    sub_100256B48((uint64_t)v73, (uint64_t)(a3 + 2));
    goto LABEL_129;
  }
LABEL_17:
  ((void (*)(uint64_t (***)(), uint64_t, _BYTE *, uint64_t))(*v10)[3])(v10, a2, v77, 0xFFFFFFFFLL);
  v11 = (uint64_t (***)())*a3;
  if ((uint64_t (***)())*a3 == off_10048AC30)
    goto LABEL_76;
LABEL_18:
  if (v11 != off_10048AC38 || *((_DWORD *)a3 + 2) != 47 || a3[16] && *((double *)a3 + 39) != 0.0)
  {
LABEL_79:
    ((void (*)(uint64_t (***)(), _QWORD *, _BYTE *, uint64_t))(*v11)[3])(v11, a3, v73, 0xFFFFFFFFLL);
LABEL_80:
    v33 = 42;
    goto LABEL_81;
  }
  v12 = a3 + 2;
  if (v73 != (_BYTE *)(a3 + 2))
  {
    v13 = a3[9];
    if (v13)
    {
      v14 = (unsigned int *)(v13 + 20);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
    if (*(_QWORD *)&v73[56])
    {
      v16 = (unsigned int *)(*(_QWORD *)&v73[56] + 20);
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        sub_100256C90((uint64_t)v73);
    }
    *(_QWORD *)&v73[56] = 0;
    memset(&v73[16], 0, 32);
    if (*(uint64_t *)v73 <= 0)
    {
      *(_DWORD *)v73 = *v12;
    }
    else
    {
      v19 = 0;
      v20 = v74;
      do
        *(_DWORD *)&v20[4 * v19++] = 0;
      while (v19 < *(int *)&v73[4]);
      *(_DWORD *)v73 = *v12;
      if (*(int *)&v73[4] > 2)
        goto LABEL_53;
    }
    if (*((int *)a3 + 5) <= 2)
    {
      *(_DWORD *)&v73[4] = *((_DWORD *)a3 + 5);
      *(_QWORD *)&v73[8] = a3[3];
      v30 = (_QWORD *)a3[11];
      v31 = v75;
      *(_QWORD *)v75 = *v30;
      v31[1] = v30[1];
LABEL_54:
      v32 = *((_OWORD *)a3 + 3);
      *(_OWORD *)&v73[16] = *((_OWORD *)a3 + 2);
      *(_OWORD *)&v73[32] = v32;
      *(_OWORD *)&v73[48] = *((_OWORD *)a3 + 4);
      goto LABEL_55;
    }
LABEL_53:
    sub_100256B48((uint64_t)v73, (uint64_t)(a3 + 2));
    goto LABEL_54;
  }
LABEL_55:
  v33 = 47;
  a5 = a5 / *((double *)a3 + 38);
LABEL_81:
  sub_10024E050(a4, v33, (uint64_t)v77, (uint64_t)v73, a5);
LABEL_82:
  if (*(_QWORD *)&v73[56])
  {
    v47 = (unsigned int *)(*(_QWORD *)&v73[56] + 20);
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
      sub_100256C90((uint64_t)v73);
  }
  *(_QWORD *)&v73[56] = 0;
  memset(&v73[16], 0, 32);
  if (*(int *)&v73[4] >= 1)
  {
    v50 = 0;
    v51 = v74;
    do
      *(_DWORD *)&v51[4 * v50++] = 0;
    while (v50 < *(int *)&v73[4]);
  }
  if (v75 != v76)
    j__free(v75);
  if (*(_QWORD *)&v77[56])
  {
    v52 = (unsigned int *)(*(_QWORD *)&v77[56] + 20);
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
      sub_100256C90((uint64_t)v77);
  }
  *(_QWORD *)&v77[56] = 0;
  memset(&v77[16], 0, 32);
  if (*(int *)&v77[4] >= 1)
  {
    v55 = 0;
    v56 = v78;
    do
      *(_DWORD *)&v56[4 * v55++] = 0;
    while (v55 < *(int *)&v77[4]);
  }
  if (v79 != v80)
    j__free(v79);
LABEL_102:
  if (v82)
    sub_1002989D0(v81);
}

void sub_10024E008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  sub_100006BE4((uint64_t)&a9);
  sub_100006BE4((uint64_t)&a21);
  sub_1001D40CC(v21 - 112);
  _Unwind_Resume(a1);
}

void sub_10024E050(uint64_t a1, int a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  _OWORD v25[2];
  _OWORD v26[4];
  char *v27;
  void *v28;
  _QWORD v29[2];
  uint64_t v30;
  int v31;
  _BYTE v32[64];
  _BYTE *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[9];

  LODWORD(v26[0]) = 1124007936;
  memset((char *)v26 + 4, 0, 48);
  v26[3] = 0u;
  v27 = (char *)v26 + 8;
  v28 = v29;
  v29[0] = 0;
  v29[1] = 0;
  v6 = *(_QWORD *)(a4 + 16);
  memset(v25, 0, sizeof(v25));
  v7 = 0.0;
  if (v6)
    v7 = 1.0;
  sub_100254384((uint64_t)&v30, (uint64_t)off_10048AC38, a2, a3, a4, (uint64_t)v26, v25, a5, v7);
  *(_QWORD *)a1 = v30;
  *(_DWORD *)(a1 + 8) = v31;
  if (&v30 != (uint64_t *)a1)
  {
    v8 = *(_QWORD *)(a1 + 72);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        sub_100256C90(a1 + 16);
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a1 + 80);
      do
        *(_DWORD *)(v13 + 4 * v12++) = 0;
      while (v12 < *(int *)(a1 + 20));
    }
    v14 = *(_DWORD *)&v32[4];
    v15 = *(_OWORD *)&v32[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v32;
    *(_OWORD *)(a1 + 32) = v15;
    v16 = *(_OWORD *)&v32[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v32[32];
    *(_OWORD *)(a1 + 64) = v16;
    v17 = *(uint64_t **)(a1 + 88);
    if (v17 == (uint64_t *)(a1 + 96))
    {
      v18 = v34;
      if (v14 <= 2)
        goto LABEL_14;
    }
    else
    {
      j__free(v17);
      *(_QWORD *)(a1 + 80) = a1 + 24;
      *(_QWORD *)(a1 + 88) = a1 + 96;
      v17 = (uint64_t *)(a1 + 96);
      v18 = v34;
      if (*(int *)&v32[4] <= 2)
      {
LABEL_14:
        *v17 = *v18;
        v17[1] = v18[1];
LABEL_17:
        *(_DWORD *)v32 = 1124007936;
        memset(&v32[4], 0, 60);
        goto LABEL_18;
      }
    }
    *(_QWORD *)(a1 + 80) = v33;
    *(_QWORD *)(a1 + 88) = v18;
    v33 = &v32[8];
    v34 = &v35;
    goto LABEL_17;
  }
LABEL_18:
  sub_10024B080(a1 + 112, (uint64_t)&v36);
  sub_10024B080(a1 + 208, (uint64_t)v37);
  v19 = v37[7];
  *(_OWORD *)(a1 + 304) = v37[6];
  *(_OWORD *)(a1 + 320) = v19;
  *(_OWORD *)(a1 + 336) = v37[8];
  sub_100008C98((uint64_t)&v30);
  if (*((_QWORD *)&v26[3] + 1))
  {
    v20 = (unsigned int *)(*((_QWORD *)&v26[3] + 1) + 20);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      sub_100256C90((uint64_t)v26);
  }
  *((_QWORD *)&v26[3] + 1) = 0;
  memset(&v26[1], 0, 32);
  if (SDWORD1(v26[0]) >= 1)
  {
    v23 = 0;
    v24 = v27;
    do
      *(_DWORD *)&v24[4 * v23++] = 0;
    while (v23 < SDWORD1(v26[0]));
  }
  if (v28 != v29)
    j__free(v28);
}

void sub_10024E2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024E2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_100008C98((uint64_t)va1);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024E2D8(double a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD v17[2];
  _OWORD v18[4];
  char *v19;
  void *v20;
  _QWORD v21[2];
  _QWORD v22[8];
  _QWORD *v23;
  void *v24;
  _QWORD v25[2];
  _BYTE v26[8];
  int v27;

  sub_100298C2C(v26, &off_10044D5A8);
  LODWORD(v22[0]) = 1124007936;
  memset((char *)v22 + 4, 0, 32);
  memset((char *)&v22[4] + 4, 0, 28);
  v23 = &v22[1];
  v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a3 + 24))(*a3, a3, v22, 0xFFFFFFFFLL);
  LODWORD(v18[0]) = 1124007936;
  memset((char *)v18 + 4, 0, 48);
  v18[3] = 0u;
  v19 = (char *)v18 + 8;
  v20 = v21;
  v21[0] = 0;
  v21[1] = 0;
  memset(v17, 0, sizeof(v17));
  sub_10024CD14(a4, (uint64_t)v22, (uint64_t)v18, v17, a1, 0.0);
  if (*((_QWORD *)&v18[3] + 1))
  {
    v7 = (unsigned int *)(*((_QWORD *)&v18[3] + 1) + 20);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      sub_100256C90((uint64_t)v18);
  }
  *((_QWORD *)&v18[3] + 1) = 0;
  memset(&v18[1], 0, 32);
  if (SDWORD1(v18[0]) >= 1)
  {
    v10 = 0;
    v11 = v19;
    do
      *(_DWORD *)&v11[4 * v10++] = 0;
    while (v10 < SDWORD1(v18[0]));
  }
  if (v20 != v21)
    j__free(v20);
  if (v22[7])
  {
    v12 = (unsigned int *)(v22[7] + 20);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      sub_100256C90((uint64_t)v22);
  }
  v22[7] = 0;
  memset(&v22[2], 0, 32);
  if (SHIDWORD(v22[0]) >= 1)
  {
    v15 = 0;
    v16 = v23;
    do
      *((_DWORD *)v16 + v15++) = 0;
    while (v15 < SHIDWORD(v22[0]));
  }
  if (v24 != v25)
    j__free(v24);
  if (v27)
    sub_1002989D0(v26);
}

void sub_10024E4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  sub_100006BE4((uint64_t)va);
  sub_100006BE4((uint64_t)va1);
  sub_1001D40CC(v5 - 80);
  _Unwind_Resume(a1);
}

void sub_10024E4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_100006BE4((uint64_t)va);
  sub_1001D40CC(v17 - 80);
  _Unwind_Resume(a1);
}

void sub_10024E4F8(uint64_t (***a1)(), uint64_t a2, _QWORD *a3, uint64_t a4, double a5)
{
  uint64_t (***v10)();
  uint64_t (***v11)();
  _DWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  _QWORD *v31;
  __int128 v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  __int128 v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  _BYTE *v47;
  _DWORD *v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  _BYTE *v56;
  _QWORD *v57;
  _QWORD *v58;
  __int128 v59;
  _BYTE v60[64];
  _BYTE *v61;
  void *v62;
  _QWORD v63[2];
  _BYTE v64[64];
  _BYTE *v65;
  void *v66;
  _QWORD v67[2];
  _BYTE v68[8];
  int v69;

  sub_100298C2C(v68, &off_10044D5C8);
  if ((uint64_t (***)())*a3 != a1)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t, double))(*(_QWORD *)*a3 + 152))(*a3, a2, a3, a4, a5);
    goto LABEL_85;
  }
  v10 = *(uint64_t (****)())a2;
  if (*(uint64_t (****)())a2 == off_10048AC38
    && *(_DWORD *)(a2 + 8) == 47
    && (!*(_QWORD *)(a2 + 128) || *(double *)(a2 + 312) == 0.0)
    && a1 == off_10048AC38
    && *((_DWORD *)a3 + 2) == 47
    && (!a3[16] || *((double *)a3 + 39) == 0.0))
  {
    sub_10024E050(a4, 47, (uint64_t)(a3 + 2), a2 + 16, *(double *)(a2 + 304) / *((double *)a3 + 38));
    goto LABEL_85;
  }
  *(_DWORD *)v64 = 1124007936;
  memset(&v64[4], 0, 60);
  v65 = &v64[8];
  v66 = v67;
  v67[0] = 0;
  v67[1] = 0;
  *(_DWORD *)v60 = 1124007936;
  memset(&v60[4], 0, 60);
  v61 = &v60[8];
  v62 = v63;
  v63[0] = 0;
  v63[1] = 0;
  if (v10 == off_10048AC30
    && (!*(_QWORD *)(a2 + 128) || *(double *)(a2 + 312) == 0.0)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 336)))))) & 1) == 0)
  {
    v21 = (_DWORD *)(a2 + 16);
    if (v64 == (_BYTE *)(a2 + 16))
      goto LABEL_60;
    v22 = *(_QWORD *)(a2 + 72);
    if (v22)
    {
      v23 = (unsigned int *)(v22 + 20);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      if (*(_QWORD *)&v64[56])
      {
        v25 = (unsigned int *)(*(_QWORD *)&v64[56] + 20);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
          sub_100256C90((uint64_t)v64);
      }
    }
    *(_QWORD *)&v64[56] = 0;
    memset(&v64[16], 0, 32);
    if (*(uint64_t *)v64 <= 0)
    {
      *(_DWORD *)v64 = *v21;
    }
    else
    {
      v28 = 0;
      v29 = v65;
      do
        *(_DWORD *)&v29[4 * v28++] = 0;
      while (v28 < *(int *)&v64[4]);
      *(_DWORD *)v64 = *v21;
      if (*(int *)&v64[4] > 2)
        goto LABEL_58;
    }
    if (*(int *)(a2 + 20) <= 2)
    {
      *(_DWORD *)&v64[4] = *(_DWORD *)(a2 + 20);
      *(_QWORD *)&v64[8] = *(_QWORD *)(a2 + 24);
      v34 = *(_QWORD **)(a2 + 88);
      v35 = v66;
      *(_QWORD *)v66 = *v34;
      v35[1] = v34[1];
LABEL_59:
      v36 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v64[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v64[32] = v36;
      v37 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)&v64[48] = *(_QWORD *)(a2 + 64);
      *(_QWORD *)&v64[56] = v37;
LABEL_60:
      a5 = *(double *)(a2 + 304) * a5;
      v11 = (uint64_t (***)())*a3;
      if ((uint64_t (***)())*a3 != off_10048AC30)
        goto LABEL_12;
      goto LABEL_61;
    }
LABEL_58:
    sub_100256B48((uint64_t)v64, a2 + 16);
    goto LABEL_59;
  }
  ((void (*)(uint64_t (***)(), uint64_t, _BYTE *, uint64_t))(*v10)[3])(v10, a2, v64, 0xFFFFFFFFLL);
  v11 = (uint64_t (***)())*a3;
  if ((uint64_t (***)())*a3 != off_10048AC30)
  {
LABEL_12:
    if (v11 == off_10048AC38 && *((_DWORD *)a3 + 2) == 47 && (!a3[16] || *((double *)a3 + 39) == 0.0))
    {
      v12 = a3 + 2;
      if (v60 == (_BYTE *)(a3 + 2))
      {
LABEL_54:
        v33 = 42;
        a5 = a5 / *((double *)a3 + 38);
        goto LABEL_65;
      }
      v13 = a3[9];
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 20);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
      if (*(_QWORD *)&v60[56])
      {
        v16 = (unsigned int *)(*(_QWORD *)&v60[56] + 20);
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
          sub_100256C90((uint64_t)v60);
      }
      *(_QWORD *)&v60[56] = 0;
      memset(&v60[16], 0, 32);
      if (*(uint64_t *)v60 <= 0)
      {
        *(_DWORD *)v60 = *v12;
      }
      else
      {
        v19 = 0;
        v20 = v61;
        do
          *(_DWORD *)&v20[4 * v19++] = 0;
        while (v19 < *(int *)&v60[4]);
        *(_DWORD *)v60 = *v12;
        if (*(int *)&v60[4] > 2)
          goto LABEL_52;
      }
      if (*((int *)a3 + 5) <= 2)
      {
        *(_DWORD *)&v60[4] = *((_DWORD *)a3 + 5);
        *(_QWORD *)&v60[8] = a3[3];
        v30 = (_QWORD *)a3[11];
        v31 = v62;
        *(_QWORD *)v62 = *v30;
        v31[1] = v30[1];
LABEL_53:
        v32 = *((_OWORD *)a3 + 3);
        *(_OWORD *)&v60[16] = *((_OWORD *)a3 + 2);
        *(_OWORD *)&v60[32] = v32;
        *(_OWORD *)&v60[48] = *((_OWORD *)a3 + 4);
        goto LABEL_54;
      }
LABEL_52:
      sub_100256B48((uint64_t)v60, (uint64_t)(a3 + 2));
      goto LABEL_53;
    }
    goto LABEL_64;
  }
LABEL_61:
  if (a3[16] && *((double *)a3 + 39) != 0.0
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 20)), (int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 21)))))) & 1) != 0)
  {
LABEL_64:
    ((void (*)(uint64_t (***)(), _QWORD *, _BYTE *, uint64_t))(*v11)[3])(v11, a3, v60, 0xFFFFFFFFLL);
    v33 = 47;
    goto LABEL_65;
  }
  v48 = a3 + 2;
  if (v60 != (_BYTE *)(a3 + 2))
  {
    v49 = a3[9];
    if (v49)
    {
      v50 = (unsigned int *)(v49 + 20);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 + 1, v50));
    }
    if (*(_QWORD *)&v60[56])
    {
      v52 = (unsigned int *)(*(_QWORD *)&v60[56] + 20);
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
        sub_100256C90((uint64_t)v60);
    }
    *(_QWORD *)&v60[56] = 0;
    memset(&v60[16], 0, 32);
    if (*(uint64_t *)v60 <= 0)
    {
      *(_DWORD *)v60 = *v48;
    }
    else
    {
      v55 = 0;
      v56 = v61;
      do
        *(_DWORD *)&v56[4 * v55++] = 0;
      while (v55 < *(int *)&v60[4]);
      *(_DWORD *)v60 = *v48;
      if (*(int *)&v60[4] > 2)
        goto LABEL_105;
    }
    if (*((int *)a3 + 5) <= 2)
    {
      *(_DWORD *)&v60[4] = *((_DWORD *)a3 + 5);
      *(_QWORD *)&v60[8] = a3[3];
      v57 = (_QWORD *)a3[11];
      v58 = v62;
      *(_QWORD *)v62 = *v57;
      v58[1] = v57[1];
LABEL_106:
      v59 = *((_OWORD *)a3 + 3);
      *(_OWORD *)&v60[16] = *((_OWORD *)a3 + 2);
      *(_OWORD *)&v60[32] = v59;
      *(_OWORD *)&v60[48] = *((_OWORD *)a3 + 4);
      goto LABEL_107;
    }
LABEL_105:
    sub_100256B48((uint64_t)v60, (uint64_t)(a3 + 2));
    goto LABEL_106;
  }
LABEL_107:
  v33 = 47;
  a5 = a5 / *((double *)a3 + 38);
LABEL_65:
  sub_10024E050(a4, v33, (uint64_t)v64, (uint64_t)v60, a5);
  if (*(_QWORD *)&v60[56])
  {
    v38 = (unsigned int *)(*(_QWORD *)&v60[56] + 20);
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
      sub_100256C90((uint64_t)v60);
  }
  *(_QWORD *)&v60[56] = 0;
  memset(&v60[16], 0, 32);
  if (*(int *)&v60[4] >= 1)
  {
    v41 = 0;
    v42 = v61;
    do
      *(_DWORD *)&v42[4 * v41++] = 0;
    while (v41 < *(int *)&v60[4]);
  }
  if (v62 != v63)
    j__free(v62);
  if (*(_QWORD *)&v64[56])
  {
    v43 = (unsigned int *)(*(_QWORD *)&v64[56] + 20);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
      sub_100256C90((uint64_t)v64);
  }
  *(_QWORD *)&v64[56] = 0;
  memset(&v64[16], 0, 32);
  if (*(int *)&v64[4] >= 1)
  {
    v46 = 0;
    v47 = v65;
    do
      *(_DWORD *)&v47[4 * v46++] = 0;
    while (v46 < *(int *)&v64[4]);
  }
  if (v66 != v67)
    j__free(v66);
LABEL_85:
  if (v69)
    sub_1002989D0(v68);
}

void sub_10024EB68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_10024EB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  sub_100006BE4((uint64_t)&a9);
  sub_100006BE4((uint64_t)&a21);
  sub_1001D40CC(v21 - 112);
  _Unwind_Resume(a1);
}

void sub_10024EBA0(double a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD v17[4];
  char *v18;
  void *v19;
  _QWORD v20[2];
  _QWORD v21[8];
  _QWORD *v22;
  void *v23;
  _QWORD v24[2];
  _BYTE v25[8];
  int v26;

  sub_100298C2C(v25, &off_10044D5E8);
  LODWORD(v21[0]) = 1124007936;
  memset((char *)v21 + 4, 0, 32);
  memset((char *)&v21[4] + 4, 0, 28);
  v22 = &v21[1];
  v23 = v24;
  v24[0] = 0;
  v24[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a3 + 24))(*a3, a3, v21, 0xFFFFFFFFLL);
  LODWORD(v17[0]) = 1124007936;
  memset((char *)v17 + 4, 0, 48);
  v17[3] = 0u;
  v18 = (char *)v17 + 8;
  v19 = v20;
  v20[0] = 0;
  v20[1] = 0;
  sub_10024E050(a4, 47, (uint64_t)v21, (uint64_t)v17, a1);
  if (*((_QWORD *)&v17[3] + 1))
  {
    v7 = (unsigned int *)(*((_QWORD *)&v17[3] + 1) + 20);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      sub_100256C90((uint64_t)v17);
  }
  *((_QWORD *)&v17[3] + 1) = 0;
  memset(&v17[1], 0, 32);
  if (SDWORD1(v17[0]) >= 1)
  {
    v10 = 0;
    v11 = v18;
    do
      *(_DWORD *)&v11[4 * v10++] = 0;
    while (v10 < SDWORD1(v17[0]));
  }
  if (v19 != v20)
    j__free(v19);
  if (v21[7])
  {
    v12 = (unsigned int *)(v21[7] + 20);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      sub_100256C90((uint64_t)v21);
  }
  v21[7] = 0;
  memset(&v21[2], 0, 32);
  if (SHIDWORD(v21[0]) >= 1)
  {
    v15 = 0;
    v16 = v22;
    do
      *((_DWORD *)v16 + v15++) = 0;
    while (v15 < SHIDWORD(v21[0]));
  }
  if (v23 != v24)
    j__free(v23);
  if (v26)
    sub_1002989D0(v25);
}

void sub_10024ED78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  sub_100006BE4((uint64_t)&a9);
  sub_100006BE4((uint64_t)&a21);
  sub_1001D40CC(v21 - 80);
  _Unwind_Resume(a1);
}

void sub_10024ED9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_100006BE4((uint64_t)va);
  sub_1001D40CC(v13 - 80);
  _Unwind_Resume(a1);
}

void sub_10024EDB8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  _OWORD v15[4];
  char *v16;
  void *v17;
  _QWORD v18[2];
  _QWORD v19[8];
  _QWORD *v20;
  void *v21;
  _QWORD v22[2];
  _BYTE v23[8];
  int v24;

  sub_100298C2C(v23, &off_10044D608);
  LODWORD(v19[0]) = 1124007936;
  memset((char *)v19 + 4, 0, 32);
  memset((char *)&v19[4] + 4, 0, 28);
  v20 = &v19[1];
  v21 = v22;
  v22[0] = 0;
  v22[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v19, 0xFFFFFFFFLL);
  LODWORD(v15[0]) = 1124007936;
  memset((char *)v15 + 4, 0, 48);
  v15[3] = 0u;
  v16 = (char *)v15 + 8;
  v17 = v18;
  v18[0] = 0;
  v18[1] = 0;
  sub_10024E050(a3, 97, (uint64_t)v19, (uint64_t)v15, 1.0);
  if (*((_QWORD *)&v15[3] + 1))
  {
    v5 = (unsigned int *)(*((_QWORD *)&v15[3] + 1) + 20);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      sub_100256C90((uint64_t)v15);
  }
  *((_QWORD *)&v15[3] + 1) = 0;
  memset(&v15[1], 0, 32);
  if (SDWORD1(v15[0]) >= 1)
  {
    v8 = 0;
    v9 = v16;
    do
      *(_DWORD *)&v9[4 * v8++] = 0;
    while (v8 < SDWORD1(v15[0]));
  }
  if (v17 != v18)
    j__free(v17);
  if (v19[7])
  {
    v10 = (unsigned int *)(v19[7] + 20);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      sub_100256C90((uint64_t)v19);
  }
  v19[7] = 0;
  memset(&v19[2], 0, 32);
  if (SHIDWORD(v19[0]) >= 1)
  {
    v13 = 0;
    v14 = v20;
    do
      *((_DWORD *)v14 + v13++) = 0;
    while (v13 < SHIDWORD(v19[0]));
  }
  if (v21 != v22)
    j__free(v21);
  if (v24)
    sub_1002989D0(v23);
}

void sub_10024EF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  sub_100006BE4((uint64_t)&a9);
  sub_100006BE4((uint64_t)&a21);
  sub_1001D40CC(v21 - 64);
  _Unwind_Resume(a1);
}

void sub_10024EFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_100006BE4((uint64_t)va);
  sub_1001D40CC(v13 - 64);
  _Unwind_Resume(a1);
}

void sub_10024EFC4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[8];
  _QWORD *v11;
  void *v12;
  _QWORD v13[2];
  _BYTE v14[8];
  int v15;

  sub_100298C2C(v14, &off_10044D628);
  LODWORD(v10[0]) = 1124007936;
  memset((char *)v10 + 4, 0, 32);
  memset((char *)&v10[4] + 4, 0, 28);
  v11 = &v10[1];
  v12 = v13;
  v13[0] = 0;
  v13[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v10, 0xFFFFFFFFLL);
  sub_10024F100(a3, (uint64_t)v10, 1.0);
  if (v10[7])
  {
    v5 = (unsigned int *)(v10[7] + 20);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      sub_100256C90((uint64_t)v10);
  }
  v10[7] = 0;
  memset(&v10[2], 0, 32);
  if (SHIDWORD(v10[0]) >= 1)
  {
    v8 = 0;
    v9 = v11;
    do
      *((_DWORD *)v9 + v8++) = 0;
    while (v8 < SHIDWORD(v10[0]));
  }
  if (v12 != v13)
    j__free(v12);
  if (v15)
    sub_1002989D0(v14);
}

void sub_10024F0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100006BE4((uint64_t)&a9);
  sub_1001D40CC(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_10024F100(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  _OWORD v26[2];
  _OWORD v27[4];
  char *v28;
  void *v29;
  _QWORD v30[2];
  _OWORD v31[4];
  char *v32;
  void *v33;
  _QWORD v34[2];
  uint64_t v35;
  int v36;
  _BYTE v37[64];
  _BYTE *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[9];

  LODWORD(v31[0]) = 1124007936;
  memset((char *)v31 + 4, 0, 48);
  v31[3] = 0u;
  v32 = (char *)v31 + 8;
  v33 = v34;
  v34[0] = 0;
  v34[1] = 0;
  LODWORD(v27[0]) = 1124007936;
  memset((char *)v27 + 4, 0, 48);
  v27[3] = 0u;
  v28 = (char *)v27 + 8;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  memset(v26, 0, sizeof(v26));
  sub_100254384((uint64_t)&v35, (uint64_t)off_10048AC50, 0, a2, (uint64_t)v31, (uint64_t)v27, v26, a3, 0.0);
  *(_QWORD *)a1 = v35;
  *(_DWORD *)(a1 + 8) = v36;
  if (&v35 != (uint64_t *)a1)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (v4)
    {
      v5 = (unsigned int *)(v4 + 20);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        sub_100256C90(a1 + 16);
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 80);
      do
        *(_DWORD *)(v9 + 4 * v8++) = 0;
      while (v8 < *(int *)(a1 + 20));
    }
    v10 = *(_DWORD *)&v37[4];
    v11 = *(_OWORD *)&v37[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v37;
    *(_OWORD *)(a1 + 32) = v11;
    v12 = *(_OWORD *)&v37[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v37[32];
    *(_OWORD *)(a1 + 64) = v12;
    v13 = *(uint64_t **)(a1 + 88);
    if (v13 == (uint64_t *)(a1 + 96))
    {
      v14 = v39;
      if (v10 <= 2)
        goto LABEL_12;
    }
    else
    {
      j__free(v13);
      *(_QWORD *)(a1 + 80) = a1 + 24;
      *(_QWORD *)(a1 + 88) = a1 + 96;
      v13 = (uint64_t *)(a1 + 96);
      v14 = v39;
      if (*(int *)&v37[4] <= 2)
      {
LABEL_12:
        *v13 = *v14;
        v13[1] = v14[1];
LABEL_15:
        *(_DWORD *)v37 = 1124007936;
        memset(&v37[4], 0, 60);
        goto LABEL_16;
      }
    }
    *(_QWORD *)(a1 + 80) = v38;
    *(_QWORD *)(a1 + 88) = v14;
    v38 = &v37[8];
    v39 = &v40;
    goto LABEL_15;
  }
LABEL_16:
  sub_10024B080(a1 + 112, (uint64_t)&v41);
  sub_10024B080(a1 + 208, (uint64_t)v42);
  v15 = v42[7];
  *(_OWORD *)(a1 + 304) = v42[6];
  *(_OWORD *)(a1 + 320) = v15;
  *(_OWORD *)(a1 + 336) = v42[8];
  sub_100008C98((uint64_t)&v35);
  if (*((_QWORD *)&v27[3] + 1))
  {
    v16 = (unsigned int *)(*((_QWORD *)&v27[3] + 1) + 20);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      sub_100256C90((uint64_t)v27);
  }
  *((_QWORD *)&v27[3] + 1) = 0;
  memset(&v27[1], 0, 32);
  if (SDWORD1(v27[0]) >= 1)
  {
    v19 = 0;
    v20 = v28;
    do
      *(_DWORD *)&v20[4 * v19++] = 0;
    while (v19 < SDWORD1(v27[0]));
  }
  if (v29 != v30)
    j__free(v29);
  if (*((_QWORD *)&v31[3] + 1))
  {
    v21 = (unsigned int *)(*((_QWORD *)&v31[3] + 1) + 20);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      sub_100256C90((uint64_t)v31);
  }
  *((_QWORD *)&v31[3] + 1) = 0;
  memset(&v31[1], 0, 32);
  if (SDWORD1(v31[0]) >= 1)
  {
    v24 = 0;
    v25 = v32;
    do
      *(_DWORD *)&v25[4 * v24++] = 0;
    while (v24 < SDWORD1(v31[0]));
  }
  if (v33 != v34)
    j__free(v33);
}

void sub_10024F3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_100006BE4((uint64_t)va);
  sub_100006BE4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10024F404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_100008C98((uint64_t)&a37);
  sub_100006BE4((uint64_t)&a13);
  sub_100006BE4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_10024F428(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t (***v7)();
  int v8;
  double v9;
  uint64_t (***v10)();
  _DWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _BYTE *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE *v42;
  _DWORD *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  _BYTE *v51;
  int v52;
  _QWORD *v53;
  _QWORD *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  char *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  _BYTE *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  _BYTE *v69;
  _OWORD v70[4];
  char *v71;
  void *v72;
  _QWORD v73[2];
  _BYTE v74[64];
  _BYTE *v75;
  void *v76;
  _QWORD v77[2];
  _BYTE v78[64];
  _BYTE *v79;
  void *v80;
  _QWORD v81[2];

  if (*a3 != a1)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)*a3 + 184))(*a3, a2, a3, a4);
    return;
  }
  *(_DWORD *)v78 = 1124007936;
  memset(&v78[4], 0, 60);
  v79 = &v78[8];
  v80 = v81;
  v81[0] = 0;
  v81[1] = 0;
  *(_DWORD *)v74 = 1124007936;
  memset(&v74[4], 0, 60);
  v75 = &v74[8];
  v76 = v77;
  v77[0] = 0;
  v77[1] = 0;
  v7 = *(uint64_t (****)())a2;
  if (*(uint64_t (****)())a2 == off_10048AC50)
  {
    v9 = *(double *)(a2 + 304);
    v11 = (_DWORD *)(a2 + 16);
    if (v78 == (_BYTE *)(a2 + 16))
    {
      v8 = 1;
      v10 = (uint64_t (***)())*a3;
      if ((uint64_t (***)())*a3 == off_10048AC50)
        goto LABEL_65;
      goto LABEL_31;
    }
    v12 = *(_QWORD *)(a2 + 72);
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 20);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      if (*(_QWORD *)&v78[56])
      {
        v15 = (unsigned int *)(*(_QWORD *)&v78[56] + 20);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
          sub_100256C90((uint64_t)v78);
      }
    }
    *(_QWORD *)&v78[56] = 0;
    memset(&v78[16], 0, 32);
    if (*(uint64_t *)v78 <= 0)
    {
      *(_DWORD *)v78 = *v11;
      v20 = *(_DWORD *)(a2 + 20);
      if (v20 <= 2)
      {
LABEL_24:
        *(_DWORD *)&v78[4] = v20;
        *(_QWORD *)&v78[8] = *(_QWORD *)(a2 + 24);
        v21 = *(_QWORD **)(a2 + 88);
        v22 = v80;
        *(_QWORD *)v80 = *v21;
        v8 = 1;
        goto LABEL_25;
      }
    }
    else
    {
      v18 = 0;
      v19 = v79;
      do
        *(_DWORD *)&v19[4 * v18++] = 0;
      while (v18 < *(int *)&v78[4]);
      *(_DWORD *)v78 = *v11;
      if (*(int *)&v78[4] <= 2)
      {
        v20 = *(_DWORD *)(a2 + 20);
        if (v20 <= 2)
          goto LABEL_24;
      }
    }
    sub_100256B48((uint64_t)v78, a2 + 16);
    v8 = 1;
    goto LABEL_30;
  }
  if (v7 == off_10048AC30
    && (!*(_QWORD *)(a2 + 128) || *(double *)(a2 + 312) == 0.0)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 336)))))) & 1) == 0)
  {
    v9 = *(double *)(a2 + 304);
    v25 = (_DWORD *)(a2 + 16);
    if (v78 == (_BYTE *)(a2 + 16))
    {
      v8 = 0;
      v10 = (uint64_t (***)())*a3;
      if ((uint64_t (***)())*a3 != off_10048AC50)
        goto LABEL_31;
LABEL_65:
      v8 |= 2u;
      v9 = v9 * *((double *)a3 + 38);
      v43 = a3 + 2;
      if (v74 == (_BYTE *)(a3 + 2))
        goto LABEL_84;
      v44 = a3[9];
      if (v44)
      {
        v45 = (unsigned int *)(v44 + 20);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 + 1, v45));
      }
      if (*(_QWORD *)&v74[56])
      {
        v47 = (unsigned int *)(*(_QWORD *)&v74[56] + 20);
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
          sub_100256C90((uint64_t)v74);
      }
      *(_QWORD *)&v74[56] = 0;
      memset(&v74[16], 0, 32);
      if (*(uint64_t *)v74 > 0)
      {
        v50 = 0;
        v51 = v75;
        do
          *(_DWORD *)&v51[4 * v50++] = 0;
        while (v50 < *(int *)&v74[4]);
        *(_DWORD *)v74 = *v43;
        if (*(int *)&v74[4] > 2)
          goto LABEL_82;
        v52 = *((_DWORD *)a3 + 5);
        if (v52 > 2)
          goto LABEL_82;
LABEL_81:
        *(_DWORD *)&v74[4] = v52;
        *(_QWORD *)&v74[8] = a3[3];
        v53 = (_QWORD *)a3[11];
        v54 = v76;
        *(_QWORD *)v76 = *v53;
        v54[1] = v53[1];
LABEL_83:
        *(_QWORD *)&v74[16] = a3[4];
        *(_OWORD *)&v74[24] = *(_OWORD *)(a3 + 5);
        *(_OWORD *)&v74[40] = *(_OWORD *)(a3 + 7);
        *(_QWORD *)&v74[56] = a3[9];
        goto LABEL_84;
      }
      *(_DWORD *)v74 = *v43;
      v52 = *((_DWORD *)a3 + 5);
      if (v52 <= 2)
        goto LABEL_81;
LABEL_82:
      sub_100256B48((uint64_t)v74, (uint64_t)(a3 + 2));
      goto LABEL_83;
    }
    v26 = *(_QWORD *)(a2 + 72);
    if (v26)
    {
      v27 = (unsigned int *)(v26 + 20);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
      if (*(_QWORD *)&v78[56])
      {
        v29 = (unsigned int *)(*(_QWORD *)&v78[56] + 20);
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
          sub_100256C90((uint64_t)v78);
      }
    }
    *(_QWORD *)&v78[56] = 0;
    memset(&v78[16], 0, 32);
    if (*(uint64_t *)v78 <= 0)
    {
      *(_DWORD *)v78 = *v25;
    }
    else
    {
      v32 = 0;
      v33 = v79;
      do
        *(_DWORD *)&v33[4 * v32++] = 0;
      while (v32 < *(int *)&v78[4]);
      *(_DWORD *)v78 = *v25;
      if (*(int *)&v78[4] > 2)
        goto LABEL_118;
    }
    if (*(int *)(a2 + 20) > 2)
    {
LABEL_118:
      sub_100256B48((uint64_t)v78, a2 + 16);
      v8 = 0;
LABEL_30:
      v23 = *(_QWORD *)(a2 + 32);
      *(_OWORD *)&v78[24] = *(_OWORD *)(a2 + 40);
      *(_OWORD *)&v78[40] = *(_OWORD *)(a2 + 56);
      v24 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)&v78[16] = v23;
      *(_QWORD *)&v78[56] = v24;
      v10 = (uint64_t (***)())*a3;
      if ((uint64_t (***)())*a3 != off_10048AC50)
        goto LABEL_31;
      goto LABEL_65;
    }
    v8 = 0;
    *(_DWORD *)&v78[4] = *(_DWORD *)(a2 + 20);
    *(_QWORD *)&v78[8] = *(_QWORD *)(a2 + 24);
    v21 = *(_QWORD **)(a2 + 88);
    v22 = v80;
    *(_QWORD *)v80 = *v21;
LABEL_25:
    v22[1] = v21[1];
    goto LABEL_30;
  }
  ((void (*)(uint64_t (***)(), uint64_t, _BYTE *, uint64_t))(*v7)[3])(v7, a2, v78, 0xFFFFFFFFLL);
  v8 = 0;
  v9 = 1.0;
  v10 = (uint64_t (***)())*a3;
  if ((uint64_t (***)())*a3 == off_10048AC50)
    goto LABEL_65;
LABEL_31:
  if (v10 != off_10048AC30
    || a3[16] && *((double *)a3 + 39) != 0.0
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 20)), (int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 21)))))) & 1) != 0)
  {
    ((void (*)(uint64_t (***)(), _QWORD *, _BYTE *, uint64_t))(*v10)[3])(v10, a3, v74, 0xFFFFFFFFLL);
    goto LABEL_84;
  }
  v9 = v9 * *((double *)a3 + 38);
  v34 = a3 + 2;
  if (v74 != (_BYTE *)(a3 + 2))
  {
    v35 = a3[9];
    if (v35)
    {
      v36 = (unsigned int *)(v35 + 20);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
    }
    if (*(_QWORD *)&v74[56])
    {
      v38 = (unsigned int *)(*(_QWORD *)&v74[56] + 20);
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
        sub_100256C90((uint64_t)v74);
    }
    *(_QWORD *)&v74[56] = 0;
    memset(&v74[16], 0, 32);
    if (*(uint64_t *)v74 <= 0)
    {
      *(_DWORD *)v74 = *v34;
    }
    else
    {
      v41 = 0;
      v42 = v75;
      do
        *(_DWORD *)&v42[4 * v41++] = 0;
      while (v41 < *(int *)&v74[4]);
      *(_DWORD *)v74 = *v34;
      if (*(int *)&v74[4] > 2)
        goto LABEL_82;
    }
    v52 = *((_DWORD *)a3 + 5);
    if (v52 <= 2)
      goto LABEL_81;
    goto LABEL_82;
  }
LABEL_84:
  LODWORD(v70[0]) = 1124007936;
  memset((char *)v70 + 4, 0, 48);
  v70[3] = 0u;
  v71 = (char *)v70 + 8;
  v72 = v73;
  v73[0] = 0;
  v73[1] = 0;
  sub_10024FBF8(a4, v8, (uint64_t)v78, (uint64_t)v74, (uint64_t)v70, v9, 1.0);
  if (*((_QWORD *)&v70[3] + 1))
  {
    v55 = (unsigned int *)(*((_QWORD *)&v70[3] + 1) + 20);
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
      sub_100256C90((uint64_t)v70);
  }
  *((_QWORD *)&v70[3] + 1) = 0;
  memset(&v70[1], 0, 32);
  if (SDWORD1(v70[0]) >= 1)
  {
    v58 = 0;
    v59 = v71;
    do
      *(_DWORD *)&v59[4 * v58++] = 0;
    while (v58 < SDWORD1(v70[0]));
  }
  if (v72 != v73)
    j__free(v72);
  if (*(_QWORD *)&v74[56])
  {
    v60 = (unsigned int *)(*(_QWORD *)&v74[56] + 20);
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
      sub_100256C90((uint64_t)v74);
  }
  *(_QWORD *)&v74[56] = 0;
  memset(&v74[16], 0, 32);
  if (*(int *)&v74[4] >= 1)
  {
    v63 = 0;
    v64 = v75;
    do
      *(_DWORD *)&v64[4 * v63++] = 0;
    while (v63 < *(int *)&v74[4]);
  }
  if (v76 != v77)
    j__free(v76);
  if (*(_QWORD *)&v78[56])
  {
    v65 = (unsigned int *)(*(_QWORD *)&v78[56] + 20);
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
      sub_100256C90((uint64_t)v78);
  }
  *(_QWORD *)&v78[56] = 0;
  memset(&v78[16], 0, 32);
  if (*(int *)&v78[4] >= 1)
  {
    v68 = 0;
    v69 = v79;
    do
      *(_DWORD *)&v69[4 * v68++] = 0;
    while (v68 < *(int *)&v78[4]);
  }
  if (v80 != v81)
    j__free(v80);
}

void sub_10024FBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_100006BE4((uint64_t)&a9);
  sub_100006BE4((uint64_t)&a21);
  sub_100006BE4((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_10024FBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_100006BE4((uint64_t)&a21);
  sub_100006BE4((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_10024FBF8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 v19;
  _OWORD v21[2];
  uint64_t v22;
  int v23;
  _BYTE v24[64];
  _BYTE *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[9];

  memset(v21, 0, sizeof(v21));
  sub_100254384((uint64_t)&v22, (uint64_t)off_10048AC40, a2, a3, a4, a5, v21, a6, a7);
  *(_QWORD *)a1 = v22;
  *(_DWORD *)(a1 + 8) = v23;
  if (&v22 != (uint64_t *)a1)
  {
    v8 = *(_QWORD *)(a1 + 72);
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        sub_100256C90(a1 + 16);
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a1 + 80);
      do
        *(_DWORD *)(v13 + 4 * v12++) = 0;
      while (v12 < *(int *)(a1 + 20));
    }
    v14 = *(_DWORD *)&v24[4];
    v15 = *(_OWORD *)&v24[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v24;
    *(_OWORD *)(a1 + 32) = v15;
    v16 = *(_OWORD *)&v24[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v24[32];
    *(_OWORD *)(a1 + 64) = v16;
    v17 = *(uint64_t **)(a1 + 88);
    if (v17 == (uint64_t *)(a1 + 96))
    {
      v18 = v26;
      if (v14 <= 2)
        goto LABEL_12;
    }
    else
    {
      j__free(v17);
      *(_QWORD *)(a1 + 80) = a1 + 24;
      *(_QWORD *)(a1 + 88) = a1 + 96;
      v17 = (uint64_t *)(a1 + 96);
      v18 = v26;
      if (*(int *)&v24[4] <= 2)
      {
LABEL_12:
        *v17 = *v18;
        v17[1] = v18[1];
LABEL_15:
        *(_DWORD *)v24 = 1124007936;
        memset(&v24[4], 0, 60);
        goto LABEL_16;
      }
    }
    *(_QWORD *)(a1 + 80) = v25;
    *(_QWORD *)(a1 + 88) = v18;
    v25 = &v24[8];
    v26 = &v27;
    goto LABEL_15;
  }
LABEL_16:
  sub_10024B080(a1 + 112, (uint64_t)&v28);
  sub_10024B080(a1 + 208, (uint64_t)v29);
  v19 = v29[7];
  *(_OWORD *)(a1 + 304) = v29[6];
  *(_OWORD *)(a1 + 320) = v19;
  *(_OWORD *)(a1 + 336) = v29[8];
  return sub_100008C98((uint64_t)&v22);
}

void sub_10024FDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100008C98((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024FDB4(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[8];
  _QWORD *v12;
  void *v13;
  _QWORD v14[2];

  LODWORD(v11[0]) = 1124007936;
  memset((char *)v11 + 4, 0, 32);
  memset((char *)&v11[4] + 4, 0, 28);
  v12 = &v11[1];
  v13 = v14;
  v14[0] = 0;
  v14[1] = 0;
  (*(void (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a2, v11, 0xFFFFFFFFLL);
  sub_10024FEC0(a4, a3, (uint64_t)v11);
  if (v11[7])
  {
    v6 = (unsigned int *)(v11[7] + 20);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      sub_100256C90((uint64_t)v11);
  }
  v11[7] = 0;
  memset(&v11[2], 0, 32);
  if (SHIDWORD(v11[0]) >= 1)
  {
    v9 = 0;
    v10 = v12;
    do
      *((_DWORD *)v10 + v9++) = 0;
    while (v9 < SHIDWORD(v11[0]));
  }
  if (v13 != v14)
    j__free(v13);
}

void sub_10024FEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10024FEC0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  _OWORD v26[2];
  _OWORD v27[4];
  char *v28;
  void *v29;
  _QWORD v30[2];
  _OWORD v31[4];
  char *v32;
  void *v33;
  _QWORD v34[2];
  uint64_t v35;
  int v36;
  _BYTE v37[64];
  _BYTE *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[9];

  LODWORD(v31[0]) = 1124007936;
  memset((char *)v31 + 4, 0, 48);
  v31[3] = 0u;
  v32 = (char *)v31 + 8;
  v33 = v34;
  v34[0] = 0;
  v34[1] = 0;
  LODWORD(v27[0]) = 1124007936;
  memset((char *)v27 + 4, 0, 48);
  v27[3] = 0u;
  v28 = (char *)v27 + 8;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  memset(v26, 0, sizeof(v26));
  sub_100254384((uint64_t)&v35, (uint64_t)off_10048AC48, a2, a3, (uint64_t)v31, (uint64_t)v27, v26, 1.0, 0.0);
  *(_QWORD *)a1 = v35;
  *(_DWORD *)(a1 + 8) = v36;
  if (&v35 != (uint64_t *)a1)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (v4)
    {
      v5 = (unsigned int *)(v4 + 20);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        sub_100256C90(a1 + 16);
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 80);
      do
        *(_DWORD *)(v9 + 4 * v8++) = 0;
      while (v8 < *(int *)(a1 + 20));
    }
    v10 = *(_DWORD *)&v37[4];
    v11 = *(_OWORD *)&v37[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v37;
    *(_OWORD *)(a1 + 32) = v11;
    v12 = *(_OWORD *)&v37[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v37[32];
    *(_OWORD *)(a1 + 64) = v12;
    v13 = *(uint64_t **)(a1 + 88);
    if (v13 == (uint64_t *)(a1 + 96))
    {
      v14 = v39;
      if (v10 <= 2)
        goto LABEL_12;
    }
    else
    {
      j__free(v13);
      *(_QWORD *)(a1 + 80) = a1 + 24;
      *(_QWORD *)(a1 + 88) = a1 + 96;
      v13 = (uint64_t *)(a1 + 96);
      v14 = v39;
      if (*(int *)&v37[4] <= 2)
      {
LABEL_12:
        *v13 = *v14;
        v13[1] = v14[1];
LABEL_15:
        *(_DWORD *)v37 = 1124007936;
        memset(&v37[4], 0, 60);
        goto LABEL_16;
      }
    }
    *(_QWORD *)(a1 + 80) = v38;
    *(_QWORD *)(a1 + 88) = v14;
    v38 = &v37[8];
    v39 = &v40;
    goto LABEL_15;
  }
LABEL_16:
  sub_10024B080(a1 + 112, (uint64_t)&v41);
  sub_10024B080(a1 + 208, (uint64_t)v42);
  v15 = v42[7];
  *(_OWORD *)(a1 + 304) = v42[6];
  *(_OWORD *)(a1 + 320) = v15;
  *(_OWORD *)(a1 + 336) = v42[8];
  sub_100008C98((uint64_t)&v35);
  if (*((_QWORD *)&v27[3] + 1))
  {
    v16 = (unsigned int *)(*((_QWORD *)&v27[3] + 1) + 20);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      sub_100256C90((uint64_t)v27);
  }
  *((_QWORD *)&v27[3] + 1) = 0;
  memset(&v27[1], 0, 32);
  if (SDWORD1(v27[0]) >= 1)
  {
    v19 = 0;
    v20 = v28;
    do
      *(_DWORD *)&v20[4 * v19++] = 0;
    while (v19 < SDWORD1(v27[0]));
  }
  if (v29 != v30)
    j__free(v29);
  if (*((_QWORD *)&v31[3] + 1))
  {
    v21 = (unsigned int *)(*((_QWORD *)&v31[3] + 1) + 20);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      sub_100256C90((uint64_t)v31);
  }
  *((_QWORD *)&v31[3] + 1) = 0;
  memset(&v31[1], 0, 32);
  if (SDWORD1(v31[0]) >= 1)
  {
    v24 = 0;
    v25 = v32;
    do
      *(_DWORD *)&v25[4 * v24++] = 0;
    while (v24 < SDWORD1(v31[0]));
  }
  if (v33 != v34)
    j__free(v33);
}

void sub_1002501AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_100006BE4((uint64_t)va);
  sub_100006BE4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002501C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_100008C98((uint64_t)&a37);
  sub_100006BE4((uint64_t)&a13);
  sub_100006BE4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

int32x2_t sub_1002501EC@<D0>(uint64_t a1@<X1>, int32x2_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int32x2_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_21;
  v2 = *(unsigned int *)(a1 + 20);
  if ((int)v2 >= 3)
  {
    v4 = *(_QWORD *)(a1 + 80);
    v5 = (int *)(v4 + 4);
    v6 = 1;
    v7 = v2 & 0xFFFFFFFE;
    v8 = 1;
    do
    {
      v6 *= *(v5 - 1);
      v8 *= *v5;
      v5 += 2;
      v7 -= 2;
    }
    while (v7);
    v3 = v8 * v6;
    v9 = v2 - (v2 & 0xFFFFFFFE);
    if (v9)
    {
      v10 = (int *)(v4 + ((4 * v2) & 0x3FFFFFFF8));
      do
      {
        v11 = *v10++;
        v3 *= v11;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    v3 = *(int *)(a1 + 28) * (uint64_t)*(int *)(a1 + 24);
  }
  if ((_DWORD)v2 && v3)
  {
    result = vrev64_s32(**(int32x2_t **)(a1 + 80));
    *a2 = result;
  }
  else
  {
    if (!*(_QWORD *)(a1 + 128))
      goto LABEL_23;
LABEL_21:
    v13 = *(unsigned int *)(a1 + 116);
    if ((int)v13 >= 3)
    {
      v15 = *(_QWORD *)(a1 + 176);
      v16 = (int *)(v15 + 4);
      v17 = 1;
      v18 = v13 & 0xFFFFFFFE;
      v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      v14 = v19 * v17;
      v20 = v13 - (v13 & 0xFFFFFFFE);
      if (v20)
      {
        v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
        do
        {
          v22 = *v21++;
          v14 *= v22;
          --v20;
        }
        while (v20);
      }
    }
    else
    {
      v14 = *(int *)(a1 + 124) * (uint64_t)*(int *)(a1 + 120);
    }
    if ((_DWORD)v13 && v14)
    {
      result = vrev64_s32(**(int32x2_t **)(a1 + 272));
      *a2 = result;
    }
    else
    {
LABEL_23:
      result = vrev64_s32(**(int32x2_t **)(a1 + 176));
      *a2 = result;
    }
  }
  return result;
}

uint64_t sub_100250334(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  _BYTE v27[8];
  int v28;

  sub_100298C2C(v27, &off_10044D648);
  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v3 = *(unsigned int *)(a2 + 20);
  if ((int)v3 >= 3)
  {
    v5 = *(_QWORD *)(a2 + 80);
    v6 = (int *)(v5 + 4);
    v7 = 1;
    v8 = v3 & 0xFFFFFFFE;
    v9 = 1;
    do
    {
      v7 *= *(v6 - 1);
      v9 *= *v6;
      v6 += 2;
      v8 -= 2;
    }
    while (v8);
    v4 = v9 * v7;
    v10 = v3 - (v3 & 0xFFFFFFFE);
    if (v10)
    {
      v11 = (int *)(v5 + ((4 * v3) & 0x3FFFFFFF8));
      do
      {
        v12 = *v11++;
        v4 *= v12;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    v4 = *(int *)(a2 + 28) * (uint64_t)*(int *)(a2 + 24);
  }
  if ((_DWORD)v3 && v4)
  {
    v13 = (int *)(a2 + 16);
  }
  else
  {
LABEL_12:
    v13 = (int *)(a2 + 112);
    if (*(_QWORD *)(a2 + 128))
    {
      v14 = *(unsigned int *)(a2 + 116);
      if ((int)v14 >= 3)
      {
        v16 = *(_QWORD *)(a2 + 176);
        v17 = (int *)(v16 + 4);
        v18 = 1;
        v19 = v14 & 0xFFFFFFFE;
        v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        v15 = v20 * v18;
        v21 = v14 - (v14 & 0xFFFFFFFE);
        if (v21)
        {
          v22 = (int *)(v16 + ((4 * v14) & 0x3FFFFFFF8));
          do
          {
            v23 = *v22++;
            v15 *= v23;
            --v21;
          }
          while (v21);
        }
      }
      else
      {
        v15 = *(int *)(a2 + 124) * (uint64_t)*(int *)(a2 + 120);
      }
      if (v15)
        v24 = (_DWORD)v14 == 0;
      else
        v24 = 1;
      if (!v24)
        v13 = (int *)(a2 + 208);
    }
  }
  v25 = *v13;
  if (v28)
    sub_1002989D0(v27);
  return v25 & 0xFFF;
}

void sub_100250498(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  _OWORD v27[4];
  char *v28;
  void *v29;
  _QWORD v30[2];
  _OWORD v31[4];
  char *v32;
  void *v33;
  _QWORD v34[2];
  uint64_t v35;
  int v36;
  _BYTE v37[64];
  _BYTE *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[9];

  LODWORD(v31[0]) = 1124007936;
  memset((char *)v31 + 4, 0, 48);
  v31[3] = 0u;
  v32 = (char *)v31 + 8;
  v33 = v34;
  v34[0] = 0;
  v34[1] = 0;
  LODWORD(v27[0]) = 1124007936;
  memset((char *)v27 + 4, 0, 48);
  v27[3] = 0u;
  v28 = (char *)v27 + 8;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  sub_100254384((uint64_t)&v35, (uint64_t)off_10048AC38, a2, a3, (uint64_t)v31, (uint64_t)v27, a4, 1.0, 0.0);
  *(_QWORD *)a1 = v35;
  *(_DWORD *)(a1 + 8) = v36;
  if (&v35 != (uint64_t *)a1)
  {
    v5 = *(_QWORD *)(a1 + 72);
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 20);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        sub_100256C90(a1 + 16);
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      v9 = 0;
      v10 = *(_QWORD *)(a1 + 80);
      do
        *(_DWORD *)(v10 + 4 * v9++) = 0;
      while (v9 < *(int *)(a1 + 20));
    }
    v11 = *(_DWORD *)&v37[4];
    v12 = *(_OWORD *)&v37[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v37;
    *(_OWORD *)(a1 + 32) = v12;
    v13 = *(_OWORD *)&v37[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v37[32];
    *(_OWORD *)(a1 + 64) = v13;
    v14 = *(uint64_t **)(a1 + 88);
    if (v14 == (uint64_t *)(a1 + 96))
    {
      v15 = v39;
      if (v11 <= 2)
        goto LABEL_12;
    }
    else
    {
      j__free(v14);
      *(_QWORD *)(a1 + 80) = a1 + 24;
      *(_QWORD *)(a1 + 88) = a1 + 96;
      v14 = (uint64_t *)(a1 + 96);
      v15 = v39;
      if (*(int *)&v37[4] <= 2)
      {
LABEL_12:
        *v14 = *v15;
        v14[1] = v15[1];
LABEL_15:
        *(_DWORD *)v37 = 1124007936;
        memset(&v37[4], 0, 60);
        goto LABEL_16;
      }
    }
    *(_QWORD *)(a1 + 80) = v38;
    *(_QWORD *)(a1 + 88) = v15;
    v38 = &v37[8];
    v39 = &v40;
    goto LABEL_15;
  }
LABEL_16:
  sub_10024B080(a1 + 112, (uint64_t)&v41);
  sub_10024B080(a1 + 208, (uint64_t)v42);
  v16 = v42[7];
  *(_OWORD *)(a1 + 304) = v42[6];
  *(_OWORD *)(a1 + 320) = v16;
  *(_OWORD *)(a1 + 336) = v42[8];
  sub_100008C98((uint64_t)&v35);
  if (*((_QWORD *)&v27[3] + 1))
  {
    v17 = (unsigned int *)(*((_QWORD *)&v27[3] + 1) + 20);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      sub_100256C90((uint64_t)v27);
  }
  *((_QWORD *)&v27[3] + 1) = 0;
  memset(&v27[1], 0, 32);
  if (SDWORD1(v27[0]) >= 1)
  {
    v20 = 0;
    v21 = v28;
    do
      *(_DWORD *)&v21[4 * v20++] = 0;
    while (v20 < SDWORD1(v27[0]));
  }
  if (v29 != v30)
    j__free(v29);
  if (*((_QWORD *)&v31[3] + 1))
  {
    v22 = (unsigned int *)(*((_QWORD *)&v31[3] + 1) + 20);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      sub_100256C90((uint64_t)v31);
  }
  *((_QWORD *)&v31[3] + 1) = 0;
  memset(&v31[1], 0, 32);
  if (SDWORD1(v31[0]) >= 1)
  {
    v25 = 0;
    v26 = v32;
    do
      *(_DWORD *)&v26[4 * v25++] = 0;
    while (v25 < SDWORD1(v31[0]));
  }
  if (v33 != v34)
    j__free(v33);
}

void sub_100250780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_100006BE4((uint64_t)&a9);
  sub_100006BE4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_10025079C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_100008C98((uint64_t)&a33);
  sub_100006BE4((uint64_t)&a9);
  sub_100006BE4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1002507C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (***v4)();
  int v6;
  int v7;

  v2 = result;
  v4 = *(uint64_t (****)())result;
  if (*(uint64_t (****)())result == off_10048AC50 || v4 == off_10048AC48)
  {
    *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  }
  else if (v4 == off_10048AC40)
  {
    v6 = *(_DWORD *)(result + 24);
    *(_DWORD *)a2 = *(_DWORD *)(result + 124);
    *(_DWORD *)(a2 + 4) = v6;
  }
  else if (v4 == &off_10048AC58)
  {
    v7 = *(_DWORD *)(result + 28);
    *(_DWORD *)a2 = *(_DWORD *)(result + 124);
    *(_DWORD *)(a2 + 4) = v7;
  }
  else
  {
    result = sub_1002545A8();
    if ((uint64_t (***)())result == v4)
    {
      *(int32x2_t *)a2 = vrev64_s32(**(int32x2_t **)(v2 + 80));
    }
    else
    {
      result = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 200))(result, v2);
      else
        *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

uint64_t sub_1002508D0(uint64_t a1)
{
  uint64_t (***v2)();
  uint64_t (***v3)();
  uint64_t v4;
  _BYTE v6[8];
  int v7;

  sub_100298C2C(v6, &off_10044D668);
  v2 = *(uint64_t (****)())a1;
  if ((uint64_t (***)())sub_1002545A8() == v2)
  {
    v4 = *(_DWORD *)(a1 + 16) & 0xFFF;
    if (!v7)
      return v4;
    goto LABEL_11;
  }
  v3 = *(uint64_t (****)())a1;
  if (*(uint64_t (****)())a1 == off_10048AC20)
  {
    v4 = 0;
    if (!v7)
      return v4;
    goto LABEL_11;
  }
  if (v3)
  {
    v4 = ((uint64_t (*)(uint64_t (***)(), uint64_t))(*v3)[26])(v3, a1);
    if (!v7)
      return v4;
    goto LABEL_11;
  }
  v4 = 0xFFFFFFFFLL;
  if (v7)
LABEL_11:
    sub_1002989D0(v6);
  return v4;
}

void sub_10025098C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_1002509A0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a4 == -1 || (v6 = *(_DWORD *)(a2 + 16), (v6 & 0xFFF) == a4))
  {
    v7 = (_DWORD *)(a2 + 16);
    if (a2 + 16 != a3)
    {
      v8 = *(_QWORD *)(a2 + 72);
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 20);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
      }
      v11 = *(_QWORD *)(a3 + 56);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 20);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          sub_100256C90(a3);
      }
      *(_QWORD *)(a3 + 56) = 0;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      if (*(int *)(a3 + 4) <= 0)
      {
        *(_DWORD *)a3 = *v7;
        v18 = *(_DWORD *)(a2 + 20);
        if (v18 <= 2)
        {
LABEL_17:
          *(_DWORD *)(a3 + 4) = v18;
          *(_QWORD *)(a3 + 8) = *(_QWORD *)(a2 + 24);
          v19 = *(_QWORD **)(a2 + 88);
          v20 = *(_QWORD **)(a3 + 72);
          *v20 = *v19;
          v20[1] = v19[1];
LABEL_24:
          *(_OWORD *)(a3 + 16) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 48);
          result = *(__n128 *)(a2 + 64);
          *(__n128 *)(a3 + 48) = result;
          return result;
        }
      }
      else
      {
        v15 = 0;
        v16 = *(_QWORD *)(a3 + 64);
        do
        {
          *(_DWORD *)(v16 + 4 * v15++) = 0;
          v17 = *(int *)(a3 + 4);
        }
        while (v15 < v17);
        *(_DWORD *)a3 = *v7;
        if ((int)v17 <= 2)
        {
          v18 = *(_DWORD *)(a2 + 20);
          if (v18 <= 2)
            goto LABEL_17;
        }
      }
      sub_100256B48(a3, a2 + 16);
      goto LABEL_24;
    }
  }
  else
  {
    if ((((unsigned __int16)v6 ^ (unsigned __int16)a4) & 0xFF8) != 0)
    {
      v22 = 0;
      v23 = 0;
      qmemcpy((void *)sub_10029430C(&v22, 59), "((((_type) & ((512 - 1) << 3)) >> 3) + 1) == e.a.channels()", 59);
      sub_100294B74(-215, &v22, "assign", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matop.cpp", 1238);
    }
    LODWORD(v22) = 33619968;
    v23 = a3;
    v24 = 0;
    sub_1002044A8((unsigned int *)(a2 + 16), (uint64_t)&v22, a4, 1.0, 0.0);
  }
  return result;
}

void sub_100250B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100250BA8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _OWORD *v6;
  _OWORD *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v14;
  double v15;
  double v16;
  double v17;
  int *v18;
  double v19;
  double v20;
  int *v21;
  int *v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  int v32;
  _OWORD *v33;
  uint64_t v34;
  int v35;
  _OWORD *v36;
  uint64_t v37;
  int v38;
  _OWORD *v39;
  uint64_t v40;
  _OWORD v41[4];
  char *v42;
  void *v43;
  _QWORD v44[2];

  LODWORD(v41[0]) = 1124007936;
  memset((char *)v41 + 4, 0, 48);
  v41[3] = 0u;
  v42 = (char *)v41 + 8;
  v43 = v44;
  v44[0] = 0;
  v44[1] = 0;
  if (a4 == -1 || (*(_DWORD *)(a2 + 16) & 0xFFF) == a4)
  {
    v6 = (_OWORD *)a3;
    v7 = (_OWORD *)(a2 + 320);
    if (*(_QWORD *)(a2 + 128))
      goto LABEL_4;
  }
  else
  {
    v6 = v41;
    v7 = (_OWORD *)(a2 + 320);
    if (*(_QWORD *)(a2 + 128))
    {
LABEL_4:
      v8 = *(double *)(a2 + 320);
      v9 = *(double *)(a2 + 328);
      v11 = *(double *)(a2 + 336);
      v10 = *(double *)(a2 + 344);
      v14 = v10 == 0.0 && v11 == 0.0 && v9 == 0.0 && v8 == 0.0;
      if (!v14 && v9 == 0.0 && v11 == 0.0 && v10 == 0.0)
      {
        v40 = 0;
        v38 = 16842752;
        v39 = (_OWORD *)(a2 + 16);
        v37 = 0;
        v35 = 16842752;
        v36 = (_OWORD *)(a2 + 112);
        v15 = *(double *)(a2 + 304);
        v16 = *(double *)(a2 + 312);
        v32 = 33619968;
        v33 = v6;
        v34 = 0;
        sub_1001D886C((uint64_t)&v38, (uint64_t)&v35, (uint64_t)&v32, -1, v15, v16, v8);
      }
      else
      {
        v19 = *(double *)(a2 + 304);
        v20 = *(double *)(a2 + 312);
        if (v19 == 1.0)
        {
          if (v20 == 1.0)
          {
            v40 = 0;
            v38 = 16842752;
            v39 = (_OWORD *)(a2 + 16);
            v37 = 0;
            v35 = 16842752;
            v36 = (_OWORD *)(a2 + 112);
            v32 = 33619968;
            v33 = v6;
            v34 = 0;
            v21 = sub_100263CBC();
            sub_1001D6364((uint64_t)&v38, (uint64_t)&v35, (uint64_t)&v32, (uint64_t)v21, -1);
          }
          else
          {
            v40 = 0;
            v38 = 16842752;
            if (v20 == -1.0)
            {
              v39 = (_OWORD *)(a2 + 16);
              v37 = 0;
              v35 = 16842752;
              v36 = (_OWORD *)(a2 + 112);
              v32 = 33619968;
              v33 = v6;
              v34 = 0;
              v24 = sub_100263CBC();
              sub_1001D8554((uint64_t)&v38, (uint64_t)&v35, (uint64_t)&v32, (uint64_t)v24, -1);
            }
            else
            {
              v39 = (_OWORD *)(a2 + 112);
              v37 = 0;
              v35 = 16842752;
              v36 = (_OWORD *)(a2 + 16);
              v32 = 33619968;
              v33 = v6;
              v34 = 0;
              sub_10023262C((uint64_t)&v38, (uint64_t)&v35, (uint64_t)&v32, v20);
            }
          }
        }
        else if (v20 == 1.0)
        {
          v40 = 0;
          v38 = 16842752;
          if (v19 == -1.0)
          {
            v39 = (_OWORD *)(a2 + 112);
            v37 = 0;
            v35 = 16842752;
            v36 = (_OWORD *)(a2 + 16);
            v32 = 33619968;
            v33 = v6;
            v34 = 0;
            v23 = sub_100263CBC();
            sub_1001D8554((uint64_t)&v38, (uint64_t)&v35, (uint64_t)&v32, (uint64_t)v23, -1);
          }
          else
          {
            v39 = (_OWORD *)(a2 + 16);
            v37 = 0;
            v35 = 16842752;
            v36 = (_OWORD *)(a2 + 112);
            v32 = 33619968;
            v33 = v6;
            v34 = 0;
            sub_10023262C((uint64_t)&v38, (uint64_t)&v35, (uint64_t)&v32, v19);
          }
        }
        else
        {
          v40 = 0;
          v38 = 16842752;
          v39 = (_OWORD *)(a2 + 16);
          v37 = 0;
          v35 = 16842752;
          v36 = (_OWORD *)(a2 + 112);
          v32 = 33619968;
          v33 = v6;
          v34 = 0;
          sub_1001D886C((uint64_t)&v38, (uint64_t)&v35, (uint64_t)&v32, -1, v19, v20, 0.0);
        }
        if (*(double *)(a2 + 328) != 0.0 || *(double *)(a2 + 336) != 0.0 || *(double *)(a2 + 344) != 0.0)
        {
          v39 = v6;
          v40 = 0;
          v38 = 16842752;
          v35 = -1056833530;
          v36 = v7;
          v37 = 0x400000001;
          v32 = 33619968;
          v33 = v6;
          v34 = 0;
          v26 = sub_100263CBC();
          sub_1001D6364((uint64_t)&v38, (uint64_t)&v35, (uint64_t)&v32, (uint64_t)v26, -1);
        }
      }
      goto LABEL_46;
    }
  }
  if (*(double *)(a2 + 328) == 0.0 && *(double *)(a2 + 336) == 0.0 && *(double *)(a2 + 344) == 0.0)
  {
    v17 = *(double *)(a2 + 304);
    if (*((_QWORD *)v6 + 2) != *(_QWORD *)(a3 + 16) || fabs(v17) != 1.0)
    {
      v38 = 33619968;
      v39 = (_OWORD *)a3;
      v40 = 0;
      sub_1002044A8((unsigned int *)(a2 + 16), (uint64_t)&v38, a4, v17, *(double *)(a2 + 320));
      goto LABEL_48;
    }
    if (v17 == 1.0)
      goto LABEL_25;
  }
  else
  {
    v17 = *(double *)(a2 + 304);
    if (v17 == 1.0)
    {
LABEL_25:
      v39 = (_OWORD *)(a2 + 16);
      v40 = 0;
      v38 = 16842752;
      v35 = -1056833530;
      v36 = v7;
      v37 = 0x400000001;
      v32 = 33619968;
      v33 = v6;
      v34 = 0;
      v18 = sub_100263CBC();
      sub_1001D6364((uint64_t)&v38, (uint64_t)&v35, (uint64_t)&v32, (uint64_t)v18, -1);
      goto LABEL_46;
    }
  }
  if (v17 == -1.0)
  {
    v38 = -1056833530;
    v39 = v7;
    v40 = 0x400000001;
    v36 = (_OWORD *)(a2 + 16);
    v37 = 0;
    v35 = 16842752;
    v32 = 33619968;
    v33 = v6;
    v34 = 0;
    v22 = sub_100263CBC();
    sub_1001D8554((uint64_t)&v38, (uint64_t)&v35, (uint64_t)&v32, (uint64_t)v22, -1);
  }
  else
  {
    v38 = 33619968;
    v39 = v6;
    v40 = 0;
    sub_1002044A8((unsigned int *)(a2 + 16), (uint64_t)&v38, *(_DWORD *)(a2 + 16) & 0xFFF, v17, 0.0);
    v39 = v6;
    v40 = 0;
    v38 = 16842752;
    v35 = -1056833530;
    v36 = v7;
    v37 = 0x400000001;
    v32 = 33619968;
    v33 = v6;
    v34 = 0;
    v25 = sub_100263CBC();
    sub_1001D6364((uint64_t)&v38, (uint64_t)&v35, (uint64_t)&v32, (uint64_t)v25, -1);
  }
LABEL_46:
  if (*((_QWORD *)v6 + 2) != *(_QWORD *)(a3 + 16))
  {
    v38 = 33619968;
    v39 = (_OWORD *)a3;
    v40 = 0;
    sub_1002044A8((unsigned int *)v6, (uint64_t)&v38, *(_DWORD *)a3 & 0xFFF, 1.0, 0.0);
  }
LABEL_48:
  if (*((_QWORD *)&v41[3] + 1))
  {
    v27 = (unsigned int *)(*((_QWORD *)&v41[3] + 1) + 20);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      sub_100256C90((uint64_t)v41);
  }
  *((_QWORD *)&v41[3] + 1) = 0;
  memset(&v41[1], 0, 32);
  if (SDWORD1(v41[0]) >= 1)
  {
    v30 = 0;
    v31 = v42;
    do
      *(_DWORD *)&v31[4 * v30++] = 0;
    while (v30 < SDWORD1(v41[0]));
  }
  if (v43 != v44)
    j__free(v43);
}

void sub_10025119C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002511B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002511C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002511D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002511EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100251200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100251214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100251228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025123C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100251250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100251264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100251278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025128C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002512A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002512B8(uint64_t a1, uint64_t *a2, double *a3, double *a4)
{
  double v7;
  double v8;
  _BYTE v9[8];
  int v10;

  sub_100298C2C(v9, &off_10044D688);
  sub_100251368((uint64_t)a4, a2);
  v7 = a4[41];
  a4[40] = *a3 + a4[40];
  a4[41] = a3[1] + v7;
  v8 = a4[43];
  a4[42] = a3[2] + a4[42];
  a4[43] = a3[3] + v8;
  if (v10)
    sub_1002989D0(v9);
}

void sub_100251354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100251368(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  _DWORD *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  if ((uint64_t *)a1 != a2)
  {
    v5 = a2[9];
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 20);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    v8 = (_DWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 72);
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 20);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        sub_100256C90(a1 + 16);
    }
    v13 = a2 + 2;
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *v8 = *v13;
      v17 = *((_DWORD *)a2 + 5);
      if (v17 <= 2)
      {
LABEL_15:
        *(_DWORD *)(a1 + 20) = v17;
        *(_QWORD *)(a1 + 24) = a2[3];
        v18 = (_QWORD *)a2[11];
        v19 = *(_QWORD **)(a1 + 88);
        *v19 = *v18;
        v19[1] = v18[1];
        goto LABEL_18;
      }
    }
    else
    {
      v14 = 0;
      v15 = *(_QWORD *)(a1 + 80);
      do
      {
        *(_DWORD *)(v15 + 4 * v14++) = 0;
        v16 = *(int *)(a1 + 20);
      }
      while (v14 < v16);
      *v8 = *v13;
      if ((int)v16 <= 2)
      {
        v17 = *((_DWORD *)a2 + 5);
        if (v17 <= 2)
          goto LABEL_15;
      }
    }
    sub_100256B48(a1 + 16, (uint64_t)v13);
LABEL_18:
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    v20 = a2[21];
    if (v20)
    {
      v21 = (unsigned int *)(v20 + 20);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    v23 = (_DWORD *)(a1 + 112);
    v24 = *(_QWORD *)(a1 + 168);
    if (v24)
    {
      v25 = (unsigned int *)(v24 + 20);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
        sub_100256C90(a1 + 112);
    }
    v28 = a2 + 14;
    *(_QWORD *)(a1 + 168) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    if (*(int *)(a1 + 116) <= 0)
    {
      *v23 = *v28;
      v32 = *((_DWORD *)a2 + 29);
      if (v32 <= 2)
      {
LABEL_31:
        *(_DWORD *)(a1 + 116) = v32;
        *(_QWORD *)(a1 + 120) = a2[15];
        v33 = (_QWORD *)a2[23];
        v34 = *(_QWORD **)(a1 + 184);
        *v34 = *v33;
        v34[1] = v33[1];
        goto LABEL_34;
      }
    }
    else
    {
      v29 = 0;
      v30 = *(_QWORD *)(a1 + 176);
      do
      {
        *(_DWORD *)(v30 + 4 * v29++) = 0;
        v31 = *(int *)(a1 + 116);
      }
      while (v29 < v31);
      *v23 = *v28;
      if ((int)v31 <= 2)
      {
        v32 = *((_DWORD *)a2 + 29);
        if (v32 <= 2)
          goto LABEL_31;
      }
    }
    sub_100256B48(a1 + 112, (uint64_t)v28);
LABEL_34:
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    v35 = a2[33];
    if (v35)
    {
      v36 = (unsigned int *)(v35 + 20);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
    }
    v38 = (_DWORD *)(a1 + 208);
    v39 = *(_QWORD *)(a1 + 264);
    if (v39)
    {
      v40 = (unsigned int *)(v39 + 20);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
        sub_100256C90(a1 + 208);
    }
    v43 = a2 + 26;
    *(_QWORD *)(a1 + 264) = 0;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    if (*(int *)(a1 + 212) <= 0)
    {
      *v38 = *v43;
      v47 = *((_DWORD *)a2 + 53);
      if (v47 <= 2)
      {
LABEL_47:
        *(_DWORD *)(a1 + 212) = v47;
        *(_QWORD *)(a1 + 216) = a2[27];
        v48 = (_QWORD *)a2[35];
        v49 = *(_QWORD **)(a1 + 280);
        *v49 = *v48;
        v49[1] = v48[1];
LABEL_50:
        *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
        *(_OWORD *)(a1 + 240) = *((_OWORD *)a2 + 15);
        *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
        goto LABEL_51;
      }
    }
    else
    {
      v44 = 0;
      v45 = *(_QWORD *)(a1 + 272);
      do
      {
        *(_DWORD *)(v45 + 4 * v44++) = 0;
        v46 = *(int *)(a1 + 212);
      }
      while (v44 < v46);
      *v38 = *v43;
      if ((int)v46 <= 2)
      {
        v47 = *((_DWORD *)a2 + 53);
        if (v47 <= 2)
          goto LABEL_47;
      }
    }
    sub_100256B48(a1 + 208, (uint64_t)v43);
    goto LABEL_50;
  }
LABEL_51:
  v50 = *((_OWORD *)a2 + 19);
  v51 = *((_OWORD *)a2 + 21);
  *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
  *(_OWORD *)(a1 + 336) = v51;
  *(_OWORD *)(a1 + 304) = v50;
  return a1;
}

void sub_1002516A4(uint64_t a1, float64x2_t *a2, uint64_t *a3, uint64_t a4)
{
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  _BYTE v10[8];
  int v11;

  sub_100298C2C(v10, &off_10044D6A8);
  sub_100251368(a4, a3);
  v7 = *(float64x2_t *)(a4 + 320);
  *(float64x2_t *)(a4 + 304) = vnegq_f64(*(float64x2_t *)(a4 + 304));
  v8 = vsubq_f64(*a2, v7);
  v9 = vsubq_f64(a2[1], *(float64x2_t *)(a4 + 336));
  *(float64x2_t *)(a4 + 320) = v8;
  *(float64x2_t *)(a4 + 336) = v9;
  if (v11)
    sub_1002989D0(v10);
}

void sub_100251728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10025173C(double a1, uint64_t a2, uint64_t *a3, float64x2_t *a4)
{
  float64x2_t v6;
  _BYTE v8[8];
  int v9;

  sub_100298C2C(v8, &off_10044D6C8);
  sub_100251368((uint64_t)a4, a3);
  v6 = vmulq_n_f64(a4[20], a1);
  a4[19] = vmulq_n_f64(a4[19], a1);
  a4[20] = v6;
  a4[21] = vmulq_n_f64(a4[21], a1);
  if (v9)
    sub_1002989D0(v8);
}

void sub_1002517B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002517CC(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  _OWORD v13[4];
  char *v14;
  void *v15;
  _QWORD v16[2];
  _BYTE v17[8];
  int v18;

  v7 = sub_100298C2C(v17, &off_10044D6E8);
  if (*(uint64_t (****)())a3 == off_10048AC30
    && (!*(_QWORD *)(a3 + 128) || *(double *)(a3 + 312) == 0.0)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a3 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a3 + 336)))))) & 1) == 0)
  {
    LODWORD(v13[0]) = 1124007936;
    memset((char *)v13 + 4, 0, 48);
    v13[3] = 0u;
    v14 = (char *)v13 + 8;
    v15 = v16;
    v16[0] = 0;
    v16[1] = 0;
    sub_10024E050(a4, 47, a3 + 16, (uint64_t)v13, a1 / *(double *)(a3 + 304));
    if (*((_QWORD *)&v13[3] + 1))
    {
      v8 = (unsigned int *)(*((_QWORD *)&v13[3] + 1) + 20);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        sub_100256C90((uint64_t)v13);
    }
    *((_QWORD *)&v13[3] + 1) = 0;
    memset(&v13[1], 0, 32);
    if (SDWORD1(v13[0]) >= 1)
    {
      v11 = 0;
      v12 = v14;
      do
        *(_DWORD *)&v12[4 * v11++] = 0;
      while (v11 < SDWORD1(v13[0]));
    }
    if (v15 != v16)
      j__free(v15);
  }
  else
  {
    sub_10024EBA0(a1, v7, (_QWORD *)a3, a4);
  }
  if (v18)
    sub_1002989D0(v17);
}

void sub_100251944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100006BE4((uint64_t)&a9);
  sub_1001D40CC(v9 - 64);
  _Unwind_Resume(a1);
}

void sub_100251964(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_100251978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v6[8];
  int v7;

  v5 = sub_100298C2C(v6, &off_10044D708);
  if (*(uint64_t (****)())a2 == off_10048AC30
    && (!*(_QWORD *)(a2 + 128) || *(double *)(a2 + 312) == 0.0)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 336)))))) & 1) == 0)
  {
    sub_10024F100(a3, a2 + 16, *(double *)(a2 + 304));
  }
  else
  {
    sub_10024EFC4(v5, (_QWORD *)a2, a3);
  }
  if (v7)
    sub_1002989D0(v6);
}

void sub_100251A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100251A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float64x2_t v12;
  float64x2_t v13;
  _OWORD v14[2];
  _BYTE v15[8];
  int v16;

  v5 = sub_100298C2C(v15, &off_10044D728);
  v6 = *(_QWORD *)(a2 + 128);
  v7 = *(double *)(a2 + 304);
  v8 = *(double *)(a2 + 312);
  if (!v6 || v8 == 0.0)
  {
    if (fabs(v7) == 1.0)
    {
      v12 = vmulq_n_f64(vnegq_f64(*(float64x2_t *)(a2 + 320)), v7);
      v13 = vmulq_n_f64(vnegq_f64(*(float64x2_t *)(a2 + 336)), v7);
      v14[0] = v12;
      v14[1] = v13;
      sub_100250498(a3, 97, a2 + 16, v14);
      goto LABEL_11;
    }
    if (!v6)
    {
LABEL_7:
      sub_10024EDB8(v5, (_QWORD *)a2, a3);
      goto LABEL_11;
    }
  }
  v9 = v8 + v7;
  v10 = v8 * v7;
  if (v9 != 0.0 || v10 != -1.0)
    goto LABEL_7;
  sub_10024E050(a3, 97, a2 + 16, a2 + 112, 1.0);
LABEL_11:
  if (v16)
    sub_1002989D0(v15);
}

void sub_100251B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100251B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100251B54(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int *v6;
  int v7;
  uint64_t v8;
  int *v9;
  double v10;
  int *v11;
  int *v12;
  int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[4];
  char *v29;
  void *v30;
  _QWORD v31[2];

  LODWORD(v28[0]) = 1124007936;
  memset((char *)v28 + 4, 0, 48);
  v28[3] = 0u;
  v29 = (char *)v28 + 8;
  v30 = v31;
  v31[0] = 0;
  v31[1] = 0;
  if (a4 == -1 || (*(_DWORD *)(a2 + 16) & 0xFFF) == a4)
  {
    v6 = (unsigned int *)a3;
    v7 = *(_DWORD *)(a2 + 8);
    if (v7 != 47)
      goto LABEL_4;
LABEL_13:
    if (*(_QWORD *)(a2 + 128))
    {
      v27 = 0;
      LODWORD(v25) = 16842752;
      v26 = a2 + 16;
      v24 = 0;
      v22 = 16842752;
      v23 = (unsigned int *)(a2 + 112);
      v19 = 33619968;
      v20 = v6;
      v21 = 0;
      sub_1001D8730((uint64_t)&v25, (uint64_t)&v22, (uint64_t)&v19, -1, *(double *)(a2 + 304));
    }
    else
    {
      v10 = *(double *)(a2 + 304);
      v26 = a2 + 16;
      v27 = 0;
      LODWORD(v25) = 16842752;
      v22 = 33619968;
      v23 = v6;
      v24 = 0;
      sub_1001D87D0((uint64_t)&v25, (uint64_t)&v22, -1, v10);
    }
    goto LABEL_30;
  }
  v6 = (unsigned int *)v28;
  v7 = *(_DWORD *)(a2 + 8);
  if (v7 == 47)
    goto LABEL_13;
LABEL_4:
  if (v7 == 42)
  {
    v27 = 0;
    LODWORD(v25) = 16842752;
    v26 = a2 + 16;
    v24 = 0;
    v22 = 16842752;
    v23 = (unsigned int *)(a2 + 112);
    v19 = 33619968;
    v20 = v6;
    v21 = 0;
    sub_1001D8690((uint64_t)&v25, (uint64_t)&v22, (uint64_t)&v19, -1, *(double *)(a2 + 304));
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 128);
    switch(v7)
    {
      case '|':
        if (v8)
        {
          v27 = 0;
          LODWORD(v25) = 16842752;
          v26 = a2 + 16;
          v24 = 0;
          v22 = 16842752;
          v23 = (unsigned int *)(a2 + 112);
        }
        else
        {
          v26 = a2 + 16;
          v27 = 0;
          LODWORD(v25) = 16842752;
          v22 = -1056833530;
          v23 = (unsigned int *)(a2 + 320);
          v24 = 0x400000001;
        }
        v19 = 33619968;
        v20 = v6;
        v21 = 0;
        v11 = sub_100263CBC();
        sub_1001D5EE0((uint64_t)&v25, (uint64_t)&v22, (uint64_t)&v19, (uint64_t)v11);
        break;
      case '^':
        if (v8)
        {
          v27 = 0;
          LODWORD(v25) = 16842752;
          v26 = a2 + 16;
          v24 = 0;
          v22 = 16842752;
          v23 = (unsigned int *)(a2 + 112);
        }
        else
        {
          v26 = a2 + 16;
          v27 = 0;
          LODWORD(v25) = 16842752;
          v22 = -1056833530;
          v23 = (unsigned int *)(a2 + 320);
          v24 = 0x400000001;
        }
        v19 = 33619968;
        v20 = v6;
        v21 = 0;
        v12 = sub_100263CBC();
        sub_1001D5F80((uint64_t)&v25, (uint64_t)&v22, (uint64_t)&v19, (uint64_t)v12);
        break;
      case '&':
        if (v8)
        {
          v27 = 0;
          LODWORD(v25) = 16842752;
          v26 = a2 + 16;
          v24 = 0;
          v22 = 16842752;
          v23 = (unsigned int *)(a2 + 112);
        }
        else
        {
          v26 = a2 + 16;
          v27 = 0;
          LODWORD(v25) = 16842752;
          v22 = -1056833530;
          v23 = (unsigned int *)(a2 + 320);
          v24 = 0x400000001;
        }
        v19 = 33619968;
        v20 = v6;
        v21 = 0;
        v9 = sub_100263CBC();
        sub_1001D47C0((uint64_t)&v25, (uint64_t)&v22, (uint64_t)&v19, (uint64_t)v9);
        break;
      default:
        if (v7 != 126 || v8)
        {
          switch(v7)
          {
            case 'M':
              sub_1001D61E4(a2 + 16, a2 + 112, (uint64_t)v6);
              break;
            case 'N':
              v26 = a2 + 16;
              v27 = 0;
              LODWORD(v25) = 16842752;
              v22 = -1056833530;
              v23 = (unsigned int *)(a2 + 320);
              v24 = 0x100000001;
              v19 = 33619968;
              v20 = v6;
              v21 = 0;
              sub_1001D60BC((uint64_t)&v25, (uint64_t)&v22, (uint64_t)&v19);
              break;
            case 'a':
              if (!v8)
                goto LABEL_46;
              v27 = 0;
              LODWORD(v25) = 16842752;
              v26 = a2 + 16;
              v24 = 0;
              v22 = 16842752;
              v23 = (unsigned int *)(a2 + 112);
              v19 = 33619968;
              v20 = v6;
              v21 = 0;
              sub_1001D85F8((uint64_t)&v25, (uint64_t)&v22, (uint64_t)&v19);
              break;
            case 'm':
              sub_1001D62A4(a2 + 16, a2 + 112, (uint64_t)v6);
              break;
            case 'n':
              v26 = a2 + 16;
              v27 = 0;
              LODWORD(v25) = 16842752;
              v22 = -1056833530;
              v23 = (unsigned int *)(a2 + 320);
              v24 = 0x100000001;
              v19 = 33619968;
              v20 = v6;
              v21 = 0;
              sub_1001D6150((uint64_t)&v25, (uint64_t)&v22, (uint64_t)&v19);
              break;
            default:
LABEL_46:
              if (v7 != 97 || v8)
              {
                sub_1001F37D4(&v25, "Unknown operation");
                sub_100294B74(-2, &v25, "assign", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matop.cpp", 1408);
              }
              v26 = a2 + 16;
              v27 = 0;
              LODWORD(v25) = 16842752;
              v22 = -1056833530;
              v23 = (unsigned int *)(a2 + 320);
              v24 = 0x400000001;
              v19 = 33619968;
              v20 = v6;
              v21 = 0;
              sub_1001D85F8((uint64_t)&v25, (uint64_t)&v22, (uint64_t)&v19);
              break;
          }
        }
        else
        {
          v26 = a2 + 16;
          v27 = 0;
          LODWORD(v25) = 16842752;
          v22 = 33619968;
          v23 = v6;
          v24 = 0;
          v13 = sub_100263CBC();
          sub_1001D6020((uint64_t)&v25, (uint64_t)&v22, (uint64_t)v13);
        }
        break;
    }
  }
LABEL_30:
  if (*((_QWORD *)v6 + 2) != *(_QWORD *)(a3 + 16))
  {
    LODWORD(v25) = 33619968;
    v26 = a3;
    v27 = 0;
    sub_1002044A8(v6, (uint64_t)&v25, a4, 1.0, 0.0);
  }
  if (*((_QWORD *)&v28[3] + 1))
  {
    v14 = (unsigned int *)(*((_QWORD *)&v28[3] + 1) + 20);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      sub_100256C90((uint64_t)v28);
  }
  *((_QWORD *)&v28[3] + 1) = 0;
  memset(&v28[1], 0, 32);
  if (SDWORD1(v28[0]) >= 1)
  {
    v17 = 0;
    v18 = v29;
    do
      *(_DWORD *)&v18[4 * v17++] = 0;
    while (v17 < SDWORD1(v28[0]));
  }
  if (v30 != v31)
    j__free(v30);
}

void sub_100252170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10029434C((uint64_t *)va);
  JUMPOUT(0x100251F3CLL);
}

void sub_10025217C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002521EC(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  _BYTE v9[8];
  int v10;

  v7 = sub_100298C2C(v9, &off_10044D748);
  v8 = *(_DWORD *)(a3 + 8);
  if (v8 == 47 || v8 == 42)
  {
    sub_100251368(a4, (uint64_t *)a3);
    *(double *)(a4 + 304) = *(double *)(a4 + 304) * a1;
  }
  else
  {
    sub_10024E2D8(a1, v7, (_QWORD *)a3, a4);
  }
  if (v10)
    sub_1002989D0(v9);
}

void sub_100252284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100252298(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  double v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  _OWORD v14[2];
  _OWORD v15[4];
  char *v16;
  void *v17;
  _QWORD v18[2];
  _BYTE v19[8];
  int v20;

  v7 = sub_100298C2C(v19, &off_10044D768);
  if (*(_DWORD *)(a3 + 8) == 47 && (!*(_QWORD *)(a3 + 128) || *(double *)(a3 + 312) == 0.0))
  {
    LODWORD(v15[0]) = 1124007936;
    memset((char *)v15 + 4, 0, 48);
    v15[3] = 0u;
    v16 = (char *)v15 + 8;
    v17 = v18;
    v18[0] = 0;
    v18[1] = 0;
    v8 = *(double *)(a3 + 304);
    memset(v14, 0, sizeof(v14));
    sub_10024CD14(a4, a3 + 16, (uint64_t)v15, v14, a1 / v8, 0.0);
    if (*((_QWORD *)&v15[3] + 1))
    {
      v9 = (unsigned int *)(*((_QWORD *)&v15[3] + 1) + 20);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        sub_100256C90((uint64_t)v15);
    }
    *((_QWORD *)&v15[3] + 1) = 0;
    memset(&v15[1], 0, 32);
    if (SDWORD1(v15[0]) >= 1)
    {
      v12 = 0;
      v13 = v16;
      do
        *(_DWORD *)&v13[4 * v12++] = 0;
      while (v12 < SDWORD1(v15[0]));
    }
    if (v17 != v18)
      j__free(v17);
  }
  else
  {
    sub_10024EBA0(a1, v7, (_QWORD *)a3, a4);
  }
  if (v20)
    sub_1002989D0(v19);
}

void sub_1002523EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_100006BE4((uint64_t)va);
  sub_1001D40CC(v5 - 64);
  _Unwind_Resume(a1);
}

void sub_10025240C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_100252420(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[4];
  char *v23;
  void *v24;
  _QWORD v25[2];

  LODWORD(v22[0]) = 1124007936;
  memset((char *)v22 + 4, 0, 48);
  v22[3] = 0u;
  v23 = (char *)v22 + 8;
  v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  v6 = a4 + 1;
  if ((a4 + 1) >= 2)
    v7 = (unsigned int *)v22;
  else
    v7 = (unsigned int *)a3;
  if (*(_QWORD *)(a2 + 128))
  {
    v21 = 0;
    v19 = 16842752;
    v20 = a2 + 16;
    v18 = 0;
    v16 = 16842752;
    v17 = a2 + 112;
  }
  else
  {
    v20 = a2 + 16;
    v21 = 0;
    v19 = 16842752;
    v16 = -1056833530;
    v17 = a2 + 304;
    v18 = 0x100000001;
  }
  v13 = 33619968;
  v14 = v7;
  v15 = 0;
  sub_1001D8970((uint64_t)&v19, (uint64_t)&v16, (uint64_t)&v13, *(_DWORD *)(a2 + 8));
  if (v6 >= 2 && *(_QWORD *)&v22[1] != *(_QWORD *)(a3 + 16))
  {
    v19 = 33619968;
    v20 = a3;
    v21 = 0;
    sub_1002044A8(v7, (uint64_t)&v19, a4, 1.0, 0.0);
  }
  if (*((_QWORD *)&v22[3] + 1))
  {
    v8 = (unsigned int *)(*((_QWORD *)&v22[3] + 1) + 20);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      sub_100256C90((uint64_t)v22);
  }
  *((_QWORD *)&v22[3] + 1) = 0;
  memset(&v22[1], 0, 32);
  if (SDWORD1(v22[0]) >= 1)
  {
    v11 = 0;
    v12 = v23;
    do
      *(_DWORD *)&v12[4 * v11++] = 0;
    while (v11 < SDWORD1(v22[0]));
  }
  if (v24 != v25)
    j__free(v24);
}

void sub_1002525DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002525F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100252604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025261C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int *v7;
  double v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[4];
  char *v21;
  void *v22;
  _QWORD v23[2];

  LODWORD(v20[0]) = 1124007936;
  memset((char *)v20 + 4, 0, 48);
  v20[3] = 0u;
  v21 = (char *)v20 + 8;
  v22 = v23;
  v23[0] = 0;
  v23[1] = 0;
  if (a4 == -1 || (*(_DWORD *)(a2 + 16) & 0xFFF) == a4)
    v7 = (unsigned int *)a3;
  else
    v7 = (unsigned int *)v20;
  v18 = a2 + 16;
  v19 = 0;
  v17 = 16842752;
  v14 = 33619968;
  v15 = v7;
  v16 = 0;
  sub_10025BCD8((uint64_t)&v17, (uint64_t)&v14);
  v8 = *(double *)(a2 + 304);
  if (*((_QWORD *)v7 + 2) != *(_QWORD *)(a3 + 16) || v8 != 1.0)
  {
    v17 = 33619968;
    v18 = a3;
    v19 = 0;
    sub_1002044A8(v7, (uint64_t)&v17, a4, v8, 0.0);
  }
  if (*((_QWORD *)&v20[3] + 1))
  {
    v9 = (unsigned int *)(*((_QWORD *)&v20[3] + 1) + 20);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      sub_100256C90((uint64_t)v20);
  }
  *((_QWORD *)&v20[3] + 1) = 0;
  memset(&v20[1], 0, 32);
  if (SDWORD1(v20[0]) >= 1)
  {
    v12 = 0;
    v13 = v21;
    do
      *(_DWORD *)&v13[4 * v12++] = 0;
    while (v12 < SDWORD1(v20[0]));
  }
  if (v22 != v23)
    j__free(v22);
}

void sub_100252780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100252798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002527AC(double a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_10044D788);
  sub_100251368(a4, a3);
  *(double *)(a4 + 304) = *(double *)(a4 + 304) * a1;
  if (v8)
    sub_1002989D0(v7);
}

void sub_10025281C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100252830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  _OWORD v12[2];
  _OWORD v13[4];
  char *v14;
  void *v15;
  _QWORD v16[2];
  _BYTE v17[8];
  int v18;

  sub_100298C2C(v17, &off_10044D7A8);
  v5 = *(double *)(a2 + 304);
  v6 = a2 + 16;
  if (v5 == 1.0)
  {
    sub_100252984(a3, v6);
  }
  else
  {
    LODWORD(v13[0]) = 1124007936;
    memset((char *)v13 + 4, 0, 48);
    v13[3] = 0u;
    v14 = (char *)v13 + 8;
    v15 = v16;
    v16[0] = 0;
    v16[1] = 0;
    memset(v12, 0, sizeof(v12));
    sub_10024CD14(a3, v6, (uint64_t)v13, v12, v5, 0.0);
    if (*((_QWORD *)&v13[3] + 1))
    {
      v7 = (unsigned int *)(*((_QWORD *)&v13[3] + 1) + 20);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        sub_100256C90((uint64_t)v13);
    }
    *((_QWORD *)&v13[3] + 1) = 0;
    memset(&v13[1], 0, 32);
    if (SDWORD1(v13[0]) >= 1)
    {
      v10 = 0;
      v11 = v14;
      do
        *(_DWORD *)&v11[4 * v10++] = 0;
      while (v10 < SDWORD1(v13[0]));
    }
    if (v15 != v16)
      j__free(v15);
  }
  if (v18)
    sub_1002989D0(v17);
}

void sub_100252950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_100006BE4((uint64_t)va);
  sub_1001D40CC(v5 - 32);
  _Unwind_Resume(a1);
}

void sub_100252970(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 32);
  _Unwind_Resume(a1);
}

void sub_100252984(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  _OWORD v25[2];
  _OWORD v26[4];
  char *v27;
  void *v28;
  _QWORD v29[2];
  _OWORD v30[4];
  char *v31;
  void *v32;
  _QWORD v33[2];
  uint64_t v34;
  int v35;
  _BYTE v36[64];
  _BYTE *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[9];

  LODWORD(v30[0]) = 1124007936;
  memset((char *)v30 + 4, 0, 48);
  v30[3] = 0u;
  v31 = (char *)v30 + 8;
  v32 = v33;
  v33[0] = 0;
  v33[1] = 0;
  LODWORD(v26[0]) = 1124007936;
  memset((char *)v26 + 4, 0, 48);
  v26[3] = 0u;
  v27 = (char *)v26 + 8;
  v28 = v29;
  v29[0] = 0;
  v29[1] = 0;
  memset(v25, 0, sizeof(v25));
  sub_100254384((uint64_t)&v34, (uint64_t)off_10048AC28, 0, a2, (uint64_t)v30, (uint64_t)v26, v25, 1.0, 0.0);
  *(_QWORD *)a1 = v34;
  *(_DWORD *)(a1 + 8) = v35;
  if (&v34 != (uint64_t *)a1)
  {
    v3 = *(_QWORD *)(a1 + 72);
    if (v3)
    {
      v4 = (unsigned int *)(v3 + 20);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        sub_100256C90(a1 + 16);
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      v7 = 0;
      v8 = *(_QWORD *)(a1 + 80);
      do
        *(_DWORD *)(v8 + 4 * v7++) = 0;
      while (v7 < *(int *)(a1 + 20));
    }
    v9 = *(_DWORD *)&v36[4];
    v10 = *(_OWORD *)&v36[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v36;
    *(_OWORD *)(a1 + 32) = v10;
    v11 = *(_OWORD *)&v36[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v36[32];
    *(_OWORD *)(a1 + 64) = v11;
    v12 = *(uint64_t **)(a1 + 88);
    if (v12 == (uint64_t *)(a1 + 96))
    {
      v13 = v38;
      if (v9 <= 2)
        goto LABEL_12;
    }
    else
    {
      j__free(v12);
      *(_QWORD *)(a1 + 80) = a1 + 24;
      *(_QWORD *)(a1 + 88) = a1 + 96;
      v12 = (uint64_t *)(a1 + 96);
      v13 = v38;
      if (*(int *)&v36[4] <= 2)
      {
LABEL_12:
        *v12 = *v13;
        v12[1] = v13[1];
LABEL_15:
        *(_DWORD *)v36 = 1124007936;
        memset(&v36[4], 0, 60);
        goto LABEL_16;
      }
    }
    *(_QWORD *)(a1 + 80) = v37;
    *(_QWORD *)(a1 + 88) = v13;
    v37 = &v36[8];
    v38 = &v39;
    goto LABEL_15;
  }
LABEL_16:
  sub_10024B080(a1 + 112, (uint64_t)&v40);
  sub_10024B080(a1 + 208, (uint64_t)v41);
  v14 = v41[7];
  *(_OWORD *)(a1 + 304) = v41[6];
  *(_OWORD *)(a1 + 320) = v14;
  *(_OWORD *)(a1 + 336) = v41[8];
  sub_100008C98((uint64_t)&v34);
  if (*((_QWORD *)&v26[3] + 1))
  {
    v15 = (unsigned int *)(*((_QWORD *)&v26[3] + 1) + 20);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      sub_100256C90((uint64_t)v26);
  }
  *((_QWORD *)&v26[3] + 1) = 0;
  memset(&v26[1], 0, 32);
  if (SDWORD1(v26[0]) >= 1)
  {
    v18 = 0;
    v19 = v27;
    do
      *(_DWORD *)&v19[4 * v18++] = 0;
    while (v18 < SDWORD1(v26[0]));
  }
  if (v28 != v29)
    j__free(v28);
  if (*((_QWORD *)&v30[3] + 1))
  {
    v20 = (unsigned int *)(*((_QWORD *)&v30[3] + 1) + 20);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      sub_100256C90((uint64_t)v30);
  }
  *((_QWORD *)&v30[3] + 1) = 0;
  memset(&v30[1], 0, 32);
  if (SDWORD1(v30[0]) >= 1)
  {
    v23 = 0;
    v24 = v31;
    do
      *(_DWORD *)&v24[4 * v23++] = 0;
    while (v23 < SDWORD1(v30[0]));
  }
  if (v32 != v33)
    j__free(v32);
}

void sub_100252C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_100006BE4((uint64_t)va);
  sub_100006BE4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100252C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_100008C98((uint64_t)&a37);
  sub_100006BE4((uint64_t)&a13);
  sub_100006BE4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_100252CB0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int *v6;
  double v7;
  double v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[4];
  char *v27;
  void *v28;
  _QWORD v29[2];

  LODWORD(v26[0]) = 1124007936;
  memset((char *)v26 + 4, 0, 48);
  v26[3] = 0u;
  v27 = (char *)v26 + 8;
  v28 = v29;
  v29[0] = 0;
  v29[1] = 0;
  if (a4 == -1 || (*(_DWORD *)(a2 + 16) & 0xFFF) == a4)
    v6 = (unsigned int *)a3;
  else
    v6 = (unsigned int *)v26;
  v25 = 0;
  v23 = 16842752;
  v24 = a2 + 16;
  v22 = 0;
  v20 = 16842752;
  v21 = a2 + 112;
  v19 = 0;
  v17 = 16842752;
  v18 = a2 + 208;
  v7 = *(double *)(a2 + 304);
  v8 = *(double *)(a2 + 312);
  v14 = 33619968;
  v15 = v6;
  v16 = 0;
  sub_100231760((uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17, v7, v8, (uint64_t)&v14, *(_DWORD *)(a2 + 8));
  if (*((_QWORD *)v6 + 2) != *(_QWORD *)(a3 + 16))
  {
    v23 = 33619968;
    v24 = a3;
    v25 = 0;
    sub_1002044A8(v6, (uint64_t)&v23, a4, 1.0, 0.0);
  }
  if (*((_QWORD *)&v26[3] + 1))
  {
    v9 = (unsigned int *)(*((_QWORD *)&v26[3] + 1) + 20);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      sub_100256C90((uint64_t)v26);
  }
  *((_QWORD *)&v26[3] + 1) = 0;
  memset(&v26[1], 0, 32);
  if (SDWORD1(v26[0]) >= 1)
  {
    v12 = 0;
    v13 = v27;
    do
      *(_DWORD *)&v13[4 * v12++] = 0;
    while (v12 < SDWORD1(v26[0]));
  }
  if (v28 != v29)
    j__free(v28);
}

void sub_100252E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100252E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100252E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (***v8)();
  uint64_t (***v9)();
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  _BYTE v14[8];
  int v15;

  sub_100298C2C(v14, &off_10044D7C8);
  v8 = *(uint64_t (****)())a2;
  v9 = *(uint64_t (****)())a3;
  v10 = 1.0;
  if (*(uint64_t (****)())a2 == off_10048AC28)
    v11 = 1.0;
  else
    v11 = *(double *)(a2 + 304);
  if (v9 != off_10048AC28)
    v10 = *(double *)(a3 + 304);
  if (v8 != off_10048AC40 || *(_QWORD *)(a2 + 224) && *(double *)(a2 + 312) != 0.0)
    goto LABEL_9;
  if (v9 == off_10048AC28)
    goto LABEL_26;
  if (v9 == off_10048AC30)
  {
    if (*(_QWORD *)(a3 + 128) && *(double *)(a3 + 312) != 0.0
      || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a3 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a3 + 336)))))) & 1) != 0)
    {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
  if (v9 == off_10048AC50)
  {
LABEL_26:
    v12 = a2;
    v13 = v11;
    goto LABEL_31;
  }
LABEL_9:
  if (v9 != off_10048AC40 || *(_QWORD *)(a3 + 224) && *(double *)(a3 + 312) != 0.0)
    goto LABEL_12;
  if (v8 != off_10048AC28)
  {
    if (v8 == off_10048AC30)
    {
      if (*(_QWORD *)(a2 + 128) && *(double *)(a2 + 312) != 0.0
        || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 336)))))) & 1) != 0)
      {
        goto LABEL_12;
      }
    }
    else if (v8 != off_10048AC50)
    {
LABEL_12:
      if (v9 == (uint64_t (***)())a1)
        sub_10024C84C(a1, (_QWORD *)a2, (float64x2_t *)a3, a4);
      else
        ((void (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))(*v9)[13])(v9, a2, a3, a4);
      goto LABEL_32;
    }
  }
  v12 = a3;
  v9 = *(uint64_t (****)())a2;
  a3 = a2;
  v13 = v10;
  v10 = v11;
LABEL_31:
  sub_10024FBF8(a4, *(_DWORD *)(v12 + 8) & 0xFFFFFFFB | (4 * (v9 == off_10048AC50)), v12 + 16, v12 + 112, a3 + 16, v13, v10);
LABEL_32:
  if (v15)
    sub_1002989D0(v14);
}

void sub_100253078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10025308C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (***v8)();
  uint64_t (***v9)();
  double v10;
  double v11;
  unsigned int v12;
  double v13;
  uint64_t v14;
  _BYTE v15[8];
  int v16;

  sub_100298C2C(v15, &off_10044D7E8);
  v8 = *(uint64_t (****)())a2;
  v9 = *(uint64_t (****)())a3;
  v10 = 1.0;
  if (*(uint64_t (****)())a2 == off_10048AC28)
    v11 = 1.0;
  else
    v11 = *(double *)(a2 + 304);
  if (v9 != off_10048AC28)
    v10 = *(double *)(a3 + 304);
  if (v8 != off_10048AC40 || *(_QWORD *)(a2 + 224) && *(double *)(a2 + 312) != 0.0)
    goto LABEL_9;
  if (v9 == off_10048AC28)
    goto LABEL_26;
  if (v9 == off_10048AC30)
  {
    if (*(_QWORD *)(a3 + 128) && *(double *)(a3 + 312) != 0.0
      || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a3 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a3 + 336)))))) & 1) != 0)
    {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
  if (v9 == off_10048AC50)
  {
LABEL_26:
    v12 = *(_DWORD *)(a2 + 8) & 0xFFFFFFFB | (4 * (v9 == off_10048AC50));
    v13 = v11;
    v11 = -v10;
    v14 = a2;
    goto LABEL_31;
  }
LABEL_9:
  if (v9 != off_10048AC40 || *(_QWORD *)(a3 + 224) && *(double *)(a3 + 312) != 0.0)
    goto LABEL_12;
  if (v8 != off_10048AC28)
  {
    if (v8 == off_10048AC30)
    {
      if (*(_QWORD *)(a2 + 128) && *(double *)(a2 + 312) != 0.0
        || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 336)))))) & 1) != 0)
      {
        goto LABEL_12;
      }
    }
    else if (v8 != off_10048AC50)
    {
LABEL_12:
      if (v9 == (uint64_t (***)())a1)
        sub_10024D198(a1, (_QWORD *)a2, (float64x2_t *)a3, a4);
      else
        ((void (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))(*v9)[15])(v9, a2, a3, a4);
      goto LABEL_32;
    }
  }
  v12 = *(_DWORD *)(a3 + 8) & 0xFFFFFFFB | (4 * (v8 == off_10048AC50));
  v13 = -v10;
  v14 = a3;
  a3 = a2;
LABEL_31:
  sub_10024FBF8(a4, v12, v14 + 16, v14 + 112, a3 + 16, v13, v11);
LABEL_32:
  if (v16)
    sub_1002989D0(v15);
}

void sub_1002532BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002532D0(double a1, uint64_t a2, uint64_t *a3, float64x2_t *a4)
{
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_10044D808);
  sub_100251368((uint64_t)a4, a3);
  a4[19] = vmulq_n_f64(a4[19], a1);
  if (v8)
    sub_1002989D0(v7);
}

void sub_10025333C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100253350(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _BYTE v5[8];
  int v6;

  sub_100298C2C(v5, &off_10044D828);
  sub_100251368((uint64_t)a3, (uint64_t *)a2);
  a3[2] = (*(_DWORD *)(a2 + 8) & 4 | (~__rbit32(*(_DWORD *)(a2 + 8)) >> 30)) ^ 4;
  sub_100255E10(a3 + 4, a3 + 28);
  if (v6)
    sub_1002989D0(v5);
}

void sub_1002533D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002533E4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[4];
  char *v19;
  void *v20;
  _QWORD v21[2];

  LODWORD(v18[0]) = 1124007936;
  memset((char *)v18 + 4, 0, 48);
  v18[3] = 0u;
  v19 = (char *)v18 + 8;
  v20 = v21;
  v21[0] = 0;
  v21[1] = 0;
  if (a4 == -1 || (*(_DWORD *)(a2 + 16) & 0xFFF) == a4)
    v6 = (unsigned int *)a3;
  else
    v6 = (unsigned int *)v18;
  v16 = a2 + 16;
  v17 = 0;
  v15 = 16842752;
  v12 = 33619968;
  v13 = v6;
  v14 = 0;
  sub_100227470((uint64_t)&v15, (uint64_t)&v12, *(_DWORD *)(a2 + 8));
  if (*((_QWORD *)v6 + 2) != *(_QWORD *)(a3 + 16))
  {
    v15 = 33619968;
    v16 = a3;
    v17 = 0;
    sub_1002044A8(v6, (uint64_t)&v15, a4, 1.0, 0.0);
  }
  if (*((_QWORD *)&v18[3] + 1))
  {
    v7 = (unsigned int *)(*((_QWORD *)&v18[3] + 1) + 20);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      sub_100256C90((uint64_t)v18);
  }
  *((_QWORD *)&v18[3] + 1) = 0;
  memset(&v18[1], 0, 32);
  if (SDWORD1(v18[0]) >= 1)
  {
    v10 = 0;
    v11 = v19;
    do
      *(_DWORD *)&v11[4 * v10++] = 0;
    while (v10 < SDWORD1(v18[0]));
  }
  if (v20 != v21)
    j__free(v20);
}

void sub_100253534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025354C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100253560(uint64_t a1, uint64_t a2, uint64_t (****a3)(), uint64_t a4)
{
  uint64_t (***v4)();

  v4 = *a3;
  if (*(uint64_t (****)())a2 == off_10048AC48 && v4 == off_10048AC28)
  {
    sub_1002535C0(a4, *(_DWORD *)(a2 + 8), a2 + 16, (uint64_t)(a3 + 2));
  }
  else if (v4 == (uint64_t (***)())a1)
  {
    sub_10024F428(a1, a2, a3, a4);
  }
  else
  {
    ((void (*)(uint64_t (***)()))(*v4)[23])(*a3);
  }
}

void sub_1002535C0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  _OWORD v22[2];
  _OWORD v23[4];
  char *v24;
  void *v25;
  _QWORD v26[2];
  uint64_t v27;
  int v28;
  _BYTE v29[64];
  _BYTE *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[9];

  LODWORD(v23[0]) = 1124007936;
  memset((char *)v23 + 4, 0, 48);
  v23[3] = 0u;
  v24 = (char *)v23 + 8;
  v25 = v26;
  v26[0] = 0;
  v26[1] = 0;
  memset(v22, 0, sizeof(v22));
  sub_100254384((uint64_t)&v27, (uint64_t)&off_10048AC58, a2, a3, a4, (uint64_t)v23, v22, 1.0, 1.0);
  *(_QWORD *)a1 = v27;
  *(_DWORD *)(a1 + 8) = v28;
  if (&v27 != (uint64_t *)a1)
  {
    v5 = *(_QWORD *)(a1 + 72);
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 20);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        sub_100256C90(a1 + 16);
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      v9 = 0;
      v10 = *(_QWORD *)(a1 + 80);
      do
        *(_DWORD *)(v10 + 4 * v9++) = 0;
      while (v9 < *(int *)(a1 + 20));
    }
    v11 = *(_DWORD *)&v29[4];
    v12 = *(_OWORD *)&v29[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v29;
    *(_OWORD *)(a1 + 32) = v12;
    v13 = *(_OWORD *)&v29[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v29[32];
    *(_OWORD *)(a1 + 64) = v13;
    v14 = *(uint64_t **)(a1 + 88);
    if (v14 == (uint64_t *)(a1 + 96))
    {
      v15 = v31;
      if (v11 <= 2)
        goto LABEL_12;
    }
    else
    {
      j__free(v14);
      *(_QWORD *)(a1 + 80) = a1 + 24;
      *(_QWORD *)(a1 + 88) = a1 + 96;
      v14 = (uint64_t *)(a1 + 96);
      v15 = v31;
      if (*(int *)&v29[4] <= 2)
      {
LABEL_12:
        *v14 = *v15;
        v14[1] = v15[1];
LABEL_15:
        *(_DWORD *)v29 = 1124007936;
        memset(&v29[4], 0, 60);
        goto LABEL_16;
      }
    }
    *(_QWORD *)(a1 + 80) = v30;
    *(_QWORD *)(a1 + 88) = v15;
    v30 = &v29[8];
    v31 = &v32;
    goto LABEL_15;
  }
LABEL_16:
  sub_10024B080(a1 + 112, (uint64_t)&v33);
  sub_10024B080(a1 + 208, (uint64_t)v34);
  v16 = v34[7];
  *(_OWORD *)(a1 + 304) = v34[6];
  *(_OWORD *)(a1 + 320) = v16;
  *(_OWORD *)(a1 + 336) = v34[8];
  sub_100008C98((uint64_t)&v27);
  if (*((_QWORD *)&v23[3] + 1))
  {
    v17 = (unsigned int *)(*((_QWORD *)&v23[3] + 1) + 20);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      sub_100256C90((uint64_t)v23);
  }
  *((_QWORD *)&v23[3] + 1) = 0;
  memset(&v23[1], 0, 32);
  if (SDWORD1(v23[0]) >= 1)
  {
    v20 = 0;
    v21 = v24;
    do
      *(_DWORD *)&v21[4 * v20++] = 0;
    while (v20 < SDWORD1(v23[0]));
  }
  if (v25 != v26)
    j__free(v25);
}

void sub_10025380C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100253820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_100008C98((uint64_t)va1);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025383C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[4];
  char *v22;
  void *v23;
  _QWORD v24[2];

  LODWORD(v21[0]) = 1124007936;
  memset((char *)v21 + 4, 0, 48);
  v21[3] = 0u;
  v22 = (char *)v21 + 8;
  v23 = v24;
  v24[0] = 0;
  v24[1] = 0;
  if (a4 == -1 || (*(_DWORD *)(a2 + 16) & 0xFFF) == a4)
    v6 = (unsigned int *)a3;
  else
    v6 = (unsigned int *)v21;
  v20 = 0;
  v18 = 16842752;
  v19 = a2 + 16;
  v17 = 0;
  v15 = 16842752;
  v16 = a2 + 112;
  v12 = 33619968;
  v13 = v6;
  v14 = 0;
  sub_100229B74((uint64_t)&v18, (uint64_t)&v15, (uint64_t)&v12, *(_DWORD *)(a2 + 8));
  if (*((_QWORD *)v6 + 2) != *(_QWORD *)(a3 + 16))
  {
    v18 = 33619968;
    v19 = a3;
    v20 = 0;
    sub_1002044A8(v6, (uint64_t)&v18, a4, 1.0, 0.0);
  }
  if (*((_QWORD *)&v21[3] + 1))
  {
    v7 = (unsigned int *)(*((_QWORD *)&v21[3] + 1) + 20);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      sub_100256C90((uint64_t)v21);
  }
  *((_QWORD *)&v21[3] + 1) = 0;
  memset(&v21[1], 0, 32);
  if (SDWORD1(v21[0]) >= 1)
  {
    v10 = 0;
    v11 = v22;
    do
      *(_DWORD *)&v11[4 * v10++] = 0;
    while (v10 < SDWORD1(v21[0]));
  }
  if (v23 != v24)
    j__free(v23);
}

void sub_1002539A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002539BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100006BE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002539D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v13;
  BOOL v14;
  int v15;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 __src;
  __int128 v22;

  v7 = *(_DWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 20);
  v8 = v7 & 0xFFF;
  if (a4 == -1)
    LOWORD(a4) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  if (v6 <= 2)
  {
    v10 = *(_DWORD *)(v9 + 4);
    v11 = a4 & 0xFFF;
    v13 = *(int *)(a3 + 4) <= 2 && *(_DWORD *)(a3 + 8) == *(_DWORD *)v9 && *(_DWORD *)(a3 + 12) == v10;
    if (!v13 || ((*(_DWORD *)a3 & 0xFFF) == v11 ? (v14 = *(_QWORD *)(a3 + 16) == 0) : (v14 = 1), v14))
    {
      LODWORD(__src) = *(_DWORD *)v9;
      DWORD1(__src) = v10;
      sub_100255F30((char *)a3, 2, (uint64_t *)&__src, v11);
    }
    v15 = *(_DWORD *)(a2 + 8);
    if (v15 != 73 || *(_DWORD *)(a2 + 20) > 2)
      goto LABEL_22;
LABEL_30:
    v18 = 50397184;
    v19 = a3;
    v20 = 0;
    __src = *(unint64_t *)(a2 + 304);
    v22 = 0uLL;
    sub_100263CC8((uint64_t)&v18, (double *)&__src);
    return;
  }
  sub_100255F30((char *)a3, v6, (uint64_t *)v9, a4);
  v15 = *(_DWORD *)(a2 + 8);
  if (v15 == 73 && *(_DWORD *)(a2 + 20) <= 2)
    goto LABEL_30;
LABEL_22:
  if (v15 == 49)
  {
    __src = *(unint64_t *)(a2 + 304);
    v22 = 0uLL;
    sub_10021956C(a3, (uint64_t)&__src);
  }
  else
  {
    if (v15 != 48)
    {
      __src = 0uLL;
      qmemcpy((void *)sub_10029430C(&__src, 31), "Invalid matrix initializer type", 31);
      sub_100294B74(-2, (uint64_t *)&__src, "assign", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matop.cpp", 1643);
    }
    __src = 0u;
    v22 = 0u;
    sub_10021956C(a3, (uint64_t)&__src);
  }
}

void sub_100253B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100253BB0(double a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_10044D848);
  sub_100251368(a4, a3);
  *(double *)(a4 + 304) = *(double *)(a4 + 304) * a1;
  if (v8)
    sub_1002989D0(v7);
}

void sub_100253C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100253C34(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v8[2];
  _BYTE v9[8];
  int v10;

  sub_100298C2C(v9, &off_10044D868);
  *(_QWORD *)a4 = 0;
  *(_DWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 1124007936;
  *(_OWORD *)(a4 + 20) = 0u;
  *(_OWORD *)(a4 + 36) = 0u;
  *(_OWORD *)(a4 + 52) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 80) = a4 + 24;
  *(_QWORD *)(a4 + 88) = a4 + 96;
  *(_QWORD *)(a4 + 104) = 0;
  *(_DWORD *)(a4 + 112) = 1124007936;
  *(_OWORD *)(a4 + 116) = 0u;
  *(_OWORD *)(a4 + 132) = 0u;
  *(_OWORD *)(a4 + 148) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_QWORD *)(a4 + 192) = 0;
  *(_QWORD *)(a4 + 176) = a4 + 120;
  *(_QWORD *)(a4 + 184) = a4 + 192;
  *(_QWORD *)(a4 + 200) = 0;
  *(_DWORD *)(a4 + 208) = 1124007936;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 244) = 0u;
  *(_OWORD *)(a4 + 228) = 0u;
  *(_OWORD *)(a4 + 212) = 0u;
  *(_QWORD *)(a4 + 272) = a4 + 216;
  *(_QWORD *)(a4 + 280) = a4 + 288;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 304) = 0u;
  *(_OWORD *)(a4 + 320) = 0u;
  *(_OWORD *)(a4 + 336) = 0u;
  v8[0] = a2;
  v8[1] = a1;
  sub_100253D50(a4, 48, v8, a3, 1.0);
  if (v10)
    sub_1002989D0(v9);
}

void sub_100253D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_100008C98(v3);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100253D50(uint64_t a1, int a2, int *a3, unsigned int a4, double a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t *v22;
  __int128 v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _DWORD *v38;
  _OWORD v39[2];
  _OWORD v40[4];
  char *v41;
  void *v42;
  _QWORD v43[2];
  _OWORD v44[4];
  char *v45;
  void *v46;
  _QWORD v47[2];
  int v48;
  int v49;
  _DWORD v50[2];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  void *v56;
  _QWORD v57[2];
  uint64_t v58;
  int v59;
  _BYTE v60[64];
  _BYTE *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD v65[9];

  v10 = sub_1002545A8();
  v11 = *a3;
  v50[0] = a3[1];
  v50[1] = v11;
  *(_QWORD *)&v51 = 4008636142;
  *((_QWORD *)&v51 + 1) = 4008636142;
  v53 = 0;
  v54 = 0;
  v55 = v50;
  v56 = v57;
  v48 = a4 & 0xFFF | 0x42FF4000;
  v49 = 2;
  v57[0] = v11 * (uint64_t)(int)((((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3));
  v57[1] = (((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3);
  *(_QWORD *)&v52 = v57[0] * v50[0] + 4008636142;
  *((_QWORD *)&v52 + 1) = v52;
  LODWORD(v44[0]) = 1124007936;
  memset((char *)v44 + 4, 0, 48);
  v44[3] = 0u;
  v45 = (char *)v44 + 8;
  v46 = v47;
  v47[0] = 0;
  v47[1] = 0;
  LODWORD(v40[0]) = 1124007936;
  memset((char *)v40 + 4, 0, 48);
  v40[3] = 0u;
  v41 = (char *)v40 + 8;
  v42 = v43;
  v43[0] = 0;
  v43[1] = 0;
  memset(v39, 0, sizeof(v39));
  sub_100254384((uint64_t)&v58, v10, a2, (uint64_t)&v48, (uint64_t)v44, (uint64_t)v40, v39, a5, 0.0);
  *(_QWORD *)a1 = v58;
  *(_DWORD *)(a1 + 8) = v59;
  if (&v58 != (uint64_t *)a1)
  {
    v12 = *(_QWORD *)(a1 + 72);
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 20);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        sub_100256C90(a1 + 16);
    }
    *(_QWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      v16 = 0;
      v17 = *(_QWORD *)(a1 + 80);
      do
        *(_DWORD *)(v17 + 4 * v16++) = 0;
      while (v16 < *(int *)(a1 + 20));
    }
    v18 = *(_DWORD *)&v60[4];
    v19 = *(_OWORD *)&v60[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v60;
    *(_OWORD *)(a1 + 32) = v19;
    v20 = *(_OWORD *)&v60[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v60[32];
    *(_OWORD *)(a1 + 64) = v20;
    v21 = *(uint64_t **)(a1 + 88);
    if (v21 == (uint64_t *)(a1 + 96))
    {
      v22 = v62;
      if (v18 <= 2)
        goto LABEL_12;
    }
    else
    {
      j__free(v21);
      *(_QWORD *)(a1 + 80) = a1 + 24;
      *(_QWORD *)(a1 + 88) = a1 + 96;
      v21 = (uint64_t *)(a1 + 96);
      v22 = v62;
      if (*(int *)&v60[4] <= 2)
      {
LABEL_12:
        *v21 = *v22;
        v21[1] = v22[1];
LABEL_15:
        *(_DWORD *)v60 = 1124007936;
        memset(&v60[4], 0, 60);
        goto LABEL_16;
      }
    }
    *(_QWORD *)(a1 + 80) = v61;
    *(_QWORD *)(a1 + 88) = v22;
    v61 = &v60[8];
    v62 = &v63;
    goto LABEL_15;
  }
LABEL_16:
  sub_10024B080(a1 + 112, (uint64_t)&v64);
  sub_10024B080(a1 + 208, (uint64_t)v65);
  v23 = v65[7];
  *(_OWORD *)(a1 + 304) = v65[6];
  *(_OWORD *)(a1 + 320) = v23;
  *(_OWORD *)(a1 + 336) = v65[8];
  sub_100008C98((uint64_t)&v58);
  if (*((_QWORD *)&v40[3] + 1))
  {
    v24 = (unsigned int *)(*((_QWORD *)&v40[3] + 1) + 20);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
      sub_100256C90((uint64_t)v40);
  }
  *((_QWORD *)&v40[3] + 1) = 0;
  memset(&v40[1], 0, 32);
  if (SDWORD1(v40[0]) >= 1)
  {
    v27 = 0;
    v28 = v41;
    do
      *(_DWORD *)&v28[4 * v27++] = 0;
    while (v27 < SDWORD1(v40[0]));
  }
  if (v42 != v43)
    j__free(v42);
  if (*((_QWORD *)&v44[3] + 1))
  {
    v29 = (unsigned int *)(*((_QWORD *)&v44[3] + 1) + 20);
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
      sub_100256C90((uint64_t)v44);
  }
  *((_QWORD *)&v44[3] + 1) = 0;
  memset(&v44[1], 0, 32);
  if (SDWORD1(v44[0]) >= 1)
  {
    v32 = 0;
    v33 = v45;
    do
      *(_DWORD *)&v33[4 * v32++] = 0;
    while (v32 < SDWORD1(v44[0]));
  }
  if (v46 != v47)
    j__free(v46);
  if (v54)
  {
    v34 = (unsigned int *)(v54 + 20);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
      sub_100256C90((uint64_t)&v48);
  }
  v54 = 0;
  v51 = 0u;
  v52 = 0u;
  if (v49 >= 1)
  {
    v37 = 0;
    v38 = v55;
    do
      v38[v37++] = 0;
    while (v37 < v49);
  }
  if (v56 != v57)
    j__free(v56);
}

void sub_100254134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_100006BE4((uint64_t)&a13);
  sub_100006BE4((uint64_t)&a25);
  sub_100006BE4((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_100254168(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _BYTE v7[8];
  int v8;

  sub_100298C2C(v7, &off_10044D888);
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 1124007936;
  *(_OWORD *)(a3 + 20) = 0u;
  *(_OWORD *)(a3 + 36) = 0u;
  *(_OWORD *)(a3 + 52) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = a3 + 24;
  *(_QWORD *)(a3 + 88) = a3 + 96;
  *(_QWORD *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 1124007936;
  *(_OWORD *)(a3 + 116) = 0u;
  *(_OWORD *)(a3 + 132) = 0u;
  *(_OWORD *)(a3 + 148) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)(a3 + 176) = a3 + 120;
  *(_QWORD *)(a3 + 184) = a3 + 192;
  *(_QWORD *)(a3 + 200) = 0;
  *(_DWORD *)(a3 + 208) = 1124007936;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 244) = 0u;
  *(_OWORD *)(a3 + 228) = 0u;
  *(_OWORD *)(a3 + 212) = 0u;
  *(_QWORD *)(a3 + 272) = a3 + 216;
  *(_QWORD *)(a3 + 280) = a3 + 288;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  v6 = *a1;
  sub_100253D50(a3, 48, (int *)&v6, a2, 1.0);
  if (v8)
    sub_1002989D0(v7);
}

void sub_100254268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_100008C98(v3);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100254284()
{
  operator delete();
}

uint64_t sub_100254298()
{
  return 1;
}

void sub_1002542A0()
{
  operator delete();
}

uint64_t sub_1002542B4()
{
  return 1;
}

void sub_1002542BC()
{
  operator delete();
}

uint64_t sub_1002542D0()
{
  return 1;
}

void sub_1002542D8()
{
  operator delete();
}

uint64_t sub_1002542EC()
{
  return 1;
}

void sub_1002542F4()
{
  operator delete();
}

uint64_t sub_100254308()
{
  return 0;
}

void sub_100254310()
{
  operator delete();
}

uint64_t sub_100254324()
{
  return 0;
}

void sub_10025432C()
{
  operator delete();
}

uint64_t sub_100254340()
{
  return 0;
}

void sub_100254348()
{
  operator delete();
}

uint64_t sub_10025435C()
{
  return 0;
}

void sub_100254368()
{
  operator delete();
}

uint64_t sub_10025437C()
{
  return 0;
}

uint64_t sub_100254384(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, double a8, double a9)
{
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  __int128 v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  v15 = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a4 + 32);
  v17 = *(_QWORD *)(a4 + 48);
  v16 = *(_QWORD *)(a4 + 56);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = v16;
  *(_QWORD *)(a1 + 80) = a1 + 24;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 16) = v15;
  if (v16)
  {
    v18 = (unsigned int *)(v16 + 20);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  if (*(int *)(a4 + 4) > 2)
  {
    *(_DWORD *)(a1 + 20) = 0;
    sub_100256B48(a1 + 16, a4);
  }
  else
  {
    v20 = *(_QWORD **)(a4 + 72);
    v21 = *(_QWORD **)(a1 + 88);
    *v21 = *v20;
    v21[1] = v20[1];
  }
  v22 = *(_OWORD *)a5;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a5 + 32);
  v24 = *(_QWORD *)(a5 + 48);
  v23 = *(_QWORD *)(a5 + 56);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 160) = v24;
  *(_QWORD *)(a1 + 168) = v23;
  *(_QWORD *)(a1 + 176) = a1 + 120;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 112) = v22;
  if (v23)
  {
    v25 = (unsigned int *)(v23 + 20);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
  }
  if (*(int *)(a5 + 4) > 2)
  {
    *(_DWORD *)(a1 + 116) = 0;
    sub_100256B48(a1 + 112, a5);
  }
  else
  {
    v27 = *(_QWORD **)(a5 + 72);
    v28 = *(_QWORD **)(a1 + 184);
    *v28 = *v27;
    v28[1] = v27[1];
  }
  v29 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)a6;
  *(_OWORD *)(a1 + 224) = v29;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a6 + 32);
  v30 = *(_QWORD *)(a6 + 56);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a6 + 48);
  *(_QWORD *)(a1 + 264) = v30;
  *(_QWORD *)(a1 + 272) = a1 + 216;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  if (v30)
  {
    v31 = (unsigned int *)(v30 + 20);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
  }
  if (*(int *)(a6 + 4) > 2)
  {
    *(_DWORD *)(a1 + 212) = 0;
    sub_100256B48(a1 + 208, a6);
  }
  else
  {
    v33 = *(_QWORD **)(a6 + 72);
    v34 = *(_QWORD **)(a1 + 280);
    *v34 = *v33;
    v34[1] = v33[1];
  }
  *(double *)(a1 + 304) = a8;
  *(double *)(a1 + 312) = a9;
  *(_QWORD *)(a1 + 320) = *a7;
  *(_QWORD *)(a1 + 328) = a7[1];
  *(_QWORD *)(a1 + 336) = a7[2];
  *(_QWORD *)(a1 + 344) = a7[3];
  return a1;
}

void sub_100254578(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100006BE4(v2);
  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

void sub_100254594(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100006BE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002545A8()
{
  pthread_mutex_t **v0;

  if (!qword_100497C78)
  {
    v0 = (pthread_mutex_t **)sub_100294378();
    sub_100295438(v0);
    if (!qword_100497C78)
      operator new();
    sub_100295440(v0);
  }
  return qword_100497C78;
}

void sub_100254614(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  sub_100295440(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100254634(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 16) && !*(_DWORD *)(a2 + 20))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void sub_100254654(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  _QWORD v63[3];
  int v64;
  unint64_t v65;
  size_t __n;
  int v67;
  uint64_t v68;
  unsigned int v69;
  _BYTE v70[60];
  int *v71;
  void *v72;
  _QWORD v73[2];
  _BYTE v74[64];
  int *v75;
  void *v76;
  _QWORD v77[2];
  const void *v78;
  void *v79;
  uint64_t v80[2];
  _DWORD v81[32];

  if (!a2)
    return;
  v8 = *(_QWORD *)(a2 + 24);
  if (a4 < 1)
  {
LABEL_13:
    memset(&v74[20], 0, 44);
    *(_OWORD *)&v74[4] = 0u;
    v75 = (int *)&v74[8];
    v76 = v77;
    v77[0] = 0;
    v77[1] = 0;
    *(_DWORD *)v74 = 1124007936;
    *(_QWORD *)&v74[16] = v8;
    *(_QWORD *)&v74[24] = v8;
    sub_10025655C((uint64_t)v74, a4, (uint64_t)v81, a7, 1);
    v12 = v75;
    if (*(int *)&v74[4] < 1)
    {
      v14 = 0;
    }
    else
    {
      v13 = 0;
      while (v75[v13] <= 1)
      {
        if (*(unsigned int *)&v74[4] == ++v13)
        {
          v14 = *(_DWORD *)&v74[4];
          goto LABEL_20;
        }
      }
      v14 = v13;
    }
LABEL_20:
    v15 = (uint64_t *)v76;
    v16 = *(int *)&v74[4] - 1;
    v17 = (char *)v76 + 8 * *(int *)&v74[4] - 8;
    while (v16 > v14)
    {
      v18 = *v17 * v75[v16];
      v19 = *--v17;
      --v16;
      if (v18 < v19)
      {
        *(_DWORD *)v74 &= ~0x4000u;
        if (*(int *)&v74[4] < 3)
          goto LABEL_27;
        goto LABEL_26;
      }
    }
    *(_DWORD *)v74 = *(_DWORD *)v74 & 0xFFFFBFFF | 0x4000;
    if (*(int *)&v74[4] < 3)
      goto LABEL_27;
LABEL_26:
    *(_QWORD *)&v74[8] = -1;
LABEL_27:
    if (*(_QWORD *)&v74[56])
    {
      v20 = *(_QWORD *)(*(_QWORD *)&v74[56] + 24);
      *(_QWORD *)&v74[16] = v20;
      *(_QWORD *)&v74[24] = v20;
      if (v20)
        goto LABEL_29;
    }
    else
    {
      v20 = *(_QWORD *)&v74[16];
      if (*(_QWORD *)&v74[16])
      {
LABEL_29:
        v21 = *v75;
        v22 = *(_QWORD *)&v74[24] + *(_QWORD *)v76 * v21;
        *(_QWORD *)&v74[40] = v22;
        if ((int)v21 < 1)
        {
          *(_QWORD *)&v74[32] = v22;
        }
        else
        {
          v23 = (*(_DWORD *)&v74[4] - 1);
          v24 = v20 + *((_QWORD *)v76 + (int)v23) * v75[(int)v23];
          *(_QWORD *)&v74[32] = v24;
          if (*(int *)&v74[4] >= 2)
          {
            do
            {
              v25 = *v12++;
              v26 = v25 - 1;
              v27 = *v15++;
              v24 += v27 * v26;
              --v23;
            }
            while (v23);
            *(_QWORD *)&v74[32] = v24;
          }
        }
LABEL_36:
        memset(&v70[28], 0, 32);
        *(_OWORD *)v70 = 0u;
        v71 = (int *)&v70[4];
        v72 = v73;
        v73[0] = 0;
        v73[1] = 0;
        v69 = 1124007936;
        *(_QWORD *)&v70[12] = a3;
        *(_QWORD *)&v70[20] = a3;
        sub_10025655C((uint64_t)&v69, a4, (uint64_t)v81, a8, 1);
        v28 = v71;
        if (*(int *)v70 < 1)
        {
          v30 = 0;
        }
        else
        {
          v29 = 0;
          while (v71[v29] <= 1)
          {
            if (*(unsigned int *)v70 == ++v29)
            {
              v30 = *(_DWORD *)v70;
              goto LABEL_43;
            }
          }
          v30 = v29;
        }
LABEL_43:
        v31 = (uint64_t *)v72;
        v32 = *(int *)v70 - 1;
        v33 = (char *)v72 + 8 * *(int *)v70 - 8;
        while (v32 > v30)
        {
          v34 = *v33 * v71[v32];
          v35 = *--v33;
          --v32;
          if (v34 < v35)
          {
            v69 &= ~0x4000u;
            if (*(int *)v70 < 3)
              goto LABEL_50;
            goto LABEL_49;
          }
        }
        v69 = v69 & 0xFFFFBFFF | 0x4000;
        if (*(int *)v70 < 3)
          goto LABEL_50;
LABEL_49:
        *(_QWORD *)&v70[4] = -1;
LABEL_50:
        if (*(_QWORD *)&v70[52])
        {
          v36 = *(_QWORD *)(*(_QWORD *)&v70[52] + 24);
          *(_QWORD *)&v70[12] = v36;
          *(_QWORD *)&v70[20] = v36;
          if (v36)
            goto LABEL_52;
        }
        else
        {
          v36 = *(_QWORD *)&v70[12];
          if (*(_QWORD *)&v70[12])
          {
LABEL_52:
            v37 = *v71;
            v38 = *(_QWORD *)&v70[20] + *(_QWORD *)v72 * v37;
            *(_QWORD *)&v70[36] = v38;
            if ((int)v37 < 1)
            {
              *(_QWORD *)&v70[28] = v38;
            }
            else
            {
              v39 = (*(_DWORD *)v70 - 1);
              v40 = v36 + *((_QWORD *)v72 + (int)v39) * v71[(int)v39];
              *(_QWORD *)&v70[28] = v40;
              if (*(int *)v70 >= 2)
              {
                do
                {
                  v41 = *v28++;
                  v42 = v41 - 1;
                  v43 = *v31++;
                  v40 += v43 * v42;
                  --v39;
                }
                while (v39);
                *(_QWORD *)&v70[28] = v40;
              }
            }
            goto LABEL_59;
          }
        }
        *(_QWORD *)&v70[28] = 0;
        *(_QWORD *)&v70[36] = 0;
LABEL_59:
        v80[0] = (uint64_t)v74;
        v80[1] = (uint64_t)&v69;
        v78 = 0;
        v79 = 0;
        v68 = 0;
        memset(v63, 0, sizeof(v63));
        v64 = 0;
        v65 = 0;
        __n = 0;
        v67 = 0;
        sub_10026461C((uint64_t)v63, v80, 0, (uint64_t)&v78, 2);
        if (v65)
        {
          v44 = 0;
          v45 = __n;
          do
          {
            memcpy(v79, v78, v45);
            ++v44;
            sub_100254D78((uint64_t)v63);
          }
          while (v44 < v65);
        }
        if (*(_QWORD *)&v70[52])
        {
          v46 = (unsigned int *)(*(_QWORD *)&v70[52] + 20);
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            v49 = *(_QWORD *)&v70[52];
            if (*(_QWORD *)&v70[52])
            {
              *(_QWORD *)&v70[52] = 0;
              v50 = *(_QWORD *)(v49 + 8);
              if (!v50)
              {
                v50 = *(_QWORD *)&v70[44];
                if (!*(_QWORD *)&v70[44])
                  v50 = sub_100255D20();
              }
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 48))(v50, v49);
            }
          }
        }
        *(_QWORD *)&v70[52] = 0;
        memset(&v70[12], 0, 32);
        if (*(int *)v70 >= 1)
        {
          v51 = 0;
          v52 = v71;
          do
            v52[v51++] = 0;
          while (v51 < *(int *)v70);
        }
        if (v72 != v73)
          j__free(v72);
        if (*(_QWORD *)&v74[56])
        {
          v53 = (unsigned int *)(*(_QWORD *)&v74[56] + 20);
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (!v55)
          {
            v56 = *(_QWORD *)&v74[56];
            if (*(_QWORD *)&v74[56])
            {
              *(_QWORD *)&v74[56] = 0;
              v57 = *(_QWORD *)(v56 + 8);
              if (!v57)
              {
                v57 = *(_QWORD *)&v74[48];
                if (!*(_QWORD *)&v74[48])
                  v57 = sub_100255D20();
              }
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 48))(v57, v56);
            }
          }
        }
        *(_QWORD *)&v74[56] = 0;
        memset(&v74[16], 0, 32);
        if (*(int *)&v74[4] >= 1)
        {
          v58 = 0;
          v59 = v75;
          do
            v59[v58++] = 0;
          while (v58 < *(int *)&v74[4]);
        }
        if (v76 != v77)
          j__free(v76);
        return;
      }
    }
    *(_QWORD *)&v74[32] = 0;
    *(_QWORD *)&v74[40] = 0;
    goto LABEL_36;
  }
  v9 = 0;
  while (1)
  {
    v11 = *(_QWORD *)(a5 + 8 * v9);
    if (v11 >> 31)
    {
      *(_QWORD *)v74 = 0;
      *(_QWORD *)&v74[8] = 0;
      qmemcpy((void *)sub_10029430C(v74, 27), "sz[i] <= (size_t)2147483647", 27);
      sub_100294B74(-215, (uint64_t *)v74, "download", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 77);
    }
    if (!v11)
      break;
    if (a6)
    {
      if (v9 <= a4 - 2)
        v10 = *(_QWORD *)(a7 + 8 * v9);
      else
        v10 = 1;
      v8 += v10 * *(_QWORD *)(a6 + 8 * v9);
    }
    v81[v9++] = v11;
    if (a4 == v9)
      goto LABEL_13;
  }
}

void sub_100254C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100254CC4(uint64_t a1, int a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 8;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)a1 = a4 & 0xFFF | 0x42FF0000;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a5;
  sub_10025655C(a1, a2, a3, a6, 1);
  sub_100256A04(a1);
  return a1;
}

uint64_t sub_100254D30(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  sub_10026461C(a1, a2, 0, a3, a4);
  return a1;
}

uint64_t sub_100254D78(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(result + 56);
  if (v1 < *(_QWORD *)(result + 32) - 1)
  {
    v2 = v1 + 1;
    *(_QWORD *)(result + 56) = v2;
    v3 = *(_DWORD *)(result + 48);
    if (v3 == 1)
    {
      if (*(_QWORD *)(result + 16))
      {
        v4 = *(unsigned int *)(result + 24);
        if ((int)v4 >= 1)
        {
          v5 = 0;
          v6 = 8 * v4;
          do
          {
            v7 = *(_QWORD *)(result + 16);
            if (*(_QWORD *)(v7 + v5))
              *(_QWORD *)(v7 + v5) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + v5) + 16)
                                   + **(_QWORD **)(*(_QWORD *)(*(_QWORD *)result + v5) + 72) * v2;
            v5 += 8;
          }
          while (v6 != v5);
        }
      }
      v25 = *(_QWORD *)(result + 8);
      if (v25)
      {
        v26 = *(unsigned int *)(result + 24);
        if ((int)v26 >= 1)
        {
          v27 = 0;
          v28 = (_QWORD *)(v25 + 16);
          v29 = 8 * v26;
          do
          {
            if (*v28)
              *v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + v27) + 16)
                   + **(_QWORD **)(*(_QWORD *)(*(_QWORD *)result + v27) + 72) * v2;
            v27 += 8;
            v28 += 12;
          }
          while (v29 != v27);
        }
      }
    }
    else
    {
      v8 = *(unsigned int *)(result + 24);
      if ((int)v8 >= 1)
      {
        if ((int)v2 <= 0 || v3 <= 0)
        {
          v30 = 0;
          v31 = 8 * v8;
          v32 = 16;
          do
          {
            v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + v30) + 16);
            if (v33)
            {
              v34 = *(_QWORD *)(result + 16);
              if (v34)
                *(_QWORD *)(v34 + v30) = v33;
              v35 = *(_QWORD *)(result + 8);
              if (v35)
                *(_QWORD *)(v35 + v32) = v33;
            }
            v30 += 8;
            v32 += 96;
          }
          while (v31 != v30);
        }
        else
        {
          for (i = 0; i != v8; ++i)
          {
            v11 = *(_QWORD **)(*(_QWORD *)result + 8 * i);
            v12 = v11[2];
            if (v12)
            {
              v13 = v11[9];
              v14 = (int *)(v11[8] + 4 * (v3 - 1));
              v15 = (uint64_t *)(v13 + 8 * (v3 - 1));
              v16 = v3;
              v17 = v2;
              do
              {
                v18 = *v14--;
                v19 = v17 / v18;
                v20 = v17 % v18;
                v21 = *v15--;
                v12 += v21 * v20;
                v22 = __OFSUB__(v16--, 1);
                if ((v16 < 0) ^ v22 | (v16 == 0))
                  break;
                v17 = v19;
              }
              while (v19 >= 1);
              v23 = *(_QWORD *)(result + 16);
              if (v23)
                *(_QWORD *)(v23 + 8 * i) = v12;
              v24 = *(_QWORD *)(result + 8);
              if (v24)
                *(_QWORD *)(v24 + 96 * i + 16) = v12;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_100254F4C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  _QWORD v62[3];
  int v63;
  unint64_t v64;
  size_t __n;
  int v66;
  uint64_t v67;
  unsigned int v68;
  _BYTE v69[60];
  int *v70;
  void *v71;
  _QWORD v72[2];
  _BYTE v73[64];
  int *v74;
  void *v75;
  _QWORD v76[2];
  const void *v77;
  void *v78;
  uint64_t v79[2];
  _DWORD v80[32];

  if (!a2)
    return;
  v8 = *(_QWORD *)(a2 + 24);
  if (a4 < 1)
  {
LABEL_13:
    memset(&v73[20], 0, 44);
    *(_OWORD *)&v73[4] = 0u;
    v74 = (int *)&v73[8];
    v75 = v76;
    v76[0] = 0;
    v76[1] = 0;
    *(_DWORD *)v73 = 1124007936;
    *(_QWORD *)&v73[16] = a3;
    *(_QWORD *)&v73[24] = a3;
    sub_10025655C((uint64_t)v73, a4, (uint64_t)v80, a8, 1);
    v12 = v74;
    if (*(int *)&v73[4] < 1)
    {
      v14 = 0;
    }
    else
    {
      v13 = 0;
      while (v74[v13] <= 1)
      {
        if (*(unsigned int *)&v73[4] == ++v13)
        {
          v14 = *(_DWORD *)&v73[4];
          goto LABEL_20;
        }
      }
      v14 = v13;
    }
LABEL_20:
    v15 = (uint64_t *)v75;
    v16 = *(int *)&v73[4] - 1;
    v17 = (char *)v75 + 8 * *(int *)&v73[4] - 8;
    while (v16 > v14)
    {
      v18 = *v17 * v74[v16];
      v19 = *--v17;
      --v16;
      if (v18 < v19)
      {
        *(_DWORD *)v73 &= ~0x4000u;
        if (*(int *)&v73[4] < 3)
          goto LABEL_27;
        goto LABEL_26;
      }
    }
    *(_DWORD *)v73 = *(_DWORD *)v73 & 0xFFFFBFFF | 0x4000;
    if (*(int *)&v73[4] < 3)
      goto LABEL_27;
LABEL_26:
    *(_QWORD *)&v73[8] = -1;
LABEL_27:
    if (*(_QWORD *)&v73[56])
    {
      v20 = *(_QWORD *)(*(_QWORD *)&v73[56] + 24);
      *(_QWORD *)&v73[16] = v20;
      *(_QWORD *)&v73[24] = v20;
      if (v20)
        goto LABEL_29;
    }
    else
    {
      v20 = *(_QWORD *)&v73[16];
      if (*(_QWORD *)&v73[16])
      {
LABEL_29:
        v21 = *v74;
        v22 = *(_QWORD *)&v73[24] + *(_QWORD *)v75 * v21;
        *(_QWORD *)&v73[40] = v22;
        if ((int)v21 < 1)
        {
          *(_QWORD *)&v73[32] = v22;
        }
        else
        {
          v23 = (*(_DWORD *)&v73[4] - 1);
          v24 = v20 + *((_QWORD *)v75 + (int)v23) * v74[(int)v23];
          *(_QWORD *)&v73[32] = v24;
          if (*(int *)&v73[4] >= 2)
          {
            do
            {
              v25 = *v12++;
              v26 = v25 - 1;
              v27 = *v15++;
              v24 += v27 * v26;
              --v23;
            }
            while (v23);
            *(_QWORD *)&v73[32] = v24;
          }
        }
LABEL_36:
        memset(&v69[28], 0, 32);
        *(_OWORD *)v69 = 0u;
        v70 = (int *)&v69[4];
        v71 = v72;
        v72[0] = 0;
        v72[1] = 0;
        v68 = 1124007936;
        *(_QWORD *)&v69[12] = v8;
        *(_QWORD *)&v69[20] = v8;
        sub_10025655C((uint64_t)&v68, a4, (uint64_t)v80, a7, 1);
        v28 = v70;
        if (*(int *)v69 < 1)
        {
          v30 = 0;
        }
        else
        {
          v29 = 0;
          while (v70[v29] <= 1)
          {
            if (*(unsigned int *)v69 == ++v29)
            {
              v30 = *(_DWORD *)v69;
              goto LABEL_43;
            }
          }
          v30 = v29;
        }
LABEL_43:
        v31 = (uint64_t *)v71;
        v32 = *(int *)v69 - 1;
        v33 = (char *)v71 + 8 * *(int *)v69 - 8;
        while (v32 > v30)
        {
          v34 = *v33 * v70[v32];
          v35 = *--v33;
          --v32;
          if (v34 < v35)
          {
            v68 &= ~0x4000u;
            if (*(int *)v69 < 3)
              goto LABEL_50;
            goto LABEL_49;
          }
        }
        v68 = v68 & 0xFFFFBFFF | 0x4000;
        if (*(int *)v69 < 3)
          goto LABEL_50;
LABEL_49:
        *(_QWORD *)&v69[4] = -1;
LABEL_50:
        if (*(_QWORD *)&v69[52])
        {
          v36 = *(_QWORD *)(*(_QWORD *)&v69[52] + 24);
          *(_QWORD *)&v69[12] = v36;
          *(_QWORD *)&v69[20] = v36;
          if (v36)
            goto LABEL_52;
        }
        else
        {
          v36 = *(_QWORD *)&v69[12];
          if (*(_QWORD *)&v69[12])
          {
LABEL_52:
            v37 = *v70;
            v38 = *(_QWORD *)&v69[20] + *(_QWORD *)v71 * v37;
            *(_QWORD *)&v69[36] = v38;
            if ((int)v37 < 1)
            {
              *(_QWORD *)&v69[28] = v38;
            }
            else
            {
              v39 = (*(_DWORD *)v69 - 1);
              v40 = v36 + *((_QWORD *)v71 + (int)v39) * v70[(int)v39];
              *(_QWORD *)&v69[28] = v40;
              if (*(int *)v69 >= 2)
              {
                do
                {
                  v41 = *v28++;
                  v42 = v41 - 1;
                  v43 = *v31++;
                  v40 += v43 * v42;
                  --v39;
                }
                while (v39);
                *(_QWORD *)&v69[28] = v40;
              }
            }
            goto LABEL_59;
          }
        }
        *(_QWORD *)&v69[28] = 0;
        *(_QWORD *)&v69[36] = 0;
LABEL_59:
        v79[0] = (uint64_t)v73;
        v79[1] = (uint64_t)&v68;
        v77 = 0;
        v78 = 0;
        v67 = 0;
        memset(v62, 0, sizeof(v62));
        v63 = 0;
        v64 = 0;
        __n = 0;
        v66 = 0;
        sub_10026461C((uint64_t)v62, v79, 0, (uint64_t)&v77, 2);
        if (v64)
        {
          v44 = 0;
          v45 = __n;
          do
          {
            memcpy(v78, v77, v45);
            ++v44;
            sub_100254D78((uint64_t)v62);
          }
          while (v44 < v64);
        }
        if (*(_QWORD *)&v69[52])
        {
          v46 = (unsigned int *)(*(_QWORD *)&v69[52] + 20);
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            v49 = *(_QWORD *)&v69[52];
            if (*(_QWORD *)&v69[52])
            {
              *(_QWORD *)&v69[52] = 0;
              v50 = *(_QWORD *)(v49 + 8);
              if (!v50)
              {
                v50 = *(_QWORD *)&v69[44];
                if (!*(_QWORD *)&v69[44])
                  v50 = sub_100255D20();
              }
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 48))(v50, v49);
            }
          }
        }
        *(_QWORD *)&v69[52] = 0;
        memset(&v69[12], 0, 32);
        if (*(int *)v69 >= 1)
        {
          v51 = 0;
          v52 = v70;
          do
            v52[v51++] = 0;
          while (v51 < *(int *)v69);
        }
        if (v71 != v72)
          j__free(v71);
        if (*(_QWORD *)&v73[56])
        {
          v53 = (unsigned int *)(*(_QWORD *)&v73[56] + 20);
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (!v55)
          {
            v56 = *(_QWORD *)&v73[56];
            if (*(_QWORD *)&v73[56])
            {
              *(_QWORD *)&v73[56] = 0;
              v57 = *(_QWORD *)(v56 + 8);
              if (!v57)
              {
                v57 = *(_QWORD *)&v73[48];
                if (!*(_QWORD *)&v73[48])
                  v57 = sub_100255D20();
              }
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 48))(v57, v56);
            }
          }
        }
        *(_QWORD *)&v73[56] = 0;
        memset(&v73[16], 0, 32);
        if (*(int *)&v73[4] >= 1)
        {
          v58 = 0;
          v59 = v74;
          do
            v59[v58++] = 0;
          while (v58 < *(int *)&v73[4]);
        }
        if (v75 != v76)
          j__free(v75);
        return;
      }
    }
    *(_QWORD *)&v73[32] = 0;
    *(_QWORD *)&v73[40] = 0;
    goto LABEL_36;
  }
  v9 = 0;
  while (1)
  {
    v11 = *(_QWORD *)(a5 + 8 * v9);
    if (v11 >> 31)
    {
      *(_QWORD *)v73 = 0;
      *(_QWORD *)&v73[8] = 0;
      qmemcpy((void *)sub_10029430C(v73, 27), "sz[i] <= (size_t)2147483647", 27);
      sub_100294B74(-215, (uint64_t *)v73, "upload", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 108);
    }
    if (!v11)
      break;
    if (a6)
    {
      if (v9 <= a4 - 2)
        v10 = *(_QWORD *)(a7 + 8 * v9);
      else
        v10 = 1;
      v8 += v10 * *(_QWORD *)(a6 + 8 * v9);
    }
    v80[v9++] = v11;
    if (a4 == v9)
      goto LABEL_13;
  }
}

void sub_10025555C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1002555C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  int v72;
  _QWORD v74[3];
  int v75;
  unint64_t v76;
  size_t __n;
  int v78;
  uint64_t v79;
  unsigned int v80;
  _BYTE v81[60];
  int *v82;
  void *v83;
  _QWORD v84[2];
  _BYTE v85[64];
  int *v86;
  void *v87;
  _QWORD v88[2];
  _BYTE v89[8];
  int v90;
  const void *v91;
  void *v92;
  uint64_t v93[2];
  _DWORD v94[32];

  sub_100298C2C(v89, &off_10044E1B8);
  if (!a2 || !a3)
    goto LABEL_96;
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a3 + 24);
  v72 = a4;
  if (a4 < 1)
  {
LABEL_19:
    memset(&v85[20], 0, 44);
    *(_OWORD *)&v85[4] = 0u;
    v86 = (int *)&v85[8];
    v87 = v88;
    v88[0] = 0;
    v88[1] = 0;
    *(_DWORD *)v85 = 1124007936;
    *(_QWORD *)&v85[16] = v15;
    *(_QWORD *)&v85[24] = v15;
    sub_10025655C((uint64_t)v85, v72, (uint64_t)v94, a7, 1);
    v24 = v86;
    if (*(int *)&v85[4] < 1)
    {
      v26 = 0;
    }
    else
    {
      v25 = 0;
      while (v86[v25] <= 1)
      {
        if (*(unsigned int *)&v85[4] == ++v25)
        {
          v26 = *(_DWORD *)&v85[4];
          goto LABEL_26;
        }
      }
      v26 = v25;
    }
LABEL_26:
    v27 = (uint64_t *)v87;
    v28 = *(int *)&v85[4] - 1;
    v29 = (char *)v87 + 8 * *(int *)&v85[4] - 8;
    while (v28 > v26)
    {
      v30 = *v29 * v86[v28];
      v31 = *--v29;
      --v28;
      if (v30 < v31)
      {
        *(_DWORD *)v85 &= ~0x4000u;
        if (*(int *)&v85[4] < 3)
          goto LABEL_33;
        goto LABEL_32;
      }
    }
    *(_DWORD *)v85 = *(_DWORD *)v85 & 0xFFFFBFFF | 0x4000;
    if (*(int *)&v85[4] < 3)
      goto LABEL_33;
LABEL_32:
    *(_QWORD *)&v85[8] = -1;
LABEL_33:
    if (*(_QWORD *)&v85[56])
    {
      v32 = *(_QWORD *)(*(_QWORD *)&v85[56] + 24);
      *(_QWORD *)&v85[16] = v32;
      *(_QWORD *)&v85[24] = v32;
      if (v32)
        goto LABEL_35;
    }
    else
    {
      v32 = *(_QWORD *)&v85[16];
      if (*(_QWORD *)&v85[16])
      {
LABEL_35:
        v33 = *v86;
        v34 = *(_QWORD *)&v85[24] + *(_QWORD *)v87 * v33;
        *(_QWORD *)&v85[40] = v34;
        if ((int)v33 < 1)
        {
          *(_QWORD *)&v85[32] = v34;
        }
        else
        {
          v35 = (*(_DWORD *)&v85[4] - 1);
          v36 = v32 + *((_QWORD *)v87 + (int)v35) * v86[(int)v35];
          *(_QWORD *)&v85[32] = v36;
          if (*(int *)&v85[4] >= 2)
          {
            do
            {
              v37 = *v24++;
              v38 = v37 - 1;
              v39 = *v27++;
              v36 += v39 * v38;
              --v35;
            }
            while (v35);
            *(_QWORD *)&v85[32] = v36;
          }
        }
LABEL_42:
        memset(&v81[28], 0, 32);
        *(_OWORD *)v81 = 0u;
        v82 = (int *)&v81[4];
        v83 = v84;
        v84[0] = 0;
        v84[1] = 0;
        v80 = 1124007936;
        *(_QWORD *)&v81[12] = v16;
        *(_QWORD *)&v81[20] = v16;
        sub_10025655C((uint64_t)&v80, v72, (uint64_t)v94, a9, 1);
        v40 = v82;
        if (*(int *)v81 < 1)
        {
          v42 = 0;
        }
        else
        {
          v41 = 0;
          while (v82[v41] <= 1)
          {
            if (*(unsigned int *)v81 == ++v41)
            {
              v42 = *(_DWORD *)v81;
              goto LABEL_49;
            }
          }
          v42 = v41;
        }
LABEL_49:
        v43 = (uint64_t *)v83;
        v44 = *(int *)v81 - 1;
        v45 = (char *)v83 + 8 * *(int *)v81 - 8;
        while (v44 > v42)
        {
          v46 = *v45 * v82[v44];
          v47 = *--v45;
          --v44;
          if (v46 < v47)
          {
            v80 &= ~0x4000u;
            if (*(int *)v81 < 3)
              goto LABEL_56;
            goto LABEL_55;
          }
        }
        v80 = v80 & 0xFFFFBFFF | 0x4000;
        if (*(int *)v81 < 3)
          goto LABEL_56;
LABEL_55:
        *(_QWORD *)&v81[4] = -1;
LABEL_56:
        if (*(_QWORD *)&v81[52])
        {
          v48 = *(_QWORD *)(*(_QWORD *)&v81[52] + 24);
          *(_QWORD *)&v81[12] = v48;
          *(_QWORD *)&v81[20] = v48;
          if (v48)
            goto LABEL_58;
        }
        else
        {
          v48 = *(_QWORD *)&v81[12];
          if (*(_QWORD *)&v81[12])
          {
LABEL_58:
            v49 = *v82;
            v50 = *(_QWORD *)&v81[20] + *(_QWORD *)v83 * v49;
            *(_QWORD *)&v81[36] = v50;
            if ((int)v49 < 1)
            {
              *(_QWORD *)&v81[28] = v50;
            }
            else
            {
              v51 = (*(_DWORD *)v81 - 1);
              v52 = v48 + *((_QWORD *)v83 + (int)v51) * v82[(int)v51];
              *(_QWORD *)&v81[28] = v52;
              if (*(int *)v81 >= 2)
              {
                do
                {
                  v53 = *v40++;
                  v54 = v53 - 1;
                  v55 = *v43++;
                  v52 += v55 * v54;
                  --v51;
                }
                while (v51);
                *(_QWORD *)&v81[28] = v52;
              }
            }
            goto LABEL_65;
          }
        }
        *(_QWORD *)&v81[28] = 0;
        *(_QWORD *)&v81[36] = 0;
LABEL_65:
        v93[0] = (uint64_t)v85;
        v93[1] = (uint64_t)&v80;
        v91 = 0;
        v92 = 0;
        v79 = 0;
        memset(v74, 0, sizeof(v74));
        v75 = 0;
        v76 = 0;
        __n = 0;
        v78 = 0;
        sub_10026461C((uint64_t)v74, v93, 0, (uint64_t)&v91, 2);
        if (v76)
        {
          v56 = 0;
          v57 = __n;
          do
          {
            memcpy(v92, v91, v57);
            ++v56;
            sub_100254D78((uint64_t)v74);
          }
          while (v56 < v76);
        }
        if (*(_QWORD *)&v81[52])
        {
          v58 = (unsigned int *)(*(_QWORD *)&v81[52] + 20);
          do
          {
            v59 = __ldaxr(v58);
            v60 = v59 - 1;
          }
          while (__stlxr(v60, v58));
          if (!v60)
          {
            v61 = *(_QWORD *)&v81[52];
            if (*(_QWORD *)&v81[52])
            {
              *(_QWORD *)&v81[52] = 0;
              v62 = *(_QWORD *)(v61 + 8);
              if (!v62)
              {
                v62 = *(_QWORD *)&v81[44];
                if (!*(_QWORD *)&v81[44])
                  v62 = sub_100255D20();
              }
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 48))(v62, v61);
            }
          }
        }
        *(_QWORD *)&v81[52] = 0;
        memset(&v81[12], 0, 32);
        if (*(int *)v81 >= 1)
        {
          v63 = 0;
          v64 = v82;
          do
            v64[v63++] = 0;
          while (v63 < *(int *)v81);
        }
        if (v83 != v84)
          j__free(v83);
        if (*(_QWORD *)&v85[56])
        {
          v65 = (unsigned int *)(*(_QWORD *)&v85[56] + 20);
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            v68 = *(_QWORD *)&v85[56];
            if (*(_QWORD *)&v85[56])
            {
              *(_QWORD *)&v85[56] = 0;
              v69 = *(_QWORD *)(v68 + 8);
              if (!v69)
              {
                v69 = *(_QWORD *)&v85[48];
                if (!*(_QWORD *)&v85[48])
                  v69 = sub_100255D20();
              }
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 48))(v69, v68);
            }
          }
        }
        *(_QWORD *)&v85[56] = 0;
        memset(&v85[16], 0, 32);
        if (*(int *)&v85[4] >= 1)
        {
          v70 = 0;
          v71 = v86;
          do
            v71[v70++] = 0;
          while (v70 < *(int *)&v85[4]);
        }
        if (v87 != v88)
          j__free(v87);
        goto LABEL_96;
      }
    }
    *(_QWORD *)&v85[32] = 0;
    *(_QWORD *)&v85[40] = 0;
    goto LABEL_42;
  }
  v17 = a4;
  v18 = 0;
  v19 = a4 - 2;
  v20 = v17;
  while (1)
  {
    v22 = *(_QWORD *)(a5 + 8 * v18);
    if (v22 >> 31)
    {
      *(_QWORD *)v85 = 0;
      *(_QWORD *)&v85[8] = 0;
      qmemcpy((void *)sub_10029430C(v85, 27), "sz[i] <= (size_t)2147483647", 27);
      sub_100294B74(-215, (uint64_t *)v85, "copy", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 141);
    }
    if (!v22)
      break;
    if (a6)
    {
      if (v18 <= v19)
        v23 = *(_QWORD *)(a7 + 8 * v18);
      else
        v23 = 1;
      v15 += v23 * *(_QWORD *)(a6 + 8 * v18);
    }
    if (a8)
    {
      if (v18 <= v19)
        v21 = *(_QWORD *)(a9 + 8 * v18);
      else
        v21 = 1;
      v16 += v21 * *(_QWORD *)(a8 + 8 * v18);
    }
    v94[v18++] = v22;
    if (v20 == v18)
      goto LABEL_19;
  }
LABEL_96:
  if (v90)
    sub_1002989D0(v89);
}

void sub_100255C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_100008C88(exception_object);
}

uint64_t *sub_100255CBC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100497CD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_100497CD8))
    return &qword_100497CD0;
  qword_100497CD0 = (uint64_t)off_10044E488;
  __cxa_guard_release(&qword_100497CD8);
  return &qword_100497CD0;
}

uint64_t sub_100255D20()
{
  pthread_mutex_t **v0;

  if (!qword_100497C88)
  {
    v0 = (pthread_mutex_t **)sub_100294378();
    sub_100295438(v0);
    if (!qword_100497C88)
      qword_100497C88 = sub_100255D88();
    sub_100295440(v0);
  }
  return qword_100497C88;
}

void sub_100255D6C(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  sub_100295440(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100255D88()
{
  pthread_mutex_t **v0;

  if (!qword_100497C90)
  {
    v0 = (pthread_mutex_t **)sub_100294378();
    sub_100295438(v0);
    if (!qword_100497C90)
      operator new();
    sub_100295440(v0);
  }
  return qword_100497C90;
}

void sub_100255DF4(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  sub_100295440(v1);
  _Unwind_Resume(a1);
}

int *sub_100255E10(int *result, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  v4 = result[2];
  result[2] = a2[2];
  a2[2] = v4;
  v5 = result[3];
  result[3] = a2[3];
  a2[3] = v5;
  v6 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)result + 3);
  *((_QWORD *)result + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)result + 4);
  *((_QWORD *)result + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)result + 5);
  *((_QWORD *)result + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)result + 6);
  *((_QWORD *)result + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = *((_QWORD *)result + 7);
  *((_QWORD *)result + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)result + 8);
  *((_QWORD *)result + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = (int *)*((_QWORD *)result + 9);
  *((_QWORD *)result + 9) = *((_QWORD *)a2 + 9);
  v14 = result + 20;
  v15 = *((_QWORD *)result + 10);
  *((_QWORD *)a2 + 9) = v13;
  *((_QWORD *)result + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v15;
  v16 = *((_QWORD *)result + 11);
  *((_QWORD *)result + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v16;
  if (*((int **)result + 9) != a2 + 20)
  {
    if (v13 != v14)
      return result;
LABEL_5:
    *((_QWORD *)a2 + 8) = a2 + 2;
    *((_QWORD *)a2 + 9) = a2 + 20;
    return result;
  }
  *((_QWORD *)result + 8) = result + 2;
  *((_QWORD *)result + 9) = v14;
  if (*((int **)a2 + 9) == v14)
    goto LABEL_5;
  return result;
}

char *sub_100255F30(char *result, int a2, uint64_t *__src, __int16 a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t __dst[16];

  v4 = __src;
  v6 = (uint64_t)result;
  if (a2 > 0x20 || !__src)
  {
    __dst[0] = 0;
    __dst[1] = 0;
    qmemcpy((void *)sub_10029430C(__dst, 27), "0 <= d && d <= 32 && _sizes", 27);
    sub_100294B74(-215, __dst, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 390);
  }
  v7 = a4 & 0xFFF;
  if (!*((_QWORD *)result + 2))
    goto LABEL_25;
  v8 = *((_DWORD *)result + 1);
  if (v8 == a2)
  {
    if ((_DWORD)v7 != (*(_DWORD *)result & 0xFFF))
      goto LABEL_25;
    if (a2 == 2)
    {
      if (*((_DWORD *)result + 2) == *(_DWORD *)__src && *((_DWORD *)result + 3) == *((_DWORD *)__src + 1))
        return result;
    }
    else if (a2 < 1)
    {
      LODWORD(v10) = 0;
      goto LABEL_22;
    }
  }
  else
  {
    if (a2 != 1 || v8 >= 3)
      goto LABEL_25;
    if ((_DWORD)v7 != (*(_DWORD *)result & 0xFFF))
    {
      v9 = result + 64;
      if (*((uint64_t **)result + 8) != __src)
        goto LABEL_26;
LABEL_29:
      result = (char *)memcpy(__dst, __src, 4 * a2);
      goto LABEL_30;
    }
  }
  v10 = 0;
  while (*(_DWORD *)(*((_QWORD *)result + 8) + 4 * v10) == *((_DWORD *)__src + v10))
  {
    if (a2 == ++v10)
      goto LABEL_23;
  }
LABEL_22:
  if ((_DWORD)v10 == a2)
  {
LABEL_23:
    if (a2 > 1 || *(_DWORD *)(*((_QWORD *)result + 8) + 4) == 1)
      return result;
  }
LABEL_25:
  v9 = result + 64;
  if (*((uint64_t **)result + 8) != __src)
  {
LABEL_26:
    v11 = *((_QWORD *)result + 7);
    if (!v11)
      goto LABEL_39;
LABEL_31:
    v12 = (unsigned int *)(v11 + 20);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      v15 = *(_QWORD *)(v6 + 56);
      if (v15)
      {
        *(_QWORD *)(v6 + 56) = 0;
        v16 = *(_QWORD *)(v15 + 8);
        if (!v16)
        {
          v16 = *(_QWORD *)(v6 + 48);
          if (!v16)
            v16 = sub_100255D20();
        }
        result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v16, v15);
      }
    }
    goto LABEL_39;
  }
  if (a2 >= 1)
    goto LABEL_29;
LABEL_30:
  v4 = __dst;
  v11 = *(_QWORD *)(v6 + 56);
  if (v11)
    goto LABEL_31;
LABEL_39:
  *(_QWORD *)(v6 + 56) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  if (*(int *)(v6 + 4) >= 1)
  {
    v17 = 0;
    v18 = *v9;
    do
      *(_DWORD *)(v18 + 4 * v17++) = 0;
    while (v17 < *(int *)(v6 + 4));
  }
  if (a2)
  {
    *(_DWORD *)v6 = v7 | 0x42FF0000;
    sub_10026B7B4(v6, a2, (uint64_t)v4, 1);
    v19 = *(unsigned int *)(v6 + 4);
    if ((int)v19 >= 3)
    {
      v21 = (int *)(*v9 + 4);
      v22 = 1;
      v23 = v19 & 0xFFFFFFFE;
      v24 = 1;
      do
      {
        v22 *= *(v21 - 1);
        v24 *= *v21;
        v21 += 2;
        v23 -= 2;
      }
      while (v23);
      v20 = v24 * v22;
      v25 = v19 - (v19 & 0xFFFFFFFE);
      if (v25)
      {
        v26 = (int *)(*v9 + ((4 * v19) & 0x3FFFFFFF8));
        do
        {
          v27 = *v26++;
          v20 *= v27;
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      v20 = *(int *)(v6 + 12) * (uint64_t)*(int *)(v6 + 8);
    }
    if (v20)
    {
      v28 = *(_QWORD *)(v6 + 48);
      v29 = sub_100255D20();
      if (v28)
        v30 = v28;
      else
        v30 = v29;
      v31 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v30 + 16))(v30, *(unsigned int *)(v6 + 4), *(_QWORD *)(v6 + 64), v7, 0, *(_QWORD *)(v6 + 72), 0, 0);
      *(_QWORD *)(v6 + 56) = v31;
      if (!v31)
      {
        v36 = 0;
        v37 = 0;
        v32 = sub_10029430C(&v36, 6);
        *(_WORD *)(v32 + 4) = 12320;
        *(_DWORD *)v32 = 1025581173;
        sub_100294B74(-215, &v36, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 430);
      }
      if (*(_QWORD *)(*(_QWORD *)(v6 + 72) + 8 * *(int *)(v6 + 4) - 8) != (((*(_DWORD *)v6 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_BYTE *)v6 & 7))) & 3))
      {
        v36 = 0;
        v37 = 0;
        qmemcpy((void *)sub_10029430C(&v36, 146), "step[dims-1] == (size_t)(((((flags) & ((512 - 1) << 3)) >> 3) + 1) << ((((sizeof(size_t)/4+1)*16384|0x3a50) >> ((flags) & ((1 << 3) - 1))*2) & 3))", 146);
        sub_100294B74(-215, &v36, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 438);
      }
    }
    v33 = *(_QWORD *)(v6 + 56);
    if (v33)
    {
      v34 = (unsigned int *)(v33 + 20);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 + 1, v34));
    }
    return (char *)sub_100256A04(v6);
  }
  return result;
}

void sub_100256398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002564BC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = result;
  v2 = *(_QWORD *)(result + 56);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 20);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      v6 = *(_QWORD *)(result + 56);
      if (v6)
      {
        *(_QWORD *)(result + 56) = 0;
        v7 = *(_QWORD *)(v6 + 8);
        if (!v7)
        {
          v7 = *(_QWORD *)(v1 + 48);
          if (!v7)
            v7 = sub_100255D20();
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, v6);
      }
    }
  }
  *(_QWORD *)(v1 + 56) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  if (*(int *)(v1 + 4) >= 1)
  {
    v8 = 0;
    v9 = *(_QWORD *)(v1 + 64);
    do
      *(_DWORD *)(v9 + 4 * v8++) = 0;
    while (v8 < *(int *)(v1 + 4));
  }
  return result;
}

void sub_10025655C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a2 >= 0x21)
  {
    v32 = 0;
    v33 = 0;
    qmemcpy((void *)sub_10029430C(&v32, 25), "0 <= _dims && _dims <= 32", 25);
    sub_100294B74(-215, &v32, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 284);
  }
  if (*(_DWORD *)(a1 + 4) != a2)
  {
    v10 = *(void **)(a1 + 72);
    if (v10 != (void *)(a1 + 80))
    {
      j__free(v10);
      *(_QWORD *)(a1 + 64) = a1 + 8;
      *(_QWORD *)(a1 + 72) = a1 + 80;
    }
    if (a2 >= 3)
    {
      v11 = 8 * a2;
      v12 = (char *)sub_1001D444C(v11 + 4 * (a2 + 1));
      *(_QWORD *)(a1 + 72) = v12;
      *(_DWORD *)&v12[v11] = a2;
      *(_QWORD *)(a1 + 64) = &v12[v11 + 4];
      *(_QWORD *)(a1 + 8) = -1;
    }
  }
  *(_DWORD *)(a1 + 4) = a2;
  if (a3)
  {
    v13 = (a2 - 1);
    if (a2 >= 1)
    {
      v14 = *(_DWORD *)a1 & 7;
      v30 = a2;
      v31 = (((*(_DWORD *)a1 >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * v14)) & 3);
      if (a4)
      {
        v15 = *(_DWORD *)(a3 + 4 * v13);
        if (v15 < 0)
        {
          v32 = 0;
          v33 = 0;
          v16 = sub_10029430C(&v32, 6);
          *(_DWORD *)v16 = 1027481715;
          *(_WORD *)(v16 + 4) = 12320;
          sub_100294B74(-215, &v32, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 310);
        }
        v17 = (0x88442211uLL >> (4 * v14)) & 0xF;
        *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v13) = v15;
        if (*(_QWORD *)(a4 + 8 * v13) % v17)
        {
          v32 = 0;
          v33 = 0;
          qmemcpy((void *)sub_10029430C(&v32, 31), "Step must be a multiple of esz1", 31);
          sub_100294B74(-13, &v32, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 317);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v13) = v31;
        if (a2 != 1)
        {
          v18 = a4 - 8;
          v19 = (a2 - 1);
          do
          {
            v21 = *(_DWORD *)(a3 - 4 + 4 * v19);
            if (v21 < 0)
            {
              v32 = 0;
              v33 = 0;
              v22 = sub_10029430C(&v32, 6);
              *(_DWORD *)v22 = 1027481715;
              *(_WORD *)(v22 + 4) = 12320;
              sub_100294B74(-215, &v32, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 310);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v19 - 4) = v21;
            if (*(_QWORD *)(v18 + 8 * v19) % v17)
            {
              v32 = 0;
              v33 = 0;
              qmemcpy((void *)sub_10029430C(&v32, 31), "Step must be a multiple of esz1", 31);
              sub_100294B74(-13, &v32, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 317);
            }
            v23 = v31;
            if (v19 <= v13)
              v23 = *(_QWORD *)(v18 + 8 * v19);
            v20 = *(_QWORD *)(a1 + 72) + 8 * v19--;
            *(_QWORD *)(v20 - 8) = v23;
          }
          while (v19 + 1 > 1);
        }
      }
      else if ((a5 & 1) != 0)
      {
        v24 = (((*(_DWORD *)a1 >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * v14)) & 3);
        do
        {
          v26 = *(_DWORD *)(a3 + 4 * v13);
          if (v26 < 0)
          {
            v32 = 0;
            v33 = 0;
            v27 = sub_10029430C(&v32, 6);
            *(_DWORD *)v27 = 1027481715;
            *(_WORD *)(v27 + 4) = 12320;
            sub_100294B74(-215, &v32, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 310);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v13) = v26;
          *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v13) = v24;
          v24 *= v26;
          v25 = v13-- <= 0;
        }
        while (!v25);
      }
      else
      {
        do
        {
          v28 = *(_DWORD *)(a3 + 4 * v13);
          if (v28 < 0)
          {
            v32 = 0;
            v33 = 0;
            v29 = sub_10029430C(&v32, 6);
            *(_DWORD *)v29 = 1027481715;
            *(_WORD *)(v29 + 4) = 12320;
            sub_100294B74(-215, &v32, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 310);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v13) = v28;
          v25 = v13-- <= 0;
        }
        while (!v25);
      }
      if (v30 == 1)
      {
        *(_DWORD *)(a1 + 4) = 2;
        *(_DWORD *)(a1 + 12) = 1;
        *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) = v31;
      }
    }
  }
}

void sub_10025699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100256A04(uint64_t result)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(unsigned int *)(result + 4);
  v2 = *(int **)(result + 64);
  if ((int)v1 < 1)
  {
    v4 = 0;
  }
  else
  {
    v3 = 0;
    while (v2[v3] <= 1)
    {
      if (v1 == ++v3)
      {
        v4 = *(_DWORD *)(result + 4);
        goto LABEL_8;
      }
    }
    v4 = v3;
  }
LABEL_8:
  v5 = *(uint64_t **)(result + 72);
  v6 = (int)v1 - 1;
  v7 = &v5[(int)v1 - 1];
  while (v6 > v4)
  {
    v8 = *v7 * v2[v6];
    v9 = *--v7;
    --v6;
    if (v8 < v9)
    {
      *(_DWORD *)result &= ~0x4000u;
      if ((int)v1 < 3)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFFBFFF | 0x4000;
  if ((int)v1 < 3)
    goto LABEL_15;
LABEL_14:
  *(_QWORD *)(result + 8) = -1;
LABEL_15:
  v10 = *(_QWORD *)(result + 56);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(result + 16) = v11;
    *(_QWORD *)(result + 24) = v11;
    if (v11)
      goto LABEL_17;
LABEL_22:
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    return result;
  }
  v11 = *(_QWORD *)(result + 16);
  if (!v11)
    goto LABEL_22;
LABEL_17:
  v12 = *v2;
  v13 = *(_QWORD *)(result + 24) + *v5 * v12;
  *(_QWORD *)(result + 40) = v13;
  if ((int)v12 < 1)
  {
    *(_QWORD *)(result + 32) = v13;
  }
  else
  {
    v14 = (v1 - 1);
    v15 = v11 + v5[(int)v14] * v2[(int)v14];
    *(_QWORD *)(result + 32) = v15;
    if ((int)v1 >= 2)
    {
      do
      {
        v16 = *v2++;
        v17 = v16 - 1;
        v18 = *v5++;
        v15 += v18 * v17;
        --v14;
      }
      while (v14);
      *(_QWORD *)(result + 32) = v15;
    }
  }
  return result;
}

void sub_100256B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[2];

  v4 = *(unsigned int *)(a2 + 4);
  if (v4 >= 0x21)
  {
    v12[0] = 0;
    v12[1] = 0;
    qmemcpy((void *)sub_10029430C(v12, 25), "0 <= _dims && _dims <= 32", 25);
    sub_100294B74(-215, v12, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 284);
  }
  if (*(_DWORD *)(a1 + 4) == (_DWORD)v4)
    goto LABEL_8;
  v5 = *(void **)(a1 + 72);
  if (v5 != (void *)(a1 + 80))
  {
    j__free(v5);
    *(_QWORD *)(a1 + 64) = a1 + 8;
    *(_QWORD *)(a1 + 72) = a1 + 80;
  }
  if ((int)v4 < 3)
  {
LABEL_8:
    *(_DWORD *)(a1 + 4) = v4;
    if ((int)v4 < 1)
      return;
  }
  else
  {
    v6 = sub_1001D444C(12 * v4 + 4);
    *(_QWORD *)(a1 + 72) = v6;
    v6[2 * v4] = v4;
    *(_QWORD *)(a1 + 64) = &v6[2 * v4 + 1];
    *(_QWORD *)(a1 + 8) = -1;
    *(_DWORD *)(a1 + 4) = v4;
  }
  v7 = 0;
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  do
  {
    *(_DWORD *)(v10 + 4 * v7) = *(_DWORD *)(v8 + 4 * v7);
    *(_QWORD *)(v11 + 8 * v7) = *(_QWORD *)(v9 + 8 * v7);
    ++v7;
  }
  while (v7 < *(int *)(a1 + 4));
}

void sub_100256C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100256C90(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 56);
  if (v1)
  {
    v2 = result;
    *(_QWORD *)(result + 56) = 0;
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, v1);
    v3 = *(_QWORD *)(v2 + 48);
    if (v3)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, v1);
    }
    else
    {
      v4 = sub_100255D20();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v1);
    }
  }
  return result;
}

uint64_t sub_100256CFC(uint64_t a1, _DWORD *a2, int *a3, uint64_t *a4)
{
  int *v8;
  _DWORD *v9;
  void *v10;
  int v11;
  uint64_t v12;
  _OWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  _QWORD *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v57;
  _BYTE v58[64];
  _BYTE *v59;
  void *v60;
  _BYTE v61[24];
  _QWORD *v62;
  uint64_t v63;
  _QWORD v64[137];

  *(_DWORD *)a1 = 1124007936;
  *(_OWORD *)(a1 + 4) = 0u;
  v8 = (int *)(a1 + 4);
  v9 = (_DWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v10 = (void *)(a1 + 80);
  *(_OWORD *)(a1 + 20) = 0u;
  *(_QWORD *)(a1 + 64) = a1 + 8;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 88) = 0;
  v11 = a2[1];
  if (v11 < 2)
  {
    v62 = 0;
    v63 = 0;
    v12 = sub_10029430C(&v62, 11);
    *(_DWORD *)(v12 + 7) = 840973630;
    *(_QWORD *)v12 = *(_QWORD *)"m.dims >= 2";
    sub_100294B74(-215, (uint64_t *)&v62, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 474);
  }
  v13 = (_OWORD *)(a1 + 16);
  if (v11 > 2)
  {
    v57 = (_OWORD *)(a1 + 16);
    bzero(v64, 0x440uLL);
    v62 = v64;
    v63 = v11;
    if (v11 > 0x88)
      operator new[]();
    v19 = *a4;
    v64[0] = *(_QWORD *)a3;
    v64[1] = v19;
    v20 = 2;
    do
      v62[v20++] = 0x7FFFFFFF80000000;
    while (v20 < (int)a2[1]);
    sub_10025754C((uint64_t)v58, (uint64_t)a2, (uint64_t)v62);
    v21 = *(_QWORD *)(a1 + 56);
    if (v58 == (_BYTE *)a1)
    {
      if (v21)
      {
        v34 = (unsigned int *)(v21 + 20);
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          v37 = *(_QWORD *)&v58[56];
          if (*(_QWORD *)&v58[56])
          {
            *(_QWORD *)&v58[56] = 0;
            v38 = *(_QWORD *)(v37 + 8);
            if (!v38)
            {
              v38 = *(_QWORD *)&v58[48];
              if (!*(_QWORD *)&v58[48])
                v38 = sub_100255D20();
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 48))(v38, v37);
          }
        }
      }
      goto LABEL_57;
    }
    if (v21)
    {
      v22 = (unsigned int *)(v21 + 20);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(_QWORD *)(a1 + 56);
        if (v25)
        {
          *(_QWORD *)(a1 + 56) = 0;
          v26 = *(_QWORD *)(v25 + 8);
          if (!v26)
          {
            v26 = *(_QWORD *)(a1 + 48);
            if (!v26)
              v26 = sub_100255D20();
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 48))(v26, v25);
        }
      }
    }
    *(_QWORD *)(a1 + 56) = 0;
    *v57 = 0u;
    v57[1] = 0u;
    if (*(int *)(a1 + 4) >= 1)
    {
      v27 = 0;
      v28 = *(_QWORD *)(a1 + 64);
      do
        *(_DWORD *)(v28 + 4 * v27++) = 0;
      while (v27 < *v8);
    }
    v29 = *(_DWORD *)&v58[4];
    v30 = *(_OWORD *)&v58[16];
    *(_OWORD *)a1 = *(_OWORD *)v58;
    *(_OWORD *)(a1 + 16) = v30;
    v31 = *(_OWORD *)&v58[48];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v58[32];
    *(_OWORD *)(a1 + 48) = v31;
    v32 = *(void **)(a1 + 72);
    if (v32 == v10)
    {
      v33 = v60;
      if (v29 <= 2)
        goto LABEL_38;
    }
    else
    {
      j__free(v32);
      *(_QWORD *)(a1 + 64) = v9;
      *(_QWORD *)(a1 + 72) = v10;
      v33 = v60;
      if (*(int *)&v58[4] <= 2)
      {
LABEL_38:
        *(_QWORD *)(a1 + 80) = *v33;
        *(_QWORD *)(a1 + 88) = v33[1];
LABEL_56:
        *(_DWORD *)v58 = 1124007936;
        memset(&v58[4], 0, 60);
LABEL_57:
        *(_QWORD *)&v58[56] = 0;
        memset(&v58[16], 0, 32);
        if (*(int *)&v58[4] >= 1)
        {
          v44 = 0;
          v45 = v59;
          do
            *(_DWORD *)&v45[4 * v44++] = 0;
          while (v44 < *(int *)&v58[4]);
        }
        if (v60 != v61)
          j__free(v60);
        if (v62 != v64 && v62 != 0)
          operator delete[]();
        return a1;
      }
    }
    *(_QWORD *)(a1 + 64) = v59;
    *(_QWORD *)(a1 + 72) = v33;
    v59 = &v58[8];
    v60 = v61;
    goto LABEL_56;
  }
  sub_1002573F8(a1, (uint64_t)a2);
  v14 = *a3;
  v15 = a3[1];
  if ((*a3 != 0x80000000 || v15 != 0x7FFFFFFF) && (v14 || v15 != *v9))
  {
    if (v14 < 0 || v14 > v15 || v15 > a2[2])
    {
      v62 = 0;
      v63 = 0;
      qmemcpy((void *)sub_10029430C(&v62, 83), "0 <= _rowRange.start && _rowRange.start <= _rowRange.end && _rowRange.end <= m.rows", 83);
      sub_100294B74(-215, (uint64_t *)&v62, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 492);
    }
    *(_DWORD *)(a1 + 8) = v15 - v14;
    *(_QWORD *)(a1 + 16) += *(_QWORD *)(a1 + 80) * v14;
    *(_DWORD *)a1 |= 0x8000u;
  }
  v16 = *(_DWORD *)a4;
  v17 = *((_DWORD *)a4 + 1);
  if (*(_DWORD *)a4 == 0x80000000 && v17 == 0x7FFFFFFF || !v16 && v17 == *(_DWORD *)(a1 + 12))
  {
    v18 = *v9 < 1;
    if (*v9 == 1)
    {
LABEL_20:
      *(_DWORD *)a1 |= 0x4000u;
      goto LABEL_73;
    }
  }
  else
  {
    if (v16 < 0 || v16 > v17 || v17 > a2[3])
    {
      v62 = 0;
      v63 = 0;
      qmemcpy((void *)sub_10029430C(&v62, 83), "0 <= _colRange.start && _colRange.start <= _colRange.end && _colRange.end <= m.cols", 83);
      sub_100294B74(-215, (uint64_t *)&v62, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 501);
    }
    v39 = v17 - v16;
    *(_DWORD *)(a1 + 12) = v39;
    v40 = *(_DWORD *)(a1 + 4);
    v41 = __OFSUB__(v40, 1);
    v42 = v40 - 1;
    if (v42 < 0 != v41)
      v43 = 0;
    else
      v43 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v42);
    *(_QWORD *)(a1 + 16) += v43 * v16;
    if (v39 >= a2[3])
      v47 = -32769;
    else
      v47 = -49153;
    *(_DWORD *)a1 = v47 & *(_DWORD *)a1 | 0x8000;
    v18 = *v9 < 1;
    if (*v9 == 1)
      goto LABEL_20;
  }
  if (!v18)
  {
LABEL_73:
    if (*(int *)(a1 + 12) > 0)
      return a1;
  }
  v48 = *(_QWORD *)(a1 + 56);
  if (v48)
  {
    v49 = (unsigned int *)(v48 + 20);
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      v52 = *(_QWORD *)(a1 + 56);
      if (v52)
      {
        *(_QWORD *)(a1 + 56) = 0;
        v53 = *(_QWORD *)(v52 + 8);
        if (!v53)
        {
          v53 = *(_QWORD *)(a1 + 48);
          if (!v53)
            v53 = sub_100255D20();
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 48))(v53, v52);
      }
    }
  }
  *(_QWORD *)(a1 + 56) = 0;
  *v13 = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) >= 1)
  {
    v54 = 0;
    v55 = *(_QWORD *)(a1 + 64);
    do
      *(_DWORD *)(v55 + 4 * v54++) = 0;
    while (v54 < *v8);
  }
  *(_QWORD *)v9 = 0;
  return a1;
}

void sub_100257340(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  sub_10029434C((uint64_t *)va);
  __cxa_begin_catch(a1);
  sub_1002564BC(v16);
  __cxa_rethrow();
}

void sub_100257388(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1002573F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 56);
    if (v4)
    {
      v5 = (unsigned int *)(v4 + 20);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    v7 = *(_QWORD *)(a1 + 56);
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 20);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD *)(a1 + 56);
        if (v11)
        {
          *(_QWORD *)(a1 + 56) = 0;
          v12 = *(_QWORD *)(v11 + 8);
          if (!v12)
          {
            v12 = *(_QWORD *)(a1 + 48);
            if (!v12)
              v12 = sub_100255D20();
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, v11);
        }
      }
    }
    *(_QWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    if (*(int *)(a1 + 4) <= 0)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      v16 = *(_DWORD *)(a2 + 4);
      if (v16 <= 2)
      {
LABEL_19:
        *(_DWORD *)(a1 + 4) = v16;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        v17 = *(_QWORD **)(a2 + 72);
        v18 = *(_QWORD **)(a1 + 72);
        *v18 = *v17;
        v18[1] = v17[1];
LABEL_22:
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        return a1;
      }
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 64);
      do
      {
        *(_DWORD *)(v14 + 4 * v13++) = 0;
        v15 = *(int *)(a1 + 4);
      }
      while (v13 < v15);
      *(_DWORD *)a1 = *(_DWORD *)a2;
      if ((int)v15 <= 2)
      {
        v16 = *(_DWORD *)(a2 + 4);
        if (v16 <= 2)
          goto LABEL_19;
      }
    }
    sub_100256B48(a1, a2);
    goto LABEL_22;
  }
  return a1;
}

uint64_t sub_10025754C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  int v8;
  int v9;
  BOOL v10;
  uint64_t j;
  uint64_t v12;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t v29;

  *(_DWORD *)a1 = 1124007936;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 8;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 88) = 0;
  v5 = *(unsigned int *)(a2 + 4);
  if (!a3)
  {
    v28 = 0;
    v29 = 0;
    v6 = sub_10029430C(&v28, 6);
    *(_DWORD *)v6 = 1735287154;
    *(_WORD *)(v6 + 4) = 29541;
    sub_100294B74(-215, &v28, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 582);
  }
  if ((int)v5 <= 0)
  {
    sub_1002573F8(a1, a2);
  }
  else
  {
    for (i = 0; i != v5; ++i)
    {
      v9 = *(_DWORD *)(a3 + 8 * i);
      v8 = *(_DWORD *)(a3 + 8 * i + 4);
      v10 = v9 == 0x80000000 && v8 == 0x7FFFFFFF;
      if (!v10 && (v9 < 0 || v9 >= v8 || *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4 * i) < v8))
      {
        v28 = 0;
        v29 = 0;
        qmemcpy((void *)sub_10029430C(&v28, 76), "r == Range::all() || (0 <= r.start && r.start < r.end && r.end <= m.size[i])", 76);
        sub_100294B74(-215, &v28, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 586);
      }
    }
    sub_1002573F8(a1, a2);
    for (j = 0; j != v5; ++j)
    {
      v12 = *(_QWORD *)(a3 + 8 * j);
      if ((_DWORD)v12 != 0x80000000 || HIDWORD(v12) != 0x7FFFFFFF)
      {
        v14 = *(_QWORD *)(a1 + 64);
        if ((_DWORD)v12)
          v15 = 0;
        else
          v15 = *(_DWORD *)(v14 + 4 * j) == HIDWORD(v12);
        if (!v15)
        {
          *(_DWORD *)(v14 + 4 * j) = HIDWORD(v12) - v12;
          *(_QWORD *)(a1 + 16) += *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * j) * (int)v12;
          *(_DWORD *)a1 |= 0x8000u;
        }
      }
    }
  }
  v16 = *(unsigned int *)(a1 + 4);
  v17 = (int)v16;
  v18 = *(_QWORD *)(a1 + 64);
  if ((int)v16 < 1)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    v19 = 0;
    while (*(int *)(v18 + 4 * v19) <= 1)
    {
      if (v16 == ++v19)
      {
        LODWORD(v19) = *(_DWORD *)(a1 + 4);
        break;
      }
    }
  }
  v20 = v18 - 4;
  while (1)
  {
    v21 = v17 - 1;
    if (v17 - 1 <= (int)v19)
      break;
    v22 = *(int *)(v20 + 4 * v17);
    v23 = *(_QWORD *)(a1 + 72) + 8 * v17;
    v24 = *(_QWORD *)(v23 - 16);
    v25 = *(_QWORD *)(v23 - 8) * v22;
    v17 = v21;
    if (v25 < v24)
    {
      v26 = 0;
      goto LABEL_37;
    }
  }
  v26 = 0x4000;
LABEL_37:
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFFBFFF | v26;
  return a1;
}

void sub_1002577F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_100257828(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int *v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23[2];

  v6 = *(_DWORD *)(a1 + 4);
  if (v6 >= 3)
  {
    v23[0] = 0;
    v23[1] = 0;
    v7 = sub_10029430C(v23, 9);
    *(_BYTE *)(v7 + 8) = 50;
    *(_QWORD *)v7 = *(_QWORD *)"dims <= 2";
    sub_100294B74(-215, v23, "diag", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 750);
  }
  *(_DWORD *)a3 = *(_DWORD *)a1;
  *(_DWORD *)(a3 + 4) = v6;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1 + 8);
  v8 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 32) = v8;
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a3 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a3 + 56) = v9;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 64) = a3 + 8;
  *(_QWORD *)(a3 + 72) = a3 + 80;
  *(_QWORD *)(a3 + 88) = 0;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 20);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v6 = *(_DWORD *)(a1 + 4);
  }
  if (v6 > 2)
  {
    *(_DWORD *)(a3 + 4) = 0;
    sub_100256B48(a3, a1);
    v19 = *(_DWORD *)(a1 + 4);
    v14 = __OFSUB__(v19, 1);
    v15 = v19 - 1;
    if (v15 < 0 == v14)
      goto LABEL_15;
  }
  else
  {
    v12 = *(_QWORD **)(a1 + 72);
    v13 = *(_QWORD **)(a3 + 72);
    *v13 = *v12;
    v13[1] = v12[1];
    v14 = __OFSUB__(v6, 1);
    v15 = v6 - 1;
    if (v15 < 0 == v14)
    {
LABEL_15:
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v15);
      if ((a2 & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_11;
    }
  }
  v16 = 0;
  if ((a2 & 0x80000000) == 0)
  {
LABEL_16:
    v17 = *(_DWORD *)(a1 + 12) - a2;
    if (*(_DWORD *)(a1 + 8) < v17)
      v17 = *(_DWORD *)(a1 + 8);
    v18 = *(_QWORD *)(a3 + 16) + v16 * a2;
    goto LABEL_19;
  }
LABEL_11:
  v17 = *(_DWORD *)(a1 + 8) + a2;
  if (*(_DWORD *)(a1 + 12) < v17)
    v17 = *(_DWORD *)(a1 + 12);
  v18 = *(_QWORD *)(a3 + 16) - **(_QWORD **)(a1 + 72) * (int)a2;
LABEL_19:
  *(_QWORD *)(a3 + 16) = v18;
  *(_DWORD *)(a3 + 8) = v17;
  v20 = *(int **)(a3 + 64);
  *v20 = v17;
  *(_DWORD *)(a3 + 12) = 1;
  v20[1] = 1;
  if (v17 <= 1)
    v16 = 0;
  **(_QWORD **)(a3 + 72) += v16;
  v21 = *(_DWORD *)a3 & 0xFFFFBFFF | ((*(_DWORD *)(a3 + 8) < 2) << 14);
  *(_DWORD *)a3 = v21;
  v22 = *(_DWORD **)(a1 + 64);
  if (v22[1] != 1 || *v22 != 1)
    *(_DWORD *)a3 = v21 | 0x8000;
}

void sub_100257A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_100257A48(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  int v32[2];
  _BYTE *v33;
  uint64_t v34;
  _BYTE v35[4];
  int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[64];
  _BYTE *v45;
  void *v46;
  _QWORD v47[2];
  uint64_t v48;

  if ((a2 & 0x80000000) != 0)
  {
    *(_OWORD *)v44 = 0uLL;
    *(_OWORD *)sub_10029430C(v44, 16) = *(_OWORD *)"(int)nelems >= 0";
    sub_100294B74(-215, (uint64_t *)v44, "reserve", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 821);
  }
  if ((*(_BYTE *)(a1 + 1) & 0x80) != 0 || *(_QWORD *)(a1 + 16) + **(_QWORD **)(a1 + 72) * a2 > *(_QWORD *)(a1 + 40))
  {
    v4 = *(uint64_t **)(a1 + 64);
    v5 = *(_DWORD *)v4;
    if (*(int *)v4 < a2)
    {
      if ((int)a2 <= 1)
        v6 = 1;
      else
        v6 = a2;
      *(_DWORD *)v4 = v6;
      v7 = *(unsigned int *)(a1 + 4);
      if ((int)v7 >= 3)
      {
        v9 = (int *)v4 + 1;
        v10 = 1;
        v11 = v7 & 0xFFFFFFFE;
        v12 = 1;
        do
        {
          v10 *= *(v9 - 1);
          v12 *= *v9;
          v9 += 2;
          v11 -= 2;
        }
        while (v11);
        v8 = v12 * v10;
        v13 = v7 - (v7 & 0xFFFFFFFE);
        if (v13)
        {
          v14 = (int *)((char *)v4 + ((4 * v7) & 0x3FFFFFFF8));
          do
          {
            v15 = *v14++;
            v8 *= v15;
            --v13;
          }
          while (v13);
        }
      }
      else
      {
        v8 = *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8);
      }
      if ((int)v7 < 1)
      {
        v16 = 0;
      }
      else
      {
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * (v7 - 1)) * v8;
        if (v16 > 0x3F)
        {
LABEL_19:
          v17 = *(_DWORD *)a1 & 0xFFF;
          *(_DWORD *)v44 = 1124007936;
          memset(&v44[4], 0, 60);
          v45 = &v44[8];
          v46 = v47;
          v47[0] = 0;
          v47[1] = 0;
          sub_100255F30(v44, v7, v4, v17);
          **(_DWORD **)(a1 + 64) = v5;
          if (v5 >= 1)
          {
            v32[0] = 0;
            v32[1] = v5;
            v48 = 0x7FFFFFFF80000000;
            sub_100256CFC((uint64_t)v35, v44, v32, &v48);
            v32[0] = 33619968;
            v33 = v35;
            v34 = 0;
            sub_1002181EC(a1, (uint64_t)v32);
            if (v40)
            {
              v18 = (unsigned int *)(v40 + 20);
              do
              {
                v19 = __ldaxr(v18);
                v20 = v19 - 1;
              }
              while (__stlxr(v20, v18));
              if (!v20)
              {
                v21 = v40;
                if (v40)
                {
                  v40 = 0;
                  v22 = *(_QWORD *)(v21 + 8);
                  if (!v22)
                  {
                    v22 = v39;
                    if (!v39)
                      v22 = sub_100255D20();
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 48))(v22, v21);
                }
              }
            }
            v40 = 0;
            v37 = 0u;
            v38 = 0u;
            if (v36 >= 1)
            {
              v23 = 0;
              v24 = v41;
              do
                *(_DWORD *)(v24 + 4 * v23++) = 0;
              while (v23 < v36);
            }
            if (v42 != &v43)
              j__free(v42);
          }
          sub_1002573F8(a1, (uint64_t)v44);
          **(_DWORD **)(a1 + 64) = v5;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 16) + **(_QWORD **)(a1 + 72) * v5;
          if (*(_QWORD *)&v44[56])
          {
            v25 = (unsigned int *)(*(_QWORD *)&v44[56] + 20);
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v28 = *(_QWORD *)&v44[56];
              if (*(_QWORD *)&v44[56])
              {
                *(_QWORD *)&v44[56] = 0;
                v29 = *(_QWORD *)(v28 + 8);
                if (!v29)
                {
                  v29 = *(_QWORD *)&v44[48];
                  if (!*(_QWORD *)&v44[48])
                    v29 = sub_100255D20();
                }
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 48))(v29, v28);
              }
            }
          }
          *(_QWORD *)&v44[56] = 0;
          memset(&v44[16], 0, 32);
          if (*(int *)&v44[4] >= 1)
          {
            v30 = 0;
            v31 = v45;
            do
              *(_DWORD *)&v31[4 * v30++] = 0;
            while (v30 < *(int *)&v44[4]);
          }
          if (v46 != v47)
            j__free(v46);
          return;
        }
      }
      *(_DWORD *)v4 = (v16 + 63) * a2 / v16;
      LODWORD(v7) = *(_DWORD *)(a1 + 4);
      goto LABEL_19;
    }
  }
}

void sub_100257DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_100006BE4((uint64_t)va);
  sub_100006BE4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100257DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_10029434C((uint64_t *)va);
  JUMPOUT(0x100257DE0);
}

void sub_100257E00(uint64_t a1@<X0>, int a2@<W1>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  const float *v43;
  float32x4_t *v44;
  __int128 *v45;
  uint64_t v46;
  const float *v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  uint64_t *v51;
  int *v52;
  _DWORD *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  _QWORD *v60;
  _QWORD *v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  void *v125;
  _QWORD v126[3];
  uint64_t __src;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  void *v134;
  _QWORD v135[22];
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x4x2_t v139;
  float32x4x2_t v140;

  if (!a1)
    goto LABEL_50;
  v8 = *(_DWORD *)a1;
  v9 = *(_DWORD *)a1 & 0xFFFF0000;
  if (v9 != 1111687168)
  {
    if (v9 == 1111621632)
    {
      v10 = *(_DWORD *)(a1 + 36);
      if ((v10 & 0x80000000) == 0)
      {
        v11 = *(unsigned int *)(a1 + 32);
        if ((v11 & 0x80000000) == 0)
        {
          *(_DWORD *)a5 = 1124007936;
          *(_OWORD *)(a5 + 4) = 0u;
          *(_OWORD *)(a5 + 20) = 0u;
          *(_OWORD *)(a5 + 36) = 0u;
          *(_OWORD *)(a5 + 48) = 0u;
          *(_QWORD *)(a5 + 80) = 0;
          *(_QWORD *)(a5 + 64) = a5 + 8;
          *(_QWORD *)(a5 + 72) = a5 + 80;
          *(_QWORD *)(a5 + 88) = 0;
          if ((a2 & 1) != 0)
          {
            *(_QWORD *)(a5 + 16) = 0;
            *(_QWORD *)(a5 + 24) = 0;
            *(_QWORD *)(a5 + 32) = 0;
            sub_10000A364((uint64_t)&__src, v11, v10, v8, *(_QWORD *)(a1 + 24), *(int *)(a1 + 4));
            LODWORD(v136) = 33619968;
            v137 = a5;
            v138 = 0;
            sub_1002181EC((uint64_t)&__src, (uint64_t)&v136);
            if (v132)
            {
              v12 = (unsigned int *)(v132 + 20);
              do
              {
                v13 = __ldaxr(v12);
                v14 = v13 - 1;
              }
              while (__stlxr(v14, v12));
              if (!v14)
              {
                v15 = v132;
                if (v132)
                {
                  v132 = 0;
                  v16 = *(_QWORD *)(v15 + 8);
                  if (!v16)
                  {
                    v16 = v131;
                    if (!v131)
                      v16 = sub_100255D20();
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v16, v15);
                }
              }
            }
            v132 = 0;
            v129 = 0u;
            v130 = 0u;
            if (SHIDWORD(__src) >= 1)
            {
              v17 = 0;
              v18 = v133;
              do
                *((_DWORD *)v18 + v17++) = 0;
              while (v17 < SHIDWORD(__src));
            }
            if (v134 != v135)
              j__free(v134);
          }
          else
          {
            *(_DWORD *)a5 = v8 & 0x4FFF | 0x42FF0000;
            *(_DWORD *)(a5 + 4) = 2;
            *(_DWORD *)(a5 + 8) = v11;
            *(_DWORD *)(a5 + 12) = v10;
            v39 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a5 + 16) = v39;
            *(_QWORD *)(a5 + 24) = v39;
            v40 = (((v8 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v8 & 7))) & 3);
            v41 = v10 * (unint64_t)v40;
            if (*(_DWORD *)(a1 + 4))
              v41 = *(int *)(a1 + 4);
            v42 = v39 + v41 * v11;
            *(_QWORD *)(a5 + 32) = v42 - v41 + v10 * (unint64_t)v40;
            *(_QWORD *)(a5 + 40) = v42;
            *(_QWORD *)(a5 + 80) = v41;
            *(_QWORD *)(a5 + 88) = v40;
          }
          return;
        }
      }
LABEL_49:
      __src = 0;
      v128 = 0;
      v38 = sub_10029430C(&__src, 18);
      *(_WORD *)(v38 + 16) = 25968;
      *(_OWORD *)v38 = *(_OWORD *)"Unknown array type";
      sub_100294B74(-5, &__src, "cvarrToMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 985);
    }
    if (v8 == 144)
    {
      if (!*(_QWORD *)(a1 + 88))
        goto LABEL_49;
      if (!a3)
      {
        v68 = *(int **)(a1 + 48);
        if (v68)
        {
          if (*v68 >= 1)
          {
            sub_1001F37D4(&__src, "COI is not supported by the function");
            sub_100294B74(-24, &__src, "cvarrToMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 961);
          }
        }
      }
      *(_OWORD *)(a5 + 40) = 0u;
      *(_OWORD *)(a5 + 24) = 0u;
      *(_OWORD *)(a5 + 8) = 0u;
      *(_QWORD *)(a5 + 56) = 0;
      *(_QWORD *)(a5 + 64) = a5 + 8;
      v23 = *(int *)(a1 + 96);
      *(_QWORD *)(a5 + 80) = v23;
      v24 = (uint64_t *)(a5 + 80);
      *(_QWORD *)(a5 + 72) = a5 + 80;
      *(_QWORD *)(a5 + 88) = 0;
      *(_QWORD *)a5 = 0x242FF0000;
      v25 = (0x43160520u >> (((*(_DWORD *)(a1 + 16) >> 2) & 0x3C) + ((*(int *)(a1 + 16) >> 31) & 0x14))) & 7;
      v26 = *(int **)(a1 + 48);
      v27 = *(_DWORD *)(a1 + 28);
      if (!v26)
      {
        if (v27)
        {
          __src = 0;
          v128 = 0;
          v69 = sub_10029430C(&__src, 19);
          *(_DWORD *)(v69 + 15) = 807419197;
          *(_OWORD *)v69 = *(_OWORD *)"img->dataOrder == 0";
          sub_100294B74(-215, &__src, "iplImageToMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 706);
        }
        v70 = 8 * *(_DWORD *)(a1 + 8) - 8;
        v63 = (v70 | v25) + 1124007936;
        *(_DWORD *)a5 = v63;
        v65 = *(_DWORD *)(a1 + 40);
        v64 = *(_DWORD *)(a1 + 44);
        *(_DWORD *)(a5 + 8) = v64;
        *(_DWORD *)(a5 + 12) = v65;
        v71 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a5 + 16) = v71;
        *(_QWORD *)(a5 + 24) = v71;
        v66 = (((v70 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * v25)) & 3);
        goto LABEL_105;
      }
      if (v27)
      {
        v28 = *v26;
        if (!*v26)
        {
          __src = 0;
          v128 = 0;
          qmemcpy((void *)sub_10029430C(&__src, 41), "img->dataOrder == 0 || img->roi->coi != 0", 41);
          sub_100294B74(-215, &__src, "iplImageToMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 715);
        }
      }
      else
      {
        v28 = *v26;
        if (!*v26)
          goto LABEL_66;
        v27 = *(_DWORD *)(a1 + 28);
      }
      if (v27 == 1)
      {
        v29 = 0;
        v30 = 1;
LABEL_67:
        v62 = v29 + v25;
        v63 = v29 + v25 + 1124007936;
        *(_DWORD *)a5 = v63;
        v64 = v26[4];
        *(_DWORD *)(a5 + 8) = v64;
        v65 = v26[3];
        *(_DWORD *)(a5 + 12) = v65;
        v66 = (((v62 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v62 & 7))) & 3);
        if (v30)
          v67 = *v24 * (v28 - 1) * *(int *)(a1 + 44);
        else
          v67 = 0;
        v87 = *(_QWORD *)(a1 + 88) + v67;
        v24 = *(uint64_t **)(a5 + 72);
        v23 = *v24;
        v71 = v87 + *v24 * v26[2] + v26[1] * (uint64_t)(int)v66;
        *(_QWORD *)(a5 + 16) = v71;
        *(_QWORD *)(a5 + 24) = v71;
LABEL_105:
        v88 = v71 + v23 * (int)v64;
        v89 = v71 + v23 * (int)(v64 - 1) + (int)v66 * (uint64_t)(int)v65;
        *(_QWORD *)(a5 + 32) = v89;
        *(_QWORD *)(a5 + 40) = v88;
        if (v64 == 1 || (int)v66 * (uint64_t)(int)v65 == v23)
          v91 = 0x4000;
        else
          v91 = 0;
        v92 = v91 | v63;
        *(_DWORD *)a5 = v92;
        v24[1] = v66;
        if (a2)
        {
          v93 = *(_DWORD *)(a5 + 4);
          __src = __PAIR64__(v93, v92);
          v128 = __PAIR64__(v65, v64);
          *(_QWORD *)&v129 = v71;
          *((_QWORD *)&v129 + 1) = v71;
          *(_QWORD *)&v130 = v89;
          *((_QWORD *)&v130 + 1) = v88;
          v94 = *(_QWORD *)(a5 + 56);
          v131 = *(_QWORD *)(a5 + 48);
          v132 = v94;
          v133 = &v128;
          v134 = v135;
          v135[0] = 0;
          v135[1] = 0;
          if (v94)
          {
            v95 = (unsigned int *)(v94 + 20);
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 + 1, v95));
            v93 = *(_DWORD *)(a5 + 4);
          }
          if (v93 > 2)
          {
            HIDWORD(__src) = 0;
            sub_100256B48((uint64_t)&__src, a5);
          }
          else
          {
            v97 = *(_QWORD **)(a5 + 72);
            v98 = v134;
            *(_QWORD *)v134 = *v97;
            v98[1] = v97[1];
          }
          v99 = *(_QWORD *)(a5 + 56);
          if (v99)
          {
            v100 = (unsigned int *)(v99 + 20);
            do
            {
              v101 = __ldaxr(v100);
              v102 = v101 - 1;
            }
            while (__stlxr(v102, v100));
            if (!v102)
            {
              v103 = *(_QWORD *)(a5 + 56);
              if (v103)
              {
                *(_QWORD *)(a5 + 56) = 0;
                v104 = *(_QWORD *)(v103 + 8);
                if (!v104)
                {
                  v104 = *(_QWORD *)(a5 + 48);
                  if (!v104)
                    v104 = sub_100255D20();
                }
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v104 + 48))(v104, v103);
              }
            }
          }
          *(_QWORD *)(a5 + 56) = 0;
          *(_OWORD *)(a5 + 16) = 0u;
          *(_OWORD *)(a5 + 32) = 0u;
          if (*(int *)(a5 + 4) >= 1)
          {
            v105 = 0;
            v106 = *(_QWORD *)(a5 + 64);
            do
              *(_DWORD *)(v106 + 4 * v105++) = 0;
            while (v105 < *(int *)(a5 + 4));
          }
          v107 = *(int **)(a1 + 48);
          if (v107 && (v108 = *v107) != 0 && *(_DWORD *)(a1 + 28) != 1)
          {
            *(_QWORD *)&v119 = (v108 - 1);
            v136 = v128;
            sub_100255F30((char *)a5, 2, (uint64_t *)&v136, __src & 0xFFF);
            sub_1001F91C0((unint64_t)&__src, 1uLL, (unsigned int *)a5, 1uLL, (uint64_t)&v119, 1uLL);
          }
          else
          {
            LODWORD(v136) = 33619968;
            v137 = a5;
            v138 = 0;
            sub_1002181EC((uint64_t)&__src, (uint64_t)&v136);
          }
          if (v132)
          {
            v109 = (unsigned int *)(v132 + 20);
            do
            {
              v110 = __ldaxr(v109);
              v111 = v110 - 1;
            }
            while (__stlxr(v111, v109));
            if (!v111)
            {
              v112 = v132;
              if (v132)
              {
                v132 = 0;
                v113 = *(_QWORD *)(v112 + 8);
                if (!v113)
                {
                  v113 = v131;
                  if (!v131)
                    v113 = sub_100255D20();
                }
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v113 + 48))(v113, v112);
              }
            }
          }
          v132 = 0;
          v129 = 0u;
          v130 = 0u;
          if (SHIDWORD(__src) >= 1)
          {
            v114 = 0;
            v115 = v133;
            do
              *((_DWORD *)v115 + v114++) = 0;
            while (v114 < SHIDWORD(__src));
          }
          if (v134 != v135)
            j__free(v134);
        }
        return;
      }
LABEL_66:
      v30 = 0;
      v29 = 8 * *(_DWORD *)(a1 + 8) - 8;
      goto LABEL_67;
    }
    if (v9 != 1117323264)
      goto LABEL_49;
    v31 = *(_DWORD *)(a1 + 40);
    if (v31)
    {
      v32 = *(_DWORD *)(a1 + 44);
      if (v31 < 1 || (((v8 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v8 & 7))) & 3) != v32)
      {
        __src = 0;
        v128 = 0;
        qmemcpy((void *)sub_10029430C(&__src, 152), "total > 0 && (((((seq->flags) & ((512 - 1) << 3)) >> 3) + 1) << ((((sizeof(size_t)/4+1)*16384|0x3a50) >> ((seq->flags) & ((1 << 3) - 1))*2) & 3)) == esz", 152);
        sub_100294B74(-215, &__src, "cvarrToMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 970);
      }
      v33 = *(_DWORD *)a1 & 0xFFF;
      if ((a2 & 1) == 0 && (v34 = *(_QWORD *)(a1 + 88), *(_QWORD *)(v34 + 8) == v34))
      {
        sub_10000A364(a5, *(_DWORD *)(a1 + 40), 1, v33, *(_QWORD *)(v34 + 24), 0);
      }
      else if (a4)
      {
        v35 = v32 * (uint64_t)v31 + 7;
        v36 = v35 >> 3;
        if (*(_QWORD *)(a4 + 8) >= v35 >> 3)
        {
          *(_QWORD *)(a4 + 8) = v36;
          v37 = *(char **)a4;
        }
        else
        {
          v37 = (char *)(a4 + 16);
          if (*(_QWORD *)a4 == a4 + 16)
          {
            v37 = *(char **)a4;
          }
          else
          {
            if (*(_QWORD *)a4)
              operator delete[]();
            *(_QWORD *)a4 = v37;
          }
          *(_QWORD *)(a4 + 8) = v36;
          if (v35 >= 0x448)
            operator new[]();
        }
        sub_10021ED58(a1, v37, 0x3FFFFFFF00000000);
        sub_10000A364(a5, v31, 1, v33, (uint64_t)v37, 0);
      }
      else
      {
        *(_DWORD *)a5 = 1124007936;
        *(_OWORD *)(a5 + 4) = 0u;
        *(_OWORD *)(a5 + 20) = 0u;
        *(_OWORD *)(a5 + 36) = 0u;
        *(_OWORD *)(a5 + 48) = 0u;
        *(_QWORD *)(a5 + 80) = 0;
        *(_QWORD *)(a5 + 64) = a5 + 8;
        *(_QWORD *)(a5 + 72) = a5 + 80;
        *(_QWORD *)(a5 + 88) = 0;
        __src = v31 | 0x100000000;
        sub_100255F30((char *)a5, 2, &__src, v33);
        sub_10021ED58(a1, *(char **)(a5 + 16), 0x3FFFFFFF00000000);
      }
      return;
    }
LABEL_50:
    *(_DWORD *)a5 = 1124007936;
    *(_OWORD *)(a5 + 4) = 0u;
    *(_OWORD *)(a5 + 20) = 0u;
    *(_OWORD *)(a5 + 36) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_QWORD *)(a5 + 80) = 0;
    *(_QWORD *)(a5 + 64) = a5 + 8;
    *(_QWORD *)(a5 + 72) = a5 + 80;
    *(_QWORD *)(a5 + 88) = 0;
    return;
  }
  v19 = *(_QWORD *)(a1 + 24);
  if (!v19)
    goto LABEL_49;
  *(_OWORD *)(a5 + 4) = 0u;
  v20 = (int *)(a5 + 4);
  *(_OWORD *)(a5 + 20) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 36) = 0u;
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 64) = a5 + 8;
  *(_QWORD *)(a5 + 72) = a5 + 80;
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 16) = v19;
  *(_QWORD *)(a5 + 24) = v19;
  *(_DWORD *)a5 = v8 & 0xFFF | 0x42FF0000;
  v21 = *(unsigned int *)(a1 + 4);
  if ((int)v21 >= 1)
  {
    if (v21 < 8)
    {
      v22 = 0;
LABEL_58:
      v50 = v21 - v22;
      v51 = &__src + v22;
      v52 = (int *)(8 * v22 + a1 + 36);
      v53 = (_DWORD *)&v136 + v22;
      do
      {
        v54 = *v52;
        *v53++ = *(v52 - 1);
        *v51++ = v54;
        v52 += 2;
        --v50;
      }
      while (v50);
      goto LABEL_60;
    }
    v22 = v21 & 0x7FFFFFF8;
    v43 = (const float *)(a1 + 64);
    v44 = (float32x4_t *)&v138;
    v45 = &v130;
    v46 = v21 & 0xFFFFFFF8;
    do
    {
      v47 = v43 - 8;
      v139 = vld2q_f32(v47);
      v140 = vld2q_f32(v43);
      v44[-1] = v139.val[0];
      *v44 = v140.val[0];
      v48.i64[0] = v139.val[1].i32[0];
      v48.i64[1] = v139.val[1].i32[1];
      v49 = v48;
      v48.i64[0] = v139.val[1].i32[2];
      v48.i64[1] = v139.val[1].i32[3];
      v139.val[0] = v48;
      v48.i64[0] = v140.val[1].i32[0];
      v48.i64[1] = v140.val[1].i32[1];
      v139.val[1] = v48;
      v48.i64[0] = v140.val[1].i32[2];
      v48.i64[1] = v140.val[1].i32[3];
      *(v45 - 2) = (__int128)v49;
      *(float32x4x2_t *)(v45 - 1) = v139;
      v45[1] = (__int128)v48;
      v45 += 4;
      v43 += 16;
      v44 += 2;
      v46 -= 8;
    }
    while (v46);
    if (v22 != v21)
      goto LABEL_58;
  }
LABEL_60:
  sub_10025655C(a5, v21, (uint64_t)&v136, (uint64_t)&__src, 0);
  sub_100256A04(a5);
  if (!a2)
    return;
  v55 = *(_OWORD *)a5;
  v56 = *(_OWORD *)(a5 + 16);
  v119 = *(_OWORD *)a5;
  v120 = v56;
  v121 = *(_OWORD *)(a5 + 32);
  v57 = *(_QWORD *)(a5 + 56);
  v122 = *(_QWORD *)(a5 + 48);
  v123 = v57;
  v124 = (char *)&v119 + 8;
  v125 = v126;
  v126[0] = 0;
  v126[1] = 0;
  if (v57)
  {
    v58 = (unsigned int *)(v57 + 20);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 + 1, v58));
    if (*v20 <= 2)
      goto LABEL_65;
  }
  else if (SDWORD1(v55) <= 2)
  {
LABEL_65:
    v60 = *(_QWORD **)(a5 + 72);
    v61 = v125;
    *(_QWORD *)v125 = *v60;
    v61[1] = v60[1];
    goto LABEL_77;
  }
  DWORD1(v119) = 0;
  sub_100256B48((uint64_t)&v119, a5);
LABEL_77:
  v72 = *(_QWORD *)(a5 + 56);
  if (v72)
  {
    v73 = (unsigned int *)(v72 + 20);
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
    {
      v76 = *(_QWORD *)(a5 + 56);
      if (v76)
      {
        *(_QWORD *)(a5 + 56) = 0;
        v77 = *(_QWORD *)(v76 + 8);
        if (!v77)
        {
          v77 = *(_QWORD *)(a5 + 48);
          if (!v77)
            v77 = sub_100255D20();
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v77 + 48))(v77, v76);
      }
    }
  }
  *(_QWORD *)(a5 + 56) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  if (*(int *)(a5 + 4) >= 1)
  {
    v78 = 0;
    v79 = *(_QWORD *)(a5 + 64);
    do
      *(_DWORD *)(v79 + 4 * v78++) = 0;
    while (v78 < *v20);
  }
  v116 = 33619968;
  v117 = a5;
  v118 = 0;
  sub_1002181EC((uint64_t)&v119, (uint64_t)&v116);
  if (v123)
  {
    v80 = (unsigned int *)(v123 + 20);
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v80));
    if (!v82)
    {
      v83 = v123;
      if (v123)
      {
        v123 = 0;
        v84 = *(_QWORD *)(v83 + 8);
        if (!v84)
        {
          v84 = v122;
          if (!v122)
            v84 = sub_100255D20();
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 48))(v84, v83);
      }
    }
  }
  v123 = 0;
  v120 = 0u;
  v121 = 0u;
  if (SDWORD1(v119) >= 1)
  {
    v85 = 0;
    v86 = v124;
    do
      *(_DWORD *)&v86[4 * v85++] = 0;
    while (v85 < SDWORD1(v119));
  }
  if (v125 != v126)
    j__free(v125);
}

void sub_100258A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  sub_100006BE4((uint64_t)&a26);
  sub_100006BE4(v26);
  _Unwind_Resume(a1);
}

void sub_100258BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_10029434C(&a26);
  _Unwind_Resume(a1);
}

void sub_100258BB4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100258BD0(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  int v3;
  BOOL v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19[2];

  v3 = *(_DWORD *)(result + 4);
  if (v3 > 2 || !**(_QWORD **)(result + 72))
  {
    v19[0] = 0;
    v19[1] = 0;
    qmemcpy((void *)sub_10029430C(v19, 24), "dims <= 2 && step[0] > 0", 24);
    sub_100294B74(-215, v19, "locateROI", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 991);
  }
  v4 = __OFSUB__(v3, 1);
  v5 = v3 - 1;
  if (v5 < 0 != v4)
  {
    v6 = 0;
    v13 = *(_QWORD *)(result + 16);
    v8 = *(_QWORD *)(result + 24);
    v9 = *(_QWORD *)(result + 32);
    v10 = v13 - v8;
    if (v13 != v8)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(result + 72) + 8 * v5);
    v7 = *(_QWORD *)(result + 16);
    v8 = *(_QWORD *)(result + 24);
    v9 = *(_QWORD *)(result + 32);
    v10 = v7 - v8;
    if (v7 != v8)
    {
LABEL_5:
      v11 = **(_QWORD **)(result + 72);
      v12 = v10 / v11;
      v10 = (v10 - (int)(v10 / v11) * v11) / v6;
      goto LABEL_9;
    }
  }
  LODWORD(v12) = 0;
LABEL_9:
  *a3 = v10;
  a3[1] = v12;
  v14 = v9 - v8;
  v15 = *(int *)(result + 12) + (uint64_t)(int)v10;
  v16 = (v14 - v6 * v15) / **(_QWORD **)(result + 72);
  v17 = *(_DWORD *)(result + 8) + v12;
  if ((int)v16 + 1 > v17)
    v17 = v16 + 1;
  a2[1] = v17;
  v18 = (v14 - *(_QWORD *)(result + 80) * (v17 - 1)) / v6;
  if ((int)v15 > (int)v18)
    LODWORD(v18) = v15;
  *a2 = v18;
  return result;
}

void sub_100258D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100258D40(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  int32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  _DWORD *v20;
  unsigned int v21;
  int32x2_t v23;
  int32x2_t v24[2];

  v10 = *(_DWORD *)(a1 + 4);
  if (v10 > 2 || !**(_QWORD **)(a1 + 72))
  {
    v24[0] = 0;
    v24[1] = 0;
    qmemcpy((void *)sub_10029430C(v24, 24), "dims <= 2 && step[0] > 0", 24);
    sub_100294B74(-215, (uint64_t *)v24, "adjustROI", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1012);
  }
  v23 = 0;
  v24[0] = 0;
  v11 = __OFSUB__(v10, 1);
  v12 = v10 - 1;
  if (v12 < 0 != v11)
    v13 = 0;
  else
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v12);
  sub_100258BD0(a1, v24, &v23);
  v14 = vrev64_s32(v23);
  v15 = vrev64_s32(v24[0]);
  v16 = vmin_s32(v15, vmax_s32(vsub_s32(v14, (int32x2_t)__PAIR64__(a4, a2)), 0));
  v17 = vmax_s32(vmin_s32(v15, vadd_s32(vadd_s32(v14, *(int32x2_t *)(a1 + 8)), (int32x2_t)__PAIR64__(a5, a3))), 0);
  v18 = vsub_s32(vmin_s32(v16, v17), v14);
  *(_QWORD *)(a1 + 16) += *(_QWORD *)(a1 + 80) * v18.i32[0] + v13 * v18.i32[1];
  v19 = vabd_s32(v16, v17);
  *(int32x2_t *)(a1 + 8) = v19;
  v20 = *(_DWORD **)(a1 + 64);
  *v20 = v19.i32[0];
  v20[1] = *(_DWORD *)(a1 + 12);
  if (v13 * *(int *)(a1 + 12) == **(_QWORD **)(a1 + 72) || *(_DWORD *)(a1 + 8) == 1)
    v21 = *(_DWORD *)a1 | 0x4000;
  else
    v21 = *(_DWORD *)a1 & 0xFFFFBFFF;
  *(_DWORD *)a1 = v21;
  return a1;
}

void sub_100258EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100258F0C(int *a1, int a2, uint64_t *__src, unsigned __int16 a4, unsigned int a5, int a6, unsigned int a7)
{
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v56;
  int v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v65;
  int v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unint64_t v79;
  int v80;
  unsigned int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v138;
  uint64_t v139;

  v12 = *a1;
  v13 = *a1 & 0x1F0000;
  v14 = a4 & 0xFFF;
  if (v13 >= 0xA0000)
  {
    if (v13 == 655360)
    {
      if ((a5 & 0x80000000) == 0)
      {
        v138 = 0;
        v139 = 0;
        v36 = sub_10029430C(&v138, 5);
        *(_DWORD *)v36 = 540811369;
        *(_BYTE *)(v36 + 4) = 48;
        sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2506);
      }
      v37 = *((_QWORD *)a1 + 1);
      if (a6)
      {
        if ((*(_BYTE *)(v37 + 1) & 0x40) == 0)
        {
          if (*a1 >> 30)
          {
            v138 = 0;
            v139 = 0;
            qmemcpy((void *)sub_10029430C(&v138, 28), "!fixedType() && !fixedSize()", 28);
            sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2512);
          }
          v38 = *(_QWORD *)(v37 + 32);
          if (v38)
          {
            v39 = (unsigned int *)(v38 + 16);
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
              sub_10029BD9C(v37);
          }
          if (*(int *)(v37 + 4) >= 1)
          {
            v42 = 0;
            v43 = *(_QWORD *)(v37 + 48);
            do
              *(_DWORD *)(v43 + 4 * v42++) = 0;
            while (v42 < *(int *)(v37 + 4));
          }
          *(_QWORD *)(v37 + 32) = 0;
        }
        if (a2 == 2 && *(_DWORD *)(v37 + 4) == 2)
        {
          if (*(_QWORD *)(v37 + 32))
          {
            v45 = *(_DWORD *)(v37 + 8);
            v44 = *(_DWORD *)(v37 + 12);
            if (v44 * (uint64_t)v45)
            {
              if ((*(_DWORD *)v37 & 0xFFF) == v14 && v45 == *((_DWORD *)__src + 1) && v44 == *(_DWORD *)__src)
                return;
            }
          }
        }
      }
      v46 = *a1;
      if (*a1 < 0)
      {
        if ((((unsigned __int16)*(_DWORD *)v37 ^ a4) & 0xFF8) != 0 || ((a7 >> v46) & 1) == 0)
        {
          if (v14 != (*(_DWORD *)v37 & 0xFFF))
          {
            v138 = 0;
            v139 = 0;
            qmemcpy((void *)sub_10029430C(&v138, 42), "((mtype) & ((1 << 3)*512 - 1)) == m.type()", 42);
            sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2526);
          }
        }
        else
        {
          LOWORD(v14) = *(_DWORD *)v37 & 0xFFF;
        }
      }
      if ((v46 & 0x40000000) != 0)
      {
        if (*(_DWORD *)(v37 + 4) != a2)
        {
          v138 = 0;
          v139 = 0;
          v47 = sub_10029430C(&v138, 11);
          *(_DWORD *)(v47 + 7) = 1679834429;
          *(_QWORD *)v47 = *(_QWORD *)"m.dims == d";
          sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2530);
        }
        if (a2 >= 1)
        {
          v48 = 0;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)(v37 + 48) + v48) != *(_DWORD *)((char *)__src + v48))
            {
              v138 = 0;
              v139 = 0;
              qmemcpy((void *)sub_10029430C(&v138, 21), "m.size[j] == sizes[j]", 21);
              sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2532);
            }
            v48 += 4;
          }
          while (4 * a2 != v48);
        }
      }
      goto LABEL_190;
    }
    if (v13 == 917504)
    {
      if (v14 != (*a1 & 0xFFF) && ((a4 & 0xFF8) != 0 || ((a7 >> *(_BYTE *)a1) & 1) == 0))
      {
        v138 = 0;
        v139 = 0;
        qmemcpy((void *)sub_10029430C(&v138, 106), "mtype == type0 || (((((mtype) & ((512 - 1) << 3)) >> 3) + 1) == 1 && ((1 << type0) & fixedDepthMask) != 0)", 106);
        sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2551);
      }
      if (a2 != 2 || a1[5] * a1[4] != *((_DWORD *)__src + 1) * *(_DWORD *)__src)
      {
        v138 = 0;
        v139 = 0;
        qmemcpy((void *)sub_10029430C(&v138, 40), "d == 2 && sz.area() == sizes[0]*sizes[1]", 40);
        sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2552);
      }
      return;
    }
  }
  else
  {
    if (v13 == 0x10000)
    {
      if ((a5 & 0x80000000) == 0)
      {
        v138 = 0;
        v139 = 0;
        v23 = sub_10029430C(&v138, 5);
        *(_DWORD *)v23 = 540811369;
        *(_BYTE *)(v23 + 4) = 48;
        sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2472);
      }
      v24 = *((_QWORD *)a1 + 1);
      if (a6)
      {
        if ((*(_BYTE *)(v24 + 1) & 0x40) == 0)
        {
          if (*a1 >> 30)
          {
            v138 = 0;
            v139 = 0;
            qmemcpy((void *)sub_10029430C(&v138, 28), "!fixedType() && !fixedSize()", 28);
            sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2478);
          }
          v25 = *(_QWORD *)(v24 + 56);
          if (v25)
          {
            v26 = (unsigned int *)(v25 + 20);
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              v29 = *(_QWORD *)(v24 + 56);
              if (v29)
              {
                *(_QWORD *)(v24 + 56) = 0;
                v30 = *(_QWORD *)(v29 + 8);
                if (!v30)
                {
                  v30 = *(_QWORD *)(v24 + 48);
                  if (!v30)
                    v30 = sub_100255D20();
                }
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 48))(v30, v29);
              }
            }
          }
          *(_QWORD *)(v24 + 56) = 0;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          if (*(int *)(v24 + 4) >= 1)
          {
            v31 = 0;
            v32 = *(_QWORD *)(v24 + 64);
            do
              *(_DWORD *)(v32 + 4 * v31++) = 0;
            while (v31 < *(int *)(v24 + 4));
          }
        }
        if (a2 == 2
          && *(_DWORD *)(v24 + 4) == 2
          && *(_QWORD *)(v24 + 16)
          && (*(_DWORD *)v24 & 0xFFF) == v14
          && *(_DWORD *)(v24 + 8) == *((_DWORD *)__src + 1)
          && *(_DWORD *)(v24 + 12) == *(_DWORD *)__src)
        {
          return;
        }
      }
      v33 = *a1;
      if (*a1 < 0)
      {
        if ((((unsigned __int16)*(_DWORD *)v24 ^ a4) & 0xFF8) != 0 || ((a7 >> v33) & 1) == 0)
        {
          if (v14 != (*(_DWORD *)v24 & 0xFFF))
          {
            v138 = 0;
            v139 = 0;
            qmemcpy((void *)sub_10029430C(&v138, 42), "((mtype) & ((1 << 3)*512 - 1)) == m.type()", 42);
            sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2492);
          }
        }
        else
        {
          LOWORD(v14) = *(_DWORD *)v24 & 0xFFF;
        }
      }
      if ((v33 & 0x40000000) != 0)
      {
        if (*(_DWORD *)(v24 + 4) != a2)
        {
          v138 = 0;
          v139 = 0;
          v34 = sub_10029430C(&v138, 11);
          *(_DWORD *)(v34 + 7) = 1679834429;
          *(_QWORD *)v34 = *(_QWORD *)"m.dims == d";
          sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2496);
        }
        if (a2 >= 1)
        {
          v35 = 0;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)(v24 + 64) + v35) != *(_DWORD *)((char *)__src + v35))
            {
              v138 = 0;
              v139 = 0;
              qmemcpy((void *)sub_10029430C(&v138, 21), "m.size[j] == sizes[j]", 21);
              sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2498);
            }
            v35 += 4;
          }
          while (4 * a2 != v35);
        }
      }
      goto LABEL_164;
    }
    if (v13 == 0x20000)
    {
      if ((a5 & 0x80000000) == 0)
      {
        v138 = 0;
        v139 = 0;
        v15 = sub_10029430C(&v138, 5);
        *(_DWORD *)v15 = 540811369;
        *(_BYTE *)(v15 + 4) = 48;
        sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2540);
      }
      if (v14 != (*a1 & 0xFFF) && ((a4 & 0xFF8) != 0 || ((a7 >> *(_BYTE *)a1) & 1) == 0))
      {
        v138 = 0;
        v139 = 0;
        qmemcpy((void *)sub_10029430C(&v138, 106), "mtype == type0 || (((((mtype) & ((512 - 1) << 3)) >> 3) + 1) == 1 && ((1 << type0) & fixedDepthMask) != 0)", 106);
        sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2542);
      }
      if (a2 != 2
        || ((v52 = a1[5], *(_DWORD *)__src != v52) || *((_DWORD *)__src + 1) != a1[4])
        && (!a6 || *(_DWORD *)__src != a1[4] || *((_DWORD *)__src + 1) != v52))
      {
        v138 = 0;
        v139 = 0;
        qmemcpy((void *)sub_10029430C(&v138, 129), "d == 2 && ((sizes[0] == sz.height && sizes[1] == sz.width) || (allowTransposed && sizes[0] == sz.width && sizes[1] == sz.height))", 129);
        sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2544);
      }
      return;
    }
  }
  if ((*a1 & 0x1F0000u) >= 0x50000)
  {
    if (v13 == 327680)
    {
      v53 = (uint64_t *)*((_QWORD *)a1 + 1);
      if ((a5 & 0x80000000) != 0)
      {
        if (a2 != 2
          || (v94 = *(_DWORD *)__src, *(_DWORD *)__src != 1) && (v95 = *((_DWORD *)__src + 1), v95 != 1) && v95 * v94)
        {
          sub_1001F37D4(&v138, "d == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)");
          sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2650);
        }
        v96 = *((_DWORD *)__src + 1);
        v97 = v96 * v94;
        v98 = v94 + v96 - 1;
        if (v97 <= 0)
          v98 = 0;
        v99 = v98;
        v100 = 0xAAAAAAAAAAAAAAABLL * ((v53[1] - *v53) >> 5);
        if ((v12 & 0x40000000) != 0 && v100 != v98)
        {
          sub_1001F37D4(&v138, "!fixedSize() || len == len0");
          sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2653);
        }
        sub_100260194(*((uint64_t **)a1 + 1), v98);
        if (*a1 < 0 && v100 < v99)
        {
          v101 = *a1 & 0xFFF;
          v102 = *v53;
          do
          {
            if ((*(_DWORD *)(v102 + 96 * v100) & 0xFFF) != v101)
            {
              if (*(_QWORD *)(v102 + 96 * v100 + 16))
              {
                v103 = *(unsigned int *)(v102 + 96 * v100 + 4);
                v104 = v102 + 96 * v100;
                if ((int)v103 >= 3)
                {
                  v106 = *(_QWORD *)(v104 + 64);
                  v107 = (int *)(v106 + 4);
                  v108 = v103 & 0xFFFFFFFE;
                  v109 = 1;
                  v110 = 1;
                  do
                  {
                    v109 *= *(v107 - 1);
                    v110 *= *v107;
                    v107 += 2;
                    v108 -= 2;
                  }
                  while (v108);
                  v105 = v110 * v109;
                  v111 = v103 - (v103 & 0xFFFFFFFE);
                  if (v111)
                  {
                    v112 = (int *)(v106 + ((4 * v103) & 0x3FFFFFFF8));
                    do
                    {
                      v113 = *v112++;
                      v105 *= v113;
                      --v111;
                    }
                    while (v111);
                  }
                }
                else
                {
                  v105 = *(int *)(v104 + 12) * (uint64_t)*(int *)(v104 + 8);
                }
                if ((_DWORD)v103 && v105)
                {
                  v138 = 0;
                  v139 = 0;
                  v114 = sub_10029430C(&v138, 12);
                  *(_DWORD *)(v114 + 8) = 690518388;
                  *(_QWORD *)v114 = *(_QWORD *)"v[j].empty()";
                  sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2662);
                }
              }
              *(_DWORD *)(v102 + 96 * v100) = *(_DWORD *)(v102 + 96 * v100) & 0xFFFFF000 | v101;
            }
            ++v100;
          }
          while (v100 != v99);
        }
        return;
      }
      v54 = *v53;
      if ((int)(-1431655765 * ((unint64_t)(v53[1] - *v53) >> 5)) <= (int)a5)
      {
        sub_1001F37D4(&v138, "i < (int)v.size()");
        sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2669);
      }
      v24 = v54 + 96 * a5;
      if (a6)
      {
        if ((*(_BYTE *)(v24 + 1) & 0x40) == 0)
        {
          if (*a1 >> 30)
          {
            sub_1001F37D4(&v138, "!fixedType() && !fixedSize()");
            sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2676);
          }
          sub_1002564BC(v54 + 96 * a5);
        }
        if (a2 == 2)
        {
          v56 = v54 + 96 * a5;
          v57 = *(_DWORD *)(v56 + 4);
          v58 = *(_QWORD *)(v56 + 16);
          v59 = v57 != 2 || v58 == 0;
          if (!v59
            && (*(_DWORD *)v24 & 0xFFF) == v14
            && *(_DWORD *)(v54 + 96 * a5 + 8) == *((_DWORD *)__src + 1)
            && *(_DWORD *)(v54 + 96 * a5 + 12) == *(_DWORD *)__src)
          {
            return;
          }
        }
      }
      v60 = *a1;
      if (*a1 < 0)
      {
        if ((((unsigned __int16)*(_DWORD *)v24 ^ a4) & 0xFF8) != 0 || ((a7 >> v60) & 1) == 0)
        {
          if (v14 != (*(_DWORD *)v24 & 0xFFF))
          {
            sub_1001F37D4(&v138, "((mtype) & ((1 << 3)*512 - 1)) == m.type()");
            sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2690);
          }
        }
        else
        {
          LOWORD(v14) = *(_DWORD *)v24 & 0xFFF;
        }
      }
      if ((v60 & 0x40000000) != 0)
      {
        if (*(_DWORD *)(v54 + 96 * a5 + 4) != a2)
        {
          sub_1001F37D4(&v138, "m.dims == d");
          sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2694);
        }
        if (a2 >= 1)
        {
          v61 = 0;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)(v54 + 96 * a5 + 64) + v61) != *(_DWORD *)((char *)__src + v61))
            {
              v138 = 0;
              v139 = 0;
              qmemcpy((void *)sub_10029430C(&v138, 21), "m.size[j] == sizes[j]", 21);
              sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2696);
            }
            v61 += 4;
          }
          while (4 * a2 != v61);
        }
      }
      goto LABEL_164;
    }
    if (v13 != 720896)
    {
      if (v13 != 983040)
        goto LABEL_192;
      v49 = *((_QWORD *)a1 + 1);
      if ((a5 & 0x80000000) != 0)
      {
        if (a2 != 2
          || (v73 = *(_DWORD *)__src, *(_DWORD *)__src != 1) && (v74 = *((_DWORD *)__src + 1), v74 != 1) && v74 * v73)
        {
          sub_1001F37D4(&v138, "d == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)");
          sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2709);
        }
        v75 = *((_DWORD *)__src + 1);
        v76 = v75 * v73;
        v77 = v73 + v75 - 1;
        if (v76 <= 0)
          v78 = 0;
        else
          v78 = v77;
        v79 = a1[5];
        if (v78 != (_DWORD)v79)
        {
          sub_1001F37D4(&v138, "len == len0");
          sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2712);
        }
        if (*a1 < 0 && v79 < v78)
        {
          v80 = *a1 & 0xFFF;
          do
          {
            v81 = (unsigned int *)(v49 + 96 * v79);
            if ((*v81 & 0xFFF) != v80)
            {
              if (*(_QWORD *)(v49 + 96 * v79 + 16))
              {
                v82 = *(unsigned int *)(v49 + 96 * v79 + 4);
                v83 = v49 + 96 * v79;
                if ((int)v82 >= 3)
                {
                  v85 = *(_QWORD *)(v83 + 64);
                  v86 = (int *)(v85 + 4);
                  v87 = v82 & 0xFFFFFFFE;
                  v88 = 1;
                  v89 = 1;
                  do
                  {
                    v88 *= *(v86 - 1);
                    v89 *= *v86;
                    v86 += 2;
                    v87 -= 2;
                  }
                  while (v87);
                  v84 = v89 * v88;
                  v90 = v82 - (v82 & 0xFFFFFFFE);
                  if (v90)
                  {
                    v91 = (int *)(v85 + ((4 * v82) & 0x3FFFFFFF8));
                    do
                    {
                      v92 = *v91++;
                      v84 *= v92;
                      --v90;
                    }
                    while (v90);
                  }
                }
                else
                {
                  v84 = *(int *)(v83 + 12) * (uint64_t)*(int *)(v83 + 8);
                }
                if ((_DWORD)v82 && v84)
                {
                  v138 = 0;
                  v139 = 0;
                  v93 = sub_10029430C(&v138, 12);
                  *(_DWORD *)(v93 + 8) = 690518388;
                  *(_QWORD *)v93 = *(_QWORD *)"v[j].empty()";
                  sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2720);
                }
              }
              *v81 = *v81 & 0xFFFFF000 | v80;
            }
            ++v79;
          }
          while (v79 < (int)v78);
        }
        return;
      }
      if (a1[5] <= (int)a5)
      {
        sub_1001F37D4(&v138, "i < sz.height");
        sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2727);
      }
      v24 = v49 + 96 * a5;
      if (a6)
      {
        if ((*(_BYTE *)(v24 + 1) & 0x40) == 0)
        {
          if (*a1 >> 30)
          {
            sub_1001F37D4(&v138, "!fixedType() && !fixedSize()");
            sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2734);
          }
          sub_1002564BC(v49 + 96 * a5);
        }
        if (a2 == 2
          && *(_DWORD *)(v49 + 96 * a5 + 4) == 2
          && *(_QWORD *)(v49 + 96 * a5 + 16)
          && (*(_DWORD *)v24 & 0xFFF) == v14
          && *(_DWORD *)(v49 + 96 * a5 + 8) == *((_DWORD *)__src + 1)
          && *(_DWORD *)(v49 + 96 * a5 + 12) == *(_DWORD *)__src)
        {
          return;
        }
      }
      v50 = *a1;
      if (*a1 < 0)
      {
        if ((((unsigned __int16)*(_DWORD *)v24 ^ a4) & 0xFF8) != 0 || ((a7 >> v50) & 1) == 0)
        {
          if (v14 != (*(_DWORD *)v24 & 0xFFF))
          {
            sub_1001F37D4(&v138, "((mtype) & ((1 << 3)*512 - 1)) == m.type()");
            sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2748);
          }
        }
        else
        {
          LOWORD(v14) = *(_DWORD *)v24 & 0xFFF;
        }
      }
      if ((v50 & 0x40000000) != 0)
      {
        if (*(_DWORD *)(v49 + 96 * a5 + 4) != a2)
        {
          sub_1001F37D4(&v138, "m.dims == d");
          sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2753);
        }
        if (a2 >= 1)
        {
          v51 = 0;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)(v49 + 96 * a5 + 64) + v51) != *(_DWORD *)((char *)__src + v51))
            {
              v138 = 0;
              v139 = 0;
              qmemcpy((void *)sub_10029430C(&v138, 21), "m.size[j] == sizes[j]", 21);
              sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2755);
            }
            v51 += 4;
          }
          while (4 * a2 != v51);
        }
      }
LABEL_164:
      sub_100255F30((char *)v24, a2, __src, v14);
      return;
    }
    v62 = (uint64_t *)*((_QWORD *)a1 + 1);
    if ((a5 & 0x80000000) != 0)
    {
      if (a2 != 2
        || (v115 = *(_DWORD *)__src, *(_DWORD *)__src != 1) && (v116 = *((_DWORD *)__src + 1), v116 != 1) && v116 * v115)
      {
        sub_1001F37D4(&v138, "d == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)");
        sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2768);
      }
      v117 = *((_DWORD *)__src + 1);
      v118 = v117 * v115;
      v119 = v115 + v117 - 1;
      if (v118 <= 0)
        v119 = 0;
      v120 = v119;
      v121 = 0xCCCCCCCCCCCCCCCDLL * ((v62[1] - *v62) >> 4);
      if ((v12 & 0x40000000) != 0 && v121 != v119)
      {
        sub_1001F37D4(&v138, "!fixedSize() || len == len0");
        sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2771);
      }
      sub_1002601D0(*((uint64_t **)a1 + 1), v119);
      if (*a1 < 0 && v121 < v120)
      {
        v122 = *a1 & 0xFFF;
        v123 = *v62;
        do
        {
          if ((*(_DWORD *)(v123 + 80 * v121) & 0xFFF) != v122)
          {
            if (*(_QWORD *)(v123 + 80 * v121 + 32))
            {
              v124 = *(unsigned int *)(v123 + 80 * v121 + 4);
              v125 = v123 + 80 * v121;
              if ((int)v124 >= 3)
              {
                v127 = *(_QWORD *)(v125 + 48);
                v128 = (int *)(v127 + 4);
                v129 = v124 & 0xFFFFFFFE;
                v130 = 1;
                v131 = 1;
                do
                {
                  v130 *= *(v128 - 1);
                  v131 *= *v128;
                  v128 += 2;
                  v129 -= 2;
                }
                while (v129);
                v126 = v131 * v130;
                v132 = v124 - (v124 & 0xFFFFFFFE);
                if (v132)
                {
                  v133 = (int *)(v127 + ((4 * v124) & 0x3FFFFFFF8));
                  do
                  {
                    v134 = *v133++;
                    v126 *= v134;
                    --v132;
                  }
                  while (v132);
                }
              }
              else
              {
                v126 = *(int *)(v125 + 12) * (uint64_t)*(int *)(v125 + 8);
              }
              if ((_DWORD)v124 && v126)
              {
                v138 = 0;
                v139 = 0;
                v135 = sub_10029430C(&v138, 12);
                *(_DWORD *)(v135 + 8) = 690518388;
                *(_QWORD *)v135 = *(_QWORD *)"v[j].empty()";
                sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2780);
              }
            }
            *(_DWORD *)(v123 + 80 * v121) = *(_DWORD *)(v123 + 80 * v121) & 0xFFFFF000 | v122;
          }
          ++v121;
        }
        while (v121 != v120);
      }
      return;
    }
    v63 = *v62;
    if ((int)(-858993459 * ((unint64_t)(v62[1] - *v62) >> 4)) <= (int)a5)
    {
      sub_1001F37D4(&v138, "i < (int)v.size()");
      sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2787);
    }
    v37 = v63 + 80 * a5;
    if (a6)
    {
      if ((*(_BYTE *)(v37 + 1) & 0x40) == 0)
      {
        if (*a1 >> 30)
        {
          sub_1001F37D4(&v138, "!fixedType() && !fixedSize()");
          sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2794);
        }
        sub_100262F48(v63 + 80 * a5);
      }
      if (a2 == 2)
      {
        v65 = v63 + 80 * a5;
        v66 = *(_DWORD *)(v65 + 4);
        v67 = *(_QWORD *)(v65 + 32);
        v68 = v66 != 2 || v67 == 0;
        if (!v68
          && (*(_DWORD *)v37 & 0xFFF) == v14
          && *(_DWORD *)(v63 + 80 * a5 + 8) == *((_DWORD *)__src + 1)
          && *(_DWORD *)(v63 + 80 * a5 + 12) == *(_DWORD *)__src)
        {
          return;
        }
      }
    }
    v69 = *a1;
    if (*a1 < 0)
    {
      if ((((unsigned __int16)*(_DWORD *)v37 ^ a4) & 0xFF8) != 0 || ((a7 >> v69) & 1) == 0)
      {
        if (v14 != (*(_DWORD *)v37 & 0xFFF))
        {
          sub_1001F37D4(&v138, "((mtype) & ((1 << 3)*512 - 1)) == m.type()");
          sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2808);
        }
      }
      else
      {
        LOWORD(v14) = *(_DWORD *)v37 & 0xFFF;
      }
    }
    if ((v69 & 0x40000000) != 0)
    {
      if (*(_DWORD *)(v63 + 80 * a5 + 4) != a2)
      {
        sub_1001F37D4(&v138, "m.dims == d");
        sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2812);
      }
      if (a2 >= 1)
      {
        v70 = 0;
        do
        {
          if (*(_DWORD *)(*(_QWORD *)(v63 + 80 * a5 + 48) + v70) != *(_DWORD *)((char *)__src + v70))
          {
            v138 = 0;
            v139 = 0;
            qmemcpy((void *)sub_10029430C(&v138, 21), "m.size[j] == sizes[j]", 21);
            sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2814);
          }
          v70 += 4;
        }
        while (4 * a2 != v70);
      }
    }
LABEL_190:
    sub_10029B708(v37, a2, __src, v14, 0);
    return;
  }
  if (!v13)
  {
    v138 = 0;
    v139 = 0;
    qmemcpy((void *)sub_10029430C(&v138, 44), "create() called for the missing output array", 44);
    sub_100294B74(-27, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2640);
  }
  if (v13 != 196608 && v13 != 0x40000)
  {
LABEL_192:
    v138 = 0;
    v139 = 0;
    qmemcpy((void *)sub_10029430C(&v138, 30), "Unknown/unsupported array type", 30);
    sub_100294B74(-213, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2821);
  }
  if (a2 != 2
    || (v16 = *(_DWORD *)__src, *(_DWORD *)__src != 1) && (v17 = *((_DWORD *)__src + 1), v17 != 1) && v17 * v16)
  {
    v138 = 0;
    v139 = 0;
    qmemcpy((void *)sub_10029430C(&v138, 68), "d == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)", 68);
    sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2558);
  }
  v18 = *((_DWORD *)__src + 1);
  v19 = v18 * v16;
  v20 = v16 + v18 - 1;
  if (v19 <= 0)
    v20 = 0;
  v21 = v20;
  v22 = (unint64_t *)*((_QWORD *)a1 + 1);
  if (v13 != 0x40000)
  {
    if ((a5 & 0x80000000) == 0)
    {
      sub_1001F37D4(&v138, "i < 0");
      sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2575);
    }
    goto LABEL_195;
  }
  if ((a5 & 0x80000000) == 0)
  {
    if ((int)(-1431655765 * ((v22[1] - *v22) >> 3)) <= (int)a5)
    {
      sub_1001F37D4(&v138, "i < (int)vv.size()");
      sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2571);
    }
    v22 = (unint64_t *)(*v22 + 24 * a5);
LABEL_195:
    v71 = *a1;
    if (v14 == (*a1 & 0xFFF))
    {
      v72 = *a1;
    }
    else if ((((unsigned __int16)v71 ^ a4) & 0xFF8) != 0 || (v72 = *a1, ((a7 >> *(_BYTE *)a1) & 1) == 0))
    {
      sub_1001F37D4(&v138, "mtype == type0 || (((((mtype) & ((512 - 1) << 3)) >> 3) + 1) == ((((type0) & ((512 - 1) << 3)) >> 3) + 1) && ((1 << type0) & fixedDepthMask) != 0)");
      sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2578);
    }
    v136 = (((v71 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v71 & 7))) & 3);
    if ((v72 & 0x40000000) != 0 && (v22[1] - *v22) / v136 != v21)
    {
      sub_1001F37D4(&v138, "!fixedSize() || len == ((std::vector<uchar>*)v)->size() / esz");
      sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2581);
    }
    switch((int)v136)
    {
      case 1:
        sub_100263054((uint64_t)v22, v21);
        return;
      case 2:
        sub_10026322C(v22, v21);
        return;
      case 3:
        sub_100263258(v22, v21);
        return;
      case 4:
        sub_100263290(v22, v21);
        return;
      case 5:
      case 7:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 33:
      case 34:
      case 35:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
        goto LABEL_306;
      case 6:
        sub_1002632BC((uint64_t)v22, v21);
        return;
      case 8:
        sub_1002632F8((uint64_t)v22, v21);
        return;
      case 12:
        sub_100263324((uint64_t)v22, v21);
        return;
      case 16:
        sub_100263360(v22, v21);
        return;
      case 24:
        sub_10026338C(v22, v21);
        return;
      case 32:
        sub_1002633C8(v22, v21);
        return;
      case 36:
        sub_1002633F4(v22, v21);
        return;
      case 48:
        sub_100263438(v22, v21);
        return;
      case 64:
        sub_100263474(v22, v21);
        return;
      case 128:
        sub_1002634A0(v22, v21);
        return;
      default:
        if ((_DWORD)v136 == 256)
        {
          sub_1002634CC(v22, v21);
        }
        else
        {
          if ((_DWORD)v136 != 512)
          {
LABEL_306:
            sub_10029487C(&v138, "Vectors with element size %d are not supported. Please, modify OutputArray::create()\n", v136);
            sub_100294B74(-5, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2633);
          }
          sub_1002634F8(v22, v21);
        }
        break;
    }
    return;
  }
  if ((*((_BYTE *)a1 + 3) & 0x40) != 0 && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22[1] - *v22) >> 3) != v20)
  {
    sub_1001F37D4(&v138, "!fixedSize() || len == vv.size()");
    sub_100294B74(-215, &v138, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2567);
  }
  sub_100262FB8(*((_QWORD **)a1 + 1), v20);
}

void sub_10025AB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10025AFC4(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  void *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[64];
  _BYTE *v54;
  void *v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;

  v8 = *(_OWORD *)a1;
  v9 = *(_OWORD *)(a1 + 16);
  v10 = (*(_OWORD *)a1 >> 3) & 0x1FF;
  *(_OWORD *)v53 = *(_OWORD *)a1;
  *(_OWORD *)&v53[16] = v9;
  *(_OWORD *)&v53[32] = *(_OWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)&v53[48] = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v53[56] = v11;
  v54 = &v53[8];
  v55 = v56;
  v56[0] = 0;
  v56[1] = 0;
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 20);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = v10 + 1;
    if (*(int *)(a1 + 4) <= 2)
      goto LABEL_5;
  }
  else
  {
    v14 = v10 + 1;
    if (SDWORD1(v8) <= 2)
    {
LABEL_5:
      v15 = *(_QWORD **)(a1 + 72);
      v16 = v55;
      *(_QWORD *)v55 = *v15;
      v16[1] = v15[1];
      goto LABEL_34;
    }
  }
  *(_DWORD *)&v53[4] = 0;
  sub_100256B48((uint64_t)v53, a1);
  v17 = *(unsigned int *)(a1 + 4);
  if ((int)v17 < 3)
  {
LABEL_34:
    if (!a2)
      a2 = v14;
    v45 = *(_DWORD *)(a1 + 12) * v14;
    if (a2 <= v45)
    {
      if (a3 || !(v45 % a2))
      {
LABEL_42:
        if (!a3)
        {
LABEL_51:
          if (v45 / a2 * a2 != v45)
          {
            v57 = 0;
            v58 = 0;
            qmemcpy((void *)sub_10029430C(&v57, 62), "The total width is not divisible by the new number of channels", 62);
            sub_100294B74(-15, &v57, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1121);
          }
          *(_DWORD *)&v53[12] = v45 / a2;
          v48 = *(_DWORD *)v53;
          v49 = 8 * a2 - 8;
          v22 = v55;
          *((_QWORD *)v55 + 1) = (((v49 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v53[0] & 7))) & 3);
          *(_DWORD *)a4 = v48 & 0xFFFFF007 | v49;
          v50 = *(_DWORD *)&v53[4];
          *(_QWORD *)(a4 + 4) = *(_QWORD *)&v53[4];
          *(_DWORD *)(a4 + 12) = v45 / a2;
          v51 = *(_OWORD *)&v53[32];
          *(_OWORD *)(a4 + 16) = *(_OWORD *)&v53[16];
          *(_OWORD *)(a4 + 32) = v51;
          v52 = *(_OWORD *)&v53[48];
          *(_QWORD *)(a4 + 80) = 0;
          *(_OWORD *)(a4 + 48) = v52;
          *(_QWORD *)(a4 + 64) = a4 + 8;
          *(_QWORD *)(a4 + 72) = a4 + 80;
          *(_QWORD *)(a4 + 88) = 0;
          if (v50 <= 2)
            goto LABEL_54;
          *(_QWORD *)(a4 + 64) = v54;
          *(_QWORD *)(a4 + 72) = v22;
          goto LABEL_56;
        }
LABEL_43:
        v46 = *(_DWORD *)(a1 + 8);
        if (a3 != v46)
        {
          if ((*(_BYTE *)(a1 + 1) & 0x40) == 0)
          {
            v57 = 0;
            v58 = 0;
            qmemcpy((void *)sub_10029430C(&v57, 72), "The matrix is not continuous, thus its number of rows can not be changed", 72);
            sub_100294B74(-13, &v57, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1102);
          }
          v47 = v46 * v45;
          if (a3 > v47)
          {
            v57 = 0;
            v58 = 0;
            qmemcpy((void *)sub_10029430C(&v57, 22), "Bad new number of rows", 22);
            sub_100294B74(-211, &v57, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1105);
          }
          v45 = v47 / a3;
          if (v47 / a3 * a3 != v47)
          {
            v57 = 0;
            v58 = 0;
            qmemcpy((void *)sub_10029430C(&v57, 78), "The total number of matrix elements is not divisible by the new number of rows", 78);
            sub_100294B74(-5, &v57, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1111);
          }
          *(_DWORD *)&v53[8] = a3;
          *(_QWORD *)v55 = ((0x88442211uLL >> (4 * (*(_DWORD *)a1 & 7u))) & 0xF) * v45;
        }
        goto LABEL_51;
      }
    }
    else if (a3)
    {
      goto LABEL_43;
    }
    a3 = *(_DWORD *)(a1 + 8) * v45 / a2;
    goto LABEL_42;
  }
  if (a2 && !a3)
  {
    v18 = (v17 - 1);
    if (!(*(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v18) * v14 % a2))
    {
      v19 = v53[0];
      v20 = 8 * a2 - 8;
      *(_DWORD *)v53 = *(_DWORD *)v53 & 0xFFFFF007 | v20;
      v21 = (((v20 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v19 & 7))) & 3);
      v22 = v55;
      *((_QWORD *)v55 + v18) = v21;
      v23 = v54;
      *(_DWORD *)&v54[4 * v18] = *(_DWORD *)&v54[4 * v18] * v14 / a2;
      v24 = *(_DWORD *)&v53[4];
      v25 = *(_OWORD *)&v53[16];
      *(_OWORD *)a4 = *(_OWORD *)v53;
      *(_OWORD *)(a4 + 16) = v25;
      v26 = *(_OWORD *)&v53[48];
      *(_OWORD *)(a4 + 32) = *(_OWORD *)&v53[32];
      *(_OWORD *)(a4 + 48) = v26;
      *(_QWORD *)(a4 + 80) = 0;
      *(_QWORD *)(a4 + 64) = a4 + 8;
      *(_QWORD *)(a4 + 72) = a4 + 80;
      *(_QWORD *)(a4 + 88) = 0;
      if (v24 <= 2)
      {
LABEL_54:
        *(_QWORD *)(a4 + 80) = *v22;
        *(_QWORD *)(a4 + 88) = v22[1];
        goto LABEL_57;
      }
      *(_QWORD *)(a4 + 64) = v23;
      *(_QWORD *)(a4 + 72) = v22;
LABEL_56:
      v54 = &v53[8];
      v55 = v56;
LABEL_57:
      *(_DWORD *)v53 = 1124007936;
      memset(&v53[4], 0, 60);
      v43 = v55;
      if (v55 == v56)
        return;
      goto LABEL_58;
    }
LABEL_33:
    v57 = 0;
    v58 = 0;
    v44 = sub_10029430C(&v57, 9);
    *(_BYTE *)(v44 + 8) = 50;
    *(_QWORD *)v44 = *(_QWORD *)"dims <= 2";
    sub_100294B74(-215, &v57, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1087);
  }
  if (a3 < 1)
    goto LABEL_33;
  LODWORD(v57) = a3;
  v27 = *(_QWORD *)(a1 + 64);
  v28 = (int *)(v27 + 4);
  v29 = 1;
  v30 = v17 & 0xFFFFFFFE;
  v31 = 1;
  do
  {
    v29 *= *(v28 - 1);
    v31 *= *v28;
    v28 += 2;
    v30 -= 2;
  }
  while (v30);
  v32 = v31 * v29;
  v33 = v17 - (v17 & 0xFFFFFFFE);
  if (v33)
  {
    v34 = (int *)(v27 + ((4 * v17) & 0x3FFFFFFF8));
    do
    {
      v35 = *v34++;
      v32 *= v35;
      --v33;
    }
    while (v33);
  }
  HIDWORD(v57) = v32 / a3;
  sub_10025B694((unsigned int *)a1, a2, 2, (uint64_t)&v57, a4);
  if (*(_QWORD *)&v53[56])
  {
    v36 = (unsigned int *)(*(_QWORD *)&v53[56] + 20);
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      v39 = *(_QWORD *)&v53[56];
      if (*(_QWORD *)&v53[56])
      {
        *(_QWORD *)&v53[56] = 0;
        v40 = *(_QWORD *)(v39 + 8);
        if (!v40)
        {
          v40 = *(_QWORD *)&v53[48];
          if (!*(_QWORD *)&v53[48])
            v40 = sub_100255D20();
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 48))(v40, v39);
      }
    }
  }
  *(_QWORD *)&v53[56] = 0;
  memset(&v53[16], 0, 32);
  if (*(int *)&v53[4] >= 1)
  {
    v41 = 0;
    v42 = v54;
    do
      *(_DWORD *)&v42[4 * v41++] = 0;
    while (v41 < *(int *)&v53[4]);
  }
  v43 = v55;
  if (v55 != v56)
LABEL_58:
    j__free(v43);
}

void sub_10025B5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10025B694@<X0>(unsigned int *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE v35[16];

  v5 = a2;
  if (a1[1] == a3 && (!a4 || a3 == 2))
    return sub_10025AFC4();
  if ((*((_BYTE *)a1 + 1) & 0x40) == 0)
  {
    v33 = 0;
    v34 = 0;
    qmemcpy((void *)sub_10029430C(&v33, 71), "Reshaping of n-dimensional non-continuous matrices is not supported yet", 71);
    sub_100294B74(-213, (uint64_t *)&v33, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4767);
  }
  if (!a4 || a2 < 0 || (a3 - 1) >= 0x20)
  {
    v33 = 0;
    v34 = 0;
    qmemcpy((void *)sub_10029430C(&v33, 54), "_cn >= 0 && _newndims > 0 && _newndims <= 32 && _newsz", 54);
    sub_100294B74(-215, (uint64_t *)&v33, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4731);
  }
  if (a2)
  {
    if (a2 >= 513)
    {
      v33 = 0;
      v34 = 0;
      v7 = sub_10029430C(&v33, 10);
      *(_WORD *)(v7 + 8) = 12849;
      *(_QWORD *)v7 = *(_QWORD *)"_cn <= 512";
      sub_100294B74(-215, (uint64_t *)&v33, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4736);
    }
    v8 = a1[1];
    if ((int)v8 < 3)
      goto LABEL_14;
  }
  else
  {
    v5 = ((*a1 >> 3) & 0x1FF) + 1;
    v8 = a1[1];
    if ((int)v8 < 3)
    {
LABEL_14:
      v9 = (int)a1[3] * (uint64_t)(int)a1[2];
      goto LABEL_22;
    }
  }
  v11 = *((_QWORD *)a1 + 8);
  v12 = (int *)(v11 + 4);
  v13 = 1;
  v14 = v8 & 0xFFFFFFFE;
  v15 = 1;
  do
  {
    v13 *= *(v12 - 1);
    v15 *= *v12;
    v12 += 2;
    v14 -= 2;
  }
  while (v14);
  v9 = v15 * v13;
  v16 = v8 - (v8 & 0xFFFFFFFE);
  if (v16)
  {
    v17 = (int *)(v11 + ((4 * v8) & 0x3FFFFFFF8));
    do
    {
      v18 = *v17++;
      v9 *= v18;
      --v16;
    }
    while (v16);
  }
LABEL_22:
  v29 = *a1;
  v19 = v5;
  v33 = v35;
  v34 = a3;
  if (a3 >= 5)
    operator new[]();
  if (a3 >= 1)
  {
    for (i = 0; i != a3; ++i)
    {
      v21 = *(_DWORD *)(a4 + 4 * i);
      if (v21 < 0)
      {
        v31 = 0;
        v32 = 0;
        qmemcpy((void *)sub_10029430C(&v31, 14), "_newsz[i] >= 0", 14);
        sub_100294B74(-215, &v31, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4745);
      }
      if (v21 >= 1)
      {
        *(_DWORD *)&v33[4 * i] = v21;
      }
      else
      {
        if (i >= (int)a1[1])
        {
          v31 = 0;
          v32 = 0;
          qmemcpy((void *)sub_10029430C(&v31, 68), "Copy dimension (which has zero size) is not present in source matrix", 68);
          sub_100294B74(-211, &v31, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4752);
        }
        v21 = *(_DWORD *)(*((_QWORD *)a1 + 8) + 4 * i);
        *(_DWORD *)&v33[4 * i] = v21;
      }
      v19 *= v21;
    }
  }
  if (v19 != v9 + v9 * ((v29 >> 3) & 0x1FF))
  {
    v31 = 0;
    v32 = 0;
    qmemcpy((void *)sub_10029430C(&v31, 62), "Requested and source matrices have different count of elements", 62);
    sub_100294B74(-209, &v31, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4758);
  }
  v22 = *(_OWORD *)a1;
  v23 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v23;
  *(_OWORD *)(a5 + 32) = *((_OWORD *)a1 + 2);
  v24 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(a5 + 48) = *((_QWORD *)a1 + 6);
  *(_QWORD *)(a5 + 56) = v24;
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 64) = a5 + 8;
  *(_QWORD *)(a5 + 72) = a5 + 80;
  *(_QWORD *)(a5 + 88) = 0;
  if (v24)
  {
    v25 = (unsigned int *)(v24 + 20);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    if ((int)a1[1] <= 2)
      goto LABEL_41;
  }
  else if (SDWORD1(v22) <= 2)
  {
LABEL_41:
    v27 = (_QWORD *)*((_QWORD *)a1 + 9);
    v28 = *(_QWORD **)(a5 + 72);
    *v28 = *v27;
    v28[1] = v27[1];
    goto LABEL_44;
  }
  *(_DWORD *)(a5 + 4) = 0;
  sub_100256B48(a5, (uint64_t)a1);
LABEL_44:
  *(_DWORD *)a5 = *(_DWORD *)a5 & 0xFFFFF007 | (8 * v5 - 8);
  sub_10026B7B4(a5, a3, (uint64_t)v33, 1);
  result = (uint64_t)v33;
  if (v33 != v35)
  {
    if (v33)
      operator delete[]();
  }
  return result;
}

void sub_10025BBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10025BCD8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  void *v56;
  _QWORD v57[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  void *v64;
  _QWORD v65[2];
  _BYTE v66[8];
  int v67;

  sub_100298C2C(v66, &off_10044E218);
  v4 = sub_10025E20C((int *)a1, -1);
  v5 = (((v4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3);
  if ((int)sub_100260608(a1, -1) > 2 || v5 >= 0x21)
  {
    v58 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v58, 29), "_src.dims() <= 2 && esz <= 32", 29);
    sub_100294B74(-215, (uint64_t *)&v58, "transpose", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3591);
  }
  if ((*(_DWORD *)a1 & 0x1F0000) == 0x10000)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_OWORD *)(v6 + 16);
    v58 = *(_OWORD *)v6;
    v59 = v7;
    v60 = *(_OWORD *)(v6 + 32);
    v8 = *(_QWORD *)(v6 + 56);
    v61 = *(_QWORD *)(v6 + 48);
    v62 = v8;
    v63 = (_DWORD *)&v58 + 2;
    v64 = v65;
    v65[0] = 0;
    v65[1] = 0;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 20);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    if (*(int *)(v6 + 4) > 2)
    {
      DWORD1(v58) = 0;
      sub_100256B48((uint64_t)&v58, v6);
    }
    else
    {
      v11 = *(_QWORD **)(v6 + 72);
      v12 = v64;
      *(_QWORD *)v64 = *v11;
      v12[1] = v11[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v58);
  }
  if (!(_QWORD)v59)
    goto LABEL_28;
  if (SDWORD1(v58) >= 3)
  {
    v14 = v63 + 1;
    v15 = 1;
    v16 = DWORD1(v58) & 0xFFFFFFFE;
    v17 = 1;
    do
    {
      v15 *= *(v14 - 1);
      v17 *= *v14;
      v14 += 2;
      v16 -= 2;
    }
    while (v16);
    v13 = v17 * v15;
    v18 = DWORD1(v58) - (unint64_t)(DWORD1(v58) & 0xFFFFFFFE);
    if (v18)
    {
      v19 = (_DWORD *)((char *)v63 + ((4 * DWORD1(v58)) & 0x3FFFFFFF8));
      do
      {
        v20 = *v19++;
        v13 *= v20;
        --v18;
      }
      while (v18);
    }
  }
  else
  {
    v13 = SHIDWORD(v58) * (uint64_t)SDWORD2(v58);
  }
  if (DWORD1(v58) && v13)
  {
    sub_10026285C(a2, HIDWORD(v58), DWORD2(v58), v58 & 0xFFF, -1, 0, 0);
    if ((*(_DWORD *)a2 & 0x1F0000) == 0x10000)
    {
      v21 = *(_QWORD *)(a2 + 8);
      v22 = *(_OWORD *)(v21 + 16);
      v50 = *(_OWORD *)v21;
      v51 = v22;
      v52 = *(_OWORD *)(v21 + 32);
      v23 = *(_QWORD *)(v21 + 56);
      v53 = *(_QWORD *)(v21 + 48);
      v54 = v23;
      v55 = (_DWORD *)&v50 + 2;
      v56 = v57;
      v57[0] = 0;
      v57[1] = 0;
      if (v23)
      {
        v24 = (unsigned int *)(v23 + 20);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
      }
      if (*(int *)(v21 + 4) > 2)
      {
        DWORD1(v50) = 0;
        sub_100256B48((uint64_t)&v50, v21);
      }
      else
      {
        v26 = *(_QWORD **)(v21 + 72);
        v27 = v56;
        *(_QWORD *)v56 = *v26;
        v27[1] = v26[1];
      }
    }
    else
    {
      sub_10025CCB8(a2, -1, (uint64_t)&v50);
    }
    if (__PAIR64__(DWORD2(v58), HIDWORD(v58)) == *((_QWORD *)&v50 + 1))
    {
      v28 = 0xFEFEEEA1uLL >> v5;
      if ((_QWORD)v51 == (_QWORD)v59)
      {
        if ((v28 & 1) != 0)
        {
          v47 = 0;
          v48 = 0;
          v45 = sub_10029430C(&v47, 9);
          *(_BYTE *)(v45 + 8) = 48;
          *(_QWORD *)v45 = *(_QWORD *)"func != 0";
          sub_100294B74(-215, &v47, "transpose", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3619);
        }
        if (DWORD2(v58) != HIDWORD(v58))
        {
          v47 = 0;
          v48 = 0;
          v46 = sub_10029430C(&v47, 20);
          *(_DWORD *)(v46 + 16) = 1937207154;
          *(_OWORD *)v46 = *(_OWORD *)"dst.cols == dst.rows";
          sub_100294B74(-215, &v47, "transpose", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3620);
        }
        qword_10044E238[v5](v51, v57[0]);
      }
      else
      {
        if ((v28 & 1) != 0)
        {
          v47 = 0;
          v48 = 0;
          v29 = sub_10029430C(&v47, 9);
          *(_BYTE *)(v29 + 8) = 48;
          *(_QWORD *)v29 = *(_QWORD *)"func != 0";
          sub_100294B74(-215, &v47, "transpose", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3626);
        }
        qword_10044E340[v5](v59);
      }
    }
    else
    {
      v30 = v63[1] == v55[1] && *v63 == *v55;
      if (!v30 || DWORD2(v58) != 1 && HIDWORD(v58) != 1)
      {
        v47 = 0;
        v48 = 0;
        qmemcpy((void *)sub_10029430C(&v47, 60), "src.size() == dst.size() && (src.cols == 1 || src.rows == 1)", 60);
        sub_100294B74(-215, &v47, "transpose", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3609);
      }
      LODWORD(v47) = 33619968;
      v48 = &v50;
      v49 = 0;
      sub_1002181EC((uint64_t)&v58, (uint64_t)&v47);
    }
    if (v54)
    {
      v31 = (unsigned int *)(v54 + 20);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = v54;
        if (v54)
        {
          v54 = 0;
          v35 = *(_QWORD *)(v34 + 8);
          if (!v35)
          {
            v35 = v53;
            if (!v53)
              v35 = sub_100255D20();
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v34);
        }
      }
    }
    v54 = 0;
    v51 = 0u;
    v52 = 0u;
    if (SDWORD1(v50) >= 1)
    {
      v36 = 0;
      v37 = v55;
      do
        v37[v36++] = 0;
      while (v36 < SDWORD1(v50));
    }
    if (v56 != v57)
      j__free(v56);
  }
  else
  {
LABEL_28:
    sub_100261B50(a2);
  }
  if (v62)
  {
    v38 = (unsigned int *)(v62 + 20);
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      v41 = v62;
      if (v62)
      {
        v62 = 0;
        v42 = *(_QWORD *)(v41 + 8);
        if (!v42)
        {
          v42 = v61;
          if (!v61)
            v42 = sub_100255D20();
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 48))(v42, v41);
      }
    }
  }
  v62 = 0;
  v59 = 0u;
  v60 = 0u;
  if (SDWORD1(v58) >= 1)
  {
    v43 = 0;
    v44 = v63;
    do
      v44[v43++] = 0;
    while (v43 < SDWORD1(v58));
  }
  if (v64 != v65)
    j__free(v64);
  if (v67)
    sub_1002989D0(v66);
}

void sub_10025C334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  sub_10029434C((uint64_t *)va);
  sub_100006BE4((uint64_t)va1);
  sub_100006BE4((uint64_t)va2);
  sub_1001D40CC(v2 - 48);
  _Unwind_Resume(a1);
}

void sub_10025C3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_100006BE4((uint64_t)va);
  sub_1001D40CC(v17 - 48);
  _Unwind_Resume(a1);
}

void sub_10025C438(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 48);
  _Unwind_Resume(a1);
}

unint64_t sub_10025C460(unsigned int *a1, int a2, int a3, char a4)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  BOOL v9;
  int *v10;

  if (!*((_QWORD *)a1 + 2))
    return 0xFFFFFFFFLL;
  v4 = *a1;
  if (a3 >= 1 && (*a1 & 7) != a3)
    return 0xFFFFFFFFLL;
  if ((v4 & 0x4000) == 0 && (a4 & 1) != 0)
    return 0xFFFFFFFFLL;
  v5 = a1[1];
  if (v5 == 3)
  {
    if ((v4 & 0xFF8) == 0)
    {
      v10 = (int *)*((_QWORD *)a1 + 8);
      if (v10[2] == a2
        && (*v10 == 1 || v10[1] == 1)
        && ((v4 & 0x4000) != 0 || *(_QWORD *)(*((_QWORD *)a1 + 9) + 8) == *(_QWORD *)(*((_QWORD *)a1 + 9) + 16) * a2))
      {
        v7 = *v10 * (uint64_t)v10[1];
        v6 = v10[2];
        return (v7 * v6 + v7 * v6 * ((v4 >> 3) & 0x1FF)) / a2;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (v5 != 2)
    return 0xFFFFFFFFLL;
  v6 = (int)a1[2];
  if (((_DWORD)v6 == 1 || (LODWORD(v7) = a1[3], (_DWORD)v7 == 1))
    && (LODWORD(v7) = a1[3], ((v4 >> 3) & 0x1FF) + 1 == a2)
    || (result = 0xFFFFFFFFLL, (v4 & 0xFF8) == 0) && (v9 = (_DWORD)v7 == a2, LODWORD(v7) = a2, v9))
  {
    v7 = (int)v7;
    return (v7 * v6 + v7 * v6 * ((v4 >> 3) & 0x1FF)) / a2;
  }
  return result;
}

void sub_10025C560(double *a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  double v13;
  double v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  _WORD *v21;
  uint64_t v22;
  double v23;
  double v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  __int128 v30;
  char *v31;
  unint64_t v32;
  _WORD *v33;
  unint64_t v34;
  _WORD *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _OWORD *v42;
  __int128 v43;
  char *v44;
  unint64_t v45;
  _WORD *v46;
  unint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  double v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _OWORD *v54;
  __int128 v55;
  char *v56;
  unint64_t v57;
  _DWORD *v58;
  _BYTE *v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int128 *v70;
  _OWORD *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  double *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _OWORD *v82;
  __int128 v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  float *v88;
  double *v89;
  double v90;
  float v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _OWORD *v95;
  __int128 v96;
  char *v97;
  unint64_t v98;
  _DWORD *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _OWORD *v103;
  __int128 v104;
  char *v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  _OWORD *v109;
  __int128 v110;
  char *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116[8];
  int v117;

  sub_100298C2C(v116, &off_10044E1D8);
  v8 = (a3 >> 3) & 0x1FF;
  if (v8 >= 4)
  {
    v114 = 0;
    v115 = 0;
    v9 = (_DWORD *)sub_10029430C(&v114, 7);
    *(_DWORD *)((char *)v9 + 3) = 874528060;
    *v9 = 1008758371;
    sub_100294B74(-215, &v114, "scalarToRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1168);
  }
  v10 = v8 + 1;
  switch(a3 & 7)
  {
    case 0uLL:
      v11 = (_BYTE *)a2;
      v12 = v8 + 1;
      do
      {
        v13 = *a1++;
        v14 = rint(v13);
        v15 = (uint64_t)v14 & ~((int)(uint64_t)v14 >> 31);
        if (v15 >= 255)
          LOBYTE(v15) = -1;
        *v11++ = v15;
        --v12;
      }
      while (v12);
      if ((int)v10 >= (int)a4)
        goto LABEL_94;
      v16 = ~v8 + a4;
      if (v16 < 8 || (unint64_t)(v8 + 1) < 0x20)
      {
        v17 = v8 + 1;
        goto LABEL_12;
      }
      if (v16 >= 0x20)
      {
        v100 = v16 & 0xFFFFFFFFFFFFFFE0;
        v102 = v16 & 0xFFFFFFFFFFFFFFE0;
        v103 = (_OWORD *)a2;
        do
        {
          v104 = v103[1];
          v105 = (char *)v103 + v8;
          *(_OWORD *)(v105 + 1) = *v103;
          *(_OWORD *)(v105 + 17) = v104;
          v103 += 2;
          v102 -= 32;
        }
        while (v102);
        if (v16 == v100)
          goto LABEL_94;
        if ((v16 & 0x18) == 0)
        {
          v17 = v100 + v10;
LABEL_12:
          v18 = a4 - v17;
          v19 = (_BYTE *)(a2 + v17);
          do
          {
            *v19 = v19[~v8];
            ++v19;
            --v18;
          }
          while (v18);
          goto LABEL_94;
        }
      }
      else
      {
        v100 = 0;
      }
      v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + v10;
      v106 = (_QWORD *)(a2 + v100);
      v107 = v100 - (v16 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *(_QWORD *)((char *)v106 + v10) = *v106;
        ++v106;
        v107 += 8;
      }
      while (v107);
      if (v16 != (v16 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_12;
      goto LABEL_94;
    case 1uLL:
      v59 = (_BYTE *)a2;
      v60 = v8 + 1;
      do
      {
        v61 = *a1++;
        v62 = (uint64_t)rint(v61);
        if ((int)v62 <= -128)
          LODWORD(v62) = -128;
        if ((int)v62 >= 127)
          LOBYTE(v62) = 127;
        *v59++ = v62;
        --v60;
      }
      while (v60);
      if ((int)v10 >= (int)a4)
        goto LABEL_94;
      v63 = ~v8 + a4;
      if (v63 < 8 || (unint64_t)(v8 + 1) < 0x20)
      {
        v64 = v8 + 1;
        goto LABEL_65;
      }
      if (v63 >= 0x20)
      {
        v101 = v63 & 0xFFFFFFFFFFFFFFE0;
        v108 = v63 & 0xFFFFFFFFFFFFFFE0;
        v109 = (_OWORD *)a2;
        do
        {
          v110 = v109[1];
          v111 = (char *)v109 + v8;
          *(_OWORD *)(v111 + 1) = *v109;
          *(_OWORD *)(v111 + 17) = v110;
          v109 += 2;
          v108 -= 32;
        }
        while (v108);
        if (v63 == v101)
          goto LABEL_94;
        if ((v63 & 0x18) == 0)
        {
          v64 = v101 + v10;
LABEL_65:
          v65 = a4 - v64;
          v66 = (_BYTE *)(a2 + v64);
          do
          {
            *v66 = v66[~v8];
            ++v66;
            --v65;
          }
          while (v65);
          goto LABEL_94;
        }
      }
      else
      {
        v101 = 0;
      }
      v64 = (v63 & 0xFFFFFFFFFFFFFFF8) + v10;
      v112 = (_QWORD *)(a2 + v101);
      v113 = v101 - (v63 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *(_QWORD *)((char *)v112 + v10) = *v112;
        ++v112;
        v113 += 8;
      }
      while (v113);
      if (v63 != (v63 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_65;
LABEL_94:
      if (v117)
        sub_1002989D0(v116);
      return;
    case 2uLL:
      v20 = v10;
      v21 = (_WORD *)a2;
      v22 = v10;
      do
      {
        v23 = *a1++;
        v24 = rint(v23);
        v25 = (uint64_t)v24 & ~((int)(uint64_t)v24 >> 31);
        if (v25 >= 0xFFFF)
          LOWORD(v25) = -1;
        *v21++ = v25;
        --v22;
      }
      while (v22);
      if ((int)v10 < (int)a4)
      {
        v26 = ~v8 + a4;
        if (v26 < 0x10)
          goto LABEL_25;
        v27 = 2 * ((a3 >> 3) & 0x1FF);
        if ((unint64_t)(v27 + 2) < 0x20)
          goto LABEL_25;
        v20 = (v26 & 0xFFFFFFFFFFFFFFF0) + v10;
        v28 = v26 & 0xFFFFFFFFFFFFFFF0;
        v29 = (_OWORD *)a2;
        do
        {
          v30 = v29[1];
          v31 = (char *)v29 + v27;
          *(_OWORD *)(v31 + 2) = *v29;
          *(_OWORD *)(v31 + 18) = v30;
          v29 += 2;
          v28 -= 16;
        }
        while (v28);
        if (v26 != (v26 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_25:
          v32 = a4 - v20;
          v33 = (_WORD *)(a2 + 2 * v20);
          do
          {
            *v33 = v33[~v8];
            ++v33;
            --v32;
          }
          while (v32);
        }
      }
      goto LABEL_94;
    case 3uLL:
      v34 = v10;
      v35 = (_WORD *)a2;
      v36 = v10;
      do
      {
        v37 = *a1++;
        v38 = (uint64_t)rint(v37);
        if ((int)v38 <= -32768)
          LODWORD(v38) = -32768;
        if ((int)v38 >= 0x7FFF)
          LOWORD(v38) = 0x7FFF;
        *v35++ = v38;
        --v36;
      }
      while (v36);
      if ((int)v10 < (int)a4)
      {
        v39 = ~v8 + a4;
        if (v39 < 0x10)
          goto LABEL_40;
        v40 = 2 * ((a3 >> 3) & 0x1FF);
        if ((unint64_t)(v40 + 2) < 0x20)
          goto LABEL_40;
        v34 = (v39 & 0xFFFFFFFFFFFFFFF0) + v10;
        v41 = v39 & 0xFFFFFFFFFFFFFFF0;
        v42 = (_OWORD *)a2;
        do
        {
          v43 = v42[1];
          v44 = (char *)v42 + v40;
          *(_OWORD *)(v44 + 2) = *v42;
          *(_OWORD *)(v44 + 18) = v43;
          v42 += 2;
          v41 -= 16;
        }
        while (v41);
        if (v39 != (v39 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_40:
          v45 = a4 - v34;
          v46 = (_WORD *)(a2 + 2 * v34);
          do
          {
            *v46 = v46[~v8];
            ++v46;
            --v45;
          }
          while (v45);
        }
      }
      goto LABEL_94;
    case 4uLL:
      v47 = v10;
      v48 = (_DWORD *)a2;
      v49 = v10;
      do
      {
        v50 = *a1++;
        *v48++ = (uint64_t)rint(v50);
        --v49;
      }
      while (v49);
      if ((int)v10 < (int)a4)
      {
        v51 = ~v8 + a4;
        if (v51 < 8)
          goto LABEL_51;
        v52 = 4 * ((a3 >> 3) & 0x1FF);
        if ((unint64_t)(v52 + 4) < 0x20)
          goto LABEL_51;
        v47 = (v51 & 0xFFFFFFFFFFFFFFF8) + v10;
        v53 = v51 & 0xFFFFFFFFFFFFFFF8;
        v54 = (_OWORD *)a2;
        do
        {
          v55 = v54[1];
          v56 = (char *)v54 + v52;
          *(_OWORD *)(v56 + 4) = *v54;
          *(_OWORD *)(v56 + 20) = v55;
          v54 += 2;
          v53 -= 8;
        }
        while (v53);
        if (v51 != (v51 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_51:
          v57 = a4 - v47;
          v58 = (_DWORD *)(a2 + 4 * v47);
          do
          {
            *v58 = v58[~v8];
            ++v58;
            --v57;
          }
          while (v57);
        }
      }
      goto LABEL_94;
    case 5uLL:
      v67 = v10;
      v87 = ((a3 >> 3) & 0x1FF) + 1;
      v88 = (float *)a2;
      v89 = a1;
      do
      {
        v90 = *v89++;
        v91 = v90;
        *v88++ = v91;
        --v87;
      }
      while (v87);
      if ((int)v10 < (int)a4)
      {
        v92 = ~v8 + a4;
        if (v92 < 8)
          goto LABEL_92;
        v93 = 4 * ((a3 >> 3) & 0x1FF);
        if ((unint64_t)(v93 + 4) < 0x20)
          goto LABEL_92;
        v67 = (v92 & 0xFFFFFFFFFFFFFFF8) + v10;
        v94 = v92 & 0xFFFFFFFFFFFFFFF8;
        v95 = (_OWORD *)a2;
        do
        {
          v96 = v95[1];
          v97 = (char *)v95 + v93;
          *(_OWORD *)(v97 + 4) = *v95;
          *(_OWORD *)(v97 + 20) = v96;
          v95 += 2;
          v94 -= 8;
        }
        while (v94);
        if (v92 != (v92 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_92:
          v98 = a4 - v67;
          v99 = (_DWORD *)(a2 + 4 * v67);
          do
          {
            *v99 = v99[~v8];
            ++v99;
            --v98;
          }
          while (v98);
        }
      }
      goto LABEL_94;
    case 6uLL:
      v68 = 0;
      v69 = v10;
      if (v8 < 3)
        goto LABEL_74;
      if ((unint64_t)(a2 - (_QWORD)a1) < 0x20)
        goto LABEL_74;
      v68 = v10 & 0x3FC;
      v70 = (__int128 *)(a1 + 2);
      v71 = (_OWORD *)(a2 + 16);
      v72 = v68;
      do
      {
        v73 = *v70;
        *(v71 - 1) = *(v70 - 1);
        *v71 = v73;
        v70 += 2;
        v71 += 2;
        v72 -= 4;
      }
      while (v72);
      if (v68 != v10)
      {
LABEL_74:
        v74 = ((a3 >> 3) & 0x1FF) - v68 + 1;
        v75 = v68;
        v76 = (_QWORD *)(a2 + 8 * v68);
        v77 = &a1[v75];
        do
        {
          v78 = *(_QWORD *)v77++;
          *v76++ = v78;
          --v74;
        }
        while (v74);
      }
      if ((int)v10 < (int)a4)
      {
        v79 = ~v8 + a4;
        if (v79 < 8)
          goto LABEL_82;
        v80 = a3 & 0xFF8;
        if ((unint64_t)(v80 + 8) < 0x20)
          goto LABEL_82;
        v69 = (v79 & 0xFFFFFFFFFFFFFFFCLL) + v10;
        v81 = v79 & 0xFFFFFFFFFFFFFFFCLL;
        v82 = (_OWORD *)a2;
        do
        {
          v83 = v82[1];
          v84 = (char *)v82 + v80;
          *(_OWORD *)(v84 + 8) = *v82;
          *(_OWORD *)(v84 + 24) = v83;
          v82 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v79 != (v79 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_82:
          v85 = a4 - v69;
          v86 = (_QWORD *)(a2 + 8 * v69);
          do
          {
            *v86 = v86[~v8];
            ++v86;
            --v85;
          }
          while (v85);
        }
      }
      goto LABEL_94;
    default:
      v114 = 0;
      v115 = 0;
      sub_100294B74(-210, &v114, "scalarToRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1193);
  }
}

void sub_10025CC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_10029434C(&a9);
  sub_1001D40CC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_10025CCB8(uint64_t a1@<X0>, signed int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  _QWORD *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int32x2_t __src;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;

  v4 = *(_DWORD *)a1;
  switch(HIWORD(*(_DWORD *)a1) & 0x1F)
  {
    case 0:
      goto LABEL_63;
    case 1:
      v8 = *(_QWORD *)(a1 + 8);
      if (a2 < 0)
      {
        *(_OWORD *)a3 = *(_OWORD *)v8;
        *(_OWORD *)(a3 + 16) = *(_OWORD *)(v8 + 16);
        *(_OWORD *)(a3 + 32) = *(_OWORD *)(v8 + 32);
        *(_QWORD *)(a3 + 48) = *(_QWORD *)(v8 + 48);
        v45 = *(_QWORD *)(v8 + 56);
        *(_QWORD *)(a3 + 56) = v45;
        *(_QWORD *)(a3 + 64) = a3 + 8;
        *(_QWORD *)(a3 + 80) = 0;
        *(_QWORD *)(a3 + 72) = a3 + 80;
        *(_QWORD *)(a3 + 88) = 0;
        if (v45)
        {
          v46 = (unsigned int *)(v45 + 20);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 + 1, v46));
        }
        if (*(int *)(v8 + 4) > 2)
        {
LABEL_82:
          *(_DWORD *)(a3 + 4) = 0;
          sub_100256B48(a3, v8);
        }
        else
        {
          v20 = *(_QWORD **)(v8 + 72);
LABEL_79:
          v48 = *(_QWORD **)(a3 + 72);
          *v48 = *v20;
          v48[1] = v20[1];
        }
      }
      else
      {
        __src.i32[0] = a2;
        __src.i32[1] = a2 + 1;
        v53 = 0x7FFFFFFF80000000;
        sub_100256CFC(a3, (_DWORD *)v8, (int *)&__src, &v53);
      }
      return;
    case 2:
    case 0xE:
      if ((a2 & 0x80000000) == 0)
      {
        __src = 0;
        v55 = 0;
        v7 = sub_10029430C(&__src, 5);
        *(_BYTE *)(v7 + 4) = 48;
        *(_DWORD *)v7 = 540811369;
        sub_100294B74(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1231);
      }
      v51 = *(_QWORD *)(a1 + 16);
      sub_10022FD68(a3, (int *)&v51, v4, *(_QWORD *)(a1 + 8), 0);
      return;
    case 3:
      if ((a2 & 0x80000000) == 0)
      {
        __src = 0;
        v55 = 0;
        v9 = sub_10029430C(&__src, 5);
        *(_BYTE *)(v9 + 4) = 48;
        *(_DWORD *)v9 = 540811369;
        sub_100294B74(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1237);
      }
      v10 = *(uint64_t **)(a1 + 8);
      if (*v10 == v10[1])
        goto LABEL_63;
      v11 = *(_DWORD *)a1;
      sub_10025D920(a1, 0xFFFFFFFF, (uint64_t)&v50);
      sub_10022FD68(a3, &v50, v11 & 0xFFF, *v10, 0);
      return;
    case 4:
      v12 = sub_10025E20C((int *)a1, a2);
      v13 = *(_QWORD **)(a1 + 8);
      if (a2 < 0 || (int)(-1431655765 * ((v13[1] - *v13) >> 3)) <= a2)
      {
        __src = 0;
        v55 = 0;
        qmemcpy((void *)sub_10029430C(&__src, 28), "0 <= i && i < (int)vv.size()", 28);
        sub_100294B74(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1266);
      }
      v14 = (uint64_t *)(*v13 + 24 * a2);
      if (*v14 == v14[1])
      {
LABEL_63:
        *(_DWORD *)a3 = 1124007936;
        *(_OWORD *)(a3 + 4) = 0u;
        *(_OWORD *)(a3 + 20) = 0u;
        *(_OWORD *)(a3 + 36) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_QWORD *)(a3 + 80) = 0;
        *(_QWORD *)(a3 + 64) = a3 + 8;
        *(_QWORD *)(a3 + 72) = a3 + 80;
        *(_QWORD *)(a3 + 88) = 0;
      }
      else
      {
        sub_10025D920(a1, a2, (uint64_t)&v49);
        sub_10022FD68(a3, &v49, v12, *v14, 0);
      }
      return;
    case 5:
      v15 = *(uint64_t **)(a1 + 8);
      if (a2 < 0 || (v16 = *v15, (int)(-1431655765 * ((unint64_t)(v15[1] - *v15) >> 5)) <= a2))
      {
        __src = 0;
        v55 = 0;
        qmemcpy((void *)sub_10029430C(&__src, 27), "0 <= i && i < (int)v.size()", 27);
        sub_100294B74(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1275);
      }
      v8 = v16 + 96 * a2;
      *(_OWORD *)a3 = *(_OWORD *)v8;
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v8 + 32);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(v8 + 48);
      v17 = *(_QWORD *)(v8 + 56);
      *(_QWORD *)(a3 + 56) = v17;
      *(_QWORD *)(a3 + 64) = a3 + 8;
      *(_QWORD *)(a3 + 80) = 0;
      *(_QWORD *)(a3 + 72) = a3 + 80;
      *(_QWORD *)(a3 + 88) = 0;
      if (v17)
      {
        v18 = (unsigned int *)(v17 + 20);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
      if (*(int *)(v8 + 4) > 2)
        goto LABEL_82;
      v20 = *(_QWORD **)(v16 + 96 * a2 + 72);
      goto LABEL_79;
    case 6:
      if ((a2 & 0x80000000) == 0)
      {
        __src = 0;
        v55 = 0;
        v21 = sub_10029430C(&__src, 5);
        *(_BYTE *)(v21 + 4) = 48;
        *(_DWORD *)v21 = 540811369;
        sub_100294B74(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1225);
      }
      v22 = *(_QWORD **)(a1 + 8);
      *(_DWORD *)a3 = 1124007936;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 36) = 0u;
      *(_OWORD *)(a3 + 20) = 0u;
      *(_OWORD *)(a3 + 4) = 0u;
      *(_QWORD *)(a3 + 80) = 0;
      *(_QWORD *)(a3 + 64) = a3 + 8;
      *(_QWORD *)(a3 + 72) = a3 + 80;
      *(_QWORD *)(a3 + 88) = 0;
      (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)*v22 + 24))(*v22, v22, a3, 0xFFFFFFFFLL);
      return;
    case 7:
      if ((a2 & 0x80000000) == 0)
      {
        __src = 0;
        v55 = 0;
        v23 = sub_10029430C(&__src, 5);
        *(_BYTE *)(v23 + 4) = 48;
        *(_DWORD *)v23 = 540811369;
        sub_100294B74(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1298);
      }
      __src = 0;
      v55 = 0;
      qmemcpy((void *)sub_10029430C(&__src, 75), "You should explicitly call mapHost/unmapHost methods for ogl::Buffer object", 75);
      sub_100294B74(-213, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1299);
    case 8:
      if ((a2 & 0x80000000) == 0)
      {
        __src = 0;
        v55 = 0;
        v24 = sub_10029430C(&__src, 5);
        *(_BYTE *)(v24 + 4) = 48;
        *(_DWORD *)v24 = 540811369;
        sub_100294B74(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1312);
      }
      v25 = *(_QWORD *)(a1 + 8);
      __src = vrev64_s32(*(int32x2_t *)(v25 + 4));
      sub_10022FD68(a3, (int *)&__src, *(_DWORD *)v25 & 0xFFF, *(_QWORD *)(v25 + 24), *(_QWORD *)(v25 + 16));
      return;
    case 9:
      if ((a2 & 0x80000000) == 0)
      {
        __src = 0;
        v55 = 0;
        v26 = sub_10029430C(&__src, 5);
        *(_BYTE *)(v26 + 4) = 48;
        *(_DWORD *)v26 = 540811369;
        sub_100294B74(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1305);
      }
      __src = 0;
      v55 = 0;
      qmemcpy((void *)sub_10029430C(&__src, 66), "You should explicitly call download method for cuda::GpuMat object", 66);
      sub_100294B74(-213, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1306);
    case 0xA:
      v27 = *(_QWORD *)(a1 + 8);
      if (a2 < 0)
      {
        sub_10029D2D4(v27, v4 & 0x3000000, a3);
      }
      else
      {
        sub_10029D2D4(v27, v4 & 0x3000000, (uint64_t)&__src);
        LODWORD(v53) = a2;
        HIDWORD(v53) = a2 + 1;
        v52 = 0x7FFFFFFF80000000;
        sub_100256CFC(a3, &__src, (int *)&v53, &v52);
        if (v59)
        {
          v28 = (unsigned int *)(v59 + 20);
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            v31 = v59;
            if (v59)
            {
              v59 = 0;
              v32 = *(_QWORD *)(v31 + 8);
              if (!v32)
              {
                v32 = v58;
                if (!v58)
                  v32 = sub_100255D20();
              }
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 48))(v32, v31);
            }
          }
        }
        v59 = 0;
        v56 = 0u;
        v57 = 0u;
        if (__src.i32[1] >= 1)
        {
          v33 = 0;
          v34 = v60;
          do
            *(_DWORD *)(v34 + 4 * v33++) = 0;
          while (v33 < __src.i32[1]);
        }
        if (v61 != &v62)
          j__free(v61);
      }
      return;
    case 0xB:
      v35 = *(_QWORD **)(a1 + 8);
      if (a2 < 0 || (int)(-858993459 * ((v35[1] - *v35) >> 4)) <= a2)
      {
        __src = 0;
        v55 = 0;
        qmemcpy((void *)sub_10029430C(&__src, 27), "0 <= i && i < (int)v.size()", 27);
        sub_100294B74(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1291);
      }
      sub_10029D2D4(*v35 + 80 * a2, v4 & 0x3000000, a3);
      return;
    case 0xC:
      if ((a2 & 0x80000000) == 0)
      {
        __src = 0;
        v55 = 0;
        v36 = sub_10029430C(&__src, 5);
        *(_BYTE *)(v36 + 4) = 48;
        *(_DWORD *)v36 = 540811369;
        sub_100294B74(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1246);
      }
      v37 = *(_QWORD **)(a1 + 8);
      v38 = v37[1];
      *(_DWORD *)a3 = 1124007936;
      *(_OWORD *)(a3 + 4) = 0u;
      *(_OWORD *)(a3 + 20) = 0u;
      *(_OWORD *)(a3 + 36) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_QWORD *)(a3 + 80) = 0;
      *(_QWORD *)(a3 + 64) = a3 + 8;
      *(_QWORD *)(a3 + 72) = a3 + 80;
      *(_QWORD *)(a3 + 88) = 0;
      if ((_DWORD)v38)
      {
        __src.i32[0] = 1;
        __src.i32[1] = v38;
        sub_100255F30((char *)a3, 2, (uint64_t *)&__src, 0);
        if ((int)v38 >= 1)
        {
          v39 = 0;
          v40 = *(_QWORD *)(a3 + 16);
          do
          {
            *(_BYTE *)(v40 + v39) = (*(_QWORD *)(*v37 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v39) & 1;
            ++v39;
          }
          while (v38 != v39);
        }
      }
      return;
    case 0xF:
      v41 = *(_QWORD *)(a1 + 8);
      if (a2 < 0 || *(_DWORD *)(a1 + 20) <= a2)
      {
        __src = 0;
        v55 = 0;
        qmemcpy((void *)sub_10029430C(&__src, 23), "0 <= i && i < sz.height", 23);
        sub_100294B74(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1283);
      }
      v8 = v41 + 96 * a2;
      *(_OWORD *)a3 = *(_OWORD *)v8;
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v8 + 32);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(v8 + 48);
      v42 = *(_QWORD *)(v8 + 56);
      *(_QWORD *)(a3 + 56) = v42;
      *(_QWORD *)(a3 + 64) = a3 + 8;
      *(_QWORD *)(a3 + 80) = 0;
      *(_QWORD *)(a3 + 72) = a3 + 80;
      *(_QWORD *)(a3 + 88) = 0;
      if (v42)
      {
        v43 = (unsigned int *)(v42 + 20);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 + 1, v43));
      }
      if (*(int *)(v8 + 4) > 2)
        goto LABEL_82;
      v20 = *(_QWORD **)(v41 + 96 * a2 + 72);
      goto LABEL_79;
    default:
      __src = 0;
      v55 = 0;
      qmemcpy((void *)sub_10029430C(&__src, 30), "Unknown/unsupported array type", 30);
      sub_100294B74(-213, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1319);
  }
}

void sub_10025D780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10025D914(_DWORD *a1)
{
  return *a1 & 0x1F0000;
}

uint64_t sub_10025D920@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x2_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  signed int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  switch(*(_WORD *)(result + 2) & 0x1F)
  {
    case 0:
      goto LABEL_54;
    case 1:
      if ((a2 & 0x80000000) == 0)
      {
        v28 = 0;
        v29 = 0;
        v5 = sub_10029430C(&v28, 5);
        *(_DWORD *)v5 = 540811369;
        *(_BYTE *)(v5 + 4) = 48;
        sub_100294B74(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1592);
      }
      v6 = *(_QWORD *)(result + 8);
      goto LABEL_50;
    case 2:
    case 0xE:
      if ((a2 & 0x80000000) == 0)
      {
        v28 = 0;
        v29 = 0;
        v4 = sub_10029430C(&v28, 5);
        *(_DWORD *)v4 = 540811369;
        *(_BYTE *)(v4 + 4) = 48;
        sub_100294B74(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1610);
      }
      *(_QWORD *)a3 = *(_QWORD *)(result + 16);
      return result;
    case 3:
      if ((a2 & 0x80000000) == 0)
      {
        v28 = 0;
        v29 = 0;
        v7 = sub_10029430C(&v28, 5);
        *(_DWORD *)v7 = 540811369;
        *(_BYTE *)(v7 + 4) = 48;
        sub_100294B74(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1616);
      }
      v8 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8) - **(_QWORD **)(result + 8);
      if (v8 != v8 >> 2)
        v8 /= (unint64_t)((((*(_DWORD *)result >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * (*(_BYTE *)result & 7))) & 3));
      goto LABEL_67;
    case 4:
      v9 = *(_QWORD **)(result + 8);
      if ((a2 & 0x80000000) == 0)
      {
        if ((int)(-1431655765 * ((v9[1] - *v9) >> 3)) <= (int)a2)
        {
          sub_1001F37D4(&v28, "i < (int)vv.size()");
          sub_100294B74(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1638);
        }
        v10 = *(_QWORD *)(*v9 + 24 * a2 + 8) - *(_QWORD *)(*v9 + 24 * a2);
        if (v10 == v10 >> 2)
        {
          *(_DWORD *)a3 = v10;
          *(_DWORD *)(a3 + 4) = 1;
          return result;
        }
        v8 = v10
           / (unint64_t)((((*(_DWORD *)result >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * (*(_BYTE *)result & 7))) & 3));
        goto LABEL_67;
      }
      v23 = v9[1];
      if (*v9 == v23)
        goto LABEL_54;
      v24 = (unint64_t)(v23 - *v9) >> 3;
      goto LABEL_59;
    case 5:
      v11 = *(_QWORD **)(result + 8);
      if ((a2 & 0x80000000) == 0)
      {
        if ((int)(-1431655765 * ((v11[1] - *v11) >> 5)) <= (int)a2)
        {
          sub_1001F37D4(&v28, "i < (int)vv.size()");
          sub_100294B74(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1650);
        }
        v6 = *v11 + 96 * a2;
        goto LABEL_50;
      }
      v25 = v11[1];
      if (*v11 == v25)
        goto LABEL_54;
      v24 = (unint64_t)(v25 - *v11) >> 5;
LABEL_59:
      v22 = -1431655765 * v24;
      goto LABEL_65;
    case 6:
      if ((a2 & 0x80000000) == 0)
      {
        v28 = 0;
        v29 = 0;
        v12 = sub_10029430C(&v28, 5);
        *(_DWORD *)v12 = 540811369;
        *(_BYTE *)(v12 + 4) = 48;
        sub_100294B74(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1598);
      }
      return sub_1002507C0(*(_QWORD *)(result + 8), a3);
    case 7:
      if ((a2 & 0x80000000) == 0)
      {
        v28 = 0;
        v29 = 0;
        v13 = sub_10029430C(&v28, 5);
        *(_DWORD *)v13 = 540811369;
        *(_BYTE *)(v13 + 4) = 48;
        sub_100294B74(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1686);
      }
      v14 = *(int32x2_t *)(*(_QWORD *)(result + 8) + 16);
      goto LABEL_52;
    case 8:
      if ((a2 & 0x80000000) == 0)
      {
        v28 = 0;
        v29 = 0;
        v15 = sub_10029430C(&v28, 5);
        *(_DWORD *)v15 = 540811369;
        *(_BYTE *)(v15 + 4) = 48;
        sub_100294B74(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1700);
      }
      goto LABEL_31;
    case 9:
      if ((a2 & 0x80000000) == 0)
      {
        v28 = 0;
        v29 = 0;
        v16 = sub_10029430C(&v28, 5);
        *(_DWORD *)v16 = 540811369;
        *(_BYTE *)(v16 + 4) = 48;
        sub_100294B74(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1693);
      }
LABEL_31:
      v14 = *(int32x2_t *)(*(_QWORD *)(result + 8) + 4);
      goto LABEL_52;
    case 0xA:
      if ((a2 & 0x80000000) == 0)
      {
        v28 = 0;
        v29 = 0;
        v17 = sub_10029430C(&v28, 5);
        *(_DWORD *)v17 = 540811369;
        *(_BYTE *)(v17 + 4) = 48;
        sub_100294B74(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1604);
      }
      v18 = *(int32x2_t **)(*(_QWORD *)(result + 8) + 48);
      goto LABEL_51;
    case 0xB:
      v19 = *(_QWORD **)(result + 8);
      if ((a2 & 0x80000000) == 0)
      {
        if ((int)(-858993459 * ((v19[1] - *v19) >> 4)) <= (int)a2)
        {
          sub_1001F37D4(&v28, "i < (int)vv.size()");
          sub_100294B74(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1679);
        }
        v18 = *(int32x2_t **)(*v19 + 80 * a2 + 48);
        goto LABEL_51;
      }
      v26 = v19[1];
      if (*v19 == v26)
        goto LABEL_54;
      v22 = -858993459 * ((unint64_t)(v26 - *v19) >> 4);
      goto LABEL_65;
    case 0xC:
      if ((a2 & 0x80000000) == 0)
      {
        v28 = 0;
        v29 = 0;
        v20 = sub_10029430C(&v28, 5);
        *(_DWORD *)v20 = 540811369;
        *(_BYTE *)(v20 + 4) = 48;
        sub_100294B74(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1625);
      }
      v8 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
      goto LABEL_67;
    case 0xD:
      v21 = *(_QWORD **)(result + 8);
      if ((a2 & 0x80000000) == 0)
      {
        if ((int)((v21[1] - *v21) >> 6) <= (int)a2)
        {
          sub_1001F37D4(&v28, "i < (int)vv.size()");
          sub_100294B74(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1670);
        }
        v14 = *(int32x2_t *)(*v21 + ((unint64_t)a2 << 6) + 4);
        goto LABEL_52;
      }
      v27 = v21[1];
      if (*v21 == v27)
        goto LABEL_54;
      v8 = (unint64_t)(v27 - *v21) >> 6;
LABEL_67:
      *(_DWORD *)a3 = v8;
      *(_DWORD *)(a3 + 4) = 1;
      break;
    case 0xF:
      v22 = *(_DWORD *)(result + 20);
      if ((a2 & 0x80000000) != 0)
      {
        if (v22)
        {
LABEL_65:
          *(_DWORD *)a3 = v22;
          *(_DWORD *)(a3 + 4) = 1;
        }
        else
        {
LABEL_54:
          *(_QWORD *)a3 = 0;
        }
      }
      else
      {
        if (v22 <= (int)a2)
        {
          sub_1001F37D4(&v28, "i < sz.height");
          sub_100294B74(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1660);
        }
        v6 = *(_QWORD *)(result + 8) + 96 * a2;
LABEL_50:
        v18 = *(int32x2_t **)(v6 + 64);
LABEL_51:
        v14 = *v18;
LABEL_52:
        *(int32x2_t *)a3 = vrev64_s32(v14);
      }
      break;
    default:
      v28 = 0;
      v29 = 0;
      qmemcpy((void *)sub_10029430C(&v28, 30), "Unknown/unsupported array type", 30);
      sub_100294B74(-213, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1705);
  }
  return result;
}

void sub_10025E0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10025E20C(int *a1, int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18[2];

  v3 = *a1;
  v4 = *a1 & 0x1F0000;
  switch(v4)
  {
    case 0xA0000u:
      return **((_DWORD **)a1 + 1) & 0xFFF;
    case 0x60000u:
      return sub_1002508D0(*((_QWORD *)a1 + 1));
    case 0x10000u:
      return **((_DWORD **)a1 + 1) & 0xFFF;
  }
  if ((v3 & 0x170000) != 0x40000 && (v3 & 0x1E0000) != 0x20000 && v4 != 917504)
  {
    result = 0xFFFFFFFFLL;
    switch(HIWORD(v4))
    {
      case 0u:
        return result;
      case 5u:
        v6 = (uint64_t *)*((_QWORD *)a1 + 1);
        v7 = *v6;
        v8 = v6[1];
        if (*v6 != v8)
        {
          if ((int)(-1431655765 * ((unint64_t)(v8 - v7) >> 5)) <= a2)
          {
            sub_1001F37D4(v18, "i < (int)vv.size()");
            sub_100294B74(-215, v18, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1997);
          }
          v9 = a2 & ~(a2 >> 31);
          v10 = 96;
          goto LABEL_20;
        }
        if ((v3 & 0x80000000) == 0)
        {
          sub_1001F37D4(v18, "(flags & FIXED_TYPE) != 0");
          sub_100294B74(-215, v18, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1994);
        }
        return v3 & 0xFFF;
      case 7u:
        return *(unsigned int *)(*((_QWORD *)a1 + 1) + 24);
      case 8u:
      case 9u:
        return **((_DWORD **)a1 + 1) & 0xFFF;
      case 0xBu:
        v11 = (uint64_t *)*((_QWORD *)a1 + 1);
        v7 = *v11;
        v12 = v11[1];
        if (*v11 == v12)
        {
          if ((v3 & 0x80000000) == 0)
          {
            sub_1001F37D4(v18, "(flags & FIXED_TYPE) != 0");
            sub_100294B74(-215, v18, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1982);
          }
          return v3 & 0xFFF;
        }
        if ((int)(-858993459 * ((unint64_t)(v12 - v7) >> 4)) <= a2)
        {
          sub_1001F37D4(v18, "i < (int)vv.size()");
          sub_100294B74(-215, v18, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1985);
        }
        v9 = a2 & ~(a2 >> 31);
        v10 = 80;
LABEL_20:
        v13 = v9 * (unint64_t)v10;
        return *(_DWORD *)(v7 + v13) & 0xFFF;
      case 0xDu:
        v14 = (uint64_t *)*((_QWORD *)a1 + 1);
        v7 = *v14;
        v15 = v14[1];
        if (*v14 == v15)
        {
          if ((v3 & 0x80000000) == 0)
          {
            sub_1001F37D4(v18, "(flags & FIXED_TYPE) != 0");
            sub_100294B74(-215, v18, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2018);
          }
          return v3 & 0xFFF;
        }
        if ((int)((unint64_t)(v15 - v7) >> 6) <= a2)
        {
          sub_1001F37D4(v18, "i < (int)vv.size()");
          sub_100294B74(-215, v18, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2021);
        }
        v13 = (unint64_t)(a2 & ~(a2 >> 31)) << 6;
        return *(_DWORD *)(v7 + v13) & 0xFFF;
      case 0xFu:
        v16 = a1[5];
        if (v16)
        {
          v17 = *((_QWORD *)a1 + 1);
          if (v16 <= a2)
          {
            sub_1001F37D4(v18, "i < sz.height");
            sub_100294B74(-215, v18, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2009);
          }
          return *(_DWORD *)(v17 + 96 * (a2 & ~(a2 >> 31))) & 0xFFF;
        }
        if ((v3 & 0x80000000) == 0)
        {
          sub_1001F37D4(v18, "(flags & FIXED_TYPE) != 0");
          sub_100294B74(-215, v18, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2006);
        }
        return result;
      default:
        sub_1001F37D4(v18, "Unknown/unsupported array type");
        sub_100294B74(-213, v18, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2034);
    }
  }
  return v3 & 0xFFF;
}

void sub_10025E640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10025E70C(uint64_t a1@<X0>, signed int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v5 = *(_DWORD *)a1 & 0x1F0000;
  v6 = *(_DWORD *)a1 & 0x3000000;
  switch(v5)
  {
    case 65536:
      v8 = *(_DWORD **)(a1 + 8);
      if (a2 < 0)
      {
        sub_10029AF80(*(_QWORD *)(a1 + 8), *(_DWORD *)a1 & 0x3000000, 0, a3);
        return;
      }
      LODWORD(v43) = a2;
      HIDWORD(v43) = a2 + 1;
      v42 = 0x7FFFFFFF80000000;
      sub_100256CFC((uint64_t)&v34, v8, (int *)&v43, &v42);
      sub_10029AF80((uint64_t)&v34, v6, 0, a3);
      if (v38)
      {
        v9 = (unsigned int *)(v38 + 20);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          v12 = v38;
          if (v38)
          {
            v38 = 0;
            v13 = *(_QWORD *)(v12 + 8);
            if (!v13)
            {
              v13 = v37;
              if (!v37)
                v13 = sub_100255D20();
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, v12);
          }
        }
      }
      v38 = 0;
      v35 = 0u;
      v36 = 0u;
      if (SDWORD1(v34) >= 1)
      {
        v14 = 0;
        v15 = v39;
        do
          *(_DWORD *)(v15 + 4 * v14++) = 0;
        while (v14 < SDWORD1(v34));
      }
      v16 = v40;
      if (v40 != &v41)
        goto LABEL_21;
      break;
    case 720896:
      v17 = *(uint64_t **)(a1 + 8);
      if (a2 < 0 || (v18 = *v17, (int)(-858993459 * ((unint64_t)(v17[1] - *v17) >> 4)) <= a2))
      {
        v34 = 0uLL;
        qmemcpy((void *)sub_10029430C(&v34, 27), "0 <= i && i < (int)v.size()", 27);
        sub_100294B74(-215, (uint64_t *)&v34, "getUMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1339);
      }
      v7 = v18 + 80 * a2;
      *(_OWORD *)a3 = *(_OWORD *)v7;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v7 + 16);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(v7 + 24);
      v19 = *(_QWORD *)(v7 + 32);
      *(_QWORD *)(a3 + 32) = v19;
      *(_QWORD *)(a3 + 40) = *(_QWORD *)(v7 + 40);
      *(_QWORD *)(a3 + 48) = a3 + 8;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 56) = a3 + 64;
      *(_QWORD *)(a3 + 72) = 0;
      if (v19)
      {
        v20 = (unsigned int *)(v19 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
      }
      if (*(int *)(v7 + 4) <= 2)
      {
        v22 = *(_QWORD **)(v18 + 80 * a2 + 56);
LABEL_37:
        v26 = *(_QWORD **)(a3 + 56);
        *v26 = *v22;
        v26[1] = v22[1];
        return;
      }
LABEL_53:
      *(_DWORD *)(a3 + 4) = 0;
      sub_10029BD28(a3, v7);
      return;
    case 655360:
      v7 = *(_QWORD *)(a1 + 8);
      if ((a2 & 0x80000000) == 0)
      {
        LODWORD(v34) = a2;
        DWORD1(v34) = a2 + 1;
        v43 = 0x7FFFFFFF80000000;
        sub_10029C5A8(a3, v7, &v34, &v43);
        return;
      }
      *(_OWORD *)a3 = *(_OWORD *)v7;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v7 + 16);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(v7 + 24);
      v23 = *(_QWORD *)(v7 + 32);
      *(_QWORD *)(a3 + 32) = v23;
      *(_QWORD *)(a3 + 40) = *(_QWORD *)(v7 + 40);
      *(_QWORD *)(a3 + 48) = a3 + 8;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 56) = a3 + 64;
      *(_QWORD *)(a3 + 72) = 0;
      if (v23)
      {
        v24 = (unsigned int *)(v23 + 16);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
      }
      if (*(int *)(v7 + 4) <= 2)
      {
        v22 = *(_QWORD **)(v7 + 56);
        goto LABEL_37;
      }
      goto LABEL_53;
    default:
      sub_10025CCB8(a1, a2, (uint64_t)&v34);
      sub_10029AF80((uint64_t)&v34, v6, 0, a3);
      if (v38)
      {
        v27 = (unsigned int *)(v38 + 20);
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = v38;
          if (v38)
          {
            v38 = 0;
            v31 = *(_QWORD *)(v30 + 8);
            if (!v31)
            {
              v31 = v37;
              if (!v37)
                v31 = sub_100255D20();
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 48))(v31, v30);
          }
        }
      }
      v38 = 0;
      v35 = 0u;
      v36 = 0u;
      if (SDWORD1(v34) >= 1)
      {
        v32 = 0;
        v33 = v39;
        do
          *(_DWORD *)(v33 + 4 * v32++) = 0;
        while (v32 < SDWORD1(v34));
      }
      v16 = v40;
      if (v40 != &v41)
LABEL_21:
        j__free(v16);
      break;
  }
}

void sub_10025EB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10025EBD0(uint64_t a1, uint64_t *a2)
{
  unsigned int v2;
  unint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  void **v36;
  void **v37;
  _QWORD *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  unsigned int v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  _BYTE *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  void **v108;
  void **v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _OWORD *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void **v131;
  void **v132;
  void **v133;
  _QWORD *v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  int v145;
  uint64_t v146;
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _OWORD *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void **v163;
  void **v164;
  void **v165;
  _QWORD *v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int *v173;
  uint64_t *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _OWORD *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void **v194;
  void **v195;
  void **v196;
  _QWORD *v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  unsigned int *v215;
  unsigned int v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _OWORD *v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void **v226;
  void **v227;
  void **v228;
  _QWORD *v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _BYTE *v236;
  unsigned int *v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int *v243;
  uint64_t v244;
  _QWORD *v245;
  unsigned int v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t *v251;
  _QWORD *v252;
  uint64_t *v253;
  uint64_t *v254;
  int v255;
  _BYTE v256[64];
  _BYTE *v257;
  void *v258;
  _BYTE v259[16];
  _BYTE v260[64];
  int *v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266[6];

  v2 = *(_DWORD *)a1;
  switch(HIWORD(*(_DWORD *)a1) & 0x1F)
  {
    case 0:
      sub_1002693A4((uint64_t)a2, *a2);
      return;
    case 1:
      v7 = *(int **)(a1 + 8);
      v8 = **((int **)v7 + 8);
      v9 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
      if (v8 <= v9)
      {
        if (v8 < v9)
          sub_1002693A4((uint64_t)a2, *a2 + 96 * (int)v8);
      }
      else
      {
        sub_100268DF0(a2, v8 - v9);
      }
      v253 = a2;
      if ((int)v8 < 1)
        return;
      v59 = 0;
      v60 = v8;
      break;
    case 2:
    case 0xE:
      v5 = *(int *)(a1 + 20);
      v6 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
      if (v5 <= v6)
      {
        if (v5 < v6)
          sub_1002693A4((uint64_t)a2, *a2 + 96 * (int)v5);
      }
      else
      {
        sub_100268DF0(a2, v5 - v6);
      }
      v251 = a2;
      if ((_DWORD)v5)
      {
        v17 = 0;
        v248 = (((v2 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v2 & 7))) & 3);
        do
        {
          sub_10000A364((uint64_t)v260, 1, *(_DWORD *)(a1 + 16), *(_DWORD *)a1 & 0xFFF, *(_QWORD *)(a1 + 8) + v17 * v248 * *(int *)(a1 + 16), 0);
          v18 = *v251;
          v19 = (_BYTE *)(*v251 + 96 * v17);
          if (v19 == v260)
          {
            if (*(_QWORD *)&v260[56])
            {
              v39 = (unsigned int *)(*(_QWORD *)&v260[56] + 20);
              do
              {
                v40 = __ldaxr(v39);
                v41 = v40 - 1;
              }
              while (__stlxr(v41, v39));
              if (!v41)
              {
                v42 = *(_QWORD *)&v260[56];
                if (*(_QWORD *)&v260[56])
                {
                  *(_QWORD *)&v260[56] = 0;
                  v43 = *(_QWORD *)(v42 + 8);
                  if (!v43)
                  {
                    v43 = *(_QWORD *)&v260[48];
                    if (!*(_QWORD *)&v260[48])
                      v43 = sub_100255D20();
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 48))(v43, v42);
                }
              }
            }
            *(_QWORD *)&v260[56] = 0;
            memset(&v260[16], 0, 32);
            if (*(int *)&v260[4] >= 1)
            {
              v44 = 0;
              v45 = v261;
              do
                v45[v44++] = 0;
              while (v44 < *(int *)&v260[4]);
            }
          }
          else
          {
            v20 = v18 + 96 * v17;
            v23 = *(_QWORD *)(v20 + 56);
            v22 = (uint64_t *)(v20 + 56);
            v21 = v23;
            if (v23)
            {
              v24 = (unsigned int *)(v21 + 20);
              do
              {
                v25 = __ldaxr(v24);
                v26 = v25 - 1;
              }
              while (__stlxr(v26, v24));
              if (!v26)
              {
                v27 = *v22;
                if (*v22)
                {
                  *v22 = 0;
                  v28 = *(_QWORD *)(v27 + 8);
                  if (!v28)
                  {
                    v28 = *(_QWORD *)(v18 + 96 * v17 + 48);
                    if (!v28)
                      v28 = sub_100255D20();
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 48))(v28, v27);
                }
              }
            }
            v29 = v18 + 96 * v17;
            *(_OWORD *)(v29 + 16) = 0u;
            v30 = (_OWORD *)(v29 + 16);
            *v22 = 0;
            v31 = *((_DWORD *)v30 - 3);
            v30[1] = 0u;
            if (v31 >= 1)
            {
              v32 = 0;
              v33 = *(_QWORD *)(v18 + 96 * v17 + 64);
              do
                *(_DWORD *)(v33 + 4 * v32++) = 0;
              while (v32 < *((int *)v30 - 3));
            }
            v34 = v18 + 96 * v17;
            v37 = *(void ***)(v34 + 72);
            v36 = (void **)(v34 + 72);
            v35 = v37;
            *(_OWORD *)v19 = *(_OWORD *)v260;
            *v30 = *(_OWORD *)&v260[16];
            *(_OWORD *)(v36 - 5) = *(_OWORD *)&v260[32];
            *(_OWORD *)(v36 - 3) = *(_OWORD *)&v260[48];
            if (v37 != v36 + 1)
            {
              j__free(v35);
              *v36 = v36 + 1;
              *(_QWORD *)(v18 + 96 * v17 + 64) = v36 - 8;
              v35 = v36 + 1;
            }
            v38 = v262;
            if (*(int *)&v260[4] > 2)
            {
              *v36 = v262;
              *(_QWORD *)(v18 + 96 * v17 + 64) = v261;
              v261 = (int *)&v260[8];
              v262 = &v263;
            }
            else
            {
              *v35 = *(void **)v262;
              v35[1] = (void *)v38[1];
            }
            *(_DWORD *)v260 = 1124007936;
            memset(&v260[4], 0, 60);
          }
          if (v262 != &v263)
            j__free(v262);
          ++v17;
        }
        while (v17 != v5);
      }
      return;
    case 3:
      v245 = *(_QWORD **)(a1 + 8);
      sub_10025D920(a1, 0xFFFFFFFF, (uint64_t)v260);
      v46 = *(_DWORD *)a1;
      v47 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
      v249 = *(int *)v260;
      if (*(int *)v260 <= v47)
      {
        if (*(int *)v260 < v47)
          sub_1002693A4((uint64_t)a2, *a2 + 96 * *(int *)v260);
      }
      else
      {
        sub_100268DF0(a2, *(int *)v260 - v47);
      }
      if ((_DWORD)v249)
      {
        v143 = 0;
        v144 = v46 & 7;
        v145 = ((v46 >> 3) & 0x1FF) + 1;
        v244 = (v145 << ((0xFA50u >> (2 * (v46 & 7))) & 3));
        do
        {
          sub_10000A364((uint64_t)v260, 1, v145, v144, *v245 + v143 * v244, 0);
          v146 = *a2;
          v147 = (_BYTE *)(*a2 + 96 * v143);
          if (v147 == v260)
          {
            if (*(_QWORD *)&v260[56])
            {
              v167 = (unsigned int *)(*(_QWORD *)&v260[56] + 20);
              do
              {
                v168 = __ldaxr(v167);
                v169 = v168 - 1;
              }
              while (__stlxr(v169, v167));
              if (!v169)
              {
                v170 = *(_QWORD *)&v260[56];
                if (*(_QWORD *)&v260[56])
                {
                  *(_QWORD *)&v260[56] = 0;
                  v171 = *(_QWORD *)(v170 + 8);
                  if (!v171)
                  {
                    v171 = *(_QWORD *)&v260[48];
                    if (!*(_QWORD *)&v260[48])
                      v171 = sub_100255D20();
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v171 + 48))(v171, v170);
                }
              }
            }
            *(_QWORD *)&v260[56] = 0;
            memset(&v260[16], 0, 32);
            if (*(int *)&v260[4] >= 1)
            {
              v172 = 0;
              v173 = v261;
              do
                v173[v172++] = 0;
              while (v172 < *(int *)&v260[4]);
            }
          }
          else
          {
            v148 = v146 + 96 * v143;
            v151 = *(_QWORD *)(v148 + 56);
            v150 = (uint64_t *)(v148 + 56);
            v149 = v151;
            if (v151)
            {
              v152 = (unsigned int *)(v149 + 20);
              do
              {
                v153 = __ldaxr(v152);
                v154 = v153 - 1;
              }
              while (__stlxr(v154, v152));
              if (!v154)
              {
                v155 = *v150;
                if (*v150)
                {
                  *v150 = 0;
                  v156 = *(_QWORD *)(v155 + 8);
                  if (!v156)
                  {
                    v156 = *(_QWORD *)(v146 + 96 * v143 + 48);
                    if (!v156)
                      v156 = sub_100255D20();
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v156 + 48))(v156, v155);
                }
              }
            }
            v157 = v146 + 96 * v143;
            *(_OWORD *)(v157 + 16) = 0u;
            v158 = (_OWORD *)(v157 + 16);
            *v150 = 0;
            v159 = *((_DWORD *)v158 - 3);
            v158[1] = 0u;
            if (v159 >= 1)
            {
              v160 = 0;
              v161 = *(_QWORD *)(v146 + 96 * v143 + 64);
              do
                *(_DWORD *)(v161 + 4 * v160++) = 0;
              while (v160 < *((int *)v158 - 3));
            }
            v162 = v146 + 96 * v143;
            v165 = *(void ***)(v162 + 72);
            v164 = (void **)(v162 + 72);
            v163 = v165;
            *(_OWORD *)v147 = *(_OWORD *)v260;
            *v158 = *(_OWORD *)&v260[16];
            *(_OWORD *)(v164 - 5) = *(_OWORD *)&v260[32];
            *(_OWORD *)(v164 - 3) = *(_OWORD *)&v260[48];
            if (v165 != v164 + 1)
            {
              j__free(v163);
              *v164 = v164 + 1;
              *(_QWORD *)(v146 + 96 * v143 + 64) = v164 - 8;
              v163 = v164 + 1;
            }
            v166 = v262;
            if (*(int *)&v260[4] > 2)
            {
              *v164 = v262;
              *(_QWORD *)(v146 + 96 * v143 + 64) = v261;
              v261 = (int *)&v260[8];
              v262 = &v263;
            }
            else
            {
              *v163 = *(void **)v262;
              v163[1] = (void *)v166[1];
            }
            *(_DWORD *)v260 = 1124007936;
            memset(&v260[4], 0, 60);
          }
          if (v262 != &v263)
            j__free(v262);
          ++v143;
        }
        while (v143 != v249);
      }
      return;
    case 4:
      v247 = *(uint64_t **)(a1 + 8);
      v10 = 0xAAAAAAAAAAAAAAABLL * ((v247[1] - *v247) >> 3);
      v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
      if ((int)v10 <= v11)
      {
        if ((int)v10 < v11)
          sub_1002693A4((uint64_t)a2, *a2 + 96 * (int)v10);
      }
      else
      {
        sub_100268DF0(a2, (int)v10 - v11);
      }
      v254 = a2;
      if ((int)v10 >= 1)
      {
        v111 = 0;
        v246 = v2 & 0xFFF;
        v112 = v10;
        do
        {
          v113 = *v247;
          sub_10025D920(a1, v111, (uint64_t)&v255);
          sub_10022FD68((uint64_t)v260, &v255, v246, *(_QWORD *)(v113 + 24 * v111), 0);
          v114 = *v254;
          v115 = (_BYTE *)(*v254 + 96 * v111);
          if (v115 == v260)
          {
            if (*(_QWORD *)&v260[56])
            {
              v135 = (unsigned int *)(*(_QWORD *)&v260[56] + 20);
              do
              {
                v136 = __ldaxr(v135);
                v137 = v136 - 1;
              }
              while (__stlxr(v137, v135));
              if (!v137)
              {
                v138 = *(_QWORD *)&v260[56];
                if (*(_QWORD *)&v260[56])
                {
                  *(_QWORD *)&v260[56] = 0;
                  v139 = *(_QWORD *)(v138 + 8);
                  if (!v139)
                  {
                    v139 = *(_QWORD *)&v260[48];
                    if (!*(_QWORD *)&v260[48])
                      v139 = sub_100255D20();
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v139 + 48))(v139, v138);
                }
              }
            }
            *(_QWORD *)&v260[56] = 0;
            memset(&v260[16], 0, 32);
            if (*(int *)&v260[4] >= 1)
            {
              v140 = 0;
              v141 = v261;
              do
                v141[v140++] = 0;
              while (v140 < *(int *)&v260[4]);
            }
          }
          else
          {
            v116 = v114 + 96 * v111;
            v119 = *(_QWORD *)(v116 + 56);
            v118 = (uint64_t *)(v116 + 56);
            v117 = v119;
            if (v119)
            {
              v120 = (unsigned int *)(v117 + 20);
              do
              {
                v121 = __ldaxr(v120);
                v122 = v121 - 1;
              }
              while (__stlxr(v122, v120));
              if (!v122)
              {
                v123 = *v118;
                if (*v118)
                {
                  *v118 = 0;
                  v124 = *(_QWORD *)(v123 + 8);
                  if (!v124)
                  {
                    v124 = *(_QWORD *)(v114 + 96 * v111 + 48);
                    if (!v124)
                      v124 = sub_100255D20();
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v124 + 48))(v124, v123);
                }
              }
            }
            v125 = v114 + 96 * v111;
            *(_OWORD *)(v125 + 16) = 0u;
            v126 = (_OWORD *)(v125 + 16);
            *v118 = 0;
            v127 = *((_DWORD *)v126 - 3);
            v126[1] = 0u;
            if (v127 >= 1)
            {
              v128 = 0;
              v129 = *(_QWORD *)(v114 + 96 * v111 + 64);
              do
                *(_DWORD *)(v129 + 4 * v128++) = 0;
              while (v128 < *((int *)v126 - 3));
            }
            v130 = v114 + 96 * v111;
            v133 = *(void ***)(v130 + 72);
            v132 = (void **)(v130 + 72);
            v131 = v133;
            *(_OWORD *)v115 = *(_OWORD *)v260;
            *v126 = *(_OWORD *)&v260[16];
            *(_OWORD *)(v132 - 5) = *(_OWORD *)&v260[32];
            *(_OWORD *)(v132 - 3) = *(_OWORD *)&v260[48];
            if (v133 != v132 + 1)
            {
              j__free(v131);
              *v132 = v132 + 1;
              *(_QWORD *)(v114 + 96 * v111 + 64) = v132 - 8;
              v131 = v132 + 1;
            }
            v134 = v262;
            if (*(int *)&v260[4] > 2)
            {
              *v132 = v262;
              *(_QWORD *)(v114 + 96 * v111 + 64) = v261;
              v261 = (int *)&v260[8];
              v262 = &v263;
            }
            else
            {
              *v131 = *(void **)v262;
              v131[1] = (void *)v134[1];
            }
            *(_DWORD *)v260 = 1124007936;
            memset(&v260[4], 0, 60);
          }
          if (v262 != &v263)
            j__free(v262);
          ++v111;
        }
        while (v111 != v112);
      }
      return;
    case 5:
      v12 = *(uint64_t **)(a1 + 8);
      v14 = *v12;
      v13 = v12[1];
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *v12) >> 5);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
      if (v15 <= v16)
      {
        if (v15 < v16)
          sub_1002693A4((uint64_t)a2, *a2 + 32 * ((v13 - *v12) >> 5));
      }
      else
      {
        sub_100268DF0(a2, v15 - v16);
      }
      if (v13 != v14)
      {
        v142 = 0;
        if (v15 <= 1)
          v15 = 1;
        do
        {
          sub_1002573F8(*a2 + v142, *v12 + v142);
          v142 += 96;
          --v15;
        }
        while (v15);
      }
      return;
    case 6:
      v48 = *(_QWORD **)(a1 + 8);
      *(_DWORD *)v260 = 1124007936;
      memset(&v260[4], 0, 60);
      v261 = (int *)&v260[8];
      v262 = &v263;
      v263 = 0;
      v264 = 0;
      (*(void (**)(_QWORD, _QWORD *, _BYTE *, uint64_t))(*(_QWORD *)*v48 + 24))(*v48, v48, v260, 0xFFFFFFFFLL);
      v49 = *v261;
      v50 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
      if (v49 <= v50)
      {
        if (v49 < v50)
          sub_1002693A4((uint64_t)a2, *a2 + 96 * (int)v49);
      }
      else
      {
        sub_100268DF0(a2, v49 - v50);
      }
      if ((int)v49 >= 1)
      {
        v206 = 0;
        v207 = v49;
        do
        {
          v208 = v206 + 1;
          v266[0] = v206;
          v266[1] = v206 + 1;
          v265 = 0x7FFFFFFF80000000;
          sub_100256CFC((uint64_t)v256, v260, v266, &v265);
          v209 = *a2;
          v210 = (_BYTE *)(*a2 + 96 * v206);
          if (v210 == v256)
          {
            if (*(_QWORD *)&v256[56])
            {
              v230 = (unsigned int *)(*(_QWORD *)&v256[56] + 20);
              do
              {
                v231 = __ldaxr(v230);
                v232 = v231 - 1;
              }
              while (__stlxr(v232, v230));
              if (!v232)
              {
                v233 = *(_QWORD *)&v256[56];
                if (*(_QWORD *)&v256[56])
                {
                  *(_QWORD *)&v256[56] = 0;
                  v234 = *(_QWORD *)(v233 + 8);
                  if (!v234)
                  {
                    v234 = *(_QWORD *)&v256[48];
                    if (!*(_QWORD *)&v256[48])
                      v234 = sub_100255D20();
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v234 + 48))(v234, v233);
                }
              }
            }
            *(_QWORD *)&v256[56] = 0;
            memset(&v256[16], 0, 32);
            if (*(int *)&v256[4] >= 1)
            {
              v235 = 0;
              v236 = v257;
              do
                *(_DWORD *)&v236[4 * v235++] = 0;
              while (v235 < *(int *)&v256[4]);
            }
          }
          else
          {
            v211 = v209 + 96 * v206;
            v214 = *(_QWORD *)(v211 + 56);
            v213 = (uint64_t *)(v211 + 56);
            v212 = v214;
            if (v214)
            {
              v215 = (unsigned int *)(v212 + 20);
              do
              {
                v216 = __ldaxr(v215);
                v217 = v216 - 1;
              }
              while (__stlxr(v217, v215));
              if (!v217)
              {
                v218 = *v213;
                if (*v213)
                {
                  *v213 = 0;
                  v219 = *(_QWORD *)(v218 + 8);
                  if (!v219)
                  {
                    v219 = *(_QWORD *)(v209 + 96 * v206 + 48);
                    if (!v219)
                      v219 = sub_100255D20();
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v219 + 48))(v219, v218);
                }
              }
            }
            v220 = v209 + 96 * v206;
            *(_OWORD *)(v220 + 16) = 0u;
            v221 = (_OWORD *)(v220 + 16);
            *v213 = 0;
            v222 = *((_DWORD *)v221 - 3);
            v221[1] = 0u;
            if (v222 >= 1)
            {
              v223 = 0;
              v224 = *(_QWORD *)(v209 + 96 * v206 + 64);
              do
                *(_DWORD *)(v224 + 4 * v223++) = 0;
              while (v223 < *((int *)v221 - 3));
            }
            v225 = v209 + 96 * v206;
            v228 = *(void ***)(v225 + 72);
            v227 = (void **)(v225 + 72);
            v226 = v228;
            *(_OWORD *)v210 = *(_OWORD *)v256;
            *v221 = *(_OWORD *)&v256[16];
            *(_OWORD *)(v227 - 5) = *(_OWORD *)&v256[32];
            *(_OWORD *)(v227 - 3) = *(_OWORD *)&v256[48];
            if (v228 != v227 + 1)
            {
              j__free(v226);
              *v227 = v227 + 1;
              *(_QWORD *)(v209 + 96 * v206 + 64) = v227 - 8;
              v226 = v227 + 1;
            }
            v229 = v258;
            if (*(int *)&v256[4] > 2)
            {
              *v227 = v258;
              *(_QWORD *)(v209 + 96 * v206 + 64) = v257;
              v257 = &v256[8];
              v258 = v259;
            }
            else
            {
              *v226 = *(void **)v258;
              v226[1] = (void *)v229[1];
            }
            *(_DWORD *)v256 = 1124007936;
            memset(&v256[4], 0, 60);
          }
          if (v258 != v259)
            j__free(v258);
          ++v206;
        }
        while (v208 != v207);
      }
      if (*(_QWORD *)&v260[56])
      {
        v237 = (unsigned int *)(*(_QWORD *)&v260[56] + 20);
        do
        {
          v238 = __ldaxr(v237);
          v239 = v238 - 1;
        }
        while (__stlxr(v239, v237));
        if (!v239)
        {
          v240 = *(_QWORD *)&v260[56];
          if (*(_QWORD *)&v260[56])
          {
            *(_QWORD *)&v260[56] = 0;
            v241 = *(_QWORD *)(v240 + 8);
            if (!v241)
            {
              v241 = *(_QWORD *)&v260[48];
              if (!*(_QWORD *)&v260[48])
                v241 = sub_100255D20();
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v241 + 48))(v241, v240);
          }
        }
      }
      *(_QWORD *)&v260[56] = 0;
      memset(&v260[16], 0, 32);
      if (*(int *)&v260[4] >= 1)
      {
        v242 = 0;
        v243 = v261;
        do
          v243[v242++] = 0;
        while (v242 < *(int *)&v260[4]);
      }
      if (v262 != &v263)
        j__free(v262);
      return;
    case 0xB:
      v51 = *(_QWORD **)(a1 + 8);
      v52 = *v51;
      v53 = v51[1];
      v252 = v51;
      v54 = 0xCCCCCCCCCCCCCCCDLL * ((v53 - *v51) >> 4);
      v55 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
      if (v54 <= v55)
      {
        if (v54 < v55)
          sub_1002693A4((uint64_t)a2, *a2 - 0x3333333333333320 * ((v53 - v52) >> 4));
      }
      else
      {
        sub_100268DF0(a2, v54 - v55);
      }
      if (v53 != v52)
      {
        v174 = a2;
        v175 = 0;
        v250 = v2 & 0x3000000;
        if (v54 <= 1)
          v176 = 1;
        else
          v176 = 0xCCCCCCCCCCCCCCCDLL * ((v53 - v52) >> 4);
        do
        {
          sub_10029D2D4(*v252 + 80 * v175, v250, (uint64_t)v260);
          v177 = *v174;
          v178 = (_BYTE *)(*v174 + 96 * v175);
          if (v178 == v260)
          {
            if (*(_QWORD *)&v260[56])
            {
              v198 = (unsigned int *)(*(_QWORD *)&v260[56] + 20);
              do
              {
                v199 = __ldaxr(v198);
                v200 = v199 - 1;
              }
              while (__stlxr(v200, v198));
              if (!v200)
              {
                v201 = *(_QWORD *)&v260[56];
                if (*(_QWORD *)&v260[56])
                {
                  *(_QWORD *)&v260[56] = 0;
                  v202 = *(_QWORD *)(v201 + 8);
                  if (!v202)
                  {
                    v202 = *(_QWORD *)&v260[48];
                    if (!*(_QWORD *)&v260[48])
                      v202 = sub_100255D20();
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v202 + 48))(v202, v201);
                }
              }
            }
            *(_QWORD *)&v260[56] = 0;
            memset(&v260[16], 0, 32);
            if (*(int *)&v260[4] >= 1)
            {
              v203 = 0;
              v204 = v261;
              do
                v204[v203++] = 0;
              while (v203 < *(int *)&v260[4]);
            }
          }
          else
          {
            v179 = v177 + 96 * v175;
            v182 = *(_QWORD *)(v179 + 56);
            v181 = (uint64_t *)(v179 + 56);
            v180 = v182;
            if (v182)
            {
              v183 = (unsigned int *)(v180 + 20);
              do
              {
                v184 = __ldaxr(v183);
                v185 = v184 - 1;
              }
              while (__stlxr(v185, v183));
              if (!v185)
              {
                v186 = *v181;
                if (*v181)
                {
                  *v181 = 0;
                  v187 = *(_QWORD *)(v186 + 8);
                  if (!v187)
                  {
                    v187 = *(_QWORD *)(v177 + 96 * v175 + 48);
                    if (!v187)
                      v187 = sub_100255D20();
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v187 + 48))(v187, v186);
                }
              }
            }
            v188 = v177 + 96 * v175;
            *(_OWORD *)(v188 + 16) = 0u;
            v189 = (_OWORD *)(v188 + 16);
            *v181 = 0;
            v190 = *((_DWORD *)v189 - 3);
            v189[1] = 0u;
            if (v190 >= 1)
            {
              v191 = 0;
              v192 = *(_QWORD *)(v177 + 96 * v175 + 64);
              do
                *(_DWORD *)(v192 + 4 * v191++) = 0;
              while (v191 < *((int *)v189 - 3));
            }
            v193 = v177 + 96 * v175;
            v196 = *(void ***)(v193 + 72);
            v195 = (void **)(v193 + 72);
            v194 = v196;
            *(_OWORD *)v178 = *(_OWORD *)v260;
            *v189 = *(_OWORD *)&v260[16];
            *(_OWORD *)(v195 - 5) = *(_OWORD *)&v260[32];
            *(_OWORD *)(v195 - 3) = *(_OWORD *)&v260[48];
            if (v196 != v195 + 1)
            {
              j__free(v194);
              *v195 = v195 + 1;
              *(_QWORD *)(v177 + 96 * v175 + 64) = v195 - 8;
              v194 = v195 + 1;
            }
            v197 = v262;
            if (*(int *)&v260[4] > 2)
            {
              *v195 = v262;
              *(_QWORD *)(v177 + 96 * v175 + 64) = v261;
              v261 = (int *)&v260[8];
              v262 = &v263;
            }
            else
            {
              *v194 = *(void **)v262;
              v194[1] = (void *)v197[1];
            }
            *(_DWORD *)v260 = 1124007936;
            memset(&v260[4], 0, 60);
          }
          if (v262 != &v263)
            j__free(v262);
          ++v175;
        }
        while (v175 != v176);
      }
      return;
    case 0xF:
      v56 = *(_QWORD *)(a1 + 8);
      v57 = *(int *)(a1 + 20);
      v58 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
      if (v57 <= v58)
      {
        if (v57 < v58)
          sub_1002693A4((uint64_t)a2, *a2 + 96 * (int)v57);
      }
      else
      {
        sub_100268DF0(a2, v57 - v58);
      }
      if ((_DWORD)v57)
      {
        v205 = 0;
        do
        {
          sub_1002573F8(*a2 + v205, v56 + v205);
          v205 += 96;
          --v57;
        }
        while (v57);
      }
      return;
    default:
      *(_OWORD *)v260 = 0uLL;
      qmemcpy((void *)sub_10029430C(v260, 30), "Unknown/unsupported array type", 30);
      sub_100294B74(-213, (uint64_t *)v260, "getMatVector", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1460);
  }
  do
  {
    v61 = v7[1];
    if (v61 == 2)
    {
      sub_10000A364((uint64_t)v260, 1, v7[3], *v7 & 0xFFF, *((_QWORD *)v7 + 2) + **((_QWORD **)v7 + 9) * v59, 0);
      v62 = *v253;
      v63 = (_BYTE *)(*v253 + 96 * v59);
      if (v63 == v260)
        goto LABEL_66;
      goto LABEL_103;
    }
    v71 = v61 - 1;
    v72 = (_QWORD *)*((_QWORD *)v7 + 9);
    v73 = *((_QWORD *)v7 + 8) + 4;
    v74 = *v7;
    v75 = *((_QWORD *)v7 + 2) + *v72 * v59;
    memset(&v260[20], 0, 44);
    *(_OWORD *)&v260[4] = 0u;
    v261 = (int *)&v260[8];
    v262 = &v263;
    v263 = 0;
    v264 = 0;
    *(_DWORD *)v260 = v74 & 0xFFF | 0x42FF0000;
    *(_QWORD *)&v260[16] = v75;
    *(_QWORD *)&v260[24] = v75;
    sub_10025655C((uint64_t)v260, v71, v73, (uint64_t)(v72 + 1), 1);
    v76 = v261;
    if (*(int *)&v260[4] < 1)
    {
      v78 = 0;
    }
    else
    {
      v77 = 0;
      while (v261[v77] <= 1)
      {
        if (*(unsigned int *)&v260[4] == ++v77)
        {
          v78 = *(_DWORD *)&v260[4];
          goto LABEL_86;
        }
      }
      v78 = v77;
    }
LABEL_86:
    v79 = (uint64_t *)v262;
    v80 = *(int *)&v260[4] - 1;
    v81 = (char *)v262 + 8 * *(int *)&v260[4] - 8;
    while (v80 > v78)
    {
      v82 = *v81 * v261[v80];
      v83 = *--v81;
      --v80;
      if (v82 < v83)
      {
        *(_DWORD *)v260 &= ~0x4000u;
        if (*(int *)&v260[4] < 3)
          goto LABEL_93;
        goto LABEL_92;
      }
    }
    *(_DWORD *)v260 = *(_DWORD *)v260 & 0xFFFFBFFF | 0x4000;
    if (*(int *)&v260[4] < 3)
      goto LABEL_93;
LABEL_92:
    *(_QWORD *)&v260[8] = -1;
LABEL_93:
    if (*(_QWORD *)&v260[56])
    {
      v84 = *(_QWORD *)(*(_QWORD *)&v260[56] + 24);
      *(_QWORD *)&v260[16] = v84;
      *(_QWORD *)&v260[24] = v84;
      if (!v84)
        goto LABEL_101;
    }
    else
    {
      v84 = *(_QWORD *)&v260[16];
      if (!*(_QWORD *)&v260[16])
      {
LABEL_101:
        *(_QWORD *)&v260[32] = 0;
        *(_QWORD *)&v260[40] = 0;
LABEL_102:
        v62 = *v253;
        v63 = (_BYTE *)(*v253 + 96 * v59);
        if (v63 == v260)
          goto LABEL_66;
        goto LABEL_103;
      }
    }
    v85 = *v261;
    v86 = *(_QWORD *)&v260[24] + *(_QWORD *)v262 * v85;
    *(_QWORD *)&v260[40] = v86;
    if ((int)v85 < 1)
    {
      *(_QWORD *)&v260[32] = v86;
      v62 = *v253;
      v63 = (_BYTE *)(*v253 + 96 * v59);
      if (v63 == v260)
        goto LABEL_66;
    }
    else
    {
      v87 = (*(_DWORD *)&v260[4] - 1);
      v88 = v84 + *((_QWORD *)v262 + (int)v87) * v261[(int)v87];
      *(_QWORD *)&v260[32] = v88;
      if (*(int *)&v260[4] < 2)
        goto LABEL_102;
      do
      {
        v89 = *v76++;
        v90 = v89 - 1;
        v91 = *v79++;
        v88 += v91 * v90;
        --v87;
      }
      while (v87);
      *(_QWORD *)&v260[32] = v88;
      v62 = *v253;
      v63 = (_BYTE *)(*v253 + 96 * v59);
      if (v63 == v260)
      {
LABEL_66:
        if (*(_QWORD *)&v260[56])
        {
          v64 = (unsigned int *)(*(_QWORD *)&v260[56] + 20);
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
          {
            v67 = *(_QWORD *)&v260[56];
            if (*(_QWORD *)&v260[56])
            {
              *(_QWORD *)&v260[56] = 0;
              v68 = *(_QWORD *)(v67 + 8);
              if (!v68)
              {
                v68 = *(_QWORD *)&v260[48];
                if (!*(_QWORD *)&v260[48])
                  v68 = sub_100255D20();
              }
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 48))(v68, v67);
            }
          }
        }
        *(_QWORD *)&v260[56] = 0;
        memset(&v260[16], 0, 32);
        if (*(int *)&v260[4] >= 1)
        {
          v69 = 0;
          v70 = v261;
          do
            v70[v69++] = 0;
          while (v69 < *(int *)&v260[4]);
        }
        goto LABEL_121;
      }
    }
LABEL_103:
    v92 = v62 + 96 * v59;
    v95 = *(_QWORD *)(v92 + 56);
    v94 = (uint64_t *)(v92 + 56);
    v93 = v95;
    if (v95)
    {
      v96 = (unsigned int *)(v93 + 20);
      do
      {
        v97 = __ldaxr(v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, v96));
      if (!v98)
      {
        v99 = *v94;
        if (*v94)
        {
          *v94 = 0;
          v100 = *(_QWORD *)(v99 + 8);
          if (!v100)
          {
            v100 = *(_QWORD *)(v62 + 96 * v59 + 48);
            if (!v100)
              v100 = sub_100255D20();
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v100 + 48))(v100, v99);
        }
      }
    }
    v101 = v62 + 96 * v59;
    *(_OWORD *)(v101 + 16) = 0u;
    v102 = (_OWORD *)(v101 + 16);
    *v94 = 0;
    v103 = *((_DWORD *)v102 - 3);
    v102[1] = 0u;
    if (v103 >= 1)
    {
      v104 = 0;
      v105 = *(_QWORD *)(v62 + 96 * v59 + 64);
      do
        *(_DWORD *)(v105 + 4 * v104++) = 0;
      while (v104 < *((int *)v102 - 3));
    }
    v106 = v62 + 96 * v59;
    v109 = *(void ***)(v106 + 72);
    v108 = (void **)(v106 + 72);
    v107 = v109;
    *(_OWORD *)v63 = *(_OWORD *)v260;
    *v102 = *(_OWORD *)&v260[16];
    *(_OWORD *)(v108 - 5) = *(_OWORD *)&v260[32];
    *(_OWORD *)(v108 - 3) = *(_OWORD *)&v260[48];
    if (v109 != v108 + 1)
    {
      j__free(v107);
      *v108 = v108 + 1;
      *(_QWORD *)(v62 + 96 * v59 + 64) = v108 - 8;
      v107 = v108 + 1;
    }
    v110 = v262;
    if (*(int *)&v260[4] > 2)
    {
      *v108 = v262;
      *(_QWORD *)(v62 + 96 * v59 + 64) = v261;
      v261 = (int *)&v260[8];
      v262 = &v263;
    }
    else
    {
      *v107 = *(void **)v262;
      v107[1] = (void *)v110[1];
    }
    *(_DWORD *)v260 = 1124007936;
    memset(&v260[4], 0, 60);
LABEL_121:
    if (v262 != &v263)
      j__free(v262);
    ++v59;
  }
  while (v59 != v60);
}

void sub_100260120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_100006BE4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_100260194(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_100268DF0(a1, v4);
  }
  else if (!v3)
  {
    sub_1002693A4((uint64_t)a1, *a1 + 96 * a2);
  }
}

void sub_1002601D0(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t i;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_100269488(a1, v6);
  }
  else if (!v5)
  {
    for (i = *a1 + 80 * a2; v3 != i; v3 = sub_10029B66C(v3 - 80))
      ;
    a1[1] = i;
  }
}

uint64_t sub_10026024C(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v10;
  int v11;
  int v12;
  int *v13;
  int *v14;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;

  v3 = *(_DWORD *)a1 & 0x1F0000;
  v4 = *(_DWORD *)a2 & 0x1F0000;
  if (v3 == 655360)
  {
    v10 = *(_QWORD *)(a1 + 8);
    if (v4 == 655360)
    {
      v6 = *(_DWORD **)(v10 + 48);
      v7 = *(v6 - 1);
      v8 = *(_DWORD **)(*(_QWORD *)(a2 + 8) + 48);
      if ((_DWORD)v7 != *(v8 - 1))
        return 0;
      if ((_DWORD)v7 == 2)
      {
        if (*v6 == *v8)
          return v6[1] == v8[1];
        return 0;
      }
      if ((int)v7 >= 1)
      {
        if (*v6 == *v8)
        {
          v26 = 1;
          do
          {
            v17 = v26;
            if (v7 == v26)
              break;
            v27 = v6[v26];
            v28 = v8[v26++];
          }
          while (v27 == v28);
          return v17 >= v7;
        }
        return 0;
      }
    }
    else
    {
      if (v4 != 0x10000)
      {
        if (*(int *)(v10 + 4) > 2)
          return 0;
        v13 = *(int **)(v10 + 48);
        v12 = *v13;
        v11 = v13[1];
        if ((int)sub_100260608(a2, -1) > 2)
          return 0;
        goto LABEL_31;
      }
      v6 = *(_DWORD **)(v10 + 48);
      v7 = *(v6 - 1);
      v8 = *(_DWORD **)(*(_QWORD *)(a2 + 8) + 64);
      if ((_DWORD)v7 != *(v8 - 1))
        return 0;
      if ((_DWORD)v7 == 2)
      {
        if (*v6 != *v8)
          return 0;
        return v6[1] == v8[1];
      }
      if ((int)v7 >= 1)
      {
        if (*v6 == *v8)
        {
          v20 = 1;
          do
          {
            v17 = v20;
            if (v7 == v20)
              break;
            v21 = v6[v20];
            v22 = v8[v20++];
          }
          while (v21 == v22);
          return v17 >= v7;
        }
        return 0;
      }
    }
    return 1;
  }
  if (v3 != 0x10000)
  {
    sub_10025D920(a1, 0xFFFFFFFF, (uint64_t)&v29);
    v11 = v29;
    v12 = v30;
    if ((int)sub_100260608(a2, -1) > 2)
      return 0;
    goto LABEL_31;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 == 655360)
  {
    v6 = *(_DWORD **)(v5 + 64);
    v7 = *(v6 - 1);
    v8 = *(_DWORD **)(*(_QWORD *)(a2 + 8) + 48);
    if ((_DWORD)v7 != *(v8 - 1))
      return 0;
    if ((_DWORD)v7 == 2)
    {
      if (*v6 != *v8)
        return 0;
      return v6[1] == v8[1];
    }
    if ((int)v7 >= 1)
    {
      if (*v6 == *v8)
      {
        v23 = 1;
        do
        {
          v17 = v23;
          if (v7 == v23)
            break;
          v24 = v6[v23];
          v25 = v8[v23++];
        }
        while (v24 == v25);
        return v17 >= v7;
      }
      return 0;
    }
    return 1;
  }
  if (v4 == 0x10000)
  {
    v6 = *(_DWORD **)(v5 + 64);
    v7 = *(v6 - 1);
    v8 = *(_DWORD **)(*(_QWORD *)(a2 + 8) + 64);
    if ((_DWORD)v7 == *(v8 - 1))
    {
      if ((_DWORD)v7 == 2)
      {
        if (*v6 != *v8)
          return 0;
        return v6[1] == v8[1];
      }
      if ((int)v7 >= 1)
      {
        if (*v6 == *v8)
        {
          v16 = 1;
          do
          {
            v17 = v16;
            if (v7 == v16)
              break;
            v18 = v6[v16];
            v19 = v8[v16++];
          }
          while (v18 == v19);
          return v17 >= v7;
        }
        return 0;
      }
      return 1;
    }
    return 0;
  }
  if (*(int *)(v5 + 4) > 2)
    return 0;
  v14 = *(int **)(v5 + 64);
  v12 = *v14;
  v11 = v14[1];
  if ((int)sub_100260608(a2, -1) > 2)
    return 0;
LABEL_31:
  sub_10025D920(a2, 0xFFFFFFFF, (uint64_t)&v29);
  return v11 == v29 && v12 == v30;
}

uint64_t sub_100260608(uint64_t a1, signed int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  result = *(_WORD *)(a1 + 2) & 0x1F;
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
      if ((a2 & 0x80000000) == 0)
      {
        v16 = 0;
        v17 = 0;
        v6 = sub_10029430C(&v16, 5);
        *(_DWORD *)v6 = 540811369;
        *(_BYTE *)(v6 + 4) = 48;
        sub_100294B74(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1817);
      }
      return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4);
    case 2:
    case 14:
      if ((a2 & 0x80000000) == 0)
      {
        v16 = 0;
        v17 = 0;
        v4 = sub_10029430C(&v16, 5);
        *(_DWORD *)v4 = 540811369;
        *(_BYTE *)(v4 + 4) = 48;
        sub_100294B74(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1835);
      }
      return 2;
    case 3:
    case 12:
      if ((a2 & 0x80000000) == 0)
      {
        v16 = 0;
        v17 = 0;
        v5 = sub_10029430C(&v16, 5);
        *(_DWORD *)v5 = 540811369;
        *(_BYTE *)(v5 + 4) = 48;
        sub_100294B74(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1841);
      }
      return 2;
    case 4:
      if (a2 < 0)
        goto LABEL_38;
      if ((int)(-1431655765 * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - **(_QWORD **)(a1 + 8)) >> 3)) <= a2)
      {
        sub_1001F37D4(&v16, "i < (int)vv.size()");
        sub_100294B74(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1853);
      }
      return 2;
    case 5:
      if (a2 < 0)
        goto LABEL_38;
      v7 = *(uint64_t **)(a1 + 8);
      v8 = *v7;
      if ((int)(-1431655765 * ((unint64_t)(v7[1] - *v7) >> 5)) <= a2)
      {
        sub_1001F37D4(&v16, "i < (int)vv.size()");
        sub_100294B74(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1862);
      }
      v9 = 96;
      goto LABEL_32;
    case 6:
      if ((a2 & 0x80000000) == 0)
      {
        v16 = 0;
        v17 = 0;
        v10 = sub_10029430C(&v16, 5);
        *(_DWORD *)v10 = 540811369;
        *(_BYTE *)(v10 + 4) = 48;
        sub_100294B74(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1823);
      }
      return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 20);
    case 7:
      if ((a2 & 0x80000000) == 0)
      {
        v16 = 0;
        v17 = 0;
        v11 = sub_10029430C(&v16, 5);
        *(_DWORD *)v11 = 540811369;
        *(_BYTE *)(v11 + 4) = 48;
        sub_100294B74(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1889);
      }
      return 2;
    case 8:
      if ((a2 & 0x80000000) == 0)
      {
        v16 = 0;
        v17 = 0;
        v12 = sub_10029430C(&v16, 5);
        *(_DWORD *)v12 = 540811369;
        *(_BYTE *)(v12 + 4) = 48;
        sub_100294B74(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1901);
      }
      return 2;
    case 9:
      if ((a2 & 0x80000000) == 0)
      {
        v16 = 0;
        v17 = 0;
        v13 = sub_10029430C(&v16, 5);
        *(_DWORD *)v13 = 540811369;
        *(_BYTE *)(v13 + 4) = 48;
        sub_100294B74(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1895);
      }
      return 2;
    case 10:
      if ((a2 & 0x80000000) == 0)
      {
        v16 = 0;
        v17 = 0;
        v14 = sub_10029430C(&v16, 5);
        *(_DWORD *)v14 = 540811369;
        *(_BYTE *)(v14 + 4) = 48;
        sub_100294B74(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1829);
      }
      return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4);
    case 11:
      if (a2 < 0)
        goto LABEL_38;
      v15 = *(uint64_t **)(a1 + 8);
      v8 = *v15;
      if ((int)(-858993459 * ((unint64_t)(v15[1] - *v15) >> 4)) <= a2)
      {
        sub_1001F37D4(&v16, "i < (int)vv.size()");
        sub_100294B74(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1882);
      }
      v9 = 80;
LABEL_32:
      result = *(unsigned int *)(v8 + a2 * (unint64_t)v9 + 4);
      break;
    case 15:
      if (a2 < 0)
      {
LABEL_38:
        result = 1;
      }
      else
      {
        if (*(_DWORD *)(a1 + 20) <= a2)
        {
          sub_1001F37D4(&v16, "i < sz.height");
          sub_100294B74(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1872);
        }
        result = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 96 * a2 + 4);
      }
      break;
    default:
      v16 = 0;
      v17 = 0;
      qmemcpy((void *)sub_10029430C(&v16, 30), "Unknown/unsupported array type", 30);
      sub_100294B74(-213, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1905);
  }
  return result;
}

void sub_100260B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100260CAC(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v3 = *(_DWORD *)a1 & 0x1F0000;
  if (v3 >= 0xA0000)
  {
    if (v3 != 655360)
    {
      if (v3 != 720896)
      {
        if (v3 == 983040)
        {
          result = *(int *)(a1 + 20);
          if ((a2 & 0x80000000) == 0)
          {
            v5 = *(_QWORD *)(a1 + 8);
            if ((int)result <= (int)a2)
            {
              v61 = 0;
              v62 = 0;
              qmemcpy((void *)sub_10029430C(&v61, 13), "i < sz.height", 13);
              sub_100294B74(-215, &v61, "total", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1941);
            }
            v6 = *(unsigned int *)(v5 + 96 * a2 + 4);
            if ((int)v6 >= 3)
            {
              v37 = *(_QWORD *)(v5 + 96 * a2 + 64);
              v38 = (int *)(v37 + 4);
              v39 = 1;
              v40 = v6 & 0xFFFFFFFE;
              v41 = 1;
              do
              {
                v39 *= *(v38 - 1);
                v41 *= *v38;
                v38 += 2;
                v40 -= 2;
              }
              while (v40);
              result = v41 * v39;
              v42 = v6 - (v6 & 0xFFFFFFFE);
              if (v42)
              {
                v43 = (int *)(v37 + ((4 * v6) & 0x3FFFFFFF8));
                do
                {
                  v44 = *v43++;
                  result *= v44;
                  --v42;
                }
                while (v42);
              }
            }
            else
            {
              return *(int *)(v5 + 96 * a2 + 12) * (uint64_t)*(int *)(v5 + 96 * a2 + 8);
            }
          }
          return result;
        }
LABEL_36:
        sub_10025D920(a1, a2, (uint64_t)&v61);
        return SHIDWORD(v61) * (uint64_t)(int)v61;
      }
      v24 = *(uint64_t **)(a1 + 8);
      v8 = *v24;
      result = 0xCCCCCCCCCCCCCCCDLL * ((v24[1] - *v24) >> 4);
      if ((a2 & 0x80000000) != 0)
        return result;
      if ((int)result <= (int)a2)
      {
        v61 = 0;
        v62 = 0;
        v25 = sub_10029430C(&v61, 18);
        *(_WORD *)(v25 + 16) = 10536;
        *(_OWORD *)v25 = *(_OWORD *)"i < (int)vv.size()";
        sub_100294B74(-215, &v61, "total", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1951);
      }
      v10 = a2;
      v26 = *(unsigned int *)(v8 + 80 * a2 + 4);
      if ((int)v26 < 3)
      {
        v12 = 80;
        return *(int *)(v8 + v10 * (unint64_t)v12 + 12) * (uint64_t)*(int *)(v8 + v10 * (unint64_t)v12 + 8);
      }
      v53 = *(_QWORD *)(v8 + 80 * a2 + 48);
      v54 = (int *)(v53 + 4);
      v55 = 1;
      v56 = v26 & 0xFFFFFFFE;
      v57 = 1;
      do
      {
        v55 *= *(v54 - 1);
        v57 *= *v54;
        v54 += 2;
        v56 -= 2;
      }
      while (v56);
      result = v57 * v55;
      v58 = v26 - (v26 & 0xFFFFFFFE);
      if (v58)
      {
        v59 = (int *)(v53 + ((4 * v26) & 0x3FFFFFFF8));
        do
        {
          v60 = *v59++;
          result *= v60;
          --v58;
        }
        while (v58);
      }
      return result;
    }
    if ((a2 & 0x80000000) == 0)
    {
      v61 = 0;
      v62 = 0;
      v13 = sub_10029430C(&v61, 5);
      *(_DWORD *)v13 = 540811369;
      *(_BYTE *)(v13 + 4) = 48;
      sub_100294B74(-215, &v61, "total", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1921);
    }
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(unsigned int *)(v14 + 4);
    if ((int)v15 >= 3)
    {
      v16 = *(_QWORD *)(v14 + 48);
      v17 = (int *)(v16 + 4);
      v18 = 1;
      v19 = v15 & 0xFFFFFFFE;
      v20 = 1;
      do
      {
        v18 *= *(v17 - 1);
        v20 *= *v17;
        v17 += 2;
        v19 -= 2;
      }
      while (v19);
      result = v20 * v18;
      v21 = v15 - (v15 & 0xFFFFFFFE);
      if (v21)
      {
        v22 = (int *)(v16 + ((4 * v15) & 0x3FFFFFFF8));
        do
        {
          v23 = *v22++;
          result *= v23;
          --v21;
        }
        while (v21);
      }
      return result;
    }
    return *(int *)(v14 + 12) * (uint64_t)*(int *)(v14 + 8);
  }
  if (v3 == 0x10000)
  {
    if ((a2 & 0x80000000) == 0)
    {
      v61 = 0;
      v62 = 0;
      v27 = sub_10029430C(&v61, 5);
      *(_DWORD *)v27 = 540811369;
      *(_BYTE *)(v27 + 4) = 48;
      sub_100294B74(-215, &v61, "total", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1915);
    }
    v14 = *(_QWORD *)(a1 + 8);
    v28 = *(unsigned int *)(v14 + 4);
    if ((int)v28 >= 3)
    {
      v29 = *(_QWORD *)(v14 + 64);
      v30 = (int *)(v29 + 4);
      v31 = 1;
      v32 = v28 & 0xFFFFFFFE;
      v33 = 1;
      do
      {
        v31 *= *(v30 - 1);
        v33 *= *v30;
        v30 += 2;
        v32 -= 2;
      }
      while (v32);
      result = v33 * v31;
      v34 = v28 - (v28 & 0xFFFFFFFE);
      if (v34)
      {
        v35 = (int *)(v29 + ((4 * v28) & 0x3FFFFFFF8));
        do
        {
          v36 = *v35++;
          result *= v36;
          --v34;
        }
        while (v34);
      }
      return result;
    }
    return *(int *)(v14 + 12) * (uint64_t)*(int *)(v14 + 8);
  }
  if (v3 != 327680)
    goto LABEL_36;
  v7 = *(uint64_t **)(a1 + 8);
  v8 = *v7;
  result = 0xAAAAAAAAAAAAAAABLL * ((v7[1] - *v7) >> 5);
  if ((a2 & 0x80000000) != 0)
    return result;
  if ((int)result <= (int)a2)
  {
    v61 = 0;
    v62 = 0;
    v9 = sub_10029430C(&v61, 18);
    *(_WORD *)(v9 + 16) = 10536;
    *(_OWORD *)v9 = *(_OWORD *)"i < (int)vv.size()";
    sub_100294B74(-215, &v61, "total", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1931);
  }
  v10 = a2;
  v11 = *(unsigned int *)(v8 + 96 * a2 + 4);
  if ((int)v11 < 3)
  {
    v12 = 96;
    return *(int *)(v8 + v10 * (unint64_t)v12 + 12) * (uint64_t)*(int *)(v8 + v10 * (unint64_t)v12 + 8);
  }
  v45 = *(_QWORD *)(v8 + 96 * a2 + 64);
  v46 = (int *)(v45 + 4);
  v47 = 1;
  v48 = v11 & 0xFFFFFFFE;
  v49 = 1;
  do
  {
    v47 *= *(v46 - 1);
    v49 *= *v46;
    v46 += 2;
    v48 -= 2;
  }
  while (v48);
  result = v49 * v47;
  v50 = v11 - (v11 & 0xFFFFFFFE);
  if (v50)
  {
    v51 = (int *)(v45 + ((4 * v11) & 0x3FFFFFFF8));
    do
    {
      v52 = *v51++;
      result *= v52;
      --v50;
    }
    while (v50);
  }
  return result;
}

void sub_1002611E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100261250(int *a1, int a2)
{
  return sub_10025E20C(a1, a2) & 7;
}

uint64_t sub_100261268(int *a1, int a2)
{
  return ((sub_10025E20C(a1, a2) >> 3) & 0x1FF) + 1;
}

BOOL sub_100261284(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25[2];

  v1 = *(_WORD *)(a1 + 2) & 0x1F;
  v2 = a1;
  result = 0;
  switch(v1)
  {
    case 0:
      return 1;
    case 1:
      v6 = *(_QWORD *)(v2 + 8);
      if (!*(_QWORD *)(v6 + 16))
        return 1;
      v7 = *(unsigned int *)(v6 + 4);
      if ((int)v7 < 3)
        goto LABEL_16;
      v8 = *(_QWORD *)(v6 + 64);
      v9 = (int *)(v8 + 4);
      v10 = 1;
      v11 = v7 & 0xFFFFFFFE;
      v12 = 1;
      do
      {
        v10 *= *(v9 - 1);
        v12 *= *v9;
        v9 += 2;
        v11 -= 2;
      }
      while (v11);
      v13 = v12 * v10;
      v14 = v7 - (v7 & 0xFFFFFFFE);
      if (v14)
      {
        v15 = (int *)(v8 + ((4 * v7) & 0x3FFFFFFF8));
        do
        {
          v16 = *v15++;
          v13 *= v16;
          --v14;
        }
        while (v14);
      }
      return !(_DWORD)v7 || v13 == 0;
    case 2:
    case 6:
    case 14:
      return result;
    case 3:
    case 4:
    case 5:
    case 11:
    case 13:
      return **(_QWORD **)(v2 + 8) == *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
    case 7:
      v2 = *(_QWORD *)(v2 + 8);
      if (*(_DWORD *)(v2 + 16))
        return *(_DWORD *)(v2 + 20) == 0;
      return 1;
    case 8:
    case 9:
      v5 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 24);
      return v5 == 0;
    case 10:
      v6 = *(_QWORD *)(v2 + 8);
      if (!*(_QWORD *)(v6 + 32))
        return 1;
      v7 = *(unsigned int *)(v6 + 4);
      if ((int)v7 >= 3)
      {
        v17 = *(_QWORD *)(v6 + 48);
        v18 = (int *)(v17 + 4);
        v19 = 1;
        v20 = v7 & 0xFFFFFFFE;
        v21 = 1;
        do
        {
          v19 *= *(v18 - 1);
          v21 *= *v18;
          v18 += 2;
          v20 -= 2;
        }
        while (v20);
        v13 = v21 * v19;
        v22 = v7 - (v7 & 0xFFFFFFFE);
        if (v22)
        {
          v23 = (int *)(v17 + ((4 * v7) & 0x3FFFFFFF8));
          do
          {
            v24 = *v23++;
            v13 *= v24;
            --v22;
          }
          while (v22);
        }
      }
      else
      {
LABEL_16:
        v13 = *(int *)(v6 + 12) * (uint64_t)*(int *)(v6 + 8);
      }
      return !(_DWORD)v7 || v13 == 0;
    case 12:
      v5 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
      return v5 == 0;
    case 15:
      return *(_DWORD *)(v2 + 20) == 0;
    default:
      v25[0] = 0;
      v25[1] = 0;
      qmemcpy((void *)sub_10029430C(v25, 30), "Unknown/unsupported array type", 30);
      sub_100294B74(-213, v25, "empty", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2117);
  }
}

void sub_10026147C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100261494(uint64_t a1, int a2)
{
  int v3;
  uint64_t result;
  int v5;
  BOOL v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_DWORD *)a1 & 0x1F0000;
  if (v3 == 655360)
  {
    if ((a2 & 0x80000000) == 0)
      return 1;
    return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 1) >> 6) & 1;
  }
  if (v3 == 0x10000)
  {
    if ((a2 & 0x80000000) == 0)
      return 1;
    return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 1) >> 6) & 1;
  }
  v5 = *(_DWORD *)a1 & 0x1B0000;
  result = 1;
  v6 = v3 == 786432 || v5 == 0;
  if (!v6 && v3 != 917504 && v5 != 0x20000 && v3 != 196608)
  {
    HIDWORD(v7) = v3 - 327680;
    LODWORD(v7) = v3 - 327680;
    switch((v7 >> 17))
    {
      case 0u:
        v8 = *(uint64_t **)(a1 + 8);
        v9 = *v8;
        if (0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 5) <= a2)
        {
          sub_1001F37D4(&v12, "(size_t)i < vv.size()");
          sub_100294B74(-215, &v12, "isContinuous", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2138);
        }
        v10 = 96;
        goto LABEL_22;
      case 2u:
        if (a2 < 0)
          return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 1) >> 6) & 1;
        return result;
      case 3u:
        v11 = *(uint64_t **)(a1 + 8);
        v9 = *v11;
        if (0xCCCCCCCCCCCCCCCDLL * ((v11[1] - *v11) >> 4) <= a2)
        {
          sub_1001F37D4(&v12, "(size_t)i < vv.size()");
          sub_100294B74(-215, &v12, "isContinuous", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2152);
        }
        v10 = 80;
LABEL_22:
        result = (*(unsigned __int8 *)(v9 + a2 * (uint64_t)v10 + 1) >> 6) & 1;
        break;
      case 5u:
        if (a2 < 1 || *(_DWORD *)(a1 + 20) <= a2)
        {
          v12 = 0;
          v13 = 0;
          qmemcpy((void *)sub_10029430C(&v12, 22), "i > 0 && i < sz.height", 22);
          sub_100294B74(-215, &v12, "isContinuous", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2145);
        }
        result = (*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 96 * a2 + 1) >> 6) & 1;
        break;
      default:
        v12 = 0;
        v13 = 0;
        qmemcpy((void *)sub_10029430C(&v12, 30), "Unknown/unsupported array type", 30);
        sub_100294B74(-213, &v12, "isContinuous", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2159);
    }
  }
  return result;
}

void sub_100261750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_1002617AC(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE v29[64];
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;

  v3 = *(_DWORD *)a1 & 0x1F0000;
  if (!v3)
  {
    sub_100261B50((uint64_t)a2);
    return;
  }
  if (v3 == 0x20000)
    goto LABEL_11;
  v4 = *(_DWORD *)a1 & 0x1D0000;
  if (v4 != 786432 && v4 != 0x10000)
  {
    if (v3 == 655360)
    {
      sub_10029CB84(*(_QWORD *)(a1 + 8), (uint64_t)a2);
      return;
    }
    if (v3 != 393216)
    {
      *(_OWORD *)v29 = 0uLL;
      sub_100294B74(-213, (uint64_t *)v29, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2350);
    }
    v20 = *(_QWORD **)(a1 + 8);
    if ((*a2 & 0x1F0000) == 0x10000)
    {
      v21 = sub_100261ED0((uint64_t)a2, -1);
      (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)*v20 + 24))(*v20, v20, v21, 0xFFFFFFFFLL);
      return;
    }
    *(_DWORD *)v29 = 1124007936;
    memset(&v29[4], 0, 60);
    v30 = &v29[8];
    v31 = &v32;
    v32 = 0;
    v33 = 0;
    (*(void (**)(_QWORD, _QWORD *, _BYTE *, uint64_t))(*(_QWORD *)*v20 + 24))(*v20, v20, v29, 0xFFFFFFFFLL);
    sub_1002181EC((uint64_t)v29, (uint64_t)a2);
    if (*(_QWORD *)&v29[56])
    {
      v22 = (unsigned int *)(*(_QWORD *)&v29[56] + 20);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(_QWORD *)&v29[56];
        if (*(_QWORD *)&v29[56])
        {
          *(_QWORD *)&v29[56] = 0;
          v26 = *(_QWORD *)(v25 + 8);
          if (!v26)
          {
            v26 = *(_QWORD *)&v29[48];
            if (!*(_QWORD *)&v29[48])
              v26 = sub_100255D20();
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 48))(v26, v25);
        }
      }
    }
    *(_QWORD *)&v29[56] = 0;
    memset(&v29[16], 0, 32);
    if (*(int *)&v29[4] >= 1)
    {
      v27 = 0;
      v28 = v30;
      do
        *(_DWORD *)&v28[4 * v27++] = 0;
      while (v27 < *(int *)&v29[4]);
    }
    v19 = v31;
    if (v31 != &v32)
      goto LABEL_25;
    return;
  }
  if (v3 != 0x10000)
  {
LABEL_11:
    sub_10025CCB8(a1, -1, (uint64_t)v29);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)v29 = *(_OWORD *)v5;
    *(_OWORD *)&v29[16] = v6;
    *(_OWORD *)&v29[32] = *(_OWORD *)(v5 + 32);
    v7 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)&v29[48] = *(_QWORD *)(v5 + 48);
    *(_QWORD *)&v29[56] = v7;
    v30 = &v29[8];
    v31 = &v32;
    v32 = 0;
    v33 = 0;
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 20);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    if (*(int *)(v5 + 4) > 2)
    {
      *(_DWORD *)&v29[4] = 0;
      sub_100256B48((uint64_t)v29, v5);
    }
    else
    {
      v10 = *(_QWORD **)(v5 + 72);
      v11 = v31;
      *(_QWORD *)v31 = *v10;
      v11[1] = v10[1];
    }
  }
  sub_1002181EC((uint64_t)v29, (uint64_t)a2);
  if (*(_QWORD *)&v29[56])
  {
    v12 = (unsigned int *)(*(_QWORD *)&v29[56] + 20);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      v15 = *(_QWORD *)&v29[56];
      if (*(_QWORD *)&v29[56])
      {
        *(_QWORD *)&v29[56] = 0;
        v16 = *(_QWORD *)(v15 + 8);
        if (!v16)
        {
          v16 = *(_QWORD *)&v29[48];
          if (!*(_QWORD *)&v29[48])
            v16 = sub_100255D20();
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v16, v15);
      }
    }
  }
  *(_QWORD *)&v29[56] = 0;
  memset(&v29[16], 0, 32);
  if (*(int *)&v29[4] >= 1)
  {
    v17 = 0;
    v18 = v30;
    do
      *(_DWORD *)&v18[4 * v17++] = 0;
    while (v17 < *(int *)&v29[4]);
  }
  v19 = v31;
  if (v31 != &v32)
LABEL_25:
    j__free(v19);
}

void sub_100261AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100261B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100261B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_100261B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100261B50(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t i;
  uint64_t v28;
  int32x2_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x40000000) != 0)
  {
    v30 = 0;
    v31 = 0;
    v2 = sub_10029430C(&v30, 12);
    *(_DWORD *)(v2 + 8) = 690513274;
    *(_QWORD *)v2 = *(_QWORD *)"!fixedSize()";
    sub_100294B74(-215, &v30, "release", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2832);
  }
  switch(HIWORD(v1) & 0x1F)
  {
    case 0:
      return;
    case 1:
      v3 = *(_QWORD *)(a1 + 8);
      v4 = *(_QWORD *)(v3 + 56);
      if (v4)
      {
        v5 = (unsigned int *)(v4 + 20);
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          v8 = *(_QWORD *)(v3 + 56);
          if (v8)
          {
            *(_QWORD *)(v3 + 56) = 0;
            v9 = *(_QWORD *)(v8 + 8);
            if (!v9)
            {
              v9 = *(_QWORD *)(v3 + 48);
              if (!v9)
                v9 = sub_100255D20();
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, v8);
          }
        }
      }
      *(_QWORD *)(v3 + 56) = 0;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      if (*(int *)(v3 + 4) >= 1)
      {
        v10 = 0;
        v11 = *(_QWORD *)(v3 + 64);
        do
          *(_DWORD *)(v11 + 4 * v10++) = 0;
        while (v10 < *(int *)(v3 + 4));
      }
      return;
    case 3:
      v29 = 0;
      sub_10026214C(a1, &v29, v1 & 0xFFF, -1, 0, 0);
      return;
    case 4:
      v12 = *(uint64_t **)(a1 + 8);
      v14 = *v12;
      v13 = v12[1];
      if (v13 != *v12)
      {
        v15 = v12[1];
        do
        {
          v17 = *(void **)(v15 - 24);
          v15 -= 24;
          v16 = v17;
          if (v17)
          {
            *(_QWORD *)(v13 - 16) = v16;
            operator delete(v16);
          }
          v13 = v15;
        }
        while (v15 != v14);
      }
      goto LABEL_36;
    case 5:
      sub_1002693A4(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 8));
      return;
    case 7:
    case 8:
    case 9:
      nullsub_1(*(_QWORD *)(a1 + 8));
      return;
    case 0xA:
      v18 = *(_QWORD *)(a1 + 8);
      v19 = *(_QWORD *)(v18 + 32);
      if (v19)
      {
        v20 = (unsigned int *)(v19 + 16);
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
          sub_10029BD9C(v18);
      }
      if (*(int *)(v18 + 4) >= 1)
      {
        v23 = 0;
        v24 = *(_QWORD *)(v18 + 48);
        do
          *(_DWORD *)(v24 + 4 * v23++) = 0;
        while (v23 < *(int *)(v18 + 4));
      }
      *(_QWORD *)(v18 + 32) = 0;
      return;
    case 0xB:
      v12 = *(uint64_t **)(a1 + 8);
      v14 = *v12;
      v25 = v12[1];
      if (v25 != *v12)
      {
        do
          v25 = sub_10029B66C(v25 - 80);
        while (v25 != v14);
      }
LABEL_36:
      v12[1] = v14;
      break;
    case 0xD:
      v26 = *(uint64_t **)(a1 + 8);
      v28 = *v26;
      for (i = v26[1]; i != v28; nullsub_1(i))
        i -= 64;
      v26[1] = v28;
      break;
    default:
      v30 = 0;
      v31 = 0;
      qmemcpy((void *)sub_10029430C(&v30, 30), "Unknown/unsupported array type", 30);
      sub_100294B74(-213, &v30, "release", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2897);
  }
}

void sub_100261E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100261ED0(uint64_t a1, signed int a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)a1 & 0x1F0000;
  if (a2 < 0)
  {
    if (v2 != 0x10000)
    {
      v6 = 0;
      v7 = 0;
      *(_QWORD *)sub_10029430C(&v6, 8) = 0x54414D203D3D206BLL;
      sub_100294B74(-215, &v6, "getMatRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2924);
    }
    return *(_QWORD *)(a1 + 8);
  }
  else if (v2 == 327680)
  {
    v3 = *(_QWORD **)(a1 + 8);
    if ((int)(-1431655765 * ((v3[1] - *v3) >> 5)) <= a2)
    {
      v6 = 0;
      v7 = 0;
      v4 = sub_10029430C(&v6, 17);
      *(_BYTE *)(v4 + 16) = 41;
      *(_OWORD *)v4 = *(_OWORD *)"i < (int)v.size()";
      sub_100294B74(-215, &v6, "getMatRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2933);
    }
    return *v3 + 96 * a2;
  }
  else
  {
    if (v2 != 983040)
    {
      v6 = 0;
      v7 = 0;
      qmemcpy((void *)sub_10029430C(&v6, 41), "k == STD_VECTOR_MAT || k == STD_ARRAY_MAT", 41);
      sub_100294B74(-215, &v6, "getMatRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2928);
    }
    if (*(_DWORD *)(a1 + 20) <= a2)
    {
      v6 = 0;
      v7 = 0;
      qmemcpy((void *)sub_10029430C(&v6, 23), "0 <= i && i < sz.height", 23);
      sub_100294B74(-215, &v6, "getMatRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2939);
    }
    return *(_QWORD *)(a1 + 8) + 96 * a2;
  }
}

void sub_1002620E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100262140(_DWORD *a1)
{
  return *a1 >> 31;
}

void sub_10026214C(uint64_t a1, int32x2_t *a2, int a3, signed int a4, char a5, unsigned int a6)
{
  int v6;
  int v7;
  char v8;
  uint64_t v10;
  __int32 v11;
  int v12;
  char v14;
  char v16;
  char v18;
  char v20;
  uint64_t v22;
  __int32 v23;
  int v24;
  uint64_t v27;
  int32x2_t __src;
  uint64_t v29;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 & 0x1F0000;
  if (a6)
    v8 = 1;
  else
    v8 = a5;
  if ((v8 & 1) == 0 && a4 < 0 && v7 == 0x10000)
  {
    if ((v6 & 0x40000000) != 0
      && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 4) != a2->i32[0]
       || **(_DWORD **)(*(_QWORD *)(a1 + 8) + 64) != a2->i32[1]))
    {
      __src = 0;
      v29 = 0;
      qmemcpy((void *)sub_10029430C(&__src, 53), "!fixedSize() || ((Mat*)obj)->size.operator()() == _sz", 53);
      sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2385);
    }
    if (v6 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a3)
    {
      __src = 0;
      v29 = 0;
      qmemcpy((void *)sub_10029430C(&__src, 44), "!fixedType() || ((Mat*)obj)->type() == mtype", 44);
      sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2386);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v11 = a2->i32[0];
    v12 = a3 & 0xFFF;
    if (*(int *)(v10 + 4) > 2
      || *(_DWORD *)(v10 + 8) != a2->i32[1]
      || *(_DWORD *)(v10 + 12) != v11
      || (*(_DWORD *)v10 & 0xFFF) != v12
      || !*(_QWORD *)(v10 + 16))
    {
      __src.i32[0] = a2->i32[1];
      __src.i32[1] = v11;
      sub_100255F30((char *)v10, 2, (uint64_t *)&__src, v12);
    }
  }
  else
  {
    if (a4 < 0 && v7 == 655360)
      v14 = v8;
    else
      v14 = 1;
    if ((v14 & 1) != 0)
    {
      if (a4 < 0 && v7 == 589824)
        v16 = v8;
      else
        v16 = 1;
      if ((v16 & 1) == 0)
      {
        if ((v6 & 0x40000000) != 0
          && (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8) != a2->i32[0]
           || *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4) != a2->i32[1]))
        {
          __src = 0;
          v29 = 0;
          qmemcpy((void *)sub_10029430C(&__src, 51), "!fixedSize() || ((cuda::GpuMat*)obj)->size() == _sz", 51);
          sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2399);
        }
        if (v6 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a3)
        {
          __src = 0;
          v29 = 0;
          qmemcpy((void *)sub_10029430C(&__src, 53), "!fixedType() || ((cuda::GpuMat*)obj)->type() == mtype", 53);
          sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2400);
        }
        sub_10021DCCC();
      }
      if (a4 < 0 && v7 == 458752)
        v18 = v8;
      else
        v18 = 1;
      if ((v18 & 1) == 0)
      {
        if ((v6 & 0x40000000) != 0
          && (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 20) != a2->i32[0]
           || *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16) != a2->i32[1]))
        {
          sub_1001F37D4(&__src, "!fixedSize() || ((ogl::Buffer*)obj)->size() == _sz");
          sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2406);
        }
        if (v6 < 0 && *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24) != a3)
        {
          sub_1001F37D4(&__src, "!fixedType() || ((ogl::Buffer*)obj)->type() == mtype");
          sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2407);
        }
        sub_10026F5AC();
      }
      if (a4 < 0 && v7 == 0x80000)
        v20 = v8;
      else
        v20 = 1;
      if ((v20 & 1) == 0)
      {
        if ((v6 & 0x40000000) != 0)
        {
          v27 = *(_QWORD *)(a1 + 8);
          if (*(_DWORD *)(v27 + 8) != a2->i32[0] || *(_DWORD *)(v27 + 4) != a2->i32[1])
          {
            sub_1001F37D4(&__src, "!fixedSize() || ((cuda::HostMem*)obj)->size() == _sz");
            sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2413);
          }
        }
        if (v6 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a3)
        {
          sub_1001F37D4(&__src, "!fixedType() || ((cuda::HostMem*)obj)->type() == mtype");
          sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2414);
        }
        sub_10021DDEC();
      }
      __src = vrev64_s32(*a2);
      sub_100258F0C((int *)a1, 2, (uint64_t *)&__src, a3, a4, a5, a6);
    }
    else
    {
      if ((v6 & 0x40000000) != 0
        && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) + 4) != a2->i32[0]
         || **(_DWORD **)(*(_QWORD *)(a1 + 8) + 48) != a2->i32[1]))
      {
        __src = 0;
        v29 = 0;
        qmemcpy((void *)sub_10029430C(&__src, 54), "!fixedSize() || ((UMat*)obj)->size.operator()() == _sz", 54);
        sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2392);
      }
      if (v6 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a3)
      {
        __src = 0;
        v29 = 0;
        qmemcpy((void *)sub_10029430C(&__src, 45), "!fixedType() || ((UMat*)obj)->type() == mtype", 45);
        sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2393);
      }
      v22 = *(_QWORD *)(a1 + 8);
      v23 = a2->i32[0];
      v24 = a3 & 0xFFF;
      if (*(int *)(v22 + 4) > 2
        || *(_DWORD *)(v22 + 8) != a2->i32[1]
        || *(_DWORD *)(v22 + 12) != v23
        || (*(_DWORD *)v22 & 0xFFF) != v24
        || !*(_QWORD *)(v22 + 32))
      {
        __src.i32[0] = a2->i32[1];
        __src.i32[1] = v23;
        sub_10029B708(v22, 2, (uint64_t *)&__src, v24, 0);
      }
    }
  }
}

void sub_100262754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10026285C(uint64_t a1, unsigned int a2, unsigned int a3, int a4, signed int a5, char a6, unsigned int a7)
{
  int v7;
  int v8;
  char v9;
  uint64_t v11;
  int v12;
  char v14;
  char v16;
  char v18;
  char v20;
  uint64_t v22;
  int v23;
  uint64_t v26;
  unint64_t __src;
  uint64_t v28;

  v7 = *(_DWORD *)a1;
  v8 = *(_DWORD *)a1 & 0x1F0000;
  if (a7)
    v9 = 1;
  else
    v9 = a6;
  if ((v9 & 1) == 0 && a5 < 0 && v8 == 0x10000)
  {
    if ((v7 & 0x40000000) != 0
      && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 4) != a3
       || **(_DWORD **)(*(_QWORD *)(a1 + 8) + 64) != a2))
    {
      __src = 0;
      v28 = 0;
      qmemcpy((void *)sub_10029430C(&__src, 68), "!fixedSize() || ((Mat*)obj)->size.operator()() == Size(_cols, _rows)", 68);
      sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2427);
    }
    if (v7 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a4)
    {
      __src = 0;
      v28 = 0;
      qmemcpy((void *)sub_10029430C(&__src, 44), "!fixedType() || ((Mat*)obj)->type() == mtype", 44);
      sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2428);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v12 = a4 & 0xFFF;
    if (*(int *)(v11 + 4) > 2
      || *(_DWORD *)(v11 + 8) != a2
      || *(_DWORD *)(v11 + 12) != a3
      || (*(_DWORD *)v11 & 0xFFF) != v12
      || !*(_QWORD *)(v11 + 16))
    {
      __src = __PAIR64__(a3, a2);
      sub_100255F30((char *)v11, 2, (uint64_t *)&__src, v12);
    }
  }
  else
  {
    if (a5 < 0 && v8 == 655360)
      v14 = v9;
    else
      v14 = 1;
    if ((v14 & 1) != 0)
    {
      if (a5 < 0 && v8 == 589824)
        v16 = v9;
      else
        v16 = 1;
      if ((v16 & 1) == 0)
      {
        if ((v7 & 0x40000000) != 0
          && (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8) != a3 || *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4) != a2))
        {
          __src = 0;
          v28 = 0;
          qmemcpy((void *)sub_10029430C(&__src, 66), "!fixedSize() || ((cuda::GpuMat*)obj)->size() == Size(_cols, _rows)", 66);
          sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2441);
        }
        if (v7 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a4)
        {
          __src = 0;
          v28 = 0;
          qmemcpy((void *)sub_10029430C(&__src, 53), "!fixedType() || ((cuda::GpuMat*)obj)->type() == mtype", 53);
          sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2442);
        }
        sub_10021DCCC();
      }
      if (a5 < 0 && v8 == 458752)
        v18 = v9;
      else
        v18 = 1;
      if ((v18 & 1) == 0)
      {
        if ((v7 & 0x40000000) != 0
          && (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 20) != a3 || *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16) != a2))
        {
          sub_1001F37D4(&__src, "!fixedSize() || ((ogl::Buffer*)obj)->size() == Size(_cols, _rows)");
          sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2448);
        }
        if (v7 < 0 && *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24) != a4)
        {
          sub_1001F37D4(&__src, "!fixedType() || ((ogl::Buffer*)obj)->type() == mtype");
          sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2449);
        }
        sub_10026F5AC();
      }
      if (a5 < 0 && v8 == 0x80000)
        v20 = v9;
      else
        v20 = 1;
      if ((v20 & 1) == 0)
      {
        if ((v7 & 0x40000000) != 0)
        {
          v26 = *(_QWORD *)(a1 + 8);
          if (*(_DWORD *)(v26 + 8) != a3 || *(_DWORD *)(v26 + 4) != a2)
          {
            sub_1001F37D4(&__src, "!fixedSize() || ((cuda::HostMem*)obj)->size() == Size(_cols, _rows)");
            sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2455);
          }
        }
        if (v7 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a4)
        {
          sub_1001F37D4(&__src, "!fixedType() || ((cuda::HostMem*)obj)->type() == mtype");
          sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2456);
        }
        sub_10021DDEC();
      }
      __src = __PAIR64__(a3, a2);
      sub_100258F0C((int *)a1, 2, (uint64_t *)&__src, a4, a5, a6, a7);
    }
    else
    {
      if ((v7 & 0x40000000) != 0
        && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) + 4) != a3
         || **(_DWORD **)(*(_QWORD *)(a1 + 8) + 48) != a2))
      {
        __src = 0;
        v28 = 0;
        qmemcpy((void *)sub_10029430C(&__src, 69), "!fixedSize() || ((UMat*)obj)->size.operator()() == Size(_cols, _rows)", 69);
        sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2434);
      }
      if (v7 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a4)
      {
        __src = 0;
        v28 = 0;
        qmemcpy((void *)sub_10029430C(&__src, 45), "!fixedType() || ((UMat*)obj)->type() == mtype", 45);
        sub_100294B74(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2435);
      }
      v22 = *(_QWORD *)(a1 + 8);
      v23 = a4 & 0xFFF;
      if (*(int *)(v22 + 4) > 2
        || *(_DWORD *)(v22 + 8) != a2
        || *(_DWORD *)(v22 + 12) != a3
        || (*(_DWORD *)v22 & 0xFFF) != v23
        || !*(_QWORD *)(v22 + 32))
      {
        __src = __PAIR64__(a3, a2);
        sub_10029B708(v22, 2, (uint64_t *)&__src, v23, 0);
      }
    }
  }
}

void sub_100262E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100262F48(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v1 = result;
  v2 = *(_QWORD *)(result + 32);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      result = sub_10029BD9C(result);
  }
  if (*(int *)(v1 + 4) >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(v1 + 48);
    do
      *(_DWORD *)(v7 + 4 * v6++) = 0;
    while (v6 < *(int *)(v1 + 4));
  }
  *(_QWORD *)(v1 + 32) = 0;
  return result;
}

void sub_100262FB8(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_100269800((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_100263054(uint64_t a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;

  v5 = *(char **)a1;
  v4 = *(char **)(a1 + 8);
  v6 = (unint64_t)&v4[-*(_QWORD *)a1];
  v7 = a2 - v6;
  if (a2 > v6)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 - (uint64_t)v4 >= v7)
    {
      bzero(*(void **)(a1 + 8), a2 - v6);
      *(_QWORD *)(a1 + 8) = &v4[v7];
      return;
    }
    if ((a2 & 0x8000000000000000) != 0)
      sub_100008F3C();
    v9 = v8 - (_QWORD)v5;
    v10 = 2 * v9;
    if (2 * v9 <= a2)
      v10 = a2;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v12 = (char *)operator new(v11);
    v13 = &v12[v6];
    v14 = &v12[v11];
    v15 = &v12[a2];
    bzero(&v12[v6], v7);
    if (v4 == v5)
      goto LABEL_29;
    if (v6 >= 8 && (unint64_t)(v5 - v12) >= 0x20)
    {
      if (v6 < 0x20)
      {
        v16 = 0;
        goto LABEL_21;
      }
      v16 = v6 & 0xFFFFFFFFFFFFFFE0;
      v17 = v4 - 16;
      v18 = &v12[v4 - 16 - v5];
      v19 = v6 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v20 = *(_OWORD *)v17;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
        *(_OWORD *)v18 = v20;
        v18 -= 32;
        v17 -= 32;
        v19 -= 32;
      }
      while (v19);
      if (v6 == v16)
        goto LABEL_28;
      if ((v6 & 0x18) != 0)
      {
LABEL_21:
        v13 -= v6 & 0xFFFFFFFFFFFFFFF8;
        v21 = &v4[-v16 - 8];
        v22 = (char *)(v21 - v5);
        v23 = v16 - (v6 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v24 = *(_QWORD *)v21;
          v21 -= 8;
          *(_QWORD *)&v22[(_QWORD)v12] = v24;
          v22 -= 8;
          v23 += 8;
        }
        while (v23);
        v4 -= v6 & 0xFFFFFFFFFFFFFFF8;
        if (v6 == (v6 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_28;
        goto LABEL_26;
      }
      v13 -= v16;
      v4 -= v16;
    }
LABEL_26:
    v25 = v13 - 1;
    do
    {
      v26 = *--v4;
      *v25-- = v26;
    }
    while (v4 != v5);
LABEL_28:
    v4 = v5;
    v13 = v12;
LABEL_29:
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v14;
    if (v4)
      operator delete(v4);
    return;
  }
  if (a2 < v6)
    *(_QWORD *)(a1 + 8) = &v5[a2];
}

void sub_10026322C(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(a1[1] - *a1) >> 1;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002699F4(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 2 * a2;
  }
}

void sub_100263258(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_100269BB0(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 3 * a2;
  }
}

void sub_100263290(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(a1[1] - *a1) >> 2;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_100223D9C((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 4 * a2;
  }
}

void sub_1002632BC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_100269DE4((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 6 * a2;
  }
}

void sub_1002632F8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10026A02C((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
}

void sub_100263324(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10026A1FC((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 12 * a2;
  }
}

void sub_100263360(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(a1[1] - *a1) >> 4;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10026A444((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 16 * a2;
  }
}

void sub_10026338C(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10026A624((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 24 * a2;
  }
}

void sub_1002633C8(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(a1[1] - *a1) >> 5;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10026A7D0((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 32 * a2;
  }
}

void sub_1002633F4(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10026A920((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 36 * a2;
  }
}

void sub_100263438(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10026AB18((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 48 * a2;
  }
}

void sub_100263474(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(a1[1] - *a1) >> 6;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10026ACF4((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + (a2 << 6);
  }
}

void sub_1002634A0(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(a1[1] - *a1) >> 7;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10026AE84((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + (a2 << 7);
  }
}

void sub_1002634CC(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(a1[1] - *a1) >> 8;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10026B0FC((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + (a2 << 8);
  }
}

void sub_1002634F8(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(a1[1] - *a1) >> 9;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10026B428((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + (a2 << 9);
  }
}

void sub_100263524(int *a1, char *a2, unsigned __int16 a3)
{
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 *v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  _DWORD *v15;
  int *v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  _DWORD *v27;
  int *v28;
  int v29;
  int32x2_t v30;
  uint64_t __src[2];
  _BYTE v32[112];

  v4 = (uint64_t)a2;
  LODWORD(a2) = *(_DWORD *)a2 & 0x1F0000;
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 == 655360)
    {
      v18 = *(_QWORD *)(v4 + 8);
      a2 = (char *)*(unsigned int *)(v18 + 4);
      if ((int)a2 >= 1)
      {
        v19 = 0;
        v20 = *(_QWORD *)(v18 + 48);
        if (a2 < 8)
          goto LABEL_19;
        if ((unint64_t)__src - v20 < 0x20)
          goto LABEL_19;
        v19 = (char *)(a2 & 0x7FFFFFF8);
        v21 = (__int128 *)(v20 + 16);
        v22 = v32;
        v23 = a2 & 0xFFFFFFF8;
        do
        {
          v24 = *v21;
          *(v22 - 1) = *(v21 - 1);
          *v22 = v24;
          v21 += 2;
          v22 += 2;
          v23 -= 8;
        }
        while (v23);
        if (v19 != a2)
        {
LABEL_19:
          v25 = (char *)(a2 - v19);
          v26 = 4 * (_QWORD)v19;
          v27 = (_DWORD *)__src + (_QWORD)v19;
          v28 = (int *)(v20 + v26);
          do
          {
            v29 = *v28++;
            *v27++ = v29;
            --v25;
          }
          while (v25);
        }
      }
    }
    else if ((_DWORD)a2 == 0x10000)
    {
      v6 = *(_QWORD *)(v4 + 8);
      a2 = (char *)*(unsigned int *)(v6 + 4);
      if ((int)a2 >= 1)
      {
        v7 = 0;
        v8 = *(_QWORD *)(v6 + 64);
        if (a2 < 8)
          goto LABEL_10;
        if ((unint64_t)__src - v8 < 0x20)
          goto LABEL_10;
        v7 = (char *)(a2 & 0x7FFFFFF8);
        v9 = (__int128 *)(v8 + 16);
        v10 = v32;
        v11 = a2 & 0xFFFFFFF8;
        do
        {
          v12 = *v9;
          *(v10 - 1) = *(v9 - 1);
          *v10 = v12;
          v9 += 2;
          v10 += 2;
          v11 -= 8;
        }
        while (v11);
        if (v7 != a2)
        {
LABEL_10:
          v13 = (char *)(a2 - v7);
          v14 = 4 * (_QWORD)v7;
          v15 = (_DWORD *)__src + (_QWORD)v7;
          v16 = (int *)(v8 + v14);
          do
          {
            v17 = *v16++;
            *v15++ = v17;
            --v13;
          }
          while (v13);
        }
      }
    }
    else
    {
      sub_10025D920(v4, 0xFFFFFFFF, (uint64_t)&v30);
      __src[0] = (uint64_t)vrev64_s32(v30);
      LODWORD(a2) = 2;
    }
  }
  sub_100258F0C(a1, (int)a2, __src, a3, 0xFFFFFFFF, 0, 0);
}

void sub_1002636E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[2];

  if ((*(_DWORD *)a1 & 0x1F0000) == 0x10000)
  {
    if ((*(_DWORD *)a1 & 0x40000000) != 0)
    {
      v6[0] = 0;
      v6[1] = 0;
      v1 = sub_10029430C(v6, 12);
      *(_DWORD *)(v1 + 8) = 690513274;
      *(_QWORD *)v1 = *(_QWORD *)"!fixedSize()";
      sub_100294B74(-215, v6, "clear", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2906);
    }
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(int **)(v2 + 64);
    v4 = *v3;
    if ((_DWORD)v4)
    {
      if ((*(_BYTE *)(v2 + 1) & 0x80) != 0 || *(_QWORD *)(v2 + 16) > *(_QWORD *)(v2 + 40))
      {
        sub_100257A48(v2, 0);
        v3 = *(int **)(v2 + 64);
      }
      v5 = **(_QWORD **)(v2 + 72);
      *v3 = 0;
      *(_QWORD *)(v2 + 32) -= v4 * v5;
    }
  }
  else
  {
    sub_100261B50(a1);
  }
}

void sub_1002637E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1002637F8(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 2) & 0x1F) != 0;
}

void sub_100263808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v32;
  BOOL v33;
  BOOL v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[2];

  v3 = *(_DWORD *)a1 & 0x1F0000;
  if (!v3)
    return;
  if ((*(_DWORD *)a1 & 0x1D0000) != 0x10000)
  {
    if ((*(_DWORD *)a1 & 0x1F0000u) >= 0xA0000)
    {
      if (v3 == 655360)
      {
        sub_10029D924(*(_QWORD *)(a1 + 8), a2, a3);
        return;
      }
      if (v3 == 917504)
        goto LABEL_20;
    }
    else
    {
      if (v3 == 0x20000)
        goto LABEL_20;
      if (v3 == 589824)
      {
        if ((*(_DWORD *)a2 & 0x1F0000) == 0x10000)
        {
          v14 = *(_QWORD *)(a2 + 8);
          v15 = *(_OWORD *)(v14 + 16);
          v36 = *(_OWORD *)v14;
          v37 = v15;
          v38 = *(_OWORD *)(v14 + 32);
          v16 = *(_QWORD *)(v14 + 56);
          v39 = *(_QWORD *)(v14 + 48);
          v40 = v16;
          v41 = (_DWORD *)&v36 + 2;
          v42 = &v43;
          v43 = 0;
          v44 = 0;
          if (v16)
          {
            v17 = (unsigned int *)(v16 + 20);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 + 1, v17));
          }
          if (*(int *)(v14 + 4) > 2)
          {
            DWORD1(v36) = 0;
            sub_100256B48((uint64_t)&v36, v14);
          }
          else
          {
            v19 = *(_QWORD **)(v14 + 72);
            v20 = v42;
            *(_QWORD *)v42 = *v19;
            v20[1] = v19[1];
          }
        }
        else
        {
          sub_10025CCB8(a2, -1, (uint64_t)&v36);
        }
        v28 = sub_10025E20C((int *)a1, -1);
        if (SDWORD1(v36) <= 2 && (v36 & 0x4000) != 0)
        {
          v29 = *v41;
          v30 = v41[1];
          if (v30 == 1 || v29 == 1)
          {
            v32 = (v28 >> 3) & 0x1FF;
            v33 = v30 == v32 + 1;
            if (v29 != 1)
              v33 = 0;
            v34 = v29 == v32 + 1 || v29 == 1;
            if (v30 != 1)
              v34 = 0;
            if (v34 || v33 || v30 == 1 && v29 == 4 && v32 <= 3 && (v36 & 0xFFF) == 6)
            {
              v35 = *(_OWORD *)(v37 + 16);
              v45[0] = *(_OWORD *)v37;
              v45[1] = v35;
              sub_10021DF74();
            }
          }
        }
        v45[0] = 0uLL;
        qmemcpy((void *)sub_10029430C(v45, 65), "checkScalar(value, type(), arr.kind(), _InputArray::CUDA_GPU_MAT)", 65);
        sub_100294B74(-215, (uint64_t *)v45, "setTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3004);
      }
    }
    v36 = 0uLL;
    sub_100294B74(-213, (uint64_t *)&v36, "setTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3008);
  }
  if (v3 == 0x10000)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_OWORD *)(v7 + 16);
    v36 = *(_OWORD *)v7;
    v37 = v8;
    v38 = *(_OWORD *)(v7 + 32);
    v9 = *(_QWORD *)(v7 + 56);
    v39 = *(_QWORD *)(v7 + 48);
    v40 = v9;
    v41 = (_DWORD *)&v36 + 2;
    v42 = &v43;
    v43 = 0;
    v44 = 0;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 20);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    if (*(int *)(v7 + 4) > 2)
    {
      DWORD1(v36) = 0;
      sub_100256B48((uint64_t)&v36, v7);
    }
    else
    {
      v12 = *(_QWORD **)(v7 + 72);
      v13 = v42;
      *(_QWORD *)v42 = *v12;
      v13[1] = v12[1];
    }
    goto LABEL_22;
  }
LABEL_20:
  sub_10025CCB8(a1, -1, (uint64_t)&v36);
LABEL_22:
  sub_100219808((uint64_t)&v36, a2, a3);
  if (v40)
  {
    v21 = (unsigned int *)(v40 + 20);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      v24 = v40;
      if (v40)
      {
        v40 = 0;
        v25 = *(_QWORD *)(v24 + 8);
        if (!v25)
        {
          v25 = v39;
          if (!v39)
            v25 = sub_100255D20();
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 48))(v25, v24);
      }
    }
  }
  v40 = 0;
  v37 = 0u;
  v38 = 0u;
  if (SDWORD1(v36) >= 1)
  {
    v26 = 0;
    v27 = v41;
    do
      v27[v26++] = 0;
    while (v26 < SDWORD1(v36));
  }
  if (v42 != &v43)
    j__free(v42);
}

void sub_100263C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10029434C((uint64_t *)(v9 - 64));
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int *sub_100263CBC()
{
  return &dword_100497CA0;
}

void sub_100263CC8(uint64_t a1, double *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  float v15;
  char *v16;
  uint64_t v17;
  float *v18;
  double v19;
  double *v20;
  uint64_t v21;
  double *v22;
  char *v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int8x16_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64x2_t v45;
  int64x2_t v46;
  unint64_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int8x16_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64x2_t v54;
  int64x2_t v55;
  unint64_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int8x16_t *v59;
  uint64_t v60;
  double v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  __int128 v70;
  void *v71[2];
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  void *v76;
  _QWORD v77[2];
  char v78[8];
  int v79;

  sub_100298C2C(v78, &off_10044E1F8);
  if ((int)sub_100260608(a1, -1) >= 3)
  {
    v70 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v70, 14), "_m.dims() <= 2", 14);
    sub_100294B74(-215, (uint64_t *)&v70, "setIdentity", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3277);
  }
  if ((*(_DWORD *)a1 & 0x1F0000) == 0x10000)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_OWORD *)(v4 + 16);
    v70 = *(_OWORD *)v4;
    *(_OWORD *)v71 = v5;
    v72 = *(_OWORD *)(v4 + 32);
    v6 = *(_QWORD *)(v4 + 56);
    v73 = *(_QWORD *)(v4 + 48);
    v74 = v6;
    v75 = (char *)&v70 + 8;
    v76 = v77;
    v77[0] = 0;
    v77[1] = 0;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 20);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    if (*(int *)(v4 + 4) > 2)
    {
      DWORD1(v70) = 0;
      sub_100256B48((uint64_t)&v70, v4);
    }
    else
    {
      v9 = *(_QWORD **)(v4 + 72);
      v10 = v76;
      *(_QWORD *)v76 = *v9;
      v10[1] = v9[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v70);
  }
  v11 = DWORD2(v70);
  v12 = HIDWORD(v70);
  v13 = v70 & 0xFFF;
  if (v13 == 6)
  {
    if (SDWORD2(v70) >= 1 && SHIDWORD(v70) >= 1)
    {
      v19 = *a2;
      v20 = (double *)v71[0];
      v21 = v77[0] >> 3;
      if (HIDWORD(v70) > 3)
      {
        v41 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v19, 0);
        if ((HIDWORD(v70) & 0xFFFFFFFC) == (unint64_t)HIDWORD(v70))
        {
          v42 = 0;
          v43 = (8 * HIDWORD(v70)) & 0x7FFFFFFE0;
          v44 = 8 * v21;
          v45 = vdupq_n_s64(2uLL);
          v46 = vdupq_n_s64(4uLL);
          do
          {
            v47 = 0;
            v48 = vdupq_n_s64(v42);
            v49 = (int64x2_t)xmmword_1003BA9E0;
            do
            {
              v50 = (int8x16_t *)&v20[v47 / 8];
              *v50 = vandq_s8(v41, (int8x16_t)vceqq_s64(v49, v48));
              v50[1] = vandq_s8(v41, (int8x16_t)vceqq_s64(vaddq_s64(v49, v45), v48));
              v49 = vaddq_s64(v49, v46);
              v47 += 32;
            }
            while (v43 != v47);
            ++v42;
            v20 = (double *)((char *)v20 + v44);
          }
          while (v42 != v11);
        }
        else
        {
          v51 = 0;
          v52 = 8 * v21;
          v53 = (8 * HIDWORD(v70)) & 0x7FFFFFFE0;
          v54 = vdupq_n_s64(2uLL);
          v55 = vdupq_n_s64(4uLL);
          do
          {
            v56 = 0;
            v57 = vdupq_n_s64(v51);
            v58 = (int64x2_t)xmmword_1003BA9E0;
            do
            {
              v59 = (int8x16_t *)&v20[v56 / 8];
              *v59 = vandq_s8(v41, (int8x16_t)vceqq_s64(v58, v57));
              v59[1] = vandq_s8(v41, (int8x16_t)vceqq_s64(vaddq_s64(v58, v54), v57));
              v58 = vaddq_s64(v58, v55);
              v56 += 32;
            }
            while (v53 != v56);
            v60 = v12 & 0x7FFFFFFC;
            do
            {
              if (v51 == v60)
                v61 = v19;
              else
                v61 = 0.0;
              v20[v60++] = v61;
            }
            while (v12 != v60);
            ++v51;
            v20 = (double *)((char *)v20 + v52);
          }
          while (v51 != v11);
        }
      }
      else
      {
        *(double *)v71[0] = v19;
        if ((_DWORD)v12 != 1)
        {
          v20[1] = 0.0;
          if ((_DWORD)v12 != 2)
            v20[2] = 0.0;
        }
        if ((_DWORD)v11 != 1)
        {
          v22 = &v20[v21];
          *v22 = 0.0;
          if ((_DWORD)v12 != 1)
          {
            v22[1] = v19;
            if ((_DWORD)v12 != 2)
              v22[2] = 0.0;
          }
          if ((_DWORD)v11 != 2)
          {
            v23 = (char *)&v22[v21];
            *(_QWORD *)v23 = 0;
            if ((_DWORD)v12 != 1)
            {
              *((_QWORD *)v23 + 1) = 0;
              if ((_DWORD)v12 != 2)
                *((double *)v23 + 2) = v19;
            }
            if ((_DWORD)v11 != 3)
            {
              v24 = v11 - 3;
              v25 = &v20[3 * v21 + 1];
              v26 = 8 * v21;
              do
              {
                *(v25 - 1) = 0.0;
                if ((_DWORD)v12 != 1)
                {
                  *v25 = 0.0;
                  if ((_DWORD)v12 != 2)
                    v25[1] = 0.0;
                }
                v25 = (double *)((char *)v25 + v26);
                --v24;
              }
              while (v24);
            }
          }
        }
      }
    }
  }
  else if (v13 == 5)
  {
    if (SDWORD2(v70) >= 1 && SHIDWORD(v70) >= 1)
    {
      v14 = 0;
      v15 = *a2;
      v16 = (char *)v71[0];
      v17 = 4 * (v77[0] >> 2);
      v18 = (float *)v71[0];
      do
      {
        bzero(v16, 4 * v12);
        if (v14 < v12)
          *v18 = v15;
        ++v14;
        v18 = (float *)((char *)v18 + v17 + 4);
        v16 += v17;
      }
      while (v11 != v14);
    }
  }
  else
  {
    v62 = 0u;
    v63 = 0u;
    sub_10021956C((uint64_t)&v70, (uint64_t)&v62);
    sub_100257828((uint64_t)&v70, 0, (uint64_t)&v62);
    sub_10021956C((uint64_t)&v62, (uint64_t)a2);
    if (v66)
    {
      v27 = (unsigned int *)(v66 + 20);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v66;
        if (v66)
        {
          v66 = 0;
          v31 = *(_QWORD *)(v30 + 8);
          if (!v31)
          {
            v31 = v65;
            if (!v65)
              v31 = sub_100255D20();
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 48))(v31, v30);
        }
      }
    }
    v66 = 0;
    v63 = 0u;
    v64 = 0u;
    if (SDWORD1(v62) >= 1)
    {
      v32 = 0;
      v33 = v67;
      do
        *(_DWORD *)(v33 + 4 * v32++) = 0;
      while (v32 < SDWORD1(v62));
    }
    if (v68 != &v69)
      j__free(v68);
  }
  if (v74)
  {
    v34 = (unsigned int *)(v74 + 20);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      v37 = v74;
      if (v74)
      {
        v74 = 0;
        v38 = *(_QWORD *)(v37 + 8);
        if (!v38)
        {
          v38 = v73;
          if (!v73)
            v38 = sub_100255D20();
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 48))(v38, v37);
      }
    }
  }
  v74 = 0;
  *(_OWORD *)v71 = 0u;
  v72 = 0u;
  if (SDWORD1(v70) >= 1)
  {
    v39 = 0;
    v40 = v75;
    do
      *(_DWORD *)&v40[4 * v39++] = 0;
    while (v39 < SDWORD1(v70));
  }
  if (v76 != v77)
    j__free(v76);
  if (v79)
    sub_1002989D0(v78);
}

void sub_100264228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  sub_100006BE4((uint64_t)&a9);
  sub_100006BE4((uint64_t)&a21);
  sub_1001D40CC(v21 - 112);
  _Unwind_Resume(a1);
}

void sub_10026425C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_10029434C((uint64_t *)va);
  sub_1001D40CC(v13 - 112);
  _Unwind_Resume(a1);
}

void sub_1002642B4(uint64_t a1, char a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  size_t v12;
  int v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  uint64_t v34[2];
  __int128 v35;
  void *__src[2];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  _QWORD v42[2];
  _BYTE v43[8];
  int v44;

  sub_100298C2C(v43, &off_10044E448);
  if ((*(_DWORD *)a1 & 0x1F0000) == 0x10000)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_OWORD *)(v4 + 16);
    v35 = *(_OWORD *)v4;
    *(_OWORD *)__src = v5;
    v37 = *(_OWORD *)(v4 + 32);
    v6 = *(_QWORD *)(v4 + 56);
    v38 = *(_QWORD *)(v4 + 48);
    v39 = v6;
    v40 = (char *)&v35 + 8;
    v41 = v42;
    v42[0] = 0;
    v42[1] = 0;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 20);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    if (*(int *)(v4 + 4) > 2)
    {
      DWORD1(v35) = 0;
      sub_100256B48((uint64_t)&v35, v4);
    }
    else
    {
      v9 = *(_QWORD **)(v4 + 72);
      v10 = v41;
      *(_QWORD *)v41 = *v9;
      v10[1] = v9[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v35);
  }
  v11 = v42[0];
  if (SDWORD1(v35) < 1)
  {
    v12 = 0;
    v13 = DWORD2(v35);
    if (DWORD2(v35) == HIDWORD(v35))
      goto LABEL_12;
LABEL_15:
    v34[0] = 0;
    v34[1] = 0;
    qmemcpy((void *)sub_10029430C(v34, 31), "m.dims <= 2 && m.rows == m.cols", 31);
    sub_100294B74(-215, v34, "completeSymm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3640);
  }
  v12 = *((_QWORD *)v41 + (DWORD1(v35) - 1));
  if (DWORD1(v35) > 2)
    goto LABEL_15;
  v13 = DWORD2(v35);
  if (DWORD2(v35) != HIDWORD(v35))
    goto LABEL_15;
LABEL_12:
  if (v13 >= 1)
  {
    v14 = (char *)__src[0];
    v15 = v13;
    v16 = 0;
    if ((a2 & 1) != 0)
    {
      v17 = (char *)__src[0] + v42[0];
      v33 = v12 + v42[0];
      v18 = 1;
      do
      {
        ++v16;
        v19 = v15;
        v20 = v14;
        v21 = v17;
        if (v16 < v15)
        {
          do
          {
            v20 += v12;
            memcpy(v20, v21, v12);
            v21 += v11;
            --v19;
          }
          while (v18 != v19);
        }
        ++v18;
        v17 += v33;
        v14 += v33;
      }
      while (v16 != v15);
    }
    else
    {
      v22 = (char *)__src[0];
      do
      {
        if (v16)
        {
          v23 = v16;
          v24 = v14;
          v25 = v22;
          do
          {
            memcpy(v24, v25, v12);
            v25 += v11;
            v24 += v12;
            --v23;
          }
          while (v23);
        }
        ++v16;
        v22 += v12;
        v14 += v11;
      }
      while (v16 != v15);
    }
  }
  if (v39)
  {
    v26 = (unsigned int *)(v39 + 20);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      v29 = v39;
      if (v39)
      {
        v39 = 0;
        v30 = *(_QWORD *)(v29 + 8);
        if (!v30)
        {
          v30 = v38;
          if (!v38)
            v30 = sub_100255D20();
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 48))(v30, v29);
      }
    }
  }
  v39 = 0;
  *(_OWORD *)__src = 0u;
  v37 = 0u;
  if (SDWORD1(v35) >= 1)
  {
    v31 = 0;
    v32 = v40;
    do
      *(_DWORD *)&v32[4 * v31++] = 0;
    while (v31 < SDWORD1(v35));
  }
  if (v41 != v42)
    j__free(v41);
  if (v44)
    sub_1002989D0(v43);
}

void sub_1002645D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_10029434C((uint64_t *)va);
  sub_100006BE4((uint64_t)va1);
  sub_1001D40CC(v3 - 96);
  _Unwind_Resume(a1);
}

void sub_100264604(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_10026461C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  signed int v13;
  signed int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t i;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t j;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void **v72;
  void **v73;
  void **v74;
  _QWORD *v75;
  __int128 v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void **v94;
  void **v95;
  void **v96;
  _QWORD *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  void *v105;
  _BYTE v106[64];
  _BYTE *v107;
  void *v108;
  _QWORD v109[2];

  LODWORD(v5) = a5;
  v6 = a2;
  if (!a2 || !(a3 | a4))
  {
    *(_OWORD *)v106 = 0uLL;
    qmemcpy((void *)sub_10029430C(v106, 29), "_arrays && (_ptrs || _planes)", 29);
    sub_100294B74(-215, (uint64_t *)v106, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4803);
  }
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (a5 < 0)
  {
    LODWORD(v5) = -1;
    do
    {
      v8 = *v6++;
      LODWORD(v5) = v5 + 1;
    }
    while (v8);
    *(_DWORD *)(a1 + 24) = v5;
    if (v5 >= 0x3E9)
    {
      *(_OWORD *)v106 = 0uLL;
      qmemcpy((void *)sub_10029430C(v106, 15), "narrays <= 1000", 15);
      sub_100294B74(-215, (uint64_t *)v106, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4818);
    }
  }
  *(_DWORD *)(a1 + 48) = 0;
  if ((int)v5 < 1)
  {
LABEL_68:
    *(_DWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    if (*(_QWORD *)(a1 + 8))
      v45 = (int)v5 < 1;
    else
      v45 = 1;
    if (!v45)
      goto LABEL_87;
    return;
  }
  v9 = 0;
  LODWORD(v10) = 0;
  v11 = -1;
  v12 = 0xFFFFFFFFLL;
  while (2)
  {
    v15 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v9);
    if (!v15)
    {
      *(_OWORD *)v106 = 0uLL;
      qmemcpy((void *)sub_10029430C(v106, 14), "arrays[i] != 0", 14);
      sub_100294B74(-215, (uint64_t *)v106, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4825);
    }
    v16 = *(_QWORD *)(a1 + 16);
    if (v16)
      *(_QWORD *)(v16 + 8 * v9) = *(_QWORD *)(v15 + 16);
    if (!*(_QWORD *)(v15 + 16))
      goto LABEL_15;
    if ((v12 & 0x80000000) == 0)
    {
      v17 = *(_DWORD **)(v15 + 64);
      v18 = *(v17 - 1);
      v19 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v12) + 64);
      if ((_DWORD)v18 == *(v19 - 1))
      {
        if ((_DWORD)v18 == 2)
        {
          if (*v17 == *v19 && v17[1] == v19[1])
            goto LABEL_41;
        }
        else
        {
          if ((int)v18 < 1)
            goto LABEL_41;
          if (*v17 == *v19)
          {
            v21 = 1;
            do
            {
              v22 = v21;
              if (v18 == v21)
                break;
              v23 = v17[v21];
              v24 = v19[v21++];
            }
            while (v23 == v24);
            if (v22 >= v18)
            {
LABEL_41:
              if ((*(_BYTE *)(v15 + 1) & 0x40) == 0)
                goto LABEL_42;
              goto LABEL_15;
            }
          }
        }
      }
      *(_OWORD *)v106 = 0uLL;
      qmemcpy((void *)sub_10029430C(v106, 26), "A.size == arrays[i0]->size", 26);
      sub_100294B74(-215, (uint64_t *)v106, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4845);
    }
    v10 = *(unsigned int *)(v15 + 4);
    v12 = v9;
    if ((int)v10 <= 0)
    {
      v11 = *(_DWORD *)(v15 + 4);
      LODWORD(v10) = 0;
      goto LABEL_41;
    }
    for (i = 0; i != v10; ++i)
    {
      if (*(int *)(*(_QWORD *)(v15 + 64) + 4 * i) > 1)
      {
        v11 = *(_DWORD *)(v15 + 4);
        LODWORD(v10) = i;
        if ((*(_BYTE *)(v15 + 1) & 0x40) != 0)
          goto LABEL_15;
LABEL_42:
        v25 = *(_QWORD *)(v15 + 72);
        v26 = *(_DWORD *)(v15 + 4);
        v27 = __OFSUB__(v26, 1);
        v28 = v26 - 1;
        if (v28 < 0 != v27)
        {
          v29 = v11 - 1;
          if (!*(_QWORD *)(v25 + 8 * (int)(v11 - 1)))
            goto LABEL_47;
        }
        else
        {
          v29 = v11 - 1;
          if (*(_QWORD *)(v25 + 8 * (int)(v11 - 1)) == *(_QWORD *)(v25 + 8 * v28))
          {
LABEL_47:
            v30 = v29;
            if ((int)v10 >= v29)
              v31 = v29;
            else
              v31 = v10;
            v13 = v11;
            while (v30 > (int)v10)
            {
              v32 = *(_QWORD *)(*(_QWORD *)(v15 + 72) + 8 * v30 - 8);
              v33 = *(_QWORD *)(*(_QWORD *)(v15 + 72) + 8 * v30) * *(int *)(*(_QWORD *)(v15 + 64) + 4 * v30);
              --v30;
              --v13;
              if (v33 < v32)
                goto LABEL_12;
            }
            v13 = v31;
LABEL_12:
            v14 = *(_DWORD *)(a1 + 48);
            if (v14 <= v13)
              v14 = v13;
            *(_DWORD *)(a1 + 48) = v14;
            goto LABEL_15;
          }
        }
        *(_OWORD *)v106 = 0uLL;
        qmemcpy((void *)sub_10029430C(v106, 27), "A.step[d-1] == A.elemSize()", 27);
        sub_100294B74(-215, (uint64_t *)v106, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4849);
      }
    }
    v11 = *(_DWORD *)(v15 + 4);
    if ((*(_BYTE *)(v15 + 1) & 0x40) == 0)
      goto LABEL_42;
LABEL_15:
    ++v9;
    v5 = *(int *)(a1 + 24);
    if (v9 < v5)
      continue;
    break;
  }
  if ((v12 & 0x80000000) != 0)
    goto LABEL_68;
  LODWORD(v34) = v11 - 1;
  v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v12) + 64);
  v36 = (int)(v11 - 1);
  v37 = *(int *)(v35 + 4 * v36);
  v38 = *(int *)(a1 + 48);
  if ((int)v38 < (int)(v11 - 1))
    LODWORD(v34) = *(_DWORD *)(a1 + 48);
  while (1)
  {
    v39 = v37;
    if (v36 <= v38)
      break;
    v40 = *(int *)(v35 - 4 + 4 * v36--);
    v37 = v39 * v40;
    --v11;
    if (v37 != (int)v37)
    {
      *(_QWORD *)(a1 + 40) = v39;
      if (v11 == (_DWORD)v10)
        v34 = 0;
      else
        v34 = v11;
      *(_DWORD *)(a1 + 48) = v34;
      v42 = (v34 - 1);
      v41 = (_DWORD)v34 == 1;
      if ((int)v34 >= 1)
        goto LABEL_65;
LABEL_77:
      v44 = 1;
      v43 = (uint64_t *)(a1 + 32);
      goto LABEL_81;
    }
  }
  *(_QWORD *)(a1 + 40) = v37;
  if ((_DWORD)v34 == (_DWORD)v10)
    v34 = 0;
  else
    v34 = v34;
  *(_DWORD *)(a1 + 48) = v34;
  v42 = (v34 - 1);
  v41 = (_DWORD)v34 == 1;
  if ((int)v34 < 1)
    goto LABEL_77;
LABEL_65:
  v43 = (uint64_t *)(a1 + 32);
  if (v41)
  {
    v46 = 0;
    v44 = 1;
    goto LABEL_80;
  }
  v46 = v42 - (v34 & 0xFFFFFFFE);
  v47 = (int *)(v35 + 4 * v42);
  v48 = 1;
  v49 = v34 & 0xFFFFFFFE;
  v50 = 1;
  do
  {
    v48 *= *v47;
    v50 *= *(v47 - 1);
    v47 -= 2;
    v49 -= 2;
  }
  while (v49);
  v44 = v50 * v48;
  if ((v34 & 0xFFFFFFFE) != v34)
  {
    do
LABEL_80:
      v44 *= *(int *)(v35 + 4 * v46--);
    while (v46 != -1);
  }
LABEL_81:
  *v43 = v44;
  *(_QWORD *)(a1 + 56) = 0;
  if (*(_QWORD *)(a1 + 8))
    v51 = (int)v5 < 1;
  else
    v51 = 1;
  if (!v51)
  {
LABEL_87:
    for (j = 0; j < *(int *)(a1 + 24); ++j)
    {
      v53 = *(_QWORD *)(*(_QWORD *)a1 + 8 * j);
      if (!v53)
      {
        *(_OWORD *)v106 = 0uLL;
        qmemcpy((void *)sub_10029430C(v106, 14), "arrays[i] != 0", 14);
        sub_100294B74(-215, (uint64_t *)v106, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4886);
      }
      v54 = *(_QWORD *)(v53 + 16);
      if (v54)
      {
        sub_10000A364((uint64_t)v106, 1, *(_DWORD *)(a1 + 40), *(_DWORD *)v53 & 0xFFF, v54, 0);
        v55 = *(_QWORD *)(a1 + 8);
        v56 = (_BYTE *)(v55 + 96 * j);
        if (v56 == v106)
        {
          if (*(_QWORD *)&v106[56])
          {
            v98 = (unsigned int *)(*(_QWORD *)&v106[56] + 20);
            do
            {
              v99 = __ldaxr(v98);
              v100 = v99 - 1;
            }
            while (__stlxr(v100, v98));
            if (!v100)
            {
              v101 = *(_QWORD *)&v106[56];
              if (*(_QWORD *)&v106[56])
              {
                *(_QWORD *)&v106[56] = 0;
                v102 = *(_QWORD *)(v101 + 8);
                if (!v102)
                {
                  v102 = *(_QWORD *)&v106[48];
                  if (!*(_QWORD *)&v106[48])
                    v102 = sub_100255D20();
                }
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v102 + 48))(v102, v101);
              }
            }
          }
          *(_QWORD *)&v106[56] = 0;
          memset(&v106[16], 0, 32);
          if (*(int *)&v106[4] >= 1)
          {
            v103 = 0;
            v104 = v107;
            do
              *(_DWORD *)&v104[4 * v103++] = 0;
            while (v103 < *(int *)&v106[4]);
          }
        }
        else
        {
          v57 = v55 + 96 * j;
          v60 = *(_QWORD *)(v57 + 56);
          v59 = (uint64_t *)(v57 + 56);
          v58 = v60;
          if (v60)
          {
            v61 = (unsigned int *)(v58 + 20);
            do
            {
              v62 = __ldaxr(v61);
              v63 = v62 - 1;
            }
            while (__stlxr(v63, v61));
            if (!v63)
            {
              v64 = *v59;
              if (*v59)
              {
                *v59 = 0;
                v65 = *(_QWORD *)(v64 + 8);
                if (!v65)
                {
                  v65 = *(_QWORD *)(v55 + 96 * j + 48);
                  if (!v65)
                    v65 = sub_100255D20();
                }
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 48))(v65, v64);
              }
            }
          }
          v66 = v55 + 96 * j;
          *(_OWORD *)(v66 + 16) = 0u;
          v67 = (_OWORD *)(v66 + 16);
          *v59 = 0;
          v68 = *((_DWORD *)v67 - 3);
          v67[1] = 0u;
          if (v68 >= 1)
          {
            v69 = 0;
            v70 = *(_QWORD *)(v55 + 96 * j + 64);
            do
              *(_DWORD *)(v70 + 4 * v69++) = 0;
            while (v69 < *((int *)v67 - 3));
          }
          v71 = v55 + 96 * j;
          v74 = *(void ***)(v71 + 72);
          v73 = (void **)(v71 + 72);
          v72 = v74;
          *(_OWORD *)v56 = *(_OWORD *)v106;
          *v67 = *(_OWORD *)&v106[16];
          *(_OWORD *)(v73 - 5) = *(_OWORD *)&v106[32];
          *(_OWORD *)(v73 - 3) = *(_OWORD *)&v106[48];
          if (v74 != v73 + 1)
          {
            j__free(v72);
            *v73 = v73 + 1;
            *(_QWORD *)(v55 + 96 * j + 64) = v73 - 8;
            v72 = v73 + 1;
          }
          v75 = v108;
          if (*(int *)&v106[4] > 2)
          {
            *v73 = v108;
            *(_QWORD *)(v55 + 96 * j + 64) = v107;
            v107 = &v106[8];
            v108 = v109;
          }
          else
          {
            *v72 = *(void **)v108;
            v72[1] = (void *)v75[1];
          }
          *(_DWORD *)v106 = 1124007936;
          memset(&v106[4], 0, 60);
        }
        v105 = v108;
        if (v108 == v109)
          continue;
      }
      else
      {
        *(_DWORD *)v106 = 1124007936;
        v76 = 0uLL;
        memset(&v106[4], 0, 60);
        v107 = &v106[8];
        v108 = v109;
        v109[0] = 0;
        v109[1] = 0;
        v77 = *(_QWORD *)(a1 + 8);
        v78 = (_BYTE *)(v77 + 96 * j);
        if (v78 != v106)
        {
          v79 = v77 + 96 * j;
          v82 = *(_QWORD *)(v79 + 56);
          v81 = (uint64_t *)(v79 + 56);
          v80 = v82;
          if (v82)
          {
            v83 = (unsigned int *)(v80 + 20);
            do
            {
              v84 = __ldaxr(v83);
              v85 = v84 - 1;
            }
            while (__stlxr(v85, v83));
            if (!v85)
            {
              v86 = *v81;
              if (*v81)
              {
                *v81 = 0;
                v87 = *(_QWORD *)(v86 + 8);
                if (!v87)
                {
                  v87 = *(_QWORD *)(v77 + 96 * j + 48);
                  if (!v87)
                    v87 = sub_100255D20();
                }
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v87 + 48))(v87, v86);
              }
            }
          }
          v88 = v77 + 96 * j;
          *(_OWORD *)(v88 + 16) = 0u;
          v89 = (_OWORD *)(v88 + 16);
          *v81 = 0;
          v90 = *((_DWORD *)v89 - 3);
          v89[1] = 0u;
          if (v90 >= 1)
          {
            v91 = 0;
            v92 = *(_QWORD *)(v77 + 96 * j + 64);
            do
              *(_DWORD *)(v92 + 4 * v91++) = 0;
            while (v91 < *((int *)v89 - 3));
          }
          v93 = v77 + 96 * j;
          v96 = *(void ***)(v93 + 72);
          v95 = (void **)(v93 + 72);
          v94 = v96;
          *(_OWORD *)v78 = *(_OWORD *)v106;
          *v89 = *(_OWORD *)&v106[16];
          *(_OWORD *)(v95 - 5) = *(_OWORD *)&v106[32];
          *(_OWORD *)(v95 - 3) = *(_OWORD *)&v106[48];
          if (v96 != v95 + 1)
          {
            j__free(v94);
            *v95 = v95 + 1;
            *(_QWORD *)(v77 + 96 * j + 64) = v95 - 8;
            v94 = v95 + 1;
          }
          v97 = v108;
          if (*(int *)&v106[4] > 2)
          {
            *v95 = v108;
            *(_QWORD *)(v77 + 96 * j + 64) = v107;
            v107 = &v106[8];
            v108 = v109;
          }
          else
          {
            *v94 = *(void **)v108;
            v94[1] = (void *)v97[1];
          }
          *(_DWORD *)v106 = 1124007936;
          v76 = 0uLL;
          memset(&v106[4], 0, 52);
        }
        *(_QWORD *)&v106[56] = 0;
        *(_OWORD *)&v106[16] = v76;
        *(_OWORD *)&v106[32] = v76;
        v105 = v108;
        if (v108 == v109)
          continue;
      }
      j__free(v105);
    }
  }
}

void sub_100264FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100265060(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  _QWORD *v4;
  void *v5;
  void *v6;

  v1 = *(unsigned int **)(result + 8);
  if (v1)
  {
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
    {
      v4 = *(_QWORD **)(result + 8);
      if (v4)
      {
        v5 = (void *)v4[8];
        if (v5)
        {
          v4[9] = v5;
          operator delete(v5);
        }
        v6 = (void *)v4[5];
        if (v6)
        {
          v4[6] = v6;
          operator delete(v6);
        }
        operator delete();
      }
    }
  }
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_1002650E0()
{
  return -1;
}

uint64_t sub_1002650E8()
{
  return -1;
}

void sub_1002650F8()
{
  operator delete();
}

void sub_100265110()
{
  operator delete();
}

void sub_100265124(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  size_t v6;
  uint64_t v7;
  size_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[2];

  v6 = (((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3);
  v7 = (a2 - 1);
  if (a2 < 1)
    goto LABEL_18;
  if (a6)
  {
    if (a5)
    {
      do
      {
        v8 = *(_QWORD *)(a6 + 8 * v7);
        if (v8 == 0x7FFFFFFF)
        {
          *(_QWORD *)(a6 + 8 * v7) = v6;
        }
        else
        {
          v9 = v6 > v8;
          v6 = *(_QWORD *)(a6 + 8 * v7);
          if (v9)
          {
            v15[0] = 0;
            v15[1] = 0;
            *(_OWORD *)sub_10029430C(v15, 16) = *(_OWORD *)"total <= step[i]";
            sub_100294B74(-215, v15, "allocate", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 183);
          }
        }
        v6 *= *(int *)(a3 + 4 * v7--);
      }
      while (v7 != -1);
    }
    else
    {
      do
      {
        *(_QWORD *)(a6 + 8 * v7) = v6;
        v6 *= *(int *)(a3 + 4 * v7--);
      }
      while (v7 != -1);
    }
  }
  else
  {
    if (a2 >= 2)
    {
      v11 = a2 & 0xFFFFFFFE;
      v10 = v7 - v11;
      v12 = (int *)(a3 + 4 * v7);
      v13 = 1;
      v14 = v11;
      do
      {
        v6 *= *v12;
        v13 *= *(v12 - 1);
        v12 -= 2;
        v14 -= 2;
      }
      while (v14);
      v6 *= v13;
      if (v11 == a2)
        goto LABEL_18;
    }
    else
    {
      v10 = (a2 - 1);
    }
    do
      v6 *= *(int *)(a3 + 4 * v10--);
    while (v10 != -1);
  }
LABEL_18:
  if (!a5)
    sub_1001D444C(v6);
  operator new();
}

void sub_100265300()
{
  operator delete();
}

void sub_100265328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_100265340(uint64_t a1, uint64_t a2)
{
  return a2 != 0;
}

void sub_10026534C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    if (*(_DWORD *)(a2 + 16))
    {
      v4 = 0;
      v5 = 0;
      v3 = sub_10029430C(&v4, 17);
      *(_BYTE *)(v3 + 16) = 48;
      *(_OWORD *)v3 = *(_OWORD *)"u->urefcount == 0";
      sub_100294B74(-215, &v4, "deallocate", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 212);
    }
    if (*(_DWORD *)(a2 + 20))
    {
      v4 = 0;
      v5 = 0;
      *(_OWORD *)sub_10029430C(&v4, 16) = *(_OWORD *)"u->refcount == 0";
      sub_100294B74(-215, &v4, "deallocate", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 213);
    }
    if ((*(_BYTE *)(a2 + 48) & 0x20) == 0)
    {
      j__free(*(void **)(a2 + 32));
      *(_QWORD *)(a2 + 32) = 0;
    }
    sub_10029ABB8(a2);
    operator delete();
  }
}

void sub_100265450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100265480(uint64_t result, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  _BYTE *v36;
  uint64_t v37;
  char v38;

  if ((int)a3 >= 1)
  {
    v3 = a3;
    if (a2 == 1)
    {
      v4 = 0;
      v5 = v3 - 1;
      v6 = (__int128 *)(result + 17);
      v7 = result + 1;
      v8 = 1;
      v9 = result;
      v10 = result + 1;
      v11 = (__int128 *)(result + 17);
      while (1)
      {
        v12 = v4 + 1;
        if (v4 + 1 < v3)
          break;
LABEL_4:
        ++v8;
        --v5;
        v11 = (__int128 *)((char *)v11 + 2);
        v6 = (__int128 *)((char *)v6 + 2);
        v10 += 2;
        v7 += 2;
        ++v9;
        ++result;
        v4 = v12;
        if (v12 == v3)
          return result;
      }
      v13 = ~v4 + v3;
      v14 = v8;
      if (v13 > 7)
      {
        if (v13 < 0x20)
        {
          v15 = 0;
          goto LABEL_13;
        }
        v16 = v5 & 0xFFFFFFFFFFFFFFE0;
        v15 = v13 & 0xFFFFFFFFFFFFFFE0;
        v17 = v6;
        v18 = v11;
        do
        {
          v19 = *(v18 - 1);
          v20 = *v18;
          v21 = *v17;
          *(v18 - 1) = *(v17 - 1);
          *v18 = v21;
          *(v17 - 1) = v19;
          *v17 = v20;
          v18 += 2;
          v17 += 2;
          v16 -= 32;
        }
        while (v16);
        if (v13 == v15)
          goto LABEL_4;
        if ((v13 & 0x18) != 0)
        {
LABEL_13:
          v14 = v8 + (v13 & 0xFFFFFFFFFFFFFFF8);
          v22 = v15 - (v5 & 0xFFFFFFFFFFFFFFF8);
          v23 = (uint64_t *)(v10 + v15);
          v24 = (uint64_t *)(v7 + v15);
          do
          {
            v25 = *v24;
            *v24++ = *v23;
            *v23++ = v25;
            v22 += 8;
          }
          while (v22);
          if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_4;
          goto LABEL_18;
        }
        v14 = v8 + v15;
      }
LABEL_18:
      v26 = v3 - v14;
      v27 = (char *)(v9 + v14);
      v28 = (char *)(result + v14);
      do
      {
        v29 = *v28;
        *v28++ = *v27;
        *v27++ = v29;
        --v26;
      }
      while (v26);
      goto LABEL_4;
    }
    v30 = 0;
    v31 = (_BYTE *)(result + a2);
    v32 = a2 + 1;
    v33 = (char *)(result + 1);
    v34 = 1;
    do
    {
      if (++v30 < (unint64_t)a3)
      {
        v35 = v33;
        v36 = v31;
        v37 = a3;
        do
        {
          v38 = *v35;
          result = *v36;
          *v35++ = result;
          *v36 = v38;
          --v37;
          v36 += a2;
        }
        while (v34 != v37);
      }
      ++v34;
      v31 += v32;
      v33 += v32;
    }
    while (v30 != a3);
  }
  return result;
}

uint64_t sub_100265630(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  _WORD *v4;
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  __int16 *v8;
  _WORD *v9;
  uint64_t v10;
  __int16 v11;

  if (a3 >= 1)
  {
    v3 = 0;
    v4 = (_WORD *)(result + a2);
    v5 = a2 + 2;
    v6 = (__int16 *)(result + 2);
    v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        v8 = v6;
        v9 = v4;
        v10 = a3;
        do
        {
          v11 = *v8;
          result = (unsigned __int16)*v9;
          *v8++ = result;
          *v9 = v11;
          --v10;
          v9 = (_WORD *)((char *)v9 + a2);
        }
        while (v7 != v10);
      }
      ++v7;
      v4 = (_WORD *)((char *)v4 + v5);
      v6 = (__int16 *)((char *)v6 + v5);
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_1002656A8(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  __int16 v12;
  char v13;

  if (a3 >= 1)
  {
    v3 = 0;
    v4 = a3;
    v5 = (_BYTE *)(result + 5);
    v6 = a2 + 3;
    v7 = a2 + result + 1;
    v8 = 1;
    do
    {
      if (++v3 < v4)
      {
        v9 = v7;
        v10 = v5;
        v11 = v4;
        do
        {
          v12 = *((_WORD *)v10 - 1);
          result = *v10;
          v13 = *(_BYTE *)(v9 + 1);
          *((_WORD *)v10 - 1) = *(_WORD *)(v9 - 1);
          *v10 = v13;
          v10 += 3;
          *(_WORD *)(v9 - 1) = v12;
          *(_BYTE *)(v9 + 1) = result;
          --v11;
          v9 += a2;
        }
        while (v8 != v11);
      }
      ++v8;
      v5 += v6;
      v7 += v6;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_100265734(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;

  if (a3 >= 1)
  {
    v3 = 0;
    v4 = (_DWORD *)(result + a2);
    v5 = a2 + 4;
    v6 = (int *)(result + 4);
    v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        v8 = v6;
        v9 = v4;
        v10 = a3;
        do
        {
          v11 = *v8;
          result = *v9;
          *v8++ = result;
          *v9 = v11;
          --v10;
          v9 = (_DWORD *)((char *)v9 + a2);
        }
        while (v7 != v10);
      }
      ++v7;
      v4 = (_DWORD *)((char *)v4 + v5);
      v6 = (int *)((char *)v6 + v5);
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_1002657AC(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  int *v10;
  unint64_t v11;
  int v12;
  __int16 v13;

  if (a3 >= 1)
  {
    v3 = 0;
    v4 = (int *)(result + 6);
    v5 = a2 + 6;
    v6 = (int *)(result + a2);
    v7 = 1;
    v8 = a3;
    do
    {
      if (++v3 < v8)
      {
        v9 = v6;
        v10 = v4;
        v11 = v8;
        do
        {
          v12 = *v10;
          result = *((unsigned __int16 *)v10 + 2);
          v13 = *((_WORD *)v9 + 2);
          *v10 = *v9;
          *((_WORD *)v10 + 2) = v13;
          *v9 = v12;
          *((_WORD *)v9 + 2) = result;
          --v11;
          v10 = (int *)((char *)v10 + 6);
          v9 = (int *)((char *)v9 + a2);
        }
        while (v7 != v11);
      }
      ++v7;
      v4 = (int *)((char *)v4 + v5);
      v6 = (int *)((char *)v6 + v5);
    }
    while (v3 != v8);
  }
  return result;
}

uint64_t sub_100265838(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (a3 >= 1)
  {
    v3 = 0;
    v4 = (uint64_t *)(result + a2);
    v5 = a2 + 8;
    v6 = (uint64_t *)(result + 8);
    v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        v8 = v6;
        v9 = v4;
        v10 = a3;
        do
        {
          v11 = *v8;
          result = *v9;
          *v8++ = *v9;
          *v9 = v11;
          --v10;
          v9 = (uint64_t *)((char *)v9 + a2);
        }
        while (v7 != v10);
      }
      ++v7;
      v4 = (uint64_t *)((char *)v4 + v5);
      v6 = (uint64_t *)((char *)v6 + v5);
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_1002658B0(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (a3 >= 1)
  {
    v3 = 0;
    v4 = (uint64_t *)(result + a2);
    v5 = a2 + 12;
    v6 = (uint64_t *)(result + 12);
    v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        v8 = v6;
        v9 = v4;
        v10 = a3;
        do
        {
          v11 = *((_DWORD *)v8 + 2);
          v12 = *v8;
          result = *((unsigned int *)v9 + 2);
          *v8 = *v9;
          *((_DWORD *)v8 + 2) = result;
          *v9 = v12;
          *((_DWORD *)v9 + 2) = v11;
          --v10;
          v9 = (uint64_t *)((char *)v9 + a2);
          v8 = (uint64_t *)((char *)v8 + 12);
        }
        while (v7 != v10);
      }
      ++v7;
      v4 = (uint64_t *)((char *)v4 + v5);
      v6 = (uint64_t *)((char *)v6 + v5);
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_10026593C(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;

  if (a3 >= 1)
  {
    v3 = 0;
    v4 = (__int128 *)(result + a2);
    v5 = a2 + 16;
    v6 = (__int128 *)(result + 16);
    v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        v8 = v6;
        v9 = v4;
        v10 = a3;
        v11 = v6;
        do
        {
          v12 = *v11++;
          *v8 = *v9;
          *v9 = v12;
          --v10;
          v9 = (__int128 *)((char *)v9 + a2);
          v8 = v11;
        }
        while (v7 != v10);
      }
      ++v7;
      v4 = (__int128 *)((char *)v4 + v5);
      v6 = (__int128 *)((char *)v6 + v5);
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_1002659BC(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 >= 1)
  {
    v3 = 0;
    v4 = (__int128 *)(result + a2);
    v5 = a2 + 24;
    v6 = (__int128 *)(result + 24);
    v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        v8 = v6;
        v9 = v4;
        v10 = a3;
        do
        {
          v11 = *v8;
          v12 = *((_QWORD *)v8 + 2);
          v13 = *((_QWORD *)v9 + 2);
          *v8 = *v9;
          *((_QWORD *)v8 + 2) = v13;
          *v9 = v11;
          *((_QWORD *)v9 + 2) = v12;
          --v10;
          v9 = (__int128 *)((char *)v9 + a2);
          v8 = (__int128 *)((char *)v8 + 24);
        }
        while (v7 != v10);
      }
      ++v7;
      v4 = (__int128 *)((char *)v4 + v5);
      v6 = (__int128 *)((char *)v6 + v5);
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_100265A48(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (a3 >= 1)
  {
    v3 = 0;
    v4 = (__int128 *)(result + a2);
    v5 = a2 + 32;
    v6 = (__int128 *)(result + 32);
    v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        v8 = v6;
        v9 = v4;
        v10 = a3;
        do
        {
          v11 = *v8;
          v12 = v8[1];
          v13 = v9[1];
          *v8 = *v9;
          v8[1] = v13;
          v8 += 2;
          *v9 = v11;
          v9[1] = v12;
          --v10;
          v9 = (__int128 *)((char *)v9 + a2);
        }
        while (v7 != v10);
      }
      ++v7;
      v4 = (__int128 *)((char *)v4 + v5);
      v6 = (__int128 *)((char *)v6 + v5);
    }
    while (v3 != a3);
  }
  return result;
}

unint64_t sub_100265AC0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  BOOL v65;
  BOOL v66;
  BOOL v67;
  BOOL v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  BOOL v77;
  BOOL v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  _OWORD *v97;
  __int128 v98;
  __int128 v99;
  _OWORD *v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  __int128 v127;
  _OWORD *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  BOOL v138;
  BOOL v139;
  BOOL v140;
  BOOL v141;
  BOOL v142;
  BOOL v143;
  BOOL v144;
  BOOL v145;
  BOOL v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  BOOL v152;
  BOOL v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v167;
  BOOL v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  BOOL v180;
  unint64_t v181;
  unint64_t v182;
  BOOL v183;
  unint64_t v184;
  int v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;

  v184 = result;
  v5 = a5[1];
  v185 = *a5;
  v6 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v7) = 0;
    if (v185 <= 0)
      return result;
    goto LABEL_192;
  }
  if ((int)v5 >= 4)
  {
    v13 = 0;
    v7 = 0;
    v14 = (v5 - 4);
    v15 = v14 & 0xFFFFFFFC;
    v16 = v15 + 4;
    v17 = 4 * a4;
    if (v15 + 5 <= v5)
      v18 = a5[1];
    else
      v18 = (v14 & 0xFFFFFFFC) + 5;
    v19 = v16 + a4;
    v20 = v18 + a4;
    v21 = v18 + 2 * a4;
    v22 = v16 + 3 * a4;
    v23 = v18 + 3 * a4;
    v164 = v18 + 1;
    v165 = v18;
    v163 = v15 + 6;
    v162 = v18 + 2;
    v160 = v18 + 3;
    v24 = v18 - v15 - 4;
    v136 = v24 & 0xFFFFFFFFFFFFFFE0;
    v133 = v16 + (v24 & 0xFFFFFFFFFFFFFFE0);
    v132 = v24 & 0x18;
    v137 = v24;
    v135 = v24 & 0xFFFFFFFFFFFFFFF8;
    v134 = v16 + (v24 & 0xFFFFFFFFFFFFFFF8);
    v26 = v24 < 8 || a2 != 1;
    v153 = v26;
    v27 = 2 * a2 + 3;
    v28 = 3 * a2;
    v29 = a3 + v16 + 2 * a4;
    v189 = v19 + a3;
    v30 = a3 + 3 * a4;
    v31 = a3 + 2 * a4;
    v157 = a3 + v19;
    v158 = v29;
    v156 = a3 + v20;
    v155 = a3 + v21;
    v154 = a3 + v23;
    v32 = a2 + 3;
    v33 = v184;
    v161 = v15 + 7;
    v188 = v184 + v15 + 7;
    v34 = a3 + v15;
    v35 = a3 + a4;
    v159 = a3 + v22;
    v36 = a3 + v22;
    v37 = a3;
    while (1)
    {
      v38 = 0;
      v187 = v13;
      v175 = a3 + v16 + v17 * v13;
      v173 = a3 + v165 + v17 * v13;
      v172 = v157 + v17 * v13;
      v171 = v156 + v17 * v13;
      v167 = v158 + v17 * v13;
      v39 = v155 + v17 * v13;
      v170 = v159 + v17 * v13;
      v169 = v154 + v17 * v13;
      v40 = v16;
      v182 = v184 + v16 + v7;
      v179 = v184 + v165 + v7;
      v174 = v184 + (v14 & 0xFFFFFFFC) + 5 + v7;
      v177 = v184 + v164 + v7;
      v181 = v184 + v163 + v7;
      v176 = v184 + v162 + v7;
      v178 = v184 + v161 + v7;
      v186 = v184 + v160 + v7;
      result = v33;
      do
      {
        v41 = (_BYTE *)(v37 + v38);
        *v41 = *(_BYTE *)result;
        v41[1] = *(_BYTE *)(result + a2);
        v41[2] = *(_BYTE *)(result + 2 * a2);
        v41[3] = *(_BYTE *)(result + 3 * a2);
        v42 = (_BYTE *)(v37 + v38 + a4);
        *v42 = *(_BYTE *)(result + 1);
        v42[1] = *(_BYTE *)(result + v32 - 2);
        v42[2] = *(_BYTE *)(result + v27 - 2);
        v42[3] = *(_BYTE *)(result + v28 + 1);
        v43 = &v42[a4];
        *v43 = *(_BYTE *)(result + 2);
        v43[1] = *(_BYTE *)(result + v32 - 1);
        v43[2] = *(_BYTE *)(result + v27 - 1);
        v43[3] = *(_BYTE *)(result + v28 + 2);
        v44 = &v43[a4];
        *v44 = *(_BYTE *)(result + 3);
        v44[1] = *(_BYTE *)(result + v32);
        v44[2] = *(_BYTE *)(result + v27);
        v44[3] = *(_BYTE *)(result + v28 + 3);
        v38 += 4;
        result += 4 * a2;
      }
      while (v38 <= v14);
      v45 = (v185 - 4);
      v16 = v40;
      if ((int)v5 <= (int)v38)
        goto LABEL_21;
      v46 = v40;
      if (!v153)
      {
        v48 = v175 >= v39 || v167 >= v173;
        v49 = !v48;
        v138 = v49;
        v50 = v175 >= v169 || v170 >= v173;
        v51 = !v50;
        v52 = v175 >= v179 || v182 >= v173;
        v53 = !v52;
        v139 = v51;
        v140 = v53;
        v54 = v175 >= v177 || v174 >= v173;
        v55 = !v54;
        v56 = v175 >= v176 || v181 >= v173;
        v57 = !v56;
        v58 = v175 >= v186 || v178 >= v173;
        v59 = !v58;
        v60 = v172 >= v39 || v167 >= v171;
        v61 = !v60;
        v141 = v59;
        v142 = v61;
        v62 = v172 >= v169 || v170 >= v171;
        v63 = !v62;
        v64 = v172 >= v179 || v182 >= v171;
        v65 = !v64;
        v143 = v63;
        v144 = v65;
        v66 = v172 >= v177 || v174 >= v171;
        v67 = !v66;
        v145 = v67;
        v68 = v172 >= v176 || v181 >= v171;
        v69 = !v68;
        v146 = v69;
        v70 = v172 >= v186 || v178 >= v171;
        v147 = v36;
        v71 = !v70;
        v148 = v71;
        v36 = v147;
        v72 = v167 >= v169 || v170 >= v39;
        v149 = v29;
        v73 = !v72;
        v150 = v73;
        v29 = v149;
        v74 = v167 >= v179 || v182 >= v39;
        v151 = v34;
        v75 = !v74;
        v152 = v75;
        v34 = v151;
        v76 = v167 >= v177 || v174 >= v39;
        v77 = !v76;
        v78 = v167 >= v176 || v181 >= v39;
        v79 = !v78;
        v80 = v167 >= v186 || v178 >= v39;
        v17 = 4 * a4;
        v81 = !v80;
        v168 = v81;
        v82 = v170 >= v179 || v182 >= v169;
        v83 = !v82;
        v183 = v83;
        v84 = v170 >= v177 || v174 >= v169;
        v85 = !v84;
        v180 = v85;
        v86 = v170 >= v176 || v181 >= v169;
        v87 = !v86;
        v13 = v187;
        v88 = v170 >= v186 || v178 >= v169;
        v45 = (v185 - 4);
        v89 = !v88;
        v90 = v172 >= v173 || v175 >= v171;
        v46 = v16;
        if (v90)
        {
          v46 = v16;
          if (!v138)
          {
            v46 = v16;
            if (!v139)
            {
              v46 = v16;
              if (!v140)
              {
                v46 = v16;
                if (!v55)
                {
                  v46 = v16;
                  if (!v57)
                  {
                    v46 = v16;
                    if (!v141)
                    {
                      v46 = v16;
                      if (!v142)
                      {
                        v46 = v16;
                        if (!v143)
                        {
                          v46 = v16;
                          if (!v144)
                          {
                            v46 = v16;
                            if (!v145)
                            {
                              v46 = v16;
                              if (!v146)
                              {
                                v46 = v16;
                                if (!v148)
                                {
                                  v46 = v16;
                                  if (!v150)
                                  {
                                    v46 = v16;
                                    if (!v152)
                                    {
                                      v46 = v16;
                                      if (!v77)
                                      {
                                        v46 = v16;
                                        if (!v79)
                                        {
                                          v46 = v16;
                                          if (!v168)
                                          {
                                            v46 = v16;
                                            if (!v183)
                                            {
                                              v46 = v16;
                                              if (!v180)
                                              {
                                                v46 = v16;
                                                if (!v87)
                                                {
                                                  v46 = v16;
                                                  if (!v89)
                                                  {
                                                    if (v137 < 0x20)
                                                    {
                                                      v91 = 0;
LABEL_187:
                                                      result = v135;
                                                      do
                                                      {
                                                        v101 = *(_QWORD *)(v188 + v91 - 3);
                                                        *(_QWORD *)(v189 + v91) = *(_QWORD *)(v188 + v91 - 2);
                                                        *(_QWORD *)(v149 + v91) = *(_QWORD *)(v188 + v91 - 1);
                                                        *(_QWORD *)(v151 + v91 + 4) = v101;
                                                        *(_QWORD *)(v147 + v91) = *(_QWORD *)(v188 + v91);
                                                        v91 += 8;
                                                      }
                                                      while (v135 != v91);
                                                      v46 = v134;
                                                      if (v137 == v135)
                                                        goto LABEL_21;
                                                      goto LABEL_26;
                                                    }
                                                    v92 = v14 & 0xFFFFFFFC;
                                                    v93 = v136;
                                                    do
                                                    {
                                                      v94 = *(_OWORD *)(v33 + v92 + 20);
                                                      *(_OWORD *)(v37 + v92 + 4) = *(_OWORD *)(v33 + v92 + 4);
                                                      v95 = v37 + v92 + 4;
                                                      *(_OWORD *)(v95 + 16) = v94;
                                                      v96 = *(_OWORD *)(v33 + v92 + 21);
                                                      v97 = (_OWORD *)(v95 + a4);
                                                      *v97 = *(_OWORD *)(v33 + v92 + 5);
                                                      v97[1] = v96;
                                                      v98 = *(_OWORD *)(v33 + v92 + 22);
                                                      result = (unint64_t)v97 + a4;
                                                      *(_OWORD *)result = *(_OWORD *)(v33 + v92 + 6);
                                                      *(_OWORD *)(result + 16) = v98;
                                                      v99 = *(_OWORD *)(v33 + v92 + 23);
                                                      v100 = (_OWORD *)(result + a4);
                                                      *v100 = *(_OWORD *)(v33 + v92 + 7);
                                                      v100[1] = v99;
                                                      v92 += 32;
                                                      v93 -= 32;
                                                    }
                                                    while (v93);
                                                    if (v137 == v136)
                                                      goto LABEL_21;
                                                    v91 = v136;
                                                    v46 = v133;
                                                    if (v132)
                                                      goto LABEL_187;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_26:
      v47 = a2 * v46;
      do
      {
        *(_BYTE *)(v37 + v46) = *(_BYTE *)(v33 + v47);
        *(_BYTE *)(v35 + v46) = *(_BYTE *)(v33 + v47 + 1);
        result = *(unsigned __int8 *)(v33 + v47 + 2);
        *(_BYTE *)(v31 + v46) = result;
        *(_BYTE *)(v30 + v46++) = *(_BYTE *)(v33 + v47 + 3);
        v47 += a2;
      }
      while (v46 < v5);
LABEL_21:
      v7 += 4;
      ++v13;
      v37 += v17;
      v33 += 4;
      v36 += v17;
      v188 += 4;
      v29 += v17;
      v189 += v17;
      v34 += v17;
      v30 += v17;
      v31 += v17;
      v35 += v17;
      if (v7 > v45)
        goto LABEL_191;
    }
  }
  if ((int)v5 <= 0)
  {
    LODWORD(v7) = (v6 & 0xFFFFFFFC) + 4;
    if ((int)v7 >= v185)
      return result;
    goto LABEL_192;
  }
  v7 = 0;
  v8 = (_BYTE *)(a3 + 1);
  v9 = result + a2;
  v10 = 2 * a4;
  v11 = 3 * a4;
  v12 = result + 2 * a2;
  do
  {
    result = (unint64_t)&v8[v11];
    *(v8 - 1) = *(_BYTE *)(v184 + v7);
    v8[a4 - 1] = *(_BYTE *)(v184 + v7 + 1);
    v8[v10 - 1] = *(_BYTE *)(v184 + v7 + 2);
    v8[v11 - 1] = *(_BYTE *)(v184 + v7 + 3);
    if ((_DWORD)v5 != 1)
    {
      *v8 = *(_BYTE *)(v9 + v7);
      v8[a4] = *(_BYTE *)(v9 + v7 + 1);
      v8[2 * a4] = *(_BYTE *)(v9 + v7 + 2);
      v8[3 * a4] = *(_BYTE *)(v9 + v7 + 3);
      if ((_DWORD)v5 != 2)
      {
        v8[1] = *(_BYTE *)(v12 + v7);
        v8[a4 + 1] = *(_BYTE *)(v12 + v7 + 1);
        result = (unint64_t)&v8[v10];
        v8[v10 + 1] = *(_BYTE *)(v12 + v7 + 2);
        v8[v11 + 1] = *(_BYTE *)(v12 + v7 + 3);
      }
    }
    v7 += 4;
    v8 += 4 * a4;
  }
  while (v7 <= v6);
LABEL_191:
  if ((int)v7 < v185)
  {
LABEL_192:
    if ((int)v5 < 4)
    {
      if ((int)v5 >= 1)
      {
        v102 = (_BYTE *)(v184 + v7);
        v103 = (_BYTE *)(a3 + a4 * v7 + 2);
        do
        {
          *(v103 - 2) = *v102;
          if ((_DWORD)v5 != 1)
          {
            *(v103 - 1) = v102[a2];
            if ((_DWORD)v5 != 2)
              *v103 = v102[2 * a2];
          }
          LODWORD(v7) = v7 + 1;
          ++v102;
          v103 += a4;
        }
        while (v185 > (int)v7);
      }
      return result;
    }
    v104 = 0;
    v105 = (v5 - 4);
    v7 = v7;
    v106 = v105 & 0xFFFFFFFC;
    v107 = v106 + 4;
    v108 = a3 + v7 * a4;
    v109 = v106 + 4 + v108;
    v110 = (_BYTE *)(v184 + v7);
    v111 = &v110[v106 + 4];
    v112 = v106 + 5;
    if (v106 + 5 <= v5)
      v112 = v5;
    v113 = v112 - v106 - 4;
    result = v113 & 0xFFFFFFFFFFFFFFE0;
    v114 = v113 & 0xFFFFFFFFFFFFFFF8;
    v116 = v113 < 8 || a2 != 1;
    v117 = v108 + 1;
    v118 = v106 + 20;
    do
    {
      v119 = 0;
      v120 = v110;
      do
      {
        v121 = (_BYTE *)(v117 + v119);
        *(v121 - 1) = *v120;
        *v121 = v120[a2];
        v121[1] = v120[2 * a2];
        v121[2] = v120[3 * a2];
        v119 += 4;
        v120 += 4 * a2;
      }
      while (v119 <= v105);
      if ((int)v5 <= (int)v119)
        goto LABEL_208;
      v122 = (unint64_t)(v109 + v104 * a4 - (_QWORD)&v111[v104]) < 0x20 || v116;
      v123 = (v105 & 0xFFFFFFFC) + 4;
      if ((v122 & 1) == 0)
      {
        if (v113 < 0x20)
        {
          v124 = 0;
LABEL_222:
          v129 = v124 - v114;
          v130 = v107 + v124;
          do
          {
            *(_QWORD *)(v108 + v130) = *(_QWORD *)&v110[v130];
            v130 += 8;
            v129 += 8;
          }
          while (v129);
          v123 = v107 + (v113 & 0xFFFFFFFFFFFFFFF8);
          if (v113 == v114)
            goto LABEL_208;
          goto LABEL_225;
        }
        v125 = v118;
        v126 = v113 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v127 = *(_OWORD *)&v110[v125];
          v128 = (_OWORD *)(v108 + v125);
          *(v128 - 1) = *(_OWORD *)&v110[v125 - 16];
          *v128 = v127;
          v125 += 32;
          v126 -= 32;
        }
        while (v126);
        if (v113 == result)
          goto LABEL_208;
        v124 = v113 & 0xFFFFFFFFFFFFFFE0;
        v123 = v107 + (v113 & 0xFFFFFFFFFFFFFFE0);
        if ((v113 & 0x18) != 0)
          goto LABEL_222;
      }
LABEL_225:
      v131 = a2 * v123;
      do
      {
        *(_BYTE *)(v108 + v123++) = v110[v131];
        v131 += a2;
      }
      while (v123 < v5);
LABEL_208:
      ++v7;
      ++v104;
      ++v110;
      v117 += a4;
      v108 += a4;
    }
    while (v185 > (int)v7);
  }
  return result;
}

uint64_t sub_10026656C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  uint64_t v24;
  unint64_t v25;
  _WORD *v26;
  _WORD *v27;
  _WORD *v28;
  _WORD *v29;
  _WORD *v30;
  _WORD *v31;
  unint64_t v32;
  uint64_t v33;
  _WORD *v34;
  _WORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  uint64_t v40;
  _WORD *v41;
  unint64_t v42;
  _WORD *v43;
  _WORD *v44;
  uint64_t v45;
  unint64_t v46;

  v5 = *a5;
  v6 = a5[1];
  v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v5 <= 0)
      return result;
    goto LABEL_19;
  }
  if ((int)v6 >= 4)
  {
    v8 = 0;
    v14 = (v6 - 4);
    v15 = 4 * a4;
    v16 = a2 + 6;
    v17 = 2 * a2 + 6;
    v18 = 3 * a2;
    v19 = a3 + a4;
    v20 = a3 + a4 + 2 * a4;
    v21 = a3 + 2 * a4;
    v22 = result + a2 * ((v14 & 0xFFFFFFFC) + 4) + 4;
    v23 = (_WORD *)result;
    v24 = a3;
    do
    {
      v25 = 0;
      v26 = v23;
      do
      {
        v27 = (_WORD *)(v24 + 2 * v25);
        *v27 = *v26;
        v27[1] = *(_WORD *)((char *)v26 + a2);
        v27[2] = v26[a2];
        v27[3] = *(_WORD *)((char *)v26 + 3 * a2);
        v28 = (_WORD *)((char *)v27 + a4);
        *v28 = v26[1];
        v28[1] = *(_WORD *)((char *)v26 + v16 - 4);
        v28[2] = *(_WORD *)((char *)v26 + v17 - 4);
        v28[3] = *(_WORD *)((char *)v26 + v18 + 2);
        v29 = (_WORD *)((char *)v28 + a4);
        *v29 = v26[2];
        v29[1] = *(_WORD *)((char *)v26 + v16 - 2);
        v29[2] = *(_WORD *)((char *)v26 + v17 - 2);
        v29[3] = *(_WORD *)((char *)v26 + v18 + 4);
        v30 = (_WORD *)((char *)v29 + a4);
        *v30 = v26[3];
        v30[1] = *(_WORD *)((char *)v26 + v16);
        v30[2] = *(_WORD *)((char *)v26 + v17);
        v30[3] = *(_WORD *)((char *)v26 + v18 + 6);
        v25 += 4;
        v26 += 2 * a2;
      }
      while (v25 <= v14);
      v31 = (_WORD *)v22;
      v32 = (v14 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v25)
      {
        do
        {
          v33 = 2 * v32;
          *(_WORD *)(v24 + v33) = *(v31 - 2);
          *(_WORD *)(v19 + v33) = *(v31 - 1);
          *(_WORD *)(v21 + v33) = *v31;
          *(_WORD *)(v20 + v33) = v31[1];
          ++v32;
          v31 = (_WORD *)((char *)v31 + a2);
        }
        while (v32 < v6);
      }
      v8 += 4;
      v24 += v15;
      v23 += 4;
      v20 += v15;
      v21 += v15;
      v19 += v15;
      v22 += 8;
    }
    while (v8 <= v7);
  }
  else
  {
    if ((int)v6 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v5)
        return result;
      goto LABEL_19;
    }
    v8 = 0;
    v9 = a2;
    v10 = (_WORD *)(a3 + 2);
    v11 = a4;
    v12 = 3 * a4;
    v13 = (_WORD *)result;
    do
    {
      *(v10 - 1) = *v13;
      *(_WORD *)((char *)v10 + a4 - 2) = v13[1];
      v10[v11 - 1] = v13[2];
      *(_WORD *)((char *)v10 + v12 - 2) = v13[3];
      if ((_DWORD)v6 != 1)
      {
        *v10 = *(_WORD *)((char *)v13 + a2);
        *(_WORD *)((char *)v10 + a4) = *(_WORD *)((char *)v13 + a2 + 2);
        v10[a4] = *(_WORD *)((char *)v13 + a2 + 4);
        *(_WORD *)((char *)v10 + 3 * a4) = *(_WORD *)((char *)v13 + a2 + 6);
        if ((_DWORD)v6 != 2)
        {
          v10[1] = v13[a2];
          *(_WORD *)((char *)v10 + a4 + 2) = v13[v9 + 1];
          v10[v11 + 1] = v13[v9 + 2];
          *(_WORD *)((char *)v10 + v12 + 2) = v13[v9 + 3];
        }
      }
      v8 += 4;
      v10 += 2 * a4;
      v13 += 4;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v5)
    return result;
LABEL_19:
  if ((int)v6 >= 4)
  {
    v36 = (v6 - 4);
    v37 = v8;
    v38 = (v36 & 0xFFFFFFFC) + 4;
    v39 = (_WORD *)(result + 2 * v8);
    v40 = a3 + a4 * v37;
    v41 = (_WORD *)(v40 + 4);
    result = a2 * v38;
    do
    {
      v42 = 0;
      v43 = v41;
      v44 = v39;
      do
      {
        *(v43 - 2) = *v44;
        *(v43 - 1) = *(_WORD *)((char *)v44 + a2);
        *v43 = v44[a2];
        v43[1] = *(_WORD *)((char *)v44 + 3 * a2);
        v42 += 4;
        v44 += 2 * a2;
        v43 += 4;
      }
      while (v42 <= v36);
      v45 = a2 * v38;
      v46 = (v36 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v42)
      {
        do
        {
          *(_WORD *)(v40 + 2 * v46++) = *(_WORD *)((char *)v39 + v45);
          v45 += a2;
        }
        while (v46 < v6);
      }
      ++v37;
      ++v39;
      v41 = (_WORD *)((char *)v41 + a4);
      v40 += a4;
    }
    while (v5 > (int)v37);
  }
  else if ((int)v6 >= 1)
  {
    v34 = (_WORD *)(result + 2 * v8);
    v35 = (_WORD *)(a3 + a4 * v8 + 4);
    do
    {
      *(v35 - 2) = *v34;
      if ((_DWORD)v6 != 1)
      {
        *(v35 - 1) = *(_WORD *)((char *)v34 + a2);
        if ((_DWORD)v6 != 2)
          *v35 = v34[a2];
      }
      LODWORD(v8) = v8 + 1;
      ++v34;
      v35 = (_WORD *)((char *)v35 + a4);
    }
    while (v5 > (int)v8);
  }
  return result;
}

uint64_t sub_100266924(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  __int16 v81;
  __int16 v82;
  __int16 v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  __int16 v87;
  int v88;

  v6 = *a5;
  v5 = a5[1];
  v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v6 <= 0)
      return result;
    goto LABEL_20;
  }
  if ((int)v5 >= 4)
  {
    v88 = *a5;
    v8 = 0;
    v32 = (v5 - 4);
    v33 = 4 * a4;
    v34 = a2 + 9;
    v35 = 2 * a2 + 9;
    v36 = 3 * a2;
    v37 = a3 + 12 * ((v5 - 4) >> 2) + 12;
    v38 = result + a2 * ((v32 & 0xFFFFFFFC) + 4) + 6;
    v39 = result;
    v40 = a3;
    do
    {
      v41 = 0;
      v42 = v39;
      v43 = v40;
      do
      {
        v44 = *(_WORD *)v42;
        *(_BYTE *)(v43 + 2) = *(_BYTE *)(v42 + 2);
        *(_WORD *)v43 = v44;
        v45 = *(_WORD *)(v42 + a2);
        *(_BYTE *)(v43 + 5) = *(_BYTE *)(v42 + v34 - 7);
        *(_WORD *)(v43 + 3) = v45;
        v46 = *(_WORD *)(v42 + 2 * a2);
        *(_BYTE *)(v43 + 8) = *(_BYTE *)(v42 + v35 - 7);
        *(_WORD *)(v43 + 6) = v46;
        v47 = *(_WORD *)(v42 + 3 * a2);
        *(_BYTE *)(v43 + 11) = *(_BYTE *)(v42 + v36 + 2);
        *(_WORD *)(v43 + 9) = v47;
        v48 = v43 + a4;
        v49 = *(_WORD *)(v42 + 3);
        *(_BYTE *)(v48 + 2) = *(_BYTE *)(v42 + 5);
        *(_WORD *)v48 = v49;
        v50 = *(_WORD *)(v42 + v34 - 6);
        *(_BYTE *)(v48 + 5) = *(_BYTE *)(v42 + v34 - 4);
        *(_WORD *)(v48 + 3) = v50;
        v51 = *(_WORD *)(v42 + v35 - 6);
        *(_BYTE *)(v48 + 8) = *(_BYTE *)(v42 + v35 - 4);
        *(_WORD *)(v48 + 6) = v51;
        v52 = *(_WORD *)(v42 + v36 + 3);
        *(_BYTE *)(v48 + 11) = *(_BYTE *)(v42 + v36 + 5);
        *(_WORD *)(v48 + 9) = v52;
        v53 = v43 + a4 + a4;
        LOWORD(v48) = *(_WORD *)(v42 + 6);
        *(_BYTE *)(v53 + 2) = *(_BYTE *)(v42 + 8);
        *(_WORD *)v53 = v48;
        LOWORD(v48) = *(_WORD *)(v42 + v34 - 3);
        *(_BYTE *)(v53 + 5) = *(_BYTE *)(v42 + v34 - 1);
        *(_WORD *)(v53 + 3) = v48;
        LOWORD(v48) = *(_WORD *)(v42 + v35 - 3);
        *(_BYTE *)(v53 + 8) = *(_BYTE *)(v42 + v35 - 1);
        *(_WORD *)(v53 + 6) = v48;
        LOWORD(v48) = *(_WORD *)(v42 + v36 + 6);
        *(_BYTE *)(v53 + 11) = *(_BYTE *)(v42 + v36 + 8);
        *(_WORD *)(v53 + 9) = v48;
        v54 = v53 + a4;
        LOWORD(v48) = *(_WORD *)(v42 + 9);
        *(_BYTE *)(v54 + 2) = *(_BYTE *)(v42 + 11);
        *(_WORD *)v54 = v48;
        LOWORD(v48) = *(_WORD *)(v42 + v34);
        *(_BYTE *)(v54 + 5) = *(_BYTE *)(v42 + v34 + 2);
        *(_WORD *)(v54 + 3) = v48;
        v55 = *(_WORD *)(v42 + v35);
        *(_BYTE *)(v54 + 8) = *(_BYTE *)(v42 + v35 + 2);
        *(_WORD *)(v54 + 6) = v55;
        v56 = *(_WORD *)(v42 + v36 + 9);
        *(_BYTE *)(v54 + 11) = *(_BYTE *)(v42 + v36 + 11);
        *(_WORD *)(v54 + 9) = v56;
        v41 += 4;
        v43 += 12;
        v42 += 4 * a2;
      }
      while (v41 <= v32);
      v57 = v38;
      v58 = v37;
      v59 = (v32 & 0xFFFFFFFC) + 4;
      if ((int)v5 > (int)v41)
      {
        do
        {
          v60 = *(_WORD *)(v57 - 6);
          *(_BYTE *)(v58 + 2) = *(_BYTE *)(v57 - 4);
          *(_WORD *)v58 = v60;
          v61 = v58 + a4;
          v62 = *(_WORD *)(v57 - 3);
          *(_BYTE *)(v61 + 2) = *(_BYTE *)(v57 - 1);
          *(_WORD *)v61 = v62;
          v63 = v58 + 2 * a4;
          v64 = *(_WORD *)v57;
          *(_BYTE *)(v63 + 2) = *(_BYTE *)(v57 + 2);
          *(_WORD *)v63 = v64;
          v65 = v58 + 3 * a4;
          v66 = *(_WORD *)(v57 + 3);
          *(_BYTE *)(v65 + 2) = *(_BYTE *)(v57 + 5);
          *(_WORD *)v65 = v66;
          ++v59;
          v58 += 3;
          v57 += a2;
        }
        while (v59 < v5);
      }
      v8 += 4;
      v40 += v33;
      v39 += 12;
      v37 += v33;
      v38 += 12;
    }
    while (v8 <= v7);
    v6 = v88;
  }
  else
  {
    if ((int)v5 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v6)
        return result;
      goto LABEL_20;
    }
    v8 = 0;
    v9 = 2 * a2;
    v10 = a3 + 3;
    v11 = 2 * a4;
    v12 = 3 * a4;
    v13 = result;
    do
    {
      v14 = v10 + a4;
      v15 = v10 + v11;
      v16 = v10 + v12;
      v17 = *(_WORD *)v13;
      *(_BYTE *)(v10 - 1) = *(_BYTE *)(v13 + 2);
      *(_WORD *)(v10 - 3) = v17;
      v18 = *(_WORD *)(v13 + 3);
      *(_BYTE *)(v14 - 1) = *(_BYTE *)(v13 + 5);
      *(_WORD *)(v14 - 3) = v18;
      v19 = *(_WORD *)(v13 + 6);
      *(_BYTE *)(v15 - 1) = *(_BYTE *)(v13 + 8);
      *(_WORD *)(v15 - 3) = v19;
      v20 = *(_WORD *)(v13 + 9);
      *(_BYTE *)(v16 - 1) = *(_BYTE *)(v13 + 11);
      *(_WORD *)(v16 - 3) = v20;
      if ((_DWORD)v5 != 1)
      {
        v21 = *(_WORD *)(v13 + a2);
        *(_BYTE *)(v10 + 2) = *(_BYTE *)(v13 + a2 + 2);
        *(_WORD *)v10 = v21;
        v22 = *(_WORD *)(v13 + a2 + 3);
        *(_BYTE *)(v14 + 2) = *(_BYTE *)(v13 + a2 + 5);
        *(_WORD *)v14 = v22;
        v23 = *(_WORD *)(v13 + a2 + 6);
        *(_BYTE *)(v15 + 2) = *(_BYTE *)(v13 + a2 + 8);
        *(_WORD *)v15 = v23;
        v24 = *(_WORD *)(v13 + a2 + 9);
        *(_BYTE *)(v16 + 2) = *(_BYTE *)(v13 + a2 + 11);
        *(_WORD *)v16 = v24;
        if ((_DWORD)v5 != 2)
        {
          v25 = *(_WORD *)(v13 + 2 * a2);
          *(_BYTE *)(v10 + 5) = *(_BYTE *)(v13 + v9 + 2);
          *(_WORD *)(v10 + 3) = v25;
          v26 = v10 + a4;
          v27 = *(_WORD *)(v13 + v9 + 3);
          *(_BYTE *)(v26 + 5) = *(_BYTE *)(v13 + v9 + 5);
          *(_WORD *)(v26 + 3) = v27;
          v28 = v10 + v11;
          v29 = *(_WORD *)(v13 + v9 + 6);
          *(_BYTE *)(v28 + 5) = *(_BYTE *)(v13 + v9 + 8);
          *(_WORD *)(v28 + 3) = v29;
          v30 = v10 + v12;
          v31 = *(_WORD *)(v13 + v9 + 9);
          *(_BYTE *)(v30 + 5) = *(_BYTE *)(v13 + v9 + 11);
          *(_WORD *)(v30 + 3) = v31;
        }
      }
      v8 += 4;
      v10 += 4 * a4;
      v13 += 12;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v6)
    return result;
LABEL_20:
  if ((int)v5 >= 4)
  {
    v72 = (v5 - 4);
    v73 = v8;
    v74 = result + 3 * v8;
    v75 = a3 + a4 * v73;
    v76 = v75 + 6;
    result = v75 + 12 * ((v5 - 4) >> 2) + 12;
    do
    {
      v77 = 0;
      v78 = v76;
      v79 = v74;
      do
      {
        v80 = *(_WORD *)v79;
        *(_BYTE *)(v78 - 4) = *(_BYTE *)(v79 + 2);
        *(_WORD *)(v78 - 6) = v80;
        v81 = *(_WORD *)(v79 + a2);
        *(_BYTE *)(v78 - 1) = *(_BYTE *)(v79 + a2 + 2);
        *(_WORD *)(v78 - 3) = v81;
        v82 = *(_WORD *)(v79 + 2 * a2);
        *(_BYTE *)(v78 + 2) = *(_BYTE *)(v79 + 2 * a2 + 2);
        *(_WORD *)v78 = v82;
        v83 = *(_WORD *)(v79 + 3 * a2);
        *(_BYTE *)(v78 + 5) = *(_BYTE *)(v79 + 3 * a2 + 2);
        *(_WORD *)(v78 + 3) = v83;
        v77 += 4;
        v79 += 4 * a2;
        v78 += 12;
      }
      while (v77 <= v72);
      v84 = a2 * ((v72 & 0xFFFFFFFC) + 4);
      v85 = result;
      v86 = (v72 & 0xFFFFFFFC) + 4;
      if ((int)v5 > (int)v77)
      {
        do
        {
          v87 = *(_WORD *)(v74 + v84);
          *(_BYTE *)(v85 + 2) = *(_BYTE *)(v74 + v84 + 2);
          *(_WORD *)v85 = v87;
          v85 += 3;
          ++v86;
          v84 += a2;
        }
        while (v86 < v5);
      }
      ++v73;
      v74 += 3;
      v76 += a4;
      result += a4;
    }
    while (v6 > (int)v73);
  }
  else if ((int)v5 >= 1)
  {
    v67 = result + 3 * v8;
    v68 = a3 + a4 * v8 + 3;
    do
    {
      v69 = *(_WORD *)v67;
      *(_BYTE *)(v68 - 1) = *(_BYTE *)(v67 + 2);
      *(_WORD *)(v68 - 3) = v69;
      if ((_DWORD)v5 != 1)
      {
        v70 = *(_WORD *)(v67 + a2);
        *(_BYTE *)(v68 + 2) = *(_BYTE *)(v67 + a2 + 2);
        *(_WORD *)v68 = v70;
        if ((_DWORD)v5 != 2)
        {
          v71 = *(_WORD *)(v67 + 2 * a2);
          *(_BYTE *)(v68 + 5) = *(_BYTE *)(v67 + 2 * a2 + 2);
          *(_WORD *)(v68 + 3) = v71;
        }
      }
      LODWORD(v8) = v8 + 1;
      v67 += 3;
      v68 += a4;
    }
    while (v6 > (int)v8);
  }
  return result;
}

_DWORD *sub_100266E84(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;

  v5 = *a5;
  v6 = a5[1];
  v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v5 <= 0)
      return result;
    goto LABEL_19;
  }
  if ((int)v6 >= 4)
  {
    v8 = 0;
    v14 = (v6 - 4);
    v15 = 4 * a4;
    v16 = a2 + 12;
    v17 = 2 * a2 + 12;
    v18 = 3 * a2;
    v19 = a3 + a4;
    v20 = a3 + a4 + 2 * a4;
    v21 = a3 + 2 * a4;
    v22 = (uint64_t)result + a2 * ((v14 & 0xFFFFFFFC) + 4) + 8;
    v23 = result;
    v24 = a3;
    do
    {
      v25 = 0;
      v26 = v23;
      do
      {
        v27 = (_DWORD *)(v24 + 4 * v25);
        *v27 = *v26;
        v27[1] = *(_DWORD *)((char *)v26 + a2);
        v27[2] = *(_DWORD *)((char *)v26 + 2 * a2);
        v27[3] = *(_DWORD *)((char *)v26 + 3 * a2);
        v28 = (_DWORD *)((char *)v27 + a4);
        *v28 = v26[1];
        v28[1] = *(_DWORD *)((char *)v26 + v16 - 8);
        v28[2] = *(_DWORD *)((char *)v26 + v17 - 8);
        v28[3] = *(_DWORD *)((char *)v26 + v18 + 4);
        v29 = (_DWORD *)((char *)v28 + a4);
        *v29 = v26[2];
        v29[1] = *(_DWORD *)((char *)v26 + v16 - 4);
        v29[2] = *(_DWORD *)((char *)v26 + v17 - 4);
        v29[3] = *(_DWORD *)((char *)v26 + v18 + 8);
        v30 = (_DWORD *)((char *)v29 + a4);
        *v30 = v26[3];
        v30[1] = *(_DWORD *)((char *)v26 + v16);
        v30[2] = *(_DWORD *)((char *)v26 + v17);
        v30[3] = *(_DWORD *)((char *)v26 + v18 + 12);
        v25 += 4;
        v26 += a2;
      }
      while (v25 <= v14);
      v31 = (_DWORD *)v22;
      v32 = (v14 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v25)
      {
        do
        {
          v33 = 4 * v32;
          *(_DWORD *)(v24 + v33) = *(v31 - 2);
          *(_DWORD *)(v19 + v33) = *(v31 - 1);
          *(_DWORD *)(v21 + v33) = *v31;
          *(_DWORD *)(v20 + v33) = v31[1];
          ++v32;
          v31 = (_DWORD *)((char *)v31 + a2);
        }
        while (v32 < v6);
      }
      v8 += 4;
      v24 += v15;
      v23 += 4;
      v20 += v15;
      v21 += v15;
      v19 += v15;
      v22 += 16;
    }
    while (v8 <= v7);
  }
  else
  {
    if ((int)v6 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v5)
        return result;
      goto LABEL_19;
    }
    v8 = 0;
    v9 = 2 * a2;
    v10 = (_DWORD *)(a3 + 4);
    v11 = 2 * a4;
    v12 = 3 * a4;
    v13 = result;
    do
    {
      *(v10 - 1) = *v13;
      *(_DWORD *)((char *)v10 + a4 - 4) = v13[1];
      *(_DWORD *)((char *)v10 + v11 - 4) = v13[2];
      *(_DWORD *)((char *)v10 + v12 - 4) = v13[3];
      if ((_DWORD)v6 != 1)
      {
        *v10 = *(_DWORD *)((char *)v13 + a2);
        *(_DWORD *)((char *)v10 + a4) = *(_DWORD *)((char *)v13 + a2 + 4);
        *(_DWORD *)((char *)v10 + 2 * a4) = *(_DWORD *)((char *)v13 + a2 + 8);
        *(_DWORD *)((char *)v10 + 3 * a4) = *(_DWORD *)((char *)v13 + a2 + 12);
        if ((_DWORD)v6 != 2)
        {
          v10[1] = *(_DWORD *)((char *)v13 + 2 * a2);
          *(_DWORD *)((char *)v10 + a4 + 4) = *(_DWORD *)((char *)v13 + v9 + 4);
          *(_DWORD *)((char *)v10 + v11 + 4) = *(_DWORD *)((char *)v13 + v9 + 8);
          *(_DWORD *)((char *)v10 + v12 + 4) = *(_DWORD *)((char *)v13 + v9 + 12);
        }
      }
      v8 += 4;
      v10 += a4;
      v13 += 4;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v5)
    return result;
LABEL_19:
  if ((int)v6 >= 4)
  {
    v36 = (v6 - 4);
    v37 = v8;
    v38 = &result[v8];
    v39 = a3 + a4 * v37;
    result = (_DWORD *)(v39 + 8);
    do
    {
      v40 = 0;
      v41 = result;
      v42 = v38;
      do
      {
        *(v41 - 2) = *v42;
        *(v41 - 1) = *(_DWORD *)((char *)v42 + a2);
        *v41 = *(_DWORD *)((char *)v42 + 2 * a2);
        v41[1] = *(_DWORD *)((char *)v42 + 3 * a2);
        v40 += 4;
        v42 += a2;
        v41 += 4;
      }
      while (v40 <= v36);
      v43 = a2 * ((v36 & 0xFFFFFFFC) + 4);
      v44 = (v36 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v40)
      {
        do
        {
          *(_DWORD *)(v39 + 4 * v44++) = *(_DWORD *)((char *)v38 + v43);
          v43 += a2;
        }
        while (v44 < v6);
      }
      ++v37;
      ++v38;
      result = (_DWORD *)((char *)result + a4);
      v39 += a4;
    }
    while (v5 > (int)v37);
  }
  else if ((int)v6 >= 1)
  {
    v34 = &result[v8];
    v35 = (_DWORD *)(a3 + a4 * v8 + 8);
    do
    {
      *(v35 - 2) = *v34;
      if ((_DWORD)v6 != 1)
      {
        *(v35 - 1) = *(_DWORD *)((char *)v34 + a2);
        if ((_DWORD)v6 != 2)
          *v35 = *(_DWORD *)((char *)v34 + 2 * a2);
      }
      LODWORD(v8) = v8 + 1;
      ++v34;
      v35 = (_DWORD *)((char *)v35 + a4);
    }
    while (v5 > (int)v8);
  }
  return result;
}

uint64_t sub_100267244(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  int v88;

  v6 = *a5;
  v5 = a5[1];
  v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v6 <= 0)
      return result;
    goto LABEL_20;
  }
  if ((int)v5 >= 4)
  {
    v88 = *a5;
    v8 = 0;
    v32 = (v5 - 4);
    v33 = 4 * a4;
    v34 = a2 + 18;
    v35 = 2 * a2 + 18;
    v36 = 3 * a2;
    v37 = a3 + 24 * ((v5 - 4) >> 2) + 24;
    v38 = result + a2 * ((v32 & 0xFFFFFFFC) + 4) + 12;
    v39 = result;
    v40 = a3;
    do
    {
      v41 = 0;
      v42 = v39;
      v43 = v40;
      do
      {
        v44 = *(_DWORD *)v42;
        *(_WORD *)(v43 + 4) = *(_WORD *)(v42 + 4);
        *(_DWORD *)v43 = v44;
        v45 = *(_DWORD *)(v42 + a2);
        *(_WORD *)(v43 + 10) = *(_WORD *)(v42 + v34 - 14);
        *(_DWORD *)(v43 + 6) = v45;
        v46 = *(_DWORD *)(v42 + 2 * a2);
        *(_WORD *)(v43 + 16) = *(_WORD *)(v42 + v35 - 14);
        *(_DWORD *)(v43 + 12) = v46;
        v47 = *(_DWORD *)(v42 + 3 * a2);
        *(_WORD *)(v43 + 22) = *(_WORD *)(v42 + v36 + 4);
        *(_DWORD *)(v43 + 18) = v47;
        v48 = v43 + a4;
        v49 = *(_DWORD *)(v42 + 6);
        *(_WORD *)(v48 + 4) = *(_WORD *)(v42 + 10);
        *(_DWORD *)v48 = v49;
        v50 = *(_DWORD *)(v42 + v34 - 12);
        *(_WORD *)(v48 + 10) = *(_WORD *)(v42 + v34 - 8);
        *(_DWORD *)(v48 + 6) = v50;
        v51 = *(_DWORD *)(v42 + v35 - 12);
        *(_WORD *)(v48 + 16) = *(_WORD *)(v42 + v35 - 8);
        *(_DWORD *)(v48 + 12) = v51;
        v52 = *(_DWORD *)(v42 + v36 + 6);
        *(_WORD *)(v48 + 22) = *(_WORD *)(v42 + v36 + 10);
        *(_DWORD *)(v48 + 18) = v52;
        v53 = v43 + a4 + a4;
        LODWORD(v48) = *(_DWORD *)(v42 + 12);
        *(_WORD *)(v53 + 4) = *(_WORD *)(v42 + 16);
        *(_DWORD *)v53 = v48;
        LODWORD(v48) = *(_DWORD *)(v42 + v34 - 6);
        *(_WORD *)(v53 + 10) = *(_WORD *)(v42 + v34 - 2);
        *(_DWORD *)(v53 + 6) = v48;
        LODWORD(v48) = *(_DWORD *)(v42 + v35 - 6);
        *(_WORD *)(v53 + 16) = *(_WORD *)(v42 + v35 - 2);
        *(_DWORD *)(v53 + 12) = v48;
        LODWORD(v48) = *(_DWORD *)(v42 + v36 + 12);
        *(_WORD *)(v53 + 22) = *(_WORD *)(v42 + v36 + 16);
        *(_DWORD *)(v53 + 18) = v48;
        v54 = v53 + a4;
        LODWORD(v48) = *(_DWORD *)(v42 + 18);
        *(_WORD *)(v54 + 4) = *(_WORD *)(v42 + 22);
        *(_DWORD *)v54 = v48;
        LODWORD(v48) = *(_DWORD *)(v42 + v34);
        *(_WORD *)(v54 + 10) = *(_WORD *)(v42 + v34 + 4);
        *(_DWORD *)(v54 + 6) = v48;
        v55 = *(_DWORD *)(v42 + v35);
        *(_WORD *)(v54 + 16) = *(_WORD *)(v42 + v35 + 4);
        *(_DWORD *)(v54 + 12) = v55;
        v56 = *(_DWORD *)(v42 + v36 + 18);
        *(_WORD *)(v54 + 22) = *(_WORD *)(v42 + v36 + 22);
        *(_DWORD *)(v54 + 18) = v56;
        v41 += 4;
        v43 += 24;
        v42 += 4 * a2;
      }
      while (v41 <= v32);
      v57 = v38;
      v58 = v37;
      v59 = (v32 & 0xFFFFFFFC) + 4;
      if ((int)v5 > (int)v41)
      {
        do
        {
          v60 = *(_DWORD *)(v57 - 12);
          *(_WORD *)(v58 + 4) = *(_WORD *)(v57 - 8);
          *(_DWORD *)v58 = v60;
          v61 = v58 + a4;
          v62 = *(_DWORD *)(v57 - 6);
          *(_WORD *)(v61 + 4) = *(_WORD *)(v57 - 2);
          *(_DWORD *)v61 = v62;
          v63 = v58 + 2 * a4;
          v64 = *(_DWORD *)v57;
          *(_WORD *)(v63 + 4) = *(_WORD *)(v57 + 4);
          *(_DWORD *)v63 = v64;
          v65 = v58 + 3 * a4;
          v66 = *(_DWORD *)(v57 + 6);
          *(_WORD *)(v65 + 4) = *(_WORD *)(v57 + 10);
          *(_DWORD *)v65 = v66;
          ++v59;
          v58 += 6;
          v57 += a2;
        }
        while (v59 < v5);
      }
      v8 += 4;
      v40 += v33;
      v39 += 24;
      v37 += v33;
      v38 += 24;
    }
    while (v8 <= v7);
    v6 = v88;
  }
  else
  {
    if ((int)v5 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v6)
        return result;
      goto LABEL_20;
    }
    v8 = 0;
    v9 = 2 * a2;
    v10 = a3 + 6;
    v11 = 2 * a4;
    v12 = 3 * a4;
    v13 = result;
    do
    {
      v14 = v10 + a4;
      v15 = v10 + v11;
      v16 = v10 + v12;
      v17 = *(_DWORD *)v13;
      *(_WORD *)(v10 - 2) = *(_WORD *)(v13 + 4);
      *(_DWORD *)(v10 - 6) = v17;
      v18 = *(_DWORD *)(v13 + 6);
      *(_WORD *)(v14 - 2) = *(_WORD *)(v13 + 10);
      *(_DWORD *)(v14 - 6) = v18;
      v19 = *(_DWORD *)(v13 + 12);
      *(_WORD *)(v15 - 2) = *(_WORD *)(v13 + 16);
      *(_DWORD *)(v15 - 6) = v19;
      v20 = *(_DWORD *)(v13 + 18);
      *(_WORD *)(v16 - 2) = *(_WORD *)(v13 + 22);
      *(_DWORD *)(v16 - 6) = v20;
      if ((_DWORD)v5 != 1)
      {
        v21 = *(_DWORD *)(v13 + a2);
        *(_WORD *)(v10 + 4) = *(_WORD *)(v13 + a2 + 4);
        *(_DWORD *)v10 = v21;
        v22 = *(_DWORD *)(v13 + a2 + 6);
        *(_WORD *)(v14 + 4) = *(_WORD *)(v13 + a2 + 10);
        *(_DWORD *)v14 = v22;
        v23 = *(_DWORD *)(v13 + a2 + 12);
        *(_WORD *)(v15 + 4) = *(_WORD *)(v13 + a2 + 16);
        *(_DWORD *)v15 = v23;
        v24 = *(_DWORD *)(v13 + a2 + 18);
        *(_WORD *)(v16 + 4) = *(_WORD *)(v13 + a2 + 22);
        *(_DWORD *)v16 = v24;
        if ((_DWORD)v5 != 2)
        {
          v25 = *(_DWORD *)(v13 + 2 * a2);
          *(_WORD *)(v10 + 10) = *(_WORD *)(v13 + v9 + 4);
          *(_DWORD *)(v10 + 6) = v25;
          v26 = v10 + a4;
          v27 = *(_DWORD *)(v13 + v9 + 6);
          *(_WORD *)(v26 + 10) = *(_WORD *)(v13 + v9 + 10);
          *(_DWORD *)(v26 + 6) = v27;
          v28 = v10 + v11;
          v29 = *(_DWORD *)(v13 + v9 + 12);
          *(_WORD *)(v28 + 10) = *(_WORD *)(v13 + v9 + 16);
          *(_DWORD *)(v28 + 6) = v29;
          v30 = v10 + v12;
          v31 = *(_DWORD *)(v13 + v9 + 18);
          *(_WORD *)(v30 + 10) = *(_WORD *)(v13 + v9 + 22);
          *(_DWORD *)(v30 + 6) = v31;
        }
      }
      v8 += 4;
      v10 += 4 * a4;
      v13 += 24;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v6)
    return result;
LABEL_20:
  if ((int)v5 >= 4)
  {
    v72 = (v5 - 4);
    v73 = v8;
    v74 = result + 6 * v8;
    v75 = a3 + a4 * v73;
    v76 = v75 + 12;
    result = v75 + 24 * ((v5 - 4) >> 2) + 24;
    do
    {
      v77 = 0;
      v78 = v76;
      v79 = v74;
      do
      {
        v80 = *(_DWORD *)v79;
        *(_WORD *)(v78 - 8) = *(_WORD *)(v79 + 4);
        *(_DWORD *)(v78 - 12) = v80;
        v81 = *(_DWORD *)(v79 + a2);
        *(_WORD *)(v78 - 2) = *(_WORD *)(v79 + a2 + 4);
        *(_DWORD *)(v78 - 6) = v81;
        v82 = *(_DWORD *)(v79 + 2 * a2);
        *(_WORD *)(v78 + 4) = *(_WORD *)(v79 + 2 * a2 + 4);
        *(_DWORD *)v78 = v82;
        v83 = *(_DWORD *)(v79 + 3 * a2);
        *(_WORD *)(v78 + 10) = *(_WORD *)(v79 + 3 * a2 + 4);
        *(_DWORD *)(v78 + 6) = v83;
        v77 += 4;
        v79 += 4 * a2;
        v78 += 24;
      }
      while (v77 <= v72);
      v84 = a2 * ((v72 & 0xFFFFFFFC) + 4);
      v85 = result;
      v86 = (v72 & 0xFFFFFFFC) + 4;
      if ((int)v5 > (int)v77)
      {
        do
        {
          v87 = *(_DWORD *)(v74 + v84);
          *(_WORD *)(v85 + 4) = *(_WORD *)(v74 + v84 + 4);
          *(_DWORD *)v85 = v87;
          v85 += 6;
          ++v86;
          v84 += a2;
        }
        while (v86 < v5);
      }
      ++v73;
      v74 += 6;
      v76 += a4;
      result += a4;
    }
    while (v6 > (int)v73);
  }
  else if ((int)v5 >= 1)
  {
    v67 = result + 6 * v8;
    v68 = a3 + a4 * v8 + 6;
    do
    {
      v69 = *(_DWORD *)v67;
      *(_WORD *)(v68 - 2) = *(_WORD *)(v67 + 4);
      *(_DWORD *)(v68 - 6) = v69;
      if ((_DWORD)v5 != 1)
      {
        v70 = *(_DWORD *)(v67 + a2);
        *(_WORD *)(v68 + 4) = *(_WORD *)(v67 + a2 + 4);
        *(_DWORD *)v68 = v70;
        if ((_DWORD)v5 != 2)
        {
          v71 = *(_DWORD *)(v67 + 2 * a2);
          *(_WORD *)(v68 + 10) = *(_WORD *)(v67 + 2 * a2 + 4);
          *(_DWORD *)(v68 + 6) = v71;
        }
      }
      LODWORD(v8) = v8 + 1;
      v67 += 6;
      v68 += a4;
    }
    while (v6 > (int)v8);
  }
  return result;
}

_QWORD *sub_1002677A4(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;

  v5 = *a5;
  v6 = a5[1];
  v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v5 <= 0)
      return result;
    goto LABEL_19;
  }
  if ((int)v6 >= 4)
  {
    v8 = 0;
    v14 = (v6 - 4);
    v15 = 4 * a4;
    v16 = a2 + 24;
    v17 = 2 * a2 + 24;
    v18 = 3 * a2;
    v19 = a3 + a4;
    v20 = a3 + a4 + 2 * a4;
    v21 = a3 + 2 * a4;
    v22 = (uint64_t)result + a2 * ((v14 & 0xFFFFFFFC) + 4) + 16;
    v23 = result;
    v24 = a3;
    do
    {
      v25 = 0;
      v26 = v23;
      do
      {
        v27 = (_QWORD *)(v24 + 8 * v25);
        *v27 = *v26;
        v27[1] = *(_QWORD *)((char *)v26 + a2);
        v27[2] = *(_QWORD *)((char *)v26 + 2 * a2);
        v27[3] = *(_QWORD *)((char *)v26 + 3 * a2);
        v28 = (_QWORD *)((char *)v27 + a4);
        *v28 = v26[1];
        v28[1] = *(_QWORD *)((char *)v26 + v16 - 16);
        v28[2] = *(_QWORD *)((char *)v26 + v17 - 16);
        v28[3] = *(_QWORD *)((char *)v26 + v18 + 8);
        v29 = (_QWORD *)((char *)v28 + a4);
        *v29 = v26[2];
        v29[1] = *(_QWORD *)((char *)v26 + v16 - 8);
        v29[2] = *(_QWORD *)((char *)v26 + v17 - 8);
        v29[3] = *(_QWORD *)((char *)v26 + v18 + 16);
        v30 = (_QWORD *)((char *)v29 + a4);
        *v30 = v26[3];
        v30[1] = *(_QWORD *)((char *)v26 + v16);
        v30[2] = *(_QWORD *)((char *)v26 + v17);
        v30[3] = *(_QWORD *)((char *)v26 + v18 + 24);
        v25 += 4;
        v26 = (_QWORD *)((char *)v26 + 4 * a2);
      }
      while (v25 <= v14);
      v31 = (_QWORD *)v22;
      v32 = (v14 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v25)
      {
        do
        {
          v33 = 8 * v32;
          *(_QWORD *)(v24 + v33) = *(v31 - 2);
          *(_QWORD *)(v19 + v33) = *(v31 - 1);
          *(_QWORD *)(v21 + v33) = *v31;
          *(_QWORD *)(v20 + v33) = v31[1];
          ++v32;
          v31 = (_QWORD *)((char *)v31 + a2);
        }
        while (v32 < v6);
      }
      v8 += 4;
      v24 += v15;
      v23 += 4;
      v20 += v15;
      v21 += v15;
      v19 += v15;
      v22 += 32;
    }
    while (v8 <= v7);
  }
  else
  {
    if ((int)v6 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v5)
        return result;
      goto LABEL_19;
    }
    v8 = 0;
    v9 = 2 * a2;
    v10 = (_QWORD *)(a3 + 8);
    v11 = 2 * a4;
    v12 = 3 * a4;
    v13 = result;
    do
    {
      *(v10 - 1) = *v13;
      *(_QWORD *)((char *)v10 + a4 - 8) = v13[1];
      *(_QWORD *)((char *)v10 + v11 - 8) = v13[2];
      *(_QWORD *)((char *)v10 + v12 - 8) = v13[3];
      if ((_DWORD)v6 != 1)
      {
        *v10 = *(_QWORD *)((char *)v13 + a2);
        *(_QWORD *)((char *)v10 + a4) = *(_QWORD *)((char *)v13 + a2 + 8);
        *(_QWORD *)((char *)v10 + 2 * a4) = *(_QWORD *)((char *)v13 + a2 + 16);
        *(_QWORD *)((char *)v10 + 3 * a4) = *(_QWORD *)((char *)v13 + a2 + 24);
        if ((_DWORD)v6 != 2)
        {
          v10[1] = *(_QWORD *)((char *)v13 + 2 * a2);
          *(_QWORD *)((char *)v10 + a4 + 8) = *(_QWORD *)((char *)v13 + v9 + 8);
          *(_QWORD *)((char *)v10 + v11 + 8) = *(_QWORD *)((char *)v13 + v9 + 16);
          *(_QWORD *)((char *)v10 + v12 + 8) = *(_QWORD *)((char *)v13 + v9 + 24);
        }
      }
      v8 += 4;
      v10 = (_QWORD *)((char *)v10 + 4 * a4);
      v13 += 4;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v5)
    return result;
LABEL_19:
  if ((int)v6 >= 4)
  {
    v36 = (v6 - 4);
    v37 = v8;
    v38 = &result[v8];
    v39 = a3 + a4 * v37;
    result = (_QWORD *)(v39 + 16);
    do
    {
      v40 = 0;
      v41 = result;
      v42 = v38;
      do
      {
        *(v41 - 2) = *v42;
        *(v41 - 1) = *(_QWORD *)((char *)v42 + a2);
        *v41 = *(_QWORD *)((char *)v42 + 2 * a2);
        v41[1] = *(_QWORD *)((char *)v42 + 3 * a2);
        v40 += 4;
        v42 = (_QWORD *)((char *)v42 + 4 * a2);
        v41 += 4;
      }
      while (v40 <= v36);
      v43 = a2 * ((v36 & 0xFFFFFFFC) + 4);
      v44 = (v36 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v40)
      {
        do
        {
          *(_QWORD *)(v39 + 8 * v44++) = *(_QWORD *)((char *)v38 + v43);
          v43 += a2;
        }
        while (v44 < v6);
      }
      ++v37;
      ++v38;
      result = (_QWORD *)((char *)result + a4);
      v39 += a4;
    }
    while (v5 > (int)v37);
  }
  else if ((int)v6 >= 1)
  {
    v34 = &result[v8];
    v35 = (_QWORD *)(a3 + a4 * v8 + 16);
    do
    {
      *(v35 - 2) = *v34;
      if ((_DWORD)v6 != 1)
      {
        *(v35 - 1) = *(_QWORD *)((char *)v34 + a2);
        if ((_DWORD)v6 != 2)
          *v35 = *(_QWORD *)((char *)v34 + 2 * a2);
      }
      LODWORD(v8) = v8 + 1;
      ++v34;
      v35 = (_QWORD *)((char *)v35 + a4);
    }
    while (v5 > (int)v8);
  }
  return result;
}

uint64_t sub_100267B64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;

  v6 = *a5;
  v5 = a5[1];
  v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v6 <= 0)
      return result;
    goto LABEL_20;
  }
  if ((int)v5 >= 4)
  {
    v94 = *a5;
    v8 = 0;
    v32 = (v5 - 4);
    v33 = 4 * a4;
    v34 = a2 + 36;
    v35 = 2 * a2 + 36;
    v36 = 3 * a2;
    v37 = a3 + 48 * ((v5 - 4) >> 2) + 48;
    v38 = result + a2 * ((v32 & 0xFFFFFFFC) + 4) + 24;
    v39 = result;
    v40 = a3;
    do
    {
      v41 = 0;
      v42 = v39;
      v43 = v40;
      do
      {
        v44 = *(_QWORD *)v42;
        *(_DWORD *)(v43 + 8) = *(_DWORD *)(v42 + 8);
        *(_QWORD *)v43 = v44;
        v45 = *(_QWORD *)(v42 + a2);
        *(_DWORD *)(v43 + 20) = *(_DWORD *)(v42 + v34 - 28);
        *(_QWORD *)(v43 + 12) = v45;
        v46 = *(_QWORD *)(v42 + 2 * a2);
        *(_DWORD *)(v43 + 32) = *(_DWORD *)(v42 + v35 - 28);
        *(_QWORD *)(v43 + 24) = v46;
        v47 = *(_QWORD *)(v42 + 3 * a2);
        *(_DWORD *)(v43 + 44) = *(_DWORD *)(v42 + v36 + 8);
        *(_QWORD *)(v43 + 36) = v47;
        v48 = v43 + a4;
        v49 = *(_QWORD *)(v42 + 12);
        *(_DWORD *)(v48 + 8) = *(_DWORD *)(v42 + 20);
        *(_QWORD *)v48 = v49;
        v50 = *(_QWORD *)(v42 + v34 - 24);
        *(_DWORD *)(v48 + 20) = *(_DWORD *)(v42 + v34 - 16);
        *(_QWORD *)(v48 + 12) = v50;
        v51 = *(_QWORD *)(v42 + v35 - 24);
        *(_DWORD *)(v48 + 32) = *(_DWORD *)(v42 + v35 - 16);
        *(_QWORD *)(v48 + 24) = v51;
        v52 = *(_QWORD *)(v42 + v36 + 12);
        *(_DWORD *)(v48 + 44) = *(_DWORD *)(v42 + v36 + 20);
        *(_QWORD *)(v48 + 36) = v52;
        v53 = v43 + a4 + a4;
        v54 = *(_QWORD *)(v42 + 24);
        *(_DWORD *)(v53 + 8) = *(_DWORD *)(v42 + 32);
        *(_QWORD *)v53 = v54;
        v55 = *(_QWORD *)(v42 + v34 - 12);
        *(_DWORD *)(v53 + 20) = *(_DWORD *)(v42 + v34 - 4);
        *(_QWORD *)(v53 + 12) = v55;
        v56 = *(_QWORD *)(v42 + v35 - 12);
        *(_DWORD *)(v53 + 32) = *(_DWORD *)(v42 + v35 - 4);
        *(_QWORD *)(v53 + 24) = v56;
        v57 = *(_QWORD *)(v42 + v36 + 24);
        *(_DWORD *)(v53 + 44) = *(_DWORD *)(v42 + v36 + 32);
        *(_QWORD *)(v53 + 36) = v57;
        v58 = v53 + a4;
        v59 = *(_QWORD *)(v42 + 36);
        *(_DWORD *)(v58 + 8) = *(_DWORD *)(v42 + 44);
        *(_QWORD *)v58 = v59;
        v60 = *(_QWORD *)(v42 + v34);
        *(_DWORD *)(v58 + 20) = *(_DWORD *)(v42 + v34 + 8);
        *(_QWORD *)(v58 + 12) = v60;
        v61 = *(_QWORD *)(v42 + v35);
        *(_DWORD *)(v58 + 32) = *(_DWORD *)(v42 + v35 + 8);
        *(_QWORD *)(v58 + 24) = v61;
        v62 = *(_QWORD *)(v42 + v36 + 36);
        *(_DWORD *)(v58 + 44) = *(_DWORD *)(v42 + v36 + 44);
        *(_QWORD *)(v58 + 36) = v62;
        v41 += 4;
        v43 += 48;
        v42 += 4 * a2;
      }
      while (v41 <= v32);
      v63 = v38;
      v64 = v37;
      v65 = (v32 & 0xFFFFFFFC) + 4;
      if ((int)v5 > (int)v41)
      {
        do
        {
          v66 = *(_QWORD *)(v63 - 24);
          *(_DWORD *)(v64 + 8) = *(_DWORD *)(v63 - 16);
          *(_QWORD *)v64 = v66;
          v67 = v64 + a4;
          v68 = *(_QWORD *)(v63 - 12);
          *(_DWORD *)(v67 + 8) = *(_DWORD *)(v63 - 4);
          *(_QWORD *)v67 = v68;
          v69 = v64 + 2 * a4;
          v70 = *(_QWORD *)v63;
          *(_DWORD *)(v69 + 8) = *(_DWORD *)(v63 + 8);
          *(_QWORD *)v69 = v70;
          v71 = v64 + 3 * a4;
          v72 = *(_QWORD *)(v63 + 12);
          *(_DWORD *)(v71 + 8) = *(_DWORD *)(v63 + 20);
          *(_QWORD *)v71 = v72;
          ++v65;
          v64 += 12;
          v63 += a2;
        }
        while (v65 < v5);
      }
      v8 += 4;
      v40 += v33;
      v39 += 48;
      v37 += v33;
      v38 += 48;
    }
    while (v8 <= v7);
    v6 = v94;
  }
  else
  {
    if ((int)v5 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v6)
        return result;
      goto LABEL_20;
    }
    v8 = 0;
    v9 = 2 * a2;
    v10 = a3 + 12;
    v11 = 2 * a4;
    v12 = 3 * a4;
    v13 = result;
    do
    {
      v14 = v10 + a4;
      v15 = v10 + v11;
      v16 = v10 + v12;
      v17 = *(_QWORD *)v13;
      *(_DWORD *)(v10 - 4) = *(_DWORD *)(v13 + 8);
      *(_QWORD *)(v10 - 12) = v17;
      v18 = *(_QWORD *)(v13 + 12);
      *(_DWORD *)(v14 - 4) = *(_DWORD *)(v13 + 20);
      *(_QWORD *)(v14 - 12) = v18;
      v19 = *(_QWORD *)(v13 + 24);
      *(_DWORD *)(v15 - 4) = *(_DWORD *)(v13 + 32);
      *(_QWORD *)(v15 - 12) = v19;
      v20 = *(_QWORD *)(v13 + 36);
      *(_DWORD *)(v16 - 4) = *(_DWORD *)(v13 + 44);
      *(_QWORD *)(v16 - 12) = v20;
      if ((_DWORD)v5 != 1)
      {
        v21 = *(_QWORD *)(v13 + a2);
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v13 + a2 + 8);
        *(_QWORD *)v10 = v21;
        v22 = *(_QWORD *)(v13 + a2 + 12);
        *(_DWORD *)(v14 + 8) = *(_DWORD *)(v13 + a2 + 20);
        *(_QWORD *)v14 = v22;
        v23 = *(_QWORD *)(v13 + a2 + 24);
        *(_DWORD *)(v15 + 8) = *(_DWORD *)(v13 + a2 + 32);
        *(_QWORD *)v15 = v23;
        v24 = *(_QWORD *)(v13 + a2 + 36);
        *(_DWORD *)(v16 + 8) = *(_DWORD *)(v13 + a2 + 44);
        *(_QWORD *)v16 = v24;
        if ((_DWORD)v5 != 2)
        {
          v25 = *(_QWORD *)(v13 + 2 * a2);
          *(_DWORD *)(v10 + 20) = *(_DWORD *)(v13 + v9 + 8);
          *(_QWORD *)(v10 + 12) = v25;
          v26 = v10 + a4;
          v27 = *(_QWORD *)(v13 + v9 + 12);
          *(_DWORD *)(v26 + 20) = *(_DWORD *)(v13 + v9 + 20);
          *(_QWORD *)(v26 + 12) = v27;
          v28 = v10 + v11;
          v29 = *(_QWORD *)(v13 + v9 + 24);
          *(_DWORD *)(v28 + 20) = *(_DWORD *)(v13 + v9 + 32);
          *(_QWORD *)(v28 + 12) = v29;
          v30 = v10 + v12;
          v31 = *(_QWORD *)(v13 + v9 + 36);
          *(_DWORD *)(v30 + 20) = *(_DWORD *)(v13 + v9 + 44);
          *(_QWORD *)(v30 + 12) = v31;
        }
      }
      v8 += 4;
      v10 += 4 * a4;
      v13 += 48;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v6)
    return result;
LABEL_20:
  if ((int)v5 >= 4)
  {
    v78 = (v5 - 4);
    v79 = v8;
    v80 = result + 12 * v8;
    v81 = a3 + a4 * v79;
    v82 = v81 + 24;
    result = v81 + 48 * ((v5 - 4) >> 2) + 48;
    do
    {
      v83 = 0;
      v84 = v82;
      v85 = v80;
      do
      {
        v86 = *(_QWORD *)v85;
        *(_DWORD *)(v84 - 16) = *(_DWORD *)(v85 + 8);
        *(_QWORD *)(v84 - 24) = v86;
        v87 = *(_QWORD *)(v85 + a2);
        *(_DWORD *)(v84 - 4) = *(_DWORD *)(v85 + a2 + 8);
        *(_QWORD *)(v84 - 12) = v87;
        v88 = *(_QWORD *)(v85 + 2 * a2);
        *(_DWORD *)(v84 + 8) = *(_DWORD *)(v85 + 2 * a2 + 8);
        *(_QWORD *)v84 = v88;
        v89 = *(_QWORD *)(v85 + 3 * a2);
        *(_DWORD *)(v84 + 20) = *(_DWORD *)(v85 + 3 * a2 + 8);
        *(_QWORD *)(v84 + 12) = v89;
        v83 += 4;
        v85 += 4 * a2;
        v84 += 48;
      }
      while (v83 <= v78);
      v90 = a2 * ((v78 & 0xFFFFFFFC) + 4);
      v91 = result;
      v92 = (v78 & 0xFFFFFFFC) + 4;
      if ((int)v5 > (int)v83)
      {
        do
        {
          v93 = *(_QWORD *)(v80 + v90);
          *(_DWORD *)(v91 + 8) = *(_DWORD *)(v80 + v90 + 8);
          *(_QWORD *)v91 = v93;
          v91 += 12;
          ++v92;
          v90 += a2;
        }
        while (v92 < v5);
      }
      ++v79;
      v80 += 12;
      v82 += a4;
      result += a4;
    }
    while (v6 > (int)v79);
  }
  else if ((int)v5 >= 1)
  {
    v73 = result + 12 * v8;
    v74 = a3 + a4 * v8 + 12;
    do
    {
      v75 = *(_QWORD *)v73;
      *(_DWORD *)(v74 - 4) = *(_DWORD *)(v73 + 8);
      *(_QWORD *)(v74 - 12) = v75;
      if ((_DWORD)v5 != 1)
      {
        v76 = *(_QWORD *)(v73 + a2);
        *(_DWORD *)(v74 + 8) = *(_DWORD *)(v73 + a2 + 8);
        *(_QWORD *)v74 = v76;
        if ((_DWORD)v5 != 2)
        {
          v77 = *(_QWORD *)(v73 + 2 * a2);
          *(_DWORD *)(v74 + 20) = *(_DWORD *)(v73 + 2 * a2 + 8);
          *(_QWORD *)(v74 + 12) = v77;
        }
      }
      LODWORD(v8) = v8 + 1;
      v73 += 12;
      v74 += a4;
    }
    while (v6 > (int)v8);
  }
  return result;
}

uint64_t sub_1002680C4(uint64_t result, uint64_t a2, _OWORD *a3, uint64_t a4, int *a5)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  unint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  _OWORD *v28;
  _OWORD *v29;
  _OWORD *v30;
  unint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  _OWORD *v38;
  unint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  _OWORD *v43;
  unint64_t v44;

  v5 = *a5;
  v6 = a5[1];
  v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v5 <= 0)
      return result;
    goto LABEL_19;
  }
  if ((int)v6 >= 4)
  {
    v8 = 0;
    v14 = (v6 - 4);
    v15 = 4 * a4;
    v16 = a2 + 48;
    v17 = 2 * a2 + 48;
    v18 = 3 * a2;
    v19 = (uint64_t)a3 + ((16 * v14) & 0xFFFFFFFC0) + 64;
    v20 = result + a2 * ((v14 & 0xFFFFFFFC) + 4) + 32;
    v21 = (_OWORD *)result;
    v22 = a3;
    do
    {
      v23 = 0;
      v24 = v21;
      v25 = v22;
      do
      {
        *v25 = *v24;
        v25[1] = *(_OWORD *)((char *)v24 + a2);
        v25[2] = *(_OWORD *)((char *)v24 + 2 * a2);
        v25[3] = *(_OWORD *)((char *)v24 + 3 * a2);
        v26 = (_OWORD *)((char *)v25 + a4);
        *v26 = v24[1];
        v26[1] = *(_OWORD *)((char *)v24 + v16 - 32);
        v26[2] = *(_OWORD *)((char *)v24 + v17 - 32);
        v26[3] = *(_OWORD *)((char *)v24 + v18 + 16);
        v27 = (_OWORD *)((char *)v25 + a4 + a4);
        *v27 = v24[2];
        v27[1] = *(_OWORD *)((char *)v24 + v16 - 16);
        v27[2] = *(_OWORD *)((char *)v24 + v17 - 16);
        v27[3] = *(_OWORD *)((char *)v24 + v18 + 32);
        v28 = (_OWORD *)((char *)v27 + a4);
        *v28 = v24[3];
        v28[1] = *(_OWORD *)((char *)v24 + v16);
        v28[2] = *(_OWORD *)((char *)v24 + v17);
        v28[3] = *(_OWORD *)((char *)v24 + v18 + 48);
        v23 += 4;
        v25 += 4;
        v24 = (_OWORD *)((char *)v24 + 4 * a2);
      }
      while (v23 <= v14);
      v29 = (_OWORD *)v20;
      v30 = (_OWORD *)v19;
      v31 = (v14 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v23)
      {
        do
        {
          *v30 = *(v29 - 2);
          *(_OWORD *)((char *)v30 + a4) = *(v29 - 1);
          *(_OWORD *)((char *)v30 + 2 * a4) = *v29;
          *(_OWORD *)((char *)v30 + 3 * a4) = v29[1];
          ++v31;
          ++v30;
          v29 = (_OWORD *)((char *)v29 + a2);
        }
        while (v31 < v6);
      }
      v8 += 4;
      v22 = (_OWORD *)((char *)v22 + v15);
      v21 += 4;
      v19 += v15;
      v20 += 64;
    }
    while (v8 <= v7);
  }
  else
  {
    if ((int)v6 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v5)
        return result;
      goto LABEL_19;
    }
    v8 = 0;
    v9 = 2 * a2;
    v10 = a3 + 1;
    v11 = 2 * a4;
    v12 = 3 * a4;
    v13 = (_OWORD *)result;
    do
    {
      *(v10 - 1) = *v13;
      *(_OWORD *)((char *)v10 + a4 - 16) = v13[1];
      *(_OWORD *)((char *)v10 + v11 - 16) = v13[2];
      *(_OWORD *)((char *)v10 + v12 - 16) = v13[3];
      if ((_DWORD)v6 != 1)
      {
        *v10 = *(_OWORD *)((char *)v13 + a2);
        *(_OWORD *)((char *)v10 + a4) = *(_OWORD *)((char *)v13 + a2 + 16);
        *(_OWORD *)((char *)v10 + 2 * a4) = *(_OWORD *)((char *)v13 + a2 + 32);
        *(_OWORD *)((char *)v10 + 3 * a4) = *(_OWORD *)((char *)v13 + a2 + 48);
        if ((_DWORD)v6 != 2)
        {
          v10[1] = *(_OWORD *)((char *)v13 + 2 * a2);
          *(_OWORD *)((char *)v10 + a4 + 16) = *(_OWORD *)((char *)v13 + v9 + 16);
          *(_OWORD *)((char *)v10 + v11 + 16) = *(_OWORD *)((char *)v13 + v9 + 32);
          *(_OWORD *)((char *)v10 + v12 + 16) = *(_OWORD *)((char *)v13 + v9 + 48);
        }
      }
      v8 += 4;
      v10 = (_OWORD *)((char *)v10 + 4 * a4);
      v13 += 4;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v5)
    return result;
LABEL_19:
  if ((int)v6 >= 4)
  {
    v34 = (v6 - 4);
    v35 = v8;
    v36 = (_OWORD *)(result + 16 * v8);
    v37 = (uint64_t)a3 + a4 * v35;
    v38 = (_OWORD *)(v37 + 32);
    result = v37 + ((16 * v34) & 0xFFFFFFFC0) + 64;
    do
    {
      v39 = 0;
      v40 = v38;
      v41 = v36;
      do
      {
        *(v40 - 2) = *v41;
        *(v40 - 1) = *(_OWORD *)((char *)v41 + a2);
        *v40 = *(_OWORD *)((char *)v41 + 2 * a2);
        v40[1] = *(_OWORD *)((char *)v41 + 3 * a2);
        v39 += 4;
        v41 = (_OWORD *)((char *)v41 + 4 * a2);
        v40 += 4;
      }
      while (v39 <= v34);
      v42 = a2 * ((v34 & 0xFFFFFFFC) + 4);
      v43 = (_OWORD *)result;
      v44 = (v34 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v39)
      {
        do
        {
          *v43++ = *(_OWORD *)((char *)v36 + v42);
          ++v44;
          v42 += a2;
        }
        while (v44 < v6);
      }
      ++v35;
      ++v36;
      v38 = (_OWORD *)((char *)v38 + a4);
      result += a4;
    }
    while (v5 > (int)v35);
  }
  else if ((int)v6 >= 1)
  {
    v32 = (_OWORD *)(result + 16 * v8);
    v33 = (_OWORD *)((char *)a3 + a4 * v8 + 32);
    do
    {
      *(v33 - 2) = *v32;
      if ((_DWORD)v6 != 1)
      {
        *(v33 - 1) = *(_OWORD *)((char *)v32 + a2);
        if ((_DWORD)v6 != 2)
          *v33 = *(_OWORD *)((char *)v32 + 2 * a2);
      }
      LODWORD(v8) = v8 + 1;
      ++v32;
      v33 = (_OWORD *)((char *)v33 + a4);
    }
    while (v5 > (int)v8);
  }
  return result;
}

uint64_t sub_1002684A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;

  v5 = *a5;
  v6 = a5[1];
  v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v5 <= 0)
      return result;
    goto LABEL_19;
  }
  if ((int)v6 >= 4)
  {
    v8 = 0;
    v32 = (v6 - 4);
    v33 = 4 * a4;
    v34 = a2 + 72;
    v35 = 2 * a2 + 72;
    v36 = 3 * a2;
    v37 = a3 + 96 * ((v6 - 4) >> 2) + 96;
    v38 = result + a2 * ((v32 & 0xFFFFFFFC) + 4) + 48;
    v39 = result;
    v40 = a3;
    do
    {
      v41 = 0;
      v42 = v39;
      v43 = v40;
      do
      {
        v44 = *(_OWORD *)v42;
        *(_QWORD *)(v43 + 16) = *(_QWORD *)(v42 + 16);
        *(_OWORD *)v43 = v44;
        v45 = *(_OWORD *)(v42 + a2);
        *(_QWORD *)(v43 + 40) = *(_QWORD *)(v42 + v34 - 56);
        *(_OWORD *)(v43 + 24) = v45;
        v46 = *(_OWORD *)(v42 + 2 * a2);
        *(_QWORD *)(v43 + 64) = *(_QWORD *)(v42 + v35 - 56);
        *(_OWORD *)(v43 + 48) = v46;
        v47 = *(_OWORD *)(v42 + 3 * a2);
        *(_QWORD *)(v43 + 88) = *(_QWORD *)(v42 + v36 + 16);
        *(_OWORD *)(v43 + 72) = v47;
        v48 = v43 + a4;
        v49 = *(_OWORD *)(v42 + 24);
        *(_QWORD *)(v48 + 16) = *(_QWORD *)(v42 + 40);
        *(_OWORD *)v48 = v49;
        v50 = *(_OWORD *)(v42 + v34 - 48);
        *(_QWORD *)(v48 + 40) = *(_QWORD *)(v42 + v34 - 32);
        *(_OWORD *)(v48 + 24) = v50;
        v51 = *(_OWORD *)(v42 + v35 - 48);
        *(_QWORD *)(v48 + 64) = *(_QWORD *)(v42 + v35 - 32);
        *(_OWORD *)(v48 + 48) = v51;
        v52 = *(_OWORD *)(v42 + v36 + 24);
        *(_QWORD *)(v48 + 88) = *(_QWORD *)(v42 + v36 + 40);
        *(_OWORD *)(v48 + 72) = v52;
        v53 = v43 + a4 + a4;
        v54 = *(_OWORD *)(v42 + 48);
        *(_QWORD *)(v53 + 16) = *(_QWORD *)(v42 + 64);
        *(_OWORD *)v53 = v54;
        v55 = *(_OWORD *)(v42 + v34 - 24);
        *(_QWORD *)(v53 + 40) = *(_QWORD *)(v42 + v34 - 8);
        *(_OWORD *)(v53 + 24) = v55;
        v56 = *(_OWORD *)(v42 + v35 - 24);
        *(_QWORD *)(v53 + 64) = *(_QWORD *)(v42 + v35 - 8);
        *(_OWORD *)(v53 + 48) = v56;
        v57 = *(_OWORD *)(v42 + v36 + 48);
        *(_QWORD *)(v53 + 88) = *(_QWORD *)(v42 + v36 + 64);
        *(_OWORD *)(v53 + 72) = v57;
        v58 = v53 + a4;
        v59 = *(_OWORD *)(v42 + 72);
        *(_QWORD *)(v58 + 16) = *(_QWORD *)(v42 + 88);
        *(_OWORD *)v58 = v59;
        v60 = *(_OWORD *)(v42 + v34);
        *(_QWORD *)(v58 + 40) = *(_QWORD *)(v42 + v34 + 16);
        *(_OWORD *)(v58 + 24) = v60;
        v61 = *(_OWORD *)(v42 + v35);
        *(_QWORD *)(v58 + 64) = *(_QWORD *)(v42 + v35 + 16);
        *(_OWORD *)(v58 + 48) = v61;
        v62 = *(_OWORD *)(v42 + v36 + 72);
        *(_QWORD *)(v58 + 88) = *(_QWORD *)(v42 + v36 + 88);
        *(_OWORD *)(v58 + 72) = v62;
        v41 += 4;
        v43 += 96;
        v42 += 4 * a2;
      }
      while (v41 <= v32);
      v63 = v38;
      v64 = v37;
      v65 = (v32 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v41)
      {
        do
        {
          v66 = *(_OWORD *)(v63 - 48);
          *(_QWORD *)(v64 + 16) = *(_QWORD *)(v63 - 32);
          *(_OWORD *)v64 = v66;
          v67 = v64 + a4;
          v68 = *(_OWORD *)(v63 - 24);
          *(_QWORD *)(v67 + 16) = *(_QWORD *)(v63 - 8);
          *(_OWORD *)v67 = v68;
          v69 = v64 + 2 * a4;
          v70 = *(_OWORD *)v63;
          *(_QWORD *)(v69 + 16) = *(_QWORD *)(v63 + 16);
          *(_OWORD *)v69 = v70;
          v71 = v64 + 3 * a4;
          v72 = *(_OWORD *)(v63 + 24);
          *(_QWORD *)(v71 + 16) = *(_QWORD *)(v63 + 40);
          *(_OWORD *)v71 = v72;
          ++v65;
          v64 += 24;
          v63 += a2;
        }
        while (v65 < v6);
      }
      v8 += 4;
      v40 += v33;
      v39 += 96;
      v37 += v33;
      v38 += 96;
    }
    while (v8 <= v7);
  }
  else
  {
    if ((int)v6 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v5)
        return result;
      goto LABEL_19;
    }
    v8 = 0;
    v9 = 2 * a2;
    v10 = a3 + 24;
    v11 = 2 * a4;
    v12 = 3 * a4;
    v13 = result;
    do
    {
      v14 = v10 + a4;
      v15 = v10 + v11;
      v16 = v10 + v12;
      v17 = *(_OWORD *)v13;
      *(_QWORD *)(v10 - 8) = *(_QWORD *)(v13 + 16);
      *(_OWORD *)(v10 - 24) = v17;
      v18 = *(_OWORD *)(v13 + 24);
      *(_QWORD *)(v14 - 8) = *(_QWORD *)(v13 + 40);
      *(_OWORD *)(v14 - 24) = v18;
      v19 = *(_OWORD *)(v13 + 48);
      *(_QWORD *)(v15 - 8) = *(_QWORD *)(v13 + 64);
      *(_OWORD *)(v15 - 24) = v19;
      v20 = *(_OWORD *)(v13 + 72);
      *(_QWORD *)(v16 - 8) = *(_QWORD *)(v13 + 88);
      *(_OWORD *)(v16 - 24) = v20;
      if ((_DWORD)v6 != 1)
      {
        v21 = *(_OWORD *)(v13 + a2);
        *(_QWORD *)(v10 + 16) = *(_QWORD *)(v13 + a2 + 16);
        *(_OWORD *)v10 = v21;
        v22 = *(_OWORD *)(v13 + a2 + 24);
        *(_QWORD *)(v14 + 16) = *(_QWORD *)(v13 + a2 + 40);
        *(_OWORD *)v14 = v22;
        v23 = *(_OWORD *)(v13 + a2 + 48);
        *(_QWORD *)(v15 + 16) = *(_QWORD *)(v13 + a2 + 64);
        *(_OWORD *)v15 = v23;
        v24 = *(_OWORD *)(v13 + a2 + 72);
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v13 + a2 + 88);
        *(_OWORD *)v16 = v24;
        if ((_DWORD)v6 != 2)
        {
          v25 = *(_OWORD *)(v13 + 2 * a2);
          *(_QWORD *)(v10 + 40) = *(_QWORD *)(v13 + v9 + 16);
          *(_OWORD *)(v10 + 24) = v25;
          v26 = v10 + a4;
          v27 = *(_OWORD *)(v13 + v9 + 24);
          *(_QWORD *)(v26 + 40) = *(_QWORD *)(v13 + v9 + 40);
          *(_OWORD *)(v26 + 24) = v27;
          v28 = v10 + v11;
          v29 = *(_OWORD *)(v13 + v9 + 48);
          *(_QWORD *)(v28 + 40) = *(_QWORD *)(v13 + v9 + 64);
          *(_OWORD *)(v28 + 24) = v29;
          v30 = v10 + v12;
          v31 = *(_OWORD *)(v13 + v9 + 72);
          *(_QWORD *)(v30 + 40) = *(_QWORD *)(v13 + v9 + 88);
          *(_OWORD *)(v30 + 24) = v31;
        }
      }
      v8 += 4;
      v10 += 4 * a4;
      v13 += 96;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v5)
    return result;
LABEL_19:
  if ((int)v6 >= 4)
  {
    v78 = (v6 - 4);
    v79 = v8;
    v80 = result + 24 * v8;
    v81 = a3 + a4 * v79;
    v82 = v81 + 48;
    result = v81 + 96 * ((v6 - 4) >> 2) + 96;
    do
    {
      v83 = 0;
      v84 = v82;
      v85 = v80;
      do
      {
        v86 = *(_OWORD *)v85;
        *(_QWORD *)(v84 - 32) = *(_QWORD *)(v85 + 16);
        *(_OWORD *)(v84 - 48) = v86;
        v87 = *(_OWORD *)(v85 + a2);
        *(_QWORD *)(v84 - 8) = *(_QWORD *)(v85 + a2 + 16);
        *(_OWORD *)(v84 - 24) = v87;
        v88 = *(_OWORD *)(v85 + 2 * a2);
        *(_QWORD *)(v84 + 16) = *(_QWORD *)(v85 + 2 * a2 + 16);
        *(_OWORD *)v84 = v88;
        v89 = *(_OWORD *)(v85 + 3 * a2);
        *(_QWORD *)(v84 + 40) = *(_QWORD *)(v85 + 3 * a2 + 16);
        *(_OWORD *)(v84 + 24) = v89;
        v83 += 4;
        v85 += 4 * a2;
        v84 += 96;
      }
      while (v83 <= v78);
      v90 = a2 * ((v78 & 0xFFFFFFFC) + 4);
      v91 = result;
      v92 = (v78 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v83)
      {
        do
        {
          v93 = *(_OWORD *)(v80 + v90);
          *(_QWORD *)(v91 + 16) = *(_QWORD *)(v80 + v90 + 16);
          *(_OWORD *)v91 = v93;
          v91 += 24;
          ++v92;
          v90 += a2;
        }
        while (v92 < v6);
      }
      ++v79;
      v80 += 24;
      v82 += a4;
      result += a4;
    }
    while (v5 > (int)v79);
  }
  else if ((int)v6 >= 1)
  {
    v73 = result + 24 * v8;
    v74 = a3 + a4 * v8 + 24;
    do
    {
      v75 = *(_OWORD *)v73;
      *(_QWORD *)(v74 - 8) = *(_QWORD *)(v73 + 16);
      *(_OWORD *)(v74 - 24) = v75;
      if ((_DWORD)v6 != 1)
      {
        v76 = *(_OWORD *)(v73 + a2);
        *(_QWORD *)(v74 + 16) = *(_QWORD *)(v73 + a2 + 16);
        *(_OWORD *)v74 = v76;
        if ((_DWORD)v6 != 2)
        {
          v77 = *(_OWORD *)(v73 + 2 * a2);
          *(_QWORD *)(v74 + 40) = *(_QWORD *)(v73 + 2 * a2 + 16);
          *(_OWORD *)(v74 + 24) = v77;
        }
      }
      LODWORD(v8) = v8 + 1;
      v73 += 24;
      v74 += a4;
    }
    while (v5 > (int)v8);
  }
  return result;
}

uint64_t sub_1002689F0(uint64_t result, uint64_t a2, _OWORD *a3, uint64_t a4, int *a5)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  unint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD *v63;
  _OWORD *v64;
  unint64_t v65;
  __int128 v66;
  _OWORD *v67;
  __int128 v68;
  _OWORD *v69;
  __int128 v70;
  _OWORD *v71;
  __int128 v72;
  _OWORD *v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;
  _OWORD *v79;
  uint64_t v80;
  _OWORD *v81;
  unint64_t v82;
  _OWORD *v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  _OWORD *v90;
  unint64_t v91;
  __int128 v92;

  v5 = *a5;
  v6 = a5[1];
  v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v5 <= 0)
      return result;
    goto LABEL_19;
  }
  if ((int)v6 >= 4)
  {
    v8 = 0;
    v32 = (v6 - 4);
    v33 = 4 * a4;
    v34 = a2 + 96;
    v35 = 2 * a2 + 96;
    v36 = 3 * a2;
    v37 = (uint64_t)a3 + ((32 * v32) & 0x1FFFFFFF80) + 128;
    v38 = result + a2 * ((v32 & 0xFFFFFFFC) + 4) + 64;
    v39 = (_OWORD *)result;
    v40 = a3;
    do
    {
      v41 = 0;
      v42 = v39;
      v43 = v40;
      do
      {
        v44 = v42[1];
        *v43 = *v42;
        v43[1] = v44;
        v45 = *(_OWORD *)((char *)v42 + v34 - 80);
        v43[2] = *(_OWORD *)((char *)v42 + a2);
        v43[3] = v45;
        v46 = *(_OWORD *)((char *)v42 + v35 - 80);
        v43[4] = *(_OWORD *)((char *)v42 + 2 * a2);
        v43[5] = v46;
        v47 = *(_OWORD *)((char *)v42 + v36 + 16);
        v43[6] = *(_OWORD *)((char *)v42 + 3 * a2);
        v43[7] = v47;
        v48 = (_OWORD *)((char *)v43 + a4);
        v49 = v42[3];
        *v48 = v42[2];
        v48[1] = v49;
        v50 = *(_OWORD *)((char *)v42 + v34 - 48);
        v48[2] = *(_OWORD *)((char *)v42 + v34 - 64);
        v48[3] = v50;
        v51 = *(_OWORD *)((char *)v42 + v35 - 48);
        v48[4] = *(_OWORD *)((char *)v42 + v35 - 64);
        v48[5] = v51;
        v52 = *(_OWORD *)((char *)v42 + v36 + 48);
        v48[6] = *(_OWORD *)((char *)v42 + v36 + 32);
        v48[7] = v52;
        v53 = (_OWORD *)((char *)v43 + a4 + a4);
        v54 = v42[5];
        *v53 = v42[4];
        v53[1] = v54;
        v55 = *(_OWORD *)((char *)v42 + v34 - 16);
        v53[2] = *(_OWORD *)((char *)v42 + v34 - 32);
        v53[3] = v55;
        v56 = *(_OWORD *)((char *)v42 + v35 - 16);
        v53[4] = *(_OWORD *)((char *)v42 + v35 - 32);
        v53[5] = v56;
        v57 = *(_OWORD *)((char *)v42 + v36 + 80);
        v53[6] = *(_OWORD *)((char *)v42 + v36 + 64);
        v53[7] = v57;
        v58 = (_OWORD *)((char *)v53 + a4);
        v59 = v42[7];
        *v58 = v42[6];
        v58[1] = v59;
        v60 = *(_OWORD *)((char *)v42 + v34 + 16);
        v58[2] = *(_OWORD *)((char *)v42 + v34);
        v58[3] = v60;
        v61 = *(_OWORD *)((char *)v42 + v35 + 16);
        v58[4] = *(_OWORD *)((char *)v42 + v35);
        v58[5] = v61;
        v62 = *(_OWORD *)((char *)v42 + v36 + 112);
        v58[6] = *(_OWORD *)((char *)v42 + v36 + 96);
        v58[7] = v62;
        v41 += 4;
        v43 += 8;
        v42 = (_OWORD *)((char *)v42 + 4 * a2);
      }
      while (v41 <= v32);
      v63 = (_OWORD *)v38;
      v64 = (_OWORD *)v37;
      v65 = (v32 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v41)
      {
        do
        {
          v66 = *(v63 - 3);
          *v64 = *(v63 - 4);
          v64[1] = v66;
          v67 = (_OWORD *)((char *)v64 + a4);
          v68 = *(v63 - 1);
          *v67 = *(v63 - 2);
          v67[1] = v68;
          v69 = (_OWORD *)((char *)v64 + 2 * a4);
          v70 = v63[1];
          *v69 = *v63;
          v69[1] = v70;
          v71 = (_OWORD *)((char *)v64 + 3 * a4);
          v72 = v63[3];
          *v71 = v63[2];
          v71[1] = v72;
          ++v65;
          v64 += 2;
          v63 = (_OWORD *)((char *)v63 + a2);
        }
        while (v65 < v6);
      }
      v8 += 4;
      v40 = (_OWORD *)((char *)v40 + v33);
      v39 += 8;
      v37 += v33;
      v38 += 128;
    }
    while (v8 <= v7);
  }
  else
  {
    if ((int)v6 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v5)
        return result;
      goto LABEL_19;
    }
    v8 = 0;
    v9 = 2 * a2;
    v10 = a3 + 2;
    v11 = 2 * a4;
    v12 = 3 * a4;
    v13 = (_OWORD *)result;
    do
    {
      v14 = (_OWORD *)((char *)v10 + a4);
      v15 = (_OWORD *)((char *)v10 + v11);
      v16 = (_OWORD *)((char *)v10 + v12);
      v17 = v13[1];
      *(v10 - 2) = *v13;
      *(v10 - 1) = v17;
      v18 = v13[3];
      *(v14 - 2) = v13[2];
      *(v14 - 1) = v18;
      v19 = v13[5];
      *(v15 - 2) = v13[4];
      *(v15 - 1) = v19;
      v20 = v13[7];
      *(v16 - 2) = v13[6];
      *(v16 - 1) = v20;
      if ((_DWORD)v6 != 1)
      {
        v21 = *(_OWORD *)((char *)v13 + a2 + 16);
        *v10 = *(_OWORD *)((char *)v13 + a2);
        v10[1] = v21;
        v22 = *(_OWORD *)((char *)v13 + a2 + 48);
        *v14 = *(_OWORD *)((char *)v13 + a2 + 32);
        v14[1] = v22;
        v23 = *(_OWORD *)((char *)v13 + a2 + 80);
        *v15 = *(_OWORD *)((char *)v13 + a2 + 64);
        v15[1] = v23;
        v24 = *(_OWORD *)((char *)v13 + a2 + 112);
        *v16 = *(_OWORD *)((char *)v13 + a2 + 96);
        v16[1] = v24;
        if ((_DWORD)v6 != 2)
        {
          v25 = *(_OWORD *)((char *)v13 + v9 + 16);
          v10[2] = *(_OWORD *)((char *)v13 + 2 * a2);
          v10[3] = v25;
          v26 = (char *)v10 + a4;
          v27 = *(_OWORD *)((char *)v13 + v9 + 48);
          *((_OWORD *)v26 + 2) = *(_OWORD *)((char *)v13 + v9 + 32);
          *((_OWORD *)v26 + 3) = v27;
          v28 = (char *)v10 + v11;
          v29 = *(_OWORD *)((char *)v13 + v9 + 80);
          *((_OWORD *)v28 + 2) = *(_OWORD *)((char *)v13 + v9 + 64);
          *((_OWORD *)v28 + 3) = v29;
          v30 = (char *)v10 + v12;
          v31 = *(_OWORD *)((char *)v13 + v9 + 112);
          *((_OWORD *)v30 + 2) = *(_OWORD *)((char *)v13 + v9 + 96);
          *((_OWORD *)v30 + 3) = v31;
        }
      }
      v8 += 4;
      v10 = (_OWORD *)((char *)v10 + 4 * a4);
      v13 += 8;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v5)
    return result;
LABEL_19:
  if ((int)v6 >= 4)
  {
    v78 = (v6 - 4);
    v8 = v8;
    v79 = (_OWORD *)(result + 32 * v8);
    v80 = (uint64_t)a3 + a4 * v8;
    v81 = (_OWORD *)(v80 + 64);
    result = v80 + ((32 * v78) & 0x1FFFFFFF80) + 128;
    do
    {
      v82 = 0;
      v83 = v81;
      v84 = v79;
      do
      {
        v85 = v84[1];
        *(v83 - 4) = *v84;
        *(v83 - 3) = v85;
        v86 = *(_OWORD *)((char *)v84 + a2 + 16);
        *(v83 - 2) = *(_OWORD *)((char *)v84 + a2);
        *(v83 - 1) = v86;
        v87 = *(_OWORD *)((char *)v84 + 2 * a2 + 16);
        *v83 = *(_OWORD *)((char *)v84 + 2 * a2);
        v83[1] = v87;
        v88 = *(_OWORD *)((char *)v84 + 3 * a2 + 16);
        v83[2] = *(_OWORD *)((char *)v84 + 3 * a2);
        v83[3] = v88;
        v82 += 4;
        v84 = (_OWORD *)((char *)v84 + 4 * a2);
        v83 += 8;
      }
      while (v82 <= v78);
      v89 = a2 * ((v78 & 0xFFFFFFFC) + 4);
      v90 = (_OWORD *)result;
      v91 = (v78 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v82)
      {
        do
        {
          v92 = *(_OWORD *)((char *)v79 + v89 + 16);
          *v90 = *(_OWORD *)((char *)v79 + v89);
          v90[1] = v92;
          v90 += 2;
          ++v91;
          v89 += a2;
        }
        while (v91 < v6);
      }
      ++v8;
      v79 += 2;
      v81 = (_OWORD *)((char *)v81 + a4);
      result += a4;
    }
    while (v5 > (int)v8);
  }
  else if ((int)v6 >= 1)
  {
    v73 = (_OWORD *)(result + 32 * v8);
    v74 = (_OWORD *)((char *)a3 + a4 * v8 + 64);
    do
    {
      v75 = v73[1];
      *(v74 - 4) = *v73;
      *(v74 - 3) = v75;
      if ((_DWORD)v6 != 1)
      {
        v76 = *(_OWORD *)((char *)v73 + a2 + 16);
        *(v74 - 2) = *(_OWORD *)((char *)v73 + a2);
        *(v74 - 1) = v76;
        if ((_DWORD)v6 != 2)
        {
          v77 = *(_OWORD *)((char *)v73 + 2 * a2 + 16);
          *v74 = *(_OWORD *)((char *)v73 + 2 * a2);
          v74[1] = v77;
        }
      }
      LODWORD(v8) = v8 + 1;
      v73 += 2;
      v74 = (_OWORD *)((char *)v74 + a4);
    }
    while (v5 > (int)v8);
  }
  return result;
}

void sub_100268DF0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *__p;
  _BYTE v20[24];
  uint64_t *v21;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 5) >= a2)
  {
    if (a2)
    {
      v12 = v6 + 96 * a2;
      do
      {
        *(_DWORD *)v6 = 1124007936;
        *(_OWORD *)(v6 + 4) = 0uLL;
        *(_OWORD *)(v6 + 20) = 0uLL;
        *(_OWORD *)(v6 + 36) = 0uLL;
        *(_OWORD *)(v6 + 48) = 0uLL;
        *(_QWORD *)(v6 + 80) = 0;
        *(_QWORD *)(v6 + 64) = v6 + 8;
        *(_QWORD *)(v6 + 72) = v6 + 80;
        *(_QWORD *)(v6 + 88) = 0;
        v6 += 96;
      }
      while (v6 != v12);
      v6 = v12;
    }
    a1[1] = v6;
  }
  else
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 5);
    v8 = v7 + a2;
    if (v7 + a2 > 0x2AAAAAAAAAAAAAALL)
      sub_100008F3C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 5);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x155555555555555)
      v10 = 0x2AAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v21 = a1 + 2;
    if (v10)
    {
      if (v10 > 0x2AAAAAAAAAAAAAALL)
        sub_100008FF8();
      v11 = (char *)operator new(96 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (uint64_t)&v11[96 * v7];
    __p = v11;
    *(_QWORD *)v20 = v13;
    *(_QWORD *)&v20[16] = &v11[96 * v10];
    v14 = v13;
    do
    {
      *(_DWORD *)v14 = 1124007936;
      *(_OWORD *)(v14 + 4) = 0uLL;
      *(_OWORD *)(v14 + 20) = 0uLL;
      *(_OWORD *)(v14 + 36) = 0uLL;
      *(_OWORD *)(v14 + 48) = 0uLL;
      *(_QWORD *)(v14 + 80) = 0;
      *(_QWORD *)(v14 + 64) = v14 + 8;
      *(_QWORD *)(v14 + 72) = v14 + 80;
      *(_QWORD *)(v14 + 88) = 0;
      v14 += 96;
    }
    while (v14 != v13 + 96 * a2);
    *(_QWORD *)&v20[8] = v13 + 96 * a2;
    sub_100269028(v5, a1[1], a1[1], *a1, *a1, v13, v13);
    v15 = a1[2];
    v16 = *(_OWORD *)&v20[8];
    v17 = *(_OWORD *)a1;
    *a1 = v18;
    *(_OWORD *)v20 = v17;
    *(_OWORD *)(a1 + 1) = v16;
    *(_QWORD *)&v20[16] = v15;
    __p = (void *)v17;
    sub_1002692B8((uint64_t)&__p, v17);
    if (__p)
      operator delete(__p);
  }
}

void sub_100268FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100268FF4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100268FF4(uint64_t a1)
{
  sub_1002692B8(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100269028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;

  v18 = a6;
  v19 = a7;
  if (a3 != a5)
  {
    v8 = a3;
    do
    {
      v11 = *(_OWORD *)(v8 - 96);
      v12 = *(_OWORD *)(v8 - 80);
      v8 -= 96;
      *(_OWORD *)(a7 - 80) = v12;
      *(_OWORD *)(a7 - 64) = *(_OWORD *)(v8 + 32);
      v14 = *(_QWORD *)(v8 + 48);
      v13 = *(_QWORD *)(v8 + 56);
      *(_QWORD *)(a7 - 16) = 0;
      *(_QWORD *)(a7 - 48) = v14;
      *(_QWORD *)(a7 - 40) = v13;
      *(_QWORD *)(a7 - 32) = a7 - 88;
      *(_QWORD *)(a7 - 24) = a7 - 16;
      *(_QWORD *)(a7 - 8) = 0;
      *(_OWORD *)(a7 - 96) = v11;
      if (v13)
      {
        v15 = (unsigned int *)(v13 + 20);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      if (*(int *)(a3 - 92) <= 2)
      {
        v9 = *(_QWORD **)(a3 - 24);
        v10 = *(_QWORD **)(a7 - 24);
        *v10 = *v9;
        v10[1] = v9[1];
      }
      else
      {
        *(_DWORD *)(a7 - 92) = 0;
        sub_100256B48(a7 - 96, v8);
      }
      a7 = v19 - 96;
      v19 -= 96;
      a3 = v8;
    }
    while (v8 != a5);
    return v18;
  }
  return a6;
}

void sub_10026911C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100269130((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100269130(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    v3 = v2[1];
    v16 = v4;
    v17 = v3;
    v18 = v4;
    v19 = v3;
    v5 = *(_QWORD *)a1;
    v6 = *(uint64_t **)(a1 + 8);
    v8 = *v6;
    v7 = v6[1];
    v11 = v8;
    v12 = v7;
    v13 = v8;
    v14 = v7;
    sub_1002691C4(v5, (uint64_t)v15, (uint64_t)v10);
  }
  return a1;
}

void sub_1002691B8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_100008C88(a1);
}

void sub_1002691C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v6 = *(_QWORD *)(i + 56);
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 20);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v10 = *(_QWORD *)(i + 56);
        if (v10)
        {
          *(_QWORD *)(i + 56) = 0;
          v11 = *(_QWORD *)(v10 + 8);
          if (!v11)
          {
            v11 = *(_QWORD *)(i + 48);
            if (!v11)
              v11 = sub_100255D20();
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, v10);
        }
      }
    }
    *(_QWORD *)(i + 56) = 0;
    *(_OWORD *)(i + 16) = 0u;
    *(_OWORD *)(i + 32) = 0u;
    if (*(int *)(i + 4) >= 1)
    {
      v12 = 0;
      v13 = *(_QWORD *)(i + 64);
      do
        *(_DWORD *)(v13 + 4 * v12++) = 0;
      while (v12 < *(int *)(i + 4));
    }
    v14 = *(void **)(i + 72);
    if (v14 != (void *)(i + 80))
      j__free(v14);
    i = *(_QWORD *)(a2 + 32) + 96;
  }
}

void sub_1002692B8(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    v5 = *(_QWORD *)(i - 40);
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 20);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        v9 = *(_QWORD *)(i - 40);
        if (v9)
        {
          *(_QWORD *)(i - 40) = 0;
          v10 = *(_QWORD *)(v9 + 8);
          if (!v10)
          {
            v10 = *(_QWORD *)(i - 48);
            if (!v10)
              v10 = sub_100255D20();
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v9);
        }
      }
    }
    *(_QWORD *)(i - 40) = 0;
    *(_OWORD *)(i - 80) = 0u;
    *(_OWORD *)(i - 64) = 0u;
    if (*(int *)(i - 92) >= 1)
    {
      v11 = 0;
      v12 = *(_QWORD *)(i - 32);
      do
        *(_DWORD *)(v12 + 4 * v11++) = 0;
      while (v11 < *(int *)(i - 92));
    }
    v13 = *(void **)(i - 24);
    if (v13 != (void *)(i - 16))
      j__free(v13);
  }
}

void sub_1002693A4(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 96)
  {
    v5 = *(_QWORD *)(i - 40);
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 20);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        v9 = *(_QWORD *)(i - 40);
        if (v9)
        {
          *(_QWORD *)(i - 40) = 0;
          v10 = *(_QWORD *)(v9 + 8);
          if (!v10)
          {
            v10 = *(_QWORD *)(i - 48);
            if (!v10)
              v10 = sub_100255D20();
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v9);
        }
      }
    }
    *(_QWORD *)(i - 40) = 0;
    *(_OWORD *)(i - 80) = 0u;
    *(_OWORD *)(i - 64) = 0u;
    if (*(int *)(i - 92) >= 1)
    {
      v11 = 0;
      v12 = *(_QWORD *)(i - 32);
      do
        *(_DWORD *)(v12 + 4 * v11++) = 0;
      while (v11 < *(int *)(i - 92));
    }
    v13 = *(void **)(i - 24);
    if (v13 != (void *)(i - 16))
      j__free(v13);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_100269488(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *i;
  char *v15;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v4 = a1[2];
  v5 = a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v11 = v5 + 80 * a2;
      do
      {
        *(_DWORD *)v5 = 1124007936;
        *(_QWORD *)(v5 + 32) = 0;
        *(_QWORD *)(v5 + 40) = 0;
        *(_QWORD *)(v5 + 4) = 0;
        *(_QWORD *)(v5 + 20) = 0;
        *(_QWORD *)(v5 + 12) = 0;
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 48) = v5 + 8;
        *(_QWORD *)(v5 + 56) = v5 + 64;
        *(_QWORD *)(v5 + 72) = 0;
        v5 += 80;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
    v7 = v6 + a2;
    if (v6 + a2 > 0x333333333333333)
      sub_100008F3C();
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x199999999999999)
      v9 = 0x333333333333333;
    else
      v9 = v7;
    v20 = a1 + 2;
    if (v9)
    {
      if (v9 > 0x333333333333333)
        sub_100008FF8();
      v10 = (char *)operator new(80 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[80 * v6];
    __p = v10;
    v17 = v12;
    v19 = &v10[80 * v9];
    v13 = &v12[80 * a2];
    do
    {
      *(_DWORD *)v12 = 1124007936;
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 5) = 0;
      *(_QWORD *)(v12 + 4) = 0;
      *(_QWORD *)(v12 + 20) = 0;
      *(_QWORD *)(v12 + 12) = 0;
      *((_QWORD *)v12 + 8) = 0;
      *((_QWORD *)v12 + 6) = v12 + 8;
      *((_QWORD *)v12 + 7) = v12 + 64;
      *((_QWORD *)v12 + 9) = 0;
      v12 += 80;
    }
    while (v12 != v13);
    v18 = v13;
    sub_100269660(a1, &__p);
    v15 = v17;
    for (i = v18; v18 != v15; i = v18)
    {
      v18 = i - 80;
      sub_10029B66C((uint64_t)(i - 80));
    }
    if (__p)
      operator delete(__p);
  }
}

void sub_10026964C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002697B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100269660(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a1;
  v4 = a1[1];
  if (v4 == *a1)
  {
    v16 = a2[1];
  }
  else
  {
    v6 = 0;
    v7 = a2[1];
    v8 = a1[1];
    do
    {
      v11 = *(_OWORD *)(v8 - 80);
      v8 -= 80;
      v12 = *(_QWORD *)(v8 + 16);
      v13 = *(_DWORD *)(v8 + 24);
      v14 = *(_QWORD *)(v8 + 32);
      v15 = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 64) = v12;
      *(_DWORD *)(v7 - 56) = v13;
      *(_QWORD *)(v7 - 48) = v14;
      *(_QWORD *)(v7 - 40) = v15;
      *(_QWORD *)(v7 - 32) = v7 - 72;
      *(_QWORD *)(v7 - 24) = v7 - 16;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 80) = v11;
      v16 = v7 - 80;
      if (v14)
      {
        v17 = (unsigned int *)(v14 + 16);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
      }
      if (*(int *)(v4 - 76) <= 2)
      {
        v9 = *(_QWORD **)(v4 - 24);
        v10 = *(_QWORD **)(v7 - 24);
        *v10 = *v9;
        v10[1] = v9[1];
      }
      else
      {
        *(_DWORD *)(v7 - 76) = 0;
        sub_10029BD28(v7 - 80, v8);
      }
      v6 -= 80;
      v4 = v8;
      v7 -= 80;
    }
    while (v8 != v5);
  }
  a2[1] = v16;
  v19 = *a1;
  *a1 = v16;
  a2[1] = v19;
  v20 = a1[1];
  a1[1] = a2[2];
  a2[2] = v20;
  v21 = a1[2];
  a1[2] = a2[3];
  a2[3] = v21;
  *a2 = a2[1];
}

uint64_t sub_1002697B0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    sub_10029B66C(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100269800(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_100008F3C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_100008FF8();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_24:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v19 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v19)
      {
        v20 = v5;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v5 - 2) = v21;
            operator delete(v21);
          }
          v5 = v20;
        }
        while (v20 != v19);
        v5 = v19;
      }
      if (v5)
        goto LABEL_24;
    }
  }
}

void sub_1002699F4(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  const char *v21;
  char *v22;
  unint64_t v23;
  char v24;
  int8x16x2_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      v6 = &v5[2 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = (v8 >> 1) + a2;
    if (v9 < 0)
      sub_100008F3C();
    v10 = v4 - (_QWORD)v7;
    if (v10 > v9)
      v9 = v10;
    if (v10 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 < 0)
        sub_100008FF8();
      v12 = (char *)operator new(2 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[2 * (v8 >> 1)];
    v14 = 2 * a2;
    v15 = &v12[2 * v11];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v7)
    {
      v17 = v5 - v7 - 2;
      if (v17 < 0x1E
        || &v12[v8 - (v17 & 0xFFFFFFFFFFFFFFFELL) - 2] < v5 && &v5[-(v17 & 0xFFFFFFFFFFFFFFFELL) - 2] < v13)
      {
        goto LABEL_22;
      }
      v18 = (v17 >> 1) + 1;
      v19 = 2 * (v18 & 0xFFFFFFFFFFFFFFF0);
      v6 = &v5[-v19];
      v20 = &v13[-v19];
      v21 = v5 - 32;
      v22 = v13 - 32;
      v23 = v18 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v25 = vld2q_s8(v21);
        v21 -= 32;
        vst2q_s8(v22, v25);
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      v13 = v20;
      if (v18 != (v18 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_22:
        v20 = v13;
        do
        {
          v24 = *(v6 - 2);
          v6 -= 2;
          *(v20 - 2) = v24;
          v20 -= 2;
          v20[1] = v6[1];
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
      v13 = v20;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v6)
      operator delete(v6);
  }
}

void sub_100269BB0(unint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  int8x16x3_t v27;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * (v4 - (_QWORD)v5) >= a2)
  {
    if (a2)
    {
      v13 = 3 * ((3 * a2 - 3) / 3) + 3;
      bzero(v5, v13);
      v6 = &v5[v13];
    }
    a1[1] = (unint64_t)v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = &v5[-*a1];
    v9 = 0xAAAAAAAAAAAAAAABLL * (_QWORD)v8 + a2;
    if (v9 >= 0x5555555555555556)
      sub_100008F3C();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v4 - (_QWORD)v7);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAAALL)
      v11 = 0x5555555555555555;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >= 0x5555555555555556)
        sub_100008FF8();
      v12 = operator new(3 * v11);
    }
    else
    {
      v12 = 0;
    }
    v14 = (unint64_t)&v8[(_QWORD)v12];
    v15 = (char *)v12 + 3 * v11;
    v16 = 3 * ((3 * a2 - 3) / 3) + 3;
    bzero(&v8[(_QWORD)v12], v16);
    if (v5 != v7)
    {
      v17 = v5 - v7 - 3;
      if (v17 < 0x2D)
        goto LABEL_25;
      v18 = v17 / 3;
      if (&v8[(_QWORD)v12 - 3 + -3 * v18] < v5 && (unint64_t)&v5[-3 * v18 - 3] < v14)
        goto LABEL_25;
      v20 = v18 + 1;
      v21 = (v18 + 1) & 0x7FFFFFFFFFFFFFF0;
      v6 = &v5[-3 * v21];
      v22 = v14 - 3 * v21;
      v23 = v5 - 48;
      v24 = (char *)(v14 - 48);
      v25 = v21;
      do
      {
        v27 = vld3q_s8(v23);
        vst3q_s8(v24, v27);
        v24 -= 48;
        v23 -= 48;
        v25 -= 16;
      }
      while (v25);
      v14 -= 3 * v21;
      if (v20 != v21)
      {
LABEL_25:
        v22 = v14;
        do
        {
          v26 = *(v6 - 3);
          v6 -= 3;
          *(_BYTE *)(v22 - 3) = v26;
          v22 -= 3;
          *(_BYTE *)(v22 + 1) = v6[1];
          *(_BYTE *)(v22 + 2) = v6[2];
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
      v14 = v22;
    }
    *a1 = v14;
    a1[1] = (unint64_t)&v8[(_QWORD)v12 + v16];
    a1[2] = (unint64_t)v15;
    if (v6)
      operator delete(v6);
  }
}

void sub_100269DE4(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  const __int16 *v24;
  __int16 *v25;
  uint64_t v26;
  __int16 v27;
  int16x8x3_t v28;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 1) >= a2)
  {
    if (a2)
    {
      v13 = 6 * ((6 * a2 - 6) / 6) + 6;
      bzero(v5, v13);
      v6 = &v5[v13];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 1) + a2;
    if (v9 > 0x2AAAAAAAAAAAAAAALL)
      sub_100008F3C();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v7) >> 1);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x1555555555555555)
      v11 = 0x2AAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x2AAAAAAAAAAAAAAALL)
        sub_100008FF8();
      v12 = (char *)operator new(6 * v11);
    }
    else
    {
      v12 = 0;
    }
    v14 = &v12[2 * (v8 >> 1)];
    v15 = &v12[6 * v11];
    v16 = 6 * ((6 * a2 - 6) / 6) + 6;
    bzero(v14, v16);
    v17 = &v14[v16];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v15;
      if (v7)
LABEL_28:
        operator delete(v7);
    }
    else
    {
      v18 = v5 - v7 - 6;
      if (v18 < 0x5A)
        goto LABEL_25;
      v19 = v18 / 6;
      if (&v12[v8 - 6 * v19 - 6] < v5 && &v5[-6 * v19 - 6] < v14)
        goto LABEL_25;
      v21 = v19 + 1;
      v22 = (v19 + 1) & 0x7FFFFFFFFFFFFFF8;
      v6 = &v5[-6 * v22];
      v23 = &v14[-6 * v22];
      v24 = (const __int16 *)(v5 - 48);
      v25 = (__int16 *)(v14 - 48);
      v26 = v22;
      do
      {
        v28 = vld3q_s16(v24);
        vst3q_s16(v25, v28);
        v25 -= 24;
        v24 -= 24;
        v26 -= 8;
      }
      while (v26);
      v14 -= 6 * v22;
      if (v21 != v22)
      {
LABEL_25:
        v23 = v14;
        do
        {
          v27 = *((_WORD *)v6 - 3);
          v6 -= 6;
          *((_WORD *)v23 - 3) = v27;
          v23 -= 6;
          *((_WORD *)v23 + 1) = *((_WORD *)v6 + 1);
          *((_WORD *)v23 + 2) = *((_WORD *)v6 + 2);
        }
        while (v6 != v7);
      }
      *a1 = v23;
      a1[1] = v17;
      a1[2] = v15;
      if (v7)
        goto LABEL_28;
    }
  }
}

void sub_10026A02C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const float *v21;
  float *v22;
  uint64_t v23;
  int v24;
  float32x4x2_t v25;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = (v8 >> 3) + a2;
    if (v9 >> 61)
      sub_100008F3C();
    v10 = v4 - v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_100008FF8();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * (v8 >> 3)];
    v14 = 8 * a2;
    v15 = &v12[8 * v11];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 == v7)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v15;
      if (v7)
LABEL_25:
        operator delete(v7);
    }
    else
    {
      v17 = v5 - v7 - 8;
      if (v17 < 0x78
        || &v12[v8 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v5 && &v5[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v13)
      {
        goto LABEL_22;
      }
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v19];
      v20 = &v13[-v19];
      v21 = (const float *)(v5 - 32);
      v22 = (float *)(v13 - 32);
      v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = vld2q_f32(v21);
        v21 -= 8;
        vst2q_f32(v22, v25);
        v22 -= 8;
        v23 -= 4;
      }
      while (v23);
      v13 = v20;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_22:
        v20 = v13;
        do
        {
          v24 = *((_DWORD *)v6 - 2);
          v6 -= 8;
          *((_DWORD *)v20 - 2) = v24;
          v20 -= 8;
          *((_DWORD *)v20 + 1) = *((_DWORD *)v6 + 1);
        }
        while (v6 != v7);
      }
      *a1 = v20;
      a1[1] = v16;
      a1[2] = v15;
      if (v7)
        goto LABEL_25;
    }
  }
}

void sub_10026A1FC(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  const float *v24;
  float *v25;
  uint64_t v26;
  int v27;
  float32x4x3_t v28;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(v5, v13);
      v6 = &v5[v13];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2) + a2;
    if (v9 > 0x1555555555555555)
      sub_100008F3C();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v7) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x1555555555555555)
        sub_100008FF8();
      v12 = (char *)operator new(12 * v11);
    }
    else
    {
      v12 = 0;
    }
    v14 = &v12[4 * (v8 >> 2)];
    v15 = &v12[12 * v11];
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = &v14[v16];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v15;
      if (v7)
LABEL_28:
        operator delete(v7);
    }
    else
    {
      v18 = v5 - v7 - 12;
      if (v18 < 0xB4)
        goto LABEL_25;
      v19 = v18 / 0xC;
      if (&v12[v8 - 12 * v19 - 12] < v5 && &v5[-12 * v19 - 12] < v14)
        goto LABEL_25;
      v21 = v19 + 1;
      v22 = (v19 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v6 = &v5[-12 * v22];
      v23 = &v14[-12 * v22];
      v24 = (const float *)(v5 - 48);
      v25 = (float *)(v14 - 48);
      v26 = v22;
      do
      {
        v28 = vld3q_f32(v24);
        vst3q_f32(v25, v28);
        v25 -= 12;
        v24 -= 12;
        v26 -= 4;
      }
      while (v26);
      v14 -= 12 * v22;
      if (v21 != v22)
      {
LABEL_25:
        v23 = v14;
        do
        {
          v27 = *((_DWORD *)v6 - 3);
          v6 -= 12;
          *((_DWORD *)v23 - 3) = v27;
          v23 -= 12;
          *((_DWORD *)v23 + 1) = *((_DWORD *)v6 + 1);
          *((_DWORD *)v23 + 2) = *((_DWORD *)v6 + 2);
        }
        while (v6 != v7);
      }
      *a1 = v23;
      a1[1] = v17;
      a1[2] = v15;
      if (v7)
        goto LABEL_28;
    }
  }
}

void sub_10026A444(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const float *v21;
  float *v22;
  uint64_t v23;
  int v24;
  float32x4x4_t v25;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      bzero(v5, 16 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(_DWORD **)a1;
    v8 = (uint64_t)v5 - *(_QWORD *)a1;
    v9 = (v8 >> 4) + a2;
    if (v9 >> 60)
      sub_100008F3C();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        sub_100008FF8();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * (v8 >> 4)];
    v14 = 16 * a2;
    v15 = &v12[16 * v11];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 == v7)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      if (v7)
LABEL_25:
        operator delete(v7);
    }
    else
    {
      v17 = (char *)v5 - (char *)v7 - 16;
      if (v17 < 0x70
        || &v12[v8 - (v17 & 0xFFFFFFFFFFFFFFF0) - 16] < (char *)v5
        && (char *)v5 - (v17 & 0xFFFFFFFFFFFFFFF0) - 16 < v13)
      {
        goto LABEL_22;
      }
      v18 = (v17 >> 4) + 1;
      v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
      v6 = &v5[v19 / 0xFFFFFFFFFFFFFFFCLL];
      v20 = &v13[-v19];
      v21 = (const float *)(v5 - 16);
      v22 = (float *)(v13 - 64);
      v23 = v18 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = vld4q_f32(v21);
        vst4q_f32(v22, v25);
        v22 -= 16;
        v21 -= 16;
        v23 -= 4;
      }
      while (v23);
      v13 = v20;
      if (v18 != (v18 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_22:
        v20 = v13;
        do
        {
          v24 = *(v6 - 4);
          v6 -= 4;
          *((_DWORD *)v20 - 4) = v24;
          v20 -= 16;
          *((_DWORD *)v20 + 1) = v6[1];
          *((_DWORD *)v20 + 2) = v6[2];
          *((_DWORD *)v20 + 3) = v6[3];
        }
        while (v6 != v7);
      }
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      if (v7)
        goto LABEL_25;
    }
  }
}

void sub_10026A624(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *i;
  int v17;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_100008F3C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_100008FF8();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    for (i = &v13[v15]; v5 != v6; *((_DWORD *)v13 + 5) = v5[5])
    {
      v17 = *(v5 - 6);
      v5 -= 6;
      *((_DWORD *)v13 - 6) = v17;
      v13 -= 24;
      *((_DWORD *)v13 + 1) = v5[1];
      *((_DWORD *)v13 + 2) = v5[2];
      *((_DWORD *)v13 + 3) = v5[3];
      *((_DWORD *)v13 + 4) = v5[4];
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = i;
    *(_QWORD *)(a1 + 16) = v14;
    if (v6)
      operator delete(v6);
  }
}

void sub_10026A7D0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  size_t v13;
  char *v14;
  char *i;
  int v16;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 32 * a2);
      v5 += 8 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = ((uint64_t)v5 - *(_QWORD *)a1) >> 5;
    v8 = v7 + a2;
    if ((v7 + a2) >> 59)
      sub_100008F3C();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 59)
        sub_100008FF8();
      v11 = (char *)operator new(32 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[32 * v7];
    v13 = 32 * a2;
    v14 = &v11[32 * v10];
    bzero(v12, v13);
    for (i = &v12[v13]; v5 != v6; *((_DWORD *)v12 + 7) = v5[7])
    {
      v16 = *(v5 - 8);
      v5 -= 8;
      *((_DWORD *)v12 - 8) = v16;
      v12 -= 32;
      *((_DWORD *)v12 + 1) = v5[1];
      *((_DWORD *)v12 + 2) = v5[2];
      *((_DWORD *)v12 + 3) = v5[3];
      *((_DWORD *)v12 + 4) = v5[4];
      *((_DWORD *)v12 + 5) = v5[5];
      *((_DWORD *)v12 + 6) = v5[6];
    }
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = i;
    *(_QWORD *)(a1 + 16) = v14;
    if (v6)
      operator delete(v6);
  }
}

void sub_10026A920(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *i;
  int v17;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x8E38E38E38E38E39 * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 36 * ((36 * a2 - 36) / 0x24) + 36;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = 0x8E38E38E38E38E39 * (((uint64_t)v5 - *(_QWORD *)a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x71C71C71C71C71CLL)
      sub_100008F3C();
    v9 = 0x8E38E38E38E38E39 * ((v4 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x38E38E38E38E38ELL)
      v10 = 0x71C71C71C71C71CLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x71C71C71C71C71CLL)
        sub_100008FF8();
      v11 = (char *)operator new(36 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[36 * v7];
    v14 = &v11[36 * v10];
    v15 = 36 * ((36 * a2 - 36) / 0x24) + 36;
    bzero(v13, v15);
    for (i = &v13[v15]; v5 != v6; *((_DWORD *)v13 + 8) = v5[8])
    {
      v17 = *(v5 - 9);
      v5 -= 9;
      *((_DWORD *)v13 - 9) = v17;
      v13 -= 36;
      *((_DWORD *)v13 + 1) = v5[1];
      *((_DWORD *)v13 + 2) = v5[2];
      *((_DWORD *)v13 + 3) = v5[3];
      *((_DWORD *)v13 + 4) = v5[4];
      *((_DWORD *)v13 + 5) = v5[5];
      *((_DWORD *)v13 + 6) = v5[6];
      *((_DWORD *)v13 + 7) = v5[7];
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = i;
    *(_QWORD *)(a1 + 16) = v14;
    if (v6)
      operator delete(v6);
  }
}

void sub_10026AB18(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *i;
  int v17;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555)
      sub_100008F3C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x555555555555555)
        sub_100008FF8();
      v11 = (char *)operator new(48 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[48 * v7];
    v14 = &v11[48 * v10];
    v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    for (i = &v13[v15]; v5 != v6; *((_DWORD *)v13 + 11) = v5[11])
    {
      v17 = *(v5 - 12);
      v5 -= 12;
      *((_DWORD *)v13 - 12) = v17;
      v13 -= 48;
      *((_DWORD *)v13 + 1) = v5[1];
      *((_DWORD *)v13 + 2) = v5[2];
      *((_DWORD *)v13 + 3) = v5[3];
      *((_DWORD *)v13 + 4) = v5[4];
      *((_DWORD *)v13 + 5) = v5[5];
      *((_DWORD *)v13 + 6) = v5[6];
      *((_DWORD *)v13 + 7) = v5[7];
      *((_DWORD *)v13 + 8) = v5[8];
      *((_DWORD *)v13 + 9) = v5[9];
      *((_DWORD *)v13 + 10) = v5[10];
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = i;
    *(_QWORD *)(a1 + 16) = v14;
    if (v6)
      operator delete(v6);
  }
}

void sub_10026ACF4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  size_t v13;
  char *v14;
  char *i;
  int v16;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2 << 6);
      v5 += 16 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = ((uint64_t)v5 - *(_QWORD *)a1) >> 6;
    v8 = v7 + a2;
    if ((v7 + a2) >> 58)
      sub_100008F3C();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 5 > v8)
      v8 = v9 >> 5;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0)
      v10 = 0x3FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 58)
        sub_100008FF8();
      v11 = (char *)operator new(v10 << 6);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[64 * v7];
    v13 = a2 << 6;
    v14 = &v11[64 * v10];
    bzero(v12, v13);
    for (i = &v12[v13]; v5 != v6; *((_DWORD *)v12 + 15) = v5[15])
    {
      v16 = *(v5 - 16);
      v5 -= 16;
      *((_DWORD *)v12 - 16) = v16;
      v12 -= 64;
      *((_DWORD *)v12 + 1) = v5[1];
      *((_DWORD *)v12 + 2) = v5[2];
      *((_DWORD *)v12 + 3) = v5[3];
      *((_DWORD *)v12 + 4) = v5[4];
      *((_DWORD *)v12 + 5) = v5[5];
      *((_DWORD *)v12 + 6) = v5[6];
      *((_DWORD *)v12 + 7) = v5[7];
      *((_DWORD *)v12 + 8) = v5[8];
      *((_DWORD *)v12 + 9) = v5[9];
      *((_DWORD *)v12 + 10) = v5[10];
      *((_DWORD *)v12 + 11) = v5[11];
      *((_DWORD *)v12 + 12) = v5[12];
      *((_DWORD *)v12 + 13) = v5[13];
      *((_DWORD *)v12 + 14) = v5[14];
    }
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = i;
    *(_QWORD *)(a1 + 16) = v14;
    if (v6)
      operator delete(v6);
  }
}

void sub_10026AE84(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  _DWORD *v15;
  uint64_t v16;

  v5 = a1 + 16;
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if (a2 <= (v4 - (uint64_t)v6) >> 7)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2 << 7);
      v6 += 32 * a2;
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(_DWORD **)a1;
    v8 = ((uint64_t)v6 - *(_QWORD *)a1) >> 7;
    v9 = v8 + a2;
    if ((v8 + a2) >> 57)
      sub_100008F3C();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 6 > v9)
      v9 = v10 >> 6;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFF80)
      v11 = 0x1FFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 57)
        sub_100008FF8();
      v12 = (char *)operator new(v11 << 7);
    }
    else
    {
      v12 = 0;
    }
    v13 = a2 << 7;
    v14 = &v12[128 * v8];
    bzero(v14, v13);
    sub_10026AFD4(v5, (uint64_t)v6, v6, (uint64_t)v7, v7, (uint64_t)v14, (uint64_t)v14);
    v15 = *(_DWORD **)a1;
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = &v14[v13];
    *(_QWORD *)(a1 + 16) = &v12[128 * v11];
    if (v15)
      operator delete(v15);
  }
}

void sub_10026AFBC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10026AFD4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  _DWORD *v9;
  int v10;

  v7 = a7;
  result = a6;
  if (a3 != a5)
  {
    v9 = (_DWORD *)(a7 - 64);
    do
    {
      v10 = *(a3 - 32);
      a3 -= 32;
      *(v9 - 16) = v10;
      *(v9 - 15) = a3[1];
      *(v9 - 14) = a3[2];
      *(v9 - 13) = a3[3];
      *(v9 - 12) = a3[4];
      *(v9 - 11) = a3[5];
      *(v9 - 10) = a3[6];
      *(v9 - 9) = a3[7];
      *(v9 - 8) = a3[8];
      *(v9 - 7) = a3[9];
      *(v9 - 6) = a3[10];
      *(v9 - 5) = a3[11];
      *(v9 - 4) = a3[12];
      *(v9 - 3) = a3[13];
      *(v9 - 2) = a3[14];
      *(v9 - 1) = a3[15];
      *v9 = a3[16];
      v9[1] = a3[17];
      v9[2] = a3[18];
      v9[3] = a3[19];
      v9[4] = a3[20];
      v9[5] = a3[21];
      v9[6] = a3[22];
      v9[7] = a3[23];
      v9[8] = a3[24];
      v9[9] = a3[25];
      v9[10] = a3[26];
      v9[11] = a3[27];
      v9[12] = a3[28];
      v9[13] = a3[29];
      v9[14] = a3[30];
      v9[15] = a3[31];
      v9 -= 32;
      v7 -= 128;
    }
    while (a3 != a5);
  }
  return result;
}

void sub_10026B0FC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 8)
  {
    if (a2)
    {
      v12 = a2 << 8;
      bzero(*(void **)(a1 + 8), a2 << 8);
      v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = ((uint64_t)v5 - *(_QWORD *)a1) >> 8;
    v8 = v7 + a2;
    if ((v7 + a2) >> 56)
      sub_100008F3C();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 7 > v8)
      v8 = v9 >> 7;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF00)
      v10 = 0xFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (HIBYTE(v10))
        sub_100008FF8();
      v11 = (char *)operator new(v10 << 8);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[256 * v7];
    v14 = a2 << 8;
    v15 = &v11[256 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v13 -= 256;
        v5 -= 64;
        sub_10026B224(v13, v5);
      }
      while (v5 != v6);
      v5 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (v5)
      operator delete(v5);
  }
}

_DWORD *sub_10026B224(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  result[3] = a2[3];
  result[4] = a2[4];
  result[5] = a2[5];
  result[6] = a2[6];
  result[7] = a2[7];
  result[8] = a2[8];
  result[9] = a2[9];
  result[10] = a2[10];
  result[11] = a2[11];
  result[12] = a2[12];
  result[13] = a2[13];
  result[14] = a2[14];
  result[15] = a2[15];
  result[16] = a2[16];
  result[17] = a2[17];
  result[18] = a2[18];
  result[19] = a2[19];
  result[20] = a2[20];
  result[21] = a2[21];
  result[22] = a2[22];
  result[23] = a2[23];
  result[24] = a2[24];
  result[25] = a2[25];
  result[26] = a2[26];
  result[27] = a2[27];
  result[28] = a2[28];
  result[29] = a2[29];
  result[30] = a2[30];
  result[31] = a2[31];
  result[32] = a2[32];
  result[33] = a2[33];
  result[34] = a2[34];
  result[35] = a2[35];
  result[36] = a2[36];
  result[37] = a2[37];
  result[38] = a2[38];
  result[39] = a2[39];
  result[40] = a2[40];
  result[41] = a2[41];
  result[42] = a2[42];
  result[43] = a2[43];
  result[44] = a2[44];
  result[45] = a2[45];
  result[46] = a2[46];
  result[47] = a2[47];
  result[48] = a2[48];
  result[49] = a2[49];
  result[50] = a2[50];
  result[51] = a2[51];
  result[52] = a2[52];
  result[53] = a2[53];
  result[54] = a2[54];
  result[55] = a2[55];
  result[56] = a2[56];
  result[57] = a2[57];
  result[58] = a2[58];
  result[59] = a2[59];
  result[60] = a2[60];
  result[61] = a2[61];
  result[62] = a2[62];
  result[63] = a2[63];
  return result;
}

void sub_10026B428(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  _OWORD *v35;
  uint64_t v36;

  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 9)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2 << 9);
      v5 += 512 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_OWORD **)a1;
    v7 = (uint64_t)&v5[-*(_QWORD *)a1];
    v8 = (v7 >> 9) + a2;
    if (v8 >> 55)
      sub_100008F3C();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 8 > v8)
      v8 = v9 >> 8;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFE00)
      v10 = 0x7FFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 55)
        sub_100008FF8();
      v11 = (char *)operator new(v10 << 9);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[512 * (v7 >> 9)];
    v13 = a2 << 9;
    v14 = &v11[512 * v10];
    bzero(v12, v13);
    v15 = &v12[v13];
    if (v5 == (_BYTE *)v6)
    {
      v34 = &v11[512 * (v7 >> 9)];
    }
    else
    {
      v16 = 0;
      v17 = &v11[v7] - v5;
      do
      {
        v34 = v12 - 512;
        v35 = v5 - 512;
        if (v17 > 0x1F)
        {
          v18 = *((_OWORD *)v5 - 31);
          *(_OWORD *)v34 = *v35;
          *((_OWORD *)v12 - 31) = v18;
          v19 = *((_OWORD *)v5 - 29);
          *((_OWORD *)v12 - 30) = *((_OWORD *)v5 - 30);
          *((_OWORD *)v12 - 29) = v19;
          v20 = *((_OWORD *)v5 - 27);
          *((_OWORD *)v12 - 28) = *((_OWORD *)v5 - 28);
          *((_OWORD *)v12 - 27) = v20;
          v21 = *((_OWORD *)v5 - 25);
          *((_OWORD *)v12 - 26) = *((_OWORD *)v5 - 26);
          *((_OWORD *)v12 - 25) = v21;
          v22 = *((_OWORD *)v5 - 23);
          *((_OWORD *)v12 - 24) = *((_OWORD *)v5 - 24);
          *((_OWORD *)v12 - 23) = v22;
          v23 = *((_OWORD *)v5 - 21);
          *((_OWORD *)v12 - 22) = *((_OWORD *)v5 - 22);
          *((_OWORD *)v12 - 21) = v23;
          v24 = *((_OWORD *)v5 - 19);
          *((_OWORD *)v12 - 20) = *((_OWORD *)v5 - 20);
          *((_OWORD *)v12 - 19) = v24;
          v25 = *((_OWORD *)v5 - 17);
          *((_OWORD *)v12 - 18) = *((_OWORD *)v5 - 18);
          *((_OWORD *)v12 - 17) = v25;
          v26 = *((_OWORD *)v5 - 15);
          *((_OWORD *)v12 - 16) = *((_OWORD *)v5 - 16);
          *((_OWORD *)v12 - 15) = v26;
          v27 = *((_OWORD *)v5 - 13);
          *((_OWORD *)v12 - 14) = *((_OWORD *)v5 - 14);
          *((_OWORD *)v12 - 13) = v27;
          v28 = *((_OWORD *)v5 - 11);
          *((_OWORD *)v12 - 12) = *((_OWORD *)v5 - 12);
          *((_OWORD *)v12 - 11) = v28;
          v29 = *((_OWORD *)v5 - 9);
          *((_OWORD *)v12 - 10) = *((_OWORD *)v5 - 10);
          *((_OWORD *)v12 - 9) = v29;
          v30 = *((_OWORD *)v5 - 7);
          *((_OWORD *)v12 - 8) = *((_OWORD *)v5 - 8);
          *((_OWORD *)v12 - 7) = v30;
          v31 = *((_OWORD *)v5 - 5);
          *((_OWORD *)v12 - 6) = *((_OWORD *)v5 - 6);
          *((_OWORD *)v12 - 5) = v31;
          v32 = *((_OWORD *)v5 - 3);
          *((_OWORD *)v12 - 4) = *((_OWORD *)v5 - 4);
          *((_OWORD *)v12 - 3) = v32;
          v33 = *((_OWORD *)v5 - 1);
          *((_OWORD *)v12 - 2) = *((_OWORD *)v5 - 2);
          *((_OWORD *)v12 - 1) = v33;
        }
        else
        {
          v36 = -512;
          do
          {
            *(_DWORD *)&v12[v36] = *(_DWORD *)&v5[v36];
            v36 += 4;
          }
          while (v36);
        }
        ++v16;
        v5 -= 512;
        v12 -= 512;
      }
      while (v35 != v6);
    }
    *(_QWORD *)a1 = v34;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v14;
    if (v6)
      operator delete(v6);
  }
}

void sub_10026B618(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_100008F3C();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_100008FF8();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_10026B7B4(uint64_t a1, int a2, uint64_t a3, char a4)
{
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a2 >= 0x21)
  {
    v19 = 0;
    v20 = 0;
    qmemcpy((void *)sub_10029430C(&v19, 25), "0 <= _dims && _dims <= 32", 25);
    sub_100294B74(-215, &v19, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 284);
  }
  if (*(_DWORD *)(a1 + 4) != a2)
  {
    v8 = *(void **)(a1 + 72);
    if (v8 != (void *)(a1 + 80))
    {
      j__free(v8);
      *(_QWORD *)(a1 + 64) = a1 + 8;
      *(_QWORD *)(a1 + 72) = a1 + 80;
    }
    if (a2 >= 3)
    {
      v9 = 8 * a2;
      v10 = (char *)sub_1001D444C(v9 + 4 * (a2 + 1));
      *(_QWORD *)(a1 + 72) = v10;
      *(_DWORD *)&v10[v9] = a2;
      *(_QWORD *)(a1 + 64) = &v10[v9 + 4];
      *(_QWORD *)(a1 + 8) = -1;
    }
  }
  *(_DWORD *)(a1 + 4) = a2;
  if (a3)
  {
    v11 = (a2 - 1);
    if (a2 >= 1)
    {
      v12 = (((*(_DWORD *)a1 >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * (*(_BYTE *)a1 & 7))) & 3);
      v18 = v12;
      if ((a4 & 1) != 0)
      {
        do
        {
          v14 = *(_DWORD *)(a3 + 4 * v11);
          if (v14 < 0)
          {
            v19 = 0;
            v20 = 0;
            v15 = sub_10029430C(&v19, 6);
            *(_DWORD *)v15 = 1027481715;
            *(_WORD *)(v15 + 4) = 12320;
            sub_100294B74(-215, &v19, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 310);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v11) = v14;
          *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v11) = v12;
          v12 *= v14;
          v13 = v11-- <= 0;
        }
        while (!v13);
      }
      else
      {
        do
        {
          v16 = *(_DWORD *)(a3 + 4 * v11);
          if (v16 < 0)
          {
            v19 = 0;
            v20 = 0;
            v17 = sub_10029430C(&v19, 6);
            *(_DWORD *)v17 = 1027481715;
            *(_WORD *)(v17 + 4) = 12320;
            sub_100294B74(-215, &v19, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 310);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v11) = v16;
          v13 = v11-- <= 0;
        }
        while (!v13);
      }
      if (a2 == 1)
      {
        *(_DWORD *)(a1 + 4) = 2;
        *(_DWORD *)(a1 + 12) = 1;
        *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) = v18;
      }
    }
  }
}

void sub_10026BA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10026BA48()
{
  dword_100497CA0 = 50331648;
  qword_100497CA8 = 0;
  unk_100497CB0 = 0;
}

uint64_t sub_10026BA60(uint64_t a1, unint64_t a2, unsigned int a3, __n128 *a4, unint64_t a5, unsigned int a6)
{
  double v12;
  double v13;
  __n128 v14;
  uint64_t v15;
  _BYTE v17[8];
  int v18;

  sub_100298C2C(v17, &off_10044E560);
  v15 = sub_10026BAF0(a1, a2, a3, a4, a5, a6, v12, v13, v14);
  if (v18)
    sub_1002989D0(v17);
  return v15;
}

uint64_t sub_10026BAF0(uint64_t a1, unint64_t a2, unsigned int a3, __n128 *a4, unint64_t a5, unsigned int a6, double a7, double a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 *v24;
  __n128 *v25;
  uint64_t v26;
  unint64_t v27;
  float *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __n128 *v38;
  __n128 *v39;
  __n128 v40;
  __n128 v41;
  int *v42;
  int *v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  __n128 *v47;
  uint64_t v48;
  __n128 *v49;
  __n128 v50;
  __n128 v51;
  uint64_t v52;
  int *v53;
  int *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  float v62;
  unint64_t v63;
  float32x4_t *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  float32x4_t v68;
  float32x4_t *v69;
  float32x4_t *v70;
  unint64_t v71;
  float32x4_t v72;
  float *v73;
  float *v74;
  unint64_t v75;
  float v76;
  uint64_t v77;
  float *v78;
  float *v79;
  uint64_t v80;
  float v81;
  unint64_t v82;
  float32x4_t v83;
  float32x4_t *v84;
  float32x4_t v85;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float *v106;
  uint64_t v107;
  float v108;
  float *v109;
  BOOL v110;
  const float *v111;
  float32x4_t v112;
  uint64_t v113;
  float32x4_t *v114;
  float32x4_t v115;
  uint64_t v116;
  float *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  __n128 *v126;
  float *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  float32x4_t *v141;
  unint64_t v143;
  uint64_t v144;

  if ((int)a3 < 1)
    return 1;
  v119 = a3 - 1;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2 >> 2;
  v13 = a5 >> 2;
  v14 = a3;
  if (a4)
    v15 = (int)a6 < 1;
  else
    v15 = 1;
  v16 = v15;
  v17 = 4 * a6;
  v140 = a5 & 0xFFFFFFFFFFFFFFFCLL;
  v122 = (a5 & 0xFFFFFFFFFFFFFFFCLL) + v17;
  v18 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v135 = v18 + 4;
  v19 = 4 * a3;
  v121 = v18 + v19;
  v125 = (uint64_t)a4 + v17;
  v144 = a6;
  v129 = a6 & 0xFFFFFFF8;
  v130 = v12;
  v20 = (float *)(a1 + v18);
  v21 = 4 * v13;
  v134 = a3 - 1;
  v141 = (float32x4_t *)(a1 + 20);
  v22 = v17 & 0x3FFFFFFE0;
  v132 = (uint64_t)&a4[1] + 4 * v13;
  v133 = a1 + 20 + v18;
  v23 = 1;
  v123 = a1 + v19;
  v131 = a5 >> 2;
  v24 = a4 + 1;
  v25 = (__n128 *)(a1 + 16);
  v26 = a3;
  v124 = 1;
  do
  {
    v27 = v11 + 1;
    if (v11 + 1 >= v14)
    {
      v30 = v11;
    }
    else
    {
      v28 = v20;
      v29 = v23;
      v30 = v11;
      do
      {
        if (fabsf(*v28) > fabsf(*(float *)(a1 + 4 * (v11 + v12 * v30))))
          v30 = v29;
        ++v29;
        v28 = (float *)((char *)v28 + v18);
      }
      while (v14 != v29);
    }
    v31 = v12 * v30;
    v32 = v31 + v11;
    if (fabsf(*(float *)(a1 + 4 * (v31 + v11))) < 0.0000011921)
      return 0;
    v126 = v25;
    v127 = v20;
    v33 = a1 + v135 * v11;
    v143 = v123 + v18 * v11;
    v34 = v140 * v11;
    v137 = (unint64_t)a4->n128_u64 + v140 * v11;
    v139 = v125 + v140 * v11;
    v128 = v11 + 1;
    if (v11 != v30)
    {
      v35 = v14 - v11;
      v36 = v11;
      if (v14 - v11 < 8)
        goto LABEL_25;
      if (v33 < a1 + 4 * v35 + 4 * v32)
      {
        v36 = v11;
        if (a1 + 4 * v32 < v143)
          goto LABEL_25;
      }
      v37 = v26 & 0xFFFFFFFFFFFFFFF8;
      v36 = v11 + (v35 & 0xFFFFFFFFFFFFFFF8);
      v38 = (__n128 *)(a1 + 16 + 4 * (v11 + v31));
      v39 = v25;
      do
      {
        v40 = v39[-1];
        a9 = *v39;
        v41 = *v38;
        v39[-1] = v38[-1];
        *v39 = v41;
        v38[-1] = v40;
        *v38 = a9;
        v39 += 2;
        v38 += 2;
        v37 -= 8;
      }
      while (v37);
      v27 = v11 + 1;
      if (v35 != (v35 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_25:
        v42 = (int *)(a1 + 4 * (v36 + v31));
        v43 = (int *)(a1 + 4 * (v36 + v10));
        v44 = v14 - v36;
        do
        {
          v45 = *v43;
          *v43++ = *v42;
          *v42++ = v45;
          --v44;
        }
        while (v44);
      }
      if ((v16 & 1) != 0)
        goto LABEL_41;
      if (a6 >= 8
        && (v137 < v125 + v140 * v30 ? (v46 = (unint64_t)a4->n128_u64 + v140 * v30 >= v139) : (v46 = 1), v46))
      {
        v47 = (__n128 *)((char *)a4 + v21 * v30 + 16);
        v48 = v129;
        v49 = v24;
        do
        {
          v50 = v49[-1];
          a9 = *v49;
          v51 = *v47;
          v49[-1] = v47[-1];
          *v49 = v51;
          v47[-1] = v50;
          *v47 = a9;
          v49 += 2;
          v47 += 2;
          v48 -= 8;
        }
        while (v48);
        v52 = v129;
        if (v129 == v144)
          goto LABEL_41;
      }
      else
      {
        v52 = 0;
      }
      v53 = (int *)a4 + v52 + v13 * v30;
      v54 = (int *)a4 + v52 + v9;
      v55 = v144 - v52;
      do
      {
        v56 = *v54;
        *v54++ = *v53;
        *v53++ = v56;
        --v55;
      }
      while (v55);
LABEL_41:
      v124 = -v124;
    }
    if (v27 < v14)
    {
      v57 = 0;
      v58 = ~v11 + v14;
      v59 = v33 + 4;
      v138 = v140 + v34;
      v136 = v122 + v34;
      v61 = v131;
      v60 = v132;
      v62 = -1.0 / *(float *)(a1 + 4 * (v11 + v12 * v11));
      v63 = v130;
      v64 = (float32x4_t *)v133;
      v65 = v23;
      do
      {
        a9.n128_f32[0] = v62 * *(float *)(a1 + 4 * (v11 + v12 * v65));
        v66 = v23;
        if (v58 < 8)
          goto LABEL_54;
        v67 = a1 + v135 + v135 * v11 + v18 * v57 >= v143 || v59 >= a1 + v121 + v18 * v11 + v18 * v57;
        v66 = v23;
        if (!v67)
          goto LABEL_54;
        v68 = (float32x4_t)vdupq_lane_s32((int32x2_t)a9.n128_u64[0], 0);
        v69 = v141;
        v70 = v64;
        v71 = v134 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v72 = vmlaq_f32(*v70, *v69, v68);
          v70[-1] = vmlaq_f32(v70[-1], v69[-1], v68);
          *v70 = v72;
          v70 += 2;
          v69 += 2;
          v71 -= 8;
        }
        while (v71);
        v66 = v23 + (v58 & 0xFFFFFFFFFFFFFFF8);
        if (v58 != (v58 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_54:
          v73 = (float *)(a1 + 4 * (v66 + v63));
          v74 = (float *)(a1 + 4 * (v10 + v66));
          v75 = v14 - v66;
          do
          {
            v76 = *v74++;
            *v73 = *v73 + (float)(a9.n128_f32[0] * v76);
            ++v73;
            --v75;
          }
          while (v75);
        }
        if ((v16 & 1) != 0)
          goto LABEL_44;
        if (a6 >= 8
          && ((unint64_t)a4->n128_u64 + v138 + v140 * v57 >= v139
           || v137 >= (unint64_t)a4->n128_u64 + v136 + v140 * v57))
        {
          v82 = 0;
          v83 = (float32x4_t)vdupq_lane_s32((int32x2_t)a9.n128_u64[0], 0);
          do
          {
            v84 = (float32x4_t *)(v60 + v82);
            v85 = vmlaq_f32(*(float32x4_t *)(v60 + v82), (float32x4_t)v24[v82 / 0x10], v83);
            v84[-1] = vmlaq_f32(*(float32x4_t *)(v60 + v82 - 16), (float32x4_t)v24[v82 / 0x10 - 1], v83);
            *v84 = v85;
            v82 += 32;
          }
          while (v22 != v82);
          v77 = v129;
          if (v129 == v144)
            goto LABEL_44;
        }
        else
        {
          v77 = 0;
        }
        v78 = (float *)a4 + v77 + v61;
        v79 = (float *)a4 + v9 + v77;
        v80 = v144 - v77;
        do
        {
          v81 = *v79++;
          *v78 = *v78 + (float)(a9.n128_f32[0] * v81);
          ++v78;
          --v80;
        }
        while (v80);
LABEL_44:
        ++v65;
        ++v57;
        v64 = (float32x4_t *)((char *)v64 + v18);
        v63 += v12;
        v60 += v21;
        v61 += v13;
      }
      while (v65 != v14);
    }
    ++v23;
    v20 = (float *)((char *)v127 + v135);
    --v26;
    v25 = (__n128 *)((char *)v126 + v135);
    v10 += v12;
    v24 = (__n128 *)((char *)v24 + v21);
    v9 += v13;
    --v134;
    v133 += v135;
    v141 = (float32x4_t *)((char *)v141 + v135);
    v130 += v12;
    v132 += v21;
    v131 += v13;
    ++v11;
  }
  while (v128 != v14);
  if (a4 && (int)a6 >= 1)
  {
    v87 = 0;
    v88 = v12 + 1;
    v89 = v119;
    v90 = v13 * v119;
    v91 = 4 * v13 * v119;
    v92 = -4 * v13;
    v93 = 4 * (v12 + 1) * v119;
    v94 = v18 ^ 0xFFFFFFFFFFFFFFFCLL;
    v95 = v93 + 4;
    v96 = (uint64_t)&a4[1] + v91;
    v97 = a1 + 4 * v12 * v119 + 4 * v14;
    v98 = 4 * ~v12;
    v99 = (float *)a4 + v13 * v14;
    v100 = (uint64_t)a4 + v91;
    v101 = a1 + v93;
    v102 = a1 + v95;
    do
    {
      v103 = v88 * v89;
      if ((int)v14 < (int)a3)
      {
        v104 = 0;
        v105 = v13 * v89;
        v106 = v99;
        do
        {
          v107 = 0;
          v108 = a4->n128_f32[v105 + v104];
          v109 = v106;
          do
          {
            v108 = v108 - (float)(*(float *)(v97 + 4 * v107++) * *v109);
            v109 = (float *)((char *)v109 + v21);
          }
          while ((_DWORD)v87 != (_DWORD)v107);
          a4->n128_f32[v105 + v104++] = v108 / *(float *)(a1 + 4 * v103);
          ++v106;
        }
        while (v104 != v144);
        goto LABEL_73;
      }
      if (a6 >= 8
        && (v100 + v92 * v87 < v102 + v94 * v87
          ? (v110 = v101 + v94 * v87 >= (unint64_t)a4->n128_u64 + 4 * v13 * v119 + 4 * v144 + v92 * v87)
          : (v110 = 1),
            v110))
      {
        v111 = (const float *)(a1 + 4 * v103);
        v112 = vld1q_dup_f32(v111);
        v113 = v129;
        v114 = (float32x4_t *)v96;
        do
        {
          v115 = vdivq_f32(*v114, v112);
          v114[-1] = vdivq_f32(v114[-1], v112);
          *v114 = v115;
          v114 += 2;
          v113 -= 8;
        }
        while (v113);
        v116 = v129;
        if (v129 == v144)
          goto LABEL_73;
      }
      else
      {
        v116 = 0;
      }
      v117 = (float *)a4 + v116 + v90;
      v118 = v144 - v116;
      do
      {
        *v117 = *v117 / *(float *)(a1 + 4 * v103);
        ++v117;
        --v118;
      }
      while (v118);
LABEL_73:
      LODWORD(v14) = v14 - 1;
      ++v87;
      v96 -= v21;
      v90 -= v13;
      v97 += v98;
      v99 = (float *)((char *)v99 - v21);
      v15 = v89-- <= 0;
    }
    while (!v15);
  }
  return v124;
}

uint64_t sub_10026C280(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t v12;
  _BYTE v14[8];
  int v15;

  sub_100298C2C(v14, &off_10044E580);
  v12 = sub_10026C310(a1, a2, a3, a4, a5, a6);
  if (v15)
    sub_1002989D0(v14);
  return v12;
}

uint64_t sub_10026C310(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 *v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  __int128 *v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  double v61;
  unint64_t v62;
  float64x2_t *v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  BOOL v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t *v70;
  unint64_t v71;
  float64x2_t v72;
  double *v73;
  double *v74;
  unint64_t v75;
  double v76;
  uint64_t v77;
  double *v78;
  double *v79;
  uint64_t v80;
  double v81;
  unint64_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  float64x2_t v85;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double *v106;
  uint64_t v107;
  double v108;
  double *v109;
  BOOL v110;
  const double *v111;
  float64x2_t v112;
  uint64_t v113;
  float64x2_t *v114;
  float64x2_t v115;
  uint64_t v116;
  double *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  _OWORD *v126;
  double *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  float64x2_t *v141;
  unint64_t v143;
  uint64_t v144;

  if ((int)a3 < 1)
    return 1;
  v119 = a3 - 1;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = a2 >> 3;
  v10 = a5 >> 3;
  v11 = a3;
  if (a4)
    v12 = (int)a6 < 1;
  else
    v12 = 1;
  v13 = v12;
  v14 = 8 * a6;
  v140 = a5 & 0xFFFFFFFFFFFFFFF8;
  v122 = (a5 & 0xFFFFFFFFFFFFFFF8) + v14;
  v15 = a2 & 0xFFFFFFFFFFFFFFF8;
  v135 = v15 + 8;
  v16 = 8 * a3;
  v121 = v15 + v16;
  v125 = a4 + v14;
  v144 = a6;
  v129 = a6 & 0xFFFFFFFC;
  v130 = v9;
  v17 = (double *)(a1 + v15);
  v18 = 8 * v10;
  v134 = a3 - 1;
  v141 = (float64x2_t *)(a1 + 24);
  v19 = v14 & 0x7FFFFFFE0;
  v132 = a4 + 16 + 8 * v10;
  v133 = a1 + 24 + v15;
  v20 = 1;
  v123 = a1 + v16;
  v131 = a5 >> 3;
  v21 = (__int128 *)(a4 + 16);
  v22 = (_OWORD *)(a1 + 16);
  v23 = a3;
  v124 = 1;
  do
  {
    v24 = v8 + 1;
    if (v8 + 1 >= v11)
    {
      v27 = v8;
    }
    else
    {
      v25 = v17;
      v26 = v20;
      v27 = v8;
      do
      {
        if (fabs(*v25) > fabs(*(double *)(a1 + 8 * (v8 + v9 * v27))))
          v27 = v26;
        ++v26;
        v25 = (double *)((char *)v25 + v15);
      }
      while (v11 != v26);
    }
    v28 = v9 * v27;
    v29 = v28 + v8;
    if (fabs(*(double *)(a1 + 8 * (v28 + v8))) < 2.22044605e-14)
      return 0;
    v126 = v22;
    v127 = v17;
    v30 = a1 + v135 * v8;
    v143 = v123 + v15 * v8;
    v31 = v140 * v8;
    v137 = a4 + v140 * v8;
    v139 = v125 + v140 * v8;
    v128 = v8 + 1;
    if (v8 != v27)
    {
      v32 = v11 - v8;
      v33 = v8;
      if (v11 - v8 < 6)
        goto LABEL_25;
      if (v30 < a1 + 8 * v32 + 8 * v29)
      {
        v33 = v8;
        if (a1 + 8 * v29 < v143)
          goto LABEL_25;
      }
      v34 = v23 & 0xFFFFFFFFFFFFFFFCLL;
      v33 = v8 + (v32 & 0xFFFFFFFFFFFFFFFCLL);
      v35 = (__int128 *)(a1 + 16 + 8 * (v8 + v28));
      v36 = v22;
      do
      {
        v37 = *(v36 - 1);
        v38 = *v36;
        v39 = *v35;
        *(v36 - 1) = *(v35 - 1);
        *v36 = v39;
        *(v35 - 1) = v37;
        *v35 = v38;
        v36 += 2;
        v35 += 2;
        v34 -= 4;
      }
      while (v34);
      v24 = v8 + 1;
      if (v32 != (v32 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_25:
        v40 = (uint64_t *)(a1 + 8 * (v33 + v28));
        v41 = (uint64_t *)(a1 + 8 * (v33 + v7));
        v42 = v11 - v33;
        do
        {
          v43 = *v41;
          *v41++ = *v40;
          *v40++ = v43;
          --v42;
        }
        while (v42);
      }
      if ((v13 & 1) != 0)
        goto LABEL_41;
      if (a6 >= 4 && (v137 < v125 + v140 * v27 ? (v44 = a4 + v140 * v27 >= v139) : (v44 = 1), v44))
      {
        v45 = (__int128 *)(a4 + 16 + v18 * v27);
        v46 = v129;
        v47 = v21;
        do
        {
          v48 = *(v47 - 1);
          v49 = *v47;
          v50 = *v45;
          *(v47 - 1) = *(v45 - 1);
          *v47 = v50;
          *(v45 - 1) = v48;
          *v45 = v49;
          v47 += 2;
          v45 += 2;
          v46 -= 4;
        }
        while (v46);
        v51 = v129;
        if (v129 == v144)
          goto LABEL_41;
      }
      else
      {
        v51 = 0;
      }
      v52 = (uint64_t *)(a4 + 8 * (v51 + v10 * v27));
      v53 = (uint64_t *)(a4 + 8 * (v51 + v6));
      v54 = v144 - v51;
      do
      {
        v55 = *v53;
        *v53++ = *v52;
        *v52++ = v55;
        --v54;
      }
      while (v54);
LABEL_41:
      v124 = -v124;
    }
    if (v24 < v11)
    {
      v56 = 0;
      v57 = ~v8 + v11;
      v58 = v30 + 8;
      v138 = v140 + v31;
      v136 = v122 + v31;
      v60 = v131;
      v59 = v132;
      v61 = -1.0 / *(double *)(a1 + 8 * (v8 + v9 * v8));
      v62 = v130;
      v63 = (float64x2_t *)v133;
      v64 = v20;
      do
      {
        v65 = v61 * *(double *)(a1 + 8 * (v8 + v9 * v64));
        v66 = v20;
        if (v57 < 4)
          goto LABEL_54;
        v67 = a1 + v135 + v135 * v8 + v15 * v56 >= v143 || v58 >= a1 + v121 + v15 * v8 + v15 * v56;
        v66 = v20;
        if (!v67)
          goto LABEL_54;
        v68 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v65, 0);
        v69 = v141;
        v70 = v63;
        v71 = v134 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v72 = vmlaq_f64(*v70, *v69, v68);
          v70[-1] = vmlaq_f64(v70[-1], v69[-1], v68);
          *v70 = v72;
          v70 += 2;
          v69 += 2;
          v71 -= 4;
        }
        while (v71);
        v66 = v20 + (v57 & 0xFFFFFFFFFFFFFFFCLL);
        if (v57 != (v57 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_54:
          v73 = (double *)(a1 + 8 * (v66 + v62));
          v74 = (double *)(a1 + 8 * (v7 + v66));
          v75 = v11 - v66;
          do
          {
            v76 = *v74++;
            *v73 = *v73 + v65 * v76;
            ++v73;
            --v75;
          }
          while (v75);
        }
        if ((v13 & 1) != 0)
          goto LABEL_44;
        if (a6 >= 4 && (a4 + v138 + v140 * v56 >= v139 || v137 >= a4 + v136 + v140 * v56))
        {
          v82 = 0;
          v83 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v65, 0);
          do
          {
            v84 = (float64x2_t *)(v59 + v82);
            v85 = vmlaq_f64(*(float64x2_t *)(v59 + v82), (float64x2_t)v21[v82 / 0x10], v83);
            v84[-1] = vmlaq_f64(*(float64x2_t *)(v59 + v82 - 16), (float64x2_t)v21[v82 / 0x10 - 1], v83);
            *v84 = v85;
            v82 += 32;
          }
          while (v19 != v82);
          v77 = v129;
          if (v129 == v144)
            goto LABEL_44;
        }
        else
        {
          v77 = 0;
        }
        v78 = (double *)(a4 + 8 * (v77 + v60));
        v79 = (double *)(a4 + 8 * (v6 + v77));
        v80 = v144 - v77;
        do
        {
          v81 = *v79++;
          *v78 = *v78 + v65 * v81;
          ++v78;
          --v80;
        }
        while (v80);
LABEL_44:
        ++v64;
        ++v56;
        v63 = (float64x2_t *)((char *)v63 + v15);
        v62 += v9;
        v59 += v18;
        v60 += v10;
      }
      while (v64 != v11);
    }
    ++v20;
    v17 = (double *)((char *)v127 + v135);
    --v23;
    v22 = (_OWORD *)((char *)v126 + v135);
    v7 += v9;
    v21 = (__int128 *)((char *)v21 + v18);
    v6 += v10;
    --v134;
    v133 += v135;
    v141 = (float64x2_t *)((char *)v141 + v135);
    v130 += v9;
    v132 += v18;
    v131 += v10;
    ++v8;
  }
  while (v128 != v11);
  if (a4 && (int)a6 >= 1)
  {
    v87 = 0;
    v88 = v9 + 1;
    v89 = v119;
    v90 = v10 * v119;
    v91 = 8 * v10 * v119;
    v92 = -8 * v10;
    v93 = 8 * (v9 + 1) * v119;
    v94 = v15 ^ 0xFFFFFFFFFFFFFFF8;
    v95 = v93 + 8;
    v96 = v91 + a4 + 16;
    v97 = a1 + 8 * v9 * v119 + 8 * v11;
    v98 = 8 * ~v9;
    v99 = (double *)(a4 + 8 * v10 * v11);
    v100 = a4 + v91;
    v101 = a1 + v93;
    v102 = a1 + v95;
    do
    {
      v103 = v88 * v89;
      if ((int)v11 < (int)a3)
      {
        v104 = 0;
        v105 = v10 * v89;
        v106 = v99;
        do
        {
          v107 = 0;
          v108 = *(double *)(a4 + 8 * (v105 + v104));
          v109 = v106;
          do
          {
            v108 = v108 - *(double *)(v97 + 8 * v107++) * *v109;
            v109 = (double *)((char *)v109 + v18);
          }
          while ((_DWORD)v87 != (_DWORD)v107);
          *(double *)(a4 + 8 * (v105 + v104++)) = v108 / *(double *)(a1 + 8 * v103);
          ++v106;
        }
        while (v104 != v144);
        goto LABEL_73;
      }
      if (a6 >= 4
        && (v100 + v92 * v87 < v102 + v94 * v87
          ? (v110 = v101 + v94 * v87 >= a4 + 8 * (v10 * v119 + v144) + v92 * v87)
          : (v110 = 1),
            v110))
      {
        v111 = (const double *)(a1 + 8 * v103);
        v112 = vld1q_dup_f64(v111);
        v113 = v129;
        v114 = (float64x2_t *)v96;
        do
        {
          v115 = vdivq_f64(*v114, v112);
          v114[-1] = vdivq_f64(v114[-1], v112);
          *v114 = v115;
          v114 += 2;
          v113 -= 4;
        }
        while (v113);
        v116 = v129;
        if (v129 == v144)
          goto LABEL_73;
      }
      else
      {
        v116 = 0;
      }
      v117 = (double *)(a4 + 8 * (v116 + v90));
      v118 = v144 - v116;
      do
      {
        *v117 = *v117 / *(double *)(a1 + 8 * v103);
        ++v117;
        --v118;
      }
      while (v118);
LABEL_73:
      LODWORD(v11) = v11 - 1;
      ++v87;
      v96 -= v18;
      v90 -= v10;
      v97 += v98;
      v99 = (double *)((char *)v99 - v18);
      v12 = v89-- <= 0;
    }
    while (!v12);
  }
  return v124;
}

BOOL sub_10026CAA0(float *a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  _BOOL8 v12;
  _BYTE v14[8];
  int v15;

  sub_100298C2C(v14, &off_10044E5A0);
  v12 = sub_10026CB30(a1, a2, a3, a4, a5, a6);
  if (v15)
    sub_1002989D0(v14);
  return v12;
}

BOOL sub_10026CB30(float *a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  float32x4_t *v10;
  float *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float *v15;
  float v16;
  double v17;
  uint64_t i;
  float *v19;
  double v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t *v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float *v46;
  uint64_t v47;
  double v48;
  float *v49;
  float v50;
  BOOL v51;
  const float *v52;
  float32x4_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  uint64_t v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  float *v71;
  char *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  float v80;
  BOOL v81;
  const float *v82;
  float32x4_t v83;
  uint64_t v84;
  float32x4_t *v85;
  float32x4_t v86;
  uint64_t v87;
  float *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v6 = a2 >> 2;
  if (a3 < 1)
  {
    v8 = 1;
    if (a4)
      goto LABEL_22;
LABEL_47:
    if (a3 >= 1)
    {
      v60 = a3;
      v61 = 4 * v6 + 4;
      do
      {
        *a1 = 1.0 / *a1;
        a1 = (float *)((char *)a1 + v61);
        --v60;
      }
      while (v60);
    }
    return v8;
  }
  v7 = 0;
  v8 = 0;
  v9 = 4 * v6;
  v10 = (float32x4_t *)(a1 + 4);
  v11 = a1;
  do
  {
    v12 = v6 * v7;
    if (v7)
    {
      v13 = 0;
      v14 = v7 & 0xFFFFFFFFFFFFFFF8;
      v15 = a1;
      do
      {
        v17 = a1[v12 + v13];
        if (v13)
        {
          for (i = 0; i != v13; ++i)
            v17 = v17 - (float)(v11[i] * v15[i]);
        }
        v16 = v17 * a1[(v6 + 1) * v13];
        a1[v12 + v13++] = v16;
        v15 = (float *)((char *)v15 + v9);
      }
      while (v13 != v7);
      v19 = &a1[v12 + v7];
      v20 = *v19;
      if ((_DWORD)v7)
      {
        if (v7 < 8)
        {
          v21 = 0;
          goto LABEL_17;
        }
        v21 = v7 & 0x7FFFFFFFFFFFFFF8;
        v22 = v10;
        do
        {
          v23 = v22[-1];
          v24 = vcvt_hight_f64_f32(v23);
          v25 = vcvtq_f64_f32(*(float32x2_t *)v23.f32);
          v26 = vcvt_hight_f64_f32(*v22);
          v27 = vcvtq_f64_f32(*(float32x2_t *)v22->f32);
          v28 = vmulq_f64(vnegq_f64(v24), v24);
          v29 = vmulq_f64(vnegq_f64(v25), v25);
          v30 = vmulq_f64(vnegq_f64(v26), v26);
          v31 = vmulq_f64(vnegq_f64(v27), v27);
          v20 = v20
              + v29.f64[0]
              + v29.f64[1]
              + v28.f64[0]
              + v28.f64[1]
              + v31.f64[0]
              + v31.f64[1]
              + v30.f64[0]
              + v30.f64[1];
          v22 += 2;
          v14 -= 8;
        }
        while (v14);
        while (v7 != v21)
        {
LABEL_17:
          v20 = v20 - v11[v21] * v11[v21];
          ++v21;
        }
      }
    }
    else
    {
      v19 = &a1[v12];
      v20 = *v19;
    }
    if (v20 < 0.00000011920929)
      return v8;
    v32 = 1.0 / sqrt(v20);
    *v19 = v32;
    ++v7;
    v11 = (float *)((char *)v11 + v9);
    v10 = (float32x4_t *)((char *)v10 + v9);
    v8 = v7 >= a3;
  }
  while (v7 != a3);
  if (!a4)
    goto LABEL_47;
LABEL_22:
  v33 = (a3 - 1);
  if (a3 >= 1)
  {
    if ((int)a6 >= 1)
    {
      v34 = 0;
      v35 = 0;
      v36 = a5 >> 2;
      v37 = v6 + 1;
      v38 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      v39 = a6 & 0xFFFFFFF8;
      v40 = 4 * (a5 >> 2);
      v41 = (float32x4_t *)(a4 + 16);
      v42 = a1;
      while (1)
      {
        v43 = v37 * v35;
        if (v35)
        {
          v44 = 0;
          v45 = v36 * v35;
          v46 = (float *)a4;
          do
          {
            v47 = 0;
            v48 = *(float *)(a4 + 4 * (v45 + v44));
            v49 = v46;
            do
            {
              v48 = v48 - (float)(v42[v47++] * *v49);
              v49 = (float *)((char *)v49 + v40);
            }
            while (v35 != v47);
            v50 = v48 * a1[v43];
            *(float *)(a4 + 4 * (v45 + v44++)) = v50;
            ++v46;
          }
          while (v44 != a6);
          goto LABEL_25;
        }
        if (a6 >= 8
          && (a4 < (unint64_t)(a1 + 1) ? (v51 = (unint64_t)a1 >= a4 + 4 * a6) : (v51 = 1), v51))
        {
          v52 = &a1[v43];
          v53 = vld1q_dup_f32(v52);
          v54 = a6 & 0xFFFFFFF8;
          v55 = v41;
          do
          {
            v56 = vmulq_f32(*v55, v53);
            v55[-1] = vmulq_f32(v55[-1], v53);
            *v55 = v56;
            v55 += 2;
            v54 -= 8;
          }
          while (v54);
          v57 = a6 & 0xFFFFFFF8;
          if (v39 == a6)
            goto LABEL_25;
        }
        else
        {
          v57 = 0;
        }
        v58 = (float *)(a4 + 4 * (v57 + v34));
        v59 = a6 - v57;
        do
        {
          *v58 = *v58 * a1[v43];
          ++v58;
          --v59;
        }
        while (v59);
LABEL_25:
        ++v35;
        v42 = (float *)((char *)v42 + v38);
        v41 = (float32x4_t *)((char *)v41 + v40);
        v34 += v36;
        if (v35 == a3)
        {
          v62 = 0;
          v63 = v36 * v33;
          v64 = 4 * v36 * v33;
          v65 = -4 * v36;
          v66 = v37 * v33;
          v67 = v38 ^ 0xFFFFFFFFFFFFFFFCLL;
          v68 = v66 * 4 + 4;
          v69 = v64 + a4 + 16;
          v70 = a4 + v64;
          v71 = &a1[v66];
          v72 = (char *)a1 + v68;
          v73 = (a3 - 1);
          while (1)
          {
            v75 = v37 * v73;
            if (v73 < v33)
            {
              v76 = 0;
              v77 = v36 * v73;
              do
              {
                v78 = *(float *)(a4 + 4 * (v77 + v76));
                v79 = a3 - 2 + 1;
                do
                {
                  v78 = v78
                      - (float)(a1[v73 + v6 * v79] * *(float *)(a4 + 4 * (v76 + v36 * v79)));
                  --v79;
                }
                while (v73 < v79);
                v80 = v78 * a1[v75];
                *(float *)(a4 + 4 * (v77 + v76++)) = v80;
              }
              while (v76 != a6);
              goto LABEL_52;
            }
            if (a6 >= 8
              && (v70 + v65 * v62 < (unint64_t)&v72[v67 * v62]
                ? (v81 = (unint64_t)v71 + v67 * v62 >= a4 + 4 * (v36 * v33 + a6) + v65 * v62)
                : (v81 = 1),
                  v81))
            {
              v82 = &a1[v75];
              v83 = vld1q_dup_f32(v82);
              v84 = a6 & 0xFFFFFFF8;
              v85 = (float32x4_t *)v69;
              do
              {
                v86 = vmulq_f32(*v85, v83);
                v85[-1] = vmulq_f32(v85[-1], v83);
                *v85 = v86;
                v85 += 2;
                v84 -= 8;
              }
              while (v84);
              v87 = a6 & 0xFFFFFFF8;
              if (v39 == a6)
                goto LABEL_52;
            }
            else
            {
              v87 = 0;
            }
            v88 = (float *)(a4 + 4 * (v87 + v63));
            v89 = a6 - v87;
            do
            {
              *v88 = *v88 * a1[v75];
              ++v88;
              --v89;
            }
            while (v89);
LABEL_52:
            ++v62;
            v69 -= 4 * v36;
            v63 -= v36;
            if (v73-- <= 0)
              goto LABEL_73;
          }
        }
      }
    }
LABEL_73:
    v90 = a3;
    v91 = 4 * v6 + 4;
    do
    {
      *a1 = 1.0 / *a1;
      a1 = (float *)((char *)a1 + v91);
      --v90;
    }
    while (v90);
  }
  return v8;
}

BOOL sub_10026D060(double *a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  _BOOL8 v12;
  _BYTE v14[8];
  int v15;

  sub_100298C2C(v14, &off_10044E5C0);
  v12 = sub_10026D0F0(a1, a2, a3, a4, a5, a6);
  if (v15)
    sub_1002989D0(v14);
  return v12;
}

BOOL sub_10026D0F0(double *a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  double *v10;
  float64x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  float64x2_t *v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  float64x2_t *v19;
  float64x2_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  double *v23;
  double v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float64x2_t *v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  double v41;
  double *v42;
  BOOL v43;
  const double *v44;
  float64x2_t v45;
  uint64_t v46;
  float64x2_t *v47;
  float64x2_t v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  double *v63;
  char *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  BOOL v72;
  const double *v73;
  float64x2_t v74;
  uint64_t v75;
  float64x2_t *v76;
  float64x2_t v77;
  uint64_t v78;
  double *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v6 = a2 >> 3;
  if (a3 < 1)
  {
    v8 = 1;
    if (a4)
      goto LABEL_23;
LABEL_48:
    if (a3 >= 1)
    {
      v52 = a3;
      v53 = 8 * v6 + 8;
      do
      {
        *a1 = 1.0 / *a1;
        a1 = (double *)((char *)a1 + v53);
        --v52;
      }
      while (v52);
    }
    return v8;
  }
  v7 = 0;
  v8 = 0;
  v9 = 8 * v6;
  v10 = a1;
  v11 = (float64x2_t *)(a1 + 2);
  do
  {
    v12 = v6 * v7;
    if (v7)
    {
      v13 = 0;
      v14 = a1;
      v15 = (float64x2_t *)(a1 + 2);
      do
      {
        v16 = a1[v12 + v13];
        if (v13)
        {
          if (v13 < 4)
          {
            v17 = 0;
            goto LABEL_12;
          }
          v18 = v13 & 0xFFFFFFFFFFFFFFFCLL;
          v17 = v13 & 0x7FFFFFFFFFFFFFFCLL;
          v19 = v15;
          v20 = v11;
          do
          {
            v21 = vmulq_f64(v19[-1], vnegq_f64(v20[-1]));
            v22 = vmulq_f64(*v19, vnegq_f64(*v20));
            v16 = v16 + v21.f64[0] + v21.f64[1] + v22.f64[0] + v22.f64[1];
            v20 += 2;
            v19 += 2;
            v18 -= 4;
          }
          while (v18);
          while (v13 != v17)
          {
LABEL_12:
            v16 = v16 - v10[v17] * v14[v17];
            ++v17;
          }
        }
        a1[v12 + v13] = v16 * a1[(v6 + 1) * v13];
        ++v13;
        v15 = (float64x2_t *)((char *)v15 + v9);
        v14 = (double *)((char *)v14 + v9);
      }
      while (v13 != v7);
      v23 = &a1[v12 + v7];
      v24 = *v23;
      if ((_DWORD)v7)
      {
        for (i = 0; i != v7; ++i)
          v24 = v24 - v10[i] * v10[i];
      }
      if (v24 < 2.22044605e-16)
        return v8;
    }
    else
    {
      v23 = &a1[v12];
      v24 = *v23;
      if (*v23 < 2.22044605e-16)
        return v8;
    }
    *v23 = 1.0 / sqrt(v24);
    ++v7;
    v11 = (float64x2_t *)((char *)v11 + v9);
    v10 = (double *)((char *)v10 + v9);
    v8 = v7 >= a3;
  }
  while (v7 != a3);
  if (!a4)
    goto LABEL_48;
LABEL_23:
  v26 = (a3 - 1);
  if (a3 >= 1)
  {
    if ((int)a6 >= 1)
    {
      v27 = 0;
      v28 = 0;
      v29 = a5 >> 3;
      v30 = v6 + 1;
      v31 = a2 & 0xFFFFFFFFFFFFFFF8;
      v32 = a6 & 0xFFFFFFFC;
      v33 = 8 * (a5 >> 3);
      v34 = (float64x2_t *)(a4 + 16);
      v35 = a1;
      while (1)
      {
        v36 = v30 * v28;
        if (v28)
        {
          v37 = 0;
          v38 = v29 * v28;
          v39 = (double *)a4;
          do
          {
            v40 = 0;
            v41 = *(double *)(a4 + 8 * (v38 + v37));
            v42 = v39;
            do
            {
              v41 = v41 - v35[v40++] * *v42;
              v42 = (double *)((char *)v42 + v33);
            }
            while (v28 != v40);
            *(double *)(a4 + 8 * (v38 + v37++)) = v41 * a1[v36];
            ++v39;
          }
          while (v37 != a6);
          goto LABEL_26;
        }
        if (a6 >= 4
          && (a4 < (unint64_t)(a1 + 1) ? (v43 = (unint64_t)a1 >= a4 + 8 * a6) : (v43 = 1), v43))
        {
          v44 = &a1[v36];
          v45 = vld1q_dup_f64(v44);
          v46 = a6 & 0xFFFFFFFC;
          v47 = v34;
          do
          {
            v48 = vmulq_f64(*v47, v45);
            v47[-1] = vmulq_f64(v47[-1], v45);
            *v47 = v48;
            v47 += 2;
            v46 -= 4;
          }
          while (v46);
          v49 = a6 & 0xFFFFFFFC;
          if (v32 == a6)
            goto LABEL_26;
        }
        else
        {
          v49 = 0;
        }
        v50 = (double *)(a4 + 8 * (v49 + v27));
        v51 = a6 - v49;
        do
        {
          *v50 = *v50 * a1[v36];
          ++v50;
          --v51;
        }
        while (v51);
LABEL_26:
        ++v28;
        v35 = (double *)((char *)v35 + v31);
        v34 = (float64x2_t *)((char *)v34 + v33);
        v27 += v29;
        if (v28 == a3)
        {
          v54 = 0;
          v55 = v29 * v26;
          v56 = 8 * v29 * v26;
          v57 = -8 * v29;
          v58 = v30 * v26;
          v59 = v31 ^ 0xFFFFFFFFFFFFFFF8;
          v60 = v58 * 8 + 8;
          v61 = v56 + a4 + 16;
          v62 = a4 + v56;
          v63 = &a1[v58];
          v64 = (char *)a1 + v60;
          v65 = (a3 - 1);
          while (1)
          {
            v67 = v30 * v65;
            if (v65 < v26)
            {
              v68 = 0;
              v69 = v29 * v65;
              do
              {
                v70 = *(double *)(a4 + 8 * (v69 + v68));
                v71 = a3 - 2 + 1;
                do
                {
                  v70 = v70 - a1[v65 + v6 * v71] * *(double *)(a4 + 8 * (v68 + v29 * v71));
                  --v71;
                }
                while (v65 < v71);
                *(double *)(a4 + 8 * (v69 + v68++)) = v70 * a1[v67];
              }
              while (v68 != a6);
              goto LABEL_53;
            }
            if (a6 >= 4
              && (v62 + v57 * v54 < (unint64_t)&v64[v59 * v54]
                ? (v72 = (unint64_t)v63 + v59 * v54 >= a4 + 8 * (v29 * v26 + a6) + v57 * v54)
                : (v72 = 1),
                  v72))
            {
              v73 = &a1[v67];
              v74 = vld1q_dup_f64(v73);
              v75 = a6 & 0xFFFFFFFC;
              v76 = (float64x2_t *)v61;
              do
              {
                v77 = vmulq_f64(*v76, v74);
                v76[-1] = vmulq_f64(v76[-1], v74);
                *v76 = v77;
                v76 += 2;
                v75 -= 4;
              }
              while (v75);
              v78 = a6 & 0xFFFFFFFC;
              if (v32 == a6)
                goto LABEL_53;
            }
            else
            {
              v78 = 0;
            }
            v79 = (double *)(a4 + 8 * (v78 + v55));
            v80 = a6 - v78;
            do
            {
              *v79 = *v79 * a1[v67];
              ++v79;
              --v80;
            }
            while (v80);
LABEL_53:
            ++v54;
            v61 -= 8 * v29;
            v55 -= v29;
            if (v65-- <= 0)
              goto LABEL_74;
          }
        }
      }
    }
LABEL_74:
    v81 = a3;
    v82 = 8 * v6 + 8;
    do
    {
      *a1 = 1.0 / *a1;
      a1 = (double *)((char *)a1 + v82);
      --v81;
    }
    while (v81);
  }
  return v8;
}

uint64_t sub_10026D5C0(float *a1, unint64_t a2, unsigned int a3, int a4, unsigned int a5, float *a6, unint64_t a7, float *a8)
{
  float32x4_t v14;
  int32x2_t v15;
  unsigned int v16;
  float *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float *v31;
  float *v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t *v41;
  float32x4_t v42;
  uint64_t v43;
  float *v44;
  float *v45;
  uint64_t v46;
  float v47;
  float *v48;
  float *v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  float *v53;
  unint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  float *v59;
  float v60;
  uint64_t v61;
  float *v62;
  float *v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  uint64_t v69;
  float *v70;
  float *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  int v78;
  uint64_t v79;
  float *v80;
  float *v81;
  uint64_t v82;
  float *v83;
  float v84;
  float *v85;
  float *v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  float *v90;
  uint64_t v91;
  float *v92;
  uint64_t v93;
  float *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  int v100;
  uint64_t v101;
  float *v102;
  float *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float32x4_t *v111;
  uint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  float *v121;
  float *v122;
  float v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  float *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  BOOL v132;
  float32x4_t *v134;
  const float *v135;
  float32x4_t *v136;
  uint64_t v137;
  float32x4_t v138;
  uint64_t v139;
  uint64_t v140;
  float *v141;
  uint64_t v142;
  float32x4_t *v143;
  float32x4_t v144;
  uint64_t v145;
  float *v147;
  float *v148;
  unint64_t v149;
  float *v150;
  unint64_t v151;
  float *v152;
  unint64_t v153;
  uint64_t v156;
  char v157[8];
  int v158;
  float *v159;
  uint64_t v160;
  float v161[2];
  uint64_t v162;
  uint64_t v163;

  sub_100298C2C(v157, &off_10044E5E0);
  v16 = a8 != 0;
  if (a3)
    v16 = a4 + a3;
  v159 = v161;
  v160 = (int)v16;
  if (v16 >= 0x109)
    operator new[]();
  if (a8)
    v17 = a8;
  else
    v17 = &v161[a3];
  v156 = (a4 - 1);
  if (a4 < 1)
    goto LABEL_114;
  v18 = 0;
  v19 = a7 >> 2;
  v20 = 4 * (a2 >> 2);
  v21 = v20 + 4;
  v22 = &a1[(unint64_t)v20 / 4];
  v23 = 2 * (a2 >> 2);
  v24 = &a1[v23];
  v25 = a3;
  v26 = a3;
  v27 = a1;
  v28 = a4;
  do
  {
    v29 = (int)a3 - v18;
    v30 = 0.0;
    if (v29 >= 1)
    {
      v31 = v27;
      v32 = v161;
      v33 = v26;
      do
      {
        v34 = *v31;
        *v32++ = *v31;
        v30 = v30 + (float)(v34 * v34);
        v31 = (float *)((char *)v31 + v20);
        --v33;
      }
      while (v33);
    }
    v35 = v161[0];
    if (v161[0] >= 0.0)
      v36 = 1.0;
    else
      v36 = -1.0;
    v37 = v161[0] + (float)(v36 * sqrtf(v30));
    v161[0] = v37;
    if (v29 >= 1)
    {
      *(float *)v15.i32 = sqrtf((float)(v30 + (float)(v37 * v37)) - (float)(v35 * v35));
      if (v26 < 8)
      {
        v38 = 0;
LABEL_23:
        v43 = v26 - v38;
        v44 = &v161[v38];
        do
        {
          *v44 = *v44 / *(float *)v15.i32;
          ++v44;
          --v43;
        }
        while (v43);
        goto LABEL_25;
      }
      v39 = v26 & 0xFFFFFFF8;
      v38 = v39;
      v40 = (float32x4_t)vdupq_lane_s32(v15, 0);
      v41 = (float32x4_t *)&v163;
      do
      {
        v42 = vdivq_f32(*v41, v40);
        v41[-1] = vdivq_f32(v41[-1], v40);
        *v41 = v42;
        v41 += 2;
        v39 -= 8;
      }
      while (v39);
      if (v38 != v26)
        goto LABEL_23;
    }
LABEL_25:
    if ((int)a3 > v18)
    {
      v45 = v27;
      v46 = v18;
      do
      {
        v47 = 0.0;
        v48 = v161;
        v49 = v45;
        v50 = v26;
        do
        {
          v51 = *v48++;
          v47 = v47 + (float)(v51 * *v49);
          v49 = (float *)((char *)v49 + v20);
          --v50;
        }
        while (v50);
        v52 = 0;
        v53 = v45;
        do
        {
          *v53 = *v53 + (float)((float)(v161[v52++] * -2.0) * v47);
          v53 = (float *)((char *)v53 + v20);
        }
        while (v26 != v52);
        ++v46;
        ++v45;
      }
      while (v46 != v28);
    }
    v17[v18] = v161[0] * v161[0];
    if (v29 >= 2)
    {
      v54 = v26 - 1;
      v55 = v161[0];
      if (v54 < 2)
      {
        v56 = 1;
LABEL_38:
        v61 = v26 - v56;
        v62 = &a1[v18 + (a2 >> 2) * (v56 + v18)];
        v63 = &v161[v56];
        do
        {
          v64 = *v63++;
          *v62 = v64 / v55;
          v62 = (float *)((char *)v62 + v20);
          --v61;
        }
        while (v61);
        goto LABEL_10;
      }
      v57 = 0;
      v58 = v54 & 0xFFFFFFFFFFFFFFFELL;
      v56 = v54 | 1;
      v59 = (float *)&v162;
      do
      {
        v60 = *v59;
        *(float *)((char *)v22 + v57) = *(v59 - 1) / v55;
        *(float *)((char *)v24 + v57) = v60 / v55;
        v57 += v23 * 4;
        v59 += 2;
        v58 -= 2;
      }
      while (v58);
      if (v54 != (v54 & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_38;
    }
LABEL_10:
    ++v18;
    --v26;
    v27 = (float *)((char *)v27 + v21);
    v22 = (float *)((char *)v22 + v21);
    v24 = (float *)((char *)v24 + v21);
  }
  while (v18 != v28);
  if (!a6)
  {
LABEL_114:
    v145 = 1;
    goto LABEL_115;
  }
  v151 = a2 >> 2;
  v65 = (int)a3 - 1;
  v66 = 4 * v19;
  if ((int)a5 > 0)
  {
    v67 = 0;
    v68 = &a1[v23];
    v69 = v20 + 4;
    v70 = &a1[(unint64_t)v20 / 4];
    v71 = a6;
    v72 = a2 >> 2;
    while (1)
    {
      v161[0] = 1.0;
      if (v67 < v65)
      {
        v73 = v25 - 1;
        if (v73 >= 2)
        {
          v75 = 0;
          v76 = v73 & 0xFFFFFFFFFFFFFFFELL;
          v74 = v73 | 1;
          v77 = &v162;
          do
          {
            v78 = *(_DWORD *)((char *)v68 + v75);
            *((float *)v77 - 1) = *(float *)((char *)v70 + v75);
            *(_DWORD *)v77 = v78;
            v75 += v23 * 4;
            ++v77;
            v76 -= 2;
          }
          while (v76);
          if (v73 == (v73 & 0xFFFFFFFFFFFFFFFELL))
            goto LABEL_53;
        }
        else
        {
          v74 = 1;
        }
        v79 = v25 - v74;
        v80 = &v161[v74];
        v81 = &a1[v67 + v151 * (v74 + v67)];
        do
        {
          *v80++ = *v81;
          v81 = (float *)((char *)v81 + v20);
          --v79;
        }
        while (v79);
      }
LABEL_53:
      if (v67 < (int)a3)
      {
        v82 = 0;
        v83 = v71;
        do
        {
          v84 = 0.0;
          v85 = v161;
          v86 = v83;
          v87 = v25;
          do
          {
            v88 = *v85++;
            v84 = v84 + (float)(v88 * *v86);
            v86 = (float *)((char *)v86 + v66);
            --v87;
          }
          while (v87);
          v89 = 0;
          v90 = v83;
          do
          {
            *v90 = *v90 + (float)((float)(v84 * (float)(v161[v89++] * -2.0)) * v17[v67]);
            v90 = (float *)((char *)v90 + v66);
          }
          while (v25 != v89);
          ++v82;
          ++v83;
        }
        while (v82 != a5);
      }
      ++v67;
      --v25;
      v68 = (float *)((char *)v68 + v69);
      v70 = (float *)((char *)v70 + v69);
      v71 = (float *)((char *)v71 + v66);
      if (v67 == v28)
        goto LABEL_73;
    }
  }
  v91 = 0;
  v92 = &a1[v23];
  v93 = v20 + 4;
  v94 = &a1[(unint64_t)v20 / 4];
  v72 = a2 >> 2;
  while (2)
  {
    if (v91 < v65)
    {
      v95 = a3 - 1;
      if (v95 < 2)
      {
        v96 = 1;
        goto LABEL_69;
      }
      v97 = 0;
      v98 = v95 & 0xFFFFFFFFFFFFFFFELL;
      v96 = v95 | 1;
      v99 = &v162;
      do
      {
        v100 = *(_DWORD *)((char *)v92 + v97);
        *((float *)v99 - 1) = *(float *)((char *)v94 + v97);
        *(_DWORD *)v99 = v100;
        v97 += v23 * 4;
        ++v99;
        v98 -= 2;
      }
      while (v98);
      if (v95 != (v95 & 0xFFFFFFFFFFFFFFFELL))
      {
LABEL_69:
        v101 = a3 - v96;
        v102 = &v161[v96];
        v103 = &a1[v91 + v151 * (v96 + v91)];
        do
        {
          *v102++ = *v103;
          v103 = (float *)((char *)v103 + v20);
          --v101;
        }
        while (v101);
      }
    }
    ++v91;
    --a3;
    v92 = (float *)((char *)v92 + v93);
    v94 = (float *)((char *)v94 + v93);
    if (v91 != v28)
      continue;
    break;
  }
  v161[0] = 1.0;
LABEL_73:
  v104 = 0;
  v105 = v156;
  v106 = v19 * v156;
  v107 = v19 * v156;
  v108 = -4 * v19;
  v153 = v72 + 1;
  v109 = (v72 + 1) * v156;
  v149 = ~a2 & 0xFFFFFFFFFFFFFFFCLL;
  v110 = a5 & 0xFFFFFFF8;
  v111 = (float32x4_t *)&a6[v107 + 4];
  v152 = &a6[v107];
  v150 = &a6[a5 + v107];
  v147 = &a1[v109];
  v148 = &a1[v109 + 1];
  while (2)
  {
    v113 = v108 * v104;
    v114 = (unint64_t)v152 + v108 * v104;
    if (v105 < v156)
    {
      if ((int)a5 >= 1)
      {
        v115 = 0;
        v116 = (int)v156;
        v117 = (unint64_t)v150 + v113;
        while (1)
        {
          v118 = v105 * v151 + v116;
          if (a5 >= 8uLL)
          {
            v119 = 0;
            v124 = (v156 - v115);
            v125 = v151 * (v156 - v104) + v124;
            v126 = (unint64_t)&a1[v125 + 1];
            v127 = &a1[v125];
            v128 = (a7 & 0xFFFFFFFFFFFFFFFCLL) * v124;
            v129 = (unint64_t)&a6[a5] + v128;
            v130 = (unint64_t)a6 + v128;
            v132 = v114 < v126 && (unint64_t)v127 < v117;
            if ((v130 >= v117 || v114 >= v129) && !v132)
            {
              v134 = (float32x4_t *)((char *)a6 + v66 * v116 + 16);
              v135 = &a1[v118];
              v14 = vld1q_dup_f32(v135);
              v136 = v111;
              v137 = a5 & 0xFFFFFFF8;
              do
              {
                v138 = vmlsq_f32(*v136, v14, *v134);
                v136[-1] = vmlsq_f32(v136[-1], v14, v134[-1]);
                *v136 = v138;
                v134 += 2;
                v136 += 2;
                v137 -= 8;
              }
              while (v137);
              v119 = a5 & 0xFFFFFFF8;
              if (a5 == v110)
                goto LABEL_79;
            }
          }
          else
          {
            v119 = 0;
          }
          v120 = a5 - v119;
          v121 = &a6[v106 + v119];
          v122 = &a6[v119 + v19 * v116];
          do
          {
            v123 = *v122++;
            *v121 = *v121 - (float)(v123 * a1[v118]);
            ++v121;
            --v120;
          }
          while (v120);
LABEL_79:
          --v116;
          ++v115;
          if (v105 >= v116)
            goto LABEL_101;
        }
      }
      if (fabsf(a1[v105 * v153]) < 0.0000011921)
        goto LABEL_118;
LABEL_75:
      v106 -= v19;
      ++v104;
      v108 = -4 * v19;
      v111 = (float32x4_t *)((char *)v111 - 4 * v19);
      if (v105-- < 1)
        goto LABEL_114;
      continue;
    }
    break;
  }
LABEL_101:
  v14.f32[0] = a1[v105 * v153];
  if (fabsf(v14.f32[0]) >= 0.0000011921)
  {
    if ((int)a5 < 1)
      goto LABEL_75;
    if (a5 >= 8uLL
      && (v114 >= (unint64_t)v148 + v149 * v104
       || (char *)v147 + v149 * v104 >= (char *)&a6[v19 * v156 + a5] + v113))
    {
      v14 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 0);
      v142 = a5 & 0xFFFFFFF8;
      v143 = v111;
      do
      {
        v144 = vdivq_f32(*v143, v14);
        v143[-1] = vdivq_f32(v143[-1], v14);
        *v143 = v144;
        v143 += 2;
        v142 -= 8;
      }
      while (v142);
      v139 = a5 & 0xFFFFFFF8;
      if (a5 == v110)
        goto LABEL_75;
    }
    else
    {
      v139 = 0;
    }
    v140 = a5 - v139;
    v141 = &a6[v139 + v106];
    do
    {
      *v141 = *v141 / a1[v105 * v153];
      ++v141;
      --v140;
    }
    while (v140);
    goto LABEL_75;
  }
LABEL_118:
  v145 = 0;
LABEL_115:
  if (v158)
    sub_1002989D0(v157);
  return v145;
}

void sub_10026DE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  if (a26 != a14)
  {
    if (a26)
      operator delete[]();
  }
  sub_1001D40CC((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_10026DE58(double *a1, unint64_t a2, unsigned int a3, int a4, unsigned int a5, double *a6, unint64_t a7, double *a8)
{
  unsigned int v14;
  double *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double *v29;
  double *v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t v41;
  uint64_t v42;
  double *v43;
  double *v44;
  uint64_t v45;
  double v46;
  double *v47;
  double *v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  double *v52;
  unint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  double *v58;
  double v59;
  uint64_t v60;
  double *v61;
  double *v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  double *v69;
  double *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  double *v79;
  double *v80;
  uint64_t v81;
  double *v82;
  double v83;
  double *v84;
  double *v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  double *v89;
  uint64_t v90;
  double *v91;
  uint64_t v92;
  double *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  double *v101;
  double *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float64x2_t *v110;
  uint64_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double *v120;
  double *v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  double *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  BOOL v131;
  float64x2_t *v133;
  const double *v134;
  float64x2_t v135;
  float64x2_t *v136;
  uint64_t v137;
  float64x2_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double *v142;
  float64x2_t v143;
  uint64_t v144;
  float64x2_t *v145;
  float64x2_t v146;
  uint64_t v147;
  double *v149;
  double *v150;
  unint64_t v151;
  double *v152;
  unint64_t v153;
  double *v154;
  unint64_t v155;
  uint64_t v158;
  char v159[8];
  int v160;
  double *v161;
  uint64_t v162;
  double v163[2];
  _BYTE v164[1080];

  sub_100298C2C(v159, &off_10044E600);
  v14 = a8 != 0;
  if (a3)
    v14 = a4 + a3;
  v161 = v163;
  v162 = (int)v14;
  if (v14 >= 0x89)
    operator new[]();
  if (a8)
    v15 = a8;
  else
    v15 = &v163[a3];
  v158 = (a4 - 1);
  if (a4 < 1)
    goto LABEL_114;
  v16 = 0;
  v17 = a7 >> 3;
  v18 = 8 * (a2 >> 3);
  v19 = v18 + 8;
  v20 = &a1[(unint64_t)v18 / 8];
  v21 = 2 * (a2 >> 3);
  v22 = a3;
  v23 = &a1[v21];
  v24 = a3;
  v25 = a1;
  v26 = a4;
  do
  {
    v27 = (int)a3 - v16;
    v28 = 0.0;
    if (v27 >= 1)
    {
      v29 = v25;
      v30 = v163;
      v31 = v24;
      do
      {
        v32 = *v29;
        *v30++ = *v29;
        v28 = v28 + v32 * v32;
        v29 = (double *)((char *)v29 + v18);
        --v31;
      }
      while (v31);
    }
    v33 = v163[0];
    if (v163[0] >= 0.0)
      v34 = 1.0;
    else
      v34 = -1.0;
    v35 = v163[0] + v34 * sqrt(v28);
    v163[0] = v35;
    if (v27 >= 1)
    {
      v36 = sqrt(v28 + v35 * v35 - v33 * v33);
      if (v24 < 4)
      {
        v37 = 0;
LABEL_23:
        v42 = v24 - v37;
        v43 = &v163[v37];
        do
        {
          *v43 = *v43 / v36;
          ++v43;
          --v42;
        }
        while (v42);
        goto LABEL_25;
      }
      v38 = v24 & 0xFFFFFFFC;
      v37 = v38;
      v39 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v36, 0);
      v40 = (float64x2_t *)v164;
      do
      {
        v41 = vdivq_f64(*v40, v39);
        v40[-1] = vdivq_f64(v40[-1], v39);
        *v40 = v41;
        v40 += 2;
        v38 -= 4;
      }
      while (v38);
      if (v37 != v24)
        goto LABEL_23;
    }
LABEL_25:
    if ((int)a3 > v16)
    {
      v44 = v25;
      v45 = v16;
      do
      {
        v46 = 0.0;
        v47 = v163;
        v48 = v44;
        v49 = v24;
        do
        {
          v50 = *v47++;
          v46 = v46 + v50 * *v48;
          v48 = (double *)((char *)v48 + v18);
          --v49;
        }
        while (v49);
        v51 = 0;
        v52 = v44;
        do
        {
          *v52 = *v52 + v163[v51++] * -2.0 * v46;
          v52 = (double *)((char *)v52 + v18);
        }
        while (v24 != v51);
        ++v45;
        ++v44;
      }
      while (v45 != v26);
    }
    v15[v16] = v163[0] * v163[0];
    if (v27 >= 2)
    {
      v53 = v24 - 1;
      v54 = v163[0];
      if (v53 < 2)
      {
        v55 = 1;
LABEL_38:
        v60 = v24 - v55;
        v61 = &a1[v16 + (a2 >> 3) * (v55 + v16)];
        v62 = &v163[v55];
        do
        {
          v63 = *v62++;
          *v61 = v63 / v54;
          v61 = (double *)((char *)v61 + v18);
          --v60;
        }
        while (v60);
        goto LABEL_10;
      }
      v56 = 0;
      v57 = v53 & 0xFFFFFFFFFFFFFFFELL;
      v55 = v53 | 1;
      v58 = (double *)v164;
      do
      {
        v59 = *v58;
        *(double *)((char *)v20 + v56) = *(v58 - 1) / v54;
        *(double *)((char *)v23 + v56) = v59 / v54;
        v56 += v21 * 8;
        v58 += 2;
        v57 -= 2;
      }
      while (v57);
      if (v53 != (v53 & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_38;
    }
LABEL_10:
    ++v16;
    --v24;
    v25 = (double *)((char *)v25 + v19);
    v20 = (double *)((char *)v20 + v19);
    v23 = (double *)((char *)v23 + v19);
  }
  while (v16 != v26);
  if (!a6)
  {
LABEL_114:
    v147 = 1;
    goto LABEL_115;
  }
  v153 = a2 >> 3;
  v64 = (int)a3 - 1;
  v65 = 8 * v17;
  if ((int)a5 > 0)
  {
    v66 = 0;
    v67 = &a1[v21];
    v68 = v18 + 8;
    v69 = &a1[(unint64_t)v18 / 8];
    v70 = a6;
    v71 = a2 >> 3;
    while (1)
    {
      v163[0] = 1.0;
      if (v66 < v64)
      {
        v72 = v22 - 1;
        if (v72 >= 2)
        {
          v74 = 0;
          v75 = v72 & 0xFFFFFFFFFFFFFFFELL;
          v73 = v72 | 1;
          v76 = v164;
          do
          {
            v77 = *(_QWORD *)((char *)v67 + v74);
            *(v76 - 1) = *(_QWORD *)((char *)v69 + v74);
            *v76 = v77;
            v74 += v21 * 8;
            v76 += 2;
            v75 -= 2;
          }
          while (v75);
          if (v72 == (v72 & 0xFFFFFFFFFFFFFFFELL))
            goto LABEL_53;
        }
        else
        {
          v73 = 1;
        }
        v78 = v22 - v73;
        v79 = &v163[v73];
        v80 = &a1[v66 + v153 * (v73 + v66)];
        do
        {
          *v79++ = *v80;
          v80 = (double *)((char *)v80 + v18);
          --v78;
        }
        while (v78);
      }
LABEL_53:
      if (v66 < (int)a3)
      {
        v81 = 0;
        v82 = v70;
        do
        {
          v83 = 0.0;
          v84 = v163;
          v85 = v82;
          v86 = v22;
          do
          {
            v87 = *v84++;
            v83 = v83 + v87 * *v85;
            v85 = (double *)((char *)v85 + v65);
            --v86;
          }
          while (v86);
          v88 = 0;
          v89 = v82;
          do
          {
            *v89 = *v89 + v83 * (v163[v88++] * -2.0) * v15[v66];
            v89 = (double *)((char *)v89 + v65);
          }
          while (v22 != v88);
          ++v81;
          ++v82;
        }
        while (v81 != a5);
      }
      ++v66;
      --v22;
      v67 = (double *)((char *)v67 + v68);
      v69 = (double *)((char *)v69 + v68);
      v70 = (double *)((char *)v70 + v65);
      if (v66 == v26)
        goto LABEL_73;
    }
  }
  v90 = 0;
  v91 = &a1[v21];
  v92 = v18 + 8;
  v93 = &a1[(unint64_t)v18 / 8];
  v71 = a2 >> 3;
  while (2)
  {
    if (v90 < v64)
    {
      v94 = a3 - 1;
      if (v94 < 2)
      {
        v95 = 1;
        goto LABEL_69;
      }
      v96 = 0;
      v97 = v94 & 0xFFFFFFFFFFFFFFFELL;
      v95 = v94 | 1;
      v98 = v164;
      do
      {
        v99 = *(_QWORD *)((char *)v91 + v96);
        *(v98 - 1) = *(_QWORD *)((char *)v93 + v96);
        *v98 = v99;
        v96 += v21 * 8;
        v98 += 2;
        v97 -= 2;
      }
      while (v97);
      if (v94 != (v94 & 0xFFFFFFFFFFFFFFFELL))
      {
LABEL_69:
        v100 = a3 - v95;
        v101 = &v163[v95];
        v102 = &a1[v90 + v153 * (v95 + v90)];
        do
        {
          *v101++ = *v102;
          v102 = (double *)((char *)v102 + v18);
          --v100;
        }
        while (v100);
      }
    }
    ++v90;
    --a3;
    v91 = (double *)((char *)v91 + v92);
    v93 = (double *)((char *)v93 + v92);
    if (v90 != v26)
      continue;
    break;
  }
  v163[0] = 1.0;
LABEL_73:
  v103 = 0;
  v104 = v158;
  v105 = v17 * v158;
  v106 = v17 * v158;
  v107 = -8 * v17;
  v155 = v71 + 1;
  v108 = (v71 + 1) * v158;
  v151 = ~a2 & 0xFFFFFFFFFFFFFFF8;
  v109 = a5 & 0xFFFFFFFC;
  v110 = (float64x2_t *)&a6[v106 + 2];
  v154 = &a6[v106];
  v152 = &a6[a5 + v106];
  v149 = &a1[v108];
  v150 = &a1[v108 + 1];
  while (2)
  {
    v112 = v107 * v103;
    v113 = (unint64_t)v154 + v107 * v103;
    if (v104 < v158)
    {
      if ((int)a5 >= 1)
      {
        v114 = 0;
        v115 = (int)v158;
        v116 = (unint64_t)v152 + v112;
        while (1)
        {
          v117 = v104 * v153 + v115;
          if (a5 >= 6uLL)
          {
            v118 = 0;
            v123 = (v158 - v114);
            v124 = v153 * (v158 - v103) + v123;
            v125 = (unint64_t)&a1[v124 + 1];
            v126 = &a1[v124];
            v127 = (a7 & 0xFFFFFFFFFFFFFFF8) * v123;
            v128 = (unint64_t)&a6[a5] + v127;
            v129 = (unint64_t)a6 + v127;
            v131 = v113 < v125 && (unint64_t)v126 < v116;
            if ((v129 >= v116 || v113 >= v128) && !v131)
            {
              v133 = (float64x2_t *)((char *)a6 + v65 * v115 + 16);
              v134 = &a1[v117];
              v135 = vld1q_dup_f64(v134);
              v136 = v110;
              v137 = a5 & 0xFFFFFFFC;
              do
              {
                v138 = vmlsq_f64(*v136, v135, *v133);
                v136[-1] = vmlsq_f64(v136[-1], v135, v133[-1]);
                *v136 = v138;
                v133 += 2;
                v136 += 2;
                v137 -= 4;
              }
              while (v137);
              v118 = a5 & 0xFFFFFFFC;
              if (a5 == v109)
                goto LABEL_79;
            }
          }
          else
          {
            v118 = 0;
          }
          v119 = a5 - v118;
          v120 = &a6[v105 + v118];
          v121 = &a6[v118 + v17 * v115];
          do
          {
            v122 = *v121++;
            *v120 = *v120 - v122 * a1[v117];
            ++v120;
            --v119;
          }
          while (v119);
LABEL_79:
          --v115;
          ++v114;
          if (v104 >= v115)
            goto LABEL_101;
        }
      }
      if (fabs(a1[v104 * v155]) < 2.22044605e-14)
        goto LABEL_118;
LABEL_75:
      v105 -= v17;
      ++v103;
      v107 = -8 * v17;
      v110 = (float64x2_t *)((char *)v110 - 8 * v17);
      if (v104-- < 1)
        goto LABEL_114;
      continue;
    }
    break;
  }
LABEL_101:
  v139 = *(_QWORD *)&a1[v104 * v155];
  if (fabs(*(double *)&v139) >= 2.22044605e-14)
  {
    if ((int)a5 < 1)
      goto LABEL_75;
    if (a5 >= 4uLL
      && (v113 >= (unint64_t)v150 + v151 * v103
       || (char *)v149 + v151 * v103 >= (char *)&a6[v17 * v158 + a5] + v112))
    {
      v143 = (float64x2_t)vdupq_lane_s64(v139, 0);
      v144 = a5 & 0xFFFFFFFC;
      v145 = v110;
      do
      {
        v146 = vdivq_f64(*v145, v143);
        v145[-1] = vdivq_f64(v145[-1], v143);
        *v145 = v146;
        v145 += 2;
        v144 -= 4;
      }
      while (v144);
      v140 = a5 & 0xFFFFFFFC;
      if (a5 == v109)
        goto LABEL_75;
    }
    else
    {
      v140 = 0;
    }
    v141 = a5 - v140;
    v142 = &a6[v140 + v105];
    do
    {
      *v142 = *v142 / a1[v104 * v155];
      ++v142;
      --v141;
    }
    while (v141);
    goto LABEL_75;
  }
LABEL_118:
  v147 = 0;
LABEL_115:
  if (v160)
    sub_1002989D0(v159);
  return v147;
}

void sub_10026E6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  if (a26 != a14)
  {
    if (a26)
      operator delete[]();
  }
  sub_1001D40CC((uint64_t)&a24);
  _Unwind_Resume(a1);
}

char **sub_10026E6EC(char **result, char *a2, int a3, int a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  char **v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  _BYTE *v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  int8x16x2_t v69;
  int8x16x3_t v70;
  int8x16x4_t v71;

  if (a4 <= 0)
    LODWORD(v4) = -(-a4 & 3);
  else
    LODWORD(v4) = a4 & 3;
  if (!(_DWORD)v4)
    LODWORD(v4) = 4;
  switch((_DWORD)v4)
  {
    case 3:
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = *result;
      v12 = result[1];
      v13 = result[2];
      if (a3 >= 17 && a4 == 3)
      {
        v14 = 0;
        v10 = 0;
        v15 = a2;
        do
        {
          v70.val[0] = *(int8x16_t *)&v11[v10];
          v70.val[1] = *(int8x16_t *)&v12[v10];
          v70.val[2] = *(int8x16_t *)&v13[v10];
          vst3q_s8(v15, v70);
          v15 += 48;
          v10 += 16;
          v14 += 0x3000000000;
        }
        while (v10 < (a3 - 16));
        v9 = v14 >> 32;
      }
      if ((int)v10 < a3)
      {
        v16 = v10;
        v17 = a3 - (unint64_t)v10;
        v18 = &v13[v16];
        v19 = &v12[v16];
        v20 = &v11[v16];
        v21 = &a2[v9 + 1];
        do
        {
          v22 = *v20++;
          *(v21 - 1) = v22;
          v23 = *v19++;
          *v21 = v23;
          v24 = *v18++;
          v21[1] = v24;
          v21 += a4;
          --v17;
        }
        while (v17);
      }
      break;
    case 2:
      v25 = 0;
      LODWORD(v26) = 0;
      v27 = *result;
      v28 = result[1];
      if (a3 >= 17 && a4 == 2)
      {
        v29 = 0;
        v26 = 0;
        v30 = a2;
        do
        {
          v69.val[0] = *(int8x16_t *)&v27[v26];
          v69.val[1] = *(int8x16_t *)&v28[v26];
          vst2q_s8(v30, v69);
          v30 += 32;
          v26 += 16;
          v29 += 0x2000000000;
        }
        while (v26 < (a3 - 16));
        v25 = v29 >> 32;
      }
      if ((int)v26 < a3)
      {
        v31 = v26;
        v32 = a3 - (unint64_t)v26;
        v33 = &v28[v31];
        v34 = &v27[v31];
        v35 = &a2[v25 + 1];
        do
        {
          v36 = *v34++;
          *(v35 - 1) = v36;
          v37 = *v33++;
          *v35 = v37;
          v35 += a4;
          --v32;
        }
        while (v32);
      }
      break;
    case 1:
      if (a3 < 1)
        return result;
      v5 = *result;
      v6 = a2;
      v7 = a3;
      do
      {
        v8 = *v5++;
        *v6 = v8;
        v6 += a4;
        --v7;
      }
      while (v7);
      break;
    default:
      v38 = 0;
      LODWORD(v39) = 0;
      v40 = *result;
      v41 = result[1];
      v42 = result[2];
      v43 = result[3];
      if (a3 >= 17 && a4 == 4)
      {
        v44 = 0;
        v39 = 0;
        v45 = a2;
        do
        {
          v71.val[0] = *(int8x16_t *)&v40[v39];
          v71.val[1] = *(int8x16_t *)&v41[v39];
          v71.val[2] = *(int8x16_t *)&v42[v39];
          v71.val[3] = *(int8x16_t *)&v43[v39];
          vst4q_s8(v45, v71);
          v45 += 64;
          v39 += 16;
          v44 += 0x4000000000;
        }
        while (v39 < (a3 - 16));
        v38 = v44 >> 32;
      }
      if ((int)v39 < a3)
      {
        v46 = v39;
        v47 = a3 - (unint64_t)v39;
        v48 = &v43[v46];
        v49 = &v42[v46];
        v50 = &v41[v46];
        v51 = &v40[v46];
        v52 = &a2[v38 + 1];
        do
        {
          v53 = *v51++;
          *(v52 - 1) = v53;
          v54 = *v50++;
          *v52 = v54;
          v55 = *v49++;
          v52[1] = v55;
          v56 = *v48++;
          v52[2] = v56;
          v52 += a4;
          --v47;
        }
        while (v47);
      }
      break;
  }
  if (a3 >= 1 && (int)v4 < a4)
  {
    v4 = (int)v4;
    v57 = (uint64_t)&a2[(int)v4 + 1];
    do
    {
      v58 = &result[v4];
      v59 = *v58;
      v60 = v58[1];
      v61 = v58[2];
      v62 = v58[3];
      v63 = (_BYTE *)v57;
      v64 = a3;
      do
      {
        v65 = *v59++;
        *(v63 - 1) = v65;
        v66 = *v60++;
        *v63 = v66;
        v67 = *v61++;
        v63[1] = v67;
        v68 = *v62++;
        v63[2] = v68;
        v63 += a4;
        --v64;
      }
      while (v64);
      v4 += 4;
      v57 += 4;
    }
    while (v4 < a4);
  }
  return result;
}

int16x8_t **sub_10026E9D0(int16x8_t **result, __int16 *a2, int a3, int a4)
{
  int v4;
  int16x8_t *v5;
  __int16 *v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  unint64_t v10;
  int16x8_t *v11;
  int16x8_t *v12;
  int16x8_t *v13;
  uint64_t v14;
  __int16 *v15;
  int16x8_t *v16;
  int16x8_t *v17;
  int16x8_t *v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  unint64_t v22;
  uint64_t v23;
  __int16 *v24;
  __int16 *v25;
  __int16 *v26;
  __int16 *v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  uint64_t v31;
  unint64_t v32;
  int16x8_t *v33;
  int16x8_t *v34;
  uint64_t v35;
  __int16 *v36;
  int16x8_t *v37;
  int16x8_t *v38;
  int16x8_t v39;
  int16x8_t v40;
  unint64_t v41;
  uint64_t v42;
  __int16 *v43;
  __int16 *v44;
  __int16 *v45;
  __int16 v46;
  __int16 v47;
  uint64_t v48;
  unint64_t v49;
  int16x8_t *v50;
  int16x8_t *v51;
  int16x8_t *v52;
  int16x8_t *v53;
  uint64_t v54;
  __int16 *v55;
  int16x8_t *v56;
  int16x8_t *v57;
  int16x8_t *v58;
  int16x8_t *v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  unint64_t v64;
  uint64_t v65;
  __int16 *v66;
  __int16 *v67;
  __int16 *v68;
  __int16 *v69;
  __int16 *v70;
  __int16 v71;
  __int16 v72;
  __int16 v73;
  __int16 v74;
  uint64_t v75;
  uint64_t v76;
  int16x8_t **v77;
  int16x8_t *v78;
  int16x8_t *v79;
  int16x8_t *v80;
  int16x8_t *v81;
  _WORD *v82;
  uint64_t v83;
  __int16 v84;
  __int16 v85;
  __int16 v86;
  __int16 v87;
  int16x8x2_t v88;
  int16x8x3_t v89;
  int16x8x4_t v90;

  if (a4 <= 0)
    v4 = -(-a4 & 3);
  else
    v4 = a4 & 3;
  if (!v4)
    v4 = 4;
  switch(v4)
  {
    case 3:
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = *result;
      v12 = result[1];
      v13 = result[2];
      if (a3 >= 9 && a4 == 3)
      {
        v14 = 0;
        v10 = 0;
        v15 = a2;
        v16 = *result;
        v17 = result[1];
        v18 = result[2];
        do
        {
          v19 = *v16++;
          v89.val[0] = v19;
          v20 = *v17++;
          v89.val[1] = v20;
          v21 = *v18++;
          v89.val[2] = v21;
          vst3q_s16(v15, v89);
          v15 += 24;
          v10 += 8;
          v14 += 0x1800000000;
        }
        while (v10 < (a3 - 8));
        v9 = v14 >> 32;
      }
      if ((int)v10 < a3)
      {
        v22 = a3 - (unint64_t)v10;
        v23 = v10;
        v24 = &v13->i16[v23];
        v25 = &v12->i16[v23];
        v26 = &v11->i16[v23];
        v27 = &a2[v9 + 1];
        do
        {
          v28 = *v26++;
          *(v27 - 1) = v28;
          v29 = *v25++;
          *v27 = v29;
          v30 = *v24++;
          v27[1] = v30;
          v27 += a4;
          --v22;
        }
        while (v22);
      }
      break;
    case 2:
      v31 = 0;
      LODWORD(v32) = 0;
      v33 = *result;
      v34 = result[1];
      if (a3 >= 9 && a4 == 2)
      {
        v35 = 0;
        v32 = 0;
        v36 = a2;
        v37 = *result;
        v38 = result[1];
        do
        {
          v39 = *v37++;
          v88.val[0] = v39;
          v40 = *v38++;
          v88.val[1] = v40;
          vst2q_s16(v36, v88);
          v36 += 16;
          v32 += 8;
          v35 += 0x1000000000;
        }
        while (v32 < (a3 - 8));
        v31 = v35 >> 32;
      }
      if ((int)v32 < a3)
      {
        v41 = a3 - (unint64_t)v32;
        v42 = v32;
        v43 = &v34->i16[v42];
        v44 = &v33->i16[v42];
        v45 = &a2[v31 + 1];
        do
        {
          v46 = *v44++;
          *(v45 - 1) = v46;
          v47 = *v43++;
          *v45 = v47;
          v45 += a4;
          --v41;
        }
        while (v41);
      }
      break;
    case 1:
      if (a3 < 1)
        return result;
      v5 = *result;
      v6 = a2;
      v7 = a3;
      do
      {
        v8 = v5->i16[0];
        v5 = (int16x8_t *)((char *)v5 + 2);
        *v6 = v8;
        v6 += a4;
        --v7;
      }
      while (v7);
      break;
    default:
      v48 = 0;
      LODWORD(v49) = 0;
      v50 = *result;
      v51 = result[1];
      v52 = result[2];
      v53 = result[3];
      if (a3 >= 9 && a4 == 4)
      {
        v54 = 0;
        v49 = 0;
        v55 = a2;
        v56 = *result;
        v57 = result[1];
        v58 = result[2];
        v59 = result[3];
        do
        {
          v60 = *v56++;
          v90.val[0] = v60;
          v61 = *v57++;
          v90.val[1] = v61;
          v62 = *v58++;
          v90.val[2] = v62;
          v63 = *v59++;
          v90.val[3] = v63;
          vst4q_s16(v55, v90);
          v55 += 32;
          v49 += 8;
          v54 += 0x2000000000;
        }
        while (v49 < (a3 - 8));
        v48 = v54 >> 32;
      }
      if ((int)v49 < a3)
      {
        v64 = a3 - (unint64_t)v49;
        v65 = v49;
        v66 = &v53->i16[v65];
        v67 = &v52->i16[v65];
        v68 = &v51->i16[v65];
        v69 = &v50->i16[v65];
        v70 = &a2[v48 + 2];
        do
        {
          v71 = *v69++;
          *(v70 - 2) = v71;
          v72 = *v68++;
          *(v70 - 1) = v72;
          v73 = *v67++;
          *v70 = v73;
          v74 = *v66++;
          v70[1] = v74;
          v70 += a4;
          --v64;
        }
        while (v64);
      }
      break;
  }
  if (a3 >= 1 && v4 < a4)
  {
    v75 = v4;
    v76 = (uint64_t)&a2[v4 + 2];
    do
    {
      v77 = &result[v75];
      v78 = *v77;
      v79 = v77[1];
      v80 = v77[2];
      v81 = v77[3];
      v82 = (_WORD *)v76;
      v83 = a3;
      do
      {
        v84 = v78->i16[0];
        v78 = (int16x8_t *)((char *)v78 + 2);
        *(v82 - 2) = v84;
        v85 = v79->i16[0];
        v79 = (int16x8_t *)((char *)v79 + 2);
        *(v82 - 1) = v85;
        v86 = v80->i16[0];
        v80 = (int16x8_t *)((char *)v80 + 2);
        *v82 = v86;
        v87 = v81->i16[0];
        v81 = (int16x8_t *)((char *)v81 + 2);
        v82[1] = v87;
        v82 += a4;
        --v83;
      }
      while (v83);
      v75 += 4;
      v76 += 8;
    }
    while (v75 < a4);
  }
  return result;
}

float32x4_t **sub_10026ECE8(float32x4_t **result, float *a2, int a3, int a4)
{
  int v4;
  float32x4_t *v5;
  float *v6;
  uint64_t v7;
  __int32 v8;
  uint64_t v9;
  unint64_t v10;
  float32x4_t *v11;
  float32x4_t *v12;
  float32x4_t *v13;
  uint64_t v14;
  float *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unint64_t v22;
  uint64_t v23;
  __int32 *v24;
  __int32 *v25;
  __int32 *v26;
  float *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  float32x4_t *v33;
  float32x4_t *v34;
  uint64_t v35;
  float *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  unint64_t v41;
  uint64_t v42;
  __int32 *v43;
  __int32 *v44;
  float *v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;
  uint64_t v54;
  float *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  float32x4_t *v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  unint64_t v64;
  uint64_t v65;
  __int32 *v66;
  __int32 *v67;
  __int32 *v68;
  __int32 *v69;
  float *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  float32x4_t **v77;
  float32x4_t *v78;
  float32x4_t *v79;
  float32x4_t *v80;
  float32x4_t *v81;
  _DWORD *v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  float32x4x2_t v88;
  float32x4x3_t v89;
  float32x4x4_t v90;

  if (a4 <= 0)
    v4 = -(-a4 & 3);
  else
    v4 = a4 & 3;
  if (!v4)
    v4 = 4;
  switch(v4)
  {
    case 3:
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = *result;
      v12 = result[1];
      v13 = result[2];
      if (a3 >= 5 && a4 == 3)
      {
        v14 = 0;
        v10 = 0;
        v15 = a2;
        v16 = *result;
        v17 = result[1];
        v18 = result[2];
        do
        {
          v19 = *v16++;
          v89.val[0] = v19;
          v20 = *v17++;
          v89.val[1] = v20;
          v21 = *v18++;
          v89.val[2] = v21;
          vst3q_f32(v15, v89);
          v15 += 12;
          v10 += 4;
          v14 += 0xC00000000;
        }
        while (v10 < (a3 - 4));
        v9 = v14 >> 32;
      }
      if ((int)v10 < a3)
      {
        v22 = a3 - (unint64_t)v10;
        v23 = 4 * v10;
        v24 = (__int32 *)((char *)v13 + v23);
        v25 = (__int32 *)((char *)v12 + v23);
        v26 = (__int32 *)((char *)v11 + v23);
        v27 = &a2[v9 + 1];
        do
        {
          v28 = *v26++;
          *((_DWORD *)v27 - 1) = v28;
          v29 = *v25++;
          *(_DWORD *)v27 = v29;
          v30 = *v24++;
          *((_DWORD *)v27 + 1) = v30;
          v27 += a4;
          --v22;
        }
        while (v22);
      }
      break;
    case 2:
      v31 = 0;
      LODWORD(v32) = 0;
      v33 = *result;
      v34 = result[1];
      if (a3 >= 5 && a4 == 2)
      {
        v35 = 0;
        v32 = 0;
        v36 = a2;
        v37 = *result;
        v38 = result[1];
        do
        {
          v39 = *v37++;
          v88.val[0] = v39;
          v40 = *v38++;
          v88.val[1] = v40;
          vst2q_f32(v36, v88);
          v36 += 8;
          v32 += 4;
          v35 += 0x800000000;
        }
        while (v32 < (a3 - 4));
        v31 = v35 >> 32;
      }
      if ((int)v32 < a3)
      {
        v41 = a3 - (unint64_t)v32;
        v42 = 4 * v32;
        v43 = (__int32 *)((char *)v34 + v42);
        v44 = (__int32 *)((char *)v33 + v42);
        v45 = &a2[v31 + 1];
        do
        {
          v46 = *v44++;
          *((_DWORD *)v45 - 1) = v46;
          v47 = *v43++;
          *(_DWORD *)v45 = v47;
          v45 += a4;
          --v41;
        }
        while (v41);
      }
      break;
    case 1:
      if (a3 < 1)
        return result;
      v5 = *result;
      v6 = a2;
      v7 = a3;
      do
      {
        v8 = v5->i32[0];
        v5 = (float32x4_t *)((char *)v5 + 4);
        *(_DWORD *)v6 = v8;
        v6 += a4;
        --v7;
      }
      while (v7);
      break;
    default:
      v48 = 0;
      LODWORD(v49) = 0;
      v50 = *result;
      v51 = result[1];
      v52 = result[2];
      v53 = result[3];
      if (a3 >= 5 && a4 == 4)
      {
        v54 = 0;
        v49 = 0;
        v55 = a2;
        v56 = *result;
        v57 = result[1];
        v58 = result[2];
        v59 = result[3];
        do
        {
          v60 = *v56++;
          v90.val[0] = v60;
          v61 = *v57++;
          v90.val[1] = v61;
          v62 = *v58++;
          v90.val[2] = v62;
          v63 = *v59++;
          v90.val[3] = v63;
          vst4q_f32(v55, v90);
          v55 += 16;
          v49 += 4;
          v54 += 0x1000000000;
        }
        while (v49 < (a3 - 4));
        v48 = v54 >> 32;
      }
      if ((int)v49 < a3)
      {
        v64 = a3 - (unint64_t)v49;
        v65 = 4 * v49;
        v66 = (__int32 *)((char *)v53 + v65);
        v67 = (__int32 *)((char *)v52 + v65);
        v68 = (__int32 *)((char *)v51 + v65);
        v69 = (__int32 *)((char *)v50 + v65);
        v70 = &a2[v48 + 2];
        do
        {
          v71 = *v69++;
          *((_DWORD *)v70 - 2) = v71;
          v72 = *v68++;
          *((_DWORD *)v70 - 1) = v72;
          v73 = *v67++;
          *(_DWORD *)v70 = v73;
          v74 = *v66++;
          *((_DWORD *)v70 + 1) = v74;
          v70 += a4;
          --v64;
        }
        while (v64);
      }
      break;
  }
  if (a3 >= 1 && v4 < a4)
  {
    v75 = v4;
    v76 = (uint64_t)&a2[v4 + 2];
    do
    {
      v77 = &result[v75];
      v78 = *v77;
      v79 = v77[1];
      v80 = v77[2];
      v81 = v77[3];
      v82 = (_DWORD *)v76;
      v83 = a3;
      do
      {
        v84 = v78->i32[0];
        v78 = (float32x4_t *)((char *)v78 + 4);
        *(v82 - 2) = v84;
        v85 = v79->i32[0];
        v79 = (float32x4_t *)((char *)v79 + 4);
        *(v82 - 1) = v85;
        v86 = v80->i32[0];
        v80 = (float32x4_t *)((char *)v80 + 4);
        *v82 = v86;
        v87 = v81->i32[0];
        v81 = (float32x4_t *)((char *)v81 + 4);
        v82[1] = v87;
        v82 += a4;
        --v83;
      }
      while (v83);
      v75 += 4;
      v76 += 16;
    }
    while (v75 < a4);
  }
  return result;
}

uint64_t **sub_10026F000(uint64_t **result, _QWORD *a2, int a3, int a4)
{
  int v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t **v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  if (a4 <= 0)
    v4 = -(-a4 & 3);
  else
    v4 = a4 & 3;
  if (!v4)
    v4 = 4;
  if (v4 == 3)
  {
    v9 = *result;
    v10 = result[1];
    v11 = result[2];
    if (a4 == 3 && a3 >= 2)
    {
      v12 = 0;
      v13 = a3 - 1;
      v14 = a2;
      v15 = *result;
      v16 = result[1];
      v17 = result[2];
      v18 = (a3 - 1);
      do
      {
        v19 = *v15++;
        v20 = v19;
        v21 = *v16++;
        v22 = v21;
        v23 = *v17++;
        *v14 = v20;
        v14[1] = v22;
        v14[2] = v23;
        v14 += 3;
        v12 += 0x300000000;
        --v18;
      }
      while (v18);
      v24 = v12 >> 32;
      if ((int)v13 >= a3)
        goto LABEL_42;
    }
    else
    {
      v13 = 0;
      v24 = 0;
      if (a3 <= 0)
        goto LABEL_42;
    }
    v57 = a3 - (unint64_t)v13;
    v58 = v13;
    v59 = &v11[v58];
    v60 = &v10[v58];
    v61 = &v9[v58];
    v62 = &a2[v24 + 1];
    do
    {
      v63 = *v61++;
      *(v62 - 1) = v63;
      v64 = *v60++;
      *v62 = v64;
      v65 = *v59++;
      v62[1] = v65;
      v62 += a4;
      --v57;
    }
    while (v57);
    goto LABEL_42;
  }
  if (v4 == 2)
  {
    v25 = *result;
    v26 = result[1];
    if (a4 == 2 && a3 >= 2)
    {
      v27 = 0;
      v28 = a3 - 1;
      v29 = a2;
      v30 = *result;
      v31 = result[1];
      v32 = (a3 - 1);
      do
      {
        v33 = *v30++;
        v34 = v33;
        v35 = *v31++;
        *v29 = v34;
        v29[1] = v35;
        v29 += 2;
        v27 += 0x200000000;
        --v32;
      }
      while (v32);
      v36 = v27 >> 32;
      if ((int)v28 >= a3)
        goto LABEL_42;
    }
    else
    {
      v28 = 0;
      v36 = 0;
      if (a3 <= 0)
        goto LABEL_42;
    }
    v66 = a3 - (unint64_t)v28;
    v67 = v28;
    v68 = &v26[v67];
    v69 = &v25[v67];
    v70 = &a2[v36 + 1];
    do
    {
      v71 = *v69++;
      *(v70 - 1) = v71;
      v72 = *v68++;
      *v70 = v72;
      v70 += a4;
      --v66;
    }
    while (v66);
    goto LABEL_42;
  }
  if (v4 != 1)
  {
    v37 = *result;
    v38 = result[1];
    v39 = result[2];
    v40 = result[3];
    if (a4 == 4 && a3 >= 2)
    {
      v41 = 0;
      v42 = a3 - 1;
      v43 = a2;
      v44 = *result;
      v45 = result[1];
      v46 = result[2];
      v47 = result[3];
      v48 = (a3 - 1);
      do
      {
        v49 = *v44++;
        v50 = v49;
        v51 = *v45++;
        v52 = v51;
        v53 = *v46++;
        v54 = v53;
        v55 = *v47++;
        *v43 = v50;
        v43[1] = v52;
        v43[2] = v54;
        v43[3] = v55;
        v43 += 4;
        v41 += 0x400000000;
        --v48;
      }
      while (v48);
      v56 = v41 >> 32;
      if ((int)v42 >= a3)
        goto LABEL_42;
    }
    else
    {
      v42 = 0;
      v56 = 0;
      if (a3 <= 0)
        goto LABEL_42;
    }
    v73 = a3 - (unint64_t)v42;
    v74 = v42;
    v75 = &v40[v74];
    v76 = &v39[v74];
    v77 = &v38[v74];
    v78 = &v37[v74];
    v79 = &a2[v56 + 2];
    do
    {
      v80 = *v78++;
      *(v79 - 2) = v80;
      v81 = *v77++;
      *(v79 - 1) = v81;
      v82 = *v76++;
      *v79 = v82;
      v83 = *v75++;
      v79[1] = v83;
      v79 += a4;
      --v73;
    }
    while (v73);
    goto LABEL_42;
  }
  if (a3 < 1)
    return result;
  v5 = *result;
  v6 = a2;
  v7 = a3;
  do
  {
    v8 = *v5++;
    *v6 = v8;
    v6 += a4;
    --v7;
  }
  while (v7);
LABEL_42:
  if (a3 >= 1 && v4 < a4)
  {
    v84 = v4;
    v85 = (uint64_t)&a2[v4 + 2];
    do
    {
      v86 = &result[v84];
      v87 = *v86;
      v88 = v86[1];
      v89 = v86[2];
      v90 = v86[3];
      v91 = (_QWORD *)v85;
      v92 = a3;
      do
      {
        v93 = *v87++;
        *(v91 - 2) = v93;
        v94 = *v88++;
        *(v91 - 1) = v94;
        v95 = *v89++;
        *v91 = v95;
        v96 = *v90++;
        v91[1] = v96;
        v91 += a4;
        --v92;
      }
      while (v92);
      v84 += 4;
      v85 += 32;
    }
    while (v84 < a4);
  }
  return result;
}

_QWORD *sub_10026F330(_QWORD *result)
{
  *result = 0;
  return result;
}

unsigned int **sub_10026F338(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *a1;
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (v3 == 1 && byte_1004AFF98 == 0)
    {
      sub_10026F4B4((uint64_t)v2);
      operator delete();
    }
  }
  return a1;
}

void sub_10026F3A0()
{
  sub_10026F3B4("basic_string");
}

void sub_10026F3B4(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10026F404(exception, a1);
}

void sub_10026F3F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_10026F404(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_10026F428(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_10022EEEC();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_10026F4B4(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;

  if (*(_QWORD *)(a1 + 8))
    *(_QWORD *)(a1 + 8) = 0;
  v2 = *(unsigned int **)(a1 + 24);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (v3 == 1 && byte_1004AFF98 == 0)
    {
      sub_10026F4B4();
      operator delete();
    }
  }
  return a1;
}

uint64_t sub_10026F528(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 8;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 112);
  return a1;
}

void sub_10026F5AC()
{
  uint64_t v0[2];

  v0[0] = 0;
  v0[1] = 0;
  qmemcpy((void *)sub_10029430C(v0, 46), "The library is compiled without OpenGL support", 46);
  sub_100294B74(-218, v0, "throw_no_ogl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/opengl.cpp", 60);
}

void sub_10026F604()
{
  uint64_t v0;

  sub_10029434C(&v0);
}

void sub_10026F620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10026F638(_DWORD *a1, uint64_t a2, double a3)
{
  unsigned int v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  NSObject *global_queue;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  _QWORD context[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;

  sub_100298C2C(&v18, &off_10044E620);
  if (v18)
  {
    sub_10029984C((_QWORD **)&off_10044E640);
    if (v18)
    {
      sub_10029984C((_QWORD **)&off_10044E658);
      if (v18)
        sub_10029984C((_QWORD **)&off_10044E670);
    }
  }
  if (*a1 == a1[1])
  {
LABEL_10:
    if (!v19)
      return;
    goto LABEL_11;
  }
  if (dword_100497D30)
    goto LABEL_9;
  do
    v6 = __ldaxr((unsigned int *)&dword_100497D30);
  while (__stlxr(v6 + 1, (unsigned int *)&dword_100497D30));
  if (v6)
  {
LABEL_9:
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 16))(a2, a1);
    goto LABEL_10;
  }
  if (dword_10048AC60 < 2 || a1[1] - *a1 < 2)
  {
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 16))(a2, a1);
  }
  else
  {
    v24 = 0;
    v7 = *(_QWORD *)a1;
    v8 = (double)(int)(HIDWORD(*(_QWORD *)a1) - *(_QWORD *)a1);
    v21[0] = a2;
    v21[1] = v7;
    v9 = 1.0;
    if (a3 >= 1.0)
      v9 = a3;
    if (v9 > v8)
      v9 = v8;
    if (a3 > 0.0)
      v8 = v9;
    v10 = (uint64_t)rint(v8);
    v22 = v10;
    v23 = *sub_1002895F4();
    v11 = sub_100297C30();
    v12 = sub_100295FA4((_DWORD *)(v11 + 16));
    v13 = v12[8];
    if (v13)
      v14 = (uint64_t *)(*(_QWORD *)(v12[4] + 8 * ((v13 + v12[7] - 1) / 0xAAuLL)) + 24 * ((v13 + v12[7] - 1) % 0xAAuLL));
    else
      v14 = v12 + 13;
    v25 = *v14;
    v15 = sub_100297C30();
    v26 = sub_100295FA4((_DWORD *)(v15 + 16));
    context[0] = off_10044E6A8;
    context[1] = v21;
    if ((_DWORD)v10 == 1)
    {
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 16))(a2, a1);
    }
    else
    {
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_apply_f((int)v10, global_queue, context, (void (__cdecl *)(void *, size_t))sub_10026FA88);
    }
    if (v24)
    {
      *sub_1002895F4() = v23;
      v17 = sub_1002895F4();
      *v17 = HIDWORD(*v17) + 4164903690 * *v17;
    }
    if (v25)
      sub_1002995A4(v25);
  }
  dword_100497D30 = 0;
  if (v19)
LABEL_11:
    sub_1002989D0(&v18);
}

void sub_10026F8B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_10026FABC((uint64_t)va);
  __cxa_begin_catch(a1);
  *(_DWORD *)(v6 + 3376) = 0;
  __cxa_rethrow();
}

void sub_10026F8E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_end_catch();
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10026F90C()
{
  uint64_t result;
  size_t v1;
  int v2;
  int v3[4];

  if (!dword_10048AC60)
    return 1;
  v2 = 0;
  v1 = 4;
  *(_QWORD *)v3 = 0x1900000006;
  sysctl(v3, 2u, &v2, &v1, 0, 0);
  result = v2;
  if (v2 <= 0)
  {
    v3[1] = 3;
    sysctl(v3, 2u, &v2, &v1, 0, 0);
    if (v2 <= 1)
      return 1;
    else
      return v2;
  }
  return result;
}

uint64_t sub_10026F9D4()
{
  uint64_t result;
  size_t v1;
  int v2;
  int v3[4];

  v2 = 0;
  v1 = 4;
  *(_QWORD *)v3 = 0x1900000006;
  sysctl(v3, 2u, &v2, &v1, 0, 0);
  result = v2;
  if (v2 <= 0)
  {
    v3[1] = 3;
    sysctl(v3, 2u, &v2, &v1, 0, 0);
    if (v2 <= 1)
      return 1;
    else
      return v2;
  }
  return result;
}

uint64_t sub_10026FA88(uint64_t a1, int a2)
{
  _DWORD v3[2];

  v3[0] = a2;
  v3[1] = a2 + 1;
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 16))(a1, v3);
}

uint64_t sub_10026FABC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 32))
  {
    *sub_1002895F4() = *(_QWORD *)(a1 + 24);
    v2 = sub_1002895F4();
    *v2 = HIDWORD(*v2) + 4164903690 * *v2;
  }
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    sub_1002995A4(v3);
  return a1;
}

void sub_10026FB20()
{
  operator delete();
}

void sub_10026FB34(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _DWORD v20[2];
  uint64_t v21;
  int v22;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 40);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 48);
    if (v6)
      sub_100299308(v5, v6);
  }
  sub_100298C2C(&v21, &off_10044E6D8);
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v7 + 40))
  {
    sub_100299510();
    v7 = *(_QWORD *)(a1 + 8);
  }
  *sub_1002895F4() = *(_QWORD *)(v7 + 24);
  v8 = *(_DWORD **)(a1 + 8);
  v9 = v8[2];
  v10 = v8[3];
  v11 = (int)v8[4];
  if ((v11 & 0x80000000) == 0)
    v12 = v8[4];
  else
    v12 = v11 + 1;
  v13 = (uint64_t)v12 >> 1;
  v14 = a2[1];
  v15 = v9 + (v13 + *a2 * (uint64_t)(v10 - v9)) / v11;
  v16 = v9 + (v13 + v14 * (uint64_t)(v10 - v9)) / v11;
  if (v14 < (int)v11)
    v17 = v16;
  else
    v17 = v10;
  v20[0] = v15;
  v20[1] = v17;
  if (v21)
  {
    sub_10029984C((_QWORD **)&off_10044E6F8);
    if (v21)
      sub_10029984C((_QWORD **)&off_10044E710);
  }
  (*(void (**)(_QWORD, _DWORD *))(***(_QWORD ***)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8), v20);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 32))
  {
    v18 = sub_1002895F4();
    v19 = *(_QWORD *)(a1 + 8);
    if (*v18 != *(_QWORD *)(v19 + 24))
      *(_BYTE *)(v19 + 32) = 1;
  }
  if (v22)
    sub_1002989D0(&v21);
}

void sub_10026FC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10026FC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10026FCA4(void **a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[2];

  if (!a1)
  {
    v4[0] = 0;
    v4[1] = 0;
    qmemcpy((void *)sub_10029430C(v4, 35), "NULL double pointer to file storage", 35);
    sub_100294B74(-27, v4, "cvReleaseFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 700);
  }
  v1 = *a1;
  if (*a1)
  {
    *a1 = 0;
    sub_10026FE60((uint64_t)v1, 0);
    sub_10021E204((_QWORD **)v1 + 4);
    j__free(*((void **)v1 + 16));
    *((_QWORD *)v1 + 16) = 0;
    sub_10021E204((_QWORD **)v1 + 2);
    v2 = *((_QWORD *)v1 + 47);
    if (v2)
    {
      sub_1002891D0(v2);
      operator delete();
    }
    v3 = *((_QWORD *)v1 + 48);
    if (v3)
    {
      if (*(_QWORD *)v3)
      {
        sub_100288628(*(_QWORD ***)v3);
        operator delete();
      }
      if (*(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      operator delete();
    }
    if (*((_QWORD *)v1 + 51))
      operator delete[]();
    if (*((_QWORD *)v1 + 53))
      operator delete[]();
    *((_QWORD *)v1 + 54) = 0;
    *((_OWORD *)v1 + 25) = 0u;
    *((_OWORD *)v1 + 26) = 0u;
    *((_OWORD *)v1 + 23) = 0u;
    *((_OWORD *)v1 + 24) = 0u;
    *((_OWORD *)v1 + 21) = 0u;
    *((_OWORD *)v1 + 22) = 0u;
    *((_OWORD *)v1 + 19) = 0u;
    *((_OWORD *)v1 + 20) = 0u;
    *((_OWORD *)v1 + 17) = 0u;
    *((_OWORD *)v1 + 18) = 0u;
    *((_OWORD *)v1 + 15) = 0u;
    *((_OWORD *)v1 + 16) = 0u;
    *((_OWORD *)v1 + 13) = 0u;
    *((_OWORD *)v1 + 14) = 0u;
    *((_OWORD *)v1 + 11) = 0u;
    *((_OWORD *)v1 + 12) = 0u;
    *((_OWORD *)v1 + 9) = 0u;
    *((_OWORD *)v1 + 10) = 0u;
    *((_OWORD *)v1 + 7) = 0u;
    *((_OWORD *)v1 + 8) = 0u;
    *((_OWORD *)v1 + 5) = 0u;
    *((_OWORD *)v1 + 6) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    *((_OWORD *)v1 + 4) = 0u;
    *((_OWORD *)v1 + 1) = 0u;
    *((_OWORD *)v1 + 2) = 0u;
    *(_OWORD *)v1 = 0u;
    j__free(v1);
  }
}

void sub_10026FE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10026FE60(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  char *v10;
  FILE *v11;
  gzFile_s *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _BYTE *v22;
  char v23;
  char *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
    sub_10029434C(a2);
  if (!a1)
  {
    v29 = 0;
    v30 = 0;
    qmemcpy((void *)sub_10029430C(&v29, 35), "NULL double pointer to file storage", 35);
    sub_100294B74(-27, &v29, "icvClose", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 667);
  }
  if (*(_BYTE *)(a1 + 432))
  {
    if (!*(_DWORD *)(a1 + 8) || !*(_QWORD *)(a1 + 104) && !*(_QWORD *)(a1 + 112) && !*(_QWORD *)(a1 + 376))
      goto LABEL_22;
    v4 = *(_QWORD *)(a1 + 56);
    if (v4 && *(int *)(v4 + 40) >= 1)
    {
      do
        sub_10027623C(a1);
      while (*(int *)(*(_QWORD *)(a1 + 56) + 40) > 0);
    }
    v6 = *(char **)(a1 + 120);
    v5 = *(char **)(a1 + 128);
    v7 = *(int *)(a1 + 88);
    if (v6 > &v5[v7])
    {
      *(_WORD *)v6 = 10;
      sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
      v5 = *(char **)(a1 + 128);
      LODWORD(v7) = *(_DWORD *)(a1 + 88);
    }
    v8 = *(_DWORD *)(a1 + 64);
    if ((_DWORD)v7 == v8)
    {
      *(_QWORD *)(a1 + 120) = &v5[(int)v7];
      v9 = *(_DWORD *)(a1 + 4);
      if (v9 != 8)
      {
LABEL_17:
        if (v9 != 24)
        {
LABEL_22:
          v11 = *(FILE **)(a1 + 104);
          if (v11)
          {
            fclose(v11);
          }
          else
          {
            v12 = *(gzFile_s **)(a1 + 112);
            if (v12)
              gzclose(v12);
          }
          *(_QWORD *)(a1 + 352) = 0;
          *(_QWORD *)(a1 + 368) = 0;
          *(_BYTE *)(a1 + 432) = 0;
          *(_QWORD *)(a1 + 104) = 0;
          *(_QWORD *)(a1 + 112) = 0;
          goto LABEL_27;
        }
        v10 = "}\n";
LABEL_21:
        sub_100272B2C((_QWORD *)a1, v10);
        goto LABEL_22;
      }
    }
    else
    {
      memset(v5, 32, v8);
      *(_DWORD *)(a1 + 88) = v8;
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 128) + v8;
      v9 = *(_DWORD *)(a1 + 4);
      if (v9 != 8)
        goto LABEL_17;
    }
    v10 = "</opencv_storage>\n";
    goto LABEL_21;
  }
LABEL_27:
  if (a2)
  {
    v13 = *(_QWORD **)(a1 + 376);
    if (v13)
    {
      v14 = v13[4];
      v15 = v13[1];
      v16 = (char *)(v15 + 8 * (v14 >> 12));
      if (v13[2] == v15)
      {
        v29 = 0;
        v30 = 0;
      }
      else
      {
        v17 = (char *)(*(_QWORD *)v16 + (v13[4] & 0xFFFLL));
        v18 = v13[5] + v14;
        v19 = (char *)(v15 + 8 * (v18 >> 12));
        v20 = (char *)(*(_QWORD *)v19 + (v18 & 0xFFF));
        v29 = 0;
        v30 = 0;
        if (v20 != v17)
        {
          v21 = &v20[512 * (v19 - v16)] - &v17[*(_QWORD *)v19] + *(_QWORD *)v16;
          if (v21)
          {
            v22 = (_BYTE *)sub_10029430C(&v29, v21);
            do
            {
              v23 = *v17++;
              *v22++ = v23;
              if (&v17[-*(_QWORD *)v16] == (char *)4096)
              {
                v24 = (char *)*((_QWORD *)v16 + 1);
                v16 += 8;
                v17 = v24;
              }
            }
            while (v17 != v20);
          }
        }
      }
      if (&v29 != a2)
      {
        sub_10029434C(a2);
        v25 = v29;
        if (v29)
        {
          v26 = (unsigned int *)(v29 - 4);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 + 1, v26));
          v25 = v29;
        }
        v28 = v30;
        *a2 = v25;
        a2[1] = v28;
      }
      sub_10029434C(&v29);
    }
  }
}

void sub_100270134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100270168(uint64_t a1, char *__s, unsigned int a3, int a4)
{
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  if (!a1)
    return 0;
  LODWORD(v5) = a3;
  v7 = *(_QWORD *)(a1 + 40);
  if ((a3 & 0x80000000) != 0)
  {
    v12 = *__s;
    if (*__s)
    {
      v5 = 0;
      v8 = 0;
      do
      {
        v8 = 33 * v8 + v12;
        v12 = __s[++v5];
      }
      while (v12);
    }
    else
    {
      v8 = 0;
      LODWORD(v5) = 0;
    }
  }
  else
  {
    v8 = 0;
    if (a3)
    {
      v9 = a3;
      v10 = __s;
      do
      {
        v11 = *v10++;
        v8 = 33 * v8 + v11;
        --v9;
      }
      while (v9);
    }
  }
  v13 = v8 & 0x7FFFFFFF;
  v14 = *(_DWORD *)(v7 + 108);
  if ((v14 & (v14 - 1)) != 0)
    v15 = v13 % v14;
  else
    v15 = (v14 - 1) & v13;
  v16 = *(_QWORD *)(*(_QWORD *)(v7 + 112) + 8 * v15);
  if (!v16)
  {
LABEL_22:
    if (a4)
    {
      v16 = *(_QWORD *)(v7 + 96);
      v20 = v16;
      if (v16)
      {
        *(_QWORD *)(v7 + 96) = *(_QWORD *)(v16 + 8);
        *(_DWORD *)v16 &= 0x3FFFFFFu;
        ++*(_DWORD *)(v7 + 104);
      }
      else
      {
        sub_100222D30(v7, 0, &v20);
        v16 = v20;
      }
      *(_DWORD *)v16 = v13;
      *(_QWORD *)(v16 + 8) = sub_10021E8FC(*(_QWORD *)(v7 + 72), __s, v5);
      *(_QWORD *)(v16 + 16) = v17;
      v18 = *(_QWORD *)(v7 + 112);
      *(_QWORD *)(v16 + 24) = *(_QWORD *)(v18 + 8 * v15);
      *(_QWORD *)(v18 + 8 * v15) = v16;
      return v16;
    }
    return 0;
  }
  while (*(_DWORD *)v16 != v13
       || *(_DWORD *)(v16 + 8) != (_DWORD)v5
       || memcmp(*(const void **)(v16 + 16), __s, (int)v5))
  {
    v16 = *(_QWORD *)(v16 + 24);
    if (!v16)
      goto LABEL_22;
  }
  return v16;
}

uint64_t sub_100270304(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  int v21;
  char v24[8];
  uint64_t v25;

  if (!a1)
    return 0;
  if (*(_DWORD *)a1 != 1280131417)
  {
    *(_QWORD *)v24 = 0;
    v25 = 0;
    qmemcpy((void *)sub_10029430C(v24, 31), "Invalid pointer to file storage", 31);
    sub_100294B74(-5, (uint64_t *)v24, "cvGetFileNode", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 786);
  }
  if (!a3)
  {
    *(_QWORD *)v24 = 0;
    v25 = 0;
    *(_OWORD *)sub_10029430C(v24, 16) = *(_OWORD *)"Null key element";
    sub_100294B74(-27, (uint64_t *)v24, "cvGetFileNode", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 789);
  }
  if (!a2)
  {
    v7 = 1;
LABEL_11:
    v8 = 0;
    v9 = 0;
    v21 = v7;
    v20 = v7 - 1;
    while (1)
    {
      v12 = a2;
      if (!a2)
      {
        v12 = sub_10021ECDC(*(_QWORD *)(a1 + 48), v8);
        if (!v12)
        {
          *(_QWORD *)v24 = 0;
          v25 = 0;
          v19 = sub_10029430C(v24, 18);
          *(_WORD *)(v19 + 16) = 27756;
          *(_OWORD *)v19 = *(_OWORD *)"map_node != __null";
          sub_100294B74(-215, (uint64_t *)v24, "cvGetFileNode", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 807);
        }
      }
      v13 = *(_DWORD *)v12 & 7;
      if (v13 != 6)
      {
        if (!v13)
          return 0;
        if (v13 != 5 || *(_DWORD *)(*(_QWORD *)(v12 + 16) + 40))
        {
          *(_QWORD *)v24 = 0;
          v25 = 0;
          qmemcpy((void *)sub_10029430C(v24, 49), "The node is neither a map nor an empty collection", 49);
          sub_100294B74(-2, (uint64_t *)v24, "cvGetFileNode", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 812);
        }
        return 0;
      }
      v14 = *(_QWORD *)(v12 + 16);
      v15 = *(_DWORD *)(v14 + 108);
      if ((v15 & (v15 - 1)) != 0)
      {
        v16 = *a3 % v15;
        v17 = *(_QWORD *)(*(_QWORD *)(v14 + 112) + 8 * v16);
        if (!v17)
          goto LABEL_25;
      }
      else
      {
        v16 = *a3 & (v15 - 1);
        v17 = *(_QWORD *)(*(_QWORD *)(v14 + 112) + 8 * v16);
        if (!v17)
          goto LABEL_25;
      }
      if (!a4)
      {
        while (*(_DWORD **)(v17 + 32) != a3)
        {
          v17 = *(_QWORD *)(v17 + 40);
          if (!v17)
            goto LABEL_25;
        }
        return v17;
      }
      do
      {
        if (*(_DWORD **)(v17 + 32) == a3)
        {
          sprintf(v24, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Duplicated key");
          sub_100295298(-212, "cvGetFileNode", v24, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 832);
        }
        v17 = *(_QWORD *)(v17 + 40);
      }
      while (v17);
LABEL_25:
      if (a4 && v8 == v20)
      {
        v9 = *(_QWORD *)(v14 + 96);
        *(_QWORD *)v24 = v9;
        if (v9)
        {
          *(_QWORD *)(v14 + 96) = *(_QWORD *)(v9 + 8);
          *(_DWORD *)v9 &= 0x3FFFFFFu;
          ++*(_DWORD *)(v14 + 104);
        }
        else
        {
          sub_100222D30(v14, 0, v24);
          v9 = *(_QWORD *)v24;
        }
        *(_QWORD *)(v9 + 32) = a3;
        v10 = *(_QWORD *)(v14 + 112);
        v11 = 8 * v16;
        *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + v11);
        *(_QWORD *)(v10 + v11) = v9;
      }
      if (++v8 == v21)
        return v9;
    }
  }
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 40);
    if (v7 >= 1)
      goto LABEL_11;
  }
  return 0;
}

void sub_1002706E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10029434C((uint64_t *)va);
  __break(1u);
}

void sub_1002706F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10027076C(const char *a1, int a2, char *a3, const char *a4, int a5)
{
  char v7[1024];

  sprintf(v7, "%s(%d): %s", a1, a2, a4);
  sub_100295298(-212, a3, v7, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", a5);
}

uint64_t sub_1002707FC(uint64_t a1, uint64_t a2, _BYTE *__s2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  size_t v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  if (!a1)
    return 0;
  v4 = a2;
  if (*(_DWORD *)a1 != 1280131417)
  {
    v30 = 0;
    v31 = 0;
    qmemcpy((void *)sub_10029430C(&v30, 31), "Invalid pointer to file storage", 31);
    sub_100294B74(-5, &v30, "cvGetFileNodeByName", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 861);
  }
  if (!__s2)
  {
    v30 = 0;
    v31 = 0;
    v6 = sub_10029430C(&v30, 17);
    *(_BYTE *)(v6 + 16) = 101;
    *(_OWORD *)v6 = *(_OWORD *)"Null element name";
    sub_100294B74(-27, &v30, "cvGetFileNodeByName", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 864);
  }
  v7 = *__s2;
  if (*__s2)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v9 = 33 * v9 + v7;
      v7 = __s2[++v8];
    }
    while (v7);
    v10 = v9 & 0x7FFFFFFF;
    v11 = v8;
    if (a2)
      goto LABEL_10;
  }
  else
  {
    v11 = 0;
    v10 = 0;
    v8 = 0;
    if (a2)
    {
LABEL_10:
      v12 = *(_DWORD *)a2 & 7;
      if (!v12)
        return 0;
      if (v12 != 5)
      {
        if (v12 == 6)
        {
          v13 = *(_QWORD *)(a2 + 16);
          v14 = *(_DWORD *)(v13 + 108);
          v15 = *(_QWORD *)(v13 + 112);
          if ((v14 & (v14 - 1)) != 0)
          {
            v16 = *(_QWORD *)(v15 + 8 * (v10 % v14));
            if (!v16)
              return 0;
            while (1)
            {
              v28 = *(_QWORD *)(v16 + 32);
              if (*(_DWORD *)v28 == v10 && *(_DWORD *)(v28 + 8) == v11 && !memcmp(*(const void **)(v28 + 16), __s2, v8))
                break;
              v17 = 0;
              v16 = *(_QWORD *)(v16 + 40);
              if (!v16)
                return v17;
            }
          }
          else
          {
            v16 = *(_QWORD *)(v15 + 8 * ((v14 - 1) & v10));
            if (!v16)
              return 0;
            while (1)
            {
              v18 = *(_QWORD *)(v16 + 32);
              if (*(_DWORD *)v18 == v10 && *(_DWORD *)(v18 + 8) == v11 && !memcmp(*(const void **)(v18 + 16), __s2, v8))
                break;
              v17 = 0;
              v16 = *(_QWORD *)(v16 + 40);
              if (!v16)
                return v17;
            }
          }
          return v16;
        }
LABEL_47:
        v30 = 0;
        v31 = 0;
        qmemcpy((void *)sub_10029430C(&v30, 49), "The node is neither a map nor an empty collection", 49);
        sub_100294B74(-2, &v30, "cvGetFileNodeByName", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 891);
      }
LABEL_46:
      if (*(_DWORD *)(*(_QWORD *)(v4 + 16) + 40))
        goto LABEL_47;
      return 0;
    }
  }
  v19 = *(_QWORD *)(a1 + 48);
  if (!v19)
    return 0;
  v20 = *(_DWORD *)(v19 + 40);
  if (v20 < 1)
    return 0;
  v21 = 0;
  while (1)
  {
    v22 = sub_10021ECDC(*(_QWORD *)(a1 + 48), v21);
    v4 = v22;
    v23 = *(_DWORD *)v22 & 7;
    if (v23 != 6)
    {
      if (!v23)
        return 0;
      if (v23 != 5)
        goto LABEL_47;
      goto LABEL_46;
    }
    v24 = *(_QWORD *)(v22 + 16);
    v25 = *(_DWORD *)(v24 + 108);
    v26 = (v25 & (v25 - 1)) != 0 ? v10 % v25 : (v25 - 1) & v10;
    v17 = *(_QWORD *)(*(_QWORD *)(v24 + 112) + 8 * v26);
    if (v17)
      break;
LABEL_25:
    v17 = 0;
    if (++v21 == v20)
      return v17;
  }
  while (1)
  {
    v27 = *(_QWORD *)(v17 + 32);
    if (*(_DWORD *)v27 == v10 && *(_DWORD *)(v27 + 8) == v11 && !memcmp(*(const void **)(v27 + 16), __s2, v8))
      return v17;
    v17 = *(_QWORD *)(v17 + 40);
    if (!v17)
      goto LABEL_25;
  }
}

void sub_100270B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100270B98(char *__s, uint64_t a2, unsigned int a3, const char *a4)
{
  char *v7;
  int v8;
  int v9;
  size_t v10;
  std::string::size_type v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void **i;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  std::string::size_type size;
  std::string *v23;
  std::string::size_type v24;
  __int128 *p_s2;
  uint64_t v26;
  __int128 v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  int v33;
  size_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  const char *v47;
  const char *v48;
  FILE *v49;
  char v50;
  int v51;
  const char *v52;
  const char *v53;
  __darwin_ct_rune_t v54;
  __darwin_ct_rune_t v55;
  __darwin_ct_rune_t v56;
  const char *v57;
  unsigned int v58;
  unint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  __darwin_ct_rune_t v66;
  __darwin_ct_rune_t v67;
  __darwin_ct_rune_t v68;
  __darwin_ct_rune_t v69;
  char *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  __darwin_ct_rune_t v74;
  __darwin_ct_rune_t v75;
  __darwin_ct_rune_t v76;
  __darwin_ct_rune_t v77;
  __darwin_ct_rune_t v78;
  __darwin_ct_rune_t v79;
  __darwin_ct_rune_t v80;
  __darwin_ct_rune_t v81;
  __darwin_ct_rune_t v82;
  __darwin_ct_rune_t v83;
  __darwin_ct_rune_t v84;
  __darwin_ct_rune_t v85;
  __darwin_ct_rune_t v86;
  __darwin_ct_rune_t v87;
  __darwin_ct_rune_t v88;
  __darwin_ct_rune_t v89;
  __darwin_ct_rune_t v90;
  __darwin_ct_rune_t v91;
  __darwin_ct_rune_t v92;
  __darwin_ct_rune_t v93;
  uint64_t v94;
  uint64_t v95;
  std::string::size_type v96;
  __int128 v97;
  std::string::size_type v98;
  std::string::size_type v99;
  std::string::size_type v102;
  std::string *v103;
  size_t v104;
  size_t v105;
  __int128 *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  int v115;
  int v116;
  char *v117;
  int v118;
  char *v119;
  int v120;
  uint64_t v121;
  FILE *v122;
  _QWORD *v123;
  gzFile_s *v124;
  FILE *v125;
  uint64_t v126;
  FILE *v127;
  _QWORD *v128;
  char v129;
  gzFile v130;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  FILE *v140;
  unint64_t v141;
  unint64_t v142;
  gzFile_s *v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  void *v147;
  uint64_t v148;
  _DWORD *v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  char *v154;
  char *v155;
  char *j;
  char *v158;
  char *v159;
  std::string::size_type v160;
  BOOL v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  char v166;
  int v167;
  BOOL v168;
  char *v172;
  uint64_t *v174;
  std::string *v175;
  char *v176;
  char *v177;
  int v178;
  char *v179;
  gzFile_s *v180;
  FILE *v181;
  uint64_t *v182;
  uint64_t v183;
  FILE *v184;
  _QWORD *v185;
  gzFile_s *v186;
  void **v187;
  void **k;
  char *v190;
  uint64_t v191;
  char v192;
  int v193;
  const char *v194;
  std::string __dst;
  void *__p;
  __int128 v197;
  int v198[2];
  int v199;
  uint64_t v200;
  uint64_t v201;
  __int128 __s2;
  unint64_t v203;
  char v204[8];
  __int128 v205;

  v7 = __s;
  *((_QWORD *)&v197 + 1) = 0;
  *(_QWORD *)v198 = 0;
  v8 = a3 & 3;
  if ((a3 & 3) != 0)
    v9 = (a3 >> 6) & 1;
  else
    LOBYTE(v9) = 0;
  __p = 0;
  *(_QWORD *)&v197 = 0;
  if ((a3 & 4) == 0)
  {
    v10 = strlen(__s);
    if (v10 > 0x7FFFFFFFFFFFFFF7)
      sub_10022EEEC();
    v11 = v10;
    v194 = a4;
    v192 = v9;
    v193 = v8;
    v191 = a2;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_dst = (std::string *)operator new(v13 + 1);
      __dst.__r_.__value_.__l.__size_ = v11;
      __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10;
      p_dst = &__dst;
      if (!v10)
      {
LABEL_13:
        p_dst->__r_.__value_.__s.__data_[v11] = 0;
        *(_QWORD *)v204 = 0;
        v205 = 0uLL;
        if (std::string::find(&__dst, 10, 0) != -1)
          goto LABEL_14;
        v20 = std::string::rfind(&__dst, 63, 0xFFFFFFFFFFFFFFFFLL);
        v21 = v20;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          size = __dst.__r_.__value_.__l.__size_;
          v23 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__l.__size_ >= v20)
            v24 = v20;
          else
            v24 = __dst.__r_.__value_.__l.__size_;
          if (v24 <= 0x7FFFFFFFFFFFFFF7)
          {
LABEL_29:
            if (v24 >= 0x17)
            {
              v94 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v24 | 7) != 0x17)
                v94 = v24 | 7;
              v95 = v94 + 1;
              p_s2 = (__int128 *)operator new(v94 + 1);
              *((_QWORD *)&__s2 + 1) = v24;
              v203 = v95 | 0x8000000000000000;
              *(_QWORD *)&__s2 = p_s2;
            }
            else
            {
              HIBYTE(v203) = v24;
              p_s2 = &__s2;
              if (!v24)
              {
                LOBYTE(__s2) = 0;
                v26 = v205;
                if ((unint64_t)v205 < *((_QWORD *)&v205 + 1))
                {
LABEL_32:
                  v27 = __s2;
                  *(_QWORD *)(v26 + 16) = v203;
                  *(_OWORD *)v26 = v27;
                  *(_QWORD *)&v205 = v26 + 24;
                  goto LABEL_176;
                }
LABEL_174:
                *(_QWORD *)&v205 = sub_100280184((void **)v204, (uint64_t)&__s2);
                if (SHIBYTE(v203) < 0)
                  operator delete((void *)__s2);
LABEL_176:
                if (v21 == -1 || (v96 = v21 + 1, v21 + 1 >= size))
                {
LABEL_14:
                  v15 = (void **)__p;
                  a4 = v194;
                  v8 = v193;
                  if (__p)
                  {
                    for (i = (void **)v197; i != v15; i -= 3)
                    {
                      if (*((char *)i - 1) < 0)
                        operator delete(*(i - 3));
                    }
                    *(_QWORD *)&v197 = v15;
                    operator delete(v15);
                  }
                  v17 = *(char **)v204;
                  __p = *(void **)v204;
                  v18 = (char *)v205;
                  v197 = v205;
                  v205 = 0uLL;
                  *(_QWORD *)v204 = 0;
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v190 = v18;
                    operator delete(__dst.__r_.__value_.__l.__data_);
                    v19 = v190;
                    if (v17 == v190)
                      goto LABEL_35;
                  }
                  else
                  {
                    v19 = v18;
                    if (v17 == v18)
                      goto LABEL_35;
                  }
                  v7 = v17;
                  if (v17[23] < 0)
                  {
                    v7 = *(char **)v17;
                    if ((v192 & 1) != 0)
                      goto LABEL_36;
                    goto LABEL_38;
                  }
LABEL_35:
                  if ((v192 & 1) != 0)
                  {
LABEL_36:
                    LOBYTE(v9) = 1;
LABEL_56:
                    a2 = v191;
                    goto LABEL_57;
                  }
LABEL_38:
                  HIBYTE(v203) = 6;
                  strcpy((char *)&__s2, "base64");
                  if (0xAAAAAAAAAAAAAAABLL * ((v19 - v17) >> 3) < 2 || v17 == v19)
                  {
                    LOBYTE(v9) = 0;
                  }
                  else
                  {
                    do
                    {
                      v29 = v17[23];
                      if ((v29 & 0x80u) == 0)
                        v30 = v17[23];
                      else
                        v30 = *((_QWORD *)v17 + 1);
                      if (v30 == 6)
                      {
                        if ((v29 & 0x80) != 0)
                        {
                          if (!memcmp(*(const void **)v17, &__s2, *((_QWORD *)v17 + 1)))
                            goto LABEL_55;
                        }
                        else
                        {
                          if (!v17[23])
                            goto LABEL_55;
                          v31 = 0;
                          while (v17[v31] == *((_BYTE *)&__s2 + v31))
                          {
                            if (v29 == ++v31)
                              goto LABEL_55;
                          }
                        }
                      }
                      v17 += 24;
                    }
                    while (v17 != v19);
                    v17 = v19;
LABEL_55:
                    LOBYTE(v9) = v17 != v19 && v193 != 0;
                  }
                  goto LABEL_56;
                }
                while (1)
                {
                  v98 = std::string::find(&__dst, 38, v96);
                  v99 = v98;
                  if (v98 == v96 && v98 != -1 || v96 + 1 >= size)
                    goto LABEL_180;
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v102 = __dst.__r_.__value_.__l.__size_;
                    if (__dst.__r_.__value_.__l.__size_ < v96)
LABEL_393:
                      sub_10026F3A0();
                    v103 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    v102 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                    if (v96 > HIBYTE(__dst.__r_.__value_.__r.__words[2]))
                      goto LABEL_393;
                    v103 = &__dst;
                  }
                  v104 = v102 - v96;
                  if (v104 >= v98 - v96)
                    v105 = v98 - v96;
                  else
                    v105 = v104;
                  if (v105 > 0x7FFFFFFFFFFFFFF7)
                    sub_10022EEEC();
                  if (v105 >= 0x17)
                    break;
                  HIBYTE(v203) = v105;
                  v106 = &__s2;
                  if (v105)
                    goto LABEL_204;
                  LOBYTE(__s2) = 0;
                  v107 = v205;
                  if ((unint64_t)v205 >= *((_QWORD *)&v205 + 1))
                    goto LABEL_205;
LABEL_179:
                  v97 = __s2;
                  *(_QWORD *)(v107 + 16) = v203;
                  *(_OWORD *)v107 = v97;
                  *(_QWORD *)&v205 = v107 + 24;
LABEL_180:
                  v96 = v99 + 1;
                  if (v99 >= size)
                    goto LABEL_14;
                }
                v108 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v105 | 7) != 0x17)
                  v108 = v105 | 7;
                v109 = v108 + 1;
                v106 = (__int128 *)operator new(v108 + 1);
                *((_QWORD *)&__s2 + 1) = v105;
                v203 = v109 | 0x8000000000000000;
                *(_QWORD *)&__s2 = v106;
LABEL_204:
                memmove(v106, (char *)v103 + v96, v105);
                *((_BYTE *)v106 + v105) = 0;
                v107 = v205;
                if ((unint64_t)v205 >= *((_QWORD *)&v205 + 1))
                {
LABEL_205:
                  *(_QWORD *)&v205 = sub_100280184((void **)v204, (uint64_t)&__s2);
                  if (SHIBYTE(v203) < 0)
                    operator delete((void *)__s2);
                  goto LABEL_180;
                }
                goto LABEL_179;
              }
            }
            memmove(p_s2, v23, v24);
            *((_BYTE *)p_s2 + v24) = 0;
            v26 = v205;
            if ((unint64_t)v205 < *((_QWORD *)&v205 + 1))
              goto LABEL_32;
            goto LABEL_174;
          }
        }
        else
        {
          size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          v23 = &__dst;
          if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) >= v20)
            v24 = v20;
          else
            v24 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if (v24 <= 0x7FFFFFFFFFFFFFF7)
            goto LABEL_29;
        }
        sub_10022EEEC();
      }
    }
    memcpy(p_dst, v7, v11);
    goto LABEL_13;
  }
LABEL_57:
  if (v7 && *v7)
  {
    v32 = strlen(v7);
    v33 = (a3 >> 2) & 1;
    if (v8 != 2)
      goto LABEL_72;
    goto LABEL_63;
  }
  if (!v8)
  {
    __s2 = 0uLL;
    if ((a3 & 4) != 0)
      v34 = 22;
    else
      v34 = 20;
    v35 = (void *)sub_10029430C(&__s2, v34);
    if ((a3 & 4) != 0)
      v36 = "NULL or empty filename";
    else
      v36 = "NULL or empty buffer";
    memcpy(v35, v36, v34);
    sub_100294B74(-27, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4198);
  }
  v32 = 0;
  v33 = 1;
  if (v8 == 2)
  {
LABEL_63:
    if (v33)
    {
      __s2 = 0uLL;
      qmemcpy((void *)sub_10029430C(&__s2, 68), "CV_STORAGE_APPEND and CV_STORAGE_MEMORY are not currently compatible", 68);
      sub_100294B74(-206, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4205);
    }
  }
LABEL_72:
  v37 = sub_1001D450C(0x1B8uLL);
  *(_QWORD *)v198 = v37;
  if (!v37)
  {
    __s2 = 0uLL;
    *(_WORD *)sub_10029430C(&__s2, 2) = 29542;
    sub_100294B74(-215, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4208);
  }
  *(_QWORD *)(v37 + 432) = 0;
  *(_OWORD *)(v37 + 400) = 0u;
  *(_OWORD *)(v37 + 416) = 0u;
  *(_OWORD *)(v37 + 368) = 0u;
  *(_OWORD *)(v37 + 384) = 0u;
  *(_OWORD *)(v37 + 336) = 0u;
  *(_OWORD *)(v37 + 352) = 0u;
  *(_OWORD *)(v37 + 304) = 0u;
  *(_OWORD *)(v37 + 320) = 0u;
  *(_OWORD *)(v37 + 272) = 0u;
  *(_OWORD *)(v37 + 288) = 0u;
  *(_OWORD *)(v37 + 240) = 0u;
  *(_OWORD *)(v37 + 256) = 0u;
  *(_OWORD *)(v37 + 208) = 0u;
  *(_OWORD *)(v37 + 224) = 0u;
  *(_OWORD *)(v37 + 176) = 0u;
  *(_OWORD *)(v37 + 192) = 0u;
  *(_OWORD *)(v37 + 144) = 0u;
  *(_OWORD *)(v37 + 160) = 0u;
  *(_OWORD *)(v37 + 112) = 0u;
  *(_OWORD *)(v37 + 128) = 0u;
  *(_OWORD *)(v37 + 80) = 0u;
  *(_OWORD *)(v37 + 96) = 0u;
  *(_OWORD *)(v37 + 48) = 0u;
  *(_OWORD *)(v37 + 64) = 0u;
  *(_OWORD *)(v37 + 16) = 0u;
  *(_OWORD *)(v37 + 32) = 0u;
  *(_OWORD *)v37 = 0u;
  sub_10021E0DC(0x40000);
  v39 = v38;
  v40 = *(_QWORD *)v198;
  if (a2)
    v41 = a2;
  else
    v41 = v39;
  *(_QWORD *)(*(_QWORD *)v198 + 16) = v39;
  *(_QWORD *)(v40 + 24) = v41;
  *(_DWORD *)v40 = 1280131417;
  *(_DWORD *)(v40 + 8) = v8 != 0;
  if ((v33 & 1) != 0)
  {
    *(_QWORD *)(v40 + 48) = 0;
    *(_QWORD *)(v40 + 64) = 0;
    *(_DWORD *)(v40 + 144) = 71;
    if (*(_DWORD *)(v40 + 8))
LABEL_94:
      operator new();
    v50 = 0;
LABEL_260:
    *(_QWORD *)(v40 + 352) = v7;
    *(_QWORD *)(v40 + 360) = v32;
LABEL_261:
    sub_100272C98((_QWORD *)v40, v204, (char *)0xE);
    if (v204[2] == 191 && v204[1] == 187 && v204[0] == 239)
      v133 = 3;
    else
      v133 = 0;
    if (!strncmp(&v204[v133], "%YAML", 5uLL))
    {
      v134 = *(_QWORD *)v198;
      v135 = 16;
    }
    else if (v204[v133] == 123)
    {
      v134 = *(_QWORD *)v198;
      v135 = 24;
    }
    else
    {
      v136 = strncmp(&v204[v133], "<?xml", 5uLL);
      v134 = *(_QWORD *)v198;
      if (v136)
      {
        if (*(_QWORD *)(*(_QWORD *)v198 + 360) == v133)
        {
          __s2 = 0uLL;
          v137 = sub_10029430C(&__s2, 19);
          *(_DWORD *)(v137 + 15) = 2037674093;
          *(_OWORD *)v137 = *(_OWORD *)"Input file is empty";
          sub_100294B74(-49, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4484);
        }
        __s2 = 0uLL;
        qmemcpy((void *)sub_10029430C(&__s2, 31), "Unsupported file storage format", 31);
        sub_100294B74(-49, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4486);
      }
      v135 = 8;
    }
    *(_DWORD *)(v134 + 4) = v135;
    if ((v50 & 1) != 0)
    {
      v138 = 0x100000;
      v139 = *(_QWORD *)v198;
      v140 = *(FILE **)(*(_QWORD *)v198 + 104);
      if (v140)
      {
LABEL_280:
        rewind(v140);
LABEL_292:
        *(_QWORD *)(v139 + 368) = 0;
        v144 = *(_QWORD *)v198;
        *(_QWORD *)(*(_QWORD *)v198 + 368) = v133;
        v145 = *(_QWORD *)(v144 + 16);
        v146 = sub_100222C34(0, 120, 32, v145);
        v146[27] = 256;
        v147 = (void *)sub_10021E610(v145, 0x800uLL);
        *((_QWORD *)v146 + 14) = v147;
        bzero(v147, 0x800uLL);
        v148 = *(_QWORD *)v198;
        *(_QWORD *)(*(_QWORD *)v198 + 40) = v146;
        v149 = sub_10021E968(0, 0x60uLL, 0x20uLL, *(_QWORD *)(v148 + 16));
        *(_QWORD *)(*(_QWORD *)v198 + 48) = v149;
        v150 = (_BYTE *)sub_1001D450C(v138 + 256);
        v151 = *(_QWORD *)v198;
        *(_QWORD *)(*(_QWORD *)v198 + 120) = v150;
        *(_QWORD *)(v151 + 128) = v150;
        *(_QWORD *)(v151 + 136) = &v150[v138];
        *v150 = 10;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v198 + 120) + 1) = 0;
        v152 = *(_QWORD *)v198;
        v153 = *(_DWORD *)(*(_QWORD *)v198 + 4);
        if (v153 == 24)
        {
          v176 = sub_10028547C(*(uint64_t *)v198, *(char **)(*(_QWORD *)v198 + 128));
          v177 = v176;
          if (v176 && !*(_DWORD *)(v152 + 152))
          {
            v178 = *v176;
            if (v178 == 91)
            {
              v182 = (uint64_t *)sub_10021FC6C(*(_QWORD *)(v152 + 48), 0);
              sub_100285B14(v152, v177, v182);
            }
            else
            {
              if (v178 != 123)
              {
                sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "left-brace of top level is missing");
                sub_100295298(-212, "icvJSONParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3831);
              }
              v179 = sub_10021FC6C(*(_QWORD *)(v152 + 48), 0);
              sub_100285720(v152, v177, (uint64_t)v179);
            }
            if (*(_DWORD *)(v152 + 152))
            {
              sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "Unexpected End-Of-File");
              sub_100295298(-212, "icvJSONParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3835);
            }
          }
          goto LABEL_371;
        }
        if (v153 != 16)
        {
          if (v153 == 8)
          {
            v154 = *(char **)(*(_QWORD *)v198 + 128);
            __dst.__r_.__value_.__r.__words[0] = 0;
            v201 = 0;
            v199 = 0;
            v155 = sub_1002811A8(*(uint64_t *)v198, v154, 2);
            if (*(_DWORD *)v155 != 1836597052 || v155[4] != 108)
            {
              sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "Valid XML should start with '<?xml ...?>'");
              sub_100295298(-212, "icvXMLParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2825);
            }
            for (j = sub_1002814E8(v152, v155, (uint64_t *)&__dst, &v200, &v199); *j; j = sub_1002811A8(v152, v164, 0))
            {
              v158 = sub_1002811A8(v152, j, 0);
              if (!*v158)
                break;
              v159 = sub_1002814E8(v152, v158, (uint64_t *)&__dst, &v200, &v199);
              v160 = __dst.__r_.__value_.__r.__words[0];
              v161 = v199 != 1 || __dst.__r_.__value_.__r.__words[0] == 0;
              if (v161 || strcmp(*(const char **)(__dst.__r_.__value_.__r.__words[0] + 16), "opencv_storage"))
              {
                sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "<opencv_storage> tag is missing");
                sub_100295298(-212, "icvXMLParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2855);
              }
              v162 = sub_10021FC6C(*(_QWORD *)(v152 + 48), 0);
              v163 = sub_100281BFC(v152, v159, v162, 0);
              v164 = sub_1002814E8(v152, v163, &v201, &v200, &v199);
              if (v199 != 2 || v160 != v201)
              {
                sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "</opencv_storage> tag is missing");
                sub_100295298(-212, "icvXMLParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2861);
              }
            }
          }
          goto LABEL_371;
        }
        v165 = sub_100283804(*(uint64_t *)v198, *(char **)(*(_QWORD *)v198 + 128), 0);
        if (!v165)
        {
LABEL_371:
          j__free(*(void **)(*(_QWORD *)v198 + 128));
          v71 = *(_QWORD *)v198;
          *(_QWORD *)(*(_QWORD *)v198 + 128) = 0;
          *(_QWORD *)(v71 + 136) = 0;
          *(_QWORD *)(v71 + 120) = 0;
LABEL_372:
          *(_BYTE *)(v71 + 432) = 1;
          goto LABEL_373;
        }
        v166 = 0;
        while (1)
        {
          while (1)
          {
            v167 = *v165;
            if (v167 == 45)
              break;
            if (v167 == 37)
            {
              v168 = *(_DWORD *)v165 == 1296128293 && v165[4] == 76;
              if (v168 && *(_QWORD *)v165 != 0x2E313A4C4D415925 && *(_QWORD *)v165 != 0x2E31204C4D415925)
              {
                sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "Unsupported YAML version (it must be 1.x)");
                sub_100295298(-212, "icvYMLParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1836);
              }
              *v165 = 0;
              goto LABEL_338;
            }
            if (v167 != 95 && (v167 - 48) >= 0xA && (v167 & 0xFFFFFFDF) - 65 > 0x19)
            {
              if (!*(_DWORD *)(v152 + 152))
              {
                sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "Invalid or unsupported syntax");
                sub_100295298(-212, "icvYMLParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1858);
              }
            }
            else if ((v166 & 1) != 0)
            {
              sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "The YAML streams must start with '---', except the first one");
              sub_100295298(-212, "icvYMLParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1852);
            }
LABEL_346:
            v172 = sub_100283804(v152, v165, 0);
            if (*(_WORD *)v172 == 11822 && v172[2] == 46)
              goto LABEL_398;
            v174 = (uint64_t *)sub_10021FC6C(*(_QWORD *)(v152 + 48), 0);
            v175 = sub_100283A8C(v152, v172, v174, 0, 0);
            if ((*(_DWORD *)v174 & 7u) <= 4)
            {
              sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "Only collections as YAML streams are supported by this parser");
              sub_100295298(-212, "icvYMLParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1869);
            }
            v172 = sub_100283804(v152, (char *)v175, 0);
            if (v172)
            {
LABEL_398:
              if (!*(_DWORD *)(v152 + 152))
              {
                v165 = sub_100283804(v152, v172 + 3, 0);
                v166 = 1;
                if (v165)
                  continue;
              }
            }
            goto LABEL_371;
          }
          if (*(_WORD *)v165 == 11565 && v165[2] == 45)
          {
            v165 += 3;
            goto LABEL_346;
          }
          if ((v166 & 1) == 0)
            goto LABEL_346;
LABEL_338:
          v165 = sub_100283804(v152, v165, 0);
          if (!v165)
            goto LABEL_371;
        }
      }
    }
    else
    {
      if ((v33 & 1) != 0)
      {
        v141 = *(_QWORD *)(*(_QWORD *)v198 + 360);
      }
      else
      {
        fseek(*(FILE **)(*(_QWORD *)v198 + 104), 0, 2);
        v141 = ftell(*(FILE **)(*(_QWORD *)v198 + 104));
      }
      v142 = 0x100000;
      if (v141 < 0x100000)
        v142 = v141;
      if (v142 <= 0x2400)
        v138 = 9216;
      else
        v138 = v142;
      v139 = *(_QWORD *)v198;
      v140 = *(FILE **)(*(_QWORD *)v198 + 104);
      if (v140)
        goto LABEL_280;
    }
    v143 = *(gzFile_s **)(v139 + 112);
    if (v143)
      gzrewind(v143);
    goto LABEL_292;
  }
  v42 = (char *)sub_10021E610(v39, v32 + 1);
  *(_QWORD *)(*(_QWORD *)v198 + 96) = v42;
  strcpy(v42, v7);
  v43 = *(_QWORD *)v198;
  v44 = *(char **)(*(_QWORD *)v198 + 96);
  v45 = strrchr(v44, 46);
  if (v45
    && v45[1] == 103
    && v45[2] == 122
    && ((v46 = v45[3], !v45[3]) || (v46 - 48) <= 9 && !v45[4]))
  {
    if (v8 == 2)
    {
      sub_10026FCA4((void **)v198);
      sub_1001F37D4(&__s2, "Appending data to compressed file is not implemented");
      sub_100294B74(-213, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4231);
    }
    if (v45[3])
    {
      v45[3] = 0;
      --v32;
    }
    else
    {
      LOBYTE(v46) = 51;
    }
    if (*(_DWORD *)(*(_QWORD *)v198 + 8))
      v129 = 119;
    else
      v129 = 114;
    LOBYTE(__s2) = v129;
    BYTE1(__s2) = 98;
    WORD1(__s2) = v46;
    v130 = gzopen(*(const char **)(*(_QWORD *)v198 + 96), (const char *)&__s2);
    v40 = *(_QWORD *)v198;
    *(_QWORD *)(*(_QWORD *)v198 + 112) = v130;
    if (v130)
    {
      v50 = 1;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 64) = 0;
      *(_DWORD *)(v40 + 144) = 71;
      if (*(_DWORD *)(v40 + 8))
        goto LABEL_93;
      goto LABEL_259;
    }
  }
  else
  {
    v47 = "wt";
    if (v8 == 2)
      v47 = "a+t";
    if (*(_DWORD *)(v43 + 8))
      v48 = v47;
    else
      v48 = "rt";
    v49 = fopen(v44, v48);
    v40 = *(_QWORD *)v198;
    *(_QWORD *)(*(_QWORD *)v198 + 104) = v49;
    if (v49)
    {
      v50 = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 64) = 0;
      *(_DWORD *)(v40 + 144) = 71;
      if (*(_DWORD *)(v40 + 8))
      {
LABEL_93:
        v51 = a3 & 0x38;
        if (v33)
          goto LABEL_94;
        if ((a3 & 0x38) == 0 && v7)
        {
          v52 = 0;
          v53 = 0;
          while (1)
          {
            if (*v7 == 46)
            {
              v53 = v52;
              v52 = v7;
            }
            else if (!*v7)
            {
              if (v52
                && strlen(v52) == 3
                && (v54 = __tolower(*v52), v54 == __tolower(46))
                && (v55 = __tolower(v52[1]), v55 == __tolower(103)))
              {
                v56 = __tolower(v52[2]);
                if (v56 == __tolower(122) && v53 != 0)
                  v57 = v53;
                else
                  v57 = v52;
                if (!v57)
                {
LABEL_164:
                  v51 = 16;
                  goto LABEL_165;
                }
              }
              else
              {
                v57 = v52;
                if (!v52)
                  goto LABEL_164;
              }
              if (strlen(v57) == 4)
              {
                v66 = __tolower(*v57);
                if (v66 == __tolower(46))
                {
                  v67 = __tolower(v57[1]);
                  if (v67 == __tolower(120))
                  {
                    v68 = __tolower(v57[2]);
                    if (v68 == __tolower(109))
                    {
                      v69 = __tolower(v57[3]);
                      if (v69 == __tolower(108))
                        goto LABEL_128;
                    }
                  }
                }
              }
              if (strlen(v57) == 7
                && (v74 = __tolower(*v57), v74 == __tolower(46))
                && (v75 = __tolower(v57[1]), v75 == __tolower(120))
                && (v76 = __tolower(v57[2]), v76 == __tolower(109))
                && (v77 = __tolower(v57[3]), v77 == __tolower(108))
                && (v78 = __tolower(v57[4]), v78 == __tolower(46))
                && (v79 = __tolower(v57[5]), v79 == __tolower(103))
                && (v80 = __tolower(v57[6]), v80 == __tolower(122)))
              {
LABEL_128:
                v51 = 8;
              }
              else
              {
                if (strlen(v57) != 5
                  || (v81 = __tolower(*v57), v81 != __tolower(46))
                  || (v82 = __tolower(v57[1]), v82 != __tolower(106))
                  || (v83 = __tolower(v57[2]), v83 != __tolower(115))
                  || (v84 = __tolower(v57[3]), v84 != __tolower(111))
                  || (v85 = __tolower(v57[4]), v85 != __tolower(110)))
                {
                  if (strlen(v57) != 8)
                    goto LABEL_164;
                  v86 = __tolower(*v57);
                  if (v86 != __tolower(46))
                    goto LABEL_164;
                  v87 = __tolower(v57[1]);
                  if (v87 != __tolower(106))
                    goto LABEL_164;
                  v88 = __tolower(v57[2]);
                  if (v88 != __tolower(115))
                    goto LABEL_164;
                  v89 = __tolower(v57[3]);
                  if (v89 != __tolower(111))
                    goto LABEL_164;
                  v90 = __tolower(v57[4]);
                  if (v90 != __tolower(110))
                    goto LABEL_164;
                  v91 = __tolower(v57[5]);
                  if (v91 != __tolower(46))
                    goto LABEL_164;
                  v92 = __tolower(v57[6]);
                  if (v92 != __tolower(103))
                    goto LABEL_164;
                  v93 = __tolower(v57[7]);
                  if (v93 != __tolower(122))
                    goto LABEL_164;
                }
                v51 = 24;
              }
LABEL_165:
              v40 = *(_QWORD *)v198;
              *(_DWORD *)(*(_QWORD *)v198 + 4) = v51;
              if (v51 != 8)
              {
LABEL_166:
                v58 = 17408;
                if (v8 != 2)
                  goto LABEL_115;
LABEL_114:
                fseek(*(FILE **)(v40 + 104), 0, 2);
                v40 = *(_QWORD *)v198;
                v51 = *(_DWORD *)(*(_QWORD *)v198 + 4);
                goto LABEL_115;
              }
LABEL_113:
              v58 = 25600;
              v51 = 8;
              if (v8 != 2)
                goto LABEL_115;
              goto LABEL_114;
            }
            ++v7;
          }
        }
        if ((a3 & 0x38) != 0)
        {
          *(_DWORD *)(v40 + 4) = v51;
          if (v51 != 8)
            goto LABEL_166;
          goto LABEL_113;
        }
        *(_DWORD *)(v40 + 4) = 8;
        v58 = 25600;
        v51 = 8;
        if (v8 == 2)
          goto LABEL_114;
LABEL_115:
        if (v51 == 8)
          v59 = 40;
        else
          v59 = 4;
        v60 = sub_10021E968(0, 0x60uLL, v59, *(_QWORD *)(v40 + 16));
        v61 = *(_QWORD *)v198;
        *(_QWORD *)(*(_QWORD *)v198 + 56) = v60;
        *(_DWORD *)(v61 + 12) = 1;
        *(_QWORD *)(v61 + 64) = 0x2000000000;
        v62 = sub_1001D450C(v58 + 1024);
        v63 = *(_QWORD *)v198;
        *(_QWORD *)(*(_QWORD *)v198 + 120) = v62;
        *(_QWORD *)(v63 + 128) = v62;
        *(_QWORD *)(v63 + 136) = v62 + v58;
        *(_QWORD *)(v63 + 384) = 0;
        *(_BYTE *)(v63 + 392) = v9;
        *(_DWORD *)(v63 + 396) = 0;
        *(_BYTE *)(v63 + 400) = 0;
        *(_QWORD *)(v63 + 408) = 0;
        *(_DWORD *)(v63 + 416) = 0;
        *(_QWORD *)(v63 + 424) = 0;
        v64 = *(_DWORD *)(v63 + 4);
        if (v64 == 16)
        {
          if (v8 == 2)
            v70 = "...\n---\n";
          else
            v70 = "%YAML:1.0\n---\n";
          sub_100272B2C((_QWORD *)v63, v70);
          v71 = *(_QWORD *)v198;
          *(_QWORD *)(*(_QWORD *)v198 + 296) = sub_100273D38;
          *(_QWORD *)(v71 + 304) = sub_100273F98;
          *(_QWORD *)(v71 + 312) = sub_100274168;
          *(_QWORD *)(v71 + 320) = sub_100274208;
          *(_QWORD *)(v71 + 328) = sub_100274358;
          *(_QWORD *)(v71 + 336) = sub_1002746D8;
          v72 = sub_100274A74;
        }
        else if (v64 == 8)
        {
          if (*(_QWORD *)(v63 + 104))
          {
            v65 = ftell(*(FILE **)(v63 + 104));
            v63 = *(_QWORD *)v198;
          }
          else
          {
            v65 = 0;
          }
          sub_10021E188(*(_QWORD *)(v63 + 16));
          v111 = v110;
          v112 = *(_QWORD *)v198;
          *(_QWORD *)(*(_QWORD *)v198 + 32) = v111;
          if (v8 == 2 && v65)
          {
            if ((int)v65 >= 1024)
              v113 = 1024;
            else
              v113 = v65;
            fseek(*(FILE **)(v112 + 104), -(int)v113, 2);
            v114 = (char *)sub_1001D450C((int)v113 + 2);
            v115 = -1;
            while (1)
            {
              v116 = ftell(*(FILE **)(*(_QWORD *)v198 + 104));
              v117 = sub_100272C98(*(_QWORD **)v198, v114, (char *)v113);
              v118 = (int)v117;
              if (!v117)
                break;
              v119 = strstr(v117, "</opencv_storage>");
              if (v119)
              {
                do
                {
                  v120 = (int)v119;
                  v119 = strstr(v119 + 17, "</opencv_storage>");
                }
                while (v119);
                v115 = v120 - v118 + v116;
              }
            }
            j__free(v114);
            if (v115 < 0)
            {
              sub_10026FCA4((void **)v198);
              __s2 = 0uLL;
              qmemcpy((void *)sub_10029430C(&__s2, 53), "Could not find </opencv_storage> in the end of file.\n", 53);
              sub_100294B74(-2, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4383);
            }
            v121 = *(_QWORD *)v198;
            v123 = (_QWORD *)(*(_QWORD *)v198 + 104);
            v122 = *(FILE **)(*(_QWORD *)v198 + 104);
            if (v122)
            {
              fclose(v122);
            }
            else
            {
              v124 = *(gzFile_s **)(*(_QWORD *)v198 + 112);
              if (v124)
                gzclose(v124);
            }
            *(_QWORD *)(v121 + 352) = 0;
            *(_QWORD *)(v121 + 368) = 0;
            *(_BYTE *)(v121 + 432) = 0;
            *v123 = 0;
            v123[1] = 0;
            v125 = fopen(*(const char **)(*(_QWORD *)v198 + 96), "r+t");
            *(_QWORD *)(*(_QWORD *)v198 + 104) = v125;
            if (!v125)
            {
              __s2 = 0uLL;
              *(_QWORD *)sub_10029430C(&__s2, 8) = 0x656C69663E2D7366;
              sub_100294B74(-215, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4387);
            }
            fseek(v125, v115, 0);
            sub_100272B2C(*(_QWORD **)v198, " <!-- resumed -->");
            fseek(*(FILE **)(*(_QWORD *)v198 + 104), 0, 2);
            sub_100272B2C(*(_QWORD **)v198, "\n");
          }
          else
          {
            if (a4)
            {
              if (!strcmp(a4, "UTF-16") || !strcmp(a4, "utf-16") || !strcmp(a4, "Utf-16"))
              {
                sub_10026FCA4((void **)v198);
                __s2 = 0uLL;
                qmemcpy((void *)sub_10029430C(&__s2, 57), "UTF-16 XML encoding is not supported! Use 8-bit encoding\n", 57);
                sub_100294B74(-5, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4342);
              }
              if (strlen(a4) >= 0x3E8)
              {
                __s2 = 0uLL;
                qmemcpy((void *)sub_10029430C(&__s2, 23), "strlen(encoding) < 1000", 23);
                sub_100294B74(-215, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4345);
              }
              sprintf((char *)&__s2, "<?xml version=\"1.0\" encoding=\"%s\"?>\n", a4);
              sub_100272B2C(*(_QWORD **)v198, (char *)&__s2);
            }
            else
            {
              sub_100272B2C((_QWORD *)v112, "<?xml version=\"1.0\"?>\n");
            }
            sub_100272B2C(*(_QWORD **)v198, "<opencv_storage>\n");
          }
          v71 = *(_QWORD *)v198;
          *(_QWORD *)(*(_QWORD *)v198 + 296) = sub_100272DE0;
          *(_QWORD *)(v71 + 304) = sub_10027300C;
          *(_QWORD *)(v71 + 312) = sub_1002730EC;
          *(_QWORD *)(v71 + 320) = sub_1002731B8;
          *(_QWORD *)(v71 + 328) = sub_100273314;
          *(_QWORD *)(v71 + 336) = sub_100273698;
          v72 = sub_100273C48;
        }
        else
        {
          if (v8 == 2)
          {
            if (fseek(*(FILE **)(v63 + 104), 0, 2))
            {
LABEL_139:
              __s2 = 0uLL;
              qmemcpy((void *)sub_10029430C(&__s2, 39), "Could not find '}' in the end of file.\n", 39);
              sub_100294B74(-2, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4447);
            }
            v73 = 0;
            while (fgetc(*(FILE **)(*(_QWORD *)v198 + 104)) != 125)
            {
              if (fseek(*(FILE **)(*(_QWORD *)v198 + 104), --v73, 2))
                goto LABEL_139;
            }
            fseek(*(FILE **)(*(_QWORD *)v198 + 104), v73, 2);
            v126 = *(_QWORD *)v198;
            v128 = (_QWORD *)(*(_QWORD *)v198 + 104);
            v127 = *(FILE **)(*(_QWORD *)v198 + 104);
            if (v127)
            {
              fclose(v127);
            }
            else
            {
              v180 = *(gzFile_s **)(*(_QWORD *)v198 + 112);
              if (v180)
                gzclose(v180);
            }
            *(_QWORD *)(v126 + 352) = 0;
            *(_QWORD *)(v126 + 368) = 0;
            *(_BYTE *)(v126 + 432) = 0;
            *v128 = 0;
            v128[1] = 0;
            v181 = fopen(*(const char **)(*(_QWORD *)v198 + 96), "r+t");
            *(_QWORD *)(*(_QWORD *)v198 + 104) = v181;
            if (!v181)
            {
              sub_1001F37D4(&__s2, "fs->file");
              sub_100294B74(-215, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4441);
            }
            fseek(v181, v73, 2);
            fputs(",", *(FILE **)(*(_QWORD *)v198 + 104));
          }
          else
          {
            sub_100272B2C((_QWORD *)v63, "{\n");
          }
          v71 = *(_QWORD *)v198;
          *(_DWORD *)(*(_QWORD *)v198 + 64) = 4;
          *(_QWORD *)(v71 + 296) = sub_100274B74;
          *(_QWORD *)(v71 + 304) = sub_100274D60;
          *(_QWORD *)(v71 + 312) = sub_100274F4C;
          *(_QWORD *)(v71 + 320) = sub_100274FEC;
          *(_QWORD *)(v71 + 328) = sub_100275168;
          *(_QWORD *)(v71 + 336) = sub_1002753E4;
          v72 = sub_10027578C;
        }
        *(_QWORD *)(v71 + 344) = v72;
        goto LABEL_372;
      }
LABEL_259:
      if (!v33)
        goto LABEL_261;
      goto LABEL_260;
    }
  }
LABEL_373:
  if ((variable initialization expression of PointTrail.isStarted() & 0x80000000) == 0)
  {
    v183 = *(_QWORD *)v198;
    v185 = (_QWORD *)(*(_QWORD *)v198 + 104);
    v184 = *(FILE **)(*(_QWORD *)v198 + 104);
    if (v184)
    {
      if (*(_DWORD *)(*(_QWORD *)v198 + 8))
        goto LABEL_385;
      fclose(v184);
LABEL_383:
      *(_QWORD *)(v183 + 352) = 0;
      *(_QWORD *)(v183 + 368) = 0;
      *(_BYTE *)(v183 + 432) = 0;
      *v185 = 0;
      v185[1] = 0;
      v183 = *(_QWORD *)v198;
      *(_BYTE *)(*(_QWORD *)v198 + 432) = 1;
      goto LABEL_385;
    }
    v186 = *(gzFile_s **)(*(_QWORD *)v198 + 112);
    if (v186)
    {
      if (*(_DWORD *)(*(_QWORD *)v198 + 8))
        goto LABEL_385;
      gzclose(v186);
      goto LABEL_383;
    }
    if (*(_QWORD *)(*(_QWORD *)v198 + 376) || *(_QWORD *)(*(_QWORD *)v198 + 352))
    {
      if (*(_DWORD *)(*(_QWORD *)v198 + 8))
        goto LABEL_385;
      goto LABEL_383;
    }
  }
  sub_10026FCA4((void **)v198);
  v183 = *(_QWORD *)v198;
LABEL_385:
  v187 = (void **)__p;
  if (__p)
  {
    for (k = (void **)v197; k != v187; k -= 3)
    {
      if (*((char *)k - 1) < 0)
        operator delete(*(k - 3));
    }
    operator delete(v187);
  }
  return v183;
}

void sub_100272880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  sub_10029434C((uint64_t *)&__p);
  sub_100272ABC(&a24);
  _Unwind_Resume(a1);
}

void sub_100272AA0()
{
  __cxa_end_catch();
  JUMPOUT(0x100272A64);
}

void sub_100272AAC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void **sub_100272ABC(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_100272B2C(_QWORD *a1, char *__s)
{
  const char *v2;
  _QWORD *v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  FILE *v12;
  gzFile_s *v13;
  uint64_t v14[2];

  v2 = __s;
  v3 = (_QWORD *)a1[47];
  if (v3)
  {
    v4 = strlen(__s);
    if (v4)
    {
      v5 = v4;
      v6 = v3[5];
      do
      {
        v8 = v3[2];
        v9 = v3[1];
        if (v8 == v9)
          v10 = 0;
        else
          v10 = ((v8 - v9) << 9) - 1;
        v11 = v3[4] + v6;
        if (v10 == v11)
        {
          sub_1002802EC((uint64_t)v3);
          v9 = v3[1];
          v11 = v3[5] + v3[4];
        }
        v7 = *v2++;
        *(_BYTE *)(*(_QWORD *)(v9 + ((v11 >> 9) & 0x7FFFFFFFFFFFF8)) + (v11 & 0xFFF)) = v7;
        v6 = v3[5] + 1;
        v3[5] = v6;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    v12 = (FILE *)a1[13];
    if (v12)
    {
      fputs(v2, v12);
    }
    else
    {
      v13 = (gzFile_s *)a1[14];
      if (!v13)
      {
        v14[0] = 0;
        v14[1] = 0;
        qmemcpy((void *)sub_10029430C(v14, 25), "The storage is not opened", 25);
        sub_100294B74(-2, v14, "icvPuts", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 405);
      }
      gzputs(v13, v2);
    }
  }
}

void sub_100272C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

char *sub_100272C98(_QWORD *a1, char *a2, char *buf)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  FILE *v12;
  gzFile_s *v14;
  uint64_t v15[2];

  v3 = a1[44];
  if (v3)
  {
    v4 = 0;
    v6 = a1[45];
    v5 = a1[46];
    v7 = v3 + v5;
    while (1)
    {
      v8 = v4;
      v9 = v5 + v4;
      if (v5 + v4 >= v6 || v4 >= (int)buf - 1)
        break;
      v11 = *(unsigned __int8 *)(v7 + v4);
      if (*(_BYTE *)(v7 + v4))
      {
        ++v4;
        a2[v8] = v11;
        if (v11 != 10)
          continue;
      }
      v9 = v5 + v8 + 1;
      LODWORD(v8) = v4;
      break;
    }
    a2[(int)v8] = 0;
    a1[46] = v9;
    if ((int)v8 <= 0)
      return 0;
    else
      return a2;
  }
  else
  {
    v12 = (FILE *)a1[13];
    if (v12)
    {
      return fgets(a2, (int)buf, v12);
    }
    else
    {
      v14 = (gzFile_s *)a1[14];
      if (!v14)
      {
        v15[0] = 0;
        v15[1] = 0;
        qmemcpy((void *)sub_10029430C(v15, 25), "The storage is not opened", 25);
        sub_100294B74(-2, v15, "icvGets", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 434);
      }
      return gzgets(v14, a2, (int)buf);
    }
  }
}

uint64_t sub_100272DA8()
{
  uint64_t v1;

  sub_10029434C(&v1);
  return 0;
}

void sub_100272DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

char *sub_100272DE0(uint64_t a1, char *a2, char a3, _BYTE *a4)
{
  uint64_t v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  _BYTE __src[16];
  __int128 v16;
  int v17;
  unsigned int v18;
  _OWORD v19[5];

  memset(v19, 0, sizeof(v19));
  if ((a3 & 7u) <= 4)
  {
    v14[0] = 0;
    v14[1] = 0;
    qmemcpy((void *)sub_10029430C(v14, 66), "Some collection type: CV_NODE_SEQ or CV_NODE_MAP must be specified", 66);
    sub_100294B74(-5, v14, "icvXMLStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2974);
  }
  if (a4 && *a4)
  {
    *(_QWORD *)&v19[0] = "type_id";
    *((_QWORD *)&v19[0] + 1) = a4;
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)&v19[v7] = 0;
  sub_100280BCC(a1, a2, 1, (void **)v19, 0);
  v8 = *(_DWORD *)(a1 + 68) & 0xFFFFFFDF;
  v17 = *(_DWORD *)(a1 + 64);
  v18 = v8;
  v16 = *(_OWORD *)(a1 + 72);
  sub_10021E480(*(_QWORD *)(a1 + 32), (uint64_t)__src);
  result = sub_10021FC6C(*(_QWORD *)(a1 + 56), __src);
  v10 = *(_DWORD *)(a1 + 64) + 2;
  *(_DWORD *)(a1 + 64) = v10;
  if ((a3 & 8) == 0)
  {
    v11 = *(char **)(a1 + 120);
    result = *(char **)(a1 + 128);
    v12 = *(int *)(a1 + 88);
    if (v11 > &result[v12])
    {
      *(_WORD *)v11 = 10;
      sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
      result = *(char **)(a1 + 128);
      LODWORD(v12) = *(_DWORD *)(a1 + 88);
      v10 = *(_DWORD *)(a1 + 64);
    }
    if ((_DWORD)v12 != v10)
    {
      memset(result, 32, v10);
      *(_DWORD *)(a1 + 88) = v10;
      result = *(char **)(a1 + 128);
    }
    *(_QWORD *)(a1 + 120) = &result[v10];
  }
  *(_DWORD *)(a1 + 68) = a3 & 0xF | 0x20;
  if (a2)
  {
    result = (char *)sub_10021E8FC(*(_QWORD *)(a1 + 32), a2, 0xFFFFFFFF);
    *(_QWORD *)(a1 + 72) = result;
  }
  else
  {
    v13 = 0;
    *(_DWORD *)(a1 + 72) = 0;
  }
  *(_QWORD *)(a1 + 80) = v13;
  return result;
}

void sub_100272FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10027300C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4[2];
  uint64_t __dst[2];
  __int128 v6;
  uint64_t v7;

  if (!*(_DWORD *)(*(_QWORD *)(a1 + 56) + 40))
  {
    v4[0] = 0;
    v4[1] = 0;
    v2 = sub_10029430C(v4, 20);
    *(_DWORD *)(v2 + 16) = 1734439968;
    *(_OWORD *)v2 = *(_OWORD *)"An extra closing tag";
    sub_100294B74(-2, v4, "icvXMLEndWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3017);
  }
  sub_100280BCC(a1, *(const char **)(a1 + 80), 2, 0, 0);
  sub_10021FD48(*(int **)(a1 + 56), __dst);
  *(_QWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  return sub_10021E508(*(_QWORD *)(a1 + 32), __dst);
}

void sub_1002730D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1002730EC(uint64_t a1, const char *a2, int a3)
{
  unsigned int v5;
  char *v6;
  BOOL v7;
  BOOL v8;
  int v9;
  _BYTE v11[106];

  if (a3 >= 0)
    v5 = a3;
  else
    v5 = -a3;
  v11[1] = 0;
  v6 = v11;
  do
  {
    *v6-- = v5 % 0xA + 48;
    v7 = v5 >= 9;
    v8 = v5 == 9;
    v5 /= 0xAu;
  }
  while (!v8 && v7);
  if (a3 < 0)
    *v6 = 45;
  else
    ++v6;
  v9 = strlen(v6);
  return sub_100277464(a1, a2, v6, v9);
}

void *sub_1002731B8(uint64_t a1, const char *a2, double a3)
{
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  char __dst[128];

  if ((~HIDWORD(a3) & 0x7FF00000) != 0)
  {
    v6 = (uint64_t)rint(a3);
    if ((double)(int)v6 == a3)
    {
      sprintf(__dst, "%d.", v6);
    }
    else
    {
      v8 = __dst;
      sprintf(__dst, "%.16e", a3);
      if (__dst[0] == 45 || __dst[0] == 43)
        v8 = &__dst[1];
      do
      {
        v10 = *v8++;
        v9 = v10;
      }
      while ((v10 - 48) < 0xA);
      if (v9 == 44)
        *(v8 - 1) = 46;
    }
  }
  else
  {
    v5 = HIDWORD(a3) & 0x7FFFFFFF;
    if (LODWORD(a3))
      ++v5;
    if (v5 < 0x7FF00001)
    {
      if (a3 >= 0.0)
        v7 = ".Inf";
      else
        v7 = "-.Inf";
      strcpy(__dst, v7);
    }
    else
    {
      strcpy(__dst, ".Nan");
    }
  }
  v11 = strlen(__dst);
  return sub_100277464(a1, a2, __dst, v11);
}

void *sub_100273314(uint64_t a1, const char *a2, const char *a3, int a4)
{
  const char *v5;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  const char *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  char *v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  char *v24;
  unsigned int v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _BYTE v32[7];

  v5 = a3;
  if (!a3)
  {
    v29 = 0;
    v30 = 0;
    v8 = sub_10029430C(&v29, 19);
    *(_DWORD *)(v8 + 15) = 1919251566;
    *(_OWORD *)v8 = *(_OWORD *)"Null string pointer";
    sub_100294B74(-27, &v29, "icvXMLWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3122);
  }
  v9 = strlen(a3);
  v10 = v9;
  if (v9 > 4096)
  {
    v29 = 0;
    v30 = 0;
    qmemcpy((void *)sub_10029430C(&v29, 30), "The written string is too long", 30);
    sub_100294B74(-5, &v29, "icvXMLWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3126);
  }
  if (a4)
    v11 = 1;
  else
    v11 = v9 == 0;
  v12 = v11;
  if (v11 || *v5 != 34 || v5[v9 - 1] != 34)
  {
    v28 = a1;
    v31 = 34;
    v13 = &v31;
    v14 = v32;
    if (v9 >= 1)
    {
      v15 = v9;
      v13 = &v31;
      v16 = v5;
      do
      {
        while (1)
        {
          while (1)
          {
            v18 = *v16++;
            v17 = v18;
            if ((v18 & 0x80) == 0 && v17 != 32)
              break;
            *v14 = v17;
            v12 = 1;
            v13 = v14++;
            if (!--v15)
              goto LABEL_38;
          }
          if (v17 < 0x20u)
            break;
          if (v17 <= 0x3Eu && ((1 << v17) & 0x500000C400000000) != 0)
            break;
          *v14 = v17;
          v13 = v14++;
          if (!--v15)
            goto LABEL_38;
        }
        v20 = v13 + 2;
        *v14 = 38;
        switch(v17)
        {
          case '"':
            v21 = 1953461617;
            goto LABEL_30;
          case '&':
            v13[4] = 112;
            *(_WORD *)v20 = 28001;
            v22 = 5;
            break;
          case '\'':
            v21 = 1936683105;
LABEL_30:
            *(_DWORD *)v20 = v21;
            goto LABEL_31;
          case '<':
            v23 = 29804;
            goto LABEL_34;
          case '>':
            v23 = 29799;
LABEL_34:
            *(_WORD *)v20 = v23;
            v22 = 4;
            break;
          default:
            sprintf(v20, "#x%02x", v17);
LABEL_31:
            v22 = 6;
            break;
        }
        v24 = &v13[v22];
        *v24 = 59;
        v12 = 1;
        v13 = v24;
        v14 = v24 + 1;
        --v15;
      }
      while (v15);
    }
LABEL_38:
    a1 = v28;
    if (v12
      || (v25 = *(unsigned __int8 *)v5, v25 - 48 < 0xA)
      || (v26 = 1, v25 <= 0x2E) && ((1 << v25) & 0x680000000000) != 0)
    {
      v26 = 0;
      *v14 = 34;
      v14 = v13 + 2;
    }
    v10 = (_DWORD)v14 - &v31 - v26;
    *v14 = 0;
    v5 = &v32[v26 - 1];
  }
  return sub_100277464(a1, a2, v5, v10);
}

void sub_100273650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100273698(uint64_t a1, char *__s1, int a3)
{
  char *v4;
  uint64_t v6;
  int v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  char *v24;
  char *v25;
  const void *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  char *v31;
  int64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  int v38;
  char *v39;
  char *v40;
  const void *v41;
  char *v42;
  uint64_t v43;
  int v44;
  int v45;
  size_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  char *v51;
  char *v52;
  const void *v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = __s1;
  if (!__s1)
  {
    v58 = 0;
    v59 = 0;
    v6 = sub_10029430C(&v58, 12);
    *(_DWORD *)(v6 + 8) = 1953391981;
    *(_QWORD *)v6 = *(_QWORD *)"Null comment";
    sub_100294B74(-27, &v58, "icvXMLWriteComment", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3205);
  }
  if (strstr(__s1, "--"))
  {
    v58 = 0;
    v59 = 0;
    qmemcpy((void *)sub_10029430C(&v58, 49), "Double hyphen '--' is not allowed in the comments", 49);
    sub_100294B74(-5, &v58, "icvXMLWriteComment", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3208);
  }
  v7 = strlen(v4);
  v8 = strchr(v4, 10);
  v9 = v8;
  v10 = *(char **)(a1 + 120);
  if (a3 && !v8 && *(_QWORD *)(a1 + 136) - (_QWORD)v10 >= v7 + 5)
  {
    if ((unint64_t)v10 > *(_QWORD *)(a1 + 128) + *(int *)(a1 + 64))
      *v10++ = 32;
    goto LABEL_18;
  }
  v11 = *(char **)(a1 + 128);
  v12 = *(int *)(a1 + 88);
  if (v10 > &v11[v12])
  {
    *(_WORD *)v10 = 10;
    sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
    v11 = *(char **)(a1 + 128);
    LODWORD(v12) = *(_DWORD *)(a1 + 88);
  }
  v13 = *(_DWORD *)(a1 + 64);
  if ((_DWORD)v12 == v13)
  {
    v10 = &v11[(int)v12];
    *(_QWORD *)(a1 + 120) = v10;
    if (!v9)
      goto LABEL_18;
LABEL_15:
    strcpy(v10, "<!--");
    v16 = 4;
    goto LABEL_26;
  }
  v14 = v13;
  memset(v11, 32, v13);
  *(_DWORD *)(a1 + 88) = v13;
  v15 = *(_QWORD *)(a1 + 128);
  v10 = (char *)(v15 + v13);
  *(_QWORD *)(a1 + 120) = v15 + v14;
  if (v9)
    goto LABEL_15;
LABEL_18:
  v17 = v7 + 9;
  v18 = *(_QWORD *)(a1 + 136);
  if ((unint64_t)&v10[v7 + 9] >= v18)
  {
    v19 = *(_QWORD *)(a1 + 128);
    v20 = (_DWORD)v10 - v19;
    v21 = (3 * (v18 - v19) + (((3 * (v18 - v19)) & 0x8000000000000000) != 0)) >> 1;
    v22 = v17 + (_DWORD)v10 - v19;
    if (v22 <= (int)v21)
      v23 = v21;
    else
      v23 = v22;
    v24 = (char *)sub_1001D450C(v23 + 256);
    v25 = v24;
    v26 = *(const void **)(a1 + 128);
    *(_QWORD *)(a1 + 120) = &v24[*(_QWORD *)(a1 + 120) - (_QWORD)v26];
    if (v20 >= 1)
      memcpy(v24, v26, v20);
    *(_QWORD *)(a1 + 128) = v25;
    *(_QWORD *)(a1 + 136) = &v25[v23];
    v10 = &v25[v20];
  }
  sprintf(v10, "<!-- %s -->", v4);
  v16 = (int)strlen(v10);
LABEL_26:
  v27 = &v10[v16];
  *(_QWORD *)(a1 + 120) = &v10[v16];
  v28 = *(char **)(a1 + 128);
  v29 = *(int *)(a1 + 88);
  if (v27 > &v28[v29])
  {
    *(_WORD *)v27 = 10;
    sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
    v28 = *(char **)(a1 + 128);
    LODWORD(v29) = *(_DWORD *)(a1 + 88);
  }
  v30 = *(_DWORD *)(a1 + 64);
  if ((_DWORD)v29 == v30)
  {
    v31 = &v28[(int)v29];
    *(_QWORD *)(a1 + 120) = v31;
    if (!v9)
      return;
  }
  else
  {
    memset(v28, 32, v30);
    *(_DWORD *)(a1 + 88) = v30;
    v28 = *(char **)(a1 + 128);
    v31 = &v28[v30];
    *(_QWORD *)(a1 + 120) = v31;
    if (!v9)
      return;
  }
  if (v4)
  {
    while (1)
    {
      if (v9)
      {
        v32 = v9 - v4;
        v33 = (_DWORD)v9 - (_DWORD)v4 + 1;
        v34 = *(_QWORD *)(a1 + 136);
        if ((unint64_t)&v31[v33] >= v34)
        {
          v35 = (_DWORD)v31 - (_DWORD)v28;
          v36 = (3 * (v34 - (unint64_t)v28) + (((3 * (v34 - (_QWORD)v28)) & 0x8000000000000000) != 0)) >> 1;
          v37 = v33 + v35;
          if (v37 <= (int)v36)
            v38 = v36;
          else
            v38 = v37;
          v39 = (char *)sub_1001D450C(v38 + 256);
          v40 = v39;
          v41 = *(const void **)(a1 + 128);
          *(_QWORD *)(a1 + 120) = &v39[*(_QWORD *)(a1 + 120) - (_QWORD)v41];
          if (v35 >= 1)
            memcpy(v39, v41, v35);
          *(_QWORD *)(a1 + 128) = v40;
          *(_QWORD *)(a1 + 136) = &v40[v38];
          v31 = &v40[v35];
        }
        memcpy(v31, v4, v32 + 1);
        v42 = &v31[v32];
        v4 = v9 + 1;
        v9 = strchr(v9 + 1, 10);
        *(_QWORD *)(a1 + 120) = v42;
        v28 = *(char **)(a1 + 128);
        v43 = *(int *)(a1 + 88);
        if (v42 <= &v28[v43])
          goto LABEL_45;
      }
      else
      {
        v45 = strlen(v4);
        v46 = v45;
        v47 = *(_QWORD *)(a1 + 136);
        if ((unint64_t)&v31[v45] >= v47)
        {
          v48 = (_DWORD)v31 - (_DWORD)v28;
          v49 = (3 * (v47 - (unint64_t)v28) + (((3 * (v47 - (_QWORD)v28)) & 0x8000000000000000) != 0)) >> 1;
          if (v48 + v45 <= (int)v49)
            v50 = v49;
          else
            v50 = v48 + v45;
          v51 = (char *)sub_1001D450C(v50 + 256);
          v52 = v51;
          v53 = *(const void **)(a1 + 128);
          *(_QWORD *)(a1 + 120) = &v51[*(_QWORD *)(a1 + 120) - (_QWORD)v53];
          if (v48 >= 1)
            memcpy(v51, v53, v48);
          *(_QWORD *)(a1 + 128) = v52;
          *(_QWORD *)(a1 + 136) = &v52[v50];
          v31 = &v52[v48];
        }
        memcpy(v31, v4, v46);
        v4 = 0;
        v9 = 0;
        v42 = &v31[v46];
        *(_QWORD *)(a1 + 120) = v42;
        v28 = *(char **)(a1 + 128);
        v43 = *(int *)(a1 + 88);
        if (v42 <= &v28[v43])
          goto LABEL_45;
      }
      *(_WORD *)v42 = 10;
      sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
      v28 = *(char **)(a1 + 128);
      LODWORD(v43) = *(_DWORD *)(a1 + 88);
LABEL_45:
      v44 = *(_DWORD *)(a1 + 64);
      if ((_DWORD)v43 == v44)
      {
        v31 = &v28[(int)v43];
        *(_QWORD *)(a1 + 120) = v31;
        if (!v4)
          break;
      }
      else
      {
        memset(v28, 32, v44);
        *(_DWORD *)(a1 + 88) = v44;
        v28 = *(char **)(a1 + 128);
        v31 = &v28[v44];
        *(_QWORD *)(a1 + 120) = v31;
        if (!v4)
          break;
      }
    }
  }
  *(_DWORD *)v31 = 4074797;
  *(_QWORD *)(a1 + 120) = v31 + 3;
  v54 = *(char **)(a1 + 128);
  v55 = *(int *)(a1 + 88);
  if (v31 + 3 > &v54[v55])
  {
    *(_WORD *)(v31 + 3) = 10;
    sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
    v54 = *(char **)(a1 + 128);
    LODWORD(v55) = *(_DWORD *)(a1 + 88);
  }
  v56 = *(_DWORD *)(a1 + 64);
  if ((_DWORD)v55 == v56)
  {
    v57 = (int)v55;
  }
  else
  {
    v57 = v56;
    memset(v54, 32, v56);
    *(_DWORD *)(a1 + 88) = v56;
    v54 = *(char **)(a1 + 128);
  }
  *(_QWORD *)(a1 + 120) = &v54[v57];
}

void sub_100273C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100273C48(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  int v5;
  size_t v6;

  if (!*(_DWORD *)(a1 + 12))
  {
    if (*(int *)(*(_QWORD *)(a1 + 56) + 40) >= 1)
    {
      do
        sub_10027300C(a1);
      while (*(int *)(*(_QWORD *)(a1 + 56) + 40) > 0);
    }
    *(_DWORD *)(a1 + 64) = 0;
    v3 = *(char **)(a1 + 120);
    v2 = *(char **)(a1 + 128);
    v4 = *(int *)(a1 + 88);
    if (v3 <= &v2[v4])
    {
      v5 = 0;
      v6 = 0;
      if (!(_DWORD)v4)
      {
LABEL_9:
        *(_QWORD *)(a1 + 120) = &v2[v6];
        sub_100272B2C((_QWORD *)a1, "\n<!-- next stream -->\n");
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 128);
        return;
      }
    }
    else
    {
      *(_WORD *)v3 = 10;
      sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
      v2 = *(char **)(a1 + 128);
      v5 = *(_DWORD *)(a1 + 64);
      v6 = v5;
      if (*(_DWORD *)(a1 + 88) == v5)
        goto LABEL_9;
    }
    memset(v2, 32, v6);
    *(_DWORD *)(a1 + 88) = v5;
    v2 = *(char **)(a1 + 128);
    goto LABEL_9;
  }
}

char *sub_100273D38(uint64_t a1, const char *a2, char a3, _BYTE *a4)
{
  _BYTE *v6;
  unsigned int v7;
  unsigned int v8;
  const char *v10;
  const char *v11;
  uint64_t v12;
  char v13;
  char *result;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17[2];
  int __src;
  char v19[5120];

  if (!a4)
  {
    v6 = 0;
    __src = 0;
    v7 = a3 & 7;
    if (v7 > 4)
      goto LABEL_9;
LABEL_8:
    v17[0] = 0;
    v17[1] = 0;
    qmemcpy((void *)sub_10029430C(v17, 68), "Some collection type - CV_NODE_SEQ or CV_NODE_MAP, must be specified", 68);
    sub_100294B74(-5, v17, "icvYMLStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2011);
  }
  if (*a4)
    v6 = a4;
  else
    v6 = 0;
  __src = 0;
  v7 = a3 & 7;
  if (v7 <= 4)
    goto LABEL_8;
LABEL_9:
  v8 = a3 & 0xF | 0x20;
  if (!v6)
  {
    if ((a3 & 8) == 0)
    {
      v11 = 0;
      goto LABEL_28;
    }
    if (v7 == 6)
      v13 = 123;
    else
      v13 = 91;
    v8 = a3 & 7 | 0x28;
    v19[0] = v13;
    v19[1] = 0;
    goto LABEL_27;
  }
  if (*(_DWORD *)v6 == 1634625890 && *((_WORD *)v6 + 2) == 31090)
  {
    strcpy(v19, "!!binary |");
    v8 = 5;
LABEL_27:
    v11 = v19;
    goto LABEL_28;
  }
  if ((a3 & 8) != 0)
  {
    v8 = a3 & 7 | 0x28;
    v12 = 91;
    if (v7 == 6)
      v12 = 123;
    v15 = v6;
    v16 = v12;
    v10 = "!!%s %c";
  }
  else
  {
    v15 = v6;
    v10 = "!!%s";
  }
  v11 = v19;
  sprintf(v19, v10, v15, v16);
LABEL_28:
  sub_1002777A4(a1, a2, v11);
  __src = *(_DWORD *)(a1 + 68);
  result = sub_10021FC6C(*(_QWORD *)(a1 + 56), &__src);
  *(_DWORD *)(a1 + 68) = v8;
  if ((__src & 8) == 0)
    *(_DWORD *)(a1 + 64) += ((v8 >> 3) & 1) + 3;
  return result;
}

void sub_100273F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

int *sub_100273F98(uint64_t a1)
{
  int v2;
  int *v3;
  int *result;
  int v5;
  char *v6;
  char v8;
  _WORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 *v13;
  __int16 v14;
  uint64_t v15[2];
  int __dst;

  __dst = 0;
  v2 = *(_DWORD *)(a1 + 68);
  v3 = *(int **)(a1 + 56);
  if (!v3[10])
  {
    v15[0] = 0;
    v15[1] = 0;
    qmemcpy((void *)sub_10029430C(v15, 44), "EndWriteStruct w/o matching StartWriteStruct", 44);
    sub_100294B74(-2, v15, "icvYMLEndWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2059);
  }
  result = sub_10021FD48(v3, &__dst);
  if ((v2 & 8) != 0)
  {
    v6 = *(char **)(a1 + 120);
    if ((unint64_t)v6 > *(_QWORD *)(a1 + 128) + *(int *)(a1 + 64) && (v2 & 0x20) == 0)
      *v6++ = 32;
    if ((v2 & 7) == 6)
      v8 = 125;
    else
      v8 = 93;
    *v6 = v8;
    *(_QWORD *)(a1 + 120) = v6 + 1;
    v5 = __dst;
    if ((__dst & 8) != 0)
      goto LABEL_5;
  }
  else if ((v2 & 0x20) != 0)
  {
    v9 = *(_WORD **)(a1 + 120);
    result = *(int **)(a1 + 128);
    v10 = *(int *)(a1 + 88);
    if (v9 > (_WORD *)((char *)result + v10))
    {
      *v9 = 10;
      sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
      result = *(int **)(a1 + 128);
      LODWORD(v10) = *(_DWORD *)(a1 + 88);
    }
    v11 = *(_DWORD *)(a1 + 64);
    if ((_DWORD)v10 == v11)
    {
      v12 = (int)v10;
    }
    else
    {
      v12 = v11;
      memset(result, 32, v11);
      *(_DWORD *)(a1 + 88) = v11;
      result = *(int **)(a1 + 128);
    }
    v13 = (__int16 *)((char *)result + v12);
    if ((v2 & 7) == 6)
      v14 = 32123;
    else
      v14 = 23899;
    *v13 = v14;
    *(_QWORD *)(a1 + 120) = v13 + 1;
    v5 = __dst;
    if ((__dst & 8) != 0)
      goto LABEL_5;
  }
  else
  {
    v5 = __dst;
    if ((__dst & 8) != 0)
    {
LABEL_5:
      *(_DWORD *)(a1 + 68) = v5;
      return result;
    }
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 64) - ((v2 & 8) >> 3) - 3;
  *(_DWORD *)(a1 + 68) = v5;
  return result;
}

void sub_100274150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_100274168(uint64_t a1, const char *a2, int a3)
{
  unsigned int v4;
  char *v5;
  BOOL v6;
  _BYTE v8[106];

  if (a3 >= 0)
    v4 = a3;
  else
    v4 = -a3;
  v8[1] = 0;
  v5 = v8;
  do
  {
    *v5-- = v4 % 0xA + 48;
    v6 = v4 > 9;
    v4 /= 0xAu;
  }
  while (v6);
  if (a3 < 0)
    *v5 = 45;
  else
    ++v5;
  return sub_1002777A4(a1, a2, v5);
}

char *sub_100274208(uint64_t a1, const char *a2, double a3)
{
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  int v9;
  int v10;
  char __dst[128];

  if ((~HIDWORD(a3) & 0x7FF00000) != 0)
  {
    v6 = (uint64_t)rint(a3);
    if ((double)(int)v6 == a3)
    {
      sprintf(__dst, "%d.", v6);
    }
    else
    {
      v8 = __dst;
      sprintf(__dst, "%.16e", a3);
      if (__dst[0] == 45 || __dst[0] == 43)
        v8 = &__dst[1];
      do
      {
        v10 = *v8++;
        v9 = v10;
      }
      while ((v10 - 48) < 0xA);
      if (v9 == 44)
        *(v8 - 1) = 46;
    }
  }
  else
  {
    v5 = HIDWORD(a3) & 0x7FFFFFFF;
    if (LODWORD(a3))
      ++v5;
    if (v5 < 0x7FF00001)
    {
      if (a3 >= 0.0)
        v7 = ".Inf";
      else
        v7 = "-.Inf";
      strcpy(__dst, v7);
    }
    else
    {
      strcpy(__dst, ".Nan");
    }
  }
  return sub_1002777A4(a1, a2, __dst);
}

char *sub_100274358(uint64_t a1, const char *a2, const char *a3, int a4)
{
  const char *v5;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  int v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  char v16;
  unsigned __int8 v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  _BOOL4 v24;
  _BOOL4 v25;
  _BOOL4 v26;
  unsigned int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _BYTE v35[7];

  v5 = a3;
  if (!a3)
  {
    v32 = 0;
    v33 = 0;
    v8 = sub_10029430C(&v32, 19);
    *(_DWORD *)(v8 + 15) = 1919251566;
    *(_OWORD *)v8 = *(_OWORD *)"Null string pointer";
    sub_100294B74(-27, &v32, "icvYMLWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2128);
  }
  v9 = strlen(a3);
  if (v9 > 4096)
  {
    v32 = 0;
    v33 = 0;
    qmemcpy((void *)sub_10029430C(&v32, 30), "The written string is too long", 30);
    sub_100294B74(-5, &v32, "icvYMLWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2132);
  }
  v10 = 1;
  if (!a4 && v9)
  {
    v11 = *(unsigned __int8 *)v5;
    if (v11 == v5[v9 - 1] && (v11 == 34 || v11 == 39))
      return sub_1002777A4(a1, a2, v5);
    v10 = v11 == 32;
  }
  v31 = a1;
  v12 = a2;
  v13 = v35;
  v34 = 34;
  if (v9 >= 1)
  {
    v14 = v9;
    v15 = (unsigned __int8 *)v5;
    do
    {
      v17 = *v15++;
      v16 = v17;
      v18 = (v17 - 58);
      v19 = v17 & 0xDF;
      v20 = ((v17 & 0xDF) - 91);
      v21 = v17;
      v22 = (1 << (v17 - 32)) & 0x800000000800AB01;
      v24 = v17 - 32 > 0x3F || v22 == 0;
      v25 = v20 <= 0xE5 && v24;
      v26 = v18 <= 0xF5 && v25;
      v10 = v10 || v26;
      if ((v16 - 48) >= 0xAu && (v19 - 65) >= 0x1Au)
      {
        if (v21 < 0x20)
        {
          *v13 = 92;
          switch(v16)
          {
            case 9:
              v16 = 116;
              break;
            case 13:
              v16 = 114;
              break;
            case 10:
              v16 = 110;
              break;
            default:
              sprintf(v13 + 1, "x%02x", v16);
              v13 += 4;
              goto LABEL_14;
          }
          goto LABEL_45;
        }
        if (v16 - 34 <= 0x3A && ((1 << (v16 - 34)) & 0x400000000000021) != 0)
        {
          *v13 = 92;
LABEL_45:
          v13[1] = v16;
          v13 += 2;
          goto LABEL_14;
        }
      }
      *v13++ = v16;
LABEL_14:
      --v14;
    }
    while (v14);
  }
  a2 = v12;
  a1 = v31;
  if (v10
    || (v28 = *(unsigned __int8 *)v5, v28 - 48 < 0xA)
    || (v29 = 1, v28 <= 0x2E) && ((1 << v28) & 0x680000000000) != 0)
  {
    v29 = 0;
    *v13++ = 34;
  }
  *v13 = 0;
  v5 = &v35[v29 - 1];
  return sub_1002777A4(a1, a2, v5);
}

void sub_100274690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_1002746D8(uint64_t a1, char *__s, int a3)
{
  char *v4;
  int v6;
  char *result;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  char *v14;
  int64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  const void *v25;
  char *v26;
  uint64_t v27;
  int v28;
  int v29;
  size_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  char *v36;
  char *v37;
  const void *v38;
  uint64_t v39[2];

  v4 = __s;
  if (!__s)
  {
    v39[0] = 0;
    v39[1] = 0;
    v10 = sub_10029430C(v39, 12);
    *(_DWORD *)(v10 + 8) = 1953391981;
    *(_QWORD *)v10 = *(_QWORD *)"Null comment";
    sub_100294B74(-27, v39, "icvYMLWriteComment", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2190);
  }
  v6 = strlen(__s);
  result = strchr(v4, 10);
  v8 = result;
  v9 = *(char **)(a1 + 120);
  if (a3 && !result && *(_QWORD *)(a1 + 136) - (_QWORD)v9 >= v6 && v9 != *(char **)(a1 + 128))
  {
    *v9 = 32;
    v11 = v9 + 1;
    if (v4)
      goto LABEL_18;
    return result;
  }
  result = *(char **)(a1 + 128);
  v12 = *(int *)(a1 + 88);
  if (v9 > &result[v12])
  {
    *(_WORD *)v9 = 10;
    sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
    result = *(char **)(a1 + 128);
    LODWORD(v12) = *(_DWORD *)(a1 + 88);
  }
  v13 = *(_DWORD *)(a1 + 64);
  if ((_DWORD)v12 != v13)
  {
    memset(result, 32, v13);
    *(_DWORD *)(a1 + 88) = v13;
    result = *(char **)(a1 + 128);
    v11 = &result[v13];
    *(_QWORD *)(a1 + 120) = v11;
    if (!v4)
      return result;
    while (1)
    {
LABEL_18:
      *(_WORD *)v11 = 8227;
      v14 = v11 + 2;
      if (v8)
      {
        v15 = v8 - v4;
        v16 = (_DWORD)v8 - (_DWORD)v4 + 1;
        v17 = *(_QWORD *)(a1 + 136);
        if ((unint64_t)&v14[v16] >= v17)
        {
          v18 = *(_QWORD *)(a1 + 128);
          v19 = (_DWORD)v14 - v18;
          v20 = (3 * (v17 - v18) + (((3 * (v17 - v18)) & 0x8000000000000000) != 0)) >> 1;
          v21 = v16 + (_DWORD)v14 - v18;
          if (v21 <= (int)v20)
            v22 = v20;
          else
            v22 = v21;
          v23 = (char *)sub_1001D450C(v22 + 256);
          v24 = v23;
          v25 = *(const void **)(a1 + 128);
          *(_QWORD *)(a1 + 120) = &v23[*(_QWORD *)(a1 + 120) - (_QWORD)v25];
          if (v19 >= 1)
            memcpy(v23, v25, v19);
          *(_QWORD *)(a1 + 128) = v24;
          *(_QWORD *)(a1 + 136) = &v24[v22];
          v14 = &v24[v19];
        }
        memcpy(v14, v4, v15 + 1);
        v26 = &v14[v15];
        *(_QWORD *)(a1 + 120) = v26;
        v4 = v8 + 1;
        v8 = strchr(v8 + 1, 10);
        result = *(char **)(a1 + 128);
        v27 = *(int *)(a1 + 88);
        if (v26 <= &result[v27])
          goto LABEL_28;
      }
      else
      {
        v29 = strlen(v4);
        v30 = v29;
        v31 = *(_QWORD *)(a1 + 136);
        if ((unint64_t)&v14[v29] >= v31)
        {
          v32 = *(_QWORD *)(a1 + 128);
          v33 = (_DWORD)v14 - v32;
          v34 = (3 * (v31 - v32) + (((3 * (v31 - v32)) & 0x8000000000000000) != 0)) >> 1;
          if (v33 + v29 <= (int)v34)
            v35 = v34;
          else
            v35 = v33 + v29;
          v36 = (char *)sub_1001D450C(v35 + 256);
          v37 = v36;
          v38 = *(const void **)(a1 + 128);
          *(_QWORD *)(a1 + 120) = &v36[*(_QWORD *)(a1 + 120) - (_QWORD)v38];
          if (v33 >= 1)
            memcpy(v36, v38, v33);
          *(_QWORD *)(a1 + 128) = v37;
          *(_QWORD *)(a1 + 136) = &v37[v35];
          v14 = &v37[v33];
        }
        memcpy(v14, v4, v30);
        v8 = 0;
        v4 = 0;
        v26 = &v14[v30];
        *(_QWORD *)(a1 + 120) = v26;
        result = *(char **)(a1 + 128);
        v27 = *(int *)(a1 + 88);
        if (v26 <= &result[v27])
          goto LABEL_28;
      }
      *(_WORD *)v26 = 10;
      sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
      result = *(char **)(a1 + 128);
      LODWORD(v27) = *(_DWORD *)(a1 + 88);
LABEL_28:
      v28 = *(_DWORD *)(a1 + 64);
      if ((_DWORD)v27 == v28)
      {
        v11 = &result[(int)v27];
        *(_QWORD *)(a1 + 120) = v11;
        if (!v4)
          return result;
      }
      else
      {
        memset(result, 32, v28);
        *(_DWORD *)(a1 + 88) = v28;
        result = *(char **)(a1 + 128);
        v11 = &result[v28];
        *(_QWORD *)(a1 + 120) = v11;
        if (!v4)
          return result;
      }
    }
  }
  v11 = &result[(int)v12];
  *(_QWORD *)(a1 + 120) = v11;
  if (v4)
    goto LABEL_18;
  return result;
}

void sub_100274A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_100274A74(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  int v5;
  size_t v6;

  if (!*(_DWORD *)(a1 + 12))
  {
    if (*(int *)(*(_QWORD *)(a1 + 56) + 40) >= 1)
    {
      do
        sub_100273F98(a1);
      while (*(int *)(*(_QWORD *)(a1 + 56) + 40) > 0);
    }
    *(_DWORD *)(a1 + 64) = 0;
    v3 = *(char **)(a1 + 120);
    v2 = *(char **)(a1 + 128);
    v4 = *(int *)(a1 + 88);
    if (v3 <= &v2[v4])
    {
      v5 = 0;
      v6 = 0;
      if (!(_DWORD)v4)
      {
LABEL_9:
        *(_QWORD *)(a1 + 120) = &v2[v6];
        sub_100272B2C((_QWORD *)a1, "...\n");
        sub_100272B2C((_QWORD *)a1, "---\n");
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 128);
        return;
      }
    }
    else
    {
      *(_WORD *)v3 = 10;
      sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
      v2 = *(char **)(a1 + 128);
      v5 = *(_DWORD *)(a1 + 64);
      v6 = v5;
      if (*(_DWORD *)(a1 + 88) == v5)
        goto LABEL_9;
    }
    memset(v2, 32, v6);
    *(_DWORD *)(a1 + 88) = v5;
    v2 = *(char **)(a1 + 128);
    goto LABEL_9;
  }
}

char *sub_100274B74(uint64_t a1, const char *a2, char a3, uint64_t a4)
{
  uint64_t v4;
  int v7;
  int v8;
  char v9;
  char *result;
  uint64_t v11[2];
  int __src;
  char v13[5120];

  v4 = a4;
  __src = 0;
  if ((a3 & 7u) <= 4)
  {
    v11[0] = 0;
    v11[1] = 0;
    qmemcpy((void *)sub_10029430C(v11, 68), "Some collection type - CV_NODE_SEQ or CV_NODE_MAP, must be specified", 68);
    sub_100294B74(-5, v11, "icvJSONStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3965);
  }
  if (!a4)
    goto LABEL_11;
  if (!*(_BYTE *)a4)
  {
    v4 = 0;
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  if (*(_DWORD *)a4 == 1634625890 && *(_WORD *)(a4 + 4) == 31090)
  {
    v7 = 0;
    v13[0] = 0;
    v8 = 3;
    goto LABEL_16;
  }
  v7 = 1;
LABEL_12:
  v8 = a3 & 0xF | 0x20;
  if ((a3 & 7) == 6)
    v9 = 123;
  else
    v9 = 91;
  v13[0] = v9;
  v13[1] = 0;
LABEL_16:
  sub_100277EA0(a1, a2, v13);
  __src = *(_DWORD *)(a1 + 68);
  result = sub_10021FC6C(*(_QWORD *)(a1 + 56), &__src);
  *(_DWORD *)(a1 + 68) = v8;
  *(_DWORD *)(a1 + 64) += 4;
  if (v7)
    return (char *)(*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t))(a1 + 328))(a1, "type_id", v4, 1);
  return result;
}

void sub_100274D30(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

int *sub_100274D60(uint64_t a1)
{
  int *v2;
  int v3;
  int *result;
  int v5;
  unsigned int v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  char v12;
  uint64_t v13[2];

  v2 = *(int **)(a1 + 56);
  if (!v2[10])
  {
    v13[0] = 0;
    v13[1] = 0;
    qmemcpy((void *)sub_10029430C(v13, 44), "EndWriteStruct w/o matching StartWriteStruct", 44);
    sub_100294B74(-2, v13, "icvJSONEndWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4006);
  }
  LODWORD(v13[0]) = 0;
  v3 = *(_DWORD *)(a1 + 68);
  result = sub_10021FD48(v2, v13);
  v5 = *(_DWORD *)(a1 + 64) - 4;
  v6 = v13[0] & 0xFFFFFFDF;
  *(_DWORD *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 68) = v6;
  if ((v3 & 7u) >= 5)
  {
    v7 = *(_BYTE **)(a1 + 120);
    result = *(int **)(a1 + 128);
    if ((v3 & 8) != 0)
    {
LABEL_13:
      if (v7 > (_BYTE *)result + v5 && (v3 & 0x20) == 0)
        *v7++ = 32;
      if ((v3 & 7) == 6)
        v12 = 125;
      else
        v12 = 93;
      *v7 = v12;
      *(_QWORD *)(a1 + 120) = v7 + 1;
      return result;
    }
    if (v7 > (_BYTE *)result + *(int *)(a1 + 88))
      goto LABEL_10;
    *(_QWORD *)(a1 + 120) = v7 + 1;
    *v7 = 10;
    v10 = *(_BYTE **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v10 + 1;
    *v10 = 0;
    sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
    result = *(int **)(a1 + 128);
    *(_QWORD *)(a1 + 120) = result;
    v5 = *(_DWORD *)(a1 + 88);
    v7 = result;
    if (result <= (int *)((char *)result + v5))
    {
      v8 = *(_DWORD *)(a1 + 64);
      if (v5 != v8)
      {
LABEL_11:
        v9 = v8;
        memset(result, 32, v8);
        *(_DWORD *)(a1 + 88) = v8;
        result = *(int **)(a1 + 128);
        v5 = *(_DWORD *)(a1 + 64);
        goto LABEL_12;
      }
    }
    else
    {
LABEL_10:
      *(_WORD *)v7 = 10;
      sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
      result = *(int **)(a1 + 128);
      v5 = *(_DWORD *)(a1 + 88);
      v8 = *(_DWORD *)(a1 + 64);
      if (v5 != v8)
        goto LABEL_11;
    }
    v9 = v5;
LABEL_12:
    v7 = (char *)result + v9;
    *(_QWORD *)(a1 + 120) = (char *)result + v9;
    goto LABEL_13;
  }
  return result;
}

void sub_100274F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

char *sub_100274F4C(uint64_t a1, const char *a2, int a3)
{
  unsigned int v4;
  char *v5;
  BOOL v6;
  _BYTE v8[106];

  if (a3 >= 0)
    v4 = a3;
  else
    v4 = -a3;
  v8[1] = 0;
  v5 = v8;
  do
  {
    *v5-- = v4 % 0xA + 48;
    v6 = v4 > 9;
    v4 /= 0xAu;
  }
  while (v6);
  if (a3 < 0)
    *v5 = 45;
  else
    ++v5;
  return sub_100277EA0(a1, a2, v5);
}

char *sub_100274FEC(uint64_t a1, const char *a2, double a3)
{
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  int v9;
  int v10;
  size_t v11;
  char __dst[128];

  if ((~HIDWORD(a3) & 0x7FF00000) != 0)
  {
    v6 = (uint64_t)rint(a3);
    if ((double)(int)v6 == a3)
    {
      sprintf(__dst, "%d.", v6);
    }
    else
    {
      v8 = __dst;
      sprintf(__dst, "%.16e", a3);
      if (__dst[0] == 45 || __dst[0] == 43)
        v8 = &__dst[1];
      do
      {
        v10 = *v8++;
        v9 = v10;
      }
      while ((v10 - 48) < 0xA);
      if (v9 == 44)
        *(v8 - 1) = 46;
    }
  }
  else
  {
    v5 = HIDWORD(a3) & 0x7FFFFFFF;
    if (LODWORD(a3))
      ++v5;
    if (v5 < 0x7FF00001)
    {
      if (a3 >= 0.0)
        v7 = ".Inf";
      else
        v7 = "-.Inf";
      strcpy(__dst, v7);
    }
    else
    {
      strcpy(__dst, ".Nan");
    }
  }
  v11 = strlen(__dst);
  if (v11 && __dst[v11 - 1] == 46)
    *(_WORD *)&__dst[v11] = 48;
  return sub_100277EA0(a1, a2, __dst);
}

char *sub_100275168(uint64_t a1, const char *a2, const char *a3, int a4)
{
  const char *v5;
  uint64_t v8;
  int v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BYTE v20[7];

  v5 = a3;
  if (!a3)
  {
    v17 = 0;
    v18 = 0;
    v8 = sub_10029430C(&v17, 19);
    *(_DWORD *)(v8 + 15) = 1919251566;
    *(_OWORD *)v8 = *(_OWORD *)"Null string pointer";
    sub_100294B74(-27, &v17, "icvJSONWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4086);
  }
  v9 = strlen(a3);
  if (v9 > 4096)
  {
    v17 = 0;
    v18 = 0;
    qmemcpy((void *)sub_10029430C(&v17, 30), "The written string is too long", 30);
    sub_100294B74(-5, &v17, "icvJSONWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4090);
  }
  if (a4 || !v9 || (v10 = *(unsigned __int8 *)v5, v10 != v5[v9 - 1]) || v10 != 34 && v10 != 39)
  {
    v11 = v20;
    v19 = 34;
    if (v9 >= 1)
    {
      v12 = v9;
      while (2)
      {
        v14 = *v5++;
        v13 = v14;
        v15 = v14;
        switch(v14)
        {
          case 8:
            *(_WORD *)v11 = 25180;
            v11 += 2;
            goto LABEL_13;
          case 9:
            *(_WORD *)v11 = 29788;
            v11 += 2;
            goto LABEL_13;
          case 10:
            *(_WORD *)v11 = 28252;
            v11 += 2;
            goto LABEL_13;
          case 11:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 35:
          case 36:
          case 37:
          case 38:
            goto LABEL_17;
          case 12:
            *(_WORD *)v11 = 26204;
            v11 += 2;
            goto LABEL_13;
          case 13:
            *(_WORD *)v11 = 29276;
            v11 += 2;
            goto LABEL_13;
          case 34:
          case 39:
            goto LABEL_12;
          default:
            if (v13 == 92)
            {
LABEL_12:
              *v11 = 92;
              v11[1] = v15;
              v11 += 2;
            }
            else
            {
LABEL_17:
              *v11++ = v15;
            }
LABEL_13:
            if (--v12)
              continue;
            goto LABEL_22;
        }
      }
    }
LABEL_22:
    *(_WORD *)v11 = 34;
    v5 = &v19;
  }
  return sub_100277EA0(a1, a2, v5);
}

void sub_10027539C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_1002753E4(uint64_t a1, char *__s, int a3)
{
  char *v4;
  int v6;
  char *result;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  char *v14;
  int64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  const void *v25;
  char *v26;
  uint64_t v27;
  int v28;
  int v29;
  size_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  char *v36;
  char *v37;
  const void *v38;
  uint64_t v39[2];

  v4 = __s;
  if (!__s)
  {
    v39[0] = 0;
    v39[1] = 0;
    v10 = sub_10029430C(v39, 12);
    *(_DWORD *)(v10 + 8) = 1953391981;
    *(_QWORD *)v10 = *(_QWORD *)"Null comment";
    sub_100294B74(-27, v39, "icvJSONWriteComment", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4129);
  }
  v6 = strlen(__s);
  result = strchr(v4, 10);
  v8 = result;
  v9 = *(char **)(a1 + 120);
  if (a3 && !result && *(_QWORD *)(a1 + 136) - (_QWORD)v9 >= v6 && v9 != *(char **)(a1 + 128))
  {
    *v9 = 32;
    v11 = v9 + 1;
    if (v4)
      goto LABEL_18;
    return result;
  }
  result = *(char **)(a1 + 128);
  v12 = *(int *)(a1 + 88);
  if (v9 > &result[v12])
  {
    *(_WORD *)v9 = 10;
    sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
    result = *(char **)(a1 + 128);
    LODWORD(v12) = *(_DWORD *)(a1 + 88);
  }
  v13 = *(_DWORD *)(a1 + 64);
  if ((_DWORD)v12 != v13)
  {
    memset(result, 32, v13);
    *(_DWORD *)(a1 + 88) = v13;
    result = *(char **)(a1 + 128);
    v11 = &result[v13];
    *(_QWORD *)(a1 + 120) = v11;
    if (!v4)
      return result;
    while (1)
    {
LABEL_18:
      *(_WORD *)v11 = 12079;
      v14 = v11 + 3;
      v11[2] = 32;
      if (v8)
      {
        v15 = v8 - v4;
        v16 = (_DWORD)v8 - (_DWORD)v4 + 1;
        v17 = *(_QWORD *)(a1 + 136);
        if ((unint64_t)&v14[v16] >= v17)
        {
          v18 = *(_QWORD *)(a1 + 128);
          v19 = (_DWORD)v14 - v18;
          v20 = (3 * (v17 - v18) + (((3 * (v17 - v18)) & 0x8000000000000000) != 0)) >> 1;
          v21 = v16 + v19;
          if (v21 <= (int)v20)
            v22 = v20;
          else
            v22 = v21;
          v23 = (char *)sub_1001D450C(v22 + 256);
          v24 = v23;
          v25 = *(const void **)(a1 + 128);
          *(_QWORD *)(a1 + 120) = &v23[*(_QWORD *)(a1 + 120) - (_QWORD)v25];
          if (v19 >= 1)
            memcpy(v23, v25, v19);
          *(_QWORD *)(a1 + 128) = v24;
          *(_QWORD *)(a1 + 136) = &v24[v22];
          v14 = &v24[v19];
        }
        memcpy(v14, v4, v15 + 1);
        v26 = &v14[v15];
        *(_QWORD *)(a1 + 120) = &v14[v15];
        v4 = v8 + 1;
        v8 = strchr(v8 + 1, 10);
        result = *(char **)(a1 + 128);
        v27 = *(int *)(a1 + 88);
        if (&v14[v15] <= &result[v27])
          goto LABEL_28;
      }
      else
      {
        v29 = strlen(v4);
        v30 = v29;
        v31 = *(_QWORD *)(a1 + 136);
        if ((unint64_t)&v14[v29] >= v31)
        {
          v32 = *(_QWORD *)(a1 + 128);
          v33 = (_DWORD)v14 - v32;
          v34 = (3 * (v31 - v32) + (((3 * (v31 - v32)) & 0x8000000000000000) != 0)) >> 1;
          if (v33 + v29 <= (int)v34)
            v35 = v34;
          else
            v35 = v33 + v29;
          v36 = (char *)sub_1001D450C(v35 + 256);
          v37 = v36;
          v38 = *(const void **)(a1 + 128);
          *(_QWORD *)(a1 + 120) = &v36[*(_QWORD *)(a1 + 120) - (_QWORD)v38];
          if (v33 >= 1)
            memcpy(v36, v38, v33);
          *(_QWORD *)(a1 + 128) = v37;
          *(_QWORD *)(a1 + 136) = &v37[v35];
          v14 = &v37[v33];
        }
        memcpy(v14, v4, v30);
        v4 = 0;
        v8 = 0;
        v26 = &v14[v30];
        *(_QWORD *)(a1 + 120) = v26;
        result = *(char **)(a1 + 128);
        v27 = *(int *)(a1 + 88);
        if (v26 <= &result[v27])
          goto LABEL_28;
      }
      *(_WORD *)v26 = 10;
      sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
      result = *(char **)(a1 + 128);
      LODWORD(v27) = *(_DWORD *)(a1 + 88);
LABEL_28:
      v28 = *(_DWORD *)(a1 + 64);
      if ((_DWORD)v27 == v28)
      {
        v11 = &result[(int)v27];
        *(_QWORD *)(a1 + 120) = v11;
        if (!v4)
          return result;
      }
      else
      {
        memset(result, 32, v28);
        *(_DWORD *)(a1 + 88) = v28;
        result = *(char **)(a1 + 128);
        v11 = &result[v28];
        *(_QWORD *)(a1 + 120) = v11;
        if (!v4)
          return result;
      }
    }
  }
  v11 = &result[(int)v12];
  *(_QWORD *)(a1 + 120) = v11;
  if (v4)
    goto LABEL_18;
  return result;
}

void sub_100275774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10027578C(uint64_t result)
{
  uint64_t v1;
  int v2;
  _WORD *v3;
  uint64_t v4;

  if (!*(_DWORD *)(result + 12))
  {
    v1 = result;
    if (*(int *)(*(_QWORD *)(result + 56) + 40) >= 1)
    {
      do
        sub_100274D60(v1);
      while (*(int *)(*(_QWORD *)(v1 + 56) + 40) > 0);
    }
    v2 = 4;
    *(_DWORD *)(v1 + 64) = 4;
    v3 = *(_WORD **)(v1 + 120);
    result = *(_QWORD *)(v1 + 128);
    v4 = *(int *)(v1 + 88);
    if ((unint64_t)v3 > result + v4)
    {
      *v3 = 10;
      sub_100272B2C((_QWORD *)v1, *(char **)(v1 + 128));
      result = *(_QWORD *)(v1 + 128);
      LODWORD(v4) = *(_DWORD *)(v1 + 88);
      v2 = *(_DWORD *)(v1 + 64);
    }
    if ((_DWORD)v4 != v2)
    {
      memset((void *)result, 32, v2);
      *(_DWORD *)(v1 + 88) = v2;
      result = *(_QWORD *)(v1 + 128);
    }
    *(_QWORD *)(v1 + 120) = result;
  }
  return result;
}

void sub_100275840(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1)
  {
    v8 = -27;
LABEL_5:
    v13 = 0;
    v14 = 0;
    qmemcpy((void *)sub_10029430C(&v13, 31), "Invalid pointer to file storage", 31);
    sub_100294B74(v8, &v13, "cvStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4564);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    v8 = -5;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    v13 = 0;
    v14 = 0;
    qmemcpy((void *)sub_10029430C(&v13, 38), "The file storage is opened for reading", 38);
    sub_100294B74(-2, &v13, "cvStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4564);
  }
  sub_100275C88(a1, 0);
  v9 = *(_DWORD *)(a1 + 396);
  if (v9 == 1)
  {
    sub_100275E50(a1, 0);
    v9 = *(_DWORD *)(a1 + 396);
  }
  if ((a3 & 7) != 5 || v9 || a4 || !*(_BYTE *)(a1 + 392))
  {
    if (a4 && (*(_DWORD *)a4 == 1634625890 ? (v10 = *(unsigned __int16 *)(a4 + 4) == 31090) : (v10 = 0), v10))
    {
      if ((a3 & 7) != 5)
      {
        v13 = 0;
        v14 = 0;
        qmemcpy((void *)sub_10029430C(&v13, 55), "must set 'struct_flags |= CV_NODE_SEQ' if using Base64.", 55);
        sub_100294B74(-5, &v13, "cvStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4585);
      }
      if (v9)
      {
        v13 = 0;
        v14 = 0;
        qmemcpy((void *)sub_10029430C(&v13, 69), "function 'cvStartWriteStruct' calls cannot be nested if using Base64.", 69);
        sub_100294B74(-2, &v13, "cvStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4587);
      }
      (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))(a1 + 296))(a1, a2, a3, a4);
      if (*(_DWORD *)(a1 + 396))
        sub_100275E50(a1, 0);
      v11 = a1;
      v12 = 2;
    }
    else
    {
      if (v9 == 2)
      {
        v13 = 0;
        v14 = 0;
        sub_100294B74(-2, &v13, "cvStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4599);
      }
      (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))(a1 + 296))(a1, a2, a3, a4);
      if (*(_DWORD *)(a1 + 396))
        sub_100275E50(a1, 0);
      v11 = a1;
      v12 = 1;
    }
    sub_100275E50(v11, v12);
  }
  else
  {
    if (*(_BYTE *)(a1 + 400))
    {
      v13 = 0;
      v14 = 0;
      qmemcpy((void *)sub_10029430C(&v13, 36), "fs->is_write_struct_delayed == false", 36);
      sub_100294B74(-215, &v13, "make_write_struct_delayed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1252);
    }
    *(_DWORD *)(a1 + 416) = a3;
    if (a2)
    {
      strlen(a2);
      operator new[]();
    }
    *(_BYTE *)(a1 + 400) = 1;
  }
}

void sub_100275BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_100275C88(uint64_t a1, int a2)
{
  uint64_t v4;
  const std::string::value_type *v5;
  const std::string::value_type *v6;
  void (*v7)(uint64_t, std::string *, uint64_t, const char *);
  std::string *v8;
  unsigned int v9;
  std::string *p_p;
  std::string __p;
  std::string v12;

  if (*(_BYTE *)(a1 + 400))
  {
    memset(&v12, 0, sizeof(v12));
    memset(&__p, 0, sizeof(__p));
    v4 = *(unsigned int *)(a1 + 416);
    v5 = *(const std::string::value_type **)(a1 + 408);
    if (v5 && *v5)
      std::string::assign(&v12, v5);
    v6 = *(const std::string::value_type **)(a1 + 424);
    if (v6 && *v6)
      std::string::assign(&__p, v6);
    if (*(_QWORD *)(a1 + 408))
      operator delete[]();
    if (*(_QWORD *)(a1 + 424))
      operator delete[]();
    *(_QWORD *)(a1 + 408) = 0;
    *(_DWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 424) = 0;
    *(_BYTE *)(a1 + 400) = 0;
    v7 = *(void (**)(uint64_t, std::string *, uint64_t, const char *))(a1 + 296);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v12;
    else
      v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if (a2)
    {
      v7(a1, v8, v4, "binary");
      if (*(_DWORD *)(a1 + 396))
        sub_100275E50(a1, 0);
      v9 = 2;
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v7(a1, v8, v4, (const char *)p_p);
      if (*(_DWORD *)(a1 + 396))
        sub_100275E50(a1, 0);
      v9 = 1;
    }
    sub_100275E50(a1, v9);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_29:
      operator delete(v12.__r_.__value_.__l.__data_);
      return;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_29;
  }
}

void sub_100275E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100275E50(uint64_t result, unsigned int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)(result + 396);
  if (v2 == 2)
  {
    if (a2 - 1 < 2)
    {
      v4 = 0;
      v5 = 0;
      qmemcpy((void *)sub_10029430C(&v4, 49), "Unexpected error, unable to switch to this state.", 49);
      sub_100294B74(-2, &v4, "switch_to_Base64_state", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1166);
    }
    if (a2)
    {
      v4 = 0;
      v5 = 0;
      qmemcpy((void *)sub_10029430C(&v4, 55), "Unexpected error, unable to determine the Base64 state.", 55);
      sub_100294B74(-2, &v4, "switch_to_Base64_state", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1173);
    }
    v3 = *(_QWORD *)(result + 384);
    if (v3)
    {
      if (*(_QWORD *)v3)
      {
        sub_100288628(*(_QWORD ***)v3);
        operator delete();
      }
      if (*(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      operator delete();
    }
    *(_QWORD *)(result + 384) = 0;
    *(_DWORD *)(result + 396) = 0;
  }
  else
  {
    if (v2 == 1)
    {
      if (a2 - 1 < 2)
      {
        v4 = 0;
        v5 = 0;
        qmemcpy((void *)sub_10029430C(&v4, 49), "Unexpected error, unable to switch to this state.", 49);
        sub_100294B74(-2, &v4, "switch_to_Base64_state", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1182);
      }
      if (a2)
      {
        v4 = 0;
        v5 = 0;
        qmemcpy((void *)sub_10029430C(&v4, 55), "Unexpected error, unable to determine the Base64 state.", 55);
        sub_100294B74(-2, &v4, "switch_to_Base64_state", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1187);
      }
    }
    else
    {
      if (v2)
      {
        v4 = 0;
        v5 = 0;
        qmemcpy((void *)sub_10029430C(&v4, 55), "Unexpected error, unable to determine the Base64 state.", 55);
        sub_100294B74(-2, &v4, "switch_to_Base64_state", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1192);
      }
      if (a2 >= 2)
      {
        if (a2 != 2)
        {
          v4 = 0;
          v5 = 0;
          qmemcpy((void *)sub_10029430C(&v4, 55), "Unexpected error, unable to determine the Base64 state.", 55);
          sub_100294B74(-2, &v4, "switch_to_Base64_state", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1157);
        }
        operator new();
      }
    }
    *(_DWORD *)(result + 396) = a2;
  }
  return result;
}

void sub_100276178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  JUMPOUT(0x100275EB8);
}

void sub_100276188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10027623C(uint64_t a1)
{
  int v2;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
  {
    v2 = -27;
LABEL_5:
    v4 = 0;
    v5 = 0;
    qmemcpy((void *)sub_10029430C(&v4, 31), "Invalid pointer to file storage", 31);
    sub_100294B74(v2, &v4, "cvEndWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4613);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    v2 = -5;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = 0;
    v5 = 0;
    qmemcpy((void *)sub_10029430C(&v4, 38), "The file storage is opened for reading", 38);
    sub_100294B74(-2, &v4, "cvEndWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4613);
  }
  sub_100275C88(a1, 0);
  if (*(_DWORD *)(a1 + 396))
    sub_100275E50(a1, 0);
  return (*(uint64_t (**)(uint64_t))(a1 + 304))(a1);
}

void sub_10027635C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10027638C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
  {
    v3 = -27;
LABEL_5:
    v5 = 0;
    v6 = 0;
    qmemcpy((void *)sub_10029430C(&v5, 31), "Invalid pointer to file storage", 31);
    sub_100294B74(v3, &v5, "cvWriteInt", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4626);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    v3 = -5;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    v5 = 0;
    v6 = 0;
    qmemcpy((void *)sub_10029430C(&v5, 38), "The file storage is opened for reading", 38);
    sub_100294B74(-2, &v5, "cvWriteInt", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4626);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 312))(a1, a2, a3);
}

void sub_1002764A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002764D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
  {
    v4 = -27;
LABEL_5:
    v6 = 0;
    v7 = 0;
    qmemcpy((void *)sub_10029430C(&v6, 31), "Invalid pointer to file storage", 31);
    sub_100294B74(v4, &v6, "cvWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4642);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    v4 = -5;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    v6 = 0;
    v7 = 0;
    qmemcpy((void *)sub_10029430C(&v6, 38), "The file storage is opened for reading", 38);
    sub_100294B74(-2, &v6, "cvWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4642);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 328))(a1, a2, a3, a4);
}

void sub_1002765FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10027662C(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  unsigned int v14;
  int v15;
  double *v16;
  int v17;
  int v18;
  unsigned int v19;
  char *v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  float v33;
  int v34;
  const char *v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  size_t v43;
  const char *v44;
  char *v45;
  int v46;
  int v47;
  char *v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char __dst[16];
  _OWORD v57[15];
  _DWORD v58[256];

  v51 = a3;
  if (*(_BYTE *)(a1 + 392))
    goto LABEL_2;
  v7 = *(_DWORD *)(a1 + 396);
  if (v7)
  {
    if (v7 == 2)
    {
LABEL_2:
      sub_100276F14(a1, a2, a3, a4);
      return;
    }
  }
  else
  {
    sub_100275E50(a1, 1u);
  }
  *(_OWORD *)__dst = 0u;
  memset(v57, 0, sizeof(v57));
  if (*(_DWORD *)a1 != 1280131417)
  {
    v54 = 0;
    v55 = 0;
    qmemcpy((void *)sub_10029430C(&v54, 31), "Invalid pointer to file storage", 31);
    sub_100294B74(-5, &v54, "cvWriteRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4812);
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    v54 = 0;
    v55 = 0;
    qmemcpy((void *)sub_10029430C(&v54, 38), "The file storage is opened for reading", 38);
    sub_100294B74(-2, &v54, "cvWriteRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4812);
  }
  if (v51 < 0)
  {
    v54 = 0;
    v55 = 0;
    qmemcpy((void *)sub_10029430C(&v54, 27), "Negative number of elements", 27);
    sub_100294B74(-211, &v54, "cvWriteRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4815);
  }
  v8 = sub_100277198(a4, v58);
  if (v51)
  {
    if (!a2)
    {
      v54 = 0;
      v55 = 0;
      v9 = sub_10029430C(&v54, 17);
      *(_BYTE *)(v9 + 16) = 114;
      *(_OWORD *)v9 = *(_OWORD *)"Null data pointer";
      sub_100294B74(-27, &v54, "cvWriteRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4823);
    }
    if (v8 == 1)
    {
      v58[0] *= v51;
      v51 = 1;
    }
    else if (v8 < 1)
    {
      return;
    }
    v10 = 0;
    v52 = v8;
    do
    {
      v11 = 0;
      --v51;
      v12 = a2;
      do
      {
        v13 = &v58[2 * v11];
        v15 = *v13;
        v14 = v13[1];
        LODWORD(v13) = (((v14 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v14 & 7))) & 3);
        v16 = (double *)(v12 + ((v10 + (int)v13 - 1) & -(int)v13));
        v53 = v11;
        if (v15 > 0)
        {
          if (v14 > 7)
          {
            v54 = 0;
            v55 = 0;
            *(_OWORD *)sub_10029430C(&v54, 16) = *(_OWORD *)"Unsupported type";
            sub_100294B74(-210, &v54, "cvWriteRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4880);
          }
          v17 = 0;
          while (1)
          {
            switch(v14)
            {
              case 0u:
                v19 = *(unsigned __int8 *)v16;
                BYTE7(v57[0]) = 0;
                v20 = (char *)v57 + 7;
                do
                {
                  *--v20 = v19 % 0xA + 48;
                  v21 = v19 > 9;
                  v19 /= 0xAu;
                }
                while (v21);
                goto LABEL_85;
              case 1u:
                v31 = *(char *)v16;
                if (v31 >= 0)
                  v32 = *(char *)v16;
                else
                  v32 = -v31;
                BYTE7(v57[0]) = 0;
                v20 = (char *)v57 + 6;
                do
                {
                  *v20-- = v32 % 0xA + 48;
                  v21 = v32 > 9;
                  v32 /= 0xAu;
                }
                while (v21);
                if (v31 < 0)
                  *v20 = 45;
                else
                  ++v20;
LABEL_85:
                v24 = 1;
                goto LABEL_86;
              case 2u:
                v25 = *(unsigned __int16 *)v16;
                BYTE7(v57[0]) = 0;
                v20 = (char *)v57 + 7;
                do
                {
                  *--v20 = v25 % 0xA + 48;
                  v26 = v25 >= 0xA;
                  v25 /= 0xAu;
                }
                while (v26);
                v24 = 2;
                goto LABEL_86;
              case 3u:
                v29 = *(__int16 *)v16;
                if (v29 >= 0)
                  v30 = *(__int16 *)v16;
                else
                  v30 = -v29;
                BYTE7(v57[0]) = 0;
                v20 = (char *)v57 + 6;
                do
                {
                  *v20-- = v30 % 0xA + 48;
                  v21 = v30 > 9;
                  v30 /= 0xAu;
                }
                while (v21);
                if (v29 < 0)
                  *v20 = 45;
                else
                  ++v20;
                v24 = 2;
                goto LABEL_86;
              case 4u:
                v22 = *(_DWORD *)v16;
                if (*(int *)v16 >= 0)
                  v23 = *(_DWORD *)v16;
                else
                  v23 = -v22;
                BYTE7(v57[0]) = 0;
                v20 = (char *)v57 + 6;
                do
                {
                  *v20-- = v23 % 0xA + 48;
                  v21 = v23 > 9;
                  v23 /= 0xAu;
                }
                while (v21);
                if (v22 < 0)
                  *v20 = 45;
                else
                  ++v20;
                v24 = 4;
                goto LABEL_86;
              case 5u:
                v33 = *(float *)v16;
                v34 = *(_DWORD *)v16;
                if ((~*(_DWORD *)v16 & 0x7F800000) != 0)
                {
                  v40 = (uint64_t)rintf(v33);
                  if (v33 == (float)(int)v40)
                  {
                    v20 = __dst;
                    sprintf(__dst, "%d.", v40);
                    v24 = 4;
                    goto LABEL_86;
                  }
                  v45 = __dst;
                  sprintf(__dst, "%.8e", v33);
                  if (__dst[0] == 45 || __dst[0] == 43)
                    v45 = &__dst[1];
                  do
                  {
                    v47 = *v45++;
                    v46 = v47;
                  }
                  while ((v47 - 48) < 0xA);
                  if (v46 == 44)
                    *(v45 - 1) = 46;
                  goto LABEL_105;
                }
                if ((v34 & 0x7FFFFFFF) != 0x7F800000)
                {
                  strcpy(__dst, ".Nan");
LABEL_105:
                  v20 = __dst;
                  v24 = 4;
                  goto LABEL_86;
                }
                if (v34 >= 0)
                  v35 = ".Inf";
                else
                  v35 = "-.Inf";
                v20 = __dst;
                strcpy(__dst, v35);
                v24 = 4;
LABEL_86:
                v42 = *(_DWORD *)(a1 + 4);
                if (v42 == 8)
                {
                  v18 = strlen(v20);
                  sub_100277464(a1, 0, v20, v18);
                }
                else if (v42 == 16)
                {
                  sub_1002777A4(a1, 0, v20);
                }
                else
                {
                  if (v14 - 5 <= 1)
                  {
                    v43 = strlen(v20);
                    if (v43)
                    {
                      if (v20[v43 - 1] == 46)
                        *(_WORD *)&__dst[v43] = 48;
                    }
                  }
                  sub_100277EA0(a1, 0, v20);
                }
                v16 = (double *)((char *)v16 + v24);
                ++v17;
                v12 = a2;
                if (v17 == v15)
                  goto LABEL_22;
                break;
              case 6u:
                v36 = *v16;
                v37 = *(_QWORD *)v16;
                v38 = HIDWORD(*(_QWORD *)v16);
                if ((~(_DWORD)v38 & 0x7FF00000) != 0)
                {
                  v41 = (uint64_t)rint(v36);
                  if (v36 == (double)(int)v41)
                  {
                    v20 = __dst;
                    sprintf(__dst, "%d.", v41);
                    v24 = 8;
                    goto LABEL_86;
                  }
                  v48 = __dst;
                  sprintf(__dst, "%.16e", *v16);
                  if (__dst[0] == 45 || __dst[0] == 43)
                    v48 = &__dst[1];
                  do
                  {
                    v50 = *v48++;
                    v49 = v50;
                  }
                  while ((v50 - 48) < 0xA);
                  if (v49 == 44)
                    *(v48 - 1) = 46;
                  goto LABEL_112;
                }
                v39 = v38 & 0x7FFFFFFF;
                if ((_DWORD)v37)
                  ++v39;
                if (v39 > 0x7FF00000)
                {
                  strcpy(__dst, ".Nan");
LABEL_112:
                  v20 = __dst;
                  v24 = 8;
                  goto LABEL_86;
                }
                if (v37 >= 0)
                  v44 = ".Inf";
                else
                  v44 = "-.Inf";
                v20 = __dst;
                strcpy(__dst, v44);
                v24 = 8;
                goto LABEL_86;
              default:
                v27 = *(_DWORD *)v16;
                if (*(int *)v16 >= 0)
                  v28 = *(_DWORD *)v16;
                else
                  v28 = -v27;
                BYTE7(v57[0]) = 0;
                v20 = (char *)v57 + 6;
                do
                {
                  *v20-- = v28 % 0xA + 48;
                  v21 = v28 > 9;
                  v28 /= 0xAu;
                }
                while (v21);
                if (v27 < 0)
                  *v20 = 45;
                else
                  ++v20;
                v24 = 8;
                goto LABEL_86;
            }
          }
        }
LABEL_22:
        v10 = (_DWORD)v16 - v12;
        v11 = v53 + 1;
      }
      while (v53 + 1 != v52);
    }
    while (v51);
  }
}

void sub_100276E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100276F14(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  void *v13;

  if (!a1)
  {
    v10 = 0;
    v11 = 0;
    *(_WORD *)sub_10029430C(&v10, 2) = 29542;
    sub_100294B74(-215, &v10, "cvWriteRawDataBase64", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8387);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    v10 = 0;
    v11 = 0;
    qmemcpy((void *)sub_10029430C(&v10, 31), "Invalid pointer to file storage", 31);
    sub_100294B74(-5, &v10, "cvWriteRawDataBase64", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8388);
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    v10 = 0;
    v11 = 0;
    qmemcpy((void *)sub_10029430C(&v10, 38), "The file storage is opened for reading", 38);
    sub_100294B74(-2, &v10, "cvWriteRawDataBase64", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8388);
  }
  sub_100275C88(a1, 1);
  v8 = *(_DWORD *)(a1 + 396);
  if (v8 != 2)
  {
    if (v8)
    {
      v10 = 0;
      v11 = 0;
      qmemcpy((void *)sub_10029430C(&v10, 37), "Base64 should not be used at present.", 37);
      sub_100294B74(-2, &v10, "cvWriteRawDataBase64", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8398);
    }
    sub_100275E50(a1, 2u);
  }
  v9 = *(uint64_t **)(a1 + 384);
  sub_10027F9E8(v9, a4);
  sub_100287E44(&v10, a2, a3, (uint64_t)(v9 + 1));
  sub_10027FC68((char ***)*v9, &v10);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_100277120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  sub_10029434C(&a10);
  _Unwind_Resume(a1);
}

const char *sub_100277198(const char *result, _DWORD *a2)
{
  const char *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  int v10;
  void *v11;
  int v12;
  unsigned int v13;
  int v14;
  char *v15;
  uint64_t v16;

  if (result)
  {
    v3 = result;
    v4 = strlen(result);
    v5 = v4;
    if (v4)
    {
      *a2 = 0;
      if (v4 >= 1)
      {
        v6 = 0;
        v7 = 0;
        while (1)
        {
          v9 = &v3[v6];
          v10 = *(unsigned __int8 *)v9;
          v8 = v10 - 48;
          if ((v10 - 48) > 9)
          {
            v11 = memchr("ucwsifdr", (char)v10, 9uLL);
            if (!v11)
            {
              v15 = 0;
              v16 = 0;
              qmemcpy((void *)sub_10029430C(&v15, 31), "Invalid data type specification", 31);
              sub_100294B74(-5, (uint64_t *)&v15, "icvDecodeFormat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4709);
            }
            v12 = a2[v7];
            if (v12)
            {
              v13 = (_DWORD)v11 - "ucwsifdr";
              a2[v7 + 1] = v13;
              if (v7 > 0)
                goto LABEL_18;
            }
            else
            {
              v12 = 1;
              a2[v7] = 1;
              v13 = (_DWORD)v11 - "ucwsifdr";
              a2[v7 + 1] = v13;
              if (v7 > 0)
              {
LABEL_18:
                if (v13 == a2[v7 - 1])
                {
                  v8 = 0;
                  a2[v7 - 2] += v12;
                }
                else
                {
                  if (v7 >= 0xFE)
                  {
                    v15 = 0;
                    v16 = 0;
                    qmemcpy((void *)sub_10029430C(&v15, 32), "Too long data type specification", 32);
                    sub_100294B74(-5, (uint64_t *)&v15, "icvDecodeFormat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4719);
                  }
                  v8 = 0;
                  v7 += 2;
                }
                goto LABEL_6;
              }
            }
            v8 = 0;
            v7 += 2;
          }
          else
          {
            if (v3[v6 + 1] - 48 <= 9)
            {
              v15 = 0;
              v8 = strtol(v9, &v15, 10);
              v6 = ~(_DWORD)v3 + (_DWORD)v15;
            }
            if (v8 <= 0)
            {
              v15 = 0;
              v16 = 0;
              qmemcpy((void *)sub_10029430C(&v15, 31), "Invalid data type specification", 31);
              sub_100294B74(-5, (uint64_t *)&v15, "icvDecodeFormat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4701);
            }
          }
LABEL_6:
          a2[v7] = v8;
          if (++v6 >= v5)
            goto LABEL_25;
        }
      }
      v7 = 0;
LABEL_25:
      if (v7 >= 0)
        v14 = v7;
      else
        v14 = v7 + 1;
      return (const char *)(v14 >> 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_10027741C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void *sub_100277464(uint64_t a1, const char *a2, const void *a3, int a4)
{
  int v8;
  char *v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  char *v16;
  char *v17;
  const void *v18;
  void *result;
  char *v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_100275C88(a1, 0);
  v8 = *(_DWORD *)(a1 + 396);
  if (v8 == 2)
  {
    v27 = 0;
    v28 = 0;
    qmemcpy((void *)sub_10029430C(&v27, 38), "Currently only Base64 data is allowed.", 38);
    sub_100294B74(-2, &v27, "icvXMLWriteScalar", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3060);
  }
  if (!v8)
    sub_100275E50(a1, 1u);
  if ((*(_DWORD *)(a1 + 68) & 7) != 6 && (!a2 || (*(_DWORD *)(a1 + 68) & 7u) > 4))
  {
    v20 = *(char **)(a1 + 120);
    if (a2)
    {
      v27 = 0;
      v28 = 0;
      qmemcpy((void *)sub_10029430C(&v27, 49), "elements with keys can not be written to sequence", 49);
      sub_100294B74(-5, &v27, "icvXMLWriteScalar", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3078);
    }
    v21 = (_DWORD)v20 - *(_DWORD *)(a1 + 128) + a4;
    *(_DWORD *)(a1 + 68) = 5;
    if (v21 <= *(_DWORD *)(a1 + 144))
    {
      v22 = *(char **)(a1 + 128);
      if (v20 <= v22)
        goto LABEL_28;
    }
    else
    {
      v22 = *(char **)(a1 + 128);
      if (v21 - *(_DWORD *)(a1 + 64) > 10)
      {
LABEL_24:
        v23 = *(char **)(a1 + 120);
        v24 = *(int *)(a1 + 88);
        if (v23 > &v22[v24])
        {
          *(_WORD *)v23 = 10;
          sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
          v22 = *(char **)(a1 + 128);
          LODWORD(v24) = *(_DWORD *)(a1 + 88);
        }
        v25 = *(_DWORD *)(a1 + 64);
        if ((_DWORD)v24 == v25)
        {
          v26 = (int)v24;
        }
        else
        {
          v26 = v25;
          memset(v22, 32, v25);
          *(_DWORD *)(a1 + 88) = v25;
          v22 = *(char **)(a1 + 128);
        }
        v20 = &v22[v26];
        *(_QWORD *)(a1 + 120) = &v22[v26];
        goto LABEL_33;
      }
      if (v20 <= v22)
        goto LABEL_28;
    }
    if (*(v20 - 1) == 62)
      goto LABEL_24;
LABEL_28:
    if (v20 > &v22[*(int *)(a1 + 64)] && *(v20 - 1) != 62)
      *v20++ = 32;
LABEL_33:
    result = memcpy(v20, a3, a4);
    *(_QWORD *)(a1 + 120) = &v20[a4];
    return result;
  }
  sub_100280BCC(a1, a2, 1, 0, 0);
  v9 = *(char **)(a1 + 120);
  v10 = a4;
  v11 = *(_QWORD *)(a1 + 136);
  if ((unint64_t)&v9[a4] >= v11)
  {
    v12 = *(_QWORD *)(a1 + 128);
    v13 = (_DWORD)v9 - v12;
    v14 = (3 * (v11 - v12) + (((3 * (v11 - v12)) & 0x8000000000000000) != 0)) >> 1;
    if (v13 + a4 <= (int)v14)
      v15 = v14;
    else
      v15 = v13 + a4;
    v16 = (char *)sub_1001D450C(v15 + 256);
    v17 = v16;
    v18 = *(const void **)(a1 + 128);
    *(_QWORD *)(a1 + 120) = &v16[*(_QWORD *)(a1 + 120) - (_QWORD)v18];
    if (v13 >= 1)
      memcpy(v16, v18, v13);
    *(_QWORD *)(a1 + 128) = v17;
    *(_QWORD *)(a1 + 136) = &v17[v15];
    v9 = &v17[v13];
  }
  memcpy(v9, a3, v10);
  *(_QWORD *)(a1 + 120) = &v9[v10];
  return (void *)sub_100280BCC(a1, a2, 2, 0, 0);
}

void sub_100277774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

char *sub_1002777A4(uint64_t a1, const char *a2, const char *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  char *v12;
  char *result;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  char *v27;
  const void *v28;
  uint64_t v29;
  char *v30;
  unsigned __int8 v31;
  char v32;
  unsigned int v33;
  BOOL v34;
  unint64_t v35;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  char *v43;
  char *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;

  sub_100275C88(a1, 0);
  v6 = *(_DWORD *)(a1 + 396);
  if (v6 == 2)
  {
    v46 = 0;
    v47 = 0;
    qmemcpy((void *)sub_10029430C(&v46, 36), "At present, output Base64 data only.", 36);
    sub_100294B74(-2, &v46, "icvYMLWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1899);
  }
  if (!v6)
    sub_100275E50(a1, 1u);
  v7 = *(_DWORD *)(a1 + 68);
  if (a2 && !*a2)
    a2 = 0;
  if ((*(_DWORD *)(a1 + 68) & 7u) < 5)
  {
    *(_DWORD *)(a1 + 12) = 0;
    if (a2)
      v7 = 38;
    else
      v7 = 37;
    if (!a2)
      goto LABEL_32;
  }
  else
  {
    if (((*(_DWORD *)(a1 + 68) & 7) == 6) != (a2 != 0))
    {
      v46 = 0;
      v47 = 0;
      qmemcpy((void *)sub_10029430C(&v46, 85), "An attempt to add element without a key to a map, or add element with key to sequence", 85);
      sub_100294B74(-5, &v46, "icvYMLWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1916);
    }
    if (!a2)
    {
LABEL_32:
      v9 = 0;
      if (!a3)
        goto LABEL_33;
LABEL_21:
      v11 = strlen(a3);
      v12 = *(char **)(a1 + 120);
      if ((v7 & 8) != 0)
        goto LABEL_34;
LABEL_22:
      result = *(char **)(a1 + 128);
      v14 = *(int *)(a1 + 88);
      if (v12 > &result[v14])
      {
        *(_WORD *)v12 = 10;
        sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
        result = *(char **)(a1 + 128);
        LODWORD(v14) = *(_DWORD *)(a1 + 88);
      }
      v15 = *(_DWORD *)(a1 + 64);
      if ((_DWORD)v14 == v15)
      {
        v16 = &result[(int)v14];
        *(_QWORD *)(a1 + 120) = v16;
        if ((v7 & 7) == 6)
        {
LABEL_45:
          if (!a2)
            goto LABEL_70;
          goto LABEL_46;
        }
      }
      else
      {
        memset(result, 32, v15);
        *(_DWORD *)(a1 + 88) = v15;
        result = *(char **)(a1 + 128);
        v16 = &result[v15];
        *(_QWORD *)(a1 + 120) = v16;
        if ((v7 & 7) == 6)
          goto LABEL_45;
      }
      *v16 = 45;
      if (a3)
      {
        v16[1] = 32;
        v16 += 2;
        if (!a2)
          goto LABEL_70;
      }
      else
      {
        ++v16;
        if (!a2)
          goto LABEL_70;
      }
      goto LABEL_46;
    }
  }
  v8 = strlen(a2);
  if (!v8)
  {
    v46 = 0;
    v47 = 0;
    v17 = sub_10029430C(&v46, 19);
    *(_DWORD *)(v17 + 15) = 2037674093;
    *(_OWORD *)v17 = *(_OWORD *)"The key is an empty";
    sub_100294B74(-5, &v46, "icvYMLWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1928);
  }
  v9 = v8;
  if (v8 > 4096)
  {
    v46 = 0;
    v47 = 0;
    v10 = sub_10029430C(&v46, 19);
    *(_DWORD *)(v10 + 15) = 1735290732;
    *(_OWORD *)v10 = *(_OWORD *)"The key is too long";
    sub_100294B74(-5, &v46, "icvYMLWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1931);
  }
  if (a3)
    goto LABEL_21;
LABEL_33:
  v11 = 0;
  v12 = *(char **)(a1 + 120);
  if ((v7 & 8) == 0)
    goto LABEL_22;
LABEL_34:
  if ((v7 & 0x20) == 0)
    *v12++ = 44;
  result = *(char **)(a1 + 128);
  v18 = v11 + v9 + (_DWORD)v12 - (_DWORD)result;
  if (v18 <= *(_DWORD *)(a1 + 144) || (v19 = *(_DWORD *)(a1 + 64), v18 - v19 < 11))
  {
    *v12 = 32;
    v16 = v12 + 1;
    goto LABEL_45;
  }
  *(_QWORD *)(a1 + 120) = v12;
  v20 = *(int *)(a1 + 88);
  if (v12 > &result[v20])
  {
    *(_WORD *)v12 = 10;
    sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
    result = *(char **)(a1 + 128);
    LODWORD(v20) = *(_DWORD *)(a1 + 88);
    v19 = *(_DWORD *)(a1 + 64);
  }
  if ((_DWORD)v20 != v19)
  {
    memset(result, 32, v19);
    *(_DWORD *)(a1 + 88) = v19;
    result = *(char **)(a1 + 128);
  }
  v16 = &result[v19];
  *(_QWORD *)(a1 + 120) = v16;
  if (!a2)
  {
LABEL_70:
    if (!a3)
      goto LABEL_79;
    goto LABEL_71;
  }
LABEL_46:
  v21 = *(unsigned __int8 *)a2;
  if (v21 != 95 && (v21 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    v46 = 0;
    v47 = 0;
    qmemcpy((void *)sub_10029430C(&v46, 33), "Key must start with a letter or _", 33);
    sub_100294B74(-5, &v46, "icvYMLWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1966);
  }
  v22 = *(_QWORD *)(a1 + 136);
  if ((unint64_t)&v16[v9] >= v22)
  {
    v23 = *(_QWORD *)(a1 + 128);
    v24 = (_DWORD)v16 - v23;
    v25 = (3 * (v22 - v23) + (((3 * (v22 - v23)) & 0x8000000000000000) != 0)) >> 1;
    if (v9 + (int)v16 - (int)v23 <= (int)v25)
      v26 = v25;
    else
      v26 = v9 + v24;
    result = (char *)sub_1001D450C(v26 + 256);
    v27 = result;
    v28 = *(const void **)(a1 + 128);
    *(_QWORD *)(a1 + 120) = &result[*(_QWORD *)(a1 + 120) - (_QWORD)v28];
    if (v24 >= 1)
      result = (char *)memcpy(result, v28, v24);
    *(_QWORD *)(a1 + 128) = v27;
    *(_QWORD *)(a1 + 136) = &v27[v26];
    v16 = &v27[v24];
  }
  if (v9 >= 1)
  {
    v29 = v9;
    v30 = v16;
    do
    {
      v32 = *a2++;
      v31 = v32;
      *v30 = v32;
      if ((v32 - 58) <= 0xF5u && ((v31 & 0xDF) - 91) <= 0xE5u)
      {
        v33 = v31 - 32;
        v34 = v33 > 0x3F;
        v35 = (1 << v33) & 0x8000000000002001;
        if (v34 || v35 == 0)
        {
          v46 = 0;
          v47 = 0;
          qmemcpy((void *)sub_10029430C(&v46, 80), "Key names may only contain alphanumeric characters [a-zA-Z0-9], '-', '_' and ' '", 80);
          sub_100294B74(-5, &v46, "icvYMLWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1976);
        }
      }
      ++v30;
      --v29;
    }
    while (v29);
  }
  v37 = &v16[v9];
  *v37 = 58;
  v16 = v37 + 1;
  if (!a3 || (v7 & 8) != 0)
    goto LABEL_70;
  v16 = v37 + 2;
  v37[1] = 32;
LABEL_71:
  v38 = *(_QWORD *)(a1 + 136);
  if ((unint64_t)&v16[v11] >= v38)
  {
    v39 = *(_QWORD *)(a1 + 128);
    v40 = (_DWORD)v16 - v39;
    v41 = (3 * (v38 - v39) + (((3 * (v38 - v39)) & 0x8000000000000000) != 0)) >> 1;
    if (v11 + (int)v16 - (int)v39 <= (int)v41)
      v42 = v41;
    else
      v42 = v11 + v40;
    v43 = (char *)sub_1001D450C(v42 + 256);
    v44 = v43;
    v45 = *(const void **)(a1 + 128);
    *(_QWORD *)(a1 + 120) = &v43[*(_QWORD *)(a1 + 120) - (_QWORD)v45];
    if (v40 >= 1)
      memcpy(v43, v45, v40);
    *(_QWORD *)(a1 + 128) = v44;
    *(_QWORD *)(a1 + 136) = &v44[v42];
    v16 = &v44[v40];
  }
  result = (char *)memcpy(v16, a3, v11);
  v16 += v11;
LABEL_79:
  *(_QWORD *)(a1 + 120) = v16;
  *(_DWORD *)(a1 + 68) = v7 & 0xFFFFFFDF;
  return result;
}

void sub_100277E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_100277EA0(uint64_t a1, const char *a2, const char *a3)
{
  int v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  int v10;
  size_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  char *result;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  char *v30;
  const void *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  size_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned int v37;
  BOOL v38;
  unint64_t v39;
  unsigned __int8 *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  int v46;
  char *v47;
  char *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;

  sub_100275C88(a1, 0);
  v6 = *(_DWORD *)(a1 + 396);
  if (v6 == 2)
  {
    v50 = 0;
    v51 = 0;
    qmemcpy((void *)sub_10029430C(&v50, 36), "At present, output Base64 data only.", 36);
    sub_100294B74(-2, &v50, "icvJSONWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3855);
  }
  if (!v6)
    sub_100275E50(a1, 1u);
  if (!a2)
  {
    v10 = 0;
    v8 = 0;
    if (a3)
      goto LABEL_19;
    goto LABEL_13;
  }
  if (!*a2)
  {
    v10 = 0;
    a2 = 0;
    v8 = 0;
    if (a3)
      goto LABEL_19;
LABEL_13:
    v11 = 0;
    v12 = *(_DWORD *)(a1 + 68);
    v13 = v12 & 7;
    if (v13 >= 5)
      goto LABEL_20;
LABEL_14:
    *(_DWORD *)(a1 + 12) = 0;
    if (v10)
      v12 = 38;
    else
      v12 = 37;
    goto LABEL_22;
  }
  v7 = strlen(a2);
  if (!v7)
  {
    v50 = 0;
    v51 = 0;
    v14 = sub_10029430C(&v50, 19);
    *(_DWORD *)(v14 + 15) = 2037674093;
    *(_OWORD *)v14 = *(_OWORD *)"The key is an empty";
    sub_100294B74(-5, &v50, "icvJSONWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3867);
  }
  v8 = v7;
  if ((int)v7 > 4096)
  {
    v50 = 0;
    v51 = 0;
    v9 = sub_10029430C(&v50, 19);
    *(_DWORD *)(v9 + 15) = 1735290732;
    *(_OWORD *)v9 = *(_OWORD *)"The key is too long";
    sub_100294B74(-5, &v50, "icvJSONWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3869);
  }
  v10 = 1;
  if (!a3)
    goto LABEL_13;
LABEL_19:
  v11 = strlen(a3);
  v12 = *(_DWORD *)(a1 + 68);
  v13 = v12 & 7;
  if (v13 < 5)
    goto LABEL_14;
LABEL_20:
  if (v10 != (v13 == 6))
  {
    v50 = 0;
    v51 = 0;
    qmemcpy((void *)sub_10029430C(&v50, 85), "An attempt to add element without a key to a map, or add element with key to sequence", 85);
    sub_100294B74(-5, &v50, "icvJSONWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3881);
  }
LABEL_22:
  if ((v12 & 8) == 0)
  {
    v15 = *(char **)(a1 + 120);
    if ((v12 & 0x20) != 0)
    {
      result = *(char **)(a1 + 128);
      v17 = *(int *)(a1 + 88);
      if (v15 <= &result[v17])
      {
LABEL_38:
        v20 = *(_DWORD *)(a1 + 64);
        if ((_DWORD)v17 == v20)
        {
          v22 = (int)v17;
          goto LABEL_40;
        }
        v22 = v20;
        goto LABEL_43;
      }
    }
    else
    {
      strcpy(v15, ",\n");
      sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
      result = *(char **)(a1 + 128);
      *(_QWORD *)(a1 + 120) = result;
      v15 = result;
      v17 = *(int *)(a1 + 88);
      if (result <= &result[v17])
        goto LABEL_38;
    }
    *(_WORD *)v15 = 10;
    sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
    result = *(char **)(a1 + 128);
    LODWORD(v17) = *(_DWORD *)(a1 + 88);
    goto LABEL_38;
  }
  v18 = *(char **)(a1 + 120);
  if ((v12 & 0x20) == 0)
    *v18++ = 44;
  result = *(char **)(a1 + 128);
  v19 = v11 + v8 + (_DWORD)v18 - (_DWORD)result;
  if (*(_DWORD *)(a1 + 144) >= v19 || (v20 = *(_DWORD *)(a1 + 64), v19 - v20 < 11))
  {
    *v18 = 32;
    v23 = v18 + 1;
    if (!v10)
      goto LABEL_66;
    goto LABEL_44;
  }
  *(_QWORD *)(a1 + 120) = v18;
  v21 = *(int *)(a1 + 88);
  if (v18 > &result[v21])
  {
    *(_WORD *)v18 = 10;
    sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
    result = *(char **)(a1 + 128);
    LODWORD(v21) = *(_DWORD *)(a1 + 88);
    v20 = *(_DWORD *)(a1 + 64);
  }
  v22 = v20;
  if ((_DWORD)v21 == v20)
  {
LABEL_40:
    v23 = &result[v22];
    *(_QWORD *)(a1 + 120) = &result[v22];
    if (!v10)
      goto LABEL_66;
    goto LABEL_44;
  }
LABEL_43:
  memset(result, 32, v22);
  *(_DWORD *)(a1 + 88) = v20;
  result = *(char **)(a1 + 128);
  v23 = &result[v22];
  *(_QWORD *)(a1 + 120) = &result[v22];
  if (!v10)
    goto LABEL_66;
LABEL_44:
  v24 = *(unsigned __int8 *)a2;
  if (v24 != 95 && (v24 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    v50 = 0;
    v51 = 0;
    qmemcpy((void *)sub_10029430C(&v50, 33), "Key must start with a letter or _", 33);
    sub_100294B74(-5, &v50, "icvJSONWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3923);
  }
  v25 = *(_QWORD *)(a1 + 136);
  if ((unint64_t)&v23[(int)v8] >= v25)
  {
    v26 = *(_QWORD *)(a1 + 128);
    v27 = (_DWORD)v23 - v26;
    v28 = (3 * (v25 - v26) + (((3 * (v25 - v26)) & 0x8000000000000000) != 0)) >> 1;
    if ((int)v23 - (int)v26 + (int)v8 <= (int)v28)
      v29 = v28;
    else
      v29 = v27 + v8;
    result = (char *)sub_1001D450C(v29 + 256);
    v30 = result;
    v31 = *(const void **)(a1 + 128);
    *(_QWORD *)(a1 + 120) = &result[*(_QWORD *)(a1 + 120) - (_QWORD)v31];
    if (v27 >= 1)
      result = (char *)memcpy(result, v31, v27);
    *(_QWORD *)(a1 + 128) = v30;
    *(_QWORD *)(a1 + 136) = &v30[v29];
    v23 = &v30[v27];
  }
  *v23 = 34;
  v32 = (unsigned __int8 *)(v23 + 1);
  if (v8)
  {
    v33 = v32;
    v34 = v8;
    do
    {
      v36 = *a2++;
      v35 = v36;
      *v33 = v36;
      if ((v36 - 58) <= 0xF5u && ((v35 & 0xDF) - 91) <= 0xE5u)
      {
        v37 = v35 - 32;
        v38 = v37 > 0x3F;
        v39 = (1 << v37) & 0x8000000000002001;
        if (v38 || v39 == 0)
        {
          v50 = 0;
          v51 = 0;
          qmemcpy((void *)sub_10029430C(&v50, 80), "Key names may only contain alphanumeric characters [a-zA-Z0-9], '-', '_' and ' '", 80);
          sub_100294B74(-5, &v50, "icvJSONWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3934);
        }
      }
      ++v33;
      --v34;
    }
    while (v34);
  }
  v41 = &v32[v8];
  *(_WORD *)v41 = 14882;
  v23 = (char *)&v32[v8 + 3];
  v41[2] = 32;
LABEL_66:
  if (a3)
  {
    v42 = *(_QWORD *)(a1 + 136);
    if ((unint64_t)&v23[(int)v11] >= v42)
    {
      v43 = *(_QWORD *)(a1 + 128);
      v44 = (_DWORD)v23 - v43;
      v45 = (3 * (v42 - v43) + (((3 * (v42 - v43)) & 0x8000000000000000) != 0)) >> 1;
      if ((int)v23 - (int)v43 + (int)v11 <= (int)v45)
        v46 = v45;
      else
        v46 = v44 + v11;
      v47 = (char *)sub_1001D450C(v46 + 256);
      v48 = v47;
      v49 = *(const void **)(a1 + 128);
      *(_QWORD *)(a1 + 120) = &v47[*(_QWORD *)(a1 + 120) - (_QWORD)v49];
      if (v44 >= 1)
        memcpy(v47, v49, v44);
      *(_QWORD *)(a1 + 128) = v48;
      *(_QWORD *)(a1 + 136) = &v48[v46];
      v23 = &v48[v44];
    }
    result = (char *)memcpy(v23, a3, v11);
    v23 += v11;
  }
  *(_QWORD *)(a1 + 120) = v23;
  *(_DWORD *)(a1 + 68) = v12 & 0xFFFFFFDF;
  return result;
}

void sub_1002784DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_10027856C(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  double result;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
  {
    v3 = -27;
LABEL_5:
    v6 = 0;
    v7 = 0;
    qmemcpy((void *)sub_10029430C(&v6, 31), "Invalid pointer to file storage", 31);
    sub_100294B74(v3, &v6, "cvStartReadRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4920);
  }
  if (*a1 != 1280131417)
  {
    v3 = -5;
    goto LABEL_5;
  }
  if (!a2 || !a3)
  {
    v6 = 0;
    v7 = 0;
    qmemcpy((void *)sub_10029430C(&v6, 42), "Null pointer to source file node or reader", 42);
    sub_100294B74(-27, &v6, "cvStartReadRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4923);
  }
  v4 = *(_DWORD *)a2 & 7;
  if ((v4 - 1) > 1)
  {
    if (v4)
    {
      if (v4 != 5)
      {
        v6 = 0;
        v7 = 0;
        qmemcpy((void *)sub_10029430C(&v6, 56), "The file node should be a numerical scalar or a sequence", 56);
        sub_100294B74(-5, &v6, "cvStartReadRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4943);
      }
      return sub_10021EEC4(*(_QWORD *)(a2 + 16), a3, 0);
    }
    else
    {
      result = 0.0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 32) = a2;
    *(_QWORD *)(a3 + 40) = a2 + 64;
    *(_QWORD *)(a3 + 24) = a2;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

void sub_10027872C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  JUMPOUT(0x100278678);
}

void sub_10027873C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100278784(_DWORD *a1, _QWORD *a2, int a3, uint64_t a4, const char *a5)
{
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  unsigned int v14;
  int v15;
  float *v16;
  int v17;
  uint64_t v18;
  double v19;
  BOOL v20;
  char v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD v37[256];

  v33 = a4;
  v34 = a3;
  if (!a1)
  {
    v7 = -27;
LABEL_5:
    v35 = 0;
    v36 = 0;
    qmemcpy((void *)sub_10029430C(&v35, 31), "Invalid pointer to file storage", 31);
    sub_100294B74(v7, &v35, "cvReadRawDataSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4955);
  }
  if (*a1 != 1280131417)
  {
    v7 = -5;
    goto LABEL_5;
  }
  if (!a2 || !a4)
  {
    v35 = 0;
    v36 = 0;
    qmemcpy((void *)sub_10029430C(&v35, 43), "Null pointer to reader or destination array", 43);
    sub_100294B74(-27, &v35, "cvReadRawDataSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4958);
  }
  if (a3 != 1 && !a2[1])
  {
    v35 = 0;
    v36 = 0;
    qmemcpy((void *)sub_10029430C(&v35, 51), "The readed sequence is a scalar, thus len must be 1", 51);
    sub_100294B74(-201, &v35, "cvReadRawDataSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4961);
  }
  v32 = sub_100277198(a5, v37);
  result = sub_100278E5C(a5);
  if (v32 <= 0)
  {
    while (1)
      ;
  }
  v9 = v32;
  v31 = (int)result;
LABEL_14:
  v10 = 0;
  v11 = 0;
  v12 = v33;
LABEL_16:
  v13 = &v37[2 * v10];
  v15 = *v13;
  v14 = v13[1];
  LODWORD(v13) = (((v14 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v14 & 7))) & 3);
  v16 = (float *)(v12 + ((v11 + (int)v13 - 1) & -(int)v13));
  if (v15 < 1)
    goto LABEL_15;
  v17 = 0;
  while (2)
  {
    v18 = a2[3];
    if ((*(_DWORD *)v18 & 7) != 1)
    {
      if ((*(_DWORD *)v18 & 7) == 2)
      {
        v19 = *(double *)(v18 + 16);
        switch(v14)
        {
          case 0u:
            v18 = (uint64_t)rint(v19);
            goto LABEL_23;
          case 1u:
            v18 = (uint64_t)rint(v19);
            goto LABEL_35;
          case 2u:
            v18 = (uint64_t)rint(v19);
            goto LABEL_30;
          case 3u:
            v18 = (uint64_t)rint(v19);
            goto LABEL_43;
          case 4u:
            v18 = (uint64_t)rint(v19);
            goto LABEL_32;
          case 5u:
            v26 = v19;
            *v16++ = v26;
            v27 = a2[3] + 32;
            a2[3] = v27;
            if (v27 < a2[5])
              goto LABEL_26;
            goto LABEL_25;
          case 6u:
            goto LABEL_58;
          case 7u:
            v18 = (uint64_t)rint(v19);
            goto LABEL_53;
          default:
            v35 = 0;
            v36 = 0;
            *(_OWORD *)sub_10029430C(&v35, 16) = *(_OWORD *)"Unsupported type";
            sub_100294B74(-210, &v35, "cvReadRawDataSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5071);
        }
      }
      v35 = 0;
      v36 = 0;
      qmemcpy((void *)sub_10029430C(&v35, 46), "The sequence element is not a numerical scalar", 46);
      sub_100294B74(-2, &v35, "cvReadRawDataSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5077);
    }
    LODWORD(v18) = *(_DWORD *)(v18 + 16);
    switch(v14)
    {
      case 0u:
LABEL_23:
        LODWORD(v18) = v18 & ~((int)v18 >> 31);
        v20 = (int)v18 < 255;
        v21 = -1;
        goto LABEL_38;
      case 1u:
LABEL_35:
        if ((int)v18 <= -128)
          LODWORD(v18) = -128;
        v20 = (int)v18 < 127;
        v21 = 127;
LABEL_38:
        if (!v20)
          LOBYTE(v18) = v21;
        *(_BYTE *)v16 = v18;
        v16 = (float *)((char *)v16 + 1);
        v24 = a2[3] + 32;
        a2[3] = v24;
        if (v24 < a2[5])
          goto LABEL_26;
        goto LABEL_25;
      case 2u:
LABEL_30:
        LODWORD(v18) = v18 & ~((int)v18 >> 31);
        v22 = 0xFFFF;
        goto LABEL_46;
      case 3u:
LABEL_43:
        if ((int)v18 <= -32768)
          LODWORD(v18) = -32768;
        v22 = 0x7FFF;
LABEL_46:
        if ((int)v18 >= v22)
          LOWORD(v18) = v22;
        *(_WORD *)v16 = v18;
        v16 = (float *)((char *)v16 + 2);
        v25 = a2[3] + 32;
        a2[3] = v25;
        if (v25 < a2[5])
          goto LABEL_26;
        goto LABEL_25;
      case 4u:
LABEL_32:
        *(_DWORD *)v16++ = v18;
        v23 = a2[3] + 32;
        a2[3] = v23;
        if (v23 < a2[5])
          goto LABEL_26;
        goto LABEL_25;
      case 5u:
        *v16++ = (float)(int)v18;
        v29 = a2[3] + 32;
        a2[3] = v29;
        if (v29 >= a2[5])
          goto LABEL_25;
        goto LABEL_26;
      case 6u:
        v19 = (double)(int)v18;
LABEL_58:
        *(double *)v16 = v19;
        v16 += 2;
        v30 = a2[3] + 32;
        a2[3] = v30;
        if (v30 < a2[5])
          goto LABEL_26;
        goto LABEL_25;
      case 7u:
LABEL_53:
        *(_QWORD *)v16 = (int)v18;
        v16 += 2;
        v28 = a2[3] + 32;
        a2[3] = v28;
        if (v28 < a2[5])
          goto LABEL_26;
LABEL_25:
        result = (uint64_t)sub_10021FB9C(a2, 1);
LABEL_26:
        if (v34 - 1 != v17)
        {
          if (v15 != ++v17)
            continue;
          v34 -= v15;
          v9 = v32;
LABEL_15:
          v12 = v33;
          v11 = (_DWORD)v16 - v33;
          if (++v10 == v9)
          {
            v33 += v31;
            goto LABEL_14;
          }
          goto LABEL_16;
        }
        if (v34 != v15 || v32 - 1 != (_DWORD)v10)
        {
          v35 = 0;
          v36 = 0;
          qmemcpy((void *)sub_10029430C(&v35, 60), "The sequence slice does not fit an integer number of records", 60);
          sub_100294B74(-201, &v35, "cvReadRawDataSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5092);
        }
        if (!a2[1])
          a2[3] -= 32;
        return result;
      default:
        v35 = 0;
        v36 = 0;
        *(_OWORD *)sub_10029430C(&v35, 16) = *(_OWORD *)"Unsupported type";
        sub_100294B74(-210, &v35, "cvReadRawDataSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5021);
    }
  }
}

void sub_100278D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100278E5C(const char *a1)
{
  int v2;
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v14;
  unsigned int v15;

  v2 = sub_100277198(a1, &v14);
  if (v2 < 1)
  {
    v6 = -1;
    v7 = v15;
    v8 = *a1;
    if (*a1)
      goto LABEL_5;
LABEL_18:
    LODWORD(v9) = 0;
    goto LABEL_19;
  }
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = (((*(&v14 + v3 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(&v14 + v3 + 1) & 7))) & 3);
    v4 = ((v4 + v5 - 1) & -v5) + v5 * *(&v14 + v3);
    v3 += 2;
  }
  while (v3 < (2 * v2));
  v6 = v4 - 1;
  v7 = v15;
  v8 = *a1;
  if (!*a1)
    goto LABEL_18;
LABEL_5:
  v9 = 0;
  v10 = (unsigned __int8 *)(a1 + 1);
  do
  {
    switch(v8)
    {
      case 'c':
      case 'u':
        if (v9 <= 1)
          v9 = 1;
        break;
      case 'd':
        v9 = 8;
        break;
      case 'f':
      case 'i':
        if (v9 <= 4)
          v9 = 4;
        break;
      case 's':
      case 'w':
        if (v9 <= 2)
          v9 = 2;
        break;
      default:
        break;
    }
    v11 = *v10++;
    v8 = v11;
  }
  while (v11);
LABEL_19:
  v12 = (((v7 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v7 & 7))) & 3);
  return (((v6 + v12) & -v12) + (_DWORD)v9 - 1) & -(int)v9;
}

uint64_t sub_100278FE0(_DWORD *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  int v8;
  uint64_t v10[2];
  _QWORD v11[8];

  if (!a2 || !a3)
  {
    v10[0] = 0;
    v10[1] = 0;
    qmemcpy((void *)sub_10029430C(v10, 54), "Null pointers to source file node or destination array", 54);
    sub_100294B74(-27, v10, "cvReadRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5106);
  }
  sub_10027856C(a1, a2, (uint64_t)v11);
  if ((*(_DWORD *)a2 & 7) == 5)
    v8 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 40);
  else
    v8 = 1;
  return sub_100278784(a1, v11, v8, a3, a4);
}

void sub_1002790C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void *sub_1002790D8(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  int v4;
  int v6;
  int v7;
  uint64_t i;
  char v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1 || *(_DWORD *)(a1 + 4) != 72)
  {
    v18 = 0;
    v19 = 0;
    v2 = sub_10029430C(&v18, 17);
    *(_BYTE *)(v2 + 16) = 111;
    *(_OWORD *)v2 = *(_OWORD *)"Invalid type info";
    sub_100294B74(-201, &v18, "cvRegisterType", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6559);
  }
  if (!*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 48) || !*(_QWORD *)(a1 + 56))
  {
    v18 = 0;
    v19 = 0;
    qmemcpy((void *)sub_10029430C(&v18, 81), "Some of required function pointers (is_instance, release, read or write) are NULL", 81);
    sub_100294B74(-27, &v18, "cvRegisterType", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6565);
  }
  v3 = *(const char **)(a1 + 24);
  v4 = *(unsigned __int8 *)v3;
  if (v4 != 95 && (v4 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    v18 = 0;
    v19 = 0;
    qmemcpy((void *)sub_10029430C(&v18, 41), "Type name should start with a letter or _", 41);
    sub_100294B74(-5, &v18, "cvRegisterType", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6569);
  }
  v6 = strlen(v3);
  v7 = v6;
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      v9 = *(_BYTE *)(*(_QWORD *)(a1 + 24) + i);
      if ((v9 - 58) <= 0xF5u && ((v9 & 0xDF) - 91) <= 0xE5u)
      {
        v10 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + i);
        if (v10 != 45 && v10 != 95)
        {
          v18 = 0;
          v19 = 0;
          qmemcpy((void *)sub_10029430C(&v18, 54), "Type name should contain only letters, digits, - and _", 54);
          sub_100294B74(-5, &v18, "cvRegisterType", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6578);
        }
      }
    }
  }
  v11 = sub_1001D450C(v6 + 73);
  v13 = *(_OWORD *)(a1 + 32);
  v12 = *(_OWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a1;
  *(_QWORD *)(v11 + 64) = v14;
  *(_OWORD *)(v11 + 32) = v13;
  *(_OWORD *)(v11 + 48) = v12;
  *(_QWORD *)(v11 + 24) = v11 + 72;
  result = memcpy((void *)(v11 + 72), *(const void **)(a1 + 24), v7 + 1);
  *(_DWORD *)v11 = 0;
  v16 = qword_1004AFF48;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = v16;
  if (v16)
    v17 = (uint64_t *)(v16 + 8);
  else
    v17 = &qword_1004AFF50;
  *v17 = v11;
  qword_1004AFF48 = v11;
  return result;
}

void sub_1002793A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_100279408(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD v9[9];

  v9[0] = 0x4800000000;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v9[6] = a5;
  v9[7] = a6;
  v9[8] = a7;
  sub_1002790D8((uint64_t)v9);
  *a1 = qword_1004AFF48;
  return a1;
}

uint64_t sub_100279460(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(const char **)(*(_QWORD *)a1 + 24);
  v3 = qword_1004AFF48;
  if (v2)
    v4 = qword_1004AFF48 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = qword_1004AFF48;
    while (strcmp(*(const char **)(v5 + 24), v2))
    {
      v5 = *(_QWORD *)(v5 + 16);
      if (!v5)
        return a1;
    }
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      *(_QWORD *)(v6 + 16) = v7;
      v7 = *(_QWORD *)(v5 + 16);
      if (v7)
        goto LABEL_11;
    }
    else
    {
      qword_1004AFF48 = *(_QWORD *)(v5 + 16);
      v3 = v7;
      if (v7)
      {
LABEL_11:
        *(_QWORD *)(v7 + 8) = v6;
        v6 = qword_1004AFF50;
        if (!v3)
          goto LABEL_16;
LABEL_15:
        if (v6)
        {
LABEL_17:
          j__free((void *)v5);
          return a1;
        }
LABEL_16:
        qword_1004AFF50 = 0;
        qword_1004AFF48 = 0;
        goto LABEL_17;
      }
    }
    qword_1004AFF50 = v6;
    if (!v3)
      goto LABEL_16;
    goto LABEL_15;
  }
  return a1;
}

BOOL sub_100279524(_BOOL8 result)
{
  if (result)
    return *(unsigned __int16 *)(result + 2) == 17049;
  return result;
}

_QWORD *sub_10027953C(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2[2];

  if (!result)
  {
    v2[0] = 0;
    v2[1] = 0;
    v1 = sub_10029430C(v2, 19);
    *(_DWORD *)(v1 + 15) = 1919251566;
    *(_OWORD *)v1 = *(_OWORD *)"NULL double pointer";
    sub_100294B74(-27, v2, "icvReleaseSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5729);
  }
  *result = 0;
  return result;
}

void sub_1002795C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_1002795D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  _DWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  const float *v56;
  int32x4_t v57;
  int32x4_t v58;
  const float *v59;
  unsigned __int128 v60;
  unsigned __int128 v61;
  uint64_t v62;
  uint64_t i;
  int v65;
  char *__endptr;
  _QWORD v67[8];
  _DWORD v68[8];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  __endptr = 0;
  v4 = sub_1002707FC(a1, a2, "flags");
  if (v4 && (*(_DWORD *)v4 & 7) == 3)
  {
    v5 = *(char **)(v4 + 24);
    v6 = sub_1002707FC(a1, a2, "count");
    if (!v6)
    {
LABEL_4:
      LODWORD(v7) = -1;
      goto LABEL_11;
    }
  }
  else
  {
    v5 = 0;
    v6 = sub_1002707FC(a1, a2, "count");
    if (!v6)
      goto LABEL_4;
  }
  if ((*(_DWORD *)v6 & 7) == 2)
  {
    v7 = (uint64_t)rint(*(double *)(v6 + 16));
  }
  else if ((*(_DWORD *)v6 & 7) == 1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 + 16);
  }
  else
  {
    LODWORD(v7) = 0x7FFFFFFF;
  }
LABEL_11:
  v65 = v7;
  v8 = sub_1002707FC(a1, a2, "dt");
  if (!v8 || (*(_DWORD *)v8 & 7) != 3 || (v9 = *(const char **)(v8 + 24), !v5) || v65 == -1 || !v9)
  {
    v71 = 0;
    v70 = 0;
    qmemcpy((void *)sub_10029430C(&v70, 48), "Some of essential sequence attributes are absent", 48);
    sub_100294B74(-2, &v70, "icvReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5953);
  }
  if (*v5 - 48 > 9)
  {
    if (strstr(v5, "curve"))
      v13 = 1117327360;
    else
      v13 = 1117323264;
    if (strstr(v5, "closed"))
      v13 |= 0x4000u;
    if (strstr(v5, "hole"))
      v12 = v13 | 0x8000;
    else
      v12 = v13;
    if (!strstr(v5, "untyped"))
      v12 |= sub_10028707C(v9);
  }
  else
  {
    v10 = strtol(v5, &__endptr, 16);
    if (__endptr == v5 || (v10 & 0xFFFF0000) != 0x42990000)
    {
      v71 = 0;
      v70 = 0;
      qmemcpy((void *)sub_10029430C(&v70, 30), "The sequence flags are invalid", 30);
      sub_100294B74(-2, &v70, "icvReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5970);
    }
    if ((v10 & 0xE00) == 0x200)
      v11 = 1117327360;
    else
      v11 = 1117323264;
    v12 = v10 & 0x81FF | (((v10 >> 12) & 1) << 14) | v11;
  }
  v14 = sub_1002707FC(a1, a2, "header_dt");
  if (v14 && (*(_DWORD *)v14 & 7) == 3)
    v15 = *(const char **)(v14 + 24);
  else
    v15 = 0;
  v16 = sub_1002707FC(a1, a2, "header_user_data");
  v17 = v16 != 0;
  if ((v15 != 0) != v17)
  {
    v71 = 0;
    v70 = 0;
    qmemcpy((void *)sub_10029430C(&v70, 74), "One of \"header_dt\" and \"header_user_data\" is there, while the other is not", 74);
    sub_100294B74(-2, &v70, "icvReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6004);
  }
  v18 = sub_1002707FC(a1, a2, "rect");
  v19 = sub_1002707FC(a1, a2, "origin");
  v20 = v19;
  if (v18)
    v21 = v17 + 1;
  else
    v21 = v16 != 0;
  if (v19)
    ++v21;
  if (v21 >= 2)
  {
    v71 = 0;
    v70 = 0;
    qmemcpy((void *)sub_10029430C(&v70, 66), "Only one of \"header_user_data\", \"rect\" and \"origin\" tags may occur", 66);
    sub_100294B74(-2, &v70, "icvReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6010);
  }
  if (v15)
  {
    v22 = sub_100277198(v15, &v70);
    if (v22 < 1)
    {
      v24 = 96;
    }
    else
    {
      v23 = 0;
      v24 = 96;
      do
      {
        v25 = (((*((_DWORD *)&v70 + v23 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v70 + v23 + 1) & 7))) & 3);
        v24 = ((v24 + v25 - 1) & -v25) + v25 * *((_DWORD *)&v70 + v23);
        v23 += 2;
      }
      while (v23 < (2 * v22));
    }
    v27 = v24;
  }
  else
  {
    v26 = 96;
    if (v19)
      v26 = 104;
    if (v18)
      v27 = 128;
    else
      v27 = v26;
  }
  v28 = sub_100277198(v9, &v70);
  if (v28 < 1)
  {
    v30 = 0;
  }
  else
  {
    v29 = 0;
    v30 = 0;
    do
    {
      v31 = (((*((_DWORD *)&v70 + v29 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v70 + v29 + 1) & 7))) & 3);
      v30 = ((v30 + v31 - 1) & -v31) + v31 * *((_DWORD *)&v70 + v29);
      v29 += 2;
    }
    while (v29 < (2 * v28));
  }
  v32 = (((HIDWORD(v70) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (BYTE4(v70) & 7))) & 3);
  v33 = sub_10021E968(v12, v27, (v30 + v32 - 1) & -v32, *(_QWORD *)(a1 + 24));
  if (v16)
  {
    if (!v15)
    {
      v71 = 0;
      v70 = 0;
      v37 = sub_10029430C(&v70, 9);
      *(_BYTE *)(v37 + 8) = 116;
      *(_QWORD *)v37 = *(_QWORD *)"header_dt";
      sub_100294B74(-215, &v70, "icvReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6026);
    }
    sub_10027856C((_DWORD *)a1, v16, (uint64_t)&v70);
    if ((*(_DWORD *)v16 & 7) == 5)
      v34 = *(_DWORD *)(*(_QWORD *)(v16 + 16) + 40);
    else
      v34 = 1;
    sub_100278784((_DWORD *)a1, &v70, v34, (uint64_t)(v33 + 24), v15);
  }
  else if (v18)
  {
    v35 = sub_1002707FC(a1, v18, "x");
    if (v35)
    {
      if ((*(_DWORD *)v35 & 7) == 2)
      {
        v36 = (uint64_t)rint(*(double *)(v35 + 16));
      }
      else if ((*(_DWORD *)v35 & 7) == 1)
      {
        LODWORD(v36) = *(_DWORD *)(v35 + 16);
      }
      else
      {
        LODWORD(v36) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v36) = 0;
    }
    v33[24] = v36;
    v40 = sub_1002707FC(a1, v18, "y");
    if (v40)
    {
      if ((*(_DWORD *)v40 & 7) == 2)
      {
        v41 = (uint64_t)rint(*(double *)(v40 + 16));
      }
      else if ((*(_DWORD *)v40 & 7) == 1)
      {
        LODWORD(v41) = *(_DWORD *)(v40 + 16);
      }
      else
      {
        LODWORD(v41) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v41) = 0;
    }
    v33[25] = v41;
    v42 = sub_1002707FC(a1, v18, "width");
    if (v42)
    {
      if ((*(_DWORD *)v42 & 7) == 2)
      {
        v43 = (uint64_t)rint(*(double *)(v42 + 16));
      }
      else if ((*(_DWORD *)v42 & 7) == 1)
      {
        LODWORD(v43) = *(_DWORD *)(v42 + 16);
      }
      else
      {
        LODWORD(v43) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v43) = 0;
    }
    v33[26] = v43;
    v44 = sub_1002707FC(a1, v18, "height");
    if (v44)
    {
      if ((*(_DWORD *)v44 & 7) == 2)
      {
        v45 = (uint64_t)rint(*(double *)(v44 + 16));
      }
      else if ((*(_DWORD *)v44 & 7) == 1)
      {
        LODWORD(v45) = *(_DWORD *)(v44 + 16);
      }
      else
      {
        LODWORD(v45) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v45) = 0;
    }
    v33[27] = v45;
    v46 = sub_1002707FC(a1, a2, "color");
    if (v46)
    {
      if ((*(_DWORD *)v46 & 7) == 2)
      {
        v33[28] = (uint64_t)rint(*(double *)(v46 + 16));
      }
      else if ((*(_DWORD *)v46 & 7) == 1)
      {
        v33[28] = *(_DWORD *)(v46 + 16);
      }
      else
      {
        v33[28] = 0x7FFFFFFF;
      }
    }
    else
    {
      v33[28] = 0;
    }
  }
  else if (v20)
  {
    v38 = sub_1002707FC(a1, v20, "x");
    if (v38)
    {
      if ((*(_DWORD *)v38 & 7) == 2)
      {
        v39 = (uint64_t)rint(*(double *)(v38 + 16));
      }
      else if ((*(_DWORD *)v38 & 7) == 1)
      {
        LODWORD(v39) = *(_DWORD *)(v38 + 16);
      }
      else
      {
        LODWORD(v39) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v39) = 0;
    }
    v33[24] = v39;
    v47 = sub_1002707FC(a1, v20, "y");
    if (v47)
    {
      if ((*(_DWORD *)v47 & 7) == 2)
      {
        v48 = (uint64_t)rint(*(double *)(v47 + 16));
      }
      else if ((*(_DWORD *)v47 & 7) == 1)
      {
        LODWORD(v48) = *(_DWORD *)(v47 + 16);
      }
      else
      {
        LODWORD(v48) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v48) = 0;
    }
    v33[25] = v48;
  }
  sub_10021FEF0((uint64_t)v33, 0, v65, 0);
  v49 = sub_100277198(v9, v68);
  if (v49 < 1)
  {
    v52 = 0;
  }
  else
  {
    v50 = (2 * v49);
    if (v49 >= 9)
    {
      v53 = ((v50 - 1) >> 1) + 1;
      v54 = v53 & 7;
      if ((v53 & 7) == 0)
        v54 = 8;
      v55 = v53 - v54;
      v51 = 2 * v55;
      v56 = (const float *)&v69;
      v57 = 0uLL;
      v58 = 0uLL;
      do
      {
        v59 = v56 - 8;
        v60 = (unsigned __int128)vld2q_f32(v59);
        v61 = (unsigned __int128)vld2q_f32(v56);
        v57 = vaddq_s32((int32x4_t)v60, v57);
        v58 = vaddq_s32((int32x4_t)v61, v58);
        v56 += 16;
        v55 -= 8;
      }
      while (v55);
      v52 = vaddvq_s32(vaddq_s32(v58, v57));
    }
    else
    {
      v51 = 0;
      v52 = 0;
    }
    do
    {
      v52 += v68[v51];
      v51 += 2;
    }
    while (v51 < v50);
  }
  v62 = sub_1002707FC(a1, a2, "data");
  if (!v62)
  {
    v71 = 0;
    v70 = 0;
    qmemcpy((void *)sub_10029430C(&v70, 43), "The image data is not found in file storage", 43);
    sub_100294B74(-2, &v70, "icvReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6053);
  }
  if ((*(_DWORD *)v62 & 7u) < 5)
  {
    if (((*(_DWORD *)v62 & 7) != 0) == v52 * v65)
      goto LABEL_140;
LABEL_139:
    v71 = 0;
    v70 = 0;
    qmemcpy((void *)sub_10029430C(&v70, 55), "The number of stored elements does not match to \"count\"", 55);
    sub_100294B74(-2, &v70, "icvReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6056);
  }
  if (*(_DWORD *)(*(_QWORD *)(v62 + 16) + 40) != v52 * v65)
    goto LABEL_139;
LABEL_140:
  sub_10027856C((_DWORD *)a1, v62, (uint64_t)v67);
  for (i = *((_QWORD *)v33 + 11); i; i = *(_QWORD *)(i + 8))
  {
    sub_100278784((_DWORD *)a1, v67, *(_DWORD *)(i + 20) * v52, *(_QWORD *)(i + 24), v9);
    if (i == **((_QWORD **)v33 + 11))
      break;
  }
  return v33;
}

void sub_10027A10C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x100279888);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10027A1E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v10;
  uint64_t v11;
  const char **v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t i;
  uint64_t v18;
  unsigned int v19;
  char v20;
  uint64_t v21;

  v21 = a5;
  if (!a4)
    return sub_10028716C(a1, a2, a3, a4, a5, 0xFFFFFFFFLL);
  v10 = &v20;
  v11 = 1;
  v12 = (const char **)a4;
  while (!*v12)
  {
LABEL_9:
    v10 = (char *)*((_QWORD *)v10 + 1);
    if (v10)
    {
      v12 = *(const char ***)v10;
      if (*(_QWORD *)v10)
        continue;
    }
    return sub_10028716C(a1, a2, a3, a4, a5, 0xFFFFFFFFLL);
  }
  if (strcmp("recursive", *v12))
  {
    LODWORD(v13) = 1;
    while (1)
    {
      v14 = v12[(v13 + 1)];
      if (!v14)
        goto LABEL_9;
      v13 = (v13 + 2);
      if (!strcmp("recursive", v14))
      {
        v11 = v13;
        break;
      }
    }
  }
  v15 = v12[v11];
  if (!v15 || !strcmp(v12[v11], "0") || !strcmp(v15, "false") || !strcmp(v15, "False") || !strcmp(v15, "FALSE"))
    return sub_10028716C(a1, a2, a3, a4, a5, 0xFFFFFFFFLL);
  sub_100275840(a1, a2, 6, (uint64_t)"opencv-sequence-tree");
  sub_100275840(a1, "sequences", 5, 0);
  sub_100223AFC((uint64_t)&v18, a3, 0x7FFFFFFF);
  for (i = v18; v18; i = v18)
  {
    sub_10028716C(a1, 0, i, a4, a5, v19);
    sub_100223BD0(&v18);
  }
  sub_10027623C(a1);
  return sub_10027623C(a1);
}

_DWORD *sub_10027A3B4(uint64_t a1)
{
  return sub_100220568(a1, 0x3FFFFFFF00000000, 0, 1);
}

uint64_t sub_10027A3C4(_DWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  unint64_t v22;
  unint64_t v23;

  v3 = sub_1002707FC((uint64_t)a1, a2, "sequences");
  if (!v3 || (*(_DWORD *)v3 & 7) != 5)
  {
    v19 = 0;
    v20 = 0;
    qmemcpy((void *)sub_10029430C(&v19, 90), "opencv-sequence-tree instance should contain a field \"sequences\" that should be a sequence", 90);
    sub_100294B74(-212, &v19, "icvReadSeqTree", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6087);
  }
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_DWORD *)(v4 + 40);
  sub_10021EEC4(v4, (uint64_t)v21, 0);
  v18 = v5;
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = v22;
      v12 = sub_10027DC48(a1, v22, 0);
      if (!v12)
      {
        v19 = 0;
        v20 = 0;
        v13 = sub_10029430C(&v19, 3);
        *(_WORD *)v13 = 25971;
        *(_BYTE *)(v13 + 2) = 113;
        sub_100294B74(-215, &v19, "icvReadSeqTree", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6099);
      }
      v14 = sub_1002707FC((uint64_t)a1, v11, "level");
      if (!v14)
      {
LABEL_13:
        v19 = 0;
        v20 = 0;
        qmemcpy((void *)sub_10029430C(&v19, 56), "All the sequence tree nodes should contain \"level\" field", 56);
        sub_100294B74(-212, &v19, "icvReadSeqTree", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6102);
      }
      if ((*(_DWORD *)v14 & 7) == 2)
        break;
      if ((*(_DWORD *)v14 & 7) == 1)
      {
        LODWORD(v15) = *(_DWORD *)(v14 + 16);
        if ((v15 & 0x80000000) != 0)
          goto LABEL_13;
        goto LABEL_15;
      }
      LODWORD(v15) = 0x7FFFFFFF;
      if (!v10)
        v10 = v12;
      v16 = 0;
      if (v6 != 0x7FFFFFFF)
      {
LABEL_18:
        if (v8)
          v8[4] = v12;
        *(_QWORD *)(v12 + 8) = 0;
        v9 = v8;
        goto LABEL_30;
      }
LABEL_24:
      if (v16)
      {
        do
        {
          v8 = (_QWORD *)v8[3];
          --v6;
        }
        while (v6 > (int)v15);
        v9 = (_QWORD *)v8[3];
        *(_QWORD *)(v12 + 8) = v8;
LABEL_29:
        v8[2] = v12;
        goto LABEL_30;
      }
      *(_QWORD *)(v12 + 8) = v8;
      if (v8)
        goto LABEL_29;
LABEL_30:
      *(_QWORD *)(v12 + 24) = v9;
      v22 += *(int *)(v4 + 44);
      if (v22 >= v23)
        sub_10021FB9C(v21, 1);
      ++v7;
      v6 = v15;
      v8 = (_QWORD *)v12;
      if (v7 == v18)
        return v10;
    }
    v15 = (uint64_t)rint(*(double *)(v14 + 16));
    if ((v15 & 0x80000000) != 0)
      goto LABEL_13;
LABEL_15:
    if (!v10)
      v10 = v12;
    v16 = (int)v15 < v6;
    if ((int)v15 > v6)
      goto LABEL_18;
    goto LABEL_24;
  }
  return 0;
}

void sub_10027A690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_10027A6D8(_DWORD *result)
{
  if (result)
  {
    if (HIWORD(*result) == 17048)
      return (_DWORD *)((*result & 0x3000) == 4096);
    else
      return 0;
  }
  return result;
}

_QWORD *sub_10027A6FC(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2[2];

  if (!result)
  {
    v2[0] = 0;
    v2[1] = 0;
    v1 = sub_10029430C(v2, 19);
    *(_DWORD *)(v1 + 15) = 1919251566;
    *(_OWORD *)v1 = *(_OWORD *)"NULL double pointer";
    sub_100294B74(-27, v2, "icvReleaseGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6145);
  }
  *result = 0;
  return result;
}

void sub_10027A780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_10027A798(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  const char *v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  const char *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  const float *v44;
  int32x4_t v45;
  int32x4_t v46;
  const float *v47;
  unsigned __int128 v48;
  unsigned __int128 v49;
  int v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  const float *v61;
  int32x4_t v62;
  int32x4_t v63;
  const float *v64;
  unsigned __int128 v65;
  unsigned __int128 v66;
  int v67;
  int v68;
  char *v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  unint64_t v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  size_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  size_t v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  int v96;
  int v97;
  _QWORD *v98;
  unsigned int v99;
  int v100;
  int *v101;
  int v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v108;
  unsigned int v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  _QWORD *v116;
  int v117;
  _QWORD *v119;
  char *v120;
  uint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t v124;
  char *__endptr;
  char v126[8];
  uint64_t v127;
  _DWORD v128[5];
  unsigned int v129;
  _BYTE v130[480];
  uint64_t v131;
  uint64_t v132;

  __endptr = 0;
  v3 = sub_1002707FC(a1, a2, "flags");
  if (v3 && (*(_DWORD *)v3 & 7) == 3)
  {
    v4 = *(char **)(v3 + 24);
    v5 = sub_1002707FC(a1, a2, "vertex_dt");
    if (!v5)
    {
LABEL_9:
      v6 = 0;
      v7 = sub_1002707FC(a1, a2, "edge_dt");
      if (!v7)
        goto LABEL_13;
      goto LABEL_10;
    }
  }
  else
  {
    v4 = 0;
    v5 = sub_1002707FC(a1, a2, "vertex_dt");
    if (!v5)
      goto LABEL_9;
  }
  if ((*(_DWORD *)v5 & 7) != 3)
    goto LABEL_9;
  v6 = *(const char **)(v5 + 24);
  v7 = sub_1002707FC(a1, a2, "edge_dt");
  if (!v7)
  {
LABEL_13:
    v121 = 0;
    v8 = sub_1002707FC(a1, a2, "vertex_count");
    if (!v8)
      goto LABEL_12;
    goto LABEL_14;
  }
LABEL_10:
  if ((*(_DWORD *)v7 & 7) != 3)
    goto LABEL_13;
  v121 = *(_QWORD *)(v7 + 24);
  v8 = sub_1002707FC(a1, a2, "vertex_count");
  if (!v8)
  {
LABEL_12:
    LODWORD(v9) = -1;
    goto LABEL_19;
  }
LABEL_14:
  if ((*(_DWORD *)v8 & 7) == 2)
  {
    v9 = (uint64_t)rint(*(double *)(v8 + 16));
  }
  else if ((*(_DWORD *)v8 & 7) == 1)
  {
    LODWORD(v9) = *(_DWORD *)(v8 + 16);
  }
  else
  {
    LODWORD(v9) = 0x7FFFFFFF;
  }
LABEL_19:
  v117 = v9;
  v10 = sub_1002707FC(a1, a2, "edge_count");
  if (v10)
  {
    if ((*(_DWORD *)v10 & 7) == 2)
    {
      v123 = (uint64_t)rint(*(double *)(v10 + 16));
      v113 = a2;
      v115 = v6;
      if (!v4)
        goto LABEL_32;
    }
    else if ((*(_DWORD *)v10 & 7) == 1)
    {
      LODWORD(v123) = *(_DWORD *)(v10 + 16);
      v113 = a2;
      v115 = v6;
      if (!v4)
        goto LABEL_32;
    }
    else
    {
      LODWORD(v123) = 0x7FFFFFFF;
      v113 = a2;
      v115 = v6;
      if (!v4)
        goto LABEL_32;
    }
  }
  else
  {
    LODWORD(v123) = -1;
    v113 = a2;
    v115 = v6;
    if (!v4)
      goto LABEL_32;
  }
  if (v117 == -1 || (_DWORD)v123 == -1 || !v121)
  {
LABEL_32:
    v132 = 0;
    v131 = 0;
    qmemcpy((void *)sub_10029430C(&v131, 45), "Some of essential graph attributes are absent", 45);
    sub_100294B74(-2, &v131, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6324);
  }
  if ((*v4 & 0x80000000) == 0 && (_DefaultRuneLocale.__runetype[*v4] & 0x10000) != 0)
  {
    v12 = strtol(v4, &__endptr, 16);
    if (__endptr == v4 || (v12 & 0xFFFF0000) != 0x42980000)
    {
      v132 = 0;
      v131 = 0;
      qmemcpy((void *)sub_10029430C(&v131, 30), "The sequence flags are invalid", 30);
      sub_100294B74(-2, &v131, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6337);
    }
    v11 = (v12 & 0x1000) == 0;
  }
  else
  {
    v11 = strstr(v4, "oriented") == 0;
  }
  if (v11)
    v14 = 1117261824;
  else
    v14 = 1117278208;
  v15 = sub_1002707FC(a1, a2, "header_dt");
  if (v15)
  {
    v16 = v113;
    if ((*(_DWORD *)v15 & 7) == 3)
      v17 = *(const char **)(v15 + 24);
    else
      v17 = 0;
  }
  else
  {
    v17 = 0;
    v16 = v113;
  }
  v119 = (_QWORD *)sub_1002707FC(a1, v16, "header_user_data");
  if ((v17 != 0) != (v119 != 0))
  {
    v132 = 0;
    v131 = 0;
    qmemcpy((void *)sub_10029430C(&v131, 74), "One of \"header_dt\" and \"header_user_data\" is there, while the other is not", 74);
    sub_100294B74(-2, &v131, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6352);
  }
  if (v17)
  {
    v18 = sub_100277198(v17, &v131);
    if (v18 >= 1)
    {
      v19 = 0;
      v20 = (2 * v18);
      v21 = 120;
      v22 = v115;
      do
      {
        v23 = (((*((_DWORD *)&v131 + v19 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v131 + v19 + 1) & 7))) & 3);
        v21 = ((v21 + v23 - 1) & -v23) + v23 * *((_DWORD *)&v131 + v19);
        v19 += 2;
      }
      while (v19 < v20);
      if (v115)
        goto LABEL_58;
LABEL_63:
      v30 = 0;
      v31 = 0;
      v32 = 16;
      goto LABEL_80;
    }
  }
  v21 = 120;
  v22 = v115;
  if (!v115)
    goto LABEL_63;
LABEL_58:
  v24 = sub_100277198(v22, &v131);
  if (v24 < 1)
  {
    v26 = 0;
    v28 = v115;
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v27 = (2 * v24);
    v28 = v115;
    do
    {
      v29 = (((*((_DWORD *)&v131 + v25 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v131 + v25 + 1) & 7))) & 3);
      v26 = ((v26 + v29 - 1) & -v29) + v29 * *((_DWORD *)&v131 + v25);
      v25 += 2;
    }
    while (v25 < v27);
  }
  v33 = HIDWORD(v131);
  v34 = sub_100277198(v28, &v131);
  if (v34 < 1)
  {
    v32 = 16;
  }
  else
  {
    v35 = 0;
    v32 = 16;
    do
    {
      v36 = (((*((_DWORD *)&v131 + v35 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v131 + v35 + 1) & 7))) & 3);
      v32 = ((v32 + v36 - 1) & -v36) + v36 * *((_DWORD *)&v131 + v35);
      v35 += 2;
    }
    while (v35 < (2 * v34));
  }
  v37 = sub_100277198((const char *)v121, v128);
  v38 = (((v33 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v33 & 7))) & 3);
  v30 = (v26 + v38 - 1) & -v38;
  if (v37 < 1)
  {
    v31 = 0;
  }
  else
  {
    v39 = (2 * v37);
    if (v37 >= 9)
    {
      v41 = ((v39 - 1) >> 1) + 1;
      v42 = v41 & 7;
      if ((v41 & 7) == 0)
        v42 = 8;
      v43 = v41 - v42;
      v40 = 2 * v43;
      v44 = (const float *)v130;
      v45 = 0uLL;
      v46 = 0uLL;
      do
      {
        v47 = v44 - 8;
        v48 = (unsigned __int128)vld2q_f32(v47);
        v49 = (unsigned __int128)vld2q_f32(v44);
        v45 = vaddq_s32((int32x4_t)v48, v45);
        v46 = vaddq_s32((int32x4_t)v49, v46);
        v44 += 16;
        v43 -= 8;
      }
      while (v43);
      v31 = vaddvq_s32(vaddq_s32(v46, v45));
    }
    else
    {
      v40 = 0;
      v31 = 0;
    }
    do
    {
      v31 += v128[v40];
      v40 += 2;
    }
    while (v40 < v39);
  }
LABEL_80:
  v50 = sub_100277198((const char *)v121, v128);
  if (v50 < 2
    || (v128[0] == 2 ? (v51 = v128[1] == 4) : (v51 = 0),
        v51 ? (v52 = v128[2] < 1) : (v52 = 1),
        !v52 ? (v53 = v128[3] == 5) : (v53 = 0),
        !v53))
  {
    v132 = 0;
    v131 = 0;
    qmemcpy((void *)sub_10029430C(&v131, 52), "Graph edges should start with 2 integers and a float", 52);
    sub_100294B74(-5, &v131, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6378);
  }
  if (v50 < 3)
  {
    v110 = 4;
  }
  else
  {
    if ((((v129 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v129 & 7))) & 3) >= 8)
      v54 = 8;
    else
      v54 = 4;
    v110 = v54;
  }
  v55 = (2 * v50);
  if (v50 >= 9)
  {
    v58 = ((v55 - 1) >> 1) + 1;
    v59 = v58 & 7;
    if ((v58 & 7) == 0)
      v59 = 8;
    v60 = v58 - v59;
    v56 = 2 * v60;
    v61 = (const float *)v130;
    v62 = 0uLL;
    v63 = 0uLL;
    do
    {
      v64 = v61 - 8;
      v65 = (unsigned __int128)vld2q_f32(v64);
      v66 = (unsigned __int128)vld2q_f32(v61);
      v62 = vaddq_s32((int32x4_t)v65, v62);
      v63 = vaddq_s32((int32x4_t)v66, v63);
      v61 += 16;
      v60 -= 8;
    }
    while (v60);
    v57 = vaddvq_s32(vaddq_s32(v63, v62));
  }
  else
  {
    v56 = 0;
    v57 = 0;
  }
  do
  {
    v57 += v128[v56];
    v56 += 2;
  }
  while (v56 < v55);
  v67 = *(unsigned __int8 *)(v121 + 2);
  if (v67 == 102 || v67 == 49 && *(_BYTE *)(v121 + 3) == 102)
  {
    v106 = (v67 - 48) >= 0xA;
    v70 = v121;
    if (!v106)
      v70 = v121 + 1;
    v69 = (char *)(v70 + 3);
  }
  else
  {
    v68 = strtol((const char *)(v121 + 2), &__endptr, 10);
    v69 = v126;
    sprintf(v126, "%df%s", v68 - 1, __endptr);
  }
  v71 = sub_100277198(v69, &v131);
  if (v71 < 1)
  {
    v73 = 40;
  }
  else
  {
    v72 = 0;
    v73 = 40;
    do
    {
      v74 = (((*((_DWORD *)&v131 + v72 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v131 + v72 + 1) & 7))) & 3);
      v73 = ((v73 + v74 - 1) & -v74) + v74 * *((_DWORD *)&v131 + v72);
      v72 += 2;
    }
    while (v72 < (2 * v71));
  }
  v75 = sub_100277198((const char *)v121, &v131);
  v76 = v14;
  if (v75 < 1)
  {
    v78 = 0;
  }
  else
  {
    v77 = 0;
    v78 = 0;
    do
    {
      v79 = (((*((_DWORD *)&v131 + v77 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v131 + v77 + 1) & 7))) & 3);
      v78 = ((v78 + v79 - 1) & -v79) + v79 * *((_DWORD *)&v131 + v77);
      v77 += 2;
    }
    while (v77 < (2 * v75));
  }
  v80 = HIDWORD(v131);
  v122 = sub_100222EAC(v76, v21, v32, v73, *(_QWORD *)(a1 + 24));
  if (v119)
  {
    if (!v17)
    {
      v132 = 0;
      v131 = 0;
      v82 = sub_10029430C(&v131, 9);
      *(_BYTE *)(v82 + 8) = 116;
      *(_QWORD *)v82 = *(_QWORD *)"header_dt";
      sub_100294B74(-215, &v131, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6405);
    }
    sub_10027856C((_DWORD *)a1, (uint64_t)v119, (uint64_t)&v131);
    if ((*(_DWORD *)v119 & 7) == 5)
      v81 = *(_DWORD *)(v119[2] + 40);
    else
      v81 = 1;
    sub_100278784((_DWORD *)a1, &v131, v81, (uint64_t)(v122 + 30), v17);
  }
  v83 = (((v80 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v80 & 7))) & 3);
  v84 = (v78 + v83 - 1) & -v83;
  v85 = 3 * v30;
  v112 = v84;
  v86 = 3 * v84;
  if (3 * v30 <= v86)
    v85 = v86;
  if (v85 <= 0x10000)
    v87 = 0x10000;
  else
    v87 = v85;
  v111 = v87;
  v120 = (char *)sub_1001D450C(v87);
  v116 = (_QWORD *)sub_1001D450C(8 * v117);
  v88 = sub_1002707FC(a1, v113, "vertices");
  v114 = sub_1002707FC(a1, v113, "edges");
  if (!v114)
  {
    v132 = 0;
    v131 = 0;
    qmemcpy((void *)sub_10029430C(&v131, 13), "No edges data", 13);
    sub_100294B74(-5, &v131, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6417);
  }
  if (v115 && !v88)
  {
    v132 = 0;
    v131 = 0;
    *(_OWORD *)sub_10029430C(&v131, 16) = *(_OWORD *)"No vertices data";
    sub_100294B74(-5, &v131, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6419);
  }
  if (v30 <= 1)
    v89 = 1;
  else
    v89 = v30;
  if (v115)
    sub_10027856C((_DWORD *)a1, v88, (uint64_t)&v131);
  if (v117 >= 1)
  {
    v90 = v117;
    if (v115)
    {
      v91 = 0;
      v92 = v30;
      v93 = v30;
      v94 = v116;
      v95 = v120;
      v96 = v111 / v89;
      do
      {
        if (!v91)
        {
          if ((int)v90 >= v96)
            v97 = v96;
          else
            v97 = v90;
          v91 = v97 * v31;
          sub_100278784((_DWORD *)a1, &v131, v97 * v31, (uint64_t)v120, v115);
          v95 = v120;
        }
        *(_QWORD *)v126 = 0;
        sub_100222F84((uint64_t)v122, 0, v126);
        *v94++ = *(_QWORD *)v126;
        memcpy((void *)(*(_QWORD *)v126 + 16), v95, v92);
        v95 += v93;
        --v91;
        --v90;
      }
      while (v90);
    }
    else
    {
      v98 = v116;
      do
      {
        *(_QWORD *)v126 = 0;
        sub_100222F84((uint64_t)v122, 0, v126);
        *v98++ = *(_QWORD *)v126;
        --v90;
      }
      while (v90);
    }
  }
  if (v112 <= 1)
    v99 = 1;
  else
    v99 = v112;
  sub_10027856C((_DWORD *)a1, v114, (uint64_t)&v131);
  if ((int)v123 >= 1)
  {
    v100 = 0;
    v101 = (int *)v120;
    v102 = v111 / v99;
    do
    {
      if (!v100)
      {
        if ((int)v123 >= v102)
          v103 = v102;
        else
          v103 = v123;
        v100 = v103 * v57;
        sub_100278784((_DWORD *)a1, &v131, v103 * v57, (uint64_t)v120, (const char *)v121);
        v101 = (int *)v120;
      }
      v124 = 0;
      v104 = v101[1];
      v105 = *v101;
      v106 = v105 >= v117 || v104 >= v117;
      if (v106)
      {
        *(_QWORD *)v126 = 0;
        v127 = 0;
        qmemcpy((void *)sub_10029430C(v126, 46), "Some of stored vertex indices are out of range", 46);
        sub_100294B74(-211, (uint64_t *)v126, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6464);
      }
      if (!sub_100223234((uint64_t)v122, (_DWORD *)v116[v105], (_DWORD *)v116[v104], 0, &v124))
      {
        *(_QWORD *)v126 = 0;
        v127 = 0;
        qmemcpy((void *)sub_10029430C(v126, 27), "Duplicated edge has occured", 27);
        sub_100294B74(-5, (uint64_t *)v126, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6470);
      }
      v108 = v124;
      *(_DWORD *)(v124 + 4) = v101[2];
      if (v73 >= 41)
        memcpy((void *)(v108 + 40), (const void *)(((unint64_t)v101 + v110 + 11) & ~(unint64_t)(v110 - 1)), v73 - 40);
      v101 = (int *)((char *)v101 + v112);
      --v100;
      LODWORD(v123) = v123 - 1;
    }
    while ((_DWORD)v123);
  }
  j__free(v120);
  j__free(v116);
  return v122;
}

void sub_10027B64C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_100008C88(a1);
  _Unwind_Resume(a1);
}

void sub_10027B73C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _DWORD *v13;
  const char *v14;
  char *v15;
  char *v16;
  const char *v17;
  int v18;
  int v19;
  int v20;
  size_t v21;
  _DWORD *v22;
  char v23;
  char v24;
  char v25;
  char *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  const char *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  size_t v40;
  _DWORD *v41;
  int v42;
  char *v43;
  const void *v44;
  void *v45;
  size_t v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  int v51;
  _DWORD *v52;
  int v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  char *v60;
  unint64_t v61;
  _QWORD v62[2];
  char v63[128];
  char v64[128];
  char v65[128];
  int v66;
  unsigned int v67;
  unsigned int v68;

  v5 = a3;
  v62[0] = a4;
  v62[1] = a5;
  v8 = *(int *)(a3 + 104);
  v9 = *(unsigned int *)(*(_QWORD *)(a3 + 112) + 104);
  v10 = sub_1001D450C(4 * v8);
  sub_10021EEC4(v5, (uint64_t)v59, 0);
  if (*(int *)(v5 + 40) >= 1)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = v60;
      if ((*(_DWORD *)v60 & 0x80000000) == 0)
      {
        *(_DWORD *)(v10 + 4 * v12) = *(_DWORD *)v60;
        *v13 = v12++;
      }
      v60 = (char *)v13 + *(int *)(v5 + 44);
      if ((unint64_t)v60 >= v61)
        sub_10021FB9C(v59, 1);
      ++v11;
    }
    while (v11 < *(_DWORD *)(v5 + 40));
  }
  v52 = (_DWORD *)v10;
  sub_100275840(a1, a2, 6, (uint64_t)"opencv-graph");
  if ((*(_DWORD *)v5 & 0x4000) != 0)
    v14 = "oriented";
  else
    v14 = "";
  sub_1002764D4(a1, (uint64_t)"flags", (uint64_t)v14, 1);
  sub_10027638C(a1, (uint64_t)"vertex_count", v8);
  v15 = sub_1002873BC((unsigned int *)v5, "vertex_dt", (uint64_t)v62, 16, v64);
  if (v15)
    sub_1002764D4(a1, (uint64_t)"vertex_dt", (uint64_t)v15, 0);
  sub_10027638C(a1, (uint64_t)"edge_count", v9);
  v16 = sub_1002873BC(*(unsigned int **)(v5 + 112), "edge_dt", (uint64_t)v62, 40, v65);
  if (v16)
    v17 = v16;
  else
    v17 = "";
  sprintf(v63, "2if%s", v17);
  sub_1002764D4(a1, (uint64_t)"edge_dt", (uint64_t)v63, 0);
  sub_100287720(a1, (int *)v5, (uint64_t)v62, 120);
  v18 = *(_DWORD *)(v5 + 44);
  if (v18 >= 21846)
    v19 = 3 * v18;
  else
    v19 = 0x10000;
  v20 = 3 * *(_DWORD *)(*(_QWORD *)(v5 + 112) + 44);
  if (v20 <= v19)
    v21 = v19;
  else
    v21 = v20;
  v53 = v21;
  v22 = (_DWORD *)sub_1001D450C(v21);
  v23 = 0;
  v24 = 1;
  v54 = v5;
  v55 = v15;
  while (2)
  {
    v25 = v24;
    if ((v24 & 1) != 0)
      v26 = v15;
    else
      v26 = v63;
    if (!v26)
      goto LABEL_24;
    v27 = v5;
    if ((v24 & 1) == 0)
      v27 = *(_QWORD *)(v5 + 112);
    v58 = *(unsigned int *)(v27 + 44);
    v28 = sub_100277198(v26, &v66);
    if (v28 < 1)
    {
      v30 = 0;
      v32 = v67;
      if ((v23 & 1) == 0)
      {
LABEL_41:
        v33 = 4;
        goto LABEL_42;
      }
    }
    else
    {
      v29 = 0;
      v30 = 0;
      do
      {
        v31 = (((*(&v66 + v29 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(&v66 + v29 + 1) & 7))) & 3);
        v30 = ((v30 + v31 - 1) & -v31) + v31 * *(&v66 + v29);
        v29 += 2;
      }
      while (v29 < (2 * v28));
      v32 = v67;
      if ((v23 & 1) == 0)
        goto LABEL_41;
    }
    if ((int)sub_100277198(v26, &v66) < 3)
      goto LABEL_41;
    if ((((v68 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v68 & 7))) & 3) >= 8)
      v33 = 8;
    else
      v33 = 4;
LABEL_42:
    if ((v25 & 1) != 0)
      v34 = "vertices";
    else
      v34 = "edges";
    sub_100275840(a1, v34, 13, 0);
    sub_10021EEC4(v27, (uint64_t)v59, 0);
    v35 = a1;
    if (*(int *)(v27 + 40) < 1)
      goto LABEL_23;
    v36 = 0;
    v37 = 0;
    v38 = (((v32 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v32 & 7))) & 3);
    v39 = (v30 + v38 - 1) & -v38;
    v56 = ~(unint64_t)(v33 - 1);
    v57 = v33 - 1;
    v40 = v39;
    v41 = v22;
    v42 = v53 / v39;
    do
    {
      v43 = v60;
      if ((*(_DWORD *)v60 & 0x80000000) != 0)
        goto LABEL_57;
      if ((v25 & 1) != 0)
      {
        v44 = v60 + 16;
        v45 = v41;
        v46 = v40;
      }
      else
      {
        v41 = (_DWORD *)(((unint64_t)v41 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        *v41 = **((_DWORD **)v60 + 3);
        v41[1] = **((_DWORD **)v43 + 4);
        v41[2] = *((_DWORD *)v43 + 1);
        if ((int)v58 < 41)
          goto LABEL_54;
        v45 = (void *)(((unint64_t)v41 + v57 + 12) & v56);
        v44 = v43 + 40;
        v46 = v58 - 40;
      }
      memcpy(v45, v44, v46);
LABEL_54:
      if (++v37 >= v42)
      {
        sub_10027662C(v35, (uint64_t)v22, v37, v26);
        v37 = 0;
        v41 = v22;
      }
      else
      {
        v41 = (_DWORD *)((char *)v41 + v40);
      }
LABEL_57:
      v60 += *(int *)(v27 + 44);
      if ((unint64_t)v60 >= v61)
        sub_10021FB9C(v59, 1);
      ++v36;
    }
    while (v36 < *(_DWORD *)(v27 + 40));
    v5 = v54;
    if (v37 >= 1)
      sub_10027662C(v35, (uint64_t)v22, v37, v26);
LABEL_23:
    sub_10027623C(v35);
    a1 = v35;
    v15 = v55;
LABEL_24:
    v24 = 0;
    v23 = 1;
    if ((v25 & 1) != 0)
      continue;
    break;
  }
  sub_10027623C(a1);
  sub_10021EEC4(v5, (uint64_t)v59, 0);
  v47 = *(_DWORD *)(v5 + 40);
  if (v47 >= 1)
  {
    v48 = 0;
    v49 = 0;
    do
    {
      v50 = v60;
      if ((*(_DWORD *)v60 & 0x80000000) == 0)
      {
        v51 = v52[v49++];
        *(_DWORD *)v60 = v51;
      }
      v60 = &v50[*(int *)(v5 + 44)];
      if ((unint64_t)v60 >= v61)
      {
        sub_10021FB9C(v59, 1);
        v47 = *(_DWORD *)(v5 + 40);
      }
      ++v48;
    }
    while (v48 < v47);
  }
  j__free(v22);
  j__free(v52);
}

_DWORD *sub_10027BD00(uint64_t a1)
{
  return sub_1002234EC(a1, 0);
}

BOOL sub_10027BD08(_BOOL8 result)
{
  if (result)
    return *(unsigned __int16 *)(result + 2) == 16964;
  return result;
}

uint64_t sub_10027BD20(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  _DWORD *v33;
  unint64_t v34;
  uint64_t __src;
  uint64_t v36;
  int v37[1024];

  v4 = sub_1002707FC((uint64_t)a1, a2, "sizes");
  v29 = a1;
  v5 = sub_1002707FC((uint64_t)a1, a2, "dt");
  if (!v5 || (*(_DWORD *)v5 & 7) != 3 || !v4 || !*(_QWORD *)(v5 + 24))
  {
    __src = 0;
    v36 = 0;
    qmemcpy((void *)sub_10029430C(&__src, 46), "Some of essential matrix attributes are absent", 46);
    sub_100294B74(-2, &__src, "icvReadSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5525);
  }
  if ((*(_DWORD *)v4 & 7) == 5)
  {
    v28 = *(const char **)(v5 + 24);
    v25 = *(_DWORD *)(*(_QWORD *)(v4 + 16) + 40);
    if ((v25 - 33) > 0xFFFFFFDF)
      goto LABEL_14;
LABEL_13:
    __src = 0;
    v36 = 0;
    qmemcpy((void *)sub_10029430C(&__src, 48), "Could not determine sparse matrix dimensionality", 48);
    sub_100294B74(-212, &__src, "icvReadSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5531);
  }
  if ((*(_DWORD *)v4 & 7) == 1)
    v6 = 1;
  else
    v6 = -1;
  v28 = *(const char **)(v5 + 24);
  v25 = v6;
  if ((v6 - 33) <= 0xFFFFFFDF)
    goto LABEL_13;
LABEL_14:
  sub_10027856C(a1, v4, (uint64_t)&__src);
  if ((*(_DWORD *)v4 & 7) == 5)
    v7 = *(_DWORD *)(*(_QWORD *)(v4 + 16) + 40);
  else
    v7 = 1;
  sub_100278784(a1, &__src, v7, (uint64_t)v37, "i");
  v8 = sub_10028707C(v28);
  v9 = (_DWORD *)sub_1002707FC((uint64_t)a1, a2, "data");
  v10 = (uint64_t)v9;
  if (!v9 || (*v9 & 7) != 5)
  {
    __src = 0;
    v36 = 0;
    qmemcpy((void *)sub_10029430C(&__src, 44), "The matrix data is not found in file storage", 44);
    sub_100294B74(-2, &__src, "icvReadSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5538);
  }
  v27 = sub_1001F57B8(v25, v37, v8);
  v11 = *(_QWORD *)(v10 + 16);
  sub_10027856C(a1, v10, (uint64_t)v32);
  if (*(int *)(v11 + 40) >= 1)
  {
    v12 = 0;
    v13 = (v8 >> 3) & 0x1FF;
    v14 = v13 + 1;
    v26 = v25 - 1;
    v15 = v13 + 2;
    do
    {
      if ((*v33 & 7) != 1)
      {
        v30 = 0;
        v31 = 0;
        qmemcpy((void *)sub_10029430C(&v30, 31), "Sparse matrix data is corrupted", 31);
        sub_100294B74(-212, &v30, "icvReadSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5553);
      }
      v16 = v33[4];
      if (v12 < 1 || v16 < 0)
      {
        if (v12 < 1)
        {
          LODWORD(__src) = v33[4];
          v17 = 1;
          v18 = v25;
          v19 = v25 - 1;
          if (v25 > 1)
          {
LABEL_31:
            v12 = v18 + v12 - v17;
            v20 = (_DWORD *)&__src + v17;
            do
            {
              v22 = (_DWORD *)((char *)v33 + *(int *)(v11 + 44));
              v33 = v22;
              if ((unint64_t)v22 >= v34)
              {
                sub_10021FB9C(v32, 1);
                v22 = v33;
              }
              if ((*v22 & 7) != 1 || (v21 = v22[4], v21 < 0))
              {
                v30 = 0;
                v31 = 0;
                qmemcpy((void *)sub_10029430C(&v30, 31), "Sparse matrix data is corrupted", 31);
                sub_100294B74(-212, &v30, "icvReadSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5569);
              }
              *v20++ = v21;
              --v19;
            }
            while (v19);
          }
        }
        else
        {
          v17 = v26 + v16;
          v18 = v25;
          v19 = v25 - v17;
          if (v25 > v17)
            goto LABEL_31;
        }
      }
      else
      {
        *((_DWORD *)&__src + v26) = v16;
      }
      v33 = (_DWORD *)((char *)v33 + *(int *)(v11 + 44));
      if ((unint64_t)v33 >= v34)
        sub_10021FB9C(v32, 1);
      v23 = sub_1001F7364(v27, (unsigned int *)&__src, 0, 1, 0);
      sub_100278784(v29, v32, v14, v23, v28);
      v12 += v15;
    }
    while (v12 < *(_DWORD *)(v11 + 40));
  }
  return v27;
}

void sub_10027C1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10027C280(uint64_t a1, const char *a2, _DWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  char *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  int v16;
  int *v17;
  int *v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  int v27;
  _QWORD __src[3];
  int **v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  char v35;
  _BYTE v36[15];

  sub_10021E0DC(0);
  v7 = (uint64_t)v6;
  v34 = v6;
  sub_100275840(a1, a2, 6, (uint64_t)"opencv-sparse-matrix");
  v27 = sub_1001F65B4((uint64_t)a3, 0);
  sub_100275840(a1, "sizes", 13, 0);
  sub_10027662C(a1, (uint64_t)(a3 + 13), v27, "i");
  sub_10027623C(a1);
  sprintf(&v35, "%d%c", ((*a3 >> 3) & 0x1FF) + 1, aUcwsifdr[*a3 & 7]);
  if (v36[1])
    v8 = 0;
  else
    v8 = v35 == 49;
  if (v8)
    v9 = v36;
  else
    v9 = &v35;
  sub_1002764D4(a1, (uint64_t)"dt", (uint64_t)v9, 0);
  sub_100275840(a1, "data", 13, 0);
  v10 = sub_10021E968(7u, 0x60uLL, 8uLL, v7);
  v11 = sub_1001F5C88((uint64_t)a3, (uint64_t)&v31);
  if (v11)
  {
    while (1)
    {
      __src[0] = v11 + (int)a3[12];
      sub_10021FC6C((uint64_t)v10, __src);
      v11 = *(_QWORD *)(v32 + 8);
      if (!v11)
      {
        v12 = v33;
        v13 = v33 + 1;
        v33 = v13;
        v14 = *(_DWORD *)(v31 + 40);
        if (v13 >= v14)
          break;
        v15 = (uint64_t *)(*(_QWORD *)(v31 + 32) + 8 * v12 + 8);
        while (1)
        {
          v11 = *v15;
          if (*v15)
            break;
          ++v13;
          ++v15;
          if (v14 == v13)
            goto LABEL_16;
        }
        v33 = v13;
      }
      v32 = v11;
    }
  }
LABEL_16:
  sub_10022090C((uint64_t)v10, (uint64_t (*)(void))sub_100287B60, (uint64_t)&v27);
  sub_10021EEC4((uint64_t)v10, (uint64_t)__src, 0);
  if ((int)v10[10] >= 1)
  {
    v16 = 0;
    v17 = 0;
    while (1)
    {
      v18 = *v29++;
      if ((unint64_t)v29 >= v30)
        sub_10021FB9C(__src, 1);
      if (v16)
        break;
      v24 = 0;
      if (v27 > 0)
        goto LABEL_29;
LABEL_18:
      sub_10027662C(a1, (uint64_t)v18 + a3[11] - a3[12], 1, &v35);
      ++v16;
      v17 = v18;
      if (v16 >= v10[10])
        goto LABEL_32;
    }
    v19 = 0;
    v20 = v18;
    do
    {
      v22 = *v20++;
      v21 = v22;
      v23 = *v17++;
      ++v19;
    }
    while (v21 == v23);
    v24 = v19 - 1;
    if (v27 - 1 > v19 - 1)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 312))(a1, 0, (v19 - v27));
    if (v24 >= v27)
      goto LABEL_18;
LABEL_29:
    v25 = (unsigned int *)&v18[v24];
    do
    {
      v26 = *v25++;
      (*(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 312))(a1, 0, v26);
      ++v24;
    }
    while (v27 > v24);
    goto LABEL_18;
  }
LABEL_32:
  sub_10027623C(a1);
  sub_10027623C(a1);
  sub_10021E204(&v34);
}

_DWORD *sub_10027C5B0(_DWORD *result)
{
  if (result)
    return (_DWORD *)(*result == 144);
  return result;
}

uint64_t sub_10027C5C4(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[8];

  v4 = sub_1002707FC((uint64_t)a1, a2, "width");
  if (v4)
  {
    if ((*(_DWORD *)v4 & 7) == 2)
    {
      v5 = (uint64_t)rint(*(double *)(v4 + 16));
      v6 = sub_1002707FC((uint64_t)a1, a2, "height");
      if (v6)
        goto LABEL_8;
    }
    else
    {
      if ((*(_DWORD *)v4 & 7) == 1)
      {
        LODWORD(v5) = *(_DWORD *)(v4 + 16);
        v6 = sub_1002707FC((uint64_t)a1, a2, "height");
        if (!v6)
          goto LABEL_5;
LABEL_8:
        if ((*(_DWORD *)v6 & 7) == 2)
        {
          v7 = (uint64_t)rint(*(double *)(v6 + 16));
          v8 = sub_1002707FC((uint64_t)a1, a2, "dt");
          if (v8)
            goto LABEL_19;
        }
        else
        {
          if ((*(_DWORD *)v6 & 7) != 1)
          {
            v7 = 0x7FFFFFFFLL;
            v8 = sub_1002707FC((uint64_t)a1, a2, "dt");
            if (!v8)
              goto LABEL_22;
            goto LABEL_19;
          }
          v7 = *(unsigned int *)(v6 + 16);
          v8 = sub_1002707FC((uint64_t)a1, a2, "dt");
          if (v8)
            goto LABEL_19;
        }
LABEL_22:
        v9 = 0;
        v10 = sub_1002707FC((uint64_t)a1, a2, "origin");
        if (!v10)
          goto LABEL_26;
        goto LABEL_23;
      }
      LODWORD(v5) = 0x7FFFFFFF;
      v6 = sub_1002707FC((uint64_t)a1, a2, "height");
      if (v6)
        goto LABEL_8;
    }
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = sub_1002707FC((uint64_t)a1, a2, "height");
    if (v6)
      goto LABEL_8;
  }
LABEL_5:
  v7 = 0;
  v8 = sub_1002707FC((uint64_t)a1, a2, "dt");
  if (!v8)
    goto LABEL_22;
LABEL_19:
  if ((*(_DWORD *)v8 & 7) != 3)
    goto LABEL_22;
  v9 = *(const char **)(v8 + 24);
  v10 = sub_1002707FC((uint64_t)a1, a2, "origin");
  if (!v10)
  {
LABEL_26:
    v11 = 0;
    if (!(_DWORD)v5)
      goto LABEL_30;
    goto LABEL_27;
  }
LABEL_23:
  if ((*(_DWORD *)v10 & 7) != 3)
    goto LABEL_26;
  v11 = *(_QWORD *)(v10 + 24);
  if (!(_DWORD)v5)
    goto LABEL_30;
LABEL_27:
  if (!(_DWORD)v7 || !v9 || !v11)
  {
LABEL_30:
    v46 = 0;
    v47 = 0;
    qmemcpy((void *)sub_10029430C(&v46, 45), "Some of essential image attributes are absent", 45);
    sub_100294B74(-2, &v46, "icvReadImage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5666);
  }
  v12 = sub_10028707C(v9);
  v13 = sub_1002707FC((uint64_t)a1, a2, "layout");
  if (!v13)
  {
    if (!strcmp("interleaved", "interleaved"))
      goto LABEL_38;
LABEL_37:
    v46 = 0;
    v47 = 0;
    qmemcpy((void *)sub_10029430C(&v46, 35), "Only interleaved images can be read", 35);
    sub_100294B74(-2, &v46, "icvReadImage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5671);
  }
  if ((*(_DWORD *)v13 & 7) != 3)
    goto LABEL_37;
  v14 = *(const char **)(v13 + 24);
  if (!v14 || strcmp(v14, "interleaved"))
    goto LABEL_37;
LABEL_38:
  v15 = sub_1002707FC((uint64_t)a1, a2, "data");
  if (!v15)
  {
    v46 = 0;
    v47 = 0;
    qmemcpy((void *)sub_10029430C(&v46, 43), "The image data is not found in file storage", 43);
    sub_100294B74(-2, &v46, "icvReadImage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5675);
  }
  v16 = v15;
  if ((*(_DWORD *)v15 & 7u) < 5)
  {
    v17 = v7 * v5;
    v18 = ((v12 >> 3) & 0x1FF) + 1;
    if (((*(_DWORD *)v15 & 7) != 0) == (_DWORD)v18 * (_DWORD)v7 * (_DWORD)v5)
      goto LABEL_44;
LABEL_43:
    v46 = 0;
    v47 = 0;
    qmemcpy((void *)sub_10029430C(&v46, 63), "The matrix size does not match to the number of stored elements", 63);
    sub_100294B74(-209, &v46, "icvReadImage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5679);
  }
  v17 = v7 * v5;
  v18 = ((v12 >> 3) & 0x1FF) + 1;
  if (*(_DWORD *)(*(_QWORD *)(v15 + 16) + 40) != (_DWORD)v18 * (_DWORD)v7 * (_DWORD)v5)
    goto LABEL_43;
LABEL_44:
  if ((v12 & 7) == 4 || (v12 & 5) == 1)
    v20 = 0x80000000;
  else
    v20 = 0;
  v21 = sub_1001F7E50(v5 | (unint64_t)(v7 << 32), (0x442211088uLL >> (4 * (v12 & 7))) & 0x78 | v20, v18);
  v22 = sub_1002707FC((uint64_t)a1, a2, "roi");
  if (v22)
  {
    v23 = v22;
    v24 = sub_1002707FC((uint64_t)a1, v22, "x");
    v45 = v7;
    if (v24)
    {
      if ((*(_DWORD *)v24 & 7) == 2)
      {
        v25 = (uint64_t)rint(*(double *)(v24 + 16));
      }
      else if ((*(_DWORD *)v24 & 7) == 1)
      {
        LODWORD(v25) = *(_DWORD *)(v24 + 16);
      }
      else
      {
        LODWORD(v25) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v25) = 0;
    }
    v26 = v25;
    v27 = sub_1002707FC((uint64_t)a1, v23, "y");
    v44 = v17;
    if (v27)
    {
      if ((*(_DWORD *)v27 & 7) == 2)
      {
        v28 = (uint64_t)rint(*(double *)(v27 + 16));
        v29 = sub_1002707FC((uint64_t)a1, v23, "width");
        if (!v29)
          goto LABEL_62;
      }
      else if ((*(_DWORD *)v27 & 7) == 1)
      {
        v28 = *(unsigned int *)(v27 + 16);
        v29 = sub_1002707FC((uint64_t)a1, v23, "width");
        if (!v29)
        {
LABEL_62:
          LODWORD(v30) = 0;
          goto LABEL_73;
        }
      }
      else
      {
        v28 = 0x7FFFFFFFLL;
        v29 = sub_1002707FC((uint64_t)a1, v23, "width");
        if (!v29)
          goto LABEL_62;
      }
    }
    else
    {
      v28 = 0;
      v29 = sub_1002707FC((uint64_t)a1, v23, "width");
      if (!v29)
        goto LABEL_62;
    }
    if ((*(_DWORD *)v29 & 7) == 2)
    {
      v30 = (uint64_t)rint(*(double *)(v29 + 16));
    }
    else if ((*(_DWORD *)v29 & 7) == 1)
    {
      LODWORD(v30) = *(_DWORD *)(v29 + 16);
    }
    else
    {
      LODWORD(v30) = 0x7FFFFFFF;
    }
LABEL_73:
    v7 = v26 | (v28 << 32);
    v31 = v30;
    v32 = sub_1002707FC((uint64_t)a1, v23, "height");
    if (v32)
    {
      if ((*(_DWORD *)v32 & 7) == 2)
      {
        v33 = (uint64_t)rint(*(double *)(v32 + 16));
      }
      else if ((*(_DWORD *)v32 & 7) == 1)
      {
        v33 = *(unsigned int *)(v32 + 16);
      }
      else
      {
        v33 = 0x7FFFFFFFLL;
      }
    }
    else
    {
      v33 = 0;
    }
    v34 = v31 | (v33 << 32);
    v35 = sub_1002707FC((uint64_t)a1, v23, "coi");
    if (v35)
    {
      if ((*(_DWORD *)v35 & 7) == 2)
      {
        v36 = (uint64_t)rint(*(double *)(v35 + 16));
      }
      else if ((*(_DWORD *)v35 & 7) == 1)
      {
        v36 = *(unsigned int *)(v35 + 16);
      }
      else
      {
        v36 = 0x7FFFFFFFLL;
      }
    }
    else
    {
      v36 = 0;
    }
    sub_1001F7FE4(v21, v7, v34);
    sub_1001F81E0(v21, v36);
    LODWORD(v7) = v45;
    v17 = v44;
  }
  v37 = ((_DWORD)v18 << ((0xFA50u >> (2 * (v12 & 7))) & 3)) * v5;
  v38 = *(_DWORD *)(v21 + 96);
  if (v37 == v38)
    v39 = v17;
  else
    v39 = v5;
  if (v37 == v38)
    v40 = 1;
  else
    v40 = v7;
  sub_10027856C(a1, v16, (uint64_t)v48);
  if (v40 >= 1)
  {
    v41 = 0;
    v42 = v39 * v18;
    do
      sub_100278784(a1, v48, v42, *(_QWORD *)(v21 + 88) + *(int *)(v21 + 96) * (uint64_t)v41++, v9);
    while (v40 != v41);
  }
  return v21;
}

void sub_10027CCF0(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10029434C((uint64_t *)va);
  __break(1u);
}

void sub_10027CD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10027CD60(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v5;
  const char *v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v18[2];
  char v19;
  _BYTE v20[15];

  if (*(_DWORD *)(a3 + 28) == 1)
  {
    v18[0] = 0;
    v18[1] = 0;
    qmemcpy((void *)sub_10029430C(v18, 48), "Images with planar data layout are not supported", 48);
    sub_100294B74(-210, v18, "icvWriteImage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5606);
  }
  sub_100275840(a1, a2, 6, (uint64_t)"opencv-image");
  sub_10027638C(a1, (uint64_t)"width", *(unsigned int *)(a3 + 40));
  sub_10027638C(a1, (uint64_t)"height", *(unsigned int *)(a3 + 44));
  if (*(_DWORD *)(a3 + 32))
    v5 = "bottom-left";
  else
    v5 = "top-left";
  sub_1002764D4(a1, (uint64_t)"origin", (uint64_t)v5, 0);
  if (*(_DWORD *)(a3 + 28) == 1)
    v6 = "planar";
  else
    v6 = "interleaved";
  sub_1002764D4(a1, (uint64_t)"layout", (uint64_t)v6, 0);
  if (*(_QWORD *)(a3 + 48))
  {
    sub_100275840(a1, "roi", 14, 0);
    sub_10027638C(a1, (uint64_t)"x", *(unsigned int *)(*(_QWORD *)(a3 + 48) + 4));
    sub_10027638C(a1, (uint64_t)"y", *(unsigned int *)(*(_QWORD *)(a3 + 48) + 8));
    sub_10027638C(a1, (uint64_t)"width", *(unsigned int *)(*(_QWORD *)(a3 + 48) + 12));
    sub_10027638C(a1, (uint64_t)"height", *(unsigned int *)(*(_QWORD *)(a3 + 48) + 16));
    sub_10027638C(a1, (uint64_t)"coi", **(unsigned int **)(a3 + 48));
    sub_10027623C(a1);
  }
  v7 = (0x43160520u >> (((*(_DWORD *)(a3 + 16) >> 2) & 0x3C) + ((*(int *)(a3 + 16) >> 31) & 0x14))) & 7;
  v8 = &v19;
  sprintf(&v19, "%d%c", *(_DWORD *)(a3 + 8), aUcwsifdr[v7]);
  if (v20[1])
    v9 = 0;
  else
    v9 = v19 == 49;
  if (v9)
    v8 = v20;
  sub_1002764D4(a1, (uint64_t)"dt", (uint64_t)v8, 0);
  v10 = *(_DWORD *)(a3 + 40);
  v11 = (*(_DWORD *)(a3 + 8) * v10) << ((0xFA50u >> (2 * v7)) & 3);
  v12 = *(_DWORD *)(a3 + 96);
  if (v11 == v12)
    v13 = 1;
  else
    v13 = *(_DWORD *)(a3 + 44);
  if (v11 == v12)
    v14 = *(_DWORD *)(a3 + 44);
  else
    v14 = 1;
  sub_100275840(a1, "data", 13, 0);
  if (v13 >= 1)
  {
    v15 = 0;
    v16 = v14 * v10;
    do
      sub_10027662C(a1, *(_QWORD *)(a3 + 88) + *(int *)(a3 + 96) * (uint64_t)v15++, v16, v8);
    while (v13 != v15);
  }
  sub_10027623C(a1);
  return sub_10027623C(a1);
}

void sub_10027D084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_10027D0B4(_BOOL8 result)
{
  if (result)
    return *(_WORD *)(result + 2) == 16962
        && (*(_DWORD *)(result + 36) & 0x80000000) == 0
        && *(_DWORD *)(result + 32) >= 0;
  return result;
}

uint64_t sub_10027D0E8(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_1002707FC((uint64_t)a1, a2, "rows");
  if (!v4)
  {
    LODWORD(v5) = -1;
    v6 = sub_1002707FC((uint64_t)a1, a2, "cols");
    if (v6)
      goto LABEL_8;
    goto LABEL_5;
  }
  if ((*(_DWORD *)v4 & 7) == 2)
  {
    v5 = (uint64_t)rint(*(double *)(v4 + 16));
    v6 = sub_1002707FC((uint64_t)a1, a2, "cols");
    if (v6)
      goto LABEL_8;
    goto LABEL_5;
  }
  if ((*(_DWORD *)v4 & 7) != 1)
  {
    LODWORD(v5) = 0x7FFFFFFF;
    v6 = sub_1002707FC((uint64_t)a1, a2, "cols");
    if (v6)
      goto LABEL_8;
LABEL_5:
    LODWORD(v7) = -1;
    v8 = sub_1002707FC((uint64_t)a1, a2, "dt");
    if (!v8)
      goto LABEL_23;
    goto LABEL_19;
  }
  LODWORD(v5) = *(_DWORD *)(v4 + 16);
  v6 = sub_1002707FC((uint64_t)a1, a2, "cols");
  if (!v6)
    goto LABEL_5;
LABEL_8:
  if ((*(_DWORD *)v6 & 7) == 2)
  {
    v7 = (uint64_t)rint(*(double *)(v6 + 16));
    v8 = sub_1002707FC((uint64_t)a1, a2, "dt");
    if (!v8)
      goto LABEL_23;
  }
  else if ((*(_DWORD *)v6 & 7) == 1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 + 16);
    v8 = sub_1002707FC((uint64_t)a1, a2, "dt");
    if (!v8)
      goto LABEL_23;
  }
  else
  {
    LODWORD(v7) = 0x7FFFFFFF;
    v8 = sub_1002707FC((uint64_t)a1, a2, "dt");
    if (!v8)
      goto LABEL_23;
  }
LABEL_19:
  if ((*(_DWORD *)v8 & 7) != 3
    || (v9 = *(const char **)(v8 + 24), (v5 & 0x80000000) != 0)
    || (v7 & 0x80000000) != 0
    || !v9)
  {
LABEL_23:
    v16 = 0;
    v17 = 0;
    qmemcpy((void *)sub_10029430C(&v16, 46), "Some of essential matrix attributes are absent", 46);
    sub_100294B74(-2, &v16, "icvReadMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5286);
  }
  v10 = sub_10028707C(*(const char **)(v8 + 24));
  v11 = sub_1002707FC((uint64_t)a1, a2, "data");
  if (!v11)
  {
    v16 = 0;
    v17 = 0;
    qmemcpy((void *)sub_10029430C(&v16, 44), "The matrix data is not found in file storage", 44);
    sub_100294B74(-2, &v16, "icvReadMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5292);
  }
  v12 = v11;
  if ((*(_DWORD *)v11 & 7u) < 5)
  {
    v13 = (*(_DWORD *)v11 & 7) != 0;
    if ((*(_DWORD *)v11 & 7) == 0)
      return sub_1001F3858(v5, v7, v10);
  }
  else
  {
    v13 = *(_DWORD *)(*(_QWORD *)(v11 + 16) + 40);
    if (v13 < 1)
      return sub_1001F3858(v5, v7, v10);
  }
  if (v13 != (_DWORD)v7 * (_DWORD)v5 + (_DWORD)v7 * (_DWORD)v5 * ((v10 >> 3) & 0x1FF))
  {
    v16 = 0;
    v17 = 0;
    qmemcpy((void *)sub_10029430C(&v16, 63), "The matrix size does not match to the number of stored elements", 63);
    sub_100294B74(-209, &v16, "icvReadMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5297);
  }
  v14 = sub_1001F3830(v5, v7, v10);
  sub_100278FE0(a1, v12, *(_QWORD *)(v14 + 24), v9);
  return v14;
}

void sub_10027D42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  __break(1u);
}

void sub_10027D43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10027D484(uint64_t a1, const char *a2, uint64_t a3)
{
  BOOL v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v13;
  _BYTE v14[15];

  sub_100275840(a1, a2, 6, (uint64_t)"opencv-matrix");
  sub_10027638C(a1, (uint64_t)"rows", *(unsigned int *)(a3 + 32));
  sub_10027638C(a1, (uint64_t)"cols", *(unsigned int *)(a3 + 36));
  sprintf(&v13, "%d%c", ((*(_DWORD *)a3 >> 3) & 0x1FF) + 1, aUcwsifdr[*(_DWORD *)a3 & 7]);
  if (v14[1])
    v5 = 0;
  else
    v5 = v13 == 49;
  if (v5)
    v6 = v14;
  else
    v6 = &v13;
  sub_1002764D4(a1, (uint64_t)"dt", (uint64_t)v6, 0);
  sub_100275840(a1, "data", 13, 0);
  v7 = sub_1001F67D4(a3);
  if ((int)v7 >= 1)
  {
    v8 = HIDWORD(v7);
    if (SHIDWORD(v7) >= 1)
    {
      if (*(_QWORD *)(a3 + 24))
      {
        v9 = 0;
        if ((*(_DWORD *)a3 & 0x4000) != 0)
          v10 = 1;
        else
          v10 = HIDWORD(v7);
        if ((*(_DWORD *)a3 & 0x4000) == 0)
          LODWORD(v8) = 1;
        v11 = v8 * v7;
        do
        {
          sub_10027662C(a1, *(_QWORD *)(a3 + 24) + v9 * *(int *)(a3 + 4), v11, &v13);
          ++v9;
        }
        while (v10 != v9);
      }
    }
  }
  sub_10027623C(a1);
  return sub_10027623C(a1);
}

BOOL sub_10027D60C(_BOOL8 result)
{
  if (result)
    return *(unsigned __int16 *)(result + 2) == 16963;
  return result;
}

uint64_t sub_10027D628(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v17;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[8];

  memset(v22, 0, sizeof(v22));
  v4 = sub_1002707FC((uint64_t)a1, a2, "sizes");
  v5 = sub_1002707FC((uint64_t)a1, a2, "dt");
  if (!v5 || (*(_DWORD *)v5 & 7) != 3 || !v4 || !*(_QWORD *)(v5 + 24))
  {
    v20 = 0;
    v21 = 0;
    qmemcpy((void *)sub_10029430C(&v20, 46), "Some of essential matrix attributes are absent", 46);
    sub_100294B74(-2, &v20, "icvReadMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5369);
  }
  v19 = *(const char **)(v5 + 24);
  if ((*(_DWORD *)v4 & 7) == 5)
  {
    v6 = *(_DWORD *)(*(_QWORD *)(v4 + 16) + 40);
    if ((v6 - 33) > 0xFFFFFFDF)
      goto LABEL_14;
LABEL_13:
    v20 = 0;
    v21 = 0;
    qmemcpy((void *)sub_10029430C(&v20, 45), "Could not determine the matrix dimensionality", 45);
    sub_100294B74(-212, &v20, "icvReadMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5375);
  }
  if ((*(_DWORD *)v4 & 7) == 1)
    v6 = 1;
  else
    v6 = -1;
  if ((v6 - 33) <= 0xFFFFFFDF)
    goto LABEL_13;
LABEL_14:
  sub_10027856C(a1, v4, (uint64_t)&v20);
  if ((*(_DWORD *)v4 & 7) == 5)
    v7 = *(_DWORD *)(*(_QWORD *)(v4 + 16) + 40);
  else
    v7 = 1;
  sub_100278784(a1, &v20, v7, (uint64_t)v22, "i");
  v8 = sub_10028707C(v19);
  v9 = sub_1002707FC((uint64_t)a1, a2, "data");
  v10 = v9;
  if (!v9)
  {
    v20 = 0;
    v21 = 0;
    qmemcpy((void *)sub_10029430C(&v20, 44), "The matrix data is not found in file storage", 44);
    sub_100294B74(-2, &v20, "icvReadMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5382);
  }
  v11 = ((v8 >> 3) & 0x1FF) + 1;
  if (v6 >= 1)
  {
    v12 = v6;
    v13 = v22;
    do
    {
      if (!*v13)
      {
        v20 = 0;
        v21 = 0;
        *(_QWORD *)sub_10029430C(&v20, 8) = 0x5D695B73657A6973;
        sub_100294B74(-215, &v20, "icvReadMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5388);
      }
      v11 *= *v13++;
      --v12;
    }
    while (v12);
  }
  if ((*(_DWORD *)v9 & 7u) < 5)
  {
    v14 = (*(_DWORD *)v9 & 7) != 0;
    if ((*(_DWORD *)v9 & 7) != 0 && v14 != v11)
    {
LABEL_29:
      v20 = 0;
      v21 = 0;
      qmemcpy((void *)sub_10029430C(&v20, 63), "The matrix size does not match to the number of stored elements", 63);
      sub_100294B74(-209, &v20, "icvReadMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5396);
    }
  }
  else
  {
    v14 = *(_DWORD *)(*(_QWORD *)(v9 + 16) + 40);
    if (v14 >= 1 && v14 != v11)
      goto LABEL_29;
  }
  if (v14 < 1)
    return sub_1001F45EC(v6, (uint64_t)v22, v8);
  v17 = sub_1001F45C4(v6, (uint64_t)v22, v8);
  sub_100278FE0(a1, v10, *(_QWORD *)(v17 + 24), v19);
  return v17;
}

void sub_10027DA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10027DAB0(uint64_t a1, const char *a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  BOOL v7;
  char *v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[288];
  uint64_t v14;
  char v15;
  _BYTE v16[15];
  int __dst[32];

  v14 = a3;
  v11 = 0;
  sub_100275840(a1, a2, 6, (uint64_t)"opencv-nd-matrix");
  v5 = sub_1001F65B4(a3, __dst);
  sub_100275840(a1, "sizes", 13, 0);
  sub_10027662C(a1, (uint64_t)__dst, v5, "i");
  sub_10027623C(a1);
  v6 = sub_1001F6478((int *)a3);
  sprintf(&v15, "%d%c", ((v6 >> 3) & 0x1FF) + 1, aUcwsifdr[v6 & 7]);
  if (v16[1])
    v7 = 0;
  else
    v7 = v15 == 49;
  if (v7)
    v8 = v16;
  else
    v8 = &v15;
  sub_1002764D4(a1, (uint64_t)"dt", (uint64_t)v8, 0);
  sub_100275840(a1, "data", 13, 0);
  if (*(int *)(a3 + 32) >= 1 && *(_QWORD *)(a3 + 24))
  {
    sub_1001F4ABC(1u, (uint64_t)&v14, 0, (uint64_t)v13, (uint64_t)&v10, 0);
    do
      sub_10027662C(a1, v12, v11, &v15);
    while (sub_1001F55F0(&v10));
  }
  sub_10027623C(a1);
  return sub_10027623C(a1);
}

uint64_t sub_10027DC48(_DWORD *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
  {
    v4 = -27;
LABEL_5:
    v7 = 0;
    v8 = 0;
    qmemcpy((void *)sub_10029430C(&v7, 31), "Invalid pointer to file storage", 31);
    sub_100294B74(v4, &v7, "cvRead", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6708);
  }
  if (*a1 != 1280131417)
  {
    v4 = -5;
    goto LABEL_5;
  }
  if (!a2)
    return 0;
  if ((*(_BYTE *)a2 & 0x10) == 0 || (v5 = *(_QWORD *)(a2 + 8)) == 0)
  {
    v7 = 0;
    v8 = 0;
    qmemcpy((void *)sub_10029430C(&v7, 57), "The node does not represent a user object (unknown type?)", 57);
    sub_100294B74(-2, &v7, "cvRead", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6714);
  }
  result = (*(uint64_t (**)(_DWORD *, uint64_t))(v5 + 48))(a1, a2);
  if (a3)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_10027DD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10027DDC4(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t (*v12)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  if (!a1)
  {
    v10 = -27;
LABEL_5:
    v14 = 0;
    v15 = 0;
    qmemcpy((void *)sub_10029430C(&v14, 31), "Invalid pointer to file storage", 31);
    sub_100294B74(v10, &v14, "cvWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6731);
  }
  if (*a1 != 1280131417)
  {
    v10 = -5;
    goto LABEL_5;
  }
  if (!a1[2])
  {
    v14 = 0;
    v15 = 0;
    qmemcpy((void *)sub_10029430C(&v14, 38), "The file storage is opened for reading", 38);
    sub_100294B74(-2, &v14, "cvWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6731);
  }
  if (!a3)
  {
    v14 = 0;
    v15 = 0;
    qmemcpy((void *)sub_10029430C(&v14, 34), "Null pointer to the written object", 34);
    sub_100294B74(-27, &v14, "cvWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6734);
  }
  v11 = qword_1004AFF48;
  if (!qword_1004AFF48)
  {
LABEL_14:
    v14 = 0;
    v15 = 0;
    qmemcpy((void *)sub_10029430C(&v14, 14), "Unknown object", 14);
    sub_100294B74(-5, &v14, "cvWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6738);
  }
  while (!(*(unsigned int (**)(uint64_t))(v11 + 32))(a3))
  {
    v11 = *(_QWORD *)(v11 + 16);
    if (!v11)
      goto LABEL_14;
  }
  v12 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (!v12)
  {
    v14 = 0;
    v15 = 0;
    qmemcpy((void *)sub_10029430C(&v14, 39), "The object does not have write function", 39);
    sub_100294B74(-5, &v14, "cvWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6741);
  }
  return v12(a1, a2, a3, a4, a5);
}

void sub_10027E01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_10027E094(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return v1 && *(_BYTE *)(v1 + 432) != 0;
}

uint64_t sub_10027E0B8(uint64_t a1, char **a2, unsigned int a3, uint64_t a4)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_10044E738;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  sub_10027E240((_QWORD *)a1, a2, a3, a4);
  return a1;
}

void sub_10027E10C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  unsigned int **v3;
  uint64_t v4;
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = v1;
  v6 = *(void **)(v4 + 40);
  if (v6)
  {
    *(_QWORD *)(v4 + 48) = v6;
    operator delete(v6);
  }
  sub_10029434C(v2);
  v7 = *v3;
  if (*v3)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  *v3 = 0;
  v3[1] = 0;
  _Unwind_Resume(a1);
}

_QWORD *sub_10027E16C(_QWORD *a1)
{
  void *v2;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_10044E738;
  v2 = (void *)a1[6];
  if (v2 != (void *)a1[5])
  {
    do
    {
      sub_10027623C(a1[2]);
      v3 = (void *)a1[5];
      v2 = (void *)(a1[6] - 1);
      a1[6] = v2;
    }
    while (v2 != v3);
    goto LABEL_5;
  }
  if (v2)
  {
LABEL_5:
    a1[6] = v2;
    operator delete(v2);
  }
  sub_10029434C(a1 + 3);
  v4 = (unsigned int *)a1[1];
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
  }
  a1[1] = 0;
  a1[2] = 0;
  return a1;
}

void sub_10027E21C(_QWORD *a1)
{
  sub_10027E16C(a1);
  operator delete();
}

uint64_t sub_10027E240(_QWORD *a1, char **a2, unsigned int a3, uint64_t a4)
{
  const char *v8;
  char *v9;
  const char *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  _BYTE v18[8];
  int v19;

  sub_100298C2C(v18, &off_10044E768);
  (*(void (**)(_QWORD *))(*a1 + 32))(a1);
  v8 = "";
  if (*a2)
    v9 = *a2;
  else
    v9 = "";
  if (*(_QWORD *)a4)
    v8 = *(const char **)a4;
  if (*(_QWORD *)(a4 + 8))
    v10 = v8;
  else
    v10 = 0;
  if (sub_100270B98(v9, 0, a3, v10))
    operator new();
  v11 = (unsigned int *)a1[1];
  a1[1] = 0;
  a1[2] = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
  }
  v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  if ((_DWORD)v15)
    v16 = 6;
  else
    v16 = 0;
  *((_DWORD *)a1 + 16) = v16;
  if (v19)
    sub_1002989D0(v18);
  return v15;
}

void sub_10027E38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10027E3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001D40CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10027E3B4(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (_QWORD *)(a1 + 8);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v4 = (unsigned int *)(result + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  *v3 = 0;
  v3[1] = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_10027E410@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  v3 = a1[2];
  if (v3 && *(_QWORD *)(v3 + 376))
    sub_10026FE60(v3, a2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

void sub_10027E45C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_10029434C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10027E474(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  _BYTE *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  _BYTE *v31;
  const char *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  char *v36;
  char *v37;
  unint64_t v38;
  __int128 *v39;
  _OWORD *v40;
  unint64_t v41;
  __int128 v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  const char *v49;
  BOOL v50;
  int v51;
  unsigned __int8 *v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  const char *v64;
  uint64_t v65;

  if (*(_QWORD *)a2)
    v4 = *(unsigned __int8 **)a2;
  else
    v4 = "";
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v5 = *v4;
    if ((v5 | 0x20) == 0x7D)
    {
      v6 = *(_QWORD *)(a1 + 48);
      if (*(_QWORD *)(a1 + 40) == v6)
      {
        sub_10029487C((uint64_t *)&v64, "Extra closing '%c'", *v4);
        sub_100294B74(-2, (uint64_t *)&v64, "operator<<", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6957);
      }
      if (v5 == 93)
        v7 = 91;
      else
        v7 = 123;
      v8 = *(char *)(v6 - 1);
      if (v7 != (_DWORD)v8)
      {
        sub_10029487C((uint64_t *)&v64, "The closing '%c' does not match the opening '%c'", (char)v5, v8);
        sub_100294B74(-2, (uint64_t *)&v64, "operator<<", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6960);
      }
      *(_QWORD *)(a1 + 48) = v6 - 1;
      v9 = 6;
      if (*(_QWORD *)(a1 + 40) != v6 - 1)
      {
        if (*(_BYTE *)(v6 - 2) == 123)
          v9 = 6;
        else
          v9 = 1;
      }
      *(_DWORD *)(a1 + 64) = v9;
      sub_10027623C(*(_QWORD *)(a1 + 16));
      v64 = 0;
      v65 = 0;
      if (&v64 != (const char **)(a1 + 24))
      {
        sub_10029434C((uint64_t *)(a1 + 24));
        v10 = v64;
        if (v64)
        {
          v11 = (unsigned int *)(v64 - 4);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
          v10 = v64;
        }
        v13 = v65;
        *(_QWORD *)(a1 + 24) = v10;
        *(_QWORD *)(a1 + 32) = v13;
      }
LABEL_109:
      sub_10029434C((uint64_t *)&v64);
      return a1;
    }
    if (*(_DWORD *)(a1 + 64) == 6)
    {
      if (v5 != 95 && ((v5 & 0xDF) - 65) >= 0x1Au)
      {
        sub_10029487C((uint64_t *)&v64, "Incorrect element name %s", (const char *)v4);
        sub_100294B74(-2, (uint64_t *)&v64, "operator<<", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6970);
      }
      if (a1 + 24 != a2)
      {
        sub_10029434C((uint64_t *)(a1 + 24));
        v15 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2)
        {
          v16 = (unsigned int *)(v15 - 4);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 + 1, v16));
          v15 = *(unsigned __int8 **)a2;
        }
        *(_QWORD *)(a1 + 24) = v15;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 8);
      }
      v18 = 5;
      goto LABEL_38;
    }
    if ((*(_DWORD *)(a1 + 64) & 3) != 1)
    {
      v64 = 0;
      v65 = 0;
      *(_OWORD *)sub_10029430C(&v64, 16) = *(_OWORD *)"Invalid fs.state";
      sub_100294B74(-2, (uint64_t *)&v64, "operator<<", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 7000);
    }
    if ((v5 | 0x20) == 0x7B)
    {
      v20 = *(_BYTE **)(a1 + 48);
      v19 = *(_QWORD *)(a1 + 56);
      if ((unint64_t)v20 < v19)
      {
        *v20 = v5;
        v21 = (uint64_t)(v20 + 1);
LABEL_84:
        v49 = *(const char **)(a1 + 24);
        *(_QWORD *)(a1 + 48) = v21;
        v50 = *v4 == 123;
        if (*v4 == 123)
          v51 = 6;
        else
          v51 = 1;
        *(_DWORD *)(a1 + 64) = v51;
        v52 = v4 + 1;
        v53 = v4[1];
        if (v50)
          v54 = 6;
        else
          v54 = 5;
        if (v53 == 58)
          v55 = v54 | 8;
        else
          v55 = v54;
        v56 = 1;
        if (v53 == 58)
        {
          v56 = 2;
          v52 = v4 + 2;
        }
        if (!v49)
          v49 = "";
        if (*(_QWORD *)(a1 + 32))
          v57 = v49;
        else
          v57 = 0;
        if (v4[v56])
          v58 = (uint64_t)v52;
        else
          v58 = 0;
        sub_100275840(*(_QWORD *)(a1 + 16), v57, v55, v58);
        v64 = 0;
        v65 = 0;
        if (&v64 != (const char **)(a1 + 24))
        {
          sub_10029434C((uint64_t *)(a1 + 24));
          v59 = v64;
          if (v64)
          {
            v60 = (unsigned int *)(v64 - 4);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 + 1, v60));
            v59 = v64;
          }
          v62 = v65;
          *(_QWORD *)(a1 + 24) = v59;
          *(_QWORD *)(a1 + 32) = v62;
        }
        goto LABEL_109;
      }
      v26 = *(_BYTE **)(a1 + 40);
      v27 = v20 - v26;
      v28 = v20 - v26 + 1;
      if (v28 < 0)
        sub_100008F3C();
      v29 = v19 - (_QWORD)v26;
      if (2 * v29 > v28)
        v28 = 2 * v29;
      if (v29 >= 0x3FFFFFFFFFFFFFFFLL)
        v30 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
        v31 = operator new(v30);
      else
        v31 = 0;
      v36 = &v31[v27];
      v37 = &v31[v30];
      v31[v27] = v5;
      v21 = (uint64_t)&v31[v27 + 1];
      if (v20 == v26)
      {
        v31 += v27;
        goto LABEL_82;
      }
      if (v27 >= 8 && (unint64_t)(v26 - v31) >= 0x20)
      {
        if (v27 < 0x20)
        {
          v38 = 0;
          goto LABEL_74;
        }
        v38 = v27 & 0xFFFFFFFFFFFFFFE0;
        v39 = (__int128 *)(v20 - 16);
        v40 = &v31[v20 - 16 - v26];
        v41 = v27 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *v40 = v42;
          v40 -= 2;
          v39 -= 2;
          v41 -= 32;
        }
        while (v41);
        if (v27 == v38)
          goto LABEL_81;
        if ((v27 & 0x18) != 0)
        {
LABEL_74:
          v36 -= v27 & 0xFFFFFFFFFFFFFFF8;
          v43 = &v20[-v38 - 8];
          v44 = &v31[v43 - v26];
          v45 = v38 - (v27 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v46 = *(_QWORD *)v43;
            v43 -= 8;
            *v44-- = v46;
            v45 += 8;
          }
          while (v45);
          v20 -= v27 & 0xFFFFFFFFFFFFFFF8;
          if (v27 == (v27 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_81;
          goto LABEL_79;
        }
        v36 -= v38;
        v20 -= v38;
      }
LABEL_79:
      v47 = v36 - 1;
      do
      {
        v48 = *--v20;
        *v47-- = v48;
      }
      while (v20 != v26);
LABEL_81:
      v20 = *(_BYTE **)(a1 + 40);
LABEL_82:
      *(_QWORD *)(a1 + 40) = v31;
      *(_QWORD *)(a1 + 48) = v21;
      *(_QWORD *)(a1 + 56) = v37;
      if (v20)
        operator delete(v20);
      goto LABEL_84;
    }
    if (v5 != 92
      || ((v23 = v4[1],
           v22 = (char *)(v4 + 1),
           v24 = (1 << (v23 - 91)) & 0x500000005,
           (v23 - 91) <= 0x22)
        ? (v25 = v24 == 0)
        : (v25 = 1),
          v25))
    {
      v32 = *(const char **)a2;
      v33 = *(_QWORD *)(a2 + 8);
      v64 = v32;
      v65 = v33;
      if (v32)
      {
        v34 = (unsigned int *)(v32 - 4);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 + 1, v34));
      }
    }
    else
    {
      sub_1001F37D4(&v64, v22);
    }
    sub_10027EA88(a1, a1 + 24, &v64);
    sub_10029434C((uint64_t *)&v64);
    if (*(_DWORD *)(a1 + 64) == 5)
    {
      v18 = 6;
LABEL_38:
      *(_DWORD *)(a1 + 64) = v18;
    }
  }
  return a1;
}

void sub_10027E9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10027EA88(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(const char **)a2;
  if (!*(_QWORD *)a2)
    v4 = "";
  if (*(_QWORD *)(a2 + 8))
    v5 = (uint64_t)v4;
  else
    v5 = 0;
  if (*a3)
    v6 = *a3;
  else
    v6 = "";
  return sub_1002764D4(v3, v5, (uint64_t)v6, 0);
}

_BYTE *sub_10027EABC(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t a4)
{
  _BYTE *result;
  unsigned __int8 *v6;
  int64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;

  result = 0;
  if (a1 && a2 && a4)
  {
    v6 = (unsigned __int8 *)(a1 + a3);
    v7 = 3 * (a4 / 3);
    if (v7 < 1)
    {
      v13 = v6;
      v9 = a2;
      v15 = a4;
      if (a4 != 2)
      {
LABEL_8:
        if (v15 != 1)
        {
LABEL_13:
          *v9 = 0;
          return (_BYTE *)(v9 - a2);
        }
        v16 = *v13;
        *v9 = aAbcdefghijklmn[v16 >> 2];
        v9[1] = aAbcdefghijklmn[16 * (v16 & 3)];
        v17 = 61;
LABEL_12:
        v9[2] = v17;
        v9[3] = 61;
        v9 += 4;
        goto LABEL_13;
      }
    }
    else
    {
      v8 = (unint64_t)&v6[v7];
      v9 = a2;
      v10 = v6;
      do
      {
        v11 = *v10;
        v12 = v10[1];
        v13 = v10 + 3;
        v14 = v10[2];
        *v9 = aAbcdefghijklmn[v11 >> 2];
        v9[1] = aAbcdefghijklmn[(v12 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v11 & 3))];
        v9[2] = aAbcdefghijklmn[(v14 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v12 & 0xF))];
        v9[3] = aAbcdefghijklmn[v14 & 0x3F];
        v9 += 4;
        v10 = v13;
      }
      while ((unint64_t)v13 < v8);
      v15 = &v6[a4] - v13;
      if (v15 != 2)
        goto LABEL_8;
    }
    v18 = *v13;
    v19 = v13[1];
    *v9 = aAbcdefghijklmn[v18 >> 2];
    v9[1] = aAbcdefghijklmn[(v19 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v18 & 3))];
    v17 = aAbcdefghijklmn[4 * (v19 & 0xF)];
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_10027EC08@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  void (__cdecl **v4)(std::ostringstream *__hidden);
  uint64_t v5;
  std::ios_base *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12[2];
  void (__cdecl **v13)(std::ostringstream *__hidden);
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  void (__cdecl **v18)(std::ostringstream *__hidden);

  v13 = v4;
  *(_QWORD *)((char *)&v14[-1] + (_QWORD)*(v4 - 3)) = v5;
  v6 = (std::ios_base *)((char *)&v14[-1] + (_QWORD)*(v13 - 3));
  std::ios_base::init(v6, v14);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v14);
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v7 = strlen(a1);
  v8 = sub_10022EBE4(&v13, (uint64_t)a1, v7);
  LOBYTE(v12[0]) = 32;
  sub_10022EBE4(v8, (uint64_t)v12, 1);
  std::stringbuf::str(v14);
  v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0x18)
  {
    v12[0] = 0;
    v12[1] = 0;
    qmemcpy((void *)sub_10029430C(v12, 27), "buffer.size() < HEADER_SIZE", 27);
    sub_100294B74(-215, v12, "make_base64_header", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 7785);
  }
  std::string::reserve((std::string *)a2, 0x18uLL);
  while (1)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a2 + 8);
    if (v10 > 0x17)
      break;
    std::string::push_back((std::string *)a2, 32);
  }
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(v14);
  return std::ios::~ios(&v18);
}

void sub_10027EE08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_10029434C((uint64_t *)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  sub_10026F528((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_10027EE90(const char **a1, uint64_t a2)
{
  const char *v3;
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  void *__dst[2];
  unint64_t v13;
  uint64_t v14[2];
  _QWORD v15[10];
  char v16;
  uint64_t v17;

  v3 = *a1;
  v4 = strlen(*a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_10022EEEC();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v13 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v13) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memmove(v6, v3, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  sub_10027F024((uint64_t)v14, (uint64_t)__dst, 8);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  v9 = sub_10027F160(v14, a2);
  v10 = *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32);
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf(v15);
  std::ios::~ios(&v17);
  return (v10 & 5) == 0;
}

void sub_10027EFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10027F390((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10027F008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10027F024(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;

  v6 = a1 + 16;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + *(_QWORD *)(v7 - 24)) = v8;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v9, (void *)(a1 + 16));
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v6);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = a3 | 8;
  std::stringbuf::str(v6, a2);
  return a1;
}

void sub_10027F10C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;

  if (*(char *)(v2 + 103) < 0)
    operator delete(*v4);
  std::streambuf::~streambuf(v3);
  std::istream::~istream(v2, v5 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

void sub_10027F14C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10027F160(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  std::istream::sentry::sentry(&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, &std::ctype<char>::id);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_16:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_16;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_10027F318(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x10027F2E4);
  }
  __cxa_rethrow();
}

void sub_10027F37C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_10027F390(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 120);
  return a1;
}

uint64_t sub_10027F414(uint64_t a1)
{
  const char *v1;
  unsigned __int8 *v3;
  uint64_t v4;
  size_t v5;
  BOOL v6;
  unint64_t v8;
  int v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  _BYTE *v14;
  _BYTE *v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(const char **)(a1 + 40);
  if (!v1)
    return 0;
  v3 = *(unsigned __int8 **)(a1 + 48);
  v4 = v3 - (unsigned __int8 *)v1;
  v5 = v3 - (unsigned __int8 *)v1;
  if (v3 != (unsigned __int8 *)v1)
  {
    if ((v5 & 3) == 0)
      goto LABEL_10;
    return 0;
  }
  v5 = strlen(v1);
  if (v5)
    v6 = (v5 & 3) == 0;
  else
    v6 = 0;
  if (!v6)
    return 0;
LABEL_10:
  v8 = (unint64_t)&v1[v5];
  if (v1[v5 - 1] == 61)
  {
    v9 = *(unsigned __int8 *)(v8 - 2);
    v8 -= 2;
    if (v9 != 61)
      v8 = (unint64_t)&v1[v5 - 1];
  }
  if ((unint64_t)v1 < v8)
  {
    v10 = v8 - (_QWORD)v1;
    v11 = v1;
    do
    {
      v12 = *(unsigned __int8 *)v11;
      if (v12 > 0x7E)
        return 0;
      if ((_DWORD)v12 != 65 && byte_1003BD124[v12] == 0)
        return 0;
      ++v11;
    }
    while (--v10);
  }
  if (v3 != (unsigned __int8 *)v1)
  {
    v14 = *(_BYTE **)(a1 + 64);
    if ((v4 & 3) == 0 && v4 && v14)
    {
      v15 = *(_BYTE **)(a1 + 64);
      if (v4 >= 1)
      {
        v16 = (unsigned __int8 *)&v1[v4];
        v17 = *(_BYTE **)(a1 + 64);
        do
        {
          v18 = byte_1003BD124[*((unsigned __int8 *)v1 + 1)];
          v19 = byte_1003BD124[*((unsigned __int8 *)v1 + 2)];
          v20 = byte_1003BD124[*((unsigned __int8 *)v1 + 3)];
          *v17 = (4 * byte_1003BD124[*(unsigned __int8 *)v1]) | (v18 >> 4) & 3;
          v17[1] = (16 * v18) | (v19 >> 2) & 0xF;
          v15 = v17 + 3;
          v17[2] = v20 | ((_BYTE)v19 << 6);
          v1 += 4;
          v17 += 3;
        }
        while (v1 < (const char *)v16);
      }
      *v15 = 0;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
      v21 = v15 - v14;
      if (v15 != v14)
      {
        if ((unint64_t)(*(_QWORD *)a1 + v21) >= *(_QWORD *)(a1 + 8))
        {
          v22 = 0;
          v23 = 0;
          qmemcpy((void *)sub_10029430C(&v22, 23), "dst_cur + len < dst_end", 23);
          sub_100294B74(-215, &v22, "flush", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 7865);
        }
        memcpy(*(void **)a1, v14, v15 - v14);
        *(_QWORD *)a1 += v21;
        return 1;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 48) = v1;
    }
    v22 = 0;
    v23 = 0;
    *(_QWORD *)sub_10029430C(&v22, 8) = 0x30203D21206E656CLL;
    sub_100294B74(-215, &v22, "flush", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 7862);
  }
  return 1;
}

void sub_10027F680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  sub_10029434C(&a9);
  if ((unint64_t)(*v9 + v10) < v9[1])
    JUMPOUT(0x10027F5A4);
  JUMPOUT(0x10027F5BCLL);
}

void sub_10027F6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10027F6D0(_QWORD *a1)
{
  void *v2;
  void *v3;

  if (a1[6] != a1[5])
    sub_10027F414((uint64_t)a1);
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_10027F728(uint64_t a1, unint64_t __src, unint64_t a3)
{
  char *v5;
  void *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  _DWORD *v10;
  uint64_t v12[2];

  if (__src < a3)
  {
    v5 = (char *)__src;
    do
    {
      v6 = *(void **)(a1 + 48);
      if (*(_QWORD *)(a1 + 56) - (_QWORD)v6 >= (int64_t)(a3 - (_QWORD)v5))
        v7 = a3 - (_QWORD)v5;
      else
        v7 = *(_QWORD *)(a1 + 56) - (_QWORD)v6;
      memcpy(v6, v5, v7);
      v8 = *(_QWORD *)(a1 + 56);
      v9 = *(_QWORD *)(a1 + 48) + v7;
      *(_QWORD *)(a1 + 48) = v9;
      if (v9 >= v8 && (sub_10027F414(a1) & 1) == 0)
      {
        v12[0] = 0;
        v12[1] = 0;
        v10 = (_DWORD *)sub_10029430C(v12, 7);
        *v10 = 1937075302;
        *(_DWORD *)((char *)v10 + 3) = 690514035;
        sub_100294B74(-215, v12, "read", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 7842);
      }
      v5 += v7;
    }
    while ((unint64_t)v5 < a3);
  }
  return a1;
}

void sub_10027F828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10027F840()
{
  operator new();
}

void sub_10027F978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;

  sub_10029434C(&a9);
  if (*(char *)(v9 + 31) < 0)
    operator delete(*v10);
  _Unwind_Resume(a1);
}

void sub_10027F9C4()
{
  operator delete();
}

void sub_10027F9E8(uint64_t *a1, char *__s)
{
  const void **v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  char *p_p;
  char *v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  size_t v16;
  size_t v17;
  void *__p;
  uint64_t v19;
  unsigned __int8 v20;

  if (!__s)
  {
    __p = 0;
    v19 = 0;
    qmemcpy((void *)sub_10029430C(&__p, 13), "Invalid 'dt'.", 13);
    sub_100294B74(-5, (uint64_t *)&__p, "check_dt", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8359);
  }
  v4 = (const void **)(a1 + 1);
  if ((*((char *)a1 + 31) & 0x80000000) == 0)
  {
    v5 = *((unsigned __int8 *)a1 + 31);
    if (*((_BYTE *)a1 + 31))
    {
      v6 = strlen(__s);
      if (v6 != v5)
        goto LABEL_13;
      if (v6 != -1)
      {
        if (!memcmp(v4, __s, v6))
          return;
LABEL_13:
        __p = 0;
        v19 = 0;
        v8 = sub_10029430C(&__p, 20);
        *(_DWORD *)(v8 + 16) = 778593140;
        *(_OWORD *)v8 = *(_OWORD *)"'dt' does not match.";
        sub_100294B74(-5, (uint64_t *)&__p, "check_dt", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8370);
      }
LABEL_31:
      sub_10026F3A0();
    }
    goto LABEL_14;
  }
  v7 = a1[2];
  if (!v7)
  {
LABEL_14:
    std::string::assign((std::string *)(a1 + 1), __s);
    sub_10027EC08(__s, (uint64_t)&__p);
    v9 = v20;
    v10 = v20;
    if ((v20 & 0x80u) == 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if ((v20 & 0x80u) != 0)
      v9 = v19;
    if (v9 >= 1)
    {
      v12 = &p_p[v9];
      v13 = *a1;
      do
      {
        v14 = *(void **)(v13 + 64);
        if (*(_QWORD *)(v13 + 72) - (_QWORD)v14 >= v12 - p_p)
          v15 = v12 - p_p;
        else
          v15 = *(_QWORD *)(v13 + 72) - (_QWORD)v14;
        memcpy(v14, p_p, v15);
        v16 = *(_QWORD *)(v13 + 72);
        v17 = *(_QWORD *)(v13 + 64) + v15;
        *(_QWORD *)(v13 + 64) = v17;
        if (v17 >= v16)
          sub_100288730((_QWORD **)v13);
        p_p += v15;
      }
      while (p_p < v12);
      v10 = v20;
    }
    if ((v10 & 0x80) != 0)
      operator delete(__p);
    return;
  }
  if (strlen(__s) != v7)
    goto LABEL_13;
  if (v7 == -1)
    goto LABEL_31;
  if (memcmp(*v4, __s, v7))
    goto LABEL_13;
}

void sub_10027FC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_10029434C((uint64_t *)&__p);
  _Unwind_Resume(a1);
}

char ***sub_10027FC68(char ***a1, _QWORD *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char **v12;
  size_t v13;
  char **v14;
  char **v15;
  char *v16;
  char **v17;
  unint64_t v18;
  BOOL v19;
  int64_t v21;
  unint64_t v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char **v34;
  size_t v35;
  char **v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char __s[2];
  char __b[80];

  v4 = (char *)operator new(0x400uLL);
  bzero(v4, 0x400uLL);
  v5 = a2[1];
  if (v5 < a2[2])
  {
    while (1)
    {
      v6 = a2[5] - a2[4];
      if (v6)
      {
        v7 = 0;
        if ((unint64_t)(v6 >> 4) <= 1)
          v8 = 1;
        else
          v8 = v6 >> 4;
        do
        {
          (*(void (**)(_QWORD, char *))(a2[4] + v7 + 8))(a2[1] + *(_QWORD *)(a2[4] + v7), &v4[*(_QWORD *)(a2[4] + v7)]);
          v7 += 16;
          --v8;
        }
        while (v8);
        v5 = a2[1];
      }
      v9 = a2[3];
      v5 += v9;
      a2[1] = v5;
      if (v9 >= 1)
        break;
LABEL_4:
      if (v5 >= a2[2])
        goto LABEL_43;
    }
    v10 = &v4[v9];
    v11 = v4;
    while (1)
    {
      v12 = a1[8];
      v13 = (char *)a1[9] - (char *)v12 >= v10 - v11 ? v10 - v11 : (char *)a1[9] - (char *)v12;
      memcpy(v12, v11, v13);
      v14 = a1[9];
      v15 = (char **)((char *)a1[8] + v13);
      a1[8] = v15;
      if (v15 >= v14)
      {
        v16 = (char *)a1[7];
        v17 = a1[4];
        v18 = (char *)v15 - v16;
        v19 = !v18 || v16 == 0;
        if (!v19 && v17 != 0)
          break;
      }
LABEL_14:
      v11 += v13;
      if (v11 >= v10)
      {
        v5 = a2[1];
        goto LABEL_4;
      }
    }
    v21 = 3 * (v18 / 3);
    if (v21 < 1)
    {
      v29 = (char *)a1[7];
      v24 = a1[4];
      v30 = v18;
      if (v18 != 2)
      {
LABEL_30:
        if (v30 != 1)
          goto LABEL_35;
        v31 = *v29;
        *v24 = aAbcdefghijklmn[v31 >> 2];
        v24[1] = aAbcdefghijklmn[16 * (v31 & 3)];
        v24[2] = 61;
LABEL_34:
        v24[3] = 61;
        v24 += 4;
LABEL_35:
        *v24 = 0;
        if (v24 != (_BYTE *)v17)
        {
          a1[8] = a1[7];
          v34 = *a1;
          if (*((_DWORD *)*a1 + 1) == 24)
          {
            sub_100272B2C(*a1, (char *)a1[4]);
          }
          else
          {
            strcpy(__s, "\n");
            v35 = *((int *)v34 + 16);
            memset(__b, 32, v35);
            __b[v35] = 0;
            sub_100272B2C(v34, __b);
            sub_100272B2C(*a1, (char *)a1[4]);
            sub_100272B2C(*a1, __s);
            v36 = *a1;
            v38 = (*a1)[15];
            v37 = (*a1)[16];
            v39 = *((int *)*a1 + 22);
            if (v38 > &v37[v39])
            {
              *(_WORD *)v38 = 10;
              sub_100272B2C(v36, v36[16]);
              v37 = v36[16];
              LODWORD(v39) = *((_DWORD *)v36 + 22);
            }
            v40 = *((_DWORD *)v36 + 16);
            if ((_DWORD)v39 == v40)
            {
              v41 = (int)v39;
            }
            else
            {
              v41 = v40;
              memset(v37, 32, v40);
              *((_DWORD *)v36 + 22) = v40;
              v37 = v36[16];
            }
            v36[15] = &v37[v41];
          }
        }
        goto LABEL_14;
      }
    }
    else
    {
      v22 = (unint64_t)&v16[v21];
      v23 = (char *)a1[7];
      v24 = a1[4];
      v25 = v23;
      do
      {
        v26 = *v25;
        v27 = v25[1];
        v28 = v25[2];
        *v24 = aAbcdefghijklmn[v26 >> 2];
        v24[1] = aAbcdefghijklmn[(v27 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v26 & 3))];
        v24[2] = aAbcdefghijklmn[(v28 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v27 & 0xF))];
        v29 = v25 + 3;
        v24[3] = aAbcdefghijklmn[v28 & 0x3F];
        v24 += 4;
        v23 += 3;
        v25 = v29;
      }
      while ((unint64_t)v29 < v22);
      v30 = &v16[v18] - v23;
      if (v30 != 2)
        goto LABEL_30;
    }
    v32 = *v29;
    v33 = v29[1];
    *v24 = aAbcdefghijklmn[v32 >> 2];
    v24[1] = aAbcdefghijklmn[(v33 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v32 & 3))];
    v24[2] = aAbcdefghijklmn[4 * (v33 & 0xF)];
    goto LABEL_34;
  }
LABEL_43:
  operator delete(v4);
  return a1;
}

void sub_10027FFF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100280004(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100280018(uint64_t a1, int a2, char *a3, uint64_t a4)
{
  unint64_t v5;
  double v6;
  _QWORD v7[4];
  void *__p;
  char *v9;
  char *v10;
  int __src;
  uint64_t v12;
  double v13;
  double v14;

  v12 = 0;
  sub_10028888C((uint64_t)v7, a1, a2, a3);
  while (v7[0] < v7[2])
  {
    v14 = 0.0;
    (*((void (**)(_QWORD, double *))v10 + 2))(v7[0] + *((_QWORD *)v10 + 1), &v14);
    v5 = *(_QWORD *)v10;
    switch(*(_QWORD *)v10)
    {
      case 0:
        LODWORD(v13) = LOBYTE(v14);
        goto LABEL_15;
      case 1:
        LODWORD(v13) = SLOBYTE(v14);
        goto LABEL_15;
      case 2:
        LODWORD(v13) = LOWORD(v14);
        goto LABEL_15;
      case 3:
        LODWORD(v13) = SLOWORD(v14);
        goto LABEL_15;
      case 4:
        LODWORD(v13) = LODWORD(v14);
        goto LABEL_15;
      case 5:
        v6 = *(float *)&v14;
        goto LABEL_14;
      case 6:
        v6 = v14;
LABEL_14:
        v13 = v6;
LABEL_15:
        v5 = *(_QWORD *)v10;
        break;
      default:
        break;
    }
    if (v5 <= 6)
      __src = dword_1003BD204[v5];
    v10 += 24;
    if (v10 == v9)
    {
      v10 = (char *)__p;
      v7[0] += v7[3];
    }
    sub_10021FC6C(a4, &__src);
  }
  if (__p)
  {
    v9 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100280168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_100280184(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100008F3C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_100008FF8();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v13 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *((_QWORD *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  v14 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 -= 24;
    }
    while (v12 != v14);
    v12 = v14;
  }
  if (v12)
LABEL_20:
    operator delete(v12);
  return v10;
}

void sub_1002802EC(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x1000;
  v4 = v2 - 4096;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_100008FF8();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_1002808A8((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_100280A34((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_100008FF8();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_100008FF8();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_100280848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_100280864(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100280878(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100280890(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002808A8(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    sub_100008FF8();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_100280A34(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        sub_100008FF8();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

uint64_t sub_100280BCC(uint64_t a1, const char *a2, int a3, void **a4, uint64_t a5)
{
  char *v9;
  int v10;
  const char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  char *v19;
  int v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  char *v28;
  const void *v29;
  uint64_t v30;
  char *v31;
  char v32;
  char v33;
  char *v34;
  void **v35;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  int v46;
  int v47;
  char *v48;
  char *v49;
  const void *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v9 = *(char **)(a1 + 120);
  v10 = *(_DWORD *)(a1 + 68);
  if (a2)
  {
    if (*a2)
      v11 = a2;
    else
      v11 = 0;
    if (a3 != 1)
      goto LABEL_22;
  }
  else
  {
    v11 = 0;
    if (a3 != 1)
      goto LABEL_22;
  }
  if ((*(_DWORD *)(a1 + 68) & 7u) < 5)
  {
    if (v11)
      v10 = 38;
    else
      v10 = 37;
    *(_DWORD *)(a1 + 12) = 0;
  }
  else if (((*(_DWORD *)(a1 + 68) & 7) == 6) != (v11 != 0))
  {
    v53 = 0;
    v54 = 0;
    qmemcpy((void *)sub_10029430C(&v53, 85), "An attempt to add element without a key to a map, or add element with key to sequence", 85);
    sub_100294B74(-5, &v53, "icvXMLWriteTag", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2892);
  }
  if ((v10 & 0x20) == 0)
  {
    v13 = *(char **)(a1 + 120);
    v12 = *(char **)(a1 + 128);
    v14 = *(int *)(a1 + 88);
    if (v13 > &v12[v14])
    {
      *(_WORD *)v13 = 10;
      sub_100272B2C((_QWORD *)a1, *(char **)(a1 + 128));
      v12 = *(char **)(a1 + 128);
      LODWORD(v14) = *(_DWORD *)(a1 + 88);
    }
    v15 = *(_DWORD *)(a1 + 64);
    if ((_DWORD)v14 == v15)
    {
      v16 = (int)v14;
    }
    else
    {
      v16 = v15;
      memset(v12, 32, v15);
      *(_DWORD *)(a1 + 88) = v15;
      v12 = *(char **)(a1 + 128);
    }
    v9 = &v12[v16];
    *(_QWORD *)(a1 + 120) = &v12[v16];
  }
LABEL_22:
  v51 = v10;
  if (v11)
  {
    if (*v11 == 95 && !v11[1])
    {
      v53 = 0;
      v54 = 0;
      qmemcpy((void *)sub_10029430C(&v53, 33), "A single _ is a reserved tag name", 33);
      sub_100294B74(-5, &v53, "icvXMLWriteTag", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2907);
    }
  }
  else
  {
    v11 = "_";
  }
  result = strlen(v11);
  v18 = result;
  *v9 = 60;
  v19 = v9 + 1;
  if (a3 == 2)
  {
    if (a4)
    {
      v53 = 0;
      v54 = 0;
      qmemcpy((void *)sub_10029430C(&v53, 45), "Closing tag should not include any attributes", 45);
      sub_100294B74(-5, &v53, "icvXMLWriteTag", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2914);
    }
    v19 = v9 + 2;
    v9[1] = 47;
  }
  v20 = *(unsigned __int8 *)v11;
  if (v20 != 95 && (v20 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    v53 = 0;
    v54 = 0;
    qmemcpy((void *)sub_10029430C(&v53, 35), "Key should start with a letter or _", 35);
    sub_100294B74(-5, &v53, "icvXMLWriteTag", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2919);
  }
  v22 = (int)result;
  v23 = *(_QWORD *)(a1 + 136);
  v52 = a5;
  if ((unint64_t)&v19[(int)result] >= v23)
  {
    v24 = *(_QWORD *)(a1 + 128);
    v25 = (_DWORD)v19 - v24;
    v26 = (3 * (v23 - v24) + (((3 * (v23 - v24)) & 0x8000000000000000) != 0)) >> 1;
    if ((int)v19 - (int)v24 + (int)result <= (int)v26)
      v27 = v26;
    else
      v27 = v25 + result;
    result = sub_1001D450C(v27 + 256);
    v28 = (char *)result;
    v29 = *(const void **)(a1 + 128);
    *(_QWORD *)(a1 + 120) = result + *(_QWORD *)(a1 + 120) - (_QWORD)v29;
    if (v25 >= 1)
      result = (uint64_t)memcpy((void *)result, v29, v25);
    *(_QWORD *)(a1 + 128) = v28;
    *(_QWORD *)(a1 + 136) = &v28[v27];
    v19 = &v28[v25];
  }
  if (v18 >= 1)
  {
    v30 = v18;
    v31 = v19;
    do
    {
      v33 = *v11++;
      v32 = v33;
      if ((v33 - 58) <= 0xF5u
        && ((v32 & 0xDF) - 91) <= 0xE5u
        && v32 != 45
        && v32 != 95)
      {
        v53 = 0;
        v54 = 0;
        qmemcpy((void *)sub_10029430C(&v53, 74), "Key name may only contain alphanumeric characters [a-zA-Z0-9], '-' and '_'", 74);
        sub_100294B74(-5, &v53, "icvXMLWriteTag", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2926);
      }
      *v31++ = v32;
      --v30;
    }
    while (v30);
  }
  v34 = &v19[v22];
  if (a4)
  {
LABEL_53:
    result = (uint64_t)*a4;
    if (*a4)
    {
      v35 = a4 + 1;
      do
      {
        v39 = strlen((const char *)result);
        v40 = strlen((const char *)*v35);
        v41 = v39 + v40 + 4;
        v42 = *(_QWORD *)(a1 + 136);
        if ((unint64_t)&v34[v41] >= v42)
        {
          v43 = *(_QWORD *)(a1 + 128);
          v44 = (_DWORD)v34 - v43;
          v45 = (3 * (v42 - v43) + (((3 * (v42 - v43)) & 0x8000000000000000) != 0)) >> 1;
          v46 = v41 + (_DWORD)v34 - v43;
          if (v46 <= (int)v45)
            v47 = v45;
          else
            v47 = v46;
          v48 = (char *)sub_1001D450C(v47 + 256);
          v49 = v48;
          v50 = *(const void **)(a1 + 128);
          *(_QWORD *)(a1 + 120) = &v48[*(_QWORD *)(a1 + 120) - (_QWORD)v50];
          if (v44 >= 1)
            memcpy(v48, v50, v44);
          *(_QWORD *)(a1 + 128) = v49;
          *(_QWORD *)(a1 + 136) = &v49[v47];
          v34 = &v49[v44];
        }
        *v34 = 32;
        v36 = v34 + 1;
        memcpy(v36, *(v35 - 1), v39);
        v37 = &v36[v39];
        *(_WORD *)v37 = 8765;
        v37 += 2;
        memcpy(v37, *v35, v40);
        v38 = &v37[v40];
        *v38 = 34;
        v34 = v38 + 1;
        result = (uint64_t)v35[1];
        v35 += 2;
      }
      while (result);
    }
  }
  while (v52)
  {
    a4 = *(void ***)v52;
    v52 = *(_QWORD *)(v52 + 8);
    if (a4)
      goto LABEL_53;
  }
  *v34 = 62;
  *(_QWORD *)(a1 + 120) = v34 + 1;
  *(_DWORD *)(a1 + 68) = v51 & 0xFFFFFFDF;
  return result;
}

void sub_100281130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1002811A8(uint64_t a1, char *a2, int a3)
{
  int v6;
  unsigned int v7;
  _BOOL4 v8;
  int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v14;
  BOOL v15;
  unsigned __int8 *v16;
  BOOL v17;
  int v18;
  char *v20;
  int v21;
  FILE *v23;
  gzFile_s *v24;
  char v26[1024];

  v6 = 0;
  while (1)
  {
    while (1)
    {
      if (a3 == 1)
      {
        v12 = *a2;
        if (v12 > 0x1F || v12 == 9)
        {
          while (1)
          {
            v16 = (unsigned __int8 *)a2;
            if (v12 == 45 && a2[1] == 45 && a2[2] == 62)
              break;
            ++a2;
            v12 = v16[1];
            v15 = v12 > 0x1F || v12 == 9;
            v14 = v16;
            if (!v15)
              goto LABEL_30;
          }
          v14 = (unsigned __int8 *)(a2 - 1);
          v12 = 45;
        }
        else
        {
          v14 = (unsigned __int8 *)(a2 - 1);
        }
LABEL_30:
        a3 = v12 != 45;
        if (v12 == 45)
          a2 = (char *)(v14 + 4);
        goto LABEL_32;
      }
      if (a3 != 3)
        break;
      do
      {
        v7 = *a2;
        v8 = v7 == 62;
        if (v7 == 60)
          v9 = v6 + 1;
        else
          v9 = v6;
        v6 = v9 - v8;
        if (v9 - v8 < 0)
          return a2;
        ++a2;
      }
      while (v7 > 0x1F || v7 == 9);
      --a2;
      a3 = 3;
LABEL_32:
      v11 = *a2;
      if (v11 <= 0x1F)
        goto LABEL_44;
    }
    while (1)
    {
      v11 = *a2;
      if (v11 != 9 && v11 != 32)
        break;
      ++a2;
    }
    if (v11 == 60)
    {
      if (a2[1] != 33 || a2[2] != 45 || a2[3] != 45)
        return a2;
      if (a3)
      {
        sprintf(v26, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Comments are not allowed here");
        sub_100295298(-212, "icvXMLSkipSpaces", v26, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2278);
      }
      a2 += 4;
      a3 = 1;
      goto LABEL_32;
    }
    if (v11 > 0x1F)
      return a2;
LABEL_44:
    v17 = v11 > 0xD;
    v18 = (1 << v11) & 0x2401;
    if (v17 || v18 == 0)
    {
      sprintf(v26, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid character in the stream");
      sub_100295298(-212, "icvXMLSkipSpaces", v26, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2290);
    }
    v20 = sub_100272C98((_QWORD *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)));
    if (!v20)
      break;
    a2 = v20;
    v21 = v20[(int)(strlen(v20) - 1)];
    if (v21 != 10 && v21 != 13)
    {
      if (*(_QWORD *)(a1 + 352))
      {
        if (*(_QWORD *)(a1 + 368) < *(_QWORD *)(a1 + 360))
          goto LABEL_2;
      }
      else
      {
        v23 = *(FILE **)(a1 + 104);
        if (v23)
        {
          if (!feof(v23))
            goto LABEL_2;
        }
        else
        {
          v24 = *(gzFile_s **)(a1 + 112);
          if (!v24 || !gzeof(v24))
          {
LABEL_2:
            sprintf(v26, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Too long string or a last string w/o newline");
            sub_100295298(-212, "icvXMLSkipSpaces", v26, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2303);
          }
        }
      }
    }
    ++*(_DWORD *)(a1 + 148);
  }
  a2 = *(char **)(a1 + 128);
  *a2 = 0;
  *(_DWORD *)(a1 + 152) = 1;
  return a2;
}

char *sub_1002814E8(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4, int *a5)
{
  int v6;
  char *v7;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  int v15;
  uint64_t i;
  char v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  int v27;
  int v28;
  unsigned int v29;
  char *v30;
  int v31;
  char v32;
  char v33;
  char *result;
  int v35;
  int v36;
  uint64_t v40;
  char v41;
  int v42;
  char v43[8];
  uint64_t v44;
  uint64_t v45;

  if (!*__s)
  {
    sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Preliminary end of the stream");
    sub_100295298(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2681);
  }
  if (*__s != 60)
  {
    sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Tag should start with '<'");
    sub_100295298(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2684);
  }
  v7 = __s + 1;
  v6 = __s[1];
  if ((v6 - 48) >= 0xA && (v6 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    if (__s[1] > 0x3Eu)
    {
      if (v6 == 63)
      {
        v42 = 0;
        v10 = 0;
        v7 = __s + 2;
        v36 = 4;
        v9 = 1;
        goto LABEL_12;
      }
      if (v6 == 95)
        goto LABEL_10;
    }
    else
    {
      if (v6 == 33)
      {
        v42 = 0;
        v9 = 0;
        v10 = 0;
        v7 = __s + 2;
        v11 = 5;
        goto LABEL_11;
      }
      if (v6 == 47)
      {
        v9 = 0;
        v10 = 0;
        v7 = __s + 2;
        v36 = 2;
        v42 = 1;
        goto LABEL_12;
      }
    }
    sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unknown tag type");
    sub_100295298(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2706);
  }
LABEL_10:
  v42 = 0;
  v9 = 0;
  v10 = 1;
  v11 = 1;
LABEL_11:
  v36 = v11;
LABEL_12:
  v12 = 0;
  v40 = 0;
  v13 = 0;
  v14 = 0;
  v41 = v10 ^ 1;
  while (1)
  {
    v15 = *v7;
    if (v15 != 95 && (v15 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Name should start with a letter or underscore");
      sub_100295298(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2713);
    }
    for (i = 0; ; ++i)
    {
      v18 = v7[i];
      if ((v18 - 48) >= 0xAu && ((v18 & 0xDF) - 65) >= 0x1Au)
      {
        v20 = v7[i];
        if (v20 != 95 && v20 != 45)
          break;
      }
    }
    v21 = sub_100270168(a1, v7, i, 1);
    v22 = v21;
    if (!v21)
    {
      *(_QWORD *)v43 = 0;
      v44 = 0;
      *(_QWORD *)sub_10029430C(v43, 8) = 0x656D616E72747461;
      sub_100294B74(-215, (uint64_t *)v43, "icvXMLParseTag", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2720);
    }
    v7 += i;
    if (v12)
    {
      if (v42)
      {
        sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Closing tag should not contain any attributes");
        sub_100295298(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2728);
      }
      if (v13 && v14 <= 3)
      {
        v23 = *v13;
      }
      else
      {
        v24 = sub_10021E610(*(_QWORD *)(a1 + 16), 0x58uLL);
        *(_OWORD *)(v24 + 72) = 0u;
        *(_OWORD *)(v24 + 56) = 0u;
        *(_OWORD *)(v24 + 40) = 0u;
        *(_OWORD *)(v24 + 24) = 0u;
        *(_OWORD *)(v24 + 8) = 0u;
        v23 = v24 + 16;
        *(_QWORD *)v24 = v24 + 16;
        v14 = 0;
        if (v13)
          v13[1] = v24;
        else
          v40 = v24;
        v13 = (uint64_t *)v24;
      }
      *(_QWORD *)(v23 + 16 * v14) = *(_QWORD *)(v22 + 16);
      if (*v7 == 61)
        goto LABEL_46;
LABEL_44:
      v7 = sub_1002811A8(a1, v7, 2);
      if (*v7 != 61)
      {
        sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Attribute name should be followed by '='");
        sub_100295298(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2754);
      }
      goto LABEL_46;
    }
    v12 = v21;
    if (!v13)
      goto LABEL_52;
    if (*v7 != 61)
      goto LABEL_44;
LABEL_46:
    v27 = v7[1];
    v26 = v7 + 1;
    v25 = v27;
    if (v27 != 34 && v25 != 39)
    {
      v26 = sub_1002811A8(a1, v26, 2);
      v28 = *v26;
      if (v28 != 34 && v28 != 39)
      {
        sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Attribute value should be put into single or double quotes");
        sub_100295298(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2762);
      }
    }
    v7 = sub_100281BFC(a1, v26, v43, 3);
    *(_QWORD *)(*v13 + 8 * ((2 * v14++) | 1)) = v45;
LABEL_52:
    v29 = *v7;
    if (v29 == 62)
      break;
    v30 = sub_1002811A8(a1, v7, 2);
    v7 = v30;
    v31 = *v30;
    if (v31 == 62)
      break;
    v32 = v9 ^ 1;
    if (v31 != 63)
      v32 = 1;
    if ((v32 & 1) == 0)
    {
      if (v30[1] != 62)
      {
        sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid closing tag for <?xml ...");
        sub_100295298(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2790);
      }
      result = v30 + 2;
      v35 = 4;
      goto LABEL_78;
    }
    if (v31 == 47)
    {
      v33 = v41;
      if (v30[1] != 62)
        v33 = 1;
      if ((v33 & 1) == 0)
      {
        result = v30 + 2;
        v35 = 3;
        goto LABEL_78;
      }
    }
    if (v29 > 0x20 || ((1 << v29) & 0x100003E01) == 0)
    {
      sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "There should be space between attributes");
      sub_100295298(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2802);
    }
  }
  if (v9)
  {
    sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid closing tag for <?xml ...");
    sub_100295298(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2783);
  }
  result = v7 + 1;
  v35 = v36;
LABEL_78:
  *a3 = v12;
  *a5 = v35;
  *a4 = v40;
  return result;
}

void sub_100281BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_100281BFC(uint64_t a1, char *a2, _QWORD *a3, char a4)
{
  char *v5;
  char v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v12;
  char *v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  char *v18;
  unsigned int v19;
  int v21;
  unsigned __int8 *v22;
  const char *v23;
  int v24;
  BOOL v25;
  int v26;
  const char *v27;
  int v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  int v33;
  int v35;
  _DWORD *v36;
  _BOOL4 v37;
  unsigned int v38;
  int v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v45;
  int v46;
  int v47;
  double v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v57;
  char *__endptr;
  char __s[8];
  uint64_t v60;
  _QWORD v61[128];

  v5 = a2;
  v57 = a4 & 7;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  v7 = 1;
  v8 = *a2;
  __endptr = 0;
  if (v8 > 0x3C)
    goto LABEL_4;
  while (2)
  {
    if (((1 << v8) & 0x100003E01) != 0)
    {
LABEL_3:
      v5 = sub_1002811A8(a1, v5, 0);
      LODWORD(v8) = *v5;
      v7 = 1;
      goto LABEL_4;
    }
    if (v8 == 60)
    {
      v9 = v5[1];
      if (v9 == 33)
      {
        if (v5[2] == 45)
          goto LABEL_3;
        v10 = 0;
        v9 = 33;
      }
      else
      {
        v10 = 0;
      }
LABEL_9:
      v61[0] = 0;
      if (v10 || v9 == 47)
        goto LABEL_134;
      v12 = sub_1002814E8(a1, v5);
      v36 = (_DWORD *)v61[0];
      if (*(_DWORD *)(v61[0] + 8) == 1)
      {
        v37 = **(unsigned __int8 **)(v61[0] + 16) == 95;
        v38 = *(_DWORD *)a3 & 7;
        if (v38 <= 4)
        {
LABEL_78:
          if (v37)
            v39 = 5;
          else
            v39 = 6;
          sub_100282918(a1, v39, a3);
          goto LABEL_87;
        }
      }
      else
      {
        v37 = 0;
        v38 = *(_DWORD *)a3 & 7;
        if (v38 <= 4)
          goto LABEL_78;
      }
      if (v37 != (v38 == 5))
      {
        v40 = "Sequence element should not have name (use <_></_>)";
        if (v37)
          v40 = "Map element should have a name";
        sprintf(__s, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), v40);
        sub_100295298(-212, "icvXMLParseValue", __s, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2488);
      }
LABEL_87:
      if (v37)
        v41 = (uint64_t)sub_10021FC6C(a3[2], 0);
      else
        v41 = sub_100270304(a1, (uint64_t)a3, v36, 1);
      v42 = v41;
      if (!v41)
      {
        *(_QWORD *)__s = 0;
        v60 = 0;
        *(_DWORD *)sub_10029430C(__s, 4) = 1835363429;
        sub_100294B74(-215, (uint64_t *)__s, "icvXMLParseValue", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2494);
      }
      v43 = (char *)sub_100281BFC(a1, v12, v41, 0);
      if (!v37)
        *(_DWORD *)v42 |= 0x40u;
      *(_QWORD *)(v42 + 8) = 0;
      sub_1002814E8(a1, v43);
      sprintf(__s, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Mismatched closing tag");
      sub_100295298(-212, "icvXMLParseValue", __s, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2509);
    }
LABEL_4:
    v9 = v5[1];
    v10 = (_DWORD)v8 == 0;
    if ((_DWORD)v8 == 60 || (_DWORD)v8 == 0)
      goto LABEL_9;
    if ((v7 & 1) == 0)
    {
      sprintf(__s, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "There should be space between literals");
      sub_100295298(-212, "icvXMLParseValue", __s, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2515);
    }
    v13 = (char *)a3;
    if (*(_DWORD *)a3)
    {
      if ((*(_DWORD *)a3 & 7u) <= 4)
      {
        v14 = sub_10021E968(0, 0x60uLL, 0x20uLL, *(_QWORD *)(a1 + 16));
        v15 = (uint64_t)v14;
        if ((*(_BYTE *)a3 & 7) != 0)
          sub_10021FC6C((uint64_t)v14, a3);
        a3[2] = v15;
        *(_DWORD *)a3 = 5;
        sub_10021EB30(v15, 8);
      }
      v13 = sub_10021FC6C(a3[2], 0);
      *((_QWORD *)v13 + 1) = 0;
    }
    if (v57 == 3)
      goto LABEL_21;
    if ((v8 - 48) < 0xA)
      goto LABEL_100;
    switch((_DWORD)v8)
    {
      case '+':
        goto LABEL_115;
      case '.':
        if ((v9 - 48) < 0xA || (v9 - 97) < 0x1A || (v9 - 65) <= 0x19)
        {
LABEL_100:
          if ((_DWORD)v8 == 45 || (_DWORD)v8 == 43)
            v45 = v5 + 1;
          else
            v45 = v5;
          do
          {
            __endptr = v45;
            v47 = *v45++;
            v46 = v47;
          }
          while ((v47 - 48) < 0xA);
          if (v46 == 101 || v46 == 46)
          {
            v48 = sub_100283364(a1, v5, &__endptr);
            *(_DWORD *)v13 = 2;
            *((double *)v13 + 2) = v48;
            v18 = __endptr;
            if (__endptr != v5)
              goto LABEL_123;
          }
          else
          {
            v50 = strtol(v5, &__endptr, 0);
            *(_DWORD *)v13 = 1;
            *((_DWORD *)v13 + 4) = v50;
            v18 = __endptr;
            if (__endptr != v5)
              goto LABEL_123;
          }
          sprintf(__s, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid numeric value (inconsistent explicit type specification?)");
          sub_100295298(-212, "icvXMLParseValue", __s, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2552);
        }
        break;
      case '-':
LABEL_115:
        if (v9 == 46 || (v9 - 48) < 0xA)
          goto LABEL_100;
        break;
    }
LABEL_21:
    bzero(__s, 0x1010uLL);
    v16 = 0;
    *(_DWORD *)v13 = 3;
    v17 = (unsigned __int8 *)&v5[-((_DWORD)v8 != 34)];
    while (1)
    {
      v18 = (char *)(v17 + 1);
      v19 = v17[1];
      if (v19 - 48 < 0xA || (v19 & 0xFFFFFFDF) - 65 < 0x1A)
        goto LABEL_36;
      if (v19 == 34)
        break;
      if (v19 < 0x20 || v19 == 60)
      {
        if ((_DWORD)v8 == 34)
        {
          sprintf((char *)v61, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Closing \" is expected");
          sub_100295298(-212, "icvXMLParseValue", (char *)v61, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2582);
        }
        goto LABEL_122;
      }
      if ((_DWORD)v8 != 34 && v19 == 32)
        goto LABEL_122;
      if (v19 != 38)
      {
        if (v19 == 62 || v19 == 39)
        {
          sprintf((char *)v61, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Literal ' or > are not allowed. Use &apos; or &gt;");
          sub_100295298(-212, "icvXMLParseValue", (char *)v61, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2587);
        }
LABEL_36:
        ++v17;
        goto LABEL_37;
      }
      v22 = v17 + 2;
      if (v17[2] == 35)
      {
        v24 = v17[3];
        v23 = (const char *)(v17 + 3);
        v25 = v24 == 120;
        if (v24 == 120)
          v26 = 16;
        else
          v26 = 10;
        if (v25)
          v27 = v23 + 1;
        else
          v27 = v23;
        v28 = strtol(v27, &__endptr, v26);
        if ((v28 & 0xFFFFFF00) != 0 || (v17 = (unsigned __int8 *)__endptr) == 0 || *__endptr != 59)
        {
          sprintf((char *)v61, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid numeric value in the string");
          sub_100295298(-212, "icvXMLParseValue", (char *)v61, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2603);
        }
        LOBYTE(v19) = v28;
      }
      else
      {
        v29 = (char *)(v17 + 3);
        do
        {
          __endptr = v29;
          v30 = *v29++;
          v19 = v30;
          v31 = (v30 & 0xFFFFFFDF) - 65;
        }
        while (v30 - 48 < 0xA || v31 < 0x1A);
        if (v19 != 59)
        {
          sprintf((char *)v61, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid character in the symbol entity name");
          sub_100295298(-212, "icvXMLParseValue", (char *)v61, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2612);
        }
        v17 = (unsigned __int8 *)(v29 - 1);
        v33 = (_DWORD)v29 - 1 - (_DWORD)v22;
        switch(v33)
        {
          case 4:
            if (*(_DWORD *)v22 == 1936683105)
            {
              LOBYTE(v19) = 39;
              break;
            }
            if (*(_DWORD *)v22 != 1953461617)
              goto LABEL_72;
            LOBYTE(v19) = 34;
            break;
          case 3:
            if (*(_WORD *)v22 == 28001 && v22[2] == 112)
            {
              LOBYTE(v19) = 38;
              break;
            }
LABEL_72:
            v35 = v33 + 2;
            memcpy(&__s[v16], v18, v33 + 2);
            v16 += v35;
            break;
          case 2:
            if (*(_WORD *)v22 == 29804)
            {
              LOBYTE(v19) = 60;
              break;
            }
            if (*(_WORD *)v22 != 29799)
              goto LABEL_72;
            LOBYTE(v19) = 62;
            break;
          default:
            goto LABEL_72;
        }
      }
LABEL_37:
      v21 = v16;
      __s[v16++] = v19;
      if (v21 >= 4095)
      {
        sprintf((char *)v61, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Too long string literal");
        sub_100295298(-212, "icvXMLParseValue", (char *)v61, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2635);
      }
    }
    if ((_DWORD)v8 != 34)
    {
      sprintf((char *)v61, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Literal \" is not allowed within a string. Use &quot;");
      sub_100295298(-212, "icvXMLParseValue", (char *)v61, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2575);
    }
    v18 = (char *)(v17 + 2);
LABEL_122:
    *((_QWORD *)v13 + 2) = sub_10021E8FC(*(_QWORD *)(a1 + 16), __s, v16);
    *((_QWORD *)v13 + 3) = v49;
LABEL_123:
    if (v57 - 1 >= 4)
    {
      v7 = 0;
      v5 = v18;
      v8 = *v18;
      __endptr = 0;
      if (v8 <= 0x3C)
        continue;
      goto LABEL_4;
    }
    break;
  }
  v5 = v18;
LABEL_134:
  v51 = *(_DWORD *)a3;
  v52 = *(_DWORD *)a3 & 7;
  if (v52)
  {
    v53 = v57;
    if (v57 >= 5 && v52 != v57 && v52 < 5)
      goto LABEL_138;
LABEL_143:
    if (v53)
      goto LABEL_144;
  }
  else
  {
    v53 = v57;
    if (v57 < 5)
      goto LABEL_143;
LABEL_138:
    if (v53 == 6)
      v54 = 6;
    else
      v54 = 5;
    sub_100282918(a1, v54, a3);
    v51 = *(_DWORD *)a3;
    v52 = *(_DWORD *)a3 & 7;
    v53 = v57;
LABEL_144:
    if (v53 != v52)
    {
      sprintf(__s, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "The actual type is different from the specified type");
      sub_100295298(-212, "icvXMLParseValue", __s, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2657);
    }
  }
  if (v52 > 4)
    *(_DWORD *)a3[2] |= 0x100u;
  *(_DWORD *)a3 = v51 | a4 & 0x10;
  return v5;
}

void sub_1002828E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100282918(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v5;
  _DWORD *v6;
  _OWORD *v7;
  _DWORD *v8;
  char v10[1024];

  if ((a2 & 7) == 6)
  {
    if (*(_DWORD *)a3)
    {
      sprintf(v10, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Sequence element should not have name (use <_></_>)");
      sub_100295298(-212, "icvFSCreateCollection", v10, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 558);
    }
    v5 = *(_QWORD *)(a1 + 16);
    v6 = sub_100222C34(0, 120, 48, v5);
    v6[27] = 16;
    v7 = (_OWORD *)sub_10021E610(v5, 0x80uLL);
    *((_QWORD *)v6 + 14) = v7;
    v7[6] = 0u;
    v7[7] = 0u;
    v7[4] = 0u;
    v7[5] = 0u;
    v7[2] = 0u;
    v7[3] = 0u;
    *v7 = 0u;
    v7[1] = 0u;
  }
  else
  {
    v8 = sub_10021E968(0, 0x60uLL, 0x20uLL, *(_QWORD *)(a1 + 16));
    v6 = v8;
    if ((*(_BYTE *)a3 & 7) != 0)
      sub_10021FC6C((uint64_t)v8, a3);
  }
  a3[2] = v6;
  *(_DWORD *)a3 = a2;
  return sub_10021EB30((uint64_t)v6, 8);
}

std::string *sub_100282A70(uint64_t a1, char *a2, uint64_t *a3)
{
  char *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  std::string *v8;
  uint64_t v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned __int8 v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned int v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned int v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned int v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned int v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned int v35;
  unsigned __int8 v36;
  uint64_t v37;
  std::string *v38;
  char *v39;
  unsigned int v40;
  unsigned int v41;
  std::string::size_type size;
  std::string *v43;
  int v44;
  std::string::size_type v45;
  uint64_t v46;
  size_t v47;
  char *v48;
  char *v49;
  std::string *v50;
  int v51;
  std::string::size_type v52;
  int v53;
  _OWORD *v54;
  _OWORD *v55;
  const char *v56;
  int v57;
  int v58;
  _DWORD *v59;
  uint64_t v60;
  char *v61;
  std::string *v62;
  char *v63;
  int v64;
  int64_t v65;
  uint64_t v66;
  char *v68;
  std::string v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  char v73[8];
  char *v74;
  void *v75;
  void *v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;

  v5 = sub_1002811A8(a1, a2, 2);
  v6 = (unsigned __int8 *)v5;
  if (*(_DWORD *)(a1 + 152))
    return (std::string *)v5;
  v7 = *v5;
  if (v7 == 60)
    return (std::string *)v5;
  if (v7 < 0x20)
  {
    v10 = 0;
    if (!*v5)
      goto LABEL_11;
  }
  else
  {
    v10 = 0;
    do
      v11 = v5[++v10];
    while (v11 > 0x1F);
    if (!v11)
    {
LABEL_11:
      sprintf(v73, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unexpected end of line");
      sub_100295298(-212, "icvXMLGetMultilineStringContent", v73, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2328);
    }
  }
  v8 = (std::string *)&v5[v10];
  if (v10 < 1)
    return v8;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  if ((unint64_t)v10 <= 0x1F)
  {
    sprintf(v73, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unrecognized Base64 header");
    sub_100295298(-212, "icvXMLParseBase64", v73, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2347);
  }
  v12 = operator new(0x19uLL);
  v69.__r_.__value_.__l.__size_ = (std::string::size_type)(v12 + 25);
  v69.__r_.__value_.__r.__words[2] = (std::string::size_type)(v12 + 25);
  v69.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  v13 = byte_1003BD124[v6[1]];
  v14 = byte_1003BD124[v6[2]];
  v15 = byte_1003BD124[v6[3]];
  *v12 = (4 * byte_1003BD124[*v6]) | (v13 >> 4) & 3;
  v12[1] = (16 * v13) | (v14 >> 2) & 0xF;
  v12[2] = v15 | ((_BYTE)v14 << 6);
  v16 = byte_1003BD124[v6[5]];
  v17 = byte_1003BD124[v6[6]];
  v18 = byte_1003BD124[v6[7]];
  v12[3] = (4 * byte_1003BD124[v6[4]]) | (v16 >> 4) & 3;
  v12[4] = (16 * v16) | (v17 >> 2) & 0xF;
  v12[5] = v18 | ((_BYTE)v17 << 6);
  v19 = byte_1003BD124[v6[9]];
  v20 = byte_1003BD124[v6[10]];
  v21 = byte_1003BD124[v6[11]];
  v12[6] = (4 * byte_1003BD124[v6[8]]) | (v19 >> 4) & 3;
  v12[7] = (16 * v19) | (v20 >> 2) & 0xF;
  v12[8] = v21 | ((_BYTE)v20 << 6);
  v22 = byte_1003BD124[v6[13]];
  v23 = byte_1003BD124[v6[14]];
  v24 = byte_1003BD124[v6[15]];
  v12[9] = (4 * byte_1003BD124[v6[12]]) | (v22 >> 4) & 3;
  v12[10] = (16 * v22) | (v23 >> 2) & 0xF;
  v12[11] = v24 | ((_BYTE)v23 << 6);
  v25 = byte_1003BD124[v6[17]];
  v26 = byte_1003BD124[v6[18]];
  v27 = byte_1003BD124[v6[19]];
  v12[12] = (4 * byte_1003BD124[v6[16]]) | (v25 >> 4) & 3;
  v12[13] = (16 * v25) | (v26 >> 2) & 0xF;
  v12[14] = v27 | ((_BYTE)v26 << 6);
  v28 = byte_1003BD124[v6[21]];
  v29 = byte_1003BD124[v6[22]];
  v30 = byte_1003BD124[v6[23]];
  v12[15] = (4 * byte_1003BD124[v6[20]]) | (v28 >> 4) & 3;
  v12[16] = (16 * v28) | (v29 >> 2) & 0xF;
  v12[17] = v30 | ((_BYTE)v29 << 6);
  v31 = byte_1003BD124[v6[25]];
  v32 = byte_1003BD124[v6[26]];
  v33 = byte_1003BD124[v6[27]];
  v12[18] = (4 * byte_1003BD124[v6[24]]) | (v31 >> 4) & 3;
  v12[19] = (16 * v31) | (v32 >> 2) & 0xF;
  v12[20] = v33 | ((_BYTE)v32 << 6);
  v34 = byte_1003BD124[v6[29]];
  v35 = byte_1003BD124[v6[30]];
  v36 = byte_1003BD124[v6[31]];
  v12[21] = (4 * byte_1003BD124[v6[28]]) | (v34 >> 4) & 3;
  v12[22] = (16 * v34) | (v35 >> 2) & 0xF;
  v12[23] = v36 | ((_BYTE)v35 << 6);
  v12[24] = 0;
  if (!sub_10027EE90((const char **)&v69.__r_.__value_.__l.__data_, (uint64_t)&v70))
    goto LABEL_19;
  v37 = HIBYTE(v72);
  if (v72 < 0)
    v37 = v71;
  if (!v37)
  {
LABEL_19:
    sub_100295298(-212, "icvXMLParseBase64", v73, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2352);
  }
  operator delete(v12);
  memset(&v69, 0, sizeof(v69));
  std::string::reserve(&v69, 0x20000uLL);
  if ((unint64_t)v10 >= 0x21)
  {
    v38 = (std::string *)(v6 + 32);
    while (1)
    {
      sub_1002835A4(&v69, v38, v8);
      v39 = sub_1002811A8(a1, (char *)v8, 2);
      v38 = (std::string *)v39;
      if (*(_DWORD *)(a1 + 152))
        break;
      v40 = *v39;
      if (v40 == 60)
        break;
      v8 = (std::string *)v39;
      if (v40 >= 0x20)
      {
        v8 = (std::string *)v39;
        do
        {
          v41 = v8->__r_.__value_.__s.__data_[1];
          v8 = (std::string *)((char *)v8 + 1);
          v40 = v41;
        }
        while (v41 > 0x1F);
      }
      if (!v40)
      {
        sprintf(v73, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unexpected end of line");
        sub_100295298(-212, "icvXMLGetMultilineStringContent", v73, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2328);
      }
      if (v39 >= (char *)v8)
        goto LABEL_32;
    }
    v8 = (std::string *)v39;
  }
LABEL_32:
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v69.__r_.__value_.__l.__size_;
    if (!v69.__r_.__value_.__l.__size_)
      goto LABEL_38;
    v43 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if (!v69.__r_.__value_.__r.__words[0])
      goto LABEL_38;
  }
  else
  {
    if (!*((_BYTE *)&v69.__r_.__value_.__s + 23))
      goto LABEL_38;
    size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    v43 = &v69;
  }
  if ((size & 3) != 0)
    goto LABEL_38;
  v62 = (std::string *)((char *)v43 + size);
  v63 = (char *)&v62[-1].__r_.__value_.__r.__words[2] + 7;
  if (*((_BYTE *)&v62[-1].__r_.__value_.__s + 23) == 61)
  {
    v64 = v62[-1].__r_.__value_.__s.__data_[22];
    v62 = (std::string *)((char *)v62 - 2);
    if (v64 != 61)
      v62 = (std::string *)v63;
  }
  if (v43 < v62)
  {
    v65 = (char *)v62 - (char *)v43;
    while (1)
    {
      v66 = v43->__r_.__value_.__s.__data_[0];
      if (v66 > 0x7E)
        break;
      if ((_DWORD)v66 != 65 && byte_1003BD124[v66] == 0)
        break;
      v43 = (std::string *)((char *)v43 + 1);
      if (!--v65)
        goto LABEL_39;
    }
LABEL_38:
    sprintf(v73, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid Base64 data.");
    sub_100295298(-212, "icvXMLParseBase64", v73, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2368);
  }
LABEL_39:
  v44 = SHIBYTE(v69.__r_.__value_.__r.__words[2]);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  else
    v45 = v69.__r_.__value_.__l.__size_;
  HIWORD(v68) = 0;
  v46 = 3 * (v45 >> 2);
  v47 = v46 + 1;
  if (v46 + 1 < 0)
    sub_100008F3C();
  v48 = (char *)operator new(v46 + 1);
  v49 = &v48[v47];
  v68 = &v48[v47];
  bzero(v48, v47);
  if (v44 >= 0)
    v50 = &v69;
  else
    v50 = (std::string *)v69.__r_.__value_.__r.__words[0];
  v51 = 3 * (v45 >> 2) + 1;
  v52 = v45 - 1;
  do
  {
    v53 = v50->__r_.__value_.__s.__data_[v52];
    --v51;
    --v52;
  }
  while (v53 == 61);
  *(_QWORD *)v73 = v48;
  v74 = v49;
  v54 = operator new(0x78uLL);
  v76 = (char *)v54 + 120;
  v77 = (char *)v54 + 120;
  *v54 = 0u;
  v54[1] = 0u;
  v54[2] = 0u;
  v54[3] = 0u;
  v54[4] = 0u;
  v54[5] = 0u;
  v54[6] = 0u;
  *((_QWORD *)v54 + 14) = 0;
  v75 = v54;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v55 = operator new(0xA1uLL);
  *v55 = 0u;
  v55[1] = 0u;
  v55[2] = 0u;
  v55[3] = 0u;
  v55[4] = 0u;
  v55[5] = 0u;
  v55[6] = 0u;
  v55[7] = 0u;
  v55[8] = 0u;
  v55[9] = 0u;
  *((_BYTE *)v55 + 160) = 0;
  *(_QWORD *)&v80 = (char *)v55 + 161;
  *((_QWORD *)&v80 + 1) = (char *)v55 + 161;
  *(_QWORD *)&v78 = v55;
  *((_QWORD *)&v78 + 1) = v55;
  *(_QWORD *)&v79 = (char *)v55 + 120;
  *((_QWORD *)&v79 + 1) = v55;
  sub_10027F728((uint64_t)v73, (unint64_t)v50, (unint64_t)v50 + v45);
  sub_10027F414((uint64_t)v73);
  if (*((_QWORD *)&v78 + 1) != (_QWORD)v78)
    sub_10027F414((uint64_t)v73);
  if (*((_QWORD *)&v79 + 1))
  {
    *(_QWORD *)&v80 = *((_QWORD *)&v79 + 1);
    operator delete(*((void **)&v79 + 1));
  }
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  if (v72 >= 0)
    v56 = (const char *)&v70;
  else
    v56 = (const char *)v70;
  v57 = sub_100278E5C(v56);
  v58 = v51 / v57;
  if (v51 % v57)
  {
    sprintf(v73, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "data size not matches elememt size");
    sub_100295298(-212, "icvXMLParseBase64", v73, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2386);
  }
  *(_DWORD *)a3 = 0;
  v59 = sub_10021E968(0, 0x60uLL, 0x20uLL, *(_QWORD *)(a1 + 16));
  v60 = (uint64_t)v59;
  if ((*(_BYTE *)a3 & 7) != 0)
    sub_10021FC6C((uint64_t)v59, a3);
  a3[2] = v60;
  *(_DWORD *)a3 = 5;
  sub_10021EB30(v60, 8);
  if (v72 >= 0)
    v61 = (char *)&v70;
  else
    v61 = (char *)v70;
  sub_100280018((uint64_t)v48, v58, v61, a3[2]);
  if (*(_DWORD *)(a1 + 152))
    v8 = *(std::string **)(a1 + 128);
  if (v48)
    operator delete(v48);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72) < 0)
    operator delete(v70);
  return v8;
}

void sub_1002832B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_100283364(uint64_t a1, char *a2, char **a3)
{
  char *v4;
  double v6;
  char *v7;
  double v8;
  int v9;
  int v10;
  int v11;
  char v13[1024];

  v4 = a2;
  v6 = strtod(a2, a3);
  v7 = *a3;
  if (**a3 != 46)
  {
LABEL_4:
    if (v7 == v4)
      goto LABEL_8;
    goto LABEL_5;
  }
  *v7 = 44;
  v8 = strtod(v4, a3);
  *v7 = 46;
  if (*a3 > v7)
  {
    v7 = *a3;
    v6 = v8;
    goto LABEL_4;
  }
  *a3 = v7;
  if (v7 == v4)
    goto LABEL_8;
LABEL_5:
  if ((*v7 & 0xDFu) - 65 > 0x19)
    return v6;
LABEL_8:
  v9 = *v4;
  if (v9 == 45 || v9 == 43)
  {
    v11 = *++v4;
    v10 = v11;
    if (v9 == 45)
      v6 = -INFINITY;
    else
      v6 = INFINITY;
    if (v10 != 46)
    {
LABEL_14:
      sprintf(v13, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Bad format of floating-point constant");
      sub_100295298(-212, "icvProcessSpecialDouble", v13, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1059);
    }
  }
  else
  {
    v6 = INFINITY;
    if (v9 != 46)
      goto LABEL_14;
  }
  if (__toupper(v4[1]) != 73 || __toupper(v4[2]) != 78 || __toupper(v4[3]) != 70)
  {
    if (__toupper(v4[1]) != 78 || __toupper(v4[2]) != 65 || (v6 = NAN, __toupper(v4[3]) != 78))
    {
      sprintf(v13, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Bad format of floating-point constant");
      sub_100295298(-212, "icvProcessSpecialDouble", v13, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1068);
    }
  }
  *a3 = v4 + 4;
  return v6;
}

std::string *sub_1002835A4(std::string *this, std::string *__src, std::string *a3)
{
  unint64_t v6;
  size_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **p_dst;
  std::string *v13;
  std::string::value_type *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  char *v20;
  _OWORD *v21;
  std::string::size_type *v22;
  unint64_t v23;
  __int128 v24;
  std::string::value_type v25;
  std::string::size_type v26;
  void **__dst;
  std::string::size_type v29;
  int64_t v30;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (char *)a3 - (char *)__src;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == __src)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
    if (this->__r_.__value_.__r.__words[0] > (unint64_t)__src)
      goto LABEL_12;
  }
  else
  {
    if (a3 == __src)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
    if (this > __src)
    {
LABEL_12:
      if (v9 - size < v7)
      {
        std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
        this->__r_.__value_.__l.__size_ = size;
        v13 = this;
        if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_14:
          v14 = (char *)v13 + size;
          if (a3 == __src)
            goto LABEL_38;
          goto LABEL_18;
        }
      }
      else
      {
        v13 = this;
        if ((v6 & 0x80) == 0)
          goto LABEL_14;
      }
      v13 = (std::string *)this->__r_.__value_.__r.__words[0];
      v14 = (std::string::value_type *)(this->__r_.__value_.__r.__words[0] + size);
      if (a3 == __src)
        goto LABEL_38;
LABEL_18:
      if (v7 >= 0x20)
      {
        v20 = (char *)v13 + size;
        if ((unint64_t)((char *)v13 + size - (char *)__src) >= 0x20)
        {
          v15 = (std::string *)((char *)__src + (v7 & 0xFFFFFFFFFFFFFFE0));
          v14 += v7 & 0xFFFFFFFFFFFFFFE0;
          v21 = v20 + 16;
          v22 = &__src->__r_.__value_.__r.__words[2];
          v23 = v7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            *v21 = v24;
            v21 += 2;
            v22 += 4;
            v23 -= 32;
          }
          while (v23);
          if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0))
            goto LABEL_38;
        }
        else
        {
          v15 = __src;
        }
      }
      else
      {
        v15 = __src;
      }
      do
      {
        v25 = v15->__r_.__value_.__s.__data_[0];
        v15 = (std::string *)((char *)v15 + 1);
        *v14++ = v25;
      }
      while (v15 != a3);
LABEL_38:
      *v14 = 0;
      v26 = v7 + size;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v26;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v26 & 0x7F;
      return this;
    }
  }
  if ((std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= __src)
    goto LABEL_12;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_10022EEEC();
  if (v7 > 0x16)
  {
    v16 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v16 = v7 | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    v29 = v7;
    v30 = v17 | 0x8000000000000000;
    __dst = p_dst;
    if (a3 == __src)
      goto LABEL_24;
  }
  else
  {
    HIBYTE(v30) = v7;
    p_dst = (void **)&__dst;
    if (a3 == __src)
      goto LABEL_24;
  }
  memcpy(p_dst, __src, v7);
  p_dst = (void **)((char *)p_dst + v7);
LABEL_24:
  *(_BYTE *)p_dst = 0;
  if (v30 >= 0)
    v18 = (const std::string::value_type *)&__dst;
  else
    v18 = (const std::string::value_type *)__dst;
  if (v30 >= 0)
    v19 = HIBYTE(v30);
  else
    v19 = v29;
  std::string::append(this, v18, v19);
  if (SHIBYTE(v30) < 0)
    operator delete(__dst);
  return this;
}

void sub_1002837E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_100283804(uint64_t a1, char *a2, int a3)
{
  const char *v5;
  unsigned int v6;
  char *v8;
  int v9;
  FILE *v11;
  gzFile_s *v12;
  char v15[1024];

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (v6 != 35)
          break;
        if ((uint64_t)&a2[-*(_QWORD *)(a1 + 128)] > 0x7FFFFFFF)
          return a2;
        *a2 = 0;
      }
      if (v6 != 32)
        break;
      ++a2;
    }
    if (v6 >= 0x20)
      break;
    if (v6 > 0xD || ((1 << v6) & 0x2401) == 0)
    {
      if (v6 == 9)
        v5 = "Tabs are prohibited in YAML!";
      else
        v5 = "Invalid character";
      sprintf(v15, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), v5);
      sub_100295298(-212, "icvYMLSkipSpaces", v15, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1322);
    }
    v8 = sub_100272C98((_QWORD *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)));
    if (!v8)
    {
      a2 = *(char **)(a1 + 128);
      *(_DWORD *)a2 = 3026478;
      *(_DWORD *)(a1 + 152) = 1;
      return a2;
    }
    a2 = v8;
    v9 = v8[(int)(strlen(v8) - 1)];
    if (v9 != 10 && v9 != 13)
    {
      if (*(_QWORD *)(a1 + 352))
      {
        if (*(_QWORD *)(a1 + 368) < *(_QWORD *)(a1 + 360))
          goto LABEL_29;
      }
      else
      {
        v11 = *(FILE **)(a1 + 104);
        if (v11)
        {
          if (!feof(v11))
            goto LABEL_29;
        }
        else
        {
          v12 = *(gzFile_s **)(a1 + 112);
          if (!v12 || !gzeof(v12))
          {
LABEL_29:
            sprintf(v15, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Too long string or a last string w/o newline");
            sub_100295298(-212, "icvYMLSkipSpaces", v15, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1316);
          }
        }
      }
    }
    ++*(_DWORD *)(a1 + 148);
  }
  if ((uint64_t)&a2[-*(_QWORD *)(a1 + 128)] < a3)
  {
    sprintf(v15, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Incorrect indentation");
    sub_100295298(-212, "icvYMLSkipSpaces", v15, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1296);
  }
  return a2;
}

std::string *sub_100283A8C(uint64_t a1, char *a2, uint64_t *a3, char a4, int a5)
{
  uint64_t v5;
  int v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  BOOL v17;
  uint64_t v19;
  unsigned __int8 *v20;
  const char *v21;
  int v22;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v35;
  int v36;
  int v37;
  double v38;
  signed int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  _BOOL4 v45;
  uint64_t v46;
  int v47;
  int v48;
  char *v49;
  BOOL i;
  char *v51;
  int v52;
  char *v53;
  char *v54;
  int v55;
  uint64_t v56;
  BOOL v57;
  char *v58;
  unsigned int v59;
  char *v60;
  char *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int v66;
  unsigned __int8 v67;
  const char *v68;
  char v69;
  char v70;
  uint64_t v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned __int8 *v76;
  uint64_t v77;
  char *v78;
  _BOOL4 v79;
  char *v81;
  int v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  int v88;
  unsigned int v90;
  char *v91;
  int v92;
  uint64_t v93;
  int v94;
  char *v95;
  char *__endptr;
  char __s[5120];
  uint64_t v98;
  uint64_t v99;

  LODWORD(v5) = a5;
  bzero(__s, 0x1400uLL);
  __endptr = 0;
  v10 = *a2;
  v11 = a2[1];
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  if (v10 != 33)
  {
    v12 = 0;
    goto LABEL_79;
  }
  if (v11 == 94 || v11 == 33)
  {
    v12 = 16;
    ++a2;
LABEL_24:
    v14 = (unsigned __int8 *)a2;
    goto LABEL_25;
  }
  v12 = 0;
  if (v11 != 60)
    goto LABEL_24;
  v13 = 0;
  v14 = (unsigned __int8 *)(a2 + 1);
  do
    v15 = a2[v13++ + 2];
  while (v15 >= 0x21 && v15 != 62);
  if (v15 == 62 && v13 >= 0x14)
  {
    v17 = *(_QWORD *)v14 == 0x6D61793A6761743CLL && *(_QWORD *)(a2 + 9) == 0x30322C67726F2E6CLL;
    if (v17 && *(_QWORD *)(a2 + 12) == 0x3A323030322C6772)
    {
      a2[v13 + 1] = 32;
      v14 = (unsigned __int8 *)(a2 + 19);
      v12 = 16;
    }
  }
LABEL_25:
  v19 = 0;
  v20 = v14 + 1;
  do
  {
    __endptr = (char *)&v20[v19];
    v11 = v20[v19++];
  }
  while (v11 > 0x20);
  v21 = (const char *)(v14 + 1);
  if ((_DWORD)v19 == 1)
  {
    sprintf((char *)&v98, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Empty type name");
    sub_100295298(-212, "icvYMLParseValue", (char *)&v98, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1503);
  }
  v14[v19] = 0;
  if ((v12 & 0x10) == 0 && (_DWORD)v19 == 4)
  {
    if (*(_WORD *)v21 == 29811 && v14[3] == 114)
    {
      v22 = 0;
      v12 = 3;
    }
    else if (*(_WORD *)v21 == 28265 && v14[3] == 116)
    {
      v22 = 0;
      v12 = 1;
    }
    else
    {
      v22 = 0;
      if (*(_WORD *)v21 == 25971 && v14[3] == 113)
      {
        v12 = 5;
      }
      else if (!(*(unsigned __int16 *)(v14 + 1) ^ 0x616D | v14[3] ^ 0x70))
      {
        v12 = 6;
      }
    }
    goto LABEL_69;
  }
  if ((v12 & 0x10) == 0 && (_DWORD)v19 == 6)
  {
    v22 = 0;
    if (!(*(_DWORD *)v21 ^ 0x616F6C66 | v14[5] ^ 0x74))
      v12 = 2;
    goto LABEL_69;
  }
  if ((v12 & 0x10) != 0 && (_DWORD)v19 == 7)
  {
    if (*(_DWORD *)v21 == 1634625890 && *(_WORD *)(v14 + 5) == 31090)
    {
      v27 = __endptr;
      *__endptr = v11;
      v28 = v27 + 1;
      do
        v29 = *v28++;
      while (v29 == 32);
      __endptr = v28;
      v11 = *v28;
      *v28 = 0;
      v12 = 5;
      v22 = 1;
      goto LABEL_69;
    }
  }
  else if ((v12 & 0x10) != 0)
  {
    v30 = qword_1004AFF48;
    if (qword_1004AFF48)
    {
      while (strcmp(*(const char **)(v30 + 24), v21))
      {
        v30 = *(_QWORD *)(v30 + 16);
        if (!v30)
          goto LABEL_65;
      }
      v22 = 0;
      a3[1] = v30;
    }
    else
    {
LABEL_65:
      v22 = 0;
      a3[1] = 0;
      *(_DWORD *)a3 &= ~0x10u;
    }
    goto LABEL_69;
  }
  v22 = 0;
LABEL_69:
  v31 = __endptr;
  *__endptr = v11;
  v32 = sub_100283804(a1, v31, v5);
  a2 = v32;
  v10 = *v32;
  if ((v12 & 0x10) == 0)
  {
    switch(v12)
    {
      case 1:
        goto LABEL_94;
      case 2:
        goto LABEL_89;
      case 3:
        if (v10 != 39 && v10 != 34)
        {
          __endptr = v32;
          v58 = v32 - 1;
          v59 = *v32;
          if (v59 > 0x1F)
          {
            if ((a4 & 8) != 0)
            {
LABEL_192:
              v72 = a2 + 1;
              while (1)
              {
                v60 = v72 - 1;
                if (v59 == 44 || v59 == 93 || v59 == 125)
                  break;
                __endptr = v72;
                v73 = *v72++;
                v59 = v73;
                v58 = v60;
                if (v73 <= 0x1F)
                  goto LABEL_207;
              }
LABEL_208:
              if (v58 + 1 == a2)
                goto LABEL_209;
              goto LABEL_212;
            }
LABEL_201:
            v72 = a2 + 1;
            do
            {
              __endptr = v72;
              v74 = *v72++;
              v59 = v74;
            }
            while (v74 > 0x1F);
LABEL_207:
            v58 = v72 - 2;
            v60 = v72 - 1;
            goto LABEL_208;
          }
LABEL_211:
          v60 = a2;
          if (v58 + 1 == a2)
LABEL_209:
            sub_10027076C(*(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "icvYMLParseValue", "Invalid character", 1748);
LABEL_212:
          if ((a4 & 8) != 0 || v59 != 58)
          {
            *(_DWORD *)a3 = 3;
            v90 = (_DWORD)v60 - (_DWORD)a2 + 1;
            v91 = v60 - 1;
            do
            {
              --v90;
              if (v91 <= a2)
                break;
              v92 = *v91--;
            }
            while (v92 == 32);
            a3[2] = sub_10021E8FC(*(_QWORD *)(a1 + 16), a2, v90);
            a3[3] = v93;
            return (std::string *)__endptr;
          }
          v56 = 6;
          v55 = 1;
          goto LABEL_215;
        }
        if ((v22 & 1) == 0)
        {
          v12 = 3;
          goto LABEL_79;
        }
        return sub_1002849D8(a1, v32, (int)v32 - *(_DWORD *)(a1 + 128), a3);
    }
  }
  if (v22)
    return sub_1002849D8(a1, v32, (int)v32 - *(_DWORD *)(a1 + 128), a3);
LABEL_79:
  if ((v10 - 48) >= 0xA)
  {
    switch(v10)
    {
      case '"':
      case '\'':
        *(_DWORD *)a3 = 3;
        if (v10 == 39)
        {
          v39 = 0;
          v33 = a2;
          while (1)
          {
            v42 = *++v33;
            v41 = v42;
            v43 = (v42 & 0xFFFFFFDF) - 65;
            v44 = v42 - 48 >= 0xA && v43 >= 0x1A;
            if (v44 && (v41 == 39 || v41 < 0x20))
            {
              if (v41 != 39)
              {
                sprintf((char *)&v98, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid character");
                sub_100295298(-212, "icvYMLParseValue", (char *)&v98, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1622);
              }
              LOBYTE(v41) = a2[2];
              v33 = a2 + 2;
              if (v41 != 39)
                break;
            }
            __s[v39++] = v41;
            a2 = v33;
            if (v39 >= 4096)
              goto LABEL_184;
          }
LABEL_185:
          a3[2] = sub_10021E8FC(*(_QWORD *)(a1 + 16), __s, v39);
          a3[3] = v71;
          return (std::string *)v33;
        }
        v39 = 0;
        v61 = a2;
        while (1)
        {
          v63 = *++v61;
          v62 = v63;
          v64 = (v63 & 0xFFFFFFDF) - 65;
          if (v63 - 48 >= 0xA && v64 >= 0x1A)
          {
            if (v62 < 0x20)
            {
              sprintf((char *)&v98, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid character");
              sub_100295298(-212, "icvYMLParseValue", (char *)&v98, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1665);
            }
            if (v62 == 92)
            {
              v61 = a2 + 2;
              v62 = a2[2];
              switch(a2[2])
              {
                case '\\':
                  goto LABEL_158;
                case ']':
                case '^':
                case '_':
                case 'a':
                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                case 'g':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'o':
                case 'p':
                case 'q':
                case 's':
                  goto LABEL_169;
                case 'n':
                  LOBYTE(v62) = 10;
                  goto LABEL_158;
                case 'r':
                  LOBYTE(v62) = 13;
                  goto LABEL_158;
                case 't':
                  LOBYTE(v62) = 9;
                  goto LABEL_158;
                default:
                  if (v62 == 34)
                    goto LABEL_158;
                  if (v62 == 39)
                  {
                    __s[v39] = 39;
                    goto LABEL_159;
                  }
LABEL_169:
                  if (v62 == 120)
                  {
                    v66 = 8;
                  }
                  else
                  {
                    if ((v62 & 0xF8) != 0x30)
                      goto LABEL_153;
                    v66 = 16;
                  }
                  v67 = a2[5];
                  a2[5] = 0;
                  if (v62 == 120)
                    v68 = a2 + 3;
                  else
                    v68 = a2 + 2;
                  v69 = strtol(v68, &__endptr, v66);
                  a2[5] = v67;
                  if (__endptr == v68)
                    v70 = 120;
                  else
                    v70 = v69;
                  if (__endptr != v68)
                    v61 = __endptr;
                  __s[v39++] = v70;
                  break;
              }
              goto LABEL_153;
            }
            if (v62 == 34)
            {
              v33 = a2 + 2;
              goto LABEL_185;
            }
          }
LABEL_158:
          __s[v39] = v62;
LABEL_159:
          ++v39;
LABEL_153:
          a2 = v61;
          if (v39 >= 4096)
          {
LABEL_184:
            sprintf((char *)&v98, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Too long string literal");
            sub_100295298(-212, "icvYMLParseValue", (char *)&v98, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1669);
          }
        }
      case '#':
      case '$':
      case '%':
      case '&':
      case '(':
      case ')':
      case '*':
      case ',':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        goto LABEL_138;
      case '+':
      case '-':
        if (v11 == 46 || v11 - 48 < 0xA)
          goto LABEL_80;
        goto LABEL_138;
      case '.':
        if (v11 - 48 >= 0xA && v11 - 97 >= 0x1A && v11 - 65 > 0x19)
          goto LABEL_148;
        goto LABEL_80;
      case '[':
        goto LABEL_112;
      default:
        if (v10 == 123)
        {
LABEL_112:
          v45 = v10 == 91;
          if ((a4 & 8) != 0)
            v5 = v5;
          else
            v5 = (v5 + 1);
          if (v10 == 123)
            v46 = 14;
          else
            v46 = 13;
          v47 = v46 & 7;
          sub_100282918(a1, v47 | (16 * (a3[1] != 0)), a3);
          if (v45)
            v48 = 93;
          else
            v48 = 125;
          v94 = v48;
          v49 = a2 + 1;
          for (i = 1; ; i = i && (*(_DWORD *)v95 & 7u) < 5)
          {
            v95 = 0;
            v51 = sub_100283804(a1, v49, v5);
            v33 = v51;
            v52 = *v51;
            if ((v52 | 0x20) == 0x7D)
              break;
            if (*(_DWORD *)(a3[2] + 40))
            {
              if (v52 != 44)
              {
                sprintf((char *)&v98, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Missing , between the elements");
                sub_100295298(-212, "icvYMLParseValue", (char *)&v98, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1700);
              }
              v33 = sub_100283804(a1, v51 + 1, v5);
            }
            if (v47 == 6)
            {
              v53 = sub_1002852B4(a1, v33, (uint64_t)a3, (uint64_t *)&v95);
              v33 = sub_100283804(a1, v53, v5);
              v54 = v95;
              if (!v95)
                goto LABEL_133;
            }
            else
            {
              if (*v33 == 93)
                goto LABEL_144;
              v54 = sub_10021FC6C(a3[2], 0);
              v95 = v54;
              if (!v54)
              {
LABEL_133:
                v99 = 0;
                v98 = 0;
                *(_DWORD *)sub_10029430C(&v98, 4) = 1835363429;
                sub_100294B74(-215, &v98, "icvYMLParseValue", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1715);
              }
            }
            v49 = (char *)sub_100283A8C(a1, v33, v54, v46, v5);
            if (v47 == 6)
              *(_DWORD *)v95 |= 0x40u;
          }
          if (v94 != v52)
          {
            sprintf((char *)&v98, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "The wrong closing bracket");
            sub_100295298(-212, "icvYMLParseValue", (char *)&v98, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1692);
          }
          v33 = v51 + 1;
LABEL_144:
          v57 = !i;
LABEL_236:
          if (v57)
            v88 = 0;
          else
            v88 = 256;
          *(_DWORD *)a3[2] |= v88;
          return (std::string *)v33;
        }
LABEL_138:
        if ((a4 & 8) == 0 && v10 == 45)
        {
          v55 = 0;
          v56 = 5;
LABEL_215:
          sub_100282918(a1, v56 | (16 * (a3[1] != 0)), a3);
          v76 = (unsigned __int8 *)&a2[-*(_QWORD *)(a1 + 128)];
          v77 = ((_DWORD)v76 + 1);
          v78 = (char *)(int)v76;
          LOBYTE(v79) = 1;
          v33 = a2;
          while (1)
          {
            v95 = 0;
            if (v55)
            {
              v81 = sub_1002852B4(a1, v33, (uint64_t)a3, (uint64_t *)&v95);
              if (!v95)
                goto LABEL_226;
            }
            else
            {
              v82 = *v33;
              v81 = v33 + 1;
              if (v82 != 45)
              {
                sprintf((char *)&v98, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Block sequence elements must be preceded with '-'");
                sub_100295298(-212, "icvYMLParseValue", (char *)&v98, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1785);
              }
              v95 = sub_10021FC6C(a3[2], 0);
              if (!v95)
              {
LABEL_226:
                v99 = 0;
                v98 = 0;
                *(_DWORD *)sub_10029430C(&v98, 4) = 1835363429;
                sub_100294B74(-215, &v98, "icvYMLParseValue", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1789);
              }
            }
            v83 = sub_100283804(a1, v81, v77);
            v84 = v95;
            v85 = (char *)sub_100283A8C(a1, v83, v95, v56, v77);
            if (v55)
              *(_DWORD *)v84 |= 0x40u;
            v79 = v79 && (*(_DWORD *)v84 & 7u) < 5;
            v86 = sub_100283804(a1, v85, 0);
            v33 = v86;
            v87 = &v86[-*(_QWORD *)(a1 + 128)];
            if (v87 != v78)
              break;
            if (*(_WORD *)v86 == 11822 && v86[2] == 46)
              goto LABEL_235;
          }
          if ((uint64_t)v87 >= (uint64_t)v78)
          {
            sprintf((char *)&v98, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Incorrect indentation");
            sub_100295298(-212, "icvYMLParseValue", (char *)&v98, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1802);
          }
LABEL_235:
          v57 = !v79;
          goto LABEL_236;
        }
LABEL_148:
        if ((a4 & 8) != 0)
        {
          __endptr = a2;
          v58 = a2 - 1;
          v59 = *a2;
          v60 = a2;
          if (v59 <= 0x1F)
            goto LABEL_208;
          goto LABEL_192;
        }
        if (v10 == 62 || v10 == 124)
          sub_10027076C(*(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "icvYMLParseValue", "Multi-line text literals are not supported", 1736);
        if (v10 == 63)
          sub_10027076C(*(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "icvYMLParseValue", "Complex keys are not supported", 1734);
        if (v12 != 3)
        {
          v72 = a2;
          do
          {
            __endptr = v72;
            v75 = *v72++;
            v59 = v75;
          }
          while (v75 >= 0x20 && v59 != 58);
          goto LABEL_207;
        }
        __endptr = a2;
        v59 = *a2;
        if (v59 > 0x1F)
          goto LABEL_201;
        v58 = a2 - 1;
        break;
    }
    goto LABEL_211;
  }
LABEL_80:
  if (v10 == 45 || v10 == 43)
    v35 = a2 + 1;
  else
    v35 = a2;
  do
  {
    __endptr = v35;
    v37 = *v35++;
    v36 = v37;
  }
  while ((v37 - 48) < 0xA);
  if (v36 == 101 || v36 == 46)
  {
LABEL_89:
    v38 = sub_100283364(a1, a2, &__endptr);
    *(_DWORD *)a3 = 2;
    *((double *)a3 + 2) = v38;
    v33 = __endptr;
    if (!__endptr)
    {
LABEL_96:
      sprintf((char *)&v98, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid numeric value (inconsistent explicit type specification?)");
      sub_100295298(-212, "icvYMLParseValue", (char *)&v98, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1601);
    }
    goto LABEL_95;
  }
LABEL_94:
  v40 = strtol(a2, &__endptr, 0);
  *(_DWORD *)a3 = 1;
  *((_DWORD *)a3 + 4) = v40;
  v33 = __endptr;
  if (!__endptr)
    goto LABEL_96;
LABEL_95:
  if (v33 == a2)
    goto LABEL_96;
  return (std::string *)v33;
}

void sub_100284988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

std::string *sub_1002849D8(uint64_t a1, char *a2, int a3, uint64_t *a4)
{
  char *v7;
  unsigned __int8 *v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  std::string *v13;
  _BYTE *v14;
  unsigned __int8 v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned int v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned int v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned int v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned int v37;
  unsigned __int8 v38;
  uint64_t v39;
  std::string *v40;
  char *v42;
  unsigned int v43;
  unsigned int v44;
  std::string::size_type size;
  std::string *v46;
  int v47;
  std::string::size_type v48;
  uint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  std::string *v53;
  int v54;
  std::string::size_type v55;
  int v56;
  _OWORD *v57;
  _OWORD *v58;
  const char *v59;
  int v60;
  int v61;
  _DWORD *v62;
  uint64_t v63;
  char *v64;
  std::string *v65;
  char *v66;
  int v67;
  int64_t v68;
  uint64_t v69;
  char *v71;
  std::string v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  char v76[8];
  char *v77;
  void *v78;
  void *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

  v7 = sub_100283804(a1, a2, 0);
  v8 = (unsigned __int8 *)v7;
  if (*(_DWORD *)(a1 + 152))
    return (std::string *)v7;
  v9 = &v7[-*(_QWORD *)(a1 + 128)];
  if (v9 != (char *)a3)
    return (std::string *)v7;
  v10 = 0;
  do
    v11 = v7[v10++];
  while (v11 > 0x1F);
  if (!v11)
  {
    sprintf(v76, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unexpected end of line");
    sub_100295298(-212, "icvYMLGetMultilineStringContent", v76, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1345);
  }
  v12 = v10 - 1;
  v13 = (std::string *)&v7[v10 - 1];
  if (v10 != 1)
  {
    v73 = 0;
    v74 = 0;
    v75 = 0;
    if (v12 <= 0x1F)
    {
      sprintf(v76, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unrecognized Base64 header");
      sub_100295298(-212, "icvYMLParseBase64", v76, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1365);
    }
    v14 = operator new(0x19uLL);
    v72.__r_.__value_.__l.__size_ = (std::string::size_type)(v14 + 25);
    v72.__r_.__value_.__r.__words[2] = (std::string::size_type)(v14 + 25);
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    v15 = byte_1003BD124[v8[1]];
    v16 = byte_1003BD124[v8[2]];
    v17 = byte_1003BD124[v8[3]];
    *v14 = (4 * byte_1003BD124[*v8]) | (v15 >> 4) & 3;
    v14[1] = (16 * v15) | (v16 >> 2) & 0xF;
    v14[2] = v17 | ((_BYTE)v16 << 6);
    v18 = byte_1003BD124[v8[5]];
    v19 = byte_1003BD124[v8[6]];
    v20 = byte_1003BD124[v8[7]];
    v14[3] = (4 * byte_1003BD124[v8[4]]) | (v18 >> 4) & 3;
    v14[4] = (16 * v18) | (v19 >> 2) & 0xF;
    v14[5] = v20 | ((_BYTE)v19 << 6);
    v21 = byte_1003BD124[v8[9]];
    v22 = byte_1003BD124[v8[10]];
    v23 = byte_1003BD124[v8[11]];
    v14[6] = (4 * byte_1003BD124[v8[8]]) | (v21 >> 4) & 3;
    v14[7] = (16 * v21) | (v22 >> 2) & 0xF;
    v14[8] = v23 | ((_BYTE)v22 << 6);
    v24 = byte_1003BD124[v8[13]];
    v25 = byte_1003BD124[v8[14]];
    v26 = byte_1003BD124[v8[15]];
    v14[9] = (4 * byte_1003BD124[v8[12]]) | (v24 >> 4) & 3;
    v14[10] = (16 * v24) | (v25 >> 2) & 0xF;
    v14[11] = v26 | ((_BYTE)v25 << 6);
    v27 = byte_1003BD124[v8[17]];
    v28 = byte_1003BD124[v8[18]];
    v29 = byte_1003BD124[v8[19]];
    v14[12] = (4 * byte_1003BD124[v8[16]]) | (v27 >> 4) & 3;
    v14[13] = (16 * v27) | (v28 >> 2) & 0xF;
    v14[14] = v29 | ((_BYTE)v28 << 6);
    v30 = byte_1003BD124[v8[21]];
    v31 = byte_1003BD124[v8[22]];
    v32 = byte_1003BD124[v8[23]];
    v14[15] = (4 * byte_1003BD124[v8[20]]) | (v30 >> 4) & 3;
    v14[16] = (16 * v30) | (v31 >> 2) & 0xF;
    v14[17] = v32 | ((_BYTE)v31 << 6);
    v33 = byte_1003BD124[v8[25]];
    v34 = byte_1003BD124[v8[26]];
    v35 = byte_1003BD124[v8[27]];
    v14[18] = (4 * byte_1003BD124[v8[24]]) | (v33 >> 4) & 3;
    v14[19] = (16 * v33) | (v34 >> 2) & 0xF;
    v14[20] = v35 | ((_BYTE)v34 << 6);
    v36 = byte_1003BD124[v8[29]];
    v37 = byte_1003BD124[v8[30]];
    v38 = byte_1003BD124[v8[31]];
    v14[21] = (4 * byte_1003BD124[v8[28]]) | (v36 >> 4) & 3;
    v14[22] = (16 * v36) | (v37 >> 2) & 0xF;
    v14[23] = v38 | ((_BYTE)v37 << 6);
    v14[24] = 0;
    if (!sub_10027EE90((const char **)&v72.__r_.__value_.__l.__data_, (uint64_t)&v73))
      goto LABEL_14;
    v39 = HIBYTE(v75);
    if (v75 < 0)
      v39 = v74;
    if (!v39)
    {
LABEL_14:
      sub_100295298(-212, "icvYMLParseBase64", v76, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1370);
    }
    operator delete(v14);
    memset(&v72, 0, sizeof(v72));
    std::string::reserve(&v72, 0x20000uLL);
    if (v12 >= 0x21)
    {
      v40 = (std::string *)(v8 + 32);
      while (1)
      {
        sub_1002835A4(&v72, v40, v13);
        v42 = sub_100283804(a1, (char *)v13, 0);
        v40 = (std::string *)v42;
        if (*(_DWORD *)(a1 + 152) || &v42[-*(_QWORD *)(a1 + 128)] != v9)
          break;
        v13 = (std::string *)(v42 - 1);
        do
        {
          v44 = v13->__r_.__value_.__s.__data_[1];
          v13 = (std::string *)((char *)v13 + 1);
          v43 = v44;
        }
        while (v44 > 0x1F);
        if (!v43)
        {
          sprintf(v76, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unexpected end of line");
          sub_100295298(-212, "icvYMLGetMultilineStringContent", v76, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1345);
        }
        if (v42 >= (char *)v13)
          goto LABEL_27;
      }
      v13 = (std::string *)v42;
    }
LABEL_27:
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v72.__r_.__value_.__l.__size_;
      if (!v72.__r_.__value_.__l.__size_)
        goto LABEL_33;
      v46 = (std::string *)v72.__r_.__value_.__r.__words[0];
      if (!v72.__r_.__value_.__r.__words[0])
        goto LABEL_33;
    }
    else
    {
      if (!*((_BYTE *)&v72.__r_.__value_.__s + 23))
        goto LABEL_33;
      size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      v46 = &v72;
    }
    if ((size & 3) != 0)
      goto LABEL_33;
    v65 = (std::string *)((char *)v46 + size);
    v66 = (char *)&v65[-1].__r_.__value_.__r.__words[2] + 7;
    if (*((_BYTE *)&v65[-1].__r_.__value_.__s + 23) == 61)
    {
      v67 = v65[-1].__r_.__value_.__s.__data_[22];
      v65 = (std::string *)((char *)v65 - 2);
      if (v67 != 61)
        v65 = (std::string *)v66;
    }
    if (v46 < v65)
    {
      v68 = (char *)v65 - (char *)v46;
      while (1)
      {
        v69 = v46->__r_.__value_.__s.__data_[0];
        if (v69 > 0x7E)
          break;
        if ((_DWORD)v69 != 65 && byte_1003BD124[v69] == 0)
          break;
        v46 = (std::string *)((char *)v46 + 1);
        if (!--v68)
          goto LABEL_34;
      }
LABEL_33:
      sprintf(v76, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid Base64 data.");
      sub_100295298(-212, "icvYMLParseBase64", v76, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1386);
    }
LABEL_34:
    v47 = SHIBYTE(v72.__r_.__value_.__r.__words[2]);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    else
      v48 = v72.__r_.__value_.__l.__size_;
    HIWORD(v71) = 0;
    v49 = 3 * (v48 >> 2);
    v50 = v49 + 1;
    if (v49 + 1 < 0)
      sub_100008F3C();
    v51 = (char *)operator new(v49 + 1);
    v52 = &v51[v50];
    v71 = &v51[v50];
    bzero(v51, v50);
    if (v47 >= 0)
      v53 = &v72;
    else
      v53 = (std::string *)v72.__r_.__value_.__r.__words[0];
    v54 = 3 * (v48 >> 2) + 1;
    v55 = v48 - 1;
    do
    {
      v56 = v53->__r_.__value_.__s.__data_[v55];
      --v54;
      --v55;
    }
    while (v56 == 61);
    *(_QWORD *)v76 = v51;
    v77 = v52;
    v57 = operator new(0x78uLL);
    v79 = (char *)v57 + 120;
    v80 = (char *)v57 + 120;
    *v57 = 0u;
    v57[1] = 0u;
    v57[2] = 0u;
    v57[3] = 0u;
    v57[4] = 0u;
    v57[5] = 0u;
    v57[6] = 0u;
    *((_QWORD *)v57 + 14) = 0;
    v78 = v57;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v58 = operator new(0xA1uLL);
    *v58 = 0u;
    v58[1] = 0u;
    v58[2] = 0u;
    v58[3] = 0u;
    v58[4] = 0u;
    v58[5] = 0u;
    v58[6] = 0u;
    v58[7] = 0u;
    v58[8] = 0u;
    v58[9] = 0u;
    *((_BYTE *)v58 + 160) = 0;
    *(_QWORD *)&v83 = (char *)v58 + 161;
    *((_QWORD *)&v83 + 1) = (char *)v58 + 161;
    *(_QWORD *)&v81 = v58;
    *((_QWORD *)&v81 + 1) = v58;
    *(_QWORD *)&v82 = (char *)v58 + 120;
    *((_QWORD *)&v82 + 1) = v58;
    sub_10027F728((uint64_t)v76, (unint64_t)v53, (unint64_t)v53 + v48);
    sub_10027F414((uint64_t)v76);
    if (*((_QWORD *)&v81 + 1) != (_QWORD)v81)
      sub_10027F414((uint64_t)v76);
    if (*((_QWORD *)&v82 + 1))
    {
      *(_QWORD *)&v83 = *((_QWORD *)&v82 + 1);
      operator delete(*((void **)&v82 + 1));
    }
    if (v78)
    {
      v79 = v78;
      operator delete(v78);
    }
    if (v75 >= 0)
      v59 = (const char *)&v73;
    else
      v59 = (const char *)v73;
    v60 = sub_100278E5C(v59);
    v61 = v54 / v60;
    if (v54 % v60)
    {
      sprintf(v76, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Byte size not match elememt size");
      sub_100295298(-212, "icvYMLParseBase64", v76, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1404);
    }
    *(_DWORD *)a4 = 0;
    v62 = sub_10021E968(0, 0x60uLL, 0x20uLL, *(_QWORD *)(a1 + 16));
    v63 = (uint64_t)v62;
    if ((*(_BYTE *)a4 & 7) != 0)
      sub_10021FC6C((uint64_t)v62, a4);
    a4[2] = v63;
    *(_DWORD *)a4 = 13;
    sub_10021EB30(v63, 8);
    if (v75 >= 0)
      v64 = (char *)&v73;
    else
      v64 = (char *)v73;
    sub_100280018((uint64_t)v51, v61, v64, a4[2]);
    if (*(_DWORD *)(a1 + 152))
      v13 = *(std::string **)(a1 + 128);
    if (v51)
      operator delete(v51);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75) < 0)
      operator delete(v73);
  }
  return v13;
}

void sub_100285200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_1002852B4(uint64_t a1, char *__s, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  char v14[1024];

  if (*__s == 45)
  {
    sprintf(v14, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Key may not start with '-'");
    sub_100295298(-212, "icvYMLParseKey", v14, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1432);
  }
  v8 = 0;
  do
    v9 = __s[v8++];
  while (v9 >= 0x20 && v9 != 58);
  if (v9 != 58)
  {
    sprintf(v14, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Missing ':'");
    sub_100295298(-212, "icvYMLParseKey", v14, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1438);
  }
  v10 = v8;
  do
    v11 = __s[v10-- - 2];
  while (v11 == 32);
  if (!v10)
  {
    sprintf(v14, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "An empty key");
    sub_100295298(-212, "icvYMLParseKey", v14, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1446);
  }
  v12 = (_DWORD *)sub_100270168(a1, __s, v10, 1);
  *a4 = sub_100270304(a1, a3, v12, 1);
  return &__s[v8];
}

char *sub_10028547C(uint64_t a1, char *a2)
{
  _BOOL4 v4;
  uint64_t v5;
  int v6;
  int v7;
  char *v8;
  char *v9;
  int v10;
  int v11;
  char v13[1024];

  while (1)
  {
    v5 = *a2;
    if (v5 > 0x2F)
      break;
    if (((1 << *a2) & 0x2401) != 0)
    {
      a2 = sub_100272C98((_QWORD *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)));
      v4 = a2 == 0;
      goto LABEL_3;
    }
    if (((1 << *a2) & 0x100000200) != 0)
    {
      v4 = 0;
      ++a2;
      goto LABEL_3;
    }
    if (v5 != 47)
      break;
    v7 = *++a2;
    v6 = v7;
    if (v7)
    {
      if (v6 != 42)
        goto LABEL_11;
    }
    else
    {
      v8 = sub_100272C98((_QWORD *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)));
      if (!v8)
        goto LABEL_34;
      a2 = v8;
      v6 = *v8;
      if (v6 != 42)
      {
LABEL_11:
        if (v6 != 47)
        {
          sprintf(v13, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Not supported escape character");
          sub_100295298(-212, "icvJSONSkipSpaces", v13, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3335);
        }
        while (1)
        {
          if (v6)
          {
            if (v6 == 10 || v6 == 13)
            {
              v4 = 0;
              goto LABEL_3;
            }
            ++a2;
          }
          else
          {
            a2 = sub_100272C98((_QWORD *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)));
            if (!a2)
              goto LABEL_34;
          }
          v6 = *a2;
        }
      }
    }
    v9 = a2 + 1;
    do
    {
      while (1)
      {
        while (*v9 != 42)
        {
          if (*v9)
          {
            ++v9;
          }
          else
          {
            v9 = sub_100272C98((_QWORD *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)));
            if (!v9)
              goto LABEL_34;
          }
        }
        v11 = *++v9;
        v10 = v11;
        if (!v11)
          break;
        if (v10 == 47)
          goto LABEL_33;
      }
      v9 = sub_100272C98((_QWORD *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)));
      if (!v9)
        goto LABEL_34;
    }
    while (*v9 != 47);
LABEL_33:
    v4 = 0;
    a2 = v9 + 1;
LABEL_3:
    if (v4)
    {
LABEL_34:
      a2 = *(char **)(a1 + 128);
      *a2 = 0;
      *(_DWORD *)(a1 + 152) = 1;
      return a2;
    }
  }
  if (*a2 <= 0x1Fu)
  {
    sprintf(v13, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid character in the stream");
    sub_100295298(-212, "icvJSONSkipSpaces", v13, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3353);
  }
  return a2;
}

char *sub_100285720(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t *v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v19[3];
  char *__s2;
  uint64_t *v21;
  char v22[1024];

  if (*a2 != 123)
  {
    sprintf(v22, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'{' - left-brace of map is missing");
    sub_100295298(-212, "icvJSONParseMap", v22, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3736);
  }
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_100282918(a1, 6, (_QWORD *)a3);
  v6 = sub_10028547C(a1, a2 + 1);
  if (!v6)
  {
LABEL_35:
    sprintf(v22, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "ptr is NULL");
    sub_100295298(-212, "icvJSONParseMap", v22, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3800);
  }
  v7 = v6;
  while (!*(_DWORD *)(a1 + 152))
  {
    if (*v7 == 34)
    {
      v21 = 0;
      v8 = sub_100285DFC(a1, (unint64_t)v7, a3, (uint64_t *)&v21);
      if (!v8)
        goto LABEL_35;
      v7 = v8;
      if (*(_DWORD *)(a1 + 152))
        break;
      v9 = sub_10028547C(a1, v8);
      if (!v9)
        goto LABEL_35;
      v7 = v9;
      if (*(_DWORD *)(a1 + 152))
        break;
      v10 = v21;
      if (v21)
      {
        v11 = *v9;
        if (v11 == 123)
        {
          v12 = (char *)sub_100285720(a1, v9, v21);
        }
        else if (v11 == 91)
        {
          v12 = sub_100285B14(a1, v9, v21);
        }
        else
        {
          v12 = sub_10028608C(a1, v9, v21);
        }
        *(_DWORD *)v10 |= 0x40u;
        v16 = sub_10028547C(a1, v12);
        if (!v16)
          goto LABEL_35;
      }
      else
      {
        v13 = sub_10028608C(a1, v9, v19);
        if ((v19[0] & 7) != 3)
        {
          sprintf(v22, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "\"type_id\" should be of type string");
          sub_100295298(-212, "icvJSONParseMap", v22, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3772);
        }
        v14 = __s2;
        if (__s2 && (v15 = qword_1004AFF48) != 0)
        {
          while (strcmp(*(const char **)(v15 + 24), v14))
          {
            v15 = *(_QWORD *)(v15 + 16);
            if (!v15)
              goto LABEL_22;
          }
          *(_QWORD *)(a3 + 8) = v15;
          *(_DWORD *)a3 |= 0x10u;
          v16 = sub_10028547C(a1, v13);
          if (!v16)
            goto LABEL_35;
        }
        else
        {
LABEL_22:
          *(_QWORD *)(a3 + 8) = 0;
          v16 = sub_10028547C(a1, v13);
          if (!v16)
            goto LABEL_35;
        }
      }
    }
    else
    {
      v16 = sub_10028547C(a1, v7);
      if (!v16)
        goto LABEL_35;
    }
    v7 = v16;
    if (*(_DWORD *)(a1 + 152))
      break;
    v17 = *v16;
    if (v17 != 44)
    {
      if (v17 != 125)
      {
        sprintf(v22, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unexpected character");
        sub_100295298(-212, "icvJSONParseMap", v22, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3796);
      }
      return v7 + 1;
    }
    v7 = sub_10028547C(a1, v16 + 1);
    if (!v7)
      goto LABEL_35;
  }
  if (*v7 != 125)
  {
    sprintf(v22, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'}' - right-brace of map is missing");
    sub_100295298(-212, "icvJSONParseMap", v22, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3803);
  }
  return v7 + 1;
}

char *sub_100285B14(uint64_t a1, _BYTE *a2, uint64_t *a3)
{
  char *v5;
  _DWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  int v10;
  char *v11;
  char *v12;
  int v13;
  char v15[1024];

  if (*a2 != 91)
  {
    sprintf(v15, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'[' - left-brace of seq is missing");
    sub_100295298(-212, "icvJSONParseSeq", v15, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3682);
  }
  v5 = a2 + 1;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  v6 = sub_10021E968(0, 0x60uLL, 0x20uLL, *(_QWORD *)(a1 + 16));
  v7 = (uint64_t)v6;
  if ((*(_BYTE *)a3 & 7) != 0)
    sub_10021FC6C((uint64_t)v6, a3);
  a3[2] = v7;
  *(_DWORD *)a3 = 5;
  sub_10021EB30(v7, 8);
  v8 = sub_10028547C(a1, v5);
  if (!v8)
  {
LABEL_21:
    sprintf(v15, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "ptr is NULL");
    sub_100295298(-212, "icvJSONParseSeq", v15, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3720);
  }
  while (!*(_DWORD *)(a1 + 152))
  {
    if (*v8 != 93)
    {
      v9 = (uint64_t *)sub_10021FC6C(a3[2], 0);
      v10 = *v8;
      if (v10 == 123)
      {
        v11 = (char *)sub_100285720(a1, v8, v9);
      }
      else if (v10 == 91)
      {
        v11 = (char *)sub_100285B14(a1, v8, v9);
      }
      else
      {
        v11 = sub_10028608C(a1, v8, v9);
      }
      v8 = v11;
    }
    v12 = sub_10028547C(a1, v8);
    v8 = v12;
    if (!v12)
      goto LABEL_21;
    if (*(_DWORD *)(a1 + 152))
      break;
    v13 = *v12;
    if (v13 != 44)
    {
      if (v13 != 93)
      {
        sprintf(v15, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unexpected character");
        sub_100295298(-212, "icvJSONParseSeq", v15, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3716);
      }
      return v8 + 1;
    }
    v8 = sub_10028547C(a1, v12 + 1);
    if (!v8)
      goto LABEL_21;
  }
  if (*v8 != 93)
  {
    sprintf(v15, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "']' - right-brace of seq is missing");
    sub_100295298(-212, "icvJSONParseSeq", v15, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3723);
  }
  return v8 + 1;
}

char *sub_100285DFC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  char *result;
  char *v12;
  unint64_t v13;
  char *v14;
  BOOL v15;
  _DWORD *v16;
  uint64_t v17;
  char v18[1024];

  if (*(_BYTE *)a2 != 34)
  {
    sprintf(v18, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Key must start with '\"'");
    sub_100295298(-212, "icvJSONParseKey", v18, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3379);
  }
  v8 = -8;
  do
    v9 = *(unsigned __int8 *)(a2 + v8++ + 9);
  while (v9 >= 0x20 && v9 != 34);
  v10 = a2 + v8;
  if (v9 != 34)
  {
    sprintf(v18, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Key must end with '\"'");
    sub_100295298(-212, "icvJSONParseKey", v18, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3388);
  }
  result = sub_10028547C(a1, (char *)(v10 + 9));
  if (result)
  {
    if (*(_DWORD *)(a1 + 152))
    {
      return 0;
    }
    else
    {
      v12 = result;
      v13 = v10 + 7;
      if (*result != 58)
      {
        sprintf(v18, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Missing ':' between key and value");
        sub_100295298(-212, "icvJSONParseKey", v18, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3397);
      }
      if (v13 <= a2)
      {
        sprintf(v18, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Key is empty");
        sub_100295298(-212, "icvJSONParseKey", v18, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3401);
      }
      v14 = (char *)(a2 + 1);
      if (!v8 && (*(_DWORD *)v14 == 1701869940 ? (v15 = *(_DWORD *)(a2 + 4) == 1684627301) : (v15 = 0), v15))
      {
        v17 = 0;
      }
      else
      {
        v16 = (_DWORD *)sub_100270168(a1, v14, (int)v8 + 7, 1);
        v17 = sub_100270304(a1, a3, v16, 1);
      }
      *a4 = v17;
      return v12 + 1;
    }
  }
  return result;
}

char *sub_10028608C(uint64_t a1, char *a2, uint64_t *a3)
{
  char *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  std::string *v9;
  int v10;
  std::string *v13;
  char *v14;
  std::string::value_type v15;
  char *v16;
  int v17;
  std::string *v18;
  unsigned int v19;
  uint64_t v20;
  std::string *v21;
  std::string *v22;
  char *v23;
  int v24;
  std::string::size_type size;
  unsigned __int8 *v27;
  _BYTE *v28;
  void *v29;
  unsigned __int8 v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned int v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned int v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned int v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned int v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned int v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned int v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned int v52;
  unsigned __int8 v53;
  uint64_t v54;
  std::string::reference v55;
  std::string::size_type v56;
  unint64_t v57;
  size_t v58;
  size_t v59;
  uint64_t v60;
  size_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  int v65;
  unsigned __int8 *v66;
  int v67;
  _OWORD *v68;
  _OWORD *v69;
  const char *v70;
  int v71;
  int v72;
  _DWORD *v73;
  uint64_t v74;
  char *v75;
  _DWORD *v76;
  uint64_t v77;
  BOOL v78;
  _DWORD *v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  unsigned __int8 *v84;
  uint64_t v85;
  char *v87;
  char *v88;
  char *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  std::string v93;
  char *__endptr;
  char v95[8];
  char *v96;
  void *v97;
  void *v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;

  v5 = sub_10028547C(a1, a2);
  v6 = (unint64_t)v5;
  __endptr = v5;
  if (!v5 || *(_DWORD *)(a1 + 152))
  {
    sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unexpected End-Of-File");
    sub_100295298(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3421);
  }
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  v7 = *v5;
  if (v7 == 34)
  {
    v8 = 0;
    v9 = (std::string *)(v5 + 1);
    while (1)
    {
      v10 = v9->__r_.__value_.__s.__data_[v8];
      if ((v10 - 48) >= 0xA && (v10 & 0xFFFFFFDF) - 65 >= 0x1A)
        break;
      if (v8 > 9)
        goto LABEL_19;
LABEL_7:
      ++v8;
    }
    if (v10 == 36 && v8 < 0xA)
      goto LABEL_7;
    if (v8 < 8)
      goto LABEL_20;
LABEL_19:
    if (v9->__r_.__value_.__r.__words[0] != 0x2434366573616224)
    {
LABEL_20:
      memset(&v93, 0, sizeof(v93));
      std::string::reserve(&v93, 0x20000uLL);
      __endptr = (char *)(v6 + 1);
      while (1)
      {
        v13 = v9;
LABEL_22:
        switch(v13->__r_.__value_.__s.__data_[0])
        {
          case 0:
            sub_1002835A4(&v93, v9, v13);
            v9 = (std::string *)sub_100272C98((_QWORD *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)));
            __endptr = (char *)v9;
            if (!v9)
            {
              sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'\"' - right-quote of string is missing");
              sub_100295298(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3582);
            }
            continue;
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xB:
          case 0xC:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
            goto LABEL_25;
          case 0xA:
          case 0xD:
            sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'\"' - right-quote of string is missing");
            sub_100295298(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3597);
          case 0x22:
            sub_1002835A4(&v93, v9, v13);
            if (*__endptr != 34)
            {
              sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'\"' - right-quote of string is missing");
              sub_100295298(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3609);
            }
            ++__endptr;
            if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v18 = &v93;
            else
              v18 = (std::string *)v93.__r_.__value_.__r.__words[0];
            if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v19 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
            else
              v19 = v93.__r_.__value_.__r.__words[1];
            a3[2] = sub_10021E8FC(*(_QWORD *)(a1 + 16), (char *)v18, v19);
            a3[3] = v20;
            *(_DWORD *)a3 = 3;
            goto LABEL_60;
          default:
            if (v13->__r_.__value_.__s.__data_[0] != 92)
            {
LABEL_25:
              v13 = (std::string *)((char *)v13 + 1);
              __endptr = (char *)v13;
              goto LABEL_22;
            }
            sub_1002835A4(&v93, v9, v13);
            v14 = __endptr;
            v15 = __endptr[1];
            switch(v15)
            {
              case '"':
              case '\'':
              case '\\':
                break;
              case 'b':
                v15 = 8;
                break;
              case 'f':
                v15 = 12;
                break;
              case 'n':
                v15 = 10;
                break;
              case 'r':
                v15 = 13;
                break;
              case 't':
                v15 = 9;
                break;
              case 'u':
                sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'\\uXXXX' currently not supported");
                sub_100295298(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3568);
              default:
                sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid escape character");
                sub_100295298(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3569);
            }
            std::string::append(&v93, 1uLL, v15);
            v9 = (std::string *)(v14 + 2);
            __endptr = (char *)v9;
            break;
        }
      }
    }
    v21 = (std::string *)(v5 + 9);
    __endptr = v5 + 9;
    memset(&v93, 0, sizeof(v93));
    std::string::reserve(&v93, 0x20000uLL);
    while (2)
    {
      v22 = v21;
LABEL_64:
      switch(v22->__r_.__value_.__s.__data_[0])
      {
        case 0:
          sub_1002835A4(&v93, v21, v22);
          v21 = (std::string *)sub_100272C98((_QWORD *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)));
          __endptr = (char *)v21;
          if (!v21)
          {
            sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'\"' - right-quote of string is missing");
            sub_100295298(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3451);
          }
          continue;
        case 0xA:
        case 0xD:
          sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'\"' - right-quote of string is missing");
          sub_100295298(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3466);
        case 0x22:
          sub_1002835A4(&v93, v21, v22);
          if (*__endptr != 34)
          {
            sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'\"' - right-quote of string is missing");
            sub_100295298(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3478);
          }
          ++__endptr;
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          {
            size = v93.__r_.__value_.__l.__size_;
            if (v93.__r_.__value_.__l.__size_ > 0x1F)
            {
              v27 = (unsigned __int8 *)v93.__r_.__value_.__r.__words[0];
LABEL_88:
              v90 = 0;
              v91 = 0;
              v92 = 0;
              v28 = operator new(0x19uLL);
              v29 = v28;
              v88 = v28 + 25;
              v89 = v28 + 25;
              memset(v28, 32, 25);
              v87 = v28;
              if (v27)
              {
                v30 = byte_1003BD124[v27[1]];
                v31 = byte_1003BD124[v27[2]];
                v32 = byte_1003BD124[v27[3]];
                *v28 = (4 * byte_1003BD124[*v27]) | (v30 >> 4) & 3;
                v28[1] = (16 * v30) | (v31 >> 2) & 0xF;
                v28[2] = v32 | ((_BYTE)v31 << 6);
                v33 = byte_1003BD124[v27[5]];
                v34 = byte_1003BD124[v27[6]];
                v35 = byte_1003BD124[v27[7]];
                v28[3] = (4 * byte_1003BD124[v27[4]]) | (v33 >> 4) & 3;
                v28[4] = (16 * v33) | (v34 >> 2) & 0xF;
                v28[5] = v35 | ((_BYTE)v34 << 6);
                v36 = byte_1003BD124[v27[9]];
                v37 = byte_1003BD124[v27[10]];
                v38 = byte_1003BD124[v27[11]];
                v28[6] = (4 * byte_1003BD124[v27[8]]) | (v36 >> 4) & 3;
                v28[7] = (16 * v36) | (v37 >> 2) & 0xF;
                v28[8] = v38 | ((_BYTE)v37 << 6);
                v39 = byte_1003BD124[v27[13]];
                v40 = byte_1003BD124[v27[14]];
                v41 = byte_1003BD124[v27[15]];
                v28[9] = (4 * byte_1003BD124[v27[12]]) | (v39 >> 4) & 3;
                v28[10] = (16 * v39) | (v40 >> 2) & 0xF;
                v28[11] = v41 | ((_BYTE)v40 << 6);
                v42 = byte_1003BD124[v27[17]];
                v43 = byte_1003BD124[v27[18]];
                v44 = byte_1003BD124[v27[19]];
                v28[12] = (4 * byte_1003BD124[v27[16]]) | (v42 >> 4) & 3;
                v28[13] = (16 * v42) | (v43 >> 2) & 0xF;
                v28[14] = v44 | ((_BYTE)v43 << 6);
                v45 = byte_1003BD124[v27[21]];
                v46 = byte_1003BD124[v27[22]];
                v47 = byte_1003BD124[v27[23]];
                v28[15] = (4 * byte_1003BD124[v27[20]]) | (v45 >> 4) & 3;
                v28[16] = (16 * v45) | (v46 >> 2) & 0xF;
                v28[17] = v47 | ((_BYTE)v46 << 6);
                v48 = byte_1003BD124[v27[25]];
                v49 = byte_1003BD124[v27[26]];
                v50 = byte_1003BD124[v27[27]];
                v28[18] = (4 * byte_1003BD124[v27[24]]) | (v48 >> 4) & 3;
                v28[19] = (16 * v48) | (v49 >> 2) & 0xF;
                v28[20] = v50 | ((_BYTE)v49 << 6);
                v51 = byte_1003BD124[v27[29]];
                v52 = byte_1003BD124[v27[30]];
                v53 = byte_1003BD124[v27[31]];
                v28[21] = (4 * byte_1003BD124[v27[28]]) | (v51 >> 4) & 3;
                v28[22] = (16 * v51) | (v52 >> 2) & 0xF;
                *(_WORD *)(v28 + 23) = (v53 | ((_BYTE)v52 << 6));
              }
              if (!sub_10027EE90((const char **)&v87, (uint64_t)&v90))
                goto LABEL_94;
              v54 = HIBYTE(v92);
              if (v92 < 0)
                v54 = v91;
              if (!v54)
              {
LABEL_94:
                sub_100295298(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3493);
              }
              operator delete(v29);
              v55 = std::string::at(&v93, 0x20uLL);
              v56 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
              if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v56 = v93.__r_.__value_.__l.__size_;
              if (v56 < 0x21)
              {
                v76 = sub_10021E968(0, 0x60uLL, 0x20uLL, *(_QWORD *)(a1 + 16));
                v77 = (uint64_t)v76;
                if ((*(_BYTE *)a3 & 7) != 0)
                  sub_10021FC6C((uint64_t)v76, a3);
                a3[2] = v77;
                *(_DWORD *)a3 = 13;
                sub_10021EB30(v77, 8);
              }
              else
              {
                v57 = (unint64_t)v55;
                v58 = &v27[size] - (unsigned __int8 *)v55;
                v59 = v58;
                if (!v58)
                {
                  v59 = strlen((const char *)v57);
                  if (!v59)
                    goto LABEL_101;
                }
                if ((v59 & 3) != 0)
                  goto LABEL_101;
                v81 = v57 + v59;
                if (*(_BYTE *)(v57 + v59 - 1) == 61)
                {
                  v82 = *(unsigned __int8 *)(v81 - 2);
                  v81 -= 2;
                  if (v82 != 61)
                    v81 = v57 + v59 - 1;
                }
                if (v57 < v81)
                {
                  v83 = v81 - v57;
                  v84 = (unsigned __int8 *)v57;
                  while (1)
                  {
                    v85 = *v84;
                    if (v85 > 0x7E)
                      break;
                    if ((_DWORD)v85 != 65 && byte_1003BD124[v85] == 0)
                      break;
                    ++v84;
                    if (!--v83)
                      goto LABEL_102;
                  }
LABEL_101:
                  sub_10027076C(*(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "icvJSONParseValue", "Invalid Base64 data.", 3502);
                }
LABEL_102:
                v60 = 3 * (v58 >> 2);
                v87 = 0;
                v88 = 0;
                v89 = 0;
                v61 = v60 + 1;
                if (v60 + 1 < 0)
                  sub_100008F3C();
                v62 = (char *)operator new(v60 + 1);
                v63 = &v62[v61];
                v87 = v62;
                v89 = &v62[v61];
                bzero(v62, v61);
                v88 = &v62[v61];
                v64 = v57 + v58;
                v65 = 3 * (v58 >> 2) + 1;
                v66 = &v27[size + ~v57];
                do
                {
                  v67 = v66[v57];
                  --v65;
                  --v66;
                }
                while (v67 == 61);
                *(_QWORD *)v95 = v62;
                v96 = v63;
                v68 = operator new(0x78uLL);
                v98 = (char *)v68 + 120;
                v99 = (char *)v68 + 120;
                *v68 = 0u;
                v68[1] = 0u;
                v68[2] = 0u;
                v68[3] = 0u;
                v68[4] = 0u;
                v68[5] = 0u;
                v68[6] = 0u;
                *((_QWORD *)v68 + 14) = 0;
                v97 = v68;
                v100 = 0u;
                v101 = 0u;
                v102 = 0u;
                v69 = operator new(0xA1uLL);
                *v69 = 0u;
                v69[1] = 0u;
                v69[2] = 0u;
                v69[3] = 0u;
                v69[4] = 0u;
                v69[5] = 0u;
                v69[6] = 0u;
                v69[7] = 0u;
                v69[8] = 0u;
                v69[9] = 0u;
                *((_BYTE *)v69 + 160) = 0;
                *(_QWORD *)&v102 = (char *)v69 + 161;
                *((_QWORD *)&v102 + 1) = (char *)v69 + 161;
                *(_QWORD *)&v100 = v69;
                *((_QWORD *)&v100 + 1) = v69;
                *(_QWORD *)&v101 = (char *)v69 + 120;
                *((_QWORD *)&v101 + 1) = v69;
                sub_10027F728((uint64_t)v95, v57, v64);
                sub_10027F414((uint64_t)v95);
                if (*((_QWORD *)&v100 + 1) != (_QWORD)v100)
                  sub_10027F414((uint64_t)v95);
                if (*((_QWORD *)&v101 + 1))
                {
                  *(_QWORD *)&v102 = *((_QWORD *)&v101 + 1);
                  operator delete(*((void **)&v101 + 1));
                }
                if (v97)
                {
                  v98 = v97;
                  operator delete(v97);
                }
                if (v92 >= 0)
                  v70 = (const char *)&v90;
                else
                  v70 = (const char *)v90;
                v71 = sub_100278E5C(v70);
                v72 = v65 / v71;
                if (v65 % v71)
                  sub_10027076C(*(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "icvJSONParseValue", "Byte size not match elememt size", 3520);
                v73 = sub_10021E968(0, 0x60uLL, 0x20uLL, *(_QWORD *)(a1 + 16));
                v74 = (uint64_t)v73;
                if ((*(_BYTE *)a3 & 7) != 0)
                  sub_10021FC6C((uint64_t)v73, a3);
                a3[2] = v74;
                *(_DWORD *)a3 = 13;
                sub_10021EB30(v74, 8);
                if (v92 >= 0)
                  v75 = (char *)&v90;
                else
                  v75 = (char *)v90;
                sub_100280018((uint64_t)v62, v72, v75, a3[2]);
                operator delete(v62);
              }
              if (SHIBYTE(v92) < 0)
                operator delete(v90);
LABEL_60:
              if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v93.__r_.__value_.__l.__data_);
              return __endptr;
            }
          }
          else
          {
            size = HIBYTE(v93.__r_.__value_.__r.__words[2]);
            if (HIBYTE(v93.__r_.__value_.__r.__words[2]) > 0x1Fu)
            {
              v27 = (unsigned __int8 *)&v93;
              goto LABEL_88;
            }
          }
          if (size)
          {
            sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unrecognized Base64 header");
            sub_100295298(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3540);
          }
          v79 = sub_10021E968(0, 0x60uLL, 0x20uLL, *(_QWORD *)(a1 + 16));
          v80 = (uint64_t)v79;
          if ((*(_BYTE *)a3 & 7) != 0)
            sub_10021FC6C((uint64_t)v79, a3);
          a3[2] = v80;
          *(_DWORD *)a3 = 13;
          sub_10021EB30(v80, 8);
          goto LABEL_60;
        default:
          v22 = (std::string *)((char *)v22 + 1);
          __endptr = (char *)v22;
          goto LABEL_64;
      }
    }
  }
  v16 = v5;
  if ((v7 - 48) < 0xA)
  {
LABEL_72:
    if ((v7 - 48) <= 9)
    {
      v23 = v16 + 1;
      do
      {
        __endptr = v23;
        v24 = *v23++;
        v7 = v24;
      }
      while ((v24 - 48) < 0xA);
    }
    if (v7 != 101 && v7 != 46)
    {
      *((_DWORD *)a3 + 4) = strtol(v5, &__endptr, 0);
      *(_DWORD *)a3 = 1;
      if (v6 < (unint64_t)__endptr)
        return __endptr;
LABEL_80:
      sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid numeric value (inconsistent explicit type specification?)");
      sub_100295298(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3641);
    }
LABEL_77:
    *((double *)a3 + 2) = sub_100283364(a1, v5, &__endptr);
    *(_DWORD *)a3 = 2;
    if (v6 < (unint64_t)__endptr)
      return __endptr;
    goto LABEL_80;
  }
  if (v7 == 43 || v7 == 45)
  {
    v16 = v5 + 1;
    __endptr = v5 + 1;
    v7 = v5[1];
    goto LABEL_72;
  }
  if (v7 == 46)
    goto LABEL_77;
  if ((v7 & 0xFFFFFFDF) - 65 >= 0x1A)
    goto LABEL_157;
  __endptr = v5 + 1;
  if ((v5[1] & 0xDFu) - 65 > 0x19)
    goto LABEL_157;
  __endptr = v5 + 2;
  if ((v5[2] & 0xDFu) - 65 > 0x19)
    goto LABEL_157;
  __endptr = v5 + 3;
  if ((v5[3] & 0xDFu) - 65 > 0x19)
    goto LABEL_157;
  __endptr = v5 + 4;
  if ((v5[4] & 0xDFu) - 65 > 0x19)
  {
    v17 = 0;
  }
  else
  {
    __endptr = v5 + 5;
    if ((v5[5] & 0xDFu) - 65 <= 0x19)
    {
      __endptr = v5 + 6;
      if ((v5[6] & 0xDFu) - 65 <= 0x19)
        __endptr = v5 + 7;
    }
    v17 = 1;
  }
  if (*(_DWORD *)v5 == 1819047278)
    sub_10027076C(*(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "icvJSONParseValue", "Value 'null' is not supported by this parser", 3652);
  if (*(_DWORD *)v5 == 1702195828)
  {
    *((_DWORD *)a3 + 4) = 1;
    *(_DWORD *)a3 = 1;
    return __endptr;
  }
  if (!v17 || (*(_DWORD *)v5 == 1936482662 ? (v78 = v5[4] == 101) : (v78 = 0), !v78))
  {
LABEL_157:
    sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unrecognized value");
    sub_100295298(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3666);
  }
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)a3 = 1;
  return __endptr;
}

void sub_100286F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10028707C(const char *a1)
{
  uint64_t v3[2];
  int v4;
  int v5;

  if (sub_100277198(a1, &v4) != 1 || v4 >= 5)
  {
    v3[0] = 0;
    v3[1] = 0;
    qmemcpy((void *)sub_10029430C(v3, 33), "Too complex format for the matrix", 33);
    sub_100294B74(-2, v3, "icvDecodeSimpleFormat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4785);
  }
  return (v5 & 7 | (8 * v4)) - 8;
}

void sub_10028713C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10028716C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v9;
  unsigned int v10;
  char *v11;
  uint64_t i;
  _QWORD v14[2];
  char v15[128];
  char __s[128];

  v14[0] = a4;
  v14[1] = a5;
  sub_100275840(a1, a2, 6, (uint64_t)"opencv-sequence");
  if ((a6 & 0x80000000) == 0)
    sub_10027638C(a1, (uint64_t)"level", a6);
  v9 = sub_1002873BC((unsigned int *)a3, "dt", (uint64_t)v14, 0, v15);
  __s[0] = 0;
  v10 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 & 0x4000) != 0)
  {
    *(_QWORD *)&__s[strlen(__s)] = 0x6465736F6C6320;
    if ((v10 & 0x8000) == 0)
    {
LABEL_5:
      if ((v10 & 0x3000) != 0x1000)
        goto LABEL_6;
LABEL_10:
      strcat(__s, " curve");
      if ((v10 & 0xFFF) != 0)
        goto LABEL_13;
      goto LABEL_11;
    }
  }
  else if ((v10 & 0x8000) == 0)
  {
    goto LABEL_5;
  }
  strcat(__s, " hole");
  if ((v10 & 0x3000) == 0x1000)
    goto LABEL_10;
LABEL_6:
  if ((v10 & 0xFFF) != 0)
    goto LABEL_13;
LABEL_11:
  if (*(_DWORD *)(a3 + 44) != 1)
    strcat(__s, " untyped");
LABEL_13:
  if (__s[0])
    v11 = &__s[1];
  else
    v11 = __s;
  sub_1002764D4(a1, (uint64_t)"flags", (uint64_t)v11, 1);
  sub_10027638C(a1, (uint64_t)"count", *(unsigned int *)(a3 + 40));
  sub_1002764D4(a1, (uint64_t)"dt", (uint64_t)v9, 0);
  sub_100287720(a1, (int *)a3, (uint64_t)v14, 96);
  sub_100275840(a1, "data", 13, 0);
  for (i = *(_QWORD *)(a3 + 88); i; i = *(_QWORD *)(i + 8))
  {
    sub_10027662C(a1, *(_QWORD *)(i + 24), *(_DWORD *)(i + 20), v9);
    if (i == **(_QWORD **)(a3 + 88))
      break;
  }
  sub_10027623C(a1);
  return sub_10027623C(a1);
}

char *sub_1002873BC(unsigned int *a1, char *__s1, uint64_t a3, int a4, char *a5)
{
  uint64_t v8;
  const char **v10;
  int v11;
  const char *v12;
  const char *v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;

  if (!a3)
    goto LABEL_16;
  v8 = a3;
  while (1)
  {
    v10 = *(const char ***)v8;
    if (!*(_QWORD *)v8)
      goto LABEL_16;
    if (*v10)
      break;
LABEL_3:
    v8 = *(_QWORD *)(v8 + 8);
    if (!v8)
      goto LABEL_16;
  }
  v11 = 0;
  if (strcmp(__s1, *v10))
  {
    do
    {
      v11 += 2;
      v12 = v10[v11];
      if (!v12)
        goto LABEL_3;
    }
    while (strcmp(__s1, v12));
  }
  v13 = v10[v11 | 1u];
  if (!v13)
  {
LABEL_16:
    v18 = *a1;
    v19 = a1[11];
    if ((*a1 & 0xFFF) != 0 || v19 == 1)
    {
      v20 = ((v18 >> 3) & 0x1FF) + 1;
      if (v20 << ((0xFA50u >> (2 * (v18 & 7))) & 3) != v19)
      {
        v23 = 0;
        v24 = 0;
        qmemcpy((void *)sub_10029430C(&v23, 68), "Size of sequence element (elem_size) is inconsistent with seq->flags", 68);
        sub_100294B74(-209, &v23, "icvGetFormat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5825);
      }
      sprintf(a5, "%d%c", v20, aUcwsifdr[v18 & 7]);
      if (a5[2])
        return a5;
      else
        return &a5[*a5 == 49];
    }
    else if (v19 <= a4)
    {
      return 0;
    }
    else
    {
      if ((((_BYTE)v19 - (_BYTE)a4) & 3) != 0)
        sprintf(a5, "%uu");
      else
        sprintf(a5, "%ui");
      return a5;
    }
  }
  v14 = sub_100277198(v10[v11 | 1u], &v23);
  v15 = a4;
  if (v14 >= 1)
  {
    v16 = 0;
    v15 = a4;
    do
    {
      v17 = (((*((_DWORD *)&v23 + v16 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v23 + v16 + 1) & 7))) & 3);
      v15 = ((v15 + v17 - 1) & -v17) + v17 * *((_DWORD *)&v23 + v16);
      v16 += 2;
    }
    while (v16 < (2 * v14));
  }
  if (a4)
  {
    if (v15 == a1[11])
      return (char *)v13;
LABEL_24:
    v23 = 0;
    v24 = 0;
    qmemcpy((void *)sub_10029430C(&v23, 71), "The size of element calculated from \"dt\" and the elem_size do not match", 71);
    sub_100294B74(-209, &v23, "icvGetFormat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5819);
  }
  v21 = (((HIDWORD(v23) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (BYTE4(v23) & 7))) & 3);
  if (((v15 + v21 - 1) & -v21) != a1[11])
    goto LABEL_24;
  return (char *)v13;
}

void sub_1002876D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100287720(uint64_t result, int *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char **v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  int v21;
  const char *v22;
  uint64_t v23;
  char v24[128];
  uint64_t v25[64];

  v6 = result;
  if (!a3)
    goto LABEL_18;
  v7 = a3;
  v8 = 1;
  while (1)
  {
    v9 = *(const char ***)v7;
    if (!*(_QWORD *)v7)
      goto LABEL_18;
    if (*v9)
      break;
LABEL_3:
    v7 = *(_QWORD *)(v7 + 8);
    if (!v7)
      goto LABEL_18;
  }
  result = strcmp("header_dt", *v9);
  if ((_DWORD)result)
  {
    LODWORD(v10) = 1;
    do
    {
      v11 = v9[(v10 + 1)];
      if (!v11)
        goto LABEL_3;
      result = strcmp("header_dt", v11);
      v10 = (v10 + 2);
    }
    while ((_DWORD)result);
    v8 = v10;
  }
  v12 = (char *)v9[v8];
  if (v12)
  {
    v13 = sub_100277198(v9[v8], v25);
    v14 = a4;
    if (v13 >= 1)
    {
      v15 = 0;
      v14 = a4;
      do
      {
        v16 = (((HIDWORD(v25[v15 / 2]) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (HIDWORD(v25[v15 / 2]) & 7))) & 3);
        v14 = ((v14 + v16 - 1) & -v16) + v16 * LODWORD(v25[v15 / 2]);
        v15 += 2;
      }
      while (v15 < (2 * v13));
    }
    if (a4)
    {
      if (v14 <= a2[1])
        goto LABEL_37;
LABEL_28:
      v25[0] = 0;
      v25[1] = 0;
      qmemcpy((void *)sub_10029430C(v25, 74), "The size of header calculated from \"header_dt\" is greater than header_size", 74);
      sub_100294B74(-209, v25, "icvWriteHeaderData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5755);
    }
    v21 = (((HIDWORD(v25[0]) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (BYTE4(v25[0]) & 7))) & 3);
    if (((v14 + v21 - 1) & -v21) > a2[1])
      goto LABEL_28;
  }
  else
  {
LABEL_18:
    v17 = a2[1];
    v18 = v17 - a4;
    if (v17 <= a4)
      return result;
    v19 = *a2;
    if (HIWORD(*a2) == 17049)
    {
      v20 = v17 == 128 && (*a2 & 0xFFE) == 12;
      if (v20 && a2[11] == 8)
      {
        sub_100275840(v6, "rect", 14, 0);
        sub_10027638C(v6, (uint64_t)"x", a2[24]);
        sub_10027638C(v6, (uint64_t)"y", a2[25]);
        sub_10027638C(v6, (uint64_t)"width", a2[26]);
        sub_10027638C(v6, (uint64_t)"height", a2[27]);
        sub_10027623C(v6);
        return sub_10027638C(v6, (uint64_t)"color", a2[28]);
      }
      if ((v19 & 0xFFFF3000) == 0x42991000 && (v19 & 0xFFF) == 0 && a2[11] == 1)
      {
        sub_100275840(v6, "origin", 14, 0);
        sub_10027638C(v6, (uint64_t)"x", a2[24]);
        sub_10027638C(v6, (uint64_t)"y", a2[25]);
        return sub_10027623C(v6);
      }
    }
    if ((v18 & 3) != 0)
    {
      v23 = (v17 - a4);
      v22 = "%uu";
    }
    else
    {
      v23 = v18 >> 2;
      v22 = "%ui";
    }
    v12 = v24;
    sprintf(v24, v22, v23);
  }
LABEL_37:
  sub_1002764D4(v6, (uint64_t)"header_dt", (uint64_t)v12, 0);
  sub_100275840(v6, "header_user_data", 13, 0);
  sub_10027662C(v6, (uint64_t)(a2 + 24), 1, v12);
  return sub_10027623C(v6);
}

void sub_100287B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100287B60(int **a1, int **a2, unsigned int *a3)
{
  uint64_t v3;
  int *v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;

  v3 = *a3;
  if ((int)v3 < 1)
    return 0;
  v4 = *a1;
  v5 = *a2;
  while (1)
  {
    v7 = *v4++;
    v6 = v7;
    v8 = *v5++;
    result = (v6 - v8);
    if (v6 != v8)
      break;
    if (!--v3)
      return 0;
  }
  return result;
}

_QWORD *sub_100287B94(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  *a1 = a2;
  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  v5 = operator new(0x30uLL);
  *v4 = v5;
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  a1[2] = v5 + 3;
  a1[3] = v5 + 3;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  v6 = operator new(0x41uLL);
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  *((_BYTE *)v6 + 64) = 0;
  a1[4] = v6;
  a1[5] = (char *)v6 + 65;
  a1[6] = (char *)v6 + 65;
  a1[7] = v5;
  a1[8] = v5;
  a1[9] = v5 + 3;
  if (!a2 || *(_DWORD *)a2 != 1280131417)
  {
    v16 = 0;
    v17 = 0;
    qmemcpy((void *)sub_10029430C(&v16, 31), "Invalid pointer to file storage", 31);
    if (a2)
      v7 = -5;
    else
      v7 = -27;
    sub_100294B74(v7, &v16, "Base64ContextEmitter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 7900);
  }
  if (!*(_DWORD *)(a2 + 8))
  {
    v16 = 0;
    v17 = 0;
    qmemcpy((void *)sub_10029430C(&v16, 38), "The file storage is opened for reading", 38);
    sub_100294B74(-2, &v16, "Base64ContextEmitter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 7900);
  }
  if (*(_DWORD *)(a2 + 4) == 24)
  {
    v8 = *(_BYTE **)(a2 + 120);
    *(_QWORD *)(a2 + 120) = v8 + 1;
    *v8 = 0;
    sub_100272B2C((_QWORD *)a2, *(char **)(a2 + 128));
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a2 + 128);
    bzero(*(void **)(*a1 + 128), *(int *)(*a1 + 88));
    sub_100272B2C((_QWORD *)a2, "\"$base64$");
  }
  else
  {
    v9 = *a1;
    v11 = *(char **)(*a1 + 120);
    v10 = *(char **)(*a1 + 128);
    v12 = *(int *)(*a1 + 88);
    if (v11 > &v10[v12])
    {
      *(_WORD *)v11 = 10;
      sub_100272B2C((_QWORD *)v9, *(char **)(v9 + 128));
      v10 = *(char **)(v9 + 128);
      LODWORD(v12) = *(_DWORD *)(v9 + 88);
    }
    v13 = *(_DWORD *)(v9 + 64);
    if ((_DWORD)v12 == v13)
    {
      v14 = (int)v12;
    }
    else
    {
      v14 = v13;
      memset(v10, 32, v13);
      *(_DWORD *)(v9 + 88) = v13;
      v10 = *(char **)(v9 + 128);
    }
    *(_QWORD *)(v9 + 120) = &v10[v14];
  }
  return a1;
}

void sub_100287DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void **v11;
  void *v13;
  void *v14;

  sub_10029434C(&a9);
  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v9 + 40) = v13;
    operator delete(v13);
    v14 = *v10;
    if (!*v10)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v14 = *v10;
    if (!*v10)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 16) = v14;
  operator delete(v14);
  _Unwind_Resume(a1);
}

uint64_t *sub_100287E44(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  const char *v12;
  int v13;
  uint64_t v15;
  uint64_t v16;

  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = a2;
  if (!a2)
  {
    v15 = 0;
    v16 = 0;
    v7 = sub_10029430C(&v15, 3);
    *(_BYTE *)(v7 + 2) = 99;
    *(_WORD *)v7 = 29299;
    sub_100294B74(-215, &v15, "RawDataToBinaryConvertor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8036);
  }
  v8 = *(unsigned __int8 *)(a4 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (!v8)
  {
    v15 = 0;
    v16 = 0;
    v9 = sub_10029430C(&v15, 11);
    *(_DWORD *)(v9 + 7) = 690518388;
    *(_QWORD *)v9 = *(_QWORD *)"!dt.empty()";
    sub_100294B74(-215, &v15, "RawDataToBinaryConvertor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8037);
  }
  if (a3 <= 0)
  {
    v15 = 0;
    v16 = 0;
    v10 = (_DWORD *)sub_10029430C(&v15, 7);
    *(_DWORD *)((char *)v10 + 3) = 807419424;
    *v10 = 544105836;
    sub_100294B74(-215, &v15, "RawDataToBinaryConvertor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8038);
  }
  sub_100288048(a1, a4);
  v11 = *a1;
  a1[1] = *a1;
  a1[2] = v11;
  if (*(char *)(a4 + 23) >= 0)
    v12 = (const char *)a4;
  else
    v12 = *(const char **)a4;
  v13 = sub_100278E5C(v12);
  a1[2] = *a1 + v13 * (uint64_t)a3;
  a1[3] = v13;
  return a1;
}

void sub_100287FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  sub_10029434C(&a9);
  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100288048(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[10];
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v33 = 0;
  v32 = 0;
  sub_10027F024((uint64_t)v28, a2, 8);
  v3 = *(_QWORD *)(v28[0] - 24);
  if ((*((_BYTE *)&v29[2] + v3) & 2) == 0)
  {
    v4 = 0;
    v5 = a1 + 4;
LABEL_4:
    v6 = (_QWORD *)std::istream::operator>>(v28, &v33);
    if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
    {
      std::ios_base::clear((std::ios_base *)((char *)v28 + *(_QWORD *)(v28[0] - 24)), 0);
      v33 = 1;
    }
    else if (!v33)
    {
      v26 = 0;
      v27 = 0;
      *(_QWORD *)sub_10029430C(&v26, 8) = 0x5530203E20746E63;
      sub_100294B74(-215, &v26, "make_to_binary_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8090);
    }
    v7 = sub_1002884D8(v28, &v32);
    if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)
    {
      v3 = *(_QWORD *)(v28[0] - 24);
      goto LABEL_37;
    }
    while (1)
    {
      if (!v33--)
      {
        v3 = *(_QWORD *)(v28[0] - 24);
        if ((*((_BYTE *)&v29[2] + v3) & 2) != 0)
          break;
        goto LABEL_4;
      }
      v10 = sub_1002885D8;
      v11 = 1;
      switch(v32)
      {
        case 'c':
        case 'u':
          break;
        case 'd':
          v10 = sub_100288618;
          v11 = 8;
          break;
        case 'f':
          v10 = sub_100288608;
          goto LABEL_19;
        case 'i':
          v10 = sub_1002885F8;
LABEL_19:
          v11 = 4;
          break;
        case 's':
        case 'w':
          v10 = sub_1002885E8;
          v11 = 2;
          break;
        default:
          v26 = 0;
          v27 = 0;
          v12 = sub_10029430C(&v26, 19);
          *(_DWORD *)(v12 + 15) = 578056815;
          *(_OWORD *)v12 = *(_OWORD *)"!\"type not support\"";
          sub_100294B74(-215, &v26, "make_to_binary_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8124);
      }
      v13 = (v4 + v11 - 1) & -v11;
      v15 = (_QWORD *)a1[5];
      v14 = a1[6];
      if ((unint64_t)v15 < v14)
      {
        *v15 = v13;
        v15[1] = v10;
        v8 = v15 + 2;
        goto LABEL_11;
      }
      v16 = (_QWORD *)*v5;
      v17 = ((uint64_t)v15 - *v5) >> 4;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 60)
        sub_100008F3C();
      v19 = v14 - (_QWORD)v16;
      if (v19 >> 3 > v18)
        v18 = v19 >> 3;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
        v20 = 0xFFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 60)
          sub_100008FF8();
        v21 = (char *)operator new(16 * v20);
        v22 = &v21[16 * v17];
        *(_QWORD *)v22 = v13;
        *((_QWORD *)v22 + 1) = v10;
        v23 = (uint64_t)v22;
        if (v15 == v16)
        {
LABEL_35:
          v8 = v22 + 16;
          a1[4] = v23;
          a1[5] = v22 + 16;
          a1[6] = &v21[16 * v20];
          if (!v15)
            goto LABEL_11;
LABEL_36:
          operator delete(v15);
          goto LABEL_11;
        }
      }
      else
      {
        v21 = 0;
        v22 = (char *)(16 * v17);
        *(_QWORD *)v22 = v13;
        *((_QWORD *)v22 + 1) = v10;
        v23 = 16 * v17;
        if (v15 == v16)
          goto LABEL_35;
      }
      do
      {
        *(_OWORD *)(v23 - 16) = *((_OWORD *)v15 - 1);
        v23 -= 16;
        v15 -= 2;
      }
      while (v15 != v16);
      v15 = (_QWORD *)*v5;
      v8 = v22 + 16;
      a1[4] = v23;
      a1[5] = v22 + 16;
      a1[6] = &v21[16 * v20];
      if (v15)
        goto LABEL_36;
LABEL_11:
      a1[5] = v8;
      v4 = v13 + v11;
    }
  }
LABEL_37:
  if ((*((_BYTE *)&v29[2] + v3) & 2) == 0)
  {
    v26 = 0;
    v27 = 0;
    v24 = sub_10029430C(&v26, 9);
    *(_BYTE *)(v24 + 8) = 41;
    *(_QWORD *)v24 = *(_QWORD *)"iss.eof()";
    sub_100294B74(-215, &v26, "make_to_binary_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8135);
  }
  if (v30 < 0)
    operator delete((void *)v29[8]);
  std::streambuf::~streambuf(v29);
  return std::ios::~ios(&v31);
}

void sub_10028846C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_10029434C((uint64_t *)va);
  sub_10027F390((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002884D8(_QWORD *a1, _BYTE *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  char v8;

  std::istream::sentry::sentry(&v8, a1, 0);
  if (v8)
  {
    v4 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v5 = (_BYTE *)v4[3];
    if (v5 == (_BYTE *)v4[4])
    {
      LODWORD(v4) = (*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4);
      if ((_DWORD)v4 == -1)
      {
        v6 = 6;
        goto LABEL_6;
      }
    }
    else
    {
      v4[3] = v5 + 1;
      LOBYTE(v4) = *v5;
    }
    v6 = 0;
    *a2 = (_BYTE)v4;
LABEL_6:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v6);
  }
  return a1;
}

void sub_100288584(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x100288550);
  }
  __cxa_rethrow();
}

void sub_1002885C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1002885D8(_BYTE *a1, _BYTE *a2)
{
  *a2 = *a1;
  return 1;
}

uint64_t sub_1002885E8(_WORD *a1, _WORD *a2)
{
  *a2 = *a1;
  return 2;
}

uint64_t sub_1002885F8(_DWORD *a1, _DWORD *a2)
{
  *a2 = *a1;
  return 4;
}

uint64_t sub_100288608(_DWORD *a1, _DWORD *a2)
{
  *a2 = *a1;
  return 4;
}

uint64_t sub_100288618(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return 8;
}

_QWORD **sub_100288628(_QWORD **a1)
{
  _QWORD *v2;
  _WORD *v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  if (a1[8] != a1[7])
    sub_100288730(a1);
  if (*((_DWORD *)*a1 + 1) == 24)
  {
    sub_100272B2C(*a1, "\"");
    v2 = *a1;
    v3 = (_WORD *)(*a1)[16];
    v2[15] = v3;
    v4 = *((_DWORD *)v2 + 22);
    if (v4 < 0)
    {
      *v3 = 10;
      sub_100272B2C(v2, (char *)v2[16]);
      v3 = (_WORD *)v2[16];
      v4 = *((_DWORD *)v2 + 22);
      v5 = *((_DWORD *)v2 + 16);
      if (v4 == v5)
        goto LABEL_6;
    }
    else
    {
      v5 = *((_DWORD *)v2 + 16);
      if (v4 == v5)
      {
LABEL_6:
        v6 = v4;
LABEL_9:
        v2[15] = (char *)v3 + v6;
        bzero((void *)(*a1)[16], *((int *)*a1 + 22));
        (*a1)[15] = (*a1)[16];
        goto LABEL_10;
      }
    }
    v6 = v5;
    memset(v3, 32, v5);
    *((_DWORD *)v2 + 22) = v5;
    v3 = (_WORD *)v2[16];
    goto LABEL_9;
  }
LABEL_10:
  v7 = a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  v8 = a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

BOOL sub_100288730(_QWORD **a1)
{
  _BYTE *v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char __s[2];
  char __b[80];

  v2 = sub_10027EABC((uint64_t)a1[7], a1[4], 0, (char *)a1[8] - (char *)a1[7]);
  if (v2)
  {
    a1[8] = a1[7];
    v3 = (uint64_t)*a1;
    if (*((_DWORD *)*a1 + 1) == 24)
    {
      sub_100272B2C(*a1, (char *)a1[4]);
    }
    else
    {
      strcpy(__s, "\n");
      v4 = *(int *)(v3 + 64);
      memset(__b, 32, v4);
      __b[v4] = 0;
      sub_100272B2C((_QWORD *)v3, __b);
      sub_100272B2C(*a1, (char *)a1[4]);
      sub_100272B2C(*a1, __s);
      v5 = (uint64_t)*a1;
      v7 = *(char **)(v5 + 120);
      v6 = *(char **)(v5 + 128);
      v8 = *(int *)(v5 + 88);
      if (v7 > &v6[v8])
      {
        *(_WORD *)v7 = 10;
        sub_100272B2C((_QWORD *)v5, *(char **)(v5 + 128));
        v6 = *(char **)(v5 + 128);
        LODWORD(v8) = *(_DWORD *)(v5 + 88);
      }
      v9 = *(_DWORD *)(v5 + 64);
      if ((_DWORD)v8 == v9)
      {
        v10 = (int)v8;
      }
      else
      {
        v10 = v9;
        memset(v6, 32, v9);
        *(_DWORD *)(v5 + 88) = v9;
        v6 = *(char **)(v5 + 128);
      }
      *(_QWORD *)(v5 + 120) = &v6[v10];
    }
  }
  return v2 != 0;
}

uint64_t sub_10028888C(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (!a2)
  {
    v10 = 0;
    v11 = 0;
    v7 = sub_10029430C(&v10, 3);
    *(_BYTE *)(v7 + 2) = 99;
    *(_WORD *)v7 = 29299;
    sub_100294B74(-215, &v10, "BinaryToCvSeqConvertor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8155);
  }
  if (!a4)
  {
    v10 = 0;
    v11 = 0;
    *(_WORD *)sub_10029430C(&v10, 2) = 29796;
    sub_100294B74(-215, &v10, "BinaryToCvSeqConvertor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8156);
  }
  if (a3 < 0)
  {
    v10 = 0;
    v11 = 0;
    *(_QWORD *)sub_10029430C(&v10, 8) = 0x30203D3E206E656CLL;
    sub_100294B74(-215, &v10, "BinaryToCvSeqConvertor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8157);
  }
  sub_100288A58((_QWORD *)a1, a4);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 32);
  v8 = sub_100278E5C(a4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8) + v8 * (uint64_t)a3;
  *(_QWORD *)(a1 + 24) = v8;
  return a1;
}

void sub_1002889EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  sub_10029434C(&a9);
  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100288A58(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  __int128 v32;
  uint64_t v33;
  void **__dst;
  size_t v36;
  unint64_t v37;
  _QWORD v38[2];
  _QWORD v39[10];
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v43 = 0;
  v42 = 0;
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_10022EEEC();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v36 = v5;
    v37 = v8 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v37) = v4;
  p_dst = (void **)&__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  sub_10027F024((uint64_t)v38, (uint64_t)&__dst, 8);
  if (SHIBYTE(v37) < 0)
    operator delete(__dst);
  v9 = *(_QWORD *)(v38[0] - 24);
  if ((*((_BYTE *)&v39[2] + v9) & 2) == 0)
  {
    v10 = 0;
    v11 = (uint64_t **)(a1 + 4);
    while (1)
    {
      v12 = (_QWORD *)std::istream::operator>>(v38, &v43);
      if ((*((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 32) & 5) != 0)
      {
        std::ios_base::clear((std::ios_base *)((char *)v38 + *(_QWORD *)(v38[0] - 24)), 0);
        v43 = 1;
      }
      else if (!v43)
      {
        __dst = 0;
        v36 = 0;
        *(_QWORD *)sub_10029430C(&__dst, 8) = 0x5530203E20746E63;
        sub_100294B74(-215, (uint64_t *)&__dst, "make_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8248);
      }
      v13 = sub_1002884D8(v38, &v42);
      if ((*((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 32) & 5) != 0)
        break;
      while (2)
      {
        if (v43--)
        {
          v16 = sub_100289144;
          v17 = 1;
          switch(v42)
          {
            case 'c':
            case 'u':
              goto LABEL_30;
            case 'd':
              v16 = sub_1002891C0;
              v17 = 8;
              v18 = v42 - 99;
              if (v18 > 0x14)
                goto LABEL_34;
              goto LABEL_31;
            case 'f':
              v16 = sub_1002891B0;
              v17 = 4;
LABEL_30:
              v18 = v42 - 99;
              goto LABEL_31;
            case 'i':
              v16 = sub_100289178;
              v17 = 4;
              v18 = v42 - 99;
              if (v18 > 0x14)
                goto LABEL_34;
              goto LABEL_31;
            case 's':
            case 'w':
              v16 = sub_100289158;
              v17 = 2;
              v18 = v42 - 99;
              if (v18 > 0x14)
              {
LABEL_34:
                __dst = 0;
                v36 = 0;
                qmemcpy((void *)sub_10029430C(&__dst, 22), "!\"type is not support\"", 22);
                sub_100294B74(-215, (uint64_t *)&__dst, "make_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8301);
              }
LABEL_31:
              v20 = 0;
              switch(v18)
              {
                case 0u:
                  v20 = 1;
                  goto LABEL_40;
                case 1u:
                  v20 = 6;
                  goto LABEL_40;
                case 3u:
                  v20 = 5;
                  goto LABEL_40;
                case 6u:
                  v20 = 4;
                  goto LABEL_40;
                case 0x10u:
                  v20 = 3;
                  goto LABEL_40;
                case 0x12u:
                  goto LABEL_40;
                case 0x14u:
                  v20 = 2;
LABEL_40:
                  v21 = (v10 + v17 - 1) & -v17;
                  v23 = (uint64_t *)a1[5];
                  v22 = a1[6];
                  if ((unint64_t)v23 < v22)
                  {
                    *v23 = v20;
                    v23[1] = v21;
                    v14 = v23 + 3;
                    v23[2] = (uint64_t)v16;
                  }
                  else
                  {
                    v24 = *v11;
                    v25 = 0xAAAAAAAAAAAAAAABLL * (v23 - *v11);
                    v26 = v25 + 1;
                    if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
                      sub_100008F3C();
                    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v24) >> 3);
                    if (2 * v27 > v26)
                      v26 = 2 * v27;
                    if (v27 >= 0x555555555555555)
                      v28 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v28 = v26;
                    if (v28)
                    {
                      if (v28 > 0xAAAAAAAAAAAAAAALL)
                        sub_100008FF8();
                      v29 = (char *)operator new(24 * v28);
                    }
                    else
                    {
                      v29 = 0;
                    }
                    v30 = (uint64_t *)&v29[24 * v25];
                    *v30 = v20;
                    v30[1] = v21;
                    v30[2] = (uint64_t)v16;
                    v31 = v30;
                    if (v23 != v24)
                    {
                      do
                      {
                        v32 = *(_OWORD *)(v23 - 3);
                        *(v31 - 1) = *(v23 - 1);
                        *(_OWORD *)(v31 - 3) = v32;
                        v31 -= 3;
                        v23 -= 3;
                      }
                      while (v23 != v24);
                      v23 = *v11;
                    }
                    v14 = v30 + 3;
                    a1[4] = v31;
                    a1[5] = v30 + 3;
                    a1[6] = &v29[24 * v28];
                    if (v23)
                      operator delete(v23);
                  }
                  v10 = v21 + v17;
                  a1[5] = v14;
                  continue;
                default:
                  goto LABEL_34;
              }
            default:
              __dst = 0;
              v36 = 0;
              v19 = sub_10029430C(&__dst, 19);
              *(_DWORD *)(v19 + 15) = 578056815;
              *(_OWORD *)v19 = *(_OWORD *)"!\"type not support\"";
              sub_100294B74(-215, (uint64_t *)&__dst, "make_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8283);
          }
        }
        break;
      }
      v9 = *(_QWORD *)(v38[0] - 24);
      if ((*((_BYTE *)&v39[2] + v9) & 2) != 0)
        goto LABEL_57;
    }
    v9 = *(_QWORD *)(v38[0] - 24);
  }
LABEL_57:
  if ((*((_BYTE *)&v39[2] + v9) & 2) == 0)
  {
    __dst = 0;
    v36 = 0;
    v33 = sub_10029430C(&__dst, 9);
    *(_BYTE *)(v33 + 8) = 41;
    *(_QWORD *)v33 = *(_QWORD *)"iss.eof()";
    sub_100294B74(-215, (uint64_t *)&__dst, "make_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8308);
  }
  if (a1[5] == a1[4])
  {
    __dst = 0;
    v36 = 0;
    qmemcpy((void *)sub_10029430C(&__dst, 22), "binary_to_funcs.size()", 22);
    sub_100294B74(-215, (uint64_t *)&__dst, "make_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8309);
  }
  if (v40 < 0)
    operator delete((void *)v39[8]);
  std::streambuf::~streambuf(v39);
  return std::ios::~ios(&v41);
}

void sub_100289084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_10029434C((uint64_t *)&__p);
  sub_10027F390((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100289144(_BYTE *a1, _BYTE *a2)
{
  *a2 = 0;
  *a2 = *a1;
  return 1;
}

uint64_t sub_100289158(unsigned __int8 *a1, _WORD *a2)
{
  __int16 v2;

  *a2 = 0;
  v2 = *a1;
  *a2 = v2;
  *a2 = v2 | (a1[1] << 8);
  return 2;
}

uint64_t sub_100289178(unsigned __int8 *a1, int *a2)
{
  int v2;
  int v3;
  int v4;

  *a2 = 0;
  v2 = *a1;
  *a2 = v2;
  v3 = v2 | (a1[1] << 8);
  *a2 = v3;
  v4 = v3 | (a1[2] << 16);
  *a2 = v4;
  *a2 = v4 | (a1[3] << 24);
  return 4;
}

uint64_t sub_1002891B0(_DWORD *a1, _DWORD *a2)
{
  *a2 = *a1;
  return 4;
}

uint64_t sub_1002891C0(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return 8;
}

uint64_t sub_1002891D0(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 4096;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100289298()
{
  operator delete();
}

uint64_t sub_1002892AC(void **a1)
{
  sub_1001F8584((uint64_t)(a1 + 3), a1[2]);
  return (*((uint64_t (**)(void **))*a1 + 1))(a1);
}

uint64_t sub_1002892E0()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = 0x4800000000;
  v2 = 0;
  v3 = 0;
  v4 = "opencv-sequence";
  v5 = sub_100279524;
  v6 = sub_10027953C;
  v7 = sub_1002795D8;
  v8 = sub_10027A1E4;
  v9 = sub_10027A3B4;
  sub_1002790D8((uint64_t)&v1);
  qword_1004AFF58 = qword_1004AFF48;
  __cxa_atexit((void (*)(void *))sub_100279460, &qword_1004AFF58, (void *)&_mh_execute_header);
  v1 = 0x4800000000;
  v2 = 0;
  v3 = 0;
  v4 = "opencv-sequence-tree";
  v5 = sub_100279524;
  v6 = sub_10027953C;
  v7 = sub_10027A3C4;
  v8 = sub_10027A1E4;
  v9 = sub_10027A3B4;
  sub_1002790D8((uint64_t)&v1);
  qword_1004AFF60 = qword_1004AFF48;
  __cxa_atexit((void (*)(void *))sub_100279460, &qword_1004AFF60, (void *)&_mh_execute_header);
  v1 = 0x4800000000;
  v2 = 0;
  v3 = 0;
  v4 = "opencv-graph";
  v5 = sub_10027A6D8;
  v6 = sub_10027A6FC;
  v7 = sub_10027A798;
  v8 = sub_10027B73C;
  v9 = sub_10027BD00;
  sub_1002790D8((uint64_t)&v1);
  qword_1004AFF68 = qword_1004AFF48;
  __cxa_atexit((void (*)(void *))sub_100279460, &qword_1004AFF68, (void *)&_mh_execute_header);
  v1 = 0x4800000000;
  v2 = 0;
  v3 = 0;
  v4 = "opencv-sparse-matrix";
  v5 = sub_10027BD08;
  v6 = sub_1001F5AC4;
  v7 = sub_10027BD20;
  v8 = sub_10027C280;
  v9 = sub_1001F5BBC;
  sub_1002790D8((uint64_t)&v1);
  qword_1004AFF70 = qword_1004AFF48;
  __cxa_atexit((void (*)(void *))sub_100279460, &qword_1004AFF70, (void *)&_mh_execute_header);
  v1 = 0x4800000000;
  v2 = 0;
  v3 = 0;
  v4 = "opencv-image";
  v5 = sub_10027C5B0;
  v6 = sub_1001F7F24;
  v7 = sub_10027C5C4;
  v8 = sub_10027CD60;
  v9 = sub_1001F83CC;
  sub_1002790D8((uint64_t)&v1);
  qword_1004AFF78 = qword_1004AFF48;
  __cxa_atexit((void (*)(void *))sub_100279460, &qword_1004AFF78, (void *)&_mh_execute_header);
  v1 = 0x4800000000;
  v2 = 0;
  v3 = 0;
  v4 = "opencv-matrix";
  v5 = sub_10027D0B4;
  v6 = sub_1001F4030;
  v7 = sub_10027D0E8;
  v8 = sub_10027D484;
  v9 = sub_1001F4194;
  sub_1002790D8((uint64_t)&v1);
  qword_1004AFF80 = qword_1004AFF48;
  __cxa_atexit((void (*)(void *))sub_100279460, &qword_1004AFF80, (void *)&_mh_execute_header);
  v1 = 0x4800000000;
  v2 = 0;
  v3 = 0;
  v4 = "opencv-nd-matrix";
  v5 = sub_10027D60C;
  v6 = sub_10027D624;
  v7 = sub_10027D628;
  v8 = sub_10027DAB0;
  v9 = sub_1001F46BC;
  sub_1002790D8((uint64_t)&v1);
  qword_1004AFF88 = qword_1004AFF48;
  return __cxa_atexit((void (*)(void *))sub_100279460, &qword_1004AFF88, (void *)&_mh_execute_header);
}

_QWORD *sub_1002895F4()
{
  _DWORD *v0;

  v0 = (_DWORD *)sub_1002964FC();
  return sub_100295FA4(v0);
}

unsigned int *sub_100289608(unsigned int *result, int a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = result;
  if ((a2 & 0x7FFFFFFF) != 0)
  {
    if (a2 >= 0)
      v3 = a2;
    else
      v3 = -a2;
    sub_10028CBCC((int *)&v4, a2 >> 31, 156, v3);
    *v2 = v4;
    return v2;
  }
  else
  {
    *result = (a2 >> 31) & 0xCF000000;
  }
  return result;
}

unsigned int *sub_100289678@<X0>(unsigned int *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  char v10;
  char v11;

  v2 = *result;
  v3 = v2 & 0x7FFFFF;
  if ((~(_DWORD)v2 & 0x7F800000) != 0)
  {
    v7 = (v2 >> 23);
    if (!(v2 >> 23))
    {
      if (!v3)
      {
        *a2 = (v2 << 32) & 0x8000000000000000;
        return result;
      }
      v8 = (_DWORD)v2 << 16;
      if (v3 >= 0x10000)
        v8 = v2 & 0x7FFFFF;
      LODWORD(v9) = v8 << 8;
      if (HIBYTE(v8))
        v9 = v8;
      else
        v9 = v9;
      if (HIBYTE(v8))
        v10 = 16 * (v3 < 0x10000);
      else
        v10 = (16 * (v3 < 0x10000)) | 8;
      v11 = v10 + byte_1003BD248[v9 >> 24] - 8;
      v3 <<= v11;
      v7 = -v11;
    }
    *a2 = ((v2 >> 31 << 63) | ((unint64_t)v3 << 29)) + (v7 << 52) + 0x3800000000000000;
    return result;
  }
  v4 = (v2 >> 31 << 63) | 0x7FF0000000000000;
  v5 = (v2 << 29) | (v2 >> 31 << 63) | 0x7FF8000000000000;
  if (v3)
    v6 = v5;
  else
    v6 = v4;
  *a2 = v6;
  return result;
}

int *sub_100289748@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, int *a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;

  v4 = *a1;
  v5 = *a2;
  if (((*a2 ^ *a1) & 0x80000000) != 0)
    return sub_10028C7F8(a3, v4, v5);
  else
    return (int *)sub_10028C9C4((unsigned int *)a3, v4, v5);
}

int *sub_10028976C@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;

  v4 = *a1;
  v5 = *a2;
  if (((*a2 ^ *a1) & 0x80000000) != 0)
    return (int *)sub_10028C9C4(a3, v4, v5);
  else
    return sub_10028C7F8((int *)a3, v4, v5);
}

int *sub_100289790@<X0>(int *result@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v10;
  BOOL v11;
  int v12;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  char v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  char v24;
  char v25;
  int v26;
  unint64_t v27;
  int v28;
  char v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;

  v3 = *result;
  v4 = (*result >> 23);
  v5 = *result & 0x7FFFFF;
  v6 = (*a2 >> 23);
  v7 = *a2 & 0x7FFFFF;
  v8 = *a2 ^ *result;
  if (v4 == 255)
  {
    if (v5)
      goto LABEL_11;
    if (v6 == 255 && v7 != 0)
      goto LABEL_11;
    v10 = v6 | v7;
LABEL_28:
    v15 = v8 & 0x80000000 | 0x7F800000;
    if (!v10)
      v15 = -4194304;
    *a3 = v15;
    return result;
  }
  if ((~*a2 & 0x7F800000) == 0)
  {
    if (v7)
    {
LABEL_11:
      if (v5)
        v11 = (~v3 & 0x7F800000) == 0;
      else
        v11 = 0;
      if (v11)
        v12 = *result;
      else
        v12 = *a2;
      if ((v3 & 0x7FC00000) != 0x7F800000 || (v3 & 0x3FFFFF) == 0)
        v14 = v12;
      else
        v14 = *result;
      *a3 = v14 | 0x400000;
      return result;
    }
    v10 = v4 | v5;
    goto LABEL_28;
  }
  if (!(*result >> 23))
  {
    if (!v5)
      goto LABEL_59;
    v16 = *result << 16;
    if (v5 >= 0x10000)
      v16 = *result & 0x7FFFFF;
    LODWORD(v17) = v16 << 8;
    if (HIBYTE(v16))
      v17 = v16;
    else
      v17 = v17;
    v18 = byte_1003BD248[v17 >> 24];
    if (HIBYTE(v16))
      v19 = 16 * (v5 < 0x10000);
    else
      v19 = (16 * (v5 < 0x10000)) | 8;
    v20 = v19 + v18 - 8;
    v4 = 1 - v20;
    v5 <<= v20;
    if ((*a2 >> 23))
      goto LABEL_51;
LABEL_41:
    if (v7)
    {
      v21 = *a2 << 16;
      if (v7 >= 0x10000)
        v21 = *a2 & 0x7FFFFF;
      LODWORD(v22) = v21 << 8;
      if (HIBYTE(v21))
        v22 = v21;
      else
        v22 = v22;
      v23 = byte_1003BD248[v22 >> 24];
      if (HIBYTE(v21))
        v24 = 16 * (v7 < 0x10000);
      else
        v24 = (16 * (v7 < 0x10000)) | 8;
      v25 = v24 + v23 - 8;
      v6 = 1 - v25;
      v7 <<= v25;
      goto LABEL_51;
    }
LABEL_59:
    *a3 = v8 & 0x80000000;
    return result;
  }
  if (!(*a2 >> 23))
    goto LABEL_41;
LABEL_51:
  v26 = v6 + v4;
  v27 = ((v7 << 8) | 0x80000000) * (unint64_t)((v5 << 7) | 0x40000000);
  v28 = HIDWORD(v27) | ((v27 & 0xFFFF8000) != 0);
  v29 = v27 >> 62 == 0;
  if (v29)
    v30 = -128;
  else
    v30 = -127;
  v31 = v26 + v30;
  v32 = v28 << v29;
  if (v31 >= 0xFD)
  {
    if ((v31 & 0x8000) != 0)
    {
      v33 = -v31;
      v34 = (unsigned __int16)v33;
      v32 = (v32 >> v33) | (v32 << -(char)v33 != 0);
      v31 = 0;
      if (v34 > 0x1E)
        v32 = 1;
    }
    else
    {
      if ((unsigned __int16)v31 > 0xFDu || ((v32 + 64) & 0x80000000) != 0)
      {
        *a3 = v8 & 0x80000000 | 0x7F800000;
        return result;
      }
      v31 = 253;
    }
  }
  v35 = v8 & 0x80000000;
  v36 = v31 << 23;
  v37 = ~((v32 & 0x7F) == 64) & ((v32 + 64) >> 7);
  if (!v37)
    v36 = 0;
  *a3 = (v37 | v35) + v36;
  return result;
}

int *sub_1002899DC@<X0>(int *result@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X8>)
{
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  int v10;
  int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  char v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  char v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  _BOOL4 v34;
  unsigned int v35;
  int v36;
  unsigned int v37;

  v3 = *result;
  v4 = (*result >> 23);
  v5 = *a2;
  v6 = *result & 0x7FFFFF;
  v7 = *a2 & 0x7FFFFF;
  v8 = *a2 ^ *result;
  if (v4 == 255)
  {
    if (!v6)
    {
      if ((~v5 & 0x7F800000) == 0)
      {
        if (!v7)
          goto LABEL_60;
        goto LABEL_8;
      }
LABEL_59:
      *a3 = v8 & 0x80000000 | 0x7F800000;
      return result;
    }
LABEL_8:
    if (v6)
      v9 = (~v3 & 0x7F800000) == 0;
    else
      v9 = 0;
    if (v9)
      v10 = *result;
    else
      v10 = *a2;
    if ((v3 & 0x7FC00000) != 0x7F800000 || (v3 & 0x3FFFFF) == 0)
      v12 = v10;
    else
      v12 = *result;
    *a3 = v12 | 0x400000;
    return result;
  }
  if ((~v5 & 0x7F800000) == 0)
  {
    if (v7)
      goto LABEL_8;
LABEL_52:
    *a3 = v8 & 0x80000000;
    return result;
  }
  v13 = (v5 >> 23);
  if ((v5 >> 23))
  {
    if ((*result >> 23))
      goto LABEL_44;
  }
  else
  {
    if (!v7)
    {
      if (!(v4 | v6))
      {
LABEL_60:
        *a3 = -4194304;
        return result;
      }
      goto LABEL_59;
    }
    v14 = *a2 << 16;
    if (v7 >= 0x10000)
      v14 = *a2 & 0x7FFFFF;
    LODWORD(v15) = v14 << 8;
    if (HIBYTE(v14))
      v15 = v14;
    else
      v15 = v15;
    v16 = byte_1003BD248[v15 >> 24];
    if (HIBYTE(v14))
      v17 = 16 * (v7 < 0x10000);
    else
      v17 = (16 * (v7 < 0x10000)) | 8;
    v18 = v17 + v16 - 8;
    v13 = 1 - v18;
    v7 <<= v18;
    if ((*result >> 23))
      goto LABEL_44;
  }
  if (!v6)
    goto LABEL_52;
  v19 = *result << 16;
  if (v6 >= 0x10000)
    v19 = *result & 0x7FFFFF;
  LODWORD(v20) = v19 << 8;
  if (HIBYTE(v19))
    v20 = v19;
  else
    v20 = v20;
  v21 = byte_1003BD248[v20 >> 24];
  if (HIBYTE(v19))
    v22 = 16 * (v6 < 0x10000);
  else
    v22 = (16 * (v6 < 0x10000)) | 8;
  v23 = v22 + v21 - 8;
  v4 = 1 - v23;
  v6 <<= v23;
LABEL_44:
  v24 = v4 - v13;
  v25 = v6 | 0x800000;
  v26 = v7 | 0x800000;
  if (v25 < v26)
    v27 = 125;
  else
    v27 = 126;
  v28 = v27 + v24;
  v29 = 30;
  if (v25 < v26)
    v29 = 31;
  v30 = v25 << v29;
  v31 = v30 / v26;
  if (((v30 / v26) & 0x3F) != 0)
  {
    if ((unsigned __int16)v28 < 0xFDu)
      goto LABEL_63;
  }
  else
  {
    LODWORD(v31) = (v31 * (unint64_t)v26 != v30) | v31;
    if ((unsigned __int16)v28 < 0xFDu)
      goto LABEL_63;
  }
  if ((v28 & 0x8000) != 0)
  {
    v32 = -v28;
    v33 = (unsigned __int16)v32;
    v34 = v31 != 0;
    LODWORD(v31) = (v31 >> v32) | ((_DWORD)v31 << -(char)v32 != 0);
    v28 = 0;
    if (v33 > 0x1E)
      LODWORD(v31) = v34;
  }
  else
  {
    if ((unsigned __int16)v28 > 0xFDu || (_DWORD)v31 + 64 < 0)
      goto LABEL_59;
    v28 = 253;
  }
LABEL_63:
  v35 = v8 & 0x80000000;
  v36 = v28 << 23;
  v37 = ~((v31 & 0x7F) == 64) & ((v31 + 64) >> 7);
  if (!v37)
    v36 = 0;
  *a3 = (v37 | v35) + v36;
  return result;
}

BOOL sub_100289C38(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v4;
  _BOOL4 v7;

  v2 = *a2;
  if ((~*a2 & 0x7F800000) == 0 && (*a2 & 0x7FFFFF) != 0)
    return 0;
  v4 = *a1;
  if ((~*a1 & 0x7F800000) == 0 && (*a1 & 0x7FFFFF) != 0)
    return 0;
  if (v2 >> 31 == v4 >> 31)
  {
    if (v2 == v4)
      return 0;
    return v2 >> 31 != v2 < v4;
  }
  else
  {
    v7 = ((v4 | v2) & 0x7FFFFFFF) != 0;
    return (v2 & 0x80000000) != 0 && v7;
  }
}

BOOL sub_100289CB0(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v4;
  _BOOL4 v7;

  v2 = *a1;
  if ((~*a1 & 0x7F800000) == 0 && (*a1 & 0x7FFFFF) != 0)
    return 0;
  v4 = *a2;
  if ((~*a2 & 0x7F800000) == 0 && (*a2 & 0x7FFFFF) != 0)
    return 0;
  if (v2 >> 31 == v4 >> 31)
  {
    if (v2 == v4)
      return 0;
    return v2 >> 31 != v2 < v4;
  }
  else
  {
    v7 = ((v4 | v2) & 0x7FFFFFFF) != 0;
    return (v2 & 0x80000000) != 0 && v7;
  }
}

_QWORD *sub_100289D28(_QWORD *result, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  char v5;
  char v6;

  if (a2)
  {
    if (a2 >= 0)
      v2 = a2;
    else
      v2 = -a2;
    v3 = (_DWORD)v2 << 16;
    if (v2 >= 0x10000)
      v3 = v2;
    LODWORD(v4) = v3 << 8;
    if (HIBYTE(v3))
      v4 = v3;
    else
      v4 = v4;
    if (HIBYTE(v3))
      v5 = 16 * (v2 < 0x10000);
    else
      v5 = (16 * (v2 < 0x10000)) | 8;
    v6 = v5 + byte_1003BD248[v4 >> 24] + 21;
    *result = (v2 << v6)
            + ((unint64_t)(a2 >> 31) << 63)
            + ((unint64_t)(1074 - v6) << 52);
  }
  else
  {
    *result = 0;
  }
  return result;
}

unint64_t *sub_100289DA8(unint64_t *result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = result;
  if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    if (a2 >= 0)
      v3 = a2;
    else
      v3 = -a2;
    sub_10028D130(&v4, (unint64_t)a2 >> 63, 1084, v3);
    *v2 = v4;
    return v2;
  }
  else
  {
    *result = (a2 >> 63) & 0xC3E0000000000000;
  }
  return result;
}

uint64_t sub_100289E18(int *a1)
{
  int v1;
  unsigned int v2;
  int v4;
  unsigned int v5;

  v1 = *a1;
  v2 = (*a1 >> 23);
  if (v2 < 0x7F)
    return 0;
  v4 = v1 & 0x7FFFFF;
  if (v2 < 0x9E)
  {
    v5 = ((v4 << 8) | 0x80000000) >> (-98 - v2);
    if (v1 >= 0)
      return v5;
    else
      return -v5;
  }
  else if (v1 == -822083584)
  {
    return 0x80000000;
  }
  else if ((v2 != 255 || v4 == 0) && v1 <= -1)
  {
    return 0x80000000;
  }
  else
  {
    return 0x7FFFFFFFLL;
  }
}

uint64_t sub_100289E8C(unsigned int *a1)
{
  unint64_t v1;
  unsigned int v2;
  unsigned int v3;
  _BOOL4 v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t result;

  v1 = *a1;
  v2 = (v1 >> 23);
  v3 = v1 & 0x7FFFFF;
  v4 = (v1 & 0x7FFFFF) == 0;
  if (v2 != 255)
    v4 = 1;
  if ((v1 & 0x80000000) == 0)
    v4 = 0;
  LODWORD(v5) = v3 | 0x800000;
  if ((v1 & 0x7F800000) != 0)
    v5 = v5;
  else
    v5 = v3;
  v6 = v5 << 32;
  if (v2 <= 0xA9)
  {
    if (v2 < 0x6C)
    {
      v6 = (_DWORD)v5 != 0;
      goto LABEL_14;
    }
    v6 = (v6 >> (-86 - v2)) | (v6 << ((v1 >> 23) + 22) != 0);
  }
  if (v6 > 0xFFFFFFFF7FFLL)
  {
LABEL_19:
    if (v4)
      return 0x80000000;
    else
      return 0x7FFFFFFFLL;
  }
LABEL_14:
  v7 = ((v6 + 2048) >> 12) & ~((v6 & 0xFFF) == 2048);
  if (v4)
    result = -v7;
  else
    result = v7;
  if (v7 && v4 != result >> 31)
    goto LABEL_19;
  return result;
}

uint64_t sub_100289F48(uint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  _BOOL4 v3;
  unsigned int v4;
  _BOOL4 v5;
  unsigned int v6;
  uint64_t result;

  v1 = (unint64_t)*a1 >> 52;
  v2 = *a1 & 0xFFFFFFFFFFFFFLL;
  v3 = v2 == 0;
  v4 = v1 & 0x7FF;
  if ((v1 & 0x7FF) != 0)
    v2 |= 0x10000000000000uLL;
  if (v4 != 2047)
    v3 = 1;
  v5 = *a1 < 0 && v3;
  if (v4 <= 0x426)
  {
    if (v4 < 0x3E9)
    {
      v2 = v2 != 0;
      goto LABEL_14;
    }
    v2 = (v2 >> (39 - v1)) | (v2 << (v1 + 25) != 0);
  }
  if (v2 > 0xFFFFFFFF7FFLL)
  {
LABEL_19:
    if (v5)
      return 0x80000000;
    else
      return 0x7FFFFFFFLL;
  }
LABEL_14:
  v6 = ((v2 + 2048) >> 12) & ~((v2 & 0xFFF) == 2048);
  if (v5)
    result = -v6;
  else
    result = v6;
  if (v6 && v5 != result >> 31)
    goto LABEL_19;
  return result;
}

uint64_t sub_100289FFC(uint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  _BOOL4 v3;
  unsigned int v4;
  _BOOL4 v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;

  v1 = (unint64_t)*a1 >> 52;
  v2 = *a1 & 0xFFFFFFFFFFFFFLL;
  v3 = v2 == 0;
  v4 = v1 & 0x7FF;
  if ((v1 & 0x7FF) != 0)
    v2 |= 0x10000000000000uLL;
  if (v4 != 2047)
    v3 = 1;
  v5 = *a1 < 0 && v3;
  v6 = (v2 >> (39 - v1)) | (v2 << (v1 + 25) != 0);
  if (v4 < 0x3E9)
    v6 = v2 != 0;
  if (v4 > 0x426)
    v6 = v2;
  v7 = 4095;
  if (!v5)
    v7 = 0;
  v8 = v6 + v7;
  if (v8 >> 44
    || ((v9 = v8 >> 12, !v5) ? (result = v9) : (result = -(int)v9),
        (_DWORD)v9 && v5 != result >> 31))
  {
    if (v5)
      return 0x80000000;
    else
      return 0x7FFFFFFFLL;
  }
  return result;
}

unint64_t sub_10028A0A0(uint64_t *a1)
{
  unsigned int v1;
  unint64_t v2;
  _BOOL4 v3;
  _BOOL4 v4;
  unint64_t v5;
  unint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = ((unint64_t)*a1 >> 52) & 0x7FF;
  v2 = *a1 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  if (!v1)
    v2 = *a1 & 0xFFFFFFFFFFFFFLL;
  v3 = v1 != 2047 || (*a1 & 0xFFFFFFFFFFFFFLL) == 0;
  v4 = *a1 < 0 && v3;
  if (v1 < 0x433)
  {
    if ((unsigned __int16)v1 < 0x3F4u)
    {
      return 0;
    }
    else
    {
      v7 = v2 >> (51 - ((unint64_t)*a1 >> 52));
      v8 = v2 << (((unint64_t)*a1 >> 52) - 51);
      if (v8 < 0)
        v9 = (v7 + 1) & ~(unint64_t)((v8 & 0x7FFFFFFFFFFFFFFFLL) == 0);
      else
        v9 = v7;
      if (v4)
        result = -(uint64_t)v9;
      else
        result = v9;
      if (v9)
      {
        v10 = 0x8000000000000000;
        if (!v4)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        if (result >> 63 != v4)
          return v10;
      }
    }
  }
  else if ((unsigned __int16)v1 > 0x43Eu || (v5 = v2 << (v1 - 51), (v5 & 0x8000000000000000) != 0))
  {
    if (v4)
      return 0x8000000000000000;
    else
      return 0x7FFFFFFFFFFFFFFFLL;
  }
  else if (v4)
  {
    return -(uint64_t)v5;
  }
  else
  {
    return v5;
  }
  return result;
}

uint64_t *sub_10028A170@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v2 = *result;
  v3 = ((unint64_t)*result >> 52) & 0x7FF;
  v4 = *result & 0xFFFFFFFFFFFFFLL;
  if ((_DWORD)v3 == 2047)
  {
    v5 = HIDWORD(v2) & 0x80000000 | ((unint64_t)v2 >> 29) & 0x3FFFFF | 0x7FC00000;
    if (!v4)
      v5 = HIDWORD(v2) & 0x80000000 | 0x7F800000;
    *a2 = v5;
    return result;
  }
  v6 = (v4 >> 22) | ((v2 & 0x3FFFFF) != 0);
  if (!(v3 | v6))
  {
    *a2 = HIDWORD(v2) & 0x80000000;
    return result;
  }
  v7 = v3 - 897;
  v8 = v6 | 0x40000000;
  if ((v3 - 897) < 0xFD)
    goto LABEL_15;
  if (v3 <= 0x380)
  {
    v8 = (v8 >> (-127 - ((unint64_t)*result >> 52))) | (v8 << (((unint64_t)v2 >> 52) - 1) != 0);
    v7 = 0;
    if (v3 < 0x363)
      v8 = 1;
    goto LABEL_15;
  }
  if (v7 <= 0xFD && ((v6 + 1073741888) & 0x80000000) == 0)
  {
    v7 = 253;
LABEL_15:
    v9 = v7 << 23;
    v10 = ~((v8 & 0x7F) == 64) & ((v8 + 64) >> 7);
    if (v10)
      v11 = v9;
    else
      v11 = 0;
    *a2 = (v10 | HIDWORD(v2) & 0x80000000) + v11;
    return result;
  }
  if (v2 >= 0)
    v12 = 2139095040;
  else
    v12 = -8388608;
  *a2 = v12;
  return result;
}

unint64_t *sub_10028A294@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a1;
  v5 = *a2;
  v6 = *a1 >> 63;
  if ((_DWORD)v6 == *a2 >> 63)
    return sub_10028CD14(a3, v4, v5, v6);
  else
    return sub_10028CF1C(a3, v4, v5, v6);
}

unint64_t *sub_10028A2C0@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a1;
  v5 = *a2;
  v6 = *a1 >> 63;
  if ((_DWORD)v6 == *a2 >> 63)
    return sub_10028CF1C(a3, v4, v5, v6);
  else
    return sub_10028CD14(a3, v4, v5, v6);
}

unint64_t *sub_10028A2EC@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  const mach_header_64 *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  _BOOL8 v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v3 = *result;
  v4 = (*result >> 52) & 0x7FF;
  v5 = *a2;
  v6 = *result & 0xFFFFFFFFFFFFFLL;
  v7 = (*a2 >> 52) & 0x7FF;
  v8 = *a2 & 0xFFFFFFFFFFFFFLL;
  v9 = *a2 ^ *result;
  if ((_DWORD)v4 == 2047)
  {
    if (v6)
      goto LABEL_11;
    if ((_DWORD)v7 == 2047 && v8 != 0)
      goto LABEL_11;
    v11 = v5 >> 52;
LABEL_28:
    v16 = v9 & 0x8000000000000000 | 0x7FF0000000000000;
    if (!(v11 & 0x7FF | v8))
      v16 = 0xFFF8000000000000;
    *a3 = v16;
    return result;
  }
  if ((_DWORD)v7 == 2047)
  {
    if (v8)
    {
LABEL_11:
      if (v6)
        v12 = (~v3 & 0x7FF0000000000000) == 0;
      else
        v12 = 0;
      if (v12)
        v13 = *result;
      else
        v13 = *a2;
      if ((v3 & 0x7FF8000000000000) != 0x7FF0000000000000 || (v3 & 0x7FFFFFFFFFFFFLL) == 0)
        v15 = v13;
      else
        v15 = *result;
      *a3 = v15 | 0x8000000000000;
      return result;
    }
    v11 = v3 >> 52;
    v8 = *result & 0xFFFFFFFFFFFFFLL;
    goto LABEL_28;
  }
  if (!(_DWORD)v4)
  {
    if (!v6)
      goto LABEL_63;
    v4 = HIDWORD(v6);
    if (!HIDWORD(v6))
      LODWORD(v4) = *result;
    v17 = (32 * (HIDWORD(v6) == 0)) | 0x10;
    if (v4 < 0x10000)
      LODWORD(v4) = (_DWORD)v4 << 16;
    else
      v17 = 32 * (HIDWORD(v6) == 0);
    result = (unint64_t *)BYTE3(v4);
    if ((_DWORD)result)
    {
      v4 = v4;
    }
    else
    {
      v17 |= 8u;
      v4 = ((_DWORD)v4 << 8);
    }
    v18 = v17 + byte_1003BD248[v4 >> 24] - 11;
    v6 <<= v18;
    LODWORD(v4) = 1 - v18;
    if ((_DWORD)v7)
      goto LABEL_51;
LABEL_41:
    if (v8)
    {
      if (HIDWORD(v8))
        LODWORD(v5) = (*a2 & 0xFFFFFFFFFFFFFLL) >> 32;
      v19 = (32 * (HIDWORD(v8) == 0)) | 0x10;
      if (v5 < 0x10000)
        LODWORD(v5) = (_DWORD)v5 << 16;
      else
        v19 = 32 * (HIDWORD(v8) == 0);
      if (BYTE3(v5))
      {
        v5 = v5;
      }
      else
      {
        v19 |= 8u;
        v5 = ((_DWORD)v5 << 8);
      }
      v20 = v19 + byte_1003BD248[v5 >> 24] - 11;
      v8 <<= v20;
      LODWORD(v7) = 1 - v20;
      goto LABEL_51;
    }
LABEL_63:
    *a3 = v9 & 0x8000000000000000;
    return result;
  }
  if (!(_DWORD)v7)
    goto LABEL_41;
LABEL_51:
  v21 = v7 + v4;
  v22 = v6 << 10;
  v23 = v22 | 0x4000000000000000;
  v24 = v8 << 11;
  v25 = v24 | 0x8000000000000000;
  v26 = (v22 | 0x4000000000000000) >> 32;
  v27 = (v24 | 0x8000000000000000) >> 32;
  v28 = (v24 & 0xFFFFF800) * (unint64_t)v26;
  v29 = v27 * (unint64_t)(v22 & 0xFFFFFC00);
  v30 = __CFADD__(v29, v28);
  v31 = v29 + v28;
  v32 = &_mh_execute_header;
  if (!v30)
    v32 = 0;
  v33 = v25 * v23;
  v30 = v33 >= v31 << 32;
  v34 = (unint64_t)v32 + HIDWORD(v31) + v27 * (unint64_t)v26;
  if (!v30)
    ++v34;
  v35 = v34 | (v33 != 0);
  v36 = v34 >> 62 == 0;
  if (v36)
    v37 = -1024;
  else
    v37 = -1023;
  v38 = (v21 + v37);
  v39 = v35 << v36;
  if (v38 >= 0x7FD)
  {
    if ((v38 & 0x8000) != 0)
    {
      v40 = -(__int16)v38;
      v41 = v35 != 0;
      v39 = (v39 >> v40) | (v39 << v38 != 0);
      v38 = 0;
      if (v40 > 0x3E)
        v39 = v41;
    }
    else
    {
      if ((unsigned __int16)v38 > 0x7FDu || ((v39 + 512) & 0x8000000000000000) != 0)
      {
        *a3 = v9 & 0x8000000000000000 | 0x7FF0000000000000;
        return result;
      }
      v38 = 2045;
    }
  }
  v42 = v9 & 0x8000000000000000;
  v43 = v38 << 52;
  v44 = ~(unint64_t)((v39 & 0x3FF) == 512) & ((v39 + 512) >> 10);
  if (!v44)
    v43 = 0;
  *a3 = (v44 | v42) + v43;
  return result;
}

unint64_t *sub_10028A5A4@<X0>(unint64_t *result@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int v35;
  _BOOL8 v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v3 = *result;
  v4 = (*result >> 52) & 0x7FF;
  v5 = *result & 0xFFFFFFFFFFFFFLL;
  v6 = ((unint64_t)*a2 >> 52) & 0x7FF;
  v7 = *a2 & 0xFFFFFFFFFFFFFLL;
  v8 = *a2 ^ *result;
  if ((_DWORD)v4 == 2047)
  {
    if (!v5)
    {
      if ((_DWORD)v6 == 2047)
      {
        if (!v7)
          goto LABEL_56;
        goto LABEL_9;
      }
LABEL_62:
      *a3 = v8 & 0x8000000000000000 | 0x7FF0000000000000;
      return result;
    }
LABEL_9:
    if (v5)
      v9 = (~v3 & 0x7FF0000000000000) == 0;
    else
      v9 = 0;
    if (v9)
      v10 = *result;
    else
      v10 = *a2;
    if ((v3 & 0x7FF8000000000000) != 0x7FF0000000000000 || (v3 & 0x7FFFFFFFFFFFFLL) == 0)
      v12 = v10;
    else
      v12 = *result;
    *a3 = v12 | 0x8000000000000;
    return result;
  }
  if ((_DWORD)v6)
  {
    if ((_DWORD)v6 == 2047)
    {
      if (v7)
        goto LABEL_9;
LABEL_51:
      *a3 = v8 & 0x8000000000000000;
      return result;
    }
  }
  else
  {
    if (!v7)
    {
      if (!(v4 | v5))
      {
LABEL_56:
        *a3 = 0xFFF8000000000000;
        return result;
      }
      goto LABEL_62;
    }
    v6 = HIDWORD(v7);
    if (!HIDWORD(v7))
      LODWORD(v6) = *a2;
    v13 = (32 * (HIDWORD(v7) == 0)) | 0x10;
    if (v6 < 0x10000)
      LODWORD(v6) = (_DWORD)v6 << 16;
    else
      v13 = 32 * (HIDWORD(v7) == 0);
    result = (unint64_t *)BYTE3(v6);
    if ((_DWORD)result)
    {
      v6 = v6;
    }
    else
    {
      v13 |= 8u;
      v6 = ((_DWORD)v6 << 8);
    }
    v14 = v13 + byte_1003BD248[v6 >> 24] - 11;
    v7 <<= v14;
    LODWORD(v6) = 1 - v14;
  }
  if (!(_DWORD)v4)
  {
    if (!v5)
      goto LABEL_51;
    if (HIDWORD(v5))
      LODWORD(v3) = HIDWORD(v5);
    v15 = (32 * (HIDWORD(v5) == 0)) | 0x10;
    if (v3 < 0x10000)
      LODWORD(v3) = (_DWORD)v3 << 16;
    else
      v15 = 32 * (HIDWORD(v5) == 0);
    if (BYTE3(v3))
    {
      v3 = v3;
    }
    else
    {
      v15 |= 8u;
      v3 = ((_DWORD)v3 << 8);
    }
    v16 = v15 + byte_1003BD248[v3 >> 24] - 11;
    v5 <<= v16;
    LODWORD(v4) = 1 - v16;
  }
  v17 = v4 - v6;
  v18 = v5 | 0x10000000000000;
  v19 = (v5 | 0x10000000000000uLL) >= (v7 | 0x10000000000000);
  if ((v5 | 0x10000000000000uLL) < (v7 | 0x10000000000000))
    v20 = 1021;
  else
    v20 = 1022;
  v21 = (v20 + v17);
  v22 = 10;
  if (!v19)
    v22 = 11;
  v23 = v18 << v22;
  v24 = ((v7 | 0x10000000000000) >> 21);
  v25 = 0x7FFFFFFFFFFFFFFFLL / v24 - 2;
  v26 = HIDWORD(v23) * (unint64_t)v25;
  v27 = (v23 - ((v26 >> 31) & 0xFFFFFFFE) * v24) << 28;
  v28 = (v7 & 0x1FFFFF) << 7;
  v29 = v27 - ((v26 >> 31) & 0xFFFFFFFE) * v28;
  v30 = ((HIDWORD(v29) * (unint64_t)v25) >> 32) + 4;
  v31 = (v26 & 0xFFFFFFFF00000000) + 16 * v30;
  if ((v30 & 0x1C) != 0)
  {
    if ((unsigned __int16)v21 < 0x7FDu)
      goto LABEL_65;
  }
  else
  {
    v32 = v31 & 0xFFFFFFFFFFFFFF80;
    v33 = (2 * v30) & 0xFFFFFFF0;
    v34 = (v29 - v24 * (unint64_t)v33) << 28;
    if (((v34 - v28 * (unint64_t)v33) & 0x8000000000000000) != 0)
    {
      v31 = v32 - 128;
      if ((unsigned __int16)v21 < 0x7FDu)
        goto LABEL_65;
    }
    else
    {
      v31 = v32 | (v34 != v28 * (unint64_t)v33);
      if ((unsigned __int16)v21 < 0x7FDu)
        goto LABEL_65;
    }
  }
  if ((v21 & 0x8000) != 0)
  {
    v35 = -(__int16)v21;
    v36 = v31 != 0;
    v31 = (v31 >> v35) | (v31 << v21 != 0);
    v21 = 0;
    if (v35 > 0x3E)
      v31 = v36;
  }
  else
  {
    if ((unsigned __int16)v21 > 0x7FDu || ((v31 + 512) & 0x8000000000000000) != 0)
      goto LABEL_62;
    v21 = 2045;
  }
LABEL_65:
  v37 = v8 & 0x8000000000000000;
  v38 = v21 << 52;
  v39 = ~(unint64_t)((v31 & 0x3FF) == 512) & ((v31 + 512) >> 10);
  if (!v39)
    v38 = 0;
  *a3 = (v39 | v37) + v38;
  return result;
}

BOOL sub_10028A88C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *a1;
  if ((~*a1 & 0x7FF0000000000000) == 0 && (*a1 & 0xFFFFFFFFFFFFFLL) != 0)
    return 0;
  v4 = *a2;
  if ((~*a2 & 0x7FF0000000000000) == 0 && (*a2 & 0xFFFFFFFFFFFFFLL) != 0)
    return 0;
  return ((v4 | v2) & 0x7FFFFFFFFFFFFFFFLL) == 0 || v2 == v4;
}

uint64_t sub_10028A8DC(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v4;
  _BOOL4 v7;

  v2 = *a1;
  if ((~*a1 & 0x7FF0000000000000) == 0 && (*a1 & 0xFFFFFFFFFFFFFLL) != 0)
    return 0;
  v4 = *a2;
  if ((~*a2 & 0x7FF0000000000000) == 0 && (*a2 & 0xFFFFFFFFFFFFFLL) != 0)
    return 0;
  if (v2 >> 63 == v4 >> 63)
  {
    return v2 == v4 || v2 >> 63 != v2 < v4;
  }
  else
  {
    v7 = ((v4 | v2) & 0x7FFFFFFFFFFFFFFFLL) == 0;
    return (v2 & 0x8000000000000000) != 0 || v7;
  }
}

uint64_t sub_10028A964@<X0>(uint64_t result@<X0>, int *a2@<X1>, int *a3@<X2>, int *a4@<X8>)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v15;
  int v16;
  int v17;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  char v27;
  char v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BOOL4 v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  _BOOL4 v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  char v56;
  int v57;
  unsigned int v58;
  _BOOL4 v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;

  v4 = *(_DWORD *)result;
  v5 = (*(_DWORD *)result >> 23);
  v6 = *(_DWORD *)result & 0x7FFFFF;
  v7 = *a3;
  v8 = (*a2 >> 23);
  v9 = *a2 & 0x7FFFFF;
  v10 = *a3 & 0x7FFFFF;
  v11 = *a2 ^ *(_DWORD *)result;
  if (v5 == 255)
  {
    if (!v6 && (!v9 || v8 != 255))
    {
      if (!(v8 | v9))
        goto LABEL_35;
      goto LABEL_32;
    }
    goto LABEL_9;
  }
  result = 2139095040;
  if ((~*a2 & 0x7F800000) == 0)
  {
    if (!v9)
    {
      if (!(v5 | v6))
      {
LABEL_35:
        v16 = -4194304;
        goto LABEL_36;
      }
LABEL_32:
      v16 = v11 & 0x80000000 | 0x7F800000;
      if ((~v7 & 0x7F800000) != 0)
        goto LABEL_83;
      if (!v10)
      {
        if (((v11 ^ v7) & 0x80000000) != 0)
          goto LABEL_35;
LABEL_83:
        *a4 = v16;
        return result;
      }
LABEL_22:
      if ((v16 & 0x7FC00000) == 0x7F800000 && (v16 & 0x3FFFFF) != 0)
      {
        *a4 = v16 | 0x400000;
        return result;
      }
      goto LABEL_36;
    }
LABEL_9:
    if (v6)
      v12 = (~v4 & 0x7F800000) == 0;
    else
      v12 = 0;
    if (v12)
      v13 = v4;
    else
      v13 = *a2;
    if ((v4 & 0x7FC00000) != 0x7F800000 || (v4 & 0x3FFFFF) == 0)
      v15 = v13;
    else
      v15 = v4;
    v16 = v15 | 0x400000;
    goto LABEL_22;
  }
  v17 = (v7 >> 23);
  if (v17 == 255)
  {
    v16 = *a3;
    if (v10)
    {
      v16 = 0;
LABEL_36:
      if ((v16 & 0x7FFFFF) == 0 || (~v16 & 0x7F800000) != 0)
        v16 = *a3;
      *a4 = v16 | 0x400000;
      return result;
    }
    goto LABEL_83;
  }
  if (v5)
  {
    if ((*a2 >> 23))
      goto LABEL_62;
    goto LABEL_52;
  }
  if (!v6)
    goto LABEL_80;
  v19 = v6 << 16;
  if (v6 >= 0x10000)
    v19 = v6;
  result = 16 * (v6 < 0x10000);
  LODWORD(v20) = v19 << 8;
  if (HIBYTE(v19))
    v20 = v19;
  else
    v20 = v20;
  v21 = byte_1003BD248[v20 >> 24];
  if (HIBYTE(v19))
    v22 = 16 * (v6 < 0x10000);
  else
    v22 = (16 * (v6 < 0x10000)) | 8;
  v23 = v22 + v21 - 8;
  v5 = 1 - v23;
  v6 <<= v23;
  if (!(*a2 >> 23))
  {
LABEL_52:
    if (v9)
    {
      v24 = *a2 << 16;
      if (v9 >= 0x10000)
        v24 = *a2 & 0x7FFFFF;
      result = 16 * (v9 < 0x10000);
      LODWORD(v25) = v24 << 8;
      if (HIBYTE(v24))
        v25 = v24;
      else
        v25 = v25;
      v26 = byte_1003BD248[v25 >> 24];
      if (HIBYTE(v24))
        v27 = 16 * (v9 < 0x10000);
      else
        v27 = (16 * (v9 < 0x10000)) | 8;
      v28 = v27 + v26 - 8;
      v8 = 1 - v28;
      v9 <<= v28;
      goto LABEL_62;
    }
LABEL_80:
    v16 = *a3;
    if (((v11 ^ v7) & 0x80000000) == 0 || v17 | v10)
      goto LABEL_83;
    goto LABEL_82;
  }
LABEL_62:
  v29 = v8 + v5;
  v30 = ((v9 << 7) | 0x40000000) * (unint64_t)((v6 << 7) | 0x40000000);
  if (v30 >> 61)
    v31 = -126;
  else
    v31 = -127;
  v32 = v29 + v31;
  v33 = v30 << (v30 >> 61 == 0);
  if (!(v7 >> 23))
  {
    if (!v10)
    {
      v47 = v32 - 1;
      v48 = (v33 >> 31) | ((v33 & 0x7FFFC000) != 0);
      v49 = v11 >> 31;
      if ((unsigned __int16)(v32 - 1) < 0xFDu)
        goto LABEL_132;
      goto LABEL_126;
    }
    v34 = *a3 << 16;
    if (v10 >= 0x10000)
      v34 = *a3 & 0x7FFFFF;
    LODWORD(v35) = v34 << 8;
    result = HIBYTE(v34);
    if ((_DWORD)result)
      v35 = v34;
    else
      v35 = v35;
    v36 = byte_1003BD248[v35 >> 24];
    if ((_DWORD)result)
      v37 = 16 * (v10 < 0x10000);
    else
      v37 = (16 * (v10 < 0x10000)) | 8;
    v38 = v37 + v36 - 8;
    v17 = 1 - v38;
    v10 <<= v38;
  }
  v39 = (v10 << 6) | 0x20000000;
  v40 = v32 - v17;
  if (((v11 ^ v7) & 0x80000000) == 0)
  {
    if (v40 <= 0)
    {
      if ((32 - v40) > 0x3E)
        v45 = 1;
      else
        v45 = (v33 >> (32 - v40)) | (v33 << (v40 + 32) != 0);
      v46 = v45 + v39;
    }
    else
    {
      if ((unsigned __int16)(v32 - v17) > 0x3Eu)
        v41 = 1;
      else
        v41 = ((unint64_t)(v39 << 32) >> (v32 - v17)) | (v39 << 32 << (v17 - v32) != 0);
      v46 = ((v41 + v33) >> 32) | ((_DWORD)v41 + (_DWORD)v33 != 0);
      v17 = v32;
    }
    v49 = v11 >> 31;
    if (v46 >> 30)
      v47 = v17;
    else
      v47 = v17 - 1;
    if (v46 >> 30)
      v48 = v46;
    else
      v48 = 2 * v46;
    if ((unsigned __int16)v47 < 0xFDu)
      goto LABEL_132;
    goto LABEL_126;
  }
  v42 = v39 << 32;
  if ((((_WORD)v32 - (_WORD)v17) & 0x8000) == 0)
  {
    if ((unsigned __int16)v32 != (unsigned __int16)v17)
    {
      if ((unsigned __int16)(v32 - v17) > 0x3Eu)
        v52 = 1;
      else
        v52 = (v42 >> (v32 - v17)) | (v42 << (v17
                                                                              - v32) != 0);
      v44 = v11 >> 31;
      v43 = v33 - v52;
      goto LABEL_114;
    }
    v43 = v33 - v42;
    if (v43)
    {
      if ((v43 & 0x8000000000000000) != 0)
      {
        v44 = (v11 & 0x80000000) == 0;
        v43 = -(uint64_t)v43;
      }
      else
      {
        v44 = v11 >> 31;
      }
LABEL_114:
      v17 = v32;
      goto LABEL_115;
    }
LABEL_82:
    v16 = 0;
    goto LABEL_83;
  }
  v50 = -v40;
  if (v50 > 0x3E)
    v51 = 1;
  else
    v51 = (v33 >> v50) | (v33 << v40 != 0);
  v44 = v7 >> 31;
  v43 = v42 - v51;
LABEL_115:
  v53 = HIDWORD(v43);
  v54 = 32 * (HIDWORD(v43) == 0);
  if (!HIDWORD(v43))
    LODWORD(v53) = v43;
  if (v53 < 0x10000)
  {
    v54 = (32 * (HIDWORD(v43) == 0)) | 0x10;
    LODWORD(v53) = (_DWORD)v53 << 16;
  }
  v55 = v54 | 8;
  if (BYTE3(v53))
  {
    v55 = v54;
    v53 = v53;
  }
  else
  {
    v53 = ((_DWORD)v53 << 8);
  }
  v56 = v55 + byte_1003BD248[v53 >> 24];
  v47 = v17 - (char)(v56 - 1);
  if (((v56 - 33) & 0x80) != 0)
    v48 = (v43 >> (33 - v56)) | ((v43 & ~(-1 << (33 - v56))) != 0);
  else
    v48 = (_DWORD)v43 << (v56 - 33);
  v49 = v44;
  if ((unsigned __int16)v47 < 0xFDu)
    goto LABEL_132;
LABEL_126:
  if ((v47 & 0x8000) != 0)
  {
    v57 = -v47;
    v58 = (unsigned __int16)v57;
    v59 = v48 != 0;
    v48 = (v48 >> v57) | (v48 << -(char)v57 != 0);
    v47 = 0;
    if (v58 > 0x1E)
      v48 = v59;
  }
  else
  {
    if ((unsigned __int16)v47 > 0xFDu || ((v48 + 64) & 0x80000000) != 0)
    {
      if (v49)
        v65 = -8388608;
      else
        v65 = 2139095040;
      *a4 = v65;
      return result;
    }
    v47 = 253;
  }
LABEL_132:
  v60 = v48 + 64;
  v61 = ~((v48 & 0x7F) == 64);
  if (v49)
    v62 = 0x80000000;
  else
    v62 = 0;
  v63 = v47 << 23;
  v64 = v61 & (v60 >> 7);
  if (!v64)
    v63 = 0;
  *a4 = (v64 | v62) + v63;
  return result;
}

unint64_t *sub_10028AED0(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _BOOL4 v5;
  unint64_t *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v38;
  unint64_t *v39;
  int v40;
  unint64_t *v41;
  int v42;
  unint64_t *v43;
  int v44;
  unint64_t *v45;
  int v46;
  unint64_t *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;

  v2 = result;
  v3 = *a2;
  v4 = *a2 & 0x7FFFFFFFFFFFFFFFLL;
  if (v4 >= 0x7FF0000000000001)
  {
    *result = 0x7FFFFFFFFFFFFFFFLL;
    return result;
  }
  if (v4 != 0x7FF0000000000000)
  {
    v7 = a2;
    v8 = atomic_load((unsigned __int8 *)&qword_100497DB0);
    if ((v8 & 1) == 0)
    {
      v38 = __cxa_guard_acquire(&qword_100497DB0);
      v7 = a2;
      if (v38)
      {
        v63 = 0x3FF0000000000000;
        sub_10028A5A4(&v63, (uint64_t *)&qword_1003BD220, (unint64_t *)&qword_100497DA8);
        __cxa_guard_release(&qword_100497DB0);
        v7 = a2;
      }
    }
    v9 = atomic_load((unsigned __int8 *)&qword_100497DC0);
    if ((v9 & 1) == 0)
    {
      v39 = v7;
      v40 = __cxa_guard_acquire(&qword_100497DC0);
      v7 = v39;
      if (v40)
      {
        v63 = 0x3FE62E42FEFA39F1;
        sub_10028A5A4(&v63, (uint64_t *)&qword_1003BD220, (unint64_t *)&qword_100497DB8);
        __cxa_guard_release(&qword_100497DC0);
        v7 = v39;
      }
    }
    v10 = atomic_load((unsigned __int8 *)&qword_100497DD0);
    if ((v10 & 1) == 0)
    {
      v41 = v7;
      v42 = __cxa_guard_acquire(&qword_100497DD0);
      v7 = v41;
      if (v42)
      {
        v63 = 0x3FCEBFBDFF82A45ALL;
        sub_10028A5A4(&v63, (uint64_t *)&qword_1003BD220, (unint64_t *)&qword_100497DC8);
        __cxa_guard_release(&qword_100497DD0);
        v7 = v41;
      }
    }
    v11 = atomic_load((unsigned __int8 *)&qword_100497DE0);
    if ((v11 & 1) == 0)
    {
      v43 = v7;
      v44 = __cxa_guard_acquire(&qword_100497DE0);
      v7 = v43;
      if (v44)
      {
        v63 = 0x3FAC6B08D81FEC75;
        sub_10028A5A4(&v63, (uint64_t *)&qword_1003BD220, (unint64_t *)&qword_100497DD8);
        __cxa_guard_release(&qword_100497DE0);
        v7 = v43;
      }
    }
    v12 = atomic_load((unsigned __int8 *)&qword_100497DF0);
    if ((v12 & 1) == 0)
    {
      v45 = v7;
      v46 = __cxa_guard_acquire(&qword_100497DF0);
      v7 = v45;
      if (v46)
      {
        v63 = 0x3F83B2A72B4F3CD3;
        sub_10028A5A4(&v63, (uint64_t *)&qword_1003BD220, (unint64_t *)&qword_100497DE8);
        __cxa_guard_release(&qword_100497DF0);
        v7 = v45;
      }
    }
    v13 = atomic_load((unsigned __int8 *)&qword_100497E00);
    if ((v13 & 1) == 0)
    {
      v47 = v7;
      v48 = __cxa_guard_acquire(&qword_100497E00);
      v7 = v47;
      if (v48)
      {
        v63 = 0x3F55E7AA1566C2A4;
        sub_10028A5A4(&v63, (uint64_t *)&qword_1003BD220, &qword_100497DF8);
        __cxa_guard_release(&qword_100497E00);
        v7 = v47;
      }
    }
    if ((*v7 & 0x7FE0000000000000) < 0x4090000000000001)
    {
      sub_10028A2EC(v7, &qword_1003BD228, &v63);
      v14 = v63;
    }
    else
    {
      v14 = *v7 & 0x8000000000000000 | 0x4107700000000000;
    }
    v63 = v14;
    v15 = v14 & 0xFFFFFFFFFFFFFLL;
    v16 = (v14 & 0xFFFFFFFFFFFFFLL) == 0;
    v17 = (v14 >> 52) & 0x7FF;
    v18 = v14 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    if (!v17)
      v18 = v14 & 0xFFFFFFFFFFFFFLL;
    if (v17 != 2047)
      v16 = 1;
    if ((v14 & 0x8000000000000000) == 0)
      v16 = 0;
    if (v17 <= 0x426)
    {
      if (v17 < 0x3E9)
      {
        v18 = v18 != 0;
LABEL_33:
        v19 = ((v18 + 2048) >> 12) & ~((v18 & 0xFFF) == 2048);
        if (v16)
          v20 = -v19;
        else
          v20 = v19;
        if (!v19 || v16 == v20 >> 31)
        {
LABEL_41:
          v21 = v20 >> 6;
          if (v20 >> 6 >= 1024)
            v21 = 1024;
          if (v21 <= -1023)
            v21 = -1023;
          v62 = (unint64_t)(v21 + 1023) << 52;
          v22 = (v14 >> 52) & 0x7FF;
          if (v22 > 0x3FE)
          {
            if (v22 < 0x433)
            {
              v29 = 1 << (51 - (v14 >> 52));
              v30 = v14 + (v29 >> 1);
              v31 = -1;
              if ((v30 & (v29 - 1)) == 0)
                v31 = ~v29;
              v25 = v31 & -(uint64_t)v29 & v30;
              v26 = v14 >> 63;
              if (v14 >> 63 != v25 >> 63)
                goto LABEL_74;
            }
            else
            {
              v25 = v14;
              if (v15)
              {
                v25 = v14;
                if ((_DWORD)v22 == 2047)
                {
                  if ((v14 & 0x7FFFFFFFFFFFFLL) != 0 && (v14 & 0x7FF8000000000000) == 0x7FF0000000000000
                    || (~v14 & 0x7FF0000000000000) == 0)
                  {
                    v25 = v14 | 0x8000000000000;
                  }
                  else
                  {
                    v25 = 0x8000000000000;
                  }
                }
              }
              v26 = v14 >> 63;
              if (v14 >> 63 != v25 >> 63)
                goto LABEL_74;
            }
          }
          else
          {
            v23 = (_DWORD)v22 != 1022 || v15 == 0;
            v24 = v14 & 0x8000000000000000 | 0x3FF0000000000000;
            if (v23)
              v24 = v14 & 0x8000000000000000;
            if ((v14 & 0x7FFFFFFFFFFFFFFFLL) != 0)
              v25 = v24;
            else
              v25 = v14;
            v26 = v14 >> 63;
            if (v14 >> 63 != v25 >> 63)
            {
LABEL_74:
              sub_10028CD14(&v61, v14, v25, v26);
              goto LABEL_75;
            }
          }
          sub_10028CF1C(&v61, v14, v25, v26);
LABEL_75:
          sub_10028A2EC(&v61, &qword_1003BD230, &v63);
          sub_10028A2EC(&v62, &qword_1003BD220, &v60);
          v59 = qword_1003BD348[v20 & 0x3F];
          sub_10028A2EC(&v60, &v59, &v61);
          sub_10028A2EC(&qword_100497DF8, &v63, &v49);
          v32 = v49 >> 63;
          if (v49 >> 63 == (unint64_t)qword_100497DE8 >> 63)
            sub_10028CD14(&v50, v49, qword_100497DE8, v32);
          else
            sub_10028CF1C(&v50, v49, qword_100497DE8, v32);
          sub_10028A2EC(&v50, &v63, &v51);
          v33 = v51 >> 63;
          if (v51 >> 63 == (unint64_t)qword_100497DD8 >> 63)
            sub_10028CD14(&v52, v51, qword_100497DD8, v33);
          else
            sub_10028CF1C(&v52, v51, qword_100497DD8, v33);
          sub_10028A2EC(&v52, &v63, &v53);
          v34 = v53 >> 63;
          if (v53 >> 63 == (unint64_t)qword_100497DC8 >> 63)
            sub_10028CD14(&v54, v53, qword_100497DC8, v34);
          else
            sub_10028CF1C(&v54, v53, qword_100497DC8, v34);
          sub_10028A2EC(&v54, &v63, &v55);
          v35 = v55 >> 63;
          if (v55 >> 63 == (unint64_t)qword_100497DB8 >> 63)
            sub_10028CD14(&v56, v55, qword_100497DB8, v35);
          else
            sub_10028CF1C(&v56, v55, qword_100497DB8, v35);
          sub_10028A2EC(&v56, &v63, &v57);
          v36 = v57 >> 63;
          if (v57 >> 63 == (unint64_t)qword_100497DA8 >> 63)
            sub_10028CD14(&v58, v57, qword_100497DA8, v36);
          else
            sub_10028CF1C(&v58, v57, qword_100497DA8, v36);
          return sub_10028A2EC(&v61, &v58, v2);
        }
LABEL_38:
        if (v16)
          v20 = 0x80000000;
        else
          v20 = 0x7FFFFFFF;
        goto LABEL_41;
      }
      v18 = (v18 >> (39 - v17)) | (v18 << ((v14 >> 52) + 25) != 0);
    }
    if (v18 > 0xFFFFFFFF7FFLL)
      goto LABEL_38;
    goto LABEL_33;
  }
  v5 = (~v3 & 0x7FF0000000000000) != 0;
  if ((v3 & 0xFFFFFFFFFFFFFLL) == 0)
    v5 = 1;
  if (v3 != 0x7FF0000000000000 || !v5)
    *result = 0;
  else
    *result = 0x7FF0000000000000;
  return result;
}

unint64_t *sub_10028B570(unint64_t *result, _QWORD *a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  int v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  int v38;
  _QWORD *v39;
  int v40;
  _QWORD *v41;
  int v42;
  _QWORD *v43;
  int v44;
  _QWORD *v45;
  int v46;
  _QWORD *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;

  v2 = result;
  v3 = *a2;
  v4 = *a2 & 0x7FFFFFFFFFFFFFFFLL;
  if (v4 > 0x7FF0000000000000)
    goto LABEL_2;
  if ((~v3 & 0x7FF0000000000000) == 0 && (v3 & 0xFFFFFFFFFFFFFLL) != 0)
    goto LABEL_10;
  if (v3 < 0)
  {
    if (v4)
    {
LABEL_2:
      *result = 0x7FFFFFFFFFFFFFFFLL;
      return result;
    }
    goto LABEL_22;
  }
  if (!v4)
  {
LABEL_22:
    *result = 0xFFF0000000000000;
    return result;
  }
LABEL_10:
  v6 = atomic_load((unsigned __int8 *)&qword_100497E10);
  if ((v6 & 1) == 0)
  {
    v33 = a2;
    v34 = __cxa_guard_acquire(&qword_100497E10);
    a2 = v33;
    if (v34)
    {
      qword_100497E08 = 0x3FF0000000000000;
      __cxa_guard_release(&qword_100497E10);
      a2 = v33;
    }
  }
  v7 = atomic_load((unsigned __int8 *)&qword_100497E20);
  if ((v7 & 1) == 0)
  {
    v35 = a2;
    v36 = __cxa_guard_acquire(&qword_100497E20);
    a2 = v35;
    if (v36)
    {
      v69 = 0x4000000000000000;
      v70 = 0xBFF0000000000000;
      sub_10028A5A4(&v70, (uint64_t *)&v69, (unint64_t *)&qword_100497E18);
      __cxa_guard_release(&qword_100497E20);
      a2 = v35;
    }
  }
  v8 = atomic_load((unsigned __int8 *)&qword_100497E30);
  if ((v8 & 1) == 0)
  {
    v37 = a2;
    v38 = __cxa_guard_acquire(&qword_100497E30);
    a2 = v37;
    if (v38)
    {
      v69 = 0x4008000000000000;
      v70 = 0x3FF0000000000000;
      sub_10028A5A4(&v70, (uint64_t *)&v69, (unint64_t *)&qword_100497E28);
      __cxa_guard_release(&qword_100497E30);
      a2 = v37;
    }
  }
  v9 = atomic_load((unsigned __int8 *)&qword_100497E40);
  if ((v9 & 1) == 0)
  {
    v39 = a2;
    v40 = __cxa_guard_acquire(&qword_100497E40);
    a2 = v39;
    if (v40)
    {
      v69 = 0x4010000000000000;
      v70 = 0xBFF0000000000000;
      sub_10028A5A4(&v70, (uint64_t *)&v69, (unint64_t *)&qword_100497E38);
      __cxa_guard_release(&qword_100497E40);
      a2 = v39;
    }
  }
  v10 = atomic_load((unsigned __int8 *)&qword_100497E50);
  if ((v10 & 1) == 0)
  {
    v41 = a2;
    v42 = __cxa_guard_acquire(&qword_100497E50);
    a2 = v41;
    if (v42)
    {
      v69 = 0x4014000000000000;
      v70 = 0x3FF0000000000000;
      sub_10028A5A4(&v70, (uint64_t *)&v69, (unint64_t *)&qword_100497E48);
      __cxa_guard_release(&qword_100497E50);
      a2 = v41;
    }
  }
  v11 = atomic_load((unsigned __int8 *)&qword_100497E60);
  if ((v11 & 1) == 0)
  {
    v43 = a2;
    v44 = __cxa_guard_acquire(&qword_100497E60);
    a2 = v43;
    if (v44)
    {
      v69 = 0x4018000000000000;
      v70 = 0xBFF0000000000000;
      sub_10028A5A4(&v70, (uint64_t *)&v69, (unint64_t *)&qword_100497E58);
      __cxa_guard_release(&qword_100497E60);
      a2 = v43;
    }
  }
  v12 = atomic_load((unsigned __int8 *)&qword_100497E70);
  if ((v12 & 1) == 0)
  {
    v45 = a2;
    v46 = __cxa_guard_acquire(&qword_100497E70);
    a2 = v45;
    if (v46)
    {
      v69 = 0x401C000000000000;
      v70 = 0x3FF0000000000000;
      sub_10028A5A4(&v70, (uint64_t *)&v69, &qword_100497E68);
      __cxa_guard_release(&qword_100497E70);
      a2 = v45;
    }
  }
  v13 = atomic_load((unsigned __int8 *)qword_100497E80);
  if ((v13 & 1) == 0)
  {
    v47 = a2;
    v48 = __cxa_guard_acquire(qword_100497E80);
    a2 = v47;
    if (v48)
    {
      v69 = 0x4020000000000000;
      v70 = 0xBFF0000000000000;
      sub_10028A5A4(&v70, (uint64_t *)&v69, &qword_100497E78);
      __cxa_guard_release(qword_100497E80);
      a2 = v47;
    }
  }
  v14 = *a2;
  v15 = *a2 >> 44;
  v69 = *a2 & 0xFFFFFFFFFFFLL | 0x3FF0000000000000;
  sub_10028CF1C(&v69, v69, 0x3FF0000000000000uLL, 0);
  v16 = qword_1003BD550[2 * v15];
  v68 = qword_1003BD550[(2 * v15) | 1u];
  sub_10028A2EC(&v69, &v68, &v67);
  if (v15 == 255)
  {
    v65 = 0xBFF0000000000000;
    v64 = 0x4080000000000000;
    sub_10028A5A4(&v65, (uint64_t *)&v64, &v66);
    v17 = v67 >> 63;
    if (v67 >> 63 == v66 >> 63)
      sub_10028CD14(&v70, v67, v66, v17);
    else
      sub_10028CF1C(&v70, v67, v66, v17);
    v67 = v70;
  }
  sub_10028A2EC(&v67, &v67, &v70);
  v18 = ((v14 >> 52) & 0x7FF) - 1023;
  if (((v14 >> 52) & 0x7FF) == 0x3FF)
  {
    v23 = 0;
  }
  else
  {
    if (v18 >= 0)
      v19 = v18;
    else
      v19 = 1023 - ((v14 >> 52) & 0x7FF);
    if (v19 >= 0x100)
      v20 = 16;
    else
      v20 = 24;
    v21 = byte_1003BD248[(unint64_t)((_DWORD)v19 << v20) >> 24];
    if (v19 >= 0x100)
      v22 = 37;
    else
      v22 = 45;
    v23 = (v19 << (v21 + v22))
        + ((unint64_t)(v18 >> 31) << 63)
        + ((unint64_t)(1074 - (char)(v21 + v22)) << 52);
  }
  v63 = v23;
  sub_10028A2EC((unint64_t *)&unk_1003BD238, &v63, &v64);
  v24 = v64 >> 63;
  if (v64 >> 63 == v16 >> 63)
    sub_10028CD14(&v65, v64, v16, v24);
  else
    sub_10028CF1C(&v65, v64, v16, v24);
  sub_10028A2EC(&qword_100497E78, &v70, &v56);
  v25 = v56 >> 63;
  if (v56 >> 63 == (unint64_t)qword_100497E58 >> 63)
    sub_10028CD14(&v57, v56, qword_100497E58, v25);
  else
    sub_10028CF1C(&v57, v56, qword_100497E58, v25);
  sub_10028A2EC(&v57, &v70, &v58);
  v26 = v58 >> 63;
  if (v58 >> 63 == (unint64_t)qword_100497E38 >> 63)
    sub_10028CD14(&v59, v58, qword_100497E38, v26);
  else
    sub_10028CF1C(&v59, v58, qword_100497E38, v26);
  sub_10028A2EC(&v59, &v70, &v60);
  v27 = v60 >> 63;
  if (v60 >> 63 == (unint64_t)qword_100497E18 >> 63)
    sub_10028CD14(&v61, v60, qword_100497E18, v27);
  else
    sub_10028CF1C(&v61, v60, qword_100497E18, v27);
  sub_10028A2EC(&v61, &v70, &v62);
  v28 = v65 >> 63;
  if (v65 >> 63 == v62 >> 63)
    sub_10028CD14(&v66, v65, v62, v28);
  else
    sub_10028CF1C(&v66, v65, v62, v28);
  sub_10028A2EC(&qword_100497E68, &v70, &v49);
  v29 = v49 >> 63;
  if (v49 >> 63 == (unint64_t)qword_100497E48 >> 63)
    sub_10028CD14(&v50, v49, qword_100497E48, v29);
  else
    sub_10028CF1C(&v50, v49, qword_100497E48, v29);
  sub_10028A2EC(&v50, &v70, &v51);
  v30 = v51 >> 63;
  if (v51 >> 63 == (unint64_t)qword_100497E28 >> 63)
    sub_10028CD14(&v52, v51, qword_100497E28, v30);
  else
    sub_10028CF1C(&v52, v51, qword_100497E28, v30);
  sub_10028A2EC(&v52, &v70, &v53);
  v31 = v53 >> 63;
  if (v53 >> 63 == (unint64_t)qword_100497E08 >> 63)
    sub_10028CD14(&v54, v53, qword_100497E08, v31);
  else
    sub_10028CF1C(&v54, v53, qword_100497E08, v31);
  sub_10028A2EC(&v54, &v67, &v55);
  v32 = v66 >> 63;
  if (v66 >> 63 == v55 >> 63)
    return sub_10028CD14(v2, v66, v55, v32);
  else
    return sub_10028CF1C(v2, v66, v55, v32);
}

uint64_t sub_10028BBF8@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  BOOL v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t result;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t *v23;
  _BOOL4 v24;
  uint64_t v25;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v45;
  BOOL v47;
  uint64_t v48;
  int v49;
  int v50;
  _BOOL4 v51;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = *a1;
  v63 = *a2;
  v5 = atomic_load((unsigned __int8 *)&qword_100497EB0);
  if ((v5 & 1) == 0)
  {
    v55 = v4;
    v56 = __cxa_guard_acquire(&qword_100497EB0);
    v4 = v55;
    if (v56)
    {
      qword_100497EA8 = 0;
      __cxa_guard_release(&qword_100497EB0);
      v4 = v55;
    }
  }
  v6 = atomic_load((unsigned __int8 *)&qword_100497EC0);
  if ((v6 & 1) == 0)
  {
    v57 = v4;
    v58 = __cxa_guard_acquire(&qword_100497EC0);
    v4 = v57;
    if (v58)
    {
      qword_100497EB8 = 0x3FF0000000000000;
      __cxa_guard_release(&qword_100497EC0);
      v4 = v57;
    }
  }
  v7 = atomic_load((unsigned __int8 *)&qword_100497ED0);
  if ((v7 & 1) == 0)
  {
    v59 = v4;
    v60 = __cxa_guard_acquire(&qword_100497ED0);
    v4 = v59;
    if (v60)
    {
      qword_100497EC8 = 0x7FF0000000000000;
      __cxa_guard_release(&qword_100497ED0);
      v4 = v59;
    }
  }
  v8 = atomic_load((unsigned __int8 *)&qword_100497EE0);
  if ((v8 & 1) == 0)
  {
    v61 = v4;
    v62 = __cxa_guard_acquire(&qword_100497EE0);
    v4 = v61;
    if (v62)
    {
      qword_100497ED8 = 0x7FFFFFFFFFFFFFFFLL;
      __cxa_guard_release(&qword_100497EE0);
      v4 = v61;
    }
  }
  v9 = v63;
  v10 = qword_100497EA8;
  v11 = (qword_100497EA8 & 0xFFFFFFFFFFFFFLL) != 0 && (~qword_100497EA8 & 0x7FF0000000000000) == 0;
  if (!v11 && ((~v63 & 0x7FF0000000000000) != 0 || (v63 & 0xFFFFFFFFFFFFFLL) == 0))
  {
    if ((unint64_t)qword_100497EA8 >> 63 == v63 >> 63)
    {
      if (qword_100497EA8 != v63)
      {
        v12 = (unint64_t)qword_100497EA8 >> 63 == qword_100497EA8 < v63;
        goto LABEL_76;
      }
    }
    else if (qword_100497EA8 < 0)
    {
      v12 = ((qword_100497EA8 | v63) & 0x7FFFFFFFFFFFFFFFLL) == 0;
LABEL_76:
      v13 = !v12;
      goto LABEL_16;
    }
  }
  v13 = 0;
LABEL_16:
  v14 = v4 & 0x7FFFFFFFFFFFFFFFLL;
  v15 = v63 & 0x7FFFFFFFFFFFFFFFLL;
  v16 = qword_100497EB8;
  v17 = (qword_100497EB8 & 0xFFFFFFFFFFFFFLL) != 0 && (~qword_100497EB8 & 0x7FF0000000000000) == 0;
  if (v17 || (~v4 & 0x7FF0000000000000) == 0 && (v4 & 0xFFFFFFFFFFFFFLL) != 0)
  {
LABEL_24:
    v18 = 0;
    *a3 = 0;
    result = 0x7FF0000000000001;
    if (v15 >= 0x7FF0000000000001)
      goto LABEL_25;
    goto LABEL_30;
  }
  if (qword_100497EB8 < 0)
  {
    v18 = ((qword_100497EB8 | v4) & 0x7FFFFFFFFFFFFFFFLL) != 0;
    *a3 = 0;
    result = 0x7FF0000000000001;
    if (v15 >= 0x7FF0000000000001)
      goto LABEL_25;
  }
  else
  {
    if (qword_100497EB8 == v14)
      goto LABEL_24;
    v18 = (unint64_t)qword_100497EB8 >> 63 != qword_100497EB8 < v14;
    *a3 = 0;
    result = 0x7FF0000000000001;
    if (v15 >= 0x7FF0000000000001)
      goto LABEL_25;
  }
LABEL_30:
  if (v15 == 0x7FF0000000000000)
  {
    v20 = v13 ^ v18;
    v21 = (~v4 & 0x7FF0000000000000) == 0;
    if ((v4 & 0xFFFFFFFFFFFFFLL) == 0)
      v21 = 0;
    if (v21 || v17)
    {
      v22 = 368;
      if (v20)
        v22 = 336;
      v23 = (uint64_t *)((char *)&unk_100497D58 + v22);
      if (v14 > 0x7FF0000000000000)
        v23 = &qword_100497ED8;
    }
    else
    {
      v27 = ((v16 | v4) & 0x7FFFFFFFFFFFFFFFLL) == 0 || v14 == v16;
      v12 = v20 == 0;
      v28 = 368;
      if (!v12)
        v28 = 336;
      v12 = !v27 && v14 <= 0x7FF0000000000000;
      v29 = 384;
      if (v12)
        v29 = v28;
      v23 = (uint64_t *)((char *)&unk_100497D58 + v29);
    }
    goto LABEL_96;
  }
  result = v9 & 0x7FF0000000000000;
  v24 = (v9 & 0x7FF0000000000000) != 0x7FF0000000000000;
  v25 = v9 & 0xFFFFFFFFFFFFFLL;
  if ((v9 & 0xFFFFFFFFFFFFFLL) == 0)
    v24 = 1;
  if (!v24)
  {
LABEL_48:
    if (v14 < 0x7FF0000000000001)
    {
      if (v14 == 0x7FF0000000000000)
      {
        if (!v11 && v24)
        {
          if (v9 >> 63 == v10 >> 63)
          {
            if (v9 != v10 && v10 >> 63 != v9 < v10)
            {
LABEL_140:
              v23 = &qword_100497EA8;
LABEL_96:
              if (v23 != (uint64_t *)a3)
                *a3 = *v23;
              return result;
            }
          }
          else if ((v9 & 0x8000000000000000) != 0 && ((v10 | v9) & 0x7FFFFFFFFFFFFFFFLL) != 0)
          {
            goto LABEL_140;
          }
        }
LABEL_95:
        v23 = &qword_100497EC8;
        goto LABEL_96;
      }
      v30 = (v9 >> 52) & 0x7FF;
      if (v30 > 0x3FE)
      {
        if (v30 < 0x433)
        {
          v35 = 1 << (51 - (v9 >> 52));
          v36 = v9 + (v35 >> 1);
          v37 = -1;
          if ((v36 & (v35 - 1)) == 0)
            v37 = ~v35;
          v31 = v37 & -(uint64_t)v35 & v36;
        }
        else
        {
          v31 = v9;
          if (v25)
          {
            v31 = v9;
            if ((_DWORD)v30 == 2047)
            {
              v33 = (v9 & 0x7FFFFFFFFFFFFLL) != 0 && (v9 & 0x7FF8000000000000) == 0x7FF0000000000000;
              v34 = v33 || result == 0x7FF0000000000000;
              v31 = 0x8000000000000;
              if (v34)
                v31 = v9 | 0x8000000000000;
            }
          }
        }
      }
      else
      {
        v31 = v9;
        if (v15)
        {
          v32 = (_DWORD)v30 != 1022 || v25 == 0;
          v31 = v9 & 0x8000000000000000 | 0x3FF0000000000000;
          if (v32)
            v31 = v9 & 0x8000000000000000;
        }
      }
      if (!v24
        || (~v31 & 0x7FF0000000000000) == 0 && (v31 & 0xFFFFFFFFFFFFFLL) != 0
        || v9 != v31 && ((v31 | v9) & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
        v38 = (~v4 & 0x7FF0000000000000) == 0;
        if ((v4 & 0xFFFFFFFFFFFFFLL) == 0)
          v38 = 0;
        if (v38 || v11)
          goto LABEL_117;
        v39 = v10 >> 63;
        if (v4 >> 63 == v10 >> 63)
        {
          if (v4 != v10 && (_DWORD)v39 != v4 < v10)
            goto LABEL_25;
        }
        else if ((v4 & 0x8000000000000000) != 0 && ((v10 | v4) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
          goto LABEL_25;
        }
        if (v4 != v10 && ((v10 | v4) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
LABEL_117:
          v65 = v4;
          sub_10028B570((unint64_t *)&v66, &v65);
          sub_10028A2EC(&v63, (unint64_t *)&v66, (unint64_t *)&v67);
          return (uint64_t)sub_10028AED0(a3, (unint64_t *)&v67);
        }
        if (!v24)
          goto LABEL_140;
        if (v9 >> 63 == (_DWORD)v39)
        {
          if (v9 != v10 && (_DWORD)v39 != v9 < v10)
            goto LABEL_95;
        }
        else if ((v9 & 0x8000000000000000) != 0 && ((v10 | v9) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
          goto LABEL_95;
        }
        v47 = ((v10 | v9) & 0x7FFFFFFFFFFFFFFFLL) == 0 || v9 == v10;
        v12 = !v47;
        v48 = 336;
        if (!v12)
          v48 = 352;
        v23 = (uint64_t *)((char *)&unk_100497D58 + v48);
        goto LABEL_96;
      }
      v40 = v9 >> 52;
      v41 = v25 | 0x10000000000000;
      v42 = (v9 >> 52) & 0x7FF;
      if (((v9 >> 52) & 0x7FF) == 0)
        v41 = v9 & 0xFFFFFFFFFFFFFLL;
      if (v25)
        v43 = (_DWORD)v42 == 2047;
      else
        v43 = 0;
      v45 = !v43 && (v9 & 0x8000000000000000) != 0;
      if (v42 <= 0x426)
      {
        if (v42 < 0x3E9)
        {
          v41 = v41 != 0;
          goto LABEL_154;
        }
        v41 = (v41 >> (39 - v42)) | (v41 << (v40 + 25) != 0);
      }
      if (v41 > 0xFFFFFFFF7FFLL)
      {
LABEL_159:
        if (v45)
          v50 = 0x80000000;
        else
          v50 = 0x7FFFFFFF;
LABEL_162:
        v51 = (~v4 & 0x7FF0000000000000) != 0;
        if ((v4 & 0xFFFFFFFFFFFFFLL) == 0)
          v51 = 1;
        if (v14 || !v51)
        {
          v65 = v4;
          v66 = 0x3FF0000000000000;
          if (v50 >= 0)
            v53 = v50;
          else
            v53 = -v50;
          if (v50 < 0)
          {
            v64 = 0x3FF0000000000000;
            sub_10028A5A4(&v64, (uint64_t *)&v65, (unint64_t *)&v67);
            v65 = v67;
          }
          if (v53 >= 2)
          {
            do
            {
              if ((v53 & 1) != 0)
              {
                sub_10028A2EC((unint64_t *)&v66, &v65, (unint64_t *)&v67);
                v66 = v67;
              }
              sub_10028A2EC(&v65, &v65, (unint64_t *)&v67);
              v65 = v67;
              v54 = v53 > 3;
              v53 >>= 1;
            }
            while (v54);
          }
          result = (uint64_t)sub_10028A2EC((unint64_t *)&v66, &v65, (unint64_t *)&v67);
          *a3 = v67;
        }
        else
        {
          v52 = 0x3FF0000000000000;
          if (v50)
            v52 = 0;
          if (v50 < 0)
            v52 = 0x7FF0000000000000;
          *a3 = v52;
        }
        return result;
      }
LABEL_154:
      v49 = ((v41 + 2048) >> 12) & ~((v41 & 0xFFF) == 2048);
      if (v45)
        v50 = -v49;
      else
        v50 = ((v41 + 2048) >> 12) & ~((v41 & 0xFFF) == 2048);
      if (!v49 || v45 == v50 >> 31)
        goto LABEL_162;
      goto LABEL_159;
    }
LABEL_25:
    if (a3 != (unint64_t *)&qword_100497ED8)
      *a3 = qword_100497ED8;
    return result;
  }
  if (v11 || v9 != v10 && ((v10 | v9) & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    if (!v17 && (v9 == v16 || ((v16 | v9) & 0x7FFFFFFFFFFFFFFFLL) == 0))
    {
      *a3 = v4;
      return result;
    }
    goto LABEL_48;
  }
  if (a3 != (unint64_t *)&qword_100497EB8)
    *a3 = v16;
  return result;
}

unint64_t *sub_10028C398@<X0>(unint64_t *result@<X0>, int *a2@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v3 = *(_DWORD *)result;
  v4 = *(_DWORD *)result & 0x7FFFFFFF;
  if (v4 < 0x7F800001)
  {
    if (v4 == 2139095040)
    {
      *a2 = v3;
      return result;
    }
    v6 = (__int16)((v3 >> 23) - 127) % 3;
    if (v6 >= 0)
      v7 = -3;
    else
      v7 = 0;
    v8 = v7 + v6;
    v34 = 0x4046A09E6653BA70;
    v35 = ((*(_QWORD *)&v3 & 0x7FFFFFLL) << 29) | ((unint64_t)(v7 + v6 + 1023) << 52);
    v33 = 0x402D9E20660EDB21;
    sub_10028A2EC(&v34, &v35, &v24);
    if ((v24 & 0x8000000000000000) != 0)
    {
      sub_10028CF1C(&v25, v24, 0x406808F46C6116E0uLL, 1);
      sub_10028A2EC(&v25, &v35, &v26);
      v9 = v26;
      if ((v26 & 0x8000000000000000) == 0)
      {
LABEL_10:
        sub_10028CD14(&v27, v9, 0x405DCA97439CAE14uLL, 0);
        sub_10028A2EC(&v27, &v35, &v28);
        v10 = v28;
        if ((v28 & 0x8000000000000000) == 0)
          goto LABEL_11;
        goto LABEL_20;
      }
    }
    else
    {
      sub_10028CD14(&v25, v24, 0x406808F46C6116E0uLL, 0);
      sub_10028A2EC(&v25, &v35, &v26);
      v9 = v26;
      if ((v26 & 0x8000000000000000) == 0)
        goto LABEL_10;
    }
    sub_10028CF1C(&v27, v9, 0x405DCA97439CAE14uLL, 1);
    sub_10028A2EC(&v27, &v35, &v28);
    v10 = v28;
    if ((v28 & 0x8000000000000000) == 0)
    {
LABEL_11:
      sub_10028CD14(&v29, v10, 0x402ADD70D2827500uLL, 0);
      sub_10028A2EC(&v29, &v35, &v30);
      v11 = v30;
      if ((v30 & 0x8000000000000000) == 0)
        goto LABEL_12;
      goto LABEL_21;
    }
LABEL_20:
    sub_10028CF1C(&v29, v10, 0x402ADD70D2827500uLL, 1);
    sub_10028A2EC(&v29, &v35, &v30);
    v11 = v30;
    if ((v30 & 0x8000000000000000) == 0)
    {
LABEL_12:
      sub_10028CD14(&v31, v11, 0x3FC4F15F83F55D2DuLL, 0);
      sub_10028A2EC(&v33, &v35, &v16);
      v12 = v16;
      if ((v16 & 0x8000000000000000) == 0)
        goto LABEL_13;
      goto LABEL_22;
    }
LABEL_21:
    sub_10028CF1C(&v31, v11, 0x3FC4F15F83F55D2DuLL, 1);
    sub_10028A2EC(&v33, &v35, &v16);
    v12 = v16;
    if ((v16 & 0x8000000000000000) == 0)
    {
LABEL_13:
      sub_10028CD14(&v17, v12, 0x4062FF15C0285815uLL, 0);
      sub_10028A2EC(&v17, &v35, &v18);
      v13 = v18;
      if ((v18 & 0x8000000000000000) == 0)
        goto LABEL_14;
      goto LABEL_23;
    }
LABEL_22:
    sub_10028CF1C(&v17, v12, 0x4062FF15C0285815uLL, 1);
    sub_10028A2EC(&v17, &v35, &v18);
    v13 = v18;
    if ((v18 & 0x8000000000000000) == 0)
    {
LABEL_14:
      sub_10028CD14(&v19, v13, 0x406510D06A8112CEuLL, 0);
      sub_10028A2EC(&v19, &v35, &v20);
      v14 = v20;
      if ((v20 & 0x8000000000000000) == 0)
        goto LABEL_15;
      goto LABEL_24;
    }
LABEL_23:
    sub_10028CF1C(&v19, v13, 0x406510D06A8112CEuLL, 1);
    sub_10028A2EC(&v19, &v35, &v20);
    v14 = v20;
    if ((v20 & 0x8000000000000000) == 0)
    {
LABEL_15:
      sub_10028CD14(&v21, v14, 0x4040FECBC9E2C375uLL, 0);
      sub_10028A2EC(&v21, &v35, &v22);
      v15 = v22;
      if ((v22 & 0x8000000000000000) == 0)
        goto LABEL_16;
      goto LABEL_25;
    }
LABEL_24:
    sub_10028CF1C(&v21, v14, 0x4040FECBC9E2C375uLL, 1);
    sub_10028A2EC(&v21, &v35, &v22);
    v15 = v22;
    if ((v22 & 0x8000000000000000) == 0)
    {
LABEL_16:
      sub_10028CD14((unint64_t *)&v23, v15, 0x3FF0000000000000uLL, 0);
      result = sub_10028A5A4(&v31, &v23, &v32);
      if (v4)
      {
LABEL_17:
        v5 = (((v3 & 0x80000000)
             + ((((21846 * (__int16)((v3 >> 23) - 127 - v8)) >> 16)
               + ((21846 * (__int16)((v3 >> 23) - 127 - v8)) >> 31)) << 23)) | (v32 >> 29) & 0x7FFFFF)
           + 1056964608;
        goto LABEL_27;
      }
LABEL_26:
      v5 = 0;
      goto LABEL_27;
    }
LABEL_25:
    sub_10028CF1C((unint64_t *)&v23, v15, 0x3FF0000000000000uLL, 1);
    result = sub_10028A5A4(&v31, &v23, &v32);
    if (v4)
      goto LABEL_17;
    goto LABEL_26;
  }
  v5 = 0x7FFFFFFF;
LABEL_27:
  *a2 = v5;
  return result;
}

int *sub_10028C7F8(int *result, int a2, unsigned int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  _BOOL4 v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  _BOOL4 v22;
  BOOL v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  char v27;
  int v28;
  unsigned int v29;

  v3 = (a2 >> 23);
  v4 = a2 & 0x7FFFFF;
  v5 = a3 & 0x7FFFFF;
  v6 = (a3 >> 23);
  v7 = v3 - v6;
  if (v3 == v6)
  {
    if (v3 == 255)
    {
      if (!(v5 | v4))
      {
        *result = -4194304;
        return result;
      }
      goto LABEL_11;
    }
    v13 = v4 - v5;
    if (v4 == v5)
    {
      *result = 0;
    }
    else
    {
      v20 = v3 != 0;
      v21 = v3 - 1;
      if (!v20)
        v21 = 0;
      v22 = a2 < 0;
      v23 = v13 < 0;
      if (v13 < 0)
        v13 = v5 - v4;
      if (v23)
        v22 = a2 >= 0;
      v24 = v13 << 16;
      if (v13 >= 0x10000)
        v24 = v13;
      LODWORD(v25) = v24 << 8;
      if (HIBYTE(v24))
        v25 = v24;
      else
        v25 = v25;
      if (HIBYTE(v24))
        v26 = 16 * (v13 < 0x10000);
      else
        v26 = (16 * (v13 < 0x10000)) | 8;
      v27 = v26 + byte_1003BD248[v25 >> 24] - 8;
      v28 = v21 - v27;
      if (v28 >= 0)
        LOBYTE(v21) = v27;
      if (v22)
        v29 = 0x80000000;
      else
        v29 = 0;
      *result = v29 + ((v28 & ~(v28 >> 31)) << 23) + (v13 << v21);
    }
  }
  else
  {
    v8 = v4 << 7;
    v9 = v5 << 7;
    if ((v7 & 0x80000000) != 0)
    {
      if (v6 == 255)
      {
        if (!v5)
        {
          *result = (a2 & 0x80000000) - 0x800000;
          return result;
        }
        goto LABEL_11;
      }
      v12 = a2 >= 0;
      if (v3)
        v15 = 0x40000000;
      else
        v15 = v4 << 7;
      v11 = v15 + v8;
      v7 = -v7;
    }
    else
    {
      if (v3 == 255)
      {
        if (!v4)
        {
          *result = a2;
          return result;
        }
LABEL_11:
        if ((a2 & 0x7FC00000) == 0x7F800000 && (a2 & 0x3FFFFF) != 0)
        {
          *result = a2 | 0x400000;
        }
        else
        {
          if (v4)
            v14 = (~a2 & 0x7F800000) == 0;
          else
            v14 = 0;
          if (!v14)
            a2 = a3;
          *result = a2 | 0x400000;
        }
        return result;
      }
      if ((a3 & 0x7F800000) != 0)
        v10 = 0x40000000;
      else
        v10 = v5 << 7;
      v11 = v10 + v9;
      v12 = a2 >> 31;
      v6 = v3;
      v9 = v8;
    }
    v16 = v9 | 0x40000000;
    v17 = v11 != 0;
    v18 = (v11 >> v7) | (v11 << -(char)v7 != 0);
    if (v7 <= 0x1E)
      v19 = v18;
    else
      v19 = v17;
    return sub_10028CBCC(result, v12, v6 - 1, v16 - v19);
  }
  return result;
}

unsigned int *sub_10028C9C4(unsigned int *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  _BOOL4 v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  _BOOL4 v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  v3 = (a2 >> 23);
  v4 = a2 & 0x7FFFFF;
  v5 = (a3 >> 23);
  v6 = a3 & 0x7FFFFF;
  v7 = v3 - v5;
  if (v3 == v5)
  {
    if (!(a2 >> 23))
    {
      *result = v6 + a2;
      return result;
    }
    if (v3 != 255)
    {
      v16 = (v6 + v4) | 0x1000000;
      if (v3 <= 0xFD && (v16 & 1) == 0)
      {
        *result = (a2 & 0x80000000 | (v3 << 23)) + (v16 >> 1);
        return result;
      }
      v14 = v16 << 6;
      if (v3 < 0xFD)
        goto LABEL_47;
LABEL_40:
      if ((v3 & 0x80000000) != 0)
      {
        v14 = (v14 >> -(char)v3) | (v14 << v3 != 0);
        v3 = 0;
        goto LABEL_47;
      }
      if (v3 <= 0xFD && ((v14 + 64) & 0x80000000) == 0)
      {
        v3 = 253;
        goto LABEL_47;
      }
LABEL_44:
      *result = a2 & 0x80000000 | 0x7F800000;
      return result;
    }
    if (!(v6 | v4))
      goto LABEL_5;
    goto LABEL_12;
  }
  v8 = v4 << 6;
  v9 = v6 << 6;
  if ((v7 & 0x80000000) != 0)
  {
    if (v5 != 255)
    {
      if ((a2 >> 23))
        v17 = 0x20000000;
      else
        v17 = v4 << 6;
      v18 = v17 + v8;
      v19 = v18 != 0;
      v20 = (v18 >> -(char)v7) | (v18 << v7 != 0);
      if (-v7 <= 0x1E)
        v19 = v20;
      v3 = (a3 >> 23);
      v14 = v19 + v9 + 0x20000000;
      if (v14 >> 30)
        goto LABEL_39;
LABEL_38:
      --v3;
      v14 *= 2;
      goto LABEL_39;
    }
    if (!v6)
      goto LABEL_44;
LABEL_12:
    if ((a2 & 0x7FC00000) == 0x7F800000 && (a2 & 0x3FFFFF) != 0)
    {
      *result = a2 | 0x400000;
    }
    else
    {
      if (v4)
        v15 = (~a2 & 0x7F800000) == 0;
      else
        v15 = 0;
      if (!v15)
        a2 = a3;
      *result = a2 | 0x400000;
    }
    return result;
  }
  if (v3 == 255)
  {
    if (!v4)
    {
LABEL_5:
      *result = a2;
      return result;
    }
    goto LABEL_12;
  }
  if ((a3 >> 23))
    v10 = 0x20000000;
  else
    v10 = v6 << 6;
  v11 = v10 + v9;
  v12 = v11 != 0;
  v13 = (v11 >> (v3 - v5)) | (v11 << (v5 - v3) != 0);
  if (v7 <= 0x1E)
    v12 = v13;
  v14 = v8 + v12 + 0x20000000;
  if (!(v14 >> 30))
    goto LABEL_38;
LABEL_39:
  if (v3 >= 0xFD)
    goto LABEL_40;
LABEL_47:
  v21 = v3 << 23;
  v22 = ~((v14 & 0x7F) == 64) & ((v14 + 64) >> 7);
  if (!v22)
    v21 = 0;
  *result = (v22 | a2 & 0x80000000) + v21;
  return result;
}

int *sub_10028CBCC(int *result, int a2, int a3, unsigned int a4)
{
  unsigned int v4;
  unint64_t v5;
  char v6;
  char v7;
  int v8;
  int v9;
  char v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  _BOOL4 v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;

  v4 = a4 << 16;
  if (a4 >= 0x10000)
    v4 = a4;
  LODWORD(v5) = v4 << 8;
  if (HIBYTE(v4))
    v5 = v4;
  else
    v5 = v5;
  v6 = byte_1003BD248[v5 >> 24];
  if (HIBYTE(v4))
    v7 = 16 * (a4 < 0x10000);
  else
    v7 = (16 * (a4 < 0x10000)) | 8;
  v8 = (char)(v7 + v6 - 1);
  v9 = a3 - v8;
  v10 = v8 - 7;
  if (v8 >= 7 && (unsigned __int16)(a3 - v8) <= 0xFCu)
  {
    if (a2)
      v11 = 0x80000000;
    else
      v11 = 0;
    v12 = v9 << 23;
    if (!a4)
      v12 = 0;
    *result = (a4 << v10) + v11 + v12;
    return result;
  }
  v13 = a4 << v8;
  if ((unsigned __int16)(a3 - v8) >= 0xFDu)
  {
    if ((v9 & 0x8000) != 0)
    {
      v14 = v13 != 0;
      v13 = (v13 >> (v8 - a3)) | (v13 << (a3 - v8) != 0);
      v9 = 0;
      if ((unsigned __int16)(v8 - a3) > 0x1Eu)
        v13 = v14;
    }
    else
    {
      if ((unsigned __int16)(a3 - v8) > 0xFDu || ((v13 + 64) & 0x80000000) != 0)
      {
        if (a2)
          v20 = -8388608;
        else
          v20 = 2139095040;
        *result = v20;
        return result;
      }
      v9 = 253;
    }
  }
  v15 = v13 + 64;
  v16 = ~((v13 & 0x7F) == 64);
  if (a2)
    v17 = 0x80000000;
  else
    v17 = 0;
  v18 = v9 << 23;
  v19 = v16 & (v15 >> 7);
  if (!v19)
    v18 = 0;
  *result = (v19 | v17) + v18;
  return result;
}

unint64_t *sub_10028CD14(unint64_t *result, unint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BOOL8 v13;
  unint64_t v14;
  _BOOL8 v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v4 = (a2 >> 52) & 0x7FF;
  v5 = a2 & 0xFFFFFFFFFFFFFLL;
  v6 = (a3 >> 52) & 0x7FF;
  v7 = a3 & 0xFFFFFFFFFFFFFLL;
  v8 = v4 - v6;
  if ((_DWORD)v4 != (_DWORD)v6)
  {
    v9 = v5 << 9;
    v10 = v7 << 9;
    if ((int)v4 - (int)v6 < 0)
    {
      if ((_DWORD)v6 == 2047)
      {
        if (!v7)
          goto LABEL_44;
        goto LABEL_13;
      }
      v17 = v9 | 0x2000000000000000;
      v18 = v5 << 10;
      if ((_DWORD)v4)
        v19 = v17;
      else
        v19 = v18;
      v20 = v19 != 0;
      v21 = (v19 >> -(char)v8) | (v19 << v8 != 0);
      if (-v8 <= 0x3E)
        v20 = v21;
      v11 = v20 + v10 + 0x2000000000000000;
      if (!(v11 >> 62))
        goto LABEL_25;
    }
    else
    {
      if ((_DWORD)v4 == 2047)
      {
        if (v5)
          goto LABEL_13;
LABEL_8:
        *result = a2;
        return result;
      }
      if ((_DWORD)v6)
        v12 = v10 | 0x2000000000000000;
      else
        v12 = v7 << 10;
      v13 = v12 != 0;
      v14 = (v12 >> v8) | (v12 << -(char)v8 != 0);
      if (v8 <= 0x3E)
        v15 = v14;
      else
        v15 = v13;
      v6 = (a2 >> 52) & 0x7FF;
      v11 = v9 + v15 + 0x2000000000000000;
      if (!(v11 >> 62))
      {
LABEL_25:
        v4 = (v6 - 1);
        v11 *= 2;
        if (v4 < 0x7FD)
          goto LABEL_49;
LABEL_40:
        if ((v4 & 0x80000000) != 0)
        {
          v11 = (v11 >> -(char)v4) | (v11 << v4 != 0);
          v4 = 0;
          goto LABEL_49;
        }
        if (v4 <= 0x7FD && ((v11 + 512) & 0x8000000000000000) == 0)
        {
          v4 = 2045;
          goto LABEL_49;
        }
LABEL_44:
        if (a4)
          v22 = 0xFFF0000000000000;
        else
          v22 = 0x7FF0000000000000;
        *result = v22;
        return result;
      }
    }
    v4 = v6;
    if (v6 < 0x7FD)
    {
LABEL_49:
      v23 = v11 + 512;
      v24 = ~(unint64_t)((v11 & 0x3FF) == 512);
      v25 = 0x8000000000000000;
      if (!a4)
        v25 = 0;
      v26 = v4 << 52;
      v27 = v24 & (v23 >> 10);
      if (!v27)
        v26 = 0;
      *result = (v27 | v25) + v26;
      return result;
    }
    goto LABEL_40;
  }
  if ((_DWORD)v4 != 2047)
  {
    if (!(_DWORD)v4)
    {
      *result = v7 + a2;
      return result;
    }
    v11 = ((v7 + v5) << 9) | 0x4000000000000000;
    if (v4 < 0x7FD)
      goto LABEL_49;
    goto LABEL_40;
  }
  if (!(v7 | v5))
    goto LABEL_8;
LABEL_13:
  if ((a2 & 0x7FF8000000000000) == 0x7FF0000000000000 && (a2 & 0x7FFFFFFFFFFFFLL) != 0)
  {
    *result = a2 | 0x8000000000000;
  }
  else
  {
    if (v5)
      v16 = (~a2 & 0x7FF0000000000000) == 0;
    else
      v16 = 0;
    if (!v16)
      a2 = a3;
    *result = a2 | 0x8000000000000;
  }
  return result;
}

unint64_t *sub_10028CF1C(unint64_t *result, unint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  char v16;
  char v17;
  char v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BOOL8 v24;
  unint64_t v25;
  _BOOL8 v26;
  int v27;
  int v28;
  unint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  _BOOL8 v34;
  unint64_t v35;
  _BOOL8 v36;
  unint64_t v37;

  v4 = (a2 >> 52) & 0x7FF;
  v5 = a2 & 0xFFFFFFFFFFFFFLL;
  v6 = (a3 >> 52) & 0x7FF;
  v7 = a3 & 0xFFFFFFFFFFFFFLL;
  v8 = v4 - v6;
  if ((_DWORD)v4 == (_DWORD)v6)
  {
    if ((_DWORD)v4 == 2047)
    {
      if (!(v7 | v5))
      {
        *result = 0xFFF8000000000000;
        return result;
      }
      goto LABEL_30;
    }
    v11 = v5 - v7;
    if (v5 == v7)
    {
      *result = 0;
    }
    else
    {
      v12 = (_DWORD)v4 != 0;
      v13 = v4 - 1;
      if (!v12)
        v13 = 0;
      v14 = a4 ^ 1;
      if (v11 < 0)
        v11 = v7 - v5;
      else
        v14 = a4;
      v15 = HIDWORD(v11);
      v16 = 32 * (HIDWORD(v11) == 0);
      if (!HIDWORD(v11))
        LODWORD(v15) = v11;
      if (v15 < 0x10000)
      {
        v16 = (32 * (HIDWORD(v11) == 0)) | 0x10;
        LODWORD(v15) = (_DWORD)v15 << 16;
      }
      v17 = v16 | 8;
      if (BYTE3(v15))
      {
        v17 = v16;
        v15 = v15;
      }
      else
      {
        v15 = ((_DWORD)v15 << 8);
      }
      v18 = byte_1003BD248[v15 >> 24] + v17 - 11;
      v19 = v13 - v18;
      v20 = (__int16)(v13 - v18);
      if (v20 >= 0)
        LOBYTE(v13) = v18;
      v30 = v14 == 0;
      v21 = 0x8000000000000000;
      if (v30)
        v21 = 0;
      *result = v21 + ((unint64_t)(v19 & ~(v20 >> 31)) << 52) + (v11 << v13);
    }
    return result;
  }
  v9 = v5 << 10;
  v10 = v7 << 10;
  if ((int)v4 - (int)v6 >= 0)
  {
    if ((_DWORD)v4 == 2047)
    {
      if (!v5)
      {
        *result = a2;
        return result;
      }
      goto LABEL_30;
    }
    v30 = (_DWORD)v6 == 0;
    v22 = 0x4000000000000000;
    if (v30)
      v22 = v7 << 10;
    v23 = v22 + v10;
    v24 = v23 != 0;
    v25 = (v23 >> v8) | (v23 << -(char)v8 != 0);
    if (v8 <= 0x3E)
      v26 = v25;
    else
      v26 = v24;
    v27 = ((a2 >> 52) & 0x7FF) - 1;
    v28 = a4;
    v29 = (v9 | 0x4000000000000000) - v26;
    return sub_10028D130(result, v28, v27, v29);
  }
  if ((_DWORD)v6 != 2047)
  {
    v31 = a4 ^ 1;
    v30 = (_DWORD)v4 == 0;
    v32 = 0x4000000000000000;
    if (v30)
      v32 = v5 << 10;
    v33 = v32 + v9;
    v34 = v33 != 0;
    v35 = (v33 >> -(char)v8) | (v33 << v8 != 0);
    if (-v8 <= 0x3E)
      v36 = v35;
    else
      v36 = v34;
    v27 = v6 - 1;
    v28 = v31;
    v29 = (v10 | 0x4000000000000000) - v36;
    return sub_10028D130(result, v28, v27, v29);
  }
  if (v7)
  {
LABEL_30:
    if ((a2 & 0x7FF8000000000000) == 0x7FF0000000000000 && (a2 & 0x7FFFFFFFFFFFFLL) != 0)
    {
      *result = a2 | 0x8000000000000;
    }
    else
    {
      if (v5)
        v30 = (~a2 & 0x7FF0000000000000) == 0;
      else
        v30 = 0;
      if (!v30)
        a2 = a3;
      *result = a2 | 0x8000000000000;
    }
    return result;
  }
  if (a4)
    v37 = 0x7FF0000000000000;
  else
    v37 = 0xFFF0000000000000;
  *result = v37;
  return result;
}

unint64_t *sub_10028D130(unint64_t *result, int a2, int a3, unint64_t a4)
{
  unint64_t v4;
  char v5;
  char v6;
  unsigned int v7;
  char v8;
  int v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v4 = HIDWORD(a4);
  v5 = 32 * (HIDWORD(a4) == 0);
  if (!HIDWORD(a4))
    LODWORD(v4) = a4;
  if (v4 < 0x10000)
  {
    v5 = (32 * (HIDWORD(a4) == 0)) | 0x10;
    LODWORD(v4) = (_DWORD)v4 << 16;
  }
  v6 = v5 | 8;
  v7 = BYTE3(v4);
  if (BYTE3(v4))
    v4 = v4;
  else
    v4 = ((_DWORD)v4 << 8);
  v8 = byte_1003BD248[v4 >> 24];
  if (v7)
    v6 = v5;
  v9 = (char)(v6 + v8 - 1);
  v10 = (a3 - v9);
  v11 = v9 - 10;
  if (v9 >= 10 && (unsigned __int16)(a3 - v9) <= 0x7FCu)
  {
    v12 = 0x8000000000000000;
    if (!a2)
      v12 = 0;
    v13 = v10 << 52;
    if (!a4)
      v13 = 0;
    *result = (a4 << v11) + v12 + v13;
    return result;
  }
  v14 = a4 << v9;
  if ((unsigned __int16)(a3 - v9) < 0x7FDu)
    goto LABEL_24;
  if ((((_WORD)a3 - (_WORD)v9) & 0x8000) != 0)
  {
    v15 = -(__int16)(a3 - v9);
    v16 = v14 != 0;
    v14 = (v14 >> v15) | (v14 << v10 != 0);
    v10 = 0;
    if (v15 > 0x3E)
      v14 = v16;
    goto LABEL_24;
  }
  if ((unsigned __int16)(a3 - v9) <= 0x7FDu && ((v14 + 512) & 0x8000000000000000) == 0)
  {
    v10 = 2045;
LABEL_24:
    v17 = v14 + 512;
    v18 = ~(unint64_t)((v14 & 0x3FF) == 512);
    v19 = 0x8000000000000000;
    if (!a2)
      v19 = 0;
    v20 = v10 << 52;
    v21 = v18 & (v17 >> 10);
    if (!v21)
      v20 = 0;
    *result = (v21 | v19) + v20;
    return result;
  }
  v22 = 0x7FF0000000000000;
  if (a2)
    v22 = 0xFFF0000000000000;
  *result = v22;
  return result;
}

uint64_t sub_10028D288(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  uint64_t v22[5];
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  _QWORD v31[2];
  _BYTE v32[8];
  int v33;
  uint64_t v34;
  uint64_t v35[2];

  sub_100298C2C(v32, &off_10044E7D8);
  if ((sub_10025E20C((int *)a1, -1) & 0xFF8) != 0)
  {
    v24 = 0uLL;
    v2 = (_DWORD *)sub_10029430C(&v24, 7);
    *(_DWORD *)((char *)v2 + 3) = 824196413;
    *v2 = 1025535587;
    sub_100294B74(-215, (uint64_t *)&v24, "countNonZero", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/stat.cpp", 1358);
  }
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_OWORD *)(v3 + 16);
    v24 = *(_OWORD *)v3;
    v25 = v4;
    v26 = *(_OWORD *)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 56);
    v27 = *(_QWORD *)(v3 + 48);
    v28 = v5;
    v29 = (char *)&v24 + 8;
    v30 = v31;
    v31[0] = 0;
    v31[1] = 0;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 20);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    if (*(int *)(v3 + 4) > 2)
    {
      DWORD1(v24) = 0;
      sub_100256B48((uint64_t)&v24, v3);
    }
    else
    {
      v8 = *(_QWORD **)(v3 + 72);
      v9 = v30;
      *(_QWORD *)v30 = *v8;
      v9[1] = v8[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v24);
  }
  v10 = v24 & 7;
  v11 = off_10044E838[v10];
  if ((_DWORD)v10 == 7)
  {
    v22[0] = 0;
    v22[1] = 0;
    v12 = sub_10029430C(v22, 9);
    *(_BYTE *)(v12 + 8) = 48;
    *(_QWORD *)v12 = *(_QWORD *)"func != 0";
    sub_100294B74(-215, v22, "countNonZero", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/stat.cpp", 1374);
  }
  v35[0] = (uint64_t)&v24;
  v35[1] = 0;
  v34 = 0;
  sub_100254D30((uint64_t)v22, v35, (uint64_t)&v34, -1);
  v13 = 0;
  v14 = v23;
  v15 = -1;
  while ((unint64_t)++v15 < v22[4])
  {
    v13 = ((unsigned int (*)(uint64_t, uint64_t))v11)(v34, v14) + v13;
    sub_100254D78((uint64_t)v22);
  }
  if (v28)
  {
    v16 = (unsigned int *)(v28 + 20);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      sub_100256C90((uint64_t)&v24);
  }
  v28 = 0;
  v25 = 0u;
  v26 = 0u;
  if (SDWORD1(v24) >= 1)
  {
    v19 = 0;
    v20 = v29;
    do
      *(_DWORD *)&v20[4 * v19++] = 0;
    while (v19 < SDWORD1(v24));
  }
  if (v30 != v31)
    j__free(v30);
  if (v33)
    sub_1002989D0(v32);
  return v13;
}

void sub_10028D548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10028D5C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_10028D5F8(uint64_t a1, double *a2, unint64_t *a3, char *a4, char *a5, uint64_t a6)
{
  unsigned int v12;
  char v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t (*v31)();
  uint64_t v32;
  double *v33;
  unint64_t *v34;
  float *v35;
  float *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  double v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  char *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  char *v78;
  int v79;
  unint64_t *v80;
  unint64_t v81;
  double v82;
  float v83;
  float v84;
  signed int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[4];
  unint64_t v90;
  int v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  void *v98;
  _QWORD v99[2];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  void *v106;
  _QWORD v107[3];
  char v108[8];
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112[3];

  sub_100298C2C(v108, &off_10044E7F8);
  v12 = sub_10025E20C((int *)a1, -1);
  v13 = v12;
  v14 = (v12 >> 3) & 0x1FF;
  if (v14)
  {
    v15 = sub_100261284(a6);
    if (a5 || a4 || !v15)
      goto LABEL_8;
  }
  else if (!sub_100261284(a6) && sub_10025E20C((int *)a6, -1))
  {
LABEL_8:
    v100 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v100, 100), "(cn == 1 && (_mask.empty() || _mask.type() == 0)) || (cn > 1 && _mask.empty() && !minIdx && !maxIdx)", 100);
    sub_100294B74(-215, (uint64_t *)&v100, "minMaxIdx", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/stat.cpp", 2709);
  }
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_OWORD *)(v16 + 16);
    v100 = *(_OWORD *)v16;
    v101 = v17;
    v102 = *(_OWORD *)(v16 + 32);
    v18 = *(_QWORD *)(v16 + 56);
    v103 = *(_QWORD *)(v16 + 48);
    v104 = v18;
    v105 = (char *)&v100 + 8;
    v106 = v107;
    v107[0] = 0;
    v107[1] = 0;
    if (v18)
    {
      v19 = (unsigned int *)(v18 + 20);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
    if (*(int *)(v16 + 4) > 2)
    {
      DWORD1(v100) = 0;
      sub_100256B48((uint64_t)&v100, v16);
    }
    else
    {
      v21 = *(_QWORD **)(v16 + 72);
      v22 = v106;
      *(_QWORD *)v106 = *v21;
      v22[1] = v21[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v100);
  }
  if (sub_10025D914((_DWORD *)a6) == 0x10000)
  {
    v23 = *(_QWORD *)(a6 + 8);
    v24 = *(_OWORD *)(v23 + 16);
    v92 = *(_OWORD *)v23;
    v93 = v24;
    v94 = *(_OWORD *)(v23 + 32);
    v25 = *(_QWORD *)(v23 + 56);
    v95 = *(_QWORD *)(v23 + 48);
    v96 = v25;
    v97 = (char *)&v92 + 8;
    v98 = v99;
    v99[0] = 0;
    v99[1] = 0;
    if (v25)
    {
      v26 = (unsigned int *)(v25 + 20);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
    }
    if (*(int *)(v23 + 4) > 2)
    {
      DWORD1(v92) = 0;
      sub_100256B48((uint64_t)&v92, v23);
    }
    else
    {
      v28 = *(_QWORD **)(v23 + 72);
      v29 = v98;
      *(_QWORD *)v98 = *v28;
      v29[1] = v28[1];
    }
  }
  else
  {
    sub_10025CCB8(a6, -1, (uint64_t)&v92);
  }
  v80 = a3;
  v30 = v13 & 7;
  v31 = off_10044E878[v13 & 7];
  if (v30 == 7)
  {
    v89[0] = 0;
    v89[1] = 0;
    v32 = sub_10029430C(v89, 9);
    *(_BYTE *)(v32 + 8) = 48;
    *(_QWORD *)v32 = *(_QWORD *)"func != 0";
    sub_100294B74(-215, v89, "minMaxIdx", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/stat.cpp", 2722);
  }
  v112[0] = (uint64_t)&v100;
  v112[1] = (uint64_t)&v92;
  v112[2] = 0;
  v110 = 0;
  v111 = 0;
  sub_100254D30((uint64_t)v89, v112, (uint64_t)&v110, -1);
  v85 = 0x80000000;
  v86 = 0x7FFFFFFF;
  v83 = -INFINITY;
  v84 = INFINITY;
  v33 = (double *)&v86;
  if (v30 == 6)
    v33 = &v82;
  v34 = (unint64_t *)&v85;
  v87 = 0;
  v88 = 0;
  if (v30 == 6)
    v34 = &v81;
  v81 = 0xFFF0000000000000;
  v82 = INFINITY;
  v79 = v13 & 7;
  if (v30 == 5)
    v35 = &v84;
  else
    v35 = (float *)v33;
  if (v30 == 5)
    v36 = &v83;
  else
    v36 = (float *)v34;
  if (v90)
  {
    v37 = 0;
    v38 = ((v14 + 1) * v91);
    v39 = 1;
    do
    {
      ((void (*)(uint64_t, uint64_t, float *, float *, uint64_t *, uint64_t *, uint64_t, uint64_t))v31)(v110, v111, v35, v36, &v88, &v87, v38, v39);
      sub_100254D78((uint64_t)v89);
      ++v37;
      v39 += (int)v38;
    }
    while (v37 < v90);
  }
  if ((_QWORD)v101)
  {
    if (SDWORD1(v100) >= 3)
    {
      v41 = (int *)(v105 + 4);
      v42 = 1;
      v43 = DWORD1(v100) & 0xFFFFFFFE;
      v44 = 1;
      do
      {
        v42 *= *(v41 - 1);
        v44 *= *v41;
        v41 += 2;
        v43 -= 2;
      }
      while (v43);
      v40 = v44 * v42;
      v45 = DWORD1(v100) - (unint64_t)(DWORD1(v100) & 0xFFFFFFFE);
      if (v45)
      {
        v46 = &v105[(4 * DWORD1(v100)) & 0x3FFFFFFF8];
        do
        {
          v47 = *(int *)v46;
          v46 += 4;
          v40 *= v47;
          --v45;
        }
        while (v45);
      }
    }
    else
    {
      v40 = SHIDWORD(v100) * (uint64_t)SDWORD2(v100);
    }
    if (DWORD1(v100) && v40)
    {
      if (!(_QWORD)v93)
        goto LABEL_60;
      if (SDWORD1(v92) >= 3)
      {
        v49 = (int *)(v97 + 4);
        v50 = 1;
        v51 = DWORD1(v92) & 0xFFFFFFFE;
        v52 = 1;
        do
        {
          v50 *= *(v49 - 1);
          v52 *= *v49;
          v49 += 2;
          v51 -= 2;
        }
        while (v51);
        v48 = v52 * v50;
        v53 = DWORD1(v92) - (unint64_t)(DWORD1(v92) & 0xFFFFFFFE);
        if (v53)
        {
          v54 = &v97[(4 * DWORD1(v92)) & 0x3FFFFFFF8];
          do
          {
            v55 = *(int *)v54;
            v54 += 4;
            v48 *= v55;
            --v53;
          }
          while (v53);
        }
      }
      else
      {
        v48 = SHIDWORD(v92) * (uint64_t)SDWORD2(v92);
      }
      if (!DWORD1(v92) || !v48)
      {
LABEL_60:
        if (v88)
        {
          if (v87)
            goto LABEL_62;
LABEL_112:
          v87 = 1;
          v56 = v88;
          v57 = v79;
LABEL_63:
          if (v57 == 5)
          {
            v82 = v84;
            v58 = v83;
          }
          else
          {
            if (v57 > 4)
              goto LABEL_68;
            v82 = (double)v86;
            v58 = (double)v85;
          }
          v81 = *(_QWORD *)&v58;
LABEL_68:
          if (!a2)
            goto LABEL_70;
          goto LABEL_69;
        }
        v88 = 1;
        if (!v87)
          goto LABEL_112;
      }
    }
  }
LABEL_62:
  v56 = v88;
  v57 = v79;
  if (v88)
    goto LABEL_63;
  v81 = 0;
  v82 = 0.0;
  if (a2)
LABEL_69:
    *a2 = v82;
LABEL_70:
  if (v80)
    *v80 = v81;
  if (a4)
  {
    if (v56)
    {
      if (SDWORD1(v100) >= 1)
      {
        v59 = v105;
        v60 = v56 - 1;
        v61 = DWORD1(v100) + 1;
        do
        {
          v62 = 4 * (v61 - 2);
          v63 = *(_DWORD *)&v59[v62];
          *(_DWORD *)&a4[v62] = v60 % v63;
          --v61;
          v60 /= (unint64_t)v63;
        }
        while (v61 > 1);
      }
    }
    else if (SDWORD1(v100) >= 1)
    {
      memset(a4, 255, 4 * DWORD1(v100));
    }
  }
  if (a5)
  {
    if (v87)
    {
      if (SDWORD1(v100) >= 1)
      {
        v64 = v105;
        v65 = v87 - 1;
        v66 = DWORD1(v100) + 1;
        do
        {
          v67 = 4 * (v66 - 2);
          v68 = *(_DWORD *)&v64[v67];
          *(_DWORD *)&a5[v67] = v65 % v68;
          --v66;
          v65 /= (unint64_t)v68;
        }
        while (v66 > 1);
      }
    }
    else if (SDWORD1(v100) >= 1)
    {
      memset(a5, 255, 4 * DWORD1(v100));
    }
  }
  if (v96)
  {
    v69 = (unsigned int *)(v96 + 20);
    do
    {
      v70 = __ldaxr(v69);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v69));
    if (!v71)
      sub_100256C90((uint64_t)&v92);
  }
  v96 = 0;
  v93 = 0u;
  v94 = 0u;
  if (SDWORD1(v92) >= 1)
  {
    v72 = 0;
    v73 = v97;
    do
      *(_DWORD *)&v73[4 * v72++] = 0;
    while (v72 < SDWORD1(v92));
  }
  if (v98 != v99)
    j__free(v98);
  if (v104)
  {
    v74 = (unsigned int *)(v104 + 20);
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
      sub_100256C90((uint64_t)&v100);
  }
  v104 = 0;
  v101 = 0u;
  v102 = 0u;
  if (SDWORD1(v100) >= 1)
  {
    v77 = 0;
    v78 = v105;
    do
      *(_DWORD *)&v78[4 * v77++] = 0;
    while (v77 < SDWORD1(v100));
  }
  if (v106 != v107)
    j__free(v106);
  if (v109)
    sub_1002989D0(v108);
}

void sub_10028DD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10028DDD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 152);
  _Unwind_Resume(a1);
}

void sub_10028DDE8()
{
  JUMPOUT(0x10028DE10);
}

void sub_10028DDF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 152);
  _Unwind_Resume(a1);
}

double sub_10028DE28(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  int v40;
  float *v41;
  unint64_t v42;
  int v43;
  double v44;
  int v45;
  double v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  const float *v50;
  uint64_t v51;
  const float *v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  double v60;
  float *v61;
  double v62;
  double v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float *v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  float v75;
  float v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, __int128 *, double *, uint64_t, unint64_t);
  uint64_t v87;
  uint64_t v88;
  unsigned int v90;
  signed int v91;
  unsigned int v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  int *v101;
  int *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  _BYTE *v107;
  int v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unsigned __int8 *v125;
  int v126;
  int v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  __int128 *v131;
  signed int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  char *v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  char *v147;
  float *v149;
  float v150;
  int v151;
  int v152;
  unint64_t v153;
  int v154;
  double v155[3];
  _BYTE v156[64];
  _BYTE *v157;
  void *v158;
  _QWORD v159[2];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  _QWORD *v166;
  _QWORD v167[2];
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  _QWORD *v174;
  _QWORD v175[3];
  _BYTE v176[8];
  int v177;
  uint64_t v178;
  __int128 *v179;
  uint64_t v180;
  __int128 *v181;
  __int128 *v182;
  uint64_t v183;
  float32x2x4_t v184;
  float32x2x4_t v185;

  sub_100298C2C(v176, &off_10044E818);
  v6 = a2 & 7;
  v7 = a2 & 6;
  if (v7 != 4 && (v6 - 1) >= 2 && (v7 != 6 || sub_10025E20C((int *)a1, -1)))
  {
    v168 = 0uLL;
    qmemcpy((void *)sub_10029430C(&v168, 173), "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2 || normType == NORM_L2SQR || ((normType == NORM_HAMMING || normType == NORM_HAMMING2) && _src.type() == 0)", 173);
    sub_100294B74(-215, (uint64_t *)&v168, "norm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/stat.cpp", 3186);
  }
  if (sub_10025D914((_DWORD *)a1) == 0x10000)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_OWORD *)(v8 + 16);
    v168 = *(_OWORD *)v8;
    v169 = v9;
    v170 = *(_OWORD *)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 56);
    v171 = *(_QWORD *)(v8 + 48);
    v172 = v10;
    v173 = (char *)&v168 + 8;
    v174 = v175;
    v175[0] = 0;
    v175[1] = 0;
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 20);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    if (*(int *)(v8 + 4) > 2)
    {
      DWORD1(v168) = 0;
      sub_100256B48((uint64_t)&v168, v8);
    }
    else
    {
      v13 = *(_QWORD **)(v8 + 72);
      v14 = v174;
      *v174 = *v13;
      v14[1] = v13[1];
    }
  }
  else
  {
    sub_10025CCB8(a1, -1, (uint64_t)&v168);
  }
  if (sub_10025D914((_DWORD *)a3) == 0x10000)
  {
    v15 = *(_QWORD *)(a3 + 8);
    v16 = *(_OWORD *)(v15 + 16);
    v160 = *(_OWORD *)v15;
    v17 = *(_OWORD *)(v15 + 32);
    v161 = v16;
    v162 = v17;
    v18 = *(_QWORD *)(v15 + 56);
    v163 = *(_QWORD *)(v15 + 48);
    v164 = v18;
    v165 = (char *)&v160 + 8;
    v166 = v167;
    v167[0] = 0;
    v167[1] = 0;
    if (v18)
    {
      v19 = (unsigned int *)(v18 + 20);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
    if (*(int *)(v15 + 4) > 2)
    {
      DWORD1(v160) = 0;
      sub_100256B48((uint64_t)&v160, v15);
    }
    else
    {
      v21 = *(_QWORD **)(v15 + 72);
      v22 = v166;
      *v166 = *v21;
      v22[1] = v21[1];
    }
  }
  else
  {
    sub_10025CCB8(a3, -1, (uint64_t)&v160);
  }
  v23 = v168 & 7;
  v153 = (((unint64_t)v168 >> 3) & 0x1FF) + 1;
  if ((v168 & 0x4000) != 0)
  {
    if (!(_QWORD)v161)
      goto LABEL_33;
    if (SDWORD1(v160) >= 3)
    {
      v25 = (int *)(v165 + 4);
      v26 = 1;
      v27 = DWORD1(v160) & 0xFFFFFFFE;
      v28 = 1;
      do
      {
        v26 *= *(v25 - 1);
        v28 *= *v25;
        v25 += 2;
        v27 -= 2;
      }
      while (v27);
      v24 = v28 * v26;
      v29 = DWORD1(v160) - (unint64_t)(DWORD1(v160) & 0xFFFFFFFE);
      if (v29)
      {
        v30 = &v165[(4 * DWORD1(v160)) & 0x3FFFFFFF8];
        do
        {
          v31 = *(int *)v30;
          v30 += 4;
          v24 *= v31;
          --v29;
        }
        while (v29);
      }
    }
    else
    {
      v24 = SHIDWORD(v160) * (uint64_t)SDWORD2(v160);
    }
    if (!DWORD1(v160) || !v24)
    {
LABEL_33:
      if (SDWORD1(v168) >= 3)
      {
        v33 = (int *)(v173 + 4);
        v34 = 1;
        v35 = DWORD1(v168) & 0xFFFFFFFE;
        v36 = 1;
        do
        {
          v34 *= *(v33 - 1);
          v36 *= *v33;
          v33 += 2;
          v35 -= 2;
        }
        while (v35);
        v32 = v36 * v34;
        v37 = DWORD1(v168) - (unint64_t)(DWORD1(v168) & 0xFFFFFFFE);
        if (v37)
        {
          v38 = &v173[(4 * DWORD1(v168)) & 0x3FFFFFFF8];
          do
          {
            v39 = *(int *)v38;
            v38 += 4;
            v32 *= v39;
            --v37;
          }
          while (v37);
        }
      }
      else
      {
        v32 = SHIDWORD(v168) * (uint64_t)SDWORD2(v168);
      }
      v40 = v32 * v153;
      if (v32 * v153 == (_DWORD)v32 * (_DWORD)v153)
      {
        if ((v168 & 7) == 0)
        {
          if ((_DWORD)v6 == 7)
          {
            v45 = sub_10028F418(v169, (int)v32 * (int)v153, 2);
          }
          else
          {
            if ((_DWORD)v6 != 6)
              goto LABEL_80;
            v45 = sub_100294160(v169, (int)v32 * (int)v153);
          }
          v46 = (double)v45;
          v47 = v164;
          if (!v164)
            goto LABEL_202;
          goto LABEL_198;
        }
        if ((_DWORD)v23 == 5)
        {
          v41 = (float *)v169;
          switch((_DWORD)v6)
          {
            case 4:
              v42 = (v40 - 4);
              if (v40 < 4)
              {
                v43 = 0;
                v44 = 0.0;
                goto LABEL_66;
              }
              if (v42 >= 0xC)
              {
                v49 = (v42 >> 2) + 1;
                v48 = 4 * (v49 & 0x7FFFFFFC);
                v50 = (const float *)(v169 + 32);
                v44 = 0.0;
                v51 = v49 & 0x7FFFFFFC;
                do
                {
                  v52 = v50 - 8;
                  v184 = vld4_f32(v52);
                  v185 = vld4_f32(v50);
                  v53 = vcvtq_f64_f32(v184.val[0]);
                  v54 = vcvtq_f64_f32(v185.val[0]);
                  v55 = vcvtq_f64_f32(v184.val[1]);
                  v56 = vcvtq_f64_f32(v185.val[1]);
                  v57 = vcvtq_f64_f32(v184.val[2]);
                  v58 = vcvtq_f64_f32(v185.val[2]);
                  *(float64x2_t *)v184.val[0].f32 = vcvtq_f64_f32(v184.val[3]);
                  *(float64x2_t *)v184.val[1].f32 = vcvtq_f64_f32(v185.val[3]);
                  *(float64x2_t *)v184.val[2].f32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v55, v55), v53, v53), v57, v57), *(float64x2_t *)v184.val[0].f32, *(float64x2_t *)v184.val[0].f32);
                  *(float64x2_t *)v184.val[3].f32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v56, v56), v54, v54), v58, v58), *(float64x2_t *)v184.val[1].f32, *(float64x2_t *)v184.val[1].f32);
                  v44 = v44 + *(double *)&v184.val[2] + v59 + *(double *)&v184.val[3] + v60;
                  v50 += 16;
                  v51 -= 4;
                }
                while (v51);
                if (v49 == (v49 & 0x7FFFFFFC))
                  goto LABEL_65;
              }
              else
              {
                v48 = 0;
                v44 = 0.0;
              }
              v61 = (float *)(v169 + 4 * v48 + 8);
              do
              {
                v62 = *(v61 - 2);
                v63 = *(v61 - 1);
                v64 = *v61;
                v65 = v61[1];
                v61 += 4;
                v44 = v44 + v63 * v63 + v62 * v62 + v64 * v64 + v65 * v65;
                v48 += 4;
              }
              while (v48 <= v42);
LABEL_65:
              v43 = (v42 & 0xFFFFFFFC) + 4;
LABEL_66:
              if (v43 >= v40)
                goto LABEL_223;
              v66 = v43;
              v67 = (~v43 + v40);
              if ((_DWORD)v67)
              {
                v68 = v67 + 1;
                v69 = (v67 + 1) & 0x1FFFFFFFELL;
                v70 = v69 + v66;
                v71 = (float *)(v169 + 4 * v66 + 4);
                v72 = v69;
                do
                {
                  v44 = v44 + *(v71 - 1) * *(v71 - 1) + *v71 * *v71;
                  v71 += 2;
                  v72 -= 2;
                }
                while (v72);
                if (v68 == v69)
                {
LABEL_223:
                  v46 = sqrt(v44);
                  v47 = v164;
                  if (v164)
                    goto LABEL_198;
                  goto LABEL_202;
                }
              }
              else
              {
                v70 = v66;
              }
              v149 = (float *)(v169 + 4 * v70);
              do
              {
                v150 = *v149++;
                v44 = v44 + v150 * v150;
                LODWORD(v70) = v70 + 1;
              }
              while (v40 > (int)v70);
              goto LABEL_223;
            case 5:
              *(_QWORD *)v156 = 0;
              sub_10028ED68(v169, 0, (double *)v156, v40, 1);
              goto LABEL_58;
            case 2:
              *(_QWORD *)v156 = 0;
              sub_10028EF74(v169, 0, (double *)v156, v40, 1);
LABEL_58:
              v46 = *(double *)v156;
              v47 = v164;
              if (!v164)
                goto LABEL_202;
              goto LABEL_198;
            case 1:
              v73 = 0.0;
              if (v40 >= 1)
              {
                v74 = 4 * (v32 * v153);
                do
                {
                  v75 = *v41++;
                  v76 = fabsf(v75);
                  if (v73 < v76)
                    v73 = v76;
                  v74 -= 4;
                }
                while (v74);
              }
              v46 = fmaxf(v73, 0.0);
              v47 = v164;
              if (v164)
                goto LABEL_198;
              goto LABEL_202;
          }
        }
      }
    }
  }
LABEL_80:
  if ((_QWORD)v161)
  {
    if (SDWORD1(v160) >= 3)
    {
      v78 = (int *)(v165 + 4);
      v79 = 1;
      v80 = DWORD1(v160) & 0xFFFFFFFE;
      v81 = 1;
      do
      {
        v79 *= *(v78 - 1);
        v81 *= *v78;
        v78 += 2;
        v80 -= 2;
      }
      while (v80);
      v77 = v81 * v79;
      v82 = DWORD1(v160) - (unint64_t)(DWORD1(v160) & 0xFFFFFFFE);
      if (v82)
      {
        v83 = &v165[(4 * DWORD1(v160)) & 0x3FFFFFFF8];
        do
        {
          v84 = *(int *)v83;
          v83 += 4;
          v77 *= v84;
          --v82;
        }
        while (v82);
      }
    }
    else
    {
      v77 = SHIDWORD(v160) * (uint64_t)SDWORD2(v160);
    }
    if (DWORD1(v160) && v77 && (v160 & 0xFFF) != 0)
    {
      *(_OWORD *)v156 = 0uLL;
      qmemcpy((void *)sub_10029430C(v156, 32), "mask.empty() || mask.type() == 0", 32);
      sub_100294B74(-215, (uint64_t *)v156, "norm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/stat.cpp", 3253);
    }
  }
  if (v7 != 6)
  {
    v86 = (void (*)(uint64_t, __int128 *, double *, uint64_t, unint64_t))*(&off_10044E8B8[8 * (unint64_t)(v6 >> 1)]
                                                                                         + v23);
    if (!v86)
    {
      *(_OWORD *)v156 = 0uLL;
      v87 = sub_10029430C(v156, 9);
      *(_BYTE *)(v87 + 8) = 48;
      *(_QWORD *)v87 = *(_QWORD *)"func != 0";
      sub_100294B74(-215, (uint64_t *)v156, "norm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/stat.cpp", 3280);
    }
    v181 = &v168;
    v182 = &v160;
    v183 = 0;
    v178 = 0;
    v179 = 0;
    v155[0] = 0.0;
    sub_100254D30((uint64_t)v156, (uint64_t *)&v181, (uint64_t)&v178, -1);
    v88 = *(_QWORD *)&v156[40];
    v152 = v6;
    v151 = v23;
    if ((_DWORD)v6 == 2 && v23 <= 3)
    {
      v154 = 0;
    }
    else
    {
      v154 = 0;
      if (v7 != 4 || v23 > 1)
      {
        if (*(int *)&v156[40] >= 1)
        {
          v135 = -1;
          while ((unint64_t)++v135 < *(_QWORD *)&v156[32])
          {
            v86(v178, v179, v155, v88, v153);
            if (v179)
              v179 = (__int128 *)((char *)v179 + (int)v88);
            sub_100254D78((uint64_t)v156);
          }
          goto LABEL_184;
        }
LABEL_181:
        v136 = -1;
        while ((unint64_t)++v136 < *(_QWORD *)&v156[32])
          sub_100254D78((uint64_t)v156);
LABEL_184:
        if (v152 != 1)
        {
          v137 = sqrt(v155[0]);
          if (v152 == 4)
            v46 = v137;
          else
            v46 = v155[0];
          v47 = v164;
          if (v164)
            goto LABEL_198;
          goto LABEL_202;
        }
        if (v151 == 5)
        {
          v46 = *(float *)v155;
          v47 = v164;
          if (v164)
            goto LABEL_198;
          goto LABEL_202;
        }
        if (v151 == 6)
        {
          v46 = v155[0];
          v47 = v164;
          if (v164)
            goto LABEL_198;
          goto LABEL_202;
        }
        v46 = (double)SLODWORD(v155[0]);
LABEL_197:
        v47 = v164;
        if (!v164)
          goto LABEL_202;
        goto LABEL_198;
      }
    }
    if (v23 < 2 && (_DWORD)v6 == 2)
      v90 = 0x800000;
    else
      v90 = 0x8000;
    v91 = v90 / v153;
    if ((int)(v90 / v153) >= *(int *)&v156[40])
      v92 = *(_DWORD *)&v156[40];
    else
      v92 = v90 / v153;
    if (SDWORD1(v168) < 1)
    {
      v93 = 0;
      if (*(int *)&v156[40] < 1)
        goto LABEL_181;
    }
    else
    {
      v93 = v174[DWORD1(v168) - 1];
      if (*(int *)&v156[40] < 1)
        goto LABEL_181;
    }
    v127 = 0;
    v128 = 0;
    while (v128 < *(_QWORD *)&v156[32])
    {
      v129 = 0;
      ++v128;
      v130 = v178;
      v131 = v179;
      v132 = v88;
      do
      {
        while (1)
        {
          if ((int)v92 >= v132)
            v133 = v132;
          else
            v133 = v92;
          v86(v130, v131, (double *)&v154, v133, v153);
          v127 += v133;
          if ((int)(v127 + v92) >= v91)
            goto LABEL_171;
          if (v132 >= v91)
            v134 = v91;
          else
            v134 = v132;
          if (v134 >= (int)v88)
            v134 = v88;
          if (v128 >= *(_QWORD *)&v156[32] && v134 + v129 >= (int)v88)
          {
LABEL_171:
            v127 = 0;
            v155[0] = v155[0] + (double)v154;
            v154 = 0;
          }
          v130 = v178 + v93 * (int)v133;
          v178 = v130;
          if (!v179)
            break;
          v131 = (__int128 *)((char *)v179 + (int)v133);
          v179 = v131;
          v129 += v92;
          v132 -= v92;
          if (v129 >= (int)v88)
            goto LABEL_156;
        }
        v131 = 0;
        v129 += v92;
        v132 -= v92;
      }
      while (v129 < (int)v88);
LABEL_156:
      sub_100254D78((uint64_t)v156);
    }
    goto LABEL_184;
  }
  if ((_QWORD)v161)
  {
    if (SDWORD1(v160) >= 3)
    {
      v94 = (int *)(v165 + 4);
      v95 = 1;
      v96 = DWORD1(v160) & 0xFFFFFFFE;
      v97 = 1;
      do
      {
        v95 *= *(v94 - 1);
        v97 *= *v94;
        v94 += 2;
        v96 -= 2;
      }
      while (v96);
      v85 = v97 * v95;
      v98 = DWORD1(v160) - (unint64_t)(DWORD1(v160) & 0xFFFFFFFE);
      if (v98)
      {
        v99 = &v165[(4 * DWORD1(v160)) & 0x3FFFFFFF8];
        do
        {
          v100 = *(int *)v99;
          v99 += 4;
          v85 *= v100;
          --v98;
        }
        while (v98);
      }
    }
    else
    {
      v85 = SHIDWORD(v160) * (uint64_t)SDWORD2(v160);
    }
    if (DWORD1(v160) && v85)
    {
      *(_DWORD *)v156 = 1124007936;
      memset(&v156[4], 0, 60);
      v157 = &v156[8];
      v158 = v159;
      v159[0] = 0;
      v159[1] = 0;
      v183 = 0;
      LODWORD(v181) = 16842752;
      v182 = &v168;
      v180 = 0;
      LODWORD(v178) = 16842752;
      v179 = &v160;
      LODWORD(v155[0]) = 33619968;
      *(_QWORD *)&v155[1] = v156;
      v155[2] = 0.0;
      v101 = sub_100263CBC();
      sub_1001D47C0((uint64_t)&v181, (uint64_t)&v178, (uint64_t)v155, (uint64_t)v101);
      v183 = 0;
      LODWORD(v181) = 16842752;
      v182 = (__int128 *)v156;
      v102 = sub_100263CBC();
      v46 = sub_10028DE28(&v181, v6, v102);
      if (*(_QWORD *)&v156[56])
      {
        v103 = (unsigned int *)(*(_QWORD *)&v156[56] + 20);
        do
        {
          v104 = __ldaxr(v103);
          v105 = v104 - 1;
        }
        while (__stlxr(v105, v103));
        if (!v105)
          sub_100256C90((uint64_t)v156);
      }
      *(_QWORD *)&v156[56] = 0;
      memset(&v156[16], 0, 32);
      if (*(int *)&v156[4] >= 1)
      {
        v106 = 0;
        v107 = v157;
        do
          *(_DWORD *)&v107[4 * v106++] = 0;
        while (v106 < *(int *)&v156[4]);
      }
      if (v158 != v159)
        j__free(v158);
      goto LABEL_197;
    }
  }
  v181 = &v168;
  v182 = 0;
  v178 = 0;
  sub_100254D30((uint64_t)v156, (uint64_t *)&v181, (uint64_t)&v178, -1);
  v108 = 0;
  v109 = 0;
  v110 = *(_DWORD *)&v156[40];
  v111 = (*(_DWORD *)&v156[40] - 4);
  while (v109 < *(_QWORD *)&v156[32])
  {
    if ((_DWORD)v6 == 6)
    {
      v112 = sub_100294160(v178, v110);
      goto LABEL_134;
    }
    if (v110 >= 4)
    {
      v114 = 0;
      v112 = 0;
      do
      {
        v112 += byte_1003BE650[*(unsigned __int8 *)(v178 + v114)]
              + byte_1003BE650[*(unsigned __int8 *)(v178 + v114 + 1)]
              + byte_1003BE650[*(unsigned __int8 *)(v178 + v114 + 2)]
              + byte_1003BE650[*(unsigned __int8 *)(v178 + v114 + 3)];
        v114 += 4;
      }
      while (v114 <= v111);
      v113 = (v111 & 0xFFFFFFFC) + 4;
      if (v113 >= v110)
        goto LABEL_134;
    }
    else
    {
      v113 = 0;
      v112 = 0;
      if (v110 <= 0)
        goto LABEL_134;
    }
    v115 = v113;
    v116 = (~v113 + v110);
    if (!(_DWORD)v116)
    {
      v120 = v115;
LABEL_149:
      v125 = (unsigned __int8 *)(v178 + v120);
      do
      {
        v126 = *v125++;
        v112 += byte_1003BE650[v126];
        LODWORD(v120) = v120 + 1;
      }
      while ((int)v120 < v110);
      goto LABEL_134;
    }
    v117 = 0;
    v118 = v116 + 1;
    v119 = (v116 + 1) & 0x1FFFFFFFELL;
    v120 = v119 + v115;
    v121 = (unsigned __int8 *)(v178 + v115 + 1);
    v122 = v119;
    do
    {
      v123 = *(v121 - 1);
      v124 = *v121;
      v121 += 2;
      v112 += byte_1003BE650[v123];
      v117 += byte_1003BE650[v124];
      v122 -= 2;
    }
    while (v122);
    v112 += v117;
    if (v118 != v119)
      goto LABEL_149;
LABEL_134:
    v108 += v112;
    ++v109;
    sub_100254D78((uint64_t)v156);
  }
  v46 = (double)v108;
  v47 = v164;
  if (!v164)
    goto LABEL_202;
LABEL_198:
  v138 = (unsigned int *)(v47 + 20);
  do
  {
    v139 = __ldaxr(v138);
    v140 = v139 - 1;
  }
  while (__stlxr(v140, v138));
  if (!v140)
    sub_100256C90((uint64_t)&v160);
LABEL_202:
  v164 = 0;
  v161 = 0u;
  v162 = 0u;
  if (SDWORD1(v160) >= 1)
  {
    v141 = 0;
    v142 = v165;
    do
      *(_DWORD *)&v142[4 * v141++] = 0;
    while (v141 < SDWORD1(v160));
  }
  if (v166 != v167)
    j__free(v166);
  if (v172)
  {
    v143 = (unsigned int *)(v172 + 20);
    do
    {
      v144 = __ldaxr(v143);
      v145 = v144 - 1;
    }
    while (__stlxr(v145, v143));
    if (!v145)
      sub_100256C90((uint64_t)&v168);
  }
  v172 = 0;
  v169 = 0u;
  v170 = 0u;
  if (SDWORD1(v168) >= 1)
  {
    v146 = 0;
    v147 = v173;
    do
      *(_DWORD *)&v147[4 * v146++] = 0;
    while (v146 < SDWORD1(v168));
  }
  if (v174 != v175)
    j__free(v174);
  if (v177)
    sub_1002989D0(v176);
  return v46;
}

void sub_10028EC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_100006BE4((uint64_t)&a29);
  sub_100006BE4((uint64_t)&a41);
  sub_1001D40CC(v41 - 184);
  _Unwind_Resume(a1);
}

uint64_t sub_10028ED68(uint64_t a1, uint64_t a2, double *a3, int a4, int a5)
{
  double v5;
  uint64_t i;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  const float *v14;
  uint64_t v15;
  const float *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  double v24;
  float *v25;
  double v26;
  double v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float *v37;
  float v38;
  float32x2x4_t v40;
  float32x2x4_t v41;

  v5 = *a3;
  if (!a2)
  {
    v8 = a5 * a4;
    v9 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      v10 = 0;
      v11 = 0.0;
      if (v8 <= 0)
        goto LABEL_29;
LABEL_21:
      v30 = v10;
      v31 = (v8 + ~v10);
      if ((_DWORD)v31)
      {
        v32 = v31 + 1;
        v33 = (v31 + 1) & 0x1FFFFFFFELL;
        v34 = v33 + v30;
        v35 = (float *)(a1 + 4 * v30 + 4);
        v36 = v33;
        do
        {
          v11 = v11 + *(v35 - 1) * *(v35 - 1) + *v35 * *v35;
          v35 += 2;
          v36 -= 2;
        }
        while (v36);
        if (v32 == v33)
          goto LABEL_29;
      }
      else
      {
        v34 = v30;
      }
      v37 = (float *)(a1 + 4 * v34);
      do
      {
        v38 = *v37++;
        v11 = v11 + v38 * v38;
        LODWORD(v34) = v34 + 1;
      }
      while (v8 > (int)v34);
LABEL_29:
      v5 = v5 + v11;
      goto LABEL_30;
    }
    if (v9 >= 0xC)
    {
      v13 = (v9 >> 2) + 1;
      v12 = 4 * (v13 & 0x7FFFFFFC);
      v14 = (const float *)(a1 + 32);
      v11 = 0.0;
      v15 = v13 & 0x7FFFFFFC;
      do
      {
        v16 = v14 - 8;
        v40 = vld4_f32(v16);
        v41 = vld4_f32(v14);
        v17 = vcvtq_f64_f32(v40.val[0]);
        v18 = vcvtq_f64_f32(v41.val[0]);
        v19 = vcvtq_f64_f32(v40.val[1]);
        v20 = vcvtq_f64_f32(v41.val[1]);
        v21 = vcvtq_f64_f32(v40.val[2]);
        v22 = vcvtq_f64_f32(v41.val[2]);
        *(float64x2_t *)v40.val[0].f32 = vcvtq_f64_f32(v40.val[3]);
        *(float64x2_t *)v40.val[1].f32 = vcvtq_f64_f32(v41.val[3]);
        *(float64x2_t *)v40.val[2].f32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v19, v19), v17, v17), v21, v21), *(float64x2_t *)v40.val[0].f32, *(float64x2_t *)v40.val[0].f32);
        *(float64x2_t *)v40.val[3].f32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v20, v20), v18, v18), v22, v22), *(float64x2_t *)v40.val[1].f32, *(float64x2_t *)v40.val[1].f32);
        v11 = v11 + *(double *)&v40.val[2] + v23 + *(double *)&v40.val[3] + v24;
        v14 += 16;
        v15 -= 4;
      }
      while (v15);
      if (v13 == (v13 & 0x7FFFFFFC))
      {
LABEL_20:
        v10 = (v9 & 0xFFFFFFFC) + 4;
        if (v10 >= v8)
          goto LABEL_29;
        goto LABEL_21;
      }
    }
    else
    {
      v12 = 0;
      v11 = 0.0;
    }
    v25 = (float *)(a1 + 4 * v12 + 8);
    do
    {
      v26 = *(v25 - 2);
      v27 = *(v25 - 1);
      v28 = *v25;
      v29 = v25[1];
      v25 += 4;
      v11 = v11 + v27 * v27 + v26 * v26 + v28 * v28 + v29 * v29;
      v12 += 4;
    }
    while (v12 <= v9);
    goto LABEL_20;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      if (*(_BYTE *)(a2 + i))
      {
        v7 = 0;
        do
        {
          v5 = v5 + *(float *)(a1 + v7) * *(float *)(a1 + v7);
          v7 += 4;
        }
        while (4 * a5 != v7);
      }
      a1 += 4 * a5;
    }
  }
LABEL_30:
  *a3 = v5;
  return 0;
}

uint64_t sub_10028EF74(uint64_t a1, unsigned __int8 *a2, double *a3, int a4, int a5)
{
  double v5;
  uint64_t v6;
  float *v7;
  int v9;
  unint64_t v10;
  int v11;
  double v12;
  unint64_t v13;
  uint64_t i;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  const float *v24;
  uint64_t v25;
  const float *v26;
  float32x4_t v27;
  float32x4_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float *v39;
  double v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t *v48;
  uint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float *v56;
  float v57;
  float32x4x4_t v59;
  float32x4x4_t v60;

  v5 = *a3;
  if (!a2)
  {
    v9 = a5 * a4;
    v10 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      v11 = 0;
      v12 = 0.0;
      if (v9 <= 0)
        goto LABEL_42;
LABEL_35:
      v43 = v11;
      v44 = (v9 + ~v11);
      if (v44 >= 7)
      {
        v46 = v44 + 1;
        v47 = (v44 + 1) & 0x1FFFFFFF8;
        v45 = v47 + v43;
        v48 = (float32x4_t *)(a1 + 4 * v43 + 16);
        v49 = v47;
        do
        {
          v50 = vabsq_f32(v48[-1]);
          v51 = vabsq_f32(*v48);
          v52 = vcvt_hight_f64_f32(v50);
          v53 = vcvtq_f64_f32(*(float32x2_t *)v50.f32);
          v54 = vcvt_hight_f64_f32(v51);
          v55 = vcvtq_f64_f32(*(float32x2_t *)v51.f32);
          v12 = v12
              + v53.f64[0]
              + v53.f64[1]
              + v52.f64[0]
              + v52.f64[1]
              + v55.f64[0]
              + v55.f64[1]
              + v54.f64[0]
              + v54.f64[1];
          v48 += 2;
          v49 -= 8;
        }
        while (v49);
        if (v46 == v47)
          goto LABEL_42;
      }
      else
      {
        v45 = v43;
      }
      v56 = (float *)(a1 + 4 * v45);
      do
      {
        v57 = *v56++;
        v12 = v12 + fabsf(v57);
        LODWORD(v45) = v45 + 1;
      }
      while (v9 > (int)v45);
LABEL_42:
      v5 = v5 + v12;
      goto LABEL_43;
    }
    if (v10 >= 0x1C)
    {
      v23 = (v10 >> 2) + 1;
      v13 = 4 * (v23 & 0x7FFFFFF8);
      v24 = (const float *)(a1 + 64);
      v12 = 0.0;
      v25 = v23 & 0x7FFFFFF8;
      do
      {
        v26 = v24 - 16;
        v59 = vld4q_f32(v26);
        v60 = vld4q_f32(v24);
        v27 = vabsq_f32(v59.val[0]);
        v28 = vabsq_f32(v60.val[0]);
        v29 = vcvtq_f64_f32(*(float32x2_t *)v27.f32);
        v30 = vcvtq_f64_f32(*(float32x2_t *)v28.f32);
        v31 = vabsq_f32(v59.val[1]);
        v32 = vabsq_f32(v60.val[1]);
        v33 = vaddq_f64(vcvt_hight_f64_f32(v27), vcvt_hight_f64_f32(v31));
        v34 = vaddq_f64(v29, vcvtq_f64_f32(*(float32x2_t *)v31.f32));
        v35 = vaddq_f64(vcvt_hight_f64_f32(v28), vcvt_hight_f64_f32(v32));
        v36 = vaddq_f64(v30, vcvtq_f64_f32(*(float32x2_t *)v32.f32));
        v37 = vabsq_f32(v59.val[2]);
        v38 = vabsq_f32(v60.val[2]);
        v59.val[0] = vabsq_f32(v59.val[3]);
        v59.val[1] = vabsq_f32(v60.val[3]);
        v59.val[2] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v59.val[0].f32);
        v59.val[3] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v59.val[1].f32);
        v59.val[0] = (float32x4_t)vaddq_f64(vaddq_f64(v33, vcvt_hight_f64_f32(v37)), vcvt_hight_f64_f32(v59.val[0]));
        v59.val[2] = (float32x4_t)vaddq_f64(vaddq_f64(v34, vcvtq_f64_f32(*(float32x2_t *)v37.f32)), (float64x2_t)v59.val[2]);
        v59.val[1] = (float32x4_t)vaddq_f64(vaddq_f64(v35, vcvt_hight_f64_f32(v38)), vcvt_hight_f64_f32(v59.val[1]));
        v59.val[3] = (float32x4_t)vaddq_f64(vaddq_f64(v36, vcvtq_f64_f32(*(float32x2_t *)v38.f32)), (float64x2_t)v59.val[3]);
        v12 = v12
            + *(double *)v59.val[2].i64
            + *(double *)&v59.val[2].i64[1]
            + *(double *)v59.val[0].i64
            + *(double *)&v59.val[0].i64[1]
            + *(double *)v59.val[3].i64
            + *(double *)&v59.val[3].i64[1]
            + *(double *)v59.val[1].i64
            + *(double *)&v59.val[1].i64[1];
        v24 += 32;
        v25 -= 8;
      }
      while (v25);
      if (v23 == (v23 & 0x7FFFFFF8))
      {
LABEL_34:
        v11 = (v10 & 0xFFFFFFFC) + 4;
        if (v11 >= v9)
          goto LABEL_42;
        goto LABEL_35;
      }
    }
    else
    {
      v13 = 0;
      v12 = 0.0;
    }
    v39 = (float *)(a1 + 4 * v13 + 8);
    do
    {
      v40 = fabsf(*(v39 - 2)) + fabsf(*(v39 - 1));
      v41 = *v39;
      v42 = v39[1];
      v39 += 4;
      v12 = v12 + v40 + fabsf(v41) + fabsf(v42);
      v13 += 4;
    }
    while (v13 <= v10);
    goto LABEL_34;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    v6 = a4;
    if (a5 >= 8)
    {
      for (i = 0; i != a4; ++i)
      {
        if (a2[i])
        {
          v15 = 0;
          do
          {
            v16 = vabsq_f32(*(float32x4_t *)(a1 + v15));
            v17 = vabsq_f32(*(float32x4_t *)(a1 + v15 + 16));
            v18 = vcvt_hight_f64_f32(v16);
            v19 = vcvtq_f64_f32(*(float32x2_t *)v16.f32);
            v20 = vcvt_hight_f64_f32(v17);
            v21 = vcvtq_f64_f32(*(float32x2_t *)v17.f32);
            v5 = v5
               + v19.f64[0]
               + v19.f64[1]
               + v18.f64[0]
               + v18.f64[1]
               + v21.f64[0]
               + v21.f64[1]
               + v20.f64[0]
               + v20.f64[1];
            v15 += 32;
          }
          while (((4 * a5) & 0x3FFFFFFE0) != v15);
          if ((a5 & 0xFFFFFFF8) != (unint64_t)a5)
          {
            v22 = a5 & 0xFFFFFFF8;
            do
              v5 = v5 + fabsf(*(float *)(a1 + 4 * v22++));
            while (a5 != v22);
          }
        }
        a1 += 4 * a5;
      }
    }
    else
    {
      v7 = (float *)(a1 + 12);
      do
      {
        if (*a2++)
        {
          v5 = v5 + fabsf(*(v7 - 3));
          if (a5 != 1)
          {
            v5 = v5 + fabsf(*(v7 - 2));
            if (a5 != 2)
            {
              v5 = v5 + fabsf(*(v7 - 1));
              if (a5 != 3)
              {
                v5 = v5 + fabsf(*v7);
                if (a5 != 4)
                {
                  v5 = v5 + fabsf(v7[1]);
                  if (a5 != 5)
                  {
                    v5 = v5 + fabsf(v7[2]);
                    if (a5 != 6)
                      v5 = v5 + fabsf(v7[3]);
                  }
                }
              }
            }
          }
        }
        v7 += a5;
        --v6;
      }
      while (v6);
    }
  }
LABEL_43:
  *a3 = v5;
  return 0;
}

uint64_t sub_10028F370(float *a1, uint64_t a2, float *a3, int a4, int a5)
{
  float v5;
  uint64_t i;
  uint64_t j;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;

  v5 = *a3;
  if (a2)
  {
    if (a4 >= 1 && a5 >= 1)
    {
      for (i = 0; i != a4; ++i)
      {
        if (*(_BYTE *)(a2 + i))
        {
          for (j = 0; j != a5; ++j)
          {
            v8 = fabsf(a1[j]);
            if (v5 < v8)
              v5 = v8;
          }
        }
        a1 += a5;
      }
    }
  }
  else
  {
    v9 = (a5 * a4);
    v10 = 0.0;
    if ((int)v9 >= 1)
    {
      do
      {
        v11 = *a1++;
        v12 = fabsf(v11);
        if (v10 < v12)
          v10 = v12;
        --v9;
      }
      while (v9);
    }
    if (v5 < v10)
      v5 = v10;
  }
  *a3 = v5;
  return 0;
}

uint64_t sub_10028F418(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  int v21;

  switch(a3)
  {
    case 4:
      v5 = (unsigned __int8 *)&unk_1003BE750;
      v6 = (a2 - 4);
      if (a2 < 4)
      {
LABEL_11:
        v9 = 0;
        result = 0;
        if (a2 <= 0)
          return result;
LABEL_12:
        v10 = v9;
        v11 = ~v9 + a2;
        if ((_DWORD)v11)
        {
          v12 = 0;
          v13 = v11 + 1;
          v14 = (v11 + 1) & 0x1FFFFFFFELL;
          v15 = v14 + v10;
          v16 = (unsigned __int8 *)(v10 + a1 + 1);
          v17 = v14;
          do
          {
            v18 = *(v16 - 1);
            v19 = *v16;
            v16 += 2;
            LODWORD(result) = result + v5[v18];
            v12 += v5[v19];
            v17 -= 2;
          }
          while (v17);
          result = (v12 + result);
          if (v13 == v14)
            return result;
        }
        else
        {
          v15 = v10;
        }
        v20 = (unsigned __int8 *)(a1 + v15);
        do
        {
          v21 = *v20++;
          result = result + v5[v21];
          LODWORD(v15) = v15 + 1;
        }
        while ((int)v15 < a2);
        return result;
      }
      break;
    case 2:
      v5 = (unsigned __int8 *)&unk_1003BE650;
      v6 = (a2 - 4);
      if (a2 < 4)
        goto LABEL_11;
      break;
    case 1:
      return sub_100294160(a1, a2);
    default:
      return 0xFFFFFFFFLL;
  }
  v7 = 0;
  LODWORD(result) = 0;
  v8 = v6 & 0xFFFFFFFC;
  do
  {
    result = (_DWORD)result
           + v5[*(unsigned __int8 *)(a1 + v7)]
           + v5[*(unsigned __int8 *)(a1 + v7 + 1)]
           + v5[*(unsigned __int8 *)(a1 + v7 + 2)]
           + v5[*(unsigned __int8 *)(a1 + v7 + 3)];
    v7 += 4;
  }
  while (v7 <= v6);
  v9 = v8 + 4;
  if (v8 + 4 < a2)
    goto LABEL_12;
  return result;
}

uint64_t sub_10028F550(uint64_t a1, signed int a2)
{
  signed int v2;
  signed int v3;
  int32x4_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int8x16_t v8;
  int8x16_t v9;
  int v10;
  int8x16_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t *v21;
  unint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  uint8x16_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint8x16_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  int32x4_t v35;
  int32x4_t v36;
  unint64_t v37;
  int8x8_t *v38;
  int8x16_t v39;
  int8x8_t v40;
  uint16x8_t v41;
  unsigned __int8 *v42;
  unint64_t v43;

  v2 = a2 & 0xFFFFFFF0;
  if ((int)(a2 & 0xFFFFFFF0) < 1)
  {
    v3 = 0;
    v4 = 0uLL;
  }
  else
  {
    v3 = 0;
    v4 = 0uLL;
    v5 = a1;
    do
    {
      if (v2 - v3 >= 15360)
        v6 = 15360;
      else
        v6 = v2 - v3;
      if (v2 - v3 >= 1)
      {
        v7 = 0;
        do
        {
          v10 = v6 - v7;
          if (v6 - v7 >= 240)
            v10 = 240;
          v11 = 0uLL;
          if (v10 >= 16)
          {
            v12 = 0;
            do
            {
              v11 = vsubq_s8(v11, vceqzq_s8(*(int8x16_t *)(v5 + v12)));
              v12 += 16;
            }
            while (v12 <= (v10 - 16));
          }
          v8 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v11.i8);
          v9 = (int8x16_t)vmovl_high_u8((uint8x16_t)v11);
          v4 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v4, (uint16x4_t)*(_OWORD *)&vaddw_u8((uint16x8_t)vextq_s8(v8, v8, 8uLL), *(uint8x8_t *)v11.i8)), (uint16x4_t)*(_OWORD *)&vaddw_u8((uint16x8_t)vextq_s8(v9, v9, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)));
          v5 += v10;
          v7 += v10;
        }
        while (v7 < v6);
      }
      v3 += v6;
    }
    while (v3 < v2);
  }
  v13 = vaddvq_s32(v4);
  if (v13 >= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  v14 = v3 - v13;
  if (v3 < a2)
  {
    v15 = a2 - (uint64_t)v3;
    if (v15 < 8)
    {
      v16 = v3;
      goto LABEL_33;
    }
    if (v15 >= 0x20)
    {
      v17 = v15 & 0xFFFFFFFFFFFFFFE0;
      v18 = 0uLL;
      v19 = (int32x4_t)v14;
      v20.i64[0] = 0x100000001;
      v20.i64[1] = 0x100000001;
      v21 = (int8x16_t *)(v3 + a1 + 16);
      v22 = v15 & 0xFFFFFFFFFFFFFFE0;
      v23 = 0uLL;
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
      v28 = 0uLL;
      do
      {
        v29 = (uint8x16_t)vtstq_s8(v21[-1], v21[-1]);
        v30 = vmovl_u8(*(uint8x8_t *)v29.i8);
        v31 = vmovl_high_u8(v29);
        v32 = (uint8x16_t)vtstq_s8(*v21, *v21);
        v33 = vmovl_u8(*(uint8x8_t *)v32.i8);
        v34 = vmovl_high_u8(v32);
        v24 = vaddq_s32(v24, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v31), v20));
        v23 = vaddq_s32(v23, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v31.i8), v20));
        v18 = vaddq_s32(v18, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v30), v20));
        v19 = vaddq_s32(v19, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v30.i8), v20));
        v28 = vaddq_s32(v28, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v34), v20));
        v27 = vaddq_s32(v27, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v34.i8), v20));
        v26 = vaddq_s32(v26, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v33), v20));
        v25 = vaddq_s32(v25, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v33.i8), v20));
        v21 += 2;
        v22 -= 32;
      }
      while (v22);
      v14 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v25, v19), vaddq_s32(v27, v23)), vaddq_s32(vaddq_s32(v26, v18), vaddq_s32(v28, v24))));
      if (v15 == v17)
        return v14;
      if ((v15 & 0x18) == 0)
      {
        v16 = v17 + v3;
LABEL_33:
        v42 = (unsigned __int8 *)(a1 + v16);
        v43 = a2 - v16;
        do
        {
          if (*v42++)
            v14 = (v14 + 1);
          else
            v14 = v14;
          --v43;
        }
        while (v43);
        return v14;
      }
    }
    else
    {
      v17 = 0;
    }
    v16 = (v15 & 0xFFFFFFFFFFFFFFF8) + v3;
    v35 = 0uLL;
    v36 = (int32x4_t)v14;
    v37 = v17 - (v15 & 0xFFFFFFFFFFFFFFF8);
    v38 = (int8x8_t *)(a1 + v17 + v3);
    v39.i64[0] = 0x100000001;
    v39.i64[1] = 0x100000001;
    do
    {
      v40 = *v38++;
      v41 = vmovl_u8((uint8x8_t)vtst_s8(v40, v40));
      v35 = vaddq_s32(v35, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v41), v39));
      v36 = vaddq_s32(v36, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v41.i8), v39));
      v37 += 8;
    }
    while (v37);
    v14 = vaddvq_s32(vaddq_s32(v36, v35));
    if (v15 == (v15 & 0xFFFFFFFFFFFFFFF8))
      return v14;
    goto LABEL_33;
  }
  return v14;
}

uint64_t sub_10028F7E0(int16x8_t *a1, int a2)
{
  signed int v2;
  signed int v3;
  int32x4_t v4;
  int v5;
  int v6;
  int v7;
  int16x8_t v8;
  unint64_t v9;
  int16x8_t *v10;
  int16x8_t v11;
  int v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  const __int16 *i16;
  int32x4_t v19;
  int8x16_t v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  const __int16 *v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int16x8_t *v40;
  int8x16_t v41;
  uint64_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  unsigned __int16 *v47;
  unsigned int v49;
  int16x8x4_t v51;
  int16x8x4_t v52;

  v2 = a2 & 0xFFFFFFF8;
  if ((int)(a2 & 0xFFFFFFF8) < 1)
  {
    v3 = 0;
    v4 = 0uLL;
  }
  else
  {
    v3 = 0;
    v4 = 0uLL;
    do
    {
      if (v2 - v3 >= 0x200000)
        v5 = 0x200000;
      else
        v5 = v2 - v3;
      if (v2 - v3 >= 1)
      {
        v6 = 0;
        do
        {
          v7 = v5 - v6;
          if (v5 - v6 >= 0x8000)
            v7 = 0x8000;
          v8 = 0uLL;
          if (v7 >= 8)
          {
            v9 = 0;
            v10 = a1;
            do
            {
              v11 = *v10++;
              v8 = vsubq_s16(v8, vceqzq_s16(v11));
              v9 += 8;
            }
            while (v9 <= (v7 - 8));
          }
          v4 = (int32x4_t)vaddw_u16(vaddw_high_u16((uint32x4_t)v4, (uint16x8_t)v8), *(uint16x4_t *)v8.i8);
          a1 = (int16x8_t *)((char *)a1 + 2 * v7);
          v6 += v7;
        }
        while (v6 < v5);
      }
      v3 += v5;
    }
    while (v3 < v2);
  }
  v12 = a2 - v3;
  v13 = (a2 - v3 - 4);
  if (a2 - v3 >= 4)
  {
    if (v13 >= 0x3C)
    {
      v17 = (v13 >> 2) + 1;
      v16 = 4 * (v17 & 0x7FFFFFF0);
      i16 = a1[4].i16;
      v19 = 0uLL;
      v20.i64[0] = 0x100000001;
      v20.i64[1] = 0x100000001;
      v21 = v17 & 0x7FFFFFF0;
      v22 = 0uLL;
      v23 = 0uLL;
      v24 = 0uLL;
      do
      {
        v25 = i16 - 32;
        v51 = vld4q_s16(v25);
        v52 = vld4q_s16(i16);
        v26 = (uint16x8_t)vtstq_s16(v51.val[0], v51.val[0]);
        v27 = (uint16x8_t)vtstq_s16(v52.val[0], v52.val[0]);
        v28 = (uint16x8_t)vtstq_s16(v51.val[1], v51.val[1]);
        v29 = (uint16x8_t)vtstq_s16(v52.val[1], v52.val[1]);
        v30 = (uint16x8_t)vtstq_s16(v51.val[2], v51.val[2]);
        v31 = (uint16x8_t)vtstq_s16(v52.val[2], v52.val[2]);
        v51.val[0] = vtstq_s16(v51.val[3], v51.val[3]);
        v51.val[2] = vtstq_s16(v52.val[3], v52.val[3]);
        v22 = vaddq_s32(vaddq_s32(vaddq_s32(v22, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v26), v20)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v28), v20), (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v30), v20))), (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16((uint16x8_t)v51.val[0]), v20));
        v19 = vaddq_s32(vaddq_s32(vaddq_s32(v19, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v26.i8), v20)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v28.i8), v20), (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v30.i8), v20))), (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v51.val[0].i8), v20));
        v24 = vaddq_s32(vaddq_s32(vaddq_s32(v24, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v27), v20)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v29), v20), (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v31), v20))), (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16((uint16x8_t)v51.val[2]), v20));
        i16 += 64;
        v23 = vaddq_s32(vaddq_s32(vaddq_s32(v23, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v27.i8), v20)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v29.i8), v20), (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v31.i8), v20))), (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v51.val[2].i8), v20));
        v21 -= 16;
      }
      while (v21);
      v15 = vaddvq_s32(vaddq_s32(vaddq_s32(v23, v19), vaddq_s32(v24, v22)));
      if (v17 == (v17 & 0x7FFFFFF0))
        goto LABEL_35;
    }
    else
    {
      v16 = 0;
      v15 = 0;
    }
    v32 = &a1->i16[v16 + 2];
    do
    {
      if (*(v32 - 2))
        ++v15;
      if (*(v32 - 1))
        ++v15;
      if (*v32)
        ++v15;
      if (v32[1])
        ++v15;
      v16 += 4;
      v32 += 4;
    }
    while (v16 <= v13);
LABEL_35:
    v14 = (v13 & 0xFFFFFFFC) + 4;
    if (v14 >= v12)
      goto LABEL_45;
    goto LABEL_36;
  }
  v14 = 0;
  v15 = 0;
  if (v12 <= 0)
    goto LABEL_45;
LABEL_36:
  v33 = v14;
  v34 = (~v3 + a2 - v14);
  if (v34 >= 0xF)
  {
    v36 = v34 + 1;
    v37 = (v34 + 1) & 0x1FFFFFFF0;
    v35 = v37 + v33;
    v38 = 0uLL;
    v39 = (int32x4_t)v15;
    v40 = (int16x8_t *)((char *)a1 + 2 * v33 + 16);
    v41.i64[0] = 0x100000001;
    v41.i64[1] = 0x100000001;
    v42 = v37;
    v43 = 0uLL;
    v44 = 0uLL;
    do
    {
      v45 = (uint16x8_t)vtstq_s16(v40[-1], v40[-1]);
      v46 = (uint16x8_t)vtstq_s16(*v40, *v40);
      v38 = vaddq_s32(v38, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v45), v41));
      v39 = vaddq_s32(v39, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v45.i8), v41));
      v44 = vaddq_s32(v44, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v46), v41));
      v43 = vaddq_s32(v43, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v46.i8), v41));
      v40 += 2;
      v42 -= 16;
    }
    while (v42);
    v15 = vaddvq_s32(vaddq_s32(vaddq_s32(v43, v39), vaddq_s32(v44, v38)));
    if (v36 == v37)
      goto LABEL_45;
  }
  else
  {
    v35 = v33;
  }
  v47 = (unsigned __int16 *)a1 + v35;
  do
  {
    if (*v47++)
      ++v15;
    LODWORD(v35) = v35 + 1;
  }
  while (v12 > (int)v35);
LABEL_45:
  v49 = vaddvq_s32(v4);
  if (v49 >= 0x7FFFFFFF)
    v49 = 0x7FFFFFFF;
  return v3 - v49 + v15;
}

uint64_t sub_10028FB48(uint64_t a1, int a2)
{
  signed int v2;
  signed int v3;
  int32x4_t v4;
  int v5;
  int v6;
  int v7;
  int16x8_t v8;
  unint64_t v9;
  int32x4_t *v10;
  int16x8_t v11;
  int v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  const float *v18;
  int32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  const float *v22;
  int *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t *v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v37;
  float32x4x4_t v39;
  float32x4x4_t v40;

  v2 = a2 & 0xFFFFFFF8;
  if ((int)(a2 & 0xFFFFFFF8) < 1)
  {
    v3 = 0;
    v4 = 0uLL;
  }
  else
  {
    v3 = 0;
    v4 = 0uLL;
    do
    {
      if (v2 - v3 >= 0x200000)
        v5 = 0x200000;
      else
        v5 = v2 - v3;
      if (v2 - v3 >= 1)
      {
        v6 = 0;
        do
        {
          v7 = v5 - v6;
          if (v5 - v6 >= 0x8000)
            v7 = 0x8000;
          v8 = 0uLL;
          if (v7 >= 8)
          {
            v9 = 0;
            v10 = (int32x4_t *)(a1 + 16);
            do
            {
              *(int8x8_t *)v11.i8 = vand_s8((int8x8_t)vmovn_s32(vceqzq_s32(v10[-1])), (int8x8_t)0x1000100010001);
              v11.u64[1] = (unint64_t)vand_s8((int8x8_t)vmovn_s32(vceqzq_s32(*v10)), (int8x8_t)0x1000100010001);
              v8 = vaddq_s16(v11, v8);
              v9 += 8;
              v10 += 2;
            }
            while (v9 <= (v7 - 8));
          }
          v4 = (int32x4_t)vaddw_u16(vaddw_high_u16((uint32x4_t)v4, (uint16x8_t)v8), *(uint16x4_t *)v8.i8);
          a1 += 4 * v7;
          v6 += v7;
        }
        while (v6 < v5);
      }
      v3 += v5;
    }
    while (v3 < v2);
  }
  v12 = a2 - v3;
  v13 = (a2 - v3 - 4);
  if (a2 - v3 >= 4)
  {
    if (v13 >= 0x1C)
    {
      v17 = (v13 >> 2) + 1;
      v16 = 4 * (v17 & 0x7FFFFFF8);
      v18 = (const float *)(a1 + 64);
      v19 = 0uLL;
      v20 = v17 & 0x7FFFFFF8;
      v21 = 0uLL;
      do
      {
        v22 = v18 - 16;
        v39 = vld4q_f32(v22);
        v40 = vld4q_f32(v18);
        v19 = vsubq_s32(vsubq_s32(vsubq_s32(vsubq_s32(v19, vtstq_s32((int32x4_t)v39.val[0], (int32x4_t)v39.val[0])), vtstq_s32((int32x4_t)v39.val[1], (int32x4_t)v39.val[1])), vtstq_s32((int32x4_t)v39.val[2], (int32x4_t)v39.val[2])), vtstq_s32((int32x4_t)v39.val[3], (int32x4_t)v39.val[3]));
        v21 = vsubq_s32(vsubq_s32(vsubq_s32(vsubq_s32(v21, vtstq_s32((int32x4_t)v40.val[0], (int32x4_t)v40.val[0])), vtstq_s32((int32x4_t)v40.val[1], (int32x4_t)v40.val[1])), vtstq_s32((int32x4_t)v40.val[2], (int32x4_t)v40.val[2])), vtstq_s32((int32x4_t)v40.val[3], (int32x4_t)v40.val[3]));
        v18 += 32;
        v20 -= 8;
      }
      while (v20);
      v15 = vaddvq_s32(vaddq_s32(v21, v19));
      if (v17 == (v17 & 0x7FFFFFF8))
        goto LABEL_35;
    }
    else
    {
      v16 = 0;
      v15 = 0;
    }
    v23 = (int *)(a1 + 4 * v16 + 8);
    do
    {
      if (*(v23 - 2))
        ++v15;
      if (*(v23 - 1))
        ++v15;
      v24 = *v23;
      v25 = v23[1];
      v23 += 4;
      if (v24)
        ++v15;
      if (v25)
        ++v15;
      v16 += 4;
    }
    while (v16 <= v13);
LABEL_35:
    v14 = (v13 & 0xFFFFFFFC) + 4;
    if (v14 >= v12)
      goto LABEL_45;
    goto LABEL_36;
  }
  v14 = 0;
  v15 = 0;
  if (v12 <= 0)
    goto LABEL_45;
LABEL_36:
  v26 = v14;
  v27 = (~v3 + a2 - v14);
  if (v27 >= 7)
  {
    v29 = v27 + 1;
    v30 = (v27 + 1) & 0x1FFFFFFF8;
    v28 = v30 + v26;
    v31 = 0uLL;
    v32 = (int32x4_t)v15;
    v33 = (int32x4_t *)(a1 + 4 * v26 + 16);
    v34 = v30;
    do
    {
      v32 = vsubq_s32(v32, vtstq_s32(v33[-1], v33[-1]));
      v31 = vsubq_s32(v31, vtstq_s32(*v33, *v33));
      v33 += 2;
      v34 -= 8;
    }
    while (v34);
    v15 = vaddvq_s32(vaddq_s32(v31, v32));
    if (v29 == v30)
      goto LABEL_45;
  }
  else
  {
    v28 = v26;
  }
  v35 = (_DWORD *)(a1 + 4 * v28);
  do
  {
    if (*v35++)
      ++v15;
    LODWORD(v28) = v28 + 1;
  }
  while (v12 > (int)v28);
LABEL_45:
  v37 = vaddvq_s32(v4);
  if (v37 >= 0x7FFFFFFF)
    v37 = 0x7FFFFFFF;
  return v3 - v37 + v15;
}

uint64_t sub_10028FDCC(float32x4_t *a1, int a2)
{
  signed int v2;
  signed int v3;
  int32x4_t v4;
  int v5;
  int v6;
  int v7;
  int16x8_t v8;
  unint64_t v9;
  float32x4_t *v10;
  int16x8_t v11;
  int v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  const float *f32;
  int32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  const float *v22;
  float *v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int32x4_t v31;
  int32x4_t v32;
  float32x4_t *v33;
  uint64_t v34;
  float *v35;
  float v36;
  unsigned int v37;
  float32x4x4_t v39;
  float32x4x4_t v40;

  v2 = a2 & 0xFFFFFFF8;
  if ((int)(a2 & 0xFFFFFFF8) < 1)
  {
    v3 = 0;
    v4 = 0uLL;
  }
  else
  {
    v3 = 0;
    v4 = 0uLL;
    do
    {
      if (v2 - v3 >= 0x200000)
        v5 = 0x200000;
      else
        v5 = v2 - v3;
      if (v2 - v3 >= 1)
      {
        v6 = 0;
        do
        {
          v7 = v5 - v6;
          if (v5 - v6 >= 0x8000)
            v7 = 0x8000;
          v8 = 0uLL;
          if (v7 >= 8)
          {
            v9 = 0;
            v10 = a1 + 1;
            do
            {
              *(int8x8_t *)v11.i8 = vand_s8((int8x8_t)vmovn_s32(vceqzq_f32(v10[-1])), (int8x8_t)0x1000100010001);
              v11.u64[1] = (unint64_t)vand_s8((int8x8_t)vmovn_s32(vceqzq_f32(*v10)), (int8x8_t)0x1000100010001);
              v8 = vaddq_s16(v11, v8);
              v9 += 8;
              v10 += 2;
            }
            while (v9 <= (v7 - 8));
          }
          v4 = (int32x4_t)vaddw_u16(vaddw_high_u16((uint32x4_t)v4, (uint16x8_t)v8), *(uint16x4_t *)v8.i8);
          a1 = (float32x4_t *)((char *)a1 + 4 * v7);
          v6 += v7;
        }
        while (v6 < v5);
      }
      v3 += v5;
    }
    while (v3 < v2);
  }
  v12 = a2 - v3;
  v13 = (a2 - v3 - 4);
  if (a2 - v3 >= 4)
  {
    if (v13 >= 0x1C)
    {
      v17 = (v13 >> 2) + 1;
      v16 = 4 * (v17 & 0x7FFFFFF8);
      f32 = a1[4].f32;
      v19 = 0uLL;
      v20 = v17 & 0x7FFFFFF8;
      v21 = 0uLL;
      do
      {
        v22 = f32 - 16;
        v39 = vld4q_f32(v22);
        v40 = vld4q_f32(f32);
        v19 = vsubq_s32(vsubq_s32(vsubq_s32(vsubq_s32(v19, (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v39.val[0]))), (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v39.val[1]))), (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v39.val[2]))), (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v39.val[3])));
        v21 = vsubq_s32(vsubq_s32(vsubq_s32(vsubq_s32(v21, (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v40.val[0]))), (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v40.val[1]))), (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v40.val[2]))), (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v40.val[3])));
        f32 += 32;
        v20 -= 8;
      }
      while (v20);
      v15 = vaddvq_s32(vaddq_s32(v21, v19));
      if (v17 == (v17 & 0x7FFFFFF8))
        goto LABEL_35;
    }
    else
    {
      v16 = 0;
      v15 = 0;
    }
    v23 = &a1[v16 / 4].f32[2];
    do
    {
      if (*(v23 - 2) != 0.0)
        ++v15;
      if (*(v23 - 1) != 0.0)
        ++v15;
      v24 = *v23;
      v25 = v23[1];
      v23 += 4;
      if (v24 != 0.0)
        ++v15;
      if (v25 != 0.0)
        ++v15;
      v16 += 4;
    }
    while (v16 <= v13);
LABEL_35:
    v14 = (v13 & 0xFFFFFFFC) + 4;
    if (v14 >= v12)
      goto LABEL_45;
    goto LABEL_36;
  }
  v14 = 0;
  v15 = 0;
  if (v12 <= 0)
    goto LABEL_45;
LABEL_36:
  v26 = v14;
  v27 = (~v3 + a2 - v14);
  if (v27 >= 7)
  {
    v29 = v27 + 1;
    v30 = (v27 + 1) & 0x1FFFFFFF8;
    v28 = v30 + v26;
    v31 = 0uLL;
    v32 = (int32x4_t)v15;
    v33 = (float32x4_t *)((char *)a1 + 4 * v26 + 16);
    v34 = v30;
    do
    {
      v32 = vsubq_s32(v32, (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v33[-1])));
      v31 = vsubq_s32(v31, (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*v33)));
      v33 += 2;
      v34 -= 8;
    }
    while (v34);
    v15 = vaddvq_s32(vaddq_s32(v31, v32));
    if (v29 == v30)
      goto LABEL_45;
  }
  else
  {
    v28 = v26;
  }
  v35 = &a1->f32[v28];
  do
  {
    v36 = *v35++;
    if (v36 != 0.0)
      ++v15;
    LODWORD(v28) = v28 + 1;
  }
  while (v12 > (int)v28);
LABEL_45:
  v37 = vaddvq_s32(v4);
  if (v37 >= 0x7FFFFFFF)
    v37 = 0x7FFFFFFF;
  return v3 - v37 + v15;
}

uint64_t sub_100290078(uint64_t a1, int a2)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const double *v7;
  int32x4_t v8;
  uint64_t v9;
  int32x4_t v10;
  const double *v11;
  const double *v12;
  const double *v13;
  double *v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  float64x2_t *v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  double *v30;
  double v31;
  float64x2x4_t v33;
  float64x2x4_t v34;
  float64x2x4_t v35;
  float64x2x4_t v36;

  v2 = (a2 - 4);
  if (a2 < 4)
  {
    v3 = 0;
    v4 = 0;
    if (a2 <= 0)
      return v4;
    goto LABEL_21;
  }
  if (v2 >= 0x1C)
  {
    v6 = (v2 >> 2) + 1;
    v5 = 4 * (v6 & 0x7FFFFFF8);
    v7 = (const double *)(a1 + 128);
    v8 = 0uLL;
    v9 = v6 & 0x7FFFFFF8;
    v10 = 0uLL;
    do
    {
      v11 = v7 - 16;
      v12 = v7 - 8;
      v33 = vld4q_f64(v11);
      v34 = vld4q_f64(v12);
      v13 = v7;
      v35 = vld4q_f64(v13);
      v13 += 8;
      v36 = vld4q_f64(v13);
      v8 = vsubq_s32(vsubq_s32(vsubq_s32(vsubq_s32(v8, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v33.val[0]), (int32x4_t)vceqzq_f64(v34.val[0])))), (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v33.val[1]), (int32x4_t)vceqzq_f64(v34.val[1])))), (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v33.val[2]), (int32x4_t)vceqzq_f64(v34.val[2])))), (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v33.val[3]), (int32x4_t)vceqzq_f64(v34.val[3]))));
      v10 = vsubq_s32(vsubq_s32(vsubq_s32(vsubq_s32(v10, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v35.val[0]), (int32x4_t)vceqzq_f64(v36.val[0])))), (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v35.val[1]), (int32x4_t)vceqzq_f64(v36.val[1])))), (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v35.val[2]), (int32x4_t)vceqzq_f64(v36.val[2])))), (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v35.val[3]), (int32x4_t)vceqzq_f64(v36.val[3]))));
      v7 += 32;
      v9 -= 8;
    }
    while (v9);
    v4 = vaddvq_s32(vaddq_s32(v10, v8));
    if (v6 == (v6 & 0x7FFFFFF8))
      goto LABEL_20;
  }
  else
  {
    v5 = 0;
    LODWORD(v4) = 0;
  }
  v14 = (double *)(a1 + 8 * v5 + 16);
  do
  {
    if (*(v14 - 2) != 0.0)
      LODWORD(v4) = v4 + 1;
    if (*(v14 - 1) != 0.0)
      LODWORD(v4) = v4 + 1;
    v15 = *v14;
    v16 = v14[1];
    v14 += 4;
    if (v15 != 0.0)
      LODWORD(v4) = v4 + 1;
    if (v16 == 0.0)
      v4 = v4;
    else
      v4 = (v4 + 1);
    v5 += 4;
  }
  while (v5 <= v2);
LABEL_20:
  v3 = (v2 & 0xFFFFFFFC) + 4;
  if (v3 >= a2)
    return v4;
LABEL_21:
  v17 = v3;
  v18 = (~v3 + a2);
  if (v18 >= 7)
  {
    v20 = v18 + 1;
    v21 = (v18 + 1) & 0x1FFFFFFF8;
    v19 = v21 + v17;
    v22 = 0uLL;
    v23 = (int32x4_t)v4;
    v24 = (float64x2_t *)(a1 + 8 * v17 + 32);
    v25 = v21;
    do
    {
      v26 = v24[-2];
      v27 = v24[-1];
      v28 = *v24;
      v29 = v24[1];
      v24 += 4;
      v23 = vsubq_s32(v23, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v26), (int32x4_t)vceqzq_f64(v27))));
      v22 = vsubq_s32(v22, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v28), (int32x4_t)vceqzq_f64(v29))));
      v25 -= 8;
    }
    while (v25);
    v4 = vaddvq_s32(vaddq_s32(v22, v23));
    if (v20 == v21)
      return v4;
  }
  else
  {
    v19 = v17;
  }
  v30 = (double *)(a1 + 8 * v19);
  do
  {
    v31 = *v30++;
    if (v31 == 0.0)
      v4 = v4;
    else
      v4 = (v4 + 1);
    LODWORD(v19) = v19 + 1;
  }
  while ((int)v19 < a2);
  return v4;
}

unsigned __int8 *sub_1002902A8(unsigned __int8 *result, unsigned __int8 *a2, int *a3, int *a4, uint64_t *a5, uint64_t *a6, int a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  if (a2)
  {
    if (a7 >= 1)
    {
      v12 = a7;
      do
      {
        v14 = *result++;
        v13 = v14;
        v16 = *a2++;
        v15 = v16;
        if (v8 >= v13)
          v17 = v13;
        else
          v17 = v8;
        if (v8 <= v13)
          v18 = v10;
        else
          v18 = a8;
        v20 = __OFSUB__(v9, v13);
        v19 = v9 - v13 < 0;
        if (v9 > v13)
          v13 = v9;
        if (v19 != v20)
          v21 = a8;
        else
          v21 = v11;
        if (v15)
        {
          v8 = v17;
          v10 = v18;
          v9 = v13;
          v11 = v21;
        }
        ++a8;
        --v12;
      }
      while (v12);
    }
  }
  else if (a7 >= 1)
  {
    v22 = a7;
    do
    {
      v24 = *result++;
      v23 = v24;
      v27 = __OFSUB__(v8, v24);
      v25 = v8 == v24;
      v26 = v8 - v24 < 0;
      if (v8 >= v24)
        v8 = v23;
      if (!(v26 ^ v27 | v25))
        v10 = a8;
      v29 = __OFSUB__(v9, v23);
      v28 = v9 - v23 < 0;
      if (v9 <= v23)
        v9 = v23;
      if (v28 != v29)
        v11 = a8;
      ++a8;
      --v22;
    }
    while (v22);
  }
  *a5 = v10;
  *a6 = v11;
  *a3 = v8;
  *a4 = v9;
  return result;
}

char *sub_100290350(char *result, unsigned __int8 *a2, int *a3, int *a4, uint64_t *a5, uint64_t *a6, int a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  if (a2)
  {
    if (a7 >= 1)
    {
      v12 = a7;
      do
      {
        v14 = *result++;
        v13 = v14;
        v16 = *a2++;
        v15 = v16;
        if (v8 >= v13)
          v17 = v13;
        else
          v17 = v8;
        if (v8 <= v13)
          v18 = v10;
        else
          v18 = a8;
        v20 = __OFSUB__(v9, v13);
        v19 = v9 - v13 < 0;
        if (v9 > v13)
          v13 = v9;
        if (v19 != v20)
          v21 = a8;
        else
          v21 = v11;
        if (v15)
        {
          v8 = v17;
          v10 = v18;
          v9 = v13;
          v11 = v21;
        }
        ++a8;
        --v12;
      }
      while (v12);
    }
  }
  else if (a7 >= 1)
  {
    v22 = a7;
    do
    {
      v24 = *result++;
      v23 = v24;
      v27 = __OFSUB__(v8, v24);
      v25 = v8 == v24;
      v26 = v8 - v24 < 0;
      if (v8 >= v24)
        v8 = v23;
      if (!(v26 ^ v27 | v25))
        v10 = a8;
      v29 = __OFSUB__(v9, v23);
      v28 = v9 - v23 < 0;
      if (v9 <= v23)
        v9 = v23;
      if (v28 != v29)
        v11 = a8;
      ++a8;
      --v22;
    }
    while (v22);
  }
  *a5 = v10;
  *a6 = v11;
  *a3 = v8;
  *a4 = v9;
  return result;
}

unsigned __int16 *sub_1002903F8(unsigned __int16 *result, unsigned __int8 *a2, int *a3, int *a4, uint64_t *a5, uint64_t *a6, int a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  if (a2)
  {
    if (a7 >= 1)
    {
      v12 = a7;
      do
      {
        v14 = *result++;
        v13 = v14;
        v16 = *a2++;
        v15 = v16;
        if (v8 >= v13)
          v17 = v13;
        else
          v17 = v8;
        if (v8 <= v13)
          v18 = v10;
        else
          v18 = a8;
        v20 = __OFSUB__(v9, v13);
        v19 = v9 - v13 < 0;
        if (v9 > v13)
          v13 = v9;
        if (v19 != v20)
          v21 = a8;
        else
          v21 = v11;
        if (v15)
        {
          v8 = v17;
          v10 = v18;
          v9 = v13;
          v11 = v21;
        }
        ++a8;
        --v12;
      }
      while (v12);
    }
  }
  else if (a7 >= 1)
  {
    v22 = a7;
    do
    {
      v24 = *result++;
      v23 = v24;
      v27 = __OFSUB__(v8, v24);
      v25 = v8 == v24;
      v26 = v8 - v24 < 0;
      if (v8 >= v24)
        v8 = v23;
      if (!(v26 ^ v27 | v25))
        v10 = a8;
      v29 = __OFSUB__(v9, v23);
      v28 = v9 - v23 < 0;
      if (v9 <= v23)
        v9 = v23;
      if (v28 != v29)
        v11 = a8;
      ++a8;
      --v22;
    }
    while (v22);
  }
  *a5 = v10;
  *a6 = v11;
  *a3 = v8;
  *a4 = v9;
  return result;
}

__int16 *sub_1002904A0(__int16 *result, unsigned __int8 *a2, int *a3, int *a4, uint64_t *a5, uint64_t *a6, int a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  if (a2)
  {
    if (a7 >= 1)
    {
      v12 = a7;
      do
      {
        v14 = *result++;
        v13 = v14;
        v16 = *a2++;
        v15 = v16;
        if (v8 >= v13)
          v17 = v13;
        else
          v17 = v8;
        if (v8 <= v13)
          v18 = v10;
        else
          v18 = a8;
        v20 = __OFSUB__(v9, v13);
        v19 = v9 - v13 < 0;
        if (v9 > v13)
          v13 = v9;
        if (v19 != v20)
          v21 = a8;
        else
          v21 = v11;
        if (v15)
        {
          v8 = v17;
          v10 = v18;
          v9 = v13;
          v11 = v21;
        }
        ++a8;
        --v12;
      }
      while (v12);
    }
  }
  else if (a7 >= 1)
  {
    v22 = a7;
    do
    {
      v24 = *result++;
      v23 = v24;
      v27 = __OFSUB__(v8, v24);
      v25 = v8 == v24;
      v26 = v8 - v24 < 0;
      if (v8 >= v24)
        v8 = v23;
      if (!(v26 ^ v27 | v25))
        v10 = a8;
      v29 = __OFSUB__(v9, v23);
      v28 = v9 - v23 < 0;
      if (v9 <= v23)
        v9 = v23;
      if (v28 != v29)
        v11 = a8;
      ++a8;
      --v22;
    }
    while (v22);
  }
  *a5 = v10;
  *a6 = v11;
  *a3 = v8;
  *a4 = v9;
  return result;
}

int *sub_100290548(int *result, unsigned __int8 *a2, int *a3, int *a4, uint64_t *a5, uint64_t *a6, int a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  int v19;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  if (a2)
  {
    if (a7 >= 1)
    {
      v12 = a7;
      do
      {
        v14 = *result++;
        v13 = v14;
        v15 = *a2++;
        v16 = v15 != 0;
        if (v15 != 0 && v13 < v8)
        {
          v8 = v13;
          v10 = a8;
        }
        if (v16 && v13 > v9)
        {
          v9 = v13;
          v11 = a8;
        }
        ++a8;
        --v12;
      }
      while (v12);
    }
  }
  else if (a7 >= 1)
  {
    v17 = a7;
    do
    {
      v19 = *result++;
      v18 = v19;
      if (v19 < v8)
      {
        v8 = v18;
        v10 = a8;
      }
      if (v18 > v9)
      {
        v9 = v18;
        v11 = a8;
      }
      ++a8;
      --v17;
    }
    while (v17);
  }
  *a5 = v10;
  *a6 = v11;
  *a3 = v8;
  *a4 = v9;
  return result;
}

float *sub_1002905F4(float *result, unsigned __int8 *a2, float *a3, float *a4, uint64_t *a5, uint64_t *a6, int a7, uint64_t a8)
{
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  float v18;
  float v19;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  if (a2)
  {
    if (a7 >= 1)
    {
      v12 = a7;
      do
      {
        v13 = *result++;
        v14 = v13;
        v15 = *a2++;
        v16 = v15 != 0;
        if (v15 != 0 && v14 < v8)
        {
          v8 = v14;
          v10 = a8;
        }
        if (v16 && v14 > v9)
        {
          v9 = v14;
          v11 = a8;
        }
        ++a8;
        --v12;
      }
      while (v12);
    }
  }
  else if (a7 >= 1)
  {
    v17 = a7;
    do
    {
      v18 = *result++;
      v19 = v18;
      if (v18 < v8)
      {
        v8 = v19;
        v10 = a8;
      }
      if (v19 > v9)
      {
        v9 = v19;
        v11 = a8;
      }
      ++a8;
      --v17;
    }
    while (v17);
  }
  *a5 = v10;
  *a6 = v11;
  *a3 = v8;
  *a4 = v9;
  return result;
}

double *sub_1002906A0(double *result, unsigned __int8 *a2, double *a3, double *a4, uint64_t *a5, uint64_t *a6, int a7, uint64_t a8)
{
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  BOOL v15;
  uint64_t v16;
  double v17;
  double v18;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  if (a2)
  {
    if (a7 >= 1)
    {
      v12 = a7;
      do
      {
        v13 = *result++;
        v14 = v13;
        LODWORD(v13) = *a2++;
        v15 = LODWORD(v13) != 0;
        if (LODWORD(v13) != 0 && v14 < v8)
        {
          v8 = v14;
          v10 = a8;
        }
        if (v15 && v14 > v9)
        {
          v9 = v14;
          v11 = a8;
        }
        ++a8;
        --v12;
      }
      while (v12);
    }
  }
  else if (a7 >= 1)
  {
    v16 = a7;
    do
    {
      v17 = *result++;
      v18 = v17;
      if (v17 < v8)
      {
        v8 = v18;
        v10 = a8;
      }
      if (v18 > v9)
      {
        v9 = v18;
        v11 = a8;
      }
      ++a8;
      --v16;
    }
    while (v16);
  }
  *a5 = v10;
  *a6 = v11;
  *a3 = v8;
  *a4 = v9;
  return result;
}

uint64_t sub_10029074C(int8x16_t *a1, unsigned __int8 *a2, signed int *a3, int a4, int a5, double a6, double a7, double a8, double a9, int32x4_t a10, double a11, int32x4_t a12)
{
  signed int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  signed int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  uint64_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int8x16_t *v38;
  int32x4_t v39;
  int32x4_t v40;
  uint64_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int8x16_t v47;
  uint64_t v48;
  int32x4_t v49;
  unint64_t *v50;
  uint64_t v51;
  int32x4_t v52;
  unint64_t v53;
  int32x4_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  signed int v57;
  signed int v58;

  v12 = *a3;
  if (a2)
  {
    if (a4 < 1 || a5 < 1)
      goto LABEL_63;
    v13 = a4;
    if (a5 < 8)
    {
      v14 = &a1->u8[3];
      do
      {
        if (*a2++)
        {
          if (v12 <= *(v14 - 3))
            v12 = *(v14 - 3);
          if (a5 != 1)
          {
            if (v12 <= *(v14 - 2))
              v12 = *(v14 - 2);
            if (a5 != 2)
            {
              if (v12 <= *(v14 - 1))
                v12 = *(v14 - 1);
              if (a5 != 3)
              {
                if (v12 <= *v14)
                  v12 = *v14;
                if (a5 != 4)
                {
                  if (v12 <= v14[1])
                    v12 = v14[1];
                  if (a5 != 5)
                  {
                    if (v12 <= v14[2])
                      v12 = v14[2];
                    if (a5 != 6 && v12 <= v14[3])
                      v12 = v14[3];
                  }
                }
              }
            }
          }
        }
        v14 += a5;
        --v13;
      }
      while (v13);
      goto LABEL_63;
    }
    v19 = 0;
    v20 = a5 & 0xFFFFFFE0;
    v21 = a5 & 0xFFFFFFF8;
    while (1)
    {
      if (a2[v19])
      {
        if (a5 >= 0x20)
        {
          v23 = 0;
          v24 = vdupq_n_s32(v12);
          v25 = v24;
          v26 = v24;
          v27 = v24;
          v28 = v24;
          v29 = v24;
          v30 = v24;
          v31 = v24;
          do
          {
            v32 = a1[v23 / 0x10];
            v33 = a1[v23 / 0x10 + 1];
            v27 = vmaxq_s32(v27, (int32x4_t)vqtbl1q_s8(v32, (int8x16_t)xmmword_1003BCAC0));
            v26 = vmaxq_s32(v26, (int32x4_t)vqtbl1q_s8(v32, (int8x16_t)xmmword_1003BCAB0));
            v25 = vmaxq_s32(v25, (int32x4_t)vqtbl1q_s8(v32, (int8x16_t)xmmword_1003BCAA0));
            v24 = vmaxq_s32(v24, (int32x4_t)vqtbl1q_s8(v32, (int8x16_t)xmmword_1003BCA90));
            v31 = vmaxq_s32(v31, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1003BCAC0));
            v30 = vmaxq_s32(v30, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1003BCAB0));
            v29 = vmaxq_s32(v29, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1003BCAA0));
            v28 = vmaxq_s32(v28, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1003BCA90));
            v23 += 32;
          }
          while (v20 != v23);
          a12 = vmaxq_s32(v25, v29);
          v12 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(vmaxq_s32(v24, v28), vmaxq_s32(v26, v30)), vmaxq_s32(a12, vmaxq_s32(v27, v31))));
          if (v20 == a5)
            goto LABEL_33;
          v22 = a5 & 0xFFFFFFE0;
          v34 = v22;
          if ((a5 & 0x18) == 0)
            goto LABEL_44;
        }
        else
        {
          v22 = 0;
        }
        v35 = vdupq_n_s32(v12);
        v36 = v35;
        do
        {
          a12.i64[0] = *(uint64_t *)((char *)a1->i64 + v22);
          v37 = (int32x4_t)vqtbl1q_s8((int8x16_t)a12, (int8x16_t)xmmword_1003BCA90);
          a12 = (int32x4_t)vqtbl1q_s8((int8x16_t)a12, (int8x16_t)xmmword_1003BCAA0);
          v36 = vmaxq_s32(v36, a12);
          v35 = vmaxq_s32(v35, v37);
          v22 += 8;
        }
        while (v21 != v22);
        v12 = vmaxvq_s32(vmaxq_s32(v35, v36));
        v34 = a5 & 0xFFFFFFF8;
        if (v21 != a5)
        {
          do
          {
LABEL_44:
            if (v12 <= a1->u8[v34])
              v12 = a1->u8[v34];
            ++v34;
          }
          while (a5 != v34);
        }
      }
LABEL_33:
      ++v19;
      a1 = (int8x16_t *)((char *)a1 + a5);
      if (v19 == a4)
        goto LABEL_63;
    }
  }
  v16 = (a5 * a4);
  if ((int)v16 < 1)
  {
    v18 = 0;
    goto LABEL_61;
  }
  if (v16 < 8)
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_57;
  }
  if (v16 >= 0x20)
  {
    v17 = v16 & 0x7FFFFFE0;
    v38 = a1 + 1;
    v39 = 0uLL;
    v40 = 0uLL;
    v41 = v16 & 0xFFFFFFE0;
    a10 = 0uLL;
    v42 = 0uLL;
    v43 = 0uLL;
    v44 = 0uLL;
    v45 = 0uLL;
    v46 = 0uLL;
    do
    {
      v47 = v38[-1];
      a10 = vmaxq_s32(a10, (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_1003BCAB0));
      v40 = vmaxq_s32(v40, (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_1003BCAA0));
      v39 = vmaxq_s32(v39, (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_1003BCA90));
      v42 = vmaxq_s32(v42, (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_1003BCAC0));
      v45 = vmaxq_s32(v45, (int32x4_t)vqtbl1q_s8(*v38, (int8x16_t)xmmword_1003BCAB0));
      v44 = vmaxq_s32(v44, (int32x4_t)vqtbl1q_s8(*v38, (int8x16_t)xmmword_1003BCAA0));
      v43 = vmaxq_s32(v43, (int32x4_t)vqtbl1q_s8(*v38, (int8x16_t)xmmword_1003BCA90));
      v46 = vmaxq_s32(v46, (int32x4_t)vqtbl1q_s8(*v38, (int8x16_t)xmmword_1003BCAC0));
      v38 += 2;
      v41 -= 32;
    }
    while (v41);
    v18 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(vmaxq_s32(v39, v43), vmaxq_s32(a10, v45)), vmaxq_s32(vmaxq_s32(v40, v44), vmaxq_s32(v42, v46))));
    if (v17 == v16)
      goto LABEL_61;
    if ((((_BYTE)a5 * (_BYTE)a4) & 0x18) == 0)
      goto LABEL_57;
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v48 = v17;
  v17 = v16 & 0xFFFFFFF8;
  v49 = vdupq_n_s32(v18);
  v50 = (unint64_t *)((char *)a1->u64 + v48);
  v51 = v48 - v17;
  v52 = v49;
  do
  {
    v53 = *v50++;
    a10.i64[0] = v53;
    v54 = (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_1003BCA90);
    a10 = (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_1003BCAA0);
    v52 = vmaxq_s32(v52, a10);
    v49 = vmaxq_s32(v49, v54);
    v51 += 8;
  }
  while (v51);
  v18 = vmaxvq_s32(vmaxq_s32(v49, v52));
  if (v17 != v16)
  {
LABEL_57:
    v55 = v16 - v17;
    v56 = &a1->u8[v17];
    do
    {
      v58 = *v56++;
      v57 = v58;
      if (v18 <= v58)
        v18 = v57;
      --v55;
    }
    while (v55);
  }
LABEL_61:
  if (v12 <= v18)
    v12 = v18;
LABEL_63:
  *a3 = v12;
  return 0;
}

uint64_t sub_100290B18(int8x16_t *a1, unsigned __int8 *a2, signed int *a3, int a4, int a5, double a6, double a7, double a8, double a9, int32x4_t a10, double a11, int32x4_t a12)
{
  signed int v12;
  uint64_t v13;
  char *v14;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint64_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int v45;
  int8x16_t *v46;
  int32x4_t v47;
  int32x4_t v48;
  uint64_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint64_t v57;
  int32x4_t v58;
  int8x8_t *v59;
  uint64_t v60;
  int32x4_t v61;
  int8x8_t v62;
  int32x4_t v63;
  uint64_t v64;
  __int8 *v65;
  int v66;
  int v67;

  v12 = *a3;
  if (a2)
  {
    if (a4 < 1 || a5 < 1)
      goto LABEL_81;
    v13 = a4;
    if (a5 < 8)
    {
      v14 = &a1->i8[3];
      do
      {
        if (*a2++)
        {
          v16 = *(v14 - 3);
          if (v16 < 0)
            v16 = -v16;
          if (v12 <= v16)
            v12 = v16;
          if (a5 != 1)
          {
            v17 = *(v14 - 2);
            if (v17 < 0)
              v17 = -v17;
            if (v12 <= v17)
              v12 = v17;
            if (a5 != 2)
            {
              v18 = *(v14 - 1);
              if (v18 < 0)
                v18 = -v18;
              if (v12 <= v18)
                v12 = v18;
              if (a5 != 3)
              {
                v19 = *v14;
                if (v19 < 0)
                  v19 = -v19;
                if (v12 <= v19)
                  v12 = v19;
                if (a5 != 4)
                {
                  v20 = v14[1];
                  if (v20 < 0)
                    v20 = -v20;
                  if (v12 <= v20)
                    v12 = v20;
                  if (a5 != 5)
                  {
                    v21 = v14[2];
                    if (v21 < 0)
                      v21 = -v21;
                    if (v12 <= v21)
                      v12 = v21;
                    if (a5 != 6)
                    {
                      v22 = v14[3];
                      if (v22 < 0)
                        v22 = -v22;
                      if (v12 <= v22)
                        v12 = v22;
                    }
                  }
                }
              }
            }
          }
        }
        v14 += a5;
        --v13;
      }
      while (v13);
      goto LABEL_81;
    }
    v26 = 0;
    v27 = a5 & 0xFFFFFFE0;
    v28 = a5 & 0xFFFFFFF8;
    while (1)
    {
      if (a2[v26])
      {
        if (a5 >= 0x20)
        {
          v30 = 0;
          v31 = vdupq_n_s32(v12);
          v32 = v31;
          v33 = v31;
          v34 = v31;
          v35 = v31;
          v36 = v31;
          v37 = v31;
          v38 = v31;
          do
          {
            v39 = vabsq_s8(a1[v30 / 0x10]);
            v40 = vabsq_s8(a1[v30 / 0x10 + 1]);
            v34 = vmaxq_s32(v34, (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1003BCAC0));
            v33 = vmaxq_s32(v33, (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1003BCAB0));
            v32 = vmaxq_s32(v32, (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1003BCAA0));
            v31 = vmaxq_s32(v31, (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1003BCA90));
            v38 = vmaxq_s32(v38, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1003BCAC0));
            v37 = vmaxq_s32(v37, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1003BCAB0));
            v36 = vmaxq_s32(v36, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1003BCAA0));
            v35 = vmaxq_s32(v35, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1003BCA90));
            v30 += 32;
          }
          while (v27 != v30);
          a12 = vmaxq_s32(v32, v36);
          v12 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(vmaxq_s32(v31, v35), vmaxq_s32(v33, v37)), vmaxq_s32(a12, vmaxq_s32(v34, v38))));
          if (v27 == a5)
            goto LABEL_47;
          v29 = a5 & 0xFFFFFFE0;
          v41 = v29;
          if ((a5 & 0x18) == 0)
            goto LABEL_58;
        }
        else
        {
          v29 = 0;
        }
        v42 = vdupq_n_s32(v12);
        v43 = v42;
        do
        {
          *(int8x8_t *)a12.i8 = vabs_s8(*(int8x8_t *)&a1->i8[v29]);
          v44 = (int32x4_t)vqtbl1q_s8((int8x16_t)a12, (int8x16_t)xmmword_1003BCA90);
          a12 = (int32x4_t)vqtbl1q_s8((int8x16_t)a12, (int8x16_t)xmmword_1003BCAA0);
          v43 = vmaxq_s32(v43, a12);
          v42 = vmaxq_s32(v42, v44);
          v29 += 8;
        }
        while (v28 != v29);
        v12 = vmaxvq_s32(vmaxq_s32(v42, v43));
        v41 = a5 & 0xFFFFFFF8;
        if (v28 != a5)
        {
          do
          {
LABEL_58:
            v45 = a1->i8[v41];
            if (v45 < 0)
              v45 = -v45;
            if (v12 <= v45)
              v12 = v45;
            ++v41;
          }
          while (a5 != v41);
        }
      }
LABEL_47:
      ++v26;
      a1 = (int8x16_t *)((char *)a1 + a5);
      if (v26 == a4)
        goto LABEL_81;
    }
  }
  v23 = (a5 * a4);
  if ((int)v23 < 1)
  {
    v25 = 0;
    goto LABEL_79;
  }
  if (v23 < 8)
  {
    v24 = 0;
    v25 = 0;
    goto LABEL_73;
  }
  if (v23 >= 0x20)
  {
    v24 = v23 & 0x7FFFFFE0;
    v46 = a1 + 1;
    v47 = 0uLL;
    v48 = 0uLL;
    v49 = v23 & 0xFFFFFFE0;
    a10 = 0uLL;
    v50 = 0uLL;
    v51 = 0uLL;
    v52 = 0uLL;
    v53 = 0uLL;
    v54 = 0uLL;
    do
    {
      v55 = vabsq_s8(v46[-1]);
      v56 = vabsq_s8(*v46);
      v50 = vmaxq_s32(v50, (int32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_1003BCAC0));
      a10 = vmaxq_s32(a10, (int32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_1003BCAB0));
      v48 = vmaxq_s32(v48, (int32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_1003BCAA0));
      v47 = vmaxq_s32(v47, (int32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_1003BCA90));
      v54 = vmaxq_s32(v54, (int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_1003BCAC0));
      v53 = vmaxq_s32(v53, (int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_1003BCAB0));
      v52 = vmaxq_s32(v52, (int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_1003BCAA0));
      v51 = vmaxq_s32(v51, (int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_1003BCA90));
      v46 += 2;
      v49 -= 32;
    }
    while (v49);
    v25 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(vmaxq_s32(v47, v51), vmaxq_s32(a10, v53)), vmaxq_s32(vmaxq_s32(v48, v52), vmaxq_s32(v50, v54))));
    if (v24 == v23)
      goto LABEL_79;
    if ((((_BYTE)a5 * (_BYTE)a4) & 0x18) == 0)
      goto LABEL_73;
  }
  else
  {
    v25 = 0;
    v24 = 0;
  }
  v57 = v24;
  v24 = v23 & 0xFFFFFFF8;
  v58 = vdupq_n_s32(v25);
  v59 = (int8x8_t *)&a1->i8[v57];
  v60 = v57 - v24;
  v61 = v58;
  do
  {
    v62 = *v59++;
    *(int8x8_t *)a10.i8 = vabs_s8(v62);
    v63 = (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_1003BCA90);
    a10 = (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_1003BCAA0);
    v61 = vmaxq_s32(v61, a10);
    v58 = vmaxq_s32(v58, v63);
    v60 += 8;
  }
  while (v60);
  v25 = vmaxvq_s32(vmaxq_s32(v58, v61));
  if (v24 != v23)
  {
LABEL_73:
    v64 = v23 - v24;
    v65 = &a1->i8[v24];
    do
    {
      v67 = *v65++;
      v66 = v67;
      if (v67 < 0)
        v66 = -v66;
      if (v25 <= v66)
        v25 = v66;
      --v64;
    }
    while (v64);
  }
LABEL_79:
  if (v12 <= v25)
    v12 = v25;
LABEL_81:
  *a3 = v12;
  return 0;
}

uint64_t sub_100290F44(uint16x8_t *a1, uint64_t a2, signed int *a3, int a4, int a5)
{
  signed int v5;
  uint64_t j;
  uint64_t k;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  unint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint64_t v19;
  uint16x8_t *v20;
  int32x4_t v21;
  uint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  uint16x8_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  int v29;
  int v30;

  v5 = *a3;
  if (a2)
  {
    if (a4 >= 1 && a5 >= 1)
    {
      if (a5 >= 0x10)
      {
        for (i = 0; i != a4; ++i)
        {
          if (*(_BYTE *)(a2 + i))
          {
            v12 = 0;
            v13 = vdupq_n_s32(v5);
            v14 = v13;
            v15 = v13;
            v16 = v13;
            do
            {
              v17 = a1[v12 / 0x10];
              v18 = a1[v12 / 0x10 + 1];
              v14 = vmaxq_s32(v14, (int32x4_t)vmovl_high_u16(v17));
              v13 = vmaxq_s32(v13, (int32x4_t)vmovl_u16(*(uint16x4_t *)v17.i8));
              v16 = vmaxq_s32(v16, (int32x4_t)vmovl_high_u16(v18));
              v15 = vmaxq_s32(v15, (int32x4_t)vmovl_u16(*(uint16x4_t *)v18.i8));
              v12 += 32;
            }
            while (((2 * a5) & 0x1FFFFFFE0) != v12);
            v5 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(v13, v15), vmaxq_s32(v14, v16)));
            if ((a5 & 0xFFFFFFF0) != (unint64_t)a5)
            {
              v19 = a5 & 0x7FFFFFF0;
              do
              {
                if (v5 <= a1->u16[v19])
                  v5 = a1->u16[v19];
                ++v19;
              }
              while (a5 != v19);
            }
          }
          a1 = (uint16x8_t *)((char *)a1 + 2 * a5);
        }
      }
      else
      {
        for (j = 0; j != a4; ++j)
        {
          if (*(_BYTE *)(a2 + j))
          {
            for (k = 0; k != a5; ++k)
            {
              if (v5 <= a1->u16[k])
                v5 = a1->u16[k];
            }
          }
          a1 = (uint16x8_t *)((char *)a1 + 2 * a5);
        }
      }
    }
    goto LABEL_37;
  }
  v8 = (a5 * a4);
  if ((int)v8 < 1)
  {
    v10 = 0;
  }
  else
  {
    if (v8 < 0x10)
    {
      v9 = 0;
      v10 = 0;
      goto LABEL_31;
    }
    v9 = v8 & 0x7FFFFFF0;
    v20 = a1 + 1;
    v21 = 0uLL;
    v22 = v8 & 0xFFFFFFF0;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    do
    {
      v26 = v20[-1];
      v23 = vmaxq_s32(v23, (int32x4_t)vmovl_high_u16(v26));
      v21 = vmaxq_s32(v21, (int32x4_t)vmovl_u16(*(uint16x4_t *)v26.i8));
      v25 = vmaxq_s32(v25, (int32x4_t)vmovl_high_u16(*v20));
      v24 = vmaxq_s32(v24, (int32x4_t)vmovl_u16(*(uint16x4_t *)v20->i8));
      v20 += 2;
      v22 -= 16;
    }
    while (v22);
    v10 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(v21, v24), vmaxq_s32(v23, v25)));
    if (v9 != v8)
    {
LABEL_31:
      v27 = v8 - v9;
      v28 = (unsigned __int16 *)a1 + v9;
      do
      {
        v30 = *v28++;
        v29 = v30;
        if (v10 <= v30)
          v10 = v29;
        --v27;
      }
      while (v27);
    }
  }
  if (v5 <= v10)
    v5 = v10;
LABEL_37:
  *a3 = v5;
  return 0;
}

uint64_t sub_10029112C(int16x8_t *a1, uint64_t a2, signed int *a3, int a4, int a5)
{
  signed int v5;
  uint64_t j;
  uint64_t k;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t i;
  unint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint64_t v20;
  int v21;
  int16x8_t *v22;
  int32x4_t v23;
  uint64_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint64_t v30;
  __int16 *v31;
  int v32;
  int v33;

  v5 = *a3;
  if (a2)
  {
    if (a4 >= 1 && a5 >= 1)
    {
      if (a5 >= 0x10)
      {
        for (i = 0; i != a4; ++i)
        {
          if (*(_BYTE *)(a2 + i))
          {
            v13 = 0;
            v14 = vdupq_n_s32(v5);
            v15 = v14;
            v16 = v14;
            v17 = v14;
            do
            {
              v18 = (uint16x8_t)vabsq_s16(a1[v13 / 0x10]);
              v19 = (uint16x8_t)vabsq_s16(a1[v13 / 0x10 + 1]);
              v15 = vmaxq_s32(v15, (int32x4_t)vmovl_high_u16(v18));
              v14 = vmaxq_s32(v14, (int32x4_t)vmovl_u16(*(uint16x4_t *)v18.i8));
              v17 = vmaxq_s32(v17, (int32x4_t)vmovl_high_u16(v19));
              v16 = vmaxq_s32(v16, (int32x4_t)vmovl_u16(*(uint16x4_t *)v19.i8));
              v13 += 32;
            }
            while (((2 * a5) & 0x1FFFFFFE0) != v13);
            v5 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(v14, v16), vmaxq_s32(v15, v17)));
            if ((a5 & 0xFFFFFFF0) != (unint64_t)a5)
            {
              v20 = a5 & 0x7FFFFFF0;
              do
              {
                v21 = a1->i16[v20];
                if (v21 < 0)
                  v21 = -v21;
                if (v5 <= v21)
                  v5 = v21;
                ++v20;
              }
              while (a5 != v20);
            }
          }
          a1 = (int16x8_t *)((char *)a1 + 2 * a5);
        }
      }
      else
      {
        for (j = 0; j != a4; ++j)
        {
          if (*(_BYTE *)(a2 + j))
          {
            for (k = 0; k != a5; ++k)
            {
              v8 = a1->i16[k];
              if (v8 < 0)
                v8 = -v8;
              if (v5 <= v8)
                v5 = v8;
            }
          }
          a1 = (int16x8_t *)((char *)a1 + 2 * a5);
        }
      }
    }
    goto LABEL_43;
  }
  v9 = (a5 * a4);
  if ((int)v9 < 1)
  {
    v11 = 0;
  }
  else
  {
    if (v9 < 0x10)
    {
      v10 = 0;
      v11 = 0;
      goto LABEL_35;
    }
    v10 = v9 & 0x7FFFFFF0;
    v22 = a1 + 1;
    v23 = 0uLL;
    v24 = v9 & 0xFFFFFFF0;
    v25 = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
    do
    {
      v28 = (uint16x8_t)vabsq_s16(v22[-1]);
      v29 = (uint16x8_t)vabsq_s16(*v22);
      v25 = vmaxq_s32(v25, (int32x4_t)vmovl_high_u16(v28));
      v23 = vmaxq_s32(v23, (int32x4_t)vmovl_u16(*(uint16x4_t *)v28.i8));
      v27 = vmaxq_s32(v27, (int32x4_t)vmovl_high_u16(v29));
      v26 = vmaxq_s32(v26, (int32x4_t)vmovl_u16(*(uint16x4_t *)v29.i8));
      v22 += 2;
      v24 -= 16;
    }
    while (v24);
    v11 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(v23, v26), vmaxq_s32(v25, v27)));
    if (v10 != v9)
    {
LABEL_35:
      v30 = v9 - v10;
      v31 = &a1->i16[v10];
      do
      {
        v33 = *v31++;
        v32 = v33;
        if (v33 < 0)
          v32 = -v32;
        if (v11 <= v32)
          v11 = v32;
        --v30;
      }
      while (v30);
    }
  }
  if (v5 <= v11)
    v5 = v11;
LABEL_43:
  *a3 = v5;
  return 0;
}

uint64_t sub_10029133C(int32x4_t *a1, unsigned __int8 *a2, signed int *a3, int a4, int a5)
{
  signed int v5;
  uint64_t v6;
  int *v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t i;
  unint64_t v20;
  int32x4_t v21;
  int32x4_t v22;
  uint64_t v23;
  int v24;
  int32x4_t *v25;
  int32x4_t v26;
  uint64_t v27;
  int32x4_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;

  v5 = *a3;
  if (a2)
  {
    if (a4 >= 1 && a5 >= 1)
    {
      v6 = a4;
      if (a5 >= 8)
      {
        for (i = 0; i != a4; ++i)
        {
          if (a2[i])
          {
            v20 = 0;
            v21 = vdupq_n_s32(v5);
            v22 = v21;
            do
            {
              v21 = vmaxq_s32(v21, vabsq_s32(a1[v20 / 0x10]));
              v22 = vmaxq_s32(v22, vabsq_s32(a1[v20 / 0x10 + 1]));
              v20 += 32;
            }
            while (((4 * a5) & 0x3FFFFFFE0) != v20);
            v5 = vmaxvq_s32(vmaxq_s32(v21, v22));
            if ((a5 & 0xFFFFFFF8) != (unint64_t)a5)
            {
              v23 = a5 & 0xFFFFFFF8;
              do
              {
                v24 = a1->i32[v23];
                if (v24 < 0)
                  v24 = -v24;
                if (v5 <= v24)
                  v5 = v24;
                ++v23;
              }
              while (a5 != v23);
            }
          }
          a1 = (int32x4_t *)((char *)a1 + 4 * a5);
        }
      }
      else
      {
        v7 = &a1->i32[3];
        do
        {
          if (*a2++)
          {
            v9 = *(v7 - 3);
            if (v9 < 0)
              v9 = -v9;
            if (v5 <= v9)
              v5 = v9;
            if (a5 != 1)
            {
              v10 = *(v7 - 2);
              if (v10 < 0)
                v10 = -v10;
              if (v5 <= v10)
                v5 = v10;
              if (a5 != 2)
              {
                v11 = *(v7 - 1);
                if (v11 < 0)
                  v11 = -v11;
                if (v5 <= v11)
                  v5 = v11;
                if (a5 != 3)
                {
                  v12 = *v7;
                  if (*v7 < 0)
                    v12 = -v12;
                  if (v5 <= v12)
                    v5 = v12;
                  if (a5 != 4)
                  {
                    v13 = v7[1];
                    if (v13 < 0)
                      v13 = -v13;
                    if (v5 <= v13)
                      v5 = v13;
                    if (a5 != 5)
                    {
                      v14 = v7[2];
                      if (v14 < 0)
                        v14 = -v14;
                      if (v5 <= v14)
                        v5 = v14;
                      if (a5 != 6)
                      {
                        v15 = v7[3];
                        if (v15 < 0)
                          v15 = -v15;
                        if (v5 <= v15)
                          v5 = v15;
                      }
                    }
                  }
                }
              }
            }
          }
          v7 += a5;
          --v6;
        }
        while (v6);
      }
    }
    goto LABEL_70;
  }
  v16 = (a5 * a4);
  if ((int)v16 < 1)
  {
    v18 = 0;
  }
  else
  {
    if (v16 < 8)
    {
      v17 = 0;
      v18 = 0;
      goto LABEL_62;
    }
    v17 = v16 & 0x7FFFFFF8;
    v25 = a1 + 1;
    v26 = 0uLL;
    v27 = v16 & 0xFFFFFFF8;
    v28 = 0uLL;
    do
    {
      v26 = vmaxq_s32(v26, vabsq_s32(v25[-1]));
      v28 = vmaxq_s32(v28, vabsq_s32(*v25));
      v25 += 2;
      v27 -= 8;
    }
    while (v27);
    v18 = vmaxvq_s32(vmaxq_s32(v26, v28));
    if (v17 != v16)
    {
LABEL_62:
      v29 = v16 - v17;
      v30 = &a1->i32[v17];
      do
      {
        v32 = *v30++;
        v31 = v32;
        if (v32 < 0)
          v31 = -v31;
        if (v18 <= v31)
          v18 = v31;
        --v29;
      }
      while (v29);
    }
  }
  if (v5 <= v18)
    v5 = v18;
LABEL_70:
  *a3 = v5;
  return 0;
}

uint64_t sub_10029158C(double *a1, uint64_t a2, double *a3, int a4, int a5)
{
  double v5;
  uint64_t i;
  uint64_t j;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;

  v5 = *a3;
  if (a2)
  {
    if (a4 >= 1 && a5 >= 1)
    {
      for (i = 0; i != a4; ++i)
      {
        if (*(_BYTE *)(a2 + i))
        {
          for (j = 0; j != a5; ++j)
          {
            v8 = fabs(a1[j]);
            if (v5 < v8)
              v5 = v8;
          }
        }
        a1 += a5;
      }
    }
  }
  else
  {
    v9 = (a5 * a4);
    v10 = 0.0;
    if ((int)v9 >= 1)
    {
      do
      {
        v11 = *a1++;
        v12 = fabs(v11);
        if (v10 < v12)
          v10 = v12;
        --v9;
      }
      while (v9);
    }
    if (v5 < v10)
      v5 = v10;
  }
  *a3 = v5;
  return 0;
}

uint64_t sub_100291634(uint64_t a1, unsigned __int8 *a2, unsigned int *a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  uint8x16_t v27;
  uint8x16_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint64_t v33;
  int32x4_t v34;
  int32x4_t v35;
  uint16x8_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  const char *v41;
  uint64_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int32x4_t v46;
  uint64_t v47;
  const char *v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int32x4_t v64;
  int32x4_t v65;
  uint8x8_t *v66;
  uint64_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  uint8x16_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  int32x4_t v79;
  int32x4_t v80;
  uint64_t v81;
  uint8x8_t *v82;
  uint8x8_t v83;
  uint16x8_t v84;
  unsigned __int8 *v85;
  int v86;
  int8x8x4_t v88;
  int8x16x4_t v89;

  v5 = *a3;
  if (!a2)
  {
    v9 = a5 * a4;
    v10 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      v11 = 0;
      v12 = 0;
      if (v9 <= 0)
        goto LABEL_62;
      goto LABEL_47;
    }
    if (v10 < 0x1C)
    {
      v13 = 0;
      v11 = 0;
      goto LABEL_45;
    }
    v37 = (v10 >> 2) + 1;
    if (v10 >= 0x3C)
    {
      v38 = v37 & 0x7FFFFFF0;
      v46 = 0uLL;
      v47 = v38;
      v48 = (const char *)a1;
      v49 = 0uLL;
      v50 = 0uLL;
      v51 = 0uLL;
      do
      {
        v89 = vld4q_s8(v48);
        v48 += 64;
        v52 = vmovl_high_u8((uint8x16_t)v89.val[0]);
        v53 = vmovl_u8(*(uint8x8_t *)v89.val[0].i8);
        v54 = vmovl_u8(*(uint8x8_t *)v89.val[1].i8);
        v55 = vmovl_high_u8((uint8x16_t)v89.val[1]);
        v56 = vmovl_high_u8((uint8x16_t)v89.val[2]);
        v57 = vmovl_u8(*(uint8x8_t *)v89.val[2].i8);
        v58 = vmovl_u8(*(uint8x8_t *)v89.val[3].i8);
        v89.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v89.val[3]);
        v51 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v51, v52), v55), v56), (uint16x8_t)v89.val[0]);
        v50 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v50, *(uint16x4_t *)v52.i8), *(uint16x4_t *)v55.i8), *(uint16x4_t *)v56.i8), *(uint16x4_t *)v89.val[0].i8);
        v49 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v49, v53), v54), v57), v58);
        v46 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v46, *(uint16x4_t *)v53.i8), *(uint16x4_t *)v54.i8), *(uint16x4_t *)v57.i8), *(uint16x4_t *)v58.i8);
        v47 -= 16;
      }
      while (v47);
      v11 = vaddvq_s32(vaddq_s32(vaddq_s32(v46, v50), vaddq_s32(v49, v51)));
      if (v37 == v38)
        goto LABEL_46;
      if ((v37 & 8) == 0)
      {
        v13 = 4 * v38;
        do
        {
LABEL_45:
          v11 += *(unsigned __int8 *)(a1 + v13)
               + *(unsigned __int8 *)(a1 + v13 + 1)
               + *(unsigned __int8 *)(a1 + v13 + 2)
               + *(unsigned __int8 *)(a1 + v13 + 3);
          v13 += 4;
        }
        while (v13 <= v10);
        goto LABEL_46;
      }
    }
    else
    {
      v11 = 0;
      v38 = 0;
    }
    v13 = 4 * (v37 & 0x7FFFFFF8);
    v39 = 0uLL;
    v40 = (int32x4_t)v11;
    v41 = (const char *)(a1 + 4 * v38);
    v42 = v38 - (v37 & 0x7FFFFFF8);
    do
    {
      v88 = vld4_s8(v41);
      v41 += 32;
      v43 = vmovl_u8((uint8x8_t)v88.val[0]);
      v44 = vmovl_u8((uint8x8_t)v88.val[1]);
      v45 = vmovl_u8((uint8x8_t)v88.val[2]);
      *(uint16x8_t *)v88.val[0].i8 = vmovl_u8((uint8x8_t)v88.val[3]);
      v39 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v39, v43), v44), v45), *(uint16x8_t *)v88.val[0].i8);
      v40 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v40, *(uint16x4_t *)v43.i8), *(uint16x4_t *)v44.i8), *(uint16x4_t *)v45.i8), (uint16x4_t)v88.val[0]);
      v42 += 8;
    }
    while (v42);
    v11 = vaddvq_s32(vaddq_s32(v40, v39));
    if (v37 != (v37 & 0x7FFFFFF8))
      goto LABEL_45;
LABEL_46:
    v12 = (v10 & 0xFFFFFFFC) + 4;
    if ((int)v12 >= v9)
    {
LABEL_62:
      v5 += v11;
      goto LABEL_63;
    }
LABEL_47:
    v59 = v12;
    v60 = v9 + ~v12;
    if (v60 < 7)
    {
      v61 = v12;
      goto LABEL_60;
    }
    v62 = v60 + 1;
    if (v60 >= 0x1F)
    {
      v63 = v62 & 0x1FFFFFFE0;
      v64 = 0uLL;
      v65 = (int32x4_t)v11;
      v66 = (uint8x8_t *)(v59 + a1 + 16);
      v67 = v62 & 0x1FFFFFFE0;
      v68 = 0uLL;
      v69 = 0uLL;
      v70 = 0uLL;
      v71 = 0uLL;
      v72 = 0uLL;
      v73 = 0uLL;
      do
      {
        v74 = *(uint8x16_t *)v66[-2].i8;
        v75 = vmovl_u8(*(uint8x8_t *)v74.i8);
        v76 = vmovl_high_u8(v74);
        v77 = vmovl_u8(*v66);
        v78 = vmovl_high_u8(*(uint8x16_t *)v66->i8);
        v69 = (int32x4_t)vaddw_high_u16((uint32x4_t)v69, v76);
        v68 = (int32x4_t)vaddw_u16((uint32x4_t)v68, *(uint16x4_t *)v76.i8);
        v64 = (int32x4_t)vaddw_high_u16((uint32x4_t)v64, v75);
        v65 = (int32x4_t)vaddw_u16((uint32x4_t)v65, *(uint16x4_t *)v75.i8);
        v73 = (int32x4_t)vaddw_high_u16((uint32x4_t)v73, v78);
        v72 = (int32x4_t)vaddw_u16((uint32x4_t)v72, *(uint16x4_t *)v78.i8);
        v71 = (int32x4_t)vaddw_high_u16((uint32x4_t)v71, v77);
        v70 = (int32x4_t)vaddw_u16((uint32x4_t)v70, *(uint16x4_t *)v77.i8);
        v66 += 4;
        v67 -= 32;
      }
      while (v67);
      v11 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v70, v65), vaddq_s32(v72, v68)), vaddq_s32(vaddq_s32(v71, v64), vaddq_s32(v73, v69))));
      if (v62 == v63)
        goto LABEL_62;
      if ((v62 & 0x18) == 0)
      {
        v61 = v63 + v59;
LABEL_60:
        v85 = (unsigned __int8 *)(a1 + v61);
        do
        {
          v86 = *v85++;
          v11 += v86;
          LODWORD(v61) = v61 + 1;
        }
        while (v9 > (int)v61);
        goto LABEL_62;
      }
    }
    else
    {
      v63 = 0;
    }
    v61 = (v62 & 0x1FFFFFFF8) + v59;
    v79 = 0uLL;
    v80 = (int32x4_t)v11;
    v81 = v63 - (v62 & 0x1FFFFFFF8);
    v82 = (uint8x8_t *)(a1 + v63 + v59);
    do
    {
      v83 = *v82++;
      v84 = vmovl_u8(v83);
      v79 = (int32x4_t)vaddw_high_u16((uint32x4_t)v79, v84);
      v80 = (int32x4_t)vaddw_u16((uint32x4_t)v80, *(uint16x4_t *)v84.i8);
      v81 += 8;
    }
    while (v81);
    v11 = vaddvq_s32(vaddq_s32(v80, v79));
    if (v62 == (v62 & 0x1FFFFFFF8))
      goto LABEL_62;
    goto LABEL_60;
  }
  if (a4 < 1 || a5 < 1)
    goto LABEL_63;
  v6 = a4;
  if (a5 >= 8)
  {
    v14 = 0;
    v15 = a5 & 0xFFFFFFE0;
    v16 = a5 & 0xFFFFFFF8;
    while (!a2[v14])
    {
LABEL_21:
      ++v14;
      a1 += a5;
      if (v14 == a4)
        goto LABEL_63;
    }
    if (a5 >= 0x20)
    {
      v18 = 0;
      v19 = 0uLL;
      v20 = (int32x4_t)v5;
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = 0uLL;
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 0uLL;
      do
      {
        v27 = *(uint8x16_t *)(a1 + v18);
        v28 = *(uint8x16_t *)(a1 + v18 + 16);
        v29 = vmovl_u8(*(uint8x8_t *)v27.i8);
        v30 = vmovl_high_u8(v27);
        v31 = vmovl_u8(*(uint8x8_t *)v28.i8);
        v32 = vmovl_high_u8(v28);
        v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v30);
        v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v30.i8);
        v19 = (int32x4_t)vaddw_high_u16((uint32x4_t)v19, v29);
        v20 = (int32x4_t)vaddw_u16((uint32x4_t)v20, *(uint16x4_t *)v29.i8);
        v26 = (int32x4_t)vaddw_high_u16((uint32x4_t)v26, v32);
        v25 = (int32x4_t)vaddw_u16((uint32x4_t)v25, *(uint16x4_t *)v32.i8);
        v24 = (int32x4_t)vaddw_high_u16((uint32x4_t)v24, v31);
        v23 = (int32x4_t)vaddw_u16((uint32x4_t)v23, *(uint16x4_t *)v31.i8);
        v18 += 32;
      }
      while (v15 != v18);
      v5 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v23, v20), vaddq_s32(v25, v21)), vaddq_s32(vaddq_s32(v24, v19), vaddq_s32(v26, v22))));
      if (v15 == a5)
        goto LABEL_21;
      v17 = a5 & 0xFFFFFFE0;
      v33 = v17;
      if ((a5 & 0x18) == 0)
      {
        do
LABEL_32:
          v5 += *(unsigned __int8 *)(a1 + v33++);
        while (a5 != v33);
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0;
    }
    v34 = 0uLL;
    v35 = (int32x4_t)v5;
    do
    {
      v36 = vmovl_u8(*(uint8x8_t *)(a1 + v17));
      v34 = (int32x4_t)vaddw_high_u16((uint32x4_t)v34, v36);
      v35 = (int32x4_t)vaddw_u16((uint32x4_t)v35, *(uint16x4_t *)v36.i8);
      v17 += 8;
    }
    while (v16 != v17);
    v5 = vaddvq_s32(vaddq_s32(v35, v34));
    v33 = a5 & 0xFFFFFFF8;
    if (v16 == a5)
      goto LABEL_21;
    goto LABEL_32;
  }
  v7 = (unsigned __int8 *)(a1 + 3);
  do
  {
    if (*a2++)
    {
      v5 += *(v7 - 3);
      if (a5 != 1)
      {
        v5 += *(v7 - 2);
        if (a5 != 2)
        {
          v5 += *(v7 - 1);
          if (a5 != 3)
          {
            v5 += *v7;
            if (a5 != 4)
            {
              v5 += v7[1];
              if (a5 != 5)
              {
                v5 += v7[2];
                if (a5 != 6)
                  v5 += v7[3];
              }
            }
          }
        }
      }
    }
    v7 += a5;
    --v6;
  }
  while (v6);
LABEL_63:
  *a3 = v5;
  return 0;
}

uint64_t sub_100291B1C(const char *a1, uint64_t a2, unsigned int *a3, int a4, int a5, double a6, int32x4_t a7)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  int32x4_t v28;
  int32x4_t v29;
  uint16x8_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x4_t v39;
  const char *v40;
  uint64_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  int32x4_t v45;
  uint64_t v46;
  const char *v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  uint8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint8x16_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint8x16_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int8x16_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int8x16_t *v68;
  uint64_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  uint8x16_t v76;
  uint8x16_t v77;
  uint16x8_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  int32x4_t v82;
  int32x4_t v83;
  uint64_t v84;
  int8x8_t *v85;
  int8x8_t v86;
  uint16x8_t v87;
  const char *v88;
  int v89;
  int v90;
  int8x8x4_t v92;
  int8x16x4_t v93;

  v7 = *a3;
  if (!a2)
  {
    v32 = a5 * a4;
    v33 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      v34 = 0;
      v35 = 0;
      if (v32 <= 0)
        goto LABEL_58;
      goto LABEL_41;
    }
    if (v33 < 0x1C)
    {
      v36 = 0;
      v34 = 0;
      goto LABEL_38;
    }
    v37 = (v33 >> 2) + 1;
    if (v33 >= 0x3C)
    {
      v38 = v37 & 0x7FFFFFF0;
      v45 = 0uLL;
      v46 = v38;
      v47 = a1;
      v48 = 0uLL;
      v49 = 0uLL;
      v50 = 0uLL;
      do
      {
        v93 = vld4q_s8(v47);
        v47 += 64;
        v51 = (uint8x16_t)vabsq_s8(v93.val[0]);
        v52 = vmovl_high_u8(v51);
        v53 = vmovl_u8(*(uint8x8_t *)v51.i8);
        v54 = (uint8x16_t)vabsq_s8(v93.val[1]);
        v55 = vmovl_u8(*(uint8x8_t *)v54.i8);
        v56 = vmovl_high_u8(v54);
        v57 = (uint8x16_t)vabsq_s8(v93.val[2]);
        v58 = vmovl_high_u8(v57);
        v59 = vmovl_u8(*(uint8x8_t *)v57.i8);
        v93.val[0] = vabsq_s8(v93.val[3]);
        v93.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v93.val[0].i8);
        v93.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v93.val[0]);
        v50 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v50, v52), v56), v58), (uint16x8_t)v93.val[0]);
        v49 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v49, *(uint16x4_t *)v52.i8), *(uint16x4_t *)v56.i8), *(uint16x4_t *)v58.i8), *(uint16x4_t *)v93.val[0].i8);
        v48 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v48, v53), v55), v59), (uint16x8_t)v93.val[1]);
        v45 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v45, *(uint16x4_t *)v53.i8), *(uint16x4_t *)v55.i8), *(uint16x4_t *)v59.i8), *(uint16x4_t *)v93.val[1].i8);
        v46 -= 16;
      }
      while (v46);
      a7 = vaddq_s32(v48, v50);
      v34 = vaddvq_s32(vaddq_s32(vaddq_s32(v45, v49), a7));
      if (v37 == v38)
        goto LABEL_40;
      if ((v37 & 8) == 0)
      {
        v36 = 4 * v38;
LABEL_38:
        v60.i64[0] = 0xFF000000FFLL;
        v60.i64[1] = 0xFF000000FFLL;
        do
        {
          a7.i8[0] = a1[v36];
          a7.i8[2] = a1[v36 + 1];
          a7.i8[4] = a1[v36 + 2];
          a7.i8[6] = a1[v36 + 3];
          a7 = (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vabs_s16(vshr_n_s16(vshl_n_s16(*(int16x4_t *)a7.i8, 8uLL), 8uLL))), v60);
          a7.i32[0] = vaddvq_s32(a7);
          v34 += a7.i32[0];
          v36 += 4;
        }
        while (v36 <= v33);
        goto LABEL_40;
      }
    }
    else
    {
      v34 = 0;
      v38 = 0;
    }
    v36 = 4 * (v37 & 0x7FFFFFF8);
    v39 = 0uLL;
    a7.i8[4] = 0;
    a7.i8[5] = 0;
    a7.i8[6] = 0;
    a7.i8[7] = 0;
    a7.i8[8] = 0;
    a7.i8[9] = 0;
    a7.i8[10] = 0;
    a7.i8[11] = 0;
    a7.i8[12] = 0;
    a7.i8[13] = 0;
    a7.i8[14] = 0;
    a7.i8[15] = 0;
    a7.i32[0] = v34;
    v40 = &a1[4 * v38];
    v41 = v38 - (v37 & 0x7FFFFFF8);
    do
    {
      v92 = vld4_s8(v40);
      v40 += 32;
      v42 = vmovl_u8((uint8x8_t)vabs_s8(v92.val[0]));
      v43 = vmovl_u8((uint8x8_t)vabs_s8(v92.val[1]));
      v44 = vmovl_u8((uint8x8_t)vabs_s8(v92.val[2]));
      *(uint16x8_t *)v92.val[0].i8 = vmovl_u8((uint8x8_t)vabs_s8(v92.val[3]));
      v39 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v39, v42), v43), v44), *(uint16x8_t *)v92.val[0].i8);
      a7 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)a7, *(uint16x4_t *)v42.i8), *(uint16x4_t *)v43.i8), *(uint16x4_t *)v44.i8), (uint16x4_t)v92.val[0]);
      v41 += 8;
    }
    while (v41);
    v34 = vaddvq_s32(vaddq_s32(a7, v39));
    if (v37 != (v37 & 0x7FFFFFF8))
      goto LABEL_38;
LABEL_40:
    v35 = (v33 & 0xFFFFFFFC) + 4;
    if ((int)v35 >= v32)
    {
LABEL_58:
      v7 += v34;
      goto LABEL_59;
    }
LABEL_41:
    v61 = v35;
    v62 = v32 + ~v35;
    if (v62 < 7)
    {
      v63 = v35;
      goto LABEL_54;
    }
    v64 = v62 + 1;
    if (v62 >= 0x1F)
    {
      v65 = v64 & 0x1FFFFFFE0;
      v66 = 0uLL;
      v67 = (int32x4_t)v34;
      v68 = (int8x16_t *)&a1[v61 + 16];
      v69 = v64 & 0x1FFFFFFE0;
      v70 = 0uLL;
      v71 = 0uLL;
      v72 = 0uLL;
      v73 = 0uLL;
      v74 = 0uLL;
      v75 = 0uLL;
      do
      {
        v76 = (uint8x16_t)vabsq_s8(v68[-1]);
        v77 = (uint8x16_t)vabsq_s8(*v68);
        v78 = vmovl_u8(*(uint8x8_t *)v76.i8);
        v79 = vmovl_high_u8(v76);
        v80 = vmovl_u8(*(uint8x8_t *)v77.i8);
        v81 = vmovl_high_u8(v77);
        v71 = (int32x4_t)vaddw_high_u16((uint32x4_t)v71, v79);
        v70 = (int32x4_t)vaddw_u16((uint32x4_t)v70, *(uint16x4_t *)v79.i8);
        v66 = (int32x4_t)vaddw_high_u16((uint32x4_t)v66, v78);
        v67 = (int32x4_t)vaddw_u16((uint32x4_t)v67, *(uint16x4_t *)v78.i8);
        v75 = (int32x4_t)vaddw_high_u16((uint32x4_t)v75, v81);
        v74 = (int32x4_t)vaddw_u16((uint32x4_t)v74, *(uint16x4_t *)v81.i8);
        v73 = (int32x4_t)vaddw_high_u16((uint32x4_t)v73, v80);
        v72 = (int32x4_t)vaddw_u16((uint32x4_t)v72, *(uint16x4_t *)v80.i8);
        v68 += 2;
        v69 -= 32;
      }
      while (v69);
      v34 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v72, v67), vaddq_s32(v74, v70)), vaddq_s32(vaddq_s32(v73, v66), vaddq_s32(v75, v71))));
      if (v64 == v65)
        goto LABEL_58;
      if ((v64 & 0x18) == 0)
      {
        v63 = v65 + v61;
        goto LABEL_54;
      }
    }
    else
    {
      v65 = 0;
    }
    v63 = (v64 & 0x1FFFFFFF8) + v61;
    v82 = 0uLL;
    v83 = (int32x4_t)v34;
    v84 = v65 - (v64 & 0x1FFFFFFF8);
    v85 = (int8x8_t *)&a1[v65 + v61];
    do
    {
      v86 = *v85++;
      v87 = vmovl_u8((uint8x8_t)vabs_s8(v86));
      v82 = (int32x4_t)vaddw_high_u16((uint32x4_t)v82, v87);
      v83 = (int32x4_t)vaddw_u16((uint32x4_t)v83, *(uint16x4_t *)v87.i8);
      v84 += 8;
    }
    while (v84);
    v34 = vaddvq_s32(vaddq_s32(v83, v82));
    if (v64 == (v64 & 0x1FFFFFFF8))
      goto LABEL_58;
LABEL_54:
    v88 = &a1[v63];
    do
    {
      v90 = *v88++;
      v89 = v90;
      if (v90 < 0)
        v89 = -v89;
      v34 += v89;
      LODWORD(v63) = v63 + 1;
    }
    while (v32 > (int)v63);
    goto LABEL_58;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    v8 = 0;
    v9 = a5 & 0xFFFFFFE0;
    v10 = a5 & 0xFFFFFFF8;
    do
    {
      if (*(_BYTE *)(a2 + v8))
      {
        if (a5 < 8)
        {
          for (i = 0; i != a5; ++i)
          {
LABEL_18:
            v31 = a1[i];
            if (v31 < 0)
              v31 = -v31;
            v7 += v31;
          }
          goto LABEL_5;
        }
        if (a5 >= 0x20)
        {
          v13 = 0;
          v14 = 0uLL;
          v15 = (int32x4_t)v7;
          v16 = 0uLL;
          v17 = 0uLL;
          v18 = 0uLL;
          v19 = 0uLL;
          v20 = 0uLL;
          v21 = 0uLL;
          do
          {
            v22 = (uint8x16_t)vabsq_s8(*(int8x16_t *)&a1[v13]);
            v23 = (uint8x16_t)vabsq_s8(*(int8x16_t *)&a1[v13 + 16]);
            v24 = vmovl_u8(*(uint8x8_t *)v22.i8);
            v25 = vmovl_high_u8(v22);
            v26 = vmovl_u8(*(uint8x8_t *)v23.i8);
            v27 = vmovl_high_u8(v23);
            v17 = (int32x4_t)vaddw_high_u16((uint32x4_t)v17, v25);
            v16 = (int32x4_t)vaddw_u16((uint32x4_t)v16, *(uint16x4_t *)v25.i8);
            v14 = (int32x4_t)vaddw_high_u16((uint32x4_t)v14, v24);
            v15 = (int32x4_t)vaddw_u16((uint32x4_t)v15, *(uint16x4_t *)v24.i8);
            v21 = (int32x4_t)vaddw_high_u16((uint32x4_t)v21, v27);
            v20 = (int32x4_t)vaddw_u16((uint32x4_t)v20, *(uint16x4_t *)v27.i8);
            v19 = (int32x4_t)vaddw_high_u16((uint32x4_t)v19, v26);
            v18 = (int32x4_t)vaddw_u16((uint32x4_t)v18, *(uint16x4_t *)v26.i8);
            v13 += 32;
          }
          while (v9 != v13);
          v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v18, v15), vaddq_s32(v20, v16)), vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17))));
          if (v9 == a5)
            goto LABEL_5;
          v12 = a5 & 0xFFFFFFE0;
          i = v12;
          if ((a5 & 0x18) == 0)
            goto LABEL_18;
        }
        else
        {
          v12 = 0;
        }
        v28 = 0uLL;
        v29 = (int32x4_t)v7;
        do
        {
          v30 = vmovl_u8((uint8x8_t)vabs_s8(*(int8x8_t *)&a1[v12]));
          v28 = (int32x4_t)vaddw_high_u16((uint32x4_t)v28, v30);
          v29 = (int32x4_t)vaddw_u16((uint32x4_t)v29, *(uint16x4_t *)v30.i8);
          v12 += 8;
        }
        while (v10 != v12);
        v7 = vaddvq_s32(vaddq_s32(v29, v28));
        i = a5 & 0xFFFFFFF8;
        if (v10 != a5)
          goto LABEL_18;
      }
LABEL_5:
      ++v8;
      a1 += a5;
    }
    while (v8 != a4);
  }
LABEL_59:
  *a3 = v7;
  return 0;
}

uint64_t sub_100291FEC(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t j;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t i;
  uint64_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint64_t v21;
  uint64_t v22;
  const __int16 *v23;
  int32x4_t v24;
  uint64_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  const __int16 *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int32x4_t v36;
  int32x4_t v37;
  uint16x8_t *v38;
  uint64_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint16x8_t v42;
  unsigned __int16 *v43;
  int v44;
  int16x8x4_t v46;
  int16x8x4_t v47;

  v5 = *a3;
  if (!a2)
  {
    v8 = a5 * a4;
    v9 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      v10 = 0;
      v11 = 0;
      if (v8 <= 0)
        goto LABEL_38;
LABEL_31:
      v31 = v11;
      v32 = (v8 + ~v11);
      if (v32 >= 0xF)
      {
        v34 = v32 + 1;
        v35 = (v32 + 1) & 0x1FFFFFFF0;
        v33 = v35 + v31;
        v36 = (int32x4_t)v10;
        v37 = 0uLL;
        v38 = (uint16x8_t *)(a1 + 2 * v31 + 16);
        v39 = v35;
        v40 = 0uLL;
        v41 = 0uLL;
        do
        {
          v42 = v38[-1];
          v37 = (int32x4_t)vaddw_high_u16((uint32x4_t)v37, v42);
          v36 = (int32x4_t)vaddw_u16((uint32x4_t)v36, *(uint16x4_t *)v42.i8);
          v41 = (int32x4_t)vaddw_high_u16((uint32x4_t)v41, *v38);
          v40 = (int32x4_t)vaddw_u16((uint32x4_t)v40, *(uint16x4_t *)v38->i8);
          v38 += 2;
          v39 -= 16;
        }
        while (v39);
        v10 = vaddvq_s32(vaddq_s32(vaddq_s32(v40, v36), vaddq_s32(v41, v37)));
        if (v34 == v35)
          goto LABEL_38;
      }
      else
      {
        v33 = v31;
      }
      v43 = (unsigned __int16 *)(a1 + 2 * v33);
      do
      {
        v44 = *v43++;
        v10 += v44;
        LODWORD(v33) = v33 + 1;
      }
      while (v8 > (int)v33);
LABEL_38:
      v5 += v10;
      goto LABEL_39;
    }
    if (v9 >= 0x3C)
    {
      v22 = (v9 >> 2) + 1;
      v12 = 4 * (v22 & 0x7FFFFFF0);
      v23 = (const __int16 *)(a1 + 64);
      v24 = 0uLL;
      v25 = v22 & 0x7FFFFFF0;
      v26 = 0uLL;
      v27 = 0uLL;
      v28 = 0uLL;
      do
      {
        v29 = v23 - 32;
        v46 = vld4q_s16(v29);
        v47 = vld4q_s16(v23);
        v26 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v26, (uint16x8_t)v46.val[0]), (uint16x8_t)v46.val[1]), (uint16x8_t)v46.val[2]), (uint16x8_t)v46.val[3]);
        v24 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v24, *(uint16x4_t *)v46.val[0].i8), *(uint16x4_t *)v46.val[1].i8), *(uint16x4_t *)v46.val[2].i8), *(uint16x4_t *)v46.val[3].i8);
        v28 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v28, (uint16x8_t)v47.val[0]), (uint16x8_t)v47.val[1]), (uint16x8_t)v47.val[2]), (uint16x8_t)v47.val[3]);
        v27 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v27, *(uint16x4_t *)v47.val[0].i8), *(uint16x4_t *)v47.val[1].i8), *(uint16x4_t *)v47.val[2].i8), *(uint16x4_t *)v47.val[3].i8);
        v23 += 64;
        v25 -= 16;
      }
      while (v25);
      v10 = vaddvq_s32(vaddq_s32(vaddq_s32(v27, v24), vaddq_s32(v28, v26)));
      if (v22 == (v22 & 0x7FFFFFF0))
      {
LABEL_30:
        v11 = (v9 & 0xFFFFFFFC) + 4;
        if (v11 >= v8)
          goto LABEL_38;
        goto LABEL_31;
      }
    }
    else
    {
      v12 = 0;
      v10 = 0;
    }
    v30 = (unsigned __int16 *)(a1 + 2 * v12 + 4);
    do
    {
      v10 += *(v30 - 2) + *(v30 - 1) + *v30 + v30[1];
      v12 += 4;
      v30 += 4;
    }
    while (v12 <= v9);
    goto LABEL_30;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    if (a5 >= 0x10)
    {
      for (i = 0; i != a4; ++i)
      {
        if (*(_BYTE *)(a2 + i))
        {
          v14 = 0;
          v15 = 0uLL;
          v16 = (int32x4_t)v5;
          v17 = 0uLL;
          v18 = 0uLL;
          do
          {
            v19 = *(uint16x8_t *)(a1 + v14);
            v20 = *(uint16x8_t *)(a1 + v14 + 16);
            v15 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v19);
            v16 = (int32x4_t)vaddw_u16((uint32x4_t)v16, *(uint16x4_t *)v19.i8);
            v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v20);
            v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v20.i8);
            v14 += 32;
          }
          while (((2 * a5) & 0x1FFFFFFE0) != v14);
          v5 = vaddvq_s32(vaddq_s32(vaddq_s32(v17, v16), vaddq_s32(v18, v15)));
          if ((a5 & 0xFFFFFFF0) != (unint64_t)a5)
          {
            v21 = a5 & 0x7FFFFFF0;
            do
              v5 += *(unsigned __int16 *)(a1 + 2 * v21++);
            while (a5 != v21);
          }
        }
        a1 += 2 * a5;
      }
    }
    else
    {
      for (j = 0; j != a4; ++j)
      {
        if (*(_BYTE *)(a2 + j))
        {
          v7 = 0;
          do
          {
            v5 += *(unsigned __int16 *)(a1 + v7);
            v7 += 2;
          }
          while (2 * a5 != v7);
        }
        a1 += 2 * a5;
      }
    }
  }
LABEL_39:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002922C4(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t j;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  uint64_t i;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const __int16 *v25;
  int32x4_t v26;
  uint64_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  const __int16 *v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int16x8_t *v46;
  uint64_t v47;
  int32x4_t v48;
  int32x4_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  __int16 *v52;
  int v53;
  int v54;
  int16x8x4_t v56;
  int16x8x4_t v57;

  v5 = *a3;
  if (!a2)
  {
    v9 = a5 * a4;
    v10 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      v11 = 0;
      v12 = 0;
      if (v9 <= 0)
        goto LABEL_44;
      goto LABEL_35;
    }
    if (v10 >= 0x3C)
    {
      v24 = (v10 >> 2) + 1;
      v13 = 4 * (v24 & 0x7FFFFFF0);
      v25 = (const __int16 *)(a1 + 64);
      v26 = 0uLL;
      v27 = v24 & 0x7FFFFFF0;
      v28 = 0uLL;
      v29 = 0uLL;
      v30 = 0uLL;
      do
      {
        v31 = v25 - 32;
        v56 = vld4q_s16(v31);
        v57 = vld4q_s16(v25);
        v32 = (uint16x8_t)vabsq_s16(v56.val[0]);
        v33 = (uint16x8_t)vabsq_s16(v57.val[0]);
        v34 = (uint16x8_t)vabsq_s16(v56.val[1]);
        v35 = (uint16x8_t)vabsq_s16(v57.val[1]);
        v36 = (uint16x8_t)vabsq_s16(v56.val[2]);
        v37 = (uint16x8_t)vabsq_s16(v57.val[2]);
        v56.val[0] = vabsq_s16(v56.val[3]);
        v56.val[1] = vabsq_s16(v57.val[3]);
        v28 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v28, v32), v34), v36), (uint16x8_t)v56.val[0]);
        v26 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v26, *(uint16x4_t *)v32.i8), *(uint16x4_t *)v34.i8), *(uint16x4_t *)v36.i8), *(uint16x4_t *)v56.val[0].i8);
        v30 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v30, v33), v35), v37), (uint16x8_t)v56.val[1]);
        v29 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v29, *(uint16x4_t *)v33.i8), *(uint16x4_t *)v35.i8), *(uint16x4_t *)v37.i8), *(uint16x4_t *)v56.val[1].i8);
        v25 += 64;
        v27 -= 16;
      }
      while (v27);
      v11 = vaddvq_s32(vaddq_s32(vaddq_s32(v29, v26), vaddq_s32(v30, v28)));
      if (v24 == (v24 & 0x7FFFFFF0))
      {
LABEL_34:
        v12 = (v10 & 0xFFFFFFFC) + 4;
        if (v12 >= v9)
        {
LABEL_44:
          v5 += v11;
          goto LABEL_45;
        }
LABEL_35:
        v39 = v12;
        v40 = (v9 + ~v12);
        if (v40 >= 0xF)
        {
          v42 = v40 + 1;
          v43 = (v40 + 1) & 0x1FFFFFFF0;
          v41 = v43 + v39;
          v44 = (int32x4_t)v11;
          v45 = 0uLL;
          v46 = (int16x8_t *)(a1 + 2 * v39 + 16);
          v47 = v43;
          v48 = 0uLL;
          v49 = 0uLL;
          do
          {
            v50 = (uint16x8_t)vabsq_s16(v46[-1]);
            v51 = (uint16x8_t)vabsq_s16(*v46);
            v45 = (int32x4_t)vaddw_high_u16((uint32x4_t)v45, v50);
            v44 = (int32x4_t)vaddw_u16((uint32x4_t)v44, *(uint16x4_t *)v50.i8);
            v49 = (int32x4_t)vaddw_high_u16((uint32x4_t)v49, v51);
            v48 = (int32x4_t)vaddw_u16((uint32x4_t)v48, *(uint16x4_t *)v51.i8);
            v46 += 2;
            v47 -= 16;
          }
          while (v47);
          v11 = vaddvq_s32(vaddq_s32(vaddq_s32(v48, v44), vaddq_s32(v49, v45)));
          if (v42 == v43)
            goto LABEL_44;
        }
        else
        {
          v41 = v39;
        }
        v52 = (__int16 *)(a1 + 2 * v41);
        do
        {
          v54 = *v52++;
          v53 = v54;
          if (v54 < 0)
            v53 = -v53;
          v11 += v53;
          LODWORD(v41) = v41 + 1;
        }
        while (v9 > (int)v41);
        goto LABEL_44;
      }
    }
    else
    {
      v13 = 0;
      v11 = 0;
    }
    v38 = a1 + 2 * v13 + 4;
    do
    {
      v11 += vaddvq_s32((int32x4_t)vmovl_u16((uint16x4_t)vabs_s16(*(int16x4_t *)(v38 - 4))));
      v13 += 4;
      v38 += 8;
    }
    while (v13 <= v10);
    goto LABEL_34;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    if (a5 >= 0x10)
    {
      for (i = 0; i != a4; ++i)
      {
        if (*(_BYTE *)(a2 + i))
        {
          v15 = 0;
          v16 = 0uLL;
          v17 = (int32x4_t)v5;
          v18 = 0uLL;
          v19 = 0uLL;
          do
          {
            v20 = (uint16x8_t)vabsq_s16(*(int16x8_t *)(a1 + v15));
            v21 = (uint16x8_t)vabsq_s16(*(int16x8_t *)(a1 + v15 + 16));
            v16 = (int32x4_t)vaddw_high_u16((uint32x4_t)v16, v20);
            v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v20.i8);
            v19 = (int32x4_t)vaddw_high_u16((uint32x4_t)v19, v21);
            v18 = (int32x4_t)vaddw_u16((uint32x4_t)v18, *(uint16x4_t *)v21.i8);
            v15 += 32;
          }
          while (((2 * a5) & 0x1FFFFFFE0) != v15);
          v5 = vaddvq_s32(vaddq_s32(vaddq_s32(v18, v17), vaddq_s32(v19, v16)));
          if ((a5 & 0xFFFFFFF0) != (unint64_t)a5)
          {
            v22 = a5 & 0x7FFFFFF0;
            do
            {
              v23 = *(__int16 *)(a1 + 2 * v22);
              if (v23 < 0)
                v23 = -v23;
              v5 += v23;
              ++v22;
            }
            while (a5 != v22);
          }
        }
        a1 += 2 * a5;
      }
    }
    else
    {
      for (j = 0; j != a4; ++j)
      {
        if (*(_BYTE *)(a2 + j))
        {
          v7 = 0;
          do
          {
            v8 = *(__int16 *)(a1 + v7);
            if (v8 < 0)
              v8 = -v8;
            v5 += v8;
            v7 += 2;
          }
          while (2 * a5 != v7);
        }
        a1 += 2 * a5;
      }
    }
  }
LABEL_45:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002925F4(uint64_t a1, unsigned __int8 *a2, double *a3, int a4, int a5)
{
  double v5;
  uint64_t v6;
  int *v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  double v19;
  unint64_t v20;
  uint64_t i;
  uint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  const float *v33;
  uint64_t v34;
  const float *v35;
  int32x4_t v36;
  int32x4_t v37;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  int32x4_t v43;
  int32x4_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  int32x4_t v52;
  int32x4_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  int *v58;
  int v59;
  int v60;
  double v61;
  int v62;
  double v63;
  int v64;
  int v65;
  double v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int32x4_t *v73;
  uint64_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  int *v82;
  int v83;
  int v84;
  float32x4x4_t v86;
  float32x4x4_t v87;

  v5 = *a3;
  if (!a2)
  {
    v16 = a5 * a4;
    v17 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      v18 = 0;
      v19 = 0.0;
      if (v16 <= 0)
        goto LABEL_70;
      goto LABEL_61;
    }
    if (v17 >= 0x1C)
    {
      v32 = (v17 >> 2) + 1;
      v20 = 4 * (v32 & 0x7FFFFFF8);
      v33 = (const float *)(a1 + 64);
      v19 = 0.0;
      v34 = v32 & 0x7FFFFFF8;
      do
      {
        v35 = v33 - 16;
        v86 = vld4q_f32(v35);
        v87 = vld4q_f32(v33);
        v36 = vabsq_s32((int32x4_t)v86.val[0]);
        v37 = vabsq_s32((int32x4_t)v87.val[0]);
        v38.i64[0] = v36.i32[0];
        v38.i64[1] = v36.i32[1];
        v39 = vcvtq_f64_s64(v38);
        v38.i64[0] = v36.i32[2];
        v38.i64[1] = v36.i32[3];
        v40 = vcvtq_f64_s64(v38);
        v38.i64[0] = v37.i32[0];
        v38.i64[1] = v37.i32[1];
        v41 = vcvtq_f64_s64(v38);
        v38.i64[0] = v37.i32[2];
        v38.i64[1] = v37.i32[3];
        v42 = vcvtq_f64_s64(v38);
        v43 = vabsq_s32((int32x4_t)v86.val[1]);
        v44 = vabsq_s32((int32x4_t)v87.val[1]);
        v38.i64[0] = v43.i32[0];
        v38.i64[1] = v43.i32[1];
        v45 = vcvtq_f64_s64(v38);
        v38.i64[0] = v43.i32[2];
        v38.i64[1] = v43.i32[3];
        v46 = vcvtq_f64_s64(v38);
        v38.i64[0] = v44.i32[0];
        v38.i64[1] = v44.i32[1];
        v47 = vcvtq_f64_s64(v38);
        v38.i64[0] = v44.i32[2];
        v38.i64[1] = v44.i32[3];
        v48 = vaddq_f64(v40, v46);
        v49 = vaddq_f64(v39, v45);
        v50 = vaddq_f64(v42, vcvtq_f64_s64(v38));
        v51 = vaddq_f64(v41, v47);
        v52 = vabsq_s32((int32x4_t)v86.val[2]);
        v53 = vabsq_s32((int32x4_t)v87.val[2]);
        v38.i64[0] = v52.i32[2];
        v38.i64[1] = v52.i32[3];
        v54 = vcvtq_f64_s64(v38);
        v38.i64[0] = v52.i32[0];
        v38.i64[1] = v52.i32[1];
        v55 = vcvtq_f64_s64(v38);
        v38.i64[0] = v53.i32[2];
        v38.i64[1] = v53.i32[3];
        v56 = vcvtq_f64_s64(v38);
        v38.i64[0] = v53.i32[0];
        v38.i64[1] = v53.i32[1];
        v57 = vaddq_f64(v51, vcvtq_f64_s64(v38));
        v86.val[0] = (float32x4_t)vabsq_s32((int32x4_t)v86.val[3]);
        v86.val[1] = (float32x4_t)vabsq_s32((int32x4_t)v87.val[3]);
        v38.i64[0] = v86.val[0].i32[0];
        v38.i64[1] = v86.val[0].i32[1];
        v86.val[2] = (float32x4_t)vcvtq_f64_s64(v38);
        v38.i64[0] = v86.val[0].i32[2];
        v38.i64[1] = v86.val[0].i32[3];
        v86.val[0] = (float32x4_t)vcvtq_f64_s64(v38);
        v38.i64[0] = v86.val[1].i32[0];
        v38.i64[1] = v86.val[1].i32[1];
        v86.val[3] = (float32x4_t)vcvtq_f64_s64(v38);
        v38.i64[0] = v86.val[1].i32[2];
        v38.i64[1] = v86.val[1].i32[3];
        v86.val[0] = (float32x4_t)vaddq_f64(vaddq_f64(v48, v54), (float64x2_t)v86.val[0]);
        v86.val[2] = (float32x4_t)vaddq_f64(vaddq_f64(v49, v55), (float64x2_t)v86.val[2]);
        v86.val[1] = (float32x4_t)vaddq_f64(vaddq_f64(v50, v56), vcvtq_f64_s64(v38));
        v86.val[3] = (float32x4_t)vaddq_f64(v57, (float64x2_t)v86.val[3]);
        v19 = v19
            + *(double *)v86.val[2].i64
            + *(double *)&v86.val[2].i64[1]
            + *(double *)v86.val[0].i64
            + *(double *)&v86.val[0].i64[1]
            + *(double *)v86.val[3].i64
            + *(double *)&v86.val[3].i64[1]
            + *(double *)v86.val[1].i64
            + *(double *)&v86.val[1].i64[1];
        v33 += 32;
        v34 -= 8;
      }
      while (v34);
      if (v32 == (v32 & 0x7FFFFFF8))
        goto LABEL_60;
    }
    else
    {
      v20 = 0;
      v19 = 0.0;
    }
    v58 = (int *)(a1 + 4 * v20 + 8);
    do
    {
      v59 = *(v58 - 2);
      v60 = *(v58 - 1);
      if (v59 < 0)
        v59 = -v59;
      v61 = (double)v59;
      if (v60 >= 0)
        v62 = *(v58 - 1);
      else
        v62 = -v60;
      v63 = (double)v62;
      v64 = *v58;
      v65 = v58[1];
      v58 += 4;
      if (v64 < 0)
        v64 = -v64;
      v66 = (double)v64;
      if (v65 >= 0)
        v67 = v65;
      else
        v67 = -v65;
      v19 = v19 + v61 + v63 + v66 + (double)v67;
      v20 += 4;
    }
    while (v20 <= v17);
LABEL_60:
    v18 = (v17 & 0xFFFFFFFC) + 4;
    if (v18 >= v16)
    {
LABEL_70:
      v5 = v5 + v19;
      goto LABEL_71;
    }
LABEL_61:
    v68 = v18;
    v69 = (v16 + ~v18);
    if (v69 >= 7)
    {
      v71 = v69 + 1;
      v72 = (v69 + 1) & 0x1FFFFFFF8;
      v70 = v72 + v68;
      v73 = (int32x4_t *)(a1 + 4 * v68 + 16);
      v74 = v72;
      do
      {
        v75 = vabsq_s32(v73[-1]);
        v76 = vabsq_s32(*v73);
        v77.i64[0] = v75.i32[2];
        v77.i64[1] = v75.i32[3];
        v78 = vcvtq_f64_s64(v77);
        v77.i64[0] = v75.i32[0];
        v77.i64[1] = v75.i32[1];
        v79 = vcvtq_f64_s64(v77);
        v77.i64[0] = v76.i32[2];
        v77.i64[1] = v76.i32[3];
        v80 = vcvtq_f64_s64(v77);
        v77.i64[0] = v76.i32[0];
        v77.i64[1] = v76.i32[1];
        v81 = vcvtq_f64_s64(v77);
        v19 = v19
            + v79.f64[0]
            + v79.f64[1]
            + v78.f64[0]
            + v78.f64[1]
            + v81.f64[0]
            + v81.f64[1]
            + v80.f64[0]
            + v80.f64[1];
        v73 += 2;
        v74 -= 8;
      }
      while (v74);
      if (v71 == v72)
        goto LABEL_70;
    }
    else
    {
      v70 = v68;
    }
    v82 = (int *)(a1 + 4 * v70);
    do
    {
      v84 = *v82++;
      v83 = v84;
      if (v84 < 0)
        v83 = -v83;
      v19 = v19 + (double)v83;
      LODWORD(v70) = v70 + 1;
    }
    while (v16 > (int)v70);
    goto LABEL_70;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    v6 = a4;
    if (a5 >= 8)
    {
      for (i = 0; i != a4; ++i)
      {
        if (a2[i])
        {
          v22 = 0;
          do
          {
            v23 = vabsq_s32(*(int32x4_t *)(a1 + v22));
            v24 = vabsq_s32(*(int32x4_t *)(a1 + v22 + 16));
            v25.i64[0] = v23.i32[2];
            v25.i64[1] = v23.i32[3];
            v26 = vcvtq_f64_s64(v25);
            v25.i64[0] = v23.i32[0];
            v25.i64[1] = v23.i32[1];
            v27 = vcvtq_f64_s64(v25);
            v25.i64[0] = v24.i32[2];
            v25.i64[1] = v24.i32[3];
            v28 = vcvtq_f64_s64(v25);
            v25.i64[0] = v24.i32[0];
            v25.i64[1] = v24.i32[1];
            v29 = vcvtq_f64_s64(v25);
            v5 = v5
               + v27.f64[0]
               + v27.f64[1]
               + v26.f64[0]
               + v26.f64[1]
               + v29.f64[0]
               + v29.f64[1]
               + v28.f64[0]
               + v28.f64[1];
            v22 += 32;
          }
          while (((4 * a5) & 0x3FFFFFFE0) != v22);
          if ((a5 & 0xFFFFFFF8) != (unint64_t)a5)
          {
            v30 = a5 & 0xFFFFFFF8;
            do
            {
              v31 = *(_DWORD *)(a1 + 4 * v30);
              if (v31 < 0)
                v31 = -v31;
              v5 = v5 + (double)v31;
              ++v30;
            }
            while (a5 != v30);
          }
        }
        a1 += 4 * a5;
      }
    }
    else
    {
      v7 = (int *)(a1 + 12);
      do
      {
        if (*a2++)
        {
          v9 = *(v7 - 3);
          if (v9 < 0)
            v9 = -v9;
          v5 = v5 + (double)v9;
          if (a5 != 1)
          {
            v10 = *(v7 - 2);
            if (v10 < 0)
              v10 = -v10;
            v5 = v5 + (double)v10;
            if (a5 != 2)
            {
              v11 = *(v7 - 1);
              if (v11 < 0)
                v11 = -v11;
              v5 = v5 + (double)v11;
              if (a5 != 3)
              {
                v12 = *v7;
                if (*v7 < 0)
                  v12 = -v12;
                v5 = v5 + (double)v12;
                if (a5 != 4)
                {
                  v13 = v7[1];
                  if (v13 < 0)
                    v13 = -v13;
                  v5 = v5 + (double)v13;
                  if (a5 != 5)
                  {
                    v14 = v7[2];
                    if (v14 < 0)
                      v14 = -v14;
                    v5 = v5 + (double)v14;
                    if (a5 != 6)
                    {
                      v15 = v7[3];
                      if (v15 < 0)
                        v15 = -v15;
                      v5 = v5 + (double)v15;
                    }
                  }
                }
              }
            }
          }
        }
        v7 += a5;
        --v6;
      }
      while (v6);
    }
  }
LABEL_71:
  *a3 = v5;
  return 0;
}

uint64_t sub_100292A84(uint64_t a1, unsigned __int8 *a2, double *a3, int a4, int a5)
{
  double v5;
  uint64_t v6;
  double *v7;
  int v9;
  unint64_t v10;
  int v11;
  double v12;
  unint64_t v13;
  uint64_t i;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  const double *v20;
  uint64_t v21;
  const double *v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float64x2_t *v32;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double *v36;
  double v37;
  float64x2x4_t v39;
  float64x2x4_t v40;

  v5 = *a3;
  if (!a2)
  {
    v9 = a5 * a4;
    v10 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      v11 = 0;
      v12 = 0.0;
      if (v9 <= 0)
        goto LABEL_38;
LABEL_31:
      v27 = v11;
      v28 = (v9 + ~v11);
      if (v28 >= 3)
      {
        v30 = v28 + 1;
        v31 = (v28 + 1) & 0x1FFFFFFFCLL;
        v29 = v31 + v27;
        v32 = (float64x2_t *)(a1 + 8 * v27 + 16);
        v33 = v31;
        do
        {
          v34 = vabsq_f64(v32[-1]);
          v35 = vabsq_f64(*v32);
          v12 = v12 + v34.f64[0] + v34.f64[1] + v35.f64[0] + v35.f64[1];
          v32 += 2;
          v33 -= 4;
        }
        while (v33);
        if (v30 == v31)
          goto LABEL_38;
      }
      else
      {
        v29 = v27;
      }
      v36 = (double *)(a1 + 8 * v29);
      do
      {
        v37 = *v36++;
        v12 = v12 + fabs(v37);
        LODWORD(v29) = v29 + 1;
      }
      while (v9 > (int)v29);
LABEL_38:
      v5 = v5 + v12;
      goto LABEL_39;
    }
    if (v10 >= 0xC)
    {
      v19 = (v10 >> 2) + 1;
      v13 = 4 * (v19 & 0x7FFFFFFC);
      v20 = (const double *)(a1 + 64);
      v12 = 0.0;
      v21 = v19 & 0x7FFFFFFC;
      do
      {
        v22 = v20 - 8;
        v39 = vld4q_f64(v22);
        v40 = vld4q_f64(v20);
        v39.val[0] = vaddq_f64(vaddq_f64(vaddq_f64(vabsq_f64(v39.val[0]), vabsq_f64(v39.val[1])), vabsq_f64(v39.val[2])), vabsq_f64(v39.val[3]));
        v39.val[1] = vaddq_f64(vaddq_f64(vaddq_f64(vabsq_f64(v40.val[0]), vabsq_f64(v40.val[1])), vabsq_f64(v40.val[2])), vabsq_f64(v40.val[3]));
        v12 = v12 + v39.val[0].f64[0] + v39.val[0].f64[1] + v39.val[1].f64[0] + v39.val[1].f64[1];
        v20 += 16;
        v21 -= 4;
      }
      while (v21);
      if (v19 == (v19 & 0x7FFFFFFC))
      {
LABEL_30:
        v11 = (v10 & 0xFFFFFFFC) + 4;
        if (v11 >= v9)
          goto LABEL_38;
        goto LABEL_31;
      }
    }
    else
    {
      v13 = 0;
      v12 = 0.0;
    }
    v23 = (double *)(a1 + 8 * v13 + 16);
    do
    {
      v24 = fabs(*(v23 - 2)) + fabs(*(v23 - 1));
      v25 = *v23;
      v26 = v23[1];
      v23 += 4;
      v12 = v12 + v24 + fabs(v25) + fabs(v26);
      v13 += 4;
    }
    while (v13 <= v10);
    goto LABEL_30;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    v6 = a4;
    if (a5 >= 4)
    {
      for (i = 0; i != a4; ++i)
      {
        if (a2[i])
        {
          v15 = 0;
          do
          {
            v16 = vabsq_f64(*(float64x2_t *)(a1 + v15));
            v17 = vabsq_f64(*(float64x2_t *)(a1 + v15 + 16));
            v5 = v5 + v16.f64[0] + v16.f64[1] + v17.f64[0] + v17.f64[1];
            v15 += 32;
          }
          while (((8 * a5) & 0x7FFFFFFE0) != v15);
          if ((a5 & 0xFFFFFFFC) != (unint64_t)a5)
          {
            v18 = a5 & 0xFFFFFFFC;
            do
              v5 = v5 + fabs(*(double *)(a1 + 8 * v18++));
            while (a5 != v18);
          }
        }
        a1 += 8 * a5;
      }
    }
    else
    {
      v7 = (double *)(a1 + 16);
      do
      {
        if (*a2++)
        {
          v5 = v5 + fabs(*(v7 - 2));
          if (a5 != 1)
          {
            v5 = v5 + fabs(*(v7 - 1));
            if (a5 != 2)
              v5 = v5 + fabs(*v7);
          }
        }
        v7 += a5;
        --v6;
      }
      while (v6);
    }
  }
LABEL_39:
  *a3 = v5;
  return 0;
}

uint64_t sub_100292D3C(uint64_t a1, unsigned __int8 *a2, unsigned int *a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  uint8x16_t v27;
  uint8x16_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint64_t v33;
  int32x4_t v34;
  int32x4_t v35;
  uint16x8_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  const char *v41;
  uint64_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int32x4_t v46;
  uint64_t v47;
  const char *v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int32x4_t v64;
  int32x4_t v65;
  uint8x8_t *v66;
  uint64_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  uint8x16_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  int32x4_t v79;
  int32x4_t v80;
  uint64_t v81;
  uint8x8_t *v82;
  uint8x8_t v83;
  uint16x8_t v84;
  unsigned __int8 *v85;
  int v86;
  int8x8x4_t v88;
  int8x16x4_t v89;

  v5 = *a3;
  if (!a2)
  {
    v9 = a5 * a4;
    v10 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      v11 = 0;
      v12 = 0;
      if (v9 <= 0)
        goto LABEL_62;
      goto LABEL_47;
    }
    if (v10 < 0x1C)
    {
      v13 = 0;
      v12 = 0;
      goto LABEL_45;
    }
    v37 = (v10 >> 2) + 1;
    if (v10 >= 0x3C)
    {
      v38 = v37 & 0x7FFFFFF0;
      v46 = 0uLL;
      v47 = v38;
      v48 = (const char *)a1;
      v49 = 0uLL;
      v50 = 0uLL;
      v51 = 0uLL;
      do
      {
        v89 = vld4q_s8(v48);
        v48 += 64;
        v52 = vmovl_high_u8((uint8x16_t)v89.val[0]);
        v53 = vmovl_u8(*(uint8x8_t *)v89.val[0].i8);
        v54 = vmovl_u8(*(uint8x8_t *)v89.val[1].i8);
        v55 = vmovl_high_u8((uint8x16_t)v89.val[1]);
        v56 = vmovl_high_u8((uint8x16_t)v89.val[2]);
        v57 = vmovl_u8(*(uint8x8_t *)v89.val[2].i8);
        v58 = vmovl_u8(*(uint8x8_t *)v89.val[3].i8);
        v89.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v89.val[3]);
        v51 = (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16((uint32x4_t)v51, v52, v52), v55, v55), v56, v56), (uint16x8_t)v89.val[0], (uint16x8_t)v89.val[0]);
        v50 = (int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v50, *(uint16x4_t *)v52.i8, *(uint16x4_t *)v52.i8), *(uint16x4_t *)v55.i8, *(uint16x4_t *)v55.i8), *(uint16x4_t *)v56.i8, *(uint16x4_t *)v56.i8), *(uint16x4_t *)v89.val[0].i8, *(uint16x4_t *)v89.val[0].i8);
        v49 = (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16((uint32x4_t)v49, v53, v53), v54, v54), v57, v57), v58, v58);
        v46 = (int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v46, *(uint16x4_t *)v53.i8, *(uint16x4_t *)v53.i8), *(uint16x4_t *)v54.i8, *(uint16x4_t *)v54.i8), *(uint16x4_t *)v57.i8, *(uint16x4_t *)v57.i8), *(uint16x4_t *)v58.i8, *(uint16x4_t *)v58.i8);
        v47 -= 16;
      }
      while (v47);
      v12 = vaddvq_s32(vaddq_s32(vaddq_s32(v46, v50), vaddq_s32(v49, v51)));
      if (v37 == v38)
        goto LABEL_46;
      if ((v37 & 8) == 0)
      {
        v13 = 4 * v38;
        do
        {
LABEL_45:
          v12 += *(unsigned __int8 *)(a1 + v13) * *(unsigned __int8 *)(a1 + v13)
               + *(unsigned __int8 *)(a1 + v13 + 1) * *(unsigned __int8 *)(a1 + v13 + 1)
               + *(unsigned __int8 *)(a1 + v13 + 2) * *(unsigned __int8 *)(a1 + v13 + 2)
               + *(unsigned __int8 *)(a1 + v13 + 3) * *(unsigned __int8 *)(a1 + v13 + 3);
          v13 += 4;
        }
        while (v13 <= v10);
        goto LABEL_46;
      }
    }
    else
    {
      v12 = 0;
      v38 = 0;
    }
    v13 = 4 * (v37 & 0x7FFFFFF8);
    v39 = 0uLL;
    v40 = (int32x4_t)v12;
    v41 = (const char *)(a1 + 4 * v38);
    v42 = v38 - (v37 & 0x7FFFFFF8);
    do
    {
      v88 = vld4_s8(v41);
      v41 += 32;
      v43 = vmovl_u8((uint8x8_t)v88.val[0]);
      v44 = vmovl_u8((uint8x8_t)v88.val[1]);
      v45 = vmovl_u8((uint8x8_t)v88.val[2]);
      *(uint16x8_t *)v88.val[0].i8 = vmovl_u8((uint8x8_t)v88.val[3]);
      v39 = (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16((uint32x4_t)v39, v43, v43), v44, v44), v45, v45), *(uint16x8_t *)v88.val[0].i8, *(uint16x8_t *)v88.val[0].i8);
      v40 = (int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v40, *(uint16x4_t *)v43.i8, *(uint16x4_t *)v43.i8), *(uint16x4_t *)v44.i8, *(uint16x4_t *)v44.i8), *(uint16x4_t *)v45.i8, *(uint16x4_t *)v45.i8), (uint16x4_t)v88.val[0], (uint16x4_t)v88.val[0]);
      v42 += 8;
    }
    while (v42);
    v12 = vaddvq_s32(vaddq_s32(v40, v39));
    if (v37 != (v37 & 0x7FFFFFF8))
      goto LABEL_45;
LABEL_46:
    v11 = (v10 & 0xFFFFFFFC) + 4;
    if ((int)v11 >= v9)
    {
LABEL_62:
      v5 += v12;
      goto LABEL_63;
    }
LABEL_47:
    v59 = v11;
    v60 = v9 + ~v11;
    if (v60 < 7)
    {
      v61 = v11;
      goto LABEL_60;
    }
    v62 = v60 + 1;
    if (v60 >= 0x1F)
    {
      v63 = v62 & 0x1FFFFFFE0;
      v64 = 0uLL;
      v65 = (int32x4_t)v12;
      v66 = (uint8x8_t *)(v59 + a1 + 16);
      v67 = v62 & 0x1FFFFFFE0;
      v68 = 0uLL;
      v69 = 0uLL;
      v70 = 0uLL;
      v71 = 0uLL;
      v72 = 0uLL;
      v73 = 0uLL;
      do
      {
        v74 = *(uint8x16_t *)v66[-2].i8;
        v75 = vmovl_u8(*(uint8x8_t *)v74.i8);
        v76 = vmovl_high_u8(v74);
        v77 = vmovl_u8(*v66);
        v78 = vmovl_high_u8(*(uint8x16_t *)v66->i8);
        v69 = (int32x4_t)vmlal_high_u16((uint32x4_t)v69, v76, v76);
        v68 = (int32x4_t)vmlal_u16((uint32x4_t)v68, *(uint16x4_t *)v76.i8, *(uint16x4_t *)v76.i8);
        v64 = (int32x4_t)vmlal_high_u16((uint32x4_t)v64, v75, v75);
        v65 = (int32x4_t)vmlal_u16((uint32x4_t)v65, *(uint16x4_t *)v75.i8, *(uint16x4_t *)v75.i8);
        v73 = (int32x4_t)vmlal_high_u16((uint32x4_t)v73, v78, v78);
        v72 = (int32x4_t)vmlal_u16((uint32x4_t)v72, *(uint16x4_t *)v78.i8, *(uint16x4_t *)v78.i8);
        v71 = (int32x4_t)vmlal_high_u16((uint32x4_t)v71, v77, v77);
        v70 = (int32x4_t)vmlal_u16((uint32x4_t)v70, *(uint16x4_t *)v77.i8, *(uint16x4_t *)v77.i8);
        v66 += 4;
        v67 -= 32;
      }
      while (v67);
      v12 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v70, v65), vaddq_s32(v72, v68)), vaddq_s32(vaddq_s32(v71, v64), vaddq_s32(v73, v69))));
      if (v62 == v63)
        goto LABEL_62;
      if ((v62 & 0x18) == 0)
      {
        v61 = v63 + v59;
LABEL_60:
        v85 = (unsigned __int8 *)(a1 + v61);
        do
        {
          v86 = *v85++;
          v12 += v86 * v86;
          LODWORD(v61) = v61 + 1;
        }
        while (v9 > (int)v61);
        goto LABEL_62;
      }
    }
    else
    {
      v63 = 0;
    }
    v61 = (v62 & 0x1FFFFFFF8) + v59;
    v79 = 0uLL;
    v80 = (int32x4_t)v12;
    v81 = v63 - (v62 & 0x1FFFFFFF8);
    v82 = (uint8x8_t *)(a1 + v63 + v59);
    do
    {
      v83 = *v82++;
      v84 = vmovl_u8(v83);
      v79 = (int32x4_t)vmlal_high_u16((uint32x4_t)v79, v84, v84);
      v80 = (int32x4_t)vmlal_u16((uint32x4_t)v80, *(uint16x4_t *)v84.i8, *(uint16x4_t *)v84.i8);
      v81 += 8;
    }
    while (v81);
    v12 = vaddvq_s32(vaddq_s32(v80, v79));
    if (v62 == (v62 & 0x1FFFFFFF8))
      goto LABEL_62;
    goto LABEL_60;
  }
  if (a4 < 1 || a5 < 1)
    goto LABEL_63;
  v6 = a4;
  if (a5 >= 8)
  {
    v14 = 0;
    v15 = a5 & 0xFFFFFFE0;
    v16 = a5 & 0xFFFFFFF8;
    while (!a2[v14])
    {
LABEL_21:
      ++v14;
      a1 += a5;
      if (v14 == a4)
        goto LABEL_63;
    }
    if (a5 >= 0x20)
    {
      v18 = 0;
      v19 = 0uLL;
      v20 = (int32x4_t)v5;
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = 0uLL;
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 0uLL;
      do
      {
        v27 = *(uint8x16_t *)(a1 + v18);
        v28 = *(uint8x16_t *)(a1 + v18 + 16);
        v29 = vmovl_u8(*(uint8x8_t *)v27.i8);
        v30 = vmovl_high_u8(v27);
        v31 = vmovl_u8(*(uint8x8_t *)v28.i8);
        v32 = vmovl_high_u8(v28);
        v22 = (int32x4_t)vmlal_high_u16((uint32x4_t)v22, v30, v30);
        v21 = (int32x4_t)vmlal_u16((uint32x4_t)v21, *(uint16x4_t *)v30.i8, *(uint16x4_t *)v30.i8);
        v19 = (int32x4_t)vmlal_high_u16((uint32x4_t)v19, v29, v29);
        v20 = (int32x4_t)vmlal_u16((uint32x4_t)v20, *(uint16x4_t *)v29.i8, *(uint16x4_t *)v29.i8);
        v26 = (int32x4_t)vmlal_high_u16((uint32x4_t)v26, v32, v32);
        v25 = (int32x4_t)vmlal_u16((uint32x4_t)v25, *(uint16x4_t *)v32.i8, *(uint16x4_t *)v32.i8);
        v24 = (int32x4_t)vmlal_high_u16((uint32x4_t)v24, v31, v31);
        v23 = (int32x4_t)vmlal_u16((uint32x4_t)v23, *(uint16x4_t *)v31.i8, *(uint16x4_t *)v31.i8);
        v18 += 32;
      }
      while (v15 != v18);
      v5 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v23, v20), vaddq_s32(v25, v21)), vaddq_s32(vaddq_s32(v24, v19), vaddq_s32(v26, v22))));
      if (v15 == a5)
        goto LABEL_21;
      v17 = a5 & 0xFFFFFFE0;
      v33 = v17;
      if ((a5 & 0x18) == 0)
      {
        do
        {
LABEL_32:
          v5 += *(unsigned __int8 *)(a1 + v33) * *(unsigned __int8 *)(a1 + v33);
          ++v33;
        }
        while (a5 != v33);
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0;
    }
    v34 = 0uLL;
    v35 = (int32x4_t)v5;
    do
    {
      v36 = vmovl_u8(*(uint8x8_t *)(a1 + v17));
      v34 = (int32x4_t)vmlal_high_u16((uint32x4_t)v34, v36, v36);
      v35 = (int32x4_t)vmlal_u16((uint32x4_t)v35, *(uint16x4_t *)v36.i8, *(uint16x4_t *)v36.i8);
      v17 += 8;
    }
    while (v16 != v17);
    v5 = vaddvq_s32(vaddq_s32(v35, v34));
    v33 = a5 & 0xFFFFFFF8;
    if (v16 == a5)
      goto LABEL_21;
    goto LABEL_32;
  }
  v7 = (unsigned __int8 *)(a1 + 3);
  do
  {
    if (*a2++)
    {
      v5 += *(v7 - 3) * *(v7 - 3);
      if (a5 != 1)
      {
        v5 += *(v7 - 2) * *(v7 - 2);
        if (a5 != 2)
        {
          v5 += *(v7 - 1) * *(v7 - 1);
          if (a5 != 3)
          {
            v5 += *v7 * *v7;
            if (a5 != 4)
            {
              v5 += v7[1] * v7[1];
              if (a5 != 5)
              {
                v5 += v7[2] * v7[2];
                if (a5 != 6)
                  v5 += v7[3] * v7[3];
              }
            }
          }
        }
      }
    }
    v7 += a5;
    --v6;
  }
  while (v6);
LABEL_63:
  *a3 = v5;
  return 0;
}

uint64_t sub_100293224(uint64_t a1, unsigned __int8 *a2, unsigned int *a3, int a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  char *v7;
  int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int16x8_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  const char *v41;
  uint64_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int32x4_t v46;
  uint64_t v47;
  const char *v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int8x8_t *v66;
  uint64_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int32x4_t v80;
  uint64_t v81;
  int8x8_t *v82;
  int8x8_t v83;
  int16x8_t v84;
  char *v85;
  int v86;
  int8x8x4_t v88;
  int8x16x4_t v89;

  v5 = *a3;
  if (!a2)
  {
    v9 = a5 * a4;
    v10 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      v11 = 0;
      v12 = 0;
      if (v9 <= 0)
        goto LABEL_62;
      goto LABEL_47;
    }
    if (v10 < 0x1C)
    {
      v13 = 0;
      v12 = 0;
      goto LABEL_45;
    }
    v37 = (v10 >> 2) + 1;
    if (v10 >= 0x3C)
    {
      v38 = v37 & 0x7FFFFFF0;
      v46 = 0uLL;
      v47 = v38;
      v48 = (const char *)a1;
      v49 = 0uLL;
      v50 = 0uLL;
      v51 = 0uLL;
      do
      {
        v89 = vld4q_s8(v48);
        v48 += 64;
        v52 = vmovl_high_s8(v89.val[0]);
        v53 = vmovl_s8(*(int8x8_t *)v89.val[0].i8);
        v54 = vmovl_s8(*(int8x8_t *)v89.val[1].i8);
        v55 = vmovl_high_s8(v89.val[1]);
        v56 = vmovl_high_s8(v89.val[2]);
        v57 = vmovl_s8(*(int8x8_t *)v89.val[2].i8);
        v58 = vmovl_s8(*(int8x8_t *)v89.val[3].i8);
        v89.val[0] = (int8x16_t)vmovl_high_s8(v89.val[3]);
        v51 = vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(v51, v52, v52), v55, v55), v56, v56), (int16x8_t)v89.val[0], (int16x8_t)v89.val[0]);
        v50 = vmlal_s16(vmlal_s16(vmlal_s16(vmlal_s16(v50, *(int16x4_t *)v52.i8, *(int16x4_t *)v52.i8), *(int16x4_t *)v55.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v56.i8, *(int16x4_t *)v56.i8), *(int16x4_t *)v89.val[0].i8, *(int16x4_t *)v89.val[0].i8);
        v49 = vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(v49, v53, v53), v54, v54), v57, v57), v58, v58);
        v46 = vmlal_s16(vmlal_s16(vmlal_s16(vmlal_s16(v46, *(int16x4_t *)v53.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v54.i8, *(int16x4_t *)v54.i8), *(int16x4_t *)v57.i8, *(int16x4_t *)v57.i8), *(int16x4_t *)v58.i8, *(int16x4_t *)v58.i8);
        v47 -= 16;
      }
      while (v47);
      v12 = vaddvq_s32(vaddq_s32(vaddq_s32(v46, v50), vaddq_s32(v49, v51)));
      if (v37 == v38)
        goto LABEL_46;
      if ((v37 & 8) == 0)
      {
        v13 = 4 * v38;
        do
        {
LABEL_45:
          v12 += *(char *)(a1 + v13) * *(char *)(a1 + v13)
               + *(char *)(a1 + v13 + 1) * *(char *)(a1 + v13 + 1)
               + *(char *)(a1 + v13 + 2) * *(char *)(a1 + v13 + 2)
               + *(char *)(a1 + v13 + 3) * *(char *)(a1 + v13 + 3);
          v13 += 4;
        }
        while (v13 <= v10);
        goto LABEL_46;
      }
    }
    else
    {
      v12 = 0;
      v38 = 0;
    }
    v13 = 4 * (v37 & 0x7FFFFFF8);
    v39 = 0uLL;
    v40 = (int32x4_t)v12;
    v41 = (const char *)(a1 + 4 * v38);
    v42 = v38 - (v37 & 0x7FFFFFF8);
    do
    {
      v88 = vld4_s8(v41);
      v41 += 32;
      v43 = vmovl_s8(v88.val[0]);
      v44 = vmovl_s8(v88.val[1]);
      v45 = vmovl_s8(v88.val[2]);
      *(int16x8_t *)v88.val[0].i8 = vmovl_s8(v88.val[3]);
      v39 = vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(v39, v43, v43), v44, v44), v45, v45), *(int16x8_t *)v88.val[0].i8, *(int16x8_t *)v88.val[0].i8);
      v40 = vmlal_s16(vmlal_s16(vmlal_s16(vmlal_s16(v40, *(int16x4_t *)v43.i8, *(int16x4_t *)v43.i8), *(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8), *(int16x4_t *)v45.i8, *(int16x4_t *)v45.i8), (int16x4_t)v88.val[0], (int16x4_t)v88.val[0]);
      v42 += 8;
    }
    while (v42);
    v12 = vaddvq_s32(vaddq_s32(v40, v39));
    if (v37 != (v37 & 0x7FFFFFF8))
      goto LABEL_45;
LABEL_46:
    v11 = (v10 & 0xFFFFFFFC) + 4;
    if ((int)v11 >= v9)
    {
LABEL_62:
      v5 += v12;
      goto LABEL_63;
    }
LABEL_47:
    v59 = v11;
    v60 = v9 + ~v11;
    if (v60 < 7)
    {
      v61 = v11;
      goto LABEL_60;
    }
    v62 = v60 + 1;
    if (v60 >= 0x1F)
    {
      v63 = v62 & 0x1FFFFFFE0;
      v64 = 0uLL;
      v65 = (int32x4_t)v12;
      v66 = (int8x8_t *)(v59 + a1 + 16);
      v67 = v62 & 0x1FFFFFFE0;
      v68 = 0uLL;
      v69 = 0uLL;
      v70 = 0uLL;
      v71 = 0uLL;
      v72 = 0uLL;
      v73 = 0uLL;
      do
      {
        v74 = *(int8x16_t *)v66[-2].i8;
        v75 = vmovl_s8(*(int8x8_t *)v74.i8);
        v76 = vmovl_high_s8(v74);
        v77 = vmovl_s8(*v66);
        v78 = vmovl_high_s8(*(int8x16_t *)v66->i8);
        v69 = vmlal_high_s16(v69, v76, v76);
        v68 = vmlal_s16(v68, *(int16x4_t *)v76.i8, *(int16x4_t *)v76.i8);
        v64 = vmlal_high_s16(v64, v75, v75);
        v65 = vmlal_s16(v65, *(int16x4_t *)v75.i8, *(int16x4_t *)v75.i8);
        v73 = vmlal_high_s16(v73, v78, v78);
        v72 = vmlal_s16(v72, *(int16x4_t *)v78.i8, *(int16x4_t *)v78.i8);
        v71 = vmlal_high_s16(v71, v77, v77);
        v70 = vmlal_s16(v70, *(int16x4_t *)v77.i8, *(int16x4_t *)v77.i8);
        v66 += 4;
        v67 -= 32;
      }
      while (v67);
      v12 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v70, v65), vaddq_s32(v72, v68)), vaddq_s32(vaddq_s32(v71, v64), vaddq_s32(v73, v69))));
      if (v62 == v63)
        goto LABEL_62;
      if ((v62 & 0x18) == 0)
      {
        v61 = v63 + v59;
LABEL_60:
        v85 = (char *)(a1 + v61);
        do
        {
          v86 = *v85++;
          v12 += v86 * v86;
          LODWORD(v61) = v61 + 1;
        }
        while (v9 > (int)v61);
        goto LABEL_62;
      }
    }
    else
    {
      v63 = 0;
    }
    v61 = (v62 & 0x1FFFFFFF8) + v59;
    v79 = 0uLL;
    v80 = (int32x4_t)v12;
    v81 = v63 - (v62 & 0x1FFFFFFF8);
    v82 = (int8x8_t *)(a1 + v63 + v59);
    do
    {
      v83 = *v82++;
      v84 = vmovl_s8(v83);
      v79 = vmlal_high_s16(v79, v84, v84);
      v80 = vmlal_s16(v80, *(int16x4_t *)v84.i8, *(int16x4_t *)v84.i8);
      v81 += 8;
    }
    while (v81);
    v12 = vaddvq_s32(vaddq_s32(v80, v79));
    if (v62 == (v62 & 0x1FFFFFFF8))
      goto LABEL_62;
    goto LABEL_60;
  }
  if (a4 < 1 || a5 < 1)
    goto LABEL_63;
  v6 = a4;
  if (a5 >= 8)
  {
    v14 = 0;
    v15 = a5 & 0xFFFFFFE0;
    v16 = a5 & 0xFFFFFFF8;
    while (!a2[v14])
    {
LABEL_21:
      ++v14;
      a1 += a5;
      if (v14 == a4)
        goto LABEL_63;
    }
    if (a5 >= 0x20)
    {
      v18 = 0;
      v19 = 0uLL;
      v20 = (int32x4_t)v5;
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = 0uLL;
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 0uLL;
      do
      {
        v27 = *(int8x16_t *)(a1 + v18);
        v28 = *(int8x16_t *)(a1 + v18 + 16);
        v29 = vmovl_s8(*(int8x8_t *)v27.i8);
        v30 = vmovl_high_s8(v27);
        v31 = vmovl_s8(*(int8x8_t *)v28.i8);
        v32 = vmovl_high_s8(v28);
        v22 = vmlal_high_s16(v22, v30, v30);
        v21 = vmlal_s16(v21, *(int16x4_t *)v30.i8, *(int16x4_t *)v30.i8);
        v19 = vmlal_high_s16(v19, v29, v29);
        v20 = vmlal_s16(v20, *(int16x4_t *)v29.i8, *(int16x4_t *)v29.i8);
        v26 = vmlal_high_s16(v26, v32, v32);
        v25 = vmlal_s16(v25, *(int16x4_t *)v32.i8, *(int16x4_t *)v32.i8);
        v24 = vmlal_high_s16(v24, v31, v31);
        v23 = vmlal_s16(v23, *(int16x4_t *)v31.i8, *(int16x4_t *)v31.i8);
        v18 += 32;
      }
      while (v15 != v18);
      v5 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v23, v20), vaddq_s32(v25, v21)), vaddq_s32(vaddq_s32(v24, v19), vaddq_s32(v26, v22))));
      if (v15 == a5)
        goto LABEL_21;
      v17 = a5 & 0xFFFFFFE0;
      v33 = v17;
      if ((a5 & 0x18) == 0)
      {
        do
        {
LABEL_32:
          v5 += *(char *)(a1 + v33) * *(char *)(a1 + v33);
          ++v33;
        }
        while (a5 != v33);
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0;
    }
    v34 = 0uLL;
    v35 = (int32x4_t)v5;
    do
    {
      v36 = vmovl_s8(*(int8x8_t *)(a1 + v17));
      v34 = vmlal_high_s16(v34, v36, v36);
      v35 = vmlal_s16(v35, *(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8);
      v17 += 8;
    }
    while (v16 != v17);
    v5 = vaddvq_s32(vaddq_s32(v35, v34));
    v33 = a5 & 0xFFFFFFF8;
    if (v16 == a5)
      goto LABEL_21;
    goto LABEL_32;
  }
  v7 = (char *)(a1 + 3);
  do
  {
    if (*a2++)
    {
      v5 += *(v7 - 3) * *(v7 - 3);
      if (a5 != 1)
      {
        v5 += *(v7 - 2) * *(v7 - 2);
        if (a5 != 2)
        {
          v5 += *(v7 - 1) * *(v7 - 1);
          if (a5 != 3)
          {
            v5 += *v7 * *v7;
            if (a5 != 4)
            {
              v5 += v7[1] * v7[1];
              if (a5 != 5)
              {
                v5 += v7[2] * v7[2];
                if (a5 != 6)
                  v5 += v7[3] * v7[3];
              }
            }
          }
        }
      }
    }
    v7 += a5;
    --v6;
  }
  while (v6);
LABEL_63:
  *a3 = v5;
  return 0;
}

uint64_t sub_10029370C(const __int16 *a1, uint64_t a2, double *a3, int a4, int a5, double a6, double a7, double a8, double a9, float64x2_t a10, float64x2_t a11)
{
  double v11;
  uint64_t i;
  uint64_t j;
  int v14;
  unint64_t v15;
  int v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __int16 *v21;
  uint32x4_t v22;
  uint64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  uint32x4_t v26;
  float64x2_t v27;
  float64x2_t v28;
  uint32x4_t v29;
  float64x2_t v30;
  float64x2_t v31;
  uint32x4_t v32;
  float64x2_t v33;
  float64x2_t v34;
  uint32x4_t v35;
  float64x2_t v36;
  float64x2_t v37;
  uint32x4_t v38;
  float64x2_t v39;
  float64x2_t v40;
  uint32x4_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const __int16 *v52;
  uint64_t v53;
  const __int16 *v54;
  unsigned int v55;
  int16x8x4_t v57;

  v11 = *a3;
  if (!a2)
  {
    v14 = a5 * a4;
    v15 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      v16 = 0;
      v17 = 0.0;
      if (v14 <= 0)
        goto LABEL_29;
LABEL_21:
      v47 = v16;
      v48 = (v14 + ~v16);
      if ((_DWORD)v48)
      {
        v49 = v48 + 1;
        v50 = (v48 + 1) & 0x1FFFFFFFELL;
        v51 = v50 + v47;
        v52 = &a1[v47 + 1];
        v53 = v50;
        do
        {
          LOWORD(a8) = *(v52 - 1);
          LOWORD(a9) = *v52;
          a8 = (double)*(unint64_t *)&a8 * (double)*(unint64_t *)&a8;
          a9 = (double)*(unint64_t *)&a9 * (double)*(unint64_t *)&a9;
          v17 = v17 + a8 + a9;
          v52 += 2;
          v53 -= 2;
        }
        while (v53);
        if (v49 == v50)
          goto LABEL_29;
      }
      else
      {
        v51 = v47;
      }
      v54 = &a1[v51];
      do
      {
        v55 = *(unsigned __int16 *)v54++;
        v17 = v17 + (double)v55 * (double)v55;
        LODWORD(v51) = v51 + 1;
      }
      while (v14 > (int)v51);
LABEL_29:
      v11 = v11 + v17;
      goto LABEL_30;
    }
    if (v15 >= 0x1C)
    {
      v19 = (v15 >> 2) + 1;
      v18 = 4 * (v19 & 0x7FFFFFF8);
      v17 = 0.0;
      v20 = v19 & 0x7FFFFFF8;
      v21 = a1;
      do
      {
        v57 = vld4q_s16(v21);
        v21 += 32;
        v22 = vmovl_u16(*(uint16x4_t *)v57.val[0].i8);
        v23.i64[0] = v22.u32[0];
        v23.i64[1] = v22.u32[1];
        v24 = vcvtq_f64_u64(v23);
        v23.i64[0] = v22.u32[2];
        v23.i64[1] = v22.u32[3];
        v25 = vcvtq_f64_u64(v23);
        v26 = vmovl_high_u16((uint16x8_t)v57.val[0]);
        v23.i64[0] = v26.u32[0];
        v23.i64[1] = v26.u32[1];
        v27 = vcvtq_f64_u64(v23);
        v23.i64[0] = v26.u32[2];
        v23.i64[1] = v26.u32[3];
        v28 = vcvtq_f64_u64(v23);
        v29 = vmovl_high_u16((uint16x8_t)v57.val[1]);
        v23.i64[0] = v29.u32[2];
        v23.i64[1] = v29.u32[3];
        v30 = vcvtq_f64_u64(v23);
        v23.i64[0] = v29.u32[0];
        v23.i64[1] = v29.u32[1];
        v31 = vcvtq_f64_u64(v23);
        v32 = vmovl_u16(*(uint16x4_t *)v57.val[1].i8);
        v23.i64[0] = v32.u32[2];
        v23.i64[1] = v32.u32[3];
        v33 = vcvtq_f64_u64(v23);
        v23.i64[0] = v32.u32[0];
        v23.i64[1] = v32.u32[1];
        v34 = vcvtq_f64_u64(v23);
        v35 = vmovl_high_u16((uint16x8_t)v57.val[2]);
        v23.i64[0] = v35.u32[2];
        v23.i64[1] = v35.u32[3];
        v36 = vcvtq_f64_u64(v23);
        v23.i64[0] = v35.u32[0];
        v23.i64[1] = v35.u32[1];
        v37 = vcvtq_f64_u64(v23);
        v38 = vmovl_u16(*(uint16x4_t *)v57.val[2].i8);
        v23.i64[0] = v38.u32[2];
        v23.i64[1] = v38.u32[3];
        v39 = vcvtq_f64_u64(v23);
        v23.i64[0] = v38.u32[0];
        v23.i64[1] = v38.u32[1];
        v40 = vcvtq_f64_u64(v23);
        v41 = vmovl_u16(*(uint16x4_t *)v57.val[3].i8);
        v23.i64[0] = v41.u32[0];
        v23.i64[1] = v41.u32[1];
        v42 = vcvtq_f64_u64(v23);
        v23.i64[0] = v41.u32[2];
        v23.i64[1] = v41.u32[3];
        v43 = vcvtq_f64_u64(v23);
        v57.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v57.val[3]);
        v23.i64[0] = v57.val[0].u32[0];
        v23.i64[1] = v57.val[0].u32[1];
        v57.val[1] = (int16x8_t)vcvtq_f64_u64(v23);
        v23.i64[0] = v57.val[0].u32[2];
        v23.i64[1] = v57.val[0].u32[3];
        v57.val[0] = (int16x8_t)vcvtq_f64_u64(v23);
        v44 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v30, v30), v28, v28), v36, v36), (float64x2_t)v57.val[0], (float64x2_t)v57.val[0]);
        a8 = v44.f64[1];
        v45 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v31, v31), v27, v27), v37, v37), (float64x2_t)v57.val[1], (float64x2_t)v57.val[1]);
        a9 = v45.f64[1];
        a11 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v33, v33), v25, v25), v39, v39), v43, v43);
        a10 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v34, v34), v24, v24), v40, v40), v42, v42);
        v17 = v17
            + a10.f64[0]
            + a10.f64[1]
            + a11.f64[0]
            + a11.f64[1]
            + v45.f64[0]
            + v45.f64[1]
            + v44.f64[0]
            + v44.f64[1];
        v20 -= 8;
      }
      while (v20);
      if (v19 == (v19 & 0x7FFFFFF8))
      {
LABEL_20:
        v16 = (v15 & 0xFFFFFFFC) + 4;
        if (v16 >= v14)
          goto LABEL_29;
        goto LABEL_21;
      }
    }
    else
    {
      v18 = 0;
      v17 = 0.0;
    }
    v46 = (unsigned __int16 *)&a1[v18 + 2];
    do
    {
      LOWORD(a8) = *(v46 - 2);
      LOWORD(a9) = *(v46 - 1);
      LOWORD(a10.f64[0]) = *v46;
      a10.f64[0] = (double)*(unint64_t *)&a10.f64[0];
      LOWORD(a11.f64[0]) = v46[1];
      a11.f64[0] = (double)*(unint64_t *)&a11.f64[0];
      a9 = (double)*(unint64_t *)&a9 * (double)*(unint64_t *)&a9;
      a8 = a9
         + (double)*(unint64_t *)&a8 * (double)*(unint64_t *)&a8
         + a10.f64[0] * a10.f64[0]
         + a11.f64[0] * a11.f64[0];
      v17 = v17 + a8;
      v18 += 4;
      v46 += 4;
    }
    while (v18 <= v15);
    goto LABEL_20;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      if (*(_BYTE *)(a2 + i))
      {
        for (j = 0; j != a5; ++j)
        {
          LOWORD(a7) = a1[j];
          a7 = (double)*(unint64_t *)&a7;
          v11 = v11 + a7 * a7;
        }
      }
      a1 += a5;
    }
  }
LABEL_30:
  *a3 = v11;
  return 0;
}

uint64_t sub_1002939D4(const __int16 *a1, uint64_t a2, double *a3, int a4, int a5, double a6, int16x4_t a7, double a8, double a9, float64x2_t a10, float64x2_t a11)
{
  double v11;
  uint64_t i;
  uint64_t j;
  int v14;
  unint64_t v15;
  int v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __int16 *v21;
  int32x4_t v22;
  int64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int32x4_t v26;
  float64x2_t v27;
  float64x2_t v28;
  int32x4_t v29;
  float64x2_t v30;
  float64x2_t v31;
  int32x4_t v32;
  float64x2_t v33;
  float64x2_t v34;
  int32x4_t v35;
  float64x2_t v36;
  float64x2_t v37;
  int32x4_t v38;
  float64x2_t v39;
  float64x2_t v40;
  int32x4_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  unsigned __int16 *v46;
  signed __int32 v47;
  signed __int32 v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const __int16 *v55;
  uint64_t v56;
  signed __int32 v57;
  signed __int32 v58;
  const __int16 *v59;
  int v60;
  int16x8x4_t v62;

  v11 = *a3;
  if (!a2)
  {
    v14 = a5 * a4;
    v15 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      v16 = 0;
      v17 = 0.0;
      if (v14 <= 0)
        goto LABEL_29;
LABEL_21:
      v50 = v16;
      v51 = (v14 + ~v16);
      if ((_DWORD)v51)
      {
        v52 = v51 + 1;
        v53 = (v51 + 1) & 0x1FFFFFFFELL;
        v54 = v53 + v50;
        v55 = &a1[v50 + 1];
        v56 = v53;
        do
        {
          LOWORD(a8) = *(v55 - 1);
          v57 = vmovl_s16(*(int16x4_t *)&a8).u32[0];
          LOWORD(a9) = *v55;
          v58 = vmovl_s16(*(int16x4_t *)&a9).u32[0];
          a8 = (double)v57 * (double)v57;
          a9 = (double)v58 * (double)v58;
          v17 = v17 + a8 + a9;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        if (v52 == v53)
          goto LABEL_29;
      }
      else
      {
        v54 = v50;
      }
      v59 = &a1[v54];
      do
      {
        v60 = *v59++;
        v17 = v17 + (double)v60 * (double)v60;
        LODWORD(v54) = v54 + 1;
      }
      while (v14 > (int)v54);
LABEL_29:
      v11 = v11 + v17;
      goto LABEL_30;
    }
    if (v15 >= 0x1C)
    {
      v19 = (v15 >> 2) + 1;
      v18 = 4 * (v19 & 0x7FFFFFF8);
      v17 = 0.0;
      v20 = v19 & 0x7FFFFFF8;
      v21 = a1;
      do
      {
        v62 = vld4q_s16(v21);
        v21 += 32;
        v22 = vmovl_s16(*(int16x4_t *)v62.val[0].i8);
        v23.i64[0] = v22.i32[0];
        v23.i64[1] = v22.i32[1];
        v24 = vcvtq_f64_s64(v23);
        v23.i64[0] = v22.i32[2];
        v23.i64[1] = v22.i32[3];
        v25 = vcvtq_f64_s64(v23);
        v26 = vmovl_high_s16(v62.val[0]);
        v23.i64[0] = v26.i32[0];
        v23.i64[1] = v26.i32[1];
        v27 = vcvtq_f64_s64(v23);
        v23.i64[0] = v26.i32[2];
        v23.i64[1] = v26.i32[3];
        v28 = vcvtq_f64_s64(v23);
        v29 = vmovl_high_s16(v62.val[1]);
        v23.i64[0] = v29.i32[2];
        v23.i64[1] = v29.i32[3];
        v30 = vcvtq_f64_s64(v23);
        v23.i64[0] = v29.i32[0];
        v23.i64[1] = v29.i32[1];
        v31 = vcvtq_f64_s64(v23);
        v32 = vmovl_s16(*(int16x4_t *)v62.val[1].i8);
        v23.i64[0] = v32.i32[2];
        v23.i64[1] = v32.i32[3];
        v33 = vcvtq_f64_s64(v23);
        v23.i64[0] = v32.i32[0];
        v23.i64[1] = v32.i32[1];
        v34 = vcvtq_f64_s64(v23);
        v35 = vmovl_high_s16(v62.val[2]);
        v23.i64[0] = v35.i32[2];
        v23.i64[1] = v35.i32[3];
        v36 = vcvtq_f64_s64(v23);
        v23.i64[0] = v35.i32[0];
        v23.i64[1] = v35.i32[1];
        v37 = vcvtq_f64_s64(v23);
        v38 = vmovl_s16(*(int16x4_t *)v62.val[2].i8);
        v23.i64[0] = v38.i32[2];
        v23.i64[1] = v38.i32[3];
        v39 = vcvtq_f64_s64(v23);
        v23.i64[0] = v38.i32[0];
        v23.i64[1] = v38.i32[1];
        v40 = vcvtq_f64_s64(v23);
        v41 = vmovl_s16(*(int16x4_t *)v62.val[3].i8);
        v23.i64[0] = v41.i32[0];
        v23.i64[1] = v41.i32[1];
        v42 = vcvtq_f64_s64(v23);
        v23.i64[0] = v41.i32[2];
        v23.i64[1] = v41.i32[3];
        v43 = vcvtq_f64_s64(v23);
        v62.val[0] = (int16x8_t)vmovl_high_s16(v62.val[3]);
        v23.i64[0] = v62.val[0].i32[0];
        v23.i64[1] = v62.val[0].i32[1];
        v62.val[1] = (int16x8_t)vcvtq_f64_s64(v23);
        v23.i64[0] = v62.val[0].i32[2];
        v23.i64[1] = v62.val[0].i32[3];
        v62.val[0] = (int16x8_t)vcvtq_f64_s64(v23);
        v44 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v30, v30), v28, v28), v36, v36), (float64x2_t)v62.val[0], (float64x2_t)v62.val[0]);
        a8 = v44.f64[1];
        v45 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v31, v31), v27, v27), v37, v37), (float64x2_t)v62.val[1], (float64x2_t)v62.val[1]);
        a9 = v45.f64[1];
        a11 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v33, v33), v25, v25), v39, v39), v43, v43);
        a10 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v34, v34), v24, v24), v40, v40), v42, v42);
        v17 = v17
            + a10.f64[0]
            + a10.f64[1]
            + a11.f64[0]
            + a11.f64[1]
            + v45.f64[0]
            + v45.f64[1]
            + v44.f64[0]
            + v44.f64[1];
        v20 -= 8;
      }
      while (v20);
      if (v19 == (v19 & 0x7FFFFFF8))
      {
LABEL_20:
        v16 = (v15 & 0xFFFFFFFC) + 4;
        if (v16 >= v14)
          goto LABEL_29;
        goto LABEL_21;
      }
    }
    else
    {
      v18 = 0;
      v17 = 0.0;
    }
    v46 = (unsigned __int16 *)&a1[v18 + 2];
    do
    {
      LOWORD(a8) = *(v46 - 2);
      v47 = vmovl_s16(*(int16x4_t *)&a8).u32[0];
      LOWORD(a9) = *(v46 - 1);
      v48 = vmovl_s16(*(int16x4_t *)&a9).u32[0];
      LOWORD(a10.f64[0]) = *v46;
      a10.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a10.f64[0]).i32[0];
      LOWORD(a11.f64[0]) = v46[1];
      *(_QWORD *)&a11.f64[0] = vmovl_s16(*(int16x4_t *)&a11.f64[0]).i32[0];
      v49 = (double)v48 * (double)v48 + (double)v47 * (double)v47;
      a9 = (double)*(uint64_t *)&a11.f64[0];
      a8 = v49 + a10.f64[0] * a10.f64[0] + a9 * a9;
      v17 = v17 + a8;
      v18 += 4;
      v46 += 4;
    }
    while (v18 <= v15);
    goto LABEL_20;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      if (*(_BYTE *)(a2 + i))
      {
        for (j = 0; j != a5; ++j)
        {
          a7.i16[0] = a1[j];
          *(double *)&a7 = (double)vmovl_s16(a7).i32[0];
          v11 = v11 + *(double *)&a7 * *(double *)&a7;
        }
      }
      a1 += a5;
    }
  }
LABEL_30:
  *a3 = v11;
  return 0;
}

uint64_t sub_100293CD4(uint64_t a1, uint64_t a2, double *a3, int a4, int a5)
{
  double v5;
  uint64_t i;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  const float *v14;
  uint64_t v15;
  const float *v16;
  int64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int *v31;
  double v32;
  double v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  int *v43;
  int v44;
  float32x4x4_t v46;
  float32x4x4_t v47;

  v5 = *a3;
  if (!a2)
  {
    v8 = a5 * a4;
    v9 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      v10 = 0;
      v11 = 0.0;
      if (v8 <= 0)
        goto LABEL_29;
LABEL_21:
      v36 = v10;
      v37 = (v8 + ~v10);
      if ((_DWORD)v37)
      {
        v38 = v37 + 1;
        v39 = (v37 + 1) & 0x1FFFFFFFELL;
        v40 = v39 + v36;
        v41 = (int *)(a1 + 4 * v36 + 4);
        v42 = v39;
        do
        {
          v11 = v11 + (double)*(v41 - 1) * (double)*(v41 - 1) + (double)*v41 * (double)*v41;
          v41 += 2;
          v42 -= 2;
        }
        while (v42);
        if (v38 == v39)
          goto LABEL_29;
      }
      else
      {
        v40 = v36;
      }
      v43 = (int *)(a1 + 4 * v40);
      do
      {
        v44 = *v43++;
        v11 = v11 + (double)v44 * (double)v44;
        LODWORD(v40) = v40 + 1;
      }
      while (v8 > (int)v40);
LABEL_29:
      v5 = v5 + v11;
      goto LABEL_30;
    }
    if (v9 >= 0x1C)
    {
      v13 = (v9 >> 2) + 1;
      v12 = 4 * (v13 & 0x7FFFFFF8);
      v14 = (const float *)(a1 + 64);
      v11 = 0.0;
      v15 = v13 & 0x7FFFFFF8;
      do
      {
        v16 = v14 - 16;
        v46 = vld4q_f32(v16);
        v47 = vld4q_f32(v14);
        v17.i64[0] = v46.val[0].i32[0];
        v17.i64[1] = v46.val[0].i32[1];
        v18 = vcvtq_f64_s64(v17);
        v17.i64[0] = v46.val[0].i32[2];
        v17.i64[1] = v46.val[0].i32[3];
        v19 = vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[0].i32[0];
        v17.i64[1] = v47.val[0].i32[1];
        v20 = vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[0].i32[2];
        v17.i64[1] = v47.val[0].i32[3];
        v21 = vcvtq_f64_s64(v17);
        v17.i64[0] = v46.val[1].i32[2];
        v17.i64[1] = v46.val[1].i32[3];
        v22 = vcvtq_f64_s64(v17);
        v17.i64[0] = v46.val[1].i32[0];
        v17.i64[1] = v46.val[1].i32[1];
        v23 = vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[1].i32[2];
        v17.i64[1] = v47.val[1].i32[3];
        v24 = vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[1].i32[0];
        v17.i64[1] = v47.val[1].i32[1];
        v25 = vcvtq_f64_s64(v17);
        v17.i64[0] = v46.val[2].i32[2];
        v17.i64[1] = v46.val[2].i32[3];
        v26 = vcvtq_f64_s64(v17);
        v17.i64[0] = v46.val[2].i32[0];
        v17.i64[1] = v46.val[2].i32[1];
        v27 = vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[2].i32[2];
        v17.i64[1] = v47.val[2].i32[3];
        v28 = vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[2].i32[0];
        v17.i64[1] = v47.val[2].i32[1];
        v29 = vcvtq_f64_s64(v17);
        v17.i64[0] = v46.val[3].i32[0];
        v17.i64[1] = v46.val[3].i32[1];
        v30 = vcvtq_f64_s64(v17);
        v17.i64[0] = v46.val[3].i32[2];
        v17.i64[1] = v46.val[3].i32[3];
        v46.val[0] = (float32x4_t)vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[3].i32[0];
        v17.i64[1] = v47.val[3].i32[1];
        v46.val[1] = (float32x4_t)vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[3].i32[2];
        v17.i64[1] = v47.val[3].i32[3];
        v46.val[2] = (float32x4_t)vcvtq_f64_s64(v17);
        v47.val[0] = (float32x4_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22, v22), v19, v19), v26, v26), (float64x2_t)v46.val[0], (float64x2_t)v46.val[0]);
        v46.val[3] = (float32x4_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23, v23), v18, v18), v27, v27), v30, v30);
        v47.val[2] = (float32x4_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24, v24), v21, v21), v28, v28), (float64x2_t)v46.val[2], (float64x2_t)v46.val[2]);
        v47.val[1] = (float32x4_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25, v25), v20, v20), v29, v29), (float64x2_t)v46.val[1], (float64x2_t)v46.val[1]);
        v11 = v11
            + *(double *)v46.val[3].i64
            + *(double *)&v46.val[3].i64[1]
            + *(double *)v47.val[0].i64
            + *(double *)&v47.val[0].i64[1]
            + *(double *)v47.val[1].i64
            + *(double *)&v47.val[1].i64[1]
            + *(double *)v47.val[2].i64
            + *(double *)&v47.val[2].i64[1];
        v14 += 32;
        v15 -= 8;
      }
      while (v15);
      if (v13 == (v13 & 0x7FFFFFF8))
      {
LABEL_20:
        v10 = (v9 & 0xFFFFFFFC) + 4;
        if (v10 >= v8)
          goto LABEL_29;
        goto LABEL_21;
      }
    }
    else
    {
      v12 = 0;
      v11 = 0.0;
    }
    v31 = (int *)(a1 + 4 * v12 + 8);
    do
    {
      v32 = (double)*(v31 - 2);
      v33 = (double)*(v31 - 1);
      v34 = *v31;
      v35 = v31[1];
      v31 += 4;
      v11 = v11 + v33 * v33 + v32 * v32 + (double)v34 * (double)v34 + (double)v35 * (double)v35;
      v12 += 4;
    }
    while (v12 <= v9);
    goto LABEL_20;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      if (*(_BYTE *)(a2 + i))
      {
        v7 = 0;
        do
        {
          v5 = v5 + (double)*(int *)(a1 + v7) * (double)*(int *)(a1 + v7);
          v7 += 4;
        }
        while (4 * a5 != v7);
      }
      a1 += 4 * a5;
    }
  }
LABEL_30:
  *a3 = v5;
  return 0;
}

uint64_t sub_100293F94(uint64_t a1, uint64_t a2, double *a3, int a4, int a5)
{
  double v5;
  uint64_t i;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  const double *v14;
  uint64_t v15;
  const double *v16;
  float64x2_t v17;
  float64x2_t v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  double *v31;
  double v32;
  float64x2x4_t v34;
  float64x2x4_t v35;

  v5 = *a3;
  if (!a2)
  {
    v8 = a5 * a4;
    v9 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      v10 = 0;
      v11 = 0.0;
      if (v8 <= 0)
        goto LABEL_29;
LABEL_21:
      v24 = v10;
      v25 = (v8 + ~v10);
      if ((_DWORD)v25)
      {
        v26 = v25 + 1;
        v27 = (v25 + 1) & 0x1FFFFFFFELL;
        v28 = v27 + v24;
        v29 = (double *)(a1 + 8 * v24 + 8);
        v30 = v27;
        do
        {
          v11 = v11 + *(v29 - 1) * *(v29 - 1) + *v29 * *v29;
          v29 += 2;
          v30 -= 2;
        }
        while (v30);
        if (v26 == v27)
          goto LABEL_29;
      }
      else
      {
        v28 = v24;
      }
      v31 = (double *)(a1 + 8 * v28);
      do
      {
        v32 = *v31++;
        v11 = v11 + v32 * v32;
        LODWORD(v28) = v28 + 1;
      }
      while (v8 > (int)v28);
LABEL_29:
      v5 = v5 + v11;
      goto LABEL_30;
    }
    if (v9 >= 0xC)
    {
      v13 = (v9 >> 2) + 1;
      v12 = 4 * (v13 & 0x7FFFFFFC);
      v14 = (const double *)(a1 + 64);
      v11 = 0.0;
      v15 = v13 & 0x7FFFFFFC;
      do
      {
        v16 = v14 - 8;
        v34 = vld4q_f64(v16);
        v35 = vld4q_f64(v14);
        v17 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v34.val[1], v34.val[1]), v34.val[0], v34.val[0]), v34.val[2], v34.val[2]), v34.val[3], v34.val[3]);
        v18 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v35.val[1], v35.val[1]), v35.val[0], v35.val[0]), v35.val[2], v35.val[2]), v35.val[3], v35.val[3]);
        v11 = v11 + v17.f64[0] + v17.f64[1] + v18.f64[0] + v18.f64[1];
        v14 += 16;
        v15 -= 4;
      }
      while (v15);
      if (v13 == (v13 & 0x7FFFFFFC))
      {
LABEL_20:
        v10 = (v9 & 0xFFFFFFFC) + 4;
        if (v10 >= v8)
          goto LABEL_29;
        goto LABEL_21;
      }
    }
    else
    {
      v12 = 0;
      v11 = 0.0;
    }
    v19 = (double *)(a1 + 8 * v12 + 16);
    do
    {
      v20 = *(v19 - 2);
      v21 = *(v19 - 1);
      v22 = *v19;
      v23 = v19[1];
      v19 += 4;
      v11 = v11 + v21 * v21 + v20 * v20 + v22 * v22 + v23 * v23;
      v12 += 4;
    }
    while (v12 <= v9);
    goto LABEL_20;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      if (*(_BYTE *)(a2 + i))
      {
        v7 = 0;
        do
        {
          v5 = v5 + *(double *)(a1 + v7) * *(double *)(a1 + v7);
          v7 += 8;
        }
        while (8 * a5 != v7);
      }
      a1 += 8 * a5;
    }
  }
LABEL_30:
  *a3 = v5;
  return 0;
}

uint64_t sub_100294160(uint64_t a1, int a2)
{
  unint64_t v4;
  int32x4_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  _BYTE v21[8];
  int v22;

  sub_100298C2C(v21, &off_10044E978);
  v4 = (a2 - 16);
  if (a2 >= 16)
  {
    v6 = 0;
    v5 = 0uLL;
    do
    {
      v5 = (int32x4_t)vpadalq_u16((uint32x4_t)v5, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(a1 + v6))));
      v6 += 16;
    }
    while (v6 <= v4);
    LODWORD(v4) = (v4 & 0xFFFFFFF0) + 16;
  }
  else
  {
    LODWORD(v4) = 0;
    v5 = 0uLL;
  }
  v7 = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v5, v5), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL)).u32[0];
  if ((int)v4 <= a2 - 4)
  {
    v4 = v4;
    do
    {
      v7 = (_DWORD)v7
         + byte_1003BE550[*(unsigned __int8 *)(a1 + v4)]
         + byte_1003BE550[*(unsigned __int8 *)(a1 + (v4 & 0xFFFFFFFE) + 1)]
         + byte_1003BE550[*(unsigned __int8 *)(a1 + (v4 & 0xFFFFFFFD) + 2)]
         + byte_1003BE550[*(unsigned __int8 *)(a1 + (v4 & 0xFFFFFFFC) + 3)];
      v4 += 4;
    }
    while (a2 - 4 >= (int)v4);
  }
  if ((int)v4 < a2)
  {
    v8 = v4;
    v9 = (~(_DWORD)v4 + a2);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = v9 + 1;
      v12 = (v9 + 1) & 0x1FFFFFFFELL;
      v13 = v12 + v8;
      v14 = (unsigned __int8 *)(v8 + a1 + 1);
      v15 = v12;
      do
      {
        v16 = *(v14 - 1);
        v17 = *v14;
        v14 += 2;
        LODWORD(v7) = v7 + byte_1003BE550[v16];
        v10 += byte_1003BE550[v17];
        v15 -= 2;
      }
      while (v15);
      v7 = (v10 + v7);
      if (v11 == v12)
        goto LABEL_18;
    }
    else
    {
      v13 = v8;
    }
    v18 = (unsigned __int8 *)(a1 + v13);
    do
    {
      v19 = *v18++;
      v7 = v7 + byte_1003BE550[v19];
      LODWORD(v13) = v13 + 1;
    }
    while ((int)v13 < a2);
  }
LABEL_18:
  if (v22)
    sub_1002989D0(v21);
  return v7;
}

uint64_t sub_10029430C(_QWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_1001D444C((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  *v4++ = 1;
  *a1 = v4;
  a1[1] = a2;
  *((_BYTE *)v4 + a2) = 0;
  return *a1;
}

void sub_10029434C(uint64_t *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *a1;
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    v2 = (unsigned int *)(v1 - 4);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      j__free(v2);
  }
}

uint64_t sub_100294378()
{
  if (!qword_100497F08)
    operator new();
  return qword_100497F08;
}

void sub_10029444C()
{
  operator delete();
}

void sub_100294490()
{
  operator new();
}

void sub_100294534()
{
  operator delete();
}

uint64_t sub_100294558(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;

  *(_QWORD *)a1 = off_10044E9A8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a2;
  v7 = *a3;
  v8 = a3[1];
  *(_QWORD *)(a1 + 32) = *a3;
  *(_QWORD *)(a1 + 40) = v8;
  if (v7)
  {
    v9 = (unsigned int *)(v7 - 4);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = *a4;
  v12 = a4[1];
  *(_QWORD *)(a1 + 48) = *a4;
  *(_QWORD *)(a1 + 56) = v12;
  if (v11)
  {
    v13 = (unsigned int *)(v11 - 4);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = *a5;
  v16 = a5[1];
  *(_QWORD *)(a1 + 64) = *a5;
  *(_QWORD *)(a1 + 72) = v16;
  if (v15)
  {
    v17 = (unsigned int *)(v15 - 4);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_DWORD *)(a1 + 80) = a6;
  sub_100294668((uint64_t *)a1);
  return a1;
}

void sub_100294620(_Unwind_Exception *a1)
{
  std::exception *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  v6 = v5;
  sub_10029434C(v6);
  sub_10029434C(v4);
  sub_10029434C(v3);
  sub_10029434C(v2);
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_100294668(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1[7])
  {
    sub_10029487C(&v10, "%s:%d: error: (%d) %s in function %s\n");
    if (&v10 != a1 + 1)
    {
      sub_10029434C(a1 + 1);
      v2 = v10;
      if (v10)
      {
        v3 = (unsigned int *)(v10 - 4);
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 + 1, v3));
        v2 = v10;
      }
      v5 = v11;
      a1[1] = v2;
      a1[2] = v5;
    }
  }
  else
  {
    sub_10029487C(&v10, "%s:%d: error: (%d) %s\n");
    if (&v10 != a1 + 1)
    {
      sub_10029434C(a1 + 1);
      v6 = v10;
      if (v10)
      {
        v7 = (unsigned int *)(v10 - 4);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        v6 = v10;
      }
      v9 = v11;
      a1[1] = v6;
      a1[2] = v9;
    }
  }
  sub_10029434C(&v10);
}

void sub_1002947B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029434C((uint64_t *)(v1 - 32));
  _Unwind_Resume(a1);
}

void sub_1002947E4(uint64_t a1)
{
  *(_QWORD *)a1 = off_10044E9A8;
  sub_10029434C((uint64_t *)(a1 + 64));
  sub_10029434C((uint64_t *)(a1 + 48));
  sub_10029434C((uint64_t *)(a1 + 32));
  sub_10029434C((uint64_t *)(a1 + 8));
  std::exception::~exception((std::exception *)a1);
}

void sub_100294840(uint64_t a1)
{
  sub_1002947E4(a1);
  operator delete();
}

const char *sub_100294864(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(const char **)(a1 + 8);
  else
    return "";
}

uint64_t *sub_10029487C@<X0>(uint64_t *__return_ptr a1@<X8>, char *__format@<X0>, ...)
{
  int v4;
  uint64_t *result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t i;
  char *v11;
  size_t v12;
  void *v13;
  uint64_t v15[2];
  va_list v16;
  char *v17;
  unint64_t v18;
  char v19[1024];
  va_list va;

  va_start(va, __format);
  v4 = 1024;
  v17 = v19;
  v18 = 1024;
  va_copy(v16, va);
  result = (uint64_t *)vsnprintf(v19, 0x400uLL, __format, va);
  if ((result & 0x80000000) != 0)
  {
LABEL_26:
    v15[0] = 0;
    v15[1] = 0;
    qmemcpy((void *)sub_10029430C(v15, 44), "len >= 0 && \"Check format string for errors\"", 44);
    sub_100294B74(-215, v15, "format", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 809);
  }
  v6 = 0x40000000000;
  while ((int)result >= v4)
  {
    v7 = (int)result + 1;
    v8 = v18;
    if (v18 >= v7)
    {
      v18 = (int)result + 1;
    }
    else
    {
      v9 = v17;
      if (v7 >= 0x401)
        operator new[]();
      v17 = v19;
      v18 = (int)result + 1;
      if (v8 && v19 != v9)
      {
        for (i = 0; i != v8; ++i)
          v17[i] = v9[i];
      }
      do
        v17[v8++] = 0;
      while (v7 != v8);
      if (v9 != v19)
      {
        if (v9)
          operator delete[]();
      }
    }
    va_copy(v16, va);
    v4 = v18;
    v6 = v18 << 32;
    result = (uint64_t *)vsnprintf(v17, (int)v18, __format, va);
    if ((result & 0x80000000) != 0)
      goto LABEL_26;
  }
  v17[(v6 - 0x100000000) >> 32] = 0;
  v11 = v17;
  *a1 = 0;
  a1[1] = 0;
  if ((_DWORD)result && v11)
  {
    v12 = (int)result;
    v13 = (void *)sub_10029430C(a1, (int)result);
    result = (uint64_t *)memcpy(v13, v11, v12);
    v11 = v17;
  }
  if (v11 != v19 && v11 != 0)
    operator delete[]();
  return result;
}

void sub_100294AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a12 != v12)
  {
    if (a12)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100294AFC(int a1)
{
  return *((unsigned __int8 *)off_10048AC68 + a1);
}

double sub_100294B10()
{
  double result;
  unint64_t v1;
  unint64_t v2;
  mach_timebase_info info;

  result = *(double *)&qword_100497F10;
  if (*(double *)&qword_100497F10 == 0.0)
  {
    mach_timebase_info(&info);
    LODWORD(v2) = info.numer;
    LODWORD(v1) = info.denom;
    result = (double)v1 * 1000000000.0 / (double)v2;
    qword_100497F10 = *(_QWORD *)&result;
  }
  return result;
}

uint64_t sub_100294B6C(char *a1, int a2, const char *a3, va_list a4)
{
  return vsnprintf(a1, a2, a3, a4);
}

void sub_100294B74(int a1, uint64_t *a2, char *__s, char *a4, int a5)
{
  size_t v10;
  size_t v11;
  void *v12;
  size_t v13;
  size_t v14;
  void *v15;
  uint64_t v16[2];
  uint64_t v17[2];
  _BYTE v18[88];

  v17[0] = 0;
  v17[1] = 0;
  if (__s)
  {
    v10 = strlen(__s);
    if (v10)
    {
      v11 = v10;
      v12 = (void *)sub_10029430C(v17, v10);
      memcpy(v12, __s, v11);
    }
  }
  v16[0] = 0;
  v16[1] = 0;
  if (a4)
  {
    v13 = strlen(a4);
    if (v13)
    {
      v14 = v13;
      v15 = (void *)sub_10029430C(v16, v13);
      memcpy(v15, a4, v14);
    }
  }
  sub_100294558((uint64_t)v18, a1, a2, v17, v16, a5);
  sub_100294C90((uint64_t)v18);
}

void sub_100294C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100294C64(char *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return vsnprintf(a1, a2, a3, &a9);
}

void sub_100294C90(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  void *exception;
  char v13[4096];

  v2 = *(unsigned int *)(a1 + 24);
  if (off_100498048)
  {
    if (*(_QWORD *)(a1 + 48))
      v9 = *(const char **)(a1 + 48);
    else
      v9 = "";
    if (*(_QWORD *)(a1 + 32))
      v10 = *(const char **)(a1 + 32);
    else
      v10 = "";
    if (*(_QWORD *)(a1 + 64))
      v11 = *(const char **)(a1 + 64);
    else
      v11 = "";
    off_100498048(v2, v9, v10, v11, *(unsigned int *)(a1 + 80), qword_100498050);
    if (!byte_100498038)
    {
LABEL_15:
      exception = __cxa_allocate_exception(0x58uLL);
      sub_1002951F8((uint64_t)exception, a1);
    }
  }
  else
  {
    v3 = sub_100294E10(v2);
    sub_100294C64(v13, 4096, "OpenCV Error: %s (%s) in %s, file %s, line %d", v4, v5, v6, v7, v8, v3);
    fprintf(__stderrp, "%s\n", v13);
    fflush(__stderrp);
    if (!byte_100498038)
      goto LABEL_15;
  }
  MEMORY[0] = 0;
  goto LABEL_15;
}

void sub_100294DFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const char *sub_100294E10(int a1)
{
  const char *v1;
  const char *result;
  const char *v3;

  v1 = "No Error";
  switch(a1)
  {
    case -219:
      v1 = "OpenGL API call";
      goto LABEL_3;
    case -218:
      result = "No OpenGL support";
      break;
    case -217:
      result = "Gpu API call";
      break;
    case -216:
      result = "No CUDA support";
      break;
    case -215:
      result = "Assertion failed";
      break;
    case -214:
      result = "Memory block has been corrupted";
      break;
    case -213:
      result = "The function/feature is not implemented";
      break;
    case -212:
      result = "Parsing error";
      break;
    case -211:
      result = "One of arguments' values is out of range";
      break;
    case -210:
      result = "Unsupported format or combination of formats";
      break;
    case -209:
      result = "Sizes of input arguments do not match";
      break;
    case -208:
      result = "Bad type of mask argument";
      break;
    case -207:
      result = "Bad parameter of type CvPoint";
      break;
    case -206:
      result = "Bad flag (parameter or structure field)";
      break;
    case -205:
      result = "Formats of input arguments do not match";
      break;
    case -204:
      result = "Requested object was not found";
      break;
    case -203:
      result = "Inplace operation is not supported";
      break;
    case -202:
      result = "Division by zero occurred";
      break;
    case -201:
      result = "Incorrect size of input array";
      break;
    case -27:
      result = "Null pointer";
      break;
    case -24:
      result = "Input COI is not supported";
      break;
    case -17:
      result = "Input image depth is not supported by function";
      break;
    case -15:
      result = "Bad number of channels";
      break;
    case -13:
      result = "Image step is wrong";
      break;
    case -8:
      result = "Autotrace call";
      break;
    case -7:
      result = "Iterations do not converge";
      break;
    case -5:
      result = "Bad argument";
      break;
    case -4:
      result = "Insufficient memory";
      break;
    case -3:
      result = "Internal error";
      break;
    case -2:
      result = "Unspecified error";
      break;
    case -1:
      result = "Backtrace";
      break;
    case 0:
LABEL_3:
      result = v1;
      break;
    default:
      v3 = "error";
      if (a1 >= 0)
        v3 = "status";
      sprintf(byte_100497F18, "Unknown %s code %d", v3, a1);
      result = byte_100497F18;
      break;
  }
  return result;
}

uint64_t sub_1002951F8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)result = off_10044E9A8;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 16) = v3;
  if (v2)
  {
    v4 = (unsigned int *)(v2 - 4);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = v6;
  *(_QWORD *)(result + 40) = v7;
  if (v6)
  {
    v8 = (unsigned int *)(v6 - 4);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = v10;
  *(_QWORD *)(result + 56) = v11;
  if (v10)
  {
    v12 = (unsigned int *)(v10 - 4);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 64) = v14;
  *(_QWORD *)(result + 72) = v15;
  if (v14)
  {
    v16 = (unsigned int *)(v14 - 4);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 80);
  return result;
}

void sub_100295298(int a1, char *__s, char *a3, char *a4, int a5)
{
  size_t v10;
  size_t v11;
  void *v12;
  size_t v13;
  size_t v14;
  void *v15;
  size_t v16;
  size_t v17;
  void *v18;
  uint64_t v19[2];
  uint64_t v20[2];
  uint64_t v21[2];
  _BYTE v22[88];

  v21[0] = 0;
  v21[1] = 0;
  if (a3)
  {
    v10 = strlen(a3);
    if (v10)
    {
      v11 = v10;
      v12 = (void *)sub_10029430C(v21, v10);
      memcpy(v12, a3, v11);
    }
  }
  v20[0] = 0;
  v20[1] = 0;
  if (__s)
  {
    v13 = strlen(__s);
    if (v13)
    {
      v14 = v13;
      v15 = (void *)sub_10029430C(v20, v13);
      memcpy(v15, __s, v14);
    }
  }
  v19[0] = 0;
  v19[1] = 0;
  if (a4)
  {
    v16 = strlen(a4);
    if (v16)
    {
      v17 = v16;
      v18 = (void *)sub_10029430C(v19, v16);
      memcpy(v18, a4, v17);
    }
  }
  sub_100294558((uint64_t)v22, a1, v21, v20, v19, a5);
  sub_100294C90((uint64_t)v22);
}

void sub_10029537C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_10029434C((uint64_t *)va);
  sub_10029434C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

pthread_mutex_t **sub_1002953CC(pthread_mutex_t **result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)&(*result)[1];
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3 && *result)
  {
    pthread_mutex_destroy(*result);
    operator delete();
  }
  *result = 0;
  return result;
}

uint64_t sub_100295438(pthread_mutex_t **a1)
{
  return pthread_mutex_lock(*a1);
}

uint64_t sub_100295440(pthread_mutex_t **a1)
{
  return pthread_mutex_unlock(*a1);
}

pthread_key_t *sub_100295448(pthread_key_t *a1)
{
  uint64_t v3[2];

  if (pthread_key_delete(*a1))
  {
    v3[0] = 0;
    v3[1] = 0;
    qmemcpy((void *)sub_10029430C(v3, 31), "pthread_key_delete(tlsKey) == 0", 31);
    sub_100294B74(-215, v3, "~TlsAbstraction", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1305);
  }
  return a1;
}

uint64_t sub_1002954CC(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = off_10044E9E8;
  v2 = (_QWORD *)sub_100295504();
  *(_DWORD *)(a1 + 8) = sub_1002955C8(v2);
  return a1;
}

uint64_t sub_100295504()
{
  pthread_mutex_t **v0;

  if (!qword_100498020)
  {
    v0 = (pthread_mutex_t **)sub_100294378();
    pthread_mutex_lock(*v0);
    if (!qword_100498020)
      operator new();
    pthread_mutex_unlock(*v0);
  }
  return qword_100498020;
}

void sub_100295584()
{
  operator delete();
}

void sub_1002955B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002965E0((pthread_mutex_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002955C8(_QWORD *a1)
{
  pthread_mutex_t *v2;
  pthread_mutex_t **v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _DWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v26[3];

  v3 = (pthread_mutex_t **)(a1 + 1);
  v2 = (pthread_mutex_t *)a1[1];
  v26[2] = (uint64_t)v3;
  pthread_mutex_lock(v2);
  v4 = (char *)a1[3];
  v5 = a1[2];
  v6 = (char *)a1[4];
  if (v5 != (v6 - v4) >> 2)
  {
    v26[0] = 0;
    v26[1] = 0;
    qmemcpy((void *)sub_10029430C(v26, 31), "tlsSlotsSize == tlsSlots.size()", 31);
    sub_100294B74(-215, v26, "reserveSlot", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1380);
  }
  if (v5)
  {
    v7 = 0;
    while (*(_DWORD *)&v4[4 * v7])
    {
      if (v5 == ++v7)
        goto LABEL_6;
    }
    *(_DWORD *)&v4[4 * v7] = 1;
  }
  else
  {
LABEL_6:
    v8 = a1[5];
    if ((unint64_t)v6 >= v8)
    {
      v10 = v5 + 1;
      if ((unint64_t)(v5 + 1) >> 62)
        sub_100008F3C();
      v11 = v8 - (_QWORD)v4;
      if (v11 >> 1 > v10)
        v10 = v11 >> 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 62)
          sub_100008FF8();
        v13 = operator new(4 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[4 * v5];
      v15 = &v13[4 * v12];
      *v14 = 1;
      v9 = v14 + 1;
      if (v6 != v4)
      {
        v16 = v6 - v4 - 4;
        if (v16 < 0x2C)
          goto LABEL_35;
        if ((unint64_t)(v6 - v13 - 4 * v5) < 0x20)
          goto LABEL_35;
        v17 = (v16 >> 2) + 1;
        v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
        v19 = &v6[-v18];
        v14 = (_DWORD *)((char *)v14 - v18);
        v20 = &v13[4 * v5 - 16];
        v21 = v6 - 16;
        v22 = v17 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v23 = *(_OWORD *)v21;
          *(v20 - 1) = *((_OWORD *)v21 - 1);
          *v20 = v23;
          v20 -= 2;
          v21 -= 32;
          v22 -= 8;
        }
        while (v22);
        v6 = v19;
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_35:
          do
          {
            v24 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *--v14 = v24;
          }
          while (v6 != v4);
        }
      }
      a1[3] = v14;
      a1[4] = v9;
      a1[5] = v15;
      if (v4)
      {
        operator delete(v4);
        v5 = a1[2];
      }
    }
    else
    {
      *(_DWORD *)v6 = 1;
      v9 = v6 + 4;
    }
    a1[4] = v9;
    a1[2] = v5 + 1;
    v7 = v5;
  }
  pthread_mutex_unlock(*v3);
  return v7;
}

void sub_1002957DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_10029434C((uint64_t *)va);
  sub_1002965E0((pthread_mutex_t ***)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10029580C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2[2];

  *(_QWORD *)result = off_10044E9E8;
  if (*(_DWORD *)(result + 8) != -1)
  {
    v2[0] = 0;
    v2[1] = 0;
    v1 = sub_10029430C(v2, 10);
    *(_WORD *)(v1 + 8) = 12589;
    *(_QWORD *)v1 = *(_QWORD *)"key_ == -1";
    sub_100294B74(-215, v2, "~TLSDataContainer", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1503);
  }
  return result;
}

uint64_t sub_100295894(uint64_t a1, char **a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_100295504();
  return sub_1002958C0(v4, *(int *)(a1 + 8), a2);
}

uint64_t sub_1002958C0(_QWORD *a1, unint64_t a2, char **a3)
{
  pthread_mutex_t *v6;
  pthread_mutex_t **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  pthread_mutex_t **v38;

  v7 = (pthread_mutex_t **)(a1 + 1);
  v6 = (pthread_mutex_t *)a1[1];
  v38 = v7;
  pthread_mutex_lock(v6);
  v8 = (unint64_t)v7[1];
  if (v8 != ((char *)v7[3] - (char *)v7[2]) >> 2)
  {
    v36 = 0;
    v37 = 0;
    qmemcpy((void *)sub_10029430C(&v36, 31), "tlsSlotsSize == tlsSlots.size()", 31);
    sub_100294B74(-215, &v36, "gather", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1439);
  }
  if (v8 <= a2)
  {
    v36 = 0;
    v37 = 0;
    qmemcpy((void *)sub_10029430C(&v36, 22), "tlsSlotsSize > slotIdx", 22);
    sub_100294B74(-215, &v36, "gather", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1440);
  }
  v10 = a1[6];
  v9 = a1[7];
  if (v9 != v10)
  {
    v11 = 0;
    while (1)
    {
      v13 = *(uint64_t **)(v10 + 8 * v11);
      if (!v13)
        goto LABEL_7;
      v14 = *v13;
      if (a2 >= (v13[1] - *v13) >> 3)
        goto LABEL_7;
      v15 = *(_QWORD *)(v14 + 8 * a2);
      if (!v15)
        goto LABEL_7;
      v17 = a3[1];
      v16 = (unint64_t)a3[2];
      if ((unint64_t)v17 >= v16)
        break;
      *(_QWORD *)v17 = v15;
      v12 = (uint64_t)(v17 + 8);
LABEL_6:
      a3[1] = (char *)v12;
      v10 = a1[6];
      v9 = a1[7];
LABEL_7:
      if (++v11 >= (unint64_t)((v9 - v10) >> 3))
      {
        v7 = v38;
        return pthread_mutex_unlock(*v7);
      }
    }
    v18 = *a3;
    v19 = v17 - *a3;
    v20 = v19 >> 3;
    v21 = (v19 >> 3) + 1;
    if (v21 >> 61)
      sub_100008F3C();
    v22 = v16 - (_QWORD)v18;
    if (v22 >> 2 > v21)
      v21 = v22 >> 2;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 61)
        sub_100008FF8();
      v24 = operator new(8 * v23);
      v25 = &v24[8 * v20];
      *(_QWORD *)v25 = *(_QWORD *)(v14 + 8 * a2);
      v12 = (uint64_t)(v25 + 8);
      if (v17 == v18)
        goto LABEL_30;
    }
    else
    {
      v24 = 0;
      v25 = (char *)(8 * v20);
      *(_QWORD *)(8 * v20) = v15;
      v12 = 8 * v20 + 8;
      if (v17 == v18)
      {
LABEL_30:
        *a3 = v25;
        a3[1] = (char *)v12;
        a3[2] = &v24[8 * v23];
        if (v17)
          operator delete(v17);
        goto LABEL_6;
      }
    }
    v26 = v17 - 8 - v18;
    if (v26 < 0x58)
      goto LABEL_40;
    if ((unint64_t)(v17 - &v24[v19]) < 0x20)
      goto LABEL_40;
    v27 = (v26 >> 3) + 1;
    v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
    v29 = &v17[-v28];
    v25 -= v28;
    v30 = &v24[8 * v20 - 16];
    v31 = (__int128 *)(v17 - 16);
    v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v33 = *v31;
      *(v30 - 1) = *(v31 - 1);
      *v30 = v33;
      v30 -= 2;
      v31 -= 2;
      v32 -= 4;
    }
    while (v32);
    v17 = v29;
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_40:
      do
      {
        v34 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v25 - 1) = v34;
        v25 -= 8;
      }
      while (v17 != v18);
    }
    v17 = *a3;
    goto LABEL_30;
  }
  return pthread_mutex_unlock(*v7);
}

void sub_100295B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_10029434C((uint64_t *)va);
  sub_1002965E0((pthread_mutex_t ***)va1);
  _Unwind_Resume(a1);
}

void sub_100295BBC(int *a1)
{
  _QWORD *v2;
  char *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;

  v5 = (char *)operator new(0x100uLL);
  v6 = v5;
  v7 = v5 + 256;
  v2 = (_QWORD *)sub_100295504();
  sub_100295C80(v2, a1[2], &v5, 0);
  a1[2] = -1;
  v3 = v6;
  if (v6 != v5)
  {
    v4 = 0;
    v3 = v5;
    do
    {
      (*(void (**)(int *, _QWORD))(*(_QWORD *)a1 + 24))(a1, *(_QWORD *)&v3[8 * v4++]);
      v3 = v5;
    }
    while (v4 < (v6 - v5) >> 3);
  }
  if (v3)
  {
    v6 = v3;
    operator delete(v3);
  }
}

void sub_100295C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100295C80(_QWORD *a1, unint64_t a2, char **a3, char a4)
{
  _QWORD *v7;
  pthread_mutex_t *v8;
  pthread_mutex_t **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  pthread_mutex_t **v42;

  v7 = a1;
  v9 = (pthread_mutex_t **)(a1 + 1);
  v8 = (pthread_mutex_t *)a1[1];
  v42 = v9;
  pthread_mutex_lock(v8);
  v10 = (unint64_t)v9[1];
  if (v10 != ((char *)v9[3] - (char *)v9[2]) >> 2)
  {
    v40 = 0;
    v41 = 0;
    qmemcpy((void *)sub_10029430C(&v40, 31), "tlsSlotsSize == tlsSlots.size()", 31);
    sub_100294B74(-215, &v40, "releaseSlot", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1401);
  }
  v38 = a4;
  if (v10 <= a2)
  {
    v40 = 0;
    v41 = 0;
    qmemcpy((void *)sub_10029430C(&v40, 22), "tlsSlotsSize > slotIdx", 22);
    sub_100294B74(-215, &v40, "releaseSlot", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1402);
  }
  v12 = v7[6];
  v11 = v7[7];
  if (v11 != v12)
  {
    v13 = 0;
    v39 = v7;
    while (1)
    {
      v15 = *(uint64_t **)(v12 + 8 * v13);
      if (!v15)
        goto LABEL_7;
      v16 = *v15;
      if (a2 >= (v15[1] - *v15) >> 3)
        goto LABEL_7;
      v17 = *(_QWORD *)(v16 + 8 * a2);
      if (!v17)
        goto LABEL_7;
      v19 = a3[1];
      v18 = (unint64_t)a3[2];
      if ((unint64_t)v19 >= v18)
        break;
      *(_QWORD *)v19 = v17;
      v14 = (uint64_t)(v19 + 8);
LABEL_6:
      a3[1] = (char *)v14;
      *(_QWORD *)(*v15 + 8 * a2) = 0;
      v12 = v7[6];
      v11 = v7[7];
LABEL_7:
      if (++v13 >= (unint64_t)((v11 - v12) >> 3))
        goto LABEL_32;
    }
    v20 = *a3;
    v21 = v19 - *a3;
    v22 = v21 >> 3;
    v23 = (v21 >> 3) + 1;
    if (v23 >> 61)
      sub_100008F3C();
    v24 = v18 - (_QWORD)v20;
    if (v24 >> 2 > v23)
      v23 = v24 >> 2;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 61)
        sub_100008FF8();
      v26 = operator new(8 * v25);
      v27 = &v26[8 * v22];
      *(_QWORD *)v27 = *(_QWORD *)(v16 + 8 * a2);
      v14 = (uint64_t)(v27 + 8);
      if (v19 == v20)
        goto LABEL_30;
    }
    else
    {
      v26 = 0;
      v27 = (char *)(8 * v22);
      *(_QWORD *)(8 * v22) = v17;
      v14 = 8 * v22 + 8;
      if (v19 == v20)
      {
LABEL_30:
        *a3 = v27;
        a3[1] = (char *)v14;
        a3[2] = &v26[8 * v25];
        v7 = v39;
        if (v19)
          operator delete(v19);
        goto LABEL_6;
      }
    }
    v28 = v19 - 8 - v20;
    if (v28 < 0x58)
      goto LABEL_41;
    if ((unint64_t)(v19 - &v26[v21]) < 0x20)
      goto LABEL_41;
    v29 = (v28 >> 3) + 1;
    v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
    v31 = &v19[-v30];
    v27 -= v30;
    v32 = &v26[8 * v22 - 16];
    v33 = (__int128 *)(v19 - 16);
    v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v35 = *v33;
      *(v32 - 1) = *(v33 - 1);
      *v32 = v35;
      v32 -= 2;
      v33 -= 2;
      v34 -= 4;
    }
    while (v34);
    v19 = v31;
    if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        v36 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v27 - 1) = v36;
        v27 -= 8;
      }
      while (v19 != v20);
    }
    v19 = *a3;
    goto LABEL_30;
  }
LABEL_32:
  if ((v38 & 1) == 0)
    *(_DWORD *)(v7[3] + 4 * a2) = 0;
  return pthread_mutex_unlock(*v42);
}

void sub_100295F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_10029434C((uint64_t *)va);
  sub_1002965E0((pthread_mutex_t ***)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100295FA4(_DWORD *a1)
{
  pthread_key_t *v2;
  _QWORD *result;
  uint64_t v4;
  pthread_key_t *v5;
  uint64_t v6[2];

  if (a1[2] == -1)
  {
    v6[0] = 0;
    v6[1] = 0;
    qmemcpy((void *)sub_10029430C(v6, 63), "key_ != -1 && \"Can't fetch data from terminated TLS container.\"", 63);
    sub_100294B74(-215, v6, "getData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1532);
  }
  v2 = (pthread_key_t *)sub_100295504();
  result = sub_100296090(v2, (int)a1[2]);
  if (!result)
  {
    v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
    v5 = (pthread_key_t *)sub_100295504();
    sub_100296158(v5, (int)a1[2], v4);
    return (_QWORD *)v4;
  }
  return result;
}

void sub_100296078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_100296090(pthread_key_t *a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4[2];

  if (a1[2] <= a2)
  {
    v4[0] = 0;
    v4[1] = 0;
    qmemcpy((void *)sub_10029430C(v4, 22), "tlsSlotsSize > slotIdx", 22);
    sub_100294B74(-215, v4, "getData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1425);
  }
  result = pthread_getspecific(*a1);
  if (result)
  {
    if (a2 >= (uint64_t)(result[1] - *result) >> 3)
      return 0;
    else
      return *(_QWORD **)(*result + 8 * a2);
  }
  return result;
}

void sub_100296140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

unint64_t *sub_100296158(pthread_key_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t *result;
  unint64_t *v7;
  unint64_t v8;
  pthread_mutex_t **v9;
  pthread_mutex_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13[2];

  if (a1[2] <= a2)
  {
    v13[0] = 0;
    v13[1] = 0;
    qmemcpy((void *)sub_10029430C(v13, 22), "tlsSlotsSize > slotIdx", 22);
    sub_100294B74(-215, v13, "setData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1457);
  }
  result = (unint64_t *)pthread_getspecific(*a1);
  v7 = result;
  if (!result)
    operator new();
  v8 = *result;
  if (a2 >= (uint64_t)(result[1] - *result) >> 3)
  {
    v10 = (pthread_mutex_t *)a1[1];
    v9 = (pthread_mutex_t **)(a1 + 1);
    v13[0] = (uint64_t)v9;
    pthread_mutex_lock(v10);
    v12 = 0;
    v11 = (uint64_t)(v7[1] - *v7) >> 3;
    if (a2 + 1 <= v11)
    {
      if (a2 + 1 < v11)
        v7[1] = *v7 + 8 * (a2 + 1);
    }
    else
    {
      sub_100297428(v7, a2 + 1 - v11, (const double *)&v12);
    }
    result = (unint64_t *)pthread_mutex_unlock(*v9);
    v8 = *v7;
  }
  *(_QWORD *)(v8 + 8 * a2) = a3;
  return result;
}

void sub_10029647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1002965E0((pthread_mutex_t ***)va);
  _Unwind_Resume(a1);
}

void sub_100296494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002964FC()
{
  pthread_mutex_t **v0;

  if (!qword_100498018)
  {
    v0 = (pthread_mutex_t **)sub_100294378();
    pthread_mutex_lock(*v0);
    if (!qword_100498018)
      operator new();
    pthread_mutex_unlock(*v0);
  }
  return qword_100498018;
}

void sub_10029659C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002965E0((pthread_mutex_t ***)va);
  _Unwind_Resume(a1);
}

void sub_1002965B0()
{
  operator delete();
}

pthread_mutex_t ***sub_1002965E0(pthread_mutex_t ***a1)
{
  pthread_mutex_unlock(**a1);
  return a1;
}

uint64_t sub_100296610()
{
  pthread_mutex_t **v0;

  if (!qword_100498028)
  {
    v0 = (pthread_mutex_t **)sub_100294378();
    pthread_mutex_lock(*v0);
    if (!qword_100498028)
      operator new();
    pthread_mutex_unlock(*v0);
  }
  return *(unsigned int *)sub_100295FA4((_DWORD *)qword_100498028);
}

void sub_1002966AC(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  pthread_mutex_unlock(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002966E8(const char *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  char *v9;
  const char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v18[2];
  uint64_t v19[2];

  v4 = getenv(a1);
  if (v4)
  {
    v5 = v4;
    v19[0] = 0;
    v19[1] = 0;
    v6 = strlen(v4);
    if (v6)
    {
      v7 = v6;
      v8 = (void *)sub_10029430C(v19, v6);
      memcpy(v8, v5, v7);
      v9 = (char *)v19[0];
      if ((char *)v19[0] == "1")
      {
        a2 = 1;
        goto LABEL_25;
      }
    }
    else
    {
      v9 = 0;
    }
    if (v9)
      v10 = v9;
    else
      v10 = "";
    v11 = strcmp(v10, "1");
    a2 = 1;
    if (v9 == "True")
      goto LABEL_25;
    if (!v11)
      goto LABEL_25;
    v12 = strcmp(v10, "True");
    if (v9 == "true")
      goto LABEL_25;
    if (!v12)
      goto LABEL_25;
    v13 = strcmp(v10, "true");
    if (v9 == "TRUE" || !v13 || !strcmp(v10, "TRUE"))
      goto LABEL_25;
    if (v9 != "0")
    {
      v14 = strcmp(v10, "0");
      a2 = 0;
      if (v9 == "False")
        goto LABEL_25;
      if (!v14)
        goto LABEL_25;
      v15 = strcmp(v10, "False");
      a2 = 0;
      if (v9 == "false")
        goto LABEL_25;
      if (!v15)
        goto LABEL_25;
      v16 = strcmp(v10, "false");
      a2 = 0;
      if (v9 == "FALSE" || !v16)
        goto LABEL_25;
      if (strcmp(v10, "FALSE"))
      {
        sub_10029487C(v18, "Invalid value for %s parameter: %s", a1, v10);
        sub_10029690C(-5, v18, "getConfigurationParameterBool", 1619);
      }
    }
    a2 = 0;
LABEL_25:
    sub_10029434C(v19);
  }
  return a2;
}

void sub_1002968DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_10029434C((uint64_t *)va);
  sub_10029434C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_10029690C(int a1, uint64_t *a2, char *a3, int a4)
{
  sub_100294B74(a1, a2, a3, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", a4);
}

uint64_t sub_100296924(const char *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  size_t v6;
  void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  size_t v13;
  size_t v14;
  unsigned int *v15;
  unsigned int v16;
  size_t v17;
  void *v18;
  const char *v19;
  int v20;
  char *v21;
  const char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  const char *v28;
  uint64_t v29[2];
  char *v30;
  size_t v31;
  const char *v32;
  size_t v33;
  void *__src;
  size_t v35;

  v4 = getenv(a1);
  if (v4)
  {
    v5 = v4;
    __src = 0;
    v35 = 0;
    v6 = strlen(v4);
    if (v6)
    {
      v7 = (void *)sub_10029430C(&__src, v6);
      memcpy(v7, v5, v6);
      v8 = v35;
      if (v35)
      {
        v6 = 0;
        while ((*((char *)__src + v6) & 0x80000000) == 0
             && (_DefaultRuneLocale.__runetype[*((unsigned __int8 *)__src + v6)] & 0x400) != 0)
        {
          if (v35 == ++v6)
          {
            v6 = v35;
            break;
          }
        }
        v32 = 0;
        v33 = 0;
        if (v35 >= v6)
          v9 = v6;
        else
          v9 = v35;
        if (v9)
        {
          if (v35 > v6)
          {
            v10 = (void *)sub_10029430C(&v32, v9);
            memcpy(v10, __src, v9);
            v8 = v35;
          }
          else
          {
            v11 = (unsigned int *)((char *)__src - 4);
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 + 1, v11));
            v8 = v35;
            v32 = (const char *)__src;
            v33 = v35;
          }
        }
      }
      else
      {
        v6 = 0;
        v32 = 0;
        v33 = 0;
      }
    }
    else
    {
      v8 = 0;
      v32 = 0;
      v33 = 0;
    }
    v13 = v8 - v6;
    v30 = 0;
    v31 = 0;
    if (v8 < v6)
      v6 = v8;
    if (v8 - v6 >= v13)
      v14 = v13;
    else
      v14 = v8 - v6;
    if (v14)
    {
      if (v14 == v8)
      {
        v15 = (unsigned int *)((char *)__src - 4);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
        v17 = v35;
        v30 = (char *)__src;
        v31 = v35;
      }
      else
      {
        v18 = (void *)sub_10029430C(&v30, v14);
        memcpy(v18, (char *)__src + v6, v14);
        v17 = v31;
      }
    }
    else
    {
      v17 = 0;
    }
    if (v32)
      v19 = v32;
    else
      v19 = "";
    v20 = atoi(v19);
    if (v17)
    {
      v21 = v30;
      if (v30 == "MB"
        || (v30 ? (v22 = v30) : (v22 = ""),
            (v23 = strcmp(v22, "MB"), v21 == "Mb")
         || !v23
         || (v24 = strcmp(v22, "Mb"), v21 == "mb")
         || !v24
         || !strcmp(v22, "mb")))
      {
        v20 <<= 20;
      }
      else
      {
        if (v21 != "KB")
        {
          v25 = strcmp(v22, "KB");
          if (v21 != "Kb")
          {
            if (v25)
            {
              v26 = strcmp(v22, "Kb");
              if (v21 != "kb" && v26 && strcmp(v22, "kb"))
              {
                v28 = (const char *)__src;
                if (!__src)
                  v28 = "";
                sub_10029487C(v29, "Invalid value for %s parameter: %s", a1, v28);
                sub_10029690C(-5, v29, "getConfigurationParameterSizeT", 1650);
              }
            }
          }
        }
        v20 <<= 10;
      }
    }
    sub_10029434C((uint64_t *)&v30);
    sub_10029434C((uint64_t *)&v32);
    sub_10029434C((uint64_t *)&__src);
    return v20;
  }
  return a2;
}

void sub_100296C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  sub_10029434C((uint64_t *)va);
  sub_10029434C((uint64_t *)va1);
  sub_10029434C((uint64_t *)va2);
  sub_10029434C((uint64_t *)va3);
  _Unwind_Resume(a1);
}

const char *sub_100296C84@<X0>(const char *a1@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  const char *result;
  const char *v6;
  const char *v7;
  void *v8;
  const char *v9;
  size_t v10;
  const char *v11;

  result = getenv(a1);
  if (result)
  {
    v6 = result;
    *a3 = 0;
    a3[1] = 0;
    result = (const char *)strlen(result);
    if (!result)
      return result;
    v7 = result;
    v8 = (void *)sub_10029430C(a3, (uint64_t)result);
    v9 = v6;
    v10 = (size_t)v7;
    return (const char *)memcpy(v8, v9, v10);
  }
  *a3 = 0;
  a3[1] = 0;
  if (a2)
  {
    result = (const char *)strlen(a2);
    if (result)
    {
      v11 = result;
      v8 = (void *)sub_10029430C(a3, (uint64_t)result);
      v9 = a2;
      v10 = (size_t)v11;
      return (const char *)memcpy(v8, v9, v10);
    }
  }
  return result;
}

void sub_100296D28(_BYTE *a1)
{
  FILE *v2;
  unsigned __int8 v3;
  const char *v4;
  uint64_t v5;
  int v6;

  if (getenv("OPENCV_DUMP_CONFIG"))
  {
    v2 = __stderrp;
    v3 = atomic_load((unsigned __int8 *)&qword_100498040);
    if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_100498040))
    {
      sub_1001F37D4(&qword_100498058, aGeneralConfigu);
      __cxa_atexit((void (*)(void *))sub_10022FBC0, &qword_100498058, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_100498040);
    }
    v4 = (const char *)qword_100498058;
    if (!qword_100498058)
      v4 = "";
    fprintf(v2, "\nOpenCV build configuration is:\n%s\n", v4);
  }
  bzero(&unk_100498268, 0x7F8uLL);
  qword_100498270 = (uint64_t)"MMX";
  unk_100498278 = "SSE";
  qword_100498280 = (uint64_t)"SSE2";
  unk_100498288 = "SSE3";
  qword_100498290 = (uint64_t)"SSSE3";
  unk_100498298 = "SSE4.1";
  qword_1004982A0 = (uint64_t)"SSE4.2";
  unk_1004982A8 = "POPCNT";
  qword_1004982B0 = (uint64_t)"FP16";
  unk_1004982B8 = "AVX";
  qword_1004982C0 = (uint64_t)"AVX2";
  unk_1004982C8 = "FMA3";
  qword_1004982D0 = (uint64_t)"AVX512F";
  unk_1004982D8 = "AVX512BW";
  qword_1004982E0 = (uint64_t)"AVX512CD";
  unk_1004982E8 = "AVX512DQ";
  qword_1004982F0 = (uint64_t)"AVX512ER";
  unk_1004982F8 = "AVX512IFMA";
  qword_100498300 = (uint64_t)"AVX512PF";
  unk_100498308 = "AVX512VBMI";
  qword_100498310 = (uint64_t)"AVX512VL";
  qword_100498588 = (uint64_t)"NEON";
  qword_1004988A8 = (uint64_t)"VSX";
  a1[100] = 1;
  a1[9] = 1;
  a1[200] = 0;
  v6 = 100;
  v5 = 0x6400000000;
  sub_100296F70((uint64_t)a1, &v5, 3u);
}

void sub_100296F54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100498040);
  _Unwind_Resume(a1);
}

void sub_100296F70(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  char *v6;
  char *v7;
  int v8;
  size_t v9;
  unsigned __int8 i;
  _DWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  int *v20;
  int v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28[2];
  const char *v29;
  uint64_t v30;

  v6 = getenv("OPENCV_CPU_DISABLE");
  if (v6)
  {
    v7 = v6;
    if (*v6)
    {
      v25 = a3;
      while (1)
      {
        v8 = *v7;
        while (2)
        {
          if ((v8 - 44) < 2)
            goto LABEL_4;
          if (!*v7)
            return;
          if (v8 == 59)
          {
LABEL_4:
            ++v7;
          }
          else
          {
            v9 = 0;
            for (i = *v7; i > 0x3Bu || ((1 << i) & 0x800300000000001) == 0; i = v7[++v9])
              ;
            if (!v9)
              continue;
            v26 = a1;
            v27 = a3;
            v11 = a2;
            v29 = 0;
            v30 = 0;
            v12 = (void *)sub_10029430C(&v29, v9);
            memcpy(v12, v7, v9);
            v13 = v30;
            if (!v30)
            {
              v28[0] = 0;
              v28[1] = 0;
              v24 = sub_10029430C(v28, 18);
              *(_WORD *)(v24 + 16) = 12320;
              *(_OWORD *)v24 = *(_OWORD *)"feature.size() > 0";
              sub_100294B74(-215, v28, "readSettings", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 606);
            }
            v14 = 0;
            v7 += v9;
            v15 = (uint64_t)v29;
            if (v29)
              v16 = v29;
            else
              v16 = "";
            while (2)
            {
              v17 = &byte_100498038[8 * v14];
              v18 = (const char *)*((_QWORD *)v17 + 70);
              if (v18 && strlen(*((const char **)v17 + 70)) == v13 && ((const char *)v15 == v18 || !strcmp(v16, v18)))
              {
                v19 = v25;
                a1 = v26;
                a2 = v11;
                v20 = v11;
                a3 = v27;
                if (v27 < 1)
                {
LABEL_26:
                  if (!*(_BYTE *)(v26 + v14))
                    goto LABEL_27;
                }
                else
                {
                  while (1)
                  {
                    v21 = *v20++;
                    if (v21 == (_DWORD)v14)
                      break;
                    if (!--v19)
                      goto LABEL_26;
                  }
                  v23 = *(const char **)&byte_100498038[8 * v14 + 560];
                  if (!v23)
                    v23 = "Unknown feature";
                  fprintf(__stderrp, "OPENCV: Trying to disable baseline CPU feature: '%s'. This has very limited effect, because code optimizations for this feature are executed unconditionally in the most cases.\n", v23);
                  if (!*(_BYTE *)(v26 + v14))
                  {
LABEL_27:
                    v22 = *(const char **)&byte_100498038[8 * v14 + 560];
                    if (!v22)
                      v22 = "Unknown feature";
                    fprintf(__stderrp, "OPENCV: Trying to disable unavailable CPU feature on the current platform: '%s'.\n", v22);
                  }
                }
                *(_BYTE *)(v26 + v14) = 0;
                goto LABEL_32;
              }
              if (++v14 != 255)
                continue;
              break;
            }
            fprintf(__stderrp, "OPENCV: Trying to disable unknown CPU feature: '%s'.\n", v16);
            a2 = v11;
            a3 = v27;
            a1 = v26;
LABEL_32:
            sub_10029434C((uint64_t *)&v29);
          }
          break;
        }
      }
    }
  }
}

void sub_10029721C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_10029434C((uint64_t *)va);
  sub_10029434C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_10029724C(pthread_key_t *a1)
{
  pthread_mutexattr_t v1;

  if (!pthread_key_create(a1, 0))
    operator new();
  v1.__sig = 0;
  *(_QWORD *)v1.__opaque = 0;
  qmemcpy((void *)sub_10029430C(&v1, 40), "pthread_key_create(&tlsKey, __null) == 0", 40);
  sub_100294B74(-215, &v1.__sig, "TlsAbstraction", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1301);
}

void sub_100297384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002973B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v3 = v2;
  *(_QWORD *)(v1 + 32) = v3;
  operator delete(v3);
  sub_1002953CC((pthread_mutex_t **)(v1 + 8));
  sub_100295448((pthread_key_t *)v1);
  _Unwind_Resume(a1);
}

void sub_1002973E4(_Unwind_Exception *a1)
{
  pthread_key_t *v1;

  sub_100295448(v1);
  _Unwind_Resume(a1);
}

void sub_1002973F8()
{
  operator delete();
}

void sub_100297428(unint64_t *a1, unint64_t a2, const double *a3)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v7 = a1[1];
  v6 = a1[2];
  v8 = (_QWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3)
        goto LABEL_44;
      v17 = v16 + 1;
      v8 = (_QWORD *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = vld1q_dup_f64(a3);
      v19 = (float64x2_t *)(v7 + 16);
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
          *v8++ = *(_QWORD *)a3;
        while (v8 != (_QWORD *)(v7 + 8 * a2));
      }
      v8 = (_QWORD *)(v7 + 8 * a2);
    }
    a1[1] = (unint64_t)v8;
  }
  else
  {
    v9 = v7 - *a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + a2;
    if (v11 >> 61)
      sub_100008F3C();
    v12 = v6 - *a1;
    v13 = v12 >> 2;
    if (v12 >> 2 <= v11)
      v13 = (v9 >> 3) + a2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      if (v14 >> 61)
        sub_100008FF8();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[8 * v10];
    v22 = (char *)(v21 + 8 * a2);
    v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_45;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[8 * v10];
      if (&v15[8 * a2 + v9] > (char *)a3)
        goto LABEL_45;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    v26 = vld1q_dup_f64(a3);
    v27 = (float64x2_t *)&v15[8 * v10 + 16];
    v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_45:
      do
      {
        *(double *)v24 = *a3;
        v24 += 8;
      }
      while (v24 != v22);
    }
    v29 = (_QWORD *)*a1;
    if (v7 != *a1)
    {
      v30 = v7 - *a1 - 8;
      if (v30 < 0x58)
        goto LABEL_46;
      if (v7 - (unint64_t)&v15[v9] < 0x20)
        goto LABEL_46;
      v31 = (v30 >> 3) + 1;
      v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (_QWORD *)(v7 - v32);
      v21 -= v32;
      v33 = &v15[8 * v10 - 16];
      v34 = (__int128 *)(v7 - 16);
      v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v36 = *v34;
        *((_OWORD *)v33 - 1) = *(v34 - 1);
        *(_OWORD *)v33 = v36;
        v33 -= 32;
        v34 -= 2;
        v35 -= 4;
      }
      while (v35);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        do
        {
          v37 = *--v8;
          *(_QWORD *)(v21 - 8) = v37;
          v21 -= 8;
        }
        while (v8 != v29);
      }
      v8 = (_QWORD *)*a1;
    }
    *a1 = v21;
    a1[1] = (unint64_t)v22;
    a1[2] = (unint64_t)&v15[8 * v14];
    if (v8)
      operator delete(v8);
  }
}

int *sub_100297684(int *a1)
{
  uint64_t v3;
  uint64_t v4[2];

  *(_QWORD *)a1 = off_10044EA28;
  sub_100295BBC(a1);
  *(_QWORD *)a1 = off_10044E9E8;
  if (a1[2] != -1)
  {
    v4[0] = 0;
    v4[1] = 0;
    v3 = sub_10029430C(v4, 10);
    *(_WORD *)(v3 + 8) = 12589;
    *(_QWORD *)v3 = *(_QWORD *)"key_ == -1";
    sub_100294B74(-215, v4, "~TLSDataContainer", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1503);
  }
  return a1;
}

void sub_100297728(int *a1)
{
  uint64_t v2;
  uint64_t v3[2];

  *(_QWORD *)a1 = off_10044EA28;
  sub_100295BBC(a1);
  *(_QWORD *)a1 = off_10044E9E8;
  if (a1[2] == -1)
    operator delete();
  v3[0] = 0;
  v3[1] = 0;
  v2 = sub_10029430C(v3, 10);
  *(_WORD *)(v2 + 8) = 12589;
  *(_QWORD *)v2 = *(_QWORD *)"key_ == -1";
  sub_100294B74(-215, v3, "~TLSDataContainer", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1503);
}

void sub_1002977DC()
{
  operator new();
}

void sub_100297820(uint64_t a1, uint64_t a2)
{
  if (a2)
    operator delete();
}

int *sub_100297840(int *a1)
{
  uint64_t v3;
  uint64_t v4[2];

  *(_QWORD *)a1 = off_10044EA80;
  sub_100295BBC(a1);
  *(_QWORD *)a1 = off_10044E9E8;
  if (a1[2] != -1)
  {
    v4[0] = 0;
    v4[1] = 0;
    v3 = sub_10029430C(v4, 10);
    *(_WORD *)(v3 + 8) = 12589;
    *(_QWORD *)v3 = *(_QWORD *)"key_ == -1";
    sub_100294B74(-215, v4, "~TLSDataContainer", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1503);
  }
  return a1;
}

void sub_1002978E4(int *a1)
{
  uint64_t v2;
  uint64_t v3[2];

  *(_QWORD *)a1 = off_10044EA80;
  sub_100295BBC(a1);
  *(_QWORD *)a1 = off_10044E9E8;
  if (a1[2] == -1)
    operator delete();
  v3[0] = 0;
  v3[1] = 0;
  v2 = sub_10029430C(v3, 10);
  *(_WORD *)(v2 + 8) = 12589;
  *(_QWORD *)v2 = *(_QWORD *)"key_ == -1";
  sub_100294B74(-215, v3, "~TLSDataContainer", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1503);
}

void sub_100297998()
{
  operator new();
}

void sub_1002979F0()
{
  operator delete();
}

void sub_100297A14(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10026F338((unsigned int **)(a2 + 16));
    operator delete();
  }
}

double sub_100297A54()
{
  double result;

  qword_1004AFF90 = sub_100294378();
  xmmword_100498068 = 0u;
  unk_100498078 = 0u;
  xmmword_100498088 = 0u;
  unk_100498098 = 0u;
  xmmword_1004980A8 = 0u;
  unk_1004980B8 = 0u;
  xmmword_1004980C8 = 0u;
  unk_1004980D8 = 0u;
  xmmword_1004980E8 = 0u;
  unk_1004980F8 = 0u;
  xmmword_100498108 = 0u;
  unk_100498118 = 0u;
  xmmword_100498128 = 0u;
  unk_100498138 = 0u;
  xmmword_100498148 = 0u;
  *(__int128 *)((char *)&xmmword_100498148 + 15) = 0u;
  sub_100296D28(&xmmword_100498068);
  result = 0.0;
  unk_100498257 = 0u;
  xmmword_100498238 = 0u;
  unk_100498248 = 0u;
  xmmword_100498218 = 0u;
  unk_100498228 = 0u;
  xmmword_1004981F8 = 0u;
  unk_100498208 = 0u;
  xmmword_1004981D8 = 0u;
  unk_1004981E8 = 0u;
  xmmword_1004981B8 = 0u;
  unk_1004981C8 = 0u;
  xmmword_100498198 = 0u;
  unk_1004981A8 = 0u;
  xmmword_100498178 = 0u;
  unk_100498188 = 0u;
  xmmword_100498168 = 0u;
  return result;
}

uint64_t sub_100297ADC(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t result;
  pthread_mutex_t **v3;

  v1 = *a1;
  result = **a1;
  if (!result)
  {
    v3 = (pthread_mutex_t **)sub_100294378();
    sub_100295438(v3);
    if (!*v1)
      operator new();
    sub_100295440(v3);
    return *v1;
  }
  return result;
}

void sub_100297BFC(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  sub_100295440(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100297C30()
{
  pthread_mutex_t **v0;
  unsigned __int8 v1;

  if (!qword_100498A80)
  {
    v0 = (pthread_mutex_t **)sub_100294378();
    sub_100295438(v0);
    if (!qword_100498A80)
    {
      v1 = atomic_load((unsigned __int8 *)&qword_100498A98);
      if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_100498A98))
        sub_100298D0C();
      qword_100498A80 = (uint64_t)&unk_100498AB0;
    }
    sub_100295440(v0);
  }
  return qword_100498A80;
}

void sub_100297CE0(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  __cxa_guard_abort(&qword_100498A98);
  sub_100295440(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100297D08(_QWORD *a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  _BYTE v22[1024];
  uint64_t v23;
  char v24;

  *(_QWORD *)(a2 + 16) = a1[1];
  v3 = *(_DWORD *)(*a1 + 28);
  if ((v3 & 1) != 0)
  {
    if ((v3 & 2) == 0)
      ++*(_DWORD *)(a2 + 76);
    ++*(_DWORD *)(a2 + 72);
  }
  result = sub_100297E44(a2);
  if (result)
  {
    v11 = result;
    v23 = 0;
    v24 = 0;
    v12 = a1[1];
    sub_100298C84((uint64_t)v22, "b,%d,%lld,%lld,%lld", v5, v6, v7, v8, v9, v10, *(_DWORD *)(*(_QWORD *)v12 + 24));
    v19 = *(uint64_t **)(*(_QWORD *)v12 + 16);
    if (v19)
    {
      v20 = *v19;
      if (v20)
      {
        if (*(_DWORD *)(v20 + 24) != *(_DWORD *)(*(_QWORD *)v12 + 24))
          sub_100298C84((uint64_t)v22, ",parentThread=%d,parent=%lld", v13, v14, v15, v16, v17, v18, *(_DWORD *)(v20 + 24));
      }
    }
    sub_100298C84((uint64_t)v22, "\n", v13, v14, v15, v16, v17, v18, v21);
    return (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 16))(v11, v22);
  }
  return result;
}

uint64_t sub_100297E44(uint64_t a1)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD __dst[2];
  unint64_t v22;
  uint64_t v23[129];
  char v24;

  if (!*(_QWORD *)(a1 + 168))
  {
    v3 = *(_QWORD *)(sub_100297C30() + 40);
    if (v3)
    {
      v4 = (const char *)qword_100498AA0;
      if (!qword_100498AA0)
        v4 = "";
      sub_10029487C(v23, "%s-%03d.txt", v4, *(_DWORD *)a1);
      if (v23[0])
        v5 = (const char *)v23[0];
      else
        v5 = "";
      v6 = strlen(v5);
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
        sub_10022EEEC();
      v7 = v6;
      if (v6 >= 0x17)
      {
        v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v9 = v6 | 7;
        v10 = v9 + 1;
        v8 = operator new(v9 + 1);
        __dst[1] = v7;
        v22 = v10 | 0x8000000000000000;
        __dst[0] = v8;
      }
      else
      {
        HIBYTE(v22) = v6;
        v8 = __dst;
        if (!v6)
        {
LABEL_17:
          *((_BYTE *)v8 + v7) = 0;
          sub_10029434C(v23);
          v23[128] = 0;
          v24 = 0;
          if (SHIBYTE(v22) < 0)
          {
            LOBYTE(v11) = __dst[0];
            v12 = (char *)__dst[0];
          }
          else
          {
            v11 = __dst;
            v12 = (char *)__dst;
          }
          v13 = strrchr(v12, 47);
          if (v13)
            v20 = (char)v13;
          else
            v20 = (char)v11;
          sub_100298C84((uint64_t)v23, "#thread file: %s\n", v14, v15, v16, v17, v18, v19, v20);
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 16))(v3, v23);
          operator new();
        }
      }
      memmove(v8, v5, v7);
      goto LABEL_17;
    }
  }
  return *(_QWORD *)(a1 + 168);
}

void sub_100298080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002980E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  _BYTE v21[1024];
  uint64_t v22;
  char v23;

  v4 = *(int *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 8) += v4;
  result = sub_100297E44(a2);
  if (result)
  {
    v12 = result;
    v22 = 0;
    v23 = 0;
    sub_100298C84((uint64_t)v21, "e,%d,%lld,%lld,%lld,%lld", v6, v7, v8, v9, v10, v11, *(_DWORD *)(**(_QWORD **)(a1 + 8) + 24));
    if ((_DWORD)v4)
      sub_100298C84((uint64_t)v21, ",skip=%d", v13, v14, v15, v16, v17, v18, v4);
    sub_100298C84((uint64_t)v21, "\n", v13, v14, v15, v16, v17, v18, v20);
    result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 16))(v12, v21);
  }
  v19 = *(_DWORD *)(*(_QWORD *)a1 + 28);
  if ((v19 & 1) != 0)
  {
    if ((v19 & 2) == 0)
      --*(_DWORD *)(a2 + 76);
    --*(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t sub_10029822C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  void **v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  void **v36;
  uint64_t v37;
  uint64_t v39;
  _QWORD *v40;
  void **v41;
  uint64_t v42;
  void *__p[2];
  char v44;
  uint64_t v45[2];
  uint64_t v46;
  _QWORD v47[8];
  void *v48;
  char v49;
  _BYTE v50[152];

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  if (byte_1004AFF98)
  {
    byte_100498A6A = 0;
    return a1;
  }
  if ((byte_100498A69 & 1) == 0)
    sub_100297C30();
  if (byte_100498A6A)
  {
    v4 = sub_100297C30();
    v5 = sub_100295FA4((_DWORD *)(v4 + 16));
    v6 = v5;
    if (!v5)
    {
      v45[0] = 0;
      v45[1] = 0;
      v7 = sub_10029430C(v45, 3);
      *(_WORD *)v7 = 29808;
      *(_BYTE *)(v7 + 2) = 114;
      sub_100294B74(-215, v45, "getRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/utility.hpp", 701);
    }
    v8 = v5[8];
    if (v8)
    {
      v9 = (uint64_t *)(*(_QWORD *)(v5[4] + 8 * ((v8 + v5[7] - 1) / 0xAAuLL)) + 24 * ((v8 + v5[7] - 1) % 0xAAuLL));
      v10 = *v9;
      v11 = v9[1];
      if ((*(_DWORD *)(a2 + 28) & 0x80000000) == 0)
        goto LABEL_18;
    }
    else
    {
      v10 = v5[13];
      v11 = v5[14];
      if ((*(_DWORD *)(a2 + 28) & 0x80000000) == 0)
        goto LABEL_18;
    }
    if (v10)
    {
      if (!*(_QWORD *)v10)
        goto LABEL_24;
      sub_1002989D0((_BYTE *)v10);
      *(_DWORD *)(v10 + 8) = 0;
      v12 = v6[8];
      if (v12)
      {
        v13 = (uint64_t *)(*(_QWORD *)(v6[4] + 8 * ((v12 + v6[7] - 1) / 0xAAuLL)) + 24 * ((v12 + v6[7] - 1) % 0xAAuLL));
        v14 = v13 + 1;
      }
      else
      {
        v13 = v6 + 13;
        v14 = v6 + 14;
      }
      v10 = *v13;
      v11 = *v14;
    }
LABEL_18:
    if (!v10)
    {
      v16 = 0;
      goto LABEL_26;
    }
    if (*(_QWORD *)v10)
    {
      v15 = (unsigned int *)(*(_QWORD *)v10 + 48);
      if (v11)
      {
        v16 = *v15 + 1;
        *v15 = v16;
      }
      else
      {
        do
        {
          v17 = __ldaxr(v15);
          v16 = v17 + 1;
        }
        while (__stlxr(v17 + 1, v15));
        v11 = 0;
      }
LABEL_26:
      v18 = j__mach_absolute_time();
      v19 = atomic_load((unsigned __int8 *)&qword_100498A90);
      if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_100498A90))
      {
        *(double *)&qword_100498A88 = 1000000000.0 / sub_100294B10();
        __cxa_guard_release(&qword_100498A90);
      }
      v20 = v6[5];
      v21 = v6[4];
      if (v20 == v21)
        v22 = 0;
      else
        v22 = 170 * ((v20 - v21) >> 3) - 1;
      v23 = (uint64_t)(*(double *)&qword_100498A88 * (double)(uint64_t)(v18 - qword_100498A78));
      v24 = v6[8];
      v25 = v6[7] + v24;
      if (v22 == v25)
      {
        sub_100299968((uint64_t)(v6 + 3));
        v21 = v6[4];
        v26 = v6[8];
        v25 = v26 + v6[7];
      }
      else
      {
        v26 = v6[8];
      }
      v27 = (_QWORD *)(*(_QWORD *)(v21 + 8 * (v25 / 0xAA)) + 24 * (v25 % 0xAA));
      *v27 = a1;
      v27[1] = a2;
      v27[2] = v23;
      v6[8] = v26 + 1;
      *(_DWORD *)(a1 + 8) |= 1u;
      v28 = *(_DWORD *)(a2 + 28);
      if ((v28 & 0x40000000) == 0)
      {
        v29 = *((_DWORD *)v6 + 24);
        if ((v29 & 0x80000000) == 0 && v29 <= (int)v24)
          goto LABEL_69;
        if (dword_100498A70 >= 1 && (v28 & 2) == 0 && v11 && (*(_BYTE *)(v11 + 28) & 2) == 0 && v16 >= dword_100498A70)
        {
          if ((int)sub_10022EF00() >= 4)
          {
            sub_10022F4D4((uint64_t)v45);
            v30 = 4 * (v6[8] & 0xF);
            v31 = sub_10022EBE4(&v46, (uint64_t)&asc_1003BF2A7[v30 ^ 0x3F], v30);
            sub_10022EBE4(v31, (uint64_t)"OpenCV parent region exceeds children count. Bailout", 52);
            std::stringbuf::str(v47);
            if (v44 >= 0)
              v32 = __p;
            else
              v32 = (void **)__p[0];
            sub_10022EF84(4, (const char *)v32);
            if (v44 < 0)
              operator delete(__p[0]);
            sub_10022F69C((uint64_t)v45);
          }
LABEL_51:
          *((_DWORD *)v6 + 24) = v24;
LABEL_69:
          ++*((_DWORD *)v6 + 20);
          return a1;
        }
        if (dword_100498A74 >= 1 && v16 >= dword_100498A74)
        {
          if ((int)sub_10022EF00() >= 4)
          {
            sub_10022F4D4((uint64_t)v45);
            v39 = 4 * (v6[8] & 0xF);
            v40 = sub_10022EBE4(&v46, (uint64_t)&asc_1003BF2A7[v39 ^ 0x3F], v39);
            sub_10022EBE4(v40, (uint64_t)"Parent region exceeds children count. Bailout", 45);
            std::stringbuf::str(v47);
            if (v44 >= 0)
              v41 = __p;
            else
              v41 = (void **)__p[0];
            sub_10022EF84(4, (const char *)v41);
            if (v44 < 0)
              operator delete(__p[0]);
            *(uint64_t *)((char *)v45
            v46 = v42;
            if (v49 < 0)
              operator delete(v48);
            std::streambuf::~streambuf(v47);
            std::ios::~ios(v50);
            *((_DWORD *)v6 + 24) = v24;
            goto LABEL_69;
          }
          goto LABEL_51;
        }
      }
      v33 = v24 + 1;
      sub_100297ADC((uint64_t **)a2);
      if (***(_DWORD ***)a2)
      {
        if ((!v11 || (*(_BYTE *)(v11 + 28) & 4) == 0)
          && (!dword_100498A6C || (*(_BYTE *)(a2 + 28) & 2) != 0 || *((_DWORD *)v6 + 19) < dword_100498A6C))
        {
          operator new();
        }
      }
      else if ((int)sub_10022EF00() >= 4)
      {
        sub_10022F4D4((uint64_t)v45);
        v34 = 4 * (v6[8] & 0xF);
        v35 = sub_10022EBE4(&v46, (uint64_t)&asc_1003BF2A7[v34 ^ 0x3F], v34);
        sub_10022EBE4(v35, (uint64_t)"Region location is disabled. Bailout", 36);
        std::stringbuf::str(v47);
        if (v44 >= 0)
          v36 = __p;
        else
          v36 = (void **)__p[0];
        sub_10022EF84(4, (const char *)v36);
        if (v44 < 0)
          operator delete(__p[0]);
        *(uint64_t *)((char *)v45
        v46 = v37;
        if (v49 < 0)
          operator delete(v48);
        std::streambuf::~streambuf(v47);
        std::ios::~ios(v50);
      }
      *((_DWORD *)v6 + 24) = v33;
      goto LABEL_69;
    }
LABEL_24:
    v16 = 0;
    goto LABEL_26;
  }
  return a1;
}

void sub_1002988D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100498A90);
  _Unwind_Resume(a1);
}

void sub_1002988EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_10022F69C((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_10022F69C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1002989B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002989D0(_BYTE *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];

  v2 = sub_100297C30();
  v3 = sub_100295FA4((_DWORD *)(v2 + 16));
  v4 = (uint64_t)v3;
  if (!v3)
  {
    v19[0] = 0;
    v19[1] = 0;
    v5 = sub_10029430C(v19, 3);
    *(_WORD *)v5 = 29808;
    *(_BYTE *)(v5 + 2) = 114;
    sub_100294B74(-215, v19, "getRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/utility.hpp", 701);
  }
  v6 = *((_DWORD *)v3 + 16);
  v7 = j__mach_absolute_time();
  v8 = atomic_load((unsigned __int8 *)&qword_100498A90);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_100498A90))
  {
    *(double *)&qword_100498A88 = 1000000000.0 / sub_100294B10();
    __cxa_guard_release(&qword_100498A90);
  }
  v9 = (uint64_t)(*(double *)&qword_100498A88 * (double)(uint64_t)(v7 - qword_100498A78));
  v10 = *(_QWORD *)(v4 + 64);
  if (v10)
  {
    v11 = v9
        - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * ((v10 + *(_QWORD *)(v4 + 56) - 1) / 0xAAuLL))
                    + 24 * ((v10 + *(_QWORD *)(v4 + 56) - 1) % 0xAAuLL)
                    + 16);
    v12 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
LABEL_6:
      *(_QWORD *)(v4 + 88) = v11;
      *(_QWORD *)(v12 + 40) = v9;
      sub_1002980E8(v12, v4);
      if (*(_QWORD *)a1)
      {
        **(_QWORD **)(*(_QWORD *)a1 + 8) = 0;
        operator delete();
      }
      *(_QWORD *)a1 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v11 = v9 - *(_QWORD *)(v4 + 120);
    v12 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      goto LABEL_6;
  }
  if (v10 == *(_QWORD *)(v4 + 152) + 1)
    *(_QWORD *)(v4 + 88) += v11;
LABEL_12:
  if ((a1[8] & 1) != 0)
  {
    v14 = *(_QWORD *)(v4 + 32);
    v13 = *(_QWORD *)(v4 + 40);
    v15 = 170 * ((v13 - v14) >> 3) - 1;
    v16 = v13 == v14;
    v18 = *(_QWORD *)(v4 + 56);
    v17 = *(_QWORD *)(v4 + 64);
    if (v16)
      v15 = 0;
    *(_QWORD *)(v4 + 64) = v17 - 1;
    if ((unint64_t)(v15 - (v17 + v18) + 1) >= 0x154)
    {
      operator delete(*(void **)(v13 - 8));
      *(_QWORD *)(v4 + 40) -= 8;
    }
    if (*(_DWORD *)(v4 + 96) >= v6)
      *(_DWORD *)(v4 + 96) = -1;
  }
}

void sub_100298BF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100498A90);
  _Unwind_Resume(a1);
}

void sub_100298C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

unsigned int **sub_100298C30(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

uint64_t sub_100298C84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t result;

  v10 = *(_QWORD *)(a1 + 1024);
  v11 = 1024 - v10;
  v12 = sub_100294B6C((char *)(a1 + v10), 1024 - (int)v10, a2, &a9);
  if ((v12 & 0x80000000) != 0 || v11 < v12)
  {
    result = 0;
    *(_BYTE *)(a1 + 1032) = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 1024) += v12;
    return 1;
  }
  return result;
}

void sub_100298D0C()
{
  sub_100294490();
}

void sub_100298F1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100298FE4(int *a1)
{
  *(_QWORD *)a1 = off_10044EBA8;
  sub_100295BBC(a1);
  return sub_10029580C((uint64_t)a1);
}

pthread_mutex_t **sub_100299018(uint64_t a1)
{
  int *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  void *__p[2];
  char v20;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[8];
  void *v24;
  char v25;
  _BYTE v26[152];
  char *v27;
  char *v28;
  uint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v2 = (int *)(a1 + 16);
  sub_100295894(a1 + 16, &v27);
  v3 = v27;
  if (v28 == v27)
  {
    v5 = 0;
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = (v28 - v27) >> 3;
    if (v6 <= 1)
      v6 = 1;
    do
    {
      v7 = *(_QWORD *)v3;
      if (*(_QWORD *)v3)
      {
        v5 += *(int *)(v7 + 4);
        v4 += *(_QWORD *)(v7 + 8);
      }
      v3 += 8;
      --v6;
    }
    while (v6);
  }
  if ((v5 || byte_100498A6A) && (int)sub_10022EF00() >= 4)
  {
    sub_10022F4D4((uint64_t)v21);
    v8 = sub_10022EBE4(&v22, (uint64_t)"Trace: Total events: ", 21);
    std::ostream::operator<<(v8, v5);
    std::stringbuf::str(v23);
    if (v20 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    sub_10022EF84(4, (const char *)v9);
    if (v20 < 0)
      operator delete(__p[0]);
    *(_QWORD *)((char *)v21
    v22 = v10;
    if (v25 < 0)
      operator delete(v24);
    std::streambuf::~streambuf(v23);
    std::ios::~ios(v26);
  }
  if (v4 && (int)sub_10022EF00() >= 3)
  {
    sub_10022F4D4((uint64_t)v21);
    v11 = sub_10022EBE4(&v22, (uint64_t)"Trace: Total skipped events: ", 29);
    std::ostream::operator<<(v11, v4);
    std::stringbuf::str(v23);
    if (v20 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    sub_10022EF84(3, (const char *)v12);
    if (v20 < 0)
      operator delete(__p[0]);
    *(_QWORD *)((char *)v21
    v22 = v13;
    if (v25 < 0)
      operator delete(v24);
    std::streambuf::~streambuf(v23);
    std::ios::~ios(v26);
  }
  byte_1004AFF98 = 1;
  byte_100498A6A = 0;
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v14 = *(unsigned int **)(a1 + 32);
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)v2 = off_10044EBA8;
  sub_100295BBC(v2);
  sub_10029580C((uint64_t)v2);
  sub_1002953CC((pthread_mutex_t **)(a1 + 8));
  return sub_1002953CC((pthread_mutex_t **)a1);
}

_QWORD *sub_100299308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_100297C30();
  result = sub_100295FA4((_DWORD *)(v4 + 16));
  if (!result)
  {
    v9 = 0;
    v10 = 0;
    v6 = sub_10029430C(&v9, 3);
    *(_WORD *)v6 = 29808;
    *(_BYTE *)(v6 + 2) = 114;
    sub_100294B74(-215, &v9, "getRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/utility.hpp", 701);
  }
  v7 = result[13];
  if (v7 != a1)
  {
    if (v7)
    {
      v9 = 0;
      v10 = 0;
      qmemcpy((void *)sub_10029430C(&v9, 36), "ctx.dummy_stack_top.region == __null", 36);
      sub_100294B74(-215, &v9, "parallelForSetRootRegion", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/trace.cpp", 917);
    }
    result[13] = a1;
    result[14] = 0;
    result[15] = -1;
    if (result == (_QWORD *)a2)
    {
      *(_DWORD *)(a2 + 128) = *(_DWORD *)(a2 + 80);
      *(_DWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 136) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a2 + 88) = 0;
      *(_DWORD *)(a2 + 144) = *(_DWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 152) = *(_QWORD *)(a2 + 64);
    }
    else
    {
      if (result[8])
      {
        v9 = 0;
        v10 = 0;
        v8 = sub_10029430C(&v9, 17);
        *(_BYTE *)(v8 + 16) = 41;
        *(_OWORD *)v8 = *(_OWORD *)"ctx.stack.empty()";
        sub_100294B74(-215, &v9, "parallelForSetRootRegion", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/trace.cpp", 928);
      }
      result[2] = a1;
      result[9] = *(_QWORD *)(a2 + 72);
      result[19] = 0;
      *((_DWORD *)result + 24) = -1;
      *((_DWORD *)result + 24) = *(int *)(a2 + 96) >> 31;
    }
  }
  return result;
}

void sub_1002994C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_100299510()
{
  uint64_t v0;
  _QWORD *result;
  uint64_t v2;
  uint64_t v3[2];

  v0 = sub_100297C30();
  result = sub_100295FA4((_DWORD *)(v0 + 16));
  if (!result)
  {
    v3[0] = 0;
    v3[1] = 0;
    v2 = sub_10029430C(v3, 3);
    *(_WORD *)v2 = 29808;
    *(_BYTE *)(v2 + 2) = 114;
    sub_100294B74(-215, v3, "getRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/utility.hpp", 701);
  }
  return result;
}

void sub_10029958C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_1002995A4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  char *v7;
  int v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v2 = sub_100297C30();
  v3 = sub_100295FA4((_DWORD *)(v2 + 16));
  if (!v3)
  {
    v14 = 0;
    v15 = 0;
    v4 = sub_10029430C(&v14, 3);
    *(_WORD *)v4 = 29808;
    *(_BYTE *)(v4 + 2) = 114;
    sub_100294B74(-215, (uint64_t *)&v14, "getRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/utility.hpp", 701);
  }
  j__mach_absolute_time();
  v5 = atomic_load((unsigned __int8 *)&qword_100498A90);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_100498A90))
  {
    *(double *)&qword_100498A88 = 1000000000.0 / sub_100294B10();
    __cxa_guard_release(&qword_100498A90);
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v6 = sub_100297C30();
  sub_100295894(v6 + 16, &v14);
  v7 = v14;
  if (v15 != v14)
  {
    v8 = 0;
    v9 = (v15 - v14) >> 3;
    if (v9 <= 1)
      v9 = 1;
    v10 = v14;
    while (1)
    {
      v11 = *(_QWORD **)v10;
      if (*(_QWORD *)v10)
      {
        v12 = v11[8];
        if (v12)
        {
          if (*(_QWORD *)(*(_QWORD *)(v11[4] + 8 * ((v12 + v11[7] - 1) / 0xAAuLL)) + 24
                                                                                    * ((v12 + v11[7] - 1) % 0xAAuLL)) == a1)
            goto LABEL_15;
        }
        else if (v11[13] == a1)
        {
LABEL_15:
          v13 = *((_DWORD *)v11 + 20);
          *((_DWORD *)v11 + 20) = 0;
          v11[11] = 0;
          if (v11 == v3)
          {
            *((_DWORD *)v3 + 20) = *((_DWORD *)v3 + 32);
            *((_DWORD *)v3 + 32) = 0;
            v3[11] = v3[17];
            v3[17] = 0;
            *((_DWORD *)v3 + 24) = *((_DWORD *)v3 + 36);
            v11 = v3;
          }
          v8 += v13;
          v11[13] = 0;
          v11[14] = 0;
          v11[15] = -1;
        }
      }
      v10 += 8;
      if (!--v9)
      {
        *((_DWORD *)v3 + 20) += v8;
        goto LABEL_19;
      }
    }
  }
  if (v14)
  {
LABEL_19:
    v15 = v7;
    operator delete(v7);
  }
}

void sub_100299784(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100498A90);
  _Unwind_Resume(a1);
}

void sub_1002997A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_10029434C((uint64_t *)&__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002997D8(_QWORD *result)
{
  _QWORD *v1;
  pthread_mutex_t **v2;

  if (!*result)
  {
    v1 = result;
    v2 = (pthread_mutex_t **)sub_100294378();
    sub_100295438(v2);
    if (!*v1)
      operator new();
    return (_QWORD *)sub_100295440(v2);
  }
  return result;
}

void sub_100299830(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  sub_100295440(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10029984C(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_100297C30();
  result = sub_100295FA4((_DWORD *)(v2 + 16));
  if (!result)
  {
    v6 = 0;
    v7 = 0;
    v4 = sub_10029430C(&v6, 3);
    *(_WORD *)v4 = 29808;
    *(_BYTE *)(v4 + 2) = 114;
    sub_100294B74(-215, &v6, "getRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/utility.hpp", 701);
  }
  v5 = (_QWORD *)result[2];
  if (v5)
  {
    if (!*v5)
    {
      v6 = 0;
      v7 = 0;
      qmemcpy((void *)sub_10029430C(&v6, 13), "region->pImpl", 13);
      sub_100294B74(-215, &v6, "traceArg", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/trace.cpp", 1090);
    }
    return sub_1002997D8(*a1);
  }
  return result;
}

void sub_100299938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_100299968(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_100008FF8();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFF0uLL);
      sub_1002808A8((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFF0uLL);
    sub_100280A34((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFF0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_100008FF8();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_100008FF8();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_100299EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_100299EE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100299EF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100299F0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100299F24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  __int128 v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  uint64_t v11;
  std::locale v13;

  v2 = a2;
  *(_QWORD *)a1 = off_10044EAD8;
  v4 = (_QWORD *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
    a2 = *(_QWORD *)a2;
  sub_10029A0DC((void (__cdecl ***)(std::ofstream *__hidden))(a1 + 8), a2, 32);
  if (*(char *)(v2 + 23) < 0)
  {
    sub_10026F428((_BYTE *)(a1 + 576), *(void **)v2, *(_QWORD *)(v2 + 8));
  }
  else
  {
    v5 = *(_OWORD *)v2;
    *(_QWORD *)(a1 + 592) = *(_QWORD *)(v2 + 16);
    *(_OWORD *)(a1 + 576) = v5;
  }
  v6 = sub_10022EBE4(v4, (uint64_t)"#description: OpenCV trace file", 31);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet(&v13, &std::ctype<char>::id);
  v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v13);
  std::ostream::put(v6, v8);
  std::ostream::flush(v6);
  v9 = sub_10022EBE4(v4, (uint64_t)"#version: 1.0", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v13, &std::ctype<char>::id);
  v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v13);
  std::ostream::put(v9, v11);
  std::ostream::flush(v9);
  return a1;
}

void sub_10029A090(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10029A1F0(v1);
  _Unwind_Resume(a1);
}

void sub_10029A0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  _QWORD *v10;
  uint64_t v11;
  void **v12;

  std::locale::~locale(&a10);
  if (*(char *)(v11 + 599) < 0)
    operator delete(*v12);
  sub_10029A1F0(v10);
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_10029A0DC(void (__cdecl ***a1)(std::ofstream *__hidden this), uint64_t a2, int a3))(std::ofstream *__hidden this)
{
  _QWORD *v6;
  void (__cdecl **v7)(std::ofstream *__hidden);
  void (__cdecl **v8)(std::ofstream *__hidden);
  std::ios_base *v9;

  v6 = a1 + 1;
  *a1 = v7;
  *(_QWORD *)((char *)*(v7 - 3) + (_QWORD)a1) = v8;
  v9 = (std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1);
  std::ios_base::init(v9, a1 + 1);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  if (!std::filebuf::open(v6, a2, a3 | 0x10u))
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1), *(_DWORD *)((char *)*(*a1 - 3) + (_QWORD)a1 + 32) | 4);
  return a1;
}

void sub_10029A1AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::ostream::~ostream(v1, v2 + 8);
  std::ios::~ios(v1 + 416);
  _Unwind_Resume(a1);
}

_QWORD *sub_10029A1F0(_QWORD *a1)
{
  uint64_t v2;

  std::filebuf::~filebuf(a1 + 1);
  std::ios::~ios(a1 + 52);
  return a1;
}

void sub_10029A24C(uint64_t a1)
{
  sub_10029A2D8(a1);
  operator delete();
}

BOOL sub_10029A270(uint64_t a1, char *__s)
{
  int v2;
  _QWORD *v5;
  size_t v6;

  v2 = __s[1032];
  if (!__s[1032])
  {
    v5 = (_QWORD *)(a1 + 8);
    v6 = strlen(__s);
    sub_10022EBE4(v5, (uint64_t)__s, v6);
  }
  return v2 == 0;
}

uint64_t sub_10029A2D8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_10044EAD8;
  v2 = a1 + 16;
  v3 = (_QWORD *)(a1 + 8);
  if (!std::filebuf::close(a1 + 16))
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  if (*(char *)(a1 + 599) < 0)
    operator delete(*(void **)(a1 + 576));
  std::filebuf::~filebuf(v2);
  std::ios::~ios(a1 + 424);
  return a1;
}

void sub_10029A384(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_10044EB28;
  if (*(char *)(a2 + 23) < 0)
    a2 = *(_QWORD *)a2;
  sub_10029A0DC((void (__cdecl ***)(std::ofstream *__hidden))(a1 + 8), a2, 32);
  sub_100294490();
}

void sub_10029A4FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  pthread_mutex_t **v2;

  sub_1002953CC(v2);
  sub_10029A1F0(v1);
  _Unwind_Resume(a1);
}

void sub_10029A518(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10029A1F0(v1);
  _Unwind_Resume(a1);
}

void sub_10029A52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  _QWORD *v10;
  pthread_mutex_t **v11;
  uint64_t v12;
  void **v13;

  std::locale::~locale(&a10);
  if (*(char *)(v12 + 607) < 0)
    operator delete(*v13);
  sub_1002953CC(v11);
  sub_10029A1F0(v10);
  _Unwind_Resume(a1);
}

void sub_10029A570(uint64_t a1)
{
  sub_10029A620(a1);
  operator delete();
}

BOOL sub_10029A594(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v4;
  pthread_mutex_t **v5;
  size_t v6;

  v2 = *(unsigned __int8 *)(a2 + 1032);
  if (!*(_BYTE *)(a2 + 1032))
  {
    v4 = (_QWORD *)a1;
    v5 = (pthread_mutex_t **)(a1 + 576);
    sub_100295438((pthread_mutex_t **)(a1 + 576));
    ++v4;
    v6 = strlen((const char *)a2);
    sub_10022EBE4(v4, a2, v6);
    std::ostream::flush(v4);
    sub_100295440(v5);
  }
  return v2 == 0;
}

void sub_10029A608(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  sub_100295440(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10029A620(uint64_t a1)
{
  pthread_mutex_t **v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_10044EB28;
  v2 = (pthread_mutex_t **)(a1 + 576);
  sub_100295438((pthread_mutex_t **)(a1 + 576));
  v3 = (_QWORD *)(a1 + 8);
  if (!std::filebuf::close(a1 + 16))
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  sub_100295440(v2);
  if (*(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  sub_1002953CC(v2);
  std::filebuf::~filebuf(a1 + 16);
  std::ios::~ios(a1 + 424);
  return a1;
}

uint64_t sub_10029A6EC(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 170;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10029A7B4()
{
  operator delete();
}

uint64_t sub_10029A7C8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_10029A804(int *a1)
{
  *(_QWORD *)a1 = off_10044EBA8;
  sub_100295BBC(a1);
  sub_10029580C((uint64_t)a1);
  operator delete();
}

void sub_10029A84C()
{
  operator new();
}

void sub_10029A8D0()
{
  operator delete();
}

void sub_10029A8F4(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  if (a2)
  {
    v4 = (_QWORD *)(a2 + 160);
    v3 = *(unsigned int **)(a2 + 160);
    if (v3)
    {
      v5 = v3 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
    *v4 = 0;
    v4[1] = 0;
    sub_10029A6EC(a2 + 24);
    operator delete();
  }
}

void sub_10029A978()
{
  operator delete();
}

uint64_t sub_10029A98C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_10029A9C8()
{
  byte_100498A68 = sub_1002966E8("OPENCV_TRACE", 0);
  dword_100498A6C = sub_100296924("OPENCV_TRACE_DEPTH_OPENCV", 1);
  dword_100498A70 = sub_100296924("OPENCV_TRACE_MAX_CHILDREN_OPENCV", 1000);
  dword_100498A74 = sub_100296924("OPENCV_TRACE_MAX_CHILDREN", 10000);
  sub_100296C84("OPENCV_TRACE_LOCATION", "OpenCVTrace", &qword_100498AA0);
  return __cxa_atexit((void (*)(void *))sub_10022FBC0, &qword_100498AA0, (void *)&_mh_execute_header);
}

double sub_10029AA68(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return result;
}

uint64_t sub_10029AA84(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9[2];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_DWORD *)(a1 + 76))
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_10029430C(v9, 13), "mapcount == 0", 13);
    sub_100294B74(-215, v9, "~UMatData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 77);
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    v5 = (unsigned int *)(v2 + 20);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!*v5)
    {
      if (!*(_DWORD *)(v2 + 76))
        goto LABEL_19;
      v8 = *(_QWORD *)(v2 + 8);
      if (!v8)
        v8 = sub_100255D20();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, v2);
      if (!*v5)
      {
LABEL_19:
        if (!*v3)
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8) + 32))(*(_QWORD *)(v2 + 8), v2);
      }
    }
    *(_QWORD *)(a1 + 80) = 0;
  }
  return a1;
}

void sub_10029ABBC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2 >= 0x21)
  {
    v29 = 0;
    v30 = 0;
    qmemcpy((void *)sub_10029430C(&v29, 25), "0 <= _dims && _dims <= 32", 25);
    sub_100294B74(-215, &v29, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 182);
  }
  if (*(_DWORD *)(a1 + 4) != a2)
  {
    v10 = *(void **)(a1 + 56);
    if (v10 != (void *)(a1 + 64))
    {
      j__free(v10);
      *(_QWORD *)(a1 + 48) = a1 + 8;
      *(_QWORD *)(a1 + 56) = a1 + 64;
    }
    if (a2 >= 3)
    {
      v11 = 8 * a2;
      v12 = (char *)sub_1001D444C(v11 + 4 * (a2 + 1));
      *(_QWORD *)(a1 + 56) = v12;
      *(_DWORD *)&v12[v11] = a2;
      *(_QWORD *)(a1 + 48) = &v12[v11 + 4];
      *(_QWORD *)(a1 + 8) = -1;
    }
  }
  *(_DWORD *)(a1 + 4) = a2;
  if (a3)
  {
    v13 = (a2 - 1);
    if (a2 >= 1)
    {
      v14 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
      v15 = (v14 << ((0xFA50u >> (2 * (*(_BYTE *)a1 & 7))) & 3));
      if (a4)
      {
        v16 = *(_DWORD *)(a3 + 4 * v13);
        if (v16 < 0)
        {
          v29 = 0;
          v30 = 0;
          v17 = sub_10029430C(&v29, 6);
          *(_DWORD *)v17 = 1027481715;
          *(_WORD *)(v17 + 4) = 12320;
          sub_100294B74(-215, &v29, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 209);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v13) = v16;
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13) = v15;
        if (a2 != 1)
        {
          v18 = (a2 - 1);
          do
          {
            v20 = *(_DWORD *)(a3 - 4 + 4 * v18);
            if (v20 < 0)
            {
              v29 = 0;
              v30 = 0;
              v21 = sub_10029430C(&v29, 6);
              *(_DWORD *)v21 = 1027481715;
              *(_WORD *)(v21 + 4) = 12320;
              sub_100294B74(-215, &v29, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 209);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v18 - 4) = v20;
            v22 = v15;
            if (v18 <= v13)
              v22 = *(_QWORD *)(a4 - 8 + 8 * v18);
            v19 = *(_QWORD *)(a1 + 56) + 8 * v18--;
            *(_QWORD *)(v19 - 8) = v22;
          }
          while (v18 + 1 > 1);
        }
      }
      else if ((a5 & 1) != 0)
      {
        v23 = (v14 << ((0xFA50u >> (2 * (*(_BYTE *)a1 & 7))) & 3));
        do
        {
          v25 = *(_DWORD *)(a3 + 4 * v13);
          if (v25 < 0)
          {
            v29 = 0;
            v30 = 0;
            v26 = sub_10029430C(&v29, 6);
            *(_DWORD *)v26 = 1027481715;
            *(_WORD *)(v26 + 4) = 12320;
            sub_100294B74(-215, &v29, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 209);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v13) = v25;
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13) = v23;
          v23 *= v25;
          v24 = v13-- <= 0;
        }
        while (!v24);
      }
      else
      {
        do
        {
          v27 = *(_DWORD *)(a3 + 4 * v13);
          if (v27 < 0)
          {
            v29 = 0;
            v30 = 0;
            v28 = sub_10029430C(&v29, 6);
            *(_DWORD *)v28 = 1027481715;
            *(_WORD *)(v28 + 4) = 12320;
            sub_100294B74(-215, &v29, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 209);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v13) = v27;
          v24 = v13-- <= 0;
        }
        while (!v24);
      }
      if (a2 == 1)
      {
        *(_DWORD *)(a1 + 4) = 2;
        *(_DWORD *)(a1 + 12) = 1;
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v15;
      }
    }
  }
}

void sub_10029AF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10029AF80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  int32x2_t v64;
  unsigned int v65;
  unsigned int v66;
  _QWORD v67[4];
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  void *v79;
  _QWORD v80[2];
  int32x2_t v81;
  uint64_t v82;
  int v83;
  _DWORD v84[7];
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  char *v88;
  _QWORD v89[2];

  v83 = 1124007936;
  v85 = 0;
  v86 = 0;
  memset(v84, 0, 24);
  v87 = &v84[1];
  v88 = (char *)v89;
  v89[0] = 0;
  v89[1] = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    *(_DWORD *)a4 = 1124007936;
    *(_QWORD *)(a4 + 4) = 0;
    *(_QWORD *)(a4 + 20) = 0;
    *(_QWORD *)(a4 + 12) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 64) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 8;
    *(_QWORD *)(a4 + 56) = a4 + 64;
    *(_QWORD *)(a4 + 72) = 0;
LABEL_46:
    memset(v84, 0, 20);
    v86 = 0;
    goto LABEL_47;
  }
  if (v5 == *(_QWORD *)(a1 + 24))
  {
LABEL_6:
    v10 = *(_QWORD *)(a1 + 48);
    v11 = sub_100255D20();
    v12 = a2 | 0x3000000;
    if (v10)
      v11 = v10;
    v13 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v11 + 16))(v11, *(unsigned int *)(a1 + 4), *(_QWORD *)(a1 + 64), *(_DWORD *)a1 & 0xFFF, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 72), a2 | 0x3000000, a3);
    v14 = sub_100255D20();
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, v13, v12, a3) & 1) == 0)
    {
      v15 = sub_100255D20();
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 24))(v15, v13, v12, a3) & 1) == 0)
      {
        v72 = 0;
        v73 = 0;
        v16 = sub_10029430C(&v72, 9);
        *(_BYTE *)(v16 + 8) = 100;
        *(_QWORD *)v16 = *(_QWORD *)"allocated";
        sub_100294B74(-215, &v72, "getUMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 309);
      }
    }
    v17 = *(_QWORD *)(a1 + 56);
    if (v17)
    {
      *(_QWORD *)(v13 + 80) = v17;
      v18 = (unsigned int *)(v17 + 20);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v20 = (unsigned int *)(*(_QWORD *)(a1 + 56) + 16);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
    v22 = *(_DWORD *)(a1 + 4);
    v83 = *(_DWORD *)a1;
    sub_10029ABBC((uint64_t)&v83, v22, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), 0);
    v23 = v84[0];
    v24 = v84[0];
    if (v84[0] < 1)
    {
      v26 = 0;
    }
    else
    {
      v25 = 0;
      while ((int)v87[v25] <= 1)
      {
        if (v84[0] == ++v25)
        {
          v26 = v84[0];
          goto LABEL_30;
        }
      }
      v26 = v25;
    }
LABEL_30:
    v36 = v88;
    while (1)
    {
      v37 = v24 - 1;
      if (v24 - 1 <= v26)
        break;
      v38 = (int)v87[v24 - 1];
      v39 = &v88[8 * v24];
      v40 = *((_QWORD *)v39 - 2);
      v41 = *((_QWORD *)v39 - 1) * v38;
      v24 = v37;
      if (v41 < v40)
      {
        v42 = v83 & 0xFFFFBFFF;
        v83 &= ~0x4000u;
        if (v84[0] < 3)
          goto LABEL_37;
        goto LABEL_36;
      }
    }
    v42 = v83 & 0xFFFFBFFF | 0x4000;
    v83 = v42;
    if (v84[0] < 3)
      goto LABEL_37;
LABEL_36:
    *(_QWORD *)&v84[1] = -1;
LABEL_37:
    v85 = v13;
    v86 = 0;
    if (v13)
    {
      v43 = (unsigned int *)(v13 + 16);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 + 1, v43));
      v42 = v83;
      v23 = v84[0];
      v46 = v85;
      v45 = v86;
      v36 = v88;
    }
    else
    {
      v45 = 0;
      v46 = 0;
    }
    *(_DWORD *)a4 = v42;
    *(_DWORD *)(a4 + 4) = v23;
    *(_QWORD *)(a4 + 8) = *(_QWORD *)&v84[1];
    *(_QWORD *)(a4 + 16) = *(_QWORD *)&v84[3];
    *(_DWORD *)(a4 + 24) = v84[5];
    *(_QWORD *)(a4 + 32) = v46;
    *(_QWORD *)(a4 + 40) = v45;
    *(_QWORD *)(a4 + 64) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 8;
    *(_QWORD *)(a4 + 56) = a4 + 64;
    *(_QWORD *)(a4 + 72) = 0;
    if (v23 > 2)
    {
      *(_QWORD *)(a4 + 48) = v87;
      *(_QWORD *)(a4 + 56) = v36;
      v87 = &v84[1];
      v88 = (char *)v89;
    }
    else
    {
      *(_QWORD *)(a4 + 64) = *v36;
      *(_QWORD *)(a4 + 72) = v36[1];
    }
    v83 = 1124007936;
    goto LABEL_46;
  }
  v81 = 0;
  v82 = 0;
  sub_100258BD0(a1, &v82, &v81);
  if (!*(_QWORD *)&v81)
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 24))
    {
      v72 = 0;
      v73 = 0;
      v9 = sub_10029430C(&v72, 17);
      *(_BYTE *)(v9 + 16) = 116;
      *(_OWORD *)v9 = *(_OWORD *)"data == datastart";
      sub_100294B74(-215, &v72, "getUMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 287);
    }
    goto LABEL_6;
  }
  v28 = *(_DWORD *)(a1 + 8);
  v27 = *(_DWORD *)(a1 + 12);
  v29 = *(_DWORD *)(a1 + 4);
  LODWORD(v72) = *(_DWORD *)a1;
  HIDWORD(v72) = v29;
  v73 = __PAIR64__(v27, v28);
  v30 = *(_OWORD *)(a1 + 32);
  v74 = *(_OWORD *)(a1 + 16);
  v75 = v30;
  v31 = *(_QWORD *)(a1 + 56);
  v76 = *(_QWORD *)(a1 + 48);
  v77 = v31;
  v78 = &v73;
  v79 = v80;
  v80[0] = 0;
  v80[1] = 0;
  if (v31)
  {
    v32 = (unsigned int *)(v31 + 20);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
    v29 = *(_DWORD *)(a1 + 4);
  }
  if (v29 > 2)
  {
    HIDWORD(v72) = 0;
    sub_100256B48((uint64_t)&v72, a1);
  }
  else
  {
    v34 = *(_QWORD **)(a1 + 72);
    v35 = v79;
    *(_QWORD *)v79 = *v34;
    v35[1] = v34[1];
  }
  sub_100258D40((uint64_t)&v72, v81.u32[1], HIDWORD(v82) - (v81.i32[1] + v73), v81.u32[0], v82 - (v81.i32[0] + HIDWORD(v73)));
  sub_10029AF80(v67, &v72, a2, a3);
  v64 = v81;
  v65 = v27;
  v66 = v28;
  sub_10029C5AC((int32x2_t *)a4, (uint64_t)v67, &v64);
  if (v68)
  {
    v47 = (unsigned int *)(v68 + 16);
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      v50 = v68;
      v68 = 0;
      (*(void (**)(_QWORD))(**(_QWORD **)(v50 + 8) + 32))(*(_QWORD *)(v50 + 8));
    }
  }
  if (SHIDWORD(v67[0]) >= 1)
  {
    v51 = 0;
    v52 = v69;
    do
      *(_DWORD *)(v52 + 4 * v51++) = 0;
    while (v51 < SHIDWORD(v67[0]));
  }
  v68 = 0;
  if (v70 != &v71)
    j__free(v70);
  if (v77)
  {
    v53 = (unsigned int *)(v77 + 20);
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
      sub_100256C90((uint64_t)&v72);
  }
  v77 = 0;
  v74 = 0u;
  v75 = 0u;
  if (SHIDWORD(v72) >= 1)
  {
    v56 = 0;
    v57 = v78;
    do
      *((_DWORD *)v57 + v56++) = 0;
    while (v56 < SHIDWORD(v72));
  }
  if (v79 != v80)
    j__free(v79);
  if (v85)
  {
    v58 = (unsigned int *)(v85 + 16);
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
    {
      v61 = v85;
      v85 = 0;
      (*(void (**)(_QWORD))(**(_QWORD **)(v61 + 8) + 32))(*(_QWORD *)(v61 + 8));
    }
  }
  if (v84[0] >= 1)
  {
    v62 = 0;
    v63 = v87;
    do
      v63[v62++] = 0;
    while (v62 < v84[0]);
  }
LABEL_47:
  v85 = 0;
  if (v88 != (char *)v89)
    j__free(v88);
}

void sub_10029B578(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029B66C(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_10029B66C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      v6 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 32))(*(_QWORD *)(v6 + 8));
    }
  }
  if (*(int *)(a1 + 4) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 48);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 4));
  }
  *(_QWORD *)(a1 + 32) = 0;
  v9 = *(void **)(a1 + 56);
  if (v9 != (void *)(a1 + 64))
    j__free(v9);
  return a1;
}

void sub_10029B708(uint64_t a1, int a2, uint64_t *__src, __int16 a4, int a5)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t __dst[16];

  v5 = __src;
  *(_DWORD *)(a1 + 24) = a5;
  if (a2 > 0x20 || !__src)
  {
    __dst[0] = 0;
    __dst[1] = 0;
    qmemcpy((void *)sub_10029430C(__dst, 27), "0 <= d && d <= 32 && _sizes", 27);
    sub_100294B74(-215, __dst, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 337);
  }
  v8 = a4 & 0xFFF;
  v9 = *(_QWORD *)(a1 + 32);
  if (!v9)
    goto LABEL_25;
  v10 = *(_DWORD *)(a1 + 4);
  if (v10 == a2)
  {
    if ((_DWORD)v8 != (*(_DWORD *)a1 & 0xFFF))
      goto LABEL_25;
    if (a2 == 2)
    {
      if (*(_DWORD *)(a1 + 8) == *(_DWORD *)__src && *(_DWORD *)(a1 + 12) == *((_DWORD *)__src + 1))
        return;
    }
    else if (a2 < 1)
    {
      LODWORD(v12) = 0;
      goto LABEL_22;
    }
LABEL_17:
    v12 = 0;
    while (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v12) == *((_DWORD *)__src + v12))
    {
      if (a2 == ++v12)
        goto LABEL_23;
    }
LABEL_22:
    if ((_DWORD)v12 == a2)
    {
LABEL_23:
      if (a2 > 1 || *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4) == 1)
        return;
    }
LABEL_25:
    v11 = (_QWORD *)(a1 + 48);
    if (*(uint64_t **)(a1 + 48) != __src)
    {
      if (!v9)
        goto LABEL_35;
      goto LABEL_31;
    }
    if (a2 < 1)
      goto LABEL_30;
    goto LABEL_29;
  }
  if (a2 != 1 || v10 >= 3)
    goto LABEL_25;
  if ((_DWORD)v8 == (*(_DWORD *)a1 & 0xFFF))
    goto LABEL_17;
  v11 = (_QWORD *)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) == __src)
  {
LABEL_29:
    memcpy(__dst, __src, 4 * a2);
LABEL_30:
    v5 = __dst;
    if (!v9)
      goto LABEL_35;
  }
LABEL_31:
  v13 = (unsigned int *)(v9 + 16);
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
  {
    v16 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(v16 + 8) + 32))(*(_QWORD *)(v16 + 8));
  }
LABEL_35:
  if (*(int *)(a1 + 4) >= 1)
  {
    v17 = 0;
    v18 = *v11;
    do
      *(_DWORD *)(v18 + 4 * v17++) = 0;
    while (v17 < *(int *)(a1 + 4));
  }
  *(_QWORD *)(a1 + 32) = 0;
  if (a2)
  {
    *(_DWORD *)a1 = v8 | 0x42FF0000;
    sub_10029ABBC(a1, a2, (uint64_t)v5, 0, 1);
    *(_QWORD *)(a1 + 40) = 0;
    v19 = *(unsigned int *)(a1 + 4);
    if ((int)v19 >= 3)
    {
      v21 = (int *)(*v11 + 4);
      v22 = 1;
      v23 = v19 & 0xFFFFFFFE;
      v24 = 1;
      do
      {
        v22 *= *(v21 - 1);
        v24 *= *v21;
        v21 += 2;
        v23 -= 2;
      }
      while (v23);
      v20 = v24 * v22;
      v25 = v19 - (v19 & 0xFFFFFFFE);
      if (v25)
      {
        v26 = (int *)(*v11 + ((4 * v19) & 0x3FFFFFFF8));
        do
        {
          v27 = *v26++;
          v20 *= v27;
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      v20 = *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8);
    }
    if (v20)
    {
      v28 = *(_QWORD *)(a1 + 16);
      v29 = sub_100255D20();
      if (!v28)
      {
        sub_100255D20();
        v28 = v29;
      }
      v30 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v28 + 16))(v28, *(unsigned int *)(a1 + 4), *(_QWORD *)(a1 + 48), v8, 0, *(_QWORD *)(a1 + 56), 0, *(unsigned int *)(a1 + 24));
      *(_QWORD *)(a1 + 32) = v30;
      if (!v30)
      {
        v46 = 0;
        v47 = 0;
        v31 = sub_10029430C(&v46, 6);
        *(_WORD *)(v31 + 4) = 12320;
        *(_DWORD *)v31 = 1025581173;
        sub_100294B74(-215, &v46, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 377);
      }
      LODWORD(v19) = *(_DWORD *)(a1 + 4);
      if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * ((int)v19 - 1)) != (((*(_DWORD *)a1 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_BYTE *)a1 & 7))) & 3))
      {
        v46 = 0;
        v47 = 0;
        qmemcpy((void *)sub_10029430C(&v46, 146), "step[dims-1] == (size_t)(((((flags) & ((512 - 1) << 3)) >> 3) + 1) << ((((sizeof(size_t)/4+1)*16384|0x3a50) >> ((flags) & ((1 << 3) - 1))*2) & 3))", 146);
        sub_100294B74(-215, &v46, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 385);
      }
    }
    v32 = v19;
    v33 = *v11;
    if ((int)v19 < 1)
    {
      v35 = 0;
    }
    else
    {
      v34 = 0;
      while (*(int *)(v33 + 4 * v34) <= 1)
      {
        if (v32 == ++v34)
        {
          v35 = v32;
          goto LABEL_60;
        }
      }
      v35 = v34;
    }
LABEL_60:
    v36 = (int)v32;
    v37 = v33 - 4;
    while (1)
    {
      v38 = v36 - 1;
      if (v36 - 1 <= v35)
        break;
      v39 = *(int *)(v37 + 4 * v36);
      v40 = *(_QWORD *)(a1 + 56) + 8 * v36;
      v41 = *(_QWORD *)(v40 - 16);
      v42 = *(_QWORD *)(v40 - 8) * v39;
      v36 = v38;
      if (v42 < v41)
      {
        *(_DWORD *)a1 &= ~0x4000u;
        if ((int)v32 < 3)
          goto LABEL_67;
        goto LABEL_66;
      }
    }
    *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFFBFFF | 0x4000;
    if ((int)v32 < 3)
      goto LABEL_67;
LABEL_66:
    *(_QWORD *)(a1 + 8) = -1;
LABEL_67:
    v43 = *(_QWORD *)(a1 + 32);
    if (v43)
    {
      v44 = (unsigned int *)(v43 + 16);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 + 1, v44));
    }
  }
}

void sub_10029BC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10029BD28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10029ABBC(a1, *(_DWORD *)(a2 + 4), 0, 0, 0);
  if (*(int *)(a1 + 4) >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 48);
    v6 = *(_QWORD *)(a2 + 56);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    do
    {
      *(_DWORD *)(v7 + 4 * v4) = *(_DWORD *)(v5 + 4 * v4);
      *(_QWORD *)(v8 + 8 * v4) = *(_QWORD *)(v6 + 8 * v4);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 4));
  }
}

uint64_t sub_10029BD9C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 32))(*(_QWORD *)(v1 + 8));
}

uint64_t sub_10029BDB4(uint64_t a1, _DWORD *a2, int *a3, uint64_t *a4)
{
  int *v8;
  _QWORD *v9;
  _DWORD *v10;
  void *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  _BYTE v53[24];
  int v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  void *v58;
  _BYTE v59[24];
  _QWORD *v60;
  uint64_t v61;
  _QWORD v62[137];

  *(_DWORD *)a1 = 1124007936;
  *(_QWORD *)(a1 + 4) = 0;
  v8 = (int *)(a1 + 4);
  *(_QWORD *)(a1 + 32) = 0;
  v9 = (_QWORD *)(a1 + 32);
  v10 = (_DWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 8;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = (void *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = a2[1];
  if (v12 < 2)
  {
    v60 = 0;
    v61 = 0;
    v13 = sub_10029430C(&v60, 11);
    *(_DWORD *)(v13 + 7) = 840973630;
    *(_QWORD *)v13 = *(_QWORD *)"m.dims >= 2";
    sub_100294B74(-215, (uint64_t *)&v60, "UMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 426);
  }
  if (v12 > 2)
  {
    v52 = a1 + 8;
    bzero(v62, 0x440uLL);
    v60 = v62;
    v61 = v12;
    if (v12 > 0x88)
      operator new[]();
    v19 = *a4;
    v62[0] = *(_QWORD *)a3;
    v62[1] = v19;
    v20 = 2;
    do
      v60[v20++] = 0x7FFFFFFF80000000;
    while (v20 < (int)a2[1]);
    sub_10029C8AC((uint64_t)v53, (uint64_t)a2, (uint64_t)v60);
    v21 = *(_QWORD *)(a1 + 32);
    if (v53 == (_BYTE *)a1)
    {
      if (v21)
      {
        v32 = (unsigned int *)(v21 + 16);
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          v35 = v55;
          v55 = 0;
          (*(void (**)(_QWORD))(**(_QWORD **)(v35 + 8) + 32))(*(_QWORD *)(v35 + 8));
        }
      }
      goto LABEL_49;
    }
    if (v21)
    {
      v22 = (unsigned int *)(v21 + 16);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *v9;
        *v9 = 0;
        (*(void (**)(_QWORD))(**(_QWORD **)(v25 + 8) + 32))(*(_QWORD *)(v25 + 8));
      }
    }
    if (*v8 >= 1)
    {
      v26 = 0;
      v27 = *(_QWORD *)(a1 + 48);
      do
        *(_DWORD *)(v27 + 4 * v26++) = 0;
      while (v26 < *v8);
    }
    v28 = *(_DWORD *)&v53[4];
    *(_OWORD *)a1 = *(_OWORD *)v53;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)&v53[16];
    *(_DWORD *)(a1 + 24) = v54;
    v29 = v56;
    *(_QWORD *)(a1 + 32) = v55;
    *(_QWORD *)(a1 + 40) = v29;
    v30 = *(void **)(a1 + 56);
    if (v30 == v11)
    {
      v31 = v58;
      if (v28 <= 2)
        goto LABEL_34;
    }
    else
    {
      j__free(v30);
      *(_QWORD *)(a1 + 48) = v52;
      *(_QWORD *)(a1 + 56) = v11;
      v31 = v58;
      if (*(int *)&v53[4] <= 2)
      {
LABEL_34:
        *(_QWORD *)(a1 + 64) = *v31;
        *(_QWORD *)(a1 + 72) = v31[1];
LABEL_48:
        *(_DWORD *)v53 = 1124007936;
        memset(&v53[4], 0, 20);
        v55 = 0;
        v56 = 0;
LABEL_49:
        if (*(int *)&v53[4] >= 1)
        {
          v41 = 0;
          v42 = v57;
          do
            *(_DWORD *)&v42[4 * v41++] = 0;
          while (v41 < *(int *)&v53[4]);
        }
        v55 = 0;
        if (v58 != v59)
          j__free(v58);
        if (v60 != v62 && v60 != 0)
          operator delete[]();
        return a1;
      }
    }
    *(_QWORD *)(a1 + 48) = v57;
    *(_QWORD *)(a1 + 56) = v31;
    v57 = &v53[8];
    v58 = v59;
    goto LABEL_48;
  }
  sub_10029C430(a1, (uint64_t)a2);
  v14 = *a3;
  v15 = a3[1];
  if ((*a3 != 0x80000000 || v15 != 0x7FFFFFFF) && (v14 || v15 != *v10))
  {
    if (v14 < 0 || v14 > v15 || v15 > a2[2])
    {
      v60 = 0;
      v61 = 0;
      qmemcpy((void *)sub_10029430C(&v60, 83), "0 <= _rowRange.start && _rowRange.start <= _rowRange.end && _rowRange.end <= m.rows", 83);
      sub_100294B74(-215, (uint64_t *)&v60, "UMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 441);
    }
    *(_DWORD *)(a1 + 8) = v15 - v14;
    *(_QWORD *)(a1 + 40) += *(_QWORD *)(a1 + 64) * v14;
    *(_DWORD *)a1 |= 0x8000u;
  }
  v16 = *(_DWORD *)a4;
  v17 = *((_DWORD *)a4 + 1);
  if (*(_DWORD *)a4 == 0x80000000 && v17 == 0x7FFFFFFF || !v16 && v17 == *(_DWORD *)(a1 + 12))
  {
    v18 = *v10 < 1;
    if (*v10 == 1)
    {
LABEL_20:
      *(_DWORD *)a1 |= 0x4000u;
      goto LABEL_65;
    }
  }
  else
  {
    if (v16 < 0 || v16 > v17 || v17 > a2[3])
    {
      v60 = 0;
      v61 = 0;
      qmemcpy((void *)sub_10029430C(&v60, 83), "0 <= _colRange.start && _colRange.start <= _colRange.end && _colRange.end <= m.cols", 83);
      sub_100294B74(-215, (uint64_t *)&v60, "UMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 449);
    }
    v36 = v17 - v16;
    *(_DWORD *)(a1 + 12) = v36;
    v37 = *(_DWORD *)(a1 + 4);
    v38 = __OFSUB__(v37, 1);
    v39 = v37 - 1;
    if (v39 < 0 != v38)
      v40 = 0;
    else
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v39);
    *(_QWORD *)(a1 + 40) += v40 * v16;
    if (v36 >= a2[3])
      v44 = -32769;
    else
      v44 = -49153;
    *(_DWORD *)a1 = v44 & *(_DWORD *)a1 | 0x8000;
    v18 = *v10 < 1;
    if (*v10 == 1)
      goto LABEL_20;
  }
  if (!v18)
  {
LABEL_65:
    if (*(int *)(a1 + 12) > 0)
      return a1;
  }
  if (*v9)
  {
    v45 = (unsigned int *)(*v9 + 16);
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      v48 = *v9;
      *v9 = 0;
      (*(void (**)(_QWORD))(**(_QWORD **)(v48 + 8) + 32))(*(_QWORD *)(v48 + 8));
    }
  }
  if (*v8 >= 1)
  {
    v49 = 0;
    v50 = *(_QWORD *)(a1 + 48);
    do
      *(_DWORD *)(v50 + 4 * v49++) = 0;
    while (v49 < *v8);
  }
  *v9 = 0;
  *(_QWORD *)v10 = 0;
  return a1;
}

void sub_10029C3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10029C430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 == a2)
    return a1;
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 16);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 16);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      v11 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 8) + 32))(*(_QWORD *)(v11 + 8));
    }
  }
  if (*(int *)(a1 + 4) <= 0)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)a1 = *(_DWORD *)a2;
  }
  else
  {
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 48);
    do
    {
      *(_DWORD *)(v13 + 4 * v12++) = 0;
      v14 = *(int *)(a1 + 4);
    }
    while (v12 < v14);
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    if ((int)v14 >= 3)
    {
      v15 = *(_DWORD *)(a2 + 4);
      goto LABEL_18;
    }
  }
  v15 = *(_DWORD *)(a2 + 4);
  if (v15 > 2)
  {
LABEL_18:
    sub_10029ABBC(a1, v15, 0, 0, 0);
    if (*(int *)(a1 + 4) >= 1)
    {
      v18 = 0;
      v19 = *(_QWORD *)(a2 + 48);
      v20 = *(_QWORD *)(a2 + 56);
      v21 = *(_QWORD *)(a1 + 48);
      v22 = *(_QWORD *)(a1 + 56);
      do
      {
        *(_DWORD *)(v21 + 4 * v18) = *(_DWORD *)(v19 + 4 * v18);
        *(_QWORD *)(v22 + 8 * v18) = *(_QWORD *)(v20 + 8 * v18);
        ++v18;
      }
      while (v18 < *(int *)(a1 + 4));
    }
    goto LABEL_21;
  }
  *(_DWORD *)(a1 + 4) = v15;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v16 = *(_QWORD **)(a2 + 56);
  v17 = *(_QWORD **)(a1 + 56);
  *v17 = *v16;
  v17[1] = v16[1];
LABEL_21:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  if (!*(_DWORD *)(a1 + 24))
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v23 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v23;
  return a1;
}

int32x2_t *sub_10029C5AC(int32x2_t *result, uint64_t a2, int32x2_t *a3)
{
  int32x2_t *v3;
  unsigned __int32 v4;
  int32x2_t v5;
  __int32 v6;
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  __int32 v13;
  __int32 v14;
  __int32 v15;
  int v16;
  uint64_t v17;
  __int32 v18;
  __int32 v19;
  int32x2_t v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD *v23;
  int32x2_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  int32x2_t v28;
  uint64_t v29;
  int32x2_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = result;
  v4 = *(_DWORD *)a2;
  result->i32[0] = *(_DWORD *)a2;
  result->i32[1] = 2;
  result[1] = vrev64_s32(a3[1]);
  v5 = *(int32x2_t *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 24);
  v7 = *(int32x2_t *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = a3->i32[1];
  v10 = **(_QWORD **)(a2 + 56);
  result[8] = 0;
  result[2] = v5;
  result[3].i32[0] = v6;
  v11 = (int32x2_t)(v8 + v10 * v9);
  result[4] = v7;
  result[5] = v11;
  result[6] = (int32x2_t)&result[1];
  result[7] = (int32x2_t)&result[8];
  result[9] = 0;
  if (*(int *)(a2 + 4) >= 3)
  {
    v31 = 0;
    v32 = 0;
    v12 = sub_10029430C(&v31, 11);
    *(_DWORD *)(v12 + 7) = 840973628;
    *(_QWORD *)v12 = *(_QWORD *)"m.dims <= 2";
    sub_100294B74(-215, &v31, "UMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 471);
  }
  v13 = *(_DWORD *)(a2 + 12);
  v15 = a3[1].i32[0];
  v14 = a3[1].i32[1];
  if (v15 >= v13)
    v16 = -1;
  else
    v16 = -16385;
  result->i32[0] = v16 & v4 | ((v14 == 1) << 14);
  v17 = (((v4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3);
  v18 = a3->i32[0];
  result[5] = (int32x2_t)(*(_QWORD *)&v11 + (int)v17 * (uint64_t)a3->i32[0]);
  if (v18 < 0
    || v15 < 0
    || v18 + v15 > v13
    || (v19 = a3->i32[1], v19 < 0)
    || v14 < 0
    || v19 + v14 > *(_DWORD *)(a2 + 8))
  {
    v31 = 0;
    v32 = 0;
    qmemcpy((void *)sub_10029430C(&v31, 124), "0 <= roi.x && 0 <= roi.width && roi.x + roi.width <= m.cols && 0 <= roi.y && 0 <= roi.height && roi.y + roi.height <= m.rows", 124);
    sub_100294B74(-215, &v31, "UMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 478);
  }
  v20 = result[4];
  if (v20)
  {
    v21 = (unsigned int *)(*(_QWORD *)&v20 + 16);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  if (a3[1].i32[0] < *(_DWORD *)(a2 + 12) || a3[1].i32[1] < *(_DWORD *)(a2 + 8))
    result->i32[0] |= 0x8000u;
  v23 = (_QWORD *)result[7];
  *v23 = **(_QWORD **)(a2 + 56);
  v23[1] = v17;
  if (result[1].i32[0] < 1 || result[1].i32[1] <= 0)
  {
    v24 = result[4];
    if (v24)
    {
      v25 = (unsigned int *)(*(_QWORD *)&v24 + 16);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = result[4];
        result[4] = 0;
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)&v28 + 8) + 32))(*(_QWORD *)(*(_QWORD *)&v28 + 8));
      }
    }
    if (v3->i32[1] >= 1)
    {
      v29 = 0;
      v30 = v3[6];
      do
        *(_DWORD *)(*(_QWORD *)&v30 + 4 * v29++) = 0;
      while (v29 < v3->i32[1]);
    }
    v3[4] = 0;
    v3[1] = 0;
    return v3;
  }
  return result;
}

void sub_10029C87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10029C8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  int v8;
  int v9;
  BOOL v10;
  uint64_t j;
  uint64_t v12;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t v29;

  *(_DWORD *)a1 = 1124007936;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 8;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  v5 = *(unsigned int *)(a2 + 4);
  if (!a3)
  {
    v28 = 0;
    v29 = 0;
    v6 = sub_10029430C(&v28, 6);
    *(_DWORD *)v6 = 1735287154;
    *(_WORD *)(v6 + 4) = 29541;
    sub_100294B74(-215, &v28, "UMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 499);
  }
  if ((int)v5 <= 0)
  {
    sub_10029C430(a1, a2);
  }
  else
  {
    for (i = 0; i != v5; ++i)
    {
      v9 = *(_DWORD *)(a3 + 8 * i);
      v8 = *(_DWORD *)(a3 + 8 * i + 4);
      v10 = v9 == 0x80000000 && v8 == 0x7FFFFFFF;
      if (!v10 && (v9 < 0 || v9 >= v8 || *(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * i) < v8))
      {
        v28 = 0;
        v29 = 0;
        qmemcpy((void *)sub_10029430C(&v28, 76), "r == Range::all() || (0 <= r.start && r.start < r.end && r.end <= m.size[i])", 76);
        sub_100294B74(-215, &v28, "UMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 503);
      }
    }
    sub_10029C430(a1, a2);
    for (j = 0; j != v5; ++j)
    {
      v12 = *(_QWORD *)(a3 + 8 * j);
      if ((_DWORD)v12 != 0x80000000 || HIDWORD(v12) != 0x7FFFFFFF)
      {
        v14 = *(_QWORD *)(a1 + 48);
        if ((_DWORD)v12)
          v15 = 0;
        else
          v15 = *(_DWORD *)(v14 + 4 * j) == HIDWORD(v12);
        if (!v15)
        {
          *(_DWORD *)(v14 + 4 * j) = HIDWORD(v12) - v12;
          *(_QWORD *)(a1 + 40) += *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * j) * (int)v12;
          *(_DWORD *)a1 |= 0x8000u;
        }
      }
    }
  }
  v16 = *(unsigned int *)(a1 + 4);
  v17 = (int)v16;
  v18 = *(_QWORD *)(a1 + 48);
  if ((int)v16 < 1)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    v19 = 0;
    while (*(int *)(v18 + 4 * v19) <= 1)
    {
      if (v16 == ++v19)
      {
        LODWORD(v19) = *(_DWORD *)(a1 + 4);
        break;
      }
    }
  }
  v20 = v18 - 4;
  while (1)
  {
    v21 = v17 - 1;
    if (v17 - 1 <= (int)v19)
      break;
    v22 = *(int *)(v20 + 4 * v17);
    v23 = *(_QWORD *)(a1 + 56) + 8 * v17;
    v24 = *(_QWORD *)(v23 - 16);
    v25 = *(_QWORD *)(v23 - 8) * v22;
    v17 = v21;
    if (v25 < v24)
    {
      v26 = 0;
      goto LABEL_37;
    }
  }
  v26 = 0x4000;
LABEL_37:
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFFBFFF | v26;
  return a1;
}

void sub_10029CB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10029CB84(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  _QWORD *v51;
  _QWORD *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  void *v74;
  char *v75;
  void *v76;
  _QWORD v77[2];
  uint64_t v78[2];
  _BYTE v79[8];
  int v80;
  _QWORD v81[32];
  _BYTE v82[256];
  _OWORD v83[2];
  _OWORD v84[14];

  sub_100298C2C(v79, &off_10044EC30);
  v4 = sub_10025E20C((int *)a2, -1);
  if (sub_100262140((_DWORD *)a2) && v4 != (*(_DWORD *)a1 & 0xFFF))
  {
    if ((((unsigned __int16)*(_DWORD *)a1 ^ (unsigned __int16)v4) & 0xFF8) != 0)
    {
      v83[0] = 0uLL;
      qmemcpy((void *)sub_10029430C(v83, 55), "channels() == ((((dtype) & ((512 - 1) << 3)) >> 3) + 1)", 55);
      sub_100294B74(-215, (uint64_t *)v83, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 820);
    }
    sub_10029D5B8(a1, (int *)a2, v4, 1.0, 0.0);
    goto LABEL_20;
  }
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_19;
  v5 = *(int *)(a1 + 4);
  v6 = *(unsigned int *)(a1 + 4);
  if ((int)v5 >= 3)
  {
    v8 = *(_QWORD *)(a1 + 48);
    v9 = (int *)(v8 + 4);
    v10 = 1;
    v11 = v6 & 0xFFFFFFFE;
    v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    v7 = v12 * v10;
    v13 = v6 - (v6 & 0xFFFFFFFE);
    if (v13)
    {
      v14 = (int *)(v8 + ((4 * v6) & 0x3FFFFFFF8));
      do
      {
        v15 = *v14++;
        v7 *= v15;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    v7 = *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8);
  }
  if (!(_DWORD)v6 || !v7)
  {
LABEL_19:
    sub_100261B50(a2);
    goto LABEL_20;
  }
  memset(v84, 0, sizeof(v84));
  memset(v83, 0, sizeof(v83));
  if ((int)v6 < 1)
  {
    v16 = 0;
    v17 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v5 - 1));
    v17 = *(_QWORD *)(a1 + 48);
    if (v6 < 8)
    {
      v18 = 0;
LABEL_27:
      v27 = v5 - v18;
      v28 = (_QWORD *)v83 + v18;
      v29 = (int *)(v17 + 4 * v18);
      do
      {
        v30 = *v29++;
        *v28++ = v30;
        --v27;
      }
      while (v27);
      goto LABEL_29;
    }
  }
  v18 = v5 & 0xFFFFFFFFFFFFFFF8;
  v19 = v17 + 16;
  v20 = v84;
  v21 = v5 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v22 = *(_OWORD *)(v19 - 16);
    *(_QWORD *)&v23 = (int)v22;
    *((_QWORD *)&v23 + 1) = SDWORD1(v22);
    v24 = v23;
    *(_QWORD *)&v23 = SDWORD2(v22);
    *((_QWORD *)&v23 + 1) = SHIDWORD(v22);
    v25 = v23;
    *(_QWORD *)&v23 = (int)*(_OWORD *)v19;
    *((_QWORD *)&v23 + 1) = (int)HIDWORD(*(_QWORD *)v19);
    v26 = v23;
    *(_QWORD *)&v23 = (int)*(_QWORD *)(v19 + 8);
    *((_QWORD *)&v23 + 1) = (int)HIDWORD(*(_OWORD *)v19);
    *(v20 - 2) = v24;
    *(v20 - 1) = v25;
    *v20 = v26;
    v20[1] = v23;
    v20 += 4;
    v19 += 32;
    v21 -= 8;
  }
  while (v21);
  if (v18 != v5)
    goto LABEL_27;
LABEL_29:
  v31 = 8 * ((int)v6 - 1);
  *(_QWORD *)((char *)v83 + v31) *= v16;
  if ((int)v5 >= 1)
  {
    v32 = *(_QWORD *)(a1 + 40);
    v33 = *(unint64_t **)(a1 + 56);
    v34 = (unint64_t *)v82;
    v35 = v6;
    do
    {
      v36 = *v33++;
      *v34++ = v32 / v36;
      v32 %= v36;
      --v35;
    }
    while (v35);
  }
  *(_QWORD *)&v82[v31] *= v16;
  sub_100258F0C((int *)a2, v6, *(uint64_t **)(a1 + 48), *(_DWORD *)a1 & 0xFFF, 0xFFFFFFFF, 0, 0);
  if (sub_10025D914((_DWORD *)a2) == 655360)
  {
    sub_10025E70C(a2, -1, (uint64_t)&v70);
    v37 = v72;
    if (!(_QWORD)v72)
    {
      v78[0] = 0;
      v78[1] = 0;
      v38 = sub_10029430C(v78, 5);
      *(_BYTE *)(v38 + 4) = 117;
      *(_DWORD *)v38 = 779383652;
      sub_100294B74(-215, v78, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 842);
    }
    if (v72 != *(_OWORD *)(a1 + 32))
    {
      v39 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      if (v39 != *(_QWORD *)(v72 + 8))
      {
        v40 = (unsigned int *)(v72 + 16);
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          v43 = v72;
          *(_QWORD *)&v72 = 0;
          (*(void (**)(_QWORD))(**(_QWORD **)(v43 + 8) + 32))(*(_QWORD *)(v43 + 8));
        }
        if (SDWORD1(v70) >= 1)
        {
          v44 = 0;
          v45 = v73;
          do
            *(_DWORD *)(v45 + 4 * v44++) = 0;
          while (v44 < SDWORD1(v70));
        }
        *(_QWORD *)&v72 = 0;
        if (v74 != &v75)
          j__free(v74);
        goto LABEL_46;
      }
      if ((uint64_t)v70 > 0)
      {
        v59 = 0;
        v60 = *((_QWORD *)&v72 + 1);
        v61 = (char *)v74;
        v62 = 8 * DWORD1(v70);
        do
        {
          v63 = *(_QWORD *)&v61[v59];
          v81[v59 / 8] = v60 / v63;
          v60 %= v63;
          v59 += 8;
        }
        while (v62 != v59);
      }
      v81[*(_DWORD *)(a1 + 4) - 1] *= v16;
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 72))(v39);
      v37 = v72;
    }
    if (v37)
    {
      v64 = (unsigned int *)(v37 + 16);
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        v67 = v72;
        *(_QWORD *)&v72 = 0;
        (*(void (**)(_QWORD))(**(_QWORD **)(v67 + 8) + 32))(*(_QWORD *)(v67 + 8));
      }
    }
    if (SDWORD1(v70) >= 1)
    {
      v68 = 0;
      v69 = v73;
      do
        *(_DWORD *)(v69 + 4 * v68++) = 0;
      while (v68 < SDWORD1(v70));
    }
    *(_QWORD *)&v72 = 0;
    v58 = v74;
    if (v74 != &v75)
      goto LABEL_63;
    goto LABEL_20;
  }
LABEL_46:
  if (sub_10025D914((_DWORD *)a2) == 0x10000)
  {
    v46 = *(_QWORD *)(a2 + 8);
    v47 = *(_OWORD *)(v46 + 16);
    v70 = *(_OWORD *)v46;
    v71 = v47;
    v72 = *(_OWORD *)(v46 + 32);
    v48 = *(unsigned int **)(v46 + 56);
    v73 = *(_QWORD *)(v46 + 48);
    v74 = v48;
    v75 = (char *)&v70 + 8;
    v76 = v77;
    v77[0] = 0;
    v77[1] = 0;
    if (v48)
    {
      v49 = v48 + 5;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 + 1, v49));
    }
    if (*(int *)(v46 + 4) > 2)
    {
      DWORD1(v70) = 0;
      sub_100256B48((uint64_t)&v70, v46);
    }
    else
    {
      v51 = *(_QWORD **)(v46 + 72);
      v52 = v76;
      *(_QWORD *)v76 = *v51;
      v52[1] = v51[1];
    }
  }
  else
  {
    sub_10025CCB8(a2, -1, (uint64_t)&v70);
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _OWORD *, _BYTE *, _QWORD, void *))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 8)
                                                                                            + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_QWORD *)(a1 + 32), v71, *(unsigned int *)(a1 + 4), v83, v82, *(_QWORD *)(a1 + 56), v76);
  if (v74)
  {
    v53 = (unsigned int *)((char *)v74 + 20);
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
      sub_100256C90((uint64_t)&v70);
  }
  v74 = 0;
  v71 = 0u;
  v72 = 0u;
  if (SDWORD1(v70) >= 1)
  {
    v56 = 0;
    v57 = v75;
    do
      *(_DWORD *)&v57[4 * v56++] = 0;
    while (v56 < SDWORD1(v70));
  }
  v58 = v76;
  if (v76 != v77)
LABEL_63:
    j__free(v58);
LABEL_20:
  if (v80)
    sub_1002989D0(v79);
}

void sub_10029D1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_10029B66C((uint64_t)va);
  sub_1001D40CC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10029D21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10029D234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_10029434C((uint64_t *)&STACK[0x290]);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10029D248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10029D260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_100006BE4((uint64_t)va);
  sub_1001D40CC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10029D27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10029D290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_1001D40CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10029D2A4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029D2D4@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17[2];
  unint64_t v18;

  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    v6 = result;
    v18 = *(_QWORD *)(result + 32);
    sub_100295438((pthread_mutex_t **)&unk_100498AE0 + v4 % 0x1F);
    v7 = (unsigned int *)(*(_QWORD *)(v6 + 32) + 20);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (!v8)
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8), *(_QWORD *)(v6 + 32), a2 | 0x3000000u);
    v9 = *(_QWORD *)(v6 + 32);
    v10 = *(_QWORD *)(v9 + 24);
    if (v10)
    {
      sub_100254CC4(a3, *(_DWORD *)(v6 + 4), *(_QWORD *)(v6 + 48), *(_WORD *)v6 & 0xFFF, v10 + *(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 56));
      *(_DWORD *)a3 = *(_DWORD *)v6;
      v11 = *(_QWORD *)(v6 + 32);
      v12 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(a3 + 56) = v11;
      v13 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(a3 + 16) = v13 + v12;
      *(_QWORD *)(a3 + 24) = v13;
      v14 = v13 + *(_QWORD *)(v11 + 40);
      *(_QWORD *)(a3 + 32) = v14;
      *(_QWORD *)(a3 + 40) = v14;
    }
    else
    {
      v15 = (unsigned int *)(v9 + 20);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!*(_QWORD *)(*(_QWORD *)(v6 + 32) + 24))
      {
        v17[0] = 0;
        v17[1] = 0;
        qmemcpy((void *)sub_10029430C(v17, 55), "u->data != 0 && \"Error mapping of UMat to host memory.\"", 55);
        sub_100294B74(-215, v17, "getMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 778);
      }
      *(_DWORD *)a3 = 1124007936;
      *(_OWORD *)(a3 + 4) = 0u;
      *(_OWORD *)(a3 + 20) = 0u;
      *(_OWORD *)(a3 + 36) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_QWORD *)(a3 + 80) = 0;
      *(_QWORD *)(a3 + 64) = a3 + 8;
      *(_QWORD *)(a3 + 72) = a3 + 80;
      *(_QWORD *)(a3 + 88) = 0;
    }
    return sub_100295440((pthread_mutex_t **)&unk_100498AE0 + v18 % 0x1F);
  }
  else
  {
    *(_DWORD *)a3 = 1124007936;
    *(_OWORD *)(a3 + 4) = 0u;
    *(_OWORD *)(a3 + 20) = 0u;
    *(_OWORD *)(a3 + 36) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 64) = a3 + 8;
    *(_QWORD *)(a3 + 72) = a3 + 80;
    *(_QWORD *)(a3 + 88) = 0;
  }
  return result;
}

void sub_10029D4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_10029434C((uint64_t *)va);
  sub_10029D528((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10029D528(_QWORD *a1)
{
  uint64_t v2;

  v2 = ((unint64_t)*a1 * (unsigned __int128)0x842108421084211uLL) >> 64;
  sub_100295440((pthread_mutex_t **)&unk_100498AE0 + *a1 - 31 * ((v2 + ((unint64_t)(*a1 - v2) >> 1)) >> 4));
  return a1;
}

uint64_t sub_10029D588(uint64_t result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = *(unsigned int *)(result + 4);
  if ((int)v2 >= 1)
  {
    v3 = *(_QWORD *)(result + 40);
    v4 = *(unint64_t **)(result + 56);
    do
    {
      v5 = *v4++;
      *a2++ = v3 / v5;
      v3 %= v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void sub_10029D5B8(uint64_t a1, int *a2, int a3, double a4, double a5)
{
  BOOL v10;
  char v11;
  int v12;
  int v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unsigned int v40;
  int v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void *v54;
  _QWORD v55[2];
  _BYTE v56[8];
  int v57;

  sub_100298C2C(v56, &off_10044EC50);
  v10 = fabs(a4 + -1.0) >= 2.22044605e-16;
  v11 = fabs(a5) >= 2.22044605e-16 || v10;
  v12 = *(_DWORD *)a1;
  if ((a3 & 0x80000000) == 0)
  {
    v13 = *(_DWORD *)a1 & 0xFF8 | a3 & 7;
    if (((v13 ^ v12) & 7) != 0)
      v14 = 1;
    else
      v14 = v11;
    if ((v14 & 1) != 0)
      goto LABEL_17;
LABEL_15:
    sub_10029CB84(a1, a2);
    goto LABEL_46;
  }
  if (!sub_100262140(a2))
  {
    v13 = v12 & 0xFFF;
    if ((v11 & 1) != 0)
      goto LABEL_17;
    goto LABEL_15;
  }
  v13 = sub_10025E20C(a2, -1);
  if (((v13 ^ v12) & 7) != 0)
    v15 = 1;
  else
    v15 = v11;
  if ((v15 & 1) == 0)
    goto LABEL_15;
LABEL_17:
  v16 = *(_OWORD *)a1;
  v48 = *(_OWORD *)a1;
  v49 = *(_QWORD *)(a1 + 16);
  v50 = *(_DWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v51 = v17;
  v52 = v18;
  v53 = (char *)&v48 + 8;
  v54 = v55;
  v55[0] = 0;
  v55[1] = 0;
  if (v17)
  {
    v19 = (unsigned int *)(v17 + 16);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v21 = *(_DWORD *)(a1 + 4);
    if (v21 <= 2)
      goto LABEL_21;
LABEL_23:
    DWORD1(v48) = 0;
    sub_10029ABBC((uint64_t)&v48, v21, 0, 0, 0);
    if (SDWORD1(v48) >= 1)
    {
      v24 = 0;
      v25 = *(_QWORD *)(a1 + 48);
      v26 = *(_QWORD *)(a1 + 56);
      v27 = v53;
      v28 = v54;
      do
      {
        *(_DWORD *)&v27[4 * v24] = *(_DWORD *)(v25 + 4 * v24);
        v28[v24] = *(_QWORD *)(v26 + 8 * v24);
        ++v24;
      }
      while (v24 < SDWORD1(v48));
    }
    goto LABEL_26;
  }
  v21 = DWORD1(v16);
  if (SDWORD1(v16) > 2)
    goto LABEL_23;
LABEL_21:
  v22 = *(_QWORD **)(a1 + 56);
  v23 = v54;
  *(_QWORD *)v54 = *v22;
  v23[1] = v22[1];
LABEL_26:
  sub_10029D2D4(a1, 0x1000000, (uint64_t)&v40);
  sub_1002044A8(&v40, (uint64_t)a2, v13, a4, a5);
  if (v44)
  {
    v29 = (unsigned int *)(v44 + 20);
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
      sub_100256C90((uint64_t)&v40);
  }
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  if (v41 >= 1)
  {
    v32 = 0;
    v33 = v45;
    do
      *(_DWORD *)(v33 + 4 * v32++) = 0;
    while (v32 < v41);
  }
  if (v46 != &v47)
    j__free(v46);
  if (v51)
  {
    v34 = (unsigned int *)(v51 + 16);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      v37 = v51;
      v51 = 0;
      (*(void (**)(_QWORD))(**(_QWORD **)(v37 + 8) + 32))(*(_QWORD *)(v37 + 8));
    }
  }
  if (SDWORD1(v48) >= 1)
  {
    v38 = 0;
    v39 = v53;
    do
      *(_DWORD *)&v39[4 * v38++] = 0;
    while (v38 < SDWORD1(v48));
  }
  v51 = 0;
  if (v54 != v55)
    j__free(v54);
LABEL_46:
  if (v57)
    sub_1002989D0(v56);
}

void sub_10029D8B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_10029D8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  sub_100006BE4((uint64_t)&a9);
  sub_10029B66C((uint64_t)&a21);
  sub_1001D40CC(v21 - 96);
  _Unwind_Resume(a1);
}

void sub_10029D8F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_10029D90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 96);
  _Unwind_Resume(a1);
}

uint64_t sub_10029D924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[4];
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BYTE v21[8];
  int v22;

  sub_100298C2C(v21, &off_10044EC70);
  if (sub_100261284(a3))
    v6 = 0x2000000;
  else
    v6 = 50331648;
  sub_10029D2D4(a1, v6, (uint64_t)v13);
  sub_100219808((uint64_t)v13, a2, a3);
  if (v17)
  {
    v7 = (unsigned int *)(v17 + 20);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      sub_100256C90((uint64_t)v13);
  }
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  if (v14 >= 1)
  {
    v10 = 0;
    v11 = v18;
    do
      *(_DWORD *)(v11 + 4 * v10++) = 0;
    while (v10 < v14);
  }
  if (v19 != &v20)
    j__free(v19);
  if (v22)
    sub_1002989D0(v21);
  return a1;
}

void sub_10029DA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100006BE4((uint64_t)&a9);
  sub_1001D40CC(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_10029DA48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_10029DA5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D40CC(v1 - 48);
  _Unwind_Resume(a1);
}

pthread_mutex_t **sub_10029DA70()
{
  sub_1002953CC(&qword_100498BD0);
  sub_1002953CC(&qword_100498BC8);
  sub_1002953CC(&qword_100498BC0);
  sub_1002953CC(&qword_100498BB8);
  sub_1002953CC(&qword_100498BB0);
  sub_1002953CC(&qword_100498BA8);
  sub_1002953CC(&qword_100498BA0);
  sub_1002953CC(&qword_100498B98);
  sub_1002953CC(&qword_100498B90);
  sub_1002953CC(&qword_100498B88);
  sub_1002953CC(&qword_100498B80);
  sub_1002953CC(&qword_100498B78);
  sub_1002953CC(&qword_100498B70);
  sub_1002953CC(&qword_100498B68);
  sub_1002953CC(&qword_100498B60);
  sub_1002953CC(&qword_100498B58);
  sub_1002953CC(&qword_100498B50);
  sub_1002953CC(&qword_100498B48);
  sub_1002953CC(&qword_100498B40);
  sub_1002953CC(&qword_100498B38);
  sub_1002953CC(&qword_100498B30);
  sub_1002953CC(&qword_100498B28);
  sub_1002953CC(&qword_100498B20);
  sub_1002953CC(&qword_100498B18);
  sub_1002953CC(&qword_100498B10);
  sub_1002953CC(&qword_100498B08);
  sub_1002953CC(&qword_100498B00);
  sub_1002953CC(&qword_100498AF8);
  sub_1002953CC(&qword_100498AF0);
  sub_1002953CC(&qword_100498AE8);
  return sub_1002953CC(&qword_100498AE0);
}

void sub_10029DB84()
{
  sub_100294490();
}

void sub_10029DDA4(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;
  pthread_mutex_t **v2;

  do
    sub_1002953CC(--v2);
  while (v2 != v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10029DDC4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t sub_10029DDCC(uint64_t result)
{
  if (!*(_BYTE *)(result + 8))
    operator new[]();
  return result;
}

double sub_10029DE2C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10044ECA0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)&result = 0x8000;
  *(_QWORD *)(a1 + 48) = 0x8000;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_10029DE58(uint64_t a1)
{
  FILE *v2;

  *(_QWORD *)a1 = off_10044ECA0;
  v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_BYTE *)(a1 + 56) = 0;
  if (!*(_BYTE *)(a1 + 8))
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return a1;
}

void sub_10029DEBC(uint64_t a1)
{
  FILE *v2;

  *(_QWORD *)a1 = off_10044ECA0;
  v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_BYTE *)(a1 + 56) = 0;
  if (!*(_BYTE *)(a1 + 8))
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  operator delete();
}

FILE *sub_10029DF30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  FILE *result;
  int v5;
  uint64_t v6;
  _QWORD *exception;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10[2];
  uint64_t v11[2];
  uint64_t v12[2];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(int *)(a1 + 52) + (uint64_t)(*(_DWORD *)(a1 + 32) - (int)v2);
  result = *(FILE **)(a1 + 40);
  if (result)
  {
    v5 = (int)v3 / *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = v2 + (int)v3 % *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 52) = v5;
    fseek(result, v5, 0);
    result = (FILE *)fread(*(void **)(a1 + 16), 1uLL, *(int *)(a1 + 48), *(FILE **)(a1 + 40));
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 24) = (char *)result + v6;
    *(_QWORD *)(a1 + 32) = v6;
    if ((uint64_t)result <= 0)
    {
      exception = __cxa_allocate_exception(0x58uLL);
      sub_1001F37D4(v12, "Unexpected end of input stream");
      sub_1001F37D4(v11, "readBlock");
      sub_1001F37D4(v10, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/bitstrm.cpp");
      sub_100294558((uint64_t)exception, -2, v12, v11, v10, 110);
      *exception = &off_10044EF18;
    }
  }
  else
  {
    v8 = v2 + v3;
    *(_QWORD *)(a1 + 32) = v8;
    *(_DWORD *)(a1 + 52) = 0;
    if (v8 >= *(_QWORD *)(a1 + 24))
    {
      v9 = __cxa_allocate_exception(0x58uLL);
      sub_1001F37D4(v12, "Unexpected end of input stream");
      sub_1001F37D4(v11, "readBlock");
      sub_1001F37D4(v10, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/bitstrm.cpp");
      sub_100294558((uint64_t)v9, -2, v12, v11, v10, 101);
      *v9 = &off_10044EF18;
    }
  }
  return result;
}

void sub_10029E0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  char v14;

  sub_10029434C(&a9);
  sub_10029434C(&a11);
  sub_10029434C(&a13);
  if ((v14 & 1) != 0)
    __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_10029E194(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    LODWORD(v2) = a2 / *(_DWORD *)(result + 48) * *(_DWORD *)(result + 48);
    a2 %= *(_DWORD *)(result + 48);
  }
  *(_QWORD *)(result + 32) = *(_QWORD *)(result + 16) + a2;
  *(_DWORD *)(result + 52) = v2;
  return result;
}

uint64_t sub_10029E1C0(_DWORD *a1)
{
  return (a1[13] + a1[8] - a1[4]);
}

FILE *sub_10029E1DC(uint64_t a1, const char **a2)
{
  const char *v4;
  FILE *result;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (*a2)
    v4 = *a2;
  else
    v4 = "";
  result = fopen(v4, "rb");
  *(_QWORD *)(a1 + 40) = result;
  if (result)
  {
    *(_BYTE *)(a1 + 56) = 1;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 52) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    return (FILE *)(*(_QWORD *)(a1 + 40) != 0);
  }
  return result;
}

uint64_t sub_10029E270(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21[2];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 0;
  v5 = *(unsigned int *)(a2 + 4);
  if ((int)v5 >= 3)
  {
    v8 = *(_QWORD *)(a2 + 64);
    v9 = (int *)(v8 + 4);
    v10 = 1;
    v11 = v5 & 0xFFFFFFFE;
    v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    v6 = v12 * v10;
    v13 = v5 - (v5 & 0xFFFFFFFE);
    if (v13)
    {
      v14 = (int *)(v8 + ((4 * v5) & 0x3FFFFFFF8));
      do
      {
        v15 = *v14++;
        v6 *= v15;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    v6 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  result = 0;
  if ((_DWORD)v5 && v6)
  {
    if ((*(_BYTE *)(a2 + 1) & 0x40) == 0)
    {
      v21[0] = 0;
      v21[1] = 0;
      v16 = sub_10029430C(v21, 18);
      *(_WORD *)(v16 + 16) = 10536;
      *(_OWORD *)v16 = *(_OWORD *)"buf.isContinuous()";
      sub_100294B74(-215, v21, "open", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/bitstrm.cpp", 134);
    }
    *(_QWORD *)(a1 + 16) = v4;
    v17 = *(int *)(a2 + 8) * (uint64_t)*(int *)(a2 + 12);
    v18 = __OFSUB__((_DWORD)v5, 1);
    v19 = v5 - 1;
    if (v19 < 0 != v18)
      v20 = 0;
    else
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v19);
    *(_BYTE *)(a1 + 8) = 0;
    result = 1;
    *(_BYTE *)(a1 + 56) = 1;
    *(_QWORD *)(a1 + 24) = v4 + v20 * v17;
    *(_QWORD *)(a1 + 32) = v4;
    *(_DWORD *)(a1 + 52) = 0;
  }
  return result;
}

void sub_10029E3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

FILE *sub_10029E3F4(uint64_t a1)
{
  FILE *result;

  result = *(FILE **)(a1 + 40);
  if (result)
  {
    result = (FILE *)fclose(result);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_BYTE *)(a1 + 56) = 0;
  if (!*(_BYTE *)(a1 + 8))
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_10029E440(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 8))
  {
    result = *(_QWORD *)(result + 16);
    if (result)
      operator delete[]();
  }
  *(_BYTE *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t sub_10029E48C(uint64_t result, int a2)
{
  *(_QWORD *)(result + 32) += a2;
  return result;
}

uint64_t sub_10029E49C(uint64_t a1)
{
  FILE *v2;

  *(_QWORD *)a1 = off_10044ECA0;
  v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_BYTE *)(a1 + 56) = 0;
  if (!*(_BYTE *)(a1 + 8))
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return a1;
}

void sub_10029E500(uint64_t a1)
{
  FILE *v2;

  *(_QWORD *)a1 = off_10044ECA0;
  v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_BYTE *)(a1 + 56) = 0;
  if (!*(_BYTE *)(a1 + 8))
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  operator delete();
}

uint64_t sub_10029E574(_QWORD *a1)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = a1[3];
  v3 = (unsigned __int8 *)a1[4];
  if ((unint64_t)v3 >= v2)
  {
    (*(void (**)(_QWORD *))(*a1 + 40))(a1);
    v2 = a1[3];
    v3 = (unsigned __int8 *)a1[4];
  }
  if ((unint64_t)v3 >= v2)
  {
    v5[0] = 0;
    v5[1] = 0;
    qmemcpy((void *)sub_10029430C(v5, 15), "current < m_end", 15);
    sub_100294B74(-215, v5, "getByte", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/bitstrm.cpp", 212);
  }
  result = *v3;
  a1[4] = v3 + 1;
  return result;
}

void sub_10029E61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10029E634(uint64_t a1, char *__dst, int a3)
{
  int v3;
  uint64_t v6;
  const void *v7;
  BOOL v8;
  int v9;

  if (a3 < 1)
    return 0;
  v3 = a3;
  LODWORD(v6) = 0;
  v7 = *(const void **)(a1 + 32);
  do
  {
    if (v3 >= *(_DWORD *)(a1 + 24) - (int)v7)
      v9 = *(_DWORD *)(a1 + 24) - (_DWORD)v7;
    else
      v9 = v3;
    if (v9 <= 0)
    {
      do
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        v7 = *(const void **)(a1 + 32);
        if (v3 >= *(_DWORD *)(a1 + 24) - (int)v7)
          v9 = *(_DWORD *)(a1 + 24) - (_DWORD)v7;
        else
          v9 = v3;
      }
      while (v9 < 1);
    }
    memcpy(__dst, v7, v9);
    v7 = (const void *)(*(_QWORD *)(a1 + 32) + v9);
    *(_QWORD *)(a1 + 32) = v7;
    __dst += v9;
    v6 = (v9 + v6);
    v8 = __OFSUB__(v3, v9);
    v3 -= v9;
  }
  while (!((v3 < 0) ^ v8 | (v3 == 0)));
  return v6;
}

uint64_t sub_10029E6F8(uint64_t a1)
{
  FILE *v2;

  *(_QWORD *)a1 = off_10044ECA0;
  v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_BYTE *)(a1 + 56) = 0;
  if (!*(_BYTE *)(a1 + 8))
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return a1;
}

void sub_10029E75C(uint64_t a1)
{
  FILE *v2;

  *(_QWORD *)a1 = off_10044ECA0;
  v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_BYTE *)(a1 + 56) = 0;
  if (!*(_BYTE *)(a1 + 8))
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  operator delete();
}

uint64_t sub_10029E7D0(_QWORD *a1)
{
  unsigned __int16 *v2;
  uint64_t result;
  int v4;

  v2 = (unsigned __int16 *)a1[4];
  if ((unint64_t)v2 + 1 >= a1[3])
  {
    v4 = sub_10029E574(a1);
    return v4 | (sub_10029E574(a1) << 8);
  }
  else
  {
    result = *v2;
    a1[4] = v2 + 1;
  }
  return result;
}

uint64_t sub_10029E828(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t result;
  int v4;
  unsigned int v5;
  unsigned int v6;

  v2 = (unsigned int *)a1[4];
  if ((unint64_t)v2 + 3 >= a1[3])
  {
    v4 = sub_10029E574(a1);
    v5 = v4 | (sub_10029E574(a1) << 8);
    v6 = v5 | (sub_10029E574(a1) << 16);
    return v6 | (sub_10029E574(a1) << 24);
  }
  else
  {
    result = *v2;
    a1[4] = v2 + 1;
  }
  return result;
}

uint64_t sub_10029E898(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t result;
  int v4;
  unsigned int v5;
  unsigned int v6;

  v2 = (unsigned int *)a1[4];
  if ((unint64_t)v2 + 3 >= a1[3])
  {
    v4 = sub_10029E574(a1);
    v5 = (sub_10029E574(a1) << 16) | (v4 << 24);
    v6 = v5 | (sub_10029E574(a1) << 8);
    return v6 | sub_10029E574(a1);
  }
  else
  {
    result = bswap32(*v2);
    a1[4] = v2 + 1;
  }
  return result;
}

double sub_10029E910(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_10044ED08;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)&result = 0x8000;
  *(_QWORD *)(a1 + 32) = 0x8000;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_10029E93C(uint64_t a1)
{
  FILE *v2;

  *(_QWORD *)a1 = off_10044ED08;
  if (*(_BYTE *)(a1 + 48))
    sub_10029EA80(a1);
  v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return a1;
}

void sub_10029E9A4(uint64_t a1)
{
  FILE *v2;

  *(_QWORD *)a1 = off_10044ED08;
  if (*(_BYTE *)(a1 + 48))
    sub_10029EA80(a1);
  v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  operator delete();
}

uint64_t sub_10029EA1C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (!result)
    operator new[]();
  *(_QWORD *)(a1 + 16) = result + *(int *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

const void *sub_10029EA80(uint64_t a1)
{
  uint64_t v2;
  const void *result;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  char *v28;

  v2 = *(_QWORD *)(a1 + 24);
  result = *(const void **)(a1 + 8);
  v4 = v2 - (_DWORD)result;
  if ((_DWORD)v2 != (_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 56);
    if (!v5)
    {
      result = (const void *)fwrite(result, 1uLL, v4, *(FILE **)(a1 + 40));
LABEL_36:
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 36) += v4;
      return result;
    }
    v7 = *(char **)v5;
    v6 = *(char **)(v5 + 8);
    v8 = (unint64_t)&v6[-*(_QWORD *)v5];
    v9 = v8 + v4;
    if (v8 >= v9)
    {
      if (v8 > v9)
        *(_QWORD *)(v5 + 8) = &v7[v9];
      goto LABEL_35;
    }
    v10 = *(_QWORD *)(v5 + 16);
    if (v10 - (uint64_t)v6 >= (unint64_t)v4)
    {
      bzero(*(void **)(v5 + 8), v4);
      *(_QWORD *)(v5 + 8) = &v6[v4];
LABEL_35:
      result = memcpy((void *)(**(_QWORD **)(a1 + 56) + v8), *(const void **)(a1 + 8), v4);
      goto LABEL_36;
    }
    if ((v9 & 0x8000000000000000) != 0)
      sub_100008F3C();
    v11 = v10 - (_QWORD)v7;
    v12 = 2 * v11;
    if (2 * v11 <= v9)
      v12 = v8 + v4;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v14 = operator new(v13);
    v15 = (char *)v14 + v13;
    v28 = (char *)v14 + v9;
    v16 = (char *)v14 + v8;
    bzero((char *)v14 + v8, v4);
    if (v6 == v7)
    {
      v14 = (char *)v14 + v8;
      goto LABEL_33;
    }
    if (v8 >= 8 && (unint64_t)(v7 - (_BYTE *)v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        v17 = 0;
        goto LABEL_25;
      }
      v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      v18 = v6 - 16;
      v19 = (char *)v14 + v6 - 16 - v7;
      v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17)
        goto LABEL_32;
      if ((v8 & 0x18) != 0)
      {
LABEL_25:
        v16 -= v8 & 0xFFFFFFFFFFFFFFF8;
        v22 = &v6[-v17 - 8];
        v23 = (char *)(v22 - v7);
        v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v25 = *(_QWORD *)v22;
          v22 -= 8;
          *(_QWORD *)&v23[(_QWORD)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_32;
        goto LABEL_30;
      }
      v16 -= v17;
      v6 -= v17;
    }
LABEL_30:
    v26 = v16 - 1;
    do
    {
      v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_32:
    v6 = v7;
LABEL_33:
    *(_QWORD *)v5 = v14;
    *(_QWORD *)(v5 + 8) = v28;
    *(_QWORD *)(v5 + 16) = v15;
    if (v6)
      operator delete(v6);
    goto LABEL_35;
  }
  return result;
}

BOOL sub_10029ECB0(uint64_t a1, const char **a2)
{
  const char *v4;
  FILE *v5;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (*a2)
    v4 = *a2;
  else
    v4 = "";
  v5 = fopen(v4, "wb");
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    *(_BYTE *)(a1 + 48) = 1;
    *(_DWORD *)(a1 + 36) = 0;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 8);
  }
  return v5 != 0;
}

uint64_t sub_10029ED30(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  *(_QWORD *)(a1 + 56) = a2;
  *(_BYTE *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 8);
  return 1;
}

FILE *sub_10029ED88(uint64_t a1)
{
  FILE *result;

  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  result = *(FILE **)(a1 + 40);
  if (result)
  {
    result = (FILE *)fclose(result);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_10029EDD4(uint64_t a1)
{
  uint64_t result;
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 8);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    operator delete[]();
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  return result;
}

uint64_t sub_10029EE14(uint64_t a1)
{
  FILE *v2;

  *(_QWORD *)a1 = off_10044ED08;
  if (*(_BYTE *)(a1 + 48))
    sub_10029EA80(a1);
  v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return a1;
}

void sub_10029EE7C(uint64_t a1)
{
  FILE *v2;

  *(_QWORD *)a1 = off_10044ED08;
  if (*(_BYTE *)(a1 + 48))
    sub_10029EA80(a1);
  v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  operator delete();
}

_QWORD *sub_10029EEF4(_QWORD *result, char *__src, int a3)
{
  int v3;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = (_QWORD *)v5[2];
      result = (_QWORD *)v5[3];
      if (v3 >= (int)v6 - (int)result)
        v7 = ((_DWORD)v6 - (_DWORD)result);
      else
        v7 = v3;
      if ((int)v7 >= 1)
      {
        memcpy(result, __src, v7);
        v6 = (_QWORD *)v5[2];
        result = (_QWORD *)(v5[3] + v7);
        v5[3] = result;
        __src += v7;
        v3 -= v7;
      }
      if (result == v6)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 40))(v5);
    }
    while (v3);
  }
  return result;
}

_QWORD *sub_10029EF80(_QWORD *result, __int16 a2)
{
  char v2;
  _QWORD *v3;
  _WORD *v4;
  _WORD *v5;
  _BYTE *v6;

  v2 = HIBYTE(a2);
  v3 = result;
  v4 = (_WORD *)result[3];
  if ((unint64_t)v4 + 1 < result[2])
  {
    *v4 = a2;
    v5 = v4 + 1;
    result[3] = v5;
    if (v5 != (_WORD *)result[2])
      return result;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 40))(v3);
  }
  result[3] = (char *)v4 + 1;
  *(_BYTE *)v4 = a2;
  v6 = (_BYTE *)result[3];
  if ((unint64_t)v6 >= result[2])
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
    v6 = (_BYTE *)v3[3];
  }
  v3[3] = v6 + 1;
  *v6 = v2;
  if (v3[3] >= v3[2])
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 40))(v3);
  return result;
}

_QWORD *sub_10029F020(_QWORD *result, int a2)
{
  _QWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = result;
  v4 = (_DWORD *)result[3];
  if ((unint64_t)v4 + 3 < result[2])
  {
    *v4 = a2;
    v5 = v4 + 1;
    result[3] = v5;
    if (v5 != (_DWORD *)result[2])
      return result;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 40))(v3);
  }
  result[3] = (char *)v4 + 1;
  *(_BYTE *)v4 = a2;
  v6 = (_BYTE *)result[3];
  if ((unint64_t)v6 >= result[2])
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
    v6 = (_BYTE *)v3[3];
  }
  v3[3] = v6 + 1;
  *v6 = BYTE1(a2);
  v7 = (_BYTE *)v3[3];
  if ((unint64_t)v7 >= v3[2])
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 40))(v3);
    v7 = (_BYTE *)v3[3];
  }
  v3[3] = v7 + 1;
  *v7 = BYTE2(a2);
  v8 = (_BYTE *)v3[3];
  if ((unint64_t)v8 >= v3[2])
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 40))(v3);
    v8 = (_BYTE *)v3[3];
  }
  v3[3] = v8 + 1;
  *v8 = HIBYTE(a2);
  if (v3[3] >= v3[2])
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 40))(v3);
  return result;
}

uint64_t sub_10029F124(uint64_t a1)
{
  FILE *v2;

  *(_QWORD *)a1 = off_10044ED08;
  if (*(_BYTE *)(a1 + 48))
    sub_10029EA80(a1);
  v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return a1;
}

void sub_10029F18C(uint64_t a1)
{
  FILE *v2;

  *(_QWORD *)a1 = off_10044ED08;
  if (*(_BYTE *)(a1 + 48))
    sub_10029EA80(a1);
  v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  operator delete();
}

_QWORD *sub_10029F204(_QWORD *result, unsigned int a2)
{
  _QWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = result;
  v4 = (_DWORD *)result[3];
  if ((unint64_t)v4 + 3 < result[2])
  {
    *v4 = bswap32(a2);
    v5 = v4 + 1;
    result[3] = v5;
    if (v5 != (_DWORD *)result[2])
      return result;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 40))(v3);
  }
  result[3] = (char *)v4 + 1;
  *(_BYTE *)v4 = HIBYTE(a2);
  v6 = (_BYTE *)result[3];
  if ((unint64_t)v6 >= result[2])
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
    v6 = (_BYTE *)v3[3];
  }
  v3[3] = v6 + 1;
  *v6 = BYTE2(a2);
  v7 = (_BYTE *)v3[3];
  if ((unint64_t)v7 >= v3[2])
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 40))(v3);
    v7 = (_BYTE *)v3[3];
  }
  v3[3] = v7 + 1;
  *v7 = BYTE1(a2);
  v8 = (_BYTE *)v3[3];
  if ((unint64_t)v8 >= v3[2])
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 40))(v3);
    v8 = (_BYTE *)v3[3];
  }
  v3[3] = v8 + 1;
  *v8 = a2;
  if (v3[3] >= v3[2])
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 40))(v3);
  return result;
}

void sub_10029F30C(uint64_t a1)
{
  sub_1002947E4(a1);
  operator delete();
}

double sub_10029F330(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10044EF40;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1124007936;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 64;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = xmmword_1003BF510;
  return result;
}

uint64_t sub_10029F388(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (uint64_t *)(a1 + 24);
  if (v3 != a2)
  {
    sub_10029434C(v3);
    v5 = *a2;
    if (*a2)
    {
      v6 = (unsigned int *)(v5 - 4);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v5 = *a2;
    }
    v8 = a2[1];
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v8;
  }
  v9 = *(_QWORD *)(a1 + 112);
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 20);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      sub_100256C90(a1 + 56);
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (*(int *)(a1 + 60) >= 1)
  {
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 120);
    do
      *(_DWORD *)(v14 + 4 * v13++) = 0;
    while (v13 < *(int *)(a1 + 60));
  }
  return 1;
}

BOOL sub_10029F444(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;

  v2 = *(unsigned __int8 *)(a1 + 152);
  if (*(_BYTE *)(a1 + 152))
  {
    v25 = 0;
    v26 = 0;
    v5 = (uint64_t *)(a1 + 24);
    if (&v25 != v5)
    {
      sub_10029434C(v5);
      v6 = v25;
      if (v25)
      {
        v7 = (unsigned int *)(v25 - 4);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        v6 = v25;
      }
      v9 = v26;
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = v9;
    }
    sub_10029434C(&v25);
    v10 = (_DWORD *)(a1 + 56);
    if (a1 + 56 != a2)
    {
      v11 = *(_QWORD *)(a2 + 56);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 20);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
      }
      v14 = *(_QWORD *)(a1 + 112);
      if (v14)
      {
        v15 = (unsigned int *)(v14 + 20);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
          sub_100256C90(a1 + 56);
      }
      *(_QWORD *)(a1 + 112) = 0;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      if (*(int *)(a1 + 60) <= 0)
      {
        *v10 = *(_DWORD *)a2;
        v21 = *(_DWORD *)(a2 + 4);
        if (v21 <= 2)
        {
LABEL_22:
          *(_DWORD *)(a1 + 60) = v21;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 8);
          v22 = *(_QWORD **)(a2 + 72);
          v23 = *(_QWORD **)(a1 + 128);
          *v23 = *v22;
          v23[1] = v22[1];
LABEL_25:
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 16);
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 48);
          return v2 != 0;
        }
      }
      else
      {
        v18 = 0;
        v19 = *(_QWORD *)(a1 + 120);
        do
        {
          *(_DWORD *)(v19 + 4 * v18++) = 0;
          v20 = *(int *)(a1 + 60);
        }
        while (v18 < v20);
        *v10 = *(_DWORD *)a2;
        if ((int)v20 <= 2)
        {
          v21 = *(_DWORD *)(a2 + 4);
          if (v21 <= 2)
            goto LABEL_22;
        }
      }
      sub_100256B48(a1 + 56, a2);
      goto LABEL_25;
    }
  }
  return v2 != 0;
}

void sub_10029F5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10029F5EC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

BOOL sub_10029F5F4(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  size_t v6;
  const char *v7;
  const char *v8;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  if (*(_QWORD *)(a2 + 8) < v4)
    return 0;
  v6 = v4;
  if (*(_QWORD *)a2)
    v7 = *(const char **)a2;
  else
    v7 = "";
  if (a1[5])
    v8 = (const char *)a1[5];
  else
    v8 = "";
  return memcmp(v7, v8, v6) == 0;
}

uint64_t sub_10029F66C(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(a1 + 20);
  *(_DWORD *)(a1 + 20) = *a2;
  return v2;
}

void sub_10029F680(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double sub_10029F688(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10044EFB0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  return result;
}

BOOL sub_10029F6AC(uint64_t a1, int a2)
{
  return a2 == 0;
}

uint64_t sub_10029F6B8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(result + 16);
  *a2 = v2;
  a2[1] = v3;
  if (v2)
  {
    v4 = (unsigned int *)(v2 - 4);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  return result;
}

uint64_t sub_10029F6DC(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v3 = a1 + 3;
  if (v3 != a2)
  {
    sub_10029434C(v3);
    v5 = *a2;
    if (*a2)
    {
      v6 = (unsigned int *)(v5 - 4);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v5 = *a2;
    }
    v8 = a2[1];
    a1[3] = v5;
    a1[4] = v8;
  }
  a1[5] = 0;
  return 1;
}

BOOL sub_10029F73C(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48))
  {
    *(_QWORD *)(a1 + 40) = a2;
    a2[1] = *a2;
    v10 = 0;
    v11 = 0;
    v4 = (uint64_t *)(a1 + 24);
    if (&v10 != v4)
    {
      sub_10029434C(v4);
      v5 = v10;
      if (v10)
      {
        v6 = (unsigned int *)(v10 - 4);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        v5 = v10;
      }
      v8 = v11;
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = v8;
    }
    sub_10029434C(&v10);
  }
  return v2 != 0;
}

void sub_10029F7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10029434C(&a9);
  _Unwind_Resume(a1);
}

void sub_10029F7E0(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_10029F7E8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  size_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8[2];
  char *__s[2];

  v1 = *(_QWORD *)(result + 64);
  if (v1)
  {
    v2 = result;
    __s[0] = 0;
    __s[1] = 0;
    sub_10029430C(__s, v1 + 25);
    v3 = __s[0];
    *(_OWORD *)__s[0] = *(_OWORD *)"Raw image encoder error: ";
    *(_OWORD *)(v3 + 9) = *(_OWORD *)" encoder error: ";
    v4 = *(_QWORD *)(v2 + 64);
    if (v4)
      memcpy(v3 + 25, *(const void **)(v2 + 56), v4);
    v8[0] = 0;
    v8[1] = 0;
    v5 = strlen(v3);
    if (v5)
    {
      v6 = v5;
      v7 = (void *)sub_10029430C(v8, v5);
      memcpy(v7, v3, v6);
    }
    sub_100294B74(-10, v8, "throwOnEror", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_base.cpp", 140);
  }
  return result;
}

void sub_10029F8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10029434C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10029F8F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_10029F900()
{
  return 0;
}

uint64_t sub_10029F908(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)a1 = off_10044EF40;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
  {
    v3 = a1 + 56;
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      sub_100256C90(v3);
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (*(int *)(a1 + 60) >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 120);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 60));
  }
  v9 = *(void **)(a1 + 128);
  if (v9 != (void *)(a1 + 136))
    j__free(v9);
  sub_10029434C((uint64_t *)(a1 + 40));
  sub_10029434C((uint64_t *)(a1 + 24));
  return a1;
}

uint64_t sub_10029F9C8(uint64_t a1)
{
  _QWORD *v2;

  sub_10029F330(a1);
  *v2 = off_10044F028;
  sub_10029DE2C((uint64_t)(v2 + 20));
  *(_QWORD *)(a1 + 160) = off_10044ED68;
  sub_10029434C((uint64_t *)(a1 + 40));
  *(_WORD *)sub_10029430C((_QWORD *)(a1 + 40), 2) = 19778;
  *(_BYTE *)(a1 + 152) = 1;
  *(_OWORD *)(a1 + 1248) = xmmword_1003BF550;
  return a1;
}

void sub_10029FA50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029F908(v1);
  _Unwind_Resume(a1);
}

void sub_10029FA64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10029E49C(v2);
  sub_10029F908(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10029FA80(_QWORD *a1)
{
  *a1 = off_10044F028;
  sub_10029E49C((uint64_t)(a1 + 20));
  return sub_10029F908((uint64_t)a1);
}

void sub_10029FAB0(_QWORD *a1)
{
  *a1 = off_10044F028;
  sub_10029E49C((uint64_t)(a1 + 20));
  sub_10029F908((uint64_t)a1);
  operator delete();
}

void sub_10029FAF4()
{
  sub_10029FB74();
}

void sub_10029FB74()
{
  operator new();
}

void sub_10029FC44()
{
  uint64_t v0;

  sub_10029F908(v0);
  operator delete();
}

uint64_t sub_10029FC88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  _WORD *v21;
  uint64_t v22;
  unsigned int v23;
  __int16 v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  uint64_t __dst[96];

  if (!*(_QWORD *)(a1 + 72))
    goto LABEL_13;
  v2 = *(unsigned int *)(a1 + 60);
  if ((int)v2 >= 3)
  {
    v4 = *(_QWORD *)(a1 + 120);
    v5 = (int *)(v4 + 4);
    v6 = 1;
    v7 = v2 & 0xFFFFFFFE;
    v8 = 1;
    do
    {
      v6 *= *(v5 - 1);
      v8 *= *v5;
      v5 += 2;
      v7 -= 2;
    }
    while (v7);
    v3 = v8 * v6;
    v9 = v2 - (v2 & 0xFFFFFFFE);
    if (v9)
    {
      v10 = (int *)(v4 + ((4 * v2) & 0x3FFFFFFF8));
      do
      {
        v11 = *v10++;
        v3 *= v11;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    v3 = *(int *)(a1 + 68) * (uint64_t)*(int *)(a1 + 64);
  }
  if ((_DWORD)v2 && v3)
  {
    if ((sub_10029E270(a1 + 160, a1 + 56) & 1) == 0)
      return 0;
  }
  else
  {
LABEL_13:
    result = (uint64_t)sub_10029E1DC(a1 + 160, (const char **)(a1 + 24));
    if (!(_DWORD)result)
      return result;
  }
  sub_10029E48C(a1 + 160, 10);
  *(_DWORD *)(a1 + 1256) = sub_10029E828((_QWORD *)(a1 + 160));
  v13 = sub_10029E828((_QWORD *)(a1 + 160));
  v14 = v13 - 36;
  if (v13 < 36)
  {
    if (v13 == 12)
    {
      *(_DWORD *)(a1 + 8) = sub_10029E7D0((_QWORD *)(a1 + 160));
      *(_DWORD *)(a1 + 12) = sub_10029E7D0((_QWORD *)(a1 + 160));
      v19 = sub_10029E828((_QWORD *)(a1 + 160));
      v20 = v19 >> 16;
      *(_DWORD *)(a1 + 1252) = v19 >> 16;
      *(_DWORD *)(a1 + 1260) = 0;
      if (*(int *)(a1 + 8) >= 1 && *(_DWORD *)(a1 + 12) && v20 <= 0x20 && ((1 << SBYTE2(v19)) & 0x101000112) != 0)
      {
        if (HIWORD(v19) <= 8u)
        {
          sub_10029E634(a1 + 160, (char *)__dst, 3 << SBYTE2(v19));
          v21 = (_WORD *)((char *)__dst + 1);
          v22 = a1 + 226;
          v23 = 1;
          do
          {
            *(_BYTE *)(v22 - 2) = *((_BYTE *)v21 - 1);
            v24 = *v21;
            v21 = (_WORD *)((char *)v21 + 3);
            *(_WORD *)(v22 - 1) = v24;
            v25 = v23++ >> v20;
            v22 += 4;
          }
          while (!v25);
        }
        goto LABEL_66;
      }
    }
LABEL_50:
    v29 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 1248) = v29 > 0;
    if (v29 < 0)
      v29 = -v29;
    *(_DWORD *)(a1 + 12) = v29;
    *(_DWORD *)(a1 + 16) = 0;
    goto LABEL_53;
  }
  *(_DWORD *)(a1 + 8) = sub_10029E828((_QWORD *)(a1 + 160));
  *(_DWORD *)(a1 + 12) = sub_10029E828((_QWORD *)(a1 + 160));
  *(_DWORD *)(a1 + 1252) = (int)sub_10029E828((_QWORD *)(a1 + 160)) >> 16;
  *(_DWORD *)(a1 + 1260) = sub_10029E828((_QWORD *)(a1 + 160));
  sub_10029E48C(a1 + 160, 12);
  v15 = sub_10029E828((_QWORD *)(a1 + 160));
  sub_10029E48C(a1 + 160, v14);
  if (*(int *)(a1 + 8) < 1)
    goto LABEL_50;
  if (!*(_DWORD *)(a1 + 12))
    goto LABEL_50;
  v16 = *(unsigned int *)(a1 + 1252);
  if (v16 > 0x20)
    goto LABEL_50;
  if (((1 << v16) & 0x101000112) != 0)
  {
    v17 = *(_DWORD *)(a1 + 1260);
    if (v17)
    {
      HIDWORD(v18) = *(_DWORD *)(a1 + 1252);
      LODWORD(v18) = v16 - 4;
      switch((v18 >> 2))
      {
        case 0u:
          if (v17 != 2)
            goto LABEL_50;
          goto LABEL_46;
        case 1u:
          if (v17 == 1)
            goto LABEL_46;
          goto LABEL_50;
        case 3u:
        case 7u:
          goto LABEL_37;
        default:
          goto LABEL_50;
      }
    }
    if (v16 > 8)
    {
      if ((_DWORD)v16 != 16)
        goto LABEL_58;
      goto LABEL_44;
    }
LABEL_46:
    if (v15 >= 0x101)
    {
      sub_1001F37D4(__dst, "clrused >= 0 && clrused <= 256");
      sub_100294B74(-215, __dst, "readHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_bmp.cpp", 121);
    }
    bzero((void *)(a1 + 224), 0x400uLL);
    if (!v15)
      v15 = 1 << v16;
    sub_10029E634(a1 + 160, (char *)(a1 + 224), 4 * v15);
    if (sub_1002B0F28((unsigned __int8 *)(a1 + 224), *(_DWORD *)(a1 + 1252)))
      goto LABEL_58;
LABEL_66:
    v33 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 1248) = v33 > 0;
    if (v33 < 0)
      v33 = -v33;
    *(_DWORD *)(a1 + 12) = v33;
    *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  if (v16 != 16)
    goto LABEL_50;
  v17 = *(_DWORD *)(a1 + 1260);
LABEL_37:
  if (v17 && v17 != 3)
    goto LABEL_50;
  if ((_DWORD)v16 != 16)
  {
LABEL_58:
    v30 = 1;
    goto LABEL_59;
  }
  if (!v17
    || (v26 = sub_10029E828((_QWORD *)(a1 + 160)),
        v27 = sub_10029E828((_QWORD *)(a1 + 160)),
        v28 = sub_10029E828((_QWORD *)(a1 + 160)),
        v28 == 31)
    && v27 == 992
    && v26 == 31744)
  {
LABEL_44:
    *(_DWORD *)(a1 + 1252) = 15;
    goto LABEL_58;
  }
  v30 = v28 == 31 && v27 == 2016 && v26 == 63488;
LABEL_59:
  if (*(_DWORD *)(a1 + 1252) == 32)
    v31 = 24;
  else
    v31 = 16;
  v32 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 1248) = v32 > 0;
  if (v32 < 0)
    v32 = -v32;
  *(_DWORD *)(a1 + 12) = v32;
  *(_DWORD *)(a1 + 16) = v31;
  if (v30)
    return 1;
LABEL_53:
  *(_DWORD *)(a1 + 1256) = -1;
  *(_QWORD *)(a1 + 8) = -1;
  sub_10029E3F4(a1 + 160);
  return 0;
}

void sub_1002A0128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A01A0(uint64_t a1, int *a2)
{
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  _BOOL8 v20;
  uint64_t result;
  uint16x8_t *v22;
  int *v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  int v64[2];
  unsigned int *v65;
  unsigned int *v66;
  int v67;
  _BYTE v68[2];
  unint64_t v69;
  int v70;
  uint64_t v71[2];
  int *v72;
  unint64_t v73;
  _BYTE v74[1032];
  uint16x8_t *v75;
  unint64_t v76;
  _BYTE v77[1032];
  unsigned __int8 __c[16];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;

  v4 = (int *)*((_QWORD *)a2 + 2);
  v5 = sub_1002AF38C(*((_QWORD *)a2 + 10));
  v6 = *a2;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 1252);
  if (v8 == 15)
    v8 = 16;
  v9 = v8 * v7;
  v11 = v9 + 7;
  v10 = v9 < -7;
  v12 = v9 + 14;
  if (v10)
    v13 = v12;
  else
    v13 = v11;
  v92 = 0u;
  v93 = 0u;
  v14 = v6 & 0xFF8;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  *(_OWORD *)__c = 0u;
  v79 = 0u;
  if ((v6 & 0xFF8) != 0)
    v15 = 3;
  else
    v15 = 1;
  if ((*(_DWORD *)(a1 + 1256) & 0x80000000) != 0)
    return 0;
  v16 = v5;
  if (!sub_10029DDC4(a1 + 160))
    return 0;
  v67 = v16;
  v17 = ((v13 >> 3) + 3) & 0xFFFFFFFC;
  if (*(_DWORD *)(a1 + 1248) == 1)
  {
    v4 = (int *)((char *)v4 + (*(int *)(a1 + 12) - 1) * v67);
    v67 = -v67;
  }
  v70 = 0;
  v72 = (int *)v74;
  v73 = 1032;
  v75 = (uint16x8_t *)v77;
  v76 = (int)(v17 + 32);
  if (v17 + 32 >= 0x409)
    operator new[]();
  if (!v14)
  {
    v18 = *(_DWORD *)(a1 + 1252);
    if (v18 <= 8)
      sub_1002B0C84((const char *)(a1 + 224), (unint64_t)__c, 1 << v18);
    v19 = 3 * *(int *)(a1 + 8) + 32;
    if (v73 >= v19)
    {
      v73 = 3 * *(int *)(a1 + 8) + 32;
    }
    else
    {
      if (v72 != (int *)v74)
      {
        if (v72)
          operator delete[]();
        v72 = (int *)v74;
      }
      v73 = v19;
      if (v19 >= 0x409)
        operator new[]();
    }
  }
  v22 = v75;
  sub_10029E194(a1 + 160, *(_DWORD *)(a1 + 1256));
  switch(*(_DWORD *)(a1 + 1252))
  {
    case 1:
      v70 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        do
        {
          sub_10029E634(a1 + 160, v22->i8, v17);
          if (v14)
            v23 = v4;
          else
            v23 = v72;
          sub_1002B16B4(v23, v22->i8, *(_DWORD *)(a1 + 8), a1 + 224);
          if (!v14)
            sub_1002AF428((uint64_t)v72, 0, (unint64_t)v4, 0, *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header, 0);
          ++v70;
          v4 = (int *)((char *)v4 + v67);
        }
        while (v70 < *(_DWORD *)(a1 + 12));
      }
      goto LABEL_74;
    case 4:
      v63 = v7 * v15;
      v25 = *(_DWORD *)(a1 + 1260);
      if (v25 == 2)
      {
        v65 = (unsigned int *)(a1 + 224);
        v69 = (unint64_t)v4 + v63;
        v70 = 0;
        do
        {
          while (1)
          {
            while (1)
            {
              v32 = sub_10029E7D0((_QWORD *)(a1 + 160));
              if (!(_BYTE)v32)
                break;
              v33 = *(_DWORD *)(a1 + 224 + 4 * ((v32 >> 8) & 0xF));
              LODWORD(v71[0]) = *(_DWORD *)(a1 + 224 + 4 * ((int)v32 >> 12));
              HIDWORD(v71[0]) = v33;
              v68[0] = __c[(int)v32 >> 12];
              v68[1] = *(_BYTE *)((unint64_t)__c | (v32 >> 8) & 0xF);
              v34 = (unint64_t)v4 + v32 * v15;
              if (v34 > v69)
                goto LABEL_110;
              v35 = 0;
              if (v14)
              {
                do
                {
                  v36 = (char *)v71 + 4 * v35;
                  *(_BYTE *)v4 = *v36;
                  *((_BYTE *)v4 + 1) = v36[1];
                  *((_BYTE *)v4 + 2) = v36[2];
                  v35 ^= 1uLL;
                  v4 = (int *)((char *)v4 + v15);
                }
                while ((unint64_t)v4 < v34);
              }
              else
              {
                do
                {
                  *(_BYTE *)v4 = v68[v35];
                  v35 ^= 1uLL;
                  v4 = (int *)((char *)v4 + v15);
                }
                while ((unint64_t)v4 < v34);
              }
            }
            v37 = (int)v32 >> 8;
            v20 = (int)v32 < 768;
            if ((int)v32 < 768)
              break;
            if ((unint64_t)v4 + (v37 * v15) > v69)
              goto LABEL_75;
            if (v76 <= ((((v37 + 1) >> 1) + 1) & 0x7FFFFFFE))
            {
              sub_1001F37D4(v71, "(size_t)sz < _src.size()");
              sub_100294B74(-215, v71, "readData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_bmp.cpp", 296);
            }
            sub_10029E634(a1 + 160, v22->i8, (((v37 + 1) >> 1) + 1) & 0x7FFFFFFE);
            if (v14)
              v4 = (int *)sub_1002B15B8((uint64_t)v4, (unsigned __int8 *)v22, v37, (uint64_t)v65);
            else
              v4 = (int *)sub_1002B1648(v4, (unsigned __int8 *)v22, v37, (uint64_t)__c);
          }
          if (v37 == 2)
          {
            v38 = sub_10029E574((_QWORD *)(a1 + 160));
            sub_10029E574((_QWORD *)(a1 + 160));
            v39 = v38 * v15;
          }
          else
          {
            v39 = v69 - (_DWORD)v4;
          }
          v40 = *(_DWORD *)(a1 + 12);
          if (v14)
          {
            v62 = v62 & 0xFFFFFFFF00000000 | *v65;
            v41 = sub_1002B0F9C(v4, &v69, v67, v63, &v70, v40, v39, v62);
          }
          else
          {
            v41 = sub_1002B1470((unint64_t)v4, &v69, v67, v63, &v70, v40, v39, __c[0]);
          }
          v4 = (int *)v41;
        }
        while (v70 < *(_DWORD *)(a1 + 12));
        goto LABEL_75;
      }
      if (v25)
        goto LABEL_110;
      v70 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        v20 = 1;
        do
        {
          sub_10029E634(a1 + 160, v22->i8, v17);
          v26 = *(_DWORD *)(a1 + 8);
          if (v14)
            sub_1002B15B8((uint64_t)v4, (unsigned __int8 *)v22, v26, a1 + 224);
          else
            sub_1002B1648(v4, (unsigned __int8 *)v22, v26, (uint64_t)__c);
          ++v70;
          v4 = (int *)((char *)v4 + v67);
        }
        while (v70 < *(_DWORD *)(a1 + 12));
        goto LABEL_75;
      }
      goto LABEL_74;
    case 8:
      *(_QWORD *)v64 = v7 * (uint64_t)(int)v15;
      v28 = *(_DWORD *)(a1 + 1260);
      if (v28 == 1)
      {
        v42 = 0;
        v69 = (unint64_t)v4 + *(_QWORD *)v64;
        v70 = 0;
        v66 = (unsigned int *)(a1 + 224);
        do
        {
          while (1)
          {
            while (1)
            {
              v44 = sub_10029E7D0((_QWORD *)(a1 + 160));
              v45 = v44;
              v46 = v44 >> 8;
              if (!(_BYTE)v44)
                break;
              v48 = v44 * v15;
              v20 = (unint64_t)v4 + v48 <= v69;
              if ((unint64_t)v4 + v48 <= v69)
              {
                v49 = v70;
                v50 = *(_DWORD *)(a1 + 12);
                if (v14)
                {
                  v51 = v62 & 0xFFFFFFFF00000000 | *(unsigned int *)(a1 + 4 * v46 + 224);
                  v4 = (int *)sub_1002B0F9C(v4, &v69, v67, v64[0], &v70, v50, v48, v51);
                  v62 = v51;
                }
                else
                {
                  v4 = (int *)sub_1002B1470((unint64_t)v4, &v69, v67, v64[0], &v70, v50, v48, __c[v46]);
                }
                v42 = v70 - v49;
                if (v70 < *(_DWORD *)(a1 + 12))
                  continue;
              }
              goto LABEL_75;
            }
            v20 = v44 < 768;
            if (v44 < 768)
              break;
            if ((unint64_t)v4 + (v46 * v15) > v69)
              goto LABEL_75;
            v47 = v70;
            if (v76 <= ((v46 + 1) & 0xFFFFFFFE))
            {
              sub_1001F37D4(v71, "(size_t)sz < _src.size()");
              sub_100294B74(-215, v71, "readData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_bmp.cpp", 390);
            }
            sub_10029E634(a1 + 160, v22->i8, (v46 + 1) & 0xFFFFFFFE);
            if (v14)
              v43 = sub_1002B153C((uint64_t)v4, (unsigned __int8 *)v22, v46, (uint64_t)v66);
            else
              v43 = (uint64_t)sub_1002B158C(v4, (unsigned __int8 *)v22, v46, (uint64_t)__c);
            v4 = (int *)v43;
            v42 = v70 - v47;
          }
          v52 = v69 - (_DWORD)v4;
          v53 = v70;
          v54 = *(_DWORD *)(a1 + 12);
          if (v44 > 0xFF || !v42 || v64[0] > v52)
          {
            if (v46 == 2)
            {
              v55 = v67;
              v56 = sub_10029E574((_QWORD *)(a1 + 160));
              v57 = sub_10029E574((_QWORD *)(a1 + 160));
              v52 = v56 * v15;
              v53 = v70;
              v54 = *(_DWORD *)(a1 + 12);
            }
            else
            {
              v57 = v54 - v70;
              v55 = v67;
            }
            v58 = v57 * v64[0];
            if (v45 <= 0xFF)
              v58 = 0;
            if (v53 >= v54)
              break;
            v59 = v58 + v52;
            if (v14)
            {
              v61 = v61 & 0xFFFFFFFF00000000 | *v66;
              v60 = sub_1002B0F9C(v4, &v69, v55, v64[0], &v70, v54, v59, v61);
            }
            else
            {
              v60 = sub_1002B1470((unint64_t)v4, &v69, v55, v64[0], &v70, v54, v59, __c[0]);
            }
            v4 = (int *)v60;
            v53 = v70;
            v54 = *(_DWORD *)(a1 + 12);
            if (v70 >= v54)
              break;
          }
          v42 = 0;
        }
        while (v53 < v54);
      }
      else if (v28)
      {
LABEL_110:
        v20 = 0;
      }
      else
      {
        v70 = 0;
        if (*(int *)(a1 + 12) < 1)
        {
LABEL_74:
          v20 = 1;
        }
        else
        {
          v20 = 1;
          do
          {
            sub_10029E634(a1 + 160, v22->i8, v17);
            v29 = *(_DWORD *)(a1 + 8);
            if (v14)
              sub_1002B153C((uint64_t)v4, (unsigned __int8 *)v22, v29, a1 + 224);
            else
              sub_1002B158C(v4, (unsigned __int8 *)v22, v29, (uint64_t)__c);
            ++v70;
            v4 = (int *)((char *)v4 + v67);
          }
          while (v70 < *(_DWORD *)(a1 + 12));
        }
      }
LABEL_75:
      if (v72 != (int *)v74)
      {
        if (v72)
          operator delete[]();
        v72 = (int *)v74;
      }
      if (v75 != (uint16x8_t *)v77 && v75)
        operator delete[]();
      return result;
    case 0xF:
      v70 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        do
        {
          sub_10029E634(a1 + 160, v22->i8, v17);
          v30 = *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header;
          if (v14)
            sub_1002B041C((unint64_t)v22, 0, (char *)v4, 0, v30);
          else
            sub_1002AFDB0(v22, 0, (unint64_t)v4, 0, v30);
          ++v70;
          v4 = (int *)((char *)v4 + v67);
        }
        while (v70 < *(_DWORD *)(a1 + 12));
      }
      goto LABEL_74;
    case 0x10:
      v70 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        do
        {
          sub_10029E634(a1 + 160, v22->i8, v17);
          v24 = *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header;
          if (v14)
            sub_1002B05A4((unint64_t)v22, 0, (char *)v4, 0, v24);
          else
            sub_1002B00E4(v22, 0, (unint64_t)v4, 0, v24);
          ++v70;
          v4 = (int *)((char *)v4 + v67);
        }
        while (v70 < *(_DWORD *)(a1 + 12));
      }
      goto LABEL_74;
    case 0x18:
      v70 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        do
        {
          sub_10029E634(a1 + 160, v22->i8, v17);
          v27 = *(unsigned int *)(a1 + 8);
          if (v14)
            memcpy(v4, v22, 3 * (int)v27);
          else
            sub_1002AF428((uint64_t)v22, 0, (unint64_t)v4, 0, v27 | (unint64_t)&_mh_execute_header, 0);
          ++v70;
          v4 = (int *)((char *)v4 + v67);
        }
        while (v70 < *(_DWORD *)(a1 + 12));
      }
      goto LABEL_74;
    case 0x20:
      v70 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        if (v14)
        {
          do
          {
            sub_10029E634(a1 + 160, v22->i8, v17);
            v31 = (*a2 >> 3) & 0x1FF;
            if (v31 == 3)
            {
              memcpy(v4, v22, 4 * *(int *)(a1 + 8));
            }
            else if (v31 == 2)
            {
              sub_1002AF964((uint64_t)v22, 0, (char *)v4, 0, *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header, 0);
            }
            ++v70;
            v4 = (int *)((char *)v4 + v67);
          }
          while (v70 < *(_DWORD *)(a1 + 12));
        }
        else
        {
          do
          {
            sub_10029E634(a1 + 160, v22->i8, v17);
            sub_1002AF710((uint64_t)v22, 0, (unint64_t)v4, 0, *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header, 0);
            ++v70;
            v4 = (int *)((char *)v4 + v67);
          }
          while (v70 < *(_DWORD *)(a1 + 12));
        }
      }
      goto LABEL_74;
    default:
      sub_1001F37D4(v71, "Invalid/unsupported mode");
      sub_1002A0E94(v71);
  }
}

void sub_1002A0D5C()
{
  __break(1u);
}

void sub_1002A0E18()
{
  __cxa_end_catch();
  JUMPOUT(0x1002A0E20);
}

void sub_1002A0E94(uint64_t *a1)
{
  sub_100294B74(-2, a1, "readData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_bmp.cpp", 492);
}

uint64_t sub_1002A0EC0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_10029F688(a1);
  *v2 = off_10044F098;
  v3 = v2 + 1;
  sub_10029434C(v2 + 1);
  qmemcpy((void *)sub_10029430C(v3, 28), "Windows bitmap (*.bmp;*.dib)", 28);
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

void sub_1002A0F30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  *v1 = off_10044EFB0;
  sub_10029434C(v1 + 7);
  sub_10029434C(v1 + 3);
  sub_10029434C(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002A0F70(uint64_t *a1)
{
  *a1 = (uint64_t)off_10044EFB0;
  sub_10029434C(a1 + 7);
  sub_10029434C(a1 + 3);
  sub_10029434C(a1 + 1);
  return a1;
}

void sub_1002A0FC0(uint64_t *a1)
{
  *a1 = (uint64_t)off_10044EFB0;
  sub_10029434C(a1 + 7);
  sub_10029434C(a1 + 3);
  sub_10029434C(a1 + 1);
  operator delete();
}

void sub_1002A1020()
{
  operator new();
}

void sub_1002A10C8()
{
  operator delete();
}

uint64_t sub_1002A10EC(uint64_t a1, unsigned int *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  unint64_t v25;
  __int128 v26;
  char *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  int v33;
  double v34;
  int8x16_t v35;
  uint64_t v36;
  signed int v38;
  int v39;
  __int16 v40;
  _QWORD v41[8];
  int v42;
  char v43;
  int8x8_t __src[128];

  v4 = a2[3];
  v5 = a2[2];
  v6 = *a2;
  v43 = 0;
  v42 = 0;
  sub_10029E910((uint64_t)v41);
  v41[0] = off_10044EE48;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    if ((sub_10029ED30((uint64_t)v41, v7) & 1) != 0)
      goto LABEL_3;
LABEL_13:
    v21 = 0;
    goto LABEL_39;
  }
  if (!sub_10029ECB0((uint64_t)v41, (const char **)(a1 + 24)))
    goto LABEL_13;
LABEL_3:
  v8 = (v6 >> 3) & 0x1FF;
  v39 = v8;
  v40 = v8 + 1;
  v9 = (v8 + 1) * v4;
  if (v8)
    v10 = 54;
  else
    v10 = 1078;
  v38 = (v9 + 3) & 0xFFFFFFFC;
  v11 = v10 + v5 * (uint64_t)v38;
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
  {
    v13 = (v11 + 271) & 0xFFFFFFFFFFFFFF00;
    v14 = *(_BYTE **)v12;
    if (*(_QWORD *)(v12 + 16) - *(_QWORD *)v12 < v13)
    {
      if (v11 + 271 < 0)
        sub_100008F3C();
      v15 = *(_BYTE **)(v12 + 8);
      v16 = operator new((v11 + 271) & 0xFFFFFFFFFFFFFF00);
      v17 = v15 - v14;
      v18 = &v16[v15 - v14];
      v19 = v18;
      if (v15 == v14)
        goto LABEL_29;
      if (v17 < 8)
      {
        v20 = &v16[v15 - v14];
        goto LABEL_26;
      }
      v20 = &v16[v15 - v14];
      if ((unint64_t)(v14 - v16) >= 0x20)
      {
        if (v17 < 0x20)
        {
          v22 = 0;
          goto LABEL_21;
        }
        v22 = v17 & 0xFFFFFFFFFFFFFFE0;
        v23 = (__int128 *)(v15 - 16);
        v24 = &v16[v15 - 16 - v14];
        v25 = v17 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v26 = *v23;
          *(v24 - 1) = *(v23 - 1);
          *v24 = v26;
          v24 -= 2;
          v23 -= 2;
          v25 -= 32;
        }
        while (v25);
        if (v17 == v22)
          goto LABEL_28;
        if ((v17 & 0x18) != 0)
        {
LABEL_21:
          v20 = &v18[-(v17 & 0xFFFFFFFFFFFFFFF8)];
          v27 = &v15[-v22 - 8];
          v28 = v27 - v14;
          v29 = v22 - (v17 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v30 = *(_QWORD *)v27;
            v27 -= 8;
            *(_QWORD *)&v16[v28] = v30;
            v28 -= 8;
            v29 += 8;
          }
          while (v29);
          v15 -= v17 & 0xFFFFFFFFFFFFFFF8;
          if (v17 == (v17 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_28;
          goto LABEL_26;
        }
        v20 = &v18[-v22];
        v15 -= v22;
      }
LABEL_26:
      v31 = v20 - 1;
      do
      {
        v32 = *--v15;
        *v31-- = v32;
      }
      while (v15 != v14);
LABEL_28:
      v19 = v16;
LABEL_29:
      *(_QWORD *)v12 = v19;
      *(_QWORD *)(v12 + 8) = v18;
      *(_QWORD *)(v12 + 16) = &v16[v13];
      if (v14)
        operator delete(v14);
    }
  }
  sub_10029EEF4(v41, "BM", 2);
  v33 = sub_1002AF38C(v11);
  sub_10029F020(v41, v33);
  sub_10029F020(v41, 0);
  sub_10029F020(v41, v10);
  sub_10029F020(v41, 40);
  sub_10029F020(v41, v4);
  sub_10029F020(v41, v5);
  sub_10029EF80(v41, 1);
  sub_10029EF80(v41, 8 * v40);
  sub_10029F020(v41, 0);
  sub_10029F020(v41, 0);
  sub_10029F020(v41, 0);
  sub_10029F020(v41, 0);
  sub_10029F020(v41, 0);
  sub_10029F020(v41, 0);
  if (!v39)
  {
    sub_1002B0E68(__src, 8, 0, v34, v35);
    sub_10029EEF4(v41, (char *)__src, 1024);
  }
  if (v5 >= 1)
  {
    v36 = (v5 - 1);
    if (v38 <= v9)
    {
      do
        sub_10029EEF4(v41, (char *)(*((_QWORD *)a2 + 2) + **((_QWORD **)a2 + 9) * v36--), v9);
      while (v36 != -1);
    }
    else
    {
      do
      {
        sub_10029EEF4(v41, (char *)(*((_QWORD *)a2 + 2) + **((_QWORD **)a2 + 9) * v36), v9);
        sub_10029EEF4(v41, (char *)&v42, v38 - v9);
        --v36;
      }
      while (v36 != -1);
    }
  }
  sub_10029ED88((uint64_t)v41);
  v21 = 1;
LABEL_39:
  sub_10029EE14((uint64_t)v41);
  return v21;
}

void sub_1002A14A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10029EE14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002A14C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10029EE14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002A14D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10029EE14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002A14E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10029EE14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002A1500()
{
  operator delete();
}

uint64_t sub_1002A1514(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_1002A1554()
{
  operator delete();
}

uint64_t sub_1002A1568(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002A15A4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_10029F330(a1);
  *v2 = off_10044F1A0;
  v2[20] = 0;
  v3 = v2 + 20;
  v2[21] = 0;
  v4 = v2 + 5;
  sub_10029434C(v2 + 5);
  v5 = sub_10029430C(v4, 6);
  *(_WORD *)(v5 + 4) = 17730;
  *(_DWORD *)v5 = 1196572451;
  sub_10029434C(v3);
  v6 = sub_10029430C(v3, 10);
  *(_WORD *)(v6 + 8) = 17731;
  *(_QWORD *)v6 = *(_QWORD *)"#?RADIANCE";
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 16) = 21;
  return a1;
}

void sub_1002A164C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_10029434C(v2);
  sub_10029F908(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A1670(_QWORD *a1)
{
  *a1 = off_10044F1A0;
  sub_10029434C(a1 + 20);
  return sub_10029F908((uint64_t)a1);
}

void sub_1002A16A4(_QWORD *a1)
{
  *a1 = off_10044F1A0;
  sub_10029434C(a1 + 20);
  sub_10029F908((uint64_t)a1);
  operator delete();
}

uint64_t sub_1002A16EC(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 48) <= *(_QWORD *)(a1 + 168))
    return *(_QWORD *)(a1 + 168);
  else
    return *(_QWORD *)(a1 + 48);
}

FILE *sub_1002A1700(uint64_t a1)
{
  const char *v2;
  FILE *result;

  if (*(_QWORD *)(a1 + 24))
    v2 = *(const char **)(a1 + 24);
  else
    v2 = "";
  result = fopen(v2, "rb");
  *(_QWORD *)(a1 + 176) = result;
  if (result)
  {
    sub_1002AE348(result, a1 + 8, a1 + 12, 0);
    if (*(int *)(a1 + 8) < 1 || *(int *)(a1 + 12) <= 0)
    {
      fclose(*(FILE **)(a1 + 176));
      result = 0;
      *(_QWORD *)(a1 + 176) = 0;
    }
    else
    {
      return (FILE *)1;
    }
  }
  return result;
}

uint64_t sub_1002A1790(uint64_t a1, _DWORD *a2)
{
  FILE *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  _OWORD v14[4];
  char *v15;
  void *v16;
  _QWORD v17[2];
  int32x2_t __src;
  _DWORD *v19;
  uint64_t v20;

  LODWORD(v14[0]) = 1124007936;
  memset((char *)v14 + 4, 0, 48);
  v14[3] = 0u;
  v15 = (char *)v14 + 8;
  v16 = v17;
  v17[0] = 0;
  v17[1] = 0;
  __src = vrev64_s32(*(int32x2_t *)(a1 + 8));
  sub_100255F30((char *)v14, 2, (uint64_t *)&__src, 21);
  v4 = *(FILE **)(a1 + 176);
  if (v4)
    goto LABEL_4;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
  {
    v4 = *(FILE **)(a1 + 176);
LABEL_4:
    sub_1002AEB6C(v4, *(float **)&v14[1], HIDWORD(v14[0]), SDWORD2(v14[0]));
    fclose(*(FILE **)(a1 + 176));
    *(_QWORD *)(a1 + 176) = 0;
    v5 = *a2 & 0xFFF;
    if (((LODWORD(v14[0]) ^ *a2) & 7) != 0)
    {
      __src.i32[0] = 33619968;
      v19 = a2;
      v20 = 0;
      sub_1002044A8((unsigned int *)v14, (uint64_t)&__src, v5, 255.0, 0.0);
    }
    else
    {
      __src.i32[0] = 33619968;
      v19 = a2;
      v20 = 0;
      sub_1002044A8((unsigned int *)v14, (uint64_t)&__src, v5, 1.0, 0.0);
    }
    v6 = 1;
    v7 = *((_QWORD *)&v14[3] + 1);
    if (!*((_QWORD *)&v14[3] + 1))
      goto LABEL_12;
    goto LABEL_8;
  }
  v6 = 0;
  v7 = *((_QWORD *)&v14[3] + 1);
  if (!*((_QWORD *)&v14[3] + 1))
    goto LABEL_12;
LABEL_8:
  v8 = (unsigned int *)(v7 + 20);
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
    sub_100256C90((uint64_t)v14);
LABEL_12:
  *((_QWORD *)&v14[3] + 1) = 0;
  memset(&v14[1], 0, 32);
  if (SDWORD1(v14[0]) >= 1)
  {
    v11 = 0;
    v12 = v15;
    do
      *(_DWORD *)&v12[4 * v11++] = 0;
    while (v11 < SDWORD1(v14[0]));
  }
  if (v16 != v17)
    j__free(v16);
  return v6;
}

void sub_1002A1958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002A196C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002A1980(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_100008C88(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1002A199C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100006BE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1002A19B0(_QWORD *a1, _QWORD *a2)
{
  size_t v2;
  char *v4;
  char *v5;
  char *v6;
  _BOOL8 result;

  v2 = a1[6];
  result = 0;
  if (a2[1] >= v2)
  {
    v4 = *a2 ? (char *)*a2 : "";
    v5 = a1[5] ? (char *)a1[5] : "";
    if (!memcmp(v4, v5, v2))
      return 1;
    v6 = a1[20] ? (char *)a1[20] : "";
    if (!memcmp(v4, v6, a1[21]))
      return 1;
  }
  return result;
}

void sub_1002A1A40()
{
  operator new();
}

void sub_1002A1AE8()
{
  operator delete();
}

uint64_t sub_1002A1B0C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_10029F688(a1);
  *v2 = off_10044F210;
  v3 = v2 + 1;
  sub_10029434C(v2 + 1);
  qmemcpy((void *)sub_10029430C(v3, 26), "Radiance HDR (*.hdr;*.pic)", 26);
  return a1;
}

void sub_1002A1B74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  *v1 = off_10044EFB0;
  sub_10029434C(v1 + 7);
  sub_10029434C(v1 + 3);
  sub_10029434C(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002A1BB4(uint64_t *a1)
{
  *a1 = (uint64_t)off_10044EFB0;
  sub_10029434C(a1 + 7);
  sub_10029434C(a1 + 3);
  sub_10029434C(a1 + 1);
  return a1;
}

void sub_1002A1C04(uint64_t *a1)
{
  *a1 = (uint64_t)off_10044EFB0;
  sub_10029434C(a1 + 7);
  sub_10029434C(a1 + 3);
  sub_10029434C(a1 + 1);
  operator delete();
}

BOOL sub_1002A1C64(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  const char *v5;
  FILE *v6;
  FILE *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  int v14;
  _OWORD *v15;
  uint64_t v16;
  void **v17[3];
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD v21[4];
  char *v22;
  void *v23;
  _QWORD v24[2];

  LODWORD(v21[0]) = 1124007936;
  memset((char *)v21 + 4, 0, 48);
  v21[3] = 0u;
  v22 = (char *)v21 + 8;
  v23 = v24;
  v24[0] = 0;
  v24[1] = 0;
  if (((*a2 >> 3) & 0x1FD | 2) != 2)
  {
    v18 = 0;
    v19 = 0;
    qmemcpy((void *)sub_10029430C(&v18, 54), "input_img.channels() == 3 || input_img.channels() == 1", 54);
    sub_100294B74(-215, (uint64_t *)&v18, "write", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_hdr.cpp", 128);
  }
  if ((*a2 & 0xFF8) != 0)
  {
    LODWORD(v18) = 33619968;
    v19 = v21;
    v20 = 0;
    sub_1002181EC((uint64_t)a2, (uint64_t)&v18);
    if ((v21[0] & 7) == 5)
      goto LABEL_8;
    goto LABEL_7;
  }
  sub_1002A211C(&v18, 3uLL, (uint64_t)a2);
  v17[1] = (void **)&v18;
  v17[2] = 0;
  LODWORD(v17[0]) = 17104896;
  v14 = 33619968;
  v15 = v21;
  v16 = 0;
  sub_1001F9B88((uint64_t)v17, (uint64_t)&v14);
  v17[0] = (void **)&v18;
  sub_100216D7C(v17);
  if ((v21[0] & 7) != 5)
  {
LABEL_7:
    LODWORD(v18) = 33619968;
    v19 = v21;
    v20 = 0;
    sub_1002044A8((unsigned int *)v21, (uint64_t)&v18, 21, 0.00392156886, 0.0);
  }
LABEL_8:
  if (*a3 != a3[1] && *(_DWORD *)*a3 >= 2u)
  {
    v18 = 0;
    v19 = 0;
    qmemcpy((void *)sub_10029430C(&v18, 63), "params.empty() || params[0] == HDR_NONE || params[0] == HDR_RLE", 63);
    sub_100294B74(-215, (uint64_t *)&v18, "write", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_hdr.cpp", 138);
  }
  if (*(_QWORD *)(a1 + 24))
    v5 = *(const char **)(a1 + 24);
  else
    v5 = "";
  v6 = fopen(v5, "wb");
  v7 = v6;
  if (v6)
  {
    sub_1002ADEA4(v6, SHIDWORD(v21[0]), SDWORD2(v21[0]), 0);
    if (*a3 == a3[1] || *(_DWORD *)*a3 == 1)
      sub_1002AE7AC(v7, *(float **)&v21[1], HIDWORD(v21[0]), SDWORD2(v21[0]));
    else
      sub_1002AE68C(v7, *(uint64_t *)&v21[1], DWORD2(v21[0]) * HIDWORD(v21[0]));
    fclose(v7);
  }
  if (*((_QWORD *)&v21[3] + 1))
  {
    v8 = (unsigned int *)(*((_QWORD *)&v21[3] + 1) + 20);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      sub_100256C90((uint64_t)v21);
  }
  *((_QWORD *)&v21[3] + 1) = 0;
  memset(&v21[1], 0, 32);
  if (SDWORD1(v21[0]) >= 1)
  {
    v11 = 0;
    v12 = v22;
    do
      *(_DWORD *)&v12[4 * v11++] = 0;
    while (v11 < SDWORD1(v21[0]));
  }
  if (v23 != v24)
    j__free(v23);
  return v7 != 0;
}

void sub_1002A1F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_10029434C((uint64_t *)va);
  sub_100006BE4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002A1FF0()
{
  operator new();
}

void sub_1002A2098()
{
  operator delete();
}

BOOL sub_1002A20BC(uint64_t a1, int a2)
{
  return a2 != 6;
}

void sub_1002A20CC()
{
  operator delete();
}

uint64_t sub_1002A20E0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

char **sub_1002A211C(char **a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL)
      sub_100008F3C();
    v6 = (char *)operator new(96 * a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[96 * a2];
    a1[2] = v7;
    while (1)
    {
      v10 = *(_OWORD *)a3;
      v11 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v6 = *(_OWORD *)a3;
      *((_OWORD *)v6 + 1) = v11;
      *((_OWORD *)v6 + 2) = *(_OWORD *)(a3 + 32);
      v12 = *(_QWORD *)(a3 + 56);
      *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 48);
      *((_QWORD *)v6 + 7) = v12;
      *((_QWORD *)v6 + 10) = 0;
      *((_QWORD *)v6 + 8) = v6 + 8;
      *((_QWORD *)v6 + 9) = v6 + 80;
      *((_QWORD *)v6 + 11) = 0;
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 20);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
        if (*(int *)(a3 + 4) > 2)
        {
LABEL_12:
          *((_DWORD *)v6 + 1) = 0;
          sub_100256B48((uint64_t)v6, a3);
          goto LABEL_5;
        }
      }
      else if (SDWORD1(v10) > 2)
      {
        goto LABEL_12;
      }
      v8 = *(_QWORD **)(a3 + 72);
      v9 = (_QWORD *)*((_QWORD *)v6 + 9);
      *v9 = *v8;
      v9[1] = v8[1];
LABEL_5:
      v6 += 96;
      if (v6 == v7)
      {
        a1[1] = v7;
        return a1;
      }
    }
  }
  return a1;
}

void sub_1002A2248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_100216D7C(&a9);
  _Unwind_Resume(a1);
}

void sub_1002A2274()
{
  operator delete();
}

uint64_t sub_1002A2288(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002A22C4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  sub_10029F330(a1);
  *v2 = off_10044F318;
  v3 = v2 + 5;
  sub_10029434C(v2 + 5);
  v4 = sub_10029430C(v3, 3);
  *(_WORD *)v4 = -9985;
  *(_BYTE *)(v4 + 2) = asc_1003F094C[2];
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 152) = 1;
  return a1;
}

void sub_1002A232C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029F908(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A2340(uint64_t a1)
{
  FILE *v2;

  *(_QWORD *)a1 = off_10044F318;
  if (*(_QWORD *)(a1 + 168))
  {
    sub_100373080(*(_QWORD *)(a1 + 168));
    operator delete();
  }
  v2 = *(FILE **)(a1 + 160);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 160) = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  return sub_10029F908(a1);
}

void sub_1002A23B8(uint64_t a1)
{
  FILE *v2;

  *(_QWORD *)a1 = off_10044F318;
  if (*(_QWORD *)(a1 + 168))
  {
    sub_100373080(*(_QWORD *)(a1 + 168));
    operator delete();
  }
  v2 = *(FILE **)(a1 + 160);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 160) = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  sub_10029F908(a1);
  operator delete();
}

void sub_1002A2444()
{
  sub_1002A24C4();
}

void sub_1002A24C4()
{
  operator new();
}

void sub_1002A257C()
{
  operator delete();
}

void sub_1002A25B0(uint64_t a1)
{
  FILE *v2;

  if (*(_QWORD *)(a1 + 168))
  {
    sub_100373080(*(_QWORD *)(a1 + 168));
    operator delete();
  }
  v2 = *(FILE **)(a1 + 160);
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)(a1 + 160) = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  operator new();
}

void sub_1002A28A8(uint64_t a1)
{
  longjmp((int *)(*(_QWORD *)a1 + 168), 1);
}

uint64_t sub_1002A28C0(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  int v13;
  const void **v14;
  int v15;
  unsigned __int8 *v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  FILE *v22;
  unsigned __int8 v24;

  v24 = 0;
  v3 = *(_QWORD *)(a1 + 168);
  if (v3)
  {
    if (*(_DWORD *)(a1 + 8))
    {
      if (*(_DWORD *)(a1 + 12))
      {
        v5 = *((_QWORD *)a2 + 10);
        v6 = *a2;
        if (!setjmp((int *)(v3 + 800)))
        {
          if (!*(_QWORD *)(v3 + 248) && !*(_QWORD *)(v3 + 256) && !*(_QWORD *)(v3 + 216) && !*(_QWORD *)(v3 + 224))
            sub_1002A2B38(v3, v3 + 248, v3 + 216);
          v7 = *(_DWORD *)(v3 + 56);
          if (v7 == 4)
            v8 = 4;
          else
            v8 = 2;
          if (v7 == 4)
            v9 = 4;
          else
            v9 = 3;
          if (v7 == 4)
            v10 = 4;
          else
            v10 = 1;
          if ((v6 & 0xFF8) != 0)
            v10 = v9;
          else
            v8 = v10;
          *(_DWORD *)(v3 + 64) = v8;
          *(_DWORD *)(v3 + 124) = v10;
          sub_100385B20(v3);
          v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 + 8) + 16))(v3, 1, (4 * *(_DWORD *)(a1 + 8)), 1);
          v12 = (char *)*((_QWORD *)a2 + 2);
          v13 = *(_DWORD *)(a1 + 12);
          *(_DWORD *)(a1 + 12) = v13 - 1;
          if (v13)
          {
            v14 = (const void **)v11;
            if ((v6 & 0xFF8) != 0)
            {
              do
              {
                while (1)
                {
                  sub_100385D30(v3, (uint64_t)v14, 1);
                  v16 = (unsigned __int8 *)*v14;
                  v17 = *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header;
                  if (*(_DWORD *)(v3 + 124) == 3)
                    break;
                  sub_1002B0728(v16, 0, v12, 0, v17);
                  v12 += v5;
                  v15 = *(_DWORD *)(a1 + 12);
                  *(_DWORD *)(a1 + 12) = v15 - 1;
                  if (!v15)
                    goto LABEL_33;
                }
                sub_1002AFB0C((const char *)v16, 0, v12, 0, v17);
                v12 += v5;
                v18 = *(_DWORD *)(a1 + 12);
                *(_DWORD *)(a1 + 12) = v18 - 1;
              }
              while (v18);
            }
            else
            {
              do
              {
                while (1)
                {
                  sub_100385D30(v3, (uint64_t)v14, 1);
                  v20 = *(unsigned int *)(a1 + 8);
                  if (*(_DWORD *)(v3 + 124) != 1)
                    break;
                  memcpy(v12, *v14, (int)v20);
                  v12 += v5;
                  v19 = *(_DWORD *)(a1 + 12);
                  *(_DWORD *)(a1 + 12) = v19 - 1;
                  if (!v19)
                    goto LABEL_33;
                }
                sub_1002B0984((char *)*v14, 0, (unint64_t)v12, 0, v20 | (unint64_t)&_mh_execute_header);
                v12 += v5;
                v21 = *(_DWORD *)(a1 + 12);
                *(_DWORD *)(a1 + 12) = v21 - 1;
              }
              while (v21);
            }
          }
LABEL_33:
          v24 = 1;
          sub_100385A38(v3);
        }
      }
    }
    if (*(_QWORD *)(a1 + 168))
    {
      sub_100373080(*(_QWORD *)(a1 + 168));
      operator delete();
    }
  }
  v22 = *(FILE **)(a1 + 160);
  if (v22)
  {
    fclose(v22);
    *(_QWORD *)(a1 + 160) = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  return v24;
}

uint64_t sub_1002A2B38(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  unint64_t v46;
  __int128 *v47;
  __int128 *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  unsigned int v60;
  char v61;
  char v62;
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;

  v51 = result;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v50 = a3;
  v66 = 0u;
  v67 = 0u;
  v3 = 416;
  v4 = &dword_100000004;
  v64 = 0u;
  v65 = 0u;
  while (1)
  {
    v15 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 1);
    v16 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 2);
    v17 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 3);
    v18 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 4);
    v19 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 5);
    v20 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 6);
    v21 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 7);
    v22 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 8);
    v23 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 9);
    v24 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 10);
    v25 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 11);
    LODWORD(v26) = *((unsigned __int8 *)&unk_1003BF71E + v4 + 12);
    v27 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 13);
    v28 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 14);
    v29 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 15);
    v30 = *((unsigned __int8 *)&unk_1003BF71E + v4 + 16);
    v31 = (v15 + v16 + v17 + v18 + v19 + v20 + v21 + v22 + v23 + v24 + v25 + v26 + v27 + v28 + v29 + v30);
    v32 = v3 - 17;
    if (v31 > 0x100 || v32 < v31)
      return result;
    v34 = v4 + 17;
    if (!(_DWORD)v31)
    {
      v36 = v4 + 17;
      goto LABEL_16;
    }
    if (v31 < 0x20 || -18 - v4 < (int)v31 - 1)
    {
      v35 = 0;
      v36 = v4 + 17;
LABEL_12:
      v37 = v36;
      do
      {
        v36 = v37 + 1;
        *((_BYTE *)&v64 + v35++) = *((_BYTE *)&unk_1003BF71E + v37++);
      }
      while (v35 < v31);
      goto LABEL_16;
    }
    v45 = *((_BYTE *)&unk_1003BF71E + v4 + 16);
    result = *((unsigned __int8 *)&unk_1003BF71E + v4 + 15);
    v35 = v31 & 0xFFFFFFE0;
    v36 = v34 + (v31 & 0xFFFFFFE0);
    v46 = v35;
    v47 = &v65;
    do
    {
      v48 = (__int128 *)((char *)&unk_1003BF71E + v34);
      v49 = v48[1];
      *(v47 - 1) = *v48;
      *v47 = v49;
      v47 += 2;
      v34 += 32;
      v46 -= 32;
    }
    while (v46);
    LOBYTE(v29) = result;
    LOBYTE(v30) = v45;
    if (v35 != v31)
      goto LABEL_12;
LABEL_16:
    v38 = *((unsigned __int8 *)&unk_1003BF71E + v4);
    v39 = (uint64_t *)(a2 + 8 * (v38 & 0xFFFFFFFFFFFFFFEFLL));
    if ((v38 & 0x10) != 0)
    {
      LODWORD(v38) = v38 & 0xFFFFFFEF;
      v40 = v39;
    }
    else
    {
      v40 = (uint64_t *)(a3 + 8 * v38);
    }
    if (v38 <= 3)
    {
      result = *v40;
      if (*v40)
        goto LABEL_2;
      v55 = v26;
      v56 = v25;
      v26 = a2;
      v60 = v32;
      v61 = v20;
      v41 = v15;
      v62 = v16;
      v63 = v18;
      v57 = v24;
      v58 = v23;
      v42 = v17;
      v43 = v19;
      v54 = v27;
      v44 = v21;
      v59 = v22;
      v52 = v30;
      v53 = v29;
      result = sub_10037FD10(v51);
      LOBYTE(v30) = v52;
      LOBYTE(v29) = v53;
      LOBYTE(v21) = v44;
      LOBYTE(v27) = v54;
      LOBYTE(v20) = v61;
      LOBYTE(v16) = v62;
      LOBYTE(v19) = v43;
      LOBYTE(v18) = v63;
      LOBYTE(v17) = v42;
      LOBYTE(v23) = v58;
      LOBYTE(v22) = v59;
      LOBYTE(v15) = v41;
      LOBYTE(v25) = v56;
      LOBYTE(v24) = v57;
      v32 = v60;
      a2 = v26;
      LOBYTE(v26) = v55;
      a3 = v50;
      *v40 = result;
      if (result)
      {
LABEL_2:
        *(_BYTE *)result = 0;
        *(_BYTE *)(result + 1) = v15;
        *(_BYTE *)(result + 2) = v16;
        *(_BYTE *)(result + 3) = v17;
        *(_BYTE *)(result + 4) = v18;
        *(_BYTE *)(result + 5) = v19;
        *(_BYTE *)(result + 6) = v20;
        *(_BYTE *)(result + 7) = v21;
        *(_BYTE *)(result + 8) = v22;
        *(_BYTE *)(result + 9) = v23;
        *(_BYTE *)(result + 10) = v24;
        *(_BYTE *)(result + 11) = v25;
        *(_BYTE *)(result + 12) = v26;
        *(_BYTE *)(result + 13) = v27;
        *(_BYTE *)(result + 14) = v28;
        *(_BYTE *)(result + 15) = v29;
        *(_BYTE *)(result + 16) = v30;
        v5 = *v40;
        v6 = v77;
        *(_OWORD *)(v5 + 209) = v76;
        *(_OWORD *)(v5 + 225) = v6;
        v7 = v79;
        *(_OWORD *)(v5 + 241) = v78;
        v8 = v73;
        *(_OWORD *)(v5 + 145) = v72;
        *(_OWORD *)(v5 + 161) = v8;
        v9 = v75;
        *(_OWORD *)(v5 + 177) = v74;
        *(_OWORD *)(v5 + 193) = v9;
        v10 = v69;
        *(_OWORD *)(v5 + 81) = v68;
        *(_OWORD *)(v5 + 97) = v10;
        v11 = v71;
        *(_OWORD *)(v5 + 113) = v70;
        *(_OWORD *)(v5 + 129) = v11;
        v12 = v65;
        *(_OWORD *)(v5 + 17) = v64;
        *(_OWORD *)(v5 + 33) = v12;
        v13 = v67;
        *(_OWORD *)(v5 + 49) = v66;
        *(_OWORD *)(v5 + 65) = v13;
        v3 = v32 - v31;
        v14 = v5 + 17;
        v4 = v36;
        *(_OWORD *)(v14 + 240) = v7;
        if (v32 - v31 > 0x10)
          continue;
      }
    }
    return result;
  }
}

uint64_t sub_1002A2EB8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_10029F688(a1);
  *v2 = off_10044F388;
  v3 = v2 + 1;
  sub_10029434C(v2 + 1);
  qmemcpy((void *)sub_10029430C(v3, 31), "JPEG files (*.jpeg;*.jpg;*.jpe)", 31);
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

void sub_1002A2F28(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  *v1 = off_10044EFB0;
  sub_10029434C(v1 + 7);
  sub_10029434C(v1 + 3);
  sub_10029434C(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002A2F68(uint64_t *a1)
{
  *a1 = (uint64_t)off_10044EFB0;
  sub_10029434C(a1 + 7);
  sub_10029434C(a1 + 3);
  sub_10029434C(a1 + 1);
  return a1;
}

void sub_1002A2FB8(uint64_t *a1)
{
  *a1 = (uint64_t)off_10044EFB0;
  sub_10029434C(a1 + 7);
  sub_10029434C(a1 + 3);
  sub_10029434C(a1 + 1);
  operator delete();
}

void sub_1002A3018()
{
  operator new();
}

void sub_1002A30C0()
{
  operator delete();
}

BOOL sub_1002A30E4(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  FILE *v10;
  const char *v11;
  FILE *v12;
  FILE *v13;
  FILE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t j;
  uint64_t i;
  uint64_t k;
  size_t v44;
  size_t v45;
  void *v46;
  int v47;
  int v49;
  uint64_t *v50;
  _QWORD v51[7];
  void *__p;
  _BYTE *v53;
  char *v54;
  unsigned __int8 v55;
  char __s[8];
  _QWORD v57[21];
  int v58[48];
  _QWORD v59[6];
  int v60;
  int v61;
  int8x8_t v62;
  uint64_t v63;
  int v64;
  int v65;
  char v66;
  int v67;
  char *v68;
  unint64_t v69;
  _BYTE v70[1032];

  v50 = a1 + 7;
  sub_10029434C(a1 + 7);
  v55 = 0;
  v7 = *(unsigned int *)(a2 + 8);
  v6 = *(unsigned int *)(a2 + 12);
  v8 = (char *)operator new(0x1000uLL);
  v9 = v8 + 4096;
  __p = v8;
  v54 = v8 + 4096;
  bzero(v8, 0x1000uLL);
  v53 = v9;
  v68 = v70;
  v69 = 1032;
  sub_100372F64((char *)v59, 90, 568);
  v59[0] = sub_100394530((uint64_t)v57);
  v57[0] = sub_1002A28A8;
  if (a1[5])
  {
    v51[6] = a1[5];
    v59[5] = v51;
    v51[2] = nullsub_28;
    v51[3] = sub_1002A3814;
    v51[4] = sub_1002A3A08;
    v51[5] = &__p;
    v51[0] = __p;
    v51[1] = v53 - (_BYTE *)__p;
    v10 = 0;
    goto LABEL_8;
  }
  if (a1[3])
    v11 = (const char *)a1[3];
  else
    v11 = "";
  v12 = fopen(v11, "wb");
  if (v12)
  {
    v13 = v12;
    sub_1003876F8((uint64_t)v59, (uint64_t)v12);
    v10 = v13;
LABEL_8:
    if (setjmp(v58))
    {
      v14 = v10;
      if (v55)
        goto LABEL_83;
      goto LABEL_81;
    }
    v60 = v6;
    v61 = v7;
    v49 = (*(_DWORD *)a2 >> 3) & 0x1FF;
    v62 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v49 == 0), 0x1FuLL)), (int8x8_t)0x100000001, (int8x8_t)0x200000003);
    v15 = *a3;
    v16 = a3[1];
    v17 = 0;
    if (v16 != *a3)
    {
      v18 = (v16 - *a3) >> 2;
      v19 = 95;
      v20 = 0xFFFFFFFFLL;
      v21 = 0;
      v22 = 0xFFFFFFFFLL;
      v23 = 0;
      v24 = 0;
      while (2)
      {
        v30 = v19;
        switch(*(_DWORD *)(v15 + 4 * v21))
        {
          case 1:
            v31 = *(_DWORD *)(v15 + 4 * v21 + 4) & ~(*(int *)(v15 + 4 * v21 + 4) >> 31);
            if (v31 >= 0x64)
              v30 = 100;
            else
              v30 = v31;
            goto LABEL_14;
          case 2:
            v24 = *(_DWORD *)(v15 + 4 * v21 + 4);
            goto LABEL_14;
          case 3:
            v23 = *(_DWORD *)(v15 + 4 * v21 + 4);
            goto LABEL_14;
          case 4:
            v32 = *(_DWORD *)(v15 + 4 * v21 + 4) & ~(*(int *)(v15 + 4 * v21 + 4) >> 31);
            if (v32 >= 0xFFFF)
              v27 = 0xFFFFLL;
            else
              v27 = v32;
            v25 = v20;
            v26 = v22;
            goto LABEL_17;
          case 5:
            v33 = *(_DWORD *)(v15 + 4 * v21 + 4);
            if (v33 >= 0x64)
              v34 = 100;
            else
              v34 = *(_DWORD *)(v15 + 4 * v21 + 4);
            if ((int)v20 >= 0)
              v35 = v20;
            else
              v35 = v34;
            if (v33 >= 0)
              v25 = v35;
            else
              v25 = v20;
            if (v33 >= 0)
              v30 = v34;
            else
              v30 = v30;
            if (v33 >= 0)
              v26 = v34;
            else
              v26 = v22;
            goto LABEL_16;
          case 6:
            v36 = *(_DWORD *)(v15 + 4 * v21 + 4);
            if (v36 >= 0x64)
              v37 = 100;
            else
              v37 = *(_DWORD *)(v15 + 4 * v21 + 4);
            if (v36 >= 0)
              v25 = v37;
            else
              v25 = v20;
            goto LABEL_15;
          default:
LABEL_14:
            v25 = v20;
LABEL_15:
            v26 = v22;
LABEL_16:
            v27 = v17;
LABEL_17:
            v28 = v24;
            v29 = v23;
            v21 += 2;
            v19 = v30;
            v17 = v27;
            v22 = v26;
            v20 = v25;
            if (v21 < v18)
              continue;
            goto LABEL_50;
        }
      }
    }
    LODWORD(v26) = -1;
    LODWORD(v30) = 95;
    v29 = 0;
    LODWORD(v27) = 0;
    v28 = 0;
    LODWORD(v25) = -1;
LABEL_50:
    sub_10038257C((uint64_t)v59);
    v67 = v27;
    sub_100382544((uint64_t)v59, v30, 1);
    if (v28)
      sub_100382B78((uint64_t)v59);
    if (v29)
      v66 = 1;
    if ((v26 & 0x80000000) == 0 && (v25 & 0x80000000) == 0)
    {
      v64 = sub_10038250C(v26);
      v65 = sub_10038250C(v25);
      if ((_DWORD)v26 != (_DWORD)v25)
      {
        v38 = v63;
        *(_QWORD *)(v63 + 8) = 0x100000001;
        *(_QWORD *)(v38 + 104) = 0x100000001;
      }
      sub_10037FD38((uint64_t)v59, 1);
    }
    sub_10037326C((uint64_t)v59, 1);
    if (v49)
    {
      if (v69 >= 3 * (int)v6)
      {
        v69 = 3 * (int)v6;
        if ((int)v7 < 1)
        {
LABEL_80:
          sub_100373118((uint64_t)v59);
          v55 = 1;
          v14 = v10;
          goto LABEL_83;
        }
LABEL_70:
        v39 = v68;
        v40 = v6 | (unint64_t)&_mh_execute_header;
        if (v49 == 2)
        {
          for (i = 0; i != v7; ++i)
          {
            *(_QWORD *)__s = *(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 80) * i;
            sub_1002AFB0C(*(const char **)__s, 0, v39, 0, v40);
            *(_QWORD *)__s = v39;
            sub_100373314((uint64_t)v59, (uint64_t)__s, 1u);
          }
        }
        else if (v49 == 3)
        {
          for (j = 0; j != v7; ++j)
          {
            *(_QWORD *)__s = *(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 80) * j;
            sub_1002AF964(*(uint64_t *)__s, 0, v39, 0, v40, 2);
            *(_QWORD *)__s = v39;
            sub_100373314((uint64_t)v59, (uint64_t)__s, 1u);
          }
        }
        else
        {
          for (k = 0; k != v7; ++k)
          {
            *(_QWORD *)__s = *(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 80) * k;
            sub_100373314((uint64_t)v59, (uint64_t)__s, 1u);
          }
        }
        goto LABEL_80;
      }
      if (v68 != v70)
      {
        if (v68)
          operator delete[]();
        v68 = v70;
      }
      v69 = 3 * (int)v6;
      if ((3 * v6) >= 0x409)
        operator new[]();
    }
    if ((int)v7 < 1)
      goto LABEL_80;
    goto LABEL_70;
  }
  v14 = 0;
LABEL_81:
  ((void (*)(_QWORD *, char *))v57[3])(v59, __s);
  sub_10029434C(v50);
  v44 = strlen(__s);
  if (v44)
  {
    v45 = v44;
    v46 = (void *)sub_10029430C(v50, v44);
    memcpy(v46, __s, v45);
  }
LABEL_83:
  sub_100373080((uint64_t)v59);
  v47 = v55;
  if (v68 != v70 && v68)
    operator delete[]();
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
  if (v14)
    fclose(v14);
  return v47 != 0;
}

void sub_1002A3748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  FILE *v19;
  FILE *v20;

  v20 = v19;
  if (STACK[0x4D8] != a11 && STACK[0x4D8] != 0)
    operator delete[]();
  if (__p)
  {
    operator delete(__p);
    if (!v20)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_8;
  }
  fclose(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A37DC()
{
  return 0;
}

uint64_t sub_1002A37E4(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *(uint64_t **)(result + 40);
  v4 = *v2;
  v3 = v2[1];
  v5 = a2 - v3;
  v6 = v3 - a2;
  if (v3 < a2)
  {
    v6 = 0;
  }
  else
  {
    v3 = a2;
    v5 = 0;
  }
  *((_DWORD *)v2 + 14) = v5;
  *v2 = v4 + v3;
  v2[1] = v6;
  return result;
}

uint64_t sub_1002A3814(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(v1 + 48);
  v4 = *(char **)v2;
  v3 = *(char **)(v2 + 8);
  v5 = (unint64_t)&v3[-*(_QWORD *)v2];
  v6 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) - **(_QWORD **)(v1 + 40);
  v7 = v6 + v5;
  if (v5 < v6 + v5)
  {
    v8 = *(_QWORD *)(v2 + 16);
    if (v8 - (uint64_t)v3 >= v6)
    {
      bzero(*(void **)(v2 + 8), v6);
      *(_QWORD *)(v2 + 8) = &v3[v6];
      goto LABEL_31;
    }
    if ((v7 & 0x8000000000000000) != 0)
      sub_100008F3C();
    v9 = v8 - (_QWORD)v4;
    v10 = 2 * v9;
    if (2 * v9 <= v7)
      v10 = v6 + v5;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v12 = (char *)operator new(v11);
    v13 = &v12[v5];
    v14 = &v12[v11];
    v15 = &v12[v7];
    bzero(&v12[v5], v6);
    if (v3 == v4)
      goto LABEL_29;
    if (v5 >= 8 && (unint64_t)(v4 - v12) >= 0x20)
    {
      if (v5 < 0x20)
      {
        v16 = 0;
        goto LABEL_21;
      }
      v16 = v5 & 0xFFFFFFFFFFFFFFE0;
      v17 = v3 - 16;
      v18 = &v12[v3 - 16 - v4];
      v19 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v20 = *(_OWORD *)v17;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
        *(_OWORD *)v18 = v20;
        v18 -= 32;
        v17 -= 32;
        v19 -= 32;
      }
      while (v19);
      if (v5 == v16)
        goto LABEL_28;
      if ((v5 & 0x18) != 0)
      {
LABEL_21:
        v13 -= v5 & 0xFFFFFFFFFFFFFFF8;
        v21 = &v3[-v16 - 8];
        v22 = (char *)(v21 - v4);
        v23 = v16 - (v5 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v24 = *(_QWORD *)v21;
          v21 -= 8;
          *(_QWORD *)&v22[(_QWORD)v12] = v24;
          v22 -= 8;
          v23 += 8;
        }
        while (v23);
        v3 -= v5 & 0xFFFFFFFFFFFFFFF8;
        if (v5 == (v5 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_28;
        goto LABEL_26;
      }
      v13 -= v16;
      v3 -= v16;
    }
LABEL_26:
    v25 = v13 - 1;
    do
    {
      v26 = *--v3;
      *v25-- = v26;
    }
    while (v3 != v4);
LABEL_28:
    v3 = v4;
    v13 = v12;
LABEL_29:
    *(_QWORD *)v2 = v13;
    *(_QWORD *)(v2 + 8) = v15;
    *(_QWORD *)(v2 + 16) = v14;
    if (v3)
      operator delete(v3);
    goto LABEL_31;
  }
  if (v5 > v7)
    *(_QWORD *)(v2 + 8) = &v4[v7];
LABEL_31:
  memcpy((void *)(**(_QWORD **)(v1 + 48) + v5), **(const void ***)(v1 + 40), v6);
  *(_QWORD *)v1 = **(_QWORD **)(v1 + 40);
  *(_QWORD *)(v1 + 8) = v6;
  return 1;
}

_QWORD *sub_1002A3A08(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;

  v1 = result[5];
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) - **(_QWORD **)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    v5 = *(_QWORD *)(v1 + 48);
    v7 = *(char **)v5;
    v6 = *(char **)(v5 + 8);
    v8 = (unint64_t)&v6[-*(_QWORD *)v5];
    v9 = v4 + v8;
    if (v8 >= v4 + v8)
    {
      if (v8 > v4 + v8)
        *(_QWORD *)(v5 + 8) = &v7[v9];
      return memcpy((void *)(**(_QWORD **)(v1 + 48) + v8), **(const void ***)(v1 + 40), v4);
    }
    v10 = *(_QWORD *)(v5 + 16);
    if (v10 - (uint64_t)v6 >= v4)
    {
      bzero(*(void **)(v5 + 8), v4);
      *(_QWORD *)(v5 + 8) = &v6[v4];
      return memcpy((void *)(**(_QWORD **)(v1 + 48) + v8), **(const void ***)(v1 + 40), v4);
    }
    if ((v9 & 0x8000000000000000) != 0)
      sub_100008F3C();
    v11 = v10 - (_QWORD)v7;
    v12 = 2 * v11;
    if (2 * v11 <= v9)
      v12 = v4 + v8;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v14 = (char *)operator new(v13);
    v15 = &v14[v8];
    v16 = &v14[v13];
    v17 = &v14[v9];
    bzero(&v14[v8], v4);
    if (v6 == v7)
    {
LABEL_30:
      *(_QWORD *)v5 = v15;
      *(_QWORD *)(v5 + 8) = v17;
      *(_QWORD *)(v5 + 16) = v16;
      if (v6)
        operator delete(v6);
      return memcpy((void *)(**(_QWORD **)(v1 + 48) + v8), **(const void ***)(v1 + 40), v4);
    }
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        v18 = 0;
        goto LABEL_22;
      }
      v18 = v8 & 0xFFFFFFFFFFFFFFE0;
      v19 = v6 - 16;
      v20 = &v14[v6 - 16 - v7];
      v21 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v22 = *(_OWORD *)v19;
        *((_OWORD *)v20 - 1) = *((_OWORD *)v19 - 1);
        *(_OWORD *)v20 = v22;
        v20 -= 32;
        v19 -= 32;
        v21 -= 32;
      }
      while (v21);
      if (v8 == v18)
        goto LABEL_29;
      if ((v8 & 0x18) != 0)
      {
LABEL_22:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        v23 = &v6[-v18 - 8];
        v24 = (char *)(v23 - v7);
        v25 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v26 = *(_QWORD *)v23;
          v23 -= 8;
          *(_QWORD *)&v24[(_QWORD)v14] = v26;
          v24 -= 8;
          v25 += 8;
        }
        while (v25);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_29;
        goto LABEL_27;
      }
      v15 -= v18;
      v6 -= v18;
    }
LABEL_27:
    v27 = v15 - 1;
    do
    {
      v28 = *--v6;
      *v27-- = v28;
    }
    while (v6 != v7);
LABEL_29:
    v6 = v7;
    v15 = v14;
    goto LABEL_30;
  }
  return result;
}

void sub_1002A3C18()
{
  operator delete();
}

uint64_t sub_1002A3C2C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

void sub_1002A3C6C()
{
  operator delete();
}

uint64_t sub_1002A3C80(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8))(a1);
}

uint64_t sub_1002A3CBC(uint64_t a1)
{
  _QWORD *v2;

  sub_10029F330(a1);
  *v2 = off_10044F490;
  sub_10029DE2C((uint64_t)(v2 + 20));
  *(_QWORD *)(a1 + 160) = off_10044ED68;
  *(_BYTE *)(a1 + 152) = 1;
  *(_BYTE *)(a1 + 244) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 224) = xmmword_1003BF980;
  return a1;
}

void sub_1002A3D1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10029F908(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A3D30(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10044F490;
  v2 = (uint64_t)(a1 + 20);
  sub_10029E3F4((uint64_t)(a1 + 20));
  sub_10029E49C(v2);
  return sub_10029F908((uint64_t)a1);
}

void sub_1002A3D74(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10044F490;
  v2 = (uint64_t)(a1 + 20);
  sub_10029E3F4((uint64_t)(a1 + 20));
  sub_10029E49C(v2);
  sub_10029F908((uint64_t)a1);
  operator delete();
}

uint64_t sub_1002A3DCC()
{
  return 3;
}

BOOL sub_1002A3DD4(uint64_t a1, _QWORD *a2)
{
  _BYTE *v2;
  __darwin_ct_rune_t v3;

  if (a2[1] < 3uLL)
    return 0;
  v2 = (_BYTE *)*a2;
  if (*(_BYTE *)*a2 != 80 || v2[1] != 55)
    return 0;
  v3 = (char)v2[2];
  if (v3 < 0)
    return __maskrune(v3, 0x4000uLL) != 0;
  else
    return (_DefaultRuneLocale.__runetype[v3] & 0x4000) != 0;
}

void sub_1002A3E54()
{
  sub_1002A3ED4();
}

void sub_1002A3ED4()
{
  operator new();
}

void sub_1002A3F88()
{
  uint64_t v0;

  sub_10029F908(v0);
  operator delete();
}

FILE *sub_1002A3FBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  FILE *result;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  __uint32_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  __uint32_t v28;
  BOOL v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  _BOOL4 v33;
  unsigned int v34;
  int v35;
  _BOOL4 v36;
  unsigned int v37;
  int v38;
  _BOOL4 v39;
  int v40;
  _BOOL4 v41;
  int v42;
  unint64_t v43;
  __uint32_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t i;
  unsigned int v48;
  __darwin_ct_rune_t v49;
  __uint32_t v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  uint64_t v60;
  int v61;
  BOOL v62;
  int v63;
  int v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *exception;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82[2];
  uint64_t v83[2];
  char *__endptr;
  unsigned __int8 v85;
  char __str[16];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[31];

  if (!*(_QWORD *)(a1 + 72))
    goto LABEL_13;
  v2 = *(unsigned int *)(a1 + 60);
  if ((int)v2 >= 3)
  {
    v4 = *(_QWORD *)(a1 + 120);
    v5 = (int *)(v4 + 4);
    v6 = 1;
    v7 = v2 & 0xFFFFFFFE;
    v8 = 1;
    do
    {
      v6 *= *(v5 - 1);
      v8 *= *v5;
      v5 += 2;
      v7 -= 2;
    }
    while (v7);
    v3 = v8 * v6;
    v9 = v2 - (v2 & 0xFFFFFFFE);
    if (v9)
    {
      v10 = (int *)(v4 + ((4 * v2) & 0x3FFFFFFF8));
      do
      {
        v11 = *v10++;
        v3 *= v11;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    v3 = *(int *)(a1 + 68) * (uint64_t)*(int *)(a1 + 64);
  }
  if ((_DWORD)v2 && v3)
  {
    if ((sub_10029E270(a1 + 160, a1 + 56) & 1) == 0)
      return 0;
  }
  else
  {
LABEL_13:
    result = sub_10029E1DC(a1 + 160, (const char **)(a1 + 24));
    if (!(_DWORD)result)
      return result;
  }
  v13 = (_QWORD *)(a1 + 160);
  v81 = a1;
  if (sub_10029E574((_QWORD *)(a1 + 160)) != 80)
  {
    exception = __cxa_allocate_exception(0x58uLL);
    sub_1001F37D4(__str, "Invalid header");
    sub_1001F37D4(&__endptr, "readHeader");
    sub_1001F37D4(v83, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
    sub_100294558((uint64_t)exception, -2, (uint64_t *)__str, (uint64_t *)&__endptr, v83, 381);
    *exception = &off_10044FC60;
  }
  if (sub_10029E574((_QWORD *)(a1 + 160)) != 55)
  {
    v77 = __cxa_allocate_exception(0x58uLL);
    sub_1001F37D4(__str, "Invalid header");
    sub_1001F37D4(&__endptr, "readHeader");
    sub_1001F37D4(v83, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
    sub_100294558((uint64_t)v77, -2, (uint64_t *)__str, (uint64_t *)&__endptr, v83, 385);
    *v77 = &off_10044FC60;
  }
  v14 = sub_10029E574((_QWORD *)(a1 + 160));
  if (v14 != 10 && v14 != 13)
  {
    v78 = __cxa_allocate_exception(0x58uLL);
    sub_1001F37D4(__str, "Invalid header");
    sub_1001F37D4(&__endptr, "readHeader");
    sub_1001F37D4(v83, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
    sub_100294558((uint64_t)v78, -2, (uint64_t *)__str, (uint64_t *)&__endptr, v83, 389);
    *v78 = &off_10044FC60;
  }
  v15 = 0;
  v79 = 0;
  v80 = 0;
  while (2)
  {
    while (1)
    {
      v85 = 0;
      do
      {
        v18 = sub_10029E574(v13);
        v19 = v18;
        if (v18 <= 0x7F)
          v17 = _DefaultRuneLocale.__runetype[v18] & 0x4000;
        else
          v17 = __maskrune(v18, 0x4000uLL);
      }
      while (v17);
      v16 = 0;
      if (v19 != 10 && v19 != 13)
        break;
LABEL_20:
      v15 = v16;
    }
    if (v19 == 35)
    {
      do
        v20 = sub_10029E574(v13);
      while (v20 != 10 && v20 != 13);
      v16 = 1;
      goto LABEL_20;
    }
    __endptr = 0;
    if (v19 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v19] & 0x4000) == 0)
        goto LABEL_36;
      goto LABEL_62;
    }
    if (__maskrune(v19, 0x4000uLL))
      goto LABEL_62;
LABEL_36:
    LOBYTE(__endptr) = v19;
    v21 = sub_10029E574(v13);
    v19 = v21;
    if (v21 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v21] & 0x4000) == 0)
        goto LABEL_40;
      goto LABEL_62;
    }
    if (__maskrune(v21, 0x4000uLL))
      goto LABEL_62;
LABEL_40:
    BYTE1(__endptr) = v19;
    v22 = sub_10029E574(v13);
    v19 = v22;
    if (v22 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v22] & 0x4000) == 0)
        goto LABEL_44;
      goto LABEL_62;
    }
    if (__maskrune(v22, 0x4000uLL))
      goto LABEL_62;
LABEL_44:
    BYTE2(__endptr) = v19;
    v23 = sub_10029E574(v13);
    v19 = v23;
    if (v23 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v23] & 0x4000) == 0)
        goto LABEL_48;
      goto LABEL_62;
    }
    if (__maskrune(v23, 0x4000uLL))
      goto LABEL_62;
LABEL_48:
    BYTE3(__endptr) = v19;
    v24 = sub_10029E574(v13);
    v19 = v24;
    if (v24 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v24] & 0x4000) == 0)
        goto LABEL_52;
      goto LABEL_62;
    }
    if (__maskrune(v24, 0x4000uLL))
      goto LABEL_62;
LABEL_52:
    BYTE4(__endptr) = v19;
    v25 = sub_10029E574(v13);
    v19 = v25;
    if (v25 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v25] & 0x4000) == 0)
        goto LABEL_56;
      goto LABEL_62;
    }
    if (__maskrune(v25, 0x4000uLL))
      goto LABEL_62;
LABEL_56:
    BYTE5(__endptr) = v19;
    v26 = sub_10029E574(v13);
    v19 = v26;
    if (v26 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v26] & 0x4000) == 0)
        goto LABEL_60;
      goto LABEL_62;
    }
    if (__maskrune(v26, 0x4000uLL))
      goto LABEL_62;
LABEL_60:
    BYTE6(__endptr) = v19;
    v27 = sub_10029E574(v13);
    v19 = v27;
    if (v27 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v27] & 0x4000) == 0)
        goto LABEL_65;
LABEL_62:
      if (v19 <= 0x7F)
        goto LABEL_66;
      goto LABEL_63;
    }
    if (__maskrune(v27, 0x4000uLL))
      goto LABEL_62;
LABEL_65:
    HIBYTE(__endptr) = v19;
    v19 = sub_10029E574(v13);
    if (v19 <= 0x7F)
    {
LABEL_66:
      v28 = _DefaultRuneLocale.__runetype[v19] & 0x4000;
      goto LABEL_67;
    }
LABEL_63:
    v28 = __maskrune(v19, 0x4000uLL);
LABEL_67:
    if (!v28)
      goto LABEL_185;
    v29 = (_DWORD)__endptr == 1448624461 && *(_DWORD *)((char *)&__endptr + 3) == 4997462;
    if (v29)
    {
      if ((unint64_t)__endptr ^ 0x455059544C505554 | v85)
        v15 = 6;
      else
        v15 = 7;
    }
    else
    {
      v30 = WORD2(__endptr) ^ 0x48;
      v31 = __endptr ^ 0x54504544 | v30;
      v32 = __endptr ^ 0x48444E45 | *(_DWORD *)((char *)&__endptr + 3) ^ 0x524448;
      v29 = v32 == 0;
      v33 = v32 != 0;
      v34 = __endptr ^ 0x47494548 | *(_DWORD *)((char *)&__endptr + 3) ^ 0x544847;
      if (v29)
        v35 = 2;
      else
        v35 = v15;
      v29 = v34 == 0;
      v36 = v34 != 0;
      v37 = __endptr ^ 0x54444957 | v30;
      if (v29)
        v38 = 3;
      else
        v38 = v35;
      v29 = v37 == 0;
      v39 = v37 != 0;
      if (v29)
        v40 = 4;
      else
        v40 = v38;
      v41 = v31 != 0;
      if (v31)
        v42 = v40;
      else
        v42 = 5;
      v43 = (unint64_t)__endptr ^ 0x455059544C505554 | v85;
      if (v43)
        v15 = v42;
      else
        v15 = 7;
      if (v43 && v41 && v39 && v36 && v33)
      {
LABEL_185:
        v65 = __cxa_allocate_exception(0x58uLL);
        sub_1001F37D4(&__endptr, "Invalid header");
        sub_1001F37D4(v83, "readHeader");
        sub_1001F37D4(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
        sub_100294558((uint64_t)v65, -2, (uint64_t *)&__endptr, v83, v82, 395);
        *v65 = &off_10044FC60;
      }
    }
    v99 = 0u;
    memset(v100, 0, sizeof(v100));
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    *(_OWORD *)__str = 0u;
    if (v19 != 10 && v19 != 13)
    {
      do
      {
        v45 = sub_10029E574(v13);
        v46 = v45;
        if (v45 <= 0x7F)
          v44 = _DefaultRuneLocale.__runetype[v45] & 0x4000;
        else
          v44 = __maskrune(v45, 0x4000uLL);
      }
      while (v44);
      i = 0;
      while (v46 != 10 && v46 != 13)
      {
        __str[i] = v46;
        v48 = sub_10029E574(v13);
        v46 = v48;
        if (++i == 255)
        {
          LODWORD(i) = 255;
          if (v48 != 10 && v48 != 13)
            goto LABEL_185;
          goto LABEL_111;
        }
      }
      if ((i & 0x80000000) != 0)
        goto LABEL_117;
LABEL_111:
      for (i = i; i != -1; --i)
      {
        v49 = __str[i];
        if (v49 < 0)
          v50 = __maskrune(v49, 0x4000uLL);
        else
          v50 = _DefaultRuneLocale.__runetype[v49] & 0x4000;
        if (!v50)
          break;
        __str[i] = 0;
      }
    }
LABEL_117:
    switch(v15)
    {
      case 0:
      case 1:
        continue;
      case 2:
        if ((v80 & HIDWORD(v79) & HIDWORD(v80) & v79 & 1) != 0)
        {
          v63 = *(_DWORD *)(v81 + 228);
          if (*(_DWORD *)(v81 + 240))
          {
LABEL_176:
            *(_DWORD *)(v81 + 16) = (*(_DWORD *)(v81 + 232) & 7 | (8 * v63)) - 8;
            *(_DWORD *)(v81 + 236) = sub_10029E1C0(v13);
            return (FILE *)1;
          }
          if (v63 == 3)
          {
            if (*(int *)(v81 + 224) > 255)
              goto LABEL_176;
            v64 = 4;
          }
          else
          {
            if (v63 != 1)
              goto LABEL_176;
            v64 = *(_DWORD *)(v81 + 224);
            if (v64 != 1)
            {
              if (v64 >= 256)
                goto LABEL_176;
              v64 = 2;
            }
          }
          *(_DWORD *)(v81 + 240) = v64;
          goto LABEL_176;
        }
        *(_DWORD *)(v81 + 236) = -1;
        *(_QWORD *)(v81 + 8) = -1;
        sub_10029E3F4((uint64_t)v13);
        return 0;
      case 3:
        if ((v80 & 1) != 0)
        {
          v71 = __cxa_allocate_exception(0x58uLL);
          sub_1001F37D4(&__endptr, "Invalid header");
          sub_1001F37D4(v83, "readHeader");
          sub_1001F37D4(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_100294558((uint64_t)v71, -2, (uint64_t *)&__endptr, v83, v82, 405);
          *v71 = &off_10044FC60;
        }
        __endptr = 0;
        v51 = strtol(__str, &__endptr, 0);
        if (*__error() == 34 && (unint64_t)(v51 - 0x7FFFFFFFFFFFFFFFLL) < 2
          || ((v52 = *__error(), !v51) ? (v53 = v52 == 0) : (v53 = 1), !v53 || __endptr == __str))
        {
          v66 = __cxa_allocate_exception(0x58uLL);
          sub_1001F37D4(&__endptr, "Invalid header");
          sub_1001F37D4(v83, "readHeader");
          sub_1001F37D4(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_100294558((uint64_t)v66, -2, (uint64_t *)&__endptr, v83, v82, 407);
          *v66 = &off_10044FC60;
        }
        *(_DWORD *)(v81 + 12) = v51;
        LODWORD(v80) = 1;
        v15 = 3;
        continue;
      case 4:
        if ((v79 & 0x100000000) != 0)
        {
          v74 = __cxa_allocate_exception(0x58uLL);
          sub_1001F37D4(&__endptr, "Invalid header");
          sub_1001F37D4(v83, "readHeader");
          sub_1001F37D4(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_100294558((uint64_t)v74, -2, (uint64_t *)&__endptr, v83, v82, 412);
          *v74 = &off_10044FC60;
        }
        __endptr = 0;
        v60 = strtol(__str, &__endptr, 0);
        if (*__error() == 34 && (unint64_t)(v60 - 0x7FFFFFFFFFFFFFFFLL) < 2
          || ((v61 = *__error(), !v60) ? (v62 = v61 == 0) : (v62 = 1), !v62 || __endptr == __str))
        {
          v69 = __cxa_allocate_exception(0x58uLL);
          sub_1001F37D4(&__endptr, "Invalid header");
          sub_1001F37D4(v83, "readHeader");
          sub_1001F37D4(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_100294558((uint64_t)v69, -2, (uint64_t *)&__endptr, v83, v82, 414);
          *v69 = &off_10044FC60;
        }
        *(_DWORD *)(v81 + 8) = v60;
        HIDWORD(v79) = 1;
        v15 = 4;
        continue;
      case 5:
        if ((v80 & 0x100000000) != 0)
        {
          v72 = __cxa_allocate_exception(0x58uLL);
          sub_1001F37D4(&__endptr, "Invalid header");
          sub_1001F37D4(v83, "readHeader");
          sub_1001F37D4(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_100294558((uint64_t)v72, -2, (uint64_t *)&__endptr, v83, v82, 419);
          *v72 = &off_10044FC60;
        }
        __endptr = 0;
        v54 = strtol(__str, &__endptr, 0);
        if (*__error() == 34 && (unint64_t)(v54 - 0x7FFFFFFFFFFFFFFFLL) < 2
          || ((v55 = *__error(), !v54) ? (v56 = v55 == 0) : (v56 = 1), !v56 || __endptr == __str))
        {
          v68 = __cxa_allocate_exception(0x58uLL);
          sub_1001F37D4(&__endptr, "Invalid header");
          sub_1001F37D4(v83, "readHeader");
          sub_1001F37D4(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_100294558((uint64_t)v68, -2, (uint64_t *)&__endptr, v83, v82, 421);
          *v68 = &off_10044FC60;
        }
        *(_DWORD *)(v81 + 228) = v54;
        HIDWORD(v80) = 1;
        v15 = 5;
        continue;
      case 6:
        if ((v79 & 1) != 0)
        {
          v73 = __cxa_allocate_exception(0x58uLL);
          sub_1001F37D4(&__endptr, "Invalid header");
          sub_1001F37D4(v83, "readHeader");
          sub_1001F37D4(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_100294558((uint64_t)v73, -2, (uint64_t *)&__endptr, v83, v82, 426);
          *v73 = &off_10044FC60;
        }
        __endptr = 0;
        v57 = strtol(__str, &__endptr, 0);
        if (*__error() == 34 && (unint64_t)(v57 - 0x7FFFFFFFFFFFFFFFLL) < 2
          || ((v58 = *__error(), !v57) ? (v59 = v58 == 0) : (v59 = 1), !v59 || __endptr == __str))
        {
          v67 = __cxa_allocate_exception(0x58uLL);
          sub_1001F37D4(&__endptr, "Invalid header");
          sub_1001F37D4(v83, "readHeader");
          sub_1001F37D4(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_100294558((uint64_t)v67, -2, (uint64_t *)&__endptr, v83, v82, 428);
          *v67 = &off_10044FC60;
        }
        *(_DWORD *)(v81 + 224) = v57;
        if ((int)v57 >= 0x10000)
        {
          v70 = __cxa_allocate_exception(0x58uLL);
          sub_1001F37D4(&__endptr, "Invalid header");
          sub_1001F37D4(v83, "readHeader");
          sub_1001F37D4(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_100294558((uint64_t)v70, -2, (uint64_t *)&__endptr, v83, v82, 430);
          *v70 = &off_10044FC60;
        }
        if ((int)v57 < 256)
        {
          *(_DWORD *)(v81 + 232) = 0;
          LODWORD(v79) = 1;
          v15 = 6;
          if ((_DWORD)v57 == 1)
            *(_BYTE *)(v81 + 244) = 1;
        }
        else
        {
          *(_DWORD *)(v81 + 232) = 2;
          LODWORD(v79) = 1;
          v15 = 6;
        }
        continue;
      case 7:
        if (!strncmp(byte_10044F50C, __str, 0x100uLL))
        {
          *(_DWORD *)(v81 + 240) = 0;
          if (strncmp("BLACKANDWHITE", __str, 0x100uLL))
          {
LABEL_130:
            if (strncmp("GRAYSCALE", __str, 0x100uLL))
              goto LABEL_131;
            goto LABEL_171;
          }
        }
        else if (strncmp("BLACKANDWHITE", __str, 0x100uLL))
        {
          goto LABEL_130;
        }
        *(_DWORD *)(v81 + 240) = 1;
        if (strncmp("GRAYSCALE", __str, 0x100uLL))
        {
LABEL_131:
          if (strncmp("GRAYSCALE_ALPHA", __str, 0x100uLL))
            goto LABEL_132;
          goto LABEL_172;
        }
LABEL_171:
        *(_DWORD *)(v81 + 240) = 2;
        if (strncmp("GRAYSCALE_ALPHA", __str, 0x100uLL))
        {
LABEL_132:
          if (strncmp("RGB", __str, 0x100uLL))
            goto LABEL_133;
          goto LABEL_173;
        }
LABEL_172:
        *(_DWORD *)(v81 + 240) = 3;
        if (strncmp("RGB", __str, 0x100uLL))
          goto LABEL_133;
LABEL_173:
        *(_DWORD *)(v81 + 240) = 4;
LABEL_133:
        v15 = 7;
        if (!strncmp("RGB_ALPHA", __str, 0x100uLL))
          *(_DWORD *)(v81 + 240) = 5;
        continue;
      default:
        v75 = __cxa_allocate_exception(0x58uLL);
        sub_1001F37D4(&__endptr, "Invalid header");
        sub_1001F37D4(v83, "readHeader");
        sub_1001F37D4(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
        sub_100294558((uint64_t)v75, -2, (uint64_t *)&__endptr, v83, v82, 449);
        *v75 = &off_10044FC60;
    }
  }
}

uint64_t sub_1002A5698(uint64_t a1, int *a2)
{
  int *v4;
  unsigned int v5;
  size_t v6;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  double v11;
  int8x16_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v19;
  int *v20;
  char *v21;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  uint64_t v34;
  int8x8_t v35;
  _BYTE *v36;
  uint64_t v37;
  char v38;
  uint64_t (*v39)(char *, int *, _QWORD, _QWORD, uint64_t);
  uint64_t v40;
  int v41;
  char *v42;
  char *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  _BYTE *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  int *v62;
  uint64_t v63;
  int8x16_t *v64;
  int8x16_t *v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int16x8_t *v70;
  int8x8_t *v71;
  uint64_t v72;
  int16x8_t v73;
  char *v74;
  char *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  char *v80;
  __int16 v81;
  char *v82;
  char *v83;
  char v84;
  uint64_t v85;
  int *v86;
  char *v87;
  __int16 v88;
  int v89;
  int v90;
  int v91;
  int v92;
  _BYTE *v93;
  uint64_t v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  int v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  const char *v108;
  int8x16_t v109;
  int8x16_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  int8x8_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  _BYTE *v120;
  BOOL v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL8 v128;
  int v129[2];
  int v130;
  int v131;
  unsigned int v132;
  __int16 v133[516];
  char *v134;
  uint64_t v135;
  char v136;
  _BYTE v137[15];
  uint64_t v138;
  _BYTE v139[1000];
  int8x8_t v140[128];
  int8x8x2_t v141;
  int8x8x2_t v142;
  int8x16x2_t v143;
  int8x16x2_t v144;
  int8x16x2_t v145;
  int8x16x2_t v146;

  v4 = (int *)*((_QWORD *)a2 + 2);
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 10);
  v7 = *(_DWORD *)(a1 + 16);
  v8 = (*(_DWORD *)(a1 + 228) * *(_DWORD *)(a1 + 8));
  v134 = &v136;
  v135 = 2 * (int)v8;
  if ((2 * v8) >= 0x409)
    operator new[]();
  if ((*(_DWORD *)(a1 + 236) & 0x80000000) != 0 || (sub_10029DDC4(a1 + 160) & 1) == 0)
  {
    v94 = 0;
    goto LABEL_155;
  }
  v9 = *(_DWORD *)(a1 + 240);
  if (v9)
  {
    v127 = 0;
    v128 = 0;
    v10 = (char *)&unk_10044F508 + 288 * v9;
  }
  else
  {
    v10 = 0;
    v128 = *(_DWORD *)(a1 + 228) > 2;
    v127 = 2 * v128;
  }
  sub_10029E194(a1 + 160, *(_DWORD *)(a1 + 236));
  v13 = (v5 >> 3) & 0x1FF;
  v132 = v13 + 1;
  v14 = ((0x88442211 >> (4 * (v7 & 7))) & 0xF) * v8;
  v15 = *(_DWORD *)(a1 + 232);
  if (v15 != (*a2 & 7) || v132 != *(_DWORD *)(a1 + 228) || *(_BYTE *)(a1 + 244))
  {
    if (*(_BYTE *)(a1 + 244))
    {
      if (v13 == 2)
      {
        sub_1002B0E68(v140, 1, 0, v11, v12);
        if (*(int *)(a1 + 12) >= 1)
        {
          v89 = 0;
          do
          {
            sub_10029E634(a1 + 160, &v136, v14);
            sub_1002B16B4(v4, &v136, *(_DWORD *)(a1 + 8), (uint64_t)v140);
            ++v89;
            v4 = (int *)((char *)v4 + v6);
          }
          while (v89 < *(_DWORD *)(a1 + 12));
        }
      }
      else if (!v13)
      {
        v133[0] = -256;
        if (*(int *)(a1 + 12) >= 1)
        {
          v90 = 0;
          do
          {
            sub_10029E634(a1 + 160, &v136, v14);
            sub_1002B17B8(v4, &v136, *(_DWORD *)(a1 + 8), (unsigned __int8 *)v133);
            ++v90;
            v4 = (int *)((char *)v4 + v6);
          }
          while (v90 < *(_DWORD *)(a1 + 12));
        }
      }
      goto LABEL_133;
    }
    if (*(int *)(a1 + 12) >= 1)
    {
      v125 = (v5 >> 3) & 0x1FF;
      v130 = v14;
      v16 = 0;
      v19 = &v136 < &v137[2 * v8 - 1] && &v136 < &v137[v8 - 1] || v8 < 8;
      v123 = v19;
      v124 = v8 & 0xFFFFFFF8;
      v126 = v8 & 0xFFFFFFE0;
      v20 = v4 + 1;
      v21 = (char *)v4 + 2;
      while (1)
      {
        sub_10029E634(a1 + 160, &v136, v130);
        if (*(_DWORD *)(a1 + 232) != 2 || (int)v8 < 1)
        {
          v23 = *a2;
          v24 = *a2 & 7;
          v25 = *(_DWORD *)(a1 + 228);
          if (v132 == v25)
            goto LABEL_26;
          goto LABEL_50;
        }
        if (v8 < 8)
        {
          v26 = 0;
LABEL_46:
          v36 = &v137[2 * v26];
          v37 = v8 - v26;
          do
          {
            v38 = *(v36 - 1);
            *(v36 - 1) = *v36;
            *v36 = v38;
            v36 += 2;
            --v37;
          }
          while (v37);
          goto LABEL_48;
        }
        if (v8 >= 0x20)
        {
          v28 = v8 & 0xFFFFFFE0;
          v29 = v139;
          do
          {
            v30 = v29 - 32;
            v143 = vld2q_s8(v30);
            v145 = vld2q_s8(v29);
            v31 = v143.val[0];
            v32 = v145.val[0];
            vst2q_s8(v30, *(int8x16x2_t *)((char *)&v143 + 16));
            vst2q_s8(v29, *(int8x16x2_t *)((char *)&v145 + 16));
            v29 += 64;
            v28 -= 32;
          }
          while (v28);
          if (v126 == v8)
            goto LABEL_48;
          v26 = v8 & 0xFFFFFFE0;
          v27 = v26;
          if ((v8 & 0x18) == 0)
            goto LABEL_46;
        }
        else
        {
          v27 = 0;
        }
        v33 = &v137[2 * v27 - 1];
        v34 = v27 - (v8 & 0xFFFFFFF8);
        do
        {
          v141 = vld2_s8(v33);
          v35 = v141.val[0];
          vst2_s8(v33, *(int8x8x2_t *)((char *)&v141 + 8));
          v33 += 16;
          v34 += 8;
        }
        while (v34);
        v26 = v8 & 0xFFFFFFF8;
        if (v124 != v8)
          goto LABEL_46;
LABEL_48:
        v23 = *a2;
        v24 = *a2 & 7;
        if ((*a2 & 7) != 0)
        {
          v25 = *(_DWORD *)(a1 + 228);
          if (v132 == v25)
            goto LABEL_26;
          goto LABEL_50;
        }
        if (v123)
        {
          v45 = 0;
          do
          {
LABEL_92:
            v137[v45 - 1] = v137[2 * v45];
            ++v45;
          }
          while (v8 != v45);
          goto LABEL_93;
        }
        if (v8 >= 0x20)
        {
          v63 = v8 & 0xFFFFFFE0;
          v64 = (int8x16_t *)&v138;
          v65 = (int8x16_t *)v139;
          do
          {
            v67 = v65[-2];
            v66 = v65[-1];
            v69 = *v65;
            v68 = v65[1];
            v65 += 4;
            v64[-1] = vuzp2q_s8(v67, v66);
            *v64 = vuzp2q_s8(v69, v68);
            v64 += 2;
            v63 -= 32;
          }
          while (v63);
          v45 = v8 & 0xFFFFFFE0;
          if (v126 == v8)
            goto LABEL_93;
          v51 = v8 & 0xFFFFFFE0;
          if ((v8 & 0x18) == 0)
            goto LABEL_92;
        }
        else
        {
          v51 = 0;
        }
        v70 = (int16x8_t *)&v137[2 * v51 - 1];
        v71 = (int8x8_t *)&v137[v51 - 1];
        v72 = v51 - (v8 & 0xFFFFFFF8);
        do
        {
          v73 = *v70++;
          *v71++ = vshrn_n_s16(v73, 8uLL);
          v72 += 8;
        }
        while (v72);
        v45 = v8 & 0xFFFFFFF8;
        if (v124 != v8)
          goto LABEL_92;
LABEL_93:
        v24 = 0;
        v25 = *(_DWORD *)(a1 + 228);
        if (v132 == v25)
        {
LABEL_26:
          memcpy(v4, &v136, v6);
          goto LABEL_27;
        }
LABEL_50:
        if (!v10)
        {
          v46 = v25;
          v47 = *(int *)(a1 + 8);
          if ((_DWORD)v24 == 2)
          {
            v59 = &v137[2 * v47 - 1];
            if (v125)
            {
              if (v125 == 2 && (int)v47 >= 1)
              {
                v60 = 2 * v46;
                v61 = &v136;
                v62 = v4;
                do
                {
                  *(_WORD *)v62 = *(_WORD *)v61;
                  *((_WORD *)v62 + 1) = *(_WORD *)&v61[2 * v128];
                  *((_WORD *)v62 + 2) = *(_WORD *)&v61[2 * v127];
                  v61 += v60;
                  v62 = (int *)((char *)v62 + 6);
                }
                while (v61 < v59);
              }
            }
            else if ((int)v47 >= 1)
            {
              v85 = 2 * v46;
              v86 = v20;
              v87 = &v136;
              do
              {
                v88 = *(_WORD *)v87;
                *(_WORD *)v86 = *(_WORD *)v87;
                *((_WORD *)v86 - 1) = v88;
                *((_WORD *)v86 - 2) = v88;
                v87 += v85;
                v86 = (int *)((char *)v86 + 6);
              }
              while (v87 < v59);
            }
          }
          else if (!(_DWORD)v24)
          {
            v48 = &v137[v47 - 1];
            if (v125)
            {
              if (v125 == 2)
              {
                v49 = &v136;
                v50 = v4;
                if ((int)v47 >= 1)
                {
                  do
                  {
                    *v50 = *v49;
                    v50[1] = v49[v128];
                    v50[2] = v49[v127];
                    v50 += 3;
                    v49 += v46;
                  }
                  while (v49 < v48);
                }
              }
            }
            else if ((int)v47 >= 1)
            {
              v82 = v21;
              v83 = &v136;
              do
              {
                v84 = *v83;
                *v82 = *v83;
                *(v82 - 1) = v84;
                *(v82 - 2) = v84;
                v83 += v46;
                v82 += 3;
              }
              while (v83 < v48);
            }
          }
          goto LABEL_27;
        }
        v39 = (uint64_t (*)(char *, int *, _QWORD, _QWORD, uint64_t))*((_QWORD *)v10 + 33);
        if (!v39)
          goto LABEL_54;
        if ((v39(&v136, v4, *(unsigned int *)(a1 + 8), v132, v24) & 1) == 0)
        {
          v25 = *(_DWORD *)(a1 + 228);
          v23 = *a2;
LABEL_54:
          v40 = *(int *)(a1 + 8);
          v41 = v23 & 7;
          if (v41 == 2)
          {
            v52 = &v137[2 * v40 - 1];
            if (v125)
            {
              if (v125 == 2 && (int)v40 >= 1)
              {
                v53 = *((unsigned int *)v10 + 70);
                v54 = *((unsigned int *)v10 + 69);
                v55 = *((unsigned int *)v10 + 68);
                v56 = 2 * v25;
                v57 = &v136;
                v58 = v4;
                do
                {
                  *(_WORD *)v58 = *(_WORD *)&v57[2 * v53];
                  *((_WORD *)v58 + 1) = *(_WORD *)&v57[2 * v54];
                  *((_WORD *)v58 + 2) = *(_WORD *)&v57[2 * v55];
                  v57 += v56;
                  v58 = (int *)((char *)v58 + 6);
                }
                while (v57 < v52);
              }
            }
            else if ((int)v40 >= 1)
            {
              v77 = *((unsigned int *)v10 + 71);
              v78 = 2 * v25;
              v79 = v20;
              v80 = &v136;
              do
              {
                v81 = *(_WORD *)&v80[2 * v77];
                *(_WORD *)v79 = v81;
                *((_WORD *)v79 - 1) = v81;
                *((_WORD *)v79 - 2) = v81;
                v80 += v78;
                v79 = (int *)((char *)v79 + 6);
              }
              while (v80 < v52);
            }
          }
          else if (!v41)
          {
            v42 = &v137[v40 - 1];
            if (v125)
            {
              if (v125 == 2 && (int)v40 >= 1)
              {
                v43 = &v136;
                v44 = v4;
                do
                {
                  *(_BYTE *)v44 = v43[*((unsigned int *)v10 + 70)];
                  *((_BYTE *)v44 + 1) = v43[*((unsigned int *)v10 + 69)];
                  *((_BYTE *)v44 + 2) = v43[*((unsigned int *)v10 + 68)];
                  v44 = (int *)((char *)v44 + 3);
                  v43 += v25;
                }
                while (v43 < v42);
              }
            }
            else if ((int)v40 >= 1)
            {
              v74 = v21;
              v75 = &v136;
              do
              {
                v76 = v75[*((unsigned int *)v10 + 71)];
                *v74 = v76;
                *(v74 - 1) = v76;
                *(v74 - 2) = v76;
                v75 += v25;
                v74 += 3;
              }
              while (v75 < v42);
            }
          }
        }
LABEL_27:
        ++v16;
        v4 = (int *)((char *)v4 + v6);
        v20 = (int *)((char *)v20 + v6);
        v21 += v6;
        if (v16 >= *(_DWORD *)(a1 + 12))
          goto LABEL_133;
      }
    }
    goto LABEL_133;
  }
  v91 = *(_DWORD *)(a1 + 12);
  if (v15 != 2)
  {
    sub_10029E634(a1 + 160, (char *)v4, v91 * v14);
    goto LABEL_133;
  }
  if (v91 < 1)
  {
LABEL_133:
    v94 = 1;
    goto LABEL_155;
  }
  if ((int)v8 <= 0)
  {
    v102 = 0;
    v94 = 1;
    do
    {
      sub_10029E634(a1 + 160, &v136, v14);
      ++v102;
    }
    while (v102 < *(_DWORD *)(a1 + 12));
    goto LABEL_155;
  }
  v131 = v14;
  if (v8 >= 8)
  {
    v103 = 0;
    *(_QWORD *)v129 = 2 * v8;
    v104 = v4;
    v94 = 1;
    while (1)
    {
      sub_10029E634(a1 + 160, &v136, v131);
      if (v104 >= (int *)&v137[*(_QWORD *)v129 - 1] || &v136 >= (char *)v4 + *(_QWORD *)v129 + v6 * v103)
      {
        if (v8 < 0x20)
        {
          v106 = 0;
LABEL_148:
          v112 = 2 * v106;
          v113 = v106 - (v8 & 0xFFFFFFF8);
          do
          {
            v114 = &v137[v112 - 1];
            v142 = vld2_s8(v114);
            v115 = v142.val[0];
            v116 = (char *)v104 + v112;
            vst2_s8(v116, *(int8x8x2_t *)((char *)&v142 + 8));
            v112 += 16;
            v113 += 8;
          }
          while (v113);
          v105 = v8 & 0xFFFFFFF8;
          if (v105 == v8)
            goto LABEL_138;
          goto LABEL_151;
        }
        v107 = 0;
        do
        {
          v108 = &v137[v107 - 1];
          v144 = vld2q_s8(v108);
          v108 += 32;
          v109 = v144.val[0];
          v146 = vld2q_s8(v108);
          v110 = v146.val[0];
          v111 = (char *)&v104[v107 / 4];
          vst2q_s8(v111, *(int8x16x2_t *)((char *)&v144 + 16));
          v111 += 32;
          vst2q_s8(v111, *(int8x16x2_t *)((char *)&v146 + 16));
          v107 += 64;
        }
        while (((2 * v8) & 0x1FFFFFFC0) != v107);
        if ((v8 & 0xFFFFFFE0) == v8)
          goto LABEL_138;
        v105 = v8 & 0xFFFFFFE0;
        v106 = v105;
        if ((v8 & 0x18) != 0)
          goto LABEL_148;
      }
      else
      {
        v105 = 0;
      }
LABEL_151:
      v117 = v8 - v105;
      v118 = 2 * v105;
      do
      {
        v119 = v137[v118 - 1];
        v120 = (char *)v104 + v118;
        *v120 = v137[v118];
        v120[1] = v119;
        v118 += 2;
        --v117;
      }
      while (v117);
LABEL_138:
      ++v103;
      v104 = (int *)((char *)v104 + v6);
      if ((int)v103 >= *(_DWORD *)(a1 + 12))
        goto LABEL_155;
    }
  }
  v92 = 0;
  v93 = (char *)v4 + 6;
  v94 = 1;
  do
  {
    sub_10029E634(a1 + 160, &v136, v14);
    v95 = v136;
    *(v93 - 6) = v137[0];
    *(v93 - 5) = v95;
    if ((_DWORD)v8 != 1)
    {
      v96 = v137[1];
      *(v93 - 4) = v137[2];
      *(v93 - 3) = v96;
      if ((_DWORD)v8 != 2)
      {
        v97 = v137[3];
        *(v93 - 2) = v137[4];
        *(v93 - 1) = v97;
        if ((_DWORD)v8 != 3)
        {
          v98 = v137[5];
          *v93 = v137[6];
          v93[1] = v98;
          if ((_DWORD)v8 != 4)
          {
            v99 = v137[7];
            v93[2] = v137[8];
            v93[3] = v99;
            if ((_DWORD)v8 != 5)
            {
              v100 = v137[9];
              v93[4] = v137[10];
              v93[5] = v100;
              if ((_DWORD)v8 != 6)
              {
                v101 = v137[11];
                v93[6] = v137[12];
                v93[7] = v101;
              }
            }
          }
        }
      }
    }
    ++v92;
    v93 += v6;
  }
  while (v92 < *(_DWORD *)(a1 + 12));
LABEL_155:
  if (v134 != &v136 && v134 != 0)
    operator delete[]();
  return v94;
}

void sub_1002A6190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25 != a23 && a25)
    operator delete[]();
  if (STACK[0x498] != a18)
  {
    if (STACK[0x498])
      operator delete[]();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002A61EC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_10029F688(a1);
  *v2 = off_10044FBD8;
  v3 = v2 + 1;
  sub_10029434C(v2 + 1);
  qmemcpy((void *)sub_10029430C(v3, 33), "Portable arbitrary format (*.pam)", 33);
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

void sub_1002A625C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  *v1 = off_10044EFB0;
  sub_10029434C(v1 + 7);
  sub_10029434C(v1 + 3);
  sub_10029434C(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002A629C(uint64_t *a1)
{
  *a1 = (uint64_t)off_10044EFB0;
  sub_10029434C(a1 + 7);
  sub_10029434C(a1 + 3);
  sub_10029434C(a1 + 1);
  return a1;
}

void sub_1002A62EC(uint64_t *a1)
{
  *a1 = (uint64_t)off_10044EFB0;
  sub_10029434C(a1 + 7);
  sub_10029434C(a1 + 3);
  sub_10029434C(a1 + 1);
  operator delete();
}

void sub_1002A634C()
{
  operator new();
}

void sub_1002A63F4()
{
  operator delete();
}

BOOL sub_1002A6418(uint64_t a1, int a2)
{
  return (a2 & 0xFFFFFFFD) == 0;
}

uint64_t sub_1002A6424(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  unint64_t v28;
  char *v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  __int128 *v34;
  _OWORD *v35;
  unint64_t v36;
  __int128 v37;
  char *v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int8x16_t v60;
  int8x16_t v61;
  char *v62;
  uint64_t v63;
  int8x8_t v64;
  char *v65;
  char v66;
  uint64_t i;
  _QWORD v69[8];
  _DWORD *v70;
  uint64_t v71;
  _DWORD v72[8];
  uint64_t v73;
  int8x8x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;

  sub_10029E910((uint64_t)v69);
  v69[0] = off_10044EE48;
  v6 = *(_DWORD *)(a2 + 4);
  v7 = __OFSUB__(v6, 1);
  v8 = v6 - 1;
  if (v8 < 0 == v7)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v8);
    v10 = *(unsigned int *)(a2 + 8);
    v11 = *(_DWORD *)(a2 + 12);
    v12 = *a3;
    v13 = a3[1];
    v14 = v13 - *a3;
    if (v13 != *a3)
      goto LABEL_3;
LABEL_9:
    v16 = 0;
    goto LABEL_10;
  }
  LODWORD(v9) = 0;
  v10 = *(unsigned int *)(a2 + 8);
  v11 = *(_DWORD *)(a2 + 12);
  v12 = *a3;
  v19 = a3[1];
  v14 = v19 - *a3;
  if (v19 == *a3)
    goto LABEL_9;
LABEL_3:
  v15 = 0;
  v16 = 0;
  v17 = v14 >> 2;
  do
  {
    if (*(_DWORD *)(v12 + 4 * v15) == 128)
    {
      v18 = *(_DWORD *)(v12 + 4 * v15 + 4);
      if (v18 - 1 <= 4)
        v16 = (char *)&unk_10044F508 + 288 * v18;
    }
    v15 += 2;
  }
  while (v15 < v17);
LABEL_10:
  v20 = v11 * v9;
  v21 = *(char **)(a2 + 16);
  v22 = *(_QWORD *)(a1 + 40);
  if (!v22)
  {
    if (sub_10029ECB0((uint64_t)v69, (const char **)(a1 + 24)))
      goto LABEL_36;
LABEL_18:
    v32 = 0;
    goto LABEL_70;
  }
  if ((sub_10029ED30((uint64_t)v69, v22) & 1) == 0)
    goto LABEL_18;
  v23 = *(_QWORD *)(a1 + 40);
  v24 = (v20 * (int)v10 + 511) & 0xFFFFFFFFFFFFFF00;
  v25 = *(_BYTE **)v23;
  if (*(_QWORD *)(v23 + 16) - *(_QWORD *)v23 < v24)
  {
    if (v20 * (int)v10 + 511 < 0)
      sub_100008F3C();
    v26 = *(_BYTE **)(v23 + 8);
    v27 = operator new((v20 * (int)v10 + 511) & 0xFFFFFFFFFFFFFF00);
    v28 = v26 - v25;
    v29 = &v27[v26 - v25];
    v30 = v29;
    if (v26 == v25)
      goto LABEL_34;
    if (v28 < 8)
    {
      v31 = &v27[v26 - v25];
      goto LABEL_31;
    }
    v31 = &v27[v26 - v25];
    if ((unint64_t)(v25 - v27) >= 0x20)
    {
      if (v28 < 0x20)
      {
        v33 = 0;
        goto LABEL_26;
      }
      v33 = v28 & 0xFFFFFFFFFFFFFFE0;
      v34 = (__int128 *)(v26 - 16);
      v35 = &v27[v26 - 16 - v25];
      v36 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v37 = *v34;
        *(v35 - 1) = *(v34 - 1);
        *v35 = v37;
        v35 -= 2;
        v34 -= 2;
        v36 -= 32;
      }
      while (v36);
      if (v28 == v33)
        goto LABEL_33;
      if ((v28 & 0x18) != 0)
      {
LABEL_26:
        v31 = &v29[-(v28 & 0xFFFFFFFFFFFFFFF8)];
        v38 = &v26[-v33 - 8];
        v39 = v38 - v25;
        v40 = v33 - (v28 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v41 = *(_QWORD *)v38;
          v38 -= 8;
          *(_QWORD *)&v27[v39] = v41;
          v39 -= 8;
          v40 += 8;
        }
        while (v40);
        v26 -= v28 & 0xFFFFFFFFFFFFFFF8;
        if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_33;
        goto LABEL_31;
      }
      v31 = &v29[-v33];
      v26 -= v33;
    }
LABEL_31:
    v42 = v31 - 1;
    do
    {
      v43 = *--v26;
      *v42-- = v43;
    }
    while (v26 != v25);
LABEL_33:
    v30 = v27;
LABEL_34:
    *(_QWORD *)v23 = v30;
    *(_QWORD *)(v23 + 8) = v29;
    *(_QWORD *)(v23 + 16) = &v27[v24];
    if (v25)
      operator delete(v25);
  }
LABEL_36:
  v44 = *(_DWORD *)(a2 + 4);
  v7 = __OFSUB__(v44, 1);
  v45 = v44 - 1;
  if (v45 < 0 != v7)
    LODWORD(v46) = 0;
  else
    v46 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v45);
  v47 = v46 * v11;
  if (v47 <= 256)
    v48 = 256;
  else
    v48 = v47;
  v70 = v72;
  v71 = v48;
  if (v48 >= 0x409)
    operator new[]();
  v72[0] = 669520;
  v49 = sprintf((char *)v72 + 3, "WIDTH %d\n", v11) + 3;
  v50 = v49 + sprintf((char *)v72 + (int)v49, "HEIGHT %d\n", v10);
  LODWORD(v50) = sprintf((char *)v72 + v50, "DEPTH %d\n", ((*(_DWORD *)a2 >> 3) & 0x1FF) + 1) + v50;
  v51 = sprintf((char *)v72 + (int)v50, "MAXVAL %d\n", ~(-1 << (8 * ((0x88442211 >> (4 * (*(_BYTE *)a2 & 7))) & 0xF))))
      + v50;
  if (v16)
    v51 += sprintf((char *)v72 + v51, "TUPLTYPE %s\n", v16 + 4);
  *(_QWORD *)((char *)v72 + v51) = 0xA524448444E45;
  v52 = strlen((const char *)v72);
  sub_10029EEF4(v69, (char *)v72, v52);
  if ((*(_DWORD *)a2 & 7) != 0)
  {
    if ((*(_DWORD *)a2 & 7) == 2 && (int)v10 >= 1)
    {
      if (v20 > 0)
      {
        v53 = 0;
        v54 = ((unint64_t)(v20 - 1) >> 1) + 1;
        while (1)
        {
          memcpy(v72, (const void *)(*(_QWORD *)(a2 + 16) + **(_QWORD **)(a2 + 72) * v53), v20);
          if (v20 >= 0xF)
          {
            if (v20 < 0x3F)
            {
              v56 = 0;
LABEL_59:
              v62 = (char *)v72 + 2 * v56;
              v63 = v56 - (v54 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v74 = vld2_s8(v62);
                v64 = v74.val[0];
                vst2_s8(v62, *(int8x8x2_t *)((char *)&v74 + 8));
                v62 += 16;
                v63 += 8;
              }
              while (v63);
              v55 = 2 * (v54 & 0xFFFFFFFFFFFFFFF8);
              if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_63;
              goto LABEL_62;
            }
            v57 = v54 & 0xFFFFFFFFFFFFFFE0;
            v58 = (char *)&v73;
            do
            {
              v59 = v58 - 32;
              v75 = vld2q_s8(v59);
              v76 = vld2q_s8(v58);
              v60 = v75.val[0];
              v61 = v76.val[0];
              vst2q_s8(v59, *(int8x16x2_t *)((char *)&v75 + 16));
              vst2q_s8(v58, *(int8x16x2_t *)((char *)&v76 + 16));
              v58 += 64;
              v57 -= 32;
            }
            while (v57);
            if (v54 == (v54 & 0xFFFFFFFFFFFFFFE0))
              goto LABEL_63;
            v56 = v54 & 0xFFFFFFFFFFFFFFE0;
            v55 = 2 * (v54 & 0xFFFFFFFFFFFFFFE0);
            if ((v54 & 0x18) != 0)
              goto LABEL_59;
          }
          else
          {
            v55 = 0;
          }
          do
          {
LABEL_62:
            v65 = (char *)v72 + v55;
            v66 = *((_BYTE *)v72 + v55);
            *v65 = *((_BYTE *)v72 + v55 + 1);
            v65[1] = v66;
            v55 += 2;
          }
          while (v55 < v20);
LABEL_63:
          sub_10029EEF4(v69, (char *)v72, v20);
          if (++v53 == v10)
            goto LABEL_66;
        }
      }
      for (i = 0; i != v10; ++i)
      {
        memcpy(v72, (const void *)(*(_QWORD *)(a2 + 16) + **(_QWORD **)(a2 + 72) * i), v20);
        sub_10029EEF4(v69, (char *)v72, v20);
      }
    }
  }
  else
  {
    sub_10029EEF4(v69, v21, v20 * v10);
  }
LABEL_66:
  sub_10029ED88((uint64_t)v69);
  if (v70 != v72 && v70)
    operator delete[]();
  v32 = 1;
LABEL_70:
  sub_10029EE14((uint64_t)v69);
  return v32;
}

void sub_1002A69D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_10029EE14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002A69F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  if (a24 != v24 && a24 != 0)
    operator delete[]();
  sub_10029EE14((uint64_t)&a16);
  _Unwind_Resume(a1);
}

